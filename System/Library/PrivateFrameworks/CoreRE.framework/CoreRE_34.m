uint64_t physx::Ext::Joint<physx::PxPrismaticJoint,physx::PxPrismaticJointGeneratedValues>::release(uint64_t a1)
{
  return (***(uint64_t (****)(_QWORD))(a1 + 96))(*(_QWORD *)(a1 + 96));
}

const char *physx::PxPrismaticJoint::getConcreteTypeName(physx::PxPrismaticJoint *this)
{
  return "PxPrismaticJoint";
}

void physx::Ext::PrismaticJoint::~PrismaticJoint(physx::Ext::PrismaticJoint *this)
{
  *(_QWORD *)this = &off_24ED98BA0;
  *((_QWORD *)this + 3) = &unk_24ED98D48;
  if ((*((_BYTE *)this + 10) & 1) != 0)
  {
    if (*((_QWORD *)this + 13))
      (*(void (**)(uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
    *((_QWORD *)this + 13) = 0;
  }
}

{
  *(_QWORD *)this = &off_24ED98BA0;
  *((_QWORD *)this + 3) = &unk_24ED98D48;
  if ((*((_BYTE *)this + 10) & 1) != 0)
  {
    if (*((_QWORD *)this + 13))
      (*(void (**)(uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
    *((_QWORD *)this + 13) = 0;
  }
  (*(void (**)(uint64_t, physx::Ext::PrismaticJoint *))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24)
                                                                + 24))(physx::shdfnd::Foundation::mInstance + 24, this);
}

BOOL physx::PxPrismaticJoint::isKindOf(physx::PxPrismaticJoint *this, const char *a2)
{
  return !strcmp("PxPrismaticJoint", a2) || physx::PxJoint::isKindOf(this, a2);
}

uint64_t physx::Ext::Joint<physx::PxPrismaticJoint,physx::PxPrismaticJointGeneratedValues>::setActors(uint64_t a1, uint64_t a2, uint64_t a3)
{
  float v6;
  float v7;
  float v8;
  float v9;
  float v10;
  float v11;
  float v12;
  float v13;
  float v14;
  float v15;
  float v16;
  float v17;
  float v18;
  float v19;
  float v20;
  float v21;
  float v22;
  float *v23;
  float v24;
  float v25;
  float v26;
  float v27;
  float v28;
  float v29;
  float v30;
  float v31;
  float v32;
  float v33;
  float v34;
  float v35;
  float v36;
  float v37;
  float v38;
  float *v39;
  float v41;
  float v42;
  float v43;
  float v44;
  float v45;
  float v46;
  float v47;

  (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 96) + 64))(*(_QWORD *)(a1 + 96));
  physx::Ext::Joint<physx::PxD6Joint,physx::PxD6JointGeneratedValues>::getCom(&v41, a2);
  v6 = v43;
  v7 = (float)(*(float *)(a1 + 56) - v45) + (float)(*(float *)(a1 + 56) - v45);
  v8 = (float)(*(float *)(a1 + 60) - v46) + (float)(*(float *)(a1 + 60) - v46);
  v9 = (float)(*(float *)(a1 + 64) - v47) + (float)(*(float *)(a1 + 64) - v47);
  v10 = (float)(v44 * v44) + -0.5;
  v11 = (float)((float)-(float)(v42 * v8) - (float)(v41 * v7)) - (float)(v43 * v9);
  v12 = (float)((float)(v44 * (float)((float)(v43 * v8) - (float)(v42 * v9))) + (float)(v7 * v10)) - (float)(v41 * v11);
  v13 = (float)(v44 * (float)((float)(v41 * v9) - (float)(v43 * v7))) + (float)(v8 * v10);
  v14 = (float)(v44 * (float)((float)(v42 * v7) - (float)(v41 * v8))) + (float)(v9 * v10);
  v16 = *(float *)(a1 + 48);
  v15 = *(float *)(a1 + 52);
  v17 = *(float *)(a1 + 40);
  v18 = *(float *)(a1 + 44);
  v19 = (float)((float)((float)(v44 * v18) - (float)(v42 * v15)) - (float)(v43 * v17)) + (float)(v16 * v41);
  v20 = (float)((float)((float)(v44 * v16) - (float)(v43 * v15)) - (float)(v41 * v18)) + (float)(v17 * v42);
  v21 = v13 - (float)(v42 * v11);
  v22 = (float)((float)((float)(v41 * v17) + (float)(v44 * v15)) + (float)(v42 * v18)) + (float)(v43 * v16);
  v23 = *(float **)(a1 + 104);
  v23[4] = (float)((float)((float)(v44 * v17) - (float)(v41 * v15)) - (float)(v42 * v16)) + (float)(v18 * v43);
  v23[5] = v19;
  v23[6] = v20;
  v23[7] = v22;
  v23[8] = v12;
  v23[9] = v21;
  v23[10] = v14 - (float)(v6 * v11);
  physx::Ext::Joint<physx::PxD6Joint,physx::PxD6JointGeneratedValues>::getCom(&v41, a3);
  v24 = (float)(*(float *)(a1 + 84) - v45) + (float)(*(float *)(a1 + 84) - v45);
  v25 = (float)(*(float *)(a1 + 88) - v46) + (float)(*(float *)(a1 + 88) - v46);
  v26 = (float)(*(float *)(a1 + 92) - v47) + (float)(*(float *)(a1 + 92) - v47);
  v27 = (float)(v44 * v44) + -0.5;
  v28 = (float)((float)-(float)(v42 * v25) - (float)(v41 * v24)) - (float)(v43 * v26);
  v29 = (float)((float)(v44 * (float)((float)(v43 * v25) - (float)(v42 * v26))) + (float)(v24 * v27))
      - (float)(v41 * v28);
  v30 = (float)((float)(v44 * (float)((float)(v41 * v26) - (float)(v43 * v24))) + (float)(v25 * v27))
      - (float)(v42 * v28);
  v31 = (float)((float)(v44 * (float)((float)(v42 * v24) - (float)(v41 * v25))) + (float)(v26 * v27))
      - (float)(v43 * v28);
  v33 = *(float *)(a1 + 76);
  v32 = *(float *)(a1 + 80);
  v34 = *(float *)(a1 + 68);
  v35 = *(float *)(a1 + 72);
  v36 = (float)((float)((float)(v44 * v35) - (float)(v42 * v32)) - (float)(v43 * v34)) + (float)(v33 * v41);
  v37 = (float)((float)((float)(v44 * v33) - (float)(v43 * v32)) - (float)(v41 * v35)) + (float)(v34 * v42);
  v38 = (float)((float)((float)(v41 * v34) + (float)(v44 * v32)) + (float)(v42 * v35)) + (float)(v43 * v33);
  v39 = *(float **)(a1 + 104);
  v39[11] = (float)((float)((float)(v44 * v34) - (float)(v41 * v32)) - (float)(v42 * v33)) + (float)(v35 * v43);
  v39[12] = v36;
  v39[13] = v37;
  v39[14] = v38;
  v39[15] = v29;
  v39[16] = v30;
  v39[17] = v31;
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 96) + 72))(*(_QWORD *)(a1 + 96));
}

uint64_t physx::Ext::Joint<physx::PxPrismaticJoint,physx::PxPrismaticJointGeneratedValues>::getActors(uint64_t a1, _QWORD *a2, _QWORD *a3)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 96);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 56))(result);
  *a2 = 0;
  *a3 = 0;
  return result;
}

uint64_t physx::Ext::Joint<physx::PxPrismaticJoint,physx::PxPrismaticJointGeneratedValues>::setLocalPose(uint64_t a1, unsigned int a2, float *a3)
{
  float v5;
  float v6;
  float v7;
  float v8;
  float v9;
  float v10;
  float v11;
  float v12;
  float v13;
  float v14;
  float v15;
  uint64_t v16;
  float *v17;
  float v18;
  float v19;
  float v20;
  float v21;
  float v22;
  float v23;
  float v24;
  float v25;
  float v26;
  float v27;
  float v28;
  float *v29;
  float v31;
  float v32;
  float v33;
  float v34;
  float v35;
  float v36;
  float v37;
  uint64_t v38;
  _QWORD v39[2];

  v39[1] = *MEMORY[0x24BDAC8D0];
  v5 = a3[1];
  v6 = a3[2];
  v7 = a3[3];
  v8 = sqrtf((float)((float)((float)(v5 * v5) + (float)(*a3 * *a3)) + (float)(v6 * v6)) + (float)(v7 * v7));
  v9 = *a3 / v8;
  v10 = v5 / v8;
  v11 = v6 / v8;
  v12 = v7 / v8;
  v13 = a3[4];
  v14 = a3[5];
  v15 = a3[6];
  v16 = 28 * a2;
  v17 = (float *)(a1 + v16);
  v17[10] = v9;
  v17[11] = v5 / v8;
  v17[12] = v6 / v8;
  v17[13] = v7 / v8;
  v17[14] = v13;
  v17[15] = v14;
  v17[16] = v15;
  v38 = 0;
  v39[0] = 0;
  (*(void (**)(_QWORD, uint64_t *, _QWORD *))(**(_QWORD **)(a1 + 96) + 56))(*(_QWORD *)(a1 + 96), &v38, v39);
  physx::Ext::Joint<physx::PxD6Joint,physx::PxD6JointGeneratedValues>::getCom(&v31, v39[a2 - 1]);
  v18 = (float)(v13 - v35) + (float)(v13 - v35);
  v19 = (float)(v14 - v36) + (float)(v14 - v36);
  v20 = (float)(v15 - v37) + (float)(v15 - v37);
  v21 = (float)(v34 * v34) + -0.5;
  v22 = (float)((float)-(float)(v32 * v19) - (float)(v31 * v18)) - (float)(v33 * v20);
  v23 = (float)((float)(v34 * (float)((float)(v33 * v19) - (float)(v32 * v20))) + (float)(v18 * v21))
      - (float)(v31 * v22);
  v24 = (float)((float)(v34 * (float)((float)(v31 * v20) - (float)(v33 * v18))) + (float)(v19 * v21))
      - (float)(v32 * v22);
  v25 = (float)((float)(v34 * (float)((float)(v32 * v18) - (float)(v31 * v19))) + (float)(v20 * v21))
      - (float)(v33 * v22);
  v26 = (float)((float)((float)(v34 * v10) - (float)(v32 * v12)) - (float)(v33 * v9)) + (float)(v11 * v31);
  v27 = (float)((float)((float)(v34 * v11) - (float)(v33 * v12)) - (float)(v31 * v10)) + (float)(v9 * v32);
  v28 = (float)((float)((float)(v9 * v31) + (float)(v34 * v12)) + (float)(v32 * v10)) + (float)(v33 * v11);
  v29 = (float *)(*(_QWORD *)(a1 + 104) + v16);
  v29[4] = (float)((float)((float)(v34 * v9) - (float)(v31 * v12)) - (float)(v32 * v11)) + (float)(v10 * v33);
  v29[5] = v26;
  v29[6] = v27;
  v29[7] = v28;
  v29[8] = v23;
  v29[9] = v24;
  v29[10] = v25;
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 96) + 72))(*(_QWORD *)(a1 + 96));
}

float physx::Ext::Joint<physx::PxPrismaticJoint,physx::PxPrismaticJointGeneratedValues>::getLocalPose@<S0>(uint64_t a1@<X0>, unsigned int a2@<W1>, uint64_t a3@<X8>)
{
  uint64_t v3;
  float result;

  v3 = a1 + 28 * a2;
  *(_OWORD *)a3 = *(_OWORD *)(v3 + 40);
  *(_QWORD *)(a3 + 16) = *(_QWORD *)(v3 + 56);
  result = *(float *)(v3 + 64);
  *(float *)(a3 + 24) = result;
  return result;
}

float physx::Ext::Joint<physx::PxPrismaticJoint,physx::PxPrismaticJointGeneratedValues>::getRelativeTransform@<S0>(uint64_t a1@<X0>, float *a2@<X8>)
{
  float v4;
  float v5;
  float v6;
  float v7;
  float v8;
  float v9;
  float v10;
  float v11;
  float v12;
  float v13;
  float v14;
  float v15;
  float v16;
  float v17;
  float v18;
  float v19;
  float v20;
  float v21;
  float v22;
  float v23;
  float v24;
  float v25;
  float v26;
  float v27;
  float v28;
  float v29;
  float v30;
  float v31;
  float v32;
  float v33;
  float v34;
  float v35;
  float v36;
  float v37;
  float v38;
  float v39;
  float v40;
  float v41;
  float v42;
  float v43;
  float v44;
  float v45;
  float v46;
  float v47;
  float v48;
  float v49;
  float v50;
  float v51;
  float v52;
  float v53;
  float v54;
  float v55;
  float v56;
  float v57;
  float v58;
  float result;
  float v60;
  float v61;
  float v62;
  float v63;
  float v64;
  float v65;
  uint64_t v66;
  float v67;
  float v68;
  float v69;
  float v70;
  float v71;
  uint64_t v72;
  uint64_t v73;

  v72 = 0;
  v73 = 0;
  (*(void (**)(_QWORD, uint64_t *, uint64_t *))(**(_QWORD **)(a1 + 96) + 56))(*(_QWORD *)(a1 + 96), &v73, &v72);
  v4 = 1.0;
  v5 = 0.0;
  v6 = 0.0;
  v7 = 0.0;
  v8 = 0.0;
  v9 = 0.0;
  v10 = 0.0;
  v11 = 0.0;
  v12 = 1.0;
  if (v73)
  {
    (*(void (**)(uint64_t *__return_ptr))(*(_QWORD *)v73 + 152))(&v66);
    v5 = 0.0;
    v4 = 1.0;
    v10 = *((float *)&v66 + 1);
    v11 = *(float *)&v66;
    v9 = v67;
    v12 = v68;
    v8 = v69;
    v7 = v70;
    v6 = v71;
  }
  v13 = *(float *)(a1 + 56);
  v14 = *(float *)(a1 + 60);
  v15 = *(float *)(a1 + 64);
  v16 = *(float *)(a1 + 48);
  v17 = *(float *)(a1 + 52);
  v18 = 0.0;
  v19 = 0.0;
  v20 = 0.0;
  v21 = *(float *)(a1 + 40);
  v22 = *(float *)(a1 + 44);
  v23 = 0.0;
  v24 = 0.0;
  if (v72)
  {
    v64 = v7;
    v65 = v8;
    v62 = *(float *)(a1 + 56);
    v63 = v6;
    v60 = *(float *)(a1 + 64);
    v61 = *(float *)(a1 + 60);
    (*(void (**)(uint64_t *__return_ptr))(*(_QWORD *)v72 + 152))(&v66);
    v15 = v60;
    v14 = v61;
    v13 = v62;
    v6 = v63;
    v7 = v64;
    v8 = v65;
    v23 = *((float *)&v66 + 1);
    v24 = *(float *)&v66;
    v20 = v67;
    v4 = v68;
    v19 = v69;
    v18 = v70;
    v5 = v71;
  }
  v25 = (float)((float)((float)(v12 * v17) - (float)(v11 * v21)) - (float)(v10 * v22)) - (float)(v9 * v16);
  v26 = (float)((float)((float)(v9 * v17) + (float)(v12 * v16)) + (float)(v11 * v22)) - (float)(v21 * v10);
  v27 = (float)((float)((float)(v10 * v17) + (float)(v12 * v22)) + (float)(v9 * v21)) - (float)(v16 * v11);
  v28 = (float)((float)((float)(v11 * v17) + (float)(v12 * v21)) + (float)(v10 * v16)) - (float)(v22 * v9);
  v29 = v15 + v15;
  v30 = v14 + v14;
  v31 = (float)((float)(v10 * v30) + (float)(v11 * (float)(v13 + v13))) + (float)(v9 * v29);
  v32 = (float)(v12 * v12) + -0.5;
  v33 = v6
      + (float)((float)((float)(v12 * (float)((float)(v11 * v30) - (float)(v10 * (float)(v13 + v13))))
                      + (float)(v29 * v32))
              + (float)(v9 * v31));
  v34 = v7
      + (float)((float)((float)(v12 * (float)((float)(v9 * (float)(v13 + v13)) - (float)(v11 * v29)))
                      + (float)(v30 * v32))
              + (float)(v10 * v31));
  v35 = v8
      + (float)((float)((float)(v12 * (float)((float)(v10 * v29) - (float)(v9 * v30)))
                      + (float)((float)(v13 + v13) * v32))
              + (float)(v11 * v31));
  v36 = *(float *)(a1 + 84) + *(float *)(a1 + 84);
  v37 = *(float *)(a1 + 88) + *(float *)(a1 + 88);
  v38 = *(float *)(a1 + 92) + *(float *)(a1 + 92);
  v39 = (float)(v4 * v4) + -0.5;
  v40 = (float)((float)(v23 * v37) + (float)(v24 * v36)) + (float)(v20 * v38);
  v41 = v19
      + (float)((float)((float)(v4 * (float)((float)(v23 * v38) - (float)(v20 * v37))) + (float)(v36 * v39))
              + (float)(v24 * v40));
  v42 = v18
      + (float)((float)((float)(v4 * (float)((float)(v20 * v36) - (float)(v24 * v38))) + (float)(v37 * v39))
              + (float)(v23 * v40));
  v43 = v5
      + (float)((float)((float)(v4 * (float)((float)(v24 * v37) - (float)(v23 * v36))) + (float)(v38 * v39))
              + (float)(v20 * v40));
  v45 = *(float *)(a1 + 76);
  v44 = *(float *)(a1 + 80);
  v46 = *(float *)(a1 + 68);
  v47 = *(float *)(a1 + 72);
  v48 = (float)((float)((float)(v24 * v44) + (float)(v4 * v46)) + (float)(v23 * v45)) - (float)(v47 * v20);
  v49 = (float)((float)((float)(v23 * v44) + (float)(v4 * v47)) + (float)(v20 * v46)) - (float)(v45 * v24);
  v50 = (float)((float)((float)(v20 * v44) + (float)(v4 * v45)) + (float)(v24 * v47)) - (float)(v46 * v23);
  v51 = (float)((float)((float)(v4 * v44) - (float)(v24 * v46)) - (float)(v23 * v47)) - (float)(v20 * v45);
  v52 = (float)(v41 - v35) + (float)(v41 - v35);
  v53 = (float)(v42 - v34) + (float)(v42 - v34);
  v54 = (float)(v43 - v33) + (float)(v43 - v33);
  v55 = (float)(v25 * v25) + -0.5;
  v56 = (float)((float)-(float)(v27 * v53) - (float)(v28 * v52)) - (float)(v26 * v54);
  v57 = (float)((float)(v25 * (float)((float)(v26 * v53) - (float)(v27 * v54))) + (float)(v52 * v55))
      - (float)(v28 * v56);
  v58 = (float)((float)(v25 * (float)((float)(v28 * v54) - (float)(v26 * v52))) + (float)(v53 * v55))
      - (float)(v27 * v56);
  *a2 = (float)((float)((float)(v25 * v48) - (float)(v28 * v51)) - (float)(v27 * v50)) + (float)(v49 * v26);
  a2[1] = (float)((float)((float)(v25 * v49) - (float)(v27 * v51)) - (float)(v26 * v48)) + (float)(v50 * v28);
  a2[2] = (float)((float)((float)(v25 * v50) - (float)(v26 * v51)) - (float)(v28 * v49)) + (float)(v48 * v27);
  a2[3] = (float)((float)((float)(v28 * v48) + (float)(v25 * v51)) + (float)(v27 * v49)) + (float)(v26 * v50);
  result = (float)((float)(v25 * (float)((float)(v27 * v52) - (float)(v28 * v53))) + (float)(v54 * v55))
         - (float)(v26 * v56);
  a2[4] = v57;
  a2[5] = v58;
  a2[6] = result;
  return result;
}

float physx::Ext::Joint<physx::PxPrismaticJoint,physx::PxPrismaticJointGeneratedValues>::getRelativeLinearVelocity@<S0>(uint64_t a1@<X0>, float *a2@<X8>)
{
  float v4;
  float v5;
  float v6;
  float v7;
  float v8;
  float v9;
  float v10;
  float v11;
  float v12;
  float v13;
  float v14;
  float v15;
  float v16;
  float v17;
  float v18;
  float v19;
  float v20;
  float v21;
  float v22;
  float v23;
  float v24;
  float v25;
  float v26;
  float v27;
  float v28;
  float result;
  float v30;
  float v31;
  float v32;
  float v33;
  float v34;
  float v35;
  float v36;
  float v37;
  float v38;
  float v39;
  float v40;
  float v41;
  float v42;
  float v43;
  float v44[3];
  float v45;
  float v46;
  float v47;
  float v48[3];
  _WORD *v49;
  _WORD *v50;

  v49 = 0;
  v50 = 0;
  (*(void (**)(_QWORD, _WORD **, _WORD **))(**(_QWORD **)(a1 + 96) + 56))(*(_QWORD *)(a1 + 96), &v50, &v49);
  physx::Ext::Joint<physx::PxD6Joint,physx::PxD6JointGeneratedValues>::getCom(&v34, (uint64_t)v50);
  physx::Ext::Joint<physx::PxD6Joint,physx::PxD6JointGeneratedValues>::getCom(&v30, (uint64_t)v49);
  physx::Ext::Joint<physx::PxD6Joint,physx::PxD6JointGeneratedValues>::getActorVelocity(v50, (uint64_t)v48, (uint64_t)&v45);
  physx::Ext::Joint<physx::PxD6Joint,physx::PxD6JointGeneratedValues>::getActorVelocity(v49, (uint64_t)v44, (uint64_t)&v41);
  v4 = *(float *)(a1 + 56) + *(float *)(a1 + 56);
  v5 = *(float *)(a1 + 60) + *(float *)(a1 + 60);
  v6 = *(float *)(a1 + 64) + *(float *)(a1 + 64);
  v7 = (float)(v37 * v37) + -0.5;
  v8 = (float)((float)(v5 * v35) + (float)(v34 * v4)) + (float)(v36 * v6);
  v9 = (float)((float)(v37 * (float)((float)(v35 * v6) - (float)(v36 * v5))) + (float)(v4 * v7)) + (float)(v34 * v8);
  v10 = (float)((float)(v37 * (float)((float)(v36 * v4) - (float)(v34 * v6))) + (float)(v5 * v7)) + (float)(v35 * v8);
  v11 = (float)((float)(v37 * (float)((float)(v34 * v5) - (float)(v35 * v4))) + (float)(v6 * v7)) + (float)(v36 * v8);
  v12 = *(float *)(a1 + 84) + *(float *)(a1 + 84);
  v13 = *(float *)(a1 + 88) + *(float *)(a1 + 88);
  v14 = *(float *)(a1 + 92) + *(float *)(a1 + 92);
  v15 = (float)(v33 * v33) + -0.5;
  v16 = (float)((float)(v13 * v31) + (float)(v30 * v12)) + (float)(v32 * v14);
  v17 = (float)((float)(v33 * (float)((float)(v31 * v14) - (float)(v32 * v13))) + (float)(v12 * v15))
      + (float)(v30 * v16);
  v18 = (float)((float)(v33 * (float)((float)(v32 * v12) - (float)(v30 * v14))) + (float)(v13 * v15))
      + (float)(v31 * v16);
  v19 = (float)((float)(v33 * (float)((float)(v30 * v13) - (float)(v31 * v12))) + (float)(v14 * v15))
      + (float)(v32 * v16);
  v20 = (float)(v46 * v11) - (float)(v47 * v10);
  v21 = (float)((float)(v44[1] - (float)((float)(v43 * v17) - (float)(v41 * v19))) - v48[1])
      + (float)((float)(v47 * v9) - (float)(v45 * v11));
  v22 = (float)((float)((float)(v44[0] - (float)((float)(v42 * v19) - (float)(v43 * v18))) - v48[0]) + v20) - v38;
  v23 = (float)((float)((float)(v44[2] - (float)((float)(v41 * v18) - (float)(v42 * v17))) - v48[2])
              + (float)((float)(v45 * v10) - (float)(v46 * v9)))
      - v40;
  v24 = v22 + v22;
  v25 = (float)(v21 - v39) + (float)(v21 - v39);
  v26 = v23 + v23;
  v27 = (float)((float)(v35 * v25) + (float)(v34 * v24)) + (float)(v36 * v26);
  v28 = (float)((float)(v25 * v7) - (float)((float)((float)(v36 * v24) - (float)(v34 * v26)) * v37))
      + (float)(v35 * v27);
  result = (float)((float)(v26 * v7) - (float)((float)((float)(v34 * v25) - (float)(v35 * v24)) * v37))
         + (float)(v36 * v27);
  *a2 = (float)((float)(v24 * v7) - (float)((float)((float)(v35 * v26) - (float)(v36 * v25)) * v37))
      + (float)(v34 * v27);
  a2[1] = v28;
  a2[2] = result;
  return result;
}

float physx::Ext::Joint<physx::PxPrismaticJoint,physx::PxPrismaticJointGeneratedValues>::getRelativeAngularVelocity@<S0>(uint64_t a1@<X0>, float *a2@<X8>)
{
  float v3;
  float v4;
  float v5;
  float v6;
  float v7;
  float v8;
  float v9;
  float result;
  float v11;
  float v12;
  float v13;
  float v14;
  float v15;
  float v16;
  float v17;
  float v18;
  float v19;
  float v20;
  _BYTE v21[12];
  float v22;
  float v23;
  float v24;
  _BYTE v25[12];
  _WORD *v26;
  _WORD *v27;

  v26 = 0;
  v27 = 0;
  (*(void (**)(_QWORD, _WORD **, _WORD **))(**(_QWORD **)(a1 + 96) + 56))(*(_QWORD *)(a1 + 96), &v27, &v26);
  physx::Ext::Joint<physx::PxD6Joint,physx::PxD6JointGeneratedValues>::getCom(&v11, (uint64_t)v27);
  physx::Ext::Joint<physx::PxD6Joint,physx::PxD6JointGeneratedValues>::getActorVelocity(v27, (uint64_t)v25, (uint64_t)&v22);
  physx::Ext::Joint<physx::PxD6Joint,physx::PxD6JointGeneratedValues>::getActorVelocity(v26, (uint64_t)v21, (uint64_t)&v18);
  v3 = (float)((float)(v18 - v22) - v15) + (float)((float)(v18 - v22) - v15);
  v4 = (float)((float)(v19 - v23) - v16) + (float)((float)(v19 - v23) - v16);
  v5 = (float)((float)(v20 - v24) - v17) + (float)((float)(v20 - v24) - v17);
  v6 = (float)(v14 * v14) + -0.5;
  v7 = (float)((float)(v4 * v12) + (float)(v11 * v3)) + (float)(v13 * v5);
  v8 = (float)((float)(v3 * v6) - (float)((float)((float)(v12 * v5) - (float)(v13 * v4)) * v14)) + (float)(v11 * v7);
  v9 = (float)((float)(v4 * v6) - (float)((float)((float)(v13 * v3) - (float)(v11 * v5)) * v14)) + (float)(v12 * v7);
  result = (float)((float)(v5 * v6) - (float)((float)((float)(v11 * v4) - (float)(v12 * v3)) * v14)) + (float)(v13 * v7);
  *a2 = v8;
  a2[1] = v9;
  a2[2] = result;
  return result;
}

uint64_t physx::Ext::Joint<physx::PxPrismaticJoint,physx::PxPrismaticJointGeneratedValues>::setBreakForce(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 96) + 120))(*(_QWORD *)(a1 + 96));
}

uint64_t physx::Ext::Joint<physx::PxPrismaticJoint,physx::PxPrismaticJointGeneratedValues>::getBreakForce(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 96) + 128))(*(_QWORD *)(a1 + 96));
}

uint64_t physx::Ext::Joint<physx::PxPrismaticJoint,physx::PxPrismaticJointGeneratedValues>::setConstraintFlags(uint64_t a1, __int16 *a2)
{
  uint64_t v2;
  __int16 v4;

  v2 = *(_QWORD *)(a1 + 96);
  v4 = *a2;
  return (*(uint64_t (**)(uint64_t, __int16 *))(*(_QWORD *)v2 + 80))(v2, &v4);
}

uint64_t physx::Ext::Joint<physx::PxPrismaticJoint,physx::PxPrismaticJointGeneratedValues>::setConstraintFlag(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 96) + 96))(*(_QWORD *)(a1 + 96));
}

uint64_t physx::Ext::Joint<physx::PxPrismaticJoint,physx::PxPrismaticJointGeneratedValues>::getConstraintFlags(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 96) + 88))(*(_QWORD *)(a1 + 96));
}

uint64_t physx::Ext::Joint<physx::PxPrismaticJoint,physx::PxPrismaticJointGeneratedValues>::setInvMassScale0(uint64_t a1, float a2)
{
  uint64_t v2;
  uint64_t v3;

  v2 = a1 + 96;
  v3 = *(_QWORD *)(a1 + 96);
  **(float **)(v2 + 8) = a2;
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v3 + 72))(v3);
}

float physx::Ext::Joint<physx::PxPrismaticJoint,physx::PxPrismaticJointGeneratedValues>::getInvMassScale0(uint64_t a1)
{
  return **(float **)(a1 + 104);
}

uint64_t physx::Ext::Joint<physx::PxPrismaticJoint,physx::PxPrismaticJointGeneratedValues>::setInvInertiaScale0(uint64_t a1, float a2)
{
  uint64_t v2;
  uint64_t v3;

  v2 = a1 + 96;
  v3 = *(_QWORD *)(a1 + 96);
  *(float *)(*(_QWORD *)(v2 + 8) + 4) = a2;
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v3 + 72))(v3);
}

float physx::Ext::Joint<physx::PxPrismaticJoint,physx::PxPrismaticJointGeneratedValues>::getInvInertiaScale0(uint64_t a1)
{
  return *(float *)(*(_QWORD *)(a1 + 104) + 4);
}

uint64_t physx::Ext::Joint<physx::PxPrismaticJoint,physx::PxPrismaticJointGeneratedValues>::setInvMassScale1(uint64_t a1, float a2)
{
  uint64_t v2;
  uint64_t v3;

  v2 = a1 + 96;
  v3 = *(_QWORD *)(a1 + 96);
  *(float *)(*(_QWORD *)(v2 + 8) + 8) = a2;
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v3 + 72))(v3);
}

float physx::Ext::Joint<physx::PxPrismaticJoint,physx::PxPrismaticJointGeneratedValues>::getInvMassScale1(uint64_t a1)
{
  return *(float *)(*(_QWORD *)(a1 + 104) + 8);
}

uint64_t physx::Ext::Joint<physx::PxPrismaticJoint,physx::PxPrismaticJointGeneratedValues>::setInvInertiaScale1(uint64_t a1, float a2)
{
  uint64_t v2;
  uint64_t v3;

  v2 = a1 + 96;
  v3 = *(_QWORD *)(a1 + 96);
  *(float *)(*(_QWORD *)(v2 + 8) + 12) = a2;
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v3 + 72))(v3);
}

float physx::Ext::Joint<physx::PxPrismaticJoint,physx::PxPrismaticJointGeneratedValues>::getInvInertiaScale1(uint64_t a1)
{
  return *(float *)(*(_QWORD *)(a1 + 104) + 12);
}

uint64_t physx::Ext::Joint<physx::PxPrismaticJoint,physx::PxPrismaticJointGeneratedValues>::getConstraint(uint64_t a1)
{
  return *(_QWORD *)(a1 + 96);
}

uint64_t physx::Ext::Joint<physx::PxPrismaticJoint,physx::PxPrismaticJointGeneratedValues>::setName(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 32) = a2;
  return result;
}

uint64_t physx::Ext::Joint<physx::PxPrismaticJoint,physx::PxPrismaticJointGeneratedValues>::getName(uint64_t a1)
{
  return *(_QWORD *)(a1 + 32);
}

uint64_t physx::Ext::Joint<physx::PxPrismaticJoint,physx::PxPrismaticJointGeneratedValues>::getScene(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 96);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 48))(result);
  return result;
}

float physx::Ext::PrismaticJoint::getPosition(physx::Ext::PrismaticJoint *this)
{
  uint64_t v2;
  float v3;

  (*(void (**)(uint64_t *__return_ptr))(*(_QWORD *)this + 80))(&v2);
  return v3;
}

float physx::Ext::PrismaticJoint::getVelocity(physx::Ext::PrismaticJoint *this)
{
  float v2[3];

  (*(void (**)(float *__return_ptr))(*(_QWORD *)this + 88))(v2);
  return v2[0];
}

uint64_t physx::Ext::Joint<physx::PxPrismaticJoint,physx::PxPrismaticJointGeneratedValues>::requiresObjects(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;

  (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)a2 + 16))(a2, *(_QWORD *)(a1 + 96));
  v5 = 0;
  v6 = 0;
  result = (*(uint64_t (**)(_QWORD, uint64_t *, uint64_t *))(**(_QWORD **)(a1 + 96) + 56))(*(_QWORD *)(a1 + 96), &v6, &v5);
  if (v6)
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 16))(a2);
  if (v5)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 16))(a2);
  return result;
}

uint64_t physx::Ext::Joint<physx::PxPrismaticJoint,physx::PxPrismaticJointGeneratedValues>::updatePvdProperties()
{
  return 0;
}

uint64_t physx::Ext::Joint<physx::PxPrismaticJoint,physx::PxPrismaticJointGeneratedValues>::onComShift(uint64_t a1, unsigned int a2)
{
  uint64_t v4;
  float v5;
  float v6;
  float v7;
  float v8;
  float v9;
  float v10;
  float v11;
  float v12;
  float v13;
  float v14;
  float v15;
  float v16;
  float v17;
  float v18;
  float v19;
  float *v20;
  float v22;
  float v23;
  float v24;
  float v25;
  float v26;
  float v27;
  float v28;
  uint64_t v29;
  _QWORD v30[2];

  v30[1] = *MEMORY[0x24BDAC8D0];
  v29 = 0;
  v30[0] = 0;
  (*(void (**)(_QWORD, uint64_t *, _QWORD *))(**(_QWORD **)(a1 + 96) + 56))(*(_QWORD *)(a1 + 96), &v29, v30);
  physx::Ext::Joint<physx::PxD6Joint,physx::PxD6JointGeneratedValues>::getCom(&v22, v30[a2 - 1]);
  v4 = 28 * a2;
  v5 = (float)(*(float *)(a1 + v4 + 56) - v26) + (float)(*(float *)(a1 + v4 + 56) - v26);
  v6 = (float)(*(float *)(a1 + v4 + 60) - v27) + (float)(*(float *)(a1 + v4 + 60) - v27);
  v7 = (float)(*(float *)(a1 + v4 + 64) - v28) + (float)(*(float *)(a1 + v4 + 64) - v28);
  v8 = (float)(v25 * v25) + -0.5;
  v9 = (float)((float)-(float)(v23 * v6) - (float)(v22 * v5)) - (float)(v24 * v7);
  v10 = (float)((float)(v25 * (float)((float)(v24 * v6) - (float)(v23 * v7))) + (float)(v5 * v8)) - (float)(v22 * v9);
  v11 = (float)((float)(v25 * (float)((float)(v22 * v7) - (float)(v24 * v5))) + (float)(v6 * v8)) - (float)(v23 * v9);
  v12 = (float)((float)(v25 * (float)((float)(v23 * v5) - (float)(v22 * v6))) + (float)(v7 * v8)) - (float)(v24 * v9);
  v14 = *(float *)(a1 + v4 + 48);
  v13 = *(float *)(a1 + v4 + 52);
  v15 = *(float *)(a1 + v4 + 40);
  v16 = *(float *)(a1 + v4 + 44);
  v17 = (float)((float)((float)(v25 * v16) - (float)(v23 * v13)) - (float)(v24 * v15)) + (float)(v14 * v22);
  v18 = (float)((float)((float)(v25 * v14) - (float)(v24 * v13)) - (float)(v22 * v16)) + (float)(v15 * v23);
  v19 = (float)((float)((float)(v22 * v15) + (float)(v25 * v13)) + (float)(v23 * v16)) + (float)(v24 * v14);
  v20 = (float *)(*(_QWORD *)(a1 + 104) + v4);
  v20[4] = (float)((float)((float)(v25 * v15) - (float)(v22 * v13)) - (float)(v23 * v14)) + (float)(v16 * v24);
  v20[5] = v17;
  v20[6] = v18;
  v20[7] = v19;
  v20[8] = v10;
  v20[9] = v11;
  v20[10] = v12;
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 96) + 72))(*(_QWORD *)(a1 + 96));
}

uint64_t physx::Ext::Joint<physx::PxPrismaticJoint,physx::PxPrismaticJointGeneratedValues>::onOriginShift(uint64_t a1, float32x2_t *a2)
{
  uint64_t result;
  float *v5;
  uint64_t v6;
  float *v7;
  float32x2_t *v8;
  uint64_t v9;
  _QWORD v10[2];

  v10[1] = *MEMORY[0x24BDAC8D0];
  v9 = 0;
  v10[0] = 0;
  result = (*(uint64_t (**)(_QWORD, uint64_t *, _QWORD *))(**(_QWORD **)(a1 + 96) + 56))(*(_QWORD *)(a1 + 96), &v9, v10);
  if (v9)
  {
    if (v10[0])
      return result;
    *(float32x2_t *)(a1 + 84) = vsub_f32(*(float32x2_t *)(a1 + 84), *a2);
    v5 = (float *)&a2[1];
    *(float *)(a1 + 92) = *(float *)(a1 + 92) - a2[1].f32[0];
    v6 = *(_QWORD *)(a1 + 104);
    *(float32x2_t *)(v6 + 60) = vsub_f32(*(float32x2_t *)(v6 + 60), *a2);
    v7 = (float *)(v6 + 68);
  }
  else
  {
    *(float32x2_t *)(a1 + 56) = vsub_f32(*(float32x2_t *)(a1 + 56), *a2);
    v5 = (float *)&a2[1];
    *(float *)(a1 + 64) = *(float *)(a1 + 64) - a2[1].f32[0];
    v8 = *(float32x2_t **)(a1 + 104);
    v8[4] = vsub_f32(v8[4], *a2);
    v7 = (float *)&v8[5];
  }
  *v7 = *v7 - *v5;
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 96) + 72))(*(_QWORD *)(a1 + 96));
}

uint64_t physx::Ext::Joint<physx::PxPrismaticJoint,physx::PxPrismaticJointGeneratedValues>::prepareData(uint64_t a1)
{
  return *(_QWORD *)(a1 + 104);
}

void physx::Ext::Joint<physx::PxPrismaticJoint,physx::PxPrismaticJointGeneratedValues>::getExternalReference(uint64_t a1, _DWORD *a2)
{
  *a2 = 0;
}

uint64_t physx::Ext::Joint<physx::PxPrismaticJoint,physx::PxPrismaticJointGeneratedValues>::onConstraintRelease(_QWORD *a1)
{
  if (a1[13])
    (*(void (**)(uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
  a1[13] = 0;
  return (*(uint64_t (**)(_QWORD *))(*a1 + 32))(a1);
}

uint64_t physx::Ext::Joint<physx::PxPrismaticJoint,physx::PxPrismaticJointGeneratedValues>::getConstantBlock(uint64_t a1)
{
  return *(_QWORD *)(a1 + 104);
}

uint64_t physx::Ext::PrismaticJoint::getPrep(physx::Ext::PrismaticJoint *this)
{
  return physx::Ext::PrismaticJoint::sShaders;
}

uint64_t `non-virtual thunk to'physx::Ext::Joint<physx::PxPrismaticJoint,physx::PxPrismaticJointGeneratedValues>::prepareData(uint64_t a1)
{
  return *(_QWORD *)(a1 + 80);
}

uint64_t `non-virtual thunk to'physx::Ext::Joint<physx::PxPrismaticJoint,physx::PxPrismaticJointGeneratedValues>::updatePvdProperties()
{
  return 0;
}

uint64_t `non-virtual thunk to'physx::Ext::Joint<physx::PxPrismaticJoint,physx::PxPrismaticJointGeneratedValues>::onConstraintRelease(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  if (*(_QWORD *)(a1 + 80))
    (*(void (**)(uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
  v3 = *(_QWORD *)(a1 - 24);
  v2 = a1 - 24;
  *(_QWORD *)(v2 + 104) = 0;
  return (*(uint64_t (**)(uint64_t))(v3 + 32))(v2);
}

uint64_t `non-virtual thunk to'physx::Ext::Joint<physx::PxPrismaticJoint,physx::PxPrismaticJointGeneratedValues>::onComShift(uint64_t a1, unsigned int a2)
{
  return physx::Ext::Joint<physx::PxPrismaticJoint,physx::PxPrismaticJointGeneratedValues>::onComShift(a1 - 24, a2);
}

uint64_t `non-virtual thunk to'physx::Ext::Joint<physx::PxPrismaticJoint,physx::PxPrismaticJointGeneratedValues>::onOriginShift(uint64_t a1, float32x2_t *a2)
{
  return physx::Ext::Joint<physx::PxPrismaticJoint,physx::PxPrismaticJointGeneratedValues>::onOriginShift(a1 - 24, a2);
}

uint64_t `non-virtual thunk to'physx::Ext::Joint<physx::PxPrismaticJoint,physx::PxPrismaticJointGeneratedValues>::getExternalReference(uint64_t a1, _DWORD *a2)
{
  uint64_t result;

  result = a1 - 24;
  *a2 = 0;
  return result;
}

uint64_t `non-virtual thunk to'physx::Ext::Joint<physx::PxPrismaticJoint,physx::PxPrismaticJointGeneratedValues>::getSerializable(uint64_t a1)
{
  return a1 - 24;
}

uint64_t `non-virtual thunk to'physx::Ext::PrismaticJoint::getPrep(physx::Ext::PrismaticJoint *this)
{
  return physx::Ext::PrismaticJoint::sShaders;
}

uint64_t `non-virtual thunk to'physx::Ext::Joint<physx::PxPrismaticJoint,physx::PxPrismaticJointGeneratedValues>::getConstantBlock(uint64_t a1)
{
  return *(_QWORD *)(a1 + 80);
}

void `non-virtual thunk to'physx::Ext::PrismaticJoint::~PrismaticJoint(physx::Ext::PrismaticJoint *this)
{
  *((_QWORD *)this - 3) = &off_24ED98BA0;
  *(_QWORD *)this = &unk_24ED98D48;
  if ((*((_BYTE *)this - 14) & 1) != 0)
  {
    if (*((_QWORD *)this + 10))
      (*(void (**)(uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
    *((_QWORD *)this + 10) = 0;
  }
}

{
  char *v1;

  *((_QWORD *)this - 3) = &off_24ED98BA0;
  v1 = (char *)this - 24;
  *(_QWORD *)this = &unk_24ED98D48;
  if ((*((_BYTE *)this - 14) & 1) != 0)
  {
    if (*((_QWORD *)this + 10))
      (*(void (**)(uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
    *((_QWORD *)this + 10) = 0;
  }
  (*(void (**)(uint64_t, char *))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24, v1);
}

uint64_t physx::Ext::Joint<physx::PxRevoluteJoint,physx::PxRevoluteJointGeneratedValues>::release(uint64_t a1)
{
  return (***(uint64_t (****)(_QWORD))(a1 + 96))(*(_QWORD *)(a1 + 96));
}

const char *physx::PxRevoluteJoint::getConcreteTypeName(physx::PxRevoluteJoint *this)
{
  return "PxRevoluteJoint";
}

void physx::Ext::RevoluteJoint::~RevoluteJoint(physx::Ext::RevoluteJoint *this)
{
  *(_QWORD *)this = &off_24ED98DB0;
  *((_QWORD *)this + 3) = &unk_24ED98F88;
  if ((*((_BYTE *)this + 10) & 1) != 0)
  {
    if (*((_QWORD *)this + 13))
      (*(void (**)(uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
    *((_QWORD *)this + 13) = 0;
  }
}

{
  *(_QWORD *)this = &off_24ED98DB0;
  *((_QWORD *)this + 3) = &unk_24ED98F88;
  if ((*((_BYTE *)this + 10) & 1) != 0)
  {
    if (*((_QWORD *)this + 13))
      (*(void (**)(uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
    *((_QWORD *)this + 13) = 0;
  }
  (*(void (**)(uint64_t, physx::Ext::RevoluteJoint *))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24)
                                                               + 24))(physx::shdfnd::Foundation::mInstance + 24, this);
}

BOOL physx::PxRevoluteJoint::isKindOf(physx::PxRevoluteJoint *this, const char *a2)
{
  return !strcmp("PxRevoluteJoint", a2) || physx::PxJoint::isKindOf(this, a2);
}

uint64_t physx::Ext::Joint<physx::PxRevoluteJoint,physx::PxRevoluteJointGeneratedValues>::setActors(uint64_t a1, uint64_t a2, uint64_t a3)
{
  float v6;
  float v7;
  float v8;
  float v9;
  float v10;
  float v11;
  float v12;
  float v13;
  float v14;
  float v15;
  float v16;
  float v17;
  float v18;
  float v19;
  float v20;
  float v21;
  float v22;
  float *v23;
  float v24;
  float v25;
  float v26;
  float v27;
  float v28;
  float v29;
  float v30;
  float v31;
  float v32;
  float v33;
  float v34;
  float v35;
  float v36;
  float v37;
  float v38;
  float *v39;
  float v41;
  float v42;
  float v43;
  float v44;
  float v45;
  float v46;
  float v47;

  (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 96) + 64))(*(_QWORD *)(a1 + 96));
  physx::Ext::Joint<physx::PxD6Joint,physx::PxD6JointGeneratedValues>::getCom(&v41, a2);
  v6 = v43;
  v7 = (float)(*(float *)(a1 + 56) - v45) + (float)(*(float *)(a1 + 56) - v45);
  v8 = (float)(*(float *)(a1 + 60) - v46) + (float)(*(float *)(a1 + 60) - v46);
  v9 = (float)(*(float *)(a1 + 64) - v47) + (float)(*(float *)(a1 + 64) - v47);
  v10 = (float)(v44 * v44) + -0.5;
  v11 = (float)((float)-(float)(v42 * v8) - (float)(v41 * v7)) - (float)(v43 * v9);
  v12 = (float)((float)(v44 * (float)((float)(v43 * v8) - (float)(v42 * v9))) + (float)(v7 * v10)) - (float)(v41 * v11);
  v13 = (float)(v44 * (float)((float)(v41 * v9) - (float)(v43 * v7))) + (float)(v8 * v10);
  v14 = (float)(v44 * (float)((float)(v42 * v7) - (float)(v41 * v8))) + (float)(v9 * v10);
  v16 = *(float *)(a1 + 48);
  v15 = *(float *)(a1 + 52);
  v17 = *(float *)(a1 + 40);
  v18 = *(float *)(a1 + 44);
  v19 = (float)((float)((float)(v44 * v18) - (float)(v42 * v15)) - (float)(v43 * v17)) + (float)(v16 * v41);
  v20 = (float)((float)((float)(v44 * v16) - (float)(v43 * v15)) - (float)(v41 * v18)) + (float)(v17 * v42);
  v21 = v13 - (float)(v42 * v11);
  v22 = (float)((float)((float)(v41 * v17) + (float)(v44 * v15)) + (float)(v42 * v18)) + (float)(v43 * v16);
  v23 = *(float **)(a1 + 104);
  v23[4] = (float)((float)((float)(v44 * v17) - (float)(v41 * v15)) - (float)(v42 * v16)) + (float)(v18 * v43);
  v23[5] = v19;
  v23[6] = v20;
  v23[7] = v22;
  v23[8] = v12;
  v23[9] = v21;
  v23[10] = v14 - (float)(v6 * v11);
  physx::Ext::Joint<physx::PxD6Joint,physx::PxD6JointGeneratedValues>::getCom(&v41, a3);
  v24 = (float)(*(float *)(a1 + 84) - v45) + (float)(*(float *)(a1 + 84) - v45);
  v25 = (float)(*(float *)(a1 + 88) - v46) + (float)(*(float *)(a1 + 88) - v46);
  v26 = (float)(*(float *)(a1 + 92) - v47) + (float)(*(float *)(a1 + 92) - v47);
  v27 = (float)(v44 * v44) + -0.5;
  v28 = (float)((float)-(float)(v42 * v25) - (float)(v41 * v24)) - (float)(v43 * v26);
  v29 = (float)((float)(v44 * (float)((float)(v43 * v25) - (float)(v42 * v26))) + (float)(v24 * v27))
      - (float)(v41 * v28);
  v30 = (float)((float)(v44 * (float)((float)(v41 * v26) - (float)(v43 * v24))) + (float)(v25 * v27))
      - (float)(v42 * v28);
  v31 = (float)((float)(v44 * (float)((float)(v42 * v24) - (float)(v41 * v25))) + (float)(v26 * v27))
      - (float)(v43 * v28);
  v33 = *(float *)(a1 + 76);
  v32 = *(float *)(a1 + 80);
  v34 = *(float *)(a1 + 68);
  v35 = *(float *)(a1 + 72);
  v36 = (float)((float)((float)(v44 * v35) - (float)(v42 * v32)) - (float)(v43 * v34)) + (float)(v33 * v41);
  v37 = (float)((float)((float)(v44 * v33) - (float)(v43 * v32)) - (float)(v41 * v35)) + (float)(v34 * v42);
  v38 = (float)((float)((float)(v41 * v34) + (float)(v44 * v32)) + (float)(v42 * v35)) + (float)(v43 * v33);
  v39 = *(float **)(a1 + 104);
  v39[11] = (float)((float)((float)(v44 * v34) - (float)(v41 * v32)) - (float)(v42 * v33)) + (float)(v35 * v43);
  v39[12] = v36;
  v39[13] = v37;
  v39[14] = v38;
  v39[15] = v29;
  v39[16] = v30;
  v39[17] = v31;
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 96) + 72))(*(_QWORD *)(a1 + 96));
}

uint64_t physx::Ext::Joint<physx::PxRevoluteJoint,physx::PxRevoluteJointGeneratedValues>::getActors(uint64_t a1, _QWORD *a2, _QWORD *a3)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 96);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 56))(result);
  *a2 = 0;
  *a3 = 0;
  return result;
}

uint64_t physx::Ext::Joint<physx::PxRevoluteJoint,physx::PxRevoluteJointGeneratedValues>::setLocalPose(uint64_t a1, unsigned int a2, float *a3)
{
  float v5;
  float v6;
  float v7;
  float v8;
  float v9;
  float v10;
  float v11;
  float v12;
  float v13;
  float v14;
  float v15;
  uint64_t v16;
  float *v17;
  float v18;
  float v19;
  float v20;
  float v21;
  float v22;
  float v23;
  float v24;
  float v25;
  float v26;
  float v27;
  float v28;
  float *v29;
  float v31;
  float v32;
  float v33;
  float v34;
  float v35;
  float v36;
  float v37;
  uint64_t v38;
  _QWORD v39[2];

  v39[1] = *MEMORY[0x24BDAC8D0];
  v5 = a3[1];
  v6 = a3[2];
  v7 = a3[3];
  v8 = sqrtf((float)((float)((float)(v5 * v5) + (float)(*a3 * *a3)) + (float)(v6 * v6)) + (float)(v7 * v7));
  v9 = *a3 / v8;
  v10 = v5 / v8;
  v11 = v6 / v8;
  v12 = v7 / v8;
  v13 = a3[4];
  v14 = a3[5];
  v15 = a3[6];
  v16 = 28 * a2;
  v17 = (float *)(a1 + v16);
  v17[10] = v9;
  v17[11] = v5 / v8;
  v17[12] = v6 / v8;
  v17[13] = v7 / v8;
  v17[14] = v13;
  v17[15] = v14;
  v17[16] = v15;
  v38 = 0;
  v39[0] = 0;
  (*(void (**)(_QWORD, uint64_t *, _QWORD *))(**(_QWORD **)(a1 + 96) + 56))(*(_QWORD *)(a1 + 96), &v38, v39);
  physx::Ext::Joint<physx::PxD6Joint,physx::PxD6JointGeneratedValues>::getCom(&v31, v39[a2 - 1]);
  v18 = (float)(v13 - v35) + (float)(v13 - v35);
  v19 = (float)(v14 - v36) + (float)(v14 - v36);
  v20 = (float)(v15 - v37) + (float)(v15 - v37);
  v21 = (float)(v34 * v34) + -0.5;
  v22 = (float)((float)-(float)(v32 * v19) - (float)(v31 * v18)) - (float)(v33 * v20);
  v23 = (float)((float)(v34 * (float)((float)(v33 * v19) - (float)(v32 * v20))) + (float)(v18 * v21))
      - (float)(v31 * v22);
  v24 = (float)((float)(v34 * (float)((float)(v31 * v20) - (float)(v33 * v18))) + (float)(v19 * v21))
      - (float)(v32 * v22);
  v25 = (float)((float)(v34 * (float)((float)(v32 * v18) - (float)(v31 * v19))) + (float)(v20 * v21))
      - (float)(v33 * v22);
  v26 = (float)((float)((float)(v34 * v10) - (float)(v32 * v12)) - (float)(v33 * v9)) + (float)(v11 * v31);
  v27 = (float)((float)((float)(v34 * v11) - (float)(v33 * v12)) - (float)(v31 * v10)) + (float)(v9 * v32);
  v28 = (float)((float)((float)(v9 * v31) + (float)(v34 * v12)) + (float)(v32 * v10)) + (float)(v33 * v11);
  v29 = (float *)(*(_QWORD *)(a1 + 104) + v16);
  v29[4] = (float)((float)((float)(v34 * v9) - (float)(v31 * v12)) - (float)(v32 * v11)) + (float)(v10 * v33);
  v29[5] = v26;
  v29[6] = v27;
  v29[7] = v28;
  v29[8] = v23;
  v29[9] = v24;
  v29[10] = v25;
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 96) + 72))(*(_QWORD *)(a1 + 96));
}

float physx::Ext::Joint<physx::PxRevoluteJoint,physx::PxRevoluteJointGeneratedValues>::getLocalPose@<S0>(uint64_t a1@<X0>, unsigned int a2@<W1>, uint64_t a3@<X8>)
{
  uint64_t v3;
  float result;

  v3 = a1 + 28 * a2;
  *(_OWORD *)a3 = *(_OWORD *)(v3 + 40);
  *(_QWORD *)(a3 + 16) = *(_QWORD *)(v3 + 56);
  result = *(float *)(v3 + 64);
  *(float *)(a3 + 24) = result;
  return result;
}

float physx::Ext::Joint<physx::PxRevoluteJoint,physx::PxRevoluteJointGeneratedValues>::getRelativeTransform@<S0>(uint64_t a1@<X0>, float *a2@<X8>)
{
  float v4;
  float v5;
  float v6;
  float v7;
  float v8;
  float v9;
  float v10;
  float v11;
  float v12;
  float v13;
  float v14;
  float v15;
  float v16;
  float v17;
  float v18;
  float v19;
  float v20;
  float v21;
  float v22;
  float v23;
  float v24;
  float v25;
  float v26;
  float v27;
  float v28;
  float v29;
  float v30;
  float v31;
  float v32;
  float v33;
  float v34;
  float v35;
  float v36;
  float v37;
  float v38;
  float v39;
  float v40;
  float v41;
  float v42;
  float v43;
  float v44;
  float v45;
  float v46;
  float v47;
  float v48;
  float v49;
  float v50;
  float v51;
  float v52;
  float v53;
  float v54;
  float v55;
  float v56;
  float v57;
  float v58;
  float result;
  float v60;
  float v61;
  float v62;
  float v63;
  float v64;
  float v65;
  uint64_t v66;
  float v67;
  float v68;
  float v69;
  float v70;
  float v71;
  uint64_t v72;
  uint64_t v73;

  v72 = 0;
  v73 = 0;
  (*(void (**)(_QWORD, uint64_t *, uint64_t *))(**(_QWORD **)(a1 + 96) + 56))(*(_QWORD *)(a1 + 96), &v73, &v72);
  v4 = 1.0;
  v5 = 0.0;
  v6 = 0.0;
  v7 = 0.0;
  v8 = 0.0;
  v9 = 0.0;
  v10 = 0.0;
  v11 = 0.0;
  v12 = 1.0;
  if (v73)
  {
    (*(void (**)(uint64_t *__return_ptr))(*(_QWORD *)v73 + 152))(&v66);
    v5 = 0.0;
    v4 = 1.0;
    v10 = *((float *)&v66 + 1);
    v11 = *(float *)&v66;
    v9 = v67;
    v12 = v68;
    v8 = v69;
    v7 = v70;
    v6 = v71;
  }
  v13 = *(float *)(a1 + 56);
  v14 = *(float *)(a1 + 60);
  v15 = *(float *)(a1 + 64);
  v16 = *(float *)(a1 + 48);
  v17 = *(float *)(a1 + 52);
  v18 = 0.0;
  v19 = 0.0;
  v20 = 0.0;
  v21 = *(float *)(a1 + 40);
  v22 = *(float *)(a1 + 44);
  v23 = 0.0;
  v24 = 0.0;
  if (v72)
  {
    v64 = v7;
    v65 = v8;
    v62 = *(float *)(a1 + 56);
    v63 = v6;
    v60 = *(float *)(a1 + 64);
    v61 = *(float *)(a1 + 60);
    (*(void (**)(uint64_t *__return_ptr))(*(_QWORD *)v72 + 152))(&v66);
    v15 = v60;
    v14 = v61;
    v13 = v62;
    v6 = v63;
    v7 = v64;
    v8 = v65;
    v23 = *((float *)&v66 + 1);
    v24 = *(float *)&v66;
    v20 = v67;
    v4 = v68;
    v19 = v69;
    v18 = v70;
    v5 = v71;
  }
  v25 = (float)((float)((float)(v12 * v17) - (float)(v11 * v21)) - (float)(v10 * v22)) - (float)(v9 * v16);
  v26 = (float)((float)((float)(v9 * v17) + (float)(v12 * v16)) + (float)(v11 * v22)) - (float)(v21 * v10);
  v27 = (float)((float)((float)(v10 * v17) + (float)(v12 * v22)) + (float)(v9 * v21)) - (float)(v16 * v11);
  v28 = (float)((float)((float)(v11 * v17) + (float)(v12 * v21)) + (float)(v10 * v16)) - (float)(v22 * v9);
  v29 = v15 + v15;
  v30 = v14 + v14;
  v31 = (float)((float)(v10 * v30) + (float)(v11 * (float)(v13 + v13))) + (float)(v9 * v29);
  v32 = (float)(v12 * v12) + -0.5;
  v33 = v6
      + (float)((float)((float)(v12 * (float)((float)(v11 * v30) - (float)(v10 * (float)(v13 + v13))))
                      + (float)(v29 * v32))
              + (float)(v9 * v31));
  v34 = v7
      + (float)((float)((float)(v12 * (float)((float)(v9 * (float)(v13 + v13)) - (float)(v11 * v29)))
                      + (float)(v30 * v32))
              + (float)(v10 * v31));
  v35 = v8
      + (float)((float)((float)(v12 * (float)((float)(v10 * v29) - (float)(v9 * v30)))
                      + (float)((float)(v13 + v13) * v32))
              + (float)(v11 * v31));
  v36 = *(float *)(a1 + 84) + *(float *)(a1 + 84);
  v37 = *(float *)(a1 + 88) + *(float *)(a1 + 88);
  v38 = *(float *)(a1 + 92) + *(float *)(a1 + 92);
  v39 = (float)(v4 * v4) + -0.5;
  v40 = (float)((float)(v23 * v37) + (float)(v24 * v36)) + (float)(v20 * v38);
  v41 = v19
      + (float)((float)((float)(v4 * (float)((float)(v23 * v38) - (float)(v20 * v37))) + (float)(v36 * v39))
              + (float)(v24 * v40));
  v42 = v18
      + (float)((float)((float)(v4 * (float)((float)(v20 * v36) - (float)(v24 * v38))) + (float)(v37 * v39))
              + (float)(v23 * v40));
  v43 = v5
      + (float)((float)((float)(v4 * (float)((float)(v24 * v37) - (float)(v23 * v36))) + (float)(v38 * v39))
              + (float)(v20 * v40));
  v45 = *(float *)(a1 + 76);
  v44 = *(float *)(a1 + 80);
  v46 = *(float *)(a1 + 68);
  v47 = *(float *)(a1 + 72);
  v48 = (float)((float)((float)(v24 * v44) + (float)(v4 * v46)) + (float)(v23 * v45)) - (float)(v47 * v20);
  v49 = (float)((float)((float)(v23 * v44) + (float)(v4 * v47)) + (float)(v20 * v46)) - (float)(v45 * v24);
  v50 = (float)((float)((float)(v20 * v44) + (float)(v4 * v45)) + (float)(v24 * v47)) - (float)(v46 * v23);
  v51 = (float)((float)((float)(v4 * v44) - (float)(v24 * v46)) - (float)(v23 * v47)) - (float)(v20 * v45);
  v52 = (float)(v41 - v35) + (float)(v41 - v35);
  v53 = (float)(v42 - v34) + (float)(v42 - v34);
  v54 = (float)(v43 - v33) + (float)(v43 - v33);
  v55 = (float)(v25 * v25) + -0.5;
  v56 = (float)((float)-(float)(v27 * v53) - (float)(v28 * v52)) - (float)(v26 * v54);
  v57 = (float)((float)(v25 * (float)((float)(v26 * v53) - (float)(v27 * v54))) + (float)(v52 * v55))
      - (float)(v28 * v56);
  v58 = (float)((float)(v25 * (float)((float)(v28 * v54) - (float)(v26 * v52))) + (float)(v53 * v55))
      - (float)(v27 * v56);
  *a2 = (float)((float)((float)(v25 * v48) - (float)(v28 * v51)) - (float)(v27 * v50)) + (float)(v49 * v26);
  a2[1] = (float)((float)((float)(v25 * v49) - (float)(v27 * v51)) - (float)(v26 * v48)) + (float)(v50 * v28);
  a2[2] = (float)((float)((float)(v25 * v50) - (float)(v26 * v51)) - (float)(v28 * v49)) + (float)(v48 * v27);
  a2[3] = (float)((float)((float)(v28 * v48) + (float)(v25 * v51)) + (float)(v27 * v49)) + (float)(v26 * v50);
  result = (float)((float)(v25 * (float)((float)(v27 * v52) - (float)(v28 * v53))) + (float)(v54 * v55))
         - (float)(v26 * v56);
  a2[4] = v57;
  a2[5] = v58;
  a2[6] = result;
  return result;
}

float physx::Ext::Joint<physx::PxRevoluteJoint,physx::PxRevoluteJointGeneratedValues>::getRelativeLinearVelocity@<S0>(uint64_t a1@<X0>, float *a2@<X8>)
{
  float v4;
  float v5;
  float v6;
  float v7;
  float v8;
  float v9;
  float v10;
  float v11;
  float v12;
  float v13;
  float v14;
  float v15;
  float v16;
  float v17;
  float v18;
  float v19;
  float v20;
  float v21;
  float v22;
  float v23;
  float v24;
  float v25;
  float v26;
  float v27;
  float v28;
  float result;
  float v30;
  float v31;
  float v32;
  float v33;
  float v34;
  float v35;
  float v36;
  float v37;
  float v38;
  float v39;
  float v40;
  float v41;
  float v42;
  float v43;
  float v44[3];
  float v45;
  float v46;
  float v47;
  float v48[3];
  _WORD *v49;
  _WORD *v50;

  v49 = 0;
  v50 = 0;
  (*(void (**)(_QWORD, _WORD **, _WORD **))(**(_QWORD **)(a1 + 96) + 56))(*(_QWORD *)(a1 + 96), &v50, &v49);
  physx::Ext::Joint<physx::PxD6Joint,physx::PxD6JointGeneratedValues>::getCom(&v34, (uint64_t)v50);
  physx::Ext::Joint<physx::PxD6Joint,physx::PxD6JointGeneratedValues>::getCom(&v30, (uint64_t)v49);
  physx::Ext::Joint<physx::PxD6Joint,physx::PxD6JointGeneratedValues>::getActorVelocity(v50, (uint64_t)v48, (uint64_t)&v45);
  physx::Ext::Joint<physx::PxD6Joint,physx::PxD6JointGeneratedValues>::getActorVelocity(v49, (uint64_t)v44, (uint64_t)&v41);
  v4 = *(float *)(a1 + 56) + *(float *)(a1 + 56);
  v5 = *(float *)(a1 + 60) + *(float *)(a1 + 60);
  v6 = *(float *)(a1 + 64) + *(float *)(a1 + 64);
  v7 = (float)(v37 * v37) + -0.5;
  v8 = (float)((float)(v5 * v35) + (float)(v34 * v4)) + (float)(v36 * v6);
  v9 = (float)((float)(v37 * (float)((float)(v35 * v6) - (float)(v36 * v5))) + (float)(v4 * v7)) + (float)(v34 * v8);
  v10 = (float)((float)(v37 * (float)((float)(v36 * v4) - (float)(v34 * v6))) + (float)(v5 * v7)) + (float)(v35 * v8);
  v11 = (float)((float)(v37 * (float)((float)(v34 * v5) - (float)(v35 * v4))) + (float)(v6 * v7)) + (float)(v36 * v8);
  v12 = *(float *)(a1 + 84) + *(float *)(a1 + 84);
  v13 = *(float *)(a1 + 88) + *(float *)(a1 + 88);
  v14 = *(float *)(a1 + 92) + *(float *)(a1 + 92);
  v15 = (float)(v33 * v33) + -0.5;
  v16 = (float)((float)(v13 * v31) + (float)(v30 * v12)) + (float)(v32 * v14);
  v17 = (float)((float)(v33 * (float)((float)(v31 * v14) - (float)(v32 * v13))) + (float)(v12 * v15))
      + (float)(v30 * v16);
  v18 = (float)((float)(v33 * (float)((float)(v32 * v12) - (float)(v30 * v14))) + (float)(v13 * v15))
      + (float)(v31 * v16);
  v19 = (float)((float)(v33 * (float)((float)(v30 * v13) - (float)(v31 * v12))) + (float)(v14 * v15))
      + (float)(v32 * v16);
  v20 = (float)(v46 * v11) - (float)(v47 * v10);
  v21 = (float)((float)(v44[1] - (float)((float)(v43 * v17) - (float)(v41 * v19))) - v48[1])
      + (float)((float)(v47 * v9) - (float)(v45 * v11));
  v22 = (float)((float)((float)(v44[0] - (float)((float)(v42 * v19) - (float)(v43 * v18))) - v48[0]) + v20) - v38;
  v23 = (float)((float)((float)(v44[2] - (float)((float)(v41 * v18) - (float)(v42 * v17))) - v48[2])
              + (float)((float)(v45 * v10) - (float)(v46 * v9)))
      - v40;
  v24 = v22 + v22;
  v25 = (float)(v21 - v39) + (float)(v21 - v39);
  v26 = v23 + v23;
  v27 = (float)((float)(v35 * v25) + (float)(v34 * v24)) + (float)(v36 * v26);
  v28 = (float)((float)(v25 * v7) - (float)((float)((float)(v36 * v24) - (float)(v34 * v26)) * v37))
      + (float)(v35 * v27);
  result = (float)((float)(v26 * v7) - (float)((float)((float)(v34 * v25) - (float)(v35 * v24)) * v37))
         + (float)(v36 * v27);
  *a2 = (float)((float)(v24 * v7) - (float)((float)((float)(v35 * v26) - (float)(v36 * v25)) * v37))
      + (float)(v34 * v27);
  a2[1] = v28;
  a2[2] = result;
  return result;
}

float physx::Ext::Joint<physx::PxRevoluteJoint,physx::PxRevoluteJointGeneratedValues>::getRelativeAngularVelocity@<S0>(uint64_t a1@<X0>, float *a2@<X8>)
{
  float v3;
  float v4;
  float v5;
  float v6;
  float v7;
  float v8;
  float v9;
  float result;
  float v11;
  float v12;
  float v13;
  float v14;
  float v15;
  float v16;
  float v17;
  float v18;
  float v19;
  float v20;
  _BYTE v21[12];
  float v22;
  float v23;
  float v24;
  _BYTE v25[12];
  _WORD *v26;
  _WORD *v27;

  v26 = 0;
  v27 = 0;
  (*(void (**)(_QWORD, _WORD **, _WORD **))(**(_QWORD **)(a1 + 96) + 56))(*(_QWORD *)(a1 + 96), &v27, &v26);
  physx::Ext::Joint<physx::PxD6Joint,physx::PxD6JointGeneratedValues>::getCom(&v11, (uint64_t)v27);
  physx::Ext::Joint<physx::PxD6Joint,physx::PxD6JointGeneratedValues>::getActorVelocity(v27, (uint64_t)v25, (uint64_t)&v22);
  physx::Ext::Joint<physx::PxD6Joint,physx::PxD6JointGeneratedValues>::getActorVelocity(v26, (uint64_t)v21, (uint64_t)&v18);
  v3 = (float)((float)(v18 - v22) - v15) + (float)((float)(v18 - v22) - v15);
  v4 = (float)((float)(v19 - v23) - v16) + (float)((float)(v19 - v23) - v16);
  v5 = (float)((float)(v20 - v24) - v17) + (float)((float)(v20 - v24) - v17);
  v6 = (float)(v14 * v14) + -0.5;
  v7 = (float)((float)(v4 * v12) + (float)(v11 * v3)) + (float)(v13 * v5);
  v8 = (float)((float)(v3 * v6) - (float)((float)((float)(v12 * v5) - (float)(v13 * v4)) * v14)) + (float)(v11 * v7);
  v9 = (float)((float)(v4 * v6) - (float)((float)((float)(v13 * v3) - (float)(v11 * v5)) * v14)) + (float)(v12 * v7);
  result = (float)((float)(v5 * v6) - (float)((float)((float)(v11 * v4) - (float)(v12 * v3)) * v14)) + (float)(v13 * v7);
  *a2 = v8;
  a2[1] = v9;
  a2[2] = result;
  return result;
}

uint64_t physx::Ext::Joint<physx::PxRevoluteJoint,physx::PxRevoluteJointGeneratedValues>::setBreakForce(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 96) + 120))(*(_QWORD *)(a1 + 96));
}

uint64_t physx::Ext::Joint<physx::PxRevoluteJoint,physx::PxRevoluteJointGeneratedValues>::getBreakForce(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 96) + 128))(*(_QWORD *)(a1 + 96));
}

uint64_t physx::Ext::Joint<physx::PxRevoluteJoint,physx::PxRevoluteJointGeneratedValues>::setConstraintFlags(uint64_t a1, __int16 *a2)
{
  uint64_t v2;
  __int16 v4;

  v2 = *(_QWORD *)(a1 + 96);
  v4 = *a2;
  return (*(uint64_t (**)(uint64_t, __int16 *))(*(_QWORD *)v2 + 80))(v2, &v4);
}

uint64_t physx::Ext::Joint<physx::PxRevoluteJoint,physx::PxRevoluteJointGeneratedValues>::setConstraintFlag(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 96) + 96))(*(_QWORD *)(a1 + 96));
}

uint64_t physx::Ext::Joint<physx::PxRevoluteJoint,physx::PxRevoluteJointGeneratedValues>::getConstraintFlags(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 96) + 88))(*(_QWORD *)(a1 + 96));
}

uint64_t physx::Ext::Joint<physx::PxRevoluteJoint,physx::PxRevoluteJointGeneratedValues>::setInvMassScale0(uint64_t a1, float a2)
{
  uint64_t v2;
  uint64_t v3;

  v2 = a1 + 96;
  v3 = *(_QWORD *)(a1 + 96);
  **(float **)(v2 + 8) = a2;
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v3 + 72))(v3);
}

float physx::Ext::Joint<physx::PxRevoluteJoint,physx::PxRevoluteJointGeneratedValues>::getInvMassScale0(uint64_t a1)
{
  return **(float **)(a1 + 104);
}

uint64_t physx::Ext::Joint<physx::PxRevoluteJoint,physx::PxRevoluteJointGeneratedValues>::setInvInertiaScale0(uint64_t a1, float a2)
{
  uint64_t v2;
  uint64_t v3;

  v2 = a1 + 96;
  v3 = *(_QWORD *)(a1 + 96);
  *(float *)(*(_QWORD *)(v2 + 8) + 4) = a2;
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v3 + 72))(v3);
}

float physx::Ext::Joint<physx::PxRevoluteJoint,physx::PxRevoluteJointGeneratedValues>::getInvInertiaScale0(uint64_t a1)
{
  return *(float *)(*(_QWORD *)(a1 + 104) + 4);
}

uint64_t physx::Ext::Joint<physx::PxRevoluteJoint,physx::PxRevoluteJointGeneratedValues>::setInvMassScale1(uint64_t a1, float a2)
{
  uint64_t v2;
  uint64_t v3;

  v2 = a1 + 96;
  v3 = *(_QWORD *)(a1 + 96);
  *(float *)(*(_QWORD *)(v2 + 8) + 8) = a2;
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v3 + 72))(v3);
}

float physx::Ext::Joint<physx::PxRevoluteJoint,physx::PxRevoluteJointGeneratedValues>::getInvMassScale1(uint64_t a1)
{
  return *(float *)(*(_QWORD *)(a1 + 104) + 8);
}

uint64_t physx::Ext::Joint<physx::PxRevoluteJoint,physx::PxRevoluteJointGeneratedValues>::setInvInertiaScale1(uint64_t a1, float a2)
{
  uint64_t v2;
  uint64_t v3;

  v2 = a1 + 96;
  v3 = *(_QWORD *)(a1 + 96);
  *(float *)(*(_QWORD *)(v2 + 8) + 12) = a2;
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v3 + 72))(v3);
}

float physx::Ext::Joint<physx::PxRevoluteJoint,physx::PxRevoluteJointGeneratedValues>::getInvInertiaScale1(uint64_t a1)
{
  return *(float *)(*(_QWORD *)(a1 + 104) + 12);
}

uint64_t physx::Ext::Joint<physx::PxRevoluteJoint,physx::PxRevoluteJointGeneratedValues>::getConstraint(uint64_t a1)
{
  return *(_QWORD *)(a1 + 96);
}

uint64_t physx::Ext::Joint<physx::PxRevoluteJoint,physx::PxRevoluteJointGeneratedValues>::setName(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 32) = a2;
  return result;
}

uint64_t physx::Ext::Joint<physx::PxRevoluteJoint,physx::PxRevoluteJointGeneratedValues>::getName(uint64_t a1)
{
  return *(_QWORD *)(a1 + 32);
}

uint64_t physx::Ext::Joint<physx::PxRevoluteJoint,physx::PxRevoluteJointGeneratedValues>::getScene(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 96);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 48))(result);
  return result;
}

uint64_t physx::Ext::Joint<physx::PxRevoluteJoint,physx::PxRevoluteJointGeneratedValues>::requiresObjects(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;

  (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)a2 + 16))(a2, *(_QWORD *)(a1 + 96));
  v5 = 0;
  v6 = 0;
  result = (*(uint64_t (**)(_QWORD, uint64_t *, uint64_t *))(**(_QWORD **)(a1 + 96) + 56))(*(_QWORD *)(a1 + 96), &v6, &v5);
  if (v6)
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 16))(a2);
  if (v5)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 16))(a2);
  return result;
}

uint64_t physx::Ext::Joint<physx::PxRevoluteJoint,physx::PxRevoluteJointGeneratedValues>::updatePvdProperties()
{
  return 0;
}

uint64_t physx::Ext::Joint<physx::PxRevoluteJoint,physx::PxRevoluteJointGeneratedValues>::onComShift(uint64_t a1, unsigned int a2)
{
  uint64_t v4;
  float v5;
  float v6;
  float v7;
  float v8;
  float v9;
  float v10;
  float v11;
  float v12;
  float v13;
  float v14;
  float v15;
  float v16;
  float v17;
  float v18;
  float v19;
  float *v20;
  float v22;
  float v23;
  float v24;
  float v25;
  float v26;
  float v27;
  float v28;
  uint64_t v29;
  _QWORD v30[2];

  v30[1] = *MEMORY[0x24BDAC8D0];
  v29 = 0;
  v30[0] = 0;
  (*(void (**)(_QWORD, uint64_t *, _QWORD *))(**(_QWORD **)(a1 + 96) + 56))(*(_QWORD *)(a1 + 96), &v29, v30);
  physx::Ext::Joint<physx::PxD6Joint,physx::PxD6JointGeneratedValues>::getCom(&v22, v30[a2 - 1]);
  v4 = 28 * a2;
  v5 = (float)(*(float *)(a1 + v4 + 56) - v26) + (float)(*(float *)(a1 + v4 + 56) - v26);
  v6 = (float)(*(float *)(a1 + v4 + 60) - v27) + (float)(*(float *)(a1 + v4 + 60) - v27);
  v7 = (float)(*(float *)(a1 + v4 + 64) - v28) + (float)(*(float *)(a1 + v4 + 64) - v28);
  v8 = (float)(v25 * v25) + -0.5;
  v9 = (float)((float)-(float)(v23 * v6) - (float)(v22 * v5)) - (float)(v24 * v7);
  v10 = (float)((float)(v25 * (float)((float)(v24 * v6) - (float)(v23 * v7))) + (float)(v5 * v8)) - (float)(v22 * v9);
  v11 = (float)((float)(v25 * (float)((float)(v22 * v7) - (float)(v24 * v5))) + (float)(v6 * v8)) - (float)(v23 * v9);
  v12 = (float)((float)(v25 * (float)((float)(v23 * v5) - (float)(v22 * v6))) + (float)(v7 * v8)) - (float)(v24 * v9);
  v14 = *(float *)(a1 + v4 + 48);
  v13 = *(float *)(a1 + v4 + 52);
  v15 = *(float *)(a1 + v4 + 40);
  v16 = *(float *)(a1 + v4 + 44);
  v17 = (float)((float)((float)(v25 * v16) - (float)(v23 * v13)) - (float)(v24 * v15)) + (float)(v14 * v22);
  v18 = (float)((float)((float)(v25 * v14) - (float)(v24 * v13)) - (float)(v22 * v16)) + (float)(v15 * v23);
  v19 = (float)((float)((float)(v22 * v15) + (float)(v25 * v13)) + (float)(v23 * v16)) + (float)(v24 * v14);
  v20 = (float *)(*(_QWORD *)(a1 + 104) + v4);
  v20[4] = (float)((float)((float)(v25 * v15) - (float)(v22 * v13)) - (float)(v23 * v14)) + (float)(v16 * v24);
  v20[5] = v17;
  v20[6] = v18;
  v20[7] = v19;
  v20[8] = v10;
  v20[9] = v11;
  v20[10] = v12;
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 96) + 72))(*(_QWORD *)(a1 + 96));
}

uint64_t physx::Ext::Joint<physx::PxRevoluteJoint,physx::PxRevoluteJointGeneratedValues>::onOriginShift(uint64_t a1, float32x2_t *a2)
{
  uint64_t result;
  float *v5;
  uint64_t v6;
  float *v7;
  float32x2_t *v8;
  uint64_t v9;
  _QWORD v10[2];

  v10[1] = *MEMORY[0x24BDAC8D0];
  v9 = 0;
  v10[0] = 0;
  result = (*(uint64_t (**)(_QWORD, uint64_t *, _QWORD *))(**(_QWORD **)(a1 + 96) + 56))(*(_QWORD *)(a1 + 96), &v9, v10);
  if (v9)
  {
    if (v10[0])
      return result;
    *(float32x2_t *)(a1 + 84) = vsub_f32(*(float32x2_t *)(a1 + 84), *a2);
    v5 = (float *)&a2[1];
    *(float *)(a1 + 92) = *(float *)(a1 + 92) - a2[1].f32[0];
    v6 = *(_QWORD *)(a1 + 104);
    *(float32x2_t *)(v6 + 60) = vsub_f32(*(float32x2_t *)(v6 + 60), *a2);
    v7 = (float *)(v6 + 68);
  }
  else
  {
    *(float32x2_t *)(a1 + 56) = vsub_f32(*(float32x2_t *)(a1 + 56), *a2);
    v5 = (float *)&a2[1];
    *(float *)(a1 + 64) = *(float *)(a1 + 64) - a2[1].f32[0];
    v8 = *(float32x2_t **)(a1 + 104);
    v8[4] = vsub_f32(v8[4], *a2);
    v7 = (float *)&v8[5];
  }
  *v7 = *v7 - *v5;
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 96) + 72))(*(_QWORD *)(a1 + 96));
}

uint64_t physx::Ext::Joint<physx::PxRevoluteJoint,physx::PxRevoluteJointGeneratedValues>::prepareData(uint64_t a1)
{
  return *(_QWORD *)(a1 + 104);
}

void physx::Ext::Joint<physx::PxRevoluteJoint,physx::PxRevoluteJointGeneratedValues>::getExternalReference(uint64_t a1, _DWORD *a2)
{
  *a2 = 0;
}

uint64_t physx::Ext::Joint<physx::PxRevoluteJoint,physx::PxRevoluteJointGeneratedValues>::onConstraintRelease(_QWORD *a1)
{
  if (a1[13])
    (*(void (**)(uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
  a1[13] = 0;
  return (*(uint64_t (**)(_QWORD *))(*a1 + 32))(a1);
}

uint64_t physx::Ext::Joint<physx::PxRevoluteJoint,physx::PxRevoluteJointGeneratedValues>::getConstantBlock(uint64_t a1)
{
  return *(_QWORD *)(a1 + 104);
}

uint64_t physx::Ext::RevoluteJoint::getPrep(physx::Ext::RevoluteJoint *this)
{
  return physx::Ext::RevoluteJoint::sShaders;
}

uint64_t `non-virtual thunk to'physx::Ext::Joint<physx::PxRevoluteJoint,physx::PxRevoluteJointGeneratedValues>::prepareData(uint64_t a1)
{
  return *(_QWORD *)(a1 + 80);
}

uint64_t `non-virtual thunk to'physx::Ext::Joint<physx::PxRevoluteJoint,physx::PxRevoluteJointGeneratedValues>::updatePvdProperties()
{
  return 0;
}

uint64_t `non-virtual thunk to'physx::Ext::Joint<physx::PxRevoluteJoint,physx::PxRevoluteJointGeneratedValues>::onConstraintRelease(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  if (*(_QWORD *)(a1 + 80))
    (*(void (**)(uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
  v3 = *(_QWORD *)(a1 - 24);
  v2 = a1 - 24;
  *(_QWORD *)(v2 + 104) = 0;
  return (*(uint64_t (**)(uint64_t))(v3 + 32))(v2);
}

uint64_t `non-virtual thunk to'physx::Ext::Joint<physx::PxRevoluteJoint,physx::PxRevoluteJointGeneratedValues>::onComShift(uint64_t a1, unsigned int a2)
{
  return physx::Ext::Joint<physx::PxRevoluteJoint,physx::PxRevoluteJointGeneratedValues>::onComShift(a1 - 24, a2);
}

uint64_t `non-virtual thunk to'physx::Ext::Joint<physx::PxRevoluteJoint,physx::PxRevoluteJointGeneratedValues>::onOriginShift(uint64_t a1, float32x2_t *a2)
{
  return physx::Ext::Joint<physx::PxRevoluteJoint,physx::PxRevoluteJointGeneratedValues>::onOriginShift(a1 - 24, a2);
}

uint64_t `non-virtual thunk to'physx::Ext::Joint<physx::PxRevoluteJoint,physx::PxRevoluteJointGeneratedValues>::getExternalReference(uint64_t a1, _DWORD *a2)
{
  uint64_t result;

  result = a1 - 24;
  *a2 = 0;
  return result;
}

uint64_t `non-virtual thunk to'physx::Ext::Joint<physx::PxRevoluteJoint,physx::PxRevoluteJointGeneratedValues>::getSerializable(uint64_t a1)
{
  return a1 - 24;
}

uint64_t `non-virtual thunk to'physx::Ext::RevoluteJoint::getPrep(physx::Ext::RevoluteJoint *this)
{
  return physx::Ext::RevoluteJoint::sShaders;
}

uint64_t `non-virtual thunk to'physx::Ext::Joint<physx::PxRevoluteJoint,physx::PxRevoluteJointGeneratedValues>::getConstantBlock(uint64_t a1)
{
  return *(_QWORD *)(a1 + 80);
}

void `non-virtual thunk to'physx::Ext::RevoluteJoint::~RevoluteJoint(physx::Ext::RevoluteJoint *this)
{
  *((_QWORD *)this - 3) = &off_24ED98DB0;
  *(_QWORD *)this = &unk_24ED98F88;
  if ((*((_BYTE *)this - 14) & 1) != 0)
  {
    if (*((_QWORD *)this + 10))
      (*(void (**)(uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
    *((_QWORD *)this + 10) = 0;
  }
}

{
  char *v1;

  *((_QWORD *)this - 3) = &off_24ED98DB0;
  v1 = (char *)this - 24;
  *(_QWORD *)this = &unk_24ED98F88;
  if ((*((_BYTE *)this - 14) & 1) != 0)
  {
    if (*((_QWORD *)this + 10))
      (*(void (**)(uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
    *((_QWORD *)this + 10) = 0;
  }
  (*(void (**)(uint64_t, char *))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24, v1);
}

double physx::Ext::PrismaticJoint::PrismaticJoint(uint64_t a1, float *a2, uint64_t a3, float32x4_t *a4, uint64_t a5, float32x4_t *a6)
{
  _QWORD *v7;
  uint64_t v8;
  float v9;
  float v10;
  double result;
  __int16 v12;

  v12 = 3;
  v7 = (_QWORD *)physx::Ext::Joint<physx::PxPrismaticJoint,physx::PxPrismaticJointGeneratedValues>::Joint(a1, 258, &v12, a3, a4, a5, a6, 0x80u);
  *v7 = &off_24ED98640;
  v7[3] = &unk_24ED987F8;
  v8 = v7[13];
  v9 = fminf(*a2 * 0.01, 1.1116e38);
  v10 = *a2 + *a2;
  *(_DWORD *)(v8 + 80) = 0;
  *(float *)(v8 + 84) = v10;
  *(_QWORD *)(v8 + 88) = 0;
  *(float *)(v8 + 96) = v9;
  result = -1.428678e302;
  *(_OWORD *)(v8 + 100) = xmmword_2261ABF70;
  *(_WORD *)(v8 + 116) = 0;
  return result;
}

uint64_t physx::Ext::Joint<physx::PxPrismaticJoint,physx::PxPrismaticJointGeneratedValues>::Joint(uint64_t a1, __int16 a2, __int16 *a3, uint64_t a4, float32x4_t *a5, uint64_t a6, float32x4_t *a7, unsigned int a8)
{
  __int16 v13;
  uint64_t v14;
  __int32 v15;
  float32x4_t v24;
  uint64_t v27;
  float v28;
  float v29;
  float v30;
  float v31;
  float v32;
  float v33;
  float v34;
  float v35;
  float v36;
  float v37;
  float v38;
  float v39;
  float v40;
  float v41;
  float v42;
  float v43;
  float v44;
  float v45;
  float v46;
  float v47;
  float v48;
  float v49;
  float v50;
  float v51;
  float v52;
  float v53;
  float v54;
  float v55;
  float v56;
  float v57;
  float v58;
  float v61;
  float v62;
  float v63;
  float v64;
  float v65;
  float v66;
  float v67;

  v13 = *a3;
  *(_WORD *)(a1 + 8) = a2;
  *(_WORD *)(a1 + 10) = v13;
  *(_QWORD *)a1 = &off_24ED98BA0;
  *(_QWORD *)(a1 + 96) = 0;
  *(_QWORD *)(a1 + 24) = &unk_24ED98D48;
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  if (a8)
    v14 = (*(uint64_t (**)(uint64_t, _QWORD, const char *, const char *, uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24)
                                                                                          + 16))(physx::shdfnd::Foundation::mInstance + 24, a8, "NonTrackedAlloc", "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/physxextensions/src/ExtJoint.h", 454);
  else
    v14 = 0;
  v15 = a5[1].i32[2];
  _Q1 = *a5;
  _Q2 = vmulq_f32(_Q1, _Q1);
  _S3 = a5->i64[1];
  __asm { FMLA            S2, S3, V1.S[2] }
  _S3 = HIDWORD(*(unsigned __int128 *)a5);
  __asm { FMLA            S2, S3, V1.S[3] }
  _Q2.f32[0] = sqrtf(_Q2.f32[0]);
  v24 = vdivq_f32(*a5, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)_Q2.f32, 0));
  _Q2.i64[0] = a5[1].i64[0];
  *(float32x4_t *)(a1 + 40) = v24;
  *(_QWORD *)(a1 + 56) = _Q2.i64[0];
  *(_DWORD *)(a1 + 64) = v15;
  _Q0 = *a7;
  _Q1 = vmulq_f32(_Q0, _Q0);
  _Q2.i32[0] = a7->i64[1];
  __asm { FMLA            S1, S2, V0.S[2] }
  _Q2.i32[0] = HIDWORD(*(unsigned __int128 *)a7);
  __asm { FMLA            S1, S2, V0.S[3] }
  _Q1.f32[0] = sqrtf(_Q1.f32[0]);
  _Q2.i32[0] = a7[1].i32[2];
  v27 = a7[1].i64[0];
  *(float32x4_t *)(a1 + 68) = vdivq_f32(*a7, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)_Q1.f32, 0));
  *(_QWORD *)(a1 + 84) = v27;
  *(_DWORD *)(a1 + 92) = _Q2.i32[0];
  physx::Ext::Joint<physx::PxD6Joint,physx::PxD6JointGeneratedValues>::getCom(&v61, a4);
  v28 = v63;
  v29 = (float)(a5[1].f32[0] - v65) + (float)(a5[1].f32[0] - v65);
  v30 = (float)(a5[1].f32[1] - v66) + (float)(a5[1].f32[1] - v66);
  v31 = (float)(a5[1].f32[2] - v67) + (float)(a5[1].f32[2] - v67);
  v32 = (float)(v64 * v64) + -0.5;
  v33 = (float)((float)-(float)(v62 * v30) - (float)(v61 * v29)) - (float)(v63 * v31);
  v34 = (float)((float)(v64 * (float)((float)(v63 * v30) - (float)(v62 * v31))) + (float)(v29 * v32))
      - (float)(v61 * v33);
  v35 = (float)(v64 * (float)((float)(v61 * v31) - (float)(v63 * v29))) + (float)(v30 * v32);
  v36 = (float)(v64 * (float)((float)(v62 * v29) - (float)(v61 * v30))) + (float)(v31 * v32);
  v38 = a5->f32[2];
  v37 = a5->f32[3];
  v39 = a5->f32[1];
  v40 = (float)((float)((float)(v64 * v39) - (float)(v62 * v37)) - (float)(v63 * a5->f32[0])) + (float)(v38 * v61);
  v41 = (float)((float)((float)(v64 * v38) - (float)(v63 * v37)) - (float)(v61 * v39)) + (float)(a5->f32[0] * v62);
  v42 = v35 - (float)(v62 * v33);
  v43 = (float)((float)((float)(v61 * a5->f32[0]) + (float)(v64 * v37)) + (float)(v62 * v39)) + (float)(v63 * v38);
  *(float *)(v14 + 16) = (float)((float)((float)(v64 * a5->f32[0]) - (float)(v61 * v37)) - (float)(v62 * v38))
                       + (float)(v39 * v63);
  *(float *)(v14 + 20) = v40;
  *(float *)(v14 + 24) = v41;
  *(float *)(v14 + 28) = v43;
  *(float *)(v14 + 32) = v34;
  *(float *)(v14 + 36) = v42;
  *(float *)(v14 + 40) = v36 - (float)(v28 * v33);
  physx::Ext::Joint<physx::PxD6Joint,physx::PxD6JointGeneratedValues>::getCom(&v61, a6);
  v44 = v63;
  v45 = (float)(a7[1].f32[0] - v65) + (float)(a7[1].f32[0] - v65);
  v46 = (float)(a7[1].f32[1] - v66) + (float)(a7[1].f32[1] - v66);
  v47 = (float)(a7[1].f32[2] - v67) + (float)(a7[1].f32[2] - v67);
  v48 = (float)(v64 * v64) + -0.5;
  v49 = (float)((float)-(float)(v62 * v46) - (float)(v61 * v45)) - (float)(v63 * v47);
  v50 = (float)((float)(v64 * (float)((float)(v63 * v46) - (float)(v62 * v47))) + (float)(v45 * v48))
      - (float)(v61 * v49);
  v51 = (float)((float)(v64 * (float)((float)(v61 * v47) - (float)(v63 * v45))) + (float)(v46 * v48))
      - (float)(v62 * v49);
  v52 = (float)((float)(v64 * (float)((float)(v62 * v45) - (float)(v61 * v46))) + (float)(v47 * v48))
      - (float)(v63 * v49);
  v54 = a7->f32[2];
  v53 = a7->f32[3];
  v55 = a7->f32[1];
  v56 = (float)((float)((float)(v64 * v55) - (float)(v62 * v53)) - (float)(v63 * a7->f32[0])) + (float)(v54 * v61);
  v57 = (float)((float)((float)(v64 * v54) - (float)(v63 * v53)) - (float)(v61 * v55)) + (float)(a7->f32[0] * v62);
  v58 = (float)((float)(v61 * a7->f32[0]) + (float)(v64 * v53)) + (float)(v62 * v55);
  *(float *)(v14 + 44) = (float)((float)((float)(v64 * a7->f32[0]) - (float)(v61 * v53)) - (float)(v62 * v54))
                       + (float)(v55 * v63);
  *(float *)(v14 + 48) = v56;
  *(float *)(v14 + 52) = v57;
  *(float *)(v14 + 56) = v58 + (float)(v44 * v54);
  *(float *)(v14 + 60) = v50;
  *(float *)(v14 + 64) = v51;
  *(float *)(v14 + 68) = v52;
  __asm { FMOV            V0.4S, #1.0 }
  *(_OWORD *)v14 = _Q0;
  *(_QWORD *)(a1 + 104) = v14;
  return a1;
}

double physx::Ext::RevoluteJoint::RevoluteJoint(uint64_t a1, uint64_t a2, uint64_t a3, float32x4_t *a4, uint64_t a5, float32x4_t *a6)
{
  _QWORD *v6;
  uint64_t v7;
  double result;
  __int16 v9;

  v9 = 3;
  v6 = (_QWORD *)physx::Ext::Joint<physx::PxRevoluteJoint,physx::PxRevoluteJointGeneratedValues>::Joint(a1, 257, &v9, a3, a4, a5, a6, 0x90u);
  *v6 = &off_24ED988D8;
  v6[3] = &unk_24ED98AC0;
  v7 = v6[13];
  *(_DWORD *)(v7 + 124) = 1078530011;
  *(_OWORD *)(v7 + 80) = xmmword_2261ABF80;
  *(_DWORD *)(v7 + 96) = 1056964608;
  *(_QWORD *)(v7 + 100) = 0;
  result = 0.195796399;
  *(_OWORD *)(v7 + 108) = xmmword_2261ABF90;
  *(_WORD *)(v7 + 128) = 0;
  return result;
}

uint64_t physx::Ext::Joint<physx::PxRevoluteJoint,physx::PxRevoluteJointGeneratedValues>::Joint(uint64_t a1, __int16 a2, __int16 *a3, uint64_t a4, float32x4_t *a5, uint64_t a6, float32x4_t *a7, unsigned int a8)
{
  __int16 v13;
  uint64_t v14;
  __int32 v15;
  float32x4_t v24;
  uint64_t v27;
  float v28;
  float v29;
  float v30;
  float v31;
  float v32;
  float v33;
  float v34;
  float v35;
  float v36;
  float v37;
  float v38;
  float v39;
  float v40;
  float v41;
  float v42;
  float v43;
  float v44;
  float v45;
  float v46;
  float v47;
  float v48;
  float v49;
  float v50;
  float v51;
  float v52;
  float v53;
  float v54;
  float v55;
  float v56;
  float v57;
  float v58;
  float v61;
  float v62;
  float v63;
  float v64;
  float v65;
  float v66;
  float v67;

  v13 = *a3;
  *(_WORD *)(a1 + 8) = a2;
  *(_WORD *)(a1 + 10) = v13;
  *(_QWORD *)a1 = &off_24ED98DB0;
  *(_QWORD *)(a1 + 96) = 0;
  *(_QWORD *)(a1 + 24) = &unk_24ED98F88;
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  if (a8)
    v14 = (*(uint64_t (**)(uint64_t, _QWORD, const char *, const char *, uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24)
                                                                                          + 16))(physx::shdfnd::Foundation::mInstance + 24, a8, "NonTrackedAlloc", "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/physxextensions/src/ExtJoint.h", 454);
  else
    v14 = 0;
  v15 = a5[1].i32[2];
  _Q1 = *a5;
  _Q2 = vmulq_f32(_Q1, _Q1);
  _S3 = a5->i64[1];
  __asm { FMLA            S2, S3, V1.S[2] }
  _S3 = HIDWORD(*(unsigned __int128 *)a5);
  __asm { FMLA            S2, S3, V1.S[3] }
  _Q2.f32[0] = sqrtf(_Q2.f32[0]);
  v24 = vdivq_f32(*a5, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)_Q2.f32, 0));
  _Q2.i64[0] = a5[1].i64[0];
  *(float32x4_t *)(a1 + 40) = v24;
  *(_QWORD *)(a1 + 56) = _Q2.i64[0];
  *(_DWORD *)(a1 + 64) = v15;
  _Q0 = *a7;
  _Q1 = vmulq_f32(_Q0, _Q0);
  _Q2.i32[0] = a7->i64[1];
  __asm { FMLA            S1, S2, V0.S[2] }
  _Q2.i32[0] = HIDWORD(*(unsigned __int128 *)a7);
  __asm { FMLA            S1, S2, V0.S[3] }
  _Q1.f32[0] = sqrtf(_Q1.f32[0]);
  _Q2.i32[0] = a7[1].i32[2];
  v27 = a7[1].i64[0];
  *(float32x4_t *)(a1 + 68) = vdivq_f32(*a7, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)_Q1.f32, 0));
  *(_QWORD *)(a1 + 84) = v27;
  *(_DWORD *)(a1 + 92) = _Q2.i32[0];
  physx::Ext::Joint<physx::PxD6Joint,physx::PxD6JointGeneratedValues>::getCom(&v61, a4);
  v28 = v63;
  v29 = (float)(a5[1].f32[0] - v65) + (float)(a5[1].f32[0] - v65);
  v30 = (float)(a5[1].f32[1] - v66) + (float)(a5[1].f32[1] - v66);
  v31 = (float)(a5[1].f32[2] - v67) + (float)(a5[1].f32[2] - v67);
  v32 = (float)(v64 * v64) + -0.5;
  v33 = (float)((float)-(float)(v62 * v30) - (float)(v61 * v29)) - (float)(v63 * v31);
  v34 = (float)((float)(v64 * (float)((float)(v63 * v30) - (float)(v62 * v31))) + (float)(v29 * v32))
      - (float)(v61 * v33);
  v35 = (float)(v64 * (float)((float)(v61 * v31) - (float)(v63 * v29))) + (float)(v30 * v32);
  v36 = (float)(v64 * (float)((float)(v62 * v29) - (float)(v61 * v30))) + (float)(v31 * v32);
  v38 = a5->f32[2];
  v37 = a5->f32[3];
  v39 = a5->f32[1];
  v40 = (float)((float)((float)(v64 * v39) - (float)(v62 * v37)) - (float)(v63 * a5->f32[0])) + (float)(v38 * v61);
  v41 = (float)((float)((float)(v64 * v38) - (float)(v63 * v37)) - (float)(v61 * v39)) + (float)(a5->f32[0] * v62);
  v42 = v35 - (float)(v62 * v33);
  v43 = (float)((float)((float)(v61 * a5->f32[0]) + (float)(v64 * v37)) + (float)(v62 * v39)) + (float)(v63 * v38);
  *(float *)(v14 + 16) = (float)((float)((float)(v64 * a5->f32[0]) - (float)(v61 * v37)) - (float)(v62 * v38))
                       + (float)(v39 * v63);
  *(float *)(v14 + 20) = v40;
  *(float *)(v14 + 24) = v41;
  *(float *)(v14 + 28) = v43;
  *(float *)(v14 + 32) = v34;
  *(float *)(v14 + 36) = v42;
  *(float *)(v14 + 40) = v36 - (float)(v28 * v33);
  physx::Ext::Joint<physx::PxD6Joint,physx::PxD6JointGeneratedValues>::getCom(&v61, a6);
  v44 = v63;
  v45 = (float)(a7[1].f32[0] - v65) + (float)(a7[1].f32[0] - v65);
  v46 = (float)(a7[1].f32[1] - v66) + (float)(a7[1].f32[1] - v66);
  v47 = (float)(a7[1].f32[2] - v67) + (float)(a7[1].f32[2] - v67);
  v48 = (float)(v64 * v64) + -0.5;
  v49 = (float)((float)-(float)(v62 * v46) - (float)(v61 * v45)) - (float)(v63 * v47);
  v50 = (float)((float)(v64 * (float)((float)(v63 * v46) - (float)(v62 * v47))) + (float)(v45 * v48))
      - (float)(v61 * v49);
  v51 = (float)((float)(v64 * (float)((float)(v61 * v47) - (float)(v63 * v45))) + (float)(v46 * v48))
      - (float)(v62 * v49);
  v52 = (float)((float)(v64 * (float)((float)(v62 * v45) - (float)(v61 * v46))) + (float)(v47 * v48))
      - (float)(v63 * v49);
  v54 = a7->f32[2];
  v53 = a7->f32[3];
  v55 = a7->f32[1];
  v56 = (float)((float)((float)(v64 * v55) - (float)(v62 * v53)) - (float)(v63 * a7->f32[0])) + (float)(v54 * v61);
  v57 = (float)((float)((float)(v64 * v54) - (float)(v63 * v53)) - (float)(v61 * v55)) + (float)(a7->f32[0] * v62);
  v58 = (float)((float)(v61 * a7->f32[0]) + (float)(v64 * v53)) + (float)(v62 * v55);
  *(float *)(v14 + 44) = (float)((float)((float)(v64 * a7->f32[0]) - (float)(v61 * v53)) - (float)(v62 * v54))
                       + (float)(v55 * v63);
  *(float *)(v14 + 48) = v56;
  *(float *)(v14 + 52) = v57;
  *(float *)(v14 + 56) = v58 + (float)(v44 * v54);
  *(float *)(v14 + 60) = v50;
  *(float *)(v14 + 64) = v51;
  *(float *)(v14 + 68) = v52;
  __asm { FMOV            V0.4S, #1.0 }
  *(_OWORD *)v14 = _Q0;
  *(_QWORD *)(a1 + 104) = v14;
  return a1;
}

uint64_t physx::shdfnd::Array<physx::PxShape *,physx::shdfnd::InlineAllocator<128u,physx::shdfnd::ReflectionAllocator<physx::PxShape *>>>::resize(uint64_t result, unsigned int a2, _QWORD *a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;

  v5 = result;
  if ((*(_DWORD *)(result + 148) & 0x7FFFFFFFu) < a2)
    result = physx::shdfnd::Array<physx::PxShape *,physx::shdfnd::InlineAllocator<128u,physx::shdfnd::ReflectionAllocator<physx::PxShape *>>>::recreate(result, a2);
  v6 = *(unsigned int *)(v5 + 144);
  if (v6 < a2)
  {
    v7 = *(_QWORD *)(v5 + 136);
    v8 = (_QWORD *)(v7 + 8 * v6);
    do
      *v8++ = *a3;
    while ((unint64_t)v8 < v7 + 8 * (unint64_t)a2);
  }
  *(_DWORD *)(v5 + 144) = a2;
  return result;
}

uint64_t physx::shdfnd::Array<physx::PxShape *,physx::shdfnd::InlineAllocator<128u,physx::shdfnd::ReflectionAllocator<physx::PxShape *>>>::recreate(uint64_t result, int a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  const char *v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t *v10;
  unint64_t v11;
  _QWORD *v12;
  uint64_t v13;

  v3 = result;
  v4 = (8 * a2);
  if (v4 <= 0x80 && *(_BYTE *)(result + 128) == 0)
  {
    *(_BYTE *)(result + 128) = 1;
    v8 = (_QWORD *)result;
  }
  else if ((_DWORD)v4)
  {
    v6 = physx::shdfnd::Foundation::mInstance;
    if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)physx::shdfnd::Foundation::mInstance + 40))(physx::shdfnd::Foundation::mInstance))
      v7 = "static const char *physx::shdfnd::ReflectionAllocator<physx::PxShape *>::getName() [T = physx::PxShape *]";
    else
      v7 = "<allocation names disabled>";
    result = (*(uint64_t (**)(uint64_t, uint64_t, const char *, const char *, uint64_t))(*(_QWORD *)(v6 + 24)
                                                                                              + 16))(v6 + 24, v4, v7, "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/foundation/include/PsArray.h", 553);
    v8 = (_QWORD *)result;
  }
  else
  {
    v8 = 0;
  }
  v9 = *(unsigned int *)(v3 + 144);
  v10 = *(uint64_t **)(v3 + 136);
  if ((_DWORD)v9)
  {
    v11 = (unint64_t)&v8[v9];
    v12 = v8;
    do
    {
      v13 = *v10++;
      *v12++ = v13;
    }
    while ((unint64_t)v12 < v11);
    v10 = *(uint64_t **)(v3 + 136);
  }
  if ((*(_DWORD *)(v3 + 148) & 0x80000000) == 0)
  {
    if (v10 == (uint64_t *)v3)
    {
      *(_BYTE *)(v3 + 128) = 0;
    }
    else if (v10)
    {
      result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
    }
  }
  *(_QWORD *)(v3 + 136) = v8;
  *(_DWORD *)(v3 + 148) = a2;
  return result;
}

_QWORD *physx::PxSphericalJointCreate(uint64_t a1, uint64_t a2, float32x4_t *a3, uint64_t a4, float32x4_t *a5)
{
  uint64_t v10;
  const char *v11;
  _QWORD *v12;
  uint64_t v13;
  double v14;
  uint64_t v15;

  v10 = physx::shdfnd::Foundation::mInstance;
  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)physx::shdfnd::Foundation::mInstance + 40))(physx::shdfnd::Foundation::mInstance))
    v11 = "static const char *physx::shdfnd::ReflectionAllocator<physx::Ext::SphericalJoint>::getName() [T = physx::Ext::SphericalJoint]";
  else
    v11 = "<allocation names disabled>";
  v12 = (_QWORD *)(*(uint64_t (**)(uint64_t, uint64_t, const char *, const char *, uint64_t))(*(_QWORD *)(v10 + 24) + 16))(v10 + 24, 112, v11, "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/physxextensions/src/ExtSphericalJoint.cpp", 47);
  v13 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 40))(a1);
  v14 = physx::Ext::SphericalJoint::SphericalJoint((uint64_t)v12, v13, a2, a3, a4, a5);
  v15 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, _QWORD *, uint64_t *, uint64_t, double))(*(_QWORD *)a1 + 216))(a1, a2, a4, v12 + 3, &physx::Ext::SphericalJoint::sShaders, 128, v14);
  v12[12] = v15;
  if (!v15)
  {
    (*(void (**)(_QWORD *))(*v12 + 32))(v12);
    return 0;
  }
  return v12;
}

uint64_t physx::Ext::SphericalJoint::setProjectionLinearTolerance(physx::Ext::SphericalJoint *this, float a2)
{
  char *v2;
  uint64_t v3;

  v2 = (char *)this + 96;
  v3 = *((_QWORD *)this + 12);
  *(float *)(*((_QWORD *)v2 + 1) + 108) = a2;
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v3 + 72))(v3);
}

float physx::Ext::SphericalJoint::getProjectionLinearTolerance(physx::Ext::SphericalJoint *this)
{
  return *(float *)(*((_QWORD *)this + 13) + 108);
}

uint64_t physx::Ext::SphericalJoint::setLimitCone(uint64_t a1, __int128 *a2)
{
  uint64_t v2;
  __int128 v3;

  v2 = *(_QWORD *)(a1 + 104);
  v3 = *a2;
  *(_OWORD *)(v2 + 92) = *(__int128 *)((char *)a2 + 12);
  *(_OWORD *)(v2 + 80) = v3;
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 96) + 72))(*(_QWORD *)(a1 + 96));
}

float physx::Ext::SphericalJoint::getLimitCone@<S0>(physx::Ext::SphericalJoint *this@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  float result;

  v2 = *((_QWORD *)this + 13);
  *(_OWORD *)a2 = *(_OWORD *)(v2 + 80);
  result = *(float *)(v2 + 96);
  *(float *)(a2 + 16) = result;
  *(_QWORD *)(a2 + 20) = *(_QWORD *)(v2 + 100);
  return result;
}

uint64_t physx::Ext::SphericalJoint::getSphericalJointFlags@<X0>(uint64_t this@<X0>, _WORD *a2@<X8>)
{
  *a2 = *(_WORD *)(*(_QWORD *)(this + 104) + 112);
  return this;
}

uint64_t physx::Ext::SphericalJoint::setSphericalJointFlags(uint64_t result, _WORD *a2)
{
  *(_WORD *)(*(_QWORD *)(result + 104) + 112) = *a2;
  return result;
}

uint64_t physx::Ext::SphericalJoint::setSphericalJointFlag(uint64_t a1, __int16 a2, int a3)
{
  uint64_t v3;
  __int16 v4;

  v3 = *(_QWORD *)(a1 + 104);
  if (a3)
    v4 = *(_WORD *)(v3 + 112) | a2;
  else
    v4 = *(_WORD *)(v3 + 112) & ~a2;
  *(_WORD *)(v3 + 112) = v4;
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 96) + 72))(*(_QWORD *)(a1 + 96));
}

float physx::Ext::SphericalJoint::getSwingYAngle(physx::Ext::SphericalJoint *this)
{
  float v1;
  float v2;
  float v3;
  float v4;
  float v5;
  float v6;
  float v7;
  uint64_t v9;
  float v10;
  float v11;

  (*(void (**)(uint64_t *__return_ptr))(*(_QWORD *)this + 80))(&v9);
  if (*(float *)&v9 == 0.0)
  {
    v2 = 0.0;
    v3 = 0.0;
    v4 = 1.0;
  }
  else
  {
    v1 = sqrtf((float)((float)(*(float *)&v9 * *(float *)&v9) + 0.0) + (float)(v11 * v11));
    v2 = *(float *)&v9 / v1;
    v3 = 0.0 / v1;
    v4 = v11 / v1;
  }
  v5 = (float)((float)((float)(*(float *)&v9 * v2) + (float)(v11 * v4)) + (float)(*((float *)&v9 + 1) * v3))
     + (float)(v10 * v3);
  v6 = -(float)((float)((float)((float)(*((float *)&v9 + 1) * v4) - (float)(v11 * v3)) - (float)(v10 * v2))
              + (float)(v3 * *(float *)&v9));
  v7 = -v5;
  if (v5 >= 0.0)
  {
    v7 = (float)((float)((float)(*(float *)&v9 * v2) + (float)(v11 * v4)) + (float)(*((float *)&v9 + 1) * v3))
       + (float)(v10 * v3);
    v6 = (float)((float)((float)(*((float *)&v9 + 1) * v4) - (float)(v11 * v3)) - (float)(v10 * v2))
       + (float)(v3 * *(float *)&v9);
  }
  return atan2f(v6, v7 + 1.0) * 4.0;
}

float physx::Ext::SphericalJoint::getSwingZAngle(physx::Ext::SphericalJoint *this)
{
  float v1;
  float v2;
  float v3;
  float v4;
  float v5;
  float v6;
  float v7;
  uint64_t v9;
  float v10;
  float v11;

  (*(void (**)(uint64_t *__return_ptr))(*(_QWORD *)this + 80))(&v9);
  if (*(float *)&v9 == 0.0)
  {
    v2 = 0.0;
    v3 = 0.0;
    v4 = 1.0;
  }
  else
  {
    v1 = sqrtf((float)((float)(*(float *)&v9 * *(float *)&v9) + 0.0) + (float)(v11 * v11));
    v2 = *(float *)&v9 / v1;
    v3 = 0.0 / v1;
    v4 = v11 / v1;
  }
  v5 = (float)((float)((float)(*(float *)&v9 * v2) + (float)(v11 * v4)) + (float)(*((float *)&v9 + 1) * v3))
     + (float)(v10 * v3);
  v6 = -(float)((float)((float)((float)(v10 * v4) - (float)(v11 * v3)) - (float)(*(float *)&v9 * v3))
              + (float)(v2 * *((float *)&v9 + 1)));
  v7 = -v5;
  if (v5 >= 0.0)
  {
    v7 = (float)((float)((float)(*(float *)&v9 * v2) + (float)(v11 * v4)) + (float)(*((float *)&v9 + 1) * v3))
       + (float)(v10 * v3);
    v6 = (float)((float)((float)(v10 * v4) - (float)(v11 * v3)) - (float)(*(float *)&v9 * v3))
       + (float)(v2 * *((float *)&v9 + 1));
  }
  return atan2f(v6, v7 + 1.0) * 4.0;
}

uint64_t physx::Ext::SphericalJoint::exportExtraData(uint64_t a1, uint64_t a2)
{
  if (*(_QWORD *)(a1 + 104))
  {
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 24))(a2, 16);
    (*(void (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)a2 + 16))(a2, *(_QWORD *)(a1 + 104), 128);
  }
  return (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)a2 + 32))(a2, *(_QWORD *)(a1 + 32));
}

uint64_t SphericalJointSolverPrep(uint64_t a1, float32x2_t *a2, uint64_t a3, _OWORD *a4, uint64_t a5, float32x2_t *a6, float32x2_t *a7, uint64_t a8, float32x2_t *a9, float32x2_t *a10)
{
  float v13;
  float v14;
  float v15;
  float v16;
  float v17;
  float v18;
  float v19;
  float v20;
  float v21;
  float v22;
  float v23;
  float v24;
  float v25;
  float v26;
  float v27;
  float v28;
  float v29;
  float v30;
  float v31;
  float v32;
  float v33;
  float v34;
  float v35;
  int v36;
  uint64_t v37;
  float v38;
  float v39;
  float v40;
  float v41;
  float v42;
  float v43;
  float32_t v44;
  float32_t v45;
  uint64_t v47;
  float v48;
  int v49;
  float32x2_t v50;
  float v51;
  float32x2_t v52;
  float v53;
  float v54;
  uint64_t v55;
  uint64_t v56;
  float32x2_t v57;
  float v58;
  float v59;
  float v60;
  float v61;
  float v62;
  float v63;
  float v64;
  float v65;
  float v66;
  float v67;
  float v68;
  float v69;

  physx::Ext::joint::ConstraintHelper::ConstraintHelper((uint64_t)&v55, a1, a4, (uint64_t)&v63, &v57, a2, (float *)a5, a6, a7);
  v13 = v57.f32[1];
  v14 = v57.f32[0];
  v15 = v63;
  v16 = v64;
  v17 = v58;
  v18 = v59;
  v19 = v65;
  v20 = v66;
  if ((float)((float)((float)((float)(v57.f32[1] * v64) + (float)(v57.f32[0] * v63)) + (float)(v58 * v65))
             + (float)(v59 * v66)) < 0.0)
  {
    v14 = -v57.f32[0];
    v13 = -v57.f32[1];
    v17 = -v58;
    v57.f32[0] = -v57.f32[0];
    v57.f32[1] = -v57.f32[1];
    v18 = -v59;
    v58 = -v58;
    v59 = -v59;
  }
  if ((*(_WORD *)(a5 + 112) & 2) != 0)
  {
    v21 = (float)((float)((float)(v66 * v14) - (float)(v63 * v18)) - (float)(v64 * v17)) + (float)(v13 * v65);
    v22 = (float)((float)((float)(v66 * v13) - (float)(v64 * v18)) - (float)(v65 * v14)) + (float)(v17 * v63);
    v23 = (float)((float)((float)(v66 * v17) - (float)(v65 * v18)) - (float)(v63 * v13)) + (float)(v14 * v64);
    v24 = (float)((float)((float)(v63 * v14) + (float)(v66 * v18)) + (float)(v64 * v13)) + (float)(v65 * v17);
    v25 = 0.0;
    if (v21 == 0.0)
    {
      v29 = 1.0;
      v27 = 0.0;
      v28 = 0.0;
    }
    else
    {
      v26 = sqrtf((float)((float)(v21 * v21) + 0.0) + (float)(v24 * v24));
      v27 = v21 / v26;
      v28 = 0.0 / v26;
      v29 = v24 / v26;
    }
    v52.f32[0] = (float)((float)((float)(v21 * v29) - (float)(v24 * v27)) - (float)(v22 * v28)) + (float)(v28 * v23);
    v52.f32[1] = (float)((float)((float)(v22 * v29) - (float)(v24 * v28)) - (float)(v23 * v27)) + (float)(v28 * v21);
    v53 = (float)((float)((float)(v23 * v29) - (float)(v24 * v28)) - (float)(v21 * v28)) + (float)(v27 * v22);
    v54 = (float)((float)((float)(v21 * v27) + (float)(v24 * v29)) + (float)(v22 * v28)) + (float)(v23 * v28);
    v49 = 0;
    if (*(float *)(a5 + 92) <= 0.0 && *(float *)(a5 + 88) <= 0.0)
      v25 = *(float *)(a5 + 96);
    v47 = *(_QWORD *)(a5 + 100);
    v48 = v25;
    if (physx::Cm::ConeLimitHelperTanLess::getLimit((float *)&v47, (float *)&v52, (float *)&v50, (float *)&v49))
    {
      v30 = v65;
      v31 = (float)(v66 * v66) + -0.5;
      v32 = (float)((float)((float)(v50.f32[1] + v50.f32[1]) * v64) + (float)(v63 * (float)(v50.f32[0] + v50.f32[0])))
          + (float)(v65 * (float)(v51 + v51));
      v33 = (float)((float)(v66
                          * (float)((float)(v64 * (float)(v51 + v51)) - (float)(v65 * (float)(v50.f32[1] + v50.f32[1]))))
                  + (float)((float)(v50.f32[0] + v50.f32[0]) * v31))
          + (float)(v63 * v32);
      v34 = (float)((float)(v66
                          * (float)((float)(v65 * (float)(v50.f32[0] + v50.f32[0])) - (float)(v63 * (float)(v51 + v51))))
                  + (float)((float)(v50.f32[1] + v50.f32[1]) * v31))
          + (float)(v64 * v32);
      v35 = (float)(v66
                  * (float)((float)(v63 * (float)(v50.f32[1] + v50.f32[1]))
                          - (float)(v64 * (float)(v50.f32[0] + v50.f32[0]))))
          + (float)((float)(v51 + v51) * v31);
      v36 = v49;
      v37 = v56;
      v56 += 80;
      *(_WORD *)(v37 + 78) = 0;
      *(_QWORD *)v37 = 0;
      v38 = v35 + (float)(v30 * v32);
      *(_DWORD *)(v37 + 8) = 0;
      *(float *)(v37 + 20) = v34;
      *(float *)(v37 + 24) = v38;
      *(_QWORD *)(v37 + 32) = 0;
      *(_DWORD *)(v37 + 40) = 0;
      *(float *)(v37 + 48) = v33;
      *(float *)(v37 + 52) = v34;
      *(float *)(v37 + 56) = v38;
      *(_DWORD *)(v37 + 12) = v36;
      *(float *)(v37 + 16) = v33;
      *(_WORD *)(v37 + 76) |= 0x40u;
      physx::Ext::joint::ConstraintHelper::addLimit((uint64_t)&v55, v37, a5 + 80);
    }
    v15 = v63;
    v16 = v64;
    v19 = v65;
    v20 = v66;
  }
  v39 = (float)(v60 - v67) + (float)(v60 - v67);
  v40 = (float)(v61 - v68) + (float)(v61 - v68);
  v41 = (float)(v62 - v69) + (float)(v62 - v69);
  v42 = (float)(v20 * v20) + -0.5;
  v43 = (float)((float)(v16 * v40) + (float)(v15 * v39)) + (float)(v19 * v41);
  *(float *)&v47 = (float)((float)(v39 * v42) - (float)((float)((float)(v16 * v41) - (float)(v19 * v40)) * v20))
                 + (float)(v15 * v43);
  *((float *)&v47 + 1) = (float)((float)(v40 * v42) - (float)((float)((float)(v19 * v39) - (float)(v15 * v41)) * v20))
                       + (float)(v16 * v43);
  v48 = (float)((float)(v41 * v42) - (float)((float)((float)(v15 * v40) - (float)(v16 * v39)) * v20))
      + (float)(v19 * v43);
  physx::Ext::joint::ConstraintHelper::prepareLockedAxes((uint64_t)&v55, &v63, (float *)&v57, (float *)&v47, 7, 0, (float *)&v52, (float *)&v50);
  v44 = v53 + a6[3].f32[0];
  *a9 = vadd_f32(v52, a6[2]);
  a9[1].f32[0] = v44;
  v45 = v51 + a7[3].f32[0];
  *a10 = vadd_f32(v50, a7[2]);
  a10[1].f32[0] = v45;
  return -858993459 * ((unint64_t)(v56 - v55) >> 4);
}

float SphericalJointProject(float *a1, float *a2, float *a3, int a4)
{
  float result;
  float v9;
  float v10;
  float v11;
  float v12;
  float v13;
  float v14;
  float v15;
  float v16;
  float v17;
  float v18;
  float v19;
  float v20;
  float v21;
  float v22;
  float v23;
  float v24;
  float v25;
  float v26;
  float v27;
  float v28;
  float v29;
  float v30;
  float v31;
  float v32;
  float v33;
  float v34;
  float v35;
  float v36;
  float v37;
  float v38;
  float v39;
  float v40;
  float v41;
  float v42;
  float v43;
  float v44;
  float v45;
  float v46;
  float v47;
  float v48;
  float v49;
  float v50;
  float v51;
  float v52;
  float v53;
  float v54;
  float v55;
  float v56;
  float v57;
  float v58;
  float v59;
  float v60;
  float v61;
  float v62;
  float v63;
  float v64;
  float v65;
  float v66;
  float v67;
  float v68;
  float v69;
  float v70;
  float v71;
  float v72;
  float v73;
  float v74;
  float v75;
  float v76;
  float v77;
  float v78;
  float v79;
  float v80;
  float v81;
  float v82;
  float v83;
  float v84;
  float v85;
  float v86;
  float v87;
  float v88;
  float v89;
  float v90;
  float v91;
  float v92;
  float v93;
  float v94;
  float v95;
  float v96;
  float v97;
  float v98;
  float v99;
  float v100;
  float v101;
  float v102;
  float v103;
  float v104;
  float v105;
  float v106;
  float v107;

  physx::Ext::joint::computeDerived(a1, a2, a3, &v101, &v94, &v87, 1);
  result = a1[27];
  v9 = (float)((float)(v92 * v92) + (float)(v91 * v91)) + (float)(v93 * v93);
  if (v9 > (float)(result * result))
  {
    v10 = 1.0 / sqrtf(v9);
    v11 = result * (float)(v91 * v10);
    v12 = result * (float)(v92 * v10);
    v13 = result * (float)(v93 * v10);
    if (a4)
    {
      v14 = a1[15] * -2.0;
      v15 = a1[16] * -2.0;
      v16 = a1[17] * -2.0;
      v18 = a1[13];
      v17 = a1[14];
      v19 = (float)(v17 * v17) + -0.5;
      v20 = a1[11];
      v21 = a1[12];
      v22 = (float)((float)(v15 * v21) + (float)(v20 * v14)) + (float)(v18 * v16);
      v23 = (float)((float)(v14 * v19) - (float)((float)((float)(v21 * v16) - (float)(v18 * v15)) * v17))
          + (float)(v20 * v22);
      v24 = (float)((float)(v15 * v19) - (float)((float)((float)(v18 * v14) - (float)(v20 * v16)) * v17))
          + (float)(v21 * v22);
      v25 = (float)((float)(v16 * v19) - (float)((float)((float)(v20 * v15) - (float)(v21 * v14)) * v17))
          + (float)(v18 * v22);
      v26 = v23 + v23;
      v27 = v24 + v24;
      v28 = v25 + v25;
      v29 = (float)(v90 * v90) + -0.5;
      v30 = (float)((float)(v88 * (float)(v24 + v24)) + (float)(v87 * (float)(v23 + v23))) + (float)(v89 * v28);
      v31 = (float)((float)(v90 * (float)((float)(v88 * v28) - (float)(v89 * (float)(v24 + v24))))
                  + (float)((float)(v23 + v23) * v29))
          + (float)(v87 * v30);
      v32 = (float)((float)(v90 * (float)((float)(v89 * v26) - (float)(v87 * v28))) + (float)((float)(v24 + v24) * v29))
          + (float)(v88 * v30);
      v33 = v13
          + (float)((float)((float)(v90 * (float)((float)(v87 * v27) - (float)(v88 * v26))) + (float)(v28 * v29))
                  + (float)(v89 * v30));
      v34 = (float)((float)((float)(v87 * v17) - (float)(v90 * v20)) - (float)(v88 * v18)) + (float)(v21 * v89);
      v35 = (float)((float)((float)(v88 * v17) - (float)(v90 * v21)) - (float)(v89 * v20)) + (float)(v18 * v87);
      v36 = (float)((float)((float)(v89 * v17) - (float)(v90 * v18)) - (float)(v87 * v21)) + (float)(v20 * v88);
      v37 = (float)((float)((float)(v87 * v20) + (float)(v90 * v17)) + (float)(v88 * v21)) + (float)(v89 * v18);
      v38 = (float)(v11 + v31) + (float)(v11 + v31);
      v39 = (float)(v12 + v32) + (float)(v12 + v32);
      v40 = (float)(v104 * v104) + -0.5;
      v41 = (float)((float)(v102 * v39) + (float)(v101 * v38)) + (float)(v103 * (float)(v33 + v33));
      v42 = (float)((float)(v104 * (float)((float)(v102 * (float)(v33 + v33)) - (float)(v103 * v39)))
                  + (float)(v38 * v40))
          + (float)(v101 * v41);
      v43 = (float)((float)(v104 * (float)((float)(v103 * v38) - (float)(v101 * (float)(v33 + v33))))
                  + (float)(v39 * v40))
          + (float)(v102 * v41);
      v44 = (float)((float)(v104 * (float)((float)(v101 * v39) - (float)(v102 * v38)))
                  + (float)((float)(v33 + v33) * v40))
          + (float)(v103 * v41);
      v45 = v105 + v42;
      v46 = v106 + v43;
      v47 = v107 + v44;
      result = (float)((float)((float)(v37 * v101) + (float)(v104 * v34)) + (float)(v102 * v36)) - (float)(v35 * v103);
      v48 = (float)((float)((float)(v37 * v102) + (float)(v104 * v35)) + (float)(v103 * v34)) - (float)(v36 * v101);
      v49 = (float)((float)((float)(v37 * v103) + (float)(v104 * v36)) + (float)(v101 * v35)) - (float)(v34 * v102);
      v50 = (float)((float)((float)(v104 * v37) - (float)(v101 * v34)) - (float)(v102 * v35)) - (float)(v103 * v36);
      *a3 = result;
      a3[1] = v48;
      a3[2] = v49;
      a3[3] = v50;
      a3[4] = v45;
      a3[5] = v46;
      a3[6] = v47;
      v51 = sqrtf((float)((float)((float)(v48 * v48) + (float)(result * result)) + (float)(v49 * v49)) + (float)(v50 * v50));
      if (v51 != 0.0)
      {
        *a3 = result / v51;
        a3[1] = v48 / v51;
        result = v49 / v51;
        a3[2] = v49 / v51;
        a3[3] = v50 / v51;
      }
    }
    else
    {
      v52 = a1[8] * -2.0;
      v53 = a1[9] * -2.0;
      v54 = a1[10] * -2.0;
      v56 = a1[6];
      v55 = a1[7];
      v57 = (float)(v55 * v55) + -0.5;
      v58 = a1[4];
      v59 = a1[5];
      v60 = (float)((float)(v53 * v59) + (float)(v58 * v52)) + (float)(v56 * v54);
      v61 = (float)((float)(v52 * v57) - (float)((float)((float)(v59 * v54) - (float)(v56 * v53)) * v55))
          + (float)(v58 * v60);
      v62 = (float)((float)(v53 * v57) - (float)((float)((float)(v56 * v52) - (float)(v58 * v54)) * v55))
          + (float)(v59 * v60);
      v63 = (float)((float)((float)(v54 * v57) - (float)((float)((float)(v58 * v53) - (float)(v59 * v52)) * v55))
                  + (float)(v56 * v60))
          - v13;
      v64 = (float)(v61 - v11) + (float)(v61 - v11);
      v65 = (float)(v62 - v12) + (float)(v62 - v12);
      v66 = v63 + v63;
      v67 = (float)(v90 * v90) + -0.5;
      v68 = (float)((float)-(float)(v88 * v65) - (float)(v87 * v64)) - (float)(v89 * v66);
      v69 = (float)((float)(v90 * (float)((float)(v89 * v65) - (float)(v88 * v66))) + (float)(v64 * v67))
          - (float)(v87 * v68);
      v70 = (float)((float)(v90 * (float)((float)(v87 * v66) - (float)(v89 * v64))) + (float)(v65 * v67))
          - (float)(v88 * v68);
      v71 = (float)((float)(v90 * (float)((float)(v88 * v64) - (float)(v87 * v65))) + (float)(v66 * v67))
          - (float)(v89 * v68);
      v72 = (float)((float)((float)-(float)(v87 * v55) - (float)(v90 * v58)) + (float)(v88 * v56)) - (float)(v59 * v89);
      v73 = (float)((float)((float)-(float)(v88 * v55) - (float)(v90 * v59)) + (float)(v89 * v58)) - (float)(v56 * v87);
      v74 = (float)((float)((float)-(float)(v89 * v55) - (float)(v90 * v56)) + (float)(v87 * v59)) - (float)(v58 * v88);
      v75 = (float)((float)((float)(v90 * v55) - (float)(v58 * v87)) - (float)(v88 * v59)) - (float)(v89 * v56);
      v76 = (float)(v97 * v97) + -0.5;
      v77 = (float)((float)(v95 * (float)(v70 + v70)) + (float)(v94 * (float)(v69 + v69)))
          + (float)(v96 * (float)(v71 + v71));
      v78 = (float)((float)(v97 * (float)((float)(v96 * (float)(v69 + v69)) - (float)(v94 * (float)(v71 + v71))))
                  + (float)((float)(v70 + v70) * v76))
          + (float)(v95 * v77);
      v79 = (float)((float)(v97 * (float)((float)(v94 * (float)(v70 + v70)) - (float)(v95 * (float)(v69 + v69))))
                  + (float)((float)(v71 + v71) * v76))
          + (float)(v96 * v77);
      v80 = v98
          + (float)((float)((float)(v97 * (float)((float)(v95 * (float)(v71 + v71)) - (float)(v96 * (float)(v70 + v70))))
                          + (float)((float)(v69 + v69) * v76))
                  + (float)(v94 * v77));
      v81 = v99 + v78;
      v82 = v100 + v79;
      result = (float)((float)((float)(v75 * v94) + (float)(v97 * v72)) + (float)(v95 * v74)) - (float)(v73 * v96);
      v83 = (float)((float)((float)(v75 * v95) + (float)(v97 * v73)) + (float)(v96 * v72)) - (float)(v74 * v94);
      v84 = (float)((float)((float)(v75 * v96) + (float)(v97 * v74)) + (float)(v94 * v73)) - (float)(v72 * v95);
      v85 = (float)((float)((float)(v97 * v75) - (float)(v94 * v72)) - (float)(v95 * v73)) - (float)(v96 * v74);
      *a2 = result;
      a2[1] = v83;
      a2[2] = v84;
      a2[3] = v85;
      a2[4] = v80;
      a2[5] = v81;
      a2[6] = v82;
      v86 = sqrtf((float)((float)((float)(v83 * v83) + (float)(result * result)) + (float)(v84 * v84)) + (float)(v85 * v85));
      if (v86 != 0.0)
      {
        *a2 = result / v86;
        a2[1] = v83 / v86;
        result = v84 / v86;
        a2[2] = v84 / v86;
        a2[3] = v85 / v86;
      }
    }
  }
  return result;
}

void SphericalJointVisualize(uint64_t a1, uint64_t a2, float *a3, float *a4, char a5)
{
  float v8;
  float v9;
  float v10;
  float v11;
  float v12;
  float v13;
  float v14;
  float v15;
  float v16;
  float v17;
  float v18;
  float v19;
  float v20;
  float v21;
  float v22;
  float v23;
  float v24;
  float v25;
  float v26;
  float v27;
  float v28;
  float v29;
  float v30;
  __n128 v31;
  float v32;
  float v33;
  float v34;
  float v35;
  float v36;
  float v37;
  float v38;
  float v39;
  float v40;
  float v41;

  v8 = physx::Ext::joint::computeJointFrames(&v38, &v34, (float *)a2, a3, a4);
  if ((a5 & 1) != 0)
    (*(void (**)(uint64_t, float *, float *, float))(*(_QWORD *)a1 + 16))(a1, &v38, &v34, v8);
  if ((a5 & 2) != 0 && (*(_WORD *)(a2 + 112) & 2) != 0)
  {
    v10 = v34;
    v9 = v35;
    v11 = v36;
    v12 = v37;
    if ((float)((float)((float)((float)(v39 * v35) + (float)(v38 * v34)) + (float)(v40 * v36)) + (float)(v41 * v37)) < 0.0)
    {
      v10 = -v34;
      v9 = -v35;
      v11 = -v36;
      v34 = -v34;
      v35 = -v35;
      v12 = -v37;
      v36 = -v36;
      v37 = -v37;
    }
    v13 = (float)((float)((float)(v41 * v10) - (float)(v38 * v12)) - (float)(v39 * v11)) + (float)(v9 * v40);
    v14 = (float)((float)((float)(v41 * v9) - (float)(v39 * v12)) - (float)(v40 * v10)) + (float)(v11 * v38);
    v15 = (float)((float)((float)(v41 * v11) - (float)(v40 * v12)) - (float)(v38 * v9)) + (float)(v10 * v39);
    v16 = (float)((float)((float)(v38 * v10) + (float)(v41 * v12)) + (float)(v39 * v9)) + (float)(v40 * v11);
    v17 = 0.0;
    if (v13 == 0.0)
    {
      v21 = 1.0;
      v19 = 0.0;
      v20 = 0.0;
    }
    else
    {
      v18 = sqrtf((float)((float)(v13 * v13) + 0.0) + (float)(v16 * v16));
      v19 = v13 / v18;
      v20 = 0.0 / v18;
      v21 = v16 / v18;
    }
    v22 = (float)((float)((float)(v14 * v21) - (float)(v16 * v20)) - (float)(v15 * v19)) + (float)(v20 * v13);
    v23 = (float)((float)((float)(v15 * v21) - (float)(v16 * v20)) - (float)(v13 * v20)) + (float)(v19 * v14);
    v24 = (float)((float)((float)(v13 * v19) + (float)(v16 * v21)) + (float)(v14 * v20)) + (float)(v15 * v20);
    if (*(float *)(a2 + 92) <= 0.0 && *(float *)(a2 + 88) <= 0.0)
      v17 = *(float *)(a2 + 96);
    v25 = v24 + 1.0;
    v26 = atan2f(v22, v24 + 1.0) * 4.0;
    v27 = atan2f(v23, v25) * 4.0;
    v28 = *(float *)(a2 + 100);
    v29 = *(float *)(a2 + 104);
    v30 = tanf(v29 * 0.25);
    v31.n128_u32[0] = tanf(v28 * 0.25);
    v32 = fabsf(v26);
    v33 = fabsf(v27);
    (*(void (**)(uint64_t, float *, BOOL, float, __n128))(*(_QWORD *)a1 + 40))(a1, &v38, (float)((float)((float)((float)(v17 + v32) / v28) * (float)((float)(v17 + v32) / v28))+ (float)((float)((float)(v17 + v33) / v29) * (float)((float)(v17 + v33) / v29))) > 1.0, v30, v31);
  }
}

uint64_t physx::PxMeshOverlapUtil::findOverlap(uint64_t *a1, int *a2, float32x4_t *a3, uint64_t a4, uint64_t a5)
{
  uint64_t result;
  unsigned int v11;
  uint64_t v12;
  char v13;

  v13 = 0;
  result = physx::PxMeshQuery::findOverlapTriangleMesh(a2, a3, a4, a5, *a1, *((_DWORD *)a1 + 259), 0, &v13);
  if (v13)
  {
    result = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a4 + 40) + 80))(*(_QWORD *)(a4 + 40));
    if ((_DWORD)result)
    {
      v11 = result;
      v12 = *a1;
      if (*((_DWORD *)a1 + 259) >= result)
      {
        v11 = *((_DWORD *)a1 + 259);
      }
      else
      {
        if ((uint64_t *)v12 != a1 + 1 && v12)
          (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24, *a1);
        v12 = (*(uint64_t (**)(uint64_t, uint64_t, const char *, const char *, uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24)
                                                                                               + 16))(physx::shdfnd::Foundation::mInstance + 24, 4 * v11, "NonTrackedAlloc", "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/physxextensions/src/ExtTriangleMeshExt.cpp", 72);
        *a1 = v12;
        *((_DWORD *)a1 + 259) = v11;
      }
      result = physx::PxMeshQuery::findOverlapTriangleMesh(a2, a3, a4, a5, v12, v11, 0, &v13);
    }
  }
  *((_DWORD *)a1 + 258) = result;
  return result;
}

uint64_t physx::PxMeshOverlapUtil::findOverlap(uint64_t *a1, uint64_t a2, float *a3, uint64_t a4, float *a5, double a6, double a7, double a8, double a9)
{
  uint64_t result;
  int v15;
  unsigned int v16;
  double v17;
  double v18;
  double v19;
  double v20;
  uint64_t v21;
  char v22;

  v22 = 1;
  result = physx::PxMeshQuery::findOverlapHeightField(a2, a3, (float32x2_t *)a4, a5, *a1, *((_DWORD *)a1 + 259), 0, &v22, a6, a7, a8, a9);
  if (v22)
  {
    v15 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a4 + 8) + 64))(*(_QWORD *)(a4 + 8));
    v16 = 2 * v15 * (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a4 + 8) + 72))(*(_QWORD *)(a4 + 8));
    if (v16)
    {
      v21 = *a1;
      if (*((_DWORD *)a1 + 259) >= v16)
      {
        v16 = *((_DWORD *)a1 + 259);
      }
      else
      {
        if ((uint64_t *)v21 != a1 + 1 && v21)
          (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24, *a1);
        v21 = (*(uint64_t (**)(uint64_t, uint64_t, const char *, const char *, uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24)
                                                                                               + 16))(physx::shdfnd::Foundation::mInstance + 24, 4 * v16, "NonTrackedAlloc", "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/physxextensions/src/ExtTriangleMeshExt.cpp", 102);
        *a1 = v21;
        *((_DWORD *)a1 + 259) = v16;
      }
      result = physx::PxMeshQuery::findOverlapHeightField(a2, a3, (float32x2_t *)a4, a5, v21, v16, 0, &v22, v17, v18, v19, v20);
    }
    else
    {
      result = 0;
    }
  }
  *((_DWORD *)a1 + 258) = result;
  return result;
}

uint64_t physx::Ext::Joint<physx::PxSphericalJoint,physx::PxSphericalJointGeneratedValues>::release(uint64_t a1)
{
  return (***(uint64_t (****)(_QWORD))(a1 + 96))(*(_QWORD *)(a1 + 96));
}

const char *physx::PxSphericalJoint::getConcreteTypeName(physx::PxSphericalJoint *this)
{
  return "PxSphericalJoint";
}

void physx::Ext::SphericalJoint::~SphericalJoint(physx::Ext::SphericalJoint *this)
{
  *(_QWORD *)this = &off_24ED99278;
  *((_QWORD *)this + 3) = &unk_24ED99410;
  if ((*((_BYTE *)this + 10) & 1) != 0)
  {
    if (*((_QWORD *)this + 13))
      (*(void (**)(uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
    *((_QWORD *)this + 13) = 0;
  }
}

{
  *(_QWORD *)this = &off_24ED99278;
  *((_QWORD *)this + 3) = &unk_24ED99410;
  if ((*((_BYTE *)this + 10) & 1) != 0)
  {
    if (*((_QWORD *)this + 13))
      (*(void (**)(uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
    *((_QWORD *)this + 13) = 0;
  }
  (*(void (**)(uint64_t, physx::Ext::SphericalJoint *))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24)
                                                                + 24))(physx::shdfnd::Foundation::mInstance + 24, this);
}

BOOL physx::PxSphericalJoint::isKindOf(physx::PxSphericalJoint *this, const char *a2)
{
  return !strcmp("PxSphericalJoint", a2) || physx::PxJoint::isKindOf(this, a2);
}

uint64_t physx::Ext::Joint<physx::PxSphericalJoint,physx::PxSphericalJointGeneratedValues>::setActors(uint64_t a1, uint64_t a2, uint64_t a3)
{
  float v6;
  float v7;
  float v8;
  float v9;
  float v10;
  float v11;
  float v12;
  float v13;
  float v14;
  float v15;
  float v16;
  float v17;
  float v18;
  float v19;
  float v20;
  float v21;
  float v22;
  float *v23;
  float v24;
  float v25;
  float v26;
  float v27;
  float v28;
  float v29;
  float v30;
  float v31;
  float v32;
  float v33;
  float v34;
  float v35;
  float v36;
  float v37;
  float v38;
  float *v39;
  float v41;
  float v42;
  float v43;
  float v44;
  float v45;
  float v46;
  float v47;

  (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 96) + 64))(*(_QWORD *)(a1 + 96));
  physx::Ext::Joint<physx::PxD6Joint,physx::PxD6JointGeneratedValues>::getCom(&v41, a2);
  v6 = v43;
  v7 = (float)(*(float *)(a1 + 56) - v45) + (float)(*(float *)(a1 + 56) - v45);
  v8 = (float)(*(float *)(a1 + 60) - v46) + (float)(*(float *)(a1 + 60) - v46);
  v9 = (float)(*(float *)(a1 + 64) - v47) + (float)(*(float *)(a1 + 64) - v47);
  v10 = (float)(v44 * v44) + -0.5;
  v11 = (float)((float)-(float)(v42 * v8) - (float)(v41 * v7)) - (float)(v43 * v9);
  v12 = (float)((float)(v44 * (float)((float)(v43 * v8) - (float)(v42 * v9))) + (float)(v7 * v10)) - (float)(v41 * v11);
  v13 = (float)(v44 * (float)((float)(v41 * v9) - (float)(v43 * v7))) + (float)(v8 * v10);
  v14 = (float)(v44 * (float)((float)(v42 * v7) - (float)(v41 * v8))) + (float)(v9 * v10);
  v16 = *(float *)(a1 + 48);
  v15 = *(float *)(a1 + 52);
  v17 = *(float *)(a1 + 40);
  v18 = *(float *)(a1 + 44);
  v19 = (float)((float)((float)(v44 * v18) - (float)(v42 * v15)) - (float)(v43 * v17)) + (float)(v16 * v41);
  v20 = (float)((float)((float)(v44 * v16) - (float)(v43 * v15)) - (float)(v41 * v18)) + (float)(v17 * v42);
  v21 = v13 - (float)(v42 * v11);
  v22 = (float)((float)((float)(v41 * v17) + (float)(v44 * v15)) + (float)(v42 * v18)) + (float)(v43 * v16);
  v23 = *(float **)(a1 + 104);
  v23[4] = (float)((float)((float)(v44 * v17) - (float)(v41 * v15)) - (float)(v42 * v16)) + (float)(v18 * v43);
  v23[5] = v19;
  v23[6] = v20;
  v23[7] = v22;
  v23[8] = v12;
  v23[9] = v21;
  v23[10] = v14 - (float)(v6 * v11);
  physx::Ext::Joint<physx::PxD6Joint,physx::PxD6JointGeneratedValues>::getCom(&v41, a3);
  v24 = (float)(*(float *)(a1 + 84) - v45) + (float)(*(float *)(a1 + 84) - v45);
  v25 = (float)(*(float *)(a1 + 88) - v46) + (float)(*(float *)(a1 + 88) - v46);
  v26 = (float)(*(float *)(a1 + 92) - v47) + (float)(*(float *)(a1 + 92) - v47);
  v27 = (float)(v44 * v44) + -0.5;
  v28 = (float)((float)-(float)(v42 * v25) - (float)(v41 * v24)) - (float)(v43 * v26);
  v29 = (float)((float)(v44 * (float)((float)(v43 * v25) - (float)(v42 * v26))) + (float)(v24 * v27))
      - (float)(v41 * v28);
  v30 = (float)((float)(v44 * (float)((float)(v41 * v26) - (float)(v43 * v24))) + (float)(v25 * v27))
      - (float)(v42 * v28);
  v31 = (float)((float)(v44 * (float)((float)(v42 * v24) - (float)(v41 * v25))) + (float)(v26 * v27))
      - (float)(v43 * v28);
  v33 = *(float *)(a1 + 76);
  v32 = *(float *)(a1 + 80);
  v34 = *(float *)(a1 + 68);
  v35 = *(float *)(a1 + 72);
  v36 = (float)((float)((float)(v44 * v35) - (float)(v42 * v32)) - (float)(v43 * v34)) + (float)(v33 * v41);
  v37 = (float)((float)((float)(v44 * v33) - (float)(v43 * v32)) - (float)(v41 * v35)) + (float)(v34 * v42);
  v38 = (float)((float)((float)(v41 * v34) + (float)(v44 * v32)) + (float)(v42 * v35)) + (float)(v43 * v33);
  v39 = *(float **)(a1 + 104);
  v39[11] = (float)((float)((float)(v44 * v34) - (float)(v41 * v32)) - (float)(v42 * v33)) + (float)(v35 * v43);
  v39[12] = v36;
  v39[13] = v37;
  v39[14] = v38;
  v39[15] = v29;
  v39[16] = v30;
  v39[17] = v31;
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 96) + 72))(*(_QWORD *)(a1 + 96));
}

uint64_t physx::Ext::Joint<physx::PxSphericalJoint,physx::PxSphericalJointGeneratedValues>::getActors(uint64_t a1, _QWORD *a2, _QWORD *a3)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 96);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 56))(result);
  *a2 = 0;
  *a3 = 0;
  return result;
}

uint64_t physx::Ext::Joint<physx::PxSphericalJoint,physx::PxSphericalJointGeneratedValues>::setLocalPose(uint64_t a1, unsigned int a2, float *a3)
{
  float v5;
  float v6;
  float v7;
  float v8;
  float v9;
  float v10;
  float v11;
  float v12;
  float v13;
  float v14;
  float v15;
  uint64_t v16;
  float *v17;
  float v18;
  float v19;
  float v20;
  float v21;
  float v22;
  float v23;
  float v24;
  float v25;
  float v26;
  float v27;
  float v28;
  float *v29;
  float v31;
  float v32;
  float v33;
  float v34;
  float v35;
  float v36;
  float v37;
  uint64_t v38;
  _QWORD v39[2];

  v39[1] = *MEMORY[0x24BDAC8D0];
  v5 = a3[1];
  v6 = a3[2];
  v7 = a3[3];
  v8 = sqrtf((float)((float)((float)(v5 * v5) + (float)(*a3 * *a3)) + (float)(v6 * v6)) + (float)(v7 * v7));
  v9 = *a3 / v8;
  v10 = v5 / v8;
  v11 = v6 / v8;
  v12 = v7 / v8;
  v13 = a3[4];
  v14 = a3[5];
  v15 = a3[6];
  v16 = 28 * a2;
  v17 = (float *)(a1 + v16);
  v17[10] = v9;
  v17[11] = v5 / v8;
  v17[12] = v6 / v8;
  v17[13] = v7 / v8;
  v17[14] = v13;
  v17[15] = v14;
  v17[16] = v15;
  v38 = 0;
  v39[0] = 0;
  (*(void (**)(_QWORD, uint64_t *, _QWORD *))(**(_QWORD **)(a1 + 96) + 56))(*(_QWORD *)(a1 + 96), &v38, v39);
  physx::Ext::Joint<physx::PxD6Joint,physx::PxD6JointGeneratedValues>::getCom(&v31, v39[a2 - 1]);
  v18 = (float)(v13 - v35) + (float)(v13 - v35);
  v19 = (float)(v14 - v36) + (float)(v14 - v36);
  v20 = (float)(v15 - v37) + (float)(v15 - v37);
  v21 = (float)(v34 * v34) + -0.5;
  v22 = (float)((float)-(float)(v32 * v19) - (float)(v31 * v18)) - (float)(v33 * v20);
  v23 = (float)((float)(v34 * (float)((float)(v33 * v19) - (float)(v32 * v20))) + (float)(v18 * v21))
      - (float)(v31 * v22);
  v24 = (float)((float)(v34 * (float)((float)(v31 * v20) - (float)(v33 * v18))) + (float)(v19 * v21))
      - (float)(v32 * v22);
  v25 = (float)((float)(v34 * (float)((float)(v32 * v18) - (float)(v31 * v19))) + (float)(v20 * v21))
      - (float)(v33 * v22);
  v26 = (float)((float)((float)(v34 * v10) - (float)(v32 * v12)) - (float)(v33 * v9)) + (float)(v11 * v31);
  v27 = (float)((float)((float)(v34 * v11) - (float)(v33 * v12)) - (float)(v31 * v10)) + (float)(v9 * v32);
  v28 = (float)((float)((float)(v9 * v31) + (float)(v34 * v12)) + (float)(v32 * v10)) + (float)(v33 * v11);
  v29 = (float *)(*(_QWORD *)(a1 + 104) + v16);
  v29[4] = (float)((float)((float)(v34 * v9) - (float)(v31 * v12)) - (float)(v32 * v11)) + (float)(v10 * v33);
  v29[5] = v26;
  v29[6] = v27;
  v29[7] = v28;
  v29[8] = v23;
  v29[9] = v24;
  v29[10] = v25;
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 96) + 72))(*(_QWORD *)(a1 + 96));
}

float physx::Ext::Joint<physx::PxSphericalJoint,physx::PxSphericalJointGeneratedValues>::getLocalPose@<S0>(uint64_t a1@<X0>, unsigned int a2@<W1>, uint64_t a3@<X8>)
{
  uint64_t v3;
  float result;

  v3 = a1 + 28 * a2;
  *(_OWORD *)a3 = *(_OWORD *)(v3 + 40);
  *(_QWORD *)(a3 + 16) = *(_QWORD *)(v3 + 56);
  result = *(float *)(v3 + 64);
  *(float *)(a3 + 24) = result;
  return result;
}

float physx::Ext::Joint<physx::PxSphericalJoint,physx::PxSphericalJointGeneratedValues>::getRelativeTransform@<S0>(uint64_t a1@<X0>, float *a2@<X8>)
{
  float v4;
  float v5;
  float v6;
  float v7;
  float v8;
  float v9;
  float v10;
  float v11;
  float v12;
  float v13;
  float v14;
  float v15;
  float v16;
  float v17;
  float v18;
  float v19;
  float v20;
  float v21;
  float v22;
  float v23;
  float v24;
  float v25;
  float v26;
  float v27;
  float v28;
  float v29;
  float v30;
  float v31;
  float v32;
  float v33;
  float v34;
  float v35;
  float v36;
  float v37;
  float v38;
  float v39;
  float v40;
  float v41;
  float v42;
  float v43;
  float v44;
  float v45;
  float v46;
  float v47;
  float v48;
  float v49;
  float v50;
  float v51;
  float v52;
  float v53;
  float v54;
  float v55;
  float v56;
  float v57;
  float v58;
  float result;
  float v60;
  float v61;
  float v62;
  float v63;
  float v64;
  float v65;
  uint64_t v66;
  float v67;
  float v68;
  float v69;
  float v70;
  float v71;
  uint64_t v72;
  uint64_t v73;

  v72 = 0;
  v73 = 0;
  (*(void (**)(_QWORD, uint64_t *, uint64_t *))(**(_QWORD **)(a1 + 96) + 56))(*(_QWORD *)(a1 + 96), &v73, &v72);
  v4 = 1.0;
  v5 = 0.0;
  v6 = 0.0;
  v7 = 0.0;
  v8 = 0.0;
  v9 = 0.0;
  v10 = 0.0;
  v11 = 0.0;
  v12 = 1.0;
  if (v73)
  {
    (*(void (**)(uint64_t *__return_ptr))(*(_QWORD *)v73 + 152))(&v66);
    v5 = 0.0;
    v4 = 1.0;
    v10 = *((float *)&v66 + 1);
    v11 = *(float *)&v66;
    v9 = v67;
    v12 = v68;
    v8 = v69;
    v7 = v70;
    v6 = v71;
  }
  v13 = *(float *)(a1 + 56);
  v14 = *(float *)(a1 + 60);
  v15 = *(float *)(a1 + 64);
  v16 = *(float *)(a1 + 48);
  v17 = *(float *)(a1 + 52);
  v18 = 0.0;
  v19 = 0.0;
  v20 = 0.0;
  v21 = *(float *)(a1 + 40);
  v22 = *(float *)(a1 + 44);
  v23 = 0.0;
  v24 = 0.0;
  if (v72)
  {
    v64 = v7;
    v65 = v8;
    v62 = *(float *)(a1 + 56);
    v63 = v6;
    v60 = *(float *)(a1 + 64);
    v61 = *(float *)(a1 + 60);
    (*(void (**)(uint64_t *__return_ptr))(*(_QWORD *)v72 + 152))(&v66);
    v15 = v60;
    v14 = v61;
    v13 = v62;
    v6 = v63;
    v7 = v64;
    v8 = v65;
    v23 = *((float *)&v66 + 1);
    v24 = *(float *)&v66;
    v20 = v67;
    v4 = v68;
    v19 = v69;
    v18 = v70;
    v5 = v71;
  }
  v25 = (float)((float)((float)(v12 * v17) - (float)(v11 * v21)) - (float)(v10 * v22)) - (float)(v9 * v16);
  v26 = (float)((float)((float)(v9 * v17) + (float)(v12 * v16)) + (float)(v11 * v22)) - (float)(v21 * v10);
  v27 = (float)((float)((float)(v10 * v17) + (float)(v12 * v22)) + (float)(v9 * v21)) - (float)(v16 * v11);
  v28 = (float)((float)((float)(v11 * v17) + (float)(v12 * v21)) + (float)(v10 * v16)) - (float)(v22 * v9);
  v29 = v15 + v15;
  v30 = v14 + v14;
  v31 = (float)((float)(v10 * v30) + (float)(v11 * (float)(v13 + v13))) + (float)(v9 * v29);
  v32 = (float)(v12 * v12) + -0.5;
  v33 = v6
      + (float)((float)((float)(v12 * (float)((float)(v11 * v30) - (float)(v10 * (float)(v13 + v13))))
                      + (float)(v29 * v32))
              + (float)(v9 * v31));
  v34 = v7
      + (float)((float)((float)(v12 * (float)((float)(v9 * (float)(v13 + v13)) - (float)(v11 * v29)))
                      + (float)(v30 * v32))
              + (float)(v10 * v31));
  v35 = v8
      + (float)((float)((float)(v12 * (float)((float)(v10 * v29) - (float)(v9 * v30)))
                      + (float)((float)(v13 + v13) * v32))
              + (float)(v11 * v31));
  v36 = *(float *)(a1 + 84) + *(float *)(a1 + 84);
  v37 = *(float *)(a1 + 88) + *(float *)(a1 + 88);
  v38 = *(float *)(a1 + 92) + *(float *)(a1 + 92);
  v39 = (float)(v4 * v4) + -0.5;
  v40 = (float)((float)(v23 * v37) + (float)(v24 * v36)) + (float)(v20 * v38);
  v41 = v19
      + (float)((float)((float)(v4 * (float)((float)(v23 * v38) - (float)(v20 * v37))) + (float)(v36 * v39))
              + (float)(v24 * v40));
  v42 = v18
      + (float)((float)((float)(v4 * (float)((float)(v20 * v36) - (float)(v24 * v38))) + (float)(v37 * v39))
              + (float)(v23 * v40));
  v43 = v5
      + (float)((float)((float)(v4 * (float)((float)(v24 * v37) - (float)(v23 * v36))) + (float)(v38 * v39))
              + (float)(v20 * v40));
  v45 = *(float *)(a1 + 76);
  v44 = *(float *)(a1 + 80);
  v46 = *(float *)(a1 + 68);
  v47 = *(float *)(a1 + 72);
  v48 = (float)((float)((float)(v24 * v44) + (float)(v4 * v46)) + (float)(v23 * v45)) - (float)(v47 * v20);
  v49 = (float)((float)((float)(v23 * v44) + (float)(v4 * v47)) + (float)(v20 * v46)) - (float)(v45 * v24);
  v50 = (float)((float)((float)(v20 * v44) + (float)(v4 * v45)) + (float)(v24 * v47)) - (float)(v46 * v23);
  v51 = (float)((float)((float)(v4 * v44) - (float)(v24 * v46)) - (float)(v23 * v47)) - (float)(v20 * v45);
  v52 = (float)(v41 - v35) + (float)(v41 - v35);
  v53 = (float)(v42 - v34) + (float)(v42 - v34);
  v54 = (float)(v43 - v33) + (float)(v43 - v33);
  v55 = (float)(v25 * v25) + -0.5;
  v56 = (float)((float)-(float)(v27 * v53) - (float)(v28 * v52)) - (float)(v26 * v54);
  v57 = (float)((float)(v25 * (float)((float)(v26 * v53) - (float)(v27 * v54))) + (float)(v52 * v55))
      - (float)(v28 * v56);
  v58 = (float)((float)(v25 * (float)((float)(v28 * v54) - (float)(v26 * v52))) + (float)(v53 * v55))
      - (float)(v27 * v56);
  *a2 = (float)((float)((float)(v25 * v48) - (float)(v28 * v51)) - (float)(v27 * v50)) + (float)(v49 * v26);
  a2[1] = (float)((float)((float)(v25 * v49) - (float)(v27 * v51)) - (float)(v26 * v48)) + (float)(v50 * v28);
  a2[2] = (float)((float)((float)(v25 * v50) - (float)(v26 * v51)) - (float)(v28 * v49)) + (float)(v48 * v27);
  a2[3] = (float)((float)((float)(v28 * v48) + (float)(v25 * v51)) + (float)(v27 * v49)) + (float)(v26 * v50);
  result = (float)((float)(v25 * (float)((float)(v27 * v52) - (float)(v28 * v53))) + (float)(v54 * v55))
         - (float)(v26 * v56);
  a2[4] = v57;
  a2[5] = v58;
  a2[6] = result;
  return result;
}

float physx::Ext::Joint<physx::PxSphericalJoint,physx::PxSphericalJointGeneratedValues>::getRelativeLinearVelocity@<S0>(uint64_t a1@<X0>, float *a2@<X8>)
{
  float v4;
  float v5;
  float v6;
  float v7;
  float v8;
  float v9;
  float v10;
  float v11;
  float v12;
  float v13;
  float v14;
  float v15;
  float v16;
  float v17;
  float v18;
  float v19;
  float v20;
  float v21;
  float v22;
  float v23;
  float v24;
  float v25;
  float v26;
  float v27;
  float v28;
  float result;
  float v30;
  float v31;
  float v32;
  float v33;
  float v34;
  float v35;
  float v36;
  float v37;
  float v38;
  float v39;
  float v40;
  float v41;
  float v42;
  float v43;
  float v44[3];
  float v45;
  float v46;
  float v47;
  float v48[3];
  _WORD *v49;
  _WORD *v50;

  v49 = 0;
  v50 = 0;
  (*(void (**)(_QWORD, _WORD **, _WORD **))(**(_QWORD **)(a1 + 96) + 56))(*(_QWORD *)(a1 + 96), &v50, &v49);
  physx::Ext::Joint<physx::PxD6Joint,physx::PxD6JointGeneratedValues>::getCom(&v34, (uint64_t)v50);
  physx::Ext::Joint<physx::PxD6Joint,physx::PxD6JointGeneratedValues>::getCom(&v30, (uint64_t)v49);
  physx::Ext::Joint<physx::PxD6Joint,physx::PxD6JointGeneratedValues>::getActorVelocity(v50, (uint64_t)v48, (uint64_t)&v45);
  physx::Ext::Joint<physx::PxD6Joint,physx::PxD6JointGeneratedValues>::getActorVelocity(v49, (uint64_t)v44, (uint64_t)&v41);
  v4 = *(float *)(a1 + 56) + *(float *)(a1 + 56);
  v5 = *(float *)(a1 + 60) + *(float *)(a1 + 60);
  v6 = *(float *)(a1 + 64) + *(float *)(a1 + 64);
  v7 = (float)(v37 * v37) + -0.5;
  v8 = (float)((float)(v5 * v35) + (float)(v34 * v4)) + (float)(v36 * v6);
  v9 = (float)((float)(v37 * (float)((float)(v35 * v6) - (float)(v36 * v5))) + (float)(v4 * v7)) + (float)(v34 * v8);
  v10 = (float)((float)(v37 * (float)((float)(v36 * v4) - (float)(v34 * v6))) + (float)(v5 * v7)) + (float)(v35 * v8);
  v11 = (float)((float)(v37 * (float)((float)(v34 * v5) - (float)(v35 * v4))) + (float)(v6 * v7)) + (float)(v36 * v8);
  v12 = *(float *)(a1 + 84) + *(float *)(a1 + 84);
  v13 = *(float *)(a1 + 88) + *(float *)(a1 + 88);
  v14 = *(float *)(a1 + 92) + *(float *)(a1 + 92);
  v15 = (float)(v33 * v33) + -0.5;
  v16 = (float)((float)(v13 * v31) + (float)(v30 * v12)) + (float)(v32 * v14);
  v17 = (float)((float)(v33 * (float)((float)(v31 * v14) - (float)(v32 * v13))) + (float)(v12 * v15))
      + (float)(v30 * v16);
  v18 = (float)((float)(v33 * (float)((float)(v32 * v12) - (float)(v30 * v14))) + (float)(v13 * v15))
      + (float)(v31 * v16);
  v19 = (float)((float)(v33 * (float)((float)(v30 * v13) - (float)(v31 * v12))) + (float)(v14 * v15))
      + (float)(v32 * v16);
  v20 = (float)(v46 * v11) - (float)(v47 * v10);
  v21 = (float)((float)(v44[1] - (float)((float)(v43 * v17) - (float)(v41 * v19))) - v48[1])
      + (float)((float)(v47 * v9) - (float)(v45 * v11));
  v22 = (float)((float)((float)(v44[0] - (float)((float)(v42 * v19) - (float)(v43 * v18))) - v48[0]) + v20) - v38;
  v23 = (float)((float)((float)(v44[2] - (float)((float)(v41 * v18) - (float)(v42 * v17))) - v48[2])
              + (float)((float)(v45 * v10) - (float)(v46 * v9)))
      - v40;
  v24 = v22 + v22;
  v25 = (float)(v21 - v39) + (float)(v21 - v39);
  v26 = v23 + v23;
  v27 = (float)((float)(v35 * v25) + (float)(v34 * v24)) + (float)(v36 * v26);
  v28 = (float)((float)(v25 * v7) - (float)((float)((float)(v36 * v24) - (float)(v34 * v26)) * v37))
      + (float)(v35 * v27);
  result = (float)((float)(v26 * v7) - (float)((float)((float)(v34 * v25) - (float)(v35 * v24)) * v37))
         + (float)(v36 * v27);
  *a2 = (float)((float)(v24 * v7) - (float)((float)((float)(v35 * v26) - (float)(v36 * v25)) * v37))
      + (float)(v34 * v27);
  a2[1] = v28;
  a2[2] = result;
  return result;
}

float physx::Ext::Joint<physx::PxSphericalJoint,physx::PxSphericalJointGeneratedValues>::getRelativeAngularVelocity@<S0>(uint64_t a1@<X0>, float *a2@<X8>)
{
  float v3;
  float v4;
  float v5;
  float v6;
  float v7;
  float v8;
  float v9;
  float result;
  float v11;
  float v12;
  float v13;
  float v14;
  float v15;
  float v16;
  float v17;
  float v18;
  float v19;
  float v20;
  _BYTE v21[12];
  float v22;
  float v23;
  float v24;
  _BYTE v25[12];
  _WORD *v26;
  _WORD *v27;

  v26 = 0;
  v27 = 0;
  (*(void (**)(_QWORD, _WORD **, _WORD **))(**(_QWORD **)(a1 + 96) + 56))(*(_QWORD *)(a1 + 96), &v27, &v26);
  physx::Ext::Joint<physx::PxD6Joint,physx::PxD6JointGeneratedValues>::getCom(&v11, (uint64_t)v27);
  physx::Ext::Joint<physx::PxD6Joint,physx::PxD6JointGeneratedValues>::getActorVelocity(v27, (uint64_t)v25, (uint64_t)&v22);
  physx::Ext::Joint<physx::PxD6Joint,physx::PxD6JointGeneratedValues>::getActorVelocity(v26, (uint64_t)v21, (uint64_t)&v18);
  v3 = (float)((float)(v18 - v22) - v15) + (float)((float)(v18 - v22) - v15);
  v4 = (float)((float)(v19 - v23) - v16) + (float)((float)(v19 - v23) - v16);
  v5 = (float)((float)(v20 - v24) - v17) + (float)((float)(v20 - v24) - v17);
  v6 = (float)(v14 * v14) + -0.5;
  v7 = (float)((float)(v4 * v12) + (float)(v11 * v3)) + (float)(v13 * v5);
  v8 = (float)((float)(v3 * v6) - (float)((float)((float)(v12 * v5) - (float)(v13 * v4)) * v14)) + (float)(v11 * v7);
  v9 = (float)((float)(v4 * v6) - (float)((float)((float)(v13 * v3) - (float)(v11 * v5)) * v14)) + (float)(v12 * v7);
  result = (float)((float)(v5 * v6) - (float)((float)((float)(v11 * v4) - (float)(v12 * v3)) * v14)) + (float)(v13 * v7);
  *a2 = v8;
  a2[1] = v9;
  a2[2] = result;
  return result;
}

uint64_t physx::Ext::Joint<physx::PxSphericalJoint,physx::PxSphericalJointGeneratedValues>::setBreakForce(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 96) + 120))(*(_QWORD *)(a1 + 96));
}

uint64_t physx::Ext::Joint<physx::PxSphericalJoint,physx::PxSphericalJointGeneratedValues>::getBreakForce(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 96) + 128))(*(_QWORD *)(a1 + 96));
}

uint64_t physx::Ext::Joint<physx::PxSphericalJoint,physx::PxSphericalJointGeneratedValues>::setConstraintFlags(uint64_t a1, __int16 *a2)
{
  uint64_t v2;
  __int16 v4;

  v2 = *(_QWORD *)(a1 + 96);
  v4 = *a2;
  return (*(uint64_t (**)(uint64_t, __int16 *))(*(_QWORD *)v2 + 80))(v2, &v4);
}

uint64_t physx::Ext::Joint<physx::PxSphericalJoint,physx::PxSphericalJointGeneratedValues>::setConstraintFlag(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 96) + 96))(*(_QWORD *)(a1 + 96));
}

uint64_t physx::Ext::Joint<physx::PxSphericalJoint,physx::PxSphericalJointGeneratedValues>::getConstraintFlags(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 96) + 88))(*(_QWORD *)(a1 + 96));
}

uint64_t physx::Ext::Joint<physx::PxSphericalJoint,physx::PxSphericalJointGeneratedValues>::setInvMassScale0(uint64_t a1, float a2)
{
  uint64_t v2;
  uint64_t v3;

  v2 = a1 + 96;
  v3 = *(_QWORD *)(a1 + 96);
  **(float **)(v2 + 8) = a2;
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v3 + 72))(v3);
}

float physx::Ext::Joint<physx::PxSphericalJoint,physx::PxSphericalJointGeneratedValues>::getInvMassScale0(uint64_t a1)
{
  return **(float **)(a1 + 104);
}

uint64_t physx::Ext::Joint<physx::PxSphericalJoint,physx::PxSphericalJointGeneratedValues>::setInvInertiaScale0(uint64_t a1, float a2)
{
  uint64_t v2;
  uint64_t v3;

  v2 = a1 + 96;
  v3 = *(_QWORD *)(a1 + 96);
  *(float *)(*(_QWORD *)(v2 + 8) + 4) = a2;
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v3 + 72))(v3);
}

float physx::Ext::Joint<physx::PxSphericalJoint,physx::PxSphericalJointGeneratedValues>::getInvInertiaScale0(uint64_t a1)
{
  return *(float *)(*(_QWORD *)(a1 + 104) + 4);
}

uint64_t physx::Ext::Joint<physx::PxSphericalJoint,physx::PxSphericalJointGeneratedValues>::setInvMassScale1(uint64_t a1, float a2)
{
  uint64_t v2;
  uint64_t v3;

  v2 = a1 + 96;
  v3 = *(_QWORD *)(a1 + 96);
  *(float *)(*(_QWORD *)(v2 + 8) + 8) = a2;
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v3 + 72))(v3);
}

float physx::Ext::Joint<physx::PxSphericalJoint,physx::PxSphericalJointGeneratedValues>::getInvMassScale1(uint64_t a1)
{
  return *(float *)(*(_QWORD *)(a1 + 104) + 8);
}

uint64_t physx::Ext::Joint<physx::PxSphericalJoint,physx::PxSphericalJointGeneratedValues>::setInvInertiaScale1(uint64_t a1, float a2)
{
  uint64_t v2;
  uint64_t v3;

  v2 = a1 + 96;
  v3 = *(_QWORD *)(a1 + 96);
  *(float *)(*(_QWORD *)(v2 + 8) + 12) = a2;
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v3 + 72))(v3);
}

float physx::Ext::Joint<physx::PxSphericalJoint,physx::PxSphericalJointGeneratedValues>::getInvInertiaScale1(uint64_t a1)
{
  return *(float *)(*(_QWORD *)(a1 + 104) + 12);
}

uint64_t physx::Ext::Joint<physx::PxSphericalJoint,physx::PxSphericalJointGeneratedValues>::getConstraint(uint64_t a1)
{
  return *(_QWORD *)(a1 + 96);
}

uint64_t physx::Ext::Joint<physx::PxSphericalJoint,physx::PxSphericalJointGeneratedValues>::setName(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 32) = a2;
  return result;
}

uint64_t physx::Ext::Joint<physx::PxSphericalJoint,physx::PxSphericalJointGeneratedValues>::getName(uint64_t a1)
{
  return *(_QWORD *)(a1 + 32);
}

uint64_t physx::Ext::Joint<physx::PxSphericalJoint,physx::PxSphericalJointGeneratedValues>::getScene(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 96);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 48))(result);
  return result;
}

uint64_t physx::Ext::Joint<physx::PxSphericalJoint,physx::PxSphericalJointGeneratedValues>::requiresObjects(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;

  (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)a2 + 16))(a2, *(_QWORD *)(a1 + 96));
  v5 = 0;
  v6 = 0;
  result = (*(uint64_t (**)(_QWORD, uint64_t *, uint64_t *))(**(_QWORD **)(a1 + 96) + 56))(*(_QWORD *)(a1 + 96), &v6, &v5);
  if (v6)
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 16))(a2);
  if (v5)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 16))(a2);
  return result;
}

uint64_t physx::Ext::Joint<physx::PxSphericalJoint,physx::PxSphericalJointGeneratedValues>::updatePvdProperties()
{
  return 0;
}

uint64_t physx::Ext::Joint<physx::PxSphericalJoint,physx::PxSphericalJointGeneratedValues>::onComShift(uint64_t a1, unsigned int a2)
{
  uint64_t v4;
  float v5;
  float v6;
  float v7;
  float v8;
  float v9;
  float v10;
  float v11;
  float v12;
  float v13;
  float v14;
  float v15;
  float v16;
  float v17;
  float v18;
  float v19;
  float *v20;
  float v22;
  float v23;
  float v24;
  float v25;
  float v26;
  float v27;
  float v28;
  uint64_t v29;
  _QWORD v30[2];

  v30[1] = *MEMORY[0x24BDAC8D0];
  v29 = 0;
  v30[0] = 0;
  (*(void (**)(_QWORD, uint64_t *, _QWORD *))(**(_QWORD **)(a1 + 96) + 56))(*(_QWORD *)(a1 + 96), &v29, v30);
  physx::Ext::Joint<physx::PxD6Joint,physx::PxD6JointGeneratedValues>::getCom(&v22, v30[a2 - 1]);
  v4 = 28 * a2;
  v5 = (float)(*(float *)(a1 + v4 + 56) - v26) + (float)(*(float *)(a1 + v4 + 56) - v26);
  v6 = (float)(*(float *)(a1 + v4 + 60) - v27) + (float)(*(float *)(a1 + v4 + 60) - v27);
  v7 = (float)(*(float *)(a1 + v4 + 64) - v28) + (float)(*(float *)(a1 + v4 + 64) - v28);
  v8 = (float)(v25 * v25) + -0.5;
  v9 = (float)((float)-(float)(v23 * v6) - (float)(v22 * v5)) - (float)(v24 * v7);
  v10 = (float)((float)(v25 * (float)((float)(v24 * v6) - (float)(v23 * v7))) + (float)(v5 * v8)) - (float)(v22 * v9);
  v11 = (float)((float)(v25 * (float)((float)(v22 * v7) - (float)(v24 * v5))) + (float)(v6 * v8)) - (float)(v23 * v9);
  v12 = (float)((float)(v25 * (float)((float)(v23 * v5) - (float)(v22 * v6))) + (float)(v7 * v8)) - (float)(v24 * v9);
  v14 = *(float *)(a1 + v4 + 48);
  v13 = *(float *)(a1 + v4 + 52);
  v15 = *(float *)(a1 + v4 + 40);
  v16 = *(float *)(a1 + v4 + 44);
  v17 = (float)((float)((float)(v25 * v16) - (float)(v23 * v13)) - (float)(v24 * v15)) + (float)(v14 * v22);
  v18 = (float)((float)((float)(v25 * v14) - (float)(v24 * v13)) - (float)(v22 * v16)) + (float)(v15 * v23);
  v19 = (float)((float)((float)(v22 * v15) + (float)(v25 * v13)) + (float)(v23 * v16)) + (float)(v24 * v14);
  v20 = (float *)(*(_QWORD *)(a1 + 104) + v4);
  v20[4] = (float)((float)((float)(v25 * v15) - (float)(v22 * v13)) - (float)(v23 * v14)) + (float)(v16 * v24);
  v20[5] = v17;
  v20[6] = v18;
  v20[7] = v19;
  v20[8] = v10;
  v20[9] = v11;
  v20[10] = v12;
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 96) + 72))(*(_QWORD *)(a1 + 96));
}

uint64_t physx::Ext::Joint<physx::PxSphericalJoint,physx::PxSphericalJointGeneratedValues>::onOriginShift(uint64_t a1, float32x2_t *a2)
{
  uint64_t result;
  float *v5;
  uint64_t v6;
  float *v7;
  float32x2_t *v8;
  uint64_t v9;
  _QWORD v10[2];

  v10[1] = *MEMORY[0x24BDAC8D0];
  v9 = 0;
  v10[0] = 0;
  result = (*(uint64_t (**)(_QWORD, uint64_t *, _QWORD *))(**(_QWORD **)(a1 + 96) + 56))(*(_QWORD *)(a1 + 96), &v9, v10);
  if (v9)
  {
    if (v10[0])
      return result;
    *(float32x2_t *)(a1 + 84) = vsub_f32(*(float32x2_t *)(a1 + 84), *a2);
    v5 = (float *)&a2[1];
    *(float *)(a1 + 92) = *(float *)(a1 + 92) - a2[1].f32[0];
    v6 = *(_QWORD *)(a1 + 104);
    *(float32x2_t *)(v6 + 60) = vsub_f32(*(float32x2_t *)(v6 + 60), *a2);
    v7 = (float *)(v6 + 68);
  }
  else
  {
    *(float32x2_t *)(a1 + 56) = vsub_f32(*(float32x2_t *)(a1 + 56), *a2);
    v5 = (float *)&a2[1];
    *(float *)(a1 + 64) = *(float *)(a1 + 64) - a2[1].f32[0];
    v8 = *(float32x2_t **)(a1 + 104);
    v8[4] = vsub_f32(v8[4], *a2);
    v7 = (float *)&v8[5];
  }
  *v7 = *v7 - *v5;
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 96) + 72))(*(_QWORD *)(a1 + 96));
}

uint64_t physx::Ext::Joint<physx::PxSphericalJoint,physx::PxSphericalJointGeneratedValues>::prepareData(uint64_t a1)
{
  return *(_QWORD *)(a1 + 104);
}

void physx::Ext::Joint<physx::PxSphericalJoint,physx::PxSphericalJointGeneratedValues>::getExternalReference(uint64_t a1, _DWORD *a2)
{
  *a2 = 0;
}

uint64_t physx::Ext::Joint<physx::PxSphericalJoint,physx::PxSphericalJointGeneratedValues>::onConstraintRelease(_QWORD *a1)
{
  if (a1[13])
    (*(void (**)(uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
  a1[13] = 0;
  return (*(uint64_t (**)(_QWORD *))(*a1 + 32))(a1);
}

uint64_t physx::Ext::Joint<physx::PxSphericalJoint,physx::PxSphericalJointGeneratedValues>::getConstantBlock(uint64_t a1)
{
  return *(_QWORD *)(a1 + 104);
}

uint64_t physx::Ext::SphericalJoint::getPrep(physx::Ext::SphericalJoint *this)
{
  return physx::Ext::SphericalJoint::sShaders;
}

uint64_t `non-virtual thunk to'physx::Ext::Joint<physx::PxSphericalJoint,physx::PxSphericalJointGeneratedValues>::prepareData(uint64_t a1)
{
  return *(_QWORD *)(a1 + 80);
}

uint64_t `non-virtual thunk to'physx::Ext::Joint<physx::PxSphericalJoint,physx::PxSphericalJointGeneratedValues>::updatePvdProperties()
{
  return 0;
}

uint64_t `non-virtual thunk to'physx::Ext::Joint<physx::PxSphericalJoint,physx::PxSphericalJointGeneratedValues>::onConstraintRelease(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  if (*(_QWORD *)(a1 + 80))
    (*(void (**)(uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
  v3 = *(_QWORD *)(a1 - 24);
  v2 = a1 - 24;
  *(_QWORD *)(v2 + 104) = 0;
  return (*(uint64_t (**)(uint64_t))(v3 + 32))(v2);
}

uint64_t `non-virtual thunk to'physx::Ext::Joint<physx::PxSphericalJoint,physx::PxSphericalJointGeneratedValues>::onComShift(uint64_t a1, unsigned int a2)
{
  return physx::Ext::Joint<physx::PxSphericalJoint,physx::PxSphericalJointGeneratedValues>::onComShift(a1 - 24, a2);
}

uint64_t `non-virtual thunk to'physx::Ext::Joint<physx::PxSphericalJoint,physx::PxSphericalJointGeneratedValues>::onOriginShift(uint64_t a1, float32x2_t *a2)
{
  return physx::Ext::Joint<physx::PxSphericalJoint,physx::PxSphericalJointGeneratedValues>::onOriginShift(a1 - 24, a2);
}

uint64_t `non-virtual thunk to'physx::Ext::Joint<physx::PxSphericalJoint,physx::PxSphericalJointGeneratedValues>::getExternalReference(uint64_t a1, _DWORD *a2)
{
  uint64_t result;

  result = a1 - 24;
  *a2 = 0;
  return result;
}

uint64_t `non-virtual thunk to'physx::Ext::Joint<physx::PxSphericalJoint,physx::PxSphericalJointGeneratedValues>::getSerializable(uint64_t a1)
{
  return a1 - 24;
}

uint64_t `non-virtual thunk to'physx::Ext::SphericalJoint::getPrep(physx::Ext::SphericalJoint *this)
{
  return physx::Ext::SphericalJoint::sShaders;
}

uint64_t `non-virtual thunk to'physx::Ext::Joint<physx::PxSphericalJoint,physx::PxSphericalJointGeneratedValues>::getConstantBlock(uint64_t a1)
{
  return *(_QWORD *)(a1 + 80);
}

void `non-virtual thunk to'physx::Ext::SphericalJoint::~SphericalJoint(physx::Ext::SphericalJoint *this)
{
  *((_QWORD *)this - 3) = &off_24ED99278;
  *(_QWORD *)this = &unk_24ED99410;
  if ((*((_BYTE *)this - 14) & 1) != 0)
  {
    if (*((_QWORD *)this + 10))
      (*(void (**)(uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
    *((_QWORD *)this + 10) = 0;
  }
}

{
  char *v1;

  *((_QWORD *)this - 3) = &off_24ED99278;
  v1 = (char *)this - 24;
  *(_QWORD *)this = &unk_24ED99410;
  if ((*((_BYTE *)this - 14) & 1) != 0)
  {
    if (*((_QWORD *)this + 10))
      (*(void (**)(uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
    *((_QWORD *)this + 10) = 0;
  }
  (*(void (**)(uint64_t, char *))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24, v1);
}

double physx::Ext::SphericalJoint::SphericalJoint(uint64_t a1, uint64_t a2, uint64_t a3, float32x4_t *a4, uint64_t a5, float32x4_t *a6)
{
  _QWORD *v6;
  uint64_t v7;
  double result;
  __int16 v9;

  v9 = 3;
  v6 = (_QWORD *)physx::Ext::Joint<physx::PxSphericalJoint,physx::PxSphericalJointGeneratedValues>::Joint(a1, 256, &v9, a3, a4, a5, a6, 0x80u);
  *v6 = &off_24ED98FF0;
  v6[3] = &unk_24ED99198;
  v7 = v6[13];
  *(_QWORD *)(v7 + 80) = 0x3F00000000000000;
  *(_QWORD *)(v7 + 88) = 0;
  result = 0.195796399;
  *(_OWORD *)(v7 + 96) = xmmword_2261AC0D0;
  *(_WORD *)(v7 + 112) = 0;
  return result;
}

uint64_t physx::Ext::Joint<physx::PxSphericalJoint,physx::PxSphericalJointGeneratedValues>::Joint(uint64_t a1, __int16 a2, __int16 *a3, uint64_t a4, float32x4_t *a5, uint64_t a6, float32x4_t *a7, unsigned int a8)
{
  __int16 v13;
  uint64_t v14;
  __int32 v15;
  float32x4_t v24;
  uint64_t v27;
  float v28;
  float v29;
  float v30;
  float v31;
  float v32;
  float v33;
  float v34;
  float v35;
  float v36;
  float v37;
  float v38;
  float v39;
  float v40;
  float v41;
  float v42;
  float v43;
  float v44;
  float v45;
  float v46;
  float v47;
  float v48;
  float v49;
  float v50;
  float v51;
  float v52;
  float v53;
  float v54;
  float v55;
  float v56;
  float v57;
  float v58;
  float v61;
  float v62;
  float v63;
  float v64;
  float v65;
  float v66;
  float v67;

  v13 = *a3;
  *(_WORD *)(a1 + 8) = a2;
  *(_WORD *)(a1 + 10) = v13;
  *(_QWORD *)a1 = &off_24ED99278;
  *(_QWORD *)(a1 + 96) = 0;
  *(_QWORD *)(a1 + 24) = &unk_24ED99410;
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  if (a8)
    v14 = (*(uint64_t (**)(uint64_t, _QWORD, const char *, const char *, uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24)
                                                                                          + 16))(physx::shdfnd::Foundation::mInstance + 24, a8, "NonTrackedAlloc", "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/physxextensions/src/ExtJoint.h", 454);
  else
    v14 = 0;
  v15 = a5[1].i32[2];
  _Q1 = *a5;
  _Q2 = vmulq_f32(_Q1, _Q1);
  _S3 = a5->i64[1];
  __asm { FMLA            S2, S3, V1.S[2] }
  _S3 = HIDWORD(*(unsigned __int128 *)a5);
  __asm { FMLA            S2, S3, V1.S[3] }
  _Q2.f32[0] = sqrtf(_Q2.f32[0]);
  v24 = vdivq_f32(*a5, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)_Q2.f32, 0));
  _Q2.i64[0] = a5[1].i64[0];
  *(float32x4_t *)(a1 + 40) = v24;
  *(_QWORD *)(a1 + 56) = _Q2.i64[0];
  *(_DWORD *)(a1 + 64) = v15;
  _Q0 = *a7;
  _Q1 = vmulq_f32(_Q0, _Q0);
  _Q2.i32[0] = a7->i64[1];
  __asm { FMLA            S1, S2, V0.S[2] }
  _Q2.i32[0] = HIDWORD(*(unsigned __int128 *)a7);
  __asm { FMLA            S1, S2, V0.S[3] }
  _Q1.f32[0] = sqrtf(_Q1.f32[0]);
  _Q2.i32[0] = a7[1].i32[2];
  v27 = a7[1].i64[0];
  *(float32x4_t *)(a1 + 68) = vdivq_f32(*a7, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)_Q1.f32, 0));
  *(_QWORD *)(a1 + 84) = v27;
  *(_DWORD *)(a1 + 92) = _Q2.i32[0];
  physx::Ext::Joint<physx::PxD6Joint,physx::PxD6JointGeneratedValues>::getCom(&v61, a4);
  v28 = v63;
  v29 = (float)(a5[1].f32[0] - v65) + (float)(a5[1].f32[0] - v65);
  v30 = (float)(a5[1].f32[1] - v66) + (float)(a5[1].f32[1] - v66);
  v31 = (float)(a5[1].f32[2] - v67) + (float)(a5[1].f32[2] - v67);
  v32 = (float)(v64 * v64) + -0.5;
  v33 = (float)((float)-(float)(v62 * v30) - (float)(v61 * v29)) - (float)(v63 * v31);
  v34 = (float)((float)(v64 * (float)((float)(v63 * v30) - (float)(v62 * v31))) + (float)(v29 * v32))
      - (float)(v61 * v33);
  v35 = (float)(v64 * (float)((float)(v61 * v31) - (float)(v63 * v29))) + (float)(v30 * v32);
  v36 = (float)(v64 * (float)((float)(v62 * v29) - (float)(v61 * v30))) + (float)(v31 * v32);
  v38 = a5->f32[2];
  v37 = a5->f32[3];
  v39 = a5->f32[1];
  v40 = (float)((float)((float)(v64 * v39) - (float)(v62 * v37)) - (float)(v63 * a5->f32[0])) + (float)(v38 * v61);
  v41 = (float)((float)((float)(v64 * v38) - (float)(v63 * v37)) - (float)(v61 * v39)) + (float)(a5->f32[0] * v62);
  v42 = v35 - (float)(v62 * v33);
  v43 = (float)((float)((float)(v61 * a5->f32[0]) + (float)(v64 * v37)) + (float)(v62 * v39)) + (float)(v63 * v38);
  *(float *)(v14 + 16) = (float)((float)((float)(v64 * a5->f32[0]) - (float)(v61 * v37)) - (float)(v62 * v38))
                       + (float)(v39 * v63);
  *(float *)(v14 + 20) = v40;
  *(float *)(v14 + 24) = v41;
  *(float *)(v14 + 28) = v43;
  *(float *)(v14 + 32) = v34;
  *(float *)(v14 + 36) = v42;
  *(float *)(v14 + 40) = v36 - (float)(v28 * v33);
  physx::Ext::Joint<physx::PxD6Joint,physx::PxD6JointGeneratedValues>::getCom(&v61, a6);
  v44 = v63;
  v45 = (float)(a7[1].f32[0] - v65) + (float)(a7[1].f32[0] - v65);
  v46 = (float)(a7[1].f32[1] - v66) + (float)(a7[1].f32[1] - v66);
  v47 = (float)(a7[1].f32[2] - v67) + (float)(a7[1].f32[2] - v67);
  v48 = (float)(v64 * v64) + -0.5;
  v49 = (float)((float)-(float)(v62 * v46) - (float)(v61 * v45)) - (float)(v63 * v47);
  v50 = (float)((float)(v64 * (float)((float)(v63 * v46) - (float)(v62 * v47))) + (float)(v45 * v48))
      - (float)(v61 * v49);
  v51 = (float)((float)(v64 * (float)((float)(v61 * v47) - (float)(v63 * v45))) + (float)(v46 * v48))
      - (float)(v62 * v49);
  v52 = (float)((float)(v64 * (float)((float)(v62 * v45) - (float)(v61 * v46))) + (float)(v47 * v48))
      - (float)(v63 * v49);
  v54 = a7->f32[2];
  v53 = a7->f32[3];
  v55 = a7->f32[1];
  v56 = (float)((float)((float)(v64 * v55) - (float)(v62 * v53)) - (float)(v63 * a7->f32[0])) + (float)(v54 * v61);
  v57 = (float)((float)((float)(v64 * v54) - (float)(v63 * v53)) - (float)(v61 * v55)) + (float)(a7->f32[0] * v62);
  v58 = (float)((float)(v61 * a7->f32[0]) + (float)(v64 * v53)) + (float)(v62 * v55);
  *(float *)(v14 + 44) = (float)((float)((float)(v64 * a7->f32[0]) - (float)(v61 * v53)) - (float)(v62 * v54))
                       + (float)(v55 * v63);
  *(float *)(v14 + 48) = v56;
  *(float *)(v14 + 52) = v57;
  *(float *)(v14 + 56) = v58 + (float)(v44 * v54);
  *(float *)(v14 + 60) = v50;
  *(float *)(v14 + 64) = v51;
  *(float *)(v14 + 68) = v52;
  __asm { FMOV            V0.4S, #1.0 }
  *(_OWORD *)v14 = _Q0;
  *(_QWORD *)(a1 + 104) = v14;
  return a1;
}

uint64_t physx::PxTaskManager::createTaskManager(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  const char *v5;
  uint64_t v6;

  v4 = physx::shdfnd::Foundation::mInstance;
  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)physx::shdfnd::Foundation::mInstance + 40))(physx::shdfnd::Foundation::mInstance))
    v5 = "static const char *physx::shdfnd::ReflectionAllocator<physx::PxTaskMgr>::getName() [T = physx::PxTaskMgr]";
  else
    v5 = "<allocation names disabled>";
  v6 = (*(uint64_t (**)(uint64_t, uint64_t, const char *, const char *, uint64_t))(*(_QWORD *)(v4 + 24) + 16))(v4 + 24, 144, v5, "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/task/src/TaskManager.cpp", 144);
  return physx::PxTaskMgr::PxTaskMgr(v6, a1, a2);
}

uint64_t physx::PxTaskMgr::PxTaskMgr(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  const char *v5;
  pthread_mutex_t *v6;

  *(_QWORD *)a1 = &off_24ED99478;
  *(_QWORD *)(a1 + 8) = a2;
  *(_QWORD *)(a1 + 16) = a3;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_QWORD *)(a1 + 56) = 0;
  *(_DWORD *)(a1 + 64) = 1061158912;
  *(_QWORD *)(a1 + 68) = 0xFFFFFFFFLL;
  *(_DWORD *)(a1 + 76) = 0;
  physx::shdfnd::internal::HashBase<physx::shdfnd::Pair<char const* const,unsigned int>,char const*,physx::shdfnd::Hash<char const*>,physx::shdfnd::internal::HashMapBase<char const*,unsigned int,physx::shdfnd::Hash<char const*>,physx::shdfnd::NonTrackingAllocator>::GetKey,physx::shdfnd::NonTrackingAllocator,true>::reserveInternal(a1 + 24, 0x40u, (int8x8_t)0xFFFFFFFFLL);
  *(_DWORD *)(a1 + 80) = 0;
  v4 = physx::shdfnd::Foundation::mInstance;
  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)physx::shdfnd::Foundation::mInstance + 40))(physx::shdfnd::Foundation::mInstance))
    v5 = "static const char *physx::shdfnd::ReflectionAllocator<physx::shdfnd::MutexImpl>::getName() [T = physx::shdfnd::MutexImpl]";
  else
    v5 = "<allocation names disabled>";
  v6 = (pthread_mutex_t *)(*(uint64_t (**)(uint64_t, uint64_t, const char *, const char *, uint64_t))(*(_QWORD *)(v4 + 24) + 16))(v4 + 24, 72, v5, "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/foundation/include/PsMutex.h", 138);
  *(_QWORD *)(a1 + 88) = v6;
  physx::shdfnd::MutexImpl::MutexImpl(v6);
  *(_OWORD *)(a1 + 112) = 0u;
  *(_OWORD *)(a1 + 128) = 0u;
  *(_OWORD *)(a1 + 96) = 0u;
  return a1;
}

void physx::PxTaskMgr::~PxTaskMgr(physx::PxTaskMgr *this)
{
  int v2;
  int v4;
  int v6;

  *(_QWORD *)this = &off_24ED99478;
  v2 = *((_DWORD *)this + 35);
  if ((v2 & 0x80000000) == 0 && (v2 & 0x7FFFFFFF) != 0 && *((_QWORD *)this + 16) != 0)
    (*(void (**)(uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
  v4 = *((_DWORD *)this + 31);
  if ((v4 & 0x80000000) == 0 && (v4 & 0x7FFFFFFF) != 0 && *((_QWORD *)this + 14) != 0)
    (*(void (**)(uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
  v6 = *((_DWORD *)this + 27);
  if ((v6 & 0x80000000) == 0 && (v6 & 0x7FFFFFFF) != 0 && *((_QWORD *)this + 12) != 0)
    (*(void (**)(uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
  physx::shdfnd::MutexT<physx::shdfnd::ReflectionAllocator<physx::shdfnd::MutexImpl>>::~MutexT((pthread_mutex_t **)this + 11);
  if (*((_QWORD *)this + 3))
    (*(void (**)(uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
}

{
  uint64_t v2;

  physx::PxTaskMgr::~PxTaskMgr(this);
  if (v2)
    (*(void (**)(uint64_t, physx::PxTaskMgr *))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24, this);
}

uint64_t physx::PxTaskMgr::release(uint64_t this)
{
  if (this)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)this + 96))(this);
  return this;
}

uint64_t physx::PxTaskMgr::decrReference(uint64_t this, physx::PxLightCpuTask *a2)
{
  unsigned int *v2;
  unsigned int v3;
  unsigned int v4;
  uint64_t (***v5)(_QWORD);

  v2 = (unsigned int *)((char *)a2 + 32);
  do
  {
    v3 = __ldaxr(v2);
    v4 = v3 - 1;
  }
  while (__stlxr(v4, v2));
  if (!v4)
  {
    v5 = *(uint64_t (****)(_QWORD))(this + 16);
    if (v5)
      return (**v5)(v5);
    else
      return (*(uint64_t (**)(physx::PxLightCpuTask *))(*(_QWORD *)a2 + 56))(a2);
  }
  return this;
}

void physx::PxTaskMgr::addReference(physx::PxTaskMgr *this, physx::PxLightCpuTask *a2)
{
  unsigned int *v2;
  unsigned int v3;

  v2 = (unsigned int *)((char *)a2 + 32);
  do
    v3 = __ldaxr(v2);
  while (__stlxr(v3 + 1, v2));
}

void *physx::PxTaskMgr::resetDependencies(void *this)
{
  uint64_t v1;
  int v2;
  uint64_t v3;
  uint64_t v4;
  int v6;
  uint64_t v12;

  v1 = (uint64_t)this;
  *((_DWORD *)this + 30) = 0;
  *((_DWORD *)this + 26) = 0;
  v2 = *((_DWORD *)this + 15);
  if (v2 && *((_DWORD *)this + 19))
  {
    this = memset(*((void **)this + 6), 255, (4 * v2));
    v3 = *(_QWORD *)(v1 + 40);
    v4 = (*(_DWORD *)(v1 + 56) - 1);
    if (*(_DWORD *)(v1 + 56) == 1)
    {
      v12 = 0;
    }
    else
    {
      _X10 = v3 + 128;
      v6 = 1;
      do
      {
        __asm { PRFM            #0, [X10] }
        *(_DWORD *)(_X10 - 128) = v6++;
        _X10 += 4;
        --v4;
      }
      while (v4);
      v12 = (*(_DWORD *)(v1 + 56) - 1);
    }
    *(_DWORD *)(v3 + 4 * v12) = -1;
    *(_DWORD *)(v1 + 68) = 0;
    *(_DWORD *)(v1 + 76) = 0;
  }
  *(_DWORD *)(v1 + 80) = 0;
  return this;
}

uint64_t physx::PxTaskMgr::startSimulation(uint64_t this)
{
  uint64_t v1;
  unsigned int v2;
  uint64_t v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  unint64_t v8;
  unsigned int v9;

  if (*(_DWORD *)(this + 80))
  {
    v1 = this;
    v9 = 0;
    if (*(_DWORD *)(this + 120))
    {
      v2 = 0;
      do
      {
        v3 = *(_QWORD *)(v1 + 112);
        if (*(_DWORD *)(v3 + 24 * v2 + 12) != 2)
        {
          v4 = (unsigned int *)(v3 + 24 * v2 + 8);
          do
          {
            v5 = __ldaxr(v4);
            v6 = v5 - 1;
          }
          while (__stlxr(v6, v4));
          if (!v6)
          {
            v7 = *(unsigned int *)(v1 + 136);
            if ((*(_DWORD *)(v1 + 140) & 0x7FFFFFFFu) <= v7)
            {
              this = physx::shdfnd::Array<unsigned int,physx::shdfnd::ReflectionAllocator<unsigned int>>::growAndPushBack(v1 + 128, &v9);
            }
            else
            {
              *(_DWORD *)(*(_QWORD *)(v1 + 128) + 4 * v7) = v9;
              ++*(_DWORD *)(v1 + 136);
            }
          }
        }
        v2 = v9 + 1;
        v9 = v2;
      }
      while (v2 < *(_DWORD *)(v1 + 120));
    }
    if (*(_DWORD *)(v1 + 136))
    {
      v8 = 0;
      do
        this = (uint64_t)physx::PxTaskMgr::dispatchTask((pthread_mutex_t **)v1, *(_DWORD *)(*(_QWORD *)(v1 + 128) + 4 * v8++));
      while (v8 < *(unsigned int *)(v1 + 136));
    }
    *(_DWORD *)(v1 + 136) = 0;
  }
  return this;
}

unsigned int *physx::PxTaskMgr::dispatchTask(pthread_mutex_t **this, unsigned int a2)
{
  pthread_mutex_t *v4;
  char *v5;
  int v6;
  _DWORD *v7;
  int v8;
  unsigned int *result;

  if ((physx::shdfnd::g_alwaysUseLocking & 1) != 0 || physx::shdfnd::g_isLockingEnabled)
    pthread_mutex_lock(this[11]);
  v4 = this[14];
  v5 = (char *)v4 + 24 * a2;
  v8 = *((_DWORD *)v5 + 3);
  v7 = v5 + 12;
  v6 = v8;
  if (!v8)
  {
    result = (unsigned int *)(*(uint64_t (**)(pthread_mutex_t *, _QWORD))this[2]->__sig)(this[2], *(&v4->__sig + 3 * a2));
LABEL_11:
    *v7 = 2;
    goto LABEL_12;
  }
  if (v6 == 1)
  {
LABEL_10:
    result = physx::PxTaskMgr::resolveRow((unsigned int *)this, a2);
    goto LABEL_11;
  }
  if (v6 != 2)
  {
    (*(void (**)(pthread_mutex_t *, uint64_t, const char *, const char *, uint64_t))(this[1]->__sig + 16))(this[1], 2, "Unknown task type", "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/task/src/TaskManager.cpp", 448);
    goto LABEL_10;
  }
  result = (unsigned int *)(*(uint64_t (**)(pthread_mutex_t *, uint64_t, const char *, const char *, uint64_t))(this[1]->__sig + 16))(this[1], 2, "PxTask dispatched twice", "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/task/src/TaskManager.cpp", 431);
LABEL_12:
  if ((physx::shdfnd::g_alwaysUseLocking & 1) != 0 || physx::shdfnd::g_isLockingEnabled)
    return (unsigned int *)pthread_mutex_unlock(this[11]);
  return result;
}

uint64_t physx::PxTaskMgr::getNamedTask(pthread_mutex_t **this, const char *__s2)
{
  int v4;
  const char *v5;
  int v6;
  int v7;
  uint64_t v8;
  pthread_mutex_t *v9;
  char *v10;

  if ((physx::shdfnd::g_alwaysUseLocking & 1) != 0 || physx::shdfnd::g_isLockingEnabled)
    pthread_mutex_lock(this[11]);
  if (!*((_DWORD *)this + 19))
    goto LABEL_14;
  v4 = *(unsigned __int8 *)__s2;
  if (*__s2)
  {
    v5 = __s2 + 1;
    v6 = 5381;
    do
    {
      v6 = (33 * v6) ^ v4;
      v7 = *(unsigned __int8 *)v5++;
      v4 = v7;
    }
    while (v7);
  }
  else
  {
    v6 = 5381;
  }
  v8 = *((unsigned int *)&this[6]->__sig + (v6 & (*((_DWORD *)this + 15) - 1)));
  if ((_DWORD)v8 == -1)
  {
LABEL_14:
    v10 = 0;
  }
  else
  {
    v9 = this[4];
    while (strcmp(*((const char **)&v9->__sig + 2 * v8), __s2))
    {
      v8 = *((unsigned int *)&this[5]->__sig + v8);
      if ((_DWORD)v8 == -1)
        goto LABEL_14;
    }
    v10 = (char *)v9 + 16 * v8;
  }
  if ((physx::shdfnd::g_alwaysUseLocking & 1) != 0 || physx::shdfnd::g_isLockingEnabled)
  {
    pthread_mutex_unlock(this[11]);
    if (v10)
      return *((unsigned int *)v10 + 2);
  }
  else if (v10)
  {
    return *((unsigned int *)v10 + 2);
  }
  return (*(uint64_t (**)(pthread_mutex_t **, _QWORD, const char *, uint64_t))&(*this)->__opaque[48])(this, 0, __s2, 1);
}

uint64_t physx::PxTaskMgr::getTaskFromID(physx::PxTaskMgr *this, unsigned int a2)
{
  uint64_t v4;

  if ((physx::shdfnd::g_alwaysUseLocking & 1) == 0 && !physx::shdfnd::g_isLockingEnabled)
    return *(_QWORD *)(*((_QWORD *)this + 14) + 24 * a2);
  pthread_mutex_lock(*((pthread_mutex_t **)this + 11));
  v4 = *(_QWORD *)(*((_QWORD *)this + 14) + 24 * a2);
  if ((physx::shdfnd::g_alwaysUseLocking & 1) != 0 || physx::shdfnd::g_isLockingEnabled)
    pthread_mutex_unlock(*((pthread_mutex_t **)this + 11));
  return v4;
}

uint64_t physx::PxTaskMgr::submitNamedTask(uint64_t a1, uint64_t a2, char *__s2, int a4, int8x8_t a5)
{
  _BYTE *v9;
  int v10;
  char *v11;
  int v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unsigned int *v17;
  unsigned int v18;
  uint64_t v19;
  unsigned int v20;
  int v21;
  char *v22;
  int v23;
  int v24;
  unsigned int v25;
  uint64_t v26;
  uint64_t v27;
  unsigned int v28;
  int v29;
  char *v30;
  int v31;
  int v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unsigned int v37;
  uint64_t v38;
  __int128 v39;
  __int128 v41;
  uint64_t v42;

  if (a2)
  {
    *(_QWORD *)(a2 + 16) = a1;
    (*(void (**)(uint64_t))(*(_QWORD *)a2 + 64))(a2);
  }
  v9 = physx::gEnablePCMCaching;
  if ((physx::shdfnd::g_alwaysUseLocking & 1) != 0 || physx::shdfnd::g_isLockingEnabled)
    pthread_mutex_lock(*(pthread_mutex_t **)(a1 + 88));
  if (!*(_DWORD *)(a1 + 76))
    goto LABEL_16;
  v10 = *__s2;
  if (*__s2)
  {
    v11 = __s2 + 1;
    v12 = 5381;
    do
    {
      v12 = (33 * v12) ^ v10;
      v13 = *v11++;
      v10 = v13;
    }
    while (v13);
  }
  else
  {
    v12 = 5381;
  }
  v14 = *(unsigned int *)(*(_QWORD *)(a1 + 48) + 4 * (v12 & (*(_DWORD *)(a1 + 60) - 1)));
  if ((_DWORD)v14 == -1)
  {
LABEL_16:
    v16 = a1 + 24;
    v17 = (unsigned int *)(a1 + 80);
    do
      v18 = __ldaxr(v17);
    while (__stlxr(v18 + 1, v17));
    v19 = *(unsigned int *)(a1 + 120);
    v20 = *(_DWORD *)(a1 + 60);
    if (v20)
    {
      v21 = *__s2;
      if (*__s2)
      {
        v22 = __s2 + 1;
        v23 = 5381;
        do
        {
          v23 = (33 * v23) ^ v21;
          v24 = *v22++;
          v21 = v24;
        }
        while (v24);
      }
      else
      {
        v23 = 5381;
      }
      v25 = v23 & (v20 - 1);
      v26 = *(unsigned int *)(*(_QWORD *)(a1 + 48) + 4 * v25);
      if ((_DWORD)v26 != -1)
      {
        v27 = *(_QWORD *)(a1 + 32);
        while (strcmp(*(const char **)(v27 + 16 * v26), __s2))
        {
          v26 = *(unsigned int *)(*(_QWORD *)(a1 + 40) + 4 * v26);
          if ((_DWORD)v26 == -1)
          {
            v9 = physx::gEnablePCMCaching;
            v16 = a1 + 24;
            goto LABEL_30;
          }
        }
        v34 = v27 + 16 * v26;
        v9 = physx::gEnablePCMCaching;
        goto LABEL_46;
      }
    }
    else
    {
      v25 = 0;
    }
LABEL_30:
    if (*(_DWORD *)(a1 + 76) == *(_DWORD *)(a1 + 56))
    {
      if (v20)
        v28 = 2 * v20;
      else
        v28 = 16;
      if (v20 < v28)
      {
        physx::shdfnd::internal::HashBase<physx::shdfnd::Pair<char const* const,unsigned int>,char const*,physx::shdfnd::Hash<char const*>,physx::shdfnd::internal::HashMapBase<char const*,unsigned int,physx::shdfnd::Hash<char const*>,physx::shdfnd::NonTrackingAllocator>::GetKey,physx::shdfnd::NonTrackingAllocator,true>::reserveInternal(v16, v28, a5);
        v20 = *(_DWORD *)(a1 + 60);
      }
      v29 = *__s2;
      if (*__s2)
      {
        v30 = __s2 + 1;
        v31 = 5381;
        do
        {
          v31 = (33 * v31) ^ v29;
          v32 = *v30++;
          v29 = v32;
        }
        while (v32);
      }
      else
      {
        v31 = 5381;
      }
      v25 = v31 & (v20 - 1);
    }
    v35 = *(unsigned int *)(a1 + 68);
    *(_DWORD *)(a1 + 68) = v35 + 1;
    v36 = *(_QWORD *)(a1 + 48);
    *(_DWORD *)(*(_QWORD *)(a1 + 40) + 4 * v35) = *(_DWORD *)(v36 + 4 * v25);
    *(_DWORD *)(v36 + 4 * v25) = v35;
    *(int32x2_t *)(a1 + 72) = vadd_s32(*(int32x2_t *)(a1 + 72), (int32x2_t)0x100000001);
    v34 = *(_QWORD *)(a1 + 32) + 16 * v35;
    *(_QWORD *)v34 = __s2;
LABEL_46:
    *(_DWORD *)(v34 + 8) = v19;
    if (a2)
      *(_DWORD *)(a2 + 24) = v19;
    DWORD2(v41) = 1;
    v42 = -1;
    *(_QWORD *)&v41 = a2;
    HIDWORD(v41) = a4;
    v37 = *(_DWORD *)(a1 + 120);
    if ((*(_DWORD *)(a1 + 124) & 0x7FFFFFFFu) <= v37)
    {
      physx::shdfnd::Array<physx::PxTaskTableRow,physx::shdfnd::ReflectionAllocator<physx::PxTaskTableRow>>::growAndPushBack(a1 + 112, &v41);
    }
    else
    {
      v38 = *(_QWORD *)(a1 + 112) + 24 * v37;
      v39 = v41;
      *(_QWORD *)(v38 + 16) = v42;
      *(_OWORD *)v38 = v39;
      ++*(_DWORD *)(a1 + 120);
    }
    goto LABEL_51;
  }
  v15 = *(_QWORD *)(a1 + 32);
  while (strcmp(*(const char **)(v15 + 16 * v14), __s2))
  {
    v14 = *(unsigned int *)(*(_QWORD *)(a1 + 40) + 4 * v14);
    if ((_DWORD)v14 == -1)
      goto LABEL_16;
  }
  v19 = *(unsigned int *)(v15 + 16 * v14 + 8);
  if (a2)
  {
    v33 = *(_QWORD *)(a1 + 112) + 24 * v19;
    *(_QWORD *)v33 = a2;
    *(_DWORD *)(v33 + 12) = a4;
    *(_DWORD *)(a2 + 24) = v19;
  }
LABEL_51:
  if ((physx::shdfnd::g_alwaysUseLocking & 1) != 0 || v9[2488])
    pthread_mutex_unlock(*(pthread_mutex_t **)(a1 + 88));
  return v19;
}

uint64_t physx::PxTaskMgr::submitUnnamedTask(uint64_t a1, uint64_t a2, int a3)
{
  unsigned int *v6;
  unsigned int v7;
  unsigned int v8;
  uint64_t v9;
  __int128 v10;
  uint64_t v11;
  __int128 v13;
  uint64_t v14;

  v6 = (unsigned int *)(a1 + 80);
  do
    v7 = __ldaxr(v6);
  while (__stlxr(v7 + 1, v6));
  *(_QWORD *)(a2 + 16) = a1;
  (*(void (**)(uint64_t))(*(_QWORD *)a2 + 64))(a2);
  if ((physx::shdfnd::g_alwaysUseLocking & 1) != 0 || physx::shdfnd::g_isLockingEnabled)
    pthread_mutex_lock(*(pthread_mutex_t **)(a1 + 88));
  v8 = *(_DWORD *)(a1 + 120);
  *(_DWORD *)(a2 + 24) = v8;
  DWORD2(v13) = 1;
  v14 = -1;
  *(_QWORD *)&v13 = a2;
  HIDWORD(v13) = a3;
  if ((*(_DWORD *)(a1 + 124) & 0x7FFFFFFFu) <= v8)
  {
    physx::shdfnd::Array<physx::PxTaskTableRow,physx::shdfnd::ReflectionAllocator<physx::PxTaskTableRow>>::growAndPushBack(a1 + 112, &v13);
  }
  else
  {
    v9 = *(_QWORD *)(a1 + 112) + 24 * v8;
    v10 = v13;
    *(_QWORD *)(v9 + 16) = v14;
    *(_OWORD *)v9 = v10;
    ++*(_DWORD *)(a1 + 120);
  }
  v11 = *(unsigned int *)(a2 + 24);
  if ((physx::shdfnd::g_alwaysUseLocking & 1) != 0 || physx::shdfnd::g_isLockingEnabled)
    pthread_mutex_unlock(*(pthread_mutex_t **)(a1 + 88));
  return v11;
}

unsigned int *physx::PxTaskMgr::taskCompleted(uint64_t a1, uint64_t a2)
{
  unsigned int *result;

  if ((physx::shdfnd::g_alwaysUseLocking & 1) != 0 || physx::shdfnd::g_isLockingEnabled)
    pthread_mutex_lock(*(pthread_mutex_t **)(a1 + 88));
  result = physx::PxTaskMgr::resolveRow((unsigned int *)a1, *(_DWORD *)(a2 + 24));
  if ((physx::shdfnd::g_alwaysUseLocking & 1) != 0 || physx::shdfnd::g_isLockingEnabled)
    return (unsigned int *)pthread_mutex_unlock(*(pthread_mutex_t **)(a1 + 88));
  return result;
}

unsigned int *physx::PxTaskMgr::resolveRow(unsigned int *this, unsigned int a2)
{
  unsigned int *v2;
  uint64_t i;
  uint64_t v4;
  unsigned int *v5;
  unsigned int *v6;
  unsigned int v7;
  unsigned int v8;
  unsigned int *v9;
  unsigned int v10;

  v2 = this;
  for (i = *(unsigned int *)(*((_QWORD *)this + 14) + 24 * a2 + 16);
        (_DWORD)i != -1;
        i = *(unsigned int *)(v4 + 8 * i + 4))
  {
    v4 = *((_QWORD *)v2 + 12);
    v5 = (unsigned int *)(v4 + 8 * i);
    v6 = (unsigned int *)(*((_QWORD *)v2 + 14) + 24 * *v5 + 8);
    do
    {
      v7 = __ldaxr(v6);
      v8 = v7 - 1;
    }
    while (__stlxr(v8, v6));
    if (!v8)
      this = (unsigned int *)physx::PxTaskMgr::dispatchTask((physx::PxTaskMgr *)v2, *v5);
  }
  v9 = v2 + 20;
  do
    v10 = __ldaxr(v9);
  while (__stlxr(v10 - 1, v9));
  return this;
}

uint64_t physx::PxTaskMgr::finishBefore(uint64_t a1, uint64_t a2, unsigned int a3)
{
  uint64_t result;
  unsigned int *v7;
  unsigned int v8;

  if ((physx::shdfnd::g_alwaysUseLocking & 1) != 0 || physx::shdfnd::g_isLockingEnabled)
    pthread_mutex_lock(*(pthread_mutex_t **)(a1 + 88));
  result = physx::PxTaskTableRow::addDependency(*(_QWORD *)(a1 + 112) + 24 * *(unsigned int *)(a2 + 24), a1 + 96, a3);
  v7 = (unsigned int *)(*(_QWORD *)(a1 + 112) + 24 * a3 + 8);
  do
    v8 = __ldaxr(v7);
  while (__stlxr(v8 + 1, v7));
  if ((physx::shdfnd::g_alwaysUseLocking & 1) != 0 || physx::shdfnd::g_isLockingEnabled)
    return pthread_mutex_unlock(*(pthread_mutex_t **)(a1 + 88));
  return result;
}

uint64_t physx::PxTaskTableRow::addDependency(uint64_t result, uint64_t a2, unsigned int a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;

  v4 = result;
  v7 = a3 | 0xFFFFFFFF00000000;
  v5 = *(unsigned int *)(a2 + 8);
  if ((*(_DWORD *)(a2 + 12) & 0x7FFFFFFFu) <= v5)
  {
    result = physx::shdfnd::Array<physx::PxTaskDepTableRow,physx::shdfnd::ReflectionAllocator<physx::PxTaskDepTableRow>>::growAndPushBack(a2, &v7);
  }
  else
  {
    *(_QWORD *)(*(_QWORD *)a2 + 8 * v5) = v7;
    ++*(_DWORD *)(a2 + 8);
  }
  v6 = *(unsigned int *)(v4 + 20);
  if ((_DWORD)v6 == -1)
    *(_DWORD *)(v4 + 16) = v5;
  else
    *(_DWORD *)(*(_QWORD *)a2 + 8 * v6 + 4) = v5;
  *(_DWORD *)(v4 + 20) = v5;
  return result;
}

uint64_t physx::PxTaskMgr::startAfter(uint64_t a1, uint64_t a2, unsigned int a3)
{
  uint64_t result;
  unsigned int *v7;
  unsigned int v8;

  if ((physx::shdfnd::g_alwaysUseLocking & 1) != 0 || physx::shdfnd::g_isLockingEnabled)
    pthread_mutex_lock(*(pthread_mutex_t **)(a1 + 88));
  result = physx::PxTaskTableRow::addDependency(*(_QWORD *)(a1 + 112) + 24 * a3, a1 + 96, *(_DWORD *)(a2 + 24));
  v7 = (unsigned int *)(*(_QWORD *)(a1 + 112) + 24 * *(unsigned int *)(a2 + 24) + 8);
  do
    v8 = __ldaxr(v7);
  while (__stlxr(v8 + 1, v7));
  if ((physx::shdfnd::g_alwaysUseLocking & 1) != 0 || physx::shdfnd::g_isLockingEnabled)
    return pthread_mutex_unlock(*(pthread_mutex_t **)(a1 + 88));
  return result;
}

uint64_t physx::PxTaskMgr::addReference(uint64_t this, unsigned int a2)
{
  uint64_t v3;
  unsigned int *v4;
  unsigned int v5;

  v3 = this;
  if ((physx::shdfnd::g_alwaysUseLocking & 1) != 0 || physx::shdfnd::g_isLockingEnabled)
    this = pthread_mutex_lock(*(pthread_mutex_t **)(this + 88));
  v4 = (unsigned int *)(*(_QWORD *)(v3 + 112) + 24 * a2 + 8);
  do
    v5 = __ldaxr(v4);
  while (__stlxr(v5 + 1, v4));
  if ((physx::shdfnd::g_alwaysUseLocking & 1) != 0 || physx::shdfnd::g_isLockingEnabled)
    return pthread_mutex_unlock(*(pthread_mutex_t **)(v3 + 88));
  return this;
}

unsigned int *physx::PxTaskMgr::decrReference(unsigned int *this, unsigned int a2)
{
  uint64_t v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;

  v3 = (uint64_t)this;
  if ((physx::shdfnd::g_alwaysUseLocking & 1) != 0 || physx::shdfnd::g_isLockingEnabled)
    this = (unsigned int *)pthread_mutex_lock(*((pthread_mutex_t **)this + 11));
  v4 = (unsigned int *)(*(_QWORD *)(v3 + 112) + 24 * a2 + 8);
  do
  {
    v5 = __ldaxr(v4);
    v6 = v5 - 1;
  }
  while (__stlxr(v6, v4));
  if (!v6)
    this = physx::PxTaskMgr::dispatchTask((pthread_mutex_t **)v3, a2);
  if ((physx::shdfnd::g_alwaysUseLocking & 1) != 0 || physx::shdfnd::g_isLockingEnabled)
    return (unsigned int *)pthread_mutex_unlock(*(pthread_mutex_t **)(v3 + 88));
  return this;
}

uint64_t physx::PxTaskMgr::getReference(physx::PxTaskMgr *this, unsigned int a2)
{
  return *(unsigned int *)(*((_QWORD *)this + 14) + 24 * a2 + 8);
}

uint64_t physx::PxTaskMgr::setCpuDispatcher(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 16) = a2;
  return result;
}

uint64_t physx::PxTaskMgr::getCpuDispatcher(physx::PxTaskMgr *this)
{
  return *((_QWORD *)this + 2);
}

uint64_t physx::shdfnd::Array<physx::PxTaskDepTableRow,physx::shdfnd::ReflectionAllocator<physx::PxTaskDepTableRow>>::growAndPushBack(uint64_t result, _QWORD *a2)
{
  uint64_t v3;
  int v4;
  unsigned int v5;
  uint64_t v6;
  const char *v7;
  _QWORD *v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t *v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;

  v3 = result;
  v4 = *(_DWORD *)(result + 12);
  if ((v4 & 0x7FFFFFFF) != 0)
    v5 = 2 * v4;
  else
    v5 = 1;
  if (v5)
  {
    v6 = physx::shdfnd::Foundation::mInstance;
    if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)physx::shdfnd::Foundation::mInstance + 40))(physx::shdfnd::Foundation::mInstance))
      v7 = "static const char *physx::shdfnd::ReflectionAllocator<physx::PxTaskDepTableRow>::getName() [T = physx::PxTaskDepTableRow]";
    else
      v7 = "<allocation names disabled>";
    result = (*(uint64_t (**)(uint64_t, uint64_t, const char *, const char *, uint64_t))(*(_QWORD *)(v6 + 24)
                                                                                              + 16))(v6 + 24, 8 * v5, v7, "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/foundation/include/PsArray.h", 553);
    v8 = (_QWORD *)result;
  }
  else
  {
    v8 = 0;
  }
  v9 = *(unsigned int *)(v3 + 8);
  if ((_DWORD)v9)
  {
    v10 = (unint64_t)&v8[v9];
    v11 = *(uint64_t **)v3;
    v12 = v8;
    do
    {
      v13 = *v11++;
      *v12++ = v13;
    }
    while ((unint64_t)v12 < v10);
    v14 = *(unsigned int *)(v3 + 8);
  }
  else
  {
    v14 = 0;
  }
  v8[v14] = *a2;
  if ((*(_DWORD *)(v3 + 12) & 0x80000000) == 0 && *(_QWORD *)v3)
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
  *(_QWORD *)v3 = v8;
  ++*(_DWORD *)(v3 + 8);
  *(_DWORD *)(v3 + 12) = v5;
  return result;
}

void *physx::shdfnd::internal::HashBase<physx::shdfnd::Pair<char const* const,unsigned int>,char const*,physx::shdfnd::Hash<char const*>,physx::shdfnd::internal::HashMapBase<char const*,unsigned int,physx::shdfnd::Hash<char const*>,physx::shdfnd::NonTrackingAllocator>::GetKey,physx::shdfnd::NonTrackingAllocator,true>::reserveInternal(uint64_t a1, unsigned int a2, int8x8_t a3)
{
  unsigned int v3;
  uint8x8_t v5;
  unsigned int v6;
  unsigned int v7;
  int v8;
  unsigned int v9;
  uint64_t v10;
  char *v11;
  char *v12;
  char *v13;
  void *result;
  unint64_t v15;
  uint64_t v16;
  _BYTE *v17;
  int v18;
  unsigned __int8 *v19;
  int v20;
  int v21;
  unsigned int v22;
  char *v23;

  v3 = a2;
  a3.i32[0] = a2;
  v5 = (uint8x8_t)vcnt_s8(a3);
  v5.i16[0] = vaddlv_u8(v5);
  if (v5.i32[0] != 1)
  {
    v6 = a2 | (a2 >> 1) | ((a2 | (a2 >> 1)) >> 2);
    v7 = v6 | (v6 >> 4) | ((v6 | (v6 >> 4)) >> 8);
    v3 = (v7 | HIWORD(v7)) + 1;
  }
  v8 = *(_DWORD *)(a1 + 32);
  v9 = (float)(*(float *)(a1 + 40) * (float)v3);
  v10 = ((-4 * (v3 + v9)) & 0xC) + 4 * (v3 + v9);
  if ((_DWORD)v10 + 16 * v9)
    v11 = (char *)(*(uint64_t (**)(uint64_t, _QWORD, const char *, const char *, uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24)
                                                                                                  + 16))(physx::shdfnd::Foundation::mInstance + 24, v10 + 16 * v9, "NonTrackedAlloc", "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/foundation/include/PsHashInternals.h", 372);
  else
    v11 = 0;
  v12 = &v11[4 * v3];
  v13 = &v11[v10];
  result = memset(v11, 255, 4 * v3);
  if (*(_DWORD *)(a1 + 52))
  {
    v15 = 0;
    v16 = *(_QWORD *)(a1 + 8);
    do
    {
      v17 = *(_BYTE **)(v16 + 16 * v15);
      v18 = *v17;
      if (*v17)
      {
        v19 = v17 + 1;
        v20 = 5381;
        do
        {
          v20 = (33 * v20) ^ v18;
          v21 = *v19++;
          v18 = v21;
        }
        while (v21);
      }
      else
      {
        v20 = 5381;
      }
      v22 = v20 & (v3 - 1);
      *(_DWORD *)&v12[4 * v15] = *(_DWORD *)&v11[4 * v22];
      *(_DWORD *)&v11[4 * v22] = v15;
      v23 = &v13[16 * v15];
      *(_QWORD *)v23 = v17;
      *((_DWORD *)v23 + 2) = *(_DWORD *)(v16 + 16 * v15++ + 8);
    }
    while (v15 < *(unsigned int *)(a1 + 52));
  }
  if (*(_QWORD *)a1)
    result = (void *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
  *(_QWORD *)(a1 + 16) = v12;
  *(_QWORD *)(a1 + 24) = v11;
  *(_QWORD *)a1 = v11;
  *(_QWORD *)(a1 + 8) = v13;
  *(_DWORD *)(a1 + 32) = v9;
  *(_DWORD *)(a1 + 36) = v3;
  if (*(_DWORD *)(a1 + 44) == -1)
    *(_DWORD *)(a1 + 44) = v8;
  return result;
}

uint64_t physx::shdfnd::Array<physx::PxTaskTableRow,physx::shdfnd::ReflectionAllocator<physx::PxTaskTableRow>>::growAndPushBack(uint64_t result, __int128 *a2)
{
  uint64_t v3;
  int v4;
  unsigned int v5;
  uint64_t v6;
  const char *v7;
  uint64_t v8;
  unsigned int v9;
  unint64_t v10;
  __int128 *v11;
  unint64_t v12;
  __int128 v13;
  unsigned int v14;
  uint64_t v15;
  __int128 v16;

  v3 = result;
  v4 = *(_DWORD *)(result + 12);
  if ((v4 & 0x7FFFFFFF) != 0)
    v5 = 2 * v4;
  else
    v5 = 1;
  if (v5)
  {
    v6 = physx::shdfnd::Foundation::mInstance;
    if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)physx::shdfnd::Foundation::mInstance + 40))(physx::shdfnd::Foundation::mInstance))
      v7 = "static const char *physx::shdfnd::ReflectionAllocator<physx::PxTaskTableRow>::getName() [T = physx::PxTaskTableRow]";
    else
      v7 = "<allocation names disabled>";
    result = (*(uint64_t (**)(uint64_t, uint64_t, const char *, const char *, uint64_t))(*(_QWORD *)(v6 + 24)
                                                                                              + 16))(v6 + 24, 24 * v5, v7, "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/foundation/include/PsArray.h", 553);
    v8 = result;
  }
  else
  {
    v8 = 0;
  }
  v9 = *(_DWORD *)(v3 + 8);
  if (v9)
  {
    v10 = v8 + 24 * v9;
    v11 = *(__int128 **)v3;
    v12 = v8;
    do
    {
      v13 = *v11;
      *(_QWORD *)(v12 + 16) = *((_QWORD *)v11 + 2);
      *(_OWORD *)v12 = v13;
      v12 += 24;
      v11 = (__int128 *)((char *)v11 + 24);
    }
    while (v12 < v10);
    v14 = *(_DWORD *)(v3 + 8);
  }
  else
  {
    v14 = 0;
  }
  v15 = v8 + 24 * v14;
  v16 = *a2;
  *(_QWORD *)(v15 + 16) = *((_QWORD *)a2 + 2);
  *(_OWORD *)v15 = v16;
  if ((*(_DWORD *)(v3 + 12) & 0x80000000) == 0 && *(_QWORD *)v3)
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
  *(_QWORD *)v3 = v8;
  ++*(_DWORD *)(v3 + 8);
  *(_DWORD *)(v3 + 12) = v5;
  return result;
}

void *REMaterialRenderStateArrayComponentGetComponentType()
{
  if (re::ecs2::dispatchOnceInitECSComponents(void)::onceToken != -1)
    dispatch_once(&re::ecs2::dispatchOnceInitECSComponents(void)::onceToken, &__block_literal_global_13);
  return re::ecs2::ComponentImpl<re::ecs2::MaterialRenderStateArrayComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType;
}

uint64_t REMaterialRenderStateArrayComponentClear(uint64_t this)
{
  *(_QWORD *)(this + 48) = 0;
  ++*(_DWORD *)(this + 56);
  return re::ecs2::Component::enqueueMarkDirty(this);
}

uint64_t REMaterialRenderStateArrayComponentSize(uint64_t a1)
{
  return *(_QWORD *)(a1 + 48);
}

uint64_t REMaterialRenderStateArrayComponentResize(uint64_t a1, unint64_t a2)
{
  re::DynamicArray<re::MaterialRenderFlags>::resize((_QWORD *)(a1 + 32), a2);
  return re::ecs2::Component::enqueueMarkDirty(a1);
}

uint64_t REMaterialRenderStateArrayComponentSetTriangleFillModeAtIndex(re::ecs2::Component *this, unint64_t a2, char a3)
{
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _BYTE *v9;
  int v10;

  v6 = *((_QWORD *)this + 6);
  if (v6 <= a2)
  {
    re::DynamicArray<re::MaterialRenderFlags>::resize((_QWORD *)this + 4, a2 + 1);
    re::ecs2::Component::enqueueMarkDirty((uint64_t)this);
    v6 = *((_QWORD *)this + 6);
  }
  if (v6 <= a2)
  {
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  v7 = *((_QWORD *)this + 8);
  v8 = v7 + 18 * a2;
  v10 = *(unsigned __int8 *)(v8 + 4);
  v9 = (_BYTE *)(v8 + 4);
  if (!v10)
    *v9 = 1;
  *(_BYTE *)(v7 + 18 * a2 + 5) = a3;
  return re::ecs2::Component::enqueueMarkDirty((uint64_t)this);
}

uint64_t REMaterialRenderStateArrayComponentGetTriangleFillModeAtIndex(_QWORD *a1, unint64_t a2, _QWORD *a3)
{
  unint64_t v6;
  uint64_t v7;
  BOOL v8;
  uint64_t result;

  v6 = a1[6];
  if (v6 <= a2)
  {
    re::DynamicArray<re::MaterialRenderFlags>::resize(a1 + 4, a2 + 1);
    re::ecs2::Component::enqueueMarkDirty((uint64_t)a1);
    v6 = a1[6];
  }
  if (v6 <= a2)
  {
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  v7 = a1[8];
  if (a3)
    v8 = *(_BYTE *)(v7 + 18 * a2 + 4) == 0;
  else
    v8 = 1;
  result = !v8;
  if (!v8)
    *a3 = *(unsigned __int8 *)(v7 + 18 * a2 + 5);
  return result;
}

BOOL REMaterialRenderStateArrayComponentHasStateSet(_QWORD *a1, unint64_t a2)
{
  unint64_t v4;
  unint64_t v5;
  BOOL v6;

  v4 = a1[6];
  if (v4 <= a2)
  {
    re::DynamicArray<re::MaterialRenderFlags>::resize(a1 + 4, a2 + 1);
    re::ecs2::Component::enqueueMarkDirty((uint64_t)a1);
    v4 = a1[6];
  }
  if (v4 <= a2)
  {
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  v5 = re::MaterialRenderFlags::flattenToOverrideFlags((re::MaterialRenderFlags *)(a1[8] + 18 * a2));
  if (HIDWORD(v5))
    v6 = (_DWORD)v5 == 0;
  else
    v6 = 1;
  return !v6;
}

uint64_t REMaterialRenderStateArrayComponentSetCullModeAtIndex(re::ecs2::Component *this, unint64_t a2, char a3)
{
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _BYTE *v9;
  int v10;

  v6 = *((_QWORD *)this + 6);
  if (v6 <= a2)
  {
    re::DynamicArray<re::MaterialRenderFlags>::resize((_QWORD *)this + 4, a2 + 1);
    re::ecs2::Component::enqueueMarkDirty((uint64_t)this);
    v6 = *((_QWORD *)this + 6);
  }
  if (v6 <= a2)
  {
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  v7 = *((_QWORD *)this + 8);
  v8 = v7 + 18 * a2;
  v10 = *(unsigned __int8 *)(v8 + 2);
  v9 = (_BYTE *)(v8 + 2);
  if (!v10)
    *v9 = 1;
  *(_BYTE *)(v7 + 18 * a2 + 3) = a3;
  return re::ecs2::Component::enqueueMarkDirty((uint64_t)this);
}

uint64_t REMaterialRenderStateArrayComponentGetCullModeAtIndex(_QWORD *a1, unint64_t a2, _QWORD *a3)
{
  unint64_t v6;
  uint64_t v7;
  BOOL v8;
  uint64_t result;

  v6 = a1[6];
  if (v6 <= a2)
  {
    re::DynamicArray<re::MaterialRenderFlags>::resize(a1 + 4, a2 + 1);
    re::ecs2::Component::enqueueMarkDirty((uint64_t)a1);
    v6 = a1[6];
  }
  if (v6 <= a2)
  {
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  v7 = a1[8];
  if (a3)
    v8 = *(_BYTE *)(v7 + 18 * a2 + 2) == 0;
  else
    v8 = 1;
  result = !v8;
  if (!v8)
    *a3 = *(unsigned __int8 *)(v7 + 18 * a2 + 3);
  return result;
}

uint64_t REMaterialRenderStateArrayComponentClearTriangleFillModeAtIndex(re::ecs2::Component *this, unint64_t a2)
{
  unint64_t v4;
  uint64_t v5;
  _BYTE *v6;
  int v7;

  v4 = *((_QWORD *)this + 6);
  if (v4 <= a2)
  {
    re::DynamicArray<re::MaterialRenderFlags>::resize((_QWORD *)this + 4, a2 + 1);
    re::ecs2::Component::enqueueMarkDirty((uint64_t)this);
    v4 = *((_QWORD *)this + 6);
  }
  if (v4 <= a2)
  {
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  v5 = *((_QWORD *)this + 8) + 18 * a2;
  v7 = *(unsigned __int8 *)(v5 + 4);
  v6 = (_BYTE *)(v5 + 4);
  if (v7)
    *v6 = 0;
  return re::ecs2::Component::enqueueMarkDirty((uint64_t)this);
}

uint64_t REMaterialRenderStateArrayComponentClearCullModeAtIndex(re::ecs2::Component *this, unint64_t a2)
{
  unint64_t v4;
  uint64_t v5;
  _BYTE *v6;
  int v7;

  v4 = *((_QWORD *)this + 6);
  if (v4 <= a2)
  {
    re::DynamicArray<re::MaterialRenderFlags>::resize((_QWORD *)this + 4, a2 + 1);
    re::ecs2::Component::enqueueMarkDirty((uint64_t)this);
    v4 = *((_QWORD *)this + 6);
  }
  if (v4 <= a2)
  {
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  v5 = *((_QWORD *)this + 8) + 18 * a2;
  v7 = *(unsigned __int8 *)(v5 + 2);
  v6 = (_BYTE *)(v5 + 2);
  if (v7)
    *v6 = 0;
  return re::ecs2::Component::enqueueMarkDirty((uint64_t)this);
}

uint64_t REMaterialRenderStateArrayComponentSetReadsDepthAtIndex(re::ecs2::Component *this, unint64_t a2, char a3)
{
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _BYTE *v9;
  int v10;

  v6 = *((_QWORD *)this + 6);
  if (v6 <= a2)
  {
    re::DynamicArray<re::MaterialRenderFlags>::resize((_QWORD *)this + 4, a2 + 1);
    re::ecs2::Component::enqueueMarkDirty((uint64_t)this);
    v6 = *((_QWORD *)this + 6);
  }
  if (v6 <= a2)
  {
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  v7 = *((_QWORD *)this + 8);
  v8 = v7 + 18 * a2;
  v10 = *(unsigned __int8 *)(v8 + 12);
  v9 = (_BYTE *)(v8 + 12);
  if (!v10)
    *v9 = 1;
  *(_BYTE *)(v7 + 18 * a2 + 13) = a3;
  return re::ecs2::Component::enqueueMarkDirty((uint64_t)this);
}

uint64_t REMaterialRenderStateArrayComponentGetReadsDepthAtIndex(_QWORD *a1, unint64_t a2, _BYTE *a3)
{
  unint64_t v6;
  uint64_t v7;
  BOOL v8;
  uint64_t result;

  v6 = a1[6];
  if (v6 <= a2)
  {
    re::DynamicArray<re::MaterialRenderFlags>::resize(a1 + 4, a2 + 1);
    re::ecs2::Component::enqueueMarkDirty((uint64_t)a1);
    v6 = a1[6];
  }
  if (v6 <= a2)
  {
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  v7 = a1[8];
  if (a3)
    v8 = *(_BYTE *)(v7 + 18 * a2 + 12) == 0;
  else
    v8 = 1;
  result = !v8;
  if (!v8)
    *a3 = *(_BYTE *)(v7 + 18 * a2 + 13);
  return result;
}

uint64_t REMaterialRenderStateArrayComponentClearReadsDepthAtIndex(re::ecs2::Component *this, unint64_t a2)
{
  unint64_t v4;
  uint64_t v5;
  _BYTE *v6;
  int v7;

  v4 = *((_QWORD *)this + 6);
  if (v4 <= a2)
  {
    re::DynamicArray<re::MaterialRenderFlags>::resize((_QWORD *)this + 4, a2 + 1);
    re::ecs2::Component::enqueueMarkDirty((uint64_t)this);
    v4 = *((_QWORD *)this + 6);
  }
  if (v4 <= a2)
  {
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  v5 = *((_QWORD *)this + 8) + 18 * a2;
  v7 = *(unsigned __int8 *)(v5 + 12);
  v6 = (_BYTE *)(v5 + 12);
  if (v7)
    *v6 = 0;
  return re::ecs2::Component::enqueueMarkDirty((uint64_t)this);
}

uint64_t REMaterialRenderStateArrayComponentSetWritesDepthAtIndex(re::ecs2::Component *this, unint64_t a2, char a3)
{
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _BYTE *v9;
  int v10;

  v6 = *((_QWORD *)this + 6);
  if (v6 <= a2)
  {
    re::DynamicArray<re::MaterialRenderFlags>::resize((_QWORD *)this + 4, a2 + 1);
    re::ecs2::Component::enqueueMarkDirty((uint64_t)this);
    v6 = *((_QWORD *)this + 6);
  }
  if (v6 <= a2)
  {
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  v7 = *((_QWORD *)this + 8);
  v8 = v7 + 18 * a2;
  v10 = *(unsigned __int8 *)(v8 + 10);
  v9 = (_BYTE *)(v8 + 10);
  if (!v10)
    *v9 = 1;
  *(_BYTE *)(v7 + 18 * a2 + 11) = a3;
  return re::ecs2::Component::enqueueMarkDirty((uint64_t)this);
}

uint64_t REMaterialRenderStateArrayComponentGetWritesDepthAtIndex(_QWORD *a1, unint64_t a2, _BYTE *a3)
{
  unint64_t v6;
  uint64_t v7;
  BOOL v8;
  uint64_t result;

  v6 = a1[6];
  if (v6 <= a2)
  {
    re::DynamicArray<re::MaterialRenderFlags>::resize(a1 + 4, a2 + 1);
    re::ecs2::Component::enqueueMarkDirty((uint64_t)a1);
    v6 = a1[6];
  }
  if (v6 <= a2)
  {
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  v7 = a1[8];
  if (a3)
    v8 = *(_BYTE *)(v7 + 18 * a2 + 10) == 0;
  else
    v8 = 1;
  result = !v8;
  if (!v8)
    *a3 = *(_BYTE *)(v7 + 18 * a2 + 11);
  return result;
}

uint64_t REMaterialRenderStateArrayComponentClearWritesDepthAtIndex(re::ecs2::Component *this, unint64_t a2)
{
  unint64_t v4;
  uint64_t v5;
  _BYTE *v6;
  int v7;

  v4 = *((_QWORD *)this + 6);
  if (v4 <= a2)
  {
    re::DynamicArray<re::MaterialRenderFlags>::resize((_QWORD *)this + 4, a2 + 1);
    re::ecs2::Component::enqueueMarkDirty((uint64_t)this);
    v4 = *((_QWORD *)this + 6);
  }
  if (v4 <= a2)
  {
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  v5 = *((_QWORD *)this + 8) + 18 * a2;
  v7 = *(unsigned __int8 *)(v5 + 10);
  v6 = (_BYTE *)(v5 + 10);
  if (v7)
    *v6 = 0;
  return re::ecs2::Component::enqueueMarkDirty((uint64_t)this);
}

uint64_t REPbrMaterialParametersGetID(uint64_t a1)
{
  return *(_QWORD *)(a1 + 296);
}

uint64_t REPbrMaterialParametersSetColorTint(uint64_t a1, int a2, int8x16_t a3)
{
  uint64_t v4;
  int32x2_t v5;
  int v6;
  int v7;

  v4 = re::ecs2::EntityComponentCollection::get((re::ecs2::EntityComponentCollection *)(a1 + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::PbrMaterialParametersComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType);
  if (*(float *)a3.i32 == *(float *)(v4 + 368)
    && *(float *)&a3.i32[1] == *(float *)(v4 + 372)
    && (v5 = vceq_f32((float32x2_t)*(_OWORD *)&vextq_s8(a3, a3, 8uLL), *(float32x2_t *)(v4 + 376)), (v5.i8[0] & 1) != 0)
    && (v5.i8[4] & 1) != 0
    && *(unsigned __int8 *)(v4 + 384) == a2)
  {
    v6 = *(_DWORD *)(v4 + 520);
  }
  else
  {
    *(int8x16_t *)(v4 + 368) = a3;
    *(_BYTE *)(v4 + 384) = a2;
    v6 = *(_DWORD *)(v4 + 520) | 1;
  }
  v7 = *(_DWORD *)(v4 + 516);
  *(_DWORD *)(v4 + 516) = v7 | 1;
  *(_DWORD *)(v4 + 520) = v7 | v6;
  return re::ecs2::Component::enqueueMarkDirty(v4);
}

uint64_t REPbrMaterialParametersClearColorTint(uint64_t a1)
{
  uint64_t result;
  int v2;

  result = re::ecs2::EntityComponentCollection::get((re::ecs2::EntityComponentCollection *)(a1 + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::PbrMaterialParametersComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType);
  v2 = *(_DWORD *)(result + 516);
  *(_DWORD *)(result + 516) = v2 & 0xFFFFFFFE;
  *(_DWORD *)(result + 520) |= v2;
  return result;
}

uint64_t REPbrMaterialParametersGetColorTint(uint64_t a1, _OWORD *a2, _BYTE *a3)
{
  uint64_t v5;
  int v6;
  char v7;

  v5 = re::ecs2::EntityComponentCollection::get((re::ecs2::EntityComponentCollection *)(a1 + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::PbrMaterialParametersComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType);
  v6 = *(_DWORD *)(v5 + 516);
  if ((v6 & 1) != 0)
  {
    v7 = *(_BYTE *)(v5 + 384);
    *a2 = *(_OWORD *)(v5 + 368);
    *a3 = v7;
  }
  return v6 & 1;
}

uint64_t REPbrMaterialParametersSetColorTexture(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  __int128 v4;
  uint64_t v5;
  __int128 v7;
  uint64_t v8;

  v3 = re::ecs2::EntityComponentCollection::get((re::ecs2::EntityComponentCollection *)(a1 + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::PbrMaterialParametersComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType);
  re::AssetAPIHelper::assetHandleCreate(a2, (uint64_t *)&v7);
  v4 = *(_OWORD *)(v3 + 32);
  *(_OWORD *)(v3 + 32) = v7;
  v7 = v4;
  v5 = *(_QWORD *)(v3 + 48);
  *(_QWORD *)(v3 + 48) = v8;
  v8 = v5;
  re::AssetHandle::~AssetHandle((re::AssetHandle *)&v7);
  return re::ecs2::Component::enqueueMarkDirty(v3);
}

uint64_t REPbrMaterialParametersGetColorTexture(uint64_t a1)
{
  return *(_QWORD *)(re::ecs2::EntityComponentCollection::get((re::ecs2::EntityComponentCollection *)(a1 + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::PbrMaterialParametersComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType)+ 32);
}

uint64_t REPbrMaterialParametersSetAmbientOcclusionTexture(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  __int128 v4;
  uint64_t v5;
  __int128 v7;
  uint64_t v8;

  v3 = re::ecs2::EntityComponentCollection::get((re::ecs2::EntityComponentCollection *)(a1 + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::PbrMaterialParametersComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType);
  re::AssetAPIHelper::assetHandleCreate(a2, (uint64_t *)&v7);
  v4 = *(_OWORD *)(v3 + 56);
  *(_OWORD *)(v3 + 56) = v7;
  v7 = v4;
  v5 = *(_QWORD *)(v3 + 72);
  *(_QWORD *)(v3 + 72) = v8;
  v8 = v5;
  re::AssetHandle::~AssetHandle((re::AssetHandle *)&v7);
  return re::ecs2::Component::enqueueMarkDirty(v3);
}

uint64_t REPbrMaterialParametersGetAmbientOcclusionTexture(uint64_t a1)
{
  return *(_QWORD *)(re::ecs2::EntityComponentCollection::get((re::ecs2::EntityComponentCollection *)(a1 + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::PbrMaterialParametersComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType)+ 56);
}

uint64_t REPbrMaterialParametersSetMetallicScale(uint64_t a1, float a2)
{
  uint64_t v3;
  int v4;
  int v5;

  v3 = re::ecs2::EntityComponentCollection::get((re::ecs2::EntityComponentCollection *)(a1 + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::PbrMaterialParametersComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType);
  if (*(float *)(v3 + 388) == a2)
  {
    v4 = *(_DWORD *)(v3 + 520);
  }
  else
  {
    *(float *)(v3 + 388) = a2;
    v4 = *(_DWORD *)(v3 + 520) | 2;
  }
  v5 = *(_DWORD *)(v3 + 516);
  *(_DWORD *)(v3 + 516) = v5 | 2;
  *(_DWORD *)(v3 + 520) = v5 | v4;
  return re::ecs2::Component::enqueueMarkDirty(v3);
}

uint64_t REPbrMaterialParametersClearMetallicScale(uint64_t a1)
{
  uint64_t result;
  int v2;

  result = re::ecs2::EntityComponentCollection::get((re::ecs2::EntityComponentCollection *)(a1 + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::PbrMaterialParametersComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType);
  v2 = *(_DWORD *)(result + 516);
  *(_DWORD *)(result + 516) = v2 & 0xFFFFFFFD;
  *(_DWORD *)(result + 520) |= v2;
  return result;
}

uint64_t REPbrMaterialParametersGetMetallicScale(uint64_t a1, _DWORD *a2)
{
  uint64_t v3;
  unsigned int v4;

  v3 = re::ecs2::EntityComponentCollection::get((re::ecs2::EntityComponentCollection *)(a1 + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::PbrMaterialParametersComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType);
  v4 = *(_DWORD *)(v3 + 516);
  if ((v4 & 2) != 0)
    *a2 = *(_DWORD *)(v3 + 388);
  return (v4 >> 1) & 1;
}

uint64_t REPbrMaterialParametersSetMetallicTexture(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  __int128 v4;
  uint64_t v5;
  __int128 v7;
  uint64_t v8;

  v3 = re::ecs2::EntityComponentCollection::get((re::ecs2::EntityComponentCollection *)(a1 + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::PbrMaterialParametersComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType);
  re::AssetAPIHelper::assetHandleCreate(a2, (uint64_t *)&v7);
  v4 = *(_OWORD *)(v3 + 104);
  *(_OWORD *)(v3 + 104) = v7;
  v7 = v4;
  v5 = *(_QWORD *)(v3 + 120);
  *(_QWORD *)(v3 + 120) = v8;
  v8 = v5;
  re::AssetHandle::~AssetHandle((re::AssetHandle *)&v7);
  return re::ecs2::Component::enqueueMarkDirty(v3);
}

uint64_t REPbrMaterialParametersGetMetallicTexture(uint64_t a1)
{
  return *(_QWORD *)(re::ecs2::EntityComponentCollection::get((re::ecs2::EntityComponentCollection *)(a1 + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::PbrMaterialParametersComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType)+ 104);
}

uint64_t REPbrMaterialParametersSetRoughnessScale(uint64_t a1, float a2)
{
  uint64_t v3;
  int v4;
  int v5;

  v3 = re::ecs2::EntityComponentCollection::get((re::ecs2::EntityComponentCollection *)(a1 + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::PbrMaterialParametersComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType);
  if (*(float *)(v3 + 396) == a2)
  {
    v4 = *(_DWORD *)(v3 + 520);
  }
  else
  {
    *(float *)(v3 + 396) = a2;
    v4 = *(_DWORD *)(v3 + 520) | 8;
  }
  v5 = *(_DWORD *)(v3 + 516);
  *(_DWORD *)(v3 + 516) = v5 | 8;
  *(_DWORD *)(v3 + 520) = v5 | v4;
  return re::ecs2::Component::enqueueMarkDirty(v3);
}

uint64_t REPbrMaterialParametersClearRoughnessScale(uint64_t a1)
{
  uint64_t result;
  int v2;

  result = re::ecs2::EntityComponentCollection::get((re::ecs2::EntityComponentCollection *)(a1 + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::PbrMaterialParametersComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType);
  v2 = *(_DWORD *)(result + 516);
  *(_DWORD *)(result + 516) = v2 & 0xFFFFFFF7;
  *(_DWORD *)(result + 520) |= v2;
  return result;
}

uint64_t REPbrMaterialParametersGetRoughnessScale(uint64_t a1, _DWORD *a2)
{
  uint64_t v3;
  unsigned int v4;

  v3 = re::ecs2::EntityComponentCollection::get((re::ecs2::EntityComponentCollection *)(a1 + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::PbrMaterialParametersComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType);
  v4 = *(_DWORD *)(v3 + 516);
  if ((v4 & 8) != 0)
    *a2 = *(_DWORD *)(v3 + 396);
  return (v4 >> 3) & 1;
}

uint64_t REPbrMaterialParametersSetRoughnessTexture(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  __int128 v4;
  uint64_t v5;
  __int128 v7;
  uint64_t v8;

  v3 = re::ecs2::EntityComponentCollection::get((re::ecs2::EntityComponentCollection *)(a1 + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::PbrMaterialParametersComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType);
  re::AssetAPIHelper::assetHandleCreate(a2, (uint64_t *)&v7);
  v4 = *(_OWORD *)(v3 + 128);
  *(_OWORD *)(v3 + 128) = v7;
  v7 = v4;
  v5 = *(_QWORD *)(v3 + 144);
  *(_QWORD *)(v3 + 144) = v8;
  v8 = v5;
  re::AssetHandle::~AssetHandle((re::AssetHandle *)&v7);
  return re::ecs2::Component::enqueueMarkDirty(v3);
}

uint64_t REPbrMaterialParametersGetRoughnessTexture(uint64_t a1)
{
  return *(_QWORD *)(re::ecs2::EntityComponentCollection::get((re::ecs2::EntityComponentCollection *)(a1 + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::PbrMaterialParametersComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType)+ 128);
}

uint64_t REPbrMaterialParametersSetEmissiveColor(uint64_t a1, unsigned int a2, int8x16_t a3)
{
  uint64_t v4;
  int64x2_t v5;
  int32x2_t v6;
  int8x16_t v7;
  int8x16_t v8;

  v4 = re::ecs2::EntityComponentCollection::get((re::ecs2::EntityComponentCollection *)(a1 + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::PbrMaterialParametersComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType);
  v5.i64[0] = a3.u32[1];
  v5.i64[1] = a2;
  v6 = vzip1_s32(*(int32x2_t *)a3.i8, (int32x2_t)*(_OWORD *)&vextq_s8(a3, a3, 8uLL));
  v7.i64[0] = v6.u32[0];
  v7.i64[1] = v6.u32[1];
  v8 = vorrq_s8((int8x16_t)vshlq_n_s64(v5, 0x20uLL), v7);
  re::PbrMaterialParameters::setValue<re::ColorGamut3F>(v4 + 32, v4 + 400, v8.i64[0], v8.i64[1], 4);
  return re::ecs2::Component::enqueueMarkDirty(v4);
}

uint64_t REPbrMaterialParametersClearEmissiveColor(uint64_t a1)
{
  uint64_t result;
  int v2;

  result = re::ecs2::EntityComponentCollection::get((re::ecs2::EntityComponentCollection *)(a1 + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::PbrMaterialParametersComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType);
  v2 = *(_DWORD *)(result + 516);
  *(_DWORD *)(result + 516) = v2 & 0xFFFFFFEF;
  *(_DWORD *)(result + 520) |= v2;
  return result;
}

uint64_t REPbrMaterialParametersGetEmissiveColor(uint64_t a1, _OWORD *a2, _BYTE *a3)
{
  uint64_t v5;
  __int128 v6;
  unsigned int v7;
  uint64_t v8;

  v5 = re::ecs2::EntityComponentCollection::get((re::ecs2::EntityComponentCollection *)(a1 + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::PbrMaterialParametersComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType);
  v7 = *(_DWORD *)(v5 + 516);
  if ((v7 & 0x10) != 0)
  {
    v8 = *(_QWORD *)(v5 + 408);
    *(_QWORD *)&v6 = *(_QWORD *)(v5 + 400);
    DWORD2(v6) = v8;
    *a2 = v6;
    *a3 = BYTE4(v8);
  }
  return (v7 >> 4) & 1;
}

uint64_t REPbrMaterialParametersSetEmissiveScale(uint64_t a1, float a2)
{
  uint64_t v3;
  int v4;
  int v5;

  v3 = re::ecs2::EntityComponentCollection::get((re::ecs2::EntityComponentCollection *)(a1 + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::PbrMaterialParametersComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType);
  if (*(float *)(v3 + 416) == a2)
  {
    v4 = *(_DWORD *)(v3 + 520);
  }
  else
  {
    *(float *)(v3 + 416) = a2;
    v4 = *(_DWORD *)(v3 + 520) | 0x20;
  }
  v5 = *(_DWORD *)(v3 + 516);
  *(_DWORD *)(v3 + 516) = v5 | 0x20;
  *(_DWORD *)(v3 + 520) = v5 | v4;
  return re::ecs2::Component::enqueueMarkDirty(v3);
}

uint64_t REPbrMaterialParametersClearEmissiveScale(uint64_t a1)
{
  uint64_t result;
  int v2;

  result = re::ecs2::EntityComponentCollection::get((re::ecs2::EntityComponentCollection *)(a1 + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::PbrMaterialParametersComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType);
  v2 = *(_DWORD *)(result + 516);
  *(_DWORD *)(result + 516) = v2 & 0xFFFFFFDF;
  *(_DWORD *)(result + 520) |= v2;
  return result;
}

uint64_t REPbrMaterialParametersGetEmissiveScale(uint64_t a1, _DWORD *a2)
{
  uint64_t v3;
  unsigned int v4;

  v3 = re::ecs2::EntityComponentCollection::get((re::ecs2::EntityComponentCollection *)(a1 + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::PbrMaterialParametersComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType);
  v4 = *(_DWORD *)(v3 + 516);
  if ((v4 & 0x20) != 0)
    *a2 = *(_DWORD *)(v3 + 416);
  return (v4 >> 5) & 1;
}

uint64_t REPbrMaterialParametersSetEmissiveTexture(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  __int128 v4;
  uint64_t v5;
  __int128 v7;
  uint64_t v8;

  v3 = re::ecs2::EntityComponentCollection::get((re::ecs2::EntityComponentCollection *)(a1 + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::PbrMaterialParametersComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType);
  re::AssetAPIHelper::assetHandleCreate(a2, (uint64_t *)&v7);
  v4 = *(_OWORD *)(v3 + 80);
  *(_OWORD *)(v3 + 80) = v7;
  v7 = v4;
  v5 = *(_QWORD *)(v3 + 96);
  *(_QWORD *)(v3 + 96) = v8;
  v8 = v5;
  re::AssetHandle::~AssetHandle((re::AssetHandle *)&v7);
  return re::ecs2::Component::enqueueMarkDirty(v3);
}

uint64_t REPbrMaterialParametersGetEmissiveTexture(uint64_t a1)
{
  return *(_QWORD *)(re::ecs2::EntityComponentCollection::get((re::ecs2::EntityComponentCollection *)(a1 + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::PbrMaterialParametersComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType)+ 80);
}

uint64_t REPbrMaterialParametersSetSpecularScale(uint64_t a1, float a2)
{
  uint64_t v3;
  int v4;
  int v5;

  v3 = re::ecs2::EntityComponentCollection::get((re::ecs2::EntityComponentCollection *)(a1 + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::PbrMaterialParametersComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType);
  if (*(float *)(v3 + 392) == a2)
  {
    v4 = *(_DWORD *)(v3 + 520);
  }
  else
  {
    *(float *)(v3 + 392) = a2;
    v4 = *(_DWORD *)(v3 + 520) | 4;
  }
  v5 = *(_DWORD *)(v3 + 516);
  *(_DWORD *)(v3 + 516) = v5 | 4;
  *(_DWORD *)(v3 + 520) = v5 | v4;
  return re::ecs2::Component::enqueueMarkDirty(v3);
}

uint64_t REPbrMaterialParametersClearSpecularScale(uint64_t a1)
{
  uint64_t result;
  int v2;

  result = re::ecs2::EntityComponentCollection::get((re::ecs2::EntityComponentCollection *)(a1 + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::PbrMaterialParametersComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType);
  v2 = *(_DWORD *)(result + 516);
  *(_DWORD *)(result + 516) = v2 & 0xFFFFFFFB;
  *(_DWORD *)(result + 520) |= v2;
  return result;
}

uint64_t REPbrMaterialParametersGetSpecularScale(uint64_t a1, _DWORD *a2)
{
  uint64_t v3;
  unsigned int v4;

  v3 = re::ecs2::EntityComponentCollection::get((re::ecs2::EntityComponentCollection *)(a1 + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::PbrMaterialParametersComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType);
  v4 = *(_DWORD *)(v3 + 516);
  if ((v4 & 4) != 0)
    *a2 = *(_DWORD *)(v3 + 392);
  return (v4 >> 2) & 1;
}

uint64_t REPbrMaterialParametersSetSpecularTexture(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  __int128 v4;
  uint64_t v5;
  __int128 v7;
  uint64_t v8;

  v3 = re::ecs2::EntityComponentCollection::get((re::ecs2::EntityComponentCollection *)(a1 + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::PbrMaterialParametersComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType);
  re::AssetAPIHelper::assetHandleCreate(a2, (uint64_t *)&v7);
  v4 = *(_OWORD *)(v3 + 152);
  *(_OWORD *)(v3 + 152) = v7;
  v7 = v4;
  v5 = *(_QWORD *)(v3 + 168);
  *(_QWORD *)(v3 + 168) = v8;
  v8 = v5;
  re::AssetHandle::~AssetHandle((re::AssetHandle *)&v7);
  return re::ecs2::Component::enqueueMarkDirty(v3);
}

uint64_t REPbrMaterialParametersGetSpecularTexture(uint64_t a1)
{
  return *(_QWORD *)(re::ecs2::EntityComponentCollection::get((re::ecs2::EntityComponentCollection *)(a1 + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::PbrMaterialParametersComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType)+ 152);
}

uint64_t REPbrMaterialParametersSetOpacity(uint64_t a1, float a2)
{
  uint64_t v3;
  int v4;
  int v5;

  v3 = re::ecs2::EntityComponentCollection::get((re::ecs2::EntityComponentCollection *)(a1 + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::PbrMaterialParametersComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType);
  if (*(float *)(v3 + 380) == a2)
  {
    v4 = *(_DWORD *)(v3 + 520);
  }
  else
  {
    *(float *)(v3 + 380) = a2;
    v4 = *(_DWORD *)(v3 + 520) | 1;
  }
  v5 = *(_DWORD *)(v3 + 516);
  *(_DWORD *)(v3 + 516) = v5 | 1;
  *(_DWORD *)(v3 + 520) = v5 | v4;
  return re::ecs2::Component::enqueueMarkDirty(v3);
}

uint64_t REPbrMaterialParametersGetOpacity(uint64_t a1, _DWORD *a2)
{
  uint64_t v3;
  int v4;

  v3 = re::ecs2::EntityComponentCollection::get((re::ecs2::EntityComponentCollection *)(a1 + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::PbrMaterialParametersComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType);
  v4 = *(_DWORD *)(v3 + 516);
  if ((v4 & 1) != 0)
    *a2 = *(_DWORD *)(v3 + 380);
  return v4 & 1;
}

uint64_t REPbrMaterialParametersSetOpacityTexture(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  __int128 v4;
  uint64_t v5;
  __int128 v7;
  uint64_t v8;

  v3 = re::ecs2::EntityComponentCollection::get((re::ecs2::EntityComponentCollection *)(a1 + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::PbrMaterialParametersComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType);
  re::AssetAPIHelper::assetHandleCreate(a2, (uint64_t *)&v7);
  v4 = *(_OWORD *)(v3 + 200);
  *(_OWORD *)(v3 + 200) = v7;
  v7 = v4;
  v5 = *(_QWORD *)(v3 + 216);
  *(_QWORD *)(v3 + 216) = v8;
  v8 = v5;
  re::AssetHandle::~AssetHandle((re::AssetHandle *)&v7);
  return re::ecs2::Component::enqueueMarkDirty(v3);
}

uint64_t REPbrMaterialParametersGetOpacityTexture(uint64_t a1)
{
  return *(_QWORD *)(re::ecs2::EntityComponentCollection::get((re::ecs2::EntityComponentCollection *)(a1 + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::PbrMaterialParametersComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType)+ 200);
}

uint64_t REPbrMaterialParametersGetBlendingType(uint64_t a1)
{
  return *(unsigned __int8 *)(re::ecs2::EntityComponentCollection::get((re::ecs2::EntityComponentCollection *)(a1 + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::PbrMaterialParametersComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType)+ 512);
}

uint64_t REPbrMaterialParametersHasClearcoat(uint64_t a1)
{
  return *(unsigned __int8 *)(re::ecs2::EntityComponentCollection::get((re::ecs2::EntityComponentCollection *)(a1 + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::PbrMaterialParametersComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType)+ 513);
}

uint64_t REPbrMaterialParametersIsAnisotropic(uint64_t a1)
{
  return *(unsigned __int8 *)(re::ecs2::EntityComponentCollection::get((re::ecs2::EntityComponentCollection *)(a1 + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::PbrMaterialParametersComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType)+ 514);
}

uint64_t REPbrMaterialParametersHasSheen(uint64_t a1)
{
  return *(unsigned __int8 *)(re::ecs2::EntityComponentCollection::get((re::ecs2::EntityComponentCollection *)(a1 + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::PbrMaterialParametersComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType)+ 515);
}

uint64_t REPbrMaterialParametersSetClearcoatScale(uint64_t a1, float a2)
{
  uint64_t v3;
  int v4;
  int v5;

  v3 = re::ecs2::EntityComponentCollection::get((re::ecs2::EntityComponentCollection *)(a1 + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::PbrMaterialParametersComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType);
  if (*(float *)(v3 + 424) == a2)
  {
    v4 = *(_DWORD *)(v3 + 520);
  }
  else
  {
    *(float *)(v3 + 424) = a2;
    v4 = *(_DWORD *)(v3 + 520) | 0x80;
  }
  v5 = *(_DWORD *)(v3 + 516);
  *(_DWORD *)(v3 + 516) = v5 | 0x80;
  *(_DWORD *)(v3 + 520) = v5 | v4;
  return re::ecs2::Component::enqueueMarkDirty(v3);
}

uint64_t REPbrMaterialParametersClearClearcoatScale(uint64_t a1)
{
  uint64_t result;
  int v2;

  result = re::ecs2::EntityComponentCollection::get((re::ecs2::EntityComponentCollection *)(a1 + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::PbrMaterialParametersComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType);
  v2 = *(_DWORD *)(result + 516);
  *(_DWORD *)(result + 516) = v2 & 0xFFFFFF7F;
  *(_DWORD *)(result + 520) |= v2;
  return result;
}

uint64_t REPbrMaterialParametersGetClearcoatScale(uint64_t a1, _DWORD *a2)
{
  uint64_t v3;
  unsigned int v4;

  v3 = re::ecs2::EntityComponentCollection::get((re::ecs2::EntityComponentCollection *)(a1 + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::PbrMaterialParametersComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType);
  v4 = *(_DWORD *)(v3 + 516);
  if ((v4 & 0x80) != 0)
    *a2 = *(_DWORD *)(v3 + 424);
  return (v4 >> 7) & 1;
}

uint64_t REPbrMaterialParametersSetClearcoatTexture(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  __int128 v4;
  uint64_t v5;
  __int128 v7;
  uint64_t v8;

  v3 = re::ecs2::EntityComponentCollection::get((re::ecs2::EntityComponentCollection *)(a1 + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::PbrMaterialParametersComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType);
  re::AssetAPIHelper::assetHandleCreate(a2, (uint64_t *)&v7);
  v4 = *(_OWORD *)(v3 + 296);
  *(_OWORD *)(v3 + 296) = v7;
  v7 = v4;
  v5 = *(_QWORD *)(v3 + 312);
  *(_QWORD *)(v3 + 312) = v8;
  v8 = v5;
  re::AssetHandle::~AssetHandle((re::AssetHandle *)&v7);
  return re::ecs2::Component::enqueueMarkDirty(v3);
}

uint64_t REPbrMaterialParametersGetClearcoatTexture(uint64_t a1)
{
  return *(_QWORD *)(re::ecs2::EntityComponentCollection::get((re::ecs2::EntityComponentCollection *)(a1 + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::PbrMaterialParametersComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType)+ 296);
}

uint64_t REPbrMaterialParametersSetClearcoatRoughnessScale(uint64_t a1, float a2)
{
  uint64_t v3;
  int v4;
  int v5;

  v3 = re::ecs2::EntityComponentCollection::get((re::ecs2::EntityComponentCollection *)(a1 + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::PbrMaterialParametersComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType);
  if (*(float *)(v3 + 428) == a2)
  {
    v4 = *(_DWORD *)(v3 + 520);
  }
  else
  {
    *(float *)(v3 + 428) = a2;
    v4 = *(_DWORD *)(v3 + 520) | 0x100;
  }
  v5 = *(_DWORD *)(v3 + 516);
  *(_DWORD *)(v3 + 516) = v5 | 0x100;
  *(_DWORD *)(v3 + 520) = v5 | v4;
  return re::ecs2::Component::enqueueMarkDirty(v3);
}

uint64_t REPbrMaterialParametersClearClearcoatRoughnessScale(uint64_t a1)
{
  uint64_t result;
  int v2;

  result = re::ecs2::EntityComponentCollection::get((re::ecs2::EntityComponentCollection *)(a1 + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::PbrMaterialParametersComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType);
  v2 = *(_DWORD *)(result + 516);
  *(_DWORD *)(result + 516) = v2 & 0xFFFFFEFF;
  *(_DWORD *)(result + 520) |= v2;
  return result;
}

uint64_t REPbrMaterialParametersGetClearcoatRoughnessScale(uint64_t a1, _DWORD *a2)
{
  uint64_t v3;
  unsigned int v4;

  v3 = re::ecs2::EntityComponentCollection::get((re::ecs2::EntityComponentCollection *)(a1 + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::PbrMaterialParametersComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType);
  v4 = *(_DWORD *)(v3 + 516);
  if ((v4 & 0x100) != 0)
    *a2 = *(_DWORD *)(v3 + 428);
  return (v4 >> 8) & 1;
}

uint64_t REPbrMaterialParametersSetClearcoatRoughnessTexture(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  __int128 v4;
  uint64_t v5;
  __int128 v7;
  uint64_t v8;

  v3 = re::ecs2::EntityComponentCollection::get((re::ecs2::EntityComponentCollection *)(a1 + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::PbrMaterialParametersComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType);
  re::AssetAPIHelper::assetHandleCreate(a2, (uint64_t *)&v7);
  v4 = *(_OWORD *)(v3 + 272);
  *(_OWORD *)(v3 + 272) = v7;
  v7 = v4;
  v5 = *(_QWORD *)(v3 + 288);
  *(_QWORD *)(v3 + 288) = v8;
  v8 = v5;
  re::AssetHandle::~AssetHandle((re::AssetHandle *)&v7);
  return re::ecs2::Component::enqueueMarkDirty(v3);
}

uint64_t REPbrMaterialParametersGetClearcoatRoughnessTexture(uint64_t a1)
{
  return *(_QWORD *)(re::ecs2::EntityComponentCollection::get((re::ecs2::EntityComponentCollection *)(a1 + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::PbrMaterialParametersComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType)+ 272);
}

uint64_t REPbrMaterialParametersSetClearcoatNormalTexture(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  __int128 v4;
  uint64_t v5;
  __int128 v7;
  uint64_t v8;

  v3 = re::ecs2::EntityComponentCollection::get((re::ecs2::EntityComponentCollection *)(a1 + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::PbrMaterialParametersComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType);
  re::AssetAPIHelper::assetHandleCreate(a2, (uint64_t *)&v7);
  v4 = *(_OWORD *)(v3 + 344);
  *(_OWORD *)(v3 + 344) = v7;
  v7 = v4;
  v5 = *(_QWORD *)(v3 + 360);
  *(_QWORD *)(v3 + 360) = v8;
  v8 = v5;
  re::AssetHandle::~AssetHandle((re::AssetHandle *)&v7);
  return re::ecs2::Component::enqueueMarkDirty(v3);
}

uint64_t REPbrMaterialParametersGetClearcoatNormalTexture(uint64_t a1)
{
  return *(_QWORD *)(re::ecs2::EntityComponentCollection::get((re::ecs2::EntityComponentCollection *)(a1 + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::PbrMaterialParametersComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType)+ 344);
}

uint64_t REPbrMaterialParametersSetAnisotropyLevelScale(uint64_t a1, float a2)
{
  uint64_t v3;
  int v4;
  int v5;

  v3 = re::ecs2::EntityComponentCollection::get((re::ecs2::EntityComponentCollection *)(a1 + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::PbrMaterialParametersComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType);
  if (*(float *)(v3 + 432) == a2)
  {
    v4 = *(_DWORD *)(v3 + 520);
  }
  else
  {
    *(float *)(v3 + 432) = a2;
    v4 = *(_DWORD *)(v3 + 520) | 0x200;
  }
  v5 = *(_DWORD *)(v3 + 516);
  *(_DWORD *)(v3 + 516) = v5 | 0x200;
  *(_DWORD *)(v3 + 520) = v5 | v4;
  return re::ecs2::Component::enqueueMarkDirty(v3);
}

uint64_t REPbrMaterialParametersClearAnisotropyLevelScale(uint64_t a1)
{
  uint64_t result;
  int v2;

  result = re::ecs2::EntityComponentCollection::get((re::ecs2::EntityComponentCollection *)(a1 + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::PbrMaterialParametersComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType);
  v2 = *(_DWORD *)(result + 516);
  *(_DWORD *)(result + 516) = v2 & 0xFFFFFDFF;
  *(_DWORD *)(result + 520) |= v2;
  return result;
}

uint64_t REPbrMaterialParametersGetAnisotropyLevelScale(uint64_t a1, _DWORD *a2)
{
  uint64_t v3;
  unsigned int v4;

  v3 = re::ecs2::EntityComponentCollection::get((re::ecs2::EntityComponentCollection *)(a1 + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::PbrMaterialParametersComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType);
  v4 = *(_DWORD *)(v3 + 516);
  if ((v4 & 0x200) != 0)
    *a2 = *(_DWORD *)(v3 + 432);
  return (v4 >> 9) & 1;
}

uint64_t REPbrMaterialParametersSetAnisotropyLevelTexture(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  __int128 v4;
  uint64_t v5;
  __int128 v7;
  uint64_t v8;

  v3 = re::ecs2::EntityComponentCollection::get((re::ecs2::EntityComponentCollection *)(a1 + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::PbrMaterialParametersComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType);
  re::AssetAPIHelper::assetHandleCreate(a2, (uint64_t *)&v7);
  v4 = *(_OWORD *)(v3 + 224);
  *(_OWORD *)(v3 + 224) = v7;
  v7 = v4;
  v5 = *(_QWORD *)(v3 + 240);
  *(_QWORD *)(v3 + 240) = v8;
  v8 = v5;
  re::AssetHandle::~AssetHandle((re::AssetHandle *)&v7);
  return re::ecs2::Component::enqueueMarkDirty(v3);
}

uint64_t REPbrMaterialParametersGetAnisotropyLevelTexture(uint64_t a1)
{
  return *(_QWORD *)(re::ecs2::EntityComponentCollection::get((re::ecs2::EntityComponentCollection *)(a1 + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::PbrMaterialParametersComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType)+ 224);
}

uint64_t REPbrMaterialParametersSetAnisotropyAngleScale(uint64_t a1, float a2)
{
  uint64_t v3;
  int v4;
  int v5;

  v3 = re::ecs2::EntityComponentCollection::get((re::ecs2::EntityComponentCollection *)(a1 + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::PbrMaterialParametersComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType);
  if (*(float *)(v3 + 436) == a2)
  {
    v4 = *(_DWORD *)(v3 + 520);
  }
  else
  {
    *(float *)(v3 + 436) = a2;
    v4 = *(_DWORD *)(v3 + 520) | 0x400;
  }
  v5 = *(_DWORD *)(v3 + 516);
  *(_DWORD *)(v3 + 516) = v5 | 0x400;
  *(_DWORD *)(v3 + 520) = v5 | v4;
  return re::ecs2::Component::enqueueMarkDirty(v3);
}

uint64_t REPbrMaterialParametersClearAnisotropyAngleScale(uint64_t a1)
{
  uint64_t result;
  int v2;

  result = re::ecs2::EntityComponentCollection::get((re::ecs2::EntityComponentCollection *)(a1 + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::PbrMaterialParametersComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType);
  v2 = *(_DWORD *)(result + 516);
  *(_DWORD *)(result + 516) = v2 & 0xFFFFFBFF;
  *(_DWORD *)(result + 520) |= v2;
  return result;
}

uint64_t REPbrMaterialParametersGetAnisotropyAngleScale(uint64_t a1, _DWORD *a2)
{
  uint64_t v3;
  unsigned int v4;

  v3 = re::ecs2::EntityComponentCollection::get((re::ecs2::EntityComponentCollection *)(a1 + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::PbrMaterialParametersComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType);
  v4 = *(_DWORD *)(v3 + 516);
  if ((v4 & 0x400) != 0)
    *a2 = *(_DWORD *)(v3 + 436);
  return (v4 >> 10) & 1;
}

uint64_t REPbrMaterialParametersSetAnisotropyAngleTexture(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  __int128 v4;
  uint64_t v5;
  __int128 v7;
  uint64_t v8;

  v3 = re::ecs2::EntityComponentCollection::get((re::ecs2::EntityComponentCollection *)(a1 + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::PbrMaterialParametersComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType);
  re::AssetAPIHelper::assetHandleCreate(a2, (uint64_t *)&v7);
  v4 = *(_OWORD *)(v3 + 248);
  *(_OWORD *)(v3 + 248) = v7;
  v7 = v4;
  v5 = *(_QWORD *)(v3 + 264);
  *(_QWORD *)(v3 + 264) = v8;
  v8 = v5;
  re::AssetHandle::~AssetHandle((re::AssetHandle *)&v7);
  return re::ecs2::Component::enqueueMarkDirty(v3);
}

uint64_t REPbrMaterialParametersGetAnisotropyAngleTexture(uint64_t a1)
{
  return *(_QWORD *)(re::ecs2::EntityComponentCollection::get((re::ecs2::EntityComponentCollection *)(a1 + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::PbrMaterialParametersComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType)+ 248);
}

uint64_t REPbrMaterialParametersSetSheenColorTint(uint64_t a1, unsigned int a2, int8x16_t a3)
{
  uint64_t v4;
  int64x2_t v5;
  int32x2_t v6;
  int8x16_t v7;
  int8x16_t v8;

  v4 = re::ecs2::EntityComponentCollection::get((re::ecs2::EntityComponentCollection *)(a1 + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::PbrMaterialParametersComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType);
  v5.i64[0] = a3.u32[1];
  v5.i64[1] = a2;
  v6 = vzip1_s32(*(int32x2_t *)a3.i8, (int32x2_t)*(_OWORD *)&vextq_s8(a3, a3, 8uLL));
  v7.i64[0] = v6.u32[0];
  v7.i64[1] = v6.u32[1];
  v8 = vorrq_s8((int8x16_t)vshlq_n_s64(v5, 0x20uLL), v7);
  re::PbrMaterialParameters::setValue<re::ColorGamut3F>(v4 + 32, v4 + 440, v8.i64[0], v8.i64[1], 11);
  return re::ecs2::Component::enqueueMarkDirty(v4);
}

uint64_t REPbrMaterialParametersClearSheenColorTint(uint64_t a1)
{
  uint64_t result;
  int v2;

  result = re::ecs2::EntityComponentCollection::get((re::ecs2::EntityComponentCollection *)(a1 + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::PbrMaterialParametersComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType);
  v2 = *(_DWORD *)(result + 516);
  *(_DWORD *)(result + 516) = v2 & 0xFFFFF7FF;
  *(_DWORD *)(result + 520) |= v2;
  return result;
}

uint64_t REPbrMaterialParametersGetSheenColorTint(uint64_t a1, _OWORD *a2, _BYTE *a3)
{
  uint64_t v5;
  __int128 v6;
  unsigned int v7;
  uint64_t v8;

  v5 = re::ecs2::EntityComponentCollection::get((re::ecs2::EntityComponentCollection *)(a1 + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::PbrMaterialParametersComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType);
  v7 = *(_DWORD *)(v5 + 516);
  if ((v7 & 0x800) != 0)
  {
    v8 = *(_QWORD *)(v5 + 448);
    *(_QWORD *)&v6 = *(_QWORD *)(v5 + 440);
    DWORD2(v6) = v8;
    *a2 = v6;
    *a3 = BYTE4(v8);
  }
  return (v7 >> 11) & 1;
}

uint64_t REPbrMaterialParametersSetSheenColorTexture(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  __int128 v4;
  uint64_t v5;
  __int128 v7;
  uint64_t v8;

  v3 = re::ecs2::EntityComponentCollection::get((re::ecs2::EntityComponentCollection *)(a1 + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::PbrMaterialParametersComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType);
  re::AssetAPIHelper::assetHandleCreate(a2, (uint64_t *)&v7);
  v4 = *(_OWORD *)(v3 + 320);
  *(_OWORD *)(v3 + 320) = v7;
  v7 = v4;
  v5 = *(_QWORD *)(v3 + 336);
  *(_QWORD *)(v3 + 336) = v8;
  v8 = v5;
  re::AssetHandle::~AssetHandle((re::AssetHandle *)&v7);
  return re::ecs2::Component::enqueueMarkDirty(v3);
}

uint64_t REPbrMaterialParametersGetSheenColorTexture(uint64_t a1)
{
  return *(_QWORD *)(re::ecs2::EntityComponentCollection::get((re::ecs2::EntityComponentCollection *)(a1 + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::PbrMaterialParametersComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType)+ 320);
}

uint64_t REPbrMaterialParametersSetUVTransform0(uint64_t a1, float32x4_t a2)
{
  float32x4_t *v2;
  int v3;
  __int32 v4;

  v2 = (float32x4_t *)re::ecs2::EntityComponentCollection::get((re::ecs2::EntityComponentCollection *)(a1 + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::PbrMaterialParametersComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType);
  if ((vminvq_u32((uint32x4_t)vceqq_f32(v2[29], a2)) & 0x80000000) != 0)
  {
    v3 = v2[32].i32[2];
  }
  else
  {
    v2[29] = a2;
    v3 = v2[32].i32[2] | 0x1000;
  }
  v4 = v2[32].i32[1];
  v2[32].i32[1] = v4 | 0x1000;
  v2[32].i32[2] = v4 | v3;
  return re::ecs2::Component::enqueueMarkDirty((uint64_t)v2);
}

uint64_t REPbrMaterialParametersClearUVTransform0(uint64_t a1)
{
  uint64_t result;
  int v2;

  result = re::ecs2::EntityComponentCollection::get((re::ecs2::EntityComponentCollection *)(a1 + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::PbrMaterialParametersComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType);
  v2 = *(_DWORD *)(result + 516);
  *(_DWORD *)(result + 516) = v2 & 0xFFFFEFFF;
  *(_DWORD *)(result + 520) |= v2;
  return result;
}

uint64_t REPbrMaterialParametersGetUVTransform0(uint64_t a1, _QWORD *a2)
{
  uint64_t v3;
  unsigned int v4;
  uint64_t v5;

  v3 = re::ecs2::EntityComponentCollection::get((re::ecs2::EntityComponentCollection *)(a1 + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::PbrMaterialParametersComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType);
  v4 = *(_DWORD *)(v3 + 516);
  if ((v4 & 0x1000) != 0)
  {
    v5 = *(_QWORD *)(v3 + 472);
    *a2 = *(_QWORD *)(v3 + 464);
    a2[1] = v5;
  }
  return (v4 >> 12) & 1;
}

uint64_t REPbrMaterialParametersSetUVOffset0(uint64_t a1, float32x2_t a2)
{
  float32x2_t *v3;
  uint32x2_t v4;
  int v5;
  __int32 v6;

  v3 = (float32x2_t *)re::ecs2::EntityComponentCollection::get((re::ecs2::EntityComponentCollection *)(a1 + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::PbrMaterialParametersComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType);
  v4 = (uint32x2_t)vceq_f32(v3[62], a2);
  if ((vpmin_u32(v4, v4).u32[0] & 0x80000000) != 0)
  {
    v5 = v3[65].i32[0];
  }
  else
  {
    v3[62] = a2;
    v5 = v3[65].i32[0] | 0x4000;
  }
  v6 = v3[64].i32[1];
  v3[64].i32[1] = v6 | 0x4000;
  v3[65].i32[0] = v6 | v5;
  return re::ecs2::Component::enqueueMarkDirty((uint64_t)v3);
}

uint64_t REPbrMaterialParametersClearUVOffset0(uint64_t a1)
{
  uint64_t result;
  int v2;

  result = re::ecs2::EntityComponentCollection::get((re::ecs2::EntityComponentCollection *)(a1 + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::PbrMaterialParametersComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType);
  v2 = *(_DWORD *)(result + 516);
  *(_DWORD *)(result + 516) = v2 & 0xFFFFBFFF;
  *(_DWORD *)(result + 520) |= v2;
  return result;
}

uint64_t REPbrMaterialParametersGetUVOffset0(uint64_t a1, _QWORD *a2)
{
  uint64_t v3;
  unsigned int v4;

  v3 = re::ecs2::EntityComponentCollection::get((re::ecs2::EntityComponentCollection *)(a1 + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::PbrMaterialParametersComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType);
  v4 = *(_DWORD *)(v3 + 516);
  if ((v4 & 0x4000) != 0)
    *a2 = *(_QWORD *)(v3 + 496);
  return (v4 >> 14) & 1;
}

uint64_t REPbrMaterialParametersSetUVTransform1(uint64_t a1, float32x4_t a2)
{
  float32x4_t *v2;
  int v3;
  __int32 v4;

  v2 = (float32x4_t *)re::ecs2::EntityComponentCollection::get((re::ecs2::EntityComponentCollection *)(a1 + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::PbrMaterialParametersComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType);
  if ((vminvq_u32((uint32x4_t)vceqq_f32(v2[30], a2)) & 0x80000000) != 0)
  {
    v3 = v2[32].i32[2];
  }
  else
  {
    v2[30] = a2;
    v3 = v2[32].i32[2] | 0x2000;
  }
  v4 = v2[32].i32[1];
  v2[32].i32[1] = v4 | 0x2000;
  v2[32].i32[2] = v4 | v3;
  return re::ecs2::Component::enqueueMarkDirty((uint64_t)v2);
}

uint64_t REPbrMaterialParametersClearUVTransform1(uint64_t a1)
{
  uint64_t result;
  int v2;

  result = re::ecs2::EntityComponentCollection::get((re::ecs2::EntityComponentCollection *)(a1 + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::PbrMaterialParametersComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType);
  v2 = *(_DWORD *)(result + 516);
  *(_DWORD *)(result + 516) = v2 & 0xFFFFDFFF;
  *(_DWORD *)(result + 520) |= v2;
  return result;
}

uint64_t REPbrMaterialParametersGetUVTransform1(uint64_t a1, _QWORD *a2)
{
  uint64_t v3;
  unsigned int v4;
  uint64_t v5;

  v3 = re::ecs2::EntityComponentCollection::get((re::ecs2::EntityComponentCollection *)(a1 + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::PbrMaterialParametersComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType);
  v4 = *(_DWORD *)(v3 + 516);
  if ((v4 & 0x2000) != 0)
  {
    v5 = *(_QWORD *)(v3 + 488);
    *a2 = *(_QWORD *)(v3 + 480);
    a2[1] = v5;
  }
  return (v4 >> 13) & 1;
}

uint64_t REPbrMaterialParametersSetUVOffset1(uint64_t a1, float32x2_t a2)
{
  float32x2_t *v3;
  uint32x2_t v4;
  int v5;
  __int32 v6;

  v3 = (float32x2_t *)re::ecs2::EntityComponentCollection::get((re::ecs2::EntityComponentCollection *)(a1 + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::PbrMaterialParametersComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType);
  v4 = (uint32x2_t)vceq_f32(v3[63], a2);
  if ((vpmin_u32(v4, v4).u32[0] & 0x80000000) != 0)
  {
    v5 = v3[65].i32[0];
  }
  else
  {
    v3[63] = a2;
    v5 = v3[65].i32[0] | 0x8000;
  }
  v6 = v3[64].i32[1];
  v3[64].i32[1] = v6 | 0x8000;
  v3[65].i32[0] = v6 | v5;
  return re::ecs2::Component::enqueueMarkDirty((uint64_t)v3);
}

uint64_t REPbrMaterialParametersClearUVOffset1(uint64_t a1)
{
  uint64_t result;
  int v2;

  result = re::ecs2::EntityComponentCollection::get((re::ecs2::EntityComponentCollection *)(a1 + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::PbrMaterialParametersComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType);
  v2 = *(_DWORD *)(result + 516);
  *(_DWORD *)(result + 516) = v2 & 0xFFFF7FFF;
  *(_DWORD *)(result + 520) |= v2;
  return result;
}

uint64_t REPbrMaterialParametersGetUVOffset1(uint64_t a1, _QWORD *a2)
{
  uint64_t v3;
  unsigned int v4;

  v3 = re::ecs2::EntityComponentCollection::get((re::ecs2::EntityComponentCollection *)(a1 + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::PbrMaterialParametersComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType);
  v4 = *(_DWORD *)(v3 + 516);
  if ((v4 & 0x8000) != 0)
    *a2 = *(_QWORD *)(v3 + 504);
  return (v4 >> 15) & 1;
}

uint64_t REPbrMaterialParametersSetNormalTexture(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  __int128 v4;
  uint64_t v5;
  __int128 v7;
  uint64_t v8;

  v3 = re::ecs2::EntityComponentCollection::get((re::ecs2::EntityComponentCollection *)(a1 + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::PbrMaterialParametersComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType);
  re::AssetAPIHelper::assetHandleCreate(a2, (uint64_t *)&v7);
  v4 = *(_OWORD *)(v3 + 176);
  *(_OWORD *)(v3 + 176) = v7;
  v7 = v4;
  v5 = *(_QWORD *)(v3 + 192);
  *(_QWORD *)(v3 + 192) = v8;
  v8 = v5;
  re::AssetHandle::~AssetHandle((re::AssetHandle *)&v7);
  return re::ecs2::Component::enqueueMarkDirty(v3);
}

uint64_t REPbrMaterialParametersGetNormalTexture(uint64_t a1)
{
  return *(_QWORD *)(re::ecs2::EntityComponentCollection::get((re::ecs2::EntityComponentCollection *)(a1 + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::PbrMaterialParametersComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType)+ 176);
}

uint64_t REPbrMaterialParametersGetOpacityThreshold(uint64_t a1, _DWORD *a2)
{
  uint64_t v3;
  unsigned int v4;

  v3 = re::ecs2::EntityComponentCollection::get((re::ecs2::EntityComponentCollection *)(a1 + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::PbrMaterialParametersComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType);
  v4 = *(_DWORD *)(v3 + 516);
  if ((v4 & 0x40) != 0)
    *a2 = *(_DWORD *)(v3 + 420);
  return (v4 >> 6) & 1;
}

uint64_t REPbrMaterialParametersSetOpacityThreshold(uint64_t a1, float a2)
{
  uint64_t v3;
  int v4;
  int v5;

  v3 = re::ecs2::EntityComponentCollection::get((re::ecs2::EntityComponentCollection *)(a1 + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::PbrMaterialParametersComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType);
  if (*(float *)(v3 + 420) == a2)
  {
    v4 = *(_DWORD *)(v3 + 520);
  }
  else
  {
    *(float *)(v3 + 420) = a2;
    v4 = *(_DWORD *)(v3 + 520) | 0x40;
  }
  v5 = *(_DWORD *)(v3 + 516);
  *(_DWORD *)(v3 + 516) = v5 | 0x40;
  *(_DWORD *)(v3 + 520) = v5 | v4;
  return re::ecs2::Component::enqueueMarkDirty(v3);
}

uint64_t REPbrMaterialParametersGetMaterialAsset(uint64_t a1)
{
  return *(_QWORD *)(re::ecs2::EntityComponentCollection::get((re::ecs2::EntityComponentCollection *)(a1 + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::PbrMaterialParametersComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType)+ 528);
}

uint64_t re::PbrMaterialParameters::setValue<re::ColorGamut3F>(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, char a5)
{
  BOOL v6;
  int v7;
  int v8;
  int v9;

  v6 = *(float *)a2 == *(float *)&a3 && *(float *)(a2 + 4) == *((float *)&a3 + 1) && *(float *)(a2 + 8) == *(float *)&a4;
  if (v6 && *(unsigned __int8 *)(a2 + 12) == BYTE4(a4))
  {
    v7 = *(_DWORD *)(result + 488);
    v8 = 1 << a5;
  }
  else
  {
    *(_QWORD *)a2 = a3;
    *(_DWORD *)(a2 + 8) = a4;
    *(_BYTE *)(a2 + 12) = BYTE4(a4);
    v8 = 1 << a5;
    v7 = *(_DWORD *)(result + 488) | (1 << a5);
  }
  v9 = *(_DWORD *)(result + 484);
  *(_DWORD *)(result + 484) = v9 | v8;
  *(_DWORD *)(result + 488) = v9 | v7;
  return result;
}

void *REAudioMixGroupsComponentGetComponentType()
{
  if (re::ecs2::dispatchOnceInitECSComponents(void)::onceToken != -1)
    dispatch_once(&re::ecs2::dispatchOnceInitECSComponents(void)::onceToken, &__block_literal_global_13);
  return re::ecs2::ComponentImpl<re::ecs2::AudioMixGroupsComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType;
}

unint64_t REAudioMixGroupsComponentCreateMixGroupID()
{
  unint64_t result;
  unint64_t __buf;

  for (__buf = 0; __buf < 0x3E8; result = __buf)
    arc4random_buf(&__buf, 8uLL);
  return result;
}

BOOL REAudioMixGroupsComponentHasGroup(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = a2;
  return re::HashTable<unsigned long long,re::AudioMixGroup,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::tryGet(a1 + 32, &v3) != 0;
}

void REAudioMixGroupsComponentUpdateGroup(re::ecs2::AudioMixGroupsComponent *a1, uint64_t a2, char a3, float a4)
{
  uint64_t v7;
  NSObject *v8;
  uint64_t v9;
  uint8_t buf[4];
  uint64_t v11;
  uint64_t v12;

  v12 = *MEMORY[0x24BDAC8D0];
  v9 = a2;
  v7 = re::HashTable<unsigned long long,re::AudioMixGroup,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::tryGet((uint64_t)a1 + 32, &v9);
  if (v7)
  {
    *(float *)(v7 + 104) = a4;
    *(_BYTE *)(v7 + 88) = a3;
    re::ecs2::AudioMixGroupsComponent::markDirtyAndMarkDirtyForNetwork(a1);
  }
  else
  {
    v8 = *re::audioLogObjects(0);
    if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 134217984;
      v11 = v9;
      _os_log_error_impl(&dword_224FE9000, v8, OS_LOG_TYPE_ERROR, "REAudioMixGroupsComponentUpdateGroup could not find a group with id %llu.", buf, 0xCu);
    }
  }
}

void REAudioMixGroupsComponentUpdateGroupGain(re::ecs2::AudioMixGroupsComponent *a1, uint64_t a2, float a3)
{
  uint64_t v5;
  float v6;
  float v7;
  NSObject *v8;
  uint64_t v9;
  uint8_t buf[4];
  uint64_t v11;
  uint64_t v12;

  v12 = *MEMORY[0x24BDAC8D0];
  v9 = a2;
  v5 = re::HashTable<unsigned long long,re::AudioMixGroup,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::tryGet((uint64_t)a1 + 32, &v9);
  if (v5)
  {
    v6 = 15.0;
    if (a3 <= 15.0)
      v6 = a3;
    v7 = fmaxf(v6, -60.0);
    *(float *)(v5 + 112) = v7;
    *(float *)(v5 + 116) = v7;
    *(_DWORD *)(v5 + 108) = 0;
    *(_DWORD *)(v5 + 100) = 0;
    ++*(_DWORD *)(v5 + 124);
    re::ecs2::AudioMixGroupsComponent::markDirtyAndMarkDirtyForNetwork(a1);
  }
  else
  {
    v8 = *re::audioLogObjects(0);
    if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 134217984;
      v11 = v9;
      _os_log_error_impl(&dword_224FE9000, v8, OS_LOG_TYPE_ERROR, "REAudioMixGroupsComponentUpdateGroupGain could not find a group with id %llu.", buf, 0xCu);
    }
  }
}

void REAudioMixGroupsComponentFadeGroup(re::ecs2::AudioMixGroupsComponent *a1, unint64_t a2, float a3, double a4)
{
  uint64_t v7;
  uint64_t v8;
  _BOOL4 isMixGroupGainDirty;
  NSObject *v10;
  unint64_t v11;
  uint8_t buf[4];
  unint64_t v13;
  uint64_t v14;

  v14 = *MEMORY[0x24BDAC8D0];
  v11 = a2;
  v7 = re::HashTable<unsigned long long,re::AudioMixGroup,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::tryGet((uint64_t)a1 + 32, (uint64_t *)&v11);
  if (v7)
  {
    v8 = v7;
    isMixGroupGainDirty = re::ecs2::AudioMixGroupsComponent::isMixGroupGainDirty(a1, v11);
    re::AudioMixGroup::fadeToGainWithDuration(v8, a3, a4, isMixGroupGainDirty);
    re::ecs2::AudioMixGroupsComponent::markDirtyAndMarkDirtyForNetwork(a1);
  }
  else
  {
    v10 = *re::audioLogObjects(0);
    if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 134217984;
      v13 = v11;
      _os_log_error_impl(&dword_224FE9000, v10, OS_LOG_TYPE_ERROR, "REAudioMixGroupsComponentFadeGroup could not find a group with id %llu.", buf, 0xCu);
    }
  }
}

void REAudioMixGroupsComponentRemoveGroup(uint64_t a1, unint64_t a2)
{
  unint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unsigned int v8;
  int v9;
  uint64_t v10;
  int v11;

  if (*(_QWORD *)(a1 + 32))
  {
    v3 = 0x94D049BB133111EBLL
       * ((0xBF58476D1CE4E5B9 * (a2 ^ (a2 >> 30))) ^ ((0xBF58476D1CE4E5B9 * (a2 ^ (a2 >> 30))) >> 27));
    v4 = (v3 ^ (v3 >> 31)) % *(unsigned int *)(a1 + 56);
    v5 = *(_QWORD *)(a1 + 40);
    v6 = *(unsigned int *)(v5 + 4 * v4);
    if ((_DWORD)v6 != 0x7FFFFFFF)
    {
      v7 = *(_QWORD *)(a1 + 48);
      if (*(_QWORD *)(v7 + 152 * v6 + 16) == a2)
      {
        *(_DWORD *)(v5 + 4 * v4) = *(_DWORD *)(v7 + 152 * v6 + 8) & 0x7FFFFFFF;
LABEL_8:
        re::HashTable<unsigned long long,re::AudioMixGroup,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::EntryWithHash::free(*(_QWORD *)(a1 + 48) + 152 * v6);
        v10 = *(_QWORD *)(a1 + 48) + 152 * v6;
        v11 = *(_DWORD *)(a1 + 72);
        *(_DWORD *)(v10 + 8) = *(_DWORD *)(v10 + 8) & 0x80000000 | *(_DWORD *)(a1 + 68);
        --*(_DWORD *)(a1 + 60);
        *(_DWORD *)(a1 + 68) = v6;
        *(_DWORD *)(a1 + 72) = v11 + 1;
      }
      else
      {
        while (1)
        {
          v8 = v6;
          v9 = *(_DWORD *)(v7 + 152 * v6 + 8);
          v6 = v9 & 0x7FFFFFFF;
          if ((v9 & 0x7FFFFFFF) == 0x7FFFFFFF)
            break;
          if (*(_QWORD *)(v7 + 152 * v6 + 16) == a2)
          {
            *(_DWORD *)(v7 + 152 * v8 + 8) = *(_DWORD *)(v7 + 152 * v8 + 8) & 0x80000000 | *(_DWORD *)(v7 + 152 * v6 + 8) & 0x7FFFFFFF;
            goto LABEL_8;
          }
        }
      }
    }
  }
}

void REAudioMixGroupsComponentRemoveAllGroups(uint64_t a1)
{
  re::HashTable<unsigned long long,re::AudioMixGroup,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::clear(a1 + 32);
}

CFTypeRef REAudioMixGroupsComponentGetGroups(uint64_t a1)
{
  uint64_t v1;
  signed int v3;
  unsigned int v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t i;
  uint64_t v8;
  unint64_t *v9;
  unint64_t v10;
  unsigned int v11;
  unint64_t v12;
  unsigned int v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  __int128 v17;
  __int128 v18;
  void *v19;
  uint64_t v20;
  int *v21;
  int v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  __int128 v26;
  __int128 v27;
  void *v28;
  _BYTE *v29;
  void *v30;
  void *v31;
  double v32;
  void *v33;
  double v34;
  void *v35;
  void *v36;
  unsigned int v37;
  unsigned int v38;
  id v39;
  CFTypeRef v40;
  uint64_t v42;
  char v43;
  _BYTE v44[23];
  __int128 v45;
  _QWORD v46[3];
  int v47;
  uint64_t v48;
  __int128 v49;
  __int128 v50;
  uint64_t v51;
  __int128 v52;
  __int128 v53;
  unsigned int v54;
  uint64_t v55;

  v54 = 0;
  v52 = 0u;
  v53 = 0u;
  v55 = 0x7FFFFFFFLL;
  v1 = *(_QWORD *)(a1 + 32);
  if (v1)
  {
    if (*(_DWORD *)(a1 + 60) <= 3u)
      v3 = 3;
    else
      v3 = *(_DWORD *)(a1 + 60);
    re::HashTable<re::DynamicString,re::OptionalMaterialSamplerData,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::init((uint64_t)&v52, v1, v3);
    re::HashTable<unsigned long long,re::AudioMixGroup,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::clear((uint64_t)&v52);
    v4 = *(_DWORD *)(a1 + 60);
    if (DWORD2(v53) < v4)
      re::HashTable<unsigned long long,re::AudioMixGroup,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::setCapacity((uint64_t)&v52, v4);
    v5 = *(unsigned int *)(a1 + 64);
    if ((_DWORD)v5)
    {
      v6 = 0;
      for (i = 0; i < v5; ++i)
      {
        v8 = *(_QWORD *)(a1 + 48);
        v9 = (unint64_t *)(v8 + v6);
        if ((*(_DWORD *)(v8 + v6 + 8) & 0x80000000) != 0)
        {
          v10 = *v9;
          v11 = v55;
          v12 = *v9 % DWORD2(v53);
          if ((_DWORD)v55 == 0x7FFFFFFF)
          {
            v11 = v54;
            v13 = v54;
            if (v54 == DWORD2(v53))
            {
              re::HashTable<unsigned long long,re::AudioMixGroup,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::setCapacity((uint64_t)&v52, 2 * HIDWORD(v53));
              v13 = v54;
              v12 = v10 % DWORD2(v53);
            }
            v54 = v13 + 1;
            v14 = v53;
            v15 = *(_DWORD *)(v53 + 152 * v11 + 8);
          }
          else
          {
            v14 = v53;
            v15 = *(_DWORD *)(v53 + 152 * v55 + 8);
            LODWORD(v55) = v15 & 0x7FFFFFFF;
          }
          *(_DWORD *)(v14 + 152 * v11 + 8) = v15 | 0x80000000;
          *(_DWORD *)(v53 + 152 * v11 + 8) = *(_DWORD *)(v53 + 152 * v11 + 8) & 0x80000000 | *(_DWORD *)(*((_QWORD *)&v52 + 1) + 4 * v12);
          *(_QWORD *)(v53 + 152 * v11) = v10;
          *(_QWORD *)(v53 + 152 * v11 + 16) = v9[2];
          v16 = v53 + 152 * v11;
          re::DynamicString::DynamicString((re::DynamicString *)(v16 + 24), (const re::DynamicString *)(v9 + 3));
          *(_OWORD *)(v16 + 56) = *(_OWORD *)(v8 + v6 + 56);
          re::DynamicArray<char const*>::DynamicArray(v16 + 72, (uint64_t *)(v8 + v6 + 72));
          v17 = *(_OWORD *)(v8 + v6 + 112);
          v18 = *(_OWORD *)(v8 + v6 + 128);
          *(_QWORD *)(v16 + 144) = *(_QWORD *)(v8 + v6 + 144);
          *(_OWORD *)(v16 + 112) = v17;
          *(_OWORD *)(v16 + 128) = v18;
          *(_DWORD *)(*((_QWORD *)&v52 + 1) + 4 * v12) = v11;
          ++HIDWORD(v53);
          v5 = *(unsigned int *)(a1 + 64);
        }
        v6 += 152;
      }
    }
  }
  objc_msgSend(MEMORY[0x24BDBCEB8], "array");
  v19 = (void *)objc_claimAutoreleasedReturnValue();
  if (v54)
  {
    v20 = 0;
    v21 = (int *)(v53 + 8);
    while (1)
    {
      v22 = *v21;
      v21 += 38;
      if (v22 < 0)
        break;
      if (v54 == ++v20)
      {
        LODWORD(v20) = v54;
        break;
      }
    }
  }
  else
  {
    LODWORD(v20) = 0;
  }
  if (v54 != (_DWORD)v20)
  {
    v23 = v20;
    v24 = v53;
    do
    {
      v25 = v24 + 152 * v23;
      re::DynamicString::DynamicString((re::DynamicString *)&v42, (const re::DynamicString *)(v25 + 24));
      v45 = *(_OWORD *)(v25 + 56);
      re::DynamicArray<char const*>::DynamicArray((uint64_t)v46, (uint64_t *)(v25 + 72));
      v26 = *(_OWORD *)(v25 + 112);
      v27 = *(_OWORD *)(v25 + 128);
      v51 = *(_QWORD *)(v25 + 144);
      v49 = v26;
      v50 = v27;
      objc_msgSend(MEMORY[0x24BDBCED8], "dictionary");
      v28 = (void *)objc_claimAutoreleasedReturnValue();
      if ((v43 & 1) != 0)
        v29 = *(_BYTE **)&v44[7];
      else
        v29 = v44;
      objc_msgSend(MEMORY[0x24BDD17C8], "stringWithCString:encoding:", v29, 4);
      v30 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v28, "setObject:forKey:", v30, CFSTR("Name"));

      objc_msgSend(MEMORY[0x24BDD16E0], "numberWithUnsignedInteger:", (_QWORD)v45);
      v31 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v28, "setObject:forKey:", v31, CFSTR("ID"));

      LODWORD(v32) = HIDWORD(v50);
      objc_msgSend(MEMORY[0x24BDD16E0], "numberWithFloat:", v32);
      v33 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v28, "setObject:forKey:", v33, CFSTR("Gain"));

      LODWORD(v34) = v50;
      objc_msgSend(MEMORY[0x24BDD16E0], "numberWithFloat:", v34);
      v35 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v28, "setObject:forKey:", v35, CFSTR("Speed"));

      objc_msgSend(MEMORY[0x24BDD16E0], "numberWithBool:", v49);
      v36 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v28, "setObject:forKey:", v36, CFSTR("MuteState"));

      objc_msgSend(v19, "addObject:", v28);
      if (v46[0])
      {
        if (v48)
          (*(void (**)(void))(*(_QWORD *)v46[0] + 40))();
        v48 = 0;
        memset(v46, 0, sizeof(v46));
        ++v47;
      }
      if (v42 && (v43 & 1) != 0)
        (*(void (**)(void))(*(_QWORD *)v42 + 40))();
      v24 = v53;
      if (v54 <= (int)v20 + 1)
        v37 = v20 + 1;
      else
        v37 = v54;
      while (1)
      {
        v23 = (v20 + 1);
        if (v37 - 1 == (_DWORD)v20)
          break;
        LODWORD(v20) = v20 + 1;
        v38 = v23;
        if ((*(_DWORD *)(v53 + 152 * v23 + 8) & 0x80000000) != 0)
          goto LABEL_42;
      }
      v38 = v37;
LABEL_42:
      LODWORD(v20) = v38;
    }
    while (v54 != v38);
  }
  v39 = v19;
  v40 = CFAutorelease(v39);

  re::HashTable<unsigned long long,re::AudioMixGroup,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::deinit((uint64_t *)&v52);
  return v40;
}

CFTypeRef REAudioMixGroupsComponentGetGroup(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  NSObject *v6;
  CFTypeRef v7;
  void *v8;
  void *v9;
  double v10;
  void *v11;
  double v12;
  void *v13;
  void *v14;
  id v15;
  uint64_t v17;
  uint8_t buf[4];
  uint64_t v19;
  uint64_t v20;

  v20 = *MEMORY[0x24BDAC8D0];
  v17 = a2;
  v2 = re::HashTable<unsigned long long,re::AudioMixGroup,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::tryGet(a1 + 32, &v17);
  if (v2)
  {
    v3 = v2;
    objc_msgSend(MEMORY[0x24BDBCED8], "dictionary");
    v4 = (void *)objc_claimAutoreleasedReturnValue();
    if ((*(_BYTE *)(v3 + 8) & 1) != 0)
      v5 = *(_QWORD *)(v3 + 16);
    else
      v5 = v3 + 9;
    objc_msgSend(MEMORY[0x24BDD17C8], "stringWithCString:encoding:", v5, 4);
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v4, "setObject:forKey:", v8, CFSTR("Name"));

    objc_msgSend(MEMORY[0x24BDD16E0], "numberWithUnsignedInteger:", *(_QWORD *)(v3 + 32));
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v4, "setObject:forKey:", v9, CFSTR("ID"));

    LODWORD(v10) = *(_DWORD *)(v3 + 116);
    objc_msgSend(MEMORY[0x24BDD16E0], "numberWithFloat:", v10);
    v11 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v4, "setObject:forKey:", v11, CFSTR("Gain"));

    LODWORD(v12) = *(_DWORD *)(v3 + 104);
    objc_msgSend(MEMORY[0x24BDD16E0], "numberWithFloat:", v12);
    v13 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v4, "setObject:forKey:", v13, CFSTR("Speed"));

    objc_msgSend(MEMORY[0x24BDD16E0], "numberWithBool:", *(unsigned __int8 *)(v3 + 88));
    v14 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v4, "setObject:forKey:", v14, CFSTR("MuteState"));

    v15 = v4;
    v7 = CFAutorelease(v15);

  }
  else
  {
    v6 = *re::audioLogObjects(0);
    if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 134217984;
      v19 = v17;
      _os_log_error_impl(&dword_224FE9000, v6, OS_LOG_TYPE_ERROR, "REAudioMixGroupsComponentGetGroup could not find a group with id %llu.", buf, 0xCu);
    }
    return 0;
  }
  return v7;
}

float REAudioMixGroupsComponentGetGroupFadeTargetGain(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  float v3;
  NSObject *v4;
  uint64_t v6;
  uint8_t buf[4];
  uint64_t v8;
  uint64_t v9;

  v9 = *MEMORY[0x24BDAC8D0];
  v6 = a2;
  v2 = re::HashTable<unsigned long long,re::AudioMixGroup,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::tryGet(a1 + 32, &v6);
  if (v2)
    return *(float *)(v2 + 116);
  v4 = *re::audioLogObjects(0);
  v3 = -1.0;
  if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)buf = 134217984;
    v8 = v6;
    _os_log_error_impl(&dword_224FE9000, v4, OS_LOG_TYPE_ERROR, "REAudioMixGroupsComponentGetGroupFadeTargetGain could not find a group with id %llu. The returned value is meaningless.", buf, 0xCu);
  }
  return v3;
}

float REAudioMixGroupsComponentGetGroupFadeDuration(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  float v3;
  NSObject *v4;
  uint64_t v6;
  uint8_t buf[4];
  uint64_t v8;
  uint64_t v9;

  v9 = *MEMORY[0x24BDAC8D0];
  v6 = a2;
  v2 = re::HashTable<unsigned long long,re::AudioMixGroup,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::tryGet(a1 + 32, &v6);
  if (v2)
    return *(float *)(v2 + 108);
  v4 = *re::audioLogObjects(0);
  v3 = -1.0;
  if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)buf = 134217984;
    v8 = v6;
    _os_log_error_impl(&dword_224FE9000, v4, OS_LOG_TYPE_ERROR, "REAudioMixGroupsComponentGetGroupFadeDuration could not find a group with id %llu. The returned value is meaningless.", buf, 0xCu);
  }
  return v3;
}

float REAudioMixGroupsGetGroupSpeed(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  float v3;
  NSObject *v4;
  uint64_t v6;
  uint8_t buf[4];
  uint64_t v8;
  uint64_t v9;

  v9 = *MEMORY[0x24BDAC8D0];
  v6 = a2;
  v2 = re::HashTable<unsigned long long,re::AudioMixGroup,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::tryGet(a1 + 32, &v6);
  if (v2)
    return *(float *)(v2 + 104);
  v4 = *re::audioLogObjects(0);
  v3 = 0.0;
  if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)buf = 134217984;
    v8 = v6;
    _os_log_error_impl(&dword_224FE9000, v4, OS_LOG_TYPE_ERROR, "REAudioMixGroupsGetGroupSpeed could not find a group with id %llu. The returned value is meaningless.", buf, 0xCu);
  }
  return v3;
}

BOOL REAudioMixGroupsGetGroupMuteState(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _BOOL8 result;
  NSObject *v4;
  uint64_t v5;
  uint8_t buf[4];
  uint64_t v7;
  uint64_t v8;

  v8 = *MEMORY[0x24BDAC8D0];
  v5 = a2;
  v2 = re::HashTable<unsigned long long,re::AudioMixGroup,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::tryGet(a1 + 32, &v5);
  if (v2)
    return *(_BYTE *)(v2 + 88) != 0;
  v4 = *re::audioLogObjects(0);
  result = os_log_type_enabled(v4, OS_LOG_TYPE_ERROR);
  if (result)
  {
    *(_DWORD *)buf = 134217984;
    v7 = v5;
    _os_log_error_impl(&dword_224FE9000, v4, OS_LOG_TYPE_ERROR, "REAudioMixGroupsGetGroupMuteState could not find a group with id %llu. The returned value is meaningless.", buf, 0xCu);
    return 0;
  }
  return result;
}

uint64_t REColorManagerGetWorkingColorGamut(unsigned __int8 *a1)
{
  return *a1;
}

uint64_t REColorManagerGetWorkingColorSpace(unsigned __int8 *a1)
{
  return re::ColorHelpers::getCGColorSpaceFromWorkingColorGamut(*a1);
}

uint64_t REColorManagerGetLDRColorSpaceForColorGamut(int a1)
{
  return re::ColorHelpers::getCGColorSpaceForLDRFromColorGamut(a1, 0);
}

uint64_t REColorManagerGetSRGBLDRColorSpaceForColorGamut(int a1)
{
  return re::ColorHelpers::getCGColorSpaceForLDRFromColorGamut(a1, 1);
}

uint64_t REColorManagerGetTargetDisplayColorGamut(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 1);
}

double REColorManagerSetWorkingColorGamut(unsigned __int8 *a1, int a2)
{
  __int128 v3;
  double result;
  _OWORD v5[2];
  __int128 v6;

  if (*a1 != a2)
  {
    *a1 = a2;
    re::ColorHelpers::computeGamutTransformMatrix(a2, a1[1], (uint64_t)v5);
    v3 = v5[1];
    *((_OWORD *)a1 + 1) = v5[0];
    *((_OWORD *)a1 + 2) = v3;
    result = *(double *)&v6;
    *((_OWORD *)a1 + 3) = v6;
  }
  return result;
}

double REColorManagerSetTargetDisplayColorGamut(unsigned __int8 *a1, unsigned int a2)
{
  __int128 v3;
  double result;
  _OWORD v5[2];
  __int128 v6;

  if (a1[1] != a2)
  {
    a1[1] = a2;
    re::ColorHelpers::computeGamutTransformMatrix(*a1, a2, (uint64_t)v5);
    v3 = v5[1];
    *((_OWORD *)a1 + 1) = v5[0];
    *((_OWORD *)a1 + 2) = v3;
    result = *(double *)&v6;
    *((_OWORD *)a1 + 3) = v6;
  }
  return result;
}

uint64_t REColorManagerSetVirtualImmersion(uint64_t result, float a2)
{
  *(float *)(result + 164) = a2;
  return result;
}

float REColorManagerGetVirtualImmersion(uint64_t a1)
{
  return *(float *)(a1 + 164);
}

uint64_t REColorManagerSetVirtualAmbient(uint64_t result, float a2)
{
  *(float *)(result + 168) = a2;
  return result;
}

float REColorManagerGetVirtualAmbient(uint64_t a1)
{
  return *(float *)(a1 + 168);
}

float REColorManagerGetImageStatisticsMin(uint64_t a1)
{
  return *(float *)(a1 + 148);
}

float REColorManagerGetImageStatisticsMax(uint64_t a1)
{
  return *(float *)(a1 + 152);
}

float REColorManagerGetImageStatisticsMean(uint64_t a1)
{
  return *(float *)(a1 + 156);
}

float REColorManagerGetImageStatisticsStdDev(uint64_t a1)
{
  return *(float *)(a1 + 160);
}

double RECGColorToColorGamut(CGColorRef color, _OWORD *a2, _BYTE *a3)
{
  double result;
  __int128 v6;
  char v7;

  re::ColorGamut4F::ColorGamut4F((float32x2_t *)&v6, color, 1);
  result = *(double *)&v6;
  *a2 = v6;
  *a3 = v7;
  return result;
}

CGColorRef RECreateCGColorFromColorGamut(char a1, __n128 a2)
{
  __n128 v3;
  char v4;

  v3 = a2;
  v4 = a1;
  return re::ColorGamut4F::createCGColor((float32x2_t *)&v3);
}

float REColorManagerGetToeStrength(uint64_t a1)
{
  return *(float *)(a1 + 88);
}

double REColorManagerSetToeStrength(uint64_t a1, float a2, uint64_t a3, const re::TonemapUserParameters *a4)
{
  __int128 v4;
  double result;
  _OWORD v6[2];
  _OWORD v7[2];

  v4 = *(_OWORD *)(a1 + 104);
  v6[0] = *(_OWORD *)(a1 + 88);
  v6[1] = v4;
  v7[0] = *(_OWORD *)(a1 + 120);
  *(_OWORD *)((char *)v7 + 12) = *(_OWORD *)(a1 + 132);
  *(float *)v6 = a2;
  *(_QWORD *)&result = re::ColorManager::setTonemapUserParameters((re::ColorManager *)a1, (const re::TonemapUserParameters *)v6, a4).n128_u64[0];
  return result;
}

float REColorManagerGetToeLength(uint64_t a1)
{
  return *(float *)(a1 + 92);
}

double REColorManagerSetToeLength(uint64_t a1, float a2, uint64_t a3, const re::TonemapUserParameters *a4)
{
  __int128 v4;
  double result;
  _OWORD v6[2];
  _OWORD v7[2];

  v4 = *(_OWORD *)(a1 + 104);
  v6[0] = *(_OWORD *)(a1 + 88);
  v6[1] = v4;
  v7[0] = *(_OWORD *)(a1 + 120);
  *(_OWORD *)((char *)v7 + 12) = *(_OWORD *)(a1 + 132);
  *((float *)v6 + 1) = a2;
  *(_QWORD *)&result = re::ColorManager::setTonemapUserParameters((re::ColorManager *)a1, (const re::TonemapUserParameters *)v6, a4).n128_u64[0];
  return result;
}

float REColorManagerGetShoulderStrength(uint64_t a1)
{
  return *(float *)(a1 + 96);
}

double REColorManagerSetShoulderStrength(uint64_t a1, float a2, uint64_t a3, const re::TonemapUserParameters *a4)
{
  __int128 v4;
  double result;
  _OWORD v6[2];
  _OWORD v7[2];

  v4 = *(_OWORD *)(a1 + 104);
  v6[0] = *(_OWORD *)(a1 + 88);
  v6[1] = v4;
  v7[0] = *(_OWORD *)(a1 + 120);
  *(_OWORD *)((char *)v7 + 12) = *(_OWORD *)(a1 + 132);
  *((float *)v6 + 2) = a2;
  *(_QWORD *)&result = re::ColorManager::setTonemapUserParameters((re::ColorManager *)a1, (const re::TonemapUserParameters *)v6, a4).n128_u64[0];
  return result;
}

float REColorManagerGetShoulderLength(uint64_t a1)
{
  return *(float *)(a1 + 100);
}

double REColorManagerSetShoulderLength(uint64_t a1, float a2, uint64_t a3, const re::TonemapUserParameters *a4)
{
  __int128 v4;
  double result;
  _OWORD v6[2];
  _OWORD v7[2];

  v4 = *(_OWORD *)(a1 + 104);
  v6[0] = *(_OWORD *)(a1 + 88);
  v6[1] = v4;
  v7[0] = *(_OWORD *)(a1 + 120);
  *(_OWORD *)((char *)v7 + 12) = *(_OWORD *)(a1 + 132);
  *((float *)v6 + 3) = a2;
  *(_QWORD *)&result = re::ColorManager::setTonemapUserParameters((re::ColorManager *)a1, (const re::TonemapUserParameters *)v6, a4).n128_u64[0];
  return result;
}

float REColorManagerGetShoulderAngle(uint64_t a1)
{
  return *(float *)(a1 + 104);
}

double REColorManagerSetShoulderAngle(uint64_t a1, float a2, uint64_t a3, const re::TonemapUserParameters *a4)
{
  __int128 v4;
  double result;
  __int128 v6;
  __int128 v7;
  _OWORD v8[2];

  v4 = *(_OWORD *)(a1 + 104);
  v6 = *(_OWORD *)(a1 + 88);
  v7 = v4;
  v8[0] = *(_OWORD *)(a1 + 120);
  *(_OWORD *)((char *)v8 + 12) = *(_OWORD *)(a1 + 132);
  *(float *)&v7 = a2;
  *(_QWORD *)&result = re::ColorManager::setTonemapUserParameters((re::ColorManager *)a1, (const re::TonemapUserParameters *)&v6, a4).n128_u64[0];
  return result;
}

float REColorManagerGetGamma(uint64_t a1)
{
  return *(float *)(a1 + 108);
}

double REColorManagerSetGamma(uint64_t a1, float a2, uint64_t a3, const re::TonemapUserParameters *a4)
{
  __int128 v4;
  double result;
  __int128 v6;
  __int128 v7;
  _OWORD v8[2];

  v4 = *(_OWORD *)(a1 + 104);
  v6 = *(_OWORD *)(a1 + 88);
  v7 = v4;
  v8[0] = *(_OWORD *)(a1 + 120);
  *(_OWORD *)((char *)v8 + 12) = *(_OWORD *)(a1 + 132);
  *((float *)&v7 + 1) = a2;
  *(_QWORD *)&result = re::ColorManager::setTonemapUserParameters((re::ColorManager *)a1, (const re::TonemapUserParameters *)&v6, a4).n128_u64[0];
  return result;
}

float REColorManagerGetContrast(uint64_t a1)
{
  return *(float *)(a1 + 112);
}

double REColorManagerSetContrast(uint64_t a1, float a2, uint64_t a3, const re::TonemapUserParameters *a4)
{
  __int128 v4;
  double result;
  __int128 v6;
  __int128 v7;
  _OWORD v8[2];

  v4 = *(_OWORD *)(a1 + 104);
  v6 = *(_OWORD *)(a1 + 88);
  v7 = v4;
  v8[0] = *(_OWORD *)(a1 + 120);
  *(_OWORD *)((char *)v8 + 12) = *(_OWORD *)(a1 + 132);
  *((float *)&v7 + 2) = a2;
  *(_QWORD *)&result = re::ColorManager::setTonemapUserParameters((re::ColorManager *)a1, (const re::TonemapUserParameters *)&v6, a4).n128_u64[0];
  return result;
}

float REColorManagerGetExposure(uint64_t a1)
{
  return *(float *)(a1 + 116);
}

double REColorManagerSetExposure(uint64_t a1, float a2, uint64_t a3, const re::TonemapUserParameters *a4)
{
  __int128 v4;
  double result;
  __int128 v6;
  __int128 v7;
  _OWORD v8[2];

  v4 = *(_OWORD *)(a1 + 104);
  v6 = *(_OWORD *)(a1 + 88);
  v7 = v4;
  v8[0] = *(_OWORD *)(a1 + 120);
  *(_OWORD *)((char *)v8 + 12) = *(_OWORD *)(a1 + 132);
  *((float *)&v7 + 3) = a2;
  *(_QWORD *)&result = re::ColorManager::setTonemapUserParameters((re::ColorManager *)a1, (const re::TonemapUserParameters *)&v6, a4).n128_u64[0];
  return result;
}

uint64_t REColorManagerGetExposureCompensationEnabled(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 120);
}

double REColorManagerSetExposureCompensationEnabled(uint64_t a1, char a2, const re::TonemapUserParameters *a3)
{
  __int128 v3;
  __int128 v4;
  double result;
  _OWORD v6[2];
  _OWORD v7[2];

  v3 = *(_OWORD *)(a1 + 120);
  v4 = *(_OWORD *)(a1 + 104);
  v6[0] = *(_OWORD *)(a1 + 88);
  v6[1] = v4;
  v7[0] = v3;
  *(_OWORD *)((char *)v7 + 12) = *(_OWORD *)(a1 + 132);
  LOBYTE(v7[0]) = a2;
  *(_QWORD *)&result = re::ColorManager::setTonemapUserParameters((re::ColorManager *)a1, (const re::TonemapUserParameters *)v6, a3).n128_u64[0];
  return result;
}

float REColorManagerGetExposureCompensationInputScalar(uint64_t a1)
{
  return *(float *)(a1 + 124);
}

double REColorManagerSetExposureCompensationInputScalar(uint64_t a1, float a2, uint64_t a3, const re::TonemapUserParameters *a4)
{
  __int128 v4;
  __int128 v5;
  double result;
  _OWORD v7[2];
  _OWORD v8[2];

  v4 = *(_OWORD *)(a1 + 120);
  v5 = *(_OWORD *)(a1 + 104);
  v7[0] = *(_OWORD *)(a1 + 88);
  v7[1] = v5;
  v8[0] = v4;
  *(_OWORD *)((char *)v8 + 12) = *(_OWORD *)(a1 + 132);
  *((float *)v8 + 1) = a2;
  *(_QWORD *)&result = re::ColorManager::setTonemapUserParameters((re::ColorManager *)a1, (const re::TonemapUserParameters *)v7, a4).n128_u64[0];
  return result;
}

float REColorManagerGetExposureCompensationTargetScalar(uint64_t a1)
{
  return *(float *)(a1 + 128);
}

double REColorManagerSetExposureCompensationTargetScalar(uint64_t a1, float a2, uint64_t a3, const re::TonemapUserParameters *a4)
{
  __int128 v4;
  __int128 v5;
  double result;
  _OWORD v7[2];
  _OWORD v8[2];

  v4 = *(_OWORD *)(a1 + 120);
  v5 = *(_OWORD *)(a1 + 104);
  v7[0] = *(_OWORD *)(a1 + 88);
  v7[1] = v5;
  v8[0] = v4;
  *(_OWORD *)((char *)v8 + 12) = *(_OWORD *)(a1 + 132);
  *((float *)v8 + 2) = a2;
  *(_QWORD *)&result = re::ColorManager::setTonemapUserParameters((re::ColorManager *)a1, (const re::TonemapUserParameters *)v7, a4).n128_u64[0];
  return result;
}

uint64_t REColorManagerGetRABEnabled(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 132);
}

double REColorManagerSetRABEnabled(uint64_t a1, char a2, const re::TonemapUserParameters *a3)
{
  __int128 v3;
  double result;
  _OWORD v5[2];
  _OWORD v6[2];

  v6[0] = *(_OWORD *)(a1 + 120);
  *(_OWORD *)((char *)v6 + 12) = *(_OWORD *)(a1 + 132);
  v3 = *(_OWORD *)(a1 + 104);
  v5[0] = *(_OWORD *)(a1 + 88);
  v5[1] = v3;
  BYTE12(v6[0]) = a2;
  *(_QWORD *)&result = re::ColorManager::setTonemapUserParameters((re::ColorManager *)a1, (const re::TonemapUserParameters *)v5, a3).n128_u64[0];
  return result;
}

uint64_t REColorManagerGetSystemScalarMode(uint64_t a1)
{
  return *(unsigned int *)(a1 + 136);
}

double REColorManagerSetSystemScalarMode(uint64_t a1, int a2, const re::TonemapUserParameters *a3)
{
  __int128 v3;
  double result;
  _OWORD v5[2];
  _BYTE v6[28];

  *(_OWORD *)&v6[12] = *(_OWORD *)(a1 + 132);
  v3 = *(_OWORD *)(a1 + 104);
  v5[0] = *(_OWORD *)(a1 + 88);
  v5[1] = v3;
  *(_OWORD *)v6 = *(_OWORD *)(a1 + 120);
  *(_DWORD *)&v6[16] = a2;
  *(_QWORD *)&result = re::ColorManager::setTonemapUserParameters((re::ColorManager *)a1, (const re::TonemapUserParameters *)v5, a3).n128_u64[0];
  return result;
}

float REColorManagerGetTargetSDRNits(uint64_t a1)
{
  return *(float *)(a1 + 140);
}

double REColorManagerSetTargetSDRNits(uint64_t a1, float a2, uint64_t a3, const re::TonemapUserParameters *a4)
{
  __int128 v4;
  double result;
  _OWORD v6[2];
  _BYTE v7[28];

  *(_OWORD *)&v7[12] = *(_OWORD *)(a1 + 132);
  v4 = *(_OWORD *)(a1 + 104);
  v6[0] = *(_OWORD *)(a1 + 88);
  v6[1] = v4;
  *(_OWORD *)v7 = *(_OWORD *)(a1 + 120);
  *(float *)&v7[20] = a2;
  *(_QWORD *)&result = re::ColorManager::setTonemapUserParameters((re::ColorManager *)a1, (const re::TonemapUserParameters *)v6, a4).n128_u64[0];
  return result;
}

uint64_t REColorManagerGetTonemapLut(uint64_t a1, void *__dst, unint64_t a3)
{
  uint64_t v3;

  if (a3 < 0x1000)
    return 0xFFFFFFFFLL;
  v3 = 4096;
  memcpy(__dst, (const void *)(a1 + 176), 0x1000uLL);
  return v3;
}

uint64_t REColorManagerGetTonemapInverseLut(uint64_t a1, void *__dst, unint64_t a3)
{
  uint64_t v3;

  if (a3 < 0x1000)
    return 0xFFFFFFFFLL;
  v3 = 4096;
  memcpy(__dst, (const void *)(a1 + 4272), 0x1000uLL);
  return v3;
}

float REColorManagerSetAverageAREnvLightIntensity(uint64_t a1, float a2)
{
  float result;

  result = *(float *)(a1 + 12480) + (float)((float)(a2 - *(float *)(a1 + 12480)) * 0.05);
  *(float *)(a1 + 12480) = result;
  return result;
}

float REColorManagerGetAverageAREnvLightIntensity(uint64_t a1)
{
  return *(float *)(a1 + 12484);
}

void *REHierarchicalTintComponentGetComponentType()
{
  if (re::ecs2::dispatchOnceInitECSComponents(void)::onceToken != -1)
    dispatch_once(&re::ecs2::dispatchOnceInitECSComponents(void)::onceToken, &__block_literal_global_13);
  return re::ecs2::ComponentImpl<re::ecs2::HierarchicalTintComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType;
}

uint64_t REHierarchicalTintComponentSetTintAmount(float *a1, re::ecs2::Component *a2, float a3)
{
  a1[7] = a3;
  re::ecs2::NetworkComponent::markComponentDirty((re::ecs2::NetworkComponent *)a1, a2);
  return re::ecs2::Component::enqueueMarkDirty((uint64_t)a1);
}

float REHierarchicalTintComponentGetTintAmount(uint64_t a1)
{
  return *(float *)(a1 + 28);
}

uint64_t getRenderCallbacksComponent(re::ecs2::Scene *a1)
{
  re::ecs2::Entity *v1;
  uint64_t result;
  NSObject *v3;
  const char *v4;
  int v5;
  const char *v6;
  uint64_t v7;

  v7 = *MEMORY[0x24BDAC8D0];
  if (a1)
  {
    v1 = re::ecs2::ComponentHelper::privateSceneDataEntity(a1, (re::ecs2::Scene *)1);
    if (v1)
    {
      result = re::ecs2::EntityComponentCollection::getOrAdd((re::ecs2::Entity *)((char *)v1 + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::RenderCallbacksComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType);
      if (result)
        return result;
      v3 = *re::graphicsLogObjects(0);
      if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
      {
        v5 = 136315138;
        v6 = "getRenderCallbacksComponent";
        v4 = "%s: invalid component\n";
LABEL_10:
        _os_log_impl(&dword_224FE9000, v3, OS_LOG_TYPE_DEFAULT, v4, (uint8_t *)&v5, 0xCu);
      }
    }
    else
    {
      v3 = *re::graphicsLogObjects(0);
      if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
      {
        v5 = 136315138;
        v6 = "getRenderCallbacksComponent";
        v4 = "%s: invalid private scene entity\n";
        goto LABEL_10;
      }
    }
  }
  else
  {
    v3 = *re::graphicsLogObjects(0);
    if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
    {
      v5 = 136315138;
      v6 = "getRenderCallbacksComponent";
      v4 = "%s: invalid scene\n";
      goto LABEL_10;
    }
  }
  return 0;
}

id RERenderCallbacksPostProcessGetDevice(id *a1)
{
  id v1;
  id v2;

  if (a1)
    v1 = *a1;
  else
    v1 = 0;
  v2 = v1;

  return v2;
}

id RERenderCallbacksPostProcessGetCommandBuffer(uint64_t a1)
{
  id v1;
  id v2;

  if (a1)
    v1 = *(id *)(a1 + 8);
  else
    v1 = 0;
  v2 = v1;

  return v2;
}

id *RERenderCallbacksPostProcessGetSourceColorTexture(id *a1)
{
  id *v1;
  id *v2;

  if (a1)
    a1 = (id *)a1[2];
  v1 = a1;
  v2 = v1;
  if (v1)

  return v2;
}

id *RERenderCallbacksPostProcessGetSourceDepthTexture(id *a1)
{
  id *v1;
  id *v2;

  if (a1)
    a1 = (id *)a1[3];
  v1 = a1;
  v2 = v1;
  if (v1)

  return v2;
}

id *RERenderCallbacksPostProcessGetTargetColorTexture(id *a1)
{
  id *v1;
  id *v2;

  if (a1)
    a1 = (id *)a1[4];
  v1 = a1;
  v2 = v1;
  if (v1)

  return v2;
}

double RERenderCallbacksPostProcessGetSimulationTime(uint64_t a1)
{
  if (a1)
    return *(float *)(a1 + 40);
  else
    return 0.0;
}

__n128 RERenderCallbacksPostProcessGetProjection(uint64_t a1)
{
  uint64_t v1;

  v1 = a1 + 48;
  if (!a1)
    v1 = MEMORY[0x24BDAEE00];
  return *(__n128 *)v1;
}

void RESceneSetPostProcessRenderCallback(re::ecs2::Scene *a1, void *a2, void *a3)
{
  id v5;
  uint64_t RenderCallbacksComponent;
  uint64_t v7;
  void *v8;
  id v9;

  v9 = a2;
  v5 = a3;
  RenderCallbacksComponent = getRenderCallbacksComponent(a1);
  if (RenderCallbacksComponent)
  {
    v7 = RenderCallbacksComponent;
    v8 = _Block_copy(v5);
    re::ObjCObject::operator=((void **)(v7 + 32), v8);

    re::ObjCObject::operator=((void **)(v7 + 40), v9);
  }

}

_QWORD *REScenePostProcessRenderCallbackAddOneOffCameraViewHandle(re::ecs2::Scene *a1, uint64_t a2)
{
  _QWORD *result;
  uint64_t v3;

  v3 = a2;
  result = (_QWORD *)getRenderCallbacksComponent(a1);
  if (result)
    return re::DynamicArray<unsigned long>::add(result + 13, &v3);
  return result;
}

uint64_t REScenePostProcessRenderCallbackAddCameraViewHandle(re::ecs2::Scene *a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v3;

  v3 = a2;
  result = getRenderCallbacksComponent(a1);
  if (result)
    return re::HashSetBase<unsigned long,unsigned long,re::internal::ValueAsKey<unsigned long>,re::Hash<unsigned long>,re::EqualTo<unsigned long>,true,false>::add(result + 56, &v3);
  return result;
}

uint64_t REScenePostProcessRenderCallbackRemoveCameraViewHandle(re::ecs2::Scene *a1, unint64_t a2)
{
  uint64_t result;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unsigned int v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  int *v14;
  int v15;
  int v16;

  result = getRenderCallbacksComponent(a1);
  if (result)
  {
    v4 = *(unsigned int *)(result + 80);
    if ((_DWORD)v4)
    {
      v5 = 0x94D049BB133111EBLL
         * ((0xBF58476D1CE4E5B9 * (a2 ^ (a2 >> 30))) ^ ((0xBF58476D1CE4E5B9 * (a2 ^ (a2 >> 30))) >> 27));
      v6 = (v5 ^ (v5 >> 31)) % v4;
      v7 = *(_QWORD *)(result + 64);
      v8 = *(unsigned int *)(v7 + 4 * v6);
      if ((_DWORD)v8 != 0x7FFFFFFF)
      {
        v9 = *(_QWORD *)(result + 72);
        if (*(_QWORD *)(v9 + 24 * v8 + 16) == a2)
        {
          *(_DWORD *)(v7 + 4 * v6) = *(_DWORD *)(v9 + 24 * v8 + 8) & 0x7FFFFFFF;
LABEL_9:
          v11 = *(_QWORD *)(result + 72);
          v12 = v11 + 24 * v8;
          v15 = *(_DWORD *)(v12 + 8);
          v14 = (int *)(v12 + 8);
          v13 = v15;
          if (v15 < 0)
          {
            *v14 = v13 & 0x7FFFFFFF;
            v11 = *(_QWORD *)(result + 72);
            v13 = *(_DWORD *)(v11 + 24 * v8 + 8);
          }
          v16 = *(_DWORD *)(result + 96);
          *(_DWORD *)(v11 + 24 * v8 + 8) = *(_DWORD *)(result + 92) | v13 & 0x80000000;
          --*(_DWORD *)(result + 84);
          *(_DWORD *)(result + 92) = v8;
          *(_DWORD *)(result + 96) = v16 + 1;
        }
        else
        {
          while (1)
          {
            v10 = v8;
            LODWORD(v8) = *(_DWORD *)(v9 + 24 * v8 + 8) & 0x7FFFFFFF;
            if ((_DWORD)v8 == 0x7FFFFFFF)
              break;
            if (*(_QWORD *)(v9 + 24 * v8 + 16) == a2)
            {
              *(_DWORD *)(v9 + 24 * v10 + 8) = *(_DWORD *)(v9 + 24 * v10 + 8) & 0x80000000 | *(_DWORD *)(v9 + 24 * v8 + 8) & 0x7FFFFFFF;
              goto LABEL_9;
            }
          }
        }
      }
    }
  }
  return result;
}

void REScenePostProcessRenderCallbackClearCameraViewHandles(re::ecs2::Scene *a1)
{
  uint64_t RenderCallbacksComponent;

  RenderCallbacksComponent = getRenderCallbacksComponent(a1);
  if (RenderCallbacksComponent)
    re::HashSetBase<unsigned long,unsigned long,re::internal::ValueAsKey<unsigned long>,re::Hash<unsigned long>,re::EqualTo<unsigned long>,true,false>::clear(RenderCallbacksComponent + 56);
}

id *RESceneGetPostProcessRenderCallback(re::ecs2::Scene *a1)
{
  id *RenderCallbacksComponent;

  RenderCallbacksComponent = (id *)getRenderCallbacksComponent(a1);
  if (RenderCallbacksComponent)
    RenderCallbacksComponent = (id *)objc_retainAutorelease(RenderCallbacksComponent[5]);
  return RenderCallbacksComponent;
}

void RESceneSetPrepareWithDeviceRenderCallback(re::ecs2::Scene *a1, void *a2)
{
  uint64_t RenderCallbacksComponent;
  uint64_t v4;
  void *v5;
  id aBlock;

  aBlock = a2;
  RenderCallbacksComponent = getRenderCallbacksComponent(a1);
  if (RenderCallbacksComponent)
  {
    v4 = RenderCallbacksComponent;
    v5 = _Block_copy(aBlock);
    re::ObjCObject::operator=((void **)(v4 + 48), v5);

  }
}

id *RESceneGetPrepareWithDeviceRenderCallback(re::ecs2::Scene *a1)
{
  id *RenderCallbacksComponent;

  RenderCallbacksComponent = (id *)getRenderCallbacksComponent(a1);
  if (RenderCallbacksComponent)
    RenderCallbacksComponent = (id *)_Block_copy(objc_retainAutorelease(RenderCallbacksComponent[6]));
  return RenderCallbacksComponent;
}

uint64_t REBindPointCreateReferenceForEntity(re *a1, const char *a2)
{
  uint64_t result;

  result = REBindPointCreateReferenceForEntityString(a1, a2);
  if (!result)
  {
    result = REBindPointCreateReferenceForEntityBool(a1, a2);
    if (!result)
    {
      result = REBindPointCreateReferenceForEntityInt8(a1, a2);
      if (!result)
      {
        result = REBindPointCreateReferenceForEntityUInt8(a1, a2);
        if (!result)
        {
          result = REBindPointCreateReferenceForEntityInt16(a1, a2);
          if (!result)
          {
            result = REBindPointCreateReferenceForEntityUInt16(a1, a2);
            if (!result)
            {
              result = REBindPointCreateReferenceForEntityInt32(a1, a2);
              if (!result)
              {
                result = REBindPointCreateReferenceForEntityUInt32(a1, a2);
                if (!result)
                {
                  result = REBindPointCreateReferenceForEntityInt64(a1, a2);
                  if (!result)
                  {
                    result = REBindPointCreateReferenceForEntityFloat(a1, a2);
                    if (!result)
                    {
                      result = REBindPointCreateReferenceForEntityFloat2(a1, a2);
                      if (!result)
                      {
                        result = REBindPointCreateReferenceForEntityFloat3(a1, a2);
                        if (!result)
                        {
                          result = REBindPointCreateReferenceForEntityFloat4(a1, a2);
                          if (!result)
                          {
                            result = REBindPointCreateReferenceForEntityDouble(a1, a2);
                            if (!result)
                            {
                              result = REBindPointCreateReferenceForEntityDouble2(a1, a2);
                              if (!result)
                              {
                                result = REBindPointCreateReferenceForEntityDouble3(a1, a2);
                                if (!result)
                                {
                                  result = REBindPointCreateReferenceForEntityDouble4(a1, a2);
                                  if (!result)
                                  {
                                    result = REBindPointCreateReferenceForEntityQuatF(a1, a2);
                                    if (!result)
                                      return REBindPointCreateReferenceForEntitySRT(a1, a2);
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  return result;
}

uint64_t REBindPointCreateReferenceForEntityString(re *a1, const char *a2)
{
  uint64_t v2;
  unsigned __int8 v4;
  re *v5;
  uint64_t *v6;
  uint64_t v7;
  const re::IntrospectionBase *v9;
  uint64_t v10[2];
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  re::BindNode *v17[5];

  v2 = 0;
  v17[4] = *(re::BindNode **)MEMORY[0x24BDAC8D0];
  if (a1 && a2)
  {
    re::makeBindNode(a1, (uint64_t)v17);
    if ((v4 & 1) == 0
    {
      re::introspect<re::DynamicString>(void)::info = (uint64_t)re::IntrospectionInfo<re::DynamicString>::get(0, v9);
    }
    v10[0] = (uint64_t)a2;
    v10[1] = strlen(a2);
    re::BindNode::bindPoint(v17, re::introspect<re::DynamicString>(void)::info, v10, (uint64_t)&v11);
    re::BindNode::deinit((re::BindNode *)v17);
    if (v14)
    {
      v6 = re::globalAllocators(v5);
      v2 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v6[2] + 32))(v6[2], 48, 8);
      v7 = v11;
      *(_QWORD *)(v2 + 40) = 0;
      *(_DWORD *)(v2 + 32) = 0;
      *(_QWORD *)(v2 + 16) = 0;
      *(_QWORD *)(v2 + 24) = 0;
      *(_QWORD *)v2 = v7;
      *(_QWORD *)(v2 + 8) = 0;
      *(_QWORD *)(v2 + 8) = v12;
      *(_QWORD *)(v2 + 16) = v13;
      *(_QWORD *)(v2 + 24) = v14;
      v12 = 0;
      v13 = 0;
      v14 = 0;
      *(_QWORD *)(v2 + 40) = v16;
      v16 = 0;
      ++v15;
      ++*(_DWORD *)(v2 + 32);
    }
    else
    {
      v2 = 0;
    }
    re::DynamicArray<re::BindPoint::BindPointData>::deinit((uint64_t)&v12);
    re::DynamicArray<re::BindPoint::BindPointData>::deinit((uint64_t)&v12);
  }
  return v2;
}

uint64_t REBindPointCreateReferenceForEntityBool(re *a1, const char *a2)
{
  uint64_t v2;
  unsigned __int8 v4;
  re *v5;
  uint64_t *v6;
  uint64_t v7;
  const re::IntrospectionBase *v9;
  uint64_t v10[2];
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  re::BindNode *v17[5];

  v2 = 0;
  v17[4] = *(re::BindNode **)MEMORY[0x24BDAC8D0];
  if (a1 && a2)
  {
    re::makeBindNode(a1, (uint64_t)v17);
    if ((v4 & 1) == 0
    {
      re::introspect<BOOL>(void)::info = re::introspect_BOOL(0, v9);
    }
    v10[0] = (uint64_t)a2;
    v10[1] = strlen(a2);
    re::BindNode::bindPoint(v17, (uint64_t)re::introspect<BOOL>(void)::info, v10, (uint64_t)&v11);
    re::BindNode::deinit((re::BindNode *)v17);
    if (v14)
    {
      v6 = re::globalAllocators(v5);
      v2 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v6[2] + 32))(v6[2], 48, 8);
      v7 = v11;
      *(_QWORD *)(v2 + 40) = 0;
      *(_DWORD *)(v2 + 32) = 0;
      *(_QWORD *)(v2 + 16) = 0;
      *(_QWORD *)(v2 + 24) = 0;
      *(_QWORD *)v2 = v7;
      *(_QWORD *)(v2 + 8) = 0;
      *(_QWORD *)(v2 + 8) = v12;
      *(_QWORD *)(v2 + 16) = v13;
      *(_QWORD *)(v2 + 24) = v14;
      v12 = 0;
      v13 = 0;
      v14 = 0;
      *(_QWORD *)(v2 + 40) = v16;
      v16 = 0;
      ++v15;
      ++*(_DWORD *)(v2 + 32);
    }
    else
    {
      v2 = 0;
    }
    re::DynamicArray<re::BindPoint::BindPointData>::deinit((uint64_t)&v12);
    re::DynamicArray<re::BindPoint::BindPointData>::deinit((uint64_t)&v12);
  }
  return v2;
}

uint64_t REBindPointCreateReferenceForEntityInt8(re *a1, const char *a2)
{
  uint64_t v2;
  unsigned __int8 v4;
  re *v5;
  uint64_t *v6;
  uint64_t v7;
  const re::IntrospectionBase *v9;
  uint64_t v10[2];
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  re::BindNode *v17[5];

  v2 = 0;
  v17[4] = *(re::BindNode **)MEMORY[0x24BDAC8D0];
  if (a1 && a2)
  {
    re::makeBindNode(a1, (uint64_t)v17);
    if ((v4 & 1) == 0
    {
      re::introspect<char>(void)::info = (uint64_t)re::introspect_char(0, v9);
    }
    v10[0] = (uint64_t)a2;
    v10[1] = strlen(a2);
    re::BindNode::bindPoint(v17, re::introspect<char>(void)::info, v10, (uint64_t)&v11);
    re::BindNode::deinit((re::BindNode *)v17);
    if (v14)
    {
      v6 = re::globalAllocators(v5);
      v2 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v6[2] + 32))(v6[2], 48, 8);
      v7 = v11;
      *(_QWORD *)(v2 + 40) = 0;
      *(_DWORD *)(v2 + 32) = 0;
      *(_QWORD *)(v2 + 16) = 0;
      *(_QWORD *)(v2 + 24) = 0;
      *(_QWORD *)v2 = v7;
      *(_QWORD *)(v2 + 8) = 0;
      *(_QWORD *)(v2 + 8) = v12;
      *(_QWORD *)(v2 + 16) = v13;
      *(_QWORD *)(v2 + 24) = v14;
      v12 = 0;
      v13 = 0;
      v14 = 0;
      *(_QWORD *)(v2 + 40) = v16;
      v16 = 0;
      ++v15;
      ++*(_DWORD *)(v2 + 32);
    }
    else
    {
      v2 = 0;
    }
    re::DynamicArray<re::BindPoint::BindPointData>::deinit((uint64_t)&v12);
    re::DynamicArray<re::BindPoint::BindPointData>::deinit((uint64_t)&v12);
  }
  return v2;
}

uint64_t REBindPointCreateReferenceForEntityUInt8(re *a1, const char *a2)
{
  uint64_t v2;
  unsigned __int8 v4;
  re *v5;
  uint64_t *v6;
  uint64_t v7;
  const re::IntrospectionBase *v9;
  uint64_t v10[2];
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  re::BindNode *v17[5];

  v2 = 0;
  v17[4] = *(re::BindNode **)MEMORY[0x24BDAC8D0];
  if (a1 && a2)
  {
    re::makeBindNode(a1, (uint64_t)v17);
    if ((v4 & 1) == 0
    {
      re::introspect<unsigned char>(void)::info = re::introspect_uint8_t(0, v9);
    }
    v10[0] = (uint64_t)a2;
    v10[1] = strlen(a2);
    re::BindNode::bindPoint(v17, (uint64_t)re::introspect<unsigned char>(void)::info, v10, (uint64_t)&v11);
    re::BindNode::deinit((re::BindNode *)v17);
    if (v14)
    {
      v6 = re::globalAllocators(v5);
      v2 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v6[2] + 32))(v6[2], 48, 8);
      v7 = v11;
      *(_QWORD *)(v2 + 40) = 0;
      *(_DWORD *)(v2 + 32) = 0;
      *(_QWORD *)(v2 + 16) = 0;
      *(_QWORD *)(v2 + 24) = 0;
      *(_QWORD *)v2 = v7;
      *(_QWORD *)(v2 + 8) = 0;
      *(_QWORD *)(v2 + 8) = v12;
      *(_QWORD *)(v2 + 16) = v13;
      *(_QWORD *)(v2 + 24) = v14;
      v12 = 0;
      v13 = 0;
      v14 = 0;
      *(_QWORD *)(v2 + 40) = v16;
      v16 = 0;
      ++v15;
      ++*(_DWORD *)(v2 + 32);
    }
    else
    {
      v2 = 0;
    }
    re::DynamicArray<re::BindPoint::BindPointData>::deinit((uint64_t)&v12);
    re::DynamicArray<re::BindPoint::BindPointData>::deinit((uint64_t)&v12);
  }
  return v2;
}

uint64_t REBindPointCreateReferenceForEntityInt16(re *a1, const char *a2)
{
  uint64_t v2;
  unsigned __int8 v4;
  re *v5;
  uint64_t *v6;
  uint64_t v7;
  const re::IntrospectionBase *v9;
  uint64_t v10[2];
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  re::BindNode *v17[5];

  v2 = 0;
  v17[4] = *(re::BindNode **)MEMORY[0x24BDAC8D0];
  if (a1 && a2)
  {
    re::makeBindNode(a1, (uint64_t)v17);
    if ((v4 & 1) == 0
    {
      re::introspect<short>(void)::info = (uint64_t)re::introspect_short(0, v9);
    }
    v10[0] = (uint64_t)a2;
    v10[1] = strlen(a2);
    re::BindNode::bindPoint(v17, re::introspect<short>(void)::info, v10, (uint64_t)&v11);
    re::BindNode::deinit((re::BindNode *)v17);
    if (v14)
    {
      v6 = re::globalAllocators(v5);
      v2 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v6[2] + 32))(v6[2], 48, 8);
      v7 = v11;
      *(_QWORD *)(v2 + 40) = 0;
      *(_DWORD *)(v2 + 32) = 0;
      *(_QWORD *)(v2 + 16) = 0;
      *(_QWORD *)(v2 + 24) = 0;
      *(_QWORD *)v2 = v7;
      *(_QWORD *)(v2 + 8) = 0;
      *(_QWORD *)(v2 + 8) = v12;
      *(_QWORD *)(v2 + 16) = v13;
      *(_QWORD *)(v2 + 24) = v14;
      v12 = 0;
      v13 = 0;
      v14 = 0;
      *(_QWORD *)(v2 + 40) = v16;
      v16 = 0;
      ++v15;
      ++*(_DWORD *)(v2 + 32);
    }
    else
    {
      v2 = 0;
    }
    re::DynamicArray<re::BindPoint::BindPointData>::deinit((uint64_t)&v12);
    re::DynamicArray<re::BindPoint::BindPointData>::deinit((uint64_t)&v12);
  }
  return v2;
}

uint64_t REBindPointCreateReferenceForEntityUInt16(re *a1, const char *a2)
{
  uint64_t v2;
  unsigned __int8 v4;
  re *v5;
  uint64_t *v6;
  uint64_t v7;
  const re::IntrospectionBase *v9;
  uint64_t v10[2];
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  re::BindNode *v17[5];

  v2 = 0;
  v17[4] = *(re::BindNode **)MEMORY[0x24BDAC8D0];
  if (a1 && a2)
  {
    re::makeBindNode(a1, (uint64_t)v17);
    if ((v4 & 1) == 0
    {
      re::introspect<unsigned short>(void)::info = (uint64_t)re::introspect_uint16_t(0, v9);
    }
    v10[0] = (uint64_t)a2;
    v10[1] = strlen(a2);
    re::BindNode::bindPoint(v17, re::introspect<unsigned short>(void)::info, v10, (uint64_t)&v11);
    re::BindNode::deinit((re::BindNode *)v17);
    if (v14)
    {
      v6 = re::globalAllocators(v5);
      v2 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v6[2] + 32))(v6[2], 48, 8);
      v7 = v11;
      *(_QWORD *)(v2 + 40) = 0;
      *(_DWORD *)(v2 + 32) = 0;
      *(_QWORD *)(v2 + 16) = 0;
      *(_QWORD *)(v2 + 24) = 0;
      *(_QWORD *)v2 = v7;
      *(_QWORD *)(v2 + 8) = 0;
      *(_QWORD *)(v2 + 8) = v12;
      *(_QWORD *)(v2 + 16) = v13;
      *(_QWORD *)(v2 + 24) = v14;
      v12 = 0;
      v13 = 0;
      v14 = 0;
      *(_QWORD *)(v2 + 40) = v16;
      v16 = 0;
      ++v15;
      ++*(_DWORD *)(v2 + 32);
    }
    else
    {
      v2 = 0;
    }
    re::DynamicArray<re::BindPoint::BindPointData>::deinit((uint64_t)&v12);
    re::DynamicArray<re::BindPoint::BindPointData>::deinit((uint64_t)&v12);
  }
  return v2;
}

uint64_t REBindPointCreateReferenceForEntityInt32(re *a1, const char *a2)
{
  uint64_t v2;
  unsigned __int8 v4;
  re *v5;
  uint64_t *v6;
  uint64_t v7;
  const re::IntrospectionBase *v9;
  uint64_t v10[2];
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  re::BindNode *v17[5];

  v2 = 0;
  v17[4] = *(re::BindNode **)MEMORY[0x24BDAC8D0];
  if (a1 && a2)
  {
    re::makeBindNode(a1, (uint64_t)v17);
    if ((v4 & 1) == 0
    {
      re::introspect<int>(void)::info = re::introspect_int(0, v9);
    }
    v10[0] = (uint64_t)a2;
    v10[1] = strlen(a2);
    re::BindNode::bindPoint(v17, (uint64_t)re::introspect<int>(void)::info, v10, (uint64_t)&v11);
    re::BindNode::deinit((re::BindNode *)v17);
    if (v14)
    {
      v6 = re::globalAllocators(v5);
      v2 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v6[2] + 32))(v6[2], 48, 8);
      v7 = v11;
      *(_QWORD *)(v2 + 40) = 0;
      *(_DWORD *)(v2 + 32) = 0;
      *(_QWORD *)(v2 + 16) = 0;
      *(_QWORD *)(v2 + 24) = 0;
      *(_QWORD *)v2 = v7;
      *(_QWORD *)(v2 + 8) = 0;
      *(_QWORD *)(v2 + 8) = v12;
      *(_QWORD *)(v2 + 16) = v13;
      *(_QWORD *)(v2 + 24) = v14;
      v12 = 0;
      v13 = 0;
      v14 = 0;
      *(_QWORD *)(v2 + 40) = v16;
      v16 = 0;
      ++v15;
      ++*(_DWORD *)(v2 + 32);
    }
    else
    {
      v2 = 0;
    }
    re::DynamicArray<re::BindPoint::BindPointData>::deinit((uint64_t)&v12);
    re::DynamicArray<re::BindPoint::BindPointData>::deinit((uint64_t)&v12);
  }
  return v2;
}

uint64_t REBindPointCreateReferenceForEntityUInt32(re *a1, const char *a2)
{
  uint64_t v2;
  unsigned __int8 v4;
  re *v5;
  uint64_t *v6;
  uint64_t v7;
  const re::IntrospectionBase *v9;
  uint64_t v10[2];
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  re::BindNode *v17[5];

  v2 = 0;
  v17[4] = *(re::BindNode **)MEMORY[0x24BDAC8D0];
  if (a1 && a2)
  {
    re::makeBindNode(a1, (uint64_t)v17);
    if ((v4 & 1) == 0
    {
      re::introspect<unsigned int>(void)::info = re::introspect_uint32_t(0, v9);
    }
    v10[0] = (uint64_t)a2;
    v10[1] = strlen(a2);
    re::BindNode::bindPoint(v17, (uint64_t)re::introspect<unsigned int>(void)::info, v10, (uint64_t)&v11);
    re::BindNode::deinit((re::BindNode *)v17);
    if (v14)
    {
      v6 = re::globalAllocators(v5);
      v2 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v6[2] + 32))(v6[2], 48, 8);
      v7 = v11;
      *(_QWORD *)(v2 + 40) = 0;
      *(_DWORD *)(v2 + 32) = 0;
      *(_QWORD *)(v2 + 16) = 0;
      *(_QWORD *)(v2 + 24) = 0;
      *(_QWORD *)v2 = v7;
      *(_QWORD *)(v2 + 8) = 0;
      *(_QWORD *)(v2 + 8) = v12;
      *(_QWORD *)(v2 + 16) = v13;
      *(_QWORD *)(v2 + 24) = v14;
      v12 = 0;
      v13 = 0;
      v14 = 0;
      *(_QWORD *)(v2 + 40) = v16;
      v16 = 0;
      ++v15;
      ++*(_DWORD *)(v2 + 32);
    }
    else
    {
      v2 = 0;
    }
    re::DynamicArray<re::BindPoint::BindPointData>::deinit((uint64_t)&v12);
    re::DynamicArray<re::BindPoint::BindPointData>::deinit((uint64_t)&v12);
  }
  return v2;
}

uint64_t REBindPointCreateReferenceForEntityInt64(re *a1, const char *a2)
{
  uint64_t v2;
  unsigned __int8 v4;
  re *v5;
  uint64_t *v6;
  uint64_t v7;
  const re::IntrospectionBase *v9;
  uint64_t v10[2];
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  re::BindNode *v17[5];

  v2 = 0;
  v17[4] = *(re::BindNode **)MEMORY[0x24BDAC8D0];
  if (a1 && a2)
  {
    re::makeBindNode(a1, (uint64_t)v17);
    if ((v4 & 1) == 0
    {
      re::introspect<long long>(void)::info = (uint64_t)re::introspect_int64_t(0, v9);
    }
    v10[0] = (uint64_t)a2;
    v10[1] = strlen(a2);
    re::BindNode::bindPoint(v17, re::introspect<long long>(void)::info, v10, (uint64_t)&v11);
    re::BindNode::deinit((re::BindNode *)v17);
    if (v14)
    {
      v6 = re::globalAllocators(v5);
      v2 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v6[2] + 32))(v6[2], 48, 8);
      v7 = v11;
      *(_QWORD *)(v2 + 40) = 0;
      *(_DWORD *)(v2 + 32) = 0;
      *(_QWORD *)(v2 + 16) = 0;
      *(_QWORD *)(v2 + 24) = 0;
      *(_QWORD *)v2 = v7;
      *(_QWORD *)(v2 + 8) = 0;
      *(_QWORD *)(v2 + 8) = v12;
      *(_QWORD *)(v2 + 16) = v13;
      *(_QWORD *)(v2 + 24) = v14;
      v12 = 0;
      v13 = 0;
      v14 = 0;
      *(_QWORD *)(v2 + 40) = v16;
      v16 = 0;
      ++v15;
      ++*(_DWORD *)(v2 + 32);
    }
    else
    {
      v2 = 0;
    }
    re::DynamicArray<re::BindPoint::BindPointData>::deinit((uint64_t)&v12);
    re::DynamicArray<re::BindPoint::BindPointData>::deinit((uint64_t)&v12);
  }
  return v2;
}

uint64_t REBindPointCreateReferenceForEntityFloat(re *a1, const char *a2)
{
  uint64_t v2;
  unsigned __int8 v4;
  re *v5;
  uint64_t *v6;
  uint64_t v7;
  const re::IntrospectionBase *v9;
  uint64_t v10[2];
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  re::BindNode *v17[5];

  v2 = 0;
  v17[4] = *(re::BindNode **)MEMORY[0x24BDAC8D0];
  if (a1 && a2)
  {
    re::makeBindNode(a1, (uint64_t)v17);
    if ((v4 & 1) == 0
    {
      re::introspect<float>(void)::info = re::introspect_float(0, v9);
    }
    v10[0] = (uint64_t)a2;
    v10[1] = strlen(a2);
    re::BindNode::bindPoint(v17, (uint64_t)re::introspect<float>(void)::info, v10, (uint64_t)&v11);
    re::BindNode::deinit((re::BindNode *)v17);
    if (v14)
    {
      v6 = re::globalAllocators(v5);
      v2 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v6[2] + 32))(v6[2], 48, 8);
      v7 = v11;
      *(_QWORD *)(v2 + 40) = 0;
      *(_DWORD *)(v2 + 32) = 0;
      *(_QWORD *)(v2 + 16) = 0;
      *(_QWORD *)(v2 + 24) = 0;
      *(_QWORD *)v2 = v7;
      *(_QWORD *)(v2 + 8) = 0;
      *(_QWORD *)(v2 + 8) = v12;
      *(_QWORD *)(v2 + 16) = v13;
      *(_QWORD *)(v2 + 24) = v14;
      v12 = 0;
      v13 = 0;
      v14 = 0;
      *(_QWORD *)(v2 + 40) = v16;
      v16 = 0;
      ++v15;
      ++*(_DWORD *)(v2 + 32);
    }
    else
    {
      v2 = 0;
    }
    re::DynamicArray<re::BindPoint::BindPointData>::deinit((uint64_t)&v12);
    re::DynamicArray<re::BindPoint::BindPointData>::deinit((uint64_t)&v12);
  }
  return v2;
}

uint64_t REBindPointCreateReferenceForEntityFloat2(re *a1, const char *a2)
{
  uint64_t v2;
  unsigned __int8 v4;
  re *v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v9[2];
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  re::BindNode *v16[5];

  v2 = 0;
  v16[4] = *(re::BindNode **)MEMORY[0x24BDAC8D0];
  if (a1 && a2)
  {
    re::makeBindNode(a1, (uint64_t)v16);
    if ((v4 & 1) == 0
    {
      re::introspect<re::Vector2<float>>(void)::info = (_UNKNOWN *)re::introspect_Vector2F(0);
    }
    v9[0] = (uint64_t)a2;
    v9[1] = strlen(a2);
    re::BindNode::bindPoint(v16, (uint64_t)re::introspect<re::Vector2<float>>(void)::info, v9, (uint64_t)&v10);
    re::BindNode::deinit((re::BindNode *)v16);
    if (v13)
    {
      v6 = re::globalAllocators(v5);
      v2 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v6[2] + 32))(v6[2], 48, 8);
      v7 = v10;
      *(_QWORD *)(v2 + 40) = 0;
      *(_DWORD *)(v2 + 32) = 0;
      *(_QWORD *)(v2 + 16) = 0;
      *(_QWORD *)(v2 + 24) = 0;
      *(_QWORD *)v2 = v7;
      *(_QWORD *)(v2 + 8) = 0;
      *(_QWORD *)(v2 + 8) = v11;
      *(_QWORD *)(v2 + 16) = v12;
      *(_QWORD *)(v2 + 24) = v13;
      v11 = 0;
      v12 = 0;
      v13 = 0;
      *(_QWORD *)(v2 + 40) = v15;
      v15 = 0;
      ++v14;
      ++*(_DWORD *)(v2 + 32);
    }
    else
    {
      v2 = 0;
    }
    re::DynamicArray<re::BindPoint::BindPointData>::deinit((uint64_t)&v11);
    re::DynamicArray<re::BindPoint::BindPointData>::deinit((uint64_t)&v11);
  }
  return v2;
}

uint64_t REBindPointCreateReferenceForEntityFloat3(re *a1, const char *a2)
{
  uint64_t v2;
  unsigned __int8 v4;
  re *v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v9[2];
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  re::BindNode *v16[5];

  v2 = 0;
  v16[4] = *(re::BindNode **)MEMORY[0x24BDAC8D0];
  if (a1 && a2)
  {
    re::makeBindNode(a1, (uint64_t)v16);
    if ((v4 & 1) == 0
    {
      re::introspect<re::Vector3<float>>(void)::info = (_UNKNOWN *)re::introspect_Vector3F(0);
    }
    v9[0] = (uint64_t)a2;
    v9[1] = strlen(a2);
    re::BindNode::bindPoint(v16, (uint64_t)re::introspect<re::Vector3<float>>(void)::info, v9, (uint64_t)&v10);
    re::BindNode::deinit((re::BindNode *)v16);
    if (v13)
    {
      v6 = re::globalAllocators(v5);
      v2 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v6[2] + 32))(v6[2], 48, 8);
      v7 = v10;
      *(_QWORD *)(v2 + 40) = 0;
      *(_DWORD *)(v2 + 32) = 0;
      *(_QWORD *)(v2 + 16) = 0;
      *(_QWORD *)(v2 + 24) = 0;
      *(_QWORD *)v2 = v7;
      *(_QWORD *)(v2 + 8) = 0;
      *(_QWORD *)(v2 + 8) = v11;
      *(_QWORD *)(v2 + 16) = v12;
      *(_QWORD *)(v2 + 24) = v13;
      v11 = 0;
      v12 = 0;
      v13 = 0;
      *(_QWORD *)(v2 + 40) = v15;
      v15 = 0;
      ++v14;
      ++*(_DWORD *)(v2 + 32);
    }
    else
    {
      v2 = 0;
    }
    re::DynamicArray<re::BindPoint::BindPointData>::deinit((uint64_t)&v11);
    re::DynamicArray<re::BindPoint::BindPointData>::deinit((uint64_t)&v11);
  }
  return v2;
}

uint64_t REBindPointCreateReferenceForEntityFloat4(re *a1, const char *a2)
{
  uint64_t v2;
  unsigned __int8 v4;
  re *v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v9[2];
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  re::BindNode *v16[5];

  v2 = 0;
  v16[4] = *(re::BindNode **)MEMORY[0x24BDAC8D0];
  if (a1 && a2)
  {
    re::makeBindNode(a1, (uint64_t)v16);
    if ((v4 & 1) == 0
    {
      re::introspect<re::Vector4<float>>(void)::info = (_UNKNOWN *)re::introspect_Vector4F(0);
    }
    v9[0] = (uint64_t)a2;
    v9[1] = strlen(a2);
    re::BindNode::bindPoint(v16, (uint64_t)re::introspect<re::Vector4<float>>(void)::info, v9, (uint64_t)&v10);
    re::BindNode::deinit((re::BindNode *)v16);
    if (v13)
    {
      v6 = re::globalAllocators(v5);
      v2 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v6[2] + 32))(v6[2], 48, 8);
      v7 = v10;
      *(_QWORD *)(v2 + 40) = 0;
      *(_DWORD *)(v2 + 32) = 0;
      *(_QWORD *)(v2 + 16) = 0;
      *(_QWORD *)(v2 + 24) = 0;
      *(_QWORD *)v2 = v7;
      *(_QWORD *)(v2 + 8) = 0;
      *(_QWORD *)(v2 + 8) = v11;
      *(_QWORD *)(v2 + 16) = v12;
      *(_QWORD *)(v2 + 24) = v13;
      v11 = 0;
      v12 = 0;
      v13 = 0;
      *(_QWORD *)(v2 + 40) = v15;
      v15 = 0;
      ++v14;
      ++*(_DWORD *)(v2 + 32);
    }
    else
    {
      v2 = 0;
    }
    re::DynamicArray<re::BindPoint::BindPointData>::deinit((uint64_t)&v11);
    re::DynamicArray<re::BindPoint::BindPointData>::deinit((uint64_t)&v11);
  }
  return v2;
}

uint64_t REBindPointCreateReferenceForEntityDouble(re *a1, const char *a2)
{
  uint64_t v2;
  unsigned __int8 v4;
  re *v5;
  uint64_t *v6;
  uint64_t v7;
  const re::IntrospectionBase *v9;
  uint64_t v10[2];
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  re::BindNode *v17[5];

  v2 = 0;
  v17[4] = *(re::BindNode **)MEMORY[0x24BDAC8D0];
  if (a1 && a2)
  {
    re::makeBindNode(a1, (uint64_t)v17);
    if ((v4 & 1) == 0
    {
      re::introspect<double>(void)::info = (uint64_t)re::introspect_double(0, v9);
    }
    v10[0] = (uint64_t)a2;
    v10[1] = strlen(a2);
    re::BindNode::bindPoint(v17, re::introspect<double>(void)::info, v10, (uint64_t)&v11);
    re::BindNode::deinit((re::BindNode *)v17);
    if (v14)
    {
      v6 = re::globalAllocators(v5);
      v2 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v6[2] + 32))(v6[2], 48, 8);
      v7 = v11;
      *(_QWORD *)(v2 + 40) = 0;
      *(_DWORD *)(v2 + 32) = 0;
      *(_QWORD *)(v2 + 16) = 0;
      *(_QWORD *)(v2 + 24) = 0;
      *(_QWORD *)v2 = v7;
      *(_QWORD *)(v2 + 8) = 0;
      *(_QWORD *)(v2 + 8) = v12;
      *(_QWORD *)(v2 + 16) = v13;
      *(_QWORD *)(v2 + 24) = v14;
      v12 = 0;
      v13 = 0;
      v14 = 0;
      *(_QWORD *)(v2 + 40) = v16;
      v16 = 0;
      ++v15;
      ++*(_DWORD *)(v2 + 32);
    }
    else
    {
      v2 = 0;
    }
    re::DynamicArray<re::BindPoint::BindPointData>::deinit((uint64_t)&v12);
    re::DynamicArray<re::BindPoint::BindPointData>::deinit((uint64_t)&v12);
  }
  return v2;
}

uint64_t REBindPointCreateReferenceForEntityDouble2(re *a1, const char *a2)
{
  uint64_t v2;
  unsigned __int8 v4;
  re *v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v9[2];
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  re::BindNode *v16[5];

  v2 = 0;
  v16[4] = *(re::BindNode **)MEMORY[0x24BDAC8D0];
  if (a1 && a2)
  {
    re::makeBindNode(a1, (uint64_t)v16);
    v4 = atomic_load((unsigned __int8 *)&qword_254123F18);
    if ((v4 & 1) == 0 && __cxa_guard_acquire(&qword_254123F18))
    {
      _MergedGlobals_506 = re::introspect_Vector2D(0);
      __cxa_guard_release(&qword_254123F18);
    }
    v9[0] = (uint64_t)a2;
    v9[1] = strlen(a2);
    re::BindNode::bindPoint(v16, _MergedGlobals_506, v9, (uint64_t)&v10);
    re::BindNode::deinit((re::BindNode *)v16);
    if (v13)
    {
      v6 = re::globalAllocators(v5);
      v2 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v6[2] + 32))(v6[2], 48, 8);
      v7 = v10;
      *(_QWORD *)(v2 + 40) = 0;
      *(_DWORD *)(v2 + 32) = 0;
      *(_QWORD *)(v2 + 16) = 0;
      *(_QWORD *)(v2 + 24) = 0;
      *(_QWORD *)v2 = v7;
      *(_QWORD *)(v2 + 8) = 0;
      *(_QWORD *)(v2 + 8) = v11;
      *(_QWORD *)(v2 + 16) = v12;
      *(_QWORD *)(v2 + 24) = v13;
      v11 = 0;
      v12 = 0;
      v13 = 0;
      *(_QWORD *)(v2 + 40) = v15;
      v15 = 0;
      ++v14;
      ++*(_DWORD *)(v2 + 32);
    }
    else
    {
      v2 = 0;
    }
    re::DynamicArray<re::BindPoint::BindPointData>::deinit((uint64_t)&v11);
    re::DynamicArray<re::BindPoint::BindPointData>::deinit((uint64_t)&v11);
  }
  return v2;
}

uint64_t REBindPointCreateReferenceForEntityDouble3(re *a1, const char *a2)
{
  uint64_t v2;
  unsigned __int8 v4;
  re *v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v9[2];
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  re::BindNode *v16[5];

  v2 = 0;
  v16[4] = *(re::BindNode **)MEMORY[0x24BDAC8D0];
  if (a1 && a2)
  {
    re::makeBindNode(a1, (uint64_t)v16);
    v4 = atomic_load((unsigned __int8 *)&qword_254123F28);
    if ((v4 & 1) == 0 && __cxa_guard_acquire(&qword_254123F28))
    {
      qword_254123F20 = re::introspect_Vector3D(0);
      __cxa_guard_release(&qword_254123F28);
    }
    v9[0] = (uint64_t)a2;
    v9[1] = strlen(a2);
    re::BindNode::bindPoint(v16, qword_254123F20, v9, (uint64_t)&v10);
    re::BindNode::deinit((re::BindNode *)v16);
    if (v13)
    {
      v6 = re::globalAllocators(v5);
      v2 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v6[2] + 32))(v6[2], 48, 8);
      v7 = v10;
      *(_QWORD *)(v2 + 40) = 0;
      *(_DWORD *)(v2 + 32) = 0;
      *(_QWORD *)(v2 + 16) = 0;
      *(_QWORD *)(v2 + 24) = 0;
      *(_QWORD *)v2 = v7;
      *(_QWORD *)(v2 + 8) = 0;
      *(_QWORD *)(v2 + 8) = v11;
      *(_QWORD *)(v2 + 16) = v12;
      *(_QWORD *)(v2 + 24) = v13;
      v11 = 0;
      v12 = 0;
      v13 = 0;
      *(_QWORD *)(v2 + 40) = v15;
      v15 = 0;
      ++v14;
      ++*(_DWORD *)(v2 + 32);
    }
    else
    {
      v2 = 0;
    }
    re::DynamicArray<re::BindPoint::BindPointData>::deinit((uint64_t)&v11);
    re::DynamicArray<re::BindPoint::BindPointData>::deinit((uint64_t)&v11);
  }
  return v2;
}

uint64_t REBindPointCreateReferenceForEntityDouble4(re *a1, const char *a2)
{
  uint64_t v2;
  unsigned __int8 v4;
  re *v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v9[2];
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  re::BindNode *v16[5];

  v2 = 0;
  v16[4] = *(re::BindNode **)MEMORY[0x24BDAC8D0];
  if (a1 && a2)
  {
    re::makeBindNode(a1, (uint64_t)v16);
    v4 = atomic_load((unsigned __int8 *)&qword_254123F38);
    if ((v4 & 1) == 0 && __cxa_guard_acquire(&qword_254123F38))
    {
      qword_254123F30 = re::introspect_Vector4D(0);
      __cxa_guard_release(&qword_254123F38);
    }
    v9[0] = (uint64_t)a2;
    v9[1] = strlen(a2);
    re::BindNode::bindPoint(v16, qword_254123F30, v9, (uint64_t)&v10);
    re::BindNode::deinit((re::BindNode *)v16);
    if (v13)
    {
      v6 = re::globalAllocators(v5);
      v2 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v6[2] + 32))(v6[2], 48, 8);
      v7 = v10;
      *(_QWORD *)(v2 + 40) = 0;
      *(_DWORD *)(v2 + 32) = 0;
      *(_QWORD *)(v2 + 16) = 0;
      *(_QWORD *)(v2 + 24) = 0;
      *(_QWORD *)v2 = v7;
      *(_QWORD *)(v2 + 8) = 0;
      *(_QWORD *)(v2 + 8) = v11;
      *(_QWORD *)(v2 + 16) = v12;
      *(_QWORD *)(v2 + 24) = v13;
      v11 = 0;
      v12 = 0;
      v13 = 0;
      *(_QWORD *)(v2 + 40) = v15;
      v15 = 0;
      ++v14;
      ++*(_DWORD *)(v2 + 32);
    }
    else
    {
      v2 = 0;
    }
    re::DynamicArray<re::BindPoint::BindPointData>::deinit((uint64_t)&v11);
    re::DynamicArray<re::BindPoint::BindPointData>::deinit((uint64_t)&v11);
  }
  return v2;
}

uint64_t REBindPointCreateReferenceForEntityQuatF(re *a1, const char *a2)
{
  uint64_t v2;
  unsigned __int8 v4;
  re *v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v9[2];
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  re::BindNode *v16[5];

  v2 = 0;
  v16[4] = *(re::BindNode **)MEMORY[0x24BDAC8D0];
  if (a1 && a2)
  {
    re::makeBindNode(a1, (uint64_t)v16);
    if ((v4 & 1) == 0
    {
      re::introspect<re::Quaternion<float>>(void)::info = re::introspect_QuaternionF(0);
    }
    v9[0] = (uint64_t)a2;
    v9[1] = strlen(a2);
    re::BindNode::bindPoint(v16, re::introspect<re::Quaternion<float>>(void)::info, v9, (uint64_t)&v10);
    re::BindNode::deinit((re::BindNode *)v16);
    if (v13)
    {
      v6 = re::globalAllocators(v5);
      v2 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v6[2] + 32))(v6[2], 48, 8);
      v7 = v10;
      *(_QWORD *)(v2 + 40) = 0;
      *(_DWORD *)(v2 + 32) = 0;
      *(_QWORD *)(v2 + 16) = 0;
      *(_QWORD *)(v2 + 24) = 0;
      *(_QWORD *)v2 = v7;
      *(_QWORD *)(v2 + 8) = 0;
      *(_QWORD *)(v2 + 8) = v11;
      *(_QWORD *)(v2 + 16) = v12;
      *(_QWORD *)(v2 + 24) = v13;
      v11 = 0;
      v12 = 0;
      v13 = 0;
      *(_QWORD *)(v2 + 40) = v15;
      v15 = 0;
      ++v14;
      ++*(_DWORD *)(v2 + 32);
    }
    else
    {
      v2 = 0;
    }
    re::DynamicArray<re::BindPoint::BindPointData>::deinit((uint64_t)&v11);
    re::DynamicArray<re::BindPoint::BindPointData>::deinit((uint64_t)&v11);
  }
  return v2;
}

uint64_t REBindPointCreateReferenceForEntitySRT(re *a1, const char *a2)
{
  uint64_t v2;
  unsigned __int8 v4;
  re *v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v9[2];
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  re::BindNode *v16[5];

  v2 = 0;
  v16[4] = *(re::BindNode **)MEMORY[0x24BDAC8D0];
  if (a1 && a2)
  {
    re::makeBindNode(a1, (uint64_t)v16);
    if ((v4 & 1) == 0
    {
      re::introspect<re::GenericSRT<float>>(void)::info = re::introspect_SRT(0);
    }
    v9[0] = (uint64_t)a2;
    v9[1] = strlen(a2);
    re::BindNode::bindPoint(v16, re::introspect<re::GenericSRT<float>>(void)::info, v9, (uint64_t)&v10);
    re::BindNode::deinit((re::BindNode *)v16);
    if (v13)
    {
      v6 = re::globalAllocators(v5);
      v2 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v6[2] + 32))(v6[2], 48, 8);
      v7 = v10;
      *(_QWORD *)(v2 + 40) = 0;
      *(_DWORD *)(v2 + 32) = 0;
      *(_QWORD *)(v2 + 16) = 0;
      *(_QWORD *)(v2 + 24) = 0;
      *(_QWORD *)v2 = v7;
      *(_QWORD *)(v2 + 8) = 0;
      *(_QWORD *)(v2 + 8) = v11;
      *(_QWORD *)(v2 + 16) = v12;
      *(_QWORD *)(v2 + 24) = v13;
      v11 = 0;
      v12 = 0;
      v13 = 0;
      *(_QWORD *)(v2 + 40) = v15;
      v15 = 0;
      ++v14;
      ++*(_DWORD *)(v2 + 32);
    }
    else
    {
      v2 = 0;
    }
    re::DynamicArray<re::BindPoint::BindPointData>::deinit((uint64_t)&v11);
    re::DynamicArray<re::BindPoint::BindPointData>::deinit((uint64_t)&v11);
  }
  return v2;
}

uint64_t REBindPointCreateReferenceForComponent(re *a1, const char *a2)
{
  uint64_t result;

  result = REBindPointCreateReferenceForComponentString(a1, a2);
  if (!result)
  {
    result = REBindPointCreateReferenceForComponentBool(a1, a2);
    if (!result)
    {
      result = REBindPointCreateReferenceForComponentInt8(a1, a2);
      if (!result)
      {
        result = REBindPointCreateReferenceForComponentUInt8(a1, a2);
        if (!result)
        {
          result = REBindPointCreateReferenceForComponentInt16(a1, a2);
          if (!result)
          {
            result = REBindPointCreateReferenceForComponentUInt16(a1, a2);
            if (!result)
            {
              result = REBindPointCreateReferenceForComponentInt32(a1, a2);
              if (!result)
              {
                result = REBindPointCreateReferenceForComponentUInt32(a1, a2);
                if (!result)
                {
                  result = REBindPointCreateReferenceForComponentInt64(a1, a2);
                  if (!result)
                  {
                    result = REBindPointCreateReferenceForComponentFloat(a1, a2);
                    if (!result)
                    {
                      result = REBindPointCreateReferenceForComponentFloat2(a1, a2);
                      if (!result)
                      {
                        result = REBindPointCreateReferenceForComponentFloat3(a1, a2);
                        if (!result)
                        {
                          result = REBindPointCreateReferenceForComponentFloat4(a1, a2);
                          if (!result)
                          {
                            result = REBindPointCreateReferenceForComponentDouble(a1, a2);
                            if (!result)
                            {
                              result = REBindPointCreateReferenceForComponentDouble2(a1, a2);
                              if (!result)
                              {
                                result = REBindPointCreateReferenceForComponentDouble3(a1, a2);
                                if (!result)
                                {
                                  result = REBindPointCreateReferenceForComponentDouble4(a1, a2);
                                  if (!result)
                                  {
                                    result = REBindPointCreateReferenceForComponentQuatF(a1, a2);
                                    if (!result)
                                      return REBindPointCreateReferenceForComponentSRT(a1, a2);
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  return result;
}

uint64_t REBindPointCreateReferenceForComponentString(re *a1, const char *a2)
{
  uint64_t v2;
  unsigned __int8 v4;
  re *v5;
  uint64_t *v6;
  uint64_t v7;
  const re::IntrospectionBase *v9;
  uint64_t v10[2];
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  re::BindNode *v17[5];

  v2 = 0;
  v17[4] = *(re::BindNode **)MEMORY[0x24BDAC8D0];
  if (a1 && a2)
  {
    re::makeBindNode(a1, (uint64_t)v17);
    if ((v4 & 1) == 0
    {
      re::introspect<re::DynamicString>(void)::info = (uint64_t)re::IntrospectionInfo<re::DynamicString>::get(0, v9);
    }
    v10[0] = (uint64_t)a2;
    v10[1] = strlen(a2);
    re::BindNode::bindPoint(v17, re::introspect<re::DynamicString>(void)::info, v10, (uint64_t)&v11);
    re::BindNode::deinit((re::BindNode *)v17);
    if (v14)
    {
      v6 = re::globalAllocators(v5);
      v2 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v6[2] + 32))(v6[2], 48, 8);
      v7 = v11;
      *(_QWORD *)(v2 + 40) = 0;
      *(_DWORD *)(v2 + 32) = 0;
      *(_QWORD *)(v2 + 16) = 0;
      *(_QWORD *)(v2 + 24) = 0;
      *(_QWORD *)v2 = v7;
      *(_QWORD *)(v2 + 8) = 0;
      *(_QWORD *)(v2 + 8) = v12;
      *(_QWORD *)(v2 + 16) = v13;
      *(_QWORD *)(v2 + 24) = v14;
      v12 = 0;
      v13 = 0;
      v14 = 0;
      *(_QWORD *)(v2 + 40) = v16;
      v16 = 0;
      ++v15;
      ++*(_DWORD *)(v2 + 32);
    }
    else
    {
      v2 = 0;
    }
    re::DynamicArray<re::BindPoint::BindPointData>::deinit((uint64_t)&v12);
    re::DynamicArray<re::BindPoint::BindPointData>::deinit((uint64_t)&v12);
  }
  return v2;
}

uint64_t REBindPointCreateReferenceForComponentBool(re *a1, const char *a2)
{
  uint64_t v2;
  unsigned __int8 v4;
  re *v5;
  uint64_t *v6;
  uint64_t v7;
  const re::IntrospectionBase *v9;
  uint64_t v10[2];
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  re::BindNode *v17[5];

  v2 = 0;
  v17[4] = *(re::BindNode **)MEMORY[0x24BDAC8D0];
  if (a1 && a2)
  {
    re::makeBindNode(a1, (uint64_t)v17);
    if ((v4 & 1) == 0
    {
      re::introspect<BOOL>(void)::info = re::introspect_BOOL(0, v9);
    }
    v10[0] = (uint64_t)a2;
    v10[1] = strlen(a2);
    re::BindNode::bindPoint(v17, (uint64_t)re::introspect<BOOL>(void)::info, v10, (uint64_t)&v11);
    re::BindNode::deinit((re::BindNode *)v17);
    if (v14)
    {
      v6 = re::globalAllocators(v5);
      v2 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v6[2] + 32))(v6[2], 48, 8);
      v7 = v11;
      *(_QWORD *)(v2 + 40) = 0;
      *(_DWORD *)(v2 + 32) = 0;
      *(_QWORD *)(v2 + 16) = 0;
      *(_QWORD *)(v2 + 24) = 0;
      *(_QWORD *)v2 = v7;
      *(_QWORD *)(v2 + 8) = 0;
      *(_QWORD *)(v2 + 8) = v12;
      *(_QWORD *)(v2 + 16) = v13;
      *(_QWORD *)(v2 + 24) = v14;
      v12 = 0;
      v13 = 0;
      v14 = 0;
      *(_QWORD *)(v2 + 40) = v16;
      v16 = 0;
      ++v15;
      ++*(_DWORD *)(v2 + 32);
    }
    else
    {
      v2 = 0;
    }
    re::DynamicArray<re::BindPoint::BindPointData>::deinit((uint64_t)&v12);
    re::DynamicArray<re::BindPoint::BindPointData>::deinit((uint64_t)&v12);
  }
  return v2;
}

uint64_t REBindPointCreateReferenceForComponentInt8(re *a1, const char *a2)
{
  uint64_t v2;
  unsigned __int8 v4;
  re *v5;
  uint64_t *v6;
  uint64_t v7;
  const re::IntrospectionBase *v9;
  uint64_t v10[2];
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  re::BindNode *v17[5];

  v2 = 0;
  v17[4] = *(re::BindNode **)MEMORY[0x24BDAC8D0];
  if (a1 && a2)
  {
    re::makeBindNode(a1, (uint64_t)v17);
    if ((v4 & 1) == 0
    {
      re::introspect<char>(void)::info = (uint64_t)re::introspect_char(0, v9);
    }
    v10[0] = (uint64_t)a2;
    v10[1] = strlen(a2);
    re::BindNode::bindPoint(v17, re::introspect<char>(void)::info, v10, (uint64_t)&v11);
    re::BindNode::deinit((re::BindNode *)v17);
    if (v14)
    {
      v6 = re::globalAllocators(v5);
      v2 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v6[2] + 32))(v6[2], 48, 8);
      v7 = v11;
      *(_QWORD *)(v2 + 40) = 0;
      *(_DWORD *)(v2 + 32) = 0;
      *(_QWORD *)(v2 + 16) = 0;
      *(_QWORD *)(v2 + 24) = 0;
      *(_QWORD *)v2 = v7;
      *(_QWORD *)(v2 + 8) = 0;
      *(_QWORD *)(v2 + 8) = v12;
      *(_QWORD *)(v2 + 16) = v13;
      *(_QWORD *)(v2 + 24) = v14;
      v12 = 0;
      v13 = 0;
      v14 = 0;
      *(_QWORD *)(v2 + 40) = v16;
      v16 = 0;
      ++v15;
      ++*(_DWORD *)(v2 + 32);
    }
    else
    {
      v2 = 0;
    }
    re::DynamicArray<re::BindPoint::BindPointData>::deinit((uint64_t)&v12);
    re::DynamicArray<re::BindPoint::BindPointData>::deinit((uint64_t)&v12);
  }
  return v2;
}

uint64_t REBindPointCreateReferenceForComponentUInt8(re *a1, const char *a2)
{
  uint64_t v2;
  unsigned __int8 v4;
  re *v5;
  uint64_t *v6;
  uint64_t v7;
  const re::IntrospectionBase *v9;
  uint64_t v10[2];
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  re::BindNode *v17[5];

  v2 = 0;
  v17[4] = *(re::BindNode **)MEMORY[0x24BDAC8D0];
  if (a1 && a2)
  {
    re::makeBindNode(a1, (uint64_t)v17);
    if ((v4 & 1) == 0
    {
      re::introspect<unsigned char>(void)::info = re::introspect_uint8_t(0, v9);
    }
    v10[0] = (uint64_t)a2;
    v10[1] = strlen(a2);
    re::BindNode::bindPoint(v17, (uint64_t)re::introspect<unsigned char>(void)::info, v10, (uint64_t)&v11);
    re::BindNode::deinit((re::BindNode *)v17);
    if (v14)
    {
      v6 = re::globalAllocators(v5);
      v2 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v6[2] + 32))(v6[2], 48, 8);
      v7 = v11;
      *(_QWORD *)(v2 + 40) = 0;
      *(_DWORD *)(v2 + 32) = 0;
      *(_QWORD *)(v2 + 16) = 0;
      *(_QWORD *)(v2 + 24) = 0;
      *(_QWORD *)v2 = v7;
      *(_QWORD *)(v2 + 8) = 0;
      *(_QWORD *)(v2 + 8) = v12;
      *(_QWORD *)(v2 + 16) = v13;
      *(_QWORD *)(v2 + 24) = v14;
      v12 = 0;
      v13 = 0;
      v14 = 0;
      *(_QWORD *)(v2 + 40) = v16;
      v16 = 0;
      ++v15;
      ++*(_DWORD *)(v2 + 32);
    }
    else
    {
      v2 = 0;
    }
    re::DynamicArray<re::BindPoint::BindPointData>::deinit((uint64_t)&v12);
    re::DynamicArray<re::BindPoint::BindPointData>::deinit((uint64_t)&v12);
  }
  return v2;
}

uint64_t REBindPointCreateReferenceForComponentInt16(re *a1, const char *a2)
{
  uint64_t v2;
  unsigned __int8 v4;
  re *v5;
  uint64_t *v6;
  uint64_t v7;
  const re::IntrospectionBase *v9;
  uint64_t v10[2];
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  re::BindNode *v17[5];

  v2 = 0;
  v17[4] = *(re::BindNode **)MEMORY[0x24BDAC8D0];
  if (a1 && a2)
  {
    re::makeBindNode(a1, (uint64_t)v17);
    if ((v4 & 1) == 0
    {
      re::introspect<short>(void)::info = (uint64_t)re::introspect_short(0, v9);
    }
    v10[0] = (uint64_t)a2;
    v10[1] = strlen(a2);
    re::BindNode::bindPoint(v17, re::introspect<short>(void)::info, v10, (uint64_t)&v11);
    re::BindNode::deinit((re::BindNode *)v17);
    if (v14)
    {
      v6 = re::globalAllocators(v5);
      v2 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v6[2] + 32))(v6[2], 48, 8);
      v7 = v11;
      *(_QWORD *)(v2 + 40) = 0;
      *(_DWORD *)(v2 + 32) = 0;
      *(_QWORD *)(v2 + 16) = 0;
      *(_QWORD *)(v2 + 24) = 0;
      *(_QWORD *)v2 = v7;
      *(_QWORD *)(v2 + 8) = 0;
      *(_QWORD *)(v2 + 8) = v12;
      *(_QWORD *)(v2 + 16) = v13;
      *(_QWORD *)(v2 + 24) = v14;
      v12 = 0;
      v13 = 0;
      v14 = 0;
      *(_QWORD *)(v2 + 40) = v16;
      v16 = 0;
      ++v15;
      ++*(_DWORD *)(v2 + 32);
    }
    else
    {
      v2 = 0;
    }
    re::DynamicArray<re::BindPoint::BindPointData>::deinit((uint64_t)&v12);
    re::DynamicArray<re::BindPoint::BindPointData>::deinit((uint64_t)&v12);
  }
  return v2;
}

uint64_t REBindPointCreateReferenceForComponentUInt16(re *a1, const char *a2)
{
  uint64_t v2;
  unsigned __int8 v4;
  re *v5;
  uint64_t *v6;
  uint64_t v7;
  const re::IntrospectionBase *v9;
  uint64_t v10[2];
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  re::BindNode *v17[5];

  v2 = 0;
  v17[4] = *(re::BindNode **)MEMORY[0x24BDAC8D0];
  if (a1 && a2)
  {
    re::makeBindNode(a1, (uint64_t)v17);
    if ((v4 & 1) == 0
    {
      re::introspect<unsigned short>(void)::info = (uint64_t)re::introspect_uint16_t(0, v9);
    }
    v10[0] = (uint64_t)a2;
    v10[1] = strlen(a2);
    re::BindNode::bindPoint(v17, re::introspect<unsigned short>(void)::info, v10, (uint64_t)&v11);
    re::BindNode::deinit((re::BindNode *)v17);
    if (v14)
    {
      v6 = re::globalAllocators(v5);
      v2 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v6[2] + 32))(v6[2], 48, 8);
      v7 = v11;
      *(_QWORD *)(v2 + 40) = 0;
      *(_DWORD *)(v2 + 32) = 0;
      *(_QWORD *)(v2 + 16) = 0;
      *(_QWORD *)(v2 + 24) = 0;
      *(_QWORD *)v2 = v7;
      *(_QWORD *)(v2 + 8) = 0;
      *(_QWORD *)(v2 + 8) = v12;
      *(_QWORD *)(v2 + 16) = v13;
      *(_QWORD *)(v2 + 24) = v14;
      v12 = 0;
      v13 = 0;
      v14 = 0;
      *(_QWORD *)(v2 + 40) = v16;
      v16 = 0;
      ++v15;
      ++*(_DWORD *)(v2 + 32);
    }
    else
    {
      v2 = 0;
    }
    re::DynamicArray<re::BindPoint::BindPointData>::deinit((uint64_t)&v12);
    re::DynamicArray<re::BindPoint::BindPointData>::deinit((uint64_t)&v12);
  }
  return v2;
}

uint64_t REBindPointCreateReferenceForComponentInt32(re *a1, const char *a2)
{
  uint64_t v2;
  unsigned __int8 v4;
  re *v5;
  uint64_t *v6;
  uint64_t v7;
  const re::IntrospectionBase *v9;
  uint64_t v10[2];
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  re::BindNode *v17[5];

  v2 = 0;
  v17[4] = *(re::BindNode **)MEMORY[0x24BDAC8D0];
  if (a1 && a2)
  {
    re::makeBindNode(a1, (uint64_t)v17);
    if ((v4 & 1) == 0
    {
      re::introspect<int>(void)::info = re::introspect_int(0, v9);
    }
    v10[0] = (uint64_t)a2;
    v10[1] = strlen(a2);
    re::BindNode::bindPoint(v17, (uint64_t)re::introspect<int>(void)::info, v10, (uint64_t)&v11);
    re::BindNode::deinit((re::BindNode *)v17);
    if (v14)
    {
      v6 = re::globalAllocators(v5);
      v2 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v6[2] + 32))(v6[2], 48, 8);
      v7 = v11;
      *(_QWORD *)(v2 + 40) = 0;
      *(_DWORD *)(v2 + 32) = 0;
      *(_QWORD *)(v2 + 16) = 0;
      *(_QWORD *)(v2 + 24) = 0;
      *(_QWORD *)v2 = v7;
      *(_QWORD *)(v2 + 8) = 0;
      *(_QWORD *)(v2 + 8) = v12;
      *(_QWORD *)(v2 + 16) = v13;
      *(_QWORD *)(v2 + 24) = v14;
      v12 = 0;
      v13 = 0;
      v14 = 0;
      *(_QWORD *)(v2 + 40) = v16;
      v16 = 0;
      ++v15;
      ++*(_DWORD *)(v2 + 32);
    }
    else
    {
      v2 = 0;
    }
    re::DynamicArray<re::BindPoint::BindPointData>::deinit((uint64_t)&v12);
    re::DynamicArray<re::BindPoint::BindPointData>::deinit((uint64_t)&v12);
  }
  return v2;
}

uint64_t REBindPointCreateReferenceForComponentUInt32(re *a1, const char *a2)
{
  uint64_t v2;
  unsigned __int8 v4;
  re *v5;
  uint64_t *v6;
  uint64_t v7;
  const re::IntrospectionBase *v9;
  uint64_t v10[2];
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  re::BindNode *v17[5];

  v2 = 0;
  v17[4] = *(re::BindNode **)MEMORY[0x24BDAC8D0];
  if (a1 && a2)
  {
    re::makeBindNode(a1, (uint64_t)v17);
    if ((v4 & 1) == 0
    {
      re::introspect<unsigned int>(void)::info = re::introspect_uint32_t(0, v9);
    }
    v10[0] = (uint64_t)a2;
    v10[1] = strlen(a2);
    re::BindNode::bindPoint(v17, (uint64_t)re::introspect<unsigned int>(void)::info, v10, (uint64_t)&v11);
    re::BindNode::deinit((re::BindNode *)v17);
    if (v14)
    {
      v6 = re::globalAllocators(v5);
      v2 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v6[2] + 32))(v6[2], 48, 8);
      v7 = v11;
      *(_QWORD *)(v2 + 40) = 0;
      *(_DWORD *)(v2 + 32) = 0;
      *(_QWORD *)(v2 + 16) = 0;
      *(_QWORD *)(v2 + 24) = 0;
      *(_QWORD *)v2 = v7;
      *(_QWORD *)(v2 + 8) = 0;
      *(_QWORD *)(v2 + 8) = v12;
      *(_QWORD *)(v2 + 16) = v13;
      *(_QWORD *)(v2 + 24) = v14;
      v12 = 0;
      v13 = 0;
      v14 = 0;
      *(_QWORD *)(v2 + 40) = v16;
      v16 = 0;
      ++v15;
      ++*(_DWORD *)(v2 + 32);
    }
    else
    {
      v2 = 0;
    }
    re::DynamicArray<re::BindPoint::BindPointData>::deinit((uint64_t)&v12);
    re::DynamicArray<re::BindPoint::BindPointData>::deinit((uint64_t)&v12);
  }
  return v2;
}

uint64_t REBindPointCreateReferenceForComponentInt64(re *a1, const char *a2)
{
  uint64_t v2;
  unsigned __int8 v4;
  re *v5;
  uint64_t *v6;
  uint64_t v7;
  const re::IntrospectionBase *v9;
  uint64_t v10[2];
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  re::BindNode *v17[5];

  v2 = 0;
  v17[4] = *(re::BindNode **)MEMORY[0x24BDAC8D0];
  if (a1 && a2)
  {
    re::makeBindNode(a1, (uint64_t)v17);
    if ((v4 & 1) == 0
    {
      re::introspect<long long>(void)::info = (uint64_t)re::introspect_int64_t(0, v9);
    }
    v10[0] = (uint64_t)a2;
    v10[1] = strlen(a2);
    re::BindNode::bindPoint(v17, re::introspect<long long>(void)::info, v10, (uint64_t)&v11);
    re::BindNode::deinit((re::BindNode *)v17);
    if (v14)
    {
      v6 = re::globalAllocators(v5);
      v2 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v6[2] + 32))(v6[2], 48, 8);
      v7 = v11;
      *(_QWORD *)(v2 + 40) = 0;
      *(_DWORD *)(v2 + 32) = 0;
      *(_QWORD *)(v2 + 16) = 0;
      *(_QWORD *)(v2 + 24) = 0;
      *(_QWORD *)v2 = v7;
      *(_QWORD *)(v2 + 8) = 0;
      *(_QWORD *)(v2 + 8) = v12;
      *(_QWORD *)(v2 + 16) = v13;
      *(_QWORD *)(v2 + 24) = v14;
      v12 = 0;
      v13 = 0;
      v14 = 0;
      *(_QWORD *)(v2 + 40) = v16;
      v16 = 0;
      ++v15;
      ++*(_DWORD *)(v2 + 32);
    }
    else
    {
      v2 = 0;
    }
    re::DynamicArray<re::BindPoint::BindPointData>::deinit((uint64_t)&v12);
    re::DynamicArray<re::BindPoint::BindPointData>::deinit((uint64_t)&v12);
  }
  return v2;
}

uint64_t REBindPointCreateReferenceForComponentFloat(re *a1, const char *a2)
{
  uint64_t v2;
  unsigned __int8 v4;
  re *v5;
  uint64_t *v6;
  uint64_t v7;
  const re::IntrospectionBase *v9;
  uint64_t v10[2];
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  re::BindNode *v17[5];

  v2 = 0;
  v17[4] = *(re::BindNode **)MEMORY[0x24BDAC8D0];
  if (a1 && a2)
  {
    re::makeBindNode(a1, (uint64_t)v17);
    if ((v4 & 1) == 0
    {
      re::introspect<float>(void)::info = re::introspect_float(0, v9);
    }
    v10[0] = (uint64_t)a2;
    v10[1] = strlen(a2);
    re::BindNode::bindPoint(v17, (uint64_t)re::introspect<float>(void)::info, v10, (uint64_t)&v11);
    re::BindNode::deinit((re::BindNode *)v17);
    if (v14)
    {
      v6 = re::globalAllocators(v5);
      v2 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v6[2] + 32))(v6[2], 48, 8);
      v7 = v11;
      *(_QWORD *)(v2 + 40) = 0;
      *(_DWORD *)(v2 + 32) = 0;
      *(_QWORD *)(v2 + 16) = 0;
      *(_QWORD *)(v2 + 24) = 0;
      *(_QWORD *)v2 = v7;
      *(_QWORD *)(v2 + 8) = 0;
      *(_QWORD *)(v2 + 8) = v12;
      *(_QWORD *)(v2 + 16) = v13;
      *(_QWORD *)(v2 + 24) = v14;
      v12 = 0;
      v13 = 0;
      v14 = 0;
      *(_QWORD *)(v2 + 40) = v16;
      v16 = 0;
      ++v15;
      ++*(_DWORD *)(v2 + 32);
    }
    else
    {
      v2 = 0;
    }
    re::DynamicArray<re::BindPoint::BindPointData>::deinit((uint64_t)&v12);
    re::DynamicArray<re::BindPoint::BindPointData>::deinit((uint64_t)&v12);
  }
  return v2;
}

uint64_t REBindPointCreateReferenceForComponentFloat2(re *a1, const char *a2)
{
  uint64_t v2;
  unsigned __int8 v4;
  re *v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v9[2];
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  re::BindNode *v16[5];

  v2 = 0;
  v16[4] = *(re::BindNode **)MEMORY[0x24BDAC8D0];
  if (a1 && a2)
  {
    re::makeBindNode(a1, (uint64_t)v16);
    if ((v4 & 1) == 0
    {
      re::introspect<re::Vector2<float>>(void)::info = (_UNKNOWN *)re::introspect_Vector2F(0);
    }
    v9[0] = (uint64_t)a2;
    v9[1] = strlen(a2);
    re::BindNode::bindPoint(v16, (uint64_t)re::introspect<re::Vector2<float>>(void)::info, v9, (uint64_t)&v10);
    re::BindNode::deinit((re::BindNode *)v16);
    if (v13)
    {
      v6 = re::globalAllocators(v5);
      v2 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v6[2] + 32))(v6[2], 48, 8);
      v7 = v10;
      *(_QWORD *)(v2 + 40) = 0;
      *(_DWORD *)(v2 + 32) = 0;
      *(_QWORD *)(v2 + 16) = 0;
      *(_QWORD *)(v2 + 24) = 0;
      *(_QWORD *)v2 = v7;
      *(_QWORD *)(v2 + 8) = 0;
      *(_QWORD *)(v2 + 8) = v11;
      *(_QWORD *)(v2 + 16) = v12;
      *(_QWORD *)(v2 + 24) = v13;
      v11 = 0;
      v12 = 0;
      v13 = 0;
      *(_QWORD *)(v2 + 40) = v15;
      v15 = 0;
      ++v14;
      ++*(_DWORD *)(v2 + 32);
    }
    else
    {
      v2 = 0;
    }
    re::DynamicArray<re::BindPoint::BindPointData>::deinit((uint64_t)&v11);
    re::DynamicArray<re::BindPoint::BindPointData>::deinit((uint64_t)&v11);
  }
  return v2;
}

uint64_t REBindPointCreateReferenceForComponentFloat3(re *a1, const char *a2)
{
  uint64_t v2;
  unsigned __int8 v4;
  re *v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v9[2];
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  re::BindNode *v16[5];

  v2 = 0;
  v16[4] = *(re::BindNode **)MEMORY[0x24BDAC8D0];
  if (a1 && a2)
  {
    re::makeBindNode(a1, (uint64_t)v16);
    if ((v4 & 1) == 0
    {
      re::introspect<re::Vector3<float>>(void)::info = (_UNKNOWN *)re::introspect_Vector3F(0);
    }
    v9[0] = (uint64_t)a2;
    v9[1] = strlen(a2);
    re::BindNode::bindPoint(v16, (uint64_t)re::introspect<re::Vector3<float>>(void)::info, v9, (uint64_t)&v10);
    re::BindNode::deinit((re::BindNode *)v16);
    if (v13)
    {
      v6 = re::globalAllocators(v5);
      v2 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v6[2] + 32))(v6[2], 48, 8);
      v7 = v10;
      *(_QWORD *)(v2 + 40) = 0;
      *(_DWORD *)(v2 + 32) = 0;
      *(_QWORD *)(v2 + 16) = 0;
      *(_QWORD *)(v2 + 24) = 0;
      *(_QWORD *)v2 = v7;
      *(_QWORD *)(v2 + 8) = 0;
      *(_QWORD *)(v2 + 8) = v11;
      *(_QWORD *)(v2 + 16) = v12;
      *(_QWORD *)(v2 + 24) = v13;
      v11 = 0;
      v12 = 0;
      v13 = 0;
      *(_QWORD *)(v2 + 40) = v15;
      v15 = 0;
      ++v14;
      ++*(_DWORD *)(v2 + 32);
    }
    else
    {
      v2 = 0;
    }
    re::DynamicArray<re::BindPoint::BindPointData>::deinit((uint64_t)&v11);
    re::DynamicArray<re::BindPoint::BindPointData>::deinit((uint64_t)&v11);
  }
  return v2;
}

uint64_t REBindPointCreateReferenceForComponentFloat4(re *a1, const char *a2)
{
  uint64_t v2;
  unsigned __int8 v4;
  re *v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v9[2];
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  re::BindNode *v16[5];

  v2 = 0;
  v16[4] = *(re::BindNode **)MEMORY[0x24BDAC8D0];
  if (a1 && a2)
  {
    re::makeBindNode(a1, (uint64_t)v16);
    if ((v4 & 1) == 0
    {
      re::introspect<re::Vector4<float>>(void)::info = (_UNKNOWN *)re::introspect_Vector4F(0);
    }
    v9[0] = (uint64_t)a2;
    v9[1] = strlen(a2);
    re::BindNode::bindPoint(v16, (uint64_t)re::introspect<re::Vector4<float>>(void)::info, v9, (uint64_t)&v10);
    re::BindNode::deinit((re::BindNode *)v16);
    if (v13)
    {
      v6 = re::globalAllocators(v5);
      v2 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v6[2] + 32))(v6[2], 48, 8);
      v7 = v10;
      *(_QWORD *)(v2 + 40) = 0;
      *(_DWORD *)(v2 + 32) = 0;
      *(_QWORD *)(v2 + 16) = 0;
      *(_QWORD *)(v2 + 24) = 0;
      *(_QWORD *)v2 = v7;
      *(_QWORD *)(v2 + 8) = 0;
      *(_QWORD *)(v2 + 8) = v11;
      *(_QWORD *)(v2 + 16) = v12;
      *(_QWORD *)(v2 + 24) = v13;
      v11 = 0;
      v12 = 0;
      v13 = 0;
      *(_QWORD *)(v2 + 40) = v15;
      v15 = 0;
      ++v14;
      ++*(_DWORD *)(v2 + 32);
    }
    else
    {
      v2 = 0;
    }
    re::DynamicArray<re::BindPoint::BindPointData>::deinit((uint64_t)&v11);
    re::DynamicArray<re::BindPoint::BindPointData>::deinit((uint64_t)&v11);
  }
  return v2;
}

uint64_t REBindPointCreateReferenceForComponentDouble(re *a1, const char *a2)
{
  uint64_t v2;
  unsigned __int8 v4;
  re *v5;
  uint64_t *v6;
  uint64_t v7;
  const re::IntrospectionBase *v9;
  uint64_t v10[2];
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  re::BindNode *v17[5];

  v2 = 0;
  v17[4] = *(re::BindNode **)MEMORY[0x24BDAC8D0];
  if (a1 && a2)
  {
    re::makeBindNode(a1, (uint64_t)v17);
    if ((v4 & 1) == 0
    {
      re::introspect<double>(void)::info = (uint64_t)re::introspect_double(0, v9);
    }
    v10[0] = (uint64_t)a2;
    v10[1] = strlen(a2);
    re::BindNode::bindPoint(v17, re::introspect<double>(void)::info, v10, (uint64_t)&v11);
    re::BindNode::deinit((re::BindNode *)v17);
    if (v14)
    {
      v6 = re::globalAllocators(v5);
      v2 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v6[2] + 32))(v6[2], 48, 8);
      v7 = v11;
      *(_QWORD *)(v2 + 40) = 0;
      *(_DWORD *)(v2 + 32) = 0;
      *(_QWORD *)(v2 + 16) = 0;
      *(_QWORD *)(v2 + 24) = 0;
      *(_QWORD *)v2 = v7;
      *(_QWORD *)(v2 + 8) = 0;
      *(_QWORD *)(v2 + 8) = v12;
      *(_QWORD *)(v2 + 16) = v13;
      *(_QWORD *)(v2 + 24) = v14;
      v12 = 0;
      v13 = 0;
      v14 = 0;
      *(_QWORD *)(v2 + 40) = v16;
      v16 = 0;
      ++v15;
      ++*(_DWORD *)(v2 + 32);
    }
    else
    {
      v2 = 0;
    }
    re::DynamicArray<re::BindPoint::BindPointData>::deinit((uint64_t)&v12);
    re::DynamicArray<re::BindPoint::BindPointData>::deinit((uint64_t)&v12);
  }
  return v2;
}

uint64_t REBindPointCreateReferenceForComponentDouble2(re *a1, const char *a2)
{
  uint64_t v2;
  unsigned __int8 v4;
  re *v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v9[2];
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  re::BindNode *v16[5];

  v2 = 0;
  v16[4] = *(re::BindNode **)MEMORY[0x24BDAC8D0];
  if (a1 && a2)
  {
    re::makeBindNode(a1, (uint64_t)v16);
    v4 = atomic_load((unsigned __int8 *)&qword_254123F18);
    if ((v4 & 1) == 0 && __cxa_guard_acquire(&qword_254123F18))
    {
      _MergedGlobals_506 = re::introspect_Vector2D(0);
      __cxa_guard_release(&qword_254123F18);
    }
    v9[0] = (uint64_t)a2;
    v9[1] = strlen(a2);
    re::BindNode::bindPoint(v16, _MergedGlobals_506, v9, (uint64_t)&v10);
    re::BindNode::deinit((re::BindNode *)v16);
    if (v13)
    {
      v6 = re::globalAllocators(v5);
      v2 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v6[2] + 32))(v6[2], 48, 8);
      v7 = v10;
      *(_QWORD *)(v2 + 40) = 0;
      *(_DWORD *)(v2 + 32) = 0;
      *(_QWORD *)(v2 + 16) = 0;
      *(_QWORD *)(v2 + 24) = 0;
      *(_QWORD *)v2 = v7;
      *(_QWORD *)(v2 + 8) = 0;
      *(_QWORD *)(v2 + 8) = v11;
      *(_QWORD *)(v2 + 16) = v12;
      *(_QWORD *)(v2 + 24) = v13;
      v11 = 0;
      v12 = 0;
      v13 = 0;
      *(_QWORD *)(v2 + 40) = v15;
      v15 = 0;
      ++v14;
      ++*(_DWORD *)(v2 + 32);
    }
    else
    {
      v2 = 0;
    }
    re::DynamicArray<re::BindPoint::BindPointData>::deinit((uint64_t)&v11);
    re::DynamicArray<re::BindPoint::BindPointData>::deinit((uint64_t)&v11);
  }
  return v2;
}

uint64_t REBindPointCreateReferenceForComponentDouble3(re *a1, const char *a2)
{
  uint64_t v2;
  unsigned __int8 v4;
  re *v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v9[2];
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  re::BindNode *v16[5];

  v2 = 0;
  v16[4] = *(re::BindNode **)MEMORY[0x24BDAC8D0];
  if (a1 && a2)
  {
    re::makeBindNode(a1, (uint64_t)v16);
    v4 = atomic_load((unsigned __int8 *)&qword_254123F28);
    if ((v4 & 1) == 0 && __cxa_guard_acquire(&qword_254123F28))
    {
      qword_254123F20 = re::introspect_Vector3D(0);
      __cxa_guard_release(&qword_254123F28);
    }
    v9[0] = (uint64_t)a2;
    v9[1] = strlen(a2);
    re::BindNode::bindPoint(v16, qword_254123F20, v9, (uint64_t)&v10);
    re::BindNode::deinit((re::BindNode *)v16);
    if (v13)
    {
      v6 = re::globalAllocators(v5);
      v2 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v6[2] + 32))(v6[2], 48, 8);
      v7 = v10;
      *(_QWORD *)(v2 + 40) = 0;
      *(_DWORD *)(v2 + 32) = 0;
      *(_QWORD *)(v2 + 16) = 0;
      *(_QWORD *)(v2 + 24) = 0;
      *(_QWORD *)v2 = v7;
      *(_QWORD *)(v2 + 8) = 0;
      *(_QWORD *)(v2 + 8) = v11;
      *(_QWORD *)(v2 + 16) = v12;
      *(_QWORD *)(v2 + 24) = v13;
      v11 = 0;
      v12 = 0;
      v13 = 0;
      *(_QWORD *)(v2 + 40) = v15;
      v15 = 0;
      ++v14;
      ++*(_DWORD *)(v2 + 32);
    }
    else
    {
      v2 = 0;
    }
    re::DynamicArray<re::BindPoint::BindPointData>::deinit((uint64_t)&v11);
    re::DynamicArray<re::BindPoint::BindPointData>::deinit((uint64_t)&v11);
  }
  return v2;
}

uint64_t REBindPointCreateReferenceForComponentDouble4(re *a1, const char *a2)
{
  uint64_t v2;
  unsigned __int8 v4;
  re *v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v9[2];
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  re::BindNode *v16[5];

  v2 = 0;
  v16[4] = *(re::BindNode **)MEMORY[0x24BDAC8D0];
  if (a1 && a2)
  {
    re::makeBindNode(a1, (uint64_t)v16);
    v4 = atomic_load((unsigned __int8 *)&qword_254123F38);
    if ((v4 & 1) == 0 && __cxa_guard_acquire(&qword_254123F38))
    {
      qword_254123F30 = re::introspect_Vector4D(0);
      __cxa_guard_release(&qword_254123F38);
    }
    v9[0] = (uint64_t)a2;
    v9[1] = strlen(a2);
    re::BindNode::bindPoint(v16, qword_254123F30, v9, (uint64_t)&v10);
    re::BindNode::deinit((re::BindNode *)v16);
    if (v13)
    {
      v6 = re::globalAllocators(v5);
      v2 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v6[2] + 32))(v6[2], 48, 8);
      v7 = v10;
      *(_QWORD *)(v2 + 40) = 0;
      *(_DWORD *)(v2 + 32) = 0;
      *(_QWORD *)(v2 + 16) = 0;
      *(_QWORD *)(v2 + 24) = 0;
      *(_QWORD *)v2 = v7;
      *(_QWORD *)(v2 + 8) = 0;
      *(_QWORD *)(v2 + 8) = v11;
      *(_QWORD *)(v2 + 16) = v12;
      *(_QWORD *)(v2 + 24) = v13;
      v11 = 0;
      v12 = 0;
      v13 = 0;
      *(_QWORD *)(v2 + 40) = v15;
      v15 = 0;
      ++v14;
      ++*(_DWORD *)(v2 + 32);
    }
    else
    {
      v2 = 0;
    }
    re::DynamicArray<re::BindPoint::BindPointData>::deinit((uint64_t)&v11);
    re::DynamicArray<re::BindPoint::BindPointData>::deinit((uint64_t)&v11);
  }
  return v2;
}

uint64_t REBindPointCreateReferenceForComponentQuatF(re *a1, const char *a2)
{
  uint64_t v2;
  unsigned __int8 v4;
  re *v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v9[2];
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  re::BindNode *v16[5];

  v2 = 0;
  v16[4] = *(re::BindNode **)MEMORY[0x24BDAC8D0];
  if (a1 && a2)
  {
    re::makeBindNode(a1, (uint64_t)v16);
    if ((v4 & 1) == 0
    {
      re::introspect<re::Quaternion<float>>(void)::info = re::introspect_QuaternionF(0);
    }
    v9[0] = (uint64_t)a2;
    v9[1] = strlen(a2);
    re::BindNode::bindPoint(v16, re::introspect<re::Quaternion<float>>(void)::info, v9, (uint64_t)&v10);
    re::BindNode::deinit((re::BindNode *)v16);
    if (v13)
    {
      v6 = re::globalAllocators(v5);
      v2 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v6[2] + 32))(v6[2], 48, 8);
      v7 = v10;
      *(_QWORD *)(v2 + 40) = 0;
      *(_DWORD *)(v2 + 32) = 0;
      *(_QWORD *)(v2 + 16) = 0;
      *(_QWORD *)(v2 + 24) = 0;
      *(_QWORD *)v2 = v7;
      *(_QWORD *)(v2 + 8) = 0;
      *(_QWORD *)(v2 + 8) = v11;
      *(_QWORD *)(v2 + 16) = v12;
      *(_QWORD *)(v2 + 24) = v13;
      v11 = 0;
      v12 = 0;
      v13 = 0;
      *(_QWORD *)(v2 + 40) = v15;
      v15 = 0;
      ++v14;
      ++*(_DWORD *)(v2 + 32);
    }
    else
    {
      v2 = 0;
    }
    re::DynamicArray<re::BindPoint::BindPointData>::deinit((uint64_t)&v11);
    re::DynamicArray<re::BindPoint::BindPointData>::deinit((uint64_t)&v11);
  }
  return v2;
}

uint64_t REBindPointCreateReferenceForComponentSRT(re *a1, const char *a2)
{
  uint64_t v2;
  unsigned __int8 v4;
  re *v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v9[2];
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  re::BindNode *v16[5];

  v2 = 0;
  v16[4] = *(re::BindNode **)MEMORY[0x24BDAC8D0];
  if (a1 && a2)
  {
    re::makeBindNode(a1, (uint64_t)v16);
    if ((v4 & 1) == 0
    {
      re::introspect<re::GenericSRT<float>>(void)::info = re::introspect_SRT(0);
    }
    v9[0] = (uint64_t)a2;
    v9[1] = strlen(a2);
    re::BindNode::bindPoint(v16, re::introspect<re::GenericSRT<float>>(void)::info, v9, (uint64_t)&v10);
    re::BindNode::deinit((re::BindNode *)v16);
    if (v13)
    {
      v6 = re::globalAllocators(v5);
      v2 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v6[2] + 32))(v6[2], 48, 8);
      v7 = v10;
      *(_QWORD *)(v2 + 40) = 0;
      *(_DWORD *)(v2 + 32) = 0;
      *(_QWORD *)(v2 + 16) = 0;
      *(_QWORD *)(v2 + 24) = 0;
      *(_QWORD *)v2 = v7;
      *(_QWORD *)(v2 + 8) = 0;
      *(_QWORD *)(v2 + 8) = v11;
      *(_QWORD *)(v2 + 16) = v12;
      *(_QWORD *)(v2 + 24) = v13;
      v11 = 0;
      v12 = 0;
      v13 = 0;
      *(_QWORD *)(v2 + 40) = v15;
      v15 = 0;
      ++v14;
      ++*(_DWORD *)(v2 + 32);
    }
    else
    {
      v2 = 0;
    }
    re::DynamicArray<re::BindPoint::BindPointData>::deinit((uint64_t)&v11);
    re::DynamicArray<re::BindPoint::BindPointData>::deinit((uint64_t)&v11);
  }
  return v2;
}

uint64_t REBindPointCreateReferenceForEntityAnimatedValues(re *a1, const char *a2)
{
  uint64_t result;

  result = REBindPointCreateReferenceForEntityAnimatedValuesString(a1, a2);
  if (!result)
  {
    result = REBindPointCreateReferenceForEntityAnimatedValuesBool(a1, a2);
    if (!result)
    {
      result = REBindPointCreateReferenceForEntityAnimatedValuesInt8(a1, a2);
      if (!result)
      {
        result = REBindPointCreateReferenceForEntityAnimatedValuesUInt8(a1, a2);
        if (!result)
        {
          result = REBindPointCreateReferenceForEntityAnimatedValuesInt16(a1, a2);
          if (!result)
          {
            result = REBindPointCreateReferenceForEntityAnimatedValuesUInt16(a1, a2);
            if (!result)
            {
              result = REBindPointCreateReferenceForEntityAnimatedValuesInt32(a1, a2);
              if (!result)
              {
                result = REBindPointCreateReferenceForEntityAnimatedValuesUInt32(a1, a2);
                if (!result)
                {
                  result = REBindPointCreateReferenceForEntityAnimatedValuesInt64(a1, a2);
                  if (!result)
                  {
                    result = REBindPointCreateReferenceForEntityAnimatedValuesFloat(a1, a2);
                    if (!result)
                    {
                      result = REBindPointCreateReferenceForEntityAnimatedValuesFloat2(a1, a2);
                      if (!result)
                      {
                        result = REBindPointCreateReferenceForEntityAnimatedValuesFloat3(a1, a2);
                        if (!result)
                        {
                          result = REBindPointCreateReferenceForEntityAnimatedValuesFloat4(a1, a2);
                          if (!result)
                          {
                            result = REBindPointCreateReferenceForEntityAnimatedValuesDouble(a1, a2);
                            if (!result)
                            {
                              result = REBindPointCreateReferenceForEntityAnimatedValuesDouble2(a1, a2);
                              if (!result)
                              {
                                result = REBindPointCreateReferenceForEntityAnimatedValuesDouble3(a1, a2);
                                if (!result)
                                {
                                  result = REBindPointCreateReferenceForEntityAnimatedValuesDouble4(a1, a2);
                                  if (!result)
                                  {
                                    result = REBindPointCreateReferenceForEntityAnimatedValuesQuatF(a1, a2);
                                    if (!result)
                                      return REBindPointCreateReferenceForEntityAnimatedValuesSRT(a1, a2);
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  return result;
}

uint64_t REBindPointCreateReferenceForEntityAnimatedValuesString(re *a1, const char *a2)
{
  uint64_t v2;
  unsigned __int8 v4;
  re *v5;
  uint64_t *v6;
  uint64_t v7;
  const re::IntrospectionBase *v9;
  uint64_t v10[2];
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  re::BindNode *v17[5];

  v2 = 0;
  v17[4] = *(re::BindNode **)MEMORY[0x24BDAC8D0];
  if (a1 && a2)
  {
    re::makeBindNode(a1, (uint64_t)v17);
    if ((v4 & 1) == 0
    {
      re::introspect<re::DynamicString>(void)::info = (uint64_t)re::IntrospectionInfo<re::DynamicString>::get(0, v9);
    }
    v10[0] = (uint64_t)a2;
    v10[1] = strlen(a2);
    re::BindNode::bindPointWithOverride(v17, re::introspect<re::DynamicString>(void)::info, v10, (uint64_t)&v11);
    re::BindNode::deinit((re::BindNode *)v17);
    if (v14)
    {
      v6 = re::globalAllocators(v5);
      v2 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v6[2] + 32))(v6[2], 48, 8);
      v7 = v11;
      *(_QWORD *)(v2 + 40) = 0;
      *(_DWORD *)(v2 + 32) = 0;
      *(_QWORD *)(v2 + 16) = 0;
      *(_QWORD *)(v2 + 24) = 0;
      *(_QWORD *)v2 = v7;
      *(_QWORD *)(v2 + 8) = 0;
      *(_QWORD *)(v2 + 8) = v12;
      *(_QWORD *)(v2 + 16) = v13;
      *(_QWORD *)(v2 + 24) = v14;
      v12 = 0;
      v13 = 0;
      v14 = 0;
      *(_QWORD *)(v2 + 40) = v16;
      v16 = 0;
      ++v15;
      ++*(_DWORD *)(v2 + 32);
    }
    else
    {
      v2 = 0;
    }
    re::DynamicArray<re::BindPoint::BindPointData>::deinit((uint64_t)&v12);
    re::DynamicArray<re::BindPoint::BindPointData>::deinit((uint64_t)&v12);
  }
  return v2;
}

uint64_t REBindPointCreateReferenceForEntityAnimatedValuesBool(re *a1, const char *a2)
{
  uint64_t v2;
  unsigned __int8 v4;
  re *v5;
  uint64_t *v6;
  uint64_t v7;
  const re::IntrospectionBase *v9;
  uint64_t v10[2];
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  re::BindNode *v17[5];

  v2 = 0;
  v17[4] = *(re::BindNode **)MEMORY[0x24BDAC8D0];
  if (a1 && a2)
  {
    re::makeBindNode(a1, (uint64_t)v17);
    if ((v4 & 1) == 0
    {
      re::introspect<BOOL>(void)::info = re::introspect_BOOL(0, v9);
    }
    v10[0] = (uint64_t)a2;
    v10[1] = strlen(a2);
    re::BindNode::bindPointWithOverride(v17, (uint64_t)re::introspect<BOOL>(void)::info, v10, (uint64_t)&v11);
    re::BindNode::deinit((re::BindNode *)v17);
    if (v14)
    {
      v6 = re::globalAllocators(v5);
      v2 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v6[2] + 32))(v6[2], 48, 8);
      v7 = v11;
      *(_QWORD *)(v2 + 40) = 0;
      *(_DWORD *)(v2 + 32) = 0;
      *(_QWORD *)(v2 + 16) = 0;
      *(_QWORD *)(v2 + 24) = 0;
      *(_QWORD *)v2 = v7;
      *(_QWORD *)(v2 + 8) = 0;
      *(_QWORD *)(v2 + 8) = v12;
      *(_QWORD *)(v2 + 16) = v13;
      *(_QWORD *)(v2 + 24) = v14;
      v12 = 0;
      v13 = 0;
      v14 = 0;
      *(_QWORD *)(v2 + 40) = v16;
      v16 = 0;
      ++v15;
      ++*(_DWORD *)(v2 + 32);
    }
    else
    {
      v2 = 0;
    }
    re::DynamicArray<re::BindPoint::BindPointData>::deinit((uint64_t)&v12);
    re::DynamicArray<re::BindPoint::BindPointData>::deinit((uint64_t)&v12);
  }
  return v2;
}

uint64_t REBindPointCreateReferenceForEntityAnimatedValuesInt8(re *a1, const char *a2)
{
  uint64_t v2;
  unsigned __int8 v4;
  re *v5;
  uint64_t *v6;
  uint64_t v7;
  const re::IntrospectionBase *v9;
  uint64_t v10[2];
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  re::BindNode *v17[5];

  v2 = 0;
  v17[4] = *(re::BindNode **)MEMORY[0x24BDAC8D0];
  if (a1 && a2)
  {
    re::makeBindNode(a1, (uint64_t)v17);
    if ((v4 & 1) == 0
    {
      re::introspect<char>(void)::info = (uint64_t)re::introspect_char(0, v9);
    }
    v10[0] = (uint64_t)a2;
    v10[1] = strlen(a2);
    re::BindNode::bindPointWithOverride(v17, re::introspect<char>(void)::info, v10, (uint64_t)&v11);
    re::BindNode::deinit((re::BindNode *)v17);
    if (v14)
    {
      v6 = re::globalAllocators(v5);
      v2 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v6[2] + 32))(v6[2], 48, 8);
      v7 = v11;
      *(_QWORD *)(v2 + 40) = 0;
      *(_DWORD *)(v2 + 32) = 0;
      *(_QWORD *)(v2 + 16) = 0;
      *(_QWORD *)(v2 + 24) = 0;
      *(_QWORD *)v2 = v7;
      *(_QWORD *)(v2 + 8) = 0;
      *(_QWORD *)(v2 + 8) = v12;
      *(_QWORD *)(v2 + 16) = v13;
      *(_QWORD *)(v2 + 24) = v14;
      v12 = 0;
      v13 = 0;
      v14 = 0;
      *(_QWORD *)(v2 + 40) = v16;
      v16 = 0;
      ++v15;
      ++*(_DWORD *)(v2 + 32);
    }
    else
    {
      v2 = 0;
    }
    re::DynamicArray<re::BindPoint::BindPointData>::deinit((uint64_t)&v12);
    re::DynamicArray<re::BindPoint::BindPointData>::deinit((uint64_t)&v12);
  }
  return v2;
}

uint64_t REBindPointCreateReferenceForEntityAnimatedValuesUInt8(re *a1, const char *a2)
{
  uint64_t v2;
  unsigned __int8 v4;
  re *v5;
  uint64_t *v6;
  uint64_t v7;
  const re::IntrospectionBase *v9;
  uint64_t v10[2];
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  re::BindNode *v17[5];

  v2 = 0;
  v17[4] = *(re::BindNode **)MEMORY[0x24BDAC8D0];
  if (a1 && a2)
  {
    re::makeBindNode(a1, (uint64_t)v17);
    if ((v4 & 1) == 0
    {
      re::introspect<unsigned char>(void)::info = re::introspect_uint8_t(0, v9);
    }
    v10[0] = (uint64_t)a2;
    v10[1] = strlen(a2);
    re::BindNode::bindPointWithOverride(v17, (uint64_t)re::introspect<unsigned char>(void)::info, v10, (uint64_t)&v11);
    re::BindNode::deinit((re::BindNode *)v17);
    if (v14)
    {
      v6 = re::globalAllocators(v5);
      v2 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v6[2] + 32))(v6[2], 48, 8);
      v7 = v11;
      *(_QWORD *)(v2 + 40) = 0;
      *(_DWORD *)(v2 + 32) = 0;
      *(_QWORD *)(v2 + 16) = 0;
      *(_QWORD *)(v2 + 24) = 0;
      *(_QWORD *)v2 = v7;
      *(_QWORD *)(v2 + 8) = 0;
      *(_QWORD *)(v2 + 8) = v12;
      *(_QWORD *)(v2 + 16) = v13;
      *(_QWORD *)(v2 + 24) = v14;
      v12 = 0;
      v13 = 0;
      v14 = 0;
      *(_QWORD *)(v2 + 40) = v16;
      v16 = 0;
      ++v15;
      ++*(_DWORD *)(v2 + 32);
    }
    else
    {
      v2 = 0;
    }
    re::DynamicArray<re::BindPoint::BindPointData>::deinit((uint64_t)&v12);
    re::DynamicArray<re::BindPoint::BindPointData>::deinit((uint64_t)&v12);
  }
  return v2;
}

uint64_t REBindPointCreateReferenceForEntityAnimatedValuesInt16(re *a1, const char *a2)
{
  uint64_t v2;
  unsigned __int8 v4;
  re *v5;
  uint64_t *v6;
  uint64_t v7;
  const re::IntrospectionBase *v9;
  uint64_t v10[2];
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  re::BindNode *v17[5];

  v2 = 0;
  v17[4] = *(re::BindNode **)MEMORY[0x24BDAC8D0];
  if (a1 && a2)
  {
    re::makeBindNode(a1, (uint64_t)v17);
    if ((v4 & 1) == 0
    {
      re::introspect<short>(void)::info = (uint64_t)re::introspect_short(0, v9);
    }
    v10[0] = (uint64_t)a2;
    v10[1] = strlen(a2);
    re::BindNode::bindPointWithOverride(v17, re::introspect<short>(void)::info, v10, (uint64_t)&v11);
    re::BindNode::deinit((re::BindNode *)v17);
    if (v14)
    {
      v6 = re::globalAllocators(v5);
      v2 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v6[2] + 32))(v6[2], 48, 8);
      v7 = v11;
      *(_QWORD *)(v2 + 40) = 0;
      *(_DWORD *)(v2 + 32) = 0;
      *(_QWORD *)(v2 + 16) = 0;
      *(_QWORD *)(v2 + 24) = 0;
      *(_QWORD *)v2 = v7;
      *(_QWORD *)(v2 + 8) = 0;
      *(_QWORD *)(v2 + 8) = v12;
      *(_QWORD *)(v2 + 16) = v13;
      *(_QWORD *)(v2 + 24) = v14;
      v12 = 0;
      v13 = 0;
      v14 = 0;
      *(_QWORD *)(v2 + 40) = v16;
      v16 = 0;
      ++v15;
      ++*(_DWORD *)(v2 + 32);
    }
    else
    {
      v2 = 0;
    }
    re::DynamicArray<re::BindPoint::BindPointData>::deinit((uint64_t)&v12);
    re::DynamicArray<re::BindPoint::BindPointData>::deinit((uint64_t)&v12);
  }
  return v2;
}

uint64_t REBindPointCreateReferenceForEntityAnimatedValuesUInt16(re *a1, const char *a2)
{
  uint64_t v2;
  unsigned __int8 v4;
  re *v5;
  uint64_t *v6;
  uint64_t v7;
  const re::IntrospectionBase *v9;
  uint64_t v10[2];
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  re::BindNode *v17[5];

  v2 = 0;
  v17[4] = *(re::BindNode **)MEMORY[0x24BDAC8D0];
  if (a1 && a2)
  {
    re::makeBindNode(a1, (uint64_t)v17);
    if ((v4 & 1) == 0
    {
      re::introspect<unsigned short>(void)::info = (uint64_t)re::introspect_uint16_t(0, v9);
    }
    v10[0] = (uint64_t)a2;
    v10[1] = strlen(a2);
    re::BindNode::bindPointWithOverride(v17, re::introspect<unsigned short>(void)::info, v10, (uint64_t)&v11);
    re::BindNode::deinit((re::BindNode *)v17);
    if (v14)
    {
      v6 = re::globalAllocators(v5);
      v2 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v6[2] + 32))(v6[2], 48, 8);
      v7 = v11;
      *(_QWORD *)(v2 + 40) = 0;
      *(_DWORD *)(v2 + 32) = 0;
      *(_QWORD *)(v2 + 16) = 0;
      *(_QWORD *)(v2 + 24) = 0;
      *(_QWORD *)v2 = v7;
      *(_QWORD *)(v2 + 8) = 0;
      *(_QWORD *)(v2 + 8) = v12;
      *(_QWORD *)(v2 + 16) = v13;
      *(_QWORD *)(v2 + 24) = v14;
      v12 = 0;
      v13 = 0;
      v14 = 0;
      *(_QWORD *)(v2 + 40) = v16;
      v16 = 0;
      ++v15;
      ++*(_DWORD *)(v2 + 32);
    }
    else
    {
      v2 = 0;
    }
    re::DynamicArray<re::BindPoint::BindPointData>::deinit((uint64_t)&v12);
    re::DynamicArray<re::BindPoint::BindPointData>::deinit((uint64_t)&v12);
  }
  return v2;
}

uint64_t REBindPointCreateReferenceForEntityAnimatedValuesInt32(re *a1, const char *a2)
{
  uint64_t v2;
  unsigned __int8 v4;
  re *v5;
  uint64_t *v6;
  uint64_t v7;
  const re::IntrospectionBase *v9;
  uint64_t v10[2];
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  re::BindNode *v17[5];

  v2 = 0;
  v17[4] = *(re::BindNode **)MEMORY[0x24BDAC8D0];
  if (a1 && a2)
  {
    re::makeBindNode(a1, (uint64_t)v17);
    if ((v4 & 1) == 0
    {
      re::introspect<int>(void)::info = re::introspect_int(0, v9);
    }
    v10[0] = (uint64_t)a2;
    v10[1] = strlen(a2);
    re::BindNode::bindPointWithOverride(v17, (uint64_t)re::introspect<int>(void)::info, v10, (uint64_t)&v11);
    re::BindNode::deinit((re::BindNode *)v17);
    if (v14)
    {
      v6 = re::globalAllocators(v5);
      v2 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v6[2] + 32))(v6[2], 48, 8);
      v7 = v11;
      *(_QWORD *)(v2 + 40) = 0;
      *(_DWORD *)(v2 + 32) = 0;
      *(_QWORD *)(v2 + 16) = 0;
      *(_QWORD *)(v2 + 24) = 0;
      *(_QWORD *)v2 = v7;
      *(_QWORD *)(v2 + 8) = 0;
      *(_QWORD *)(v2 + 8) = v12;
      *(_QWORD *)(v2 + 16) = v13;
      *(_QWORD *)(v2 + 24) = v14;
      v12 = 0;
      v13 = 0;
      v14 = 0;
      *(_QWORD *)(v2 + 40) = v16;
      v16 = 0;
      ++v15;
      ++*(_DWORD *)(v2 + 32);
    }
    else
    {
      v2 = 0;
    }
    re::DynamicArray<re::BindPoint::BindPointData>::deinit((uint64_t)&v12);
    re::DynamicArray<re::BindPoint::BindPointData>::deinit((uint64_t)&v12);
  }
  return v2;
}

uint64_t REBindPointCreateReferenceForEntityAnimatedValuesUInt32(re *a1, const char *a2)
{
  uint64_t v2;
  unsigned __int8 v4;
  re *v5;
  uint64_t *v6;
  uint64_t v7;
  const re::IntrospectionBase *v9;
  uint64_t v10[2];
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  re::BindNode *v17[5];

  v2 = 0;
  v17[4] = *(re::BindNode **)MEMORY[0x24BDAC8D0];
  if (a1 && a2)
  {
    re::makeBindNode(a1, (uint64_t)v17);
    if ((v4 & 1) == 0
    {
      re::introspect<unsigned int>(void)::info = re::introspect_uint32_t(0, v9);
    }
    v10[0] = (uint64_t)a2;
    v10[1] = strlen(a2);
    re::BindNode::bindPointWithOverride(v17, (uint64_t)re::introspect<unsigned int>(void)::info, v10, (uint64_t)&v11);
    re::BindNode::deinit((re::BindNode *)v17);
    if (v14)
    {
      v6 = re::globalAllocators(v5);
      v2 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v6[2] + 32))(v6[2], 48, 8);
      v7 = v11;
      *(_QWORD *)(v2 + 40) = 0;
      *(_DWORD *)(v2 + 32) = 0;
      *(_QWORD *)(v2 + 16) = 0;
      *(_QWORD *)(v2 + 24) = 0;
      *(_QWORD *)v2 = v7;
      *(_QWORD *)(v2 + 8) = 0;
      *(_QWORD *)(v2 + 8) = v12;
      *(_QWORD *)(v2 + 16) = v13;
      *(_QWORD *)(v2 + 24) = v14;
      v12 = 0;
      v13 = 0;
      v14 = 0;
      *(_QWORD *)(v2 + 40) = v16;
      v16 = 0;
      ++v15;
      ++*(_DWORD *)(v2 + 32);
    }
    else
    {
      v2 = 0;
    }
    re::DynamicArray<re::BindPoint::BindPointData>::deinit((uint64_t)&v12);
    re::DynamicArray<re::BindPoint::BindPointData>::deinit((uint64_t)&v12);
  }
  return v2;
}

uint64_t REBindPointCreateReferenceForEntityAnimatedValuesInt64(re *a1, const char *a2)
{
  uint64_t v2;
  unsigned __int8 v4;
  re *v5;
  uint64_t *v6;
  uint64_t v7;
  const re::IntrospectionBase *v9;
  uint64_t v10[2];
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  re::BindNode *v17[5];

  v2 = 0;
  v17[4] = *(re::BindNode **)MEMORY[0x24BDAC8D0];
  if (a1 && a2)
  {
    re::makeBindNode(a1, (uint64_t)v17);
    if ((v4 & 1) == 0
    {
      re::introspect<long long>(void)::info = (uint64_t)re::introspect_int64_t(0, v9);
    }
    v10[0] = (uint64_t)a2;
    v10[1] = strlen(a2);
    re::BindNode::bindPointWithOverride(v17, re::introspect<long long>(void)::info, v10, (uint64_t)&v11);
    re::BindNode::deinit((re::BindNode *)v17);
    if (v14)
    {
      v6 = re::globalAllocators(v5);
      v2 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v6[2] + 32))(v6[2], 48, 8);
      v7 = v11;
      *(_QWORD *)(v2 + 40) = 0;
      *(_DWORD *)(v2 + 32) = 0;
      *(_QWORD *)(v2 + 16) = 0;
      *(_QWORD *)(v2 + 24) = 0;
      *(_QWORD *)v2 = v7;
      *(_QWORD *)(v2 + 8) = 0;
      *(_QWORD *)(v2 + 8) = v12;
      *(_QWORD *)(v2 + 16) = v13;
      *(_QWORD *)(v2 + 24) = v14;
      v12 = 0;
      v13 = 0;
      v14 = 0;
      *(_QWORD *)(v2 + 40) = v16;
      v16 = 0;
      ++v15;
      ++*(_DWORD *)(v2 + 32);
    }
    else
    {
      v2 = 0;
    }
    re::DynamicArray<re::BindPoint::BindPointData>::deinit((uint64_t)&v12);
    re::DynamicArray<re::BindPoint::BindPointData>::deinit((uint64_t)&v12);
  }
  return v2;
}

uint64_t REBindPointCreateReferenceForEntityAnimatedValuesFloat(re *a1, const char *a2)
{
  uint64_t v2;
  unsigned __int8 v4;
  re *v5;
  uint64_t *v6;
  uint64_t v7;
  const re::IntrospectionBase *v9;
  uint64_t v10[2];
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  re::BindNode *v17[5];

  v2 = 0;
  v17[4] = *(re::BindNode **)MEMORY[0x24BDAC8D0];
  if (a1 && a2)
  {
    re::makeBindNode(a1, (uint64_t)v17);
    if ((v4 & 1) == 0
    {
      re::introspect<float>(void)::info = re::introspect_float(0, v9);
    }
    v10[0] = (uint64_t)a2;
    v10[1] = strlen(a2);
    re::BindNode::bindPointWithOverride(v17, (uint64_t)re::introspect<float>(void)::info, v10, (uint64_t)&v11);
    re::BindNode::deinit((re::BindNode *)v17);
    if (v14)
    {
      v6 = re::globalAllocators(v5);
      v2 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v6[2] + 32))(v6[2], 48, 8);
      v7 = v11;
      *(_QWORD *)(v2 + 40) = 0;
      *(_DWORD *)(v2 + 32) = 0;
      *(_QWORD *)(v2 + 16) = 0;
      *(_QWORD *)(v2 + 24) = 0;
      *(_QWORD *)v2 = v7;
      *(_QWORD *)(v2 + 8) = 0;
      *(_QWORD *)(v2 + 8) = v12;
      *(_QWORD *)(v2 + 16) = v13;
      *(_QWORD *)(v2 + 24) = v14;
      v12 = 0;
      v13 = 0;
      v14 = 0;
      *(_QWORD *)(v2 + 40) = v16;
      v16 = 0;
      ++v15;
      ++*(_DWORD *)(v2 + 32);
    }
    else
    {
      v2 = 0;
    }
    re::DynamicArray<re::BindPoint::BindPointData>::deinit((uint64_t)&v12);
    re::DynamicArray<re::BindPoint::BindPointData>::deinit((uint64_t)&v12);
  }
  return v2;
}

uint64_t REBindPointCreateReferenceForEntityAnimatedValuesFloat2(re *a1, const char *a2)
{
  uint64_t v2;
  unsigned __int8 v4;
  re *v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v9[2];
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  re::BindNode *v16[5];

  v2 = 0;
  v16[4] = *(re::BindNode **)MEMORY[0x24BDAC8D0];
  if (a1 && a2)
  {
    re::makeBindNode(a1, (uint64_t)v16);
    if ((v4 & 1) == 0
    {
      re::introspect<re::Vector2<float>>(void)::info = (_UNKNOWN *)re::introspect_Vector2F(0);
    }
    v9[0] = (uint64_t)a2;
    v9[1] = strlen(a2);
    re::BindNode::bindPointWithOverride(v16, (uint64_t)re::introspect<re::Vector2<float>>(void)::info, v9, (uint64_t)&v10);
    re::BindNode::deinit((re::BindNode *)v16);
    if (v13)
    {
      v6 = re::globalAllocators(v5);
      v2 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v6[2] + 32))(v6[2], 48, 8);
      v7 = v10;
      *(_QWORD *)(v2 + 40) = 0;
      *(_DWORD *)(v2 + 32) = 0;
      *(_QWORD *)(v2 + 16) = 0;
      *(_QWORD *)(v2 + 24) = 0;
      *(_QWORD *)v2 = v7;
      *(_QWORD *)(v2 + 8) = 0;
      *(_QWORD *)(v2 + 8) = v11;
      *(_QWORD *)(v2 + 16) = v12;
      *(_QWORD *)(v2 + 24) = v13;
      v11 = 0;
      v12 = 0;
      v13 = 0;
      *(_QWORD *)(v2 + 40) = v15;
      v15 = 0;
      ++v14;
      ++*(_DWORD *)(v2 + 32);
    }
    else
    {
      v2 = 0;
    }
    re::DynamicArray<re::BindPoint::BindPointData>::deinit((uint64_t)&v11);
    re::DynamicArray<re::BindPoint::BindPointData>::deinit((uint64_t)&v11);
  }
  return v2;
}

uint64_t REBindPointCreateReferenceForEntityAnimatedValuesFloat3(re *a1, const char *a2)
{
  uint64_t v2;
  unsigned __int8 v4;
  re *v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v9[2];
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  re::BindNode *v16[5];

  v2 = 0;
  v16[4] = *(re::BindNode **)MEMORY[0x24BDAC8D0];
  if (a1 && a2)
  {
    re::makeBindNode(a1, (uint64_t)v16);
    if ((v4 & 1) == 0
    {
      re::introspect<re::Vector3<float>>(void)::info = (_UNKNOWN *)re::introspect_Vector3F(0);
    }
    v9[0] = (uint64_t)a2;
    v9[1] = strlen(a2);
    re::BindNode::bindPointWithOverride(v16, (uint64_t)re::introspect<re::Vector3<float>>(void)::info, v9, (uint64_t)&v10);
    re::BindNode::deinit((re::BindNode *)v16);
    if (v13)
    {
      v6 = re::globalAllocators(v5);
      v2 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v6[2] + 32))(v6[2], 48, 8);
      v7 = v10;
      *(_QWORD *)(v2 + 40) = 0;
      *(_DWORD *)(v2 + 32) = 0;
      *(_QWORD *)(v2 + 16) = 0;
      *(_QWORD *)(v2 + 24) = 0;
      *(_QWORD *)v2 = v7;
      *(_QWORD *)(v2 + 8) = 0;
      *(_QWORD *)(v2 + 8) = v11;
      *(_QWORD *)(v2 + 16) = v12;
      *(_QWORD *)(v2 + 24) = v13;
      v11 = 0;
      v12 = 0;
      v13 = 0;
      *(_QWORD *)(v2 + 40) = v15;
      v15 = 0;
      ++v14;
      ++*(_DWORD *)(v2 + 32);
    }
    else
    {
      v2 = 0;
    }
    re::DynamicArray<re::BindPoint::BindPointData>::deinit((uint64_t)&v11);
    re::DynamicArray<re::BindPoint::BindPointData>::deinit((uint64_t)&v11);
  }
  return v2;
}

uint64_t REBindPointCreateReferenceForEntityAnimatedValuesFloat4(re *a1, const char *a2)
{
  uint64_t v2;
  unsigned __int8 v4;
  re *v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v9[2];
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  re::BindNode *v16[5];

  v2 = 0;
  v16[4] = *(re::BindNode **)MEMORY[0x24BDAC8D0];
  if (a1 && a2)
  {
    re::makeBindNode(a1, (uint64_t)v16);
    if ((v4 & 1) == 0
    {
      re::introspect<re::Vector4<float>>(void)::info = (_UNKNOWN *)re::introspect_Vector4F(0);
    }
    v9[0] = (uint64_t)a2;
    v9[1] = strlen(a2);
    re::BindNode::bindPointWithOverride(v16, (uint64_t)re::introspect<re::Vector4<float>>(void)::info, v9, (uint64_t)&v10);
    re::BindNode::deinit((re::BindNode *)v16);
    if (v13)
    {
      v6 = re::globalAllocators(v5);
      v2 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v6[2] + 32))(v6[2], 48, 8);
      v7 = v10;
      *(_QWORD *)(v2 + 40) = 0;
      *(_DWORD *)(v2 + 32) = 0;
      *(_QWORD *)(v2 + 16) = 0;
      *(_QWORD *)(v2 + 24) = 0;
      *(_QWORD *)v2 = v7;
      *(_QWORD *)(v2 + 8) = 0;
      *(_QWORD *)(v2 + 8) = v11;
      *(_QWORD *)(v2 + 16) = v12;
      *(_QWORD *)(v2 + 24) = v13;
      v11 = 0;
      v12 = 0;
      v13 = 0;
      *(_QWORD *)(v2 + 40) = v15;
      v15 = 0;
      ++v14;
      ++*(_DWORD *)(v2 + 32);
    }
    else
    {
      v2 = 0;
    }
    re::DynamicArray<re::BindPoint::BindPointData>::deinit((uint64_t)&v11);
    re::DynamicArray<re::BindPoint::BindPointData>::deinit((uint64_t)&v11);
  }
  return v2;
}

uint64_t REBindPointCreateReferenceForEntityAnimatedValuesDouble(re *a1, const char *a2)
{
  uint64_t v2;
  unsigned __int8 v4;
  re *v5;
  uint64_t *v6;
  uint64_t v7;
  const re::IntrospectionBase *v9;
  uint64_t v10[2];
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  re::BindNode *v17[5];

  v2 = 0;
  v17[4] = *(re::BindNode **)MEMORY[0x24BDAC8D0];
  if (a1 && a2)
  {
    re::makeBindNode(a1, (uint64_t)v17);
    if ((v4 & 1) == 0
    {
      re::introspect<double>(void)::info = (uint64_t)re::introspect_double(0, v9);
    }
    v10[0] = (uint64_t)a2;
    v10[1] = strlen(a2);
    re::BindNode::bindPointWithOverride(v17, re::introspect<double>(void)::info, v10, (uint64_t)&v11);
    re::BindNode::deinit((re::BindNode *)v17);
    if (v14)
    {
      v6 = re::globalAllocators(v5);
      v2 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v6[2] + 32))(v6[2], 48, 8);
      v7 = v11;
      *(_QWORD *)(v2 + 40) = 0;
      *(_DWORD *)(v2 + 32) = 0;
      *(_QWORD *)(v2 + 16) = 0;
      *(_QWORD *)(v2 + 24) = 0;
      *(_QWORD *)v2 = v7;
      *(_QWORD *)(v2 + 8) = 0;
      *(_QWORD *)(v2 + 8) = v12;
      *(_QWORD *)(v2 + 16) = v13;
      *(_QWORD *)(v2 + 24) = v14;
      v12 = 0;
      v13 = 0;
      v14 = 0;
      *(_QWORD *)(v2 + 40) = v16;
      v16 = 0;
      ++v15;
      ++*(_DWORD *)(v2 + 32);
    }
    else
    {
      v2 = 0;
    }
    re::DynamicArray<re::BindPoint::BindPointData>::deinit((uint64_t)&v12);
    re::DynamicArray<re::BindPoint::BindPointData>::deinit((uint64_t)&v12);
  }
  return v2;
}

uint64_t REBindPointCreateReferenceForEntityAnimatedValuesDouble2(re *a1, const char *a2)
{
  uint64_t v2;
  unsigned __int8 v4;
  re *v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v9[2];
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  re::BindNode *v16[5];

  v2 = 0;
  v16[4] = *(re::BindNode **)MEMORY[0x24BDAC8D0];
  if (a1 && a2)
  {
    re::makeBindNode(a1, (uint64_t)v16);
    v4 = atomic_load((unsigned __int8 *)&qword_254123F18);
    if ((v4 & 1) == 0 && __cxa_guard_acquire(&qword_254123F18))
    {
      _MergedGlobals_506 = re::introspect_Vector2D(0);
      __cxa_guard_release(&qword_254123F18);
    }
    v9[0] = (uint64_t)a2;
    v9[1] = strlen(a2);
    re::BindNode::bindPointWithOverride(v16, _MergedGlobals_506, v9, (uint64_t)&v10);
    re::BindNode::deinit((re::BindNode *)v16);
    if (v13)
    {
      v6 = re::globalAllocators(v5);
      v2 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v6[2] + 32))(v6[2], 48, 8);
      v7 = v10;
      *(_QWORD *)(v2 + 40) = 0;
      *(_DWORD *)(v2 + 32) = 0;
      *(_QWORD *)(v2 + 16) = 0;
      *(_QWORD *)(v2 + 24) = 0;
      *(_QWORD *)v2 = v7;
      *(_QWORD *)(v2 + 8) = 0;
      *(_QWORD *)(v2 + 8) = v11;
      *(_QWORD *)(v2 + 16) = v12;
      *(_QWORD *)(v2 + 24) = v13;
      v11 = 0;
      v12 = 0;
      v13 = 0;
      *(_QWORD *)(v2 + 40) = v15;
      v15 = 0;
      ++v14;
      ++*(_DWORD *)(v2 + 32);
    }
    else
    {
      v2 = 0;
    }
    re::DynamicArray<re::BindPoint::BindPointData>::deinit((uint64_t)&v11);
    re::DynamicArray<re::BindPoint::BindPointData>::deinit((uint64_t)&v11);
  }
  return v2;
}

uint64_t REBindPointCreateReferenceForEntityAnimatedValuesDouble3(re *a1, const char *a2)
{
  uint64_t v2;
  unsigned __int8 v4;
  re *v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v9[2];
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  re::BindNode *v16[5];

  v2 = 0;
  v16[4] = *(re::BindNode **)MEMORY[0x24BDAC8D0];
  if (a1 && a2)
  {
    re::makeBindNode(a1, (uint64_t)v16);
    v4 = atomic_load((unsigned __int8 *)&qword_254123F28);
    if ((v4 & 1) == 0 && __cxa_guard_acquire(&qword_254123F28))
    {
      qword_254123F20 = re::introspect_Vector3D(0);
      __cxa_guard_release(&qword_254123F28);
    }
    v9[0] = (uint64_t)a2;
    v9[1] = strlen(a2);
    re::BindNode::bindPointWithOverride(v16, qword_254123F20, v9, (uint64_t)&v10);
    re::BindNode::deinit((re::BindNode *)v16);
    if (v13)
    {
      v6 = re::globalAllocators(v5);
      v2 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v6[2] + 32))(v6[2], 48, 8);
      v7 = v10;
      *(_QWORD *)(v2 + 40) = 0;
      *(_DWORD *)(v2 + 32) = 0;
      *(_QWORD *)(v2 + 16) = 0;
      *(_QWORD *)(v2 + 24) = 0;
      *(_QWORD *)v2 = v7;
      *(_QWORD *)(v2 + 8) = 0;
      *(_QWORD *)(v2 + 8) = v11;
      *(_QWORD *)(v2 + 16) = v12;
      *(_QWORD *)(v2 + 24) = v13;
      v11 = 0;
      v12 = 0;
      v13 = 0;
      *(_QWORD *)(v2 + 40) = v15;
      v15 = 0;
      ++v14;
      ++*(_DWORD *)(v2 + 32);
    }
    else
    {
      v2 = 0;
    }
    re::DynamicArray<re::BindPoint::BindPointData>::deinit((uint64_t)&v11);
    re::DynamicArray<re::BindPoint::BindPointData>::deinit((uint64_t)&v11);
  }
  return v2;
}

uint64_t REBindPointCreateReferenceForEntityAnimatedValuesDouble4(re *a1, const char *a2)
{
  uint64_t v2;
  unsigned __int8 v4;
  re *v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v9[2];
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  re::BindNode *v16[5];

  v2 = 0;
  v16[4] = *(re::BindNode **)MEMORY[0x24BDAC8D0];
  if (a1 && a2)
  {
    re::makeBindNode(a1, (uint64_t)v16);
    v4 = atomic_load((unsigned __int8 *)&qword_254123F38);
    if ((v4 & 1) == 0 && __cxa_guard_acquire(&qword_254123F38))
    {
      qword_254123F30 = re::introspect_Vector4D(0);
      __cxa_guard_release(&qword_254123F38);
    }
    v9[0] = (uint64_t)a2;
    v9[1] = strlen(a2);
    re::BindNode::bindPointWithOverride(v16, qword_254123F30, v9, (uint64_t)&v10);
    re::BindNode::deinit((re::BindNode *)v16);
    if (v13)
    {
      v6 = re::globalAllocators(v5);
      v2 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v6[2] + 32))(v6[2], 48, 8);
      v7 = v10;
      *(_QWORD *)(v2 + 40) = 0;
      *(_DWORD *)(v2 + 32) = 0;
      *(_QWORD *)(v2 + 16) = 0;
      *(_QWORD *)(v2 + 24) = 0;
      *(_QWORD *)v2 = v7;
      *(_QWORD *)(v2 + 8) = 0;
      *(_QWORD *)(v2 + 8) = v11;
      *(_QWORD *)(v2 + 16) = v12;
      *(_QWORD *)(v2 + 24) = v13;
      v11 = 0;
      v12 = 0;
      v13 = 0;
      *(_QWORD *)(v2 + 40) = v15;
      v15 = 0;
      ++v14;
      ++*(_DWORD *)(v2 + 32);
    }
    else
    {
      v2 = 0;
    }
    re::DynamicArray<re::BindPoint::BindPointData>::deinit((uint64_t)&v11);
    re::DynamicArray<re::BindPoint::BindPointData>::deinit((uint64_t)&v11);
  }
  return v2;
}

uint64_t REBindPointCreateReferenceForEntityAnimatedValuesQuatF(re *a1, const char *a2)
{
  uint64_t v2;
  unsigned __int8 v4;
  re *v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v9[2];
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  re::BindNode *v16[5];

  v2 = 0;
  v16[4] = *(re::BindNode **)MEMORY[0x24BDAC8D0];
  if (a1 && a2)
  {
    re::makeBindNode(a1, (uint64_t)v16);
    if ((v4 & 1) == 0
    {
      re::introspect<re::Quaternion<float>>(void)::info = re::introspect_QuaternionF(0);
    }
    v9[0] = (uint64_t)a2;
    v9[1] = strlen(a2);
    re::BindNode::bindPointWithOverride(v16, re::introspect<re::Quaternion<float>>(void)::info, v9, (uint64_t)&v10);
    re::BindNode::deinit((re::BindNode *)v16);
    if (v13)
    {
      v6 = re::globalAllocators(v5);
      v2 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v6[2] + 32))(v6[2], 48, 8);
      v7 = v10;
      *(_QWORD *)(v2 + 40) = 0;
      *(_DWORD *)(v2 + 32) = 0;
      *(_QWORD *)(v2 + 16) = 0;
      *(_QWORD *)(v2 + 24) = 0;
      *(_QWORD *)v2 = v7;
      *(_QWORD *)(v2 + 8) = 0;
      *(_QWORD *)(v2 + 8) = v11;
      *(_QWORD *)(v2 + 16) = v12;
      *(_QWORD *)(v2 + 24) = v13;
      v11 = 0;
      v12 = 0;
      v13 = 0;
      *(_QWORD *)(v2 + 40) = v15;
      v15 = 0;
      ++v14;
      ++*(_DWORD *)(v2 + 32);
    }
    else
    {
      v2 = 0;
    }
    re::DynamicArray<re::BindPoint::BindPointData>::deinit((uint64_t)&v11);
    re::DynamicArray<re::BindPoint::BindPointData>::deinit((uint64_t)&v11);
  }
  return v2;
}

uint64_t REBindPointCreateReferenceForEntityAnimatedValuesSRT(re *a1, const char *a2)
{
  uint64_t v2;
  unsigned __int8 v4;
  re *v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v9[2];
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  re::BindNode *v16[5];

  v2 = 0;
  v16[4] = *(re::BindNode **)MEMORY[0x24BDAC8D0];
  if (a1 && a2)
  {
    re::makeBindNode(a1, (uint64_t)v16);
    if ((v4 & 1) == 0
    {
      re::introspect<re::GenericSRT<float>>(void)::info = re::introspect_SRT(0);
    }
    v9[0] = (uint64_t)a2;
    v9[1] = strlen(a2);
    re::BindNode::bindPointWithOverride(v16, re::introspect<re::GenericSRT<float>>(void)::info, v9, (uint64_t)&v10);
    re::BindNode::deinit((re::BindNode *)v16);
    if (v13)
    {
      v6 = re::globalAllocators(v5);
      v2 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v6[2] + 32))(v6[2], 48, 8);
      v7 = v10;
      *(_QWORD *)(v2 + 40) = 0;
      *(_DWORD *)(v2 + 32) = 0;
      *(_QWORD *)(v2 + 16) = 0;
      *(_QWORD *)(v2 + 24) = 0;
      *(_QWORD *)v2 = v7;
      *(_QWORD *)(v2 + 8) = 0;
      *(_QWORD *)(v2 + 8) = v11;
      *(_QWORD *)(v2 + 16) = v12;
      *(_QWORD *)(v2 + 24) = v13;
      v11 = 0;
      v12 = 0;
      v13 = 0;
      *(_QWORD *)(v2 + 40) = v15;
      v15 = 0;
      ++v14;
      ++*(_DWORD *)(v2 + 32);
    }
    else
    {
      v2 = 0;
    }
    re::DynamicArray<re::BindPoint::BindPointData>::deinit((uint64_t)&v11);
    re::DynamicArray<re::BindPoint::BindPointData>::deinit((uint64_t)&v11);
  }
  return v2;
}

uint64_t REBindPointCreateReferenceForComponentAnimatedValues(re *a1, const char *a2)
{
  uint64_t result;

  result = REBindPointCreateReferenceForComponentAnimatedValuesString(a1, a2);
  if (!result)
  {
    result = REBindPointCreateReferenceForComponentAnimatedValuesBool(a1, a2);
    if (!result)
    {
      result = REBindPointCreateReferenceForComponentAnimatedValuesInt8(a1, a2);
      if (!result)
      {
        result = REBindPointCreateReferenceForComponentAnimatedValuesUInt8(a1, a2);
        if (!result)
        {
          result = REBindPointCreateReferenceForComponentAnimatedValuesInt16(a1, a2);
          if (!result)
          {
            result = REBindPointCreateReferenceForComponentAnimatedValuesUInt16(a1, a2);
            if (!result)
            {
              result = REBindPointCreateReferenceForComponentAnimatedValuesInt32(a1, a2);
              if (!result)
              {
                result = REBindPointCreateReferenceForComponentAnimatedValuesUInt32(a1, a2);
                if (!result)
                {
                  result = REBindPointCreateReferenceForComponentAnimatedValuesInt64(a1, a2);
                  if (!result)
                  {
                    result = REBindPointCreateReferenceForComponentAnimatedValuesFloat(a1, a2);
                    if (!result)
                    {
                      result = REBindPointCreateReferenceForComponentAnimatedValuesFloat2(a1, a2);
                      if (!result)
                      {
                        result = REBindPointCreateReferenceForComponentAnimatedValuesFloat3(a1, a2);
                        if (!result)
                        {
                          result = REBindPointCreateReferenceForComponentAnimatedValuesFloat4(a1, a2);
                          if (!result)
                          {
                            result = REBindPointCreateReferenceForComponentAnimatedValuesDouble(a1, a2);
                            if (!result)
                            {
                              result = REBindPointCreateReferenceForComponentAnimatedValuesDouble2(a1, a2);
                              if (!result)
                              {
                                result = REBindPointCreateReferenceForComponentAnimatedValuesDouble3(a1, a2);
                                if (!result)
                                {
                                  result = REBindPointCreateReferenceForComponentAnimatedValuesDouble4(a1, a2);
                                  if (!result)
                                  {
                                    result = REBindPointCreateReferenceForComponentAnimatedValuesQuatF(a1, a2);
                                    if (!result)
                                      return REBindPointCreateReferenceForComponentAnimatedValuesSRT(a1, a2);
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  return result;
}

uint64_t REBindPointCreateReferenceForComponentAnimatedValuesString(re *a1, const char *a2)
{
  uint64_t v2;
  unsigned __int8 v4;
  re *v5;
  uint64_t *v6;
  uint64_t v7;
  const re::IntrospectionBase *v9;
  uint64_t v10[2];
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  re::BindNode *v17[5];

  v2 = 0;
  v17[4] = *(re::BindNode **)MEMORY[0x24BDAC8D0];
  if (a1 && a2)
  {
    re::makeBindNode(a1, (uint64_t)v17);
    if ((v4 & 1) == 0
    {
      re::introspect<re::DynamicString>(void)::info = (uint64_t)re::IntrospectionInfo<re::DynamicString>::get(0, v9);
    }
    v10[0] = (uint64_t)a2;
    v10[1] = strlen(a2);
    re::BindNode::bindPointWithOverride(v17, re::introspect<re::DynamicString>(void)::info, v10, (uint64_t)&v11);
    re::BindNode::deinit((re::BindNode *)v17);
    if (v14)
    {
      v6 = re::globalAllocators(v5);
      v2 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v6[2] + 32))(v6[2], 48, 8);
      v7 = v11;
      *(_QWORD *)(v2 + 40) = 0;
      *(_DWORD *)(v2 + 32) = 0;
      *(_QWORD *)(v2 + 16) = 0;
      *(_QWORD *)(v2 + 24) = 0;
      *(_QWORD *)v2 = v7;
      *(_QWORD *)(v2 + 8) = 0;
      *(_QWORD *)(v2 + 8) = v12;
      *(_QWORD *)(v2 + 16) = v13;
      *(_QWORD *)(v2 + 24) = v14;
      v12 = 0;
      v13 = 0;
      v14 = 0;
      *(_QWORD *)(v2 + 40) = v16;
      v16 = 0;
      ++v15;
      ++*(_DWORD *)(v2 + 32);
    }
    else
    {
      v2 = 0;
    }
    re::DynamicArray<re::BindPoint::BindPointData>::deinit((uint64_t)&v12);
    re::DynamicArray<re::BindPoint::BindPointData>::deinit((uint64_t)&v12);
  }
  return v2;
}

uint64_t REBindPointCreateReferenceForComponentAnimatedValuesBool(re *a1, const char *a2)
{
  uint64_t v2;
  unsigned __int8 v4;
  re *v5;
  uint64_t *v6;
  uint64_t v7;
  const re::IntrospectionBase *v9;
  uint64_t v10[2];
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  re::BindNode *v17[5];

  v2 = 0;
  v17[4] = *(re::BindNode **)MEMORY[0x24BDAC8D0];
  if (a1 && a2)
  {
    re::makeBindNode(a1, (uint64_t)v17);
    if ((v4 & 1) == 0
    {
      re::introspect<BOOL>(void)::info = re::introspect_BOOL(0, v9);
    }
    v10[0] = (uint64_t)a2;
    v10[1] = strlen(a2);
    re::BindNode::bindPointWithOverride(v17, (uint64_t)re::introspect<BOOL>(void)::info, v10, (uint64_t)&v11);
    re::BindNode::deinit((re::BindNode *)v17);
    if (v14)
    {
      v6 = re::globalAllocators(v5);
      v2 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v6[2] + 32))(v6[2], 48, 8);
      v7 = v11;
      *(_QWORD *)(v2 + 40) = 0;
      *(_DWORD *)(v2 + 32) = 0;
      *(_QWORD *)(v2 + 16) = 0;
      *(_QWORD *)(v2 + 24) = 0;
      *(_QWORD *)v2 = v7;
      *(_QWORD *)(v2 + 8) = 0;
      *(_QWORD *)(v2 + 8) = v12;
      *(_QWORD *)(v2 + 16) = v13;
      *(_QWORD *)(v2 + 24) = v14;
      v12 = 0;
      v13 = 0;
      v14 = 0;
      *(_QWORD *)(v2 + 40) = v16;
      v16 = 0;
      ++v15;
      ++*(_DWORD *)(v2 + 32);
    }
    else
    {
      v2 = 0;
    }
    re::DynamicArray<re::BindPoint::BindPointData>::deinit((uint64_t)&v12);
    re::DynamicArray<re::BindPoint::BindPointData>::deinit((uint64_t)&v12);
  }
  return v2;
}

uint64_t REBindPointCreateReferenceForComponentAnimatedValuesInt8(re *a1, const char *a2)
{
  uint64_t v2;
  unsigned __int8 v4;
  re *v5;
  uint64_t *v6;
  uint64_t v7;
  const re::IntrospectionBase *v9;
  uint64_t v10[2];
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  re::BindNode *v17[5];

  v2 = 0;
  v17[4] = *(re::BindNode **)MEMORY[0x24BDAC8D0];
  if (a1 && a2)
  {
    re::makeBindNode(a1, (uint64_t)v17);
    if ((v4 & 1) == 0
    {
      re::introspect<char>(void)::info = (uint64_t)re::introspect_char(0, v9);
    }
    v10[0] = (uint64_t)a2;
    v10[1] = strlen(a2);
    re::BindNode::bindPointWithOverride(v17, re::introspect<char>(void)::info, v10, (uint64_t)&v11);
    re::BindNode::deinit((re::BindNode *)v17);
    if (v14)
    {
      v6 = re::globalAllocators(v5);
      v2 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v6[2] + 32))(v6[2], 48, 8);
      v7 = v11;
      *(_QWORD *)(v2 + 40) = 0;
      *(_DWORD *)(v2 + 32) = 0;
      *(_QWORD *)(v2 + 16) = 0;
      *(_QWORD *)(v2 + 24) = 0;
      *(_QWORD *)v2 = v7;
      *(_QWORD *)(v2 + 8) = 0;
      *(_QWORD *)(v2 + 8) = v12;
      *(_QWORD *)(v2 + 16) = v13;
      *(_QWORD *)(v2 + 24) = v14;
      v12 = 0;
      v13 = 0;
      v14 = 0;
      *(_QWORD *)(v2 + 40) = v16;
      v16 = 0;
      ++v15;
      ++*(_DWORD *)(v2 + 32);
    }
    else
    {
      v2 = 0;
    }
    re::DynamicArray<re::BindPoint::BindPointData>::deinit((uint64_t)&v12);
    re::DynamicArray<re::BindPoint::BindPointData>::deinit((uint64_t)&v12);
  }
  return v2;
}

uint64_t REBindPointCreateReferenceForComponentAnimatedValuesUInt8(re *a1, const char *a2)
{
  uint64_t v2;
  unsigned __int8 v4;
  re *v5;
  uint64_t *v6;
  uint64_t v7;
  const re::IntrospectionBase *v9;
  uint64_t v10[2];
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  re::BindNode *v17[5];

  v2 = 0;
  v17[4] = *(re::BindNode **)MEMORY[0x24BDAC8D0];
  if (a1 && a2)
  {
    re::makeBindNode(a1, (uint64_t)v17);
    if ((v4 & 1) == 0
    {
      re::introspect<unsigned char>(void)::info = re::introspect_uint8_t(0, v9);
    }
    v10[0] = (uint64_t)a2;
    v10[1] = strlen(a2);
    re::BindNode::bindPointWithOverride(v17, (uint64_t)re::introspect<unsigned char>(void)::info, v10, (uint64_t)&v11);
    re::BindNode::deinit((re::BindNode *)v17);
    if (v14)
    {
      v6 = re::globalAllocators(v5);
      v2 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v6[2] + 32))(v6[2], 48, 8);
      v7 = v11;
      *(_QWORD *)(v2 + 40) = 0;
      *(_DWORD *)(v2 + 32) = 0;
      *(_QWORD *)(v2 + 16) = 0;
      *(_QWORD *)(v2 + 24) = 0;
      *(_QWORD *)v2 = v7;
      *(_QWORD *)(v2 + 8) = 0;
      *(_QWORD *)(v2 + 8) = v12;
      *(_QWORD *)(v2 + 16) = v13;
      *(_QWORD *)(v2 + 24) = v14;
      v12 = 0;
      v13 = 0;
      v14 = 0;
      *(_QWORD *)(v2 + 40) = v16;
      v16 = 0;
      ++v15;
      ++*(_DWORD *)(v2 + 32);
    }
    else
    {
      v2 = 0;
    }
    re::DynamicArray<re::BindPoint::BindPointData>::deinit((uint64_t)&v12);
    re::DynamicArray<re::BindPoint::BindPointData>::deinit((uint64_t)&v12);
  }
  return v2;
}

uint64_t REBindPointCreateReferenceForComponentAnimatedValuesInt16(re *a1, const char *a2)
{
  uint64_t v2;
  unsigned __int8 v4;
  re *v5;
  uint64_t *v6;
  uint64_t v7;
  const re::IntrospectionBase *v9;
  uint64_t v10[2];
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  re::BindNode *v17[5];

  v2 = 0;
  v17[4] = *(re::BindNode **)MEMORY[0x24BDAC8D0];
  if (a1 && a2)
  {
    re::makeBindNode(a1, (uint64_t)v17);
    if ((v4 & 1) == 0
    {
      re::introspect<short>(void)::info = (uint64_t)re::introspect_short(0, v9);
    }
    v10[0] = (uint64_t)a2;
    v10[1] = strlen(a2);
    re::BindNode::bindPointWithOverride(v17, re::introspect<short>(void)::info, v10, (uint64_t)&v11);
    re::BindNode::deinit((re::BindNode *)v17);
    if (v14)
    {
      v6 = re::globalAllocators(v5);
      v2 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v6[2] + 32))(v6[2], 48, 8);
      v7 = v11;
      *(_QWORD *)(v2 + 40) = 0;
      *(_DWORD *)(v2 + 32) = 0;
      *(_QWORD *)(v2 + 16) = 0;
      *(_QWORD *)(v2 + 24) = 0;
      *(_QWORD *)v2 = v7;
      *(_QWORD *)(v2 + 8) = 0;
      *(_QWORD *)(v2 + 8) = v12;
      *(_QWORD *)(v2 + 16) = v13;
      *(_QWORD *)(v2 + 24) = v14;
      v12 = 0;
      v13 = 0;
      v14 = 0;
      *(_QWORD *)(v2 + 40) = v16;
      v16 = 0;
      ++v15;
      ++*(_DWORD *)(v2 + 32);
    }
    else
    {
      v2 = 0;
    }
    re::DynamicArray<re::BindPoint::BindPointData>::deinit((uint64_t)&v12);
    re::DynamicArray<re::BindPoint::BindPointData>::deinit((uint64_t)&v12);
  }
  return v2;
}

uint64_t REBindPointCreateReferenceForComponentAnimatedValuesUInt16(re *a1, const char *a2)
{
  uint64_t v2;
  unsigned __int8 v4;
  re *v5;
  uint64_t *v6;
  uint64_t v7;
  const re::IntrospectionBase *v9;
  uint64_t v10[2];
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  re::BindNode *v17[5];

  v2 = 0;
  v17[4] = *(re::BindNode **)MEMORY[0x24BDAC8D0];
  if (a1 && a2)
  {
    re::makeBindNode(a1, (uint64_t)v17);
    if ((v4 & 1) == 0
    {
      re::introspect<unsigned short>(void)::info = (uint64_t)re::introspect_uint16_t(0, v9);
    }
    v10[0] = (uint64_t)a2;
    v10[1] = strlen(a2);
    re::BindNode::bindPointWithOverride(v17, re::introspect<unsigned short>(void)::info, v10, (uint64_t)&v11);
    re::BindNode::deinit((re::BindNode *)v17);
    if (v14)
    {
      v6 = re::globalAllocators(v5);
      v2 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v6[2] + 32))(v6[2], 48, 8);
      v7 = v11;
      *(_QWORD *)(v2 + 40) = 0;
      *(_DWORD *)(v2 + 32) = 0;
      *(_QWORD *)(v2 + 16) = 0;
      *(_QWORD *)(v2 + 24) = 0;
      *(_QWORD *)v2 = v7;
      *(_QWORD *)(v2 + 8) = 0;
      *(_QWORD *)(v2 + 8) = v12;
      *(_QWORD *)(v2 + 16) = v13;
      *(_QWORD *)(v2 + 24) = v14;
      v12 = 0;
      v13 = 0;
      v14 = 0;
      *(_QWORD *)(v2 + 40) = v16;
      v16 = 0;
      ++v15;
      ++*(_DWORD *)(v2 + 32);
    }
    else
    {
      v2 = 0;
    }
    re::DynamicArray<re::BindPoint::BindPointData>::deinit((uint64_t)&v12);
    re::DynamicArray<re::BindPoint::BindPointData>::deinit((uint64_t)&v12);
  }
  return v2;
}

uint64_t REBindPointCreateReferenceForComponentAnimatedValuesInt32(re *a1, const char *a2)
{
  uint64_t v2;
  unsigned __int8 v4;
  re *v5;
  uint64_t *v6;
  uint64_t v7;
  const re::IntrospectionBase *v9;
  uint64_t v10[2];
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  re::BindNode *v17[5];

  v2 = 0;
  v17[4] = *(re::BindNode **)MEMORY[0x24BDAC8D0];
  if (a1 && a2)
  {
    re::makeBindNode(a1, (uint64_t)v17);
    if ((v4 & 1) == 0
    {
      re::introspect<int>(void)::info = re::introspect_int(0, v9);
    }
    v10[0] = (uint64_t)a2;
    v10[1] = strlen(a2);
    re::BindNode::bindPointWithOverride(v17, (uint64_t)re::introspect<int>(void)::info, v10, (uint64_t)&v11);
    re::BindNode::deinit((re::BindNode *)v17);
    if (v14)
    {
      v6 = re::globalAllocators(v5);
      v2 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v6[2] + 32))(v6[2], 48, 8);
      v7 = v11;
      *(_QWORD *)(v2 + 40) = 0;
      *(_DWORD *)(v2 + 32) = 0;
      *(_QWORD *)(v2 + 16) = 0;
      *(_QWORD *)(v2 + 24) = 0;
      *(_QWORD *)v2 = v7;
      *(_QWORD *)(v2 + 8) = 0;
      *(_QWORD *)(v2 + 8) = v12;
      *(_QWORD *)(v2 + 16) = v13;
      *(_QWORD *)(v2 + 24) = v14;
      v12 = 0;
      v13 = 0;
      v14 = 0;
      *(_QWORD *)(v2 + 40) = v16;
      v16 = 0;
      ++v15;
      ++*(_DWORD *)(v2 + 32);
    }
    else
    {
      v2 = 0;
    }
    re::DynamicArray<re::BindPoint::BindPointData>::deinit((uint64_t)&v12);
    re::DynamicArray<re::BindPoint::BindPointData>::deinit((uint64_t)&v12);
  }
  return v2;
}

uint64_t REBindPointCreateReferenceForComponentAnimatedValuesUInt32(re *a1, const char *a2)
{
  uint64_t v2;
  unsigned __int8 v4;
  re *v5;
  uint64_t *v6;
  uint64_t v7;
  const re::IntrospectionBase *v9;
  uint64_t v10[2];
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  re::BindNode *v17[5];

  v2 = 0;
  v17[4] = *(re::BindNode **)MEMORY[0x24BDAC8D0];
  if (a1 && a2)
  {
    re::makeBindNode(a1, (uint64_t)v17);
    if ((v4 & 1) == 0
    {
      re::introspect<unsigned int>(void)::info = re::introspect_uint32_t(0, v9);
    }
    v10[0] = (uint64_t)a2;
    v10[1] = strlen(a2);
    re::BindNode::bindPointWithOverride(v17, (uint64_t)re::introspect<unsigned int>(void)::info, v10, (uint64_t)&v11);
    re::BindNode::deinit((re::BindNode *)v17);
    if (v14)
    {
      v6 = re::globalAllocators(v5);
      v2 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v6[2] + 32))(v6[2], 48, 8);
      v7 = v11;
      *(_QWORD *)(v2 + 40) = 0;
      *(_DWORD *)(v2 + 32) = 0;
      *(_QWORD *)(v2 + 16) = 0;
      *(_QWORD *)(v2 + 24) = 0;
      *(_QWORD *)v2 = v7;
      *(_QWORD *)(v2 + 8) = 0;
      *(_QWORD *)(v2 + 8) = v12;
      *(_QWORD *)(v2 + 16) = v13;
      *(_QWORD *)(v2 + 24) = v14;
      v12 = 0;
      v13 = 0;
      v14 = 0;
      *(_QWORD *)(v2 + 40) = v16;
      v16 = 0;
      ++v15;
      ++*(_DWORD *)(v2 + 32);
    }
    else
    {
      v2 = 0;
    }
    re::DynamicArray<re::BindPoint::BindPointData>::deinit((uint64_t)&v12);
    re::DynamicArray<re::BindPoint::BindPointData>::deinit((uint64_t)&v12);
  }
  return v2;
}

uint64_t REBindPointCreateReferenceForComponentAnimatedValuesInt64(re *a1, const char *a2)
{
  uint64_t v2;
  unsigned __int8 v4;
  re *v5;
  uint64_t *v6;
  uint64_t v7;
  const re::IntrospectionBase *v9;
  uint64_t v10[2];
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  re::BindNode *v17[5];

  v2 = 0;
  v17[4] = *(re::BindNode **)MEMORY[0x24BDAC8D0];
  if (a1 && a2)
  {
    re::makeBindNode(a1, (uint64_t)v17);
    if ((v4 & 1) == 0
    {
      re::introspect<long long>(void)::info = (uint64_t)re::introspect_int64_t(0, v9);
    }
    v10[0] = (uint64_t)a2;
    v10[1] = strlen(a2);
    re::BindNode::bindPointWithOverride(v17, re::introspect<long long>(void)::info, v10, (uint64_t)&v11);
    re::BindNode::deinit((re::BindNode *)v17);
    if (v14)
    {
      v6 = re::globalAllocators(v5);
      v2 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v6[2] + 32))(v6[2], 48, 8);
      v7 = v11;
      *(_QWORD *)(v2 + 40) = 0;
      *(_DWORD *)(v2 + 32) = 0;
      *(_QWORD *)(v2 + 16) = 0;
      *(_QWORD *)(v2 + 24) = 0;
      *(_QWORD *)v2 = v7;
      *(_QWORD *)(v2 + 8) = 0;
      *(_QWORD *)(v2 + 8) = v12;
      *(_QWORD *)(v2 + 16) = v13;
      *(_QWORD *)(v2 + 24) = v14;
      v12 = 0;
      v13 = 0;
      v14 = 0;
      *(_QWORD *)(v2 + 40) = v16;
      v16 = 0;
      ++v15;
      ++*(_DWORD *)(v2 + 32);
    }
    else
    {
      v2 = 0;
    }
    re::DynamicArray<re::BindPoint::BindPointData>::deinit((uint64_t)&v12);
    re::DynamicArray<re::BindPoint::BindPointData>::deinit((uint64_t)&v12);
  }
  return v2;
}

uint64_t REBindPointCreateReferenceForComponentAnimatedValuesFloat(re *a1, const char *a2)
{
  uint64_t v2;
  unsigned __int8 v4;
  re *v5;
  uint64_t *v6;
  uint64_t v7;
  const re::IntrospectionBase *v9;
  uint64_t v10[2];
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  re::BindNode *v17[5];

  v2 = 0;
  v17[4] = *(re::BindNode **)MEMORY[0x24BDAC8D0];
  if (a1 && a2)
  {
    re::makeBindNode(a1, (uint64_t)v17);
    if ((v4 & 1) == 0
    {
      re::introspect<float>(void)::info = re::introspect_float(0, v9);
    }
    v10[0] = (uint64_t)a2;
    v10[1] = strlen(a2);
    re::BindNode::bindPointWithOverride(v17, (uint64_t)re::introspect<float>(void)::info, v10, (uint64_t)&v11);
    re::BindNode::deinit((re::BindNode *)v17);
    if (v14)
    {
      v6 = re::globalAllocators(v5);
      v2 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v6[2] + 32))(v6[2], 48, 8);
      v7 = v11;
      *(_QWORD *)(v2 + 40) = 0;
      *(_DWORD *)(v2 + 32) = 0;
      *(_QWORD *)(v2 + 16) = 0;
      *(_QWORD *)(v2 + 24) = 0;
      *(_QWORD *)v2 = v7;
      *(_QWORD *)(v2 + 8) = 0;
      *(_QWORD *)(v2 + 8) = v12;
      *(_QWORD *)(v2 + 16) = v13;
      *(_QWORD *)(v2 + 24) = v14;
      v12 = 0;
      v13 = 0;
      v14 = 0;
      *(_QWORD *)(v2 + 40) = v16;
      v16 = 0;
      ++v15;
      ++*(_DWORD *)(v2 + 32);
    }
    else
    {
      v2 = 0;
    }
    re::DynamicArray<re::BindPoint::BindPointData>::deinit((uint64_t)&v12);
    re::DynamicArray<re::BindPoint::BindPointData>::deinit((uint64_t)&v12);
  }
  return v2;
}

uint64_t REBindPointCreateReferenceForComponentAnimatedValuesFloat2(re *a1, const char *a2)
{
  uint64_t v2;
  unsigned __int8 v4;
  re *v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v9[2];
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  re::BindNode *v16[5];

  v2 = 0;
  v16[4] = *(re::BindNode **)MEMORY[0x24BDAC8D0];
  if (a1 && a2)
  {
    re::makeBindNode(a1, (uint64_t)v16);
    if ((v4 & 1) == 0
    {
      re::introspect<re::Vector2<float>>(void)::info = (_UNKNOWN *)re::introspect_Vector2F(0);
    }
    v9[0] = (uint64_t)a2;
    v9[1] = strlen(a2);
    re::BindNode::bindPointWithOverride(v16, (uint64_t)re::introspect<re::Vector2<float>>(void)::info, v9, (uint64_t)&v10);
    re::BindNode::deinit((re::BindNode *)v16);
    if (v13)
    {
      v6 = re::globalAllocators(v5);
      v2 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v6[2] + 32))(v6[2], 48, 8);
      v7 = v10;
      *(_QWORD *)(v2 + 40) = 0;
      *(_DWORD *)(v2 + 32) = 0;
      *(_QWORD *)(v2 + 16) = 0;
      *(_QWORD *)(v2 + 24) = 0;
      *(_QWORD *)v2 = v7;
      *(_QWORD *)(v2 + 8) = 0;
      *(_QWORD *)(v2 + 8) = v11;
      *(_QWORD *)(v2 + 16) = v12;
      *(_QWORD *)(v2 + 24) = v13;
      v11 = 0;
      v12 = 0;
      v13 = 0;
      *(_QWORD *)(v2 + 40) = v15;
      v15 = 0;
      ++v14;
      ++*(_DWORD *)(v2 + 32);
    }
    else
    {
      v2 = 0;
    }
    re::DynamicArray<re::BindPoint::BindPointData>::deinit((uint64_t)&v11);
    re::DynamicArray<re::BindPoint::BindPointData>::deinit((uint64_t)&v11);
  }
  return v2;
}

uint64_t REBindPointCreateReferenceForComponentAnimatedValuesFloat3(re *a1, const char *a2)
{
  uint64_t v2;
  unsigned __int8 v4;
  re *v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v9[2];
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  re::BindNode *v16[5];

  v2 = 0;
  v16[4] = *(re::BindNode **)MEMORY[0x24BDAC8D0];
  if (a1 && a2)
  {
    re::makeBindNode(a1, (uint64_t)v16);
    if ((v4 & 1) == 0
    {
      re::introspect<re::Vector3<float>>(void)::info = (_UNKNOWN *)re::introspect_Vector3F(0);
    }
    v9[0] = (uint64_t)a2;
    v9[1] = strlen(a2);
    re::BindNode::bindPointWithOverride(v16, (uint64_t)re::introspect<re::Vector3<float>>(void)::info, v9, (uint64_t)&v10);
    re::BindNode::deinit((re::BindNode *)v16);
    if (v13)
    {
      v6 = re::globalAllocators(v5);
      v2 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v6[2] + 32))(v6[2], 48, 8);
      v7 = v10;
      *(_QWORD *)(v2 + 40) = 0;
      *(_DWORD *)(v2 + 32) = 0;
      *(_QWORD *)(v2 + 16) = 0;
      *(_QWORD *)(v2 + 24) = 0;
      *(_QWORD *)v2 = v7;
      *(_QWORD *)(v2 + 8) = 0;
      *(_QWORD *)(v2 + 8) = v11;
      *(_QWORD *)(v2 + 16) = v12;
      *(_QWORD *)(v2 + 24) = v13;
      v11 = 0;
      v12 = 0;
      v13 = 0;
      *(_QWORD *)(v2 + 40) = v15;
      v15 = 0;
      ++v14;
      ++*(_DWORD *)(v2 + 32);
    }
    else
    {
      v2 = 0;
    }
    re::DynamicArray<re::BindPoint::BindPointData>::deinit((uint64_t)&v11);
    re::DynamicArray<re::BindPoint::BindPointData>::deinit((uint64_t)&v11);
  }
  return v2;
}

uint64_t REBindPointCreateReferenceForComponentAnimatedValuesFloat4(re *a1, const char *a2)
{
  uint64_t v2;
  unsigned __int8 v4;
  re *v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v9[2];
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  re::BindNode *v16[5];

  v2 = 0;
  v16[4] = *(re::BindNode **)MEMORY[0x24BDAC8D0];
  if (a1 && a2)
  {
    re::makeBindNode(a1, (uint64_t)v16);
    if ((v4 & 1) == 0
    {
      re::introspect<re::Vector4<float>>(void)::info = (_UNKNOWN *)re::introspect_Vector4F(0);
    }
    v9[0] = (uint64_t)a2;
    v9[1] = strlen(a2);
    re::BindNode::bindPointWithOverride(v16, (uint64_t)re::introspect<re::Vector4<float>>(void)::info, v9, (uint64_t)&v10);
    re::BindNode::deinit((re::BindNode *)v16);
    if (v13)
    {
      v6 = re::globalAllocators(v5);
      v2 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v6[2] + 32))(v6[2], 48, 8);
      v7 = v10;
      *(_QWORD *)(v2 + 40) = 0;
      *(_DWORD *)(v2 + 32) = 0;
      *(_QWORD *)(v2 + 16) = 0;
      *(_QWORD *)(v2 + 24) = 0;
      *(_QWORD *)v2 = v7;
      *(_QWORD *)(v2 + 8) = 0;
      *(_QWORD *)(v2 + 8) = v11;
      *(_QWORD *)(v2 + 16) = v12;
      *(_QWORD *)(v2 + 24) = v13;
      v11 = 0;
      v12 = 0;
      v13 = 0;
      *(_QWORD *)(v2 + 40) = v15;
      v15 = 0;
      ++v14;
      ++*(_DWORD *)(v2 + 32);
    }
    else
    {
      v2 = 0;
    }
    re::DynamicArray<re::BindPoint::BindPointData>::deinit((uint64_t)&v11);
    re::DynamicArray<re::BindPoint::BindPointData>::deinit((uint64_t)&v11);
  }
  return v2;
}

uint64_t REBindPointCreateReferenceForComponentAnimatedValuesDouble(re *a1, const char *a2)
{
  uint64_t v2;
  unsigned __int8 v4;
  re *v5;
  uint64_t *v6;
  uint64_t v7;
  const re::IntrospectionBase *v9;
  uint64_t v10[2];
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  re::BindNode *v17[5];

  v2 = 0;
  v17[4] = *(re::BindNode **)MEMORY[0x24BDAC8D0];
  if (a1 && a2)
  {
    re::makeBindNode(a1, (uint64_t)v17);
    if ((v4 & 1) == 0
    {
      re::introspect<double>(void)::info = (uint64_t)re::introspect_double(0, v9);
    }
    v10[0] = (uint64_t)a2;
    v10[1] = strlen(a2);
    re::BindNode::bindPointWithOverride(v17, re::introspect<double>(void)::info, v10, (uint64_t)&v11);
    re::BindNode::deinit((re::BindNode *)v17);
    if (v14)
    {
      v6 = re::globalAllocators(v5);
      v2 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v6[2] + 32))(v6[2], 48, 8);
      v7 = v11;
      *(_QWORD *)(v2 + 40) = 0;
      *(_DWORD *)(v2 + 32) = 0;
      *(_QWORD *)(v2 + 16) = 0;
      *(_QWORD *)(v2 + 24) = 0;
      *(_QWORD *)v2 = v7;
      *(_QWORD *)(v2 + 8) = 0;
      *(_QWORD *)(v2 + 8) = v12;
      *(_QWORD *)(v2 + 16) = v13;
      *(_QWORD *)(v2 + 24) = v14;
      v12 = 0;
      v13 = 0;
      v14 = 0;
      *(_QWORD *)(v2 + 40) = v16;
      v16 = 0;
      ++v15;
      ++*(_DWORD *)(v2 + 32);
    }
    else
    {
      v2 = 0;
    }
    re::DynamicArray<re::BindPoint::BindPointData>::deinit((uint64_t)&v12);
    re::DynamicArray<re::BindPoint::BindPointData>::deinit((uint64_t)&v12);
  }
  return v2;
}

uint64_t REBindPointCreateReferenceForComponentAnimatedValuesDouble2(re *a1, const char *a2)
{
  uint64_t v2;
  unsigned __int8 v4;
  re *v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v9[2];
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  re::BindNode *v16[5];

  v2 = 0;
  v16[4] = *(re::BindNode **)MEMORY[0x24BDAC8D0];
  if (a1 && a2)
  {
    re::makeBindNode(a1, (uint64_t)v16);
    v4 = atomic_load((unsigned __int8 *)&qword_254123F18);
    if ((v4 & 1) == 0 && __cxa_guard_acquire(&qword_254123F18))
    {
      _MergedGlobals_506 = re::introspect_Vector2D(0);
      __cxa_guard_release(&qword_254123F18);
    }
    v9[0] = (uint64_t)a2;
    v9[1] = strlen(a2);
    re::BindNode::bindPointWithOverride(v16, _MergedGlobals_506, v9, (uint64_t)&v10);
    re::BindNode::deinit((re::BindNode *)v16);
    if (v13)
    {
      v6 = re::globalAllocators(v5);
      v2 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v6[2] + 32))(v6[2], 48, 8);
      v7 = v10;
      *(_QWORD *)(v2 + 40) = 0;
      *(_DWORD *)(v2 + 32) = 0;
      *(_QWORD *)(v2 + 16) = 0;
      *(_QWORD *)(v2 + 24) = 0;
      *(_QWORD *)v2 = v7;
      *(_QWORD *)(v2 + 8) = 0;
      *(_QWORD *)(v2 + 8) = v11;
      *(_QWORD *)(v2 + 16) = v12;
      *(_QWORD *)(v2 + 24) = v13;
      v11 = 0;
      v12 = 0;
      v13 = 0;
      *(_QWORD *)(v2 + 40) = v15;
      v15 = 0;
      ++v14;
      ++*(_DWORD *)(v2 + 32);
    }
    else
    {
      v2 = 0;
    }
    re::DynamicArray<re::BindPoint::BindPointData>::deinit((uint64_t)&v11);
    re::DynamicArray<re::BindPoint::BindPointData>::deinit((uint64_t)&v11);
  }
  return v2;
}

uint64_t REBindPointCreateReferenceForComponentAnimatedValuesDouble3(re *a1, const char *a2)
{
  uint64_t v2;
  unsigned __int8 v4;
  re *v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v9[2];
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  re::BindNode *v16[5];

  v2 = 0;
  v16[4] = *(re::BindNode **)MEMORY[0x24BDAC8D0];
  if (a1 && a2)
  {
    re::makeBindNode(a1, (uint64_t)v16);
    v4 = atomic_load((unsigned __int8 *)&qword_254123F28);
    if ((v4 & 1) == 0 && __cxa_guard_acquire(&qword_254123F28))
    {
      qword_254123F20 = re::introspect_Vector3D(0);
      __cxa_guard_release(&qword_254123F28);
    }
    v9[0] = (uint64_t)a2;
    v9[1] = strlen(a2);
    re::BindNode::bindPointWithOverride(v16, qword_254123F20, v9, (uint64_t)&v10);
    re::BindNode::deinit((re::BindNode *)v16);
    if (v13)
    {
      v6 = re::globalAllocators(v5);
      v2 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v6[2] + 32))(v6[2], 48, 8);
      v7 = v10;
      *(_QWORD *)(v2 + 40) = 0;
      *(_DWORD *)(v2 + 32) = 0;
      *(_QWORD *)(v2 + 16) = 0;
      *(_QWORD *)(v2 + 24) = 0;
      *(_QWORD *)v2 = v7;
      *(_QWORD *)(v2 + 8) = 0;
      *(_QWORD *)(v2 + 8) = v11;
      *(_QWORD *)(v2 + 16) = v12;
      *(_QWORD *)(v2 + 24) = v13;
      v11 = 0;
      v12 = 0;
      v13 = 0;
      *(_QWORD *)(v2 + 40) = v15;
      v15 = 0;
      ++v14;
      ++*(_DWORD *)(v2 + 32);
    }
    else
    {
      v2 = 0;
    }
    re::DynamicArray<re::BindPoint::BindPointData>::deinit((uint64_t)&v11);
    re::DynamicArray<re::BindPoint::BindPointData>::deinit((uint64_t)&v11);
  }
  return v2;
}

uint64_t REBindPointCreateReferenceForComponentAnimatedValuesDouble4(re *a1, const char *a2)
{
  uint64_t v2;
  unsigned __int8 v4;
  re *v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v9[2];
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  re::BindNode *v16[5];

  v2 = 0;
  v16[4] = *(re::BindNode **)MEMORY[0x24BDAC8D0];
  if (a1 && a2)
  {
    re::makeBindNode(a1, (uint64_t)v16);
    v4 = atomic_load((unsigned __int8 *)&qword_254123F38);
    if ((v4 & 1) == 0 && __cxa_guard_acquire(&qword_254123F38))
    {
      qword_254123F30 = re::introspect_Vector4D(0);
      __cxa_guard_release(&qword_254123F38);
    }
    v9[0] = (uint64_t)a2;
    v9[1] = strlen(a2);
    re::BindNode::bindPointWithOverride(v16, qword_254123F30, v9, (uint64_t)&v10);
    re::BindNode::deinit((re::BindNode *)v16);
    if (v13)
    {
      v6 = re::globalAllocators(v5);
      v2 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v6[2] + 32))(v6[2], 48, 8);
      v7 = v10;
      *(_QWORD *)(v2 + 40) = 0;
      *(_DWORD *)(v2 + 32) = 0;
      *(_QWORD *)(v2 + 16) = 0;
      *(_QWORD *)(v2 + 24) = 0;
      *(_QWORD *)v2 = v7;
      *(_QWORD *)(v2 + 8) = 0;
      *(_QWORD *)(v2 + 8) = v11;
      *(_QWORD *)(v2 + 16) = v12;
      *(_QWORD *)(v2 + 24) = v13;
      v11 = 0;
      v12 = 0;
      v13 = 0;
      *(_QWORD *)(v2 + 40) = v15;
      v15 = 0;
      ++v14;
      ++*(_DWORD *)(v2 + 32);
    }
    else
    {
      v2 = 0;
    }
    re::DynamicArray<re::BindPoint::BindPointData>::deinit((uint64_t)&v11);
    re::DynamicArray<re::BindPoint::BindPointData>::deinit((uint64_t)&v11);
  }
  return v2;
}

uint64_t REBindPointCreateReferenceForComponentAnimatedValuesQuatF(re *a1, const char *a2)
{
  uint64_t v2;
  unsigned __int8 v4;
  re *v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v9[2];
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  re::BindNode *v16[5];

  v2 = 0;
  v16[4] = *(re::BindNode **)MEMORY[0x24BDAC8D0];
  if (a1 && a2)
  {
    re::makeBindNode(a1, (uint64_t)v16);
    if ((v4 & 1) == 0
    {
      re::introspect<re::Quaternion<float>>(void)::info = re::introspect_QuaternionF(0);
    }
    v9[0] = (uint64_t)a2;
    v9[1] = strlen(a2);
    re::BindNode::bindPointWithOverride(v16, re::introspect<re::Quaternion<float>>(void)::info, v9, (uint64_t)&v10);
    re::BindNode::deinit((re::BindNode *)v16);
    if (v13)
    {
      v6 = re::globalAllocators(v5);
      v2 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v6[2] + 32))(v6[2], 48, 8);
      v7 = v10;
      *(_QWORD *)(v2 + 40) = 0;
      *(_DWORD *)(v2 + 32) = 0;
      *(_QWORD *)(v2 + 16) = 0;
      *(_QWORD *)(v2 + 24) = 0;
      *(_QWORD *)v2 = v7;
      *(_QWORD *)(v2 + 8) = 0;
      *(_QWORD *)(v2 + 8) = v11;
      *(_QWORD *)(v2 + 16) = v12;
      *(_QWORD *)(v2 + 24) = v13;
      v11 = 0;
      v12 = 0;
      v13 = 0;
      *(_QWORD *)(v2 + 40) = v15;
      v15 = 0;
      ++v14;
      ++*(_DWORD *)(v2 + 32);
    }
    else
    {
      v2 = 0;
    }
    re::DynamicArray<re::BindPoint::BindPointData>::deinit((uint64_t)&v11);
    re::DynamicArray<re::BindPoint::BindPointData>::deinit((uint64_t)&v11);
  }
  return v2;
}

uint64_t REBindPointCreateReferenceForComponentAnimatedValuesSRT(re *a1, const char *a2)
{
  uint64_t v2;
  unsigned __int8 v4;
  re *v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v9[2];
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  re::BindNode *v16[5];

  v2 = 0;
  v16[4] = *(re::BindNode **)MEMORY[0x24BDAC8D0];
  if (a1 && a2)
  {
    re::makeBindNode(a1, (uint64_t)v16);
    if ((v4 & 1) == 0
    {
      re::introspect<re::GenericSRT<float>>(void)::info = re::introspect_SRT(0);
    }
    v9[0] = (uint64_t)a2;
    v9[1] = strlen(a2);
    re::BindNode::bindPointWithOverride(v16, re::introspect<re::GenericSRT<float>>(void)::info, v9, (uint64_t)&v10);
    re::BindNode::deinit((re::BindNode *)v16);
    if (v13)
    {
      v6 = re::globalAllocators(v5);
      v2 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v6[2] + 32))(v6[2], 48, 8);
      v7 = v10;
      *(_QWORD *)(v2 + 40) = 0;
      *(_DWORD *)(v2 + 32) = 0;
      *(_QWORD *)(v2 + 16) = 0;
      *(_QWORD *)(v2 + 24) = 0;
      *(_QWORD *)v2 = v7;
      *(_QWORD *)(v2 + 8) = 0;
      *(_QWORD *)(v2 + 8) = v11;
      *(_QWORD *)(v2 + 16) = v12;
      *(_QWORD *)(v2 + 24) = v13;
      v11 = 0;
      v12 = 0;
      v13 = 0;
      *(_QWORD *)(v2 + 40) = v15;
      v15 = 0;
      ++v14;
      ++*(_DWORD *)(v2 + 32);
    }
    else
    {
      v2 = 0;
    }
    re::DynamicArray<re::BindPoint::BindPointData>::deinit((uint64_t)&v11);
    re::DynamicArray<re::BindPoint::BindPointData>::deinit((uint64_t)&v11);
  }
  return v2;
}

re *REBindPointDestroy(re *result)
{
  re *v1;
  uint64_t v2;

  if (result)
  {
    v1 = result;
    v2 = re::globalAllocators(result)[2];
    re::DynamicArray<re::BindPoint::BindPointData>::deinit((uint64_t)v1 + 8);
    re::DynamicArray<re::BindPoint::BindPointData>::deinit((uint64_t)v1 + 8);
    return (re *)(*(uint64_t (**)(uint64_t, re *))(*(_QWORD *)v2 + 40))(v2, v1);
  }
  return result;
}

uint64_t REBindPointGetString(re::BindPoint *a1, uint64_t *a2)
{
  uint64_t result;
  uint64_t v5;

  if (!a2)
    return 0;
  if ((_DWORD)result)
  {
    result = re::BindPoint::valueUntyped(a1);
    if (result)
    {
      if ((*(_BYTE *)(result + 8) & 1) == 0)
      {
        v5 = result + 9;
LABEL_8:
        *a2 = v5;
        return 1;
      }
      v5 = *(_QWORD *)(result + 16);
      if (v5)
        goto LABEL_8;
      return 0;
    }
  }
  return result;
}

uint64_t REBindPointGetBool(re::BindPoint *a1, _BYTE *a2)
{
  uint64_t result;

  if (!a2)
    return 0;
  if ((_DWORD)result)
  {
    result = re::BindPoint::valueUntyped(a1);
    if (result)
    {
      *a2 = *(_BYTE *)result;
      return 1;
    }
  }
  return result;
}

uint64_t REBindPointGetInt8(re::BindPoint *a1, _BYTE *a2)
{
  uint64_t result;

  if (!a2)
    return 0;
  if ((_DWORD)result)
  {
    result = re::BindPoint::valueUntyped(a1);
    if (result)
    {
      *a2 = *(_BYTE *)result;
      return 1;
    }
  }
  return result;
}

uint64_t REBindPointGetUInt8(re::BindPoint *a1, _BYTE *a2)
{
  uint64_t result;

  if (!a2)
    return 0;
  if ((_DWORD)result)
  {
    result = re::BindPoint::valueUntyped(a1);
    if (result)
    {
      *a2 = *(_BYTE *)result;
      return 1;
    }
  }
  return result;
}

uint64_t REBindPointGetInt16(re::BindPoint *a1, _WORD *a2)
{
  uint64_t result;

  if (!a2)
    return 0;
  if ((_DWORD)result)
  {
    result = re::BindPoint::valueUntyped(a1);
    if (result)
    {
      *a2 = *(_WORD *)result;
      return 1;
    }
  }
  return result;
}

uint64_t REBindPointGetUInt16(re::BindPoint *a1, _WORD *a2)
{
  uint64_t result;

  if (!a2)
    return 0;
  if ((_DWORD)result)
  {
    result = re::BindPoint::valueUntyped(a1);
    if (result)
    {
      *a2 = *(_WORD *)result;
      return 1;
    }
  }
  return result;
}

uint64_t REBindPointGetInt32(re::BindPoint *a1, _DWORD *a2)
{
  uint64_t result;

  if (!a2)
    return 0;
  if ((_DWORD)result)
  {
    result = re::BindPoint::valueUntyped(a1);
    if (result)
    {
      *a2 = *(_DWORD *)result;
      return 1;
    }
  }
  return result;
}

uint64_t REBindPointGetUInt32(re::BindPoint *a1, _DWORD *a2)
{
  uint64_t result;

  if (!a2)
    return 0;
  if ((_DWORD)result)
  {
    result = re::BindPoint::valueUntyped(a1);
    if (result)
    {
      *a2 = *(_DWORD *)result;
      return 1;
    }
  }
  return result;
}

uint64_t REBindPointGetInt64(re::BindPoint *a1, _QWORD *a2)
{
  uint64_t result;

  if (!a2)
    return 0;
  if ((_DWORD)result)
  {
    result = re::BindPoint::valueUntyped(a1);
    if (result)
    {
      *a2 = *(_QWORD *)result;
      return 1;
    }
  }
  return result;
}

uint64_t REBindPointGetFloat(re::BindPoint *a1, _DWORD *a2)
{
  uint64_t result;

  if (!a2)
    return 0;
  if ((_DWORD)result)
  {
    result = re::BindPoint::valueUntyped(a1);
    if (result)
    {
      *a2 = *(_DWORD *)result;
      return 1;
    }
  }
  return result;
}

uint64_t REBindPointGetFloat2(re::BindPoint *a1, _QWORD *a2)
{
  uint64_t result;

  if (!a2)
    return 0;
  if ((_DWORD)result)
  {
    result = re::BindPoint::valueUntyped(a1);
    if (result)
    {
      *a2 = *(_QWORD *)result;
      return 1;
    }
  }
  return result;
}

uint64_t REBindPointGetFloat3(re::BindPoint *a1, _OWORD *a2)
{
  uint64_t result;

  if (!a2)
    return 0;
  if ((_DWORD)result)
  {
    result = re::BindPoint::valueUntyped(a1);
    if (result)
    {
      *a2 = *(_OWORD *)result;
      return 1;
    }
  }
  return result;
}

uint64_t REBindPointGetFloat4(re::BindPoint *a1, _OWORD *a2)
{
  uint64_t result;

  if (!a2)
    return 0;
  if ((_DWORD)result)
  {
    result = re::BindPoint::valueUntyped(a1);
    if (result)
    {
      *a2 = *(_OWORD *)result;
      return 1;
    }
  }
  return result;
}

uint64_t REBindPointGetDouble(re::BindPoint *a1, _QWORD *a2)
{
  uint64_t result;

  if (!a2)
    return 0;
  if ((_DWORD)result)
  {
    result = re::BindPoint::valueUntyped(a1);
    if (result)
    {
      *a2 = *(_QWORD *)result;
      return 1;
    }
  }
  return result;
}

uint64_t REBindPointGetDouble2(re::BindPoint *a1, _OWORD *a2)
{
  uint64_t result;

  if (!a2)
    return 0;
  if ((_DWORD)result)
  {
    result = re::BindPoint::valueUntyped(a1);
    if (result)
    {
      *a2 = *(_OWORD *)result;
      return 1;
    }
  }
  return result;
}

uint64_t REBindPointGetDouble3(re::BindPoint *a1, _OWORD *a2)
{
  uint64_t result;
  __int128 v5;

  if (!a2)
    return 0;
  if ((_DWORD)result)
  {
    result = re::BindPoint::valueUntyped(a1);
    if (result)
    {
      v5 = *(_OWORD *)(result + 16);
      *a2 = *(_OWORD *)result;
      a2[1] = v5;
      return 1;
    }
  }
  return result;
}

uint64_t REBindPointGetDouble4(re::BindPoint *a1, _OWORD *a2)
{
  uint64_t result;
  __int128 v5;

  if (!a2)
    return 0;
  if ((_DWORD)result)
  {
    result = re::BindPoint::valueUntyped(a1);
    if (result)
    {
      v5 = *(_OWORD *)(result + 16);
      *a2 = *(_OWORD *)result;
      a2[1] = v5;
      return 1;
    }
  }
  return result;
}

uint64_t REBindPointGetQuatF(re::BindPoint *a1, _OWORD *a2)
{
  uint64_t result;

  if (!a2)
    return 0;
  if ((_DWORD)result)
  {
    result = re::BindPoint::valueUntyped(a1);
    if (result)
    {
      *a2 = *(_OWORD *)result;
      return 1;
    }
  }
  return result;
}

uint64_t REBindPointGetSRT(re::BindPoint *a1, _OWORD *a2)
{
  uint64_t result;
  __int128 v5;
  __int128 v6;

  if (!a2)
    return 0;
  if ((_DWORD)result)
  {
    result = re::BindPoint::valueUntyped(a1);
    if (result)
    {
      v5 = *(_OWORD *)(result + 16);
      v6 = *(_OWORD *)(result + 32);
      *a2 = *(_OWORD *)result;
      a2[1] = v5;
      a2[2] = v6;
      return 1;
    }
  }
  return result;
}

re::BindPoint *REBindPointSetOverrideEnabled(re::BindPoint *result, uint64_t a2)
{
  uint64_t v3;

  if (result)
  {
    v3 = (uint64_t)result;
    result = (re::BindPoint *)re::BindPoint::isAlive(result);
    if ((_DWORD)result)
      return (re::BindPoint *)re::BindPoint::setIsOverridden(v3, a2);
  }
  return result;
}

uint64_t REBindPointIsOverrideEnabled(re::BindPoint *a1)
{
  if (a1 && *((_QWORD *)a1 + 3))
    return re::BindPoint::isOverridden(a1);
  else
    return 0;
}

uint64_t REBindPointIsOverridable(re::BindPoint *a1)
{
  if (a1 && *((_QWORD *)a1 + 3))
    return re::BindPoint::supportsOverrideValue(a1);
  else
    return 0;
}

BOOL REBindPointIsValid(_BOOL8 result)
{
  if (result)
    return *(_QWORD *)(result + 24) != 0;
  return result;
}

re::BindPoint *REBindPointIsAlive(re::BindPoint *result)
{
  if (result)
    return (re::BindPoint *)re::BindPoint::isAlive(result);
  return result;
}

uint64_t REBindPointMarkAsWritten(uint64_t this, int a2)
{
  uint64_t v2;

  if (this)
  {
    v2 = this;
    if (*(_QWORD *)(this + 24))
    {
      if (!a2)
      {
LABEL_6:
        re::BindPoint::markAsWritten(v2);
        return 1;
      }
      if (a2 == 1)
      {
        this = re::BindPoint::supportsOverrideValue((re::BindPoint *)this);
        if (!(_DWORD)this)
          return this;
        goto LABEL_6;
      }
    }
    return 0;
  }
  return this;
}

CFStringRef REBindKeyEscape(const char *a1)
{
  const char *v1;
  CFStringRef v2;
  uint64_t *v4;
  uint64_t v5;
  const char *v6;
  uint64_t v7;
  const char *v8;
  _anonymous_namespace_ *v9;

  v8 = a1;
  v9 = (_anonymous_namespace_ *)strlen(a1);
  v5 = 0;
  v6 = 0;
  v7 = 0;
  re::DynamicString::setCapacity(&v4, 0);
  re::internal::escapeBindingKey(&v8, (re::DynamicString *)&v4);
  if ((v5 & 1) != 0)
    v1 = v6;
  else
    v1 = (char *)&v5 + 1;
  v2 = CFStringCreateWithCString(0, v1, 0x8000100u);
  if (v4 && (v5 & 1) != 0)
    (*(void (**)(void))(*v4 + 40))();
  return v2;
}

CFStringRef REBindKeyUnescape(const char *a1)
{
  const char *v1;
  CFStringRef v2;
  uint64_t *v4;
  uint64_t v5;
  const char *v6;
  uint64_t v7;
  const char *v8;
  _anonymous_namespace_ *v9;

  v8 = a1;
  v9 = (_anonymous_namespace_ *)strlen(a1);
  v5 = 0;
  v6 = 0;
  v7 = 0;
  re::DynamicString::setCapacity(&v4, 0);
  re::internal::unescapeBindingKey((uint64_t *)&v8, (re::DynamicString *)&v4);
  if ((v5 & 1) != 0)
    v1 = v6;
  else
    v1 = (char *)&v5 + 1;
  v2 = CFStringCreateWithCString(0, v1, 0x8000100u);
  if (v4 && (v5 & 1) != 0)
    (*(void (**)(void))(*v4 + 40))();
  return v2;
}

uint64_t REBindPointSetString(_anonymous_namespace_ *a1, const char *a2, int a3)
{
  re::DynamicString *v6;
  uint64_t v7;
  uint64_t v9;
  char v10;

  if (!a2)
    return 0;
  {
    if (a3 == 1)
    {
      re::BindPoint::setValue<re::DynamicString>((uint64_t)a1, (re::DynamicString *)&v9);
LABEL_10:
      v7 = 1;
      goto LABEL_11;
    }
    if (!a3)
    {
      v6 = (re::DynamicString *)re::BindPoint::baseValueUntyped(a1);
      if (v6)
      {
        re::DynamicString::operator=(v6, (re::DynamicString *)&v9);
        re::BindPoint::markAsWritten((uint64_t)a1);
      }
      goto LABEL_10;
    }
  }
  v7 = 0;
LABEL_11:
  if (v9 && (v10 & 1) != 0)
    (*(void (**)(void))(*(_QWORD *)v9 + 40))();
  return v7;
}

uint64_t REBindPointSetBool(re::BindPoint *a1, unsigned __int8 a2, int a3)
{
  uint64_t result;
  unsigned __int8 *v7;
  unsigned __int8 v8;

  v8 = a2;
  if ((_DWORD)result)
  {
    if (a3 == 1)
    {
      re::BindPoint::setValue<BOOL>((unsigned __int8 *)a1, &v8);
      return 1;
    }
    if (!a3)
    {
      v7 = (unsigned __int8 *)re::BindPoint::baseValueUntyped(a1);
      if (v7)
      {
        *v7 = a2;
        re::BindPoint::markAsWritten((uint64_t)a1);
      }
      return 1;
    }
    return 0;
  }
  return result;
}

uint64_t REBindPointSetInt8(re::BindPoint *a1, unsigned __int8 a2, int a3)
{
  uint64_t result;
  unsigned __int8 *v7;
  unsigned __int8 v8;

  v8 = a2;
  if ((_DWORD)result)
  {
    if (a3 == 1)
    {
      re::BindPoint::setValue<BOOL>((unsigned __int8 *)a1, &v8);
      return 1;
    }
    if (!a3)
    {
      v7 = (unsigned __int8 *)re::BindPoint::baseValueUntyped(a1);
      if (v7)
      {
        *v7 = a2;
        re::BindPoint::markAsWritten((uint64_t)a1);
      }
      return 1;
    }
    return 0;
  }
  return result;
}

uint64_t REBindPointSetUInt8(re::BindPoint *a1, unsigned __int8 a2, int a3)
{
  uint64_t result;
  unsigned __int8 *v7;
  unsigned __int8 v8;

  v8 = a2;
  if ((_DWORD)result)
  {
    if (a3 == 1)
    {
      re::BindPoint::setValue<BOOL>((unsigned __int8 *)a1, &v8);
      return 1;
    }
    if (!a3)
    {
      v7 = (unsigned __int8 *)re::BindPoint::baseValueUntyped(a1);
      if (v7)
      {
        *v7 = a2;
        re::BindPoint::markAsWritten((uint64_t)a1);
      }
      return 1;
    }
    return 0;
  }
  return result;
}

uint64_t REBindPointSetInt16(re::BindPoint *a1, unsigned __int16 a2, int a3)
{
  uint64_t result;
  unsigned __int16 *v7;
  unsigned __int16 v8;

  v8 = a2;
  if ((_DWORD)result)
  {
    if (a3 == 1)
    {
      re::BindPoint::setValue<short>((unsigned __int16 *)a1, &v8);
      return 1;
    }
    if (!a3)
    {
      v7 = (unsigned __int16 *)re::BindPoint::baseValueUntyped(a1);
      if (v7)
      {
        *v7 = a2;
        re::BindPoint::markAsWritten((uint64_t)a1);
      }
      return 1;
    }
    return 0;
  }
  return result;
}

uint64_t REBindPointSetUInt16(re::BindPoint *a1, unsigned __int16 a2, int a3)
{
  uint64_t result;
  unsigned __int16 *v7;
  unsigned __int16 v8;

  v8 = a2;
  if ((_DWORD)result)
  {
    if (a3 == 1)
    {
      re::BindPoint::setValue<short>((unsigned __int16 *)a1, &v8);
      return 1;
    }
    if (!a3)
    {
      v7 = (unsigned __int16 *)re::BindPoint::baseValueUntyped(a1);
      if (v7)
      {
        *v7 = a2;
        re::BindPoint::markAsWritten((uint64_t)a1);
      }
      return 1;
    }
    return 0;
  }
  return result;
}

uint64_t REBindPointSetInt32(re::BindPoint *a1, int a2, int a3)
{
  uint64_t result;
  int *v7;
  int v8;

  v8 = a2;
  if ((_DWORD)result)
  {
    if (a3 == 1)
    {
      re::BindPoint::setValue<int>((uint64_t)a1, &v8);
      return 1;
    }
    if (!a3)
    {
      v7 = (int *)re::BindPoint::baseValueUntyped(a1);
      if (v7)
      {
        *v7 = a2;
        re::BindPoint::markAsWritten((uint64_t)a1);
      }
      return 1;
    }
    return 0;
  }
  return result;
}

uint64_t REBindPointSetUInt32(re::BindPoint *a1, int a2, int a3)
{
  uint64_t result;
  int *v7;
  int v8;

  v8 = a2;
  if ((_DWORD)result)
  {
    if (a3 == 1)
    {
      re::BindPoint::setValue<int>((uint64_t)a1, &v8);
      return 1;
    }
    if (!a3)
    {
      v7 = (int *)re::BindPoint::baseValueUntyped(a1);
      if (v7)
      {
        *v7 = a2;
        re::BindPoint::markAsWritten((uint64_t)a1);
      }
      return 1;
    }
    return 0;
  }
  return result;
}

uint64_t REBindPointSetInt64(re::BindPoint *a1, uint64_t a2, int a3)
{
  uint64_t result;
  uint64_t *v7;
  uint64_t v8;

  v8 = a2;
  if ((_DWORD)result)
  {
    if (a3 == 1)
    {
      re::BindPoint::setValue<long long>(a1, &v8);
      return 1;
    }
    if (!a3)
    {
      v7 = (uint64_t *)re::BindPoint::baseValueUntyped(a1);
      if (v7)
      {
        *v7 = a2;
        re::BindPoint::markAsWritten((uint64_t)a1);
      }
      return 1;
    }
    return 0;
  }
  return result;
}

uint64_t REBindPointSetFloat(re::BindPoint *a1, int a2, float a3)
{
  uint64_t result;
  float *v7;
  float v8;

  v8 = a3;
  if ((_DWORD)result)
  {
    if (a2 == 1)
    {
      re::BindPoint::setValue<float>((uint64_t)a1, &v8);
      return 1;
    }
    if (!a2)
    {
      v7 = (float *)re::BindPoint::baseValueUntyped(a1);
      if (v7)
      {
        *v7 = a3;
        re::BindPoint::markAsWritten((uint64_t)a1);
      }
      return 1;
    }
    return 0;
  }
  return result;
}

uint64_t REBindPointSetFloat2(re::BindPoint *a1, int a2, float32x2_t a3)
{
  uint64_t result;
  double *v7;
  float32x2_t v8;

  v8 = a3;
  if ((_DWORD)result)
  {
    if (a2 == 1)
    {
      re::BindPoint::setValue<re::Vector2<float>>((uint64_t)a1, &v8);
      return 1;
    }
    if (!a2)
    {
      v7 = (double *)re::BindPoint::baseValueUntyped(a1);
      if (v7)
      {
        *v7 = *(double *)&a3;
        re::BindPoint::markAsWritten((uint64_t)a1);
      }
      return 1;
    }
    return 0;
  }
  return result;
}

uint64_t REBindPointSetFloat3(re::BindPoint *a1, int a2, float32x4_t a3)
{
  uint64_t result;
  float32x4_t *v6;
  float32x4_t v7;

  v7 = a3;
  if ((_DWORD)result)
  {
    if (a2 == 1)
    {
      re::BindPoint::setValue<re::Vector3<float>>(a1, &v7);
      return 1;
    }
    if (!a2)
    {
      v6 = (float32x4_t *)re::BindPoint::baseValueUntyped(a1);
      if (v6)
      {
        *v6 = v7;
        re::BindPoint::markAsWritten((uint64_t)a1);
      }
      return 1;
    }
    return 0;
  }
  return result;
}

uint64_t REBindPointSetFloat4(re::BindPoint *a1, int a2, float32x4_t a3)
{
  uint64_t result;
  float32x4_t *v6;
  float32x4_t v7;

  v7 = a3;
  if ((_DWORD)result)
  {
    if (a2 == 1)
    {
      re::BindPoint::setValue<re::Vector4<float>>(a1, &v7);
      return 1;
    }
    if (!a2)
    {
      v6 = (float32x4_t *)re::BindPoint::baseValueUntyped(a1);
      if (v6)
      {
        *v6 = v7;
        re::BindPoint::markAsWritten((uint64_t)a1);
      }
      return 1;
    }
    return 0;
  }
  return result;
}

uint64_t REBindPointSetDouble(re::BindPoint *a1, int a2, double a3)
{
  uint64_t result;
  double *v7;
  double v8;

  v8 = a3;
  if ((_DWORD)result)
  {
    if (a2 == 1)
    {
      re::BindPoint::setValue<double>(a1, &v8);
      return 1;
    }
    if (!a2)
    {
      v7 = (double *)re::BindPoint::baseValueUntyped(a1);
      if (v7)
      {
        *v7 = a3;
        re::BindPoint::markAsWritten((uint64_t)a1);
      }
      return 1;
    }
    return 0;
  }
  return result;
}

uint64_t REBindPointSetDouble2(re::BindPoint *a1, int a2, float64x2_t a3)
{
  uint64_t result;
  float64x2_t *v6;
  float64x2_t v7;

  v7 = a3;
  if ((_DWORD)result)
  {
    if (a2 == 1)
    {
      re::BindPoint::setValue<re::Vector2<double>>(a1, &v7);
      return 1;
    }
    if (!a2)
    {
      v6 = (float64x2_t *)re::BindPoint::baseValueUntyped(a1);
      if (v6)
      {
        *v6 = v7;
        re::BindPoint::markAsWritten((uint64_t)a1);
      }
      return 1;
    }
    return 0;
  }
  return result;
}

uint64_t REBindPointSetDouble3(re::BindPoint *a1, uint64_t a2, int a3)
{
  __int128 v5;
  uint64_t result;
  uint64_t v7;
  __int128 v8;
  float64x2_t v9;
  __int128 v10;

  v5 = *(_OWORD *)(a2 + 16);
  v9 = *(float64x2_t *)a2;
  v10 = v5;
  if ((_DWORD)result)
  {
    if (a3 == 1)
    {
      re::BindPoint::setValue<re::Vector3<double>>(a1, &v9);
      return 1;
    }
    if (!a3)
    {
      v7 = re::BindPoint::baseValueUntyped(a1);
      if (v7)
      {
        v8 = v10;
        *(float64x2_t *)v7 = v9;
        *(_OWORD *)(v7 + 16) = v8;
        re::BindPoint::markAsWritten((uint64_t)a1);
      }
      return 1;
    }
    return 0;
  }
  return result;
}

uint64_t REBindPointSetDouble4(re::BindPoint *a1, uint64_t a2, int a3)
{
  __int128 v5;
  uint64_t result;
  uint64_t v7;
  __int128 v8;
  float64x2_t v9;
  __int128 v10;

  v5 = *(_OWORD *)(a2 + 16);
  v9 = *(float64x2_t *)a2;
  v10 = v5;
  if ((_DWORD)result)
  {
    if (a3 == 1)
    {
      re::BindPoint::setValue<re::Vector4<double>>(a1, &v9);
      return 1;
    }
    if (!a3)
    {
      v7 = re::BindPoint::baseValueUntyped(a1);
      if (v7)
      {
        v8 = v10;
        *(float64x2_t *)v7 = v9;
        *(_OWORD *)(v7 + 16) = v8;
        re::BindPoint::markAsWritten((uint64_t)a1);
      }
      return 1;
    }
    return 0;
  }
  return result;
}

uint64_t REBindPointSetQuatF(re::BindPoint *a1, int a2, float32x4_t a3)
{
  uint64_t result;
  float32x4_t *v6;
  float32x4_t v7;

  v7 = a3;
  if ((_DWORD)result)
  {
    if (a2 == 1)
    {
      re::BindPoint::setValue<re::Vector4<float>>(a1, &v7);
      return 1;
    }
    if (!a2)
    {
      v6 = (float32x4_t *)re::BindPoint::baseValueUntyped(a1);
      if (v6)
      {
        *v6 = v7;
        re::BindPoint::markAsWritten((uint64_t)a1);
      }
      return 1;
    }
    return 0;
  }
  return result;
}

uint64_t REBindPointSetSRT(re::BindPoint *a1, int a2, float32x4_t a3, __n128 a4, __n128 a5)
{
  uint64_t result;
  float32x4_t *v8;
  float32x4_t v9;
  __n128 v10;
  float32x4_t v11;
  __n128 v12;
  __n128 v13;

  v11 = a3;
  v12 = a4;
  v13 = a5;
  if ((_DWORD)result)
  {
    if (a2 == 1)
    {
      re::BindPoint::setValue<re::GenericSRT<float>>((float32x4_t *)a1, &v11);
      return 1;
    }
    if (!a2)
    {
      v8 = (float32x4_t *)re::BindPoint::baseValueUntyped(a1);
      if (v8)
      {
        v9 = v11;
        v10 = v13;
        v8[1] = (float32x4_t)v12;
        v8[2] = (float32x4_t)v10;
        *v8 = v9;
        re::BindPoint::markAsWritten((uint64_t)a1);
      }
      return 1;
    }
    return 0;
  }
  return result;
}

uint64_t REBindPointBoundComponent(re::BindPoint *a1)
{
  uint64_t v1;
  uint64_t v2;
  void *v3;
  uint64_t result;
  unsigned __int8 v5;
  _UNKNOWN **v6;
  int v7;
  int v8;
  void *v9;
  uint64_t v10;

  v1 = re::BindPoint::boundOwner(a1);
  if (!v2)
    return 0;
  v3 = (void *)v1;
  result = v2;
  v6 = &re::ecs2::ComponentImpl<re::ecs2::PlanarReflectionReceiverComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType;
  if ((v5 & 1) == 0)
  {
    v9 = v3;
    v10 = v2;
    v6 = &re::ecs2::ComponentImpl<re::ecs2::PlanarReflectionReceiverComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType;
    v8 = v7;
    v3 = v9;
    result = v10;
    if (v8)
    {
      re::introspect<re::ecs2::Component>(void)::info = (_UNKNOWN *)re::ecs2::introspect_Component(0);
      v6 = &re::ecs2::ComponentImpl<re::ecs2::PlanarReflectionReceiverComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType;
      v3 = v9;
      result = v10;
    }
  }
  if (v6[64] != v3)
    return 0;
  return result;
}

re::BindPoint *`anonymous namespace'::isAlive<re::DynamicString>(re::BindPoint *result)
{
  re::BindPoint *v1;
  uint64_t v2;
  unsigned __int8 v3;
  __guard *v4;
  int v5;
  const re::IntrospectionBase *v6;

  if (result)
  {
    v1 = result;
    result = (re::BindPoint *)re::BindPoint::isAlive(result);
    if ((_DWORD)result)
    {
      v2 = *(_QWORD *)v1;
      if ((v3 & 1) == 0)
      {
        if (v5)
        {
          re::introspect<re::DynamicString>(void)::info = (uint64_t)re::IntrospectionInfo<re::DynamicString>::get(0, v6);
        }
      }
      return (re::BindPoint *)(v2 == v4[42]);
    }
  }
  return result;
}

re::BindPoint *`anonymous namespace'::isAlive<BOOL>(re::BindPoint *result)
{
  re::BindPoint *v1;
  uint64_t v2;
  unsigned __int8 v3;
  __guard *v4;
  int v5;
  const re::IntrospectionBase *v6;

  if (result)
  {
    v1 = result;
    result = (re::BindPoint *)re::BindPoint::isAlive(result);
    if ((_DWORD)result)
    {
      v2 = *(_QWORD *)v1;
      if ((v3 & 1) == 0)
      {
        if (v5)
        {
          re::introspect<BOOL>(void)::info = re::introspect_BOOL(0, v6);
        }
      }
      return (re::BindPoint *)(v2 == v4[331]);
    }
  }
  return result;
}

re::BindPoint *`anonymous namespace'::isAlive<char>(re::BindPoint *result)
{
  re::BindPoint *v1;
  uint64_t v2;
  unsigned __int8 v3;
  _QWORD *v4;
  int v5;
  const re::IntrospectionBase *v6;

  if (result)
  {
    v1 = result;
    result = (re::BindPoint *)re::BindPoint::isAlive(result);
    if ((_DWORD)result)
    {
      v2 = *(_QWORD *)v1;
      v4 = &unk_255825000;
      if ((v3 & 1) == 0)
      {
        v4 = (_QWORD *)&unk_255825000;
        if (v5)
        {
          re::introspect<char>(void)::info = (uint64_t)re::introspect_char(0, v6);
          v4 = (_QWORD *)&unk_255825000;
        }
      }
      return (re::BindPoint *)(v2 == v4[174]);
    }
  }
  return result;
}

re::BindPoint *`anonymous namespace'::isAlive<unsigned char>(re::BindPoint *result)
{
  re::BindPoint *v1;
  void *v2;
  unsigned __int8 v3;
  _UNKNOWN **v4;
  int v5;
  const re::IntrospectionBase *v6;

  if (result)
  {
    v1 = result;
    result = (re::BindPoint *)re::BindPoint::isAlive(result);
    if ((_DWORD)result)
    {
      v2 = *(void **)v1;
      v4 = &re::ecs2::ComponentImpl<re::ecs2::PlanarReflectionReceiverComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType;
      if ((v3 & 1) == 0)
      {
        v4 = &re::ecs2::ComponentImpl<re::ecs2::PlanarReflectionReceiverComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType;
        if (v5)
        {
          re::introspect<unsigned char>(void)::info = re::introspect_uint8_t(0, v6);
          v4 = &re::ecs2::ComponentImpl<re::ecs2::PlanarReflectionReceiverComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType;
        }
      }
      return (re::BindPoint *)(v2 == v4[211]);
    }
  }
  return result;
}

re::BindPoint *`anonymous namespace'::isAlive<short>(re::BindPoint *result)
{
  re::BindPoint *v1;
  uint64_t v2;
  unsigned __int8 v3;
  _QWORD *v4;
  int v5;
  const re::IntrospectionBase *v6;

  if (result)
  {
    v1 = result;
    result = (re::BindPoint *)re::BindPoint::isAlive(result);
    if ((_DWORD)result)
    {
      v2 = *(_QWORD *)v1;
      v4 = &unk_255825000;
      if ((v3 & 1) == 0)
      {
        v4 = (_QWORD *)&unk_255825000;
        if (v5)
        {
          re::introspect<short>(void)::info = (uint64_t)re::introspect_short(0, v6);
          v4 = (_QWORD *)&unk_255825000;
        }
      }
      return (re::BindPoint *)(v2 == v4[360]);
    }
  }
  return result;
}

re::BindPoint *`anonymous namespace'::isAlive<unsigned short>(re::BindPoint *result)
{
  re::BindPoint *v1;
  uint64_t v2;
  unsigned __int8 v3;
  _QWORD *v4;
  int v5;
  const re::IntrospectionBase *v6;

  if (result)
  {
    v1 = result;
    result = (re::BindPoint *)re::BindPoint::isAlive(result);
    if ((_DWORD)result)
    {
      v2 = *(_QWORD *)v1;
      v4 = &unk_255825000;
      if ((v3 & 1) == 0)
      {
        v4 = (_QWORD *)&unk_255825000;
        if (v5)
        {
          re::introspect<unsigned short>(void)::info = (uint64_t)re::introspect_uint16_t(0, v6);
          v4 = (_QWORD *)&unk_255825000;
        }
      }
      return (re::BindPoint *)(v2 == v4[366]);
    }
  }
  return result;
}

re::BindPoint *`anonymous namespace'::isAlive<int>(re::BindPoint *result)
{
  re::BindPoint *v1;
  uint64_t v2;
  unsigned __int8 v3;
  __guard *v4;
  int v5;
  const re::IntrospectionBase *v6;

  if (result)
  {
    v1 = result;
    result = (re::BindPoint *)re::BindPoint::isAlive(result);
    if ((_DWORD)result)
    {
      v2 = *(_QWORD *)v1;
      if ((v3 & 1) == 0)
      {
        if (v5)
        {
          re::introspect<int>(void)::info = re::introspect_int(0, v6);
        }
      }
      return (re::BindPoint *)(v2 == v4[454]);
    }
  }
  return result;
}

re::BindPoint *`anonymous namespace'::isAlive<unsigned int>(re::BindPoint *result)
{
  re::BindPoint *v1;
  uint64_t v2;
  unsigned __int8 v3;
  __guard *v4;
  int v5;
  const re::IntrospectionBase *v6;

  if (result)
  {
    v1 = result;
    result = (re::BindPoint *)re::BindPoint::isAlive(result);
    if ((_DWORD)result)
    {
      v2 = *(_QWORD *)v1;
      if ((v3 & 1) == 0)
      {
        if (v5)
        {
          re::introspect<unsigned int>(void)::info = re::introspect_uint32_t(0, v6);
        }
      }
      return (re::BindPoint *)(v2 == v4[456]);
    }
  }
  return result;
}

re::BindPoint *`anonymous namespace'::isAlive<long long>(re::BindPoint *result)
{
  re::BindPoint *v1;
  uint64_t v2;
  unsigned __int8 v3;
  __guard *v4;
  int v5;
  const re::IntrospectionBase *v6;

  if (result)
  {
    v1 = result;
    result = (re::BindPoint *)re::BindPoint::isAlive(result);
    if ((_DWORD)result)
    {
      v2 = *(_QWORD *)v1;
      if ((v3 & 1) == 0)
      {
        if (v5)
        {
          re::introspect<long long>(void)::info = (uint64_t)re::introspect_int64_t(0, v6);
        }
      }
      return (re::BindPoint *)(v2 == v4[402]);
    }
  }
  return result;
}

re::BindPoint *`anonymous namespace'::isAlive<float>(re::BindPoint *result)
{
  re::BindPoint *v1;
  __objc2_class_ro *v2;
  unsigned __int8 v3;
  __objc2_class_ro **p_info;
  int v5;
  const re::IntrospectionBase *v6;

  if (result)
  {
    v1 = result;
    result = (re::BindPoint *)re::BindPoint::isAlive(result);
    if ((_DWORD)result)
    {
      v2 = *(__objc2_class_ro **)v1;
      p_info = VideoSpillMapMetalSession.info;
      if ((v3 & 1) == 0)
      {
        p_info = (__objc2_class_ro **)(VideoSpillMapMetalSession + 32);
        if (v5)
        {
          re::introspect<float>(void)::info = re::introspect_float(0, v6);
          p_info = (__objc2_class_ro **)(VideoSpillMapMetalSession + 32);
        }
      }
      return (re::BindPoint *)(v2 == p_info[7]);
    }
  }
  return result;
}

re::BindPoint *`anonymous namespace'::isAlive<re::Vector2<float>>(re::BindPoint *result)
{
  re::BindPoint *v1;
  __objc2_class_ro *v2;
  unsigned __int8 v3;
  __objc2_class_ro **p_info;
  int v5;

  if (result)
  {
    v1 = result;
    result = (re::BindPoint *)re::BindPoint::isAlive(result);
    if ((_DWORD)result)
    {
      v2 = *(__objc2_class_ro **)v1;
      p_info = VideoSpillMapMetalSession.info;
      if ((v3 & 1) == 0)
      {
        p_info = (__objc2_class_ro **)(VideoSpillMapMetalSession + 32);
        if (v5)
        {
          re::introspect<re::Vector2<float>>(void)::info = (_UNKNOWN *)re::introspect_Vector2F(0);
          p_info = (__objc2_class_ro **)(VideoSpillMapMetalSession + 32);
        }
      }
      return (re::BindPoint *)(v2 == p_info[11]);
    }
  }
  return result;
}

re::BindPoint *`anonymous namespace'::isAlive<re::Vector3<float>>(re::BindPoint *result)
{
  re::BindPoint *v1;
  __objc2_class_ro *v2;
  unsigned __int8 v3;
  __objc2_class_ro **p_info;
  int v5;

  if (result)
  {
    v1 = result;
    result = (re::BindPoint *)re::BindPoint::isAlive(result);
    if ((_DWORD)result)
    {
      v2 = *(__objc2_class_ro **)v1;
      p_info = VideoSpillMapMetalSession.info;
      if ((v3 & 1) == 0)
      {
        p_info = (__objc2_class_ro **)(VideoSpillMapMetalSession + 32);
        if (v5)
        {
          re::introspect<re::Vector3<float>>(void)::info = (_UNKNOWN *)re::introspect_Vector3F(0);
          p_info = (__objc2_class_ro **)(VideoSpillMapMetalSession + 32);
        }
      }
      return (re::BindPoint *)(v2 == p_info[13]);
    }
  }
  return result;
}

re::BindPoint *`anonymous namespace'::isAlive<re::Vector4<float>>(re::BindPoint *result)
{
  re::BindPoint *v1;
  __objc2_class_ro *v2;
  unsigned __int8 v3;
  __objc2_class_ro **p_info;
  int v5;

  if (result)
  {
    v1 = result;
    result = (re::BindPoint *)re::BindPoint::isAlive(result);
    if ((_DWORD)result)
    {
      v2 = *(__objc2_class_ro **)v1;
      p_info = VideoSpillMapMetalSession.info;
      if ((v3 & 1) == 0)
      {
        p_info = (__objc2_class_ro **)(VideoSpillMapMetalSession + 32);
        if (v5)
        {
          re::introspect<re::Vector4<float>>(void)::info = (_UNKNOWN *)re::introspect_Vector4F(0);
          p_info = (__objc2_class_ro **)(VideoSpillMapMetalSession + 32);
        }
      }
      return (re::BindPoint *)(v2 == p_info[15]);
    }
  }
  return result;
}

re::BindPoint *`anonymous namespace'::isAlive<double>(re::BindPoint *result)
{
  re::BindPoint *v1;
  __objc2_class_ro *v2;
  unsigned __int8 v3;
  __objc2_class_ro **p_info;
  int v5;
  const re::IntrospectionBase *v6;

  if (result)
  {
    v1 = result;
    result = (re::BindPoint *)re::BindPoint::isAlive(result);
    if ((_DWORD)result)
    {
      v2 = *(__objc2_class_ro **)v1;
      p_info = VideoSpillMapMetalSession.info;
      if ((v3 & 1) == 0)
      {
        p_info = (__objc2_class_ro **)(VideoSpillMapMetalSession + 32);
        if (v5)
        {
          re::introspect<double>(void)::info = (uint64_t)re::introspect_double(0, v6);
          p_info = (__objc2_class_ro **)(VideoSpillMapMetalSession + 32);
        }
      }
      return (re::BindPoint *)(v2 == p_info[9]);
    }
  }
  return result;
}

re::BindPoint *`anonymous namespace'::isAlive<re::Vector2<double>>(re::BindPoint *result)
{
  re::BindPoint *v1;
  uint64_t v2;
  unsigned __int8 v3;

  if (result)
  {
    v1 = result;
    result = (re::BindPoint *)re::BindPoint::isAlive(result);
    if ((_DWORD)result)
    {
      v2 = *(_QWORD *)v1;
      v3 = atomic_load((unsigned __int8 *)&qword_254123F18);
      if ((v3 & 1) == 0)
      {
        if (__cxa_guard_acquire(&qword_254123F18))
        {
          _MergedGlobals_506 = re::introspect_Vector2D(0);
          __cxa_guard_release(&qword_254123F18);
        }
      }
      return (re::BindPoint *)(v2 == _MergedGlobals_506);
    }
  }
  return result;
}

re::BindPoint *`anonymous namespace'::isAlive<re::Vector3<double>>(re::BindPoint *result)
{
  re::BindPoint *v1;
  uint64_t v2;
  unsigned __int8 v3;

  if (result)
  {
    v1 = result;
    result = (re::BindPoint *)re::BindPoint::isAlive(result);
    if ((_DWORD)result)
    {
      v2 = *(_QWORD *)v1;
      v3 = atomic_load((unsigned __int8 *)&qword_254123F28);
      if ((v3 & 1) == 0)
      {
        if (__cxa_guard_acquire(&qword_254123F28))
        {
          qword_254123F20 = re::introspect_Vector3D(0);
          __cxa_guard_release(&qword_254123F28);
        }
      }
      return (re::BindPoint *)(v2 == qword_254123F20);
    }
  }
  return result;
}

re::BindPoint *`anonymous namespace'::isAlive<re::Vector4<double>>(re::BindPoint *result)
{
  re::BindPoint *v1;
  uint64_t v2;
  unsigned __int8 v3;

  if (result)
  {
    v1 = result;
    result = (re::BindPoint *)re::BindPoint::isAlive(result);
    if ((_DWORD)result)
    {
      v2 = *(_QWORD *)v1;
      v3 = atomic_load((unsigned __int8 *)&qword_254123F38);
      if ((v3 & 1) == 0)
      {
        if (__cxa_guard_acquire(&qword_254123F38))
        {
          qword_254123F30 = re::introspect_Vector4D(0);
          __cxa_guard_release(&qword_254123F38);
        }
      }
      return (re::BindPoint *)(v2 == qword_254123F30);
    }
  }
  return result;
}

re::BindPoint *`anonymous namespace'::isAlive<re::Quaternion<float>>(re::BindPoint *result)
{
  re::BindPoint *v1;
  __objc2_class_ro *v2;
  unsigned __int8 v3;
  __objc2_class_ro **p_info;
  int v5;

  if (result)
  {
    v1 = result;
    result = (re::BindPoint *)re::BindPoint::isAlive(result);
    if ((_DWORD)result)
    {
      v2 = *(__objc2_class_ro **)v1;
      p_info = VideoSpillMapMetalSession.info;
      if ((v3 & 1) == 0)
      {
        p_info = (__objc2_class_ro **)(VideoSpillMapMetalSession + 32);
        if (v5)
        {
          re::introspect<re::Quaternion<float>>(void)::info = re::introspect_QuaternionF(0);
          p_info = (__objc2_class_ro **)(VideoSpillMapMetalSession + 32);
        }
      }
      return (re::BindPoint *)(v2 == p_info[17]);
    }
  }
  return result;
}

re::BindPoint *`anonymous namespace'::isAlive<re::GenericSRT<float>>(re::BindPoint *result)
{
  re::BindPoint *v1;
  __objc2_class_ro *v2;
  unsigned __int8 v3;
  __objc2_class_ro **p_info;
  int v5;

  if (result)
  {
    v1 = result;
    result = (re::BindPoint *)re::BindPoint::isAlive(result);
    if ((_DWORD)result)
    {
      v2 = *(__objc2_class_ro **)v1;
      p_info = VideoSpillMapMetalSession.info;
      if ((v3 & 1) == 0)
      {
        p_info = (__objc2_class_ro **)(VideoSpillMapMetalSession + 32);
        if (v5)
        {
          re::introspect<re::GenericSRT<float>>(void)::info = re::introspect_SRT(0);
          p_info = (__objc2_class_ro **)(VideoSpillMapMetalSession + 32);
        }
      }
      return (re::BindPoint *)(v2 == p_info[39]);
    }
  }
  return result;
}

uint64_t re::BindPoint::setValue<re::DynamicString>(uint64_t result, re::DynamicString *a2)
{
  uint64_t v2;
  re::BindPoint *v4;
  unint64_t v5;
  _QWORD *v6;
  size_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  re::DynamicString *v14;
  re::DynamicString *v15;
  _QWORD v16[2];
  int v17;
  const char *v18;
  __int16 v19;
  int v20;
  __int16 v21;
  uint64_t v22;
  __int16 v23;
  uint64_t v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  uint64_t v30;

  v30 = *MEMORY[0x24BDAC8D0];
  v2 = *(_QWORD *)(result + 24);
  if (v2)
  {
    v4 = (re::BindPoint *)result;
    MEMORY[0x24BDAC7A8](result);
    v6 = (_QWORD *)((char *)v16 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0));
    if (v5 >= 0x200)
      v7 = 512;
    else
      v7 = v5;
    bzero((char *)v16 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0), v7);
    v8 = 0;
    v9 = 0;
    v10 = *((_QWORD *)v4 + 3);
    do
    {
      if (v10 == v9)
      {
        v16[1] = 0;
        v28 = 0u;
        v29 = 0u;
        v26 = 0u;
        v27 = 0u;
        v25 = 0u;
        os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        v17 = 136315906;
        v18 = "operator[]";
        v19 = 1024;
        v20 = 797;
        v21 = 2048;
        v22 = v10;
        v23 = 2048;
        v24 = v10;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
      }
      v11 = (_QWORD *)(*((_QWORD *)v4 + 5) + v8);
      if (!*v11)
        v11 = (_QWORD *)v11[2];
      v6[v9++] = v11;
      v8 += 32;
    }
    while (v2 != v9);
    v12 = v2 - 1;
    v13 = (*(uint64_t (**)(_QWORD, _QWORD, _QWORD *, uint64_t))(*(_QWORD *)*v6 + 120))(*v6, 0, v6 + 1, v12);
    if (v13)
    {
      v14 = (re::DynamicString *)v13;
      if (!re::BindPoint::isOverridden(v4)
        || (result = re::DynamicString::operator!=((uint64_t)v14, (uint64_t)a2), (_DWORD)result))
      {
        re::DynamicString::operator=(v14, a2);
        re::BindPoint::setIsOverridden((uint64_t)v4, 1);
        return re::BindPoint::markAsWritten((uint64_t)v4);
      }
    }
    else
    {
      result = (*(uint64_t (**)(_QWORD, _QWORD, _QWORD *, uint64_t))(*(_QWORD *)*v6 + 88))(*v6, 0, v6 + 1, v12);
      if (result)
      {
        v15 = (re::DynamicString *)result;
        result = re::DynamicString::operator!=(result, (uint64_t)a2);
        if ((_DWORD)result)
        {
          re::DynamicString::operator=(v15, a2);
          return re::BindPoint::markAsWritten((uint64_t)v4);
        }
      }
    }
  }
  return result;
}

unsigned __int16 *re::BindPoint::setValue<short>(unsigned __int16 *result, unsigned __int16 *a2)
{
  uint64_t v2;
  re::BindPoint *v4;
  unint64_t v5;
  _QWORD *v6;
  size_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  _WORD *v14;
  int v15;
  int v16;
  _QWORD v17[2];
  int v18;
  const char *v19;
  __int16 v20;
  int v21;
  __int16 v22;
  uint64_t v23;
  __int16 v24;
  uint64_t v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  uint64_t v31;

  v31 = *MEMORY[0x24BDAC8D0];
  v2 = *((_QWORD *)result + 3);
  if (v2)
  {
    v4 = (re::BindPoint *)result;
    MEMORY[0x24BDAC7A8](result);
    v6 = (_QWORD *)((char *)v17 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0));
    if (v5 >= 0x200)
      v7 = 512;
    else
      v7 = v5;
    bzero((char *)v17 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0), v7);
    v8 = 0;
    v9 = 0;
    v10 = *((_QWORD *)v4 + 3);
    do
    {
      if (v10 == v9)
      {
        v17[1] = 0;
        v29 = 0u;
        v30 = 0u;
        v27 = 0u;
        v28 = 0u;
        v26 = 0u;
        os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        v18 = 136315906;
        v19 = "operator[]";
        v20 = 1024;
        v21 = 797;
        v22 = 2048;
        v23 = v10;
        v24 = 2048;
        v25 = v10;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
      }
      v11 = (_QWORD *)(*((_QWORD *)v4 + 5) + v8);
      if (!*v11)
        v11 = (_QWORD *)v11[2];
      v6[v9++] = v11;
      v8 += 32;
    }
    while (v2 != v9);
    v12 = v2 - 1;
    v13 = (*(uint64_t (**)(_QWORD, _QWORD, _QWORD *, uint64_t))(*(_QWORD *)*v6 + 120))(*v6, 0, v6 + 1, v12);
    if (v13)
    {
      v14 = (_WORD *)v13;
      result = (unsigned __int16 *)re::BindPoint::isOverridden(v4);
      v15 = *a2;
      if (!(_DWORD)result || (unsigned __int16)*v14 != v15)
      {
        *v14 = v15;
        re::BindPoint::setIsOverridden((uint64_t)v4, 1);
        return (unsigned __int16 *)re::BindPoint::markAsWritten((uint64_t)v4);
      }
    }
    else
    {
      result = (unsigned __int16 *)(*(uint64_t (**)(_QWORD, _QWORD, _QWORD *, uint64_t))(*(_QWORD *)*v6 + 88))(*v6, 0, v6 + 1, v12);
      if (result)
      {
        v16 = *a2;
        if (*result != v16)
        {
          *result = v16;
          return (unsigned __int16 *)re::BindPoint::markAsWritten((uint64_t)v4);
        }
      }
    }
  }
  return result;
}

re::BindPoint *re::BindPoint::setValue<long long>(re::BindPoint *result, uint64_t *a2)
{
  uint64_t v2;
  re::BindPoint *v4;
  unint64_t v5;
  _QWORD *v6;
  size_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  _QWORD v16[2];
  int v17;
  const char *v18;
  __int16 v19;
  int v20;
  __int16 v21;
  uint64_t v22;
  __int16 v23;
  uint64_t v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  uint64_t v30;

  v30 = *MEMORY[0x24BDAC8D0];
  v2 = *((_QWORD *)result + 3);
  if (v2)
  {
    v4 = result;
    MEMORY[0x24BDAC7A8](result);
    v6 = (_QWORD *)((char *)v16 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0));
    if (v5 >= 0x200)
      v7 = 512;
    else
      v7 = v5;
    bzero((char *)v16 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0), v7);
    v8 = 0;
    v9 = 0;
    v10 = *((_QWORD *)v4 + 3);
    do
    {
      if (v10 == v9)
      {
        v16[1] = 0;
        v28 = 0u;
        v29 = 0u;
        v26 = 0u;
        v27 = 0u;
        v25 = 0u;
        os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        v17 = 136315906;
        v18 = "operator[]";
        v19 = 1024;
        v20 = 797;
        v21 = 2048;
        v22 = v10;
        v23 = 2048;
        v24 = v10;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
      }
      v11 = (_QWORD *)(*((_QWORD *)v4 + 5) + v8);
      if (!*v11)
        v11 = (_QWORD *)v11[2];
      v6[v9++] = v11;
      v8 += 32;
    }
    while (v2 != v9);
    v12 = v2 - 1;
    v13 = (*(uint64_t (**)(_QWORD, _QWORD, _QWORD *, uint64_t))(*(_QWORD *)*v6 + 120))(*v6, 0, v6 + 1, v12);
    if (v13)
    {
      v14 = (_QWORD *)v13;
      result = (re::BindPoint *)re::BindPoint::isOverridden(v4);
      v15 = *a2;
      if (!(_DWORD)result || *v14 != v15)
      {
        *v14 = v15;
        re::BindPoint::setIsOverridden((uint64_t)v4, 1);
        return (re::BindPoint *)re::BindPoint::markAsWritten((uint64_t)v4);
      }
    }
    else
    {
      result = (re::BindPoint *)(*(uint64_t (**)(_QWORD, _QWORD, _QWORD *, uint64_t))(*(_QWORD *)*v6 + 88))(*v6, 0, v6 + 1, v12);
      if (result && *(_QWORD *)result != *a2)
      {
        *(_QWORD *)result = *a2;
        return (re::BindPoint *)re::BindPoint::markAsWritten((uint64_t)v4);
      }
    }
  }
  return result;
}

double re::BindPoint::setValue<re::Vector2<double>>(re::BindPoint *a1, float64x2_t *a2)
{
  uint64_t v2;
  unint64_t v5;
  _QWORD *v6;
  size_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  float64x2_t *v14;
  int8x16_t v15;
  double result;
  float64x2_t *v17;
  int8x16_t v18;
  _QWORD v19[2];
  int v20;
  const char *v21;
  __int16 v22;
  int v23;
  __int16 v24;
  uint64_t v25;
  __int16 v26;
  uint64_t v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  uint64_t v33;

  v33 = *MEMORY[0x24BDAC8D0];
  v2 = *((_QWORD *)a1 + 3);
  if (v2)
  {
    MEMORY[0x24BDAC7A8](a1);
    v6 = (_QWORD *)((char *)v19 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0));
    if (v5 >= 0x200)
      v7 = 512;
    else
      v7 = v5;
    bzero((char *)v19 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0), v7);
    v8 = 0;
    v9 = 0;
    v10 = *((_QWORD *)a1 + 3);
    do
    {
      if (v10 == v9)
      {
        v19[1] = 0;
        v31 = 0u;
        v32 = 0u;
        v29 = 0u;
        v30 = 0u;
        v28 = 0u;
        os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        v20 = 136315906;
        v21 = "operator[]";
        v22 = 1024;
        v23 = 797;
        v24 = 2048;
        v25 = v10;
        v26 = 2048;
        v27 = v10;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
      }
      v11 = (_QWORD *)(*((_QWORD *)a1 + 5) + v8);
      if (!*v11)
        v11 = (_QWORD *)v11[2];
      v6[v9++] = v11;
      v8 += 32;
    }
    while (v2 != v9);
    v12 = v2 - 1;
    v13 = (*(uint64_t (**)(_QWORD, _QWORD, _QWORD *, uint64_t))(*(_QWORD *)*v6 + 120))(*v6, 0, v6 + 1, v12);
    if (v13)
    {
      v14 = (float64x2_t *)v13;
      if (!re::BindPoint::isOverridden(a1)
        || (v15 = (int8x16_t)vceqq_f64(*v14, *a2),
            *(_QWORD *)&result = vornq_s8((int8x16_t)vdupq_laneq_s64((int64x2_t)vmvnq_s8(v15), 1), v15).u64[0],
            (*(_QWORD *)&result & 0x8000000000000000) != 0))
      {
        *v14 = *a2;
        re::BindPoint::setIsOverridden((uint64_t)a1, 1);
LABEL_14:
        re::BindPoint::markAsWritten((uint64_t)a1);
      }
    }
    else
    {
      v17 = (float64x2_t *)(*(uint64_t (**)(_QWORD, _QWORD, _QWORD *, uint64_t))(*(_QWORD *)*v6 + 88))(*v6, 0, v6 + 1, v12);
      if (v17)
      {
        v18 = (int8x16_t)vceqq_f64(*v17, *a2);
        *(_QWORD *)&result = vornq_s8((int8x16_t)vdupq_laneq_s64((int64x2_t)vmvnq_s8(v18), 1), v18).u64[0];
        if ((*(_QWORD *)&result & 0x8000000000000000) != 0)
        {
          *v17 = *a2;
          goto LABEL_14;
        }
      }
    }
  }
  return result;
}

double re::BindPoint::setValue<re::Vector3<double>>(re::BindPoint *a1, float64x2_t *a2)
{
  uint64_t v2;
  unint64_t v5;
  _QWORD *v6;
  size_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  float64x2_t *v14;
  int8x16_t v15;
  double result;
  float64x2_t v17;
  float64x2_t *v18;
  int8x16_t v19;
  float64x2_t v20;
  _QWORD v21[2];
  int v22;
  const char *v23;
  __int16 v24;
  int v25;
  __int16 v26;
  uint64_t v27;
  __int16 v28;
  uint64_t v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  uint64_t v35;

  v35 = *MEMORY[0x24BDAC8D0];
  v2 = *((_QWORD *)a1 + 3);
  if (v2)
  {
    MEMORY[0x24BDAC7A8](a1);
    v6 = (_QWORD *)((char *)v21 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0));
    if (v5 >= 0x200)
      v7 = 512;
    else
      v7 = v5;
    bzero((char *)v21 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0), v7);
    v8 = 0;
    v9 = 0;
    v10 = *((_QWORD *)a1 + 3);
    do
    {
      if (v10 == v9)
      {
        v21[1] = 0;
        v33 = 0u;
        v34 = 0u;
        v31 = 0u;
        v32 = 0u;
        v30 = 0u;
        os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        v22 = 136315906;
        v23 = "operator[]";
        v24 = 1024;
        v25 = 797;
        v26 = 2048;
        v27 = v10;
        v28 = 2048;
        v29 = v10;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
      }
      v11 = (_QWORD *)(*((_QWORD *)a1 + 5) + v8);
      if (!*v11)
        v11 = (_QWORD *)v11[2];
      v6[v9++] = v11;
      v8 += 32;
    }
    while (v2 != v9);
    v12 = v2 - 1;
    v13 = (*(uint64_t (**)(_QWORD, _QWORD, _QWORD *, uint64_t))(*(_QWORD *)*v6 + 120))(*v6, 0, v6 + 1, v12);
    if (v13)
    {
      v14 = (float64x2_t *)v13;
      if (!re::BindPoint::isOverridden(a1)
        || (v15 = (int8x16_t)vceqq_f64(*v14, *a2),
            *(_QWORD *)&result = vornq_s8(vornq_s8((int8x16_t)vdupq_laneq_s64((int64x2_t)vmvnq_s8(v15), 1), (int8x16_t)vceqq_f64(v14[1], a2[1])), v15).u64[0], (*(_QWORD *)&result & 0x8000000000000000) != 0))
      {
        v17 = a2[1];
        *v14 = *a2;
        v14[1] = v17;
        re::BindPoint::setIsOverridden((uint64_t)a1, 1);
LABEL_14:
        re::BindPoint::markAsWritten((uint64_t)a1);
      }
    }
    else
    {
      v18 = (float64x2_t *)(*(uint64_t (**)(_QWORD, _QWORD, _QWORD *, uint64_t))(*(_QWORD *)*v6 + 88))(*v6, 0, v6 + 1, v12);
      if (v18)
      {
        v19 = (int8x16_t)vceqq_f64(*v18, *a2);
        *(_QWORD *)&result = vornq_s8(vornq_s8((int8x16_t)vdupq_laneq_s64((int64x2_t)vmvnq_s8(v19), 1), (int8x16_t)vceqq_f64(v18[1], a2[1])), v19).u64[0];
        if ((*(_QWORD *)&result & 0x8000000000000000) != 0)
        {
          v20 = a2[1];
          *v18 = *a2;
          v18[1] = v20;
          goto LABEL_14;
        }
      }
    }
  }
  return result;
}

double re::BindPoint::setValue<re::Vector4<double>>(re::BindPoint *a1, float64x2_t *a2)
{
  uint64_t v2;
  unint64_t v5;
  _QWORD *v6;
  size_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  float64x2_t *v14;
  int8x16_t v15;
  double result;
  float64x2_t v17;
  float64x2_t *v18;
  int8x16_t v19;
  float64x2_t v20;
  _QWORD v21[2];
  int v22;
  const char *v23;
  __int16 v24;
  int v25;
  __int16 v26;
  uint64_t v27;
  __int16 v28;
  uint64_t v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  uint64_t v35;

  v35 = *MEMORY[0x24BDAC8D0];
  v2 = *((_QWORD *)a1 + 3);
  if (v2)
  {
    MEMORY[0x24BDAC7A8](a1);
    v6 = (_QWORD *)((char *)v21 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0));
    if (v5 >= 0x200)
      v7 = 512;
    else
      v7 = v5;
    bzero((char *)v21 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0), v7);
    v8 = 0;
    v9 = 0;
    v10 = *((_QWORD *)a1 + 3);
    do
    {
      if (v10 == v9)
      {
        v21[1] = 0;
        v33 = 0u;
        v34 = 0u;
        v31 = 0u;
        v32 = 0u;
        v30 = 0u;
        os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        v22 = 136315906;
        v23 = "operator[]";
        v24 = 1024;
        v25 = 797;
        v26 = 2048;
        v27 = v10;
        v28 = 2048;
        v29 = v10;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
      }
      v11 = (_QWORD *)(*((_QWORD *)a1 + 5) + v8);
      if (!*v11)
        v11 = (_QWORD *)v11[2];
      v6[v9++] = v11;
      v8 += 32;
    }
    while (v2 != v9);
    v12 = v2 - 1;
    v13 = (*(uint64_t (**)(_QWORD, _QWORD, _QWORD *, uint64_t))(*(_QWORD *)*v6 + 120))(*v6, 0, v6 + 1, v12);
    if (v13)
    {
      v14 = (float64x2_t *)v13;
      if (!re::BindPoint::isOverridden(a1)
        || (v15 = vornq_s8(vmvnq_s8((int8x16_t)vceqq_f64(*v14, *a2)), (int8x16_t)vceqq_f64(v14[1], a2[1])),
            *(_QWORD *)&result = vorrq_s8(v15, (int8x16_t)vdupq_laneq_s64((int64x2_t)v15, 1)).u64[0],
            (*(_QWORD *)&result & 0x8000000000000000) != 0))
      {
        v17 = a2[1];
        *v14 = *a2;
        v14[1] = v17;
        re::BindPoint::setIsOverridden((uint64_t)a1, 1);
LABEL_14:
        re::BindPoint::markAsWritten((uint64_t)a1);
      }
    }
    else
    {
      v18 = (float64x2_t *)(*(uint64_t (**)(_QWORD, _QWORD, _QWORD *, uint64_t))(*(_QWORD *)*v6 + 88))(*v6, 0, v6 + 1, v12);
      if (v18)
      {
        v19 = vornq_s8(vmvnq_s8((int8x16_t)vceqq_f64(*v18, *a2)), (int8x16_t)vceqq_f64(v18[1], a2[1]));
        *(_QWORD *)&result = vorrq_s8(v19, (int8x16_t)vdupq_laneq_s64((int64x2_t)v19, 1)).u64[0];
        if ((*(_QWORD *)&result & 0x8000000000000000) != 0)
        {
          v20 = a2[1];
          *v18 = *a2;
          v18[1] = v20;
          goto LABEL_14;
        }
      }
    }
  }
  return result;
}

uint64_t REPrimitiveRenderAddContext(re::RenderManager *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _anonymous_namespace_ *v5;
  __n128 v6;
  _BYTE v8[1056];
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  uint64_t v15;

  v15 = *MEMORY[0x24BDAC8D0];
  v1 = *((_QWORD *)a1 + 13);
  if (v1)
  {
    v1 = *(_QWORD *)(v1 + 312);
    v2 = v1 + 224;
    v3 = v1 + 272;
  }
  else
  {
    v2 = 224;
    v3 = 272;
  }
  v4 = *(_QWORD *)v3;
  v5 = (_anonymous_namespace_ *)(v1 + 256);
  re::PrimitiveRenderingContext::PrimitiveRenderingContext((re::PrimitiveRenderingContext *)v8, *(_QWORD *)v2, a1);
  v6 = re::DynamicArray<re::PrimitiveRenderingContext>::add(v5, (uint64_t)v8);
  if (v10)
  {
    if (v14)
      (*(void (**)(__n128))(*(_QWORD *)v10 + 40))(v6);
    v14 = 0;
    v11 = 0;
    v12 = 0;
    v10 = 0;
    ++v13;
  }
  re::DynamicArray<re::PrimitiveRenderingContext::PrimitiveMesh>::deinit((uint64_t)&v9);
  re::PrimitiveRenderingDynamicGeometry::~PrimitiveRenderingDynamicGeometry((re::PrimitiveRenderingDynamicGeometry *)v8);
  return v4;
}

uint64_t REPrimitiveRenderClearContext(uint64_t a1, unint64_t a2)
{
  uint64_t v2;
  unint64_t *v3;

  v2 = *(_QWORD *)(*(_QWORD *)(a1 + 104) + 312);
  if (*(_QWORD *)(v2 + 272) <= a2)
  {
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  v3 = (unint64_t *)(*(_QWORD *)(v2 + 288) + 1200 * a2);
  re::PrimitiveRenderingDynamicGeometry::init((re::PrimitiveRenderingDynamicGeometry *)v3, v3[147]);
  return re::DynamicArray<re::PrimitiveRenderingContext::PrimitiveMesh>::clear((uint64_t)(v3 + 132));
}

BOOL REPrimitiveRenderContextIsEmpty(uint64_t a1, unint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(*(_QWORD *)(a1 + 104) + 312);
  if (*(_QWORD *)(v2 + 272) <= a2)
  {
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  return re::PrimitiveRenderingContext::isEmpty((re::PrimitiveRenderingContext *)(*(_QWORD *)(v2 + 288) + 1200 * a2));
}

uint64_t REPrimitiveRenderAddPoint(uint64_t a1, unint64_t a2, __n128 a3)
{
  uint64_t v3;
  uint64_t v4;
  _OWORD v6[5];
  uint64_t v7;

  v7 = *MEMORY[0x24BDAC8D0];
  v3 = *(_QWORD *)(*(_QWORD *)(a1 + 104) + 312);
  if (*(_QWORD *)(v3 + 272) <= a2)
  {
    memset(v6, 0, sizeof(v6));
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  v4 = *(_QWORD *)(v3 + 288) + 1200 * a2;
  v6[0] = a3;
  return re::PrimitiveRenderingContext::addPoint(v4, v6);
}

uint64_t REPrimitiveRenderAddLine(uint64_t a1, unint64_t a2, __n128 a3, __n128 a4)
{
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  _BYTE v9[18];
  __int16 v10;
  unint64_t v11;
  __int16 v12;
  unint64_t v13;
  _OWORD v14[5];
  uint64_t v15;

  v15 = *MEMORY[0x24BDAC8D0];
  v5 = *(_QWORD *)(*(_QWORD *)(a1 + 104) + 312);
  v6 = *(_QWORD *)(v5 + 272);
  if (v6 <= a2)
  {
    memset(v14, 0, sizeof(v14));
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    *(_DWORD *)v9 = 136315906;
    *(_QWORD *)&v9[4] = "operator[]";
    *(_WORD *)&v9[12] = 1024;
    *(_DWORD *)&v9[14] = 789;
    v10 = 2048;
    v11 = a2;
    v12 = 2048;
    v13 = v6;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  v7 = *(_QWORD *)(v5 + 288) + 1200 * a2;
  v14[0] = a3;
  *(__n128 *)v9 = a4;
  return re::PrimitiveRenderingContext::addLine(v7, v14, v9);
}

uint64_t REPrimitiveRenderAddShape(uint64_t a1, unint64_t a2, unsigned int a3, __n128 a4, __n128 a5)
{
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  _BYTE v10[18];
  __int16 v11;
  unint64_t v12;
  __int16 v13;
  unint64_t v14;
  _OWORD v15[5];
  uint64_t v16;

  v16 = *MEMORY[0x24BDAC8D0];
  v6 = *(_QWORD *)(*(_QWORD *)(a1 + 104) + 312);
  v7 = *(_QWORD *)(v6 + 272);
  if (v7 <= a2)
  {
    memset(v15, 0, sizeof(v15));
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    *(_DWORD *)v10 = 136315906;
    *(_QWORD *)&v10[4] = "operator[]";
    *(_WORD *)&v10[12] = 1024;
    *(_DWORD *)&v10[14] = 789;
    v11 = 2048;
    v12 = a2;
    v13 = 2048;
    v14 = v7;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  v8 = *(_QWORD *)(v6 + 288) + 1200 * a2;
  v15[0] = a4;
  *(__n128 *)v10 = a5;
  return re::PrimitiveRenderingContext::addShape<re::PrimitiveRenderingShape>(v8, a3, v15, v10);
}

double REPrimitiveRenderSetPointColor(uint64_t a1, unint64_t a2, unint64_t a3, __n128 a4)
{
  uint64_t v4;
  uint64_t v5;
  double result;
  __n128 v7[5];
  uint64_t v8;

  v8 = *MEMORY[0x24BDAC8D0];
  v4 = *(_QWORD *)(*(_QWORD *)(a1 + 104) + 312);
  if (*(_QWORD *)(v4 + 272) <= a2)
  {
    memset(v7, 0, sizeof(v7));
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  v5 = *(_QWORD *)(v4 + 288) + 1200 * a2;
  v7[0] = a4;
  *(_QWORD *)&result = re::PrimitiveRenderingDynamicGeometry::set<re::Vector4<float>,re::PrimitiveRenderingAttribute>(1, a3, v7, (_anonymous_namespace_ *)(v5 + 40), (_BYTE *)(v5 + 513), *(_QWORD *)(v5 + 16), *(_QWORD *)(v5 + 520), (re *)*(_QWORD *)(v5 + 1192)).n128_u64[0];
  return result;
}

float REPrimitiveRenderSetPointSize(uint64_t a1, unint64_t a2, unint64_t a3, float a4)
{
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  float v9;
  uint64_t v10;
  int v11;
  const char *v12;
  __int16 v13;
  int v14;
  __int16 v15;
  unint64_t v16;
  __int16 v17;
  unint64_t v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  uint64_t v24;

  v24 = *MEMORY[0x24BDAC8D0];
  v9 = a4;
  v5 = *(_QWORD *)(*(_QWORD *)(a1 + 104) + 312);
  v6 = *(_QWORD *)(v5 + 272);
  if (v6 <= a2)
  {
    v10 = 0;
    v22 = 0u;
    v23 = 0u;
    v20 = 0u;
    v21 = 0u;
    v19 = 0u;
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    v11 = 136315906;
    v12 = "operator[]";
    v13 = 1024;
    v14 = 789;
    v15 = 2048;
    v16 = a2;
    v17 = 2048;
    v18 = v6;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  v7 = *(_QWORD *)(v5 + 288) + 1200 * a2;
  return re::PrimitiveRenderingDynamicGeometry::set<float,re::PrimitiveRenderingAttribute>(2, a3, &v9, (_anonymous_namespace_ *)(v7 + 80), (_BYTE *)(v7 + 514), *(_QWORD *)(v7 + 16), *(_QWORD *)(v7 + 520), *(re **)(v7 + 1192));
}

double REPrimitiveRenderSetLineColor(uint64_t a1, unint64_t a2, unint64_t a3, __n128 a4)
{
  uint64_t v4;
  uint64_t v5;
  double result;
  __n128 v7[5];
  uint64_t v8;

  v8 = *MEMORY[0x24BDAC8D0];
  v4 = *(_QWORD *)(*(_QWORD *)(a1 + 104) + 312);
  if (*(_QWORD *)(v4 + 272) <= a2)
  {
    memset(v7, 0, sizeof(v7));
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  v5 = *(_QWORD *)(v4 + 288) + 1200 * a2;
  v7[0] = a4;
  *(_QWORD *)&result = re::PrimitiveRenderingDynamicGeometry::set<re::Vector4<float>,re::PrimitiveRenderingAttribute>(5, a3, v7, (_anonymous_namespace_ *)(v5 + 200), (_BYTE *)(v5 + 517), *(_QWORD *)(v5 + 136), *(_QWORD *)(v5 + 528), (re *)*(_QWORD *)(v5 + 1192)).n128_u64[0];
  return result;
}

float REPrimitiveRenderSetLineWidth(uint64_t a1, unint64_t a2, unint64_t a3, float a4)
{
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  float v9;
  uint64_t v10;
  int v11;
  const char *v12;
  __int16 v13;
  int v14;
  __int16 v15;
  unint64_t v16;
  __int16 v17;
  unint64_t v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  uint64_t v24;

  v24 = *MEMORY[0x24BDAC8D0];
  v9 = a4;
  v5 = *(_QWORD *)(*(_QWORD *)(a1 + 104) + 312);
  v6 = *(_QWORD *)(v5 + 272);
  if (v6 <= a2)
  {
    v10 = 0;
    v22 = 0u;
    v23 = 0u;
    v20 = 0u;
    v21 = 0u;
    v19 = 0u;
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    v11 = 136315906;
    v12 = "operator[]";
    v13 = 1024;
    v14 = 789;
    v15 = 2048;
    v16 = a2;
    v17 = 2048;
    v18 = v6;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  v7 = *(_QWORD *)(v5 + 288) + 1200 * a2;
  return re::PrimitiveRenderingDynamicGeometry::set<float,re::PrimitiveRenderingAttribute>(6, a3, &v9, (_anonymous_namespace_ *)(v7 + 240), (_BYTE *)(v7 + 518), *(_QWORD *)(v7 + 136), *(_QWORD *)(v7 + 528), *(re **)(v7 + 1192));
}

double REPrimitiveRenderSetShapeColor(uint64_t a1, unint64_t a2, unint64_t a3, unsigned int a4, __n128 a5)
{
  uint64_t v5;
  uint64_t v6;
  __n128 v8[5];
  uint64_t v9;

  v9 = *MEMORY[0x24BDAC8D0];
  v5 = *(_QWORD *)(*(_QWORD *)(a1 + 104) + 312);
  if (*(_QWORD *)(v5 + 272) <= a2)
  {
    memset(v8, 0, sizeof(v8));
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  v6 = *(_QWORD *)(v5 + 288) + 1200 * a2;
  v8[0] = a5;
  return re::PrimitiveRenderingContext::setAttribute<re::Vector4<float>,re::PrimitiveRenderingShape>(v6, a3, a4, 3, v8);
}

double REPrimitiveRenderSetShapeScale(uint64_t a1, unint64_t a2, unint64_t a3, unsigned int a4, __n128 a5)
{
  uint64_t v5;
  uint64_t v6;
  __n128 v8[5];
  uint64_t v9;

  v9 = *MEMORY[0x24BDAC8D0];
  v5 = *(_QWORD *)(*(_QWORD *)(a1 + 104) + 312);
  if (*(_QWORD *)(v5 + 272) <= a2)
  {
    memset(v8, 0, sizeof(v8));
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  v6 = *(_QWORD *)(v5 + 288) + 1200 * a2;
  v8[0] = a5;
  return re::PrimitiveRenderingContext::setAttribute<re::Vector3<float>,re::PrimitiveRenderingShape>(v6, a3, a4, 2, v8);
}

uint64_t REPrimitiveRenderSetUniformPointColor(uint64_t result, unint64_t a2, __n128 a3)
{
  uint64_t v3;
  __n128 *v4;

  v3 = *(_QWORD *)(*(_QWORD *)(result + 104) + 312);
  if (*(_QWORD *)(v3 + 272) <= a2)
  {
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  v4 = (__n128 *)(*(_QWORD *)(v3 + 288) + 1200 * a2);
  if (v4[32].n128_u8[1])
  {
    v4[3].n128_u64[1] = 0;
    ++v4[4].n128_u32[0];
    v4[32].n128_u8[1] = 0;
  }
  if (v4[21].n128_u32[0] != 3)
    v4[21].n128_u32[0] = 3;
  v4[20] = a3;
  return result;
}

uint64_t REPrimitiveRenderSetUniformPointSize(uint64_t result, unint64_t a2, float a3)
{
  uint64_t v3;
  uint64_t v4;

  v3 = *(_QWORD *)(*(_QWORD *)(result + 104) + 312);
  if (*(_QWORD *)(v3 + 272) <= a2)
  {
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  v4 = *(_QWORD *)(v3 + 288) + 1200 * a2;
  if (*(_BYTE *)(v4 + 514))
  {
    *(_QWORD *)(v4 + 96) = 0;
    ++*(_DWORD *)(v4 + 104);
    *(_BYTE *)(v4 + 514) = 0;
  }
  if (*(_DWORD *)(v4 + 368))
    *(_DWORD *)(v4 + 368) = 0;
  *(float *)(v4 + 352) = a3;
  return result;
}

uint64_t REPrimitiveRenderSetUniformLineColor(uint64_t result, unint64_t a2, __n128 a3)
{
  uint64_t v3;
  __n128 *v4;

  v3 = *(_QWORD *)(*(_QWORD *)(result + 104) + 312);
  if (*(_QWORD *)(v3 + 272) <= a2)
  {
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  v4 = (__n128 *)(*(_QWORD *)(v3 + 288) + 1200 * a2);
  if (v4[32].n128_u8[5])
  {
    v4[13].n128_u64[1] = 0;
    ++v4[14].n128_u32[0];
    v4[32].n128_u8[5] = 0;
  }
  if (v4[29].n128_u32[0] != 3)
    v4[29].n128_u32[0] = 3;
  v4[28] = a3;
  return result;
}

uint64_t REPrimitiveRenderSetUniformLineWidth(uint64_t result, unint64_t a2, float a3)
{
  uint64_t v3;
  uint64_t v4;

  v3 = *(_QWORD *)(*(_QWORD *)(result + 104) + 312);
  if (*(_QWORD *)(v3 + 272) <= a2)
  {
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  v4 = *(_QWORD *)(v3 + 288) + 1200 * a2;
  if (*(_BYTE *)(v4 + 518))
  {
    *(_QWORD *)(v4 + 256) = 0;
    ++*(_DWORD *)(v4 + 264);
    *(_BYTE *)(v4 + 518) = 0;
  }
  if (*(_DWORD *)(v4 + 496))
    *(_DWORD *)(v4 + 496) = 0;
  *(float *)(v4 + 480) = a3;
  return result;
}

double REPrimitiveRenderSetUniformShapeColor(uint64_t a1, unint64_t a2, unsigned int a3, __n128 a4)
{
  uint64_t v4;
  uint64_t v5;
  double result;
  __n128 v7[5];
  uint64_t v8;

  v8 = *MEMORY[0x24BDAC8D0];
  v4 = *(_QWORD *)(*(_QWORD *)(a1 + 104) + 312);
  if (*(_QWORD *)(v4 + 272) <= a2)
  {
    memset(v7, 0, sizeof(v7));
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  v5 = *(_QWORD *)(v4 + 288) + 1200 * a2;
  v7[0] = a4;
  *(_QWORD *)&result = re::PrimitiveRenderingDynamicGeometry::setUniform<re::Vector4<float>,re::PrimitiveRenderingShape>(v5, a3, 3u, v7).n128_u64[0];
  return result;
}

double REPrimitiveRenderSetUniformShapeScale(uint64_t a1, unint64_t a2, unsigned int a3, __n128 a4)
{
  uint64_t v4;
  uint64_t v5;
  double result;
  __n128 v7[5];
  uint64_t v8;

  v8 = *MEMORY[0x24BDAC8D0];
  v4 = *(_QWORD *)(*(_QWORD *)(a1 + 104) + 312);
  if (*(_QWORD *)(v4 + 272) <= a2)
  {
    memset(v7, 0, sizeof(v7));
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  v5 = *(_QWORD *)(v4 + 288) + 1200 * a2;
  v7[0] = a4;
  *(_QWORD *)&result = re::PrimitiveRenderingDynamicGeometry::setUniform<re::Vector3<float>,re::PrimitiveRenderingShape>(v5, a3, 2u, v7).n128_u64[0];
  return result;
}

void REPrimitiveRenderSetPointMaterial(uint64_t a1, unint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8[4];
  int v9;
  const char *v10;
  __int16 v11;
  int v12;
  __int16 v13;
  unint64_t v14;
  __int16 v15;
  unint64_t v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  uint64_t v22;

  v22 = *MEMORY[0x24BDAC8D0];
  re::AssetAPIHelper::assetHandleCreate(a3, v8);
  v5 = re::AssetHandle::asset<re::MaterialAsset>((re::MaterialAsset *)v8);
  if (v5)
  {
    v6 = *(_QWORD *)(*(_QWORD *)(a1 + 104) + 312);
    v7 = *(_QWORD *)(v6 + 272);
    if (v7 <= a2)
    {
      v8[3] = 0;
      v20 = 0u;
      v21 = 0u;
      v18 = 0u;
      v19 = 0u;
      v17 = 0u;
      os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      v9 = 136315906;
      v10 = "operator[]";
      v11 = 1024;
      v12 = 789;
      v13 = 2048;
      v14 = a2;
      v15 = 2048;
      v16 = v7;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
    }
    *(_QWORD *)(*(_QWORD *)(v6 + 288) + 1200 * a2 + 1096) = *(_QWORD *)(v5 + 1664);
  }
  re::AssetHandle::~AssetHandle((re::AssetHandle *)v8);
}

void REPrimitiveRenderSetLineMaterial(uint64_t a1, unint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8[4];
  int v9;
  const char *v10;
  __int16 v11;
  int v12;
  __int16 v13;
  unint64_t v14;
  __int16 v15;
  unint64_t v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  uint64_t v22;

  v22 = *MEMORY[0x24BDAC8D0];
  re::AssetAPIHelper::assetHandleCreate(a3, v8);
  v5 = re::AssetHandle::asset<re::MaterialAsset>((re::MaterialAsset *)v8);
  if (v5)
  {
    v6 = *(_QWORD *)(*(_QWORD *)(a1 + 104) + 312);
    v7 = *(_QWORD *)(v6 + 272);
    if (v7 <= a2)
    {
      v8[3] = 0;
      v20 = 0u;
      v21 = 0u;
      v18 = 0u;
      v19 = 0u;
      v17 = 0u;
      os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      v9 = 136315906;
      v10 = "operator[]";
      v11 = 1024;
      v12 = 789;
      v13 = 2048;
      v14 = a2;
      v15 = 2048;
      v16 = v7;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
    }
    *(_QWORD *)(*(_QWORD *)(v6 + 288) + 1200 * a2 + 1104) = *(_QWORD *)(v5 + 1664);
  }
  re::AssetHandle::~AssetHandle((re::AssetHandle *)v8);
}

void REPrimitiveRenderSetShapeMaterial(uint64_t a1, unint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8[4];
  int v9;
  const char *v10;
  __int16 v11;
  int v12;
  __int16 v13;
  unint64_t v14;
  __int16 v15;
  unint64_t v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  uint64_t v22;

  v22 = *MEMORY[0x24BDAC8D0];
  re::AssetAPIHelper::assetHandleCreate(a3, v8);
  v5 = re::AssetHandle::asset<re::MaterialAsset>((re::MaterialAsset *)v8);
  if (v5)
  {
    v6 = *(_QWORD *)(*(_QWORD *)(a1 + 104) + 312);
    v7 = *(_QWORD *)(v6 + 272);
    if (v7 <= a2)
    {
      v8[3] = 0;
      v20 = 0u;
      v21 = 0u;
      v18 = 0u;
      v19 = 0u;
      v17 = 0u;
      os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      v9 = 136315906;
      v10 = "operator[]";
      v11 = 1024;
      v12 = 789;
      v13 = 2048;
      v14 = a2;
      v15 = 2048;
      v16 = v7;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
    }
    *(_QWORD *)(*(_QWORD *)(v6 + 288) + 1200 * a2 + 1112) = *(_QWORD *)(v5 + 1664);
  }
  re::AssetHandle::~AssetHandle((re::AssetHandle *)v8);
}

uint64_t REPrimitiveRenderRegisterCustomShape(uint64_t a1, float32x4_t *a2, uint64_t a3, float32x4_t *a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6;
  _QWORD *v7;
  _QWORD v9[2];
  _QWORD v10[2];
  float32x4_t *v11[2];

  v6 = *(_QWORD *)(a1 + 104);
  if (v6)
    v7 = *(_QWORD **)(v6 + 312);
  else
    v7 = 0;
  v11[0] = a2;
  v11[1] = a4;
  v10[0] = a5;
  v10[1] = a6;
  v9[0] = a3;
  v9[1] = a4;
  return re::PrimitiveRenderer::addCustomShape(v7, v11, v10, v9);
}

uint64_t REPrimitiveRenderAddCustomShape(uint64_t a1, unint64_t a2, unint64_t a3, __n128 a4, __n128 a5)
{
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  _BYTE v10[18];
  __int16 v11;
  unint64_t v12;
  __int16 v13;
  unint64_t v14;
  _OWORD v15[5];
  uint64_t v16;

  v16 = *MEMORY[0x24BDAC8D0];
  v6 = *(_QWORD *)(*(_QWORD *)(a1 + 104) + 312);
  v7 = *(_QWORD *)(v6 + 272);
  if (v7 <= a2)
  {
    memset(v15, 0, sizeof(v15));
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    *(_DWORD *)v10 = 136315906;
    *(_QWORD *)&v10[4] = "operator[]";
    *(_WORD *)&v10[12] = 1024;
    *(_DWORD *)&v10[14] = 789;
    v11 = 2048;
    v12 = a2;
    v13 = 2048;
    v14 = v7;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  v8 = *(_QWORD *)(v6 + 288) + 1200 * a2;
  v15[0] = a4;
  *(__n128 *)v10 = a5;
  return re::PrimitiveRenderingContext::addShape<unsigned long>(v8, a3, v15, v10);
}

double REPrimitiveRenderSetCustomShapeColor(uint64_t a1, unint64_t a2, unint64_t a3, unint64_t a4, __n128 a5)
{
  uint64_t v5;
  uint64_t v6;
  __n128 v8[5];
  uint64_t v9;

  v9 = *MEMORY[0x24BDAC8D0];
  v5 = *(_QWORD *)(*(_QWORD *)(a1 + 104) + 312);
  if (*(_QWORD *)(v5 + 272) <= a2)
  {
    memset(v8, 0, sizeof(v8));
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  v6 = *(_QWORD *)(v5 + 288) + 1200 * a2;
  v8[0] = a5;
  return re::PrimitiveRenderingContext::setAttribute<re::Vector4<float>,unsigned long>(v6, a3, a4, 3, v8);
}

double REPrimitiveRenderSetUniformCustomShapeColor(uint64_t a1, unint64_t a2, unint64_t a3, __n128 a4)
{
  uint64_t v4;
  uint64_t v5;
  double result;
  __n128 v7[5];
  uint64_t v8;

  v8 = *MEMORY[0x24BDAC8D0];
  v4 = *(_QWORD *)(*(_QWORD *)(a1 + 104) + 312);
  if (*(_QWORD *)(v4 + 272) <= a2)
  {
    memset(v7, 0, sizeof(v7));
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  v5 = *(_QWORD *)(v4 + 288) + 1200 * a2;
  v7[0] = a4;
  *(_QWORD *)&result = re::PrimitiveRenderingDynamicGeometry::setUniform<re::Vector4<float>,unsigned long>(v5, a3, 3u, v7).n128_u64[0];
  return result;
}

double REPrimitiveRenderSetCustomShapeScale(uint64_t a1, unint64_t a2, unint64_t a3, unint64_t a4, __n128 a5)
{
  uint64_t v5;
  uint64_t v6;
  __n128 v8[5];
  uint64_t v9;

  v9 = *MEMORY[0x24BDAC8D0];
  v5 = *(_QWORD *)(*(_QWORD *)(a1 + 104) + 312);
  if (*(_QWORD *)(v5 + 272) <= a2)
  {
    memset(v8, 0, sizeof(v8));
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  v6 = *(_QWORD *)(v5 + 288) + 1200 * a2;
  v8[0] = a5;
  return re::PrimitiveRenderingContext::setAttribute<re::Vector3<float>,unsigned long>(v6, a3, a4, 2, v8);
}

double REPrimitiveRenderSetUniformCustomShapeScale(uint64_t a1, unint64_t a2, unint64_t a3, __n128 a4)
{
  uint64_t v4;
  uint64_t v5;
  double result;
  __n128 v7[5];
  uint64_t v8;

  v8 = *MEMORY[0x24BDAC8D0];
  v4 = *(_QWORD *)(*(_QWORD *)(a1 + 104) + 312);
  if (*(_QWORD *)(v4 + 272) <= a2)
  {
    memset(v7, 0, sizeof(v7));
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  v5 = *(_QWORD *)(v4 + 288) + 1200 * a2;
  v7[0] = a4;
  *(_QWORD *)&result = re::PrimitiveRenderingDynamicGeometry::setUniform<re::Vector3<float>,unsigned long>(v5, a3, 2u, v7).n128_u64[0];
  return result;
}

void REPrimitiveRenderAddStaticMesh(uint64_t a1, unint64_t a2, void *a3)
{
  unint64_t v3;
  id v6;
  uint64_t v7;
  unint64_t v8;
  void (**v9)(_QWORD, _QWORD);
  uint64_t v10;
  uint64_t v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  int32x4_t v16;
  __int128 v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  const char *v21;
  __int16 v22;
  int v23;
  __int16 v24;
  unint64_t v25;
  __int16 v26;
  unint64_t v27;
  uint64_t v28;

  v28 = *MEMORY[0x24BDAC8D0];
  v6 = a3;
  v7 = *(_QWORD *)(*(_QWORD *)(a1 + 104) + 312);
  v8 = *(_QWORD *)(v7 + 272);
  if (v8 <= a2)
  {
    v16 = 0u;
    v17 = 0u;
    v14 = 0u;
    v15 = 0u;
    v13 = 0u;
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    v20 = 136315906;
    v21 = "operator[]";
    v22 = 1024;
    v23 = 789;
    v24 = 2048;
    v25 = a2;
    v26 = 2048;
    v27 = v8;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_5:
    v16 = 0u;
    v17 = 0u;
    v14 = 0u;
    v15 = 0u;
    v13 = 0u;
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    v20 = 136315906;
    v21 = "operator[]";
    v22 = 1024;
    v23 = 789;
    v24 = 2048;
    v25 = v8;
    v26 = 2048;
    v27 = v3;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  v9 = (void (**)(_QWORD, _QWORD))v6;
  v10 = *(_QWORD *)(v7 + 288);
  v11 = v10 + 1200 * a2;
  v8 = *(_QWORD *)(v11 + 1072);
  v13 = 0u;
  v14 = 0u;
  v15 = 0u;
  v16 = vdupq_n_s32(0x7F800000u);
  *(_QWORD *)&v12 = 0x7F0000007FLL;
  *((_QWORD *)&v12 + 1) = 0x7F0000007FLL;
  v17 = v12;
  v18 = 0;
  v19 = 0;
  re::DynamicArray<re::PrimitiveRenderingContext::PrimitiveMesh>::add((_anonymous_namespace_ *)(v11 + 1056), (uint64_t)&v13);
  re::DynamicArray<re::PrimitiveMeshAttribute>::deinit((uint64_t)&v13);
  v3 = *(_QWORD *)(v11 + 1072);
  if (v3 <= v8)
    goto LABEL_5;
  v9[2](v9, *(_QWORD *)(v10 + 1200 * a2 + 1088) + 96 * v8);

}

void REPrimitiveRenderStaticMeshAddStandardAttribute(_anonymous_namespace_ *a1, const char *a2, char a3, void *a4)
{
  _anonymous_namespace_ *v7;
  _anonymous_namespace_ *v8;
  id v9;
  uint64_t v10[2];
  __n128 v11;
  __int16 v12;
  char v13;
  id v14;
  int v15;
  int v16;
  uint64_t v17;

  v17 = *MEMORY[0x24BDAC8D0];
  v7 = a4;
  v10[0] = 0;
  v10[1] = (uint64_t)&str_110;
  v9 = v7;
  v8 = v7;
  v11.n128_u64[0] = 0;
  v11.n128_u64[1] = (unint64_t)&str_110;
  v14 = 0;
  v15 = 0;
  v16 = 0;
  re::StringID::operator=(v11.n128_u64, v10);
  v12 = 1;
  v13 = a3;
  NS::SharedPtr<MTL::Texture>::operator=(&v14, &v9);
  if (v9)
  {

    v9 = 0;
  }
  re::StringID::destroyString((re::StringID *)v10);
  re::DynamicArray<re::PrimitiveMeshAttribute>::add(a1, &v11);
  if (v14)
  {

    v14 = 0;
  }
  re::StringID::destroyString((re::StringID *)&v11);

}

void REPrimitiveRenderStaticMeshAddCustomAttribute(_anonymous_namespace_ *a1, const char *a2, char a3, void *a4)
{
  _anonymous_namespace_ *v7;
  _anonymous_namespace_ *v8;
  id v9;
  uint64_t v10[2];
  __n128 v11;
  __int16 v12;
  char v13;
  id v14;
  int v15;
  int v16;
  uint64_t v17;

  v17 = *MEMORY[0x24BDAC8D0];
  v7 = a4;
  v10[0] = 0;
  v10[1] = (uint64_t)&str_110;
  v9 = v7;
  v8 = v7;
  v11.n128_u64[0] = 0;
  v11.n128_u64[1] = (unint64_t)&str_110;
  v14 = 0;
  v15 = 0;
  v16 = 0;
  re::StringID::operator=(v11.n128_u64, v10);
  v12 = 0;
  v13 = a3;
  NS::SharedPtr<MTL::Texture>::operator=(&v14, &v9);
  if (v9)
  {

    v9 = 0;
  }
  re::StringID::destroyString((re::StringID *)v10);
  re::DynamicArray<re::PrimitiveMeshAttribute>::add(a1, &v11);
  if (v14)
  {

    v14 = 0;
  }
  re::StringID::destroyString((re::StringID *)&v11);

}

void REPrimitiveRenderStaticMeshAddUniformCustomAttributeFloat(_anonymous_namespace_ *a1, const char *a2, float a3)
{
  uint64_t v5[2];
  float v6;
  __n128 v7;
  id v8;
  uint64_t v9;

  v9 = *MEMORY[0x24BDAC8D0];
  v6 = a3;
  v5[0] = 0;
  v5[1] = (uint64_t)&str_110;
  re::PrimitiveMeshAttribute::uniformCustomAttribute<float>(v5, (int *)&v6, (uint64_t)&v7);
  re::StringID::destroyString((re::StringID *)v5);
  re::DynamicArray<re::PrimitiveMeshAttribute>::add(a1, &v7);
  if (v8)
  {

    v8 = 0;
  }
  re::StringID::destroyString((re::StringID *)&v7);
}

void REPrimitiveRenderStaticMeshAddUniformCustomAttributeFloat2(_anonymous_namespace_ *a1, const char *a2, double a3)
{
  double v6;
  uint64_t v7[2];
  __n128 v8;
  id v9;
  uint64_t v10;

  v10 = *MEMORY[0x24BDAC8D0];
  v7[0] = 0;
  v7[1] = (uint64_t)&str_110;
  v6 = a3;
  re::PrimitiveMeshAttribute::uniformCustomAttribute<re::Vector2<float>>(v7, (unint64_t *)&v6, (uint64_t)&v8);
  re::StringID::destroyString((re::StringID *)v7);
  re::DynamicArray<re::PrimitiveMeshAttribute>::add(a1, &v8);
  if (v9)
  {

    v9 = 0;
  }
  re::StringID::destroyString((re::StringID *)&v8);
}

void REPrimitiveRenderStaticMeshAddUniformCustomAttributeFloat3(_anonymous_namespace_ *a1, const char *a2, __n128 a3)
{
  __n128 v6;
  uint64_t v7[2];
  __n128 v8;
  id v9;
  uint64_t v10;

  v10 = *MEMORY[0x24BDAC8D0];
  v7[0] = 0;
  v7[1] = (uint64_t)&str_110;
  v6 = a3;
  re::PrimitiveMeshAttribute::uniformCustomAttribute<re::Vector3<float>>(v7, &v6, (uint64_t)&v8);
  re::StringID::destroyString((re::StringID *)v7);
  re::DynamicArray<re::PrimitiveMeshAttribute>::add(a1, &v8);
  if (v9)
  {

    v9 = 0;
  }
  re::StringID::destroyString((re::StringID *)&v8);
}

void REPrimitiveRenderStaticMeshAddUniformCustomAttributeFloat4(_anonymous_namespace_ *a1, const char *a2, __n128 a3)
{
  __n128 v6;
  uint64_t v7[2];
  __n128 v8;
  id v9;
  uint64_t v10;

  v10 = *MEMORY[0x24BDAC8D0];
  v7[0] = 0;
  v7[1] = (uint64_t)&str_110;
  v6 = a3;
  re::PrimitiveMeshAttribute::uniformCustomAttribute<re::Vector4<float>>(v7, &v6, (uint64_t)&v8);
  re::StringID::destroyString((re::StringID *)v7);
  re::DynamicArray<re::PrimitiveMeshAttribute>::add(a1, &v8);
  if (v9)
  {

    v9 = 0;
  }
  re::StringID::destroyString((re::StringID *)&v8);
}

uint64_t REPrimitiveRenderStaticMeshSetVertexCount(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 80) = a2;
  return result;
}

uint64_t REPrimitiveRenderStaticMeshSetIndexCount(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 88) = a2;
  return result;
}

__n128 *REPrimitiveRenderStaticMeshSetAABB(__n128 *result, __n128 a2, __n128 a3)
{
  result[3] = a2;
  result[4] = a3;
  return result;
}

void REPrimitiveRenderSetMeshMaterial(uint64_t a1, unint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8[4];
  int v9;
  const char *v10;
  __int16 v11;
  int v12;
  __int16 v13;
  unint64_t v14;
  __int16 v15;
  unint64_t v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  uint64_t v22;

  v22 = *MEMORY[0x24BDAC8D0];
  re::AssetAPIHelper::assetHandleCreate(a3, v8);
  v5 = re::AssetHandle::asset<re::MaterialAsset>((re::MaterialAsset *)v8);
  if (v5)
  {
    v6 = *(_QWORD *)(*(_QWORD *)(a1 + 104) + 312);
    v7 = *(_QWORD *)(v6 + 272);
    if (v7 <= a2)
    {
      v8[3] = 0;
      v20 = 0u;
      v21 = 0u;
      v18 = 0u;
      v19 = 0u;
      v17 = 0u;
      os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      v9 = 136315906;
      v10 = "operator[]";
      v11 = 1024;
      v12 = 789;
      v13 = 2048;
      v14 = a2;
      v15 = 2048;
      v16 = v7;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
    }
    *(_QWORD *)(*(_QWORD *)(v6 + 288) + 1200 * a2 + 1120) = *(_QWORD *)(v5 + 1664);
  }
  re::AssetHandle::~AssetHandle((re::AssetHandle *)v8);
}

double REPrimitiveRenderSetMeshMaterialTechniqueMapping(uint64_t a1, unint64_t a2, char *__s, const char *a4)
{
  uint64_t v5;
  unint64_t v6;
  uint64_t v9;
  size_t v10;
  uint64_t v11;
  size_t v12;
  uint64_t v13;
  double result;
  _BYTE v15[18];
  __int16 v16;
  unint64_t v17;
  __int16 v18;
  unint64_t v19;
  _OWORD v20[5];
  uint64_t v21;

  v21 = *MEMORY[0x24BDAC8D0];
  v5 = *(_QWORD *)(*(_QWORD *)(a1 + 104) + 312);
  v6 = *(_QWORD *)(v5 + 272);
  if (v6 <= a2)
  {
    memset(v20, 0, sizeof(v20));
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    *(_DWORD *)v15 = 136315906;
    *(_QWORD *)&v15[4] = "operator[]";
    *(_WORD *)&v15[12] = 1024;
    *(_DWORD *)&v15[14] = 789;
    v16 = 2048;
    v17 = a2;
    v18 = 2048;
    v19 = v6;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  v9 = *(_QWORD *)(v5 + 288);
  v10 = strlen(__s);
  if (v10)
  {
    MurmurHash3_x64_128((uint64_t)__s, v10, 0, (unint64_t *)v20);
    v11 = (*((_QWORD *)&v20[0] + 1) - 0x61C8864680B583E9 + (*(_QWORD *)&v20[0] << 6) + (*(_QWORD *)&v20[0] >> 2)) ^ *(_QWORD *)&v20[0];
  }
  else
  {
    v11 = 0;
  }
  *(_QWORD *)v15 = v11;
  v12 = strlen(a4);
  if (v12)
  {
    MurmurHash3_x64_128((uint64_t)a4, v12, 0, (unint64_t *)v20);
    v13 = (*((_QWORD *)&v20[0] + 1) - 0x61C8864680B583E9 + (*(_QWORD *)&v20[0] << 6) + (*(_QWORD *)&v20[0] >> 2)) ^ *(_QWORD *)&v20[0];
  }
  else
  {
    v13 = 0;
  }
  *(_QWORD *)&v15[8] = v13;
  *(_QWORD *)&result = re::DynamicArray<re::RigNodeConstraint>::add((_anonymous_namespace_ *)(v9 + 1200 * a2 + 1136), (__n128 *)v15).n128_u64[0];
  return result;
}

double REAudioGeneratorBlockConfigurationCreate(re *a1)
{
  uint64_t *v1;
  _OWORD *v2;
  double result;

  v1 = re::globalAllocators(a1);
  v2 = (_OWORD *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v1[2] + 32))(v1[2], 48, 8);
  result = 0.0;
  *v2 = 0u;
  v2[1] = 0u;
  v2[2] = 0u;
  return result;
}

re *REAudioGeneratorBlockConfigurationDestroy(re *result)
{
  re *v1;
  uint64_t v2;
  uint64_t v3;

  if (result)
  {
    v1 = result;
    v2 = re::globalAllocators(result)[2];
    if (*((_BYTE *)v1 + 8))
    {
      v3 = *((_QWORD *)v1 + 2);
      if (v3)
      {
        if ((*((_BYTE *)v1 + 24) & 1) != 0)
          (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v3 + 40))(v3, *((_QWORD *)v1 + 4));
        *((_OWORD *)v1 + 1) = 0u;
        *((_OWORD *)v1 + 2) = 0u;
      }
    }
    return (re *)(*(uint64_t (**)(uint64_t, re *))(*(_QWORD *)v2 + 40))(v2, v1);
  }
  return result;
}

_DWORD *REAudioGeneratorBlockConfigurationSetLayoutTag(_DWORD *result, int a2)
{
  *result = a2;
  return result;
}

uint64_t REAudioGeneratorBlockConfigurationGetLayoutTag(unsigned int *a1)
{
  return *a1;
}

unsigned __int8 *REAudioGeneratorBlockConfigurationSetMixGroupName(uint64_t a1, id a2)
{
  _anonymous_namespace_ *v3;
  unsigned __int8 *result;
  uint64_t v5;
  unsigned __int8 *v6;
  char v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char v11;
  uint64_t v12;

  if (a2)
  {
    v3 = (_anonymous_namespace_ *)objc_msgSend(objc_retainAutorelease(a2), "UTF8String");
    LOBYTE(v9) = 1;
    re::DynamicString::DynamicString((re::DynamicString *)&v10, (const re::DynamicString *)&v6);
    re::Optional<re::DynamicString>::operator=((unsigned __int8 *)(a1 + 8), &v9);
    if ((_BYTE)v9 && v10 && (v11 & 1) != 0)
      (*(void (**)(void))(*(_QWORD *)v10 + 40))();
    result = v6;
    if (v6 && (v7 & 1) != 0)
    {
      v5 = v8;
      return (unsigned __int8 *)(*(uint64_t (**)(unsigned __int8 *, uint64_t))(*(_QWORD *)result + 40))(result, v5);
    }
  }
  else
  {
    LOBYTE(v9) = 0;
    result = re::Optional<re::DynamicString>::operator=((unsigned __int8 *)(a1 + 8), &v9);
    if ((_BYTE)v9)
    {
      result = (unsigned __int8 *)v10;
      if (v10)
      {
        if ((v11 & 1) != 0)
        {
          v5 = v12;
          return (unsigned __int8 *)(*(uint64_t (**)(unsigned __int8 *, uint64_t))(*(_QWORD *)result + 40))(result, v5);
        }
      }
    }
  }
  return result;
}

id REAudioGeneratorBlockConfigurationGetMixGroupName(uint64_t a1)
{
  uint64_t v1;

  if (!*(_BYTE *)(a1 + 8))
    return 0;
  if ((*(_BYTE *)(a1 + 24) & 1) != 0)
    v1 = *(_QWORD *)(a1 + 32);
  else
    v1 = a1 + 25;
  objc_msgSend(MEMORY[0x24BDD17C8], "stringWithUTF8String:", v1);
  return (id)objc_claimAutoreleasedReturnValue();
}

void *REShadowClusterRootComponentGetComponentType()
{
  if (re::ecs2::dispatchOnceInitECSComponents(void)::onceToken != -1)
    dispatch_once(&re::ecs2::dispatchOnceInitECSComponents(void)::onceToken, &__block_literal_global_13);
  return re::ecs2::ComponentImpl<re::ecs2::ShadowClusterRootComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType;
}

__n128 REShadowClusterRootComponentGetClusterBound(__n128 *a1)
{
  return a1[2];
}

double REBlendSpaceDefinitionBuilderCreate(_anonymous_namespace_ *a1)
{
  int v1;
  re *v2;
  uint64_t *v3;
  uint64_t v4;
  double result;

  v1 = (int)a1;
  v3 = re::globalAllocators(v2);
  v4 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v3[2] + 32))(v3[2], 128, 8);
  ArcSharedObject::ArcSharedObject((ArcSharedObject *)v4, 0);
  *(_QWORD *)v4 = &off_24ED99570;
  *(_QWORD *)(v4 + 40) = 0;
  *(_QWORD *)(v4 + 48) = 0;
  *(_QWORD *)(v4 + 32) = 0;
  *(_DWORD *)(v4 + 56) = 0;
  result = 0.0;
  *(_OWORD *)(v4 + 64) = 0u;
  *(_OWORD *)(v4 + 80) = 0u;
  *(_DWORD *)(v4 + 96) = 0;
  *(_QWORD *)(v4 + 104) = 0;
  *(_DWORD *)(v4 + 24) = v1;
  *(_QWORD *)(v4 + 120) = v4 + 24;
  return result;
}

uint64_t REBlendSpaceDefinitionBuilderAddUniformAxis(_anonymous_namespace_ *a1, const char *a2, int a3, float a4, float a5)
{
  re::BlendSpaceBuilder *v9;
  uint64_t v10;
  _QWORD v12[2];

  v9 = (_anonymous_namespace_ *)((char *)a1 + 112);
  v12[0] = 0;
  v12[1] = &str_110;
  v10 = re::BlendSpaceBuilder::addAxis(v9, (const re::StringID *)v12, a3, a4, a5);
  re::StringID::destroyString((re::StringID *)v12);
  return v10;
}

uint64_t REBlendSpaceDefinitionBuilderAddAxis(_anonymous_namespace_ *a1, const char *a2)
{
  re::BlendSpaceBuilder *v3;
  uint64_t v4;
  _QWORD v6[2];

  v3 = (_anonymous_namespace_ *)((char *)a1 + 112);
  v6[0] = 0;
  v6[1] = &str_110;
  v4 = re::BlendSpaceBuilder::addAxis(v3, (const re::StringID *)v6, 0, 0.0, 0.0);
  re::StringID::destroyString((re::StringID *)v6);
  return v4;
}

uint64_t REBlendSpaceDefinitionBuilderSetDefaultControlValueForAxis(uint64_t a1, unint64_t a2, float a3)
{
  return re::BlendSpaceBuilder::setDefaultControlValueForAxis(a1 + 112, a2, a3);
}

void REBlendSpaceDefinitionBuilderSetControlValueBindPathForAxis(_anonymous_namespace_ *a1, unint64_t a2, const char *a3)
{
  re::BlendSpaceBuilder *v5;
  _QWORD v6[2];

  v5 = (_anonymous_namespace_ *)((char *)a1 + 112);
  v6[0] = 0;
  v6[1] = &str_110;
  re::BlendSpaceBuilder::setControlValueBindPath(v5, a2, (const re::StringID *)v6);
  re::StringID::destroyString((re::StringID *)v6);
}

uint64_t REBlendSpaceDefinitionBuilderAddSample(_anonymous_namespace_ *a1, const char *a2)
{
  re::BlendSpaceBuilder *v3;
  uint64_t v4;
  StringID v6;

  v3 = (_anonymous_namespace_ *)((char *)a1 + 112);
  *(_QWORD *)&v6.var0 = 0;
  v6.var1 = (char *)&str_110;
  v4 = re::BlendSpaceBuilder::addSample(v3, &v6);
  re::StringID::destroyString((re::StringID *)&v6);
  return v4;
}

unint64_t REBlendSpaceDefinitionBuilderAddSampleUniform(_anonymous_namespace_ *a1, const char *a2, int a3, int a4)
{
  re::BlendSpaceBuilder *v7;
  unint64_t v8;
  StringID v10;

  v7 = (_anonymous_namespace_ *)((char *)a1 + 112);
  *(_QWORD *)&v10.var0 = 0;
  v10.var1 = (char *)&str_110;
  v8 = re::BlendSpaceBuilder::addSampleUniform(v7, &v10, a3, a4);
  re::StringID::destroyString((re::StringID *)&v10);
  return v8;
}

uint64_t REBlendSpaceDefinitionBuilderSetSamplePosition(uint64_t a1, unint64_t a2, float *a3, uint64_t a4)
{
  return re::BlendSpaceBuilder::setSamplePosition(a1 + 112, a2, a3, a4);
}

uint64_t REBlendSpaceDefinitionBuilderSetSampleFalloff(uint64_t a1, unint64_t a2, float a3)
{
  return re::BlendSpaceBuilder::setSampleFalloff(a1 + 112, a2, a3);
}

uint64_t REBlendSpaceDefinitionBuilderBuild(uint64_t a1)
{
  re *v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t *v4;
  uint64_t *v5;
  char v7[8];
  uint64_t *v8;
  uint64_t v9;
  char v10;

  re::BlendSpaceBuilder::build((re::BlendSpaceBuilder *)(a1 + 112), (uint64_t)v7);
  if (v7[0])
  {
    v2 = re::globalAllocators(v1);
    v3 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v2[2] + 32))(v2[2], 112, 8);
    ArcSharedObject::ArcSharedObject((ArcSharedObject *)v3, 0);
    *(_QWORD *)v3 = &off_24ED995B8;
    *(_OWORD *)(v3 + 24) = 0u;
    *(_OWORD *)(v3 + 40) = 0u;
    *(_OWORD *)(v3 + 56) = 0u;
    *(_OWORD *)(v3 + 88) = 0u;
    *(_QWORD *)(v3 + 104) = 0;
    *(_OWORD *)(v3 + 72) = 0u;
    v4 = v8;
    v5 = v8 + 1;
    *(_DWORD *)(v3 + 24) = *(_DWORD *)v8;
    re::DynamicArray<re::BlendSpaceAxisDefinition>::operator=(v3 + 32, v5);
    re::DynamicArray<re::BlendSpaceSampleDefinition>::operator=(v3 + 72, v4 + 6);
    if (v7[0])
      return v3;
  }
  else
  {
    v3 = 0;
  }
  if (v9 && (v10 & 1) != 0)
    (*(void (**)(void))(*(_QWORD *)v9 + 40))();
  return v3;
}

_QWORD *re::Shareable<`anonymous namespace'::REBlendSpaceBuilder>::~Shareable(_QWORD *a1)
{
  *a1 = &off_24ED99570;
  re::DynamicArray<re::BlendSpaceSampleDefinition>::deinit((uint64_t)(a1 + 9));
  re::DynamicArray<re::BlendSpaceAxisDefinition>::deinit((uint64_t)(a1 + 4));
  *a1 = &off_24ED426B8;
  objc_destructInstance(a1 + 1);
  return a1;
}

void re::Shareable<`anonymous namespace'::REBlendSpaceBuilder>::~Shareable(_QWORD *a1)
{
  *a1 = &off_24ED99570;
  re::DynamicArray<re::BlendSpaceSampleDefinition>::deinit((uint64_t)(a1 + 9));
  re::DynamicArray<re::BlendSpaceAxisDefinition>::deinit((uint64_t)(a1 + 4));
  *a1 = &off_24ED426B8;
  objc_destructInstance(a1 + 1);
  JUMPOUT(0x2276933B8);
}

_QWORD *re::Shareable<re::BlendSpaceDefinition>::~Shareable(_QWORD *a1)
{
  *a1 = &off_24ED995B8;
  re::DynamicArray<re::BlendSpaceSampleDefinition>::deinit((uint64_t)(a1 + 9));
  re::DynamicArray<re::BlendSpaceAxisDefinition>::deinit((uint64_t)(a1 + 4));
  *a1 = &off_24ED426B8;
  objc_destructInstance(a1 + 1);
  return a1;
}

void re::Shareable<re::BlendSpaceDefinition>::~Shareable(_QWORD *a1)
{
  *a1 = &off_24ED995B8;
  re::DynamicArray<re::BlendSpaceSampleDefinition>::deinit((uint64_t)(a1 + 9));
  re::DynamicArray<re::BlendSpaceAxisDefinition>::deinit((uint64_t)(a1 + 4));
  *a1 = &off_24ED426B8;
  objc_destructInstance(a1 + 1);
  JUMPOUT(0x2276933B8);
}

__n128 REGeomInstanceCreate(re *a1, __n128 a2, __n128 a3, __n128 a4, __n128 a5)
{
  unsigned __int32 v5;
  uint64_t *v6;
  __n128 *v7;
  __n128 result;

  v5 = a1;
  v6 = re::globalAllocators(a1);
  v7 = (__n128 *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v6[2] + 32))(v6[2], 112, 16);
  ArcSharedObject::ArcSharedObject((ArcSharedObject *)v7, 0);
  v7->n128_u64[0] = (unint64_t)&off_24ED43280;
  v7[6].n128_u64[0] = 0;
  v7[6].n128_u64[1] = 0;
  v7[2] = a2;
  v7[3] = a3;
  result = a5;
  v7[4] = a4;
  v7[5] = a5;
  v7[6].n128_u32[0] = v5;
  return result;
}

__n128 REGeomInstanceGetTransform(__n128 *a1)
{
  return a1[2];
}

uint64_t REGeomInstanceGetModelIndex(uint64_t a1)
{
  return *(unsigned int *)(a1 + 96);
}

void ThreadContext::process(ThreadContext *this, void *a2)
{
  unint64_t v2;
  uint64_t v3;
  uint64_t v5;
  re::FileStreamReader *v6;
  int v7;
  char *v9;
  std::string *v10;
  int v11;
  uint64_t v12;
  Compression *v13;
  int v14;
  int v15;
  re::FileStreamReader *v16;
  std::string *v17;
  char v18;
  int v19;
  unint64_t *v20;
  unint64_t v21;
  std::string *v22;
  int v23;
  int v24;
  unint64_t *v25;
  unint64_t v26;
  std::string v27;

  *((_BYTE *)this + 24) = 1;
  v2 = *((_QWORD *)this + 2);
  v3 = *(_QWORD *)this;
  while (v2 < *(_QWORD *)(*(_QWORD *)this + 48))
  {
    v5 = *(_QWORD *)(v3 + 24);
    v6 = (re::FileStreamReader *)(v5 + 40 * v2);
    memset(&v27, 0, sizeof(v27));
    v7 = *((_DWORD *)v6 + 6);
    if (*(_DWORD *)(v3 + 56) == 1)
    {
      if (v7 == 1 || *(_DWORD *)(v5 + 40 * v2 + 28) == 0)
      {
LABEL_29:
        v19 = 4;
        goto LABEL_30;
      }
      std::string::operator=(&v27, (const std::string *)(v5 + 40 * v2));
      std::string::append(&v27, ".arz");
    }
    else
    {
      if (!v7)
        goto LABEL_29;
      std::string::operator=(&v27, (const std::string *)(v5 + 40 * v2));
      v9 = (char *)&v27 + HIBYTE(v27.__r_.__value_.__r.__words[2]);
      if ((v27.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v10 = &v27;
      else
        v10 = (std::string *)v27.__r_.__value_.__r.__words[0];
      if ((v27.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
        v9 = (char *)(v27.__r_.__value_.__r.__words[0] + v27.__r_.__value_.__l.__size_);
      std::string::erase(&v27, v9 - (char *)v10 - 4, 4uLL);
    }
    v11 = *(_DWORD *)(v5 + 40 * v2 + 28);
    if (qword_254123F58)
    {
      v12 = 120;
      if (v11 == 1)
        v12 = 112;
      if (!v11)
        v12 = 104;
      ++*(_QWORD *)&_MergedGlobals_507[v12];
    }
    v13 = (Compression *)*((_QWORD *)this + 1);
    v14 = *(_DWORD *)(*(_QWORD *)this + 56);
    v15 = *((char *)v6 + 23);
    v16 = (re::FileStreamReader *)(v5 + 40 * v2);
    if (v14 == 1)
    {
      if (v15 < 0)
        v16 = *(re::FileStreamReader **)v6;
      if ((v27.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v17 = &v27;
      else
        v17 = (std::string *)v27.__r_.__value_.__r.__words[0];
      v18 = RECompressionInit(v13, 1, *(_DWORD *)(*(_QWORD *)this + 60), v11, v16, (re::FileStreamWriter *)v17);
      *((_BYTE *)this + 24) = v18;
      if ((v18 & 1) == 0)
        goto LABEL_43;
    }
    else
    {
      if (v15 < 0)
        v16 = *(re::FileStreamReader **)v6;
      if ((v27.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v22 = &v27;
      else
        v22 = (std::string *)v27.__r_.__value_.__r.__words[0];
      v23 = RECompressionInit(v13, v14, *(_DWORD *)(v5 + 40 * v2 + 32), v11, v16, (re::FileStreamWriter *)v22);
      *((_BYTE *)this + 24) = v23;
      if (!v23)
      {
LABEL_43:
        v19 = 2;
        goto LABEL_44;
      }
    }
    *((_BYTE *)this + 24) = RECompressionProcess(*((_QWORD *)this + 1), 0, 0);
    RECompressionDeinit(*((Compression **)this + 1));
    if (!*((_BYTE *)this + 24))
      goto LABEL_43;
    if (*((char *)v6 + 23) < 0)
      v6 = *(re::FileStreamReader **)v6;
    v24 = unlink((const char *)v6);
    *((_BYTE *)this + 24) = v24 == 0;
    if (v24)
      goto LABEL_43;
    v3 = *(_QWORD *)this;
    if (*(_QWORD *)(*(_QWORD *)this + 216))
    {
      std::mutex::lock((std::mutex *)(v3 + 88));
      objc_msgSend(*(id *)(*(_QWORD *)this + 216), "setCompletedUnitCount:", objc_msgSend(*(id *)(*(_QWORD *)this + 216), "completedUnitCount") + 1);
      std::mutex::unlock((std::mutex *)(*(_QWORD *)this + 88));
      if ((objc_msgSend(*(id *)(*(_QWORD *)this + 216), "isCancelled") & 1) != 0)
        goto LABEL_43;
      v19 = 0;
      v3 = *(_QWORD *)this;
    }
    else
    {
      v19 = 0;
    }
LABEL_30:
    v20 = (unint64_t *)(v3 + 64);
    do
      v21 = __ldaxr(v20);
    while (__stlxr(v21 + 1, v20));
LABEL_44:
    if (SHIBYTE(v27.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v27.__r_.__value_.__l.__data_);
    if ((v19 | 4) != 4)
    {
      v3 = *(_QWORD *)this;
      break;
    }
    ++v2;
    v3 = *(_QWORD *)this;
  }
  v25 = (unint64_t *)(v3 + 72);
  do
    v26 = __ldaxr(v25);
  while (__stlxr(v26 + 1, v25));
}

double _REArchivalStatsCreate(re *a1)
{
  uint64_t *v1;
  _OWORD *v2;
  double result;

  v1 = re::globalAllocators(a1);
  v2 = (_OWORD *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v1[2] + 32))(v1[2], 48, 8);
  result = 0.0;
  *v2 = 0u;
  v2[1] = 0u;
  v2[2] = 0u;
  return result;
}

re *_REArchivalStatsDelete(re *result)
{
  re *v1;
  uint64_t *v2;

  if (result)
  {
    v1 = result;
    v2 = re::globalAllocators(result);
    return (re *)(*(uint64_t (**)(uint64_t, re *))(*(_QWORD *)v2[2] + 40))(v2[2], v1);
  }
  return result;
}

uint64_t _REArchivalStatsGetSourceSize(uint64_t a1)
{
  return *(_QWORD *)a1;
}

uint64_t _REArchivalStatsGetDestinationSize(uint64_t a1)
{
  return *(_QWORD *)(a1 + 8);
}

double _REArchivalStatsGetRatio(uint64_t a1)
{
  return *(double *)(a1 + 16);
}

double _REArchivalStatsGetArchivalMilliseconds(uint64_t a1)
{
  return *(double *)(a1 + 24);
}

uint64_t _REArchivalStatsGetCompressionStreamCount(uint64_t a1)
{
  return *(unsigned int *)(a1 + 32);
}

double _REArchivalStatsGetCompressionMilliseconds(uint64_t a1)
{
  return *(double *)(a1 + 40);
}

uint64_t _REArchiveOperationCreateWithURL(void *a1)
{
  uint64_t v2;
  id v3;

  v2 = operator new();
  v3 = a1;
  *(_QWORD *)v2 = 0;
  *(_BYTE *)(v2 + 8) = 0;
  *(_QWORD *)(v2 + 24) = v3;
  *(_WORD *)(v2 + 32) = 256;
  return v2;
}

BOOL _REArchiveOperationSetEnvelopeVersion(uint64_t a1, int a2)
{
  unsigned int v3;
  NSObject *v4;
  _DWORD v6[2];
  uint64_t v7;

  v7 = *MEMORY[0x24BDAC8D0];
  v3 = a2 - 1;
  if ((a2 - 1) > 1)
  {
    if (CoreRELog::onceToken != -1)
      dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
    v4 = (id)CoreRELog::log;
    if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
    {
      v6[0] = 67109120;
      v6[1] = a2;
      _os_log_error_impl(&dword_224FE9000, v4, OS_LOG_TYPE_ERROR, "%u is not a valid REArchiveEnvelopeVersion enum value.", (uint8_t *)v6, 8u);
    }

  }
  else
  {
    *(_BYTE *)(a1 + 33) = a2;
  }
  return v3 < 2;
}

uint64_t _REArchiveOperationSetArchiveCompressionLevel(uint64_t result, uint64_t a2)
{
  if (!*(_BYTE *)(result + 8))
    *(_BYTE *)(result + 8) = 1;
  *(_QWORD *)(result + 16) = a2;
  return result;
}

uint64_t _REArchiveOperationSetStreamCompression(uint64_t result, char a2)
{
  *(_BYTE *)(result + 32) = a2;
  return result;
}

BOOL _REArchiveOperationArchiveToURL(uint64_t a1, void *a2)
{
  return archiveOperationArchiveToURL(a1, a2, 0);
}

BOOL archiveOperationArchiveToURL(uint64_t a1, void *a2, uint64_t a3)
{
  id v6;
  char *v7;
  id v8;
  char *v9;
  uint64_t v10;
  id v11;

  objc_msgSend(*(id *)(a1 + 24), "path");
  v6 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue());
  v7 = (char *)objc_msgSend(v6, "UTF8String");

  objc_msgSend(a2, "path");
  v8 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue());
  v9 = (char *)objc_msgSend(v8, "UTF8String");

  if (*(_QWORD *)a1)
  {
    if (*(_BYTE *)(a1 + 32))
      v10 = 2;
    else
      v10 = 1;
    objc_msgSend(*(id *)a1, "setTotalUnitCount:", v10);
    objc_msgSend(*(id *)a1, "setCompletedUnitCount:", 0);
    v11 = *(id *)a1;
  }
  else
  {
    v11 = 0;
  }
  return archiveInternal(v7, v9, *(unsigned __int8 *)(a1 + 33), v11, a3);
}

uint64_t _REArchiveOperationUnarchiveToURL(uint64_t a1, void *a2)
{
  return archiveOperationUnarchiveToURL(a1, a2, 0);
}

uint64_t archiveOperationUnarchiveToURL(uint64_t a1, void *a2, uint64_t a3)
{
  id v6;
  char *v7;
  id v8;
  re *v9;
  int v10;
  unsigned __int8 v12[8];
  uint64_t v13;

  objc_msgSend(*(id *)(a1 + 24), "path");
  v6 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue());
  v7 = (char *)objc_msgSend(v6, "UTF8String");

  objc_msgSend(a2, "path");
  v8 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue());
  v9 = (re *)objc_msgSend(v8, "UTF8String");

  if (*(_QWORD *)a1)
  {
    objc_msgSend(*(id *)a1, "setTotalUnitCount:", 0);
    objc_msgSend(*(id *)a1, "setCompletedUnitCount:", 0);
  }
  v10 = *(unsigned __int8 *)(a1 + 32);
  v12[0] = *(_BYTE *)(a1 + 8);
  if (v12[0])
    v13 = *(_QWORD *)(a1 + 16);
  return unarchiveInternal(v7, v9, v10 != 0, v12, *(void **)a1, a3);
}

BOOL REArchivePackage(char *a1, char *a2)
{
  return archiveInternal(a1, a2, 1, 0, 0);
}

BOOL archiveInternal(char *a1, char *a2, int a3, void *a4, uint64_t a5)
{
  id v9;
  _BOOL8 v10;
  NSObject *v11;
  int v13;
  char *v14;
  uint64_t v15;

  v15 = *MEMORY[0x24BDAC8D0];
  v9 = a4;
  qword_254123F58 = a5;
  if (a5)
  {
    _MergedGlobals_507 = 0;
    qword_254123F60 = (uint64_t)a1;
    qword_254123F68 = (uint64_t)a2;
    qword_254123F78 = 0;
    ftw(a1, (int (__cdecl *)(const char *, const stat *, int))ArchiveStats::GetDirectoryEntrySize, 1);
    qword_254123F70 = qword_254123F78;
  }
  v10 = RERealityArchiveArchiveFromDirectoryWithEnvelope(a1, a2, a3);
  ArchiveStats::Package::Stop((ArchiveStats::Package *)v10);
  if (!v10)
  {
    if (CoreRELog::onceToken != -1)
      dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
    v11 = (id)CoreRELog::log;
    if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR))
    {
      v13 = 136315138;
      v14 = a2;
      _os_log_error_impl(&dword_224FE9000, v11, OS_LOG_TYPE_ERROR, "Error archiving file: %s", (uint8_t *)&v13, 0xCu);
    }

  }
  return v10;
}

BOOL _REArchivePackageWithProfiling(char *a1, char *a2, uint64_t a3)
{
  return archiveInternal(a1, a2, 1, 0, a3);
}

uint64_t REUnarchivePackage(char *a1, re *a2)
{
  unsigned __int8 v3[16];

  v3[0] = 0;
  return unarchiveInternal(a1, a2, 1, v3, 0, 0);
}

uint64_t unarchiveInternal(char *a1, re *a2, int a3, unsigned __int8 *a4, void *a5, uint64_t a6)
{
  void *v7;
  id v12;
  re::RealityArchive *v13;
  re::RealityArchive *v14;
  BOOL v15;
  ArchiveStats::Package *v16;
  id v17;
  void *v18;
  std::string::size_type v19;
  void *v20;
  void *v21;
  void *v22;
  void *v23;
  void *v24;
  id v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  void *v31;
  int v32;
  ArchiveStats::Package *v33;
  id v34;
  std::string *v35;
  SharedContext *v36;
  uint64_t v37;
  id v38;
  void *v39;
  uint64_t v40;
  _anonymous_namespace_ *global_queue;
  const char *v42;
  DIR *v43;
  DIR *v44;
  dirent *v45;
  const char *d_name;
  int v47;
  size_t v48;
  size_t v49;
  unint64_t v50;
  size_t v51;
  void *v52;
  uint64_t v53;
  uint64_t v54;
  void **v55;
  const char *v56;
  char *v57;
  stat *v58;
  char *v59;
  char *v60;
  NSObject *v61;
  unint64_t v62;
  char *v63;
  __int128 v64;
  void **v65;
  unint64_t v66;
  unint64_t v67;
  unint64_t v68;
  unint64_t v69;
  char *v70;
  uint64_t v71;
  char *v72;
  char *v73;
  char *v74;
  char *v75;
  uint64_t v76;
  std::string *v77;
  const std::string::value_type **v78;
  __int128 v79;
  char *v80;
  uint64_t v81;
  void **v82;
  stat *v83;
  NSObject *v84;
  const char *v85;
  stat *v86;
  NSObject *v87;
  uint64_t v88;
  void *v89;
  SharedContext *v90;
  SharedContext *v91;
  SharedContext *v92;
  uint64_t v93;
  void *v94;
  SharedContext *v95;
  SharedContext *v96;
  SharedContext *v97;
  uint64_t v98;
  SharedContext *v99;
  uint64_t v100;
  SharedContext *v101;
  uint64_t v102;
  SharedContext *v103;
  dispatch_queue_t *v104;
  SharedContext *v105;
  unsigned int *v106;
  uint64_t v109;
  uint64_t v110;
  uint64_t i;
  uint64_t v112;
  void *v113;
  ArchiveStats::Package *v114;
  uint64_t v116;
  void *v117;
  id v118;
  id v119;
  int v120;
  void *__p[2];
  __int128 v122;
  __int128 v123;
  __int128 v124;
  stat v125;
  __int128 buf;
  const __CFString *v127;
  std::string __str;
  uint64_t v129;

  v7 = a5;
  v129 = *MEMORY[0x24BDAC8D0];
  v12 = a5;
  qword_254123F58 = a6;
  if (a6)
  {
    _MergedGlobals_507[0] = 1;
    qword_254123F60 = (uint64_t)a1;
    qword_254123F68 = (uint64_t)a2;
    stat(a1, &v125);
    qword_254123F70 = v125.st_size;
  }
  v13 = (re::RealityArchive *)RERealityArchiveCreateByOpeningFileAtPath((re::RealityArchive *)a1, 0);
  if (v13)
  {
    v14 = v13;
    v15 = RERealityArchiveUnarchiveToDirectory(v13, a2);

    ArchiveStats::Package::Stop(v16);
    if (v15)
      goto LABEL_143;
    goto LABEL_123;
  }
  v120 = *a4;
  if (*a4)
    v116 = *((_QWORD *)a4 + 1);
  v17 = v12;
  if (qword_254123F58)
  {
    qword_254123F80 = mach_absolute_time();
    qword_254123F88 = 0;
  }
  BOMCopierNew();
  v18 = (void *)MEMORY[0x24BDBCED8];
  v19 = *MEMORY[0x24BDBD270];
  *(_QWORD *)&buf = CFSTR("copyResources");
  *((_QWORD *)&buf + 1) = CFSTR("extractPKZip");
  __str.__r_.__value_.__r.__words[0] = v19;
  __str.__r_.__value_.__l.__size_ = v19;
  v127 = CFSTR("sequesterResources");
  __str.__r_.__value_.__r.__words[2] = v19;
  objc_msgSend(MEMORY[0x24BDBCE70], "dictionaryWithObjects:forKeys:count:", &__str, &buf, 3);
  v20 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v18, "dictionaryWithDictionary:", v20);
  v21 = (void *)objc_claimAutoreleasedReturnValue();

  v119 = v12;
  if (v17)
  {
    v117 = v7;
    objc_msgSend(MEMORY[0x24BDD1580], "defaultManager");
    v22 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x24BDD17C8], "stringWithUTF8String:", a1);
    v23 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v22, "enumeratorAtPath:", v23);
    v24 = (void *)objc_claimAutoreleasedReturnValue();

    v123 = 0u;
    v124 = 0u;
    *(_OWORD *)__p = 0u;
    v122 = 0u;
    v25 = v24;
    v26 = objc_msgSend(v25, "countByEnumeratingWithState:objects:count:", __p, &v125, 16);
    if (v26)
    {
      v27 = v26;
      v28 = 0;
      v29 = *(_QWORD *)v122;
      do
      {
        v30 = v27;
        do
        {
          if (*(_QWORD *)v122 != v29)
            objc_enumerationMutation(v25);
          --v30;
        }
        while (v30);
        v28 += v27;
        v27 = objc_msgSend(v25, "countByEnumeratingWithState:objects:count:", __p, &v125, 16);
      }
      while (v27);
    }
    else
    {
      v28 = 0;
    }

    objc_msgSend(v17, "setTotalUnitCount:", objc_msgSend(v17, "totalUnitCount") + v28);
    BOMCopierSetUserData();
    BOMCopierSetCopyFileFinishedHandler();

    v7 = v117;
    v12 = v119;
  }
  if (v120)
  {
    objc_msgSend(MEMORY[0x24BDD16E0], "numberWithInteger:", v116);
    v31 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v21, "setValue:forKey:", v31, CFSTR("zlibCompressionLevel"));

  }
  v32 = BOMCopierCopyWithOptions();
  BOMCopierFree();
  if (qword_254123F58)
    qword_254123F88 = mach_absolute_time();

  if (!v32 && a3)
  {
    v34 = v17;
    v35 = (std::string *)std::string::basic_string[abi:nn180100]<0>(&__str, (char *)a2);
    v36 = (SharedContext *)std::string::append(v35, "/assets/");
    if (qword_254123F58)
    {
      qword_254123FA0 = 0x400000000;
      qword_254123FB0 = 0;
      *(_QWORD *)&dword_254123FB8 = 0;
      qword_254123FA8 = 0;
      v36 = (SharedContext *)mach_absolute_time();
      qword_254123F90 = (uint64_t)v36;
      qword_254123F98 = 0;
    }
    v37 = SharedContext::instance(v36);
    v38 = v34;
    std::mutex::lock((std::mutex *)(v37 + 152));
    v39 = *(void **)(qword_254123F50 + 216);
    *(_QWORD *)(qword_254123F50 + 216) = 0;

    v40 = qword_254123F50;
    atomic_store(0, (unint64_t *)(qword_254123F50 + 64));
    atomic_store(0, (unint64_t *)(v40 + 72));
    atomic_store(0, (unsigned int *)(v40 + 80));
    global_queue = (_anonymous_namespace_ *)dispatch_get_global_queue(0, 0);
    *(_QWORD *)(v40 + 232) = global_queue;
    *(_QWORD *)(v40 + 304) = v40;
    *(_QWORD *)(v40 + 320) = 0;
    *(_QWORD *)(v40 + 312) = RECompressionCreate(global_queue);
    std::string::operator=((std::string *)v37, &__str);
    *(_QWORD *)(v37 + 56) = 0x400000000;
    objc_storeStrong((id *)(v37 + 216), v7);
    if (*(char *)(v37 + 23) >= 0)
      v42 = (const char *)v37;
    else
      v42 = *(const char **)v37;
    v43 = opendir(v42);
    if (v43)
    {
      v44 = v43;
      v118 = v38;
      v45 = readdir(v43);
      if (v45)
      {
        while (1)
        {
          d_name = v45->d_name;
          if (strcmp(v45->d_name, "."))
          {
            if (strcmp(d_name, ".."))
              break;
          }
LABEL_108:
          v45 = readdir(v44);
          if (!v45)
            goto LABEL_128;
        }
        v47 = *(char *)(v37 + 23);
        if (v47 >= 0)
          v48 = *(unsigned __int8 *)(v37 + 23);
        else
          v48 = *(_QWORD *)(v37 + 8);
        v49 = strlen(d_name);
        v50 = v48 + v49;
        if (v48 + v49 >= 0x7FFFFFFFFFFFFFF8)
LABEL_145:
          abort();
        v51 = v49;
        if (v50 > 0x16)
        {
          v53 = (v50 & 0xFFFFFFFFFFFFFFF8) + 8;
          if ((v50 | 7) != 0x17)
            v53 = v50 | 7;
          v54 = v53 + 1;
          v52 = operator new(v53 + 1);
          __p[1] = (void *)v50;
          *(_QWORD *)&v122 = v54 | 0x8000000000000000;
          __p[0] = v52;
          v50 = (v54 | 0x8000000000000000) >> 56;
        }
        else
        {
          v52 = 0;
          __p[1] = 0;
          *(_QWORD *)&v122 = 0;
          __p[0] = 0;
          BYTE7(v122) = v50;
        }
        if ((v50 & 0x80u) == 0)
          v55 = __p;
        else
          v55 = (void **)v52;
        if (v48)
        {
          if (v47 >= 0)
            v56 = (const char *)v37;
          else
            v56 = *(const char **)v37;
          memmove(v55, v56, v48);
        }
        v57 = (char *)v55 + v48;
        if (v51)
          memmove(v57, d_name, v51);
        v57[v51] = 0;
        if (SBYTE7(v122) < 0)
        {
          std::string::__init_copy_ctor_external((std::string *)&v125, (const std::string::value_type *)__p[0], (std::string::size_type)__p[1]);
        }
        else
        {
          *(_OWORD *)&v125.st_dev = *(_OWORD *)__p;
          *(_QWORD *)&v125.st_uid = v122;
        }
        if ((v125.st_gid & 0x80000000) == 0)
          v58 = &v125;
        else
          v58 = *(stat **)&v125.st_dev;
        RECompressionQuery((const char *)v58, &v125.st_rdev, (int *)&v125.st_atimespec, &v125.st_rdev + 1, 0, 0);
        if ((v125.st_gid & 0x80000000) == 0)
          v59 = (char *)&v125;
        else
          v59 = *(char **)&v125.st_dev;
        v60 = strrchr(v59, 46);
        if (v60 && !strcmp(v60, ".arz"))
        {
          if (v125.st_rdev)
            goto LABEL_72;
          if (CoreRELog::onceToken != -1)
            dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
          v61 = (id)CoreRELog::log;
          if (!os_log_type_enabled(v61, OS_LOG_TYPE_ERROR))
            goto LABEL_70;
          if ((v125.st_gid & 0x80000000) == 0)
            v83 = &v125;
          else
            v83 = *(stat **)&v125.st_dev;
          LODWORD(buf) = 136315138;
          *(_QWORD *)((char *)&buf + 4) = v83;
          v84 = v61;
          v85 = "Unexpected .arz extension on file which does not appear to be compressed: %s";
        }
        else
        {
          if (v125.st_rdev != 1)
          {
LABEL_72:
            v63 = *(char **)(v37 + 32);
            v62 = *(_QWORD *)(v37 + 40);
            if ((unint64_t)v63 >= v62)
            {
              v65 = *(void ***)(v37 + 24);
              v66 = 0xCCCCCCCCCCCCCCCDLL * ((v63 - (char *)v65) >> 3);
              v67 = v66 + 1;
              if (v66 + 1 > 0x666666666666666)
                goto LABEL_145;
              v68 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v62 - (_QWORD)v65) >> 3);
              if (2 * v68 > v67)
                v67 = 2 * v68;
              if (v68 >= 0x333333333333333)
                v69 = 0x666666666666666;
              else
                v69 = v67;
              if (v69)
              {
                if (v69 > 0x666666666666666)
                  std::__throw_bad_array_new_length[abi:nn180100]();
                v70 = (char *)operator new(40 * v69);
              }
              else
              {
                v70 = 0;
              }
              v73 = &v70[8 * ((v63 - (char *)v65) >> 3)];
              if (SHIBYTE(v125.st_gid) < 0)
              {
                std::string::__init_copy_ctor_external((std::string *)&v70[8 * ((v63 - (char *)v65) >> 3)], *(const std::string::value_type **)&v125.st_dev, v125.st_ino);
                v65 = *(void ***)(v37 + 24);
                v63 = *(char **)(v37 + 32);
              }
              else
              {
                *(_OWORD *)v73 = *(_OWORD *)&v125.st_dev;
                *((_QWORD *)v73 + 2) = *(_QWORD *)&v125.st_uid;
              }
              v74 = &v70[40 * v69];
              v75 = &v70[40 * v66];
              *((_QWORD *)v75 + 3) = *(_QWORD *)&v125.st_rdev;
              *((_DWORD *)v75 + 8) = v125.st_atimespec.tv_sec;
              v72 = v73 + 40;
              if (v63 == (char *)v65)
              {
                *(_QWORD *)(v37 + 24) = v73;
                *(_QWORD *)(v37 + 32) = v72;
                *(_QWORD *)(v37 + 40) = v74;
              }
              else
              {
                v76 = 0;
                do
                {
                  v77 = (std::string *)&v73[v76 - 40];
                  v78 = (const std::string::value_type **)&v63[v76 - 40];
                  if (v63[v76 - 17] < 0)
                  {
                    std::string::__init_copy_ctor_external(v77, *v78, *(_QWORD *)&v63[v76 - 32]);
                  }
                  else
                  {
                    v79 = *(_OWORD *)v78;
                    *(_QWORD *)&v73[v76 - 24] = *(_QWORD *)&v63[v76 - 24];
                    *(_OWORD *)&v77->__r_.__value_.__l.__data_ = v79;
                  }
                  v80 = &v73[v76];
                  v81 = *(_QWORD *)&v63[v76 - 16];
                  *((_DWORD *)v80 - 2) = *(_DWORD *)&v63[v76 - 8];
                  *((_QWORD *)v80 - 2) = v81;
                  v76 -= 40;
                }
                while (&v63[v76] != (char *)v65);
                v65 = *(void ***)(v37 + 24);
                v82 = *(void ***)(v37 + 32);
                *(_QWORD *)(v37 + 24) = &v73[v76];
                *(_QWORD *)(v37 + 32) = v72;
                *(_QWORD *)(v37 + 40) = v74;
                while (v82 != v65)
                {
                  if (*((char *)v82 - 17) < 0)
                    operator delete(*(v82 - 5));
                  v82 -= 5;
                }
              }
              if (v65)
                operator delete(v65);
            }
            else
            {
              if (SHIBYTE(v125.st_gid) < 0)
              {
                std::string::__init_copy_ctor_external(*(std::string **)(v37 + 32), *(const std::string::value_type **)&v125.st_dev, v125.st_ino);
              }
              else
              {
                v64 = *(_OWORD *)&v125.st_dev;
                *((_QWORD *)v63 + 2) = *(_QWORD *)&v125.st_uid;
                *(_OWORD *)v63 = v64;
              }
              v71 = *(_QWORD *)&v125.st_rdev;
              *((_DWORD *)v63 + 8) = v125.st_atimespec.tv_sec;
              *((_QWORD *)v63 + 3) = v71;
              v72 = v63 + 40;
            }
            *(_QWORD *)(v37 + 32) = v72;
            if (SHIBYTE(v125.st_gid) < 0)
              operator delete(*(void **)&v125.st_dev);
            if (SBYTE7(v122) < 0)
              operator delete(__p[0]);
            goto LABEL_108;
          }
          if (CoreRELog::onceToken != -1)
            dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
          v61 = (id)CoreRELog::log;
          if (!os_log_type_enabled(v61, OS_LOG_TYPE_ERROR))
          {
LABEL_70:

            goto LABEL_72;
          }
          if ((v125.st_gid & 0x80000000) == 0)
            v86 = &v125;
          else
            v86 = *(stat **)&v125.st_dev;
          LODWORD(buf) = 136315138;
          *(_QWORD *)((char *)&buf + 4) = v86;
          v84 = v61;
          v85 = "Missing .arz extension on file which appears to be compressed: %s";
        }
        _os_log_error_impl(&dword_224FE9000, v84, OS_LOG_TYPE_ERROR, v85, (uint8_t *)&buf, 0xCu);
        goto LABEL_70;
      }
LABEL_128:
      closedir(v44);
      v38 = v118;
      v12 = v119;
    }
    *(_QWORD *)(v37 + 48) = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*(_QWORD *)(v37 + 32) - *(_QWORD *)(v37 + 24)) >> 3);
    v89 = *(void **)(v37 + 216);
    if (v89)
      objc_msgSend(v89, "setTotalUnitCount:", *(_QWORD *)(v37 + 48) + objc_msgSend(*(id *)(v37 + 216), "totalUnitCount"));

    v91 = (SharedContext *)SharedContext::instance(v90);
    v92 = (SharedContext *)SharedContext::instance(v91);
    v93 = SharedContext::instance(v92) + 304;
    v94 = (void *)*((_QWORD *)v92 + 32);
    *((_QWORD *)v92 + 32) = 0;

    *((_QWORD *)v92 + 30) = re::Job::init(void (*)(void *),void *)::{lambda(re::Job&)#1}::__invoke;
    *((_QWORD *)v92 + 34) = ThreadContext::process;
    *((_QWORD *)v92 + 35) = v93;
    v96 = (SharedContext *)SharedContext::instance(v95);
    v97 = (SharedContext *)SharedContext::instance(v96);
    v98 = (uint64_t)v97 + 224;
    v99 = (SharedContext *)SharedContext::instance(v97);
    v100 = (uint64_t)v99 + 240;
    v101 = (SharedContext *)SharedContext::instance(v99);
    v102 = SharedContext::instance(v101);
    DispatchJobManager::runAsync(v98, v100, 1u, (unsigned int *)(v102 + 80));
    v104 = (dispatch_queue_t *)SharedContext::instance(v103);
    v105 = (SharedContext *)SharedContext::instance((SharedContext *)v104);
    v106 = (unsigned int *)((char *)v105 + 80);
    while (atomic_load(v106))
      dispatch_sync(v104[29], &__block_literal_global_44);
    v109 = SharedContext::instance(v105);
    v110 = *(_QWORD *)(v109 + 24);
    for (i = *(_QWORD *)(v109 + 32); i != v110; i -= 40)
    {
      if (*(char *)(i - 17) < 0)
        operator delete(*(void **)(i - 40));
    }
    *(_QWORD *)(v109 + 32) = v110;
    v112 = qword_254123F50;
    RECompressionDestroy(*(_anonymous_namespace_ **)(qword_254123F50 + 312));
    *(_QWORD *)(v112 + 312) = 0;
    v113 = *(void **)(qword_254123F50 + 216);
    *(_QWORD *)(qword_254123F50 + 216) = 0;

    std::mutex::unlock((std::mutex *)(v109 + 152));
    if (qword_254123F58)
    {
      v114 = (ArchiveStats::Package *)mach_absolute_time();
      qword_254123F98 = (uint64_t)v114;
    }
    if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__str.__r_.__value_.__l.__data_);
    ArchiveStats::Package::Stop(v114);
    goto LABEL_143;
  }
  ArchiveStats::Package::Stop(v33);
  if (!v32)
  {
LABEL_143:
    v88 = 1;
    goto LABEL_144;
  }
LABEL_123:
  if (CoreRELog::onceToken != -1)
    dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
  v87 = (id)CoreRELog::log;
  if (os_log_type_enabled(v87, OS_LOG_TYPE_ERROR))
  {
    v125.st_dev = 136315138;
    *(_QWORD *)&v125.st_mode = a1;
    _os_log_error_impl(&dword_224FE9000, v87, OS_LOG_TYPE_ERROR, "Error unarchiving file: %s", (uint8_t *)&v125, 0xCu);
  }

  v88 = 0;
LABEL_144:

  return v88;
}

uint64_t _REUnarchivePackageWithProfiling(char *a1, re *a2, uint64_t a3)
{
  unsigned __int8 v4[16];

  v4[0] = 0;
  return unarchiveInternal(a1, a2, 1, v4, 0, a3);
}

uint64_t REArchiveGetDefaultEnvelopeVersion()
{
  return 1;
}

void ArchiveStats::Package::Stop(ArchiveStats::Package *this)
{
  off_t st_size;
  uint64_t v2;
  uint64_t v3;
  double v4;
  double v5;
  uint64_t v6;
  uint64_t v7;
  double v8;
  unint64_t v9;
  unint64_t v10;
  double v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  double v16;
  stat v17;

  if (qword_254123F58)
  {
    if (_MergedGlobals_507 == 1)
    {
      qword_254123F78 = 0;
      ftw((const char *)qword_254123F68, (int (__cdecl *)(const char *, const stat *, int))ArchiveStats::GetDirectoryEntrySize, 1);
      st_size = qword_254123F78;
    }
    else
    {
      stat((const char *)qword_254123F68, &v17);
      st_size = v17.st_size;
    }
    v2 = qword_254123F58;
    if (qword_254123F58)
    {
      v3 = qword_254123F70;
      v4 = (double)qword_254123F70;
      v5 = (double)st_size;
      if (!st_size)
        v5 = 1.0;
      *(_QWORD *)(qword_254123F58 + 24) = 0;
      *(_QWORD *)(v2 + 32) = 0;
      *(_QWORD *)(v2 + 40) = 0;
      *(_QWORD *)v2 = v3;
      *(_QWORD *)(v2 + 8) = st_size;
      *(double *)(v2 + 16) = v4 / v5;
      v7 = qword_254123F80;
      v6 = qword_254123F88;
      v8 = *(double *)&re::convertMachTimeToNanoSecs(unsigned long long)::tmscale;
      if (*(double *)&re::convertMachTimeToNanoSecs(unsigned long long)::tmscale < 0.0)
      {
        if (mach_timebase_info((mach_timebase_info_t)&v17))
        {
          v8 = *(double *)&re::convertMachTimeToNanoSecs(unsigned long long)::tmscale;
          v11 = NAN;
          goto LABEL_13;
        }
        LODWORD(v9) = v17.st_dev;
        LODWORD(v10) = *(_DWORD *)&v17.st_mode;
        v8 = (double)v9 / (double)v10;
        re::convertMachTimeToNanoSecs(unsigned long long)::tmscale = *(_QWORD *)&v8;
      }
      v11 = v8 * (double)(unint64_t)(v6 - v7);
LABEL_13:
      *(double *)(v2 + 24) = v11 / 1000000.0;
      *(_DWORD *)(v2 + 32) = qword_254123FB0 + qword_254123FA8 + dword_254123FB8;
      v13 = qword_254123F90;
      v12 = qword_254123F98;
      if (v8 < 0.0)
      {
        if (mach_timebase_info((mach_timebase_info_t)&v17))
        {
          v16 = NAN;
LABEL_18:
          *(double *)(v2 + 40) = v16 / 1000000.0;
          qword_254123F58 = 0;
          return;
        }
        LODWORD(v14) = v17.st_dev;
        LODWORD(v15) = *(_DWORD *)&v17.st_mode;
        v8 = (double)v14 / (double)v15;
        re::convertMachTimeToNanoSecs(unsigned long long)::tmscale = *(_QWORD *)&v8;
      }
      v16 = v8 * (double)(unint64_t)(v12 - v13);
      goto LABEL_18;
    }
  }
}

uint64_t ArchiveStats::GetDirectoryEntrySize(ArchiveStats *this, const char *a2, const stat *a3)
{
  qword_254123F78 += *((_QWORD *)a2 + 12);
  return 0;
}

void FileFinished()
{
  id v0;

  BOMCopierUserData();
  v0 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v0, "setCompletedUnitCount:", objc_msgSend(v0, "completedUnitCount") + 1);
  if (objc_msgSend(v0, "isCancelled"))
    BOMCopierCancelCopy();

}

uint64_t SharedContext::instance(SharedContext *this)
{
  unint64_t v1;
  double (**v3)(SharedContext *);
  double (*v4)(SharedContext *);

  v1 = atomic_load(&qword_254123F48);
  if (v1 != -1)
  {
    v3 = &v4;
    v4 = SharedContext::_init;
    std::__call_once(&qword_254123F48, &v3, (void (__cdecl *)(void *))std::__call_once_proxy[abi:nn180100]<std::tuple<void (&)(void)>>);
  }
  return qword_254123F50;
}

double SharedContext::_init(SharedContext *this)
{
  uint64_t v1;
  double result;

  result = 0.0;
  *(_OWORD *)v1 = 0u;
  *(_OWORD *)(v1 + 16) = 0u;
  *(_OWORD *)(v1 + 32) = 0u;
  *(_QWORD *)(v1 + 88) = 850045863;
  *(_OWORD *)(v1 + 96) = 0u;
  *(_OWORD *)(v1 + 112) = 0u;
  *(_OWORD *)(v1 + 128) = 0u;
  *(_QWORD *)(v1 + 144) = 0;
  *(_QWORD *)(v1 + 152) = 850045863;
  *(_OWORD *)(v1 + 160) = 0u;
  *(_OWORD *)(v1 + 176) = 0u;
  *(_OWORD *)(v1 + 192) = 0u;
  *(_OWORD *)(v1 + 208) = 0u;
  *(_QWORD *)(v1 + 224) = &off_24ED88F18;
  *(_OWORD *)(v1 + 232) = 0u;
  *(_OWORD *)(v1 + 248) = 0u;
  *(_QWORD *)(v1 + 264) = "Unnamed";
  *(_QWORD *)(v1 + 304) = 0;
  *(_QWORD *)(v1 + 312) = 0;
  *(_BYTE *)(v1 + 328) = 0;
  *(_QWORD *)(v1 + 320) = 0;
  qword_254123F50 = v1;
  return result;
}

uint64_t std::__call_once_proxy[abi:nn180100]<std::tuple<void (&)(void)>>(uint64_t (***a1)(void))
{
  return (**a1)();
}

uint64_t re::Job::init(void (*)(void *),void *)::{lambda(re::Job&)#1}::__invoke(uint64_t a1)
{
  uint64_t result;

  result = (*(uint64_t (**)(_QWORD))(a1 + 32))(*(_QWORD *)(a1 + 40));
  *(_QWORD *)a1 = 0;
  return result;
}

void *REMeshSceneComponentGetComponentType()
{
  if (re::ecs2::dispatchOnceInitECSComponents(void)::onceToken != -1)
    dispatch_once(&re::ecs2::dispatchOnceInitECSComponents(void)::onceToken, &__block_literal_global_13);
  return re::ecs2::ComponentImpl<re::ecs2::MeshSceneComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType;
}

char *REMeshSceneComponentCopyInstances(uint64_t a1)
{
  char *v2;
  char *v3;
  unint64_t v4;
  uint64_t v5;
  int *v6;
  int v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int *v11;
  int v12;
  uint64_t v13;
  unsigned int v14;
  uint64_t v15;
  _QWORD *v16;
  unint64_t v17;
  int v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unsigned int v24;
  unsigned int v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  int v29;
  int v30;
  uint64_t v31;
  uint64_t v32;
  int *v33;
  int v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  int v38;
  int v39;
  uint64_t v40;
  uint64_t v41;
  int *v42;
  int v43;
  uint64_t v44;
  uint64_t v45;
  unint64_t v46;
  _OWORD *v47;
  __int128 v48;
  __int128 v49;
  int v50;
  int v51;
  char *v53;
  int v54;
  _QWORD *v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  uint64_t v61;

  v61 = *MEMORY[0x24BDAC8D0];
  v2 = re::MeshInstanceCollection::make((re::MeshInstanceCollection *)3);
  v3 = v2;
  v4 = *(unsigned int *)(a1 + 64);
  if ((_DWORD)v4)
  {
    v5 = 0;
    v6 = (int *)(*(_QWORD *)(a1 + 48) + 8);
    while (1)
    {
      v7 = *v6;
      v6 += 8;
      if (v7 < 0)
        break;
      if (v4 == ++v5)
      {
        LODWORD(v5) = *(_DWORD *)(a1 + 64);
        break;
      }
    }
  }
  else
  {
    LODWORD(v5) = 0;
  }
  if ((_DWORD)v4 != (_DWORD)v5)
  {
    LODWORD(v8) = 0;
    v13 = v5;
    v55 = v2 + 8;
    v14 = *(_DWORD *)(a1 + 64);
    v53 = v2;
    while (1)
    {
      v15 = *(_QWORD *)(a1 + 48) + 32 * v13;
      v17 = *(_QWORD *)(v15 + 16);
      v16 = (_QWORD *)(v15 + 16);
      LODWORD(v56) = 0;
      v18 = *((_DWORD *)v16 - 1);
      LODWORD(v56) = v18;
      v19 = 0x94D049BB133111EBLL
          * ((0xBF58476D1CE4E5B9 * ((v17 >> 31) ^ (v17 >> 1))) ^ ((0xBF58476D1CE4E5B9 * ((v17 >> 31) ^ (v17 >> 1))) >> 27));
      v20 = v19 ^ (v19 >> 31);
      if (*v55)
      {
        v54 = v8;
        v8 = v4;
        v21 = v20 % *((unsigned int *)v3 + 8);
        v22 = *(unsigned int *)(*((_QWORD *)v3 + 2) + 4 * v21);
        if ((_DWORD)v22 != 0x7FFFFFFF)
        {
          v23 = *((_QWORD *)v3 + 3);
          while (!re::StringID::operator==((_QWORD *)(v23 + 32 * v22 + 8), v16))
          {
            v22 = *(_DWORD *)(v23 + 32 * v22) & 0x7FFFFFFF;
            if (v22 == 0x7FFFFFFF)
            {
              v3 = v53;
              goto LABEL_21;
            }
          }
          v4 = v8;
          v3 = v53;
          LODWORD(v8) = v54;
          goto LABEL_24;
        }
LABEL_21:
        v4 = v8;
        LODWORD(v8) = v54;
      }
      else
      {
        LODWORD(v21) = 0;
      }
      re::HashTable<re::StringID,unsigned int,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::addEmplace<unsigned int &>((uint64_t)v55, v21, v20, (StringID *)v16, &v56);
      ++*((_DWORD *)v3 + 12);
      v18 = v56;
      v14 = *(_DWORD *)(a1 + 64);
LABEL_24:
      if (v8 <= v18 + 1)
        v8 = (v18 + 1);
      else
        v8 = v8;
      if (v14 <= (int)v5 + 1)
        v24 = v5 + 1;
      else
        v24 = v14;
      while (1)
      {
        v13 = (v5 + 1);
        if (v24 - 1 == (_DWORD)v5)
          break;
        LODWORD(v5) = v5 + 1;
        v25 = v13;
        if ((*(_DWORD *)(*(_QWORD *)(a1 + 48) + 32 * v13 + 8) & 0x80000000) != 0)
          goto LABEL_34;
      }
      v25 = v24;
LABEL_34:
      LODWORD(v5) = v25;
      if ((_DWORD)v4 == v25)
        goto LABEL_9;
    }
  }
  v8 = 0;
LABEL_9:
  re::DynamicArray<re::StringID>::resize((uint64_t)(v3 + 56), v8);
  re::DynamicArray<re::StringID>::resize((uint64_t)(v3 + 96), v8);
  re::DynamicArray<re::GenericSRT<float>>::resize((_QWORD *)v3 + 17, v8);
  v9 = *(unsigned int *)(a1 + 64);
  if ((_DWORD)v9)
  {
    v10 = 0;
    v11 = (int *)(*(_QWORD *)(a1 + 48) + 8);
    while (1)
    {
      v12 = *v11;
      v11 += 8;
      if (v12 < 0)
        break;
      if (v9 == ++v10)
      {
        LODWORD(v10) = *(_DWORD *)(a1 + 64);
        break;
      }
    }
  }
  else
  {
    LODWORD(v10) = 0;
  }
  if ((_DWORD)v9 != (_DWORD)v10)
  {
    v26 = v10;
    while (1)
    {
      v27 = *(_QWORD *)(a1 + 48) + 32 * v26;
      v28 = *(unsigned int *)(v27 + 12);
      if (*((_QWORD *)v3 + 9) <= v28)
        break;
      re::StringID::operator=((unint64_t *)(*((_QWORD *)v3 + 11) + 16 * v28), (uint64_t *)(v27 + 16));
      if (*(_DWORD *)(a1 + 64) <= (v10 + 1))
        v29 = v10 + 1;
      else
        v29 = *(_DWORD *)(a1 + 64);
      while (1)
      {
        v26 = (v10 + 1);
        if (v29 - 1 == (_DWORD)v10)
          break;
        LODWORD(v10) = v10 + 1;
        v30 = v26;
        if ((*(_DWORD *)(*(_QWORD *)(a1 + 48) + 32 * v26 + 8) & 0x80000000) != 0)
          goto LABEL_48;
      }
      v30 = v29;
LABEL_48:
      LODWORD(v10) = v30;
      if ((_DWORD)v9 == v30)
        goto LABEL_49;
    }
    v59 = 0u;
    v60 = 0u;
    v57 = 0u;
    v58 = 0u;
    v56 = 0u;
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
    goto LABEL_85;
  }
LABEL_49:
  v31 = *(unsigned int *)(a1 + 112);
  if ((_DWORD)v31)
  {
    v32 = 0;
    v33 = (int *)(*(_QWORD *)(a1 + 96) + 8);
    while (1)
    {
      v34 = *v33;
      v33 += 8;
      if (v34 < 0)
        break;
      if (v31 == ++v32)
      {
        LODWORD(v32) = *(_DWORD *)(a1 + 112);
        break;
      }
    }
  }
  else
  {
    LODWORD(v32) = 0;
  }
  if ((_DWORD)v31 != (_DWORD)v32)
  {
    v35 = v32;
    while (1)
    {
      v36 = *(_QWORD *)(a1 + 96) + 32 * v35;
      v37 = *(unsigned int *)(v36 + 12);
      if (*((_QWORD *)v3 + 14) <= v37)
        break;
      re::StringID::operator=((unint64_t *)(*((_QWORD *)v3 + 16) + 16 * v37), (uint64_t *)(v36 + 16));
      if (*(_DWORD *)(a1 + 112) <= (v32 + 1))
        v38 = v32 + 1;
      else
        v38 = *(_DWORD *)(a1 + 112);
      while (1)
      {
        v35 = (v32 + 1);
        if (v38 - 1 == (_DWORD)v32)
          break;
        LODWORD(v32) = v32 + 1;
        v39 = v35;
        if ((*(_DWORD *)(*(_QWORD *)(a1 + 96) + 32 * v35 + 8) & 0x80000000) != 0)
          goto LABEL_65;
      }
      v39 = v38;
LABEL_65:
      LODWORD(v32) = v39;
      if ((_DWORD)v31 == v39)
        goto LABEL_66;
    }
LABEL_85:
    v59 = 0u;
    v60 = 0u;
    v57 = 0u;
    v58 = 0u;
    v56 = 0u;
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
    goto LABEL_86;
  }
LABEL_66:
  v40 = *(unsigned int *)(a1 + 160);
  if ((_DWORD)v40)
  {
    v41 = 0;
    v42 = (int *)(*(_QWORD *)(a1 + 144) + 8);
    while (1)
    {
      v43 = *v42;
      v42 += 16;
      if (v43 < 0)
        break;
      if (v40 == ++v41)
      {
        LODWORD(v41) = *(_DWORD *)(a1 + 160);
        break;
      }
    }
  }
  else
  {
    LODWORD(v41) = 0;
  }
  if ((_DWORD)v40 != (_DWORD)v41)
  {
    v44 = v41;
    while (1)
    {
      v45 = *(_QWORD *)(a1 + 144) + (v44 << 6);
      v46 = *(unsigned int *)(v45 + 12);
      if (*((_QWORD *)v3 + 19) <= v46)
        break;
      v47 = (_OWORD *)(*((_QWORD *)v3 + 21) + 48 * v46);
      v48 = *(_OWORD *)(v45 + 16);
      v49 = *(_OWORD *)(v45 + 48);
      v47[1] = *(_OWORD *)(v45 + 32);
      v47[2] = v49;
      *v47 = v48;
      if (*(_DWORD *)(a1 + 160) <= (v41 + 1))
        v50 = v41 + 1;
      else
        v50 = *(_DWORD *)(a1 + 160);
      while (1)
      {
        v44 = (v41 + 1);
        if (v50 - 1 == (_DWORD)v41)
          break;
        LODWORD(v41) = v41 + 1;
        v51 = v44;
        if ((*(_DWORD *)(*(_QWORD *)(a1 + 144) + (v44 << 6) + 8) & 0x80000000) != 0)
          goto LABEL_82;
      }
      v51 = v50;
LABEL_82:
      LODWORD(v41) = v51;
      if ((_DWORD)v40 == v51)
        return v3;
    }
LABEL_86:
    v59 = 0u;
    v60 = 0u;
    v57 = 0u;
    v58 = 0u;
    v56 = 0u;
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  return v3;
}

_QWORD *REMeshSceneComponentSetInstances(uint64_t a1, _QWORD *a2)
{
  unint64_t *v4;
  unint64_t v5;
  unsigned int v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  int v16;
  __int128 *v17;
  _OWORD *v18;
  __int128 v19;
  __int128 v20;
  re::StringID *v22;
  unsigned int v23;
  uint64_t v24;
  int v25;
  const char *v26;
  __int16 v27;
  int v28;
  __int16 v29;
  uint64_t v30;
  __int16 v31;
  unint64_t v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  uint64_t v38;

  v38 = *MEMORY[0x24BDAC8D0];
  v22 = (re::StringID *)(a1 + 32);
  re::HashTable<unsigned int,re::StringID,re::Hash<unsigned int>,re::EqualTo<unsigned int>,true,false>::clear(a1 + 32);
  re::HashTable<unsigned int,re::StringID,re::Hash<unsigned int>,re::EqualTo<unsigned int>,true,false>::clear(a1 + 80);
  v4 = (unint64_t *)(a1 + 128);
  re::HashTable<unsigned int,re::GenericSRT<float>,re::Hash<unsigned int>,re::EqualTo<unsigned int>,true,false>::clear(a1 + 128);
  v23 = 0;
  v5 = a2[9];
  if ((_DWORD)v5)
  {
    v6 = 0;
    while (v5 > v6)
    {
      re::HashTable<unsigned int,re::StringID,re::Hash<unsigned int>,re::EqualTo<unsigned int>,true,false>::add<re::StringID&>(v22, &v23, (StringID *)(a2[11] + 16 * v6));
      v5 = a2[14];
      if (v5 <= v6)
        goto LABEL_20;
      re::HashTable<unsigned int,re::StringID,re::Hash<unsigned int>,re::EqualTo<unsigned int>,true,false>::add<re::StringID&>((re::StringID *)(a1 + 80), &v23, (StringID *)(a2[16] + 16 * v6));
      v5 = a2[19];
      if (v5 <= v6)
        goto LABEL_21;
      v7 = a2[21];
      v8 = 0x94D049BB133111EBLL
         * ((0xBF58476D1CE4E5B9 * (v6 ^ ((unint64_t)v6 >> 30))) ^ ((0xBF58476D1CE4E5B9
                                                                           * (v6 ^ ((unint64_t)v6 >> 30))) >> 27));
      v9 = v8 ^ (v8 >> 31);
      v10 = *v4;
      if (!*v4
        || (v10 = v9 % *(unsigned int *)(a1 + 152),
            v11 = *(unsigned int *)(*(_QWORD *)(a1 + 136) + 4 * v10),
            (_DWORD)v11 == 0x7FFFFFFF))
      {
LABEL_11:
        v13 = *(unsigned int *)(a1 + 164);
        if ((_DWORD)v13 == 0x7FFFFFFF)
        {
          v13 = *(unsigned int *)(a1 + 160);
          v14 = v13;
          if ((_DWORD)v13 == *(_DWORD *)(a1 + 152))
          {
            re::HashTable<unsigned int,re::GenericSRT<float>,re::Hash<unsigned int>,re::EqualTo<unsigned int>,true,false>::setCapacity(a1 + 128, 2 * *(_DWORD *)(a1 + 156));
            v10 = v9 % *(unsigned int *)(a1 + 152);
            v14 = *(_DWORD *)(a1 + 160);
          }
          *(_DWORD *)(a1 + 160) = v14 + 1;
          v15 = *(_QWORD *)(a1 + 144);
          v16 = *(_DWORD *)(v15 + (v13 << 6) + 8);
        }
        else
        {
          v15 = *(_QWORD *)(a1 + 144);
          v16 = *(_DWORD *)(v15 + (v13 << 6) + 8);
          *(_DWORD *)(a1 + 164) = v16 & 0x7FFFFFFF;
        }
        v17 = (__int128 *)(v7 + 48 * v6);
        *(_DWORD *)(v15 + (v13 << 6) + 8) = v16 | 0x80000000;
        *(_DWORD *)(*(_QWORD *)(a1 + 144) + (v13 << 6) + 8) = *(_DWORD *)(*(_QWORD *)(a1 + 144) + (v13 << 6) + 8) & 0x80000000 | *(_DWORD *)(*(_QWORD *)(a1 + 136) + 4 * v10);
        *(_QWORD *)(*(_QWORD *)(a1 + 144) + (v13 << 6)) = v9;
        *(_DWORD *)(*(_QWORD *)(a1 + 144) + (v13 << 6) + 12) = v6;
        v18 = (_OWORD *)(*(_QWORD *)(a1 + 144) + (v13 << 6));
        v19 = *v17;
        v20 = v17[2];
        v18[2] = v17[1];
        v18[3] = v20;
        v18[1] = v19;
        *(_DWORD *)(*(_QWORD *)(a1 + 136) + 4 * v10) = v13;
        ++*(_DWORD *)(a1 + 156);
        ++*(_DWORD *)(a1 + 168);
      }
      else
      {
        v12 = *(_QWORD *)(a1 + 144);
        while (*(_DWORD *)(v12 + (v11 << 6) + 12) != v6)
        {
          v11 = *(_DWORD *)(v12 + (v11 << 6) + 8) & 0x7FFFFFFF;
          if ((_DWORD)v11 == 0x7FFFFFFF)
            goto LABEL_11;
        }
      }
      v23 = ++v6;
      v5 = a2[9];
      if (v6 >= v5)
        return re::ecs2::Component::markDirty((_QWORD *)a1);
    }
    v24 = 0;
    v36 = 0u;
    v37 = 0u;
    v34 = 0u;
    v35 = 0u;
    v33 = 0u;
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    v25 = 136315906;
    v26 = "operator[]";
    v27 = 1024;
    v28 = 789;
    v29 = 2048;
    v30 = v6;
    v31 = 2048;
    v32 = v5;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_20:
    v24 = 0;
    v36 = 0u;
    v37 = 0u;
    v34 = 0u;
    v35 = 0u;
    v33 = 0u;
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    v25 = 136315906;
    v26 = "operator[]";
    v27 = 1024;
    v28 = 789;
    v29 = 2048;
    v30 = v6;
    v31 = 2048;
    v32 = v5;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_21:
    v24 = 0;
    v36 = 0u;
    v37 = 0u;
    v34 = 0u;
    v35 = 0u;
    v33 = 0u;
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    v25 = 136315906;
    v26 = "operator[]";
    v27 = 1024;
    v28 = 789;
    v29 = 2048;
    v30 = v6;
    v31 = 2048;
    v32 = v5;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  return re::ecs2::Component::markDirty((_QWORD *)a1);
}

re::StringID *re::HashTable<unsigned int,re::StringID,re::Hash<unsigned int>,re::EqualTo<unsigned int>,true,false>::add<re::StringID&>(re::StringID *result, _DWORD *a2, StringID *a3)
{
  re::StringID *v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  int v15;

  v5 = result;
  v6 = *a2;
  v7 = 0x94D049BB133111EBLL
     * ((0xBF58476D1CE4E5B9 * (v6 ^ (v6 >> 30))) ^ ((0xBF58476D1CE4E5B9 * (v6 ^ (v6 >> 30))) >> 27));
  v8 = v7 ^ (v7 >> 31);
  if (*(_QWORD *)result)
  {
    v9 = v8 % *((unsigned int *)result + 6);
    v10 = *(unsigned int *)(*((_QWORD *)result + 1) + 4 * v9);
    if ((_DWORD)v10 != 0x7FFFFFFF)
    {
      v11 = *((_QWORD *)result + 2);
      if (*(_DWORD *)(v11 + 32 * v10 + 12) == (_DWORD)v6)
        return result;
      while (1)
      {
        v10 = *(_DWORD *)(v11 + 32 * v10 + 8) & 0x7FFFFFFF;
        if ((_DWORD)v10 == 0x7FFFFFFF)
          break;
        if (*(_DWORD *)(v11 + 32 * v10 + 12) == (_DWORD)v6)
          return result;
      }
    }
  }
  else
  {
    LODWORD(v9) = 0;
  }
  v12 = *((unsigned int *)result + 9);
  if ((_DWORD)v12 == 0x7FFFFFFF)
  {
    v12 = *((unsigned int *)result + 8);
    v13 = v12;
    if ((_DWORD)v12 == *((_DWORD *)result + 6))
    {
      re::HashTable<unsigned int,re::StringID,re::Hash<unsigned int>,re::EqualTo<unsigned int>,true,false>::setCapacity((uint64_t)result, 2 * *((_DWORD *)result + 7));
      LODWORD(v9) = v8 % *((unsigned int *)v5 + 6);
      v13 = *((_DWORD *)v5 + 8);
    }
    *((_DWORD *)v5 + 8) = v13 + 1;
    v14 = *((_QWORD *)v5 + 2);
    v15 = *(_DWORD *)(v14 + 32 * v12 + 8);
  }
  else
  {
    v14 = *((_QWORD *)result + 2);
    v15 = *(_DWORD *)(v14 + 32 * v12 + 8);
    *((_DWORD *)result + 9) = v15 & 0x7FFFFFFF;
  }
  *(_DWORD *)(v14 + 32 * v12 + 8) = v15 | 0x80000000;
  *(_DWORD *)(*((_QWORD *)v5 + 2) + 32 * v12 + 8) = *(_DWORD *)(*((_QWORD *)v5 + 2) + 32 * v12 + 8) & 0x80000000 | *(_DWORD *)(*((_QWORD *)v5 + 1) + 4 * v9);
  *(_QWORD *)(*((_QWORD *)v5 + 2) + 32 * v12) = v8;
  *(_DWORD *)(*((_QWORD *)v5 + 2) + 32 * v12 + 12) = *a2;
  result = re::StringID::StringID((re::StringID *)(*((_QWORD *)v5 + 2) + 32 * v12 + 16), a3);
  *(_DWORD *)(*((_QWORD *)v5 + 1) + 4 * v9) = v12;
  ++*((_DWORD *)v5 + 7);
  ++*((_DWORD *)v5 + 10);
  return result;
}

void REMeshSceneComponentModifyInstances(uint64_t a1, uint64_t a2)
{
  char *v4;

  v4 = REMeshSceneComponentCopyInstances(a1);
  (*(void (**)(uint64_t, char *))(a2 + 16))(a2, v4);
  REMeshSceneComponentSetInstances(a1, v4);
  CFRelease(v4);
}

id REVFXAssetEnumerateBuiltInAssets(re *a1)
{
  Class VFXSceneClass;
  void *v2;
  NSObject *v3;
  uint8_t v5[16];

  VFXSceneClass = re::getVFXSceneClass(a1);
  if (VFXSceneClass)
  {
    -[objc_class builtinEffectIdentifiers](VFXSceneClass, "builtinEffectIdentifiers");
    v2 = (void *)objc_claimAutoreleasedReturnValue();
  }
  else
  {
    if (CoreRELog::onceToken != -1)
      dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
    v3 = (id)CoreRELog::log;
    if (os_log_type_enabled(v3, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)v5 = 0;
      _os_log_error_impl(&dword_224FE9000, v3, OS_LOG_TYPE_ERROR, "VFX framework is not loaded", v5, 2u);
    }

    v2 = 0;
  }
  return v2;
}

id REVFXAssetGetBuiltInEffectsBundle(re *a1)
{
  Class VFXSceneClass;
  void *v2;
  NSObject *v3;
  uint8_t v5[16];

  VFXSceneClass = re::getVFXSceneClass(a1);
  if (VFXSceneClass)
  {
    -[objc_class vfxAssetsFrameworkBundle](VFXSceneClass, "vfxAssetsFrameworkBundle");
    v2 = (void *)objc_claimAutoreleasedReturnValue();
  }
  else
  {
    if (CoreRELog::onceToken != -1)
      dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
    v3 = (id)CoreRELog::log;
    if (os_log_type_enabled(v3, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)v5 = 0;
      _os_log_error_impl(&dword_224FE9000, v3, OS_LOG_TYPE_ERROR, "VFX framework is not loaded", v5, 2u);
    }

    v2 = 0;
  }
  return v2;
}

id REVFXGetLibraryURLForSystemName(void *a1)
{
  re *v1;
  Class VFXSceneClass;
  void *v3;
  NSObject *v4;
  uint8_t v6[16];

  v1 = a1;
  VFXSceneClass = re::getVFXSceneClass(v1);
  if (VFXSceneClass)
  {
    -[objc_class vfxLibraryURLFor:](VFXSceneClass, "vfxLibraryURLFor:", v1);
    v3 = (void *)objc_claimAutoreleasedReturnValue();
  }
  else
  {
    if (CoreRELog::onceToken != -1)
      dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
    v4 = (id)CoreRELog::log;
    if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)v6 = 0;
      _os_log_error_impl(&dword_224FE9000, v4, OS_LOG_TYPE_ERROR, "VFX framework is not loaded", v6, 2u);
    }

    v3 = 0;
  }

  return v3;
}

uint64_t REVFXAssetGetAssetVersion(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  void *v3;
  void *v4;
  uint64_t v6[3];

  v1 = a1;
  re::AssetAPIHelper::assetHandleCreate(a1, v6);
  v2 = re::AssetHandle::asset<re::VFXAsset>((re::VFXAsset *)v6);
  if (v1)
  {
    objc_msgSend(objc_retainAutorelease(*(id *)(v2 + 64)), "scene");
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    v4 = v3;
    if (v3)
      v1 = objc_msgSend(v3, "version");
    else
      v1 = 0;

  }
  re::AssetHandle::~AssetHandle((re::AssetHandle *)v6);
  return v1;
}

uint64_t re::AssetHandle::asset<re::VFXAsset>(re::VFXAsset *a1)
{
  uint64_t *v2;
  uint64_t v3;
  NSObject *v4;
  NSObject *v6;
  _QWORD *v7;
  char *v8;
  int v9;
  char *v10;
  uint64_t v11;

  v11 = *MEMORY[0x24BDAC8D0];
  v2 = re::VFXAsset::assetType(a1);
  v3 = re::AssetHandle::assetWithType(a1, (const re::AssetType *)v2, 0);
  if (!v3)
  {
    v4 = *re::assetsLogObjects(0);
    if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
    {
      v6 = v4;
      v7 = re::AssetHandle::assetInfo(a1);
      if ((v7[17] & 1) != 0)
        v8 = (char *)v7[18];
      else
        v8 = (char *)v7 + 137;
      v9 = 136315138;
      v10 = v8;
      _os_log_error_impl(&dword_224FE9000, v6, OS_LOG_TYPE_ERROR, "Invalid asset: '%s'", (uint8_t *)&v9, 0xCu);

    }
  }
  return v3;
}

void REVFXAssetEnumerateParameterInfos(uint64_t a1, void *a2)
{
  void (**v3)(id, void *, void *, void *, uint64_t, uint64_t, void *, double, double);
  uint64_t v4;
  id v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t i;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  uint64_t v15;
  uint64_t v16;
  double v17;
  double v18;
  double v19;
  void *v20;
  id v21;
  id obj;
  uint64_t v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  uint64_t v28[3];
  _BYTE v29[128];
  uint64_t v30;

  v30 = *MEMORY[0x24BDAC8D0];
  v3 = a2;
  re::AssetAPIHelper::assetHandleCreate(a1, v28);
  v4 = re::AssetHandle::asset<re::VFXAsset>((re::VFXAsset *)v28);
  if (v4)
  {
    v5 = objc_retainAutorelease(*(id *)(v4 + 64));
    objc_msgSend(v5, "scene");
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    if (v6)
    {
      v20 = v6;
      v21 = v5;
      v26 = 0u;
      v27 = 0u;
      v24 = 0u;
      v25 = 0u;
      objc_msgSend(v6, "bindings");
      obj = (id)objc_claimAutoreleasedReturnValue();
      v7 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v24, v29, 16);
      if (v7)
      {
        v8 = v7;
        v23 = *(_QWORD *)v25;
        do
        {
          for (i = 0; i != v8; ++i)
          {
            if (*(_QWORD *)v25 != v23)
              objc_enumerationMutation(obj);
            v10 = *(void **)(*((_QWORD *)&v24 + 1) + 8 * i);
            objc_msgSend(v10, "userManual");
            v11 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v10, "identifier");
            v12 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v10, "objectName");
            v13 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v10, "bindingName");
            v14 = (void *)objc_claimAutoreleasedReturnValue();
            v15 = objc_msgSend(v10, "type");
            v16 = objc_msgSend(v10, "semantic");
            objc_msgSend(v10, "min");
            v18 = v17;
            objc_msgSend(v10, "max");
            v3[2](v3, v12, v13, v14, v15, v16, v11, v18, v19);

          }
          v8 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v24, v29, 16);
        }
        while (v8);
      }

      v6 = v20;
      v5 = v21;
    }

  }
  re::AssetHandle::~AssetHandle((re::AssetHandle *)v28);

}

void REVFXAssetEnumerateParameterInfosWithEnum(uint64_t a1, void *a2)
{
  uint64_t v3;
  id v4;
  void *v5;
  uint64_t i;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  double v16;
  double v17;
  double v18;
  void *v19;
  id v20;
  id obj;
  uint64_t v22;
  void (**v23)(id, void *, void *, void *, uint64_t, uint64_t, void *, void *, double, double, void *);
  uint64_t v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  uint64_t v29[3];
  _BYTE v30[128];
  uint64_t v31;

  v31 = *MEMORY[0x24BDAC8D0];
  v23 = a2;
  re::AssetAPIHelper::assetHandleCreate(a1, v29);
  v3 = re::AssetHandle::asset<re::VFXAsset>((re::VFXAsset *)v29);
  if (v3)
  {
    v4 = objc_retainAutorelease(*(id *)(v3 + 64));
    objc_msgSend(v4, "scene");
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    if (v5)
    {
      v19 = v5;
      v20 = v4;
      v27 = 0u;
      v28 = 0u;
      v25 = 0u;
      v26 = 0u;
      objc_msgSend(v5, "bindings");
      obj = (id)objc_claimAutoreleasedReturnValue();
      v24 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v25, v30, 16);
      if (v24)
      {
        v22 = *(_QWORD *)v26;
        do
        {
          for (i = 0; i != v24; ++i)
          {
            if (*(_QWORD *)v26 != v22)
              objc_enumerationMutation(obj);
            v7 = *(void **)(*((_QWORD *)&v25 + 1) + 8 * i);
            objc_msgSend(v7, "userManual");
            v8 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v7, "enumName");
            v9 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v7, "enumCases");
            v10 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v7, "identifier");
            v11 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v7, "objectName");
            v12 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v7, "bindingName");
            v13 = (void *)objc_claimAutoreleasedReturnValue();
            v14 = objc_msgSend(v7, "type");
            v15 = objc_msgSend(v7, "semantic");
            objc_msgSend(v7, "min");
            v17 = v16;
            objc_msgSend(v7, "max");
            v23[2](v23, v11, v12, v13, v14, v15, v8, v9, v17, v18, v10);

          }
          v24 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v25, v30, 16);
        }
        while (v24);
      }

      v5 = v19;
      v4 = v20;
    }

  }
  re::AssetHandle::~AssetHandle((re::AssetHandle *)v29);

}

void REVFXAssetEnumerateParameterDescriptions(uint64_t a1, void *a2)
{
  void (**v3)(id, void *, void *, void *, uint64_t);
  uint64_t v4;
  id v5;
  void *v6;
  void *v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t i;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  id v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  uint64_t v22[3];
  _BYTE v23[128];
  uint64_t v24;

  v24 = *MEMORY[0x24BDAC8D0];
  v3 = a2;
  re::AssetAPIHelper::assetHandleCreate(a1, v22);
  v4 = re::AssetHandle::asset<re::VFXAsset>((re::VFXAsset *)v22);
  if (v4)
  {
    v5 = objc_retainAutorelease(*(id *)(v4 + 64));
    objc_msgSend(v5, "scene");
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    v7 = v6;
    if (v6)
    {
      v17 = v5;
      v20 = 0u;
      v21 = 0u;
      v18 = 0u;
      v19 = 0u;
      objc_msgSend(v6, "bindings");
      v8 = (void *)objc_claimAutoreleasedReturnValue();
      v9 = objc_msgSend(v8, "countByEnumeratingWithState:objects:count:", &v18, v23, 16);
      if (v9)
      {
        v10 = v9;
        v11 = *(_QWORD *)v19;
        do
        {
          for (i = 0; i != v10; ++i)
          {
            if (*(_QWORD *)v19 != v11)
              objc_enumerationMutation(v8);
            v13 = *(void **)(*((_QWORD *)&v18 + 1) + 8 * i);
            objc_msgSend(v13, "identifier");
            v14 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v13, "objectName");
            v15 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v13, "bindingName");
            v16 = (void *)objc_claimAutoreleasedReturnValue();
            v3[2](v3, v14, v15, v16, objc_msgSend(v13, "type"));

          }
          v10 = objc_msgSend(v8, "countByEnumeratingWithState:objects:count:", &v18, v23, 16);
        }
        while (v10);
      }

      v5 = v17;
    }

  }
  re::AssetHandle::~AssetHandle((re::AssetHandle *)v22);

}

void REVFXAssetFindParameterInfo(uint64_t a1, void *a2, void *a3, void *a4)
{
  id v7;
  id v8;
  void (**v9)(id, void *, void *, void *, uint64_t, uint64_t, void *, double, double);
  uint64_t v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  uint64_t v18;
  uint64_t v19;
  double v20;
  double v21;
  double v22;
  void *v23;
  uint64_t v24[3];

  v7 = a2;
  v8 = a3;
  v9 = a4;
  re::AssetAPIHelper::assetHandleCreate(a1, v24);
  v10 = re::AssetHandle::asset<re::VFXAsset>((re::VFXAsset *)v24);
  if (v10)
  {
    objc_msgSend(objc_retainAutorelease(*(id *)(v10 + 64)), "scene");
    v11 = (void *)objc_claimAutoreleasedReturnValue();
    v12 = v11;
    if (v11)
    {
      if (v8)
        objc_msgSend(v11, "bindingOf:named:", v7, v8);
      else
        objc_msgSend(v11, "firstBindingWithName:", 0);
      v13 = (void *)objc_claimAutoreleasedReturnValue();
      v14 = v13;
      if (v13)
      {
        objc_msgSend(v13, "userManual");
        v23 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v14, "identifier");
        v15 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v14, "objectName");
        v16 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v14, "bindingName");
        v17 = (void *)objc_claimAutoreleasedReturnValue();
        v18 = objc_msgSend(v14, "type");
        v19 = objc_msgSend(v14, "semantic");
        objc_msgSend(v14, "min");
        v21 = v20;
        objc_msgSend(v14, "max");
        v9[2](v9, v15, v16, v17, v18, v19, v23, v21, v22);

      }
    }

  }
  re::AssetHandle::~AssetHandle((re::AssetHandle *)v24);

}

void REVFXAssetFindParameterInfoWithEnum(uint64_t a1, void *a2, void *a3, void *a4)
{
  id v7;
  id v8;
  void (**v9)(id, void *, void *, void *, uint64_t, uint64_t, void *, void *, double, double, void *);
  uint64_t v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  void *v18;
  uint64_t v19;
  uint64_t v20;
  double v21;
  double v22;
  double v23;
  id v24;
  void *v25;
  void *v26;
  uint64_t v27[3];

  v7 = a2;
  v8 = a3;
  v9 = a4;
  re::AssetAPIHelper::assetHandleCreate(a1, v27);
  v10 = re::AssetHandle::asset<re::VFXAsset>((re::VFXAsset *)v27);
  if (v10)
  {
    objc_msgSend(objc_retainAutorelease(*(id *)(v10 + 64)), "scene");
    v11 = (void *)objc_claimAutoreleasedReturnValue();
    v12 = v11;
    if (v11)
    {
      if (v8)
        objc_msgSend(v11, "bindingOf:named:", v7, v8);
      else
        objc_msgSend(v11, "firstBindingWithName:", 0);
      v13 = (void *)objc_claimAutoreleasedReturnValue();
      v14 = v13;
      if (v13)
      {
        objc_msgSend(v13, "userManual");
        v26 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v14, "enumName");
        v25 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v14, "enumCases");
        v15 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v14, "identifier");
        v16 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v14, "objectName");
        v24 = v7;
        v17 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v14, "bindingName");
        v18 = (void *)objc_claimAutoreleasedReturnValue();
        v19 = objc_msgSend(v14, "type");
        v20 = objc_msgSend(v14, "semantic");
        objc_msgSend(v14, "min");
        v22 = v21;
        objc_msgSend(v14, "max");
        v9[2](v9, v16, v17, v18, v19, v20, v26, v25, v22, v23, v15);

        v7 = v24;
      }

    }
  }
  re::AssetHandle::~AssetHandle((re::AssetHandle *)v27);

}

void REVFXAssetFindParameterDescription(uint64_t a1, void *a2, void *a3, void *a4)
{
  id v7;
  id v8;
  void (**v9)(id, void *, void *, void *, uint64_t);
  uint64_t v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  uint64_t v18[3];

  v7 = a2;
  v8 = a3;
  v9 = a4;
  re::AssetAPIHelper::assetHandleCreate(a1, v18);
  v10 = re::AssetHandle::asset<re::VFXAsset>((re::VFXAsset *)v18);
  if (v10)
  {
    objc_msgSend(objc_retainAutorelease(*(id *)(v10 + 64)), "scene");
    v11 = (void *)objc_claimAutoreleasedReturnValue();
    v12 = v11;
    if (v11)
    {
      if (v8)
        objc_msgSend(v11, "bindingOf:named:", v7, v8);
      else
        objc_msgSend(v11, "firstBindingWithName:", 0);
      v13 = (void *)objc_claimAutoreleasedReturnValue();
      v14 = v13;
      if (v13)
      {
        objc_msgSend(v13, "identifier");
        v15 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v14, "objectName");
        v16 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v14, "bindingName");
        v17 = (void *)objc_claimAutoreleasedReturnValue();
        v9[2](v9, v15, v16, v17, objc_msgSend(v14, "type"));

      }
    }

  }
  re::AssetHandle::~AssetHandle((re::AssetHandle *)v18);

}

uint64_t RERenderManagerGetCameraStreamManager(uint64_t a1)
{
  return *(_QWORD *)(a1 + 112);
}

void RECameraStreamManagerSetARKitPassthrough(uint64_t a1, void *a2, void *a3, __n128 a4, __n128 a5, __n128 a6, __n128 a7, float a8)
{
  id v11;
  id v12;
  id v13;
  id v14;
  id v19;
  void *v20;

  v11 = a2;
  v12 = a3;
  v20 = v11;
  v13 = v11;
  v19 = v12;
  v14 = v12;
  *(__n128 *)(a1 + 1760) = a4;
  *(__n128 *)(a1 + 1776) = a5;
  *(__n128 *)(a1 + 1792) = a6;
  *(__n128 *)(a1 + 1808) = a7;
  *(float *)(a1 + 1824) = a8;
  NS::SharedPtr<MTL::Texture>::operator=((void **)(a1 + 1832), &v20);
  NS::SharedPtr<MTL::Texture>::operator=((void **)(a1 + 1840), &v19);
  if (v19)
  {

    v19 = 0;
  }
  if (v20)
  {

    v20 = 0;
  }

}

void *REBallSocketJointComponentGetComponentType()
{
  if (re::ecs2::dispatchOnceInitECSComponents(void)::onceToken != -1)
    dispatch_once(&re::ecs2::dispatchOnceInitECSComponents(void)::onceToken, &__block_literal_global_13);
  return re::ecs2::ComponentImpl<re::ecs2::BallSocketJointComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType;
}

char *REBallSocketJointComponentGetBodyA(uint64_t a1)
{
  return re::ecs2::EntityHandle::resolve((id *)(a1 + 32), *(_QWORD *)(a1 + 16));
}

uint64_t REBallSocketJointComponentSetBodyA(uint64_t a1, uint64_t a2)
{
  re::ecs2::EntityHandle::operator=(a1 + 32, a2);
  return re::ecs2::Component::enqueueMarkDirty(a1);
}

char *REBallSocketJointComponentGetBodyB(uint64_t a1)
{
  return re::ecs2::EntityHandle::resolve((id *)(a1 + 56), *(_QWORD *)(a1 + 16));
}

uint64_t REBallSocketJointComponentSetBodyB(uint64_t a1, uint64_t a2)
{
  re::ecs2::EntityHandle::operator=(a1 + 56, a2);
  return re::ecs2::Component::enqueueMarkDirty(a1);
}

__n128 REBallSocketJointComponentGetLocalAnchorPoseA(__n128 *a1)
{
  return a1[5];
}

uint64_t REBallSocketJointComponentSetLocalAnchorPoseA(uint64_t this, __n128 a2, __n128 a3)
{
  *(__n128 *)(this + 80) = a2;
  *(__n128 *)(this + 96) = a3;
  return re::ecs2::Component::enqueueMarkDirty(this);
}

__n128 REBallSocketJointComponentGetLocalAnchorPoseB(__n128 *a1)
{
  return a1[7];
}

uint64_t REBallSocketJointComponentSetLocalAnchorPoseB(uint64_t this, __n128 a2, __n128 a3)
{
  *(__n128 *)(this + 112) = a2;
  *(__n128 *)(this + 128) = a3;
  return re::ecs2::Component::enqueueMarkDirty(this);
}

uint64_t REBallSocketJointComponentGetCollisionsEnabled(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 144);
}

uint64_t REBallSocketJointComponentSetCollisionsEnabled(uint64_t this, char a2)
{
  *(_BYTE *)(this + 144) = a2;
  return re::ecs2::Component::enqueueMarkDirty(this);
}

void *REHingeJointComponentGetComponentType()
{
  if (re::ecs2::dispatchOnceInitECSComponents(void)::onceToken != -1)
    dispatch_once(&re::ecs2::dispatchOnceInitECSComponents(void)::onceToken, &__block_literal_global_13);
  return re::ecs2::ComponentImpl<re::ecs2::HingeJointComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType;
}

char *REHingeJointComponentGetBodyA(uint64_t a1)
{
  return re::ecs2::EntityHandle::resolve((id *)(a1 + 32), *(_QWORD *)(a1 + 16));
}

uint64_t REHingeJointComponentSetBodyA(uint64_t a1, uint64_t a2)
{
  re::ecs2::EntityHandle::operator=(a1 + 32, a2);
  return re::ecs2::Component::enqueueMarkDirty(a1);
}

char *REHingeJointComponentGetBodyB(uint64_t a1)
{
  return re::ecs2::EntityHandle::resolve((id *)(a1 + 56), *(_QWORD *)(a1 + 16));
}

uint64_t REHingeJointComponentSetBodyB(uint64_t a1, uint64_t a2)
{
  re::ecs2::EntityHandle::operator=(a1 + 56, a2);
  return re::ecs2::Component::enqueueMarkDirty(a1);
}

__n128 REHingeJointComponentGetLocalAnchorPoseA(__n128 *a1)
{
  return a1[5];
}

uint64_t REHingeJointComponentSetLocalAnchorPoseA(uint64_t this, __n128 a2, __n128 a3)
{
  *(__n128 *)(this + 80) = a2;
  *(__n128 *)(this + 96) = a3;
  return re::ecs2::Component::enqueueMarkDirty(this);
}

__n128 REHingeJointComponentGetLocalAnchorPoseB(__n128 *a1)
{
  return a1[7];
}

uint64_t REHingeJointComponentSetLocalAnchorPoseB(uint64_t this, __n128 a2, __n128 a3)
{
  *(__n128 *)(this + 112) = a2;
  *(__n128 *)(this + 128) = a3;
  return re::ecs2::Component::enqueueMarkDirty(this);
}

uint64_t REHingeJointComponentGetCollisionsEnabled(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 144);
}

uint64_t REHingeJointComponentSetCollisionsEnabled(uint64_t this, char a2)
{
  *(_BYTE *)(this + 144) = a2;
  return re::ecs2::Component::enqueueMarkDirty(this);
}

uint64_t REMeshSortingComponentGetSortGroupId(uint64_t a1)
{
  uint64_t v1;

  v1 = 176;
  if (!*(_QWORD *)(a1 + 176))
    v1 = 32;
  return *(_QWORD *)(a1 + v1);
}

void **RETimelineDefinitionCreateTimelineAsset(AssetService *a1, uint64_t a2)
{
  void **v2;
  void **v3;
  void **v5[3];

  if (v5[1])
  {
    v2 = v5[0];
    if (v5[0])
      v3 = v5[0] + 1;
  }
  else
  {
    v2 = 0;
  }
  re::AssetHandle::~AssetHandle((re::AssetHandle *)v5);
  return v2;
}

re::TimelineAsset *`anonymous namespace'::TimelineDefinition::assetHandle(void ***this, AssetService *a2, uint64_t a3)
{
  _anonymous_namespace_::TimelineDefinition *v5;
  const re::AssetHandle *v6;
  void **var0;
  uint64_t v8;
  void **v9;
  int v10;
  void **v11;
  unint64_t *v12;
  uint64_t *v13;
  void **v14;
  uint64_t v15;
  re::TimelineAsset *result;
  re::TimelineAssetData *v17;
  re::TimelineAsset *v18;
  uint64_t *v19;
  uint64_t v20;
  char *__s2;

  v5 = (_anonymous_namespace_::TimelineDefinition *)this;
  v6 = (const re::AssetHandle *)&a2[3];
  if (!a2[4].var0)
    goto LABEL_15;
  if (!LOBYTE(a2[11].var0))
    return re::AssetHandle::AssetHandle(v5, v6);
  var0 = a2[6].var0;
  if (!var0)
  {
    v8 = re::AssetHandle::asset<re::TimelineAsset>((re::TimelineAsset *)&a2[3]);
    if (v8)
      var0 = *(void ***)(v8 + 8);
    else
      var0 = 0;
  }
  re::StringID::StringID((re::StringID *)&v20, (const StringID *)(var0 + 3));
  if (LOBYTE(a2[11].var0))
  {
    if ((v20 ^ (unint64_t)a2[12].var0) >= 2)
    {
      re::StringID::destroyString((re::StringID *)&v20);
      goto LABEL_15;
    }
    v9 = a2[13].var0;
    if (v9 != (void **)__s2)
    {
      v10 = strcmp((const char *)v9, __s2);
      goto LABEL_12;
    }
    re::StringID::destroyString((re::StringID *)&v20);
    return re::AssetHandle::AssetHandle(v5, v6);
  }
  v10 = LOBYTE(a2[11].var0) | 1;
LABEL_12:
  re::StringID::destroyString((re::StringID *)&v20);
  if (!v10)
    return re::AssetHandle::AssetHandle(v5, v6);
LABEL_15:
  v11 = a2[6].var0;
  if (!v11)
  {
    this = (void ***)re::AssetHandle::asset<re::TimelineAsset>(v6);
    if (this)
      v11 = this[1];
    else
      v11 = 0;
  }
  if (LOBYTE(a2[11].var0))
  {
    v13 = (uint64_t *)&a2[12];
  }
  else
  {
    v14 = a2[6].var0;
    if (!v14)
    {
      v15 = re::AssetHandle::asset<re::TimelineAsset>(v6);
      if (v15)
        v14 = *(void ***)(v15 + 8);
      else
        v14 = 0;
    }
    v13 = (uint64_t *)(v14 + 3);
  }
  re::StringID::operator=(v12 + 3, v13);
  result = (re::TimelineAsset *)re::AssetHelper::makeTimelineAsset((re::AssetHelper *)v12, v17);
  if (result)
  {
    v18 = result;
    v19 = re::TimelineAsset::assetType(result);
    return (re::TimelineAsset *)(*(uint64_t (**)(uint64_t, re::TimelineAsset *, uint64_t *, _QWORD, _QWORD, _QWORD))(*(_QWORD *)a3 + 416))(a3, v18, v19, 0, 0, 0);
  }
  else
  {
    *(_QWORD *)v5 = 0;
    *((_QWORD *)v5 + 1) = 0;
    *((_QWORD *)v5 + 2) = 0;
  }
  return result;
}

uint64_t RETimelineDefinitionCreateFromTimeline(uint64_t a1)
{
  re *v1;
  uint64_t *v2;
  uint64_t v3;
  __int128 v5;
  uint64_t v6;
  __int128 v7;
  uint64_t v8;

  re::AssetAPIHelper::assetHandleCreate(a1, (uint64_t *)&v5);
  v2 = re::globalAllocators(v1);
  v3 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v2[2] + 32))(v2[2], 112, 8);
  v7 = v5;
  v5 = 0uLL;
  v8 = v6;
  v6 = 0;
  re::AssetHandle::~AssetHandle((re::AssetHandle *)&v7);
  re::AssetHandle::~AssetHandle((re::AssetHandle *)&v5);
  return v3;
}

uint64_t RETimelineDefinitionGetTimelineType(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  v1 = *(_QWORD *)(a1 + 48);
  if (!v1)
    v1 = *(_QWORD *)(re::AssetHandle::asset<re::TimelineAsset>((re::TimelineAsset *)(a1 + 24)) + 8);
  v2 = *(unsigned int *)(v1 + 8);
  if (v2 > 0x3D)
    return 0;
  else
}

uint64_t RETimelineDefinitionGetAnimationLayer(uint64_t a1)
{
  uint64_t v1;

  v1 = *(_QWORD *)(a1 + 48);
  if (!v1)
    v1 = *(_QWORD *)(re::AssetHandle::asset<re::TimelineAsset>((re::TimelineAsset *)(a1 + 24)) + 8);
  return *(unsigned int *)(v1 + 12);
}

_anonymous_namespace_ *RETimelineDefinitionSetAnimationLayer(_anonymous_namespace_::TimelineDefinition *a1, int a2)
{
  _anonymous_namespace_ *result;

  *((_DWORD *)result + 3) = a2;
  return result;
}

_anonymous_namespace_ *`anonymous namespace'::TimelineDefinition::timelineAssetData(_anonymous_namespace_::TimelineDefinition *this)
{
  _anonymous_namespace_ *result;
  uint64_t *v3;
  char *v4;
  uint64_t v5;
  unsigned int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  _QWORD v12[3];
  _QWORD *v13;
  uint64_t v14;
  _QWORD v15[5];

  v15[4] = *MEMORY[0x24BDAC8D0];
  v3 = (uint64_t *)((char *)this + 48);
  result = (_anonymous_namespace_ *)*((_QWORD *)this + 6);
  if (result)
    return result;
  v4 = (char *)this + 24;
  v5 = *((_QWORD *)this + 4);
  if (v5)
  {
    v6 = atomic_load((unsigned int *)(v5 + 704));
    if (v6 == 2)
      goto LABEL_7;
    v7 = *((_QWORD *)this + 4);
  }
  else
  {
    v7 = 0;
  }
  re::AssetHandle::loadNow(v7, 0);
LABEL_7:
  result = (_anonymous_namespace_ *)re::AssetHandle::asset<re::TimelineAsset>((_anonymous_namespace_::TimelineDefinition *)((char *)this + 24));
  if (!result)
    return result;
  v8 = *((_QWORD *)result + 1);
  v12[0] = &off_24ED99600;
  v13 = v12;
  v14 = 0;
  v15[3] = v15;
  v15[0] = &off_24ED99600;
  std::unique_ptr<re::RigHierarchy,std::function<void ()(re::RigHierarchy*)>>::reset[abi:nn180100](v3, v9);
  std::__function::__value_func<void ()(re::RigHierarchy *)>::operator=[abi:nn180100]((_QWORD *)this + 7, (uint64_t)v15);
  std::unique_ptr<re::RigHierarchy,std::function<void ()(re::RigHierarchy*)>>::~unique_ptr[abi:nn180100](&v14);
  v10 = v13;
  if (v13 == v12)
  {
    v11 = 4;
    v10 = v12;
    goto LABEL_12;
  }
  if (v13)
  {
    v11 = 5;
LABEL_12:
    (*(void (**)(void))(*v10 + 8 * v11))();
  }
  if (*(_QWORD *)v4)
  {

    *(_QWORD *)v4 = 0;
  }
  *((_QWORD *)this + 4) = 0;
  return (_anonymous_namespace_ *)*((_QWORD *)this + 6);
}

uint64_t RETimelineDefinitionGetFillMode(uint64_t a1)
{
  uint64_t v1;

  v1 = *(_QWORD *)(a1 + 48);
  if (!v1)
    v1 = *(_QWORD *)(re::AssetHandle::asset<re::TimelineAsset>((re::TimelineAsset *)(a1 + 24)) + 8);
  return *(char *)(v1 + 16);
}

_anonymous_namespace_ *RETimelineDefinitionSetFillMode(_anonymous_namespace_::TimelineDefinition *a1, char a2)
{
  _anonymous_namespace_ *result;

  *((_BYTE *)result + 16) = a2;
  return result;
}

uint64_t RETimelineDefinitionGetName(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  if (*(_BYTE *)(a1 + 88))
  {
    v1 = a1 + 96;
  }
  else
  {
    v2 = *(_QWORD *)(a1 + 48);
    if (!v2)
    {
      v3 = re::AssetHandle::asset<re::TimelineAsset>((re::TimelineAsset *)(a1 + 24));
      if (v3)
        v2 = *(_QWORD *)(v3 + 8);
      else
        v2 = 0;
    }
    v1 = v2 + 24;
  }
  return *(_QWORD *)(v1 + 8);
}

void `anonymous namespace'::TimelineDefinition::setName(_anonymous_namespace_::TimelineDefinition *this, const char *__s2)
{
  char *v3;
  uint64_t v4;
  char v5;
  const char *v6;
  int v7;
  const char *v8;
  int v9;
  re::StringID *v10;
  uint64_t v11;
  void *v12;
  uint64_t v13;
  _QWORD v14[2];

  v3 = (char *)this + 88;
  if (!*((_BYTE *)this + 88))
    goto LABEL_14;
  if (__s2)
  {
    v4 = *__s2;
    if (*__s2)
    {
      v5 = __s2[1];
      if (v5)
      {
        v6 = __s2 + 2;
        do
        {
          v4 = 31 * v4 + v5;
          v7 = *(unsigned __int8 *)v6++;
          v5 = v7;
        }
        while (v7);
      }
    }
  }
  else
  {
    v4 = 0;
  }
  v13 = 2 * v4;
  v14[0] = __s2;
  if ((*((_QWORD *)this + 12) ^ (unint64_t)(2 * v4)) >= 2)
  {
    re::StringID::destroyString((re::StringID *)&v13);
    goto LABEL_14;
  }
  v8 = (const char *)*((_QWORD *)this + 13);
  if (v8 == __s2)
  {
    v10 = (re::StringID *)&v13;
LABEL_17:
    re::StringID::destroyString(v10);
    return;
  }
  v9 = strcmp(v8, __s2);
  re::StringID::destroyString((re::StringID *)&v13);
  if (v9)
  {
LABEL_14:
    v11 = 0;
    v12 = &str_110;
    LOBYTE(v13) = 1;
    v14[0] = v11;
    v14[1] = v12;
    v11 = 0;
    v12 = &str_110;
    re::Optional<re::StringID>::operator=((uint64_t)v3, (unsigned __int8 *)&v13);
    if ((_BYTE)v13)
      re::StringID::destroyString((re::StringID *)v14);
    v10 = (re::StringID *)&v11;
    goto LABEL_17;
  }
}

uint64_t RETimelineDefinitionGetTargetPath(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  v1 = *(_QWORD *)(a1 + 48);
  if (!v1)
  {
    v2 = re::AssetHandle::asset<re::TimelineAsset>((re::TimelineAsset *)(a1 + 24));
    if (v2)
      v1 = *(_QWORD *)(v2 + 8);
    else
      v1 = 0;
  }
  if ((*(_BYTE *)(v1 + 48) & 1) != 0)
    return *(_QWORD *)(v1 + 56);
  else
    return v1 + 49;
}

re::DynamicString *RETimelineDefinitionSetTargetPath(_anonymous_namespace_::TimelineDefinition *a1, const char *a2)
{
  re::DynamicString *v3;
  _QWORD v5[2];

  v5[0] = a2;
  v5[1] = strlen(a2);
  return re::DynamicString::operator=(v3, (uint64_t)v5);
}

uint64_t RETimelineDefinitionMakeAdditiveFromBaseTimeline(_anonymous_namespace_::TimelineDefinition *a1, uint64_t a2)
{
  _anonymous_namespace_ *v3;
  uint64_t v4;
  uint64_t v5;
  int v6;
  double v7;
  float v8;
  float v9;
  uint64_t result;
  NSObject *v11;
  uint64_t v12;
  _QWORD *v13;
  _QWORD *v14;
  uint64_t v15;
  _QWORD *v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t *v23;
  uint64_t v24;
  float v25;
  float v26;
  float v27;
  float v28;
  const char *v29;
  NSObject *v30;
  uint32_t v31;
  float v32;
  float v33;
  float v34;
  float v35;
  float v36;
  float v37;
  unint64_t v38;
  uint64_t v39;
  float v40;
  float v41;
  float v42;
  float v43;
  unint64_t v44;
  uint64_t v45;
  float v46;
  float v47;
  float v48;
  float v49;
  float v50;
  float v51;
  float v52;
  float v53;
  float v54;
  float v55;
  uint64_t v56;
  _QWORD *v57;
  _QWORD *v58;
  uint64_t v59;
  uint64_t v60;
  _QWORD *v61;
  _QWORD *v62;
  uint64_t v63;
  uint64_t v64;
  _QWORD *v65;
  _QWORD *v66;
  uint64_t v67;
  float v68;
  float v69;
  float v70;
  float v71;
  float *v72;
  uint64_t v73;
  float v74;
  float v75;
  float v76;
  float v77;
  unint64_t v78;
  uint64_t v79;
  float v80;
  float v81;
  float v82;
  float v83;
  unint64_t v84;
  uint64_t v85;
  float v86;
  float v87;
  float v88;
  float v89;
  float v90;
  float v91;
  float v92;
  float v93;
  unint64_t v94;
  uint64_t v95;
  uint64_t v96;
  _QWORD *v97;
  _QWORD *v98;
  uint64_t v99;
  uint64_t *v100;
  unint64_t v101;
  uint64_t v102;
  uint64_t *v103;
  uint64_t v104;
  uint64_t v105;
  unint64_t v106;
  uint64_t *v107;
  uint64_t v108;
  float v109;
  float v110;
  float v111;
  float v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  float **v117;
  uint64_t v118;
  _BYTE *v119;
  uint64_t v120;
  _BYTE buf[22];
  __int16 v122;
  uint64_t v123;
  float *v124;
  uint64_t v125;
  uint64_t v126;

  v126 = *MEMORY[0x24BDAC8D0];
  v4 = *(_QWORD *)(a2 + 48);
  if (!v4)
  {
    v5 = re::AssetHandle::asset<re::TimelineAsset>((re::TimelineAsset *)(a2 + 24));
    if (v5)
      v4 = *(_QWORD *)(v5 + 8);
    else
      v4 = 0;
  }
  v6 = *((_DWORD *)v3 + 2);
  if (v6 == *(_DWORD *)(v4 + 8))
  {
    switch(v6)
    {
      case 11:
        v7 = *((double *)v3 + 10);
        *(float *)&v7 = v7;
        v8 = *(double *)(v4 + 80);
        if (*(float *)&v7 != v8)
        {
          v9 = (float)((float)(fabsf(*(float *)&v7) + fabsf(v8)) + 1.0) * 0.00001;
          *(float *)&v7 = vabds_f32(*(float *)&v7, v8);
          if (*(float *)&v7 >= v9)
          {
            if (CoreRELog::onceToken != -1)
              goto LABEL_401;
            goto LABEL_290;
          }
        }
        if (*((unsigned __int8 *)v3 + 72) | *(unsigned __int8 *)(v4 + 72))
        {
          if (CoreRELog::onceToken != -1)
            goto LABEL_397;
          goto LABEL_237;
        }
        if (*((_BYTE *)v3 + 88)
          && *(_BYTE *)(v4 + 88)
          && *((_BYTE *)v3 + 96)
          && *(_BYTE *)(v4 + 96)
          && !*((_BYTE *)v3 + 104)
          && !*(_BYTE *)(v4 + 104))
        {
          *(_QWORD *)buf = (char *)v3 + 88;
          *(_QWORD *)&buf[8] = (char *)v3 + 96;
          v124 = (float *)(v4 + 92);
          v125 = v4 + 100;
          v119 = buf;
          v120 = 2;
          v117 = &v124;
          v118 = 2;
          result = re::AnimationHelper::makeAdditiveForOptionalValueReferences<float>((re *)&v119, (uint64_t)&v117, (uint64_t)buf, 2uLL, v7);
          goto LABEL_190;
        }
        if (CoreRELog::onceToken != -1)
          goto LABEL_399;
        goto LABEL_252;
      case 12:
        v46 = *((double *)v3 + 10);
        v47 = *(double *)(v4 + 80);
        if (v46 != v47 && vabds_f32(v46, v47) >= (float)((float)((float)(fabsf(v46) + fabsf(v47)) + 1.0) * 0.00001))
        {
          if (CoreRELog::onceToken != -1)
            goto LABEL_401;
          goto LABEL_290;
        }
        if (*((unsigned __int8 *)v3 + 72) | *(unsigned __int8 *)(v4 + 72))
        {
          if (CoreRELog::onceToken != -1)
            goto LABEL_397;
          goto LABEL_237;
        }
        if (*((_BYTE *)v3 + 88)
          && *(_BYTE *)(v4 + 88)
          && *((_BYTE *)v3 + 104)
          && *(_BYTE *)(v4 + 104)
          && !*((_BYTE *)v3 + 120)
          && !*(_BYTE *)(v4 + 120))
        {
          *(_QWORD *)buf = (char *)v3 + 88;
          *(_QWORD *)&buf[8] = (char *)v3 + 104;
          v124 = (float *)(v4 + 96);
          v125 = v4 + 112;
          v119 = buf;
          v120 = 2;
          v117 = &v124;
          v118 = 2;
          result = re::AnimationHelper::makeAdditiveForOptionalValueReferences<double>((re *)&v119, (uint64_t)&v117, (uint64_t)buf, 2uLL);
          goto LABEL_190;
        }
        if (CoreRELog::onceToken != -1)
          goto LABEL_399;
        goto LABEL_252;
      case 13:
        v48 = *((double *)v3 + 10);
        v49 = *(double *)(v4 + 80);
        if (v48 != v49 && vabds_f32(v48, v49) >= (float)((float)((float)(fabsf(v48) + fabsf(v49)) + 1.0) * 0.00001))
        {
          if (CoreRELog::onceToken != -1)
            goto LABEL_401;
          goto LABEL_290;
        }
        if (*((unsigned __int8 *)v3 + 72) | *(unsigned __int8 *)(v4 + 72))
        {
          if (CoreRELog::onceToken != -1)
            goto LABEL_397;
          goto LABEL_237;
        }
        if (*((_BYTE *)v3 + 88)
          && *(_BYTE *)(v4 + 88)
          && *((_BYTE *)v3 + 104)
          && *(_BYTE *)(v4 + 104)
          && !*((_BYTE *)v3 + 120)
          && !*(_BYTE *)(v4 + 120))
        {
          *(_QWORD *)buf = (char *)v3 + 88;
          *(_QWORD *)&buf[8] = (char *)v3 + 104;
          v124 = (float *)(v4 + 96);
          v125 = v4 + 112;
          v119 = buf;
          v120 = 2;
          v117 = &v124;
          v118 = 2;
          result = re::AnimationHelper::makeAdditiveForOptionalValueReferences<re::Vector2<float>>((re *)&v119, &v117, (uint64_t)buf, 2uLL);
          goto LABEL_190;
        }
        if (CoreRELog::onceToken != -1)
          goto LABEL_399;
        goto LABEL_252;
      case 14:
        v50 = *((double *)v3 + 10);
        v51 = *(double *)(v4 + 80);
        if (v50 != v51 && vabds_f32(v50, v51) >= (float)((float)((float)(fabsf(v50) + fabsf(v51)) + 1.0) * 0.00001))
        {
          if (CoreRELog::onceToken != -1)
            goto LABEL_401;
          goto LABEL_290;
        }
        if (*((unsigned __int8 *)v3 + 72) | *(unsigned __int8 *)(v4 + 72))
        {
          if (CoreRELog::onceToken != -1)
            goto LABEL_397;
          goto LABEL_237;
        }
        if (*((_BYTE *)v3 + 96)
          && *(_BYTE *)(v4 + 96)
          && *((_BYTE *)v3 + 128)
          && *(_BYTE *)(v4 + 128)
          && !*((_BYTE *)v3 + 160)
          && !*(_BYTE *)(v4 + 160))
        {
          goto LABEL_59;
        }
        if (CoreRELog::onceToken != -1)
          goto LABEL_399;
        goto LABEL_252;
      case 15:
        v32 = *((double *)v3 + 10);
        v33 = *(double *)(v4 + 80);
        if (v32 != v33 && vabds_f32(v32, v33) >= (float)((float)((float)(fabsf(v32) + fabsf(v33)) + 1.0) * 0.00001))
        {
          if (CoreRELog::onceToken != -1)
            goto LABEL_401;
          goto LABEL_290;
        }
        if (*((unsigned __int8 *)v3 + 72) | *(unsigned __int8 *)(v4 + 72))
        {
          if (CoreRELog::onceToken != -1)
            goto LABEL_397;
          goto LABEL_237;
        }
        if (*((_BYTE *)v3 + 96)
          && *(_BYTE *)(v4 + 96)
          && *((_BYTE *)v3 + 128)
          && *(_BYTE *)(v4 + 128)
          && !*((_BYTE *)v3 + 160)
          && !*(_BYTE *)(v4 + 160))
        {
LABEL_59:
          *(_QWORD *)buf = (char *)v3 + 96;
          *(_QWORD *)&buf[8] = (char *)v3 + 128;
          v124 = (float *)(v4 + 112);
          v125 = v4 + 144;
          v119 = buf;
          v120 = 2;
          v117 = &v124;
          v118 = 2;
          result = re::AnimationHelper::makeAdditiveForOptionalValueReferences<re::Vector3<float>>((re *)&v119, &v117, (uint64_t)buf, 2uLL);
          goto LABEL_190;
        }
        if (CoreRELog::onceToken != -1)
          goto LABEL_399;
        goto LABEL_252;
      case 16:
        v52 = *((double *)v3 + 10);
        v53 = *(double *)(v4 + 80);
        if (v52 != v53 && vabds_f32(v52, v53) >= (float)((float)((float)(fabsf(v52) + fabsf(v53)) + 1.0) * 0.00001))
        {
          if (CoreRELog::onceToken != -1)
            goto LABEL_401;
          goto LABEL_290;
        }
        if (*((unsigned __int8 *)v3 + 72) | *(unsigned __int8 *)(v4 + 72))
        {
          if (CoreRELog::onceToken != -1)
            goto LABEL_397;
          goto LABEL_237;
        }
        if (*((_BYTE *)v3 + 96)
          && *(_BYTE *)(v4 + 96)
          && *((_BYTE *)v3 + 128)
          && *(_BYTE *)(v4 + 128)
          && !*((_BYTE *)v3 + 160)
          && !*(_BYTE *)(v4 + 160))
        {
          *(_QWORD *)buf = (char *)v3 + 96;
          *(_QWORD *)&buf[8] = (char *)v3 + 128;
          v124 = (float *)(v4 + 112);
          v125 = v4 + 144;
          v119 = buf;
          v120 = 2;
          v117 = &v124;
          v118 = 2;
          result = re::AnimationHelper::makeAdditiveForOptionalValueReferences<re::Quaternion<float>>((re *)&v119, &v117, (uint64_t)buf, 2uLL);
          goto LABEL_190;
        }
        if (CoreRELog::onceToken != -1)
          goto LABEL_399;
        goto LABEL_252;
      case 17:
        v54 = *((double *)v3 + 10);
        v55 = *(double *)(v4 + 80);
        if (v54 == v55 || vabds_f32(v54, v55) < (float)((float)((float)(fabsf(v54) + fabsf(v55)) + 1.0) * 0.00001))
        {
          if (*((unsigned __int8 *)v3 + 72) | *(unsigned __int8 *)(v4 + 72))
          {
            if (CoreRELog::onceToken != -1)
LABEL_397:
              dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
LABEL_237:
            v11 = (id)CoreRELog::log;
            if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR))
            {
              *(_WORD *)buf = 0;
              v29 = "Cannot make additive animation from existing additive from-to-by animation.";
              goto LABEL_48;
            }
          }
          else
          {
            if (*((_BYTE *)v3 + 96)
              && *(_BYTE *)(v4 + 96)
              && *((_BYTE *)v3 + 160)
              && *(_BYTE *)(v4 + 160)
              && !*((_BYTE *)v3 + 224)
              && !*(_BYTE *)(v4 + 224))
            {
              *(_QWORD *)buf = (char *)v3 + 96;
              *(_QWORD *)&buf[8] = (char *)v3 + 160;
              v124 = (float *)(v4 + 112);
              v125 = v4 + 176;
              v119 = buf;
              v120 = 2;
              v117 = &v124;
              v118 = 2;
              result = re::AnimationHelper::makeAdditiveForOptionalValueReferences<re::GenericSRT<float>>((re *)&v119, (uint64_t)&v117, (uint64_t)buf, 2uLL);
              goto LABEL_190;
            }
            if (CoreRELog::onceToken != -1)
LABEL_399:
              dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
LABEL_252:
            v11 = (id)CoreRELog::log;
            if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR))
            {
              *(_WORD *)buf = 0;
              v29 = "Currently only supports from-to animations.";
              goto LABEL_48;
            }
          }
        }
        else
        {
          if (CoreRELog::onceToken != -1)
LABEL_401:
            dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
LABEL_290:
          v11 = (id)CoreRELog::log;
          if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR))
          {
            *(_WORD *)buf = 0;
            v29 = "Cannot make additive animation from differing from-to-by durations.";
            goto LABEL_48;
          }
        }
        break;
      case 18:
        v56 = *(_QWORD *)(v4 + 232);
        if (*((_QWORD *)v3 + 29) != v56)
          goto LABEL_212;
        if (!v56)
          goto LABEL_131;
        v57 = (_QWORD *)*((_QWORD *)v3 + 31);
        v58 = *(_QWORD **)(v4 + 248);
        v59 = 16 * v56;
        do
        {
          if (!re::StringID::operator==(v57, v58))
          {
LABEL_212:
            if (CoreRELog::onceToken != -1)
              dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
            v11 = (id)CoreRELog::log;
            if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR))
            {
              *(_WORD *)buf = 0;
              v29 = "Cannot make additive animation from differing from' joints.";
              goto LABEL_48;
            }
            goto LABEL_20;
          }
          v57 += 2;
          v58 += 2;
          v59 -= 16;
        }
        while (v59);
LABEL_131:
        v60 = *(_QWORD *)(v4 + 272);
        if (*((_QWORD *)v3 + 34) != v60)
          goto LABEL_269;
        if (v60)
        {
          v61 = (_QWORD *)*((_QWORD *)v3 + 36);
          v62 = *(_QWORD **)(v4 + 288);
          v63 = 16 * v60;
          while (re::StringID::operator==(v61, v62))
          {
            v61 += 2;
            v62 += 2;
            v63 -= 16;
            if (!v63)
              goto LABEL_136;
          }
LABEL_269:
          if (CoreRELog::onceToken != -1)
            dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
          v11 = (id)CoreRELog::log;
          if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR))
          {
            *(_WORD *)buf = 0;
            v29 = "Cannot make additive animation from differing 'to' joints.";
            goto LABEL_48;
          }
          break;
        }
LABEL_136:
        v64 = *(_QWORD *)(v4 + 312);
        if (*((_QWORD *)v3 + 39) != v64)
          goto LABEL_356;
        if (v64)
        {
          v65 = (_QWORD *)*((_QWORD *)v3 + 41);
          v66 = *(_QWORD **)(v4 + 328);
          v67 = 16 * v64;
          while (re::StringID::operator==(v65, v66))
          {
            v65 += 2;
            v66 += 2;
            v67 -= 16;
            if (!v67)
              goto LABEL_141;
          }
LABEL_356:
          if (CoreRELog::onceToken != -1)
            dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
          v11 = (id)CoreRELog::log;
          if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR))
          {
            *(_WORD *)buf = 0;
            v29 = "Cannot make additive animation from differing 'by' joints.";
            goto LABEL_48;
          }
          break;
        }
LABEL_141:
        if (*((_BYTE *)v3 + 88)
          && *(_BYTE *)(v4 + 88)
          && *((_BYTE *)v3 + 120)
          && *(_BYTE *)(v4 + 120)
          && !*((_BYTE *)v3 + 152)
          && !*(_BYTE *)(v4 + 152))
        {
          if (*((_QWORD *)v3 + 13) == *(_QWORD *)(v4 + 104) && *((_QWORD *)v3 + 17) == *(_QWORD *)(v4 + 136))
          if (CoreRELog::onceToken != -1)
            dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
          v11 = (id)CoreRELog::log;
          if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR))
          {
            *(_WORD *)buf = 0;
            v29 = "Cannot make additive animations from differnt joint transform count.";
            goto LABEL_48;
          }
        }
        else
        {
          if (CoreRELog::onceToken != -1)
            dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
          v11 = (id)CoreRELog::log;
          if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR))
          {
            *(_WORD *)buf = 0;
            v29 = "Currently only supports from-to animations.";
            goto LABEL_48;
          }
        }
        break;
      case 19:
      case 20:
      case 21:
      case 22:
      case 23:
      case 24:
      case 25:
      case 26:
        goto LABEL_43;
      case 27:
        v68 = *((float *)v3 + 19);
        v69 = *(float *)(v4 + 76);
        if (v68 != v69 && vabds_f32(v68, v69) >= (float)((float)((float)(fabsf(v68) + fabsf(v69)) + 1.0) * 0.00001))
        {
          if (CoreRELog::onceToken != -1)
            goto LABEL_400;
          goto LABEL_301;
        }
        v70 = *((float *)v3 + 20);
        v71 = *(float *)(v4 + 80);
        if (v70 != v71 && vabds_f32(v70, v71) >= (float)((float)((float)(fabsf(v70) + fabsf(v71)) + 1.0) * 0.00001))
        {
          if (CoreRELog::onceToken != -1)
            goto LABEL_402;
          goto LABEL_316;
        }
        if (*((unsigned __int8 *)v3 + 73) != *(unsigned __int8 *)(v4 + 73))
        {
          if (CoreRELog::onceToken != -1)
            goto LABEL_398;
          goto LABEL_267;
        }
        v72 = (float *)*((_QWORD *)v3 + 13);
        if (!v72)
        {
          if (CoreRELog::onceToken != -1)
            goto LABEL_403;
          goto LABEL_331;
        }
        if (!(*((unsigned __int8 *)v3 + 72) | *(unsigned __int8 *)(v4 + 72)))
        {
          *(_QWORD *)buf = *((_QWORD *)v3 + 15);
          *(_QWORD *)&buf[8] = v72;
          v73 = *(_QWORD *)(v4 + 104);
          v124 = *(float **)(v4 + 120);
          v125 = v73;
          result = re::AnimationHelper::makeAdditiveForValues<float>((re *)buf, &v124, *(float **)buf, v72);
          goto LABEL_190;
        }
        if (CoreRELog::onceToken != -1)
          goto LABEL_404;
        goto LABEL_350;
      case 28:
        v34 = *((float *)v3 + 19);
        v35 = *(float *)(v4 + 76);
        if (v34 != v35 && vabds_f32(v34, v35) >= (float)((float)((float)(fabsf(v34) + fabsf(v35)) + 1.0) * 0.00001))
        {
          if (CoreRELog::onceToken != -1)
            goto LABEL_400;
          goto LABEL_301;
        }
        v36 = *((float *)v3 + 20);
        v37 = *(float *)(v4 + 80);
        if (v36 != v37 && vabds_f32(v36, v37) >= (float)((float)((float)(fabsf(v36) + fabsf(v37)) + 1.0) * 0.00001))
        {
          if (CoreRELog::onceToken != -1)
            goto LABEL_402;
          goto LABEL_316;
        }
        if (*((unsigned __int8 *)v3 + 73) != *(unsigned __int8 *)(v4 + 73))
        {
          if (CoreRELog::onceToken != -1)
            goto LABEL_398;
          goto LABEL_267;
        }
        v38 = *((_QWORD *)v3 + 13);
        if (!v38)
        {
          if (CoreRELog::onceToken != -1)
            goto LABEL_403;
          goto LABEL_331;
        }
        if (!(*((unsigned __int8 *)v3 + 72) | *(unsigned __int8 *)(v4 + 72)))
        {
          *(_QWORD *)buf = *((_QWORD *)v3 + 15);
          *(_QWORD *)&buf[8] = v38;
          v39 = *(_QWORD *)(v4 + 104);
          v124 = *(float **)(v4 + 120);
          v125 = v39;
          result = re::AnimationHelper::makeAdditiveForValues<double>((re *)buf, (uint64_t)&v124, *(double **)buf, v38);
          goto LABEL_190;
        }
        if (CoreRELog::onceToken != -1)
          goto LABEL_404;
        goto LABEL_350;
      case 29:
        v74 = *((float *)v3 + 19);
        v75 = *(float *)(v4 + 76);
        if (v74 != v75 && vabds_f32(v74, v75) >= (float)((float)((float)(fabsf(v74) + fabsf(v75)) + 1.0) * 0.00001))
        {
          if (CoreRELog::onceToken != -1)
            goto LABEL_400;
          goto LABEL_301;
        }
        v76 = *((float *)v3 + 20);
        v77 = *(float *)(v4 + 80);
        if (v76 != v77 && vabds_f32(v76, v77) >= (float)((float)((float)(fabsf(v76) + fabsf(v77)) + 1.0) * 0.00001))
        {
          if (CoreRELog::onceToken != -1)
            goto LABEL_402;
          goto LABEL_316;
        }
        if (*((unsigned __int8 *)v3 + 73) != *(unsigned __int8 *)(v4 + 73))
        {
          if (CoreRELog::onceToken != -1)
            goto LABEL_398;
          goto LABEL_267;
        }
        v78 = *((_QWORD *)v3 + 13);
        if (!v78)
        {
          if (CoreRELog::onceToken != -1)
            goto LABEL_403;
          goto LABEL_331;
        }
        if (!(*((unsigned __int8 *)v3 + 72) | *(unsigned __int8 *)(v4 + 72)))
        {
          *(_QWORD *)buf = *((_QWORD *)v3 + 15);
          *(_QWORD *)&buf[8] = v78;
          v79 = *(_QWORD *)(v4 + 104);
          v124 = *(float **)(v4 + 120);
          v125 = v79;
          result = re::AnimationHelper::makeAdditiveForValues<re::Vector2<float>>((re *)buf, &v124, *(uint64_t *)buf, v78);
          goto LABEL_190;
        }
        if (CoreRELog::onceToken != -1)
          goto LABEL_404;
        goto LABEL_350;
      case 30:
        v80 = *((float *)v3 + 19);
        v81 = *(float *)(v4 + 76);
        if (v80 != v81 && vabds_f32(v80, v81) >= (float)((float)((float)(fabsf(v80) + fabsf(v81)) + 1.0) * 0.00001))
        {
          if (CoreRELog::onceToken != -1)
            goto LABEL_400;
          goto LABEL_301;
        }
        v82 = *((float *)v3 + 20);
        v83 = *(float *)(v4 + 80);
        if (v82 != v83 && vabds_f32(v82, v83) >= (float)((float)((float)(fabsf(v82) + fabsf(v83)) + 1.0) * 0.00001))
        {
          if (CoreRELog::onceToken != -1)
            goto LABEL_402;
          goto LABEL_316;
        }
        if (*((unsigned __int8 *)v3 + 73) != *(unsigned __int8 *)(v4 + 73))
        {
          if (CoreRELog::onceToken != -1)
            goto LABEL_398;
          goto LABEL_267;
        }
        v84 = *((_QWORD *)v3 + 13);
        if (!v84)
        {
          if (CoreRELog::onceToken != -1)
            goto LABEL_403;
          goto LABEL_331;
        }
        if (!(*((unsigned __int8 *)v3 + 72) | *(unsigned __int8 *)(v4 + 72)))
          goto LABEL_173;
        if (CoreRELog::onceToken != -1)
          goto LABEL_404;
        goto LABEL_350;
      case 31:
        v86 = *((float *)v3 + 19);
        v87 = *(float *)(v4 + 76);
        if (v86 != v87 && vabds_f32(v86, v87) >= (float)((float)((float)(fabsf(v86) + fabsf(v87)) + 1.0) * 0.00001))
        {
          if (CoreRELog::onceToken != -1)
            goto LABEL_400;
          goto LABEL_301;
        }
        v88 = *((float *)v3 + 20);
        v89 = *(float *)(v4 + 80);
        if (v88 != v89 && vabds_f32(v88, v89) >= (float)((float)((float)(fabsf(v88) + fabsf(v89)) + 1.0) * 0.00001))
        {
          if (CoreRELog::onceToken != -1)
            goto LABEL_402;
          goto LABEL_316;
        }
        if (*((unsigned __int8 *)v3 + 73) != *(unsigned __int8 *)(v4 + 73))
        {
          if (CoreRELog::onceToken != -1)
            goto LABEL_398;
          goto LABEL_267;
        }
        v84 = *((_QWORD *)v3 + 13);
        if (!v84)
        {
          if (CoreRELog::onceToken != -1)
            goto LABEL_403;
          goto LABEL_331;
        }
        if (!(*((unsigned __int8 *)v3 + 72) | *(unsigned __int8 *)(v4 + 72)))
        {
LABEL_173:
          *(_QWORD *)buf = *((_QWORD *)v3 + 15);
          *(_QWORD *)&buf[8] = v84;
          v85 = *(_QWORD *)(v4 + 104);
          v124 = *(float **)(v4 + 120);
          v125 = v85;
          result = re::AnimationHelper::makeAdditiveForValues<re::Vector3<float>>((re *)buf, &v124, *(uint64_t *)buf, v84);
          goto LABEL_190;
        }
        if (CoreRELog::onceToken != -1)
          goto LABEL_404;
        goto LABEL_350;
      case 32:
        v90 = *((float *)v3 + 19);
        v91 = *(float *)(v4 + 76);
        if (v90 != v91 && vabds_f32(v90, v91) >= (float)((float)((float)(fabsf(v90) + fabsf(v91)) + 1.0) * 0.00001))
        {
          if (CoreRELog::onceToken != -1)
            goto LABEL_400;
          goto LABEL_301;
        }
        v92 = *((float *)v3 + 20);
        v93 = *(float *)(v4 + 80);
        if (v92 != v93 && vabds_f32(v92, v93) >= (float)((float)((float)(fabsf(v92) + fabsf(v93)) + 1.0) * 0.00001))
        {
          if (CoreRELog::onceToken != -1)
            goto LABEL_402;
          goto LABEL_316;
        }
        if (*((unsigned __int8 *)v3 + 73) != *(unsigned __int8 *)(v4 + 73))
        {
          if (CoreRELog::onceToken != -1)
            goto LABEL_398;
          goto LABEL_267;
        }
        v94 = *((_QWORD *)v3 + 13);
        if (!v94)
        {
          if (CoreRELog::onceToken != -1)
            goto LABEL_403;
          goto LABEL_331;
        }
        if (!(*((unsigned __int8 *)v3 + 72) | *(unsigned __int8 *)(v4 + 72)))
        {
          *(_QWORD *)buf = *((_QWORD *)v3 + 15);
          *(_QWORD *)&buf[8] = v94;
          v95 = *(_QWORD *)(v4 + 104);
          v124 = *(float **)(v4 + 120);
          v125 = v95;
          result = re::AnimationHelper::makeAdditiveForValues<re::Quaternion<float>>((re *)buf, &v124, *(uint64_t *)buf, v94);
          goto LABEL_190;
        }
        if (CoreRELog::onceToken != -1)
          goto LABEL_404;
        goto LABEL_350;
      case 33:
        v40 = *((float *)v3 + 19);
        v41 = *(float *)(v4 + 76);
        if (v40 != v41 && vabds_f32(v40, v41) >= (float)((float)((float)(fabsf(v40) + fabsf(v41)) + 1.0) * 0.00001))
        {
          if (CoreRELog::onceToken != -1)
            goto LABEL_400;
          goto LABEL_301;
        }
        v42 = *((float *)v3 + 20);
        v43 = *(float *)(v4 + 80);
        if (v42 != v43 && vabds_f32(v42, v43) >= (float)((float)((float)(fabsf(v42) + fabsf(v43)) + 1.0) * 0.00001))
        {
          if (CoreRELog::onceToken != -1)
            goto LABEL_402;
          goto LABEL_316;
        }
        if (*((unsigned __int8 *)v3 + 73) != *(unsigned __int8 *)(v4 + 73))
        {
          if (CoreRELog::onceToken != -1)
            goto LABEL_398;
          goto LABEL_267;
        }
        v44 = *((_QWORD *)v3 + 13);
        if (!v44)
        {
          if (CoreRELog::onceToken != -1)
            goto LABEL_403;
          goto LABEL_331;
        }
        if (!(*((unsigned __int8 *)v3 + 72) | *(unsigned __int8 *)(v4 + 72)))
        {
          *(_QWORD *)buf = *((_QWORD *)v3 + 15);
          *(_QWORD *)&buf[8] = v44;
          v45 = *(_QWORD *)(v4 + 104);
          v124 = *(float **)(v4 + 120);
          v125 = v45;
          result = re::AnimationHelper::makeAdditiveForValues<re::GenericSRT<float>>((re *)buf, (uint64_t)&v124, *(uint64_t *)buf, v44);
          goto LABEL_190;
        }
        if (CoreRELog::onceToken != -1)
          goto LABEL_404;
        goto LABEL_350;
      case 34:
        v96 = *(_QWORD *)(v4 + 168);
        if (*((_QWORD *)v3 + 21) != v96)
          goto LABEL_216;
        if (!v96)
          goto LABEL_196;
        v97 = (_QWORD *)*((_QWORD *)v3 + 23);
        v98 = *(_QWORD **)(v4 + 184);
        v99 = 16 * v96;
        do
        {
          if (!re::StringID::operator==(v97, v98))
          {
LABEL_216:
            if (CoreRELog::onceToken != -1)
              dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
            v11 = (id)CoreRELog::log;
            if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR))
            {
              *(_WORD *)buf = 0;
              v29 = "Cannot make additive sampled animation from non-matching joints.";
              goto LABEL_48;
            }
            goto LABEL_20;
          }
          v97 += 2;
          v98 += 2;
          v99 -= 16;
        }
        while (v99);
LABEL_196:
        v100 = (uint64_t *)*((_QWORD *)v3 + 13);
        if (v100)
        {
          v101 = 0;
          v102 = (uint64_t)v3 + 88;
          v103 = (uint64_t *)(*((_QWORD *)v3 + 15) + 8);
          while (1)
          {
            v104 = *v103;
            v103 += 3;
            if (v96 != v104)
              break;
            if (v100 == (uint64_t *)++v101)
              goto LABEL_200;
          }
          if (CoreRELog::onceToken != -1)
            dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
          v11 = (id)CoreRELog::log;
          if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR))
          {
            v113 = *(_QWORD *)(re::DynamicArray<re::SkeletalPoseAssetData>::operator[](v102, v101) + 8);
            *(_DWORD *)buf = 134218496;
            *(_QWORD *)&buf[4] = v101;
            *(_WORD *)&buf[12] = 2048;
            *(_QWORD *)&buf[14] = v96;
            v122 = 2048;
            v123 = v113;
            v29 = "Joint transform for frame %zu do not match joint count (%zu != %zu).";
LABEL_368:
            v30 = v11;
            v31 = 32;
            goto LABEL_49;
          }
          break;
        }
LABEL_200:
        v105 = *(_QWORD *)(v4 + 104);
        if (v105)
        {
          v106 = 0;
          v107 = (uint64_t *)(*(_QWORD *)(v4 + 120) + 8);
          while (1)
          {
            v108 = *v107;
            v107 += 3;
            if (v96 != v108)
              break;
            if (v105 == ++v106)
              goto LABEL_204;
          }
          if (CoreRELog::onceToken != -1)
            dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
          v11 = (id)CoreRELog::log;
          if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR))
          {
            v115 = *(_QWORD *)(re::DynamicArray<re::AssetHandle>::operator[](v4 + 88, v106) + 8);
            *(_DWORD *)buf = 134218496;
            *(_QWORD *)&buf[4] = v106;
            *(_WORD *)&buf[12] = 2048;
            *(_QWORD *)&buf[14] = v96;
            v122 = 2048;
            v123 = v115;
            v29 = "Base joint transform for frame %zu do not match joint count (%zu != %zu).";
            goto LABEL_368;
          }
          break;
        }
LABEL_204:
        v109 = *((float *)v3 + 19);
        v110 = *(float *)(v4 + 76);
        if (v109 != v110
          && vabds_f32(v109, v110) >= (float)((float)((float)(fabsf(v109) + fabsf(v110)) + 1.0) * 0.00001))
        {
          if (CoreRELog::onceToken != -1)
LABEL_400:
            dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
          goto LABEL_301;
        }
        v111 = *((float *)v3 + 20);
        v112 = *(float *)(v4 + 80);
        if (v111 != v112
          && vabds_f32(v111, v112) >= (float)((float)((float)(fabsf(v111) + fabsf(v112)) + 1.0) * 0.00001))
        {
          if (CoreRELog::onceToken != -1)
LABEL_402:
            dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
          goto LABEL_316;
        }
        if (*((unsigned __int8 *)v3 + 73) != *(unsigned __int8 *)(v4 + 73))
        {
          if (CoreRELog::onceToken != -1)
LABEL_398:
            dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
          goto LABEL_267;
        }
        if (!v100)
        {
          if (CoreRELog::onceToken != -1)
LABEL_403:
            dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
          goto LABEL_331;
        }
        if (!(*((unsigned __int8 *)v3 + 72) | *(unsigned __int8 *)(v4 + 72)))
        {
          *(_QWORD *)buf = *((_QWORD *)v3 + 15);
          *(_QWORD *)&buf[8] = v100;
          v124 = *(float **)(v4 + 120);
          v125 = v105;
          result = re::AnimationHelper::makeAdditiveForValues<re::SkeletalPoseAssetData>((re *)buf, (uint64_t *)&v124, *(uint64_t *)buf, v100);
LABEL_190:
          *((_BYTE *)v3 + 72) = result;
          return result;
        }
        if (CoreRELog::onceToken != -1)
LABEL_404:
          dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
        goto LABEL_350;
      default:
        if (v6 != 59)
        {
LABEL_43:
          if (CoreRELog::onceToken != -1)
            dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
          v11 = (id)CoreRELog::log;
          if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR))
          {
            *(_WORD *)buf = 0;
            v29 = "Unsupported additive animation type.";
            goto LABEL_48;
          }
          break;
        }
        v12 = *(_QWORD *)(v4 + 144);
        if (*((_QWORD *)v3 + 18) != v12)
          goto LABEL_220;
        if (!v12)
          goto LABEL_27;
        v13 = (_QWORD *)*((_QWORD *)v3 + 20);
        v14 = *(_QWORD **)(v4 + 160);
        v15 = 16 * v12;
        do
        {
          if (!re::StringID::operator==(v13, v14))
          {
LABEL_220:
            if (CoreRELog::onceToken != -1)
              dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
            v11 = (id)CoreRELog::log;
            if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR))
            {
              *(_WORD *)buf = 0;
              v29 = "Cannot make additive sampled animation from non-matching weights.";
              goto LABEL_48;
            }
            goto LABEL_20;
          }
          v13 += 2;
          v14 += 2;
          v15 -= 16;
        }
        while (v15);
LABEL_27:
        v16 = (_QWORD *)*((_QWORD *)v3 + 13);
        if (v16)
        {
          v17 = 0;
          v18 = (uint64_t)v3 + 88;
          v19 = (uint64_t *)(*((_QWORD *)v3 + 15) + 8);
          while (1)
          {
            v20 = *v19;
            v19 += 3;
            if (v12 != v20)
              break;
            if (v16 == (_QWORD *)++v17)
              goto LABEL_31;
          }
          if (CoreRELog::onceToken != -1)
            dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
          v11 = (id)CoreRELog::log;
          if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR))
          {
            v114 = *(_QWORD *)(re::DynamicArray<re::SkeletalPoseAssetData>::operator[](v18, v17) + 8);
            *(_DWORD *)buf = 134218496;
            *(_QWORD *)&buf[4] = v17;
            *(_WORD *)&buf[12] = 2048;
            *(_QWORD *)&buf[14] = v12;
            v122 = 2048;
            v123 = v114;
            v29 = "Weights for frame %zu do not match weight count (%zu != %zu).";
            goto LABEL_368;
          }
        }
        else
        {
LABEL_31:
          v21 = *(_QWORD *)(v4 + 104);
          if (v21)
          {
            v22 = 0;
            v23 = (uint64_t *)(*(_QWORD *)(v4 + 120) + 8);
            while (1)
            {
              v24 = *v23;
              v23 += 3;
              if (v12 != v24)
                break;
              if (v21 == ++v22)
                goto LABEL_35;
            }
            if (CoreRELog::onceToken != -1)
              dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
            v11 = (id)CoreRELog::log;
            if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR))
            {
              v116 = *(_QWORD *)(re::DynamicArray<re::AssetHandle>::operator[](v4 + 88, v22) + 8);
              *(_DWORD *)buf = 134218496;
              *(_QWORD *)&buf[4] = v22;
              *(_WORD *)&buf[12] = 2048;
              *(_QWORD *)&buf[14] = v12;
              v122 = 2048;
              v123 = v116;
              v29 = "Base weights for frame %zu do not match weight count (%zu != %zu).";
              goto LABEL_368;
            }
          }
          else
          {
LABEL_35:
            v25 = *((float *)v3 + 19);
            v26 = *(float *)(v4 + 76);
            if (v25 == v26 || vabds_f32(v25, v26) < (float)((float)((float)(fabsf(v25) + fabsf(v26)) + 1.0) * 0.00001))
            {
              v27 = *((float *)v3 + 20);
              v28 = *(float *)(v4 + 80);
              if (v27 == v28
                || vabds_f32(v27, v28) < (float)((float)((float)(fabsf(v27) + fabsf(v28)) + 1.0) * 0.00001))
              {
                if (*((unsigned __int8 *)v3 + 73) == *(unsigned __int8 *)(v4 + 73))
                {
                  if (v16)
                  {
                    if (!(*((unsigned __int8 *)v3 + 72) | *(unsigned __int8 *)(v4 + 72)))
                    {
                      *(_QWORD *)buf = *((_QWORD *)v3 + 15);
                      *(_QWORD *)&buf[8] = v16;
                      v124 = *(float **)(v4 + 120);
                      v125 = v21;
                      result = re::AnimationHelper::makeAdditiveForValues<re::BlendShapeWeightsAssetData>((re *)buf, &v124, *(uint64_t *)buf, v16);
                      goto LABEL_190;
                    }
                    if (CoreRELog::onceToken != -1)
                      goto LABEL_404;
LABEL_350:
                    v11 = (id)CoreRELog::log;
                    if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR))
                    {
                      *(_WORD *)buf = 0;
                      v29 = "Cannot make additive sampled animation from existing additive animation.";
                      goto LABEL_48;
                    }
                  }
                  else
                  {
                    if (CoreRELog::onceToken != -1)
                      goto LABEL_403;
LABEL_331:
                    v11 = (id)CoreRELog::log;
                    if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR))
                    {
                      *(_WORD *)buf = 0;
                      v29 = "Cannot make additive sampled animation from empty animation.";
                      goto LABEL_48;
                    }
                  }
                }
                else
                {
                  if (CoreRELog::onceToken != -1)
                    goto LABEL_398;
LABEL_267:
                  v11 = (id)CoreRELog::log;
                  if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR))
                  {
                    *(_WORD *)buf = 0;
                    v29 = "Cannot make additive sampled animation from differing interpolation settings.";
                    goto LABEL_48;
                  }
                }
              }
              else
              {
                if (CoreRELog::onceToken != -1)
                  goto LABEL_402;
LABEL_316:
                v11 = (id)CoreRELog::log;
                if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR))
                {
                  *(_WORD *)buf = 0;
                  v29 = "Cannot make additive sampled animation from differing start times.";
                  goto LABEL_48;
                }
              }
            }
            else
            {
              if (CoreRELog::onceToken != -1)
                goto LABEL_400;
LABEL_301:
              v11 = (id)CoreRELog::log;
              if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR))
              {
                *(_WORD *)buf = 0;
                v29 = "Cannot make additive sampled animation from differing intervals.";
                goto LABEL_48;
              }
            }
          }
        }
        break;
    }
  }
  else
  {
    if (CoreRELog::onceToken != -1)
      dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
    v11 = (id)CoreRELog::log;
    if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      v29 = "Unable to make additive animation from differing timeline types.";
LABEL_48:
      v30 = v11;
      v31 = 2;
LABEL_49:
      _os_log_error_impl(&dword_224FE9000, v30, OS_LOG_TYPE_ERROR, v29, buf, v31);
    }
  }
LABEL_20:

  return 0;
}

uint64_t RETimelineDefinitionMakeAdditiveFromBaseFloat(_anonymous_namespace_::TimelineDefinition *a1, float a2)
{
  _anonymous_namespace_ *v2;
  double v3;
  _anonymous_namespace_ *v4;
  int v5;
  NSObject *v6;
  const char *v7;
  uint64_t result;
  float *v9;
  float v10;
  _QWORD v11[2];
  float *v12;
  uint8_t buf[8];
  uint64_t v14;
  float *v15;
  float *v16;
  uint64_t v17;

  v17 = *MEMORY[0x24BDAC8D0];
  v10 = a2;
  v4 = v2;
  v5 = *((_DWORD *)v2 + 2);
  if (v5 == 27)
  {
    if (*((_BYTE *)v2 + 72))
    {
      if (CoreRELog::onceToken != -1)
        dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
      v6 = (id)CoreRELog::log;
      if (!os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
        goto LABEL_16;
      *(_WORD *)buf = 0;
      v7 = "Cannot make additive sampled animation from existing additive animation.";
      goto LABEL_26;
    }
    v9 = (float *)*((_QWORD *)v2 + 13);
    v15 = (float *)*((_QWORD *)v2 + 15);
    v16 = v9;
    *(_QWORD *)buf = &v10;
    v14 = 1;
    result = re::AnimationHelper::makeAdditiveForValues<float>((re *)&v15, (float **)buf, v15, v9);
  }
  else
  {
    if (v5 != 11)
    {
      if (CoreRELog::onceToken != -1)
        dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
      v6 = (id)CoreRELog::log;
      if (!os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
        goto LABEL_16;
      *(_WORD *)buf = 0;
      v7 = "Unsupported additive float animation type.";
      goto LABEL_26;
    }
    if (*((_BYTE *)v2 + 72))
    {
      if (CoreRELog::onceToken != -1)
        dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
      v6 = (id)CoreRELog::log;
      if (!os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
        goto LABEL_16;
      *(_WORD *)buf = 0;
      v7 = "Cannot make additive animation from existing additive from-to-by animation.";
LABEL_26:
      _os_log_error_impl(&dword_224FE9000, v6, OS_LOG_TYPE_ERROR, v7, buf, 2u);
LABEL_16:

      return 0;
    }
    if (*((_BYTE *)v2 + 104))
    {
      if (CoreRELog::onceToken != -1)
        dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
      v6 = (id)CoreRELog::log;
      if (!os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
        goto LABEL_16;
      *(_WORD *)buf = 0;
      v7 = "From-to-by animation with by value is already an additive animation.";
      goto LABEL_26;
    }
    v15 = (float *)((char *)v2 + 88);
    v16 = (float *)((char *)v2 + 96);
    v11[0] = &v15;
    v11[1] = 2;
    v12 = &v10;
    *(_QWORD *)buf = &v12;
    v14 = 1;
    result = re::AnimationHelper::makeAdditiveForOptionalValueReferences<float>((re *)v11, (uint64_t)buf, (uint64_t)&v15, 2uLL, v3);
  }
  *((_BYTE *)v4 + 72) = result;
  return result;
}

uint64_t RETimelineDefinitionMakeAdditiveFromBaseDouble(_anonymous_namespace_::TimelineDefinition *a1, double a2)
{
  _anonymous_namespace_ *v2;
  _anonymous_namespace_ *v3;
  int v4;
  NSObject *v5;
  const char *v6;
  uint64_t result;
  unint64_t v8;
  double v9;
  _QWORD v10[2];
  double *v11;
  uint8_t buf[8];
  uint64_t v13;
  double *v14;
  char *v15;
  uint64_t v16;

  v16 = *MEMORY[0x24BDAC8D0];
  v9 = a2;
  v3 = v2;
  v4 = *((_DWORD *)v2 + 2);
  if (v4 == 28)
  {
    if (*((_BYTE *)v2 + 72))
    {
      if (CoreRELog::onceToken != -1)
        dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
      v5 = (id)CoreRELog::log;
      if (!os_log_type_enabled(v5, OS_LOG_TYPE_ERROR))
        goto LABEL_16;
      *(_WORD *)buf = 0;
      v6 = "Cannot make additive sampled animation from existing additive animation.";
      goto LABEL_26;
    }
    v8 = *((_QWORD *)v2 + 13);
    v14 = (double *)*((_QWORD *)v2 + 15);
    v15 = (char *)v8;
    *(_QWORD *)buf = &v9;
    v13 = 1;
    result = re::AnimationHelper::makeAdditiveForValues<double>((re *)&v14, (uint64_t)buf, v14, v8);
  }
  else
  {
    if (v4 != 12)
    {
      if (CoreRELog::onceToken != -1)
        dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
      v5 = (id)CoreRELog::log;
      if (!os_log_type_enabled(v5, OS_LOG_TYPE_ERROR))
        goto LABEL_16;
      *(_WORD *)buf = 0;
      v6 = "Unsupported additive double animation type.";
      goto LABEL_26;
    }
    if (*((_BYTE *)v2 + 72))
    {
      if (CoreRELog::onceToken != -1)
        dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
      v5 = (id)CoreRELog::log;
      if (!os_log_type_enabled(v5, OS_LOG_TYPE_ERROR))
        goto LABEL_16;
      *(_WORD *)buf = 0;
      v6 = "Cannot make additive animation from existing additive from-to-by animation.";
LABEL_26:
      _os_log_error_impl(&dword_224FE9000, v5, OS_LOG_TYPE_ERROR, v6, buf, 2u);
LABEL_16:

      return 0;
    }
    if (*((_BYTE *)v2 + 120))
    {
      if (CoreRELog::onceToken != -1)
        dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
      v5 = (id)CoreRELog::log;
      if (!os_log_type_enabled(v5, OS_LOG_TYPE_ERROR))
        goto LABEL_16;
      *(_WORD *)buf = 0;
      v6 = "From-to-by animation with by value is already an additive animation.";
      goto LABEL_26;
    }
    v14 = (double *)((char *)v2 + 88);
    v15 = (char *)v2 + 104;
    v10[0] = &v14;
    v10[1] = 2;
    v11 = &v9;
    *(_QWORD *)buf = &v11;
    v13 = 1;
    result = re::AnimationHelper::makeAdditiveForOptionalValueReferences<double>((re *)v10, (uint64_t)buf, (uint64_t)&v14, 2uLL);
  }
  *((_BYTE *)v3 + 72) = result;
  return result;
}

uint64_t RETimelineDefinitionMakeAdditiveFromBaseFloat2(_anonymous_namespace_::TimelineDefinition *a1, double a2)
{
  _anonymous_namespace_ *v3;
  _anonymous_namespace_ *v4;
  int v5;
  NSObject *v6;
  const char *v7;
  uint64_t result;
  unint64_t v9;
  double v10;
  _QWORD v11[2];
  double *v12;
  uint8_t buf[8];
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;

  v17 = *MEMORY[0x24BDAC8D0];
  v4 = v3;
  v5 = *((_DWORD *)v3 + 2);
  if (v5 == 29)
  {
    *(double *)v11 = a2;
    if (*((_BYTE *)v3 + 72))
    {
      if (CoreRELog::onceToken != -1)
        dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
      v6 = (id)CoreRELog::log;
      if (!os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
        goto LABEL_16;
      *(_WORD *)buf = 0;
      v7 = "Cannot make additive sampled animation from existing additive animation.";
      goto LABEL_26;
    }
    v9 = *((_QWORD *)v3 + 13);
    v15 = *((_QWORD *)v3 + 15);
    v16 = (char *)v9;
    *(_QWORD *)buf = v11;
    v14 = 1;
    result = re::AnimationHelper::makeAdditiveForValues<re::Vector2<float>>((re *)&v15, buf, v15, v9);
  }
  else
  {
    if (v5 != 13)
    {
      if (CoreRELog::onceToken != -1)
        dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
      v6 = (id)CoreRELog::log;
      if (!os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
        goto LABEL_16;
      *(_WORD *)buf = 0;
      v7 = "Unsupported additive float2 animation type.";
      goto LABEL_26;
    }
    v10 = a2;
    if (*((_BYTE *)v3 + 72))
    {
      if (CoreRELog::onceToken != -1)
        dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
      v6 = (id)CoreRELog::log;
      if (!os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
        goto LABEL_16;
      *(_WORD *)buf = 0;
      v7 = "Cannot make additive animation from existing additive from-to-by animation.";
LABEL_26:
      _os_log_error_impl(&dword_224FE9000, v6, OS_LOG_TYPE_ERROR, v7, buf, 2u);
LABEL_16:

      return 0;
    }
    if (*((_BYTE *)v3 + 120))
    {
      if (CoreRELog::onceToken != -1)
        dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
      v6 = (id)CoreRELog::log;
      if (!os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
        goto LABEL_16;
      *(_WORD *)buf = 0;
      v7 = "From-to-by animation with by value is already an additive animation.";
      goto LABEL_26;
    }
    v15 = (uint64_t)v3 + 88;
    v16 = (char *)v3 + 104;
    v11[0] = &v15;
    v11[1] = 2;
    v12 = &v10;
    *(_QWORD *)buf = &v12;
    v14 = 1;
    result = re::AnimationHelper::makeAdditiveForOptionalValueReferences<re::Vector2<float>>((re *)v11, buf, (uint64_t)&v15, 2uLL);
  }
  *((_BYTE *)v4 + 72) = result;
  return result;
}

uint64_t RETimelineDefinitionMakeAdditiveFromBaseFloat3(_anonymous_namespace_::TimelineDefinition *a1, __n128 a2)
{
  _anonymous_namespace_ *v2;
  _anonymous_namespace_ *v3;
  int v4;
  NSObject *v5;
  const char *v6;
  uint64_t result;
  unint64_t v8;
  __n128 v10;
  __n128 v11;
  __n128 *v12;
  uint8_t buf[8];
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;

  v17 = *MEMORY[0x24BDAC8D0];
  v3 = v2;
  v4 = *((_DWORD *)v2 + 2);
  if (v4 == 30)
  {
    v11 = a2;
    if (*((_BYTE *)v2 + 72))
    {
      if (CoreRELog::onceToken != -1)
        dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
      v5 = (id)CoreRELog::log;
      if (!os_log_type_enabled(v5, OS_LOG_TYPE_ERROR))
        goto LABEL_16;
      *(_WORD *)buf = 0;
      v6 = "Cannot make additive sampled animation from existing additive animation.";
      goto LABEL_26;
    }
    v8 = *((_QWORD *)v2 + 13);
    v15 = *((_QWORD *)v2 + 15);
    v16 = (char *)v8;
    *(_QWORD *)buf = &v11;
    v14 = 1;
    result = re::AnimationHelper::makeAdditiveForValues<re::Vector3<float>>((re *)&v15, buf, v15, v8);
  }
  else
  {
    if (v4 != 14)
    {
      if (CoreRELog::onceToken != -1)
        dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
      v5 = (id)CoreRELog::log;
      if (!os_log_type_enabled(v5, OS_LOG_TYPE_ERROR))
        goto LABEL_16;
      *(_WORD *)buf = 0;
      v6 = "Unsupported additive float3 animation type.";
      goto LABEL_26;
    }
    v10 = a2;
    if (*((_BYTE *)v2 + 72))
    {
      if (CoreRELog::onceToken != -1)
        dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
      v5 = (id)CoreRELog::log;
      if (!os_log_type_enabled(v5, OS_LOG_TYPE_ERROR))
        goto LABEL_16;
      *(_WORD *)buf = 0;
      v6 = "Cannot make additive animation from existing additive from-to-by animation.";
LABEL_26:
      _os_log_error_impl(&dword_224FE9000, v5, OS_LOG_TYPE_ERROR, v6, buf, 2u);
LABEL_16:

      return 0;
    }
    if (*((_BYTE *)v2 + 160))
    {
      if (CoreRELog::onceToken != -1)
        dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
      v5 = (id)CoreRELog::log;
      if (!os_log_type_enabled(v5, OS_LOG_TYPE_ERROR))
        goto LABEL_16;
      *(_WORD *)buf = 0;
      v6 = "From-to-by animation with by value is already an additive animation.";
      goto LABEL_26;
    }
    v15 = (uint64_t)v2 + 96;
    v16 = (char *)v2 + 128;
    v11.n128_u64[0] = (unint64_t)&v15;
    v11.n128_u64[1] = 2;
    v12 = &v10;
    *(_QWORD *)buf = &v12;
    v14 = 1;
    result = re::AnimationHelper::makeAdditiveForOptionalValueReferences<re::Vector3<float>>((re *)&v11, buf, (uint64_t)&v15, 2uLL);
  }
  *((_BYTE *)v3 + 72) = result;
  return result;
}

uint64_t RETimelineDefinitionMakeAdditiveFromBaseFloat4(_anonymous_namespace_::TimelineDefinition *a1, __n128 a2)
{
  _anonymous_namespace_ *v2;
  _anonymous_namespace_ *v3;
  int v4;
  NSObject *v5;
  const char *v6;
  uint64_t result;
  unint64_t v8;
  __n128 v10;
  __n128 v11;
  __n128 *v12;
  uint8_t buf[8];
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;

  v17 = *MEMORY[0x24BDAC8D0];
  v3 = v2;
  v4 = *((_DWORD *)v2 + 2);
  if (v4 == 31)
  {
    v11 = a2;
    if (*((_BYTE *)v2 + 72))
    {
      if (CoreRELog::onceToken != -1)
        dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
      v5 = (id)CoreRELog::log;
      if (!os_log_type_enabled(v5, OS_LOG_TYPE_ERROR))
        goto LABEL_16;
      *(_WORD *)buf = 0;
      v6 = "Cannot make additive sampled animation from existing additive animation.";
      goto LABEL_26;
    }
    v8 = *((_QWORD *)v2 + 13);
    v15 = *((_QWORD *)v2 + 15);
    v16 = (char *)v8;
    *(_QWORD *)buf = &v11;
    v14 = 1;
    result = re::AnimationHelper::makeAdditiveForValues<re::Vector3<float>>((re *)&v15, buf, v15, v8);
  }
  else
  {
    if (v4 != 15)
    {
      if (CoreRELog::onceToken != -1)
        dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
      v5 = (id)CoreRELog::log;
      if (!os_log_type_enabled(v5, OS_LOG_TYPE_ERROR))
        goto LABEL_16;
      *(_WORD *)buf = 0;
      v6 = "Unsupported additive float4 animation type.";
      goto LABEL_26;
    }
    v10 = a2;
    if (*((_BYTE *)v2 + 72))
    {
      if (CoreRELog::onceToken != -1)
        dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
      v5 = (id)CoreRELog::log;
      if (!os_log_type_enabled(v5, OS_LOG_TYPE_ERROR))
        goto LABEL_16;
      *(_WORD *)buf = 0;
      v6 = "Cannot make additive animation from existing additive from-to-by animation.";
LABEL_26:
      _os_log_error_impl(&dword_224FE9000, v5, OS_LOG_TYPE_ERROR, v6, buf, 2u);
LABEL_16:

      return 0;
    }
    if (*((_BYTE *)v2 + 160))
    {
      if (CoreRELog::onceToken != -1)
        dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
      v5 = (id)CoreRELog::log;
      if (!os_log_type_enabled(v5, OS_LOG_TYPE_ERROR))
        goto LABEL_16;
      *(_WORD *)buf = 0;
      v6 = "From-to-by animation with by value is already an additive animation.";
      goto LABEL_26;
    }
    v15 = (uint64_t)v2 + 96;
    v16 = (char *)v2 + 128;
    v11.n128_u64[0] = (unint64_t)&v15;
    v11.n128_u64[1] = 2;
    v12 = &v10;
    *(_QWORD *)buf = &v12;
    v14 = 1;
    result = re::AnimationHelper::makeAdditiveForOptionalValueReferences<re::Vector3<float>>((re *)&v11, buf, (uint64_t)&v15, 2uLL);
  }
  *((_BYTE *)v3 + 72) = result;
  return result;
}

uint64_t RETimelineDefinitionMakeAdditiveFromBaseQuaternion(_anonymous_namespace_::TimelineDefinition *a1, __n128 a2)
{
  _anonymous_namespace_ *v2;
  _anonymous_namespace_ *v3;
  int v4;
  NSObject *v5;
  const char *v6;
  uint64_t result;
  unint64_t v8;
  __n128 v10;
  __n128 v11;
  __n128 *v12;
  uint8_t buf[8];
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;

  v17 = *MEMORY[0x24BDAC8D0];
  v3 = v2;
  v4 = *((_DWORD *)v2 + 2);
  if (v4 == 32)
  {
    v11 = a2;
    if (*((_BYTE *)v2 + 72))
    {
      if (CoreRELog::onceToken != -1)
        dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
      v5 = (id)CoreRELog::log;
      if (!os_log_type_enabled(v5, OS_LOG_TYPE_ERROR))
        goto LABEL_16;
      *(_WORD *)buf = 0;
      v6 = "Cannot make additive sampled animation from existing additive animation.";
      goto LABEL_26;
    }
    v8 = *((_QWORD *)v2 + 13);
    v15 = *((_QWORD *)v2 + 15);
    v16 = (char *)v8;
    *(_QWORD *)buf = &v11;
    v14 = 1;
    result = re::AnimationHelper::makeAdditiveForValues<re::Quaternion<float>>((re *)&v15, buf, v15, v8);
  }
  else
  {
    if (v4 != 16)
    {
      if (CoreRELog::onceToken != -1)
        dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
      v5 = (id)CoreRELog::log;
      if (!os_log_type_enabled(v5, OS_LOG_TYPE_ERROR))
        goto LABEL_16;
      *(_WORD *)buf = 0;
      v6 = "Unsupported additive quaternion animation type.";
      goto LABEL_26;
    }
    v10 = a2;
    if (*((_BYTE *)v2 + 72))
    {
      if (CoreRELog::onceToken != -1)
        dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
      v5 = (id)CoreRELog::log;
      if (!os_log_type_enabled(v5, OS_LOG_TYPE_ERROR))
        goto LABEL_16;
      *(_WORD *)buf = 0;
      v6 = "Cannot make additive animation from existing additive from-to-by animation.";
LABEL_26:
      _os_log_error_impl(&dword_224FE9000, v5, OS_LOG_TYPE_ERROR, v6, buf, 2u);
LABEL_16:

      return 0;
    }
    if (*((_BYTE *)v2 + 160))
    {
      if (CoreRELog::onceToken != -1)
        dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
      v5 = (id)CoreRELog::log;
      if (!os_log_type_enabled(v5, OS_LOG_TYPE_ERROR))
        goto LABEL_16;
      *(_WORD *)buf = 0;
      v6 = "From-to-by animation with by value is already an additive animation.";
      goto LABEL_26;
    }
    v15 = (uint64_t)v2 + 96;
    v16 = (char *)v2 + 128;
    v11.n128_u64[0] = (unint64_t)&v15;
    v11.n128_u64[1] = 2;
    v12 = &v10;
    *(_QWORD *)buf = &v12;
    v14 = 1;
    result = re::AnimationHelper::makeAdditiveForOptionalValueReferences<re::Quaternion<float>>((re *)&v11, buf, (uint64_t)&v15, 2uLL);
  }
  *((_BYTE *)v3 + 72) = result;
  return result;
}

uint64_t RETimelineDefinitionMakeAdditiveFromBaseSRT(_anonymous_namespace_::TimelineDefinition *a1, __n128 a2, __n128 a3, __n128 a4)
{
  _anonymous_namespace_ *v4;
  _anonymous_namespace_ *v5;
  int v6;
  NSObject *v7;
  const char *v8;
  uint64_t result;
  unint64_t v10;
  _OWORD v11[3];
  _QWORD v12[2];
  _OWORD *v13;
  uint8_t buf[8];
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;

  v18 = *MEMORY[0x24BDAC8D0];
  v11[0] = a2;
  v11[1] = a3;
  v11[2] = a4;
  v5 = v4;
  v6 = *((_DWORD *)v4 + 2);
  if (v6 == 33)
  {
    if (*((_BYTE *)v4 + 72))
    {
      if (CoreRELog::onceToken != -1)
        dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
      v7 = (id)CoreRELog::log;
      if (!os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
        goto LABEL_16;
      *(_WORD *)buf = 0;
      v8 = "Cannot make additive sampled animation from existing additive animation.";
      goto LABEL_26;
    }
    v10 = *((_QWORD *)v4 + 13);
    v16 = *((_QWORD *)v4 + 15);
    v17 = (char *)v10;
    *(_QWORD *)buf = v11;
    v15 = 1;
    result = re::AnimationHelper::makeAdditiveForValues<re::GenericSRT<float>>((re *)&v16, (uint64_t)buf, v16, v10);
  }
  else
  {
    if (v6 != 17)
    {
      if (CoreRELog::onceToken != -1)
        dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
      v7 = (id)CoreRELog::log;
      if (!os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
        goto LABEL_16;
      *(_WORD *)buf = 0;
      v8 = "Unsupported additive SRT animation type.";
      goto LABEL_26;
    }
    if (*((_BYTE *)v4 + 72))
    {
      if (CoreRELog::onceToken != -1)
        dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
      v7 = (id)CoreRELog::log;
      if (!os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
        goto LABEL_16;
      *(_WORD *)buf = 0;
      v8 = "Cannot make additive animation from existing additive from-to-by animation.";
LABEL_26:
      _os_log_error_impl(&dword_224FE9000, v7, OS_LOG_TYPE_ERROR, v8, buf, 2u);
LABEL_16:

      return 0;
    }
    if (*((_BYTE *)v4 + 224))
    {
      if (CoreRELog::onceToken != -1)
        dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
      v7 = (id)CoreRELog::log;
      if (!os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
        goto LABEL_16;
      *(_WORD *)buf = 0;
      v8 = "From-to-by animation with by value is already an additive animation.";
      goto LABEL_26;
    }
    v16 = (uint64_t)v4 + 96;
    v17 = (char *)v4 + 160;
    v12[0] = &v16;
    v12[1] = 2;
    v13 = v11;
    *(_QWORD *)buf = &v13;
    v15 = 1;
    result = re::AnimationHelper::makeAdditiveForOptionalValueReferences<re::GenericSRT<float>>((re *)v12, (uint64_t)buf, (uint64_t)&v16, 2uLL);
  }
  *((_BYTE *)v5 + 72) = result;
  return result;
}

uint64_t RETimelineDefinitionMakeAdditiveFromBaseSkeletalPose(_anonymous_namespace_::TimelineDefinition *a1, uint64_t a2, uint64_t a3)
{
  _anonymous_namespace_ *v5;
  _anonymous_namespace_ *v6;
  int v7;
  BOOL v8;
  uint64_t *v9;
  NSObject *v10;
  const char *v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  NSObject *v16;
  const char *v17;
  uint64_t v18;
  uint64_t *v20;
  uint64_t v21;
  _QWORD v22[2];
  uint8_t *v23;
  uint8_t buf[8];
  uint64_t v25;
  uint64_t v26;
  uint8_t v27[8];
  uint64_t v28;
  uint64_t v29;
  uint64_t *v30;
  uint64_t v31;

  v31 = *MEMORY[0x24BDAC8D0];
  v6 = v5;
  v7 = *((_DWORD *)v5 + 2);
  if (v7 == 34)
  {
    if (*((_QWORD *)v5 + 21) != a3)
    {
      if (CoreRELog::onceToken != -1)
        dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
      v10 = (id)CoreRELog::log;
      if (!os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
        goto LABEL_46;
      *(_WORD *)buf = 0;
      v11 = "Cannot make additive animation, number of joints do not match joint count.";
      goto LABEL_45;
    }
    v12 = *((_QWORD *)v5 + 13);
    if (v12)
    {
      v13 = (uint64_t *)(*((_QWORD *)v5 + 15) + 8);
      v14 = 24 * v12;
      while (1)
      {
        v15 = *v13;
        v13 += 3;
        if (v15 != a3)
          break;
        v14 -= 24;
        if (!v14)
          goto LABEL_19;
      }
      if (CoreRELog::onceToken != -1)
        dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
      v10 = (id)CoreRELog::log;
      if (!os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
        goto LABEL_46;
      *(_WORD *)buf = 0;
      v11 = "Cannot make additive animation, number of joint transforms do not match joint count.";
      goto LABEL_45;
    }
LABEL_19:
    *(_QWORD *)buf = 0;
    v25 = 0;
    v26 = 0;
    *(_QWORD *)v27 = a2;
    v28 = a3;
    re::FixedArray<re::GenericSRT<float>>::operator=((_anonymous_namespace_ *)buf, (uint64_t)v27);
    if (*((_BYTE *)v6 + 72))
    {
      if (CoreRELog::onceToken != -1)
        dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
      v16 = (id)CoreRELog::log;
      if (!os_log_type_enabled(v16, OS_LOG_TYPE_ERROR))
        goto LABEL_55;
      *(_WORD *)v27 = 0;
      v17 = "Cannot make additive sampled animation from existing additive animation.";
      goto LABEL_54;
    }
    v20 = (uint64_t *)*((_QWORD *)v6 + 13);
    v29 = *((_QWORD *)v6 + 15);
    v30 = v20;
    *(_QWORD *)v27 = buf;
    v28 = 1;
    v21 = re::AnimationHelper::makeAdditiveForValues<re::SkeletalPoseAssetData>((re *)&v29, (uint64_t *)v27, v29, v20);
LABEL_57:
    v18 = v21;
    *((_BYTE *)v6 + 72) = v21;
    goto LABEL_58;
  }
  if (v7 != 18)
  {
    if (CoreRELog::onceToken != -1)
      dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
    v10 = (id)CoreRELog::log;
    if (!os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
      goto LABEL_46;
    *(_WORD *)buf = 0;
    v11 = "Unsupported additive skeletal pose animation type.";
    goto LABEL_45;
  }
  if (*((_BYTE *)v5 + 88))
    v8 = *((_QWORD *)v5 + 13) == a3;
  else
    v8 = 1;
  if (!v8)
  {
    if (CoreRELog::onceToken != -1)
      dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
    v10 = (id)CoreRELog::log;
    if (!os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
      goto LABEL_46;
    *(_WORD *)buf = 0;
    v11 = "Cannot make additive animation, from-to-by animation from joint count does not match.";
LABEL_45:
    _os_log_error_impl(&dword_224FE9000, v10, OS_LOG_TYPE_ERROR, v11, buf, 2u);
LABEL_46:

    return 0;
  }
  v9 = (uint64_t *)((char *)v5 + 120);
  if (*((_BYTE *)v5 + 120) && *((_QWORD *)v5 + 17) != a3)
  {
    if (CoreRELog::onceToken != -1)
      dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
    v10 = (id)CoreRELog::log;
    if (!os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
      goto LABEL_46;
    *(_WORD *)buf = 0;
    v11 = "Cannot make additive animation, from-to-by animation from joint count does not match.";
    goto LABEL_45;
  }
  *(_QWORD *)buf = 0;
  v25 = 0;
  v26 = 0;
  *(_QWORD *)v27 = a2;
  v28 = a3;
  re::FixedArray<re::GenericSRT<float>>::operator=((_anonymous_namespace_ *)buf, (uint64_t)v27);
  if (!*((_BYTE *)v6 + 72))
  {
    if (*((_BYTE *)v6 + 152))
    {
      if (CoreRELog::onceToken != -1)
        dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
      v16 = (id)CoreRELog::log;
      if (!os_log_type_enabled(v16, OS_LOG_TYPE_ERROR))
        goto LABEL_55;
      *(_WORD *)v27 = 0;
      v17 = "From-to-by animation with by value is already an additive animation.";
      goto LABEL_54;
    }
    v29 = (uint64_t)v6 + 88;
    v30 = v9;
    v22[0] = &v29;
    v22[1] = 2;
    v23 = buf;
    *(_QWORD *)v27 = &v23;
    v28 = 1;
    v21 = re::AnimationHelper::makeAdditiveForOptionalValueReferences<re::SkeletalPoseAssetData>((re *)v22, v27, (uint64_t)&v29, (_QWORD *)2);
    goto LABEL_57;
  }
  if (CoreRELog::onceToken != -1)
    dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
  v16 = (id)CoreRELog::log;
  if (!os_log_type_enabled(v16, OS_LOG_TYPE_ERROR))
    goto LABEL_55;
  *(_WORD *)v27 = 0;
  v17 = "Cannot make additive animation from existing additive from-to-by animation.";
LABEL_54:
  _os_log_error_impl(&dword_224FE9000, v16, OS_LOG_TYPE_ERROR, v17, v27, 2u);
LABEL_55:

  v18 = 0;
LABEL_58:
  if (*(_QWORD *)buf && v25)
    (*(void (**)(void))(**(_QWORD **)buf + 40))();
  return v18;
}

uint64_t RETimelineDefinitionMakeAdditiveFromBaseSkeletalPoses(_anonymous_namespace_::TimelineDefinition *a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  _anonymous_namespace_ *v7;
  _anonymous_namespace_ *v8;
  NSObject *v9;
  const char *v10;
  uint64_t v11;
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _anonymous_namespace_ *v18;
  uint64_t v19;
  _anonymous_namespace_ *v20;
  _anonymous_namespace_ *v21;
  uint64_t v22;
  _anonymous_namespace_ *v23;
  uint64_t *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  _QWORD v28[3];
  _BYTE v29[18];
  __int16 v30;
  unint64_t v31;
  __int16 v32;
  unint64_t v33;
  uint8_t buf[16];
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  uint64_t v39;

  v39 = *MEMORY[0x24BDAC8D0];
  if (*((_DWORD *)v7 + 2) != 34)
  {
    if (CoreRELog::onceToken == -1)
      goto LABEL_8;
    goto LABEL_44;
  }
  v8 = v7;
  if (*((_BYTE *)v7 + 72))
  {
    if (CoreRELog::onceToken != -1)
      dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
    v9 = (id)CoreRELog::log;
    if (!os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
      goto LABEL_9;
    *(_WORD *)buf = 0;
    v10 = "Cannot make additive animation from existing additive from-to-by animation.";
    goto LABEL_33;
  }
  if (*((_QWORD *)v7 + 21) != a4)
  {
    if (CoreRELog::onceToken != -1)
      dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
    v9 = (id)CoreRELog::log;
    if (!os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
      goto LABEL_9;
    *(_WORD *)buf = 0;
    v10 = "Cannot make additive animation, number of joints do not match joint count.";
    goto LABEL_33;
  }
  v13 = *((_QWORD *)v7 + 13);
  if (v13)
  {
    v14 = (uint64_t *)(*((_QWORD *)v7 + 15) + 8);
    v15 = 24 * v13;
    while (1)
    {
      v16 = *v14;
      v14 += 3;
      if (v16 != a4)
        break;
      v15 -= 24;
      if (!v15)
        goto LABEL_16;
    }
    if (CoreRELog::onceToken == -1)
    {
LABEL_30:
      v9 = (id)CoreRELog::log;
      if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
      {
        *(_WORD *)buf = 0;
        v10 = "Cannot make additive animation, number of joint transforms do not match joint count.";
LABEL_33:
        _os_log_error_impl(&dword_224FE9000, v9, OS_LOG_TYPE_ERROR, v10, buf, 2u);
        goto LABEL_9;
      }
      goto LABEL_9;
    }
LABEL_47:
    dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
    goto LABEL_30;
  }
LABEL_16:
  if (a3)
  {
    if (a3 >= 0xAAAAAAAAAAAAAABLL)
    {
      re::internal::assertLog((re::internal *)6, v17, "assertion failure: '%s' (%s:line %i) Size overflow in FixedArray<T>::init(). Element size = %zu, count = %zu", "!overflow", "init", 324, 24, a3);
      _os_crash();
      __break(1u);
    }
    else
    {
      if (v18)
      {
        v20 = v18;
        v21 = v18;
        if (a3 != 1)
        {
          bzero(v18, 24 * a3 - 24);
          v21 = (_anonymous_namespace_ *)((char *)v20 + 24 * a3 - 24);
        }
        v22 = 0;
        *(_QWORD *)v21 = 0;
        *((_QWORD *)v21 + 1) = 0;
        v23 = v20;
        *((_QWORD *)v21 + 2) = 0;
        while (1)
        {
          v28[0] = *(_QWORD *)(a2 + 8 * v22);
          v28[1] = a4;
          if (a3 == v22)
            break;
          re::FixedArray<re::GenericSRT<float>>::operator=(v23, (uint64_t)v28);
          ++v22;
          v23 = (_anonymous_namespace_ *)((char *)v23 + 24);
          if (a3 == v22)
            goto LABEL_35;
        }
        v28[2] = 0;
        v37 = 0u;
        v38 = 0u;
        v35 = 0u;
        v36 = 0u;
        *(_OWORD *)buf = 0u;
        os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        *(_DWORD *)v29 = 136315906;
        *(_QWORD *)&v29[4] = "operator[]";
        *(_WORD *)&v29[12] = 1024;
        *(_DWORD *)&v29[14] = 468;
        v30 = 2048;
        v31 = a3;
        v32 = 2048;
        v33 = a3;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_44:
        dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
LABEL_8:
        v9 = (id)CoreRELog::log;
        if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
        {
          *(_WORD *)buf = 0;
          v10 = "Unsupported additive skeletal poses animation type.";
          goto LABEL_33;
        }
LABEL_9:

        return 0;
      }
    }
    re::internal::assertLog((re::internal *)4, v19, "assertion failure: '%s' (%s:line %i) Out of memory.", "m_data", "init", 327);
    _os_crash();
    __break(1u);
    goto LABEL_47;
  }
  v20 = 0;
LABEL_35:
  v24 = (uint64_t *)*((_QWORD *)v8 + 13);
  *(_QWORD *)buf = *((_QWORD *)v8 + 15);
  *(_QWORD *)&buf[8] = v24;
  *(_QWORD *)v29 = v20;
  *(_QWORD *)&v29[8] = a3;
  v11 = re::AnimationHelper::makeAdditiveForValues<re::SkeletalPoseAssetData>((re *)buf, (uint64_t *)v29, *(uint64_t *)buf, v24);
  *((_BYTE *)v8 + 72) = v11;
  if (a3)
  {
    v25 = 0;
    v26 = 24 * a3;
    do
    {
      v27 = *(_QWORD *)((char *)v20 + v25);
      if (v27)
      {
        if (*(_QWORD *)((char *)v20 + v25 + 8))
        {
          (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v27 + 40))(v27, *(_QWORD *)((char *)v20 + v25 + 16));
          *(_QWORD *)((char *)v20 + v25 + 8) = 0;
          *(_QWORD *)((char *)v20 + v25 + 16) = 0;
        }
        *(_QWORD *)((char *)v20 + v25) = 0;
      }
      v25 += 24;
    }
    while (v26 != v25);
  }
  return v11;
}

BOOL RETimelineDefinitionMakeAdditiveFromBaseBlendShapeWeights(_anonymous_namespace_::TimelineDefinition *a1, uint64_t *a2, unint64_t a3, unint64_t a4)
{
  _anonymous_namespace_ *v7;
  _anonymous_namespace_ *v8;
  NSObject *v9;
  const char *v10;
  _BOOL8 v11;
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  uint8_t *v24;
  unint64_t v25;
  unint64_t v26;
  int v27;
  uint64_t v28;
  uint8_t buf[128];

  if (*((_DWORD *)v7 + 2) != 59)
  {
    if (CoreRELog::onceToken != -1)
      dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
    v9 = (id)CoreRELog::log;
    if (!os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
      goto LABEL_10;
    *(_WORD *)buf = 0;
    v10 = "Unsupported additive blend shape weights animation type.";
    goto LABEL_36;
  }
  v8 = v7;
  if (!*((_BYTE *)v7 + 72))
  {
    if (*((_QWORD *)v7 + 18) != a4)
    {
      if (CoreRELog::onceToken != -1)
        dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
      v9 = (id)CoreRELog::log;
      if (!os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
        goto LABEL_10;
      *(_WORD *)buf = 0;
      v10 = "Cannot make additive animation, number of weights do not match weight count.";
      goto LABEL_36;
    }
    v13 = *((_QWORD *)v7 + 13);
    if (v13)
    {
      v14 = (uint64_t *)(*((_QWORD *)v7 + 15) + 8);
      v15 = 24 * v13;
      while (1)
      {
        v16 = *v14;
        v14 += 3;
        if (v16 != a4)
          break;
        v15 -= 24;
        if (!v15)
          goto LABEL_17;
      }
      if (CoreRELog::onceToken != -1)
        dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
      v9 = (id)CoreRELog::log;
      if (!os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
        goto LABEL_10;
      *(_WORD *)buf = 0;
      v10 = "Cannot make additive animation, number of weights do not match weight count.";
      goto LABEL_36;
    }
LABEL_17:
    re::StackScratchAllocator::StackScratchAllocator((re::StackScratchAllocator *)buf);
    v28 = 0;
    v25 = 0;
    v26 = 0;
    v27 = 0;
    v24 = buf;
    re::DynamicArray<re::SkeletalPoseAssetData>::setCapacity(&v24, 0);
    ++v27;
    if (v25 >= a3)
    {
      if (!a3)
      {
LABEL_30:
        v18 = (_QWORD *)*((_QWORD *)v8 + 13);
        v21 = *((_QWORD *)v8 + 15);
        v22 = v18;
        v19 = v28;
        v20 = v26;
        v11 = re::AnimationHelper::makeAdditiveForValues<re::BlendShapeWeightsAssetData>((re *)&v21, &v19, v21, v18);
        *((_BYTE *)v8 + 72) = v11;
        re::DynamicArray<re::EvaluationSkeletalPoseInputHandle>::deinit((uint64_t)&v24);
        re::StackScratchAllocator::~StackScratchAllocator((re::StackScratchAllocator *)buf);
        return v11;
      }
    }
    else
    {
      re::DynamicArray<re::SkeletalPoseAssetData>::setCapacity(&v24, a3);
    }
    do
    {
      v21 = 0;
      v22 = 0;
      v23 = 0;
      v19 = *a2;
      v20 = a4;
      re::FixedArray<int>::operator=((_anonymous_namespace_ *)&v21, (uint64_t)&v19);
      v17 = v26;
      if (v26 >= v25)
      {
        re::DynamicArray<re::BlendShapeWeightsAssetData>::growCapacity(&v24, v26 + 1);
        v17 = v26;
      }
      re::FixedArray<float>::FixedArray((uint64_t *)(v28 + 24 * v17), (uint64_t)&v21);
      ++v26;
      ++v27;
      if (v21 && v22)
        (*(void (**)(void))(*(_QWORD *)v21 + 40))();
      ++a2;
      --a3;
    }
    while (a3);
    goto LABEL_30;
  }
  if (CoreRELog::onceToken != -1)
    dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
  v9 = (id)CoreRELog::log;
  if (!os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
    goto LABEL_10;
  *(_WORD *)buf = 0;
  v10 = "Cannot make additive animation from existing additive from-to-by animation.";
LABEL_36:
  _os_log_error_impl(&dword_224FE9000, v9, OS_LOG_TYPE_ERROR, v10, buf, 2u);
LABEL_10:

  return 0;
}

BOOL RETimelineDefinitionIsAdditive(uint64_t a1)
{
  uint64_t v1;
  _BOOL8 result;

  v1 = *(_QWORD *)(a1 + 48);
  if (!v1)
    v1 = *(_QWORD *)(re::AssetHandle::asset<re::TimelineAsset>((re::TimelineAsset *)(a1 + 24)) + 8);
  result = 0;
  switch(*(_DWORD *)(v1 + 8))
  {
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 0xA:
    case 0xB:
    case 0xC:
    case 0xD:
    case 0xE:
    case 0xF:
    case 0x10:
    case 0x11:
    case 0x12:
    case 0x13:
    case 0x14:
    case 0x15:
    case 0x16:
    case 0x17:
    case 0x18:
    case 0x19:
    case 0x1A:
    case 0x1B:
    case 0x1C:
    case 0x1D:
    case 0x1E:
    case 0x1F:
    case 0x20:
    case 0x21:
    case 0x22:
    case 0x25:
    case 0x27:
    case 0x28:
    case 0x29:
    case 0x2A:
    case 0x2B:
    case 0x2C:
    case 0x2D:
    case 0x2E:
    case 0x30:
    case 0x32:
    case 0x3B:
    case 0x3C:
    case 0x3D:
      result = *(unsigned __int8 *)(v1 + 72) != 0;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t RETimelineDefinitionSetAdditive(_anonymous_namespace_::TimelineDefinition *a1, char a2)
{
  _anonymous_namespace_ *v3;
  uint64_t v4;

  v4 = 0;
  switch(*((_DWORD *)v3 + 2))
  {
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 0xA:
    case 0xB:
    case 0xC:
    case 0xD:
    case 0xE:
    case 0xF:
    case 0x10:
    case 0x11:
    case 0x12:
    case 0x13:
    case 0x14:
    case 0x15:
    case 0x16:
    case 0x17:
    case 0x18:
    case 0x19:
    case 0x1A:
    case 0x1B:
    case 0x1C:
    case 0x1D:
    case 0x1E:
    case 0x1F:
    case 0x20:
    case 0x21:
    case 0x22:
    case 0x25:
    case 0x27:
    case 0x28:
    case 0x29:
    case 0x2A:
    case 0x2B:
    case 0x2C:
    case 0x2D:
    case 0x2E:
    case 0x30:
    case 0x32:
    case 0x3B:
    case 0x3C:
    case 0x3D:
      *((_BYTE *)v3 + 72) = a2;
      v4 = 1;
      break;
    default:
      return v4;
  }
  return v4;
}

_anonymous_namespace_::TimelineDefinition *RETimelineDefinitionCreateFromToByFloatAnimation(re *a1)
{
  uint64_t *v2;
  uint64_t v3;
  re *v4;
  uint64_t *v5;
  _anonymous_namespace_::TimelineDefinition *v6;
  _QWORD *v7;
  uint64_t v8;
  _QWORD v10[3];
  _QWORD *v11;
  uint64_t v12;
  _QWORD v13[5];

  v13[4] = *MEMORY[0x24BDAC8D0];
  v2 = re::globalAllocators(a1);
  v3 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v2[2] + 32))(v2[2], 120, 8);
  *(_QWORD *)v3 = off_24ED36578;
  *(_QWORD *)(v3 + 8) = 11;
  *(_BYTE *)(v3 + 16) = 0;
  *(_QWORD *)(v3 + 24) = 0;
  *(_QWORD *)(v3 + 32) = &str_110;
  *(_BYTE *)(v3 + 72) = 0;
  *(_QWORD *)(v3 + 80) = 0x3FF0000000000000;
  *(_BYTE *)(v3 + 88) = 0;
  *(_BYTE *)(v3 + 96) = 0;
  *(_BYTE *)(v3 + 104) = 0;
  *(_QWORD *)(v3 + 112) = 0;
  *(_QWORD *)v3 = &off_24ED364A0;
  v13[3] = v13;
  v10[0] = &off_24ED996D8;
  v11 = v10;
  v12 = v3;
  v13[0] = &off_24ED996D8;
  v5 = re::globalAllocators(v4);
  v6 = (_anonymous_namespace_::TimelineDefinition *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v5[2] + 32))(v5[2], 112, 8);
  std::unique_ptr<re::RigHierarchy,std::function<void ()(re::RigHierarchy*)>>::~unique_ptr[abi:nn180100](&v12);
  v7 = v11;
  if (v11 == v10)
  {
    v8 = 4;
    v7 = v10;
    goto LABEL_5;
  }
  if (v11)
  {
    v8 = 5;
LABEL_5:
    (*(void (**)(void))(*v7 + 8 * v8))();
  }
  return v6;
}

_anonymous_namespace_::TimelineDefinition *RETimelineDefinitionCreateFromToByDoubleAnimation(re *a1)
{
  uint64_t *v2;
  uint64_t v3;
  re *v4;
  uint64_t *v5;
  _anonymous_namespace_::TimelineDefinition *v6;
  _QWORD *v7;
  uint64_t v8;
  _QWORD v10[3];
  _QWORD *v11;
  uint64_t v12;
  _QWORD v13[5];

  v13[4] = *MEMORY[0x24BDAC8D0];
  v2 = re::globalAllocators(a1);
  v3 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v2[2] + 32))(v2[2], 144, 8);
  *(_QWORD *)v3 = off_24ED36578;
  *(_QWORD *)(v3 + 8) = 12;
  *(_BYTE *)(v3 + 16) = 0;
  *(_QWORD *)(v3 + 24) = 0;
  *(_QWORD *)(v3 + 32) = &str_110;
  *(_BYTE *)(v3 + 72) = 0;
  *(_QWORD *)(v3 + 80) = 0x3FF0000000000000;
  *(_BYTE *)(v3 + 88) = 0;
  *(_BYTE *)(v3 + 104) = 0;
  *(_BYTE *)(v3 + 120) = 0;
  *(_QWORD *)(v3 + 136) = 0;
  *(_QWORD *)v3 = &off_24ED323B0;
  v13[3] = v13;
  v10[0] = &off_24ED99758;
  v11 = v10;
  v12 = v3;
  v13[0] = &off_24ED99758;
  v5 = re::globalAllocators(v4);
  v6 = (_anonymous_namespace_::TimelineDefinition *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v5[2] + 32))(v5[2], 112, 8);
  std::unique_ptr<re::RigHierarchy,std::function<void ()(re::RigHierarchy*)>>::~unique_ptr[abi:nn180100](&v12);
  v7 = v11;
  if (v11 == v10)
  {
    v8 = 4;
    v7 = v10;
    goto LABEL_5;
  }
  if (v11)
  {
    v8 = 5;
LABEL_5:
    (*(void (**)(void))(*v7 + 8 * v8))();
  }
  return v6;
}

_anonymous_namespace_::TimelineDefinition *RETimelineDefinitionCreateFromToByFloat2Animation(re *a1)
{
  uint64_t *v2;
  uint64_t v3;
  re *v4;
  uint64_t *v5;
  _anonymous_namespace_::TimelineDefinition *v6;
  _QWORD *v7;
  uint64_t v8;
  _QWORD v10[3];
  _QWORD *v11;
  uint64_t v12;
  _QWORD v13[5];

  v13[4] = *MEMORY[0x24BDAC8D0];
  v2 = re::globalAllocators(a1);
  v3 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v2[2] + 32))(v2[2], 144, 8);
  *(_QWORD *)v3 = off_24ED36578;
  *(_QWORD *)(v3 + 8) = 13;
  *(_BYTE *)(v3 + 16) = 0;
  *(_QWORD *)(v3 + 24) = 0;
  *(_QWORD *)(v3 + 32) = &str_110;
  *(_BYTE *)(v3 + 72) = 0;
  *(_QWORD *)(v3 + 80) = 0x3FF0000000000000;
  *(_BYTE *)(v3 + 88) = 0;
  *(_BYTE *)(v3 + 104) = 0;
  *(_BYTE *)(v3 + 120) = 0;
  *(_QWORD *)(v3 + 136) = 0;
  *(_QWORD *)v3 = &off_24ED324E0;
  v13[3] = v13;
  v10[0] = &off_24ED997D8;
  v11 = v10;
  v12 = v3;
  v13[0] = &off_24ED997D8;
  v5 = re::globalAllocators(v4);
  v6 = (_anonymous_namespace_::TimelineDefinition *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v5[2] + 32))(v5[2], 112, 8);
  std::unique_ptr<re::RigHierarchy,std::function<void ()(re::RigHierarchy*)>>::~unique_ptr[abi:nn180100](&v12);
  v7 = v11;
  if (v11 == v10)
  {
    v8 = 4;
    v7 = v10;
    goto LABEL_5;
  }
  if (v11)
  {
    v8 = 5;
LABEL_5:
    (*(void (**)(void))(*v7 + 8 * v8))();
  }
  return v6;
}

_anonymous_namespace_::TimelineDefinition *RETimelineDefinitionCreateFromToByFloat3Animation(re *a1)
{
  uint64_t *v2;
  uint64_t v3;
  re *v4;
  uint64_t *v5;
  _anonymous_namespace_::TimelineDefinition *v6;
  _QWORD *v7;
  uint64_t v8;
  _QWORD v10[3];
  _QWORD *v11;
  uint64_t v12;
  _QWORD v13[5];

  v13[4] = *MEMORY[0x24BDAC8D0];
  v2 = re::globalAllocators(a1);
  v3 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v2[2] + 32))(v2[2], 208, 16);
  *(_QWORD *)v3 = off_24ED36578;
  *(_QWORD *)(v3 + 8) = 14;
  *(_BYTE *)(v3 + 16) = 0;
  *(_QWORD *)(v3 + 24) = 0;
  *(_QWORD *)(v3 + 32) = &str_110;
  *(_BYTE *)(v3 + 72) = 0;
  *(_QWORD *)(v3 + 80) = 0x3FF0000000000000;
  *(_BYTE *)(v3 + 96) = 0;
  *(_BYTE *)(v3 + 128) = 0;
  *(_BYTE *)(v3 + 160) = 0;
  *(_QWORD *)(v3 + 192) = 0;
  *(_QWORD *)v3 = &off_24ED32610;
  v13[3] = v13;
  v10[0] = &off_24ED99858;
  v11 = v10;
  v12 = v3;
  v13[0] = &off_24ED99858;
  v5 = re::globalAllocators(v4);
  v6 = (_anonymous_namespace_::TimelineDefinition *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v5[2] + 32))(v5[2], 112, 8);
  std::unique_ptr<re::RigHierarchy,std::function<void ()(re::RigHierarchy*)>>::~unique_ptr[abi:nn180100](&v12);
  v7 = v11;
  if (v11 == v10)
  {
    v8 = 4;
    v7 = v10;
    goto LABEL_5;
  }
  if (v11)
  {
    v8 = 5;
LABEL_5:
    (*(void (**)(void))(*v7 + 8 * v8))();
  }
  return v6;
}

_anonymous_namespace_::TimelineDefinition *RETimelineDefinitionCreateFromToByFloat4Animation(re *a1)
{
  uint64_t *v2;
  uint64_t v3;
  re *v4;
  uint64_t *v5;
  _anonymous_namespace_::TimelineDefinition *v6;
  _QWORD *v7;
  uint64_t v8;
  _QWORD v10[3];
  _QWORD *v11;
  uint64_t v12;
  _QWORD v13[5];

  v13[4] = *MEMORY[0x24BDAC8D0];
  v2 = re::globalAllocators(a1);
  v3 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v2[2] + 32))(v2[2], 208, 16);
  *(_QWORD *)v3 = off_24ED36578;
  *(_QWORD *)(v3 + 8) = 15;
  *(_BYTE *)(v3 + 16) = 0;
  *(_QWORD *)(v3 + 24) = 0;
  *(_QWORD *)(v3 + 32) = &str_110;
  *(_BYTE *)(v3 + 72) = 0;
  *(_QWORD *)(v3 + 80) = 0x3FF0000000000000;
  *(_BYTE *)(v3 + 96) = 0;
  *(_BYTE *)(v3 + 128) = 0;
  *(_BYTE *)(v3 + 160) = 0;
  *(_QWORD *)(v3 + 192) = 0;
  *(_QWORD *)v3 = &off_24ED32740;
  v13[3] = v13;
  v10[0] = &off_24ED998D8;
  v11 = v10;
  v12 = v3;
  v13[0] = &off_24ED998D8;
  v5 = re::globalAllocators(v4);
  v6 = (_anonymous_namespace_::TimelineDefinition *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v5[2] + 32))(v5[2], 112, 8);
  std::unique_ptr<re::RigHierarchy,std::function<void ()(re::RigHierarchy*)>>::~unique_ptr[abi:nn180100](&v12);
  v7 = v11;
  if (v11 == v10)
  {
    v8 = 4;
    v7 = v10;
    goto LABEL_5;
  }
  if (v11)
  {
    v8 = 5;
LABEL_5:
    (*(void (**)(void))(*v7 + 8 * v8))();
  }
  return v6;
}

_anonymous_namespace_::TimelineDefinition *RETimelineDefinitionCreateFromToByQuaternionAnimation(re *a1)
{
  uint64_t *v2;
  uint64_t v3;
  re *v4;
  uint64_t *v5;
  _anonymous_namespace_::TimelineDefinition *v6;
  _QWORD *v7;
  uint64_t v8;
  _QWORD v10[3];
  _QWORD *v11;
  uint64_t v12;
  _QWORD v13[5];

  v13[4] = *MEMORY[0x24BDAC8D0];
  v2 = re::globalAllocators(a1);
  v3 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v2[2] + 32))(v2[2], 208, 16);
  *(_QWORD *)v3 = off_24ED36578;
  *(_QWORD *)(v3 + 8) = 16;
  *(_BYTE *)(v3 + 16) = 0;
  *(_QWORD *)(v3 + 24) = 0;
  *(_QWORD *)(v3 + 32) = &str_110;
  *(_BYTE *)(v3 + 72) = 0;
  *(_QWORD *)(v3 + 80) = 0x3FF0000000000000;
  *(_BYTE *)(v3 + 96) = 0;
  *(_BYTE *)(v3 + 128) = 0;
  *(_BYTE *)(v3 + 160) = 0;
  *(_QWORD *)(v3 + 192) = 0;
  *(_QWORD *)v3 = &off_24ED32870;
  v13[3] = v13;
  v10[0] = &off_24ED99958;
  v11 = v10;
  v12 = v3;
  v13[0] = &off_24ED99958;
  v5 = re::globalAllocators(v4);
  v6 = (_anonymous_namespace_::TimelineDefinition *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v5[2] + 32))(v5[2], 112, 8);
  std::unique_ptr<re::RigHierarchy,std::function<void ()(re::RigHierarchy*)>>::~unique_ptr[abi:nn180100](&v12);
  v7 = v11;
  if (v11 == v10)
  {
    v8 = 4;
    v7 = v10;
    goto LABEL_5;
  }
  if (v11)
  {
    v8 = 5;
LABEL_5:
    (*(void (**)(void))(*v7 + 8 * v8))();
  }
  return v6;
}

_anonymous_namespace_::TimelineDefinition *RETimelineDefinitionCreateFromToBySRTAnimation(re *a1)
{
  uint64_t *v2;
  uint64_t v3;
  re *v4;
  uint64_t *v5;
  _anonymous_namespace_::TimelineDefinition *v6;
  _QWORD *v7;
  uint64_t v8;
  _QWORD v10[3];
  _QWORD *v11;
  uint64_t v12;
  _QWORD v13[5];

  v13[4] = *MEMORY[0x24BDAC8D0];
  v2 = re::globalAllocators(a1);
  v3 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v2[2] + 32))(v2[2], 304, 16);
  *(_QWORD *)v3 = off_24ED36578;
  *(_QWORD *)(v3 + 8) = 17;
  *(_BYTE *)(v3 + 16) = 0;
  *(_QWORD *)(v3 + 24) = 0;
  *(_QWORD *)(v3 + 32) = &str_110;
  *(_BYTE *)(v3 + 72) = 0;
  *(_QWORD *)(v3 + 80) = 0x3FF0000000000000;
  *(_BYTE *)(v3 + 96) = 0;
  *(_BYTE *)(v3 + 160) = 0;
  *(_BYTE *)(v3 + 224) = 0;
  *(_QWORD *)(v3 + 288) = 0;
  *(_QWORD *)v3 = &off_24ED329A0;
  v13[3] = v13;
  v10[0] = &off_24ED999D8;
  v11 = v10;
  v12 = v3;
  v13[0] = &off_24ED999D8;
  v5 = re::globalAllocators(v4);
  v6 = (_anonymous_namespace_::TimelineDefinition *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v5[2] + 32))(v5[2], 112, 8);
  std::unique_ptr<re::RigHierarchy,std::function<void ()(re::RigHierarchy*)>>::~unique_ptr[abi:nn180100](&v12);
  v7 = v11;
  if (v11 == v10)
  {
    v8 = 4;
    v7 = v10;
    goto LABEL_5;
  }
  if (v11)
  {
    v8 = 5;
LABEL_5:
    (*(void (**)(void))(*v7 + 8 * v8))();
  }
  return v6;
}

_anonymous_namespace_::TimelineDefinition *RETimelineDefinitionCreateFromToBySkeletalPoseAnimation(re *a1)
{
  uint64_t *v2;
  re::SkeletalPoseAnimationAssetData *v3;
  uint64_t *v4;
  _anonymous_namespace_::TimelineDefinition *v5;
  _QWORD *v6;
  uint64_t v7;
  _QWORD v9[3];
  _QWORD *v10;
  re *v11;
  _QWORD v12[5];

  v12[4] = *MEMORY[0x24BDAC8D0];
  v2 = re::globalAllocators(a1);
  v3 = (re::SkeletalPoseAnimationAssetData *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v2[2]
                                                                                                  + 32))(v2[2], 336, 8);
  v9[0] = &off_24ED99A58;
  v10 = v9;
  v11 = re::SkeletalPoseAnimationAssetData::SkeletalPoseAnimationAssetData(v3);
  v12[3] = v12;
  v12[0] = &off_24ED99A58;
  v4 = re::globalAllocators(v11);
  v5 = (_anonymous_namespace_::TimelineDefinition *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v4[2] + 32))(v4[2], 112, 8);
  std::unique_ptr<re::RigHierarchy,std::function<void ()(re::RigHierarchy*)>>::~unique_ptr[abi:nn180100]((uint64_t *)&v11);
  v6 = v10;
  if (v10 == v9)
  {
    v7 = 4;
    v6 = v9;
    goto LABEL_5;
  }
  if (v10)
  {
    v7 = 5;
LABEL_5:
    (*(void (**)(void))(*v6 + 8 * v7))();
  }
  return v5;
}

_anonymous_namespace_::TimelineDefinition *RETimelineDefinitionCreateFromToByBlendShapeWeightsAnimation(re *a1)
{
  uint64_t *v2;
  uint64_t v3;
  re *v4;
  uint64_t *v5;
  _anonymous_namespace_::TimelineDefinition *v6;
  _QWORD *v7;
  uint64_t v8;
  _QWORD v10[3];
  _QWORD *v11;
  uint64_t v12;
  _QWORD v13[5];

  v13[4] = *MEMORY[0x24BDAC8D0];
  v2 = re::globalAllocators(a1);
  v3 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v2[2] + 32))(v2[2], 312, 8);
  *(_QWORD *)v3 = off_24ED36578;
  *(_QWORD *)(v3 + 8) = 50;
  *(_BYTE *)(v3 + 16) = 0;
  *(_QWORD *)(v3 + 24) = 0;
  *(_QWORD *)(v3 + 32) = &str_110;
  *(_BYTE *)(v3 + 72) = 0;
  *(_QWORD *)(v3 + 80) = 0x3FF0000000000000;
  *(_BYTE *)(v3 + 88) = 0;
  *(_BYTE *)(v3 + 120) = 0;
  *(_BYTE *)(v3 + 152) = 0;
  *(_QWORD *)(v3 + 184) = 0;
  *(_QWORD *)(v3 + 192) = 0;
  *(_QWORD *)v3 = &off_24ED32C98;
  *(_QWORD *)(v3 + 200) = 0;
  *(_QWORD *)(v3 + 208) = 0;
  *(_DWORD *)(v3 + 216) = 0;
  *(_QWORD *)(v3 + 304) = 0;
  *(_OWORD *)(v3 + 224) = 0u;
  *(_OWORD *)(v3 + 240) = 0u;
  *(_DWORD *)(v3 + 256) = 0;
  *(_OWORD *)(v3 + 264) = 0u;
  *(_OWORD *)(v3 + 280) = 0u;
  *(_DWORD *)(v3 + 296) = 0;
  v13[3] = v13;
  v10[0] = &off_24ED99AD8;
  v11 = v10;
  v12 = v3;
  v13[0] = &off_24ED99AD8;
  v5 = re::globalAllocators(v4);
  v6 = (_anonymous_namespace_::TimelineDefinition *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v5[2] + 32))(v5[2], 112, 8);
  std::unique_ptr<re::RigHierarchy,std::function<void ()(re::RigHierarchy*)>>::~unique_ptr[abi:nn180100](&v12);
  v7 = v11;
  if (v11 == v10)
  {
    v8 = 4;
    v7 = v10;
    goto LABEL_5;
  }
  if (v11)
  {
    v8 = 5;
LABEL_5:
    (*(void (**)(void))(*v7 + 8 * v8))();
  }
  return v6;
}

double computeBlendTreeDuration(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  double v4;
  uint64_t v5;
  uint64_t v6;
  double v7;

  if (!*(_QWORD *)(a1 + 16))
    return 0.0;
  v2 = 0;
  v3 = 0;
  v4 = 0.0;
  do
  {
    v5 = re::AssetHandle::asset<re::TimelineAsset>((re::TimelineAsset *)(*(_QWORD *)(a1 + 32) + v2));
    if (v5)
    {
      v6 = *(_QWORD *)(v5 + 16);
      if (v6)
      {
        v7 = (*(double (**)(uint64_t))(*(_QWORD *)v6 + 40))(v6);
        if (v4 < v7)
          v4 = v7;
      }
    }
    ++v3;
    v2 += 24;
  }
  while (v3 < *(_QWORD *)(a1 + 16));
  return v4;
}

double RETimelineDefinitionGetDuration(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  __n128 v4;
  double v5;
  uint64_t v6;
  double v8;
  double v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  double v16;
  NSObject *v17;
  double v19;
  BOOL v20;
  double v21;
  float v22;
  double v23;
  double v24;
  uint64_t v25;
  double v26;
  uint8_t v27[16];

  v1 = *(_QWORD *)(a1 + 48);
  if (!v1)
  {
    v2 = re::AssetHandle::asset<re::TimelineAsset>((re::TimelineAsset *)(a1 + 24));
    if (v2)
      v1 = *(_QWORD *)(v2 + 8);
    else
      v1 = 0;
  }
  switch(*(_DWORD *)(v1 + 8))
  {
    case 1:
      v11 = re::AssetHandle::asset<re::TimelineAsset>((re::TimelineAsset *)(v1 + 72));
      if (!v11)
        return 0.0;
      if (*(_BYTE *)(v1 + 152))
        v4.n128_u64[0] = *(_QWORD *)(v1 + 160);
      if (*(_BYTE *)(v1 + 96))
        v23 = *(double *)(v1 + 104);
      else
        v23 = 0.0;
      if (*(_BYTE *)(v1 + 112))
      {
        if (!*(_BYTE *)(v1 + 152))
        {
          v24 = *(double *)(v1 + 120);
LABEL_58:
          v26 = v24 - v23;
          v20 = v24 < v23;
          v4.n128_u64[0] = 0;
          if (!v20)
            v4.n128_f64[0] = v26;
        }
      }
      else if (!*(_BYTE *)(v1 + 152))
      {
        v25 = *(_QWORD *)(v11 + 16);
        if (v25)
          (*(void (**)(uint64_t, __n128))(*(_QWORD *)v25 + 40))(v25, v4);
        else
          v24 = 0.0;
        goto LABEL_58;
      }
      v21 = *(double *)(v1 + 144);
      v22 = *(float *)(v1 + 168);
      return v21 + v4.n128_f64[0] / v22;
    case 2:
      if (!*(_QWORD *)(v1 + 88))
        return 0.0;
      v12 = 0;
      v13 = 0;
      v5 = 0.0;
      do
      {
        v14 = re::AssetHandle::asset<re::TimelineAsset>((re::TimelineAsset *)(*(_QWORD *)(v1 + 104) + v12));
        if (v14)
        {
          v15 = *(_QWORD *)(v14 + 16);
          if (v15)
          {
            v16 = (*(double (**)(uint64_t))(*(_QWORD *)v15 + 40))(v15);
            if (v5 < v16)
              v5 = v16;
          }
        }
        ++v13;
        v12 += 24;
      }
      while (v13 < *(_QWORD *)(v1 + 88));
      return v5;
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 0xA:
    case 0x3C:
      v3 = re::AssetHandle::asset<re::TimelineAsset>((re::TimelineAsset *)(v1 + 80));
      if (!v3)
        return 0.0;
      if (*(_BYTE *)(v1 + 160))
        v4.n128_u64[0] = *(_QWORD *)(v1 + 168);
      if (*(_BYTE *)(v1 + 104))
        v8 = *(double *)(v1 + 112);
      else
        v8 = 0.0;
      if (*(_BYTE *)(v1 + 120))
      {
        if (*(_BYTE *)(v1 + 160))
          goto LABEL_45;
        v9 = *(double *)(v1 + 128);
      }
      else
      {
        if (*(_BYTE *)(v1 + 160))
          goto LABEL_45;
        v10 = *(_QWORD *)(v3 + 16);
        if (v10)
          (*(void (**)(uint64_t, __n128))(*(_QWORD *)v10 + 40))(v10, v4);
        else
          v9 = 0.0;
      }
      v19 = v9 - v8;
      v20 = v9 < v8;
      v4.n128_u64[0] = 0;
      if (!v20)
        v4.n128_f64[0] = v19;
LABEL_45:
      v21 = *(double *)(v1 + 152);
      v22 = *(float *)(v1 + 176);
      return v21 + v4.n128_f64[0] / v22;
    case 0xB:
    case 0xC:
    case 0xD:
    case 0xE:
    case 0xF:
    case 0x10:
    case 0x11:
    case 0x12:
    case 0x32:
      return *(double *)(v1 + 80);
    case 0x1B:
    case 0x1C:
    case 0x1D:
    case 0x1E:
    case 0x1F:
    case 0x20:
    case 0x21:
    case 0x22:
    case 0x3B:
      v6 = *(_QWORD *)(v1 + 104);
      if (v6)
        return (double)(unint64_t)(v6 - 1) * *(float *)(v1 + 76);
      else
        return 0.0;
    case 0x25:
      return *(float *)(v1 + 76);
    case 0x27:
    case 0x28:
    case 0x29:
    case 0x2A:
    case 0x2B:
    case 0x2C:
    case 0x2D:
    case 0x2E:
      return computeBlendTreeDuration(v1 + 248);
    case 0x30:
      return (float)re::TimelineEventData::totalDuration((re::TimelineEventData *)(v1 + 80));
    default:
      if (CoreRELog::onceToken != -1)
        dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
      v17 = (id)CoreRELog::log;
      if (os_log_type_enabled(v17, OS_LOG_TYPE_ERROR))
      {
        *(_WORD *)v27 = 0;
        _os_log_error_impl(&dword_224FE9000, v17, OS_LOG_TYPE_ERROR, "Unsupported timeline for getting duration property.", v27, 2u);
      }

      return NAN;
  }
}

uint64_t RETimelineDefinitionSetDuration(_anonymous_namespace_::TimelineDefinition *a1, double a2)
{
  _anonymous_namespace_ *v3;
  int v4;
  NSObject *v6;
  float v7;
  uint8_t v8[16];

  v4 = *((_DWORD *)v3 + 2);
  switch(v4)
  {
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
    case 17:
    case 18:
      goto LABEL_2;
    default:
      if (v4 == 37)
      {
        v7 = a2;
        *((float *)v3 + 19) = v7;
        return 1;
      }
      if (v4 == 50)
      {
LABEL_2:
        *((double *)v3 + 10) = a2;
        return 1;
      }
      if (CoreRELog::onceToken != -1)
        dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
      v6 = (id)CoreRELog::log;
      if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
      {
        *(_WORD *)v8 = 0;
        _os_log_error_impl(&dword_224FE9000, v6, OS_LOG_TYPE_ERROR, "Unsupported timeline for setting duration property.", v8, 2u);
      }

      return 0;
  }
}

uint64_t RETimelineDefinitionGetFloatFromValue(uint64_t a1)
{
  uint64_t v1;
  int v2;
  uint64_t v3;
  NSObject *v5;
  uint8_t v6[16];

  v1 = *(_QWORD *)(a1 + 48);
  if (!v1)
    v1 = *(_QWORD *)(re::AssetHandle::asset<re::TimelineAsset>((re::TimelineAsset *)(a1 + 24)) + 8);
  if (*(_DWORD *)(v1 + 8) == 11)
  {
    v2 = *(unsigned __int8 *)(v1 + 88);
    v3 = v1 + 92;
    if (v2)
      return v3;
    else
      return 0;
  }
  else
  {
    if (CoreRELog::onceToken != -1)
      dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
    v5 = (id)CoreRELog::log;
    if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)v6 = 0;
      _os_log_error_impl(&dword_224FE9000, v5, OS_LOG_TYPE_ERROR, "Cannot get float 'from' value from non-float from-to-by animation.", v6, 2u);
    }

    return 0;
  }
}

uint64_t RETimelineDefinitionGetFloatToValue(uint64_t a1)
{
  uint64_t v1;
  int v2;
  uint64_t v3;
  NSObject *v5;
  uint8_t v6[16];

  v1 = *(_QWORD *)(a1 + 48);
  if (!v1)
    v1 = *(_QWORD *)(re::AssetHandle::asset<re::TimelineAsset>((re::TimelineAsset *)(a1 + 24)) + 8);
  if (*(_DWORD *)(v1 + 8) == 11)
  {
    v2 = *(unsigned __int8 *)(v1 + 96);
    v3 = v1 + 100;
    if (v2)
      return v3;
    else
      return 0;
  }
  else
  {
    if (CoreRELog::onceToken != -1)
      dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
    v5 = (id)CoreRELog::log;
    if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)v6 = 0;
      _os_log_error_impl(&dword_224FE9000, v5, OS_LOG_TYPE_ERROR, "Cannot get float 'to' value from non-float from-to-by animation.", v6, 2u);
    }

    return 0;
  }
}

uint64_t RETimelineDefinitionGetFloatByValue(uint64_t a1)
{
  uint64_t v1;
  int v2;
  uint64_t v3;
  NSObject *v5;
  uint8_t v6[16];

  v1 = *(_QWORD *)(a1 + 48);
  if (!v1)
    v1 = *(_QWORD *)(re::AssetHandle::asset<re::TimelineAsset>((re::TimelineAsset *)(a1 + 24)) + 8);
  if (*(_DWORD *)(v1 + 8) == 11)
  {
    v2 = *(unsigned __int8 *)(v1 + 104);
    v3 = v1 + 108;
    if (v2)
      return v3;
    else
      return 0;
  }
  else
  {
    if (CoreRELog::onceToken != -1)
      dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
    v5 = (id)CoreRELog::log;
    if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)v6 = 0;
      _os_log_error_impl(&dword_224FE9000, v5, OS_LOG_TYPE_ERROR, "Cannot get float 'by' value from non-float from-to-by animation.", v6, 2u);
    }

    return 0;
  }
}

BOOL RETimelineDefinitionSetFloatFromValue(_anonymous_namespace_::TimelineDefinition *a1, int *a2)
{
  _anonymous_namespace_ *v3;
  int v4;
  int v5;
  NSObject *v6;
  uint8_t v8[16];

  v4 = *((_DWORD *)v3 + 2);
  if (v4 == 11)
  {
    if (a2)
    {
      v5 = *a2;
      if (!*((_BYTE *)v3 + 88))
        *((_BYTE *)v3 + 88) = 1;
      *((_DWORD *)v3 + 23) = v5;
    }
    else if (*((_BYTE *)v3 + 88))
    {
      *((_BYTE *)v3 + 88) = 0;
    }
  }
  else
  {
    if (CoreRELog::onceToken != -1)
      dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
    v6 = (id)CoreRELog::log;
    if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)v8 = 0;
      _os_log_error_impl(&dword_224FE9000, v6, OS_LOG_TYPE_ERROR, "Cannot set float 'from' value for non-float from-to-by animation.", v8, 2u);
    }

  }
  return v4 == 11;
}

BOOL RETimelineDefinitionSetFloatToValue(_anonymous_namespace_::TimelineDefinition *a1, int *a2)
{
  _anonymous_namespace_ *v3;
  int v4;
  int v5;
  NSObject *v6;
  uint8_t v8[16];

  v4 = *((_DWORD *)v3 + 2);
  if (v4 == 11)
  {
    if (a2)
    {
      v5 = *a2;
      if (!*((_BYTE *)v3 + 96))
        *((_BYTE *)v3 + 96) = 1;
      *((_DWORD *)v3 + 25) = v5;
    }
    else if (*((_BYTE *)v3 + 96))
    {
      *((_BYTE *)v3 + 96) = 0;
    }
  }
  else
  {
    if (CoreRELog::onceToken != -1)
      dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
    v6 = (id)CoreRELog::log;
    if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)v8 = 0;
      _os_log_error_impl(&dword_224FE9000, v6, OS_LOG_TYPE_ERROR, "Cannot set float 'to' value for non-float from-to-by animation.", v8, 2u);
    }

  }
  return v4 == 11;
}

BOOL RETimelineDefinitionSetFloatByValue(_anonymous_namespace_::TimelineDefinition *a1, int *a2)
{
  _anonymous_namespace_ *v3;
  int v4;
  int v5;
  NSObject *v6;
  uint8_t v8[16];

  v4 = *((_DWORD *)v3 + 2);
  if (v4 == 11)
  {
    if (a2)
    {
      v5 = *a2;
      if (!*((_BYTE *)v3 + 104))
        *((_BYTE *)v3 + 104) = 1;
      *((_DWORD *)v3 + 27) = v5;
    }
    else if (*((_BYTE *)v3 + 104))
    {
      *((_BYTE *)v3 + 104) = 0;
    }
  }
  else
  {
    if (CoreRELog::onceToken != -1)
      dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
    v6 = (id)CoreRELog::log;
    if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)v8 = 0;
      _os_log_error_impl(&dword_224FE9000, v6, OS_LOG_TYPE_ERROR, "Cannot set float 'by' value for non-float from-to-by animation.", v8, 2u);
    }

  }
  return v4 == 11;
}

uint64_t RETimelineDefinitionGetDoubleFromValue(uint64_t a1)
{
  uint64_t v1;
  int v2;
  uint64_t v3;
  NSObject *v5;
  uint8_t v6[16];

  v1 = *(_QWORD *)(a1 + 48);
  if (!v1)
    v1 = *(_QWORD *)(re::AssetHandle::asset<re::TimelineAsset>((re::TimelineAsset *)(a1 + 24)) + 8);
  if (*(_DWORD *)(v1 + 8) == 12)
  {
    v2 = *(unsigned __int8 *)(v1 + 88);
    v3 = v1 + 96;
    if (v2)
      return v3;
    else
      return 0;
  }
  else
  {
    if (CoreRELog::onceToken != -1)
      dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
    v5 = (id)CoreRELog::log;
    if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)v6 = 0;
      _os_log_error_impl(&dword_224FE9000, v5, OS_LOG_TYPE_ERROR, "Cannot get double 'from' value from non-double from-to-by animation.", v6, 2u);
    }

    return 0;
  }
}

uint64_t RETimelineDefinitionGetDoubleToValue(uint64_t a1)
{
  uint64_t v1;
  int v2;
  uint64_t v3;
  NSObject *v5;
  uint8_t v6[16];

  v1 = *(_QWORD *)(a1 + 48);
  if (!v1)
    v1 = *(_QWORD *)(re::AssetHandle::asset<re::TimelineAsset>((re::TimelineAsset *)(a1 + 24)) + 8);
  if (*(_DWORD *)(v1 + 8) == 12)
  {
    v2 = *(unsigned __int8 *)(v1 + 104);
    v3 = v1 + 112;
    if (v2)
      return v3;
    else
      return 0;
  }
  else
  {
    if (CoreRELog::onceToken != -1)
      dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
    v5 = (id)CoreRELog::log;
    if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)v6 = 0;
      _os_log_error_impl(&dword_224FE9000, v5, OS_LOG_TYPE_ERROR, "Cannot get double 'to' value from non-double from-to-by animation.", v6, 2u);
    }

    return 0;
  }
}

uint64_t RETimelineDefinitionGetDoubleByValue(uint64_t a1)
{
  uint64_t v1;
  int v2;
  uint64_t v3;
  NSObject *v5;
  uint8_t v6[16];

  v1 = *(_QWORD *)(a1 + 48);
  if (!v1)
    v1 = *(_QWORD *)(re::AssetHandle::asset<re::TimelineAsset>((re::TimelineAsset *)(a1 + 24)) + 8);
  if (*(_DWORD *)(v1 + 8) == 12)
  {
    v2 = *(unsigned __int8 *)(v1 + 120);
    v3 = v1 + 128;
    if (v2)
      return v3;
    else
      return 0;
  }
  else
  {
    if (CoreRELog::onceToken != -1)
      dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
    v5 = (id)CoreRELog::log;
    if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)v6 = 0;
      _os_log_error_impl(&dword_224FE9000, v5, OS_LOG_TYPE_ERROR, "Cannot get double 'by' value from non-double from-to-by animation.", v6, 2u);
    }

    return 0;
  }
}

BOOL RETimelineDefinitionSetDoubleFromValue(_anonymous_namespace_::TimelineDefinition *a1, uint64_t *a2)
{
  _anonymous_namespace_ *v3;
  int v4;
  uint64_t v5;
  NSObject *v6;
  uint8_t v8[16];

  v4 = *((_DWORD *)v3 + 2);
  if (v4 == 12)
  {
    if (a2)
    {
      v5 = *a2;
      if (!*((_BYTE *)v3 + 88))
        *((_BYTE *)v3 + 88) = 1;
      *((_QWORD *)v3 + 12) = v5;
    }
    else if (*((_BYTE *)v3 + 88))
    {
      *((_BYTE *)v3 + 88) = 0;
    }
  }
  else
  {
    if (CoreRELog::onceToken != -1)
      dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
    v6 = (id)CoreRELog::log;
    if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)v8 = 0;
      _os_log_error_impl(&dword_224FE9000, v6, OS_LOG_TYPE_ERROR, "Cannot set double 'from' value for non-double from-to-by animation.", v8, 2u);
    }

  }
  return v4 == 12;
}

BOOL RETimelineDefinitionSetDoubleToValue(_anonymous_namespace_::TimelineDefinition *a1, uint64_t *a2)
{
  _anonymous_namespace_ *v3;
  int v4;
  uint64_t v5;
  NSObject *v6;
  uint8_t v8[16];

  v4 = *((_DWORD *)v3 + 2);
  if (v4 == 12)
  {
    if (a2)
    {
      v5 = *a2;
      if (!*((_BYTE *)v3 + 104))
        *((_BYTE *)v3 + 104) = 1;
      *((_QWORD *)v3 + 14) = v5;
    }
    else if (*((_BYTE *)v3 + 104))
    {
      *((_BYTE *)v3 + 104) = 0;
    }
  }
  else
  {
    if (CoreRELog::onceToken != -1)
      dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
    v6 = (id)CoreRELog::log;
    if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)v8 = 0;
      _os_log_error_impl(&dword_224FE9000, v6, OS_LOG_TYPE_ERROR, "Cannot set double 'to' value for non-double from-to-by animation.", v8, 2u);
    }

  }
  return v4 == 12;
}

BOOL RETimelineDefinitionSetDoubleByValue(_anonymous_namespace_::TimelineDefinition *a1, uint64_t *a2)
{
  _anonymous_namespace_ *v3;
  int v4;
  uint64_t v5;
  NSObject *v6;
  uint8_t v8[16];

  v4 = *((_DWORD *)v3 + 2);
  if (v4 == 12)
  {
    if (a2)
    {
      v5 = *a2;
      if (!*((_BYTE *)v3 + 120))
        *((_BYTE *)v3 + 120) = 1;
      *((_QWORD *)v3 + 16) = v5;
    }
    else if (*((_BYTE *)v3 + 120))
    {
      *((_BYTE *)v3 + 120) = 0;
    }
  }
  else
  {
    if (CoreRELog::onceToken != -1)
      dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
    v6 = (id)CoreRELog::log;
    if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)v8 = 0;
      _os_log_error_impl(&dword_224FE9000, v6, OS_LOG_TYPE_ERROR, "Cannot set double 'by' value for non-double from-to-by animation.", v8, 2u);
    }

  }
  return v4 == 12;
}

uint64_t RETimelineDefinitionGetFloat2FromValue(uint64_t a1)
{
  uint64_t v1;
  int v2;
  uint64_t v3;
  NSObject *v5;
  uint8_t v6[16];

  v1 = *(_QWORD *)(a1 + 48);
  if (!v1)
    v1 = *(_QWORD *)(re::AssetHandle::asset<re::TimelineAsset>((re::TimelineAsset *)(a1 + 24)) + 8);
  if (*(_DWORD *)(v1 + 8) == 13)
  {
    v2 = *(unsigned __int8 *)(v1 + 88);
    v3 = v1 + 96;
    if (v2)
      return v3;
    else
      return 0;
  }
  else
  {
    if (CoreRELog::onceToken != -1)
      dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
    v5 = (id)CoreRELog::log;
    if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)v6 = 0;
      _os_log_error_impl(&dword_224FE9000, v5, OS_LOG_TYPE_ERROR, "Cannot get float2 'from' value from non-float2 from-to-by animation.", v6, 2u);
    }

    return 0;
  }
}

uint64_t RETimelineDefinitionGetFloat2ToValue(uint64_t a1)
{
  uint64_t v1;
  int v2;
  uint64_t v3;
  NSObject *v5;
  uint8_t v6[16];

  v1 = *(_QWORD *)(a1 + 48);
  if (!v1)
    v1 = *(_QWORD *)(re::AssetHandle::asset<re::TimelineAsset>((re::TimelineAsset *)(a1 + 24)) + 8);
  if (*(_DWORD *)(v1 + 8) == 13)
  {
    v2 = *(unsigned __int8 *)(v1 + 104);
    v3 = v1 + 112;
    if (v2)
      return v3;
    else
      return 0;
  }
  else
  {
    if (CoreRELog::onceToken != -1)
      dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
    v5 = (id)CoreRELog::log;
    if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)v6 = 0;
      _os_log_error_impl(&dword_224FE9000, v5, OS_LOG_TYPE_ERROR, "Cannot get float2 'to' value from non-float2 from-to-by animation.", v6, 2u);
    }

    return 0;
  }
}

uint64_t RETimelineDefinitionGetFloat2ByValue(uint64_t a1)
{
  uint64_t v1;
  int v2;
  uint64_t v3;
  NSObject *v5;
  uint8_t v6[16];

  v1 = *(_QWORD *)(a1 + 48);
  if (!v1)
    v1 = *(_QWORD *)(re::AssetHandle::asset<re::TimelineAsset>((re::TimelineAsset *)(a1 + 24)) + 8);
  if (*(_DWORD *)(v1 + 8) == 13)
  {
    v2 = *(unsigned __int8 *)(v1 + 120);
    v3 = v1 + 128;
    if (v2)
      return v3;
    else
      return 0;
  }
  else
  {
    if (CoreRELog::onceToken != -1)
      dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
    v5 = (id)CoreRELog::log;
    if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)v6 = 0;
      _os_log_error_impl(&dword_224FE9000, v5, OS_LOG_TYPE_ERROR, "Cannot get float2 'by' value from non-float2 from-to-by animation.", v6, 2u);
    }

    return 0;
  }
}

BOOL RETimelineDefinitionSetFloat2FromValue(_anonymous_namespace_::TimelineDefinition *a1, uint64_t *a2)
{
  _anonymous_namespace_ *v3;
  int v4;
  uint64_t v5;
  NSObject *v6;
  uint8_t v8[16];

  v4 = *((_DWORD *)v3 + 2);
  if (v4 == 13)
  {
    if (a2)
    {
      v5 = *a2;
      if (!*((_BYTE *)v3 + 88))
        *((_BYTE *)v3 + 88) = 1;
      *((_QWORD *)v3 + 12) = v5;
    }
    else if (*((_BYTE *)v3 + 88))
    {
      *((_BYTE *)v3 + 88) = 0;
    }
  }
  else
  {
    if (CoreRELog::onceToken != -1)
      dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
    v6 = (id)CoreRELog::log;
    if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)v8 = 0;
      _os_log_error_impl(&dword_224FE9000, v6, OS_LOG_TYPE_ERROR, "Cannot set float2 'from' value for non-float2 from-to-by animation.", v8, 2u);
    }

  }
  return v4 == 13;
}

BOOL RETimelineDefinitionSetFloat2ToValue(_anonymous_namespace_::TimelineDefinition *a1, uint64_t *a2)
{
  _anonymous_namespace_ *v3;
  int v4;
  uint64_t v5;
  NSObject *v6;
  uint8_t v8[16];

  v4 = *((_DWORD *)v3 + 2);
  if (v4 == 13)
  {
    if (a2)
    {
      v5 = *a2;
      if (!*((_BYTE *)v3 + 104))
        *((_BYTE *)v3 + 104) = 1;
      *((_QWORD *)v3 + 14) = v5;
    }
    else if (*((_BYTE *)v3 + 104))
    {
      *((_BYTE *)v3 + 104) = 0;
    }
  }
  else
  {
    if (CoreRELog::onceToken != -1)
      dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
    v6 = (id)CoreRELog::log;
    if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)v8 = 0;
      _os_log_error_impl(&dword_224FE9000, v6, OS_LOG_TYPE_ERROR, "Cannot set float2 'to' value for non-float2 from-to-by animation.", v8, 2u);
    }

  }
  return v4 == 13;
}

BOOL RETimelineDefinitionSetFloat2ByValue(_anonymous_namespace_::TimelineDefinition *a1, uint64_t *a2)
{
  _anonymous_namespace_ *v3;
  int v4;
  uint64_t v5;
  NSObject *v6;
  uint8_t v8[16];

  v4 = *((_DWORD *)v3 + 2);
  if (v4 == 13)
  {
    if (a2)
    {
      v5 = *a2;
      if (!*((_BYTE *)v3 + 120))
        *((_BYTE *)v3 + 120) = 1;
      *((_QWORD *)v3 + 16) = v5;
    }
    else if (*((_BYTE *)v3 + 120))
    {
      *((_BYTE *)v3 + 120) = 0;
    }
  }
  else
  {
    if (CoreRELog::onceToken != -1)
      dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
    v6 = (id)CoreRELog::log;
    if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)v8 = 0;
      _os_log_error_impl(&dword_224FE9000, v6, OS_LOG_TYPE_ERROR, "Cannot set float2 'by' value for non-float2 from-to-by animation.", v8, 2u);
    }

  }
  return v4 == 13;
}

uint64_t RETimelineDefinitionGetFloat3FromValue(uint64_t a1)
{
  uint64_t v1;
  int v2;
  uint64_t v3;
  NSObject *v5;
  uint8_t v6[16];

  v1 = *(_QWORD *)(a1 + 48);
  if (!v1)
    v1 = *(_QWORD *)(re::AssetHandle::asset<re::TimelineAsset>((re::TimelineAsset *)(a1 + 24)) + 8);
  if (*(_DWORD *)(v1 + 8) == 14)
  {
    v2 = *(unsigned __int8 *)(v1 + 96);
    v3 = v1 + 112;
    if (v2)
      return v3;
    else
      return 0;
  }
  else
  {
    if (CoreRELog::onceToken != -1)
      dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
    v5 = (id)CoreRELog::log;
    if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)v6 = 0;
      _os_log_error_impl(&dword_224FE9000, v5, OS_LOG_TYPE_ERROR, "Cannot get float3 'from' value from non-float3 from-to-by animation.", v6, 2u);
    }

    return 0;
  }
}

uint64_t RETimelineDefinitionGetFloat3ToValue(uint64_t a1)
{
  uint64_t v1;
  int v2;
  uint64_t v3;
  NSObject *v5;
  uint8_t v6[16];

  v1 = *(_QWORD *)(a1 + 48);
  if (!v1)
    v1 = *(_QWORD *)(re::AssetHandle::asset<re::TimelineAsset>((re::TimelineAsset *)(a1 + 24)) + 8);
  if (*(_DWORD *)(v1 + 8) == 14)
  {
    v2 = *(unsigned __int8 *)(v1 + 128);
    v3 = v1 + 144;
    if (v2)
      return v3;
    else
      return 0;
  }
  else
  {
    if (CoreRELog::onceToken != -1)
      dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
    v5 = (id)CoreRELog::log;
    if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)v6 = 0;
      _os_log_error_impl(&dword_224FE9000, v5, OS_LOG_TYPE_ERROR, "Cannot get float3 'to' value from non-float3 from-to-by animation.", v6, 2u);
    }

    return 0;
  }
}

uint64_t RETimelineDefinitionGetFloat3ByValue(uint64_t a1)
{
  uint64_t v1;
  int v2;
  uint64_t v3;
  NSObject *v5;
  uint8_t v6[16];

  v1 = *(_QWORD *)(a1 + 48);
  if (!v1)
    v1 = *(_QWORD *)(re::AssetHandle::asset<re::TimelineAsset>((re::TimelineAsset *)(a1 + 24)) + 8);
  if (*(_DWORD *)(v1 + 8) == 14)
  {
    v2 = *(unsigned __int8 *)(v1 + 160);
    v3 = v1 + 176;
    if (v2)
      return v3;
    else
      return 0;
  }
  else
  {
    if (CoreRELog::onceToken != -1)
      dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
    v5 = (id)CoreRELog::log;
    if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)v6 = 0;
      _os_log_error_impl(&dword_224FE9000, v5, OS_LOG_TYPE_ERROR, "Cannot get float3 'by' value from non-float3 from-to-by animation.", v6, 2u);
    }

    return 0;
  }
}

BOOL RETimelineDefinitionSetFloat3FromValue(_anonymous_namespace_::TimelineDefinition *a1, __int128 *a2)
{
  _anonymous_namespace_ *v3;
  int v4;
  __int128 v5;
  NSObject *v6;
  uint8_t v8[16];

  v4 = *((_DWORD *)v3 + 2);
  if (v4 == 14)
  {
    if (a2)
    {
      v5 = *a2;
      if (!*((_BYTE *)v3 + 96))
        *((_BYTE *)v3 + 96) = 1;
      *((_OWORD *)v3 + 7) = v5;
    }
    else if (*((_BYTE *)v3 + 96))
    {
      *((_BYTE *)v3 + 96) = 0;
    }
  }
  else
  {
    if (CoreRELog::onceToken != -1)
      dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
    v6 = (id)CoreRELog::log;
    if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)v8 = 0;
      _os_log_error_impl(&dword_224FE9000, v6, OS_LOG_TYPE_ERROR, "Cannot set float3 'from' value for non-float3 from-to-by animation.", v8, 2u);
    }

  }
  return v4 == 14;
}

BOOL RETimelineDefinitionSetFloat3ToValue(_anonymous_namespace_::TimelineDefinition *a1, __int128 *a2)
{
  _anonymous_namespace_ *v3;
  int v4;
  __int128 v5;
  NSObject *v6;
  uint8_t v8[16];

  v4 = *((_DWORD *)v3 + 2);
  if (v4 == 14)
  {
    if (a2)
    {
      v5 = *a2;
      if (!*((_BYTE *)v3 + 128))
        *((_BYTE *)v3 + 128) = 1;
      *((_OWORD *)v3 + 9) = v5;
    }
    else if (*((_BYTE *)v3 + 128))
    {
      *((_BYTE *)v3 + 128) = 0;
    }
  }
  else
  {
    if (CoreRELog::onceToken != -1)
      dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
    v6 = (id)CoreRELog::log;
    if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)v8 = 0;
      _os_log_error_impl(&dword_224FE9000, v6, OS_LOG_TYPE_ERROR, "Cannot set float3 'to' value for non-float3 from-to-by animation.", v8, 2u);
    }

  }
  return v4 == 14;
}

BOOL RETimelineDefinitionSetFloat3ByValue(_anonymous_namespace_::TimelineDefinition *a1, __int128 *a2)
{
  _anonymous_namespace_ *v3;
  int v4;
  __int128 v5;
  NSObject *v6;
  uint8_t v8[16];

  v4 = *((_DWORD *)v3 + 2);
  if (v4 == 14)
  {
    if (a2)
    {
      v5 = *a2;
      if (!*((_BYTE *)v3 + 160))
        *((_BYTE *)v3 + 160) = 1;
      *((_OWORD *)v3 + 11) = v5;
    }
    else if (*((_BYTE *)v3 + 160))
    {
      *((_BYTE *)v3 + 160) = 0;
    }
  }
  else
  {
    if (CoreRELog::onceToken != -1)
      dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
    v6 = (id)CoreRELog::log;
    if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)v8 = 0;
      _os_log_error_impl(&dword_224FE9000, v6, OS_LOG_TYPE_ERROR, "Cannot set float3 'by' value for non-float3 from-to-by animation.", v8, 2u);
    }

  }
  return v4 == 14;
}

uint64_t RETimelineDefinitionGetFloat4FromValue(uint64_t a1)
{
  uint64_t v1;
  int v2;
  uint64_t v3;
  NSObject *v5;
  uint8_t v6[16];

  v1 = *(_QWORD *)(a1 + 48);
  if (!v1)
    v1 = *(_QWORD *)(re::AssetHandle::asset<re::TimelineAsset>((re::TimelineAsset *)(a1 + 24)) + 8);
  if (*(_DWORD *)(v1 + 8) == 15)
  {
    v2 = *(unsigned __int8 *)(v1 + 96);
    v3 = v1 + 112;
    if (v2)
      return v3;
    else
      return 0;
  }
  else
  {
    if (CoreRELog::onceToken != -1)
      dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
    v5 = (id)CoreRELog::log;
    if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)v6 = 0;
      _os_log_error_impl(&dword_224FE9000, v5, OS_LOG_TYPE_ERROR, "Cannot get float4 'from' value from non-float4 from-to-by animation.", v6, 2u);
    }

    return 0;
  }
}

uint64_t RETimelineDefinitionGetFloat4ToValue(uint64_t a1)
{
  uint64_t v1;
  int v2;
  uint64_t v3;
  NSObject *v5;
  uint8_t v6[16];

  v1 = *(_QWORD *)(a1 + 48);
  if (!v1)
    v1 = *(_QWORD *)(re::AssetHandle::asset<re::TimelineAsset>((re::TimelineAsset *)(a1 + 24)) + 8);
  if (*(_DWORD *)(v1 + 8) == 15)
  {
    v2 = *(unsigned __int8 *)(v1 + 128);
    v3 = v1 + 144;
    if (v2)
      return v3;
    else
      return 0;
  }
  else
  {
    if (CoreRELog::onceToken != -1)
      dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
    v5 = (id)CoreRELog::log;
    if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)v6 = 0;
      _os_log_error_impl(&dword_224FE9000, v5, OS_LOG_TYPE_ERROR, "Cannot get float4 'to' value from non-float4 from-to-by animation.", v6, 2u);
    }

    return 0;
  }
}

uint64_t RETimelineDefinitionGetFloat4ByValue(uint64_t a1)
{
  uint64_t v1;
  int v2;
  uint64_t v3;
  NSObject *v5;
  uint8_t v6[16];

  v1 = *(_QWORD *)(a1 + 48);
  if (!v1)
    v1 = *(_QWORD *)(re::AssetHandle::asset<re::TimelineAsset>((re::TimelineAsset *)(a1 + 24)) + 8);
  if (*(_DWORD *)(v1 + 8) == 15)
  {
    v2 = *(unsigned __int8 *)(v1 + 160);
    v3 = v1 + 176;
    if (v2)
      return v3;
    else
      return 0;
  }
  else
  {
    if (CoreRELog::onceToken != -1)
      dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
    v5 = (id)CoreRELog::log;
    if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)v6 = 0;
      _os_log_error_impl(&dword_224FE9000, v5, OS_LOG_TYPE_ERROR, "Cannot get float4 'by' value from non-float4 from-to-by animation.", v6, 2u);
    }

    return 0;
  }
}

BOOL RETimelineDefinitionSetFloat4FromValue(_anonymous_namespace_::TimelineDefinition *a1, __int128 *a2)
{
  _anonymous_namespace_ *v3;
  int v4;
  __int128 v5;
  NSObject *v6;
  uint8_t v8[16];

  v4 = *((_DWORD *)v3 + 2);
  if (v4 == 15)
  {
    if (a2)
    {
      v5 = *a2;
      if (!*((_BYTE *)v3 + 96))
        *((_BYTE *)v3 + 96) = 1;
      *((_OWORD *)v3 + 7) = v5;
    }
    else if (*((_BYTE *)v3 + 96))
    {
      *((_BYTE *)v3 + 96) = 0;
    }
  }
  else
  {
    if (CoreRELog::onceToken != -1)
      dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
    v6 = (id)CoreRELog::log;
    if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)v8 = 0;
      _os_log_error_impl(&dword_224FE9000, v6, OS_LOG_TYPE_ERROR, "Cannot set float4 'from' value for non-float4 from-to-by animation.", v8, 2u);
    }

  }
  return v4 == 15;
}

BOOL RETimelineDefinitionSetFloat4ToValue(_anonymous_namespace_::TimelineDefinition *a1, __int128 *a2)
{
  _anonymous_namespace_ *v3;
  int v4;
  __int128 v5;
  NSObject *v6;
  uint8_t v8[16];

  v4 = *((_DWORD *)v3 + 2);
  if (v4 == 15)
  {
    if (a2)
    {
      v5 = *a2;
      if (!*((_BYTE *)v3 + 128))
        *((_BYTE *)v3 + 128) = 1;
      *((_OWORD *)v3 + 9) = v5;
    }
    else if (*((_BYTE *)v3 + 128))
    {
      *((_BYTE *)v3 + 128) = 0;
    }
  }
  else
  {
    if (CoreRELog::onceToken != -1)
      dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
    v6 = (id)CoreRELog::log;
    if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)v8 = 0;
      _os_log_error_impl(&dword_224FE9000, v6, OS_LOG_TYPE_ERROR, "Cannot set float4 'to' value for non-float4 from-to-by animation.", v8, 2u);
    }

  }
  return v4 == 15;
}

BOOL RETimelineDefinitionSetFloat4ByValue(_anonymous_namespace_::TimelineDefinition *a1, __int128 *a2)
{
  _anonymous_namespace_ *v3;
  int v4;
  __int128 v5;
  NSObject *v6;
  uint8_t v8[16];

  v4 = *((_DWORD *)v3 + 2);
  if (v4 == 15)
  {
    if (a2)
    {
      v5 = *a2;
      if (!*((_BYTE *)v3 + 160))
        *((_BYTE *)v3 + 160) = 1;
      *((_OWORD *)v3 + 11) = v5;
    }
    else if (*((_BYTE *)v3 + 160))
    {
      *((_BYTE *)v3 + 160) = 0;
    }
  }
  else
  {
    if (CoreRELog::onceToken != -1)
      dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
    v6 = (id)CoreRELog::log;
    if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)v8 = 0;
      _os_log_error_impl(&dword_224FE9000, v6, OS_LOG_TYPE_ERROR, "Cannot set float4 'by' value for non-float4 from-to-by animation.", v8, 2u);
    }

  }
  return v4 == 15;
}

uint64_t RETimelineDefinitionGetQuaternionFromValue(uint64_t a1)
{
  uint64_t v1;
  int v2;
  uint64_t v3;
  NSObject *v5;
  uint8_t v6[16];

  v1 = *(_QWORD *)(a1 + 48);
  if (!v1)
    v1 = *(_QWORD *)(re::AssetHandle::asset<re::TimelineAsset>((re::TimelineAsset *)(a1 + 24)) + 8);
  if (*(_DWORD *)(v1 + 8) == 16)
  {
    v2 = *(unsigned __int8 *)(v1 + 96);
    v3 = v1 + 112;
    if (v2)
      return v3;
    else
      return 0;
  }
  else
  {
    if (CoreRELog::onceToken != -1)
      dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
    v5 = (id)CoreRELog::log;
    if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)v6 = 0;
      _os_log_error_impl(&dword_224FE9000, v5, OS_LOG_TYPE_ERROR, "Cannot get quaternion 'from' value from non-quaternion from-to-by animation.", v6, 2u);
    }

    return 0;
  }
}

uint64_t RETimelineDefinitionGetQuaternionToValue(uint64_t a1)
{
  uint64_t v1;
  int v2;
  uint64_t v3;
  NSObject *v5;
  uint8_t v6[16];

  v1 = *(_QWORD *)(a1 + 48);
  if (!v1)
    v1 = *(_QWORD *)(re::AssetHandle::asset<re::TimelineAsset>((re::TimelineAsset *)(a1 + 24)) + 8);
  if (*(_DWORD *)(v1 + 8) == 16)
  {
    v2 = *(unsigned __int8 *)(v1 + 128);
    v3 = v1 + 144;
    if (v2)
      return v3;
    else
      return 0;
  }
  else
  {
    if (CoreRELog::onceToken != -1)
      dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
    v5 = (id)CoreRELog::log;
    if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)v6 = 0;
      _os_log_error_impl(&dword_224FE9000, v5, OS_LOG_TYPE_ERROR, "Cannot get quaternion 'to' value from non-quaternion from-to-by animation.", v6, 2u);
    }

    return 0;
  }
}

uint64_t RETimelineDefinitionGetQuaternionByValue(uint64_t a1)
{
  uint64_t v1;
  int v2;
  uint64_t v3;
  NSObject *v5;
  uint8_t v6[16];

  v1 = *(_QWORD *)(a1 + 48);
  if (!v1)
    v1 = *(_QWORD *)(re::AssetHandle::asset<re::TimelineAsset>((re::TimelineAsset *)(a1 + 24)) + 8);
  if (*(_DWORD *)(v1 + 8) == 16)
  {
    v2 = *(unsigned __int8 *)(v1 + 160);
    v3 = v1 + 176;
    if (v2)
      return v3;
    else
      return 0;
  }
  else
  {
    if (CoreRELog::onceToken != -1)
      dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
    v5 = (id)CoreRELog::log;
    if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)v6 = 0;
      _os_log_error_impl(&dword_224FE9000, v5, OS_LOG_TYPE_ERROR, "Cannot get quaternion 'by' value from non-quaternion from-to-by animation.", v6, 2u);
    }

    return 0;
  }
}

BOOL RETimelineDefinitionSetQuaternionFromValue(_anonymous_namespace_::TimelineDefinition *a1, __int128 *a2)
{
  _anonymous_namespace_ *v3;
  int v4;
  __int128 v5;
  NSObject *v6;
  uint8_t v8[16];

  v4 = *((_DWORD *)v3 + 2);
  if (v4 == 16)
  {
    if (a2)
    {
      v5 = *a2;
      if (!*((_BYTE *)v3 + 96))
        *((_BYTE *)v3 + 96) = 1;
      *((_OWORD *)v3 + 7) = v5;
    }
    else if (*((_BYTE *)v3 + 96))
    {
      *((_BYTE *)v3 + 96) = 0;
    }
  }
  else
  {
    if (CoreRELog::onceToken != -1)
      dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
    v6 = (id)CoreRELog::log;
    if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)v8 = 0;
      _os_log_error_impl(&dword_224FE9000, v6, OS_LOG_TYPE_ERROR, "Cannot set quaternion 'from' value for non-quaternion from-to-by animation.", v8, 2u);
    }

  }
  return v4 == 16;
}

BOOL RETimelineDefinitionSetQuaternionToValue(_anonymous_namespace_::TimelineDefinition *a1, __int128 *a2)
{
  _anonymous_namespace_ *v3;
  int v4;
  __int128 v5;
  NSObject *v6;
  uint8_t v8[16];

  v4 = *((_DWORD *)v3 + 2);
  if (v4 == 16)
  {
    if (a2)
    {
      v5 = *a2;
      if (!*((_BYTE *)v3 + 128))
        *((_BYTE *)v3 + 128) = 1;
      *((_OWORD *)v3 + 9) = v5;
    }
    else if (*((_BYTE *)v3 + 128))
    {
      *((_BYTE *)v3 + 128) = 0;
    }
  }
  else
  {
    if (CoreRELog::onceToken != -1)
      dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
    v6 = (id)CoreRELog::log;
    if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)v8 = 0;
      _os_log_error_impl(&dword_224FE9000, v6, OS_LOG_TYPE_ERROR, "Cannot set quaternion 'to' value for non-quaternion from-to-by animation.", v8, 2u);
    }

  }
  return v4 == 16;
}

BOOL RETimelineDefinitionSetQuaternionByValue(_anonymous_namespace_::TimelineDefinition *a1, __int128 *a2)
{
  _anonymous_namespace_ *v3;
  int v4;
  __int128 v5;
  NSObject *v6;
  uint8_t v8[16];

  v4 = *((_DWORD *)v3 + 2);
  if (v4 == 16)
  {
    if (a2)
    {
      v5 = *a2;
      if (!*((_BYTE *)v3 + 160))
        *((_BYTE *)v3 + 160) = 1;
      *((_OWORD *)v3 + 11) = v5;
    }
    else if (*((_BYTE *)v3 + 160))
    {
      *((_BYTE *)v3 + 160) = 0;
    }
  }
  else
  {
    if (CoreRELog::onceToken != -1)
      dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
    v6 = (id)CoreRELog::log;
    if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)v8 = 0;
      _os_log_error_impl(&dword_224FE9000, v6, OS_LOG_TYPE_ERROR, "Cannot set quaternion 'by' value for non-quaternion from-to-by animation.", v8, 2u);
    }

  }
  return v4 == 16;
}

uint64_t RETimelineDefinitionGetSRTFromValue(uint64_t a1)
{
  uint64_t v1;
  int v2;
  uint64_t v3;
  NSObject *v5;
  uint8_t v6[16];

  v1 = *(_QWORD *)(a1 + 48);
  if (!v1)
    v1 = *(_QWORD *)(re::AssetHandle::asset<re::TimelineAsset>((re::TimelineAsset *)(a1 + 24)) + 8);
  if (*(_DWORD *)(v1 + 8) == 17)
  {
    v2 = *(unsigned __int8 *)(v1 + 96);
    v3 = v1 + 112;
    if (v2)
      return v3;
    else
      return 0;
  }
  else
  {
    if (CoreRELog::onceToken != -1)
      dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
    v5 = (id)CoreRELog::log;
    if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)v6 = 0;
      _os_log_error_impl(&dword_224FE9000, v5, OS_LOG_TYPE_ERROR, "Cannot get RESRT 'from' value from non-RESRT from-to-by animation.", v6, 2u);
    }

    return 0;
  }
}

uint64_t RETimelineDefinitionGetSRTToValue(uint64_t a1)
{
  uint64_t v1;
  int v2;
  uint64_t v3;
  NSObject *v5;
  uint8_t v6[16];

  v1 = *(_QWORD *)(a1 + 48);
  if (!v1)
    v1 = *(_QWORD *)(re::AssetHandle::asset<re::TimelineAsset>((re::TimelineAsset *)(a1 + 24)) + 8);
  if (*(_DWORD *)(v1 + 8) == 17)
  {
    v2 = *(unsigned __int8 *)(v1 + 160);
    v3 = v1 + 176;
    if (v2)
      return v3;
    else
      return 0;
  }
  else
  {
    if (CoreRELog::onceToken != -1)
      dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
    v5 = (id)CoreRELog::log;
    if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)v6 = 0;
      _os_log_error_impl(&dword_224FE9000, v5, OS_LOG_TYPE_ERROR, "Cannot get RESRT 'to' value from non-RESRT from-to-by animation.", v6, 2u);
    }

    return 0;
  }
}

uint64_t RETimelineDefinitionGetSRTByValue(uint64_t a1)
{
  uint64_t v1;
  int v2;
  uint64_t v3;
  NSObject *v5;
  uint8_t v6[16];

  v1 = *(_QWORD *)(a1 + 48);
  if (!v1)
    v1 = *(_QWORD *)(re::AssetHandle::asset<re::TimelineAsset>((re::TimelineAsset *)(a1 + 24)) + 8);
  if (*(_DWORD *)(v1 + 8) == 17)
  {
    v2 = *(unsigned __int8 *)(v1 + 224);
    v3 = v1 + 240;
    if (v2)
      return v3;
    else
      return 0;
  }
  else
  {
    if (CoreRELog::onceToken != -1)
      dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
    v5 = (id)CoreRELog::log;
    if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)v6 = 0;
      _os_log_error_impl(&dword_224FE9000, v5, OS_LOG_TYPE_ERROR, "Cannot get RESRT 'by' value from non-RESRT from-to-by animation.", v6, 2u);
    }

    return 0;
  }
}

BOOL RETimelineDefinitionSetSRTFromValue(_anonymous_namespace_::TimelineDefinition *a1, __int128 *a2)
{
  _anonymous_namespace_ *v3;
  int v4;
  __int128 v5;
  _OWORD *v6;
  __int128 v7;
  __int128 v8;
  NSObject *v9;
  __int128 v11;
  uint8_t v12[15];
  __int128 v13;
  __int128 v14;
  __int128 v15;
  uint64_t v16;

  v16 = *MEMORY[0x24BDAC8D0];
  v4 = *((_DWORD *)v3 + 2);
  if (v4 == 17)
  {
    if (a2)
    {
      v5 = a2[1];
      v13 = *a2;
      v14 = v5;
      v15 = a2[2];
      v6 = (_OWORD *)((char *)v3 + 112);
      if (*((_BYTE *)v3 + 96))
      {
        v7 = *a2;
        v8 = a2[2];
        *((_OWORD *)v3 + 8) = a2[1];
        *((_OWORD *)v3 + 9) = v8;
        *v6 = v7;
      }
      else
      {
        *((_BYTE *)v3 + 96) = 1;
        v11 = v14;
        *v6 = v13;
        *((_OWORD *)v3 + 8) = v11;
        *((_OWORD *)v3 + 9) = v15;
      }
    }
    else if (*((_BYTE *)v3 + 96))
    {
      *((_BYTE *)v3 + 96) = 0;
    }
  }
  else
  {
    if (CoreRELog::onceToken != -1)
      dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
    v9 = (id)CoreRELog::log;
    if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)v12 = 0;
      _os_log_error_impl(&dword_224FE9000, v9, OS_LOG_TYPE_ERROR, "Cannot set RESRT 'from' value for non-RESRT from-to-by animation.", v12, 2u);
    }

  }
  return v4 == 17;
}

BOOL RETimelineDefinitionSetSRTToValue(_anonymous_namespace_::TimelineDefinition *a1, __int128 *a2)
{
  _anonymous_namespace_ *v3;
  int v4;
  __int128 v5;
  _OWORD *v6;
  __int128 v7;
  __int128 v8;
  NSObject *v9;
  __int128 v11;
  uint8_t v12[15];
  __int128 v13;
  __int128 v14;
  __int128 v15;
  uint64_t v16;

  v16 = *MEMORY[0x24BDAC8D0];
  v4 = *((_DWORD *)v3 + 2);
  if (v4 == 17)
  {
    if (a2)
    {
      v5 = a2[1];
      v13 = *a2;
      v14 = v5;
      v15 = a2[2];
      v6 = (_OWORD *)((char *)v3 + 176);
      if (*((_BYTE *)v3 + 160))
      {
        v7 = *a2;
        v8 = a2[2];
        *((_OWORD *)v3 + 12) = a2[1];
        *((_OWORD *)v3 + 13) = v8;
        *v6 = v7;
      }
      else
      {
        *((_BYTE *)v3 + 160) = 1;
        v11 = v14;
        *v6 = v13;
        *((_OWORD *)v3 + 12) = v11;
        *((_OWORD *)v3 + 13) = v15;
      }
    }
    else if (*((_BYTE *)v3 + 160))
    {
      *((_BYTE *)v3 + 160) = 0;
    }
  }
  else
  {
    if (CoreRELog::onceToken != -1)
      dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
    v9 = (id)CoreRELog::log;
    if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)v12 = 0;
      _os_log_error_impl(&dword_224FE9000, v9, OS_LOG_TYPE_ERROR, "Cannot set RESRT 'to' value for non-RESRT from-to-by animation.", v12, 2u);
    }

  }
  return v4 == 17;
}

BOOL RETimelineDefinitionSetSRTByValue(_anonymous_namespace_::TimelineDefinition *a1, __int128 *a2)
{
  _anonymous_namespace_ *v3;
  int v4;
  __int128 v5;
  _OWORD *v6;
  __int128 v7;
  __int128 v8;
  NSObject *v9;
  __int128 v11;
  uint8_t v12[15];
  __int128 v13;
  __int128 v14;
  __int128 v15;
  uint64_t v16;

  v16 = *MEMORY[0x24BDAC8D0];
  v4 = *((_DWORD *)v3 + 2);
  if (v4 == 17)
  {
    if (a2)
    {
      v5 = a2[1];
      v13 = *a2;
      v14 = v5;
      v15 = a2[2];
      v6 = (_OWORD *)((char *)v3 + 240);
      if (*((_BYTE *)v3 + 224))
      {
        v7 = *a2;
        v8 = a2[2];
        *((_OWORD *)v3 + 16) = a2[1];
        *((_OWORD *)v3 + 17) = v8;
        *v6 = v7;
      }
      else
      {
        *((_BYTE *)v3 + 224) = 1;
        v11 = v14;
        *v6 = v13;
        *((_OWORD *)v3 + 16) = v11;
        *((_OWORD *)v3 + 17) = v15;
      }
    }
    else if (*((_BYTE *)v3 + 224))
    {
      *((_BYTE *)v3 + 224) = 0;
    }
  }
  else
  {
    if (CoreRELog::onceToken != -1)
      dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
    v9 = (id)CoreRELog::log;
    if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)v12 = 0;
      _os_log_error_impl(&dword_224FE9000, v9, OS_LOG_TYPE_ERROR, "Cannot set RESRT 'by' value for non-RESRT from-to-by animation.", v12, 2u);
    }

  }
  return v4 == 17;
}

uint64_t RETimelineDefinitionGetSkeletalPoseFromJointCount(uint64_t a1)
{
  uint64_t v1;
  NSObject *v3;
  uint8_t v4[16];

  v1 = *(_QWORD *)(a1 + 48);
  if (!v1)
    v1 = *(_QWORD *)(re::AssetHandle::asset<re::TimelineAsset>((re::TimelineAsset *)(a1 + 24)) + 8);
  if (*(_DWORD *)(v1 + 8) == 18)
    return *(_QWORD *)(v1 + 232);
  if (CoreRELog::onceToken != -1)
    dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
  v3 = (id)CoreRELog::log;
  if (os_log_type_enabled(v3, OS_LOG_TYPE_ERROR))
  {
    *(_WORD *)v4 = 0;
    _os_log_error_impl(&dword_224FE9000, v3, OS_LOG_TYPE_ERROR, "Cannot get Sketetal Pose 'from' joint count for non-SkeletalPose from-to-by animation.", v4, 2u);
  }

  return 0;
}

uint64_t RETimelineDefinitionGetSkeletalPoseToJointCount(uint64_t a1)
{
  uint64_t v1;
  NSObject *v3;
  uint8_t v4[16];

  v1 = *(_QWORD *)(a1 + 48);
  if (!v1)
    v1 = *(_QWORD *)(re::AssetHandle::asset<re::TimelineAsset>((re::TimelineAsset *)(a1 + 24)) + 8);
  if (*(_DWORD *)(v1 + 8) == 18)
    return *(_QWORD *)(v1 + 272);
  if (CoreRELog::onceToken != -1)
    dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
  v3 = (id)CoreRELog::log;
  if (os_log_type_enabled(v3, OS_LOG_TYPE_ERROR))
  {
    *(_WORD *)v4 = 0;
    _os_log_error_impl(&dword_224FE9000, v3, OS_LOG_TYPE_ERROR, "Cannot get Sketetal Pose 'to' joint count for non-SkeletalPose from-to-by animation.", v4, 2u);
  }

  return 0;
}

uint64_t RETimelineDefinitionGetSkeletalPoseByJointCount(uint64_t a1)
{
  uint64_t v1;
  NSObject *v3;
  uint8_t v4[16];

  v1 = *(_QWORD *)(a1 + 48);
  if (!v1)
    v1 = *(_QWORD *)(re::AssetHandle::asset<re::TimelineAsset>((re::TimelineAsset *)(a1 + 24)) + 8);
  if (*(_DWORD *)(v1 + 8) == 18)
    return *(_QWORD *)(v1 + 312);
  if (CoreRELog::onceToken != -1)
    dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
  v3 = (id)CoreRELog::log;
  if (os_log_type_enabled(v3, OS_LOG_TYPE_ERROR))
  {
    *(_WORD *)v4 = 0;
    _os_log_error_impl(&dword_224FE9000, v3, OS_LOG_TYPE_ERROR, "Cannot get Sketetal Pose 'by' joint count for non-SkeletalPose from-to-by animation.", v4, 2u);
  }

  return 0;
}

BOOL RETimelineDefinitionSetSkeletalPoseFromJointCount(_anonymous_namespace_::TimelineDefinition *a1, unint64_t a2)
{
  _anonymous_namespace_ *v3;
  int v4;
  _anonymous_namespace_ *v5;
  NSObject *v6;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v4 = *((_DWORD *)v3 + 2);
  if (v4 == 18)
  {
    v5 = v3;
    re::DynamicArray<re::StringID>::resize((uint64_t)v3 + 216, a2);
    if (a2)
    {
      if (!*((_BYTE *)v5 + 88))
      {
        LOBYTE(v8) = 1;
        v10 = 0;
        v11 = 0;
        v9 = 0;
        re::Optional<re::SkeletalPoseAssetData>::operator=((unsigned __int8 *)v5 + 88, &v8);
        if ((_BYTE)v8)
        {
          if (v9 && v10)
            (*(void (**)(void))(*(_QWORD *)v9 + 40))();
        }
      }
    }
    else
    {
      LOBYTE(v8) = 0;
      re::Optional<re::SkeletalPoseAssetData>::operator=((unsigned __int8 *)v5 + 88, &v8);
      if ((_BYTE)v8 && v9 && v10)
        (*(void (**)(void))(*(_QWORD *)v9 + 40))();
    }
  }
  else
  {
    if (CoreRELog::onceToken != -1)
      dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
    v6 = (id)CoreRELog::log;
    if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
    {
      LOWORD(v8) = 0;
      _os_log_error_impl(&dword_224FE9000, v6, OS_LOG_TYPE_ERROR, "Cannot set Sketetal Pose 'from' joint count for non-SkeletalPose from-to-by animation.", (uint8_t *)&v8, 2u);
    }

  }
  return v4 == 18;
}

_QWORD *`anonymous namespace'::resizeFixedArray<re::GenericSRT<float>>(_QWORD *result, unint64_t a2)
{
  unint64_t v2;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t i;
  _OWORD *v10;
  __int128 v11;
  __int128 v12;

  v2 = result[1];
  if (v2 != a2)
  {
    v4 = result;
    v5 = *result;
    *result = 0;
    result[1] = 0;
    v6 = result[2];
    result[2] = 0;
    if (v2 >= a2)
      v7 = a2;
    else
      v7 = v2;
    if (v7)
    {
      v8 = 0;
      for (i = 0; i != v7; ++i)
      {
        if (v4[1] <= i)
        {
          os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
          _os_log_send_and_compose_impl();
          _os_crash_msg();
          __break(1u);
        }
        v10 = (_OWORD *)(v4[2] + v8);
        v11 = *(_OWORD *)(v6 + v8);
        v12 = *(_OWORD *)(v6 + v8 + 32);
        v10[1] = *(_OWORD *)(v6 + v8 + 16);
        v10[2] = v12;
        *v10 = v11;
        v8 += 48;
      }
    }
    if (v2)
    {
      if (v5)
        return (_QWORD *)(*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v5 + 40))(v5, v6);
    }
  }
  return result;
}

BOOL RETimelineDefinitionSetSkeletalPoseToJointCount(_anonymous_namespace_::TimelineDefinition *a1, unint64_t a2)
{
  _anonymous_namespace_ *v3;
  int v4;
  _anonymous_namespace_ *v5;
  NSObject *v6;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v4 = *((_DWORD *)v3 + 2);
  if (v4 == 18)
  {
    v5 = v3;
    re::DynamicArray<re::StringID>::resize((uint64_t)v3 + 256, a2);
    if (a2)
    {
      if (!*((_BYTE *)v5 + 120))
      {
        LOBYTE(v8) = 1;
        v10 = 0;
        v11 = 0;
        v9 = 0;
        re::Optional<re::SkeletalPoseAssetData>::operator=((unsigned __int8 *)v5 + 120, &v8);
        if ((_BYTE)v8)
        {
          if (v9 && v10)
            (*(void (**)(void))(*(_QWORD *)v9 + 40))();
        }
      }
    }
    else
    {
      LOBYTE(v8) = 0;
      re::Optional<re::SkeletalPoseAssetData>::operator=((unsigned __int8 *)v5 + 120, &v8);
      if ((_BYTE)v8 && v9 && v10)
        (*(void (**)(void))(*(_QWORD *)v9 + 40))();
    }
  }
  else
  {
    if (CoreRELog::onceToken != -1)
      dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
    v6 = (id)CoreRELog::log;
    if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
    {
      LOWORD(v8) = 0;
      _os_log_error_impl(&dword_224FE9000, v6, OS_LOG_TYPE_ERROR, "Cannot set Sketetal Pose 'to' joint count for non-SkeletalPose from-to-by animation.", (uint8_t *)&v8, 2u);
    }

  }
  return v4 == 18;
}

BOOL RETimelineDefinitionSetSkeletalPoseByJointCount(_anonymous_namespace_::TimelineDefinition *a1, unint64_t a2)
{
  _anonymous_namespace_ *v3;
  int v4;
  _anonymous_namespace_ *v5;
  NSObject *v6;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v4 = *((_DWORD *)v3 + 2);
  if (v4 == 18)
  {
    v5 = v3;
    re::DynamicArray<re::StringID>::resize((uint64_t)v3 + 296, a2);
    if (a2)
    {
      if (!*((_BYTE *)v5 + 152))
      {
        LOBYTE(v8) = 1;
        v10 = 0;
        v11 = 0;
        v9 = 0;
        re::Optional<re::SkeletalPoseAssetData>::operator=((unsigned __int8 *)v5 + 152, &v8);
        if ((_BYTE)v8)
        {
          if (v9 && v10)
            (*(void (**)(void))(*(_QWORD *)v9 + 40))();
        }
      }
    }
    else
    {
      LOBYTE(v8) = 0;
      re::Optional<re::SkeletalPoseAssetData>::operator=((unsigned __int8 *)v5 + 152, &v8);
      if ((_BYTE)v8 && v9 && v10)
        (*(void (**)(void))(*(_QWORD *)v9 + 40))();
    }
  }
  else
  {
    if (CoreRELog::onceToken != -1)
      dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
    v6 = (id)CoreRELog::log;
    if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
    {
      LOWORD(v8) = 0;
      _os_log_error_impl(&dword_224FE9000, v6, OS_LOG_TYPE_ERROR, "Cannot set Sketetal Pose 'by' joint count for non-SkeletalPose from-to-by animation.", (uint8_t *)&v8, 2u);
    }

  }
  return v4 == 18;
}

BOOL RETimelineDefinitionSetSkeletalPoseFromJointNames(_anonymous_namespace_::TimelineDefinition *a1, uint64_t a2, unint64_t a3)
{
  _BOOL8 v6;
  _anonymous_namespace_ *v7;
  _anonymous_namespace_ *v8;
  uint64_t v9;
  unint64_t v10;
  const char *v11;
  unint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  void *v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v19;
  void *v20;
  uint64_t v21;
  int v22;
  const char *v23;
  __int16 v24;
  int v25;
  __int16 v26;
  unint64_t v27;
  __int16 v28;
  unint64_t v29;
  _OWORD v30[5];
  uint64_t v31;

  v31 = *MEMORY[0x24BDAC8D0];
  v6 = RETimelineDefinitionSetSkeletalPoseFromJointCount(a1, a3);
  if (v6)
  {
    if (a3)
    {
      v8 = v7;
      v9 = 0;
      v10 = 0;
      do
      {
        v11 = *(const char **)(a2 + 8 * v10);
        v19 = 0;
        v20 = &str_110;
        v12 = *((_QWORD *)v8 + 29);
        if (v12 <= v10)
        {
          v21 = 0;
          memset(v30, 0, sizeof(v30));
          os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
          v22 = 136315906;
          v23 = "operator[]";
          v24 = 1024;
          v25 = 789;
          v26 = 2048;
          v27 = v10;
          v28 = 2048;
          v29 = v12;
          _os_log_send_and_compose_impl();
          _os_crash_msg();
          __break(1u);
        }
        v13 = (_QWORD *)(*((_QWORD *)v8 + 31) + v9);
        v14 = v19;
        v15 = v20;
        v19 = 0;
        v20 = &str_110;
        v16 = v13[1];
        v17 = v14 & 0xFFFFFFFFFFFFFFFELL | *v13 & 1;
        v13[1] = v15;
        *(_QWORD *)&v30[0] = v17;
        *((_QWORD *)&v30[0] + 1) = v16;
        *v13 = v14;
        re::StringID::destroyString((re::StringID *)v30);
        re::StringID::destroyString((re::StringID *)&v19);
        ++v10;
        v9 += 16;
      }
      while (a3 != v10);
    }
  }
  return v6;
}

BOOL RETimelineDefinitionSetSkeletalPoseToJointNames(_anonymous_namespace_::TimelineDefinition *a1, uint64_t a2, unint64_t a3)
{
  _BOOL8 v6;
  _anonymous_namespace_ *v7;
  _anonymous_namespace_ *v8;
  uint64_t v9;
  unint64_t v10;
  const char *v11;
  unint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  void *v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v19;
  void *v20;
  uint64_t v21;
  int v22;
  const char *v23;
  __int16 v24;
  int v25;
  __int16 v26;
  unint64_t v27;
  __int16 v28;
  unint64_t v29;
  _OWORD v30[5];
  uint64_t v31;

  v31 = *MEMORY[0x24BDAC8D0];
  v6 = RETimelineDefinitionSetSkeletalPoseToJointCount(a1, a3);
  if (v6)
  {
    if (a3)
    {
      v8 = v7;
      v9 = 0;
      v10 = 0;
      do
      {
        v11 = *(const char **)(a2 + 8 * v10);
        v19 = 0;
        v20 = &str_110;
        v12 = *((_QWORD *)v8 + 34);
        if (v12 <= v10)
        {
          v21 = 0;
          memset(v30, 0, sizeof(v30));
          os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
          v22 = 136315906;
          v23 = "operator[]";
          v24 = 1024;
          v25 = 789;
          v26 = 2048;
          v27 = v10;
          v28 = 2048;
          v29 = v12;
          _os_log_send_and_compose_impl();
          _os_crash_msg();
          __break(1u);
        }
        v13 = (_QWORD *)(*((_QWORD *)v8 + 36) + v9);
        v14 = v19;
        v15 = v20;
        v19 = 0;
        v20 = &str_110;
        v16 = v13[1];
        v17 = v14 & 0xFFFFFFFFFFFFFFFELL | *v13 & 1;
        v13[1] = v15;
        *(_QWORD *)&v30[0] = v17;
        *((_QWORD *)&v30[0] + 1) = v16;
        *v13 = v14;
        re::StringID::destroyString((re::StringID *)v30);
        re::StringID::destroyString((re::StringID *)&v19);
        ++v10;
        v9 += 16;
      }
      while (a3 != v10);
    }
  }
  return v6;
}

BOOL RETimelineDefinitionSetSkeletalPoseByJointNames(_anonymous_namespace_::TimelineDefinition *a1, uint64_t a2, unint64_t a3)
{
  _BOOL8 v6;
  _anonymous_namespace_ *v7;
  _anonymous_namespace_ *v8;
  uint64_t v9;
  unint64_t v10;
  const char *v11;
  unint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  void *v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v19;
  void *v20;
  uint64_t v21;
  int v22;
  const char *v23;
  __int16 v24;
  int v25;
  __int16 v26;
  unint64_t v27;
  __int16 v28;
  unint64_t v29;
  _OWORD v30[5];
  uint64_t v31;

  v31 = *MEMORY[0x24BDAC8D0];
  v6 = RETimelineDefinitionSetSkeletalPoseByJointCount(a1, a3);
  if (v6)
  {
    if (a3)
    {
      v8 = v7;
      v9 = 0;
      v10 = 0;
      do
      {
        v11 = *(const char **)(a2 + 8 * v10);
        v19 = 0;
        v20 = &str_110;
        v12 = *((_QWORD *)v8 + 39);
        if (v12 <= v10)
        {
          v21 = 0;
          memset(v30, 0, sizeof(v30));
          os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
          v22 = 136315906;
          v23 = "operator[]";
          v24 = 1024;
          v25 = 789;
          v26 = 2048;
          v27 = v10;
          v28 = 2048;
          v29 = v12;
          _os_log_send_and_compose_impl();
          _os_crash_msg();
          __break(1u);
        }
        v13 = (_QWORD *)(*((_QWORD *)v8 + 41) + v9);
        v14 = v19;
        v15 = v20;
        v19 = 0;
        v20 = &str_110;
        v16 = v13[1];
        v17 = v14 & 0xFFFFFFFFFFFFFFFELL | *v13 & 1;
        v13[1] = v15;
        *(_QWORD *)&v30[0] = v17;
        *((_QWORD *)&v30[0] + 1) = v16;
        *v13 = v14;
        re::StringID::destroyString((re::StringID *)v30);
        re::StringID::destroyString((re::StringID *)&v19);
        ++v10;
        v9 += 16;
      }
      while (a3 != v10);
    }
  }
  return v6;
}

uint64_t RETimelineDefinitionGetSkeletalPoseFromJointName(uint64_t a1, unint64_t a2)
{
  uint64_t v3;
  NSObject *v5;
  NSObject *v6;
  int v7;
  unint64_t v8;
  uint64_t v9;

  v9 = *MEMORY[0x24BDAC8D0];
  v3 = *(_QWORD *)(a1 + 48);
  if (!v3)
    v3 = *(_QWORD *)(re::AssetHandle::asset<re::TimelineAsset>((re::TimelineAsset *)(a1 + 24)) + 8);
  if (*(_DWORD *)(v3 + 8) == 18)
  {
    if (*(_QWORD *)(v3 + 232) > a2)
      return *(_QWORD *)(*(_QWORD *)(v3 + 248) + 16 * a2 + 8);
    if (CoreRELog::onceToken != -1)
      dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
    v6 = (id)CoreRELog::log;
    if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
    {
      v7 = 134217984;
      v8 = a2;
      _os_log_error_impl(&dword_224FE9000, v6, OS_LOG_TYPE_ERROR, "Cannot get Sketetal Pose 'from' joint name, invalid joint index: %zu.", (uint8_t *)&v7, 0xCu);
    }

  }
  else
  {
    if (CoreRELog::onceToken != -1)
      dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
    v5 = (id)CoreRELog::log;
    if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR))
    {
      LOWORD(v7) = 0;
      _os_log_error_impl(&dword_224FE9000, v5, OS_LOG_TYPE_ERROR, "Cannot get Sketetal Pose 'from' joint name for non-SkeletalPose from-to-by animation.", (uint8_t *)&v7, 2u);
    }

  }
  return 0;
}

uint64_t RETimelineDefinitionGetSkeletalPoseToJointName(uint64_t a1, unint64_t a2)
{
  uint64_t v3;
  NSObject *v5;
  NSObject *v6;
  int v7;
  unint64_t v8;
  uint64_t v9;

  v9 = *MEMORY[0x24BDAC8D0];
  v3 = *(_QWORD *)(a1 + 48);
  if (!v3)
    v3 = *(_QWORD *)(re::AssetHandle::asset<re::TimelineAsset>((re::TimelineAsset *)(a1 + 24)) + 8);
  if (*(_DWORD *)(v3 + 8) == 18)
  {
    if (*(_QWORD *)(v3 + 272) > a2)
      return *(_QWORD *)(*(_QWORD *)(v3 + 288) + 16 * a2 + 8);
    if (CoreRELog::onceToken != -1)
      dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
    v6 = (id)CoreRELog::log;
    if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
    {
      v7 = 134217984;
      v8 = a2;
      _os_log_error_impl(&dword_224FE9000, v6, OS_LOG_TYPE_ERROR, "Cannot get Sketetal Pose 'to' joint name, invalid joint index: %zu.", (uint8_t *)&v7, 0xCu);
    }

  }
  else
  {
    if (CoreRELog::onceToken != -1)
      dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
    v5 = (id)CoreRELog::log;
    if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR))
    {
      LOWORD(v7) = 0;
      _os_log_error_impl(&dword_224FE9000, v5, OS_LOG_TYPE_ERROR, "Cannot get Sketetal Pose 'to' joint name for non-SkeletalPose from-to-by animation.", (uint8_t *)&v7, 2u);
    }

  }
  return 0;
}

uint64_t RETimelineDefinitionGetSkeletalPoseByJointName(uint64_t a1, unint64_t a2)
{
  uint64_t v3;
  NSObject *v5;
  NSObject *v6;
  int v7;
  unint64_t v8;
  uint64_t v9;

  v9 = *MEMORY[0x24BDAC8D0];
  v3 = *(_QWORD *)(a1 + 48);
  if (!v3)
    v3 = *(_QWORD *)(re::AssetHandle::asset<re::TimelineAsset>((re::TimelineAsset *)(a1 + 24)) + 8);
  if (*(_DWORD *)(v3 + 8) == 18)
  {
    if (*(_QWORD *)(v3 + 312) > a2)
      return *(_QWORD *)(*(_QWORD *)(v3 + 328) + 16 * a2 + 8);
    if (CoreRELog::onceToken != -1)
      dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
    v6 = (id)CoreRELog::log;
    if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
    {
      v7 = 134217984;
      v8 = a2;
      _os_log_error_impl(&dword_224FE9000, v6, OS_LOG_TYPE_ERROR, "Cannot get Sketetal Pose 'by' joint name, invalid joint index: %zu.", (uint8_t *)&v7, 0xCu);
    }

  }
  else
  {
    if (CoreRELog::onceToken != -1)
      dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
    v5 = (id)CoreRELog::log;
    if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR))
    {
      LOWORD(v7) = 0;
      _os_log_error_impl(&dword_224FE9000, v5, OS_LOG_TYPE_ERROR, "Cannot get Sketetal Pose 'by' joint name for non-SkeletalPose from-to-by animation.", (uint8_t *)&v7, 2u);
    }

  }
  return 0;
}

uint64_t RETimelineDefinitionSetSkeletalPoseFromJointName(_anonymous_namespace_::TimelineDefinition *a1, unint64_t a2, const char *a3)
{
  _anonymous_namespace_ *v5;
  _anonymous_namespace_ *v6;
  unint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  unint64_t v12;
  NSObject *v14;
  NSObject *v15;
  unint64_t v16;
  uint64_t v17;
  void *v18;
  uint64_t v19;
  int v20;
  const char *v21;
  __int16 v22;
  int v23;
  __int16 v24;
  unint64_t v25;
  __int16 v26;
  unint64_t v27;
  uint8_t buf[16];
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  uint64_t v33;

  v33 = *MEMORY[0x24BDAC8D0];
  if (*((_DWORD *)v5 + 2) != 18)
  {
    if (CoreRELog::onceToken != -1)
      dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
    v14 = (id)CoreRELog::log;
    if (os_log_type_enabled(v14, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      _os_log_error_impl(&dword_224FE9000, v14, OS_LOG_TYPE_ERROR, "Cannot set Sketetal Pose 'from' joint name for non-SkeletalPose from-to-by animation.", buf, 2u);
    }

    return 0;
  }
  v6 = v5;
  if (*((_QWORD *)v5 + 29) > a2)
  {
    v17 = 0;
    v18 = &str_110;
    v7 = *((_QWORD *)v6 + 29);
    if (v7 > a2)
    {
      v8 = (_QWORD *)(*((_QWORD *)v6 + 31) + 16 * a2);
      v9 = v17;
      v10 = v18;
      v17 = 0;
      v18 = &str_110;
      v11 = v8[1];
      v12 = v9 & 0xFFFFFFFFFFFFFFFELL | *v8 & 1;
      v8[1] = v10;
      *(_QWORD *)buf = v12;
      *(_QWORD *)&buf[8] = v11;
      *v8 = v9;
      re::StringID::destroyString((re::StringID *)buf);
      re::StringID::destroyString((re::StringID *)&v17);
      return 1;
    }
    v19 = 0;
    v31 = 0u;
    v32 = 0u;
    v29 = 0u;
    v30 = 0u;
    *(_OWORD *)buf = 0u;
    v16 = v7;
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    v20 = 136315906;
    v21 = "operator[]";
    v22 = 1024;
    v23 = 789;
    v24 = 2048;
    v25 = a2;
    v26 = 2048;
    v27 = v16;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
    goto LABEL_16;
  }
  if (CoreRELog::onceToken != -1)
LABEL_16:
    dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
  v15 = (id)CoreRELog::log;
  if (os_log_type_enabled(v15, OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)buf = 134217984;
    *(_QWORD *)&buf[4] = a2;
    _os_log_error_impl(&dword_224FE9000, v15, OS_LOG_TYPE_ERROR, "Cannot set Sketetal Pose 'from' joint name, invalid joint index: %zu.", buf, 0xCu);
  }

  return 0;
}

uint64_t RETimelineDefinitionSetSkeletalPoseToJointName(_anonymous_namespace_::TimelineDefinition *a1, unint64_t a2, const char *a3)
{
  _anonymous_namespace_ *v5;
  _anonymous_namespace_ *v6;
  unint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  unint64_t v12;
  NSObject *v14;
  NSObject *v15;
  unint64_t v16;
  uint64_t v17;
  void *v18;
  uint64_t v19;
  int v20;
  const char *v21;
  __int16 v22;
  int v23;
  __int16 v24;
  unint64_t v25;
  __int16 v26;
  unint64_t v27;
  uint8_t buf[16];
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  uint64_t v33;

  v33 = *MEMORY[0x24BDAC8D0];
  if (*((_DWORD *)v5 + 2) != 18)
  {
    if (CoreRELog::onceToken != -1)
      dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
    v14 = (id)CoreRELog::log;
    if (os_log_type_enabled(v14, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      _os_log_error_impl(&dword_224FE9000, v14, OS_LOG_TYPE_ERROR, "Cannot set Sketetal Pose 'to' joint name for non-SkeletalPose from-to-by animation.", buf, 2u);
    }

    return 0;
  }
  v6 = v5;
  if (*((_QWORD *)v5 + 34) > a2)
  {
    v17 = 0;
    v18 = &str_110;
    v7 = *((_QWORD *)v6 + 34);
    if (v7 > a2)
    {
      v8 = (_QWORD *)(*((_QWORD *)v6 + 36) + 16 * a2);
      v9 = v17;
      v10 = v18;
      v17 = 0;
      v18 = &str_110;
      v11 = v8[1];
      v12 = v9 & 0xFFFFFFFFFFFFFFFELL | *v8 & 1;
      v8[1] = v10;
      *(_QWORD *)buf = v12;
      *(_QWORD *)&buf[8] = v11;
      *v8 = v9;
      re::StringID::destroyString((re::StringID *)buf);
      re::StringID::destroyString((re::StringID *)&v17);
      return 1;
    }
    v19 = 0;
    v31 = 0u;
    v32 = 0u;
    v29 = 0u;
    v30 = 0u;
    *(_OWORD *)buf = 0u;
    v16 = v7;
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    v20 = 136315906;
    v21 = "operator[]";
    v22 = 1024;
    v23 = 789;
    v24 = 2048;
    v25 = a2;
    v26 = 2048;
    v27 = v16;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
    goto LABEL_16;
  }
  if (CoreRELog::onceToken != -1)
LABEL_16:
    dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
  v15 = (id)CoreRELog::log;
  if (os_log_type_enabled(v15, OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)buf = 134217984;
    *(_QWORD *)&buf[4] = a2;
    _os_log_error_impl(&dword_224FE9000, v15, OS_LOG_TYPE_ERROR, "Cannot set Sketetal Pose 'to' joint name, invalid joint index: %zu.", buf, 0xCu);
  }

  return 0;
}

uint64_t RETimelineDefinitionSetSkeletalPoseByJointName(_anonymous_namespace_::TimelineDefinition *a1, unint64_t a2, const char *a3)
{
  _anonymous_namespace_ *v5;
  _anonymous_namespace_ *v6;
  unint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  unint64_t v12;
  NSObject *v14;
  NSObject *v15;
  unint64_t v16;
  uint64_t v17;
  void *v18;
  uint64_t v19;
  int v20;
  const char *v21;
  __int16 v22;
  int v23;
  __int16 v24;
  unint64_t v25;
  __int16 v26;
  unint64_t v27;
  uint8_t buf[16];
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  uint64_t v33;

  v33 = *MEMORY[0x24BDAC8D0];
  if (*((_DWORD *)v5 + 2) != 18)
  {
    if (CoreRELog::onceToken != -1)
      dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
    v14 = (id)CoreRELog::log;
    if (os_log_type_enabled(v14, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      _os_log_error_impl(&dword_224FE9000, v14, OS_LOG_TYPE_ERROR, "Cannot set Sketetal Pose 'by' joint name for non-SkeletalPose from-to-by animation.", buf, 2u);
    }

    return 0;
  }
  v6 = v5;
  if (*((_QWORD *)v5 + 39) > a2)
  {
    v17 = 0;
    v18 = &str_110;
    v7 = *((_QWORD *)v6 + 39);
    if (v7 > a2)
    {
      v8 = (_QWORD *)(*((_QWORD *)v6 + 41) + 16 * a2);
      v9 = v17;
      v10 = v18;
      v17 = 0;
      v18 = &str_110;
      v11 = v8[1];
      v12 = v9 & 0xFFFFFFFFFFFFFFFELL | *v8 & 1;
      v8[1] = v10;
      *(_QWORD *)buf = v12;
      *(_QWORD *)&buf[8] = v11;
      *v8 = v9;
      re::StringID::destroyString((re::StringID *)buf);
      re::StringID::destroyString((re::StringID *)&v17);
      return 1;
    }
    v19 = 0;
    v31 = 0u;
    v32 = 0u;
    v29 = 0u;
    v30 = 0u;
    *(_OWORD *)buf = 0u;
    v16 = v7;
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    v20 = 136315906;
    v21 = "operator[]";
    v22 = 1024;
    v23 = 789;
    v24 = 2048;
    v25 = a2;
    v26 = 2048;
    v27 = v16;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
    goto LABEL_16;
  }
  if (CoreRELog::onceToken != -1)
LABEL_16:
    dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
  v15 = (id)CoreRELog::log;
  if (os_log_type_enabled(v15, OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)buf = 134217984;
    *(_QWORD *)&buf[4] = a2;
    _os_log_error_impl(&dword_224FE9000, v15, OS_LOG_TYPE_ERROR, "Cannot set Sketetal Pose 'by' joint name, invalid joint index: %zu.", buf, 0xCu);
  }

  return 0;
}

uint64_t RETimelineDefinitionGetSkeletalPoseFromValue(uint64_t a1)
{
  uint64_t v1;
  NSObject *v3;
  uint8_t v4[16];

  v1 = *(_QWORD *)(a1 + 48);
  if (!v1)
    v1 = *(_QWORD *)(re::AssetHandle::asset<re::TimelineAsset>((re::TimelineAsset *)(a1 + 24)) + 8);
  if (*(_DWORD *)(v1 + 8) == 18)
  {
    if (*(_BYTE *)(v1 + 88))
      return *(_QWORD *)(v1 + 112);
  }
  else
  {
    if (CoreRELog::onceToken != -1)
      dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
    v3 = (id)CoreRELog::log;
    if (os_log_type_enabled(v3, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)v4 = 0;
      _os_log_error_impl(&dword_224FE9000, v3, OS_LOG_TYPE_ERROR, "Cannot get Sketetal Pose 'from' joint values for non-SkeletalPose from-to-by animation.", v4, 2u);
    }

  }
  return 0;
}

uint64_t RETimelineDefinitionGetSkeletalPoseToValue(uint64_t a1)
{
  uint64_t v1;
  NSObject *v3;
  uint8_t v4[16];

  v1 = *(_QWORD *)(a1 + 48);
  if (!v1)
    v1 = *(_QWORD *)(re::AssetHandle::asset<re::TimelineAsset>((re::TimelineAsset *)(a1 + 24)) + 8);
  if (*(_DWORD *)(v1 + 8) == 18)
  {
    if (*(_BYTE *)(v1 + 120))
      return *(_QWORD *)(v1 + 144);
  }
  else
  {
    if (CoreRELog::onceToken != -1)
      dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
    v3 = (id)CoreRELog::log;
    if (os_log_type_enabled(v3, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)v4 = 0;
      _os_log_error_impl(&dword_224FE9000, v3, OS_LOG_TYPE_ERROR, "Cannot get Sketetal Pose 'to' joint values for non-SkeletalPose from-to-by animation.", v4, 2u);
    }

  }
  return 0;
}

uint64_t RETimelineDefinitionGetSkeletalPoseByValue(uint64_t a1)
{
  uint64_t v1;
  NSObject *v3;
  uint8_t v4[16];

  v1 = *(_QWORD *)(a1 + 48);
  if (!v1)
    v1 = *(_QWORD *)(re::AssetHandle::asset<re::TimelineAsset>((re::TimelineAsset *)(a1 + 24)) + 8);
  if (*(_DWORD *)(v1 + 8) == 18)
  {
    if (*(_BYTE *)(v1 + 152))
      return *(_QWORD *)(v1 + 176);
  }
  else
  {
    if (CoreRELog::onceToken != -1)
      dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
    v3 = (id)CoreRELog::log;
    if (os_log_type_enabled(v3, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)v4 = 0;
      _os_log_error_impl(&dword_224FE9000, v3, OS_LOG_TYPE_ERROR, "Cannot get Sketetal Pose 'by' joint values for non-SkeletalPose from-to-by animation.", v4, 2u);
    }

  }
  return 0;
}

BOOL RETimelineDefinitionSetSkeletalPoseFromValue(_anonymous_namespace_::TimelineDefinition *a1, uint64_t a2, unint64_t a3)
{
  _BOOL8 v6;
  _BOOL8 v7;
  _anonymous_namespace_ *v8;
  uint64_t v9;
  unint64_t v10;
  _OWORD *v11;
  __int128 v12;
  __int128 v13;

  v6 = RETimelineDefinitionSetSkeletalPoseFromJointCount(a1, a3);
  v7 = v6;
  if (a3 && v6)
  {
    v9 = 0;
    v10 = 0;
    do
    {
      if (*((_QWORD *)v8 + 13) <= v10)
      {
        os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
      }
      v11 = (_OWORD *)(*((_QWORD *)v8 + 14) + v9);
      v12 = *(_OWORD *)(a2 + v9);
      v13 = *(_OWORD *)(a2 + v9 + 32);
      v11[1] = *(_OWORD *)(a2 + v9 + 16);
      v11[2] = v13;
      *v11 = v12;
      ++v10;
      v9 += 48;
    }
    while (a3 != v10);
  }
  return v7;
}

BOOL RETimelineDefinitionSetSkeletalPoseToValue(_anonymous_namespace_::TimelineDefinition *a1, uint64_t a2, unint64_t a3)
{
  _BOOL8 v6;
  _BOOL8 v7;
  _anonymous_namespace_ *v8;
  uint64_t v9;
  unint64_t v10;
  _OWORD *v11;
  __int128 v12;
  __int128 v13;

  v6 = RETimelineDefinitionSetSkeletalPoseToJointCount(a1, a3);
  v7 = v6;
  if (a3 && v6)
  {
    v9 = 0;
    v10 = 0;
    do
    {
      if (*((_QWORD *)v8 + 17) <= v10)
      {
        os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
      }
      v11 = (_OWORD *)(*((_QWORD *)v8 + 18) + v9);
      v12 = *(_OWORD *)(a2 + v9);
      v13 = *(_OWORD *)(a2 + v9 + 32);
      v11[1] = *(_OWORD *)(a2 + v9 + 16);
      v11[2] = v13;
      *v11 = v12;
      ++v10;
      v9 += 48;
    }
    while (a3 != v10);
  }
  return v7;
}

BOOL RETimelineDefinitionSetSkeletalPoseByValue(_anonymous_namespace_::TimelineDefinition *a1, uint64_t a2, unint64_t a3)
{
  _BOOL8 v6;
  _BOOL8 v7;
  _anonymous_namespace_ *v8;
  uint64_t v9;
  unint64_t v10;
  _OWORD *v11;
  __int128 v12;
  __int128 v13;

  v6 = RETimelineDefinitionSetSkeletalPoseByJointCount(a1, a3);
  v7 = v6;
  if (a3 && v6)
  {
    v9 = 0;
    v10 = 0;
    do
    {
      if (*((_QWORD *)v8 + 21) <= v10)
      {
        os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
      }
      v11 = (_OWORD *)(*((_QWORD *)v8 + 22) + v9);
      v12 = *(_OWORD *)(a2 + v9);
      v13 = *(_OWORD *)(a2 + v9 + 32);
      v11[1] = *(_OWORD *)(a2 + v9 + 16);
      v11[2] = v13;
      *v11 = v12;
      ++v10;
      v9 += 48;
    }
    while (a3 != v10);
  }
  return v7;
}

uint64_t RETimelineDefinitionSetSkeletalPoseFromJointValue(_anonymous_namespace_::TimelineDefinition *a1, unint64_t a2, __n128 a3, __n128 a4, __n128 a5)
{
  _anonymous_namespace_ *v6;
  __n128 *v7;
  NSObject *v9;
  const char *v10;
  NSObject *v11;
  uint8_t buf[4];
  unint64_t v16;
  uint64_t v17;

  v17 = *MEMORY[0x24BDAC8D0];
  if (*((_DWORD *)v6 + 2) != 18)
  {
    if (CoreRELog::onceToken != -1)
      dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
    v9 = (id)CoreRELog::log;
    if (!os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
      goto LABEL_12;
    *(_WORD *)buf = 0;
    v10 = "Cannot set Sketetal Pose 'from' joint value for non-SkeletalPose from-to-by animation.";
    goto LABEL_20;
  }
  if (!*((_BYTE *)v6 + 88))
  {
    if (CoreRELog::onceToken != -1)
      dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
    v9 = (id)CoreRELog::log;
    if (!os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
      goto LABEL_12;
    *(_WORD *)buf = 0;
    v10 = "Cannot set Sketetal Pose 'from' joint value for invalid 'from' pose.";
LABEL_20:
    _os_log_error_impl(&dword_224FE9000, v9, OS_LOG_TYPE_ERROR, v10, buf, 2u);
LABEL_12:

    return 0;
  }
  if (*((_QWORD *)v6 + 13) > a2)
  {
    v7 = (__n128 *)(*((_QWORD *)v6 + 14) + 48 * a2);
    *v7 = a3;
    v7[1] = a4;
    v7[2] = a5;
    return 1;
  }
  if (CoreRELog::onceToken != -1)
    dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
  v11 = (id)CoreRELog::log;
  if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)buf = 134217984;
    v16 = a2;
    _os_log_error_impl(&dword_224FE9000, v11, OS_LOG_TYPE_ERROR, "Cannot set Sketetal Pose 'from' joint value, invalid joint index: %zu.", buf, 0xCu);
  }

  return 0;
}

uint64_t RETimelineDefinitionSetSkeletalPoseToJointValue(_anonymous_namespace_::TimelineDefinition *a1, unint64_t a2, __n128 a3, __n128 a4, __n128 a5)
{
  _anonymous_namespace_ *v6;
  __n128 *v7;
  NSObject *v9;
  const char *v10;
  NSObject *v11;
  uint8_t buf[4];
  unint64_t v16;
  uint64_t v17;

  v17 = *MEMORY[0x24BDAC8D0];
  if (*((_DWORD *)v6 + 2) != 18)
  {
    if (CoreRELog::onceToken != -1)
      dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
    v9 = (id)CoreRELog::log;
    if (!os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
      goto LABEL_12;
    *(_WORD *)buf = 0;
    v10 = "Cannot set Sketetal Pose 'to' joint value for non-SkeletalPose from-to-by animation.";
    goto LABEL_20;
  }
  if (!*((_BYTE *)v6 + 120))
  {
    if (CoreRELog::onceToken != -1)
      dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
    v9 = (id)CoreRELog::log;
    if (!os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
      goto LABEL_12;
    *(_WORD *)buf = 0;
    v10 = "Cannot set Sketetal Pose 'to' joint value for invalid 'to' pose.";
LABEL_20:
    _os_log_error_impl(&dword_224FE9000, v9, OS_LOG_TYPE_ERROR, v10, buf, 2u);
LABEL_12:

    return 0;
  }
  if (*((_QWORD *)v6 + 17) > a2)
  {
    v7 = (__n128 *)(*((_QWORD *)v6 + 18) + 48 * a2);
    *v7 = a3;
    v7[1] = a4;
    v7[2] = a5;
    return 1;
  }
  if (CoreRELog::onceToken != -1)
    dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
  v11 = (id)CoreRELog::log;
  if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)buf = 134217984;
    v16 = a2;
    _os_log_error_impl(&dword_224FE9000, v11, OS_LOG_TYPE_ERROR, "Cannot set Sketetal Pose 'to' joint value, invalid joint index: %zu.", buf, 0xCu);
  }

  return 0;
}

uint64_t RETimelineDefinitionSetSkeletalPoseByJointValue(_anonymous_namespace_::TimelineDefinition *a1, unint64_t a2, __n128 a3, __n128 a4, __n128 a5)
{
  _anonymous_namespace_ *v6;
  __n128 *v7;
  NSObject *v9;
  const char *v10;
  NSObject *v11;
  uint8_t buf[4];
  unint64_t v16;
  uint64_t v17;

  v17 = *MEMORY[0x24BDAC8D0];
  if (*((_DWORD *)v6 + 2) != 18)
  {
    if (CoreRELog::onceToken != -1)
      dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
    v9 = (id)CoreRELog::log;
    if (!os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
      goto LABEL_12;
    *(_WORD *)buf = 0;
    v10 = "Cannot set Sketetal Pose 'by' joint value for non-SkeletalPose from-to-by animation.";
    goto LABEL_20;
  }
  if (!*((_BYTE *)v6 + 152))
  {
    if (CoreRELog::onceToken != -1)
      dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
    v9 = (id)CoreRELog::log;
    if (!os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
      goto LABEL_12;
    *(_WORD *)buf = 0;
    v10 = "Cannot set Sketetal Pose 'by' joint value for invalid 'by' pose.";
LABEL_20:
    _os_log_error_impl(&dword_224FE9000, v9, OS_LOG_TYPE_ERROR, v10, buf, 2u);
LABEL_12:

    return 0;
  }
  if (*((_QWORD *)v6 + 21) > a2)
  {
    v7 = (__n128 *)(*((_QWORD *)v6 + 22) + 48 * a2);
    *v7 = a3;
    v7[1] = a4;
    v7[2] = a5;
    return 1;
  }
  if (CoreRELog::onceToken != -1)
    dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
  v11 = (id)CoreRELog::log;
  if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)buf = 134217984;
    v16 = a2;
    _os_log_error_impl(&dword_224FE9000, v11, OS_LOG_TYPE_ERROR, "Cannot set Sketetal Pose 'by' joint value, invalid joint index: %zu.", buf, 0xCu);
  }

  return 0;
}

uint64_t RETimelineDefinitionGetBlendShapeWeightsFromWeightCount(uint64_t a1)
{
  uint64_t v1;
  NSObject *v3;
  uint8_t v4[16];

  v1 = *(_QWORD *)(a1 + 48);
  if (!v1)
    v1 = *(_QWORD *)(re::AssetHandle::asset<re::TimelineAsset>((re::TimelineAsset *)(a1 + 24)) + 8);
  if (*(_DWORD *)(v1 + 8) == 50)
    return *(_QWORD *)(v1 + 208);
  if (CoreRELog::onceToken != -1)
    dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
  v3 = (id)CoreRELog::log;
  if (os_log_type_enabled(v3, OS_LOG_TYPE_ERROR))
  {
    *(_WORD *)v4 = 0;
    _os_log_error_impl(&dword_224FE9000, v3, OS_LOG_TYPE_ERROR, "Cannot get Blend Shape Weights 'from' weight count for non-BlendShapeWeights from-to-by animation.", v4, 2u);
  }

  return 0;
}

uint64_t RETimelineDefinitionGetBlendShapeWeightsToWeightCount(uint64_t a1)
{
  uint64_t v1;
  NSObject *v3;
  uint8_t v4[16];

  v1 = *(_QWORD *)(a1 + 48);
  if (!v1)
    v1 = *(_QWORD *)(re::AssetHandle::asset<re::TimelineAsset>((re::TimelineAsset *)(a1 + 24)) + 8);
  if (*(_DWORD *)(v1 + 8) == 50)
    return *(_QWORD *)(v1 + 248);
  if (CoreRELog::onceToken != -1)
    dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
  v3 = (id)CoreRELog::log;
  if (os_log_type_enabled(v3, OS_LOG_TYPE_ERROR))
  {
    *(_WORD *)v4 = 0;
    _os_log_error_impl(&dword_224FE9000, v3, OS_LOG_TYPE_ERROR, "Cannot get Blend Shape Weights 'to' weight count for non-BlendShapeWeights from-to-by animation.", v4, 2u);
  }

  return 0;
}

uint64_t RETimelineDefinitionGetBlendShapeWeightsByWeightCount(uint64_t a1)
{
  uint64_t v1;
  NSObject *v3;
  uint8_t v4[16];

  v1 = *(_QWORD *)(a1 + 48);
  if (!v1)
    v1 = *(_QWORD *)(re::AssetHandle::asset<re::TimelineAsset>((re::TimelineAsset *)(a1 + 24)) + 8);
  if (*(_DWORD *)(v1 + 8) == 50)
    return *(_QWORD *)(v1 + 288);
  if (CoreRELog::onceToken != -1)
    dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
  v3 = (id)CoreRELog::log;
  if (os_log_type_enabled(v3, OS_LOG_TYPE_ERROR))
  {
    *(_WORD *)v4 = 0;
    _os_log_error_impl(&dword_224FE9000, v3, OS_LOG_TYPE_ERROR, "Cannot get Blend Shape Weights 'by' weight count for non-BlendShapeWeights from-to-by animation.", v4, 2u);
  }

  return 0;
}

BOOL RETimelineDefinitionSetBlendShapeWeightsFromWeightCount(_anonymous_namespace_::TimelineDefinition *a1, unint64_t a2)
{
  _anonymous_namespace_ *v3;
  int v4;
  _anonymous_namespace_ *v5;
  NSObject *v6;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v4 = *((_DWORD *)v3 + 2);
  if (v4 == 50)
  {
    v5 = v3;
    re::DynamicArray<re::StringID>::resize((uint64_t)v3 + 192, a2);
    if (a2)
    {
      if (!*((_BYTE *)v5 + 88))
      {
        LOBYTE(v8) = 1;
        v10 = 0;
        v11 = 0;
        v9 = 0;
        re::Optional<re::SkeletalPoseAssetData>::operator=((unsigned __int8 *)v5 + 88, &v8);
        if ((_BYTE)v8)
        {
          if (v9 && v10)
            (*(void (**)(void))(*(_QWORD *)v9 + 40))();
        }
      }
    }
    else
    {
      LOBYTE(v8) = 0;
      re::Optional<re::SkeletalPoseAssetData>::operator=((unsigned __int8 *)v5 + 88, &v8);
      if ((_BYTE)v8 && v9 && v10)
        (*(void (**)(void))(*(_QWORD *)v9 + 40))();
    }
  }
  else
  {
    if (CoreRELog::onceToken != -1)
      dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
    v6 = (id)CoreRELog::log;
    if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
    {
      LOWORD(v8) = 0;
      _os_log_error_impl(&dword_224FE9000, v6, OS_LOG_TYPE_ERROR, "Cannot set Blend Shape Weights 'from' weight count for non-BlendShapeWeights from-to-by animation.", (uint8_t *)&v8, 2u);
    }

  }
  return v4 == 50;
}

void `anonymous namespace'::resizeFixedArray<float>(_anonymous_namespace_ *a1, unint64_t a2)
{
  unint64_t v2;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v2 = *((_QWORD *)a1 + 1);
  if (v2 != a2)
  {
    v5 = *(_QWORD *)a1;
    *(_QWORD *)a1 = 0;
    *((_QWORD *)a1 + 1) = 0;
    v6 = *((_QWORD *)a1 + 2);
    *((_QWORD *)a1 + 2) = 0;
    if (v2 >= a2)
      v7 = a2;
    else
      v7 = v2;
    if (v7)
    {
      v8 = 0;
      v10 = *((_QWORD *)a1 + 1);
      v9 = *((_QWORD *)a1 + 2);
      do
      {
        if (v10 == v8)
        {
          os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
          _os_log_send_and_compose_impl();
          _os_crash_msg();
          __break(1u);
        }
        *(_DWORD *)(v9 + 4 * v8) = *(_DWORD *)(v6 + 4 * v8);
        ++v8;
      }
      while (v7 != v8);
    }
    if (v2)
    {
      if (v5)
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v5 + 40))(v5, v6);
    }
  }
}

BOOL RETimelineDefinitionSetBlendShapeWeightsToWeightCount(_anonymous_namespace_::TimelineDefinition *a1, unint64_t a2)
{
  _anonymous_namespace_ *v3;
  int v4;
  _anonymous_namespace_ *v5;
  NSObject *v6;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v4 = *((_DWORD *)v3 + 2);
  if (v4 == 50)
  {
    v5 = v3;
    re::DynamicArray<re::StringID>::resize((uint64_t)v3 + 232, a2);
    if (a2)
    {
      if (!*((_BYTE *)v5 + 120))
      {
        LOBYTE(v8) = 1;
        v10 = 0;
        v11 = 0;
        v9 = 0;
        re::Optional<re::SkeletalPoseAssetData>::operator=((unsigned __int8 *)v5 + 120, &v8);
        if ((_BYTE)v8)
        {
          if (v9 && v10)
            (*(void (**)(void))(*(_QWORD *)v9 + 40))();
        }
      }
    }
    else
    {
      LOBYTE(v8) = 0;
      re::Optional<re::SkeletalPoseAssetData>::operator=((unsigned __int8 *)v5 + 120, &v8);
      if ((_BYTE)v8 && v9 && v10)
        (*(void (**)(void))(*(_QWORD *)v9 + 40))();
    }
  }
  else
  {
    if (CoreRELog::onceToken != -1)
      dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
    v6 = (id)CoreRELog::log;
    if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
    {
      LOWORD(v8) = 0;
      _os_log_error_impl(&dword_224FE9000, v6, OS_LOG_TYPE_ERROR, "Cannot set Blend Shape Weights 'to' weight count for non-BlendShapeWeights from-to-by animation.", (uint8_t *)&v8, 2u);
    }

  }
  return v4 == 50;
}

BOOL RETimelineDefinitionSetBlendShapeWeightsByWeightCount(_anonymous_namespace_::TimelineDefinition *a1, unint64_t a2)
{
  _anonymous_namespace_ *v3;
  int v4;
  _anonymous_namespace_ *v5;
  NSObject *v6;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v4 = *((_DWORD *)v3 + 2);
  if (v4 == 50)
  {
    v5 = v3;
    re::DynamicArray<re::StringID>::resize((uint64_t)v3 + 272, a2);
    if (a2)
    {
      if (!*((_BYTE *)v5 + 152))
      {
        LOBYTE(v8) = 1;
        v10 = 0;
        v11 = 0;
        v9 = 0;
        re::Optional<re::SkeletalPoseAssetData>::operator=((unsigned __int8 *)v5 + 152, &v8);
        if ((_BYTE)v8)
        {
          if (v9 && v10)
            (*(void (**)(void))(*(_QWORD *)v9 + 40))();
        }
      }
    }
    else
    {
      LOBYTE(v8) = 0;
      re::Optional<re::SkeletalPoseAssetData>::operator=((unsigned __int8 *)v5 + 152, &v8);
      if ((_BYTE)v8 && v9 && v10)
        (*(void (**)(void))(*(_QWORD *)v9 + 40))();
    }
  }
  else
  {
    if (CoreRELog::onceToken != -1)
      dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
    v6 = (id)CoreRELog::log;
    if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
    {
      LOWORD(v8) = 0;
      _os_log_error_impl(&dword_224FE9000, v6, OS_LOG_TYPE_ERROR, "Cannot set Blend Shape Weights 'by' weight count for non-BlendShapeWeights from-to-by animation.", (uint8_t *)&v8, 2u);
    }

  }
  return v4 == 50;
}

BOOL RETimelineDefinitionSetBlendShapeWeightsFromWeightNames(_anonymous_namespace_::TimelineDefinition *a1, uint64_t a2, unint64_t a3)
{
  _BOOL8 v6;
  _anonymous_namespace_ *v7;
  _anonymous_namespace_ *v8;
  uint64_t v9;
  unint64_t v10;
  const char *v11;
  unint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  void *v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v19;
  void *v20;
  uint64_t v21;
  int v22;
  const char *v23;
  __int16 v24;
  int v25;
  __int16 v26;
  unint64_t v27;
  __int16 v28;
  unint64_t v29;
  _OWORD v30[5];
  uint64_t v31;

  v31 = *MEMORY[0x24BDAC8D0];
  v6 = RETimelineDefinitionSetBlendShapeWeightsFromWeightCount(a1, a3);
  if (v6)
  {
    if (a3)
    {
      v8 = v7;
      v9 = 0;
      v10 = 0;
      do
      {
        v11 = *(const char **)(a2 + 8 * v10);
        v19 = 0;
        v20 = &str_110;
        v12 = *((_QWORD *)v8 + 26);
        if (v12 <= v10)
        {
          v21 = 0;
          memset(v30, 0, sizeof(v30));
          os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
          v22 = 136315906;
          v23 = "operator[]";
          v24 = 1024;
          v25 = 789;
          v26 = 2048;
          v27 = v10;
          v28 = 2048;
          v29 = v12;
          _os_log_send_and_compose_impl();
          _os_crash_msg();
          __break(1u);
        }
        v13 = (_QWORD *)(*((_QWORD *)v8 + 28) + v9);
        v14 = v19;
        v15 = v20;
        v19 = 0;
        v20 = &str_110;
        v16 = v13[1];
        v17 = v14 & 0xFFFFFFFFFFFFFFFELL | *v13 & 1;
        v13[1] = v15;
        *(_QWORD *)&v30[0] = v17;
        *((_QWORD *)&v30[0] + 1) = v16;
        *v13 = v14;
        re::StringID::destroyString((re::StringID *)v30);
        re::StringID::destroyString((re::StringID *)&v19);
        ++v10;
        v9 += 16;
      }
      while (a3 != v10);
    }
  }
  return v6;
}

BOOL RETimelineDefinitionSetBlendShapeWeightsToWeightNames(_anonymous_namespace_::TimelineDefinition *a1, uint64_t a2, unint64_t a3)
{
  _BOOL8 v6;
  _anonymous_namespace_ *v7;
  _anonymous_namespace_ *v8;
  uint64_t v9;
  unint64_t v10;
  const char *v11;
  unint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  void *v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v19;
  void *v20;
  uint64_t v21;
  int v22;
  const char *v23;
  __int16 v24;
  int v25;
  __int16 v26;
  unint64_t v27;
  __int16 v28;
  unint64_t v29;
  _OWORD v30[5];
  uint64_t v31;

  v31 = *MEMORY[0x24BDAC8D0];
  v6 = RETimelineDefinitionSetBlendShapeWeightsToWeightCount(a1, a3);
  if (v6)
  {
    if (a3)
    {
      v8 = v7;
      v9 = 0;
      v10 = 0;
      do
      {
        v11 = *(const char **)(a2 + 8 * v10);
        v19 = 0;
        v20 = &str_110;
        v12 = *((_QWORD *)v8 + 31);
        if (v12 <= v10)
        {
          v21 = 0;
          memset(v30, 0, sizeof(v30));
          os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
          v22 = 136315906;
          v23 = "operator[]";
          v24 = 1024;
          v25 = 789;
          v26 = 2048;
          v27 = v10;
          v28 = 2048;
          v29 = v12;
          _os_log_send_and_compose_impl();
          _os_crash_msg();
          __break(1u);
        }
        v13 = (_QWORD *)(*((_QWORD *)v8 + 33) + v9);
        v14 = v19;
        v15 = v20;
        v19 = 0;
        v20 = &str_110;
        v16 = v13[1];
        v17 = v14 & 0xFFFFFFFFFFFFFFFELL | *v13 & 1;
        v13[1] = v15;
        *(_QWORD *)&v30[0] = v17;
        *((_QWORD *)&v30[0] + 1) = v16;
        *v13 = v14;
        re::StringID::destroyString((re::StringID *)v30);
        re::StringID::destroyString((re::StringID *)&v19);
        ++v10;
        v9 += 16;
      }
      while (a3 != v10);
    }
  }
  return v6;
}

BOOL RETimelineDefinitionSetBlendShapeWeightsByWeightNames(_anonymous_namespace_::TimelineDefinition *a1, uint64_t a2, unint64_t a3)
{
  _BOOL8 v6;
  _anonymous_namespace_ *v7;
  _anonymous_namespace_ *v8;
  uint64_t v9;
  unint64_t v10;
  const char *v11;
  unint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  void *v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v19;
  void *v20;
  uint64_t v21;
  int v22;
  const char *v23;
  __int16 v24;
  int v25;
  __int16 v26;
  unint64_t v27;
  __int16 v28;
  unint64_t v29;
  _OWORD v30[5];
  uint64_t v31;

  v31 = *MEMORY[0x24BDAC8D0];
  v6 = RETimelineDefinitionSetBlendShapeWeightsByWeightCount(a1, a3);
  if (v6)
  {
    if (a3)
    {
      v8 = v7;
      v9 = 0;
      v10 = 0;
      do
      {
        v11 = *(const char **)(a2 + 8 * v10);
        v19 = 0;
        v20 = &str_110;
        v12 = *((_QWORD *)v8 + 36);
        if (v12 <= v10)
        {
          v21 = 0;
          memset(v30, 0, sizeof(v30));
          os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
          v22 = 136315906;
          v23 = "operator[]";
          v24 = 1024;
          v25 = 789;
          v26 = 2048;
          v27 = v10;
          v28 = 2048;
          v29 = v12;
          _os_log_send_and_compose_impl();
          _os_crash_msg();
          __break(1u);
        }
        v13 = (_QWORD *)(*((_QWORD *)v8 + 38) + v9);
        v14 = v19;
        v15 = v20;
        v19 = 0;
        v20 = &str_110;
        v16 = v13[1];
        v17 = v14 & 0xFFFFFFFFFFFFFFFELL | *v13 & 1;
        v13[1] = v15;
        *(_QWORD *)&v30[0] = v17;
        *((_QWORD *)&v30[0] + 1) = v16;
        *v13 = v14;
        re::StringID::destroyString((re::StringID *)v30);
        re::StringID::destroyString((re::StringID *)&v19);
        ++v10;
        v9 += 16;
      }
      while (a3 != v10);
    }
  }
  return v6;
}

uint64_t RETimelineDefinitionGetBlendShapeWeightsFromWeightName(uint64_t a1, unint64_t a2)
{
  uint64_t v3;
  NSObject *v5;
  NSObject *v6;
  int v7;
  unint64_t v8;
  uint64_t v9;

  v9 = *MEMORY[0x24BDAC8D0];
  v3 = *(_QWORD *)(a1 + 48);
  if (!v3)
    v3 = *(_QWORD *)(re::AssetHandle::asset<re::TimelineAsset>((re::TimelineAsset *)(a1 + 24)) + 8);
  if (*(_DWORD *)(v3 + 8) == 50)
  {
    if (*(_QWORD *)(v3 + 208) > a2)
      return *(_QWORD *)(*(_QWORD *)(v3 + 224) + 16 * a2 + 8);
    if (CoreRELog::onceToken != -1)
      dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
    v6 = (id)CoreRELog::log;
    if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
    {
      v7 = 134217984;
      v8 = a2;
      _os_log_error_impl(&dword_224FE9000, v6, OS_LOG_TYPE_ERROR, "Cannot get Blend Shape Weights 'from' weight name, invalid weight index: %zu.", (uint8_t *)&v7, 0xCu);
    }

  }
  else
  {
    if (CoreRELog::onceToken != -1)
      dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
    v5 = (id)CoreRELog::log;
    if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR))
    {
      LOWORD(v7) = 0;
      _os_log_error_impl(&dword_224FE9000, v5, OS_LOG_TYPE_ERROR, "Cannot get Blend Shape Weights 'from' weight name for non-BlendShapeWeights from-to-by animation.", (uint8_t *)&v7, 2u);
    }

  }
  return 0;
}

uint64_t RETimelineDefinitionGetBlendShapeWeightsToWeightName(uint64_t a1, unint64_t a2)
{
  uint64_t v3;
  NSObject *v5;
  NSObject *v6;
  int v7;
  unint64_t v8;
  uint64_t v9;

  v9 = *MEMORY[0x24BDAC8D0];
  v3 = *(_QWORD *)(a1 + 48);
  if (!v3)
    v3 = *(_QWORD *)(re::AssetHandle::asset<re::TimelineAsset>((re::TimelineAsset *)(a1 + 24)) + 8);
  if (*(_DWORD *)(v3 + 8) == 50)
  {
    if (*(_QWORD *)(v3 + 248) > a2)
      return *(_QWORD *)(*(_QWORD *)(v3 + 264) + 16 * a2 + 8);
    if (CoreRELog::onceToken != -1)
      dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
    v6 = (id)CoreRELog::log;
    if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
    {
      v7 = 134217984;
      v8 = a2;
      _os_log_error_impl(&dword_224FE9000, v6, OS_LOG_TYPE_ERROR, "Cannot get Blend Shape Weights 'to' weight name, invalid weight index: %zu.", (uint8_t *)&v7, 0xCu);
    }

  }
  else
  {
    if (CoreRELog::onceToken != -1)
      dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
    v5 = (id)CoreRELog::log;
    if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR))
    {
      LOWORD(v7) = 0;
      _os_log_error_impl(&dword_224FE9000, v5, OS_LOG_TYPE_ERROR, "Cannot get Blend Shape Weights 'to' weight name for non-BlendShapeWeights from-to-by animation.", (uint8_t *)&v7, 2u);
    }

  }
  return 0;
}

uint64_t RETimelineDefinitionGetBlendShapeWeightsByWeightName(uint64_t a1, unint64_t a2)
{
  uint64_t v3;
  NSObject *v5;
  NSObject *v6;
  int v7;
  unint64_t v8;
  uint64_t v9;

  v9 = *MEMORY[0x24BDAC8D0];
  v3 = *(_QWORD *)(a1 + 48);
  if (!v3)
    v3 = *(_QWORD *)(re::AssetHandle::asset<re::TimelineAsset>((re::TimelineAsset *)(a1 + 24)) + 8);
  if (*(_DWORD *)(v3 + 8) == 50)
  {
    if (*(_QWORD *)(v3 + 288) > a2)
      return *(_QWORD *)(*(_QWORD *)(v3 + 304) + 16 * a2 + 8);
    if (CoreRELog::onceToken != -1)
      dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
    v6 = (id)CoreRELog::log;
    if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
    {
      v7 = 134217984;
      v8 = a2;
      _os_log_error_impl(&dword_224FE9000, v6, OS_LOG_TYPE_ERROR, "Cannot get Blend Shape Weights 'by' weight name, invalid weight index: %zu.", (uint8_t *)&v7, 0xCu);
    }

  }
  else
  {
    if (CoreRELog::onceToken != -1)
      dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
    v5 = (id)CoreRELog::log;
    if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR))
    {
      LOWORD(v7) = 0;
      _os_log_error_impl(&dword_224FE9000, v5, OS_LOG_TYPE_ERROR, "Cannot get Blend Shape Weights 'by' weight name for non-BlendShapeWeights from-to-by animation.", (uint8_t *)&v7, 2u);
    }

  }
  return 0;
}

uint64_t RETimelineDefinitionSetBlendShapeWeightsFromWeightName(_anonymous_namespace_::TimelineDefinition *a1, unint64_t a2, const char *a3)
{
  _anonymous_namespace_ *v5;
  _anonymous_namespace_ *v6;
  unint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  unint64_t v12;
  NSObject *v14;
  NSObject *v15;
  unint64_t v16;
  uint64_t v17;
  void *v18;
  uint64_t v19;
  int v20;
  const char *v21;
  __int16 v22;
  int v23;
  __int16 v24;
  unint64_t v25;
  __int16 v26;
  unint64_t v27;
  uint8_t buf[16];
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  uint64_t v33;

  v33 = *MEMORY[0x24BDAC8D0];
  if (*((_DWORD *)v5 + 2) != 50)
  {
    if (CoreRELog::onceToken != -1)
      dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
    v14 = (id)CoreRELog::log;
    if (os_log_type_enabled(v14, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      _os_log_error_impl(&dword_224FE9000, v14, OS_LOG_TYPE_ERROR, "Cannot set Blend Shape Weights 'from' weight name for non-BlendShapeWeights from-to-by animation.", buf, 2u);
    }

    return 0;
  }
  v6 = v5;
  if (*((_QWORD *)v5 + 26) > a2)
  {
    v17 = 0;
    v18 = &str_110;
    v7 = *((_QWORD *)v6 + 26);
    if (v7 > a2)
    {
      v8 = (_QWORD *)(*((_QWORD *)v6 + 28) + 16 * a2);
      v9 = v17;
      v10 = v18;
      v17 = 0;
      v18 = &str_110;
      v11 = v8[1];
      v12 = v9 & 0xFFFFFFFFFFFFFFFELL | *v8 & 1;
      v8[1] = v10;
      *(_QWORD *)buf = v12;
      *(_QWORD *)&buf[8] = v11;
      *v8 = v9;
      re::StringID::destroyString((re::StringID *)buf);
      re::StringID::destroyString((re::StringID *)&v17);
      return 1;
    }
    v19 = 0;
    v31 = 0u;
    v32 = 0u;
    v29 = 0u;
    v30 = 0u;
    *(_OWORD *)buf = 0u;
    v16 = v7;
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    v20 = 136315906;
    v21 = "operator[]";
    v22 = 1024;
    v23 = 789;
    v24 = 2048;
    v25 = a2;
    v26 = 2048;
    v27 = v16;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
    goto LABEL_16;
  }
  if (CoreRELog::onceToken != -1)
LABEL_16:
    dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
  v15 = (id)CoreRELog::log;
  if (os_log_type_enabled(v15, OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)buf = 134217984;
    *(_QWORD *)&buf[4] = a2;
    _os_log_error_impl(&dword_224FE9000, v15, OS_LOG_TYPE_ERROR, "Cannot set Blend Shape Weights 'from' weight name, invalid weight index: %zu.", buf, 0xCu);
  }

  return 0;
}

uint64_t RETimelineDefinitionSetBlendShapeWeightsToWeightName(_anonymous_namespace_::TimelineDefinition *a1, unint64_t a2, const char *a3)
{
  _anonymous_namespace_ *v5;
  _anonymous_namespace_ *v6;
  unint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  unint64_t v12;
  NSObject *v14;
  NSObject *v15;
  unint64_t v16;
  uint64_t v17;
  void *v18;
  uint64_t v19;
  int v20;
  const char *v21;
  __int16 v22;
  int v23;
  __int16 v24;
  unint64_t v25;
  __int16 v26;
  unint64_t v27;
  uint8_t buf[16];
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  uint64_t v33;

  v33 = *MEMORY[0x24BDAC8D0];
  if (*((_DWORD *)v5 + 2) != 50)
  {
    if (CoreRELog::onceToken != -1)
      dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
    v14 = (id)CoreRELog::log;
    if (os_log_type_enabled(v14, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      _os_log_error_impl(&dword_224FE9000, v14, OS_LOG_TYPE_ERROR, "Cannot set Blend Shape Weights 'to' weight name for non-BlendShapeWeights from-to-by animation.", buf, 2u);
    }

    return 0;
  }
  v6 = v5;
  if (*((_QWORD *)v5 + 31) > a2)
  {
    v17 = 0;
    v18 = &str_110;
    v7 = *((_QWORD *)v6 + 31);
    if (v7 > a2)
    {
      v8 = (_QWORD *)(*((_QWORD *)v6 + 33) + 16 * a2);
      v9 = v17;
      v10 = v18;
      v17 = 0;
      v18 = &str_110;
      v11 = v8[1];
      v12 = v9 & 0xFFFFFFFFFFFFFFFELL | *v8 & 1;
      v8[1] = v10;
      *(_QWORD *)buf = v12;
      *(_QWORD *)&buf[8] = v11;
      *v8 = v9;
      re::StringID::destroyString((re::StringID *)buf);
      re::StringID::destroyString((re::StringID *)&v17);
      return 1;
    }
    v19 = 0;
    v31 = 0u;
    v32 = 0u;
    v29 = 0u;
    v30 = 0u;
    *(_OWORD *)buf = 0u;
    v16 = v7;
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    v20 = 136315906;
    v21 = "operator[]";
    v22 = 1024;
    v23 = 789;
    v24 = 2048;
    v25 = a2;
    v26 = 2048;
    v27 = v16;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
    goto LABEL_16;
  }
  if (CoreRELog::onceToken != -1)
LABEL_16:
    dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
  v15 = (id)CoreRELog::log;
  if (os_log_type_enabled(v15, OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)buf = 134217984;
    *(_QWORD *)&buf[4] = a2;
    _os_log_error_impl(&dword_224FE9000, v15, OS_LOG_TYPE_ERROR, "Cannot set Blend Shape Weights 'to' weight name, invalid weight index: %zu.", buf, 0xCu);
  }

  return 0;
}

uint64_t RETimelineDefinitionSetBlendShapeWeightsByWeightName(_anonymous_namespace_::TimelineDefinition *a1, unint64_t a2, const char *a3)
{
  _anonymous_namespace_ *v5;
  _anonymous_namespace_ *v6;
  unint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  unint64_t v12;
  NSObject *v14;
  NSObject *v15;
  unint64_t v16;
  uint64_t v17;
  void *v18;
  uint64_t v19;
  int v20;
  const char *v21;
  __int16 v22;
  int v23;
  __int16 v24;
  unint64_t v25;
  __int16 v26;
  unint64_t v27;
  uint8_t buf[16];
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  uint64_t v33;

  v33 = *MEMORY[0x24BDAC8D0];
  if (*((_DWORD *)v5 + 2) != 50)
  {
    if (CoreRELog::onceToken != -1)
      dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
    v14 = (id)CoreRELog::log;
    if (os_log_type_enabled(v14, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      _os_log_error_impl(&dword_224FE9000, v14, OS_LOG_TYPE_ERROR, "Cannot set Blend Shape Weights 'by' weight name for non-BlendShapeWeights from-to-by animation.", buf, 2u);
    }

    return 0;
  }
  v6 = v5;
  if (*((_QWORD *)v5 + 36) > a2)
  {
    v17 = 0;
    v18 = &str_110;
    v7 = *((_QWORD *)v6 + 36);
    if (v7 > a2)
    {
      v8 = (_QWORD *)(*((_QWORD *)v6 + 38) + 16 * a2);
      v9 = v17;
      v10 = v18;
      v17 = 0;
      v18 = &str_110;
      v11 = v8[1];
      v12 = v9 & 0xFFFFFFFFFFFFFFFELL | *v8 & 1;
      v8[1] = v10;
      *(_QWORD *)buf = v12;
      *(_QWORD *)&buf[8] = v11;
      *v8 = v9;
      re::StringID::destroyString((re::StringID *)buf);
      re::StringID::destroyString((re::StringID *)&v17);
      return 1;
    }
    v19 = 0;
    v31 = 0u;
    v32 = 0u;
    v29 = 0u;
    v30 = 0u;
    *(_OWORD *)buf = 0u;
    v16 = v7;
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    v20 = 136315906;
    v21 = "operator[]";
    v22 = 1024;
    v23 = 789;
    v24 = 2048;
    v25 = a2;
    v26 = 2048;
    v27 = v16;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
    goto LABEL_16;
  }
  if (CoreRELog::onceToken != -1)
LABEL_16:
    dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
  v15 = (id)CoreRELog::log;
  if (os_log_type_enabled(v15, OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)buf = 134217984;
    *(_QWORD *)&buf[4] = a2;
    _os_log_error_impl(&dword_224FE9000, v15, OS_LOG_TYPE_ERROR, "Cannot set Blend Shape Weights 'by' weight name, invalid weight index: %zu.", buf, 0xCu);
  }

  return 0;
}

uint64_t RETimelineDefinitionGetBlendShapeWeightsFromValue(uint64_t a1)
{
  uint64_t v1;
  NSObject *v3;
  uint8_t v4[16];

  v1 = *(_QWORD *)(a1 + 48);
  if (!v1)
    v1 = *(_QWORD *)(re::AssetHandle::asset<re::TimelineAsset>((re::TimelineAsset *)(a1 + 24)) + 8);
  if (*(_DWORD *)(v1 + 8) == 50)
  {
    if (*(_BYTE *)(v1 + 88))
      return *(_QWORD *)(v1 + 112);
  }
  else
  {
    if (CoreRELog::onceToken != -1)
      dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
    v3 = (id)CoreRELog::log;
    if (os_log_type_enabled(v3, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)v4 = 0;
      _os_log_error_impl(&dword_224FE9000, v3, OS_LOG_TYPE_ERROR, "Cannot get Blend Shape Weights 'from' weight values for non-BlendShapeWeights from-to-by animation.", v4, 2u);
    }

  }
  return 0;
}

uint64_t RETimelineDefinitionGetBlendShapeWeightsToValue(uint64_t a1)
{
  uint64_t v1;
  NSObject *v3;
  uint8_t v4[16];

  v1 = *(_QWORD *)(a1 + 48);
  if (!v1)
    v1 = *(_QWORD *)(re::AssetHandle::asset<re::TimelineAsset>((re::TimelineAsset *)(a1 + 24)) + 8);
  if (*(_DWORD *)(v1 + 8) == 50)
  {
    if (*(_BYTE *)(v1 + 120))
      return *(_QWORD *)(v1 + 144);
  }
  else
  {
    if (CoreRELog::onceToken != -1)
      dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
    v3 = (id)CoreRELog::log;
    if (os_log_type_enabled(v3, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)v4 = 0;
      _os_log_error_impl(&dword_224FE9000, v3, OS_LOG_TYPE_ERROR, "Cannot get Blend Shape Weights 'to' weight values for non-BlendShapeWeights from-to-by animation.", v4, 2u);
    }

  }
  return 0;
}

uint64_t RETimelineDefinitionGetBlendShapeWeightsByValue(uint64_t a1)
{
  uint64_t v1;
  NSObject *v3;
  uint8_t v4[16];

  v1 = *(_QWORD *)(a1 + 48);
  if (!v1)
    v1 = *(_QWORD *)(re::AssetHandle::asset<re::TimelineAsset>((re::TimelineAsset *)(a1 + 24)) + 8);
  if (*(_DWORD *)(v1 + 8) == 50)
  {
    if (*(_BYTE *)(v1 + 152))
      return *(_QWORD *)(v1 + 176);
  }
  else
  {
    if (CoreRELog::onceToken != -1)
      dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
    v3 = (id)CoreRELog::log;
    if (os_log_type_enabled(v3, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)v4 = 0;
      _os_log_error_impl(&dword_224FE9000, v3, OS_LOG_TYPE_ERROR, "Cannot get Blend Shape Weights 'by' weight values for non-BlendShapeWeights from-to-by animation.", v4, 2u);
    }

  }
  return 0;
}

BOOL RETimelineDefinitionSetBlendShapeWeightsFromValues(_anonymous_namespace_::TimelineDefinition *a1, uint64_t a2, unint64_t a3)
{
  _BOOL8 v6;
  _BOOL8 v7;
  _anonymous_namespace_ *v8;
  uint64_t v9;
  uint64_t v10;

  v6 = RETimelineDefinitionSetBlendShapeWeightsFromWeightCount(a1, a3);
  v7 = v6;
  if (a3 && v6)
  {
    v9 = 0;
    v10 = *((_QWORD *)v8 + 13);
    do
    {
      if (v10 == v9)
      {
        os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
      }
      *(_DWORD *)(*((_QWORD *)v8 + 14) + 4 * v9) = *(_DWORD *)(a2 + 4 * v9);
      ++v9;
    }
    while (a3 != v9);
  }
  return v7;
}

BOOL RETimelineDefinitionSetBlendShapeWeightsToValues(_anonymous_namespace_::TimelineDefinition *a1, uint64_t a2, unint64_t a3)
{
  _BOOL8 v6;
  _BOOL8 v7;
  _anonymous_namespace_ *v8;
  uint64_t v9;
  uint64_t v10;

  v6 = RETimelineDefinitionSetBlendShapeWeightsToWeightCount(a1, a3);
  v7 = v6;
  if (a3 && v6)
  {
    v9 = 0;
    v10 = *((_QWORD *)v8 + 17);
    do
    {
      if (v10 == v9)
      {
        os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
      }
      *(_DWORD *)(*((_QWORD *)v8 + 18) + 4 * v9) = *(_DWORD *)(a2 + 4 * v9);
      ++v9;
    }
    while (a3 != v9);
  }
  return v7;
}

BOOL RETimelineDefinitionSetBlendShapeWeightsByValues(_anonymous_namespace_::TimelineDefinition *a1, uint64_t a2, unint64_t a3)
{
  _BOOL8 v6;
  _BOOL8 v7;
  _anonymous_namespace_ *v8;
  uint64_t v9;
  uint64_t v10;

  v6 = RETimelineDefinitionSetBlendShapeWeightsByWeightCount(a1, a3);
  v7 = v6;
  if (a3 && v6)
  {
    v9 = 0;
    v10 = *((_QWORD *)v8 + 21);
    do
    {
      if (v10 == v9)
      {
        os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
      }
      *(_DWORD *)(*((_QWORD *)v8 + 22) + 4 * v9) = *(_DWORD *)(a2 + 4 * v9);
      ++v9;
    }
    while (a3 != v9);
  }
  return v7;
}

uint64_t RETimelineDefinitionSetBlendShapeWeightsFromValue(_anonymous_namespace_::TimelineDefinition *a1, unint64_t a2, float a3)
{
  _anonymous_namespace_ *v5;
  NSObject *v7;
  const char *v8;
  NSObject *v9;
  int v10;
  unint64_t v11;
  uint64_t v12;

  v12 = *MEMORY[0x24BDAC8D0];
  if (*((_DWORD *)v5 + 2) != 50)
  {
    if (CoreRELog::onceToken != -1)
      dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
    v7 = (id)CoreRELog::log;
    if (!os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
      goto LABEL_12;
    LOWORD(v10) = 0;
    v8 = "Cannot set Blend Shape Weights 'from' weight value for non-BlendShapeWeights from-to-by animation.";
    goto LABEL_20;
  }
  if (!*((_BYTE *)v5 + 88))
  {
    if (CoreRELog::onceToken != -1)
      dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
    v7 = (id)CoreRELog::log;
    if (!os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
      goto LABEL_12;
    LOWORD(v10) = 0;
    v8 = "Cannot set Blend Shape Weights 'from' weight value for invalid 'from' value.";
LABEL_20:
    _os_log_error_impl(&dword_224FE9000, v7, OS_LOG_TYPE_ERROR, v8, (uint8_t *)&v10, 2u);
LABEL_12:

    return 0;
  }
  if (*((_QWORD *)v5 + 13) > a2)
  {
    *(float *)(*((_QWORD *)v5 + 14) + 4 * a2) = a3;
    return 1;
  }
  if (CoreRELog::onceToken != -1)
    dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
  v9 = (id)CoreRELog::log;
  if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
  {
    v10 = 134217984;
    v11 = a2;
    _os_log_error_impl(&dword_224FE9000, v9, OS_LOG_TYPE_ERROR, "Cannot set Blend Shape Weights 'from' weight value, invalid weight index: %zu.", (uint8_t *)&v10, 0xCu);
  }

  return 0;
}

uint64_t RETimelineDefinitionSetBlendShapeWeightsToValue(_anonymous_namespace_::TimelineDefinition *a1, unint64_t a2, float a3)
{
  _anonymous_namespace_ *v5;
  NSObject *v7;
  const char *v8;
  NSObject *v9;
  int v10;
  unint64_t v11;
  uint64_t v12;

  v12 = *MEMORY[0x24BDAC8D0];
  if (*((_DWORD *)v5 + 2) != 50)
  {
    if (CoreRELog::onceToken != -1)
      dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
    v7 = (id)CoreRELog::log;
    if (!os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
      goto LABEL_12;
    LOWORD(v10) = 0;
    v8 = "Cannot set Blend Shape Weights 'to' weight value for non-BlendShapeWeights from-to-by animation.";
    goto LABEL_20;
  }
  if (!*((_BYTE *)v5 + 120))
  {
    if (CoreRELog::onceToken != -1)
      dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
    v7 = (id)CoreRELog::log;
    if (!os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
      goto LABEL_12;
    LOWORD(v10) = 0;
    v8 = "Cannot set Blend Shape Weights 'to' weight value for invalid 'to' value.";
LABEL_20:
    _os_log_error_impl(&dword_224FE9000, v7, OS_LOG_TYPE_ERROR, v8, (uint8_t *)&v10, 2u);
LABEL_12:

    return 0;
  }
  if (*((_QWORD *)v5 + 17) > a2)
  {
    *(float *)(*((_QWORD *)v5 + 18) + 4 * a2) = a3;
    return 1;
  }
  if (CoreRELog::onceToken != -1)
    dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
  v9 = (id)CoreRELog::log;
  if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
  {
    v10 = 134217984;
    v11 = a2;
    _os_log_error_impl(&dword_224FE9000, v9, OS_LOG_TYPE_ERROR, "Cannot set Blend Shape Weights 'to' weight value, invalid weight index: %zu.", (uint8_t *)&v10, 0xCu);
  }

  return 0;
}

uint64_t RETimelineDefinitionSetBlendShapeWeightsByValue(_anonymous_namespace_::TimelineDefinition *a1, unint64_t a2, float a3)
{
  _anonymous_namespace_ *v5;
  NSObject *v7;
  const char *v8;
  NSObject *v9;
  int v10;
  unint64_t v11;
  uint64_t v12;

  v12 = *MEMORY[0x24BDAC8D0];
  if (*((_DWORD *)v5 + 2) != 50)
  {
    if (CoreRELog::onceToken != -1)
      dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
    v7 = (id)CoreRELog::log;
    if (!os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
      goto LABEL_12;
    LOWORD(v10) = 0;
    v8 = "Cannot set Blend Shape Weights 'by' weight value for non-BlendShapeWeights from-to-by animation.";
    goto LABEL_20;
  }
  if (!*((_BYTE *)v5 + 152))
  {
    if (CoreRELog::onceToken != -1)
      dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
    v7 = (id)CoreRELog::log;
    if (!os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
      goto LABEL_12;
    LOWORD(v10) = 0;
    v8 = "Cannot set Blend Shape Weights 'by' weight value for invalid 'by' value.";
LABEL_20:
    _os_log_error_impl(&dword_224FE9000, v7, OS_LOG_TYPE_ERROR, v8, (uint8_t *)&v10, 2u);
LABEL_12:

    return 0;
  }
  if (*((_QWORD *)v5 + 21) > a2)
  {
    *(float *)(*((_QWORD *)v5 + 22) + 4 * a2) = a3;
    return 1;
  }
  if (CoreRELog::onceToken != -1)
    dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
  v9 = (id)CoreRELog::log;
  if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
  {
    v10 = 134217984;
    v11 = a2;
    _os_log_error_impl(&dword_224FE9000, v9, OS_LOG_TYPE_ERROR, "Cannot set Blend Shape Weights 'by' weight value, invalid weight index: %zu.", (uint8_t *)&v10, 0xCu);
  }

  return 0;
}

float RETimelineDefinitionGetBlendShapeWeightsFromWeightValue(_anonymous_namespace_::TimelineDefinition *a1, unint64_t a2)
{
  _anonymous_namespace_ *v3;
  NSObject *v5;
  const char *v6;
  NSObject *v7;
  int v8;
  unint64_t v9;
  uint64_t v10;

  v10 = *MEMORY[0x24BDAC8D0];
  if (*((_DWORD *)v3 + 2) != 50)
  {
    if (CoreRELog::onceToken != -1)
      dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
    v5 = (id)CoreRELog::log;
    if (!os_log_type_enabled(v5, OS_LOG_TYPE_ERROR))
      goto LABEL_12;
    LOWORD(v8) = 0;
    v6 = "Cannot set Blend Shape Weights 'from' weight value for non-BlendShapeWeights from-to-by animation.";
    goto LABEL_20;
  }
  if (!*((_BYTE *)v3 + 88))
  {
    if (CoreRELog::onceToken != -1)
      dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
    v5 = (id)CoreRELog::log;
    if (!os_log_type_enabled(v5, OS_LOG_TYPE_ERROR))
      goto LABEL_12;
    LOWORD(v8) = 0;
    v6 = "Cannot set Blend Shape Weights 'from' weight value for invalid 'from' value.";
LABEL_20:
    _os_log_error_impl(&dword_224FE9000, v5, OS_LOG_TYPE_ERROR, v6, (uint8_t *)&v8, 2u);
LABEL_12:

    return NAN;
  }
  if (*((_QWORD *)v3 + 13) > a2)
    return *(float *)(*((_QWORD *)v3 + 14) + 4 * a2);
  if (CoreRELog::onceToken != -1)
    dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
  v7 = (id)CoreRELog::log;
  if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
  {
    v8 = 134217984;
    v9 = a2;
    _os_log_error_impl(&dword_224FE9000, v7, OS_LOG_TYPE_ERROR, "Cannot set Blend Shape Weights 'from' weight value, invalid weight index: %zu.", (uint8_t *)&v8, 0xCu);
  }

  return NAN;
}

float RETimelineDefinitionGetBlendShapeWeightsToWeightValue(_anonymous_namespace_::TimelineDefinition *a1, unint64_t a2)
{
  _anonymous_namespace_ *v3;
  NSObject *v5;
  const char *v6;
  NSObject *v7;
  int v8;
  unint64_t v9;
  uint64_t v10;

  v10 = *MEMORY[0x24BDAC8D0];
  if (*((_DWORD *)v3 + 2) != 50)
  {
    if (CoreRELog::onceToken != -1)
      dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
    v5 = (id)CoreRELog::log;
    if (!os_log_type_enabled(v5, OS_LOG_TYPE_ERROR))
      goto LABEL_12;
    LOWORD(v8) = 0;
    v6 = "Cannot set Blend Shape Weights 'to' weight value for non-BlendShapeWeights from-to-by animation.";
    goto LABEL_20;
  }
  if (!*((_BYTE *)v3 + 120))
  {
    if (CoreRELog::onceToken != -1)
      dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
    v5 = (id)CoreRELog::log;
    if (!os_log_type_enabled(v5, OS_LOG_TYPE_ERROR))
      goto LABEL_12;
    LOWORD(v8) = 0;
    v6 = "Cannot set Blend Shape Weights 'to' weight value for invalid 'to' value.";
LABEL_20:
    _os_log_error_impl(&dword_224FE9000, v5, OS_LOG_TYPE_ERROR, v6, (uint8_t *)&v8, 2u);
LABEL_12:

    return NAN;
  }
  if (*((_QWORD *)v3 + 17) > a2)
    return *(float *)(*((_QWORD *)v3 + 18) + 4 * a2);
  if (CoreRELog::onceToken != -1)
    dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
  v7 = (id)CoreRELog::log;
  if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
  {
    v8 = 134217984;
    v9 = a2;
    _os_log_error_impl(&dword_224FE9000, v7, OS_LOG_TYPE_ERROR, "Cannot set Blend Shape Weights 'to' weight value, invalid weight index: %zu.", (uint8_t *)&v8, 0xCu);
  }

  return NAN;
}

float RETimelineDefinitionGetBlendShapeWeightsByWeightValue(_anonymous_namespace_::TimelineDefinition *a1, unint64_t a2)
{
  _anonymous_namespace_ *v3;
  NSObject *v5;
  const char *v6;
  NSObject *v7;
  int v8;
  unint64_t v9;
  uint64_t v10;

  v10 = *MEMORY[0x24BDAC8D0];
  if (*((_DWORD *)v3 + 2) != 50)
  {
    if (CoreRELog::onceToken != -1)
      dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
    v5 = (id)CoreRELog::log;
    if (!os_log_type_enabled(v5, OS_LOG_TYPE_ERROR))
      goto LABEL_12;
    LOWORD(v8) = 0;
    v6 = "Cannot set Blend Shape Weights 'by' weight value for non-BlendShapeWeights from-to-by animation.";
    goto LABEL_20;
  }
  if (!*((_BYTE *)v3 + 152))
  {
    if (CoreRELog::onceToken != -1)
      dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
    v5 = (id)CoreRELog::log;
    if (!os_log_type_enabled(v5, OS_LOG_TYPE_ERROR))
      goto LABEL_12;
    LOWORD(v8) = 0;
    v6 = "Cannot set Blend Shape Weights 'by' weight value for invalid 'by' value.";
LABEL_20:
    _os_log_error_impl(&dword_224FE9000, v5, OS_LOG_TYPE_ERROR, v6, (uint8_t *)&v8, 2u);
LABEL_12:

    return NAN;
  }
  if (*((_QWORD *)v3 + 21) > a2)
    return *(float *)(*((_QWORD *)v3 + 22) + 4 * a2);
  if (CoreRELog::onceToken != -1)
    dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
  v7 = (id)CoreRELog::log;
  if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
  {
    v8 = 134217984;
    v9 = a2;
    _os_log_error_impl(&dword_224FE9000, v7, OS_LOG_TYPE_ERROR, "Cannot set Blend Shape Weights 'by' weight value, invalid weight index: %zu.", (uint8_t *)&v8, 0xCu);
  }

  return NAN;
}

_anonymous_namespace_::TimelineDefinition *RETimelineDefinitionCreateSampledFloatAnimation(re *a1)
{
  uint64_t *v2;
  uint64_t v3;
  re *v4;
  uint64_t *v5;
  _anonymous_namespace_::TimelineDefinition *v6;
  _QWORD *v7;
  uint64_t v8;
  _QWORD v10[3];
  _QWORD *v11;
  uint64_t v12;
  _QWORD v13[5];

  v13[4] = *MEMORY[0x24BDAC8D0];
  v2 = re::globalAllocators(a1);
  v3 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v2[2] + 32))(v2[2], 128, 8);
  *(_QWORD *)v3 = off_24ED36578;
  *(_QWORD *)(v3 + 8) = 27;
  *(_BYTE *)(v3 + 16) = 0;
  *(_QWORD *)(v3 + 24) = 0;
  *(_QWORD *)(v3 + 32) = &str_110;
  *(_WORD *)(v3 + 72) = 256;
  *(_DWORD *)(v3 + 76) = 1023969417;
  *(_QWORD *)(v3 + 120) = 0;
  *(_OWORD *)(v3 + 80) = 0u;
  *(_OWORD *)(v3 + 96) = 0u;
  *(_DWORD *)(v3 + 112) = 0;
  *(_QWORD *)v3 = off_24ED335D8;
  v13[3] = v13;
  v10[0] = &off_24ED99B58;
  v11 = v10;
  v12 = v3;
  v13[0] = &off_24ED99B58;
  v5 = re::globalAllocators(v4);
  v6 = (_anonymous_namespace_::TimelineDefinition *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v5[2] + 32))(v5[2], 112, 8);
  std::unique_ptr<re::RigHierarchy,std::function<void ()(re::RigHierarchy*)>>::~unique_ptr[abi:nn180100](&v12);
  v7 = v11;
  if (v11 == v10)
  {
    v8 = 4;
    v7 = v10;
    goto LABEL_5;
  }
  if (v11)
  {
    v8 = 5;
LABEL_5:
    (*(void (**)(void))(*v7 + 8 * v8))();
  }
  return v6;
}

_anonymous_namespace_::TimelineDefinition *RETimelineDefinitionCreateSampledDoubleAnimation(re *a1)
{
  uint64_t *v2;
  uint64_t v3;
  re *v4;
  uint64_t *v5;
  _anonymous_namespace_::TimelineDefinition *v6;
  _QWORD *v7;
  uint64_t v8;
  _QWORD v10[3];
  _QWORD *v11;
  uint64_t v12;
  _QWORD v13[5];

  v13[4] = *MEMORY[0x24BDAC8D0];
  v2 = re::globalAllocators(a1);
  v3 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v2[2] + 32))(v2[2], 128, 8);
  *(_QWORD *)v3 = off_24ED36578;
  *(_QWORD *)(v3 + 8) = 28;
  *(_BYTE *)(v3 + 16) = 0;
  *(_QWORD *)(v3 + 24) = 0;
  *(_QWORD *)(v3 + 32) = &str_110;
  *(_WORD *)(v3 + 72) = 256;
  *(_DWORD *)(v3 + 76) = 1023969417;
  *(_QWORD *)(v3 + 120) = 0;
  *(_OWORD *)(v3 + 80) = 0u;
  *(_OWORD *)(v3 + 96) = 0u;
  *(_DWORD *)(v3 + 112) = 0;
  *(_QWORD *)v3 = off_24ED33688;
  v13[3] = v13;
  v10[0] = &off_24ED99BD8;
  v11 = v10;
  v12 = v3;
  v13[0] = &off_24ED99BD8;
  v5 = re::globalAllocators(v4);
  v6 = (_anonymous_namespace_::TimelineDefinition *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v5[2] + 32))(v5[2], 112, 8);
  std::unique_ptr<re::RigHierarchy,std::function<void ()(re::RigHierarchy*)>>::~unique_ptr[abi:nn180100](&v12);
  v7 = v11;
  if (v11 == v10)
  {
    v8 = 4;
    v7 = v10;
    goto LABEL_5;
  }
  if (v11)
  {
    v8 = 5;
LABEL_5:
    (*(void (**)(void))(*v7 + 8 * v8))();
  }
  return v6;
}

_anonymous_namespace_::TimelineDefinition *RETimelineDefinitionCreateSampledFloat2Animation(re *a1)
{
  uint64_t *v2;
  uint64_t v3;
  re *v4;
  uint64_t *v5;
  _anonymous_namespace_::TimelineDefinition *v6;
  _QWORD *v7;
  uint64_t v8;
  _QWORD v10[3];
  _QWORD *v11;
  uint64_t v12;
  _QWORD v13[5];

  v13[4] = *MEMORY[0x24BDAC8D0];
  v2 = re::globalAllocators(a1);
  v3 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v2[2] + 32))(v2[2], 128, 8);
  *(_QWORD *)v3 = off_24ED36578;
  *(_QWORD *)(v3 + 8) = 29;
  *(_BYTE *)(v3 + 16) = 0;
  *(_QWORD *)(v3 + 24) = 0;
  *(_QWORD *)(v3 + 32) = &str_110;
  *(_WORD *)(v3 + 72) = 256;
  *(_DWORD *)(v3 + 76) = 1023969417;
  *(_QWORD *)(v3 + 120) = 0;
  *(_OWORD *)(v3 + 80) = 0u;
  *(_OWORD *)(v3 + 96) = 0u;
  *(_DWORD *)(v3 + 112) = 0;
  *(_QWORD *)v3 = off_24ED33738;
  v13[3] = v13;
  v10[0] = &off_24ED99C58;
  v11 = v10;
  v12 = v3;
  v13[0] = &off_24ED99C58;
  v5 = re::globalAllocators(v4);
  v6 = (_anonymous_namespace_::TimelineDefinition *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v5[2] + 32))(v5[2], 112, 8);
  std::unique_ptr<re::RigHierarchy,std::function<void ()(re::RigHierarchy*)>>::~unique_ptr[abi:nn180100](&v12);
  v7 = v11;
  if (v11 == v10)
  {
    v8 = 4;
    v7 = v10;
    goto LABEL_5;
  }
  if (v11)
  {
    v8 = 5;
LABEL_5:
    (*(void (**)(void))(*v7 + 8 * v8))();
  }
  return v6;
}

_anonymous_namespace_::TimelineDefinition *RETimelineDefinitionCreateSampledFloat3Animation(re *a1)
{
  uint64_t *v2;
  uint64_t v3;
  re *v4;
  uint64_t *v5;
  _anonymous_namespace_::TimelineDefinition *v6;
  _QWORD *v7;
  uint64_t v8;
  _QWORD v10[3];
  _QWORD *v11;
  uint64_t v12;
  _QWORD v13[5];

  v13[4] = *MEMORY[0x24BDAC8D0];
  v2 = re::globalAllocators(a1);
  v3 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v2[2] + 32))(v2[2], 128, 8);
  *(_QWORD *)v3 = off_24ED36578;
  *(_QWORD *)(v3 + 8) = 30;
  *(_BYTE *)(v3 + 16) = 0;
  *(_QWORD *)(v3 + 24) = 0;
  *(_QWORD *)(v3 + 32) = &str_110;
  *(_WORD *)(v3 + 72) = 256;
  *(_DWORD *)(v3 + 76) = 1023969417;
  *(_QWORD *)(v3 + 120) = 0;
  *(_OWORD *)(v3 + 80) = 0u;
  *(_OWORD *)(v3 + 96) = 0u;
  *(_DWORD *)(v3 + 112) = 0;
  *(_QWORD *)v3 = off_24ED337E8;
  v13[3] = v13;
  v10[0] = &off_24ED99CD8;
  v11 = v10;
  v12 = v3;
  v13[0] = &off_24ED99CD8;
  v5 = re::globalAllocators(v4);
  v6 = (_anonymous_namespace_::TimelineDefinition *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v5[2] + 32))(v5[2], 112, 8);
  std::unique_ptr<re::RigHierarchy,std::function<void ()(re::RigHierarchy*)>>::~unique_ptr[abi:nn180100](&v12);
  v7 = v11;
  if (v11 == v10)
  {
    v8 = 4;
    v7 = v10;
    goto LABEL_5;
  }
  if (v11)
  {
    v8 = 5;
LABEL_5:
    (*(void (**)(void))(*v7 + 8 * v8))();
  }
  return v6;
}

_anonymous_namespace_::TimelineDefinition *RETimelineDefinitionCreateSampledFloat4Animation(re *a1)
{
  uint64_t *v2;
  uint64_t v3;
  re *v4;
  uint64_t *v5;
  _anonymous_namespace_::TimelineDefinition *v6;
  _QWORD *v7;
  uint64_t v8;
  _QWORD v10[3];
  _QWORD *v11;
  uint64_t v12;
  _QWORD v13[5];

  v13[4] = *MEMORY[0x24BDAC8D0];
  v2 = re::globalAllocators(a1);
  v3 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v2[2] + 32))(v2[2], 128, 8);
  *(_QWORD *)v3 = off_24ED36578;
  *(_QWORD *)(v3 + 8) = 31;
  *(_BYTE *)(v3 + 16) = 0;
  *(_QWORD *)(v3 + 24) = 0;
  *(_QWORD *)(v3 + 32) = &str_110;
  *(_WORD *)(v3 + 72) = 256;
  *(_DWORD *)(v3 + 76) = 1023969417;
  *(_QWORD *)(v3 + 120) = 0;
  *(_OWORD *)(v3 + 80) = 0u;
  *(_OWORD *)(v3 + 96) = 0u;
  *(_DWORD *)(v3 + 112) = 0;
  *(_QWORD *)v3 = off_24ED33898;
  v13[3] = v13;
  v10[0] = &off_24ED99D58;
  v11 = v10;
  v12 = v3;
  v13[0] = &off_24ED99D58;
  v5 = re::globalAllocators(v4);
  v6 = (_anonymous_namespace_::TimelineDefinition *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v5[2] + 32))(v5[2], 112, 8);
  std::unique_ptr<re::RigHierarchy,std::function<void ()(re::RigHierarchy*)>>::~unique_ptr[abi:nn180100](&v12);
  v7 = v11;
  if (v11 == v10)
  {
    v8 = 4;
    v7 = v10;
    goto LABEL_5;
  }
  if (v11)
  {
    v8 = 5;
LABEL_5:
    (*(void (**)(void))(*v7 + 8 * v8))();
  }
  return v6;
}

_anonymous_namespace_::TimelineDefinition *RETimelineDefinitionCreateSampledQuaternionAnimation(re *a1)
{
  uint64_t *v2;
  uint64_t v3;
  re *v4;
  uint64_t *v5;
  _anonymous_namespace_::TimelineDefinition *v6;
  _QWORD *v7;
  uint64_t v8;
  _QWORD v10[3];
  _QWORD *v11;
  uint64_t v12;
  _QWORD v13[5];

  v13[4] = *MEMORY[0x24BDAC8D0];
  v2 = re::globalAllocators(a1);
  v3 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v2[2] + 32))(v2[2], 128, 8);
  *(_QWORD *)v3 = off_24ED36578;
  *(_QWORD *)(v3 + 8) = 32;
  *(_BYTE *)(v3 + 16) = 0;
  *(_QWORD *)(v3 + 24) = 0;
  *(_QWORD *)(v3 + 32) = &str_110;
  *(_WORD *)(v3 + 72) = 256;
  *(_DWORD *)(v3 + 76) = 1023969417;
  *(_QWORD *)(v3 + 120) = 0;
  *(_OWORD *)(v3 + 80) = 0u;
  *(_OWORD *)(v3 + 96) = 0u;
  *(_DWORD *)(v3 + 112) = 0;
  *(_QWORD *)v3 = off_24ED33948;
  v13[3] = v13;
  v10[0] = &off_24ED99DD8;
  v11 = v10;
  v12 = v3;
  v13[0] = &off_24ED99DD8;
  v5 = re::globalAllocators(v4);
  v6 = (_anonymous_namespace_::TimelineDefinition *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v5[2] + 32))(v5[2], 112, 8);
  std::unique_ptr<re::RigHierarchy,std::function<void ()(re::RigHierarchy*)>>::~unique_ptr[abi:nn180100](&v12);
  v7 = v11;
  if (v11 == v10)
  {
    v8 = 4;
    v7 = v10;
    goto LABEL_5;
  }
  if (v11)
  {
    v8 = 5;
LABEL_5:
    (*(void (**)(void))(*v7 + 8 * v8))();
  }
  return v6;
}

_anonymous_namespace_::TimelineDefinition *RETimelineDefinitionCreateSampledSRTAnimation(re *a1)
{
  uint64_t *v2;
  uint64_t v3;
  re *v4;
  uint64_t *v5;
  _anonymous_namespace_::TimelineDefinition *v6;
  _QWORD *v7;
  uint64_t v8;
  _QWORD v10[3];
  _QWORD *v11;
  uint64_t v12;
  _QWORD v13[5];

  v13[4] = *MEMORY[0x24BDAC8D0];
  v2 = re::globalAllocators(a1);
  v3 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v2[2] + 32))(v2[2], 128, 8);
  *(_QWORD *)v3 = off_24ED36578;
  *(_QWORD *)(v3 + 8) = 33;
  *(_BYTE *)(v3 + 16) = 0;
  *(_QWORD *)(v3 + 24) = 0;
  *(_QWORD *)(v3 + 32) = &str_110;
  *(_WORD *)(v3 + 72) = 256;
  *(_DWORD *)(v3 + 76) = 1023969417;
  *(_QWORD *)(v3 + 120) = 0;
  *(_OWORD *)(v3 + 80) = 0u;
  *(_OWORD *)(v3 + 96) = 0u;
  *(_DWORD *)(v3 + 112) = 0;
  *(_QWORD *)v3 = off_24ED339F8;
  v13[3] = v13;
  v10[0] = &off_24ED99E58;
  v11 = v10;
  v12 = v3;
  v13[0] = &off_24ED99E58;
  v5 = re::globalAllocators(v4);
  v6 = (_anonymous_namespace_::TimelineDefinition *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v5[2] + 32))(v5[2], 112, 8);
  std::unique_ptr<re::RigHierarchy,std::function<void ()(re::RigHierarchy*)>>::~unique_ptr[abi:nn180100](&v12);
  v7 = v11;
  if (v11 == v10)
  {
    v8 = 4;
    v7 = v10;
    goto LABEL_5;
  }
  if (v11)
  {
    v8 = 5;
LABEL_5:
    (*(void (**)(void))(*v7 + 8 * v8))();
  }
  return v6;
}

_anonymous_namespace_::TimelineDefinition *RETimelineDefinitionCreateSampledSkeletalPoseAnimation(re *a1)
{
  uint64_t *v2;
  re::SkeletalPoseSampledAnimationAssetData *v3;
  uint64_t *v4;
  _anonymous_namespace_::TimelineDefinition *v5;
  _QWORD *v6;
  uint64_t v7;
  _QWORD v9[3];
  _QWORD *v10;
  re *v11;
  _QWORD v12[5];

  v12[4] = *MEMORY[0x24BDAC8D0];
  v2 = re::globalAllocators(a1);
  v3 = (re::SkeletalPoseSampledAnimationAssetData *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v2[2] + 32))(v2[2], 200, 8);
  v9[0] = &off_24ED99ED8;
  v10 = v9;
  v11 = re::SkeletalPoseSampledAnimationAssetData::SkeletalPoseSampledAnimationAssetData(v3);
  v12[3] = v12;
  v12[0] = &off_24ED99ED8;
  v4 = re::globalAllocators(v11);
  v5 = (_anonymous_namespace_::TimelineDefinition *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v4[2] + 32))(v4[2], 112, 8);
  std::unique_ptr<re::RigHierarchy,std::function<void ()(re::RigHierarchy*)>>::~unique_ptr[abi:nn180100]((uint64_t *)&v11);
  v6 = v10;
  if (v10 == v9)
  {
    v7 = 4;
    v6 = v9;
    goto LABEL_5;
  }
  if (v10)
  {
    v7 = 5;
LABEL_5:
    (*(void (**)(void))(*v6 + 8 * v7))();
  }
  return v5;
}

_anonymous_namespace_::TimelineDefinition *RETimelineDefinitionCreateSampledBlendShapeWeightsAnimation(re *a1)
{
  uint64_t *v2;
  uint64_t v3;
  re *v4;
  uint64_t *v5;
  _anonymous_namespace_::TimelineDefinition *v6;
  _QWORD *v7;
  uint64_t v8;
  _QWORD v10[3];
  _QWORD *v11;
  uint64_t v12;
  _QWORD v13[5];

  v13[4] = *MEMORY[0x24BDAC8D0];
  v2 = re::globalAllocators(a1);
  v3 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v2[2] + 32))(v2[2], 168, 8);
  *(_QWORD *)v3 = off_24ED36578;
  *(_QWORD *)(v3 + 8) = 59;
  *(_BYTE *)(v3 + 16) = 0;
  *(_QWORD *)(v3 + 24) = 0;
  *(_QWORD *)(v3 + 32) = &str_110;
  *(_WORD *)(v3 + 72) = 256;
  *(_DWORD *)(v3 + 76) = 1023969417;
  *(_QWORD *)(v3 + 120) = 0;
  *(_QWORD *)(v3 + 128) = 0;
  *(_OWORD *)(v3 + 80) = 0u;
  *(_OWORD *)(v3 + 96) = 0u;
  *(_DWORD *)(v3 + 112) = 0;
  *(_QWORD *)v3 = off_24ED33B58;
  *(_QWORD *)(v3 + 160) = 0;
  *(_QWORD *)(v3 + 136) = 0;
  *(_QWORD *)(v3 + 144) = 0;
  *(_DWORD *)(v3 + 152) = 0;
  v13[3] = v13;
  v10[0] = &off_24ED99F58;
  v11 = v10;
  v12 = v3;
  v13[0] = &off_24ED99F58;
  v5 = re::globalAllocators(v4);
  v6 = (_anonymous_namespace_::TimelineDefinition *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v5[2] + 32))(v5[2], 112, 8);
  std::unique_ptr<re::RigHierarchy,std::function<void ()(re::RigHierarchy*)>>::~unique_ptr[abi:nn180100](&v12);
  v7 = v11;
  if (v11 == v10)
  {
    v8 = 4;
    v7 = v10;
    goto LABEL_5;
  }
  if (v11)
  {
    v8 = 5;
LABEL_5:
    (*(void (**)(void))(*v7 + 8 * v8))();
  }
  return v6;
}

float RETimelineDefinitionGetFrameInterval(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  int v3;

  v1 = *(_QWORD *)(a1 + 48);
  if (!v1)
  {
    v2 = re::AssetHandle::asset<re::TimelineAsset>((re::TimelineAsset *)(a1 + 24));
    if (v2)
      v1 = *(_QWORD *)(v2 + 8);
    else
      v1 = 0;
  }
  v3 = *(_DWORD *)(v1 + 8);
  switch(v3)
  {
    case 27:
    case 28:
    case 29:
    case 30:
    case 31:
    case 32:
    case 33:
    case 34:
      return *(float *)(v1 + 76);
    default:
      if (v3 == 59)
        return *(float *)(v1 + 76);
      else
        return NAN;
  }
}

uint64_t RETimelineDefinitionSetFrameInterval(_anonymous_namespace_::TimelineDefinition *a1, float a2)
{
  _anonymous_namespace_ *v3;
  int v4;

  v4 = *((_DWORD *)v3 + 2);
  switch(v4)
  {
    case 27:
    case 28:
    case 29:
    case 30:
    case 31:
    case 32:
    case 33:
    case 34:
      goto LABEL_2;
    default:
      if (v4 != 59)
        return 0;
LABEL_2:
      *((float *)v3 + 19) = a2;
      return 1;
  }
}

float RETimelineDefinitionGetStartTime(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  int v3;
  float result;

  v1 = *(_QWORD *)(a1 + 48);
  if (!v1)
  {
    v2 = re::AssetHandle::asset<re::TimelineAsset>((re::TimelineAsset *)(a1 + 24));
    if (v2)
      v1 = *(_QWORD *)(v2 + 8);
    else
      v1 = 0;
  }
  v3 = *(_DWORD *)(v1 + 8);
  result = NAN;
  switch(v3)
  {
    case 27:
    case 28:
    case 29:
    case 30:
    case 31:
    case 32:
    case 33:
    case 34:
      goto LABEL_6;
    case 35:
    case 36:
    case 37:
      return result;
    case 38:
      result = *(double *)(v1 + 80);
      break;
    default:
      if (v3 == 59)
LABEL_6:
        result = *(float *)(v1 + 80);
      break;
  }
  return result;
}

uint64_t RETimelineDefinitionSetStartTime(_anonymous_namespace_::TimelineDefinition *a1, float a2)
{
  _anonymous_namespace_ *v3;
  uint64_t result;
  int v5;

  result = 0;
  v5 = *((_DWORD *)v3 + 2);
  switch(v5)
  {
    case 27:
    case 28:
    case 29:
    case 30:
    case 31:
    case 32:
    case 33:
    case 34:
      goto LABEL_2;
    case 35:
    case 36:
    case 37:
      return result;
    case 38:
      *((double *)v3 + 10) = a2;
      return 1;
    default:
      if (v5 != 59)
        return result;
LABEL_2:
      *((float *)v3 + 20) = a2;
      return 1;
  }
}

float RETimelineDefinitionGetEndTime(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  int v3;
  float result;

  v1 = *(_QWORD *)(a1 + 48);
  if (!v1)
  {
    v2 = re::AssetHandle::asset<re::TimelineAsset>((re::TimelineAsset *)(a1 + 24));
    if (v2)
      v1 = *(_QWORD *)(v2 + 8);
    else
      v1 = 0;
  }
  v3 = *(_DWORD *)(v1 + 8);
  result = NAN;
  switch(v3)
  {
    case 27:
    case 28:
    case 29:
    case 30:
    case 31:
    case 32:
    case 33:
    case 34:
      goto LABEL_6;
    case 35:
    case 36:
    case 37:
      return result;
    case 38:
      result = *(double *)(v1 + 88);
      break;
    default:
      if (v3 == 59)
LABEL_6:
        result = *(float *)(v1 + 84);
      break;
  }
  return result;
}

uint64_t RETimelineDefinitionSetEndTime(_anonymous_namespace_::TimelineDefinition *a1, float a2)
{
  _anonymous_namespace_ *v3;
  uint64_t result;
  int v5;

  result = 0;
  v5 = *((_DWORD *)v3 + 2);
  switch(v5)
  {
    case 27:
    case 28:
    case 29:
    case 30:
    case 31:
    case 32:
    case 33:
    case 34:
      goto LABEL_2;
    case 35:
    case 36:
    case 37:
      return result;
    case 38:
      *((double *)v3 + 11) = a2;
      return 1;
    default:
      if (v5 != 59)
        return result;
LABEL_2:
      *((float *)v3 + 21) = a2;
      return 1;
  }
}

BOOL RETimelineDefinitionGetInterpolationEnabled(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  int v3;

  v1 = *(_QWORD *)(a1 + 48);
  if (!v1)
  {
    v2 = re::AssetHandle::asset<re::TimelineAsset>((re::TimelineAsset *)(a1 + 24));
    if (v2)
      v1 = *(_QWORD *)(v2 + 8);
    else
      v1 = 0;
  }
  v3 = *(_DWORD *)(v1 + 8);
  switch(v3)
  {
    case 27:
    case 28:
    case 29:
    case 30:
    case 31:
    case 32:
    case 33:
    case 34:
      return *(_BYTE *)(v1 + 73) != 0;
    default:
      return v3 == 59 && *(_BYTE *)(v1 + 73) != 0;
  }
}

uint64_t RETimelineDefinitionSetInterpolationEnabled(_anonymous_namespace_::TimelineDefinition *a1, char a2)
{
  _anonymous_namespace_ *v3;
  int v4;

  v4 = *((_DWORD *)v3 + 2);
  switch(v4)
  {
    case 27:
    case 28:
    case 29:
    case 30:
    case 31:
    case 32:
    case 33:
    case 34:
      goto LABEL_2;
    default:
      if (v4 != 59)
        return 0;
LABEL_2:
      *((_BYTE *)v3 + 73) = a2;
      return 1;
  }
}

uint64_t RETimelineDefinitionGetValueCount(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  int v3;

  v1 = *(_QWORD *)(a1 + 48);
  if (!v1)
  {
    v2 = re::AssetHandle::asset<re::TimelineAsset>((re::TimelineAsset *)(a1 + 24));
    if (v2)
      v1 = *(_QWORD *)(v2 + 8);
    else
      v1 = 0;
  }
  v3 = *(_DWORD *)(v1 + 8);
  switch(v3)
  {
    case 27:
    case 28:
    case 29:
    case 30:
    case 31:
    case 32:
    case 33:
    case 34:
      return *(_QWORD *)(v1 + 104);
    default:
      if (v3 == 59)
        return *(_QWORD *)(v1 + 104);
      else
        return -1;
  }
}

uint64_t re::DynamicArray<re::SkeletalPoseAssetData>::operator[](uint64_t a1, unint64_t a2)
{
  if (*(_QWORD *)(a1 + 16) <= a2)
  {
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  return *(_QWORD *)(a1 + 32) + 24 * a2;
}

uint64_t RETimelineDefinitionSetValueCount(_anonymous_namespace_::TimelineDefinition *a1, unint64_t a2)
{
  _anonymous_namespace_ *v3;
  _anonymous_namespace_ *v4;
  int v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;

  v4 = v3;
  v5 = *((_DWORD *)v3 + 2);
  switch(v5)
  {
    case 27:
      re::DynamicArray<float>::resize((uint64_t)v3 + 88, a2);
      return 1;
    case 28:
      re::DynamicArray<double>::resize((uint64_t)v3 + 88, a2);
      return 1;
    case 29:
      re::DynamicArray<unsigned long>::resize((uint64_t)v3 + 88, a2);
      return 1;
    case 30:
      re::DynamicArray<re::Vector3<float>>::resize((uint64_t)v3 + 88, a2);
      return 1;
    case 31:
      re::DynamicArray<re::Vector4<float>>::resize((uint64_t)v3 + 88, a2);
      return 1;
    case 32:
      re::DynamicArray<re::Quaternion<float>>::resize((uint64_t)v3 + 88, a2);
      return 1;
    case 33:
      re::DynamicArray<re::GenericSRT<float>>::resize((_QWORD *)v3 + 11, a2);
      return 1;
    case 34:
      v8 = *((_QWORD *)v3 + 13);
      re::DynamicArray<re::SkeletalPoseAssetData>::resize((_QWORD *)v3 + 11, a2);
      if (v8 >= a2)
        return 1;
      v9 = 24 * v8;
      while (*((_QWORD *)v4 + 13) > v8)
      {
        ++v8;
        v9 += 24;
        if (a2 == v8)
          return 1;
      }
      goto LABEL_23;
    default:
      if (v5 != 59)
        return 0;
      v6 = *((_QWORD *)v3 + 13);
      re::DynamicArray<re::SkeletalPoseAssetData>::resize((_QWORD *)v3 + 11, a2);
      if (v6 < a2)
      {
        v7 = 24 * v6;
        do
        {
          if (*((_QWORD *)v4 + 13) <= v6)
          {
            os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
            _os_log_send_and_compose_impl();
            _os_crash_msg();
            __break(1u);
LABEL_23:
            os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
            _os_log_send_and_compose_impl();
            _os_crash_msg();
            __break(1u);
          }
          ++v6;
          v7 += 24;
        }
        while (a2 != v6);
      }
      return 1;
  }
}

uint64_t RETimelineDefinitionGetFloatValues(uint64_t a1)
{
  uint64_t v1;

  v1 = *(_QWORD *)(a1 + 48);
  if (!v1)
    v1 = *(_QWORD *)(re::AssetHandle::asset<re::TimelineAsset>((re::TimelineAsset *)(a1 + 24)) + 8);
  if (*(_DWORD *)(v1 + 8) == 27)
    return *(_QWORD *)(v1 + 120);
  else
    return 0;
}

uint64_t RETimelineDefinitionGetDoubleValues(uint64_t a1)
{
  uint64_t v1;

  v1 = *(_QWORD *)(a1 + 48);
  if (!v1)
    v1 = *(_QWORD *)(re::AssetHandle::asset<re::TimelineAsset>((re::TimelineAsset *)(a1 + 24)) + 8);
  if (*(_DWORD *)(v1 + 8) == 28)
    return *(_QWORD *)(v1 + 120);
  else
    return 0;
}

uint64_t RETimelineDefinitionGetFloat2Values(uint64_t a1)
{
  uint64_t v1;

  v1 = *(_QWORD *)(a1 + 48);
  if (!v1)
    v1 = *(_QWORD *)(re::AssetHandle::asset<re::TimelineAsset>((re::TimelineAsset *)(a1 + 24)) + 8);
  if (*(_DWORD *)(v1 + 8) == 29)
    return *(_QWORD *)(v1 + 120);
  else
    return 0;
}

uint64_t RETimelineDefinitionGetFloat3Values(uint64_t a1)
{
  uint64_t v1;

  v1 = *(_QWORD *)(a1 + 48);
  if (!v1)
    v1 = *(_QWORD *)(re::AssetHandle::asset<re::TimelineAsset>((re::TimelineAsset *)(a1 + 24)) + 8);
  if (*(_DWORD *)(v1 + 8) == 30)
    return *(_QWORD *)(v1 + 120);
  else
    return 0;
}

uint64_t RETimelineDefinitionGetFloat4Values(uint64_t a1)
{
  uint64_t v1;

  v1 = *(_QWORD *)(a1 + 48);
  if (!v1)
    v1 = *(_QWORD *)(re::AssetHandle::asset<re::TimelineAsset>((re::TimelineAsset *)(a1 + 24)) + 8);
  if (*(_DWORD *)(v1 + 8) == 31)
    return *(_QWORD *)(v1 + 120);
  else
    return 0;
}

uint64_t RETimelineDefinitionGetQuaternionValues(uint64_t a1)
{
  uint64_t v1;

  v1 = *(_QWORD *)(a1 + 48);
  if (!v1)
    v1 = *(_QWORD *)(re::AssetHandle::asset<re::TimelineAsset>((re::TimelineAsset *)(a1 + 24)) + 8);
  if (*(_DWORD *)(v1 + 8) == 32)
    return *(_QWORD *)(v1 + 120);
  else
    return 0;
}

uint64_t RETimelineDefinitionGetSRTValues(uint64_t a1)
{
  uint64_t v1;

  v1 = *(_QWORD *)(a1 + 48);
  if (!v1)
    v1 = *(_QWORD *)(re::AssetHandle::asset<re::TimelineAsset>((re::TimelineAsset *)(a1 + 24)) + 8);
  if (*(_DWORD *)(v1 + 8) == 33)
    return *(_QWORD *)(v1 + 120);
  else
    return 0;
}

BOOL RETimelineDefinitionSetFloatValues(_anonymous_namespace_::TimelineDefinition *a1, uint64_t a2, uint64_t a3)
{
  _anonymous_namespace_ *v5;
  int v6;
  _QWORD v8[2];

  v6 = *((_DWORD *)v5 + 2);
  if (v6 == 27)
  {
    v8[0] = a2;
    v8[1] = a3;
    re::DynamicArray<float>::operator=((_anonymous_namespace_ *)((char *)v5 + 88), (uint64_t)v8);
  }
  return v6 == 27;
}

BOOL RETimelineDefinitionSetDoubleValues(_anonymous_namespace_::TimelineDefinition *a1, uint64_t a2, uint64_t a3)
{
  _anonymous_namespace_ *v5;
  int v6;
  _QWORD v8[2];

  v6 = *((_DWORD *)v5 + 2);
  if (v6 == 28)
  {
    v8[0] = a2;
    v8[1] = a3;
    re::DynamicArray<double>::operator=((_anonymous_namespace_ *)((char *)v5 + 88), (uint64_t)v8);
  }
  return v6 == 28;
}

BOOL RETimelineDefinitionSetFloat2Values(_anonymous_namespace_::TimelineDefinition *a1, uint64_t a2, uint64_t a3)
{
  _anonymous_namespace_ *v5;
  int v6;
  _QWORD v8[2];

  v6 = *((_DWORD *)v5 + 2);
  if (v6 == 29)
  {
    v8[0] = a2;
    v8[1] = a3;
    re::DynamicArray<re::Vector2<float>>::operator=((_anonymous_namespace_ *)((char *)v5 + 88), (uint64_t)v8);
  }
  return v6 == 29;
}

BOOL RETimelineDefinitionSetFloat3Values(_anonymous_namespace_::TimelineDefinition *a1, uint64_t a2, uint64_t a3)
{
  _anonymous_namespace_ *v5;
  int v6;
  _QWORD v8[2];

  v6 = *((_DWORD *)v5 + 2);
  if (v6 == 30)
  {
    v8[0] = a2;
    v8[1] = a3;
    re::DynamicArray<re::Vector3<float>>::operator=((_anonymous_namespace_ *)((char *)v5 + 88), (uint64_t)v8);
  }
  return v6 == 30;
}

BOOL RETimelineDefinitionSetFloat4Values(_anonymous_namespace_::TimelineDefinition *a1, uint64_t a2, uint64_t a3)
{
  _anonymous_namespace_ *v5;
  int v6;
  _QWORD v8[2];

  v6 = *((_DWORD *)v5 + 2);
  if (v6 == 31)
  {
    v8[0] = a2;
    v8[1] = a3;
    re::DynamicArray<re::Vector4<float>>::operator=((_anonymous_namespace_ *)((char *)v5 + 88), (uint64_t)v8);
  }
  return v6 == 31;
}

BOOL RETimelineDefinitionSetQuaternionValues(_anonymous_namespace_::TimelineDefinition *a1, uint64_t a2, uint64_t a3)
{
  _anonymous_namespace_ *v5;
  int v6;
  _QWORD v8[2];

  v6 = *((_DWORD *)v5 + 2);
  if (v6 == 32)
  {
    v8[0] = a2;
    v8[1] = a3;
    re::DynamicArray<re::Quaternion<float>>::operator=((_anonymous_namespace_ *)((char *)v5 + 88), (uint64_t)v8);
  }
  return v6 == 32;
}

BOOL RETimelineDefinitionSetSRTValues(_anonymous_namespace_::TimelineDefinition *a1, uint64_t a2, uint64_t a3)
{
  _anonymous_namespace_ *v5;
  int v6;
  _QWORD v8[2];

  v6 = *((_DWORD *)v5 + 2);
  if (v6 == 33)
  {
    v8[0] = a2;
    v8[1] = a3;
    re::DynamicArray<re::GenericSRT<float>>::operator=((_anonymous_namespace_ *)((char *)v5 + 88), (uint64_t)v8);
  }
  return v6 == 33;
}

uint64_t RETimelineDefinitionSetFloatIndexValue(_anonymous_namespace_::TimelineDefinition *a1, unint64_t a2, float a3)
{
  _anonymous_namespace_ *v5;

  if (*((_DWORD *)v5 + 2) != 27 || *((_QWORD *)v5 + 13) <= a2)
    return 0;
  *(float *)(*((_QWORD *)v5 + 15) + 4 * a2) = a3;
  return 1;
}

uint64_t RETimelineDefinitionSetDoubleIndexValue(_anonymous_namespace_::TimelineDefinition *a1, unint64_t a2, double a3)
{
  _anonymous_namespace_ *v5;

  if (*((_DWORD *)v5 + 2) != 28 || *((_QWORD *)v5 + 13) <= a2)
    return 0;
  *(double *)(*((_QWORD *)v5 + 15) + 8 * a2) = a3;
  return 1;
}

uint64_t RETimelineDefinitionSetFloat2IndexValue(_anonymous_namespace_::TimelineDefinition *a1, unint64_t a2, double a3)
{
  _anonymous_namespace_ *v5;

  if (*((_DWORD *)v5 + 2) != 29 || *((_QWORD *)v5 + 13) <= a2)
    return 0;
  *(double *)(*((_QWORD *)v5 + 15) + 8 * a2) = a3;
  return 1;
}

uint64_t RETimelineDefinitionSetFloat3IndexValue(_anonymous_namespace_::TimelineDefinition *a1, unint64_t a2, __n128 a3)
{
  _anonymous_namespace_ *v4;

  if (*((_DWORD *)v4 + 2) != 30 || *((_QWORD *)v4 + 13) <= a2)
    return 0;
  *(__n128 *)(*((_QWORD *)v4 + 15) + 16 * a2) = a3;
  return 1;
}

uint64_t RETimelineDefinitionSetFloat4IndexValue(_anonymous_namespace_::TimelineDefinition *a1, unint64_t a2, __n128 a3)
{
  _anonymous_namespace_ *v4;

  if (*((_DWORD *)v4 + 2) != 31 || *((_QWORD *)v4 + 13) <= a2)
    return 0;
  *(__n128 *)(*((_QWORD *)v4 + 15) + 16 * a2) = a3;
  return 1;
}

uint64_t RETimelineDefinitionSetQuaternionIndexValue(_anonymous_namespace_::TimelineDefinition *a1, unint64_t a2, __n128 a3)
{
  _anonymous_namespace_ *v4;

  if (*((_DWORD *)v4 + 2) != 32 || *((_QWORD *)v4 + 13) <= a2)
    return 0;
  *(__n128 *)(*((_QWORD *)v4 + 15) + 16 * a2) = a3;
  return 1;
}

uint64_t RETimelineDefinitionSetSRTIndexValue(_anonymous_namespace_::TimelineDefinition *a1, unint64_t a2, __n128 a3, __n128 a4, __n128 a5)
{
  _anonymous_namespace_ *v6;
  __n128 *v7;

  if (*((_DWORD *)v6 + 2) != 33 || *((_QWORD *)v6 + 13) <= a2)
    return 0;
  v7 = (__n128 *)(*((_QWORD *)v6 + 15) + 48 * a2);
  *v7 = a3;
  v7[1] = a4;
  v7[2] = a5;
  return 1;
}

BOOL RETimelineDefinitionSetSkeleton(_anonymous_namespace_::TimelineDefinition *a1, uint64_t a2)
{
  _anonymous_namespace_ *v3;
  int v4;
  _anonymous_namespace_ *v5;
  __int128 v6;
  uint64_t v7;
  NSObject *v8;
  __int128 v10;
  uint64_t v11;

  v4 = *((_DWORD *)v3 + 2);
  if (v4 == 34)
  {
    v5 = v3;
    re::AssetAPIHelper::assetHandleCreate(a2, (uint64_t *)&v10);
    v6 = *((_OWORD *)v5 + 8);
    *((_OWORD *)v5 + 8) = v10;
    v10 = v6;
    v7 = *((_QWORD *)v5 + 18);
    *((_QWORD *)v5 + 18) = v11;
    v11 = v7;
    re::AssetHandle::~AssetHandle((re::AssetHandle *)&v10);
  }
  else
  {
    if (CoreRELog::onceToken != -1)
      dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
    v8 = (id)CoreRELog::log;
    if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
    {
      LOWORD(v10) = 0;
      _os_log_error_impl(&dword_224FE9000, v8, OS_LOG_TYPE_ERROR, "Cannot set skeleton for any animation type other than SampledSkeletalPoseAnimation.", (uint8_t *)&v10, 2u);
    }

  }
  return v4 == 34;
}

uint64_t RETimelineDefinitionGetSkeletalJointCount(uint64_t a1)
{
  uint64_t v1;

  v1 = *(_QWORD *)(a1 + 48);
  if (!v1)
    v1 = *(_QWORD *)(re::AssetHandle::asset<re::TimelineAsset>((re::TimelineAsset *)(a1 + 24)) + 8);
  if (*(_DWORD *)(v1 + 8) == 34)
    return *(_QWORD *)(v1 + 168);
  else
    return -1;
}

BOOL RETimelineDefinitionSetSkeletalJointCount(_anonymous_namespace_::TimelineDefinition *a1, unint64_t a2)
{
  _anonymous_namespace_ *v3;
  int v4;
  _anonymous_namespace_ *v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;

  v4 = *((_DWORD *)v3 + 2);
  if (v4 == 34)
  {
    v5 = v3;
    re::DynamicArray<re::StringID>::resize((uint64_t)v3 + 152, a2);
    v6 = *((_QWORD *)v5 + 13);
    if (v6)
    {
      v7 = (_QWORD *)*((_QWORD *)v5 + 15);
      v8 = 24 * v6;
      do
      {
        v7 += 3;
        v8 -= 24;
      }
      while (v8);
    }
  }
  return v4 == 34;
}

uint64_t RETimelineDefinitionGetSkeletalJointName(uint64_t a1, unint64_t a2)
{
  uint64_t v3;

  v3 = *(_QWORD *)(a1 + 48);
  if (!v3)
    v3 = *(_QWORD *)(re::AssetHandle::asset<re::TimelineAsset>((re::TimelineAsset *)(a1 + 24)) + 8);
  if (*(_DWORD *)(v3 + 8) == 34 && *(_QWORD *)(v3 + 168) > a2)
    return *(_QWORD *)(*(_QWORD *)(v3 + 184) + 16 * a2 + 8);
  else
    return 0;
}

uint64_t RETimelineDefinitionSetSkeletalJointName(_anonymous_namespace_::TimelineDefinition *a1, unint64_t a2, const char *a3)
{
  _anonymous_namespace_ *v5;
  _anonymous_namespace_ *v6;
  unint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v14;
  uint64_t v15;
  void *v16;
  uint64_t v17;
  int v18;
  const char *v19;
  __int16 v20;
  int v21;
  __int16 v22;
  unint64_t v23;
  __int16 v24;
  unint64_t v25;
  _OWORD v26[5];
  uint64_t v27;

  v27 = *MEMORY[0x24BDAC8D0];
  if (*((_DWORD *)v5 + 2) != 34)
    return 0;
  v6 = v5;
  if (*((_QWORD *)v5 + 21) <= a2)
    return 0;
  v15 = 0;
  v16 = &str_110;
  v7 = *((_QWORD *)v6 + 21);
  if (v7 <= a2)
  {
    v17 = 0;
    memset(v26, 0, sizeof(v26));
    v14 = v7;
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    v18 = 136315906;
    v19 = "operator[]";
    v20 = 1024;
    v21 = 789;
    v22 = 2048;
    v23 = a2;
    v24 = 2048;
    v25 = v14;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  v8 = (_QWORD *)(*((_QWORD *)v6 + 23) + 16 * a2);
  v9 = v15;
  v10 = v16;
  v15 = 0;
  v16 = &str_110;
  v11 = v8[1];
  v12 = v9 & 0xFFFFFFFFFFFFFFFELL | *v8 & 1;
  v8[1] = v10;
  *(_QWORD *)&v26[0] = v12;
  *((_QWORD *)&v26[0] + 1) = v11;
  *v8 = v9;
  re::StringID::destroyString((re::StringID *)v26);
  re::StringID::destroyString((re::StringID *)&v15);
  return 1;
}

__n128 RETimelineDefinitionGetSkeletalPoseIndexJointValue(uint64_t a1, unint64_t a2, unint64_t a3)
{
  uint64_t v5;
  __n128 result;
  uint64_t v7;

  v5 = *(_QWORD *)(a1 + 48);
  if (!v5)
    v5 = *(_QWORD *)(re::AssetHandle::asset<re::TimelineAsset>((re::TimelineAsset *)(a1 + 24)) + 8);
  result.n128_u64[0] = vdupq_n_s32(0x7FC00000u).u64[0];
  if (*(_DWORD *)(v5 + 8) == 34)
  {
    result.n128_u64[0] = vdupq_n_s32(0x7FC00000u).u64[0];
    if (*(_QWORD *)(v5 + 104) > a2)
    {
      v7 = *(_QWORD *)(v5 + 120) + 24 * a2;
      result.n128_u64[0] = vdupq_n_s32(0x7FC00000u).u64[0];
      if (*(_QWORD *)(v7 + 8) > a3)
        return *(__n128 *)(*(_QWORD *)(v7 + 16) + 48 * a3);
    }
  }
  return result;
}

BOOL RETimelineDefinitionSetSkeletalPoses(_anonymous_namespace_::TimelineDefinition *a1, unint64_t a2, uint64_t a3, unint64_t a4, unint64_t a5)
{
  _anonymous_namespace_ *v9;
  uint64_t *v10;
  _anonymous_namespace_ *v11;
  _anonymous_namespace_ *v12;
  uint64_t v13;
  uint64_t *v14;
  const char *v15;
  unint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  void *v19;
  uint64_t v20;
  unint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  uint64_t *v24;
  unint64_t v25;
  __int128 *v26;
  _OWORD *v27;
  __int128 v28;
  __int128 v29;
  NSObject *v30;
  uint64_t v32;
  void *v33;
  uint64_t v34;
  int v35;
  const char *v36;
  __int16 v37;
  int v38;
  __int16 v39;
  uint64_t *v40;
  __int16 v41;
  unint64_t v42;
  uint8_t buf[16];
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  uint64_t v48;

  v48 = *MEMORY[0x24BDAC8D0];
  LODWORD(v10) = *((_DWORD *)v9 + 2);
  if ((_DWORD)v10 == 34)
  {
    v11 = v9;
    re::DynamicArray<re::StringID>::resize((uint64_t)v9 + 152, a5);
    if (a5)
    {
      v13 = 0;
      v10 = 0;
      while (1)
      {
        v15 = *(const char **)(a2 + 8 * (_QWORD)v10);
        v32 = 0;
        v33 = &str_110;
        v16 = *((_QWORD *)v11 + 21);
        if (v16 <= (unint64_t)v10)
          break;
        v17 = (_QWORD *)(*((_QWORD *)v11 + 23) + v13);
        v18 = v32;
        v19 = v33;
        v32 = 0;
        v33 = &str_110;
        v20 = v17[1];
        v21 = v18 & 0xFFFFFFFFFFFFFFFELL | *v17 & 1;
        v17[1] = v19;
        *(_QWORD *)buf = v21;
        *(_QWORD *)&buf[8] = v20;
        *v17 = v18;
        re::StringID::destroyString((re::StringID *)buf);
        re::StringID::destroyString((re::StringID *)&v32);
        v10 = (uint64_t *)((char *)v10 + 1);
        v13 += 16;
        if ((uint64_t *)a5 == v10)
          goto LABEL_6;
      }
      v34 = 0;
      v47 = 0u;
      v45 = 0u;
      v46 = 0u;
      *(_OWORD *)buf = 0u;
      v44 = 0u;
      os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      v35 = 136315906;
      v36 = "operator[]";
      v37 = 1024;
      v38 = 789;
      v39 = 2048;
      v40 = v10;
      v41 = 2048;
      v42 = v16;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
    }
    else
    {
LABEL_6:
      re::DynamicArray<re::SkeletalPoseAssetData>::resize((_QWORD *)v11 + 11, a4);
      LODWORD(v10) = 34;
      if (!a4)
        return (_DWORD)v10 == 34;
      v14 = 0;
      while (1)
      {
        a2 = *((_QWORD *)v11 + 13);
        if (a2 <= (unint64_t)v14)
          break;
        v22 = (_QWORD *)(*((_QWORD *)v11 + 15) + 24 * (_QWORD)v14);
        if (a5)
        {
          v23 = 0;
          v24 = 0;
          while (1)
          {
            v25 = v22[1];
            if (v25 <= (unint64_t)v24)
              break;
            v26 = (__int128 *)(*(_QWORD *)(a3 + 8 * (_QWORD)v14) + v23);
            v27 = (_OWORD *)(v22[2] + v23);
            v28 = *v26;
            v29 = v26[2];
            v27[1] = v26[1];
            v27[2] = v29;
            *v27 = v28;
            v24 = (uint64_t *)((char *)v24 + 1);
            v23 += 48;
            if ((uint64_t *)a5 == v24)
              goto LABEL_13;
          }
          v32 = 0;
          v47 = 0u;
          v45 = 0u;
          v46 = 0u;
          *(_OWORD *)buf = 0u;
          v44 = 0u;
          v30 = MEMORY[0x24BDACB70];
          os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
          v35 = 136315906;
          v36 = "operator[]";
          v37 = 1024;
          v38 = 468;
          v39 = 2048;
          v40 = v24;
          v41 = 2048;
          v42 = v25;
          _os_log_send_and_compose_impl();
          _os_crash_msg();
          __break(1u);
          goto LABEL_20;
        }
LABEL_13:
        v14 = (uint64_t *)((char *)v14 + 1);
        if (v14 == (uint64_t *)a4)
          return (_DWORD)v10 == 34;
      }
    }
    v32 = 0;
    v47 = 0u;
    v45 = 0u;
    v46 = 0u;
    *(_OWORD *)buf = 0u;
    v44 = 0u;
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    v35 = 136315906;
    v36 = "operator[]";
    v37 = 1024;
    v38 = 789;
    v39 = 2048;
    v40 = v14;
    v41 = 2048;
    v42 = a2;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
    goto LABEL_23;
  }
  if (CoreRELog::onceToken != -1)
LABEL_23:
    dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
  v30 = (id)CoreRELog::log;
  if (os_log_type_enabled(v30, OS_LOG_TYPE_ERROR))
  {
LABEL_20:
    *(_WORD *)buf = 0;
    _os_log_error_impl(&dword_224FE9000, v30, OS_LOG_TYPE_ERROR, "Cannot set skeletal poses for incompatible animation.", buf, 2u);
  }

  return (_DWORD)v10 == 34;
}

BOOL RETimelineDefinitionSetSkeletalPosePoseCount(_anonymous_namespace_::TimelineDefinition *a1, unint64_t a2)
{
  _anonymous_namespace_ *v3;
  int v4;
  NSObject *v5;
  uint8_t v7[16];

  v4 = *((_DWORD *)v3 + 2);
  if (v4 == 34)
  {
    re::DynamicArray<re::SkeletalPoseAssetData>::resize((_QWORD *)v3 + 11, a2);
  }
  else
  {
    if (CoreRELog::onceToken != -1)
      dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
    v5 = (id)CoreRELog::log;
    if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)v7 = 0;
      _os_log_error_impl(&dword_224FE9000, v5, OS_LOG_TYPE_ERROR, "Cannot set skeletal poses for incompatible animation.", v7, 2u);
    }

  }
  return v4 == 34;
}

uint64_t RETimelineDefinitionSetSkeletalPosesValues(_anonymous_namespace_::TimelineDefinition *a1, uint64_t a2, NSObject *a3, uint64_t a4)
{
  _anonymous_namespace_ *v7;
  _anonymous_namespace_ *v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  __int128 *v13;
  _OWORD *v14;
  __int128 v15;
  __int128 v16;
  const char *v18;
  NSObject *v19;
  uint32_t v20;
  uint64_t v21;
  uint8_t buf[32];
  __int128 v23;
  __int128 v24;
  __int128 v25;
  uint64_t v26;

  v26 = *MEMORY[0x24BDAC8D0];
  if (*((_DWORD *)v7 + 2) == 34)
  {
    v8 = v7;
    if (*((_QWORD *)v7 + 21) == a4)
    {
      re::DynamicArray<re::SkeletalPoseAssetData>::resize((_QWORD *)v7 + 11, (unint64_t)a3);
      if (!a3)
        return 1;
      v9 = 0;
      while (1)
      {
        if (*((_QWORD *)v8 + 13) <= v9)
        {
          v24 = 0u;
          v25 = 0u;
          v23 = 0u;
          memset(buf, 0, sizeof(buf));
          os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
          _os_log_send_and_compose_impl();
          _os_crash_msg();
          __break(1u);
          goto LABEL_23;
        }
        if (a4)
          break;
LABEL_10:
        if (++v9 == a3)
          return 1;
      }
      v10 = 0;
      v11 = 0;
      v12 = *((_QWORD *)v8 + 15) + 24 * v9;
      while (*(_QWORD *)(v12 + 8) > v11)
      {
        v13 = (__int128 *)(*(_QWORD *)(a2 + 8 * v9) + v10);
        v14 = (_OWORD *)(*(_QWORD *)(v12 + 16) + v10);
        v15 = *v13;
        v16 = v13[2];
        v14[1] = v13[1];
        v14[2] = v16;
        *v14 = v15;
        ++v11;
        v10 += 48;
        if (a4 == v11)
          goto LABEL_10;
      }
      v24 = 0u;
      v25 = 0u;
      v23 = 0u;
      memset(buf, 0, sizeof(buf));
      a4 = MEMORY[0x24BDACB70];
      os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
    }
    else
    {
      if (CoreRELog::onceToken != -1)
        dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
      a3 = (id)CoreRELog::log;
      if (!os_log_type_enabled(a3, OS_LOG_TYPE_ERROR))
        goto LABEL_18;
    }
    v21 = *((_QWORD *)v8 + 21);
    *(_DWORD *)buf = 134218240;
    *(_QWORD *)&buf[4] = v21;
    *(_WORD *)&buf[12] = 2048;
    *(_QWORD *)&buf[14] = a4;
    v18 = "Skeletal Pose cannot set joint values, joint count does not match: %zu != %zu";
    v19 = a3;
    v20 = 22;
  }
  else
  {
    if (CoreRELog::onceToken != -1)
LABEL_23:
      dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
    a3 = (id)CoreRELog::log;
    if (!os_log_type_enabled(a3, OS_LOG_TYPE_ERROR))
      goto LABEL_18;
    *(_WORD *)buf = 0;
    v18 = "Cannot set skeletal pose values for incompatible animation.";
    v19 = a3;
    v20 = 2;
  }
  _os_log_error_impl(&dword_224FE9000, v19, OS_LOG_TYPE_ERROR, v18, buf, v20);
LABEL_18:

  return 0;
}

uint64_t RETimelineDefinitionSetSkeletalPoseIndexValues(_anonymous_namespace_::TimelineDefinition *a1, unint64_t a2, uint64_t a3, unint64_t a4)
{
  _anonymous_namespace_ *v7;
  _anonymous_namespace_ *v8;
  _QWORD *v9;
  uint64_t v10;
  unint64_t v11;
  _OWORD *v12;
  __int128 v13;
  __int128 v14;
  NSObject *v16;
  const char *v17;
  NSObject *v18;
  uint32_t v19;
  uint64_t v20;
  _OWORD buf[5];
  uint64_t v22;

  v22 = *MEMORY[0x24BDAC8D0];
  if (*((_DWORD *)v7 + 2) == 34)
  {
    v8 = v7;
    if (*((_QWORD *)v7 + 21) != a4)
    {
      if (CoreRELog::onceToken != -1)
        dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
      v16 = (id)CoreRELog::log;
      if (!os_log_type_enabled(v16, OS_LOG_TYPE_ERROR))
        goto LABEL_21;
      v20 = *((_QWORD *)v8 + 21);
      LODWORD(buf[0]) = 134218240;
      *(_QWORD *)((char *)buf + 4) = v20;
      WORD6(buf[0]) = 2048;
      *(_QWORD *)((char *)buf + 14) = a4;
      v17 = "Skeletal Pose cannot set joint values, joint count does not match: %zu != %zu";
      v18 = v16;
      v19 = 22;
      goto LABEL_20;
    }
    if (*((_QWORD *)v7 + 13) <= a2)
    {
      if (CoreRELog::onceToken != -1)
        dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
      v16 = (id)CoreRELog::log;
      if (!os_log_type_enabled(v16, OS_LOG_TYPE_ERROR))
        goto LABEL_21;
      LODWORD(buf[0]) = 134217984;
      *(_QWORD *)((char *)buf + 4) = a2;
      v17 = "Skeletal Pose cannot set joint value for index %zu.";
      v18 = v16;
      v19 = 12;
      goto LABEL_20;
    }
    v9 = (_QWORD *)(*((_QWORD *)v7 + 15) + 24 * a2);
    if (!a4)
      return 1;
    v10 = 0;
    v11 = 0;
    while (v9[1] > v11)
    {
      v12 = (_OWORD *)(v9[2] + v10);
      v13 = *(_OWORD *)(a3 + v10);
      v14 = *(_OWORD *)(a3 + v10 + 32);
      v12[1] = *(_OWORD *)(a3 + v10 + 16);
      v12[2] = v14;
      *v12 = v13;
      ++v11;
      v10 += 48;
      if (a4 == v11)
        return 1;
    }
    memset(buf, 0, sizeof(buf));
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  else if (CoreRELog::onceToken == -1)
  {
    goto LABEL_10;
  }
  dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
LABEL_10:
  v16 = (id)CoreRELog::log;
  if (os_log_type_enabled(v16, OS_LOG_TYPE_ERROR))
  {
    LOWORD(buf[0]) = 0;
    v17 = "Cannot set skeletal pose index values for incompatible animation.";
    v18 = v16;
    v19 = 2;
LABEL_20:
    _os_log_error_impl(&dword_224FE9000, v18, OS_LOG_TYPE_ERROR, v17, (uint8_t *)buf, v19);
  }
LABEL_21:

  return 0;
}

uint64_t RETimelineDefinitionSetSkeletalPoseIndexValue(_anonymous_namespace_::TimelineDefinition *a1, unint64_t a2, unint64_t a3, __n128 a4, __n128 a5, __n128 a6)
{
  _anonymous_namespace_ *v8;
  uint64_t v9;
  __n128 *v10;
  NSObject *v12;
  const char *v13;
  NSObject *v14;
  uint32_t v15;
  uint8_t buf[16];
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  uint64_t v24;

  v24 = *MEMORY[0x24BDAC8D0];
  if (*((_DWORD *)v8 + 2) != 34)
  {
    if (CoreRELog::onceToken != -1)
      dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
    v12 = (id)CoreRELog::log;
    if (!os_log_type_enabled(v12, OS_LOG_TYPE_ERROR))
      goto LABEL_18;
    *(_WORD *)buf = 0;
    v13 = "Cannot set skeletal pose index value for incompatible animation.";
LABEL_14:
    v14 = v12;
    v15 = 2;
    goto LABEL_15;
  }
  if (*((_QWORD *)v8 + 21) <= a3)
  {
    if (CoreRELog::onceToken != -1)
      dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
    v12 = (id)CoreRELog::log;
    if (!os_log_type_enabled(v12, OS_LOG_TYPE_ERROR))
      goto LABEL_18;
    *(_WORD *)buf = 0;
    v13 = "Skeletal Pose cannot set joint values, not enough joints.";
    goto LABEL_14;
  }
  if (*((_QWORD *)v8 + 13) > a2)
  {
    v9 = *((_QWORD *)v8 + 15) + 24 * a2;
    if (*(_QWORD *)(v9 + 8) > a3)
    {
      v10 = (__n128 *)(*(_QWORD *)(v9 + 16) + 48 * a3);
      *v10 = a4;
      v10[1] = a5;
      v10[2] = a6;
      return 1;
    }
    v22 = 0u;
    v23 = 0u;
    v20 = 0u;
    v21 = 0u;
    *(_OWORD *)buf = 0u;
    a2 = MEMORY[0x24BDACB70];
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
    goto LABEL_21;
  }
  if (CoreRELog::onceToken != -1)
LABEL_21:
    dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
  v12 = (id)CoreRELog::log;
  if (!os_log_type_enabled(v12, OS_LOG_TYPE_ERROR))
    goto LABEL_18;
  *(_DWORD *)buf = 134217984;
  *(_QWORD *)&buf[4] = a2;
  v13 = "Skeletal Pose cannot set joint value for index %zu.";
  v14 = v12;
  v15 = 12;
LABEL_15:
  _os_log_error_impl(&dword_224FE9000, v14, OS_LOG_TYPE_ERROR, v13, buf, v15);
LABEL_18:

  return 0;
}

BOOL RETimelineDefinitionGetSkeletalPoseScaleChannelMask(uint64_t a1)
{
  uint64_t v1;
  NSObject *v3;
  uint8_t v4[16];

  v1 = *(_QWORD *)(a1 + 48);
  if (!v1)
    v1 = *(_QWORD *)(re::AssetHandle::asset<re::TimelineAsset>((re::TimelineAsset *)(a1 + 24)) + 8);
  if (*(_DWORD *)(v1 + 8) == 34)
    return *(_BYTE *)(v1 + 192) != 0;
  if (CoreRELog::onceToken != -1)
    dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
  v3 = (id)CoreRELog::log;
  if (os_log_type_enabled(v3, OS_LOG_TYPE_ERROR))
  {
    *(_WORD *)v4 = 0;
    _os_log_error_impl(&dword_224FE9000, v3, OS_LOG_TYPE_ERROR, "Cannot get skeletal pose scale channel mask for incompatible animation.", v4, 2u);
  }

  return 0;
}

BOOL RETimelineDefinitionSetSkeletalPoseScaleChannelMask(_anonymous_namespace_::TimelineDefinition *a1, char a2)
{
  _anonymous_namespace_ *v3;
  int v4;
  NSObject *v5;
  uint8_t v7[16];

  v4 = *((_DWORD *)v3 + 2);
  if (v4 == 34)
  {
    *((_BYTE *)v3 + 192) = a2;
  }
  else
  {
    if (CoreRELog::onceToken != -1)
      dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
    v5 = (id)CoreRELog::log;
    if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)v7 = 0;
      _os_log_error_impl(&dword_224FE9000, v5, OS_LOG_TYPE_ERROR, "Cannot set skeletal pose scale channel mask for incompatible animation.", v7, 2u);
    }

  }
  return v4 == 34;
}

BOOL RETimelineDefinitionGetSkeletalPoseRotationChannelMask(uint64_t a1)
{
  uint64_t v1;
  NSObject *v3;
  uint8_t v4[16];

  v1 = *(_QWORD *)(a1 + 48);
  if (!v1)
    v1 = *(_QWORD *)(re::AssetHandle::asset<re::TimelineAsset>((re::TimelineAsset *)(a1 + 24)) + 8);
  if (*(_DWORD *)(v1 + 8) == 34)
    return *(_BYTE *)(v1 + 193) != 0;
  if (CoreRELog::onceToken != -1)
    dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
  v3 = (id)CoreRELog::log;
  if (os_log_type_enabled(v3, OS_LOG_TYPE_ERROR))
  {
    *(_WORD *)v4 = 0;
    _os_log_error_impl(&dword_224FE9000, v3, OS_LOG_TYPE_ERROR, "Cannot get skeletal pose rotation channel mask for incompatible animation.", v4, 2u);
  }

  return 0;
}

BOOL RETimelineDefinitionSetSkeletalPoseRotationChannelMask(_anonymous_namespace_::TimelineDefinition *a1, char a2)
{
  _anonymous_namespace_ *v3;
  int v4;
  NSObject *v5;
  uint8_t v7[16];

  v4 = *((_DWORD *)v3 + 2);
  if (v4 == 34)
  {
    *((_BYTE *)v3 + 193) = a2;
  }
  else
  {
    if (CoreRELog::onceToken != -1)
      dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
    v5 = (id)CoreRELog::log;
    if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)v7 = 0;
      _os_log_error_impl(&dword_224FE9000, v5, OS_LOG_TYPE_ERROR, "Cannot set skeletal pose rotation channel mask for incompatible animation.", v7, 2u);
    }

  }
  return v4 == 34;
}

BOOL RETimelineDefinitionGetSkeletalPoseTranslationChannelMask(uint64_t a1)
{
  uint64_t v1;
  NSObject *v3;
  uint8_t v4[16];

  v1 = *(_QWORD *)(a1 + 48);
  if (!v1)
    v1 = *(_QWORD *)(re::AssetHandle::asset<re::TimelineAsset>((re::TimelineAsset *)(a1 + 24)) + 8);
  if (*(_DWORD *)(v1 + 8) == 34)
    return *(_BYTE *)(v1 + 194) != 0;
  if (CoreRELog::onceToken != -1)
    dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
  v3 = (id)CoreRELog::log;
  if (os_log_type_enabled(v3, OS_LOG_TYPE_ERROR))
  {
    *(_WORD *)v4 = 0;
    _os_log_error_impl(&dword_224FE9000, v3, OS_LOG_TYPE_ERROR, "Cannot get skeletal pose translation channel mask for incompatible animation.", v4, 2u);
  }

  return 0;
}

BOOL RETimelineDefinitionSetSkeletalPoseTranslationChannelMask(_anonymous_namespace_::TimelineDefinition *a1, char a2)
{
  _anonymous_namespace_ *v3;
  int v4;
  NSObject *v5;
  uint8_t v7[16];

  v4 = *((_DWORD *)v3 + 2);
  if (v4 == 34)
  {
    *((_BYTE *)v3 + 194) = a2;
  }
  else
  {
    if (CoreRELog::onceToken != -1)
      dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
    v5 = (id)CoreRELog::log;
    if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)v7 = 0;
      _os_log_error_impl(&dword_224FE9000, v5, OS_LOG_TYPE_ERROR, "Cannot set skeletal pose translation channel mask for incompatible animation.", v7, 2u);
    }

  }
  return v4 == 34;
}

uint64_t RETimelineDefinitionGetBlendShapeWeightsWeightsCount(uint64_t a1)
{
  uint64_t v1;

  v1 = *(_QWORD *)(a1 + 48);
  if (!v1)
    v1 = *(_QWORD *)(re::AssetHandle::asset<re::TimelineAsset>((re::TimelineAsset *)(a1 + 24)) + 8);
  if (*(_DWORD *)(v1 + 8) == 59)
    return *(_QWORD *)(v1 + 144);
  else
    return -1;
}

BOOL RETimelineDefinitionSetBlendShapeWeightsWeightsCount(_anonymous_namespace_::TimelineDefinition *a1, unint64_t a2)
{
  _anonymous_namespace_ *v3;
  int v4;
  _anonymous_namespace_ *v5;
  uint64_t v6;
  _anonymous_namespace_ *v7;
  uint64_t v8;

  v4 = *((_DWORD *)v3 + 2);
  if (v4 == 59)
  {
    v5 = v3;
    re::DynamicArray<re::StringID>::resize((uint64_t)v3 + 128, a2);
    v6 = *((_QWORD *)v5 + 13);
    if (v6)
    {
      v7 = (_anonymous_namespace_ *)*((_QWORD *)v5 + 15);
      v8 = 24 * v6;
      do
      {
        v7 = (_anonymous_namespace_ *)((char *)v7 + 24);
        v8 -= 24;
      }
      while (v8);
    }
  }
  return v4 == 59;
}

uint64_t RETimelineDefinitionGetBlendShapeWeightsWeightName(uint64_t a1, unint64_t a2)
{
  uint64_t v3;

  v3 = *(_QWORD *)(a1 + 48);
  if (!v3)
    v3 = *(_QWORD *)(re::AssetHandle::asset<re::TimelineAsset>((re::TimelineAsset *)(a1 + 24)) + 8);
  if (*(_DWORD *)(v3 + 8) == 59 && *(_QWORD *)(v3 + 144) > a2)
    return *(_QWORD *)(*(_QWORD *)(v3 + 160) + 16 * a2 + 8);
  else
    return 0;
}

uint64_t RETimelineDefinitionSetBlendShapeWeightsWeightName(_anonymous_namespace_::TimelineDefinition *a1, unint64_t a2, const char *a3)
{
  _anonymous_namespace_ *v5;
  _anonymous_namespace_ *v6;
  unint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v14;
  uint64_t v15;
  void *v16;
  uint64_t v17;
  int v18;
  const char *v19;
  __int16 v20;
  int v21;
  __int16 v22;
  unint64_t v23;
  __int16 v24;
  unint64_t v25;
  _OWORD v26[5];
  uint64_t v27;

  v27 = *MEMORY[0x24BDAC8D0];
  if (*((_DWORD *)v5 + 2) != 59)
    return 0;
  v6 = v5;
  if (*((_QWORD *)v5 + 18) <= a2)
    return 0;
  v15 = 0;
  v16 = &str_110;
  v7 = *((_QWORD *)v6 + 18);
  if (v7 <= a2)
  {
    v17 = 0;
    memset(v26, 0, sizeof(v26));
    v14 = v7;
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    v18 = 136315906;
    v19 = "operator[]";
    v20 = 1024;
    v21 = 789;
    v22 = 2048;
    v23 = a2;
    v24 = 2048;
    v25 = v14;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  v8 = (_QWORD *)(*((_QWORD *)v6 + 20) + 16 * a2);
  v9 = v15;
  v10 = v16;
  v15 = 0;
  v16 = &str_110;
  v11 = v8[1];
  v12 = v9 & 0xFFFFFFFFFFFFFFFELL | *v8 & 1;
  v8[1] = v10;
  *(_QWORD *)&v26[0] = v12;
  *((_QWORD *)&v26[0] + 1) = v11;
  *v8 = v9;
  re::StringID::destroyString((re::StringID *)v26);
  re::StringID::destroyString((re::StringID *)&v15);
  return 1;
}

float RETimelineDefinitionGetBlendShapeWeightsIndexWeightValue(uint64_t a1, unint64_t a2, unint64_t a3)
{
  uint64_t v5;
  uint64_t v6;

  v5 = *(_QWORD *)(a1 + 48);
  if (!v5)
    v5 = *(_QWORD *)(re::AssetHandle::asset<re::TimelineAsset>((re::TimelineAsset *)(a1 + 24)) + 8);
  if (*(_DWORD *)(v5 + 8) == 59
    && *(_QWORD *)(v5 + 104) > a2
    && (v6 = *(_QWORD *)(v5 + 120) + 24 * a2, *(_QWORD *)(v6 + 8) > a3))
  {
    return *(float *)(*(_QWORD *)(v6 + 16) + 4 * a3);
  }
  else
  {
    return NAN;
  }
}

BOOL RETimelineDefinitionSetBlendShapeWeightsData(_anonymous_namespace_::TimelineDefinition *a1, unint64_t a2, uint64_t a3, unint64_t a4, unint64_t a5)
{
  _anonymous_namespace_ *v9;
  uint64_t v10;
  _anonymous_namespace_ *v11;
  _anonymous_namespace_ *v12;
  uint64_t *v13;
  uint64_t *v14;
  const char *v15;
  unint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  void *v19;
  uint64_t v20;
  unint64_t v21;
  _anonymous_namespace_ *v22;
  uint64_t *v23;
  uint64_t *v24;
  NSObject *v25;
  uint64_t v27;
  void *v28;
  uint64_t v29;
  int v30;
  const char *v31;
  __int16 v32;
  int v33;
  __int16 v34;
  uint64_t *v35;
  __int16 v36;
  unint64_t v37;
  uint8_t buf[16];
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  uint64_t v43;

  v43 = *MEMORY[0x24BDAC8D0];
  LODWORD(v10) = *((_DWORD *)v9 + 2);
  if ((_DWORD)v10 == 59)
  {
    v11 = v9;
    re::DynamicArray<re::StringID>::resize((uint64_t)v9 + 128, a5);
    if (a5)
    {
      v10 = 0;
      v13 = 0;
      while (1)
      {
        v15 = *(const char **)(a2 + 8 * (_QWORD)v13);
        v27 = 0;
        v28 = &str_110;
        v16 = *((_QWORD *)v11 + 18);
        if (v16 <= (unint64_t)v13)
          break;
        v17 = (_QWORD *)(*((_QWORD *)v11 + 20) + v10);
        v18 = v27;
        v19 = v28;
        v27 = 0;
        v28 = &str_110;
        v20 = v17[1];
        v21 = v18 & 0xFFFFFFFFFFFFFFFELL | *v17 & 1;
        v17[1] = v19;
        *(_QWORD *)buf = v21;
        *(_QWORD *)&buf[8] = v20;
        *v17 = v18;
        re::StringID::destroyString((re::StringID *)buf);
        re::StringID::destroyString((re::StringID *)&v27);
        v13 = (uint64_t *)((char *)v13 + 1);
        v10 += 16;
        if ((uint64_t *)a5 == v13)
          goto LABEL_6;
      }
      v29 = 0;
      v42 = 0u;
      v40 = 0u;
      v41 = 0u;
      *(_OWORD *)buf = 0u;
      v39 = 0u;
      os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      v30 = 136315906;
      v31 = "operator[]";
      v32 = 1024;
      v33 = 789;
      v34 = 2048;
      v35 = v13;
      v36 = 2048;
      v37 = v16;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
    }
    else
    {
LABEL_6:
      re::DynamicArray<re::SkeletalPoseAssetData>::resize((_QWORD *)v11 + 11, a4);
      LODWORD(v10) = 59;
      if (!a4)
        return (_DWORD)v10 == 59;
      v14 = 0;
      while (1)
      {
        a2 = *((_QWORD *)v11 + 13);
        if (a2 <= (unint64_t)v14)
          break;
        v22 = (_anonymous_namespace_ *)(*((_QWORD *)v11 + 15) + 24 * (_QWORD)v14);
        if (a5)
        {
          v23 = 0;
          v24 = (uint64_t *)*((_QWORD *)v22 + 1);
          while (v24 != v23)
          {
            *(_DWORD *)(*((_QWORD *)v22 + 2) + 4 * (_QWORD)v23) = *(_DWORD *)(*(_QWORD *)(a3 + 8 * (_QWORD)v14)
                                                                              + 4 * (_QWORD)v23);
            v23 = (uint64_t *)((char *)v23 + 1);
            if ((uint64_t *)a5 == v23)
              goto LABEL_13;
          }
          v27 = 0;
          v42 = 0u;
          v40 = 0u;
          v41 = 0u;
          *(_OWORD *)buf = 0u;
          v39 = 0u;
          v25 = MEMORY[0x24BDACB70];
          os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
          v30 = 136315906;
          v31 = "operator[]";
          v32 = 1024;
          v33 = 468;
          v34 = 2048;
          v35 = v24;
          v36 = 2048;
          v37 = (unint64_t)v24;
          _os_log_send_and_compose_impl();
          _os_crash_msg();
          __break(1u);
          goto LABEL_20;
        }
LABEL_13:
        v14 = (uint64_t *)((char *)v14 + 1);
        if (v14 == (uint64_t *)a4)
          return (_DWORD)v10 == 59;
      }
    }
    v27 = 0;
    v42 = 0u;
    v40 = 0u;
    v41 = 0u;
    *(_OWORD *)buf = 0u;
    v39 = 0u;
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    v30 = 136315906;
    v31 = "operator[]";
    v32 = 1024;
    v33 = 789;
    v34 = 2048;
    v35 = v14;
    v36 = 2048;
    v37 = a2;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
    goto LABEL_23;
  }
  if (CoreRELog::onceToken != -1)
LABEL_23:
    dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
  v25 = (id)CoreRELog::log;
  if (os_log_type_enabled(v25, OS_LOG_TYPE_ERROR))
  {
LABEL_20:
    *(_WORD *)buf = 0;
    _os_log_error_impl(&dword_224FE9000, v25, OS_LOG_TYPE_ERROR, "Cannot set blend shape weights for incompatible animation.", buf, 2u);
  }

  return (_DWORD)v10 == 59;
}

uint64_t RETimelineDefinitionGetBlendShapeWeightsSampleCount(_anonymous_namespace_::TimelineDefinition *a1)
{
  _anonymous_namespace_ *v1;
  NSObject *v3;
  uint8_t v4[16];

  if (*((_DWORD *)v1 + 2) == 59)
    return *((_QWORD *)v1 + 13);
  if (CoreRELog::onceToken != -1)
    dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
  v3 = (id)CoreRELog::log;
  if (os_log_type_enabled(v3, OS_LOG_TYPE_ERROR))
  {
    *(_WORD *)v4 = 0;
    _os_log_error_impl(&dword_224FE9000, v3, OS_LOG_TYPE_ERROR, "Cannot get blend shape weights sample count for incompatible animation.", v4, 2u);
  }

  return 0;
}

BOOL RETimelineDefinitionSetBlendShapeWeightsSampleCount(_anonymous_namespace_::TimelineDefinition *a1, unint64_t a2)
{
  _anonymous_namespace_ *v3;
  int v4;
  NSObject *v5;
  uint8_t v7[16];

  v4 = *((_DWORD *)v3 + 2);
  if (v4 == 59)
  {
    re::DynamicArray<re::SkeletalPoseAssetData>::resize((_QWORD *)v3 + 11, a2);
  }
  else
  {
    if (CoreRELog::onceToken != -1)
      dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
    v5 = (id)CoreRELog::log;
    if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)v7 = 0;
      _os_log_error_impl(&dword_224FE9000, v5, OS_LOG_TYPE_ERROR, "Cannot set blend shape weights sample count for incompatible animation.", v7, 2u);
    }

  }
  return v4 == 59;
}

uint64_t RETimelineDefinitionSetBlendShapeWeightsSampleValues(_anonymous_namespace_::TimelineDefinition *a1, uint64_t a2, NSObject *a3, uint64_t a4)
{
  _anonymous_namespace_ *v7;
  _anonymous_namespace_ *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  const char *v15;
  NSObject *v16;
  uint32_t v17;
  uint64_t v18;
  uint8_t buf[32];
  __int128 v20;
  __int128 v21;
  __int128 v22;
  uint64_t v23;

  v23 = *MEMORY[0x24BDAC8D0];
  if (*((_DWORD *)v7 + 2) == 59)
  {
    v8 = v7;
    if (*((_QWORD *)v7 + 18) == a4)
    {
      re::DynamicArray<re::SkeletalPoseAssetData>::resize((_QWORD *)v7 + 11, (unint64_t)a3);
      if (!a3)
        return 1;
      v9 = 0;
      v10 = *((_QWORD *)v8 + 13);
      while (1)
      {
        if (v9 == v10)
        {
          v21 = 0u;
          v22 = 0u;
          v20 = 0u;
          memset(buf, 0, sizeof(buf));
          os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
          _os_log_send_and_compose_impl();
          _os_crash_msg();
          __break(1u);
          goto LABEL_23;
        }
        if (a4)
          break;
LABEL_10:
        if (++v9 == a3)
          return 1;
      }
      v11 = 0;
      v12 = *((_QWORD *)v8 + 15) + 24 * v9;
      v13 = *(_QWORD *)(v12 + 8);
      while (v13 != v11)
      {
        *(_DWORD *)(*(_QWORD *)(v12 + 16) + 4 * v11) = *(_DWORD *)(*(_QWORD *)(a2 + 8 * v9) + 4 * v11);
        if (a4 == ++v11)
          goto LABEL_10;
      }
      v21 = 0u;
      v22 = 0u;
      v20 = 0u;
      memset(buf, 0, sizeof(buf));
      a4 = MEMORY[0x24BDACB70];
      os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
    }
    else
    {
      if (CoreRELog::onceToken != -1)
        dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
      a3 = (id)CoreRELog::log;
      if (!os_log_type_enabled(a3, OS_LOG_TYPE_ERROR))
        goto LABEL_18;
    }
    v18 = *((_QWORD *)v8 + 18);
    *(_DWORD *)buf = 134218240;
    *(_QWORD *)&buf[4] = v18;
    *(_WORD *)&buf[12] = 2048;
    *(_QWORD *)&buf[14] = a4;
    v15 = "Blend Shape Weights animation sample cannot set weight values, weight count does not match: %zu != %zu";
    v16 = a3;
    v17 = 22;
  }
  else
  {
    if (CoreRELog::onceToken != -1)
LABEL_23:
      dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
    a3 = (id)CoreRELog::log;
    if (!os_log_type_enabled(a3, OS_LOG_TYPE_ERROR))
      goto LABEL_18;
    *(_WORD *)buf = 0;
    v15 = "Cannot set blend shape weights sample values for incompatible animation.";
    v16 = a3;
    v17 = 2;
  }
  _os_log_error_impl(&dword_224FE9000, v16, OS_LOG_TYPE_ERROR, v15, buf, v17);
LABEL_18:

  return 0;
}

uint64_t RETimelineDefinitionSetBlendShapeWeightsIndexValues(_anonymous_namespace_::TimelineDefinition *a1, unint64_t a2, uint64_t a3, unint64_t a4)
{
  _anonymous_namespace_ *v7;
  _anonymous_namespace_ *v8;
  _anonymous_namespace_ *v9;
  uint64_t v10;
  uint64_t v11;
  NSObject *v13;
  const char *v14;
  NSObject *v15;
  uint32_t v16;
  uint64_t v17;
  _OWORD buf[5];
  uint64_t v19;

  v19 = *MEMORY[0x24BDAC8D0];
  if (*((_DWORD *)v7 + 2) == 59)
  {
    v8 = v7;
    if (*((_QWORD *)v7 + 18) != a4)
    {
      if (CoreRELog::onceToken != -1)
        dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
      v13 = (id)CoreRELog::log;
      if (!os_log_type_enabled(v13, OS_LOG_TYPE_ERROR))
        goto LABEL_21;
      v17 = *((_QWORD *)v8 + 18);
      LODWORD(buf[0]) = 134218240;
      *(_QWORD *)((char *)buf + 4) = v17;
      WORD6(buf[0]) = 2048;
      *(_QWORD *)((char *)buf + 14) = a4;
      v14 = "Blend Shape Weights cannot set weight values, weight count does not match: %zu != %zu";
      v15 = v13;
      v16 = 22;
      goto LABEL_20;
    }
    if (*((_QWORD *)v7 + 13) <= a2)
    {
      if (CoreRELog::onceToken != -1)
        dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
      v13 = (id)CoreRELog::log;
      if (!os_log_type_enabled(v13, OS_LOG_TYPE_ERROR))
        goto LABEL_21;
      LODWORD(buf[0]) = 134217984;
      *(_QWORD *)((char *)buf + 4) = a2;
      v14 = "Blend Shape Weights cannot set weight value for index %zu.";
      v15 = v13;
      v16 = 12;
      goto LABEL_20;
    }
    v9 = (_anonymous_namespace_ *)(*((_QWORD *)v7 + 15) + 24 * a2);
    if (!a4)
      return 1;
    v10 = 0;
    v11 = *((_QWORD *)v9 + 1);
    while (v11 != v10)
    {
      *(_DWORD *)(*((_QWORD *)v9 + 2) + 4 * v10) = *(_DWORD *)(a3 + 4 * v10);
      if (a4 == ++v10)
        return 1;
    }
    memset(buf, 0, sizeof(buf));
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  else if (CoreRELog::onceToken == -1)
  {
    goto LABEL_10;
  }
  dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
LABEL_10:
  v13 = (id)CoreRELog::log;
  if (os_log_type_enabled(v13, OS_LOG_TYPE_ERROR))
  {
    LOWORD(buf[0]) = 0;
    v14 = "Cannot set blend shape weights index values for incompatible animation.";
    v15 = v13;
    v16 = 2;
LABEL_20:
    _os_log_error_impl(&dword_224FE9000, v15, OS_LOG_TYPE_ERROR, v14, (uint8_t *)buf, v16);
  }
LABEL_21:

  return 0;
}

uint64_t RETimelineDefinitionSetBlendShapeWeightsIndexValue(_anonymous_namespace_::TimelineDefinition *a1, unint64_t a2, unint64_t a3, float a4)
{
  _anonymous_namespace_ *v7;
  uint64_t v8;
  NSObject *v10;
  const char *v11;
  NSObject *v12;
  uint32_t v13;
  uint8_t buf[16];
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  uint64_t v19;

  v19 = *MEMORY[0x24BDAC8D0];
  if (*((_DWORD *)v7 + 2) != 59)
  {
    if (CoreRELog::onceToken != -1)
      dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
    v10 = (id)CoreRELog::log;
    if (!os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
      goto LABEL_18;
    *(_WORD *)buf = 0;
    v11 = "Cannot set blend shape weights index value for incompatible animation.";
LABEL_14:
    v12 = v10;
    v13 = 2;
    goto LABEL_15;
  }
  if (*((_QWORD *)v7 + 18) <= a3)
  {
    if (CoreRELog::onceToken != -1)
      dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
    v10 = (id)CoreRELog::log;
    if (!os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
      goto LABEL_18;
    *(_WORD *)buf = 0;
    v11 = "Blend Shape Weights cannot set weight value, not enough weights.";
    goto LABEL_14;
  }
  if (*((_QWORD *)v7 + 13) > a2)
  {
    v8 = *((_QWORD *)v7 + 15) + 24 * a2;
    if (*(_QWORD *)(v8 + 8) > a3)
    {
      *(float *)(*(_QWORD *)(v8 + 16) + 4 * a3) = a4;
      return 1;
    }
    v17 = 0u;
    v18 = 0u;
    v15 = 0u;
    v16 = 0u;
    *(_OWORD *)buf = 0u;
    a2 = MEMORY[0x24BDACB70];
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
    goto LABEL_21;
  }
  if (CoreRELog::onceToken != -1)
LABEL_21:
    dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
  v10 = (id)CoreRELog::log;
  if (!os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
    goto LABEL_18;
  *(_DWORD *)buf = 134217984;
  *(_QWORD *)&buf[4] = a2;
  v11 = "Blend Shape Weights cannot set weight value for index %zu.";
  v12 = v10;
  v13 = 12;
LABEL_15:
  _os_log_error_impl(&dword_224FE9000, v12, OS_LOG_TYPE_ERROR, v11, buf, v13);
LABEL_18:

  return 0;
}

float RETimelineDefinitionGetBlendShapeWeightsIndexValue(_anonymous_namespace_::TimelineDefinition *a1, unint64_t a2, unint64_t a3)
{
  _anonymous_namespace_ *v5;
  uint64_t v6;
  NSObject *v8;
  const char *v9;
  NSObject *v10;
  uint32_t v11;
  uint8_t buf[16];
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  uint64_t v17;

  v17 = *MEMORY[0x24BDAC8D0];
  if (*((_DWORD *)v5 + 2) != 59)
  {
    if (CoreRELog::onceToken != -1)
      dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
    v8 = (id)CoreRELog::log;
    if (!os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
      goto LABEL_18;
    *(_WORD *)buf = 0;
    v9 = "Cannot get blend shape weights index value for incompatible animation.";
LABEL_14:
    v10 = v8;
    v11 = 2;
    goto LABEL_15;
  }
  if (*((_QWORD *)v5 + 18) <= a3)
  {
    if (CoreRELog::onceToken != -1)
      dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
    v8 = (id)CoreRELog::log;
    if (!os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
      goto LABEL_18;
    *(_WORD *)buf = 0;
    v9 = "Blend Shape Weights cannot get weight value, not enough weights.";
    goto LABEL_14;
  }
  if (*((_QWORD *)v5 + 13) > a2)
  {
    v6 = *((_QWORD *)v5 + 15) + 24 * a2;
    if (*(_QWORD *)(v6 + 8) > a3)
      return *(float *)(*(_QWORD *)(v6 + 16) + 4 * a3);
    v15 = 0u;
    v16 = 0u;
    v13 = 0u;
    v14 = 0u;
    *(_OWORD *)buf = 0u;
    a2 = MEMORY[0x24BDACB70];
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
    goto LABEL_21;
  }
  if (CoreRELog::onceToken != -1)
LABEL_21:
    dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
  v8 = (id)CoreRELog::log;
  if (!os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
    goto LABEL_18;
  *(_DWORD *)buf = 134217984;
  *(_QWORD *)&buf[4] = a2;
  v9 = "Blend Shape Weights cannot get weight value for index %zu.";
  v10 = v8;
  v11 = 12;
LABEL_15:
  _os_log_error_impl(&dword_224FE9000, v10, OS_LOG_TYPE_ERROR, v9, buf, v11);
LABEL_18:

  return NAN;
}

void createClipAssetData(uint64_t *a1, uint64_t a2, AssetService *a3)
{
  uint64_t *v5;
  void **var0;
  uint64_t *v7;
  uint64_t v8;
  uint64_t (**v9)();
  uint64_t *v10;
  uint64_t *v11;
  re::TimelineClipAssetData *v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t *v19;
  uint64_t *v20;
  uint64_t *v21;
  uint64_t *v22;
  uint64_t *v23;
  uint64_t *v24;
  _QWORD *v25;
  uint64_t v26;
  void (*v27)(void);
  _QWORD *v28;
  uint64_t v29;
  __int128 v30;
  uint64_t v31;
  _QWORD *v32;
  uint64_t v33;
  __int128 v34;
  _QWORD v35[3];
  _QWORD *v36;
  __int128 v37;
  uint64_t v38;
  char *v39;
  uint64_t v40;

  v5 = a1;
  v40 = *MEMORY[0x24BDAC8D0];
  var0 = a3[6].var0;
  if (!var0)
  {
    a1 = (uint64_t *)re::AssetHandle::asset<re::TimelineAsset>((re::TimelineAsset *)&a3[3]);
    var0 = (void **)a1[1];
  }
  *v5 = 0;
  v5[4] = 0;
  switch(*((_DWORD *)var0 + 2))
  {
    case 3:
    case 0xB:
    case 0x13:
    case 0x1B:
    case 0x27:
    case 0x33:
LABEL_13:
      v19 = re::globalAllocators((re *)a1);
      v8 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v19[2] + 32))(v19[2], 184, 8);
      *(_QWORD *)re::AnimationClipAssetData<float>::AnimationClipAssetData(v8, 3) = off_24ED31C40;
      v9 = &off_24ED99FD8;
      goto LABEL_19;
    case 4:
    case 0xC:
    case 0x14:
    case 0x1C:
    case 0x28:
    case 0x34:
LABEL_10:
      v15 = re::globalAllocators((re *)a1);
      v16 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v15[2] + 32))(v15[2], 184, 8);
      v17 = 4;
      *(_QWORD *)re::AnimationClipAssetData<double>::AnimationClipAssetData(v16, 4) = off_24ED31CF0;
      v35[0] = &off_24ED9A058;
      v36 = v35;
      *(_QWORD *)&v37 = 0;
      v39 = (char *)&v37 + 8;
      *((_QWORD *)&v37 + 1) = &off_24ED9A058;
      std::unique_ptr<re::RigHierarchy,std::function<void ()(re::RigHierarchy*)>>::reset[abi:nn180100](v5, v16);
      std::__function::__value_func<void ()(re::RigHierarchy *)>::operator=[abi:nn180100](v5 + 1, (uint64_t)&v37 + 8);
      std::unique_ptr<re::RigHierarchy,std::function<void ()(re::RigHierarchy*)>>::~unique_ptr[abi:nn180100]((uint64_t *)&v37);
      v18 = v36;
      if (v36 == v35)
      {
        v18 = v35;
      }
      else
      {
        if (!v36)
          goto LABEL_25;
        v17 = 5;
      }
      v27 = *(void (**)(void))(*v18 + 8 * v17);
      goto LABEL_24;
    case 5:
    case 0xD:
    case 0x15:
    case 0x1D:
    case 0x29:
    case 0x35:
LABEL_14:
      v20 = re::globalAllocators((re *)a1);
      v8 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v20[2] + 32))(v20[2], 184, 8);
      *(_QWORD *)re::AnimationClipAssetData<re::Vector2<float>>::AnimationClipAssetData(v8, 5) = off_24ED31DB8;
      v9 = &off_24ED9A0D8;
      goto LABEL_19;
    case 6:
    case 0xE:
    case 0x16:
    case 0x1E:
    case 0x2A:
    case 0x36:
LABEL_15:
      v21 = re::globalAllocators((re *)a1);
      v8 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v21[2] + 32))(v21[2], 184, 8);
      *(_QWORD *)re::AnimationClipAssetData<re::Vector3<float>>::AnimationClipAssetData(v8, 6) = off_24ED31E80;
      v9 = &off_24ED9A158;
      goto LABEL_19;
    case 7:
    case 0xF:
    case 0x17:
    case 0x1F:
    case 0x2B:
    case 0x37:
LABEL_16:
      v22 = re::globalAllocators((re *)a1);
      v8 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v22[2] + 32))(v22[2], 184, 8);
      *(_QWORD *)re::AnimationClipAssetData<re::Vector4<float>>::AnimationClipAssetData(v8, 7) = off_24ED31F48;
      v9 = &off_24ED9A1D8;
      goto LABEL_19;
    case 8:
    case 0x10:
    case 0x18:
    case 0x20:
    case 0x2C:
    case 0x39:
LABEL_17:
      v23 = re::globalAllocators((re *)a1);
      v8 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v23[2] + 32))(v23[2], 184, 8);
      *(_QWORD *)re::AnimationClipAssetData<re::Quaternion<float>>::AnimationClipAssetData(v8, 8) = off_24ED32010;
      v9 = &off_24ED9A258;
      goto LABEL_19;
    case 9:
    case 0x11:
    case 0x19:
    case 0x21:
    case 0x25:
    case 0x2D:
    case 0x38:
LABEL_4:
      v7 = re::globalAllocators((re *)a1);
      v8 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v7[2] + 32))(v7[2], 184, 8);
      *(_QWORD *)re::AnimationClipAssetData<re::GenericSRT<float>>::AnimationClipAssetData(v8, 9) = off_24ED320D8;
      v9 = &off_24ED9A2D8;
      goto LABEL_19;
    case 0xA:
    case 0x12:
    case 0x1A:
    case 0x22:
    case 0x2E:
    case 0x3A:
LABEL_18:
      v24 = re::globalAllocators((re *)a1);
      v8 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v24[2] + 32))(v24[2], 184, 8);
      *(_QWORD *)re::AnimationClipAssetData<re::SkeletalPoseAssetData>::AnimationClipAssetData(v8, 10) = off_24ED321A0;
      v9 = &off_24ED9A358;
      goto LABEL_19;
    case 0x30:
      switch(*((_BYTE *)var0 + 552))
      {
        case 1:
          goto LABEL_10;
        case 2:
          goto LABEL_14;
        case 3:
          goto LABEL_15;
        case 4:
          goto LABEL_16;
        case 5:
          goto LABEL_17;
        case 6:
          goto LABEL_4;
        case 7:
          goto LABEL_18;
        default:
          goto LABEL_13;
      }
    case 0x32:
    case 0x3B:
    case 0x3C:
    case 0x3D:
      v10 = re::globalAllocators((re *)a1);
      v8 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v10[2] + 32))(v10[2], 184, 8);
      *(_QWORD *)re::AnimationClipAssetData<re::BlendShapeWeightsAssetData>::AnimationClipAssetData(v8, 60) = off_24ED32268;
      v9 = &off_24ED9A3D8;
LABEL_19:
      v35[0] = v9;
      v36 = v35;
      *(_QWORD *)&v37 = 0;
      v39 = (char *)&v37 + 8;
      *((_QWORD *)&v37 + 1) = v9;
      std::unique_ptr<re::RigHierarchy,std::function<void ()(re::RigHierarchy*)>>::reset[abi:nn180100](v5, v8);
      std::__function::__value_func<void ()(re::RigHierarchy *)>::operator=[abi:nn180100](v5 + 1, (uint64_t)&v37 + 8);
      std::unique_ptr<re::RigHierarchy,std::function<void ()(re::RigHierarchy*)>>::~unique_ptr[abi:nn180100]((uint64_t *)&v37);
      v25 = v36;
      if (v36 == v35)
      {
        v26 = 4;
        v25 = v35;
      }
      else
      {
        if (!v36)
          goto LABEL_25;
        v26 = 5;
      }
      v27 = *(void (**)(void))(*v25 + 8 * v26);
LABEL_24:
      v27();
LABEL_25:
      v28 = (_QWORD *)*v5;
      v29 = *((_QWORD *)&v37 + 1);
      v30 = *(_OWORD *)(*v5 + 80);
      v28[10] = v37;
      v28[11] = v29;
      v37 = v30;
      v31 = v28[12];
      v28[12] = v38;
      goto LABEL_26;
    default:
      v11 = re::globalAllocators((re *)a1);
      v12 = (re::TimelineClipAssetData *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v11[2] + 32))(v11[2], 176, 8);
      re::TimelineClipAssetData::TimelineClipAssetData(v12);
      v35[0] = &off_24ED9A458;
      v36 = v35;
      *(_QWORD *)&v37 = 0;
      v39 = (char *)&v37 + 8;
      *((_QWORD *)&v37 + 1) = &off_24ED9A458;
      std::unique_ptr<re::RigHierarchy,std::function<void ()(re::RigHierarchy*)>>::reset[abi:nn180100](v5, (uint64_t)v12);
      std::__function::__value_func<void ()(re::RigHierarchy *)>::operator=[abi:nn180100](v5 + 1, (uint64_t)&v37 + 8);
      std::unique_ptr<re::RigHierarchy,std::function<void ()(re::RigHierarchy*)>>::~unique_ptr[abi:nn180100]((uint64_t *)&v37);
      v13 = v36;
      if (v36 == v35)
      {
        v14 = 4;
        v13 = v35;
      }
      else
      {
        if (!v36)
          goto LABEL_31;
        v14 = 5;
      }
      (*(void (**)(void))(*v13 + 8 * v14))();
LABEL_31:
      v32 = (_QWORD *)*v5;
      v33 = *((_QWORD *)&v37 + 1);
      v34 = *(_OWORD *)(*v5 + 72);
      v32[9] = v37;
      v32[10] = v33;
      v37 = v34;
      v31 = v32[11];
      v32[11] = v38;
LABEL_26:
      v38 = v31;
      re::AssetHandle::~AssetHandle((re::AssetHandle *)&v37);
      return;
  }
}

_anonymous_namespace_::TimelineDefinition *RETimelineDefinitionCreateTimelineClip(const char *a1, uint64_t a2, AssetService *a3)
{
  re *v4;
  uint64_t *v5;
  _anonymous_namespace_::TimelineDefinition *v6;
  uint64_t v8[6];

  v8[5] = *MEMORY[0x24BDAC8D0];
  createClipAssetData(v8, a2, a3);
  v5 = re::globalAllocators(v4);
  v6 = (_anonymous_namespace_::TimelineDefinition *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v5[2] + 32))(v5[2], 112, 8);
  std::unique_ptr<re::RigHierarchy,std::function<void ()(re::RigHierarchy*)>>::~unique_ptr[abi:nn180100](v8);
  return v6;
}

uint64_t RETimelineDefinitionCreateClipSourceRef(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  int v3;
  NSObject *v4;
  uint64_t v5;
  uint64_t *v6;
  unsigned int v7;
  uint64_t v9;
  uint8_t buf[8];
  uint64_t v11;
  uint64_t v12;

  v1 = *(_QWORD *)(a1 + 48);
  if (!v1)
  {
    v2 = re::AssetHandle::asset<re::TimelineAsset>((re::TimelineAsset *)(a1 + 24));
    if (v2)
      v1 = *(_QWORD *)(v2 + 8);
    else
      v1 = 0;
  }
  v3 = *(_DWORD *)(v1 + 8);
  if (((0x10000000000007FAuLL >> v3) & 1) != 0)
  {
    v5 = 0;
    *(_QWORD *)buf = 0;
    v11 = 0;
    v12 = 0;
    switch(v3)
    {
      case 1:
        v6 = (uint64_t *)(v1 + 72);
        goto LABEL_13;
      case 2:
        goto LABEL_17;
      case 3:
      case 4:
      case 5:
      case 6:
      case 7:
      case 8:
      case 9:
      case 10:
        goto LABEL_12;
      default:
        if (v3 != 60)
          goto LABEL_17;
LABEL_12:
        v6 = (uint64_t *)(v1 + 80);
LABEL_13:
        re::AssetHandle::operator=((uint64_t *)buf, v6);
        if (v11 && (v7 = atomic_load((unsigned int *)(v11 + 704)), v7 == 2))
        {
          v5 = v9;
        }
        else
        {
          v5 = 0;
        }
LABEL_17:
        re::AssetHandle::~AssetHandle((re::AssetHandle *)buf);
        break;
    }
  }
  else
  {
    if (CoreRELog::onceToken != -1)
      dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
    v4 = (id)CoreRELog::log;
    if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      _os_log_error_impl(&dword_224FE9000, v4, OS_LOG_TYPE_ERROR, "Can only get clip source from timeline clips.", buf, 2u);
    }

    return 0;
  }
  return v5;
}

uint64_t RETimelineDefinitionSetClipSource(uint64_t *a1, uint64_t a2, AssetService *a3)
{
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  void **var0;
  uint64_t v10;
  int v11;
  int v12;
  unsigned int v13;
  uint64_t v14;
  void **v16;
  uint64_t v17;
  NSObject *v18;
  unsigned int v20;
  unsigned int v21;
  unsigned int v22;
  unsigned int v23;
  unint64_t v24;
  BOOL v25;
  int v26;
  int v27;
  unint64_t v28;
  int v29;
  int v31;
  uint64_t *v32;
  void **v33;
  _QWORD v34[5];

  v34[4] = *MEMORY[0x24BDAC8D0];
  v6 = a1 + 6;
  v7 = a1[6];
  if (!v7)
  {
    v8 = re::AssetHandle::asset<re::TimelineAsset>((re::TimelineAsset *)(a1 + 3));
    if (v8)
      v7 = *(_QWORD *)(v8 + 8);
    else
      v7 = 0;
  }
  var0 = a3[6].var0;
  if (!var0)
  {
    v10 = re::AssetHandle::asset<re::TimelineAsset>((re::TimelineAsset *)&a3[3]);
    if (v10)
      var0 = *(void ***)(v10 + 8);
    else
      var0 = 0;
  }
  v11 = *(_DWORD *)(v7 + 8);
  switch(v11)
  {
    case 1:
      goto LABEL_39;
    case 2:
      goto LABEL_20;
    case 3:
      v12 = *((_DWORD *)var0 + 2) - 3;
      goto LABEL_33;
    case 4:
      v20 = *((_DWORD *)var0 + 2);
      v21 = v20 - 4;
      goto LABEL_30;
    case 5:
      v12 = *((_DWORD *)var0 + 2) - 5;
      goto LABEL_33;
    case 6:
      v12 = *((_DWORD *)var0 + 2) - 6;
      goto LABEL_33;
    case 7:
      v12 = *((_DWORD *)var0 + 2) - 7;
      goto LABEL_33;
    case 8:
      v20 = *((_DWORD *)var0 + 2);
      v21 = v20 - 8;
LABEL_30:
      v22 = __PAIR64__(v20, v21) >> 2;
      goto LABEL_34;
    case 9:
      HIDWORD(v24) = *((_DWORD *)var0 + 2) - 9;
      LODWORD(v24) = HIDWORD(v24);
      v23 = v24 >> 2;
      v25 = v23 > 9;
      v26 = 1 << v23;
      v27 = 725;
      goto LABEL_35;
    case 10:
      v12 = *((_DWORD *)var0 + 2) - 10;
LABEL_33:
      HIDWORD(v28) = v12;
      LODWORD(v28) = v12;
      v22 = v28 >> 2;
LABEL_34:
      v25 = v22 > 9;
      v26 = 1 << v22;
      v27 = 597;
LABEL_35:
      v29 = v26 & v27;
      if (!v25 && v29 != 0)
        goto LABEL_39;
      goto LABEL_17;
    default:
      if (v11 == 60)
      {
        v13 = *((_DWORD *)var0 + 2);
        v25 = v13 > 0x3D;
        v14 = (1 << v13) & 0x3804000000000000;
        if (v25 || v14 == 0)
        {
LABEL_17:
          createClipAssetData((uint64_t *)&v33, a2, a3);
          v16 = v33;
          v33 = 0;
          std::unique_ptr<re::RigHierarchy,std::function<void ()(re::RigHierarchy*)>>::reset[abi:nn180100](v6, (uint64_t)v16);
          std::__function::__value_func<void ()(re::RigHierarchy *)>::operator=[abi:nn180100](a1 + 7, (uint64_t)v34);
          v17 = a1[3];
          if (v17)
          {

            a1[3] = 0;
          }
          a1[4] = 0;
          std::unique_ptr<re::RigHierarchy,std::function<void ()(re::RigHierarchy*)>>::~unique_ptr[abi:nn180100]((uint64_t *)&v33);
        }
        else
        {
LABEL_39:
          v31 = *(_DWORD *)(v7 + 8);
          switch(v31)
          {
            case 1:
                              + 72);
              goto LABEL_41;
            case 2:
              goto LABEL_42;
            case 3:
            case 4:
            case 5:
            case 6:
            case 7:
            case 8:
            case 9:
            case 10:
              goto LABEL_40;
            default:
              if (v31 != 60)
                goto LABEL_42;
LABEL_40:
                              + 80);
LABEL_41:
              re::AssetHandle::operator=(v32, (uint64_t *)&v33);
LABEL_42:
              re::AssetHandle::~AssetHandle((re::AssetHandle *)&v33);
              break;
          }
        }
        return 1;
      }
      else
      {
LABEL_20:
        if (CoreRELog::onceToken != -1)
          dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
        v18 = (id)CoreRELog::log;
        if (os_log_type_enabled(v18, OS_LOG_TYPE_ERROR))
        {
          LOWORD(v33) = 0;
          _os_log_error_impl(&dword_224FE9000, v18, OS_LOG_TYPE_ERROR, "Can only set clip source of timeline clips.", (uint8_t *)&v33, 2u);
        }

        return 0;
      }
  }
}

uint64_t RETimelineDefinitionGetClipStart(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  int v3;
  NSObject *v4;
  uint64_t result;
  int v6;
  uint64_t v7;
  uint8_t v8[16];

  v1 = *(_QWORD *)(a1 + 48);
  if (!v1)
  {
    v2 = re::AssetHandle::asset<re::TimelineAsset>((re::TimelineAsset *)(a1 + 24));
    if (v2)
      v1 = *(_QWORD *)(v2 + 8);
    else
      v1 = 0;
  }
  v3 = *(_DWORD *)(v1 + 8);
  if (((0x10000000000007FAuLL >> v3) & 1) != 0)
  {
    result = 0;
    switch(v3)
    {
      case 1:
        v6 = *(unsigned __int8 *)(v1 + 96);
        v7 = v1 + 104;
        goto LABEL_13;
      case 2:
        return result;
      case 3:
      case 4:
      case 5:
      case 6:
      case 7:
      case 8:
      case 9:
      case 10:
        goto LABEL_12;
      default:
        if (v3 != 60)
          return result;
LABEL_12:
        v6 = *(unsigned __int8 *)(v1 + 104);
        v7 = v1 + 112;
LABEL_13:
        if (v6)
          result = v7;
        else
          result = 0;
        break;
    }
  }
  else
  {
    if (CoreRELog::onceToken != -1)
      dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
    v4 = (id)CoreRELog::log;
    if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)v8 = 0;
      _os_log_error_impl(&dword_224FE9000, v4, OS_LOG_TYPE_ERROR, "Can only get clip start for timeline clips.", v8, 2u);
    }

    return 0;
  }
  return result;
}

unint64_t RETimelineDefinitionSetClipStart(_anonymous_namespace_::TimelineDefinition *a1, uint64_t *a2)
{
  _anonymous_namespace_ *v3;
  int v4;
  unint64_t v5;
  uint64_t v6;
  NSObject *v7;
  uint64_t v9;
  uint8_t v10[16];

  v4 = *((_DWORD *)v3 + 2);
  v5 = 0x10000000000007FAuLL >> v4;
  if (((0x10000000000007FAuLL >> v4) & 1) != 0)
  {
    switch(v4)
    {
      case 1:
        if (a2)
        {
          v9 = *a2;
          if (!*((_BYTE *)v3 + 96))
            *((_BYTE *)v3 + 96) = 1;
          *((_QWORD *)v3 + 13) = v9;
        }
        else if (*((_BYTE *)v3 + 96))
        {
          *((_BYTE *)v3 + 96) = 0;
        }
        break;
      case 2:
        return v5 & 1;
      case 3:
      case 4:
      case 5:
      case 6:
      case 7:
      case 8:
      case 9:
      case 10:
        goto LABEL_3;
      default:
        if (v4 == 60)
        {
LABEL_3:
          if (a2)
          {
            v6 = *a2;
            if (!*((_BYTE *)v3 + 104))
              *((_BYTE *)v3 + 104) = 1;
            *((_QWORD *)v3 + 14) = v6;
          }
          else if (*((_BYTE *)v3 + 104))
          {
            *((_BYTE *)v3 + 104) = 0;
          }
        }
        break;
    }
  }
  else
  {
    if (CoreRELog::onceToken != -1)
      dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
    v7 = (id)CoreRELog::log;
    if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)v10 = 0;
      _os_log_error_impl(&dword_224FE9000, v7, OS_LOG_TYPE_ERROR, "Can only set clip start for timeline clips.", v10, 2u);
    }

  }
  return v5 & 1;
}

uint64_t RETimelineDefinitionGetClipEnd(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  int v3;
  NSObject *v4;
  uint64_t result;
  int v6;
  uint64_t v7;
  uint8_t v8[16];

  v1 = *(_QWORD *)(a1 + 48);
  if (!v1)
  {
    v2 = re::AssetHandle::asset<re::TimelineAsset>((re::TimelineAsset *)(a1 + 24));
    if (v2)
      v1 = *(_QWORD *)(v2 + 8);
    else
      v1 = 0;
  }
  v3 = *(_DWORD *)(v1 + 8);
  if (((0x10000000000007FAuLL >> v3) & 1) != 0)
  {
    result = 0;
    switch(v3)
    {
      case 1:
        v6 = *(unsigned __int8 *)(v1 + 112);
        v7 = v1 + 120;
        goto LABEL_13;
      case 2:
        return result;
      case 3:
      case 4:
      case 5:
      case 6:
      case 7:
      case 8:
      case 9:
      case 10:
        goto LABEL_12;
      default:
        if (v3 != 60)
          return result;
LABEL_12:
        v6 = *(unsigned __int8 *)(v1 + 120);
        v7 = v1 + 128;
LABEL_13:
        if (v6)
          result = v7;
        else
          result = 0;
        break;
    }
  }
  else
  {
    if (CoreRELog::onceToken != -1)
      dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
    v4 = (id)CoreRELog::log;
    if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)v8 = 0;
      _os_log_error_impl(&dword_224FE9000, v4, OS_LOG_TYPE_ERROR, "Can only get clip end for timeline clips.", v8, 2u);
    }

    return 0;
  }
  return result;
}

unint64_t RETimelineDefinitionSetClipEnd(_anonymous_namespace_::TimelineDefinition *a1, uint64_t *a2)
{
  _anonymous_namespace_ *v3;
  int v4;
  unint64_t v5;
  uint64_t v6;
  NSObject *v7;
  uint64_t v9;
  uint8_t v10[16];

  v4 = *((_DWORD *)v3 + 2);
  v5 = 0x10000000000007FAuLL >> v4;
  if (((0x10000000000007FAuLL >> v4) & 1) != 0)
  {
    switch(v4)
    {
      case 1:
        if (a2)
        {
          v9 = *a2;
          if (!*((_BYTE *)v3 + 112))
            *((_BYTE *)v3 + 112) = 1;
          *((_QWORD *)v3 + 15) = v9;
        }
        else if (*((_BYTE *)v3 + 112))
        {
          *((_BYTE *)v3 + 112) = 0;
        }
        break;
      case 2:
        return v5 & 1;
      case 3:
      case 4:
      case 5:
      case 6:
      case 7:
      case 8:
      case 9:
      case 10:
        goto LABEL_3;
      default:
        if (v4 == 60)
        {
LABEL_3:
          if (a2)
          {
            v6 = *a2;
            if (!*((_BYTE *)v3 + 120))
              *((_BYTE *)v3 + 120) = 1;
            *((_QWORD *)v3 + 16) = v6;
          }
          else if (*((_BYTE *)v3 + 120))
          {
            *((_BYTE *)v3 + 120) = 0;
          }
        }
        break;
    }
  }
  else
  {
    if (CoreRELog::onceToken != -1)
      dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
    v7 = (id)CoreRELog::log;
    if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)v10 = 0;
      _os_log_error_impl(&dword_224FE9000, v7, OS_LOG_TYPE_ERROR, "Can only set clip end for timeline clips.", v10, 2u);
    }

  }
  return v5 & 1;
}

double RETimelineDefinitionGetClipOffset(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  int v3;
  NSObject *v4;
  double result;
  uint8_t v6[16];

  v1 = *(_QWORD *)(a1 + 48);
  if (!v1)
  {
    v2 = re::AssetHandle::asset<re::TimelineAsset>((re::TimelineAsset *)(a1 + 24));
    if (v2)
      v1 = *(_QWORD *)(v2 + 8);
    else
      v1 = 0;
  }
  v3 = *(_DWORD *)(v1 + 8);
  if (((0x10000000000007FAuLL >> v3) & 1) != 0)
  {
    result = 0.0;
    switch(v3)
    {
      case 1:
        result = *(double *)(v1 + 128);
        break;
      case 2:
        return result;
      case 3:
      case 4:
      case 5:
      case 6:
      case 7:
      case 8:
      case 9:
      case 10:
        goto LABEL_12;
      default:
        if (v3 == 60)
LABEL_12:
          result = *(double *)(v1 + 136);
        break;
    }
  }
  else
  {
    if (CoreRELog::onceToken != -1)
      dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
    v4 = (id)CoreRELog::log;
    if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)v6 = 0;
      _os_log_error_impl(&dword_224FE9000, v4, OS_LOG_TYPE_ERROR, "Can only get clip offset for timeline clips.", v6, 2u);
    }

    return NAN;
  }
  return result;
}

unint64_t RETimelineDefinitionSetClipOffset(_anonymous_namespace_::TimelineDefinition *a1, double a2)
{
  _anonymous_namespace_ *v3;
  int v4;
  unint64_t v5;
  NSObject *v6;
  uint8_t v8[16];

  v4 = *((_DWORD *)v3 + 2);
  v5 = 0x10000000000007FAuLL >> v4;
  if (((0x10000000000007FAuLL >> v4) & 1) != 0)
  {
    switch(v4)
    {
      case 1:
        *((double *)v3 + 16) = a2;
        break;
      case 2:
        return v5 & 1;
      case 3:
      case 4:
      case 5:
      case 6:
      case 7:
      case 8:
      case 9:
      case 10:
        goto LABEL_3;
      default:
        if (v4 == 60)
LABEL_3:
          *((double *)v3 + 17) = a2;
        break;
    }
  }
  else
  {
    if (CoreRELog::onceToken != -1)
      dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
    v6 = (id)CoreRELog::log;
    if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)v8 = 0;
      _os_log_error_impl(&dword_224FE9000, v6, OS_LOG_TYPE_ERROR, "Can only set clip offset for timeline clips.", v8, 2u);
    }

  }
  return v5 & 1;
}

double RETimelineDefinitionGetClipDelay(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  int v3;
  NSObject *v4;
  double result;
  uint8_t v6[16];

  v1 = *(_QWORD *)(a1 + 48);
  if (!v1)
  {
    v2 = re::AssetHandle::asset<re::TimelineAsset>((re::TimelineAsset *)(a1 + 24));
    if (v2)
      v1 = *(_QWORD *)(v2 + 8);
    else
      v1 = 0;
  }
  v3 = *(_DWORD *)(v1 + 8);
  if (((0x10000000000007FAuLL >> v3) & 1) != 0)
  {
    result = 0.0;
    switch(v3)
    {
      case 1:
        result = *(double *)(v1 + 144);
        break;
      case 2:
        return result;
      case 3:
      case 4:
      case 5:
      case 6:
      case 7:
      case 8:
      case 9:
      case 10:
        goto LABEL_12;
      default:
        if (v3 == 60)
LABEL_12:
          result = *(double *)(v1 + 152);
        break;
    }
  }
  else
  {
    if (CoreRELog::onceToken != -1)
      dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
    v4 = (id)CoreRELog::log;
    if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)v6 = 0;
      _os_log_error_impl(&dword_224FE9000, v4, OS_LOG_TYPE_ERROR, "Can only get clip delay for timeline clips.", v6, 2u);
    }

    return NAN;
  }
  return result;
}

unint64_t RETimelineDefinitionSetClipDelay(_anonymous_namespace_::TimelineDefinition *a1, double a2)
{
  _anonymous_namespace_ *v3;
  int v4;
  unint64_t v5;
  NSObject *v6;
  uint8_t v8[16];

  v4 = *((_DWORD *)v3 + 2);
  v5 = 0x10000000000007FAuLL >> v4;
  if (((0x10000000000007FAuLL >> v4) & 1) != 0)
  {
    switch(v4)
    {
      case 1:
        *((double *)v3 + 18) = a2;
        break;
      case 2:
        return v5 & 1;
      case 3:
      case 4:
      case 5:
      case 6:
      case 7:
      case 8:
      case 9:
      case 10:
        goto LABEL_3;
      default:
        if (v4 == 60)
LABEL_3:
          *((double *)v3 + 19) = a2;
        break;
    }
  }
  else
  {
    if (CoreRELog::onceToken != -1)
      dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
    v6 = (id)CoreRELog::log;
    if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)v8 = 0;
      _os_log_error_impl(&dword_224FE9000, v6, OS_LOG_TYPE_ERROR, "Can only set clip delay for timeline clips.", v8, 2u);
    }

  }
  return v5 & 1;
}

uint64_t RETimelineDefinitionGetClipDuration(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  int v3;
  NSObject *v4;
  uint64_t result;
  int v6;
  uint64_t v7;
  uint8_t v8[16];

  v1 = *(_QWORD *)(a1 + 48);
  if (!v1)
  {
    v2 = re::AssetHandle::asset<re::TimelineAsset>((re::TimelineAsset *)(a1 + 24));
    if (v2)
      v1 = *(_QWORD *)(v2 + 8);
    else
      v1 = 0;
  }
  v3 = *(_DWORD *)(v1 + 8);
  if (((0x10000000000007FAuLL >> v3) & 1) != 0)
  {
    result = 0;
    switch(v3)
    {
      case 1:
        v6 = *(unsigned __int8 *)(v1 + 152);
        v7 = v1 + 160;
        goto LABEL_13;
      case 2:
        return result;
      case 3:
      case 4:
      case 5:
      case 6:
      case 7:
      case 8:
      case 9:
      case 10:
        goto LABEL_12;
      default:
        if (v3 != 60)
          return result;
LABEL_12:
        v6 = *(unsigned __int8 *)(v1 + 160);
        v7 = v1 + 168;
LABEL_13:
        if (v6)
          result = v7;
        else
          result = 0;
        break;
    }
  }
  else
  {
    if (CoreRELog::onceToken != -1)
      dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
    v4 = (id)CoreRELog::log;
    if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)v8 = 0;
      _os_log_error_impl(&dword_224FE9000, v4, OS_LOG_TYPE_ERROR, "Can only get clip duration for timeline clips.", v8, 2u);
    }

    return 0;
  }
  return result;
}

unint64_t RETimelineDefinitionSetClipDuration(_anonymous_namespace_::TimelineDefinition *a1, uint64_t *a2)
{
  _anonymous_namespace_ *v3;
  int v4;
  unint64_t v5;
  uint64_t v6;
  NSObject *v7;
  uint64_t v9;
  uint8_t v10[16];

  v4 = *((_DWORD *)v3 + 2);
  v5 = 0x10000000000007FAuLL >> v4;
  if (((0x10000000000007FAuLL >> v4) & 1) != 0)
  {
    switch(v4)
    {
      case 1:
        if (a2)
        {
          v9 = *a2;
          if (!*((_BYTE *)v3 + 152))
            *((_BYTE *)v3 + 152) = 1;
          *((_QWORD *)v3 + 20) = v9;
        }
        else if (*((_BYTE *)v3 + 152))
        {
          *((_BYTE *)v3 + 152) = 0;
        }
        break;
      case 2:
        return v5 & 1;
      case 3:
      case 4:
      case 5:
      case 6:
      case 7:
      case 8:
      case 9:
      case 10:
        goto LABEL_3;
      default:
        if (v4 == 60)
        {
LABEL_3:
          if (a2)
          {
            v6 = *a2;
            if (!*((_BYTE *)v3 + 160))
              *((_BYTE *)v3 + 160) = 1;
            *((_QWORD *)v3 + 21) = v6;
          }
          else if (*((_BYTE *)v3 + 160))
          {
            *((_BYTE *)v3 + 160) = 0;
          }
        }
        break;
    }
  }
  else
  {
    if (CoreRELog::onceToken != -1)
      dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
    v7 = (id)CoreRELog::log;
    if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)v10 = 0;
      _os_log_error_impl(&dword_224FE9000, v7, OS_LOG_TYPE_ERROR, "Can only set clip duration for timeline clips.", v10, 2u);
    }

  }
  return v5 & 1;
}

float RETimelineDefinitionGetClipSpeed(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  int v3;
  NSObject *v4;
  float result;
  float *v6;
  _BYTE *v7;
  uint8_t v8[16];

  v1 = *(_QWORD *)(a1 + 48);
  if (!v1)
  {
    v2 = re::AssetHandle::asset<re::TimelineAsset>((re::TimelineAsset *)(a1 + 24));
    if (v2)
      v1 = *(_QWORD *)(v2 + 8);
    else
      v1 = 0;
  }
  v3 = *(_DWORD *)(v1 + 8);
  if (((0x10000000000007FAuLL >> v3) & 1) != 0)
  {
    result = 0.0;
    switch(v3)
    {
      case 1:
        v6 = (float *)(v1 + 168);
        v7 = (_BYTE *)(v1 + 136);
        goto LABEL_13;
      case 2:
        return result;
      case 3:
      case 4:
      case 5:
      case 6:
      case 7:
      case 8:
      case 9:
      case 10:
        goto LABEL_12;
      default:
        if (v3 != 60)
          return result;
LABEL_12:
        v6 = (float *)(v1 + 176);
        v7 = (_BYTE *)(v1 + 144);
LABEL_13:
        result = *v6;
        if (*v7)
          result = -result;
        break;
    }
  }
  else
  {
    if (CoreRELog::onceToken != -1)
      dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
    v4 = (id)CoreRELog::log;
    if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)v8 = 0;
      _os_log_error_impl(&dword_224FE9000, v4, OS_LOG_TYPE_ERROR, "Can only get clip speed for timeline clips.", v8, 2u);
    }

    return NAN;
  }
  return result;
}

unint64_t RETimelineDefinitionSetClipSpeed(_anonymous_namespace_::TimelineDefinition *a1, float a2)
{
  _anonymous_namespace_ *v3;
  int v4;
  unint64_t v5;
  float v6;
  NSObject *v7;
  float v9;
  uint8_t v10[16];

  v4 = *((_DWORD *)v3 + 2);
  v5 = 0x10000000000007FAuLL >> v4;
  if (((0x10000000000007FAuLL >> v4) & 1) != 0)
  {
    switch(v4)
    {
      case 1:
        v9 = -a2;
        if (!*((_BYTE *)v3 + 136))
          v9 = a2;
        *((float *)v3 + 42) = v9;
        break;
      case 2:
        return v5 & 1;
      case 3:
      case 4:
      case 5:
      case 6:
      case 7:
      case 8:
      case 9:
      case 10:
        goto LABEL_3;
      default:
        if (v4 == 60)
        {
LABEL_3:
          v6 = -a2;
          if (!*((_BYTE *)v3 + 144))
            v6 = a2;
          *((float *)v3 + 44) = v6;
        }
        break;
    }
  }
  else
  {
    if (CoreRELog::onceToken != -1)
      dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
    v7 = (id)CoreRELog::log;
    if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)v10 = 0;
      _os_log_error_impl(&dword_224FE9000, v7, OS_LOG_TYPE_ERROR, "Can only set clip speed for timeline clips.", v10, 2u);
    }

  }
  return v5 & 1;
}

uint64_t RETimelineDefinitionGetClipLoopBehavior(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  int v3;
  NSObject *v4;
  char v5;
  uint8_t v7[16];

  v1 = *(_QWORD *)(a1 + 48);
  if (!v1)
  {
    v2 = re::AssetHandle::asset<re::TimelineAsset>((re::TimelineAsset *)(a1 + 24));
    if (v2)
      v1 = *(_QWORD *)(v2 + 8);
    else
      v1 = 0;
  }
  v3 = *(_DWORD *)(v1 + 8);
  if (((0x10000000000007FAuLL >> v3) & 1) != 0)
  {
    v5 = -1;
    switch(v3)
    {
      case 1:
        v5 = *(_BYTE *)(v1 + 172);
        break;
      case 2:
        return v5;
      case 3:
      case 4:
      case 5:
      case 6:
      case 7:
      case 8:
      case 9:
      case 10:
        goto LABEL_12;
      default:
        if (v3 == 60)
LABEL_12:
          v5 = *(_BYTE *)(v1 + 180);
        break;
    }
  }
  else
  {
    if (CoreRELog::onceToken != -1)
      dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
    v4 = (id)CoreRELog::log;
    if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)v7 = 0;
      _os_log_error_impl(&dword_224FE9000, v4, OS_LOG_TYPE_ERROR, "Can only get clip loop behavior for timeline clips.", v7, 2u);
    }

    return -1;
  }
  return v5;
}

unint64_t RETimelineDefinitionSetClipLoopBehavior(_anonymous_namespace_::TimelineDefinition *a1, char a2)
{
  _anonymous_namespace_ *v3;
  int v4;
  unint64_t v5;
  NSObject *v6;
  uint8_t v8[16];

  v4 = *((_DWORD *)v3 + 2);
  v5 = 0x10000000000007FAuLL >> v4;
  if (((0x10000000000007FAuLL >> v4) & 1) != 0)
  {
    switch(v4)
    {
      case 1:
        *((_BYTE *)v3 + 172) = a2;
        break;
      case 2:
        return v5 & 1;
      case 3:
      case 4:
      case 5:
      case 6:
      case 7:
      case 8:
      case 9:
      case 10:
        goto LABEL_3;
      default:
        if (v4 == 60)
LABEL_3:
          *((_BYTE *)v3 + 180) = a2;
        break;
    }
  }
  else
  {
    if (CoreRELog::onceToken != -1)
      dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
    v6 = (id)CoreRELog::log;
    if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)v8 = 0;
      _os_log_error_impl(&dword_224FE9000, v6, OS_LOG_TYPE_ERROR, "Can only set clip loop behavior for timeline clips.", v8, 2u);
    }

  }
  return v5 & 1;
}

_anonymous_namespace_::TimelineDefinition *RETimelineDefinitionCreateTimelineGroup(re *a1)
{
  uint64_t *v2;
  uint64_t v3;
  re *v4;
  uint64_t *v5;
  _anonymous_namespace_::TimelineDefinition *v6;
  _QWORD *v7;
  uint64_t v8;
  _QWORD v10[3];
  _QWORD *v11;
  uint64_t v12;
  _QWORD v13[5];

  v13[4] = *MEMORY[0x24BDAC8D0];
  v2 = re::globalAllocators(a1);
  v3 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v2[2] + 32))(v2[2], 112, 8);
  *(_QWORD *)v3 = off_24ED36578;
  *(_QWORD *)(v3 + 8) = 2;
  *(_BYTE *)(v3 + 16) = 0;
  *(_QWORD *)(v3 + 24) = 0;
  *(_QWORD *)(v3 + 32) = &str_110;
  *(_QWORD *)v3 = off_24ED31B68;
  *(_QWORD *)(v3 + 104) = 0;
  *(_QWORD *)(v3 + 80) = 0;
  *(_QWORD *)(v3 + 88) = 0;
  *(_QWORD *)(v3 + 72) = 0;
  *(_DWORD *)(v3 + 96) = 0;
  v13[3] = v13;
  v10[0] = &off_24ED9A4D8;
  v11 = v10;
  v12 = v3;
  v13[0] = &off_24ED9A4D8;
  v5 = re::globalAllocators(v4);
  v6 = (_anonymous_namespace_::TimelineDefinition *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v5[2] + 32))(v5[2], 112, 8);
  std::unique_ptr<re::RigHierarchy,std::function<void ()(re::RigHierarchy*)>>::~unique_ptr[abi:nn180100](&v12);
  v7 = v11;
  if (v11 == v10)
  {
    v8 = 4;
    v7 = v10;
    goto LABEL_5;
  }
  if (v11)
  {
    v8 = 5;
LABEL_5:
    (*(void (**)(void))(*v7 + 8 * v8))();
  }
  return v6;
}

uint64_t RETimelineDefinitionGetChildrenTimelineCount(uint64_t a1)
{
  uint64_t v1;
  NSObject *v3;
  uint8_t v4[16];

  v1 = *(_QWORD *)(a1 + 48);
  if (!v1)
    v1 = *(_QWORD *)(re::AssetHandle::asset<re::TimelineAsset>((re::TimelineAsset *)(a1 + 24)) + 8);
  if (*(_DWORD *)(v1 + 8) == 2)
    return *(_QWORD *)(v1 + 88);
  if (CoreRELog::onceToken != -1)
    dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
  v3 = (id)CoreRELog::log;
  if (os_log_type_enabled(v3, OS_LOG_TYPE_ERROR))
  {
    *(_WORD *)v4 = 0;
    _os_log_error_impl(&dword_224FE9000, v3, OS_LOG_TYPE_ERROR, "Can only get children count for timeline groups.", v4, 2u);
  }

  return 0;
}

BOOL RETimelineDefinitionSetChildrenTimelineCount(_anonymous_namespace_::TimelineDefinition *a1, unint64_t a2)
{
  _anonymous_namespace_ *v3;
  int v4;
  NSObject *v5;
  uint8_t v7[16];

  v4 = *((_DWORD *)v3 + 2);
  if (v4 == 2)
  {
    re::DynamicArray<re::AssetHandle>::resize((uint64_t)v3 + 72, a2);
  }
  else
  {
    if (CoreRELog::onceToken != -1)
      dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
    v5 = (id)CoreRELog::log;
    if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)v7 = 0;
      _os_log_error_impl(&dword_224FE9000, v5, OS_LOG_TYPE_ERROR, "Can only set children count for timeline groups.", v7, 2u);
    }

  }
  return v4 == 2;
}

uint64_t RETimelineDefinitionCreateChildTimelineRef(_QWORD *a1, unint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  unsigned int v5;
  const re::AssetHandle *v6;
  uint64_t *v7;
  uint64_t v8;
  NSObject *v9;
  NSObject *v10;
  const char *v12;
  uint64_t v13;
  _OWORD buf[5];
  uint64_t v15;

  v15 = *MEMORY[0x24BDAC8D0];
  v3 = a1[6];
  if (!v3)
  {
    a1 = (_QWORD *)re::AssetHandle::asset<re::TimelineAsset>((re::TimelineAsset *)(a1 + 3));
    v3 = a1[1];
  }
  if (*(_DWORD *)(v3 + 8) != 2)
  {
    if (CoreRELog::onceToken != -1)
      dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
    v9 = (id)CoreRELog::log;
    if (!os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
      goto LABEL_12;
    LOWORD(buf[0]) = 0;
    v12 = "Can only set children count for timeline groups.";
    goto LABEL_28;
  }
  if (*(_QWORD *)(v3 + 88) <= a2)
  {
    if (CoreRELog::onceToken != -1)
      dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
    v10 = (id)CoreRELog::log;
    if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
    {
      v13 = *(_QWORD *)(v3 + 88);
      LODWORD(buf[0]) = 134218240;
      *(_QWORD *)((char *)buf + 4) = a2;
      WORD6(buf[0]) = 2048;
      *(_QWORD *)((char *)buf + 14) = v13;
      _os_log_error_impl(&dword_224FE9000, v10, OS_LOG_TYPE_ERROR, "Timeline group child index (%zu) does not exist, children count: %zu", (uint8_t *)buf, 0x16u);
    }

    return 0;
  }
  v4 = *(_QWORD *)(*(_QWORD *)(v3 + 104) + 24 * a2 + 8);
  if (!v4)
  {
    if (CoreRELog::onceToken != -1)
      dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
    v9 = (id)CoreRELog::log;
    if (!os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
      goto LABEL_12;
    LOWORD(buf[0]) = 0;
    v12 = "Timeline child is not valid.";
    goto LABEL_28;
  }
  v5 = atomic_load((unsigned int *)(v4 + 704));
  if (v5 != 2)
  {
    if (CoreRELog::onceToken == -1)
    {
LABEL_25:
      v9 = (id)CoreRELog::log;
      if (!os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
      {
LABEL_12:

        return 0;
      }
      LOWORD(buf[0]) = 0;
      v12 = "Timeline child is not loaded.";
LABEL_28:
      _os_log_error_impl(&dword_224FE9000, v9, OS_LOG_TYPE_ERROR, v12, (uint8_t *)buf, 2u);
      goto LABEL_12;
    }
LABEL_30:
    dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
    goto LABEL_25;
  }
  if (*(_QWORD *)(v3 + 88) <= a2)
  {
    memset(buf, 0, sizeof(buf));
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
    goto LABEL_30;
  }
  v6 = (const re::AssetHandle *)(*(_QWORD *)(v3 + 104) + 24 * a2);
  v7 = re::globalAllocators((re *)a1);
  v8 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v7[2] + 32))(v7[2], 112, 8);
  re::AssetHandle::AssetHandle((re::AssetHandle *)buf, v6);
  re::AssetHandle::~AssetHandle((re::AssetHandle *)buf);
  return v8;
}

uint64_t RETimelineDefinitionSetChildTimeline(_anonymous_namespace_::TimelineDefinition *a1, uint64_t a2, AssetService *a3, unint64_t a4)
{
  _anonymous_namespace_ *v7;
  _anonymous_namespace_ *v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void **v12;
  uint64_t v13;
  NSObject *v15;
  NSObject *v16;
  uint64_t v17;
  void **v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  const char *v23;
  __int16 v24;
  int v25;
  __int16 v26;
  unint64_t v27;
  __int16 v28;
  unint64_t v29;
  _OWORD buf[5];
  uint64_t v31;

  v31 = *MEMORY[0x24BDAC8D0];
  if (*((_DWORD *)v7 + 2) != 2)
  {
    if (CoreRELog::onceToken != -1)
      dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
    v15 = (id)CoreRELog::log;
    if (os_log_type_enabled(v15, OS_LOG_TYPE_ERROR))
    {
      LOWORD(buf[0]) = 0;
      _os_log_error_impl(&dword_224FE9000, v15, OS_LOG_TYPE_ERROR, "Can only set children count for timeline groups.", (uint8_t *)buf, 2u);
    }

    return 0;
  }
  v8 = v7;
  if (*((_QWORD *)v7 + 11) > a4)
  {
    v9 = *((_QWORD *)v8 + 11);
    if (v9 > a4)
    {
      v10 = *((_QWORD *)v8 + 13) + 24 * a4;
      v11 = *(_QWORD *)(v10 + 8);
      *(_QWORD *)(v10 + 8) = v19;
      v19 = v11;
      v12 = *(void ***)v10;
      *(_QWORD *)v10 = 0;
      *(_QWORD *)v10 = v18;
      v18 = v12;
      v13 = *(_QWORD *)(v10 + 16);
      *(_QWORD *)(v10 + 16) = v20;
      v20 = v13;
      re::AssetHandle::~AssetHandle((re::AssetHandle *)&v18);
      return 1;
    }
    v21 = 0;
    memset(buf, 0, sizeof(buf));
    v8 = (_anonymous_namespace_ *)MEMORY[0x24BDACB70];
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    v22 = 136315906;
    v23 = "operator[]";
    v24 = 1024;
    v25 = 789;
    v26 = 2048;
    v27 = a4;
    v28 = 2048;
    v29 = v9;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
    goto LABEL_16;
  }
  if (CoreRELog::onceToken != -1)
LABEL_16:
    dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
  v16 = (id)CoreRELog::log;
  if (os_log_type_enabled(v16, OS_LOG_TYPE_ERROR))
  {
    v17 = *((_QWORD *)v8 + 11);
    LODWORD(buf[0]) = 134218240;
    *(_QWORD *)((char *)buf + 4) = a4;
    WORD6(buf[0]) = 2048;
    *(_QWORD *)((char *)buf + 14) = v17;
    _os_log_error_impl(&dword_224FE9000, v16, OS_LOG_TYPE_ERROR, "Timeline group child index (%zu) does not exist, children count: %zu", (uint8_t *)buf, 0x16u);
  }

  return 0;
}

BOOL RETimelineDefinitionAddChildTimeline(_anonymous_namespace_::TimelineDefinition *a1, uint64_t a2, AssetService *a3)
{
  _anonymous_namespace_ *v5;
  int v6;
  _QWORD *v7;
  NSObject *v8;
  void **v10[4];

  v6 = *((_DWORD *)v5 + 2);
  if (v6 == 2)
  {
    v7 = (_QWORD *)((char *)v5 + 72);
    re::DynamicArray<re::AssetHandle>::add(v7, (uint64_t *)v10);
    re::AssetHandle::~AssetHandle((re::AssetHandle *)v10);
  }
  else
  {
    if (CoreRELog::onceToken != -1)
      dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
    v8 = (id)CoreRELog::log;
    if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
    {
      LOWORD(v10[0]) = 0;
      _os_log_error_impl(&dword_224FE9000, v8, OS_LOG_TYPE_ERROR, "Can only add children for timeline groups.", (uint8_t *)v10, 2u);
    }

  }
  return v6 == 2;
}

uint64_t RETimelineDefinitionInsertChildTimeline(_anonymous_namespace_::TimelineDefinition *a1, uint64_t a2, AssetService *a3, unint64_t a4)
{
  _anonymous_namespace_ *v7;
  _anonymous_namespace_ *v8;
  NSObject *v9;
  NSObject *v10;
  uint64_t v12;
  int v13;
  unint64_t v14;
  __int16 v15;
  uint64_t v16;
  uint64_t v17;

  v17 = *MEMORY[0x24BDAC8D0];
  if (*((_DWORD *)v7 + 2) != 2)
  {
    if (CoreRELog::onceToken != -1)
      dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
    v10 = (id)CoreRELog::log;
    if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
    {
      LOWORD(v13) = 0;
      _os_log_error_impl(&dword_224FE9000, v10, OS_LOG_TYPE_ERROR, "Can only insert children for timeline groups.", (uint8_t *)&v13, 2u);
    }

    return 0;
  }
  v8 = v7;
  if (*((_QWORD *)v7 + 11) < a4)
  {
    if (CoreRELog::onceToken != -1)
      dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
    v9 = (id)CoreRELog::log;
    if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
    {
      v12 = *((_QWORD *)v8 + 11);
      v13 = 134218240;
      v14 = a4;
      v15 = 2048;
      v16 = v12;
      _os_log_error_impl(&dword_224FE9000, v9, OS_LOG_TYPE_ERROR, "Cannot insert child index (%zu), children count: %zu", (uint8_t *)&v13, 0x16u);
    }

    return 0;
  }
  re::DynamicArray<re::AssetHandle>::insert((_QWORD *)v8 + 9, a4, (uint64_t *)&v13);
  re::AssetHandle::~AssetHandle((re::AssetHandle *)&v13);
  return 1;
}

uint64_t RETimelineDefinitionRemoveChildTimeline(_anonymous_namespace_::TimelineDefinition *a1, unint64_t a2)
{
  _anonymous_namespace_ *v3;
  _anonymous_namespace_ *v4;
  NSObject *v6;
  NSObject *v7;
  uint64_t v8;
  int v9;
  unint64_t v10;
  __int16 v11;
  uint64_t v12;
  uint64_t v13;

  v13 = *MEMORY[0x24BDAC8D0];
  if (*((_DWORD *)v3 + 2) == 2)
  {
    v4 = v3;
    if (*((_QWORD *)v3 + 11) > a2)
    {
      re::DynamicArray<re::AssetHandle>::removeStableAt((uint64_t)v3 + 72, a2);
      return 1;
    }
    if (CoreRELog::onceToken != -1)
      dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
    v7 = (id)CoreRELog::log;
    if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
    {
      v8 = *((_QWORD *)v4 + 11);
      v9 = 134218240;
      v10 = a2;
      v11 = 2048;
      v12 = v8;
      _os_log_error_impl(&dword_224FE9000, v7, OS_LOG_TYPE_ERROR, "Timeline group child index (%zu) does not exist, children count: %zu", (uint8_t *)&v9, 0x16u);
    }

  }
  else
  {
    if (CoreRELog::onceToken != -1)
      dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
    v6 = (id)CoreRELog::log;
    if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
    {
      LOWORD(v9) = 0;
      _os_log_error_impl(&dword_224FE9000, v6, OS_LOG_TYPE_ERROR, "Can only remove children from timeline groups.", (uint8_t *)&v9, 2u);
    }

  }
  return 0;
}

_anonymous_namespace_::TimelineDefinition *RETimelineDefinitionCreateOrbitAnimation(re *a1)
{
  uint64_t *v2;
  uint64_t v3;
  re *v4;
  uint64_t *v5;
  _anonymous_namespace_::TimelineDefinition *v6;
  _QWORD *v7;
  uint64_t v8;
  _QWORD v10[3];
  _QWORD *v11;
  uint64_t v12;
  _QWORD v13[5];

  v13[4] = *MEMORY[0x24BDAC8D0];
  v2 = re::globalAllocators(a1);
  v3 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v2[2] + 32))(v2[2], 160, 16);
  *(_QWORD *)v3 = off_24ED36578;
  *(_QWORD *)(v3 + 8) = 37;
  *(_BYTE *)(v3 + 16) = 0;
  *(_QWORD *)(v3 + 24) = 0;
  *(_QWORD *)(v3 + 32) = &str_110;
  *(_BYTE *)(v3 + 72) = 0;
  *(_QWORD *)v3 = off_24ED33C08;
  *(_DWORD *)(v3 + 76) = 1065353216;
  *(_OWORD *)(v3 + 80) = xmmword_2260E5F20;
  *(_QWORD *)(v3 + 96) = 0x3F8000003F800000;
  *(_QWORD *)(v3 + 104) = 1065353216;
  *(_QWORD *)(v3 + 112) = 0;
  *(_QWORD *)(v3 + 120) = 0x3F80000000000000;
  *(_QWORD *)(v3 + 128) = 0;
  *(_QWORD *)(v3 + 136) = 0;
  *(_WORD *)(v3 + 144) = 1;
  *(_DWORD *)(v3 + 148) = 1065353216;
  v13[3] = v13;
  v10[0] = &off_24ED9A558;
  v11 = v10;
  v12 = v3;
  v13[0] = &off_24ED9A558;
  v5 = re::globalAllocators(v4);
  v6 = (_anonymous_namespace_::TimelineDefinition *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v5[2] + 32))(v5[2], 112, 8);
  std::unique_ptr<re::RigHierarchy,std::function<void ()(re::RigHierarchy*)>>::~unique_ptr[abi:nn180100](&v12);
  v7 = v11;
  if (v11 == v10)
  {
    v8 = 4;
    v7 = v10;
    goto LABEL_5;
  }
  if (v11)
  {
    v8 = 5;
LABEL_5:
    (*(void (**)(void))(*v7 + 8 * v8))();
  }
  return v6;
}

double RETimelineDefinitionGetAxis(uint64_t a1)
{
  uint64_t v1;
  __int128 v2;
  NSObject *v3;
  uint8_t v5[16];

  v1 = *(_QWORD *)(a1 + 48);
  if (!v1)
    v1 = *(_QWORD *)(re::AssetHandle::asset<re::TimelineAsset>((re::TimelineAsset *)(a1 + 24)) + 8);
  if (*(_DWORD *)(v1 + 8) == 37)
  {
    v2 = *(_OWORD *)(v1 + 80);
  }
  else
  {
    if (CoreRELog::onceToken != -1)
      dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
    v3 = (id)CoreRELog::log;
    if (os_log_type_enabled(v3, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)v5 = 0;
      _os_log_error_impl(&dword_224FE9000, v3, OS_LOG_TYPE_ERROR, "Can only get axis for orbit animations.", v5, 2u);
    }

    *(_QWORD *)&v2 = vdupq_n_s32(0x7FC00000u).u64[0];
  }
  return *(double *)&v2;
}

BOOL RETimelineDefinitionSetAxis(_anonymous_namespace_::TimelineDefinition *a1, __n128 a2)
{
  __n128 *v2;
  unsigned __int32 v3;
  NSObject *v4;
  uint8_t buf[16];

  v3 = v2->n128_u32[2];
  if (v3 == 37)
  {
    v2[5] = a2;
  }
  else
  {
    if (CoreRELog::onceToken != -1)
      dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
    v4 = (id)CoreRELog::log;
    if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      _os_log_error_impl(&dword_224FE9000, v4, OS_LOG_TYPE_ERROR, "Can only set axis for orbit animations.", buf, 2u);
    }

  }
  return v3 == 37;
}

double RETimelineDefinitionGetStartTransform(uint64_t a1)
{
  uint64_t v1;
  __int128 v2;
  NSObject *v3;
  uint8_t v5[16];

  v1 = *(_QWORD *)(a1 + 48);
  if (!v1)
    v1 = *(_QWORD *)(re::AssetHandle::asset<re::TimelineAsset>((re::TimelineAsset *)(a1 + 24)) + 8);
  if (*(_DWORD *)(v1 + 8) == 37)
  {
    v2 = *(_OWORD *)(v1 + 96);
  }
  else
  {
    if (CoreRELog::onceToken != -1)
      dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
    v3 = (id)CoreRELog::log;
    if (os_log_type_enabled(v3, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)v5 = 0;
      _os_log_error_impl(&dword_224FE9000, v3, OS_LOG_TYPE_ERROR, "Can only get start transform for orbit animations.", v5, 2u);
    }

    *(_QWORD *)&v2 = vdupq_n_s32(0x7FC00000u).u64[0];
  }
  return *(double *)&v2;
}

BOOL RETimelineDefinitionSetStartTransform(_anonymous_namespace_::TimelineDefinition *a1, __n128 a2, __n128 a3, __n128 a4)
{
  __n128 *v4;
  unsigned __int32 v5;
  NSObject *v6;
  uint8_t buf[16];

  v5 = v4->n128_u32[2];
  if (v5 == 37)
  {
    v4[6] = a2;
    v4[7] = a3;
    v4[8] = a4;
  }
  else
  {
    if (CoreRELog::onceToken != -1)
      dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
    v6 = (id)CoreRELog::log;
    if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      _os_log_error_impl(&dword_224FE9000, v6, OS_LOG_TYPE_ERROR, "Can only set start transform for orbit animations.", buf, 2u);
    }

  }
  return v5 == 37;
}

BOOL RETimelineDefinitionGetSpinClockwise(uint64_t a1)
{
  uint64_t v1;
  NSObject *v3;
  uint8_t v4[16];

  v1 = *(_QWORD *)(a1 + 48);
  if (!v1)
    v1 = *(_QWORD *)(re::AssetHandle::asset<re::TimelineAsset>((re::TimelineAsset *)(a1 + 24)) + 8);
  if (*(_DWORD *)(v1 + 8) == 37)
    return *(_BYTE *)(v1 + 144) != 0;
  if (CoreRELog::onceToken != -1)
    dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
  v3 = (id)CoreRELog::log;
  if (os_log_type_enabled(v3, OS_LOG_TYPE_ERROR))
  {
    *(_WORD *)v4 = 0;
    _os_log_error_impl(&dword_224FE9000, v3, OS_LOG_TYPE_ERROR, "Can only get spin clockwise state for orbit animations.", v4, 2u);
  }

  return 0;
}

BOOL RETimelineDefinitionSetSpinClockwise(_anonymous_namespace_::TimelineDefinition *a1, char a2)
{
  _anonymous_namespace_ *v3;
  int v4;
  NSObject *v5;
  uint8_t v7[16];

  v4 = *((_DWORD *)v3 + 2);
  if (v4 == 37)
  {
    *((_BYTE *)v3 + 144) = a2;
  }
  else
  {
    if (CoreRELog::onceToken != -1)
      dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
    v5 = (id)CoreRELog::log;
    if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)v7 = 0;
      _os_log_error_impl(&dword_224FE9000, v5, OS_LOG_TYPE_ERROR, "Can only set spin clockwise state for orbit animations.", v7, 2u);
    }

  }
  return v4 == 37;
}

BOOL RETimelineDefinitionGetOrientToPath(uint64_t a1)
{
  uint64_t v1;
  NSObject *v3;
  uint8_t v4[16];

  v1 = *(_QWORD *)(a1 + 48);
  if (!v1)
    v1 = *(_QWORD *)(re::AssetHandle::asset<re::TimelineAsset>((re::TimelineAsset *)(a1 + 24)) + 8);
  if (*(_DWORD *)(v1 + 8) == 37)
    return *(_BYTE *)(v1 + 145) != 0;
  if (CoreRELog::onceToken != -1)
    dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
  v3 = (id)CoreRELog::log;
  if (os_log_type_enabled(v3, OS_LOG_TYPE_ERROR))
  {
    *(_WORD *)v4 = 0;
    _os_log_error_impl(&dword_224FE9000, v3, OS_LOG_TYPE_ERROR, "Can only get orient to path for orbit animations.", v4, 2u);
  }

  return 0;
}

BOOL RETimelineDefinitionSetOrientToPath(_anonymous_namespace_::TimelineDefinition *a1, char a2)
{
  _anonymous_namespace_ *v3;
  int v4;
  NSObject *v5;
  uint8_t v7[16];

  v4 = *((_DWORD *)v3 + 2);
  if (v4 == 37)
  {
    *((_BYTE *)v3 + 145) = a2;
  }
  else
  {
    if (CoreRELog::onceToken != -1)
      dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
    v5 = (id)CoreRELog::log;
    if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)v7 = 0;
      _os_log_error_impl(&dword_224FE9000, v5, OS_LOG_TYPE_ERROR, "Can only set orient to path for orbit animations.", v7, 2u);
    }

  }
  return v4 == 37;
}

float RETimelineDefinitionGetRotationCount(uint64_t a1)
{
  uint64_t v1;
  NSObject *v3;
  uint8_t v4[16];

  v1 = *(_QWORD *)(a1 + 48);
  if (!v1)
    v1 = *(_QWORD *)(re::AssetHandle::asset<re::TimelineAsset>((re::TimelineAsset *)(a1 + 24)) + 8);
  if (*(_DWORD *)(v1 + 8) == 37)
    return *(float *)(v1 + 148);
  if (CoreRELog::onceToken != -1)
    dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
  v3 = (id)CoreRELog::log;
  if (os_log_type_enabled(v3, OS_LOG_TYPE_ERROR))
  {
    *(_WORD *)v4 = 0;
    _os_log_error_impl(&dword_224FE9000, v3, OS_LOG_TYPE_ERROR, "Can only get rotation count for orbit animations.", v4, 2u);
  }

  return NAN;
}

BOOL RETimelineDefinitionSetRotationCount(_anonymous_namespace_::TimelineDefinition *a1, float a2)
{
  _anonymous_namespace_ *v3;
  int v4;
  NSObject *v5;
  uint8_t v7[16];

  v4 = *((_DWORD *)v3 + 2);
  if (v4 == 37)
  {
    *((float *)v3 + 37) = a2;
  }
  else
  {
    if (CoreRELog::onceToken != -1)
      dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
    v5 = (id)CoreRELog::log;
    if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)v7 = 0;
      _os_log_error_impl(&dword_224FE9000, v5, OS_LOG_TYPE_ERROR, "Can only set rotation count for orbit animations.", v7, 2u);
    }

  }
  return v4 == 37;
}

uint64_t RETimelineDefinitionCreateFloatBlendTree(re *a1)
{
  uint64_t *v2;
  uint64_t v3;
  re *v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _anonymous_namespace_ *v10;
  char *v11;
  _QWORD *v12;
  uint64_t v13;
  _QWORD v15[3];
  _QWORD *v16;
  uint64_t v17;
  _QWORD v18[5];

  v18[4] = *MEMORY[0x24BDAC8D0];
  v2 = re::globalAllocators(a1);
  v3 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v2[2] + 32))(v2[2], 288, 8);
  *(_QWORD *)v3 = off_24ED36578;
  *(_QWORD *)(v3 + 8) = 39;
  *(_BYTE *)(v3 + 16) = 0;
  *(_QWORD *)(v3 + 24) = 0;
  *(_QWORD *)(v3 + 32) = &str_110;
  *(_BYTE *)(v3 + 72) = 0;
  *(_QWORD *)(v3 + 88) = 0;
  *(_QWORD *)(v3 + 96) = 0;
  *(_QWORD *)(v3 + 80) = 0;
  *(_DWORD *)(v3 + 104) = 0;
  *(_QWORD *)(v3 + 152) = 0;
  *(_DWORD *)(v3 + 160) = 0;
  *(_QWORD *)(v3 + 176) = 0;
  *(_QWORD *)(v3 + 184) = 0;
  *(_QWORD *)(v3 + 168) = 0;
  *(_DWORD *)(v3 + 192) = 0;
  *(_OWORD *)(v3 + 200) = 0u;
  *(_OWORD *)(v3 + 216) = 0u;
  *(_DWORD *)(v3 + 232) = 0;
  *(_OWORD *)(v3 + 112) = 0u;
  *(_OWORD *)(v3 + 128) = 0u;
  *(_DWORD *)(v3 + 144) = 0;
  *(_QWORD *)(v3 + 280) = 0;
  *(_DWORD *)(v3 + 272) = 0;
  *(_OWORD *)(v3 + 240) = 0u;
  *(_OWORD *)(v3 + 256) = 0u;
  *(_QWORD *)v3 = off_24ED33CD0;
  v18[3] = v18;
  v15[0] = &off_24ED9A5D8;
  v16 = v15;
  v17 = v3;
  v18[0] = &off_24ED9A5D8;
  v5 = re::globalAllocators(v4);
  v6 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v5[2] + 32))(v5[2], 608, 8);
  *(_QWORD *)v7 = &off_24ED9A658;
  v8 = v7 + 112;
  *(_QWORD *)(v7 + 128) = 0;
  *(_QWORD *)(v7 + 136) = 0;
  *(_QWORD *)(v7 + 120) = 0;
  *(_DWORD *)(v7 + 144) = 0;
  *(_OWORD *)(v7 + 152) = 0u;
  *(_OWORD *)(v7 + 168) = 0u;
  *(_OWORD *)(v7 + 180) = 0u;
  *(_QWORD *)(v7 + 196) = 0x7FFFFFFFLL;
  v9 = v7 + 208;
  v10 = re::StringID::invalid((re::StringID *)(v7 + 208));
  *(_QWORD *)(v6 + 224) = 0;
  *(_QWORD *)(v6 + 232) = 0;
  *(_DWORD *)(v6 + 248) = 0;
  *(_QWORD *)(v6 + 240) = 0;
  *(_OWORD *)(v6 + 256) = 0u;
  *(_OWORD *)(v6 + 272) = 0u;
  *(_DWORD *)(v6 + 288) = 0;
  *(_OWORD *)(v8 + 184) = 0u;
  *(_OWORD *)(v8 + 200) = 0u;
  *(_DWORD *)(v6 + 328) = 0;
  *(_OWORD *)(v6 + 336) = 0u;
  *(_OWORD *)(v6 + 352) = 0u;
  *(_DWORD *)(v6 + 368) = 0;
  *(_OWORD *)(v9 + 168) = 0u;
  *(_OWORD *)(v9 + 184) = 0u;
  *(_DWORD *)(v6 + 408) = 0;
  *(_DWORD *)(v6 + 480) = 0;
  *(_OWORD *)(v6 + 448) = 0u;
  *(_OWORD *)(v6 + 464) = 0u;
  *(_OWORD *)(v6 + 416) = 0u;
  *(_OWORD *)(v6 + 432) = 0u;
  *(_QWORD *)(v6 + 484) = 0x7FFFFFFFLL;
  *(_BYTE *)(v6 + 496) = 0;
  *(_OWORD *)(v6 + 520) = 0u;
  *(_OWORD *)(v6 + 536) = 0u;
  *(_DWORD *)(v6 + 552) = 0;
  *(_QWORD *)(v6 + 556) = 0x7FFFFFFFLL;
  *(_QWORD *)(v6 + 600) = 0;
  *(_QWORD *)(v6 + 584) = 0;
  *(_DWORD *)(v6 + 592) = 0;
  *(_QWORD *)(v6 + 568) = 0;
  *(_QWORD *)(v6 + 576) = 0;
      + 80;
  *(_QWORD *)(v6 + 504) = v11;
  std::unique_ptr<re::RigHierarchy,std::function<void ()(re::RigHierarchy*)>>::~unique_ptr[abi:nn180100](&v17);
  v12 = v16;
  if (v16 == v15)
  {
    v13 = 4;
    v12 = v15;
    goto LABEL_5;
  }
  if (v16)
  {
    v13 = 5;
LABEL_5:
    (*(void (**)(void))(*v12 + 8 * v13))();
  }
  return v6;
}

uint64_t RETimelineDefinitionCreateDoubleBlendTree(re *a1)
{
  uint64_t *v2;
  uint64_t v3;
  re *v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _anonymous_namespace_ *v10;
  char *v11;
  _QWORD *v12;
  uint64_t v13;
  _QWORD v15[3];
  _QWORD *v16;
  uint64_t v17;
  _QWORD v18[5];

  v18[4] = *MEMORY[0x24BDAC8D0];
  v2 = re::globalAllocators(a1);
  v3 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v2[2] + 32))(v2[2], 288, 8);
  *(_QWORD *)v3 = off_24ED36578;
  *(_QWORD *)(v3 + 8) = 40;
  *(_BYTE *)(v3 + 16) = 0;
  *(_QWORD *)(v3 + 24) = 0;
  *(_QWORD *)(v3 + 32) = &str_110;
  *(_BYTE *)(v3 + 72) = 0;
  *(_QWORD *)(v3 + 88) = 0;
  *(_QWORD *)(v3 + 96) = 0;
  *(_QWORD *)(v3 + 80) = 0;
  *(_DWORD *)(v3 + 104) = 0;
  *(_QWORD *)(v3 + 152) = 0;
  *(_DWORD *)(v3 + 160) = 0;
  *(_QWORD *)(v3 + 176) = 0;
  *(_QWORD *)(v3 + 184) = 0;
  *(_QWORD *)(v3 + 168) = 0;
  *(_DWORD *)(v3 + 192) = 0;
  *(_OWORD *)(v3 + 200) = 0u;
  *(_OWORD *)(v3 + 216) = 0u;
  *(_DWORD *)(v3 + 232) = 0;
  *(_OWORD *)(v3 + 112) = 0u;
  *(_OWORD *)(v3 + 128) = 0u;
  *(_DWORD *)(v3 + 144) = 0;
  *(_QWORD *)(v3 + 280) = 0;
  *(_DWORD *)(v3 + 272) = 0;
  *(_OWORD *)(v3 + 240) = 0u;
  *(_OWORD *)(v3 + 256) = 0u;
  *(_QWORD *)v3 = off_24ED33D80;
  v18[3] = v18;
  v15[0] = &off_24ED9A6A0;
  v16 = v15;
  v17 = v3;
  v18[0] = &off_24ED9A6A0;
  v5 = re::globalAllocators(v4);
  v6 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v5[2] + 32))(v5[2], 608, 8);
  *(_QWORD *)v7 = &off_24ED9A720;
  v8 = v7 + 112;
  *(_QWORD *)(v7 + 128) = 0;
  *(_QWORD *)(v7 + 136) = 0;
  *(_QWORD *)(v7 + 120) = 0;
  *(_DWORD *)(v7 + 144) = 0;
  *(_OWORD *)(v7 + 152) = 0u;
  *(_OWORD *)(v7 + 168) = 0u;
  *(_OWORD *)(v7 + 180) = 0u;
  *(_QWORD *)(v7 + 196) = 0x7FFFFFFFLL;
  v9 = v7 + 208;
  v10 = re::StringID::invalid((re::StringID *)(v7 + 208));
  *(_QWORD *)(v6 + 224) = 0;
  *(_QWORD *)(v6 + 232) = 0;
  *(_DWORD *)(v6 + 248) = 0;
  *(_QWORD *)(v6 + 240) = 0;
  *(_OWORD *)(v6 + 256) = 0u;
  *(_OWORD *)(v6 + 272) = 0u;
  *(_DWORD *)(v6 + 288) = 0;
  *(_OWORD *)(v8 + 184) = 0u;
  *(_OWORD *)(v8 + 200) = 0u;
  *(_DWORD *)(v6 + 328) = 0;
  *(_OWORD *)(v6 + 336) = 0u;
  *(_OWORD *)(v6 + 352) = 0u;
  *(_DWORD *)(v6 + 368) = 0;
  *(_OWORD *)(v9 + 168) = 0u;
  *(_OWORD *)(v9 + 184) = 0u;
  *(_DWORD *)(v6 + 408) = 0;
  *(_DWORD *)(v6 + 480) = 0;
  *(_OWORD *)(v6 + 448) = 0u;
  *(_OWORD *)(v6 + 464) = 0u;
  *(_OWORD *)(v6 + 416) = 0u;
  *(_OWORD *)(v6 + 432) = 0u;
  *(_QWORD *)(v6 + 484) = 0x7FFFFFFFLL;
  *(_BYTE *)(v6 + 496) = 0;
  *(_OWORD *)(v6 + 520) = 0u;
  *(_OWORD *)(v6 + 536) = 0u;
  *(_DWORD *)(v6 + 552) = 0;
  *(_QWORD *)(v6 + 556) = 0x7FFFFFFFLL;
  *(_QWORD *)(v6 + 600) = 0;
  *(_QWORD *)(v6 + 584) = 0;
  *(_DWORD *)(v6 + 592) = 0;
  *(_QWORD *)(v6 + 568) = 0;
  *(_QWORD *)(v6 + 576) = 0;
      + 80;
  *(_QWORD *)(v6 + 504) = v11;
  std::unique_ptr<re::RigHierarchy,std::function<void ()(re::RigHierarchy*)>>::~unique_ptr[abi:nn180100](&v17);
  v12 = v16;
  if (v16 == v15)
  {
    v13 = 4;
    v12 = v15;
    goto LABEL_5;
  }
  if (v16)
  {
    v13 = 5;
LABEL_5:
    (*(void (**)(void))(*v12 + 8 * v13))();
  }
  return v6;
}

uint64_t RETimelineDefinitionCreateFloat2BlendTree(re *a1)
{
  uint64_t *v2;
  uint64_t v3;
  re *v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _anonymous_namespace_ *v10;
  char *v11;
  _QWORD *v12;
  uint64_t v13;
  _QWORD v15[3];
  _QWORD *v16;
  uint64_t v17;
  _QWORD v18[5];

  v18[4] = *MEMORY[0x24BDAC8D0];
  v2 = re::globalAllocators(a1);
  v3 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v2[2] + 32))(v2[2], 288, 8);
  *(_QWORD *)v3 = off_24ED36578;
  *(_QWORD *)(v3 + 8) = 41;
  *(_BYTE *)(v3 + 16) = 0;
  *(_QWORD *)(v3 + 24) = 0;
  *(_QWORD *)(v3 + 32) = &str_110;
  *(_BYTE *)(v3 + 72) = 0;
  *(_QWORD *)(v3 + 88) = 0;
  *(_QWORD *)(v3 + 96) = 0;
  *(_QWORD *)(v3 + 80) = 0;
  *(_DWORD *)(v3 + 104) = 0;
  *(_QWORD *)(v3 + 152) = 0;
  *(_DWORD *)(v3 + 160) = 0;
  *(_QWORD *)(v3 + 176) = 0;
  *(_QWORD *)(v3 + 184) = 0;
  *(_QWORD *)(v3 + 168) = 0;
  *(_DWORD *)(v3 + 192) = 0;
  *(_OWORD *)(v3 + 200) = 0u;
  *(_OWORD *)(v3 + 216) = 0u;
  *(_DWORD *)(v3 + 232) = 0;
  *(_OWORD *)(v3 + 112) = 0u;
  *(_OWORD *)(v3 + 128) = 0u;
  *(_DWORD *)(v3 + 144) = 0;
  *(_QWORD *)(v3 + 280) = 0;
  *(_DWORD *)(v3 + 272) = 0;
  *(_OWORD *)(v3 + 240) = 0u;
  *(_OWORD *)(v3 + 256) = 0u;
  *(_QWORD *)v3 = off_24ED33E30;
  v18[3] = v18;
  v15[0] = &off_24ED9A768;
  v16 = v15;
  v17 = v3;
  v18[0] = &off_24ED9A768;
  v5 = re::globalAllocators(v4);
  v6 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v5[2] + 32))(v5[2], 608, 8);
  *(_QWORD *)v7 = &off_24ED9A7E8;
  v8 = v7 + 112;
  *(_QWORD *)(v7 + 128) = 0;
  *(_QWORD *)(v7 + 136) = 0;
  *(_QWORD *)(v7 + 120) = 0;
  *(_DWORD *)(v7 + 144) = 0;
  *(_OWORD *)(v7 + 152) = 0u;
  *(_OWORD *)(v7 + 168) = 0u;
  *(_OWORD *)(v7 + 180) = 0u;
  *(_QWORD *)(v7 + 196) = 0x7FFFFFFFLL;
  v9 = v7 + 208;
  v10 = re::StringID::invalid((re::StringID *)(v7 + 208));
  *(_QWORD *)(v6 + 224) = 0;
  *(_QWORD *)(v6 + 232) = 0;
  *(_DWORD *)(v6 + 248) = 0;
  *(_QWORD *)(v6 + 240) = 0;
  *(_OWORD *)(v6 + 256) = 0u;
  *(_OWORD *)(v6 + 272) = 0u;
  *(_DWORD *)(v6 + 288) = 0;
  *(_OWORD *)(v8 + 184) = 0u;
  *(_OWORD *)(v8 + 200) = 0u;
  *(_DWORD *)(v6 + 328) = 0;
  *(_OWORD *)(v6 + 336) = 0u;
  *(_OWORD *)(v6 + 352) = 0u;
  *(_DWORD *)(v6 + 368) = 0;
  *(_OWORD *)(v9 + 168) = 0u;
  *(_OWORD *)(v9 + 184) = 0u;
  *(_DWORD *)(v6 + 408) = 0;
  *(_DWORD *)(v6 + 480) = 0;
  *(_OWORD *)(v6 + 448) = 0u;
  *(_OWORD *)(v6 + 464) = 0u;
  *(_OWORD *)(v6 + 416) = 0u;
  *(_OWORD *)(v6 + 432) = 0u;
  *(_QWORD *)(v6 + 484) = 0x7FFFFFFFLL;
  *(_BYTE *)(v6 + 496) = 0;
  *(_OWORD *)(v6 + 520) = 0u;
  *(_OWORD *)(v6 + 536) = 0u;
  *(_DWORD *)(v6 + 552) = 0;
  *(_QWORD *)(v6 + 556) = 0x7FFFFFFFLL;
  *(_QWORD *)(v6 + 600) = 0;
  *(_QWORD *)(v6 + 584) = 0;
  *(_DWORD *)(v6 + 592) = 0;
  *(_QWORD *)(v6 + 568) = 0;
  *(_QWORD *)(v6 + 576) = 0;
      + 80;
  *(_QWORD *)(v6 + 504) = v11;
  std::unique_ptr<re::RigHierarchy,std::function<void ()(re::RigHierarchy*)>>::~unique_ptr[abi:nn180100](&v17);
  v12 = v16;
  if (v16 == v15)
  {
    v13 = 4;
    v12 = v15;
    goto LABEL_5;
  }
  if (v16)
  {
    v13 = 5;
LABEL_5:
    (*(void (**)(void))(*v12 + 8 * v13))();
  }
  return v6;
}

uint64_t RETimelineDefinitionCreateFloat3BlendTree(re *a1)
{
  uint64_t *v2;
  uint64_t v3;
  re *v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _anonymous_namespace_ *v10;
  char *v11;
  _QWORD *v12;
  uint64_t v13;
  _QWORD v15[3];
  _QWORD *v16;
  uint64_t v17;
  _QWORD v18[5];

  v18[4] = *MEMORY[0x24BDAC8D0];
  v2 = re::globalAllocators(a1);
  v3 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v2[2] + 32))(v2[2], 288, 8);
  *(_QWORD *)v3 = off_24ED36578;
  *(_QWORD *)(v3 + 8) = 42;
  *(_BYTE *)(v3 + 16) = 0;
  *(_QWORD *)(v3 + 24) = 0;
  *(_QWORD *)(v3 + 32) = &str_110;
  *(_BYTE *)(v3 + 72) = 0;
  *(_QWORD *)(v3 + 88) = 0;
  *(_QWORD *)(v3 + 96) = 0;
  *(_QWORD *)(v3 + 80) = 0;
  *(_DWORD *)(v3 + 104) = 0;
  *(_QWORD *)(v3 + 152) = 0;
  *(_DWORD *)(v3 + 160) = 0;
  *(_QWORD *)(v3 + 176) = 0;
  *(_QWORD *)(v3 + 184) = 0;
  *(_QWORD *)(v3 + 168) = 0;
  *(_DWORD *)(v3 + 192) = 0;
  *(_OWORD *)(v3 + 200) = 0u;
  *(_OWORD *)(v3 + 216) = 0u;
  *(_DWORD *)(v3 + 232) = 0;
  *(_OWORD *)(v3 + 112) = 0u;
  *(_OWORD *)(v3 + 128) = 0u;
  *(_DWORD *)(v3 + 144) = 0;
  *(_QWORD *)(v3 + 280) = 0;
  *(_DWORD *)(v3 + 272) = 0;
  *(_OWORD *)(v3 + 240) = 0u;
  *(_OWORD *)(v3 + 256) = 0u;
  *(_QWORD *)v3 = off_24ED33EE0;
  v18[3] = v18;
  v15[0] = &off_24ED9A830;
  v16 = v15;
  v17 = v3;
  v18[0] = &off_24ED9A830;
  v5 = re::globalAllocators(v4);
  v6 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v5[2] + 32))(v5[2], 608, 8);
  *(_QWORD *)v7 = &off_24ED9A8B0;
  v8 = v7 + 112;
  *(_QWORD *)(v7 + 128) = 0;
  *(_QWORD *)(v7 + 136) = 0;
  *(_QWORD *)(v7 + 120) = 0;
  *(_DWORD *)(v7 + 144) = 0;
  *(_OWORD *)(v7 + 152) = 0u;
  *(_OWORD *)(v7 + 168) = 0u;
  *(_OWORD *)(v7 + 180) = 0u;
  *(_QWORD *)(v7 + 196) = 0x7FFFFFFFLL;
  v9 = v7 + 208;
  v10 = re::StringID::invalid((re::StringID *)(v7 + 208));
  *(_QWORD *)(v6 + 224) = 0;
  *(_QWORD *)(v6 + 232) = 0;
  *(_DWORD *)(v6 + 248) = 0;
  *(_QWORD *)(v6 + 240) = 0;
  *(_OWORD *)(v6 + 256) = 0u;
  *(_OWORD *)(v6 + 272) = 0u;
  *(_DWORD *)(v6 + 288) = 0;
  *(_OWORD *)(v8 + 184) = 0u;
  *(_OWORD *)(v8 + 200) = 0u;
  *(_DWORD *)(v6 + 328) = 0;
  *(_OWORD *)(v6 + 336) = 0u;
  *(_OWORD *)(v6 + 352) = 0u;
  *(_DWORD *)(v6 + 368) = 0;
  *(_OWORD *)(v9 + 168) = 0u;
  *(_OWORD *)(v9 + 184) = 0u;
  *(_DWORD *)(v6 + 408) = 0;
  *(_DWORD *)(v6 + 480) = 0;
  *(_OWORD *)(v6 + 448) = 0u;
  *(_OWORD *)(v6 + 464) = 0u;
  *(_OWORD *)(v6 + 416) = 0u;
  *(_OWORD *)(v6 + 432) = 0u;
  *(_QWORD *)(v6 + 484) = 0x7FFFFFFFLL;
  *(_BYTE *)(v6 + 496) = 0;
  *(_OWORD *)(v6 + 520) = 0u;
  *(_OWORD *)(v6 + 536) = 0u;
  *(_DWORD *)(v6 + 552) = 0;
  *(_QWORD *)(v6 + 556) = 0x7FFFFFFFLL;
  *(_QWORD *)(v6 + 600) = 0;
  *(_QWORD *)(v6 + 584) = 0;
  *(_DWORD *)(v6 + 592) = 0;
  *(_QWORD *)(v6 + 568) = 0;
  *(_QWORD *)(v6 + 576) = 0;
      + 80;
  *(_QWORD *)(v6 + 504) = v11;
  std::unique_ptr<re::RigHierarchy,std::function<void ()(re::RigHierarchy*)>>::~unique_ptr[abi:nn180100](&v17);
  v12 = v16;
  if (v16 == v15)
  {
    v13 = 4;
    v12 = v15;
    goto LABEL_5;
  }
  if (v16)
  {
    v13 = 5;
LABEL_5:
    (*(void (**)(void))(*v12 + 8 * v13))();
  }
  return v6;
}

uint64_t RETimelineDefinitionCreateFloat4BlendTree(re *a1)
{
  uint64_t *v2;
  uint64_t v3;
  re *v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _anonymous_namespace_ *v10;
  char *v11;
  _QWORD *v12;
  uint64_t v13;
  _QWORD v15[3];
  _QWORD *v16;
  uint64_t v17;
  _QWORD v18[5];

  v18[4] = *MEMORY[0x24BDAC8D0];
  v2 = re::globalAllocators(a1);
  v3 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v2[2] + 32))(v2[2], 288, 8);
  *(_QWORD *)v3 = off_24ED36578;
  *(_QWORD *)(v3 + 8) = 43;
  *(_BYTE *)(v3 + 16) = 0;
  *(_QWORD *)(v3 + 24) = 0;
  *(_QWORD *)(v3 + 32) = &str_110;
  *(_BYTE *)(v3 + 72) = 0;
  *(_QWORD *)(v3 + 88) = 0;
  *(_QWORD *)(v3 + 96) = 0;
  *(_QWORD *)(v3 + 80) = 0;
  *(_DWORD *)(v3 + 104) = 0;
  *(_QWORD *)(v3 + 152) = 0;
  *(_DWORD *)(v3 + 160) = 0;
  *(_QWORD *)(v3 + 176) = 0;
  *(_QWORD *)(v3 + 184) = 0;
  *(_QWORD *)(v3 + 168) = 0;
  *(_DWORD *)(v3 + 192) = 0;
  *(_OWORD *)(v3 + 200) = 0u;
  *(_OWORD *)(v3 + 216) = 0u;
  *(_DWORD *)(v3 + 232) = 0;
  *(_OWORD *)(v3 + 112) = 0u;
  *(_OWORD *)(v3 + 128) = 0u;
  *(_DWORD *)(v3 + 144) = 0;
  *(_QWORD *)(v3 + 280) = 0;
  *(_DWORD *)(v3 + 272) = 0;
  *(_OWORD *)(v3 + 240) = 0u;
  *(_OWORD *)(v3 + 256) = 0u;
  *(_QWORD *)v3 = off_24ED33F90;
  v18[3] = v18;
  v15[0] = &off_24ED9A8F8;
  v16 = v15;
  v17 = v3;
  v18[0] = &off_24ED9A8F8;
  v5 = re::globalAllocators(v4);
  v6 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v5[2] + 32))(v5[2], 608, 8);
  *(_QWORD *)v7 = &off_24ED9A978;
  v8 = v7 + 112;
  *(_QWORD *)(v7 + 128) = 0;
  *(_QWORD *)(v7 + 136) = 0;
  *(_QWORD *)(v7 + 120) = 0;
  *(_DWORD *)(v7 + 144) = 0;
  *(_OWORD *)(v7 + 152) = 0u;
  *(_OWORD *)(v7 + 168) = 0u;
  *(_OWORD *)(v7 + 180) = 0u;
  *(_QWORD *)(v7 + 196) = 0x7FFFFFFFLL;
  v9 = v7 + 208;
  v10 = re::StringID::invalid((re::StringID *)(v7 + 208));
  *(_QWORD *)(v6 + 224) = 0;
  *(_QWORD *)(v6 + 232) = 0;
  *(_DWORD *)(v6 + 248) = 0;
  *(_QWORD *)(v6 + 240) = 0;
  *(_OWORD *)(v6 + 256) = 0u;
  *(_OWORD *)(v6 + 272) = 0u;
  *(_DWORD *)(v6 + 288) = 0;
  *(_OWORD *)(v8 + 184) = 0u;
  *(_OWORD *)(v8 + 200) = 0u;
  *(_DWORD *)(v6 + 328) = 0;
  *(_OWORD *)(v6 + 336) = 0u;
  *(_OWORD *)(v6 + 352) = 0u;
  *(_DWORD *)(v6 + 368) = 0;
  *(_OWORD *)(v9 + 168) = 0u;
  *(_OWORD *)(v9 + 184) = 0u;
  *(_DWORD *)(v6 + 408) = 0;
  *(_DWORD *)(v6 + 480) = 0;
  *(_OWORD *)(v6 + 448) = 0u;
  *(_OWORD *)(v6 + 464) = 0u;
  *(_OWORD *)(v6 + 416) = 0u;
  *(_OWORD *)(v6 + 432) = 0u;
  *(_QWORD *)(v6 + 484) = 0x7FFFFFFFLL;
  *(_BYTE *)(v6 + 496) = 0;
  *(_OWORD *)(v6 + 520) = 0u;
  *(_OWORD *)(v6 + 536) = 0u;
  *(_DWORD *)(v6 + 552) = 0;
  *(_QWORD *)(v6 + 556) = 0x7FFFFFFFLL;
  *(_QWORD *)(v6 + 600) = 0;
  *(_QWORD *)(v6 + 584) = 0;
  *(_DWORD *)(v6 + 592) = 0;
  *(_QWORD *)(v6 + 568) = 0;
  *(_QWORD *)(v6 + 576) = 0;
      + 80;
  *(_QWORD *)(v6 + 504) = v11;
  std::unique_ptr<re::RigHierarchy,std::function<void ()(re::RigHierarchy*)>>::~unique_ptr[abi:nn180100](&v17);
  v12 = v16;
  if (v16 == v15)
  {
    v13 = 4;
    v12 = v15;
    goto LABEL_5;
  }
  if (v16)
  {
    v13 = 5;
LABEL_5:
    (*(void (**)(void))(*v12 + 8 * v13))();
  }
  return v6;
}

uint64_t RETimelineDefinitionCreateQuaternionBlendTree(re *a1)
{
  uint64_t *v2;
  uint64_t v3;
  re *v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _anonymous_namespace_ *v10;
  char *v11;
  _QWORD *v12;
  uint64_t v13;
  _QWORD v15[3];
  _QWORD *v16;
  uint64_t v17;
  _QWORD v18[5];

  v18[4] = *MEMORY[0x24BDAC8D0];
  v2 = re::globalAllocators(a1);
  v3 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v2[2] + 32))(v2[2], 288, 8);
  *(_QWORD *)v3 = off_24ED36578;
  *(_QWORD *)(v3 + 8) = 44;
  *(_BYTE *)(v3 + 16) = 0;
  *(_QWORD *)(v3 + 24) = 0;
  *(_QWORD *)(v3 + 32) = &str_110;
  *(_BYTE *)(v3 + 72) = 0;
  *(_QWORD *)(v3 + 88) = 0;
  *(_QWORD *)(v3 + 96) = 0;
  *(_QWORD *)(v3 + 80) = 0;
  *(_DWORD *)(v3 + 104) = 0;
  *(_QWORD *)(v3 + 152) = 0;
  *(_DWORD *)(v3 + 160) = 0;
  *(_QWORD *)(v3 + 176) = 0;
  *(_QWORD *)(v3 + 184) = 0;
  *(_QWORD *)(v3 + 168) = 0;
  *(_DWORD *)(v3 + 192) = 0;
  *(_OWORD *)(v3 + 200) = 0u;
  *(_OWORD *)(v3 + 216) = 0u;
  *(_DWORD *)(v3 + 232) = 0;
  *(_OWORD *)(v3 + 112) = 0u;
  *(_OWORD *)(v3 + 128) = 0u;
  *(_DWORD *)(v3 + 144) = 0;
  *(_QWORD *)(v3 + 280) = 0;
  *(_DWORD *)(v3 + 272) = 0;
  *(_OWORD *)(v3 + 240) = 0u;
  *(_OWORD *)(v3 + 256) = 0u;
  *(_QWORD *)v3 = off_24ED34040;
  v18[3] = v18;
  v15[0] = &off_24ED9A9C0;
  v16 = v15;
  v17 = v3;
  v18[0] = &off_24ED9A9C0;
  v5 = re::globalAllocators(v4);
  v6 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v5[2] + 32))(v5[2], 608, 8);
  *(_QWORD *)v7 = &off_24ED9AA40;
  v8 = v7 + 112;
  *(_QWORD *)(v7 + 128) = 0;
  *(_QWORD *)(v7 + 136) = 0;
  *(_QWORD *)(v7 + 120) = 0;
  *(_DWORD *)(v7 + 144) = 0;
  *(_OWORD *)(v7 + 152) = 0u;
  *(_OWORD *)(v7 + 168) = 0u;
  *(_OWORD *)(v7 + 180) = 0u;
  *(_QWORD *)(v7 + 196) = 0x7FFFFFFFLL;
  v9 = v7 + 208;
  v10 = re::StringID::invalid((re::StringID *)(v7 + 208));
  *(_QWORD *)(v6 + 224) = 0;
  *(_QWORD *)(v6 + 232) = 0;
  *(_DWORD *)(v6 + 248) = 0;
  *(_QWORD *)(v6 + 240) = 0;
  *(_OWORD *)(v6 + 256) = 0u;
  *(_OWORD *)(v6 + 272) = 0u;
  *(_DWORD *)(v6 + 288) = 0;
  *(_OWORD *)(v8 + 184) = 0u;
  *(_OWORD *)(v8 + 200) = 0u;
  *(_DWORD *)(v6 + 328) = 0;
  *(_OWORD *)(v6 + 336) = 0u;
  *(_OWORD *)(v6 + 352) = 0u;
  *(_DWORD *)(v6 + 368) = 0;
  *(_OWORD *)(v9 + 168) = 0u;
  *(_OWORD *)(v9 + 184) = 0u;
  *(_DWORD *)(v6 + 408) = 0;
  *(_DWORD *)(v6 + 480) = 0;
  *(_OWORD *)(v6 + 448) = 0u;
  *(_OWORD *)(v6 + 464) = 0u;
  *(_OWORD *)(v6 + 416) = 0u;
  *(_OWORD *)(v6 + 432) = 0u;
  *(_QWORD *)(v6 + 484) = 0x7FFFFFFFLL;
  *(_BYTE *)(v6 + 496) = 0;
  *(_OWORD *)(v6 + 520) = 0u;
  *(_OWORD *)(v6 + 536) = 0u;
  *(_DWORD *)(v6 + 552) = 0;
  *(_QWORD *)(v6 + 556) = 0x7FFFFFFFLL;
  *(_QWORD *)(v6 + 600) = 0;
  *(_QWORD *)(v6 + 584) = 0;
  *(_DWORD *)(v6 + 592) = 0;
  *(_QWORD *)(v6 + 568) = 0;
  *(_QWORD *)(v6 + 576) = 0;
      + 80;
  *(_QWORD *)(v6 + 504) = v11;
  std::unique_ptr<re::RigHierarchy,std::function<void ()(re::RigHierarchy*)>>::~unique_ptr[abi:nn180100](&v17);
  v12 = v16;
  if (v16 == v15)
  {
    v13 = 4;
    v12 = v15;
    goto LABEL_5;
  }
  if (v16)
  {
    v13 = 5;
LABEL_5:
    (*(void (**)(void))(*v12 + 8 * v13))();
  }
  return v6;
}

uint64_t RETimelineDefinitionCreateSRTBlendTree(re *a1)
{
  uint64_t *v2;
  uint64_t v3;
  re *v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _anonymous_namespace_ *v10;
  char *v11;
  _QWORD *v12;
  uint64_t v13;
  _QWORD v15[3];
  _QWORD *v16;
  uint64_t v17;
  _QWORD v18[5];

  v18[4] = *MEMORY[0x24BDAC8D0];
  v2 = re::globalAllocators(a1);
  v3 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v2[2] + 32))(v2[2], 288, 8);
  *(_QWORD *)v3 = off_24ED36578;
  *(_QWORD *)(v3 + 8) = 45;
  *(_BYTE *)(v3 + 16) = 0;
  *(_QWORD *)(v3 + 24) = 0;
  *(_QWORD *)(v3 + 32) = &str_110;
  *(_BYTE *)(v3 + 72) = 0;
  *(_QWORD *)(v3 + 88) = 0;
  *(_QWORD *)(v3 + 96) = 0;
  *(_QWORD *)(v3 + 80) = 0;
  *(_DWORD *)(v3 + 104) = 0;
  *(_QWORD *)(v3 + 152) = 0;
  *(_DWORD *)(v3 + 160) = 0;
  *(_QWORD *)(v3 + 176) = 0;
  *(_QWORD *)(v3 + 184) = 0;
  *(_QWORD *)(v3 + 168) = 0;
  *(_DWORD *)(v3 + 192) = 0;
  *(_OWORD *)(v3 + 200) = 0u;
  *(_OWORD *)(v3 + 216) = 0u;
  *(_DWORD *)(v3 + 232) = 0;
  *(_OWORD *)(v3 + 112) = 0u;
  *(_OWORD *)(v3 + 128) = 0u;
  *(_DWORD *)(v3 + 144) = 0;
  *(_QWORD *)(v3 + 280) = 0;
  *(_DWORD *)(v3 + 272) = 0;
  *(_OWORD *)(v3 + 240) = 0u;
  *(_OWORD *)(v3 + 256) = 0u;
  *(_QWORD *)v3 = off_24ED340F0;
  v18[3] = v18;
  v15[0] = &off_24ED9AA88;
  v16 = v15;
  v17 = v3;
  v18[0] = &off_24ED9AA88;
  v5 = re::globalAllocators(v4);
  v6 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v5[2] + 32))(v5[2], 608, 8);
  *(_QWORD *)v7 = &off_24ED9AB08;
  v8 = v7 + 112;
  *(_QWORD *)(v7 + 128) = 0;
  *(_QWORD *)(v7 + 136) = 0;
  *(_QWORD *)(v7 + 120) = 0;
  *(_DWORD *)(v7 + 144) = 0;
  *(_OWORD *)(v7 + 152) = 0u;
  *(_OWORD *)(v7 + 168) = 0u;
  *(_OWORD *)(v7 + 180) = 0u;
  *(_QWORD *)(v7 + 196) = 0x7FFFFFFFLL;
  v9 = v7 + 208;
  v10 = re::StringID::invalid((re::StringID *)(v7 + 208));
  *(_QWORD *)(v6 + 224) = 0;
  *(_QWORD *)(v6 + 232) = 0;
  *(_DWORD *)(v6 + 248) = 0;
  *(_QWORD *)(v6 + 240) = 0;
  *(_OWORD *)(v6 + 256) = 0u;
  *(_OWORD *)(v6 + 272) = 0u;
  *(_DWORD *)(v6 + 288) = 0;
  *(_OWORD *)(v8 + 184) = 0u;
  *(_OWORD *)(v8 + 200) = 0u;
  *(_DWORD *)(v6 + 328) = 0;
  *(_OWORD *)(v6 + 336) = 0u;
  *(_OWORD *)(v6 + 352) = 0u;
  *(_DWORD *)(v6 + 368) = 0;
  *(_OWORD *)(v9 + 168) = 0u;
  *(_OWORD *)(v9 + 184) = 0u;
  *(_DWORD *)(v6 + 408) = 0;
  *(_DWORD *)(v6 + 480) = 0;
  *(_OWORD *)(v6 + 448) = 0u;
  *(_OWORD *)(v6 + 464) = 0u;
  *(_OWORD *)(v6 + 416) = 0u;
  *(_OWORD *)(v6 + 432) = 0u;
  *(_QWORD *)(v6 + 484) = 0x7FFFFFFFLL;
  *(_BYTE *)(v6 + 496) = 0;
  *(_OWORD *)(v6 + 520) = 0u;
  *(_OWORD *)(v6 + 536) = 0u;
  *(_DWORD *)(v6 + 552) = 0;
  *(_QWORD *)(v6 + 556) = 0x7FFFFFFFLL;
  *(_QWORD *)(v6 + 600) = 0;
  *(_QWORD *)(v6 + 584) = 0;
  *(_DWORD *)(v6 + 592) = 0;
  *(_QWORD *)(v6 + 568) = 0;
  *(_QWORD *)(v6 + 576) = 0;
      + 80;
  *(_QWORD *)(v6 + 504) = v11;
  std::unique_ptr<re::RigHierarchy,std::function<void ()(re::RigHierarchy*)>>::~unique_ptr[abi:nn180100](&v17);
  v12 = v16;
  if (v16 == v15)
  {
    v13 = 4;
    v12 = v15;
    goto LABEL_5;
  }
  if (v16)
  {
    v13 = 5;
LABEL_5:
    (*(void (**)(void))(*v12 + 8 * v13))();
  }
  return v6;
}

uint64_t RETimelineDefinitionCreateSkeletalPoseBlendTree(re *a1)
{
  uint64_t *v2;
  uint64_t v3;
  re *v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _anonymous_namespace_ *v10;
  char *v11;
  _QWORD *v12;
  uint64_t v13;
  _QWORD v15[3];
  _QWORD *v16;
  uint64_t v17;
  _QWORD v18[5];

  v18[4] = *MEMORY[0x24BDAC8D0];
  v2 = re::globalAllocators(a1);
  v3 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v2[2] + 32))(v2[2], 288, 8);
  *(_QWORD *)v3 = off_24ED36578;
  *(_QWORD *)(v3 + 8) = 46;
  *(_BYTE *)(v3 + 16) = 0;
  *(_QWORD *)(v3 + 24) = 0;
  *(_QWORD *)(v3 + 32) = &str_110;
  *(_BYTE *)(v3 + 72) = 0;
  *(_QWORD *)(v3 + 88) = 0;
  *(_QWORD *)(v3 + 96) = 0;
  *(_QWORD *)(v3 + 80) = 0;
  *(_DWORD *)(v3 + 104) = 0;
  *(_QWORD *)(v3 + 152) = 0;
  *(_DWORD *)(v3 + 160) = 0;
  *(_QWORD *)(v3 + 176) = 0;
  *(_QWORD *)(v3 + 184) = 0;
  *(_QWORD *)(v3 + 168) = 0;
  *(_DWORD *)(v3 + 192) = 0;
  *(_OWORD *)(v3 + 200) = 0u;
  *(_OWORD *)(v3 + 216) = 0u;
  *(_DWORD *)(v3 + 232) = 0;
  *(_OWORD *)(v3 + 112) = 0u;
  *(_OWORD *)(v3 + 128) = 0u;
  *(_DWORD *)(v3 + 144) = 0;
  *(_QWORD *)(v3 + 280) = 0;
  *(_DWORD *)(v3 + 272) = 0;
  *(_OWORD *)(v3 + 240) = 0u;
  *(_OWORD *)(v3 + 256) = 0u;
  *(_QWORD *)v3 = off_24ED341A0;
  v18[3] = v18;
  v15[0] = &off_24ED9AB50;
  v16 = v15;
  v17 = v3;
  v18[0] = &off_24ED9AB50;
  v5 = re::globalAllocators(v4);
  v6 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v5[2] + 32))(v5[2], 608, 8);
  *(_QWORD *)v7 = &off_24ED9ABD0;
  v8 = v7 + 112;
  *(_QWORD *)(v7 + 128) = 0;
  *(_QWORD *)(v7 + 136) = 0;
  *(_QWORD *)(v7 + 120) = 0;
  *(_DWORD *)(v7 + 144) = 0;
  *(_OWORD *)(v7 + 152) = 0u;
  *(_OWORD *)(v7 + 168) = 0u;
  *(_OWORD *)(v7 + 180) = 0u;
  *(_QWORD *)(v7 + 196) = 0x7FFFFFFFLL;
  v9 = v7 + 208;
  v10 = re::StringID::invalid((re::StringID *)(v7 + 208));
  *(_QWORD *)(v6 + 224) = 0;
  *(_QWORD *)(v6 + 232) = 0;
  *(_DWORD *)(v6 + 248) = 0;
  *(_QWORD *)(v6 + 240) = 0;
  *(_OWORD *)(v6 + 256) = 0u;
  *(_OWORD *)(v6 + 272) = 0u;
  *(_DWORD *)(v6 + 288) = 0;
  *(_OWORD *)(v8 + 184) = 0u;
  *(_OWORD *)(v8 + 200) = 0u;
  *(_DWORD *)(v6 + 328) = 0;
  *(_OWORD *)(v6 + 336) = 0u;
  *(_OWORD *)(v6 + 352) = 0u;
  *(_DWORD *)(v6 + 368) = 0;
  *(_OWORD *)(v9 + 168) = 0u;
  *(_OWORD *)(v9 + 184) = 0u;
  *(_DWORD *)(v6 + 408) = 0;
  *(_DWORD *)(v6 + 480) = 0;
  *(_OWORD *)(v6 + 448) = 0u;
  *(_OWORD *)(v6 + 464) = 0u;
  *(_OWORD *)(v6 + 416) = 0u;
  *(_OWORD *)(v6 + 432) = 0u;
  *(_QWORD *)(v6 + 484) = 0x7FFFFFFFLL;
  *(_BYTE *)(v6 + 496) = 0;
  *(_OWORD *)(v6 + 520) = 0u;
  *(_OWORD *)(v6 + 536) = 0u;
  *(_DWORD *)(v6 + 552) = 0;
  *(_QWORD *)(v6 + 556) = 0x7FFFFFFFLL;
  *(_QWORD *)(v6 + 600) = 0;
  *(_QWORD *)(v6 + 584) = 0;
  *(_DWORD *)(v6 + 592) = 0;
  *(_QWORD *)(v6 + 568) = 0;
  *(_QWORD *)(v6 + 576) = 0;
      + 80;
  *(_QWORD *)(v6 + 504) = v11;
  std::unique_ptr<re::RigHierarchy,std::function<void ()(re::RigHierarchy*)>>::~unique_ptr[abi:nn180100](&v17);
  v12 = v16;
  if (v16 == v15)
  {
    v13 = 4;
    v12 = v15;
    goto LABEL_5;
  }
  if (v16)
  {
    v13 = 5;
LABEL_5:
    (*(void (**)(void))(*v12 + 8 * v13))();
  }
  return v6;
}

uint64_t RETimelineDefinitionBlendTreeAddRigNode(_anonymous_namespace_ *a1, const char *a2, const char *a3, const char *a4, float a5)
{
  uint64_t v11;

  v11 = -1;
  {
    case '\'':
    case '(':
    case ')':
    case '*':
    case '+':
    case ',':
    case '-':
    case '.':
      TimelineDefinitionForBlendTree<float>::doAddRigNode(a1, a2, a3, a4, &v11, a5);
      break;
    default:
      return v11;
  }
  return v11;
}

void TimelineDefinitionForBlendTree<float>::doAddRigNode(_anonymous_namespace_ *a1, const char *a2, const char *a3, const char *a4, uint64_t *a5, float a6)
{
  _anonymous_namespace_ *v12;
  _anonymous_namespace_ *v13;
  StringID v14;
  StringID v15;
  StringID v16;

  *(_QWORD *)&v16.var0 = 0;
  v16.var1 = (char *)&str_110;
  *(_QWORD *)&v15.var0 = 0;
  v15.var1 = (char *)&str_110;
  *(_QWORD *)&v14.var0 = 0;
  if (a4)
  {
    v14.var1 = (char *)&str_110;
  }
  else
  {
    v14.var1 = "";
  }
  *a5 = re::AnimationBlendTreeBuilder<float>::addRigNode((uint64_t)a1 + 112, &v16, &v15, &v14, a6);
  re::StringID::destroyString((re::StringID *)&v14);
  re::StringID::destroyString((re::StringID *)&v15);
  re::StringID::destroyString((re::StringID *)&v16);
}

uint64_t RETimelineDefinitionBlendTreeAddBlend(_anonymous_namespace_ *a1, const char *a2, const char *a3, float a4)
{
  uint64_t v9;

  v9 = -1;
  {
    case '\'':
    case '(':
    case ')':
    case '*':
    case '+':
    case ',':
    case '-':
    case '.':
      TimelineDefinitionForBlendTree<float>::doAddBlendNode(a1, a2, a3, &v9, a4);
      break;
    default:
      return v9;
  }
  return v9;
}

void TimelineDefinitionForBlendTree<float>::doAddBlendNode(_anonymous_namespace_ *a1, const char *a2, const char *a3, uint64_t *a4, float a5)
{
  _anonymous_namespace_ *v10;
  uint64_t v11;
  StringID v12;
  StringID v13;
  StringID v14;

  *(_QWORD *)&v13.var0 = 0;
  v13.var1 = (char *)&str_110;
  *(_QWORD *)&v12.var0 = 0;
  if (a3)
  {
    v12.var1 = (char *)&str_110;
  }
  else
  {
    v12.var1 = "";
  }
  *(_QWORD *)&v14.var0 = 128540770;
  v14.var1 = "Blend";
  v11 = re::AnimationBlendTreeBuilder<float>::addRigNode((uint64_t)a1 + 112, &v14, &v13, &v12, a5);
  re::StringID::destroyString((re::StringID *)&v14);
  *a4 = v11;
  re::StringID::destroyString((re::StringID *)&v12);
  re::StringID::destroyString((re::StringID *)&v13);
}

uint64_t RETimelineDefinitionBlendTreeAddAdditiveBlend(_anonymous_namespace_ *a1, const char *a2, const char *a3, float a4)
{
  uint64_t v9;

  v9 = -1;
  {
    case '\'':
    case '(':
    case ')':
    case '*':
    case '+':
    case ',':
    case '-':
    case '.':
      TimelineDefinitionForBlendTree<float>::doAddAdditiveBlendNode(a1, a2, a3, &v9, a4);
      break;
    default:
      return v9;
  }
  return v9;
}

void TimelineDefinitionForBlendTree<float>::doAddAdditiveBlendNode(_anonymous_namespace_ *a1, const char *a2, const char *a3, uint64_t *a4, float a5)
{
  _anonymous_namespace_ *v10;
  uint64_t v11;
  StringID v12;
  StringID v13;
  StringID v14;

  *(_QWORD *)&v13.var0 = 0;
  v13.var1 = (char *)&str_110;
  *(_QWORD *)&v12.var0 = 0;
  if (a3)
  {
    v12.var1 = (char *)&str_110;
  }
  else
  {
    v12.var1 = "";
  }
  *(_QWORD *)&v14.var0 = 0xF17087402FF81E3ALL;
  v14.var1 = "BlendAdditive";
  v11 = re::AnimationBlendTreeBuilder<float>::addRigNode((uint64_t)a1 + 112, &v14, &v13, &v12, a5);
  re::StringID::destroyString((re::StringID *)&v14);
  *a4 = v11;
  re::StringID::destroyString((re::StringID *)&v12);
  re::StringID::destroyString((re::StringID *)&v13);
}

uint64_t RETimelineDefinitionBlendTreeAddTimelineSource(_anonymous_namespace_::TimelineDefinition *a1, uint64_t a2, const char *a3, AssetService *a4, const char *a5, float a6)
{
  uint64_t v10;
  re::AssetHandle *v11;
  _BYTE v13[24];
  _BYTE v14[24];
  _BYTE v15[24];
  _BYTE v16[24];
  _BYTE v17[24];
  _BYTE v18[24];
  _BYTE v19[24];
  _BYTE v20[24];
  uint64_t v21;
  void **v22[3];

  v10 = -1;
  v21 = -1;
  {
    case '\'':
      v11 = (re::AssetHandle *)v20;
      re::AssetHandle::AssetHandle((re::AssetHandle *)v20, (const re::AssetHandle *)v22);
      TimelineDefinitionForBlendTree<float>::doAddTimeline(a1, a3, (re::TimelineAsset *)v20, a5, &v21, a6);
      goto LABEL_10;
    case '(':
      v11 = (re::AssetHandle *)v19;
      re::AssetHandle::AssetHandle((re::AssetHandle *)v19, (const re::AssetHandle *)v22);
      TimelineDefinitionForBlendTree<double>::doAddTimeline(a1, a3, (re::TimelineAsset *)v19, a5, &v21, a6);
      goto LABEL_10;
    case ')':
      v11 = (re::AssetHandle *)v18;
      re::AssetHandle::AssetHandle((re::AssetHandle *)v18, (const re::AssetHandle *)v22);
      TimelineDefinitionForBlendTree<re::Vector2<float>>::doAddTimeline(a1, a3, (re::TimelineAsset *)v18, a5, &v21, a6);
      goto LABEL_10;
    case '*':
      v11 = (re::AssetHandle *)v17;
      re::AssetHandle::AssetHandle((re::AssetHandle *)v17, (const re::AssetHandle *)v22);
      TimelineDefinitionForBlendTree<re::Vector3<float>>::doAddTimeline(a1, a3, (re::TimelineAsset *)v17, a5, &v21, a6);
      goto LABEL_10;
    case '+':
      v11 = (re::AssetHandle *)v16;
      re::AssetHandle::AssetHandle((re::AssetHandle *)v16, (const re::AssetHandle *)v22);
      TimelineDefinitionForBlendTree<re::Vector4<float>>::doAddTimeline(a1, a3, (re::TimelineAsset *)v16, a5, &v21, a6);
      goto LABEL_10;
    case ',':
      v11 = (re::AssetHandle *)v15;
      re::AssetHandle::AssetHandle((re::AssetHandle *)v15, (const re::AssetHandle *)v22);
      TimelineDefinitionForBlendTree<re::Quaternion<float>>::doAddTimeline(a1, a3, (re::TimelineAsset *)v15, a5, &v21, a6);
      goto LABEL_10;
    case '-':
      v11 = (re::AssetHandle *)v14;
      re::AssetHandle::AssetHandle((re::AssetHandle *)v14, (const re::AssetHandle *)v22);
      TimelineDefinitionForBlendTree<re::GenericSRT<float>>::doAddTimeline(a1, a3, (re::TimelineAsset *)v14, a5, &v21, a6);
      goto LABEL_10;
    case '.':
      v11 = (re::AssetHandle *)v13;
      re::AssetHandle::AssetHandle((re::AssetHandle *)v13, (const re::AssetHandle *)v22);
      TimelineDefinitionForBlendTree<re::SkeletalPose>::doAddTimeline(a1, a3, (re::TimelineAsset *)v13, a5, &v21, a6);
LABEL_10:
      re::AssetHandle::~AssetHandle(v11);
      v10 = v21;
      break;
    default:
      break;
  }
  re::AssetHandle::~AssetHandle((re::AssetHandle *)v22);
  return v10;
}

void TimelineDefinitionForBlendTree<float>::doAddTimeline(_anonymous_namespace_::TimelineDefinition *a1, const char *a2, re::TimelineAsset *a3, const char *a4, uint64_t *a5, float a6)
{
  _anonymous_namespace_ *v12;
  uint64_t v13;
  int v14;
  NSObject *v15;
  unsigned int v16;
  unint64_t v17;
  BOOL v18;
  int v19;
  _anonymous_namespace_ *v21;
  _anonymous_namespace_ *v22;
  const char *v23;
  StringID v24;
  StringID v25;
  StringID buf;
  _BYTE v27[24];

  if (!*((_QWORD *)a3 + 1))
  {
    if (CoreRELog::onceToken != -1)
      dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
    v15 = (id)CoreRELog::log;
    if (!os_log_type_enabled(v15, OS_LOG_TYPE_ERROR))
      goto LABEL_9;
    *(_WORD *)&buf.var0 = 0;
    v23 = "Cannot add empty timeline to blend tree.";
    goto LABEL_24;
  }
  v12 = (_anonymous_namespace_ *)re::AssetHandle::asset<re::TimelineAsset>(a3);
  if (!v12)
    return;
  v13 = *((_QWORD *)v12 + 1);
  v14 = *(_DWORD *)(v13 + 8);
  if (v14 == 2)
  {
    if (*(_QWORD *)(v13 + 88) == 1)
    {
      re::AssetHandle::AssetHandle((re::AssetHandle *)v27, *(const re::AssetHandle **)(v13 + 104));
      TimelineDefinitionForBlendTree<float>::doAddTimeline(a1, a2, v27, a4, a5, a6);
      re::AssetHandle::~AssetHandle((re::AssetHandle *)v27);
    }
    return;
  }
  HIDWORD(v17) = v14 - 3;
  LODWORD(v17) = v14 - 3;
  v16 = v17 >> 2;
  v18 = v16 > 9;
  v19 = (1 << v16) & 0x255;
  if (v18 || v19 == 0)
  {
    if (CoreRELog::onceToken != -1)
      dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
    v15 = (id)CoreRELog::log;
    if (!os_log_type_enabled(v15, OS_LOG_TYPE_ERROR))
      goto LABEL_9;
    *(_WORD *)&buf.var0 = 0;
    v23 = "Cannot add incompatible timeline type to blend tree.";
LABEL_24:
    _os_log_error_impl(&dword_224FE9000, v15, OS_LOG_TYPE_ERROR, v23, (uint8_t *)&buf, 2u);
LABEL_9:

    return;
  }
  *(_QWORD *)&buf.var0 = 0;
  buf.var1 = (char *)&str_110;
  *(_QWORD *)&v25.var0 = 0;
  if (a4)
  {
    v25.var1 = (char *)&str_110;
  }
  else
  {
    v25.var1 = "";
  }
  *(_QWORD *)&v24.var0 = 0;
  v24.var1 = "";
  *a5 = re::AnimationBlendTreeBuilder<float>::addClip((uint64_t)a1 + 112, &buf, &v25, &v24, a6);
  re::StringID::destroyString((re::StringID *)&v24);
  re::StringID::destroyString((re::StringID *)&v25);
  re::StringID::destroyString((re::StringID *)&buf);
  re::DynamicArray<re::AssetHandle>::add((_anonymous_namespace_ *)((char *)v22 + 248), a3);
}

void TimelineDefinitionForBlendTree<double>::doAddTimeline(_anonymous_namespace_::TimelineDefinition *a1, const char *a2, re::TimelineAsset *a3, const char *a4, uint64_t *a5, float a6)
{
  _anonymous_namespace_ *v12;
  uint64_t v13;
  int v14;
  NSObject *v15;
  unsigned int v16;
  unint64_t v17;
  BOOL v18;
  int v19;
  _anonymous_namespace_ *v21;
  _anonymous_namespace_ *v22;
  const char *v23;
  StringID v24;
  StringID v25;
  StringID buf;
  _BYTE v27[24];

  if (!*((_QWORD *)a3 + 1))
  {
    if (CoreRELog::onceToken != -1)
      dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
    v15 = (id)CoreRELog::log;
    if (!os_log_type_enabled(v15, OS_LOG_TYPE_ERROR))
      goto LABEL_9;
    *(_WORD *)&buf.var0 = 0;
    v23 = "Cannot add empty timeline to blend tree.";
    goto LABEL_24;
  }
  v12 = (_anonymous_namespace_ *)re::AssetHandle::asset<re::TimelineAsset>(a3);
  if (!v12)
    return;
  v13 = *((_QWORD *)v12 + 1);
  v14 = *(_DWORD *)(v13 + 8);
  if (v14 == 2)
  {
    if (*(_QWORD *)(v13 + 88) == 1)
    {
      re::AssetHandle::AssetHandle((re::AssetHandle *)v27, *(const re::AssetHandle **)(v13 + 104));
      TimelineDefinitionForBlendTree<double>::doAddTimeline(a1, a2, v27, a4, a5, a6);
      re::AssetHandle::~AssetHandle((re::AssetHandle *)v27);
    }
    return;
  }
  HIDWORD(v17) = *(_DWORD *)(v13 + 8);
  LODWORD(v17) = v14 - 4;
  v16 = v17 >> 2;
  v18 = v16 > 9;
  v19 = (1 << v16) & 0x255;
  if (v18 || v19 == 0)
  {
    if (CoreRELog::onceToken != -1)
      dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
    v15 = (id)CoreRELog::log;
    if (!os_log_type_enabled(v15, OS_LOG_TYPE_ERROR))
      goto LABEL_9;
    *(_WORD *)&buf.var0 = 0;
    v23 = "Cannot add incompatible timeline type to blend tree.";
LABEL_24:
    _os_log_error_impl(&dword_224FE9000, v15, OS_LOG_TYPE_ERROR, v23, (uint8_t *)&buf, 2u);
LABEL_9:

    return;
  }
  *(_QWORD *)&buf.var0 = 0;
  buf.var1 = (char *)&str_110;
  *(_QWORD *)&v25.var0 = 0;
  if (a4)
  {
    v25.var1 = (char *)&str_110;
  }
  else
  {
    v25.var1 = "";
  }
  *(_QWORD *)&v24.var0 = 0;
  v24.var1 = "";
  *a5 = re::AnimationBlendTreeBuilder<float>::addClip((uint64_t)a1 + 112, &buf, &v25, &v24, a6);
  re::StringID::destroyString((re::StringID *)&v24);
  re::StringID::destroyString((re::StringID *)&v25);
  re::StringID::destroyString((re::StringID *)&buf);
  re::DynamicArray<re::AssetHandle>::add((_anonymous_namespace_ *)((char *)v22 + 248), a3);
}

void TimelineDefinitionForBlendTree<re::Vector2<float>>::doAddTimeline(_anonymous_namespace_::TimelineDefinition *a1, const char *a2, re::TimelineAsset *a3, const char *a4, uint64_t *a5, float a6)
{
  _anonymous_namespace_ *v12;
  uint64_t v13;
  int v14;
  NSObject *v15;
  unsigned int v16;
  unint64_t v17;
  BOOL v18;
  int v19;
  _anonymous_namespace_ *v21;
  _anonymous_namespace_ *v22;
  const char *v23;
  StringID v24;
  StringID v25;
  StringID buf;
  _BYTE v27[24];

  if (!*((_QWORD *)a3 + 1))
  {
    if (CoreRELog::onceToken != -1)
      dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
    v15 = (id)CoreRELog::log;
    if (!os_log_type_enabled(v15, OS_LOG_TYPE_ERROR))
      goto LABEL_9;
    *(_WORD *)&buf.var0 = 0;
    v23 = "Cannot add empty timeline to blend tree.";
    goto LABEL_24;
  }
  v12 = (_anonymous_namespace_ *)re::AssetHandle::asset<re::TimelineAsset>(a3);
  if (!v12)
    return;
  v13 = *((_QWORD *)v12 + 1);
  v14 = *(_DWORD *)(v13 + 8);
  if (v14 == 2)
  {
    if (*(_QWORD *)(v13 + 88) == 1)
    {
      re::AssetHandle::AssetHandle((re::AssetHandle *)v27, *(const re::AssetHandle **)(v13 + 104));
      TimelineDefinitionForBlendTree<re::Vector2<float>>::doAddTimeline(a1, a2, v27, a4, a5, a6);
      re::AssetHandle::~AssetHandle((re::AssetHandle *)v27);
    }
    return;
  }
  HIDWORD(v17) = v14 - 5;
  LODWORD(v17) = v14 - 5;
  v16 = v17 >> 2;
  v18 = v16 > 9;
  v19 = (1 << v16) & 0x255;
  if (v18 || v19 == 0)
  {
    if (CoreRELog::onceToken != -1)
      dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
    v15 = (id)CoreRELog::log;
    if (!os_log_type_enabled(v15, OS_LOG_TYPE_ERROR))
      goto LABEL_9;
    *(_WORD *)&buf.var0 = 0;
    v23 = "Cannot add incompatible timeline type to blend tree.";
LABEL_24:
    _os_log_error_impl(&dword_224FE9000, v15, OS_LOG_TYPE_ERROR, v23, (uint8_t *)&buf, 2u);
LABEL_9:

    return;
  }
  *(_QWORD *)&buf.var0 = 0;
  buf.var1 = (char *)&str_110;
  *(_QWORD *)&v25.var0 = 0;
  if (a4)
  {
    v25.var1 = (char *)&str_110;
  }
  else
  {
    v25.var1 = "";
  }
  *(_QWORD *)&v24.var0 = 0;
  v24.var1 = "";
  *a5 = re::AnimationBlendTreeBuilder<float>::addClip((uint64_t)a1 + 112, &buf, &v25, &v24, a6);
  re::StringID::destroyString((re::StringID *)&v24);
  re::StringID::destroyString((re::StringID *)&v25);
  re::StringID::destroyString((re::StringID *)&buf);
  re::DynamicArray<re::AssetHandle>::add((_anonymous_namespace_ *)((char *)v22 + 248), a3);
}

void TimelineDefinitionForBlendTree<re::Vector3<float>>::doAddTimeline(_anonymous_namespace_::TimelineDefinition *a1, const char *a2, re::TimelineAsset *a3, const char *a4, uint64_t *a5, float a6)
{
  _anonymous_namespace_ *v12;
  uint64_t v13;
  int v14;
  NSObject *v15;
  unsigned int v16;
  unint64_t v17;
  BOOL v18;
  int v19;
  _anonymous_namespace_ *v21;
  _anonymous_namespace_ *v22;
  const char *v23;
  StringID v24;
  StringID v25;
  StringID buf;
  _BYTE v27[24];

  if (!*((_QWORD *)a3 + 1))
  {
    if (CoreRELog::onceToken != -1)
      dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
    v15 = (id)CoreRELog::log;
    if (!os_log_type_enabled(v15, OS_LOG_TYPE_ERROR))
      goto LABEL_9;
    *(_WORD *)&buf.var0 = 0;
    v23 = "Cannot add empty timeline to blend tree.";
    goto LABEL_24;
  }
  v12 = (_anonymous_namespace_ *)re::AssetHandle::asset<re::TimelineAsset>(a3);
  if (!v12)
    return;
  v13 = *((_QWORD *)v12 + 1);
  v14 = *(_DWORD *)(v13 + 8);
  if (v14 == 2)
  {
    if (*(_QWORD *)(v13 + 88) == 1)
    {
      re::AssetHandle::AssetHandle((re::AssetHandle *)v27, *(const re::AssetHandle **)(v13 + 104));
      TimelineDefinitionForBlendTree<re::Vector3<float>>::doAddTimeline(a1, a2, v27, a4, a5, a6);
      re::AssetHandle::~AssetHandle((re::AssetHandle *)v27);
    }
    return;
  }
  HIDWORD(v17) = v14 - 6;
  LODWORD(v17) = v14 - 6;
  v16 = v17 >> 2;
  v18 = v16 > 9;
  v19 = (1 << v16) & 0x255;
  if (v18 || v19 == 0)
  {
    if (CoreRELog::onceToken != -1)
      dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
    v15 = (id)CoreRELog::log;
    if (!os_log_type_enabled(v15, OS_LOG_TYPE_ERROR))
      goto LABEL_9;
    *(_WORD *)&buf.var0 = 0;
    v23 = "Cannot add incompatible timeline type to blend tree.";
LABEL_24:
    _os_log_error_impl(&dword_224FE9000, v15, OS_LOG_TYPE_ERROR, v23, (uint8_t *)&buf, 2u);
LABEL_9:

    return;
  }
  *(_QWORD *)&buf.var0 = 0;
  buf.var1 = (char *)&str_110;
  *(_QWORD *)&v25.var0 = 0;
  if (a4)
  {
    v25.var1 = (char *)&str_110;
  }
  else
  {
    v25.var1 = "";
  }
  *(_QWORD *)&v24.var0 = 0;
  v24.var1 = "";
  *a5 = re::AnimationBlendTreeBuilder<float>::addClip((uint64_t)a1 + 112, &buf, &v25, &v24, a6);
  re::StringID::destroyString((re::StringID *)&v24);
  re::StringID::destroyString((re::StringID *)&v25);
  re::StringID::destroyString((re::StringID *)&buf);
  re::DynamicArray<re::AssetHandle>::add((_anonymous_namespace_ *)((char *)v22 + 248), a3);
}

void TimelineDefinitionForBlendTree<re::Vector4<float>>::doAddTimeline(_anonymous_namespace_::TimelineDefinition *a1, const char *a2, re::TimelineAsset *a3, const char *a4, uint64_t *a5, float a6)
{
  _anonymous_namespace_ *v12;
  uint64_t v13;
  int v14;
  NSObject *v15;
  unsigned int v16;
  unint64_t v17;
  BOOL v18;
  int v19;
  _anonymous_namespace_ *v21;
  _anonymous_namespace_ *v22;
  const char *v23;
  StringID v24;
  StringID v25;
  StringID buf;
  _BYTE v27[24];

  if (!*((_QWORD *)a3 + 1))
  {
    if (CoreRELog::onceToken != -1)
      dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
    v15 = (id)CoreRELog::log;
    if (!os_log_type_enabled(v15, OS_LOG_TYPE_ERROR))
      goto LABEL_9;
    *(_WORD *)&buf.var0 = 0;
    v23 = "Cannot add empty timeline to blend tree.";
    goto LABEL_24;
  }
  v12 = (_anonymous_namespace_ *)re::AssetHandle::asset<re::TimelineAsset>(a3);
  if (!v12)
    return;
  v13 = *((_QWORD *)v12 + 1);
  v14 = *(_DWORD *)(v13 + 8);
  if (v14 == 2)
  {
    if (*(_QWORD *)(v13 + 88) == 1)
    {
      re::AssetHandle::AssetHandle((re::AssetHandle *)v27, *(const re::AssetHandle **)(v13 + 104));
      TimelineDefinitionForBlendTree<re::Vector4<float>>::doAddTimeline(a1, a2, v27, a4, a5, a6);
      re::AssetHandle::~AssetHandle((re::AssetHandle *)v27);
    }
    return;
  }
  HIDWORD(v17) = v14 - 7;
  LODWORD(v17) = v14 - 7;
  v16 = v17 >> 2;
  v18 = v16 > 9;
  v19 = (1 << v16) & 0x255;
  if (v18 || v19 == 0)
  {
    if (CoreRELog::onceToken != -1)
      dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
    v15 = (id)CoreRELog::log;
    if (!os_log_type_enabled(v15, OS_LOG_TYPE_ERROR))
      goto LABEL_9;
    *(_WORD *)&buf.var0 = 0;
    v23 = "Cannot add incompatible timeline type to blend tree.";
LABEL_24:
    _os_log_error_impl(&dword_224FE9000, v15, OS_LOG_TYPE_ERROR, v23, (uint8_t *)&buf, 2u);
LABEL_9:

    return;
  }
  *(_QWORD *)&buf.var0 = 0;
  buf.var1 = (char *)&str_110;
  *(_QWORD *)&v25.var0 = 0;
  if (a4)
  {
    v25.var1 = (char *)&str_110;
  }
  else
  {
    v25.var1 = "";
  }
  *(_QWORD *)&v24.var0 = 0;
  v24.var1 = "";
  *a5 = re::AnimationBlendTreeBuilder<float>::addClip((uint64_t)a1 + 112, &buf, &v25, &v24, a6);
  re::StringID::destroyString((re::StringID *)&v24);
  re::StringID::destroyString((re::StringID *)&v25);
  re::StringID::destroyString((re::StringID *)&buf);
  re::DynamicArray<re::AssetHandle>::add((_anonymous_namespace_ *)((char *)v22 + 248), a3);
}

void TimelineDefinitionForBlendTree<re::Quaternion<float>>::doAddTimeline(_anonymous_namespace_::TimelineDefinition *a1, const char *a2, re::TimelineAsset *a3, const char *a4, uint64_t *a5, float a6)
{
  _anonymous_namespace_ *v12;
  uint64_t v13;
  int v14;
  NSObject *v15;
  unsigned int v16;
  unint64_t v17;
  BOOL v18;
  int v19;
  _anonymous_namespace_ *v21;
  _anonymous_namespace_ *v22;
  const char *v23;
  StringID v24;
  StringID v25;
  StringID buf;
  _BYTE v27[24];

  if (!*((_QWORD *)a3 + 1))
  {
    if (CoreRELog::onceToken != -1)
      dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
    v15 = (id)CoreRELog::log;
    if (!os_log_type_enabled(v15, OS_LOG_TYPE_ERROR))
      goto LABEL_9;
    *(_WORD *)&buf.var0 = 0;
    v23 = "Cannot add empty timeline to blend tree.";
    goto LABEL_24;
  }
  v12 = (_anonymous_namespace_ *)re::AssetHandle::asset<re::TimelineAsset>(a3);
  if (!v12)
    return;
  v13 = *((_QWORD *)v12 + 1);
  v14 = *(_DWORD *)(v13 + 8);
  if (v14 == 2)
  {
    if (*(_QWORD *)(v13 + 88) == 1)
    {
      re::AssetHandle::AssetHandle((re::AssetHandle *)v27, *(const re::AssetHandle **)(v13 + 104));
      TimelineDefinitionForBlendTree<re::Quaternion<float>>::doAddTimeline(a1, a2, v27, a4, a5, a6);
      re::AssetHandle::~AssetHandle((re::AssetHandle *)v27);
    }
    return;
  }
  HIDWORD(v17) = *(_DWORD *)(v13 + 8);
  LODWORD(v17) = v14 - 8;
  v16 = v17 >> 2;
  v18 = v16 > 9;
  v19 = (1 << v16) & 0x255;
  if (v18 || v19 == 0)
  {
    if (CoreRELog::onceToken != -1)
      dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
    v15 = (id)CoreRELog::log;
    if (!os_log_type_enabled(v15, OS_LOG_TYPE_ERROR))
      goto LABEL_9;
    *(_WORD *)&buf.var0 = 0;
    v23 = "Cannot add incompatible timeline type to blend tree.";
LABEL_24:
    _os_log_error_impl(&dword_224FE9000, v15, OS_LOG_TYPE_ERROR, v23, (uint8_t *)&buf, 2u);
LABEL_9:

    return;
  }
  *(_QWORD *)&buf.var0 = 0;
  buf.var1 = (char *)&str_110;
  *(_QWORD *)&v25.var0 = 0;
  if (a4)
  {
    v25.var1 = (char *)&str_110;
  }
  else
  {
    v25.var1 = "";
  }
  *(_QWORD *)&v24.var0 = 0;
  v24.var1 = "";
  *a5 = re::AnimationBlendTreeBuilder<float>::addClip((uint64_t)a1 + 112, &buf, &v25, &v24, a6);
  re::StringID::destroyString((re::StringID *)&v24);
  re::StringID::destroyString((re::StringID *)&v25);
  re::StringID::destroyString((re::StringID *)&buf);
  re::DynamicArray<re::AssetHandle>::add((_anonymous_namespace_ *)((char *)v22 + 248), a3);
}

void TimelineDefinitionForBlendTree<re::GenericSRT<float>>::doAddTimeline(_anonymous_namespace_::TimelineDefinition *a1, const char *a2, re::TimelineAsset *a3, const char *a4, uint64_t *a5, float a6)
{
  _anonymous_namespace_ *v12;
  uint64_t v13;
  uint64_t v14;
  _anonymous_namespace_ *v15;
  NSObject *v16;
  _anonymous_namespace_ *v17;
  const char *v18;
  StringID v19;
  StringID v20;
  StringID buf;
  _BYTE v22[24];

  if (!*((_QWORD *)a3 + 1))
  {
    if (CoreRELog::onceToken != -1)
      dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
    v16 = (id)CoreRELog::log;
    if (!os_log_type_enabled(v16, OS_LOG_TYPE_ERROR))
      goto LABEL_10;
    *(_WORD *)&buf.var0 = 0;
    v18 = "Cannot add empty timeline to blend tree.";
    goto LABEL_22;
  }
  v12 = (_anonymous_namespace_ *)re::AssetHandle::asset<re::TimelineAsset>(a3);
  if (!v12)
    return;
  v13 = *((_QWORD *)v12 + 1);
  v14 = *(unsigned int *)(v13 + 8);
  if (v14 > 0x2D)
    goto LABEL_17;
  if (((1 << v14) & 0x201202020200) != 0)
  {
    *(_QWORD *)&buf.var0 = 0;
    buf.var1 = (char *)&str_110;
    *(_QWORD *)&v20.var0 = 0;
    if (a4)
    {
      v20.var1 = (char *)&str_110;
    }
    else
    {
      v20.var1 = "";
    }
    *(_QWORD *)&v19.var0 = 0;
    v19.var1 = "";
    *a5 = re::AnimationBlendTreeBuilder<float>::addClip((uint64_t)a1 + 112, &buf, &v20, &v19, a6);
    re::StringID::destroyString((re::StringID *)&v19);
    re::StringID::destroyString((re::StringID *)&v20);
    re::StringID::destroyString((re::StringID *)&buf);
    re::DynamicArray<re::AssetHandle>::add((_anonymous_namespace_ *)((char *)v17 + 248), a3);
    return;
  }
  if (v14 != 2)
  {
LABEL_17:
    if (CoreRELog::onceToken != -1)
      dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
    v16 = (id)CoreRELog::log;
    if (!os_log_type_enabled(v16, OS_LOG_TYPE_ERROR))
      goto LABEL_10;
    *(_WORD *)&buf.var0 = 0;
    v18 = "Cannot add incompatible timeline type to blend tree.";
LABEL_22:
    _os_log_error_impl(&dword_224FE9000, v16, OS_LOG_TYPE_ERROR, v18, (uint8_t *)&buf, 2u);
LABEL_10:

    return;
  }
  if (*(_QWORD *)(v13 + 88) == 1)
  {
    re::AssetHandle::AssetHandle((re::AssetHandle *)v22, *(const re::AssetHandle **)(v13 + 104));
    TimelineDefinitionForBlendTree<re::GenericSRT<float>>::doAddTimeline(a1, a2, v22, a4, a5, a6);
    re::AssetHandle::~AssetHandle((re::AssetHandle *)v22);
  }
}

void TimelineDefinitionForBlendTree<re::SkeletalPose>::doAddTimeline(_anonymous_namespace_::TimelineDefinition *a1, const char *a2, re::TimelineAsset *a3, const char *a4, uint64_t *a5, float a6)
{
  _anonymous_namespace_ *v12;
  uint64_t v13;
  uint64_t v14;
  _anonymous_namespace_ *v15;
  NSObject *v16;
  _anonymous_namespace_ *v17;
  const char *v18;
  StringID v19;
  StringID v20;
  StringID buf;
  _BYTE v22[24];

  if (!*((_QWORD *)a3 + 1))
  {
    if (CoreRELog::onceToken != -1)
      dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
    v16 = (id)CoreRELog::log;
    if (!os_log_type_enabled(v16, OS_LOG_TYPE_ERROR))
      goto LABEL_10;
    *(_WORD *)&buf.var0 = 0;
    v18 = "Cannot add empty timeline to blend tree.";
    goto LABEL_22;
  }
  v12 = (_anonymous_namespace_ *)re::AssetHandle::asset<re::TimelineAsset>(a3);
  if (!v12)
    return;
  v13 = *((_QWORD *)v12 + 1);
  v14 = *(unsigned int *)(v13 + 8);
  if (v14 > 0x2E)
    goto LABEL_17;
  if (((1 << v14) & 0x400C04040400) != 0)
  {
    *(_QWORD *)&buf.var0 = 0;
    buf.var1 = (char *)&str_110;
    *(_QWORD *)&v20.var0 = 0;
    if (a4)
    {
      v20.var1 = (char *)&str_110;
    }
    else
    {
      v20.var1 = "";
    }
    *(_QWORD *)&v19.var0 = 0;
    v19.var1 = "";
    *a5 = re::AnimationBlendTreeBuilder<float>::addClip((uint64_t)a1 + 112, &buf, &v20, &v19, a6);
    re::StringID::destroyString((re::StringID *)&v19);
    re::StringID::destroyString((re::StringID *)&v20);
    re::StringID::destroyString((re::StringID *)&buf);
    re::DynamicArray<re::AssetHandle>::add((_anonymous_namespace_ *)((char *)v17 + 248), a3);
    return;
  }
  if (v14 != 2)
  {
LABEL_17:
    if (CoreRELog::onceToken != -1)
      dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
    v16 = (id)CoreRELog::log;
    if (!os_log_type_enabled(v16, OS_LOG_TYPE_ERROR))
      goto LABEL_10;
    *(_WORD *)&buf.var0 = 0;
    v18 = "Cannot add incompatible timeline type to blend tree.";
LABEL_22:
    _os_log_error_impl(&dword_224FE9000, v16, OS_LOG_TYPE_ERROR, v18, (uint8_t *)&buf, 2u);
LABEL_10:

    return;
  }
  if (*(_QWORD *)(v13 + 88) == 1)
  {
    re::AssetHandle::AssetHandle((re::AssetHandle *)v22, *(const re::AssetHandle **)(v13 + 104));
    TimelineDefinitionForBlendTree<re::SkeletalPose>::doAddTimeline(a1, a2, v22, a4, a5, a6);
    re::AssetHandle::~AssetHandle((re::AssetHandle *)v22);
  }
}

void RETimelineDefinitionBlendTreeAddTimeline(_anonymous_namespace_::TimelineDefinition *a1, const char *a2, uint64_t a3, const char *a4, float a5)
{
  uint64_t *v10;
  uint64_t v11[3];
  uint64_t v12[3];
  uint64_t v13[3];
  uint64_t v14[3];
  uint64_t v15[3];
  uint64_t v16[3];
  uint64_t v17[3];
  uint64_t v18[3];
  uint64_t v19;

  {
    case '\'':
      v10 = v18;
      re::AssetAPIHelper::assetHandleCreate(a3, v18);
      TimelineDefinitionForBlendTree<float>::doAddTimeline(a1, a2, (re::TimelineAsset *)v18, a4, &v19, a5);
      goto LABEL_10;
    case '(':
      v10 = v17;
      re::AssetAPIHelper::assetHandleCreate(a3, v17);
      TimelineDefinitionForBlendTree<double>::doAddTimeline(a1, a2, (re::TimelineAsset *)v17, a4, &v19, a5);
      goto LABEL_10;
    case ')':
      v10 = v16;
      re::AssetAPIHelper::assetHandleCreate(a3, v16);
      TimelineDefinitionForBlendTree<re::Vector2<float>>::doAddTimeline(a1, a2, (re::TimelineAsset *)v16, a4, &v19, a5);
      goto LABEL_10;
    case '*':
      v10 = v15;
      re::AssetAPIHelper::assetHandleCreate(a3, v15);
      TimelineDefinitionForBlendTree<re::Vector3<float>>::doAddTimeline(a1, a2, (re::TimelineAsset *)v15, a4, &v19, a5);
      goto LABEL_10;
    case '+':
      v10 = v14;
      re::AssetAPIHelper::assetHandleCreate(a3, v14);
      TimelineDefinitionForBlendTree<re::Vector4<float>>::doAddTimeline(a1, a2, (re::TimelineAsset *)v14, a4, &v19, a5);
      goto LABEL_10;
    case ',':
      v10 = v13;
      re::AssetAPIHelper::assetHandleCreate(a3, v13);
      TimelineDefinitionForBlendTree<re::Quaternion<float>>::doAddTimeline(a1, a2, (re::TimelineAsset *)v13, a4, &v19, a5);
      goto LABEL_10;
    case '-':
      v10 = v12;
      re::AssetAPIHelper::assetHandleCreate(a3, v12);
      TimelineDefinitionForBlendTree<re::GenericSRT<float>>::doAddTimeline(a1, a2, (re::TimelineAsset *)v12, a4, &v19, a5);
      goto LABEL_10;
    case '.':
      v10 = v11;
      re::AssetAPIHelper::assetHandleCreate(a3, v11);
      TimelineDefinitionForBlendTree<re::SkeletalPose>::doAddTimeline(a1, a2, (re::TimelineAsset *)v11, a4, &v19, a5);
LABEL_10:
      re::AssetHandle::~AssetHandle((re::AssetHandle *)v10);
      break;
    default:
      return;
  }
}

uint64_t RETimelineDefinitionBlendTreeAddInput(_anonymous_namespace_ *a1, const char *a2, const char *a3, const char *a4, const char *a5, float a6)
{
  uint64_t v13;

  v13 = -1;
  {
    case '\'':
    case '(':
    case ')':
    case '*':
    case '+':
    case ',':
    case '-':
    case '.':
      TimelineDefinitionForBlendTree<float>::doAddInput(a1, a2, a3, a4, a5, &v13, a6);
      break;
    default:
      return v13;
  }
  return v13;
}

void TimelineDefinitionForBlendTree<float>::doAddInput(_anonymous_namespace_ *a1, const char *a2, const char *a3, const char *a4, const char *a5, _QWORD *a6, float a7)
{
  _anonymous_namespace_ *v14;
  _anonymous_namespace_ *v15;
  _anonymous_namespace_ *v16;
  StringID v17;
  StringID v18;
  StringID v19;
  StringID v20;
  float v21[4];
  _QWORD v22[2];
  _QWORD v23[2];
  _BYTE v24[16];
  _DWORD v25[6];

  *(_QWORD *)&v20.var0 = 0;
  v20.var1 = (char *)&str_110;
  *(_QWORD *)&v19.var0 = 0;
  v19.var1 = (char *)&str_110;
  *(_QWORD *)&v18.var0 = 0;
  if (a4)
  {
    v18.var1 = (char *)&str_110;
  }
  else
  {
    v18.var1 = "";
  }
  *(_QWORD *)&v17.var0 = 0;
  if (a5)
  {
    v17.var1 = (char *)&str_110;
  }
  else
  {
    v17.var1 = "";
  }
  v16 = (_anonymous_namespace_ *)*((_QWORD *)a1 + 63);
  re::StringID::StringID((re::StringID *)v21, &v20);
  v22[0] = 141610836;
  v22[1] = "Input";
  if (*(_QWORD *)&v19.var0 <= 1uLL && v19.var1 && !*v19.var1)
  {
    v23[0] = 0x19BD80BACLL;
    v23[1] = "unused";
  }
  else
  {
    re::StringID::StringID((re::StringID *)v23, &v19);
  }
  re::StringID::StringID((re::StringID *)v24, &v18);
  re::StringID::StringID((re::StringID *)v25, &v17);
  *(float *)&v25[4] = a7;
  re::DynamicArray<re::AnimationBlendTreeNodeDescription>::add(v16, v21);
  re::StringID::destroyString((re::StringID *)v25);
  re::StringID::destroyString((re::StringID *)v24);
  re::StringID::destroyString((re::StringID *)v23);
  re::StringID::destroyString((re::StringID *)v22);
  re::StringID::destroyString((re::StringID *)v21);
  *a6 = *(_QWORD *)(*((_QWORD *)a1 + 63) + 16) - 1;
  re::StringID::destroyString((re::StringID *)&v17);
  re::StringID::destroyString((re::StringID *)&v18);
  re::StringID::destroyString((re::StringID *)&v19);
  re::StringID::destroyString((re::StringID *)&v20);
}

uint64_t RETimelineDefinitionBlendTreeAddConnection(_anonymous_namespace_ *a1, const char *a2, const char *a3)
{
  uint64_t v7;

  v7 = -1;
  {
    case '\'':
    case '(':
    case ')':
    case '*':
    case '+':
    case ',':
    case '-':
    case '.':
      TimelineDefinitionForBlendTree<float>::doAddConnection(a1, a2, a3, 0, 0, &v7);
      break;
    default:
      return v7;
  }
  return v7;
}

void TimelineDefinitionForBlendTree<float>::doAddConnection(_anonymous_namespace_ *a1, const char *a2, const char *a3, const char *a4, const char *a5, uint64_t *a6)
{
  _anonymous_namespace_ *v12;
  _anonymous_namespace_ *v13;
  StringID v14;
  StringID v15;
  StringID v16;
  StringID v17;

  *(_QWORD *)&v17.var0 = 0;
  v17.var1 = (char *)&str_110;
  *(_QWORD *)&v16.var0 = 0;
  v16.var1 = (char *)&str_110;
  *(_QWORD *)&v15.var0 = 0;
  if (a4)
  {
    v15.var1 = (char *)&str_110;
  }
  else
  {
    v15.var1 = "";
  }
  *(_QWORD *)&v14.var0 = 0;
  if (a5)
  {
    v14.var1 = (char *)&str_110;
  }
  else
  {
    v14.var1 = "";
  }
  *a6 = re::AnimationBlendTreeBuilder<float>::addConnection((uint64_t)a1 + 112, &v17, &v16, &v15, &v14);
  re::StringID::destroyString((re::StringID *)&v14);
  re::StringID::destroyString((re::StringID *)&v15);
  re::StringID::destroyString((re::StringID *)&v16);
  re::StringID::destroyString((re::StringID *)&v17);
}

uint64_t RETimelineDefinitionBlendTreeAddBlendSpace(_anonymous_namespace_::TimelineDefinition *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t i;
  const char *v8;
  _anonymous_namespace_ *v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *var1;
  const char *v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  const StringID *v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD *v25;
  _QWORD *v26;
  _anonymous_namespace_ *v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  int v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  const StringID *v36;
  uint64_t v37;
  uint64_t v38;
  _QWORD *v39;
  _QWORD *v40;
  _anonymous_namespace_ *v41;
  unint64_t v42;
  uint64_t v43;
  uint64_t v44;
  int v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  const StringID *v49;
  uint64_t v50;
  uint64_t v51;
  _QWORD *v52;
  _QWORD *v53;
  _anonymous_namespace_ *v54;
  unint64_t v55;
  uint64_t v56;
  uint64_t v57;
  int v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  const StringID *v62;
  uint64_t v63;
  uint64_t v64;
  _QWORD *v65;
  _QWORD *v66;
  _anonymous_namespace_ *v67;
  unint64_t v68;
  uint64_t v69;
  uint64_t v70;
  int v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  const StringID *v75;
  uint64_t v76;
  uint64_t v77;
  _QWORD *v78;
  _QWORD *v79;
  _anonymous_namespace_ *v80;
  unint64_t v81;
  uint64_t v82;
  uint64_t v83;
  int v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  const StringID *v88;
  uint64_t v89;
  uint64_t v90;
  _QWORD *v91;
  _QWORD *v92;
  _anonymous_namespace_ *v93;
  unint64_t v94;
  uint64_t v95;
  uint64_t v96;
  int v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  const StringID *v101;
  uint64_t v102;
  uint64_t v103;
  _QWORD *v104;
  _QWORD *v105;
  _anonymous_namespace_ *v106;
  unint64_t v107;
  uint64_t v108;
  uint64_t v109;
  int v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  const StringID *v114;
  uint64_t v115;
  uint64_t v116;
  _QWORD *v117;
  _QWORD *v118;
  _anonymous_namespace_ *v119;
  unint64_t v120;
  uint64_t v121;
  uint64_t v122;
  StringID v129;
  __int128 v130;
  __int128 v131;
  int v132;
  uint64_t v133;
  StringID v134;
  StringID v135;

  v132 = 0;
  v130 = 0u;
  v131 = 0u;
  v133 = 0x7FFFFFFFLL;
  if (a5)
  {
    for (i = 0; i != a5; ++i)
    {
      v8 = *(const char **)(a4 + 8 * i);
      *(_QWORD *)&v135.var0 = 0;
      v135.var1 = (char *)&str_110;
      v10 = *(_QWORD *)&v135.var0;
      v11 = 0x94D049BB133111EBLL
          * ((0xBF58476D1CE4E5B9 * ((v10 >> 31) ^ (v10 >> 1))) ^ ((0xBF58476D1CE4E5B9 * ((v10 >> 31) ^ (v10 >> 1))) >> 27));
      v12 = v11 ^ (v11 >> 31);
      if ((_QWORD)v130)
      {
        v13 = v12 % DWORD2(v131);
        v14 = *(unsigned int *)(*((_QWORD *)&v130 + 1) + 4 * v13);
        if ((_DWORD)v14 != 0x7FFFFFFF)
        {
          v15 = v131;
          var1 = v135.var1;
          do
          {
            if ((*(_QWORD *)(v15 + 48 * v14 + 8) ^ v10) <= 1)
            {
              v17 = *(const char **)(v15 + 48 * v14 + 16);
              if (v17 == var1 || !strcmp(v17, var1))
                goto LABEL_13;
            }
            v14 = *(_DWORD *)(v15 + 48 * v14) & 0x7FFFFFFF;
          }
          while (v14 != 0x7FFFFFFF);
        }
      }
      else
      {
        LODWORD(v13) = 0;
      }
      re::HashTable<re::StringID,re::AssetHandle,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::addEmplace<re::AssetHandle&>((uint64_t)&v130, v13, v12, &v135, (const re::AssetHandle *)&v129);
      ++HIDWORD(v133);
LABEL_13:
      re::StringID::destroyString((re::StringID *)&v135);
      re::AssetHandle::~AssetHandle((re::AssetHandle *)&v129);
    }
  }
  {
    case '\'':
      v18 = *(_DWORD *)(a6 + 24);
      if (!v18)
        goto LABEL_135;
      v19 = (uint64_t)a1 + 112;
      v20 = *((_QWORD *)a1 + 63);
      *(_DWORD *)(v20 + 80) = v18;
      re::DynamicArray<re::BlendSpaceAxisDefinition>::operator=(v20 + 88, (uint64_t *)(a6 + 32));
      re::DynamicArray<re::BlendSpaceSampleDefinition>::operator=(v20 + 128, (uint64_t *)(a6 + 72));
      *(_QWORD *)&v135.var0 = 7012804;
      v135.var1 = "root";
      *(_QWORD *)&v134.var0 = 0;
      v134.var1 = "";
      *(_QWORD *)&v129.var0 = 128540770;
      v129.var1 = "Blend";
      re::AnimationBlendTreeBuilder<float>::addRigNode((uint64_t)a1 + 112, &v129, &v135, &v134, 1.0);
      re::StringID::destroyString((re::StringID *)&v129);
      re::StringID::destroyString((re::StringID *)&v134);
      re::StringID::destroyString((re::StringID *)&v135);
      v21 = *(_QWORD *)(a6 + 88);
      if (!v21)
        goto LABEL_136;
      v22 = *(const StringID **)(a6 + 104);
      v23 = v21 << 6;
      do
      {
        *(_QWORD *)&v129.var0 = 0;
        v129.var1 = "";
        re::AnimationBlendTreeBuilder<float>::addClip(v19, v22, &v129, v22, 0.0);
        re::StringID::destroyString((re::StringID *)&v129);
        *(_QWORD *)&v129.var0 = 7012804;
        v129.var1 = "root";
        *(_QWORD *)&v135.var0 = 0;
        v135.var1 = "";
        *(_QWORD *)&v134.var0 = 0;
        v134.var1 = "";
        re::AnimationBlendTreeBuilder<float>::addConnection(v19, v22, &v129, &v135, &v134);
        re::StringID::destroyString((re::StringID *)&v134);
        re::StringID::destroyString((re::StringID *)&v135);
        re::StringID::destroyString((re::StringID *)&v129);
        v22 += 4;
        v23 -= 64;
      }
      while (v23);
      v24 = *(_QWORD *)(a6 + 88);
      if (!v24)
        goto LABEL_136;
      v25 = *(_QWORD **)(a6 + 104);
      v26 = &v25[8 * v24];
      while (1)
      {
        if ((_QWORD)v130)
        {
          v28 = 0xBF58476D1CE4E5B9 * ((*v25 >> 31) ^ (*v25 >> 1));
          v29 = v131;
          v30 = *(unsigned int *)(*((_QWORD *)&v130 + 1)
                                + 4
                                * (((0x94D049BB133111EBLL * (v28 ^ (v28 >> 27))) ^ ((0x94D049BB133111EBLL
                                                                                   * (v28 ^ (v28 >> 27))) >> 31))
                                 % DWORD2(v131)));
          if ((_DWORD)v30 != 0x7FFFFFFF)
          {
            while (!re::StringID::operator==((_QWORD *)(v29 + 48 * v30 + 8), v25))
            {
              v30 = *(_DWORD *)(v29 + 48 * v30) & 0x7FFFFFFF;
              if (v30 == 0x7FFFFFFF)
                goto LABEL_27;
            }
            goto LABEL_28;
          }
        }
        else
        {
          v29 = v131;
        }
LABEL_27:
        v30 = 0x7FFFFFFFLL;
LABEL_28:
        re::DynamicArray<re::AssetHandle>::add((_anonymous_namespace_ *)((char *)v27 + 248), (re::AssetHandle *)(v29 + 48 * v30 + 24));
        v25 += 8;
        v31 = 1;
        if (v25 == v26)
          goto LABEL_137;
      }
    case '(':
      v32 = *(_DWORD *)(a6 + 24);
      if (!v32)
        goto LABEL_135;
      v33 = (uint64_t)a1 + 112;
      v34 = *((_QWORD *)a1 + 63);
      *(_DWORD *)(v34 + 80) = v32;
      re::DynamicArray<re::BlendSpaceAxisDefinition>::operator=(v34 + 88, (uint64_t *)(a6 + 32));
      re::DynamicArray<re::BlendSpaceSampleDefinition>::operator=(v34 + 128, (uint64_t *)(a6 + 72));
      *(_QWORD *)&v135.var0 = 7012804;
      v135.var1 = "root";
      *(_QWORD *)&v134.var0 = 0;
      v134.var1 = "";
      *(_QWORD *)&v129.var0 = 128540770;
      v129.var1 = "Blend";
      re::AnimationBlendTreeBuilder<float>::addRigNode((uint64_t)a1 + 112, &v129, &v135, &v134, 1.0);
      re::StringID::destroyString((re::StringID *)&v129);
      re::StringID::destroyString((re::StringID *)&v134);
      re::StringID::destroyString((re::StringID *)&v135);
      v35 = *(_QWORD *)(a6 + 88);
      if (!v35)
        goto LABEL_136;
      v36 = *(const StringID **)(a6 + 104);
      v37 = v35 << 6;
      do
      {
        *(_QWORD *)&v129.var0 = 0;
        v129.var1 = "";
        re::AnimationBlendTreeBuilder<float>::addClip(v33, v36, &v129, v36, 0.0);
        re::StringID::destroyString((re::StringID *)&v129);
        *(_QWORD *)&v129.var0 = 7012804;
        v129.var1 = "root";
        *(_QWORD *)&v135.var0 = 0;
        v135.var1 = "";
        *(_QWORD *)&v134.var0 = 0;
        v134.var1 = "";
        re::AnimationBlendTreeBuilder<float>::addConnection(v33, v36, &v129, &v135, &v134);
        re::StringID::destroyString((re::StringID *)&v134);
        re::StringID::destroyString((re::StringID *)&v135);
        re::StringID::destroyString((re::StringID *)&v129);
        v36 += 4;
        v37 -= 64;
      }
      while (v37);
      v38 = *(_QWORD *)(a6 + 88);
      if (!v38)
        goto LABEL_136;
      v39 = *(_QWORD **)(a6 + 104);
      v40 = &v39[8 * v38];
      while (1)
      {
        if ((_QWORD)v130)
        {
          v42 = 0xBF58476D1CE4E5B9 * ((*v39 >> 31) ^ (*v39 >> 1));
          v43 = v131;
          v44 = *(unsigned int *)(*((_QWORD *)&v130 + 1)
                                + 4
                                * (((0x94D049BB133111EBLL * (v42 ^ (v42 >> 27))) ^ ((0x94D049BB133111EBLL
                                                                                   * (v42 ^ (v42 >> 27))) >> 31))
                                 % DWORD2(v131)));
          if ((_DWORD)v44 != 0x7FFFFFFF)
          {
            while (!re::StringID::operator==((_QWORD *)(v43 + 48 * v44 + 8), v39))
            {
              v44 = *(_DWORD *)(v43 + 48 * v44) & 0x7FFFFFFF;
              if (v44 == 0x7FFFFFFF)
                goto LABEL_42;
            }
            goto LABEL_43;
          }
        }
        else
        {
          v43 = v131;
        }
LABEL_42:
        v44 = 0x7FFFFFFFLL;
LABEL_43:
        re::DynamicArray<re::AssetHandle>::add((_anonymous_namespace_ *)((char *)v41 + 248), (re::AssetHandle *)(v43 + 48 * v44 + 24));
        v39 += 8;
        v31 = 1;
        if (v39 == v40)
          goto LABEL_137;
      }
    case ')':
      v45 = *(_DWORD *)(a6 + 24);
      if (!v45)
        goto LABEL_135;
      v46 = (uint64_t)a1 + 112;
      v47 = *((_QWORD *)a1 + 63);
      *(_DWORD *)(v47 + 80) = v45;
      re::DynamicArray<re::BlendSpaceAxisDefinition>::operator=(v47 + 88, (uint64_t *)(a6 + 32));
      re::DynamicArray<re::BlendSpaceSampleDefinition>::operator=(v47 + 128, (uint64_t *)(a6 + 72));
      *(_QWORD *)&v135.var0 = 7012804;
      v135.var1 = "root";
      *(_QWORD *)&v134.var0 = 0;
      v134.var1 = "";
      *(_QWORD *)&v129.var0 = 128540770;
      v129.var1 = "Blend";
      re::AnimationBlendTreeBuilder<float>::addRigNode((uint64_t)a1 + 112, &v129, &v135, &v134, 1.0);
      re::StringID::destroyString((re::StringID *)&v129);
      re::StringID::destroyString((re::StringID *)&v134);
      re::StringID::destroyString((re::StringID *)&v135);
      v48 = *(_QWORD *)(a6 + 88);
      if (!v48)
        goto LABEL_136;
      v49 = *(const StringID **)(a6 + 104);
      v50 = v48 << 6;
      do
      {
        *(_QWORD *)&v129.var0 = 0;
        v129.var1 = "";
        re::AnimationBlendTreeBuilder<float>::addClip(v46, v49, &v129, v49, 0.0);
        re::StringID::destroyString((re::StringID *)&v129);
        *(_QWORD *)&v129.var0 = 7012804;
        v129.var1 = "root";
        *(_QWORD *)&v135.var0 = 0;
        v135.var1 = "";
        *(_QWORD *)&v134.var0 = 0;
        v134.var1 = "";
        re::AnimationBlendTreeBuilder<float>::addConnection(v46, v49, &v129, &v135, &v134);
        re::StringID::destroyString((re::StringID *)&v134);
        re::StringID::destroyString((re::StringID *)&v135);
        re::StringID::destroyString((re::StringID *)&v129);
        v49 += 4;
        v50 -= 64;
      }
      while (v50);
      v51 = *(_QWORD *)(a6 + 88);
      if (!v51)
        goto LABEL_136;
      v52 = *(_QWORD **)(a6 + 104);
      v53 = &v52[8 * v51];
      while (1)
      {
        if ((_QWORD)v130)
        {
          v55 = 0xBF58476D1CE4E5B9 * ((*v52 >> 31) ^ (*v52 >> 1));
          v56 = v131;
          v57 = *(unsigned int *)(*((_QWORD *)&v130 + 1)
                                + 4
                                * (((0x94D049BB133111EBLL * (v55 ^ (v55 >> 27))) ^ ((0x94D049BB133111EBLL
                                                                                   * (v55 ^ (v55 >> 27))) >> 31))
                                 % DWORD2(v131)));
          if ((_DWORD)v57 != 0x7FFFFFFF)
          {
            while (!re::StringID::operator==((_QWORD *)(v56 + 48 * v57 + 8), v52))
            {
              v57 = *(_DWORD *)(v56 + 48 * v57) & 0x7FFFFFFF;
              if (v57 == 0x7FFFFFFF)
                goto LABEL_57;
            }
            goto LABEL_58;
          }
        }
        else
        {
          v56 = v131;
        }
LABEL_57:
        v57 = 0x7FFFFFFFLL;
LABEL_58:
        re::DynamicArray<re::AssetHandle>::add((_anonymous_namespace_ *)((char *)v54 + 248), (re::AssetHandle *)(v56 + 48 * v57 + 24));
        v52 += 8;
        v31 = 1;
        if (v52 == v53)
          goto LABEL_137;
      }
    case '*':
      v58 = *(_DWORD *)(a6 + 24);
      if (!v58)
        goto LABEL_135;
      v59 = (uint64_t)a1 + 112;
      v60 = *((_QWORD *)a1 + 63);
      *(_DWORD *)(v60 + 80) = v58;
      re::DynamicArray<re::BlendSpaceAxisDefinition>::operator=(v60 + 88, (uint64_t *)(a6 + 32));
      re::DynamicArray<re::BlendSpaceSampleDefinition>::operator=(v60 + 128, (uint64_t *)(a6 + 72));
      *(_QWORD *)&v135.var0 = 7012804;
      v135.var1 = "root";
      *(_QWORD *)&v134.var0 = 0;
      v134.var1 = "";
      *(_QWORD *)&v129.var0 = 128540770;
      v129.var1 = "Blend";
      re::AnimationBlendTreeBuilder<float>::addRigNode((uint64_t)a1 + 112, &v129, &v135, &v134, 1.0);
      re::StringID::destroyString((re::StringID *)&v129);
      re::StringID::destroyString((re::StringID *)&v134);
      re::StringID::destroyString((re::StringID *)&v135);
      v61 = *(_QWORD *)(a6 + 88);
      if (!v61)
        goto LABEL_136;
      v62 = *(const StringID **)(a6 + 104);
      v63 = v61 << 6;
      do
      {
        *(_QWORD *)&v129.var0 = 0;
        v129.var1 = "";
        re::AnimationBlendTreeBuilder<float>::addClip(v59, v62, &v129, v62, 0.0);
        re::StringID::destroyString((re::StringID *)&v129);
        *(_QWORD *)&v129.var0 = 7012804;
        v129.var1 = "root";
        *(_QWORD *)&v135.var0 = 0;
        v135.var1 = "";
        *(_QWORD *)&v134.var0 = 0;
        v134.var1 = "";
        re::AnimationBlendTreeBuilder<float>::addConnection(v59, v62, &v129, &v135, &v134);
        re::StringID::destroyString((re::StringID *)&v134);
        re::StringID::destroyString((re::StringID *)&v135);
        re::StringID::destroyString((re::StringID *)&v129);
        v62 += 4;
        v63 -= 64;
      }
      while (v63);
      v64 = *(_QWORD *)(a6 + 88);
      if (!v64)
        goto LABEL_136;
      v65 = *(_QWORD **)(a6 + 104);
      v66 = &v65[8 * v64];
      while (1)
      {
        if ((_QWORD)v130)
        {
          v68 = 0xBF58476D1CE4E5B9 * ((*v65 >> 31) ^ (*v65 >> 1));
          v69 = v131;
          v70 = *(unsigned int *)(*((_QWORD *)&v130 + 1)
                                + 4
                                * (((0x94D049BB133111EBLL * (v68 ^ (v68 >> 27))) ^ ((0x94D049BB133111EBLL
                                                                                   * (v68 ^ (v68 >> 27))) >> 31))
                                 % DWORD2(v131)));
          if ((_DWORD)v70 != 0x7FFFFFFF)
          {
            while (!re::StringID::operator==((_QWORD *)(v69 + 48 * v70 + 8), v65))
            {
              v70 = *(_DWORD *)(v69 + 48 * v70) & 0x7FFFFFFF;
              if (v70 == 0x7FFFFFFF)
                goto LABEL_72;
            }
            goto LABEL_73;
          }
        }
        else
        {
          v69 = v131;
        }
LABEL_72:
        v70 = 0x7FFFFFFFLL;
LABEL_73:
        re::DynamicArray<re::AssetHandle>::add((_anonymous_namespace_ *)((char *)v67 + 248), (re::AssetHandle *)(v69 + 48 * v70 + 24));
        v65 += 8;
        v31 = 1;
        if (v65 == v66)
          goto LABEL_137;
      }
    case '+':
      v71 = *(_DWORD *)(a6 + 24);
      if (!v71)
        goto LABEL_135;
      v72 = (uint64_t)a1 + 112;
      v73 = *((_QWORD *)a1 + 63);
      *(_DWORD *)(v73 + 80) = v71;
      re::DynamicArray<re::BlendSpaceAxisDefinition>::operator=(v73 + 88, (uint64_t *)(a6 + 32));
      re::DynamicArray<re::BlendSpaceSampleDefinition>::operator=(v73 + 128, (uint64_t *)(a6 + 72));
      *(_QWORD *)&v135.var0 = 7012804;
      v135.var1 = "root";
      *(_QWORD *)&v134.var0 = 0;
      v134.var1 = "";
      *(_QWORD *)&v129.var0 = 128540770;
      v129.var1 = "Blend";
      re::AnimationBlendTreeBuilder<float>::addRigNode((uint64_t)a1 + 112, &v129, &v135, &v134, 1.0);
      re::StringID::destroyString((re::StringID *)&v129);
      re::StringID::destroyString((re::StringID *)&v134);
      re::StringID::destroyString((re::StringID *)&v135);
      v74 = *(_QWORD *)(a6 + 88);
      if (!v74)
        goto LABEL_136;
      v75 = *(const StringID **)(a6 + 104);
      v76 = v74 << 6;
      do
      {
        *(_QWORD *)&v129.var0 = 0;
        v129.var1 = "";
        re::AnimationBlendTreeBuilder<float>::addClip(v72, v75, &v129, v75, 0.0);
        re::StringID::destroyString((re::StringID *)&v129);
        *(_QWORD *)&v129.var0 = 7012804;
        v129.var1 = "root";
        *(_QWORD *)&v135.var0 = 0;
        v135.var1 = "";
        *(_QWORD *)&v134.var0 = 0;
        v134.var1 = "";
        re::AnimationBlendTreeBuilder<float>::addConnection(v72, v75, &v129, &v135, &v134);
        re::StringID::destroyString((re::StringID *)&v134);
        re::StringID::destroyString((re::StringID *)&v135);
        re::StringID::destroyString((re::StringID *)&v129);
        v75 += 4;
        v76 -= 64;
      }
      while (v76);
      v77 = *(_QWORD *)(a6 + 88);
      if (!v77)
        goto LABEL_136;
      v78 = *(_QWORD **)(a6 + 104);
      v79 = &v78[8 * v77];
      while (1)
      {
        if ((_QWORD)v130)
        {
          v81 = 0xBF58476D1CE4E5B9 * ((*v78 >> 31) ^ (*v78 >> 1));
          v82 = v131;
          v83 = *(unsigned int *)(*((_QWORD *)&v130 + 1)
                                + 4
                                * (((0x94D049BB133111EBLL * (v81 ^ (v81 >> 27))) ^ ((0x94D049BB133111EBLL
                                                                                   * (v81 ^ (v81 >> 27))) >> 31))
                                 % DWORD2(v131)));
          if ((_DWORD)v83 != 0x7FFFFFFF)
          {
            while (!re::StringID::operator==((_QWORD *)(v82 + 48 * v83 + 8), v78))
            {
              v83 = *(_DWORD *)(v82 + 48 * v83) & 0x7FFFFFFF;
              if (v83 == 0x7FFFFFFF)
                goto LABEL_87;
            }
            goto LABEL_88;
          }
        }
        else
        {
          v82 = v131;
        }
LABEL_87:
        v83 = 0x7FFFFFFFLL;
LABEL_88:
        re::DynamicArray<re::AssetHandle>::add((_anonymous_namespace_ *)((char *)v80 + 248), (re::AssetHandle *)(v82 + 48 * v83 + 24));
        v78 += 8;
        v31 = 1;
        if (v78 == v79)
          goto LABEL_137;
      }
    case ',':
      v84 = *(_DWORD *)(a6 + 24);
      if (!v84)
        goto LABEL_135;
      v85 = (uint64_t)a1 + 112;
      v86 = *((_QWORD *)a1 + 63);
      *(_DWORD *)(v86 + 80) = v84;
      re::DynamicArray<re::BlendSpaceAxisDefinition>::operator=(v86 + 88, (uint64_t *)(a6 + 32));
      re::DynamicArray<re::BlendSpaceSampleDefinition>::operator=(v86 + 128, (uint64_t *)(a6 + 72));
      *(_QWORD *)&v135.var0 = 7012804;
      v135.var1 = "root";
      *(_QWORD *)&v134.var0 = 0;
      v134.var1 = "";
      *(_QWORD *)&v129.var0 = 128540770;
      v129.var1 = "Blend";
      re::AnimationBlendTreeBuilder<float>::addRigNode((uint64_t)a1 + 112, &v129, &v135, &v134, 1.0);
      re::StringID::destroyString((re::StringID *)&v129);
      re::StringID::destroyString((re::StringID *)&v134);
      re::StringID::destroyString((re::StringID *)&v135);
      v87 = *(_QWORD *)(a6 + 88);
      if (!v87)
        goto LABEL_136;
      v88 = *(const StringID **)(a6 + 104);
      v89 = v87 << 6;
      do
      {
        *(_QWORD *)&v129.var0 = 0;
        v129.var1 = "";
        re::AnimationBlendTreeBuilder<float>::addClip(v85, v88, &v129, v88, 0.0);
        re::StringID::destroyString((re::StringID *)&v129);
        *(_QWORD *)&v129.var0 = 7012804;
        v129.var1 = "root";
        *(_QWORD *)&v135.var0 = 0;
        v135.var1 = "";
        *(_QWORD *)&v134.var0 = 0;
        v134.var1 = "";
        re::AnimationBlendTreeBuilder<float>::addConnection(v85, v88, &v129, &v135, &v134);
        re::StringID::destroyString((re::StringID *)&v134);
        re::StringID::destroyString((re::StringID *)&v135);
        re::StringID::destroyString((re::StringID *)&v129);
        v88 += 4;
        v89 -= 64;
      }
      while (v89);
      v90 = *(_QWORD *)(a6 + 88);
      if (!v90)
        goto LABEL_136;
      v91 = *(_QWORD **)(a6 + 104);
      v92 = &v91[8 * v90];
      while (1)
      {
        if ((_QWORD)v130)
        {
          v94 = 0xBF58476D1CE4E5B9 * ((*v91 >> 31) ^ (*v91 >> 1));
          v95 = v131;
          v96 = *(unsigned int *)(*((_QWORD *)&v130 + 1)
                                + 4
                                * (((0x94D049BB133111EBLL * (v94 ^ (v94 >> 27))) ^ ((0x94D049BB133111EBLL
                                                                                   * (v94 ^ (v94 >> 27))) >> 31))
                                 % DWORD2(v131)));
          if ((_DWORD)v96 != 0x7FFFFFFF)
          {
            while (!re::StringID::operator==((_QWORD *)(v95 + 48 * v96 + 8), v91))
            {
              v96 = *(_DWORD *)(v95 + 48 * v96) & 0x7FFFFFFF;
              if (v96 == 0x7FFFFFFF)
                goto LABEL_102;
            }
            goto LABEL_103;
          }
        }
        else
        {
          v95 = v131;
        }
LABEL_102:
        v96 = 0x7FFFFFFFLL;
LABEL_103:
        re::DynamicArray<re::AssetHandle>::add((_anonymous_namespace_ *)((char *)v93 + 248), (re::AssetHandle *)(v95 + 48 * v96 + 24));
        v91 += 8;
        v31 = 1;
        if (v91 == v92)
          goto LABEL_137;
      }
    case '-':
      v97 = *(_DWORD *)(a6 + 24);
      if (!v97)
        goto LABEL_135;
      v98 = (uint64_t)a1 + 112;
      v99 = *((_QWORD *)a1 + 63);
      *(_DWORD *)(v99 + 80) = v97;
      re::DynamicArray<re::BlendSpaceAxisDefinition>::operator=(v99 + 88, (uint64_t *)(a6 + 32));
      re::DynamicArray<re::BlendSpaceSampleDefinition>::operator=(v99 + 128, (uint64_t *)(a6 + 72));
      *(_QWORD *)&v135.var0 = 7012804;
      v135.var1 = "root";
      *(_QWORD *)&v134.var0 = 0;
      v134.var1 = "";
      *(_QWORD *)&v129.var0 = 128540770;
      v129.var1 = "Blend";
      re::AnimationBlendTreeBuilder<float>::addRigNode((uint64_t)a1 + 112, &v129, &v135, &v134, 1.0);
      re::StringID::destroyString((re::StringID *)&v129);
      re::StringID::destroyString((re::StringID *)&v134);
      re::StringID::destroyString((re::StringID *)&v135);
      v100 = *(_QWORD *)(a6 + 88);
      if (!v100)
        goto LABEL_136;
      v101 = *(const StringID **)(a6 + 104);
      v102 = v100 << 6;
      do
      {
        *(_QWORD *)&v129.var0 = 0;
        v129.var1 = "";
        re::AnimationBlendTreeBuilder<float>::addClip(v98, v101, &v129, v101, 0.0);
        re::StringID::destroyString((re::StringID *)&v129);
        *(_QWORD *)&v129.var0 = 7012804;
        v129.var1 = "root";
        *(_QWORD *)&v135.var0 = 0;
        v135.var1 = "";
        *(_QWORD *)&v134.var0 = 0;
        v134.var1 = "";
        re::AnimationBlendTreeBuilder<float>::addConnection(v98, v101, &v129, &v135, &v134);
        re::StringID::destroyString((re::StringID *)&v134);
        re::StringID::destroyString((re::StringID *)&v135);
        re::StringID::destroyString((re::StringID *)&v129);
        v101 += 4;
        v102 -= 64;
      }
      while (v102);
      v103 = *(_QWORD *)(a6 + 88);
      if (!v103)
        goto LABEL_136;
      v104 = *(_QWORD **)(a6 + 104);
      v105 = &v104[8 * v103];
      while (1)
      {
        if ((_QWORD)v130)
        {
          v107 = 0xBF58476D1CE4E5B9 * ((*v104 >> 31) ^ (*v104 >> 1));
          v108 = v131;
          v109 = *(unsigned int *)(*((_QWORD *)&v130 + 1)
                                 + 4
                                 * (((0x94D049BB133111EBLL * (v107 ^ (v107 >> 27))) ^ ((0x94D049BB133111EBLL
                                                                                      * (v107 ^ (v107 >> 27))) >> 31))
                                  % DWORD2(v131)));
          if ((_DWORD)v109 != 0x7FFFFFFF)
          {
            while (!re::StringID::operator==((_QWORD *)(v108 + 48 * v109 + 8), v104))
            {
              v109 = *(_DWORD *)(v108 + 48 * v109) & 0x7FFFFFFF;
              if (v109 == 0x7FFFFFFF)
                goto LABEL_117;
            }
            goto LABEL_118;
          }
        }
        else
        {
          v108 = v131;
        }
LABEL_117:
        v109 = 0x7FFFFFFFLL;
LABEL_118:
        re::DynamicArray<re::AssetHandle>::add((_anonymous_namespace_ *)((char *)v106 + 248), (re::AssetHandle *)(v108 + 48 * v109 + 24));
        v104 += 8;
        v31 = 1;
        if (v104 == v105)
          goto LABEL_137;
      }
    case '.':
      v110 = *(_DWORD *)(a6 + 24);
      if (!v110)
        goto LABEL_135;
      v111 = (uint64_t)a1 + 112;
      v112 = *((_QWORD *)a1 + 63);
      *(_DWORD *)(v112 + 80) = v110;
      re::DynamicArray<re::BlendSpaceAxisDefinition>::operator=(v112 + 88, (uint64_t *)(a6 + 32));
      re::DynamicArray<re::BlendSpaceSampleDefinition>::operator=(v112 + 128, (uint64_t *)(a6 + 72));
      *(_QWORD *)&v135.var0 = 7012804;
      v135.var1 = "root";
      *(_QWORD *)&v134.var0 = 0;
      v134.var1 = "";
      *(_QWORD *)&v129.var0 = 128540770;
      v129.var1 = "Blend";
      re::AnimationBlendTreeBuilder<float>::addRigNode((uint64_t)a1 + 112, &v129, &v135, &v134, 1.0);
      re::StringID::destroyString((re::StringID *)&v129);
      re::StringID::destroyString((re::StringID *)&v134);
      re::StringID::destroyString((re::StringID *)&v135);
      v113 = *(_QWORD *)(a6 + 88);
      if (v113)
      {
        v114 = *(const StringID **)(a6 + 104);
        v115 = v113 << 6;
        do
        {
          *(_QWORD *)&v129.var0 = 0;
          v129.var1 = "";
          re::AnimationBlendTreeBuilder<float>::addClip(v111, v114, &v129, v114, 0.0);
          re::StringID::destroyString((re::StringID *)&v129);
          *(_QWORD *)&v129.var0 = 7012804;
          v129.var1 = "root";
          *(_QWORD *)&v135.var0 = 0;
          v135.var1 = "";
          *(_QWORD *)&v134.var0 = 0;
          v134.var1 = "";
          re::AnimationBlendTreeBuilder<float>::addConnection(v111, v114, &v129, &v135, &v134);
          re::StringID::destroyString((re::StringID *)&v134);
          re::StringID::destroyString((re::StringID *)&v135);
          re::StringID::destroyString((re::StringID *)&v129);
          v114 += 4;
          v115 -= 64;
        }
        while (v115);
        v116 = *(_QWORD *)(a6 + 88);
        if (v116)
        {
          v117 = *(_QWORD **)(a6 + 104);
          v118 = &v117[8 * v116];
          while (1)
          {
            if (!(_QWORD)v130)
              break;
            v120 = 0xBF58476D1CE4E5B9 * ((*v117 >> 31) ^ (*v117 >> 1));
            v121 = v131;
            v122 = *(unsigned int *)(*((_QWORD *)&v130 + 1)
                                   + 4
                                   * (((0x94D049BB133111EBLL * (v120 ^ (v120 >> 27))) ^ ((0x94D049BB133111EBLL
                                                                                        * (v120 ^ (v120 >> 27))) >> 31))
                                    % DWORD2(v131)));
            if ((_DWORD)v122 == 0x7FFFFFFF)
              goto LABEL_132;
            while (!re::StringID::operator==((_QWORD *)(v121 + 48 * v122 + 8), v117))
            {
              v122 = *(_DWORD *)(v121 + 48 * v122) & 0x7FFFFFFF;
              if (v122 == 0x7FFFFFFF)
                goto LABEL_132;
            }
LABEL_133:
            re::DynamicArray<re::AssetHandle>::add((_anonymous_namespace_ *)((char *)v119 + 248), (re::AssetHandle *)(v121 + 48 * v122 + 24));
            v117 += 8;
            v31 = 1;
            if (v117 == v118)
              goto LABEL_137;
          }
          v121 = v131;
LABEL_132:
          v122 = 0x7FFFFFFFLL;
          goto LABEL_133;
        }
      }
LABEL_136:
      v31 = 1;
LABEL_137:
      re::HashTable<re::StringID,re::AssetHandle,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::deinit((uint64_t *)&v130);
      return v31;
    default:
LABEL_135:
      v31 = 0;
      goto LABEL_137;
  }
}

uint64_t RETimelineDefinitionBlendTreeAddRigConnection(_anonymous_namespace_ *a1, const char *a2, const char *a3, const char *a4, const char *a5)
{
  uint64_t v11;

  v11 = -1;
  {
    case '\'':
    case '(':
    case ')':
    case '*':
    case '+':
    case ',':
    case '-':
    case '.':
      TimelineDefinitionForBlendTree<float>::doAddConnection(a1, a2, a4, a3, a5, &v11);
      break;
    default:
      return v11;
  }
  return v11;
}

uint64_t RETimelineDefinitionCreateBlendTreeNodeSourceRef(uint64_t a1, unint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  NSObject *v5;
  uint64_t v6;
  NSObject *v7;
  uint64_t v8;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint8_t buf[24];
  uint64_t v14;

  v14 = *MEMORY[0x24BDAC8D0];
  v3 = *(_QWORD *)(a1 + 48);
  if (!v3)
  {
    v4 = re::AssetHandle::asset<re::TimelineAsset>((re::TimelineAsset *)(a1 + 24));
    if (v4)
      v3 = *(_QWORD *)(v4 + 8);
    else
      v3 = 0;
  }
  v11 = 0;
  v12 = 0;
  v10 = 0;
  switch(*(_DWORD *)(v3 + 8))
  {
    case '\'':
      if (*(_QWORD *)(v3 + 96) > a2)
        goto LABEL_26;
      if (CoreRELog::onceToken != -1)
        dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
      v7 = (id)CoreRELog::log;
      if (!os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
        goto LABEL_60;
      goto LABEL_59;
    case '(':
      if (*(_QWORD *)(v3 + 96) > a2)
        goto LABEL_26;
      if (CoreRELog::onceToken != -1)
        dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
      v7 = (id)CoreRELog::log;
      if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
        goto LABEL_59;
      goto LABEL_60;
    case ')':
      if (*(_QWORD *)(v3 + 96) > a2)
        goto LABEL_26;
      if (CoreRELog::onceToken != -1)
        dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
      v7 = (id)CoreRELog::log;
      if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
        goto LABEL_59;
      goto LABEL_60;
    case '*':
      if (*(_QWORD *)(v3 + 96) > a2)
        goto LABEL_26;
      if (CoreRELog::onceToken != -1)
        dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
      v7 = (id)CoreRELog::log;
      if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
        goto LABEL_59;
      goto LABEL_60;
    case '+':
      if (*(_QWORD *)(v3 + 96) > a2)
        goto LABEL_26;
      if (CoreRELog::onceToken != -1)
        dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
      v7 = (id)CoreRELog::log;
      if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
        goto LABEL_59;
      goto LABEL_60;
    case ',':
      if (*(_QWORD *)(v3 + 96) > a2)
        goto LABEL_26;
      if (CoreRELog::onceToken != -1)
        dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
      v7 = (id)CoreRELog::log;
      if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
        goto LABEL_59;
      goto LABEL_60;
    case '-':
      if (*(_QWORD *)(v3 + 96) > a2)
        goto LABEL_26;
      if (CoreRELog::onceToken != -1)
        dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
      v7 = (id)CoreRELog::log;
      if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
        goto LABEL_59;
      goto LABEL_60;
    case '.':
      if (*(_QWORD *)(v3 + 96) <= a2)
      {
        if (CoreRELog::onceToken != -1)
          dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
        v7 = (id)CoreRELog::log;
        if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
        {
LABEL_59:
          v8 = *(_QWORD *)(v3 + 96);
          *(_DWORD *)buf = 134218240;
          *(_QWORD *)&buf[4] = a2;
          *(_WORD *)&buf[12] = 2048;
          *(_QWORD *)&buf[14] = v8;
          _os_log_error_impl(&dword_224FE9000, v7, OS_LOG_TYPE_ERROR, "Invalid node index (%zu), node count: %zu", buf, 0x16u);
        }
LABEL_60:

LABEL_61:
        v6 = 0;
      }
      else
      {
LABEL_26:
        getBlendTreeClip<float>((re::AssetHandle *)buf, (_QWORD *)v3, a2);
        v6 = *(_QWORD *)&buf[8];
        v10 = *(_QWORD *)buf;
        v11 = *(_QWORD *)&buf[8];
        memset(buf, 0, sizeof(buf));
        v12 = *(_QWORD *)&buf[16];
        re::AssetHandle::~AssetHandle((re::AssetHandle *)buf);
        if (v6)
        {
          v6 = *(_QWORD *)buf;
        }
      }
      re::AssetHandle::~AssetHandle((re::AssetHandle *)&v10);
      return v6;
    default:
      if (CoreRELog::onceToken != -1)
        dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
      v5 = (id)CoreRELog::log;
      if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR))
      {
        *(_WORD *)buf = 0;
        _os_log_error_impl(&dword_224FE9000, v5, OS_LOG_TYPE_ERROR, "Invalid blend tree definition type.", buf, 2u);
      }

      goto LABEL_61;
  }
}

unint64_t getBlendTreeClip<float>(re::AssetHandle *a1, _QWORD *a2, unint64_t a3)
{
  unint64_t result;

  result = re::AnimationBlendTreeDefinition::findClipIndex((re::AnimationBlendTreeDefinition *)(a2 + 10), a3);
  if (result < a2[33])
    return (unint64_t)re::AssetHandle::AssetHandle(a1, (const re::AssetHandle *)(a2[35] + 24 * result));
  *(_QWORD *)a1 = 0;
  *((_QWORD *)a1 + 1) = 0;
  *((_QWORD *)a1 + 2) = 0;
  return result;
}

uint64_t RETimelineDefinitionBlendTreeNodeCount(uint64_t a1)
{
  uint64_t v1;
  uint64_t result;
  NSObject *v3;
  uint8_t v4[16];

  v1 = *(_QWORD *)(a1 + 48);
  if (!v1)
    v1 = *(_QWORD *)(re::AssetHandle::asset<re::TimelineAsset>((re::TimelineAsset *)(a1 + 24)) + 8);
  switch(*(_DWORD *)(v1 + 8))
  {
    case '\'':
    case '(':
    case ')':
    case '*':
    case '+':
    case ',':
    case '-':
    case '.':
      result = *(_QWORD *)(v1 + 96);
      break;
    default:
      if (CoreRELog::onceToken != -1)
        dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
      v3 = (id)CoreRELog::log;
      if (os_log_type_enabled(v3, OS_LOG_TYPE_ERROR))
      {
        *(_WORD *)v4 = 0;
        _os_log_error_impl(&dword_224FE9000, v3, OS_LOG_TYPE_ERROR, "Invalid blend tree definition type.", v4, 2u);
      }

      result = -1;
      break;
  }
  return result;
}

BOOL RETimelineDefinitionBlendTreeNodeReplaceClip(_anonymous_namespace_::TimelineDefinition *a1, unint64_t a2, unint64_t a3)
{
  unint64_t v4;
  _BOOL8 result;
  _anonymous_namespace_ *v7;
  _anonymous_namespace_ *v8;
  unint64_t ClipIndex;
  unint64_t v10;
  NSObject *v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  int v28;
  const char *v29;
  __int16 v30;
  int v31;
  __int16 v32;
  unint64_t v33;
  __int16 v34;
  unint64_t v35;
  uint8_t buf[16];
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  uint64_t v41;

  v4 = a2;
  v41 = *MEMORY[0x24BDAC8D0];
  result = RETimelineDefinitionBlendTreeNodeIsClipSource((uint64_t)a1, a2);
  if (result)
  {
    v8 = v7;
    switch(*((_DWORD *)v7 + 2))
    {
      case '\'':
        ClipIndex = re::AnimationBlendTreeDefinition::findClipIndex((_anonymous_namespace_ *)((char *)v7 + 80), v4);
        if (ClipIndex >= *((_QWORD *)v8 + 33))
          goto LABEL_32;
        v4 = ClipIndex;
        re::AssetAPIHelper::assetHandleCreate(a3, &v24);
        v10 = *((_QWORD *)v8 + 33);
        if (v10 > v4)
          goto LABEL_31;
        v27 = 0;
        v39 = 0u;
        v40 = 0u;
        v37 = 0u;
        v38 = 0u;
        *(_OWORD *)buf = 0u;
        os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        v28 = 136315906;
        v29 = "operator[]";
        v30 = 1024;
        v31 = 789;
        v32 = 2048;
        v33 = v4;
        v34 = 2048;
        v35 = v10;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
        goto LABEL_6;
      case '(':
        v12 = re::AnimationBlendTreeDefinition::findClipIndex((_anonymous_namespace_ *)((char *)v7 + 80), v4);
        if (v12 >= *((_QWORD *)v8 + 33))
          goto LABEL_32;
        v4 = v12;
        re::AssetAPIHelper::assetHandleCreate(a3, &v24);
        a3 = *((_QWORD *)v8 + 33);
        if (a3 > v4)
          goto LABEL_31;
        v27 = 0;
        v39 = 0u;
        v40 = 0u;
        v37 = 0u;
        v38 = 0u;
        *(_OWORD *)buf = 0u;
        v8 = (_anonymous_namespace_ *)MEMORY[0x24BDACB70];
        os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        v28 = 136315906;
        v29 = "operator[]";
        v30 = 1024;
        v31 = 789;
        v32 = 2048;
        v33 = v4;
        v34 = 2048;
        v35 = a3;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_14:
        v13 = re::AnimationBlendTreeDefinition::findClipIndex((_anonymous_namespace_ *)((char *)v8 + 80), v4);
        if (v13 >= *((_QWORD *)v8 + 33))
          goto LABEL_32;
        v4 = v13;
        re::AssetAPIHelper::assetHandleCreate(a3, &v24);
        a3 = *((_QWORD *)v8 + 33);
        if (a3 > v4)
          goto LABEL_31;
        v27 = 0;
        v39 = 0u;
        v40 = 0u;
        v37 = 0u;
        v38 = 0u;
        *(_OWORD *)buf = 0u;
        v8 = (_anonymous_namespace_ *)MEMORY[0x24BDACB70];
        os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        v28 = 136315906;
        v29 = "operator[]";
        v30 = 1024;
        v31 = 789;
        v32 = 2048;
        v33 = v4;
        v34 = 2048;
        v35 = a3;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_17:
        v14 = re::AnimationBlendTreeDefinition::findClipIndex((_anonymous_namespace_ *)((char *)v8 + 80), v4);
        if (v14 >= *((_QWORD *)v8 + 33))
          goto LABEL_32;
        v4 = v14;
        re::AssetAPIHelper::assetHandleCreate(a3, &v24);
        a3 = *((_QWORD *)v8 + 33);
        if (a3 > v4)
          goto LABEL_31;
        v27 = 0;
        v39 = 0u;
        v40 = 0u;
        v37 = 0u;
        v38 = 0u;
        *(_OWORD *)buf = 0u;
        v8 = (_anonymous_namespace_ *)MEMORY[0x24BDACB70];
        os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        v28 = 136315906;
        v29 = "operator[]";
        v30 = 1024;
        v31 = 789;
        v32 = 2048;
        v33 = v4;
        v34 = 2048;
        v35 = a3;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_20:
        v15 = re::AnimationBlendTreeDefinition::findClipIndex((_anonymous_namespace_ *)((char *)v8 + 80), v4);
        if (v15 >= *((_QWORD *)v8 + 33))
          goto LABEL_32;
        v4 = v15;
        re::AssetAPIHelper::assetHandleCreate(a3, &v24);
        a3 = *((_QWORD *)v8 + 33);
        if (a3 > v4)
          goto LABEL_31;
        v27 = 0;
        v39 = 0u;
        v40 = 0u;
        v37 = 0u;
        v38 = 0u;
        *(_OWORD *)buf = 0u;
        v8 = (_anonymous_namespace_ *)MEMORY[0x24BDACB70];
        os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        v28 = 136315906;
        v29 = "operator[]";
        v30 = 1024;
        v31 = 789;
        v32 = 2048;
        v33 = v4;
        v34 = 2048;
        v35 = a3;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_23:
        v16 = re::AnimationBlendTreeDefinition::findClipIndex((_anonymous_namespace_ *)((char *)v8 + 80), v4);
        if (v16 >= *((_QWORD *)v8 + 33))
          goto LABEL_32;
        v4 = v16;
        re::AssetAPIHelper::assetHandleCreate(a3, &v24);
        a3 = *((_QWORD *)v8 + 33);
        if (a3 > v4)
          goto LABEL_31;
        v27 = 0;
        v39 = 0u;
        v40 = 0u;
        v37 = 0u;
        v38 = 0u;
        *(_OWORD *)buf = 0u;
        v8 = (_anonymous_namespace_ *)MEMORY[0x24BDACB70];
        os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        v28 = 136315906;
        v29 = "operator[]";
        v30 = 1024;
        v31 = 789;
        v32 = 2048;
        v33 = v4;
        v34 = 2048;
        v35 = a3;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_26:
        v17 = re::AnimationBlendTreeDefinition::findClipIndex((_anonymous_namespace_ *)((char *)v8 + 80), v4);
        if (v17 >= *((_QWORD *)v8 + 33))
          goto LABEL_32;
        v4 = v17;
        re::AssetAPIHelper::assetHandleCreate(a3, &v24);
        a3 = *((_QWORD *)v8 + 33);
        if (a3 > v4)
          goto LABEL_31;
        v27 = 0;
        v39 = 0u;
        v40 = 0u;
        v37 = 0u;
        v38 = 0u;
        *(_OWORD *)buf = 0u;
        v8 = (_anonymous_namespace_ *)MEMORY[0x24BDACB70];
        os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        v28 = 136315906;
        v29 = "operator[]";
        v30 = 1024;
        v31 = 789;
        v32 = 2048;
        v33 = v4;
        v34 = 2048;
        v35 = a3;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_29:
        v18 = re::AnimationBlendTreeDefinition::findClipIndex((_anonymous_namespace_ *)((char *)v8 + 80), v4);
        if (v18 >= *((_QWORD *)v8 + 33))
        {
LABEL_32:
          result = 0;
        }
        else
        {
          v4 = v18;
          re::AssetAPIHelper::assetHandleCreate(a3, &v24);
          v19 = *((_QWORD *)v8 + 33);
          if (v19 <= v4)
          {
            v27 = 0;
            v39 = 0u;
            v40 = 0u;
            v37 = 0u;
            v38 = 0u;
            *(_OWORD *)buf = 0u;
            os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
            v28 = 136315906;
            v29 = "operator[]";
            v30 = 1024;
            v31 = 789;
            v32 = 2048;
            v33 = v4;
            v34 = 2048;
            v35 = v19;
            _os_log_send_and_compose_impl();
            _os_crash_msg();
            __break(1u);
          }
LABEL_31:
          v20 = (uint64_t *)(*((_QWORD *)v8 + 35) + 24 * v4);
          v21 = v20[1];
          v20[1] = v25;
          v25 = v21;
          v22 = *v20;
          *v20 = 0;
          *v20 = v24;
          v24 = v22;
          v23 = v20[2];
          v20[2] = v26;
          v26 = v23;
          re::AssetHandle::~AssetHandle((re::AssetHandle *)&v24);
          result = 1;
        }
        break;
      case ')':
        goto LABEL_14;
      case '*':
        goto LABEL_17;
      case '+':
        goto LABEL_20;
      case ',':
        goto LABEL_23;
      case '-':
        goto LABEL_26;
      case '.':
        goto LABEL_29;
      default:
LABEL_6:
        if (CoreRELog::onceToken != -1)
          dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
        v11 = (id)CoreRELog::log;
        if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR))
        {
          *(_WORD *)buf = 0;
          _os_log_error_impl(&dword_224FE9000, v11, OS_LOG_TYPE_ERROR, "Invalid blend tree definition type.", buf, 2u);
        }

        goto LABEL_32;
    }
  }
  return result;
}

BOOL RETimelineDefinitionBlendTreeNodeIsClipSource(uint64_t a1, unint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  _BOOL8 result;

  v3 = *(_QWORD *)(a1 + 48);
  if (!v3)
  {
    v4 = re::AssetHandle::asset<re::TimelineAsset>((re::TimelineAsset *)(a1 + 24));
    if (v4)
      v3 = *(_QWORD *)(v4 + 8);
    else
      v3 = 0;
  }
  switch(*(_DWORD *)(v3 + 8))
  {
    case '\'':
    case '(':
    case ')':
    case '*':
    case '+':
    case ',':
    case '-':
    case '.':
      if (*(_QWORD *)(v3 + 96) <= a2)
        goto LABEL_8;
      result = re::StringID::operator==((_QWORD *)(*(_QWORD *)(v3 + 112) + 88 * a2 + 16), re::AnimationBlendTreeNodeDescription::kClip);
      break;
    default:
LABEL_8:
      result = 0;
      break;
  }
  return result;
}

uint64_t RETimelineDefinitionBlendTreeNodeGetName(uint64_t a1, unint64_t a2)
{
  uint64_t v3;
  NSObject *v4;
  NSObject *v5;
  uint64_t v7;
  int v8;
  unint64_t v9;
  __int16 v10;
  uint64_t v11;
  uint64_t v12;

  v12 = *MEMORY[0x24BDAC8D0];
  v3 = *(_QWORD *)(a1 + 48);
  if (!v3)
    v3 = *(_QWORD *)(re::AssetHandle::asset<re::TimelineAsset>((re::TimelineAsset *)(a1 + 24)) + 8);
  switch(*(_DWORD *)(v3 + 8))
  {
    case '\'':
      if (*(_QWORD *)(v3 + 96) > a2)
        return *(_QWORD *)(*(_QWORD *)(v3 + 112) + 88 * a2 + 8);
      if (CoreRELog::onceToken != -1)
        dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
      v4 = (id)CoreRELog::log;
      if (!os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
        goto LABEL_50;
      goto LABEL_49;
    case '(':
      if (*(_QWORD *)(v3 + 96) > a2)
        return *(_QWORD *)(*(_QWORD *)(v3 + 112) + 88 * a2 + 8);
      if (CoreRELog::onceToken != -1)
        dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
      v4 = (id)CoreRELog::log;
      if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
        goto LABEL_49;
      goto LABEL_50;
    case ')':
      if (*(_QWORD *)(v3 + 96) > a2)
        return *(_QWORD *)(*(_QWORD *)(v3 + 112) + 88 * a2 + 8);
      if (CoreRELog::onceToken != -1)
        dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
      v4 = (id)CoreRELog::log;
      if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
        goto LABEL_49;
      goto LABEL_50;
    case '*':
      if (*(_QWORD *)(v3 + 96) > a2)
        return *(_QWORD *)(*(_QWORD *)(v3 + 112) + 88 * a2 + 8);
      if (CoreRELog::onceToken != -1)
        dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
      v4 = (id)CoreRELog::log;
      if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
        goto LABEL_49;
      goto LABEL_50;
    case '+':
      if (*(_QWORD *)(v3 + 96) > a2)
        return *(_QWORD *)(*(_QWORD *)(v3 + 112) + 88 * a2 + 8);
      if (CoreRELog::onceToken != -1)
        dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
      v4 = (id)CoreRELog::log;
      if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
        goto LABEL_49;
      goto LABEL_50;
    case ',':
      if (*(_QWORD *)(v3 + 96) > a2)
        return *(_QWORD *)(*(_QWORD *)(v3 + 112) + 88 * a2 + 8);
      if (CoreRELog::onceToken != -1)
        dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
      v4 = (id)CoreRELog::log;
      if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
        goto LABEL_49;
      goto LABEL_50;
    case '-':
      if (*(_QWORD *)(v3 + 96) > a2)
        return *(_QWORD *)(*(_QWORD *)(v3 + 112) + 88 * a2 + 8);
      if (CoreRELog::onceToken != -1)
        dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
      v4 = (id)CoreRELog::log;
      if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
        goto LABEL_49;
      goto LABEL_50;
    case '.':
      if (*(_QWORD *)(v3 + 96) > a2)
        return *(_QWORD *)(*(_QWORD *)(v3 + 112) + 88 * a2 + 8);
      if (CoreRELog::onceToken != -1)
        dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
      v4 = (id)CoreRELog::log;
      if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
      {
LABEL_49:
        v7 = *(_QWORD *)(v3 + 96);
        v8 = 134218240;
        v9 = a2;
        v10 = 2048;
        v11 = v7;
        _os_log_error_impl(&dword_224FE9000, v4, OS_LOG_TYPE_ERROR, "Invalid node index (%zu), node count: %zu", (uint8_t *)&v8, 0x16u);
      }
LABEL_50:

      return 0;
    default:
      if (CoreRELog::onceToken != -1)
        dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
      v5 = (id)CoreRELog::log;
      if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR))
      {
        LOWORD(v8) = 0;
        _os_log_error_impl(&dword_224FE9000, v5, OS_LOG_TYPE_ERROR, "Invalid blend tree definition type.", (uint8_t *)&v8, 2u);
      }

      return 0;
  }
}

BOOL RETimelineDefinitionBlendTreeNodeIsBlend(uint64_t a1, unint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  _BOOL8 result;

  v3 = *(_QWORD *)(a1 + 48);
  if (!v3)
  {
    v4 = re::AssetHandle::asset<re::TimelineAsset>((re::TimelineAsset *)(a1 + 24));
    if (v4)
      v3 = *(_QWORD *)(v4 + 8);
    else
      v3 = 0;
  }
  switch(*(_DWORD *)(v3 + 8))
  {
    case '\'':
    case '(':
    case ')':
    case '*':
    case '+':
    case ',':
    case '-':
    case '.':
      if (*(_QWORD *)(v3 + 96) <= a2)
        goto LABEL_8;
      result = re::AnimationBlendTreeNodeDescription::isBlend((re::AnimationBlendTreeNodeDescription *)(*(_QWORD *)(v3 + 112) + 88 * a2));
      break;
    default:
LABEL_8:
      result = 0;
      break;
  }
  return result;
}

BOOL RETimelineDefinitionBlendTreeNodeIsBlendAdditive(uint64_t a1, unint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  _BOOL8 result;

  v3 = *(_QWORD *)(a1 + 48);
  if (!v3)
  {
    v4 = re::AssetHandle::asset<re::TimelineAsset>((re::TimelineAsset *)(a1 + 24));
    if (v4)
      v3 = *(_QWORD *)(v4 + 8);
    else
      v3 = 0;
  }
  switch(*(_DWORD *)(v3 + 8))
  {
    case '\'':
    case '(':
    case ')':
    case '*':
    case '+':
    case ',':
    case '-':
    case '.':
      if (*(_QWORD *)(v3 + 96) <= a2)
        goto LABEL_8;
      result = re::StringID::operator==((_QWORD *)(*(_QWORD *)(v3 + 112) + 88 * a2 + 16), re::AnimationBlendTreeNodeDescription::kBlendAdditive);
      break;
    default:
LABEL_8:
      result = 0;
      break;
  }
  return result;
}

BOOL RETimelineDefinitionBlendTreeNodeIsInput(uint64_t a1, unint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  _BOOL8 result;

  v3 = *(_QWORD *)(a1 + 48);
  if (!v3)
  {
    v4 = re::AssetHandle::asset<re::TimelineAsset>((re::TimelineAsset *)(a1 + 24));
    if (v4)
      v3 = *(_QWORD *)(v4 + 8);
    else
      v3 = 0;
  }
  switch(*(_DWORD *)(v3 + 8))
  {
    case '\'':
    case '(':
    case ')':
    case '*':
    case '+':
    case ',':
    case '-':
    case '.':
      if (*(_QWORD *)(v3 + 96) <= a2)
        goto LABEL_8;
      result = re::StringID::operator==((_QWORD *)(*(_QWORD *)(v3 + 112) + 88 * a2 + 16), re::AnimationBlendTreeNodeDescription::kInput);
      break;
    default:
LABEL_8:
      result = 0;
      break;
  }
  return result;
}

float RETimelineDefinitionBlendTreeNodeGetWeight(uint64_t a1, unint64_t a2)
{
  uint64_t v3;
  NSObject *v4;
  NSObject *v5;
  uint64_t v7;
  int v8;
  unint64_t v9;
  __int16 v10;
  uint64_t v11;
  uint64_t v12;

  v12 = *MEMORY[0x24BDAC8D0];
  v3 = *(_QWORD *)(a1 + 48);
  if (!v3)
    v3 = *(_QWORD *)(re::AssetHandle::asset<re::TimelineAsset>((re::TimelineAsset *)(a1 + 24)) + 8);
  switch(*(_DWORD *)(v3 + 8))
  {
    case '\'':
      if (*(_QWORD *)(v3 + 96) > a2)
        return *(float *)(*(_QWORD *)(v3 + 112) + 88 * a2 + 80);
      if (CoreRELog::onceToken != -1)
        dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
      v4 = (id)CoreRELog::log;
      if (!os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
        goto LABEL_50;
      goto LABEL_49;
    case '(':
      if (*(_QWORD *)(v3 + 96) > a2)
        return *(float *)(*(_QWORD *)(v3 + 112) + 88 * a2 + 80);
      if (CoreRELog::onceToken != -1)
        dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
      v4 = (id)CoreRELog::log;
      if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
        goto LABEL_49;
      goto LABEL_50;
    case ')':
      if (*(_QWORD *)(v3 + 96) > a2)
        return *(float *)(*(_QWORD *)(v3 + 112) + 88 * a2 + 80);
      if (CoreRELog::onceToken != -1)
        dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
      v4 = (id)CoreRELog::log;
      if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
        goto LABEL_49;
      goto LABEL_50;
    case '*':
      if (*(_QWORD *)(v3 + 96) > a2)
        return *(float *)(*(_QWORD *)(v3 + 112) + 88 * a2 + 80);
      if (CoreRELog::onceToken != -1)
        dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
      v4 = (id)CoreRELog::log;
      if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
        goto LABEL_49;
      goto LABEL_50;
    case '+':
      if (*(_QWORD *)(v3 + 96) > a2)
        return *(float *)(*(_QWORD *)(v3 + 112) + 88 * a2 + 80);
      if (CoreRELog::onceToken != -1)
        dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
      v4 = (id)CoreRELog::log;
      if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
        goto LABEL_49;
      goto LABEL_50;
    case ',':
      if (*(_QWORD *)(v3 + 96) > a2)
        return *(float *)(*(_QWORD *)(v3 + 112) + 88 * a2 + 80);
      if (CoreRELog::onceToken != -1)
        dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
      v4 = (id)CoreRELog::log;
      if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
        goto LABEL_49;
      goto LABEL_50;
    case '-':
      if (*(_QWORD *)(v3 + 96) > a2)
        return *(float *)(*(_QWORD *)(v3 + 112) + 88 * a2 + 80);
      if (CoreRELog::onceToken != -1)
        dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
      v4 = (id)CoreRELog::log;
      if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
        goto LABEL_49;
      goto LABEL_50;
    case '.':
      if (*(_QWORD *)(v3 + 96) > a2)
        return *(float *)(*(_QWORD *)(v3 + 112) + 88 * a2 + 80);
      if (CoreRELog::onceToken != -1)
        dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
      v4 = (id)CoreRELog::log;
      if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
      {
LABEL_49:
        v7 = *(_QWORD *)(v3 + 96);
        v8 = 134218240;
        v9 = a2;
        v10 = 2048;
        v11 = v7;
        _os_log_error_impl(&dword_224FE9000, v4, OS_LOG_TYPE_ERROR, "Invalid node index (%zu), node count: %zu", (uint8_t *)&v8, 0x16u);
      }
LABEL_50:

      return NAN;
    default:
      if (CoreRELog::onceToken != -1)
        dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
      v5 = (id)CoreRELog::log;
      if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR))
      {
        LOWORD(v8) = 0;
        _os_log_error_impl(&dword_224FE9000, v5, OS_LOG_TYPE_ERROR, "Invalid blend tree definition type.", (uint8_t *)&v8, 2u);
      }

      return NAN;
  }
}

uint64_t RETimelineDefinitionBlendTreeNodeGetWeightPath(uint64_t a1, unint64_t a2)
{
  uint64_t v3;
  NSObject *v4;
  NSObject *v5;
  uint64_t v7;
  int v8;
  unint64_t v9;
  __int16 v10;
  uint64_t v11;
  uint64_t v12;

  v12 = *MEMORY[0x24BDAC8D0];
  v3 = *(_QWORD *)(a1 + 48);
  if (!v3)
    v3 = *(_QWORD *)(re::AssetHandle::asset<re::TimelineAsset>((re::TimelineAsset *)(a1 + 24)) + 8);
  switch(*(_DWORD *)(v3 + 8))
  {
    case '\'':
      if (*(_QWORD *)(v3 + 96) > a2)
        return *(_QWORD *)(*(_QWORD *)(v3 + 112) + 88 * a2 + 72);
      if (CoreRELog::onceToken != -1)
        dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
      v4 = (id)CoreRELog::log;
      if (!os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
        goto LABEL_50;
      goto LABEL_49;
    case '(':
      if (*(_QWORD *)(v3 + 96) > a2)
        return *(_QWORD *)(*(_QWORD *)(v3 + 112) + 88 * a2 + 72);
      if (CoreRELog::onceToken != -1)
        dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
      v4 = (id)CoreRELog::log;
      if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
        goto LABEL_49;
      goto LABEL_50;
    case ')':
      if (*(_QWORD *)(v3 + 96) > a2)
        return *(_QWORD *)(*(_QWORD *)(v3 + 112) + 88 * a2 + 72);
      if (CoreRELog::onceToken != -1)
        dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
      v4 = (id)CoreRELog::log;
      if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
        goto LABEL_49;
      goto LABEL_50;
    case '*':
      if (*(_QWORD *)(v3 + 96) > a2)
        return *(_QWORD *)(*(_QWORD *)(v3 + 112) + 88 * a2 + 72);
      if (CoreRELog::onceToken != -1)
        dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
      v4 = (id)CoreRELog::log;
      if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
        goto LABEL_49;
      goto LABEL_50;
    case '+':
      if (*(_QWORD *)(v3 + 96) > a2)
        return *(_QWORD *)(*(_QWORD *)(v3 + 112) + 88 * a2 + 72);
      if (CoreRELog::onceToken != -1)
        dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
      v4 = (id)CoreRELog::log;
      if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
        goto LABEL_49;
      goto LABEL_50;
    case ',':
      if (*(_QWORD *)(v3 + 96) > a2)
        return *(_QWORD *)(*(_QWORD *)(v3 + 112) + 88 * a2 + 72);
      if (CoreRELog::onceToken != -1)
        dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
      v4 = (id)CoreRELog::log;
      if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
        goto LABEL_49;
      goto LABEL_50;
    case '-':
      if (*(_QWORD *)(v3 + 96) > a2)
        return *(_QWORD *)(*(_QWORD *)(v3 + 112) + 88 * a2 + 72);
      if (CoreRELog::onceToken != -1)
        dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
      v4 = (id)CoreRELog::log;
      if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
        goto LABEL_49;
      goto LABEL_50;
    case '.':
      if (*(_QWORD *)(v3 + 96) > a2)
        return *(_QWORD *)(*(_QWORD *)(v3 + 112) + 88 * a2 + 72);
      if (CoreRELog::onceToken != -1)
        dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
      v4 = (id)CoreRELog::log;
      if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
      {
LABEL_49:
        v7 = *(_QWORD *)(v3 + 96);
        v8 = 134218240;
        v9 = a2;
        v10 = 2048;
        v11 = v7;
        _os_log_error_impl(&dword_224FE9000, v4, OS_LOG_TYPE_ERROR, "Invalid node index (%zu), node count: %zu", (uint8_t *)&v8, 0x16u);
      }
LABEL_50:

      return 0;
    default:
      if (CoreRELog::onceToken != -1)
        dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
      v5 = (id)CoreRELog::log;
      if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR))
      {
        LOWORD(v8) = 0;
        _os_log_error_impl(&dword_224FE9000, v5, OS_LOG_TYPE_ERROR, "Invalid blend tree definition type.", (uint8_t *)&v8, 2u);
      }

      return 0;
  }
}

BOOL RETimelineDefinitionBlendTreeNodeIsAdditive(uint64_t a1, unint64_t a2)
{
  unint64_t v3;
  NSObject *v4;
  NSObject *v5;
  unint64_t v6;
  uint64_t v8;
  _OWORD buf[5];
  uint64_t v10;

  v10 = *MEMORY[0x24BDAC8D0];
  v3 = *(_QWORD *)(a1 + 48);
  if (!v3)
    v3 = *(_QWORD *)(re::AssetHandle::asset<re::TimelineAsset>((re::TimelineAsset *)(a1 + 24)) + 8);
  switch(*(_DWORD *)(v3 + 8))
  {
    case '\'':
      if (*(_QWORD *)(v3 + 96) > a2)
        return re::StringID::operator==((_QWORD *)(*(_QWORD *)(v3 + 112) + 88 * a2 + 16), re::AnimationBlendTreeNodeDescription::kBlendAdditive);
      if (CoreRELog::onceToken != -1)
        dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
      v4 = (id)CoreRELog::log;
      if (!os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
        goto LABEL_47;
      goto LABEL_46;
    case '(':
      if (*(_QWORD *)(v3 + 96) > a2)
        return re::StringID::operator==((_QWORD *)(*(_QWORD *)(v3 + 112) + 88 * a2 + 16), re::AnimationBlendTreeNodeDescription::kBlendAdditive);
      if (CoreRELog::onceToken != -1)
        dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
      v4 = (id)CoreRELog::log;
      if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
        goto LABEL_46;
      goto LABEL_47;
    case ')':
      if (*(_QWORD *)(v3 + 96) > a2)
        return re::StringID::operator==((_QWORD *)(*(_QWORD *)(v3 + 112) + 88 * a2 + 16), re::AnimationBlendTreeNodeDescription::kBlendAdditive);
      if (CoreRELog::onceToken != -1)
        dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
      v4 = (id)CoreRELog::log;
      if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
        goto LABEL_46;
      goto LABEL_47;
    case '*':
      if (*(_QWORD *)(v3 + 96) > a2)
        return re::StringID::operator==((_QWORD *)(*(_QWORD *)(v3 + 112) + 88 * a2 + 16), re::AnimationBlendTreeNodeDescription::kBlendAdditive);
      if (CoreRELog::onceToken != -1)
        dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
      v4 = (id)CoreRELog::log;
      if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
        goto LABEL_46;
      goto LABEL_47;
    case '+':
      v6 = *(_QWORD *)(v3 + 96);
      if (v6 > a2)
        return re::StringID::operator==((_QWORD *)(*(_QWORD *)(v3 + 112) + 88 * a2 + 16), re::AnimationBlendTreeNodeDescription::kBlendAdditive);
      memset(buf, 0, sizeof(buf));
      v3 = v6;
      os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
LABEL_31:
      if (*(_QWORD *)(v3 + 96) > a2)
        return re::StringID::operator==((_QWORD *)(*(_QWORD *)(v3 + 112) + 88 * a2 + 16), re::AnimationBlendTreeNodeDescription::kBlendAdditive);
      if (CoreRELog::onceToken != -1)
        dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
      v4 = (id)CoreRELog::log;
      if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
      {
LABEL_46:
        v8 = *(_QWORD *)(v3 + 96);
        LODWORD(buf[0]) = 134218240;
        *(_QWORD *)((char *)buf + 4) = a2;
        WORD6(buf[0]) = 2048;
        *(_QWORD *)((char *)buf + 14) = v8;
        _os_log_error_impl(&dword_224FE9000, v4, OS_LOG_TYPE_ERROR, "Invalid node index (%zu), node count: %zu", (uint8_t *)buf, 0x16u);
      }
LABEL_47:

      return 0;
    case ',':
      goto LABEL_31;
    case '-':
      if (*(_QWORD *)(v3 + 96) > a2)
        return re::StringID::operator==((_QWORD *)(*(_QWORD *)(v3 + 112) + 88 * a2 + 16), re::AnimationBlendTreeNodeDescription::kBlendAdditive);
      if (CoreRELog::onceToken != -1)
        dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
      v4 = (id)CoreRELog::log;
      if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
        goto LABEL_46;
      goto LABEL_47;
    case '.':
      if (*(_QWORD *)(v3 + 96) > a2)
        return re::StringID::operator==((_QWORD *)(*(_QWORD *)(v3 + 112) + 88 * a2 + 16), re::AnimationBlendTreeNodeDescription::kBlendAdditive);
      if (CoreRELog::onceToken != -1)
        dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
      v4 = (id)CoreRELog::log;
      if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
        goto LABEL_46;
      goto LABEL_47;
    default:
      if (CoreRELog::onceToken != -1)
        dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
      v5 = (id)CoreRELog::log;
      if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR))
      {
        LOWORD(buf[0]) = 0;
        _os_log_error_impl(&dword_224FE9000, v5, OS_LOG_TYPE_ERROR, "Invalid blend tree definition type.", (uint8_t *)buf, 2u);
      }

      return 0;
  }
}

uint64_t RETimelineDefinitionBlendTreeConnectionCount(uint64_t a1)
{
  uint64_t v1;
  uint64_t result;
  NSObject *v3;
  uint8_t v4[16];

  v1 = *(_QWORD *)(a1 + 48);
  if (!v1)
    v1 = *(_QWORD *)(re::AssetHandle::asset<re::TimelineAsset>((re::TimelineAsset *)(a1 + 24)) + 8);
  switch(*(_DWORD *)(v1 + 8))
  {
    case '\'':
    case '(':
    case ')':
    case '*':
    case '+':
    case ',':
    case '-':
    case '.':
      result = *(_QWORD *)(v1 + 136);
      break;
    default:
      if (CoreRELog::onceToken != -1)
        dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
      v3 = (id)CoreRELog::log;
      if (os_log_type_enabled(v3, OS_LOG_TYPE_ERROR))
      {
        *(_WORD *)v4 = 0;
        _os_log_error_impl(&dword_224FE9000, v3, OS_LOG_TYPE_ERROR, "Invalid blend tree definition type.", v4, 2u);
      }

      result = 0;
      break;
  }
  return result;
}

uint64_t RETimelineDefinitionBlendTreeConnectionGetSource(uint64_t a1, unint64_t a2)
{
  uint64_t v3;
  NSObject *v4;
  NSObject *v5;
  uint64_t v7;
  int v8;
  unint64_t v9;
  __int16 v10;
  uint64_t v11;
  uint64_t v12;

  v12 = *MEMORY[0x24BDAC8D0];
  v3 = *(_QWORD *)(a1 + 48);
  if (!v3)
    v3 = *(_QWORD *)(re::AssetHandle::asset<re::TimelineAsset>((re::TimelineAsset *)(a1 + 24)) + 8);
  switch(*(_DWORD *)(v3 + 8))
  {
    case '\'':
      if (*(_QWORD *)(v3 + 136) > a2)
        return *(_QWORD *)(*(_QWORD *)(v3 + 152) + 160 * a2 + 8);
      if (CoreRELog::onceToken != -1)
        dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
      v4 = (id)CoreRELog::log;
      if (!os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
        goto LABEL_50;
      goto LABEL_49;
    case '(':
      if (*(_QWORD *)(v3 + 136) > a2)
        return *(_QWORD *)(*(_QWORD *)(v3 + 152) + 160 * a2 + 8);
      if (CoreRELog::onceToken != -1)
        dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
      v4 = (id)CoreRELog::log;
      if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
        goto LABEL_49;
      goto LABEL_50;
    case ')':
      if (*(_QWORD *)(v3 + 136) > a2)
        return *(_QWORD *)(*(_QWORD *)(v3 + 152) + 160 * a2 + 8);
      if (CoreRELog::onceToken != -1)
        dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
      v4 = (id)CoreRELog::log;
      if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
        goto LABEL_49;
      goto LABEL_50;
    case '*':
      if (*(_QWORD *)(v3 + 136) > a2)
        return *(_QWORD *)(*(_QWORD *)(v3 + 152) + 160 * a2 + 8);
      if (CoreRELog::onceToken != -1)
        dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
      v4 = (id)CoreRELog::log;
      if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
        goto LABEL_49;
      goto LABEL_50;
    case '+':
      if (*(_QWORD *)(v3 + 136) > a2)
        return *(_QWORD *)(*(_QWORD *)(v3 + 152) + 160 * a2 + 8);
      if (CoreRELog::onceToken != -1)
        dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
      v4 = (id)CoreRELog::log;
      if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
        goto LABEL_49;
      goto LABEL_50;
    case ',':
      if (*(_QWORD *)(v3 + 136) > a2)
        return *(_QWORD *)(*(_QWORD *)(v3 + 152) + 160 * a2 + 8);
      if (CoreRELog::onceToken != -1)
        dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
      v4 = (id)CoreRELog::log;
      if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
        goto LABEL_49;
      goto LABEL_50;
    case '-':
      if (*(_QWORD *)(v3 + 136) > a2)
        return *(_QWORD *)(*(_QWORD *)(v3 + 152) + 160 * a2 + 8);
      if (CoreRELog::onceToken != -1)
        dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
      v4 = (id)CoreRELog::log;
      if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
        goto LABEL_49;
      goto LABEL_50;
    case '.':
      if (*(_QWORD *)(v3 + 136) > a2)
        return *(_QWORD *)(*(_QWORD *)(v3 + 152) + 160 * a2 + 8);
      if (CoreRELog::onceToken != -1)
        dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
      v4 = (id)CoreRELog::log;
      if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
      {
LABEL_49:
        v7 = *(_QWORD *)(v3 + 136);
        v8 = 134218240;
        v9 = a2;
        v10 = 2048;
        v11 = v7;
        _os_log_error_impl(&dword_224FE9000, v4, OS_LOG_TYPE_ERROR, "Invalid connection index (%zu), node count: %zu", (uint8_t *)&v8, 0x16u);
      }
LABEL_50:

      return 0;
    default:
      if (CoreRELog::onceToken != -1)
        dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
      v5 = (id)CoreRELog::log;
      if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR))
      {
        LOWORD(v8) = 0;
        _os_log_error_impl(&dword_224FE9000, v5, OS_LOG_TYPE_ERROR, "Invalid blend tree definition type.", (uint8_t *)&v8, 2u);
      }

      return 0;
  }
}

uint64_t RETimelineDefinitionBlendTreeConnectionGetTarget(uint64_t a1, unint64_t a2)
{
  uint64_t v3;
  NSObject *v4;
  NSObject *v5;
  uint64_t v7;
  int v8;
  unint64_t v9;
  __int16 v10;
  uint64_t v11;
  uint64_t v12;

  v12 = *MEMORY[0x24BDAC8D0];
  v3 = *(_QWORD *)(a1 + 48);
  if (!v3)
    v3 = *(_QWORD *)(re::AssetHandle::asset<re::TimelineAsset>((re::TimelineAsset *)(a1 + 24)) + 8);
  switch(*(_DWORD *)(v3 + 8))
  {
    case '\'':
      if (*(_QWORD *)(v3 + 136) > a2)
        return *(_QWORD *)(*(_QWORD *)(v3 + 152) + 160 * a2 + 88);
      if (CoreRELog::onceToken != -1)
        dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
      v4 = (id)CoreRELog::log;
      if (!os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
        goto LABEL_50;
      goto LABEL_49;
    case '(':
      if (*(_QWORD *)(v3 + 136) > a2)
        return *(_QWORD *)(*(_QWORD *)(v3 + 152) + 160 * a2 + 88);
      if (CoreRELog::onceToken != -1)
        dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
      v4 = (id)CoreRELog::log;
      if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
        goto LABEL_49;
      goto LABEL_50;
    case ')':
      if (*(_QWORD *)(v3 + 136) > a2)
        return *(_QWORD *)(*(_QWORD *)(v3 + 152) + 160 * a2 + 88);
      if (CoreRELog::onceToken != -1)
        dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
      v4 = (id)CoreRELog::log;
      if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
        goto LABEL_49;
      goto LABEL_50;
    case '*':
      if (*(_QWORD *)(v3 + 136) > a2)
        return *(_QWORD *)(*(_QWORD *)(v3 + 152) + 160 * a2 + 88);
      if (CoreRELog::onceToken != -1)
        dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
      v4 = (id)CoreRELog::log;
      if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
        goto LABEL_49;
      goto LABEL_50;
    case '+':
      if (*(_QWORD *)(v3 + 136) > a2)
        return *(_QWORD *)(*(_QWORD *)(v3 + 152) + 160 * a2 + 88);
      if (CoreRELog::onceToken != -1)
        dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
      v4 = (id)CoreRELog::log;
      if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
        goto LABEL_49;
      goto LABEL_50;
    case ',':
      if (*(_QWORD *)(v3 + 136) > a2)
        return *(_QWORD *)(*(_QWORD *)(v3 + 152) + 160 * a2 + 88);
      if (CoreRELog::onceToken != -1)
        dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
      v4 = (id)CoreRELog::log;
      if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
        goto LABEL_49;
      goto LABEL_50;
    case '-':
      if (*(_QWORD *)(v3 + 136) > a2)
        return *(_QWORD *)(*(_QWORD *)(v3 + 152) + 160 * a2 + 88);
      if (CoreRELog::onceToken != -1)
        dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
      v4 = (id)CoreRELog::log;
      if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
        goto LABEL_49;
      goto LABEL_50;
    case '.':
      if (*(_QWORD *)(v3 + 136) > a2)
        return *(_QWORD *)(*(_QWORD *)(v3 + 152) + 160 * a2 + 88);
      if (CoreRELog::onceToken != -1)
        dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
      v4 = (id)CoreRELog::log;
      if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
      {
LABEL_49:
        v7 = *(_QWORD *)(v3 + 136);
        v8 = 134218240;
        v9 = a2;
        v10 = 2048;
        v11 = v7;
        _os_log_error_impl(&dword_224FE9000, v4, OS_LOG_TYPE_ERROR, "Invalid connection index (%zu), node count: %zu", (uint8_t *)&v8, 0x16u);
      }
LABEL_50:

      return 0;
    default:
      if (CoreRELog::onceToken != -1)
        dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
      v5 = (id)CoreRELog::log;
      if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR))
      {
        LOWORD(v8) = 0;
        _os_log_error_impl(&dword_224FE9000, v5, OS_LOG_TYPE_ERROR, "Invalid blend tree definition type.", (uint8_t *)&v8, 2u);
      }

      return 0;
  }
}

uint64_t RETimelineDefinitionBlendTreeAddNodeFromSource(_QWORD *a1, uint64_t a2, unint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t result;
  _QWORD *v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  _QWORD *v23;
  uint64_t v24;
  _QWORD *v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  re::AnimationBlendTreeNodeDescription *v29;
  _BOOL4 v30;
  const char *v31;
  uint64_t v32;
  float v33;
  const char *v34;
  const char *v35;
  _BOOL4 v36;
  uint64_t v37;
  const char *v38;
  _BOOL4 v39;
  uint64_t v40;
  const char *v41;
  _BOOL4 v42;
  uint64_t v43;
  const char *v44;
  _BOOL4 v45;
  uint64_t v46;
  const char *v47;
  _BOOL4 v48;
  uint64_t v49;
  const char *v50;
  _BOOL4 v51;
  uint64_t v52;
  const char *v53;
  _BOOL4 v54;
  uint64_t v55;
  const char *v56;
  uint64_t v57;
  int v58;
  const char *v59;
  __int16 v60;
  int v61;
  __int16 v62;
  unint64_t v63;
  __int16 v64;
  unint64_t v65;
  __int128 v66;
  __int128 v67;
  __int128 v68;
  __int128 v69;
  __int128 v70;
  uint64_t v71;

  v71 = *MEMORY[0x24BDAC8D0];
  v6 = a1[6];
  if (!v6)
  {
    v7 = re::AssetHandle::asset<re::TimelineAsset>((re::TimelineAsset *)(a1 + 3));
    if (v7)
      v6 = *(_QWORD *)(v7 + 8);
    else
      v6 = 0;
  }
  v8 = *(_QWORD *)(a2 + 48);
  if (!v8)
    v8 = *(_QWORD *)(re::AssetHandle::asset<re::TimelineAsset>((re::TimelineAsset *)(a2 + 24)) + 8);
  v9 = *(_DWORD *)(v6 + 8);
  if (v9 != *(_DWORD *)(v8 + 8))
    return 0;
  switch(v9)
  {
    case '\'':
      v10 = *(_QWORD **)(a2 + 48);
      if (!v10)
      {
        v11 = re::AssetHandle::asset<re::TimelineAsset>((re::TimelineAsset *)(a2 + 24));
        if (v11)
          v10 = *(_QWORD **)(v11 + 8);
        else
          v10 = 0;
      }
      v27 = v10[12];
      if (v27 <= a3)
      {
        v57 = 0;
        v69 = 0u;
        v70 = 0u;
        v67 = 0u;
        v68 = 0u;
        v66 = 0u;
        os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        v58 = 136315906;
        v59 = "operator[]";
        v60 = 1024;
        v61 = 797;
        v62 = 2048;
        v63 = a3;
        v64 = 2048;
        v65 = v27;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_132:
        v57 = 0;
        v69 = 0u;
        v70 = 0u;
        v67 = 0u;
        v68 = 0u;
        v66 = 0u;
        os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        v58 = 136315906;
        v59 = "operator[]";
        v60 = 1024;
        v61 = 797;
        v62 = 2048;
        v63 = a3;
        v64 = 2048;
        v65 = v27;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_133:
        v57 = 0;
        v69 = 0u;
        v70 = 0u;
        v67 = 0u;
        v68 = 0u;
        v66 = 0u;
        os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        v58 = 136315906;
        v59 = "operator[]";
        v60 = 1024;
        v61 = 797;
        v62 = 2048;
        v63 = a3;
        v64 = 2048;
        v65 = v27;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_134:
        v57 = 0;
        v69 = 0u;
        v70 = 0u;
        v67 = 0u;
        v68 = 0u;
        v66 = 0u;
        os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        v58 = 136315906;
        v59 = "operator[]";
        v60 = 1024;
        v61 = 797;
        v62 = 2048;
        v63 = a3;
        v64 = 2048;
        v65 = v27;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_135:
        v57 = 0;
        v69 = 0u;
        v70 = 0u;
        v67 = 0u;
        v68 = 0u;
        v66 = 0u;
        os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        v58 = 136315906;
        v59 = "operator[]";
        v60 = 1024;
        v61 = 797;
        v62 = 2048;
        v63 = a3;
        v64 = 2048;
        v65 = v27;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_136:
        v57 = 0;
        v69 = 0u;
        v70 = 0u;
        v67 = 0u;
        v68 = 0u;
        v66 = 0u;
        os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        v58 = 136315906;
        v59 = "operator[]";
        v60 = 1024;
        v61 = 797;
        v62 = 2048;
        v63 = a3;
        v64 = 2048;
        v65 = v27;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_137:
        v57 = 0;
        v69 = 0u;
        v70 = 0u;
        v67 = 0u;
        v68 = 0u;
        v66 = 0u;
        os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        v58 = 136315906;
        v59 = "operator[]";
        v60 = 1024;
        v61 = 797;
        v62 = 2048;
        v63 = a3;
        v64 = 2048;
        v65 = v27;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_138:
        v57 = 0;
        v69 = 0u;
        v70 = 0u;
        v67 = 0u;
        v68 = 0u;
        v66 = 0u;
        os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        v58 = 136315906;
        v59 = "operator[]";
        v60 = 1024;
        v61 = 797;
        v62 = 2048;
        v63 = a3;
        v64 = 2048;
        v65 = v27;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
      }
      v28 = v10[14];
      v29 = (re::AnimationBlendTreeNodeDescription *)(v28 + 88 * a3);
      v57 = -1;
      if (re::AnimationBlendTreeNodeDescription::isBlend(v29))
      {
        v30 = re::StringID::operator==((_QWORD *)v29 + 2, re::AnimationBlendTreeNodeDescription::kBlendAdditive);
        v31 = (const char *)*((_QWORD *)v29 + 1);
        v32 = v28 + 88 * a3;
        v33 = *(float *)(v32 + 80);
        v34 = *(const char **)(v32 + 72);
        if (!v30)
          goto LABEL_122;
        goto LABEL_115;
      }
      if (re::StringID::operator==((_QWORD *)v29 + 2, re::AnimationBlendTreeNodeDescription::kClip))
      {
        getBlendTreeClip<float>((re::AssetHandle *)&v66, v10, a3);
        if (!*((_QWORD *)&v66 + 1))
          goto LABEL_120;
        v35 = (const char *)*((_QWORD *)v29 + 1);
        re::AssetHandle::AssetHandle((re::AssetHandle *)&v58, (const re::AssetHandle *)&v66);
        TimelineDefinitionForBlendTree<float>::doAddTimeline((_anonymous_namespace_::TimelineDefinition *)a1, v35, (re::TimelineAsset *)&v58, *(const char **)(v28 + 88 * a3 + 72), &v57, *(float *)(v28 + 88 * a3 + 80));
        goto LABEL_119;
      }
      if (!re::StringID::operator==((_QWORD *)v29 + 2, re::AnimationBlendTreeNodeDescription::kInput))
        goto LABEL_125;
      goto LABEL_124;
    case '(':
      v13 = *(_QWORD **)(a2 + 48);
      if (!v13)
      {
        v14 = re::AssetHandle::asset<re::TimelineAsset>((re::TimelineAsset *)(a2 + 24));
        if (v14)
          v13 = *(_QWORD **)(v14 + 8);
        else
          v13 = 0;
      }
      v27 = v13[12];
      if (v27 <= a3)
        goto LABEL_132;
      v28 = v13[14];
      v29 = (re::AnimationBlendTreeNodeDescription *)(v28 + 88 * a3);
      v57 = -1;
      if (re::AnimationBlendTreeNodeDescription::isBlend(v29))
      {
        v36 = re::StringID::operator==((_QWORD *)v29 + 2, re::AnimationBlendTreeNodeDescription::kBlendAdditive);
        v31 = (const char *)*((_QWORD *)v29 + 1);
        v37 = v28 + 88 * a3;
        v33 = *(float *)(v37 + 80);
        v34 = *(const char **)(v37 + 72);
        if (!v36)
          goto LABEL_122;
        goto LABEL_115;
      }
      if (re::StringID::operator==((_QWORD *)v29 + 2, re::AnimationBlendTreeNodeDescription::kClip))
      {
        getBlendTreeClip<float>((re::AssetHandle *)&v66, v13, a3);
        if (!*((_QWORD *)&v66 + 1))
          goto LABEL_120;
        v38 = (const char *)*((_QWORD *)v29 + 1);
        re::AssetHandle::AssetHandle((re::AssetHandle *)&v58, (const re::AssetHandle *)&v66);
        TimelineDefinitionForBlendTree<double>::doAddTimeline((_anonymous_namespace_::TimelineDefinition *)a1, v38, (re::TimelineAsset *)&v58, *(const char **)(v28 + 88 * a3 + 72), &v57, *(float *)(v28 + 88 * a3 + 80));
        goto LABEL_119;
      }
      if (!re::StringID::operator==((_QWORD *)v29 + 2, re::AnimationBlendTreeNodeDescription::kInput))
        goto LABEL_125;
      goto LABEL_124;
    case ')':
      v15 = *(_QWORD **)(a2 + 48);
      if (!v15)
      {
        v16 = re::AssetHandle::asset<re::TimelineAsset>((re::TimelineAsset *)(a2 + 24));
        if (v16)
          v15 = *(_QWORD **)(v16 + 8);
        else
          v15 = 0;
      }
      v27 = v15[12];
      if (v27 <= a3)
        goto LABEL_133;
      v28 = v15[14];
      v29 = (re::AnimationBlendTreeNodeDescription *)(v28 + 88 * a3);
      v57 = -1;
      if (re::AnimationBlendTreeNodeDescription::isBlend(v29))
      {
        v39 = re::StringID::operator==((_QWORD *)v29 + 2, re::AnimationBlendTreeNodeDescription::kBlendAdditive);
        v31 = (const char *)*((_QWORD *)v29 + 1);
        v40 = v28 + 88 * a3;
        v33 = *(float *)(v40 + 80);
        v34 = *(const char **)(v40 + 72);
        if (!v39)
          goto LABEL_122;
        goto LABEL_115;
      }
      if (re::StringID::operator==((_QWORD *)v29 + 2, re::AnimationBlendTreeNodeDescription::kClip))
      {
        getBlendTreeClip<float>((re::AssetHandle *)&v66, v15, a3);
        if (!*((_QWORD *)&v66 + 1))
          goto LABEL_120;
        v41 = (const char *)*((_QWORD *)v29 + 1);
        re::AssetHandle::AssetHandle((re::AssetHandle *)&v58, (const re::AssetHandle *)&v66);
        TimelineDefinitionForBlendTree<re::Vector2<float>>::doAddTimeline((_anonymous_namespace_::TimelineDefinition *)a1, v41, (re::TimelineAsset *)&v58, *(const char **)(v28 + 88 * a3 + 72), &v57, *(float *)(v28 + 88 * a3 + 80));
        goto LABEL_119;
      }
      if (!re::StringID::operator==((_QWORD *)v29 + 2, re::AnimationBlendTreeNodeDescription::kInput))
        goto LABEL_125;
      goto LABEL_124;
    case '*':
      v17 = *(_QWORD **)(a2 + 48);
      if (!v17)
      {
        v18 = re::AssetHandle::asset<re::TimelineAsset>((re::TimelineAsset *)(a2 + 24));
        if (v18)
          v17 = *(_QWORD **)(v18 + 8);
        else
          v17 = 0;
      }
      v27 = v17[12];
      if (v27 <= a3)
        goto LABEL_134;
      v28 = v17[14];
      v29 = (re::AnimationBlendTreeNodeDescription *)(v28 + 88 * a3);
      v57 = -1;
      if (re::AnimationBlendTreeNodeDescription::isBlend(v29))
      {
        v42 = re::StringID::operator==((_QWORD *)v29 + 2, re::AnimationBlendTreeNodeDescription::kBlendAdditive);
        v31 = (const char *)*((_QWORD *)v29 + 1);
        v43 = v28 + 88 * a3;
        v33 = *(float *)(v43 + 80);
        v34 = *(const char **)(v43 + 72);
        if (!v42)
          goto LABEL_122;
        goto LABEL_115;
      }
      if (re::StringID::operator==((_QWORD *)v29 + 2, re::AnimationBlendTreeNodeDescription::kClip))
      {
        getBlendTreeClip<float>((re::AssetHandle *)&v66, v17, a3);
        if (!*((_QWORD *)&v66 + 1))
          goto LABEL_120;
        v44 = (const char *)*((_QWORD *)v29 + 1);
        re::AssetHandle::AssetHandle((re::AssetHandle *)&v58, (const re::AssetHandle *)&v66);
        TimelineDefinitionForBlendTree<re::Vector3<float>>::doAddTimeline((_anonymous_namespace_::TimelineDefinition *)a1, v44, (re::TimelineAsset *)&v58, *(const char **)(v28 + 88 * a3 + 72), &v57, *(float *)(v28 + 88 * a3 + 80));
        goto LABEL_119;
      }
      if (!re::StringID::operator==((_QWORD *)v29 + 2, re::AnimationBlendTreeNodeDescription::kInput))
        goto LABEL_125;
      goto LABEL_124;
    case '+':
      v19 = *(_QWORD **)(a2 + 48);
      if (!v19)
      {
        v20 = re::AssetHandle::asset<re::TimelineAsset>((re::TimelineAsset *)(a2 + 24));
        if (v20)
          v19 = *(_QWORD **)(v20 + 8);
        else
          v19 = 0;
      }
      v27 = v19[12];
      if (v27 <= a3)
        goto LABEL_135;
      v28 = v19[14];
      v29 = (re::AnimationBlendTreeNodeDescription *)(v28 + 88 * a3);
      v57 = -1;
      if (re::AnimationBlendTreeNodeDescription::isBlend(v29))
      {
        v45 = re::StringID::operator==((_QWORD *)v29 + 2, re::AnimationBlendTreeNodeDescription::kBlendAdditive);
        v31 = (const char *)*((_QWORD *)v29 + 1);
        v46 = v28 + 88 * a3;
        v33 = *(float *)(v46 + 80);
        v34 = *(const char **)(v46 + 72);
        if (!v45)
          goto LABEL_122;
        goto LABEL_115;
      }
      if (re::StringID::operator==((_QWORD *)v29 + 2, re::AnimationBlendTreeNodeDescription::kClip))
      {
        getBlendTreeClip<float>((re::AssetHandle *)&v66, v19, a3);
        if (!*((_QWORD *)&v66 + 1))
          goto LABEL_120;
        v47 = (const char *)*((_QWORD *)v29 + 1);
        re::AssetHandle::AssetHandle((re::AssetHandle *)&v58, (const re::AssetHandle *)&v66);
        TimelineDefinitionForBlendTree<re::Vector4<float>>::doAddTimeline((_anonymous_namespace_::TimelineDefinition *)a1, v47, (re::TimelineAsset *)&v58, *(const char **)(v28 + 88 * a3 + 72), &v57, *(float *)(v28 + 88 * a3 + 80));
        goto LABEL_119;
      }
      if (!re::StringID::operator==((_QWORD *)v29 + 2, re::AnimationBlendTreeNodeDescription::kInput))
        goto LABEL_125;
      goto LABEL_124;
    case ',':
      v21 = *(_QWORD **)(a2 + 48);
      if (!v21)
      {
        v22 = re::AssetHandle::asset<re::TimelineAsset>((re::TimelineAsset *)(a2 + 24));
        if (v22)
          v21 = *(_QWORD **)(v22 + 8);
        else
          v21 = 0;
      }
      v27 = v21[12];
      if (v27 <= a3)
        goto LABEL_136;
      v28 = v21[14];
      v29 = (re::AnimationBlendTreeNodeDescription *)(v28 + 88 * a3);
      v57 = -1;
      if (re::AnimationBlendTreeNodeDescription::isBlend(v29))
      {
        v48 = re::StringID::operator==((_QWORD *)v29 + 2, re::AnimationBlendTreeNodeDescription::kBlendAdditive);
        v31 = (const char *)*((_QWORD *)v29 + 1);
        v49 = v28 + 88 * a3;
        v33 = *(float *)(v49 + 80);
        v34 = *(const char **)(v49 + 72);
        if (!v48)
          goto LABEL_122;
        goto LABEL_115;
      }
      if (re::StringID::operator==((_QWORD *)v29 + 2, re::AnimationBlendTreeNodeDescription::kClip))
      {
        getBlendTreeClip<float>((re::AssetHandle *)&v66, v21, a3);
        if (!*((_QWORD *)&v66 + 1))
          goto LABEL_120;
        v50 = (const char *)*((_QWORD *)v29 + 1);
        re::AssetHandle::AssetHandle((re::AssetHandle *)&v58, (const re::AssetHandle *)&v66);
        TimelineDefinitionForBlendTree<re::Quaternion<float>>::doAddTimeline((_anonymous_namespace_::TimelineDefinition *)a1, v50, (re::TimelineAsset *)&v58, *(const char **)(v28 + 88 * a3 + 72), &v57, *(float *)(v28 + 88 * a3 + 80));
        goto LABEL_119;
      }
      if (!re::StringID::operator==((_QWORD *)v29 + 2, re::AnimationBlendTreeNodeDescription::kInput))
        goto LABEL_125;
      goto LABEL_124;
    case '-':
      v23 = *(_QWORD **)(a2 + 48);
      if (!v23)
      {
        v24 = re::AssetHandle::asset<re::TimelineAsset>((re::TimelineAsset *)(a2 + 24));
        if (v24)
          v23 = *(_QWORD **)(v24 + 8);
        else
          v23 = 0;
      }
      v27 = v23[12];
      if (v27 <= a3)
        goto LABEL_137;
      v28 = v23[14];
      v29 = (re::AnimationBlendTreeNodeDescription *)(v28 + 88 * a3);
      v57 = -1;
      if (re::AnimationBlendTreeNodeDescription::isBlend(v29))
      {
        v51 = re::StringID::operator==((_QWORD *)v29 + 2, re::AnimationBlendTreeNodeDescription::kBlendAdditive);
        v31 = (const char *)*((_QWORD *)v29 + 1);
        v52 = v28 + 88 * a3;
        v33 = *(float *)(v52 + 80);
        v34 = *(const char **)(v52 + 72);
        if (!v51)
          goto LABEL_122;
        goto LABEL_115;
      }
      if (re::StringID::operator==((_QWORD *)v29 + 2, re::AnimationBlendTreeNodeDescription::kClip))
      {
        getBlendTreeClip<float>((re::AssetHandle *)&v66, v23, a3);
        if (!*((_QWORD *)&v66 + 1))
          goto LABEL_120;
        v53 = (const char *)*((_QWORD *)v29 + 1);
        re::AssetHandle::AssetHandle((re::AssetHandle *)&v58, (const re::AssetHandle *)&v66);
        TimelineDefinitionForBlendTree<re::GenericSRT<float>>::doAddTimeline((_anonymous_namespace_::TimelineDefinition *)a1, v53, (re::TimelineAsset *)&v58, *(const char **)(v28 + 88 * a3 + 72), &v57, *(float *)(v28 + 88 * a3 + 80));
        goto LABEL_119;
      }
      if (!re::StringID::operator==((_QWORD *)v29 + 2, re::AnimationBlendTreeNodeDescription::kInput))
        goto LABEL_125;
      goto LABEL_124;
    case '.':
      v25 = *(_QWORD **)(a2 + 48);
      if (!v25)
      {
        v26 = re::AssetHandle::asset<re::TimelineAsset>((re::TimelineAsset *)(a2 + 24));
        if (v26)
          v25 = *(_QWORD **)(v26 + 8);
        else
          v25 = 0;
      }
      v27 = v25[12];
      if (v27 <= a3)
        goto LABEL_138;
      v28 = v25[14];
      v29 = (re::AnimationBlendTreeNodeDescription *)(v28 + 88 * a3);
      v57 = -1;
      if (re::AnimationBlendTreeNodeDescription::isBlend(v29))
      {
        v54 = re::StringID::operator==((_QWORD *)v29 + 2, re::AnimationBlendTreeNodeDescription::kBlendAdditive);
        v31 = (const char *)*((_QWORD *)v29 + 1);
        v55 = v28 + 88 * a3;
        v33 = *(float *)(v55 + 80);
        v34 = *(const char **)(v55 + 72);
        if (v54)
LABEL_115:
          TimelineDefinitionForBlendTree<float>::doAddAdditiveBlendNode((_anonymous_namespace_ *)a1, v31, v34, &v57, v33);
        else
LABEL_122:
          TimelineDefinitionForBlendTree<float>::doAddBlendNode((_anonymous_namespace_ *)a1, v31, v34, &v57, v33);
      }
      else if (re::StringID::operator==((_QWORD *)v29 + 2, re::AnimationBlendTreeNodeDescription::kClip))
      {
        getBlendTreeClip<float>((re::AssetHandle *)&v66, v25, a3);
        if (*((_QWORD *)&v66 + 1))
        {
          v56 = (const char *)*((_QWORD *)v29 + 1);
          re::AssetHandle::AssetHandle((re::AssetHandle *)&v58, (const re::AssetHandle *)&v66);
          TimelineDefinitionForBlendTree<re::SkeletalPose>::doAddTimeline((_anonymous_namespace_::TimelineDefinition *)a1, v56, (re::TimelineAsset *)&v58, *(const char **)(v28 + 88 * a3 + 72), &v57, *(float *)(v28 + 88 * a3 + 80));
LABEL_119:
          re::AssetHandle::~AssetHandle((re::AssetHandle *)&v58);
        }
LABEL_120:
        re::AssetHandle::~AssetHandle((re::AssetHandle *)&v66);
      }
      else if (re::StringID::operator==((_QWORD *)v29 + 2, re::AnimationBlendTreeNodeDescription::kInput))
      {
LABEL_124:
        TimelineDefinitionForBlendTree<float>::doAddInput((_anonymous_namespace_ *)a1, *((const char **)v29 + 1), *(const char **)(v28 + 88 * a3 + 40), *(const char **)(v28 + 88 * a3 + 56), *(const char **)(v28 + 88 * a3 + 72), &v57, *(float *)(v28 + 88 * a3 + 80));
      }
      else
      {
LABEL_125:
        TimelineDefinitionForBlendTree<float>::doAddRigNode((_anonymous_namespace_ *)a1, *(const char **)(v28 + 88 * a3 + 24), *((const char **)v29 + 1), *(const char **)(v28 + 88 * a3 + 72), &v57, *(float *)(v28 + 88 * a3 + 80));
      }
      result = v57;
      break;
    default:
      return 0;
  }
  return result;
}

uint64_t RETimelineDefinitionBlendTreeAddConnectionFromSource(_QWORD *a1, uint64_t a2, unint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  const char **v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  uint64_t v26;

  v26 = *MEMORY[0x24BDAC8D0];
  v6 = a1[6];
  if (!v6)
  {
    v7 = re::AssetHandle::asset<re::TimelineAsset>((re::TimelineAsset *)(a1 + 3));
    if (v7)
      v6 = *(_QWORD *)(v7 + 8);
    else
      v6 = 0;
  }
  v8 = *(_QWORD *)(a2 + 48);
  if (!v8)
    v8 = *(_QWORD *)(re::AssetHandle::asset<re::TimelineAsset>((re::TimelineAsset *)(a2 + 24)) + 8);
  v9 = *(_DWORD *)(v6 + 8);
  if (v9 == *(_DWORD *)(v8 + 8))
  {
    switch(v9)
    {
      case '\'':
        v10 = *(_QWORD *)(a2 + 48);
        if (!v10)
        {
          v11 = re::AssetHandle::asset<re::TimelineAsset>((re::TimelineAsset *)(a2 + 24));
          if (v11)
            v10 = *(_QWORD *)(v11 + 8);
          else
            v10 = 0;
        }
        if (*(_QWORD *)(v10 + 136) > a3)
          goto LABEL_57;
        v24 = 0u;
        v25 = 0u;
        v22 = 0u;
        v23 = 0u;
        v21 = 0u;
        os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_59:
        v24 = 0u;
        v25 = 0u;
        v22 = 0u;
        v23 = 0u;
        v21 = 0u;
        os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_60:
        v24 = 0u;
        v25 = 0u;
        v22 = 0u;
        v23 = 0u;
        v21 = 0u;
        os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_61:
        v24 = 0u;
        v25 = 0u;
        v22 = 0u;
        v23 = 0u;
        v21 = 0u;
        os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_62:
        v24 = 0u;
        v25 = 0u;
        v22 = 0u;
        v23 = 0u;
        v21 = 0u;
        os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_63:
        v24 = 0u;
        v25 = 0u;
        v22 = 0u;
        v23 = 0u;
        v21 = 0u;
        os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_64:
        v24 = 0u;
        v25 = 0u;
        v22 = 0u;
        v23 = 0u;
        v21 = 0u;
        os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
        goto LABEL_65;
      case '(':
        v10 = *(_QWORD *)(a2 + 48);
        if (!v10)
        {
          v13 = re::AssetHandle::asset<re::TimelineAsset>((re::TimelineAsset *)(a2 + 24));
          if (v13)
            v10 = *(_QWORD *)(v13 + 8);
          else
            v10 = 0;
        }
        if (*(_QWORD *)(v10 + 136) > a3)
          goto LABEL_57;
        goto LABEL_59;
      case ')':
        v10 = *(_QWORD *)(a2 + 48);
        if (!v10)
        {
          v14 = re::AssetHandle::asset<re::TimelineAsset>((re::TimelineAsset *)(a2 + 24));
          if (v14)
            v10 = *(_QWORD *)(v14 + 8);
          else
            v10 = 0;
        }
        if (*(_QWORD *)(v10 + 136) > a3)
          goto LABEL_57;
        goto LABEL_60;
      case '*':
        v10 = *(_QWORD *)(a2 + 48);
        if (!v10)
        {
          v15 = re::AssetHandle::asset<re::TimelineAsset>((re::TimelineAsset *)(a2 + 24));
          if (v15)
            v10 = *(_QWORD *)(v15 + 8);
          else
            v10 = 0;
        }
        if (*(_QWORD *)(v10 + 136) > a3)
          goto LABEL_57;
        goto LABEL_61;
      case '+':
        v10 = *(_QWORD *)(a2 + 48);
        if (!v10)
        {
          v16 = re::AssetHandle::asset<re::TimelineAsset>((re::TimelineAsset *)(a2 + 24));
          if (v16)
            v10 = *(_QWORD *)(v16 + 8);
          else
            v10 = 0;
        }
        if (*(_QWORD *)(v10 + 136) > a3)
          goto LABEL_57;
        goto LABEL_62;
      case ',':
        v10 = *(_QWORD *)(a2 + 48);
        if (!v10)
        {
          v17 = re::AssetHandle::asset<re::TimelineAsset>((re::TimelineAsset *)(a2 + 24));
          if (v17)
            v10 = *(_QWORD *)(v17 + 8);
          else
            v10 = 0;
        }
        if (*(_QWORD *)(v10 + 136) > a3)
          goto LABEL_57;
        goto LABEL_63;
      case '-':
        v10 = *(_QWORD *)(a2 + 48);
        if (!v10)
        {
          v18 = re::AssetHandle::asset<re::TimelineAsset>((re::TimelineAsset *)(a2 + 24));
          if (v18)
            v10 = *(_QWORD *)(v18 + 8);
          else
            v10 = 0;
        }
        if (*(_QWORD *)(v10 + 136) > a3)
          goto LABEL_57;
        goto LABEL_64;
      case '.':
        v10 = *(_QWORD *)(a2 + 48);
        if (!v10)
        {
          v19 = re::AssetHandle::asset<re::TimelineAsset>((re::TimelineAsset *)(a2 + 24));
          if (v19)
            v10 = *(_QWORD *)(v19 + 8);
          else
            v10 = 0;
        }
        if (*(_QWORD *)(v10 + 136) <= a3)
        {
LABEL_65:
          v24 = 0u;
          v25 = 0u;
          v22 = 0u;
          v23 = 0u;
          v21 = 0u;
          os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
          _os_log_send_and_compose_impl();
          _os_crash_msg();
          __break(1u);
        }
LABEL_57:
        v20 = (const char **)(*(_QWORD *)(v10 + 152) + 160 * a3);
        *(_QWORD *)&v21 = -1;
        TimelineDefinitionForBlendTree<float>::doAddConnection((_anonymous_namespace_ *)a1, v20[1], v20[11], v20[9], v20[19], (uint64_t *)&v21);
        return v21;
      default:
        return 0;
    }
  }
  return 0;
}

_anonymous_namespace_::TimelineDefinition *RETimelineDefinitionCreateTypedEventTimeline(re *a1, const char *a2, char a3)
{
  uint64_t *v6;
  re::EventTimelineAssetData *v7;
  uint64_t *v8;
  _anonymous_namespace_::TimelineDefinition *v9;
  _QWORD *v10;
  uint64_t v11;
  _anonymous_namespace_ *v12;
  _QWORD v14[3];
  _QWORD *v15;
  re *v16;
  _QWORD v17[5];

  v17[4] = *MEMORY[0x24BDAC8D0];
  v6 = re::globalAllocators(a1);
  v7 = (re::EventTimelineAssetData *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v6[2] + 32))(v6[2], 640, 8);
  v14[0] = &off_24ED9AC18;
  v15 = v14;
  v16 = re::EventTimelineAssetData::EventTimelineAssetData(v7);
  v17[3] = v17;
  v17[0] = &off_24ED9AC18;
  v8 = re::globalAllocators(v16);
  v9 = (_anonymous_namespace_::TimelineDefinition *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v8[2] + 32))(v8[2], 112, 8);
  std::unique_ptr<re::RigHierarchy,std::function<void ()(re::RigHierarchy*)>>::~unique_ptr[abi:nn180100]((uint64_t *)&v16);
  v10 = v15;
  if (v15 == v14)
  {
    v11 = 4;
    v10 = v14;
    goto LABEL_5;
  }
  if (v15)
  {
    v11 = 5;
LABEL_5:
    (*(void (**)(void))(*v10 + 8 * v11))();
  }
  v16 = 0;
  v17[0] = &str_110;
  re::StringID::operator=((unint64_t *)v12 + 10, (uint64_t *)&v16);
  re::StringID::destroyString((re::StringID *)&v16);
  *((_BYTE *)v12 + 552) = a3;
  return v9;
}

_anonymous_namespace_::TimelineDefinition *RETimelineDefinitionCreateEventTimeline(re *a1)
{
  return RETimelineDefinitionCreateTypedEventTimeline(a1, (const char *)a1, -1);
}

uint64_t RETimelineDefinitionEventTimelineGetAnimatableType(uint64_t a1)
{
  uint64_t v1;
  NSObject *v3;
  uint8_t v5[16];

  v1 = *(_QWORD *)(a1 + 48);
  if (!v1)
    v1 = *(_QWORD *)(re::AssetHandle::asset<re::TimelineAsset>((re::TimelineAsset *)(a1 + 24)) + 8);
  if (*(_DWORD *)(v1 + 8) == 48)
  {
    return *(char *)(v1 + 552);
  }
  else
  {
    if (CoreRELog::onceToken != -1)
      dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
    v3 = (id)CoreRELog::log;
    if (os_log_type_enabled(v3, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)v5 = 0;
      _os_log_error_impl(&dword_224FE9000, v3, OS_LOG_TYPE_ERROR, "RETimelineDefinitionEventTimelineGetAnimatableType - Wrong timeline type. Expected an event timeline.", v5, 2u);
    }

    return -1;
  }
}

uint64_t RETimelineDefinitionEventTimelineGetEventTypeName(uint64_t a1)
{
  uint64_t v1;
  NSObject *v3;
  uint8_t v4[16];

  v1 = *(_QWORD *)(a1 + 48);
  if (!v1)
    v1 = *(_QWORD *)(re::AssetHandle::asset<re::TimelineAsset>((re::TimelineAsset *)(a1 + 24)) + 8);
  if (*(_DWORD *)(v1 + 8) == 48)
    return *(_QWORD *)(v1 + 88);
  if (CoreRELog::onceToken != -1)
    dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
  v3 = (id)CoreRELog::log;
  if (os_log_type_enabled(v3, OS_LOG_TYPE_ERROR))
  {
    *(_WORD *)v4 = 0;
    _os_log_error_impl(&dword_224FE9000, v3, OS_LOG_TYPE_ERROR, "RETimelineDefinitionEventTimelineGetAnimatableType - Wrong timeline type. Expected an event timeline.", v4, 2u);
  }

  return 0;
}

BOOL RETimelineDefinitionEventTimelineGetReversible(uint64_t a1)
{
  uint64_t v1;
  NSObject *v3;
  uint8_t v4[16];

  v1 = *(_QWORD *)(a1 + 48);
  if (!v1)
    v1 = *(_QWORD *)(re::AssetHandle::asset<re::TimelineAsset>((re::TimelineAsset *)(a1 + 24)) + 8);
  if (*(_DWORD *)(v1 + 8) == 48)
    return *(_BYTE *)(v1 + 592) != 0;
  if (CoreRELog::onceToken != -1)
    dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
  v3 = (id)CoreRELog::log;
  if (os_log_type_enabled(v3, OS_LOG_TYPE_ERROR))
  {
    *(_WORD *)v4 = 0;
    _os_log_error_impl(&dword_224FE9000, v3, OS_LOG_TYPE_ERROR, "RETimelineDefinitionEventTimelineGetAnimatableType - Wrong timeline type. Expected an event timeline.", v4, 2u);
  }

  return 0;
}

void RETimelineDefinitionEventTimelineSetReversible(_anonymous_namespace_::TimelineDefinition *a1, char a2)
{
  _anonymous_namespace_ *v3;
  NSObject *v4;
  uint8_t v5[16];

  if (*((_DWORD *)v3 + 2) == 48)
  {
    *((_BYTE *)v3 + 592) = a2;
  }
  else
  {
    if (CoreRELog::onceToken != -1)
      dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
    v4 = (id)CoreRELog::log;
    if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)v5 = 0;
      _os_log_error_impl(&dword_224FE9000, v4, OS_LOG_TYPE_ERROR, "RETimelineDefinitionEventTimelineGetAnimatableType - Wrong timeline type. Expected an event timeline.", v5, 2u);
    }

  }
}

BOOL RETimelineDefinitionEventTimelineSetConstantData(_anonymous_namespace_::TimelineDefinition *a1, uint64_t a2, uint64_t a3)
{
  _anonymous_namespace_ *v5;
  int v6;
  _anonymous_namespace_ *v7;
  void *v8;
  NSObject *v9;
  _QWORD v11[2];
  uint8_t buf[8];
  uint64_t v13;

  v6 = *((_DWORD *)v5 + 2);
  if (v6 == 48)
  {
    v7 = v5;
    v11[0] = a2;
    v11[1] = a3;
    re::FixedArray<unsigned char>::FixedArray((_anonymous_namespace_ *)buf, (uint64_t)v11);
    re::FixedArray<unsigned char>::operator=((uint64_t *)v7 + 70, (uint64_t *)buf);
    v8 = (void *)*((_QWORD *)v7 + 73);
    *((_QWORD *)v7 + 73) = 0;

    if (*(_QWORD *)buf && v13)
      (*(void (**)(void))(**(_QWORD **)buf + 40))();
  }
  else
  {
    if (CoreRELog::onceToken != -1)
      dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
    v9 = (id)CoreRELog::log;
    if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      _os_log_error_impl(&dword_224FE9000, v9, OS_LOG_TYPE_ERROR, "RETimelineDefinitionEventTimelineAddEvent - Wrong timeline type. Expected an event timeline.", buf, 2u);
    }

  }
  return v6 == 48;
}

BOOL RETimelineDefinitionEventTimelineSetAndRetainSwiftConstantData(_anonymous_namespace_::TimelineDefinition *a1, void *a2)
{
  _anonymous_namespace_ *v3;
  int v4;
  _anonymous_namespace_ *v5;
  uint64_t v6;
  NSObject *v7;
  NSObject *v9;
  uint8_t buf[16];

  v4 = *((_DWORD *)v3 + 2);
  if (v4 == 48)
  {
    v5 = v3;
    v9 = a2;
    v6 = *((_QWORD *)v5 + 70);
    if (v6)
    {
      if (*((_QWORD *)v5 + 71))
      {
        (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v6 + 40))(v6, *((_QWORD *)v5 + 72));
        *((_QWORD *)v5 + 71) = 0;
        *((_QWORD *)v5 + 72) = 0;
      }
      *((_QWORD *)v5 + 70) = 0;
    }
    re::ObjCObject::operator=((id *)v5 + 73, (id *)&v9);
    v7 = v9;
  }
  else
  {
    if (CoreRELog::onceToken != -1)
      dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
    v7 = (id)CoreRELog::log;
    if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      _os_log_error_impl(&dword_224FE9000, v7, OS_LOG_TYPE_ERROR, "RETimelineDefinitionEventTimelineAddEvent - Wrong timeline type. Expected an event timeline.", buf, 2u);
    }
  }

  return v4 == 48;
}

id RETimelineDefinitionEventTimelineGetSwiftConstantData(_anonymous_namespace_::TimelineDefinition *a1)
{
  _anonymous_namespace_ *v1;
  id v2;
  NSObject *v3;
  uint8_t v5[16];

  if (*((_DWORD *)v1 + 2) == 48)
  {
    v2 = objc_retainAutorelease(*((id *)v1 + 73));

  }
  else
  {
    if (CoreRELog::onceToken != -1)
      dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
    v3 = (id)CoreRELog::log;
    if (os_log_type_enabled(v3, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)v5 = 0;
      _os_log_error_impl(&dword_224FE9000, v3, OS_LOG_TYPE_ERROR, "RETimelineDefinitionEventTimelineAddEvent - Wrong timeline type. Expected an event timeline.", v5, 2u);
    }

    return 0;
  }
  return v2;
}

uint64_t RETimelineDefinitionEventTimelineGetConstantDataSize(_anonymous_namespace_::TimelineDefinition *a1)
{
  _anonymous_namespace_ *v1;
  NSObject *v3;
  uint8_t v4[16];

  if (*((_DWORD *)v1 + 2) == 48)
    return *((_QWORD *)v1 + 71);
  if (CoreRELog::onceToken != -1)
    dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
  v3 = (id)CoreRELog::log;
  if (os_log_type_enabled(v3, OS_LOG_TYPE_ERROR))
  {
    *(_WORD *)v4 = 0;
    _os_log_error_impl(&dword_224FE9000, v3, OS_LOG_TYPE_ERROR, "RETimelineDefinitionEventTimelineAddEvent - Wrong timeline type. Expected an event timeline.", v4, 2u);
  }

  return 0;
}

uint64_t RETimelineDefinitionEventTimelineGetConstantData(_anonymous_namespace_::TimelineDefinition *a1)
{
  _anonymous_namespace_ *v1;
  NSObject *v3;
  uint8_t buf[16];
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  uint64_t v9;

  v9 = *MEMORY[0x24BDAC8D0];
  if (*((_DWORD *)v1 + 2) == 48)
  {
    if (*((_QWORD *)v1 + 71))
      return *((_QWORD *)v1 + 72);
    v7 = 0u;
    v8 = 0u;
    v5 = 0u;
    v6 = 0u;
    *(_OWORD *)buf = 0u;
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
    goto LABEL_9;
  }
  if (CoreRELog::onceToken != -1)
LABEL_9:
    dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
  v3 = (id)CoreRELog::log;
  if (os_log_type_enabled(v3, OS_LOG_TYPE_ERROR))
  {
    *(_WORD *)buf = 0;
    _os_log_error_impl(&dword_224FE9000, v3, OS_LOG_TYPE_ERROR, "RETimelineDefinitionEventTimelineAddEvent - Wrong timeline type. Expected an event timeline.", buf, 2u);
  }

  return 0;
}

uint64_t RETimelineDefinitionEventTimelineAddEvent(_anonymous_namespace_::TimelineDefinition *a1, float a2, float a3)
{
  _anonymous_namespace_ *v5;
  uint64_t v6;
  NSObject *v8;
  const char *v9;
  uint8_t *v10;
  __int16 v11;
  __int16 v12;
  uint64_t v13;

  if (*((_DWORD *)v5 + 2) != 48)
  {
    if (CoreRELog::onceToken != -1)
      dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
    v8 = (id)CoreRELog::log;
    if (!os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
      goto LABEL_11;
    v12 = 0;
    v9 = "RETimelineDefinitionEventTimelineAddEvent - Wrong timeline type. Expected an event timeline.";
    v10 = (uint8_t *)&v12;
    goto LABEL_13;
  }
  re::TimelineEventData::addEvent((_anonymous_namespace_ *)((char *)v5 + 80), a2, a3, v6, (uint64_t)&v12);
  if ((_BYTE)v12)
    return v13;
  if (CoreRELog::onceToken != -1)
    dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
  v8 = (id)CoreRELog::log;
  if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
  {
    v11 = 0;
    v9 = "Cannot set event on timline. Check that time and duration does not overlap with existing event.";
    v10 = (uint8_t *)&v11;
LABEL_13:
    _os_log_error_impl(&dword_224FE9000, v8, OS_LOG_TYPE_ERROR, v9, v10, 2u);
  }
LABEL_11:

  return -1;
}

BOOL RETimelineDefinitionEventTimelineAddParameter(_anonymous_namespace_::TimelineDefinition *a1, const char *a2, int a3)
{
  _anonymous_namespace_ *v5;
  _QWORD *v6;
  _BOOL8 v7;
  NSObject *v8;
  StringID v10;

  if (*((_DWORD *)v5 + 2) == 48)
  {
    v6 = (_QWORD *)((char *)v5 + 80);
    *(_QWORD *)&v10.var0 = 0;
    v10.var1 = (char *)&str_110;
    v7 = re::TimelineEventData::addParameterDescription(v6, &v10, a3);
    re::StringID::destroyString((re::StringID *)&v10);
  }
  else
  {
    if (CoreRELog::onceToken != -1)
      dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
    v8 = (id)CoreRELog::log;
    if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)&v10.var0 = 0;
      _os_log_error_impl(&dword_224FE9000, v8, OS_LOG_TYPE_ERROR, "RETimelineDefinitionEventTimelineAddParameter - Wrong timeline type. Expected an event timeline.", (uint8_t *)&v10, 2u);
    }

    return 0;
  }
  return v7;
}

uint64_t RETimelineDefinitionEventTimelineSetParameterData(_anonymous_namespace_::TimelineDefinition *a1, char *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  _anonymous_namespace_ *v9;
  _anonymous_namespace_ *v10;
  uint64_t v11;
  char v12;
  unsigned __int8 *v13;
  int v14;
  NSObject *v15;
  uint64_t v16;
  _QWORD *v17;
  unint64_t v18;
  unint64_t v19;
  _QWORD v21[2];
  uint64_t v22[4];
  int v23;
  const char *v24;
  __int16 v25;
  int v26;
  __int16 v27;
  unint64_t v28;
  __int16 v29;
  unint64_t v30;
  uint8_t buf[16];
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  uint64_t v36;

  v36 = *MEMORY[0x24BDAC8D0];
  if (*((_DWORD *)v9 + 2) == 48)
  {
    v10 = v9;
    *(_QWORD *)buf = a4;
    *(_QWORD *)&buf[8] = a5;
    re::FixedArray<unsigned char>::FixedArray((_anonymous_namespace_ *)v22, (uint64_t)buf);
    if (a2)
    {
      v11 = *a2;
      if (*a2)
      {
        v12 = a2[1];
        if (v12)
        {
          v13 = (unsigned __int8 *)(a2 + 2);
          do
          {
            v11 = 31 * v11 + v12;
            v14 = *v13++;
            v12 = v14;
          }
          while (v14);
        }
      }
    }
    else
    {
      v11 = 0;
    }
    v21[0] = 2 * v11;
    v21[1] = a2;
    v17 = (_QWORD *)re::HashTable<re::StringID,re::TimelineEventParameterDescription,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::tryGet((uint64_t)v10 + 216, v21);
    if (v17 && v17[1] == 5)
    {
      v18 = *v17 + *((_QWORD *)v10 + 57) * a3;
      v19 = *((_QWORD *)v10 + 60);
      if (v19 <= v18)
      {
        v22[3] = 0;
        v34 = 0u;
        v35 = 0u;
        v32 = 0u;
        v33 = 0u;
        *(_OWORD *)buf = 0u;
        os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        v23 = 136315906;
        v24 = "operator[]";
        v25 = 1024;
        v26 = 789;
        v27 = 2048;
        v28 = v18;
        v29 = 2048;
        v30 = v19;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
      }
      re::FixedArray<unsigned char>::operator=((uint64_t *)(*((_QWORD *)v10 + 62) + 24 * v18), v22);
      v16 = 1;
    }
    else
    {
      v16 = 0;
    }
    re::StringID::destroyString((re::StringID *)v21);
    if (v22[0] && v22[1])
      (*(void (**)(void))(*(_QWORD *)v22[0] + 40))();
  }
  else
  {
    if (CoreRELog::onceToken != -1)
      dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
    v15 = (id)CoreRELog::log;
    if (os_log_type_enabled(v15, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      _os_log_error_impl(&dword_224FE9000, v15, OS_LOG_TYPE_ERROR, "RETimelineDefinitionEventTimelineSetParameterData - Wrong timeline type. Expected an event timeline.", buf, 2u);
    }

    return 0;
  }
  return v16;
}

uint64_t RETimelineDefinitionEventTimelineSetAndRetainSwiftParameter(_anonymous_namespace_::TimelineDefinition *a1, char *a2, uint64_t a3, void *a4)
{
  _anonymous_namespace_ *v7;
  _anonymous_namespace_ *v8;
  uint64_t v9;
  char v10;
  unsigned __int8 *v11;
  int v12;
  NSObject *v13;
  uint64_t v14;
  id v15;
  _QWORD *v16;
  unint64_t v17;
  unint64_t v18;
  id v20;
  _QWORD v21[3];
  int v22;
  const char *v23;
  __int16 v24;
  int v25;
  __int16 v26;
  unint64_t v27;
  __int16 v28;
  unint64_t v29;
  uint8_t buf[16];
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  uint64_t v35;

  v35 = *MEMORY[0x24BDAC8D0];
  if (*((_DWORD *)v7 + 2) == 48)
  {
    v8 = v7;
    if (a2)
    {
      v9 = *a2;
      if (*a2)
      {
        v10 = a2[1];
        if (v10)
        {
          v11 = (unsigned __int8 *)(a2 + 2);
          do
          {
            v9 = 31 * v9 + v10;
            v12 = *v11++;
            v10 = v12;
          }
          while (v12);
        }
      }
    }
    else
    {
      v9 = 0;
    }
    v21[0] = 2 * v9;
    v21[1] = a2;
    v15 = a4;
    v20 = v15;
    v16 = (_QWORD *)re::HashTable<re::StringID,re::TimelineEventParameterDescription,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::tryGet((uint64_t)v8 + 216, v21);
    if (v16 && v16[1] == 6)
    {
      v17 = *v16 + *((_QWORD *)v8 + 63) * a3;
      v18 = *((_QWORD *)v8 + 66);
      if (v18 <= v17)
      {
        v21[2] = 0;
        v33 = 0u;
        v34 = 0u;
        v31 = 0u;
        v32 = 0u;
        *(_OWORD *)buf = 0u;
        os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        v22 = 136315906;
        v23 = "operator[]";
        v24 = 1024;
        v25 = 789;
        v26 = 2048;
        v27 = v17;
        v28 = 2048;
        v29 = v18;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
      }
      re::ObjCObject::operator=((id *)(*((_QWORD *)v8 + 68) + 8 * v17), &v20);
      v14 = 1;
      v15 = v20;
    }
    else
    {
      v14 = 0;
    }

    re::StringID::destroyString((re::StringID *)v21);
  }
  else
  {
    if (CoreRELog::onceToken != -1)
      dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
    v13 = (id)CoreRELog::log;
    if (os_log_type_enabled(v13, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      _os_log_error_impl(&dword_224FE9000, v13, OS_LOG_TYPE_ERROR, "RETimelineDefinitionEventTimelineSetParameterData - Wrong timeline type. Expected an event timeline.", buf, 2u);
    }

    return 0;
  }
  return v14;
}

uint64_t RETimelineDefinitionEventTimelineSetParameterInt(_anonymous_namespace_::TimelineDefinition *a1, char *a2, uint64_t a3, int a4)
{
  _anonymous_namespace_ *v7;
  _anonymous_namespace_ *v8;
  uint64_t v9;
  char v10;
  unsigned __int8 *v11;
  int v12;
  NSObject *v13;
  uint64_t v14;
  _QWORD *v15;
  unint64_t v16;
  unint64_t v17;
  _QWORD v19[3];
  int v20;
  const char *v21;
  __int16 v22;
  int v23;
  __int16 v24;
  unint64_t v25;
  __int16 v26;
  unint64_t v27;
  uint8_t buf[16];
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  uint64_t v33;

  v33 = *MEMORY[0x24BDAC8D0];
  if (*((_DWORD *)v7 + 2) == 48)
  {
    v8 = v7;
    if (a2)
    {
      v9 = *a2;
      if (*a2)
      {
        v10 = a2[1];
        if (v10)
        {
          v11 = (unsigned __int8 *)(a2 + 2);
          do
          {
            v9 = 31 * v9 + v10;
            v12 = *v11++;
            v10 = v12;
          }
          while (v12);
        }
      }
    }
    else
    {
      v9 = 0;
    }
    v19[0] = 2 * v9;
    v19[1] = a2;
    v15 = (_QWORD *)re::HashTable<re::StringID,re::TimelineEventParameterDescription,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::tryGet((uint64_t)v7 + 216, v19);
    if (v15 && v15[1] == 2)
    {
      v16 = *v15 + *((_QWORD *)v8 + 39) * a3;
      v17 = *((_QWORD *)v8 + 42);
      if (v17 <= v16)
      {
        v19[2] = 0;
        v31 = 0u;
        v32 = 0u;
        v29 = 0u;
        v30 = 0u;
        *(_OWORD *)buf = 0u;
        os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        v20 = 136315906;
        v21 = "operator[]";
        v22 = 1024;
        v23 = 789;
        v24 = 2048;
        v25 = v16;
        v26 = 2048;
        v27 = v17;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
      }
      *(_DWORD *)(*((_QWORD *)v8 + 44) + 4 * v16) = a4;
      v14 = 1;
    }
    else
    {
      v14 = 0;
    }
    re::StringID::destroyString((re::StringID *)v19);
  }
  else
  {
    if (CoreRELog::onceToken != -1)
      dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
    v13 = (id)CoreRELog::log;
    if (os_log_type_enabled(v13, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      _os_log_error_impl(&dword_224FE9000, v13, OS_LOG_TYPE_ERROR, "RETimelineDefinitionEventTimelineSetParameterInt - Wrong timeline type. Expected an event timeline.", buf, 2u);
    }

    return 0;
  }
  return v14;
}

uint64_t RETimelineDefinitionEventTimelineSetParameterFloat(_anonymous_namespace_::TimelineDefinition *a1, char *a2, uint64_t a3, float a4)
{
  _anonymous_namespace_ *v7;
  _anonymous_namespace_ *v8;
  uint64_t v9;
  char v10;
  unsigned __int8 *v11;
  int v12;
  NSObject *v13;
  uint64_t v14;
  _QWORD *v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v19;
  _QWORD v20[3];
  int v21;
  const char *v22;
  __int16 v23;
  int v24;
  __int16 v25;
  unint64_t v26;
  __int16 v27;
  unint64_t v28;
  uint8_t buf[16];
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  uint64_t v34;

  v34 = *MEMORY[0x24BDAC8D0];
  if (*((_DWORD *)v7 + 2) == 48)
  {
    v8 = v7;
    if (a2)
    {
      v9 = *a2;
      if (*a2)
      {
        v10 = a2[1];
        if (v10)
        {
          v11 = (unsigned __int8 *)(a2 + 2);
          do
          {
            v9 = 31 * v9 + v10;
            v12 = *v11++;
            v10 = v12;
          }
          while (v12);
        }
      }
    }
    else
    {
      v9 = 0;
    }
    v20[0] = 2 * v9;
    v20[1] = a2;
    v15 = (_QWORD *)re::HashTable<re::StringID,re::TimelineEventParameterDescription,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::tryGet((uint64_t)v7 + 216, v20);
    if (v15 && v15[1] == 1)
    {
      v16 = *v15 + *((_QWORD *)v8 + 33) * a3;
      v17 = *((_QWORD *)v8 + 36);
      if (v17 <= v16)
      {
        v20[2] = 0;
        v32 = 0u;
        v33 = 0u;
        v30 = 0u;
        v31 = 0u;
        *(_OWORD *)buf = 0u;
        v19 = v17;
        os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        v21 = 136315906;
        v22 = "operator[]";
        v23 = 1024;
        v24 = 789;
        v25 = 2048;
        v26 = v16;
        v27 = 2048;
        v28 = v19;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
      }
      *(float *)(*((_QWORD *)v8 + 38) + 4 * v16) = a4;
      v14 = 1;
    }
    else
    {
      v14 = 0;
    }
    re::StringID::destroyString((re::StringID *)v20);
  }
  else
  {
    if (CoreRELog::onceToken != -1)
      dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
    v13 = (id)CoreRELog::log;
    if (os_log_type_enabled(v13, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      _os_log_error_impl(&dword_224FE9000, v13, OS_LOG_TYPE_ERROR, "RETimelineDefinitionEventTimelineSetParameterFloat - Wrong timeline type. Expected an event timeline.", buf, 2u);
    }

    return 0;
  }
  return v14;
}

uint64_t RETimelineDefinitionEventTimelineSetParameterString(_anonymous_namespace_::TimelineDefinition *a1, char *a2, uint64_t a3, const char *a4)
{
  _anonymous_namespace_ *v7;
  _anonymous_namespace_ *v8;
  uint64_t v9;
  char v10;
  unsigned __int8 *v11;
  int v12;
  NSObject *v13;
  uint64_t v14;
  _QWORD *v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v19[2];
  _QWORD v20[3];
  int v21;
  const char *v22;
  __int16 v23;
  int v24;
  __int16 v25;
  unint64_t v26;
  __int16 v27;
  unint64_t v28;
  uint8_t buf[16];
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  uint64_t v34;

  v34 = *MEMORY[0x24BDAC8D0];
  if (*((_DWORD *)v7 + 2) == 48)
  {
    v8 = v7;
    if (a2)
    {
      v9 = *a2;
      if (*a2)
      {
        v10 = a2[1];
        if (v10)
        {
          v11 = (unsigned __int8 *)(a2 + 2);
          do
          {
            v9 = 31 * v9 + v10;
            v12 = *v11++;
            v10 = v12;
          }
          while (v12);
        }
      }
    }
    else
    {
      v9 = 0;
    }
    v20[0] = 2 * v9;
    v20[1] = a2;
    v19[0] = 0;
    v19[1] = (uint64_t)&str_110;
    v15 = (_QWORD *)re::HashTable<re::StringID,re::TimelineEventParameterDescription,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::tryGet((uint64_t)v8 + 216, v20);
    if (v15 && v15[1] == 3)
    {
      v16 = *v15 + *((_QWORD *)v8 + 45) * a3;
      v17 = *((_QWORD *)v8 + 48);
      if (v17 <= v16)
      {
        v20[2] = 0;
        v32 = 0u;
        v33 = 0u;
        v30 = 0u;
        v31 = 0u;
        *(_OWORD *)buf = 0u;
        os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        v21 = 136315906;
        v22 = "operator[]";
        v23 = 1024;
        v24 = 789;
        v25 = 2048;
        v26 = v16;
        v27 = 2048;
        v28 = v17;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
      }
      re::StringID::operator=((unint64_t *)(*((_QWORD *)v8 + 50) + 16 * v16), v19);
      v14 = 1;
    }
    else
    {
      v14 = 0;
    }
    re::StringID::destroyString((re::StringID *)v19);
    re::StringID::destroyString((re::StringID *)v20);
  }
  else
  {
    if (CoreRELog::onceToken != -1)
      dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
    v13 = (id)CoreRELog::log;
    if (os_log_type_enabled(v13, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      _os_log_error_impl(&dword_224FE9000, v13, OS_LOG_TYPE_ERROR, "RETimelineDefinitionEventTimelineSetParameterString - Wrong timeline type. Expected an event timeline.", buf, 2u);
    }

    return 0;
  }
  return v14;
}

uint64_t RETimelineDefinitionEventTimelineSetParameterVector4(_anonymous_namespace_::TimelineDefinition *a1, char *a2, uint64_t a3, __n128 a4)
{
  _anonymous_namespace_ *v6;
  _anonymous_namespace_ *v7;
  uint64_t v8;
  char v9;
  unsigned __int8 *v10;
  int v11;
  NSObject *v12;
  uint64_t v13;
  _QWORD *v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v18;
  _QWORD v20[3];
  int v21;
  const char *v22;
  __int16 v23;
  int v24;
  __int16 v25;
  unint64_t v26;
  __int16 v27;
  unint64_t v28;
  uint8_t buf[16];
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  uint64_t v34;

  v34 = *MEMORY[0x24BDAC8D0];
  if (*((_DWORD *)v6 + 2) == 48)
  {
    v7 = v6;
    if (a2)
    {
      v8 = *a2;
      if (*a2)
      {
        v9 = a2[1];
        if (v9)
        {
          v10 = (unsigned __int8 *)(a2 + 2);
          do
          {
            v8 = 31 * v8 + v9;
            v11 = *v10++;
            v9 = v11;
          }
          while (v11);
        }
      }
    }
    else
    {
      v8 = 0;
    }
    v20[0] = 2 * v8;
    v20[1] = a2;
    v14 = (_QWORD *)re::HashTable<re::StringID,re::TimelineEventParameterDescription,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::tryGet((uint64_t)v6 + 216, v20);
    if (v14 && v14[1] == 4)
    {
      v15 = *v14 + *((_QWORD *)v7 + 51) * a3;
      v16 = *((_QWORD *)v7 + 54);
      if (v16 <= v15)
      {
        v20[2] = 0;
        v32 = 0u;
        v33 = 0u;
        v30 = 0u;
        v31 = 0u;
        *(_OWORD *)buf = 0u;
        v18 = v16;
        os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        v21 = 136315906;
        v22 = "operator[]";
        v23 = 1024;
        v24 = 789;
        v25 = 2048;
        v26 = v15;
        v27 = 2048;
        v28 = v18;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
      }
      *(__n128 *)(*((_QWORD *)v7 + 56) + 16 * v15) = a4;
      v13 = 1;
    }
    else
    {
      v13 = 0;
    }
    re::StringID::destroyString((re::StringID *)v20);
  }
  else
  {
    if (CoreRELog::onceToken != -1)
      dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
    v12 = (id)CoreRELog::log;
    if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      _os_log_error_impl(&dword_224FE9000, v12, OS_LOG_TYPE_ERROR, "RETimelineDefinitionEventTimelineSetParameterVector4 - Wrong timeline type. Expected an event timeline.", buf, 2u);
    }

    return 0;
  }
  return v13;
}

uint64_t RETimelineDefinitionEventTimelineGetEventCount(_anonymous_namespace_::TimelineDefinition *a1)
{
  _anonymous_namespace_ *v1;
  NSObject *v3;
  uint8_t v4[16];

  if (*((_DWORD *)v1 + 2) == 48)
    return *((_QWORD *)v1 + 24) + *((_QWORD *)v1 + 14);
  if (CoreRELog::onceToken != -1)
    dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
  v3 = (id)CoreRELog::log;
  if (os_log_type_enabled(v3, OS_LOG_TYPE_ERROR))
  {
    *(_WORD *)v4 = 0;
    _os_log_error_impl(&dword_224FE9000, v3, OS_LOG_TYPE_ERROR, "RETimelineDefinitionEventTimelineGetEventCount - Wrong timeline type. Expected an event timeline.", v4, 2u);
  }

  return 0x7FFFFFFFLL;
}

float RETimelineDefinitionEventTimelineGetEventStartTime(_anonymous_namespace_::TimelineDefinition *a1, unint64_t a2)
{
  _anonymous_namespace_ *v3;
  unint64_t v4;
  BOOL v5;
  unint64_t v6;
  _QWORD *v7;
  NSObject *v8;
  uint8_t v10[16];

  if (*((_DWORD *)v3 + 2) == 48)
  {
    v4 = *((_QWORD *)v3 + 14);
    v5 = a2 >= v4;
    v6 = a2 - v4;
    if (!v5)
    {
      v7 = (_QWORD *)((char *)v3 + 128);
      return *(float *)(*v7 + 4 * a2);
    }
    if (v6 < *((_QWORD *)v3 + 24))
    {
      v7 = (_QWORD *)((char *)v3 + 208);
      a2 = v6;
      return *(float *)(*v7 + 4 * a2);
    }
  }
  else
  {
    if (CoreRELog::onceToken != -1)
      dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
    v8 = (id)CoreRELog::log;
    if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)v10 = 0;
      _os_log_error_impl(&dword_224FE9000, v8, OS_LOG_TYPE_ERROR, "RETimelineDefinitionEventTimelineGetEventStartTime. - Wrong timeline type. Expected an event timeline.", v10, 2u);
    }

  }
  return NAN;
}

float RETimelineDefinitionEventTimelineGetEventDuration(_anonymous_namespace_::TimelineDefinition *a1, unint64_t a2)
{
  _anonymous_namespace_ *v3;
  unint64_t v4;
  BOOL v5;
  unint64_t v6;
  float result;
  NSObject *v8;
  uint8_t v9[16];

  if (*((_DWORD *)v3 + 2) == 48)
  {
    v4 = *((_QWORD *)v3 + 19);
    v5 = a2 >= v4;
    v6 = a2 - v4;
    if (v5)
    {
      result = NAN;
      if (v6 < *((_QWORD *)v3 + 24))
        return 0.0;
    }
    else
    {
      return *(float *)(*((_QWORD *)v3 + 21) + 4 * a2);
    }
  }
  else
  {
    if (CoreRELog::onceToken != -1)
      dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
    v8 = (id)CoreRELog::log;
    if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)v9 = 0;
      _os_log_error_impl(&dword_224FE9000, v8, OS_LOG_TYPE_ERROR, "RETimelineDefinitionEventTimelineGetEventDuration - Wrong timeline type. Expected an event timeline.", v9, 2u);
    }

    return NAN;
  }
  return result;
}

uint64_t RETimelineDefinitionEventTimelineGetParameterCount(_anonymous_namespace_::TimelineDefinition *a1)
{
  _anonymous_namespace_ *v1;
  NSObject *v3;
  uint8_t v4[16];

  if (*((_DWORD *)v1 + 2) == 48)
    return *((unsigned int *)v1 + 61);
  if (CoreRELog::onceToken != -1)
    dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
  v3 = (id)CoreRELog::log;
  if (os_log_type_enabled(v3, OS_LOG_TYPE_ERROR))
  {
    *(_WORD *)v4 = 0;
    _os_log_error_impl(&dword_224FE9000, v3, OS_LOG_TYPE_ERROR, "RETimelineDefinitionEventTimelineGetParameterCount - Wrong timeline type. Expected an event timeline.", v4, 2u);
  }

  return 0;
}

uint64_t RETimelineDefinitionEventTimelineGetParameterName(_anonymous_namespace_::TimelineDefinition *a1, unint64_t a2)
{
  _anonymous_namespace_ *v3;
  NSObject *v5;
  uint8_t v6[16];

  if (*((_DWORD *)v3 + 2) == 48)
    return re::TimelineEventData::parameterName((_anonymous_namespace_ *)((char *)v3 + 80), a2);
  if (CoreRELog::onceToken != -1)
    dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
  v5 = (id)CoreRELog::log;
  if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR))
  {
    *(_WORD *)v6 = 0;
    _os_log_error_impl(&dword_224FE9000, v5, OS_LOG_TYPE_ERROR, "RETimelineDefinitionEventTimelineGetParameterName - Wrong timeline type. Expected an event timeline.", v6, 2u);
  }

  return 0;
}

uint64_t RETimelineDefinitionEventTimelineGetParameterType(_anonymous_namespace_::TimelineDefinition *a1, char *a2)
{
  _anonymous_namespace_ *v3;
  uint64_t v4;
  char v5;
  unsigned __int8 *v6;
  int v7;
  NSObject *v8;
  unsigned __int8 v9;
  uint64_t v10;
  _QWORD v12[2];

  if (*((_DWORD *)v3 + 2) == 48)
  {
    if (a2)
    {
      v4 = *a2;
      if (*a2)
      {
        v5 = a2[1];
        if (v5)
        {
          v6 = (unsigned __int8 *)(a2 + 2);
          do
          {
            v4 = 31 * v4 + v5;
            v7 = *v6++;
            v5 = v7;
          }
          while (v7);
        }
      }
    }
    else
    {
      v4 = 0;
    }
    v12[0] = 2 * v4;
    v12[1] = a2;
    v10 = re::HashTable<re::StringID,re::TimelineEventParameterDescription,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::tryGet((uint64_t)v3 + 216, v12);
    if (v10)
      v9 = *(_BYTE *)(v10 + 8);
    else
      v9 = 0;
    re::StringID::destroyString((re::StringID *)v12);
  }
  else
  {
    if (CoreRELog::onceToken != -1)
      dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
    v8 = (id)CoreRELog::log;
    if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
    {
      LOWORD(v12[0]) = 0;
      _os_log_error_impl(&dword_224FE9000, v8, OS_LOG_TYPE_ERROR, "RETimelineDefinitionEventTimelineGetParameterType - Wrong timeline type. Expected an event timeline.", (uint8_t *)v12, 2u);
    }

    return 0;
  }
  return v9;
}

uint64_t RETimelineDefinitionEventTimelineGetEventParameterData(_anonymous_namespace_::TimelineDefinition *a1, char *a2, uint64_t a3)
{
  _anonymous_namespace_ *v5;
  uint64_t v6;
  uint64_t v7;
  char v8;
  unsigned __int8 *v9;
  int v10;
  NSObject *v11;
  uint64_t v12;
  uint8_t buf[16];
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  uint64_t v19;

  v19 = *MEMORY[0x24BDAC8D0];
  if (*((_DWORD *)v5 + 2) != 48)
  {
    if (CoreRELog::onceToken != -1)
      dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
    v11 = (id)CoreRELog::log;
    if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      _os_log_error_impl(&dword_224FE9000, v11, OS_LOG_TYPE_ERROR, "RETimelineDefinitionEventTimelineGetParameterData - Wrong timeline type. Expected an event timeline.", buf, 2u);
    }

    return 0;
  }
  v6 = (uint64_t)v5 + 80;
  if (a2)
  {
    v7 = *a2;
    if (*a2)
    {
      v8 = a2[1];
      if (v8)
      {
        v9 = (unsigned __int8 *)(a2 + 2);
        do
        {
          v7 = 31 * v7 + v8;
          v10 = *v9++;
          v8 = v10;
        }
        while (v10);
      }
    }
  }
  else
  {
    v7 = 0;
  }
  *(_QWORD *)buf = 2 * v7;
  *(_QWORD *)&buf[8] = a2;
  v12 = re::TimelineEventData::parameter<re::FixedArray<unsigned char>>(v6, a3, buf);
  re::StringID::destroyString((re::StringID *)buf);
  if (!v12)
    return 0;
  if (!*(_QWORD *)(v12 + 8))
  {
    v17 = 0u;
    v18 = 0u;
    v15 = 0u;
    v16 = 0u;
    *(_OWORD *)buf = 0u;
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  return *(_QWORD *)(v12 + 16);
}

uint64_t re::TimelineEventData::parameter<re::FixedArray<unsigned char>>(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  uint64_t *v5;

  v5 = (uint64_t *)re::HashTable<re::StringID,re::TimelineEventParameterDescription,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::tryGet(a1 + 136, a3);
  if (v5 && v5[1] == 5)
    return re::EventParameterArray<re::FixedArray<unsigned char>>::parameter((_QWORD *)(a1 + 376), a2, *v5);
  else
    return 0;
}

id RETimelineDefinitionEventTimelineGetEventSwiftParameter(_anonymous_namespace_::TimelineDefinition *a1, char *a2, uint64_t a3)
{
  _anonymous_namespace_ *v5;
  uint64_t v6;
  uint64_t v7;
  char v8;
  unsigned __int8 *v9;
  int v10;
  NSObject *v11;
  id *v12;
  _QWORD v14[2];

  if (*((_DWORD *)v5 + 2) == 48)
  {
    v6 = (uint64_t)v5 + 80;
    if (a2)
    {
      v7 = *a2;
      if (*a2)
      {
        v8 = a2[1];
        if (v8)
        {
          v9 = (unsigned __int8 *)(a2 + 2);
          do
          {
            v7 = 31 * v7 + v8;
            v10 = *v9++;
            v8 = v10;
          }
          while (v10);
        }
      }
    }
    else
    {
      v7 = 0;
    }
    v14[0] = 2 * v7;
    v14[1] = a2;
    v12 = (id *)re::TimelineEventData::parameter<re::ObjCObject>(v6, a3, v14);
    re::StringID::destroyString((re::StringID *)v14);
    if (v12 && *v12)
      return objc_retainAutorelease(*v12);
  }
  else
  {
    if (CoreRELog::onceToken != -1)
      dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
    v11 = (id)CoreRELog::log;
    if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR))
    {
      LOWORD(v14[0]) = 0;
      _os_log_error_impl(&dword_224FE9000, v11, OS_LOG_TYPE_ERROR, "RETimelineDefinitionEventTimelineGetParameterData - Wrong timeline type. Expected an event timeline.", (uint8_t *)v14, 2u);
    }

  }
  return 0;
}

uint64_t re::TimelineEventData::parameter<re::ObjCObject>(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  uint64_t *v5;

  v5 = (uint64_t *)re::HashTable<re::StringID,re::TimelineEventParameterDescription,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::tryGet(a1 + 136, a3);
  if (v5 && v5[1] == 6)
    return re::EventParameterArray<re::ObjCObject>::parameter((_QWORD *)(a1 + 424), a2, *v5);
  else
    return 0;
}

uint64_t RETimelineDefinitionEventTimelineGetEventParameterDataSize(_anonymous_namespace_::TimelineDefinition *a1, char *a2, uint64_t a3)
{
  _anonymous_namespace_ *v5;
  uint64_t v6;
  uint64_t v7;
  char v8;
  unsigned __int8 *v9;
  int v10;
  NSObject *v11;
  uint64_t v12;
  _QWORD v14[2];

  if (*((_DWORD *)v5 + 2) == 48)
  {
    v6 = (uint64_t)v5 + 80;
    if (a2)
    {
      v7 = *a2;
      if (*a2)
      {
        v8 = a2[1];
        if (v8)
        {
          v9 = (unsigned __int8 *)(a2 + 2);
          do
          {
            v7 = 31 * v7 + v8;
            v10 = *v9++;
            v8 = v10;
          }
          while (v10);
        }
      }
    }
    else
    {
      v7 = 0;
    }
    v14[0] = 2 * v7;
    v14[1] = a2;
    v12 = re::TimelineEventData::parameter<re::FixedArray<unsigned char>>(v6, a3, v14);
    re::StringID::destroyString((re::StringID *)v14);
    if (v12)
      return *(_QWORD *)(v12 + 8);
  }
  else
  {
    if (CoreRELog::onceToken != -1)
      dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
    v11 = (id)CoreRELog::log;
    if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR))
    {
      LOWORD(v14[0]) = 0;
      _os_log_error_impl(&dword_224FE9000, v11, OS_LOG_TYPE_ERROR, "RETimelineDefinitionEventTimelineGetParameterData - Wrong timeline type. Expected an event timeline.", (uint8_t *)v14, 2u);
    }

  }
  return 0;
}

uint64_t RETimelineDefinitionEventTimelineGetParameterInt(_anonymous_namespace_::TimelineDefinition *a1, char *a2, uint64_t a3)
{
  _anonymous_namespace_ *v5;
  uint64_t v6;
  uint64_t v7;
  char v8;
  unsigned __int8 *v9;
  int v10;
  NSObject *v11;
  uint64_t v12;
  _QWORD v14[2];

  if (*((_DWORD *)v5 + 2) == 48)
  {
    v6 = (uint64_t)v5 + 80;
    if (a2)
    {
      v7 = *a2;
      if (*a2)
      {
        v8 = a2[1];
        if (v8)
        {
          v9 = (unsigned __int8 *)(a2 + 2);
          do
          {
            v7 = 31 * v7 + v8;
            v10 = *v9++;
            v8 = v10;
          }
          while (v10);
        }
      }
    }
    else
    {
      v7 = 0;
    }
    v14[0] = 2 * v7;
    v14[1] = a2;
    v12 = re::TimelineEventData::parameter<int>(v6, a3, v14);
    re::StringID::destroyString((re::StringID *)v14);
  }
  else
  {
    if (CoreRELog::onceToken != -1)
      dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
    v11 = (id)CoreRELog::log;
    if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR))
    {
      LOWORD(v14[0]) = 0;
      _os_log_error_impl(&dword_224FE9000, v11, OS_LOG_TYPE_ERROR, "RETimelineDefinitionEventTimelineGetParameterInt - Wrong timeline type. Expected an event timeline.", (uint8_t *)v14, 2u);
    }

    return 0;
  }
  return v12;
}

uint64_t re::TimelineEventData::parameter<int>(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  uint64_t *v5;

  v5 = (uint64_t *)re::HashTable<re::StringID,re::TimelineEventParameterDescription,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::tryGet(a1 + 136, a3);
  if (v5 && v5[1] == 2)
    return re::EventParameterArray<int>::parameter((_QWORD *)(a1 + 232), a2, *v5);
  else
    return 0;
}

uint64_t RETimelineDefinitionEventTimelineGetParameterFloat(_anonymous_namespace_::TimelineDefinition *a1, char *a2, uint64_t a3)
{
  _anonymous_namespace_ *v5;
  uint64_t v6;
  uint64_t v7;
  char v8;
  unsigned __int8 *v9;
  int v10;
  NSObject *v11;
  uint64_t v12;
  _QWORD v14[2];

  if (*((_DWORD *)v5 + 2) == 48)
  {
    v6 = (uint64_t)v5 + 80;
    if (a2)
    {
      v7 = *a2;
      if (*a2)
      {
        v8 = a2[1];
        if (v8)
        {
          v9 = (unsigned __int8 *)(a2 + 2);
          do
          {
            v7 = 31 * v7 + v8;
            v10 = *v9++;
            v8 = v10;
          }
          while (v10);
        }
      }
    }
    else
    {
      v7 = 0;
    }
    v14[0] = 2 * v7;
    v14[1] = a2;
    v12 = re::TimelineEventData::parameter<float>(v6, a3, v14);
    re::StringID::destroyString((re::StringID *)v14);
  }
  else
  {
    if (CoreRELog::onceToken != -1)
      dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
    v11 = (id)CoreRELog::log;
    if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR))
    {
      LOWORD(v14[0]) = 0;
      _os_log_error_impl(&dword_224FE9000, v11, OS_LOG_TYPE_ERROR, "RETimelineDefinitionEventTimelineGetParameterFloat - Wrong timeline type. Expected an event timeline.", (uint8_t *)v14, 2u);
    }

    return 0;
  }
  return v12;
}

uint64_t re::TimelineEventData::parameter<float>(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  uint64_t *v5;

  v5 = (uint64_t *)re::HashTable<re::StringID,re::TimelineEventParameterDescription,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::tryGet(a1 + 136, a3);
  if (v5 && v5[1] == 1)
    return re::EventParameterArray<int>::parameter((_QWORD *)(a1 + 184), a2, *v5);
  else
    return 0;
}

const char *RETimelineDefinitionEventTimelineGetParameterString(_anonymous_namespace_::TimelineDefinition *a1, char *a2, uint64_t a3)
{
  _anonymous_namespace_ *v5;
  uint64_t v6;
  uint64_t v7;
  char v8;
  unsigned __int8 *v9;
  int v10;
  NSObject *v11;
  uint64_t v13;
  _QWORD v14[2];

  if (*((_DWORD *)v5 + 2) == 48)
  {
    v6 = (uint64_t)v5 + 80;
    if (a2)
    {
      v7 = *a2;
      if (*a2)
      {
        v8 = a2[1];
        if (v8)
        {
          v9 = (unsigned __int8 *)(a2 + 2);
          do
          {
            v7 = 31 * v7 + v8;
            v10 = *v9++;
            v8 = v10;
          }
          while (v10);
        }
      }
    }
    else
    {
      v7 = 0;
    }
    v14[0] = 2 * v7;
    v14[1] = a2;
    v13 = re::TimelineEventData::parameter<re::StringID>(v6, a3, v14);
    re::StringID::destroyString((re::StringID *)v14);
    if (v13)
      return *(const char **)(v13 + 8);
    else
      return "";
  }
  else
  {
    if (CoreRELog::onceToken != -1)
      dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
    v11 = (id)CoreRELog::log;
    if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR))
    {
      LOWORD(v14[0]) = 0;
      _os_log_error_impl(&dword_224FE9000, v11, OS_LOG_TYPE_ERROR, "RETimelineDefinitionEventTimelineGetParameterString - Wrong timeline type. Expected an event timeline.", (uint8_t *)v14, 2u);
    }

    return 0;
  }
}

uint64_t RETimelineDefinitionEventTimelineGetParameterVector4(_anonymous_namespace_::TimelineDefinition *a1, char *a2, uint64_t a3)
{
  _anonymous_namespace_ *v5;
  uint64_t v6;
  uint64_t v7;
  char v8;
  unsigned __int8 *v9;
  int v10;
  NSObject *v11;
  uint64_t v12;
  _QWORD v14[2];

  if (*((_DWORD *)v5 + 2) == 48)
  {
    v6 = (uint64_t)v5 + 80;
    if (a2)
    {
      v7 = *a2;
      if (*a2)
      {
        v8 = a2[1];
        if (v8)
        {
          v9 = (unsigned __int8 *)(a2 + 2);
          do
          {
            v7 = 31 * v7 + v8;
            v10 = *v9++;
            v8 = v10;
          }
          while (v10);
        }
      }
    }
    else
    {
      v7 = 0;
    }
    v14[0] = 2 * v7;
    v14[1] = a2;
    v12 = re::TimelineEventData::parameter<re::Vector4<float>>(v6, a3, v14);
    re::StringID::destroyString((re::StringID *)v14);
  }
  else
  {
    if (CoreRELog::onceToken != -1)
      dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
    v11 = (id)CoreRELog::log;
    if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR))
    {
      LOWORD(v14[0]) = 0;
      _os_log_error_impl(&dword_224FE9000, v11, OS_LOG_TYPE_ERROR, "RETimelineDefinitionEventTimelineGetParameterVector4 - Wrong timeline type. Expected an event timeline.", (uint8_t *)v14, 2u);
    }

    return 0;
  }
  return v12;
}

uint64_t re::TimelineEventData::parameter<re::Vector4<float>>(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  uint64_t *v5;

  v5 = (uint64_t *)re::HashTable<re::StringID,re::TimelineEventParameterDescription,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::tryGet(a1 + 136, a3);
  if (v5 && v5[1] == 4)
    return re::EventParameterArray<re::StringID>::parameter((_QWORD *)(a1 + 328), a2, *v5);
  else
    return 0;
}

_anonymous_namespace_::TimelineDefinition *RETimelineDefinitionCreateAudioAnimation(re *a1)
{
  uint64_t *v2;
  uint64_t v3;
  re *v4;
  uint64_t *v5;
  _anonymous_namespace_::TimelineDefinition *v6;
  _QWORD *v7;
  uint64_t v8;
  _QWORD v10[3];
  _QWORD *v11;
  uint64_t v12;
  _QWORD v13[5];

  v13[4] = *MEMORY[0x24BDAC8D0];
  v2 = re::globalAllocators(a1);
  v3 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v2[2] + 32))(v2[2], 96, 8);
  *(_QWORD *)v3 = off_24ED36578;
  *(_QWORD *)(v3 + 8) = 38;
  *(_BYTE *)(v3 + 16) = 0;
  *(_QWORD *)(v3 + 24) = 0;
  *(_QWORD *)(v3 + 32) = &str_110;
  *(_BYTE *)(v3 + 72) = 0;
  *(_QWORD *)v3 = off_24ED33C60;
  *(_QWORD *)(v3 + 80) = 0;
  *(_QWORD *)(v3 + 88) = 0;
  v10[0] = &off_24ED9AC98;
  v11 = v10;
  v12 = v3;
  v13[3] = v13;
  v13[0] = &off_24ED9AC98;
  v5 = re::globalAllocators(v4);
  v6 = (_anonymous_namespace_::TimelineDefinition *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v5[2] + 32))(v5[2], 112, 8);
  std::unique_ptr<re::RigHierarchy,std::function<void ()(re::RigHierarchy*)>>::~unique_ptr[abi:nn180100](&v12);
  v7 = v11;
  if (v11 == v10)
  {
    v8 = 4;
    v7 = v10;
    goto LABEL_5;
  }
  if (v11)
  {
    v8 = 5;
LABEL_5:
    (*(void (**)(void))(*v7 + 8 * v8))();
  }
  return v6;
}

uint64_t RETimelineDefinitionGetEasingFunction(uint64_t a1)
{
  uint64_t v1;
  int v2;
  uint64_t result;
  NSObject *v4;
  uint8_t v5[16];

  v1 = *(_QWORD *)(a1 + 48);
  if (!v1)
    v1 = *(_QWORD *)(re::AssetHandle::asset<re::TimelineAsset>((re::TimelineAsset *)(a1 + 24)) + 8);
  v2 = *(_DWORD *)(v1 + 8);
  switch(v2)
  {
    case 11:
      result = *(_QWORD *)(v1 + 112);
      break;
    case 12:
    case 13:
      result = *(_QWORD *)(v1 + 136);
      break;
    case 14:
    case 15:
    case 16:
      result = *(_QWORD *)(v1 + 192);
      break;
    case 17:
      result = *(_QWORD *)(v1 + 288);
      break;
    case 18:
      goto LABEL_6;
    default:
      if (v2 == 50)
      {
LABEL_6:
        result = *(_QWORD *)(v1 + 184);
      }
      else
      {
        if (CoreRELog::onceToken != -1)
          dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
        v4 = (id)CoreRELog::log;
        if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
        {
          *(_WORD *)v5 = 0;
          _os_log_error_impl(&dword_224FE9000, v4, OS_LOG_TYPE_ERROR, "Cannot get easing function from non-from-to-by animation.", v5, 2u);
        }

        result = 0;
      }
      break;
  }
  return result;
}

_anonymous_namespace_ *RETimelineDefinitionCreateEasingFunctionEx(_QWORD *a1)
{
  uint64_t v1;
  int v2;
  _anonymous_namespace_ **v3;
  _anonymous_namespace_ *v4;
  re *v5;
  uint64_t *v6;
  NSObject *v8;
  re *v9;
  _QWORD v10[5];

  v10[4] = *MEMORY[0x24BDAC8D0];
  v1 = a1[6];
  if (!v1)
  {
    a1 = (_QWORD *)re::AssetHandle::asset<re::TimelineAsset>((re::TimelineAsset *)(a1 + 3));
    v1 = a1[1];
  }
  v2 = *(_DWORD *)(v1 + 8);
  switch(v2)
  {
    case 11:
      v3 = (_anonymous_namespace_ **)(v1 + 112);
      goto LABEL_10;
    case 12:
    case 13:
      v3 = (_anonymous_namespace_ **)(v1 + 136);
      goto LABEL_10;
    case 14:
    case 15:
    case 16:
      v3 = (_anonymous_namespace_ **)(v1 + 192);
      goto LABEL_10;
    case 17:
      v3 = (_anonymous_namespace_ **)(v1 + 288);
      goto LABEL_10;
    case 18:
      goto LABEL_6;
    default:
      if (v2 == 50)
      {
LABEL_6:
        v3 = (_anonymous_namespace_ **)(v1 + 184);
LABEL_10:
        v4 = *v3;
        if (*v3)
        {
          v10[3] = v10;
          v9 = v5;
          v10[0] = &off_24ED9AD18;
          v6 = re::globalAllocators(v5);
          v4 = (_anonymous_namespace_ *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v6[2] + 32))(v6[2], 64, 8);
          re::Shareable<std::unique_ptr<re::EasingFunction,std::function<void ()(re::EasingFunction*)>>>::Shareable<std::unique_ptr<re::EasingFunction,std::function<void ()(re::EasingFunction*)>>>(v4, (uint64_t *)&v9);
          std::unique_ptr<re::RigHierarchy,std::function<void ()(re::RigHierarchy*)>>::~unique_ptr[abi:nn180100]((uint64_t *)&v9);
        }
      }
      else
      {
        if (CoreRELog::onceToken != -1)
          dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
        v8 = (id)CoreRELog::log;
        if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
        {
          LOWORD(v9) = 0;
          _os_log_error_impl(&dword_224FE9000, v8, OS_LOG_TYPE_ERROR, "Cannot get easing function from non-from-to-by animation.", (uint8_t *)&v9, 2u);
        }

        return 0;
      }
      return v4;
  }
}

uint64_t RETimelineDefinitionSetEasingFunction(_QWORD *a1, uint64_t a2)
{
  uint64_t v4;
  int v5;
  _anonymous_namespace_ *v6;
  _anonymous_namespace_ *v7;
  void (***v8)(_QWORD);
  uint64_t v9;
  _anonymous_namespace_ *v10;
  _anonymous_namespace_ *v11;
  void (***v12)(_QWORD);
  uint64_t v13;
  _anonymous_namespace_ *v14;
  _anonymous_namespace_ *v15;
  void (***v16)(_QWORD);
  uint64_t v17;
  _anonymous_namespace_ *v18;
  _anonymous_namespace_ *v19;
  void (***v20)(_QWORD);
  uint64_t v21;
  _anonymous_namespace_ *v22;
  _anonymous_namespace_ *v23;
  void (***v24)(_QWORD);
  uint64_t v25;
  NSObject *v27;
  uint8_t v28[16];

  v4 = a1[6];
  if (!v4)
    v4 = *(_QWORD *)(re::AssetHandle::asset<re::TimelineAsset>((re::TimelineAsset *)(a1 + 3)) + 8);
  v5 = *(_DWORD *)(v4 + 8);
  switch(v5)
  {
    case 11:
      v19 = v18;
      v20 = (void (***)(_QWORD))*((_QWORD *)v18 + 14);
      if (v20)
      {
        v21 = re::globalAllocators(v18)[2];
        (**v20)(v20);
        v18 = (_anonymous_namespace_ *)(*(uint64_t (**)(uint64_t, void (***)(_QWORD)))(*(_QWORD *)v21 + 40))(v21, v20);
      }
      *((_QWORD *)v19 + 14) = 0;
      if (a2)
      {
      }
      return 1;
    case 12:
    case 13:
      v15 = v14;
      v16 = (void (***)(_QWORD))*((_QWORD *)v14 + 17);
      if (v16)
      {
        v17 = re::globalAllocators(v14)[2];
        (**v16)(v16);
        v14 = (_anonymous_namespace_ *)(*(uint64_t (**)(uint64_t, void (***)(_QWORD)))(*(_QWORD *)v17 + 40))(v17, v16);
      }
      *((_QWORD *)v15 + 17) = 0;
      if (a2)
      {
      }
      return 1;
    case 14:
    case 15:
    case 16:
      v7 = v6;
      v8 = (void (***)(_QWORD))*((_QWORD *)v6 + 24);
      if (v8)
      {
        v9 = re::globalAllocators(v6)[2];
        (**v8)(v8);
        v6 = (_anonymous_namespace_ *)(*(uint64_t (**)(uint64_t, void (***)(_QWORD)))(*(_QWORD *)v9 + 40))(v9, v8);
      }
      *((_QWORD *)v7 + 24) = 0;
      if (a2)
      {
      }
      return 1;
    case 17:
      v23 = v22;
      v24 = (void (***)(_QWORD))*((_QWORD *)v22 + 36);
      if (v24)
      {
        v25 = re::globalAllocators(v22)[2];
        (**v24)(v24);
        v22 = (_anonymous_namespace_ *)(*(uint64_t (**)(uint64_t, void (***)(_QWORD)))(*(_QWORD *)v25 + 40))(v25, v24);
      }
      *((_QWORD *)v23 + 36) = 0;
      if (a2)
      {
      }
      return 1;
    case 18:
      goto LABEL_9;
    default:
      if (v5 == 50)
      {
LABEL_9:
        v11 = v10;
        v12 = (void (***)(_QWORD))*((_QWORD *)v10 + 23);
        if (v12)
        {
          v13 = re::globalAllocators(v10)[2];
          (**v12)(v12);
          v10 = (_anonymous_namespace_ *)(*(uint64_t (**)(uint64_t, void (***)(_QWORD)))(*(_QWORD *)v13 + 40))(v13, v12);
        }
        *((_QWORD *)v11 + 23) = 0;
        if (a2)
        {
        }
        return 1;
      }
      else
      {
        if (CoreRELog::onceToken != -1)
          dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
        v27 = (id)CoreRELog::log;
        if (os_log_type_enabled(v27, OS_LOG_TYPE_ERROR))
        {
          *(_WORD *)v28 = 0;
          _os_log_error_impl(&dword_224FE9000, v27, OS_LOG_TYPE_ERROR, "Cannot set easing function for non-from-to-by animation.", v28, 2u);
        }

        return 0;
      }
  }
}

uint64_t RETimelineDefinitionSetEasingFunctionEx(_QWORD *a1, uint64_t a2)
{
  uint64_t v4;
  int v5;
  _anonymous_namespace_ *v6;
  _anonymous_namespace_ *v7;
  void (***v8)(_QWORD);
  uint64_t v9;
  uint64_t v10;
  _anonymous_namespace_ *v11;
  _anonymous_namespace_ *v12;
  void (***v13)(_QWORD);
  uint64_t v14;
  uint64_t v15;
  _anonymous_namespace_ *v16;
  _anonymous_namespace_ *v17;
  void (***v18)(_QWORD);
  uint64_t v19;
  uint64_t v20;
  _anonymous_namespace_ *v21;
  _anonymous_namespace_ *v22;
  void (***v23)(_QWORD);
  uint64_t v24;
  uint64_t v25;
  _anonymous_namespace_ *v26;
  _anonymous_namespace_ *v27;
  void (***v28)(_QWORD);
  uint64_t v29;
  uint64_t v30;
  NSObject *v32;
  uint8_t v33[16];

  v4 = a1[6];
  if (!v4)
    v4 = *(_QWORD *)(re::AssetHandle::asset<re::TimelineAsset>((re::TimelineAsset *)(a1 + 3)) + 8);
  v5 = *(_DWORD *)(v4 + 8);
  switch(v5)
  {
    case 11:
      v22 = v21;
      v23 = (void (***)(_QWORD))*((_QWORD *)v21 + 14);
      if (v23)
      {
        v24 = re::globalAllocators(v21)[2];
        (**v23)(v23);
        (*(void (**)(uint64_t, void (***)(_QWORD)))(*(_QWORD *)v24 + 40))(v24, v23);
      }
      *((_QWORD *)v22 + 14) = 0;
      v25 = *(_QWORD *)(a2 + 24);
      if (v25)
      return 1;
    case 12:
    case 13:
      v17 = v16;
      v18 = (void (***)(_QWORD))*((_QWORD *)v16 + 17);
      if (v18)
      {
        v19 = re::globalAllocators(v16)[2];
        (**v18)(v18);
        (*(void (**)(uint64_t, void (***)(_QWORD)))(*(_QWORD *)v19 + 40))(v19, v18);
      }
      *((_QWORD *)v17 + 17) = 0;
      v20 = *(_QWORD *)(a2 + 24);
      if (v20)
      return 1;
    case 14:
    case 15:
    case 16:
      v7 = v6;
      v8 = (void (***)(_QWORD))*((_QWORD *)v6 + 24);
      if (v8)
      {
        v9 = re::globalAllocators(v6)[2];
        (**v8)(v8);
        (*(void (**)(uint64_t, void (***)(_QWORD)))(*(_QWORD *)v9 + 40))(v9, v8);
      }
      *((_QWORD *)v7 + 24) = 0;
      v10 = *(_QWORD *)(a2 + 24);
      if (v10)
      return 1;
    case 17:
      v27 = v26;
      v28 = (void (***)(_QWORD))*((_QWORD *)v26 + 36);
      if (v28)
      {
        v29 = re::globalAllocators(v26)[2];
        (**v28)(v28);
        (*(void (**)(uint64_t, void (***)(_QWORD)))(*(_QWORD *)v29 + 40))(v29, v28);
      }
      *((_QWORD *)v27 + 36) = 0;
      v30 = *(_QWORD *)(a2 + 24);
      if (v30)
      return 1;
    case 18:
      goto LABEL_9;
    default:
      if (v5 == 50)
      {
LABEL_9:
        v12 = v11;
        v13 = (void (***)(_QWORD))*((_QWORD *)v11 + 23);
        if (v13)
        {
          v14 = re::globalAllocators(v11)[2];
          (**v13)(v13);
          (*(void (**)(uint64_t, void (***)(_QWORD)))(*(_QWORD *)v14 + 40))(v14, v13);
        }
        *((_QWORD *)v12 + 23) = 0;
        v15 = *(_QWORD *)(a2 + 24);
        if (v15)
        return 1;
      }
      else
      {
        if (CoreRELog::onceToken != -1)
          dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
        v32 = (id)CoreRELog::log;
        if (os_log_type_enabled(v32, OS_LOG_TYPE_ERROR))
        {
          *(_WORD *)v33 = 0;
          _os_log_error_impl(&dword_224FE9000, v32, OS_LOG_TYPE_ERROR, "Cannot set easing function for non-from-to-by animation.", v33, 2u);
        }

        return 0;
      }
  }
}

void std::__function::__func<`anonymous namespace'::TimelineDefinition::timelineAssetData(void)::{lambda(re::TimelineAssetData *)#1},std::allocator<`anonymous namespace'::TimelineDefinition::timelineAssetData(void)::{lambda(re::TimelineAssetData *)#1}>,void ()(re::TimelineAssetData *)>::~__func()
{
  JUMPOUT(0x2276933B8);
}

_QWORD *std::__function::__func<`anonymous namespace'::TimelineDefinition::timelineAssetData(void)::{lambda(re::TimelineAssetData *)#1},std::allocator<`anonymous namespace'::TimelineDefinition::timelineAssetData(void)::{lambda(re::TimelineAssetData *)#1}>,void ()(re::TimelineAssetData *)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_24ED99600;
  return result;
}

void std::__function::__func<`anonymous namespace'::TimelineDefinition::timelineAssetData(void)::{lambda(re::TimelineAssetData *)#1},std::allocator<`anonymous namespace'::TimelineDefinition::timelineAssetData(void)::{lambda(re::TimelineAssetData *)#1}>,void ()(re::TimelineAssetData *)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_24ED99600;
}

void std::__function::__func<`anonymous namespace'::TimelineDefinition::timelineAssetData(void)::{lambda(re::TimelineAssetData *)#1},std::allocator<`anonymous namespace'::TimelineDefinition::timelineAssetData(void)::{lambda(re::TimelineAssetData *)#1}>,void ()(re::TimelineAssetData *)>::operator()(_anonymous_namespace_ *a1, void (****a2)(_QWORD))
{
  void (***v2)(_QWORD);

  v2 = *a2;
  if (v2)
  {
    (**v2)(v2);
  }
}

uint64_t std::__function::__func<`anonymous namespace'::TimelineDefinition::timelineAssetData(void)::{lambda(re::TimelineAssetData *)#1},std::allocator<`anonymous namespace'::TimelineDefinition::timelineAssetData(void)::{lambda(re::TimelineAssetData *)#1}>,void ()(re::TimelineAssetData *)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<`anonymous namespace'::TimelineDefinition::timelineAssetData(void)::{lambda(re::TimelineAssetData *)#1},std::allocator<`anonymous namespace'::TimelineDefinition::timelineAssetData(void)::{lambda(re::TimelineAssetData *)#1}>,void ()(re::TimelineAssetData *)>::target_type()
{
}

uint64_t `anonymous namespace'::makeAdditive<re::SkeletalPoseAssetData>(uint64_t a1, uint64_t a2)
{
  float v3;
  float v4;
  BOOL v5;
  uint64_t result;
  NSObject *v7;
  const char *v8;
  _QWORD v9[2];
  _QWORD v10[2];
  _QWORD v11[2];
  uint8_t buf[8];
  uint64_t v13;
  uint64_t v14;

  v14 = *MEMORY[0x24BDAC8D0];
  v3 = *(double *)(a1 + 80);
  v4 = *(double *)(a2 + 80);
  if (v3 != v4 && vabds_f32(v3, v4) >= (float)((float)((float)(fabsf(v3) + fabsf(v4)) + 1.0) * 0.00001))
  {
    if (CoreRELog::onceToken != -1)
      dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
    v7 = (id)CoreRELog::log;
    if (!os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
      goto LABEL_26;
    *(_WORD *)buf = 0;
    v8 = "Cannot make additive animation from differing from-to-by durations.";
    goto LABEL_25;
  }
  if (*(unsigned __int8 *)(a1 + 72) | *(unsigned __int8 *)(a2 + 72))
  {
    if (CoreRELog::onceToken != -1)
      dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
    v7 = (id)CoreRELog::log;
    if (!os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
      goto LABEL_26;
    *(_WORD *)buf = 0;
    v8 = "Cannot make additive animation from existing additive from-to-by animation.";
    goto LABEL_25;
  }
  if (*(_BYTE *)(a1 + 88))
    v5 = *(_BYTE *)(a2 + 88) == 0;
  else
    v5 = 1;
  if (!v5 && *(_BYTE *)(a1 + 120) && *(_BYTE *)(a2 + 120) && !*(_BYTE *)(a1 + 152) && !*(_BYTE *)(a2 + 152))
  {
    *(_QWORD *)buf = a1 + 88;
    v13 = a1 + 120;
    v11[0] = a2 + 96;
    v11[1] = a2 + 128;
    v10[0] = buf;
    v10[1] = 2;
    v9[0] = v11;
    v9[1] = 2;
    result = re::AnimationHelper::makeAdditiveForOptionalValueReferences<re::SkeletalPoseAssetData>((re *)v10, v9, (uint64_t)buf, (_QWORD *)2);
    *(_BYTE *)(a1 + 72) = result;
    return result;
  }
  if (CoreRELog::onceToken != -1)
    dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
  v7 = (id)CoreRELog::log;
  if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
  {
    *(_WORD *)buf = 0;
    v8 = "Currently only supports from-to animations.";
LABEL_25:
    _os_log_error_impl(&dword_224FE9000, v7, OS_LOG_TYPE_ERROR, v8, buf, 2u);
  }
LABEL_26:

  return 0;
}

uint64_t re::AnimationHelper::makeAdditiveForOptionalValueReferences<re::SkeletalPoseAssetData>(re *a1, _QWORD *a2, uint64_t a3, _QWORD *a4)
{
  _QWORD *v4;
  unsigned __int8 *v8;
  unint64_t v9;
  unint64_t v10;
  unsigned __int8 *v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unsigned __int8 *v15;
  unsigned __int8 *v16;
  uint64_t result;
  NSObject *v18;
  const char *v19;
  uint8_t buf[8];
  uint64_t v21;
  uint64_t v22;

  if (*((_QWORD **)a1 + 1) != a4)
  {
    v18 = *re::animationLogObjects(a1);
    result = os_log_type_enabled(v18, OS_LOG_TYPE_ERROR);
    if (!(_DWORD)result)
      return result;
    *(_WORD *)buf = 0;
    v19 = "Cannot make additive values, output values expected to match input values size.";
    goto LABEL_35;
  }
  v4 = a2;
  if (!a2[1])
  {
    v18 = *re::animationLogObjects(a1);
    result = os_log_type_enabled(v18, OS_LOG_TYPE_ERROR);
    if (!(_DWORD)result)
      return result;
    *(_WORD *)buf = 0;
    v19 = "Cannot make additive values, base values array size must not be zero.";
LABEL_35:
    _os_log_error_impl(&dword_224FE9000, v18, OS_LOG_TYPE_ERROR, v19, buf, 2u);
    return 0;
  }
  *(_QWORD *)buf = 0;
  v21 = 0;
  v22 = 0;
  re::AnimationValueTraits<re::SkeletalPoseAssetData>::init(buf, *(_QWORD *)*a2);
  v9 = 0;
  v10 = *((_QWORD *)a1 + 1);
  if (v10 && v4[1])
  {
    v9 = 0;
    while (a4 != (_QWORD *)v9)
    {
      v8 = *(unsigned __int8 **)(*(_QWORD *)a1 + 8 * v9);
      v11 = *(unsigned __int8 **)(a3 + 8 * v9);
      if ((*v8 != 0) != (*v11 != 0))
      {
        re::Optional<re::SkeletalPoseAssetData>::operator=(v11, v8);
        v10 = *((_QWORD *)a1 + 1);
      }
      if (v10 <= v9)
        goto LABEL_37;
      v12 = v4[1];
      if (**(_BYTE **)(*(_QWORD *)a1 + 8 * v9))
      {
        if (v12 <= v9)
          goto LABEL_40;
        re::AnimationValueTraits<re::SkeletalPoseAssetData>::invert(*(_QWORD *)(*v4 + 8 * v9), (uint64_t)buf);
        v14 = *((_QWORD *)a1 + 1);
        if (v14 <= v9)
          goto LABEL_41;
        re::AnimationValueTraits<re::SkeletalPoseAssetData>::combine(*(_QWORD *)(*(_QWORD *)a1 + 8 * v9) + 8, (uint64_t)buf, *(_QWORD *)(a3 + 8 * v9) + 8);
        v10 = *((_QWORD *)a1 + 1);
        v12 = v4[1];
      }
      if (v10 <= ++v9 || v12 <= v9)
      {
        v9 = v9;
        goto LABEL_17;
      }
    }
    re::internal::assertLog((re::internal *)6, (uint64_t)v8, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 658, a4, a4);
    _os_crash();
    __break(1u);
LABEL_37:
    re::internal::assertLog((re::internal *)6, (uint64_t)v8, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 251, v9, v10);
    _os_crash();
    __break(1u);
  }
  else
  {
LABEL_17:
    if (v10 <= v9)
    {
LABEL_26:
      if (*(_QWORD *)buf)
      {
        if (v21)
          (*(void (**)(void))(**(_QWORD **)buf + 40))();
      }
      return 1;
    }
    if ((unint64_t)a4 <= v9)
      v4 = (_QWORD *)v9;
    else
      v4 = a4;
    while (v4 != (_QWORD *)v9)
    {
      v15 = *(unsigned __int8 **)(*(_QWORD *)a1 + 8 * v9);
      v16 = *(unsigned __int8 **)(a3 + 8 * v9);
      if ((*v15 != 0) != (*v16 != 0))
      {
        re::Optional<re::SkeletalPoseAssetData>::operator=(v16, v15);
        v10 = *((_QWORD *)a1 + 1);
      }
      if (v10 <= v9)
        goto LABEL_39;
      re::AnimationValueTraits<re::SkeletalPoseAssetData>::combine(*(_QWORD *)(*(_QWORD *)a1 + 8 * v9) + 8, (uint64_t)buf, *(_QWORD *)(a3 + 8 * v9) + 8);
      ++v9;
      v10 = *((_QWORD *)a1 + 1);
      if (v10 <= v9)
        goto LABEL_26;
    }
  }
  re::internal::assertLog((re::internal *)6, (uint64_t)v8, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 658, v4, a4);
  _os_crash();
  __break(1u);
LABEL_39:
  re::internal::assertLog((re::internal *)6, (uint64_t)v15, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 251, v9, v10);
  _os_crash();
  __break(1u);
LABEL_40:
  re::internal::assertLog((re::internal *)6, (uint64_t)v8, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 251, v9, v12);
  _os_crash();
  __break(1u);
LABEL_41:
  re::internal::assertLog((re::internal *)6, v13, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 251, v9, v14);
  result = _os_crash();
  __break(1u);
  return result;
}

BOOL re::AnimationHelper::makeAdditiveForValues<re::BlendShapeWeightsAssetData>(re *a1, _QWORD *a2, uint64_t a3, _QWORD *a4)
{
  _QWORD *v4;
  _QWORD *v5;
  unint64_t v8;
  unint64_t v9;
  _BOOL4 v10;
  NSObject *v11;
  _BOOL8 result;
  const char *v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  int v26;
  const char *v27;
  __int16 v28;
  int v29;
  __int16 v30;
  uint64_t v31;
  __int16 v32;
  uint64_t v33;
  uint8_t buf[16];
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  uint64_t v39;

  v39 = *MEMORY[0x24BDAC8D0];
  if (*((_QWORD **)a1 + 1) != a4)
  {
    v11 = *re::animationLogObjects(a1);
    result = os_log_type_enabled(v11, OS_LOG_TYPE_ERROR);
    if (!result)
      return result;
    *(_WORD *)buf = 0;
    v13 = "Cannot make additive values, output values expected to match input values size.";
    goto LABEL_9;
  }
  v4 = a2;
  if (!a2[1])
  {
    v11 = *re::animationLogObjects(a1);
    result = os_log_type_enabled(v11, OS_LOG_TYPE_ERROR);
    if (!result)
      return result;
    *(_WORD *)buf = 0;
    v13 = "Cannot make additive values, base values array size must not be zero.";
LABEL_9:
    _os_log_error_impl(&dword_224FE9000, v11, OS_LOG_TYPE_ERROR, v13, buf, 2u);
    return 0;
  }
  v5 = a4;
  v23 = 0;
  v24 = 0;
  v22 = 0;
  v8 = *(_QWORD *)(*a2 + 8);
  if (v8)
  {
    v9 = *((_QWORD *)a1 + 1);
    v10 = v4[1] != 0;
  }
  else
  {
    v10 = 1;
    v9 = (unint64_t)a4;
  }
  v14 = 0;
  if (v9 && v10)
  {
    v14 = 0;
    while (1)
    {
      v15 = *v4 + 24 * v14;
      v16 = *(_QWORD *)(v15 + 8);
      if (v16)
        break;
LABEL_18:
      if (v9 <= v14)
        goto LABEL_37;
      if ((_QWORD *)v14 == v5)
        goto LABEL_38;
      re::AnimationValueTraits<re::BlendShapeWeightsAssetData>::combine(*(_QWORD *)(*(_QWORD *)a1 + 24 * v14 + 8), *(_QWORD *)(*(_QWORD *)a1 + 24 * v14 + 16), v23, v24, *(_QWORD *)(a3 + 24 * v14 + 8), *(_QWORD *)(a3 + 24 * v14 + 16));
      ++v14;
      v9 = *((_QWORD *)a1 + 1);
      if (v9 <= v14 || v4[1] <= v14)
      {
        v14 = v14;
        goto LABEL_23;
      }
    }
    v17 = 0;
    v18 = *(_QWORD *)(v15 + 16);
    v20 = v23;
    v19 = v24;
    while (v20 != v17)
    {
      *(float *)(v19 + 4 * v17) = -*(float *)(v18 + 4 * v17);
      if (v16 == ++v17)
        goto LABEL_18;
    }
    v25 = 0;
    v37 = 0u;
    v38 = 0u;
    v35 = 0u;
    v36 = 0u;
    *(_OWORD *)buf = 0u;
    v5 = (_QWORD *)MEMORY[0x24BDACB70];
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    v26 = 136315906;
    v27 = "operator[]";
    v28 = 1024;
    v29 = 468;
    v30 = 2048;
    v31 = v20;
    v32 = 2048;
    v33 = v20;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_36:
    re::internal::assertLog((re::internal *)6, (uint64_t)a2, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 658, v4, v5);
    _os_crash();
    __break(1u);
LABEL_37:
    re::internal::assertLog((re::internal *)6, (uint64_t)a2, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 251, v14, v9);
    _os_crash();
    __break(1u);
LABEL_38:
    re::internal::assertLog((re::internal *)6, (uint64_t)a2, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 658, v5, v5);
    _os_crash();
    __break(1u);
  }
LABEL_23:
  if (v9 > v14)
  {
    if ((unint64_t)v5 <= v14)
      v4 = (_QWORD *)v14;
    else
      v4 = v5;
    v21 = 24 * v14;
    while (v4 != (_QWORD *)v14)
    {
      re::AnimationValueTraits<re::BlendShapeWeightsAssetData>::combine(*(_QWORD *)(*(_QWORD *)a1 + v21 + 8), *(_QWORD *)(*(_QWORD *)a1 + v21 + 16), v23, v24, *(_QWORD *)(a3 + v21 + 8), *(_QWORD *)(a3 + v21 + 16));
      ++v14;
      v21 += 24;
      if (*((_QWORD *)a1 + 1) <= v14)
        goto LABEL_30;
    }
    goto LABEL_36;
  }
LABEL_30:
  if (v22)
  {
    if (v23)
      (*(void (**)(void))(*(_QWORD *)v22 + 40))();
  }
  return 1;
}

float re::AnimationValueTraits<re::BlendShapeWeightsAssetData>::combine(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t i;
  float result;

  if (a1)
  {
    for (i = 0; i != a1; ++i)
    {
      if (a3 == i)
      {
        os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_8:
        os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
      }
      if (a5 == i)
        goto LABEL_8;
      result = *(float *)(a2 + 4 * i) + *(float *)(a4 + 4 * i);
      *(float *)(a6 + 4 * i) = result;
    }
  }
  return result;
}

uint64_t `anonymous namespace'::TimelineDefinition::TimelineDefinition(uint64_t a1, const re::AssetHandle *a2)
{
  ArcSharedObject::ArcSharedObject((ArcSharedObject *)a1, 0);
  *(_QWORD *)a1 = &off_24ED99690;
  re::AssetHandle::AssetHandle((re::AssetHandle *)(a1 + 24), a2);
  *(_QWORD *)(a1 + 48) = 0;
  *(_QWORD *)(a1 + 80) = 0;
  *(_BYTE *)(a1 + 88) = 0;
  return a1;
}

void `anonymous namespace'::TimelineDefinition::~TimelineDefinition(_anonymous_namespace_::TimelineDefinition *this)
{
  JUMPOUT(0x2276933B8);
}

{
  *(_QWORD *)this = &off_24ED99690;
  if (*((_BYTE *)this + 88))
    re::StringID::destroyString((_anonymous_namespace_::TimelineDefinition *)((char *)this + 96));
  std::unique_ptr<re::RigHierarchy,std::function<void ()(re::RigHierarchy*)>>::~unique_ptr[abi:nn180100]((uint64_t *)this + 6);
  re::AssetHandle::~AssetHandle((_anonymous_namespace_::TimelineDefinition *)((char *)this + 24));
  *(_QWORD *)this = &off_24ED426B8;
  objc_destructInstance((char *)this + 8);
}

void std::__function::__func<RETimelineDefinitionCreateFromToByFloatAnimation::$_0,std::allocator<RETimelineDefinitionCreateFromToByFloatAnimation::$_0>,void ()(re::TimelineAssetData *)>::~__func()
{
  JUMPOUT(0x2276933B8);
}

_QWORD *std::__function::__func<RETimelineDefinitionCreateFromToByFloatAnimation::$_0,std::allocator<RETimelineDefinitionCreateFromToByFloatAnimation::$_0>,void ()(re::TimelineAssetData *)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_24ED996D8;
  return result;
}

void std::__function::__func<RETimelineDefinitionCreateFromToByFloatAnimation::$_0,std::allocator<RETimelineDefinitionCreateFromToByFloatAnimation::$_0>,void ()(re::TimelineAssetData *)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_24ED996D8;
}

void std::__function::__func<RETimelineDefinitionCreateFromToByFloatAnimation::$_0,std::allocator<RETimelineDefinitionCreateFromToByFloatAnimation::$_0>,void ()(re::TimelineAssetData *)>::operator()(_anonymous_namespace_ *a1, void (****a2)(_QWORD))
{
  void (***v2)(_QWORD);

  v2 = *a2;
  if (v2)
  {
    (**v2)(v2);
  }
}

uint64_t std::__function::__func<RETimelineDefinitionCreateFromToByFloatAnimation::$_0,std::allocator<RETimelineDefinitionCreateFromToByFloatAnimation::$_0>,void ()(re::TimelineAssetData *)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<RETimelineDefinitionCreateFromToByFloatAnimation::$_0,std::allocator<RETimelineDefinitionCreateFromToByFloatAnimation::$_0>,void ()(re::TimelineAssetData *)>::target_type()
{
}

uint64_t `anonymous namespace'::TimelineDefinition::TimelineDefinition(uint64_t a1, uint64_t *a2)
{
  ArcSharedObject::ArcSharedObject((ArcSharedObject *)a1, 0);
  *(_QWORD *)a1 = &off_24ED99690;
  *(_QWORD *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 40) = 0;
  std::unique_ptr<void,std::function<void ()(void *)>>::unique_ptr[abi:nn180100]((_QWORD *)(a1 + 48), a2);
  *(_BYTE *)(a1 + 88) = 0;
  return a1;
}

void std::__function::__func<RETimelineDefinitionCreateFromToByDoubleAnimation::$_0,std::allocator<RETimelineDefinitionCreateFromToByDoubleAnimation::$_0>,void ()(re::TimelineAssetData *)>::~__func()
{
  JUMPOUT(0x2276933B8);
}

_QWORD *std::__function::__func<RETimelineDefinitionCreateFromToByDoubleAnimation::$_0,std::allocator<RETimelineDefinitionCreateFromToByDoubleAnimation::$_0>,void ()(re::TimelineAssetData *)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_24ED99758;
  return result;
}

void std::__function::__func<RETimelineDefinitionCreateFromToByDoubleAnimation::$_0,std::allocator<RETimelineDefinitionCreateFromToByDoubleAnimation::$_0>,void ()(re::TimelineAssetData *)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_24ED99758;
}

void std::__function::__func<RETimelineDefinitionCreateFromToByDoubleAnimation::$_0,std::allocator<RETimelineDefinitionCreateFromToByDoubleAnimation::$_0>,void ()(re::TimelineAssetData *)>::operator()(_anonymous_namespace_ *a1, void (****a2)(_QWORD))
{
  void (***v2)(_QWORD);

  v2 = *a2;
  if (v2)
  {
    (**v2)(v2);
  }
}

uint64_t std::__function::__func<RETimelineDefinitionCreateFromToByDoubleAnimation::$_0,std::allocator<RETimelineDefinitionCreateFromToByDoubleAnimation::$_0>,void ()(re::TimelineAssetData *)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<RETimelineDefinitionCreateFromToByDoubleAnimation::$_0,std::allocator<RETimelineDefinitionCreateFromToByDoubleAnimation::$_0>,void ()(re::TimelineAssetData *)>::target_type()
{
}

void std::__function::__func<RETimelineDefinitionCreateFromToByFloat2Animation::$_0,std::allocator<RETimelineDefinitionCreateFromToByFloat2Animation::$_0>,void ()(re::TimelineAssetData *)>::~__func()
{
  JUMPOUT(0x2276933B8);
}

_QWORD *std::__function::__func<RETimelineDefinitionCreateFromToByFloat2Animation::$_0,std::allocator<RETimelineDefinitionCreateFromToByFloat2Animation::$_0>,void ()(re::TimelineAssetData *)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_24ED997D8;
  return result;
}

void std::__function::__func<RETimelineDefinitionCreateFromToByFloat2Animation::$_0,std::allocator<RETimelineDefinitionCreateFromToByFloat2Animation::$_0>,void ()(re::TimelineAssetData *)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_24ED997D8;
}

void std::__function::__func<RETimelineDefinitionCreateFromToByFloat2Animation::$_0,std::allocator<RETimelineDefinitionCreateFromToByFloat2Animation::$_0>,void ()(re::TimelineAssetData *)>::operator()(_anonymous_namespace_ *a1, void (****a2)(_QWORD))
{
  void (***v2)(_QWORD);

  v2 = *a2;
  if (v2)
  {
    (**v2)(v2);
  }
}

uint64_t std::__function::__func<RETimelineDefinitionCreateFromToByFloat2Animation::$_0,std::allocator<RETimelineDefinitionCreateFromToByFloat2Animation::$_0>,void ()(re::TimelineAssetData *)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<RETimelineDefinitionCreateFromToByFloat2Animation::$_0,std::allocator<RETimelineDefinitionCreateFromToByFloat2Animation::$_0>,void ()(re::TimelineAssetData *)>::target_type()
{
}

void std::__function::__func<RETimelineDefinitionCreateFromToByFloat3Animation::$_0,std::allocator<RETimelineDefinitionCreateFromToByFloat3Animation::$_0>,void ()(re::TimelineAssetData *)>::~__func()
{
  JUMPOUT(0x2276933B8);
}

_QWORD *std::__function::__func<RETimelineDefinitionCreateFromToByFloat3Animation::$_0,std::allocator<RETimelineDefinitionCreateFromToByFloat3Animation::$_0>,void ()(re::TimelineAssetData *)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_24ED99858;
  return result;
}

void std::__function::__func<RETimelineDefinitionCreateFromToByFloat3Animation::$_0,std::allocator<RETimelineDefinitionCreateFromToByFloat3Animation::$_0>,void ()(re::TimelineAssetData *)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_24ED99858;
}

void std::__function::__func<RETimelineDefinitionCreateFromToByFloat3Animation::$_0,std::allocator<RETimelineDefinitionCreateFromToByFloat3Animation::$_0>,void ()(re::TimelineAssetData *)>::operator()(_anonymous_namespace_ *a1, void (****a2)(_QWORD))
{
  void (***v2)(_QWORD);

  v2 = *a2;
  if (v2)
  {
    (**v2)(v2);
  }
}

uint64_t std::__function::__func<RETimelineDefinitionCreateFromToByFloat3Animation::$_0,std::allocator<RETimelineDefinitionCreateFromToByFloat3Animation::$_0>,void ()(re::TimelineAssetData *)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<RETimelineDefinitionCreateFromToByFloat3Animation::$_0,std::allocator<RETimelineDefinitionCreateFromToByFloat3Animation::$_0>,void ()(re::TimelineAssetData *)>::target_type()
{
}

void std::__function::__func<RETimelineDefinitionCreateFromToByFloat4Animation::$_0,std::allocator<RETimelineDefinitionCreateFromToByFloat4Animation::$_0>,void ()(re::TimelineAssetData *)>::~__func()
{
  JUMPOUT(0x2276933B8);
}

_QWORD *std::__function::__func<RETimelineDefinitionCreateFromToByFloat4Animation::$_0,std::allocator<RETimelineDefinitionCreateFromToByFloat4Animation::$_0>,void ()(re::TimelineAssetData *)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_24ED998D8;
  return result;
}

void std::__function::__func<RETimelineDefinitionCreateFromToByFloat4Animation::$_0,std::allocator<RETimelineDefinitionCreateFromToByFloat4Animation::$_0>,void ()(re::TimelineAssetData *)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_24ED998D8;
}

void std::__function::__func<RETimelineDefinitionCreateFromToByFloat4Animation::$_0,std::allocator<RETimelineDefinitionCreateFromToByFloat4Animation::$_0>,void ()(re::TimelineAssetData *)>::operator()(_anonymous_namespace_ *a1, void (****a2)(_QWORD))
{
  void (***v2)(_QWORD);

  v2 = *a2;
  if (v2)
  {
    (**v2)(v2);
  }
}

uint64_t std::__function::__func<RETimelineDefinitionCreateFromToByFloat4Animation::$_0,std::allocator<RETimelineDefinitionCreateFromToByFloat4Animation::$_0>,void ()(re::TimelineAssetData *)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<RETimelineDefinitionCreateFromToByFloat4Animation::$_0,std::allocator<RETimelineDefinitionCreateFromToByFloat4Animation::$_0>,void ()(re::TimelineAssetData *)>::target_type()
{
}

void std::__function::__func<RETimelineDefinitionCreateFromToByQuaternionAnimation::$_0,std::allocator<RETimelineDefinitionCreateFromToByQuaternionAnimation::$_0>,void ()(re::TimelineAssetData *)>::~__func()
{
  JUMPOUT(0x2276933B8);
}

_QWORD *std::__function::__func<RETimelineDefinitionCreateFromToByQuaternionAnimation::$_0,std::allocator<RETimelineDefinitionCreateFromToByQuaternionAnimation::$_0>,void ()(re::TimelineAssetData *)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_24ED99958;
  return result;
}

void std::__function::__func<RETimelineDefinitionCreateFromToByQuaternionAnimation::$_0,std::allocator<RETimelineDefinitionCreateFromToByQuaternionAnimation::$_0>,void ()(re::TimelineAssetData *)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_24ED99958;
}

void std::__function::__func<RETimelineDefinitionCreateFromToByQuaternionAnimation::$_0,std::allocator<RETimelineDefinitionCreateFromToByQuaternionAnimation::$_0>,void ()(re::TimelineAssetData *)>::operator()(_anonymous_namespace_ *a1, void (****a2)(_QWORD))
{
  void (***v2)(_QWORD);

  v2 = *a2;
  if (v2)
  {
    (**v2)(v2);
  }
}

uint64_t std::__function::__func<RETimelineDefinitionCreateFromToByQuaternionAnimation::$_0,std::allocator<RETimelineDefinitionCreateFromToByQuaternionAnimation::$_0>,void ()(re::TimelineAssetData *)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<RETimelineDefinitionCreateFromToByQuaternionAnimation::$_0,std::allocator<RETimelineDefinitionCreateFromToByQuaternionAnimation::$_0>,void ()(re::TimelineAssetData *)>::target_type()
{
}

void std::__function::__func<RETimelineDefinitionCreateFromToBySRTAnimation::$_0,std::allocator<RETimelineDefinitionCreateFromToBySRTAnimation::$_0>,void ()(re::TimelineAssetData *)>::~__func()
{
  JUMPOUT(0x2276933B8);
}

_QWORD *std::__function::__func<RETimelineDefinitionCreateFromToBySRTAnimation::$_0,std::allocator<RETimelineDefinitionCreateFromToBySRTAnimation::$_0>,void ()(re::TimelineAssetData *)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_24ED999D8;
  return result;
}

void std::__function::__func<RETimelineDefinitionCreateFromToBySRTAnimation::$_0,std::allocator<RETimelineDefinitionCreateFromToBySRTAnimation::$_0>,void ()(re::TimelineAssetData *)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_24ED999D8;
}

void std::__function::__func<RETimelineDefinitionCreateFromToBySRTAnimation::$_0,std::allocator<RETimelineDefinitionCreateFromToBySRTAnimation::$_0>,void ()(re::TimelineAssetData *)>::operator()(_anonymous_namespace_ *a1, void (****a2)(_QWORD))
{
  void (***v2)(_QWORD);

  v2 = *a2;
  if (v2)
  {
    (**v2)(v2);
  }
}

uint64_t std::__function::__func<RETimelineDefinitionCreateFromToBySRTAnimation::$_0,std::allocator<RETimelineDefinitionCreateFromToBySRTAnimation::$_0>,void ()(re::TimelineAssetData *)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<RETimelineDefinitionCreateFromToBySRTAnimation::$_0,std::allocator<RETimelineDefinitionCreateFromToBySRTAnimation::$_0>,void ()(re::TimelineAssetData *)>::target_type()
{
}

void std::__function::__func<RETimelineDefinitionCreateFromToBySkeletalPoseAnimation::$_0,std::allocator<RETimelineDefinitionCreateFromToBySkeletalPoseAnimation::$_0>,void ()(re::TimelineAssetData *)>::~__func()
{
  JUMPOUT(0x2276933B8);
}

_QWORD *std::__function::__func<RETimelineDefinitionCreateFromToBySkeletalPoseAnimation::$_0,std::allocator<RETimelineDefinitionCreateFromToBySkeletalPoseAnimation::$_0>,void ()(re::TimelineAssetData *)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_24ED99A58;
  return result;
}

void std::__function::__func<RETimelineDefinitionCreateFromToBySkeletalPoseAnimation::$_0,std::allocator<RETimelineDefinitionCreateFromToBySkeletalPoseAnimation::$_0>,void ()(re::TimelineAssetData *)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_24ED99A58;
}

void std::__function::__func<RETimelineDefinitionCreateFromToBySkeletalPoseAnimation::$_0,std::allocator<RETimelineDefinitionCreateFromToBySkeletalPoseAnimation::$_0>,void ()(re::TimelineAssetData *)>::operator()(_anonymous_namespace_ *a1, void (****a2)(_QWORD))
{
  void (***v2)(_QWORD);

  v2 = *a2;
  if (v2)
  {
    (**v2)(v2);
  }
}

uint64_t std::__function::__func<RETimelineDefinitionCreateFromToBySkeletalPoseAnimation::$_0,std::allocator<RETimelineDefinitionCreateFromToBySkeletalPoseAnimation::$_0>,void ()(re::TimelineAssetData *)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<RETimelineDefinitionCreateFromToBySkeletalPoseAnimation::$_0,std::allocator<RETimelineDefinitionCreateFromToBySkeletalPoseAnimation::$_0>,void ()(re::TimelineAssetData *)>::target_type()
{
}

void std::__function::__func<RETimelineDefinitionCreateFromToByBlendShapeWeightsAnimation::$_0,std::allocator<RETimelineDefinitionCreateFromToByBlendShapeWeightsAnimation::$_0>,void ()(re::TimelineAssetData *)>::~__func()
{
  JUMPOUT(0x2276933B8);
}

_QWORD *std::__function::__func<RETimelineDefinitionCreateFromToByBlendShapeWeightsAnimation::$_0,std::allocator<RETimelineDefinitionCreateFromToByBlendShapeWeightsAnimation::$_0>,void ()(re::TimelineAssetData *)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_24ED99AD8;
  return result;
}

void std::__function::__func<RETimelineDefinitionCreateFromToByBlendShapeWeightsAnimation::$_0,std::allocator<RETimelineDefinitionCreateFromToByBlendShapeWeightsAnimation::$_0>,void ()(re::TimelineAssetData *)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_24ED99AD8;
}

void std::__function::__func<RETimelineDefinitionCreateFromToByBlendShapeWeightsAnimation::$_0,std::allocator<RETimelineDefinitionCreateFromToByBlendShapeWeightsAnimation::$_0>,void ()(re::TimelineAssetData *)>::operator()(_anonymous_namespace_ *a1, void (****a2)(_QWORD))
{
  void (***v2)(_QWORD);

  v2 = *a2;
  if (v2)
  {
    (**v2)(v2);
  }
}

uint64_t std::__function::__func<RETimelineDefinitionCreateFromToByBlendShapeWeightsAnimation::$_0,std::allocator<RETimelineDefinitionCreateFromToByBlendShapeWeightsAnimation::$_0>,void ()(re::TimelineAssetData *)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<RETimelineDefinitionCreateFromToByBlendShapeWeightsAnimation::$_0,std::allocator<RETimelineDefinitionCreateFromToByBlendShapeWeightsAnimation::$_0>,void ()(re::TimelineAssetData *)>::target_type()
{
}

void std::__function::__func<RETimelineDefinitionCreateSampledFloatAnimation::$_0,std::allocator<RETimelineDefinitionCreateSampledFloatAnimation::$_0>,void ()(re::TimelineAssetData *)>::~__func()
{
  JUMPOUT(0x2276933B8);
}

_QWORD *std::__function::__func<RETimelineDefinitionCreateSampledFloatAnimation::$_0,std::allocator<RETimelineDefinitionCreateSampledFloatAnimation::$_0>,void ()(re::TimelineAssetData *)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_24ED99B58;
  return result;
}

void std::__function::__func<RETimelineDefinitionCreateSampledFloatAnimation::$_0,std::allocator<RETimelineDefinitionCreateSampledFloatAnimation::$_0>,void ()(re::TimelineAssetData *)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_24ED99B58;
}

void std::__function::__func<RETimelineDefinitionCreateSampledFloatAnimation::$_0,std::allocator<RETimelineDefinitionCreateSampledFloatAnimation::$_0>,void ()(re::TimelineAssetData *)>::operator()(_anonymous_namespace_ *a1, void (****a2)(_QWORD))
{
  void (***v2)(_QWORD);

  v2 = *a2;
  if (v2)
  {
    (**v2)(v2);
  }
}

uint64_t std::__function::__func<RETimelineDefinitionCreateSampledFloatAnimation::$_0,std::allocator<RETimelineDefinitionCreateSampledFloatAnimation::$_0>,void ()(re::TimelineAssetData *)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<RETimelineDefinitionCreateSampledFloatAnimation::$_0,std::allocator<RETimelineDefinitionCreateSampledFloatAnimation::$_0>,void ()(re::TimelineAssetData *)>::target_type()
{
}

void std::__function::__func<RETimelineDefinitionCreateSampledDoubleAnimation::$_0,std::allocator<RETimelineDefinitionCreateSampledDoubleAnimation::$_0>,void ()(re::TimelineAssetData *)>::~__func()
{
  JUMPOUT(0x2276933B8);
}

_QWORD *std::__function::__func<RETimelineDefinitionCreateSampledDoubleAnimation::$_0,std::allocator<RETimelineDefinitionCreateSampledDoubleAnimation::$_0>,void ()(re::TimelineAssetData *)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_24ED99BD8;
  return result;
}

void std::__function::__func<RETimelineDefinitionCreateSampledDoubleAnimation::$_0,std::allocator<RETimelineDefinitionCreateSampledDoubleAnimation::$_0>,void ()(re::TimelineAssetData *)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_24ED99BD8;
}

void std::__function::__func<RETimelineDefinitionCreateSampledDoubleAnimation::$_0,std::allocator<RETimelineDefinitionCreateSampledDoubleAnimation::$_0>,void ()(re::TimelineAssetData *)>::operator()(_anonymous_namespace_ *a1, void (****a2)(_QWORD))
{
  void (***v2)(_QWORD);

  v2 = *a2;
  if (v2)
  {
    (**v2)(v2);
  }
}

uint64_t std::__function::__func<RETimelineDefinitionCreateSampledDoubleAnimation::$_0,std::allocator<RETimelineDefinitionCreateSampledDoubleAnimation::$_0>,void ()(re::TimelineAssetData *)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<RETimelineDefinitionCreateSampledDoubleAnimation::$_0,std::allocator<RETimelineDefinitionCreateSampledDoubleAnimation::$_0>,void ()(re::TimelineAssetData *)>::target_type()
{
}

void std::__function::__func<RETimelineDefinitionCreateSampledFloat2Animation::$_0,std::allocator<RETimelineDefinitionCreateSampledFloat2Animation::$_0>,void ()(re::TimelineAssetData *)>::~__func()
{
  JUMPOUT(0x2276933B8);
}

_QWORD *std::__function::__func<RETimelineDefinitionCreateSampledFloat2Animation::$_0,std::allocator<RETimelineDefinitionCreateSampledFloat2Animation::$_0>,void ()(re::TimelineAssetData *)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_24ED99C58;
  return result;
}

void std::__function::__func<RETimelineDefinitionCreateSampledFloat2Animation::$_0,std::allocator<RETimelineDefinitionCreateSampledFloat2Animation::$_0>,void ()(re::TimelineAssetData *)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_24ED99C58;
}

void std::__function::__func<RETimelineDefinitionCreateSampledFloat2Animation::$_0,std::allocator<RETimelineDefinitionCreateSampledFloat2Animation::$_0>,void ()(re::TimelineAssetData *)>::operator()(_anonymous_namespace_ *a1, void (****a2)(_QWORD))
{
  void (***v2)(_QWORD);

  v2 = *a2;
  if (v2)
  {
    (**v2)(v2);
  }
}

uint64_t std::__function::__func<RETimelineDefinitionCreateSampledFloat2Animation::$_0,std::allocator<RETimelineDefinitionCreateSampledFloat2Animation::$_0>,void ()(re::TimelineAssetData *)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<RETimelineDefinitionCreateSampledFloat2Animation::$_0,std::allocator<RETimelineDefinitionCreateSampledFloat2Animation::$_0>,void ()(re::TimelineAssetData *)>::target_type()
{
}

void std::__function::__func<RETimelineDefinitionCreateSampledFloat3Animation::$_0,std::allocator<RETimelineDefinitionCreateSampledFloat3Animation::$_0>,void ()(re::TimelineAssetData *)>::~__func()
{
  JUMPOUT(0x2276933B8);
}

_QWORD *std::__function::__func<RETimelineDefinitionCreateSampledFloat3Animation::$_0,std::allocator<RETimelineDefinitionCreateSampledFloat3Animation::$_0>,void ()(re::TimelineAssetData *)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_24ED99CD8;
  return result;
}

void std::__function::__func<RETimelineDefinitionCreateSampledFloat3Animation::$_0,std::allocator<RETimelineDefinitionCreateSampledFloat3Animation::$_0>,void ()(re::TimelineAssetData *)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_24ED99CD8;
}

void std::__function::__func<RETimelineDefinitionCreateSampledFloat3Animation::$_0,std::allocator<RETimelineDefinitionCreateSampledFloat3Animation::$_0>,void ()(re::TimelineAssetData *)>::operator()(_anonymous_namespace_ *a1, void (****a2)(_QWORD))
{
  void (***v2)(_QWORD);

  v2 = *a2;
  if (v2)
  {
    (**v2)(v2);
  }
}

uint64_t std::__function::__func<RETimelineDefinitionCreateSampledFloat3Animation::$_0,std::allocator<RETimelineDefinitionCreateSampledFloat3Animation::$_0>,void ()(re::TimelineAssetData *)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<RETimelineDefinitionCreateSampledFloat3Animation::$_0,std::allocator<RETimelineDefinitionCreateSampledFloat3Animation::$_0>,void ()(re::TimelineAssetData *)>::target_type()
{
}

void std::__function::__func<RETimelineDefinitionCreateSampledFloat4Animation::$_0,std::allocator<RETimelineDefinitionCreateSampledFloat4Animation::$_0>,void ()(re::TimelineAssetData *)>::~__func()
{
  JUMPOUT(0x2276933B8);
}

_QWORD *std::__function::__func<RETimelineDefinitionCreateSampledFloat4Animation::$_0,std::allocator<RETimelineDefinitionCreateSampledFloat4Animation::$_0>,void ()(re::TimelineAssetData *)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_24ED99D58;
  return result;
}

void std::__function::__func<RETimelineDefinitionCreateSampledFloat4Animation::$_0,std::allocator<RETimelineDefinitionCreateSampledFloat4Animation::$_0>,void ()(re::TimelineAssetData *)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_24ED99D58;
}

void std::__function::__func<RETimelineDefinitionCreateSampledFloat4Animation::$_0,std::allocator<RETimelineDefinitionCreateSampledFloat4Animation::$_0>,void ()(re::TimelineAssetData *)>::operator()(_anonymous_namespace_ *a1, void (****a2)(_QWORD))
{
  void (***v2)(_QWORD);

  v2 = *a2;
  if (v2)
  {
    (**v2)(v2);
  }
}

uint64_t std::__function::__func<RETimelineDefinitionCreateSampledFloat4Animation::$_0,std::allocator<RETimelineDefinitionCreateSampledFloat4Animation::$_0>,void ()(re::TimelineAssetData *)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<RETimelineDefinitionCreateSampledFloat4Animation::$_0,std::allocator<RETimelineDefinitionCreateSampledFloat4Animation::$_0>,void ()(re::TimelineAssetData *)>::target_type()
{
}

void std::__function::__func<RETimelineDefinitionCreateSampledQuaternionAnimation::$_0,std::allocator<RETimelineDefinitionCreateSampledQuaternionAnimation::$_0>,void ()(re::TimelineAssetData *)>::~__func()
{
  JUMPOUT(0x2276933B8);
}

_QWORD *std::__function::__func<RETimelineDefinitionCreateSampledQuaternionAnimation::$_0,std::allocator<RETimelineDefinitionCreateSampledQuaternionAnimation::$_0>,void ()(re::TimelineAssetData *)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_24ED99DD8;
  return result;
}

void std::__function::__func<RETimelineDefinitionCreateSampledQuaternionAnimation::$_0,std::allocator<RETimelineDefinitionCreateSampledQuaternionAnimation::$_0>,void ()(re::TimelineAssetData *)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_24ED99DD8;
}

void std::__function::__func<RETimelineDefinitionCreateSampledQuaternionAnimation::$_0,std::allocator<RETimelineDefinitionCreateSampledQuaternionAnimation::$_0>,void ()(re::TimelineAssetData *)>::operator()(_anonymous_namespace_ *a1, void (****a2)(_QWORD))
{
  void (***v2)(_QWORD);

  v2 = *a2;
  if (v2)
  {
    (**v2)(v2);
  }
}

uint64_t std::__function::__func<RETimelineDefinitionCreateSampledQuaternionAnimation::$_0,std::allocator<RETimelineDefinitionCreateSampledQuaternionAnimation::$_0>,void ()(re::TimelineAssetData *)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<RETimelineDefinitionCreateSampledQuaternionAnimation::$_0,std::allocator<RETimelineDefinitionCreateSampledQuaternionAnimation::$_0>,void ()(re::TimelineAssetData *)>::target_type()
{
}

void std::__function::__func<RETimelineDefinitionCreateSampledSRTAnimation::$_0,std::allocator<RETimelineDefinitionCreateSampledSRTAnimation::$_0>,void ()(re::TimelineAssetData *)>::~__func()
{
  JUMPOUT(0x2276933B8);
}

_QWORD *std::__function::__func<RETimelineDefinitionCreateSampledSRTAnimation::$_0,std::allocator<RETimelineDefinitionCreateSampledSRTAnimation::$_0>,void ()(re::TimelineAssetData *)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_24ED99E58;
  return result;
}

void std::__function::__func<RETimelineDefinitionCreateSampledSRTAnimation::$_0,std::allocator<RETimelineDefinitionCreateSampledSRTAnimation::$_0>,void ()(re::TimelineAssetData *)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_24ED99E58;
}

void std::__function::__func<RETimelineDefinitionCreateSampledSRTAnimation::$_0,std::allocator<RETimelineDefinitionCreateSampledSRTAnimation::$_0>,void ()(re::TimelineAssetData *)>::operator()(_anonymous_namespace_ *a1, void (****a2)(_QWORD))
{
  void (***v2)(_QWORD);

  v2 = *a2;
  if (v2)
  {
    (**v2)(v2);
  }
}

uint64_t std::__function::__func<RETimelineDefinitionCreateSampledSRTAnimation::$_0,std::allocator<RETimelineDefinitionCreateSampledSRTAnimation::$_0>,void ()(re::TimelineAssetData *)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<RETimelineDefinitionCreateSampledSRTAnimation::$_0,std::allocator<RETimelineDefinitionCreateSampledSRTAnimation::$_0>,void ()(re::TimelineAssetData *)>::target_type()
{
}

void std::__function::__func<RETimelineDefinitionCreateSampledSkeletalPoseAnimation::$_0,std::allocator<RETimelineDefinitionCreateSampledSkeletalPoseAnimation::$_0>,void ()(re::TimelineAssetData *)>::~__func()
{
  JUMPOUT(0x2276933B8);
}

_QWORD *std::__function::__func<RETimelineDefinitionCreateSampledSkeletalPoseAnimation::$_0,std::allocator<RETimelineDefinitionCreateSampledSkeletalPoseAnimation::$_0>,void ()(re::TimelineAssetData *)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_24ED99ED8;
  return result;
}

void std::__function::__func<RETimelineDefinitionCreateSampledSkeletalPoseAnimation::$_0,std::allocator<RETimelineDefinitionCreateSampledSkeletalPoseAnimation::$_0>,void ()(re::TimelineAssetData *)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_24ED99ED8;
}

void std::__function::__func<RETimelineDefinitionCreateSampledSkeletalPoseAnimation::$_0,std::allocator<RETimelineDefinitionCreateSampledSkeletalPoseAnimation::$_0>,void ()(re::TimelineAssetData *)>::operator()(_anonymous_namespace_ *a1, void (****a2)(_QWORD))
{
  void (***v2)(_QWORD);

  v2 = *a2;
  if (v2)
  {
    (**v2)(v2);
  }
}

uint64_t std::__function::__func<RETimelineDefinitionCreateSampledSkeletalPoseAnimation::$_0,std::allocator<RETimelineDefinitionCreateSampledSkeletalPoseAnimation::$_0>,void ()(re::TimelineAssetData *)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<RETimelineDefinitionCreateSampledSkeletalPoseAnimation::$_0,std::allocator<RETimelineDefinitionCreateSampledSkeletalPoseAnimation::$_0>,void ()(re::TimelineAssetData *)>::target_type()
{
}

void std::__function::__func<RETimelineDefinitionCreateSampledBlendShapeWeightsAnimation::$_0,std::allocator<RETimelineDefinitionCreateSampledBlendShapeWeightsAnimation::$_0>,void ()(re::TimelineAssetData *)>::~__func()
{
  JUMPOUT(0x2276933B8);
}

_QWORD *std::__function::__func<RETimelineDefinitionCreateSampledBlendShapeWeightsAnimation::$_0,std::allocator<RETimelineDefinitionCreateSampledBlendShapeWeightsAnimation::$_0>,void ()(re::TimelineAssetData *)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_24ED99F58;
  return result;
}

void std::__function::__func<RETimelineDefinitionCreateSampledBlendShapeWeightsAnimation::$_0,std::allocator<RETimelineDefinitionCreateSampledBlendShapeWeightsAnimation::$_0>,void ()(re::TimelineAssetData *)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_24ED99F58;
}

void std::__function::__func<RETimelineDefinitionCreateSampledBlendShapeWeightsAnimation::$_0,std::allocator<RETimelineDefinitionCreateSampledBlendShapeWeightsAnimation::$_0>,void ()(re::TimelineAssetData *)>::operator()(_anonymous_namespace_ *a1, void (****a2)(_QWORD))
{
  void (***v2)(_QWORD);

  v2 = *a2;
  if (v2)
  {
    (**v2)(v2);
  }
}

uint64_t std::__function::__func<RETimelineDefinitionCreateSampledBlendShapeWeightsAnimation::$_0,std::allocator<RETimelineDefinitionCreateSampledBlendShapeWeightsAnimation::$_0>,void ()(re::TimelineAssetData *)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<RETimelineDefinitionCreateSampledBlendShapeWeightsAnimation::$_0,std::allocator<RETimelineDefinitionCreateSampledBlendShapeWeightsAnimation::$_0>,void ()(re::TimelineAssetData *)>::target_type()
{
}

void std::__function::__func<createClipAssetData(REAssetManager *,RETimelineDefinition *)::$_0,std::allocator<createClipAssetData(REAssetManager *,RETimelineDefinition *)::$_0>,void ()(re::TimelineAssetData *)>::~__func()
{
  JUMPOUT(0x2276933B8);
}

_QWORD *std::__function::__func<createClipAssetData(REAssetManager *,RETimelineDefinition *)::$_0,std::allocator<createClipAssetData(REAssetManager *,RETimelineDefinition *)::$_0>,void ()(re::TimelineAssetData *)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_24ED99FD8;
  return result;
}

void std::__function::__func<createClipAssetData(REAssetManager *,RETimelineDefinition *)::$_0,std::allocator<createClipAssetData(REAssetManager *,RETimelineDefinition *)::$_0>,void ()(re::TimelineAssetData *)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_24ED99FD8;
}

void std::__function::__func<createClipAssetData(REAssetManager *,RETimelineDefinition *)::$_0,std::allocator<createClipAssetData(REAssetManager *,RETimelineDefinition *)::$_0>,void ()(re::TimelineAssetData *)>::operator()(_anonymous_namespace_ *a1, void (****a2)(_QWORD))
{
  void (***v2)(_QWORD);

  v2 = *a2;
  if (v2)
  {
    (**v2)(v2);
  }
}

uint64_t std::__function::__func<createClipAssetData(REAssetManager *,RETimelineDefinition *)::$_0,std::allocator<createClipAssetData(REAssetManager *,RETimelineDefinition *)::$_0>,void ()(re::TimelineAssetData *)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<createClipAssetData(REAssetManager *,RETimelineDefinition *)::$_0,std::allocator<createClipAssetData(REAssetManager *,RETimelineDefinition *)::$_0>,void ()(re::TimelineAssetData *)>::target_type()
{
}

void std::__function::__func<createClipAssetData(REAssetManager *,RETimelineDefinition *)::$_1,std::allocator<createClipAssetData(REAssetManager *,RETimelineDefinition *)::$_1>,void ()(re::TimelineAssetData *)>::~__func()
{
  JUMPOUT(0x2276933B8);
}

_QWORD *std::__function::__func<createClipAssetData(REAssetManager *,RETimelineDefinition *)::$_1,std::allocator<createClipAssetData(REAssetManager *,RETimelineDefinition *)::$_1>,void ()(re::TimelineAssetData *)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_24ED9A058;
  return result;
}

void std::__function::__func<createClipAssetData(REAssetManager *,RETimelineDefinition *)::$_1,std::allocator<createClipAssetData(REAssetManager *,RETimelineDefinition *)::$_1>,void ()(re::TimelineAssetData *)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_24ED9A058;
}

void std::__function::__func<createClipAssetData(REAssetManager *,RETimelineDefinition *)::$_1,std::allocator<createClipAssetData(REAssetManager *,RETimelineDefinition *)::$_1>,void ()(re::TimelineAssetData *)>::operator()(_anonymous_namespace_ *a1, void (****a2)(_QWORD))
{
  void (***v2)(_QWORD);

  v2 = *a2;
  if (v2)
  {
    (**v2)(v2);
  }
}

uint64_t std::__function::__func<createClipAssetData(REAssetManager *,RETimelineDefinition *)::$_1,std::allocator<createClipAssetData(REAssetManager *,RETimelineDefinition *)::$_1>,void ()(re::TimelineAssetData *)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<createClipAssetData(REAssetManager *,RETimelineDefinition *)::$_1,std::allocator<createClipAssetData(REAssetManager *,RETimelineDefinition *)::$_1>,void ()(re::TimelineAssetData *)>::target_type()
{
}

void std::__function::__func<createClipAssetData(REAssetManager *,RETimelineDefinition *)::$_2,std::allocator<createClipAssetData(REAssetManager *,RETimelineDefinition *)::$_2>,void ()(re::TimelineAssetData *)>::~__func()
{
  JUMPOUT(0x2276933B8);
}

_QWORD *std::__function::__func<createClipAssetData(REAssetManager *,RETimelineDefinition *)::$_2,std::allocator<createClipAssetData(REAssetManager *,RETimelineDefinition *)::$_2>,void ()(re::TimelineAssetData *)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_24ED9A0D8;
  return result;
}

void std::__function::__func<createClipAssetData(REAssetManager *,RETimelineDefinition *)::$_2,std::allocator<createClipAssetData(REAssetManager *,RETimelineDefinition *)::$_2>,void ()(re::TimelineAssetData *)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_24ED9A0D8;
}

void std::__function::__func<createClipAssetData(REAssetManager *,RETimelineDefinition *)::$_2,std::allocator<createClipAssetData(REAssetManager *,RETimelineDefinition *)::$_2>,void ()(re::TimelineAssetData *)>::operator()(_anonymous_namespace_ *a1, void (****a2)(_QWORD))
{
  void (***v2)(_QWORD);

  v2 = *a2;
  if (v2)
  {
    (**v2)(v2);
  }
}

uint64_t std::__function::__func<createClipAssetData(REAssetManager *,RETimelineDefinition *)::$_2,std::allocator<createClipAssetData(REAssetManager *,RETimelineDefinition *)::$_2>,void ()(re::TimelineAssetData *)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<createClipAssetData(REAssetManager *,RETimelineDefinition *)::$_2,std::allocator<createClipAssetData(REAssetManager *,RETimelineDefinition *)::$_2>,void ()(re::TimelineAssetData *)>::target_type()
{
}

void std::__function::__func<createClipAssetData(REAssetManager *,RETimelineDefinition *)::$_3,std::allocator<createClipAssetData(REAssetManager *,RETimelineDefinition *)::$_3>,void ()(re::TimelineAssetData *)>::~__func()
{
  JUMPOUT(0x2276933B8);
}

_QWORD *std::__function::__func<createClipAssetData(REAssetManager *,RETimelineDefinition *)::$_3,std::allocator<createClipAssetData(REAssetManager *,RETimelineDefinition *)::$_3>,void ()(re::TimelineAssetData *)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_24ED9A158;
  return result;
}

void std::__function::__func<createClipAssetData(REAssetManager *,RETimelineDefinition *)::$_3,std::allocator<createClipAssetData(REAssetManager *,RETimelineDefinition *)::$_3>,void ()(re::TimelineAssetData *)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_24ED9A158;
}

void std::__function::__func<createClipAssetData(REAssetManager *,RETimelineDefinition *)::$_3,std::allocator<createClipAssetData(REAssetManager *,RETimelineDefinition *)::$_3>,void ()(re::TimelineAssetData *)>::operator()(_anonymous_namespace_ *a1, void (****a2)(_QWORD))
{
  void (***v2)(_QWORD);

  v2 = *a2;
  if (v2)
  {
    (**v2)(v2);
  }
}

uint64_t std::__function::__func<createClipAssetData(REAssetManager *,RETimelineDefinition *)::$_3,std::allocator<createClipAssetData(REAssetManager *,RETimelineDefinition *)::$_3>,void ()(re::TimelineAssetData *)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<createClipAssetData(REAssetManager *,RETimelineDefinition *)::$_3,std::allocator<createClipAssetData(REAssetManager *,RETimelineDefinition *)::$_3>,void ()(re::TimelineAssetData *)>::target_type()
{
}

void std::__function::__func<createClipAssetData(REAssetManager *,RETimelineDefinition *)::$_4,std::allocator<createClipAssetData(REAssetManager *,RETimelineDefinition *)::$_4>,void ()(re::TimelineAssetData *)>::~__func()
{
  JUMPOUT(0x2276933B8);
}

_QWORD *std::__function::__func<createClipAssetData(REAssetManager *,RETimelineDefinition *)::$_4,std::allocator<createClipAssetData(REAssetManager *,RETimelineDefinition *)::$_4>,void ()(re::TimelineAssetData *)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_24ED9A1D8;
  return result;
}

void std::__function::__func<createClipAssetData(REAssetManager *,RETimelineDefinition *)::$_4,std::allocator<createClipAssetData(REAssetManager *,RETimelineDefinition *)::$_4>,void ()(re::TimelineAssetData *)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_24ED9A1D8;
}

void std::__function::__func<createClipAssetData(REAssetManager *,RETimelineDefinition *)::$_4,std::allocator<createClipAssetData(REAssetManager *,RETimelineDefinition *)::$_4>,void ()(re::TimelineAssetData *)>::operator()(_anonymous_namespace_ *a1, void (****a2)(_QWORD))
{
  void (***v2)(_QWORD);

  v2 = *a2;
  if (v2)
  {
    (**v2)(v2);
  }
}

uint64_t std::__function::__func<createClipAssetData(REAssetManager *,RETimelineDefinition *)::$_4,std::allocator<createClipAssetData(REAssetManager *,RETimelineDefinition *)::$_4>,void ()(re::TimelineAssetData *)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<createClipAssetData(REAssetManager *,RETimelineDefinition *)::$_4,std::allocator<createClipAssetData(REAssetManager *,RETimelineDefinition *)::$_4>,void ()(re::TimelineAssetData *)>::target_type()
{
}

void std::__function::__func<createClipAssetData(REAssetManager *,RETimelineDefinition *)::$_5,std::allocator<createClipAssetData(REAssetManager *,RETimelineDefinition *)::$_5>,void ()(re::TimelineAssetData *)>::~__func()
{
  JUMPOUT(0x2276933B8);
}

_QWORD *std::__function::__func<createClipAssetData(REAssetManager *,RETimelineDefinition *)::$_5,std::allocator<createClipAssetData(REAssetManager *,RETimelineDefinition *)::$_5>,void ()(re::TimelineAssetData *)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_24ED9A258;
  return result;
}

void std::__function::__func<createClipAssetData(REAssetManager *,RETimelineDefinition *)::$_5,std::allocator<createClipAssetData(REAssetManager *,RETimelineDefinition *)::$_5>,void ()(re::TimelineAssetData *)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_24ED9A258;
}

void std::__function::__func<createClipAssetData(REAssetManager *,RETimelineDefinition *)::$_5,std::allocator<createClipAssetData(REAssetManager *,RETimelineDefinition *)::$_5>,void ()(re::TimelineAssetData *)>::operator()(_anonymous_namespace_ *a1, void (****a2)(_QWORD))
{
  void (***v2)(_QWORD);

  v2 = *a2;
  if (v2)
  {
    (**v2)(v2);
  }
}

uint64_t std::__function::__func<createClipAssetData(REAssetManager *,RETimelineDefinition *)::$_5,std::allocator<createClipAssetData(REAssetManager *,RETimelineDefinition *)::$_5>,void ()(re::TimelineAssetData *)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<createClipAssetData(REAssetManager *,RETimelineDefinition *)::$_5,std::allocator<createClipAssetData(REAssetManager *,RETimelineDefinition *)::$_5>,void ()(re::TimelineAssetData *)>::target_type()
{
}

void std::__function::__func<createClipAssetData(REAssetManager *,RETimelineDefinition *)::$_6,std::allocator<createClipAssetData(REAssetManager *,RETimelineDefinition *)::$_6>,void ()(re::TimelineAssetData *)>::~__func()
{
  JUMPOUT(0x2276933B8);
}

_QWORD *std::__function::__func<createClipAssetData(REAssetManager *,RETimelineDefinition *)::$_6,std::allocator<createClipAssetData(REAssetManager *,RETimelineDefinition *)::$_6>,void ()(re::TimelineAssetData *)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_24ED9A2D8;
  return result;
}

void std::__function::__func<createClipAssetData(REAssetManager *,RETimelineDefinition *)::$_6,std::allocator<createClipAssetData(REAssetManager *,RETimelineDefinition *)::$_6>,void ()(re::TimelineAssetData *)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_24ED9A2D8;
}

void std::__function::__func<createClipAssetData(REAssetManager *,RETimelineDefinition *)::$_6,std::allocator<createClipAssetData(REAssetManager *,RETimelineDefinition *)::$_6>,void ()(re::TimelineAssetData *)>::operator()(_anonymous_namespace_ *a1, void (****a2)(_QWORD))
{
  void (***v2)(_QWORD);

  v2 = *a2;
  if (v2)
  {
    (**v2)(v2);
  }
}

uint64_t std::__function::__func<createClipAssetData(REAssetManager *,RETimelineDefinition *)::$_6,std::allocator<createClipAssetData(REAssetManager *,RETimelineDefinition *)::$_6>,void ()(re::TimelineAssetData *)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<createClipAssetData(REAssetManager *,RETimelineDefinition *)::$_6,std::allocator<createClipAssetData(REAssetManager *,RETimelineDefinition *)::$_6>,void ()(re::TimelineAssetData *)>::target_type()
{
}

void std::__function::__func<createClipAssetData(REAssetManager *,RETimelineDefinition *)::$_7,std::allocator<createClipAssetData(REAssetManager *,RETimelineDefinition *)::$_7>,void ()(re::TimelineAssetData *)>::~__func()
{
  JUMPOUT(0x2276933B8);
}

_QWORD *std::__function::__func<createClipAssetData(REAssetManager *,RETimelineDefinition *)::$_7,std::allocator<createClipAssetData(REAssetManager *,RETimelineDefinition *)::$_7>,void ()(re::TimelineAssetData *)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_24ED9A358;
  return result;
}

void std::__function::__func<createClipAssetData(REAssetManager *,RETimelineDefinition *)::$_7,std::allocator<createClipAssetData(REAssetManager *,RETimelineDefinition *)::$_7>,void ()(re::TimelineAssetData *)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_24ED9A358;
}

void std::__function::__func<createClipAssetData(REAssetManager *,RETimelineDefinition *)::$_7,std::allocator<createClipAssetData(REAssetManager *,RETimelineDefinition *)::$_7>,void ()(re::TimelineAssetData *)>::operator()(_anonymous_namespace_ *a1, void (****a2)(_QWORD))
{
  void (***v2)(_QWORD);

  v2 = *a2;
  if (v2)
  {
    (**v2)(v2);
  }
}

uint64_t std::__function::__func<createClipAssetData(REAssetManager *,RETimelineDefinition *)::$_7,std::allocator<createClipAssetData(REAssetManager *,RETimelineDefinition *)::$_7>,void ()(re::TimelineAssetData *)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<createClipAssetData(REAssetManager *,RETimelineDefinition *)::$_7,std::allocator<createClipAssetData(REAssetManager *,RETimelineDefinition *)::$_7>,void ()(re::TimelineAssetData *)>::target_type()
{
}

void std::__function::__func<createClipAssetData(REAssetManager *,RETimelineDefinition *)::$_8,std::allocator<createClipAssetData(REAssetManager *,RETimelineDefinition *)::$_8>,void ()(re::TimelineAssetData *)>::~__func()
{
  JUMPOUT(0x2276933B8);
}

_QWORD *std::__function::__func<createClipAssetData(REAssetManager *,RETimelineDefinition *)::$_8,std::allocator<createClipAssetData(REAssetManager *,RETimelineDefinition *)::$_8>,void ()(re::TimelineAssetData *)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_24ED9A3D8;
  return result;
}

void std::__function::__func<createClipAssetData(REAssetManager *,RETimelineDefinition *)::$_8,std::allocator<createClipAssetData(REAssetManager *,RETimelineDefinition *)::$_8>,void ()(re::TimelineAssetData *)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_24ED9A3D8;
}

void std::__function::__func<createClipAssetData(REAssetManager *,RETimelineDefinition *)::$_8,std::allocator<createClipAssetData(REAssetManager *,RETimelineDefinition *)::$_8>,void ()(re::TimelineAssetData *)>::operator()(_anonymous_namespace_ *a1, void (****a2)(_QWORD))
{
  void (***v2)(_QWORD);

  v2 = *a2;
  if (v2)
  {
    (**v2)(v2);
  }
}

uint64_t std::__function::__func<createClipAssetData(REAssetManager *,RETimelineDefinition *)::$_8,std::allocator<createClipAssetData(REAssetManager *,RETimelineDefinition *)::$_8>,void ()(re::TimelineAssetData *)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<createClipAssetData(REAssetManager *,RETimelineDefinition *)::$_8,std::allocator<createClipAssetData(REAssetManager *,RETimelineDefinition *)::$_8>,void ()(re::TimelineAssetData *)>::target_type()
{
}

void std::__function::__func<createClipAssetData(REAssetManager *,RETimelineDefinition *)::$_9,std::allocator<createClipAssetData(REAssetManager *,RETimelineDefinition *)::$_9>,void ()(re::TimelineAssetData *)>::~__func()
{
  JUMPOUT(0x2276933B8);
}

_QWORD *std::__function::__func<createClipAssetData(REAssetManager *,RETimelineDefinition *)::$_9,std::allocator<createClipAssetData(REAssetManager *,RETimelineDefinition *)::$_9>,void ()(re::TimelineAssetData *)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_24ED9A458;
  return result;
}

void std::__function::__func<createClipAssetData(REAssetManager *,RETimelineDefinition *)::$_9,std::allocator<createClipAssetData(REAssetManager *,RETimelineDefinition *)::$_9>,void ()(re::TimelineAssetData *)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_24ED9A458;
}

void std::__function::__func<createClipAssetData(REAssetManager *,RETimelineDefinition *)::$_9,std::allocator<createClipAssetData(REAssetManager *,RETimelineDefinition *)::$_9>,void ()(re::TimelineAssetData *)>::operator()(_anonymous_namespace_ *a1, void (****a2)(_QWORD))
{
  void (***v2)(_QWORD);

  v2 = *a2;
  if (v2)
  {
    (**v2)(v2);
  }
}

uint64_t std::__function::__func<createClipAssetData(REAssetManager *,RETimelineDefinition *)::$_9,std::allocator<createClipAssetData(REAssetManager *,RETimelineDefinition *)::$_9>,void ()(re::TimelineAssetData *)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<createClipAssetData(REAssetManager *,RETimelineDefinition *)::$_9,std::allocator<createClipAssetData(REAssetManager *,RETimelineDefinition *)::$_9>,void ()(re::TimelineAssetData *)>::target_type()
{
}

void re::make::shared::object<`anonymous namespace'::TimelineDefinition,re::AssetHandle &>(re *a1, const re::AssetHandle *a2)
{
  uint64_t *v4;
  uint64_t v5;
  _BYTE v6[24];

  v4 = re::globalAllocators(a1);
  v5 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v4[2] + 32))(v4[2], 112, 8);
  re::AssetHandle::AssetHandle((re::AssetHandle *)v6, a2);
  *(_QWORD *)a1 = v5;
  re::AssetHandle::~AssetHandle((re::AssetHandle *)v6);
}

void std::__function::__func<RETimelineDefinitionCreateTimelineGroup::$_0,std::allocator<RETimelineDefinitionCreateTimelineGroup::$_0>,void ()(re::TimelineAssetData *)>::~__func()
{
  JUMPOUT(0x2276933B8);
}

_QWORD *std::__function::__func<RETimelineDefinitionCreateTimelineGroup::$_0,std::allocator<RETimelineDefinitionCreateTimelineGroup::$_0>,void ()(re::TimelineAssetData *)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_24ED9A4D8;
  return result;
}

void std::__function::__func<RETimelineDefinitionCreateTimelineGroup::$_0,std::allocator<RETimelineDefinitionCreateTimelineGroup::$_0>,void ()(re::TimelineAssetData *)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_24ED9A4D8;
}

void std::__function::__func<RETimelineDefinitionCreateTimelineGroup::$_0,std::allocator<RETimelineDefinitionCreateTimelineGroup::$_0>,void ()(re::TimelineAssetData *)>::operator()(_anonymous_namespace_ *a1, void (****a2)(_QWORD))
{
  void (***v2)(_QWORD);

  v2 = *a2;
  if (v2)
  {
    (**v2)(v2);
  }
}

uint64_t std::__function::__func<RETimelineDefinitionCreateTimelineGroup::$_0,std::allocator<RETimelineDefinitionCreateTimelineGroup::$_0>,void ()(re::TimelineAssetData *)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<RETimelineDefinitionCreateTimelineGroup::$_0,std::allocator<RETimelineDefinitionCreateTimelineGroup::$_0>,void ()(re::TimelineAssetData *)>::target_type()
{
}

void std::__function::__func<RETimelineDefinitionCreateOrbitAnimation::$_0,std::allocator<RETimelineDefinitionCreateOrbitAnimation::$_0>,void ()(re::TimelineAssetData *)>::~__func()
{
  JUMPOUT(0x2276933B8);
}

_QWORD *std::__function::__func<RETimelineDefinitionCreateOrbitAnimation::$_0,std::allocator<RETimelineDefinitionCreateOrbitAnimation::$_0>,void ()(re::TimelineAssetData *)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_24ED9A558;
  return result;
}

void std::__function::__func<RETimelineDefinitionCreateOrbitAnimation::$_0,std::allocator<RETimelineDefinitionCreateOrbitAnimation::$_0>,void ()(re::TimelineAssetData *)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_24ED9A558;
}

void std::__function::__func<RETimelineDefinitionCreateOrbitAnimation::$_0,std::allocator<RETimelineDefinitionCreateOrbitAnimation::$_0>,void ()(re::TimelineAssetData *)>::operator()(_anonymous_namespace_ *a1, void (****a2)(_QWORD))
{
  void (***v2)(_QWORD);

  v2 = *a2;
  if (v2)
  {
    (**v2)(v2);
  }
}

uint64_t std::__function::__func<RETimelineDefinitionCreateOrbitAnimation::$_0,std::allocator<RETimelineDefinitionCreateOrbitAnimation::$_0>,void ()(re::TimelineAssetData *)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<RETimelineDefinitionCreateOrbitAnimation::$_0,std::allocator<RETimelineDefinitionCreateOrbitAnimation::$_0>,void ()(re::TimelineAssetData *)>::target_type()
{
}

void std::__function::__func<RETimelineDefinitionCreateFloatBlendTree::$_0,std::allocator<RETimelineDefinitionCreateFloatBlendTree::$_0>,void ()(re::TimelineAssetData *)>::~__func()
{
  JUMPOUT(0x2276933B8);
}

_QWORD *std::__function::__func<RETimelineDefinitionCreateFloatBlendTree::$_0,std::allocator<RETimelineDefinitionCreateFloatBlendTree::$_0>,void ()(re::TimelineAssetData *)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_24ED9A5D8;
  return result;
}

void std::__function::__func<RETimelineDefinitionCreateFloatBlendTree::$_0,std::allocator<RETimelineDefinitionCreateFloatBlendTree::$_0>,void ()(re::TimelineAssetData *)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_24ED9A5D8;
}

void std::__function::__func<RETimelineDefinitionCreateFloatBlendTree::$_0,std::allocator<RETimelineDefinitionCreateFloatBlendTree::$_0>,void ()(re::TimelineAssetData *)>::operator()(_anonymous_namespace_ *a1, void (****a2)(_QWORD))
{
  void (***v2)(_QWORD);

  v2 = *a2;
  if (v2)
  {
    (**v2)(v2);
  }
}

uint64_t std::__function::__func<RETimelineDefinitionCreateFloatBlendTree::$_0,std::allocator<RETimelineDefinitionCreateFloatBlendTree::$_0>,void ()(re::TimelineAssetData *)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<RETimelineDefinitionCreateFloatBlendTree::$_0,std::allocator<RETimelineDefinitionCreateFloatBlendTree::$_0>,void ()(re::TimelineAssetData *)>::target_type()
{
}

void TimelineDefinitionForBlendTree<float>::~TimelineDefinitionForBlendTree(_anonymous_namespace_::TimelineDefinition *a1)
{
  *(_QWORD *)a1 = &off_24ED9A658;
  re::AnimationBlendTreeBuilder<float>::~AnimationBlendTreeBuilder((uint64_t)a1 + 112);
}

{
  *(_QWORD *)a1 = &off_24ED9A658;
  re::AnimationBlendTreeBuilder<float>::~AnimationBlendTreeBuilder((uint64_t)a1 + 112);
  JUMPOUT(0x2276933B8);
}

void std::__function::__func<RETimelineDefinitionCreateDoubleBlendTree::$_0,std::allocator<RETimelineDefinitionCreateDoubleBlendTree::$_0>,void ()(re::TimelineAssetData *)>::~__func()
{
  JUMPOUT(0x2276933B8);
}

_QWORD *std::__function::__func<RETimelineDefinitionCreateDoubleBlendTree::$_0,std::allocator<RETimelineDefinitionCreateDoubleBlendTree::$_0>,void ()(re::TimelineAssetData *)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_24ED9A6A0;
  return result;
}

void std::__function::__func<RETimelineDefinitionCreateDoubleBlendTree::$_0,std::allocator<RETimelineDefinitionCreateDoubleBlendTree::$_0>,void ()(re::TimelineAssetData *)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_24ED9A6A0;
}

void std::__function::__func<RETimelineDefinitionCreateDoubleBlendTree::$_0,std::allocator<RETimelineDefinitionCreateDoubleBlendTree::$_0>,void ()(re::TimelineAssetData *)>::operator()(_anonymous_namespace_ *a1, void (****a2)(_QWORD))
{
  void (***v2)(_QWORD);

  v2 = *a2;
  if (v2)
  {
    (**v2)(v2);
  }
}

uint64_t std::__function::__func<RETimelineDefinitionCreateDoubleBlendTree::$_0,std::allocator<RETimelineDefinitionCreateDoubleBlendTree::$_0>,void ()(re::TimelineAssetData *)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<RETimelineDefinitionCreateDoubleBlendTree::$_0,std::allocator<RETimelineDefinitionCreateDoubleBlendTree::$_0>,void ()(re::TimelineAssetData *)>::target_type()
{
}

void TimelineDefinitionForBlendTree<double>::~TimelineDefinitionForBlendTree(_anonymous_namespace_::TimelineDefinition *a1)
{
  *(_QWORD *)a1 = &off_24ED9A720;
  re::AnimationBlendTreeBuilder<float>::~AnimationBlendTreeBuilder((uint64_t)a1 + 112);
}

{
  *(_QWORD *)a1 = &off_24ED9A720;
  re::AnimationBlendTreeBuilder<float>::~AnimationBlendTreeBuilder((uint64_t)a1 + 112);
  JUMPOUT(0x2276933B8);
}

void std::__function::__func<RETimelineDefinitionCreateFloat2BlendTree::$_0,std::allocator<RETimelineDefinitionCreateFloat2BlendTree::$_0>,void ()(re::TimelineAssetData *)>::~__func()
{
  JUMPOUT(0x2276933B8);
}

_QWORD *std::__function::__func<RETimelineDefinitionCreateFloat2BlendTree::$_0,std::allocator<RETimelineDefinitionCreateFloat2BlendTree::$_0>,void ()(re::TimelineAssetData *)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_24ED9A768;
  return result;
}

void std::__function::__func<RETimelineDefinitionCreateFloat2BlendTree::$_0,std::allocator<RETimelineDefinitionCreateFloat2BlendTree::$_0>,void ()(re::TimelineAssetData *)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_24ED9A768;
}

void std::__function::__func<RETimelineDefinitionCreateFloat2BlendTree::$_0,std::allocator<RETimelineDefinitionCreateFloat2BlendTree::$_0>,void ()(re::TimelineAssetData *)>::operator()(_anonymous_namespace_ *a1, void (****a2)(_QWORD))
{
  void (***v2)(_QWORD);

  v2 = *a2;
  if (v2)
  {
    (**v2)(v2);
  }
}

uint64_t std::__function::__func<RETimelineDefinitionCreateFloat2BlendTree::$_0,std::allocator<RETimelineDefinitionCreateFloat2BlendTree::$_0>,void ()(re::TimelineAssetData *)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<RETimelineDefinitionCreateFloat2BlendTree::$_0,std::allocator<RETimelineDefinitionCreateFloat2BlendTree::$_0>,void ()(re::TimelineAssetData *)>::target_type()
{
}

void TimelineDefinitionForBlendTree<re::Vector2<float>>::~TimelineDefinitionForBlendTree(_anonymous_namespace_::TimelineDefinition *a1)
{
  *(_QWORD *)a1 = &off_24ED9A7E8;
  re::AnimationBlendTreeBuilder<float>::~AnimationBlendTreeBuilder((uint64_t)a1 + 112);
}

{
  *(_QWORD *)a1 = &off_24ED9A7E8;
  re::AnimationBlendTreeBuilder<float>::~AnimationBlendTreeBuilder((uint64_t)a1 + 112);
  JUMPOUT(0x2276933B8);
}

void std::__function::__func<RETimelineDefinitionCreateFloat3BlendTree::$_0,std::allocator<RETimelineDefinitionCreateFloat3BlendTree::$_0>,void ()(re::TimelineAssetData *)>::~__func()
{
  JUMPOUT(0x2276933B8);
}

_QWORD *std::__function::__func<RETimelineDefinitionCreateFloat3BlendTree::$_0,std::allocator<RETimelineDefinitionCreateFloat3BlendTree::$_0>,void ()(re::TimelineAssetData *)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_24ED9A830;
  return result;
}

void std::__function::__func<RETimelineDefinitionCreateFloat3BlendTree::$_0,std::allocator<RETimelineDefinitionCreateFloat3BlendTree::$_0>,void ()(re::TimelineAssetData *)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_24ED9A830;
}

void std::__function::__func<RETimelineDefinitionCreateFloat3BlendTree::$_0,std::allocator<RETimelineDefinitionCreateFloat3BlendTree::$_0>,void ()(re::TimelineAssetData *)>::operator()(_anonymous_namespace_ *a1, void (****a2)(_QWORD))
{
  void (***v2)(_QWORD);

  v2 = *a2;
  if (v2)
  {
    (**v2)(v2);
  }
}

uint64_t std::__function::__func<RETimelineDefinitionCreateFloat3BlendTree::$_0,std::allocator<RETimelineDefinitionCreateFloat3BlendTree::$_0>,void ()(re::TimelineAssetData *)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<RETimelineDefinitionCreateFloat3BlendTree::$_0,std::allocator<RETimelineDefinitionCreateFloat3BlendTree::$_0>,void ()(re::TimelineAssetData *)>::target_type()
{
}

void TimelineDefinitionForBlendTree<re::Vector3<float>>::~TimelineDefinitionForBlendTree(_anonymous_namespace_::TimelineDefinition *a1)
{
  *(_QWORD *)a1 = &off_24ED9A8B0;
  re::AnimationBlendTreeBuilder<float>::~AnimationBlendTreeBuilder((uint64_t)a1 + 112);
}

{
  *(_QWORD *)a1 = &off_24ED9A8B0;
  re::AnimationBlendTreeBuilder<float>::~AnimationBlendTreeBuilder((uint64_t)a1 + 112);
  JUMPOUT(0x2276933B8);
}

void std::__function::__func<RETimelineDefinitionCreateFloat4BlendTree::$_0,std::allocator<RETimelineDefinitionCreateFloat4BlendTree::$_0>,void ()(re::TimelineAssetData *)>::~__func()
{
  JUMPOUT(0x2276933B8);
}

_QWORD *std::__function::__func<RETimelineDefinitionCreateFloat4BlendTree::$_0,std::allocator<RETimelineDefinitionCreateFloat4BlendTree::$_0>,void ()(re::TimelineAssetData *)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_24ED9A8F8;
  return result;
}

void std::__function::__func<RETimelineDefinitionCreateFloat4BlendTree::$_0,std::allocator<RETimelineDefinitionCreateFloat4BlendTree::$_0>,void ()(re::TimelineAssetData *)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_24ED9A8F8;
}

void std::__function::__func<RETimelineDefinitionCreateFloat4BlendTree::$_0,std::allocator<RETimelineDefinitionCreateFloat4BlendTree::$_0>,void ()(re::TimelineAssetData *)>::operator()(_anonymous_namespace_ *a1, void (****a2)(_QWORD))
{
  void (***v2)(_QWORD);

  v2 = *a2;
  if (v2)
  {
    (**v2)(v2);
  }
}

uint64_t std::__function::__func<RETimelineDefinitionCreateFloat4BlendTree::$_0,std::allocator<RETimelineDefinitionCreateFloat4BlendTree::$_0>,void ()(re::TimelineAssetData *)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<RETimelineDefinitionCreateFloat4BlendTree::$_0,std::allocator<RETimelineDefinitionCreateFloat4BlendTree::$_0>,void ()(re::TimelineAssetData *)>::target_type()
{
}

void TimelineDefinitionForBlendTree<re::Vector4<float>>::~TimelineDefinitionForBlendTree(_anonymous_namespace_::TimelineDefinition *a1)
{
  *(_QWORD *)a1 = &off_24ED9A978;
  re::AnimationBlendTreeBuilder<float>::~AnimationBlendTreeBuilder((uint64_t)a1 + 112);
}

{
  *(_QWORD *)a1 = &off_24ED9A978;
  re::AnimationBlendTreeBuilder<float>::~AnimationBlendTreeBuilder((uint64_t)a1 + 112);
  JUMPOUT(0x2276933B8);
}

void std::__function::__func<RETimelineDefinitionCreateQuaternionBlendTree::$_0,std::allocator<RETimelineDefinitionCreateQuaternionBlendTree::$_0>,void ()(re::TimelineAssetData *)>::~__func()
{
  JUMPOUT(0x2276933B8);
}

_QWORD *std::__function::__func<RETimelineDefinitionCreateQuaternionBlendTree::$_0,std::allocator<RETimelineDefinitionCreateQuaternionBlendTree::$_0>,void ()(re::TimelineAssetData *)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_24ED9A9C0;
  return result;
}

void std::__function::__func<RETimelineDefinitionCreateQuaternionBlendTree::$_0,std::allocator<RETimelineDefinitionCreateQuaternionBlendTree::$_0>,void ()(re::TimelineAssetData *)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_24ED9A9C0;
}

void std::__function::__func<RETimelineDefinitionCreateQuaternionBlendTree::$_0,std::allocator<RETimelineDefinitionCreateQuaternionBlendTree::$_0>,void ()(re::TimelineAssetData *)>::operator()(_anonymous_namespace_ *a1, void (****a2)(_QWORD))
{
  void (***v2)(_QWORD);

  v2 = *a2;
  if (v2)
  {
    (**v2)(v2);
  }
}

uint64_t std::__function::__func<RETimelineDefinitionCreateQuaternionBlendTree::$_0,std::allocator<RETimelineDefinitionCreateQuaternionBlendTree::$_0>,void ()(re::TimelineAssetData *)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<RETimelineDefinitionCreateQuaternionBlendTree::$_0,std::allocator<RETimelineDefinitionCreateQuaternionBlendTree::$_0>,void ()(re::TimelineAssetData *)>::target_type()
{
}

void TimelineDefinitionForBlendTree<re::Quaternion<float>>::~TimelineDefinitionForBlendTree(_anonymous_namespace_::TimelineDefinition *a1)
{
  *(_QWORD *)a1 = &off_24ED9AA40;
  re::AnimationBlendTreeBuilder<float>::~AnimationBlendTreeBuilder((uint64_t)a1 + 112);
}

{
  *(_QWORD *)a1 = &off_24ED9AA40;
  re::AnimationBlendTreeBuilder<float>::~AnimationBlendTreeBuilder((uint64_t)a1 + 112);
  JUMPOUT(0x2276933B8);
}

void std::__function::__func<RETimelineDefinitionCreateSRTBlendTree::$_0,std::allocator<RETimelineDefinitionCreateSRTBlendTree::$_0>,void ()(re::TimelineAssetData *)>::~__func()
{
  JUMPOUT(0x2276933B8);
}

_QWORD *std::__function::__func<RETimelineDefinitionCreateSRTBlendTree::$_0,std::allocator<RETimelineDefinitionCreateSRTBlendTree::$_0>,void ()(re::TimelineAssetData *)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_24ED9AA88;
  return result;
}

void std::__function::__func<RETimelineDefinitionCreateSRTBlendTree::$_0,std::allocator<RETimelineDefinitionCreateSRTBlendTree::$_0>,void ()(re::TimelineAssetData *)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_24ED9AA88;
}

void std::__function::__func<RETimelineDefinitionCreateSRTBlendTree::$_0,std::allocator<RETimelineDefinitionCreateSRTBlendTree::$_0>,void ()(re::TimelineAssetData *)>::operator()(_anonymous_namespace_ *a1, void (****a2)(_QWORD))
{
  void (***v2)(_QWORD);

  v2 = *a2;
  if (v2)
  {
    (**v2)(v2);
  }
}

uint64_t std::__function::__func<RETimelineDefinitionCreateSRTBlendTree::$_0,std::allocator<RETimelineDefinitionCreateSRTBlendTree::$_0>,void ()(re::TimelineAssetData *)>::target(uint64_t a1, uint64_t a2)
{
    return a1 + 8;
  else
    return 0;
}

void *std::__function::__func<RETimelineDefinitionCreateSRTBlendTree::$_0,std::allocator<RETimelineDefinitionCreateSRTBlendTree::$_0>,void ()(re::TimelineAssetData *)>::target_type()
{
}

void TimelineDefinitionForBlendTree<re::GenericSRT<float>>::~TimelineDefinitionForBlendTree(_anonymous_namespace_::TimelineDefinition *a1)
{
  *(_QWORD *)a1 = &off_24ED9AB08;
  re::AnimationBlendTreeBuilder<float>::~AnimationBlendTreeBuilder((uint64_t)a1 + 112);
}

{
  *(_QWORD *)a1 = &off_24ED9AB08;
  re::AnimationBlendTreeBuilder<float>::~AnimationBlendTreeBuilder((uint64_t)a1 + 112);
  JUMPOUT(0x2276933B8);
}

void std::__function::__func<RETimelineDefinitionCreateSkeletalPoseBlendTree::$_0,std::allocator<RETimelineDefinitionCreateSkeletalPoseBlendTree::$_0>,void ()(re::TimelineAssetData *)>::~__func()
{
  JUMPOUT(0x2276933B8);
}

_QWORD *std::__function::__func<RETimelineDefinitionCreateSkeletalPoseBlendTree::$_0,std::allocator<RETimelineDefinitionCreateSkeletalPoseBlendTree::$_0>,void ()(re::TimelineAssetData *)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_24ED9AB50;
  return result;
}

void std::__function::__func<RETimelineDefinitionCreateSkeletalPoseBlendTree::$_0,std::allocator<RETimelineDefinitionCreateSkeletalPoseBlendTree::$_0>,void ()(re::TimelineAssetData *)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_24ED9AB50;
}

void std::__function::__func<RETimelineDefinitionCreateSkeletalPoseBlendTree::$_0,std::allocator<RETimelineDefinitionCreateSkeletalPoseBlendTree::$_0>,void ()(re::TimelineAssetData *)>::operator()(_anonymous_namespace_ *a1, void (****a2)(_QWORD))
{
  void (***v2)(_QWORD);

  v2 = *a2;
  if (v2)
  {
    (**v2)(v2);
  }
}

uint64_t std::__function::__func<RETimelineDefinitionCreateSkeletalPoseBlendTree::$_0,std::allocator<RETimelineDefinitionCreateSkeletalPoseBlendTree::$_0>,void ()(re::TimelineAssetData *)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<RETimelineDefinitionCreateSkeletalPoseBlendTree::$_0,std::allocator<RETimelineDefinitionCreateSkeletalPoseBlendTree::$_0>,void ()(re::TimelineAssetData *)>::target_type()
{
}

void TimelineDefinitionForBlendTree<re::SkeletalPose>::~TimelineDefinitionForBlendTree(_anonymous_namespace_::TimelineDefinition *a1)
{
  *(_QWORD *)a1 = &off_24ED9ABD0;
  re::AnimationBlendTreeBuilder<float>::~AnimationBlendTreeBuilder((uint64_t)a1 + 112);
}

{
  *(_QWORD *)a1 = &off_24ED9ABD0;
  re::AnimationBlendTreeBuilder<float>::~AnimationBlendTreeBuilder((uint64_t)a1 + 112);
  JUMPOUT(0x2276933B8);
}

uint64_t re::AnimationBlendTreeBuilder<float>::addRigNode(uint64_t a1, const StringID *a2, StringID *a3, const StringID *a4, float a5)
{
  _anonymous_namespace_ *v9;
  float v11[4];
  _BYTE v12[16];
  _QWORD v13[2];
  _QWORD v14[2];
  _DWORD v15[6];

  v9 = *(_anonymous_namespace_ **)(a1 + 392);
  re::StringID::StringID((re::StringID *)v11, a3);
  re::StringID::StringID((re::StringID *)v12, a2);
  v13[0] = 0;
  v13[1] = &str_110;
  v14[0] = 0;
  v14[1] = &str_110;
  re::StringID::StringID((re::StringID *)v15, a4);
  *(float *)&v15[4] = a5;
  re::DynamicArray<re::AnimationBlendTreeNodeDescription>::add(v9, v11);
  re::StringID::destroyString((re::StringID *)v15);
  re::StringID::destroyString((re::StringID *)v14);
  re::StringID::destroyString((re::StringID *)v13);
  re::StringID::destroyString((re::StringID *)v12);
  re::StringID::destroyString((re::StringID *)v11);
  return *(_QWORD *)(*(_QWORD *)(a1 + 392) + 16) - 1;
}

uint64_t re::AnimationBlendTreeBuilder<float>::addClip(uint64_t a1, const StringID *a2, const StringID *a3, const StringID *a4, float a5)
{
  _anonymous_namespace_ *v10;
  char *var1;
  float v13[4];
  _QWORD v14[2];
  _BYTE v15[16];
  _QWORD v16[2];
  _DWORD v17[6];

  v10 = *(_anonymous_namespace_ **)(a1 + 392);
  re::StringID::StringID((re::StringID *)v13, a2);
  v14[0] = 4206304;
  v14[1] = "Clip";
  if (*(_QWORD *)&a4->var0 <= 1uLL)
  {
    var1 = a4->var1;
    if (var1)
    {
      if (!*var1)
        a4 = a2;
    }
  }
  re::StringID::StringID((re::StringID *)v15, a4);
  v16[0] = 0;
  v16[1] = &str_110;
  re::StringID::StringID((re::StringID *)v17, a3);
  *(float *)&v17[4] = a5;
  re::DynamicArray<re::AnimationBlendTreeNodeDescription>::add(v10, v13);
  re::StringID::destroyString((re::StringID *)v17);
  re::StringID::destroyString((re::StringID *)v16);
  re::StringID::destroyString((re::StringID *)v15);
  re::StringID::destroyString((re::StringID *)v14);
  re::StringID::destroyString((re::StringID *)v13);
  return *(_QWORD *)(*(_QWORD *)(a1 + 392) + 16) - 1;
}

uint64_t re::AnimationBlendTreeBuilder<float>::addConnection(uint64_t a1, const StringID *a2, const StringID *a3, const StringID *a4, const StringID *a5)
{
  _QWORD *v8;
  uint64_t v11[2];
  _BYTE v12[16];
  _BYTE v13[16];
  _BYTE v14[16];
  _BYTE v15[16];
  _BYTE v16[16];
  _BYTE v17[16];
  _BYTE v18[16];
  _BYTE v19[16];
  _BYTE v20[24];

  v8 = (_QWORD *)(*(_QWORD *)(a1 + 392) + 40);
  re::StringID::StringID((re::StringID *)v11, a2);
  re::StringID::invalid((re::StringID *)v12);
  re::StringID::StringID((re::StringID *)v13, a4);
  re::StringID::invalid((re::StringID *)v14);
  re::StringID::invalid((re::StringID *)v15);
  re::StringID::StringID((re::StringID *)v16, a3);
  re::StringID::invalid((re::StringID *)v17);
  re::StringID::StringID((re::StringID *)v18, a5);
  re::StringID::invalid((re::StringID *)v19);
  re::StringID::invalid((re::StringID *)v20);
  re::DynamicArray<re::RigGraphConnection>::add(v8, v11);
  re::StringID::destroyString((re::StringID *)v20);
  re::StringID::destroyString((re::StringID *)v19);
  re::StringID::destroyString((re::StringID *)v18);
  re::StringID::destroyString((re::StringID *)v17);
  re::StringID::destroyString((re::StringID *)v16);
  re::StringID::destroyString((re::StringID *)v15);
  re::StringID::destroyString((re::StringID *)v14);
  re::StringID::destroyString((re::StringID *)v13);
  re::StringID::destroyString((re::StringID *)v12);
  re::StringID::destroyString((re::StringID *)v11);
  return *(_QWORD *)(*(_QWORD *)(a1 + 392) + 56) - 1;
}

void std::__function::__func<RETimelineDefinitionCreateTypedEventTimeline::$_0,std::allocator<RETimelineDefinitionCreateTypedEventTimeline::$_0>,void ()(re::TimelineAssetData *)>::~__func()
{
  JUMPOUT(0x2276933B8);
}

_QWORD *std::__function::__func<RETimelineDefinitionCreateTypedEventTimeline::$_0,std::allocator<RETimelineDefinitionCreateTypedEventTimeline::$_0>,void ()(re::TimelineAssetData *)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_24ED9AC18;
  return result;
}

void std::__function::__func<RETimelineDefinitionCreateTypedEventTimeline::$_0,std::allocator<RETimelineDefinitionCreateTypedEventTimeline::$_0>,void ()(re::TimelineAssetData *)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_24ED9AC18;
}

void std::__function::__func<RETimelineDefinitionCreateTypedEventTimeline::$_0,std::allocator<RETimelineDefinitionCreateTypedEventTimeline::$_0>,void ()(re::TimelineAssetData *)>::operator()(_anonymous_namespace_ *a1, void (****a2)(_QWORD))
{
  void (***v2)(_QWORD);

  v2 = *a2;
  if (v2)
  {
    (**v2)(v2);
  }
}

uint64_t std::__function::__func<RETimelineDefinitionCreateTypedEventTimeline::$_0,std::allocator<RETimelineDefinitionCreateTypedEventTimeline::$_0>,void ()(re::TimelineAssetData *)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<RETimelineDefinitionCreateTypedEventTimeline::$_0,std::allocator<RETimelineDefinitionCreateTypedEventTimeline::$_0>,void ()(re::TimelineAssetData *)>::target_type()
{
}

uint64_t re::EventParameterArray<re::FixedArray<unsigned char>>::parameter(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  unint64_t v3;

  v3 = a3 + *a1 * a2;
  if (a1[3] <= v3)
  {
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  return a1[5] + 24 * v3;
}

uint64_t re::EventParameterArray<re::ObjCObject>::parameter(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  unint64_t v3;

  v3 = a3 + *a1 * a2;
  if (a1[3] <= v3)
  {
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  return a1[5] + 8 * v3;
}

uint64_t re::EventParameterArray<int>::parameter(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  unint64_t v3;

  v3 = a3 + *a1 * a2;
  if (a1[3] <= v3)
  {
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  return a1[5] + 4 * v3;
}

void std::__function::__func<RETimelineDefinitionCreateAudioAnimation::$_0,std::allocator<RETimelineDefinitionCreateAudioAnimation::$_0>,void ()(re::TimelineAssetData *)>::~__func()
{
  JUMPOUT(0x2276933B8);
}

_QWORD *std::__function::__func<RETimelineDefinitionCreateAudioAnimation::$_0,std::allocator<RETimelineDefinitionCreateAudioAnimation::$_0>,void ()(re::TimelineAssetData *)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_24ED9AC98;
  return result;
}

void std::__function::__func<RETimelineDefinitionCreateAudioAnimation::$_0,std::allocator<RETimelineDefinitionCreateAudioAnimation::$_0>,void ()(re::TimelineAssetData *)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_24ED9AC98;
}

void std::__function::__func<RETimelineDefinitionCreateAudioAnimation::$_0,std::allocator<RETimelineDefinitionCreateAudioAnimation::$_0>,void ()(re::TimelineAssetData *)>::operator()(_anonymous_namespace_ *a1, void (****a2)(_QWORD))
{
  void (***v2)(_QWORD);

  v2 = *a2;
  if (v2)
  {
    (**v2)(v2);
  }
}

uint64_t std::__function::__func<RETimelineDefinitionCreateAudioAnimation::$_0,std::allocator<RETimelineDefinitionCreateAudioAnimation::$_0>,void ()(re::TimelineAssetData *)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<RETimelineDefinitionCreateAudioAnimation::$_0,std::allocator<RETimelineDefinitionCreateAudioAnimation::$_0>,void ()(re::TimelineAssetData *)>::target_type()
{
}

void std::__function::__func<RETimelineDefinitionCreateEasingFunctionEx::$_0,std::allocator<RETimelineDefinitionCreateEasingFunctionEx::$_0>,void ()(re::EasingFunction *)>::~__func()
{
  JUMPOUT(0x2276933B8);
}

_QWORD *std::__function::__func<RETimelineDefinitionCreateEasingFunctionEx::$_0,std::allocator<RETimelineDefinitionCreateEasingFunctionEx::$_0>,void ()(re::EasingFunction *)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_24ED9AD18;
  return result;
}

void std::__function::__func<RETimelineDefinitionCreateEasingFunctionEx::$_0,std::allocator<RETimelineDefinitionCreateEasingFunctionEx::$_0>,void ()(re::EasingFunction *)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_24ED9AD18;
}

re *std::__function::__func<RETimelineDefinitionCreateEasingFunctionEx::$_0,std::allocator<RETimelineDefinitionCreateEasingFunctionEx::$_0>,void ()(re::EasingFunction *)>::operator()(re *result, void (****a2)(_QWORD))
{
  void (***v2)(_QWORD);
  uint64_t v3;

  v2 = *a2;
  if (*a2)
  {
    v3 = re::globalAllocators(result)[2];
    (**v2)(v2);
    return (re *)(*(uint64_t (**)(uint64_t, void (***)(_QWORD)))(*(_QWORD *)v3 + 40))(v3, v2);
  }
  return result;
}

uint64_t std::__function::__func<RETimelineDefinitionCreateEasingFunctionEx::$_0,std::allocator<RETimelineDefinitionCreateEasingFunctionEx::$_0>,void ()(re::EasingFunction *)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<RETimelineDefinitionCreateEasingFunctionEx::$_0,std::allocator<RETimelineDefinitionCreateEasingFunctionEx::$_0>,void ()(re::EasingFunction *)>::target_type()
{
}

_anonymous_namespace_ *re::Shareable<std::unique_ptr<re::EasingFunction,std::function<void ()(re::EasingFunction*)>>>::Shareable<std::unique_ptr<re::EasingFunction,std::function<void ()(re::EasingFunction*)>>>(_anonymous_namespace_ *a1, uint64_t *a2)
{
  ArcSharedObject::ArcSharedObject(a1, 0);
  *(_QWORD *)a1 = &off_24ED9ADA8;
  std::unique_ptr<void,std::function<void ()(void *)>>::unique_ptr[abi:nn180100]((_QWORD *)a1 + 3, a2);
  return a1;
}

_QWORD *re::Shareable<std::unique_ptr<re::EasingFunction,std::function<void ()(re::EasingFunction*)>>>::~Shareable(_QWORD *a1)
{
  *a1 = &off_24ED9ADA8;
  std::unique_ptr<re::RigHierarchy,std::function<void ()(re::RigHierarchy*)>>::~unique_ptr[abi:nn180100](a1 + 3);
  *a1 = &off_24ED426B8;
  objc_destructInstance(a1 + 1);
  return a1;
}

void re::Shareable<std::unique_ptr<re::EasingFunction,std::function<void ()(re::EasingFunction*)>>>::~Shareable(_QWORD *a1)
{
  *a1 = &off_24ED9ADA8;
  std::unique_ptr<re::RigHierarchy,std::function<void ()(re::RigHierarchy*)>>::~unique_ptr[abi:nn180100](a1 + 3);
  *a1 = &off_24ED426B8;
  objc_destructInstance(a1 + 1);
  JUMPOUT(0x2276933B8);
}

void RERenderGraphEmitterAssetRegisterProviders(re *a1, uint64_t a2)
{
  unsigned int v3;
  uint64_t v4;
  unsigned __int8 v5;
  NSObject *v6;
  uint64_t v7;
  uint64_t v8;

  if (*(_QWORD *)(a2 + 104))
  {
    re::AssetAPIHelper::assetHandleCreate((uint64_t)a1, &v7);
    re::AssetHandle::loadNow(v8, 0);
    if (v8)
    {
      v3 = atomic_load((unsigned int *)(v8 + 704));
      if (v3 == 2)
      {
        ++*(_DWORD *)(v8 + 260);
        v4 = re::AssetHandle::loadedAsset<re::RenderGraphEmitterAsset>((re::RenderGraphEmitterAsset *)&v7);
        if (v4)
          (*(void (**)(_QWORD, _QWORD, _QWORD))(**(_QWORD **)(v4 + 16) + 16))(*(_QWORD *)(v4 + 16), *(_QWORD *)(*(_QWORD *)(a2 + 104) + 296), *(_QWORD *)(v4 + 24));
      }
    }
    re::AssetHandle::~AssetHandle((re::AssetHandle *)&v7);
  }
  else
  {
    do
      v5 = __ldaxr((unsigned __int8 *)&RERenderGraphEmitterAssetRegisterProviders::__FILE____LINE___logged);
    while (__stlxr(1u, (unsigned __int8 *)&RERenderGraphEmitterAssetRegisterProviders::__FILE____LINE___logged));
    if ((v5 & 1) == 0)
    {
      v6 = *re::graphicsLogObjects(a1);
      if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
      {
        LOWORD(v7) = 0;
        _os_log_impl(&dword_224FE9000, v6, OS_LOG_TYPE_DEFAULT, "Tried to call RERenderGraphEmitterAssetRegisterProviders, but DrawingManager was null!", (uint8_t *)&v7, 2u);
      }
    }
  }
}

void RERenderGraphEmitterAssetUnregisterProviders(re *a1, uint64_t a2)
{
  uint64_t v3;
  unsigned __int8 v4;
  NSObject *v5;
  uint64_t v6[4];

  if (*(_QWORD *)(a2 + 104))
  {
    re::AssetAPIHelper::assetHandleCreate((uint64_t)a1, v6);
    v3 = re::AssetHandle::asset<re::RenderGraphEmitterAsset>((re::RenderGraphEmitterAsset *)v6);
    if (v3)
      (*(void (**)(_QWORD, _QWORD))(**(_QWORD **)(v3 + 16) + 24))(*(_QWORD *)(v3 + 16), *(_QWORD *)(*(_QWORD *)(a2 + 104) + 296));
    re::AssetHandle::~AssetHandle((re::AssetHandle *)v6);
  }
  else
  {
    do
      v4 = __ldaxr((unsigned __int8 *)&RERenderGraphEmitterAssetUnregisterProviders::__FILE____LINE___logged);
    while (__stlxr(1u, (unsigned __int8 *)&RERenderGraphEmitterAssetUnregisterProviders::__FILE____LINE___logged));
    if ((v4 & 1) == 0)
    {
      v5 = *re::graphicsLogObjects(a1);
      if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
      {
        LOWORD(v6[0]) = 0;
        _os_log_impl(&dword_224FE9000, v5, OS_LOG_TYPE_DEFAULT, "Tried to call RERenderGraphEmitterAssetUnregisterProviders, but DrawingManager was null!", (uint8_t *)v6, 2u);
      }
    }
  }
}

uint64_t re::AssetHandle::asset<re::RenderGraphEmitterAsset>(re::RenderGraphEmitterAsset *a1)
{
  uint64_t *v2;
  uint64_t v3;
  NSObject *v4;
  NSObject *v6;
  _QWORD *v7;
  char *v8;
  int v9;
  char *v10;
  uint64_t v11;

  v11 = *MEMORY[0x24BDAC8D0];
  v2 = re::RenderGraphEmitterAsset::assetType(a1);
  v3 = re::AssetHandle::assetWithType(a1, (const re::AssetType *)v2, 0);
  if (!v3)
  {
    v4 = *re::assetsLogObjects(0);
    if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
    {
      v6 = v4;
      v7 = re::AssetHandle::assetInfo(a1);
      if ((v7[17] & 1) != 0)
        v8 = (char *)v7[18];
      else
        v8 = (char *)v7 + 137;
      v9 = 136315138;
      v10 = v8;
      _os_log_error_impl(&dword_224FE9000, v6, OS_LOG_TYPE_ERROR, "Invalid asset: '%s'", (uint8_t *)&v9, 0xCu);

    }
  }
  return v3;
}

void RERenderGraphEmitterAssetExecute(re *a1, uint64_t a2)
{
  unsigned int v3;
  uint64_t v4;
  unsigned __int8 v5;
  NSObject *v6;
  uint64_t v7;
  uint64_t v8;

  if (*(_QWORD *)(a2 + 104))
  {
    re::AssetAPIHelper::assetHandleCreate((uint64_t)a1, &v7);
    re::AssetHandle::loadNow(v8, 0);
    if (v8)
    {
      v3 = atomic_load((unsigned int *)(v8 + 704));
      if (v3 == 2)
      {
        ++*(_DWORD *)(v8 + 260);
        v4 = re::AssetHandle::loadedAsset<re::RenderGraphEmitterAsset>((re::RenderGraphEmitterAsset *)&v7);
        if (v4)
          (*(void (**)(_QWORD, uint64_t))(**(_QWORD **)(v4 + 16) + 32))(*(_QWORD *)(v4 + 16), a2);
      }
    }
    re::AssetHandle::~AssetHandle((re::AssetHandle *)&v7);
  }
  else
  {
    do
      v5 = __ldaxr((unsigned __int8 *)&RERenderGraphEmitterAssetExecute::__FILE____LINE___logged);
    while (__stlxr(1u, (unsigned __int8 *)&RERenderGraphEmitterAssetExecute::__FILE____LINE___logged));
    if ((v5 & 1) == 0)
    {
      v6 = *re::graphicsLogObjects(a1);
      if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
      {
        LOWORD(v7) = 0;
        _os_log_impl(&dword_224FE9000, v6, OS_LOG_TYPE_DEFAULT, "Tried to call RERenderGraphEmitterAssetExecute, but DrawingManager was null!", (uint8_t *)&v7, 2u);
      }
    }
  }
}

void RERenderGraphEmitterAssetExecuteWorkload(re *a1, uint64_t a2, uint64_t a3)
{
  unsigned int v5;
  uint64_t v6;
  unsigned __int8 v7;
  NSObject *v8;
  uint64_t v9;
  uint64_t v10;

  if (*(_QWORD *)(a2 + 104))
  {
    re::AssetAPIHelper::assetHandleCreate((uint64_t)a1, &v9);
    re::AssetHandle::loadNow(v10, 0);
    if (v10)
    {
      v5 = atomic_load((unsigned int *)(v10 + 704));
      if (v5 == 2)
      {
        ++*(_DWORD *)(v10 + 260);
        v6 = re::AssetHandle::loadedAsset<re::RenderGraphEmitterAsset>((re::RenderGraphEmitterAsset *)&v9);
        if (v6)
          (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(v6 + 16) + 40))(*(_QWORD *)(v6 + 16), a2, a3);
      }
    }
    re::AssetHandle::~AssetHandle((re::AssetHandle *)&v9);
  }
  else
  {
    do
      v7 = __ldaxr(RERenderGraphEmitterAssetExecuteWorkload::__FILE____LINE___logged);
    while (__stlxr(1u, RERenderGraphEmitterAssetExecuteWorkload::__FILE____LINE___logged));
    if ((v7 & 1) == 0)
    {
      v8 = *re::graphicsLogObjects(a1);
      if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
      {
        LOWORD(v9) = 0;
        _os_log_impl(&dword_224FE9000, v8, OS_LOG_TYPE_DEFAULT, "Tried to call RERenderGraphEmitterAssetExecute, but DrawingManager was null!", (uint8_t *)&v9, 2u);
      }
    }
  }
}

void RERenderGraphEmitterAssetSetRuntimeSetting(uint64_t a1, const char *a2, char *a3)
{
  uint64_t v5;
  re::BindNode **v6;
  unsigned __int8 v7;
  __guard *v8;
  unsigned __int8 v9;
  __objc2_class_ro **p_info;
  unsigned __int8 v11;
  __objc2_class_ro **v12;
  unsigned __int8 v13;
  __guard *v14;
  unsigned __int8 v15;
  __guard *v16;
  __objc2_class_ro *v17;
  __objc2_class_ro *v18;
  __objc2_class_ro *v19;
  __objc2_class_ro *v20;
  int v21;
  const re::IntrospectionBase *v22;
  int v23;
  const re::IntrospectionBase *v24;
  int v25;
  const re::IntrospectionBase *v26;
  int v27;
  const re::IntrospectionBase *v28;
  int v29;
  const re::IntrospectionBase *v30;
  uint64_t v31[3];

  re::AssetAPIHelper::assetHandleCreate(a1, v31);
  v5 = re::AssetHandle::asset<re::RenderGraphEmitterAsset>((re::RenderGraphEmitterAsset *)v31);
  if (v5)
  {
    v6 = *(re::BindNode ***)(v5 + 16);
    if ((v7 & 1) == 0)
    {
      if (v21)
      {
        re::introspect<BOOL>(void)::info = re::introspect_BOOL(0, v22);
      }
    }
    if ((re::RenderGraphEmitterBase::setRuntimeSetting(v6, (const re::IntrospectionBase *)v8[331], a2, a3) & 1) == 0)
    {
      p_info = VideoSpillMapMetalSession.info;
      if ((v9 & 1) == 0)
      {
        p_info = (__objc2_class_ro **)(VideoSpillMapMetalSession + 32);
        if (v23)
        {
          re::introspect<double>(void)::info = (uint64_t)re::introspect_double(0, v24);
          p_info = (__objc2_class_ro **)(VideoSpillMapMetalSession + 32);
        }
      }
      if ((re::RenderGraphEmitterBase::setRuntimeSetting(v6, (const re::IntrospectionBase *)p_info[9], a2, a3) & 1) == 0)
      {
        v12 = VideoSpillMapMetalSession.info;
        if ((v11 & 1) == 0)
        {
          v12 = (__objc2_class_ro **)(VideoSpillMapMetalSession + 32);
          if (v25)
          {
            re::introspect<float>(void)::info = re::introspect_float(0, v26);
            v12 = (__objc2_class_ro **)(VideoSpillMapMetalSession + 32);
          }
        }
        if ((re::RenderGraphEmitterBase::setRuntimeSetting(v6, (const re::IntrospectionBase *)v12[7], a2, a3) & 1) == 0)
        {
          if ((v13 & 1) == 0)
          {
            if (v27)
            {
              re::introspect<int>(void)::info = re::introspect_int(0, v28);
            }
          }
          if ((re::RenderGraphEmitterBase::setRuntimeSetting(v6, (const re::IntrospectionBase *)v14[454], a2, a3) & 1) == 0)
          {
            if ((v15 & 1) == 0)
            {
              if (v29)
              {
                re::introspect<unsigned int>(void)::info = re::introspect_uint32_t(0, v30);
              }
            }
            if ((re::RenderGraphEmitterBase::setRuntimeSetting(v6, (const re::IntrospectionBase *)v16[456], a2, a3) & 1) == 0)
            {
              v17 = re::introspect<re::Vector2<float>>();
              if ((re::RenderGraphEmitterBase::setRuntimeSetting(v6, (const re::IntrospectionBase *)v17, a2, a3) & 1) == 0)
              {
                v18 = re::introspect<re::Vector3<float>>();
                if ((re::RenderGraphEmitterBase::setRuntimeSetting(v6, (const re::IntrospectionBase *)v18, a2, a3) & 1) == 0)
                {
                  v19 = re::introspect<re::Vector4<float>>();
                  if ((re::RenderGraphEmitterBase::setRuntimeSetting(v6, (const re::IntrospectionBase *)v19, a2, a3) & 1) == 0)
                  {
                    v20 = re::introspect<re::Quaternion<float>>();
                    re::RenderGraphEmitterBase::setRuntimeSetting(v6, (const re::IntrospectionBase *)v20, a2, a3);
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  re::AssetHandle::~AssetHandle((re::AssetHandle *)v31);
}

uint64_t RERenderGraphEmitterAssetSetRuntimeSettingBool(uint64_t a1, const char *a2, char a3)
{
  uint64_t v4;
  re::BindNode **v5;
  unsigned __int8 v6;
  __guard *v7;
  uint64_t v8;
  int v10;
  const re::IntrospectionBase *v11;
  int v12;
  re::BindNode **v13;
  uint64_t v14[3];
  char v15;

  v15 = a3;
  re::AssetAPIHelper::assetHandleCreate(a1, v14);
  v4 = re::AssetHandle::asset<re::RenderGraphEmitterAsset>((re::RenderGraphEmitterAsset *)v14);
  if (v4)
  {
    v5 = *(re::BindNode ***)(v4 + 16);
    if ((v6 & 1) == 0)
    {
      v13 = v5;
      v12 = v10;
      v5 = v13;
      if (v12)
      {
        re::introspect<BOOL>(void)::info = re::introspect_BOOL(0, v11);
        v5 = v13;
      }
    }
    v8 = re::RenderGraphEmitterBase::setRuntimeSetting(v5, (const re::IntrospectionBase *)v7[331], a2, &v15);
  }
  else
  {
    v8 = 0;
  }
  re::AssetHandle::~AssetHandle((re::AssetHandle *)v14);
  return v8;
}

uint64_t RERenderGraphEmitterAssetSetRuntimeSettingDouble(uint64_t a1, const char *a2, double a3)
{
  uint64_t v4;
  re::BindNode **v5;
  unsigned __int8 v6;
  __objc2_class_ro **p_info;
  uint64_t v8;
  int v10;
  const re::IntrospectionBase *v11;
  int v12;
  re::BindNode **v13;
  uint64_t v14[3];
  double v15;

  v15 = a3;
  re::AssetAPIHelper::assetHandleCreate(a1, v14);
  v4 = re::AssetHandle::asset<re::RenderGraphEmitterAsset>((re::RenderGraphEmitterAsset *)v14);
  if (v4)
  {
    v5 = *(re::BindNode ***)(v4 + 16);
    p_info = VideoSpillMapMetalSession.info;
    if ((v6 & 1) == 0)
    {
      v13 = v5;
      p_info = (__objc2_class_ro **)(VideoSpillMapMetalSession + 32);
      v12 = v10;
      v5 = v13;
      if (v12)
      {
        re::introspect<double>(void)::info = (uint64_t)re::introspect_double(0, v11);
        p_info = (__objc2_class_ro **)(VideoSpillMapMetalSession + 32);
        v5 = v13;
      }
    }
    v8 = re::RenderGraphEmitterBase::setRuntimeSetting(v5, (const re::IntrospectionBase *)p_info[9], a2, (char *)&v15);
  }
  else
  {
    v8 = 0;
  }
  re::AssetHandle::~AssetHandle((re::AssetHandle *)v14);
  return v8;
}

uint64_t RERenderGraphEmitterAssetSetRuntimeSettingFloat(uint64_t a1, const char *a2, float a3)
{
  uint64_t v4;
  re::BindNode **v5;
  unsigned __int8 v6;
  __objc2_class_ro **p_info;
  uint64_t v8;
  int v10;
  const re::IntrospectionBase *v11;
  int v12;
  re::BindNode **v13;
  uint64_t v14[3];
  float v15;

  v15 = a3;
  re::AssetAPIHelper::assetHandleCreate(a1, v14);
  v4 = re::AssetHandle::asset<re::RenderGraphEmitterAsset>((re::RenderGraphEmitterAsset *)v14);
  if (v4)
  {
    v5 = *(re::BindNode ***)(v4 + 16);
    p_info = VideoSpillMapMetalSession.info;
    if ((v6 & 1) == 0)
    {
      v13 = v5;
      p_info = (__objc2_class_ro **)(VideoSpillMapMetalSession + 32);
      v12 = v10;
      v5 = v13;
      if (v12)
      {
        re::introspect<float>(void)::info = re::introspect_float(0, v11);
        p_info = (__objc2_class_ro **)(VideoSpillMapMetalSession + 32);
        v5 = v13;
      }
    }
    v8 = re::RenderGraphEmitterBase::setRuntimeSetting(v5, (const re::IntrospectionBase *)p_info[7], a2, (char *)&v15);
  }
  else
  {
    v8 = 0;
  }
  re::AssetHandle::~AssetHandle((re::AssetHandle *)v14);
  return v8;
}

uint64_t RERenderGraphEmitterAssetSetRuntimeSettingInt32(uint64_t a1, const char *a2, int a3)
{
  uint64_t v4;
  re::BindNode **v5;
  unsigned __int8 v6;
  __guard *v7;
  uint64_t v8;
  int v10;
  const re::IntrospectionBase *v11;
  int v12;
  re::BindNode **v13;
  uint64_t v14[3];
  int v15;

  v15 = a3;
  re::AssetAPIHelper::assetHandleCreate(a1, v14);
  v4 = re::AssetHandle::asset<re::RenderGraphEmitterAsset>((re::RenderGraphEmitterAsset *)v14);
  if (v4)
  {
    v5 = *(re::BindNode ***)(v4 + 16);
    if ((v6 & 1) == 0)
    {
      v13 = v5;
      v12 = v10;
      v5 = v13;
      if (v12)
      {
        re::introspect<int>(void)::info = re::introspect_int(0, v11);
        v5 = v13;
      }
    }
    v8 = re::RenderGraphEmitterBase::setRuntimeSetting(v5, (const re::IntrospectionBase *)v7[454], a2, (char *)&v15);
  }
  else
  {
    v8 = 0;
  }
  re::AssetHandle::~AssetHandle((re::AssetHandle *)v14);
  return v8;
}

uint64_t RERenderGraphEmitterAssetSetRuntimeSettingUInt32(uint64_t a1, const char *a2, int a3)
{
  uint64_t v4;
  re::BindNode **v5;
  unsigned __int8 v6;
  __guard *v7;
  uint64_t v8;
  int v10;
  const re::IntrospectionBase *v11;
  int v12;
  re::BindNode **v13;
  uint64_t v14[3];
  int v15;

  v15 = a3;
  re::AssetAPIHelper::assetHandleCreate(a1, v14);
  v4 = re::AssetHandle::asset<re::RenderGraphEmitterAsset>((re::RenderGraphEmitterAsset *)v14);
  if (v4)
  {
    v5 = *(re::BindNode ***)(v4 + 16);
    if ((v6 & 1) == 0)
    {
      v13 = v5;
      v12 = v10;
      v5 = v13;
      if (v12)
      {
        re::introspect<unsigned int>(void)::info = re::introspect_uint32_t(0, v11);
        v5 = v13;
      }
    }
    v8 = re::RenderGraphEmitterBase::setRuntimeSetting(v5, (const re::IntrospectionBase *)v7[456], a2, (char *)&v15);
  }
  else
  {
    v8 = 0;
  }
  re::AssetHandle::~AssetHandle((re::AssetHandle *)v14);
  return v8;
}

uint64_t RERenderGraphEmitterAssetSetRuntimeSettingVector2F(uint64_t a1, const char *a2, double a3)
{
  uint64_t v4;
  re::BindNode **v5;
  unsigned __int8 v6;
  __objc2_class_ro **p_info;
  uint64_t v8;
  int v10;
  int v11;
  re::BindNode **v12;
  uint64_t v13[3];
  double v14;

  v14 = a3;
  re::AssetAPIHelper::assetHandleCreate(a1, v13);
  v4 = re::AssetHandle::asset<re::RenderGraphEmitterAsset>((re::RenderGraphEmitterAsset *)v13);
  if (v4)
  {
    v5 = *(re::BindNode ***)(v4 + 16);
    p_info = VideoSpillMapMetalSession.info;
    if ((v6 & 1) == 0)
    {
      v12 = v5;
      p_info = (__objc2_class_ro **)(VideoSpillMapMetalSession + 32);
      v11 = v10;
      v5 = v12;
      if (v11)
      {
        re::introspect<re::Vector2<float>>(void)::info = (_UNKNOWN *)re::introspect_Vector2F(0);
        p_info = (__objc2_class_ro **)(VideoSpillMapMetalSession + 32);
        v5 = v12;
      }
    }
    v8 = re::RenderGraphEmitterBase::setRuntimeSetting(v5, (const re::IntrospectionBase *)p_info[11], a2, (char *)&v14);
  }
  else
  {
    v8 = 0;
  }
  re::AssetHandle::~AssetHandle((re::AssetHandle *)v13);
  return v8;
}

uint64_t RERenderGraphEmitterAssetSetRuntimeSettingVector3F(uint64_t a1, const char *a2, __n128 a3)
{
  uint64_t v4;
  re::BindNode **v5;
  unsigned __int8 v6;
  __objc2_class_ro **p_info;
  uint64_t v8;
  int v10;
  int v11;
  re::BindNode **v12;
  uint64_t v13[3];
  __n128 v14;

  v14 = a3;
  re::AssetAPIHelper::assetHandleCreate(a1, v13);
  v4 = re::AssetHandle::asset<re::RenderGraphEmitterAsset>((re::RenderGraphEmitterAsset *)v13);
  if (v4)
  {
    v5 = *(re::BindNode ***)(v4 + 16);
    p_info = VideoSpillMapMetalSession.info;
    if ((v6 & 1) == 0)
    {
      v12 = v5;
      p_info = (__objc2_class_ro **)(VideoSpillMapMetalSession + 32);
      v11 = v10;
      v5 = v12;
      if (v11)
      {
        re::introspect<re::Vector3<float>>(void)::info = (_UNKNOWN *)re::introspect_Vector3F(0);
        p_info = (__objc2_class_ro **)(VideoSpillMapMetalSession + 32);
        v5 = v12;
      }
    }
    v8 = re::RenderGraphEmitterBase::setRuntimeSetting(v5, (const re::IntrospectionBase *)p_info[13], a2, (char *)&v14);
  }
  else
  {
    v8 = 0;
  }
  re::AssetHandle::~AssetHandle((re::AssetHandle *)v13);
  return v8;
}

uint64_t RERenderGraphEmitterAssetSetRuntimeSettingVector4F(uint64_t a1, const char *a2, __n128 a3)
{
  uint64_t v4;
  re::BindNode **v5;
  unsigned __int8 v6;
  __objc2_class_ro **p_info;
  uint64_t v8;
  int v10;
  int v11;
  re::BindNode **v12;
  uint64_t v13[3];
  __n128 v14;

  v14 = a3;
  re::AssetAPIHelper::assetHandleCreate(a1, v13);
  v4 = re::AssetHandle::asset<re::RenderGraphEmitterAsset>((re::RenderGraphEmitterAsset *)v13);
  if (v4)
  {
    v5 = *(re::BindNode ***)(v4 + 16);
    p_info = VideoSpillMapMetalSession.info;
    if ((v6 & 1) == 0)
    {
      v12 = v5;
      p_info = (__objc2_class_ro **)(VideoSpillMapMetalSession + 32);
      v11 = v10;
      v5 = v12;
      if (v11)
      {
        re::introspect<re::Vector4<float>>(void)::info = (_UNKNOWN *)re::introspect_Vector4F(0);
        p_info = (__objc2_class_ro **)(VideoSpillMapMetalSession + 32);
        v5 = v12;
      }
    }
    v8 = re::RenderGraphEmitterBase::setRuntimeSetting(v5, (const re::IntrospectionBase *)p_info[15], a2, (char *)&v14);
  }
  else
  {
    v8 = 0;
  }
  re::AssetHandle::~AssetHandle((re::AssetHandle *)v13);
  return v8;
}

uint64_t RERenderGraphEmitterAssetSetRuntimeSettingQuaternionF(uint64_t a1, const char *a2, __n128 a3)
{
  uint64_t v4;
  re::BindNode **v5;
  unsigned __int8 v6;
  __objc2_class_ro **p_info;
  uint64_t v8;
  int v10;
  int v11;
  re::BindNode **v12;
  uint64_t v13[3];
  __n128 v14;

  v14 = a3;
  re::AssetAPIHelper::assetHandleCreate(a1, v13);
  v4 = re::AssetHandle::asset<re::RenderGraphEmitterAsset>((re::RenderGraphEmitterAsset *)v13);
  if (v4)
  {
    v5 = *(re::BindNode ***)(v4 + 16);
    p_info = VideoSpillMapMetalSession.info;
    if ((v6 & 1) == 0)
    {
      v12 = v5;
      p_info = (__objc2_class_ro **)(VideoSpillMapMetalSession + 32);
      v11 = v10;
      v5 = v12;
      if (v11)
      {
        re::introspect<re::Quaternion<float>>(void)::info = re::introspect_QuaternionF(0);
        p_info = (__objc2_class_ro **)(VideoSpillMapMetalSession + 32);
        v5 = v12;
      }
    }
    v8 = re::RenderGraphEmitterBase::setRuntimeSetting(v5, (const re::IntrospectionBase *)p_info[17], a2, (char *)&v14);
  }
  else
  {
    v8 = 0;
  }
  re::AssetHandle::~AssetHandle((re::AssetHandle *)v13);
  return v8;
}

void RERenderGraphSelectionEmitterAddCallback(uint64_t a1, uint64_t a2, void *a3)
{
  id v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  _QWORD *v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12[3];
  _QWORD v13[3];
  _QWORD *v14;
  uint64_t v15;

  v15 = *MEMORY[0x24BDAC8D0];
  v5 = a3;
  re::AssetAPIHelper::assetHandleCreate(a1, v12);
  v6 = re::AssetHandle::asset<re::RenderGraphEmitterAsset>((re::RenderGraphEmitterAsset *)v12);
  if (v6)
  {
    v7 = *(_QWORD *)(v6 + 16);
    v8 = _Block_copy(v5);
    v13[0] = &off_24ED9ADF0;
    v13[1] = v8;
    v14 = v13;
    v11 = *(_QWORD *)(*(_QWORD *)(a2 + 136) + 24) & 0xFFFFFFFFFFFFFFFLL | ((unint64_t)*(_QWORD *)(*(_QWORD *)(a2 + 136) + 16) << 60);
    re::RenderGraphSelectionEmitter::addSelectionCompleteCallback(v7, (uint64_t *)&v11, (uint64_t)v13);
    v9 = v14;
    if (v14 == v13)
    {
      v10 = 4;
      v9 = v13;
      goto LABEL_6;
    }
    if (v14)
    {
      v10 = 5;
LABEL_6:
      (*(void (**)(void))(*v9 + 8 * v10))();
    }
  }
  re::AssetHandle::~AssetHandle((re::AssetHandle *)v12);

}

void RERenderGraphSelectionEmitterAddConcludeCallback(uint64_t a1, uint64_t a2, void *a3)
{
  id v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  _QWORD *v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12[3];
  _QWORD v13[3];
  _QWORD *v14;
  uint64_t v15;

  v15 = *MEMORY[0x24BDAC8D0];
  v5 = a3;
  re::AssetAPIHelper::assetHandleCreate(a1, v12);
  v6 = re::AssetHandle::asset<re::RenderGraphEmitterAsset>((re::RenderGraphEmitterAsset *)v12);
  if (v6)
  {
    v7 = *(_QWORD *)(v6 + 16);
    v8 = _Block_copy(v5);
    v13[0] = &off_24ED9AE80;
    v13[1] = v8;
    v14 = v13;
    v11 = *(_QWORD *)(*(_QWORD *)(a2 + 136) + 24) & 0xFFFFFFFFFFFFFFFLL | ((unint64_t)*(_QWORD *)(*(_QWORD *)(a2 + 136) + 16) << 60);
    re::RenderGraphSelectionEmitter::addSelectionConcludeCallback(v7, (uint64_t *)&v11, (uint64_t)v13);
    v9 = v14;
    if (v14 == v13)
    {
      v10 = 4;
      v9 = v13;
      goto LABEL_6;
    }
    if (v14)
    {
      v10 = 5;
LABEL_6:
      (*(void (**)(void))(*v9 + 8 * v10))();
    }
  }
  re::AssetHandle::~AssetHandle((re::AssetHandle *)v12);

}

void RERenderGraphSelectionEmitterSetFilteredEntityIDs(uint64_t a1, const __CFArray *a2)
{
  uint64_t v3;
  uint64_t v4[3];

  re::AssetAPIHelper::assetHandleCreate(a1, v4);
  v3 = re::AssetHandle::asset<re::RenderGraphEmitterAsset>((re::RenderGraphEmitterAsset *)v4);
  if (v3)
    re::RenderGraphSelectionEmitter::setFilteredEntityIDSet(*(re::RenderGraphSelectionEmitter **)(v3 + 16), a2);
  re::AssetHandle::~AssetHandle((re::AssetHandle *)v4);
}

void RERenderGraphSelectionEmitterSetParams(uint64_t a1, int a2, int a3, int a4, int a5, int a6)
{
  uint64_t v11;
  uint64_t v12;
  int32x4_t v13;
  uint64_t v14[3];

  re::AssetAPIHelper::assetHandleCreate(a1, v14);
  v11 = re::AssetHandle::asset<re::RenderGraphEmitterAsset>((re::RenderGraphEmitterAsset *)v14);
  if (v11)
  {
    v12 = *(_QWORD *)(v11 + 16);
    *(_DWORD *)(v12 + 360) = a2;
    *(_DWORD *)(v12 + 364) = a3;
    *(_DWORD *)(v12 + 368) = a4;
    *(_DWORD *)(v12 + 372) = a5;
    *(_DWORD *)(v12 + 376) = a6 ^ 1;
    *(_QWORD *)(v12 + 380) = -1;
    v13 = vdupq_n_s32(0x7FC00000u);
    *(int32x4_t *)(v12 + 400) = v13;
    *(int32x4_t *)(v12 + 416) = v13;
  }
  re::AssetHandle::~AssetHandle((re::AssetHandle *)v14);
}

void RERenderGraphSelectionEmitterSetParamsWithTargetSize(uint64_t a1, __int32 a2, __int32 a3, __int32 a4, __int32 a5, int a6, __int32 a7, __int32 a8)
{
  uint64_t v15;
  int32x4_t *v16;
  int32x4_t v17;
  uint64_t v18[3];

  re::AssetAPIHelper::assetHandleCreate(a1, v18);
  v15 = re::AssetHandle::asset<re::RenderGraphEmitterAsset>((re::RenderGraphEmitterAsset *)v18);
  if (v15)
  {
    v16 = *(int32x4_t **)(v15 + 16);
    v16[22].i32[2] = a2;
    v16[22].i32[3] = a3;
    v16[23].i32[0] = a4;
    v16[23].i32[1] = a5;
    v16[23].i32[2] = a6 ^ 1;
    v16[23].i32[3] = a7;
    v16[24].i32[0] = a8;
    v17 = vdupq_n_s32(0x7FC00000u);
    v16[25] = v17;
    v16[26] = v17;
  }
  re::AssetHandle::~AssetHandle((re::AssetHandle *)v18);
}

void RERenderGraphSelectionEmitterSetConcludeParams(uint64_t a1, __n128 a2, __n128 a3)
{
  uint64_t v3;
  __n128 *v4;
  uint64_t v7[3];

  re::AssetAPIHelper::assetHandleCreate(a1, v7);
  v3 = re::AssetHandle::asset<re::RenderGraphEmitterAsset>((re::RenderGraphEmitterAsset *)v7);
  if (v3)
  {
    v4 = *(__n128 **)(v3 + 16);
    v4[22].n128_u64[1] = -1;
    v4[23].n128_u64[0] = -1;
    v4[23].n128_u64[1] = 0xFFFFFFFF00000000;
    v4[24].n128_u32[0] = -1;
    v4[25] = a2;
    v4[26] = a3;
  }
  re::AssetHandle::~AssetHandle((re::AssetHandle *)v7);
}

void RERenderGraphSelectionEmitterSetConcludeParamsWithTargetSize(uint64_t a1, unsigned __int32 a2, unsigned __int32 a3, __n128 a4, __n128 a5)
{
  uint64_t v7;
  __n128 *v8;
  uint64_t v11[3];

  re::AssetAPIHelper::assetHandleCreate(a1, v11);
  v7 = re::AssetHandle::asset<re::RenderGraphEmitterAsset>((re::RenderGraphEmitterAsset *)v11);
  if (v7)
  {
    v8 = *(__n128 **)(v7 + 16);
    v8[22].n128_u64[1] = -1;
    v8[23].n128_u64[0] = -1;
    v8[23].n128_u32[2] = 0;
    v8[23].n128_u32[3] = a2;
    v8[24].n128_u32[0] = a3;
    v8[25] = a4;
    v8[26] = a5;
  }
  re::AssetHandle::~AssetHandle((re::AssetHandle *)v11);
}

void RERenderGraphSelectionEmitterSetScene(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4[3];

  re::AssetAPIHelper::assetHandleCreate(a1, v4);
  v3 = re::AssetHandle::asset<re::RenderGraphEmitterAsset>((re::RenderGraphEmitterAsset *)v4);
  if (v3)
    re::StringID::operator=((unint64_t *)(*(_QWORD *)(v3 + 16) + 456), (uint64_t *)(*(_QWORD *)(a2 + 104) + 272));
  re::AssetHandle::~AssetHandle((re::AssetHandle *)v4);
}

BOOL RERenderGraphSimpleForwardEmitterGetDisplayWireframe(uint64_t a1)
{
  uint64_t v1;
  _BOOL8 v2;
  uint64_t v4[3];

  re::AssetAPIHelper::assetHandleCreate(a1, v4);
  v1 = re::AssetHandle::asset<re::RenderGraphEmitterAsset>((re::RenderGraphEmitterAsset *)v4);
  if (v1)
    v2 = *(_BYTE *)(*(_QWORD *)(v1 + 16) + 136) != 0;
  else
    v2 = 0;
  re::AssetHandle::~AssetHandle((re::AssetHandle *)v4);
  return v2;
}

void RERenderGraphSimpleForwardEmitterSetDisplayWireframe(uint64_t a1, char a2)
{
  uint64_t v3;
  uint64_t v4[3];

  re::AssetAPIHelper::assetHandleCreate(a1, v4);
  v3 = re::AssetHandle::asset<re::RenderGraphEmitterAsset>((re::RenderGraphEmitterAsset *)v4);
  if (v3)
    *(_BYTE *)(*(_QWORD *)(v3 + 16) + 136) = a2;
  re::AssetHandle::~AssetHandle((re::AssetHandle *)v4);
}

uint64_t RERenderGraphSimpleForwardEmitterGetDebugMaterialTechniqueNameCount()
{
  return -1;
}

uint64_t RERenderGraphSimpleForwardEmitterGetDebugMaterialTechniqueName()
{
  return 0;
}

uint64_t re::AssetHandle::loadedAsset<re::RenderGraphEmitterAsset>(re::RenderGraphEmitterAsset *a1)
{
  uint64_t *v2;

  if (!*((_QWORD *)a1 + 1))
    return 0;
  v2 = re::RenderGraphEmitterAsset::assetType(a1);
  return re::AssetHandle::assetWithType(a1, (const re::AssetType *)v2, 1);
}

uint64_t std::__function::__func<RERenderGraphSelectionEmitterAddCallback::$_0,std::allocator<RERenderGraphSelectionEmitterAddCallback::$_0>,void ()(re::Slice<unsigned long long> const&)>::~__func(uint64_t a1)
{

  return a1;
}

void std::__function::__func<RERenderGraphSelectionEmitterAddCallback::$_0,std::allocator<RERenderGraphSelectionEmitterAddCallback::$_0>,void ()(re::Slice<unsigned long long> const&)>::~__func(uint64_t a1)
{

  JUMPOUT(0x2276933B8);
}

_QWORD *std::__function::__func<RERenderGraphSelectionEmitterAddCallback::$_0,std::allocator<RERenderGraphSelectionEmitterAddCallback::$_0>,void ()(re::Slice<unsigned long long> const&)>::__clone(uint64_t a1)
{
  _QWORD *v2;

  v2 = operator new(0x10uLL);
  *v2 = &off_24ED9ADF0;
  v2[1] = _Block_copy(*(const void **)(a1 + 8));
  return v2;
}

void *std::__function::__func<RERenderGraphSelectionEmitterAddCallback::$_0,std::allocator<RERenderGraphSelectionEmitterAddCallback::$_0>,void ()(re::Slice<unsigned long long> const&)>::__clone(uint64_t a1, _QWORD *a2)
{
  void *result;

  *a2 = &off_24ED9ADF0;
  result = _Block_copy(*(const void **)(a1 + 8));
  a2[1] = result;
  return result;
}

void std::__function::__func<RERenderGraphSelectionEmitterAddCallback::$_0,std::allocator<RERenderGraphSelectionEmitterAddCallback::$_0>,void ()(re::Slice<unsigned long long> const&)>::destroy(uint64_t a1)
{

}

void std::__function::__func<RERenderGraphSelectionEmitterAddCallback::$_0,std::allocator<RERenderGraphSelectionEmitterAddCallback::$_0>,void ()(re::Slice<unsigned long long> const&)>::destroy_deallocate(id *a1)
{

  operator delete(a1);
}

uint64_t std::__function::__func<RERenderGraphSelectionEmitterAddCallback::$_0,std::allocator<RERenderGraphSelectionEmitterAddCallback::$_0>,void ()(re::Slice<unsigned long long> const&)>::operator()(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 8) + 16))();
}

uint64_t std::__function::__func<RERenderGraphSelectionEmitterAddCallback::$_0,std::allocator<RERenderGraphSelectionEmitterAddCallback::$_0>,void ()(re::Slice<unsigned long long> const&)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<RERenderGraphSelectionEmitterAddCallback::$_0,std::allocator<RERenderGraphSelectionEmitterAddCallback::$_0>,void ()(re::Slice<unsigned long long> const&)>::target_type()
{
}

uint64_t std::__function::__func<RERenderGraphSelectionEmitterAddConcludeCallback::$_0,std::allocator<RERenderGraphSelectionEmitterAddConcludeCallback::$_0>,void ()(re::Slice<re::RenderGraphSelectionConcludeResult> const&)>::~__func(uint64_t a1)
{

  return a1;
}

void std::__function::__func<RERenderGraphSelectionEmitterAddConcludeCallback::$_0,std::allocator<RERenderGraphSelectionEmitterAddConcludeCallback::$_0>,void ()(re::Slice<re::RenderGraphSelectionConcludeResult> const&)>::~__func(uint64_t a1)
{

  JUMPOUT(0x2276933B8);
}

_QWORD *std::__function::__func<RERenderGraphSelectionEmitterAddConcludeCallback::$_0,std::allocator<RERenderGraphSelectionEmitterAddConcludeCallback::$_0>,void ()(re::Slice<re::RenderGraphSelectionConcludeResult> const&)>::__clone(uint64_t a1)
{
  _QWORD *v2;

  v2 = operator new(0x10uLL);
  *v2 = &off_24ED9AE80;
  v2[1] = _Block_copy(*(const void **)(a1 + 8));
  return v2;
}

void *std::__function::__func<RERenderGraphSelectionEmitterAddConcludeCallback::$_0,std::allocator<RERenderGraphSelectionEmitterAddConcludeCallback::$_0>,void ()(re::Slice<re::RenderGraphSelectionConcludeResult> const&)>::__clone(uint64_t a1, _QWORD *a2)
{
  void *result;

  *a2 = &off_24ED9AE80;
  result = _Block_copy(*(const void **)(a1 + 8));
  a2[1] = result;
  return result;
}

void std::__function::__func<RERenderGraphSelectionEmitterAddConcludeCallback::$_0,std::allocator<RERenderGraphSelectionEmitterAddConcludeCallback::$_0>,void ()(re::Slice<re::RenderGraphSelectionConcludeResult> const&)>::destroy(uint64_t a1)
{

}

void std::__function::__func<RERenderGraphSelectionEmitterAddConcludeCallback::$_0,std::allocator<RERenderGraphSelectionEmitterAddConcludeCallback::$_0>,void ()(re::Slice<re::RenderGraphSelectionConcludeResult> const&)>::destroy_deallocate(id *a1)
{

  operator delete(a1);
}

uint64_t std::__function::__func<RERenderGraphSelectionEmitterAddConcludeCallback::$_0,std::allocator<RERenderGraphSelectionEmitterAddConcludeCallback::$_0>,void ()(re::Slice<re::RenderGraphSelectionConcludeResult> const&)>::operator()(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 8) + 16))();
}

uint64_t std::__function::__func<RERenderGraphSelectionEmitterAddConcludeCallback::$_0,std::allocator<RERenderGraphSelectionEmitterAddConcludeCallback::$_0>,void ()(re::Slice<re::RenderGraphSelectionConcludeResult> const&)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<RERenderGraphSelectionEmitterAddConcludeCallback::$_0,std::allocator<RERenderGraphSelectionEmitterAddConcludeCallback::$_0>,void ()(re::Slice<re::RenderGraphSelectionConcludeResult> const&)>::target_type()
{
}

uint64_t REStateParameterBlackboardAssetCreateAsset(re *a1, uint64_t *a2, uint64_t a3, uint64_t *a4, uint64_t a5, uint64_t *a6, uint64_t a7, unint64_t a8, uint64_t a9)
{
  uint64_t *v15;
  _QWORD *v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t *v19;
  uint64_t *v20;
  const char **v21;
  const char *v22;
  const char *v23;
  _anonymous_namespace_ *v24;
  uint64_t *v25;
  _QWORD *v26;
  uint64_t v27;
  void *v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  void *v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  const char **v36;
  const char *v37;
  const char *v38;
  _anonymous_namespace_ *v39;
  _QWORD *v40;
  uint64_t v41;
  void *v42;
  uint64_t v43;
  unint64_t v44;
  uint64_t v45;
  void *v46;
  uint64_t v47;
  unint64_t v48;
  uint64_t v49;
  const char **v50;
  const char *v51;
  const char *v52;
  _anonymous_namespace_ *v53;
  _QWORD *v54;
  uint64_t v55;
  void *v56;
  uint64_t v57;
  unint64_t v58;
  uint64_t v59;
  void *v60;
  uint64_t v61;
  unint64_t v62;
  _anonymous_namespace_ *v63;
  uint64_t v64;
  const char **v65;
  const char *v66;
  const char *v67;
  _anonymous_namespace_ *v68;
  _QWORD *v69;
  uint64_t v70;
  void *v71;
  uint64_t v72;
  unint64_t v73;
  uint64_t v74;
  void *v75;
  uint64_t v76;
  unint64_t v77;
  uint64_t *v78;
  _anonymous_namespace_ *inited;
  uint64_t *v80;
  uint64_t v81;
  id v82;
  uint64_t v84;
  _anonymous_namespace_ *v86;
  uint64_t *v88;
  uint64_t v89;
  void *v90;
  uint64_t v91;
  void *v92;
  uint64_t v93;
  uint64_t *v94;
  uint64_t v95;
  uint64_t v96;
  unint64_t v97;
  uint64_t v98;
  uint64_t v99;
  unint64_t v100;
  uint64_t v101;
  uint64_t v102;
  unint64_t v103;
  uint64_t v104;
  uint64_t v105;
  int v106;
  const char *v107;
  __int16 v108;
  int v109;
  __int16 v110;
  uint64_t *v111;
  __int16 v112;
  uint64_t *v113;
  __int128 v114;
  __int128 v115;
  __int128 v116;
  __int128 v117;
  __int128 v118;
  uint64_t v119;

  v119 = *MEMORY[0x24BDAC8D0];
  v15 = re::globalAllocators(a1);
  v16 = (_QWORD *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v15[2] + 32))(v15[2], 104, 8);
  *v16 = &off_24ED314B0;
  *(_OWORD *)(v16 + 1) = 0u;
  *(_OWORD *)(v16 + 3) = 0u;
  *(_OWORD *)(v16 + 5) = 0u;
  *(_OWORD *)(v16 + 7) = 0u;
  *(_OWORD *)(v16 + 9) = 0u;
  v86 = (_anonymous_namespace_ *)v16;
  *(_OWORD *)(v16 + 11) = 0u;
  v102 = 0;
  v103 = 0;
  v104 = 0;
  v99 = 0;
  v100 = 0;
  v101 = 0;
  v96 = 0;
  v97 = 0;
  v98 = 0;
  v93 = 0;
  v94 = 0;
  v95 = 0;
  v88 = (uint64_t *)a8;
  if (a2)
  {
    v84 = a5;
    v18 = 0;
    v19 = 0;
    v20 = &v91;
    v21 = (const char **)(a3 + 8);
    do
    {
      v22 = *(v21 - 1);
      v89 = 0;
      v90 = &str_110;
      v23 = *v21;
      v91 = 0;
      v92 = &str_110;
      v25 = (uint64_t *)v103;
      if (v103 <= (unint64_t)v19)
      {
        v105 = 0;
        v117 = 0u;
        v118 = 0u;
        v115 = 0u;
        v116 = 0u;
        v114 = 0u;
        os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        v106 = 136315906;
        v107 = "operator[]";
        v108 = 1024;
        v109 = 468;
        v110 = 2048;
        v111 = v19;
        v112 = 2048;
        v113 = v25;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_26:
        v105 = 0;
        v117 = 0u;
        v118 = 0u;
        v115 = 0u;
        v116 = 0u;
        v114 = 0u;
        os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        v106 = 136315906;
        v107 = "operator[]";
        v108 = 1024;
        v109 = 468;
        v110 = 2048;
        v111 = v19;
        v112 = 2048;
        v113 = v25;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_27:
        v105 = 0;
        v117 = 0u;
        v118 = 0u;
        v115 = 0u;
        v116 = 0u;
        v114 = 0u;
        os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        v106 = 136315906;
        v107 = "operator[]";
        v108 = 1024;
        v109 = 468;
        v110 = 2048;
        v111 = v20;
        v112 = 2048;
        v113 = v25;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_28:
        v105 = 0;
        v117 = 0u;
        v118 = 0u;
        v115 = 0u;
        v116 = 0u;
        v114 = 0u;
        os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        v106 = 136315906;
        v107 = "operator[]";
        v108 = 1024;
        v109 = 468;
        v110 = 2048;
        v111 = v20;
        v112 = 2048;
        v113 = v17;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
      }
      v26 = (_QWORD *)(v104 + v18);
      v27 = v89;
      v28 = v90;
      v89 = 0;
      v90 = &str_110;
      v29 = *(_QWORD *)(v104 + v18 + 8);
      v30 = v27 & 0xFFFFFFFFFFFFFFFELL | *(_QWORD *)(v104 + v18) & 1;
      v26[1] = v28;
      *(_QWORD *)&v114 = v30;
      *((_QWORD *)&v114 + 1) = v29;
      *v26 = v27;
      re::StringID::destroyString((re::StringID *)&v114);
      v31 = v91;
      v32 = v92;
      v91 = 0;
      v92 = &str_110;
      v33 = v26[3];
      v34 = v31 & 0xFFFFFFFFFFFFFFFELL | v26[2] & 1;
      v26[3] = v32;
      *(_QWORD *)&v114 = v34;
      *((_QWORD *)&v114 + 1) = v33;
      v26[2] = v31;
      re::StringID::destroyString((re::StringID *)&v114);
      re::StringID::destroyString((re::StringID *)&v91);
      re::StringID::destroyString((re::StringID *)&v89);
      v19 = (uint64_t *)((char *)v19 + 1);
      v18 += 32;
      v21 += 2;
    }
    while (a2 != v19);
    a2 = &v102;
    a8 = (unint64_t)v88;
    a5 = v84;
  }
  if (a4)
  {
    v35 = 0;
    v19 = 0;
    v20 = &v91;
    v36 = (const char **)(a5 + 8);
    do
    {
      v37 = *(v36 - 1);
      v89 = 0;
      v90 = &str_110;
      v38 = *v36;
      v91 = 0;
      v92 = &str_110;
      v25 = (uint64_t *)v100;
      if (v100 <= (unint64_t)v19)
        goto LABEL_26;
      v40 = (_QWORD *)(v101 + v35);
      v41 = v89;
      v42 = v90;
      v89 = 0;
      v90 = &str_110;
      v43 = *(_QWORD *)(v101 + v35 + 8);
      v44 = v41 & 0xFFFFFFFFFFFFFFFELL | *(_QWORD *)(v101 + v35) & 1;
      v40[1] = v42;
      *(_QWORD *)&v114 = v44;
      *((_QWORD *)&v114 + 1) = v43;
      *v40 = v41;
      re::StringID::destroyString((re::StringID *)&v114);
      v45 = v91;
      v46 = v92;
      v91 = 0;
      v92 = &str_110;
      v47 = v40[3];
      v48 = v45 & 0xFFFFFFFFFFFFFFFELL | v40[2] & 1;
      v40[3] = v46;
      *(_QWORD *)&v114 = v48;
      *((_QWORD *)&v114 + 1) = v47;
      v40[2] = v45;
      re::StringID::destroyString((re::StringID *)&v114);
      re::StringID::destroyString((re::StringID *)&v91);
      re::StringID::destroyString((re::StringID *)&v89);
      v19 = (uint64_t *)((char *)v19 + 1);
      v35 += 32;
      v36 += 2;
    }
    while (a4 != v19);
    a4 = &v99;
    a8 = (unint64_t)v88;
  }
  if (a6)
  {
    v49 = 0;
    v20 = 0;
    v17 = &v91;
    v50 = (const char **)(a7 + 8);
    do
    {
      v51 = *(v50 - 1);
      v89 = 0;
      v90 = &str_110;
      v52 = *v50;
      v91 = 0;
      v92 = &str_110;
      v25 = (uint64_t *)v97;
      if (v97 <= (unint64_t)v20)
        goto LABEL_27;
      v54 = (_QWORD *)(v98 + v49);
      v55 = v89;
      v56 = v90;
      v89 = 0;
      v90 = &str_110;
      v57 = *(_QWORD *)(v98 + v49 + 8);
      v58 = v55 & 0xFFFFFFFFFFFFFFFELL | *(_QWORD *)(v98 + v49) & 1;
      v54[1] = v56;
      *(_QWORD *)&v114 = v58;
      *((_QWORD *)&v114 + 1) = v57;
      *v54 = v55;
      re::StringID::destroyString((re::StringID *)&v114);
      v59 = v91;
      v60 = v92;
      v91 = 0;
      v92 = &str_110;
      v61 = v54[3];
      v62 = v59 & 0xFFFFFFFFFFFFFFFELL | v54[2] & 1;
      v54[3] = v60;
      *(_QWORD *)&v114 = v62;
      *((_QWORD *)&v114 + 1) = v61;
      v54[2] = v59;
      re::StringID::destroyString((re::StringID *)&v114);
      re::StringID::destroyString((re::StringID *)&v91);
      re::StringID::destroyString((re::StringID *)&v89);
      v20 = (uint64_t *)((char *)v20 + 1);
      v49 += 32;
      v50 += 2;
    }
    while (a6 != v20);
    a6 = &v96;
    a8 = (unint64_t)v88;
  }
  if (a8)
  {
    v64 = 0;
    v20 = 0;
    v65 = (const char **)(a9 + 8);
    do
    {
      v66 = *(v65 - 1);
      v89 = 0;
      v90 = &str_110;
      v67 = *v65;
      v91 = 0;
      v92 = &str_110;
      v17 = v94;
      if (v94 <= v20)
        goto LABEL_28;
      v69 = (_QWORD *)(v95 + v64);
      v70 = v89;
      v71 = v90;
      v89 = 0;
      v90 = &str_110;
      v72 = *(_QWORD *)(v95 + v64 + 8);
      v73 = v70 & 0xFFFFFFFFFFFFFFFELL | *(_QWORD *)(v95 + v64) & 1;
      v69[1] = v71;
      *(_QWORD *)&v114 = v73;
      *((_QWORD *)&v114 + 1) = v72;
      *v69 = v70;
      re::StringID::destroyString((re::StringID *)&v114);
      v74 = v91;
      v75 = v92;
      v91 = 0;
      v92 = &str_110;
      v76 = v69[3];
      v77 = v74 & 0xFFFFFFFFFFFFFFFELL | v69[2] & 1;
      v69[3] = v75;
      *(_QWORD *)&v114 = v77;
      *((_QWORD *)&v114 + 1) = v76;
      v69[2] = v74;
      re::StringID::destroyString((re::StringID *)&v114);
      re::StringID::destroyString((re::StringID *)&v91);
      re::StringID::destroyString((re::StringID *)&v89);
      v20 = (uint64_t *)((char *)v20 + 1);
      v64 += 32;
      v65 += 2;
    }
    while (v88 != v20);
    v78 = &v93;
  }
  else
  {
    v78 = 0;
  }
  inited = re::StateParameterBlackboardAsset::initWithInitData(v86, (uint64_t)a2, (uint64_t)a4, (uint64_t)a6, (uint64_t)v78);
  v80 = re::StateParameterBlackboardAsset::assetType(inited);
  (*(void (**)(__int128 *__return_ptr, re *, _anonymous_namespace_ *, uint64_t *, _QWORD, _QWORD, _QWORD))(*(_QWORD *)a1 + 416))(&v114, a1, v86, v80, 0, 0, 0);
  v81 = v114;
  if ((_QWORD)v114)
    v82 = (id)(v114 + 8);
  re::AssetHandle::~AssetHandle((re::AssetHandle *)&v114);
  re::FixedArray<re::RigGraphOperatorParameterDefinition>::deinit(&v93);
  re::FixedArray<re::RigGraphOperatorParameterDefinition>::deinit(&v96);
  re::FixedArray<re::RigGraphOperatorParameterDefinition>::deinit(&v99);
  re::FixedArray<re::RigGraphOperatorParameterDefinition>::deinit(&v102);
  return v81;
}

uint64_t RENetDiscoveryViewCreateWithCallbacks(_QWORD *a1)
{
  uint64_t v2;

  RESyncDiscoveryViewObserverCreate();
  if (a1[1])
    RESyncDiscoveryViewObserverOnCreate();
  if (a1[2])
    RESyncDiscoveryViewObserverOnDestroy();
  if (a1[3])
    RESyncDiscoveryViewObserverOnGetIdentitiesCount();
  if (a1[4])
    RESyncDiscoveryViewObserverOnGetIdentityAtIndex();
  if (a1[5])
    RESyncDiscoveryViewObserverOnGetAuthData();
  if (a1[6])
    RESyncDiscoveryViewObserverOnRequestIdentity();
  if (a1[7])
    RESyncDiscoveryViewObserverOnCreateProtocolLayer();
  v2 = RESyncDiscoveryViewCreateWithObserver();
  RESyncRelease();
  return v2;
}

uint64_t RENetDiscoveryViewCreateWithCallbacksV2(_QWORD *a1)
{
  uint64_t v2;

  RESyncDiscoveryViewObserverCreate();
  if (a1[1])
    RESyncDiscoveryViewObserverOnCreate();
  if (a1[2])
    RESyncDiscoveryViewObserverOnDestroy();
  if (a1[3])
    RESyncDiscoveryViewObserverOnGetIdentitiesCount();
  if (a1[4])
    RESyncDiscoveryViewObserverOnGetIdentityAtIndex();
  if (a1[5])
    RESyncDiscoveryViewObserverOnGetAuthData();
  if (a1[6])
    RESyncDiscoveryViewObserverOnRequestIdentity();
  if (a1[7])
    RESyncDiscoveryViewObserverOnCreateProtocolLayer();
  v2 = RESyncDiscoveryViewCreateWithObserver();
  RESyncRelease();
  return v2;
}

uint64_t RENetIdentityCreateWithCallbacks(_QWORD *a1)
{
  uint64_t v2;

  RESyncDiscoveryIdentityObserverCreate();
  if (a1[1])
    RESyncDiscoveryIdentityObserverOnCreate();
  if (a1[2])
    RESyncDiscoveryIdentityObserverOnDestroy();
  if (a1[3])
    RESyncDiscoveryIdentityObserverOnGetDisplayName();
  if (a1[4])
    RESyncDiscoveryIdentityObserverOnGetAddress();
  if (a1[5])
    RESyncDiscoveryIdentityObserverOnIsLocal();
  v2 = RESyncIdentityCreateWithObserver();
  RESyncRelease();
  return v2;
}

void RENetAuthDataInvalid(_QWORD *a1@<X8>)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
}

uint64_t REMaterialParametersServiceCreatePbrParameters(uint64_t a1)
{
  uint64_t v2;

  (*(void (**)(uint64_t *__return_ptr))(*(_QWORD *)a1 + 16))(&v2);
  return v2;
}

uint64_t REMaterialParametersServiceCreateUnlitParameters(uint64_t a1, uint64_t a2, uint64_t a3, char a4, uint64_t a5, __n128 a6, float a7)
{
  uint64_t v12[3];
  uint64_t v13;
  __n128 v14;
  char v15;

  v14 = a6;
  v15 = a4;
  re::AssetAPIHelper::assetHandleCreate(a5, v12);
  (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t, uint64_t, __n128 *, uint64_t *, float))(*(_QWORD *)a1 + 24))(&v13, a1, a2, a3, &v14, v12, a7);
  re::AssetHandle::~AssetHandle((re::AssetHandle *)v12);
  return v13;
}

uint64_t REMaterialParametersServiceFindUnlitParametersByID(uint64_t a1)
{
  uint64_t result;
  uint64_t v2;

  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 32))(a1);
  if (result)
  {
    v2 = result;
    if (re::ecs2::EntityComponentCollection::get((re::ecs2::EntityComponentCollection *)(result + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::UnlitMaterialParametersComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType))
    {
      return v2;
    }
    else
    {
      return 0;
    }
  }
  return result;
}

uint64_t REMaterialParametersServiceFindPbrParametersByID(uint64_t a1)
{
  uint64_t result;
  uint64_t v2;

  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 32))(a1);
  if (result)
  {
    v2 = result;
    if (re::ecs2::EntityComponentCollection::get((re::ecs2::EntityComponentCollection *)(result + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::PbrMaterialParametersComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType))
    {
      return v2;
    }
    else
    {
      return 0;
    }
  }
  return result;
}

uint64_t REMaterialParametersServiceGetParametersTypeForID(uint64_t a1)
{
  uint64_t result;
  re::ecs2::EntityComponentCollection *v2;

  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 32))(a1);
  if (result)
  {
    v2 = (re::ecs2::EntityComponentCollection *)(result + 32);
    if (re::ecs2::EntityComponentCollection::get((re::ecs2::EntityComponentCollection *)(result + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::UnlitMaterialParametersComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType))
    {
      return 1;
    }
    else
    {
      return 2
           * (re::ecs2::EntityComponentCollection::get(v2, (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::PbrMaterialParametersComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType) != 0);
    }
  }
  return result;
}

uint64_t REMeshDeformationDefinitionAssetBuilderCreate(re *a1)
{
  uint64_t *v1;
  uint64_t v2;
  _anonymous_namespace_::MeshDeformationDefinitionAssetBuilder *v3;

  v1 = re::globalAllocators(a1);
  v2 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v1[2] + 32))(v1[2], 88, 8);
  ArcSharedObject::ArcSharedObject((ArcSharedObject *)v2, 0);
  *(_QWORD *)v2 = &off_24ED9B348;
  *(_QWORD *)(v2 + 80) = 0;
  *(_OWORD *)(v2 + 24) = 0u;
  *(_OWORD *)(v2 + 40) = 0u;
  return v2;
}

uint64_t REMeshDeformationDefinitionAssetBuilderCreateFromAsset(uint64_t a1)
{
  re::MeshDeformationAsset *v1;
  uint64_t *v2;
  NSObject *v3;
  uint64_t v4;
  uint64_t *v5;
  _anonymous_namespace_ *v6;
  uint64_t v8;
  uint64_t v9;
  _BYTE v10[24];
  uint8_t v11[24];
  uint64_t buf[4];

  re::AssetAPIHelper::assetHandleCreate(a1, &v8);
  v2 = re::MeshDeformationAsset::assetType(v1);
  if (v9 && v2 == *(uint64_t **)(v9 + 264))
  {
    v5 = re::globalAllocators((re *)v2);
    v4 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v5[2] + 32))(v5[2], 88, 8);
    v6 = re::AssetHandle::AssetHandle((re::AssetHandle *)v10, (const re::AssetHandle *)&v8);
    ArcSharedObject::ArcSharedObject((ArcSharedObject *)v4, 0);
    *(_QWORD *)v4 = &off_24ED9B348;
    *(_QWORD *)(v4 + 80) = 0;
    *(_OWORD *)(v4 + 40) = 0u;
    *(_OWORD *)(v4 + 24) = 0u;
    re::AssetHandle::AssetHandle((re::AssetHandle *)v11, (const re::AssetHandle *)v10);
    re::AssetHandle::AssetHandle((re::AssetHandle *)buf, (const re::AssetHandle *)v11);
    re::AssetHandle::operator=((uint64_t *)(v4 + 24), buf);
    re::AssetHandle::~AssetHandle((re::AssetHandle *)buf);
    re::AssetHandle::~AssetHandle((re::AssetHandle *)v11);
    re::AssetHandle::~AssetHandle((re::AssetHandle *)v10);
  }
  else
  {
    if (CoreRELog::onceToken != -1)
      dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
    v3 = (id)CoreRELog::log;
    if (os_log_type_enabled(v3, OS_LOG_TYPE_ERROR))
    {
      LOWORD(buf[0]) = 0;
      _os_log_error_impl(&dword_224FE9000, v3, OS_LOG_TYPE_ERROR, "Asset reference is not a valid Mesh Deformation Asset.", (uint8_t *)buf, 2u);
    }

    v4 = 0;
  }
  re::AssetHandle::~AssetHandle((re::AssetHandle *)&v8);
  return v4;
}

void REMeshDeformationDefinitionAssetBuilderAddFromMeshDeformationDefinition(uint64_t a1, uint64_t a2)
{
  unint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  unint64_t v7;
  re *v8;
  uint64_t v9;
  uint64_t v10;
  re *v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  re *v20;
  re *v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t *v24;
  unint64_t v25;
  unint64_t *v26;
  uint64_t v27;
  unint64_t *v28;
  unint64_t *v29;
  unint64_t v30;
  re *v31;
  unint64_t v32;
  unint64_t v33;
  uint64_t v34[3];
  uint64_t v35;
  int v36;
  const char *v37;
  __int16 v38;
  int v39;
  __int16 v40;
  unint64_t v41;
  __int16 v42;
  unint64_t v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  uint64_t v49;

  v49 = *MEMORY[0x24BDAC8D0];
  re::AssetAPIHelper::assetHandleCreate(a2, v34);
  v4 = re::AssetHandle::asset<re::MeshDeformationAsset>((re::MeshDeformationAsset *)v34);
  if (v4)
  {
    v5 = v4;
    v6 = (uint64_t *)(a1 + 24);
    v10 = *(_QWORD *)(v5 + 16);
    if (v10)
    {
      v11 = v8;
      v12 = *((_QWORD *)v8 + 2);
      v13 = v12 + 1;
      if (v12 + 1 <= v7)
      {
LABEL_28:
        v35 = 0;
        v47 = 0u;
        v48 = 0u;
        v45 = 0u;
        v46 = 0u;
        v44 = 0u;
        os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        v36 = 136315906;
        v37 = "copy";
        v38 = 1024;
        v39 = 643;
        v40 = 2048;
        v41 = v7;
        v42 = 2048;
        v43 = v13;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
        goto LABEL_29;
      }
      v13 = v7 + v10;
      if (__CFADD__(v7, v10))
      {
LABEL_29:
        re::internal::assertLog((re::internal *)7, v9, "assertion failure: '%s' (%s:line %i) Size overflow in DynamicArray<T>::copy(). size = %zu, pos = %zu, count = %zu", "!overflow", "copy", 647, v12, v7, v10);
        _os_crash();
        __break(1u);
        goto LABEL_30;
      }
      v14 = *(_QWORD *)(v5 + 32);
      if (v12 >= v13)
      {
        std::__unwrap_and_dispatch[abi:nn180100]<std::__overload<std::__copy_loop<std::_ClassicAlgPolicy>,std::__copy_trivial>,re::DeformationStackDefinition const*,re::DeformationStackDefinition const*,re::DeformationStackDefinition*,0>(*(_QWORD *)(v5 + 32), (uint64_t *)(v14 + 40 * v10), *((_QWORD *)v8 + 4) + 40 * v7);
      }
      else
      {
        re::DynamicArray<re::DeformationStackDefinition>::growCapacity(v8, v7 + v10);
        v15 = *((_QWORD *)v11 + 2);
        v16 = (uint64_t *)(v14 + 40 * (v15 - v7));
        std::__unwrap_and_dispatch[abi:nn180100]<std::__overload<std::__copy_loop<std::_ClassicAlgPolicy>,std::__copy_trivial>,re::DeformationStackDefinition const*,re::DeformationStackDefinition const*,re::DeformationStackDefinition*,0>(v14, v16, *((_QWORD *)v11 + 4) + 40 * v7);
        if (v15 - v7 != v10)
        {
          v17 = *((_QWORD *)v11 + 4) + 40 * *((_QWORD *)v11 + 2);
          v18 = 40 * v10 + 40 * v7 - 40 * v15;
          do
          {
            v19 = re::DynamicArray<re::DeformationDefinition>::DynamicArray(v17, v16);
            v16 += 5;
            v17 = v19 + 40;
            v18 -= 40;
          }
          while (v18);
        }
        *((_QWORD *)v11 + 2) = v13;
      }
      ++*((_DWORD *)v11 + 6);
    }
    v10 = *(_QWORD *)(v5 + 56);
    if (v10)
    {
      v21 = v20;
      v22 = *((_QWORD *)v20 + 7);
      v13 = v22 + 1;
      if (v22 + 1 <= v2)
      {
LABEL_30:
        v35 = 0;
        v47 = 0u;
        v48 = 0u;
        v45 = 0u;
        v46 = 0u;
        v44 = 0u;
        os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        v36 = 136315906;
        v37 = "copy";
        v38 = 1024;
        v39 = 643;
        v40 = 2048;
        v41 = v2;
        v42 = 2048;
        v43 = v13;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_31:
        re::internal::assertLog((re::internal *)7, v23, "assertion failure: '%s' (%s:line %i) Size overflow in DynamicArray<T>::copy(). size = %zu, pos = %zu, count = %zu", "!overflow", "copy", 647, v22, v2, v10);
        _os_crash();
        __break(1u);
      }
      v23 = v2 + v10;
      if (__CFADD__(v2, v10))
        goto LABEL_31;
      v24 = *(unint64_t **)(v5 + 72);
      if (v22 >= v23)
      {
        std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:nn180100]<re::MeshDeformationIndex const*,re::MeshDeformationIndex const*,re::MeshDeformationIndex*>(*(unint64_t **)(v5 + 72), &v24[6 * v10], *((_QWORD *)v20 + 9) + 48 * v2);
      }
      else
      {
        v33 = v2 + v10;
        re::DynamicArray<re::MeshDeformationIndex>::growCapacity((_QWORD *)v20 + 5, v23);
        v25 = *((_QWORD *)v21 + 7) - v2;
        v26 = &v24[6 * v25];
        std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:nn180100]<re::MeshDeformationIndex const*,re::MeshDeformationIndex const*,re::MeshDeformationIndex*>(v24, v26, *((_QWORD *)v21 + 9) + 48 * v2);
        if (v25 != v10)
        {
          v27 = 0;
          v28 = &v24[6 * v10];
          v10 = *((_QWORD *)v21 + 9) + 48 * *((_QWORD *)v21 + 7);
          do
          {
            v29 = &v26[v27];
            *(_BYTE *)(v10 + v27 * 8) = v26[v27];
            re::StringID::StringID((re::StringID *)(v10 + v27 * 8 + 8), (const StringID *)&v26[v27 + 1]);
            re::StringID::StringID((re::StringID *)(v10 + v27 * 8 + 24), (const StringID *)&v26[v27 + 3]);
            *(_QWORD *)(v10 + v27 * 8 + 40) = v26[v27 + 5];
            v27 += 6;
          }
          while (v29 + 6 != v28);
        }
        *((_QWORD *)v21 + 7) = v33;
      }
      ++*((_DWORD *)v21 + 16);
    }
    if (v2 < v30)
    {
      v13 = 48 * v2 + 40;
      while (1)
      {
        v32 = *((_QWORD *)v31 + 7);
        if (v32 <= v2)
          break;
        *(_QWORD *)(*((_QWORD *)v31 + 9) + v13) += v7;
        ++v2;
        v13 += 48;
        if (v30 == v2)
          goto LABEL_26;
      }
      v35 = 0;
      v47 = 0u;
      v48 = 0u;
      v45 = 0u;
      v46 = 0u;
      v44 = 0u;
      os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      v36 = 136315906;
      v37 = "operator[]";
      v38 = 1024;
      v39 = 789;
      v40 = 2048;
      v41 = v2;
      v42 = 2048;
      v43 = v32;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
      goto LABEL_28;
    }
  }
LABEL_26:
  re::AssetHandle::~AssetHandle((re::AssetHandle *)v34);
}

uint64_t re::AssetHandle::asset<re::MeshDeformationAsset>(re::MeshDeformationAsset *a1)
{
  uint64_t *v2;
  uint64_t v3;
  NSObject *v4;
  NSObject *v6;
  _QWORD *v7;
  char *v8;
  int v9;
  char *v10;
  uint64_t v11;

  v11 = *MEMORY[0x24BDAC8D0];
  v2 = re::MeshDeformationAsset::assetType(a1);
  v3 = re::AssetHandle::assetWithType(a1, (const re::AssetType *)v2, 0);
  if (!v3)
  {
    v4 = *re::assetsLogObjects(0);
    if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
    {
      v6 = v4;
      v7 = re::AssetHandle::assetInfo(a1);
      if ((v7[17] & 1) != 0)
        v8 = (char *)v7[18];
      else
        v8 = (char *)v7 + 137;
      v9 = 136315138;
      v10 = v8;
      _os_log_error_impl(&dword_224FE9000, v6, OS_LOG_TYPE_ERROR, "Invalid asset: '%s'", (uint8_t *)&v9, 0xCu);

    }
  }
  return v3;
}

re *`anonymous namespace'::MutableAssetRef<re::MeshDeformationAsset>::get(uint64_t *a1)
{
  re *result;
  uint64_t *v3;
  uint64_t v4;
  unsigned int v5;
  uint64_t v6;
  re *v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  _QWORD v16[3];
  _QWORD *v17;
  uint64_t v18;
  _QWORD v19[5];

  v19[4] = *MEMORY[0x24BDAC8D0];
  v3 = a1 + 3;
  result = (re *)a1[3];
  if (result)
    return result;
  v4 = a1[1];
  if (v4)
  {
    v5 = atomic_load((unsigned int *)(v4 + 704));
    if (v5 == 2)
      goto LABEL_7;
    v6 = a1[1];
  }
  else
  {
    v6 = 0;
  }
  re::AssetHandle::loadNow(v6, 0);
LABEL_7:
  result = (re *)re::AssetHandle::asset<re::MeshDeformationAsset>((re::MeshDeformationAsset *)a1);
  if (!result)
    return result;
  v7 = result;
  v8 = re::globalAllocators(result);
  v9 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v8[2] + 32))(v8[2], 80, 8);
  v10 = v9;
  *(_QWORD *)(v9 + 32) = 0;
  *(_QWORD *)(v9 + 8) = 0;
  *(_QWORD *)(v9 + 16) = 0;
  *(_QWORD *)v9 = 0;
  *(_DWORD *)(v9 + 24) = 0;
  if (*(_QWORD *)v7)
  {
    v11 = *((_QWORD *)v7 + 2);
    *(_QWORD *)v9 = *(_QWORD *)v7;
    re::DynamicArray<re::DeformationStackDefinition>::setCapacity((_QWORD *)v9, v11);
    ++*(_DWORD *)(v10 + 24);
    re::DynamicArray<re::DeformationStackDefinition>::copy((_QWORD *)v10, (uint64_t)v7);
  }
  *(_QWORD *)(v10 + 40) = 0;
  *(_QWORD *)(v10 + 48) = 0;
  *(_QWORD *)(v10 + 56) = 0;
  *(_DWORD *)(v10 + 64) = 0;
  v12 = *((_QWORD *)v7 + 5);
  *(_QWORD *)(v10 + 72) = 0;
  if (v12)
  {
    v13 = *((_QWORD *)v7 + 7);
    *(_QWORD *)(v10 + 40) = v12;
    re::DynamicArray<re::MeshDeformationIndex>::setCapacity((_QWORD *)(v10 + 40), v13);
    ++*(_DWORD *)(v10 + 64);
    re::DynamicArray<re::MeshDeformationIndex>::copy((_QWORD *)(v10 + 40), (uint64_t)v7 + 40);
  }
  v16[0] = &off_24ED9B2C8;
  v17 = v16;
  v18 = 0;
  v19[3] = v19;
  v19[0] = &off_24ED9B2C8;
  std::unique_ptr<re::RigHierarchy,std::function<void ()(re::RigHierarchy*)>>::reset[abi:nn180100](v3, v10);
  std::__function::__value_func<void ()(re::RigHierarchy *)>::operator=[abi:nn180100](a1 + 4, (uint64_t)v19);
  std::unique_ptr<re::RigHierarchy,std::function<void ()(re::RigHierarchy*)>>::~unique_ptr[abi:nn180100](&v18);
  v14 = v17;
  if (v17 == v16)
  {
    v15 = 4;
    v14 = v16;
    goto LABEL_16;
  }
  if (v17)
  {
    v15 = 5;
LABEL_16:
    (*(void (**)(void))(*v14 + 8 * v15))();
  }
  if (*a1)
  {

    *a1 = 0;
  }
  a1[1] = 0;
  return (re *)a1[3];
}

void REMeshDeformationDefinitionAssetBuilderAddDefaultDeformationStacksForMesh(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  const re::MeshAsset *v4;
  re *v5;
  uint64_t v6[3];

  re::AssetAPIHelper::assetHandleCreate(a2, v6);
  v3 = re::AssetHandle::asset<re::MeshAsset>((re::MeshAsset *)v6);
  if (v3)
  {
    v4 = (const re::MeshAsset *)v3;
    re::MeshDeformationAsset::addDefaultModelStackDefinitionsForAllInstances(v5, v4);
  }
  re::AssetHandle::~AssetHandle((re::AssetHandle *)v6);
}

uint64_t REMeshDeformationDefinitionAssetBuilderAddDefaultDeformationStacksForMeshModel(uint64_t a1, uint64_t a2, unint64_t a3)
{
  uint64_t v5;
  const re::MeshAsset *v6;
  uint64_t v7;
  re *v8;
  uint64_t v9;
  NSObject *v10;
  uint64_t v12[3];
  uint8_t buf[4];
  unint64_t v14;
  uint64_t v15;

  v15 = *MEMORY[0x24BDAC8D0];
  re::AssetAPIHelper::assetHandleCreate(a2, v12);
  v5 = re::AssetHandle::asset<re::MeshAsset>((re::MeshAsset *)v12);
  if (!v5)
  {
LABEL_11:
    v9 = 0;
    goto LABEL_12;
  }
  v6 = (const re::MeshAsset *)v5;
  v7 = 416;
  if (!*(_BYTE *)(v5 + 952))
    v7 = 24;
  if (*(_QWORD *)(v5 + v7) <= a3)
  {
    if (CoreRELog::onceToken != -1)
      dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
    v10 = (id)CoreRELog::log;
    if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 134217984;
      v14 = a3;
      _os_log_error_impl(&dword_224FE9000, v10, OS_LOG_TYPE_ERROR, "Invalid mesh model index: %zu", buf, 0xCu);
    }

    goto LABEL_11;
  }
  v9 = re::MeshDeformationAsset::addDefaultModelStackDefinitionForModel(v8, v6, a3);
LABEL_12:
  re::AssetHandle::~AssetHandle((re::AssetHandle *)v12);
  return v9;
}

uint64_t REMeshDeformationDefinitionAssetBuilderAddDefaultDeformationStacksForMeshInstance(uint64_t a1, uint64_t a2, unint64_t a3)
{
  uint64_t v5;
  const re::MeshAsset *v6;
  uint64_t v7;
  re *v8;
  uint64_t v9;
  NSObject *v10;
  uint64_t v12[3];
  uint8_t buf[4];
  unint64_t v14;
  uint64_t v15;

  v15 = *MEMORY[0x24BDAC8D0];
  re::AssetAPIHelper::assetHandleCreate(a2, v12);
  v5 = re::AssetHandle::asset<re::MeshAsset>((re::MeshAsset *)v12);
  if (!v5)
  {
LABEL_11:
    v9 = 0;
    goto LABEL_12;
  }
  v6 = (const re::MeshAsset *)v5;
  v7 = 376;
  if (!*(_BYTE *)(v5 + 952))
    v7 = 64;
  if (*(_QWORD *)(v5 + v7) <= a3)
  {
    if (CoreRELog::onceToken != -1)
      dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
    v10 = (id)CoreRELog::log;
    if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 134217984;
      v14 = a3;
      _os_log_error_impl(&dword_224FE9000, v10, OS_LOG_TYPE_ERROR, "Invalid mesh instance index: %zu", buf, 0xCu);
    }

    goto LABEL_11;
  }
  v9 = re::MeshDeformationAsset::addDefaultModelStackDefinitionForInstance(v8, v6, a3);
LABEL_12:
  re::AssetHandle::~AssetHandle((re::AssetHandle *)v12);
  return v9;
}

uint64_t REMeshDeformationDefinitionAssetBuilderGetDeformationStackCount(uint64_t a1)
{
                   + 16);
}

uint64_t `anonymous namespace'::MutableAssetRef<re::MeshDeformationAsset>::get(re::MeshDeformationAsset *a1)
{
  uint64_t result;
  uint64_t v3;
  unsigned int v4;
  uint64_t v5;

  result = *((_QWORD *)a1 + 3);
  if (!result)
  {
    v3 = *((_QWORD *)a1 + 1);
    if (v3)
    {
      v4 = atomic_load((unsigned int *)(v3 + 704));
      if (v4 == 2)
        return re::AssetHandle::asset<re::MeshDeformationAsset>(a1);
      v5 = *((_QWORD *)a1 + 1);
    }
    else
    {
      v5 = 0;
    }
    re::AssetHandle::loadNow(v5, 0);
    return re::AssetHandle::asset<re::MeshDeformationAsset>(a1);
  }
  return result;
}

uint64_t REMeshDeformationDefinitionAssetBuilderAddDeformationStack(uint64_t a1)
{
  uint64_t *v1;
  re *v2;
  _OWORD v4[2];
  uint64_t v5;

  v1 = (uint64_t *)(a1 + 24);
  v5 = 0;
  memset(v4, 0, sizeof(v4));
  re::DynamicArray<re::DeformationStackDefinition>::add(v2, (uint64_t)v4);
  re::DynamicArray<re::DeformationDefinition>::deinit((uint64_t)v4);
}

uint64_t REMeshDeformationDefinitionAssetBuilderGetDeformationStackDeformerCount(uint64_t a1, unint64_t a2)
{
  re::MeshDeformationAsset *v3;
  uint64_t v4;
  NSObject *v6;
  uint8_t buf[16];
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  uint64_t v12;

  v12 = *MEMORY[0x24BDAC8D0];
  v3 = (re::MeshDeformationAsset *)(a1 + 24);
                 + 16) > a2)
  {
    if (*(_QWORD *)(v4 + 16) > a2)
      return *(_QWORD *)(*(_QWORD *)(v4 + 32) + 40 * a2 + 16);
    v10 = 0u;
    v11 = 0u;
    v8 = 0u;
    v9 = 0u;
    *(_OWORD *)buf = 0u;
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
    goto LABEL_9;
  }
  if (CoreRELog::onceToken != -1)
LABEL_9:
    dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
  v6 = (id)CoreRELog::log;
  if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)buf = 134217984;
    *(_QWORD *)&buf[4] = a2;
    _os_log_error_impl(&dword_224FE9000, v6, OS_LOG_TYPE_ERROR, "Invalid deformation stack index: %zu", buf, 0xCu);
  }

  return 0;
}

CFTypeRef REMeshDeformationDefinitionAssetBuilderDeformationStackGetDeformerName(uint64_t a1, unint64_t a2, unint64_t a3)
{
  re::MeshDeformationAsset *v5;
  uint64_t v6;
  uint64_t v7;
  CFStringRef v8;
  NSObject *v10;
  NSObject *v11;
  uint8_t buf[16];
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  uint64_t v17;

  v17 = *MEMORY[0x24BDAC8D0];
  v5 = (re::MeshDeformationAsset *)(a1 + 24);
                 + 16) <= a2)
  {
    if (CoreRELog::onceToken == -1)
    {
LABEL_6:
      v10 = (id)CoreRELog::log;
      if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 134217984;
        *(_QWORD *)&buf[4] = a2;
        _os_log_error_impl(&dword_224FE9000, v10, OS_LOG_TYPE_ERROR, "Invalid deformation stack index: %zu", buf, 0xCu);
      }

      return 0;
    }
LABEL_16:
    dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
    goto LABEL_6;
  }
  if (*(_QWORD *)(v6 + 16) <= a2)
  {
    v15 = 0u;
    v16 = 0u;
    v13 = 0u;
    v14 = 0u;
    *(_OWORD *)buf = 0u;
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
    goto LABEL_16;
  }
  v7 = *(_QWORD *)(v6 + 32) + 40 * a2;
  if (*(_QWORD *)(v7 + 16) > a3)
  {
    v8 = CFStringCreateWithCString(0, *(const char **)(*(_QWORD *)(v7 + 32) + 40 * a3 + 8), 0x8000100u);
    return CFAutorelease(v8);
  }
  if (CoreRELog::onceToken != -1)
    dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
  v11 = (id)CoreRELog::log;
  if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)buf = 134217984;
    *(_QWORD *)&buf[4] = a3;
    _os_log_error_impl(&dword_224FE9000, v11, OS_LOG_TYPE_ERROR, "Invalid deformer index: %zu", buf, 0xCu);
  }

  return 0;
}

uint64_t REMeshDeformationDefinitionAssetBuilderDeformationStackRemoveDeformer(uint64_t a1, unint64_t a2, unint64_t a3)
{
  uint64_t *v5;
  re *v6;
  uint64_t v7;
  NSObject *v9;
  NSObject *v10;
  uint8_t buf[16];
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  uint64_t v16;

  v16 = *MEMORY[0x24BDAC8D0];
  v5 = (uint64_t *)(a1 + 24);
  {
    if (CoreRELog::onceToken == -1)
    {
LABEL_6:
      v9 = (id)CoreRELog::log;
      if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 134217984;
        *(_QWORD *)&buf[4] = a2;
        _os_log_error_impl(&dword_224FE9000, v9, OS_LOG_TYPE_ERROR, "Invalid deformation stack index: %zu", buf, 0xCu);
      }

      return 0;
    }
LABEL_16:
    dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
    goto LABEL_6;
  }
  if (*((_QWORD *)v6 + 2) <= a2)
  {
    v14 = 0u;
    v15 = 0u;
    v12 = 0u;
    v13 = 0u;
    *(_OWORD *)buf = 0u;
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
    goto LABEL_16;
  }
  v7 = *((_QWORD *)v6 + 4) + 40 * a2;
  if (*(_QWORD *)(v7 + 16) > a3)
  {
    re::DynamicArray<re::DeformationDefinition>::removeStableAt(v7, a3);
    return 1;
  }
  if (CoreRELog::onceToken != -1)
    dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
  v10 = (id)CoreRELog::log;
  if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)buf = 134217984;
    *(_QWORD *)&buf[4] = a3;
    _os_log_error_impl(&dword_224FE9000, v10, OS_LOG_TYPE_ERROR, "Invalid deformer index: %zu", buf, 0xCu);
  }

  return 0;
}

uint64_t REMeshDeformationDefinitionAssetBuilderDeformationStackMoveDeformer(uint64_t a1, unint64_t a2, unint64_t a3, unint64_t a4)
{
  uint64_t *v7;
  re *v8;
  _QWORD *v9;
  unint64_t v10;
  _QWORD *v11;
  NSObject *v13;
  const char *v14;
  NSObject *v15;
  uint8_t buf[16];
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  uint64_t v21;

  v21 = *MEMORY[0x24BDAC8D0];
  v7 = (uint64_t *)(a1 + 24);
  {
    if (CoreRELog::onceToken == -1)
    {
LABEL_11:
      v13 = (id)CoreRELog::log;
      if (!os_log_type_enabled(v13, OS_LOG_TYPE_ERROR))
      {
LABEL_16:

        return 0;
      }
      *(_DWORD *)buf = 134217984;
      *(_QWORD *)&buf[4] = a2;
      v14 = "Invalid deformation stack index: %zu";
LABEL_24:
      _os_log_error_impl(&dword_224FE9000, v13, OS_LOG_TYPE_ERROR, v14, buf, 0xCu);
      goto LABEL_16;
    }
LABEL_26:
    dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
    goto LABEL_11;
  }
  if (*((_QWORD *)v8 + 2) <= a2)
  {
    v19 = 0u;
    v20 = 0u;
    v17 = 0u;
    v18 = 0u;
    *(_OWORD *)buf = 0u;
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
    goto LABEL_26;
  }
  v9 = (_QWORD *)(*((_QWORD *)v8 + 4) + 40 * a2);
  v10 = v9[2];
  if (v10 <= a3)
  {
    if (CoreRELog::onceToken != -1)
      dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
    v13 = (id)CoreRELog::log;
    if (!os_log_type_enabled(v13, OS_LOG_TYPE_ERROR))
      goto LABEL_16;
    *(_DWORD *)buf = 134217984;
    *(_QWORD *)&buf[4] = a3;
    v14 = "Invalid deformer index: %zu";
    goto LABEL_24;
  }
  if (v10 <= a4)
  {
    if (CoreRELog::onceToken != -1)
      dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
    v15 = (id)CoreRELog::log;
    if (os_log_type_enabled(v15, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 134217984;
      *(_QWORD *)&buf[4] = a4;
      _os_log_error_impl(&dword_224FE9000, v15, OS_LOG_TYPE_ERROR, "Invalid new deformer index: %zu", buf, 0xCu);
    }

    return 0;
  }
  v11 = (_QWORD *)(v9[4] + 40 * a3);
  *(_QWORD *)buf = *v11;
  *(_QWORD *)&buf[8] = v11[1];
  *v11 = 0;
  v11[1] = &str_110;
  *(_QWORD *)&v17 = v11[2];
  v11[2] = 0;
  *((_QWORD *)&v17 + 1) = v11[3];
  v11[3] = 0;
  *(_QWORD *)&v18 = v11[4];
  v11[4] = 0;
  re::DynamicArray<re::DeformationDefinition>::removeStableAt((uint64_t)v9, a3);
  re::DynamicArray<re::DeformationDefinition>::insert(v9, a4, (uint64_t *)buf);
  if ((_QWORD)v17)
  {
    if (*((_QWORD *)&v17 + 1))
    {
      (*(void (**)(void))(*(_QWORD *)v17 + 40))();
      *((_QWORD *)&v17 + 1) = 0;
      *(_QWORD *)&v18 = 0;
    }
    *(_QWORD *)&v17 = 0;
  }
  re::StringID::destroyString((re::StringID *)buf);
  return 1;
}

uint64_t REMeshDeformationDefinitionAssetBuilderDeformationStackAddBlendShape(uint64_t a1, unint64_t a2)
{
  uint64_t *v3;
  re *v4;
  unint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  NSObject *v9;
  _BYTE v11[28];
  __int16 v12;
  unint64_t v13;
  uint8_t buf[16];
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  uint64_t v19;

  v19 = *MEMORY[0x24BDAC8D0];
  v3 = (uint64_t *)(a1 + 24);
  {
    v5 = *((_QWORD *)v4 + 2);
    if (v5 > a2)
    {
      v6 = (_QWORD *)(*((_QWORD *)v4 + 4) + 40 * a2);
      memset(v11, 0, 24);
      **(_DWORD **)&v11[16] = 0;
      *(_QWORD *)buf = 0x1954B86F1FEF5A4;
      *(_QWORD *)&buf[8] = "Blend Shape";
      v15 = *(_OWORD *)v11;
      v7 = *(_QWORD *)&v11[16];
      memset(v11, 0, 24);
      *(_QWORD *)&v16 = v7;
      re::DynamicArray<re::DeformationDefinition>::add(v6, (uint64_t *)buf);
      if ((_QWORD)v15)
      {
        if (*((_QWORD *)&v15 + 1))
        {
          (*(void (**)(void))(*(_QWORD *)v15 + 40))();
          *((_QWORD *)&v15 + 1) = 0;
          *(_QWORD *)&v16 = 0;
        }
        *(_QWORD *)&v15 = 0;
      }
      re::StringID::destroyString((re::StringID *)buf);
      v8 = v6[2] - 1;
      if (*(_QWORD *)v11 && *(_QWORD *)&v11[8])
        (*(void (**)(void))(**(_QWORD **)v11 + 40))();
      return v8;
    }
    v17 = 0u;
    v18 = 0u;
    v15 = 0u;
    v16 = 0u;
    *(_OWORD *)buf = 0u;
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    *(_DWORD *)v11 = 136315906;
    *(_QWORD *)&v11[4] = "operator[]";
    *(_WORD *)&v11[12] = 1024;
    *(_DWORD *)&v11[14] = 789;
    *(_WORD *)&v11[18] = 2048;
    *(_QWORD *)&v11[20] = a2;
    v12 = 2048;
    v13 = v5;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
    goto LABEL_16;
  }
  if (CoreRELog::onceToken != -1)
LABEL_16:
    dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
  v9 = (id)CoreRELog::log;
  if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)buf = 134217984;
    *(_QWORD *)&buf[4] = a2;
    _os_log_error_impl(&dword_224FE9000, v9, OS_LOG_TYPE_ERROR, "Invalid deformation stack index: %zu", buf, 0xCu);
  }

  return -1;
}

BOOL REMeshDeformationDefinitionAssetBuilderDeformerIsBlendShape(uint64_t a1, unint64_t a2, unint64_t a3)
{
  re::MeshDeformationAsset *v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  char *v9;
  NSObject *v11;
  NSObject *v12;
  uint8_t buf[16];
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  uint64_t v18;

  v18 = *MEMORY[0x24BDAC8D0];
  v5 = (re::MeshDeformationAsset *)(a1 + 24);
                 + 16) <= a2)
  {
    if (CoreRELog::onceToken == -1)
    {
LABEL_8:
      v11 = (id)CoreRELog::log;
      if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 134217984;
        *(_QWORD *)&buf[4] = a2;
        _os_log_error_impl(&dword_224FE9000, v11, OS_LOG_TYPE_ERROR, "Invalid deformation stack index: %zu", buf, 0xCu);
      }

      return 0;
    }
LABEL_19:
    dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
    goto LABEL_8;
  }
  if (*(_QWORD *)(v6 + 16) <= a2)
  {
    v16 = 0u;
    v17 = 0u;
    v14 = 0u;
    v15 = 0u;
    *(_OWORD *)buf = 0u;
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
    goto LABEL_19;
  }
  v7 = *(_QWORD *)(v6 + 32) + 40 * a2;
  if (*(_QWORD *)(v7 + 16) <= a3)
  {
    if (CoreRELog::onceToken != -1)
      dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
    v12 = (id)CoreRELog::log;
    if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 134217984;
      *(_QWORD *)&buf[4] = a3;
      _os_log_error_impl(&dword_224FE9000, v12, OS_LOG_TYPE_ERROR, "Invalid deformer index: %zu", buf, 0xCu);
    }

    return 0;
  }
  v8 = (_QWORD *)(*(_QWORD *)(v7 + 32) + 40 * a3);
  if (*v8 >> 1 != 0xCAA5C378FF7AD2)
    return 0;
  v9 = (char *)v8[1];
  return v9 == "Blend Shape" || strcmp(v9, "Blend Shape") == 0;
}

BOOL REMeshDeformationDefinitionAssetBuilderBlendShapeGetForceCPU(uint64_t a1, unint64_t a2, unint64_t a3)
{
  re::MeshDeformationAsset *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  char *v10;
  NSObject *v11;
  const char *v12;
  NSObject *v13;
  uint8_t buf[16];
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  uint64_t v20;

  v20 = *MEMORY[0x24BDAC8D0];
  v5 = (re::MeshDeformationAsset *)(a1 + 24);
                 + 16) <= a2)
  {
    if (CoreRELog::onceToken == -1)
    {
LABEL_12:
      v13 = (id)CoreRELog::log;
      if (os_log_type_enabled(v13, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 134217984;
        *(_QWORD *)&buf[4] = a2;
        _os_log_error_impl(&dword_224FE9000, v13, OS_LOG_TYPE_ERROR, "Invalid deformation stack index: %zu", buf, 0xCu);
      }

      return 0;
    }
LABEL_29:
    dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
    goto LABEL_12;
  }
  if (*(_QWORD *)(v6 + 16) <= a2)
  {
    v18 = 0u;
    v19 = 0u;
    v16 = 0u;
    v17 = 0u;
    *(_OWORD *)buf = 0u;
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
    goto LABEL_29;
  }
  v7 = *(_QWORD *)(v6 + 32) + 40 * a2;
  if (*(_QWORD *)(v7 + 16) <= a3)
  {
    if (CoreRELog::onceToken != -1)
      dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
    v11 = (id)CoreRELog::log;
    if (!os_log_type_enabled(v11, OS_LOG_TYPE_ERROR))
      goto LABEL_18;
    *(_DWORD *)buf = 134217984;
    *(_QWORD *)&buf[4] = a3;
    v12 = "Invalid deformer index: %zu";
    goto LABEL_27;
  }
  v8 = *(_QWORD *)(v7 + 32);
  v9 = (_QWORD *)(v8 + 40 * a3);
  if (*v9 >> 1 != 0xCAA5C378FF7AD2 || (v10 = (char *)v9[1], v10 != "Blend Shape") && strcmp(v10, "Blend Shape"))
  {
    if (CoreRELog::onceToken != -1)
      dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
    v11 = (id)CoreRELog::log;
    if (!os_log_type_enabled(v11, OS_LOG_TYPE_ERROR))
      goto LABEL_18;
    *(_DWORD *)buf = 134217984;
    *(_QWORD *)&buf[4] = a3;
    v12 = "Not a blend shape deformer index: %zu";
LABEL_27:
    _os_log_error_impl(&dword_224FE9000, v11, OS_LOG_TYPE_ERROR, v12, buf, 0xCu);
LABEL_18:

    return 0;
  }
  if (*(_QWORD *)(v8 + 40 * a3 + 24) != 4)
  {
    if (CoreRELog::onceToken != -1)
      dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
    v11 = (id)CoreRELog::log;
    if (!os_log_type_enabled(v11, OS_LOG_TYPE_ERROR))
      goto LABEL_18;
    *(_DWORD *)buf = 134217984;
    *(_QWORD *)&buf[4] = a3;
    v12 = "Unexpected blend shape deformation option size for deformer index: %zu";
    goto LABEL_27;
  }
  return **(_BYTE **)(v8 + 40 * a3 + 32) != 0;
}

uint64_t REMeshDeformationDefinitionAssetBuilderBlendShapeSetForceCPU(uint64_t a1, unint64_t a2, unint64_t a3, char a4)
{
  uint64_t *v7;
  re *v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  char *v12;
  NSObject *v13;
  const char *v14;
  NSObject *v15;
  uint8_t buf[16];
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  uint64_t v22;

  v22 = *MEMORY[0x24BDAC8D0];
  v7 = (uint64_t *)(a1 + 24);
  {
    if (CoreRELog::onceToken == -1)
    {
LABEL_12:
      v15 = (id)CoreRELog::log;
      if (os_log_type_enabled(v15, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 134217984;
        *(_QWORD *)&buf[4] = a2;
        _os_log_error_impl(&dword_224FE9000, v15, OS_LOG_TYPE_ERROR, "Invalid deformation stack index: %zu", buf, 0xCu);
      }

      return 0;
    }
LABEL_29:
    dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
    goto LABEL_12;
  }
  if (*((_QWORD *)v8 + 2) <= a2)
  {
    v20 = 0u;
    v21 = 0u;
    v18 = 0u;
    v19 = 0u;
    *(_OWORD *)buf = 0u;
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
    goto LABEL_29;
  }
  v9 = *((_QWORD *)v8 + 4) + 40 * a2;
  if (*(_QWORD *)(v9 + 16) <= a3)
  {
    if (CoreRELog::onceToken != -1)
      dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
    v13 = (id)CoreRELog::log;
    if (!os_log_type_enabled(v13, OS_LOG_TYPE_ERROR))
      goto LABEL_18;
    *(_DWORD *)buf = 134217984;
    *(_QWORD *)&buf[4] = a3;
    v14 = "Invalid deformer index: %zu";
    goto LABEL_27;
  }
  v10 = *(_QWORD *)(v9 + 32);
  v11 = (_QWORD *)(v10 + 40 * a3);
  if (*v11 >> 1 != 0xCAA5C378FF7AD2 || (v12 = (char *)v11[1], v12 != "Blend Shape") && strcmp(v12, "Blend Shape"))
  {
    if (CoreRELog::onceToken != -1)
      dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
    v13 = (id)CoreRELog::log;
    if (!os_log_type_enabled(v13, OS_LOG_TYPE_ERROR))
      goto LABEL_18;
    *(_DWORD *)buf = 134217984;
    *(_QWORD *)&buf[4] = a3;
    v14 = "Not a blend shape deformer index: %zu";
LABEL_27:
    _os_log_error_impl(&dword_224FE9000, v13, OS_LOG_TYPE_ERROR, v14, buf, 0xCu);
LABEL_18:

    return 0;
  }
  if (*(_QWORD *)(v10 + 40 * a3 + 24) != 4)
  {
    if (CoreRELog::onceToken != -1)
      dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
    v13 = (id)CoreRELog::log;
    if (!os_log_type_enabled(v13, OS_LOG_TYPE_ERROR))
      goto LABEL_18;
    *(_DWORD *)buf = 134217984;
    *(_QWORD *)&buf[4] = a3;
    v14 = "Unexpected blend shape deformation option size for deformer index: %zu";
    goto LABEL_27;
  }
  **(_BYTE **)(v10 + 40 * a3 + 32) = a4;
  return 1;
}

uint64_t REMeshDeformationDefinitionAssetBuilderDeformationStackAddSkinning(uint64_t a1, unint64_t a2)
{
  uint64_t *v3;
  re *v4;
  unint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  NSObject *v9;
  _BYTE v11[28];
  __int16 v12;
  unint64_t v13;
  uint8_t buf[16];
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  uint64_t v19;

  v19 = *MEMORY[0x24BDAC8D0];
  v3 = (uint64_t *)(a1 + 24);
  {
    v5 = *((_QWORD *)v4 + 2);
    if (v5 > a2)
    {
      v6 = (_QWORD *)(*((_QWORD *)v4 + 4) + 40 * a2);
      memset(v11, 0, 24);
      **(_WORD **)&v11[16] = 0;
      *(_QWORD *)buf = 0x4550755B7A2;
      *(_QWORD *)&buf[8] = "Skinning";
      v15 = *(_OWORD *)v11;
      v7 = *(_QWORD *)&v11[16];
      memset(v11, 0, 24);
      *(_QWORD *)&v16 = v7;
      re::DynamicArray<re::DeformationDefinition>::add(v6, (uint64_t *)buf);
      if ((_QWORD)v15)
      {
        if (*((_QWORD *)&v15 + 1))
        {
          (*(void (**)(void))(*(_QWORD *)v15 + 40))();
          *((_QWORD *)&v15 + 1) = 0;
          *(_QWORD *)&v16 = 0;
        }
        *(_QWORD *)&v15 = 0;
      }
      re::StringID::destroyString((re::StringID *)buf);
      v8 = v6[2] - 1;
      if (*(_QWORD *)v11 && *(_QWORD *)&v11[8])
        (*(void (**)(void))(**(_QWORD **)v11 + 40))();
      return v8;
    }
    v17 = 0u;
    v18 = 0u;
    v15 = 0u;
    v16 = 0u;
    *(_OWORD *)buf = 0u;
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    *(_DWORD *)v11 = 136315906;
    *(_QWORD *)&v11[4] = "operator[]";
    *(_WORD *)&v11[12] = 1024;
    *(_DWORD *)&v11[14] = 789;
    *(_WORD *)&v11[18] = 2048;
    *(_QWORD *)&v11[20] = a2;
    v12 = 2048;
    v13 = v5;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
    goto LABEL_16;
  }
  if (CoreRELog::onceToken != -1)
LABEL_16:
    dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
  v9 = (id)CoreRELog::log;
  if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)buf = 134217984;
    *(_QWORD *)&buf[4] = a2;
    _os_log_error_impl(&dword_224FE9000, v9, OS_LOG_TYPE_ERROR, "Invalid deformation stack index: %zu", buf, 0xCu);
  }

  return -1;
}

BOOL REMeshDeformationDefinitionAssetBuilderDeformerIsSkinning(uint64_t a1, unint64_t a2, unint64_t a3)
{
  re::MeshDeformationAsset *v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  char *v9;
  NSObject *v11;
  NSObject *v12;
  uint8_t buf[16];
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  uint64_t v18;

  v18 = *MEMORY[0x24BDAC8D0];
  v5 = (re::MeshDeformationAsset *)(a1 + 24);
                 + 16) <= a2)
  {
    if (CoreRELog::onceToken == -1)
    {
LABEL_8:
      v11 = (id)CoreRELog::log;
      if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 134217984;
        *(_QWORD *)&buf[4] = a2;
        _os_log_error_impl(&dword_224FE9000, v11, OS_LOG_TYPE_ERROR, "Invalid deformation stack index: %zu", buf, 0xCu);
      }

      return 0;
    }
LABEL_19:
    dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
    goto LABEL_8;
  }
  if (*(_QWORD *)(v6 + 16) <= a2)
  {
    v16 = 0u;
    v17 = 0u;
    v14 = 0u;
    v15 = 0u;
    *(_OWORD *)buf = 0u;
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
    goto LABEL_19;
  }
  v7 = *(_QWORD *)(v6 + 32) + 40 * a2;
  if (*(_QWORD *)(v7 + 16) <= a3)
  {
    if (CoreRELog::onceToken != -1)
      dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
    v12 = (id)CoreRELog::log;
    if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 134217984;
      *(_QWORD *)&buf[4] = a3;
      _os_log_error_impl(&dword_224FE9000, v12, OS_LOG_TYPE_ERROR, "Invalid deformer index: %zu", buf, 0xCu);
    }

    return 0;
  }
  v8 = (_QWORD *)(*(_QWORD *)(v7 + 32) + 40 * a3);
  if (*v8 >> 1 != 0x22A83AADBD1)
    return 0;
  v9 = (char *)v8[1];
  return v9 == "Skinning" || strcmp(v9, "Skinning") == 0;
}

BOOL REMeshDeformationDefinitionAssetBuilderSkinningGetForceCPU(uint64_t a1, unint64_t a2, unint64_t a3)
{
  re::MeshDeformationAsset *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  char *v10;
  NSObject *v11;
  const char *v12;
  NSObject *v13;
  uint8_t buf[16];
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  uint64_t v20;

  v20 = *MEMORY[0x24BDAC8D0];
  v5 = (re::MeshDeformationAsset *)(a1 + 24);
                 + 16) <= a2)
  {
    if (CoreRELog::onceToken == -1)
    {
LABEL_12:
      v13 = (id)CoreRELog::log;
      if (os_log_type_enabled(v13, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 134217984;
        *(_QWORD *)&buf[4] = a2;
        _os_log_error_impl(&dword_224FE9000, v13, OS_LOG_TYPE_ERROR, "Invalid deformation stack index: %zu", buf, 0xCu);
      }

      return 0;
    }
LABEL_29:
    dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
    goto LABEL_12;
  }
  if (*(_QWORD *)(v6 + 16) <= a2)
  {
    v18 = 0u;
    v19 = 0u;
    v16 = 0u;
    v17 = 0u;
    *(_OWORD *)buf = 0u;
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
    goto LABEL_29;
  }
  v7 = *(_QWORD *)(v6 + 32) + 40 * a2;
  if (*(_QWORD *)(v7 + 16) <= a3)
  {
    if (CoreRELog::onceToken != -1)
      dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
    v11 = (id)CoreRELog::log;
    if (!os_log_type_enabled(v11, OS_LOG_TYPE_ERROR))
      goto LABEL_18;
    *(_DWORD *)buf = 134217984;
    *(_QWORD *)&buf[4] = a3;
    v12 = "Invalid deformer index: %zu";
    goto LABEL_27;
  }
  v8 = *(_QWORD *)(v7 + 32);
  v9 = (_QWORD *)(v8 + 40 * a3);
  if (*v9 >> 1 != 0x22A83AADBD1 || (v10 = (char *)v9[1], v10 != "Skinning") && strcmp(v10, "Skinning"))
  {
    if (CoreRELog::onceToken != -1)
      dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
    v11 = (id)CoreRELog::log;
    if (!os_log_type_enabled(v11, OS_LOG_TYPE_ERROR))
      goto LABEL_18;
    *(_DWORD *)buf = 134217984;
    *(_QWORD *)&buf[4] = a3;
    v12 = "Not a skinning deformer index: %zu";
LABEL_27:
    _os_log_error_impl(&dword_224FE9000, v11, OS_LOG_TYPE_ERROR, v12, buf, 0xCu);
LABEL_18:

    return 0;
  }
  if (*(_QWORD *)(v8 + 40 * a3 + 24) != 2)
  {
    if (CoreRELog::onceToken != -1)
      dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
    v11 = (id)CoreRELog::log;
    if (!os_log_type_enabled(v11, OS_LOG_TYPE_ERROR))
      goto LABEL_18;
    *(_DWORD *)buf = 134217984;
    *(_QWORD *)&buf[4] = a3;
    v12 = "Unexpected skinning deformation option size for deformer index: %zu";
    goto LABEL_27;
  }
  return **(_BYTE **)(v8 + 40 * a3 + 32) != 0;
}

uint64_t REMeshDeformationDefinitionAssetBuilderSkinningSetForceCPU(uint64_t a1, unint64_t a2, unint64_t a3, char a4)
{
  uint64_t *v7;
  re *v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  char *v12;
  NSObject *v13;
  const char *v14;
  NSObject *v15;
  uint8_t buf[16];
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  uint64_t v22;

  v22 = *MEMORY[0x24BDAC8D0];
  v7 = (uint64_t *)(a1 + 24);
  {
    if (CoreRELog::onceToken == -1)
    {
LABEL_12:
      v15 = (id)CoreRELog::log;
      if (os_log_type_enabled(v15, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 134217984;
        *(_QWORD *)&buf[4] = a2;
        _os_log_error_impl(&dword_224FE9000, v15, OS_LOG_TYPE_ERROR, "Invalid deformation stack index: %zu", buf, 0xCu);
      }

      return 0;
    }
LABEL_29:
    dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
    goto LABEL_12;
  }
  if (*((_QWORD *)v8 + 2) <= a2)
  {
    v20 = 0u;
    v21 = 0u;
    v18 = 0u;
    v19 = 0u;
    *(_OWORD *)buf = 0u;
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
    goto LABEL_29;
  }
  v9 = *((_QWORD *)v8 + 4) + 40 * a2;
  if (*(_QWORD *)(v9 + 16) <= a3)
  {
    if (CoreRELog::onceToken != -1)
      dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
    v13 = (id)CoreRELog::log;
    if (!os_log_type_enabled(v13, OS_LOG_TYPE_ERROR))
      goto LABEL_18;
    *(_DWORD *)buf = 134217984;
    *(_QWORD *)&buf[4] = a3;
    v14 = "Invalid deformer index: %zu";
    goto LABEL_27;
  }
  v10 = *(_QWORD *)(v9 + 32);
  v11 = (_QWORD *)(v10 + 40 * a3);
  if (*v11 >> 1 != 0x22A83AADBD1 || (v12 = (char *)v11[1], v12 != "Skinning") && strcmp(v12, "Skinning"))
  {
    if (CoreRELog::onceToken != -1)
      dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
    v13 = (id)CoreRELog::log;
    if (!os_log_type_enabled(v13, OS_LOG_TYPE_ERROR))
      goto LABEL_18;
    *(_DWORD *)buf = 134217984;
    *(_QWORD *)&buf[4] = a3;
    v14 = "Not a skinning deformer index: %zu";
LABEL_27:
    _os_log_error_impl(&dword_224FE9000, v13, OS_LOG_TYPE_ERROR, v14, buf, 0xCu);
LABEL_18:

    return 0;
  }
  if (*(_QWORD *)(v10 + 40 * a3 + 24) != 2)
  {
    if (CoreRELog::onceToken != -1)
      dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
    v13 = (id)CoreRELog::log;
    if (!os_log_type_enabled(v13, OS_LOG_TYPE_ERROR))
      goto LABEL_18;
    *(_DWORD *)buf = 134217984;
    *(_QWORD *)&buf[4] = a3;
    v14 = "Unexpected skinning deformation option size for deformer index: %zu";
    goto LABEL_27;
  }
  **(_BYTE **)(v10 + 40 * a3 + 32) = a4;
  return 1;
}

BOOL REMeshDeformationDefinitionAssetBuilderSkinningGetEnableSkinningVertexFrame(uint64_t a1, unint64_t a2, unint64_t a3)
{
  re::MeshDeformationAsset *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  char *v10;
  NSObject *v11;
  const char *v12;
  NSObject *v13;
  uint8_t buf[16];
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  uint64_t v20;

  v20 = *MEMORY[0x24BDAC8D0];
  v5 = (re::MeshDeformationAsset *)(a1 + 24);
                 + 16) <= a2)
  {
    if (CoreRELog::onceToken == -1)
    {
LABEL_12:
      v13 = (id)CoreRELog::log;
      if (os_log_type_enabled(v13, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 134217984;
        *(_QWORD *)&buf[4] = a2;
        _os_log_error_impl(&dword_224FE9000, v13, OS_LOG_TYPE_ERROR, "Invalid deformation stack index: %zu", buf, 0xCu);
      }

      return 0;
    }
LABEL_29:
    dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
    goto LABEL_12;
  }
  if (*(_QWORD *)(v6 + 16) <= a2)
  {
    v18 = 0u;
    v19 = 0u;
    v16 = 0u;
    v17 = 0u;
    *(_OWORD *)buf = 0u;
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
    goto LABEL_29;
  }
  v7 = *(_QWORD *)(v6 + 32) + 40 * a2;
  if (*(_QWORD *)(v7 + 16) <= a3)
  {
    if (CoreRELog::onceToken != -1)
      dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
    v11 = (id)CoreRELog::log;
    if (!os_log_type_enabled(v11, OS_LOG_TYPE_ERROR))
      goto LABEL_18;
    *(_DWORD *)buf = 134217984;
    *(_QWORD *)&buf[4] = a3;
    v12 = "Invalid deformer index: %zu";
    goto LABEL_27;
  }
  v8 = *(_QWORD *)(v7 + 32);
  v9 = (_QWORD *)(v8 + 40 * a3);
  if (*v9 >> 1 != 0x22A83AADBD1 || (v10 = (char *)v9[1], v10 != "Skinning") && strcmp(v10, "Skinning"))
  {
    if (CoreRELog::onceToken != -1)
      dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
    v11 = (id)CoreRELog::log;
    if (!os_log_type_enabled(v11, OS_LOG_TYPE_ERROR))
      goto LABEL_18;
    *(_DWORD *)buf = 134217984;
    *(_QWORD *)&buf[4] = a3;
    v12 = "Not a skinning deformer index: %zu";
LABEL_27:
    _os_log_error_impl(&dword_224FE9000, v11, OS_LOG_TYPE_ERROR, v12, buf, 0xCu);
LABEL_18:

    return 0;
  }
  if (*(_QWORD *)(v8 + 40 * a3 + 24) != 2)
  {
    if (CoreRELog::onceToken != -1)
      dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
    v11 = (id)CoreRELog::log;
    if (!os_log_type_enabled(v11, OS_LOG_TYPE_ERROR))
      goto LABEL_18;
    *(_DWORD *)buf = 134217984;
    *(_QWORD *)&buf[4] = a3;
    v12 = "Unexpected skinning deformation option size for deformer index: %zu";
    goto LABEL_27;
  }
  return *(_BYTE *)(*(_QWORD *)(v8 + 40 * a3 + 32) + 1) != 0;
}

uint64_t REMeshDeformationDefinitionAssetBuilderSkinningSetEnableSkinningVertexFrame(uint64_t a1, unint64_t a2, unint64_t a3, char a4)
{
  uint64_t *v7;
  re *v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  char *v12;
  NSObject *v13;
  const char *v14;
  NSObject *v15;
  uint8_t buf[16];
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  uint64_t v22;

  v22 = *MEMORY[0x24BDAC8D0];
  v7 = (uint64_t *)(a1 + 24);
  {
    if (CoreRELog::onceToken == -1)
    {
LABEL_12:
      v15 = (id)CoreRELog::log;
      if (os_log_type_enabled(v15, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 134217984;
        *(_QWORD *)&buf[4] = a2;
        _os_log_error_impl(&dword_224FE9000, v15, OS_LOG_TYPE_ERROR, "Invalid deformation stack index: %zu", buf, 0xCu);
      }

      return 0;
    }
LABEL_29:
    dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
    goto LABEL_12;
  }
  if (*((_QWORD *)v8 + 2) <= a2)
  {
    v20 = 0u;
    v21 = 0u;
    v18 = 0u;
    v19 = 0u;
    *(_OWORD *)buf = 0u;
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
    goto LABEL_29;
  }
  v9 = *((_QWORD *)v8 + 4) + 40 * a2;
  if (*(_QWORD *)(v9 + 16) <= a3)
  {
    if (CoreRELog::onceToken != -1)
      dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
    v13 = (id)CoreRELog::log;
    if (!os_log_type_enabled(v13, OS_LOG_TYPE_ERROR))
      goto LABEL_18;
    *(_DWORD *)buf = 134217984;
    *(_QWORD *)&buf[4] = a3;
    v14 = "Invalid deformer index: %zu";
    goto LABEL_27;
  }
  v10 = *(_QWORD *)(v9 + 32);
  v11 = (_QWORD *)(v10 + 40 * a3);
  if (*v11 >> 1 != 0x22A83AADBD1 || (v12 = (char *)v11[1], v12 != "Skinning") && strcmp(v12, "Skinning"))
  {
    if (CoreRELog::onceToken != -1)
      dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
    v13 = (id)CoreRELog::log;
    if (!os_log_type_enabled(v13, OS_LOG_TYPE_ERROR))
      goto LABEL_18;
    *(_DWORD *)buf = 134217984;
    *(_QWORD *)&buf[4] = a3;
    v14 = "Not a skinning deformer index: %zu";
LABEL_27:
    _os_log_error_impl(&dword_224FE9000, v13, OS_LOG_TYPE_ERROR, v14, buf, 0xCu);
LABEL_18:

    return 0;
  }
  if (*(_QWORD *)(v10 + 40 * a3 + 24) != 2)
  {
    if (CoreRELog::onceToken != -1)
      dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
    v13 = (id)CoreRELog::log;
    if (!os_log_type_enabled(v13, OS_LOG_TYPE_ERROR))
      goto LABEL_18;
    *(_DWORD *)buf = 134217984;
    *(_QWORD *)&buf[4] = a3;
    v14 = "Unexpected skinning deformation option size for deformer index: %zu";
    goto LABEL_27;
  }
  *(_BYTE *)(*(_QWORD *)(v10 + 40 * a3 + 32) + 1) = a4;
  return 1;
}

uint64_t REMeshDeformationDefinitionAssetBuilderDeformationStackAddRenormalization(uint64_t a1, unint64_t a2)
{
  uint64_t *v3;
  re *v4;
  unint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  NSObject *v9;
  _BYTE v11[28];
  __int16 v12;
  unint64_t v13;
  uint8_t buf[16];
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  uint64_t v19;

  v19 = *MEMORY[0x24BDAC8D0];
  v3 = (uint64_t *)(a1 + 24);
  {
    v5 = *((_QWORD *)v4 + 2);
    if (v5 > a2)
    {
      v6 = (_QWORD *)(*((_QWORD *)v4 + 4) + 40 * a2);
      memset(v11, 0, 24);
      **(_BYTE **)&v11[16] = 0;
      *(_QWORD *)buf = 0xABCEC87F22A13454;
      *(_QWORD *)&buf[8] = "Renormalization";
      v15 = *(_OWORD *)v11;
      v7 = *(_QWORD *)&v11[16];
      memset(v11, 0, 24);
      *(_QWORD *)&v16 = v7;
      re::DynamicArray<re::DeformationDefinition>::add(v6, (uint64_t *)buf);
      if ((_QWORD)v15)
      {
        if (*((_QWORD *)&v15 + 1))
        {
          (*(void (**)(void))(*(_QWORD *)v15 + 40))();
          *((_QWORD *)&v15 + 1) = 0;
          *(_QWORD *)&v16 = 0;
        }
        *(_QWORD *)&v15 = 0;
      }
      re::StringID::destroyString((re::StringID *)buf);
      v8 = v6[2] - 1;
      if (*(_QWORD *)v11 && *(_QWORD *)&v11[8])
        (*(void (**)(void))(**(_QWORD **)v11 + 40))();
      return v8;
    }
    v17 = 0u;
    v18 = 0u;
    v15 = 0u;
    v16 = 0u;
    *(_OWORD *)buf = 0u;
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    *(_DWORD *)v11 = 136315906;
    *(_QWORD *)&v11[4] = "operator[]";
    *(_WORD *)&v11[12] = 1024;
    *(_DWORD *)&v11[14] = 789;
    *(_WORD *)&v11[18] = 2048;
    *(_QWORD *)&v11[20] = a2;
    v12 = 2048;
    v13 = v5;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
    goto LABEL_16;
  }
  if (CoreRELog::onceToken != -1)
LABEL_16:
    dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
  v9 = (id)CoreRELog::log;
  if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)buf = 134217984;
    *(_QWORD *)&buf[4] = a2;
    _os_log_error_impl(&dword_224FE9000, v9, OS_LOG_TYPE_ERROR, "Invalid deformation stack index: %zu", buf, 0xCu);
  }

  return -1;
}

BOOL REMeshDeformationDefinitionAssetBuilderDeformerIsRenormalization(uint64_t a1, unint64_t a2, unint64_t a3)
{
  re::MeshDeformationAsset *v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  char *v9;
  NSObject *v11;
  NSObject *v12;
  uint8_t buf[16];
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  uint64_t v18;

  v18 = *MEMORY[0x24BDAC8D0];
  v5 = (re::MeshDeformationAsset *)(a1 + 24);
                 + 16) <= a2)
  {
    if (CoreRELog::onceToken == -1)
    {
LABEL_8:
      v11 = (id)CoreRELog::log;
      if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 134217984;
        *(_QWORD *)&buf[4] = a2;
        _os_log_error_impl(&dword_224FE9000, v11, OS_LOG_TYPE_ERROR, "Invalid deformation stack index: %zu", buf, 0xCu);
      }

      return 0;
    }
LABEL_19:
    dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
    goto LABEL_8;
  }
  if (*(_QWORD *)(v6 + 16) <= a2)
  {
    v16 = 0u;
    v17 = 0u;
    v14 = 0u;
    v15 = 0u;
    *(_OWORD *)buf = 0u;
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
    goto LABEL_19;
  }
  v7 = *(_QWORD *)(v6 + 32) + 40 * a2;
  if (*(_QWORD *)(v7 + 16) <= a3)
  {
    if (CoreRELog::onceToken != -1)
      dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
    v12 = (id)CoreRELog::log;
    if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 134217984;
      *(_QWORD *)&buf[4] = a3;
      _os_log_error_impl(&dword_224FE9000, v12, OS_LOG_TYPE_ERROR, "Invalid deformer index: %zu", buf, 0xCu);
    }

    return 0;
  }
  v8 = (_QWORD *)(*(_QWORD *)(v7 + 32) + 40 * a3);
  if (*v8 >> 1 != 0x55E7643F91509A2ALL)
    return 0;
  v9 = (char *)v8[1];
  return v9 == "Renormalization" || strcmp(v9, "Renormalization") == 0;
}

BOOL REMeshDeformationDefinitionAssetBuilderRenormalizationGetForceCPU(uint64_t a1, unint64_t a2, unint64_t a3)
{
  re::MeshDeformationAsset *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  char *v10;
  NSObject *v11;
  const char *v12;
  NSObject *v13;
  uint8_t buf[16];
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  uint64_t v20;

  v20 = *MEMORY[0x24BDAC8D0];
  v5 = (re::MeshDeformationAsset *)(a1 + 24);
                 + 16) <= a2)
  {
    if (CoreRELog::onceToken == -1)
    {
LABEL_12:
      v13 = (id)CoreRELog::log;
      if (os_log_type_enabled(v13, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 134217984;
        *(_QWORD *)&buf[4] = a2;
        _os_log_error_impl(&dword_224FE9000, v13, OS_LOG_TYPE_ERROR, "Invalid deformation stack index: %zu", buf, 0xCu);
      }

      return 0;
    }
LABEL_29:
    dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
    goto LABEL_12;
  }
  if (*(_QWORD *)(v6 + 16) <= a2)
  {
    v18 = 0u;
    v19 = 0u;
    v16 = 0u;
    v17 = 0u;
    *(_OWORD *)buf = 0u;
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
    goto LABEL_29;
  }
  v7 = *(_QWORD *)(v6 + 32) + 40 * a2;
  if (*(_QWORD *)(v7 + 16) <= a3)
  {
    if (CoreRELog::onceToken != -1)
      dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
    v11 = (id)CoreRELog::log;
    if (!os_log_type_enabled(v11, OS_LOG_TYPE_ERROR))
      goto LABEL_18;
    *(_DWORD *)buf = 134217984;
    *(_QWORD *)&buf[4] = a3;
    v12 = "Invalid deformer index: %zu";
    goto LABEL_27;
  }
  v8 = *(_QWORD *)(v7 + 32);
  v9 = (_QWORD *)(v8 + 40 * a3);
  if (*v9 >> 1 != 0x55E7643F91509A2ALL
    || (v10 = (char *)v9[1], v10 != "Renormalization") && strcmp(v10, "Renormalization"))
  {
    if (CoreRELog::onceToken != -1)
      dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
    v11 = (id)CoreRELog::log;
    if (!os_log_type_enabled(v11, OS_LOG_TYPE_ERROR))
      goto LABEL_18;
    *(_DWORD *)buf = 134217984;
    *(_QWORD *)&buf[4] = a3;
    v12 = "Not a renormalization deformer index: %zu";
LABEL_27:
    _os_log_error_impl(&dword_224FE9000, v11, OS_LOG_TYPE_ERROR, v12, buf, 0xCu);
LABEL_18:

    return 0;
  }
  if (*(_QWORD *)(v8 + 40 * a3 + 24) != 1)
  {
    if (CoreRELog::onceToken != -1)
      dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
    v11 = (id)CoreRELog::log;
    if (!os_log_type_enabled(v11, OS_LOG_TYPE_ERROR))
      goto LABEL_18;
    *(_DWORD *)buf = 134217984;
    *(_QWORD *)&buf[4] = a3;
    v12 = "Unexpected renormalization deformation option size for deformer index: %zu";
    goto LABEL_27;
  }
  return **(_BYTE **)(v8 + 40 * a3 + 32) != 0;
}

uint64_t REMeshDeformationDefinitionAssetBuilderRenormalizationSetForceCPU(uint64_t a1, unint64_t a2, unint64_t a3, char a4)
{
  uint64_t *v7;
  re *v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  char *v12;
  NSObject *v13;
  const char *v14;
  NSObject *v15;
  uint8_t buf[16];
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  uint64_t v22;

  v22 = *MEMORY[0x24BDAC8D0];
  v7 = (uint64_t *)(a1 + 24);
  {
    if (CoreRELog::onceToken == -1)
    {
LABEL_12:
      v15 = (id)CoreRELog::log;
      if (os_log_type_enabled(v15, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 134217984;
        *(_QWORD *)&buf[4] = a2;
        _os_log_error_impl(&dword_224FE9000, v15, OS_LOG_TYPE_ERROR, "Invalid deformation stack index: %zu", buf, 0xCu);
      }

      return 0;
    }
LABEL_29:
    dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
    goto LABEL_12;
  }
  if (*((_QWORD *)v8 + 2) <= a2)
  {
    v20 = 0u;
    v21 = 0u;
    v18 = 0u;
    v19 = 0u;
    *(_OWORD *)buf = 0u;
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
    goto LABEL_29;
  }
  v9 = *((_QWORD *)v8 + 4) + 40 * a2;
  if (*(_QWORD *)(v9 + 16) <= a3)
  {
    if (CoreRELog::onceToken != -1)
      dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
    v13 = (id)CoreRELog::log;
    if (!os_log_type_enabled(v13, OS_LOG_TYPE_ERROR))
      goto LABEL_18;
    *(_DWORD *)buf = 134217984;
    *(_QWORD *)&buf[4] = a3;
    v14 = "Invalid deformer index: %zu";
    goto LABEL_27;
  }
  v10 = *(_QWORD *)(v9 + 32);
  v11 = (_QWORD *)(v10 + 40 * a3);
  if (*v11 >> 1 != 0x55E7643F91509A2ALL
    || (v12 = (char *)v11[1], v12 != "Renormalization") && strcmp(v12, "Renormalization"))
  {
    if (CoreRELog::onceToken != -1)
      dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
    v13 = (id)CoreRELog::log;
    if (!os_log_type_enabled(v13, OS_LOG_TYPE_ERROR))
      goto LABEL_18;
    *(_DWORD *)buf = 134217984;
    *(_QWORD *)&buf[4] = a3;
    v14 = "Not a renormalization deformer index: %zu";
LABEL_27:
    _os_log_error_impl(&dword_224FE9000, v13, OS_LOG_TYPE_ERROR, v14, buf, 0xCu);
LABEL_18:

    return 0;
  }
  if (*(_QWORD *)(v10 + 40 * a3 + 24) != 1)
  {
    if (CoreRELog::onceToken != -1)
      dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
    v13 = (id)CoreRELog::log;
    if (!os_log_type_enabled(v13, OS_LOG_TYPE_ERROR))
      goto LABEL_18;
    *(_DWORD *)buf = 134217984;
    *(_QWORD *)&buf[4] = a3;
    v14 = "Unexpected renormalization deformation option size for deformer index: %zu";
    goto LABEL_27;
  }
  **(_BYTE **)(v10 + 40 * a3 + 32) = a4;
  return 1;
}

uint64_t REMeshDeformationDefinitionAssetBuilderDeformationStackAddTension(uint64_t a1, unint64_t a2)
{
  uint64_t *v3;
  re *v4;
  unint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  NSObject *v9;
  _BYTE v11[28];
  __int16 v12;
  unint64_t v13;
  uint8_t buf[16];
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  uint64_t v19;

  v19 = *MEMORY[0x24BDAC8D0];
  v3 = (uint64_t *)(a1 + 24);
  {
    v5 = *((_QWORD *)v4 + 2);
    if (v5 > a2)
    {
      v6 = (_QWORD *)(*((_QWORD *)v4 + 4) + 40 * a2);
      memset(v11, 0, 24);
      **(_BYTE **)&v11[16] = 0;
      *(_QWORD *)buf = 0x241C51C064;
      *(_QWORD *)&buf[8] = "Tension";
      v15 = *(_OWORD *)v11;
      v7 = *(_QWORD *)&v11[16];
      memset(v11, 0, 24);
      *(_QWORD *)&v16 = v7;
      re::DynamicArray<re::DeformationDefinition>::add(v6, (uint64_t *)buf);
      if ((_QWORD)v15)
      {
        if (*((_QWORD *)&v15 + 1))
        {
          (*(void (**)(void))(*(_QWORD *)v15 + 40))();
          *((_QWORD *)&v15 + 1) = 0;
          *(_QWORD *)&v16 = 0;
        }
        *(_QWORD *)&v15 = 0;
      }
      re::StringID::destroyString((re::StringID *)buf);
      v8 = v6[2] - 1;
      if (*(_QWORD *)v11 && *(_QWORD *)&v11[8])
        (*(void (**)(void))(**(_QWORD **)v11 + 40))();
      return v8;
    }
    v17 = 0u;
    v18 = 0u;
    v15 = 0u;
    v16 = 0u;
    *(_OWORD *)buf = 0u;
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    *(_DWORD *)v11 = 136315906;
    *(_QWORD *)&v11[4] = "operator[]";
    *(_WORD *)&v11[12] = 1024;
    *(_DWORD *)&v11[14] = 789;
    *(_WORD *)&v11[18] = 2048;
    *(_QWORD *)&v11[20] = a2;
    v12 = 2048;
    v13 = v5;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
    goto LABEL_16;
  }
  if (CoreRELog::onceToken != -1)
LABEL_16:
    dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
  v9 = (id)CoreRELog::log;
  if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)buf = 134217984;
    *(_QWORD *)&buf[4] = a2;
    _os_log_error_impl(&dword_224FE9000, v9, OS_LOG_TYPE_ERROR, "Invalid deformation stack index: %zu", buf, 0xCu);
  }

  return -1;
}

BOOL REMeshDeformationDefinitionAssetBuilderDeformerIsTension(uint64_t a1, unint64_t a2, unint64_t a3)
{
  re::MeshDeformationAsset *v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  char *v9;
  NSObject *v11;
  NSObject *v12;
  uint8_t buf[16];
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  uint64_t v18;

  v18 = *MEMORY[0x24BDAC8D0];
  v5 = (re::MeshDeformationAsset *)(a1 + 24);
                 + 16) <= a2)
  {
    if (CoreRELog::onceToken == -1)
    {
LABEL_8:
      v11 = (id)CoreRELog::log;
      if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 134217984;
        *(_QWORD *)&buf[4] = a2;
        _os_log_error_impl(&dword_224FE9000, v11, OS_LOG_TYPE_ERROR, "Invalid deformation stack index: %zu", buf, 0xCu);
      }

      return 0;
    }
LABEL_19:
    dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
    goto LABEL_8;
  }
  if (*(_QWORD *)(v6 + 16) <= a2)
  {
    v16 = 0u;
    v17 = 0u;
    v14 = 0u;
    v15 = 0u;
    *(_OWORD *)buf = 0u;
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
    goto LABEL_19;
  }
  v7 = *(_QWORD *)(v6 + 32) + 40 * a2;
  if (*(_QWORD *)(v7 + 16) <= a3)
  {
    if (CoreRELog::onceToken != -1)
      dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
    v12 = (id)CoreRELog::log;
    if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 134217984;
      *(_QWORD *)&buf[4] = a3;
      _os_log_error_impl(&dword_224FE9000, v12, OS_LOG_TYPE_ERROR, "Invalid deformer index: %zu", buf, 0xCu);
    }

    return 0;
  }
  v8 = (_QWORD *)(*(_QWORD *)(v7 + 32) + 40 * a3);
  if (*v8 >> 1 != 0x120E28E032)
    return 0;
  v9 = (char *)v8[1];
  return v9 == "Tension" || strcmp(v9, "Tension") == 0;
}

BOOL REMeshDeformationDefinitionAssetBuilderTensionGetForceCPU(uint64_t a1, unint64_t a2, unint64_t a3)
{
  re::MeshDeformationAsset *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  char *v10;
  NSObject *v11;
  const char *v12;
  NSObject *v13;
  uint8_t buf[16];
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  uint64_t v20;

  v20 = *MEMORY[0x24BDAC8D0];
  v5 = (re::MeshDeformationAsset *)(a1 + 24);
                 + 16) <= a2)
  {
    if (CoreRELog::onceToken == -1)
    {
LABEL_12:
      v13 = (id)CoreRELog::log;
      if (os_log_type_enabled(v13, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 134217984;
        *(_QWORD *)&buf[4] = a2;
        _os_log_error_impl(&dword_224FE9000, v13, OS_LOG_TYPE_ERROR, "Invalid deformation stack index: %zu", buf, 0xCu);
      }

      return 0;
    }
LABEL_29:
    dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
    goto LABEL_12;
  }
  if (*(_QWORD *)(v6 + 16) <= a2)
  {
    v18 = 0u;
    v19 = 0u;
    v16 = 0u;
    v17 = 0u;
    *(_OWORD *)buf = 0u;
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
    goto LABEL_29;
  }
  v7 = *(_QWORD *)(v6 + 32) + 40 * a2;
  if (*(_QWORD *)(v7 + 16) <= a3)
  {
    if (CoreRELog::onceToken != -1)
      dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
    v11 = (id)CoreRELog::log;
    if (!os_log_type_enabled(v11, OS_LOG_TYPE_ERROR))
      goto LABEL_18;
    *(_DWORD *)buf = 134217984;
    *(_QWORD *)&buf[4] = a3;
    v12 = "Invalid deformer index: %zu";
    goto LABEL_27;
  }
  v8 = *(_QWORD *)(v7 + 32);
  v9 = (_QWORD *)(v8 + 40 * a3);
  if (*v9 >> 1 != 0x120E28E032 || (v10 = (char *)v9[1], v10 != "Tension") && strcmp(v10, "Tension"))
  {
    if (CoreRELog::onceToken != -1)
      dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
    v11 = (id)CoreRELog::log;
    if (!os_log_type_enabled(v11, OS_LOG_TYPE_ERROR))
      goto LABEL_18;
    *(_DWORD *)buf = 134217984;
    *(_QWORD *)&buf[4] = a3;
    v12 = "Not a tension deformer index: %zu";
LABEL_27:
    _os_log_error_impl(&dword_224FE9000, v11, OS_LOG_TYPE_ERROR, v12, buf, 0xCu);
LABEL_18:

    return 0;
  }
  if (*(_QWORD *)(v8 + 40 * a3 + 24) != 1)
  {
    if (CoreRELog::onceToken != -1)
      dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
    v11 = (id)CoreRELog::log;
    if (!os_log_type_enabled(v11, OS_LOG_TYPE_ERROR))
      goto LABEL_18;
    *(_DWORD *)buf = 134217984;
    *(_QWORD *)&buf[4] = a3;
    v12 = "Unexpected tension deformer options size for deformer index: %zu";
    goto LABEL_27;
  }
  return **(_BYTE **)(v8 + 40 * a3 + 32) != 0;
}

uint64_t REMeshDeformationDefinitionAssetBuilderTensionSetForceCPU(uint64_t a1, unint64_t a2, unint64_t a3, char a4)
{
  uint64_t *v7;
  re *v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  char *v12;
  NSObject *v13;
  const char *v14;
  NSObject *v15;
  uint8_t buf[16];
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  uint64_t v22;

  v22 = *MEMORY[0x24BDAC8D0];
  v7 = (uint64_t *)(a1 + 24);
  {
    if (CoreRELog::onceToken == -1)
    {
LABEL_12:
      v15 = (id)CoreRELog::log;
      if (os_log_type_enabled(v15, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 134217984;
        *(_QWORD *)&buf[4] = a2;
        _os_log_error_impl(&dword_224FE9000, v15, OS_LOG_TYPE_ERROR, "Invalid deformation stack index: %zu", buf, 0xCu);
      }

      return 0;
    }
LABEL_29:
    dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
    goto LABEL_12;
  }
  if (*((_QWORD *)v8 + 2) <= a2)
  {
    v20 = 0u;
    v21 = 0u;
    v18 = 0u;
    v19 = 0u;
    *(_OWORD *)buf = 0u;
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
    goto LABEL_29;
  }
  v9 = *((_QWORD *)v8 + 4) + 40 * a2;
  if (*(_QWORD *)(v9 + 16) <= a3)
  {
    if (CoreRELog::onceToken != -1)
      dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
    v13 = (id)CoreRELog::log;
    if (!os_log_type_enabled(v13, OS_LOG_TYPE_ERROR))
      goto LABEL_18;
    *(_DWORD *)buf = 134217984;
    *(_QWORD *)&buf[4] = a3;
    v14 = "Invalid deformer index: %zu";
    goto LABEL_27;
  }
  v10 = *(_QWORD *)(v9 + 32);
  v11 = (_QWORD *)(v10 + 40 * a3);
  if (*v11 >> 1 != 0x120E28E032 || (v12 = (char *)v11[1], v12 != "Tension") && strcmp(v12, "Tension"))
  {
    if (CoreRELog::onceToken != -1)
      dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
    v13 = (id)CoreRELog::log;
    if (!os_log_type_enabled(v13, OS_LOG_TYPE_ERROR))
      goto LABEL_18;
    *(_DWORD *)buf = 134217984;
    *(_QWORD *)&buf[4] = a3;
    v14 = "Not a tension deformer index: %zu";
LABEL_27:
    _os_log_error_impl(&dword_224FE9000, v13, OS_LOG_TYPE_ERROR, v14, buf, 0xCu);
LABEL_18:

    return 0;
  }
  if (*(_QWORD *)(v10 + 40 * a3 + 24) != 1)
  {
    if (CoreRELog::onceToken != -1)
      dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
    v13 = (id)CoreRELog::log;
    if (!os_log_type_enabled(v13, OS_LOG_TYPE_ERROR))
      goto LABEL_18;
    *(_DWORD *)buf = 134217984;
    *(_QWORD *)&buf[4] = a3;
    v14 = "Unexpected tension deformer options size for deformer index: %zu";
    goto LABEL_27;
  }
  **(_BYTE **)(v10 + 40 * a3 + 32) = a4;
  return 1;
}

uint64_t REMeshDeformationDefinitionAssetBuilderDeformationStackAddOffsets(uint64_t a1, unint64_t a2)
{
  uint64_t *v3;
  re *v4;
  unint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  NSObject *v9;
  _BYTE v11[28];
  __int16 v12;
  unint64_t v13;
  uint8_t buf[16];
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  uint64_t v19;

  v19 = *MEMORY[0x24BDAC8D0];
  v3 = (uint64_t *)(a1 + 24);
  {
    v5 = *((_QWORD *)v4 + 2);
    if (v5 > a2)
    {
      v6 = (_QWORD *)(*((_QWORD *)v4 + 4) + 40 * a2);
      memset(v11, 0, 24);
      **(_BYTE **)&v11[16] = 0;
      *(_QWORD *)buf = 0x70EBDC9CD6B5D4E4;
      *(_QWORD *)&buf[8] = "OffsetsDeformer";
      v15 = *(_OWORD *)v11;
      v7 = *(_QWORD *)&v11[16];
      memset(v11, 0, 24);
      *(_QWORD *)&v16 = v7;
      re::DynamicArray<re::DeformationDefinition>::add(v6, (uint64_t *)buf);
      if ((_QWORD)v15)
      {
        if (*((_QWORD *)&v15 + 1))
        {
          (*(void (**)(void))(*(_QWORD *)v15 + 40))();
          *((_QWORD *)&v15 + 1) = 0;
          *(_QWORD *)&v16 = 0;
        }
        *(_QWORD *)&v15 = 0;
      }
      re::StringID::destroyString((re::StringID *)buf);
      v8 = v6[2] - 1;
      if (*(_QWORD *)v11 && *(_QWORD *)&v11[8])
        (*(void (**)(void))(**(_QWORD **)v11 + 40))();
      return v8;
    }
    v17 = 0u;
    v18 = 0u;
    v15 = 0u;
    v16 = 0u;
    *(_OWORD *)buf = 0u;
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    *(_DWORD *)v11 = 136315906;
    *(_QWORD *)&v11[4] = "operator[]";
    *(_WORD *)&v11[12] = 1024;
    *(_DWORD *)&v11[14] = 789;
    *(_WORD *)&v11[18] = 2048;
    *(_QWORD *)&v11[20] = a2;
    v12 = 2048;
    v13 = v5;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
    goto LABEL_16;
  }
  if (CoreRELog::onceToken != -1)
LABEL_16:
    dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
  v9 = (id)CoreRELog::log;
  if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)buf = 134217984;
    *(_QWORD *)&buf[4] = a2;
    _os_log_error_impl(&dword_224FE9000, v9, OS_LOG_TYPE_ERROR, "Invalid deformation stack index: %zu", buf, 0xCu);
  }

  return -1;
}

BOOL REMeshDeformationDefinitionAssetBuilderDeformerIsOffsets(uint64_t a1, unint64_t a2, unint64_t a3)
{
  re::MeshDeformationAsset *v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  char *v9;
  NSObject *v11;
  NSObject *v12;
  uint8_t buf[16];
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  uint64_t v18;

  v18 = *MEMORY[0x24BDAC8D0];
  v5 = (re::MeshDeformationAsset *)(a1 + 24);
                 + 16) <= a2)
  {
    if (CoreRELog::onceToken == -1)
    {
LABEL_8:
      v11 = (id)CoreRELog::log;
      if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 134217984;
        *(_QWORD *)&buf[4] = a2;
        _os_log_error_impl(&dword_224FE9000, v11, OS_LOG_TYPE_ERROR, "Invalid deformation stack index: %zu", buf, 0xCu);
      }

      return 0;
    }
LABEL_19:
    dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
    goto LABEL_8;
  }
  if (*(_QWORD *)(v6 + 16) <= a2)
  {
    v16 = 0u;
    v17 = 0u;
    v14 = 0u;
    v15 = 0u;
    *(_OWORD *)buf = 0u;
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
    goto LABEL_19;
  }
  v7 = *(_QWORD *)(v6 + 32) + 40 * a2;
  if (*(_QWORD *)(v7 + 16) <= a3)
  {
    if (CoreRELog::onceToken != -1)
      dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
    v12 = (id)CoreRELog::log;
    if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 134217984;
      *(_QWORD *)&buf[4] = a3;
      _os_log_error_impl(&dword_224FE9000, v12, OS_LOG_TYPE_ERROR, "Invalid deformer index: %zu", buf, 0xCu);
    }

    return 0;
  }
  v8 = (_QWORD *)(*(_QWORD *)(v7 + 32) + 40 * a3);
  if (*v8 >> 1 != 0x3875EE4E6B5AEA72)
    return 0;
  v9 = (char *)v8[1];
  return v9 == "OffsetsDeformer" || strcmp(v9, "OffsetsDeformer") == 0;
}

BOOL REMeshDeformationDefinitionAssetBuilderOffsetsGetForceCPU(uint64_t a1, unint64_t a2, unint64_t a3)
{
  re::MeshDeformationAsset *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  char *v10;
  NSObject *v11;
  const char *v12;
  NSObject *v13;
  uint8_t buf[16];
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  uint64_t v20;

  v20 = *MEMORY[0x24BDAC8D0];
  v5 = (re::MeshDeformationAsset *)(a1 + 24);
                 + 16) <= a2)
  {
    if (CoreRELog::onceToken == -1)
    {
LABEL_12:
      v13 = (id)CoreRELog::log;
      if (os_log_type_enabled(v13, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 134217984;
        *(_QWORD *)&buf[4] = a2;
        _os_log_error_impl(&dword_224FE9000, v13, OS_LOG_TYPE_ERROR, "Invalid deformation stack index: %zu", buf, 0xCu);
      }

      return 0;
    }
LABEL_29:
    dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
    goto LABEL_12;
  }
  if (*(_QWORD *)(v6 + 16) <= a2)
  {
    v18 = 0u;
    v19 = 0u;
    v16 = 0u;
    v17 = 0u;
    *(_OWORD *)buf = 0u;
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
    goto LABEL_29;
  }
  v7 = *(_QWORD *)(v6 + 32) + 40 * a2;
  if (*(_QWORD *)(v7 + 16) <= a3)
  {
    if (CoreRELog::onceToken != -1)
      dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
    v11 = (id)CoreRELog::log;
    if (!os_log_type_enabled(v11, OS_LOG_TYPE_ERROR))
      goto LABEL_18;
    *(_DWORD *)buf = 134217984;
    *(_QWORD *)&buf[4] = a3;
    v12 = "Invalid deformer index: %zu";
    goto LABEL_27;
  }
  v8 = *(_QWORD *)(v7 + 32);
  v9 = (_QWORD *)(v8 + 40 * a3);
  if (*v9 >> 1 != 0x3875EE4E6B5AEA72
    || (v10 = (char *)v9[1], v10 != "OffsetsDeformer") && strcmp(v10, "OffsetsDeformer"))
  {
    if (CoreRELog::onceToken != -1)
      dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
    v11 = (id)CoreRELog::log;
    if (!os_log_type_enabled(v11, OS_LOG_TYPE_ERROR))
      goto LABEL_18;
    *(_DWORD *)buf = 134217984;
    *(_QWORD *)&buf[4] = a3;
    v12 = "Not an offsets deformer index: %zu";
LABEL_27:
    _os_log_error_impl(&dword_224FE9000, v11, OS_LOG_TYPE_ERROR, v12, buf, 0xCu);
LABEL_18:

    return 0;
  }
  if (*(_QWORD *)(v8 + 40 * a3 + 24) != 1)
  {
    if (CoreRELog::onceToken != -1)
      dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
    v11 = (id)CoreRELog::log;
    if (!os_log_type_enabled(v11, OS_LOG_TYPE_ERROR))
      goto LABEL_18;
    *(_DWORD *)buf = 134217984;
    *(_QWORD *)&buf[4] = a3;
    v12 = "Unexpected offsets deformer options size for deformer index: %zu";
    goto LABEL_27;
  }
  return **(_BYTE **)(v8 + 40 * a3 + 32) != 0;
}

uint64_t REMeshDeformationDefinitionAssetBuilderOffsetsSetForceCPU(uint64_t a1, unint64_t a2, unint64_t a3, char a4)
{
  uint64_t *v7;
  re *v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  char *v12;
  NSObject *v13;
  const char *v14;
  NSObject *v15;
  uint8_t buf[16];
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  uint64_t v22;

  v22 = *MEMORY[0x24BDAC8D0];
  v7 = (uint64_t *)(a1 + 24);
  {
    if (CoreRELog::onceToken == -1)
    {
LABEL_12:
      v15 = (id)CoreRELog::log;
      if (os_log_type_enabled(v15, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 134217984;
        *(_QWORD *)&buf[4] = a2;
        _os_log_error_impl(&dword_224FE9000, v15, OS_LOG_TYPE_ERROR, "Invalid deformation stack index: %zu", buf, 0xCu);
      }

      return 0;
    }
LABEL_29:
    dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
    goto LABEL_12;
  }
  if (*((_QWORD *)v8 + 2) <= a2)
  {
    v20 = 0u;
    v21 = 0u;
    v18 = 0u;
    v19 = 0u;
    *(_OWORD *)buf = 0u;
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
    goto LABEL_29;
  }
  v9 = *((_QWORD *)v8 + 4) + 40 * a2;
  if (*(_QWORD *)(v9 + 16) <= a3)
  {
    if (CoreRELog::onceToken != -1)
      dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
    v13 = (id)CoreRELog::log;
    if (!os_log_type_enabled(v13, OS_LOG_TYPE_ERROR))
      goto LABEL_18;
    *(_DWORD *)buf = 134217984;
    *(_QWORD *)&buf[4] = a3;
    v14 = "Invalid deformer index: %zu";
    goto LABEL_27;
  }
  v10 = *(_QWORD *)(v9 + 32);
  v11 = (_QWORD *)(v10 + 40 * a3);
  if (*v11 >> 1 != 0x3875EE4E6B5AEA72
    || (v12 = (char *)v11[1], v12 != "OffsetsDeformer") && strcmp(v12, "OffsetsDeformer"))
  {
    if (CoreRELog::onceToken != -1)
      dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
    v13 = (id)CoreRELog::log;
    if (!os_log_type_enabled(v13, OS_LOG_TYPE_ERROR))
      goto LABEL_18;
    *(_DWORD *)buf = 134217984;
    *(_QWORD *)&buf[4] = a3;
    v14 = "Not an offsets deformer index: %zu";
LABEL_27:
    _os_log_error_impl(&dword_224FE9000, v13, OS_LOG_TYPE_ERROR, v14, buf, 0xCu);
LABEL_18:

    return 0;
  }
  if (*(_QWORD *)(v10 + 40 * a3 + 24) != 1)
  {
    if (CoreRELog::onceToken != -1)
      dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
    v13 = (id)CoreRELog::log;
    if (!os_log_type_enabled(v13, OS_LOG_TYPE_ERROR))
      goto LABEL_18;
    *(_DWORD *)buf = 134217984;
    *(_QWORD *)&buf[4] = a3;
    v14 = "Unexpected offsets deformer options size for deformer index: %zu";
    goto LABEL_27;
  }
  **(_BYTE **)(v10 + 40 * a3 + 32) = a4;
  return 1;
}

uint64_t REMeshDeformationDefinitionAssetBuilderDeformationStackAddSmooth(uint64_t a1, unint64_t a2)
{
  uint64_t *v3;
  re *v4;
  unint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  NSObject *v9;
  _BYTE v11[28];
  __int16 v12;
  unint64_t v13;
  uint8_t buf[16];
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  uint64_t v19;

  v19 = *MEMORY[0x24BDAC8D0];
  v3 = (uint64_t *)(a1 + 24);
  {
    v5 = *((_QWORD *)v4 + 2);
    if (v5 > a2)
    {
      v6 = (_QWORD *)(*((_QWORD *)v4 + 4) + 40 * a2);
      memset(v11, 0, 24);
      **(_BYTE **)&v11[16] = 0;
      *(_QWORD *)buf = 0x5ADE39698BF7F040;
      *(_QWORD *)&buf[8] = "SmoothDeformer";
      v15 = *(_OWORD *)v11;
      v7 = *(_QWORD *)&v11[16];
      memset(v11, 0, 24);
      *(_QWORD *)&v16 = v7;
      re::DynamicArray<re::DeformationDefinition>::add(v6, (uint64_t *)buf);
      if ((_QWORD)v15)
      {
        if (*((_QWORD *)&v15 + 1))
        {
          (*(void (**)(void))(*(_QWORD *)v15 + 40))();
          *((_QWORD *)&v15 + 1) = 0;
          *(_QWORD *)&v16 = 0;
        }
        *(_QWORD *)&v15 = 0;
      }
      re::StringID::destroyString((re::StringID *)buf);
      v8 = v6[2] - 1;
      if (*(_QWORD *)v11 && *(_QWORD *)&v11[8])
        (*(void (**)(void))(**(_QWORD **)v11 + 40))();
      return v8;
    }
    v17 = 0u;
    v18 = 0u;
    v15 = 0u;
    v16 = 0u;
    *(_OWORD *)buf = 0u;
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    *(_DWORD *)v11 = 136315906;
    *(_QWORD *)&v11[4] = "operator[]";
    *(_WORD *)&v11[12] = 1024;
    *(_DWORD *)&v11[14] = 789;
    *(_WORD *)&v11[18] = 2048;
    *(_QWORD *)&v11[20] = a2;
    v12 = 2048;
    v13 = v5;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
    goto LABEL_16;
  }
  if (CoreRELog::onceToken != -1)
LABEL_16:
    dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
  v9 = (id)CoreRELog::log;
  if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)buf = 134217984;
    *(_QWORD *)&buf[4] = a2;
    _os_log_error_impl(&dword_224FE9000, v9, OS_LOG_TYPE_ERROR, "Invalid deformation stack index: %zu", buf, 0xCu);
  }

  return -1;
}

BOOL REMeshDeformationDefinitionAssetBuilderDeformerIsSmooth(uint64_t a1, unint64_t a2, unint64_t a3)
{
  re::MeshDeformationAsset *v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  char *v9;
  NSObject *v11;
  NSObject *v12;
  uint8_t buf[16];
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  uint64_t v18;

  v18 = *MEMORY[0x24BDAC8D0];
  v5 = (re::MeshDeformationAsset *)(a1 + 24);
                 + 16) <= a2)
  {
    if (CoreRELog::onceToken == -1)
    {
LABEL_8:
      v11 = (id)CoreRELog::log;
      if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 134217984;
        *(_QWORD *)&buf[4] = a2;
        _os_log_error_impl(&dword_224FE9000, v11, OS_LOG_TYPE_ERROR, "Invalid deformation stack index: %zu", buf, 0xCu);
      }

      return 0;
    }
LABEL_19:
    dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
    goto LABEL_8;
  }
  if (*(_QWORD *)(v6 + 16) <= a2)
  {
    v16 = 0u;
    v17 = 0u;
    v14 = 0u;
    v15 = 0u;
    *(_OWORD *)buf = 0u;
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
    goto LABEL_19;
  }
  v7 = *(_QWORD *)(v6 + 32) + 40 * a2;
  if (*(_QWORD *)(v7 + 16) <= a3)
  {
    if (CoreRELog::onceToken != -1)
      dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
    v12 = (id)CoreRELog::log;
    if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 134217984;
      *(_QWORD *)&buf[4] = a3;
      _os_log_error_impl(&dword_224FE9000, v12, OS_LOG_TYPE_ERROR, "Invalid deformer index: %zu", buf, 0xCu);
    }

    return 0;
  }
  v8 = (_QWORD *)(*(_QWORD *)(v7 + 32) + 40 * a3);
  if (*v8 >> 1 != 0x2D6F1CB4C5FBF820)
    return 0;
  v9 = (char *)v8[1];
  return v9 == "SmoothDeformer" || strcmp(v9, "SmoothDeformer") == 0;
}

BOOL REMeshDeformationDefinitionAssetBuilderSmoothGetForceCPU(uint64_t a1, unint64_t a2, unint64_t a3)
{
  re::MeshDeformationAsset *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  char *v10;
  NSObject *v11;
  const char *v12;
  NSObject *v13;
  uint8_t buf[16];
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  uint64_t v20;

  v20 = *MEMORY[0x24BDAC8D0];
  v5 = (re::MeshDeformationAsset *)(a1 + 24);
                 + 16) <= a2)
  {
    if (CoreRELog::onceToken == -1)
    {
LABEL_12:
      v13 = (id)CoreRELog::log;
      if (os_log_type_enabled(v13, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 134217984;
        *(_QWORD *)&buf[4] = a2;
        _os_log_error_impl(&dword_224FE9000, v13, OS_LOG_TYPE_ERROR, "Invalid deformation stack index: %zu", buf, 0xCu);
      }

      return 0;
    }
LABEL_29:
    dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
    goto LABEL_12;
  }
  if (*(_QWORD *)(v6 + 16) <= a2)
  {
    v18 = 0u;
    v19 = 0u;
    v16 = 0u;
    v17 = 0u;
    *(_OWORD *)buf = 0u;
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
    goto LABEL_29;
  }
  v7 = *(_QWORD *)(v6 + 32) + 40 * a2;
  if (*(_QWORD *)(v7 + 16) <= a3)
  {
    if (CoreRELog::onceToken != -1)
      dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
    v11 = (id)CoreRELog::log;
    if (!os_log_type_enabled(v11, OS_LOG_TYPE_ERROR))
      goto LABEL_18;
    *(_DWORD *)buf = 134217984;
    *(_QWORD *)&buf[4] = a3;
    v12 = "Invalid deformer index: %zu";
    goto LABEL_27;
  }
  v8 = *(_QWORD *)(v7 + 32);
  v9 = (_QWORD *)(v8 + 40 * a3);
  if (*v9 >> 1 != 0x2D6F1CB4C5FBF820
    || (v10 = (char *)v9[1], v10 != "SmoothDeformer") && strcmp(v10, "SmoothDeformer"))
  {
    if (CoreRELog::onceToken != -1)
      dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
    v11 = (id)CoreRELog::log;
    if (!os_log_type_enabled(v11, OS_LOG_TYPE_ERROR))
      goto LABEL_18;
    *(_DWORD *)buf = 134217984;
    *(_QWORD *)&buf[4] = a3;
    v12 = "Not a smooth deformer index: %zu";
LABEL_27:
    _os_log_error_impl(&dword_224FE9000, v11, OS_LOG_TYPE_ERROR, v12, buf, 0xCu);
LABEL_18:

    return 0;
  }
  if (*(_QWORD *)(v8 + 40 * a3 + 24) != 1)
  {
    if (CoreRELog::onceToken != -1)
      dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
    v11 = (id)CoreRELog::log;
    if (!os_log_type_enabled(v11, OS_LOG_TYPE_ERROR))
      goto LABEL_18;
    *(_DWORD *)buf = 134217984;
    *(_QWORD *)&buf[4] = a3;
    v12 = "Unexpected smooth deformer options size for deformer index: %zu";
    goto LABEL_27;
  }
  return **(_BYTE **)(v8 + 40 * a3 + 32) != 0;
}

uint64_t REMeshDeformationDefinitionAssetBuilderSmoothSetForceCPU(uint64_t a1, unint64_t a2, unint64_t a3, char a4)
{
  uint64_t *v7;
  re *v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  char *v12;
  NSObject *v13;
  const char *v14;
  NSObject *v15;
  uint8_t buf[16];
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  uint64_t v22;

  v22 = *MEMORY[0x24BDAC8D0];
  v7 = (uint64_t *)(a1 + 24);
  {
    if (CoreRELog::onceToken == -1)
    {
LABEL_12:
      v15 = (id)CoreRELog::log;
      if (os_log_type_enabled(v15, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 134217984;
        *(_QWORD *)&buf[4] = a2;
        _os_log_error_impl(&dword_224FE9000, v15, OS_LOG_TYPE_ERROR, "Invalid deformation stack index: %zu", buf, 0xCu);
      }

      return 0;
    }
LABEL_29:
    dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
    goto LABEL_12;
  }
  if (*((_QWORD *)v8 + 2) <= a2)
  {
    v20 = 0u;
    v21 = 0u;
    v18 = 0u;
    v19 = 0u;
    *(_OWORD *)buf = 0u;
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
    goto LABEL_29;
  }
  v9 = *((_QWORD *)v8 + 4) + 40 * a2;
  if (*(_QWORD *)(v9 + 16) <= a3)
  {
    if (CoreRELog::onceToken != -1)
      dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
    v13 = (id)CoreRELog::log;
    if (!os_log_type_enabled(v13, OS_LOG_TYPE_ERROR))
      goto LABEL_18;
    *(_DWORD *)buf = 134217984;
    *(_QWORD *)&buf[4] = a3;
    v14 = "Invalid deformer index: %zu";
    goto LABEL_27;
  }
  v10 = *(_QWORD *)(v9 + 32);
  v11 = (_QWORD *)(v10 + 40 * a3);
  if (*v11 >> 1 != 0x2D6F1CB4C5FBF820
    || (v12 = (char *)v11[1], v12 != "SmoothDeformer") && strcmp(v12, "SmoothDeformer"))
  {
    if (CoreRELog::onceToken != -1)
      dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
    v13 = (id)CoreRELog::log;
    if (!os_log_type_enabled(v13, OS_LOG_TYPE_ERROR))
      goto LABEL_18;
    *(_DWORD *)buf = 134217984;
    *(_QWORD *)&buf[4] = a3;
    v14 = "Not an smooth deformer index: %zu";
LABEL_27:
    _os_log_error_impl(&dword_224FE9000, v13, OS_LOG_TYPE_ERROR, v14, buf, 0xCu);
LABEL_18:

    return 0;
  }
  if (*(_QWORD *)(v10 + 40 * a3 + 24) != 1)
  {
    if (CoreRELog::onceToken != -1)
      dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
    v13 = (id)CoreRELog::log;
    if (!os_log_type_enabled(v13, OS_LOG_TYPE_ERROR))
      goto LABEL_18;
    *(_DWORD *)buf = 134217984;
    *(_QWORD *)&buf[4] = a3;
    v14 = "Unexpected smooth deformer options size for deformer index: %zu";
    goto LABEL_27;
  }
  **(_BYTE **)(v10 + 40 * a3 + 32) = a4;
  return 1;
}

uint64_t REMeshDeformationDefinitionAssetBuilderDeformationStackAddBoundingBoxCalculation(uint64_t a1, unint64_t a2)
{
  uint64_t *v3;
  re *v4;
  unint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  NSObject *v9;
  _BYTE v11[28];
  __int16 v12;
  unint64_t v13;
  uint8_t buf[16];
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  uint64_t v19;

  v19 = *MEMORY[0x24BDAC8D0];
  v3 = (uint64_t *)(a1 + 24);
  {
    v5 = *((_QWORD *)v4 + 2);
    if (v5 > a2)
    {
      v6 = (_QWORD *)(*((_QWORD *)v4 + 4) + 40 * a2);
      memset(v11, 0, 24);
      **(_BYTE **)&v11[16] = 0;
      *(_QWORD *)buf = 0x32458CCC0A585AB0;
      *(_QWORD *)&buf[8] = "Bounding Box Calculation";
      v15 = *(_OWORD *)v11;
      v7 = *(_QWORD *)&v11[16];
      memset(v11, 0, 24);
      *(_QWORD *)&v16 = v7;
      re::DynamicArray<re::DeformationDefinition>::add(v6, (uint64_t *)buf);
      if ((_QWORD)v15)
      {
        if (*((_QWORD *)&v15 + 1))
        {
          (*(void (**)(void))(*(_QWORD *)v15 + 40))();
          *((_QWORD *)&v15 + 1) = 0;
          *(_QWORD *)&v16 = 0;
        }
        *(_QWORD *)&v15 = 0;
      }
      re::StringID::destroyString((re::StringID *)buf);
      v8 = v6[2] - 1;
      if (*(_QWORD *)v11 && *(_QWORD *)&v11[8])
        (*(void (**)(void))(**(_QWORD **)v11 + 40))();
      return v8;
    }
    v17 = 0u;
    v18 = 0u;
    v15 = 0u;
    v16 = 0u;
    *(_OWORD *)buf = 0u;
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    *(_DWORD *)v11 = 136315906;
    *(_QWORD *)&v11[4] = "operator[]";
    *(_WORD *)&v11[12] = 1024;
    *(_DWORD *)&v11[14] = 789;
    *(_WORD *)&v11[18] = 2048;
    *(_QWORD *)&v11[20] = a2;
    v12 = 2048;
    v13 = v5;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
    goto LABEL_16;
  }
  if (CoreRELog::onceToken != -1)
LABEL_16:
    dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
  v9 = (id)CoreRELog::log;
  if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)buf = 134217984;
    *(_QWORD *)&buf[4] = a2;
    _os_log_error_impl(&dword_224FE9000, v9, OS_LOG_TYPE_ERROR, "Invalid deformation stack index: %zu", buf, 0xCu);
  }

  return -1;
}

BOOL REMeshDeformationDefinitionAssetBuilderDeformerIsBoundingBoxCalculation(uint64_t a1, unint64_t a2, unint64_t a3)
{
  re::MeshDeformationAsset *v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  char *v9;
  NSObject *v11;
  NSObject *v12;
  uint8_t buf[16];
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  uint64_t v18;

  v18 = *MEMORY[0x24BDAC8D0];
  v5 = (re::MeshDeformationAsset *)(a1 + 24);
                 + 16) <= a2)
  {
    if (CoreRELog::onceToken == -1)
    {
LABEL_8:
      v11 = (id)CoreRELog::log;
      if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 134217984;
        *(_QWORD *)&buf[4] = a2;
        _os_log_error_impl(&dword_224FE9000, v11, OS_LOG_TYPE_ERROR, "Invalid deformation stack index: %zu", buf, 0xCu);
      }

      return 0;
    }
LABEL_19:
    dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
    goto LABEL_8;
  }
  if (*(_QWORD *)(v6 + 16) <= a2)
  {
    v16 = 0u;
    v17 = 0u;
    v14 = 0u;
    v15 = 0u;
    *(_OWORD *)buf = 0u;
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
    goto LABEL_19;
  }
  v7 = *(_QWORD *)(v6 + 32) + 40 * a2;
  if (*(_QWORD *)(v7 + 16) <= a3)
  {
    if (CoreRELog::onceToken != -1)
      dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
    v12 = (id)CoreRELog::log;
    if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 134217984;
      *(_QWORD *)&buf[4] = a3;
      _os_log_error_impl(&dword_224FE9000, v12, OS_LOG_TYPE_ERROR, "Invalid deformer index: %zu", buf, 0xCu);
    }

    return 0;
  }
  v8 = (_QWORD *)(*(_QWORD *)(v7 + 32) + 40 * a3);
  if (*v8 >> 1 != 0x1922C666052C2D58)
    return 0;
  v9 = (char *)v8[1];
  return v9 == "Bounding Box Calculation" || strcmp(v9, "Bounding Box Calculation") == 0;
}

uint64_t REMeshDeformationDefinitionAssetBuilderDeformationStackAddCustomDeformer(uint64_t a1, const char *a2, unint64_t a3)
{
  uint64_t *v5;
  size_t v6;
  NSObject *v7;
  NSObject *v8;
  uint64_t v9;
  size_t v11;
  re *v12;
  unint64_t v13;
  _QWORD *v14;
  size_t v15;
  _anonymous_namespace_ *v16;
  _OWORD *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _OWORD *v22;
  _BYTE v23[40];
  __int128 __dst;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  uint64_t v29;

  v29 = *MEMORY[0x24BDAC8D0];
  v5 = (uint64_t *)(a1 + 24);
  {
    if (CoreRELog::onceToken != -1)
      dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
    v8 = (id)CoreRELog::log;
    if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
    {
      LODWORD(__dst) = 134217984;
      *(_QWORD *)((char *)&__dst + 4) = a3;
      _os_log_error_impl(&dword_224FE9000, v8, OS_LOG_TYPE_ERROR, "Invalid deformation stack index: %zu", (uint8_t *)&__dst, 0xCu);
    }

    return -1;
  }
  v6 = strlen(a2);
  if (v6 - 63 <= 0xFFFFFFFFFFFFFFBFLL)
  {
    if (CoreRELog::onceToken != -1)
      dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
    v7 = (id)CoreRELog::log;
    if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
    {
      LODWORD(__dst) = 134217984;
      *(_QWORD *)((char *)&__dst + 4) = 64;
      _os_log_error_impl(&dword_224FE9000, v7, OS_LOG_TYPE_ERROR, "Invalid custom deformer name, maximum length is %zu.", (uint8_t *)&__dst, 0xCu);
    }

    return -1;
  }
  v11 = v6;
  v13 = *((_QWORD *)v12 + 2);
  if (v13 <= a3)
  {
    v20 = 0;
    v27 = 0u;
    v28 = 0u;
    v25 = 0u;
    v26 = 0u;
    __dst = 0u;
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    *(_DWORD *)v23 = 136315906;
    *(_QWORD *)&v23[4] = "operator[]";
    *(_WORD *)&v23[12] = 1024;
    *(_DWORD *)&v23[14] = 789;
    *(_WORD *)&v23[18] = 2048;
    *(_QWORD *)&v23[20] = a3;
    *(_WORD *)&v23[28] = 2048;
    *(_QWORD *)&v23[30] = v13;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  v14 = (_QWORD *)(*((_QWORD *)v12 + 4) + 40 * a3);
  if (v11 <= 0x3F)
    v15 = 64 - v11;
  else
    v15 = 0;
  bzero((char *)&__dst + v11, v15);
  v16 = (_anonymous_namespace_ *)memcpy(&__dst, a2, v11);
  v20 = 0;
  v21 = 0;
  v22 = 0;
  v17 = v22;
  *v22 = __dst;
  v17[1] = v25;
  v17[2] = v26;
  v17[3] = v27;
  *(_QWORD *)v23 = 0xEAA1CBFA3D5AC124;
  *(_QWORD *)&v23[8] = "Custom Deformers";
  v18 = v20;
  v19 = v21;
  v20 = 0;
  v21 = 0;
  *(_QWORD *)&v23[16] = v18;
  *(_QWORD *)&v23[24] = v19;
  *(_QWORD *)&v23[32] = v17;
  v22 = 0;
  re::DynamicArray<re::DeformationDefinition>::add(v14, (uint64_t *)v23);
  if (*(_QWORD *)&v23[16])
  {
    if (*(_QWORD *)&v23[24])
    {
      (*(void (**)(void))(**(_QWORD **)&v23[16] + 40))();
      *(_QWORD *)&v23[24] = 0;
      *(_QWORD *)&v23[32] = 0;
    }
    *(_QWORD *)&v23[16] = 0;
  }
  re::StringID::destroyString((re::StringID *)v23);
  v9 = v14[2] - 1;
  if (v20 && v21)
    (*(void (**)(void))(*(_QWORD *)v20 + 40))();
  return v9;
}

BOOL REMeshDeformationDefinitionAssetBuilderDeformerIsCustomDeformer(uint64_t a1, unint64_t a2, unint64_t a3)
{
  re::MeshDeformationAsset *v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  char *v9;
  NSObject *v11;
  NSObject *v12;
  uint8_t buf[16];
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  uint64_t v18;

  v18 = *MEMORY[0x24BDAC8D0];
  v5 = (re::MeshDeformationAsset *)(a1 + 24);
                 + 16) <= a2)
  {
    if (CoreRELog::onceToken == -1)
    {
LABEL_8:
      v11 = (id)CoreRELog::log;
      if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 134217984;
        *(_QWORD *)&buf[4] = a2;
        _os_log_error_impl(&dword_224FE9000, v11, OS_LOG_TYPE_ERROR, "Invalid deformation stack index: %zu", buf, 0xCu);
      }

      return 0;
    }
LABEL_19:
    dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
    goto LABEL_8;
  }
  if (*(_QWORD *)(v6 + 16) <= a2)
  {
    v16 = 0u;
    v17 = 0u;
    v14 = 0u;
    v15 = 0u;
    *(_OWORD *)buf = 0u;
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
    goto LABEL_19;
  }
  v7 = *(_QWORD *)(v6 + 32) + 40 * a2;
  if (*(_QWORD *)(v7 + 16) <= a3)
  {
    if (CoreRELog::onceToken != -1)
      dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
    v12 = (id)CoreRELog::log;
    if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 134217984;
      *(_QWORD *)&buf[4] = a3;
      _os_log_error_impl(&dword_224FE9000, v12, OS_LOG_TYPE_ERROR, "Invalid deformer index: %zu", buf, 0xCu);
    }

    return 0;
  }
  v8 = (_QWORD *)(*(_QWORD *)(v7 + 32) + 40 * a3);
  if (*v8 >> 1 != 0x7550E5FD1EAD6092)
    return 0;
  v9 = (char *)v8[1];
  return v9 == "Custom Deformers" || strcmp(v9, "Custom Deformers") == 0;
}

const char *REMeshDeformationDefinitionAssetBuilderDeformerIsCustomNamedDeformer(uint64_t a1, const char *a2, unint64_t a3, unint64_t a4)
{
  const char *result;

  result = (const char *)REMeshDeformationDefinitionAssetBuilderDeformerCustomDeformerName(a1, a3, a4);
  if (result)
    return (const char *)(strcmp(result, a2) == 0);
  return result;
}

uint64_t REMeshDeformationDefinitionAssetBuilderDeformerCustomDeformerName(uint64_t a1, unint64_t a2, unint64_t a3)
{
  re::MeshDeformationAsset *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  const char *v10;
  NSObject *v12;
  NSObject *v13;
  const char *v14;
  uint8_t buf[16];
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  uint64_t v20;

  v20 = *MEMORY[0x24BDAC8D0];
  v5 = (re::MeshDeformationAsset *)(a1 + 24);
                 + 16) <= a2)
  {
    if (CoreRELog::onceToken == -1)
    {
LABEL_10:
      v12 = (id)CoreRELog::log;
      if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 134217984;
        *(_QWORD *)&buf[4] = a2;
        _os_log_error_impl(&dword_224FE9000, v12, OS_LOG_TYPE_ERROR, "Invalid deformation stack index: %zu", buf, 0xCu);
      }

      return 0;
    }
LABEL_25:
    dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
    goto LABEL_10;
  }
  if (*(_QWORD *)(v6 + 16) <= a2)
  {
    v18 = 0u;
    v19 = 0u;
    v16 = 0u;
    v17 = 0u;
    *(_OWORD *)buf = 0u;
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
    goto LABEL_25;
  }
  v7 = *(_QWORD *)(v6 + 32) + 40 * a2;
  if (*(_QWORD *)(v7 + 16) <= a3)
  {
    if (CoreRELog::onceToken != -1)
      dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
    v13 = (id)CoreRELog::log;
    if (!os_log_type_enabled(v13, OS_LOG_TYPE_ERROR))
      goto LABEL_16;
    *(_DWORD *)buf = 134217984;
    *(_QWORD *)&buf[4] = a3;
    v14 = "Invalid deformer index: %zu";
    goto LABEL_23;
  }
  v8 = *(_QWORD *)(v7 + 32);
  v9 = (_QWORD *)(v8 + 40 * a3);
  if (*v9 >> 1 != 0x7550E5FD1EAD6092)
    return 0;
  v10 = (const char *)v9[1];
  if (v10 != "Custom Deformers")
  {
    if (strcmp(v10, "Custom Deformers"))
      return 0;
  }
  if (*(_QWORD *)(v8 + 40 * a3 + 24) == 64)
    return *(_QWORD *)(v8 + 40 * a3 + 32);
  if (CoreRELog::onceToken != -1)
    dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
  v13 = (id)CoreRELog::log;
  if (os_log_type_enabled(v13, OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)buf = 134217984;
    *(_QWORD *)&buf[4] = a3;
    v14 = "Invalid custom deformation options: %zu";
LABEL_23:
    _os_log_error_impl(&dword_224FE9000, v13, OS_LOG_TYPE_ERROR, v14, buf, 0xCu);
  }
LABEL_16:

  return 0;
}

uint64_t REMeshDeformationDefinitionAssetBuilderGetAssignedMeshCount(uint64_t a1)
{
                   + 56);
}

uint64_t REMeshDeformationDefinitionAssetBuilderAssignedMeshDeformationStackIndex(uint64_t a1, unint64_t a2)
{
  re::MeshDeformationAsset *v3;
  uint64_t v4;
  NSObject *v6;
  uint8_t buf[16];
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  uint64_t v12;

  v12 = *MEMORY[0x24BDAC8D0];
  v3 = (re::MeshDeformationAsset *)(a1 + 24);
                 + 56) > a2)
  {
    if (*(_QWORD *)(v4 + 56) > a2)
      return *(_QWORD *)(*(_QWORD *)(v4 + 72) + 48 * a2 + 40);
    v10 = 0u;
    v11 = 0u;
    v8 = 0u;
    v9 = 0u;
    *(_OWORD *)buf = 0u;
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
    goto LABEL_9;
  }
  if (CoreRELog::onceToken != -1)
LABEL_9:
    dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
  v6 = (id)CoreRELog::log;
  if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)buf = 134217984;
    *(_QWORD *)&buf[4] = a2;
    _os_log_error_impl(&dword_224FE9000, v6, OS_LOG_TYPE_ERROR, "Invalid assigned mesh index: %zu", buf, 0xCu);
  }

  return -1;
}

uint64_t REMeshDeformationDefinitionAssetBuilderAssignedMeshIdentifierType(uint64_t a1, unint64_t a2)
{
  re::MeshDeformationAsset *v3;
  uint64_t v4;
  NSObject *v6;
  uint8_t buf[16];
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  uint64_t v12;

  v12 = *MEMORY[0x24BDAC8D0];
  v3 = (re::MeshDeformationAsset *)(a1 + 24);
                 + 56) > a2)
  {
    if (*(_QWORD *)(v4 + 56) > a2)
      return *(unsigned __int8 *)(*(_QWORD *)(v4 + 72) + 48 * a2);
    v10 = 0u;
    v11 = 0u;
    v8 = 0u;
    v9 = 0u;
    *(_OWORD *)buf = 0u;
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
    goto LABEL_9;
  }
  if (CoreRELog::onceToken != -1)
LABEL_9:
    dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
  v6 = (id)CoreRELog::log;
  if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)buf = 134217984;
    *(_QWORD *)&buf[4] = a2;
    _os_log_error_impl(&dword_224FE9000, v6, OS_LOG_TYPE_ERROR, "Invalid assigned mesh index: %zu", buf, 0xCu);
  }

  return 0;
}

CFTypeRef REMeshDeformationDefinitionAssetBuilderAssignedMeshIdentifierName(uint64_t a1, unint64_t a2)
{
  re::MeshDeformationAsset *v3;
  uint64_t v4;
  CFStringRef v5;
  NSObject *v7;
  uint8_t buf[16];
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  uint64_t v13;

  v13 = *MEMORY[0x24BDAC8D0];
  v3 = (re::MeshDeformationAsset *)(a1 + 24);
                 + 56) > a2)
  {
    if (*(_QWORD *)(v4 + 56) > a2)
    {
      v5 = CFStringCreateWithCString(0, *(const char **)(*(_QWORD *)(v4 + 72) + 48 * a2 + 16), 0x8000100u);
      return CFAutorelease(v5);
    }
    v11 = 0u;
    v12 = 0u;
    v9 = 0u;
    v10 = 0u;
    *(_OWORD *)buf = 0u;
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
    goto LABEL_9;
  }
  if (CoreRELog::onceToken != -1)
LABEL_9:
    dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
  v7 = (id)CoreRELog::log;
  if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)buf = 134217984;
    *(_QWORD *)&buf[4] = a2;
    _os_log_error_impl(&dword_224FE9000, v7, OS_LOG_TYPE_ERROR, "Invalid assigned mesh index: %zu", buf, 0xCu);
  }

  return 0;
}

CFTypeRef REMeshDeformationDefinitionAssetBuilderAssignedMeshIdentifierPartName(uint64_t a1, unint64_t a2)
{
  re::MeshDeformationAsset *v3;
  uint64_t v4;
  CFStringRef v5;
  NSObject *v7;
  uint8_t buf[16];
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  uint64_t v13;

  v13 = *MEMORY[0x24BDAC8D0];
  v3 = (re::MeshDeformationAsset *)(a1 + 24);
                 + 56) > a2)
  {
    if (*(_QWORD *)(v4 + 56) > a2)
    {
      v5 = CFStringCreateWithCString(0, *(const char **)(*(_QWORD *)(v4 + 72) + 48 * a2 + 32), 0x8000100u);
      return CFAutorelease(v5);
    }
    v11 = 0u;
    v12 = 0u;
    v9 = 0u;
    v10 = 0u;
    *(_OWORD *)buf = 0u;
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
    goto LABEL_9;
  }
  if (CoreRELog::onceToken != -1)
LABEL_9:
    dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
  v7 = (id)CoreRELog::log;
  if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)buf = 134217984;
    *(_QWORD *)&buf[4] = a2;
    _os_log_error_impl(&dword_224FE9000, v7, OS_LOG_TYPE_ERROR, "Invalid assigned mesh index: %zu", buf, 0xCu);
  }

  return 0;
}

BOOL REMeshDeformationDefinitionAssetBuilderAssignedMeshRemove(uint64_t a1, unint64_t a2)
{
  uint64_t *v3;
  unint64_t v4;
  re *v5;
  NSObject *v6;
  int v8;
  unint64_t v9;
  uint64_t v10;

  v10 = *MEMORY[0x24BDAC8D0];
  v3 = (uint64_t *)(a1 + 24);
  if (v4 <= a2)
  {
    if (CoreRELog::onceToken != -1)
      dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
    v6 = (id)CoreRELog::log;
    if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
    {
      v8 = 134217984;
      v9 = a2;
      _os_log_error_impl(&dword_224FE9000, v6, OS_LOG_TYPE_ERROR, "Invalid assigned mesh index: %zu", (uint8_t *)&v8, 0xCu);
    }

  }
  else
  {
    re::DynamicArray<re::MeshDeformationIndex>::removeStableAt((uint64_t)v5 + 40, a2);
  }
  return v4 > a2;
}

void re::DynamicArray<re::MeshDeformationIndex>::removeStableAt(uint64_t a1, unint64_t a2)
{
  unint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  _OWORD v17[5];
  uint64_t v18;

  v18 = *MEMORY[0x24BDAC8D0];
  v2 = *(_QWORD *)(a1 + 16);
  if (v2 <= a2)
  {
    memset(v17, 0, sizeof(v17));
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  if (v2 - 1 > a2)
  {
    v4 = *(_QWORD *)(a1 + 32);
    if (v4 + 48 * a2 + 48 != v4 + 48 * v2)
    {
      v5 = 48 * a2;
      v6 = 48 * v2 - 48;
      do
      {
        v7 = v4 + v5;
        *(_BYTE *)v7 = *(_BYTE *)(v4 + v5 + 48);
        v8 = *(_QWORD *)(v4 + v5 + 56);
        v9 = *(_QWORD *)(v4 + v5 + 64);
        v10 = *(_QWORD *)(v4 + v5 + 16);
        v11 = v8 & 0xFFFFFFFFFFFFFFFELL | *(_QWORD *)(v4 + v5 + 8) & 1;
        *(_QWORD *)(v7 + 56) = 0;
        *(_QWORD *)(v7 + 64) = &str_110;
        *(_QWORD *)(v7 + 16) = v9;
        *(_QWORD *)&v17[0] = v11;
        *((_QWORD *)&v17[0] + 1) = v10;
        *(_QWORD *)(v7 + 8) = v8;
        re::StringID::destroyString((re::StringID *)v17);
        v12 = *(_QWORD *)(v4 + v5 + 72);
        v13 = *(_QWORD *)(v4 + v5 + 80);
        *(_QWORD *)(v7 + 72) = 0;
        *(_QWORD *)(v7 + 80) = &str_110;
        v14 = *(_QWORD *)(v4 + v5 + 32);
        v15 = v12 & 0xFFFFFFFFFFFFFFFELL | *(_QWORD *)(v4 + v5 + 24) & 1;
        *(_QWORD *)(v7 + 32) = v13;
        *(_QWORD *)&v17[0] = v15;
        *((_QWORD *)&v17[0] + 1) = v14;
        *(_QWORD *)(v7 + 24) = v12;
        re::StringID::destroyString((re::StringID *)v17);
        *(_QWORD *)(v7 + 40) = *(_QWORD *)(v7 + 88);
        v4 += 48;
        v6 -= 48;
      }
      while (v5 != v6);
      v2 = *(_QWORD *)(a1 + 16);
    }
  }
  v16 = *(_QWORD *)(a1 + 32) + 48 * v2;
  re::StringID::destroyString((re::StringID *)(v16 - 24));
  re::StringID::destroyString((re::StringID *)(v16 - 40));
  --*(_QWORD *)(a1 + 16);
  ++*(_DWORD *)(a1 + 24);
}

uint64_t REMeshDeformationDefinitionAssetBuilderAssignedMeshMove(uint64_t a1, unint64_t a2, unint64_t a3)
{
  uint64_t *v5;
  re *v6;
  unint64_t v7;
  uint64_t v8;
  char v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  re *v14;
  re *v15;
  unint64_t v16;
  re *v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  _QWORD *v41;
  NSObject *v42;
  NSObject *v43;
  unint64_t v45;
  uint64_t v46;
  unint64_t v47;
  uint64_t v48;
  uint64_t v49;
  _BYTE v50[36];
  uint64_t v51;
  _BYTE v52[12];
  __int16 v53;
  int v54;
  __int16 v55;
  unint64_t v56;
  __int16 v57;
  unint64_t v58;
  uint8_t buf[16];
  __int128 v60;
  __int128 v61;
  __int128 v62;
  __int128 v63;
  uint64_t v64;

  v64 = *MEMORY[0x24BDAC8D0];
  v5 = (uint64_t *)(a1 + 24);
  {
    if (CoreRELog::onceToken != -1)
      dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
    v42 = (id)CoreRELog::log;
    if (os_log_type_enabled(v42, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 134217984;
      *(_QWORD *)&buf[4] = a2;
      _os_log_error_impl(&dword_224FE9000, v42, OS_LOG_TYPE_ERROR, "Invalid assigned mesh index: %zu", buf, 0xCu);
    }

    return 0;
  }
  {
    if (CoreRELog::onceToken == -1)
    {
LABEL_19:
      v43 = (id)CoreRELog::log;
      if (os_log_type_enabled(v43, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 134217984;
        *(_QWORD *)&buf[4] = a3;
        _os_log_error_impl(&dword_224FE9000, v43, OS_LOG_TYPE_ERROR, "Invalid new assigned mesh index: %zu", buf, 0xCu);
      }

      return 0;
    }
LABEL_26:
    dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
    goto LABEL_19;
  }
  v7 = *((_QWORD *)v6 + 7);
  if (v7 <= a2)
  {
    *(_QWORD *)v52 = 0;
    v62 = 0u;
    v63 = 0u;
    v61 = 0u;
    *(_OWORD *)buf = 0u;
    v60 = 0u;
    a3 = MEMORY[0x24BDACB70];
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    *(_QWORD *)v50 = "operator[]";
    *(_WORD *)&v50[8] = 1024;
    *(_DWORD *)&v50[10] = 789;
    *(_WORD *)&v50[14] = 2048;
    *(_QWORD *)&v50[16] = a2;
    *(_WORD *)&v50[24] = 2048;
    *(_QWORD *)&v50[26] = v7;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
    goto LABEL_26;
  }
  v8 = *((_QWORD *)v6 + 9) + 48 * a2;
  v9 = *(_BYTE *)v8;
  v10 = *(_QWORD *)(v8 + 8);
  v49 = *(_QWORD *)(v8 + 16);
  *(_QWORD *)(v8 + 8) = 0;
  *(_QWORD *)(v8 + 16) = &str_110;
  v11 = *(_QWORD *)(v8 + 24);
  v12 = *(_QWORD *)(v8 + 32);
  *(_QWORD *)(v8 + 24) = 0;
  *(_QWORD *)(v8 + 32) = &str_110;
  v13 = *(_QWORD *)(v8 + 40);
  v51 = v13;
  re::DynamicArray<re::MeshDeformationIndex>::removeStableAt((uint64_t)v14 + 40, a2);
  v16 = *((_QWORD *)v15 + 7);
  if (v16 + 1 <= a3)
  {
    v62 = 0u;
    v63 = 0u;
    v61 = 0u;
    *(_OWORD *)buf = 0u;
    v60 = 0u;
    v45 = v16 + 1;
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    *(_DWORD *)v52 = 136315906;
    *(_QWORD *)&v52[4] = "insert";
    v53 = 1024;
    v54 = 887;
    v55 = 2048;
    v56 = a3;
    v57 = 2048;
    v58 = v45;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  v17 = v15;
  v48 = v12;
  if (v16 >= *((_QWORD *)v15 + 6))
  {
    re::DynamicArray<re::MeshDeformationIndex>::growCapacity((_QWORD *)v15 + 5, v16 + 1);
    v16 = *((_QWORD *)v17 + 7);
  }
  v18 = *((_QWORD *)v17 + 9);
  v19 = v18 + 48 * v16;
  if (v16 <= a3)
  {
    *(_BYTE *)v19 = v9;
    *(_QWORD *)(v19 + 8) = v10;
    *(_QWORD *)(v19 + 16) = v49;
    *(_QWORD *)&v50[4] = 0;
    *(_QWORD *)&v50[12] = &str_110;
    *(_QWORD *)(v19 + 24) = v11;
    *(_QWORD *)(v19 + 32) = v12;
    *(_QWORD *)&v50[20] = 0;
    *(_QWORD *)&v50[28] = &str_110;
    v41 = (_QWORD *)(v18 + 48 * v16 + 40);
  }
  else
  {
    v20 = v10 & 0xFFFFFFFFFFFFFFFELL;
    v21 = v18 + 48 * v16;
    *(_BYTE *)v19 = *(_BYTE *)(v21 - 48);
    *(_QWORD *)(v19 + 8) = *(_QWORD *)(v21 - 40);
    v22 = *(_QWORD *)(v21 - 8);
    *(_QWORD *)(v19 + 32) = *(_QWORD *)(v21 - 16);
    v47 = v11 & 0xFFFFFFFFFFFFFFFELL;
    *(_OWORD *)(v19 + 16) = *(_OWORD *)(v21 - 32);
    *(_QWORD *)(v21 - 40) = 0;
    *(_QWORD *)(v21 - 32) = &str_110;
    *(_QWORD *)(v21 - 24) = 0;
    *(_QWORD *)(v21 - 16) = &str_110;
    *(_QWORD *)(v21 + 40) = v22;
    v23 = *((_QWORD *)v17 + 9);
    v24 = *((_QWORD *)v17 + 7);
    if (v23 + 48 * v24 - 48 != v23 + 48 * a3)
    {
      v46 = v11;
      v25 = 48 * v24;
      v26 = 48 * a3 + 48;
      do
      {
        v27 = v23 + v25;
        *(_BYTE *)(v27 - 48) = *(_BYTE *)(v23 + v25 - 96);
        v28 = *(_QWORD *)(v23 + v25 - 88);
        v29 = *(_QWORD *)(v23 + v25 - 80);
        v30 = *(_QWORD *)(v23 + v25 - 32);
        v31 = v28 & 0xFFFFFFFFFFFFFFFELL | *(_QWORD *)(v23 + v25 - 40) & 1;
        *(_QWORD *)(v27 - 88) = 0;
        *(_QWORD *)(v27 - 80) = &str_110;
        *(_QWORD *)(v27 - 32) = v29;
        *(_QWORD *)buf = v31;
        *(_QWORD *)&buf[8] = v30;
        *(_QWORD *)(v27 - 40) = v28;
        re::StringID::destroyString((re::StringID *)buf);
        v32 = *(_QWORD *)(v23 + v25 - 72);
        v33 = *(_QWORD *)(v23 + v25 - 64);
        *(_QWORD *)(v27 - 72) = 0;
        *(_QWORD *)(v27 - 64) = &str_110;
        v34 = *(_QWORD *)(v23 + v25 - 16);
        v35 = v32 & 0xFFFFFFFFFFFFFFFELL | *(_QWORD *)(v23 + v25 - 24) & 1;
        *(_QWORD *)(v27 - 16) = v33;
        *(_QWORD *)buf = v35;
        *(_QWORD *)&buf[8] = v34;
        *(_QWORD *)(v27 - 24) = v32;
        re::StringID::destroyString((re::StringID *)buf);
        *(_QWORD *)(v27 - 8) = *(_QWORD *)(v27 - 56);
        v23 -= 48;
        v26 += 48;
      }
      while (v25 != v26);
      v23 = *((_QWORD *)v17 + 9);
      v11 = v46;
      v20 = v10 & 0xFFFFFFFFFFFFFFFELL;
    }
    v36 = v23 + 48 * a3;
    *(_BYTE *)v36 = v9;
    *(_QWORD *)&v50[4] = 0;
    *(_QWORD *)&v50[12] = &str_110;
    v37 = *(_QWORD *)(v36 + 16);
    v38 = *(_QWORD *)(v36 + 8) & 1 | v20;
    *(_QWORD *)(v36 + 16) = v49;
    *(_QWORD *)buf = v38;
    *(_QWORD *)&buf[8] = v37;
    *(_QWORD *)(v36 + 8) = v10;
    re::StringID::destroyString((re::StringID *)buf);
    *(_QWORD *)&v50[20] = 0;
    *(_QWORD *)&v50[28] = &str_110;
    v39 = *(_QWORD *)(v36 + 32);
    v40 = *(_QWORD *)(v36 + 24) & 1 | v47;
    *(_QWORD *)(v36 + 32) = v48;
    *(_QWORD *)buf = v40;
    *(_QWORD *)&buf[8] = v39;
    *(_QWORD *)(v36 + 24) = v11;
    re::StringID::destroyString((re::StringID *)buf);
    v41 = (_QWORD *)(v36 + 40);
  }
  *v41 = v13;
  ++*((_QWORD *)v17 + 7);
  ++*((_DWORD *)v17 + 16);
  re::StringID::destroyString((re::StringID *)&v50[20]);
  re::StringID::destroyString((re::StringID *)&v50[4]);
  return 1;
}

uint64_t REMeshDeformationDefinitionAssetBuilderAssignDeformationStack(uint64_t a1, unint64_t a2, int a3, const char *a4, const char *a5)
{
  uint64_t *v9;
  NSObject *v10;
  NSObject *v11;
  _anonymous_namespace_ *v13;
  _QWORD *v14;
  _anonymous_namespace_ *v15;
  int v16;
  _DWORD v17[5];
  _QWORD v18[5];

  v18[4] = *MEMORY[0x24BDAC8D0];
  v9 = (uint64_t *)(a1 + 24);
  {
    if (CoreRELog::onceToken != -1)
      dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
    v11 = (id)CoreRELog::log;
    if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR))
    {
      v16 = 134217984;
      *(_QWORD *)v17 = a2;
      _os_log_error_impl(&dword_224FE9000, v11, OS_LOG_TYPE_ERROR, "Invalid deformation stack definition index: %zu", (uint8_t *)&v16, 0xCu);
    }

    return 0;
  }
  if ((a3 - 3) <= 0xFFFFFFFD)
  {
    if (CoreRELog::onceToken != -1)
      dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
    v10 = (id)CoreRELog::log;
    if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
    {
      v16 = 67109120;
      v17[0] = a3;
      _os_log_error_impl(&dword_224FE9000, v10, OS_LOG_TYPE_ERROR, "Invalid mesh identifier type: %u", (uint8_t *)&v16, 8u);
    }

    return 0;
  }
  v14 = (_QWORD *)((char *)v13 + 40);
  LOBYTE(v16) = a3;
  *(_QWORD *)&v17[1] = 0;
  *(_QWORD *)&v17[3] = &str_110;
  v18[0] = 0;
  v18[1] = &str_110;
  if (a5)
  {
  }
  v18[2] = a2;
  re::DynamicArray<re::MeshDeformationIndex>::add(v14, (uint64_t)&v16);
  re::StringID::destroyString((re::StringID *)v18);
  re::StringID::destroyString((re::StringID *)&v17[1]);
  return 1;
}

uint64_t REMeshDeformationDefinitionAssetBuilderCreateMeshDeformationDefinitionAsset(_QWORD *a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t *v5;
  uint64_t v6;
  _QWORD v8[3];

  v3 = a1[6];
  if (v3)
  {
    a1[6] = 0;
    v5 = re::MeshDeformationAsset::assetType((re::MeshDeformationAsset *)a1);
    (*(void (**)(_QWORD *__return_ptr, uint64_t, uint64_t, uint64_t *, _QWORD, _QWORD, _QWORD))(*(_QWORD *)a2 + 416))(v8, a2, v3, v5, 0, 0, 0);
  }
  else
  {
    re::AssetHandle::AssetHandle((re::AssetHandle *)v8, (const re::AssetHandle *)(a1 + 3));
  }
  v6 = v8[0];
  v8[0] = 0;
  re::AssetHandle::~AssetHandle((re::AssetHandle *)v8);
  return v6;
}

uint64_t REMeshDeformationDefinitionAssetBuilderDeformationStackAddContact(uint64_t a1, unint64_t a2)
{
  uint64_t *v3;
  re *v4;
  unint64_t v5;
  _QWORD *v6;
  NSObject *v8;
  _BYTE v9[18];
  __int16 v10;
  unint64_t v11;
  __int16 v12;
  unint64_t v13;
  uint8_t buf[16];
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  uint64_t v19;

  v19 = *MEMORY[0x24BDAC8D0];
  v3 = (uint64_t *)(a1 + 24);
  {
    v5 = *((_QWORD *)v4 + 2);
    if (v5 > a2)
    {
      v6 = (_QWORD *)(*((_QWORD *)v4 + 4) + 40 * a2);
      *(_QWORD *)buf = 0x22F387A552F200A4;
      *(_QWORD *)&buf[8] = "ContactDeformer";
      *(_QWORD *)v9 = &REMeshDeformationDefinitionAssetBuilderDeformationStackAddContact::kDefaultDeformerOptions;
      *(_QWORD *)&v9[8] = 1;
      *(_QWORD *)&v16 = 0;
      v15 = 0uLL;
      re::FixedArray<unsigned char>::copy(&v15, (uint64_t)v9);
      re::DynamicArray<re::DeformationDefinition>::add(v6, (uint64_t *)buf);
      if ((_QWORD)v15)
      {
        if (*((_QWORD *)&v15 + 1))
        {
          (*(void (**)(void))(*(_QWORD *)v15 + 40))();
          *((_QWORD *)&v15 + 1) = 0;
          *(_QWORD *)&v16 = 0;
        }
        *(_QWORD *)&v15 = 0;
      }
      re::StringID::destroyString((re::StringID *)buf);
      return v6[2] - 1;
    }
    v17 = 0u;
    v18 = 0u;
    v15 = 0u;
    v16 = 0u;
    *(_OWORD *)buf = 0u;
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    *(_DWORD *)v9 = 136315906;
    *(_QWORD *)&v9[4] = "operator[]";
    *(_WORD *)&v9[12] = 1024;
    *(_DWORD *)&v9[14] = 789;
    v10 = 2048;
    v11 = a2;
    v12 = 2048;
    v13 = v5;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
    goto LABEL_13;
  }
  if (CoreRELog::onceToken != -1)
LABEL_13:
    dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
  v8 = (id)CoreRELog::log;
  if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)buf = 134217984;
    *(_QWORD *)&buf[4] = a2;
    _os_log_error_impl(&dword_224FE9000, v8, OS_LOG_TYPE_ERROR, "Invalid deformation stack index: %zu", buf, 0xCu);
  }

  return -1;
}

BOOL REMeshDeformationDefinitionAssetBuilderDeformerIsContact(uint64_t a1, unint64_t a2, unint64_t a3)
{
  re::MeshDeformationAsset *v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  char *v9;
  NSObject *v11;
  NSObject *v12;
  uint8_t buf[16];
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  uint64_t v18;

  v18 = *MEMORY[0x24BDAC8D0];
  v5 = (re::MeshDeformationAsset *)(a1 + 24);
                 + 16) <= a2)
  {
    if (CoreRELog::onceToken == -1)
    {
LABEL_8:
      v11 = (id)CoreRELog::log;
      if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 134217984;
        *(_QWORD *)&buf[4] = a2;
        _os_log_error_impl(&dword_224FE9000, v11, OS_LOG_TYPE_ERROR, "Invalid deformation stack index: %zu", buf, 0xCu);
      }

      return 0;
    }
LABEL_19:
    dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
    goto LABEL_8;
  }
  if (*(_QWORD *)(v6 + 16) <= a2)
  {
    v16 = 0u;
    v17 = 0u;
    v14 = 0u;
    v15 = 0u;
    *(_OWORD *)buf = 0u;
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
    goto LABEL_19;
  }
  v7 = *(_QWORD *)(v6 + 32) + 40 * a2;
  if (*(_QWORD *)(v7 + 16) <= a3)
  {
    if (CoreRELog::onceToken != -1)
      dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
    v12 = (id)CoreRELog::log;
    if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 134217984;
      *(_QWORD *)&buf[4] = a3;
      _os_log_error_impl(&dword_224FE9000, v12, OS_LOG_TYPE_ERROR, "Invalid deformer index: %zu", buf, 0xCu);
    }

    return 0;
  }
  v8 = (_QWORD *)(*(_QWORD *)(v7 + 32) + 40 * a3);
  if (*v8 >> 1 != 0x1179C3D2A9790052)
    return 0;
  v9 = (char *)v8[1];
  return v9 == "ContactDeformer" || strcmp(v9, "ContactDeformer") == 0;
}

BOOL REMeshDeformationDefinitionAssetBuilderContactGetForceCPU(uint64_t a1, unint64_t a2, unint64_t a3)
{
  re::MeshDeformationAsset *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  char *v10;
  NSObject *v11;
  const char *v12;
  NSObject *v13;
  uint8_t buf[16];
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  uint64_t v20;

  v20 = *MEMORY[0x24BDAC8D0];
  v5 = (re::MeshDeformationAsset *)(a1 + 24);
                 + 16) <= a2)
  {
    if (CoreRELog::onceToken == -1)
    {
LABEL_12:
      v13 = (id)CoreRELog::log;
      if (os_log_type_enabled(v13, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 134217984;
        *(_QWORD *)&buf[4] = a2;
        _os_log_error_impl(&dword_224FE9000, v13, OS_LOG_TYPE_ERROR, "Invalid deformation stack index: %zu", buf, 0xCu);
      }

      return 0;
    }
LABEL_29:
    dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
    goto LABEL_12;
  }
  if (*(_QWORD *)(v6 + 16) <= a2)
  {
    v18 = 0u;
    v19 = 0u;
    v16 = 0u;
    v17 = 0u;
    *(_OWORD *)buf = 0u;
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
    goto LABEL_29;
  }
  v7 = *(_QWORD *)(v6 + 32) + 40 * a2;
  if (*(_QWORD *)(v7 + 16) <= a3)
  {
    if (CoreRELog::onceToken != -1)
      dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
    v11 = (id)CoreRELog::log;
    if (!os_log_type_enabled(v11, OS_LOG_TYPE_ERROR))
      goto LABEL_18;
    *(_DWORD *)buf = 134217984;
    *(_QWORD *)&buf[4] = a3;
    v12 = "Invalid deformer index: %zu";
    goto LABEL_27;
  }
  v8 = *(_QWORD *)(v7 + 32);
  v9 = (_QWORD *)(v8 + 40 * a3);
  if (*v9 >> 1 != 0x1179C3D2A9790052
    || (v10 = (char *)v9[1], v10 != "ContactDeformer") && strcmp(v10, "ContactDeformer"))
  {
    if (CoreRELog::onceToken != -1)
      dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
    v11 = (id)CoreRELog::log;
    if (!os_log_type_enabled(v11, OS_LOG_TYPE_ERROR))
      goto LABEL_18;
    *(_DWORD *)buf = 134217984;
    *(_QWORD *)&buf[4] = a3;
    v12 = "Not a contact deformer index: %zu";
LABEL_27:
    _os_log_error_impl(&dword_224FE9000, v11, OS_LOG_TYPE_ERROR, v12, buf, 0xCu);
LABEL_18:

    return 0;
  }
  if (*(_QWORD *)(v8 + 40 * a3 + 24) != 1)
  {
    if (CoreRELog::onceToken != -1)
      dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
    v11 = (id)CoreRELog::log;
    if (!os_log_type_enabled(v11, OS_LOG_TYPE_ERROR))
      goto LABEL_18;
    *(_DWORD *)buf = 134217984;
    *(_QWORD *)&buf[4] = a3;
    v12 = "Unexpected contact deformer options size for deformer index: %zu";
    goto LABEL_27;
  }
  return **(_BYTE **)(v8 + 40 * a3 + 32) != 0;
}

uint64_t REMeshDeformationDefinitionAssetBuilderContactSetForceCPU(uint64_t a1, unint64_t a2, unint64_t a3, char a4)
{
  uint64_t *v7;
  re *v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  char *v12;
  NSObject *v13;
  const char *v14;
  NSObject *v15;
  uint8_t buf[16];
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  uint64_t v22;

  v22 = *MEMORY[0x24BDAC8D0];
  v7 = (uint64_t *)(a1 + 24);
  {
    if (CoreRELog::onceToken == -1)
    {
LABEL_12:
      v15 = (id)CoreRELog::log;
      if (os_log_type_enabled(v15, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 134217984;
        *(_QWORD *)&buf[4] = a2;
        _os_log_error_impl(&dword_224FE9000, v15, OS_LOG_TYPE_ERROR, "Invalid deformation stack index: %zu", buf, 0xCu);
      }

      return 0;
    }
LABEL_29:
    dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
    goto LABEL_12;
  }
  if (*((_QWORD *)v8 + 2) <= a2)
  {
    v20 = 0u;
    v21 = 0u;
    v18 = 0u;
    v19 = 0u;
    *(_OWORD *)buf = 0u;
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
    goto LABEL_29;
  }
  v9 = *((_QWORD *)v8 + 4) + 40 * a2;
  if (*(_QWORD *)(v9 + 16) <= a3)
  {
    if (CoreRELog::onceToken != -1)
      dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
    v13 = (id)CoreRELog::log;
    if (!os_log_type_enabled(v13, OS_LOG_TYPE_ERROR))
      goto LABEL_18;
    *(_DWORD *)buf = 134217984;
    *(_QWORD *)&buf[4] = a3;
    v14 = "Invalid deformer index: %zu";
    goto LABEL_27;
  }
  v10 = *(_QWORD *)(v9 + 32);
  v11 = (_QWORD *)(v10 + 40 * a3);
  if (*v11 >> 1 != 0x1179C3D2A9790052
    || (v12 = (char *)v11[1], v12 != "ContactDeformer") && strcmp(v12, "ContactDeformer"))
  {
    if (CoreRELog::onceToken != -1)
      dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
    v13 = (id)CoreRELog::log;
    if (!os_log_type_enabled(v13, OS_LOG_TYPE_ERROR))
      goto LABEL_18;
    *(_DWORD *)buf = 134217984;
    *(_QWORD *)&buf[4] = a3;
    v14 = "Not a contact deformer index: %zu";
LABEL_27:
    _os_log_error_impl(&dword_224FE9000, v13, OS_LOG_TYPE_ERROR, v14, buf, 0xCu);
LABEL_18:

    return 0;
  }
  if (*(_QWORD *)(v10 + 40 * a3 + 24) != 1)
  {
    if (CoreRELog::onceToken != -1)
      dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
    v13 = (id)CoreRELog::log;
    if (!os_log_type_enabled(v13, OS_LOG_TYPE_ERROR))
      goto LABEL_18;
    *(_DWORD *)buf = 134217984;
    *(_QWORD *)&buf[4] = a3;
    v14 = "Unexpected contact deformer options size for deformer index: %zu";
    goto LABEL_27;
  }
  **(_BYTE **)(v10 + 40 * a3 + 32) = a4;
  return 1;
}

uint64_t REMeshDeformationDefinitionAssetBuilderDeformationStackAddFence(uint64_t a1, unint64_t a2)
{
  uint64_t *v3;
  re *v4;
  unint64_t v5;
  _QWORD *v6;
  NSObject *v8;
  _BYTE v9[18];
  __int16 v10;
  unint64_t v11;
  __int16 v12;
  unint64_t v13;
  uint8_t buf[16];
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  uint64_t v19;

  v19 = *MEMORY[0x24BDAC8D0];
  v3 = (uint64_t *)(a1 + 24);
  {
    v5 = *((_QWORD *)v4 + 2);
    if (v5 > a2)
    {
      v6 = (_QWORD *)(*((_QWORD *)v4 + 4) + 40 * a2);
      *(_QWORD *)buf = 0x4425D6C2BB3546C6;
      *(_QWORD *)&buf[8] = "FenceDeformer";
      *(_QWORD *)v9 = &REMeshDeformationDefinitionAssetBuilderDeformationStackAddFence::kDefaultDeformerOptions;
      *(_QWORD *)&v9[8] = 257;
      *(_QWORD *)&v16 = 0;
      v15 = 0uLL;
      re::FixedArray<unsigned char>::copy(&v15, (uint64_t)v9);
      re::DynamicArray<re::DeformationDefinition>::add(v6, (uint64_t *)buf);
      if ((_QWORD)v15)
      {
        if (*((_QWORD *)&v15 + 1))
        {
          (*(void (**)(void))(*(_QWORD *)v15 + 40))();
          *((_QWORD *)&v15 + 1) = 0;
          *(_QWORD *)&v16 = 0;
        }
        *(_QWORD *)&v15 = 0;
      }
      re::StringID::destroyString((re::StringID *)buf);
      return v6[2] - 1;
    }
    v17 = 0u;
    v18 = 0u;
    v15 = 0u;
    v16 = 0u;
    *(_OWORD *)buf = 0u;
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    *(_DWORD *)v9 = 136315906;
    *(_QWORD *)&v9[4] = "operator[]";
    *(_WORD *)&v9[12] = 1024;
    *(_DWORD *)&v9[14] = 789;
    v10 = 2048;
    v11 = a2;
    v12 = 2048;
    v13 = v5;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
    goto LABEL_13;
  }
  if (CoreRELog::onceToken != -1)
LABEL_13:
    dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
  v8 = (id)CoreRELog::log;
  if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)buf = 134217984;
    *(_QWORD *)&buf[4] = a2;
    _os_log_error_impl(&dword_224FE9000, v8, OS_LOG_TYPE_ERROR, "Invalid deformation stack index: %zu", buf, 0xCu);
  }

  return -1;
}

BOOL REMeshDeformationDefinitionAssetBuilderDeformerIsFence(uint64_t a1, unint64_t a2, unint64_t a3)
{
  re::MeshDeformationAsset *v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  char *v9;
  NSObject *v11;
  NSObject *v12;
  uint8_t buf[16];
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  uint64_t v18;

  v18 = *MEMORY[0x24BDAC8D0];
  v5 = (re::MeshDeformationAsset *)(a1 + 24);
                 + 16) <= a2)
  {
    if (CoreRELog::onceToken == -1)
    {
LABEL_8:
      v11 = (id)CoreRELog::log;
      if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 134217984;
        *(_QWORD *)&buf[4] = a2;
        _os_log_error_impl(&dword_224FE9000, v11, OS_LOG_TYPE_ERROR, "Invalid deformation stack index: %zu", buf, 0xCu);
      }

      return 0;
    }
LABEL_19:
    dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
    goto LABEL_8;
  }
  if (*(_QWORD *)(v6 + 16) <= a2)
  {
    v16 = 0u;
    v17 = 0u;
    v14 = 0u;
    v15 = 0u;
    *(_OWORD *)buf = 0u;
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
    goto LABEL_19;
  }
  v7 = *(_QWORD *)(v6 + 32) + 40 * a2;
  if (*(_QWORD *)(v7 + 16) <= a3)
  {
    if (CoreRELog::onceToken != -1)
      dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
    v12 = (id)CoreRELog::log;
    if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 134217984;
      *(_QWORD *)&buf[4] = a3;
      _os_log_error_impl(&dword_224FE9000, v12, OS_LOG_TYPE_ERROR, "Invalid deformer index: %zu", buf, 0xCu);
    }

    return 0;
  }
  v8 = (_QWORD *)(*(_QWORD *)(v7 + 32) + 40 * a3);
  if (*v8 >> 1 != 0x2212EB615D9AA363)
    return 0;
  v9 = (char *)v8[1];
  return v9 == "FenceDeformer" || strcmp(v9, "FenceDeformer") == 0;
}

uint64_t REMeshDeformationDefinitionAssetBuilderFenceGetFenceIDName(uint64_t a1, unint64_t a2, unint64_t a3)
{
  re::MeshDeformationAsset *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  char *v10;
  NSObject *v11;
  const char *v12;
  NSObject *v13;
  uint8_t buf[16];
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  uint64_t v20;

  v20 = *MEMORY[0x24BDAC8D0];
  v5 = (re::MeshDeformationAsset *)(a1 + 24);
                 + 16) <= a2)
  {
    if (CoreRELog::onceToken == -1)
    {
LABEL_12:
      v13 = (id)CoreRELog::log;
      if (os_log_type_enabled(v13, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 134217984;
        *(_QWORD *)&buf[4] = a2;
        _os_log_error_impl(&dword_224FE9000, v13, OS_LOG_TYPE_ERROR, "Invalid deformation stack index: %zu", buf, 0xCu);
      }

      return 0;
    }
LABEL_29:
    dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
    goto LABEL_12;
  }
  if (*(_QWORD *)(v6 + 16) <= a2)
  {
    v18 = 0u;
    v19 = 0u;
    v16 = 0u;
    v17 = 0u;
    *(_OWORD *)buf = 0u;
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
    goto LABEL_29;
  }
  v7 = *(_QWORD *)(v6 + 32) + 40 * a2;
  if (*(_QWORD *)(v7 + 16) <= a3)
  {
    if (CoreRELog::onceToken != -1)
      dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
    v11 = (id)CoreRELog::log;
    if (!os_log_type_enabled(v11, OS_LOG_TYPE_ERROR))
      goto LABEL_18;
    *(_DWORD *)buf = 134217984;
    *(_QWORD *)&buf[4] = a3;
    v12 = "Invalid deformer index: %zu";
    goto LABEL_27;
  }
  v8 = *(_QWORD *)(v7 + 32);
  v9 = (_QWORD *)(v8 + 40 * a3);
  if (*v9 >> 1 != 0x2212EB615D9AA363 || (v10 = (char *)v9[1], v10 != "FenceDeformer") && strcmp(v10, "FenceDeformer"))
  {
    if (CoreRELog::onceToken != -1)
      dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
    v11 = (id)CoreRELog::log;
    if (!os_log_type_enabled(v11, OS_LOG_TYPE_ERROR))
      goto LABEL_18;
    *(_DWORD *)buf = 134217984;
    *(_QWORD *)&buf[4] = a3;
    v12 = "Not a fence deformer index: %zu";
LABEL_27:
    _os_log_error_impl(&dword_224FE9000, v11, OS_LOG_TYPE_ERROR, v12, buf, 0xCu);
LABEL_18:

    return 0;
  }
  if (*(_QWORD *)(v8 + 40 * a3 + 24) != 257)
  {
    if (CoreRELog::onceToken != -1)
      dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
    v11 = (id)CoreRELog::log;
    if (!os_log_type_enabled(v11, OS_LOG_TYPE_ERROR))
      goto LABEL_18;
    *(_DWORD *)buf = 134217984;
    *(_QWORD *)&buf[4] = a3;
    v12 = "Unexpected fence deformer options size for deformer index: %zu";
    goto LABEL_27;
  }
  return *(_QWORD *)(v8 + 40 * a3 + 32);
}

uint64_t REMeshDeformationDefinitionAssetBuilderFenceSetFenceIDName(uint64_t a1, unint64_t a2, unint64_t a3, char *__s)
{
  NSObject *v8;
  uint64_t *v9;
  re *v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  char *v14;
  NSObject *v15;
  const char *v16;
  NSObject *v17;
  uint8_t buf[16];
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  uint64_t v24;

  v24 = *MEMORY[0x24BDAC8D0];
  if (strlen(__s) >= 0x80)
  {
    if (CoreRELog::onceToken != -1)
      dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
    v8 = (id)CoreRELog::log;
    if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 134217984;
      *(_QWORD *)&buf[4] = 128;
      _os_log_error_impl(&dword_224FE9000, v8, OS_LOG_TYPE_ERROR, "Fence ID name is longer than max size of %zu", buf, 0xCu);
    }

  }
  v9 = (uint64_t *)(a1 + 24);
  {
    if (CoreRELog::onceToken == -1)
    {
LABEL_18:
      v17 = (id)CoreRELog::log;
      if (os_log_type_enabled(v17, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 134217984;
        *(_QWORD *)&buf[4] = a2;
        _os_log_error_impl(&dword_224FE9000, v17, OS_LOG_TYPE_ERROR, "Invalid deformation stack index: %zu", buf, 0xCu);
      }

      return 0;
    }
LABEL_35:
    dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
    goto LABEL_18;
  }
  if (*((_QWORD *)v10 + 2) <= a2)
  {
    v22 = 0u;
    v23 = 0u;
    v20 = 0u;
    v21 = 0u;
    *(_OWORD *)buf = 0u;
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
    goto LABEL_35;
  }
  v11 = *((_QWORD *)v10 + 4) + 40 * a2;
  if (*(_QWORD *)(v11 + 16) <= a3)
  {
    if (CoreRELog::onceToken != -1)
      dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
    v15 = (id)CoreRELog::log;
    if (!os_log_type_enabled(v15, OS_LOG_TYPE_ERROR))
      goto LABEL_24;
    *(_DWORD *)buf = 134217984;
    *(_QWORD *)&buf[4] = a3;
    v16 = "Invalid deformer index: %zu";
    goto LABEL_33;
  }
  v12 = *(_QWORD *)(v11 + 32);
  v13 = (_QWORD *)(v12 + 40 * a3);
  if (*v13 >> 1 != 0x2212EB615D9AA363
    || (v14 = (char *)v13[1], v14 != "FenceDeformer") && strcmp(v14, "FenceDeformer"))
  {
    if (CoreRELog::onceToken != -1)
      dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
    v15 = (id)CoreRELog::log;
    if (!os_log_type_enabled(v15, OS_LOG_TYPE_ERROR))
      goto LABEL_24;
    *(_DWORD *)buf = 134217984;
    *(_QWORD *)&buf[4] = a3;
    v16 = "Not a fence deformer index: %zu";
LABEL_33:
    _os_log_error_impl(&dword_224FE9000, v15, OS_LOG_TYPE_ERROR, v16, buf, 0xCu);
LABEL_24:

    return 0;
  }
  if (*(_QWORD *)(v12 + 40 * a3 + 24) != 257)
  {
    if (CoreRELog::onceToken != -1)
      dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
    v15 = (id)CoreRELog::log;
    if (!os_log_type_enabled(v15, OS_LOG_TYPE_ERROR))
      goto LABEL_24;
    *(_DWORD *)buf = 134217984;
    *(_QWORD *)&buf[4] = a3;
    v16 = "Unexpected fence deformer options size for deformer index: %zu";
    goto LABEL_33;
  }
  strlcpy(*(char **)(v12 + 40 * a3 + 32), __s, 0x80uLL);
  return 1;
}

uint64_t REMeshDeformationDefinitionAssetBuilderFenceGetWaitFenceIDName(uint64_t a1, unint64_t a2, unint64_t a3)
{
  re::MeshDeformationAsset *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  char *v10;
  NSObject *v11;
  const char *v12;
  NSObject *v13;
  uint8_t buf[16];
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  uint64_t v20;

  v20 = *MEMORY[0x24BDAC8D0];
  v5 = (re::MeshDeformationAsset *)(a1 + 24);
                 + 16) <= a2)
  {
    if (CoreRELog::onceToken == -1)
    {
LABEL_12:
      v13 = (id)CoreRELog::log;
      if (os_log_type_enabled(v13, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 134217984;
        *(_QWORD *)&buf[4] = a2;
        _os_log_error_impl(&dword_224FE9000, v13, OS_LOG_TYPE_ERROR, "Invalid deformation stack index: %zu", buf, 0xCu);
      }

      return 0;
    }
LABEL_29:
    dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
    goto LABEL_12;
  }
  if (*(_QWORD *)(v6 + 16) <= a2)
  {
    v18 = 0u;
    v19 = 0u;
    v16 = 0u;
    v17 = 0u;
    *(_OWORD *)buf = 0u;
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
    goto LABEL_29;
  }
  v7 = *(_QWORD *)(v6 + 32) + 40 * a2;
  if (*(_QWORD *)(v7 + 16) <= a3)
  {
    if (CoreRELog::onceToken != -1)
      dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
    v11 = (id)CoreRELog::log;
    if (!os_log_type_enabled(v11, OS_LOG_TYPE_ERROR))
      goto LABEL_18;
    *(_DWORD *)buf = 134217984;
    *(_QWORD *)&buf[4] = a3;
    v12 = "Invalid deformer index: %zu";
    goto LABEL_27;
  }
  v8 = *(_QWORD *)(v7 + 32);
  v9 = (_QWORD *)(v8 + 40 * a3);
  if (*v9 >> 1 != 0x2212EB615D9AA363 || (v10 = (char *)v9[1], v10 != "FenceDeformer") && strcmp(v10, "FenceDeformer"))
  {
    if (CoreRELog::onceToken != -1)
      dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
    v11 = (id)CoreRELog::log;
    if (!os_log_type_enabled(v11, OS_LOG_TYPE_ERROR))
      goto LABEL_18;
    *(_DWORD *)buf = 134217984;
    *(_QWORD *)&buf[4] = a3;
    v12 = "Not a fence deformer index: %zu";
LABEL_27:
    _os_log_error_impl(&dword_224FE9000, v11, OS_LOG_TYPE_ERROR, v12, buf, 0xCu);
LABEL_18:

    return 0;
  }
  if (*(_QWORD *)(v8 + 40 * a3 + 24) != 257)
  {
    if (CoreRELog::onceToken != -1)
      dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
    v11 = (id)CoreRELog::log;
    if (!os_log_type_enabled(v11, OS_LOG_TYPE_ERROR))
      goto LABEL_18;
    *(_DWORD *)buf = 134217984;
    *(_QWORD *)&buf[4] = a3;
    v12 = "Unexpected fence deformer options size for deformer index: %zu";
    goto LABEL_27;
  }
  return *(_QWORD *)(v8 + 40 * a3 + 32) + 128;
}

uint64_t REMeshDeformationDefinitionAssetBuilderFenceSetWaitFenceIDName(uint64_t a1, unint64_t a2, unint64_t a3, char *__s)
{
  NSObject *v8;
  uint64_t *v9;
  re *v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  char *v14;
  NSObject *v15;
  const char *v16;
  NSObject *v17;
  uint64_t v19;
  uint8_t buf[16];
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  uint64_t v25;

  v25 = *MEMORY[0x24BDAC8D0];
  if (strlen(__s) >= 0x80)
  {
    if (CoreRELog::onceToken != -1)
      dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
    v8 = (id)CoreRELog::log;
    if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 134217984;
      *(_QWORD *)&buf[4] = 128;
      _os_log_error_impl(&dword_224FE9000, v8, OS_LOG_TYPE_ERROR, "Wait fence ID name is longer than max size of %zu", buf, 0xCu);
    }

  }
  v9 = (uint64_t *)(a1 + 24);
  {
    if (CoreRELog::onceToken == -1)
    {
LABEL_18:
      v17 = (id)CoreRELog::log;
      if (os_log_type_enabled(v17, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 134217984;
        *(_QWORD *)&buf[4] = a2;
        _os_log_error_impl(&dword_224FE9000, v17, OS_LOG_TYPE_ERROR, "Invalid deformation stack index: %zu", buf, 0xCu);
      }

      return 0;
    }
LABEL_35:
    dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
    goto LABEL_18;
  }
  if (*((_QWORD *)v10 + 2) <= a2)
  {
    v23 = 0u;
    v24 = 0u;
    v21 = 0u;
    v22 = 0u;
    *(_OWORD *)buf = 0u;
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
    goto LABEL_35;
  }
  v11 = *((_QWORD *)v10 + 4) + 40 * a2;
  if (*(_QWORD *)(v11 + 16) <= a3)
  {
    if (CoreRELog::onceToken != -1)
      dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
    v15 = (id)CoreRELog::log;
    if (!os_log_type_enabled(v15, OS_LOG_TYPE_ERROR))
      goto LABEL_24;
    *(_DWORD *)buf = 134217984;
    *(_QWORD *)&buf[4] = a3;
    v16 = "Invalid deformer index: %zu";
    goto LABEL_33;
  }
  v12 = *(_QWORD *)(v11 + 32);
  v13 = (_QWORD *)(v12 + 40 * a3);
  if (*v13 >> 1 != 0x2212EB615D9AA363
    || (v14 = (char *)v13[1], v14 != "FenceDeformer") && strcmp(v14, "FenceDeformer"))
  {
    if (CoreRELog::onceToken != -1)
      dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
    v15 = (id)CoreRELog::log;
    if (!os_log_type_enabled(v15, OS_LOG_TYPE_ERROR))
      goto LABEL_24;
    *(_DWORD *)buf = 134217984;
    *(_QWORD *)&buf[4] = a3;
    v16 = "Not a fence deformer index: %zu";
LABEL_33:
    _os_log_error_impl(&dword_224FE9000, v15, OS_LOG_TYPE_ERROR, v16, buf, 0xCu);
LABEL_24:

    return 0;
  }
  if (*(_QWORD *)(v12 + 40 * a3 + 24) != 257)
  {
    if (CoreRELog::onceToken != -1)
      dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
    v15 = (id)CoreRELog::log;
    if (!os_log_type_enabled(v15, OS_LOG_TYPE_ERROR))
      goto LABEL_24;
    *(_DWORD *)buf = 134217984;
    *(_QWORD *)&buf[4] = a3;
    v16 = "Unexpected fence deformer options size for deformer index: %zu";
    goto LABEL_33;
  }
  v19 = *(_QWORD *)(v12 + 40 * a3 + 32);
  *(_BYTE *)(v19 + 256) = 14;
  strlcpy((char *)(v19 + 128), __s, 0x80uLL);
  return 1;
}

uint64_t REMeshDeformationDefinitionAssetBuilderDeformationStackAddWrap(uint64_t a1, unint64_t a2)
{
  uint64_t *v3;
  re *v4;
  unint64_t v5;
  _QWORD *v6;
  NSObject *v8;
  _BYTE v9[18];
  __int16 v10;
  unint64_t v11;
  __int16 v12;
  unint64_t v13;
  uint8_t buf[16];
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  uint64_t v19;

  v19 = *MEMORY[0x24BDAC8D0];
  v3 = (uint64_t *)(a1 + 24);
  {
    v5 = *((_QWORD *)v4 + 2);
    if (v5 > a2)
    {
      v6 = (_QWORD *)(*((_QWORD *)v4 + 4) + 40 * a2);
      *(_QWORD *)buf = 0x4005A4B50800FD78;
      *(_QWORD *)&buf[8] = "WrapDeformer";
      *(_QWORD *)v9 = &REMeshDeformationDefinitionAssetBuilderDeformationStackAddWrap::kDefaultDeformerOptions;
      *(_QWORD *)&v9[8] = 1;
      *(_QWORD *)&v16 = 0;
      v15 = 0uLL;
      re::FixedArray<unsigned char>::copy(&v15, (uint64_t)v9);
      re::DynamicArray<re::DeformationDefinition>::add(v6, (uint64_t *)buf);
      if ((_QWORD)v15)
      {
        if (*((_QWORD *)&v15 + 1))
        {
          (*(void (**)(void))(*(_QWORD *)v15 + 40))();
          *((_QWORD *)&v15 + 1) = 0;
          *(_QWORD *)&v16 = 0;
        }
        *(_QWORD *)&v15 = 0;
      }
      re::StringID::destroyString((re::StringID *)buf);
      return v6[2] - 1;
    }
    v17 = 0u;
    v18 = 0u;
    v15 = 0u;
    v16 = 0u;
    *(_OWORD *)buf = 0u;
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    *(_DWORD *)v9 = 136315906;
    *(_QWORD *)&v9[4] = "operator[]";
    *(_WORD *)&v9[12] = 1024;
    *(_DWORD *)&v9[14] = 789;
    v10 = 2048;
    v11 = a2;
    v12 = 2048;
    v13 = v5;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
    goto LABEL_13;
  }
  if (CoreRELog::onceToken != -1)
LABEL_13:
    dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
  v8 = (id)CoreRELog::log;
  if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)buf = 134217984;
    *(_QWORD *)&buf[4] = a2;
    _os_log_error_impl(&dword_224FE9000, v8, OS_LOG_TYPE_ERROR, "Invalid deformation stack index: %zu", buf, 0xCu);
  }

  return -1;
}

BOOL REMeshDeformationDefinitionAssetBuilderDeformerIsWrap(uint64_t a1, unint64_t a2, unint64_t a3)
{
  re::MeshDeformationAsset *v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  char *v9;
  NSObject *v11;
  NSObject *v12;
  uint8_t buf[16];
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  uint64_t v18;

  v18 = *MEMORY[0x24BDAC8D0];
  v5 = (re::MeshDeformationAsset *)(a1 + 24);
                 + 16) <= a2)
  {
    if (CoreRELog::onceToken == -1)
    {
LABEL_8:
      v11 = (id)CoreRELog::log;
      if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 134217984;
        *(_QWORD *)&buf[4] = a2;
        _os_log_error_impl(&dword_224FE9000, v11, OS_LOG_TYPE_ERROR, "Invalid deformation stack index: %zu", buf, 0xCu);
      }

      return 0;
    }
LABEL_19:
    dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
    goto LABEL_8;
  }
  if (*(_QWORD *)(v6 + 16) <= a2)
  {
    v16 = 0u;
    v17 = 0u;
    v14 = 0u;
    v15 = 0u;
    *(_OWORD *)buf = 0u;
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
    goto LABEL_19;
  }
  v7 = *(_QWORD *)(v6 + 32) + 40 * a2;
  if (*(_QWORD *)(v7 + 16) <= a3)
  {
    if (CoreRELog::onceToken != -1)
      dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
    v12 = (id)CoreRELog::log;
    if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 134217984;
      *(_QWORD *)&buf[4] = a3;
      _os_log_error_impl(&dword_224FE9000, v12, OS_LOG_TYPE_ERROR, "Invalid deformer index: %zu", buf, 0xCu);
    }

    return 0;
  }
  v8 = (_QWORD *)(*(_QWORD *)(v7 + 32) + 40 * a3);
  if (*v8 >> 1 != 0x2002D25A84007EBCLL)
    return 0;
  v9 = (char *)v8[1];
  return v9 == "WrapDeformer" || strcmp(v9, "WrapDeformer") == 0;
}

BOOL REMeshDeformationDefinitionAssetBuilderWrapGetForceCPU(uint64_t a1, unint64_t a2, unint64_t a3)
{
  re::MeshDeformationAsset *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  char *v10;
  NSObject *v11;
  const char *v12;
  NSObject *v13;
  uint8_t buf[16];
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  uint64_t v20;

  v20 = *MEMORY[0x24BDAC8D0];
  v5 = (re::MeshDeformationAsset *)(a1 + 24);
                 + 16) <= a2)
  {
    if (CoreRELog::onceToken == -1)
    {
LABEL_12:
      v13 = (id)CoreRELog::log;
      if (os_log_type_enabled(v13, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 134217984;
        *(_QWORD *)&buf[4] = a2;
        _os_log_error_impl(&dword_224FE9000, v13, OS_LOG_TYPE_ERROR, "Invalid deformation stack index: %zu", buf, 0xCu);
      }

      return 0;
    }
LABEL_29:
    dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
    goto LABEL_12;
  }
  if (*(_QWORD *)(v6 + 16) <= a2)
  {
    v18 = 0u;
    v19 = 0u;
    v16 = 0u;
    v17 = 0u;
    *(_OWORD *)buf = 0u;
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
    goto LABEL_29;
  }
  v7 = *(_QWORD *)(v6 + 32) + 40 * a2;
  if (*(_QWORD *)(v7 + 16) <= a3)
  {
    if (CoreRELog::onceToken != -1)
      dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
    v11 = (id)CoreRELog::log;
    if (!os_log_type_enabled(v11, OS_LOG_TYPE_ERROR))
      goto LABEL_18;
    *(_DWORD *)buf = 134217984;
    *(_QWORD *)&buf[4] = a3;
    v12 = "Invalid deformer index: %zu";
    goto LABEL_27;
  }
  v8 = *(_QWORD *)(v7 + 32);
  v9 = (_QWORD *)(v8 + 40 * a3);
  if (*v9 >> 1 != 0x2002D25A84007EBCLL || (v10 = (char *)v9[1], v10 != "WrapDeformer") && strcmp(v10, "WrapDeformer"))
  {
    if (CoreRELog::onceToken != -1)
      dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
    v11 = (id)CoreRELog::log;
    if (!os_log_type_enabled(v11, OS_LOG_TYPE_ERROR))
      goto LABEL_18;
    *(_DWORD *)buf = 134217984;
    *(_QWORD *)&buf[4] = a3;
    v12 = "Not a wrap deformer index: %zu";
LABEL_27:
    _os_log_error_impl(&dword_224FE9000, v11, OS_LOG_TYPE_ERROR, v12, buf, 0xCu);
LABEL_18:

    return 0;
  }
  if (*(_QWORD *)(v8 + 40 * a3 + 24) != 1)
  {
    if (CoreRELog::onceToken != -1)
      dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
    v11 = (id)CoreRELog::log;
    if (!os_log_type_enabled(v11, OS_LOG_TYPE_ERROR))
      goto LABEL_18;
    *(_DWORD *)buf = 134217984;
    *(_QWORD *)&buf[4] = a3;
    v12 = "Unexpected wrap deformer options size for deformer index: %zu";
    goto LABEL_27;
  }
  return **(_BYTE **)(v8 + 40 * a3 + 32) != 0;
}

uint64_t REMeshDeformationDefinitionAssetBuilderWrapSetForceCPU(uint64_t a1, unint64_t a2, unint64_t a3, char a4)
{
  uint64_t *v7;
  re *v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  char *v12;
  NSObject *v13;
  const char *v14;
  NSObject *v15;
  uint8_t buf[16];
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  uint64_t v22;

  v22 = *MEMORY[0x24BDAC8D0];
  v7 = (uint64_t *)(a1 + 24);
  {
    if (CoreRELog::onceToken == -1)
    {
LABEL_12:
      v15 = (id)CoreRELog::log;
      if (os_log_type_enabled(v15, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 134217984;
        *(_QWORD *)&buf[4] = a2;
        _os_log_error_impl(&dword_224FE9000, v15, OS_LOG_TYPE_ERROR, "Invalid deformation stack index: %zu", buf, 0xCu);
      }

      return 0;
    }
LABEL_29:
    dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
    goto LABEL_12;
  }
  if (*((_QWORD *)v8 + 2) <= a2)
  {
    v20 = 0u;
    v21 = 0u;
    v18 = 0u;
    v19 = 0u;
    *(_OWORD *)buf = 0u;
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
    goto LABEL_29;
  }
  v9 = *((_QWORD *)v8 + 4) + 40 * a2;
  if (*(_QWORD *)(v9 + 16) <= a3)
  {
    if (CoreRELog::onceToken != -1)
      dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
    v13 = (id)CoreRELog::log;
    if (!os_log_type_enabled(v13, OS_LOG_TYPE_ERROR))
      goto LABEL_18;
    *(_DWORD *)buf = 134217984;
    *(_QWORD *)&buf[4] = a3;
    v14 = "Invalid deformer index: %zu";
    goto LABEL_27;
  }
  v10 = *(_QWORD *)(v9 + 32);
  v11 = (_QWORD *)(v10 + 40 * a3);
  if (*v11 >> 1 != 0x2002D25A84007EBCLL || (v12 = (char *)v11[1], v12 != "WrapDeformer") && strcmp(v12, "WrapDeformer"))
  {
    if (CoreRELog::onceToken != -1)
      dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
    v13 = (id)CoreRELog::log;
    if (!os_log_type_enabled(v13, OS_LOG_TYPE_ERROR))
      goto LABEL_18;
    *(_DWORD *)buf = 134217984;
    *(_QWORD *)&buf[4] = a3;
    v14 = "Not a wrap deformer index: %zu";
LABEL_27:
    _os_log_error_impl(&dword_224FE9000, v13, OS_LOG_TYPE_ERROR, v14, buf, 0xCu);
LABEL_18:

    return 0;
  }
  if (*(_QWORD *)(v10 + 40 * a3 + 24) != 1)
  {
    if (CoreRELog::onceToken != -1)
      dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
    v13 = (id)CoreRELog::log;
    if (!os_log_type_enabled(v13, OS_LOG_TYPE_ERROR))
      goto LABEL_18;
    *(_DWORD *)buf = 134217984;
    *(_QWORD *)&buf[4] = a3;
    v14 = "Unexpected wrap deformer options size for deformer index: %zu";
    goto LABEL_27;
  }
  **(_BYTE **)(v10 + 40 * a3 + 32) = a4;
  return 1;
}

BOOL REMeshDeformationDefinitionAssetBuilderWasMutated(uint64_t a1)
{
  return *(_QWORD *)(a1 + 48) != 0;
}

_anonymous_namespace_ *`anonymous namespace'::MeshDeformationDefinitionAssetBuilder::init(_anonymous_namespace_::MeshDeformationDefinitionAssetBuilder *this)
{
  uint64_t *v2;
  uint64_t *v3;
  _OWORD *v4;
  _QWORD *v5;
  uint64_t v6;
  _anonymous_namespace_ *result;
  re::MeshDeformationAsset *v8;
  _QWORD v9[3];
  _QWORD *v10;
  uint64_t v11;
  _QWORD v12[5];

  v12[4] = *MEMORY[0x24BDAC8D0];
  v2 = (uint64_t *)((char *)this + 24);
  v3 = re::globalAllocators(this);
  v4 = (_OWORD *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v3[2] + 32))(v3[2], 80, 8);
  *v4 = 0u;
  v4[1] = 0u;
  v4[2] = 0u;
  v4[3] = 0u;
  v4[4] = 0u;
  v9[0] = &off_24ED9B248;
  v10 = v9;
  v11 = 0;
  v12[3] = v12;
  v12[0] = &off_24ED9B248;
  std::unique_ptr<re::RigHierarchy,std::function<void ()(re::RigHierarchy*)>>::reset[abi:nn180100]((uint64_t *)this + 6, (uint64_t)v4);
  std::__function::__value_func<void ()(re::RigHierarchy *)>::operator=[abi:nn180100]((_QWORD *)this + 7, (uint64_t)v12);
  std::unique_ptr<re::RigHierarchy,std::function<void ()(re::RigHierarchy*)>>::~unique_ptr[abi:nn180100](&v11);
  v5 = v10;
  if (v10 == v9)
  {
    v6 = 4;
    v5 = v9;
  }
  else
  {
    if (!v10)
      goto LABEL_6;
    v6 = 5;
  }
  (*(void (**)(void))(*v5 + 8 * v6))();
LABEL_6:
  if (result)
  {
    v8 = result;
  }
  return result;
}

void std::__function::__func<`anonymous namespace'::MutableAssetRef<re::MeshDeformationAsset>::init(void)::{lambda(re::MeshDeformationAsset*)#1},std::allocator<`anonymous namespace'::MutableAssetRef<re::MeshDeformationAsset>::init(void)::{lambda(re::MeshDeformationAsset*)#1}>,void ()(re::MeshDeformationAsset*)>::~__func()
{
  JUMPOUT(0x2276933B8);
}

_QWORD *std::__function::__func<`anonymous namespace'::MutableAssetRef<re::MeshDeformationAsset>::init(void)::{lambda(re::MeshDeformationAsset*)#1},std::allocator<`anonymous namespace'::MutableAssetRef<re::MeshDeformationAsset>::init(void)::{lambda(re::MeshDeformationAsset*)#1}>,void ()(re::MeshDeformationAsset*)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_24ED9B248;
  return result;
}

void std::__function::__func<`anonymous namespace'::MutableAssetRef<re::MeshDeformationAsset>::init(void)::{lambda(re::MeshDeformationAsset*)#1},std::allocator<`anonymous namespace'::MutableAssetRef<re::MeshDeformationAsset>::init(void)::{lambda(re::MeshDeformationAsset*)#1}>,void ()(re::MeshDeformationAsset*)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_24ED9B248;
}

re *std::__function::__func<`anonymous namespace'::MutableAssetRef<re::MeshDeformationAsset>::init(void)::{lambda(re::MeshDeformationAsset*)#1},std::allocator<`anonymous namespace'::MutableAssetRef<re::MeshDeformationAsset>::init(void)::{lambda(re::MeshDeformationAsset*)#1}>,void ()(re::MeshDeformationAsset*)>::operator()(uint64_t a1, uint64_t *a2)
{
  return re::internal::destroyPersistent<re::MeshDeformationAsset>((re *)"operator()", 31, *a2);
}

uint64_t std::__function::__func<`anonymous namespace'::MutableAssetRef<re::MeshDeformationAsset>::init(void)::{lambda(re::MeshDeformationAsset*)#1},std::allocator<`anonymous namespace'::MutableAssetRef<re::MeshDeformationAsset>::init(void)::{lambda(re::MeshDeformationAsset*)#1}>,void ()(re::MeshDeformationAsset*)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<`anonymous namespace'::MutableAssetRef<re::MeshDeformationAsset>::init(void)::{lambda(re::MeshDeformationAsset*)#1},std::allocator<`anonymous namespace'::MutableAssetRef<re::MeshDeformationAsset>::init(void)::{lambda(re::MeshDeformationAsset*)#1}>,void ()(re::MeshDeformationAsset*)>::target_type()
{
}

void std::__function::__func<`anonymous namespace'::MutableAssetRef<re::MeshDeformationAsset>::get(void)::{lambda(re::MeshDeformationAsset*)#1},std::allocator<`anonymous namespace'::MutableAssetRef<re::MeshDeformationAsset>::get(void)::{lambda(re::MeshDeformationAsset*)#1}>,void ()(re::MeshDeformationAsset*)>::~__func()
{
  JUMPOUT(0x2276933B8);
}

_QWORD *std::__function::__func<`anonymous namespace'::MutableAssetRef<re::MeshDeformationAsset>::get(void)::{lambda(re::MeshDeformationAsset*)#1},std::allocator<`anonymous namespace'::MutableAssetRef<re::MeshDeformationAsset>::get(void)::{lambda(re::MeshDeformationAsset*)#1}>,void ()(re::MeshDeformationAsset*)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_24ED9B2C8;
  return result;
}

void std::__function::__func<`anonymous namespace'::MutableAssetRef<re::MeshDeformationAsset>::get(void)::{lambda(re::MeshDeformationAsset*)#1},std::allocator<`anonymous namespace'::MutableAssetRef<re::MeshDeformationAsset>::get(void)::{lambda(re::MeshDeformationAsset*)#1}>,void ()(re::MeshDeformationAsset*)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_24ED9B2C8;
}

re *std::__function::__func<`anonymous namespace'::MutableAssetRef<re::MeshDeformationAsset>::get(void)::{lambda(re::MeshDeformationAsset*)#1},std::allocator<`anonymous namespace'::MutableAssetRef<re::MeshDeformationAsset>::get(void)::{lambda(re::MeshDeformationAsset*)#1}>,void ()(re::MeshDeformationAsset*)>::operator()(uint64_t a1, uint64_t *a2)
{
  return re::internal::destroyPersistent<re::MeshDeformationAsset>((re *)"operator()", 53, *a2);
}

uint64_t std::__function::__func<`anonymous namespace'::MutableAssetRef<re::MeshDeformationAsset>::get(void)::{lambda(re::MeshDeformationAsset*)#1},std::allocator<`anonymous namespace'::MutableAssetRef<re::MeshDeformationAsset>::get(void)::{lambda(re::MeshDeformationAsset*)#1}>,void ()(re::MeshDeformationAsset*)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<`anonymous namespace'::MutableAssetRef<re::MeshDeformationAsset>::get(void)::{lambda(re::MeshDeformationAsset*)#1},std::allocator<`anonymous namespace'::MutableAssetRef<re::MeshDeformationAsset>::get(void)::{lambda(re::MeshDeformationAsset*)#1}>,void ()(re::MeshDeformationAsset*)>::target_type()
{
}

void `anonymous namespace'::MeshDeformationDefinitionAssetBuilder::~MeshDeformationDefinitionAssetBuilder(_anonymous_namespace_::MeshDeformationDefinitionAssetBuilder *this)
{
  *(_QWORD *)this = &off_24ED9B348;
  std::unique_ptr<re::RigHierarchy,std::function<void ()(re::RigHierarchy*)>>::~unique_ptr[abi:nn180100]((uint64_t *)this + 6);
  re::AssetHandle::~AssetHandle((_anonymous_namespace_::MeshDeformationDefinitionAssetBuilder *)((char *)this + 24));
  *(_QWORD *)this = &off_24ED426B8;
  objc_destructInstance((char *)this + 8);
}

{
  JUMPOUT(0x2276933B8);
}

uint64_t std::__unwrap_and_dispatch[abi:nn180100]<std::__overload<std::__copy_loop<std::_ClassicAlgPolicy>,std::__copy_trivial>,re::DeformationStackDefinition const*,re::DeformationStackDefinition const*,re::DeformationStackDefinition*,0>(uint64_t result, uint64_t *a2, uint64_t a3)
{
  uint64_t *v5;

  if ((uint64_t *)result != a2)
  {
    v5 = (uint64_t *)result;
    do
    {
      result = re::DynamicArray<re::DeformationDefinition>::operator=(a3, v5);
      v5 += 5;
      a3 += 40;
    }
    while (v5 != a2);
  }
  return result;
}

unint64_t *std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:nn180100]<re::MeshDeformationIndex const*,re::MeshDeformationIndex const*,re::MeshDeformationIndex*>(unint64_t *result, unint64_t *a2, uint64_t a3)
{
  unint64_t *v4;
  uint64_t *v5;
  uint64_t *v6;

  if (result != a2)
  {
    v4 = (unint64_t *)(a3 + 24);
    v5 = (uint64_t *)(result + 3);
    do
    {
      *((_BYTE *)v4 - 24) = *((_BYTE *)v5 - 24);
      re::StringID::operator=(v4 - 2, v5 - 2);
      result = re::StringID::operator=(v4, v5);
      v4[2] = v5[2];
      v4 += 6;
      v6 = v5 + 3;
      v5 += 6;
    }
    while (v6 != (uint64_t *)a2);
  }
  return result;
}

void REAssetDisableNetworkSyncing(uint64_t a1)
{
  uint64_t v1[3];

  re::AssetAPIHelper::assetHandleCreate(a1, v1);
  re::AssetHandle::setNetworkSharingMode((uint64_t)v1, 2);
  re::AssetHandle::~AssetHandle((re::AssetHandle *)v1);
}

uint64_t REAssetSetNetworkSharingMode(uint64_t a1, int a2)
{
  uint64_t v3;
  uint64_t v5[3];

  re::AssetAPIHelper::assetHandleCreate(a1, v5);
  v3 = re::AssetHandle::setNetworkSharingMode((uint64_t)v5, a2);
  re::AssetHandle::~AssetHandle((re::AssetHandle *)v5);
  return v3;
}

uint64_t REAssetIsMemoryAsset(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3[3];

  re::AssetAPIHelper::assetHandleCreate(a1, v3);
  v1 = *(unsigned __int8 *)(v3[1] + 312);
  re::AssetHandle::~AssetHandle((re::AssetHandle *)v3);
  return v1;
}

BOOL REAssetIsMemoryAssetWithNetworkSyncingEnabled(uint64_t a1)
{
  _BOOL8 isMemoryAssetWithNetworkingSyncingEnabled;
  uint64_t v3[3];

  re::AssetAPIHelper::assetHandleCreate(a1, v3);
  isMemoryAssetWithNetworkingSyncingEnabled = re::AssetHandle::isMemoryAssetWithNetworkingSyncingEnabled((re::AssetHandle *)v3);
  re::AssetHandle::~AssetHandle((re::AssetHandle *)v3);
  return isMemoryAssetWithNetworkingSyncingEnabled;
}

id *_RETestingTextureAssetGetUnderlyingTexture(uint64_t a1)
{
  id *v1;
  id *v2;
  id *v3;
  uint64_t v5[3];

  re::AssetAPIHelper::assetHandleCreate(a1, v5);
  v1 = (id *)re::AssetHandle::asset<re::TextureAsset>((re::TextureAsset *)v5);
  if (v1)
  {
    if (*((_DWORD *)v1 + 60))
      v1 = 0;
    else
      v1 = (id *)v1[20];
  }
  v2 = v1;
  v3 = v2;
  if (v2)

  re::AssetHandle::~AssetHandle((re::AssetHandle *)v5);
  return v3;
}

id _RETestingTextureAssetGetUnderlyingLegacyTexture(uint64_t a1)
{
  uint64_t v1;
  os_unfair_lock_s **v2;
  uint64_t v3;
  id v4;
  void *v5;
  id v7;
  uint64_t v8[3];

  re::AssetAPIHelper::assetHandleCreate(a1, v8);
  v1 = re::AssetHandle::asset<re::TextureAsset>((re::TextureAsset *)v8);
  if (v1 && *(_QWORD *)(v1 + 144) && (v3 = *(_QWORD *)(v1 + 136), v2 = (os_unfair_lock_s **)(v1 + 136), v3))
  {
    re::TextureHandle::unsynchronizedMetalTexture(v2, &v7);
    v4 = objc_retainAutorelease(v7);
    v5 = v4;
    if (v4)

  }
  else
  {
    v5 = 0;
  }
  re::AssetHandle::~AssetHandle((re::AssetHandle *)v8);
  return v5;
}

uint64_t _RETestingTextureAssetGetPixelFormat(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3[3];

  re::AssetAPIHelper::assetHandleCreate(a1, v3);
  v1 = *(int *)(re::AssetHandle::asset<re::TextureAsset>((re::TextureAsset *)v3) + 376);
  re::AssetHandle::~AssetHandle((re::AssetHandle *)v3);
  return v1;
}

uint64_t _RETestingTextureAssetGetImportReport(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3[3];

  re::AssetAPIHelper::assetHandleCreate(a1, v3);
  v1 = *(_BYTE *)(re::AssetHandle::asset<re::TextureAsset>((re::TextureAsset *)v3) + 152) & 0x7F;
  re::AssetHandle::~AssetHandle((re::AssetHandle *)v3);
  return v1;
}

CFTypeRef REAssetGetType(uint64_t a1)
{
  CFStringRef v1;
  CFTypeRef v2;
  uint64_t v4[3];

  re::AssetAPIHelper::assetHandleCreate(a1, v4);
  v1 = CFStringCreateWithCString(0, **(const char ***)(v4[1] + 264), 0x8000100u);
  v2 = CFAutorelease(v1);
  re::AssetHandle::~AssetHandle((re::AssetHandle *)v4);
  return v2;
}

uint64_t REAssetGetAssetId(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v4[3];

  re::AssetAPIHelper::assetHandleCreate(a1, v4);
  v1 = re::AssetHandle::assetInfo((re::AssetHandle *)v4);
  if (v1[10] == -1)
    v2 = 0;
  else
    v2 = v1[10];
  re::AssetHandle::~AssetHandle((re::AssetHandle *)v4);
  return v2;
}

CFStringRef REAssetCopyDescription(uint64_t a1, char a2)
{
  const char *v3;
  CFStringRef v4;
  uint64_t v6;
  char v7;
  _BYTE v8[23];
  uint64_t v9[3];

  re::AssetAPIHelper::assetHandleCreate(a1, v9);
  re::AssetHandle::getDescription((re::AssetHandle *)v9, a2, (re::DynamicString *)&v6);
  if ((v7 & 1) != 0)
    v3 = *(const char **)&v8[7];
  else
    v3 = v8;
  v4 = CFStringCreateWithCString(0, v3, 0x8000100u);
  if (v6 && (v7 & 1) != 0)
    (*(void (**)(void))(*(_QWORD *)v6 + 40))();
  re::AssetHandle::~AssetHandle((re::AssetHandle *)v9);
  return v4;
}

uint64_t REAssetComputeEstimatedMemorySize(uint64_t a1, uint64_t a2)
{
  re::AssetManager *v3;
  uint64_t v4;
  uint64_t v6[3];

  re::AssetAPIHelper::assetHandleCreate(a1, v6);
  v3 = (re::AssetManager *)re::ServiceLocator::serviceOrNull<re::AssetService>(a2);
  v4 = re::AssetManager::assetByteSize(v3, (re::AssetHandle *)v6);
  re::AssetHandle::~AssetHandle((re::AssetHandle *)v6);
  return v4;
}

uint64_t REAssetComputeNonSharedMemorySize(uint64_t a1, uint64_t a2)
{
  re::AssetManager *v3;
  uint64_t v4;
  uint64_t v6[3];

  re::AssetAPIHelper::assetHandleCreate(a1, v6);
  v3 = (re::AssetManager *)re::ServiceLocator::serviceOrNull<re::AssetService>(a2);
  v4 = re::AssetManager::assetNonSharedDataByteSize(v3, (re::AssetHandle *)v6);
  re::AssetHandle::~AssetHandle((re::AssetHandle *)v6);
  return v4;
}

uint64_t REAssetSerializeToJSON(uint64_t a1, re::FileStreamWriter *a2)
{
  unint64_t v3;
  unsigned int v4;
  uint64_t v5;
  unsigned int v6;
  uint64_t v7;
  const re::IntrospectionBase **v8;
  uint64_t v9;
  const re::AssetPath *v10;
  uint64_t v11;
  _BYTE v13[8];
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17[6];

  v17[5] = *MEMORY[0x24BDAC8D0];
  re::AssetAPIHelper::assetHandleCreate(a1, &v15);
  if (!v16)
  {
    v5 = 0;
    v3 = 0;
    goto LABEL_5;
  }
  v3 = *(_QWORD *)(v16 + 264);
  v4 = atomic_load((unsigned int *)(v16 + 704));
  if (v4 != 2)
  {
    v5 = v16;
LABEL_5:
    re::AssetHandle::loadNow(v5, 0);
  }
  if (v16 && (v6 = atomic_load((unsigned int *)(v16 + 704)), v6 == 2))
  {
    re::AssetHandle::serializableAsset((re::AssetHandle *)&v15, v17);
    re::FileStreamWriter::open(a2, (uint64_t)v13);
    if (v13[0])
    {
      v7 = re::internal::AssetTypeRegistry::assetLoaderWithAssetType(*(_QWORD *)(*(_QWORD *)(v16 + 24) + 1104), v3);
      v8 = (const re::IntrospectionBase **)v17[0];
      v9 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v7 + 112))(v7);
      v10 = (const re::AssetPath *)re::AssetHandle::legacy_assetPath((re::AssetHandle *)&v15);
      v11 = re::AssetUtilities::serializeIntrospectedAsset((_anonymous_namespace_ *)&v14, v8, v10, v9, 1, 0, 1);
    }
    else
    {
      v11 = 0;
    }
    re::Result<re::FileStreamWriter,re::DetailedError>::~Result((uint64_t)v13);
    std::unique_ptr<re::RigHierarchy,std::function<void ()(re::RigHierarchy*)>>::~unique_ptr[abi:nn180100](v17);
  }
  else
  {
    v11 = 0;
  }
  re::AssetHandle::~AssetHandle((re::AssetHandle *)&v15);
  return v11;
}

uint64_t REAssetGetSwiftObject(uint64_t result)
{
  uint64_t v1;

  if (result)
  {
    v1 = *(_QWORD *)(result + 24);
    if (v1)
      return *(_QWORD *)(v1 + 656);
    else
      return 0;
  }
  return result;
}

uint64_t REAssetSetSwiftObject(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(*(_QWORD *)(result + 24) + 656) = a2;
  return result;
}

void REAssetSetSwiftObjectAndRetain()
{
  NSObject *v0;
  uint8_t v1[16];

  if (CoreRELog::onceToken != -1)
    dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
  v0 = (id)CoreRELog::log;
  if (os_log_type_enabled(v0, OS_LOG_TYPE_ERROR))
  {
    *(_WORD *)v1 = 0;
    _os_log_error_impl(&dword_224FE9000, v0, OS_LOG_TYPE_ERROR, "REAssetSetSwiftObjectAndRetain is deprecated and no longer supported. NOP", v1, 2u);
  }

}

uint64_t *re::allocInfo_UnsupportedTestAsset(re *this)
{
  unsigned __int8 v1;

  v1 = atomic_load((unsigned __int8 *)&_MergedGlobals_508);
  if ((v1 & 1) == 0 && __cxa_guard_acquire(&_MergedGlobals_508))
  {
    ArcSharedObject::ArcSharedObject((ArcSharedObject *)&qword_254124040, 0);
    *(uint64_t *)((char *)&qword_254124050 + 6) = 0;
    qword_254124050 = 0;
    qword_254124060 = 0;
    qword_254124068 = 0xFFFFFFFFLL;
    qword_254124040 = (uint64_t)&off_24ED7DAA8;
    qword_254124070 = (uint64_t)"UnsupportedTestAsset";
    dword_254124078 = 0;
    xmmword_254124080 = 0u;
    unk_254124090 = 0u;
    xmmword_2541240A0 = 0u;
    qword_2541240B0 = 0;
    __cxa_guard_release(&_MergedGlobals_508);
  }
  return &qword_254124040;
}

void re::initInfo_UnsupportedTestAsset(re *this, re::IntrospectionBase *a2)
{
  const re::IntrospectionBase *v3;
  __int128 v4;
  _QWORD v5[2];
  __int128 v6;

  v5[0] = 0xD81F23B2DE9B3DD2;
  v5[1] = "UnsupportedTestAsset";
  re::StringID::destroyString((re::StringID *)v5);
  *((_OWORD *)this + 2) = v6;
  *((_QWORD *)this + 2) = 0x100000008;
  *((_DWORD *)this + 6) = 1;
  *((_WORD *)this + 14) = 1;
  *((_DWORD *)this + 14) = 0;
  *((_QWORD *)this + 8) = &re::initInfo_UnsupportedTestAsset(re::IntrospectionBase *)::structureAttributes;
  *((_QWORD *)this + 11) = 0;
  *((_QWORD *)this + 12) = 0;
  re::IntrospectionRegistry::add(this, v3);
  v4 = v6;
}

uint64_t *re::allocInfo_UnsupportedTestComponent(re *this)
{
  unsigned __int8 v1;
  _OWORD *v3;

  v1 = atomic_load((unsigned __int8 *)&qword_254123FD0);
  if ((v1 & 1) == 0 && __cxa_guard_acquire(&qword_254123FD0))
  {
    ArcSharedObject::ArcSharedObject((ArcSharedObject *)&qword_2541240B8, 0);
    *(uint64_t *)((char *)&qword_2541240C8 + 6) = 0;
    qword_2541240C8 = 0;
    qword_2541240D8 = 0;
    qword_2541240E0 = 0xFFFFFFFFLL;
    qword_2541240B8 = (uint64_t)&off_24ED7DAA8;
    qword_2541240E8 = (uint64_t)"UnsupportedTestComponent";
    dword_2541240F0 = 0;
    v3[4] = 0u;
    v3[5] = 0u;
    v3[6] = 0u;
    qword_254124128 = 0;
    __cxa_guard_release(&qword_254123FD0);
  }
  return &qword_2541240B8;
}

void re::initInfo_UnsupportedTestComponent(re *this, re::IntrospectionBase *a2)
{
  const re::IntrospectionBase *v3;
  unsigned __int8 v4;
  re *v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  const re::IntrospectionBase *v10;
  void *v11;
  uint64_t v12;
  __int128 v13;
  _QWORD v14[2];
  __int128 v15;

  v14[0] = 0xA7AE3E843CE658ECLL;
  v14[1] = "UnsupportedTestComponent";
  re::StringID::destroyString((re::StringID *)v14);
  *((_OWORD *)this + 2) = v15;
  v4 = atomic_load((unsigned __int8 *)&qword_254123FD8);
  if ((v4 & 1) == 0)
  {
    v5 = (re *)__cxa_guard_acquire(&qword_254123FD8);
    if ((_DWORD)v5)
    {
      v6 = re::introspectionAllocator(v5);
      v7 = re::ecs2::introspect_Component((re::IntrospectionBase **)1);
      v8 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v6 + 32))(v6, 72, 8);
      *(_DWORD *)v8 = 1;
      *(_QWORD *)(v8 + 8) = "ecs2::Component";
      *(_QWORD *)(v8 + 16) = v7;
      *(_QWORD *)(v8 + 24) = 0;
      *(_QWORD *)(v8 + 32) = 0;
      *(_DWORD *)(v8 + 40) = 3;
      *(_QWORD *)(v8 + 48) = 0;
      *(_QWORD *)(v8 + 56) = 0;
      *(_DWORD *)(v8 + 64) = 0;
      qword_254124018 = v8;
      v9 = re::introspectionAllocator((re *)v8);
      v11 = re::introspect_AssetHandle((re *)1, v10);
      v12 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v9 + 32))(v9, 72, 8);
      *(_DWORD *)v12 = 1;
      *(_QWORD *)(v12 + 8) = "asset";
      *(_QWORD *)(v12 + 16) = v11;
      *(_QWORD *)(v12 + 24) = 0;
      *(_QWORD *)(v12 + 32) = 0x2000000001;
      *(_DWORD *)(v12 + 40) = 0;
      *(_QWORD *)(v12 + 48) = 0;
      *(_QWORD *)(v12 + 56) = 0;
      *(_DWORD *)(v12 + 64) = 0;
      qword_254124020 = v12;
      __cxa_guard_release(&qword_254123FD8);
    }
  }
  *((_QWORD *)this + 2) = 0x3800000008;
  *((_DWORD *)this + 6) = 8;
  *((_WORD *)this + 14) = 0;
  *((_DWORD *)this + 14) = 2;
  *((_QWORD *)this + 8) = &qword_254124018;
  *((_QWORD *)this + 11) = 0;
  *((_QWORD *)this + 12) = 0;
  re::IntrospectionRegistry::add(this, v3);
  v13 = v15;
}

void re::internal::defaultConstruct<`anonymous namespace'::UnsupportedTestComponent>(int a1, int a2, ArcSharedObject *this)
{
  uint64_t v3;

  *((_QWORD *)this + 6) = 0;
  *((_OWORD *)this + 1) = 0u;
  *((_OWORD *)this + 2) = 0u;
  *(_OWORD *)this = 0u;
  ArcSharedObject::ArcSharedObject(this, 0);
  *(_QWORD *)(v3 + 16) = 0;
  *(_BYTE *)(v3 + 24) = 0;
  *(_QWORD *)v3 = &off_24ED9B4E8;
  *(_QWORD *)(v3 + 40) = 0;
  *(_QWORD *)(v3 + 48) = 0;
  *(_QWORD *)(v3 + 32) = 0;
}

uint64_t re::internal::defaultDestruct<`anonymous namespace'::UnsupportedTestComponent>(uint64_t a1, uint64_t a2, uint64_t (***a3)(_QWORD))
{
  return (**a3)(a3);
}

void re::internal::defaultConstructV2<`anonymous namespace'::UnsupportedTestComponent>(uint64_t a1)
{
  uint64_t v1;

  *(_QWORD *)(a1 + 48) = 0;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)a1 = 0u;
  ArcSharedObject::ArcSharedObject((ArcSharedObject *)a1, 0);
  *(_QWORD *)(v1 + 16) = 0;
  *(_BYTE *)(v1 + 24) = 0;
  *(_QWORD *)v1 = &off_24ED9B4E8;
  *(_QWORD *)(v1 + 40) = 0;
  *(_QWORD *)(v1 + 48) = 0;
  *(_QWORD *)(v1 + 32) = 0;
}

uint64_t re::internal::defaultDestructV2<`anonymous namespace'::UnsupportedTestComponent>(uint64_t (***a1)(_QWORD))
{
  return (**a1)(a1);
}

uint64_t *_RETestingRegisterUnsupportedTestAsset(uint64_t a1)
{
  unsigned __int8 v2;
  re *v3;
  unint64_t v4;
  uint64_t *v5;
  _anonymous_namespace_ *v6;
  uint64_t v7;
  const char *v8;
  unsigned __int8 v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  char v13;
  unsigned __int8 *v14;
  int v15;
  uint64_t *v16;
  uint64_t v17;
  void *v18;
  re::ecs2::ComponentTypeRegistry *v19;
  char *v20;
  re *v21;
  uint64_t *v22;
  _anonymous_namespace_::UnsupportedTestAsset *v23;
  uint64_t v24;
  StringID v26;
  uint64_t v27;
  char *v28;
  char v29[8];
  unint64_t v30;
  char v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t (***v34)();
  re *v35;
  unint64_t v36;
  const char *v37;
  uint64_t (***v38)();
  uint64_t v39;

  v39 = *MEMORY[0x24BDAC8D0];
  v2 = atomic_load((unsigned __int8 *)&qword_254124010);
  if ((v2 & 1) == 0 && __cxa_guard_acquire(&qword_254124010))
  {
    qword_254124008 = re::internal::getOrCreateInfo((re::internal *)"UnsupportedTestComponent", (uint64_t (*)(re::internal *))re::allocInfo_UnsupportedTestComponent, (re::IntrospectionBase *(*)(void))re::initInfo_UnsupportedTestComponent, (void (*)(re::IntrospectionBase *))&unk_254123FE0, 0);
    __cxa_guard_release(&qword_254124010);
  }
  re::getPrettyTypeName((re *)qword_254124008, (const re::IntrospectionBase *)&v35);
  v3 = (re *)re::DynamicString::rfind((uint64_t)&v35, "Component", v29);
  if (v29[0])
  {
    v4 = (v36 & 1) != 0 ? v36 >> 1 : v36 >> 1;
    if (v30 == v4 - 9)
    {
      re::DynamicString::substr((re::DynamicString *)&v35, 0, v30, (re::DynamicString *)&v27);
      re::DynamicString::operator=((re::DynamicString *)&v35, (re::DynamicString *)&v27);
      v3 = (re *)v27;
      if (v27)
      {
        if ((v28 & 1) != 0)
          v3 = (re *)(*(uint64_t (**)(void))(*(_QWORD *)v27 + 40))();
      }
    }
  }
  v5 = re::globalAllocators(v3);
  v6 = (_anonymous_namespace_ *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v5[2] + 32))(v5[2], 80, 8);
  v7 = (uint64_t)v6;
  if ((v36 & 1) != 0)
    v8 = v37;
  else
    v8 = (char *)&v36 + 1;
  *(_QWORD *)&v26.var0 = 0;
  v26.var1 = (char *)&str_110;
  *(_QWORD *)v7 = &unk_24ED45840;
  *(_QWORD *)(v7 + 8) = 0;
  *(_WORD *)(v7 + 16) = -1;
  re::StringID::StringID((re::StringID *)(v7 + 24), &v26);
  *(_DWORD *)(v7 + 40) = 0;
  *(_QWORD *)v7 = off_24ED9B568;
  *(_QWORD *)(v7 + 56) = 0;
  *(_QWORD *)(v7 + 64) = 0;
  *(_QWORD *)(v7 + 48) = 0;
  *(_QWORD *)(v7 + 72) = 0xFFFFFFFFLL;
  *(_QWORD *)(v7 + 56) = re::ecs2::ComponentTypeBase::makeAllocator(*(re::ecs2::ComponentTypeBase **)(v7 + 32), (const char *)0x38);
  v9 = atomic_load((unsigned __int8 *)&qword_254124010);
  if ((v9 & 1) == 0 && __cxa_guard_acquire(&qword_254124010))
  {
    qword_254124008 = re::internal::getOrCreateInfo((re::internal *)"UnsupportedTestComponent", (uint64_t (*)(re::internal *))re::allocInfo_UnsupportedTestComponent, (re::IntrospectionBase *(*)(void))re::initInfo_UnsupportedTestComponent, (void (*)(re::IntrospectionBase *))&unk_254123FE0, 0);
    __cxa_guard_release(&qword_254124010);
  }
  v10 = qword_254124008;
  re::IntrospectionSharedLock::IntrospectionSharedLock((re::IntrospectionSharedLock *)&v31);
  v11 = *(char **)(v10 + 48);
  if (v11)
  {
    v12 = *v11;
    if (*v11)
    {
      v13 = v11[1];
      if (v13)
      {
        v14 = (unsigned __int8 *)(v11 + 2);
        do
        {
          v12 = 31 * v12 + v13;
          v15 = *v14++;
          v13 = v15;
        }
        while (v15);
      }
    }
  }
  else
  {
    v12 = 0;
  }
  v27 = 2 * v12;
  v28 = v11;
  v16 = (uint64_t *)re::HashTable<re::StringID,re::StateParameterInt *,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::tryGet((uint64_t)&unk_25582A358, &v27);
  if (v16)
  {
    v17 = *v16;
  }
  else
  {
    v18 = 0;
    v17 = 0xFFFFFFFFLL;
  }
  *(_QWORD *)(v7 + 64) = v18;
  *(_QWORD *)(v7 + 72) = v17;
  re::StringID::destroyString((re::StringID *)&v27);
  re::IntrospectionSharedLock::~IntrospectionSharedLock((re::IntrospectionSharedLock *)&v31);
  qword_254124000 = v7;
  re::StringID::destroyString((re::StringID *)&v26);
  v20 = re::ecs2::ComponentTypeRegistry::instance(v19);
  re::ecs2::ComponentTypeRegistry::add((os_unfair_lock_s *)v20, (re::ecs2::ComponentTypeBase *)qword_254124000);
  v21 = v35;
  if (v35 && (v36 & 1) != 0)
    v21 = (re *)(*(uint64_t (**)(re *, const char *))(*(_QWORD *)v35 + 40))(v35, v37);
  v22 = re::globalAllocators(v21);
  v23 = (_anonymous_namespace_::UnsupportedTestAsset *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v22[2] + 32))(v22[2], 8, 8);
  *(_QWORD *)v23 = &off_24ED9B390;
  v38 = (uint64_t (***)())&v36;
  v35 = v23;
  v36 = (unint64_t)&off_24ED9B680;
  v24 = (uint64_t)v35;
  v35 = 0;
  v32 = v24;
  if (v38)
  {
    if (v38 == (uint64_t (***)())&v36)
    {
      v34 = (uint64_t (***)())&v33;
      (*(void (**)(unint64_t *))(v36 + 24))(&v36);
    }
    else
    {
      v34 = v38;
      v38 = 0;
    }
  }
  else
  {
    v34 = 0;
  }
  re::AssetManager::registerAssetType(a1, (char **)&qword_254124028, &v32);
  std::unique_ptr<re::RigHierarchy,std::function<void ()(re::RigHierarchy*)>>::~unique_ptr[abi:nn180100](&v32);
  return std::unique_ptr<re::RigHierarchy,std::function<void ()(re::RigHierarchy*)>>::~unique_ptr[abi:nn180100]((uint64_t *)&v35);
}

void `anonymous namespace'::UnsupportedTestAsset::assetType(_anonymous_namespace_::UnsupportedTestAsset *this)
{
  unsigned __int8 v1;

  v1 = atomic_load((unsigned __int8 *)&qword_254123FF8);
  if ((v1 & 1) == 0)
  {
    if (__cxa_guard_acquire(&qword_254123FF8))
    {
      qword_254124028 = (uint64_t)"UnsupportedTestAsset";
      qword_254124038 = 0;
      re::AssetType::generateCompiledExtension((re::AssetType *)&qword_254124028);
      __cxa_guard_release(&qword_254123FF8);
    }
  }
}

re *_RETestingUnregisterUnsupportedTestAsset(re::ecs2::ComponentTypeRegistry *a1)
{
  char *v1;
  re *result;
  uint64_t v3;
  uint64_t v4;

  v1 = re::ecs2::ComponentTypeRegistry::instance(a1);
  result = (re *)re::ecs2::ComponentTypeRegistry::remove((os_unfair_lock_s *)v1, (const re::ecs2::ComponentTypeBase *)qword_254124000);
  v3 = qword_254124000;
  if (qword_254124000)
  {
    v4 = re::globalAllocators(result)[2];
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 16))(v3);
    result = (re *)(*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v4 + 40))(v4, v3);
  }
  qword_254124000 = 0;
  return result;
}

void _RETestingEntityAddUnsupportedTestAsset(_QWORD *a1, uint64_t a2, int a3)
{
  uint64_t *v6;
  _anonymous_namespace_::UnsupportedTestAsset *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10[3];

  v6 = re::globalAllocators((re *)a1);
  v7 = (_anonymous_namespace_::UnsupportedTestAsset *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v6[2] + 32))(v6[2], 1, 1);
  (*(void (**)(uint64_t *__return_ptr, uint64_t, _anonymous_namespace_::UnsupportedTestAsset *, uint64_t *, _QWORD, _QWORD, _QWORD))(*(_QWORD *)a2 + 416))(v10, a2, v7, &qword_254124028, 0, 0, 0);
  if (a3)
  {
    v8 = re::ecs2::EntityComponentCollection::getOrAdd((re::ecs2::EntityComponentCollection *)(a1 + 4), (const re::ecs2::ComponentTypeBase *)qword_254124000);
    re::AssetHandle::operator=((uint64_t *)(v8 + 32), v10);
  }
  else
  {
    v9 = a1[22];
    if (!v9)
      v9 = re::ecs2::EntityComponentCollection::add((re::ecs2::EntityComponentCollection *)(a1 + 4), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::MeshComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType);
    if (*(_QWORD *)(v9 + 40) != v10[1])
    {
      re::AssetHandle::operator=((uint64_t *)(v9 + 32), v10);
      re::ecs2::Component::enqueueMarkDirty(v9);
    }
  }
  re::AssetHandle::~AssetHandle((re::AssetHandle *)v10);
}

uint64_t RECustomAssetGetObject(uint64_t a1, const re::AssetType *a2)
{
  unsigned int v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;

  re::AssetAPIHelper::assetHandleCreate(a1, &v6);
  if (v7 && (v3 = atomic_load((unsigned int *)(v7 + 704)), v3 == 2))
    v4 = *(_QWORD *)(re::AssetHandle::assetWithType((re::AssetHandle *)&v6, a2, 0) + 8);
  else
    v4 = 0;
  re::AssetHandle::~AssetHandle((re::AssetHandle *)&v6);
  return v4;
}

uint64_t RESerializableAssetHandleGetAsset(uint64_t a1)
{
  return *(_QWORD *)(a1 + 24);
}

re::SharedAssetHandle *RESerializableAssetHandleCreate(uint64_t a1)
{
  re *v1;
  uint64_t *v2;
  re::SharedAssetHandle *v3;
  char *v4;
  uint64_t v6[3];

  re::AssetAPIHelper::assetHandleCreate(a1, v6);
  v2 = re::globalAllocators(v1);
  v3 = (re::SharedAssetHandle *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v2[2] + 32))(v2[2], 48, 8);
  v4 = (char *)re::SharedAssetHandle::SharedAssetHandle(v3, (const re::AssetHandle *)v6) + 8;
  re::AssetHandle::~AssetHandle((re::AssetHandle *)v6);
  return v3;
}

re::SharedAssetHandle *RESerializableAssetHandleCreateRetained(uint64_t a1)
{
  re *v1;
  uint64_t *v2;
  re::SharedAssetHandle *v3;
  uint64_t v5[3];

  re::AssetAPIHelper::assetHandleCreate(a1, v5);
  v2 = re::globalAllocators(v1);
  v3 = (re::SharedAssetHandle *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v2[2] + 32))(v2[2], 48, 8);
  re::SharedAssetHandle::SharedAssetHandle(v3, (const re::AssetHandle *)v5);
  re::AssetHandle::~AssetHandle((re::AssetHandle *)v5);
  return v3;
}

void REAssetSetMetadataString(uint64_t a1, const char *a2, const char *a3)
{
  uint64_t v5[3];

  re::AssetAPIHelper::assetHandleCreate(a1, v5);
  re::AssetHandle::setOrClearMetadataString((re::AssetHandle *)v5, a2, a3);
  re::AssetHandle::~AssetHandle((re::AssetHandle *)v5);
}

void REAssetClearMetadataString(uint64_t a1, const char *a2)
{
  uint64_t v3[3];

  re::AssetAPIHelper::assetHandleCreate(a1, v3);
  re::AssetHandle::setOrClearMetadataString((re::AssetHandle *)v3, a2, 0);
  re::AssetHandle::~AssetHandle((re::AssetHandle *)v3);
}

CFStringRef REAssetCopyMetadataString(uint64_t a1, const char *a2)
{
  const char *v3;
  CFStringRef v4;
  _BYTE v6[8];
  uint64_t v7;
  char v8;
  _BYTE v9[23];
  uint64_t v10[3];

  re::AssetAPIHelper::assetHandleCreate(a1, v10);
  re::internal::AssetEntry::getMetadataString((os_unfair_lock_s *)v10[1], a2, 1, v6);
  if (v6[0])
  {
    if ((v8 & 1) != 0)
      v3 = *(const char **)&v9[7];
    else
      v3 = v9;
    v4 = CFStringCreateWithCString(0, v3, 0x8000100u);
    if (v6[0] && v7 && (v8 & 1) != 0)
      (*(void (**)(void))(*(_QWORD *)v7 + 40))();
  }
  else
  {
    v4 = 0;
  }
  re::AssetHandle::~AssetHandle((re::AssetHandle *)v10);
  return v4;
}

__CFDictionary *REAssetCopyMetadata(uint64_t a1)
{
  __CFDictionary *v1;
  uint64_t v3[3];

  re::AssetAPIHelper::assetHandleCreate(a1, v3);
  v1 = re::AssetHandle::copyComposedMetadataCFDR((re::AssetHandle *)v3);
  re::AssetHandle::~AssetHandle((re::AssetHandle *)v3);
  return v1;
}

void REAssetSetDebugName(uint64_t a1, const char *a2)
{
  uint64_t v3[3];

  re::AssetAPIHelper::assetHandleCreate(a1, v3);
  re::AssetHandle::setOrClearMetadataString((re::AssetHandle *)v3, "Engine/RE-debugName", a2);
  re::AssetHandle::~AssetHandle((re::AssetHandle *)v3);
}

CFStringRef REAssetCopyDebugName(uint64_t a1)
{
  const char *v1;
  CFStringRef v2;
  _BYTE v4[8];
  uint64_t v5;
  char v6;
  _BYTE v7[23];
  uint64_t v8[3];

  re::AssetAPIHelper::assetHandleCreate(a1, v8);
  re::internal::AssetEntry::getMetadataString((os_unfair_lock_s *)v8[1], "Engine/RE-debugName", 1, v4);
  if (v4[0])
  {
    if ((v6 & 1) != 0)
      v1 = *(const char **)&v7[7];
    else
      v1 = v7;
    v2 = CFStringCreateWithCString(0, v1, 0x8000100u);
    if (v4[0] && v5 && (v6 & 1) != 0)
      (*(void (**)(void))(*(_QWORD *)v5 + 40))();
  }
  else
  {
    v2 = 0;
  }
  re::AssetHandle::~AssetHandle((re::AssetHandle *)v8);
  return v2;
}

BOOL _RERenderManagerExportTextureAssetToKTX(int a1, uint64_t a2, re::FileStreamWriter *a3)
{
  uint64_t v4;

  v4 = 0;
  return _RERenderManagerExportTextureAssetToKTXWithErrorHandling(a1, a2, a3, (char *)&v4);
}

BOOL _RERenderManagerExportTextureAssetToKTXWithErrorHandling(int a1, uint64_t a2, re::FileStreamWriter *this, char *a4)
{
  __CFError **v6;
  uint64_t v7;
  __CFError **v8;
  __CFError **v9;
  _BOOL8 v10;
  re::CoreREAssetUtils *v11;
  re::CoreREAssetUtils *v12;
  _BYTE v14[8];
  uint64_t v15;
  char v16;
  _BYTE v17[23];
  uint64_t v18[3];
  _BYTE v19[8];
  _BYTE v20[25];
  _BYTE v21[23];

  re::FileStreamWriter::open(this, (uint64_t)v19);
  if (v19[0])
  {
    re::AssetAPIHelper::assetHandleCreate(a2, v18);
    v7 = re::AssetHandle::loadedAsset<re::TextureAsset>((re::TextureAsset *)v18);
    if (v7)
    {
      re::exportToKtx((uint64_t)v20, v7 + 152, 0, 0, (uint64_t)v14);
      v10 = v14[0] != 0;
      if (!v14[0])
      {
        if ((v16 & 1) != 0)
          v11 = *(re::CoreREAssetUtils **)&v17[7];
        else
          v11 = (re::CoreREAssetUtils *)v17;
        re::CoreREAssetUtils::logAndSetErrorFromString(v11, a4, v9);
        if (!v14[0] && v15 && (v16 & 1) != 0)
          (*(void (**)(void))(*(_QWORD *)v15 + 40))();
      }
    }
    else
    {
      re::CoreREAssetUtils::logAndSetErrorFromString((re::CoreREAssetUtils *)"Failed to retrieve metalTexture from Asset", a4, v8);
      v10 = 0;
    }
    re::AssetHandle::~AssetHandle((re::AssetHandle *)v18);
  }
  else
  {
    if ((v20[24] & 1) != 0)
      v12 = *(re::CoreREAssetUtils **)&v21[7];
    else
      v12 = (re::CoreREAssetUtils *)v21;
    re::CoreREAssetUtils::logAndSetErrorFromString(v12, a4, v6);
    v10 = 0;
  }
  re::Result<re::FileStreamWriter,re::DetailedError>::~Result((uint64_t)v19);
  return v10;
}

void `anonymous namespace'::UnsupportedTestAssetLoader::~UnsupportedTestAssetLoader(_anonymous_namespace_::UnsupportedTestAssetLoader *this)
{
  JUMPOUT(0x2276933B8);
}

re *`anonymous namespace'::UnsupportedTestAssetLoader::unloadAsset(re *this, void *a2)
{
  uint64_t *v3;

  if (a2)
  {
    v3 = re::globalAllocators(this);
    return (re *)(*(uint64_t (**)(uint64_t, void *))(*(_QWORD *)v3[2] + 40))(v3[2], a2);
  }
  return this;
}

BOOL `anonymous namespace'::UnsupportedTestAssetLoader::isSupportedSourceExtension(_anonymous_namespace_::UnsupportedTestAssetLoader *this, const char *a2)
{
  return strcasecmp(a2, "testunsupported") == 0;
}

uint64_t `anonymous namespace'::UnsupportedTestAssetLoader::introspectionType(_anonymous_namespace_::UnsupportedTestAssetLoader *this)
{
  unsigned __int8 v1;

  v1 = atomic_load((unsigned __int8 *)&qword_254123FF0);
  if ((v1 & 1) == 0 && __cxa_guard_acquire(&qword_254123FF0))
  {
    qword_254123FE8 = re::internal::getOrCreateInfo((re::internal *)"UnsupportedTestAsset", (uint64_t (*)(re::internal *))re::allocInfo_UnsupportedTestAsset, (re::IntrospectionBase *(*)(void))re::initInfo_UnsupportedTestAsset, (void (*)(re::IntrospectionBase *))&unk_254123FC8, 0);
    __cxa_guard_release(&qword_254123FF0);
  }
  return qword_254123FE8;
}

void `anonymous namespace'::UnsupportedTestComponent::~UnsupportedTestComponent(_anonymous_namespace_::UnsupportedTestComponent *this)
{
  *(_QWORD *)this = &off_24ED9B4E8;
  re::AssetHandle::~AssetHandle((_anonymous_namespace_::UnsupportedTestComponent *)((char *)this + 32));
  *(_QWORD *)this = &off_24ED426B8;
  objc_destructInstance((char *)this + 8);
}

{
  *(_QWORD *)this = &off_24ED9B4E8;
  re::AssetHandle::~AssetHandle((_anonymous_namespace_::UnsupportedTestComponent *)((char *)this + 32));
  *(_QWORD *)this = &off_24ED426B8;
  objc_destructInstance((char *)this + 8);
  JUMPOUT(0x2276933B8);
}

uint64_t re::ecs2::ComponentImpl<`anonymous namespace'::UnsupportedTestComponent,(re::ecs2::ComponentTypeBase::Flags)0>::allocator()
{
  return *(_QWORD *)(qword_254124000 + 56);
}

uint64_t re::ecs2::ComponentImpl<`anonymous namespace'::UnsupportedTestComponent,(re::ecs2::ComponentTypeBase::Flags)0>::commonComponentIndex()
{
  return -1;
}

uint64_t re::ecs2::ComponentImpl<`anonymous namespace'::UnsupportedTestComponent,(re::ecs2::ComponentTypeBase::Flags)0>::componentType()
{
  return qword_254124000;
}

double re::ecs2::ComponentType<`anonymous namespace'::UnsupportedTestComponent>::makeBindNode@<D0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  _anonymous_namespace_ *v5;

  v5 = (_anonymous_namespace_ *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 48))(a1);
  return re::makeRelativeBindNode(v5, a2, a3);
}

uint64_t re::ecs2::ComponentType<`anonymous namespace'::UnsupportedTestComponent>::isCustomComponent()
{
  return 0;
}

_QWORD *re::ecs2::ComponentType<`anonymous namespace'::UnsupportedTestComponent>::~ComponentType(_QWORD *a1)
{
  re *v2;
  void (***v3)(_QWORD);
  uint64_t v4;

  *a1 = off_24ED9B568;
  v2 = (re *)a1[6];
  if (v2)
    v2 = (re *)RESyncRelease();
  v3 = (void (***)(_QWORD))a1[7];
  if (v3)
  {
    v4 = re::globalAllocators(v2)[2];
    (**v3)(v3);
    (*(void (**)(uint64_t, void (***)(_QWORD)))(*(_QWORD *)v4 + 40))(v4, v3);
  }
  *a1 = &unk_24ED45840;
  re::StringID::destroyString((re::StringID *)(a1 + 3));
  return a1;
}

void re::ecs2::ComponentType<`anonymous namespace'::UnsupportedTestComponent>::~ComponentType(_QWORD *a1)
{
  JUMPOUT(0x2276933B8);
}

void re::ecs2::ComponentType<`anonymous namespace'::UnsupportedTestComponent>::doMakeComponent(_QWORD *a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;

  v2 = (*(uint64_t (**)(_QWORD, uint64_t, _QWORD))(**(_QWORD **)(qword_254124000 + 56) + 32))(*(_QWORD *)(qword_254124000 + 56), 56, 0);
  *(_OWORD *)v2 = 0u;
  *(_OWORD *)(v2 + 16) = 0u;
  *(_OWORD *)(v2 + 32) = 0u;
  *(_QWORD *)(v2 + 48) = 0;
  ArcSharedObject::ArcSharedObject((ArcSharedObject *)v2, 0);
  *(_QWORD *)(v3 + 16) = 0;
  *(_BYTE *)(v3 + 24) = 0;
  *(_QWORD *)v3 = &off_24ED9B4E8;
  *(_QWORD *)(v3 + 40) = 0;
  *(_QWORD *)(v3 + 48) = 0;
  *(_QWORD *)(v3 + 32) = 0;
  *a1 = v3;
}

uint64_t re::ecs2::ComponentType<`anonymous namespace'::UnsupportedTestComponent>::doMakeSceneComponentCollection(re *a1)
{
  uint64_t *v2;
  uint64_t v3;
  _anonymous_namespace_ *v4;
  _anonymous_namespace_ *v5;
  _anonymous_namespace_ *v6;
  _anonymous_namespace_ *v7;

  v2 = re::globalAllocators(a1);
  v3 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v2[2] + 32))(v2[2], 656, 8);
  *(_QWORD *)(v3 + 16) = 0;
  *(_QWORD *)(v3 + 24) = 0;
  *(_DWORD *)(v3 + 32) = 0;
  *(_QWORD *)(v3 + 40) = 0;
  *(_QWORD *)(v3 + 48) = a1;
  *(_OWORD *)(v3 + 56) = 0u;
  *(_OWORD *)(v3 + 72) = 0u;
  *(_OWORD *)(v3 + 88) = 0u;
  *(_OWORD *)(v3 + 104) = 0u;
  *(_QWORD *)(v3 + 128) = 0;
  *(_QWORD *)(v3 + 120) = 0;
  *(_QWORD *)v3 = &off_24ED9B5D8;
  *(_QWORD *)(v3 + 8) = 0;
  *(_QWORD *)(v3 + 136) = 0;
  *(_QWORD *)(v3 + 144) = 0;
  *(_DWORD *)(v3 + 152) = 0;
  *(_QWORD *)(v3 + 200) = 0;
  *(_DWORD *)(v3 + 208) = 0;
  *(_DWORD *)(v3 + 192) = 0;
  *(_OWORD *)(v3 + 160) = 0u;
  *(_OWORD *)(v3 + 176) = 0u;
  *(_DWORD *)(v3 + 240) = 0;
  *(_QWORD *)(v3 + 224) = 0;
  *(_QWORD *)(v3 + 232) = 0;
  *(_QWORD *)(v3 + 216) = 0;
  *(_QWORD *)(v3 + 288) = 0;
  *(_DWORD *)(v3 + 296) = 0;
  *(_OWORD *)(v3 + 248) = 0u;
  *(_DWORD *)(v3 + 280) = 0;
  *(_OWORD *)(v3 + 264) = 0u;
  *(_QWORD *)(v3 + 304) = 0;
  *(_QWORD *)(v3 + 312) = 0;
  *(_DWORD *)(v3 + 328) = 0;
  *(_QWORD *)(v3 + 320) = 0;
  *(_QWORD *)(v3 + 376) = 0;
  *(_DWORD *)(v3 + 384) = 0;
  *(_DWORD *)(v3 + 368) = 0;
  *(_OWORD *)(v3 + 336) = 0u;
  *(_OWORD *)(v3 + 352) = 0u;
  *(_QWORD *)(v3 + 392) = 0;
  *(_QWORD *)(v3 + 400) = 0;
  *(_DWORD *)(v3 + 416) = 0;
  *(_QWORD *)(v3 + 408) = 0;
  *(_QWORD *)(v3 + 464) = 0;
  *(_DWORD *)(v3 + 472) = 0;
  *(_DWORD *)(v3 + 456) = 0;
  *(_OWORD *)(v3 + 424) = 0u;
  *(_OWORD *)(v3 + 440) = 0u;
  *(_QWORD *)(v3 + 480) = 0;
  *(_QWORD *)(v3 + 488) = 0;
  *(_QWORD *)(v3 + 496) = 0;
  *(_DWORD *)(v3 + 504) = 1;
  *(_QWORD *)(v3 + 520) = 0;
  *(_QWORD *)(v3 + 512) = 0;
  *(_DWORD *)(v3 + 536) = 0;
  *(_QWORD *)(v3 + 528) = 0;
  *(_QWORD *)(v3 + 552) = 0;
  *(_QWORD *)(v3 + 544) = 0;
  *(_DWORD *)(v3 + 560) = 1;
  *(_QWORD *)(v3 + 576) = 0;
  *(_QWORD *)(v3 + 568) = 0;
  *(_DWORD *)(v3 + 592) = 0;
  *(_QWORD *)(v3 + 584) = 0;
  *(_QWORD *)(v3 + 608) = 0;
  *(_QWORD *)(v3 + 600) = 0;
  *(_DWORD *)(v3 + 616) = 1;
  *(_QWORD *)(v3 + 632) = 0;
  *(_QWORD *)(v3 + 624) = 0;
  *(_DWORD *)(v3 + 648) = 0;
  *(_QWORD *)(v3 + 640) = 0;
  v4 = (_anonymous_namespace_ *)re::DynamicArray<re::EvaluationRegister>::setCapacity((_QWORD *)(v3 + 128), 0);
  ++*(_DWORD *)(v3 + 152);
  v5 = (_anonymous_namespace_ *)re::DynamicArray<re::EvaluationRegister>::setCapacity((_QWORD *)(v3 + 216), 0);
  ++*(_DWORD *)(v3 + 240);
  v6 = (_anonymous_namespace_ *)re::DynamicArray<re::EvaluationRegister>::setCapacity((_QWORD *)(v3 + 304), 0);
  ++*(_DWORD *)(v3 + 328);
  v7 = (_anonymous_namespace_ *)re::DynamicArray<re::EvaluationRegister>::setCapacity((_QWORD *)(v3 + 392), 0);
  ++*(_DWORD *)(v3 + 416);
  return v3;
}

uint64_t re::ecs2::ComponentType<`anonymous namespace'::UnsupportedTestComponent>::doGetComponentIntrospectionInfo()
{
  unsigned __int8 v0;

  v0 = atomic_load((unsigned __int8 *)&qword_254124010);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_254124010))
  {
    qword_254124008 = re::internal::getOrCreateInfo((re::internal *)"UnsupportedTestComponent", (uint64_t (*)(re::internal *))re::allocInfo_UnsupportedTestComponent, (re::IntrospectionBase *(*)(void))re::initInfo_UnsupportedTestComponent, (void (*)(re::IntrospectionBase *))&unk_254123FE0, 0);
    __cxa_guard_release(&qword_254124010);
  }
  return qword_254124008;
}

__n128 re::ecs2::ComponentType<`anonymous namespace'::UnsupportedTestComponent>::doGetComponentTypeID@<Q0>(__n128 *a1@<X0>, __n128 *a2@<X8>)
{
  __n128 result;

  result = a1[4];
  *a2 = result;
  return result;
}

uint64_t re::ecs2::ComponentType<`anonymous namespace'::UnsupportedTestComponent>::doGetNetworkSyncInfo(uint64_t a1)
{
  return *(_QWORD *)(a1 + 48);
}

uint64_t re::ecs2::SceneComponentCollection<`anonymous namespace'::UnsupportedTestComponent>::~SceneComponentCollection(uint64_t a1)
{
  uint64_t v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  *(_QWORD *)a1 = &off_24ED9B5D8;
  v3 = (uint64_t *)(a1 + 128);
  v2 = *(_QWORD *)(a1 + 128);
  if (v2)
  {
    if (*(_QWORD *)(a1 + 160))
      (*(void (**)(uint64_t))(*(_QWORD *)v2 + 40))(v2);
    *(_QWORD *)(a1 + 160) = 0;
    v3[1] = 0;
    v3[2] = 0;
    *v3 = 0;
    ++*(_DWORD *)(a1 + 152);
  }
  v4 = *(_QWORD *)(a1 + 216);
  if (v4)
  {
    if (*(_QWORD *)(a1 + 248))
      (*(void (**)(uint64_t))(*(_QWORD *)v4 + 40))(v4);
    *(_QWORD *)(a1 + 248) = 0;
    *(_QWORD *)(a1 + 224) = 0;
    *(_QWORD *)(a1 + 232) = 0;
    *(_QWORD *)(a1 + 216) = 0;
    ++*(_DWORD *)(a1 + 240);
  }
  v5 = *(_QWORD *)(a1 + 304);
  if (v5)
  {
    if (*(_QWORD *)(a1 + 336))
      (*(void (**)(uint64_t))(*(_QWORD *)v5 + 40))(v5);
    *(_QWORD *)(a1 + 336) = 0;
    *(_QWORD *)(a1 + 312) = 0;
    *(_QWORD *)(a1 + 320) = 0;
    *(_QWORD *)(a1 + 304) = 0;
    ++*(_DWORD *)(a1 + 328);
  }
  v6 = *(_QWORD *)(a1 + 392);
  if (v6)
  {
    if (*(_QWORD *)(a1 + 424))
      (*(void (**)(uint64_t))(*(_QWORD *)v6 + 40))(v6);
    *(_QWORD *)(a1 + 424) = 0;
    *(_QWORD *)(a1 + 400) = 0;
    *(_QWORD *)(a1 + 408) = 0;
    *(_QWORD *)(a1 + 392) = 0;
    ++*(_DWORD *)(a1 + 416);
  }
  re::ecs2::ComponentBucketsBase::deinit((re::ecs2::ComponentBucketsBase *)(a1 + 480));
  re::BucketArray<unsigned long,8ul>::deinit(a1 + 600);
  re::DynamicOverflowArray<re::CollisionCastHit *,2ul>::deinit(a1 + 600);
  re::BucketArray<re::HashTable<re::ecs2::Component *,re::DataArrayHandle<re::ecs2::Component *>,re::Hash<re::ecs2::Component *>,re::EqualTo<re::ecs2::Component *>,true,false>,8ul>::deinit(a1 + 544);
  re::DynamicOverflowArray<re::CollisionCastHit *,2ul>::deinit(a1 + 544);
  re::BucketArray<re::DataArray<re::ecs2::Component *>,8ul>::deinit(a1 + 488);
  re::DynamicOverflowArray<re::CollisionCastHit *,2ul>::deinit(a1 + 488);
  re::Event<re::Engine>::~Event((uint64_t *)(a1 + 392));
  re::Event<re::Engine>::~Event((uint64_t *)(a1 + 304));
  re::Event<re::Engine>::~Event((uint64_t *)(a1 + 216));
  re::Event<re::Engine>::~Event(v3);
  *(_QWORD *)a1 = off_24ED71348;
  re::HashBrown<unsigned long long,re::Pair<void const*,void const*,true>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,void,false>::deinit(a1 + 56);
  return re::ReadOnlyCollection<re::ecs2::Component *,true>::~ReadOnlyCollection(a1);
}

void re::ecs2::SceneComponentCollection<`anonymous namespace'::UnsupportedTestComponent>::~SceneComponentCollection(uint64_t a1)
{
  JUMPOUT(0x2276933B8);
}

void re::ecs2::SceneComponentCollection<`anonymous namespace'::UnsupportedTestComponent>::didAdd(uint64_t a1, uint64_t a2)
{
  if (*(_QWORD *)(a2 + 16))
}

void re::ecs2::SceneComponentCollection<`anonymous namespace'::UnsupportedTestComponent>::doActivate(uint64_t a1, uint64_t a2)
{
  if (*(_QWORD *)(a2 + 16))
}

void re::ecs2::SceneComponentCollection<`anonymous namespace'::UnsupportedTestComponent>::doDeactivate(uint64_t a1, uint64_t a2)
{
  if (*(_QWORD *)(a2 + 16))
}

void re::ecs2::SceneComponentCollection<`anonymous namespace'::UnsupportedTestComponent>::willRemove(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  re::ecs2::Component **v5;
  re::ecs2::ComponentBucketsBase *v6;
  uint64_t v7;
  re::ecs2::Component *v8;

  if (*(_QWORD *)(a2 + 16))
  {
    v4 = *(_QWORD *)(a2 + 16);
    if (v4)
    {
      v5 = *(re::ecs2::Component ***)(a2 + 32);
      v6 = (re::ecs2::ComponentBucketsBase *)(a1 + 480);
      v7 = 8 * v4;
      do
      {
        v8 = *v5++;
        re::ecs2::ComponentBucketsBase::removeComponentFromAllBuckets(v6, v8);
        v7 -= 8;
      }
      while (v7);
    }
  }
}

double re::ecs2::SceneComponentCollection<`anonymous namespace'::UnsupportedTestComponent>::registerCallbacks(uint64_t a1, _QWORD *a2)
{
  double result;

  if (a2[3])
  if (a2[4])
  if (a2[5])
  if (a2[6])
  return result;
}

void re::ecs2::SceneComponentCollection<`anonymous namespace'::UnsupportedTestComponent>::unregisterCallbacks(uint64_t a1, _QWORD *a2)
{
  if (a2[3])
  if (a2[4])
  if (a2[5])
  if (a2[6])
}

void re::Event<re::ecs2::SceneComponentCollection<`anonymous namespace'::UnsupportedTestComponent>,re::Slice<`anonymous namespace'::UnsupportedTestComponent*>>::raise(uint64_t a1, uint64_t a2)
{
  int v3;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t i;
  unint64_t v9;
  uint64_t v10;
  __int128 v11;
  _OWORD v12[2];
  uint64_t v13;
  int v14;
  const char *v15;
  __int16 v16;
  int v17;
  __int16 v18;
  unint64_t v19;
  __int16 v20;
  unint64_t v21;
  _BYTE v22[88];
  uint64_t v23;

  v23 = *MEMORY[0x24BDAC8D0];
  v3 = *(_DWORD *)(a1 + 80);
  *(_DWORD *)(a1 + 80) = v3 + 1;
  if (*(_QWORD *)(a1 + 16))
  {
    v5 = 0;
    do
    {
      if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)(a1 + 32) + 32 * v5 + 24))(a2) == 1)
        re::DynamicArray<re::Event<re::SimulationTimer,re::SimulationTimerEventArgs const&>::Subscription>::removeStableAt((_QWORD *)a1, v5);
      else
        ++v5;
    }
    while (v5 < *(_QWORD *)(a1 + 16));
    v3 = *(_DWORD *)(a1 + 80) - 1;
  }
  *(_DWORD *)(a1 + 80) = v3;
  if (!v3)
  {
    v6 = *(_QWORD *)(a1 + 56);
    if (v6)
    {
      v7 = 0;
      for (i = 0; i != v6; ++i)
      {
        v9 = *(_QWORD *)(a1 + 56);
        if (v9 <= i)
        {
          memset(v22, 0, 80);
          os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
          v14 = 136315906;
          v15 = "operator[]";
          v16 = 1024;
          v17 = 789;
          v18 = 2048;
          v19 = i;
          v20 = 2048;
          v21 = v9;
          _os_log_send_and_compose_impl();
          _os_crash_msg();
          __break(1u);
        }
        v10 = *(_QWORD *)(a1 + 72) + v7;
        v11 = *(_OWORD *)(v10 + 16);
        v12[0] = *(_OWORD *)v10;
        v12[1] = v11;
        v13 = *(_QWORD *)(v10 + 32);
        if (LOBYTE(v12[0]))
        {
          re::DynamicArray<re::Event<re::ecs2::SceneComponentCollection<re::ecs2::CustomComponent>,re::Slice<re::ecs2::CustomComponent*>>::Subscription>::indexOf((uint64_t)v22, *(_QWORD *)(a1 + 16), *(char **)(a1 + 32), (_QWORD *)v12 + 1);
          if (!v22[0])
        }
        else
        {
          re::DynamicArray<re::Event<re::ecs2::SceneComponentCollection<re::ecs2::CustomComponent>,re::Slice<re::ecs2::CustomComponent*>>::Subscription>::removeStable(a1, (_QWORD *)v12 + 1);
        }
        v7 += 40;
      }
    }
  }
}

__n128 re::DynamicArray<re::Event<re::ecs2::SceneComponentCollection<`anonymous namespace'::UnsupportedTestComponent>,re::Slice<`anonymous namespace'::UnsupportedTestComponent*>>::Subscription>::add(uint64_t a1, uint64_t a2)
{
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  _OWORD *v8;
  __n128 result;
  __int128 v10;
  uint64_t v11;
  BOOL v12;
  unint64_t v13;
  unint64_t v14;

  v4 = *(_QWORD *)(a1 + 8);
  v5 = *(_QWORD *)(a1 + 16);
  v6 = v5 + 1;
  if (v5 >= v4 && v4 < v6)
  {
    if (*(_QWORD *)a1)
    {
      v11 = 2 * v4;
      v12 = v4 == 0;
      v13 = 8;
      if (!v12)
        v13 = v11;
      if (v13 <= v6)
        v14 = v6;
      else
        v14 = v13;
      re::DynamicArray<re::EvaluationRegister>::setCapacity((_QWORD *)a1, v14);
    }
    else
    {
      re::DynamicArray<re::EvaluationRegister>::setCapacity((_QWORD *)a1, v6);
      ++*(_DWORD *)(a1 + 24);
    }
  }
  v8 = (_OWORD *)(*(_QWORD *)(a1 + 32) + 32 * *(_QWORD *)(a1 + 16));
  result = *(__n128 *)a2;
  v10 = *(_OWORD *)(a2 + 16);
  *v8 = *(_OWORD *)a2;
  v8[1] = v10;
  ++*(_QWORD *)(a1 + 16);
  ++*(_DWORD *)(a1 + 24);
  return result;
}

double re::Event<re::ecs2::SceneComponentCollection<`anonymous namespace'::UnsupportedTestComponent>,re::Slice<`anonymous namespace'::UnsupportedTestComponent*>>::subscribe<re::ecs2::SceneComponentCollectionCallbacks>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  double result;
  __int128 v6;
  __int128 v7;
  char v8[8];
  __int128 v9;
  __int128 v10;
  uint64_t v11;

  v11 = *MEMORY[0x24BDAC8D0];
  *(_QWORD *)&v6 = a2;
  *((_QWORD *)&v6 + 1) = a3;
  *(_QWORD *)&v7 = a4;
  re::DynamicArray<re::Event<re::ecs2::SceneComponentCollection<re::ecs2::CustomComponent>,re::Slice<re::ecs2::CustomComponent*>>::Subscription>::indexOf((uint64_t)v8, *(_QWORD *)(a1 + 16), *(char **)(a1 + 32), &v6);
  if (!v8[0])
  {
    if (*(_DWORD *)(a1 + 80))
    {
      v8[0] = 1;
      v9 = v6;
      v10 = v7;
    }
    else
    {
    }
  }
  return result;
}

uint64_t re::ecs2::SceneComponentCollectionCallbacks::didAddComponent<`anonymous namespace'::UnsupportedTestComponent>(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4)
{
  void (*v5)(_QWORD);
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v5 = *(void (**)(_QWORD))(a1 + 24);
  if (*(_BYTE *)(a1 + 16))
  {
    if (a4)
    {
      v7 = 8 * a4;
      do
      {
        v8 = *a3++;
        ((void (*)(uint64_t, _QWORD))v5)(v8, *(_QWORD *)(a1 + 56));
        v7 -= 8;
      }
      while (v7);
    }
  }
  else if (a4)
  {
    v9 = 8 * a4;
    do
    {
      v10 = *a3++;
      v5(v10);
      v9 -= 8;
    }
    while (v9);
  }
  return 0;
}

uint64_t re::ecs2::SceneComponentCollectionCallbacks::willRemoveComponent<`anonymous namespace'::UnsupportedTestComponent>(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4)
{
  void (*v5)(_QWORD);
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v5 = *(void (**)(_QWORD))(a1 + 32);
  if (*(_BYTE *)(a1 + 16))
  {
    if (a4)
    {
      v7 = 8 * a4;
      do
      {
        v8 = *a3++;
        ((void (*)(uint64_t, _QWORD))v5)(v8, *(_QWORD *)(a1 + 56));
        v7 -= 8;
      }
      while (v7);
    }
  }
  else if (a4)
  {
    v9 = 8 * a4;
    do
    {
      v10 = *a3++;
      v5(v10);
      v9 -= 8;
    }
    while (v9);
  }
  return 0;
}

uint64_t re::ecs2::SceneComponentCollectionCallbacks::doActivateComponent<`anonymous namespace'::UnsupportedTestComponent>(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4)
{
  void (*v5)(_QWORD);
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v5 = *(void (**)(_QWORD))(a1 + 40);
  if (*(_BYTE *)(a1 + 16))
  {
    if (a4)
    {
      v7 = 8 * a4;
      do
      {
        v8 = *a3++;
        ((void (*)(uint64_t, _QWORD))v5)(v8, *(_QWORD *)(a1 + 56));
        v7 -= 8;
      }
      while (v7);
    }
  }
  else if (a4)
  {
    v9 = 8 * a4;
    do
    {
      v10 = *a3++;
      v5(v10);
      v9 -= 8;
    }
    while (v9);
  }
  return 0;
}

uint64_t re::ecs2::SceneComponentCollectionCallbacks::doDeactivateComponent<`anonymous namespace'::UnsupportedTestComponent>(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4)
{
  void (*v5)(_QWORD);
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v5 = *(void (**)(_QWORD))(a1 + 48);
  if (*(_BYTE *)(a1 + 16))
  {
    if (a4)
    {
      v7 = 8 * a4;
      do
      {
        v8 = *a3++;
        ((void (*)(uint64_t, _QWORD))v5)(v8, *(_QWORD *)(a1 + 56));
        v7 -= 8;
      }
      while (v7);
    }
  }
  else if (a4)
  {
    v9 = 8 * a4;
    do
    {
      v10 = *a3++;
      v5(v10);
      v9 -= 8;
    }
    while (v9);
  }
  return 0;
}

__n128 re::DynamicArray<re::Pair<BOOL,re::Event<re::ecs2::SceneComponentCollection<`anonymous namespace'::UnsupportedTestComponent>,re::Slice<`anonymous namespace'::UnsupportedTestComponent*>>::Subscription,true>>::add(uint64_t a1, uint64_t a2)
{
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v8;
  __n128 result;
  __int128 v10;
  uint64_t v11;
  BOOL v12;
  unint64_t v13;
  unint64_t v14;

  v4 = *(_QWORD *)(a1 + 8);
  v5 = *(_QWORD *)(a1 + 16);
  v6 = v5 + 1;
  if (v5 >= v4 && v4 < v6)
  {
    if (*(_QWORD *)a1)
    {
      v11 = 2 * v4;
      v12 = v4 == 0;
      v13 = 8;
      if (!v12)
        v13 = v11;
      if (v13 <= v6)
        v14 = v6;
      else
        v14 = v13;
      re::DynamicArray<re::Pair<BOOL,re::Event<re::SimulationTimer,re::SimulationTimerEventArgs const&>::Subscription,true>>::setCapacity((_QWORD *)a1, v14);
    }
    else
    {
      re::DynamicArray<re::Pair<BOOL,re::Event<re::SimulationTimer,re::SimulationTimerEventArgs const&>::Subscription,true>>::setCapacity((_QWORD *)a1, v6);
      ++*(_DWORD *)(a1 + 24);
    }
  }
  v8 = *(_QWORD *)(a1 + 32) + 40 * *(_QWORD *)(a1 + 16);
  result = *(__n128 *)a2;
  v10 = *(_OWORD *)(a2 + 16);
  *(_QWORD *)(v8 + 32) = *(_QWORD *)(a2 + 32);
  *(__n128 *)v8 = result;
  *(_OWORD *)(v8 + 16) = v10;
  ++*(_QWORD *)(a1 + 16);
  ++*(_DWORD *)(a1 + 24);
  return result;
}

uint64_t re::Event<re::ecs2::SceneComponentCollection<`anonymous namespace'::UnsupportedTestComponent>,re::Slice<`anonymous namespace'::UnsupportedTestComponent*>>::createSubscription<re::ecs2::SceneComponentCollectionCallbacks>(re::ecs2::SceneComponentCollectionCallbacks *,REEventHandlerResult (re::ecs2::SceneComponentCollectionCallbacks::*)(re::ecs2::SceneComponentCollection<`anonymous namespace'::UnsupportedTestComponent>*,re::Slice<`anonymous namespace'::UnsupportedTestComponent*>))::{lambda(re::ecs2::SceneComponentCollection<`anonymous namespace'::UnsupportedTestComponent>*,re::Event<re::ecs2::SceneComponentCollection<`anonymous namespace'::UnsupportedTestComponent>,re::Slice<`anonymous namespace'::UnsupportedTestComponent*>>::Subscription const&,re::Slice<`anonymous namespace'::UnsupportedTestComponent*>&&)#1}::__invoke(uint64_t a1, _QWORD *a2, _QWORD *a3)
{
  uint64_t (*v4)(_QWORD *, uint64_t, _QWORD, _QWORD);
  uint64_t v5;
  _QWORD *v6;

  v4 = (uint64_t (*)(_QWORD *, uint64_t, _QWORD, _QWORD))a2[1];
  v5 = a2[2];
  v6 = (_QWORD *)(*a2 + (v5 >> 1));
  if ((v5 & 1) != 0)
    v4 = *(uint64_t (**)(_QWORD *, uint64_t, _QWORD, _QWORD))(*v6 + v4);
  return v4(v6, a1, *a3, a3[1]);
}

void re::Event<re::ecs2::SceneComponentCollection<`anonymous namespace'::UnsupportedTestComponent>,re::Slice<`anonymous namespace'::UnsupportedTestComponent*>>::unsubscribe<re::ecs2::SceneComponentCollectionCallbacks>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  __int128 v5;
  __int128 v6;
  _BYTE v7[8];
  __int128 v8;
  __int128 v9;
  uint64_t v10;

  v10 = *MEMORY[0x24BDAC8D0];
  *(_QWORD *)&v5 = a2;
  *((_QWORD *)&v5 + 1) = a3;
  *(_QWORD *)&v6 = a4;
  re::DynamicArray<re::Event<re::ecs2::SceneComponentCollection<re::ecs2::CustomComponent>,re::Slice<re::ecs2::CustomComponent*>>::Subscription>::indexOf((uint64_t)v7, *(_QWORD *)(a1 + 16), *(char **)(a1 + 32), &v5);
  if (v7[0])
  {
    if (*(_DWORD *)(a1 + 80))
    {
      v7[0] = 0;
      v8 = v5;
      v9 = v6;
    }
    else
    {
      re::DynamicArray<re::Event<re::ecs2::SceneComponentCollection<re::ecs2::CustomComponent>,re::Slice<re::ecs2::CustomComponent*>>::Subscription>::removeStable(a1, &v5);
    }
  }
}

void std::__function::__func<_RETestingRegisterUnsupportedTestAsset::$_0,std::allocator<_RETestingRegisterUnsupportedTestAsset::$_0>,void ()(re::AssetLoader *)>::~__func()
{
  JUMPOUT(0x2276933B8);
}

_QWORD *std::__function::__func<_RETestingRegisterUnsupportedTestAsset::$_0,std::allocator<_RETestingRegisterUnsupportedTestAsset::$_0>,void ()(re::AssetLoader *)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_24ED9B680;
  return result;
}

void std::__function::__func<_RETestingRegisterUnsupportedTestAsset::$_0,std::allocator<_RETestingRegisterUnsupportedTestAsset::$_0>,void ()(re::AssetLoader *)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_24ED9B680;
}

re *std::__function::__func<_RETestingRegisterUnsupportedTestAsset::$_0,std::allocator<_RETestingRegisterUnsupportedTestAsset::$_0>,void ()(re::AssetLoader *)>::operator()(re *result, void (****a2)(_QWORD))
{
  void (***v2)(_QWORD);
  uint64_t v3;

  v2 = *a2;
  if (*a2)
  {
    v3 = re::globalAllocators(result)[2];
    (**v2)(v2);
    return (re *)(*(uint64_t (**)(uint64_t, void (***)(_QWORD)))(*(_QWORD *)v3 + 40))(v3, v2);
  }
  return result;
}

uint64_t std::__function::__func<_RETestingRegisterUnsupportedTestAsset::$_0,std::allocator<_RETestingRegisterUnsupportedTestAsset::$_0>,void ()(re::AssetLoader *)>::target(uint64_t a1, uint64_t a2)
{
    return a1 + 8;
  else
    return 0;
}

void *std::__function::__func<_RETestingRegisterUnsupportedTestAsset::$_0,std::allocator<_RETestingRegisterUnsupportedTestAsset::$_0>,void ()(re::AssetLoader *)>::target_type()
{
}

re::SharedAssetHandle *re::SharedAssetHandle::SharedAssetHandle(re::SharedAssetHandle *this, const re::AssetHandle *a2)
{
  ArcSharedObject::ArcSharedObject(this, 0);
  *(_QWORD *)this = &off_24ED2EAD0;
  re::AssetHandle::AssetHandle((re::SharedAssetHandle *)((char *)this + 24), a2);
  return this;
}

re *REEntityPredicateDestroy(re *result)
{
  re *v1;
  uint64_t v2;

  if (result)
  {
    v1 = result;
    v2 = re::globalAllocators(result)[2];
    (**(void (***)(re *))v1)(v1);
    return (re *)(*(uint64_t (**)(uint64_t, re *))(*(_QWORD *)v2 + 40))(v2, v1);
  }
  return result;
}

re *REComponentPredicateDestroy(re *result)
{
  re *v1;
  uint64_t v2;

  if (result)
  {
    v1 = result;
    v2 = re::globalAllocators(result)[2];
    (**(void (***)(re *))v1)(v1);
    return (re *)(*(uint64_t (**)(uint64_t, re *))(*(_QWORD *)v2 + 40))(v2, v1);
  }
  return result;
}

re *REEntityQueryDestroy(re *result)
{
  uint64_t v1;
  uint64_t v2;

  if (result)
  {
    v1 = (uint64_t)result;
    v2 = re::globalAllocators(result)[2];
    std::shared_ptr<re::AssetManager>::~shared_ptr[abi:nn180100](v1);
    return (re *)(*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v2 + 40))(v2, v1);
  }
  return result;
}

re *REComponentQueryDestroy(re *result)
{
  uint64_t v1;
  uint64_t v2;

  if (result)
  {
    v1 = (uint64_t)result;
    v2 = re::globalAllocators(result)[2];
    std::shared_ptr<re::AssetManager>::~shared_ptr[abi:nn180100](v1);
    return (re *)(*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v2 + 40))(v2, v1);
  }
  return result;
}

_QWORD *REQueryCreateCustomEntityPredicate(const void *a1)
{
  re *v1;
  uint64_t *v2;
  _QWORD *v3;
  void *v4;
  _QWORD *v5;
  uint64_t v6;
  _QWORD v8[3];
  _QWORD *v9;
  uint64_t v10;

  v10 = *MEMORY[0x24BDAC8D0];
  v1 = (re *)_Block_copy(a1);
  v2 = re::globalAllocators(v1);
  v3 = (_QWORD *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v2[2] + 32))(v2[2], 80, 8);
  v4 = _Block_copy(v1);
  v8[0] = &off_24ED9BE48;
  v8[1] = v4;
  v9 = v8;
  v3[2] = 0;
  v3[3] = v3 + 3;
  v3[4] = v3 + 3;
  v3[5] = 0;
  *v3 = &off_24ED9BED8;
  v3[1] = 0;
  v3[6] = &off_24ED9BE48;
  v3[9] = v3 + 6;
  v3[7] = _Block_copy(v4);
  v5 = v9;
  if (v9 == v8)
  {
    v6 = 4;
    v5 = v8;
    goto LABEL_5;
  }
  if (v9)
  {
    v6 = 5;
LABEL_5:
    (*(void (**)(void))(*v5 + 8 * v6))();
  }

  return v3;
}

_QWORD *REQueryCreateCustomComponentPredicate(const void *a1)
{
  re *v1;
  uint64_t *v2;
  _QWORD *v3;
  void *v4;
  _QWORD *v5;
  uint64_t v6;
  _QWORD v8[3];
  _QWORD *v9;
  uint64_t v10;

  v10 = *MEMORY[0x24BDAC8D0];
  v1 = (re *)_Block_copy(a1);
  v2 = re::globalAllocators(v1);
  v3 = (_QWORD *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v2[2] + 32))(v2[2], 80, 8);
  v4 = _Block_copy(v1);
  v8[0] = &off_24ED9BF38;
  v8[1] = v4;
  v9 = v8;
  v3[2] = 0;
  v3[3] = v3 + 3;
  v3[4] = v3 + 3;
  v3[5] = 0;
  *v3 = &off_24ED9BFC8;
  v3[1] = 0;
  v3[6] = &off_24ED9BF38;
  v3[9] = v3 + 6;
  v3[7] = _Block_copy(v4);
  v5 = v9;
  if (v9 == v8)
  {
    v6 = 4;
    v5 = v8;
    goto LABEL_5;
  }
  if (v9)
  {
    v6 = 5;
LABEL_5:
    (*(void (**)(void))(*v5 + 8 * v6))();
  }

  return v3;
}

_QWORD *REQueryCreateAndEntityPredicate(re *a1)
{
  uint64_t *v1;
  _QWORD *result;

  v1 = re::globalAllocators(a1);
  result = (_QWORD *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v1[2] + 32))(v1[2], 48, 8);
  result[2] = 0;
  result[3] = result + 3;
  result[4] = result + 3;
  result[5] = 0;
  *result = &off_24ED9B700;
  result[1] = 0;
  return result;
}

_QWORD *REQueryCreateAndComponentPredicate(re *a1)
{
  uint64_t *v1;
  _QWORD *result;

  v1 = re::globalAllocators(a1);
  result = (_QWORD *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v1[2] + 32))(v1[2], 48, 8);
  result[2] = 0;
  result[3] = result + 3;
  result[4] = result + 3;
  result[5] = 0;
  *result = &off_24ED9B778;
  result[1] = 0;
  return result;
}

_QWORD *REQueryCreateOrEntityPredicate(re *a1)
{
  uint64_t *v1;
  _QWORD *result;

  v1 = re::globalAllocators(a1);
  result = (_QWORD *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v1[2] + 32))(v1[2], 48, 8);
  result[2] = 0;
  result[3] = result + 3;
  result[4] = result + 3;
  result[5] = 0;
  *result = &off_24ED9B860;
  result[1] = 0;
  return result;
}

_QWORD *REQueryCreateOrComponentPredicate(re *a1)
{
  uint64_t *v1;
  _QWORD *result;

  v1 = re::globalAllocators(a1);
  result = (_QWORD *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v1[2] + 32))(v1[2], 48, 8);
  result[2] = 0;
  result[3] = result + 3;
  result[4] = result + 3;
  result[5] = 0;
  *result = &off_24ED9B9A0;
  result[1] = 0;
  return result;
}

_QWORD *REQueryCreateNotEntityPredicate(re *a1)
{
  uint64_t *v1;
  _QWORD *result;

  v1 = re::globalAllocators(a1);
  result = (_QWORD *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v1[2] + 32))(v1[2], 48, 8);
  result[2] = 0;
  result[3] = result + 3;
  result[4] = result + 3;
  result[5] = 0;
  *result = &off_24ED9BAE0;
  result[1] = 0;
  return result;
}

_QWORD *REQueryCreateNotComponentPredicate(re *a1)
{
  uint64_t *v1;
  _QWORD *result;

  v1 = re::globalAllocators(a1);
  result = (_QWORD *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v1[2] + 32))(v1[2], 48, 8);
  result[2] = 0;
  result[3] = result + 3;
  result[4] = result + 3;
  result[5] = 0;
  *result = &off_24ED9BBE0;
  result[1] = 0;
  return result;
}

_QWORD *REQueryCreateHasEntityPredicate(re *a1)
{
  uint64_t *v2;
  _QWORD *result;

  v2 = re::globalAllocators(a1);
  result = (_QWORD *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v2[2] + 32))(v2[2], 56, 8);
  result[2] = 0;
  result[3] = result + 3;
  result[4] = result + 3;
  result[5] = 0;
  *result = &off_24ED8AB78;
  result[1] = 0;
  result[6] = a1;
  return result;
}

uint64_t REQueryCreateEntityIsActivePredicate(re *a1)
{
  char v1;
  uint64_t *v2;
  uint64_t result;

  v1 = (char)a1;
  v2 = re::globalAllocators(a1);
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v2[2] + 32))(v2[2], 56, 8);
  *(_QWORD *)(result + 16) = 0;
  *(_QWORD *)(result + 24) = result + 24;
  *(_QWORD *)(result + 32) = result + 24;
  *(_QWORD *)(result + 40) = 0;
  *(_QWORD *)result = &off_24ED9BCE0;
  *(_QWORD *)(result + 8) = 0;
  *(_BYTE *)(result + 48) = v1;
  return result;
}

__n128 REQueryCreateEntityInBoundsPredicate(re *a1, __n128 a2, __n128 a3)
{
  uint64_t *v3;
  uint64_t v4;
  __n128 result;

  v3 = re::globalAllocators(a1);
  v4 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v3[2] + 32))(v3[2], 80, 16);
  *(_OWORD *)v4 = 0u;
  *(_OWORD *)(v4 + 16) = 0u;
  *(_QWORD *)(v4 + 24) = v4 + 24;
  *(_QWORD *)(v4 + 32) = v4 + 24;
  *(_QWORD *)(v4 + 40) = 0;
  *(_QWORD *)v4 = &off_24ED8AAC8;
  result = a3;
  *(__n128 *)(v4 + 48) = a2;
  *(__n128 *)(v4 + 64) = a3;
  return result;
}

_QWORD *REQueryCreateIsDescendantEntityPredicate(re *a1)
{
  uint64_t *v2;
  _QWORD *result;

  v2 = re::globalAllocators(a1);
  result = (_QWORD *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v2[2] + 32))(v2[2], 88, 8);
  result[2] = 0;
  result[3] = result + 3;
  result[4] = result + 3;
  result[5] = 0;
  *result = &off_24ED9BD58;
  result[1] = 0;
  result[6] = a1;
  result[10] = 0;
  return result;
}

_QWORD *REQueryCreateIsDescendantCallbackEntityPredicate(void *a1)
{
  re *v1;
  uint64_t *v2;
  _QWORD *v3;
  void *v4;
  _QWORD *v5;
  uint64_t v6;
  _QWORD v8[3];
  _QWORD *v9;
  uint64_t v10;

  v10 = *MEMORY[0x24BDAC8D0];
  v1 = a1;
  v2 = re::globalAllocators(v1);
  v3 = (_QWORD *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v2[2] + 32))(v2[2], 88, 8);
  v4 = _Block_copy(v1);

  v8[0] = &off_24ED9C028;
  v8[1] = v4;
  v9 = v8;
  v3[2] = 0;
  v3[3] = v3 + 3;
  v3[5] = 0;
  v3[6] = 0;
  v3[4] = v3 + 3;
  *v3 = &off_24ED9BD58;
  v3[1] = 0;
  v3[7] = &off_24ED9C028;
  v3[10] = v3 + 7;
  v3[8] = _Block_copy(v4);
  v5 = v9;
  if (v9 == v8)
  {
    v6 = 4;
    v5 = v8;
    goto LABEL_5;
  }
  if (v9)
  {
    v6 = 5;
LABEL_5:
    (*(void (**)(void))(*v5 + 8 * v6))();
  }
  return v3;
}

_QWORD *REQueryCreateIsChildEntityPredicate(re *a1)
{
  uint64_t *v2;
  _QWORD *result;

  v2 = re::globalAllocators(a1);
  result = (_QWORD *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v2[2] + 32))(v2[2], 88, 8);
  result[2] = 0;
  result[3] = result + 3;
  result[4] = result + 3;
  result[5] = 0;
  *result = &off_24ED9BDB8;
  result[1] = 0;
  result[6] = a1;
  result[10] = 0;
  return result;
}

_QWORD *REQueryCreateIsChildCallbackEntityPredicate(void *a1)
{
  re *v1;
  uint64_t *v2;
  _QWORD *v3;
  void *v4;
  _QWORD *v5;
  uint64_t v6;
  _QWORD v8[3];
  _QWORD *v9;
  uint64_t v10;

  v10 = *MEMORY[0x24BDAC8D0];
  v1 = a1;
  v2 = re::globalAllocators(v1);
  v3 = (_QWORD *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v2[2] + 32))(v2[2], 88, 8);
  v4 = _Block_copy(v1);

  v8[0] = &off_24ED9C0B8;
  v8[1] = v4;
  v9 = v8;
  v3[2] = 0;
  v3[3] = v3 + 3;
  v3[5] = 0;
  v3[6] = 0;
  v3[4] = v3 + 3;
  *v3 = &off_24ED9BDB8;
  v3[1] = 0;
  v3[7] = &off_24ED9C0B8;
  v3[10] = v3 + 7;
  v3[8] = _Block_copy(v4);
  v5 = v9;
  if (v9 == v8)
  {
    v6 = 4;
    v5 = v8;
    goto LABEL_5;
  }
  if (v9)
  {
    v6 = 5;
LABEL_5:
    (*(void (**)(void))(*v5 + 8 * v6))();
  }
  return v3;
}

void REQueryConnectEntityPredicates(uint64_t a1, uint64_t a2)
{
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  _QWORD *v6;
  unint64_t v7;
  unint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;
  uint64_t v12;
  std::__shared_weak_count *v13;

  v12 = a2;
  v4 = (std::__shared_weak_count *)operator new();
  v4->__shared_owners_ = 0;
  p_shared_owners = (unint64_t *)&v4->__shared_owners_;
  v4->__vftable = (std::__shared_weak_count_vtbl *)&off_24ED9C138;
  v4->__shared_weak_owners_ = 0;
  v4[1].__vftable = (std::__shared_weak_count_vtbl *)a2;
  v13 = v4;
  if (a2)
    v6 = (_QWORD *)(a2 + 8);
  else
    v6 = 0;
  std::shared_ptr<re::audio::REPHASESoundPrepareState>::__enable_weak_this[abi:ne180100]<re::audio::REPHASESoundPrepareState,re::audio::REPHASESoundPrepareState,void>((uint64_t)&v12, v6, a2);
  do
    v7 = __ldxr(p_shared_owners);
  while (__stxr(v7 + 1, p_shared_owners));
  std::list<std::shared_ptr<csq::v2::PredicateBase<re::ecs2::Entity,re::query::SceneEntityDataSource>>>::push_back((uint64_t *)(a1 + 24), a2, (uint64_t)v4);
  do
    v8 = __ldaxr(p_shared_owners);
  while (__stlxr(v8 - 1, p_shared_owners));
  if (!v8)
  {
    ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
    std::__shared_weak_count::__release_weak(v4);
  }
  v9 = v13;
  if (v13)
  {
    v10 = (unint64_t *)&v13->__shared_owners_;
    do
      v11 = __ldaxr(v10);
    while (__stlxr(v11 - 1, v10));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
}

void REQueryConnectComponentPredicates(uint64_t a1, uint64_t a2)
{
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  _QWORD *v6;
  unint64_t v7;
  unint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;
  uint64_t v12;
  std::__shared_weak_count *v13;

  v12 = a2;
  v4 = (std::__shared_weak_count *)operator new();
  v4->__shared_owners_ = 0;
  p_shared_owners = (unint64_t *)&v4->__shared_owners_;
  v4->__vftable = (std::__shared_weak_count_vtbl *)&off_24ED9C198;
  v4->__shared_weak_owners_ = 0;
  v4[1].__vftable = (std::__shared_weak_count_vtbl *)a2;
  v13 = v4;
  if (a2)
    v6 = (_QWORD *)(a2 + 8);
  else
    v6 = 0;
  std::shared_ptr<re::audio::REPHASESoundPrepareState>::__enable_weak_this[abi:ne180100]<re::audio::REPHASESoundPrepareState,re::audio::REPHASESoundPrepareState,void>((uint64_t)&v12, v6, a2);
  do
    v7 = __ldxr(p_shared_owners);
  while (__stxr(v7 + 1, p_shared_owners));
  std::list<std::shared_ptr<csq::v2::PredicateBase<re::ecs2::Entity,re::query::SceneEntityDataSource>>>::push_back((uint64_t *)(a1 + 24), a2, (uint64_t)v4);
  do
    v8 = __ldaxr(p_shared_owners);
  while (__stlxr(v8 - 1, p_shared_owners));
  if (!v8)
  {
    ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
    std::__shared_weak_count::__release_weak(v4);
  }
  v9 = v13;
  if (v13)
  {
    v10 = (unint64_t *)&v13->__shared_owners_;
    do
      v11 = __ldaxr(v10);
    while (__stlxr(v11 - 1, v10));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
}

uint64_t *REQueryCreateEntityQuery(uint64_t a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  _QWORD *v4;
  re *v5;
  uint64_t *v6;
  uint64_t *v7;
  uint64_t *v8;
  unint64_t v9;
  uint64_t v10;
  std::__shared_weak_count *v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  std::__shared_weak_count *v15;
  unint64_t *v16;
  unint64_t v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  std::__shared_weak_count *v21;
  unint64_t *v22;
  unint64_t v23;
  uint64_t v25;
  std::__shared_weak_count *v26;
  uint64_t v27;
  std::__shared_weak_count *v28;
  _QWORD v29[2];
  std::__shared_weak_count *v30;
  char v31;
  uint64_t v32;

  v25 = a1;
  v2 = (std::__shared_weak_count *)operator new();
  v2->__shared_owners_ = 0;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  v2->__vftable = (std::__shared_weak_count_vtbl *)&off_24ED9C1F8;
  v2->__shared_weak_owners_ = 0;
  v2[1].__vftable = (std::__shared_weak_count_vtbl *)a1;
  v26 = v2;
  if (a1)
    v4 = (_QWORD *)(a1 + 8);
  else
    v4 = 0;
  std::shared_ptr<re::audio::REPHASESoundPrepareState>::__enable_weak_this[abi:ne180100]<re::audio::REPHASESoundPrepareState,re::audio::REPHASESoundPrepareState,void>((uint64_t)&v25, v4, a1);
  v6 = re::globalAllocators(v5);
  v7 = (uint64_t *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v6[2] + 32))(v6[2], 16, 8);
  v8 = v7;
  do
    v9 = __ldxr(p_shared_owners);
  while (__stxr(v9 + 1, p_shared_owners));
  *v7 = a1;
  v7[1] = (uint64_t)v2;
  v29[0] = 0;
  v29[1] = 0;
  v30 = 0;
  csq::v2::EvaluationContext<re::ecs2::Entity,re::query::SceneEntityDataSource>::reset((uint64_t)v29);
  do
  {
    v31 = 0;
    v32 = -1;
    csq::v2::EvaluationContext<re::ecs2::Entity,re::query::SceneEntityDataSource>::reset((uint64_t)v29);
    (*(void (**)(uint64_t *__return_ptr, uint64_t, _QWORD *))(*(_QWORD *)*v8 + 32))(&v27, *v8, v29);
    v10 = v27;
    if (v27)
    {
      v11 = v28;
      v27 = 0;
      v28 = 0;
      v12 = (std::__shared_weak_count *)v8[1];
      *v8 = v10;
      v8[1] = (uint64_t)v11;
      if (v12)
      {
        v13 = (unint64_t *)&v12->__shared_owners_;
        do
          v14 = __ldaxr(v13);
        while (__stlxr(v14 - 1, v13));
        if (!v14)
        {
          ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
          std::__shared_weak_count::__release_weak(v12);
        }
      }
    }
    v15 = v28;
    if (v28)
    {
      v16 = (unint64_t *)&v28->__shared_owners_;
      do
        v17 = __ldaxr(v16);
      while (__stlxr(v17 - 1, v16));
      if (!v17)
      {
        ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
        std::__shared_weak_count::__release_weak(v15);
      }
    }
  }
  while (v31);
  v18 = v30;
  if (v30)
  {
    v19 = (unint64_t *)&v30->__shared_owners_;
    do
      v20 = __ldaxr(v19);
    while (__stlxr(v20 - 1, v19));
    if (!v20)
    {
      ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
      std::__shared_weak_count::__release_weak(v18);
    }
  }
  v21 = v26;
  if (v26)
  {
    v22 = (unint64_t *)&v26->__shared_owners_;
    do
      v23 = __ldaxr(v22);
    while (__stlxr(v23 - 1, v22));
    if (!v23)
    {
      ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
      std::__shared_weak_count::__release_weak(v21);
    }
  }
  return v8;
}

uint64_t *REQueryCreateComponentQuery(uint64_t a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  _QWORD *v4;
  re *v5;
  uint64_t *v6;
  uint64_t *v7;
  uint64_t *v8;
  unint64_t v9;
  uint64_t v10;
  std::__shared_weak_count *v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  std::__shared_weak_count *v15;
  unint64_t *v16;
  unint64_t v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  std::__shared_weak_count *v21;
  unint64_t *v22;
  unint64_t v23;
  uint64_t v25;
  std::__shared_weak_count *v26;
  uint64_t v27;
  std::__shared_weak_count *v28;
  _QWORD v29[2];
  std::__shared_weak_count *v30;
  char v31;
  uint64_t v32;

  v25 = a1;
  v2 = (std::__shared_weak_count *)operator new();
  v2->__shared_owners_ = 0;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  v2->__vftable = (std::__shared_weak_count_vtbl *)&off_24ED9C258;
  v2->__shared_weak_owners_ = 0;
  v2[1].__vftable = (std::__shared_weak_count_vtbl *)a1;
  v26 = v2;
  if (a1)
    v4 = (_QWORD *)(a1 + 8);
  else
    v4 = 0;
  std::shared_ptr<re::audio::REPHASESoundPrepareState>::__enable_weak_this[abi:ne180100]<re::audio::REPHASESoundPrepareState,re::audio::REPHASESoundPrepareState,void>((uint64_t)&v25, v4, a1);
  v6 = re::globalAllocators(v5);
  v7 = (uint64_t *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v6[2] + 32))(v6[2], 16, 8);
  v8 = v7;
  do
    v9 = __ldxr(p_shared_owners);
  while (__stxr(v9 + 1, p_shared_owners));
  *v7 = a1;
  v7[1] = (uint64_t)v2;
  v29[0] = 0;
  v29[1] = 0;
  v30 = 0;
  csq::v2::EvaluationContext<re::ecs2::Component,re::ecs2::SceneComponentCollectionBase>::reset((uint64_t)v29);
  do
  {
    v31 = 0;
    v32 = -1;
    csq::v2::EvaluationContext<re::ecs2::Component,re::ecs2::SceneComponentCollectionBase>::reset((uint64_t)v29);
    (*(void (**)(uint64_t *__return_ptr, uint64_t, _QWORD *))(*(_QWORD *)*v8 + 32))(&v27, *v8, v29);
    v10 = v27;
    if (v27)
    {
      v11 = v28;
      v27 = 0;
      v28 = 0;
      v12 = (std::__shared_weak_count *)v8[1];
      *v8 = v10;
      v8[1] = (uint64_t)v11;
      if (v12)
      {
        v13 = (unint64_t *)&v12->__shared_owners_;
        do
          v14 = __ldaxr(v13);
        while (__stlxr(v14 - 1, v13));
        if (!v14)
        {
          ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
          std::__shared_weak_count::__release_weak(v12);
        }
      }
    }
    v15 = v28;
    if (v28)
    {
      v16 = (unint64_t *)&v28->__shared_owners_;
      do
        v17 = __ldaxr(v16);
      while (__stlxr(v17 - 1, v16));
      if (!v17)
      {
        ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
        std::__shared_weak_count::__release_weak(v15);
      }
    }
  }
  while (v31);
  v18 = v30;
  if (v30)
  {
    v19 = (unint64_t *)&v30->__shared_owners_;
    do
      v20 = __ldaxr(v19);
    while (__stlxr(v20 - 1, v19));
    if (!v20)
    {
      ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
      std::__shared_weak_count::__release_weak(v18);
    }
  }
  v21 = v26;
  if (v26)
  {
    v22 = (unint64_t *)&v26->__shared_owners_;
    do
      v23 = __ldaxr(v22);
    while (__stlxr(v23 - 1, v22));
    if (!v23)
    {
      ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
      std::__shared_weak_count::__release_weak(v21);
    }
  }
  return v8;
}

void REQueryEvaluateEntityQuery(_QWORD *a1, uint64_t a2, void *a3)
{
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  std::__shared_weak_count *v16;
  unint64_t *v17;
  unint64_t v18;
  void (**v19)(re::query::SceneEntityDataSource *__hidden);
  uint64_t v20;
  void (**v21)(id, _QWORD);
  void (***v22)(re::query::SceneEntityDataSource *__hidden);
  uint64_t v23;
  std::__shared_weak_count *v24;
  char v25;
  uint64_t v26;
  _QWORD *v27[2];
  _QWORD v28[3];
  _QWORD *v29;
  uint64_t v30;

  v30 = *MEMORY[0x24BDAC8D0];
  v20 = a2;
  v21 = a3;
  v19 = &off_24ED9BE18;
  v4 = (std::__shared_weak_count *)a1[1];
  v27[0] = *(_QWORD **)a1;
  v27[1] = &v4->__vftable;
  if (v4)
  {
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    do
      v6 = __ldxr(p_shared_owners);
    while (__stxr(v6 + 1, p_shared_owners));
    csq::v2::Query<re::ecs2::Entity,re::query::SceneEntityDataSource>::notifyPerformQuery(v27);
    do
      v7 = __ldaxr(p_shared_owners);
    while (__stlxr(v7 - 1, p_shared_owners));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
  else
  {
    csq::v2::Query<re::ecs2::Entity,re::query::SceneEntityDataSource>::notifyPerformQuery(v27);
  }
  v23 = 0;
  v24 = 0;
  v22 = &v19;
  csq::v2::EvaluationContext<re::ecs2::Entity,re::query::SceneEntityDataSource>::reset((uint64_t)&v22);
  v25 = 0;
  v26 = -1;
  (*(void (**)(_QWORD, void (****)(re::query::SceneEntityDataSource *__hidden)))(*(_QWORD *)*a1 + 40))(*a1, &v22);
  if (*(_QWORD *)(v23 + 32))
  {
    v8 = *(_QWORD *)(*(_QWORD *)(v23 + 16) + 16);
    v9 = *a1;
    v28[0] = &off_24ED9C2B8;
    v28[1] = &v21;
    v29 = v28;
    (*(void (**)(uint64_t, void (****)(re::query::SceneEntityDataSource *__hidden), uint64_t, _QWORD *))(*(_QWORD *)v8 + 24))(v8, &v22, v9, v28);
    v10 = v29;
    if (v29 == v28)
    {
      v11 = 4;
      v10 = v28;
      goto LABEL_21;
    }
    if (v29)
    {
      v11 = 5;
LABEL_21:
      (*(void (**)(void))(*v10 + 8 * v11))();
    }
  }
  else
  {
    v12 = *(_QWORD *)(v20 + 128);
    if (v12)
    {
      v13 = *(_QWORD **)(v20 + 144);
      v14 = 8 * v12;
      do
      {
        v15 = *v13;
        if (*v13
          && (*(unsigned int (**)(_QWORD, _QWORD, void (****)(re::query::SceneEntityDataSource *__hidden)))(*(_QWORD *)*a1 + 16))(*a1, *v13, &v22))
        {
          v21[2](v21, v15);
        }
        ++v13;
        v14 -= 8;
      }
      while (v14);
    }
  }
  v16 = v24;
  if (v24)
  {
    v17 = (unint64_t *)&v24->__shared_owners_;
    do
      v18 = __ldaxr(v17);
    while (__stlxr(v18 - 1, v17));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
      std::__shared_weak_count::__release_weak(v16);
    }
  }

}

void REQueryEvaluateEntityQueryWithRootEntity(_QWORD *a1, uint64_t a2, void *a3, uint64_t a4)
{
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  std::__shared_weak_count *v19;
  unint64_t *v20;
  unint64_t v21;
  void (**v22)(re::query::SceneEntityDataSource *__hidden);
  uint64_t v23;
  uint64_t v24;
  void (**v25)(id, _QWORD);
  void (***v26)(re::query::SceneEntityDataSource *__hidden);
  uint64_t v27;
  std::__shared_weak_count *v28;
  char v29;
  uint64_t v30;
  _QWORD *v31[2];
  _QWORD v32[3];
  _QWORD *v33;
  uint64_t v34;

  v34 = *MEMORY[0x24BDAC8D0];
  v24 = a4;
  v25 = a3;
  v22 = &off_24ED9BE18;
  v23 = a2;
  v6 = (std::__shared_weak_count *)a1[1];
  v31[0] = *(_QWORD **)a1;
  v31[1] = &v6->__vftable;
  if (v6)
  {
    p_shared_owners = (unint64_t *)&v6->__shared_owners_;
    do
      v8 = __ldxr(p_shared_owners);
    while (__stxr(v8 + 1, p_shared_owners));
    csq::v2::Query<re::ecs2::Entity,re::query::SceneEntityDataSource>::notifyPerformQuery(v31);
    do
      v9 = __ldaxr(p_shared_owners);
    while (__stlxr(v9 - 1, p_shared_owners));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  else
  {
    csq::v2::Query<re::ecs2::Entity,re::query::SceneEntityDataSource>::notifyPerformQuery(v31);
  }
  v27 = 0;
  v28 = 0;
  v26 = &v22;
  csq::v2::EvaluationContext<re::ecs2::Entity,re::query::SceneEntityDataSource>::reset((uint64_t)&v26);
  v29 = 0;
  v30 = -1;
  (*(void (**)(_QWORD, void (****)(re::query::SceneEntityDataSource *__hidden)))(*(_QWORD *)*a1 + 40))(*a1, &v26);
  if (*(_QWORD *)(v27 + 32))
  {
    v10 = *(_QWORD *)(*(_QWORD *)(v27 + 16) + 16);
    v11 = *a1;
    v32[0] = &off_24ED9C338;
    v32[1] = &v24;
    v32[2] = &v25;
    v33 = v32;
    (*(void (**)(uint64_t, void (****)(re::query::SceneEntityDataSource *__hidden), uint64_t, _QWORD *))(*(_QWORD *)v10 + 24))(v10, &v26, v11, v32);
    v12 = v33;
    if (v33 == v32)
    {
      v13 = 4;
      v12 = v32;
      goto LABEL_28;
    }
    if (v33)
    {
      v13 = 5;
LABEL_28:
      (*(void (**)(_QWORD *))(*v12 + 8 * v13))(v12);
    }
  }
  else
  {
    v14 = *(_QWORD *)(v23 + 128);
    if (v14)
    {
      v15 = *(_QWORD **)(v23 + 144);
      v16 = &v15[v14];
      do
      {
        v17 = *v15;
        if (*v15
          && (*(unsigned int (**)(_QWORD, _QWORD, void (****)(re::query::SceneEntityDataSource *__hidden)))(*(_QWORD *)*a1 + 16))(*a1, *v15, &v26)&& (*(_BYTE *)(v17 + 289) & 4) == 0)
        {
          if (v24)
          {
            v18 = v17;
            while (v18 != v24)
            {
              v18 = *(_QWORD *)(v18 + 24);
              if (!v18 || (*(_BYTE *)(v18 + 288) & 0x80) != 0)
                goto LABEL_25;
            }
          }
          v25[2](v25, v17);
        }
LABEL_25:
        ++v15;
      }
      while (v15 != v16);
    }
  }
  v19 = v28;
  if (v28)
  {
    v20 = (unint64_t *)&v28->__shared_owners_;
    do
      v21 = __ldaxr(v20);
    while (__stlxr(v21 - 1, v20));
    if (!v21)
    {
      ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
      std::__shared_weak_count::__release_weak(v19);
    }
  }

}

void REQueryEvaluateComponentQuery(_QWORD *a1, _QWORD *a2, uint64_t a3, void *a4)
{
  id v7;
  unint64_t v8;
  uint64_t v9;
  void *v10;
  id v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v23;
  std::__shared_weak_count *v24;
  unint64_t *v25;
  unint64_t v26;
  id v27;
  uint64_t v28;
  uint64_t v29;
  std::__shared_weak_count *v30;
  char v31;
  uint64_t v32;
  _QWORD *v33[2];
  _QWORD v34[3];
  _QWORD *v35;
  uint64_t v36;

  v36 = *MEMORY[0x24BDAC8D0];
  v7 = a4;
  v27 = v7;
  if (!a3)
    goto LABEL_31;
  v8 = *(unsigned __int16 *)(a3 + 16);
  if (a2[28] <= v8)
    goto LABEL_31;
  v9 = *(_QWORD *)(a2[30] + 8 * v8);
  if (!v9)
    goto LABEL_31;
  v10 = a2 + 1;
  v11 = v10;
  v12 = (std::__shared_weak_count *)a1[1];
  v33[0] = *(_QWORD **)a1;
  v33[1] = &v12->__vftable;
  if (v12)
  {
    p_shared_owners = (unint64_t *)&v12->__shared_owners_;
    do
      v14 = __ldxr(p_shared_owners);
    while (__stxr(v14 + 1, p_shared_owners));
    csq::v2::Query<re::ecs2::Entity,re::query::SceneEntityDataSource>::notifyPerformQuery(v33);
    do
      v15 = __ldaxr(p_shared_owners);
    while (__stlxr(v15 - 1, p_shared_owners));
    if (!v15)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
  else
  {
    csq::v2::Query<re::ecs2::Entity,re::query::SceneEntityDataSource>::notifyPerformQuery(v33);
  }
  v29 = 0;
  v30 = 0;
  v28 = v9;
  csq::v2::EvaluationContext<re::ecs2::Component,re::ecs2::SceneComponentCollectionBase>::reset((uint64_t)&v28);
  v31 = 0;
  v32 = -1;
  (*(void (**)(_QWORD, uint64_t *))(*(_QWORD *)*a1 + 40))(*a1, &v28);
  if (!*(_QWORD *)(v29 + 32))
  {
    v20 = *(_QWORD *)(v9 + 24);
    if (v20)
    {
      v21 = *(_QWORD **)(v9 + 40);
      v22 = 8 * v20;
      do
      {
        v23 = *v21;
        if (*v21
          && (*(unsigned int (**)(_QWORD, _QWORD, uint64_t *))(*(_QWORD *)*a1 + 16))(*a1, *v21, &v28))
        {
          (*((void (**)(id, _QWORD))v27 + 2))(v27, *(_QWORD *)(v23 + 16));
        }
        ++v21;
        v22 -= 8;
      }
      while (v22);
    }
    goto LABEL_25;
  }
  v16 = *(_QWORD *)(*(_QWORD *)(v29 + 16) + 16);
  v17 = *a1;
  v34[0] = &off_24ED9C3B8;
  v34[1] = &v27;
  v35 = v34;
  (*(void (**)(uint64_t, uint64_t *, uint64_t, _QWORD *))(*(_QWORD *)v16 + 24))(v16, &v28, v17, v34);
  v18 = v35;
  if (v35 == v34)
  {
    v19 = 4;
    v18 = v34;
  }
  else
  {
    if (!v35)
      goto LABEL_25;
    v19 = 5;
  }
  (*(void (**)(void))(*v18 + 8 * v19))();
LABEL_25:
  v24 = v30;
  if (v30)
  {
    v25 = (unint64_t *)&v30->__shared_owners_;
    do
      v26 = __ldaxr(v25);
    while (__stlxr(v26 - 1, v25));
    if (!v26)
    {
      ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
      std::__shared_weak_count::__release_weak(v24);
    }
  }

  v7 = v27;
LABEL_31:

}

void csq::v2::AndPredicate<re::ecs2::Entity,re::query::SceneEntityDataSource>::~AndPredicate(_QWORD *a1)
{
  csq::graph::DirectedGraphNode<csq::v2::PredicateBase<re::ecs2::Entity,re::query::SceneEntityDataSource>>::~DirectedGraphNode(a1);
  JUMPOUT(0x2276933B8);
}

uint64_t csq::v2::AndPredicate<re::ecs2::Entity,re::query::SceneEntityDataSource>::evaluate(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  int v11;
  char v12;
  unint64_t v13;

  v3 = (_QWORD *)(a1 + 24);
  v4 = *(_QWORD **)(a1 + 32);
  if (v4 == (_QWORD *)(a1 + 24))
    return 1;
  while (1)
  {
    v7 = v4[2];
    v8 = (std::__shared_weak_count *)v4[3];
    if (v8)
      break;
    if (((*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v7 + 16))(v7, a2, a3) & 1) == 0)
      return 0;
LABEL_13:
    v4 = (_QWORD *)v4[1];
    if (v4 == v3)
      return 1;
  }
  p_shared_owners = (unint64_t *)&v8->__shared_owners_;
  do
    v10 = __ldxr(p_shared_owners);
  while (__stxr(v10 + 1, p_shared_owners));
  v11 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v7 + 16))(v7, a2, a3);
  v12 = v11;
  do
    v13 = __ldaxr(p_shared_owners);
  while (__stlxr(v13 - 1, p_shared_owners));
  if (v13)
  {
    if (!v11)
      return 0;
    goto LABEL_13;
  }
  ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
  std::__shared_weak_count::__release_weak(v8);
  if ((v12 & 1) != 0)
    goto LABEL_13;
  return 0;
}

void csq::v2::AndPredicate<re::ecs2::Entity,re::query::SceneEntityDataSource>::postCreateOptimize(uint64_t a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  _QWORD *v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  std::__shared_weak_count *v9;
  std::__shared_weak_count *v10;
  uint64_t v11;
  unint64_t *v12;
  unint64_t v13;
  uint64_t *i;
  const void *v15;
  _QWORD **v16;
  _QWORD **v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  uint64_t *v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t *v26;
  unint64_t v27;
  unint64_t *v28;
  unint64_t v29;
  std::__shared_weak_count *v30;
  unint64_t *v31;
  unint64_t v32;
  std::__shared_weak_count *v33;
  unint64_t *v34;
  unint64_t v35;
  std::__shared_weak_count *v36;
  _QWORD *v37;
  uint64_t v38;
  std::__shared_weak_count *v39;
  uint64_t v40;
  std::__shared_weak_count *v41;
  uint64_t v42;
  std::__shared_weak_count *v43;

  v5 = (_QWORD *)(a1 + 8);
  std::shared_ptr<csq::v2::PredicateBase<re::ecs2::Entity,re::query::SceneEntityDataSource>>::shared_ptr[abi:nn180100]<csq::v2::PredicateBase<re::ecs2::Entity,re::query::SceneEntityDataSource>,void>(&v40, (_QWORD *)(a1 + 8));
  csq::v2::applyDominantAndIdentityLaws<csq::v2::PredicateBase<re::ecs2::Entity,re::query::SceneEntityDataSource>>(&v42, &v40, 0, a2);
  v6 = v41;
  if (v41)
  {
    p_shared_owners = (unint64_t *)&v41->__shared_owners_;
    do
      v8 = __ldaxr(p_shared_owners);
    while (__stlxr(v8 - 1, p_shared_owners));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  if (v42)
  {
    v9 = v43;
    *a3 = v42;
    a3[1] = v9;
  }
  else
  {
    v37 = a3;
    std::shared_ptr<csq::v2::PredicateBase<re::ecs2::Entity,re::query::SceneEntityDataSource>>::shared_ptr[abi:nn180100]<csq::v2::PredicateBase<re::ecs2::Entity,re::query::SceneEntityDataSource>,void>(&v38, v5);
    v11 = v38;
    v10 = v39;
    if (v39)
    {
      v12 = (unint64_t *)&v39->__shared_owners_;
      do
        v13 = __ldxr(v12);
      while (__stxr(v13 + 1, v12));
    }
    v36 = v10;
    for (i = *(uint64_t **)(v11 + 32); i != (uint64_t *)(v11 + 24); i = (uint64_t *)i[1])
    {
      v15 = (const void *)i[2];
      if (v15)
      {
        if (v16)
        {
          v17 = v16;
          v18 = (std::__shared_weak_count *)i[3];
          if (v18)
          {
            v19 = (unint64_t *)&v18->__shared_owners_;
            do
              v20 = __ldxr(v19);
            while (__stxr(v20 + 1, v19));
          }
          if (v16[5])
          {
            v21 = std::list<std::shared_ptr<csq::v2::PredicateBase<re::ecs2::Entity,re::query::SceneEntityDataSource>>>::__insert_with_sentinel[abi:nn180100]<std::__list_iterator<std::shared_ptr<csq::v2::PredicateBase<re::ecs2::Entity,re::query::SceneEntityDataSource>>,void *>,std::__list_iterator<std::shared_ptr<csq::v2::PredicateBase<re::ecs2::Entity,re::query::SceneEntityDataSource>>,void *>>(v11 + 24, i, v16[4], v16 + 3);
            v22 = *i;
            *(_QWORD *)(v22 + 8) = i[1];
            *(_QWORD *)i[1] = v22;
            --*(_QWORD *)(v11 + 40);
            std::shared_ptr<re::AssetManager>::~shared_ptr[abi:nn180100]((uint64_t)(i + 2));
            operator delete(i);
            v23 = (unint64_t)v17[5];
            i = v21;
            v24 = v23 - 1;
            if ((uint64_t)(v23 - 1) < 0)
            {
              do
                i = (uint64_t *)*i;
              while (!__CFADD__(v24++, 1));
            }
            else if (v23 != 1)
            {
              do
              {
                i = (uint64_t *)i[1];
                --v23;
              }
              while (v23 > 1);
            }
            *(_BYTE *)(a2 + 24) = 1;
          }
          if (v18)
          {
            v26 = (unint64_t *)&v18->__shared_owners_;
            do
              v27 = __ldaxr(v26);
            while (__stlxr(v27 - 1, v26));
            if (!v27)
            {
              ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
              std::__shared_weak_count::__release_weak(v18);
            }
          }
        }
      }
    }
    if (v36)
    {
      v28 = (unint64_t *)&v36->__shared_owners_;
      do
        v29 = __ldaxr(v28);
      while (__stlxr(v29 - 1, v28));
      if (!v29)
      {
        ((void (*)(std::__shared_weak_count *))v36->__on_zero_shared)(v36);
        std::__shared_weak_count::__release_weak(v36);
      }
    }
    v30 = v39;
    if (v39)
    {
      v31 = (unint64_t *)&v39->__shared_owners_;
      do
        v32 = __ldaxr(v31);
      while (__stlxr(v32 - 1, v31));
      if (!v32)
      {
        ((void (*)(std::__shared_weak_count *))v30->__on_zero_shared)(v30);
        std::__shared_weak_count::__release_weak(v30);
      }
    }
    *v37 = 0;
    v37[1] = 0;
    v33 = v43;
    if (v43)
    {
      v34 = (unint64_t *)&v43->__shared_owners_;
      do
        v35 = __ldaxr(v34);
      while (__stlxr(v35 - 1, v34));
      if (!v35)
      {
        ((void (*)(std::__shared_weak_count *))v33->__on_zero_shared)(v33);
        std::__shared_weak_count::__release_weak(v33);
      }
    }
  }
}

void csq::v2::AndPredicate<re::ecs2::Entity,re::query::SceneEntityDataSource>::preEvaluateOptimize(_QWORD *a1, uint64_t a2)
{
  uint64_t **v4;
  uint64_t v5;
  char v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _OWORD *v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  _QWORD *v25;
  void *v26;
  __int128 v27;
  void *__p[2];
  __int128 v29;
  int v30;
  uint64_t v31;
  uint64_t *v32;
  uint64_t v33;

  v31 = (uint64_t)&v31;
  v32 = &v31;
  v33 = 0;
  *(_OWORD *)__p = 0u;
  v29 = 0u;
  v30 = 1065353216;
  v4 = (uint64_t **)(a1 + 3);
  v5 = a1[4];
  if ((_QWORD *)v5 == a1 + 3)
  {
    v6 = 0;
    v7 = -1;
  }
  else
  {
    v6 = 0;
    v7 = -1;
    do
    {
      (*(void (**)(_QWORD, uint64_t))(**(_QWORD **)(v5 + 16) + 40))(*(_QWORD *)(v5 + 16), a2);
      if (*(_BYTE *)(*(_QWORD *)(a2 + 8) + 64))
      {
        v8 = *(_QWORD *)(a2 + 32);
      }
      else
      {
        v8 = -1;
        *(_QWORD *)(a2 + 32) = -1;
      }
      std::__hash_table<std::__hash_value_type<std::shared_ptr<csq::v2::PredicateBase<re::ecs2::Entity,re::query::SceneEntityDataSource>>,unsigned long>,std::__unordered_map_hasher<std::shared_ptr<csq::v2::PredicateBase<re::ecs2::Entity,re::query::SceneEntityDataSource>>,std::__hash_value_type<std::shared_ptr<csq::v2::PredicateBase<re::ecs2::Entity,re::query::SceneEntityDataSource>>,unsigned long>,std::hash<std::shared_ptr<csq::v2::PredicateBase<re::ecs2::Entity,re::query::SceneEntityDataSource>>>,std::equal_to<std::shared_ptr<csq::v2::PredicateBase<re::ecs2::Entity,re::query::SceneEntityDataSource>>>,true>,std::__unordered_map_equal<std::shared_ptr<csq::v2::PredicateBase<re::ecs2::Entity,re::query::SceneEntityDataSource>>,std::__hash_value_type<std::shared_ptr<csq::v2::PredicateBase<re::ecs2::Entity,re::query::SceneEntityDataSource>>,unsigned long>,std::equal_to<std::shared_ptr<csq::v2::PredicateBase<re::ecs2::Entity,re::query::SceneEntityDataSource>>>,std::hash<std::shared_ptr<csq::v2::PredicateBase<re::ecs2::Entity,re::query::SceneEntityDataSource>>>,true>,std::allocator<std::__hash_value_type<std::shared_ptr<csq::v2::PredicateBase<re::ecs2::Entity,re::query::SceneEntityDataSource>>,unsigned long>>>::__emplace_unique_key_args<std::shared_ptr<csq::v2::PredicateBase<re::ecs2::Entity,re::query::SceneEntityDataSource>>,std::piecewise_construct_t const&,std::tuple<std::shared_ptr<csq::v2::PredicateBase<re::ecs2::Entity,re::query::SceneEntityDataSource>> const&>,std::tuple<>>((uint64_t *)__p, *(_QWORD *)(v5 + 16), (_QWORD *)(v5 + 16))[4] = v8;
      v9 = *(_QWORD *)(a2 + 8);
      if (*(_BYTE *)(v9 + 64))
      {
        v10 = *(_QWORD *)(a2 + 32);
        if (v10 < v7)
        {
          std::__list_imp<std::shared_ptr<csq::v2::PredicateBase<re::ecs2::Entity,re::query::SceneEntityDataSource>>>::clear(&v31);
          v11 = *(_QWORD *)(v9 + 32);
          if (v11)
          {
            v13 = *(_QWORD *)(v9 + 16);
            v12 = *(uint64_t **)(v9 + 24);
            v14 = *v12;
            *(_QWORD *)(v14 + 8) = *(_QWORD *)(v13 + 8);
            **(_QWORD **)(v13 + 8) = v14;
            v15 = v31;
            *(_QWORD *)(v31 + 8) = v12;
            *v12 = v15;
            *(_QWORD *)(v13 + 8) = &v31;
            v31 = v13;
            v33 += v11;
            *(_QWORD *)(v9 + 32) = 0;
          }
          v6 = 3;
          v7 = v10;
        }
      }
      v5 = *(_QWORD *)(v5 + 8);
    }
    while ((uint64_t **)v5 != v4);
    if (v33)
    {
      std::shared_ptr<csq::v2::PredicateBase<re::ecs2::Entity,re::query::SceneEntityDataSource>>::shared_ptr[abi:nn180100]<csq::v2::PredicateBase<re::ecs2::Entity,re::query::SceneEntityDataSource>,void>(&v27, a1 + 1);
      v16 = operator new(0x20uLL);
      v16[1] = v27;
      v17 = v32;
      *(_QWORD *)v16 = &v31;
      *((_QWORD *)v16 + 1) = v17;
      *v17 = (uint64_t)v16;
      v32 = (uint64_t *)v16;
      ++v33;
    }
  }
  v18 = *(_QWORD *)(a2 + 8);
  std::__list_imp<std::shared_ptr<csq::v2::PredicateBase<re::ecs2::Entity,re::query::SceneEntityDataSource>>>::clear((uint64_t *)(v18 + 16));
  v19 = v33;
  if (v33)
  {
    v21 = v31;
    v20 = v32;
    v22 = *v32;
    *(_QWORD *)(v22 + 8) = *(_QWORD *)(v31 + 8);
    **(_QWORD **)(v21 + 8) = v22;
    v23 = *(_QWORD *)(v18 + 16);
    *(_QWORD *)(v23 + 8) = v20;
    *v20 = v23;
    *(_QWORD *)(v18 + 16) = v21;
    *(_QWORD *)(v21 + 8) = v18 + 16;
    *(_QWORD *)(v18 + 32) += v19;
    v33 = 0;
  }
  *(_QWORD *)(a2 + 32) = v7;
  *(_BYTE *)(*(_QWORD *)(a2 + 8) + 64) = v6;
  *(_QWORD *)&v27 = __p;
  std::list<std::shared_ptr<csq::v2::PredicateBase<re::ecs2::Entity,re::query::SceneEntityDataSource>>>::__sort<csq::v2::AndPredicate<re::ecs2::Entity,re::query::SceneEntityDataSource>::preEvaluateOptimize(csq::v2::OptimizationContext<re::ecs2::Entity,re::query::SceneEntityDataSource> &)::{lambda(std::shared_ptr<csq::v2::PredicateBase<re::ecs2::Entity,re::query::SceneEntityDataSource>>,std::shared_ptr<csq::v2::PredicateBase<re::ecs2::Entity,re::query::SceneEntityDataSource>>)#1}>(a1[4], v4, a1[5], (uint64_t **)&v27);
  *(_BYTE *)(a2 + 24) = 1;
  v24 = (_QWORD *)v29;
  if ((_QWORD)v29)
  {
    do
    {
      v25 = (_QWORD *)*v24;
      std::shared_ptr<re::AssetManager>::~shared_ptr[abi:nn180100]((uint64_t)(v24 + 2));
      operator delete(v24);
      v24 = v25;
    }
    while (v25);
  }
  v26 = __p[0];
  __p[0] = 0;
  if (v26)
    operator delete(v26);
  std::__list_imp<std::shared_ptr<csq::v2::PredicateBase<re::ecs2::Entity,re::query::SceneEntityDataSource>>>::clear(&v31);
}

void csq::v2::applyDominantAndIdentityLaws<csq::v2::PredicateBase<re::ecs2::Entity,re::query::SceneEntityDataSource>>(_QWORD *a1, uint64_t *a2, int a3, uint64_t a4)
{
  uint64_t v5;
  _QWORD *v6;
  int v10;
  uint64_t *v11;
  uint64_t v12;
  const void **v13;
  _BYTE *v14;
  std::__shared_weak_count *v15;
  unint64_t *p_shared_owners;
  unint64_t v17;
  uint64_t *v18;
  uint64_t v19;
  unint64_t *v20;
  unint64_t v21;
  unint64_t *v22;
  unint64_t v23;
  char v24;
  std::__shared_weak_count *v25;
  unint64_t *v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t *v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  std::__shared_weak_count *v36;

  v5 = *a2;
  v6 = *(_QWORD **)(*a2 + 32);
  if (v6 == (_QWORD *)(*a2 + 24))
  {
LABEL_38:
    *a1 = 0;
    a1[1] = 0;
  }
  else
  {
    LOBYTE(v10) = 0;
    v11 = 0;
    while (1)
    {
      if ((v10 & 1) != 0)
      {
        v12 = *v11;
        *(_QWORD *)(v12 + 8) = v11[1];
        *(_QWORD *)v11[1] = v12;
        --*(_QWORD *)(v5 + 40);
        std::shared_ptr<re::AssetManager>::~shared_ptr[abi:nn180100]((uint64_t)(v11 + 2));
        operator delete(v11);
        *(_BYTE *)(a4 + 24) = 1;
      }
      v13 = (const void **)(v6 + 2);
      (*(void (**)(uint64_t *__return_ptr, _QWORD, uint64_t))(*(_QWORD *)v6[2] + 32))(&v35, v6[2], a4);
      if (v35)
        std::shared_ptr<re::audio::REPHASEEntity>::operator=[abi:ne180100](v6 + 2, v35, (uint64_t)v36);
      if (*v13
      {
        v15 = (std::__shared_weak_count *)v6[3];
        if (v15)
        {
          p_shared_owners = (unint64_t *)&v15->__shared_owners_;
          do
            v17 = __ldxr(p_shared_owners);
          while (__stxr(v17 + 1, p_shared_owners));
        }
        v10 = (v14[48] != 0) ^ a3;
        v18 = v6;
        if ((v10 & 1) == 0)
        {
          *(_BYTE *)(a4 + 24) = 1;
          v19 = v6[3];
          *a1 = v6[2];
          a1[1] = v19;
          if (v19)
          {
            v20 = (unint64_t *)(v19 + 8);
            do
              v21 = __ldxr(v20);
            while (__stxr(v21 + 1, v20));
          }
          v18 = v11;
        }
        if (v15)
        {
          v22 = (unint64_t *)&v15->__shared_owners_;
          do
            v23 = __ldaxr(v22);
          while (__stlxr(v23 - 1, v22));
          if (!v23)
          {
            ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
            std::__shared_weak_count::__release_weak(v15);
          }
        }
        v24 = v10;
        v11 = v18;
      }
      else
      {
        v10 = 0;
        v24 = 1;
      }
      v25 = v36;
      if (v36)
      {
        v26 = (unint64_t *)&v36->__shared_owners_;
        do
          v27 = __ldaxr(v26);
        while (__stlxr(v27 - 1, v26));
        if (!v27)
        {
          ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
          std::__shared_weak_count::__release_weak(v25);
        }
      }
      if ((v24 & 1) == 0)
        break;
      v6 = (_QWORD *)v6[1];
      v5 = *a2;
      if (v6 == (_QWORD *)(*a2 + 24))
      {
        if (!v10)
          goto LABEL_38;
        v28 = *(_QWORD *)(v5 + 40) - 1;
        if (*(_QWORD *)(v5 + 40) != 1)
        {
          v34 = *v11;
          *(_QWORD *)(v34 + 8) = v11[1];
          *(_QWORD *)v11[1] = v34;
          *(_QWORD *)(v5 + 40) = v28;
          std::shared_ptr<re::AssetManager>::~shared_ptr[abi:nn180100]((uint64_t)(v11 + 2));
          operator delete(v11);
          *(_BYTE *)(a4 + 24) = 1;
          goto LABEL_38;
        }
        v29 = *(_QWORD *)(v5 + 32);
        v31 = *(_QWORD *)(v29 + 16);
        v30 = *(_QWORD *)(v29 + 24);
        *a1 = v31;
        a1[1] = v30;
        if (v30)
        {
          v32 = (unint64_t *)(v30 + 8);
          do
            v33 = __ldxr(v32);
          while (__stxr(v33 + 1, v32));
        }
        return;
      }
    }
  }
}

uint64_t *std::list<std::shared_ptr<csq::v2::PredicateBase<re::ecs2::Entity,re::query::SceneEntityDataSource>>>::__insert_with_sentinel[abi:nn180100]<std::__list_iterator<std::shared_ptr<csq::v2::PredicateBase<re::ecs2::Entity,re::query::SceneEntityDataSource>>,void *>,std::__list_iterator<std::shared_ptr<csq::v2::PredicateBase<re::ecs2::Entity,re::query::SceneEntityDataSource>>,void *>>(uint64_t a1, uint64_t *a2, _QWORD *a3, _QWORD *a4)
{
  _QWORD *v8;
  _QWORD *v9;
  uint64_t v10;
  unint64_t *v11;
  unint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  unint64_t *v17;
  unint64_t v18;
  uint64_t v19;

  if (a3 != a4)
  {
    v8 = operator new(0x20uLL);
    v9 = v8;
    *v8 = 0;
    v8[1] = 0;
    v10 = a3[3];
    v8[2] = a3[2];
    v8[3] = v10;
    if (v10)
    {
      v11 = (unint64_t *)(v10 + 8);
      do
        v12 = __ldxr(v11);
      while (__stxr(v12 + 1, v11));
    }
    v13 = (_QWORD *)a3[1];
    v14 = 1;
    if (v13 != a4)
    {
      v15 = v8;
      do
      {
        v8 = operator new(0x20uLL);
        *v8 = v15;
        v8[1] = 0;
        v16 = v13[3];
        v8[2] = v13[2];
        v8[3] = v16;
        if (v16)
        {
          v17 = (unint64_t *)(v16 + 8);
          do
            v18 = __ldxr(v17);
          while (__stxr(v18 + 1, v17));
        }
        v15[1] = v8;
        ++v14;
        v13 = (_QWORD *)v13[1];
        v15 = v8;
      }
      while (v13 != a4);
    }
    v19 = *a2;
    *(_QWORD *)(v19 + 8) = v9;
    *v9 = v19;
    *a2 = (uint64_t)v8;
    v8[1] = a2;
    *(_QWORD *)(a1 + 16) += v14;
    return v9;
  }
  return a2;
}

_QWORD *std::__hash_table<std::__hash_value_type<std::shared_ptr<csq::v2::PredicateBase<re::ecs2::Entity,re::query::SceneEntityDataSource>>,unsigned long>,std::__unordered_map_hasher<std::shared_ptr<csq::v2::PredicateBase<re::ecs2::Entity,re::query::SceneEntityDataSource>>,std::__hash_value_type<std::shared_ptr<csq::v2::PredicateBase<re::ecs2::Entity,re::query::SceneEntityDataSource>>,unsigned long>,std::hash<std::shared_ptr<csq::v2::PredicateBase<re::ecs2::Entity,re::query::SceneEntityDataSource>>>,std::equal_to<std::shared_ptr<csq::v2::PredicateBase<re::ecs2::Entity,re::query::SceneEntityDataSource>>>,true>,std::__unordered_map_equal<std::shared_ptr<csq::v2::PredicateBase<re::ecs2::Entity,re::query::SceneEntityDataSource>>,std::__hash_value_type<std::shared_ptr<csq::v2::PredicateBase<re::ecs2::Entity,re::query::SceneEntityDataSource>>,unsigned long>,std::equal_to<std::shared_ptr<csq::v2::PredicateBase<re::ecs2::Entity,re::query::SceneEntityDataSource>>>,std::hash<std::shared_ptr<csq::v2::PredicateBase<re::ecs2::Entity,re::query::SceneEntityDataSource>>>,true>,std::allocator<std::__hash_value_type<std::shared_ptr<csq::v2::PredicateBase<re::ecs2::Entity,re::query::SceneEntityDataSource>>,unsigned long>>>::__emplace_unique_key_args<std::shared_ptr<csq::v2::PredicateBase<re::ecs2::Entity,re::query::SceneEntityDataSource>>,std::piecewise_construct_t const&,std::tuple<std::shared_ptr<csq::v2::PredicateBase<re::ecs2::Entity,re::query::SceneEntityDataSource>> const&>,std::tuple<>>(uint64_t *a1, unint64_t a2, _QWORD *a3)
{
  unint64_t v3;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint8x8_t v10;
  _QWORD **v11;
  _QWORD *i;
  unint64_t v13;
  _QWORD *v14;
  _QWORD *v15;
  uint64_t v16;
  unint64_t *v17;
  unint64_t v18;
  float v19;
  float v20;
  _BOOL8 v21;
  unint64_t v22;
  unint64_t v23;
  int8x8_t prime;
  void *v25;
  void *v26;
  uint64_t v27;
  _QWORD *v28;
  unint64_t v29;
  uint8x8_t v30;
  unint64_t v31;
  uint8x8_t v32;
  uint64_t v33;
  _QWORD *v34;
  unint64_t v35;
  uint64_t v36;
  _QWORD *v37;
  unint64_t v38;
  void *v40;

  v6 = 0x9DDFEA08EB382D69 * (((8 * a2) + 8) ^ HIDWORD(a2));
  v7 = 0x9DDFEA08EB382D69 * (HIDWORD(a2) ^ (v6 >> 47) ^ v6);
  v8 = 0x9DDFEA08EB382D69 * (v7 ^ (v7 >> 47));
  v9 = a1[1];
  if (v9)
  {
    v10 = (uint8x8_t)vcnt_s8((int8x8_t)v9);
    v10.i16[0] = vaddlv_u8(v10);
    if (v10.u32[0] > 1uLL)
    {
      v3 = 0x9DDFEA08EB382D69 * (v7 ^ (v7 >> 47));
      if (v8 >= v9)
        v3 = v8 % v9;
    }
    else
    {
      v3 = (v9 - 1) & v8;
    }
    v11 = *(_QWORD ***)(*a1 + 8 * v3);
    if (v11)
    {
      for (i = *v11; i; i = (_QWORD *)*i)
      {
        v13 = i[1];
        if (v13 == v8)
        {
          if (i[2] == a2)
            return i;
        }
        else
        {
          if (v10.u32[0] > 1uLL)
          {
            if (v13 >= v9)
              v13 %= v9;
          }
          else
          {
            v13 &= v9 - 1;
          }
          if (v13 != v3)
            break;
        }
      }
    }
  }
  v14 = a1 + 2;
  v15 = operator new(0x28uLL);
  i = v15;
  *v15 = 0;
  v15[1] = v8;
  v16 = a3[1];
  v15[2] = *a3;
  v15[3] = v16;
  if (v16)
  {
    v17 = (unint64_t *)(v16 + 8);
    do
      v18 = __ldxr(v17);
    while (__stxr(v18 + 1, v17));
  }
  v15[4] = 0;
  v19 = (float)(unint64_t)(a1[3] + 1);
  v20 = *((float *)a1 + 8);
  if (!v9 || (float)(v20 * (float)v9) < v19)
  {
    v21 = 1;
    if (v9 >= 3)
      v21 = (v9 & (v9 - 1)) != 0;
    v22 = v21 | (2 * v9);
    v23 = vcvtps_u32_f32(v19 / v20);
    if (v22 <= v23)
      prime = (int8x8_t)v23;
    else
      prime = (int8x8_t)v22;
    if (*(_QWORD *)&prime == 1)
    {
      prime = (int8x8_t)2;
    }
    else if ((*(_QWORD *)&prime & (*(_QWORD *)&prime - 1)) != 0)
    {
      prime = (int8x8_t)std::__next_prime(*(_QWORD *)&prime);
    }
    v9 = a1[1];
    if (*(_QWORD *)&prime > v9)
      goto LABEL_33;
    if (*(_QWORD *)&prime < v9)
    {
      v31 = vcvtps_u32_f32((float)(unint64_t)a1[3] / *((float *)a1 + 8));
      if (v9 < 3 || (v32 = (uint8x8_t)vcnt_s8((int8x8_t)v9), v32.i16[0] = vaddlv_u8(v32), v32.u32[0] > 1uLL))
      {
        v31 = std::__next_prime(v31);
      }
      else
      {
        v33 = 1 << -(char)__clz(v31 - 1);
        if (v31 >= 2)
          v31 = v33;
      }
      if (*(_QWORD *)&prime <= v31)
        prime = (int8x8_t)v31;
      if (*(_QWORD *)&prime >= v9)
      {
        v9 = a1[1];
      }
      else
      {
        if (prime)
        {
LABEL_33:
          if (*(_QWORD *)&prime >> 61)
            std::__throw_bad_array_new_length[abi:nn180100]();
          v25 = operator new(8 * *(_QWORD *)&prime);
          v26 = (void *)*a1;
          *a1 = (uint64_t)v25;
          if (v26)
            operator delete(v26);
          v27 = 0;
          a1[1] = (uint64_t)prime;
          do
            *(_QWORD *)(*a1 + 8 * v27++) = 0;
          while (*(_QWORD *)&prime != v27);
          v28 = (_QWORD *)*v14;
          if (*v14)
          {
            v29 = v28[1];
            v30 = (uint8x8_t)vcnt_s8(prime);
            v30.i16[0] = vaddlv_u8(v30);
            if (v30.u32[0] > 1uLL)
            {
              if (v29 >= *(_QWORD *)&prime)
                v29 %= *(_QWORD *)&prime;
            }
            else
            {
              v29 &= *(_QWORD *)&prime - 1;
            }
            *(_QWORD *)(*a1 + 8 * v29) = v14;
            v34 = (_QWORD *)*v28;
            if (*v28)
            {
              do
              {
                v35 = v34[1];
                if (v30.u32[0] > 1uLL)
                {
                  if (v35 >= *(_QWORD *)&prime)
                    v35 %= *(_QWORD *)&prime;
                }
                else
                {
                  v35 &= *(_QWORD *)&prime - 1;
                }
                if (v35 != v29)
                {
                  if (!*(_QWORD *)(*a1 + 8 * v35))
                  {
                    *(_QWORD *)(*a1 + 8 * v35) = v28;
                    goto LABEL_58;
                  }
                  *v28 = *v34;
                  *v34 = **(_QWORD **)(*a1 + 8 * v35);
                  **(_QWORD **)(*a1 + 8 * v35) = v34;
                  v34 = v28;
                }
                v35 = v29;
LABEL_58:
                v28 = v34;
                v34 = (_QWORD *)*v34;
                v29 = v35;
              }
              while (v34);
            }
          }
          v9 = (unint64_t)prime;
          goto LABEL_62;
        }
        v40 = (void *)*a1;
        *a1 = 0;
        if (v40)
          operator delete(v40);
        v9 = 0;
        a1[1] = 0;
      }
    }
LABEL_62:
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v8 >= v9)
        v3 = v8 % v9;
      else
        v3 = v8;
    }
    else
    {
      v3 = (v9 - 1) & v8;
    }
  }
  v36 = *a1;
  v37 = *(_QWORD **)(*a1 + 8 * v3);
  if (v37)
  {
    *i = *v37;
LABEL_75:
    *v37 = i;
    goto LABEL_76;
  }
  *i = *v14;
  *v14 = i;
  *(_QWORD *)(v36 + 8 * v3) = v14;
  if (*i)
  {
    v38 = *(_QWORD *)(*i + 8);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v38 >= v9)
        v38 %= v9;
    }
    else
    {
      v38 &= v9 - 1;
    }
    v37 = (_QWORD *)(*a1 + 8 * v38);
    goto LABEL_75;
  }
LABEL_76:
  ++a1[3];
  return i;
}

uint64_t *std::list<std::shared_ptr<csq::v2::PredicateBase<re::ecs2::Entity,re::query::SceneEntityDataSource>>>::__sort<csq::v2::AndPredicate<re::ecs2::Entity,re::query::SceneEntityDataSource>::preEvaluateOptimize(csq::v2::OptimizationContext<re::ecs2::Entity,re::query::SceneEntityDataSource> &)::{lambda(std::shared_ptr<csq::v2::PredicateBase<re::ecs2::Entity,re::query::SceneEntityDataSource>>,std::shared_ptr<csq::v2::PredicateBase<re::ecs2::Entity,re::query::SceneEntityDataSource>>)#1}>(uint64_t a1, uint64_t **a2, unint64_t a3, uint64_t **a4)
{
  uint64_t **v4;
  uint64_t *v7;
  unint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t v13;
  unint64_t *v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t *v18;
  unint64_t v19;
  std::__shared_weak_count *v20;
  unint64_t *v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t *v24;
  unint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t **v29;
  unint64_t v30;
  std::__shared_weak_count *v31;
  unint64_t *v32;
  unint64_t v33;
  std::__shared_weak_count *v34;
  unint64_t v35;
  unint64_t *v36;
  unint64_t v37;
  unint64_t v38;
  unint64_t v39;
  unint64_t *v40;
  unint64_t v41;
  std::__shared_weak_count *v42;
  unint64_t *v43;
  unint64_t v44;
  uint64_t *i;
  unint64_t v46;
  std::__shared_weak_count *v47;
  unint64_t *v48;
  unint64_t v49;
  std::__shared_weak_count *v50;
  unint64_t v51;
  unint64_t *v52;
  unint64_t v53;
  unint64_t v54;
  unint64_t v55;
  unint64_t *v56;
  unint64_t v57;
  std::__shared_weak_count *v58;
  unint64_t *v59;
  unint64_t v60;
  uint64_t *v61;
  uint64_t v62;
  uint64_t *v63;
  uint64_t *v64;
  uint64_t *v66;
  unint64_t v67;
  std::__shared_weak_count *v68;
  unint64_t *v69;
  unint64_t v70;
  std::__shared_weak_count *v71;
  unint64_t v72;
  unint64_t *v73;
  unint64_t v74;
  unint64_t v75;
  unint64_t v76;
  unint64_t *v77;
  unint64_t v78;
  std::__shared_weak_count *v79;
  unint64_t *v80;
  unint64_t v81;
  uint64_t *j;
  unint64_t v83;
  std::__shared_weak_count *v84;
  unint64_t *v85;
  unint64_t v86;
  std::__shared_weak_count *v87;
  unint64_t v88;
  unint64_t *v89;
  unint64_t v90;
  unint64_t v91;
  unint64_t v92;
  unint64_t *v93;
  unint64_t v94;
  std::__shared_weak_count *v95;
  unint64_t *v96;
  unint64_t v97;
  uint64_t *v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  BOOL v102;
  _QWORD v104[2];
  unint64_t v105;
  std::__shared_weak_count *v106;
  _QWORD v107[2];
  unint64_t v108;
  std::__shared_weak_count *v109;
  _QWORD v110[2];
  unint64_t v111;
  std::__shared_weak_count *v112;
  _QWORD v113[2];
  unint64_t v114;
  std::__shared_weak_count *v115;
  _QWORD v116[2];
  unint64_t v117;
  std::__shared_weak_count *v118;

  v4 = (uint64_t **)a1;
  if (a3 >= 2)
  {
    if (a3 == 2)
    {
      v7 = *a2;
      v8 = (*a2)[2];
      v9 = (std::__shared_weak_count *)(*a2)[3];
      v117 = v8;
      v118 = v9;
      if (v9)
      {
        p_shared_owners = (unint64_t *)&v9->__shared_owners_;
        do
          v11 = __ldxr(p_shared_owners);
        while (__stxr(v11 + 1, p_shared_owners));
      }
      v13 = *(_QWORD *)(a1 + 16);
      v12 = *(std::__shared_weak_count **)(a1 + 24);
      v116[0] = v13;
      v116[1] = v12;
      if (v12)
      {
        v14 = (unint64_t *)&v12->__shared_owners_;
        do
          v15 = __ldxr(v14);
        while (__stxr(v15 + 1, v14));
      }
      v16 = std::__hash_table<std::__hash_value_type<std::shared_ptr<csq::v2::PredicateBase<re::ecs2::Entity,re::query::SceneEntityDataSource>>,unsigned long>,std::__unordered_map_hasher<std::shared_ptr<csq::v2::PredicateBase<re::ecs2::Entity,re::query::SceneEntityDataSource>>,std::__hash_value_type<std::shared_ptr<csq::v2::PredicateBase<re::ecs2::Entity,re::query::SceneEntityDataSource>>,unsigned long>,std::hash<std::shared_ptr<csq::v2::PredicateBase<re::ecs2::Entity,re::query::SceneEntityDataSource>>>,std::equal_to<std::shared_ptr<csq::v2::PredicateBase<re::ecs2::Entity,re::query::SceneEntityDataSource>>>,true>,std::__unordered_map_equal<std::shared_ptr<csq::v2::PredicateBase<re::ecs2::Entity,re::query::SceneEntityDataSource>>,std::__hash_value_type<std::shared_ptr<csq::v2::PredicateBase<re::ecs2::Entity,re::query::SceneEntityDataSource>>,unsigned long>,std::equal_to<std::shared_ptr<csq::v2::PredicateBase<re::ecs2::Entity,re::query::SceneEntityDataSource>>>,std::hash<std::shared_ptr<csq::v2::PredicateBase<re::ecs2::Entity,re::query::SceneEntityDataSource>>>,true>,std::allocator<std::__hash_value_type<std::shared_ptr<csq::v2::PredicateBase<re::ecs2::Entity,re::query::SceneEntityDataSource>>,unsigned long>>>::__emplace_unique_key_args<std::shared_ptr<csq::v2::PredicateBase<re::ecs2::Entity,re::query::SceneEntityDataSource>>,std::piecewise_construct_t const&,std::tuple<std::shared_ptr<csq::v2::PredicateBase<re::ecs2::Entity,re::query::SceneEntityDataSource>> const&>,std::tuple<>>(*a4, v8, &v117)[4];
      v17 = std::__hash_table<std::__hash_value_type<std::shared_ptr<csq::v2::PredicateBase<re::ecs2::Entity,re::query::SceneEntityDataSource>>,unsigned long>,std::__unordered_map_hasher<std::shared_ptr<csq::v2::PredicateBase<re::ecs2::Entity,re::query::SceneEntityDataSource>>,std::__hash_value_type<std::shared_ptr<csq::v2::PredicateBase<re::ecs2::Entity,re::query::SceneEntityDataSource>>,unsigned long>,std::hash<std::shared_ptr<csq::v2::PredicateBase<re::ecs2::Entity,re::query::SceneEntityDataSource>>>,std::equal_to<std::shared_ptr<csq::v2::PredicateBase<re::ecs2::Entity,re::query::SceneEntityDataSource>>>,true>,std::__unordered_map_equal<std::shared_ptr<csq::v2::PredicateBase<re::ecs2::Entity,re::query::SceneEntityDataSource>>,std::__hash_value_type<std::shared_ptr<csq::v2::PredicateBase<re::ecs2::Entity,re::query::SceneEntityDataSource>>,unsigned long>,std::equal_to<std::shared_ptr<csq::v2::PredicateBase<re::ecs2::Entity,re::query::SceneEntityDataSource>>>,std::hash<std::shared_ptr<csq::v2::PredicateBase<re::ecs2::Entity,re::query::SceneEntityDataSource>>>,true>,std::allocator<std::__hash_value_type<std::shared_ptr<csq::v2::PredicateBase<re::ecs2::Entity,re::query::SceneEntityDataSource>>,unsigned long>>>::__emplace_unique_key_args<std::shared_ptr<csq::v2::PredicateBase<re::ecs2::Entity,re::query::SceneEntityDataSource>>,std::piecewise_construct_t const&,std::tuple<std::shared_ptr<csq::v2::PredicateBase<re::ecs2::Entity,re::query::SceneEntityDataSource>> const&>,std::tuple<>>(*a4, v13, v116)[4];
      if (v12)
      {
        v18 = (unint64_t *)&v12->__shared_owners_;
        do
          v19 = __ldaxr(v18);
        while (__stlxr(v19 - 1, v18));
        if (!v19)
        {
          ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
          std::__shared_weak_count::__release_weak(v12);
        }
      }
      v20 = v118;
      if (v118)
      {
        v21 = (unint64_t *)&v118->__shared_owners_;
        do
          v22 = __ldaxr(v21);
        while (__stlxr(v22 - 1, v21));
        if (!v22)
        {
          ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
          std::__shared_weak_count::__release_weak(v20);
        }
      }
      if (v16 < v17)
      {
        v23 = *v7;
        *(_QWORD *)(v23 + 8) = v7[1];
        *(_QWORD *)v7[1] = v23;
        v24 = *v4;
        v24[1] = (uint64_t)v7;
        *v7 = (uint64_t)v24;
        *v4 = v7;
        v7[1] = (uint64_t)v4;
        return v7;
      }
    }
    else
    {
      v26 = a3 >> 1;
      v27 = (a3 >> 1) + 1;
      v28 = a1;
      do
      {
        v28 = *(_QWORD *)(v28 + 8);
        --v27;
      }
      while (v27 > 1);
      v29 = (uint64_t **)std::list<std::shared_ptr<csq::v2::PredicateBase<re::ecs2::Entity,re::query::SceneEntityDataSource>>>::__sort<csq::v2::AndPredicate<re::ecs2::Entity,re::query::SceneEntityDataSource>::preEvaluateOptimize(csq::v2::OptimizationContext<re::ecs2::Entity,re::query::SceneEntityDataSource> &)::{lambda(std::shared_ptr<csq::v2::PredicateBase<re::ecs2::Entity,re::query::SceneEntityDataSource>>,std::shared_ptr<csq::v2::PredicateBase<re::ecs2::Entity,re::query::SceneEntityDataSource>>)#1}>(a1, v28, a3 >> 1, a4);
      v4 = (uint64_t **)std::list<std::shared_ptr<csq::v2::PredicateBase<re::ecs2::Entity,re::query::SceneEntityDataSource>>>::__sort<csq::v2::AndPredicate<re::ecs2::Entity,re::query::SceneEntityDataSource>::preEvaluateOptimize(csq::v2::OptimizationContext<re::ecs2::Entity,re::query::SceneEntityDataSource> &)::{lambda(std::shared_ptr<csq::v2::PredicateBase<re::ecs2::Entity,re::query::SceneEntityDataSource>>,std::shared_ptr<csq::v2::PredicateBase<re::ecs2::Entity,re::query::SceneEntityDataSource>>)#1}>(v28, a2, a3 - v26, a4);
      v30 = (unint64_t)v4[2];
      v31 = (std::__shared_weak_count *)v4[3];
      v114 = v30;
      v115 = v31;
      if (v31)
      {
        v32 = (unint64_t *)&v31->__shared_owners_;
        do
          v33 = __ldxr(v32);
        while (__stxr(v33 + 1, v32));
      }
      v35 = (unint64_t)v29[2];
      v34 = (std::__shared_weak_count *)v29[3];
      v113[0] = v35;
      v113[1] = v34;
      if (v34)
      {
        v36 = (unint64_t *)&v34->__shared_owners_;
        do
          v37 = __ldxr(v36);
        while (__stxr(v37 + 1, v36));
      }
      v38 = std::__hash_table<std::__hash_value_type<std::shared_ptr<csq::v2::PredicateBase<re::ecs2::Entity,re::query::SceneEntityDataSource>>,unsigned long>,std::__unordered_map_hasher<std::shared_ptr<csq::v2::PredicateBase<re::ecs2::Entity,re::query::SceneEntityDataSource>>,std::__hash_value_type<std::shared_ptr<csq::v2::PredicateBase<re::ecs2::Entity,re::query::SceneEntityDataSource>>,unsigned long>,std::hash<std::shared_ptr<csq::v2::PredicateBase<re::ecs2::Entity,re::query::SceneEntityDataSource>>>,std::equal_to<std::shared_ptr<csq::v2::PredicateBase<re::ecs2::Entity,re::query::SceneEntityDataSource>>>,true>,std::__unordered_map_equal<std::shared_ptr<csq::v2::PredicateBase<re::ecs2::Entity,re::query::SceneEntityDataSource>>,std::__hash_value_type<std::shared_ptr<csq::v2::PredicateBase<re::ecs2::Entity,re::query::SceneEntityDataSource>>,unsigned long>,std::equal_to<std::shared_ptr<csq::v2::PredicateBase<re::ecs2::Entity,re::query::SceneEntityDataSource>>>,std::hash<std::shared_ptr<csq::v2::PredicateBase<re::ecs2::Entity,re::query::SceneEntityDataSource>>>,true>,std::allocator<std::__hash_value_type<std::shared_ptr<csq::v2::PredicateBase<re::ecs2::Entity,re::query::SceneEntityDataSource>>,unsigned long>>>::__emplace_unique_key_args<std::shared_ptr<csq::v2::PredicateBase<re::ecs2::Entity,re::query::SceneEntityDataSource>>,std::piecewise_construct_t const&,std::tuple<std::shared_ptr<csq::v2::PredicateBase<re::ecs2::Entity,re::query::SceneEntityDataSource>> const&>,std::tuple<>>(*a4, v30, &v114)[4];
      v39 = std::__hash_table<std::__hash_value_type<std::shared_ptr<csq::v2::PredicateBase<re::ecs2::Entity,re::query::SceneEntityDataSource>>,unsigned long>,std::__unordered_map_hasher<std::shared_ptr<csq::v2::PredicateBase<re::ecs2::Entity,re::query::SceneEntityDataSource>>,std::__hash_value_type<std::shared_ptr<csq::v2::PredicateBase<re::ecs2::Entity,re::query::SceneEntityDataSource>>,unsigned long>,std::hash<std::shared_ptr<csq::v2::PredicateBase<re::ecs2::Entity,re::query::SceneEntityDataSource>>>,std::equal_to<std::shared_ptr<csq::v2::PredicateBase<re::ecs2::Entity,re::query::SceneEntityDataSource>>>,true>,std::__unordered_map_equal<std::shared_ptr<csq::v2::PredicateBase<re::ecs2::Entity,re::query::SceneEntityDataSource>>,std::__hash_value_type<std::shared_ptr<csq::v2::PredicateBase<re::ecs2::Entity,re::query::SceneEntityDataSource>>,unsigned long>,std::equal_to<std::shared_ptr<csq::v2::PredicateBase<re::ecs2::Entity,re::query::SceneEntityDataSource>>>,std::hash<std::shared_ptr<csq::v2::PredicateBase<re::ecs2::Entity,re::query::SceneEntityDataSource>>>,true>,std::allocator<std::__hash_value_type<std::shared_ptr<csq::v2::PredicateBase<re::ecs2::Entity,re::query::SceneEntityDataSource>>,unsigned long>>>::__emplace_unique_key_args<std::shared_ptr<csq::v2::PredicateBase<re::ecs2::Entity,re::query::SceneEntityDataSource>>,std::piecewise_construct_t const&,std::tuple<std::shared_ptr<csq::v2::PredicateBase<re::ecs2::Entity,re::query::SceneEntityDataSource>> const&>,std::tuple<>>(*a4, v35, v113)[4];
      if (v34)
      {
        v40 = (unint64_t *)&v34->__shared_owners_;
        do
          v41 = __ldaxr(v40);
        while (__stlxr(v41 - 1, v40));
        if (!v41)
        {
          ((void (*)(std::__shared_weak_count *))v34->__on_zero_shared)(v34);
          std::__shared_weak_count::__release_weak(v34);
        }
      }
      v42 = v115;
      if (v115)
      {
        v43 = (unint64_t *)&v115->__shared_owners_;
        do
          v44 = __ldaxr(v43);
        while (__stlxr(v44 - 1, v43));
        if (!v44)
        {
          ((void (*)(std::__shared_weak_count *))v42->__on_zero_shared)(v42);
          std::__shared_weak_count::__release_weak(v42);
        }
      }
      if (v38 >= v39)
      {
        v61 = v29[1];
        i = (uint64_t *)v4;
        v4 = v29;
      }
      else
      {
        for (i = v4[1]; i != (uint64_t *)a2; i = (uint64_t *)i[1])
        {
          v46 = i[2];
          v47 = (std::__shared_weak_count *)i[3];
          v111 = v46;
          v112 = v47;
          if (v47)
          {
            v48 = (unint64_t *)&v47->__shared_owners_;
            do
              v49 = __ldxr(v48);
            while (__stxr(v49 + 1, v48));
          }
          v51 = (unint64_t)v29[2];
          v50 = (std::__shared_weak_count *)v29[3];
          v110[0] = v51;
          v110[1] = v50;
          if (v50)
          {
            v52 = (unint64_t *)&v50->__shared_owners_;
            do
              v53 = __ldxr(v52);
            while (__stxr(v53 + 1, v52));
          }
          v54 = std::__hash_table<std::__hash_value_type<std::shared_ptr<csq::v2::PredicateBase<re::ecs2::Entity,re::query::SceneEntityDataSource>>,unsigned long>,std::__unordered_map_hasher<std::shared_ptr<csq::v2::PredicateBase<re::ecs2::Entity,re::query::SceneEntityDataSource>>,std::__hash_value_type<std::shared_ptr<csq::v2::PredicateBase<re::ecs2::Entity,re::query::SceneEntityDataSource>>,unsigned long>,std::hash<std::shared_ptr<csq::v2::PredicateBase<re::ecs2::Entity,re::query::SceneEntityDataSource>>>,std::equal_to<std::shared_ptr<csq::v2::PredicateBase<re::ecs2::Entity,re::query::SceneEntityDataSource>>>,true>,std::__unordered_map_equal<std::shared_ptr<csq::v2::PredicateBase<re::ecs2::Entity,re::query::SceneEntityDataSource>>,std::__hash_value_type<std::shared_ptr<csq::v2::PredicateBase<re::ecs2::Entity,re::query::SceneEntityDataSource>>,unsigned long>,std::equal_to<std::shared_ptr<csq::v2::PredicateBase<re::ecs2::Entity,re::query::SceneEntityDataSource>>>,std::hash<std::shared_ptr<csq::v2::PredicateBase<re::ecs2::Entity,re::query::SceneEntityDataSource>>>,true>,std::allocator<std::__hash_value_type<std::shared_ptr<csq::v2::PredicateBase<re::ecs2::Entity,re::query::SceneEntityDataSource>>,unsigned long>>>::__emplace_unique_key_args<std::shared_ptr<csq::v2::PredicateBase<re::ecs2::Entity,re::query::SceneEntityDataSource>>,std::piecewise_construct_t const&,std::tuple<std::shared_ptr<csq::v2::PredicateBase<re::ecs2::Entity,re::query::SceneEntityDataSource>> const&>,std::tuple<>>(*a4, v46, &v111)[4];
          v55 = std::__hash_table<std::__hash_value_type<std::shared_ptr<csq::v2::PredicateBase<re::ecs2::Entity,re::query::SceneEntityDataSource>>,unsigned long>,std::__unordered_map_hasher<std::shared_ptr<csq::v2::PredicateBase<re::ecs2::Entity,re::query::SceneEntityDataSource>>,std::__hash_value_type<std::shared_ptr<csq::v2::PredicateBase<re::ecs2::Entity,re::query::SceneEntityDataSource>>,unsigned long>,std::hash<std::shared_ptr<csq::v2::PredicateBase<re::ecs2::Entity,re::query::SceneEntityDataSource>>>,std::equal_to<std::shared_ptr<csq::v2::PredicateBase<re::ecs2::Entity,re::query::SceneEntityDataSource>>>,true>,std::__unordered_map_equal<std::shared_ptr<csq::v2::PredicateBase<re::ecs2::Entity,re::query::SceneEntityDataSource>>,std::__hash_value_type<std::shared_ptr<csq::v2::PredicateBase<re::ecs2::Entity,re::query::SceneEntityDataSource>>,unsigned long>,std::equal_to<std::shared_ptr<csq::v2::PredicateBase<re::ecs2::Entity,re::query::SceneEntityDataSource>>>,std::hash<std::shared_ptr<csq::v2::PredicateBase<re::ecs2::Entity,re::query::SceneEntityDataSource>>>,true>,std::allocator<std::__hash_value_type<std::shared_ptr<csq::v2::PredicateBase<re::ecs2::Entity,re::query::SceneEntityDataSource>>,unsigned long>>>::__emplace_unique_key_args<std::shared_ptr<csq::v2::PredicateBase<re::ecs2::Entity,re::query::SceneEntityDataSource>>,std::piecewise_construct_t const&,std::tuple<std::shared_ptr<csq::v2::PredicateBase<re::ecs2::Entity,re::query::SceneEntityDataSource>> const&>,std::tuple<>>(*a4, v51, v110)[4];
          if (v50)
          {
            v56 = (unint64_t *)&v50->__shared_owners_;
            do
              v57 = __ldaxr(v56);
            while (__stlxr(v57 - 1, v56));
            if (!v57)
            {
              ((void (*)(std::__shared_weak_count *))v50->__on_zero_shared)(v50);
              std::__shared_weak_count::__release_weak(v50);
            }
          }
          v58 = v112;
          if (v112)
          {
            v59 = (unint64_t *)&v112->__shared_owners_;
            do
              v60 = __ldaxr(v59);
            while (__stlxr(v60 - 1, v59));
            if (!v60)
            {
              ((void (*)(std::__shared_weak_count *))v58->__on_zero_shared)(v58);
              std::__shared_weak_count::__release_weak(v58);
            }
          }
          if (v54 >= v55)
            goto LABEL_62;
        }
        i = (uint64_t *)a2;
LABEL_62:
        v62 = *i;
        v63 = *v4;
        v63[1] = *(_QWORD *)(*i + 8);
        **(_QWORD **)(v62 + 8) = v63;
        v64 = *v29;
        v61 = v29[1];
        v64[1] = (uint64_t)v4;
        *v4 = v64;
        *v29 = (uint64_t *)v62;
        *(_QWORD *)(v62 + 8) = v29;
      }
      if (v61 != i && i != (uint64_t *)a2)
      {
        v66 = i;
        do
        {
          v67 = i[2];
          v68 = (std::__shared_weak_count *)i[3];
          v108 = v67;
          v109 = v68;
          if (v68)
          {
            v69 = (unint64_t *)&v68->__shared_owners_;
            do
              v70 = __ldxr(v69);
            while (__stxr(v70 + 1, v69));
          }
          v72 = v61[2];
          v71 = (std::__shared_weak_count *)v61[3];
          v107[0] = v72;
          v107[1] = v71;
          if (v71)
          {
            v73 = (unint64_t *)&v71->__shared_owners_;
            do
              v74 = __ldxr(v73);
            while (__stxr(v74 + 1, v73));
          }
          v75 = std::__hash_table<std::__hash_value_type<std::shared_ptr<csq::v2::PredicateBase<re::ecs2::Entity,re::query::SceneEntityDataSource>>,unsigned long>,std::__unordered_map_hasher<std::shared_ptr<csq::v2::PredicateBase<re::ecs2::Entity,re::query::SceneEntityDataSource>>,std::__hash_value_type<std::shared_ptr<csq::v2::PredicateBase<re::ecs2::Entity,re::query::SceneEntityDataSource>>,unsigned long>,std::hash<std::shared_ptr<csq::v2::PredicateBase<re::ecs2::Entity,re::query::SceneEntityDataSource>>>,std::equal_to<std::shared_ptr<csq::v2::PredicateBase<re::ecs2::Entity,re::query::SceneEntityDataSource>>>,true>,std::__unordered_map_equal<std::shared_ptr<csq::v2::PredicateBase<re::ecs2::Entity,re::query::SceneEntityDataSource>>,std::__hash_value_type<std::shared_ptr<csq::v2::PredicateBase<re::ecs2::Entity,re::query::SceneEntityDataSource>>,unsigned long>,std::equal_to<std::shared_ptr<csq::v2::PredicateBase<re::ecs2::Entity,re::query::SceneEntityDataSource>>>,std::hash<std::shared_ptr<csq::v2::PredicateBase<re::ecs2::Entity,re::query::SceneEntityDataSource>>>,true>,std::allocator<std::__hash_value_type<std::shared_ptr<csq::v2::PredicateBase<re::ecs2::Entity,re::query::SceneEntityDataSource>>,unsigned long>>>::__emplace_unique_key_args<std::shared_ptr<csq::v2::PredicateBase<re::ecs2::Entity,re::query::SceneEntityDataSource>>,std::piecewise_construct_t const&,std::tuple<std::shared_ptr<csq::v2::PredicateBase<re::ecs2::Entity,re::query::SceneEntityDataSource>> const&>,std::tuple<>>(*a4, v67, &v108)[4];
          v76 = std::__hash_table<std::__hash_value_type<std::shared_ptr<csq::v2::PredicateBase<re::ecs2::Entity,re::query::SceneEntityDataSource>>,unsigned long>,std::__unordered_map_hasher<std::shared_ptr<csq::v2::PredicateBase<re::ecs2::Entity,re::query::SceneEntityDataSource>>,std::__hash_value_type<std::shared_ptr<csq::v2::PredicateBase<re::ecs2::Entity,re::query::SceneEntityDataSource>>,unsigned long>,std::hash<std::shared_ptr<csq::v2::PredicateBase<re::ecs2::Entity,re::query::SceneEntityDataSource>>>,std::equal_to<std::shared_ptr<csq::v2::PredicateBase<re::ecs2::Entity,re::query::SceneEntityDataSource>>>,true>,std::__unordered_map_equal<std::shared_ptr<csq::v2::PredicateBase<re::ecs2::Entity,re::query::SceneEntityDataSource>>,std::__hash_value_type<std::shared_ptr<csq::v2::PredicateBase<re::ecs2::Entity,re::query::SceneEntityDataSource>>,unsigned long>,std::equal_to<std::shared_ptr<csq::v2::PredicateBase<re::ecs2::Entity,re::query::SceneEntityDataSource>>>,std::hash<std::shared_ptr<csq::v2::PredicateBase<re::ecs2::Entity,re::query::SceneEntityDataSource>>>,true>,std::allocator<std::__hash_value_type<std::shared_ptr<csq::v2::PredicateBase<re::ecs2::Entity,re::query::SceneEntityDataSource>>,unsigned long>>>::__emplace_unique_key_args<std::shared_ptr<csq::v2::PredicateBase<re::ecs2::Entity,re::query::SceneEntityDataSource>>,std::piecewise_construct_t const&,std::tuple<std::shared_ptr<csq::v2::PredicateBase<re::ecs2::Entity,re::query::SceneEntityDataSource>> const&>,std::tuple<>>(*a4, v72, v107)[4];
          if (v71)
          {
            v77 = (unint64_t *)&v71->__shared_owners_;
            do
              v78 = __ldaxr(v77);
            while (__stlxr(v78 - 1, v77));
            if (!v78)
            {
              ((void (*)(std::__shared_weak_count *))v71->__on_zero_shared)(v71);
              std::__shared_weak_count::__release_weak(v71);
            }
          }
          v79 = v109;
          if (v109)
          {
            v80 = (unint64_t *)&v109->__shared_owners_;
            do
              v81 = __ldaxr(v80);
            while (__stlxr(v81 - 1, v80));
            if (!v81)
            {
              ((void (*)(std::__shared_weak_count *))v79->__on_zero_shared)(v79);
              std::__shared_weak_count::__release_weak(v79);
            }
          }
          if (v75 >= v76)
          {
            v98 = (uint64_t *)v61[1];
          }
          else
          {
            for (j = (uint64_t *)i[1]; j != (uint64_t *)a2; j = (uint64_t *)j[1])
            {
              v83 = j[2];
              v84 = (std::__shared_weak_count *)j[3];
              v105 = v83;
              v106 = v84;
              if (v84)
              {
                v85 = (unint64_t *)&v84->__shared_owners_;
                do
                  v86 = __ldxr(v85);
                while (__stxr(v86 + 1, v85));
              }
              v88 = v61[2];
              v87 = (std::__shared_weak_count *)v61[3];
              v104[0] = v88;
              v104[1] = v87;
              if (v87)
              {
                v89 = (unint64_t *)&v87->__shared_owners_;
                do
                  v90 = __ldxr(v89);
                while (__stxr(v90 + 1, v89));
              }
              v91 = std::__hash_table<std::__hash_value_type<std::shared_ptr<csq::v2::PredicateBase<re::ecs2::Entity,re::query::SceneEntityDataSource>>,unsigned long>,std::__unordered_map_hasher<std::shared_ptr<csq::v2::PredicateBase<re::ecs2::Entity,re::query::SceneEntityDataSource>>,std::__hash_value_type<std::shared_ptr<csq::v2::PredicateBase<re::ecs2::Entity,re::query::SceneEntityDataSource>>,unsigned long>,std::hash<std::shared_ptr<csq::v2::PredicateBase<re::ecs2::Entity,re::query::SceneEntityDataSource>>>,std::equal_to<std::shared_ptr<csq::v2::PredicateBase<re::ecs2::Entity,re::query::SceneEntityDataSource>>>,true>,std::__unordered_map_equal<std::shared_ptr<csq::v2::PredicateBase<re::ecs2::Entity,re::query::SceneEntityDataSource>>,std::__hash_value_type<std::shared_ptr<csq::v2::PredicateBase<re::ecs2::Entity,re::query::SceneEntityDataSource>>,unsigned long>,std::equal_to<std::shared_ptr<csq::v2::PredicateBase<re::ecs2::Entity,re::query::SceneEntityDataSource>>>,std::hash<std::shared_ptr<csq::v2::PredicateBase<re::ecs2::Entity,re::query::SceneEntityDataSource>>>,true>,std::allocator<std::__hash_value_type<std::shared_ptr<csq::v2::PredicateBase<re::ecs2::Entity,re::query::SceneEntityDataSource>>,unsigned long>>>::__emplace_unique_key_args<std::shared_ptr<csq::v2::PredicateBase<re::ecs2::Entity,re::query::SceneEntityDataSource>>,std::piecewise_construct_t const&,std::tuple<std::shared_ptr<csq::v2::PredicateBase<re::ecs2::Entity,re::query::SceneEntityDataSource>> const&>,std::tuple<>>(*a4, v83, &v105)[4];
              v92 = std::__hash_table<std::__hash_value_type<std::shared_ptr<csq::v2::PredicateBase<re::ecs2::Entity,re::query::SceneEntityDataSource>>,unsigned long>,std::__unordered_map_hasher<std::shared_ptr<csq::v2::PredicateBase<re::ecs2::Entity,re::query::SceneEntityDataSource>>,std::__hash_value_type<std::shared_ptr<csq::v2::PredicateBase<re::ecs2::Entity,re::query::SceneEntityDataSource>>,unsigned long>,std::hash<std::shared_ptr<csq::v2::PredicateBase<re::ecs2::Entity,re::query::SceneEntityDataSource>>>,std::equal_to<std::shared_ptr<csq::v2::PredicateBase<re::ecs2::Entity,re::query::SceneEntityDataSource>>>,true>,std::__unordered_map_equal<std::shared_ptr<csq::v2::PredicateBase<re::ecs2::Entity,re::query::SceneEntityDataSource>>,std::__hash_value_type<std::shared_ptr<csq::v2::PredicateBase<re::ecs2::Entity,re::query::SceneEntityDataSource>>,unsigned long>,std::equal_to<std::shared_ptr<csq::v2::PredicateBase<re::ecs2::Entity,re::query::SceneEntityDataSource>>>,std::hash<std::shared_ptr<csq::v2::PredicateBase<re::ecs2::Entity,re::query::SceneEntityDataSource>>>,true>,std::allocator<std::__hash_value_type<std::shared_ptr<csq::v2::PredicateBase<re::ecs2::Entity,re::query::SceneEntityDataSource>>,unsigned long>>>::__emplace_unique_key_args<std::shared_ptr<csq::v2::PredicateBase<re::ecs2::Entity,re::query::SceneEntityDataSource>>,std::piecewise_construct_t const&,std::tuple<std::shared_ptr<csq::v2::PredicateBase<re::ecs2::Entity,re::query::SceneEntityDataSource>> const&>,std::tuple<>>(*a4, v88, v104)[4];
              if (v87)
              {
                v93 = (unint64_t *)&v87->__shared_owners_;
                do
                  v94 = __ldaxr(v93);
                while (__stlxr(v94 - 1, v93));
                if (!v94)
                {
                  ((void (*)(std::__shared_weak_count *))v87->__on_zero_shared)(v87);
                  std::__shared_weak_count::__release_weak(v87);
                }
              }
              v95 = v106;
              if (v106)
              {
                v96 = (unint64_t *)&v106->__shared_owners_;
                do
                  v97 = __ldaxr(v96);
                while (__stlxr(v97 - 1, v96));
                if (!v97)
                {
                  ((void (*)(std::__shared_weak_count *))v95->__on_zero_shared)(v95);
                  std::__shared_weak_count::__release_weak(v95);
                }
              }
              if (v91 >= v92)
                goto LABEL_107;
            }
            j = (uint64_t *)a2;
LABEL_107:
            v99 = *j;
            v100 = *i;
            *(_QWORD *)(v100 + 8) = *(_QWORD *)(*j + 8);
            **(_QWORD **)(v99 + 8) = v100;
            if (v66 == i)
              v66 = j;
            v101 = *v61;
            v98 = (uint64_t *)v61[1];
            *(_QWORD *)(v101 + 8) = i;
            *i = v101;
            *v61 = v99;
            *(_QWORD *)(v99 + 8) = v61;
            i = j;
          }
          v102 = v98 == v66 || i == (uint64_t *)a2;
          v61 = v98;
        }
        while (!v102);
      }
    }
  }
  return (uint64_t *)v4;
}

void csq::v2::AndPredicate<re::ecs2::Component,re::ecs2::SceneComponentCollectionBase>::~AndPredicate(_QWORD *a1)
{
  csq::graph::DirectedGraphNode<csq::v2::PredicateBase<re::ecs2::Component,re::ecs2::SceneComponentCollectionBase>>::~DirectedGraphNode(a1);
  JUMPOUT(0x2276933B8);
}

uint64_t csq::v2::AndPredicate<re::ecs2::Component,re::ecs2::SceneComponentCollectionBase>::evaluate(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  int v11;
  char v12;
  unint64_t v13;

  v3 = (_QWORD *)(a1 + 24);
  v4 = *(_QWORD **)(a1 + 32);
  if (v4 == (_QWORD *)(a1 + 24))
    return 1;
  while (1)
  {
    v7 = v4[2];
    v8 = (std::__shared_weak_count *)v4[3];
    if (v8)
      break;
    if (((*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v7 + 16))(v7, a2, a3) & 1) == 0)
      return 0;
LABEL_13:
    v4 = (_QWORD *)v4[1];
    if (v4 == v3)
      return 1;
  }
  p_shared_owners = (unint64_t *)&v8->__shared_owners_;
  do
    v10 = __ldxr(p_shared_owners);
  while (__stxr(v10 + 1, p_shared_owners));
  v11 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v7 + 16))(v7, a2, a3);
  v12 = v11;
  do
    v13 = __ldaxr(p_shared_owners);
  while (__stlxr(v13 - 1, p_shared_owners));
  if (v13)
  {
    if (!v11)
      return 0;
    goto LABEL_13;
  }
  ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
  std::__shared_weak_count::__release_weak(v8);
  if ((v12 & 1) != 0)
    goto LABEL_13;
  return 0;
}

void csq::v2::AndPredicate<re::ecs2::Component,re::ecs2::SceneComponentCollectionBase>::postCreateOptimize(uint64_t a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  std::__shared_weak_count *v5;
  uint64_t v6;
  std::__shared_weak_count *v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  std::__shared_weak_count *v11;
  std::__shared_weak_count *v12;
  uint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  uint64_t *v17;
  const struct __class_type_info *v18;
  const void *v19;
  _QWORD **v20;
  _QWORD **v21;
  std::__shared_weak_count *v22;
  unint64_t *v23;
  unint64_t v24;
  const struct __class_type_info *v25;
  uint64_t *v26;
  uint64_t v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t *v31;
  unint64_t v32;
  unint64_t v33;
  unint64_t v34;
  std::__shared_weak_count *v35;
  unint64_t *v36;
  unint64_t v37;
  std::__shared_weak_count *v38;
  _QWORD *v39;
  uint64_t v41[2];
  uint64_t v42;
  std::__shared_weak_count *v43;

  v6 = *(_QWORD *)(a1 + 8);
  v5 = *(std::__shared_weak_count **)(a1 + 16);
  v41[0] = v6;
  if (!v5)
    goto LABEL_46;
  v7 = std::__shared_weak_count::lock(v5);
  v41[1] = (uint64_t)v7;
  if (!v7)
    goto LABEL_46;
  v8 = v7;
  csq::v2::applyDominantAndIdentityLaws<csq::v2::PredicateBase<re::ecs2::Component,re::ecs2::SceneComponentCollectionBase>>(&v42, v41, 0, a2);
  p_shared_owners = (unint64_t *)&v8->__shared_owners_;
  do
    v10 = __ldaxr(p_shared_owners);
  while (__stlxr(v10 - 1, p_shared_owners));
  if (!v10)
  {
    ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
    std::__shared_weak_count::__release_weak(v8);
  }
  if (v42)
  {
    v11 = v43;
    *a3 = v42;
    a3[1] = v11;
    return;
  }
  v12 = *(std::__shared_weak_count **)(a1 + 16);
  if (!v12 || (v13 = *(_QWORD *)(a1 + 8), (v14 = std::__shared_weak_count::lock(v12)) == 0))
  {
LABEL_46:
    std::__throw_bad_weak_ptr[abi:nn180100]();
    csq::v2::AndPredicate<re::ecs2::Component,re::ecs2::SceneComponentCollectionBase>::preEvaluateOptimize();
    return;
  }
  v38 = v14;
  v39 = a3;
  v15 = (unint64_t *)&v14->__shared_owners_;
  do
    v16 = __ldxr(v15);
  while (__stxr(v16 + 1, v15));
  v17 = *(uint64_t **)(v13 + 32);
  if (v17 != (uint64_t *)(v13 + 24))
  {
    do
    {
      v19 = (const void *)v17[2];
      if (v19)
      {
        if (v20)
        {
          v21 = v20;
          v22 = (std::__shared_weak_count *)v17[3];
          if (v22)
          {
            v23 = (unint64_t *)&v22->__shared_owners_;
            do
              v24 = __ldxr(v23);
            while (__stxr(v24 + 1, v23));
          }
          if (v20[5])
          {
            v25 = v18;
            v26 = std::list<std::shared_ptr<csq::v2::PredicateBase<re::ecs2::Entity,re::query::SceneEntityDataSource>>>::__insert_with_sentinel[abi:nn180100]<std::__list_iterator<std::shared_ptr<csq::v2::PredicateBase<re::ecs2::Entity,re::query::SceneEntityDataSource>>,void *>,std::__list_iterator<std::shared_ptr<csq::v2::PredicateBase<re::ecs2::Entity,re::query::SceneEntityDataSource>>,void *>>(v13 + 24, v17, v20[4], v20 + 3);
            v27 = *v17;
            *(_QWORD *)(v27 + 8) = v17[1];
            *(_QWORD *)v17[1] = v27;
            --*(_QWORD *)(v13 + 40);
            std::shared_ptr<re::AssetManager>::~shared_ptr[abi:nn180100]((uint64_t)(v17 + 2));
            operator delete(v17);
            v28 = (unint64_t)v21[5];
            v17 = v26;
            v29 = v28 - 1;
            if ((uint64_t)(v28 - 1) < 0)
            {
              do
                v17 = (uint64_t *)*v17;
              while (!__CFADD__(v29++, 1));
            }
            else if (v28 != 1)
            {
              do
              {
                v17 = (uint64_t *)v17[1];
                --v28;
              }
              while (v28 > 1);
            }
            *(_BYTE *)(a2 + 24) = 1;
            v18 = v25;
          }
          if (v22)
          {
            v31 = (unint64_t *)&v22->__shared_owners_;
            do
              v32 = __ldaxr(v31);
            while (__stlxr(v32 - 1, v31));
            if (!v32)
            {
              ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
              std::__shared_weak_count::__release_weak(v22);
            }
          }
        }
      }
      v17 = (uint64_t *)v17[1];
    }
    while (v17 != (uint64_t *)(v13 + 24));
  }
  do
    v33 = __ldaxr(v15);
  while (__stlxr(v33 - 1, v15));
  if (!v33)
  {
    ((void (*)(std::__shared_weak_count *))v38->__on_zero_shared)(v38);
    std::__shared_weak_count::__release_weak(v38);
  }
  do
    v34 = __ldaxr(v15);
  while (__stlxr(v34 - 1, v15));
  if (!v34)
  {
    ((void (*)(std::__shared_weak_count *))v38->__on_zero_shared)(v38);
    std::__shared_weak_count::__release_weak(v38);
  }
  *v39 = 0;
  v39[1] = 0;
  v35 = v43;
  if (v43)
  {
    v36 = (unint64_t *)&v43->__shared_owners_;
    do
      v37 = __ldaxr(v36);
    while (__stlxr(v37 - 1, v36));
    if (!v37)
    {
      ((void (*)(std::__shared_weak_count *))v35->__on_zero_shared)(v35);
      std::__shared_weak_count::__release_weak(v35);
    }
  }
}

void csq::v2::AndPredicate<re::ecs2::Component,re::ecs2::SceneComponentCollectionBase>::preEvaluateOptimize(_QWORD *a1, uint64_t a2)
{
  uint64_t **v4;
  uint64_t v5;
  char v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  std::__shared_weak_count *v16;
  uint64_t v17;
  std::__shared_weak_count *v18;
  std::__shared_weak_count *v19;
  uint64_t *v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  _QWORD *v28;
  _QWORD *v29;
  void *v30;
  void *__p[2];
  __int128 v32;
  int v33;
  uint64_t v34;
  uint64_t *v35;
  uint64_t v36;
  void **v37;

  v34 = (uint64_t)&v34;
  v35 = &v34;
  v36 = 0;
  *(_OWORD *)__p = 0u;
  v32 = 0u;
  v33 = 1065353216;
  v4 = (uint64_t **)(a1 + 3);
  v5 = a1[4];
  if ((_QWORD *)v5 == a1 + 3)
  {
    v6 = 0;
    v7 = -1;
  }
  else
  {
    v6 = 0;
    v7 = -1;
    do
    {
      (*(void (**)(_QWORD, uint64_t))(**(_QWORD **)(v5 + 16) + 40))(*(_QWORD *)(v5 + 16), a2);
      if (*(_BYTE *)(*(_QWORD *)(a2 + 8) + 64))
      {
        v8 = *(_QWORD *)(a2 + 32);
      }
      else
      {
        v8 = -1;
        *(_QWORD *)(a2 + 32) = -1;
      }
      std::__hash_table<std::__hash_value_type<std::shared_ptr<csq::v2::PredicateBase<re::ecs2::Entity,re::query::SceneEntityDataSource>>,unsigned long>,std::__unordered_map_hasher<std::shared_ptr<csq::v2::PredicateBase<re::ecs2::Entity,re::query::SceneEntityDataSource>>,std::__hash_value_type<std::shared_ptr<csq::v2::PredicateBase<re::ecs2::Entity,re::query::SceneEntityDataSource>>,unsigned long>,std::hash<std::shared_ptr<csq::v2::PredicateBase<re::ecs2::Entity,re::query::SceneEntityDataSource>>>,std::equal_to<std::shared_ptr<csq::v2::PredicateBase<re::ecs2::Entity,re::query::SceneEntityDataSource>>>,true>,std::__unordered_map_equal<std::shared_ptr<csq::v2::PredicateBase<re::ecs2::Entity,re::query::SceneEntityDataSource>>,std::__hash_value_type<std::shared_ptr<csq::v2::PredicateBase<re::ecs2::Entity,re::query::SceneEntityDataSource>>,unsigned long>,std::equal_to<std::shared_ptr<csq::v2::PredicateBase<re::ecs2::Entity,re::query::SceneEntityDataSource>>>,std::hash<std::shared_ptr<csq::v2::PredicateBase<re::ecs2::Entity,re::query::SceneEntityDataSource>>>,true>,std::allocator<std::__hash_value_type<std::shared_ptr<csq::v2::PredicateBase<re::ecs2::Entity,re::query::SceneEntityDataSource>>,unsigned long>>>::__emplace_unique_key_args<std::shared_ptr<csq::v2::PredicateBase<re::ecs2::Entity,re::query::SceneEntityDataSource>>,std::piecewise_construct_t const&,std::tuple<std::shared_ptr<csq::v2::PredicateBase<re::ecs2::Entity,re::query::SceneEntityDataSource>> const&>,std::tuple<>>((uint64_t *)__p, *(_QWORD *)(v5 + 16), (_QWORD *)(v5 + 16))[4] = v8;
      v9 = *(_QWORD *)(a2 + 8);
      if (*(_BYTE *)(v9 + 64))
      {
        v10 = *(_QWORD *)(a2 + 32);
        if (v10 < v7)
        {
          std::__list_imp<std::shared_ptr<csq::v2::PredicateBase<re::ecs2::Entity,re::query::SceneEntityDataSource>>>::clear(&v34);
          v11 = *(_QWORD *)(v9 + 32);
          if (v11)
          {
            v13 = *(_QWORD *)(v9 + 16);
            v12 = *(uint64_t **)(v9 + 24);
            v14 = *v12;
            *(_QWORD *)(v14 + 8) = *(_QWORD *)(v13 + 8);
            **(_QWORD **)(v13 + 8) = v14;
            v15 = v34;
            *(_QWORD *)(v34 + 8) = v12;
            *v12 = v15;
            *(_QWORD *)(v13 + 8) = &v34;
            v34 = v13;
            v36 += v11;
            *(_QWORD *)(v9 + 32) = 0;
          }
          v6 = 3;
          v7 = v10;
        }
      }
      v5 = *(_QWORD *)(v5 + 8);
    }
    while ((uint64_t **)v5 != v4);
    if (v36)
    {
      v16 = (std::__shared_weak_count *)a1[2];
      if (!v16 || (v17 = a1[1], (v18 = std::__shared_weak_count::lock(v16)) == 0))
      {
        std::__throw_bad_weak_ptr[abi:nn180100]();
        JUMPOUT(0x225FBDAD8);
      }
      v19 = v18;
      v20 = (uint64_t *)operator new(0x20uLL);
      v20[2] = v17;
      v20[3] = (uint64_t)v19;
      v21 = v35;
      *v20 = (uint64_t)&v34;
      v20[1] = (uint64_t)v21;
      *v21 = (uint64_t)v20;
      v35 = v20;
      ++v36;
    }
  }
  v22 = *(_QWORD *)(a2 + 8);
  std::__list_imp<std::shared_ptr<csq::v2::PredicateBase<re::ecs2::Entity,re::query::SceneEntityDataSource>>>::clear((uint64_t *)(v22 + 16));
  v23 = v36;
  if (v36)
  {
    v25 = v34;
    v24 = v35;
    v26 = *v35;
    *(_QWORD *)(v26 + 8) = *(_QWORD *)(v34 + 8);
    **(_QWORD **)(v25 + 8) = v26;
    v27 = *(_QWORD *)(v22 + 16);
    *(_QWORD *)(v27 + 8) = v24;
    *v24 = v27;
    *(_QWORD *)(v22 + 16) = v25;
    *(_QWORD *)(v25 + 8) = v22 + 16;
    *(_QWORD *)(v22 + 32) += v23;
    v36 = 0;
  }
  *(_QWORD *)(a2 + 32) = v7;
  *(_BYTE *)(*(_QWORD *)(a2 + 8) + 64) = v6;
  v37 = __p;
  std::list<std::shared_ptr<csq::v2::PredicateBase<re::ecs2::Entity,re::query::SceneEntityDataSource>>>::__sort<csq::v2::AndPredicate<re::ecs2::Entity,re::query::SceneEntityDataSource>::preEvaluateOptimize(csq::v2::OptimizationContext<re::ecs2::Entity,re::query::SceneEntityDataSource> &)::{lambda(std::shared_ptr<csq::v2::PredicateBase<re::ecs2::Entity,re::query::SceneEntityDataSource>>,std::shared_ptr<csq::v2::PredicateBase<re::ecs2::Entity,re::query::SceneEntityDataSource>>)#1}>(a1[4], v4, a1[5], (uint64_t **)&v37);
  *(_BYTE *)(a2 + 24) = 1;
  v28 = (_QWORD *)v32;
  if ((_QWORD)v32)
  {
    do
    {
      v29 = (_QWORD *)*v28;
      std::shared_ptr<re::AssetManager>::~shared_ptr[abi:nn180100]((uint64_t)(v28 + 2));
      operator delete(v28);
      v28 = v29;
    }
    while (v29);
  }
  v30 = __p[0];
  __p[0] = 0;
  if (v30)
    operator delete(v30);
  std::__list_imp<std::shared_ptr<csq::v2::PredicateBase<re::ecs2::Entity,re::query::SceneEntityDataSource>>>::clear(&v34);
}

void csq::v2::PredicateBase<re::ecs2::Component,re::ecs2::SceneComponentCollectionBase>::postCreateOptimize(_QWORD *a1@<X8>)
{
  *a1 = 0;
  a1[1] = 0;
}

void csq::v2::PredicateBase<re::ecs2::Component,re::ecs2::SceneComponentCollectionBase>::preEvaluateOptimize(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)(a2 + 32) = -1;
}

void csq::graph::DirectedGraphNode<csq::v2::PredicateBase<re::ecs2::Component,re::ecs2::SceneComponentCollectionBase>>::~DirectedGraphNode(_QWORD *a1)
{
  csq::graph::DirectedGraphNode<csq::v2::PredicateBase<re::ecs2::Component,re::ecs2::SceneComponentCollectionBase>>::~DirectedGraphNode(a1);
  JUMPOUT(0x2276933B8);
}

_QWORD *csq::graph::DirectedGraphNode<csq::v2::PredicateBase<re::ecs2::Component,re::ecs2::SceneComponentCollectionBase>>::~DirectedGraphNode(_QWORD *a1)
{
  uint64_t *v2;
  std::__shared_weak_count *v3;

  *a1 = &off_24ED9B828;
  v2 = a1 + 3;
  std::__list_imp<std::shared_ptr<csq::v2::PredicateBase<re::ecs2::Entity,re::query::SceneEntityDataSource>>>::clear(a1 + 3);
  std::__list_imp<std::shared_ptr<csq::v2::PredicateBase<re::ecs2::Entity,re::query::SceneEntityDataSource>>>::clear(v2);
  v3 = (std::__shared_weak_count *)a1[2];
  if (v3)
    std::__shared_weak_count::__release_weak(v3);
  return a1;
}

void csq::v2::applyDominantAndIdentityLaws<csq::v2::PredicateBase<re::ecs2::Component,re::ecs2::SceneComponentCollectionBase>>(_QWORD *a1, uint64_t *a2, int a3, uint64_t a4)
{
  uint64_t v5;
  _QWORD *v6;
  int v10;
  uint64_t *v11;
  uint64_t v12;
  const void **v13;
  _BYTE *v14;
  std::__shared_weak_count *v15;
  unint64_t *p_shared_owners;
  unint64_t v17;
  uint64_t *v18;
  uint64_t v19;
  unint64_t *v20;
  unint64_t v21;
  unint64_t *v22;
  unint64_t v23;
  char v24;
  std::__shared_weak_count *v25;
  unint64_t *v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t *v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  std::__shared_weak_count *v36;

  v5 = *a2;
  v6 = *(_QWORD **)(*a2 + 32);
  if (v6 == (_QWORD *)(*a2 + 24))
  {
LABEL_38:
    *a1 = 0;
    a1[1] = 0;
  }
  else
  {
    LOBYTE(v10) = 0;
    v11 = 0;
    while (1)
    {
      if ((v10 & 1) != 0)
      {
        v12 = *v11;
        *(_QWORD *)(v12 + 8) = v11[1];
        *(_QWORD *)v11[1] = v12;
        --*(_QWORD *)(v5 + 40);
        std::shared_ptr<re::AssetManager>::~shared_ptr[abi:nn180100]((uint64_t)(v11 + 2));
        operator delete(v11);
        *(_BYTE *)(a4 + 24) = 1;
      }
      v13 = (const void **)(v6 + 2);
      (*(void (**)(uint64_t *__return_ptr, _QWORD, uint64_t))(*(_QWORD *)v6[2] + 32))(&v35, v6[2], a4);
      if (v35)
        std::shared_ptr<re::audio::REPHASEEntity>::operator=[abi:ne180100](v6 + 2, v35, (uint64_t)v36);
      if (*v13
      {
        v15 = (std::__shared_weak_count *)v6[3];
        if (v15)
        {
          p_shared_owners = (unint64_t *)&v15->__shared_owners_;
          do
            v17 = __ldxr(p_shared_owners);
          while (__stxr(v17 + 1, p_shared_owners));
        }
        v10 = (v14[48] != 0) ^ a3;
        v18 = v6;
        if ((v10 & 1) == 0)
        {
          *(_BYTE *)(a4 + 24) = 1;
          v19 = v6[3];
          *a1 = v6[2];
          a1[1] = v19;
          if (v19)
          {
            v20 = (unint64_t *)(v19 + 8);
            do
              v21 = __ldxr(v20);
            while (__stxr(v21 + 1, v20));
          }
          v18 = v11;
        }
        if (v15)
        {
          v22 = (unint64_t *)&v15->__shared_owners_;
          do
            v23 = __ldaxr(v22);
          while (__stlxr(v23 - 1, v22));
          if (!v23)
          {
            ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
            std::__shared_weak_count::__release_weak(v15);
          }
        }
        v24 = v10;
        v11 = v18;
      }
      else
      {
        v10 = 0;
        v24 = 1;
      }
      v25 = v36;
      if (v36)
      {
        v26 = (unint64_t *)&v36->__shared_owners_;
        do
          v27 = __ldaxr(v26);
        while (__stlxr(v27 - 1, v26));
        if (!v27)
        {
          ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
          std::__shared_weak_count::__release_weak(v25);
        }
      }
      if ((v24 & 1) == 0)
        break;
      v6 = (_QWORD *)v6[1];
      v5 = *a2;
      if (v6 == (_QWORD *)(*a2 + 24))
      {
        if (!v10)
          goto LABEL_38;
        v28 = *(_QWORD *)(v5 + 40) - 1;
        if (*(_QWORD *)(v5 + 40) != 1)
        {
          v34 = *v11;
          *(_QWORD *)(v34 + 8) = v11[1];
          *(_QWORD *)v11[1] = v34;
          *(_QWORD *)(v5 + 40) = v28;
          std::shared_ptr<re::AssetManager>::~shared_ptr[abi:nn180100]((uint64_t)(v11 + 2));
          operator delete(v11);
          *(_BYTE *)(a4 + 24) = 1;
          goto LABEL_38;
        }
        v29 = *(_QWORD *)(v5 + 32);
        v31 = *(_QWORD *)(v29 + 16);
        v30 = *(_QWORD *)(v29 + 24);
        *a1 = v31;
        a1[1] = v30;
        if (v30)
        {
          v32 = (unint64_t *)(v30 + 8);
          do
            v33 = __ldxr(v32);
          while (__stxr(v33 + 1, v32));
        }
        return;
      }
    }
  }
}

void csq::v2::OrPredicate<re::ecs2::Entity,re::query::SceneEntityDataSource>::~OrPredicate(_QWORD *a1)
{
  csq::graph::DirectedGraphNode<csq::v2::PredicateBase<re::ecs2::Entity,re::query::SceneEntityDataSource>>::~DirectedGraphNode(a1);
  JUMPOUT(0x2276933B8);
}

uint64_t csq::v2::OrPredicate<re::ecs2::Entity,re::query::SceneEntityDataSource>::evaluate(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  char v11;
  unint64_t v12;

  v3 = (_QWORD *)(a1 + 24);
  v4 = *(_QWORD **)(a1 + 32);
  if (v4 == (_QWORD *)(a1 + 24))
    return 0;
  while (1)
  {
    v7 = v4[2];
    v8 = (std::__shared_weak_count *)v4[3];
    if (v8)
      break;
    if (((*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v7 + 16))(v7, a2, a3) & 1) != 0)
      return 1;
LABEL_12:
    v4 = (_QWORD *)v4[1];
    if (v4 == v3)
      return 0;
  }
  p_shared_owners = (unint64_t *)&v8->__shared_owners_;
  do
    v10 = __ldxr(p_shared_owners);
  while (__stxr(v10 + 1, p_shared_owners));
  v11 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v7 + 16))(v7, a2, a3);
  do
    v12 = __ldaxr(p_shared_owners);
  while (__stlxr(v12 - 1, p_shared_owners));
  if (!v12)
  {
    ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
    std::__shared_weak_count::__release_weak(v8);
  }
  if ((v11 & 1) == 0)
    goto LABEL_12;
  return 1;
}

void csq::v2::OrPredicate<re::ecs2::Entity,re::query::SceneEntityDataSource>::forEachInSubset(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  _QWORD *v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t *v17;
  uint64_t *v18;
  std::__shared_weak_count *v19;
  uint64_t v20;
  unint64_t *v21;
  unint64_t v22;
  _QWORD *v23;
  uint64_t v24;
  unint64_t *v25;
  unint64_t v26;
  _QWORD *v27;
  _QWORD *v28;
  void *v29;
  std::__shared_weak_count *v30;
  unint64_t *v31;
  unint64_t v32;
  std::__shared_weak_count *v33;
  unint64_t *v34;
  unint64_t v35;
  unint64_t *v36;
  unint64_t v37;
  uint64_t v38;
  _QWORD *v39;
  uint64_t v40;
  uint64_t v41;
  void *v42[2];
  void *__p[2];
  int v44;
  uint64_t v45;
  std::__shared_weak_count *v46;
  uint64_t v47;
  std::__shared_weak_count *v48;
  _QWORD v49[3];
  _QWORD *v50;
  _BYTE v51[24];
  _BYTE *v52;
  uint64_t v53;

  v53 = *MEMORY[0x24BDAC8D0];
  v6 = *(_QWORD *)(a2 + 8);
  v8 = *(std::__shared_weak_count **)(a2 + 16);
  v7 = (_QWORD *)(a2 + 8);
  if (!v8)
  {
    v47 = 0;
    v48 = 0;
    v11 = v6;
    v45 = 0;
    v46 = 0;
LABEL_12:
    v15 = *(_QWORD *)(v11 + 48) - *(_QWORD *)(v11 + 40);
    goto LABEL_13;
  }
  p_shared_owners = (unint64_t *)&v8->__shared_owners_;
  do
    v10 = __ldxr(p_shared_owners);
  while (__stxr(v10 + 1, p_shared_owners));
  v47 = 0;
  v48 = 0;
  v45 = 0;
  v46 = 0;
  v11 = *(_QWORD *)(a2 + 8);
  v12 = *(std::__shared_weak_count **)(a2 + 16);
  if (!v12)
    goto LABEL_12;
  v13 = (unint64_t *)&v12->__shared_owners_;
  do
    v14 = __ldxr(v13);
  while (__stxr(v14 + 1, v13));
  v15 = *(_QWORD *)(v11 + 48) - *(_QWORD *)(v11 + 40);
  do
    v16 = __ldaxr(v13);
  while (__stlxr(v16 - 1, v13));
  if (!v16)
  {
    ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
    std::__shared_weak_count::__release_weak(v12);
  }
LABEL_13:
  if (!(v15 >> 4))
    goto LABEL_34;
  v41 = (uint64_t)v8;
  if (v15 >> 4 == 1)
  {
    std::shared_ptr<re::audio::REPHASEEntity>::operator=[abi:ne180100](&v47, **(_QWORD **)(v6 + 40), *(_QWORD *)(*(_QWORD *)(v6 + 40) + 8));
    std::shared_ptr<re::audio::REPHASEEntity>::operator=[abi:ne180100](v7, v47, (uint64_t)v48);
    std::shared_ptr<re::audio::REPHASEEntity>::operator=[abi:ne180100](&v45, *(_QWORD *)(*(_QWORD *)(v47 + 24) + 16), *(_QWORD *)(*(_QWORD *)(v47 + 24) + 24));
    v38 = v45;
    std::__function::__value_func<void ()(void)>::__value_func[abi:nn180100]((uint64_t)v51, a4);
    (*(void (**)(uint64_t, uint64_t, uint64_t, _BYTE *))(*(_QWORD *)v38 + 24))(v38, a2, v38, v51);
    v39 = v52;
    if (v52 == v51)
    {
      v40 = 4;
      v39 = v51;
    }
    else
    {
      if (!v52)
      {
LABEL_55:
        std::shared_ptr<re::audio::REPHASEEntity>::operator=[abi:ne180100](v7, v6, (uint64_t)v8);
        goto LABEL_34;
      }
      v40 = 5;
    }
    (*(void (**)(void))(*v39 + 8 * v40))();
    goto LABEL_55;
  }
  *(_OWORD *)v42 = 0u;
  *(_OWORD *)__p = 0u;
  v44 = 1065353216;
  v17 = *(uint64_t **)(v6 + 40);
  v18 = *(uint64_t **)(v6 + 48);
  while (v17 != v18)
  {
    v20 = *v17;
    v19 = (std::__shared_weak_count *)v17[1];
    if (v19)
    {
      v21 = (unint64_t *)&v19->__shared_owners_;
      do
        v22 = __ldxr(v21);
      while (__stxr(v22 + 1, v21));
    }
    std::shared_ptr<re::audio::REPHASEEntity>::operator=[abi:ne180100](v7, v20, (uint64_t)v19);
    std::shared_ptr<re::audio::REPHASEEntity>::operator=[abi:ne180100](&v45, *(_QWORD *)(*(_QWORD *)(v20 + 24) + 16), *(_QWORD *)(*(_QWORD *)(v20 + 24) + 24));
    v49[0] = &off_24ED9B8C0;
    v49[1] = v42;
    v49[2] = a4;
    v50 = v49;
    (*(void (**)(uint64_t, uint64_t, uint64_t, _QWORD *))(*(_QWORD *)v45 + 24))(v45, a2, v45, v49);
    v23 = v50;
    if (v50 == v49)
    {
      v23 = v49;
      v24 = 4;
    }
    else
    {
      if (!v50)
        goto LABEL_24;
      v24 = 5;
    }
    (*(void (**)(void))(*v23 + 8 * v24))();
LABEL_24:
    if (v19)
    {
      v25 = (unint64_t *)&v19->__shared_owners_;
      do
        v26 = __ldaxr(v25);
      while (__stlxr(v26 - 1, v25));
      if (!v26)
      {
        ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
        std::__shared_weak_count::__release_weak(v19);
      }
    }
    v17 += 2;
  }
  v8 = (std::__shared_weak_count *)v41;
  std::shared_ptr<re::audio::REPHASEEntity>::operator=[abi:ne180100](v7, v6, v41);
  v27 = __p[0];
  if (__p[0])
  {
    do
    {
      v28 = (_QWORD *)*v27;
      operator delete(v27);
      v27 = v28;
    }
    while (v28);
  }
  v29 = v42[0];
  v42[0] = 0;
  if (v29)
    operator delete(v29);
LABEL_34:
  v30 = v46;
  if (v46)
  {
    v31 = (unint64_t *)&v46->__shared_owners_;
    do
      v32 = __ldaxr(v31);
    while (__stlxr(v32 - 1, v31));
    if (!v32)
    {
      ((void (*)(std::__shared_weak_count *))v30->__on_zero_shared)(v30);
      std::__shared_weak_count::__release_weak(v30);
    }
  }
  v33 = v48;
  if (v48)
  {
    v34 = (unint64_t *)&v48->__shared_owners_;
    do
      v35 = __ldaxr(v34);
    while (__stlxr(v35 - 1, v34));
    if (!v35)
    {
      ((void (*)(std::__shared_weak_count *))v33->__on_zero_shared)(v33);
      std::__shared_weak_count::__release_weak(v33);
    }
  }
  if (v8)
  {
    v36 = (unint64_t *)&v8->__shared_owners_;
    do
      v37 = __ldaxr(v36);
    while (__stlxr(v37 - 1, v36));
    if (!v37)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
}

void csq::v2::OrPredicate<re::ecs2::Entity,re::query::SceneEntityDataSource>::postCreateOptimize(uint64_t a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  _QWORD *v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  std::__shared_weak_count *v9;
  std::__shared_weak_count *v10;
  uint64_t v11;
  unint64_t *v12;
  unint64_t v13;
  uint64_t *i;
  const void *v15;
  _QWORD **v16;
  _QWORD **v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  uint64_t *v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t *v26;
  unint64_t v27;
  unint64_t *v28;
  unint64_t v29;
  std::__shared_weak_count *v30;
  unint64_t *v31;
  unint64_t v32;
  std::__shared_weak_count *v33;
  unint64_t *v34;
  unint64_t v35;
  std::__shared_weak_count *v36;
  _QWORD *v37;
  uint64_t v38;
  std::__shared_weak_count *v39;
  uint64_t v40;
  std::__shared_weak_count *v41;
  uint64_t v42;
  std::__shared_weak_count *v43;

  v5 = (_QWORD *)(a1 + 8);
  std::shared_ptr<csq::v2::PredicateBase<re::ecs2::Entity,re::query::SceneEntityDataSource>>::shared_ptr[abi:nn180100]<csq::v2::PredicateBase<re::ecs2::Entity,re::query::SceneEntityDataSource>,void>(&v40, (_QWORD *)(a1 + 8));
  csq::v2::applyDominantAndIdentityLaws<csq::v2::PredicateBase<re::ecs2::Entity,re::query::SceneEntityDataSource>>(&v42, &v40, 1, a2);
  v6 = v41;
  if (v41)
  {
    p_shared_owners = (unint64_t *)&v41->__shared_owners_;
    do
      v8 = __ldaxr(p_shared_owners);
    while (__stlxr(v8 - 1, p_shared_owners));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  if (v42)
  {
    v9 = v43;
    *a3 = v42;
    a3[1] = v9;
  }
  else
  {
    v37 = a3;
    std::shared_ptr<csq::v2::PredicateBase<re::ecs2::Entity,re::query::SceneEntityDataSource>>::shared_ptr[abi:nn180100]<csq::v2::PredicateBase<re::ecs2::Entity,re::query::SceneEntityDataSource>,void>(&v38, v5);
    v11 = v38;
    v10 = v39;
    if (v39)
    {
      v12 = (unint64_t *)&v39->__shared_owners_;
      do
        v13 = __ldxr(v12);
      while (__stxr(v13 + 1, v12));
    }
    v36 = v10;
    for (i = *(uint64_t **)(v11 + 32); i != (uint64_t *)(v11 + 24); i = (uint64_t *)i[1])
    {
      v15 = (const void *)i[2];
      if (v15)
      {
        if (v16)
        {
          v17 = v16;
          v18 = (std::__shared_weak_count *)i[3];
          if (v18)
          {
            v19 = (unint64_t *)&v18->__shared_owners_;
            do
              v20 = __ldxr(v19);
            while (__stxr(v20 + 1, v19));
          }
          if (v16[5])
          {
            v21 = std::list<std::shared_ptr<csq::v2::PredicateBase<re::ecs2::Entity,re::query::SceneEntityDataSource>>>::__insert_with_sentinel[abi:nn180100]<std::__list_iterator<std::shared_ptr<csq::v2::PredicateBase<re::ecs2::Entity,re::query::SceneEntityDataSource>>,void *>,std::__list_iterator<std::shared_ptr<csq::v2::PredicateBase<re::ecs2::Entity,re::query::SceneEntityDataSource>>,void *>>(v11 + 24, i, v16[4], v16 + 3);
            v22 = *i;
            *(_QWORD *)(v22 + 8) = i[1];
            *(_QWORD *)i[1] = v22;
            --*(_QWORD *)(v11 + 40);
            std::shared_ptr<re::AssetManager>::~shared_ptr[abi:nn180100]((uint64_t)(i + 2));
            operator delete(i);
            v23 = (unint64_t)v17[5];
            i = v21;
            v24 = v23 - 1;
            if ((uint64_t)(v23 - 1) < 0)
            {
              do
                i = (uint64_t *)*i;
              while (!__CFADD__(v24++, 1));
            }
            else if (v23 != 1)
            {
              do
              {
                i = (uint64_t *)i[1];
                --v23;
              }
              while (v23 > 1);
            }
            *(_BYTE *)(a2 + 24) = 1;
          }
          if (v18)
          {
            v26 = (unint64_t *)&v18->__shared_owners_;
            do
              v27 = __ldaxr(v26);
            while (__stlxr(v27 - 1, v26));
            if (!v27)
            {
              ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
              std::__shared_weak_count::__release_weak(v18);
            }
          }
        }
      }
    }
    if (v36)
    {
      v28 = (unint64_t *)&v36->__shared_owners_;
      do
        v29 = __ldaxr(v28);
      while (__stlxr(v29 - 1, v28));
      if (!v29)
      {
        ((void (*)(std::__shared_weak_count *))v36->__on_zero_shared)(v36);
        std::__shared_weak_count::__release_weak(v36);
      }
    }
    v30 = v39;
    if (v39)
    {
      v31 = (unint64_t *)&v39->__shared_owners_;
      do
        v32 = __ldaxr(v31);
      while (__stlxr(v32 - 1, v31));
      if (!v32)
      {
        ((void (*)(std::__shared_weak_count *))v30->__on_zero_shared)(v30);
        std::__shared_weak_count::__release_weak(v30);
      }
    }
    *v37 = 0;
    v37[1] = 0;
    v33 = v43;
    if (v43)
    {
      v34 = (unint64_t *)&v43->__shared_owners_;
      do
        v35 = __ldaxr(v34);
      while (__stlxr(v35 - 1, v34));
      if (!v35)
      {
        ((void (*)(std::__shared_weak_count *))v33->__on_zero_shared)(v33);
        std::__shared_weak_count::__release_weak(v33);
      }
    }
  }
}

void csq::v2::OrPredicate<re::ecs2::Entity,re::query::SceneEntityDataSource>::preEvaluateOptimize(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  BOOL v18;
  uint64_t v19;
  std::__shared_weak_count *v20;
  unint64_t *v21;
  unint64_t v22;
  unint64_t shared_owners;
  std::__shared_weak_count_vtbl *v24;
  unint64_t v25;
  std::__shared_weak_count_vtbl *p_on_zero_shared;
  std::__shared_weak_count_vtbl *shared_weak_owners;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  unint64_t v31;
  char *v32;
  char *v33;
  unint64_t *v34;
  unint64_t v35;
  char *v36;
  __int128 v37;
  uint64_t v38;
  unint64_t *v39;
  unint64_t v40;
  unint64_t v41;
  unint64_t *v42;
  unint64_t v43;
  std::__shared_weak_count *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  std::__shared_weak_count *v48;

  std::shared_ptr<csq::v2::PredicateBase<re::ecs2::Entity,re::query::SceneEntityDataSource>>::shared_ptr[abi:nn180100]<csq::v2::PredicateBase<re::ecs2::Entity,re::query::SceneEntityDataSource>,void>(&v47, (_QWORD *)(a1 + 8));
  v5 = v47;
  v4 = (uint64_t)v48;
  if (v48)
  {
    p_shared_owners = (unint64_t *)&v48->__shared_owners_;
    do
      v7 = __ldxr(p_shared_owners);
    while (__stxr(v7 + 1, p_shared_owners));
    v8 = v48;
    if (v48)
    {
      v9 = (unint64_t *)&v48->__shared_owners_;
      do
        v10 = __ldaxr(v9);
      while (__stlxr(v10 - 1, v9));
      if (!v10)
      {
        ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
        std::__shared_weak_count::__release_weak(v8);
      }
    }
  }
  v11 = (std::__shared_weak_count *)operator new(0x60uLL);
  v11->__shared_owners_ = 0;
  v12 = (unint64_t *)&v11->__shared_owners_;
  v11->__shared_weak_owners_ = 0;
  v11->__vftable = (std::__shared_weak_count_vtbl *)&off_24ED9B950;
  v11[1].__vftable = 0;
  v11[1].__shared_owners_ = 0;
  v11[1].__shared_weak_owners_ = (uint64_t)&v11[1].__shared_weak_owners_;
  v11[2].__vftable = (std::__shared_weak_count_vtbl *)&v11[1].__shared_weak_owners_;
  *(_OWORD *)&v11[2].__shared_owners_ = 0u;
  v11[3].std::__shared_count = 0u;
  LOBYTE(v11[3].__shared_weak_owners_) = 0;
  std::list<std::shared_ptr<csq::v2::PredicateBase<re::ecs2::Entity,re::query::SceneEntityDataSource>>>::push_back(&v11[1].__shared_weak_owners_, v5, v4);
  v13 = a1 + 24;
  v14 = *(_QWORD *)(a1 + 32);
  v44 = (std::__shared_weak_count *)v4;
  v15 = 0;
  if (v14 != a1 + 24)
  {
    v45 = a1 + 24;
    do
    {
      (*(void (**)(_QWORD, uint64_t))(**(_QWORD **)(v14 + 16) + 40))(*(_QWORD *)(v14 + 16), a2);
      v16 = *(_QWORD *)(a2 + 8);
      if (!*(_BYTE *)(v16 + 64))
        goto LABEL_55;
      v17 = *(_QWORD *)(a2 + 32);
      v18 = __CFADD__(v15, v17);
      v19 = v15 + v17;
      if (v18)
        v15 = -1;
      else
        v15 = v19;
      v20 = *(std::__shared_weak_count **)(a2 + 16);
      if (v20)
      {
        v21 = (unint64_t *)&v20->__shared_owners_;
        do
          v22 = __ldxr(v21);
        while (__stxr(v22 + 1, v21));
        v24 = v11[3].__vftable;
        shared_owners = v11[3].__shared_owners_;
        if ((unint64_t)v24 < shared_owners)
        {
          v24->~__shared_weak_count = (void (__cdecl *)(std::__shared_weak_count *__hidden))v16;
          v24->~__shared_weak_count_0 = (void (__cdecl *)(std::__shared_weak_count *__hidden))v20;
          do
            v25 = __ldxr(v21);
          while (__stxr(v25 + 1, v21));
          goto LABEL_24;
        }
      }
      else
      {
        v24 = v11[3].__vftable;
        shared_owners = v11[3].__shared_owners_;
        if ((unint64_t)v24 < shared_owners)
        {
          v24->~__shared_weak_count = (void (__cdecl *)(std::__shared_weak_count *__hidden))v16;
          v24->~__shared_weak_count_0 = 0;
LABEL_24:
          p_on_zero_shared = (std::__shared_weak_count_vtbl *)&v24->__on_zero_shared;
          goto LABEL_44;
        }
      }
      v46 = v15;
      shared_weak_owners = (std::__shared_weak_count_vtbl *)v11[2].__shared_weak_owners_;
      v28 = ((char *)v24 - (char *)shared_weak_owners) >> 4;
      v29 = v28 + 1;
      if ((unint64_t)(v28 + 1) >> 60)
        abort();
      v30 = shared_owners - (_QWORD)shared_weak_owners;
      if (v30 >> 3 > v29)
        v29 = v30 >> 3;
      if ((unint64_t)v30 >= 0x7FFFFFFFFFFFFFF0)
        v31 = 0xFFFFFFFFFFFFFFFLL;
      else
        v31 = v29;
      if (v31 >> 60)
        std::__throw_bad_array_new_length[abi:nn180100]();
      v32 = (char *)operator new(16 * v31);
      v33 = &v32[16 * v28];
      *(_QWORD *)v33 = v16;
      *((_QWORD *)v33 + 1) = v20;
      if (v20)
      {
        v34 = (unint64_t *)&v20->__shared_owners_;
        do
          v35 = __ldxr(v34);
        while (__stxr(v35 + 1, v34));
        shared_weak_owners = (std::__shared_weak_count_vtbl *)v11[2].__shared_weak_owners_;
        v24 = v11[3].__vftable;
      }
      if (v24 == shared_weak_owners)
      {
        p_on_zero_shared = (std::__shared_weak_count_vtbl *)(v33 + 16);
        v11[2].__shared_weak_owners_ = (uint64_t)v33;
        v11[3].__vftable = (std::__shared_weak_count_vtbl *)(v33 + 16);
        v11[3].__shared_owners_ = (uint64_t)&v32[16 * v31];
      }
      else
      {
        v36 = &v32[16 * v28];
        do
        {
          v37 = *(_OWORD *)&v24[-1].__get_deleter;
          v24 = (std::__shared_weak_count_vtbl *)((char *)v24 - 16);
          *((_OWORD *)v36 - 1) = v37;
          v36 -= 16;
          v24->~__shared_weak_count = 0;
          v24->~__shared_weak_count_0 = 0;
        }
        while (v24 != shared_weak_owners);
        shared_weak_owners = (std::__shared_weak_count_vtbl *)v11[2].__shared_weak_owners_;
        v38 = (uint64_t)v11[3].__vftable;
        p_on_zero_shared = (std::__shared_weak_count_vtbl *)(v33 + 16);
        v11[2].__shared_weak_owners_ = (uint64_t)v36;
        v11[3].__vftable = (std::__shared_weak_count_vtbl *)(v33 + 16);
        v11[3].__shared_owners_ = (uint64_t)&v32[16 * v31];
        if ((std::__shared_weak_count_vtbl *)v38 != shared_weak_owners)
        {
          v13 = v45;
          v15 = v46;
          do
          {
            v38 -= 16;
            std::shared_ptr<re::AssetManager>::~shared_ptr[abi:nn180100](v38);
          }
          while ((std::__shared_weak_count_vtbl *)v38 != shared_weak_owners);
          if (!shared_weak_owners)
            goto LABEL_44;
LABEL_43:
          operator delete(shared_weak_owners);
          goto LABEL_44;
        }
      }
      v13 = v45;
      v15 = v46;
      if (shared_weak_owners)
        goto LABEL_43;
LABEL_44:
      v11[3].__vftable = p_on_zero_shared;
      if (v20)
      {
        v39 = (unint64_t *)&v20->__shared_owners_;
        do
          v40 = __ldaxr(v39);
        while (__stlxr(v40 - 1, v39));
        if (!v40)
        {
          ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
          std::__shared_weak_count::__release_weak(v20);
        }
      }
      *(_BYTE *)(a2 + 24) = 0;
      *(_QWORD *)(a2 + 32) = -1;
      csq::v2::EvaluationContext<re::ecs2::Entity,re::query::SceneEntityDataSource>::reset(a2);
      v14 = *(_QWORD *)(v14 + 8);
    }
    while (v14 != v13);
  }
  std::shared_ptr<re::audio::REPHASEEntity>::operator=[abi:ne180100]((_QWORD *)(a2 + 8), (uint64_t)&v11[1], (uint64_t)v11);
  *(_QWORD *)(a2 + 32) = v15;
  *(_BYTE *)(*(_QWORD *)(a2 + 8) + 64) = 2;
  *(_BYTE *)(a2 + 24) = 1;
  do
LABEL_55:
    v41 = __ldaxr(v12);
  while (__stlxr(v41 - 1, v12));
  if (!v41)
  {
    ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
    std::__shared_weak_count::__release_weak(v11);
  }
  if (v44)
  {
    v42 = (unint64_t *)&v44->__shared_owners_;
    do
      v43 = __ldaxr(v42);
    while (__stlxr(v43 - 1, v42));
    if (!v43)
    {
      ((void (*)(std::__shared_weak_count *))v44->__on_zero_shared)(v44);
      std::__shared_weak_count::__release_weak(v44);
    }
  }
}

void std::__function::__func<csq::v2::OrPredicate<re::ecs2::Entity,re::query::SceneEntityDataSource>::forEachInSubset(csq::v2::EvaluationContext<re::ecs2::Entity,re::query::SceneEntityDataSource> &,csq::v2::PredicateBase<re::ecs2::Entity,re::query::SceneEntityDataSource> *,std::function<void ()(re::ecs2::Entity*)>)::{lambda(re::ecs2::Entity*)#1},std::allocator<csq::v2::OrPredicate<re::ecs2::Entity,re::query::SceneEntityDataSource>::forEachInSubset(csq::v2::EvaluationContext<re::ecs2::Entity,re::query::SceneEntityDataSource> &,csq::v2::PredicateBase<re::ecs2::Entity,re::query::SceneEntityDataSource> *,std::function<void ()(re::ecs2::Entity*)>)::{lambda(re::ecs2::Entity*)#1}>,void ()(re::ecs2::Entity*)>::~__func()
{
  JUMPOUT(0x2276933B8);
}

__n128 std::__function::__func<csq::v2::OrPredicate<re::ecs2::Entity,re::query::SceneEntityDataSource>::forEachInSubset(csq::v2::EvaluationContext<re::ecs2::Entity,re::query::SceneEntityDataSource> &,csq::v2::PredicateBase<re::ecs2::Entity,re::query::SceneEntityDataSource> *,std::function<void ()(re::ecs2::Entity*)>)::{lambda(re::ecs2::Entity*)#1},std::allocator<csq::v2::OrPredicate<re::ecs2::Entity,re::query::SceneEntityDataSource>::forEachInSubset(csq::v2::EvaluationContext<re::ecs2::Entity,re::query::SceneEntityDataSource> &,csq::v2::PredicateBase<re::ecs2::Entity,re::query::SceneEntityDataSource> *,std::function<void ()(re::ecs2::Entity*)>)::{lambda(re::ecs2::Entity*)#1}>,void ()(re::ecs2::Entity*)>::__clone(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = &off_24ED9B8C0;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 std::__function::__func<csq::v2::OrPredicate<re::ecs2::Entity,re::query::SceneEntityDataSource>::forEachInSubset(csq::v2::EvaluationContext<re::ecs2::Entity,re::query::SceneEntityDataSource> &,csq::v2::PredicateBase<re::ecs2::Entity,re::query::SceneEntityDataSource> *,std::function<void ()(re::ecs2::Entity*)>)::{lambda(re::ecs2::Entity*)#1},std::allocator<csq::v2::OrPredicate<re::ecs2::Entity,re::query::SceneEntityDataSource>::forEachInSubset(csq::v2::EvaluationContext<re::ecs2::Entity,re::query::SceneEntityDataSource> &,csq::v2::PredicateBase<re::ecs2::Entity,re::query::SceneEntityDataSource> *,std::function<void ()(re::ecs2::Entity*)>)::{lambda(re::ecs2::Entity*)#1}>,void ()(re::ecs2::Entity*)>::__clone(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_24ED9B8C0;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void std::__function::__func<csq::v2::OrPredicate<re::ecs2::Entity,re::query::SceneEntityDataSource>::forEachInSubset(csq::v2::EvaluationContext<re::ecs2::Entity,re::query::SceneEntityDataSource> &,csq::v2::PredicateBase<re::ecs2::Entity,re::query::SceneEntityDataSource> *,std::function<void ()(re::ecs2::Entity*)>)::{lambda(re::ecs2::Entity*)#1},std::allocator<csq::v2::OrPredicate<re::ecs2::Entity,re::query::SceneEntityDataSource>::forEachInSubset(csq::v2::EvaluationContext<re::ecs2::Entity,re::query::SceneEntityDataSource> &,csq::v2::PredicateBase<re::ecs2::Entity,re::query::SceneEntityDataSource> *,std::function<void ()(re::ecs2::Entity*)>)::{lambda(re::ecs2::Entity*)#1}>,void ()(re::ecs2::Entity*)>::operator()(uint64_t a1, uint64_t *a2)
{
  unint64_t v2;
  uint64_t v4;
  _QWORD *v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  int8x8_t v9;
  uint8x8_t v10;
  unint64_t v11;
  _QWORD *v12;
  _QWORD *i;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  float *v17;
  unint64_t v18;
  uint8x8_t v19;
  _QWORD *v20;
  _QWORD *j;
  unint64_t v22;
  _QWORD *v23;
  float v24;
  float v25;
  _BOOL8 v26;
  unint64_t v27;
  unint64_t v28;
  int8x8_t prime;
  void *v30;
  _QWORD *v31;
  uint64_t v32;
  _QWORD *v33;
  unint64_t v34;
  uint8x8_t v35;
  unint64_t v36;
  uint8x8_t v37;
  uint64_t v38;
  _QWORD *v39;
  unint64_t v40;
  _QWORD *v41;
  _QWORD *v42;
  uint64_t v43;
  unint64_t v44;
  _QWORD *v45;
  uint64_t v46;

  v4 = *a2;
  v5 = *(_QWORD **)(a1 + 8);
  v6 = 0x9DDFEA08EB382D69 * ((8 * *a2 + 8) ^ HIDWORD(*a2));
  v7 = 0x9DDFEA08EB382D69 * (HIDWORD(*a2) ^ (v6 >> 47) ^ v6);
  v8 = 0x9DDFEA08EB382D69 * (v7 ^ (v7 >> 47));
  v9 = (int8x8_t)v5[1];
  if (v9)
  {
    v10 = (uint8x8_t)vcnt_s8(v9);
    v10.i16[0] = vaddlv_u8(v10);
    if (v10.u32[0] > 1uLL)
    {
      v11 = v8;
      if (v8 >= *(_QWORD *)&v9)
        v11 = v8 % *(_QWORD *)&v9;
    }
    else
    {
      v11 = v8 & (*(_QWORD *)&v9 - 1);
    }
    v12 = *(_QWORD **)(*v5 + 8 * v11);
    if (v12)
    {
      for (i = (_QWORD *)*v12; i; i = (_QWORD *)*i)
      {
        v14 = i[1];
        if (v14 == v8)
        {
          if (i[2] == v4)
            return;
        }
        else
        {
          if (v10.u32[0] > 1uLL)
          {
            if (v14 >= *(_QWORD *)&v9)
              v14 %= *(_QWORD *)&v9;
          }
          else
          {
            v14 &= *(_QWORD *)&v9 - 1;
          }
          if (v14 != v11)
            break;
        }
      }
    }
  }
  v15 = *(_QWORD *)(a1 + 16);
  v46 = *a2;
  v16 = *(_QWORD *)(v15 + 24);
  if (!v16)
  {
    std::__throw_bad_function_call[abi:nn180100]();
    goto LABEL_101;
  }
  (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)v16 + 48))(v16, &v46);
  v17 = *(float **)(a1 + 8);
  v18 = *((_QWORD *)v17 + 1);
  if (v18)
  {
    v19 = (uint8x8_t)vcnt_s8((int8x8_t)v18);
    v19.i16[0] = vaddlv_u8(v19);
    if (v19.u32[0] > 1uLL)
    {
      v2 = v8;
      if (v8 >= v18)
        v2 = v8 % v18;
    }
    else
    {
      v2 = (v18 - 1) & v8;
    }
    v20 = *(_QWORD **)(*(_QWORD *)v17 + 8 * v2);
    if (v20)
    {
      for (j = (_QWORD *)*v20; j; j = (_QWORD *)*j)
      {
        v22 = j[1];
        if (v22 == v8)
        {
          if (j[2] == v4)
            return;
        }
        else
        {
          if (v19.u32[0] > 1uLL)
          {
            if (v22 >= v18)
              v22 %= v18;
          }
          else
          {
            v22 &= v18 - 1;
          }
          if (v22 != v2)
            break;
        }
      }
    }
  }
  v23 = operator new(0x18uLL);
  *v23 = 0;
  v23[1] = v8;
  v23[2] = v4;
  v24 = (float)(unint64_t)(*((_QWORD *)v17 + 3) + 1);
  v25 = v17[8];
  if (!v18 || (float)(v25 * (float)v18) < v24)
  {
    v26 = 1;
    if (v18 >= 3)
      v26 = (v18 & (v18 - 1)) != 0;
    v27 = v26 | (2 * v18);
    v28 = vcvtps_u32_f32(v24 / v25);
    if (v27 <= v28)
      prime = (int8x8_t)v28;
    else
      prime = (int8x8_t)v27;
    if (*(_QWORD *)&prime == 1)
    {
      prime = (int8x8_t)2;
    }
    else if ((*(_QWORD *)&prime & (*(_QWORD *)&prime - 1)) != 0)
    {
      prime = (int8x8_t)std::__next_prime(*(_QWORD *)&prime);
      v18 = *((_QWORD *)v17 + 1);
    }
    if (*(_QWORD *)&prime > v18)
    {
LABEL_47:
      if (!(*(_QWORD *)&prime >> 61))
      {
        v30 = operator new(8 * *(_QWORD *)&prime);
        v31 = *(_QWORD **)v17;
        *(_QWORD *)v17 = v30;
        if (v31)
          operator delete(v31);
        v32 = 0;
        *((int8x8_t *)v17 + 1) = prime;
        do
          *(_QWORD *)(*(_QWORD *)v17 + 8 * v32++) = 0;
        while (*(_QWORD *)&prime != v32);
        v33 = (_QWORD *)*((_QWORD *)v17 + 2);
        if (v33)
        {
          v34 = v33[1];
          v35 = (uint8x8_t)vcnt_s8(prime);
          v35.i16[0] = vaddlv_u8(v35);
          if (v35.u32[0] > 1uLL)
          {
            if (v34 >= *(_QWORD *)&prime)
              v34 %= *(_QWORD *)&prime;
          }
          else
          {
            v34 &= *(_QWORD *)&prime - 1;
          }
          *(_QWORD *)(*(_QWORD *)v17 + 8 * v34) = v17 + 4;
          v39 = (_QWORD *)*v33;
          if (*v33)
          {
            do
            {
              v40 = v39[1];
              if (v35.u32[0] > 1uLL)
              {
                if (v40 >= *(_QWORD *)&prime)
                  v40 %= *(_QWORD *)&prime;
              }
              else
              {
                v40 &= *(_QWORD *)&prime - 1;
              }
              if (v40 != v34)
              {
                if (!*(_QWORD *)(*(_QWORD *)v17 + 8 * v40))
                {
                  *(_QWORD *)(*(_QWORD *)v17 + 8 * v40) = v33;
                  goto LABEL_72;
                }
                *v33 = *v39;
                *v39 = **(_QWORD **)(*(_QWORD *)v17 + 8 * v40);
                **(_QWORD **)(*(_QWORD *)v17 + 8 * v40) = v39;
                v39 = v33;
              }
              v40 = v34;
LABEL_72:
              v33 = v39;
              v39 = (_QWORD *)*v39;
              v34 = v40;
            }
            while (v39);
          }
        }
        v18 = (unint64_t)prime;
        goto LABEL_76;
      }
LABEL_101:
      std::__throw_bad_array_new_length[abi:nn180100]();
    }
    if (*(_QWORD *)&prime < v18)
    {
      v36 = vcvtps_u32_f32((float)*((unint64_t *)v17 + 3) / v17[8]);
      if (v18 < 3 || (v37 = (uint8x8_t)vcnt_s8((int8x8_t)v18), v37.i16[0] = vaddlv_u8(v37), v37.u32[0] > 1uLL))
      {
        v36 = std::__next_prime(v36);
      }
      else
      {
        v38 = 1 << -(char)__clz(v36 - 1);
        if (v36 >= 2)
          v36 = v38;
      }
      if (*(_QWORD *)&prime <= v36)
        prime = (int8x8_t)v36;
      if (*(_QWORD *)&prime >= v18)
      {
        v18 = *((_QWORD *)v17 + 1);
      }
      else
      {
        if (prime)
          goto LABEL_47;
        v45 = *(_QWORD **)v17;
        *(_QWORD *)v17 = 0;
        if (v45)
          operator delete(v45);
        v18 = 0;
        *((_QWORD *)v17 + 1) = 0;
      }
    }
LABEL_76:
    if ((v18 & (v18 - 1)) != 0)
    {
      if (v8 >= v18)
        v2 = v8 % v18;
      else
        v2 = v8;
    }
    else
    {
      v2 = (v18 - 1) & v8;
    }
  }
  v41 = *(_QWORD **)v17;
  v42 = *(_QWORD **)(*(_QWORD *)v17 + 8 * v2);
  if (v42)
  {
    *v23 = *v42;
LABEL_89:
    *v42 = v23;
    goto LABEL_90;
  }
  v43 = *((_QWORD *)v17 + 2);
  *v23 = v43;
  *((_QWORD *)v17 + 2) = v23;
  v41[v2] = v17 + 4;
  if (v43)
  {
    v44 = *(_QWORD *)(v43 + 8);
    if ((v18 & (v18 - 1)) != 0)
    {
      if (v44 >= v18)
        v44 %= v18;
    }
    else
    {
      v44 &= v18 - 1;
    }
    v42 = (_QWORD *)(*(_QWORD *)v17 + 8 * v44);
    goto LABEL_89;
  }
LABEL_90:
  ++*((_QWORD *)v17 + 3);
}

uint64_t std::__function::__func<csq::v2::OrPredicate<re::ecs2::Entity,re::query::SceneEntityDataSource>::forEachInSubset(csq::v2::EvaluationContext<re::ecs2::Entity,re::query::SceneEntityDataSource> &,csq::v2::PredicateBase<re::ecs2::Entity,re::query::SceneEntityDataSource> *,std::function<void ()(re::ecs2::Entity*)>)::{lambda(re::ecs2::Entity*)#1},std::allocator<csq::v2::OrPredicate<re::ecs2::Entity,re::query::SceneEntityDataSource>::forEachInSubset(csq::v2::EvaluationContext<re::ecs2::Entity,re::query::SceneEntityDataSource> &,csq::v2::PredicateBase<re::ecs2::Entity,re::query::SceneEntityDataSource> *,std::function<void ()(re::ecs2::Entity*)>)::{lambda(re::ecs2::Entity*)#1}>,void ()(re::ecs2::Entity*)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<csq::v2::OrPredicate<re::ecs2::Entity,re::query::SceneEntityDataSource>::forEachInSubset(csq::v2::EvaluationContext<re::ecs2::Entity,re::query::SceneEntityDataSource> &,csq::v2::PredicateBase<re::ecs2::Entity,re::query::SceneEntityDataSource> *,std::function<void ()(re::ecs2::Entity*)>)::{lambda(re::ecs2::Entity*)#1},std::allocator<csq::v2::OrPredicate<re::ecs2::Entity,re::query::SceneEntityDataSource>::forEachInSubset(csq::v2::EvaluationContext<re::ecs2::Entity,re::query::SceneEntityDataSource> &,csq::v2::PredicateBase<re::ecs2::Entity,re::query::SceneEntityDataSource> *,std::function<void ()(re::ecs2::Entity*)>)::{lambda(re::ecs2::Entity*)#1}>,void ()(re::ecs2::Entity*)>::target_type()
{
}

void std::__shared_ptr_emplace<csq::v2::DataSourceTreeNode<re::ecs2::Entity,re::query::SceneEntityDataSource>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_24ED9B950;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<csq::v2::DataSourceTreeNode<re::ecs2::Entity,re::query::SceneEntityDataSource>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_24ED9B950;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x2276933B8);
}

void std::__shared_ptr_emplace<csq::v2::DataSourceTreeNode<re::ecs2::Entity,re::query::SceneEntityDataSource>>::__on_zero_shared(_QWORD *a1)
{
  void *v2;
  uint64_t v3;
  void *v4;
  std::__shared_weak_count *v5;

  v2 = (void *)a1[8];
  if (v2)
  {
    v3 = a1[9];
    v4 = v2;
    if ((void *)v3 != v2)
    {
      do
        v3 = std::shared_ptr<re::AssetManager>::~shared_ptr[abi:nn180100](v3 - 16);
      while ((void *)v3 != v2);
      v4 = (void *)a1[8];
    }
    a1[9] = v2;
    operator delete(v4);
  }
  std::__list_imp<std::shared_ptr<csq::v2::PredicateBase<re::ecs2::Entity,re::query::SceneEntityDataSource>>>::clear(a1 + 5);
  v5 = (std::__shared_weak_count *)a1[4];
  if (v5)
    std::__shared_weak_count::__release_weak(v5);
}

_QWORD *std::list<std::shared_ptr<csq::v2::PredicateBase<re::ecs2::Entity,re::query::SceneEntityDataSource>>>::push_back(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  _QWORD *result;
  unint64_t *v7;
  unint64_t v8;
  uint64_t v9;

  result = operator new(0x20uLL);
  result[2] = a2;
  result[3] = a3;
  if (a3)
  {
    v7 = (unint64_t *)(a3 + 8);
    do
      v8 = __ldxr(v7);
    while (__stxr(v8 + 1, v7));
  }
  v9 = *a1;
  *result = *a1;
  result[1] = a1;
  *(_QWORD *)(v9 + 8) = result;
  *a1 = (uint64_t)result;
  ++a1[2];
  return result;
}

void csq::v2::EvaluationContext<re::ecs2::Entity,re::query::SceneEntityDataSource>::reset(uint64_t a1)
{
  char *v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;

  v2 = (char *)operator new(0x60uLL);
  *((_QWORD *)v2 + 1) = 0;
  *((_QWORD *)v2 + 2) = 0;
  *(_QWORD *)v2 = &off_24ED9B950;
  *((_QWORD *)v2 + 11) = 0;
  *(_OWORD *)(v2 + 56) = 0u;
  *(_OWORD *)(v2 + 72) = 0u;
  *(_OWORD *)(v2 + 40) = 0u;
  *((_QWORD *)v2 + 6) = v2 + 40;
  v2[88] = 0;
  v3 = *(std::__shared_weak_count **)(a1 + 16);
  *(_QWORD *)(a1 + 16) = v2;
  *(_OWORD *)(v2 + 24) = 0u;
  *((_QWORD *)v2 + 5) = v2 + 40;
  *(_QWORD *)(a1 + 8) = v2 + 24;
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
}

void csq::v2::OrPredicate<re::ecs2::Component,re::ecs2::SceneComponentCollectionBase>::~OrPredicate(_QWORD *a1)
{
  csq::graph::DirectedGraphNode<csq::v2::PredicateBase<re::ecs2::Component,re::ecs2::SceneComponentCollectionBase>>::~DirectedGraphNode(a1);
  JUMPOUT(0x2276933B8);
}

uint64_t csq::v2::OrPredicate<re::ecs2::Component,re::ecs2::SceneComponentCollectionBase>::evaluate(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  char v11;
  unint64_t v12;

  v3 = (_QWORD *)(a1 + 24);
  v4 = *(_QWORD **)(a1 + 32);
  if (v4 == (_QWORD *)(a1 + 24))
    return 0;
  while (1)
  {
    v7 = v4[2];
    v8 = (std::__shared_weak_count *)v4[3];
    if (v8)
      break;
    if (((*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v7 + 16))(v7, a2, a3) & 1) != 0)
      return 1;
LABEL_12:
    v4 = (_QWORD *)v4[1];
    if (v4 == v3)
      return 0;
  }
  p_shared_owners = (unint64_t *)&v8->__shared_owners_;
  do
    v10 = __ldxr(p_shared_owners);
  while (__stxr(v10 + 1, p_shared_owners));
  v11 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v7 + 16))(v7, a2, a3);
  do
    v12 = __ldaxr(p_shared_owners);
  while (__stlxr(v12 - 1, p_shared_owners));
  if (!v12)
  {
    ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
    std::__shared_weak_count::__release_weak(v8);
  }
  if ((v11 & 1) == 0)
    goto LABEL_12;
  return 1;
}

void csq::v2::OrPredicate<re::ecs2::Component,re::ecs2::SceneComponentCollectionBase>::forEachInSubset(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  _QWORD *v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t *v17;
  uint64_t *v18;
  std::__shared_weak_count *v19;
  uint64_t v20;
  unint64_t *v21;
  unint64_t v22;
  _QWORD *v23;
  uint64_t v24;
  unint64_t *v25;
  unint64_t v26;
  _QWORD *v27;
  _QWORD *v28;
  void *v29;
  std::__shared_weak_count *v30;
  unint64_t *v31;
  unint64_t v32;
  std::__shared_weak_count *v33;
  unint64_t *v34;
  unint64_t v35;
  unint64_t *v36;
  unint64_t v37;
  uint64_t v38;
  _QWORD *v39;
  uint64_t v40;
  uint64_t v41;
  void *v42[2];
  void *__p[2];
  int v44;
  uint64_t v45;
  std::__shared_weak_count *v46;
  uint64_t v47;
  std::__shared_weak_count *v48;
  _QWORD v49[3];
  _QWORD *v50;
  _BYTE v51[24];
  _BYTE *v52;
  uint64_t v53;

  v53 = *MEMORY[0x24BDAC8D0];
  v6 = *(_QWORD *)(a2 + 8);
  v8 = *(std::__shared_weak_count **)(a2 + 16);
  v7 = (_QWORD *)(a2 + 8);
  if (!v8)
  {
    v47 = 0;
    v48 = 0;
    v11 = v6;
    v45 = 0;
    v46 = 0;
LABEL_12:
    v15 = *(_QWORD *)(v11 + 48) - *(_QWORD *)(v11 + 40);
    goto LABEL_13;
  }
  p_shared_owners = (unint64_t *)&v8->__shared_owners_;
  do
    v10 = __ldxr(p_shared_owners);
  while (__stxr(v10 + 1, p_shared_owners));
  v47 = 0;
  v48 = 0;
  v45 = 0;
  v46 = 0;
  v11 = *(_QWORD *)(a2 + 8);
  v12 = *(std::__shared_weak_count **)(a2 + 16);
  if (!v12)
    goto LABEL_12;
  v13 = (unint64_t *)&v12->__shared_owners_;
  do
    v14 = __ldxr(v13);
  while (__stxr(v14 + 1, v13));
  v15 = *(_QWORD *)(v11 + 48) - *(_QWORD *)(v11 + 40);
  do
    v16 = __ldaxr(v13);
  while (__stlxr(v16 - 1, v13));
  if (!v16)
  {
    ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
    std::__shared_weak_count::__release_weak(v12);
  }
LABEL_13:
  if (!(v15 >> 4))
    goto LABEL_34;
  v41 = (uint64_t)v8;
  if (v15 >> 4 == 1)
  {
    std::shared_ptr<re::audio::REPHASEEntity>::operator=[abi:ne180100](&v47, **(_QWORD **)(v6 + 40), *(_QWORD *)(*(_QWORD *)(v6 + 40) + 8));
    std::shared_ptr<re::audio::REPHASEEntity>::operator=[abi:ne180100](v7, v47, (uint64_t)v48);
    std::shared_ptr<re::audio::REPHASEEntity>::operator=[abi:ne180100](&v45, *(_QWORD *)(*(_QWORD *)(v47 + 24) + 16), *(_QWORD *)(*(_QWORD *)(v47 + 24) + 24));
    v38 = v45;
    std::__function::__value_func<void ()(void)>::__value_func[abi:nn180100]((uint64_t)v51, a4);
    (*(void (**)(uint64_t, uint64_t, uint64_t, _BYTE *))(*(_QWORD *)v38 + 24))(v38, a2, v38, v51);
    v39 = v52;
    if (v52 == v51)
    {
      v40 = 4;
      v39 = v51;
    }
    else
    {
      if (!v52)
      {
LABEL_55:
        std::shared_ptr<re::audio::REPHASEEntity>::operator=[abi:ne180100](v7, v6, (uint64_t)v8);
        goto LABEL_34;
      }
      v40 = 5;
    }
    (*(void (**)(void))(*v39 + 8 * v40))();
    goto LABEL_55;
  }
  *(_OWORD *)v42 = 0u;
  *(_OWORD *)__p = 0u;
  v44 = 1065353216;
  v17 = *(uint64_t **)(v6 + 40);
  v18 = *(uint64_t **)(v6 + 48);
  while (v17 != v18)
  {
    v20 = *v17;
    v19 = (std::__shared_weak_count *)v17[1];
    if (v19)
    {
      v21 = (unint64_t *)&v19->__shared_owners_;
      do
        v22 = __ldxr(v21);
      while (__stxr(v22 + 1, v21));
    }
    std::shared_ptr<re::audio::REPHASEEntity>::operator=[abi:ne180100](v7, v20, (uint64_t)v19);
    std::shared_ptr<re::audio::REPHASEEntity>::operator=[abi:ne180100](&v45, *(_QWORD *)(*(_QWORD *)(v20 + 24) + 16), *(_QWORD *)(*(_QWORD *)(v20 + 24) + 24));
    v49[0] = &unk_24ED9BA00;
    v49[1] = v42;
    v49[2] = a4;
    v50 = v49;
    (*(void (**)(uint64_t, uint64_t, uint64_t, _QWORD *))(*(_QWORD *)v45 + 24))(v45, a2, v45, v49);
    v23 = v50;
    if (v50 == v49)
    {
      v23 = v49;
      v24 = 4;
    }
    else
    {
      if (!v50)
        goto LABEL_24;
      v24 = 5;
    }
    (*(void (**)(void))(*v23 + 8 * v24))();
LABEL_24:
    if (v19)
    {
      v25 = (unint64_t *)&v19->__shared_owners_;
      do
        v26 = __ldaxr(v25);
      while (__stlxr(v26 - 1, v25));
      if (!v26)
      {
        ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
        std::__shared_weak_count::__release_weak(v19);
      }
    }
    v17 += 2;
  }
  v8 = (std::__shared_weak_count *)v41;
  std::shared_ptr<re::audio::REPHASEEntity>::operator=[abi:ne180100](v7, v6, v41);
  v27 = __p[0];
  if (__p[0])
  {
    do
    {
      v28 = (_QWORD *)*v27;
      operator delete(v27);
      v27 = v28;
    }
    while (v28);
  }
  v29 = v42[0];
  v42[0] = 0;
  if (v29)
    operator delete(v29);
LABEL_34:
  v30 = v46;
  if (v46)
  {
    v31 = (unint64_t *)&v46->__shared_owners_;
    do
      v32 = __ldaxr(v31);
    while (__stlxr(v32 - 1, v31));
    if (!v32)
    {
      ((void (*)(std::__shared_weak_count *))v30->__on_zero_shared)(v30);
      std::__shared_weak_count::__release_weak(v30);
    }
  }
  v33 = v48;
  if (v48)
  {
    v34 = (unint64_t *)&v48->__shared_owners_;
    do
      v35 = __ldaxr(v34);
    while (__stlxr(v35 - 1, v34));
    if (!v35)
    {
      ((void (*)(std::__shared_weak_count *))v33->__on_zero_shared)(v33);
      std::__shared_weak_count::__release_weak(v33);
    }
  }
  if (v8)
  {
    v36 = (unint64_t *)&v8->__shared_owners_;
    do
      v37 = __ldaxr(v36);
    while (__stlxr(v37 - 1, v36));
    if (!v37)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
}

void csq::v2::OrPredicate<re::ecs2::Component,re::ecs2::SceneComponentCollectionBase>::postCreateOptimize(uint64_t a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  std::__shared_weak_count *v5;
  uint64_t v6;
  std::__shared_weak_count *v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  std::__shared_weak_count *v11;
  std::__shared_weak_count *v12;
  uint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  uint64_t *v17;
  const struct __class_type_info *v18;
  const void *v19;
  _QWORD **v20;
  _QWORD **v21;
  std::__shared_weak_count *v22;
  unint64_t *v23;
  unint64_t v24;
  const struct __class_type_info *v25;
  uint64_t *v26;
  uint64_t v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t *v31;
  unint64_t v32;
  unint64_t v33;
  unint64_t v34;
  std::__shared_weak_count *v35;
  unint64_t *v36;
  unint64_t v37;
  std::__shared_weak_count *v38;
  _QWORD *v39;
  uint64_t v41[2];
  uint64_t v42;
  std::__shared_weak_count *v43;

  v6 = *(_QWORD *)(a1 + 8);
  v5 = *(std::__shared_weak_count **)(a1 + 16);
  v41[0] = v6;
  if (!v5)
    goto LABEL_46;
  v7 = std::__shared_weak_count::lock(v5);
  v41[1] = (uint64_t)v7;
  if (!v7)
    goto LABEL_46;
  v8 = v7;
  csq::v2::applyDominantAndIdentityLaws<csq::v2::PredicateBase<re::ecs2::Component,re::ecs2::SceneComponentCollectionBase>>(&v42, v41, 1, a2);
  p_shared_owners = (unint64_t *)&v8->__shared_owners_;
  do
    v10 = __ldaxr(p_shared_owners);
  while (__stlxr(v10 - 1, p_shared_owners));
  if (!v10)
  {
    ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
    std::__shared_weak_count::__release_weak(v8);
  }
  if (v42)
  {
    v11 = v43;
    *a3 = v42;
    a3[1] = v11;
    return;
  }
  v12 = *(std::__shared_weak_count **)(a1 + 16);
  if (!v12 || (v13 = *(_QWORD *)(a1 + 8), (v14 = std::__shared_weak_count::lock(v12)) == 0))
  {
LABEL_46:
    std::__throw_bad_weak_ptr[abi:nn180100]();
    csq::v2::OrPredicate<re::ecs2::Component,re::ecs2::SceneComponentCollectionBase>::preEvaluateOptimize();
    return;
  }
  v38 = v14;
  v39 = a3;
  v15 = (unint64_t *)&v14->__shared_owners_;
  do
    v16 = __ldxr(v15);
  while (__stxr(v16 + 1, v15));
  v17 = *(uint64_t **)(v13 + 32);
  if (v17 != (uint64_t *)(v13 + 24))
  {
    do
    {
      v19 = (const void *)v17[2];
      if (v19)
      {
        if (v20)
        {
          v21 = v20;
          v22 = (std::__shared_weak_count *)v17[3];
          if (v22)
          {
            v23 = (unint64_t *)&v22->__shared_owners_;
            do
              v24 = __ldxr(v23);
            while (__stxr(v24 + 1, v23));
          }
          if (v20[5])
          {
            v25 = v18;
            v26 = std::list<std::shared_ptr<csq::v2::PredicateBase<re::ecs2::Entity,re::query::SceneEntityDataSource>>>::__insert_with_sentinel[abi:nn180100]<std::__list_iterator<std::shared_ptr<csq::v2::PredicateBase<re::ecs2::Entity,re::query::SceneEntityDataSource>>,void *>,std::__list_iterator<std::shared_ptr<csq::v2::PredicateBase<re::ecs2::Entity,re::query::SceneEntityDataSource>>,void *>>(v13 + 24, v17, v20[4], v20 + 3);
            v27 = *v17;
            *(_QWORD *)(v27 + 8) = v17[1];
            *(_QWORD *)v17[1] = v27;
            --*(_QWORD *)(v13 + 40);
            std::shared_ptr<re::AssetManager>::~shared_ptr[abi:nn180100]((uint64_t)(v17 + 2));
            operator delete(v17);
            v28 = (unint64_t)v21[5];
            v17 = v26;
            v29 = v28 - 1;
            if ((uint64_t)(v28 - 1) < 0)
            {
              do
                v17 = (uint64_t *)*v17;
              while (!__CFADD__(v29++, 1));
            }
            else if (v28 != 1)
            {
              do
              {
                v17 = (uint64_t *)v17[1];
                --v28;
              }
              while (v28 > 1);
            }
            *(_BYTE *)(a2 + 24) = 1;
            v18 = v25;
          }
          if (v22)
          {
            v31 = (unint64_t *)&v22->__shared_owners_;
            do
              v32 = __ldaxr(v31);
            while (__stlxr(v32 - 1, v31));
            if (!v32)
            {
              ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
              std::__shared_weak_count::__release_weak(v22);
            }
          }
        }
      }
      v17 = (uint64_t *)v17[1];
    }
    while (v17 != (uint64_t *)(v13 + 24));
  }
  do
    v33 = __ldaxr(v15);
  while (__stlxr(v33 - 1, v15));
  if (!v33)
  {
    ((void (*)(std::__shared_weak_count *))v38->__on_zero_shared)(v38);
    std::__shared_weak_count::__release_weak(v38);
  }
  do
    v34 = __ldaxr(v15);
  while (__stlxr(v34 - 1, v15));
  if (!v34)
  {
    ((void (*)(std::__shared_weak_count *))v38->__on_zero_shared)(v38);
    std::__shared_weak_count::__release_weak(v38);
  }
  *v39 = 0;
  v39[1] = 0;
  v35 = v43;
  if (v43)
  {
    v36 = (unint64_t *)&v43->__shared_owners_;
    do
      v37 = __ldaxr(v36);
    while (__stlxr(v37 - 1, v36));
    if (!v37)
    {
      ((void (*)(std::__shared_weak_count *))v35->__on_zero_shared)(v35);
      std::__shared_weak_count::__release_weak(v35);
    }
  }
}

void csq::v2::OrPredicate<re::ecs2::Component,re::ecs2::SceneComponentCollectionBase>::preEvaluateOptimize(_QWORD *a1, uint64_t a2)
{
  std::__shared_weak_count *v3;
  uint64_t v5;
  std::__shared_weak_count *v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  unint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  BOOL v18;
  uint64_t v19;
  std::__shared_weak_count *v20;
  unint64_t *v21;
  unint64_t v22;
  unint64_t shared_owners;
  std::__shared_weak_count_vtbl *v24;
  unint64_t v25;
  std::__shared_weak_count_vtbl *p_on_zero_shared;
  std::__shared_weak_count_vtbl *shared_weak_owners;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  unint64_t v31;
  char *v32;
  char *v33;
  unint64_t *v34;
  unint64_t v35;
  char *v36;
  __int128 v37;
  uint64_t v38;
  unint64_t *v39;
  unint64_t v40;
  unint64_t v41;
  unint64_t v42;
  std::__shared_weak_count *v43;
  _QWORD *v44;
  uint64_t v45;
  uint64_t v46;

  v3 = (std::__shared_weak_count *)a1[2];
  if (!v3 || (v5 = a1[1], (v6 = std::__shared_weak_count::lock(v3)) == 0))
  {
    std::__throw_bad_weak_ptr[abi:nn180100]();
    JUMPOUT(0x225FBFAE8);
  }
  v7 = v6;
  p_shared_owners = (unint64_t *)&v6->__shared_owners_;
  do
    v9 = __ldxr(p_shared_owners);
  while (__stxr(v9 + 1, p_shared_owners));
  do
    v10 = __ldaxr(p_shared_owners);
  while (__stlxr(v10 - 1, p_shared_owners));
  if (!v10)
  {
    ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
    std::__shared_weak_count::__release_weak(v7);
  }
  v11 = (std::__shared_weak_count *)operator new(0x60uLL);
  v11->__shared_owners_ = 0;
  v12 = (unint64_t *)&v11->__shared_owners_;
  v11->__shared_weak_owners_ = 0;
  v11->__vftable = (std::__shared_weak_count_vtbl *)&off_24ED9BA90;
  v11[1].__vftable = 0;
  v11[1].__shared_owners_ = 0;
  v11[1].__shared_weak_owners_ = (uint64_t)&v11[1].__shared_weak_owners_;
  v11[2].__vftable = (std::__shared_weak_count_vtbl *)&v11[1].__shared_weak_owners_;
  *(_OWORD *)&v11[2].__shared_owners_ = 0u;
  v11[3].std::__shared_count = 0u;
  LOBYTE(v11[3].__shared_weak_owners_) = 0;
  std::list<std::shared_ptr<csq::v2::PredicateBase<re::ecs2::Entity,re::query::SceneEntityDataSource>>>::push_back(&v11[1].__shared_weak_owners_, v5, (uint64_t)v7);
  v13 = a1 + 3;
  v14 = a1[4];
  v43 = v7;
  v15 = 0;
  if ((_QWORD *)v14 != a1 + 3)
  {
    v44 = a1 + 3;
    v45 = a2;
    while (1)
    {
      (*(void (**)(_QWORD, uint64_t))(**(_QWORD **)(v14 + 16) + 40))(*(_QWORD *)(v14 + 16), a2);
      v16 = *(_QWORD *)(a2 + 8);
      if (!*(_BYTE *)(v16 + 64))
        goto LABEL_56;
      v17 = *(_QWORD *)(a2 + 32);
      v18 = __CFADD__(v15, v17);
      v19 = v15 + v17;
      v15 = v18 ? -1 : v19;
      v20 = *(std::__shared_weak_count **)(a2 + 16);
      if (v20)
      {
        v21 = (unint64_t *)&v20->__shared_owners_;
        do
          v22 = __ldxr(v21);
        while (__stxr(v22 + 1, v21));
        v24 = v11[3].__vftable;
        shared_owners = v11[3].__shared_owners_;
        if ((unint64_t)v24 < shared_owners)
        {
          v24->~__shared_weak_count = (void (__cdecl *)(std::__shared_weak_count *__hidden))v16;
          v24->~__shared_weak_count_0 = (void (__cdecl *)(std::__shared_weak_count *__hidden))v20;
          do
            v25 = __ldxr(v21);
          while (__stxr(v25 + 1, v21));
          goto LABEL_23;
        }
      }
      else
      {
        v24 = v11[3].__vftable;
        shared_owners = v11[3].__shared_owners_;
        if ((unint64_t)v24 < shared_owners)
        {
          v24->~__shared_weak_count = (void (__cdecl *)(std::__shared_weak_count *__hidden))v16;
          v24->~__shared_weak_count_0 = 0;
LABEL_23:
          p_on_zero_shared = (std::__shared_weak_count_vtbl *)&v24->__on_zero_shared;
          goto LABEL_45;
        }
      }
      v46 = v15;
      shared_weak_owners = (std::__shared_weak_count_vtbl *)v11[2].__shared_weak_owners_;
      v28 = ((char *)v24 - (char *)shared_weak_owners) >> 4;
      v29 = v28 + 1;
      if ((unint64_t)(v28 + 1) >> 60)
        abort();
      v30 = shared_owners - (_QWORD)shared_weak_owners;
      if (v30 >> 3 > v29)
        v29 = v30 >> 3;
      if ((unint64_t)v30 >= 0x7FFFFFFFFFFFFFF0)
        v31 = 0xFFFFFFFFFFFFFFFLL;
      else
        v31 = v29;
      if (v31 >> 60)
        std::__throw_bad_array_new_length[abi:nn180100]();
      v32 = (char *)operator new(16 * v31);
      v33 = &v32[16 * v28];
      *(_QWORD *)v33 = v16;
      *((_QWORD *)v33 + 1) = v20;
      if (v20)
      {
        v34 = (unint64_t *)&v20->__shared_owners_;
        v15 = v46;
        do
          v35 = __ldxr(v34);
        while (__stxr(v35 + 1, v34));
        shared_weak_owners = (std::__shared_weak_count_vtbl *)v11[2].__shared_weak_owners_;
        v24 = v11[3].__vftable;
      }
      else
      {
        v15 = v46;
      }
      if (v24 == shared_weak_owners)
        break;
      v36 = v33;
      do
      {
        v37 = *(_OWORD *)&v24[-1].__get_deleter;
        v24 = (std::__shared_weak_count_vtbl *)((char *)v24 - 16);
        *((_OWORD *)v36 - 1) = v37;
        v36 -= 16;
        v24->~__shared_weak_count = 0;
        v24->~__shared_weak_count_0 = 0;
      }
      while (v24 != shared_weak_owners);
      shared_weak_owners = (std::__shared_weak_count_vtbl *)v11[2].__shared_weak_owners_;
      v38 = (uint64_t)v11[3].__vftable;
      p_on_zero_shared = (std::__shared_weak_count_vtbl *)(v33 + 16);
      v11[2].__shared_weak_owners_ = (uint64_t)v36;
      v11[3].__vftable = (std::__shared_weak_count_vtbl *)(v33 + 16);
      v11[3].__shared_owners_ = (uint64_t)&v32[16 * v31];
      if ((std::__shared_weak_count_vtbl *)v38 == shared_weak_owners)
        goto LABEL_53;
      a2 = v45;
      do
      {
        v38 -= 16;
        std::shared_ptr<re::AssetManager>::~shared_ptr[abi:nn180100](v38);
      }
      while ((std::__shared_weak_count_vtbl *)v38 != shared_weak_owners);
      if (!shared_weak_owners)
        goto LABEL_44;
LABEL_43:
      operator delete(shared_weak_owners);
LABEL_44:
      v13 = v44;
LABEL_45:
      v11[3].__vftable = p_on_zero_shared;
      if (v20)
      {
        v39 = (unint64_t *)&v20->__shared_owners_;
        do
          v40 = __ldaxr(v39);
        while (__stlxr(v40 - 1, v39));
        if (!v40)
        {
          ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
          std::__shared_weak_count::__release_weak(v20);
        }
      }
      *(_BYTE *)(a2 + 24) = 0;
      *(_QWORD *)(a2 + 32) = -1;
      csq::v2::EvaluationContext<re::ecs2::Component,re::ecs2::SceneComponentCollectionBase>::reset(a2);
      v14 = *(_QWORD *)(v14 + 8);
      if ((_QWORD *)v14 == v13)
        goto LABEL_55;
    }
    p_on_zero_shared = (std::__shared_weak_count_vtbl *)(v33 + 16);
    v11[2].__shared_weak_owners_ = (uint64_t)v33;
    v11[3].__vftable = (std::__shared_weak_count_vtbl *)(v33 + 16);
    v11[3].__shared_owners_ = (uint64_t)&v32[16 * v31];
LABEL_53:
    a2 = v45;
    if (!shared_weak_owners)
      goto LABEL_44;
    goto LABEL_43;
  }
LABEL_55:
  std::shared_ptr<re::audio::REPHASEEntity>::operator=[abi:ne180100]((_QWORD *)(a2 + 8), (uint64_t)&v11[1], (uint64_t)v11);
  *(_QWORD *)(a2 + 32) = v15;
  *(_BYTE *)(*(_QWORD *)(a2 + 8) + 64) = 2;
  *(_BYTE *)(a2 + 24) = 1;
  do
LABEL_56:
    v41 = __ldaxr(v12);
  while (__stlxr(v41 - 1, v12));
  if (!v41)
  {
    ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
    std::__shared_weak_count::__release_weak(v11);
  }
  do
    v42 = __ldaxr(p_shared_owners);
  while (__stlxr(v42 - 1, p_shared_owners));
  if (!v42)
  {
    ((void (*)(std::__shared_weak_count *))v43->__on_zero_shared)(v43);
    std::__shared_weak_count::__release_weak(v43);
  }
}

void std::__function::__func<csq::v2::OrPredicate<re::ecs2::Component,re::ecs2::SceneComponentCollectionBase>::forEachInSubset(csq::v2::EvaluationContext<re::ecs2::Component,re::ecs2::SceneComponentCollectionBase> &,csq::v2::PredicateBase<re::ecs2::Component,re::ecs2::SceneComponentCollectionBase> *,std::function<void ()(re::ecs2::Component*)>)::{lambda(re::ecs2::Component*)#1},std::allocator<csq::v2::OrPredicate<re::ecs2::Component,re::ecs2::SceneComponentCollectionBase>::forEachInSubset(csq::v2::EvaluationContext<re::ecs2::Component,re::ecs2::SceneComponentCollectionBase> &,csq::v2::PredicateBase<re::ecs2::Component,re::ecs2::SceneComponentCollectionBase> *,std::function<void ()(re::ecs2::Component*)>)::{lambda(re::ecs2::Component*)#1}>,void ()(re::ecs2::Component*)>::~__func()
{
  JUMPOUT(0x2276933B8);
}

__n128 std::__function::__func<csq::v2::OrPredicate<re::ecs2::Component,re::ecs2::SceneComponentCollectionBase>::forEachInSubset(csq::v2::EvaluationContext<re::ecs2::Component,re::ecs2::SceneComponentCollectionBase> &,csq::v2::PredicateBase<re::ecs2::Component,re::ecs2::SceneComponentCollectionBase> *,std::function<void ()(re::ecs2::Component*)>)::{lambda(re::ecs2::Component*)#1},std::allocator<csq::v2::OrPredicate<re::ecs2::Component,re::ecs2::SceneComponentCollectionBase>::forEachInSubset(csq::v2::EvaluationContext<re::ecs2::Component,re::ecs2::SceneComponentCollectionBase> &,csq::v2::PredicateBase<re::ecs2::Component,re::ecs2::SceneComponentCollectionBase> *,std::function<void ()(re::ecs2::Component*)>)::{lambda(re::ecs2::Component*)#1}>,void ()(re::ecs2::Component*)>::__clone(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = &unk_24ED9BA00;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 std::__function::__func<csq::v2::OrPredicate<re::ecs2::Component,re::ecs2::SceneComponentCollectionBase>::forEachInSubset(csq::v2::EvaluationContext<re::ecs2::Component,re::ecs2::SceneComponentCollectionBase> &,csq::v2::PredicateBase<re::ecs2::Component,re::ecs2::SceneComponentCollectionBase> *,std::function<void ()(re::ecs2::Component*)>)::{lambda(re::ecs2::Component*)#1},std::allocator<csq::v2::OrPredicate<re::ecs2::Component,re::ecs2::SceneComponentCollectionBase>::forEachInSubset(csq::v2::EvaluationContext<re::ecs2::Component,re::ecs2::SceneComponentCollectionBase> &,csq::v2::PredicateBase<re::ecs2::Component,re::ecs2::SceneComponentCollectionBase> *,std::function<void ()(re::ecs2::Component*)>)::{lambda(re::ecs2::Component*)#1}>,void ()(re::ecs2::Component*)>::__clone(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &unk_24ED9BA00;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void std::__function::__func<csq::v2::OrPredicate<re::ecs2::Component,re::ecs2::SceneComponentCollectionBase>::forEachInSubset(csq::v2::EvaluationContext<re::ecs2::Component,re::ecs2::SceneComponentCollectionBase> &,csq::v2::PredicateBase<re::ecs2::Component,re::ecs2::SceneComponentCollectionBase> *,std::function<void ()(re::ecs2::Component*)>)::{lambda(re::ecs2::Component*)#1},std::allocator<csq::v2::OrPredicate<re::ecs2::Component,re::ecs2::SceneComponentCollectionBase>::forEachInSubset(csq::v2::EvaluationContext<re::ecs2::Component,re::ecs2::SceneComponentCollectionBase> &,csq::v2::PredicateBase<re::ecs2::Component,re::ecs2::SceneComponentCollectionBase> *,std::function<void ()(re::ecs2::Component*)>)::{lambda(re::ecs2::Component*)#1}>,void ()(re::ecs2::Component*)>::operator()(uint64_t a1, uint64_t *a2)
{
  unint64_t v2;
  uint64_t v4;
  _QWORD *v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  int8x8_t v9;
  uint8x8_t v10;
  unint64_t v11;
  _QWORD *v12;
  _QWORD *i;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  float *v17;
  unint64_t v18;
  uint8x8_t v19;
  _QWORD *v20;
  _QWORD *j;
  unint64_t v22;
  _QWORD *v23;
  float v24;
  float v25;
  _BOOL8 v26;
  unint64_t v27;
  unint64_t v28;
  int8x8_t prime;
  void *v30;
  _QWORD *v31;
  uint64_t v32;
  _QWORD *v33;
  unint64_t v34;
  uint8x8_t v35;
  unint64_t v36;
  uint8x8_t v37;
  uint64_t v38;
  _QWORD *v39;
  unint64_t v40;
  _QWORD *v41;
  _QWORD *v42;
  uint64_t v43;
  unint64_t v44;
  _QWORD *v45;
  uint64_t v46;

  v4 = *a2;
  v5 = *(_QWORD **)(a1 + 8);
  v6 = 0x9DDFEA08EB382D69 * ((8 * *a2 + 8) ^ HIDWORD(*a2));
  v7 = 0x9DDFEA08EB382D69 * (HIDWORD(*a2) ^ (v6 >> 47) ^ v6);
  v8 = 0x9DDFEA08EB382D69 * (v7 ^ (v7 >> 47));
  v9 = (int8x8_t)v5[1];
  if (v9)
  {
    v10 = (uint8x8_t)vcnt_s8(v9);
    v10.i16[0] = vaddlv_u8(v10);
    if (v10.u32[0] > 1uLL)
    {
      v11 = v8;
      if (v8 >= *(_QWORD *)&v9)
        v11 = v8 % *(_QWORD *)&v9;
    }
    else
    {
      v11 = v8 & (*(_QWORD *)&v9 - 1);
    }
    v12 = *(_QWORD **)(*v5 + 8 * v11);
    if (v12)
    {
      for (i = (_QWORD *)*v12; i; i = (_QWORD *)*i)
      {
        v14 = i[1];
        if (v14 == v8)
        {
          if (i[2] == v4)
            return;
        }
        else
        {
          if (v10.u32[0] > 1uLL)
          {
            if (v14 >= *(_QWORD *)&v9)
              v14 %= *(_QWORD *)&v9;
          }
          else
          {
            v14 &= *(_QWORD *)&v9 - 1;
          }
          if (v14 != v11)
            break;
        }
      }
    }
  }
  v15 = *(_QWORD *)(a1 + 16);
  v46 = *a2;
  v16 = *(_QWORD *)(v15 + 24);
  if (!v16)
  {
    std::__throw_bad_function_call[abi:nn180100]();
    goto LABEL_101;
  }
  (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)v16 + 48))(v16, &v46);
  v17 = *(float **)(a1 + 8);
  v18 = *((_QWORD *)v17 + 1);
  if (v18)
  {
    v19 = (uint8x8_t)vcnt_s8((int8x8_t)v18);
    v19.i16[0] = vaddlv_u8(v19);
    if (v19.u32[0] > 1uLL)
    {
      v2 = v8;
      if (v8 >= v18)
        v2 = v8 % v18;
    }
    else
    {
      v2 = (v18 - 1) & v8;
    }
    v20 = *(_QWORD **)(*(_QWORD *)v17 + 8 * v2);
    if (v20)
    {
      for (j = (_QWORD *)*v20; j; j = (_QWORD *)*j)
      {
        v22 = j[1];
        if (v22 == v8)
        {
          if (j[2] == v4)
            return;
        }
        else
        {
          if (v19.u32[0] > 1uLL)
          {
            if (v22 >= v18)
              v22 %= v18;
          }
          else
          {
            v22 &= v18 - 1;
          }
          if (v22 != v2)
            break;
        }
      }
    }
  }
  v23 = operator new(0x18uLL);
  *v23 = 0;
  v23[1] = v8;
  v23[2] = v4;
  v24 = (float)(unint64_t)(*((_QWORD *)v17 + 3) + 1);
  v25 = v17[8];
  if (!v18 || (float)(v25 * (float)v18) < v24)
  {
    v26 = 1;
    if (v18 >= 3)
      v26 = (v18 & (v18 - 1)) != 0;
    v27 = v26 | (2 * v18);
    v28 = vcvtps_u32_f32(v24 / v25);
    if (v27 <= v28)
      prime = (int8x8_t)v28;
    else
      prime = (int8x8_t)v27;
    if (*(_QWORD *)&prime == 1)
    {
      prime = (int8x8_t)2;
    }
    else if ((*(_QWORD *)&prime & (*(_QWORD *)&prime - 1)) != 0)
    {
      prime = (int8x8_t)std::__next_prime(*(_QWORD *)&prime);
      v18 = *((_QWORD *)v17 + 1);
    }
    if (*(_QWORD *)&prime > v18)
    {
LABEL_47:
      if (!(*(_QWORD *)&prime >> 61))
      {
        v30 = operator new(8 * *(_QWORD *)&prime);
        v31 = *(_QWORD **)v17;
        *(_QWORD *)v17 = v30;
        if (v31)
          operator delete(v31);
        v32 = 0;
        *((int8x8_t *)v17 + 1) = prime;
        do
          *(_QWORD *)(*(_QWORD *)v17 + 8 * v32++) = 0;
        while (*(_QWORD *)&prime != v32);
        v33 = (_QWORD *)*((_QWORD *)v17 + 2);
        if (v33)
        {
          v34 = v33[1];
          v35 = (uint8x8_t)vcnt_s8(prime);
          v35.i16[0] = vaddlv_u8(v35);
          if (v35.u32[0] > 1uLL)
          {
            if (v34 >= *(_QWORD *)&prime)
              v34 %= *(_QWORD *)&prime;
          }
          else
          {
            v34 &= *(_QWORD *)&prime - 1;
          }
          *(_QWORD *)(*(_QWORD *)v17 + 8 * v34) = v17 + 4;
          v39 = (_QWORD *)*v33;
          if (*v33)
          {
            do
            {
              v40 = v39[1];
              if (v35.u32[0] > 1uLL)
              {
                if (v40 >= *(_QWORD *)&prime)
                  v40 %= *(_QWORD *)&prime;
              }
              else
              {
                v40 &= *(_QWORD *)&prime - 1;
              }
              if (v40 != v34)
              {
                if (!*(_QWORD *)(*(_QWORD *)v17 + 8 * v40))
                {
                  *(_QWORD *)(*(_QWORD *)v17 + 8 * v40) = v33;
                  goto LABEL_72;
                }
                *v33 = *v39;
                *v39 = **(_QWORD **)(*(_QWORD *)v17 + 8 * v40);
                **(_QWORD **)(*(_QWORD *)v17 + 8 * v40) = v39;
                v39 = v33;
              }
              v40 = v34;
LABEL_72:
              v33 = v39;
              v39 = (_QWORD *)*v39;
              v34 = v40;
            }
            while (v39);
          }
        }
        v18 = (unint64_t)prime;
        goto LABEL_76;
      }
LABEL_101:
      std::__throw_bad_array_new_length[abi:nn180100]();
    }
    if (*(_QWORD *)&prime < v18)
    {
      v36 = vcvtps_u32_f32((float)*((unint64_t *)v17 + 3) / v17[8]);
      if (v18 < 3 || (v37 = (uint8x8_t)vcnt_s8((int8x8_t)v18), v37.i16[0] = vaddlv_u8(v37), v37.u32[0] > 1uLL))
      {
        v36 = std::__next_prime(v36);
      }
      else
      {
        v38 = 1 << -(char)__clz(v36 - 1);
        if (v36 >= 2)
          v36 = v38;
      }
      if (*(_QWORD *)&prime <= v36)
        prime = (int8x8_t)v36;
      if (*(_QWORD *)&prime >= v18)
      {
        v18 = *((_QWORD *)v17 + 1);
      }
      else
      {
        if (prime)
          goto LABEL_47;
        v45 = *(_QWORD **)v17;
        *(_QWORD *)v17 = 0;
        if (v45)
          operator delete(v45);
        v18 = 0;
        *((_QWORD *)v17 + 1) = 0;
      }
    }
LABEL_76:
    if ((v18 & (v18 - 1)) != 0)
    {
      if (v8 >= v18)
        v2 = v8 % v18;
      else
        v2 = v8;
    }
    else
    {
      v2 = (v18 - 1) & v8;
    }
  }
  v41 = *(_QWORD **)v17;
  v42 = *(_QWORD **)(*(_QWORD *)v17 + 8 * v2);
  if (v42)
  {
    *v23 = *v42;
LABEL_89:
    *v42 = v23;
    goto LABEL_90;
  }
  v43 = *((_QWORD *)v17 + 2);
  *v23 = v43;
  *((_QWORD *)v17 + 2) = v23;
  v41[v2] = v17 + 4;
  if (v43)
  {
    v44 = *(_QWORD *)(v43 + 8);
    if ((v18 & (v18 - 1)) != 0)
    {
      if (v44 >= v18)
        v44 %= v18;
    }
    else
    {
      v44 &= v18 - 1;
    }
    v42 = (_QWORD *)(*(_QWORD *)v17 + 8 * v44);
    goto LABEL_89;
  }
LABEL_90:
  ++*((_QWORD *)v17 + 3);
}

uint64_t std::__function::__func<csq::v2::OrPredicate<re::ecs2::Component,re::ecs2::SceneComponentCollectionBase>::forEachInSubset(csq::v2::EvaluationContext<re::ecs2::Component,re::ecs2::SceneComponentCollectionBase> &,csq::v2::PredicateBase<re::ecs2::Component,re::ecs2::SceneComponentCollectionBase> *,std::function<void ()(re::ecs2::Component*)>)::{lambda(re::ecs2::Component*)#1},std::allocator<csq::v2::OrPredicate<re::ecs2::Component,re::ecs2::SceneComponentCollectionBase>::forEachInSubset(csq::v2::EvaluationContext<re::ecs2::Component,re::ecs2::SceneComponentCollectionBase> &,csq::v2::PredicateBase<re::ecs2::Component,re::ecs2::SceneComponentCollectionBase> *,std::function<void ()(re::ecs2::Component*)>)::{lambda(re::ecs2::Component*)#1}>,void ()(re::ecs2::Component*)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<csq::v2::OrPredicate<re::ecs2::Component,re::ecs2::SceneComponentCollectionBase>::forEachInSubset(csq::v2::EvaluationContext<re::ecs2::Component,re::ecs2::SceneComponentCollectionBase> &,csq::v2::PredicateBase<re::ecs2::Component,re::ecs2::SceneComponentCollectionBase> *,std::function<void ()(re::ecs2::Component*)>)::{lambda(re::ecs2::Component*)#1},std::allocator<csq::v2::OrPredicate<re::ecs2::Component,re::ecs2::SceneComponentCollectionBase>::forEachInSubset(csq::v2::EvaluationContext<re::ecs2::Component,re::ecs2::SceneComponentCollectionBase> &,csq::v2::PredicateBase<re::ecs2::Component,re::ecs2::SceneComponentCollectionBase> *,std::function<void ()(re::ecs2::Component*)>)::{lambda(re::ecs2::Component*)#1}>,void ()(re::ecs2::Component*)>::target_type()
{
}

void std::__shared_ptr_emplace<csq::v2::DataSourceTreeNode<re::ecs2::Component,re::ecs2::SceneComponentCollectionBase>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_24ED9BA90;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<csq::v2::DataSourceTreeNode<re::ecs2::Component,re::ecs2::SceneComponentCollectionBase>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_24ED9BA90;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x2276933B8);
}

void std::__shared_ptr_emplace<csq::v2::DataSourceTreeNode<re::ecs2::Component,re::ecs2::SceneComponentCollectionBase>>::__on_zero_shared(_QWORD *a1)
{
  void *v2;
  uint64_t v3;
  void *v4;
  std::__shared_weak_count *v5;

  v2 = (void *)a1[8];
  if (v2)
  {
    v3 = a1[9];
    v4 = v2;
    if ((void *)v3 != v2)
    {
      do
        v3 = std::shared_ptr<re::AssetManager>::~shared_ptr[abi:nn180100](v3 - 16);
      while ((void *)v3 != v2);
      v4 = (void *)a1[8];
    }
    a1[9] = v2;
    operator delete(v4);
  }
  std::__list_imp<std::shared_ptr<csq::v2::PredicateBase<re::ecs2::Entity,re::query::SceneEntityDataSource>>>::clear(a1 + 5);
  v5 = (std::__shared_weak_count *)a1[4];
  if (v5)
    std::__shared_weak_count::__release_weak(v5);
}

void csq::v2::EvaluationContext<re::ecs2::Component,re::ecs2::SceneComponentCollectionBase>::reset(uint64_t a1)
{
  char *v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;

  v2 = (char *)operator new(0x60uLL);
  *((_QWORD *)v2 + 1) = 0;
  *((_QWORD *)v2 + 2) = 0;
  *(_QWORD *)v2 = &off_24ED9BA90;
  *((_QWORD *)v2 + 11) = 0;
  *(_OWORD *)(v2 + 56) = 0u;
  *(_OWORD *)(v2 + 72) = 0u;
  *(_OWORD *)(v2 + 40) = 0u;
  *((_QWORD *)v2 + 6) = v2 + 40;
  v2[88] = 0;
  v3 = *(std::__shared_weak_count **)(a1 + 16);
  *(_QWORD *)(a1 + 16) = v2;
  *(_OWORD *)(v2 + 24) = 0u;
  *((_QWORD *)v2 + 5) = v2 + 40;
  *(_QWORD *)(a1 + 8) = v2 + 24;
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
}

void csq::v2::NotPredicate<re::ecs2::Entity,re::query::SceneEntityDataSource>::~NotPredicate(_QWORD *a1)
{
  csq::graph::DirectedGraphNode<csq::v2::PredicateBase<re::ecs2::Entity,re::query::SceneEntityDataSource>>::~DirectedGraphNode(a1);
  JUMPOUT(0x2276933B8);
}

uint64_t csq::v2::NotPredicate<re::ecs2::Entity,re::query::SceneEntityDataSource>::evaluate(uint64_t a1)
{
  return (*(unsigned int (**)(_QWORD))(**(_QWORD **)(*(_QWORD *)(a1 + 32) + 16) + 16))(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 16)) ^ 1;
}

void csq::v2::NotPredicate<re::ecs2::Entity,re::query::SceneEntityDataSource>::postCreateOptimize(uint64_t a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  std::__shared_weak_count *v11;
  _QWORD *v12;
  std::__shared_weak_count *v13;
  unint64_t *v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  unint64_t *v21;
  unint64_t v22;
  _QWORD *v23;
  _QWORD *v24;
  unint64_t *v25;
  unint64_t v26;
  std::__shared_weak_count *v27;
  unint64_t *v28;
  unint64_t v29;
  unint64_t *p_shared_weak_owners;
  unint64_t v31;
  unint64_t v32;
  _QWORD *v33;
  _QWORD *i;
  void (__cdecl *v35)(std::__shared_count *__hidden);
  std::__shared_weak_count *v36;
  unint64_t *v37;
  unint64_t v38;
  std::__shared_weak_count *v39;
  std::__shared_weak_count *v40;
  unint64_t *v41;
  void (__cdecl *v42)(std::__shared_count *__hidden);
  void (__cdecl *v43)(std::__shared_weak_count *__hidden);
  unint64_t v44;
  unint64_t *v45;
  unint64_t v46;
  unint64_t v47;
  std::__shared_weak_count_vtbl *v48;
  unint64_t *v49;
  unint64_t v50;
  std::__shared_weak_count_vtbl *v51;
  std::__shared_weak_count_vtbl *v52;
  unint64_t v53;
  std::__shared_weak_count_vtbl *v54;
  unint64_t v55;
  unint64_t *v56;
  unint64_t v57;
  _QWORD *v58;
  unint64_t *v59;
  unint64_t v60;
  unint64_t *v61;
  unint64_t v62;
  uint64_t v63;
  const void *v64;
  _BYTE *v65;
  _BYTE *v66;
  std::__shared_weak_count *v67;
  unint64_t *v68;
  unint64_t v69;
  unint64_t v70;
  unint64_t v71;
  unint64_t *v72;
  unint64_t v73;
  unint64_t *v74;
  unint64_t v75;
  _QWORD *v76;
  _QWORD *v77;
  std::__shared_weak_count *v78;
  std::__shared_weak_count *v79;
  uint64_t v80;
  void (__cdecl *v81)(std::__shared_weak_count *__hidden);
  uint64_t v82;
  std::__shared_weak_count *v83;

  v4 = a1;
  v6 = a1 + 24;
  v7 = *(_QWORD *)(a1 + 32);
  if (v7 != a1 + 24)
  {
    do
    {
      (*(void (**)(uint64_t *__return_ptr, _QWORD, uint64_t))(**(_QWORD **)(v7 + 16) + 32))(&v82, *(_QWORD *)(v7 + 16), a2);
      if (v82)
        std::shared_ptr<re::audio::REPHASEEntity>::operator=[abi:ne180100]((_QWORD *)(v7 + 16), v82, (uint64_t)v83);
      v8 = v83;
      if (v83)
      {
        p_shared_owners = (unint64_t *)&v83->__shared_owners_;
        do
          v10 = __ldaxr(p_shared_owners);
        while (__stlxr(v10 - 1, p_shared_owners));
        if (!v10)
        {
          ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
          std::__shared_weak_count::__release_weak(v8);
        }
      }
      v7 = *(_QWORD *)(v7 + 8);
    }
    while (v7 != v6);
    v6 = *(_QWORD *)(v4 + 32);
  }
  v11 = *(std::__shared_weak_count **)(v6 + 16);
  if (!v11)
    goto LABEL_86;
  if (v12)
  {
    v13 = *(std::__shared_weak_count **)(v6 + 24);
    if (v13)
    {
      v14 = (unint64_t *)&v13->__shared_owners_;
      do
        v15 = __ldxr(v14);
      while (__stxr(v15 + 1, v14));
    }
    *(_BYTE *)(a2 + 24) = 1;
    v16 = v12[4];
    v17 = *(_QWORD *)(v16 + 16);
    v18 = *(std::__shared_weak_count **)(v16 + 24);
    if (v18)
    {
      v19 = (unint64_t *)&v18->__shared_owners_;
      do
        v20 = __ldxr(v19);
      while (__stxr(v20 + 1, v19));
    }
    if (!v13)
      goto LABEL_23;
    v21 = (unint64_t *)&v13->__shared_owners_;
    do
      v22 = __ldaxr(v21);
    while (__stlxr(v22 - 1, v21));
    if (!v22)
    {
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
      if (v17)
        goto LABEL_24;
    }
    else
    {
LABEL_23:
      if (v17)
      {
LABEL_24:
        *a3 = v17;
        a3[1] = v18;
        return;
      }
    }
    v6 = *(_QWORD *)(v4 + 32);
    v11 = *(std::__shared_weak_count **)(v6 + 16);
    if (!v11)
    {
      v58 = 0;
      if (v18)
        goto LABEL_80;
      goto LABEL_84;
    }
    v79 = v18;
    v80 = v4;
  }
  else
  {
    v79 = 0;
    v80 = v4;
  }
  if (!v23)
  {
    v58 = 0;
    v11 = 0;
    v18 = v79;
    v4 = v80;
    if (v79)
      goto LABEL_80;
    goto LABEL_84;
  }
  v24 = v23;
  v78 = *(std::__shared_weak_count **)(v6 + 24);
  if (v78)
  {
    v25 = (unint64_t *)&v78->__shared_owners_;
    do
      v26 = __ldxr(v25);
    while (__stxr(v26 + 1, v25));
  }
  v27 = (std::__shared_weak_count *)operator new(0x48uLL);
  v11 = v27;
  v27->__shared_owners_ = 0;
  v28 = (unint64_t *)&v27->__shared_owners_;
  v27->__shared_weak_owners_ = 0;
  v27->__vftable = (std::__shared_weak_count_vtbl *)&off_24ED9BB40;
  v27[1].__vftable = (std::__shared_weak_count_vtbl *)&off_24ED9B700;
  v27[2].__vftable = (std::__shared_weak_count_vtbl *)&v27[2];
  v27[2].__shared_owners_ = (uint64_t)&v27[2];
  v81 = (void (__cdecl *)(std::__shared_weak_count *__hidden))&v27[2];
  v27[2].__shared_weak_owners_ = 0;
  do
    v29 = __ldxr(v28);
  while (__stxr(v29 + 1, v28));
  p_shared_weak_owners = (unint64_t *)&v27->__shared_weak_owners_;
  do
    v31 = __ldxr(p_shared_weak_owners);
  while (__stxr(v31 + 1, p_shared_weak_owners));
  v27[1].__shared_owners_ = (uint64_t)&v27[1];
  v27[1].__shared_weak_owners_ = (uint64_t)v27;
  do
    v32 = __ldaxr(v28);
  while (__stlxr(v32 - 1, v28));
  v76 = &v27[1].__vftable;
  v77 = a3;
  if (!v32)
  {
    ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
    std::__shared_weak_count::__release_weak(v11);
  }
  v33 = v24 + 3;
  for (i = (_QWORD *)v24[4]; i != v33; i = (_QWORD *)i[1])
  {
    v35 = (void (__cdecl *)(std::__shared_count *__hidden))i[2];
    v36 = (std::__shared_weak_count *)i[3];
    if (v36)
    {
      v37 = (unint64_t *)&v36->__shared_owners_;
      do
        v38 = __ldxr(v37);
      while (__stxr(v38 + 1, v37));
    }
    v39 = (std::__shared_weak_count *)operator new(0x48uLL);
    v40 = v39;
    v39->__shared_owners_ = 0;
    v41 = (unint64_t *)&v39->__shared_owners_;
    v39->__shared_weak_owners_ = 0;
    v39->__vftable = (std::__shared_weak_count_vtbl *)&off_24ED9BB90;
    v39[1].__vftable = (std::__shared_weak_count_vtbl *)&off_24ED9BAE0;
    v42 = (void (__cdecl *)(std::__shared_count *__hidden))&v39[1];
    v43 = (void (__cdecl *)(std::__shared_weak_count *__hidden))&v39[2];
    v39[2].__vftable = (std::__shared_weak_count_vtbl *)&v39[2];
    v39[2].__shared_owners_ = (uint64_t)&v39[2];
    v39[2].__shared_weak_owners_ = 0;
    do
      v44 = __ldxr(v41);
    while (__stxr(v44 + 1, v41));
    v45 = (unint64_t *)&v39->__shared_weak_owners_;
    do
      v46 = __ldxr(v45);
    while (__stxr(v46 + 1, v45));
    v39[1].__shared_owners_ = (uint64_t)v42;
    v39[1].__shared_weak_owners_ = (uint64_t)v39;
    do
      v47 = __ldaxr(v41);
    while (__stlxr(v47 - 1, v41));
    if (!v47)
    {
      ((void (*)(std::__shared_weak_count *))v39->__on_zero_shared)(v39);
      std::__shared_weak_count::__release_weak(v40);
    }
    v48 = (std::__shared_weak_count_vtbl *)operator new(0x20uLL);
    v48->__on_zero_shared = v35;
    v48->__get_deleter = (const void *(__cdecl *)(const std::__shared_weak_count *__hidden, const std::type_info *))v36;
    if (v36)
    {
      v49 = (unint64_t *)&v36->__shared_owners_;
      do
        v50 = __ldxr(v49);
      while (__stxr(v50 + 1, v49));
    }
    v51 = v40[2].__vftable;
    v48->~__shared_weak_count = (void (__cdecl *)(std::__shared_weak_count *__hidden))v51;
    v48->~__shared_weak_count_0 = v43;
    v51->~__shared_weak_count_0 = (void (__cdecl *)(std::__shared_weak_count *__hidden))v48;
    v40[2].__vftable = v48;
    ++v40[2].__shared_weak_owners_;
    v52 = (std::__shared_weak_count_vtbl *)operator new(0x20uLL);
    v52->__on_zero_shared = v42;
    v52->__get_deleter = (const void *(__cdecl *)(const std::__shared_weak_count *__hidden, const std::type_info *))v40;
    do
      v53 = __ldxr(v41);
    while (__stxr(v53 + 1, v41));
    v54 = v11[2].__vftable;
    v52->~__shared_weak_count = (void (__cdecl *)(std::__shared_weak_count *__hidden))v54;
    v52->~__shared_weak_count_0 = v81;
    v54->~__shared_weak_count_0 = (void (__cdecl *)(std::__shared_weak_count *__hidden))v52;
    v11[2].__vftable = v52;
    ++v11[2].__shared_weak_owners_;
    do
      v55 = __ldaxr(v41);
    while (__stlxr(v55 - 1, v41));
    if (v55)
    {
      if (!v36)
        continue;
    }
    else
    {
      ((void (*)(std::__shared_weak_count *))v40->__on_zero_shared)(v40);
      std::__shared_weak_count::__release_weak(v40);
      if (!v36)
        continue;
    }
    v56 = (unint64_t *)&v36->__shared_owners_;
    do
      v57 = __ldaxr(v56);
    while (__stlxr(v57 - 1, v56));
    if (!v57)
    {
      ((void (*)(std::__shared_weak_count *))v36->__on_zero_shared)(v36);
      std::__shared_weak_count::__release_weak(v36);
    }
  }
  *(_BYTE *)(a2 + 24) = 1;
  v18 = v79;
  v4 = v80;
  v58 = v76;
  if (!v78)
  {
    a3 = v77;
    goto LABEL_79;
  }
  v59 = (unint64_t *)&v78->__shared_owners_;
  a3 = v77;
  do
    v60 = __ldaxr(v59);
  while (__stlxr(v60 - 1, v59));
  if (v60)
  {
LABEL_79:
    if (!v79)
      goto LABEL_84;
    goto LABEL_80;
  }
  ((void (*)(std::__shared_weak_count *))v78->__on_zero_shared)(v78);
  std::__shared_weak_count::__release_weak(v78);
  if (!v79)
    goto LABEL_84;
LABEL_80:
  v61 = (unint64_t *)&v18->__shared_owners_;
  do
    v62 = __ldaxr(v61);
  while (__stlxr(v62 - 1, v61));
  if (!v62)
  {
    ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
    std::__shared_weak_count::__release_weak(v18);
  }
LABEL_84:
  if (v58)
  {
    *a3 = v58;
    a3[1] = v11;
    return;
  }
LABEL_86:
  v63 = *(_QWORD *)(v4 + 32);
  v64 = *(const void **)(v63 + 16);
  if (!v64)
  {
    v66 = 0;
    goto LABEL_98;
  }
  v66 = v65;
  if (!v65)
  {
LABEL_98:
    v67 = 0;
    goto LABEL_99;
  }
  v67 = *(std::__shared_weak_count **)(v63 + 24);
  if (v67)
  {
    v68 = (unint64_t *)&v67->__shared_owners_;
    do
      v69 = __ldxr(v68);
    while (__stxr(v69 + 1, v68));
    v65[48] ^= 1u;
    *(_BYTE *)(a2 + 24) = 1;
    do
      v70 = __ldxr(v68);
    while (__stxr(v70 + 1, v68));
    do
      v71 = __ldaxr(v68);
    while (__stlxr(v71 - 1, v68));
    if (!v71)
    {
      ((void (*)(std::__shared_weak_count *))v67->__on_zero_shared)(v67);
      std::__shared_weak_count::__release_weak(v67);
      if (!v11)
        goto LABEL_104;
LABEL_100:
      v72 = (unint64_t *)&v11->__shared_owners_;
      do
        v73 = __ldaxr(v72);
      while (__stlxr(v73 - 1, v72));
      if (!v73)
      {
        ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
        std::__shared_weak_count::__release_weak(v11);
      }
      goto LABEL_104;
    }
LABEL_99:
    if (!v11)
      goto LABEL_104;
    goto LABEL_100;
  }
  v65[48] ^= 1u;
  *(_BYTE *)(a2 + 24) = 1;
  if (v11)
    goto LABEL_100;
LABEL_104:
  if (v66)
  {
    *a3 = v66;
    a3[1] = v67;
  }
  else
  {
    *a3 = 0;
    a3[1] = 0;
    if (v67)
    {
      v74 = (unint64_t *)&v67->__shared_owners_;
      do
        v75 = __ldaxr(v74);
      while (__stlxr(v75 - 1, v74));
      if (!v75)
      {
        ((void (*)(std::__shared_weak_count *))v67->__on_zero_shared)(v67);
        std::__shared_weak_count::__release_weak(v67);
      }
    }
  }
}

void std::__shared_ptr_emplace<csq::v2::AndPredicate<re::ecs2::Entity,re::query::SceneEntityDataSource>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_24ED9BB40;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<csq::v2::AndPredicate<re::ecs2::Entity,re::query::SceneEntityDataSource>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_24ED9BB40;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x2276933B8);
}

uint64_t std::__shared_ptr_emplace<csq::v2::AndPredicate<re::ecs2::Entity,re::query::SceneEntityDataSource>>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void std::__shared_ptr_emplace<csq::v2::NotPredicate<re::ecs2::Entity,re::query::SceneEntityDataSource>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_24ED9BB90;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<csq::v2::NotPredicate<re::ecs2::Entity,re::query::SceneEntityDataSource>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_24ED9BB90;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x2276933B8);
}

uint64_t std::__shared_ptr_emplace<csq::v2::NotPredicate<re::ecs2::Entity,re::query::SceneEntityDataSource>>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void csq::v2::NotPredicate<re::ecs2::Component,re::ecs2::SceneComponentCollectionBase>::~NotPredicate(_QWORD *a1)
{
  csq::graph::DirectedGraphNode<csq::v2::PredicateBase<re::ecs2::Component,re::ecs2::SceneComponentCollectionBase>>::~DirectedGraphNode(a1);
  JUMPOUT(0x2276933B8);
}

uint64_t csq::v2::NotPredicate<re::ecs2::Component,re::ecs2::SceneComponentCollectionBase>::evaluate(uint64_t a1)
{
  return (*(unsigned int (**)(_QWORD))(**(_QWORD **)(*(_QWORD *)(a1 + 32) + 16) + 16))(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 16)) ^ 1;
}

void csq::v2::NotPredicate<re::ecs2::Component,re::ecs2::SceneComponentCollectionBase>::postCreateOptimize(uint64_t a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  std::__shared_weak_count *v11;
  _QWORD *v12;
  std::__shared_weak_count *v13;
  unint64_t *v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  unint64_t *v21;
  unint64_t v22;
  _QWORD *v23;
  _QWORD *v24;
  unint64_t *v25;
  unint64_t v26;
  std::__shared_weak_count *v27;
  unint64_t *v28;
  unint64_t v29;
  unint64_t *p_shared_weak_owners;
  unint64_t v31;
  unint64_t v32;
  _QWORD *v33;
  _QWORD *i;
  void (__cdecl *v35)(std::__shared_count *__hidden);
  std::__shared_weak_count *v36;
  unint64_t *v37;
  unint64_t v38;
  std::__shared_weak_count *v39;
  std::__shared_weak_count *v40;
  unint64_t *v41;
  void (__cdecl *v42)(std::__shared_count *__hidden);
  void (__cdecl *v43)(std::__shared_weak_count *__hidden);
  unint64_t v44;
  unint64_t *v45;
  unint64_t v46;
  unint64_t v47;
  std::__shared_weak_count_vtbl *v48;
  unint64_t *v49;
  unint64_t v50;
  std::__shared_weak_count_vtbl *v51;
  std::__shared_weak_count_vtbl *v52;
  unint64_t v53;
  std::__shared_weak_count_vtbl *v54;
  unint64_t v55;
  unint64_t *v56;
  unint64_t v57;
  _QWORD *v58;
  unint64_t *v59;
  unint64_t v60;
  unint64_t *v61;
  unint64_t v62;
  uint64_t v63;
  const void *v64;
  _BYTE *v65;
  _BYTE *v66;
  std::__shared_weak_count *v67;
  unint64_t *v68;
  unint64_t v69;
  unint64_t v70;
  unint64_t v71;
  unint64_t *v72;
  unint64_t v73;
  unint64_t *v74;
  unint64_t v75;
  _QWORD *v76;
  _QWORD *v77;
  std::__shared_weak_count *v78;
  std::__shared_weak_count *v79;
  uint64_t v80;
  void (__cdecl *v81)(std::__shared_weak_count *__hidden);
  uint64_t v82;
  std::__shared_weak_count *v83;

  v4 = a1;
  v6 = a1 + 24;
  v7 = *(_QWORD *)(a1 + 32);
  if (v7 != a1 + 24)
  {
    do
    {
      (*(void (**)(uint64_t *__return_ptr, _QWORD, uint64_t))(**(_QWORD **)(v7 + 16) + 32))(&v82, *(_QWORD *)(v7 + 16), a2);
      if (v82)
        std::shared_ptr<re::audio::REPHASEEntity>::operator=[abi:ne180100]((_QWORD *)(v7 + 16), v82, (uint64_t)v83);
      v8 = v83;
      if (v83)
      {
        p_shared_owners = (unint64_t *)&v83->__shared_owners_;
        do
          v10 = __ldaxr(p_shared_owners);
        while (__stlxr(v10 - 1, p_shared_owners));
        if (!v10)
        {
          ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
          std::__shared_weak_count::__release_weak(v8);
        }
      }
      v7 = *(_QWORD *)(v7 + 8);
    }
    while (v7 != v6);
    v6 = *(_QWORD *)(v4 + 32);
  }
  v11 = *(std::__shared_weak_count **)(v6 + 16);
  if (!v11)
    goto LABEL_86;
  if (v12)
  {
    v13 = *(std::__shared_weak_count **)(v6 + 24);
    if (v13)
    {
      v14 = (unint64_t *)&v13->__shared_owners_;
      do
        v15 = __ldxr(v14);
      while (__stxr(v15 + 1, v14));
    }
    *(_BYTE *)(a2 + 24) = 1;
    v16 = v12[4];
    v17 = *(_QWORD *)(v16 + 16);
    v18 = *(std::__shared_weak_count **)(v16 + 24);
    if (v18)
    {
      v19 = (unint64_t *)&v18->__shared_owners_;
      do
        v20 = __ldxr(v19);
      while (__stxr(v20 + 1, v19));
    }
    if (!v13)
      goto LABEL_23;
    v21 = (unint64_t *)&v13->__shared_owners_;
    do
      v22 = __ldaxr(v21);
    while (__stlxr(v22 - 1, v21));
    if (!v22)
    {
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
      if (v17)
        goto LABEL_24;
    }
    else
    {
LABEL_23:
      if (v17)
      {
LABEL_24:
        *a3 = v17;
        a3[1] = v18;
        return;
      }
    }
    v6 = *(_QWORD *)(v4 + 32);
    v11 = *(std::__shared_weak_count **)(v6 + 16);
    if (!v11)
    {
      v58 = 0;
      if (v18)
        goto LABEL_80;
      goto LABEL_84;
    }
    v79 = v18;
    v80 = v4;
  }
  else
  {
    v79 = 0;
    v80 = v4;
  }
  if (!v23)
  {
    v58 = 0;
    v11 = 0;
    v18 = v79;
    v4 = v80;
    if (v79)
      goto LABEL_80;
    goto LABEL_84;
  }
  v24 = v23;
  v78 = *(std::__shared_weak_count **)(v6 + 24);
  if (v78)
  {
    v25 = (unint64_t *)&v78->__shared_owners_;
    do
      v26 = __ldxr(v25);
    while (__stxr(v26 + 1, v25));
  }
  v27 = (std::__shared_weak_count *)operator new(0x48uLL);
  v11 = v27;
  v27->__shared_owners_ = 0;
  v28 = (unint64_t *)&v27->__shared_owners_;
  v27->__shared_weak_owners_ = 0;
  v27->__vftable = (std::__shared_weak_count_vtbl *)&off_24ED9BC40;
  v27[1].__vftable = (std::__shared_weak_count_vtbl *)&off_24ED9B778;
  v27[2].__vftable = (std::__shared_weak_count_vtbl *)&v27[2];
  v27[2].__shared_owners_ = (uint64_t)&v27[2];
  v81 = (void (__cdecl *)(std::__shared_weak_count *__hidden))&v27[2];
  v27[2].__shared_weak_owners_ = 0;
  do
    v29 = __ldxr(v28);
  while (__stxr(v29 + 1, v28));
  p_shared_weak_owners = (unint64_t *)&v27->__shared_weak_owners_;
  do
    v31 = __ldxr(p_shared_weak_owners);
  while (__stxr(v31 + 1, p_shared_weak_owners));
  v27[1].__shared_owners_ = (uint64_t)&v27[1];
  v27[1].__shared_weak_owners_ = (uint64_t)v27;
  do
    v32 = __ldaxr(v28);
  while (__stlxr(v32 - 1, v28));
  v76 = &v27[1].__vftable;
  v77 = a3;
  if (!v32)
  {
    ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
    std::__shared_weak_count::__release_weak(v11);
  }
  v33 = v24 + 3;
  for (i = (_QWORD *)v24[4]; i != v33; i = (_QWORD *)i[1])
  {
    v35 = (void (__cdecl *)(std::__shared_count *__hidden))i[2];
    v36 = (std::__shared_weak_count *)i[3];
    if (v36)
    {
      v37 = (unint64_t *)&v36->__shared_owners_;
      do
        v38 = __ldxr(v37);
      while (__stxr(v38 + 1, v37));
    }
    v39 = (std::__shared_weak_count *)operator new(0x48uLL);
    v40 = v39;
    v39->__shared_owners_ = 0;
    v41 = (unint64_t *)&v39->__shared_owners_;
    v39->__shared_weak_owners_ = 0;
    v39->__vftable = (std::__shared_weak_count_vtbl *)&off_24ED9BC90;
    v39[1].__vftable = (std::__shared_weak_count_vtbl *)&off_24ED9BBE0;
    v42 = (void (__cdecl *)(std::__shared_count *__hidden))&v39[1];
    v43 = (void (__cdecl *)(std::__shared_weak_count *__hidden))&v39[2];
    v39[2].__vftable = (std::__shared_weak_count_vtbl *)&v39[2];
    v39[2].__shared_owners_ = (uint64_t)&v39[2];
    v39[2].__shared_weak_owners_ = 0;
    do
      v44 = __ldxr(v41);
    while (__stxr(v44 + 1, v41));
    v45 = (unint64_t *)&v39->__shared_weak_owners_;
    do
      v46 = __ldxr(v45);
    while (__stxr(v46 + 1, v45));
    v39[1].__shared_owners_ = (uint64_t)v42;
    v39[1].__shared_weak_owners_ = (uint64_t)v39;
    do
      v47 = __ldaxr(v41);
    while (__stlxr(v47 - 1, v41));
    if (!v47)
    {
      ((void (*)(std::__shared_weak_count *))v39->__on_zero_shared)(v39);
      std::__shared_weak_count::__release_weak(v40);
    }
    v48 = (std::__shared_weak_count_vtbl *)operator new(0x20uLL);
    v48->__on_zero_shared = v35;
    v48->__get_deleter = (const void *(__cdecl *)(const std::__shared_weak_count *__hidden, const std::type_info *))v36;
    if (v36)
    {
      v49 = (unint64_t *)&v36->__shared_owners_;
      do
        v50 = __ldxr(v49);
      while (__stxr(v50 + 1, v49));
    }
    v51 = v40[2].__vftable;
    v48->~__shared_weak_count = (void (__cdecl *)(std::__shared_weak_count *__hidden))v51;
    v48->~__shared_weak_count_0 = v43;
    v51->~__shared_weak_count_0 = (void (__cdecl *)(std::__shared_weak_count *__hidden))v48;
    v40[2].__vftable = v48;
    ++v40[2].__shared_weak_owners_;
    v52 = (std::__shared_weak_count_vtbl *)operator new(0x20uLL);
    v52->__on_zero_shared = v42;
    v52->__get_deleter = (const void *(__cdecl *)(const std::__shared_weak_count *__hidden, const std::type_info *))v40;
    do
      v53 = __ldxr(v41);
    while (__stxr(v53 + 1, v41));
    v54 = v11[2].__vftable;
    v52->~__shared_weak_count = (void (__cdecl *)(std::__shared_weak_count *__hidden))v54;
    v52->~__shared_weak_count_0 = v81;
    v54->~__shared_weak_count_0 = (void (__cdecl *)(std::__shared_weak_count *__hidden))v52;
    v11[2].__vftable = v52;
    ++v11[2].__shared_weak_owners_;
    do
      v55 = __ldaxr(v41);
    while (__stlxr(v55 - 1, v41));
    if (v55)
    {
      if (!v36)
        continue;
    }
    else
    {
      ((void (*)(std::__shared_weak_count *))v40->__on_zero_shared)(v40);
      std::__shared_weak_count::__release_weak(v40);
      if (!v36)
        continue;
    }
    v56 = (unint64_t *)&v36->__shared_owners_;
    do
      v57 = __ldaxr(v56);
    while (__stlxr(v57 - 1, v56));
    if (!v57)
    {
      ((void (*)(std::__shared_weak_count *))v36->__on_zero_shared)(v36);
      std::__shared_weak_count::__release_weak(v36);
    }
  }
  *(_BYTE *)(a2 + 24) = 1;
  v18 = v79;
  v4 = v80;
  v58 = v76;
  if (!v78)
  {
    a3 = v77;
    goto LABEL_79;
  }
  v59 = (unint64_t *)&v78->__shared_owners_;
  a3 = v77;
  do
    v60 = __ldaxr(v59);
  while (__stlxr(v60 - 1, v59));
  if (v60)
  {
LABEL_79:
    if (!v79)
      goto LABEL_84;
    goto LABEL_80;
  }
  ((void (*)(std::__shared_weak_count *))v78->__on_zero_shared)(v78);
  std::__shared_weak_count::__release_weak(v78);
  if (!v79)
    goto LABEL_84;
LABEL_80:
  v61 = (unint64_t *)&v18->__shared_owners_;
  do
    v62 = __ldaxr(v61);
  while (__stlxr(v62 - 1, v61));
  if (!v62)
  {
    ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
    std::__shared_weak_count::__release_weak(v18);
  }
LABEL_84:
  if (v58)
  {
    *a3 = v58;
    a3[1] = v11;
    return;
  }
LABEL_86:
  v63 = *(_QWORD *)(v4 + 32);
  v64 = *(const void **)(v63 + 16);
  if (!v64)
  {
    v66 = 0;
    goto LABEL_98;
  }
  v66 = v65;
  if (!v65)
  {
LABEL_98:
    v67 = 0;
    goto LABEL_99;
  }
  v67 = *(std::__shared_weak_count **)(v63 + 24);
  if (v67)
  {
    v68 = (unint64_t *)&v67->__shared_owners_;
    do
      v69 = __ldxr(v68);
    while (__stxr(v69 + 1, v68));
    v65[48] ^= 1u;
    *(_BYTE *)(a2 + 24) = 1;
    do
      v70 = __ldxr(v68);
    while (__stxr(v70 + 1, v68));
    do
      v71 = __ldaxr(v68);
    while (__stlxr(v71 - 1, v68));
    if (!v71)
    {
      ((void (*)(std::__shared_weak_count *))v67->__on_zero_shared)(v67);
      std::__shared_weak_count::__release_weak(v67);
      if (!v11)
        goto LABEL_104;
LABEL_100:
      v72 = (unint64_t *)&v11->__shared_owners_;
      do
        v73 = __ldaxr(v72);
      while (__stlxr(v73 - 1, v72));
      if (!v73)
      {
        ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
        std::__shared_weak_count::__release_weak(v11);
      }
      goto LABEL_104;
    }
LABEL_99:
    if (!v11)
      goto LABEL_104;
    goto LABEL_100;
  }
  v65[48] ^= 1u;
  *(_BYTE *)(a2 + 24) = 1;
  if (v11)
    goto LABEL_100;
LABEL_104:
  if (v66)
  {
    *a3 = v66;
    a3[1] = v67;
  }
  else
  {
    *a3 = 0;
    a3[1] = 0;
    if (v67)
    {
      v74 = (unint64_t *)&v67->__shared_owners_;
      do
        v75 = __ldaxr(v74);
      while (__stlxr(v75 - 1, v74));
      if (!v75)
      {
        ((void (*)(std::__shared_weak_count *))v67->__on_zero_shared)(v67);
        std::__shared_weak_count::__release_weak(v67);
      }
    }
  }
}

void std::__shared_ptr_emplace<csq::v2::AndPredicate<re::ecs2::Component,re::ecs2::SceneComponentCollectionBase>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_24ED9BC40;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<csq::v2::AndPredicate<re::ecs2::Component,re::ecs2::SceneComponentCollectionBase>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_24ED9BC40;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x2276933B8);
}

uint64_t std::__shared_ptr_emplace<csq::v2::AndPredicate<re::ecs2::Component,re::ecs2::SceneComponentCollectionBase>>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void std::__shared_ptr_emplace<csq::v2::NotPredicate<re::ecs2::Component,re::ecs2::SceneComponentCollectionBase>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_24ED9BC90;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<csq::v2::NotPredicate<re::ecs2::Component,re::ecs2::SceneComponentCollectionBase>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_24ED9BC90;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x2276933B8);
}

uint64_t std::__shared_ptr_emplace<csq::v2::NotPredicate<re::ecs2::Component,re::ecs2::SceneComponentCollectionBase>>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void csq::v2::FunctorBasedPropertyPredicate<csq::v2::PropertyValueBasedFunctor<re::query::EntityActiveProperty,std::equal_to<BOOL>>,re::query::EntityActiveProperty,re::ecs2::Entity,re::query::SceneEntityDataSource>::~FunctorBasedPropertyPredicate(_QWORD *a1)
{
  csq::graph::DirectedGraphNode<csq::v2::PredicateBase<re::ecs2::Entity,re::query::SceneEntityDataSource>>::~DirectedGraphNode(a1);
  JUMPOUT(0x2276933B8);
}

BOOL csq::v2::FunctorBasedPropertyPredicate<csq::v2::PropertyValueBasedFunctor<re::query::EntityActiveProperty,std::equal_to<BOOL>>,re::query::EntityActiveProperty,re::ecs2::Entity,re::query::SceneEntityDataSource>::evaluate(uint64_t a1, uint64_t a2)
{
  return (*(_DWORD *)(a2 + 288) & 1) == *(_BYTE *)(a1 + 48);
}

void re::query::IsDescendantPredicate::~IsDescendantPredicate(re::query::IsDescendantPredicate *this)
{
  re::query::IsDescendantPredicate::~IsDescendantPredicate(this);
  JUMPOUT(0x2276933B8);
}

{
  char *v2;
  char *v3;
  uint64_t v4;

  *(_QWORD *)this = &off_24ED9BD58;
  v2 = (char *)this + 56;
  v3 = (char *)*((_QWORD *)this + 10);
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
    goto LABEL_5;
  }
  if (v3)
  {
    v4 = 5;
LABEL_5:
    (*(void (**)(void))(*(_QWORD *)v3 + 8 * v4))();
  }
  csq::graph::DirectedGraphNode<csq::v2::PredicateBase<re::ecs2::Entity,re::query::SceneEntityDataSource>>::~DirectedGraphNode(this);
}

uint64_t re::query::IsDescendantPredicate::evaluate(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t result;

  v2 = *(_QWORD *)(a1 + 48);
  if (v2)
  {
    v3 = *(_QWORD *)(a2 + 24);
    if (!v3 || (*(_BYTE *)(v3 + 288) & 0x80) != 0)
    {
      return 0;
    }
    else
    {
      do
      {
        result = v2 == v3;
        if (v2 == v3)
          break;
        v3 = *(_QWORD *)(v3 + 24);
        if (!v3)
          break;
      }
      while ((*(_BYTE *)(v3 + 288) & 0x80) == 0);
    }
  }
  else
  {
    re::internal::assertLog((re::internal *)4, a2, "assertion failure: '%s' (%s:line %i) ", "m_ancester != nullptr", "evaluate", 28);
    result = _os_crash();
    __break(1u);
  }
  return result;
}

uint64_t re::query::IsDescendantPredicate::onPerformQuery(re::query::IsDescendantPredicate *this)
{
  uint64_t result;

  result = *((_QWORD *)this + 10);
  if (result)
  {
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 48))(result);
    *((_QWORD *)this + 6) = result;
  }
  return result;
}

void re::query::IsChildPredicate::~IsChildPredicate(re::query::IsChildPredicate *this)
{
  re::query::IsChildPredicate::~IsChildPredicate(this);
  JUMPOUT(0x2276933B8);
}

{
  char *v2;
  char *v3;
  uint64_t v4;

  *(_QWORD *)this = &off_24ED9BDB8;
  v2 = (char *)this + 56;
  v3 = (char *)*((_QWORD *)this + 10);
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
    goto LABEL_5;
  }
  if (v3)
  {
    v4 = 5;
LABEL_5:
    (*(void (**)(void))(*(_QWORD *)v3 + 8 * v4))();
  }
  csq::graph::DirectedGraphNode<csq::v2::PredicateBase<re::ecs2::Entity,re::query::SceneEntityDataSource>>::~DirectedGraphNode(this);
}

uint64_t re::query::IsChildPredicate::evaluate(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t result;

  v3 = *(_QWORD *)(a1 + 48);
  if (v3)
  {
    if (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a3 + 8) + 16) + 16) == a1)
    {
      return 1;
    }
    else
    {
      v4 = *(_QWORD *)(a2 + 24);
      if (v4)
      {
        if ((*(_BYTE *)(v4 + 288) & 0x80) != 0)
          v4 = 0;
      }
      return v3 == v4;
    }
  }
  else
  {
    re::internal::assertLog((re::internal *)4, a2, "assertion failure: '%s' (%s:line %i) ", "m_parent != nullptr", "evaluate", 81);
    result = _os_crash();
    __break(1u);
  }
  return result;
}

uint64_t re::query::IsChildPredicate::forEachInSubset(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  _QWORD *v9;
  uint64_t i;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v4 = *(_QWORD *)(result + 48);
  v5 = *(_QWORD *)(v4 + 328);
  if (v5)
  {
    v9 = *(_QWORD **)(v4 + 344);
    for (i = 8 * v5; i; i -= 8)
    {
      v11 = *v9;
      if ((*(_BYTE *)(*v9 + 289) & 4) == 0)
      {
        result = (*(uint64_t (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)a3 + 16))(a3, *v9, a2);
        if ((_DWORD)result)
        {
          v14 = v11;
          v12 = *(_QWORD *)(a4 + 24);
          if (!v12)
          {
            v13 = std::__throw_bad_function_call[abi:nn180100]();
            return re::query::IsChildPredicate::preEvaluateOptimize(v13);
          }
          result = (*(uint64_t (**)(uint64_t, uint64_t *))(*(_QWORD *)v12 + 48))(v12, &v14);
        }
      }
      ++v9;
    }
  }
  return result;
}

void re::query::IsChildPredicate::preEvaluateOptimize(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  _OWORD *v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  __int128 v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;

  v3 = *(_QWORD *)(a1 + 48);
  if (v3)
    v3 = *(_QWORD *)(v3 + 328);
  *(_QWORD *)(a2 + 32) = v3;
  v13 = (uint64_t)&v13;
  v14 = &v13;
  v15 = 0;
  std::shared_ptr<csq::v2::PredicateBase<re::ecs2::Entity,re::query::SceneEntityDataSource>>::shared_ptr[abi:nn180100]<csq::v2::PredicateBase<re::ecs2::Entity,re::query::SceneEntityDataSource>,void>(&v12, (_QWORD *)(a1 + 8));
  v4 = operator new(0x20uLL);
  v4[1] = v12;
  v5 = v14;
  *(_QWORD *)v4 = &v13;
  *((_QWORD *)v4 + 1) = v5;
  *v5 = (uint64_t)v4;
  v14 = (uint64_t *)v4;
  ++v15;
  v6 = *(_QWORD *)(a2 + 8);
  std::__list_imp<std::shared_ptr<csq::v2::PredicateBase<re::ecs2::Entity,re::query::SceneEntityDataSource>>>::clear((uint64_t *)(v6 + 16));
  v7 = v15;
  if (v15)
  {
    v9 = v13;
    v8 = v14;
    v10 = *v14;
    *(_QWORD *)(v10 + 8) = *(_QWORD *)(v13 + 8);
    **(_QWORD **)(v9 + 8) = v10;
    v11 = *(_QWORD *)(v6 + 16);
    *(_QWORD *)(v11 + 8) = v8;
    *v8 = v11;
    *(_QWORD *)(v6 + 16) = v9;
    *(_QWORD *)(v9 + 8) = v6 + 16;
    *(_QWORD *)(v6 + 32) += v7;
    v15 = 0;
  }
  *(_BYTE *)(*(_QWORD *)(a2 + 8) + 64) = 4;
  std::__list_imp<std::shared_ptr<csq::v2::PredicateBase<re::ecs2::Entity,re::query::SceneEntityDataSource>>>::clear(&v13);
}

uint64_t re::query::IsChildPredicate::onPerformQuery(re::query::IsChildPredicate *this)
{
  uint64_t result;

  result = *((_QWORD *)this + 10);
  if (result)
  {
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 48))(result);
    *((_QWORD *)this + 6) = result;
  }
  return result;
}

void re::query::SceneEntityDataSource::~SceneEntityDataSource(re::query::SceneEntityDataSource *this)
{
  JUMPOUT(0x2276933B8);
}

uint64_t std::__function::__func<REQueryCreateCustomEntityPredicate::$_0,std::allocator<REQueryCreateCustomEntityPredicate::$_0>,BOOL ()(re::ecs2::Entity const*)>::~__func(uint64_t a1)
{

  return a1;
}

void std::__function::__func<REQueryCreateCustomEntityPredicate::$_0,std::allocator<REQueryCreateCustomEntityPredicate::$_0>,BOOL ()(re::ecs2::Entity const*)>::~__func(uint64_t a1)
{

  JUMPOUT(0x2276933B8);
}

_QWORD *std::__function::__func<REQueryCreateCustomEntityPredicate::$_0,std::allocator<REQueryCreateCustomEntityPredicate::$_0>,BOOL ()(re::ecs2::Entity const*)>::__clone(uint64_t a1)
{
  _QWORD *v2;

  v2 = operator new(0x10uLL);
  *v2 = &off_24ED9BE48;
  v2[1] = _Block_copy(*(const void **)(a1 + 8));
  return v2;
}

void *std::__function::__func<REQueryCreateCustomEntityPredicate::$_0,std::allocator<REQueryCreateCustomEntityPredicate::$_0>,BOOL ()(re::ecs2::Entity const*)>::__clone(uint64_t a1, _QWORD *a2)
{
  void *result;

  *a2 = &off_24ED9BE48;
  result = _Block_copy(*(const void **)(a1 + 8));
  a2[1] = result;
  return result;
}

void std::__function::__func<REQueryCreateCustomEntityPredicate::$_0,std::allocator<REQueryCreateCustomEntityPredicate::$_0>,BOOL ()(re::ecs2::Entity const*)>::destroy(uint64_t a1)
{

}

void std::__function::__func<REQueryCreateCustomEntityPredicate::$_0,std::allocator<REQueryCreateCustomEntityPredicate::$_0>,BOOL ()(re::ecs2::Entity const*)>::destroy_deallocate(id *a1)
{

  operator delete(a1);
}

uint64_t std::__function::__func<REQueryCreateCustomEntityPredicate::$_0,std::allocator<REQueryCreateCustomEntityPredicate::$_0>,BOOL ()(re::ecs2::Entity const*)>::operator()(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 8) + 16))();
}

uint64_t std::__function::__func<REQueryCreateCustomEntityPredicate::$_0,std::allocator<REQueryCreateCustomEntityPredicate::$_0>,BOOL ()(re::ecs2::Entity const*)>::target(uint64_t a1, uint64_t a2)
{
    return a1 + 8;
  else
    return 0;
}

void *std::__function::__func<REQueryCreateCustomEntityPredicate::$_0,std::allocator<REQueryCreateCustomEntityPredicate::$_0>,BOOL ()(re::ecs2::Entity const*)>::target_type()
{
}

void csq::v2::CustomPredicate<re::ecs2::Entity,re::query::SceneEntityDataSource>::~CustomPredicate(_QWORD *a1)
{
  csq::v2::CustomPredicate<re::ecs2::Entity,re::query::SceneEntityDataSource>::~CustomPredicate(a1);
  JUMPOUT(0x2276933B8);
}

_QWORD *csq::v2::CustomPredicate<re::ecs2::Entity,re::query::SceneEntityDataSource>::evaluate(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v4;
  uint64_t v5;

  v5 = a2;
  v2 = *(_QWORD *)(a1 + 72);
  if (v2)
    return (_QWORD *)(*(uint64_t (**)(uint64_t, uint64_t *))(*(_QWORD *)v2 + 48))(v2, &v5);
  v4 = (_QWORD *)std::__throw_bad_function_call[abi:nn180100]();
  return csq::v2::CustomPredicate<re::ecs2::Entity,re::query::SceneEntityDataSource>::~CustomPredicate(v4);
}

_QWORD *csq::v2::CustomPredicate<re::ecs2::Entity,re::query::SceneEntityDataSource>::~CustomPredicate(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;

  *a1 = &off_24ED9BED8;
  v2 = a1 + 6;
  v3 = (_QWORD *)a1[9];
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
    goto LABEL_5;
  }
  if (v3)
  {
    v4 = 5;
LABEL_5:
    (*(void (**)(void))(*v3 + 8 * v4))();
  }
  return csq::graph::DirectedGraphNode<csq::v2::PredicateBase<re::ecs2::Entity,re::query::SceneEntityDataSource>>::~DirectedGraphNode(a1);
}

uint64_t std::__function::__func<REQueryCreateCustomComponentPredicate::$_0,std::allocator<REQueryCreateCustomComponentPredicate::$_0>,BOOL ()(re::ecs2::Component const*)>::~__func(uint64_t a1)
{

  return a1;
}

void std::__function::__func<REQueryCreateCustomComponentPredicate::$_0,std::allocator<REQueryCreateCustomComponentPredicate::$_0>,BOOL ()(re::ecs2::Component const*)>::~__func(uint64_t a1)
{

  JUMPOUT(0x2276933B8);
}

_QWORD *std::__function::__func<REQueryCreateCustomComponentPredicate::$_0,std::allocator<REQueryCreateCustomComponentPredicate::$_0>,BOOL ()(re::ecs2::Component const*)>::__clone(uint64_t a1)
{
  _QWORD *v2;

  v2 = operator new(0x10uLL);
  *v2 = &off_24ED9BF38;
  v2[1] = _Block_copy(*(const void **)(a1 + 8));
  return v2;
}

void *std::__function::__func<REQueryCreateCustomComponentPredicate::$_0,std::allocator<REQueryCreateCustomComponentPredicate::$_0>,BOOL ()(re::ecs2::Component const*)>::__clone(uint64_t a1, _QWORD *a2)
{
  void *result;

  *a2 = &off_24ED9BF38;
  result = _Block_copy(*(const void **)(a1 + 8));
  a2[1] = result;
  return result;
}

void std::__function::__func<REQueryCreateCustomComponentPredicate::$_0,std::allocator<REQueryCreateCustomComponentPredicate::$_0>,BOOL ()(re::ecs2::Component const*)>::destroy(uint64_t a1)
{

}

void std::__function::__func<REQueryCreateCustomComponentPredicate::$_0,std::allocator<REQueryCreateCustomComponentPredicate::$_0>,BOOL ()(re::ecs2::Component const*)>::destroy_deallocate(id *a1)
{

  operator delete(a1);
}

uint64_t std::__function::__func<REQueryCreateCustomComponentPredicate::$_0,std::allocator<REQueryCreateCustomComponentPredicate::$_0>,BOOL ()(re::ecs2::Component const*)>::operator()(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 8) + 16))();
}

uint64_t std::__function::__func<REQueryCreateCustomComponentPredicate::$_0,std::allocator<REQueryCreateCustomComponentPredicate::$_0>,BOOL ()(re::ecs2::Component const*)>::target(uint64_t a1, uint64_t a2)
{
    return a1 + 8;
  else
    return 0;
}

void *std::__function::__func<REQueryCreateCustomComponentPredicate::$_0,std::allocator<REQueryCreateCustomComponentPredicate::$_0>,BOOL ()(re::ecs2::Component const*)>::target_type()
{
}

void csq::v2::CustomPredicate<re::ecs2::Component,re::ecs2::SceneComponentCollectionBase>::~CustomPredicate(_QWORD *a1)
{
  csq::v2::CustomPredicate<re::ecs2::Component,re::ecs2::SceneComponentCollectionBase>::~CustomPredicate(a1);
  JUMPOUT(0x2276933B8);
}

_QWORD *csq::v2::CustomPredicate<re::ecs2::Component,re::ecs2::SceneComponentCollectionBase>::evaluate(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v4;
  uint64_t v5;

  v5 = a2;
  v2 = *(_QWORD *)(a1 + 72);
  if (v2)
    return (_QWORD *)(*(uint64_t (**)(uint64_t, uint64_t *))(*(_QWORD *)v2 + 48))(v2, &v5);
  v4 = (_QWORD *)std::__throw_bad_function_call[abi:nn180100]();
  return csq::v2::CustomPredicate<re::ecs2::Component,re::ecs2::SceneComponentCollectionBase>::~CustomPredicate(v4);
}

_QWORD *csq::v2::CustomPredicate<re::ecs2::Component,re::ecs2::SceneComponentCollectionBase>::~CustomPredicate(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;

  *a1 = &off_24ED9BFC8;
  v2 = a1 + 6;
  v3 = (_QWORD *)a1[9];
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
    goto LABEL_5;
  }
  if (v3)
  {
    v4 = 5;
LABEL_5:
    (*(void (**)(void))(*v3 + 8 * v4))();
  }
  return csq::graph::DirectedGraphNode<csq::v2::PredicateBase<re::ecs2::Component,re::ecs2::SceneComponentCollectionBase>>::~DirectedGraphNode(a1);
}

uint64_t std::__function::__func<REQueryCreateIsDescendantCallbackEntityPredicate::$_0,std::allocator<REQueryCreateIsDescendantCallbackEntityPredicate::$_0>,re::ecs2::Entity const* ()(void)>::~__func(uint64_t a1)
{

  return a1;
}

void std::__function::__func<REQueryCreateIsDescendantCallbackEntityPredicate::$_0,std::allocator<REQueryCreateIsDescendantCallbackEntityPredicate::$_0>,re::ecs2::Entity const* ()(void)>::~__func(uint64_t a1)
{

  JUMPOUT(0x2276933B8);
}

_QWORD *std::__function::__func<REQueryCreateIsDescendantCallbackEntityPredicate::$_0,std::allocator<REQueryCreateIsDescendantCallbackEntityPredicate::$_0>,re::ecs2::Entity const* ()(void)>::__clone(uint64_t a1)
{
  _QWORD *v2;

  v2 = operator new(0x10uLL);
  *v2 = &off_24ED9C028;
  v2[1] = _Block_copy(*(const void **)(a1 + 8));
  return v2;
}

void *std::__function::__func<REQueryCreateIsDescendantCallbackEntityPredicate::$_0,std::allocator<REQueryCreateIsDescendantCallbackEntityPredicate::$_0>,re::ecs2::Entity const* ()(void)>::__clone(uint64_t a1, _QWORD *a2)
{
  void *result;

  *a2 = &off_24ED9C028;
  result = _Block_copy(*(const void **)(a1 + 8));
  a2[1] = result;
  return result;
}

void std::__function::__func<REQueryCreateIsDescendantCallbackEntityPredicate::$_0,std::allocator<REQueryCreateIsDescendantCallbackEntityPredicate::$_0>,re::ecs2::Entity const* ()(void)>::destroy(uint64_t a1)
{

}

void std::__function::__func<REQueryCreateIsDescendantCallbackEntityPredicate::$_0,std::allocator<REQueryCreateIsDescendantCallbackEntityPredicate::$_0>,re::ecs2::Entity const* ()(void)>::destroy_deallocate(id *a1)
{

  operator delete(a1);
}

uint64_t std::__function::__func<REQueryCreateIsDescendantCallbackEntityPredicate::$_0,std::allocator<REQueryCreateIsDescendantCallbackEntityPredicate::$_0>,re::ecs2::Entity const* ()(void)>::operator()(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 8) + 16))();
}

uint64_t std::__function::__func<REQueryCreateIsDescendantCallbackEntityPredicate::$_0,std::allocator<REQueryCreateIsDescendantCallbackEntityPredicate::$_0>,re::ecs2::Entity const* ()(void)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<REQueryCreateIsDescendantCallbackEntityPredicate::$_0,std::allocator<REQueryCreateIsDescendantCallbackEntityPredicate::$_0>,re::ecs2::Entity const* ()(void)>::target_type()
{
}

uint64_t std::__function::__func<REQueryCreateIsChildCallbackEntityPredicate::$_0,std::allocator<REQueryCreateIsChildCallbackEntityPredicate::$_0>,re::ecs2::Entity const* ()(void)>::~__func(uint64_t a1)
{

  return a1;
}

void std::__function::__func<REQueryCreateIsChildCallbackEntityPredicate::$_0,std::allocator<REQueryCreateIsChildCallbackEntityPredicate::$_0>,re::ecs2::Entity const* ()(void)>::~__func(uint64_t a1)
{

  JUMPOUT(0x2276933B8);
}

_QWORD *std::__function::__func<REQueryCreateIsChildCallbackEntityPredicate::$_0,std::allocator<REQueryCreateIsChildCallbackEntityPredicate::$_0>,re::ecs2::Entity const* ()(void)>::__clone(uint64_t a1)
{
  _QWORD *v2;

  v2 = operator new(0x10uLL);
  *v2 = &off_24ED9C0B8;
  v2[1] = _Block_copy(*(const void **)(a1 + 8));
  return v2;
}

void *std::__function::__func<REQueryCreateIsChildCallbackEntityPredicate::$_0,std::allocator<REQueryCreateIsChildCallbackEntityPredicate::$_0>,re::ecs2::Entity const* ()(void)>::__clone(uint64_t a1, _QWORD *a2)
{
  void *result;

  *a2 = &off_24ED9C0B8;
  result = _Block_copy(*(const void **)(a1 + 8));
  a2[1] = result;
  return result;
}

void std::__function::__func<REQueryCreateIsChildCallbackEntityPredicate::$_0,std::allocator<REQueryCreateIsChildCallbackEntityPredicate::$_0>,re::ecs2::Entity const* ()(void)>::destroy(uint64_t a1)
{

}

void std::__function::__func<REQueryCreateIsChildCallbackEntityPredicate::$_0,std::allocator<REQueryCreateIsChildCallbackEntityPredicate::$_0>,re::ecs2::Entity const* ()(void)>::destroy_deallocate(id *a1)
{

  operator delete(a1);
}

uint64_t std::__function::__func<REQueryCreateIsChildCallbackEntityPredicate::$_0,std::allocator<REQueryCreateIsChildCallbackEntityPredicate::$_0>,re::ecs2::Entity const* ()(void)>::operator()(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 8) + 16))();
}

uint64_t std::__function::__func<REQueryCreateIsChildCallbackEntityPredicate::$_0,std::allocator<REQueryCreateIsChildCallbackEntityPredicate::$_0>,re::ecs2::Entity const* ()(void)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<REQueryCreateIsChildCallbackEntityPredicate::$_0,std::allocator<REQueryCreateIsChildCallbackEntityPredicate::$_0>,re::ecs2::Entity const* ()(void)>::target_type()
{
}

void std::__shared_ptr_pointer<csq::v2::PredicateBase<re::ecs2::Entity,re::query::SceneEntityDataSource> *,REQueryConnectEntityPredicates::$_0,std::allocator<csq::v2::PredicateBase<re::ecs2::Entity,re::query::SceneEntityDataSource>>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x2276933B8);
}

re *std::__shared_ptr_pointer<csq::v2::PredicateBase<re::ecs2::Entity,re::query::SceneEntityDataSource> *,REQueryConnectEntityPredicates::$_0,std::allocator<csq::v2::PredicateBase<re::ecs2::Entity,re::query::SceneEntityDataSource>>>::__on_zero_shared(re *result)
{
  void (***v1)(_QWORD);
  uint64_t v2;

  v1 = (void (***)(_QWORD))*((_QWORD *)result + 3);
  if (v1)
  {
    v2 = re::globalAllocators(result)[2];
    (**v1)(v1);
    return (re *)(*(uint64_t (**)(uint64_t, void (***)(_QWORD)))(*(_QWORD *)v2 + 40))(v2, v1);
  }
  return result;
}

uint64_t std::__shared_ptr_pointer<csq::v2::PredicateBase<re::ecs2::Entity,re::query::SceneEntityDataSource> *,REQueryConnectEntityPredicates::$_0,std::allocator<csq::v2::PredicateBase<re::ecs2::Entity,re::query::SceneEntityDataSource>>>::__get_deleter(uint64_t a1, uint64_t a2)
{
    return a1 + 24;
  else
    return 0;
}

void std::__shared_ptr_pointer<csq::v2::PredicateBase<re::ecs2::Component,re::ecs2::SceneComponentCollectionBase> *,REQueryConnectComponentPredicates::$_0,std::allocator<csq::v2::PredicateBase<re::ecs2::Component,re::ecs2::SceneComponentCollectionBase>>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x2276933B8);
}

re *std::__shared_ptr_pointer<csq::v2::PredicateBase<re::ecs2::Component,re::ecs2::SceneComponentCollectionBase> *,REQueryConnectComponentPredicates::$_0,std::allocator<csq::v2::PredicateBase<re::ecs2::Component,re::ecs2::SceneComponentCollectionBase>>>::__on_zero_shared(re *result)
{
  void (***v1)(_QWORD);
  uint64_t v2;

  v1 = (void (***)(_QWORD))*((_QWORD *)result + 3);
  if (v1)
  {
    v2 = re::globalAllocators(result)[2];
    (**v1)(v1);
    return (re *)(*(uint64_t (**)(uint64_t, void (***)(_QWORD)))(*(_QWORD *)v2 + 40))(v2, v1);
  }
  return result;
}

uint64_t std::__shared_ptr_pointer<csq::v2::PredicateBase<re::ecs2::Component,re::ecs2::SceneComponentCollectionBase> *,REQueryConnectComponentPredicates::$_0,std::allocator<csq::v2::PredicateBase<re::ecs2::Component,re::ecs2::SceneComponentCollectionBase>>>::__get_deleter(uint64_t a1, uint64_t a2)
{
    return a1 + 24;
  else
    return 0;
}

void std::__shared_ptr_pointer<csq::v2::PredicateBase<re::ecs2::Entity,re::query::SceneEntityDataSource> *,REQueryCreateEntityQuery::$_0,std::allocator<csq::v2::PredicateBase<re::ecs2::Entity,re::query::SceneEntityDataSource>>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x2276933B8);
}

re *std::__shared_ptr_pointer<csq::v2::PredicateBase<re::ecs2::Entity,re::query::SceneEntityDataSource> *,REQueryCreateEntityQuery::$_0,std::allocator<csq::v2::PredicateBase<re::ecs2::Entity,re::query::SceneEntityDataSource>>>::__on_zero_shared(re *result)
{
  void (***v1)(_QWORD);
  uint64_t v2;

  v1 = (void (***)(_QWORD))*((_QWORD *)result + 3);
  if (v1)
  {
    v2 = re::globalAllocators(result)[2];
    (**v1)(v1);
    return (re *)(*(uint64_t (**)(uint64_t, void (***)(_QWORD)))(*(_QWORD *)v2 + 40))(v2, v1);
  }
  return result;
}

uint64_t std::__shared_ptr_pointer<csq::v2::PredicateBase<re::ecs2::Entity,re::query::SceneEntityDataSource> *,REQueryCreateEntityQuery::$_0,std::allocator<csq::v2::PredicateBase<re::ecs2::Entity,re::query::SceneEntityDataSource>>>::__get_deleter(uint64_t a1, uint64_t a2)
{
    return a1 + 24;
  else
    return 0;
}

void std::__shared_ptr_pointer<csq::v2::PredicateBase<re::ecs2::Component,re::ecs2::SceneComponentCollectionBase> *,REQueryCreateComponentQuery::$_0,std::allocator<csq::v2::PredicateBase<re::ecs2::Component,re::ecs2::SceneComponentCollectionBase>>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x2276933B8);
}

re *std::__shared_ptr_pointer<csq::v2::PredicateBase<re::ecs2::Component,re::ecs2::SceneComponentCollectionBase> *,REQueryCreateComponentQuery::$_0,std::allocator<csq::v2::PredicateBase<re::ecs2::Component,re::ecs2::SceneComponentCollectionBase>>>::__on_zero_shared(re *result)
{
  void (***v1)(_QWORD);
  uint64_t v2;

  v1 = (void (***)(_QWORD))*((_QWORD *)result + 3);
  if (v1)
  {
    v2 = re::globalAllocators(result)[2];
    (**v1)(v1);
    return (re *)(*(uint64_t (**)(uint64_t, void (***)(_QWORD)))(*(_QWORD *)v2 + 40))(v2, v1);
  }
  return result;
}

uint64_t std::__shared_ptr_pointer<csq::v2::PredicateBase<re::ecs2::Component,re::ecs2::SceneComponentCollectionBase> *,REQueryCreateComponentQuery::$_0,std::allocator<csq::v2::PredicateBase<re::ecs2::Component,re::ecs2::SceneComponentCollectionBase>>>::__get_deleter(uint64_t a1, uint64_t a2)
{
    return a1 + 24;
  else
    return 0;
}

uint64_t csq::v2::Query<re::ecs2::Entity,re::query::SceneEntityDataSource>::notifyPerformQuery(_QWORD **a1)
{
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  unint64_t v8;
  _QWORD v10[2];

  v2 = *a1;
  v3 = v2 + 3;
  v4 = (_QWORD *)v2[4];
  if (v4 != v2 + 3)
  {
    do
    {
      v5 = (std::__shared_weak_count *)v4[3];
      v10[0] = v4[2];
      v10[1] = v5;
      if (v5)
      {
        p_shared_owners = (unint64_t *)&v5->__shared_owners_;
        do
          v7 = __ldxr(p_shared_owners);
        while (__stxr(v7 + 1, p_shared_owners));
        csq::v2::Query<re::ecs2::Entity,re::query::SceneEntityDataSource>::notifyPerformQuery(v10);
        do
          v8 = __ldaxr(p_shared_owners);
        while (__stlxr(v8 - 1, p_shared_owners));
        if (!v8)
        {
          ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
          std::__shared_weak_count::__release_weak(v5);
        }
      }
      else
      {
        csq::v2::Query<re::ecs2::Entity,re::query::SceneEntityDataSource>::notifyPerformQuery(v10);
      }
      v4 = (_QWORD *)v4[1];
    }
    while (v4 != v3);
    v2 = *a1;
  }
  return (*(uint64_t (**)(_QWORD *))(*v2 + 48))(v2);
}

void std::__function::__func<REQueryEvaluateEntityQuery::$_0,std::allocator<REQueryEvaluateEntityQuery::$_0>,void ()(re::ecs2::Entity *)>::~__func()
{
  JUMPOUT(0x2276933B8);
}

_QWORD *std::__function::__func<REQueryEvaluateEntityQuery::$_0,std::allocator<REQueryEvaluateEntityQuery::$_0>,void ()(re::ecs2::Entity *)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_24ED9C2B8;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<REQueryEvaluateEntityQuery::$_0,std::allocator<REQueryEvaluateEntityQuery::$_0>,void ()(re::ecs2::Entity *)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_24ED9C2B8;
  a2[1] = v2;
  return result;
}

_QWORD *std::__function::__func<REQueryEvaluateEntityQuery::$_0,std::allocator<REQueryEvaluateEntityQuery::$_0>,void ()(re::ecs2::Entity *)>::operator()(uint64_t a1)
{
  return (*(_QWORD *(**)(_QWORD *__return_ptr))(**(_QWORD **)(a1 + 8) + 16))(*(_QWORD **)(a1 + 8));
}

uint64_t std::__function::__func<REQueryEvaluateEntityQuery::$_0,std::allocator<REQueryEvaluateEntityQuery::$_0>,void ()(re::ecs2::Entity *)>::target(uint64_t a1, uint64_t a2)
{
    return a1 + 8;
  else
    return 0;
}

void *std::__function::__func<REQueryEvaluateEntityQuery::$_0,std::allocator<REQueryEvaluateEntityQuery::$_0>,void ()(re::ecs2::Entity *)>::target_type()
{
}

void std::__function::__func<REQueryEvaluateEntityQueryWithRootEntity::$_0,std::allocator<REQueryEvaluateEntityQueryWithRootEntity::$_0>,void ()(re::ecs2::Entity *)>::~__func()
{
  JUMPOUT(0x2276933B8);
}

__n128 std::__function::__func<REQueryEvaluateEntityQueryWithRootEntity::$_0,std::allocator<REQueryEvaluateEntityQueryWithRootEntity::$_0>,void ()(re::ecs2::Entity *)>::__clone(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = &off_24ED9C338;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 std::__function::__func<REQueryEvaluateEntityQueryWithRootEntity::$_0,std::allocator<REQueryEvaluateEntityQueryWithRootEntity::$_0>,void ()(re::ecs2::Entity *)>::__clone(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_24ED9C338;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

_QWORD *std::__function::__func<REQueryEvaluateEntityQueryWithRootEntity::$_0,std::allocator<REQueryEvaluateEntityQueryWithRootEntity::$_0>,void ()(re::ecs2::Entity *)>::operator()(_QWORD *result, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v2 = *a2;
  if ((*(_BYTE *)(v2 + 289) & 4) == 0)
  {
    v3 = *(_QWORD *)result[1];
    if (v3)
    {
      v4 = v2;
      while (v4 != v3)
      {
        v4 = *(_QWORD *)(v4 + 24);
        if (!v4 || (*(_BYTE *)(v4 + 288) & 0x80) != 0)
          return result;
      }
    }
    return (*(_QWORD *(**)(_QWORD *__return_ptr))(*(_QWORD *)result[2] + 16))((_QWORD *)result[2]);
  }
  return result;
}

uint64_t std::__function::__func<REQueryEvaluateEntityQueryWithRootEntity::$_0,std::allocator<REQueryEvaluateEntityQueryWithRootEntity::$_0>,void ()(re::ecs2::Entity *)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<REQueryEvaluateEntityQueryWithRootEntity::$_0,std::allocator<REQueryEvaluateEntityQueryWithRootEntity::$_0>,void ()(re::ecs2::Entity *)>::target_type()
{
}

void std::__function::__func<REQueryEvaluateComponentQuery::$_0,std::allocator<REQueryEvaluateComponentQuery::$_0>,void ()(re::ecs2::Component *)>::~__func()
{
  JUMPOUT(0x2276933B8);
}

_QWORD *std::__function::__func<REQueryEvaluateComponentQuery::$_0,std::allocator<REQueryEvaluateComponentQuery::$_0>,void ()(re::ecs2::Component *)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_24ED9C3B8;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<REQueryEvaluateComponentQuery::$_0,std::allocator<REQueryEvaluateComponentQuery::$_0>,void ()(re::ecs2::Component *)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_24ED9C3B8;
  a2[1] = v2;
  return result;
}

uint64_t std::__function::__func<REQueryEvaluateComponentQuery::$_0,std::allocator<REQueryEvaluateComponentQuery::$_0>,void ()(re::ecs2::Component *)>::operator()(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(_QWORD **)(a1 + 8) + 16))();
}

uint64_t std::__function::__func<REQueryEvaluateComponentQuery::$_0,std::allocator<REQueryEvaluateComponentQuery::$_0>,void ()(re::ecs2::Component *)>::target(uint64_t a1, uint64_t a2)
{
    return a1 + 8;
  else
    return 0;
}

void *std::__function::__func<REQueryEvaluateComponentQuery::$_0,std::allocator<REQueryEvaluateComponentQuery::$_0>,void ()(re::ecs2::Component *)>::target_type()
{
}

uint64_t RECIntrospectionAlloc(re *a1, uint64_t a2)
{
  unsigned int v2;
  uint64_t *v3;
  uint64_t result;

  if ((a1 & 0x80000000) != 0)
  {
    re::internal::assertLog((re::internal *)4, a2, "assertion failure: '%s' (%s:line %i) byteCount must not be negative.", "byteCount >= 0", "RECIntrospectionAlloc", 9);
    result = _os_crash();
    __break(1u);
  }
  else
  {
    v2 = a1;
    v3 = re::globalAllocators(a1);
    return (*(uint64_t (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)v3[2] + 32))(v3[2], v2, 0);
  }
  return result;
}

re *RECIntrospectionFree(re *result)
{
  re *v1;
  uint64_t *v2;

  if (result)
  {
    v1 = result;
    v2 = re::globalAllocators(result);
    return (re *)(*(uint64_t (**)(uint64_t, re *))(*(_QWORD *)v2[2] + 40))(v2[2], v1);
  }
  return result;
}

void REFromToByAnimationDefaultParameters(uint64_t a1@<X8>)
{
  *(_BYTE *)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_BYTE *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = 0x3FF0000000000000;
}

double RESampledAnimationDefaultParameters@<D0>(uint64_t a1@<X8>)
{
  double result;

  result = 0.0;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_BYTE *)(a1 + 17) = 1;
  *(_DWORD *)(a1 + 20) = 1023969417;
  return result;
}

int64x2_t REAnimationClipDefaultParameters@<Q0>(int64x2_t *a1@<X8>)
{
  int64x2_t result;

  a1->i8[0] = 0;
  a1->i64[1] = 0;
  result = vdupq_n_s64(0x7FF8000000000000uLL);
  a1[1] = result;
  a1[2].i64[0] = 0;
  a1[2].i64[1] = 0;
  a1[3].i64[0] = 0x7FF8000000000000;
  a1[3].i32[2] = 1065353216;
  a1[3].i16[6] = 0;
  return result;
}

int64x2_t REAnimationClipDefaultParametersEx@<Q0>(int64x2_t *a1@<X8>)
{
  int64x2_t result;

  a1->i8[0] = 0;
  a1->i64[1] = 0;
  result = vdupq_n_s64(0x7FF8000000000000uLL);
  a1[1] = result;
  a1[2].i64[0] = 0;
  a1[2].i64[1] = 0;
  a1[3].i64[0] = 0x7FF8000000000000;
  a1[3].i32[2] = 1065353216;
  a1[3].i16[6] = 0;
  a1[3].i8[14] = 0;
  return result;
}

void RECreateBackEase(uint64_t a1@<X8>, float a2@<S0>)
{
  *(_QWORD *)a1 = &off_24ED203F0;
  *(_QWORD *)(a1 + 8) = 0;
  *(float *)(a1 + 16) = a2;
}

uint64_t RECreateBounceEase@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>, float a3@<S0>)
{
  *(_QWORD *)(a2 + 8) = 1;
  *(_QWORD *)a2 = &off_24ED20448;
  *(_DWORD *)(a2 + 16) = result;
  *(float *)(a2 + 20) = a3;
  return result;
}

double RECreateCircleEase@<D0>(_QWORD *a1@<X8>)
{
  double result;

  *(_QWORD *)&result = 2;
  a1[1] = 2;
  *a1 = &off_24ED204A0;
  return result;
}

uint64_t RECreateElasticEase@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>, float a3@<S0>)
{
  *(_QWORD *)(a2 + 8) = 3;
  *(_QWORD *)a2 = &off_24ED204F8;
  *(_DWORD *)(a2 + 16) = result;
  *(float *)(a2 + 20) = a3;
  return result;
}

void RECreateExponentialEase(uint64_t a1@<X8>, float a2@<S0>)
{
  *(_QWORD *)(a1 + 8) = 4;
  *(_QWORD *)a1 = &off_24ED20550;
  *(float *)(a1 + 16) = a2;
}

double RECreateHermiteEase@<D0>(_QWORD *a1@<X8>)
{
  double result;

  *(_QWORD *)&result = 5;
  a1[1] = 5;
  *a1 = &off_24ED1FF00;
  return result;
}

void RECreateLogarithmicEase(uint64_t a1@<X8>, float a2@<S0>)
{
  *(_QWORD *)(a1 + 8) = 6;
  *(_QWORD *)a1 = &off_24ED205A8;
  *(float *)(a1 + 16) = a2;
}

void RECreatePowerEase(uint64_t a1@<X8>, float a2@<S0>)
{
  *(_QWORD *)(a1 + 8) = 7;
  *(_QWORD *)a1 = &off_24ED20600;
  *(float *)(a1 + 16) = a2;
}

double RECreateSineEase@<D0>(_QWORD *a1@<X8>)
{
  double result;

  *(_QWORD *)&result = 8;
  a1[1] = 8;
  *a1 = &off_24ED20658;
  return result;
}

void RECreateCubicBezierEase(uint64_t a1@<X8>, double a2@<D0>, double a3@<D1>)
{
  *(_DWORD *)(a1 + 8) = 9;
  *(_QWORD *)a1 = &off_24ED206B0;
  *(double *)(a1 + 16) = a2;
  *(double *)(a1 + 24) = a3;
}

float REEasingFunctionEvaluateBackEase(float a1, float a2)
{
  return (float)(sinf(a2 * -3.1416) * (float)(fmaxf(a1, 0.0) * a2)) + (float)((float)(a2 * a2) * a2);
}

float REEasingFunctionEvaluateBounceEase(re *a1, float a2, float a3)
{
  return re::bounceEase(a1, a3, a2);
}

float REEasingFunctionEvaluateCircleEase(float a1)
{
  if (a1 > 1.0)
    a1 = 1.0;
  if (a1 < -1.0)
    a1 = -1.0;
  return 1.0 - sqrtf(1.0 - (float)(a1 * a1));
}

float REEasingFunctionEvaluateElasticEase(unsigned int a1, float a2, float a3)
{
  float v5;
  float v6;
  float v7;

  v5 = fmaxf(a2, 0.0);
  v6 = a3;
  if (fabsf(v5) >= 0.00001)
  {
    v7 = 1.0 - expf(v5 * a3);
    v6 = v7 / (float)(1.0 - expf(v5));
  }
  return sinf((float)((float)((float)a1 + 0.25) * 6.2832) * a3) * v6;
}

float REEasingFunctionEvaluateExponentialEase(float a1, float a2)
{
  float v3;

  if (fabsf(a1) >= 0.00001)
  {
    v3 = 1.0 - expf(a1 * a2);
    return v3 / (float)(1.0 - expf(a1));
  }
  return a2;
}

float REEasingFunctionEvaluateHermiteEase(float a1)
{
  float v1;

  v1 = 0.0;
  if (a1 > 0.0)
  {
    v1 = 1.0;
    if (a1 < 1.0)
      return (float)((float)(a1 * a1) * (float)(3.0 - a1)) * 0.5;
  }
  return v1;
}

void REEasingFunctionEvaluateLogarithmicEase(float a1, float a2)
{
  if (a2 >= 0.0)
  {
    logf((float)((float)(a1 + -1.0) * a2) + 1.0);
    logf(a1);
  }
}

float REEasingFunctionEvaluatePowerEase(float a1, float a2)
{
  return powf(a2, fmaxf(a1, 0.0));
}

float REEasingFunctionEvaluateSineEase(float a1)
{
  return sinf((float)(1.0 - a1) * -1.5708) + 1.0;
}

float REEasingFunctionEvaluateCubicBezierEase(double a1, double a2, float a3)
{
  return re::internal::evaluateCubicBezierEase<float>(*(uint64_t *)&a1, *(uint64_t *)&a2, a3, 0.00001);
}

uint64_t REEasingFunctionSetMode(uint64_t result, int a2)
{
  if (*(_DWORD *)(result + 8) <= 8u)
    *(_DWORD *)(result + 12) = a2;
  return result;
}

uint64_t REEasingFunctionGetMode(uint64_t a1)
{
  if (*(_DWORD *)(a1 + 8) > 8u)
    return 0;
  else
    return *(unsigned int *)(a1 + 12);
}

uint64_t REEasingFunctionEvaluate(uint64_t result)
{
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 16))(result);
  return result;
}

_anonymous_namespace_ *RECreateBackEaseEx(re *a1, float a2)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t *v5;
  _anonymous_namespace_ *v6;
  uint64_t v8;
  _QWORD v9[5];

  v9[4] = *MEMORY[0x24BDAC8D0];
  v3 = re::globalAllocators(a1);
  v4 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v3[2] + 32))(v3[2], 24, 8);
  *(_QWORD *)v4 = &off_24ED203F0;
  *(_QWORD *)(v4 + 8) = 0;
  v9[3] = v9;
  v8 = v4;
  v9[0] = &off_24ED9C438;
  *(float *)(v4 + 16) = a2;
  v5 = re::globalAllocators((re *)v4);
  v6 = (_anonymous_namespace_ *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v5[2] + 32))(v5[2], 64, 8);
  re::Shareable<std::unique_ptr<re::EasingFunction,std::function<void ()(re::EasingFunction*)>>>::Shareable<std::unique_ptr<re::EasingFunction,std::function<void ()(re::EasingFunction*)>>>(v6, &v8);
  std::unique_ptr<re::RigHierarchy,std::function<void ()(re::RigHierarchy*)>>::~unique_ptr[abi:nn180100](&v8);
  return v6;
}

_anonymous_namespace_ *RECreateBounceEaseEx(re *a1, float a2)
{
  int v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t *v6;
  _anonymous_namespace_ *v7;
  uint64_t v9;
  _QWORD v10[5];

  v3 = (int)a1;
  v10[4] = *MEMORY[0x24BDAC8D0];
  v4 = re::globalAllocators(a1);
  v5 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v4[2] + 32))(v4[2], 24, 8);
  *(_QWORD *)(v5 + 8) = 1;
  *(_QWORD *)v5 = &off_24ED20448;
  v10[3] = v10;
  v9 = v5;
  v10[0] = &off_24ED9C4B8;
  *(_DWORD *)(v5 + 16) = v3;
  *(float *)(v5 + 20) = a2;
  v6 = re::globalAllocators((re *)v5);
  v7 = (_anonymous_namespace_ *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v6[2] + 32))(v6[2], 64, 8);
  re::Shareable<std::unique_ptr<re::EasingFunction,std::function<void ()(re::EasingFunction*)>>>::Shareable<std::unique_ptr<re::EasingFunction,std::function<void ()(re::EasingFunction*)>>>(v7, &v9);
  std::unique_ptr<re::RigHierarchy,std::function<void ()(re::RigHierarchy*)>>::~unique_ptr[abi:nn180100](&v9);
  return v7;
}

_anonymous_namespace_ *RECreateCircleEaseEx(re *a1)
{
  uint64_t *v1;
  re *v2;
  uint64_t *v3;
  _anonymous_namespace_ *v4;
  re *v6;
  _QWORD v7[5];

  v7[4] = *MEMORY[0x24BDAC8D0];
  v1 = re::globalAllocators(a1);
  v2 = (re *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v1[2] + 32))(v1[2], 16, 8);
  *((_QWORD *)v2 + 1) = 2;
  *(_QWORD *)v2 = &off_24ED204A0;
  v7[3] = v7;
  v6 = v2;
  v7[0] = &off_24ED9C538;
  v3 = re::globalAllocators(v2);
  v4 = (_anonymous_namespace_ *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v3[2] + 32))(v3[2], 64, 8);
  re::Shareable<std::unique_ptr<re::EasingFunction,std::function<void ()(re::EasingFunction*)>>>::Shareable<std::unique_ptr<re::EasingFunction,std::function<void ()(re::EasingFunction*)>>>(v4, (uint64_t *)&v6);
  std::unique_ptr<re::RigHierarchy,std::function<void ()(re::RigHierarchy*)>>::~unique_ptr[abi:nn180100]((uint64_t *)&v6);
  return v4;
}

_anonymous_namespace_ *RECreateElasticEaseEx(re *a1, float a2)
{
  int v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t *v6;
  _anonymous_namespace_ *v7;
  uint64_t v9;
  _QWORD v10[5];

  v3 = (int)a1;
  v10[4] = *MEMORY[0x24BDAC8D0];
  v4 = re::globalAllocators(a1);
  v5 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v4[2] + 32))(v4[2], 24, 8);
  *(_QWORD *)(v5 + 8) = 3;
  *(_QWORD *)v5 = &off_24ED204F8;
  v10[3] = v10;
  v9 = v5;
  v10[0] = &off_24ED9C5B8;
  *(_DWORD *)(v5 + 16) = v3;
  *(float *)(v5 + 20) = a2;
  v6 = re::globalAllocators((re *)v5);
  v7 = (_anonymous_namespace_ *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v6[2] + 32))(v6[2], 64, 8);
  re::Shareable<std::unique_ptr<re::EasingFunction,std::function<void ()(re::EasingFunction*)>>>::Shareable<std::unique_ptr<re::EasingFunction,std::function<void ()(re::EasingFunction*)>>>(v7, &v9);
  std::unique_ptr<re::RigHierarchy,std::function<void ()(re::RigHierarchy*)>>::~unique_ptr[abi:nn180100](&v9);
  return v7;
}

_anonymous_namespace_ *RECreateExponentialEaseEx(re *a1, float a2)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t *v5;
  _anonymous_namespace_ *v6;
  uint64_t v8;
  _QWORD v9[5];

  v9[4] = *MEMORY[0x24BDAC8D0];
  v3 = re::globalAllocators(a1);
  v4 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v3[2] + 32))(v3[2], 24, 8);
  *(_QWORD *)(v4 + 8) = 4;
  *(_QWORD *)v4 = &off_24ED20550;
  v9[3] = v9;
  v8 = v4;
  v9[0] = &off_24ED9C638;
  *(float *)(v4 + 16) = a2;
  v5 = re::globalAllocators((re *)v4);
  v6 = (_anonymous_namespace_ *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v5[2] + 32))(v5[2], 64, 8);
  re::Shareable<std::unique_ptr<re::EasingFunction,std::function<void ()(re::EasingFunction*)>>>::Shareable<std::unique_ptr<re::EasingFunction,std::function<void ()(re::EasingFunction*)>>>(v6, &v8);
  std::unique_ptr<re::RigHierarchy,std::function<void ()(re::RigHierarchy*)>>::~unique_ptr[abi:nn180100](&v8);
  return v6;
}

_anonymous_namespace_ *RECreateHermiteEaseEx(re *a1)
{
  uint64_t *v1;
  re *v2;
  uint64_t *v3;
  _anonymous_namespace_ *v4;
  re *v6;
  _QWORD v7[5];

  v7[4] = *MEMORY[0x24BDAC8D0];
  v1 = re::globalAllocators(a1);
  v2 = (re *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v1[2] + 32))(v1[2], 16, 8);
  *((_QWORD *)v2 + 1) = 5;
  *(_QWORD *)v2 = &off_24ED1FF00;
  v7[3] = v7;
  v6 = v2;
  v7[0] = &off_24ED9C6B8;
  v3 = re::globalAllocators(v2);
  v4 = (_anonymous_namespace_ *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v3[2] + 32))(v3[2], 64, 8);
  re::Shareable<std::unique_ptr<re::EasingFunction,std::function<void ()(re::EasingFunction*)>>>::Shareable<std::unique_ptr<re::EasingFunction,std::function<void ()(re::EasingFunction*)>>>(v4, (uint64_t *)&v6);
  std::unique_ptr<re::RigHierarchy,std::function<void ()(re::RigHierarchy*)>>::~unique_ptr[abi:nn180100]((uint64_t *)&v6);
  return v4;
}

_anonymous_namespace_ *RECreateLogarithmicEaseEx(re *a1, float a2)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t *v5;
  _anonymous_namespace_ *v6;
  uint64_t v8;
  _QWORD v9[5];

  v9[4] = *MEMORY[0x24BDAC8D0];
  v3 = re::globalAllocators(a1);
  v4 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v3[2] + 32))(v3[2], 24, 8);
  *(_QWORD *)(v4 + 8) = 6;
  *(_QWORD *)v4 = &off_24ED205A8;
  v9[3] = v9;
  v8 = v4;
  v9[0] = &off_24ED9C738;
  *(float *)(v4 + 16) = a2;
  v5 = re::globalAllocators((re *)v4);
  v6 = (_anonymous_namespace_ *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v5[2] + 32))(v5[2], 64, 8);
  re::Shareable<std::unique_ptr<re::EasingFunction,std::function<void ()(re::EasingFunction*)>>>::Shareable<std::unique_ptr<re::EasingFunction,std::function<void ()(re::EasingFunction*)>>>(v6, &v8);
  std::unique_ptr<re::RigHierarchy,std::function<void ()(re::RigHierarchy*)>>::~unique_ptr[abi:nn180100](&v8);
  return v6;
}

_anonymous_namespace_ *RECreatePowerEaseEx(re *a1, float a2)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t *v5;
  _anonymous_namespace_ *v6;
  uint64_t v8;
  _QWORD v9[5];

  v9[4] = *MEMORY[0x24BDAC8D0];
  v3 = re::globalAllocators(a1);
  v4 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v3[2] + 32))(v3[2], 24, 8);
  *(_QWORD *)(v4 + 8) = 7;
  *(_QWORD *)v4 = &off_24ED20600;
  v9[3] = v9;
  v8 = v4;
  v9[0] = &off_24ED9C7B8;
  *(float *)(v4 + 16) = a2;
  v5 = re::globalAllocators((re *)v4);
  v6 = (_anonymous_namespace_ *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v5[2] + 32))(v5[2], 64, 8);
  re::Shareable<std::unique_ptr<re::EasingFunction,std::function<void ()(re::EasingFunction*)>>>::Shareable<std::unique_ptr<re::EasingFunction,std::function<void ()(re::EasingFunction*)>>>(v6, &v8);
  std::unique_ptr<re::RigHierarchy,std::function<void ()(re::RigHierarchy*)>>::~unique_ptr[abi:nn180100](&v8);
  return v6;
}

_anonymous_namespace_ *RECreateSineEaseEx(re *a1)
{
  uint64_t *v1;
  re *v2;
  uint64_t *v3;
  _anonymous_namespace_ *v4;
  re *v6;
  _QWORD v7[5];

  v7[4] = *MEMORY[0x24BDAC8D0];
  v1 = re::globalAllocators(a1);
  v2 = (re *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v1[2] + 32))(v1[2], 16, 8);
  *((_QWORD *)v2 + 1) = 8;
  *(_QWORD *)v2 = &off_24ED20658;
  v7[3] = v7;
  v6 = v2;
  v7[0] = &off_24ED9C838;
  v3 = re::globalAllocators(v2);
  v4 = (_anonymous_namespace_ *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v3[2] + 32))(v3[2], 64, 8);
  re::Shareable<std::unique_ptr<re::EasingFunction,std::function<void ()(re::EasingFunction*)>>>::Shareable<std::unique_ptr<re::EasingFunction,std::function<void ()(re::EasingFunction*)>>>(v4, (uint64_t *)&v6);
  std::unique_ptr<re::RigHierarchy,std::function<void ()(re::RigHierarchy*)>>::~unique_ptr[abi:nn180100]((uint64_t *)&v6);
  return v4;
}

_anonymous_namespace_ *RECreateCubicBezierEaseEx(re *a1, double a2, double a3)
{
  uint64_t *v5;
  uint64_t v6;
  uint64_t *v7;
  _anonymous_namespace_ *v8;
  uint64_t v10;
  _QWORD v11[5];

  v11[4] = *MEMORY[0x24BDAC8D0];
  v5 = re::globalAllocators(a1);
  v6 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v5[2] + 32))(v5[2], 32, 8);
  *(_DWORD *)(v6 + 8) = 9;
  *(_QWORD *)v6 = &off_24ED206B0;
  v11[3] = v11;
  v10 = v6;
  v11[0] = &off_24ED9C8B8;
  *(double *)(v6 + 16) = a2;
  *(double *)(v6 + 24) = a3;
  v7 = re::globalAllocators((re *)v6);
  v8 = (_anonymous_namespace_ *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v7[2] + 32))(v7[2], 64, 8);
  re::Shareable<std::unique_ptr<re::EasingFunction,std::function<void ()(re::EasingFunction*)>>>::Shareable<std::unique_ptr<re::EasingFunction,std::function<void ()(re::EasingFunction*)>>>(v8, &v10);
  std::unique_ptr<re::RigHierarchy,std::function<void ()(re::RigHierarchy*)>>::~unique_ptr[abi:nn180100](&v10);
  return v8;
}

uint64_t REEasingFunctionSetModeEx(uint64_t result, int a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 24);
  if (*(_DWORD *)(v2 + 8) <= 8u)
    *(_DWORD *)(v2 + 12) = a2;
  return result;
}

uint64_t REEasingFunctionGetModeEx(uint64_t a1)
{
  uint64_t v1;

  v1 = *(_QWORD *)(a1 + 24);
  if (*(_DWORD *)(v1 + 8) > 8u)
    return 0;
  else
    return *(unsigned int *)(v1 + 12);
}

uint64_t REEasingFunctionEvaluateEx(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 24) + 16))(*(_QWORD *)(a1 + 24));
}

uint64_t REAnimationHandoffDefaultDesc()
{
  return 0;
}

void REAnimationHandoffDefaultDescEx(uint64_t a1@<X8>)
{
  *(_QWORD *)a1 = 0;
  *(_DWORD *)(a1 + 8) = 0x80000000;
  *(_QWORD *)(a1 + 16) = "";
  *(_BYTE *)(a1 + 24) = 0;
}

double REAnimationAssetGetTotalDuration(uint64_t a1)
{
  uint64_t v1;
  double v2;
  uint64_t v3;
  uint64_t v5[3];

  re::AssetAPIHelper::assetHandleCreate(a1, v5);
  v1 = re::AssetHandle::asset<re::TimelineAsset>((re::TimelineAsset *)v5);
  v2 = 0.0;
  if (v1)
  {
    v3 = *(_QWORD *)(v1 + 16);
    if (v3)
      v2 = (*(double (**)(uint64_t))(*(_QWORD *)v3 + 40))(v3);
  }
  re::AssetHandle::~AssetHandle((re::AssetHandle *)v5);
  return v2;
}

uint64_t REAnimationAssetGetName(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4[3];

  re::AssetAPIHelper::assetHandleCreate(a1, v4);
  v1 = re::AssetHandle::asset<re::TimelineAsset>((re::TimelineAsset *)v4);
  if (v1)
    v2 = *(_QWORD *)(*(_QWORD *)(v1 + 8) + 32);
  else
    v2 = 0;
  re::AssetHandle::~AssetHandle((re::AssetHandle *)v4);
  return v2;
}

void REAnimationAssetGetFromToBy2(uint64_t a1, int a2, _QWORD *a3, _QWORD *a4, _QWORD *a5)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  if (a3)
    *a3 = 0;
  if (a4)
    *a4 = 0;
  if (a5)
    *a5 = 0;
  re::AssetAPIHelper::assetHandleCreate(a1, &v12);
  re::AssetHandle::loadNow(v13, 0);
  ++*(_DWORD *)(v13 + 260);
  v9 = re::AssetHandle::loadedAsset<re::TimelineAsset>((re::TimelineAsset *)&v12);
  if (v9)
  {
    v10 = *(_QWORD *)(v9 + 16);
    if (v10)
    {
      switch(a2)
      {
        case 0:
          if (*(_DWORD *)(v10 + 8) == 11)
          {
            if (a3 && *(_BYTE *)(v10 + 88))
              *a3 = v10 + 92;
            if (a4 && *(_BYTE *)(v10 + 96))
              *a4 = v10 + 100;
            if (a5 && *(_BYTE *)(v10 + 104))
            {
              v11 = v10 + 108;
              goto LABEL_56;
            }
          }
          break;
        case 1:
          if (*(_DWORD *)(v10 + 8) == 12)
            goto LABEL_23;
          break;
        case 2:
          if (*(_DWORD *)(v10 + 8) == 13)
          {
LABEL_23:
            if (a3 && *(_BYTE *)(v10 + 88))
              *a3 = v10 + 96;
            if (a4 && *(_BYTE *)(v10 + 104))
              *a4 = v10 + 112;
            if (a5 && *(_BYTE *)(v10 + 120))
            {
              v11 = v10 + 128;
              goto LABEL_56;
            }
          }
          break;
        case 3:
          if (*(_DWORD *)(v10 + 8) == 14)
            goto LABEL_37;
          break;
        case 4:
          if (*(_DWORD *)(v10 + 8) == 15)
            goto LABEL_37;
          break;
        case 5:
          if (*(_DWORD *)(v10 + 8) == 16)
          {
LABEL_37:
            if (a3 && *(_BYTE *)(v10 + 96))
              *a3 = v10 + 112;
            if (a4 && *(_BYTE *)(v10 + 128))
              *a4 = v10 + 144;
            if (a5 && *(_BYTE *)(v10 + 160))
            {
              v11 = v10 + 176;
              goto LABEL_56;
            }
          }
          break;
        case 6:
          if (*(_DWORD *)(v10 + 8) == 17)
          {
            if (a3 && *(_BYTE *)(v10 + 96))
              *a3 = v10 + 112;
            if (a4 && *(_BYTE *)(v10 + 160))
              *a4 = v10 + 176;
            if (a5 && *(_BYTE *)(v10 + 224))
            {
              v11 = v10 + 240;
LABEL_56:
              *a5 = v11;
            }
          }
          break;
        default:
          break;
      }
    }
  }
  re::AssetHandle::~AssetHandle((re::AssetHandle *)&v12);
}

uint64_t REAnimationIsInterpolationEnabled(uint64_t a1)
{
  unsigned int v1;
  uint64_t *v2;
  uint64_t *v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  const re::Timeline *v8;
  uint64_t IsInterpolationEnabled;
  re::TimelineAsset *v10;
  uint64_t v11;
  unsigned int v12;
  uint64_t result;
  uint64_t v14;
  uint64_t v15;

  re::AssetAPIHelper::assetHandleCreate(a1, &v14);
  if (!v15)
    goto LABEL_15;
  v1 = atomic_load((unsigned int *)(v15 + 704));
  if (v1 != 2)
    goto LABEL_15;
  v2 = re::BasicAsset<re::AnimationScene,&re::kAnimationSceneAssetName,&re::kAnimationSceneAssetExtension>::assetType();
  v3 = (uint64_t *)v15;
  if (v15)
    v3 = *(uint64_t **)(v15 + 264);
  if (v2 == v3)
  {
    v10 = (re::TimelineAsset *)re::AssetHandle::asset<re::BasicAsset<re::AnimationScene,&re::kAnimationSceneAssetName,&re::kAnimationSceneAssetExtension>>((re::AssetHandle *)&v14);
    if (!v10)
      goto LABEL_13;
    v11 = *((_QWORD *)v10 + 1);
    if (v11)
    {
      v12 = atomic_load((unsigned int *)(v11 + 704));
      if (v12 == 2)
      {
        v7 = re::AssetHandle::asset<re::TimelineAsset>(v10);
        goto LABEL_8;
      }
      re::AssetHandle::loadAsync(v10);
    }
LABEL_15:
    IsInterpolationEnabled = 1;
    goto LABEL_16;
  }
  v4 = re::TimelineAsset::assetType((re::TimelineAsset *)v2);
  v6 = *(uint64_t **)(v15 + 264);
  if (v4 == v6)
  {
    v7 = re::AssetHandle::asset<re::TimelineAsset>((re::TimelineAsset *)&v14);
    if (v7)
    {
LABEL_8:
LABEL_16:
      re::AssetHandle::~AssetHandle((re::AssetHandle *)&v14);
      return IsInterpolationEnabled;
    }
LABEL_13:
    IsInterpolationEnabled = 0;
    goto LABEL_16;
  }
  re::internal::assertLog((re::internal *)5, v5, "assertion failure: '%s' (%s:line %i) Unknown timeline asset handle type: %s", "!\"Unreachable code\"", "REAnimationIsInterpolationEnabled", 925, *v6);
  result = _os_crash();
  __break(1u);
  return result;
}

uint64_t `anonymous namespace'::processIsInterpolationEnabled(uint64_t this, const re::Timeline *a2)
{
  uint64_t v2;
  int v3;
  unint64_t v4;
  unint64_t v5;
  _anonymous_namespace_ *v6;
  const re::Timeline *v7;

  if (this)
  {
    v2 = this;
    v3 = *(_DWORD *)(this + 8);
    switch(v3)
    {
      case 19:
      case 20:
      case 21:
      case 22:
      case 23:
      case 24:
      case 25:
      case 26:
      case 27:
      case 28:
      case 29:
      case 30:
      case 31:
      case 32:
      case 33:
      case 34:
        goto LABEL_3;
      default:
        if (v3 == 61)
        {
LABEL_3:
          this = *(_BYTE *)(this + 73) != 0;
        }
        else
        {
          this = (*(uint64_t (**)(uint64_t, const re::Timeline *))(*(_QWORD *)this + 24))(this, a2);
          if (this)
          {
            v4 = this;
            v5 = 1;
            do
            {
              v6 = (_anonymous_namespace_ *)(*(uint64_t (**)(uint64_t, unint64_t))(*(_QWORD *)v2 + 32))(v2, v5 - 1);
              if (v5 >= v4)
                break;
              ++v5;
            }
            while ((this & 1) == 0);
          }
        }
        break;
    }
  }
  return this;
}

uint64_t REAnimationServiceStartAnimation(uint64_t a1, uint64_t a2, BOOL *a3)
{
  uint64_t v5;
  _anonymous_namespace_ *v6;
  uint64_t v7;
  unsigned __int8 v8;
  re *v9;
  const re::IntrospectionBase *v10;
  BOOL *v11;
  void *v12;
  unsigned __int8 v13;
  unsigned __int8 v14;
  unsigned __int8 v15;
  unsigned __int8 v16;
  unsigned __int8 v17;
  unsigned __int8 v18;
  unsigned __int8 v19;
  unint64_t v20;
  const re::IntrospectionBase *v22;
  const re::IntrospectionBase *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  _BYTE v27[40];
  uint64_t v28;
  __n128 v29;
  const char *v30;

  re::AssetAPIHelper::assetHandleCreate(a2, &v24);
  re::AssetHandle::loadNow(v25, 0);
  ++*(_DWORD *)(v25 + 260);
  v5 = re::AssetHandle::loadedAsset<re::TimelineAsset>((re::TimelineAsset *)&v24);
  if (v5)
  {
    v6 = *(_anonymous_namespace_ **)(v5 + 16);
    switch(a3[24])
    {
      case 0:
        v7 = 0;
        if (!a1 || !v6)
          goto LABEL_41;
        if ((v8 & 1) == 0
        {
          re::introspect<float>(void)::info = re::introspect_float(0, v22);
        }
        v9 = (re *)re::introspect<float>(void)::info;
        v10 = (const re::IntrospectionBase *)(a3 + 25);
        v11 = a3 + 28;
        v12 = a3 + 32;
        break;
      case 1:
        v7 = 0;
        if (!a1 || !v6)
          goto LABEL_41;
        if ((v13 & 1) == 0
        {
          re::introspect<double>(void)::info = (uint64_t)re::introspect_double(0, v23);
        }
        v9 = (re *)re::introspect<double>(void)::info;
        goto LABEL_16;
      case 2:
        v7 = 0;
        if (!a1 || !v6)
          goto LABEL_41;
        if ((v14 & 1) == 0
        {
          re::introspect<re::Vector2<float>>(void)::info = (_UNKNOWN *)re::introspect_Vector2F(0);
        }
        v9 = (re *)re::introspect<re::Vector2<float>>(void)::info;
LABEL_16:
        v10 = (const re::IntrospectionBase *)(a3 + 25);
        v11 = a3 + 32;
        v12 = a3 + 40;
        break;
      case 3:
        v7 = 0;
        if (!a1 || !v6)
          goto LABEL_41;
        if ((v15 & 1) == 0
        {
          re::introspect<re::Vector3<float>>(void)::info = (_UNKNOWN *)re::introspect_Vector3F(0);
        }
        v9 = (re *)re::introspect<re::Vector3<float>>(void)::info;
        goto LABEL_29;
      case 4:
        v7 = 0;
        if (!a1 || !v6)
          goto LABEL_41;
        if ((v16 & 1) == 0
        {
          re::introspect<re::Vector4<float>>(void)::info = (_UNKNOWN *)re::introspect_Vector4F(0);
        }
        v9 = (re *)re::introspect<re::Vector4<float>>(void)::info;
        goto LABEL_29;
      case 5:
        v7 = 0;
        if (!a1 || !v6)
          goto LABEL_41;
        if ((v17 & 1) == 0
        {
          re::introspect<re::Quaternion<float>>(void)::info = re::introspect_QuaternionF(0);
        }
        v9 = (re *)re::introspect<re::Quaternion<float>>(void)::info;
LABEL_29:
        v10 = (const re::IntrospectionBase *)(a3 + 25);
        v11 = a3 + 32;
        v12 = a3 + 48;
        break;
      case 6:
        v7 = 0;
        if (!a1 || !v6)
          goto LABEL_41;
        if ((v18 & 1) == 0
        {
          re::introspect<re::GenericSRT<float>>(void)::info = re::introspect_SRT(0);
        }
        v9 = (re *)re::introspect<re::GenericSRT<float>>(void)::info;
        v10 = (const re::IntrospectionBase *)(a3 + 25);
        v11 = a3 + 32;
        v12 = a3 + 80;
        break;
      case 7:
        v7 = 0;
        if (!a1 || !v6)
          goto LABEL_41;
        if ((v19 & 1) == 0
        {
          re::introspect<re::SkeletalPose>(void)::info = re::introspect_SkeletalPose(0);
        }
        v9 = (re *)re::introspect<re::SkeletalPose>(void)::info;
        v10 = (const re::IntrospectionBase *)(a3 + 25);
        v11 = a3 + 32;
        v12 = a3 + 120;
        break;
      default:
        goto LABEL_7;
    }
    re::makeBindPoint(v9, v10, v11, v12, (uint64_t)&v26);
    v29.n128_u8[8] = 0;
    v28 = 0;
    v29.n128_u64[0] = 0;
    v29.n128_u32[3] = 0x80000000;
    v30 = "";
    v29.n128_u64[0] = (unint64_t)re::AnimationManager::startAnimation(a1, v6, 0, &v26, (unint64_t)&v29, 0, 0, &v28);
    v29.n128_u64[1] = v20;
    if (v28)

    re::make::shared::object<re::internal::AnimationControllerData,decltype(nullptr),re::AnimationController const&>((re *)&v28, &v29);
    v7 = v28;
    re::DynamicArray<re::BindPoint::BindPointData>::deinit((uint64_t)v27);
    re::DynamicArray<re::BindPoint::BindPointData>::deinit((uint64_t)v27);
  }
  else
  {
LABEL_7:
    v7 = 0;
  }
LABEL_41:
  re::AssetHandle::~AssetHandle((re::AssetHandle *)&v24);
  return v7;
}

uint64_t REAnimationServiceGetRootTimebase(uint64_t a1)
{
  return *(_QWORD *)(a1 + 64);
}

uint64_t REAnimatableValueCreate(re *a1, uint64_t *a2)
{
  char v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t (**v6)();
  uint64_t result;
  uint64_t *v8;
  uint64_t *v9;
  uint64_t *v10;
  uint64_t (**v11)();
  uint64_t *v12;
  __int128 v13;
  uint64_t *v14;
  uint64_t *v15;
  uint64_t *v16;

  v3 = (char)a1;
  switch((int)a1)
  {
    case 0:
      v4 = re::globalAllocators(a1);
      v5 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v4[2] + 32))(v4[2], 40, 8);
      *(_OWORD *)v5 = 0u;
      *(_OWORD *)(v5 + 16) = 0u;
      *(_QWORD *)(v5 + 32) = 0;
      ArcSharedObject::ArcSharedObject((ArcSharedObject *)v5, 0);
      *(_BYTE *)(v5 + 25) = 0;
      v6 = &off_24ED9C980;
      goto LABEL_5;
    case 1:
      v8 = re::globalAllocators(a1);
      v5 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v8[2] + 32))(v8[2], 48, 8);
      *(_OWORD *)v5 = 0u;
      *(_OWORD *)(v5 + 16) = 0u;
      *(_OWORD *)(v5 + 32) = 0u;
      ArcSharedObject::ArcSharedObject((ArcSharedObject *)v5, 0);
      *(_BYTE *)(v5 + 25) = 0;
      v6 = &off_24ED9C9E0;
LABEL_5:
      *(_QWORD *)v5 = v6;
      goto LABEL_14;
    case 2:
      v9 = re::globalAllocators(a1);
      v5 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v9[2] + 32))(v9[2], 48, 8);
      *(_OWORD *)v5 = 0u;
      *(_OWORD *)(v5 + 16) = 0u;
      *(_OWORD *)(v5 + 32) = 0u;
      ArcSharedObject::ArcSharedObject((ArcSharedObject *)v5, 0);
      *(_BYTE *)(v5 + 25) = 0;
      *(_QWORD *)v5 = &off_24ED9CA28;
      *(_QWORD *)(v5 + 32) = 0;
      *(_QWORD *)(v5 + 40) = 0;
      goto LABEL_14;
    case 3:
      v10 = re::globalAllocators(a1);
      v5 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v10[2] + 32))(v10[2], 64, 16);
      *(_OWORD *)v5 = 0u;
      *(_OWORD *)(v5 + 16) = 0u;
      *(_OWORD *)(v5 + 32) = 0u;
      *(_OWORD *)(v5 + 48) = 0u;
      ArcSharedObject::ArcSharedObject((ArcSharedObject *)v5, 0);
      *(_BYTE *)(v5 + 25) = 0;
      v11 = &off_24ED9CA70;
      goto LABEL_9;
    case 4:
      v12 = re::globalAllocators(a1);
      v5 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v12[2] + 32))(v12[2], 64, 16);
      *(_OWORD *)v5 = 0u;
      *(_OWORD *)(v5 + 16) = 0u;
      *(_OWORD *)(v5 + 32) = 0u;
      *(_OWORD *)(v5 + 48) = 0u;
      ArcSharedObject::ArcSharedObject((ArcSharedObject *)v5, 0);
      *(_BYTE *)(v5 + 25) = 0;
      v11 = &off_24ED9CAB8;
LABEL_9:
      *(_QWORD *)v5 = v11;
      v13 = 0uLL;
      goto LABEL_11;
    case 5:
      v14 = re::globalAllocators(a1);
      v5 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v14[2] + 32))(v14[2], 64, 16);
      *(_OWORD *)v5 = 0u;
      *(_OWORD *)(v5 + 16) = 0u;
      *(_OWORD *)(v5 + 32) = 0u;
      *(_OWORD *)(v5 + 48) = 0u;
      ArcSharedObject::ArcSharedObject((ArcSharedObject *)v5, 0);
      *(_BYTE *)(v5 + 25) = 0;
      *(_QWORD *)v5 = &off_24ED9CB00;
      v13 = xmmword_2260E5D70;
LABEL_11:
      *(_OWORD *)(v5 + 32) = v13;
      *(_OWORD *)(v5 + 48) = v13;
      goto LABEL_14;
    case 6:
      v15 = re::globalAllocators(a1);
      v5 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v15[2] + 32))(v15[2], 128, 16);
      *(_OWORD *)v5 = 0u;
      *(_OWORD *)(v5 + 16) = 0u;
      *(_OWORD *)(v5 + 32) = 0u;
      *(_OWORD *)(v5 + 48) = 0u;
      *(_OWORD *)(v5 + 64) = 0u;
      *(_OWORD *)(v5 + 80) = 0u;
      *(_OWORD *)(v5 + 96) = 0u;
      *(_OWORD *)(v5 + 112) = 0u;
      ArcSharedObject::ArcSharedObject((ArcSharedObject *)v5, 0);
      *(_BYTE *)(v5 + 25) = 0;
      *(_QWORD *)v5 = &off_24ED9CB48;
      *(_QWORD *)(v5 + 32) = 0x3F8000003F800000;
      *(_QWORD *)(v5 + 40) = 1065353216;
      *(_QWORD *)(v5 + 48) = 0;
      *(_QWORD *)(v5 + 56) = 0x3F80000000000000;
      *(_OWORD *)(v5 + 64) = 0u;
      *(_QWORD *)(v5 + 80) = 0x3F8000003F800000;
      *(_QWORD *)(v5 + 88) = 1065353216;
      *(_QWORD *)(v5 + 96) = 0;
      *(_QWORD *)(v5 + 104) = 0x3F80000000000000;
      *(_OWORD *)(v5 + 112) = 0u;
      goto LABEL_14;
    case 7:
      v16 = re::globalAllocators(a1);
      v5 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v16[2] + 32))(v16[2], 208, 8);
      *(_OWORD *)v5 = 0u;
      *(_OWORD *)(v5 + 16) = 0u;
      *(_OWORD *)(v5 + 32) = 0u;
      *(_OWORD *)(v5 + 48) = 0u;
      *(_OWORD *)(v5 + 64) = 0u;
      *(_OWORD *)(v5 + 80) = 0u;
      *(_OWORD *)(v5 + 96) = 0u;
      *(_OWORD *)(v5 + 112) = 0u;
      *(_OWORD *)(v5 + 128) = 0u;
      *(_OWORD *)(v5 + 144) = 0u;
      *(_OWORD *)(v5 + 160) = 0u;
      *(_OWORD *)(v5 + 176) = 0u;
      *(_OWORD *)(v5 + 192) = 0u;
      ArcSharedObject::ArcSharedObject((ArcSharedObject *)v5, 0);
      *(_WORD *)(v5 + 24) = 255;
      *(_QWORD *)v5 = &off_24ED9CB90;
      *(_QWORD *)(v5 + 32) = 0;
      *(_QWORD *)(v5 + 40) = &str_110;
      *(_OWORD *)(v5 + 48) = 0u;
      *(_OWORD *)(v5 + 64) = 0u;
      *(_OWORD *)(v5 + 80) = 0u;
      *(_DWORD *)(v5 + 96) = 0;
      *(_QWORD *)(v5 + 104) = 0;
      *(_QWORD *)(v5 + 112) = 0;
      *(_QWORD *)(v5 + 120) = 0;
      *(_QWORD *)(v5 + 128) = &str_110;
      *(_OWORD *)(v5 + 136) = 0u;
      *(_OWORD *)(v5 + 152) = 0u;
      *(_OWORD *)(v5 + 168) = 0u;
      *(_DWORD *)(v5 + 184) = 0;
      *(_QWORD *)(v5 + 192) = 0;
      *(_QWORD *)(v5 + 200) = 0;
LABEL_14:
      *(_BYTE *)(v5 + 24) = v3;
      *a2 = v5;
      result = 1;
      break;
    default:
      result = 0;
      break;
  }
  return result;
}

float REAnimatableValueGetFloat(uint64_t a1)
{
  uint64_t v1;

  v1 = 32;
  if (!*(_BYTE *)(a1 + 25))
    v1 = 28;
  return *(float *)(a1 + v1);
}

double REAnimatableValueGetDouble(uint64_t a1)
{
  uint64_t v1;

  v1 = 40;
  if (!*(_BYTE *)(a1 + 25))
    v1 = 32;
  return *(double *)(a1 + v1);
}

double REAnimatableValueGetVector2F(uint64_t a1)
{
  uint64_t v1;

  v1 = 40;
  if (!*(_BYTE *)(a1 + 25))
    v1 = 32;
  return *(double *)(a1 + v1);
}

__n128 REAnimatableValueGetVector3F(uint64_t a1)
{
  uint64_t v1;

  v1 = 48;
  if (!*(_BYTE *)(a1 + 25))
    v1 = 32;
  return *(__n128 *)(a1 + v1);
}

__n128 REAnimatableValueGetVector4F(uint64_t a1)
{
  uint64_t v1;

  v1 = 48;
  if (!*(_BYTE *)(a1 + 25))
    v1 = 32;
  return *(__n128 *)(a1 + v1);
}

__n128 REAnimatableValueGetQuaternionF(uint64_t a1)
{
  uint64_t v1;

  v1 = 48;
  if (!*(_BYTE *)(a1 + 25))
    v1 = 32;
  return *(__n128 *)(a1 + v1);
}

uint64_t REAnimatableValueSetFloat(uint64_t result, float a2)
{
  *(float *)(result + 28) = a2;
  return result;
}

uint64_t REAnimatableValueSetDouble(uint64_t result, double a2)
{
  *(double *)(result + 32) = a2;
  return result;
}

uint64_t REAnimatableValueSetVector2F(uint64_t result, double a2)
{
  *(double *)(result + 32) = a2;
  return result;
}

__n128 *REAnimatableValueSetVector3F(__n128 *result, __n128 a2)
{
  result[2] = a2;
  return result;
}

__n128 *REAnimatableValueSetVector4F(__n128 *result, __n128 a2)
{
  result[2] = a2;
  return result;
}

__n128 *REAnimatableValueSetQuaternionF(__n128 *result, __n128 a2)
{
  result[2] = a2;
  return result;
}

__n128 *REAnimatableValueSetSRT(__n128 *result, __n128 a2, __n128 a3, __n128 a4)
{
  result[2] = a2;
  result[3] = a3;
  result[4] = a4;
  return result;
}

void std::__function::__func<RECreateBackEaseEx::$_0,std::allocator<RECreateBackEaseEx::$_0>,void ()(re::EasingFunction *)>::~__func()
{
  JUMPOUT(0x2276933B8);
}

_QWORD *std::__function::__func<RECreateBackEaseEx::$_0,std::allocator<RECreateBackEaseEx::$_0>,void ()(re::EasingFunction *)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_24ED9C438;
  return result;
}

void std::__function::__func<RECreateBackEaseEx::$_0,std::allocator<RECreateBackEaseEx::$_0>,void ()(re::EasingFunction *)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_24ED9C438;
}

re *std::__function::__func<RECreateBackEaseEx::$_0,std::allocator<RECreateBackEaseEx::$_0>,void ()(re::EasingFunction *)>::operator()(re *result, void (****a2)(_QWORD))
{
  void (***v2)(_QWORD);
  uint64_t v3;

  v2 = *a2;
  if (*a2)
  {
    v3 = re::globalAllocators(result)[2];
    (**v2)(v2);
    return (re *)(*(uint64_t (**)(uint64_t, void (***)(_QWORD)))(*(_QWORD *)v3 + 40))(v3, v2);
  }
  return result;
}

uint64_t std::__function::__func<RECreateBackEaseEx::$_0,std::allocator<RECreateBackEaseEx::$_0>,void ()(re::EasingFunction *)>::target(uint64_t a1, uint64_t a2)
{
    return a1 + 8;
  else
    return 0;
}

void *std::__function::__func<RECreateBackEaseEx::$_0,std::allocator<RECreateBackEaseEx::$_0>,void ()(re::EasingFunction *)>::target_type()
{
}

void std::__function::__func<RECreateBounceEaseEx::$_0,std::allocator<RECreateBounceEaseEx::$_0>,void ()(re::EasingFunction *)>::~__func()
{
  JUMPOUT(0x2276933B8);
}

_QWORD *std::__function::__func<RECreateBounceEaseEx::$_0,std::allocator<RECreateBounceEaseEx::$_0>,void ()(re::EasingFunction *)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_24ED9C4B8;
  return result;
}

void std::__function::__func<RECreateBounceEaseEx::$_0,std::allocator<RECreateBounceEaseEx::$_0>,void ()(re::EasingFunction *)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_24ED9C4B8;
}

re *std::__function::__func<RECreateBounceEaseEx::$_0,std::allocator<RECreateBounceEaseEx::$_0>,void ()(re::EasingFunction *)>::operator()(re *result, void (****a2)(_QWORD))
{
  void (***v2)(_QWORD);
  uint64_t v3;

  v2 = *a2;
  if (*a2)
  {
    v3 = re::globalAllocators(result)[2];
    (**v2)(v2);
    return (re *)(*(uint64_t (**)(uint64_t, void (***)(_QWORD)))(*(_QWORD *)v3 + 40))(v3, v2);
  }
  return result;
}

uint64_t std::__function::__func<RECreateBounceEaseEx::$_0,std::allocator<RECreateBounceEaseEx::$_0>,void ()(re::EasingFunction *)>::target(uint64_t a1, uint64_t a2)
{
    return a1 + 8;
  else
    return 0;
}

void *std::__function::__func<RECreateBounceEaseEx::$_0,std::allocator<RECreateBounceEaseEx::$_0>,void ()(re::EasingFunction *)>::target_type()
{
}

void std::__function::__func<RECreateCircleEaseEx::$_0,std::allocator<RECreateCircleEaseEx::$_0>,void ()(re::EasingFunction *)>::~__func()
{
  JUMPOUT(0x2276933B8);
}

_QWORD *std::__function::__func<RECreateCircleEaseEx::$_0,std::allocator<RECreateCircleEaseEx::$_0>,void ()(re::EasingFunction *)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_24ED9C538;
  return result;
}

void std::__function::__func<RECreateCircleEaseEx::$_0,std::allocator<RECreateCircleEaseEx::$_0>,void ()(re::EasingFunction *)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_24ED9C538;
}

re *std::__function::__func<RECreateCircleEaseEx::$_0,std::allocator<RECreateCircleEaseEx::$_0>,void ()(re::EasingFunction *)>::operator()(re *result, void (****a2)(_QWORD))
{
  void (***v2)(_QWORD);
  uint64_t v3;

  v2 = *a2;
  if (*a2)
  {
    v3 = re::globalAllocators(result)[2];
    (**v2)(v2);
    return (re *)(*(uint64_t (**)(uint64_t, void (***)(_QWORD)))(*(_QWORD *)v3 + 40))(v3, v2);
  }
  return result;
}

uint64_t std::__function::__func<RECreateCircleEaseEx::$_0,std::allocator<RECreateCircleEaseEx::$_0>,void ()(re::EasingFunction *)>::target(uint64_t a1, uint64_t a2)
{
    return a1 + 8;
  else
    return 0;
}

void *std::__function::__func<RECreateCircleEaseEx::$_0,std::allocator<RECreateCircleEaseEx::$_0>,void ()(re::EasingFunction *)>::target_type()
{
}

void std::__function::__func<RECreateElasticEaseEx::$_0,std::allocator<RECreateElasticEaseEx::$_0>,void ()(re::EasingFunction *)>::~__func()
{
  JUMPOUT(0x2276933B8);
}

_QWORD *std::__function::__func<RECreateElasticEaseEx::$_0,std::allocator<RECreateElasticEaseEx::$_0>,void ()(re::EasingFunction *)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_24ED9C5B8;
  return result;
}

void std::__function::__func<RECreateElasticEaseEx::$_0,std::allocator<RECreateElasticEaseEx::$_0>,void ()(re::EasingFunction *)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_24ED9C5B8;
}

re *std::__function::__func<RECreateElasticEaseEx::$_0,std::allocator<RECreateElasticEaseEx::$_0>,void ()(re::EasingFunction *)>::operator()(re *result, void (****a2)(_QWORD))
{
  void (***v2)(_QWORD);
  uint64_t v3;

  v2 = *a2;
  if (*a2)
  {
    v3 = re::globalAllocators(result)[2];
    (**v2)(v2);
    return (re *)(*(uint64_t (**)(uint64_t, void (***)(_QWORD)))(*(_QWORD *)v3 + 40))(v3, v2);
  }
  return result;
}

uint64_t std::__function::__func<RECreateElasticEaseEx::$_0,std::allocator<RECreateElasticEaseEx::$_0>,void ()(re::EasingFunction *)>::target(uint64_t a1, uint64_t a2)
{
    return a1 + 8;
  else
    return 0;
}

void *std::__function::__func<RECreateElasticEaseEx::$_0,std::allocator<RECreateElasticEaseEx::$_0>,void ()(re::EasingFunction *)>::target_type()
{
}

void std::__function::__func<RECreateExponentialEaseEx::$_0,std::allocator<RECreateExponentialEaseEx::$_0>,void ()(re::EasingFunction *)>::~__func()
{
  JUMPOUT(0x2276933B8);
}

_QWORD *std::__function::__func<RECreateExponentialEaseEx::$_0,std::allocator<RECreateExponentialEaseEx::$_0>,void ()(re::EasingFunction *)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_24ED9C638;
  return result;
}

void std::__function::__func<RECreateExponentialEaseEx::$_0,std::allocator<RECreateExponentialEaseEx::$_0>,void ()(re::EasingFunction *)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_24ED9C638;
}

re *std::__function::__func<RECreateExponentialEaseEx::$_0,std::allocator<RECreateExponentialEaseEx::$_0>,void ()(re::EasingFunction *)>::operator()(re *result, void (****a2)(_QWORD))
{
  void (***v2)(_QWORD);
  uint64_t v3;

  v2 = *a2;
  if (*a2)
  {
    v3 = re::globalAllocators(result)[2];
    (**v2)(v2);
    return (re *)(*(uint64_t (**)(uint64_t, void (***)(_QWORD)))(*(_QWORD *)v3 + 40))(v3, v2);
  }
  return result;
}

uint64_t std::__function::__func<RECreateExponentialEaseEx::$_0,std::allocator<RECreateExponentialEaseEx::$_0>,void ()(re::EasingFunction *)>::target(uint64_t a1, uint64_t a2)
{
    return a1 + 8;
  else
    return 0;
}

void *std::__function::__func<RECreateExponentialEaseEx::$_0,std::allocator<RECreateExponentialEaseEx::$_0>,void ()(re::EasingFunction *)>::target_type()
{
}

void std::__function::__func<RECreateHermiteEaseEx::$_0,std::allocator<RECreateHermiteEaseEx::$_0>,void ()(re::EasingFunction *)>::~__func()
{
  JUMPOUT(0x2276933B8);
}

_QWORD *std::__function::__func<RECreateHermiteEaseEx::$_0,std::allocator<RECreateHermiteEaseEx::$_0>,void ()(re::EasingFunction *)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_24ED9C6B8;
  return result;
}

void std::__function::__func<RECreateHermiteEaseEx::$_0,std::allocator<RECreateHermiteEaseEx::$_0>,void ()(re::EasingFunction *)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_24ED9C6B8;
}

re *std::__function::__func<RECreateHermiteEaseEx::$_0,std::allocator<RECreateHermiteEaseEx::$_0>,void ()(re::EasingFunction *)>::operator()(re *result, void (****a2)(_QWORD))
{
  void (***v2)(_QWORD);
  uint64_t v3;

  v2 = *a2;
  if (*a2)
  {
    v3 = re::globalAllocators(result)[2];
    (**v2)(v2);
    return (re *)(*(uint64_t (**)(uint64_t, void (***)(_QWORD)))(*(_QWORD *)v3 + 40))(v3, v2);
  }
  return result;
}

uint64_t std::__function::__func<RECreateHermiteEaseEx::$_0,std::allocator<RECreateHermiteEaseEx::$_0>,void ()(re::EasingFunction *)>::target(uint64_t a1, uint64_t a2)
{
    return a1 + 8;
  else
    return 0;
}

void *std::__function::__func<RECreateHermiteEaseEx::$_0,std::allocator<RECreateHermiteEaseEx::$_0>,void ()(re::EasingFunction *)>::target_type()
{
}

void std::__function::__func<RECreateLogarithmicEaseEx::$_0,std::allocator<RECreateLogarithmicEaseEx::$_0>,void ()(re::EasingFunction *)>::~__func()
{
  JUMPOUT(0x2276933B8);
}

_QWORD *std::__function::__func<RECreateLogarithmicEaseEx::$_0,std::allocator<RECreateLogarithmicEaseEx::$_0>,void ()(re::EasingFunction *)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_24ED9C738;
  return result;
}

void std::__function::__func<RECreateLogarithmicEaseEx::$_0,std::allocator<RECreateLogarithmicEaseEx::$_0>,void ()(re::EasingFunction *)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_24ED9C738;
}

re *std::__function::__func<RECreateLogarithmicEaseEx::$_0,std::allocator<RECreateLogarithmicEaseEx::$_0>,void ()(re::EasingFunction *)>::operator()(re *result, void (****a2)(_QWORD))
{
  void (***v2)(_QWORD);
  uint64_t v3;

  v2 = *a2;
  if (*a2)
  {
    v3 = re::globalAllocators(result)[2];
    (**v2)(v2);
    return (re *)(*(uint64_t (**)(uint64_t, void (***)(_QWORD)))(*(_QWORD *)v3 + 40))(v3, v2);
  }
  return result;
}

uint64_t std::__function::__func<RECreateLogarithmicEaseEx::$_0,std::allocator<RECreateLogarithmicEaseEx::$_0>,void ()(re::EasingFunction *)>::target(uint64_t a1, uint64_t a2)
{
    return a1 + 8;
  else
    return 0;
}

void *std::__function::__func<RECreateLogarithmicEaseEx::$_0,std::allocator<RECreateLogarithmicEaseEx::$_0>,void ()(re::EasingFunction *)>::target_type()
{
}

void std::__function::__func<RECreatePowerEaseEx::$_0,std::allocator<RECreatePowerEaseEx::$_0>,void ()(re::EasingFunction *)>::~__func()
{
  JUMPOUT(0x2276933B8);
}

_QWORD *std::__function::__func<RECreatePowerEaseEx::$_0,std::allocator<RECreatePowerEaseEx::$_0>,void ()(re::EasingFunction *)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_24ED9C7B8;
  return result;
}

void std::__function::__func<RECreatePowerEaseEx::$_0,std::allocator<RECreatePowerEaseEx::$_0>,void ()(re::EasingFunction *)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_24ED9C7B8;
}

re *std::__function::__func<RECreatePowerEaseEx::$_0,std::allocator<RECreatePowerEaseEx::$_0>,void ()(re::EasingFunction *)>::operator()(re *result, void (****a2)(_QWORD))
{
  void (***v2)(_QWORD);
  uint64_t v3;

  v2 = *a2;
  if (*a2)
  {
    v3 = re::globalAllocators(result)[2];
    (**v2)(v2);
    return (re *)(*(uint64_t (**)(uint64_t, void (***)(_QWORD)))(*(_QWORD *)v3 + 40))(v3, v2);
  }
  return result;
}

uint64_t std::__function::__func<RECreatePowerEaseEx::$_0,std::allocator<RECreatePowerEaseEx::$_0>,void ()(re::EasingFunction *)>::target(uint64_t a1, uint64_t a2)
{
    return a1 + 8;
  else
    return 0;
}

void *std::__function::__func<RECreatePowerEaseEx::$_0,std::allocator<RECreatePowerEaseEx::$_0>,void ()(re::EasingFunction *)>::target_type()
{
}

void std::__function::__func<RECreateSineEaseEx::$_0,std::allocator<RECreateSineEaseEx::$_0>,void ()(re::EasingFunction *)>::~__func()
{
  JUMPOUT(0x2276933B8);
}

_QWORD *std::__function::__func<RECreateSineEaseEx::$_0,std::allocator<RECreateSineEaseEx::$_0>,void ()(re::EasingFunction *)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_24ED9C838;
  return result;
}

void std::__function::__func<RECreateSineEaseEx::$_0,std::allocator<RECreateSineEaseEx::$_0>,void ()(re::EasingFunction *)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_24ED9C838;
}

re *std::__function::__func<RECreateSineEaseEx::$_0,std::allocator<RECreateSineEaseEx::$_0>,void ()(re::EasingFunction *)>::operator()(re *result, void (****a2)(_QWORD))
{
  void (***v2)(_QWORD);
  uint64_t v3;

  v2 = *a2;
  if (*a2)
  {
    v3 = re::globalAllocators(result)[2];
    (**v2)(v2);
    return (re *)(*(uint64_t (**)(uint64_t, void (***)(_QWORD)))(*(_QWORD *)v3 + 40))(v3, v2);
  }
  return result;
}

uint64_t std::__function::__func<RECreateSineEaseEx::$_0,std::allocator<RECreateSineEaseEx::$_0>,void ()(re::EasingFunction *)>::target(uint64_t a1, uint64_t a2)
{
    return a1 + 8;
  else
    return 0;
}

void *std::__function::__func<RECreateSineEaseEx::$_0,std::allocator<RECreateSineEaseEx::$_0>,void ()(re::EasingFunction *)>::target_type()
{
}

void std::__function::__func<RECreateCubicBezierEaseEx::$_0,std::allocator<RECreateCubicBezierEaseEx::$_0>,void ()(re::EasingFunction *)>::~__func()
{
  JUMPOUT(0x2276933B8);
}

_QWORD *std::__function::__func<RECreateCubicBezierEaseEx::$_0,std::allocator<RECreateCubicBezierEaseEx::$_0>,void ()(re::EasingFunction *)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_24ED9C8B8;
  return result;
}

void std::__function::__func<RECreateCubicBezierEaseEx::$_0,std::allocator<RECreateCubicBezierEaseEx::$_0>,void ()(re::EasingFunction *)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_24ED9C8B8;
}

re *std::__function::__func<RECreateCubicBezierEaseEx::$_0,std::allocator<RECreateCubicBezierEaseEx::$_0>,void ()(re::EasingFunction *)>::operator()(re *result, void (****a2)(_QWORD))
{
  void (***v2)(_QWORD);
  uint64_t v3;

  v2 = *a2;
  if (*a2)
  {
    v3 = re::globalAllocators(result)[2];
    (**v2)(v2);
    return (re *)(*(uint64_t (**)(uint64_t, void (***)(_QWORD)))(*(_QWORD *)v3 + 40))(v3, v2);
  }
  return result;
}

uint64_t std::__function::__func<RECreateCubicBezierEaseEx::$_0,std::allocator<RECreateCubicBezierEaseEx::$_0>,void ()(re::EasingFunction *)>::target(uint64_t a1, uint64_t a2)
{
    return a1 + 8;
  else
    return 0;
}

void *std::__function::__func<RECreateCubicBezierEaseEx::$_0,std::allocator<RECreateCubicBezierEaseEx::$_0>,void ()(re::EasingFunction *)>::target_type()
{
}

__n128 re::make::shared::object<re::internal::AnimationControllerData,decltype(nullptr),re::AnimationController const&>(re *a1, __n128 *a2)
{
  uint64_t *v4;
  uint64_t v5;
  __n128 result;

  v4 = re::globalAllocators(a1);
  v5 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v4[2] + 32))(v4[2], 48, 8);
  ArcSharedObject::ArcSharedObject((ArcSharedObject *)v5, 0);
  *(_QWORD *)v5 = &off_24ED9C938;
  *(_QWORD *)(v5 + 24) = 0;
  result = *a2;
  *(__n128 *)(v5 + 32) = *a2;
  *(_QWORD *)a1 = v5;
  return result;
}

void re::internal::AnimationControllerData::~AnimationControllerData(re::internal::AnimationControllerData *this)
{
  uint64_t v2;

  *(_QWORD *)this = &off_24ED9C938;
  v2 = *((_QWORD *)this + 3);
  if (v2)
  {

    *((_QWORD *)this + 3) = 0;
  }
  *(_QWORD *)this = &off_24ED426B8;
  objc_destructInstance((char *)this + 8);
}

{
  uint64_t v2;

  *(_QWORD *)this = &off_24ED9C938;
  v2 = *((_QWORD *)this + 3);
  if (v2)
  {

    *((_QWORD *)this + 3) = 0;
  }
  *(_QWORD *)this = &off_24ED426B8;
  objc_destructInstance((char *)this + 8);
  JUMPOUT(0x2276933B8);
}

_QWORD *`anonymous namespace'::SharedAnimatableValue<float>::~SharedAnimatableValue(_QWORD *a1)
{
  *a1 = &off_24ED426B8;
  objc_destructInstance(a1 + 1);
  return a1;
}

void `anonymous namespace'::SharedAnimatableValue<float>::~SharedAnimatableValue(_QWORD *a1)
{
  *a1 = &off_24ED426B8;
  objc_destructInstance(a1 + 1);
  JUMPOUT(0x2276933B8);
}

_QWORD *`anonymous namespace'::SharedAnimatableValue<double>::~SharedAnimatableValue(_QWORD *a1)
{
  *a1 = &off_24ED426B8;
  objc_destructInstance(a1 + 1);
  return a1;
}

void `anonymous namespace'::SharedAnimatableValue<double>::~SharedAnimatableValue(_QWORD *a1)
{
  *a1 = &off_24ED426B8;
  objc_destructInstance(a1 + 1);
  JUMPOUT(0x2276933B8);
}

_QWORD *`anonymous namespace'::SharedAnimatableValue<re::Vector2<float>>::~SharedAnimatableValue(_QWORD *a1)
{
  *a1 = &off_24ED426B8;
  objc_destructInstance(a1 + 1);
  return a1;
}

void `anonymous namespace'::SharedAnimatableValue<re::Vector2<float>>::~SharedAnimatableValue(_QWORD *a1)
{
  *a1 = &off_24ED426B8;
  objc_destructInstance(a1 + 1);
  JUMPOUT(0x2276933B8);
}

_QWORD *`anonymous namespace'::SharedAnimatableValue<re::Vector3<float>>::~SharedAnimatableValue(_QWORD *a1)
{
  *a1 = &off_24ED426B8;
  objc_destructInstance(a1 + 1);
  return a1;
}

void `anonymous namespace'::SharedAnimatableValue<re::Vector3<float>>::~SharedAnimatableValue(_QWORD *a1)
{
  *a1 = &off_24ED426B8;
  objc_destructInstance(a1 + 1);
  JUMPOUT(0x2276933B8);
}

_QWORD *`anonymous namespace'::SharedAnimatableValue<re::Vector4<float>>::~SharedAnimatableValue(_QWORD *a1)
{
  *a1 = &off_24ED426B8;
  objc_destructInstance(a1 + 1);
  return a1;
}

void `anonymous namespace'::SharedAnimatableValue<re::Vector4<float>>::~SharedAnimatableValue(_QWORD *a1)
{
  *a1 = &off_24ED426B8;
  objc_destructInstance(a1 + 1);
  JUMPOUT(0x2276933B8);
}

_QWORD *`anonymous namespace'::SharedAnimatableValue<re::Quaternion<float>>::~SharedAnimatableValue(_QWORD *a1)
{
  *a1 = &off_24ED426B8;
  objc_destructInstance(a1 + 1);
  return a1;
}

void `anonymous namespace'::SharedAnimatableValue<re::Quaternion<float>>::~SharedAnimatableValue(_QWORD *a1)
{
  *a1 = &off_24ED426B8;
  objc_destructInstance(a1 + 1);
  JUMPOUT(0x2276933B8);
}

_QWORD *`anonymous namespace'::SharedAnimatableValue<re::GenericSRT<float>>::~SharedAnimatableValue(_QWORD *a1)
{
  *a1 = &off_24ED426B8;
  objc_destructInstance(a1 + 1);
  return a1;
}

void `anonymous namespace'::SharedAnimatableValue<re::GenericSRT<float>>::~SharedAnimatableValue(_QWORD *a1)
{
  *a1 = &off_24ED426B8;
  objc_destructInstance(a1 + 1);
  JUMPOUT(0x2276933B8);
}

_QWORD *`anonymous namespace'::SharedAnimatableValue<re::SkeletalPose>::~SharedAnimatableValue(_QWORD *a1)
{
  re::SkeletalPose *v2;

  *a1 = &off_24ED9CB90;
  v2 = (re::SkeletalPose *)(a1 + 4);
  re::SkeletalPose::~SkeletalPose((re::SkeletalPose *)(a1 + 15));
  re::SkeletalPose::~SkeletalPose(v2);
  *a1 = &off_24ED426B8;
  objc_destructInstance(a1 + 1);
  return a1;
}

void `anonymous namespace'::SharedAnimatableValue<re::SkeletalPose>::~SharedAnimatableValue(_QWORD *a1)
{
  re::SkeletalPose *v2;

  *a1 = &off_24ED9CB90;
  v2 = (re::SkeletalPose *)(a1 + 4);
  re::SkeletalPose::~SkeletalPose((re::SkeletalPose *)(a1 + 15));
  re::SkeletalPose::~SkeletalPose(v2);
  *a1 = &off_24ED426B8;
  objc_destructInstance(a1 + 1);
  JUMPOUT(0x2276933B8);
}

void *RERayCastResultComponentGetComponentType()
{
  if (re::ecs2::dispatchOnceInitECSComponents(void)::onceToken != -1)
    dispatch_once(&re::ecs2::dispatchOnceInitECSComponents(void)::onceToken, &__block_literal_global_13);
  return re::ecs2::ComponentImpl<re::ecs2::RayCastResultComponent,(re::ecs2::ComponentTypeBase::Flags)1>::s_componentType;
}

__n128 RERayCastResultComponentGetHitWorldPosition(uint64_t a1, uint64_t a2)
{
  return *(__n128 *)(re::ecs2::ComponentImpl<re::ecs2::RayCastResultComponent,(re::ecs2::ComponentTypeBase::Flags)1>::safeCast(a1, a2)+ 32);
}

__n128 RERayCastResultComponentGetHitWorldNormal(uint64_t a1, uint64_t a2)
{
  return *(__n128 *)(re::ecs2::ComponentImpl<re::ecs2::RayCastResultComponent,(re::ecs2::ComponentTypeBase::Flags)1>::safeCast(a1, a2)+ 48);
}

char *RERayCastResultComponentGetHitEntity(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = re::ecs2::ComponentImpl<re::ecs2::RayCastResultComponent,(re::ecs2::ComponentTypeBase::Flags)1>::safeCast(a1, a2);
  return re::ecs2::EntityHandle::resolve((id *)(v2 + 64), *(_QWORD *)(v2 + 16));
}

BOOL RERayCastResultComponentIsHit(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = re::ecs2::ComponentImpl<re::ecs2::RayCastResultComponent,(re::ecs2::ComponentTypeBase::Flags)1>::safeCast(a1, a2);
  return re::ecs2::EntityHandle::resolve((id *)(v2 + 64), *(_QWORD *)(v2 + 16)) != 0;
}

uint64_t re::ecs2::ComponentImpl<re::ecs2::RayCastResultComponent,(re::ecs2::ComponentTypeBase::Flags)1>::safeCast(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  __objc2_class_ro **p_info;
  uint64_t result;
  __objc2_meth_list *base_meths;
  uint64_t v6;
  uint64_t v7;

  if (a1)
  {
    v2 = a1;
    p_info = VideoSpillMapMetalSession.info;
    if ((_UNKNOWN *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 40))(a1) == re::ecs2::ComponentImpl<re::ecs2::RayCastResultComponent,(re::ecs2::ComponentTypeBase::Flags)1>::s_componentType)
      return v2;
  }
  else
  {
    re::internal::assertLog((re::internal *)4, a2, "assertion failure: '%s' (%s:line %i) component must not be null.", "component", "safeCast", 98);
    _os_crash();
    __break(1u);
  }
  (*(void (**)(uint64_t))(*(_QWORD *)v2 + 40))(v2);
  base_meths = p_info[369]->base_meths;
  v6 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v2 + 40))(v2);
  re::internal::assertLog((re::internal *)6, v7, "assertion failure: '%s' (%s:line %i) Component is wrong type. Expected type: %s, but got: %s", "&reinterpret_cast<Derived *>(component)->componentType() == &Derived::classComponentType()", "safeCast", 102, base_meths, *(_QWORD *)(v6 + 32));
  result = _os_crash();
  __break(1u);
  return result;
}

void *REAudioMixerComponentGetComponentType()
{
  if (re::ecs2::dispatchOnceInitECSComponents(void)::onceToken != -1)
    dispatch_once(&re::ecs2::dispatchOnceInitECSComponents(void)::onceToken, &__block_literal_global_13);
  return re::ecs2::ComponentImpl<re::ecs2::AudioMixerComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType;
}

re::ecs2::NetworkComponent *REAudioMixerComponentSetReverbPresetWithBlend(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t v5;
  const re::ecs2::Component *v6;

  v5 = *(_QWORD *)(a1 + 16);
  if (v5 && (*(_BYTE *)(v5 + 288) & 0x80) != 0)
    v5 = 0;
  if (re::ecs2::dispatchOnceInitECSComponents(void)::onceToken != -1)
    dispatch_once(&re::ecs2::dispatchOnceInitECSComponents(void)::onceToken, &__block_literal_global_13);
  v6 = (const re::ecs2::Component *)REEntityGetOrAddComponentByClass(v5, (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::ReverbComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType);
  REReverbComponentSetReverbPresetWithBlend((uint64_t)v6, a2, a3);
  return RENetworkMarkComponentDirty(v6);
}

uint64_t REAudioMixerComponentGetReverbPreset(uint64_t a1)
{
  uint64_t v1;

  v1 = *(_QWORD *)(a1 + 16);
  if (v1 && (*(_BYTE *)(v1 + 288) & 0x80) != 0)
    v1 = 0;
  if (re::ecs2::dispatchOnceInitECSComponents(void)::onceToken != -1)
    dispatch_once(&re::ecs2::dispatchOnceInitECSComponents(void)::onceToken, &__block_literal_global_13);
  return *(_QWORD *)(REEntityGetOrAddComponentByClass(v1, (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::ReverbComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType)+ 32);
}

re::ecs2::NetworkComponent *REAudioMixerComponentSetReverbPreset(uint64_t a1, uint64_t a2)
{
  return REAudioMixerComponentSetReverbPresetWithBlend(a1, a2, 0);
}

void REAudioMixerSetSceneReverbPresetWithBlend(re *a1)
{
  NSObject *v1;
  uint8_t v2[16];

  v1 = *re::audioLogObjects(a1);
  if (os_log_type_enabled(v1, OS_LOG_TYPE_ERROR))
  {
    *(_WORD *)v2 = 0;
    _os_log_error_impl(&dword_224FE9000, v1, OS_LOG_TYPE_ERROR, "REAudioMixerSetSceneReverbPresetWithBlend is deprecated. Use REReverbComponentSetReverbPresetWithBlend", v2, 2u);
  }
}

void REAudioMixerSetSceneReverbPreset(re *a1)
{
  REAudioMixerSetSceneReverbPresetWithBlend(a1);
}

uint64_t REAudioMixerGetSceneReverbPreset(re *a1)
{
  NSObject *v1;
  uint8_t v3[16];

  v1 = *re::audioLogObjects(a1);
  if (os_log_type_enabled(v1, OS_LOG_TYPE_ERROR))
  {
    *(_WORD *)v3 = 0;
    _os_log_error_impl(&dword_224FE9000, v1, OS_LOG_TYPE_ERROR, "REAudioMixerGetSceneReverbPreset is deprecated. Use REReverbComponentGetReverbPreset", v3, 2u);
  }
  return -1;
}

void REAudioMixerSetPriority(re *a1)
{
  NSObject *v1;
  uint8_t v2[16];

  v1 = *re::audioLogObjects(a1);
  if (os_log_type_enabled(v1, OS_LOG_TYPE_ERROR))
  {
    *(_WORD *)v2 = 0;
    _os_log_error_impl(&dword_224FE9000, v1, OS_LOG_TYPE_ERROR, "REAudioMixerSetPriority is deprecated. Use REReverbComponentSetPriority", v2, 2u);
  }
}

uint64_t REAudioMixerGetPriority(re *a1)
{
  NSObject *v1;
  uint8_t v3[16];

  v1 = *re::audioLogObjects(a1);
  if (os_log_type_enabled(v1, OS_LOG_TYPE_ERROR))
  {
    *(_WORD *)v3 = 0;
    _os_log_error_impl(&dword_224FE9000, v1, OS_LOG_TYPE_ERROR, "REAudioMixerGetPriority is deprecated. Use REReverbComponentGetPriority", v3, 2u);
  }
  return 0;
}

re::ecs2::NetworkComponent *REAudioMixerComponentSetPriority(uint64_t a1, int a2)
{
  uint64_t v3;
  re *v4;

  v3 = *(_QWORD *)(a1 + 16);
  if (v3 && (*(_BYTE *)(v3 + 288) & 0x80) != 0)
    v3 = 0;
  if (re::ecs2::dispatchOnceInitECSComponents(void)::onceToken != -1)
    dispatch_once(&re::ecs2::dispatchOnceInitECSComponents(void)::onceToken, &__block_literal_global_13);
  v4 = (re *)REEntityGetOrAddComponentByClass(v3, (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::ReverbComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType);
  REReverbComponentSetPriority(v4, a2);
  return RENetworkMarkComponentDirty(v4);
}

uint64_t REAudioMixerComponentGetPriority(uint64_t a1)
{
  uint64_t v1;

  v1 = *(_QWORD *)(a1 + 16);
  if (v1 && (*(_BYTE *)(v1 + 288) & 0x80) != 0)
    v1 = 0;
  if (re::ecs2::dispatchOnceInitECSComponents(void)::onceToken != -1)
    dispatch_once(&re::ecs2::dispatchOnceInitECSComponents(void)::onceToken, &__block_literal_global_13);
  return *(unsigned __int16 *)(REEntityGetOrAddComponentByClass(v1, (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::ReverbComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType)+ 42);
}

void *REVideoPlayerStatusComponentGetComponentType()
{
  if (re::ecs2::dispatchOnceInitECSComponents(void)::onceToken != -1)
    dispatch_once(&re::ecs2::dispatchOnceInitECSComponents(void)::onceToken, &__block_literal_global_13);
  return re::ecs2::ComponentImpl<re::ecs2::VideoPlayerStatusComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType;
}

double REVideoPlayerStatusComponentDidUpdateInApp(re::ecs2::VideoPlayerStatusComponent *this, __n128 result)
{
  if (this)
    result.n128_u64[0] = re::ecs2::VideoPlayerStatusComponent::didUpdateInApp(this, result).n128_u64[0];
  return result.n128_f64[0];
}

uint64_t REVideoPlayerStatusComponentGetContentInfo(uint64_t result)
{
  if (result)
    return *(unsigned __int8 *)(result + 49);
  return result;
}

uint64_t REVideoPlayerStatusComponentGetMediaInfo(uint64_t result)
{
  if (result)
    return *(unsigned __int8 *)(result + 48);
  return result;
}

double REVideoPlayerStatusComponentGetCurrentPlayerScreenSize(uint64_t a1)
{
  if (a1)
    return *(double *)(a1 + 56);
  else
    return 0.0;
}

double REVideoPlayerStatusComponentGetCurrentPlayerScreenVideoDimension(uint64_t a1)
{
  if (a1)
    return *(double *)(a1 + 64);
  else
    return 0.0;
}

float REVideoPlayerStatusComponentGetSafeZoneRadius(uint64_t a1)
{
  if (a1)
    return *(float *)(a1 + 28);
  else
    return -1.0;
}

double REVideoPlayerStatusComponentGetCurrentSceneSize(uint64_t a1)
{
  __int128 v1;

  if (a1)
    v1 = *(_OWORD *)(a1 + 32);
  else
    *(_QWORD *)&v1 = 0;
  return *(double *)&v1;
}

uint64_t REVideoPlayerStatusComponentGetCurrentViewingMode(uint64_t result)
{
  if (result)
    return *(unsigned __int8 *)(result + 72);
  return result;
}

uint64_t REVideoPlayerStatusComponentsGetVideoIsReadyToRender(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 73);
}

re *REAnimationControllerCopyEx(re::ecs2::AnimationComponent *a1, uint64_t a2)
{
  re *result;
  const re::AnimationController *v4;
  uint64_t *v5;
  re::internal::AnimationControllerData *v6;

  result = (re *)re::ecs2::AnimationComponent::shadowAnimationController(a1, a2);
  if (result)
  {
    v4 = result;
    v5 = re::globalAllocators(result);
    v6 = (re::internal::AnimationControllerData *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v5[2] + 32))(v5[2], 48, 8);
    return re::internal::AnimationControllerData::AnimationControllerData(v6, a1, v4);
  }
  return result;
}

re::internal::AnimationControllerData *REAnimationControllerCopy(re *a1, unint64_t a2)
{
  const re::AnimationController *v3;
  uint64_t *v4;
  re::internal::AnimationControllerData *v5;

  if (*((_QWORD *)a1 + 6) <= a2)
    return 0;
  v3 = (const re::AnimationController *)(*((_QWORD *)a1 + 8) + 72 * a2 + 56);
  v4 = re::globalAllocators(a1);
  v5 = (re::internal::AnimationControllerData *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v4[2] + 32))(v4[2], 48, 8);
  return re::internal::AnimationControllerData::AnimationControllerData(v5, a1, v3);
}

void REAnimationControllerPause(uint64_t a1)
{
  re::AnimationController::pause((re::AnimationController *)(a1 + 32));
}

void REAnimationControllerResume(uint64_t a1)
{
  re::AnimationController::resume((re::AnimationController *)(a1 + 32));
}

double REAnimationControllerStop(uint64_t a1, double a2)
{
  LODWORD(a2) = 0;
  return re::AnimationController::stop((re::AnimationController *)(a1 + 32), a2);
}

BOOL REAnimationControllerIsValid(uint64_t a1)
{
  uint64_t v1;

  v1 = *(_QWORD *)(a1 + 32);
  return v1
      && re::DataArray<re::internal::TimelineTree>::tryGet(v1 + (*(uint64_t *)(a1 + 40) >> 56 << 6) + 72, *(_QWORD *)(a1 + 40)) != 0;
}

uint64_t REAnimationControllerIsPaused(uint64_t a1)
{
  return re::AnimationController::isPaused((re::AnimationController *)(a1 + 32));
}

float REAnimationControllerGetSpeed(uint64_t a1)
{
  return re::AnimationController::speed((re::AnimationController *)(a1 + 32));
}

uint64_t REAnimationControllerSetSpeed(uint64_t a1, float a2)
{
  return re::AnimationController::setSpeed(a1 + 32, a2);
}

double REAnimationControllerGetDuration(uint64_t a1)
{
  uint64_t v1;
  double result;

  v1 = re::AnimationController::timeline((re::AnimationController *)(a1 + 32));
  if (!v1)
    return 0.0;
  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 40))(v1);
  return result;
}

BOOL REAnimationControllerGetTime(uint64_t a1, _QWORD *a2)
{
  int v3;
  _BYTE v5[8];
  uint64_t v6;

  re::AnimationController::time((re::AnimationController *)(a1 + 32), (uint64_t)v5);
  v3 = v5[0];
  if (v5[0])
    *a2 = v6;
  return v3 != 0;
}

_QWORD *REAnimationControllerSetTime(uint64_t a1, double a2)
{
  return re::AnimationController::setTime((_QWORD *)(a1 + 32), a2);
}

uint64_t REAnimationControllerGetTimeline(uint64_t a1)
{
  return re::AnimationController::timeline((re::AnimationController *)(a1 + 32));
}

float REAnimationControllerGetBlendFactor(uint64_t a1, const re::Timeline *a2)
{
  return re::AnimationController::blendFactor((re::AnimationController *)(a1 + 32), a2);
}

uint64_t REAnimationControllerSetBlendFactor(uint64_t a1, const re::Timeline *a2, float a3)
{
  return re::AnimationController::setBlendFactor((re::AnimationController *)(a1 + 32), a3, a2);
}

re::internal::AnimationControllerData *re::internal::AnimationControllerData::AnimationControllerData(re::internal::AnimationControllerData *this, re::ecs2::AnimationComponent *a2, const re::AnimationController *a3)
{
  char *v6;

  ArcSharedObject::ArcSharedObject(this, 0);
  *(_QWORD *)this = &off_24ED9C938;
  *((_QWORD *)this + 3) = a2;
  if (a2)
    v6 = (char *)a2 + 8;
  *((_OWORD *)this + 2) = *(_OWORD *)a3;
  return this;
}

uint64_t REPerformanceMetricsGetFrameMetrics(uint64_t result, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;

  *(_DWORD *)(a2 + 4) = 0;
  *(_DWORD *)(a2 + 8) = 0;
  if ((*(_BYTE *)(result + 420) & 0x10) != 0)
  {
    result = re::ServiceLocator::service<re::RenderManager>(*(_QWORD *)(result + 648));
    v3 = *(_QWORD *)(result + 104);
    if (v3)
    {
      v4 = *(_QWORD *)(v3 + 1648);
      if (v4)
      {
        *(float *)(a2 + 4) = *(float *)(v4 + 236) - *(float *)(v4 + 240);
        *(_DWORD *)(a2 + 8) = *(_DWORD *)(v4 + 232);
        if (*(_DWORD *)a2 >= 2u)
        {
          *(_QWORD *)(a2 + 16) = 0;
          *(_DWORD *)(a2 + 12) = 0;
        }
      }
    }
  }
  return result;
}

void *REMaterialParameterBlockArrayComponentGetComponentType()
{
  if (re::ecs2::dispatchOnceInitECSComponents(void)::onceToken != -1)
    dispatch_once(&re::ecs2::dispatchOnceInitECSComponents(void)::onceToken, &__block_literal_global_13);
  return re::ecs2::ComponentImpl<re::ecs2::MaterialParameterBlockArrayComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType;
}

uint64_t REMaterialParameterBlockArrayComponentClear(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  re::DynamicArray<re::ecs2::SerializableMaterialParameterBlockHandle>::clear(a1 + 32);
  v2 = *(_QWORD *)(a1 + 88);
  *(_QWORD *)(a1 + 88) = 0;
  if (v2)
  {
    v3 = *(_QWORD *)(a1 + 104);
    v4 = 8 * v2;
    do
    {
      if (*(_QWORD *)v3)
      {

        *(_QWORD *)v3 = 0;
      }
      v3 += 8;
      v4 -= 8;
    }
    while (v4);
  }
  ++*(_DWORD *)(a1 + 96);
  return re::ecs2::Component::enqueueMarkDirty(a1);
}

uint64_t REMaterialParameterBlockArrayComponentSize(uint64_t a1)
{
  return *(_QWORD *)(a1 + 48);
}

uint64_t REMaterialParameterBlockArrayComponentResize(re::ecs2::MaterialParameterBlockArrayComponent *a1, unint64_t a2)
{
  re::ecs2::MaterialParameterBlockArrayComponent::resizeBlockHandles(a1, a2);
  re::DynamicArray<re::SharedPtr<re::Shareable<re::AssetLoadDescriptor>>>::resize((uint64_t)a1 + 72, a2);
  return re::ecs2::Component::enqueueMarkDirty((uint64_t)a1);
}

uint64_t REMaterialParameterBlockArrayComponentGetParameterCountAtIndex(re::ecs2::MaterialParameterBlockArrayComponent *a1, unint64_t a2)
{
  uint64_t v4;
  uint64_t v5;

  re::ecs2::MaterialParameterBlockArrayComponent::upgradeBlocksToBlockHandles(a1);
  if (*((_QWORD *)a1 + 6) <= a2)
  {
    re::ecs2::MaterialParameterBlockArrayComponent::resizeBlockHandles(a1, a2 + 1);
    re::ecs2::Component::enqueueMarkDirty((uint64_t)a1);
  }
  if (*((_QWORD *)a1 + 11) <= a2)
  {
    re::DynamicArray<re::SharedPtr<re::Shareable<re::AssetLoadDescriptor>>>::resize((uint64_t)a1 + 72, a2 + 1);
    re::ecs2::Component::enqueueMarkDirty((uint64_t)a1);
  }
  if (*((_QWORD *)a1 + 6) <= a2)
  {
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  v4 = *((_QWORD *)a1 + 8);
  v5 = *(_QWORD *)(v4 + 24 * a2);
  if (!v5)
    v5 = *(_QWORD *)(v4 + 24 * a2 + 8);
  return *(unsigned int *)(v5 + 332);
}

uint64_t REMaterialParameterBlockArrayComponentClearBlockAtIndex(re::ecs2::MaterialParameterBlockArrayComponent *a1, unint64_t a2)
{
  uint64_t v4;
  _QWORD *v5;
  _QWORD *v6;
  uint64_t isUniquelyReferenced;
  const re::ecs2::SerializableMaterialParameterBlock *v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  re::ecs2::MaterialParameterBlockArrayComponent::upgradeBlocksToBlockHandles(a1);
  if (*((_QWORD *)a1 + 6) <= a2)
  {
    re::ecs2::MaterialParameterBlockArrayComponent::resizeBlockHandles(a1, a2 + 1);
    re::ecs2::Component::enqueueMarkDirty((uint64_t)a1);
  }
  if (*((_QWORD *)a1 + 11) <= a2)
  {
    re::DynamicArray<re::SharedPtr<re::Shareable<re::AssetLoadDescriptor>>>::resize((uint64_t)a1 + 72, a2 + 1);
    re::ecs2::Component::enqueueMarkDirty((uint64_t)a1);
  }
  if (*((_QWORD *)a1 + 6) <= a2)
  {
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_18:
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_19:
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  v4 = *((_QWORD *)a1 + 8);
  v5 = (_QWORD *)(v4 + 24 * a2);
  v6 = v5 + 1;
  isUniquelyReferenced = objc_isUniquelyReferenced();
  if ((isUniquelyReferenced & 1) == 0)
  {
    v8 = (const re::ecs2::SerializableMaterialParameterBlock *)(*v5 ? *v5 : *v6);
    v9 = re::globalAllocators((re *)isUniquelyReferenced);
    v10 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v9[2] + 32))(v9[2], 408, 8);
    re::ecs2::SerializableMaterialParameterBlock::SerializableMaterialParameterBlock((re::ecs2::SerializableMaterialParameterBlock *)v10, v8);
    ++*(_DWORD *)(v4 + 24 * a2 + 16);
    re::SharedPtr<re::SkeletalPoseJointDefinition>::reset((uint64_t *)(v4 + 24 * a2), v10);
    *v6 = 0;
    if (v10)

  }
  if (*((_QWORD *)a1 + 6) <= a2)
    goto LABEL_18;
  v11 = *((_QWORD *)a1 + 8) + 24 * a2;
  ++*(_DWORD *)(v11 + 16);
  v12 = *(_QWORD *)v11;
  re::HashTable<re::StringID,re::ecs2::SerializedMaterialParameter,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::clear(*(_QWORD *)v11 + 304);
  ++*(_DWORD *)(v12 + 400);
  if (*((_QWORD *)a1 + 11) <= a2)
    goto LABEL_19;
  v13 = *((_QWORD *)a1 + 13);
  v14 = *(_QWORD *)(v13 + 8 * a2);
  if (v14)
  {

    *(_QWORD *)(v13 + 8 * a2) = 0;
  }
  return re::ecs2::Component::enqueueMarkDirty((uint64_t)a1);
}

CFStringRef REMaterialParameterBlockArrayComponentCopyParameterNameAtIndex(re::ecs2::MaterialParameterBlockArrayComponent *a1, unint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _DWORD *v10;
  uint64_t v12;
  int v13;
  int v14;
  unsigned int v15;

  re::ecs2::MaterialParameterBlockArrayComponent::upgradeBlocksToBlockHandles(a1);
  if (*((_QWORD *)a1 + 6) <= a2)
  {
    re::ecs2::MaterialParameterBlockArrayComponent::resizeBlockHandles(a1, a2 + 1);
    re::ecs2::Component::enqueueMarkDirty((uint64_t)a1);
  }
  if (*((_QWORD *)a1 + 11) <= a2)
  {
    re::DynamicArray<re::SharedPtr<re::Shareable<re::AssetLoadDescriptor>>>::resize((uint64_t)a1 + 72, a2 + 1);
    re::ecs2::Component::enqueueMarkDirty((uint64_t)a1);
  }
  if (*((_QWORD *)a1 + 6) <= a2)
  {
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  v6 = *((_QWORD *)a1 + 8);
  v7 = *(_QWORD *)(v6 + 24 * a2);
  if (!v7)
    v7 = *(_QWORD *)(v6 + 24 * a2 + 8);
  v8 = *(unsigned int *)(v7 + 336);
  if ((_DWORD)v8)
  {
    v9 = 0;
    v10 = *(_DWORD **)(v7 + 320);
    while ((*v10 & 0x80000000) == 0)
    {
      v10 += 80;
      if (v8 == ++v9)
      {
        LODWORD(v9) = *(_DWORD *)(v7 + 336);
        break;
      }
    }
  }
  else
  {
    LODWORD(v9) = 0;
  }
  if ((_DWORD)v8 == (_DWORD)v9)
    return 0;
  if (a3)
  {
    v12 = 0;
    while (1)
    {
      ++v12;
      v13 = v8 <= (int)v9 + 1 ? v9 + 1 : *(_DWORD *)(v7 + 336);
      v14 = v9;
      while (1)
      {
        v15 = v14 + 1;
        if (v13 - 1 == v14)
          break;
        ++v14;
        LODWORD(v9) = v15;
        if ((*(_DWORD *)(*(_QWORD *)(v7 + 320) + 320 * v15) & 0x80000000) != 0)
          goto LABEL_26;
      }
      LODWORD(v9) = v13;
LABEL_26:
      if ((_DWORD)v8 == (_DWORD)v9)
        return 0;
      if (v12 == a3)
        return CFStringCreateWithCString(0, *(const char **)(*(_QWORD *)(v7 + 320) + 320 * v15 + 16), 0x8000100u);
    }
  }
  v15 = v9;
  return CFStringCreateWithCString(0, *(const char **)(*(_QWORD *)(v7 + 320) + 320 * v15 + 16), 0x8000100u);
}

uint64_t REMaterialParameterBlockArrayComponentGetParameterTypeAtIndex(re::ecs2::MaterialParameterBlockArrayComponent *a1, unint64_t a2, char *a3)
{
  uint64_t v6;
  char v7;
  unsigned __int8 *v8;
  int v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unsigned __int8 *v13;
  uint64_t v14;
  _QWORD v16[3];
  int v17;
  const char *v18;
  __int16 v19;
  int v20;
  __int16 v21;
  unint64_t v22;
  __int16 v23;
  unint64_t v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  uint64_t v30;

  v30 = *MEMORY[0x24BDAC8D0];
  re::ecs2::MaterialParameterBlockArrayComponent::upgradeBlocksToBlockHandles(a1);
  if (*((_QWORD *)a1 + 6) <= a2)
  {
    re::ecs2::MaterialParameterBlockArrayComponent::resizeBlockHandles(a1, a2 + 1);
    re::ecs2::Component::enqueueMarkDirty((uint64_t)a1);
  }
  if (*((_QWORD *)a1 + 11) <= a2)
  {
    re::DynamicArray<re::SharedPtr<re::Shareable<re::AssetLoadDescriptor>>>::resize((uint64_t)a1 + 72, a2 + 1);
    re::ecs2::Component::enqueueMarkDirty((uint64_t)a1);
  }
  if (a3)
  {
    v6 = *a3;
    if (*a3)
    {
      v7 = a3[1];
      if (v7)
      {
        v8 = (unsigned __int8 *)(a3 + 2);
        do
        {
          v6 = 31 * v6 + v7;
          v9 = *v8++;
          v7 = v9;
        }
        while (v9);
      }
    }
  }
  else
  {
    v6 = 0;
  }
  v16[0] = 2 * v6;
  v16[1] = a3;
  v10 = *((_QWORD *)a1 + 6);
  if (v10 <= a2)
  {
    v16[2] = 0;
    v28 = 0u;
    v29 = 0u;
    v26 = 0u;
    v27 = 0u;
    v25 = 0u;
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    v17 = 136315906;
    v18 = "operator[]";
    v19 = 1024;
    v20 = 789;
    v21 = 2048;
    v22 = a2;
    v23 = 2048;
    v24 = v10;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  v11 = *((_QWORD *)a1 + 8);
  v12 = *(_QWORD *)(v11 + 24 * a2);
  if (!v12)
    v12 = *(_QWORD *)(v11 + 24 * a2 + 8);
  v13 = (unsigned __int8 *)re::HashTable<re::StringID,re::ecs2::SerializedMaterialParameter,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::tryGet(v12 + 304, v16);
  if (v13)
    v14 = re::convert(*v13);
  else
    v14 = 0;
  re::StringID::destroyString((re::StringID *)v16);
  return v14;
}

uint64_t REMaterialParameterBlockArrayComponentGetParameterTypeWithHandleAtIndex(re::ecs2::MaterialParameterBlockArrayComponent *a1, unint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  unsigned __int8 *v8;

  re::ecs2::MaterialParameterBlockArrayComponent::upgradeBlocksToBlockHandles(a1);
  if (*((_QWORD *)a1 + 6) <= a2)
  {
    re::ecs2::MaterialParameterBlockArrayComponent::resizeBlockHandles(a1, a2 + 1);
    re::ecs2::Component::enqueueMarkDirty((uint64_t)a1);
  }
  if (*((_QWORD *)a1 + 11) <= a2)
  {
    re::DynamicArray<re::SharedPtr<re::Shareable<re::AssetLoadDescriptor>>>::resize((uint64_t)a1 + 72, a2 + 1);
    re::ecs2::Component::enqueueMarkDirty((uint64_t)a1);
  }
  if (*((_QWORD *)a1 + 6) <= a2)
  {
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  v6 = *((_QWORD *)a1 + 8);
  v7 = *(_QWORD *)(v6 + 24 * a2);
  if (!v7)
    v7 = *(_QWORD *)(v6 + 24 * a2 + 8);
  v8 = (unsigned __int8 *)re::HashTable<re::StringID,re::ecs2::SerializedMaterialParameter,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::tryGet(v7 + 304, (_QWORD *)(a3 + 24));
  if (v8)
    return re::convert(*v8);
  else
    return 0;
}

uint64_t REMaterialAssetGetTextureParameterType(uint64_t a1, const char *a2, _DWORD *a3)
{
  uint64_t v5;
  uint64_t v6;
  StringID *v7;
  char **v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  int v12;
  uint64_t v13;
  uint64_t v15[4];
  _OWORD v16[4];
  __int128 v17;
  uint64_t v18;
  int v19;
  const char *v20;
  __int16 v21;
  int v22;
  __int16 v23;
  uint64_t v24;
  __int16 v25;
  uint64_t v26;
  uint64_t v27;

  v27 = *MEMORY[0x24BDAC8D0];
  re::AssetAPIHelper::assetHandleCreate(a1, v15);
  v5 = re::AssetHandle::asset<re::MaterialAsset>((re::MaterialAsset *)v15);
  if (!v5)
    goto LABEL_18;
  v6 = *(_QWORD *)(v5 + 1664);
  if (!v6)
    goto LABEL_18;
  if (!*(_QWORD *)(v6 + 200))
  {
    v15[3] = 0;
    v17 = 0u;
    memset(v16, 0, sizeof(v16));
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    v19 = 136315906;
    v20 = "operator[]";
    v21 = 1024;
    v22 = 476;
    v23 = 2048;
    v24 = 0;
    v25 = 2048;
    v26 = 0;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  v7 = *(StringID **)(*(_QWORD *)(v6 + 208) + 48);
  if (!v7)
    goto LABEL_13;
  v8 = &v7->var1;
  re::sg::CachedCompilationMaterial::getCustomUniformsArgument(v7, (uint64_t)v16);
  if (*((_QWORD *)&v17 + 1))
  {
    v9 = v18 + 64;
    v10 = 80 * *((_QWORD *)&v17 + 1);
    while (!*(_BYTE *)(v9 + 13) || strcmp(*(const char **)(v9 - 40), a2))
    {
      v9 += 80;
      v10 -= 80;
      if (!v10)
        goto LABEL_10;
    }
    v12 = 0;
    *a3 = *(_DWORD *)v9;
    v11 = 1;
  }
  else
  {
LABEL_10:
    v11 = 0;
    v12 = 1;
  }
  re::FixedArray<re::MetalTypeInfo>::deinit(&v17);
  re::StringID::destroyString((re::StringID *)((char *)&v16[2] + 8));
  re::StringID::destroyString((re::StringID *)v16);
  if (v12)
LABEL_13:
    v11 = 0;
  if (v7)

  if (v11)
    v13 = 1;
  else
LABEL_18:
    v13 = 0;
  re::AssetHandle::~AssetHandle((re::AssetHandle *)v15);
  return v13;
}

uint64_t REMaterialAssetGetParameterType(uint64_t a1, char *a2)
{
  uint64_t v3;
  uint64_t v4;
  re::AssetHandle *v5;
  re::MaterialDefinitionAsset *v6;
  int OriginalConstantParameterType;
  uint64_t v8;
  int v10;
  re::MaterialParameterTable *v11;
  uint64_t v12;
  char v13;
  unsigned __int8 *v14;
  int v15;
  re::MaterialParameterTable *v16;
  uint64_t v17;
  char v18;
  unsigned __int8 *v19;
  int v20;
  uint64_t v21[3];
  uint64_t v22;
  uint64_t v23;
  _BYTE v24[8];
  __int128 v25;
  unsigned __int8 v26;
  _BYTE v27[8];
  __int128 v28;
  unsigned __int8 v29;
  _BYTE v30[24];

  re::AssetAPIHelper::assetHandleCreate(a1, v21);
  v3 = re::AssetHandle::asset<re::MaterialAsset>((re::MaterialAsset *)v21);
  if (!v3)
  {
    v8 = 0;
    goto LABEL_7;
  }
  v4 = v3;
  v5 = re::AssetHandle::AssetHandle((re::AssetHandle *)v30, (const re::AssetHandle *)(v3 + 40));
  v6 = (re::MaterialDefinitionAsset *)re::AssetHandle::asset<re::MaterialDefinitionAsset>(v5);
  OriginalConstantParameterType = re::MaterialDefinitionAsset::getOriginalConstantParameterType(v6, a2);
  if (!OriginalConstantParameterType)
  {
    OriginalConstantParameterType = re::MaterialAsset::getOriginalConstantParameterType((re::MaterialAsset *)v4, a2);
    if (!OriginalConstantParameterType)
    {
      re::MaterialParameterBlock::handle(*(re::MaterialParameterBlock **)(v4 + 1672), a2, (uint64_t)v27);
      v10 = BYTE4(v28) & 7;
      if ((BYTE4(v28) & 7) == 0)
      {
        v11 = (re::MaterialParameterTable *)(*(_QWORD *)(v4 + 1664) + 224);
        if (a2)
        {
          v12 = *a2;
          if (*a2)
          {
            v13 = a2[1];
            if (v13)
            {
              v14 = (unsigned __int8 *)(a2 + 2);
              do
              {
                v12 = 31 * v12 + v13;
                v15 = *v14++;
                v13 = v15;
              }
              while (v15);
            }
            v12 &= ~0x8000000000000000;
          }
        }
        else
        {
          v12 = 0x7FFFFFFFFFFFFFFFLL;
        }
        v23 = v12;
        re::MaterialParameterTable::handle(v11, &v23, (uint64_t)v24);
        v28 = v25;
        v29 = v26;
        v23 = 0;
        v10 = BYTE4(v25) & 7;
        if ((BYTE4(v25) & 7) == 0)
        {
          v16 = (re::MaterialParameterTable *)(*(_QWORD *)(*(_QWORD *)(v4 + 1664) + 16) + 248);
          if (a2)
          {
            v17 = *a2;
            if (*a2)
            {
              v18 = a2[1];
              if (v18)
              {
                v19 = (unsigned __int8 *)(a2 + 2);
                do
                {
                  v17 = 31 * v17 + v18;
                  v20 = *v19++;
                  v18 = v20;
                }
                while (v20);
              }
              v17 &= ~0x8000000000000000;
            }
          }
          else
          {
            v17 = 0x7FFFFFFFFFFFFFFFLL;
          }
          v22 = v17;
          re::MaterialParameterTable::handle(v16, &v22, (uint64_t)v24);
          v29 = v26;
          v28 = v25;
          v22 = 0;
          v10 = BYTE4(v25) & 7;
          if ((BYTE4(v25) & 7) == 0)
          {
            v8 = 0;
            goto LABEL_5;
          }
        }
      }
      OriginalConstantParameterType = 64;
      switch(v10)
      {
        case 1:
          OriginalConstantParameterType = v29;
          break;
        case 2:
          break;
        case 3:
          OriginalConstantParameterType = 128;
          break;
        case 4:
          OriginalConstantParameterType = 192;
          break;
        default:
          OriginalConstantParameterType = 0;
          break;
      }
    }
  }
  v8 = re::convert(OriginalConstantParameterType);
LABEL_5:
  re::AssetHandle::~AssetHandle((re::AssetHandle *)v30);
LABEL_7:
  re::AssetHandle::~AssetHandle((re::AssetHandle *)v21);
  return v8;
}

uint64_t REMaterialAssetGetParameterTypeWithHandle(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  re::AssetHandle *v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  re::MaterialParameterBlock *v10;
  int v11;
  re::MaterialParameterTable *v12;
  re::MaterialParameterTable *v13;
  uint64_t v14;
  uint64_t v16[3];
  uint64_t v17;
  uint64_t v18;
  _BYTE v19[8];
  __int128 v20;
  unsigned __int8 v21;
  uint64_t v22;
  uint64_t v23;
  __int128 v24;
  unsigned __int8 v25;
  _BYTE v26[24];

  re::AssetAPIHelper::assetHandleCreate(a1, v16);
  v3 = re::AssetHandle::asset<re::MaterialAsset>((re::MaterialAsset *)v16);
  if (v3)
  {
    v4 = v3;
    v5 = re::AssetHandle::AssetHandle((re::AssetHandle *)v26, (const re::AssetHandle *)(v3 + 40));
    v6 = re::AssetHandle::asset<re::MaterialDefinitionAsset>(v5);
    v23 = *(_QWORD *)(a2 + 24) >> 1;
    v7 = re::HashTable<re::WeakStringID,re::ColorConstantTable::ColorValue,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,false,false>::tryGet(v6 + 2272, &v23);
    if (!v7 || (v8 = *(unsigned __int8 *)(v7 + 20)) == 0)
    {
      v23 = *(_QWORD *)(a2 + 24) >> 1;
      v9 = re::HashTable<re::WeakStringID,re::ColorConstantTable::ColorValue,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,false,false>::tryGet(v4 + 1680, &v23);
      if (!v9 || (v8 = *(unsigned __int8 *)(v9 + 20)) == 0)
      {
        v10 = *(re::MaterialParameterBlock **)(v4 + 1672);
        v22 = *(_QWORD *)(a2 + 24) >> 1;
        re::MaterialParameterBlock::handle(v10, &v22, (uint64_t)&v23);
        v22 = 0;
        v11 = BYTE4(v24) & 7;
        if ((BYTE4(v24) & 7) == 0)
        {
          v12 = (re::MaterialParameterTable *)(*(_QWORD *)(v4 + 1664) + 224);
          v18 = *(_QWORD *)(a2 + 24) >> 1;
          re::MaterialParameterTable::handle(v12, &v18, (uint64_t)v19);
          v24 = v20;
          v25 = v21;
          v18 = 0;
          v11 = BYTE4(v20) & 7;
          if ((BYTE4(v20) & 7) == 0)
          {
            v13 = (re::MaterialParameterTable *)(*(_QWORD *)(*(_QWORD *)(v4 + 1664) + 16) + 248);
            v17 = *(_QWORD *)(a2 + 24) >> 1;
            re::MaterialParameterTable::handle(v13, &v17, (uint64_t)v19);
            v25 = v21;
            v24 = v20;
            v17 = 0;
            v11 = BYTE4(v20) & 7;
            if ((BYTE4(v20) & 7) == 0)
            {
              v14 = 0;
              goto LABEL_16;
            }
          }
        }
        v8 = 64;
        switch(v11)
        {
          case 1:
            v8 = v25;
            break;
          case 2:
            break;
          case 3:
            v8 = 128;
            break;
          case 4:
            v8 = 192;
            break;
          default:
            v8 = 0;
            break;
        }
      }
    }
    v14 = re::convert(v8);
LABEL_16:
    re::AssetHandle::~AssetHandle((re::AssetHandle *)v26);
    goto LABEL_17;
  }
  v14 = 0;
LABEL_17:
  re::AssetHandle::~AssetHandle((re::AssetHandle *)v16);
  return v14;
}

uint64_t REMaterialAssetGetMetalShaderParameterType(uint64_t a1, char *a2)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  char v6;
  unsigned __int8 *v7;
  int v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;
  uint64_t v14[3];

  re::AssetAPIHelper::assetHandleCreate(a1, v14);
  v3 = re::AssetHandle::asset<re::MaterialAsset>((re::MaterialAsset *)v14);
  if (v3)
  {
    v4 = *(_QWORD *)(v3 + 1664);
    if (a2)
    {
      v5 = *a2;
      if (*a2)
      {
        v6 = a2[1];
        if (v6)
        {
          v7 = (unsigned __int8 *)(a2 + 2);
          do
          {
            v5 = 31 * v5 + v6;
            v8 = *v7++;
            v6 = v8;
          }
          while (v8);
        }
        v5 &= ~0x8000000000000000;
      }
    }
    else
    {
      v5 = 0x7FFFFFFFFFFFFFFFLL;
    }
    if (*(_QWORD *)(v4 + 120))
    {
      v9 = 0x94D049BB133111EBLL
         * ((0xBF58476D1CE4E5B9 * (v5 ^ (v5 >> 30))) ^ ((0xBF58476D1CE4E5B9 * (v5 ^ (v5 >> 30))) >> 27));
      v10 = *(unsigned int *)(*(_QWORD *)(v4 + 128) + 4 * ((v9 ^ (v9 >> 31)) % *(unsigned int *)(v4 + 144)));
      if ((_DWORD)v10 != 0x7FFFFFFF)
      {
        v13 = *(_QWORD *)(v4 + 136);
        if (*(_QWORD *)(v13 + 24 * v10 + 8) == v5)
        {
LABEL_16:
          v11 = re::convert(*(unsigned __int8 *)(v13 + 24 * v10 + 16));
          goto LABEL_12;
        }
        while (1)
        {
          LODWORD(v10) = *(_DWORD *)(v13 + 24 * v10) & 0x7FFFFFFF;
          if ((_DWORD)v10 == 0x7FFFFFFF)
            break;
          if (*(_QWORD *)(v13 + 24 * v10 + 8) == v5)
            goto LABEL_16;
        }
      }
    }
  }
  v11 = 0;
LABEL_12:
  re::AssetHandle::~AssetHandle((re::AssetHandle *)v14);
  return v11;
}

uint64_t REMaterialParameterBlockArrayComponentSetBlockAtIndex(re::ecs2::MaterialParameterBlockArrayComponent *a1, unint64_t a2, uint64_t a3)
{
  id v6;
  uint64_t v7;
  uint64_t v8;

  re::ecs2::MaterialParameterBlockArrayComponent::upgradeBlocksToBlockHandles(a1);
  if (*((_QWORD *)a1 + 6) <= a2)
  {
    re::ecs2::MaterialParameterBlockArrayComponent::resizeBlockHandles(a1, a2 + 1);
    re::ecs2::Component::enqueueMarkDirty((uint64_t)a1);
  }
  if (*((_QWORD *)a1 + 11) <= a2)
  {
    re::DynamicArray<re::SharedPtr<re::Shareable<re::AssetLoadDescriptor>>>::resize((uint64_t)a1 + 72, a2 + 1);
    re::ecs2::Component::enqueueMarkDirty((uint64_t)a1);
  }
  if (a3)
    v6 = (id)(a3 + 8);
  if (*((_QWORD *)a1 + 11) <= a2)
  {
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  v7 = *((_QWORD *)a1 + 13);
  v8 = *(_QWORD *)(v7 + 8 * a2);
  *(_QWORD *)(v7 + 8 * a2) = a3;
  if (v8)

  return re::ecs2::Component::enqueueMarkDirty((uint64_t)a1);
}

uint64_t REMaterialParameterBlockArrayComponentGetBlockAtIndex(uint64_t a1, unint64_t a2)
{
  if (*(_QWORD *)(a1 + 88) <= a2)
    return 0;
  else
    return *(_QWORD *)(*(_QWORD *)(a1 + 104) + 8 * a2);
}

void REMaterialParameterBlockArrayComponentClearParameterAtIndex(re::ecs2::MaterialParameterBlockArrayComponent *a1, unint64_t a2, char *a3)
{
  unint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  uint64_t isUniquelyReferenced;
  const re::ecs2::SerializableMaterialParameterBlock *v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  char v15;
  unsigned __int8 *v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  re::MaterialParameterBlock *v20;
  _QWORD v21[2];
  uint64_t v22;
  int v23;
  const char *v24;
  __int16 v25;
  int v26;
  __int16 v27;
  unint64_t v28;
  __int16 v29;
  unint64_t v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  uint64_t v36;

  v36 = *MEMORY[0x24BDAC8D0];
  re::ecs2::MaterialParameterBlockArrayComponent::upgradeBlocksToBlockHandles(a1);
  if (*((_QWORD *)a1 + 6) <= a2)
  {
    re::ecs2::MaterialParameterBlockArrayComponent::resizeBlockHandles(a1, a2 + 1);
    re::ecs2::Component::enqueueMarkDirty((uint64_t)a1);
  }
  if (*((_QWORD *)a1 + 11) <= a2)
  {
    re::DynamicArray<re::SharedPtr<re::Shareable<re::AssetLoadDescriptor>>>::resize((uint64_t)a1 + 72, a2 + 1);
    re::ecs2::Component::enqueueMarkDirty((uint64_t)a1);
  }
  v6 = *((_QWORD *)a1 + 6);
  if (v6 <= a2)
  {
    v21[0] = 0;
    v35 = 0u;
    v33 = 0u;
    v34 = 0u;
    v31 = 0u;
    v32 = 0u;
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    v23 = 136315906;
    v24 = "operator[]";
    v25 = 1024;
    v26 = 789;
    v27 = 2048;
    v28 = a2;
    v29 = 2048;
    v30 = v6;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_29:
    v22 = 0;
    v35 = 0u;
    v33 = 0u;
    v34 = 0u;
    v31 = 0u;
    v32 = 0u;
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    v23 = 136315906;
    v24 = "operator[]";
    v25 = 1024;
    v26 = 789;
    v27 = 2048;
    v28 = a2;
    v29 = 2048;
    v30 = v6;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
    goto LABEL_30;
  }
  v7 = *((_QWORD *)a1 + 8);
  v8 = (_QWORD *)(v7 + 24 * a2);
  v9 = v8 + 1;
  isUniquelyReferenced = objc_isUniquelyReferenced();
  if ((isUniquelyReferenced & 1) == 0)
  {
    v11 = (const re::ecs2::SerializableMaterialParameterBlock *)(*v8 ? *v8 : *v9);
    v12 = re::globalAllocators((re *)isUniquelyReferenced);
    v13 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v12[2] + 32))(v12[2], 408, 8);
    re::ecs2::SerializableMaterialParameterBlock::SerializableMaterialParameterBlock((re::ecs2::SerializableMaterialParameterBlock *)v13, v11);
    ++*(_DWORD *)(v7 + 24 * a2 + 16);
    re::SharedPtr<re::SkeletalPoseJointDefinition>::reset((uint64_t *)(v7 + 24 * a2), v13);
    *v9 = 0;
    if (v13)

  }
  if (a3)
  {
    v14 = *a3;
    if (*a3)
    {
      v15 = a3[1];
      if (v15)
      {
        v16 = (unsigned __int8 *)(a3 + 2);
        do
        {
          v14 = 31 * v14 + v15;
          v17 = *v16++;
          v15 = v17;
        }
        while (v17);
      }
    }
  }
  else
  {
    v14 = 0;
  }
  v21[0] = 2 * v14;
  v21[1] = a3;
  v6 = *((_QWORD *)a1 + 6);
  if (v6 <= a2)
    goto LABEL_29;
  v18 = *((_QWORD *)a1 + 8) + 24 * a2;
  ++*(_DWORD *)(v18 + 16);
  if (re::ecs2::SerializableMaterialParameterBlock::removeParameter(*(re::ecs2::SerializableMaterialParameterBlock **)v18, (const re::StringID *)v21))
  {
    re::ecs2::Component::enqueueMarkDirty((uint64_t)a1);
  }
  v6 = *((_QWORD *)a1 + 11);
  if (v6 <= a2)
  {
LABEL_30:
    v22 = 0;
    v35 = 0u;
    v33 = 0u;
    v34 = 0u;
    v31 = 0u;
    v32 = 0u;
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    v23 = 136315906;
    v24 = "operator[]";
    v25 = 1024;
    v26 = 789;
    v27 = 2048;
    v28 = a2;
    v29 = 2048;
    v30 = v6;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  v19 = *((_QWORD *)a1 + 13);
  v20 = *(re::MaterialParameterBlock **)(v19 + 8 * a2);
  if (v20)
  {
    re::MaterialParameterBlock::handle(v20, a3, (uint64_t)&v31);
    if ((BYTE12(v31) & 7) != 0)
      re::MaterialParameterBlock::removeParameter(*(re::MaterialParameterBlock **)(v19 + 8 * a2), a3);
    re::ecs2::Component::enqueueMarkDirty((uint64_t)a1);
  }
  re::StringID::destroyString((re::StringID *)v21);
}

uint64_t REMaterialParameterBlockArrayComponentClearParameterWithHandleAtIndex(re::ecs2::MaterialParameterBlockArrayComponent *a1, unint64_t a2, uint64_t a3)
{
  uint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  uint64_t isUniquelyReferenced;
  const re::ecs2::SerializableMaterialParameterBlock *v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t result;

  re::ecs2::MaterialParameterBlockArrayComponent::upgradeBlocksToBlockHandles(a1);
  if (*((_QWORD *)a1 + 6) <= a2)
  {
    re::ecs2::MaterialParameterBlockArrayComponent::resizeBlockHandles(a1, a2 + 1);
    re::ecs2::Component::enqueueMarkDirty((uint64_t)a1);
  }
  if (*((_QWORD *)a1 + 11) <= a2)
  {
    re::DynamicArray<re::SharedPtr<re::Shareable<re::AssetLoadDescriptor>>>::resize((uint64_t)a1 + 72, a2 + 1);
    re::ecs2::Component::enqueueMarkDirty((uint64_t)a1);
  }
  if (*((_QWORD *)a1 + 6) <= a2)
  {
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
    goto LABEL_17;
  }
  v6 = *((_QWORD *)a1 + 8);
  v7 = (_QWORD *)(v6 + 24 * a2);
  v8 = v7 + 1;
  isUniquelyReferenced = objc_isUniquelyReferenced();
  if ((isUniquelyReferenced & 1) == 0)
  {
    v10 = (const re::ecs2::SerializableMaterialParameterBlock *)(*v7 ? *v7 : *v8);
    v11 = re::globalAllocators((re *)isUniquelyReferenced);
    v12 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v11[2] + 32))(v11[2], 408, 8);
    re::ecs2::SerializableMaterialParameterBlock::SerializableMaterialParameterBlock((re::ecs2::SerializableMaterialParameterBlock *)v12, v10);
    ++*(_DWORD *)(v6 + 24 * a2 + 16);
    re::SharedPtr<re::SkeletalPoseJointDefinition>::reset((uint64_t *)(v6 + 24 * a2), v12);
    *v8 = 0;
    if (v12)

  }
  if (*((_QWORD *)a1 + 6) <= a2)
  {
LABEL_17:
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  v13 = *((_QWORD *)a1 + 8) + 24 * a2;
  ++*(_DWORD *)(v13 + 16);
  result = re::ecs2::SerializableMaterialParameterBlock::removeParameter(*(re::ecs2::SerializableMaterialParameterBlock **)v13, (const re::StringID *)(a3 + 24));
  if ((_DWORD)result)
    return re::ecs2::Component::enqueueMarkDirty((uint64_t)a1);
  return result;
}

uint64_t RESerializedMaterialParameterHandleCreate(re *a1)
{
  uint64_t *v2;
  uint64_t v3;
  _anonymous_namespace_ *v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v10;
  void *v11;
  _QWORD v12[2];

  v2 = re::globalAllocators(a1);
  v3 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v2[2] + 32))(v2[2], 40, 8);
  *(_OWORD *)v3 = 0u;
  *(_OWORD *)(v3 + 16) = 0u;
  *(_QWORD *)(v3 + 32) = 0;
  ArcSharedObject::ArcSharedObject((ArcSharedObject *)v3, 0);
  *(_QWORD *)v3 = &off_24ED9CBD8;
  *(_QWORD *)(v3 + 24) = 0;
  *(_QWORD *)(v3 + 32) = &str_110;
  v10 = 0;
  v11 = &str_110;
  v5 = v10;
  v6 = v11;
  v10 = 0;
  v11 = &str_110;
  v7 = *(_QWORD *)(v3 + 24);
  v8 = *(_QWORD *)(v3 + 32);
  *(_QWORD *)(v3 + 24) = v5;
  *(_QWORD *)(v3 + 32) = v6;
  v12[0] = v5 & 0xFFFFFFFFFFFFFFFELL | v7 & 1;
  v12[1] = v8;
  re::StringID::destroyString((re::StringID *)v12);
  re::StringID::destroyString((re::StringID *)&v10);
  return v3;
}

CFStringRef RESerializedMaterialParameterHandleGetKey(uint64_t a1)
{
  return CFStringCreateWithCString(0, *(const char **)(a1 + 32), 0x8000100u);
}

uint64_t RESerializedMaterialParameterHandleGetKeyUnownedCString(uint64_t a1)
{
  return *(_QWORD *)(a1 + 32);
}

uint64_t REMaterialParameterBlockArrayComponentSetBoolAtIndex(re::ecs2::MaterialParameterBlockArrayComponent *a1, unint64_t a2, char *a3, char a4)
{
  uint64_t v8;
  const re::ecs2::SerializableMaterialParameterBlock **v9;
  const re::ecs2::SerializableMaterialParameterBlock **v10;
  uint64_t isUniquelyReferenced;
  const re::ecs2::SerializableMaterialParameterBlock *v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  uint64_t v23;

  v23 = *MEMORY[0x24BDAC8D0];
  re::ecs2::MaterialParameterBlockArrayComponent::upgradeBlocksToBlockHandles(a1);
  if (*((_QWORD *)a1 + 6) <= a2)
  {
    re::ecs2::MaterialParameterBlockArrayComponent::resizeBlockHandles(a1, a2 + 1);
    re::ecs2::Component::enqueueMarkDirty((uint64_t)a1);
  }
  if (*((_QWORD *)a1 + 11) <= a2)
  {
    re::DynamicArray<re::SharedPtr<re::Shareable<re::AssetLoadDescriptor>>>::resize((uint64_t)a1 + 72, a2 + 1);
    re::ecs2::Component::enqueueMarkDirty((uint64_t)a1);
  }
  if (*((_QWORD *)a1 + 6) <= a2)
  {
    v21 = 0u;
    v22 = 0u;
    v19 = 0u;
    v20 = 0u;
    v18 = 0u;
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
    goto LABEL_15;
  }
  v8 = *((_QWORD *)a1 + 8);
  v9 = (const re::ecs2::SerializableMaterialParameterBlock **)(v8 + 24 * a2);
  v10 = v9 + 1;
  isUniquelyReferenced = objc_isUniquelyReferenced();
  if ((isUniquelyReferenced & 1) == 0)
  {
    if (*v9)
      v12 = *v9;
    else
      v12 = *v10;
    v13 = re::globalAllocators((re *)isUniquelyReferenced);
    v14 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v13[2] + 32))(v13[2], 408, 8);
    re::ecs2::SerializableMaterialParameterBlock::SerializableMaterialParameterBlock((re::ecs2::SerializableMaterialParameterBlock *)v14, v12);
    ++*(_DWORD *)(v8 + 24 * a2 + 16);
    re::SharedPtr<re::SkeletalPoseJointDefinition>::reset((uint64_t *)(v8 + 24 * a2), v14);
    *v10 = 0;
    if (v14)

  }
  if (*((_QWORD *)a1 + 6) <= a2)
  {
LABEL_15:
    v21 = 0u;
    v22 = 0u;
    v19 = 0u;
    v20 = 0u;
    v18 = 0u;
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  v15 = *((_QWORD *)a1 + 8) + 24 * a2;
  ++*(_DWORD *)(v15 + 16);
  v16 = *(_QWORD *)v15;
  LOBYTE(v18) = a4;
  re::ecs2::SerializableMaterialParameterBlock::setValue<void const*>(v16, a3, 2, (unsigned __int8 *)&v18);
  ++*(_DWORD *)(v16 + 400);
  return re::ecs2::Component::enqueueMarkDirty((uint64_t)a1);
}

uint64_t REMaterialParameterBlockArrayComponentSetBoolWithHandleAtIndex(re::ecs2::MaterialParameterBlockArrayComponent *a1, unint64_t a2, uint64_t a3, char a4)
{
  uint64_t v8;
  const re::ecs2::SerializableMaterialParameterBlock **v9;
  const re::ecs2::SerializableMaterialParameterBlock **v10;
  uint64_t isUniquelyReferenced;
  const re::ecs2::SerializableMaterialParameterBlock *v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  uint64_t v23;

  v23 = *MEMORY[0x24BDAC8D0];
  re::ecs2::MaterialParameterBlockArrayComponent::upgradeBlocksToBlockHandles(a1);
  if (*((_QWORD *)a1 + 6) <= a2)
  {
    re::ecs2::MaterialParameterBlockArrayComponent::resizeBlockHandles(a1, a2 + 1);
    re::ecs2::Component::enqueueMarkDirty((uint64_t)a1);
  }
  if (*((_QWORD *)a1 + 11) <= a2)
  {
    re::DynamicArray<re::SharedPtr<re::Shareable<re::AssetLoadDescriptor>>>::resize((uint64_t)a1 + 72, a2 + 1);
    re::ecs2::Component::enqueueMarkDirty((uint64_t)a1);
  }
  if (*((_QWORD *)a1 + 6) <= a2)
  {
    v21 = 0u;
    v22 = 0u;
    v19 = 0u;
    v20 = 0u;
    v18 = 0u;
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
    goto LABEL_15;
  }
  v8 = *((_QWORD *)a1 + 8);
  v9 = (const re::ecs2::SerializableMaterialParameterBlock **)(v8 + 24 * a2);
  v10 = v9 + 1;
  isUniquelyReferenced = objc_isUniquelyReferenced();
  if ((isUniquelyReferenced & 1) == 0)
  {
    if (*v9)
      v12 = *v9;
    else
      v12 = *v10;
    v13 = re::globalAllocators((re *)isUniquelyReferenced);
    v14 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v13[2] + 32))(v13[2], 408, 8);
    re::ecs2::SerializableMaterialParameterBlock::SerializableMaterialParameterBlock((re::ecs2::SerializableMaterialParameterBlock *)v14, v12);
    ++*(_DWORD *)(v8 + 24 * a2 + 16);
    re::SharedPtr<re::SkeletalPoseJointDefinition>::reset((uint64_t *)(v8 + 24 * a2), v14);
    *v10 = 0;
    if (v14)

  }
  if (*((_QWORD *)a1 + 6) <= a2)
  {
LABEL_15:
    v21 = 0u;
    v22 = 0u;
    v19 = 0u;
    v20 = 0u;
    v18 = 0u;
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  v15 = *((_QWORD *)a1 + 8) + 24 * a2;
  ++*(_DWORD *)(v15 + 16);
  v16 = *(_QWORD *)v15;
  LOBYTE(v18) = a4;
  re::ecs2::SerializableMaterialParameterBlock::setValue<void const*>(v16, (StringID *)(a3 + 24), 2, (unsigned __int8 *)&v18);
  ++*(_DWORD *)(v16 + 400);
  return re::ecs2::Component::enqueueMarkDirty((uint64_t)a1);
}

re::MaterialParameterBlock *REMaterialParameterBlockArrayComponentGetBoolAtIndex(re::ecs2::MaterialParameterBlockArrayComponent *a1, unint64_t a2, const char *a3, _BYTE *a4)
{
  unint64_t v8;
  uint64_t v9;
  re::ecs2::SerializableMaterialParameterBlock *v10;
  char v11;
  re::MaterialParameterBlock *result;
  uint64_t v13;
  _BYTE v14[2];
  uint64_t v15;
  int v16;
  const char *v17;
  __int16 v18;
  int v19;
  __int16 v20;
  unint64_t v21;
  __int16 v22;
  unint64_t v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  uint64_t v29;

  v29 = *MEMORY[0x24BDAC8D0];
  re::ecs2::MaterialParameterBlockArrayComponent::upgradeBlocksToBlockHandles(a1);
  if (*((_QWORD *)a1 + 6) <= a2)
  {
    re::ecs2::MaterialParameterBlockArrayComponent::resizeBlockHandles(a1, a2 + 1);
    re::ecs2::Component::enqueueMarkDirty((uint64_t)a1);
  }
  if (*((_QWORD *)a1 + 11) <= a2)
  {
    re::DynamicArray<re::SharedPtr<re::Shareable<re::AssetLoadDescriptor>>>::resize((uint64_t)a1 + 72, a2 + 1);
    re::ecs2::Component::enqueueMarkDirty((uint64_t)a1);
  }
  v8 = *((_QWORD *)a1 + 6);
  if (v8 <= a2)
  {
    v15 = 0;
    v27 = 0u;
    v28 = 0u;
    v25 = 0u;
    v26 = 0u;
    v24 = 0u;
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    v16 = 136315906;
    v17 = "operator[]";
    v18 = 1024;
    v19 = 789;
    v20 = 2048;
    v21 = a2;
    v22 = 2048;
    v23 = v8;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
    goto LABEL_19;
  }
  v9 = *((_QWORD *)a1 + 8);
  v10 = *(re::ecs2::SerializableMaterialParameterBlock **)(v9 + 24 * a2);
  if (!v10)
    v10 = *(re::ecs2::SerializableMaterialParameterBlock **)(v9 + 24 * a2 + 8);
  re::ecs2::SerializableMaterialParameterBlock::BOOLValue(v10, a3, v14);
  if (v14[0])
  {
    v11 = v14[1];
LABEL_10:
    *a4 = v11;
    return (re::MaterialParameterBlock *)1;
  }
  v8 = *((_QWORD *)a1 + 11);
  if (v8 <= a2)
  {
LABEL_19:
    v15 = 0;
    v27 = 0u;
    v28 = 0u;
    v25 = 0u;
    v26 = 0u;
    v24 = 0u;
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    v16 = 136315906;
    v17 = "operator[]";
    v18 = 1024;
    v19 = 789;
    v20 = 2048;
    v21 = a2;
    v22 = 2048;
    v23 = v8;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  v13 = *((_QWORD *)a1 + 13);
  result = *(re::MaterialParameterBlock **)(v13 + 8 * a2);
  if (result)
  {
    re::MaterialParameterBlock::handle(result, a3, (uint64_t)&v24);
    if ((BYTE12(v24) & 7) != 1 || BYTE8(v25) != 2)
      return 0;
    v11 = *(_BYTE *)re::ShaderGraphMaterial::getConstant(*(_QWORD *)(v13 + 8 * a2), (uint64_t)&v24);
    goto LABEL_10;
  }
  return result;
}

uint64_t REMaterialParameterBlockArrayComponentSetFloatAtIndex(re::ecs2::MaterialParameterBlockArrayComponent *a1, unint64_t a2, char *a3, float a4)
{
  uint64_t v8;
  const re::ecs2::SerializableMaterialParameterBlock **v9;
  const re::ecs2::SerializableMaterialParameterBlock **v10;
  uint64_t isUniquelyReferenced;
  const re::ecs2::SerializableMaterialParameterBlock *v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  uint64_t v23;

  v23 = *MEMORY[0x24BDAC8D0];
  re::ecs2::MaterialParameterBlockArrayComponent::upgradeBlocksToBlockHandles(a1);
  if (*((_QWORD *)a1 + 6) <= a2)
  {
    re::ecs2::MaterialParameterBlockArrayComponent::resizeBlockHandles(a1, a2 + 1);
    re::ecs2::Component::enqueueMarkDirty((uint64_t)a1);
  }
  if (*((_QWORD *)a1 + 11) <= a2)
  {
    re::DynamicArray<re::SharedPtr<re::Shareable<re::AssetLoadDescriptor>>>::resize((uint64_t)a1 + 72, a2 + 1);
    re::ecs2::Component::enqueueMarkDirty((uint64_t)a1);
  }
  if (*((_QWORD *)a1 + 6) <= a2)
  {
    v21 = 0u;
    v22 = 0u;
    v19 = 0u;
    v20 = 0u;
    v18 = 0u;
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
    goto LABEL_15;
  }
  v8 = *((_QWORD *)a1 + 8);
  v9 = (const re::ecs2::SerializableMaterialParameterBlock **)(v8 + 24 * a2);
  v10 = v9 + 1;
  isUniquelyReferenced = objc_isUniquelyReferenced();
  if ((isUniquelyReferenced & 1) == 0)
  {
    if (*v9)
      v12 = *v9;
    else
      v12 = *v10;
    v13 = re::globalAllocators((re *)isUniquelyReferenced);
    v14 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v13[2] + 32))(v13[2], 408, 8);
    re::ecs2::SerializableMaterialParameterBlock::SerializableMaterialParameterBlock((re::ecs2::SerializableMaterialParameterBlock *)v14, v12);
    ++*(_DWORD *)(v8 + 24 * a2 + 16);
    re::SharedPtr<re::SkeletalPoseJointDefinition>::reset((uint64_t *)(v8 + 24 * a2), v14);
    *v10 = 0;
    if (v14)

  }
  if (*((_QWORD *)a1 + 6) <= a2)
  {
LABEL_15:
    v21 = 0u;
    v22 = 0u;
    v19 = 0u;
    v20 = 0u;
    v18 = 0u;
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  v15 = *((_QWORD *)a1 + 8) + 24 * a2;
  ++*(_DWORD *)(v15 + 16);
  v16 = *(_QWORD *)v15;
  *(float *)&v18 = a4;
  re::ecs2::SerializableMaterialParameterBlock::setValue<void const*>(v16, a3, 1, (unsigned __int8 *)&v18);
  ++*(_DWORD *)(v16 + 400);
  return re::ecs2::Component::enqueueMarkDirty((uint64_t)a1);
}

uint64_t REMaterialParameterBlockArrayComponentSetFloatWithHandleAtIndex(re::ecs2::MaterialParameterBlockArrayComponent *a1, unint64_t a2, uint64_t a3, float a4)
{
  uint64_t v8;
  const re::ecs2::SerializableMaterialParameterBlock **v9;
  const re::ecs2::SerializableMaterialParameterBlock **v10;
  uint64_t isUniquelyReferenced;
  const re::ecs2::SerializableMaterialParameterBlock *v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  uint64_t v23;

  v23 = *MEMORY[0x24BDAC8D0];
  re::ecs2::MaterialParameterBlockArrayComponent::upgradeBlocksToBlockHandles(a1);
  if (*((_QWORD *)a1 + 6) <= a2)
  {
    re::ecs2::MaterialParameterBlockArrayComponent::resizeBlockHandles(a1, a2 + 1);
    re::ecs2::Component::enqueueMarkDirty((uint64_t)a1);
  }
  if (*((_QWORD *)a1 + 11) <= a2)
  {
    re::DynamicArray<re::SharedPtr<re::Shareable<re::AssetLoadDescriptor>>>::resize((uint64_t)a1 + 72, a2 + 1);
    re::ecs2::Component::enqueueMarkDirty((uint64_t)a1);
  }
  if (*((_QWORD *)a1 + 6) <= a2)
  {
    v21 = 0u;
    v22 = 0u;
    v19 = 0u;
    v20 = 0u;
    v18 = 0u;
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
    goto LABEL_15;
  }
  v8 = *((_QWORD *)a1 + 8);
  v9 = (const re::ecs2::SerializableMaterialParameterBlock **)(v8 + 24 * a2);
  v10 = v9 + 1;
  isUniquelyReferenced = objc_isUniquelyReferenced();
  if ((isUniquelyReferenced & 1) == 0)
  {
    if (*v9)
      v12 = *v9;
    else
      v12 = *v10;
    v13 = re::globalAllocators((re *)isUniquelyReferenced);
    v14 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v13[2] + 32))(v13[2], 408, 8);
    re::ecs2::SerializableMaterialParameterBlock::SerializableMaterialParameterBlock((re::ecs2::SerializableMaterialParameterBlock *)v14, v12);
    ++*(_DWORD *)(v8 + 24 * a2 + 16);
    re::SharedPtr<re::SkeletalPoseJointDefinition>::reset((uint64_t *)(v8 + 24 * a2), v14);
    *v10 = 0;
    if (v14)

  }
  if (*((_QWORD *)a1 + 6) <= a2)
  {
LABEL_15:
    v21 = 0u;
    v22 = 0u;
    v19 = 0u;
    v20 = 0u;
    v18 = 0u;
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  v15 = *((_QWORD *)a1 + 8) + 24 * a2;
  ++*(_DWORD *)(v15 + 16);
  v16 = *(_QWORD *)v15;
  *(float *)&v18 = a4;
  re::ecs2::SerializableMaterialParameterBlock::setValue<void const*>(v16, (StringID *)(a3 + 24), 1, (unsigned __int8 *)&v18);
  ++*(_DWORD *)(v16 + 400);
  return re::ecs2::Component::enqueueMarkDirty((uint64_t)a1);
}

re::MaterialParameterBlock *REMaterialParameterBlockArrayComponentGetFloatAtIndex(re::ecs2::MaterialParameterBlockArrayComponent *a1, unint64_t a2, const char *a3, _DWORD *a4)
{
  unint64_t v8;
  uint64_t v9;
  re::ecs2::SerializableMaterialParameterBlock *v10;
  int v11;
  re::MaterialParameterBlock *result;
  uint64_t v13;
  _BYTE v14[4];
  int v15;
  uint64_t v16;
  int v17;
  const char *v18;
  __int16 v19;
  int v20;
  __int16 v21;
  unint64_t v22;
  __int16 v23;
  unint64_t v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  uint64_t v30;

  v30 = *MEMORY[0x24BDAC8D0];
  re::ecs2::MaterialParameterBlockArrayComponent::upgradeBlocksToBlockHandles(a1);
  if (*((_QWORD *)a1 + 6) <= a2)
  {
    re::ecs2::MaterialParameterBlockArrayComponent::resizeBlockHandles(a1, a2 + 1);
    re::ecs2::Component::enqueueMarkDirty((uint64_t)a1);
  }
  if (*((_QWORD *)a1 + 11) <= a2)
  {
    re::DynamicArray<re::SharedPtr<re::Shareable<re::AssetLoadDescriptor>>>::resize((uint64_t)a1 + 72, a2 + 1);
    re::ecs2::Component::enqueueMarkDirty((uint64_t)a1);
  }
  v8 = *((_QWORD *)a1 + 6);
  if (v8 <= a2)
  {
    v16 = 0;
    v28 = 0u;
    v29 = 0u;
    v26 = 0u;
    v27 = 0u;
    v25 = 0u;
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    v17 = 136315906;
    v18 = "operator[]";
    v19 = 1024;
    v20 = 789;
    v21 = 2048;
    v22 = a2;
    v23 = 2048;
    v24 = v8;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
    goto LABEL_19;
  }
  v9 = *((_QWORD *)a1 + 8);
  v10 = *(re::ecs2::SerializableMaterialParameterBlock **)(v9 + 24 * a2);
  if (!v10)
    v10 = *(re::ecs2::SerializableMaterialParameterBlock **)(v9 + 24 * a2 + 8);
  re::ecs2::SerializableMaterialParameterBlock::floatValue(v10, a3, (uint64_t)v14);
  if (v14[0])
  {
    v11 = v15;
LABEL_10:
    *a4 = v11;
    return (re::MaterialParameterBlock *)1;
  }
  v8 = *((_QWORD *)a1 + 11);
  if (v8 <= a2)
  {
LABEL_19:
    v16 = 0;
    v28 = 0u;
    v29 = 0u;
    v26 = 0u;
    v27 = 0u;
    v25 = 0u;
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    v17 = 136315906;
    v18 = "operator[]";
    v19 = 1024;
    v20 = 789;
    v21 = 2048;
    v22 = a2;
    v23 = 2048;
    v24 = v8;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  v13 = *((_QWORD *)a1 + 13);
  result = *(re::MaterialParameterBlock **)(v13 + 8 * a2);
  if (result)
  {
    re::MaterialParameterBlock::handle(result, a3, (uint64_t)&v25);
    if ((BYTE12(v25) & 7) != 1 || BYTE8(v26) != 1)
      return 0;
    v11 = *(_DWORD *)re::ShaderGraphMaterial::getConstant(*(_QWORD *)(v13 + 8 * a2), (uint64_t)&v25);
    goto LABEL_10;
  }
  return result;
}

uint64_t REMaterialParameterBlockArrayComponentSetIntAtIndex(re::ecs2::MaterialParameterBlockArrayComponent *a1, unint64_t a2, char *a3, int a4)
{
  uint64_t v8;
  const re::ecs2::SerializableMaterialParameterBlock **v9;
  const re::ecs2::SerializableMaterialParameterBlock **v10;
  uint64_t isUniquelyReferenced;
  const re::ecs2::SerializableMaterialParameterBlock *v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  uint64_t v23;

  v23 = *MEMORY[0x24BDAC8D0];
  re::ecs2::MaterialParameterBlockArrayComponent::upgradeBlocksToBlockHandles(a1);
  if (*((_QWORD *)a1 + 6) <= a2)
  {
    re::ecs2::MaterialParameterBlockArrayComponent::resizeBlockHandles(a1, a2 + 1);
    re::ecs2::Component::enqueueMarkDirty((uint64_t)a1);
  }
  if (*((_QWORD *)a1 + 11) <= a2)
  {
    re::DynamicArray<re::SharedPtr<re::Shareable<re::AssetLoadDescriptor>>>::resize((uint64_t)a1 + 72, a2 + 1);
    re::ecs2::Component::enqueueMarkDirty((uint64_t)a1);
  }
  if (*((_QWORD *)a1 + 6) <= a2)
  {
    v21 = 0u;
    v22 = 0u;
    v19 = 0u;
    v20 = 0u;
    v18 = 0u;
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
    goto LABEL_15;
  }
  v8 = *((_QWORD *)a1 + 8);
  v9 = (const re::ecs2::SerializableMaterialParameterBlock **)(v8 + 24 * a2);
  v10 = v9 + 1;
  isUniquelyReferenced = objc_isUniquelyReferenced();
  if ((isUniquelyReferenced & 1) == 0)
  {
    if (*v9)
      v12 = *v9;
    else
      v12 = *v10;
    v13 = re::globalAllocators((re *)isUniquelyReferenced);
    v14 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v13[2] + 32))(v13[2], 408, 8);
    re::ecs2::SerializableMaterialParameterBlock::SerializableMaterialParameterBlock((re::ecs2::SerializableMaterialParameterBlock *)v14, v12);
    ++*(_DWORD *)(v8 + 24 * a2 + 16);
    re::SharedPtr<re::SkeletalPoseJointDefinition>::reset((uint64_t *)(v8 + 24 * a2), v14);
    *v10 = 0;
    if (v14)

  }
  if (*((_QWORD *)a1 + 6) <= a2)
  {
LABEL_15:
    v21 = 0u;
    v22 = 0u;
    v19 = 0u;
    v20 = 0u;
    v18 = 0u;
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  v15 = *((_QWORD *)a1 + 8) + 24 * a2;
  ++*(_DWORD *)(v15 + 16);
  v16 = *(_QWORD *)v15;
  LODWORD(v18) = a4;
  re::ecs2::SerializableMaterialParameterBlock::setValue<void const*>(v16, a3, 3, (unsigned __int8 *)&v18);
  ++*(_DWORD *)(v16 + 400);
  return re::ecs2::Component::enqueueMarkDirty((uint64_t)a1);
}

uint64_t REMaterialParameterBlockArrayComponentSetIntWithHandleAtIndex(re::ecs2::MaterialParameterBlockArrayComponent *a1, unint64_t a2, uint64_t a3, int a4)
{
  uint64_t v8;
  const re::ecs2::SerializableMaterialParameterBlock **v9;
  const re::ecs2::SerializableMaterialParameterBlock **v10;
  uint64_t isUniquelyReferenced;
  const re::ecs2::SerializableMaterialParameterBlock *v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  uint64_t v23;

  v23 = *MEMORY[0x24BDAC8D0];
  re::ecs2::MaterialParameterBlockArrayComponent::upgradeBlocksToBlockHandles(a1);
  if (*((_QWORD *)a1 + 6) <= a2)
  {
    re::ecs2::MaterialParameterBlockArrayComponent::resizeBlockHandles(a1, a2 + 1);
    re::ecs2::Component::enqueueMarkDirty((uint64_t)a1);
  }
  if (*((_QWORD *)a1 + 11) <= a2)
  {
    re::DynamicArray<re::SharedPtr<re::Shareable<re::AssetLoadDescriptor>>>::resize((uint64_t)a1 + 72, a2 + 1);
    re::ecs2::Component::enqueueMarkDirty((uint64_t)a1);
  }
  if (*((_QWORD *)a1 + 6) <= a2)
  {
    v21 = 0u;
    v22 = 0u;
    v19 = 0u;
    v20 = 0u;
    v18 = 0u;
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
    goto LABEL_15;
  }
  v8 = *((_QWORD *)a1 + 8);
  v9 = (const re::ecs2::SerializableMaterialParameterBlock **)(v8 + 24 * a2);
  v10 = v9 + 1;
  isUniquelyReferenced = objc_isUniquelyReferenced();
  if ((isUniquelyReferenced & 1) == 0)
  {
    if (*v9)
      v12 = *v9;
    else
      v12 = *v10;
    v13 = re::globalAllocators((re *)isUniquelyReferenced);
    v14 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v13[2] + 32))(v13[2], 408, 8);
    re::ecs2::SerializableMaterialParameterBlock::SerializableMaterialParameterBlock((re::ecs2::SerializableMaterialParameterBlock *)v14, v12);
    ++*(_DWORD *)(v8 + 24 * a2 + 16);
    re::SharedPtr<re::SkeletalPoseJointDefinition>::reset((uint64_t *)(v8 + 24 * a2), v14);
    *v10 = 0;
    if (v14)

  }
  if (*((_QWORD *)a1 + 6) <= a2)
  {
LABEL_15:
    v21 = 0u;
    v22 = 0u;
    v19 = 0u;
    v20 = 0u;
    v18 = 0u;
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  v15 = *((_QWORD *)a1 + 8) + 24 * a2;
  ++*(_DWORD *)(v15 + 16);
  v16 = *(_QWORD *)v15;
  LODWORD(v18) = a4;
  re::ecs2::SerializableMaterialParameterBlock::setValue<void const*>(v16, (StringID *)(a3 + 24), 3, (unsigned __int8 *)&v18);
  ++*(_DWORD *)(v16 + 400);
  return re::ecs2::Component::enqueueMarkDirty((uint64_t)a1);
}

re::MaterialParameterBlock *REMaterialParameterBlockArrayComponentGetIntAtIndex(re::ecs2::MaterialParameterBlockArrayComponent *a1, unint64_t a2, const char *a3, _DWORD *a4)
{
  unint64_t v8;
  uint64_t v9;
  re::ecs2::SerializableMaterialParameterBlock *v10;
  int v11;
  re::MaterialParameterBlock *result;
  uint64_t v13;
  _BYTE v14[4];
  int v15;
  uint64_t v16;
  int v17;
  const char *v18;
  __int16 v19;
  int v20;
  __int16 v21;
  unint64_t v22;
  __int16 v23;
  unint64_t v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  uint64_t v30;

  v30 = *MEMORY[0x24BDAC8D0];
  re::ecs2::MaterialParameterBlockArrayComponent::upgradeBlocksToBlockHandles(a1);
  if (*((_QWORD *)a1 + 6) <= a2)
  {
    re::ecs2::MaterialParameterBlockArrayComponent::resizeBlockHandles(a1, a2 + 1);
    re::ecs2::Component::enqueueMarkDirty((uint64_t)a1);
  }
  if (*((_QWORD *)a1 + 11) <= a2)
  {
    re::DynamicArray<re::SharedPtr<re::Shareable<re::AssetLoadDescriptor>>>::resize((uint64_t)a1 + 72, a2 + 1);
    re::ecs2::Component::enqueueMarkDirty((uint64_t)a1);
  }
  v8 = *((_QWORD *)a1 + 6);
  if (v8 <= a2)
  {
    v16 = 0;
    v28 = 0u;
    v29 = 0u;
    v26 = 0u;
    v27 = 0u;
    v25 = 0u;
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    v17 = 136315906;
    v18 = "operator[]";
    v19 = 1024;
    v20 = 789;
    v21 = 2048;
    v22 = a2;
    v23 = 2048;
    v24 = v8;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
    goto LABEL_19;
  }
  v9 = *((_QWORD *)a1 + 8);
  v10 = *(re::ecs2::SerializableMaterialParameterBlock **)(v9 + 24 * a2);
  if (!v10)
    v10 = *(re::ecs2::SerializableMaterialParameterBlock **)(v9 + 24 * a2 + 8);
  re::ecs2::SerializableMaterialParameterBlock::intValue(v10, a3, (uint64_t)v14);
  if (v14[0])
  {
    v11 = v15;
LABEL_10:
    *a4 = v11;
    return (re::MaterialParameterBlock *)1;
  }
  v8 = *((_QWORD *)a1 + 11);
  if (v8 <= a2)
  {
LABEL_19:
    v16 = 0;
    v28 = 0u;
    v29 = 0u;
    v26 = 0u;
    v27 = 0u;
    v25 = 0u;
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    v17 = 136315906;
    v18 = "operator[]";
    v19 = 1024;
    v20 = 789;
    v21 = 2048;
    v22 = a2;
    v23 = 2048;
    v24 = v8;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  v13 = *((_QWORD *)a1 + 13);
  result = *(re::MaterialParameterBlock **)(v13 + 8 * a2);
  if (result)
  {
    re::MaterialParameterBlock::handle(result, a3, (uint64_t)&v25);
    if ((BYTE12(v25) & 7) != 1 || BYTE8(v26) != 3)
      return 0;
    v11 = *(_DWORD *)re::ShaderGraphMaterial::getConstant(*(_QWORD *)(v13 + 8 * a2), (uint64_t)&v25);
    goto LABEL_10;
  }
  return result;
}

uint64_t REMaterialParameterBlockArrayComponentSetUIntAtIndex(re::ecs2::MaterialParameterBlockArrayComponent *a1, unint64_t a2, char *a3, int a4)
{
  uint64_t v8;
  const re::ecs2::SerializableMaterialParameterBlock **v9;
  const re::ecs2::SerializableMaterialParameterBlock **v10;
  uint64_t isUniquelyReferenced;
  const re::ecs2::SerializableMaterialParameterBlock *v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  uint64_t v23;

  v23 = *MEMORY[0x24BDAC8D0];
  re::ecs2::MaterialParameterBlockArrayComponent::upgradeBlocksToBlockHandles(a1);
  if (*((_QWORD *)a1 + 6) <= a2)
  {
    re::ecs2::MaterialParameterBlockArrayComponent::resizeBlockHandles(a1, a2 + 1);
    re::ecs2::Component::enqueueMarkDirty((uint64_t)a1);
  }
  if (*((_QWORD *)a1 + 11) <= a2)
  {
    re::DynamicArray<re::SharedPtr<re::Shareable<re::AssetLoadDescriptor>>>::resize((uint64_t)a1 + 72, a2 + 1);
    re::ecs2::Component::enqueueMarkDirty((uint64_t)a1);
  }
  if (*((_QWORD *)a1 + 6) <= a2)
  {
    v21 = 0u;
    v22 = 0u;
    v19 = 0u;
    v20 = 0u;
    v18 = 0u;
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
    goto LABEL_15;
  }
  v8 = *((_QWORD *)a1 + 8);
  v9 = (const re::ecs2::SerializableMaterialParameterBlock **)(v8 + 24 * a2);
  v10 = v9 + 1;
  isUniquelyReferenced = objc_isUniquelyReferenced();
  if ((isUniquelyReferenced & 1) == 0)
  {
    if (*v9)
      v12 = *v9;
    else
      v12 = *v10;
    v13 = re::globalAllocators((re *)isUniquelyReferenced);
    v14 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v13[2] + 32))(v13[2], 408, 8);
    re::ecs2::SerializableMaterialParameterBlock::SerializableMaterialParameterBlock((re::ecs2::SerializableMaterialParameterBlock *)v14, v12);
    ++*(_DWORD *)(v8 + 24 * a2 + 16);
    re::SharedPtr<re::SkeletalPoseJointDefinition>::reset((uint64_t *)(v8 + 24 * a2), v14);
    *v10 = 0;
    if (v14)

  }
  if (*((_QWORD *)a1 + 6) <= a2)
  {
LABEL_15:
    v21 = 0u;
    v22 = 0u;
    v19 = 0u;
    v20 = 0u;
    v18 = 0u;
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  v15 = *((_QWORD *)a1 + 8) + 24 * a2;
  ++*(_DWORD *)(v15 + 16);
  v16 = *(_QWORD *)v15;
  LODWORD(v18) = a4;
  re::ecs2::SerializableMaterialParameterBlock::setValue<void const*>(v16, a3, 7, (unsigned __int8 *)&v18);
  ++*(_DWORD *)(v16 + 400);
  return re::ecs2::Component::enqueueMarkDirty((uint64_t)a1);
}

uint64_t REMaterialParameterBlockArrayComponentSetUIntWithHandleAtIndex(re::ecs2::MaterialParameterBlockArrayComponent *a1, unint64_t a2, uint64_t a3, int a4)
{
  uint64_t v8;
  const re::ecs2::SerializableMaterialParameterBlock **v9;
  const re::ecs2::SerializableMaterialParameterBlock **v10;
  uint64_t isUniquelyReferenced;
  const re::ecs2::SerializableMaterialParameterBlock *v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  uint64_t v23;

  v23 = *MEMORY[0x24BDAC8D0];
  re::ecs2::MaterialParameterBlockArrayComponent::upgradeBlocksToBlockHandles(a1);
  if (*((_QWORD *)a1 + 6) <= a2)
  {
    re::ecs2::MaterialParameterBlockArrayComponent::resizeBlockHandles(a1, a2 + 1);
    re::ecs2::Component::enqueueMarkDirty((uint64_t)a1);
  }
  if (*((_QWORD *)a1 + 11) <= a2)
  {
    re::DynamicArray<re::SharedPtr<re::Shareable<re::AssetLoadDescriptor>>>::resize((uint64_t)a1 + 72, a2 + 1);
    re::ecs2::Component::enqueueMarkDirty((uint64_t)a1);
  }
  if (*((_QWORD *)a1 + 6) <= a2)
  {
    v21 = 0u;
    v22 = 0u;
    v19 = 0u;
    v20 = 0u;
    v18 = 0u;
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
    goto LABEL_15;
  }
  v8 = *((_QWORD *)a1 + 8);
  v9 = (const re::ecs2::SerializableMaterialParameterBlock **)(v8 + 24 * a2);
  v10 = v9 + 1;
  isUniquelyReferenced = objc_isUniquelyReferenced();
  if ((isUniquelyReferenced & 1) == 0)
  {
    if (*v9)
      v12 = *v9;
    else
      v12 = *v10;
    v13 = re::globalAllocators((re *)isUniquelyReferenced);
    v14 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v13[2] + 32))(v13[2], 408, 8);
    re::ecs2::SerializableMaterialParameterBlock::SerializableMaterialParameterBlock((re::ecs2::SerializableMaterialParameterBlock *)v14, v12);
    ++*(_DWORD *)(v8 + 24 * a2 + 16);
    re::SharedPtr<re::SkeletalPoseJointDefinition>::reset((uint64_t *)(v8 + 24 * a2), v14);
    *v10 = 0;
    if (v14)

  }
  if (*((_QWORD *)a1 + 6) <= a2)
  {
LABEL_15:
    v21 = 0u;
    v22 = 0u;
    v19 = 0u;
    v20 = 0u;
    v18 = 0u;
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  v15 = *((_QWORD *)a1 + 8) + 24 * a2;
  ++*(_DWORD *)(v15 + 16);
  v16 = *(_QWORD *)v15;
  LODWORD(v18) = a4;
  re::ecs2::SerializableMaterialParameterBlock::setValue<void const*>(v16, (StringID *)(a3 + 24), 7, (unsigned __int8 *)&v18);
  ++*(_DWORD *)(v16 + 400);
  return re::ecs2::Component::enqueueMarkDirty((uint64_t)a1);
}

re::MaterialParameterBlock *REMaterialParameterBlockArrayComponentGetUIntAtIndex(re::ecs2::MaterialParameterBlockArrayComponent *a1, unint64_t a2, const char *a3, _DWORD *a4)
{
  unint64_t v8;
  uint64_t v9;
  re::ecs2::SerializableMaterialParameterBlock *v10;
  int v11;
  re::MaterialParameterBlock *result;
  uint64_t v13;
  _BYTE v14[4];
  int v15;
  uint64_t v16;
  int v17;
  const char *v18;
  __int16 v19;
  int v20;
  __int16 v21;
  unint64_t v22;
  __int16 v23;
  unint64_t v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  uint64_t v30;

  v30 = *MEMORY[0x24BDAC8D0];
  re::ecs2::MaterialParameterBlockArrayComponent::upgradeBlocksToBlockHandles(a1);
  if (*((_QWORD *)a1 + 6) <= a2)
  {
    re::ecs2::MaterialParameterBlockArrayComponent::resizeBlockHandles(a1, a2 + 1);
    re::ecs2::Component::enqueueMarkDirty((uint64_t)a1);
  }
  if (*((_QWORD *)a1 + 11) <= a2)
  {
    re::DynamicArray<re::SharedPtr<re::Shareable<re::AssetLoadDescriptor>>>::resize((uint64_t)a1 + 72, a2 + 1);
    re::ecs2::Component::enqueueMarkDirty((uint64_t)a1);
  }
  v8 = *((_QWORD *)a1 + 6);
  if (v8 <= a2)
  {
    v16 = 0;
    v28 = 0u;
    v29 = 0u;
    v26 = 0u;
    v27 = 0u;
    v25 = 0u;
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    v17 = 136315906;
    v18 = "operator[]";
    v19 = 1024;
    v20 = 789;
    v21 = 2048;
    v22 = a2;
    v23 = 2048;
    v24 = v8;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
    goto LABEL_19;
  }
  v9 = *((_QWORD *)a1 + 8);
  v10 = *(re::ecs2::SerializableMaterialParameterBlock **)(v9 + 24 * a2);
  if (!v10)
    v10 = *(re::ecs2::SerializableMaterialParameterBlock **)(v9 + 24 * a2 + 8);
  re::ecs2::SerializableMaterialParameterBlock::uintValue(v10, a3, (uint64_t)v14);
  if (v14[0])
  {
    v11 = v15;
LABEL_10:
    *a4 = v11;
    return (re::MaterialParameterBlock *)1;
  }
  v8 = *((_QWORD *)a1 + 11);
  if (v8 <= a2)
  {
LABEL_19:
    v16 = 0;
    v28 = 0u;
    v29 = 0u;
    v26 = 0u;
    v27 = 0u;
    v25 = 0u;
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    v17 = 136315906;
    v18 = "operator[]";
    v19 = 1024;
    v20 = 789;
    v21 = 2048;
    v22 = a2;
    v23 = 2048;
    v24 = v8;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  v13 = *((_QWORD *)a1 + 13);
  result = *(re::MaterialParameterBlock **)(v13 + 8 * a2);
  if (result)
  {
    re::MaterialParameterBlock::handle(result, a3, (uint64_t)&v25);
    if ((BYTE12(v25) & 7) != 1 || BYTE8(v26) != 7)
      return 0;
    v11 = *(_DWORD *)re::ShaderGraphMaterial::getConstant(*(_QWORD *)(v13 + 8 * a2), (uint64_t)&v25);
    goto LABEL_10;
  }
  return result;
}

uint64_t REMaterialParameterBlockArrayComponentSetFloat2AtIndex(re::ecs2::MaterialParameterBlockArrayComponent *a1, unint64_t a2, char *a3, double a4)
{
  uint64_t v8;
  const re::ecs2::SerializableMaterialParameterBlock **v9;
  const re::ecs2::SerializableMaterialParameterBlock **v10;
  uint64_t isUniquelyReferenced;
  const re::ecs2::SerializableMaterialParameterBlock *v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  uint64_t v23;

  v23 = *MEMORY[0x24BDAC8D0];
  re::ecs2::MaterialParameterBlockArrayComponent::upgradeBlocksToBlockHandles(a1);
  if (*((_QWORD *)a1 + 6) <= a2)
  {
    re::ecs2::MaterialParameterBlockArrayComponent::resizeBlockHandles(a1, a2 + 1);
    re::ecs2::Component::enqueueMarkDirty((uint64_t)a1);
  }
  if (*((_QWORD *)a1 + 11) <= a2)
  {
    re::DynamicArray<re::SharedPtr<re::Shareable<re::AssetLoadDescriptor>>>::resize((uint64_t)a1 + 72, a2 + 1);
    re::ecs2::Component::enqueueMarkDirty((uint64_t)a1);
  }
  if (*((_QWORD *)a1 + 6) <= a2)
  {
    v21 = 0u;
    v22 = 0u;
    v19 = 0u;
    v20 = 0u;
    v18 = 0u;
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
    goto LABEL_15;
  }
  v8 = *((_QWORD *)a1 + 8);
  v9 = (const re::ecs2::SerializableMaterialParameterBlock **)(v8 + 24 * a2);
  v10 = v9 + 1;
  isUniquelyReferenced = objc_isUniquelyReferenced();
  if ((isUniquelyReferenced & 1) == 0)
  {
    if (*v9)
      v12 = *v9;
    else
      v12 = *v10;
    v13 = re::globalAllocators((re *)isUniquelyReferenced);
    v14 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v13[2] + 32))(v13[2], 408, 8);
    re::ecs2::SerializableMaterialParameterBlock::SerializableMaterialParameterBlock((re::ecs2::SerializableMaterialParameterBlock *)v14, v12);
    ++*(_DWORD *)(v8 + 24 * a2 + 16);
    re::SharedPtr<re::SkeletalPoseJointDefinition>::reset((uint64_t *)(v8 + 24 * a2), v14);
    *v10 = 0;
    if (v14)

  }
  if (*((_QWORD *)a1 + 6) <= a2)
  {
LABEL_15:
    v21 = 0u;
    v22 = 0u;
    v19 = 0u;
    v20 = 0u;
    v18 = 0u;
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  v15 = *((_QWORD *)a1 + 8) + 24 * a2;
  ++*(_DWORD *)(v15 + 16);
  v16 = *(_QWORD *)v15;
  *(double *)&v18 = a4;
  re::ecs2::SerializableMaterialParameterBlock::setValue<void const*>(v16, a3, 32, (unsigned __int8 *)&v18);
  ++*(_DWORD *)(v16 + 400);
  return re::ecs2::Component::enqueueMarkDirty((uint64_t)a1);
}

uint64_t REMaterialParameterBlockArrayComponentSetFloat2WithHandleAtIndex(re::ecs2::MaterialParameterBlockArrayComponent *a1, unint64_t a2, uint64_t a3, double a4)
{
  uint64_t v8;
  const re::ecs2::SerializableMaterialParameterBlock **v9;
  const re::ecs2::SerializableMaterialParameterBlock **v10;
  uint64_t isUniquelyReferenced;
  const re::ecs2::SerializableMaterialParameterBlock *v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  uint64_t v23;

  v23 = *MEMORY[0x24BDAC8D0];
  re::ecs2::MaterialParameterBlockArrayComponent::upgradeBlocksToBlockHandles(a1);
  if (*((_QWORD *)a1 + 6) <= a2)
  {
    re::ecs2::MaterialParameterBlockArrayComponent::resizeBlockHandles(a1, a2 + 1);
    re::ecs2::Component::enqueueMarkDirty((uint64_t)a1);
  }
  if (*((_QWORD *)a1 + 11) <= a2)
  {
    re::DynamicArray<re::SharedPtr<re::Shareable<re::AssetLoadDescriptor>>>::resize((uint64_t)a1 + 72, a2 + 1);
    re::ecs2::Component::enqueueMarkDirty((uint64_t)a1);
  }
  if (*((_QWORD *)a1 + 6) <= a2)
  {
    v21 = 0u;
    v22 = 0u;
    v19 = 0u;
    v20 = 0u;
    v18 = 0u;
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
    goto LABEL_15;
  }
  v8 = *((_QWORD *)a1 + 8);
  v9 = (const re::ecs2::SerializableMaterialParameterBlock **)(v8 + 24 * a2);
  v10 = v9 + 1;
  isUniquelyReferenced = objc_isUniquelyReferenced();
  if ((isUniquelyReferenced & 1) == 0)
  {
    if (*v9)
      v12 = *v9;
    else
      v12 = *v10;
    v13 = re::globalAllocators((re *)isUniquelyReferenced);
    v14 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v13[2] + 32))(v13[2], 408, 8);
    re::ecs2::SerializableMaterialParameterBlock::SerializableMaterialParameterBlock((re::ecs2::SerializableMaterialParameterBlock *)v14, v12);
    ++*(_DWORD *)(v8 + 24 * a2 + 16);
    re::SharedPtr<re::SkeletalPoseJointDefinition>::reset((uint64_t *)(v8 + 24 * a2), v14);
    *v10 = 0;
    if (v14)

  }
  if (*((_QWORD *)a1 + 6) <= a2)
  {
LABEL_15:
    v21 = 0u;
    v22 = 0u;
    v19 = 0u;
    v20 = 0u;
    v18 = 0u;
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  v15 = *((_QWORD *)a1 + 8) + 24 * a2;
  ++*(_DWORD *)(v15 + 16);
  v16 = *(_QWORD *)v15;
  *(double *)&v18 = a4;
  re::ecs2::SerializableMaterialParameterBlock::setValue<void const*>(v16, (StringID *)(a3 + 24), 32, (unsigned __int8 *)&v18);
  ++*(_DWORD *)(v16 + 400);
  return re::ecs2::Component::enqueueMarkDirty((uint64_t)a1);
}

uint64_t REMaterialParameterBlockArrayComponentGetFloat2AtIndex(re::ecs2::MaterialParameterBlockArrayComponent *a1, unint64_t a2, const char *a3, _QWORD *a4)
{
  unint64_t v8;
  uint64_t v9;
  re::ecs2::SerializableMaterialParameterBlock *v10;
  uint64_t result;
  uint64_t v12;
  _QWORD v13[3];
  int v14;
  const char *v15;
  __int16 v16;
  int v17;
  __int16 v18;
  unint64_t v19;
  __int16 v20;
  unint64_t v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  uint64_t v27;

  v27 = *MEMORY[0x24BDAC8D0];
  re::ecs2::MaterialParameterBlockArrayComponent::upgradeBlocksToBlockHandles(a1);
  if (*((_QWORD *)a1 + 6) <= a2)
  {
    re::ecs2::MaterialParameterBlockArrayComponent::resizeBlockHandles(a1, a2 + 1);
    re::ecs2::Component::enqueueMarkDirty((uint64_t)a1);
  }
  if (*((_QWORD *)a1 + 11) <= a2)
  {
    re::DynamicArray<re::SharedPtr<re::Shareable<re::AssetLoadDescriptor>>>::resize((uint64_t)a1 + 72, a2 + 1);
    re::ecs2::Component::enqueueMarkDirty((uint64_t)a1);
  }
  v8 = *((_QWORD *)a1 + 6);
  if (v8 <= a2)
  {
    v13[0] = 0;
    v26 = 0u;
    v24 = 0u;
    v25 = 0u;
    v22 = 0u;
    v23 = 0u;
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    v14 = 136315906;
    v15 = "operator[]";
    v16 = 1024;
    v17 = 789;
    v18 = 2048;
    v19 = a2;
    v20 = 2048;
    v21 = v8;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
    goto LABEL_19;
  }
  v9 = *((_QWORD *)a1 + 8);
  v10 = *(re::ecs2::SerializableMaterialParameterBlock **)(v9 + 24 * a2);
  if (!v10)
    v10 = *(re::ecs2::SerializableMaterialParameterBlock **)(v9 + 24 * a2 + 8);
  re::ecs2::SerializableMaterialParameterBlock::vector2FValue(v10, a3, (uint64_t)v13);
  if (LOBYTE(v13[0]))
  {
    *a4 = v13[1];
    return 1;
  }
  v8 = *((_QWORD *)a1 + 11);
  if (v8 <= a2)
  {
LABEL_19:
    v13[2] = 0;
    v26 = 0u;
    v24 = 0u;
    v25 = 0u;
    v22 = 0u;
    v23 = 0u;
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    v14 = 136315906;
    v15 = "operator[]";
    v16 = 1024;
    v17 = 789;
    v18 = 2048;
    v19 = a2;
    v20 = 2048;
    v21 = v8;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  v12 = *((_QWORD *)a1 + 13);
  result = *(_QWORD *)(v12 + 8 * a2);
  if (result)
  {
    re::MaterialParameterBlock::handle((re::MaterialParameterBlock *)result, a3, (uint64_t)&v22);
    if ((BYTE12(v22) & 7) != 1 || BYTE8(v23) != 32)
      return 0;
    *a4 = *(_QWORD *)re::ShaderGraphMaterial::getConstant(*(_QWORD *)(v12 + 8 * a2), (uint64_t)&v22);
    return 1;
  }
  return result;
}

uint64_t REMaterialParameterBlockArrayComponentSetInt2AtIndex(re::ecs2::MaterialParameterBlockArrayComponent *a1, unint64_t a2, char *a3, double a4)
{
  uint64_t v8;
  const re::ecs2::SerializableMaterialParameterBlock **v9;
  const re::ecs2::SerializableMaterialParameterBlock **v10;
  uint64_t isUniquelyReferenced;
  const re::ecs2::SerializableMaterialParameterBlock *v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  uint64_t v23;

  v23 = *MEMORY[0x24BDAC8D0];
  re::ecs2::MaterialParameterBlockArrayComponent::upgradeBlocksToBlockHandles(a1);
  if (*((_QWORD *)a1 + 6) <= a2)
  {
    re::ecs2::MaterialParameterBlockArrayComponent::resizeBlockHandles(a1, a2 + 1);
    re::ecs2::Component::enqueueMarkDirty((uint64_t)a1);
  }
  if (*((_QWORD *)a1 + 11) <= a2)
  {
    re::DynamicArray<re::SharedPtr<re::Shareable<re::AssetLoadDescriptor>>>::resize((uint64_t)a1 + 72, a2 + 1);
    re::ecs2::Component::enqueueMarkDirty((uint64_t)a1);
  }
  if (*((_QWORD *)a1 + 6) <= a2)
  {
    v21 = 0u;
    v22 = 0u;
    v19 = 0u;
    v20 = 0u;
    v18 = 0u;
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
    goto LABEL_15;
  }
  v8 = *((_QWORD *)a1 + 8);
  v9 = (const re::ecs2::SerializableMaterialParameterBlock **)(v8 + 24 * a2);
  v10 = v9 + 1;
  isUniquelyReferenced = objc_isUniquelyReferenced();
  if ((isUniquelyReferenced & 1) == 0)
  {
    if (*v9)
      v12 = *v9;
    else
      v12 = *v10;
    v13 = re::globalAllocators((re *)isUniquelyReferenced);
    v14 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v13[2] + 32))(v13[2], 408, 8);
    re::ecs2::SerializableMaterialParameterBlock::SerializableMaterialParameterBlock((re::ecs2::SerializableMaterialParameterBlock *)v14, v12);
    ++*(_DWORD *)(v8 + 24 * a2 + 16);
    re::SharedPtr<re::SkeletalPoseJointDefinition>::reset((uint64_t *)(v8 + 24 * a2), v14);
    *v10 = 0;
    if (v14)

  }
  if (*((_QWORD *)a1 + 6) <= a2)
  {
LABEL_15:
    v21 = 0u;
    v22 = 0u;
    v19 = 0u;
    v20 = 0u;
    v18 = 0u;
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  v15 = *((_QWORD *)a1 + 8) + 24 * a2;
  ++*(_DWORD *)(v15 + 16);
  v16 = *(_QWORD *)v15;
  *(double *)&v18 = a4;
  re::ecs2::SerializableMaterialParameterBlock::setValue<void const*>(v16, a3, 4, (unsigned __int8 *)&v18);
  ++*(_DWORD *)(v16 + 400);
  return re::ecs2::Component::enqueueMarkDirty((uint64_t)a1);
}

uint64_t REMaterialParameterBlockArrayComponentSetInt2WithHandleAtIndex(re::ecs2::MaterialParameterBlockArrayComponent *a1, unint64_t a2, uint64_t a3, double a4)
{
  uint64_t v8;
  const re::ecs2::SerializableMaterialParameterBlock **v9;
  const re::ecs2::SerializableMaterialParameterBlock **v10;
  uint64_t isUniquelyReferenced;
  const re::ecs2::SerializableMaterialParameterBlock *v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  uint64_t v23;

  v23 = *MEMORY[0x24BDAC8D0];
  re::ecs2::MaterialParameterBlockArrayComponent::upgradeBlocksToBlockHandles(a1);
  if (*((_QWORD *)a1 + 6) <= a2)
  {
    re::ecs2::MaterialParameterBlockArrayComponent::resizeBlockHandles(a1, a2 + 1);
    re::ecs2::Component::enqueueMarkDirty((uint64_t)a1);
  }
  if (*((_QWORD *)a1 + 11) <= a2)
  {
    re::DynamicArray<re::SharedPtr<re::Shareable<re::AssetLoadDescriptor>>>::resize((uint64_t)a1 + 72, a2 + 1);
    re::ecs2::Component::enqueueMarkDirty((uint64_t)a1);
  }
  if (*((_QWORD *)a1 + 6) <= a2)
  {
    v21 = 0u;
    v22 = 0u;
    v19 = 0u;
    v20 = 0u;
    v18 = 0u;
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
    goto LABEL_15;
  }
  v8 = *((_QWORD *)a1 + 8);
  v9 = (const re::ecs2::SerializableMaterialParameterBlock **)(v8 + 24 * a2);
  v10 = v9 + 1;
  isUniquelyReferenced = objc_isUniquelyReferenced();
  if ((isUniquelyReferenced & 1) == 0)
  {
    if (*v9)
      v12 = *v9;
    else
      v12 = *v10;
    v13 = re::globalAllocators((re *)isUniquelyReferenced);
    v14 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v13[2] + 32))(v13[2], 408, 8);
    re::ecs2::SerializableMaterialParameterBlock::SerializableMaterialParameterBlock((re::ecs2::SerializableMaterialParameterBlock *)v14, v12);
    ++*(_DWORD *)(v8 + 24 * a2 + 16);
    re::SharedPtr<re::SkeletalPoseJointDefinition>::reset((uint64_t *)(v8 + 24 * a2), v14);
    *v10 = 0;
    if (v14)

  }
  if (*((_QWORD *)a1 + 6) <= a2)
  {
LABEL_15:
    v21 = 0u;
    v22 = 0u;
    v19 = 0u;
    v20 = 0u;
    v18 = 0u;
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  v15 = *((_QWORD *)a1 + 8) + 24 * a2;
  ++*(_DWORD *)(v15 + 16);
  v16 = *(_QWORD *)v15;
  *(double *)&v18 = a4;
  re::ecs2::SerializableMaterialParameterBlock::setValue<void const*>(v16, (StringID *)(a3 + 24), 4, (unsigned __int8 *)&v18);
  ++*(_DWORD *)(v16 + 400);
  return re::ecs2::Component::enqueueMarkDirty((uint64_t)a1);
}

re::MaterialParameterBlock *REMaterialParameterBlockArrayComponentGetInt2AtIndex(re::ecs2::MaterialParameterBlockArrayComponent *a1, unint64_t a2, const char *a3, _QWORD *a4)
{
  unint64_t v8;
  uint64_t v9;
  re::ecs2::SerializableMaterialParameterBlock *v10;
  uint64_t v11;
  re::MaterialParameterBlock *result;
  uint64_t v13;
  _QWORD v14[3];
  int v15;
  const char *v16;
  __int16 v17;
  int v18;
  __int16 v19;
  unint64_t v20;
  __int16 v21;
  unint64_t v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  uint64_t v28;

  v28 = *MEMORY[0x24BDAC8D0];
  re::ecs2::MaterialParameterBlockArrayComponent::upgradeBlocksToBlockHandles(a1);
  if (*((_QWORD *)a1 + 6) <= a2)
  {
    re::ecs2::MaterialParameterBlockArrayComponent::resizeBlockHandles(a1, a2 + 1);
    re::ecs2::Component::enqueueMarkDirty((uint64_t)a1);
  }
  if (*((_QWORD *)a1 + 11) <= a2)
  {
    re::DynamicArray<re::SharedPtr<re::Shareable<re::AssetLoadDescriptor>>>::resize((uint64_t)a1 + 72, a2 + 1);
    re::ecs2::Component::enqueueMarkDirty((uint64_t)a1);
  }
  v8 = *((_QWORD *)a1 + 6);
  if (v8 <= a2)
  {
    v14[0] = 0;
    v27 = 0u;
    v25 = 0u;
    v26 = 0u;
    v23 = 0u;
    v24 = 0u;
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    v15 = 136315906;
    v16 = "operator[]";
    v17 = 1024;
    v18 = 789;
    v19 = 2048;
    v20 = a2;
    v21 = 2048;
    v22 = v8;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
    goto LABEL_19;
  }
  v9 = *((_QWORD *)a1 + 8);
  v10 = *(re::ecs2::SerializableMaterialParameterBlock **)(v9 + 24 * a2);
  if (!v10)
    v10 = *(re::ecs2::SerializableMaterialParameterBlock **)(v9 + 24 * a2 + 8);
  re::ecs2::SerializableMaterialParameterBlock::int2Value(v10, a3, (uint64_t)v14);
  if (LOBYTE(v14[0]))
  {
    v11 = v14[1];
LABEL_10:
    *a4 = v11;
    return (re::MaterialParameterBlock *)1;
  }
  v8 = *((_QWORD *)a1 + 11);
  if (v8 <= a2)
  {
LABEL_19:
    v14[2] = 0;
    v27 = 0u;
    v25 = 0u;
    v26 = 0u;
    v23 = 0u;
    v24 = 0u;
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    v15 = 136315906;
    v16 = "operator[]";
    v17 = 1024;
    v18 = 789;
    v19 = 2048;
    v20 = a2;
    v21 = 2048;
    v22 = v8;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  v13 = *((_QWORD *)a1 + 13);
  result = *(re::MaterialParameterBlock **)(v13 + 8 * a2);
  if (result)
  {
    re::MaterialParameterBlock::handle(result, a3, (uint64_t)&v23);
    if ((BYTE12(v23) & 7) != 1 || BYTE8(v24) != 4)
      return 0;
    v11 = *(_QWORD *)re::ShaderGraphMaterial::getConstant(*(_QWORD *)(v13 + 8 * a2), (uint64_t)&v23);
    goto LABEL_10;
  }
  return result;
}

uint64_t REMaterialParameterBlockArrayComponentSetUInt2AtIndex(re::ecs2::MaterialParameterBlockArrayComponent *a1, unint64_t a2, char *a3, double a4)
{
  uint64_t v8;
  const re::ecs2::SerializableMaterialParameterBlock **v9;
  const re::ecs2::SerializableMaterialParameterBlock **v10;
  uint64_t isUniquelyReferenced;
  const re::ecs2::SerializableMaterialParameterBlock *v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  uint64_t v23;

  v23 = *MEMORY[0x24BDAC8D0];
  re::ecs2::MaterialParameterBlockArrayComponent::upgradeBlocksToBlockHandles(a1);
  if (*((_QWORD *)a1 + 6) <= a2)
  {
    re::ecs2::MaterialParameterBlockArrayComponent::resizeBlockHandles(a1, a2 + 1);
    re::ecs2::Component::enqueueMarkDirty((uint64_t)a1);
  }
  if (*((_QWORD *)a1 + 11) <= a2)
  {
    re::DynamicArray<re::SharedPtr<re::Shareable<re::AssetLoadDescriptor>>>::resize((uint64_t)a1 + 72, a2 + 1);
    re::ecs2::Component::enqueueMarkDirty((uint64_t)a1);
  }
  if (*((_QWORD *)a1 + 6) <= a2)
  {
    v21 = 0u;
    v22 = 0u;
    v19 = 0u;
    v20 = 0u;
    v18 = 0u;
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
    goto LABEL_15;
  }
  v8 = *((_QWORD *)a1 + 8);
  v9 = (const re::ecs2::SerializableMaterialParameterBlock **)(v8 + 24 * a2);
  v10 = v9 + 1;
  isUniquelyReferenced = objc_isUniquelyReferenced();
  if ((isUniquelyReferenced & 1) == 0)
  {
    if (*v9)
      v12 = *v9;
    else
      v12 = *v10;
    v13 = re::globalAllocators((re *)isUniquelyReferenced);
    v14 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v13[2] + 32))(v13[2], 408, 8);
    re::ecs2::SerializableMaterialParameterBlock::SerializableMaterialParameterBlock((re::ecs2::SerializableMaterialParameterBlock *)v14, v12);
    ++*(_DWORD *)(v8 + 24 * a2 + 16);
    re::SharedPtr<re::SkeletalPoseJointDefinition>::reset((uint64_t *)(v8 + 24 * a2), v14);
    *v10 = 0;
    if (v14)

  }
  if (*((_QWORD *)a1 + 6) <= a2)
  {
LABEL_15:
    v21 = 0u;
    v22 = 0u;
    v19 = 0u;
    v20 = 0u;
    v18 = 0u;
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  v15 = *((_QWORD *)a1 + 8) + 24 * a2;
  ++*(_DWORD *)(v15 + 16);
  v16 = *(_QWORD *)v15;
  *(double *)&v18 = a4;
  re::ecs2::SerializableMaterialParameterBlock::setValue<void const*>(v16, a3, 8, (unsigned __int8 *)&v18);
  ++*(_DWORD *)(v16 + 400);
  return re::ecs2::Component::enqueueMarkDirty((uint64_t)a1);
}

uint64_t REMaterialParameterBlockArrayComponentSetUInt2WithHandleAtIndex(re::ecs2::MaterialParameterBlockArrayComponent *a1, unint64_t a2, uint64_t a3, double a4)
{
  uint64_t v8;
  const re::ecs2::SerializableMaterialParameterBlock **v9;
  const re::ecs2::SerializableMaterialParameterBlock **v10;
  uint64_t isUniquelyReferenced;
  const re::ecs2::SerializableMaterialParameterBlock *v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  uint64_t v23;

  v23 = *MEMORY[0x24BDAC8D0];
  re::ecs2::MaterialParameterBlockArrayComponent::upgradeBlocksToBlockHandles(a1);
  if (*((_QWORD *)a1 + 6) <= a2)
  {
    re::ecs2::MaterialParameterBlockArrayComponent::resizeBlockHandles(a1, a2 + 1);
    re::ecs2::Component::enqueueMarkDirty((uint64_t)a1);
  }
  if (*((_QWORD *)a1 + 11) <= a2)
  {
    re::DynamicArray<re::SharedPtr<re::Shareable<re::AssetLoadDescriptor>>>::resize((uint64_t)a1 + 72, a2 + 1);
    re::ecs2::Component::enqueueMarkDirty((uint64_t)a1);
  }
  if (*((_QWORD *)a1 + 6) <= a2)
  {
    v21 = 0u;
    v22 = 0u;
    v19 = 0u;
    v20 = 0u;
    v18 = 0u;
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
    goto LABEL_15;
  }
  v8 = *((_QWORD *)a1 + 8);
  v9 = (const re::ecs2::SerializableMaterialParameterBlock **)(v8 + 24 * a2);
  v10 = v9 + 1;
  isUniquelyReferenced = objc_isUniquelyReferenced();
  if ((isUniquelyReferenced & 1) == 0)
  {
    if (*v9)
      v12 = *v9;
    else
      v12 = *v10;
    v13 = re::globalAllocators((re *)isUniquelyReferenced);
    v14 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v13[2] + 32))(v13[2], 408, 8);
    re::ecs2::SerializableMaterialParameterBlock::SerializableMaterialParameterBlock((re::ecs2::SerializableMaterialParameterBlock *)v14, v12);
    ++*(_DWORD *)(v8 + 24 * a2 + 16);
    re::SharedPtr<re::SkeletalPoseJointDefinition>::reset((uint64_t *)(v8 + 24 * a2), v14);
    *v10 = 0;
    if (v14)

  }
  if (*((_QWORD *)a1 + 6) <= a2)
  {
LABEL_15:
    v21 = 0u;
    v22 = 0u;
    v19 = 0u;
    v20 = 0u;
    v18 = 0u;
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  v15 = *((_QWORD *)a1 + 8) + 24 * a2;
  ++*(_DWORD *)(v15 + 16);
  v16 = *(_QWORD *)v15;
  *(double *)&v18 = a4;
  re::ecs2::SerializableMaterialParameterBlock::setValue<void const*>(v16, (StringID *)(a3 + 24), 8, (unsigned __int8 *)&v18);
  ++*(_DWORD *)(v16 + 400);
  return re::ecs2::Component::enqueueMarkDirty((uint64_t)a1);
}

re::MaterialParameterBlock *REMaterialParameterBlockArrayComponentGetUInt2AtIndex(re::ecs2::MaterialParameterBlockArrayComponent *a1, unint64_t a2, const char *a3, _QWORD *a4)
{
  unint64_t v8;
  uint64_t v9;
  re::ecs2::SerializableMaterialParameterBlock *v10;
  uint64_t v11;
  re::MaterialParameterBlock *result;
  uint64_t v13;
  _QWORD v14[3];
  int v15;
  const char *v16;
  __int16 v17;
  int v18;
  __int16 v19;
  unint64_t v20;
  __int16 v21;
  unint64_t v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  uint64_t v28;

  v28 = *MEMORY[0x24BDAC8D0];
  re::ecs2::MaterialParameterBlockArrayComponent::upgradeBlocksToBlockHandles(a1);
  if (*((_QWORD *)a1 + 6) <= a2)
  {
    re::ecs2::MaterialParameterBlockArrayComponent::resizeBlockHandles(a1, a2 + 1);
    re::ecs2::Component::enqueueMarkDirty((uint64_t)a1);
  }
  if (*((_QWORD *)a1 + 11) <= a2)
  {
    re::DynamicArray<re::SharedPtr<re::Shareable<re::AssetLoadDescriptor>>>::resize((uint64_t)a1 + 72, a2 + 1);
    re::ecs2::Component::enqueueMarkDirty((uint64_t)a1);
  }
  v8 = *((_QWORD *)a1 + 6);
  if (v8 <= a2)
  {
    v14[0] = 0;
    v27 = 0u;
    v25 = 0u;
    v26 = 0u;
    v23 = 0u;
    v24 = 0u;
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    v15 = 136315906;
    v16 = "operator[]";
    v17 = 1024;
    v18 = 789;
    v19 = 2048;
    v20 = a2;
    v21 = 2048;
    v22 = v8;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
    goto LABEL_19;
  }
  v9 = *((_QWORD *)a1 + 8);
  v10 = *(re::ecs2::SerializableMaterialParameterBlock **)(v9 + 24 * a2);
  if (!v10)
    v10 = *(re::ecs2::SerializableMaterialParameterBlock **)(v9 + 24 * a2 + 8);
  re::ecs2::SerializableMaterialParameterBlock::uint2Value(v10, a3, (uint64_t)v14);
  if (LOBYTE(v14[0]))
  {
    v11 = v14[1];
LABEL_10:
    *a4 = v11;
    return (re::MaterialParameterBlock *)1;
  }
  v8 = *((_QWORD *)a1 + 11);
  if (v8 <= a2)
  {
LABEL_19:
    v14[2] = 0;
    v27 = 0u;
    v25 = 0u;
    v26 = 0u;
    v23 = 0u;
    v24 = 0u;
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    v15 = 136315906;
    v16 = "operator[]";
    v17 = 1024;
    v18 = 789;
    v19 = 2048;
    v20 = a2;
    v21 = 2048;
    v22 = v8;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  v13 = *((_QWORD *)a1 + 13);
  result = *(re::MaterialParameterBlock **)(v13 + 8 * a2);
  if (result)
  {
    re::MaterialParameterBlock::handle(result, a3, (uint64_t)&v23);
    if ((BYTE12(v23) & 7) != 1 || BYTE8(v24) != 8)
      return 0;
    v11 = *(_QWORD *)re::ShaderGraphMaterial::getConstant(*(_QWORD *)(v13 + 8 * a2), (uint64_t)&v23);
    goto LABEL_10;
  }
  return result;
}

uint64_t REMaterialParameterBlockArrayComponentSetFloat3AtIndex(re::ecs2::MaterialParameterBlockArrayComponent *a1, unint64_t a2, char *a3, __n128 a4)
{
  uint64_t v7;
  const re::ecs2::SerializableMaterialParameterBlock **v8;
  const re::ecs2::SerializableMaterialParameterBlock **v9;
  uint64_t isUniquelyReferenced;
  const re::ecs2::SerializableMaterialParameterBlock *v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  __n128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  uint64_t v23;

  v23 = *MEMORY[0x24BDAC8D0];
  re::ecs2::MaterialParameterBlockArrayComponent::upgradeBlocksToBlockHandles(a1);
  if (*((_QWORD *)a1 + 6) <= a2)
  {
    re::ecs2::MaterialParameterBlockArrayComponent::resizeBlockHandles(a1, a2 + 1);
    re::ecs2::Component::enqueueMarkDirty((uint64_t)a1);
  }
  if (*((_QWORD *)a1 + 11) <= a2)
  {
    re::DynamicArray<re::SharedPtr<re::Shareable<re::AssetLoadDescriptor>>>::resize((uint64_t)a1 + 72, a2 + 1);
    re::ecs2::Component::enqueueMarkDirty((uint64_t)a1);
  }
  if (*((_QWORD *)a1 + 6) <= a2)
  {
    v21 = 0u;
    v22 = 0u;
    v19 = 0u;
    v20 = 0u;
    v18 = 0u;
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
    goto LABEL_15;
  }
  v7 = *((_QWORD *)a1 + 8);
  v8 = (const re::ecs2::SerializableMaterialParameterBlock **)(v7 + 24 * a2);
  v9 = v8 + 1;
  isUniquelyReferenced = objc_isUniquelyReferenced();
  if ((isUniquelyReferenced & 1) == 0)
  {
    if (*v8)
      v11 = *v8;
    else
      v11 = *v9;
    v12 = re::globalAllocators((re *)isUniquelyReferenced);
    v13 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v12[2] + 32))(v12[2], 408, 8);
    re::ecs2::SerializableMaterialParameterBlock::SerializableMaterialParameterBlock((re::ecs2::SerializableMaterialParameterBlock *)v13, v11);
    ++*(_DWORD *)(v7 + 24 * a2 + 16);
    re::SharedPtr<re::SkeletalPoseJointDefinition>::reset((uint64_t *)(v7 + 24 * a2), v13);
    *v9 = 0;
    if (v13)

  }
  if (*((_QWORD *)a1 + 6) <= a2)
  {
LABEL_15:
    v21 = 0u;
    v22 = 0u;
    v19 = 0u;
    v20 = 0u;
    v18 = 0u;
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  v14 = *((_QWORD *)a1 + 8) + 24 * a2;
  ++*(_DWORD *)(v14 + 16);
  v15 = *(_QWORD *)v14;
  v18 = a4;
  re::ecs2::SerializableMaterialParameterBlock::setValue<void const*>(v15, a3, 33, (unsigned __int8 *)&v18);
  ++*(_DWORD *)(v15 + 400);
  return re::ecs2::Component::enqueueMarkDirty((uint64_t)a1);
}

uint64_t REMaterialParameterBlockArrayComponentSetFloat3WithHandleAtIndex(re::ecs2::MaterialParameterBlockArrayComponent *a1, unint64_t a2, uint64_t a3, __n128 a4)
{
  uint64_t v7;
  const re::ecs2::SerializableMaterialParameterBlock **v8;
  const re::ecs2::SerializableMaterialParameterBlock **v9;
  uint64_t isUniquelyReferenced;
  const re::ecs2::SerializableMaterialParameterBlock *v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  __n128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  uint64_t v23;

  v23 = *MEMORY[0x24BDAC8D0];
  re::ecs2::MaterialParameterBlockArrayComponent::upgradeBlocksToBlockHandles(a1);
  if (*((_QWORD *)a1 + 6) <= a2)
  {
    re::ecs2::MaterialParameterBlockArrayComponent::resizeBlockHandles(a1, a2 + 1);
    re::ecs2::Component::enqueueMarkDirty((uint64_t)a1);
  }
  if (*((_QWORD *)a1 + 11) <= a2)
  {
    re::DynamicArray<re::SharedPtr<re::Shareable<re::AssetLoadDescriptor>>>::resize((uint64_t)a1 + 72, a2 + 1);
    re::ecs2::Component::enqueueMarkDirty((uint64_t)a1);
  }
  if (*((_QWORD *)a1 + 6) <= a2)
  {
    v21 = 0u;
    v22 = 0u;
    v19 = 0u;
    v20 = 0u;
    v18 = 0u;
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
    goto LABEL_15;
  }
  v7 = *((_QWORD *)a1 + 8);
  v8 = (const re::ecs2::SerializableMaterialParameterBlock **)(v7 + 24 * a2);
  v9 = v8 + 1;
  isUniquelyReferenced = objc_isUniquelyReferenced();
  if ((isUniquelyReferenced & 1) == 0)
  {
    if (*v8)
      v11 = *v8;
    else
      v11 = *v9;
    v12 = re::globalAllocators((re *)isUniquelyReferenced);
    v13 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v12[2] + 32))(v12[2], 408, 8);
    re::ecs2::SerializableMaterialParameterBlock::SerializableMaterialParameterBlock((re::ecs2::SerializableMaterialParameterBlock *)v13, v11);
    ++*(_DWORD *)(v7 + 24 * a2 + 16);
    re::SharedPtr<re::SkeletalPoseJointDefinition>::reset((uint64_t *)(v7 + 24 * a2), v13);
    *v9 = 0;
    if (v13)

  }
  if (*((_QWORD *)a1 + 6) <= a2)
  {
LABEL_15:
    v21 = 0u;
    v22 = 0u;
    v19 = 0u;
    v20 = 0u;
    v18 = 0u;
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  v14 = *((_QWORD *)a1 + 8) + 24 * a2;
  ++*(_DWORD *)(v14 + 16);
  v15 = *(_QWORD *)v14;
  v18 = a4;
  re::ecs2::SerializableMaterialParameterBlock::setValue<void const*>(v15, (StringID *)(a3 + 24), 33, (unsigned __int8 *)&v18);
  ++*(_DWORD *)(v15 + 400);
  return re::ecs2::Component::enqueueMarkDirty((uint64_t)a1);
}

uint64_t REMaterialParameterBlockArrayComponentGetFloat3AtIndex(re::ecs2::MaterialParameterBlockArrayComponent *a1, unint64_t a2, const char *a3, _OWORD *a4)
{
  unint64_t v8;
  uint64_t v9;
  re::ecs2::SerializableMaterialParameterBlock *v10;
  __int128 v11;
  uint64_t v12;
  uint64_t v13;
  re::ecs2::SerializableMaterialParameterBlock *v14;
  NSObject *v15;
  __int128 v16;
  int v17;
  unint64_t v18;
  uint64_t v19;
  re::MaterialParameterBlock *v20;
  _QWORD v22[3];
  uint64_t v23;
  __int128 v24;
  uint64_t v25;
  int v26;
  const char *v27;
  __int16 v28;
  int v29;
  __int16 v30;
  unint64_t v31;
  __int16 v32;
  unint64_t v33;
  uint8_t buf[16];
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  uint64_t v39;

  v39 = *MEMORY[0x24BDAC8D0];
  re::ecs2::MaterialParameterBlockArrayComponent::upgradeBlocksToBlockHandles(a1);
  if (*((_QWORD *)a1 + 6) <= a2)
  {
    re::ecs2::MaterialParameterBlockArrayComponent::resizeBlockHandles(a1, a2 + 1);
    re::ecs2::Component::enqueueMarkDirty((uint64_t)a1);
  }
  if (*((_QWORD *)a1 + 11) <= a2)
  {
    re::DynamicArray<re::SharedPtr<re::Shareable<re::AssetLoadDescriptor>>>::resize((uint64_t)a1 + 72, a2 + 1);
    re::ecs2::Component::enqueueMarkDirty((uint64_t)a1);
  }
  v8 = *((_QWORD *)a1 + 6);
  if (v8 <= a2)
  {
    v23 = 0;
    v37 = 0u;
    v38 = 0u;
    v35 = 0u;
    v36 = 0u;
    *(_OWORD *)buf = 0u;
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    v26 = 136315906;
    v27 = "operator[]";
    v28 = 1024;
    v29 = 789;
    v30 = 2048;
    v31 = a2;
    v32 = 2048;
    v33 = v8;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_27:
    v22[0] = 0;
    v37 = 0u;
    v38 = 0u;
    v35 = 0u;
    v36 = 0u;
    *(_OWORD *)buf = 0u;
    a4 = (_OWORD *)MEMORY[0x24BDACB70];
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    v26 = 136315906;
    v27 = "operator[]";
    v28 = 1024;
    v29 = 789;
    v30 = 2048;
    v31 = a2;
    v32 = 2048;
    v33 = v8;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_28:
    dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
    goto LABEL_16;
  }
  v9 = *((_QWORD *)a1 + 8);
  v10 = *(re::ecs2::SerializableMaterialParameterBlock **)(v9 + 24 * a2);
  if (!v10)
    v10 = *(re::ecs2::SerializableMaterialParameterBlock **)(v9 + 24 * a2 + 8);
  re::ecs2::SerializableMaterialParameterBlock::vector3FValue(v10, a3, (uint64_t)&v23);
  if ((_BYTE)v23)
  {
    v11 = v24;
LABEL_10:
    *a4 = v11;
    return 1;
  }
  v8 = *((_QWORD *)a1 + 6);
  if (v8 <= a2)
    goto LABEL_27;
  v13 = *((_QWORD *)a1 + 8);
  v14 = *(re::ecs2::SerializableMaterialParameterBlock **)(v13 + 24 * a2);
  if (!v14)
    v14 = *(re::ecs2::SerializableMaterialParameterBlock **)(v13 + 24 * a2 + 8);
  re::ecs2::SerializableMaterialParameterBlock::colorGamut3FValue(v14, a3, (uint64_t)v22);
  if (!LOBYTE(v22[0]))
  {
    v18 = *((_QWORD *)a1 + 11);
    if (v18 <= a2)
    {
      v25 = 0;
      v37 = 0u;
      v38 = 0u;
      v35 = 0u;
      v36 = 0u;
      *(_OWORD *)buf = 0u;
      os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      v26 = 136315906;
      v27 = "operator[]";
      v28 = 1024;
      v29 = 789;
      v30 = 2048;
      v31 = a2;
      v32 = 2048;
      v33 = v18;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
    }
    v19 = *((_QWORD *)a1 + 13);
    v20 = *(re::MaterialParameterBlock **)(v19 + 8 * a2);
    if (!v20)
      return 0;
    re::MaterialParameterBlock::handle(v20, a3, (uint64_t)buf);
    if ((buf[12] & 7) != 1 || BYTE8(v35) != 33)
      return 0;
    v11 = *(_OWORD *)re::ShaderGraphMaterial::getConstant(*(_QWORD *)(v19 + 8 * a2), (uint64_t)buf);
    goto LABEL_10;
  }
  if (CoreRELog::onceToken != -1)
    goto LABEL_28;
LABEL_16:
  v15 = (id)CoreRELog::log;
  if (os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl(&dword_224FE9000, v15, OS_LOG_TYPE_DEFAULT, "REMaterialParameterBlockArrayComponentGetFloat3AtIndex was called for parameter of type Color3.To get the right color space context for the color value, REMaterialParameterBlockArrayComponentGetColor3AtIndex should be used instead.", buf, 2u);
  }

  v12 = 1;
  *(_QWORD *)&v16 = re::ColorGamut3F::as((_QWORD *)((char *)v22 + 4), 0, 1);
  DWORD2(v16) = v17;
  *a4 = v16;
  return v12;
}

uint64_t REMaterialParameterBlockArrayComponentSetColor3AtIndex(re::ecs2::MaterialParameterBlockArrayComponent *a1, unint64_t a2, char *a3, unsigned int a4, int8x16_t a5)
{
  uint64_t v9;
  const re::ecs2::SerializableMaterialParameterBlock **v10;
  const re::ecs2::SerializableMaterialParameterBlock **v11;
  uint64_t isUniquelyReferenced;
  const re::ecs2::SerializableMaterialParameterBlock *v13;
  uint64_t *v14;
  uint64_t v15;
  int32x2_t v16;
  int8x16_t v17;
  int64x2_t v18;
  int8x16_t v19;
  uint64_t v20;

  re::ecs2::MaterialParameterBlockArrayComponent::upgradeBlocksToBlockHandles(a1);
  if (*((_QWORD *)a1 + 6) <= a2)
  {
    re::ecs2::MaterialParameterBlockArrayComponent::resizeBlockHandles(a1, a2 + 1);
    re::ecs2::Component::enqueueMarkDirty((uint64_t)a1);
  }
  if (*((_QWORD *)a1 + 11) <= a2)
  {
    re::DynamicArray<re::SharedPtr<re::Shareable<re::AssetLoadDescriptor>>>::resize((uint64_t)a1 + 72, a2 + 1);
    re::ecs2::Component::enqueueMarkDirty((uint64_t)a1);
  }
  if (*((_QWORD *)a1 + 6) <= a2)
  {
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
    goto LABEL_15;
  }
  v9 = *((_QWORD *)a1 + 8);
  v10 = (const re::ecs2::SerializableMaterialParameterBlock **)(v9 + 24 * a2);
  v11 = v10 + 1;
  isUniquelyReferenced = objc_isUniquelyReferenced();
  if ((isUniquelyReferenced & 1) == 0)
  {
    if (*v10)
      v13 = *v10;
    else
      v13 = *v11;
    v14 = re::globalAllocators((re *)isUniquelyReferenced);
    v15 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v14[2] + 32))(v14[2], 408, 8);
    re::ecs2::SerializableMaterialParameterBlock::SerializableMaterialParameterBlock((re::ecs2::SerializableMaterialParameterBlock *)v15, v13);
    ++*(_DWORD *)(v9 + 24 * a2 + 16);
    re::SharedPtr<re::SkeletalPoseJointDefinition>::reset((uint64_t *)(v9 + 24 * a2), v15);
    *v11 = 0;
    if (v15)

  }
  if (*((_QWORD *)a1 + 6) <= a2)
  {
LABEL_15:
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  v16 = vzip1_s32(*(int32x2_t *)a5.i8, (int32x2_t)*(_OWORD *)&vextq_s8(a5, a5, 8uLL));
  v17.i64[0] = v16.u32[0];
  v17.i64[1] = v16.u32[1];
  v18.i64[0] = a5.u32[1];
  v18.i64[1] = a4;
  v19 = vorrq_s8((int8x16_t)vshlq_n_s64(v18, 0x20uLL), v17);
  v20 = *((_QWORD *)a1 + 8) + 24 * a2;
  ++*(_DWORD *)(v20 + 16);
  re::ecs2::SerializableMaterialParameterBlock::setColorGamut3F(*(_QWORD *)v20, a3, v19.i64[0], v19.i64[1]);
  return re::ecs2::Component::enqueueMarkDirty((uint64_t)a1);
}

uint64_t REMaterialParameterBlockArrayComponentSetColor3WithHandleAtIndex(re::ecs2::MaterialParameterBlockArrayComponent *a1, unint64_t a2, uint64_t a3, unsigned int a4, int8x16_t a5)
{
  uint64_t v9;
  const re::ecs2::SerializableMaterialParameterBlock **v10;
  const re::ecs2::SerializableMaterialParameterBlock **v11;
  uint64_t isUniquelyReferenced;
  const re::ecs2::SerializableMaterialParameterBlock *v13;
  uint64_t *v14;
  uint64_t v15;
  int32x2_t v16;
  int8x16_t v17;
  int64x2_t v18;
  int8x16_t v19;
  uint64_t v20;

  re::ecs2::MaterialParameterBlockArrayComponent::upgradeBlocksToBlockHandles(a1);
  if (*((_QWORD *)a1 + 6) <= a2)
  {
    re::ecs2::MaterialParameterBlockArrayComponent::resizeBlockHandles(a1, a2 + 1);
    re::ecs2::Component::enqueueMarkDirty((uint64_t)a1);
  }
  if (*((_QWORD *)a1 + 11) <= a2)
  {
    re::DynamicArray<re::SharedPtr<re::Shareable<re::AssetLoadDescriptor>>>::resize((uint64_t)a1 + 72, a2 + 1);
    re::ecs2::Component::enqueueMarkDirty((uint64_t)a1);
  }
  if (*((_QWORD *)a1 + 6) <= a2)
  {
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
    goto LABEL_15;
  }
  v9 = *((_QWORD *)a1 + 8);
  v10 = (const re::ecs2::SerializableMaterialParameterBlock **)(v9 + 24 * a2);
  v11 = v10 + 1;
  isUniquelyReferenced = objc_isUniquelyReferenced();
  if ((isUniquelyReferenced & 1) == 0)
  {
    if (*v10)
      v13 = *v10;
    else
      v13 = *v11;
    v14 = re::globalAllocators((re *)isUniquelyReferenced);
    v15 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v14[2] + 32))(v14[2], 408, 8);
    re::ecs2::SerializableMaterialParameterBlock::SerializableMaterialParameterBlock((re::ecs2::SerializableMaterialParameterBlock *)v15, v13);
    ++*(_DWORD *)(v9 + 24 * a2 + 16);
    re::SharedPtr<re::SkeletalPoseJointDefinition>::reset((uint64_t *)(v9 + 24 * a2), v15);
    *v11 = 0;
    if (v15)

  }
  if (*((_QWORD *)a1 + 6) <= a2)
  {
LABEL_15:
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  v16 = vzip1_s32(*(int32x2_t *)a5.i8, (int32x2_t)*(_OWORD *)&vextq_s8(a5, a5, 8uLL));
  v17.i64[0] = v16.u32[0];
  v17.i64[1] = v16.u32[1];
  v18.i64[0] = a5.u32[1];
  v18.i64[1] = a4;
  v19 = vorrq_s8((int8x16_t)vshlq_n_s64(v18, 0x20uLL), v17);
  v20 = *((_QWORD *)a1 + 8) + 24 * a2;
  ++*(_DWORD *)(v20 + 16);
  re::ecs2::SerializableMaterialParameterBlock::setColorGamut3F(*(_QWORD *)v20, (StringID *)(a3 + 24), v19.i64[0], v19.i64[1]);
  return re::ecs2::Component::enqueueMarkDirty((uint64_t)a1);
}

uint64_t REMaterialParameterBlockArrayComponentGetColor3AtIndex(re::ecs2::MaterialParameterBlockArrayComponent *a1, unint64_t a2, const char *a3, _OWORD *a4, _BYTE *a5)
{
  unint64_t v10;
  uint64_t v11;
  re::ecs2::SerializableMaterialParameterBlock *v12;
  char v13;
  uint64_t result;
  uint64_t v15;
  re::ecs2::SerializableMaterialParameterBlock *v16;
  int v17;
  uint64_t v19;
  __int128 v20;
  int v21;
  char v22;
  _QWORD v23[3];
  uint64_t v24;
  int v25;
  const char *v26;
  __int16 v27;
  int v28;
  __int16 v29;
  unint64_t v30;
  __int16 v31;
  unint64_t v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  uint64_t v38;

  v38 = *MEMORY[0x24BDAC8D0];
  re::ecs2::MaterialParameterBlockArrayComponent::upgradeBlocksToBlockHandles(a1);
  if (*((_QWORD *)a1 + 6) <= a2)
  {
    re::ecs2::MaterialParameterBlockArrayComponent::resizeBlockHandles(a1, a2 + 1);
    re::ecs2::Component::enqueueMarkDirty((uint64_t)a1);
  }
  if (*((_QWORD *)a1 + 11) <= a2)
  {
    re::DynamicArray<re::SharedPtr<re::Shareable<re::AssetLoadDescriptor>>>::resize((uint64_t)a1 + 72, a2 + 1);
    re::ecs2::Component::enqueueMarkDirty((uint64_t)a1);
  }
  v10 = *((_QWORD *)a1 + 6);
  if (v10 <= a2)
  {
    v23[0] = 0;
    v36 = 0u;
    v37 = 0u;
    v34 = 0u;
    v35 = 0u;
    v33 = 0u;
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    v25 = 136315906;
    v26 = "operator[]";
    v27 = 1024;
    v28 = 789;
    v29 = 2048;
    v30 = a2;
    v31 = 2048;
    v32 = v10;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_27:
    v24 = 0;
    v36 = 0u;
    v37 = 0u;
    v34 = 0u;
    v35 = 0u;
    v33 = 0u;
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    v25 = 136315906;
    v26 = "operator[]";
    v27 = 1024;
    v28 = 789;
    v29 = 2048;
    v30 = a2;
    v31 = 2048;
    v32 = v10;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
    goto LABEL_28;
  }
  v11 = *((_QWORD *)a1 + 8);
  v12 = *(re::ecs2::SerializableMaterialParameterBlock **)(v11 + 24 * a2);
  if (!v12)
    v12 = *(re::ecs2::SerializableMaterialParameterBlock **)(v11 + 24 * a2 + 8);
  re::ecs2::SerializableMaterialParameterBlock::colorGamut3FValue(v12, a3, (uint64_t)v23);
  if (LOBYTE(v23[0]))
  {
    v13 = v23[2];
    *a4 = *(_OWORD *)((char *)v23 + 4);
    *a5 = v13;
    return 1;
  }
  v10 = *((_QWORD *)a1 + 6);
  if (v10 <= a2)
    goto LABEL_27;
  v15 = *((_QWORD *)a1 + 8);
  v16 = *(re::ecs2::SerializableMaterialParameterBlock **)(v15 + 24 * a2);
  if (!v16)
    v16 = *(re::ecs2::SerializableMaterialParameterBlock **)(v15 + 24 * a2 + 8);
  v17 = re::ecs2::SerializableMaterialParameterBlock::valueType(v16, a3);
  if (v17 != 21 && v17 != 0)
    return 0;
  v10 = *((_QWORD *)a1 + 11);
  if (v10 <= a2)
  {
LABEL_28:
    v24 = 0;
    v36 = 0u;
    v37 = 0u;
    v34 = 0u;
    v35 = 0u;
    v33 = 0u;
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    v25 = 136315906;
    v26 = "operator[]";
    v27 = 1024;
    v28 = 789;
    v29 = 2048;
    v30 = a2;
    v31 = 2048;
    v32 = v10;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  v19 = *((_QWORD *)a1 + 13);
  result = *(_QWORD *)(v19 + 8 * a2);
  if (!result)
    return result;
  re::MaterialParameterBlock::handle((re::MaterialParameterBlock *)result, a3, (uint64_t)&v33);
  if ((BYTE12(v33) & 7) == 1 && BYTE8(v34) == 20)
  {
    *(_QWORD *)&v20 = re::MaterialParameterBlock::colorGamut3FValue(*(_QWORD *)(v19 + 8 * a2), (uint64_t)&v33);
    DWORD2(v20) = v21;
    *a4 = v20;
    *a5 = v22;
    return 1;
  }
  return 0;
}

uint64_t REMaterialParameterBlockArrayComponentSetInt3AtIndex(re::ecs2::MaterialParameterBlockArrayComponent *a1, unint64_t a2, char *a3, __n128 a4)
{
  uint64_t v7;
  const re::ecs2::SerializableMaterialParameterBlock **v8;
  const re::ecs2::SerializableMaterialParameterBlock **v9;
  uint64_t isUniquelyReferenced;
  const re::ecs2::SerializableMaterialParameterBlock *v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  __n128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  uint64_t v23;

  v23 = *MEMORY[0x24BDAC8D0];
  re::ecs2::MaterialParameterBlockArrayComponent::upgradeBlocksToBlockHandles(a1);
  if (*((_QWORD *)a1 + 6) <= a2)
  {
    re::ecs2::MaterialParameterBlockArrayComponent::resizeBlockHandles(a1, a2 + 1);
    re::ecs2::Component::enqueueMarkDirty((uint64_t)a1);
  }
  if (*((_QWORD *)a1 + 11) <= a2)
  {
    re::DynamicArray<re::SharedPtr<re::Shareable<re::AssetLoadDescriptor>>>::resize((uint64_t)a1 + 72, a2 + 1);
    re::ecs2::Component::enqueueMarkDirty((uint64_t)a1);
  }
  if (*((_QWORD *)a1 + 6) <= a2)
  {
    v21 = 0u;
    v22 = 0u;
    v19 = 0u;
    v20 = 0u;
    v18 = 0u;
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
    goto LABEL_15;
  }
  v7 = *((_QWORD *)a1 + 8);
  v8 = (const re::ecs2::SerializableMaterialParameterBlock **)(v7 + 24 * a2);
  v9 = v8 + 1;
  isUniquelyReferenced = objc_isUniquelyReferenced();
  if ((isUniquelyReferenced & 1) == 0)
  {
    if (*v8)
      v11 = *v8;
    else
      v11 = *v9;
    v12 = re::globalAllocators((re *)isUniquelyReferenced);
    v13 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v12[2] + 32))(v12[2], 408, 8);
    re::ecs2::SerializableMaterialParameterBlock::SerializableMaterialParameterBlock((re::ecs2::SerializableMaterialParameterBlock *)v13, v11);
    ++*(_DWORD *)(v7 + 24 * a2 + 16);
    re::SharedPtr<re::SkeletalPoseJointDefinition>::reset((uint64_t *)(v7 + 24 * a2), v13);
    *v9 = 0;
    if (v13)

  }
  if (*((_QWORD *)a1 + 6) <= a2)
  {
LABEL_15:
    v21 = 0u;
    v22 = 0u;
    v19 = 0u;
    v20 = 0u;
    v18 = 0u;
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  v14 = *((_QWORD *)a1 + 8) + 24 * a2;
  ++*(_DWORD *)(v14 + 16);
  v15 = *(_QWORD *)v14;
  v18 = a4;
  re::ecs2::SerializableMaterialParameterBlock::setValue<void const*>(v15, a3, 5, (unsigned __int8 *)&v18);
  ++*(_DWORD *)(v15 + 400);
  return re::ecs2::Component::enqueueMarkDirty((uint64_t)a1);
}

uint64_t REMaterialParameterBlockArrayComponentSetInt3WithHandleAtIndex(re::ecs2::MaterialParameterBlockArrayComponent *a1, unint64_t a2, uint64_t a3, __n128 a4)
{
  uint64_t v7;
  const re::ecs2::SerializableMaterialParameterBlock **v8;
  const re::ecs2::SerializableMaterialParameterBlock **v9;
  uint64_t isUniquelyReferenced;
  const re::ecs2::SerializableMaterialParameterBlock *v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  __n128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  uint64_t v23;

  v23 = *MEMORY[0x24BDAC8D0];
  re::ecs2::MaterialParameterBlockArrayComponent::upgradeBlocksToBlockHandles(a1);
  if (*((_QWORD *)a1 + 6) <= a2)
  {
    re::ecs2::MaterialParameterBlockArrayComponent::resizeBlockHandles(a1, a2 + 1);
    re::ecs2::Component::enqueueMarkDirty((uint64_t)a1);
  }
  if (*((_QWORD *)a1 + 11) <= a2)
  {
    re::DynamicArray<re::SharedPtr<re::Shareable<re::AssetLoadDescriptor>>>::resize((uint64_t)a1 + 72, a2 + 1);
    re::ecs2::Component::enqueueMarkDirty((uint64_t)a1);
  }
  if (*((_QWORD *)a1 + 6) <= a2)
  {
    v21 = 0u;
    v22 = 0u;
    v19 = 0u;
    v20 = 0u;
    v18 = 0u;
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
    goto LABEL_15;
  }
  v7 = *((_QWORD *)a1 + 8);
  v8 = (const re::ecs2::SerializableMaterialParameterBlock **)(v7 + 24 * a2);
  v9 = v8 + 1;
  isUniquelyReferenced = objc_isUniquelyReferenced();
  if ((isUniquelyReferenced & 1) == 0)
  {
    if (*v8)
      v11 = *v8;
    else
      v11 = *v9;
    v12 = re::globalAllocators((re *)isUniquelyReferenced);
    v13 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v12[2] + 32))(v12[2], 408, 8);
    re::ecs2::SerializableMaterialParameterBlock::SerializableMaterialParameterBlock((re::ecs2::SerializableMaterialParameterBlock *)v13, v11);
    ++*(_DWORD *)(v7 + 24 * a2 + 16);
    re::SharedPtr<re::SkeletalPoseJointDefinition>::reset((uint64_t *)(v7 + 24 * a2), v13);
    *v9 = 0;
    if (v13)

  }
  if (*((_QWORD *)a1 + 6) <= a2)
  {
LABEL_15:
    v21 = 0u;
    v22 = 0u;
    v19 = 0u;
    v20 = 0u;
    v18 = 0u;
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  v14 = *((_QWORD *)a1 + 8) + 24 * a2;
  ++*(_DWORD *)(v14 + 16);
  v15 = *(_QWORD *)v14;
  v18 = a4;
  re::ecs2::SerializableMaterialParameterBlock::setValue<void const*>(v15, (StringID *)(a3 + 24), 5, (unsigned __int8 *)&v18);
  ++*(_DWORD *)(v15 + 400);
  return re::ecs2::Component::enqueueMarkDirty((uint64_t)a1);
}

re::MaterialParameterBlock *REMaterialParameterBlockArrayComponentGetInt3AtIndex(re::ecs2::MaterialParameterBlockArrayComponent *a1, unint64_t a2, const char *a3, _OWORD *a4)
{
  unint64_t v8;
  uint64_t v9;
  re::ecs2::SerializableMaterialParameterBlock *v10;
  __int128 v11;
  re::MaterialParameterBlock *result;
  uint64_t v13;
  uint64_t v14;
  __int128 v15;
  uint64_t v16;
  int v17;
  const char *v18;
  __int16 v19;
  int v20;
  __int16 v21;
  unint64_t v22;
  __int16 v23;
  unint64_t v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  uint64_t v30;

  v30 = *MEMORY[0x24BDAC8D0];
  re::ecs2::MaterialParameterBlockArrayComponent::upgradeBlocksToBlockHandles(a1);
  if (*((_QWORD *)a1 + 6) <= a2)
  {
    re::ecs2::MaterialParameterBlockArrayComponent::resizeBlockHandles(a1, a2 + 1);
    re::ecs2::Component::enqueueMarkDirty((uint64_t)a1);
  }
  if (*((_QWORD *)a1 + 11) <= a2)
  {
    re::DynamicArray<re::SharedPtr<re::Shareable<re::AssetLoadDescriptor>>>::resize((uint64_t)a1 + 72, a2 + 1);
    re::ecs2::Component::enqueueMarkDirty((uint64_t)a1);
  }
  v8 = *((_QWORD *)a1 + 6);
  if (v8 <= a2)
  {
    v14 = 0;
    v28 = 0u;
    v29 = 0u;
    v26 = 0u;
    v27 = 0u;
    v25 = 0u;
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    v17 = 136315906;
    v18 = "operator[]";
    v19 = 1024;
    v20 = 789;
    v21 = 2048;
    v22 = a2;
    v23 = 2048;
    v24 = v8;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
    goto LABEL_19;
  }
  v9 = *((_QWORD *)a1 + 8);
  v10 = *(re::ecs2::SerializableMaterialParameterBlock **)(v9 + 24 * a2);
  if (!v10)
    v10 = *(re::ecs2::SerializableMaterialParameterBlock **)(v9 + 24 * a2 + 8);
  re::ecs2::SerializableMaterialParameterBlock::int3Value(v10, a3, (uint64_t)&v14);
  if ((_BYTE)v14)
  {
    v11 = v15;
LABEL_10:
    *a4 = v11;
    return (re::MaterialParameterBlock *)1;
  }
  v8 = *((_QWORD *)a1 + 11);
  if (v8 <= a2)
  {
LABEL_19:
    v16 = 0;
    v28 = 0u;
    v29 = 0u;
    v26 = 0u;
    v27 = 0u;
    v25 = 0u;
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    v17 = 136315906;
    v18 = "operator[]";
    v19 = 1024;
    v20 = 789;
    v21 = 2048;
    v22 = a2;
    v23 = 2048;
    v24 = v8;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  v13 = *((_QWORD *)a1 + 13);
  result = *(re::MaterialParameterBlock **)(v13 + 8 * a2);
  if (result)
  {
    re::MaterialParameterBlock::handle(result, a3, (uint64_t)&v25);
    if ((BYTE12(v25) & 7) != 1 || BYTE8(v26) != 5)
      return 0;
    v11 = *(_OWORD *)re::ShaderGraphMaterial::getConstant(*(_QWORD *)(v13 + 8 * a2), (uint64_t)&v25);
    goto LABEL_10;
  }
  return result;
}

uint64_t REMaterialParameterBlockArrayComponentSetUInt3AtIndex(re::ecs2::MaterialParameterBlockArrayComponent *a1, unint64_t a2, char *a3, __n128 a4)
{
  uint64_t v7;
  const re::ecs2::SerializableMaterialParameterBlock **v8;
  const re::ecs2::SerializableMaterialParameterBlock **v9;
  uint64_t isUniquelyReferenced;
  const re::ecs2::SerializableMaterialParameterBlock *v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  __n128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  uint64_t v23;

  v23 = *MEMORY[0x24BDAC8D0];
  re::ecs2::MaterialParameterBlockArrayComponent::upgradeBlocksToBlockHandles(a1);
  if (*((_QWORD *)a1 + 6) <= a2)
  {
    re::ecs2::MaterialParameterBlockArrayComponent::resizeBlockHandles(a1, a2 + 1);
    re::ecs2::Component::enqueueMarkDirty((uint64_t)a1);
  }
  if (*((_QWORD *)a1 + 11) <= a2)
  {
    re::DynamicArray<re::SharedPtr<re::Shareable<re::AssetLoadDescriptor>>>::resize((uint64_t)a1 + 72, a2 + 1);
    re::ecs2::Component::enqueueMarkDirty((uint64_t)a1);
  }
  if (*((_QWORD *)a1 + 6) <= a2)
  {
    v21 = 0u;
    v22 = 0u;
    v19 = 0u;
    v20 = 0u;
    v18 = 0u;
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
    goto LABEL_15;
  }
  v7 = *((_QWORD *)a1 + 8);
  v8 = (const re::ecs2::SerializableMaterialParameterBlock **)(v7 + 24 * a2);
  v9 = v8 + 1;
  isUniquelyReferenced = objc_isUniquelyReferenced();
  if ((isUniquelyReferenced & 1) == 0)
  {
    if (*v8)
      v11 = *v8;
    else
      v11 = *v9;
    v12 = re::globalAllocators((re *)isUniquelyReferenced);
    v13 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v12[2] + 32))(v12[2], 408, 8);
    re::ecs2::SerializableMaterialParameterBlock::SerializableMaterialParameterBlock((re::ecs2::SerializableMaterialParameterBlock *)v13, v11);
    ++*(_DWORD *)(v7 + 24 * a2 + 16);
    re::SharedPtr<re::SkeletalPoseJointDefinition>::reset((uint64_t *)(v7 + 24 * a2), v13);
    *v9 = 0;
    if (v13)

  }
  if (*((_QWORD *)a1 + 6) <= a2)
  {
LABEL_15:
    v21 = 0u;
    v22 = 0u;
    v19 = 0u;
    v20 = 0u;
    v18 = 0u;
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  v14 = *((_QWORD *)a1 + 8) + 24 * a2;
  ++*(_DWORD *)(v14 + 16);
  v15 = *(_QWORD *)v14;
  v18 = a4;
  re::ecs2::SerializableMaterialParameterBlock::setValue<void const*>(v15, a3, 9, (unsigned __int8 *)&v18);
  ++*(_DWORD *)(v15 + 400);
  return re::ecs2::Component::enqueueMarkDirty((uint64_t)a1);
}

uint64_t REMaterialParameterBlockArrayComponentSetUInt3WithHandleAtIndex(re::ecs2::MaterialParameterBlockArrayComponent *a1, unint64_t a2, uint64_t a3, __n128 a4)
{
  uint64_t v7;
  const re::ecs2::SerializableMaterialParameterBlock **v8;
  const re::ecs2::SerializableMaterialParameterBlock **v9;
  uint64_t isUniquelyReferenced;
  const re::ecs2::SerializableMaterialParameterBlock *v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  __n128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  uint64_t v23;

  v23 = *MEMORY[0x24BDAC8D0];
  re::ecs2::MaterialParameterBlockArrayComponent::upgradeBlocksToBlockHandles(a1);
  if (*((_QWORD *)a1 + 6) <= a2)
  {
    re::ecs2::MaterialParameterBlockArrayComponent::resizeBlockHandles(a1, a2 + 1);
    re::ecs2::Component::enqueueMarkDirty((uint64_t)a1);
  }
  if (*((_QWORD *)a1 + 11) <= a2)
  {
    re::DynamicArray<re::SharedPtr<re::Shareable<re::AssetLoadDescriptor>>>::resize((uint64_t)a1 + 72, a2 + 1);
    re::ecs2::Component::enqueueMarkDirty((uint64_t)a1);
  }
  if (*((_QWORD *)a1 + 6) <= a2)
  {
    v21 = 0u;
    v22 = 0u;
    v19 = 0u;
    v20 = 0u;
    v18 = 0u;
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
    goto LABEL_15;
  }
  v7 = *((_QWORD *)a1 + 8);
  v8 = (const re::ecs2::SerializableMaterialParameterBlock **)(v7 + 24 * a2);
  v9 = v8 + 1;
  isUniquelyReferenced = objc_isUniquelyReferenced();
  if ((isUniquelyReferenced & 1) == 0)
  {
    if (*v8)
      v11 = *v8;
    else
      v11 = *v9;
    v12 = re::globalAllocators((re *)isUniquelyReferenced);
    v13 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v12[2] + 32))(v12[2], 408, 8);
    re::ecs2::SerializableMaterialParameterBlock::SerializableMaterialParameterBlock((re::ecs2::SerializableMaterialParameterBlock *)v13, v11);
    ++*(_DWORD *)(v7 + 24 * a2 + 16);
    re::SharedPtr<re::SkeletalPoseJointDefinition>::reset((uint64_t *)(v7 + 24 * a2), v13);
    *v9 = 0;
    if (v13)

  }
  if (*((_QWORD *)a1 + 6) <= a2)
  {
LABEL_15:
    v21 = 0u;
    v22 = 0u;
    v19 = 0u;
    v20 = 0u;
    v18 = 0u;
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  v14 = *((_QWORD *)a1 + 8) + 24 * a2;
  ++*(_DWORD *)(v14 + 16);
  v15 = *(_QWORD *)v14;
  v18 = a4;
  re::ecs2::SerializableMaterialParameterBlock::setValue<void const*>(v15, (StringID *)(a3 + 24), 9, (unsigned __int8 *)&v18);
  ++*(_DWORD *)(v15 + 400);
  return re::ecs2::Component::enqueueMarkDirty((uint64_t)a1);
}

re::MaterialParameterBlock *REMaterialParameterBlockArrayComponentGetUInt3AtIndex(re::ecs2::MaterialParameterBlockArrayComponent *a1, unint64_t a2, const char *a3, _OWORD *a4)
{
  unint64_t v8;
  uint64_t v9;
  re::ecs2::SerializableMaterialParameterBlock *v10;
  __int128 v11;
  re::MaterialParameterBlock *result;
  uint64_t v13;
  uint64_t v14;
  __int128 v15;
  uint64_t v16;
  int v17;
  const char *v18;
  __int16 v19;
  int v20;
  __int16 v21;
  unint64_t v22;
  __int16 v23;
  unint64_t v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  uint64_t v30;

  v30 = *MEMORY[0x24BDAC8D0];
  re::ecs2::MaterialParameterBlockArrayComponent::upgradeBlocksToBlockHandles(a1);
  if (*((_QWORD *)a1 + 6) <= a2)
  {
    re::ecs2::MaterialParameterBlockArrayComponent::resizeBlockHandles(a1, a2 + 1);
    re::ecs2::Component::enqueueMarkDirty((uint64_t)a1);
  }
  if (*((_QWORD *)a1 + 11) <= a2)
  {
    re::DynamicArray<re::SharedPtr<re::Shareable<re::AssetLoadDescriptor>>>::resize((uint64_t)a1 + 72, a2 + 1);
    re::ecs2::Component::enqueueMarkDirty((uint64_t)a1);
  }
  v8 = *((_QWORD *)a1 + 6);
  if (v8 <= a2)
  {
    v14 = 0;
    v28 = 0u;
    v29 = 0u;
    v26 = 0u;
    v27 = 0u;
    v25 = 0u;
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    v17 = 136315906;
    v18 = "operator[]";
    v19 = 1024;
    v20 = 789;
    v21 = 2048;
    v22 = a2;
    v23 = 2048;
    v24 = v8;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
    goto LABEL_19;
  }
  v9 = *((_QWORD *)a1 + 8);
  v10 = *(re::ecs2::SerializableMaterialParameterBlock **)(v9 + 24 * a2);
  if (!v10)
    v10 = *(re::ecs2::SerializableMaterialParameterBlock **)(v9 + 24 * a2 + 8);
  re::ecs2::SerializableMaterialParameterBlock::uint3Value(v10, a3, (uint64_t)&v14);
  if ((_BYTE)v14)
  {
    v11 = v15;
LABEL_10:
    *a4 = v11;
    return (re::MaterialParameterBlock *)1;
  }
  v8 = *((_QWORD *)a1 + 11);
  if (v8 <= a2)
  {
LABEL_19:
    v16 = 0;
    v28 = 0u;
    v29 = 0u;
    v26 = 0u;
    v27 = 0u;
    v25 = 0u;
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    v17 = 136315906;
    v18 = "operator[]";
    v19 = 1024;
    v20 = 789;
    v21 = 2048;
    v22 = a2;
    v23 = 2048;
    v24 = v8;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  v13 = *((_QWORD *)a1 + 13);
  result = *(re::MaterialParameterBlock **)(v13 + 8 * a2);
  if (result)
  {
    re::MaterialParameterBlock::handle(result, a3, (uint64_t)&v25);
    if ((BYTE12(v25) & 7) != 1 || BYTE8(v26) != 9)
      return 0;
    v11 = *(_OWORD *)re::ShaderGraphMaterial::getConstant(*(_QWORD *)(v13 + 8 * a2), (uint64_t)&v25);
    goto LABEL_10;
  }
  return result;
}

uint64_t REMaterialParameterBlockArrayComponentSetFloat4AtIndex(re::ecs2::MaterialParameterBlockArrayComponent *a1, unint64_t a2, char *a3, __n128 a4)
{
  uint64_t v7;
  const re::ecs2::SerializableMaterialParameterBlock **v8;
  const re::ecs2::SerializableMaterialParameterBlock **v9;
  uint64_t isUniquelyReferenced;
  const re::ecs2::SerializableMaterialParameterBlock *v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  __n128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  uint64_t v23;

  v23 = *MEMORY[0x24BDAC8D0];
  re::ecs2::MaterialParameterBlockArrayComponent::upgradeBlocksToBlockHandles(a1);
  if (*((_QWORD *)a1 + 6) <= a2)
  {
    re::ecs2::MaterialParameterBlockArrayComponent::resizeBlockHandles(a1, a2 + 1);
    re::ecs2::Component::enqueueMarkDirty((uint64_t)a1);
  }
  if (*((_QWORD *)a1 + 11) <= a2)
  {
    re::DynamicArray<re::SharedPtr<re::Shareable<re::AssetLoadDescriptor>>>::resize((uint64_t)a1 + 72, a2 + 1);
    re::ecs2::Component::enqueueMarkDirty((uint64_t)a1);
  }
  if (*((_QWORD *)a1 + 6) <= a2)
  {
    v21 = 0u;
    v22 = 0u;
    v19 = 0u;
    v20 = 0u;
    v18 = 0u;
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
    goto LABEL_15;
  }
  v7 = *((_QWORD *)a1 + 8);
  v8 = (const re::ecs2::SerializableMaterialParameterBlock **)(v7 + 24 * a2);
  v9 = v8 + 1;
  isUniquelyReferenced = objc_isUniquelyReferenced();
  if ((isUniquelyReferenced & 1) == 0)
  {
    if (*v8)
      v11 = *v8;
    else
      v11 = *v9;
    v12 = re::globalAllocators((re *)isUniquelyReferenced);
    v13 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v12[2] + 32))(v12[2], 408, 8);
    re::ecs2::SerializableMaterialParameterBlock::SerializableMaterialParameterBlock((re::ecs2::SerializableMaterialParameterBlock *)v13, v11);
    ++*(_DWORD *)(v7 + 24 * a2 + 16);
    re::SharedPtr<re::SkeletalPoseJointDefinition>::reset((uint64_t *)(v7 + 24 * a2), v13);
    *v9 = 0;
    if (v13)

  }
  if (*((_QWORD *)a1 + 6) <= a2)
  {
LABEL_15:
    v21 = 0u;
    v22 = 0u;
    v19 = 0u;
    v20 = 0u;
    v18 = 0u;
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  v14 = *((_QWORD *)a1 + 8) + 24 * a2;
  ++*(_DWORD *)(v14 + 16);
  v15 = *(_QWORD *)v14;
  v18 = a4;
  re::ecs2::SerializableMaterialParameterBlock::setValue<void const*>(v15, a3, 34, (unsigned __int8 *)&v18);
  ++*(_DWORD *)(v15 + 400);
  return re::ecs2::Component::enqueueMarkDirty((uint64_t)a1);
}

uint64_t REMaterialParameterBlockArrayComponentSetFloat4WithHandleAtIndex(re::ecs2::MaterialParameterBlockArrayComponent *a1, unint64_t a2, uint64_t a3, __n128 a4)
{
  uint64_t v7;
  const re::ecs2::SerializableMaterialParameterBlock **v8;
  const re::ecs2::SerializableMaterialParameterBlock **v9;
  uint64_t isUniquelyReferenced;
  const re::ecs2::SerializableMaterialParameterBlock *v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  __n128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  uint64_t v23;

  v23 = *MEMORY[0x24BDAC8D0];
  re::ecs2::MaterialParameterBlockArrayComponent::upgradeBlocksToBlockHandles(a1);
  if (*((_QWORD *)a1 + 6) <= a2)
  {
    re::ecs2::MaterialParameterBlockArrayComponent::resizeBlockHandles(a1, a2 + 1);
    re::ecs2::Component::enqueueMarkDirty((uint64_t)a1);
  }
  if (*((_QWORD *)a1 + 11) <= a2)
  {
    re::DynamicArray<re::SharedPtr<re::Shareable<re::AssetLoadDescriptor>>>::resize((uint64_t)a1 + 72, a2 + 1);
    re::ecs2::Component::enqueueMarkDirty((uint64_t)a1);
  }
  if (*((_QWORD *)a1 + 6) <= a2)
  {
    v21 = 0u;
    v22 = 0u;
    v19 = 0u;
    v20 = 0u;
    v18 = 0u;
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
    goto LABEL_15;
  }
  v7 = *((_QWORD *)a1 + 8);
  v8 = (const re::ecs2::SerializableMaterialParameterBlock **)(v7 + 24 * a2);
  v9 = v8 + 1;
  isUniquelyReferenced = objc_isUniquelyReferenced();
  if ((isUniquelyReferenced & 1) == 0)
  {
    if (*v8)
      v11 = *v8;
    else
      v11 = *v9;
    v12 = re::globalAllocators((re *)isUniquelyReferenced);
    v13 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v12[2] + 32))(v12[2], 408, 8);
    re::ecs2::SerializableMaterialParameterBlock::SerializableMaterialParameterBlock((re::ecs2::SerializableMaterialParameterBlock *)v13, v11);
    ++*(_DWORD *)(v7 + 24 * a2 + 16);
    re::SharedPtr<re::SkeletalPoseJointDefinition>::reset((uint64_t *)(v7 + 24 * a2), v13);
    *v9 = 0;
    if (v13)

  }
  if (*((_QWORD *)a1 + 6) <= a2)
  {
LABEL_15:
    v21 = 0u;
    v22 = 0u;
    v19 = 0u;
    v20 = 0u;
    v18 = 0u;
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  v14 = *((_QWORD *)a1 + 8) + 24 * a2;
  ++*(_DWORD *)(v14 + 16);
  v15 = *(_QWORD *)v14;
  v18 = a4;
  re::ecs2::SerializableMaterialParameterBlock::setValue<void const*>(v15, (StringID *)(a3 + 24), 34, (unsigned __int8 *)&v18);
  ++*(_DWORD *)(v15 + 400);
  return re::ecs2::Component::enqueueMarkDirty((uint64_t)a1);
}

uint64_t REMaterialParameterBlockArrayComponentGetFloat4AtIndex(re::ecs2::MaterialParameterBlockArrayComponent *a1, unint64_t a2, const char *a3, uint64_t a4)
{
  unint64_t v8;
  uint64_t v9;
  re::ecs2::SerializableMaterialParameterBlock *v10;
  uint64_t v11;
  uint64_t v12;
  re::ecs2::SerializableMaterialParameterBlock *v13;
  NSObject *v14;
  unint64_t v15;
  uint64_t v16;
  re::MaterialParameterBlock *v17;
  _QWORD *Constant;
  uint64_t v19;
  _QWORD v21[3];
  uint64_t v22;
  __int128 v23;
  uint64_t v24;
  int v25;
  const char *v26;
  __int16 v27;
  int v28;
  __int16 v29;
  unint64_t v30;
  __int16 v31;
  unint64_t v32;
  uint8_t buf[16];
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  uint64_t v38;

  v38 = *MEMORY[0x24BDAC8D0];
  re::ecs2::MaterialParameterBlockArrayComponent::upgradeBlocksToBlockHandles(a1);
  if (*((_QWORD *)a1 + 6) <= a2)
  {
    re::ecs2::MaterialParameterBlockArrayComponent::resizeBlockHandles(a1, a2 + 1);
    re::ecs2::Component::enqueueMarkDirty((uint64_t)a1);
  }
  if (*((_QWORD *)a1 + 11) <= a2)
  {
    re::DynamicArray<re::SharedPtr<re::Shareable<re::AssetLoadDescriptor>>>::resize((uint64_t)a1 + 72, a2 + 1);
    re::ecs2::Component::enqueueMarkDirty((uint64_t)a1);
  }
  v8 = *((_QWORD *)a1 + 6);
  if (v8 <= a2)
  {
    v22 = 0;
    v36 = 0u;
    v37 = 0u;
    v34 = 0u;
    v35 = 0u;
    *(_OWORD *)buf = 0u;
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    v25 = 136315906;
    v26 = "operator[]";
    v27 = 1024;
    v28 = 789;
    v29 = 2048;
    v30 = a2;
    v31 = 2048;
    v32 = v8;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_28:
    v21[0] = 0;
    v36 = 0u;
    v37 = 0u;
    v34 = 0u;
    v35 = 0u;
    *(_OWORD *)buf = 0u;
    a4 = MEMORY[0x24BDACB70];
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    v25 = 136315906;
    v26 = "operator[]";
    v27 = 1024;
    v28 = 789;
    v29 = 2048;
    v30 = a2;
    v31 = 2048;
    v32 = v8;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_29:
    dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
    goto LABEL_16;
  }
  v9 = *((_QWORD *)a1 + 8);
  v10 = *(re::ecs2::SerializableMaterialParameterBlock **)(v9 + 24 * a2);
  if (!v10)
    v10 = *(re::ecs2::SerializableMaterialParameterBlock **)(v9 + 24 * a2 + 8);
  re::ecs2::SerializableMaterialParameterBlock::vector4FValue(v10, a3, (uint64_t)&v22);
  if ((_BYTE)v22)
  {
    *(_OWORD *)a4 = v23;
    return 1;
  }
  v8 = *((_QWORD *)a1 + 6);
  if (v8 <= a2)
    goto LABEL_28;
  v12 = *((_QWORD *)a1 + 8);
  v13 = *(re::ecs2::SerializableMaterialParameterBlock **)(v12 + 24 * a2);
  if (!v13)
    v13 = *(re::ecs2::SerializableMaterialParameterBlock **)(v12 + 24 * a2 + 8);
  re::ecs2::SerializableMaterialParameterBlock::colorGamut4FValue(v13, a3, (uint64_t)v21);
  if (!LOBYTE(v21[0]))
  {
    v15 = *((_QWORD *)a1 + 11);
    if (v15 <= a2)
    {
      v24 = 0;
      v36 = 0u;
      v37 = 0u;
      v34 = 0u;
      v35 = 0u;
      *(_OWORD *)buf = 0u;
      os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      v25 = 136315906;
      v26 = "operator[]";
      v27 = 1024;
      v28 = 789;
      v29 = 2048;
      v30 = a2;
      v31 = 2048;
      v32 = v15;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
    }
    v16 = *((_QWORD *)a1 + 13);
    v17 = *(re::MaterialParameterBlock **)(v16 + 8 * a2);
    if (!v17)
      return 0;
    re::MaterialParameterBlock::handle(v17, a3, (uint64_t)buf);
    if ((buf[12] & 7) != 1 || BYTE8(v34) != 48 && BYTE8(v34) != 34)
      return 0;
    Constant = (_QWORD *)re::ShaderGraphMaterial::getConstant(*(_QWORD *)(v16 + 8 * a2), (uint64_t)buf);
    v19 = Constant[1];
    *(_QWORD *)a4 = *Constant;
    *(_QWORD *)(a4 + 8) = v19;
    return 1;
  }
  if (CoreRELog::onceToken != -1)
    goto LABEL_29;
LABEL_16:
  v14 = (id)CoreRELog::log;
  if (os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl(&dword_224FE9000, v14, OS_LOG_TYPE_DEFAULT, "REMaterialParameterBlockArrayComponentGetFloat4AtIndex was called for parameter of type Color4.To get the right color space context for the color value, REMaterialParameterBlockArrayComponentGetColor4AtIndex should be used instead.", buf, 2u);
  }

  v11 = 1;
  re::ColorGamut4F::as((uint64_t)v21 + 4, 0, 1, (uint64_t)buf);
  *(_OWORD *)a4 = *(_OWORD *)buf;
  return v11;
}

uint64_t REMaterialParameterBlockArrayComponentSetColor4AtIndex(re::ecs2::MaterialParameterBlockArrayComponent *a1, unint64_t a2, char *a3, char a4, __n128 a5)
{
  uint64_t v9;
  const re::ecs2::SerializableMaterialParameterBlock **v10;
  const re::ecs2::SerializableMaterialParameterBlock **v11;
  uint64_t isUniquelyReferenced;
  const re::ecs2::SerializableMaterialParameterBlock *v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  __n128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  uint64_t v25;

  v25 = *MEMORY[0x24BDAC8D0];
  re::ecs2::MaterialParameterBlockArrayComponent::upgradeBlocksToBlockHandles(a1);
  if (*((_QWORD *)a1 + 6) <= a2)
  {
    re::ecs2::MaterialParameterBlockArrayComponent::resizeBlockHandles(a1, a2 + 1);
    re::ecs2::Component::enqueueMarkDirty((uint64_t)a1);
  }
  if (*((_QWORD *)a1 + 11) <= a2)
  {
    re::DynamicArray<re::SharedPtr<re::Shareable<re::AssetLoadDescriptor>>>::resize((uint64_t)a1 + 72, a2 + 1);
    re::ecs2::Component::enqueueMarkDirty((uint64_t)a1);
  }
  if (*((_QWORD *)a1 + 6) <= a2)
  {
    v23 = 0u;
    v24 = 0u;
    v21 = 0u;
    v22 = 0u;
    v20 = 0u;
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
    goto LABEL_15;
  }
  v9 = *((_QWORD *)a1 + 8);
  v10 = (const re::ecs2::SerializableMaterialParameterBlock **)(v9 + 24 * a2);
  v11 = v10 + 1;
  isUniquelyReferenced = objc_isUniquelyReferenced();
  if ((isUniquelyReferenced & 1) == 0)
  {
    if (*v10)
      v13 = *v10;
    else
      v13 = *v11;
    v14 = re::globalAllocators((re *)isUniquelyReferenced);
    v15 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v14[2] + 32))(v14[2], 408, 8);
    re::ecs2::SerializableMaterialParameterBlock::SerializableMaterialParameterBlock((re::ecs2::SerializableMaterialParameterBlock *)v15, v13);
    ++*(_DWORD *)(v9 + 24 * a2 + 16);
    re::SharedPtr<re::SkeletalPoseJointDefinition>::reset((uint64_t *)(v9 + 24 * a2), v15);
    *v11 = 0;
    if (v15)

  }
  if (*((_QWORD *)a1 + 6) <= a2)
  {
LABEL_15:
    v23 = 0u;
    v24 = 0u;
    v21 = 0u;
    v22 = 0u;
    v20 = 0u;
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  v16 = *((_QWORD *)a1 + 8) + 24 * a2;
  ++*(_DWORD *)(v16 + 16);
  v17 = *(_QWORD *)v16;
  v20 = a5;
  LOBYTE(v21) = a4;
  re::ecs2::SerializableMaterialParameterBlock::setColorGamut4F(v17, a3, (__int128 *)&v20);
  return re::ecs2::Component::enqueueMarkDirty((uint64_t)a1);
}

uint64_t REMaterialParameterBlockArrayComponentSetColor4WithHandleAtIndex(re::ecs2::MaterialParameterBlockArrayComponent *a1, unint64_t a2, uint64_t a3, char a4, __n128 a5)
{
  uint64_t v9;
  const re::ecs2::SerializableMaterialParameterBlock **v10;
  const re::ecs2::SerializableMaterialParameterBlock **v11;
  uint64_t isUniquelyReferenced;
  const re::ecs2::SerializableMaterialParameterBlock *v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  __n128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  uint64_t v25;

  v25 = *MEMORY[0x24BDAC8D0];
  re::ecs2::MaterialParameterBlockArrayComponent::upgradeBlocksToBlockHandles(a1);
  if (*((_QWORD *)a1 + 6) <= a2)
  {
    re::ecs2::MaterialParameterBlockArrayComponent::resizeBlockHandles(a1, a2 + 1);
    re::ecs2::Component::enqueueMarkDirty((uint64_t)a1);
  }
  if (*((_QWORD *)a1 + 11) <= a2)
  {
    re::DynamicArray<re::SharedPtr<re::Shareable<re::AssetLoadDescriptor>>>::resize((uint64_t)a1 + 72, a2 + 1);
    re::ecs2::Component::enqueueMarkDirty((uint64_t)a1);
  }
  if (*((_QWORD *)a1 + 6) <= a2)
  {
    v23 = 0u;
    v24 = 0u;
    v21 = 0u;
    v22 = 0u;
    v20 = 0u;
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
    goto LABEL_15;
  }
  v9 = *((_QWORD *)a1 + 8);
  v10 = (const re::ecs2::SerializableMaterialParameterBlock **)(v9 + 24 * a2);
  v11 = v10 + 1;
  isUniquelyReferenced = objc_isUniquelyReferenced();
  if ((isUniquelyReferenced & 1) == 0)
  {
    if (*v10)
      v13 = *v10;
    else
      v13 = *v11;
    v14 = re::globalAllocators((re *)isUniquelyReferenced);
    v15 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v14[2] + 32))(v14[2], 408, 8);
    re::ecs2::SerializableMaterialParameterBlock::SerializableMaterialParameterBlock((re::ecs2::SerializableMaterialParameterBlock *)v15, v13);
    ++*(_DWORD *)(v9 + 24 * a2 + 16);
    re::SharedPtr<re::SkeletalPoseJointDefinition>::reset((uint64_t *)(v9 + 24 * a2), v15);
    *v11 = 0;
    if (v15)

  }
  if (*((_QWORD *)a1 + 6) <= a2)
  {
LABEL_15:
    v23 = 0u;
    v24 = 0u;
    v21 = 0u;
    v22 = 0u;
    v20 = 0u;
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  v16 = *((_QWORD *)a1 + 8) + 24 * a2;
  ++*(_DWORD *)(v16 + 16);
  v17 = *(_QWORD *)v16;
  v20 = a5;
  LOBYTE(v21) = a4;
  re::ecs2::SerializableMaterialParameterBlock::setColorGamut4F(v17, (StringID *)(a3 + 24), (__int128 *)&v20);
  return re::ecs2::Component::enqueueMarkDirty((uint64_t)a1);
}

re::MaterialParameterBlock *REMaterialParameterBlockArrayComponentGetColor4AtIndex(re::ecs2::MaterialParameterBlockArrayComponent *a1, unint64_t a2, const char *a3, _OWORD *a4, _BYTE *a5)
{
  unint64_t v10;
  uint64_t v11;
  re::ecs2::SerializableMaterialParameterBlock *v12;
  char v13;
  re::MaterialParameterBlock *result;
  uint64_t v15;
  re::ecs2::SerializableMaterialParameterBlock *v16;
  int v17;
  uint64_t v19;
  _BYTE v20[20];
  char v21;
  uint64_t v22;
  _BYTE v23[18];
  __int16 v24;
  unint64_t v25;
  __int16 v26;
  unint64_t v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  uint64_t v33;

  v33 = *MEMORY[0x24BDAC8D0];
  re::ecs2::MaterialParameterBlockArrayComponent::upgradeBlocksToBlockHandles(a1);
  if (*((_QWORD *)a1 + 6) <= a2)
  {
    re::ecs2::MaterialParameterBlockArrayComponent::resizeBlockHandles(a1, a2 + 1);
    re::ecs2::Component::enqueueMarkDirty((uint64_t)a1);
  }
  if (*((_QWORD *)a1 + 11) <= a2)
  {
    re::DynamicArray<re::SharedPtr<re::Shareable<re::AssetLoadDescriptor>>>::resize((uint64_t)a1 + 72, a2 + 1);
    re::ecs2::Component::enqueueMarkDirty((uint64_t)a1);
  }
  v10 = *((_QWORD *)a1 + 6);
  if (v10 <= a2)
  {
    *(_QWORD *)v20 = 0;
    v31 = 0u;
    v32 = 0u;
    v29 = 0u;
    v30 = 0u;
    v28 = 0u;
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    *(_DWORD *)v23 = 136315906;
    *(_QWORD *)&v23[4] = "operator[]";
    *(_WORD *)&v23[12] = 1024;
    *(_DWORD *)&v23[14] = 789;
    v24 = 2048;
    v25 = a2;
    v26 = 2048;
    v27 = v10;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_27:
    v22 = 0;
    v31 = 0u;
    v32 = 0u;
    v29 = 0u;
    v30 = 0u;
    v28 = 0u;
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    *(_DWORD *)v23 = 136315906;
    *(_QWORD *)&v23[4] = "operator[]";
    *(_WORD *)&v23[12] = 1024;
    *(_DWORD *)&v23[14] = 789;
    v24 = 2048;
    v25 = a2;
    v26 = 2048;
    v27 = v10;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
    goto LABEL_28;
  }
  v11 = *((_QWORD *)a1 + 8);
  v12 = *(re::ecs2::SerializableMaterialParameterBlock **)(v11 + 24 * a2);
  if (!v12)
    v12 = *(re::ecs2::SerializableMaterialParameterBlock **)(v11 + 24 * a2 + 8);
  re::ecs2::SerializableMaterialParameterBlock::colorGamut4FValue(v12, a3, (uint64_t)v20);
  if (v20[0])
  {
    *a4 = *(_OWORD *)&v20[4];
    v13 = v21;
LABEL_10:
    *a5 = v13;
    return (re::MaterialParameterBlock *)1;
  }
  v10 = *((_QWORD *)a1 + 6);
  if (v10 <= a2)
    goto LABEL_27;
  v15 = *((_QWORD *)a1 + 8);
  v16 = *(re::ecs2::SerializableMaterialParameterBlock **)(v15 + 24 * a2);
  if (!v16)
    v16 = *(re::ecs2::SerializableMaterialParameterBlock **)(v15 + 24 * a2 + 8);
  v17 = re::ecs2::SerializableMaterialParameterBlock::valueType(v16, a3);
  if (v17 != 21 && v17 != 0)
    return 0;
  v10 = *((_QWORD *)a1 + 11);
  if (v10 <= a2)
  {
LABEL_28:
    v22 = 0;
    v31 = 0u;
    v32 = 0u;
    v29 = 0u;
    v30 = 0u;
    v28 = 0u;
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    *(_DWORD *)v23 = 136315906;
    *(_QWORD *)&v23[4] = "operator[]";
    *(_WORD *)&v23[12] = 1024;
    *(_DWORD *)&v23[14] = 789;
    v24 = 2048;
    v25 = a2;
    v26 = 2048;
    v27 = v10;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  v19 = *((_QWORD *)a1 + 13);
  result = *(re::MaterialParameterBlock **)(v19 + 8 * a2);
  if (!result)
    return result;
  re::MaterialParameterBlock::handle(result, a3, (uint64_t)&v28);
  if ((BYTE12(v28) & 7) == 1 && BYTE8(v29) == 21)
  {
    re::MaterialParameterBlock::colorGamut4FValue(*(_QWORD *)(v19 + 8 * a2), (uint64_t)&v28, (uint64_t)v23);
    *a4 = *(_OWORD *)v23;
    v13 = v23[16];
    goto LABEL_10;
  }
  return 0;
}

uint64_t REMaterialParameterBlockArrayComponentSetInt4AtIndex(re::ecs2::MaterialParameterBlockArrayComponent *a1, unint64_t a2, char *a3, __n128 a4)
{
  uint64_t v7;
  const re::ecs2::SerializableMaterialParameterBlock **v8;
  const re::ecs2::SerializableMaterialParameterBlock **v9;
  uint64_t isUniquelyReferenced;
  const re::ecs2::SerializableMaterialParameterBlock *v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  __n128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  uint64_t v23;

  v23 = *MEMORY[0x24BDAC8D0];
  re::ecs2::MaterialParameterBlockArrayComponent::upgradeBlocksToBlockHandles(a1);
  if (*((_QWORD *)a1 + 6) <= a2)
  {
    re::ecs2::MaterialParameterBlockArrayComponent::resizeBlockHandles(a1, a2 + 1);
    re::ecs2::Component::enqueueMarkDirty((uint64_t)a1);
  }
  if (*((_QWORD *)a1 + 11) <= a2)
  {
    re::DynamicArray<re::SharedPtr<re::Shareable<re::AssetLoadDescriptor>>>::resize((uint64_t)a1 + 72, a2 + 1);
    re::ecs2::Component::enqueueMarkDirty((uint64_t)a1);
  }
  if (*((_QWORD *)a1 + 6) <= a2)
  {
    v21 = 0u;
    v22 = 0u;
    v19 = 0u;
    v20 = 0u;
    v18 = 0u;
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
    goto LABEL_15;
  }
  v7 = *((_QWORD *)a1 + 8);
  v8 = (const re::ecs2::SerializableMaterialParameterBlock **)(v7 + 24 * a2);
  v9 = v8 + 1;
  isUniquelyReferenced = objc_isUniquelyReferenced();
  if ((isUniquelyReferenced & 1) == 0)
  {
    if (*v8)
      v11 = *v8;
    else
      v11 = *v9;
    v12 = re::globalAllocators((re *)isUniquelyReferenced);
    v13 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v12[2] + 32))(v12[2], 408, 8);
    re::ecs2::SerializableMaterialParameterBlock::SerializableMaterialParameterBlock((re::ecs2::SerializableMaterialParameterBlock *)v13, v11);
    ++*(_DWORD *)(v7 + 24 * a2 + 16);
    re::SharedPtr<re::SkeletalPoseJointDefinition>::reset((uint64_t *)(v7 + 24 * a2), v13);
    *v9 = 0;
    if (v13)

  }
  if (*((_QWORD *)a1 + 6) <= a2)
  {
LABEL_15:
    v21 = 0u;
    v22 = 0u;
    v19 = 0u;
    v20 = 0u;
    v18 = 0u;
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  v14 = *((_QWORD *)a1 + 8) + 24 * a2;
  ++*(_DWORD *)(v14 + 16);
  v15 = *(_QWORD *)v14;
  v18 = a4;
  re::ecs2::SerializableMaterialParameterBlock::setValue<void const*>(v15, a3, 6, (unsigned __int8 *)&v18);
  ++*(_DWORD *)(v15 + 400);
  return re::ecs2::Component::enqueueMarkDirty((uint64_t)a1);
}

uint64_t REMaterialParameterBlockArrayComponentSetInt4WithHandleAtIndex(re::ecs2::MaterialParameterBlockArrayComponent *a1, unint64_t a2, uint64_t a3, __n128 a4)
{
  uint64_t v7;
  const re::ecs2::SerializableMaterialParameterBlock **v8;
  const re::ecs2::SerializableMaterialParameterBlock **v9;
  uint64_t isUniquelyReferenced;
  const re::ecs2::SerializableMaterialParameterBlock *v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  __n128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  uint64_t v23;

  v23 = *MEMORY[0x24BDAC8D0];
  re::ecs2::MaterialParameterBlockArrayComponent::upgradeBlocksToBlockHandles(a1);
  if (*((_QWORD *)a1 + 6) <= a2)
  {
    re::ecs2::MaterialParameterBlockArrayComponent::resizeBlockHandles(a1, a2 + 1);
    re::ecs2::Component::enqueueMarkDirty((uint64_t)a1);
  }
  if (*((_QWORD *)a1 + 11) <= a2)
  {
    re::DynamicArray<re::SharedPtr<re::Shareable<re::AssetLoadDescriptor>>>::resize((uint64_t)a1 + 72, a2 + 1);
    re::ecs2::Component::enqueueMarkDirty((uint64_t)a1);
  }
  if (*((_QWORD *)a1 + 6) <= a2)
  {
    v21 = 0u;
    v22 = 0u;
    v19 = 0u;
    v20 = 0u;
    v18 = 0u;
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
    goto LABEL_15;
  }
  v7 = *((_QWORD *)a1 + 8);
  v8 = (const re::ecs2::SerializableMaterialParameterBlock **)(v7 + 24 * a2);
  v9 = v8 + 1;
  isUniquelyReferenced = objc_isUniquelyReferenced();
  if ((isUniquelyReferenced & 1) == 0)
  {
    if (*v8)
      v11 = *v8;
    else
      v11 = *v9;
    v12 = re::globalAllocators((re *)isUniquelyReferenced);
    v13 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v12[2] + 32))(v12[2], 408, 8);
    re::ecs2::SerializableMaterialParameterBlock::SerializableMaterialParameterBlock((re::ecs2::SerializableMaterialParameterBlock *)v13, v11);
    ++*(_DWORD *)(v7 + 24 * a2 + 16);
    re::SharedPtr<re::SkeletalPoseJointDefinition>::reset((uint64_t *)(v7 + 24 * a2), v13);
    *v9 = 0;
    if (v13)

  }
  if (*((_QWORD *)a1 + 6) <= a2)
  {
LABEL_15:
    v21 = 0u;
    v22 = 0u;
    v19 = 0u;
    v20 = 0u;
    v18 = 0u;
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  v14 = *((_QWORD *)a1 + 8) + 24 * a2;
  ++*(_DWORD *)(v14 + 16);
  v15 = *(_QWORD *)v14;
  v18 = a4;
  re::ecs2::SerializableMaterialParameterBlock::setValue<void const*>(v15, (StringID *)(a3 + 24), 6, (unsigned __int8 *)&v18);
  ++*(_DWORD *)(v15 + 400);
  return re::ecs2::Component::enqueueMarkDirty((uint64_t)a1);
}

re::MaterialParameterBlock *REMaterialParameterBlockArrayComponentGetInt4AtIndex(re::ecs2::MaterialParameterBlockArrayComponent *a1, unint64_t a2, const char *a3, _OWORD *a4)
{
  unint64_t v8;
  uint64_t v9;
  re::ecs2::SerializableMaterialParameterBlock *v10;
  __int128 v11;
  re::MaterialParameterBlock *result;
  uint64_t v13;
  uint64_t v14;
  __int128 v15;
  uint64_t v16;
  int v17;
  const char *v18;
  __int16 v19;
  int v20;
  __int16 v21;
  unint64_t v22;
  __int16 v23;
  unint64_t v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  uint64_t v30;

  v30 = *MEMORY[0x24BDAC8D0];
  re::ecs2::MaterialParameterBlockArrayComponent::upgradeBlocksToBlockHandles(a1);
  if (*((_QWORD *)a1 + 6) <= a2)
  {
    re::ecs2::MaterialParameterBlockArrayComponent::resizeBlockHandles(a1, a2 + 1);
    re::ecs2::Component::enqueueMarkDirty((uint64_t)a1);
  }
  if (*((_QWORD *)a1 + 11) <= a2)
  {
    re::DynamicArray<re::SharedPtr<re::Shareable<re::AssetLoadDescriptor>>>::resize((uint64_t)a1 + 72, a2 + 1);
    re::ecs2::Component::enqueueMarkDirty((uint64_t)a1);
  }
  v8 = *((_QWORD *)a1 + 6);
  if (v8 <= a2)
  {
    v14 = 0;
    v28 = 0u;
    v29 = 0u;
    v26 = 0u;
    v27 = 0u;
    v25 = 0u;
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    v17 = 136315906;
    v18 = "operator[]";
    v19 = 1024;
    v20 = 789;
    v21 = 2048;
    v22 = a2;
    v23 = 2048;
    v24 = v8;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
    goto LABEL_19;
  }
  v9 = *((_QWORD *)a1 + 8);
  v10 = *(re::ecs2::SerializableMaterialParameterBlock **)(v9 + 24 * a2);
  if (!v10)
    v10 = *(re::ecs2::SerializableMaterialParameterBlock **)(v9 + 24 * a2 + 8);
  re::ecs2::SerializableMaterialParameterBlock::int4Value(v10, a3, (uint64_t)&v14);
  if ((_BYTE)v14)
  {
    v11 = v15;
LABEL_10:
    *a4 = v11;
    return (re::MaterialParameterBlock *)1;
  }
  v8 = *((_QWORD *)a1 + 11);
  if (v8 <= a2)
  {
LABEL_19:
    v16 = 0;
    v28 = 0u;
    v29 = 0u;
    v26 = 0u;
    v27 = 0u;
    v25 = 0u;
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    v17 = 136315906;
    v18 = "operator[]";
    v19 = 1024;
    v20 = 789;
    v21 = 2048;
    v22 = a2;
    v23 = 2048;
    v24 = v8;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  v13 = *((_QWORD *)a1 + 13);
  result = *(re::MaterialParameterBlock **)(v13 + 8 * a2);
  if (result)
  {
    re::MaterialParameterBlock::handle(result, a3, (uint64_t)&v25);
    if ((BYTE12(v25) & 7) != 1 || BYTE8(v26) != 6)
      return 0;
    v11 = *(_OWORD *)re::ShaderGraphMaterial::getConstant(*(_QWORD *)(v13 + 8 * a2), (uint64_t)&v25);
    goto LABEL_10;
  }
  return result;
}

uint64_t REMaterialParameterBlockArrayComponentSetUInt4AtIndex(re::ecs2::MaterialParameterBlockArrayComponent *a1, unint64_t a2, char *a3, __n128 a4)
{
  uint64_t v7;
  const re::ecs2::SerializableMaterialParameterBlock **v8;
  const re::ecs2::SerializableMaterialParameterBlock **v9;
  uint64_t isUniquelyReferenced;
  const re::ecs2::SerializableMaterialParameterBlock *v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  __n128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  uint64_t v23;

  v23 = *MEMORY[0x24BDAC8D0];
  re::ecs2::MaterialParameterBlockArrayComponent::upgradeBlocksToBlockHandles(a1);
  if (*((_QWORD *)a1 + 6) <= a2)
  {
    re::ecs2::MaterialParameterBlockArrayComponent::resizeBlockHandles(a1, a2 + 1);
    re::ecs2::Component::enqueueMarkDirty((uint64_t)a1);
  }
  if (*((_QWORD *)a1 + 11) <= a2)
  {
    re::DynamicArray<re::SharedPtr<re::Shareable<re::AssetLoadDescriptor>>>::resize((uint64_t)a1 + 72, a2 + 1);
    re::ecs2::Component::enqueueMarkDirty((uint64_t)a1);
  }
  if (*((_QWORD *)a1 + 6) <= a2)
  {
    v21 = 0u;
    v22 = 0u;
    v19 = 0u;
    v20 = 0u;
    v18 = 0u;
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
    goto LABEL_15;
  }
  v7 = *((_QWORD *)a1 + 8);
  v8 = (const re::ecs2::SerializableMaterialParameterBlock **)(v7 + 24 * a2);
  v9 = v8 + 1;
  isUniquelyReferenced = objc_isUniquelyReferenced();
  if ((isUniquelyReferenced & 1) == 0)
  {
    if (*v8)
      v11 = *v8;
    else
      v11 = *v9;
    v12 = re::globalAllocators((re *)isUniquelyReferenced);
    v13 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v12[2] + 32))(v12[2], 408, 8);
    re::ecs2::SerializableMaterialParameterBlock::SerializableMaterialParameterBlock((re::ecs2::SerializableMaterialParameterBlock *)v13, v11);
    ++*(_DWORD *)(v7 + 24 * a2 + 16);
    re::SharedPtr<re::SkeletalPoseJointDefinition>::reset((uint64_t *)(v7 + 24 * a2), v13);
    *v9 = 0;
    if (v13)

  }
  if (*((_QWORD *)a1 + 6) <= a2)
  {
LABEL_15:
    v21 = 0u;
    v22 = 0u;
    v19 = 0u;
    v20 = 0u;
    v18 = 0u;
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  v14 = *((_QWORD *)a1 + 8) + 24 * a2;
  ++*(_DWORD *)(v14 + 16);
  v15 = *(_QWORD *)v14;
  v18 = a4;
  re::ecs2::SerializableMaterialParameterBlock::setValue<void const*>(v15, a3, 10, (unsigned __int8 *)&v18);
  ++*(_DWORD *)(v15 + 400);
  return re::ecs2::Component::enqueueMarkDirty((uint64_t)a1);
}

uint64_t REMaterialParameterBlockArrayComponentSetUInt4WithHandleAtIndex(re::ecs2::MaterialParameterBlockArrayComponent *a1, unint64_t a2, uint64_t a3, __n128 a4)
{
  uint64_t v7;
  const re::ecs2::SerializableMaterialParameterBlock **v8;
  const re::ecs2::SerializableMaterialParameterBlock **v9;
  uint64_t isUniquelyReferenced;
  const re::ecs2::SerializableMaterialParameterBlock *v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  __n128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  uint64_t v23;

  v23 = *MEMORY[0x24BDAC8D0];
  re::ecs2::MaterialParameterBlockArrayComponent::upgradeBlocksToBlockHandles(a1);
  if (*((_QWORD *)a1 + 6) <= a2)
  {
    re::ecs2::MaterialParameterBlockArrayComponent::resizeBlockHandles(a1, a2 + 1);
    re::ecs2::Component::enqueueMarkDirty((uint64_t)a1);
  }
  if (*((_QWORD *)a1 + 11) <= a2)
  {
    re::DynamicArray<re::SharedPtr<re::Shareable<re::AssetLoadDescriptor>>>::resize((uint64_t)a1 + 72, a2 + 1);
    re::ecs2::Component::enqueueMarkDirty((uint64_t)a1);
  }
  if (*((_QWORD *)a1 + 6) <= a2)
  {
    v21 = 0u;
    v22 = 0u;
    v19 = 0u;
    v20 = 0u;
    v18 = 0u;
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
    goto LABEL_15;
  }
  v7 = *((_QWORD *)a1 + 8);
  v8 = (const re::ecs2::SerializableMaterialParameterBlock **)(v7 + 24 * a2);
  v9 = v8 + 1;
  isUniquelyReferenced = objc_isUniquelyReferenced();
  if ((isUniquelyReferenced & 1) == 0)
  {
    if (*v8)
      v11 = *v8;
    else
      v11 = *v9;
    v12 = re::globalAllocators((re *)isUniquelyReferenced);
    v13 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v12[2] + 32))(v12[2], 408, 8);
    re::ecs2::SerializableMaterialParameterBlock::SerializableMaterialParameterBlock((re::ecs2::SerializableMaterialParameterBlock *)v13, v11);
    ++*(_DWORD *)(v7 + 24 * a2 + 16);
    re::SharedPtr<re::SkeletalPoseJointDefinition>::reset((uint64_t *)(v7 + 24 * a2), v13);
    *v9 = 0;
    if (v13)

  }
  if (*((_QWORD *)a1 + 6) <= a2)
  {
LABEL_15:
    v21 = 0u;
    v22 = 0u;
    v19 = 0u;
    v20 = 0u;
    v18 = 0u;
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  v14 = *((_QWORD *)a1 + 8) + 24 * a2;
  ++*(_DWORD *)(v14 + 16);
  v15 = *(_QWORD *)v14;
  v18 = a4;
  re::ecs2::SerializableMaterialParameterBlock::setValue<void const*>(v15, (StringID *)(a3 + 24), 10, (unsigned __int8 *)&v18);
  ++*(_DWORD *)(v15 + 400);
  return re::ecs2::Component::enqueueMarkDirty((uint64_t)a1);
}

re::MaterialParameterBlock *REMaterialParameterBlockArrayComponentGetUInt4AtIndex(re::ecs2::MaterialParameterBlockArrayComponent *a1, unint64_t a2, const char *a3, _OWORD *a4)
{
  unint64_t v8;
  uint64_t v9;
  re::ecs2::SerializableMaterialParameterBlock *v10;
  __int128 v11;
  re::MaterialParameterBlock *result;
  uint64_t v13;
  uint64_t v14;
  __int128 v15;
  uint64_t v16;
  int v17;
  const char *v18;
  __int16 v19;
  int v20;
  __int16 v21;
  unint64_t v22;
  __int16 v23;
  unint64_t v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  uint64_t v30;

  v30 = *MEMORY[0x24BDAC8D0];
  re::ecs2::MaterialParameterBlockArrayComponent::upgradeBlocksToBlockHandles(a1);
  if (*((_QWORD *)a1 + 6) <= a2)
  {
    re::ecs2::MaterialParameterBlockArrayComponent::resizeBlockHandles(a1, a2 + 1);
    re::ecs2::Component::enqueueMarkDirty((uint64_t)a1);
  }
  if (*((_QWORD *)a1 + 11) <= a2)
  {
    re::DynamicArray<re::SharedPtr<re::Shareable<re::AssetLoadDescriptor>>>::resize((uint64_t)a1 + 72, a2 + 1);
    re::ecs2::Component::enqueueMarkDirty((uint64_t)a1);
  }
  v8 = *((_QWORD *)a1 + 6);
  if (v8 <= a2)
  {
    v14 = 0;
    v28 = 0u;
    v29 = 0u;
    v26 = 0u;
    v27 = 0u;
    v25 = 0u;
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    v17 = 136315906;
    v18 = "operator[]";
    v19 = 1024;
    v20 = 789;
    v21 = 2048;
    v22 = a2;
    v23 = 2048;
    v24 = v8;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
    goto LABEL_19;
  }
  v9 = *((_QWORD *)a1 + 8);
  v10 = *(re::ecs2::SerializableMaterialParameterBlock **)(v9 + 24 * a2);
  if (!v10)
    v10 = *(re::ecs2::SerializableMaterialParameterBlock **)(v9 + 24 * a2 + 8);
  re::ecs2::SerializableMaterialParameterBlock::uint4Value(v10, a3, (uint64_t)&v14);
  if ((_BYTE)v14)
  {
    v11 = v15;
LABEL_10:
    *a4 = v11;
    return (re::MaterialParameterBlock *)1;
  }
  v8 = *((_QWORD *)a1 + 11);
  if (v8 <= a2)
  {
LABEL_19:
    v16 = 0;
    v28 = 0u;
    v29 = 0u;
    v26 = 0u;
    v27 = 0u;
    v25 = 0u;
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    v17 = 136315906;
    v18 = "operator[]";
    v19 = 1024;
    v20 = 789;
    v21 = 2048;
    v22 = a2;
    v23 = 2048;
    v24 = v8;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  v13 = *((_QWORD *)a1 + 13);
  result = *(re::MaterialParameterBlock **)(v13 + 8 * a2);
  if (result)
  {
    re::MaterialParameterBlock::handle(result, a3, (uint64_t)&v25);
    if ((BYTE12(v25) & 7) != 1 || BYTE8(v26) != 10)
      return 0;
    v11 = *(_OWORD *)re::ShaderGraphMaterial::getConstant(*(_QWORD *)(v13 + 8 * a2), (uint64_t)&v25);
    goto LABEL_10;
  }
  return result;
}

uint64_t REMaterialParameterBlockArrayComponentSetFloat2x2AtIndex(re::ecs2::MaterialParameterBlockArrayComponent *a1, unint64_t a2, char *a3, double a4, double a5)
{
  uint64_t v10;
  const re::ecs2::SerializableMaterialParameterBlock **v11;
  const re::ecs2::SerializableMaterialParameterBlock **v12;
  uint64_t isUniquelyReferenced;
  const re::ecs2::SerializableMaterialParameterBlock *v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  uint64_t v25;

  v25 = *MEMORY[0x24BDAC8D0];
  re::ecs2::MaterialParameterBlockArrayComponent::upgradeBlocksToBlockHandles(a1);
  if (*((_QWORD *)a1 + 6) <= a2)
  {
    re::ecs2::MaterialParameterBlockArrayComponent::resizeBlockHandles(a1, a2 + 1);
    re::ecs2::Component::enqueueMarkDirty((uint64_t)a1);
  }
  if (*((_QWORD *)a1 + 11) <= a2)
  {
    re::DynamicArray<re::SharedPtr<re::Shareable<re::AssetLoadDescriptor>>>::resize((uint64_t)a1 + 72, a2 + 1);
    re::ecs2::Component::enqueueMarkDirty((uint64_t)a1);
  }
  if (*((_QWORD *)a1 + 6) <= a2)
  {
    v23 = 0u;
    v24 = 0u;
    v21 = 0u;
    v22 = 0u;
    v20 = 0u;
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
    goto LABEL_15;
  }
  v10 = *((_QWORD *)a1 + 8);
  v11 = (const re::ecs2::SerializableMaterialParameterBlock **)(v10 + 24 * a2);
  v12 = v11 + 1;
  isUniquelyReferenced = objc_isUniquelyReferenced();
  if ((isUniquelyReferenced & 1) == 0)
  {
    if (*v11)
      v14 = *v11;
    else
      v14 = *v12;
    v15 = re::globalAllocators((re *)isUniquelyReferenced);
    v16 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v15[2] + 32))(v15[2], 408, 8);
    re::ecs2::SerializableMaterialParameterBlock::SerializableMaterialParameterBlock((re::ecs2::SerializableMaterialParameterBlock *)v16, v14);
    ++*(_DWORD *)(v10 + 24 * a2 + 16);
    re::SharedPtr<re::SkeletalPoseJointDefinition>::reset((uint64_t *)(v10 + 24 * a2), v16);
    *v12 = 0;
    if (v16)

  }
  if (*((_QWORD *)a1 + 6) <= a2)
  {
LABEL_15:
    v23 = 0u;
    v24 = 0u;
    v21 = 0u;
    v22 = 0u;
    v20 = 0u;
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  v17 = *((_QWORD *)a1 + 8) + 24 * a2;
  ++*(_DWORD *)(v17 + 16);
  v18 = *(_QWORD *)v17;
  *(double *)&v20 = a4;
  *((double *)&v20 + 1) = a5;
  re::ecs2::SerializableMaterialParameterBlock::setValue<void const*>(v18, a3, 48, (unsigned __int8 *)&v20);
  ++*(_DWORD *)(v18 + 400);
  return re::ecs2::Component::enqueueMarkDirty((uint64_t)a1);
}

uint64_t REMaterialParameterBlockArrayComponentSetFloat2x2WithHandleAtIndex(re::ecs2::MaterialParameterBlockArrayComponent *a1, unint64_t a2, uint64_t a3, double a4, double a5)
{
  uint64_t v10;
  const re::ecs2::SerializableMaterialParameterBlock **v11;
  const re::ecs2::SerializableMaterialParameterBlock **v12;
  uint64_t isUniquelyReferenced;
  const re::ecs2::SerializableMaterialParameterBlock *v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  uint64_t v25;

  v25 = *MEMORY[0x24BDAC8D0];
  re::ecs2::MaterialParameterBlockArrayComponent::upgradeBlocksToBlockHandles(a1);
  if (*((_QWORD *)a1 + 6) <= a2)
  {
    re::ecs2::MaterialParameterBlockArrayComponent::resizeBlockHandles(a1, a2 + 1);
    re::ecs2::Component::enqueueMarkDirty((uint64_t)a1);
  }
  if (*((_QWORD *)a1 + 11) <= a2)
  {
    re::DynamicArray<re::SharedPtr<re::Shareable<re::AssetLoadDescriptor>>>::resize((uint64_t)a1 + 72, a2 + 1);
    re::ecs2::Component::enqueueMarkDirty((uint64_t)a1);
  }
  if (*((_QWORD *)a1 + 6) <= a2)
  {
    v23 = 0u;
    v24 = 0u;
    v21 = 0u;
    v22 = 0u;
    v20 = 0u;
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
    goto LABEL_15;
  }
  v10 = *((_QWORD *)a1 + 8);
  v11 = (const re::ecs2::SerializableMaterialParameterBlock **)(v10 + 24 * a2);
  v12 = v11 + 1;
  isUniquelyReferenced = objc_isUniquelyReferenced();
  if ((isUniquelyReferenced & 1) == 0)
  {
    if (*v11)
      v14 = *v11;
    else
      v14 = *v12;
    v15 = re::globalAllocators((re *)isUniquelyReferenced);
    v16 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v15[2] + 32))(v15[2], 408, 8);
    re::ecs2::SerializableMaterialParameterBlock::SerializableMaterialParameterBlock((re::ecs2::SerializableMaterialParameterBlock *)v16, v14);
    ++*(_DWORD *)(v10 + 24 * a2 + 16);
    re::SharedPtr<re::SkeletalPoseJointDefinition>::reset((uint64_t *)(v10 + 24 * a2), v16);
    *v12 = 0;
    if (v16)

  }
  if (*((_QWORD *)a1 + 6) <= a2)
  {
LABEL_15:
    v23 = 0u;
    v24 = 0u;
    v21 = 0u;
    v22 = 0u;
    v20 = 0u;
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  v17 = *((_QWORD *)a1 + 8) + 24 * a2;
  ++*(_DWORD *)(v17 + 16);
  v18 = *(_QWORD *)v17;
  *(double *)&v20 = a4;
  *((double *)&v20 + 1) = a5;
  re::ecs2::SerializableMaterialParameterBlock::setValue<void const*>(v18, (StringID *)(a3 + 24), 48, (unsigned __int8 *)&v20);
  ++*(_DWORD *)(v18 + 400);
  return re::ecs2::Component::enqueueMarkDirty((uint64_t)a1);
}

uint64_t REMaterialParameterBlockArrayComponentGetFloat2x2AtIndex(re::ecs2::MaterialParameterBlockArrayComponent *a1, unint64_t a2, const char *a3, _QWORD *a4)
{
  unint64_t v8;
  uint64_t v9;
  re::ecs2::SerializableMaterialParameterBlock *v10;
  uint64_t v11;
  uint64_t result;
  uint64_t v13;
  _QWORD v14[4];
  int v15;
  const char *v16;
  __int16 v17;
  int v18;
  __int16 v19;
  unint64_t v20;
  __int16 v21;
  unint64_t v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  uint64_t v28;

  v28 = *MEMORY[0x24BDAC8D0];
  re::ecs2::MaterialParameterBlockArrayComponent::upgradeBlocksToBlockHandles(a1);
  if (*((_QWORD *)a1 + 6) <= a2)
  {
    re::ecs2::MaterialParameterBlockArrayComponent::resizeBlockHandles(a1, a2 + 1);
    re::ecs2::Component::enqueueMarkDirty((uint64_t)a1);
  }
  if (*((_QWORD *)a1 + 11) <= a2)
  {
    re::DynamicArray<re::SharedPtr<re::Shareable<re::AssetLoadDescriptor>>>::resize((uint64_t)a1 + 72, a2 + 1);
    re::ecs2::Component::enqueueMarkDirty((uint64_t)a1);
  }
  v8 = *((_QWORD *)a1 + 6);
  if (v8 <= a2)
  {
    v14[0] = 0;
    v26 = 0u;
    v27 = 0u;
    v24 = 0u;
    v25 = 0u;
    v23 = 0u;
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    v15 = 136315906;
    v16 = "operator[]";
    v17 = 1024;
    v18 = 789;
    v19 = 2048;
    v20 = a2;
    v21 = 2048;
    v22 = v8;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
    goto LABEL_20;
  }
  v9 = *((_QWORD *)a1 + 8);
  v10 = *(re::ecs2::SerializableMaterialParameterBlock **)(v9 + 24 * a2);
  if (!v10)
    v10 = *(re::ecs2::SerializableMaterialParameterBlock **)(v9 + 24 * a2 + 8);
  re::ecs2::SerializableMaterialParameterBlock::matrix2x2FValue(v10, a3, (uint64_t)v14);
  if (LOBYTE(v14[0]))
  {
    v11 = v14[2];
    *a4 = v14[1];
    a4[1] = v11;
    return 1;
  }
  v8 = *((_QWORD *)a1 + 11);
  if (v8 <= a2)
  {
LABEL_20:
    v14[3] = 0;
    v26 = 0u;
    v27 = 0u;
    v24 = 0u;
    v25 = 0u;
    v23 = 0u;
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    v15 = 136315906;
    v16 = "operator[]";
    v17 = 1024;
    v18 = 789;
    v19 = 2048;
    v20 = a2;
    v21 = 2048;
    v22 = v8;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  v13 = *((_QWORD *)a1 + 13);
  result = *(_QWORD *)(v13 + 8 * a2);
  if (result)
  {
    re::MaterialParameterBlock::handle((re::MaterialParameterBlock *)result, a3, (uint64_t)&v23);
    if ((BYTE12(v23) & 7) != 1 || BYTE8(v24) != 48 && BYTE8(v24) != 34)
      return 0;
    *(_OWORD *)a4 = *(_OWORD *)re::ShaderGraphMaterial::getConstant(*(_QWORD *)(v13 + 8 * a2), (uint64_t)&v23);
    return 1;
  }
  return result;
}

uint64_t REMaterialParameterBlockArrayComponentSetFloat3x3AtIndex(re::ecs2::MaterialParameterBlockArrayComponent *a1, unint64_t a2, char *a3, __n128 a4, __n128 a5, __n128 a6)
{
  uint64_t v9;
  const re::ecs2::SerializableMaterialParameterBlock **v10;
  const re::ecs2::SerializableMaterialParameterBlock **v11;
  uint64_t isUniquelyReferenced;
  const re::ecs2::SerializableMaterialParameterBlock *v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  __n128 v22;
  __n128 v23;
  __n128 v24;
  __int128 v25;
  __int128 v26;
  uint64_t v27;

  v27 = *MEMORY[0x24BDAC8D0];
  re::ecs2::MaterialParameterBlockArrayComponent::upgradeBlocksToBlockHandles(a1);
  if (*((_QWORD *)a1 + 6) <= a2)
  {
    re::ecs2::MaterialParameterBlockArrayComponent::resizeBlockHandles(a1, a2 + 1);
    re::ecs2::Component::enqueueMarkDirty((uint64_t)a1);
  }
  if (*((_QWORD *)a1 + 11) <= a2)
  {
    re::DynamicArray<re::SharedPtr<re::Shareable<re::AssetLoadDescriptor>>>::resize((uint64_t)a1 + 72, a2 + 1);
    re::ecs2::Component::enqueueMarkDirty((uint64_t)a1);
  }
  if (*((_QWORD *)a1 + 6) <= a2)
  {
    v25 = 0u;
    v26 = 0u;
    v23 = 0u;
    v24 = 0u;
    v22 = 0u;
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
    goto LABEL_15;
  }
  v9 = *((_QWORD *)a1 + 8);
  v10 = (const re::ecs2::SerializableMaterialParameterBlock **)(v9 + 24 * a2);
  v11 = v10 + 1;
  isUniquelyReferenced = objc_isUniquelyReferenced();
  if ((isUniquelyReferenced & 1) == 0)
  {
    if (*v10)
      v13 = *v10;
    else
      v13 = *v11;
    v14 = re::globalAllocators((re *)isUniquelyReferenced);
    v15 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v14[2] + 32))(v14[2], 408, 8);
    re::ecs2::SerializableMaterialParameterBlock::SerializableMaterialParameterBlock((re::ecs2::SerializableMaterialParameterBlock *)v15, v13);
    ++*(_DWORD *)(v9 + 24 * a2 + 16);
    re::SharedPtr<re::SkeletalPoseJointDefinition>::reset((uint64_t *)(v9 + 24 * a2), v15);
    *v11 = 0;
    if (v15)

  }
  if (*((_QWORD *)a1 + 6) <= a2)
  {
LABEL_15:
    v25 = 0u;
    v26 = 0u;
    v23 = 0u;
    v24 = 0u;
    v22 = 0u;
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  v16 = *((_QWORD *)a1 + 8) + 24 * a2;
  ++*(_DWORD *)(v16 + 16);
  v17 = *(_QWORD *)v16;
  v22 = a4;
  v23 = a5;
  v24 = a6;
  re::ecs2::SerializableMaterialParameterBlock::setValue<void const*>(v17, a3, 49, (unsigned __int8 *)&v22);
  ++*(_DWORD *)(v17 + 400);
  return re::ecs2::Component::enqueueMarkDirty((uint64_t)a1);
}

uint64_t REMaterialParameterBlockArrayComponentSetFloat3x3WithHandleAtIndex(re::ecs2::MaterialParameterBlockArrayComponent *a1, unint64_t a2, uint64_t a3, __n128 a4, __n128 a5, __n128 a6)
{
  uint64_t v9;
  const re::ecs2::SerializableMaterialParameterBlock **v10;
  const re::ecs2::SerializableMaterialParameterBlock **v11;
  uint64_t isUniquelyReferenced;
  const re::ecs2::SerializableMaterialParameterBlock *v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  __n128 v22;
  __n128 v23;
  __n128 v24;
  __int128 v25;
  __int128 v26;
  uint64_t v27;

  v27 = *MEMORY[0x24BDAC8D0];
  re::ecs2::MaterialParameterBlockArrayComponent::upgradeBlocksToBlockHandles(a1);
  if (*((_QWORD *)a1 + 6) <= a2)
  {
    re::ecs2::MaterialParameterBlockArrayComponent::resizeBlockHandles(a1, a2 + 1);
    re::ecs2::Component::enqueueMarkDirty((uint64_t)a1);
  }
  if (*((_QWORD *)a1 + 11) <= a2)
  {
    re::DynamicArray<re::SharedPtr<re::Shareable<re::AssetLoadDescriptor>>>::resize((uint64_t)a1 + 72, a2 + 1);
    re::ecs2::Component::enqueueMarkDirty((uint64_t)a1);
  }
  if (*((_QWORD *)a1 + 6) <= a2)
  {
    v25 = 0u;
    v26 = 0u;
    v23 = 0u;
    v24 = 0u;
    v22 = 0u;
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
    goto LABEL_15;
  }
  v9 = *((_QWORD *)a1 + 8);
  v10 = (const re::ecs2::SerializableMaterialParameterBlock **)(v9 + 24 * a2);
  v11 = v10 + 1;
  isUniquelyReferenced = objc_isUniquelyReferenced();
  if ((isUniquelyReferenced & 1) == 0)
  {
    if (*v10)
      v13 = *v10;
    else
      v13 = *v11;
    v14 = re::globalAllocators((re *)isUniquelyReferenced);
    v15 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v14[2] + 32))(v14[2], 408, 8);
    re::ecs2::SerializableMaterialParameterBlock::SerializableMaterialParameterBlock((re::ecs2::SerializableMaterialParameterBlock *)v15, v13);
    ++*(_DWORD *)(v9 + 24 * a2 + 16);
    re::SharedPtr<re::SkeletalPoseJointDefinition>::reset((uint64_t *)(v9 + 24 * a2), v15);
    *v11 = 0;
    if (v15)

  }
  if (*((_QWORD *)a1 + 6) <= a2)
  {
LABEL_15:
    v25 = 0u;
    v26 = 0u;
    v23 = 0u;
    v24 = 0u;
    v22 = 0u;
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  v16 = *((_QWORD *)a1 + 8) + 24 * a2;
  ++*(_DWORD *)(v16 + 16);
  v17 = *(_QWORD *)v16;
  v22 = a4;
  v23 = a5;
  v24 = a6;
  re::ecs2::SerializableMaterialParameterBlock::setValue<void const*>(v17, (StringID *)(a3 + 24), 49, (unsigned __int8 *)&v22);
  ++*(_DWORD *)(v17 + 400);
  return re::ecs2::Component::enqueueMarkDirty((uint64_t)a1);
}

uint64_t REMaterialParameterBlockArrayComponentGetFloat3x3AtIndex(re::ecs2::MaterialParameterBlockArrayComponent *a1, unint64_t a2, const char *a3, uint64_t a4)
{
  unint64_t v8;
  uint64_t v9;
  re::ecs2::SerializableMaterialParameterBlock *v10;
  uint64_t v11;
  __int128 v12;
  __int128 v13;
  uint64_t result;
  uint64_t v15;
  unint64_t Constant;
  int v17;
  int v18;
  uint64_t v19;
  int v20;
  uint64_t v21;
  int v22;
  const char *v23;
  __int16 v24;
  _BYTE v25[14];
  __int16 v26;
  _BYTE v27[18];
  __int128 v28;
  _BYTE v29[12];
  __int16 v30;
  int v31;
  __int16 v32;
  unint64_t v33;
  __int16 v34;
  unint64_t v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  uint64_t v41;

  v41 = *MEMORY[0x24BDAC8D0];
  re::ecs2::MaterialParameterBlockArrayComponent::upgradeBlocksToBlockHandles(a1);
  if (*((_QWORD *)a1 + 6) <= a2)
  {
    re::ecs2::MaterialParameterBlockArrayComponent::resizeBlockHandles(a1, a2 + 1);
    re::ecs2::Component::enqueueMarkDirty((uint64_t)a1);
  }
  if (*((_QWORD *)a1 + 11) <= a2)
  {
    re::DynamicArray<re::SharedPtr<re::Shareable<re::AssetLoadDescriptor>>>::resize((uint64_t)a1 + 72, a2 + 1);
    re::ecs2::Component::enqueueMarkDirty((uint64_t)a1);
  }
  v8 = *((_QWORD *)a1 + 6);
  if (v8 <= a2)
  {
    *(_QWORD *)v29 = 0;
    v39 = 0u;
    v40 = 0u;
    v37 = 0u;
    v38 = 0u;
    v36 = 0u;
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    v22 = 136315906;
    v23 = "operator[]";
    v24 = 1024;
    *(_DWORD *)v25 = 789;
    *(_WORD *)&v25[4] = 2048;
    *(_QWORD *)&v25[6] = a2;
    v26 = 2048;
    *(_QWORD *)v27 = v8;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
    goto LABEL_19;
  }
  v9 = *((_QWORD *)a1 + 8);
  v10 = *(re::ecs2::SerializableMaterialParameterBlock **)(v9 + 24 * a2);
  if (!v10)
    v10 = *(re::ecs2::SerializableMaterialParameterBlock **)(v9 + 24 * a2 + 8);
  re::ecs2::SerializableMaterialParameterBlock::matrix3x3FValue(v10, a3, (uint64_t)&v22);
  if ((_BYTE)v22)
  {
    v11 = *(_QWORD *)&v25[2];
    v12 = *(_OWORD *)&v27[2];
    v13 = v28;
    *(_DWORD *)(a4 + 8) = *(_DWORD *)&v25[10];
    *(_QWORD *)a4 = v11;
    *(_DWORD *)(a4 + 24) = DWORD2(v12);
    *(_QWORD *)(a4 + 16) = v12;
    *(_DWORD *)(a4 + 40) = DWORD2(v13);
    *(_QWORD *)(a4 + 32) = v13;
    return 1;
  }
  v8 = *((_QWORD *)a1 + 11);
  if (v8 <= a2)
  {
LABEL_19:
    v39 = 0u;
    v40 = 0u;
    v37 = 0u;
    v38 = 0u;
    v36 = 0u;
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    *(_DWORD *)v29 = 136315906;
    *(_QWORD *)&v29[4] = "operator[]";
    v30 = 1024;
    v31 = 789;
    v32 = 2048;
    v33 = a2;
    v34 = 2048;
    v35 = v8;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  v15 = *((_QWORD *)a1 + 13);
  result = *(_QWORD *)(v15 + 8 * a2);
  if (result)
  {
    re::MaterialParameterBlock::handle((re::MaterialParameterBlock *)result, a3, (uint64_t)&v36);
    if ((BYTE12(v36) & 7) != 1 || BYTE8(v37) != 49)
      return 0;
    Constant = re::ShaderGraphMaterial::getConstant(*(_QWORD *)(v15 + 8 * a2), (uint64_t)&v36);
    v17 = *(_DWORD *)(Constant + 8);
    v18 = *(_DWORD *)(Constant + 24);
    v19 = *(_QWORD *)(Constant + 16);
    v20 = *(_DWORD *)(Constant + 40);
    v21 = *(_QWORD *)(Constant + 32);
    *(_QWORD *)a4 = *(_QWORD *)Constant;
    *(_DWORD *)(a4 + 8) = v17;
    *(_QWORD *)(a4 + 16) = v19;
    *(_DWORD *)(a4 + 24) = v18;
    *(_QWORD *)(a4 + 32) = v21;
    *(_DWORD *)(a4 + 40) = v20;
    return 1;
  }
  return result;
}

uint64_t REMaterialParameterBlockArrayComponentSetFloat4x4AtIndex(re::ecs2::MaterialParameterBlockArrayComponent *a1, unint64_t a2, char *a3, __n128 a4, __n128 a5, __n128 a6, __n128 a7)
{
  uint64_t v10;
  const re::ecs2::SerializableMaterialParameterBlock **v11;
  const re::ecs2::SerializableMaterialParameterBlock **v12;
  uint64_t isUniquelyReferenced;
  const re::ecs2::SerializableMaterialParameterBlock *v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  __n128 v24;
  __n128 v25;
  __n128 v26;
  __n128 v27;
  __int128 v28;
  uint64_t v29;

  v29 = *MEMORY[0x24BDAC8D0];
  re::ecs2::MaterialParameterBlockArrayComponent::upgradeBlocksToBlockHandles(a1);
  if (*((_QWORD *)a1 + 6) <= a2)
  {
    re::ecs2::MaterialParameterBlockArrayComponent::resizeBlockHandles(a1, a2 + 1);
    re::ecs2::Component::enqueueMarkDirty((uint64_t)a1);
  }
  if (*((_QWORD *)a1 + 11) <= a2)
  {
    re::DynamicArray<re::SharedPtr<re::Shareable<re::AssetLoadDescriptor>>>::resize((uint64_t)a1 + 72, a2 + 1);
    re::ecs2::Component::enqueueMarkDirty((uint64_t)a1);
  }
  if (*((_QWORD *)a1 + 6) <= a2)
  {
    v27 = 0u;
    v28 = 0u;
    v25 = 0u;
    v26 = 0u;
    v24 = 0u;
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
    goto LABEL_15;
  }
  v10 = *((_QWORD *)a1 + 8);
  v11 = (const re::ecs2::SerializableMaterialParameterBlock **)(v10 + 24 * a2);
  v12 = v11 + 1;
  isUniquelyReferenced = objc_isUniquelyReferenced();
  if ((isUniquelyReferenced & 1) == 0)
  {
    if (*v11)
      v14 = *v11;
    else
      v14 = *v12;
    v15 = re::globalAllocators((re *)isUniquelyReferenced);
    v16 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v15[2] + 32))(v15[2], 408, 8);
    re::ecs2::SerializableMaterialParameterBlock::SerializableMaterialParameterBlock((re::ecs2::SerializableMaterialParameterBlock *)v16, v14);
    ++*(_DWORD *)(v10 + 24 * a2 + 16);
    re::SharedPtr<re::SkeletalPoseJointDefinition>::reset((uint64_t *)(v10 + 24 * a2), v16);
    *v12 = 0;
    if (v16)

  }
  if (*((_QWORD *)a1 + 6) <= a2)
  {
LABEL_15:
    v27 = 0u;
    v28 = 0u;
    v25 = 0u;
    v26 = 0u;
    v24 = 0u;
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  v17 = *((_QWORD *)a1 + 8) + 24 * a2;
  ++*(_DWORD *)(v17 + 16);
  v18 = *(_QWORD *)v17;
  v24 = a4;
  v25 = a5;
  v26 = a6;
  v27 = a7;
  re::ecs2::SerializableMaterialParameterBlock::setValue<void const*>(v18, a3, 50, (unsigned __int8 *)&v24);
  ++*(_DWORD *)(v18 + 400);
  return re::ecs2::Component::enqueueMarkDirty((uint64_t)a1);
}

uint64_t REMaterialParameterBlockArrayComponentSetFloat4x4WithHandleAtIndex(re::ecs2::MaterialParameterBlockArrayComponent *a1, unint64_t a2, uint64_t a3, __n128 a4, __n128 a5, __n128 a6, __n128 a7)
{
  uint64_t v10;
  const re::ecs2::SerializableMaterialParameterBlock **v11;
  const re::ecs2::SerializableMaterialParameterBlock **v12;
  uint64_t isUniquelyReferenced;
  const re::ecs2::SerializableMaterialParameterBlock *v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  __n128 v24;
  __n128 v25;
  __n128 v26;
  __n128 v27;
  __int128 v28;
  uint64_t v29;

  v29 = *MEMORY[0x24BDAC8D0];
  re::ecs2::MaterialParameterBlockArrayComponent::upgradeBlocksToBlockHandles(a1);
  if (*((_QWORD *)a1 + 6) <= a2)
  {
    re::ecs2::MaterialParameterBlockArrayComponent::resizeBlockHandles(a1, a2 + 1);
    re::ecs2::Component::enqueueMarkDirty((uint64_t)a1);
  }
  if (*((_QWORD *)a1 + 11) <= a2)
  {
    re::DynamicArray<re::SharedPtr<re::Shareable<re::AssetLoadDescriptor>>>::resize((uint64_t)a1 + 72, a2 + 1);
    re::ecs2::Component::enqueueMarkDirty((uint64_t)a1);
  }
  if (*((_QWORD *)a1 + 6) <= a2)
  {
    v27 = 0u;
    v28 = 0u;
    v25 = 0u;
    v26 = 0u;
    v24 = 0u;
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
    goto LABEL_15;
  }
  v10 = *((_QWORD *)a1 + 8);
  v11 = (const re::ecs2::SerializableMaterialParameterBlock **)(v10 + 24 * a2);
  v12 = v11 + 1;
  isUniquelyReferenced = objc_isUniquelyReferenced();
  if ((isUniquelyReferenced & 1) == 0)
  {
    if (*v11)
      v14 = *v11;
    else
      v14 = *v12;
    v15 = re::globalAllocators((re *)isUniquelyReferenced);
    v16 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v15[2] + 32))(v15[2], 408, 8);
    re::ecs2::SerializableMaterialParameterBlock::SerializableMaterialParameterBlock((re::ecs2::SerializableMaterialParameterBlock *)v16, v14);
    ++*(_DWORD *)(v10 + 24 * a2 + 16);
    re::SharedPtr<re::SkeletalPoseJointDefinition>::reset((uint64_t *)(v10 + 24 * a2), v16);
    *v12 = 0;
    if (v16)

  }
  if (*((_QWORD *)a1 + 6) <= a2)
  {
LABEL_15:
    v27 = 0u;
    v28 = 0u;
    v25 = 0u;
    v26 = 0u;
    v24 = 0u;
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  v17 = *((_QWORD *)a1 + 8) + 24 * a2;
  ++*(_DWORD *)(v17 + 16);
  v18 = *(_QWORD *)v17;
  v24 = a4;
  v25 = a5;
  v26 = a6;
  v27 = a7;
  re::ecs2::SerializableMaterialParameterBlock::setValue<void const*>(v18, (StringID *)(a3 + 24), 50, (unsigned __int8 *)&v24);
  ++*(_DWORD *)(v18 + 400);
  return re::ecs2::Component::enqueueMarkDirty((uint64_t)a1);
}

re::MaterialParameterBlock *REMaterialParameterBlockArrayComponentGetFloat4x4AtIndex(re::ecs2::MaterialParameterBlockArrayComponent *a1, unint64_t a2, const char *a3, _OWORD *a4)
{
  unint64_t v8;
  uint64_t v9;
  re::ecs2::SerializableMaterialParameterBlock *v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  re::MaterialParameterBlock *result;
  uint64_t v16;
  __int128 *Constant;
  int v18;
  const char *v19;
  __int16 v20;
  _BYTE v21[34];
  __int128 v22;
  __int128 v23;
  _BYTE v24[12];
  __int16 v25;
  int v26;
  __int16 v27;
  unint64_t v28;
  __int16 v29;
  unint64_t v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  uint64_t v36;

  v36 = *MEMORY[0x24BDAC8D0];
  re::ecs2::MaterialParameterBlockArrayComponent::upgradeBlocksToBlockHandles(a1);
  if (*((_QWORD *)a1 + 6) <= a2)
  {
    re::ecs2::MaterialParameterBlockArrayComponent::resizeBlockHandles(a1, a2 + 1);
    re::ecs2::Component::enqueueMarkDirty((uint64_t)a1);
  }
  if (*((_QWORD *)a1 + 11) <= a2)
  {
    re::DynamicArray<re::SharedPtr<re::Shareable<re::AssetLoadDescriptor>>>::resize((uint64_t)a1 + 72, a2 + 1);
    re::ecs2::Component::enqueueMarkDirty((uint64_t)a1);
  }
  v8 = *((_QWORD *)a1 + 6);
  if (v8 <= a2)
  {
    *(_QWORD *)v24 = 0;
    v34 = 0u;
    v35 = 0u;
    v32 = 0u;
    v33 = 0u;
    v31 = 0u;
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    v18 = 136315906;
    v19 = "operator[]";
    v20 = 1024;
    *(_DWORD *)v21 = 789;
    *(_WORD *)&v21[4] = 2048;
    *(_QWORD *)&v21[6] = a2;
    *(_WORD *)&v21[14] = 2048;
    *(_QWORD *)&v21[16] = v8;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
    goto LABEL_19;
  }
  v9 = *((_QWORD *)a1 + 8);
  v10 = *(re::ecs2::SerializableMaterialParameterBlock **)(v9 + 24 * a2);
  if (!v10)
    v10 = *(re::ecs2::SerializableMaterialParameterBlock **)(v9 + 24 * a2 + 8);
  re::ecs2::SerializableMaterialParameterBlock::matrix4x4FValue(v10, a3, (uint64_t)&v18);
  if ((_BYTE)v18)
  {
    v11 = *(_OWORD *)&v21[2];
    v12 = *(_OWORD *)&v21[18];
    v13 = v22;
    v14 = v23;
LABEL_10:
    *a4 = v11;
    a4[1] = v12;
    a4[2] = v13;
    a4[3] = v14;
    return (re::MaterialParameterBlock *)1;
  }
  v8 = *((_QWORD *)a1 + 11);
  if (v8 <= a2)
  {
LABEL_19:
    v34 = 0u;
    v35 = 0u;
    v32 = 0u;
    v33 = 0u;
    v31 = 0u;
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    *(_DWORD *)v24 = 136315906;
    *(_QWORD *)&v24[4] = "operator[]";
    v25 = 1024;
    v26 = 789;
    v27 = 2048;
    v28 = a2;
    v29 = 2048;
    v30 = v8;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  v16 = *((_QWORD *)a1 + 13);
  result = *(re::MaterialParameterBlock **)(v16 + 8 * a2);
  if (result)
  {
    re::MaterialParameterBlock::handle(result, a3, (uint64_t)&v31);
    if ((BYTE12(v31) & 7) != 1 || BYTE8(v32) != 50)
      return 0;
    Constant = (__int128 *)re::ShaderGraphMaterial::getConstant(*(_QWORD *)(v16 + 8 * a2), (uint64_t)&v31);
    v11 = *Constant;
    v12 = Constant[1];
    v13 = Constant[2];
    v14 = Constant[3];
    goto LABEL_10;
  }
  return result;
}

void REMaterialParameterBlockArrayComponentSetTextureAtIndexFromAsset(re::ecs2::MaterialParameterBlockArrayComponent *a1, unint64_t a2, char *a3, uint64_t a4)
{
  unint64_t v7;
  uint64_t v8;
  const re::ecs2::SerializableMaterialParameterBlock **v9;
  const re::ecs2::SerializableMaterialParameterBlock **v10;
  uint64_t isUniquelyReferenced;
  const re::ecs2::SerializableMaterialParameterBlock *v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17[3];
  uint64_t v18;
  int v19;
  const char *v20;
  __int16 v21;
  int v22;
  __int16 v23;
  unint64_t v24;
  __int16 v25;
  unint64_t v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  uint64_t v32;

  v32 = *MEMORY[0x24BDAC8D0];
  re::AssetAPIHelper::assetHandleCreate(a4, v17);
  re::ecs2::MaterialParameterBlockArrayComponent::upgradeBlocksToBlockHandles(a1);
  if (*((_QWORD *)a1 + 6) <= a2)
  {
    re::ecs2::MaterialParameterBlockArrayComponent::resizeBlockHandles(a1, a2 + 1);
    re::ecs2::Component::enqueueMarkDirty((uint64_t)a1);
  }
  if (*((_QWORD *)a1 + 11) <= a2)
  {
    re::DynamicArray<re::SharedPtr<re::Shareable<re::AssetLoadDescriptor>>>::resize((uint64_t)a1 + 72, a2 + 1);
    re::ecs2::Component::enqueueMarkDirty((uint64_t)a1);
  }
  v7 = *((_QWORD *)a1 + 6);
  if (v7 <= a2)
  {
    v18 = 0;
    v30 = 0u;
    v31 = 0u;
    v28 = 0u;
    v29 = 0u;
    v27 = 0u;
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    v19 = 136315906;
    v20 = "operator[]";
    v21 = 1024;
    v22 = 789;
    v23 = 2048;
    v24 = a2;
    v25 = 2048;
    v26 = v7;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
    goto LABEL_15;
  }
  v8 = *((_QWORD *)a1 + 8);
  v9 = (const re::ecs2::SerializableMaterialParameterBlock **)(v8 + 24 * a2);
  v10 = v9 + 1;
  isUniquelyReferenced = objc_isUniquelyReferenced();
  if ((isUniquelyReferenced & 1) == 0)
  {
    if (*v9)
      v12 = *v9;
    else
      v12 = *v10;
    v13 = re::globalAllocators((re *)isUniquelyReferenced);
    v14 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v13[2] + 32))(v13[2], 408, 8);
    re::ecs2::SerializableMaterialParameterBlock::SerializableMaterialParameterBlock((re::ecs2::SerializableMaterialParameterBlock *)v14, v12);
    ++*(_DWORD *)(v8 + 24 * a2 + 16);
    re::SharedPtr<re::SkeletalPoseJointDefinition>::reset((uint64_t *)(v8 + 24 * a2), v14);
    *v10 = 0;
    if (v14)

  }
  v7 = *((_QWORD *)a1 + 6);
  if (v7 <= a2)
  {
LABEL_15:
    v18 = 0;
    v30 = 0u;
    v31 = 0u;
    v28 = 0u;
    v29 = 0u;
    v27 = 0u;
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    v19 = 136315906;
    v20 = "operator[]";
    v21 = 1024;
    v22 = 789;
    v23 = 2048;
    v24 = a2;
    v25 = 2048;
    v26 = v7;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  v15 = *((_QWORD *)a1 + 8) + 24 * a2;
  ++*(_DWORD *)(v15 + 16);
  v16 = *(_QWORD *)v15;
  re::AssetHandle::AssetHandle((re::AssetHandle *)&v27, (const re::AssetHandle *)v17);
  re::ecs2::SerializableMaterialParameterBlock::setTexture(v16, a3, (const re::AssetHandle *)&v27);
  re::AssetHandle::~AssetHandle((re::AssetHandle *)&v27);
  re::ecs2::Component::enqueueMarkDirty((uint64_t)a1);
  re::AssetHandle::~AssetHandle((re::AssetHandle *)v17);
}

void REMaterialParameterBlockArrayComponentSetTextureWithHandleAtIndexFromAsset(re::ecs2::MaterialParameterBlockArrayComponent *a1, unint64_t a2, uint64_t a3, uint64_t a4)
{
  unint64_t v7;
  uint64_t v8;
  const re::ecs2::SerializableMaterialParameterBlock **v9;
  const re::ecs2::SerializableMaterialParameterBlock **v10;
  uint64_t isUniquelyReferenced;
  const re::ecs2::SerializableMaterialParameterBlock *v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17[3];
  uint64_t v18;
  int v19;
  const char *v20;
  __int16 v21;
  int v22;
  __int16 v23;
  unint64_t v24;
  __int16 v25;
  unint64_t v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  uint64_t v32;

  v32 = *MEMORY[0x24BDAC8D0];
  re::AssetAPIHelper::assetHandleCreate(a4, v17);
  re::ecs2::MaterialParameterBlockArrayComponent::upgradeBlocksToBlockHandles(a1);
  if (*((_QWORD *)a1 + 6) <= a2)
  {
    re::ecs2::MaterialParameterBlockArrayComponent::resizeBlockHandles(a1, a2 + 1);
    re::ecs2::Component::enqueueMarkDirty((uint64_t)a1);
  }
  if (*((_QWORD *)a1 + 11) <= a2)
  {
    re::DynamicArray<re::SharedPtr<re::Shareable<re::AssetLoadDescriptor>>>::resize((uint64_t)a1 + 72, a2 + 1);
    re::ecs2::Component::enqueueMarkDirty((uint64_t)a1);
  }
  v7 = *((_QWORD *)a1 + 6);
  if (v7 <= a2)
  {
    v18 = 0;
    v30 = 0u;
    v31 = 0u;
    v28 = 0u;
    v29 = 0u;
    v27 = 0u;
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    v19 = 136315906;
    v20 = "operator[]";
    v21 = 1024;
    v22 = 789;
    v23 = 2048;
    v24 = a2;
    v25 = 2048;
    v26 = v7;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
    goto LABEL_15;
  }
  v8 = *((_QWORD *)a1 + 8);
  v9 = (const re::ecs2::SerializableMaterialParameterBlock **)(v8 + 24 * a2);
  v10 = v9 + 1;
  isUniquelyReferenced = objc_isUniquelyReferenced();
  if ((isUniquelyReferenced & 1) == 0)
  {
    if (*v9)
      v12 = *v9;
    else
      v12 = *v10;
    v13 = re::globalAllocators((re *)isUniquelyReferenced);
    v14 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v13[2] + 32))(v13[2], 408, 8);
    re::ecs2::SerializableMaterialParameterBlock::SerializableMaterialParameterBlock((re::ecs2::SerializableMaterialParameterBlock *)v14, v12);
    ++*(_DWORD *)(v8 + 24 * a2 + 16);
    re::SharedPtr<re::SkeletalPoseJointDefinition>::reset((uint64_t *)(v8 + 24 * a2), v14);
    *v10 = 0;
    if (v14)

  }
  v7 = *((_QWORD *)a1 + 6);
  if (v7 <= a2)
  {
LABEL_15:
    v18 = 0;
    v30 = 0u;
    v31 = 0u;
    v28 = 0u;
    v29 = 0u;
    v27 = 0u;
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    v19 = 136315906;
    v20 = "operator[]";
    v21 = 1024;
    v22 = 789;
    v23 = 2048;
    v24 = a2;
    v25 = 2048;
    v26 = v7;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  v15 = *((_QWORD *)a1 + 8) + 24 * a2;
  ++*(_DWORD *)(v15 + 16);
  v16 = *(_QWORD *)v15;
  re::AssetHandle::AssetHandle((re::AssetHandle *)&v27, (const re::AssetHandle *)v17);
  re::ecs2::SerializableMaterialParameterBlock::setTexture(v16, (StringID *)(a3 + 24), (const re::AssetHandle *)&v27);
  re::AssetHandle::~AssetHandle((re::AssetHandle *)&v27);
  re::ecs2::Component::enqueueMarkDirty((uint64_t)a1);
  re::AssetHandle::~AssetHandle((re::AssetHandle *)v17);
}

uint64_t REMaterialParameterBlockArrayComponentGetTextureAssetAtIndex(re::ecs2::MaterialParameterBlockArrayComponent *a1, unint64_t a2, const char *a3)
{
  unint64_t v6;
  uint64_t v7;
  re::ecs2::SerializableMaterialParameterBlock *v8;
  uint64_t v9;
  _BYTE v11[12];
  __int16 v12;
  int v13;
  __int16 v14;
  unint64_t v15;
  __int16 v16;
  unint64_t v17;
  _OWORD v18[5];
  uint64_t v19;

  v19 = *MEMORY[0x24BDAC8D0];
  re::ecs2::MaterialParameterBlockArrayComponent::upgradeBlocksToBlockHandles(a1);
  if (*((_QWORD *)a1 + 6) <= a2)
  {
    re::ecs2::MaterialParameterBlockArrayComponent::resizeBlockHandles(a1, a2 + 1);
    re::ecs2::Component::enqueueMarkDirty((uint64_t)a1);
  }
  if (*((_QWORD *)a1 + 11) <= a2)
  {
    re::DynamicArray<re::SharedPtr<re::Shareable<re::AssetLoadDescriptor>>>::resize((uint64_t)a1 + 72, a2 + 1);
    re::ecs2::Component::enqueueMarkDirty((uint64_t)a1);
  }
  v6 = *((_QWORD *)a1 + 6);
  if (v6 <= a2)
  {
    memset(v18, 0, sizeof(v18));
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    *(_DWORD *)v11 = 136315906;
    *(_QWORD *)&v11[4] = "operator[]";
    v12 = 1024;
    v13 = 789;
    v14 = 2048;
    v15 = a2;
    v16 = 2048;
    v17 = v6;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  v7 = *((_QWORD *)a1 + 8);
  v8 = *(re::ecs2::SerializableMaterialParameterBlock **)(v7 + 24 * a2);
  if (!v8)
    v8 = *(re::ecs2::SerializableMaterialParameterBlock **)(v7 + 24 * a2 + 8);
  re::ecs2::SerializableMaterialParameterBlock::textureValue(v8, a3, (uint64_t)v18);
  if (!LOBYTE(v18[0]))
    return 0;
  re::AssetHandle::AssetHandle((re::AssetHandle *)v11, (const re::AssetHandle *)((char *)v18 + 8));
  v9 = *(_QWORD *)v11;
  re::AssetHandle::~AssetHandle((re::AssetHandle *)v11);
  if (LOBYTE(v18[0]))
    re::AssetHandle::~AssetHandle((re::AssetHandle *)((char *)v18 + 8));
  return v9;
}

uint64_t REMaterialParameterBlockArrayComponentSetBufferDataAtIndex(re::ecs2::MaterialParameterBlockArrayComponent *a1, unint64_t a2, char *a3, const void *a4, unint64_t a5)
{
  uint64_t result;
  unint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  _QWORD *v14;
  uint64_t isUniquelyReferenced;
  const re::ecs2::SerializableMaterialParameterBlock *v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20[3];
  int v21;
  void *__dst;
  uint64_t v23;
  int v24;
  const char *v25;
  __int16 v26;
  int v27;
  __int16 v28;
  unint64_t v29;
  __int16 v30;
  unint64_t v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  uint64_t v37;

  v37 = *MEMORY[0x24BDAC8D0];
  result = _os_feature_enabled_impl();
  if (!(_DWORD)result)
    return result;
  re::ecs2::MaterialParameterBlockArrayComponent::upgradeBlocksToBlockHandles(a1);
  if (*((_QWORD *)a1 + 6) <= a2)
  {
    re::ecs2::MaterialParameterBlockArrayComponent::resizeBlockHandles(a1, a2 + 1);
    re::ecs2::Component::enqueueMarkDirty((uint64_t)a1);
  }
  if (*((_QWORD *)a1 + 11) <= a2)
  {
    re::DynamicArray<re::SharedPtr<re::Shareable<re::AssetLoadDescriptor>>>::resize((uint64_t)a1 + 72, a2 + 1);
    re::ecs2::Component::enqueueMarkDirty((uint64_t)a1);
  }
  __dst = 0;
  memset(v20, 0, sizeof(v20));
  v21 = 0;
  re::DynamicArray<BOOL>::resize((uint64_t)v20, a5);
  memcpy(__dst, a4, a5);
  v11 = *((_QWORD *)a1 + 6);
  if (v11 <= a2)
  {
    v23 = 0;
    v35 = 0u;
    v36 = 0u;
    v33 = 0u;
    v34 = 0u;
    v32 = 0u;
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    v24 = 136315906;
    v25 = "operator[]";
    v26 = 1024;
    v27 = 789;
    v28 = 2048;
    v29 = a2;
    v30 = 2048;
    v31 = v11;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
    goto LABEL_19;
  }
  v12 = *((_QWORD *)a1 + 8);
  v13 = (_QWORD *)(v12 + 24 * a2);
  v14 = v13 + 1;
  isUniquelyReferenced = objc_isUniquelyReferenced();
  if ((isUniquelyReferenced & 1) == 0)
  {
    v16 = (const re::ecs2::SerializableMaterialParameterBlock *)(*v13 ? *v13 : *v14);
    v17 = re::globalAllocators((re *)isUniquelyReferenced);
    v18 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v17[2] + 32))(v17[2], 408, 8);
    re::ecs2::SerializableMaterialParameterBlock::SerializableMaterialParameterBlock((re::ecs2::SerializableMaterialParameterBlock *)v18, v16);
    ++*(_DWORD *)(v12 + 24 * a2 + 16);
    re::SharedPtr<re::SkeletalPoseJointDefinition>::reset((uint64_t *)(v12 + 24 * a2), v18);
    *v14 = 0;
    if (v18)

  }
  v11 = *((_QWORD *)a1 + 6);
  if (v11 <= a2)
  {
LABEL_19:
    v23 = 0;
    v35 = 0u;
    v36 = 0u;
    v33 = 0u;
    v34 = 0u;
    v32 = 0u;
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    v24 = 136315906;
    v25 = "operator[]";
    v26 = 1024;
    v27 = 789;
    v28 = 2048;
    v29 = a2;
    v30 = 2048;
    v31 = v11;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  v19 = *((_QWORD *)a1 + 8) + 24 * a2;
  ++*(_DWORD *)(v19 + 16);
  re::ecs2::SerializableMaterialParameterBlock::setBufferData(*(_QWORD *)v19, a3, v20);
  re::ecs2::Component::enqueueMarkDirty((uint64_t)a1);
  result = v20[0];
  if (v20[0])
  {
    if (__dst)
      return (*(uint64_t (**)(void))(*(_QWORD *)v20[0] + 40))();
  }
  return result;
}

void REMaterialParameterBlockArrayComponentSetSamplerAtIndex(re::ecs2::MaterialParameterBlockArrayComponent *a1, unint64_t a2, char *a3, void *a4)
{
  id v7;
  unint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  _QWORD *v11;
  uint64_t isUniquelyReferenced;
  const re::ecs2::SerializableMaterialParameterBlock *v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  id v18;
  id v19;
  char v20[104];
  uint64_t v21;
  int v22;
  const char *v23;
  __int16 v24;
  int v25;
  __int16 v26;
  unint64_t v27;
  __int16 v28;
  unint64_t v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  uint64_t v35;

  v35 = *MEMORY[0x24BDAC8D0];
  v7 = a4;
  re::ecs2::MaterialParameterBlockArrayComponent::upgradeBlocksToBlockHandles(a1);
  if (*((_QWORD *)a1 + 6) <= a2)
  {
    re::ecs2::MaterialParameterBlockArrayComponent::resizeBlockHandles(a1, a2 + 1);
    re::ecs2::Component::enqueueMarkDirty((uint64_t)a1);
  }
  if (*((_QWORD *)a1 + 11) <= a2)
  {
    re::DynamicArray<re::SharedPtr<re::Shareable<re::AssetLoadDescriptor>>>::resize((uint64_t)a1 + 72, a2 + 1);
    re::ecs2::Component::enqueueMarkDirty((uint64_t)a1);
  }
  v8 = *((_QWORD *)a1 + 6);
  if (v8 <= a2)
  {
    v21 = 0;
    v33 = 0u;
    v34 = 0u;
    v31 = 0u;
    v32 = 0u;
    v30 = 0u;
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    v22 = 136315906;
    v23 = "operator[]";
    v24 = 1024;
    v25 = 789;
    v26 = 2048;
    v27 = a2;
    v28 = 2048;
    v29 = v8;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
    goto LABEL_17;
  }
  v9 = *((_QWORD *)a1 + 8);
  v10 = (_QWORD *)(v9 + 24 * a2);
  v11 = v10 + 1;
  isUniquelyReferenced = objc_isUniquelyReferenced();
  if ((isUniquelyReferenced & 1) == 0)
  {
    v13 = (const re::ecs2::SerializableMaterialParameterBlock *)(*v10 ? *v10 : *v11);
    v14 = re::globalAllocators((re *)isUniquelyReferenced);
    v15 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v14[2] + 32))(v14[2], 408, 8);
    re::ecs2::SerializableMaterialParameterBlock::SerializableMaterialParameterBlock((re::ecs2::SerializableMaterialParameterBlock *)v15, v13);
    ++*(_DWORD *)(v9 + 24 * a2 + 16);
    re::SharedPtr<re::SkeletalPoseJointDefinition>::reset((uint64_t *)(v9 + 24 * a2), v15);
    *v11 = 0;
    if (v15)

  }
  v8 = *((_QWORD *)a1 + 6);
  if (v8 <= a2)
  {
LABEL_17:
    v21 = 0;
    v33 = 0u;
    v34 = 0u;
    v31 = 0u;
    v32 = 0u;
    v30 = 0u;
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    v22 = 136315906;
    v23 = "operator[]";
    v24 = 1024;
    v25 = 789;
    v26 = 2048;
    v27 = a2;
    v28 = 2048;
    v29 = v8;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  v16 = *((_QWORD *)a1 + 8) + 24 * a2;
  ++*(_DWORD *)(v16 + 16);
  v17 = *(_QWORD *)v16;
  v19 = v7;
  v18 = v7;
  re::MaterialSamplerData::fromDescriptor(&v19, (uint64_t)&v30);
  re::OptionalMaterialSamplerData::OptionalMaterialSamplerData((uint64_t)v20, (uint64_t)&v30);
  re::ecs2::SerializableMaterialParameterBlock::setSampler(v17, a3, v20);
  if (v7)

  re::ecs2::Component::enqueueMarkDirty((uint64_t)a1);
}

id REMaterialParameterBlockArrayComponentCopySamplerAtIndex(uint64_t a1, unint64_t a2, char *a3)
{
  uint64_t v3;
  re::ecs2::SerializableMaterialParameterBlock *v4;
  id v5;
  _BYTE v7[56];
  id v8;
  _BYTE v9[8];
  uint64_t v10;

  if (*(_QWORD *)(a1 + 48) <= a2)
    goto LABEL_7;
  v3 = *(_QWORD *)(a1 + 64);
  v4 = *(re::ecs2::SerializableMaterialParameterBlock **)(v3 + 24 * a2);
  if (!v4)
    v4 = *(re::ecs2::SerializableMaterialParameterBlock **)(v3 + 24 * a2 + 8);
  re::ecs2::SerializableMaterialParameterBlock::samplerValue(v4, a3, (uint64_t)v9);
  if (v9[0])
  {
    re::OptionalMaterialSamplerData::makeSamplerData((re::OptionalMaterialSamplerData *)&v10, (uint64_t)v7);
    re::MaterialSamplerData::makeDescriptor((re::MaterialSamplerData *)v7, &v8);
    v5 = objc_retainAutorelease(v8);
    if (v8)

  }
  else
  {
LABEL_7:
    v5 = 0;
  }
  return v5;
}

uint64_t REMaterialParameterBlockArrayComponentBindTextureToSamplerWithDefaultArrayAtIndex(re::ecs2::MaterialParameterBlockArrayComponent *a1, unint64_t a2, const char *a3, const char *a4)
{
  uint64_t v8;
  const re::ecs2::SerializableMaterialParameterBlock **v9;
  const re::ecs2::SerializableMaterialParameterBlock **v10;
  uint64_t isUniquelyReferenced;
  const re::ecs2::SerializableMaterialParameterBlock *v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;

  re::ecs2::MaterialParameterBlockArrayComponent::upgradeBlocksToBlockHandles(a1);
  if (*((_QWORD *)a1 + 6) <= a2)
  {
    re::ecs2::MaterialParameterBlockArrayComponent::resizeBlockHandles(a1, a2 + 1);
    re::ecs2::Component::enqueueMarkDirty((uint64_t)a1);
  }
  if (*((_QWORD *)a1 + 11) <= a2)
  {
    re::DynamicArray<re::SharedPtr<re::Shareable<re::AssetLoadDescriptor>>>::resize((uint64_t)a1 + 72, a2 + 1);
    re::ecs2::Component::enqueueMarkDirty((uint64_t)a1);
  }
  if (*((_QWORD *)a1 + 6) <= a2)
  {
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
    goto LABEL_15;
  }
  v8 = *((_QWORD *)a1 + 8);
  v9 = (const re::ecs2::SerializableMaterialParameterBlock **)(v8 + 24 * a2);
  v10 = v9 + 1;
  isUniquelyReferenced = objc_isUniquelyReferenced();
  if ((isUniquelyReferenced & 1) == 0)
  {
    if (*v9)
      v12 = *v9;
    else
      v12 = *v10;
    v13 = re::globalAllocators((re *)isUniquelyReferenced);
    v14 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v13[2] + 32))(v13[2], 408, 8);
    re::ecs2::SerializableMaterialParameterBlock::SerializableMaterialParameterBlock((re::ecs2::SerializableMaterialParameterBlock *)v14, v12);
    ++*(_DWORD *)(v8 + 24 * a2 + 16);
    re::SharedPtr<re::SkeletalPoseJointDefinition>::reset((uint64_t *)(v8 + 24 * a2), v14);
    *v10 = 0;
    if (v14)

  }
  if (*((_QWORD *)a1 + 6) <= a2)
  {
LABEL_15:
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  v15 = *((_QWORD *)a1 + 8) + 24 * a2;
  ++*(_DWORD *)(v15 + 16);
  re::ecs2::SerializableMaterialParameterBlock::bindTextureToSampler(*(re::ecs2::SerializableMaterialParameterBlock **)v15, a3, a4);
  return re::ecs2::Component::enqueueMarkDirty((uint64_t)a1);
}

uint64_t REMaterialParameterBlockArrayComponentGetSamplerNameBoundToTexture(uint64_t a1, unint64_t a2, char *a3)
{
  uint64_t v3;
  re::ecs2::SerializableMaterialParameterBlock *v4;

  if (*(_QWORD *)(a1 + 48) <= a2)
    return 0;
  v3 = *(_QWORD *)(a1 + 64);
  v4 = *(re::ecs2::SerializableMaterialParameterBlock **)(v3 + 24 * a2);
  if (!v4)
    v4 = *(re::ecs2::SerializableMaterialParameterBlock **)(v3 + 24 * a2 + 8);
  return re::ecs2::SerializableMaterialParameterBlock::tryGetSamplerNameBoundToTexture(v4, a3);
}

void REMaterialParameterBlockArrayComponentSetUVIndexForTextureAtIndex(re::ecs2::MaterialParameterBlockArrayComponent *a1, unint64_t a2, const char *a3, int a4)
{
  uint64_t v8;
  const re::ecs2::SerializableMaterialParameterBlock **v9;
  const re::ecs2::SerializableMaterialParameterBlock **v10;
  uint64_t isUniquelyReferenced;
  const re::ecs2::SerializableMaterialParameterBlock *v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;

  re::ecs2::MaterialParameterBlockArrayComponent::upgradeBlocksToBlockHandles(a1);
  if (*((_QWORD *)a1 + 6) <= a2)
  {
    re::ecs2::MaterialParameterBlockArrayComponent::resizeBlockHandles(a1, a2 + 1);
    re::ecs2::Component::enqueueMarkDirty((uint64_t)a1);
  }
  if (*((_QWORD *)a1 + 11) <= a2)
  {
    re::DynamicArray<re::SharedPtr<re::Shareable<re::AssetLoadDescriptor>>>::resize((uint64_t)a1 + 72, a2 + 1);
    re::ecs2::Component::enqueueMarkDirty((uint64_t)a1);
  }
  if (*((_QWORD *)a1 + 6) <= a2)
  {
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
    goto LABEL_15;
  }
  v8 = *((_QWORD *)a1 + 8);
  v9 = (const re::ecs2::SerializableMaterialParameterBlock **)(v8 + 24 * a2);
  v10 = v9 + 1;
  isUniquelyReferenced = objc_isUniquelyReferenced();
  if ((isUniquelyReferenced & 1) == 0)
  {
    if (*v9)
      v12 = *v9;
    else
      v12 = *v10;
    v13 = re::globalAllocators((re *)isUniquelyReferenced);
    v14 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v13[2] + 32))(v13[2], 408, 8);
    re::ecs2::SerializableMaterialParameterBlock::SerializableMaterialParameterBlock((re::ecs2::SerializableMaterialParameterBlock *)v14, v12);
    ++*(_DWORD *)(v8 + 24 * a2 + 16);
    re::SharedPtr<re::SkeletalPoseJointDefinition>::reset((uint64_t *)(v8 + 24 * a2), v14);
    *v10 = 0;
    if (v14)

  }
  if (*((_QWORD *)a1 + 6) <= a2)
  {
LABEL_15:
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  v15 = *((_QWORD *)a1 + 8) + 24 * a2;
  ++*(_DWORD *)(v15 + 16);
  re::ecs2::SerializableMaterialParameterBlock::setUVIndexForTexture(*(re::ecs2::SerializableMaterialParameterBlock **)v15, a3, a4);
}

uint64_t REMaterialParameterBlockArrayComponentGetUVIndexForTextureAtIndex(re::ecs2::MaterialParameterBlockArrayComponent *a1, unint64_t a2, const char *a3)
{
  uint64_t v6;
  re::ecs2::SerializableMaterialParameterBlock *v7;

  re::ecs2::MaterialParameterBlockArrayComponent::upgradeBlocksToBlockHandles(a1);
  if (*((_QWORD *)a1 + 6) <= a2)
  {
    re::ecs2::MaterialParameterBlockArrayComponent::resizeBlockHandles(a1, a2 + 1);
    re::ecs2::Component::enqueueMarkDirty((uint64_t)a1);
  }
  if (*((_QWORD *)a1 + 11) <= a2)
  {
    re::DynamicArray<re::SharedPtr<re::Shareable<re::AssetLoadDescriptor>>>::resize((uint64_t)a1 + 72, a2 + 1);
    re::ecs2::Component::enqueueMarkDirty((uint64_t)a1);
  }
  if (*((_QWORD *)a1 + 6) <= a2)
  {
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  v6 = *((_QWORD *)a1 + 8);
  v7 = *(re::ecs2::SerializableMaterialParameterBlock **)(v6 + 24 * a2);
  if (!v7)
    v7 = *(re::ecs2::SerializableMaterialParameterBlock **)(v6 + 24 * a2 + 8);
  return re::ecs2::SerializableMaterialParameterBlock::uvIndexForTexture(v7, a3);
}

uint64_t REMaterialParameterBlockArrayComponentSerializeToFile(_anonymous_namespace_ *a1, unint64_t a2, uint64_t a3, re::FileStreamWriter *a4)
{
  FILE *v7;
  unsigned __int8 v8;
  uint64_t v9;
  uint64_t *v10;
  _BOOL8 v11;
  uint64_t v12;
  NSObject *v13;
  NSObject *v14;
  _BYTE *v15;
  NSObject *v16;
  double v17;
  double v18;
  _BYTE v20[8];
  _BYTE v21[48];
  _BYTE v22[24];
  uint64_t v23;
  char v24;
  uint64_t v25;
  uint64_t v26[6];
  uint64_t v27[6];
  uint64_t v28[6];
  uint64_t v29[6];
  uint64_t v30[6];
  uint64_t v31[9];
  uint64_t v32;
  uint64_t v33[3];
  _BYTE v34[12];
  _BYTE *v35;
  uint8_t buf[4];
  _BYTE *v37;
  uint64_t v38;

  v38 = *MEMORY[0x24BDAC8D0];
  re::AssetAPIHelper::assetHandleCreate(a3, v33);
  re::AssetHandle::AssetHandle((re::AssetHandle *)v22, (const re::AssetHandle *)v33);
  re::ecs2::MaterialParameterBlockArrayComponent::createFlattenedMaterialFileFromBlock(a1, a2, (re::MaterialAsset *)v22, (uint64_t)&v23);
  re::AssetHandle::~AssetHandle((re::AssetHandle *)v22);
  v7 = re::FileStreamWriter::open(a4, (uint64_t)v20);
  if (!v20[0])
  {
    v13 = *re::ecsCoreLogObjects((re *)v7);
    v12 = 0;
    if (!os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT))
      goto LABEL_15;
    v14 = v13;
    re::formattedErrorMessage<re::DetailedError>((uint64_t)v21, (re::DynamicString *)v34);
    if ((v34[8] & 1) != 0)
      v15 = v35;
    else
      v15 = &v34[9];
    *(_DWORD *)buf = 136315138;
    v37 = v15;
    _os_log_impl(&dword_224FE9000, v14, OS_LOG_TYPE_DEFAULT, "%s", buf, 0xCu);

    if (*(_QWORD *)v34 && (v34[8] & 1) != 0)
      (*(void (**)(void))(**(_QWORD **)v34 + 40))();
LABEL_14:
    v12 = 0;
    goto LABEL_15;
  }
  if ((v8 & 1) == 0)
  {
    if ((_DWORD)v7)
    {
      re::introspect<re::MaterialFile>(void)::info = re::introspect_MaterialFile(0);
    }
  }
  v9 = re::introspect<re::MaterialFile>(void)::info;
  v10 = re::globalAllocators((re *)v7);
  v11 = re::serializeJson((uint64_t)v21, 0, v9, (uint64_t)&v23, 0, (uint64_t *)v10[2]);
  if (!v11)
  {
    v16 = *re::ecsCoreLogObjects((re *)v11);
    v12 = 0;
    if (!os_log_type_enabled(v16, OS_LOG_TYPE_DEFAULT))
      goto LABEL_15;
    *(_DWORD *)v34 = 136315138;
    *(_QWORD *)&v34[4] = a4;
    _os_log_impl(&dword_224FE9000, v16, OS_LOG_TYPE_DEFAULT, "Failed to serialize material file to path %s", v34, 0xCu);
    goto LABEL_14;
  }
  v12 = 1;
LABEL_15:
  re::Result<re::FileStreamWriter,re::DetailedError>::~Result((uint64_t)v20);
  re::DynamicArray<re::FunctionLink>::deinit((uint64_t)&v32, v17);
  v18 = re::HashTable<re::DynamicString,re::DynamicString,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::deinit(v31);
  re::HashTable<re::DynamicString,re::OptionalMaterialSamplerData,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::deinit(v30, v18);
  re::HashTable<re::DynamicString,re::MaterialTextureBlockData,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::deinit(v29);
  re::HashTable<re::DynamicString,re::MaterialTextureParam,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::deinit(v28);
  re::HashTable<re::DynamicString,re::DynamicString,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::deinit(v27);
  re::HashTable<re::DynamicString,re::DynamicString,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::deinit(v26);
  re::AssetHandle::~AssetHandle((re::AssetHandle *)&v25);
  if (v23 && (v24 & 1) != 0)
    (*(void (**)(void))(*(_QWORD *)v23 + 40))();
  re::AssetHandle::~AssetHandle((re::AssetHandle *)v33);
  return v12;
}

size_t REMaterialParameterBlockArrayComponentHashTechniqueName(const char *a1)
{
  size_t result;
  unint64_t v3[3];

  v3[2] = *MEMORY[0x24BDAC8D0];
  result = strlen(a1);
  if (result)
  {
    MurmurHash3_x64_128((uint64_t)a1, result, 0, v3);
    return (v3[1] + (v3[0] << 6) + (v3[0] >> 2) - 0x61C8864680B583E9) ^ v3[0];
  }
  return result;
}

uint64_t REMaterialParameterBlockArrayComponentAddHashedPassTechniqueMappingAtIndex(re::ecs2::MaterialParameterBlockArrayComponent *a1, unint64_t a2, const char *a3, uint64_t a4)
{
  size_t v8;
  unint64_t v9;
  uint64_t v10;
  const re::ecs2::SerializableMaterialParameterBlock **v11;
  const re::ecs2::SerializableMaterialParameterBlock **v12;
  uint64_t isUniquelyReferenced;
  const re::ecs2::SerializableMaterialParameterBlock *v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  uint64_t v24;

  v24 = *MEMORY[0x24BDAC8D0];
  re::ecs2::MaterialParameterBlockArrayComponent::upgradeBlocksToBlockHandles(a1);
  if (*((_QWORD *)a1 + 6) <= a2)
  {
    re::ecs2::MaterialParameterBlockArrayComponent::resizeBlockHandles(a1, a2 + 1);
    re::ecs2::Component::enqueueMarkDirty((uint64_t)a1);
  }
  if (*((_QWORD *)a1 + 11) <= a2)
  {
    re::DynamicArray<re::SharedPtr<re::Shareable<re::AssetLoadDescriptor>>>::resize((uint64_t)a1 + 72, a2 + 1);
    re::ecs2::Component::enqueueMarkDirty((uint64_t)a1);
  }
  v8 = strlen(a3);
  if (v8)
  {
    MurmurHash3_x64_128((uint64_t)a3, v8, 0, (unint64_t *)&v19);
    v9 = (*((_QWORD *)&v19 + 1) + ((_QWORD)v19 << 6) + ((unint64_t)v19 >> 2) - 0x61C8864680B583E9) ^ v19;
  }
  else
  {
    v9 = 0;
  }
  if (*((_QWORD *)a1 + 6) <= a2)
  {
    v22 = 0u;
    v23 = 0u;
    v20 = 0u;
    v21 = 0u;
    v19 = 0u;
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
    goto LABEL_18;
  }
  v10 = *((_QWORD *)a1 + 8);
  v11 = (const re::ecs2::SerializableMaterialParameterBlock **)(v10 + 24 * a2);
  v12 = v11 + 1;
  isUniquelyReferenced = objc_isUniquelyReferenced();
  if ((isUniquelyReferenced & 1) == 0)
  {
    if (*v11)
      v14 = *v11;
    else
      v14 = *v12;
    v15 = re::globalAllocators((re *)isUniquelyReferenced);
    v16 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v15[2] + 32))(v15[2], 408, 8);
    re::ecs2::SerializableMaterialParameterBlock::SerializableMaterialParameterBlock((re::ecs2::SerializableMaterialParameterBlock *)v16, v14);
    ++*(_DWORD *)(v10 + 24 * a2 + 16);
    re::SharedPtr<re::SkeletalPoseJointDefinition>::reset((uint64_t *)(v10 + 24 * a2), v16);
    *v12 = 0;
    if (v16)

  }
  if (*((_QWORD *)a1 + 6) <= a2)
  {
LABEL_18:
    v22 = 0u;
    v23 = 0u;
    v20 = 0u;
    v21 = 0u;
    v19 = 0u;
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  v17 = *((_QWORD *)a1 + 8) + 24 * a2;
  ++*(_DWORD *)(v17 + 16);
  re::ecs2::SerializableMaterialParameterBlock::addPassTechniqueMapping(*(re::ecs2::SerializableMaterialParameterBlock **)v17, v9, a4);
  return re::ecs2::Component::enqueueMarkDirty((uint64_t)a1);
}

uint64_t REMaterialParameterBlockArrayComponentAddPassTechniqueMappingAtIndex(re::ecs2::MaterialParameterBlockArrayComponent *a1, unint64_t a2, const char *a3, char *__s)
{
  size_t v8;
  unint64_t v9;
  unint64_t v11[3];

  v11[2] = *MEMORY[0x24BDAC8D0];
  v8 = strlen(__s);
  if (v8)
  {
    MurmurHash3_x64_128((uint64_t)__s, v8, 0, v11);
    v9 = (v11[1] + (v11[0] << 6) + (v11[0] >> 2) - 0x61C8864680B583E9) ^ v11[0];
  }
  else
  {
    v9 = 0;
  }
  return REMaterialParameterBlockArrayComponentAddHashedPassTechniqueMappingAtIndex(a1, a2, a3, v9);
}

uint64_t REMaterialParameterBlockArrayComponentRemovePassTechniqueMappingAtIndex(re::ecs2::MaterialParameterBlockArrayComponent *a1, unint64_t a2, const char *a3)
{
  size_t v6;
  unint64_t v7;
  uint64_t v8;
  const re::ecs2::SerializableMaterialParameterBlock **v9;
  const re::ecs2::SerializableMaterialParameterBlock **v10;
  uint64_t isUniquelyReferenced;
  const re::ecs2::SerializableMaterialParameterBlock *v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  uint64_t v22;

  v22 = *MEMORY[0x24BDAC8D0];
  re::ecs2::MaterialParameterBlockArrayComponent::upgradeBlocksToBlockHandles(a1);
  if (*((_QWORD *)a1 + 6) <= a2)
  {
    re::ecs2::MaterialParameterBlockArrayComponent::resizeBlockHandles(a1, a2 + 1);
    re::ecs2::Component::enqueueMarkDirty((uint64_t)a1);
  }
  if (*((_QWORD *)a1 + 11) <= a2)
  {
    re::DynamicArray<re::SharedPtr<re::Shareable<re::AssetLoadDescriptor>>>::resize((uint64_t)a1 + 72, a2 + 1);
    re::ecs2::Component::enqueueMarkDirty((uint64_t)a1);
  }
  v6 = strlen(a3);
  if (v6)
  {
    MurmurHash3_x64_128((uint64_t)a3, v6, 0, (unint64_t *)&v17);
    v7 = (*((_QWORD *)&v17 + 1) + ((_QWORD)v17 << 6) + ((unint64_t)v17 >> 2) - 0x61C8864680B583E9) ^ v17;
  }
  else
  {
    v7 = 0;
  }
  if (*((_QWORD *)a1 + 6) <= a2)
  {
    v20 = 0u;
    v21 = 0u;
    v18 = 0u;
    v19 = 0u;
    v17 = 0u;
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
    goto LABEL_18;
  }
  v8 = *((_QWORD *)a1 + 8);
  v9 = (const re::ecs2::SerializableMaterialParameterBlock **)(v8 + 24 * a2);
  v10 = v9 + 1;
  isUniquelyReferenced = objc_isUniquelyReferenced();
  if ((isUniquelyReferenced & 1) == 0)
  {
    if (*v9)
      v12 = *v9;
    else
      v12 = *v10;
    v13 = re::globalAllocators((re *)isUniquelyReferenced);
    v14 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v13[2] + 32))(v13[2], 408, 8);
    re::ecs2::SerializableMaterialParameterBlock::SerializableMaterialParameterBlock((re::ecs2::SerializableMaterialParameterBlock *)v14, v12);
    ++*(_DWORD *)(v8 + 24 * a2 + 16);
    re::SharedPtr<re::SkeletalPoseJointDefinition>::reset((uint64_t *)(v8 + 24 * a2), v14);
    *v10 = 0;
    if (v14)

  }
  if (*((_QWORD *)a1 + 6) <= a2)
  {
LABEL_18:
    v20 = 0u;
    v21 = 0u;
    v18 = 0u;
    v19 = 0u;
    v17 = 0u;
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  v15 = *((_QWORD *)a1 + 8) + 24 * a2;
  ++*(_DWORD *)(v15 + 16);
  re::ecs2::SerializableMaterialParameterBlock::markPassTechniqueMappingRemoved(*(re::ecs2::SerializableMaterialParameterBlock **)v15, v7);
  return re::ecs2::Component::enqueueMarkDirty((uint64_t)a1);
}

uint64_t REMaterialParameterBlockArrayComponentGetPassTechniqueMappingAtIndex(re::ecs2::MaterialParameterBlockArrayComponent *a1, re::MaterialParameterBlock *a2, const char *a3)
{
  uint64_t v4;

  return REMaterialParameterBlockArrayComponentGetHashedPassTechniqueMappingAtIndex(a1, a2, a3, &v4);
}

uint64_t REMaterialParameterBlockArrayComponentGetHashedPassTechniqueMappingAtIndex(re::ecs2::MaterialParameterBlockArrayComponent *a1, re::MaterialParameterBlock *a2, const char *a3, _QWORD *a4)
{
  size_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  re::ecs2::SerializableMaterialParameterBlock *v12;
  uint64_t result;
  uint64_t v14;
  _QWORD v15[2];
  int v16;
  const char *v17;
  __int16 v18;
  int v19;
  __int16 v20;
  re::MaterialParameterBlock *v21;
  __int16 v22;
  unint64_t v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  uint64_t v29;

  v29 = *MEMORY[0x24BDAC8D0];
  re::ecs2::MaterialParameterBlockArrayComponent::upgradeBlocksToBlockHandles(a1);
  if (*((_QWORD *)a1 + 6) <= (unint64_t)a2)
  {
    re::ecs2::MaterialParameterBlockArrayComponent::resizeBlockHandles(a1, (unint64_t)a2 + 1);
    re::ecs2::Component::enqueueMarkDirty((uint64_t)a1);
  }
  if (*((_QWORD *)a1 + 11) <= (unint64_t)a2)
  {
    re::DynamicArray<re::SharedPtr<re::Shareable<re::AssetLoadDescriptor>>>::resize((uint64_t)a1 + 72, (unint64_t)a2 + 1);
    re::ecs2::Component::enqueueMarkDirty((uint64_t)a1);
  }
  v8 = strlen(a3);
  if (v8)
  {
    MurmurHash3_x64_128((uint64_t)a3, v8, 0, (unint64_t *)&v24);
    v9 = (*((_QWORD *)&v24 + 1) + ((_QWORD)v24 << 6) + ((unint64_t)v24 >> 2) - 0x61C8864680B583E9) ^ v24;
  }
  else
  {
    v9 = 0;
  }
  v10 = *((_QWORD *)a1 + 6);
  if (v10 <= (unint64_t)a2)
  {
    v14 = 0;
    v28 = 0u;
    v26 = 0u;
    v27 = 0u;
    v24 = 0u;
    v25 = 0u;
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    v16 = 136315906;
    v17 = "operator[]";
    v18 = 1024;
    v19 = 789;
    v20 = 2048;
    v21 = a2;
    v22 = 2048;
    v23 = v10;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_21:
    v15[1] = 0;
    v28 = 0u;
    v26 = 0u;
    v27 = 0u;
    v24 = 0u;
    v25 = 0u;
    a4 = (_QWORD *)MEMORY[0x24BDACB70];
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    v16 = 136315906;
    v17 = "operator[]";
    v18 = 1024;
    v19 = 789;
    v20 = 2048;
    v21 = a2;
    v22 = 2048;
    v23 = v10;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_22:
    dispatch_once(&re::MaterialParameterTable::kDefaultNameHash(void)::once, &__block_literal_global_29);
    goto LABEL_17;
  }
  v11 = *((_QWORD *)a1 + 8);
  v12 = *(re::ecs2::SerializableMaterialParameterBlock **)(v11 + 24 * (_QWORD)a2);
  if (!v12)
    v12 = *(re::ecs2::SerializableMaterialParameterBlock **)(v11 + 24 * (_QWORD)a2 + 8);
  re::ecs2::SerializableMaterialParameterBlock::tryGetPassTechniqueMapping(v12, v9, (uint64_t)&v14);
  if ((_BYTE)v14)
  {
    result = (uint64_t)v15;
LABEL_13:
    *a4 = *(_QWORD *)result;
    return 1;
  }
  v10 = *((_QWORD *)a1 + 11);
  if (v10 <= (unint64_t)a2)
    goto LABEL_21;
  a2 = *(re::MaterialParameterBlock **)(*((_QWORD *)a1 + 13) + 8 * (_QWORD)a2);
  if (!a2)
    return 0;
  if (re::MaterialParameterTable::kDefaultNameHash(void)::once != -1)
    goto LABEL_22;
LABEL_17:
  result = re::MaterialParameterBlock::tryGetPassTechniqueMapping(a2, v9, re::MaterialParameterTable::kDefaultNameHash(void)::_kDefaultNameHash);
  if (result)
    goto LABEL_13;
  return result;
}

unsigned __int8 *getBinding(re::ecs2::MaterialParameterBlockArrayComponent *a1, unint64_t a2, const char *a3, int a4, _QWORD *a5)
{
  uint64_t v10;
  re::ecs2::SerializableMaterialParameterBlock *v11;
  unsigned __int8 *result;

  re::ecs2::MaterialParameterBlockArrayComponent::upgradeBlocksToBlockHandles(a1);
  if (*((_QWORD *)a1 + 6) <= a2)
  {
    re::ecs2::MaterialParameterBlockArrayComponent::resizeBlockHandles(a1, a2 + 1);
    re::ecs2::Component::enqueueMarkDirty((uint64_t)a1);
  }
  if (*((_QWORD *)a1 + 11) <= a2)
  {
    re::DynamicArray<re::SharedPtr<re::Shareable<re::AssetLoadDescriptor>>>::resize((uint64_t)a1 + 72, a2 + 1);
    re::ecs2::Component::enqueueMarkDirty((uint64_t)a1);
  }
  if (*((_QWORD *)a1 + 6) <= a2)
  {
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  v10 = *((_QWORD *)a1 + 8);
  v11 = *(re::ecs2::SerializableMaterialParameterBlock **)(v10 + 24 * a2);
  if (!v11)
    v11 = *(re::ecs2::SerializableMaterialParameterBlock **)(v10 + 24 * a2 + 8);
  result = re::ecs2::SerializableMaterialParameterBlock::parameterBinding(v11, a3);
  if (result)
  {
    if (*(_DWORD *)result == a4)
    {
      *a5 = *((_QWORD *)result + 2);
      a5[1] = *((_QWORD *)result + 4);
      return (unsigned __int8 *)1;
    }
    else
    {
      return 0;
    }
  }
  return result;
}

unsigned __int8 *REMaterialParameterBlockArrayComponentGetBufferBindingAtIndex(re::ecs2::MaterialParameterBlockArrayComponent *a1, unint64_t a2, const char *a3, _QWORD *a4)
{
  return getBinding(a1, a2, a3, 3, a4);
}

unsigned __int8 *REMaterialParameterBlockArrayComponentGetTextureBindingAtIndex(re::ecs2::MaterialParameterBlockArrayComponent *a1, unint64_t a2, const char *a3, _QWORD *a4)
{
  return getBinding(a1, a2, a3, 2, a4);
}

unsigned __int8 *REMaterialParameterBlockArrayComponentGetSamplerBindingAtIndex(re::ecs2::MaterialParameterBlockArrayComponent *a1, unint64_t a2, const char *a3, _QWORD *a4)
{
  return getBinding(a1, a2, a3, 4, a4);
}

unsigned __int8 *REMaterialParameterBlockArrayComponentGetConstantBindingAtIndex(re::ecs2::MaterialParameterBlockArrayComponent *a1, unint64_t a2, const char *a3, _QWORD *a4)
{
  return getBinding(a1, a2, a3, 1, a4);
}

uint64_t setBinding(re::ecs2::MaterialParameterBlockArrayComponent *a1, unint64_t a2, const char *a3, const char *a4, const char *a5, int a6)
{
  uint64_t v12;
  const re::ecs2::SerializableMaterialParameterBlock **v13;
  const re::ecs2::SerializableMaterialParameterBlock **v14;
  uint64_t isUniquelyReferenced;
  const char *v16;
  int v17;
  const char *v18;
  const re::ecs2::SerializableMaterialParameterBlock *v19;
  uint64_t *v20;
  uint64_t v21;
  const re::ecs2::SerializableMaterialParameterBlock *v22;
  uint64_t v23;
  const char *v25;

  re::ecs2::MaterialParameterBlockArrayComponent::upgradeBlocksToBlockHandles(a1);
  if (*((_QWORD *)a1 + 6) <= a2)
  {
    re::ecs2::MaterialParameterBlockArrayComponent::resizeBlockHandles(a1, a2 + 1);
    re::ecs2::Component::enqueueMarkDirty((uint64_t)a1);
  }
  if (*((_QWORD *)a1 + 11) <= a2)
  {
    re::DynamicArray<re::SharedPtr<re::Shareable<re::AssetLoadDescriptor>>>::resize((uint64_t)a1 + 72, a2 + 1);
    re::ecs2::Component::enqueueMarkDirty((uint64_t)a1);
  }
  if (*((_QWORD *)a1 + 6) <= a2)
  {
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
    goto LABEL_15;
  }
  v12 = *((_QWORD *)a1 + 8);
  v13 = (const re::ecs2::SerializableMaterialParameterBlock **)(v12 + 24 * a2);
  v14 = v13 + 1;
  isUniquelyReferenced = objc_isUniquelyReferenced();
  if ((isUniquelyReferenced & 1) == 0)
  {
    v25 = a3;
    v16 = a4;
    v17 = a6;
    v18 = a5;
    if (*v13)
      v19 = *v13;
    else
      v19 = *v14;
    v20 = re::globalAllocators((re *)isUniquelyReferenced);
    v21 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v20[2] + 32))(v20[2], 408, 8);
    v22 = v19;
    a5 = v18;
    a6 = v17;
    a4 = v16;
    a3 = v25;
    re::ecs2::SerializableMaterialParameterBlock::SerializableMaterialParameterBlock((re::ecs2::SerializableMaterialParameterBlock *)v21, v22);
    ++*(_DWORD *)(v12 + 24 * a2 + 16);
    re::SharedPtr<re::SkeletalPoseJointDefinition>::reset((uint64_t *)(v12 + 24 * a2), v21);
    *v14 = 0;
    if (v21)

  }
  if (*((_QWORD *)a1 + 6) <= a2)
  {
LABEL_15:
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  v23 = *((_QWORD *)a1 + 8) + 24 * a2;
  ++*(_DWORD *)(v23 + 16);
  re::ecs2::SerializableMaterialParameterBlock::setParameterBinding(*(_anonymous_namespace_ **)v23, a3, a6, a4, a5);
  return re::ecs2::Component::enqueueMarkDirty((uint64_t)a1);
}

uint64_t REMaterialParameterBlockArrayComponentSetBufferBindingAtIndex(re::ecs2::MaterialParameterBlockArrayComponent *a1, unint64_t a2, const char *a3, const char *a4, const char *a5)
{
  return setBinding(a1, a2, a3, a4, a5, 3);
}

uint64_t REMaterialParameterBlockArrayComponentSetTextureBindingAtIndex(re::ecs2::MaterialParameterBlockArrayComponent *a1, unint64_t a2, const char *a3, const char *a4, const char *a5)
{
  return setBinding(a1, a2, a3, a4, a5, 2);
}

uint64_t REMaterialParameterBlockArrayComponentSetSamplerBindingAtIndex(re::ecs2::MaterialParameterBlockArrayComponent *a1, unint64_t a2, const char *a3, const char *a4, const char *a5)
{
  return setBinding(a1, a2, a3, a4, a5, 4);
}

uint64_t REMaterialParameterBlockArrayComponentSetConstantBindingAtIndex(re::ecs2::MaterialParameterBlockArrayComponent *a1, unint64_t a2, const char *a3, const char *a4, const char *a5)
{
  return setBinding(a1, a2, a3, a4, a5, 1);
}

uint64_t REMaterialParameterBlockArrayComponentRemoveBindingAtIndex(re::ecs2::MaterialParameterBlockArrayComponent *a1, unint64_t a2, char *a3)
{
  uint64_t v6;
  const re::ecs2::SerializableMaterialParameterBlock **v7;
  const re::ecs2::SerializableMaterialParameterBlock **v8;
  uint64_t isUniquelyReferenced;
  const re::ecs2::SerializableMaterialParameterBlock *v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;

  re::ecs2::MaterialParameterBlockArrayComponent::upgradeBlocksToBlockHandles(a1);
  if (*((_QWORD *)a1 + 6) <= a2)
  {
    re::ecs2::MaterialParameterBlockArrayComponent::resizeBlockHandles(a1, a2 + 1);
    re::ecs2::Component::enqueueMarkDirty((uint64_t)a1);
  }
  if (*((_QWORD *)a1 + 11) <= a2)
  {
    re::DynamicArray<re::SharedPtr<re::Shareable<re::AssetLoadDescriptor>>>::resize((uint64_t)a1 + 72, a2 + 1);
    re::ecs2::Component::enqueueMarkDirty((uint64_t)a1);
  }
  if (*((_QWORD *)a1 + 6) <= a2)
  {
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
    goto LABEL_15;
  }
  v6 = *((_QWORD *)a1 + 8);
  v7 = (const re::ecs2::SerializableMaterialParameterBlock **)(v6 + 24 * a2);
  v8 = v7 + 1;
  isUniquelyReferenced = objc_isUniquelyReferenced();
  if ((isUniquelyReferenced & 1) == 0)
  {
    if (*v7)
      v10 = *v7;
    else
      v10 = *v8;
    v11 = re::globalAllocators((re *)isUniquelyReferenced);
    v12 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v11[2] + 32))(v11[2], 408, 8);
    re::ecs2::SerializableMaterialParameterBlock::SerializableMaterialParameterBlock((re::ecs2::SerializableMaterialParameterBlock *)v12, v10);
    ++*(_DWORD *)(v6 + 24 * a2 + 16);
    re::SharedPtr<re::SkeletalPoseJointDefinition>::reset((uint64_t *)(v6 + 24 * a2), v12);
    *v8 = 0;
    if (v12)

  }
  if (*((_QWORD *)a1 + 6) <= a2)
  {
LABEL_15:
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  v13 = *((_QWORD *)a1 + 8) + 24 * a2;
  ++*(_DWORD *)(v13 + 16);
  re::ecs2::SerializableMaterialParameterBlock::markParameterBindingRemoved(*(re::ecs2::SerializableMaterialParameterBlock **)v13, a3);
  return re::ecs2::Component::enqueueMarkDirty((uint64_t)a1);
}

void RESerializedMaterialParameterHandle::~RESerializedMaterialParameterHandle(RESerializedMaterialParameterHandle *this)
{
  *(_QWORD *)this = &off_24ED9CBD8;
  re::StringID::destroyString((RESerializedMaterialParameterHandle *)((char *)this + 24));
  *(_QWORD *)this = &off_24ED426B8;
  objc_destructInstance((char *)this + 8);
}

{
  *(_QWORD *)this = &off_24ED9CBD8;
  re::StringID::destroyString((RESerializedMaterialParameterHandle *)((char *)this + 24));
  *(_QWORD *)this = &off_24ED426B8;
  objc_destructInstance((char *)this + 8);
  JUMPOUT(0x2276933B8);
}

uint64_t REPeerAttributionServiceGetContextCount(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  if (a1)
    return *(unsigned int *)(a1 + 124);
  re::internal::assertLog((re::internal *)4, a2, "assertion failure: '%s' (%s:line %i) The given REPeerAttributionService is null.", "service", "REPeerAttributionServiceGetContextCount", 7);
  result = _os_crash();
  __break(1u);
  return result;
}

uint64_t REPeerAttributionServiceCreateOrGetContextWithPeerID(re::PeerAttributionService *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t result;

  if (a1)
    return re::PeerAttributionService::getOrCreateContextForPeerId(a1, a2);
  re::internal::assertLog((re::internal *)4, a2, "assertion failure: '%s' (%s:line %i) The given REPeerAttributionService is null.", "service", "REPeerAttributionServiceCreateOrGetContextWithPeerID", 14, v2, v3);
  result = _os_crash();
  __break(1u);
  return result;
}

uint64_t REPeerAttributionServiceDestroyContext(re::PeerAttributionService *a1, uint64_t a2)
{
  uint64_t result;

  if (a1)
  {
    if (a2)
    {
      re::PeerAttributionService::destroyContext(a1, a2);
      return 1;
    }
  }
  else
  {
    re::internal::assertLog((re::internal *)4, a2, "assertion failure: '%s' (%s:line %i) The given REPeerAttributionService is null.", "service", "REPeerAttributionServiceDestroyContext", 21);
    _os_crash();
    __break(1u);
  }
  re::internal::assertLog((re::internal *)4, a2, "assertion failure: '%s' (%s:line %i) The given REPeerAttributionContext is null.", "context", "REPeerAttributionServiceDestroyContext", 22);
  result = _os_crash();
  __break(1u);
  return result;
}

uint64_t REPeerAttributionContextGetProfilerAttributionHandle(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t result;

  if (a1)
    return a1 + 16;
  re::internal::assertLog((re::internal *)4, a2, "assertion failure: '%s' (%s:line %i) The given REPeerAttributionContext is null.", "context", "REPeerAttributionContextGetProfilerAttributionHandle", 31, v2, v3);
  result = _os_crash();
  __break(1u);
  return result;
}

uint64_t REAssetManagerMemoryAssetCreateWithRemotePlayer(uint64_t a1, void *a2)
{
  uint64_t v2;
  id v3;
  _QWORD v5[3];

  re::VideoAsset::makeVideoMutableMemoryAsset(a1, a2);
  v2 = v5[0];
  if (v5[0])
    v3 = (id)(v5[0] + 8);
  re::AssetHandle::~AssetHandle((re::AssetHandle *)v5);
  return v2;
}

id REVideoAssetGetAVPlayer(uint64_t a1)
{
  id **v1;
  void *v2;
  uint64_t v4[3];

  re::AssetAPIHelper::assetHandleCreate(a1, v4);
  v1 = (id **)re::AssetHandle::loadedAsset<re::VideoAsset>((re::VideoAsset *)v4);
  if (v1)
  {
    re::VideoAsset::getAVPlayer(v1);
    v2 = (void *)objc_claimAutoreleasedReturnValue();
  }
  else
  {
    v2 = 0;
  }
  re::AssetHandle::~AssetHandle((re::AssetHandle *)v4);
  return v2;
}

id _RETestingVideoAssetGetInternalPlayer(uint64_t a1)
{
  id **v1;
  void *v2;
  uint64_t v4[3];

  re::AssetAPIHelper::assetHandleCreate(a1, v4);
  v1 = (id **)re::AssetHandle::loadedAsset<re::VideoAsset>((re::VideoAsset *)v4);
  if (v1)
  {
    re::VideoAsset::testingGetInternalAVPlayer(v1);
    v2 = (void *)objc_claimAutoreleasedReturnValue();
  }
  else
  {
    v2 = 0;
  }
  re::AssetHandle::~AssetHandle((re::AssetHandle *)v4);
  return v2;
}

uint64_t REAssetManagerMemoryAssetCreateWithAVSampleBufferVideoRenderer(re::VideoAsset *a1, AssetService *a2, AVSampleBufferVideoRenderer *a3)
{
  uint64_t v3;
  id v4;
  _QWORD v6[3];

  re::VideoAsset::makeVideoMutableMemoryAsset(a1, a2, a3);
  v3 = v6[0];
  if (v6[0])
    v4 = (id)(v6[0] + 8);
  re::AssetHandle::~AssetHandle((re::AssetHandle *)v6);
  return v3;
}

id REVideoAssetGetAVSampleBufferVideoRenderer(uint64_t a1)
{
  re::VideoAsset *v1;
  void *v2;
  uint64_t v4[3];

  re::AssetAPIHelper::assetHandleCreate(a1, v4);
  v1 = (re::VideoAsset *)re::AssetHandle::loadedAsset<re::VideoAsset>((re::VideoAsset *)v4);
  if (v1)
  {
    re::VideoAsset::getAVSampleBufferVideoRenderer(v1);
    v2 = (void *)objc_claimAutoreleasedReturnValue();
  }
  else
  {
    v2 = 0;
  }
  re::AssetHandle::~AssetHandle((re::AssetHandle *)v4);
  return v2;
}

void REVideoAssetSetAVSampleBufferVideoRenderer(uint64_t a1, void *a2)
{
  AVSampleBufferVideoRenderer *v3;
  unsigned int v4;
  re::VideoAsset *v5;
  os_unfair_lock_s *v6;
  uint64_t v7;
  re::internal::AssetEntry *v8;

  v3 = a2;
  re::AssetAPIHelper::assetHandleCreate(a1, &v7);
  re::AssetHandle::loadNow((uint64_t)v8, 0);
  if (v8)
  {
    v4 = atomic_load((unsigned int *)v8 + 176);
    if (v4 == 2)
    {
      re::AssetHandle::mutateAssetCommon((re::AssetHandle *)&v7);
      ++*((_DWORD *)v8 + 65);
      v5 = (re::VideoAsset *)re::AssetHandle::loadedAsset<re::VideoAsset>((re::VideoAsset *)&v7);
      if (v5)
      {
        re::VideoAsset::setAVSampleBufferVideoRenderer(v5, v3);
        v6 = (os_unfair_lock_s *)v8;
        *((_BYTE *)v8 + 256) = 1;
        re::internal::AssetEntry::updateMutatedRuntimeAssetSize(v6);
        re::internal::AssetEntry::updateMutatedAssetNonSharedDataSize(v8);
      }
    }
  }
  re::AssetHandle::~AssetHandle((re::AssetHandle *)&v7);

}

void REVideoAssetSetAVPlayer(uint64_t a1, void *a2)
{
  AVPlayer *v3;
  unsigned int v4;
  re::VideoAsset *v5;
  os_unfair_lock_s *v6;
  uint64_t v7;
  re::internal::AssetEntry *v8;

  v3 = a2;
  re::AssetAPIHelper::assetHandleCreate(a1, &v7);
  re::AssetHandle::loadNow((uint64_t)v8, 0);
  if (v8)
  {
    v4 = atomic_load((unsigned int *)v8 + 176);
    if (v4 == 2)
    {
      re::AssetHandle::mutateAssetCommon((re::AssetHandle *)&v7);
      ++*((_DWORD *)v8 + 65);
      v5 = (re::VideoAsset *)re::AssetHandle::loadedAsset<re::VideoAsset>((re::VideoAsset *)&v7);
      if (v5)
      {
        re::VideoAsset::setAVPlayer(v5, v3);
        v6 = (os_unfair_lock_s *)v8;
        *((_BYTE *)v8 + 256) = 1;
        re::internal::AssetEntry::updateMutatedRuntimeAssetSize(v6);
        re::internal::AssetEntry::updateMutatedAssetNonSharedDataSize(v8);
      }
    }
  }
  re::AssetHandle::~AssetHandle((re::AssetHandle *)&v7);

}

uint64_t REAssetManagerVideoMemoryAssetCreate(re::VideoAsset *a1, AssetService *a2)
{
  uint64_t v2;
  id v3;
  uint64_t v5[3];

  re::VideoAsset::makeVideoMutableMemoryAsset(v5, a1, a2);
  v2 = v5[0];
  if (v5[0])
    v3 = (id)(v5[0] + 8);
  re::AssetHandle::~AssetHandle((re::AssetHandle *)v5);
  return v2;
}

uint64_t REAssetManagerVideoMemoryAssetCreateWithoutTarget(re::VideoAsset *a1, AssetService *a2)
{
  uint64_t v2;
  id v3;
  uint64_t v5[3];

  re::VideoAsset::makeVideoMutableMemoryAssetWithoutTarget(v5, a1, a2);
  v2 = v5[0];
  if (v5[0])
    v3 = (id)(v5[0] + 8);
  re::AssetHandle::~AssetHandle((re::AssetHandle *)v5);
  return v2;
}

uint64_t REAssetManagerAVSampleBufferVideoRendererMemoryAssetCreate(re::VideoAsset *a1, AssetService *a2, AVSampleBufferVideoRenderer *a3)
{
  uint64_t v3;
  id v4;
  _QWORD v6[3];

  re::VideoAsset::makeVideoMutableMemoryAsset(a1, a2, a3);
  v3 = v6[0];
  if (v6[0])
    v4 = (id)(v6[0] + 8);
  re::AssetHandle::~AssetHandle((re::AssetHandle *)v6);
  return v3;
}

void REAssetManagerPreloadVideoAssetOnce(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t v6;
  uint64_t v7;
  dispatch_once_t *v8;
  uint64_t v9;
  _QWORD v10[5];
  _QWORD v11[5];
  char v12;
  uint64_t v13[3];

  re::AssetAPIHelper::assetHandleCreate(a2, v13);
  v6 = re::AssetHandle::loadedAsset<re::VideoAsset>((re::VideoAsset *)v13);
  if (v6)
  {
    v7 = v6;
    v10[0] = MEMORY[0x24BDAC760];
    v10[1] = 3321888768;
    v10[2] = __REAssetManagerPreloadVideoAssetOnce_block_invoke;
    v10[3] = &__block_descriptor_81_a8_40c22_ZTSN2re11AssetHandleE_e5_v8__0l;
    v10[4] = v6;
    v12 = a3;
    re::AssetHandle::AssetHandle((re::AssetHandle *)v11, (const re::AssetHandle *)v13);
    v9 = *(_QWORD *)(v7 + 112);
    v8 = (dispatch_once_t *)(v7 + 112);
    v11[3] = a1;
    v11[4] = a2;
    if (v9 != -1)
      dispatch_once(v8, v10);
    re::AssetHandle::~AssetHandle((re::AssetHandle *)v11);
  }
  re::AssetHandle::~AssetHandle((re::AssetHandle *)v13);
}

re::AssetHandle *__copy_helper_block_a8_40c22_ZTSN2re11AssetHandleE(uint64_t a1, uint64_t a2)
{
  return re::AssetHandle::AssetHandle((re::AssetHandle *)(a1 + 40), (const re::AssetHandle *)(a2 + 40));
}

void __destroy_helper_block_a8_40c22_ZTSN2re11AssetHandleE(uint64_t a1)
{
  re::AssetHandle::~AssetHandle((re::AssetHandle *)(a1 + 40));
}

id REVideoAssetGetRemotePlayer(uint64_t a1)
{
  id **v1;
  void *v2;
  uint64_t v4[3];

  re::AssetAPIHelper::assetHandleCreate(a1, v4);
  v1 = (id **)re::AssetHandle::loadedAsset<re::VideoAsset>((re::VideoAsset *)v4);
  if (v1)
  {
    re::VideoAsset::getRemotePlayer(v1);
    v2 = (void *)objc_claimAutoreleasedReturnValue();
  }
  else
  {
    v2 = 0;
  }
  re::AssetHandle::~AssetHandle((re::AssetHandle *)v4);
  return v2;
}

void REVideoAssetSetRemotePlayer(uint64_t a1, void *a2)
{
  id v3;
  unsigned int v4;
  uint64_t v5;
  os_unfair_lock_s *v6;
  uint64_t v7;
  re::internal::AssetEntry *v8;

  v3 = a2;
  re::AssetAPIHelper::assetHandleCreate(a1, &v7);
  re::AssetHandle::loadNow((uint64_t)v8, 0);
  if (v8)
  {
    v4 = atomic_load((unsigned int *)v8 + 176);
    if (v4 == 2)
    {
      re::AssetHandle::mutateAssetCommon((re::AssetHandle *)&v7);
      ++*((_DWORD *)v8 + 65);
      v5 = re::AssetHandle::loadedAsset<re::VideoAsset>((re::VideoAsset *)&v7);
      if (v5)
      {
        re::VideoAsset::setRemotePlayer(v5, v3);
        v6 = (os_unfair_lock_s *)v8;
        *((_BYTE *)v8 + 256) = 1;
        re::internal::AssetEntry::updateMutatedRuntimeAssetSize(v6);
        re::internal::AssetEntry::updateMutatedAssetNonSharedDataSize(v8);
      }
    }
  }
  re::AssetHandle::~AssetHandle((re::AssetHandle *)&v7);

}

void *REVideoComponentGetComponentType()
{
  if (re::ecs2::dispatchOnceInitECSComponents(void)::onceToken != -1)
    dispatch_once(&re::ecs2::dispatchOnceInitECSComponents(void)::onceToken, &__block_literal_global_13);
  return re::ecs2::ComponentImpl<re::ecs2::VideoComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType;
}

double REVideoAssetGetDimensions(uint64_t a1)
{
  re::VideoAsset *v1;
  double v2;
  double v3;
  uint64_t v5[3];

  re::AssetAPIHelper::assetHandleCreate(a1, v5);
  v1 = (re::VideoAsset *)re::AssetHandle::loadedAsset<re::VideoAsset>((re::VideoAsset *)v5);
  if (v1)
  {
    re::VideoAsset::dimensions(v1);
    v3 = v2;
  }
  else
  {
    v3 = 0.0;
  }
  re::AssetHandle::~AssetHandle((re::AssetHandle *)v5);
  return v3;
}

uint64_t REVideoAssetGetAudioInputMode(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4[3];

  re::AssetAPIHelper::assetHandleCreate(a1, v4);
  v1 = re::AssetHandle::loadedAsset<re::VideoAsset>((re::VideoAsset *)v4);
  if (v1)
    v2 = *(unsigned __int8 *)(v1 + 24);
  else
    v2 = 0;
  re::AssetHandle::~AssetHandle((re::AssetHandle *)v4);
  return v2;
}

void REVideoAssetSetAudioInputMode(uint64_t a1, char a2)
{
  unsigned int v3;
  uint64_t v4;
  os_unfair_lock_s *v5;
  uint64_t v6;
  re::internal::AssetEntry *v7;

  re::AssetAPIHelper::assetHandleCreate(a1, &v6);
  re::AssetHandle::loadNow((uint64_t)v7, 0);
  if (v7)
  {
    v3 = atomic_load((unsigned int *)v7 + 176);
    if (v3 == 2)
    {
      re::AssetHandle::mutateAssetCommon((re::AssetHandle *)&v6);
      ++*((_DWORD *)v7 + 65);
      v4 = re::AssetHandle::loadedAsset<re::VideoAsset>((re::VideoAsset *)&v6);
      if (v4)
      {
        *(_BYTE *)(v4 + 24) = a2;
        v5 = (os_unfair_lock_s *)v7;
        *((_BYTE *)v7 + 256) = 1;
        re::internal::AssetEntry::updateMutatedRuntimeAssetSize(v5);
        re::internal::AssetEntry::updateMutatedAssetNonSharedDataSize(v7);
      }
    }
  }
  re::AssetManager::assetPayloadDidChange(*((re::AssetManager **)v7 + 3), v7);
  re::AssetHandle::~AssetHandle((re::AssetHandle *)&v6);
}

float REVideoAssetGetReverbSendLevelDecibels(uint64_t a1)
{
  uint64_t v1;
  float v2;
  uint64_t v4[3];

  re::AssetAPIHelper::assetHandleCreate(a1, v4);
  v1 = re::AssetHandle::loadedAsset<re::VideoAsset>((re::VideoAsset *)v4);
  if (v1)
    v2 = *(float *)(v1 + 28);
  else
    v2 = 0.0;
  re::AssetHandle::~AssetHandle((re::AssetHandle *)v4);
  return v2;
}

void REVideoAssetSetReverbSendLevelDecibels(uint64_t a1, float a2)
{
  unsigned int v3;
  uint64_t v4;
  os_unfair_lock_s *v5;
  uint64_t v6;
  re::internal::AssetEntry *v7;

  re::AssetAPIHelper::assetHandleCreate(a1, &v6);
  if (v7)
  {
    v3 = atomic_load((unsigned int *)v7 + 176);
    if (v3 == 2)
    {
      re::AssetHandle::mutateAssetCommon((re::AssetHandle *)&v6);
      ++*((_DWORD *)v7 + 65);
      v4 = re::AssetHandle::asset<re::VideoAsset>((re::VideoAsset *)&v6);
      if (v4)
      {
        *(float *)(v4 + 28) = a2;
        v5 = (os_unfair_lock_s *)v7;
        *((_BYTE *)v7 + 256) = 1;
        re::internal::AssetEntry::updateMutatedRuntimeAssetSize(v5);
        re::internal::AssetEntry::updateMutatedAssetNonSharedDataSize(v7);
        re::AssetManager::assetPayloadDidChange(*((re::AssetManager **)v7 + 3), v7);
      }
    }
  }
  re::AssetHandle::~AssetHandle((re::AssetHandle *)&v6);
}

void REVideoAssetSetFileAssetPlaybackMode(uint64_t a1, int a2)
{
  unsigned int v3;
  uint64_t v4;
  os_unfair_lock_s *v5;
  uint64_t v6;
  re::internal::AssetEntry *v7;

  re::AssetAPIHelper::assetHandleCreate(a1, &v6);
  if (v7)
  {
    v3 = atomic_load((unsigned int *)v7 + 176);
    if (v3 == 2)
    {
      re::AssetHandle::mutateAssetCommon((re::AssetHandle *)&v6);
      ++*((_DWORD *)v7 + 65);
      v4 = re::AssetHandle::asset<re::VideoAsset>((re::VideoAsset *)&v6);
      if (v4)
      {
        re::VideoAsset::updateAutoPlay(v4, a2, 0);
        v5 = (os_unfair_lock_s *)v7;
        *((_BYTE *)v7 + 256) = 1;
        re::internal::AssetEntry::updateMutatedRuntimeAssetSize(v5);
        re::internal::AssetEntry::updateMutatedAssetNonSharedDataSize(v7);
      }
    }
  }
  re::AssetHandle::~AssetHandle((re::AssetHandle *)&v6);
}

void REVideoAssetSetFileAssets(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  unsigned int v5;
  uint64_t v6;
  uint64_t v7;
  re::VideoFileAsset *v8;
  uint64_t *v9;
  NSObject *v10;
  _QWORD *v11;
  char *v12;
  os_unfair_lock_s *v13;
  uint64_t v14;
  re::internal::AssetEntry *v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD v18[3];
  int v19;
  uint64_t v20;
  uint8_t buf[4];
  char *v22;
  uint64_t v23;

  v23 = *MEMORY[0x24BDAC8D0];
  re::AssetAPIHelper::assetHandleCreate(a1, &v14);
  re::AssetHandle::loadNow((uint64_t)v15, 0);
  if (v15)
  {
    v5 = atomic_load((unsigned int *)v15 + 176);
    if (v5 == 2)
    {
      re::AssetHandle::mutateAssetCommon((re::AssetHandle *)&v14);
      ++*((_DWORD *)v15 + 65);
      v6 = re::AssetHandle::loadedAsset<re::VideoAsset>((re::VideoAsset *)&v14);
      if (v6)
      {
        v7 = v6;
        v20 = 0;
        memset(v18, 0, sizeof(v18));
        v19 = 0;
        if (a2)
        {
          while (1)
          {
            re::AssetAPIHelper::assetHandleCreate(*a3, &v16);
            if (!v17)
              break;
            v9 = *(uint64_t **)(v17 + 264);
            if (v9 != re::VideoFileAsset::assetType(v8))
              goto LABEL_9;
            re::DynamicArray<re::AssetHandle>::add((_anonymous_namespace_ *)v18, (re::AssetHandle *)&v16);
LABEL_13:
            re::AssetHandle::~AssetHandle((re::AssetHandle *)&v16);
            ++a3;
            if (!--a2)
              goto LABEL_19;
          }
          re::VideoFileAsset::assetType(v8);
LABEL_9:
          if (CoreRELog::onceToken != -1)
            dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
          v10 = (id)CoreRELog::log;
          if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
          {
            v11 = re::AssetHandle::assetInfo((re::AssetHandle *)&v16);
            if ((v11[17] & 1) != 0)
              v12 = (char *)v11[18];
            else
              v12 = (char *)v11 + 137;
            *(_DWORD *)buf = 136315138;
            v22 = v12;
            _os_log_error_impl(&dword_224FE9000, v10, OS_LOG_TYPE_ERROR, "Not a video file asset: '%s'", buf, 0xCu);
          }

          goto LABEL_13;
        }
LABEL_19:
        re::DynamicArray<re::AssetHandle>::operator=((re::AssetHandle *)(v7 + 128), (re::AssetHandle *)v18);
        re::VideoAsset::updateAutoPlay(v7, *(unsigned __int8 *)(v7 + 176), 0);
        re::DynamicArray<re::AssetHandle>::deinit((uint64_t)v18);
        v13 = (os_unfair_lock_s *)v15;
        *((_BYTE *)v15 + 256) = 1;
        re::internal::AssetEntry::updateMutatedRuntimeAssetSize(v13);
        re::internal::AssetEntry::updateMutatedAssetNonSharedDataSize(v15);
      }
    }
  }
  re::AssetManager::assetPayloadDidChange(*((re::AssetManager **)v15 + 3), v15);
  re::AssetHandle::~AssetHandle((re::AssetHandle *)&v14);
}

uint64_t REVideoAssetGetFileAssetCount(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4[3];

  re::AssetAPIHelper::assetHandleCreate(a1, v4);
  v1 = re::AssetHandle::loadedAsset<re::VideoAsset>((re::VideoAsset *)v4);
  if (v1)
    v2 = *(_QWORD *)(v1 + 144);
  else
    v2 = 0;
  re::AssetHandle::~AssetHandle((re::AssetHandle *)v4);
  return v2;
}

uint64_t REVideoAssetGetFileAsset(uint64_t a1, unint64_t a2)
{
  uint64_t v3;
  unint64_t v4;
  NSObject *v5;
  uint64_t v6;
  uint64_t v8[4];
  int v9;
  const char *v10;
  __int16 v11;
  int v12;
  __int16 v13;
  unint64_t v14;
  __int16 v15;
  unint64_t v16;
  uint8_t buf[16];
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  uint64_t v22;

  v22 = *MEMORY[0x24BDAC8D0];
  re::AssetAPIHelper::assetHandleCreate(a1, v8);
  v3 = re::AssetHandle::loadedAsset<re::VideoAsset>((re::VideoAsset *)v8);
  if (!v3)
  {
LABEL_8:
    v6 = 0;
    goto LABEL_12;
  }
  v4 = *(_QWORD *)(v3 + 144);
  if (v4 < a2)
  {
    if (CoreRELog::onceToken != -1)
      dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
    v5 = (id)CoreRELog::log;
    if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 67109120;
      *(_DWORD *)&buf[4] = a2;
      _os_log_error_impl(&dword_224FE9000, v5, OS_LOG_TYPE_ERROR, "Invalid file asset index: %d", buf, 8u);
    }

    goto LABEL_8;
  }
  if (v4 <= a2)
  {
    v8[3] = 0;
    v20 = 0u;
    v21 = 0u;
    v18 = 0u;
    v19 = 0u;
    *(_OWORD *)buf = 0u;
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    v9 = 136315906;
    v10 = "operator[]";
    v11 = 1024;
    v12 = 797;
    v13 = 2048;
    v14 = a2;
    v15 = 2048;
    v16 = v4;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  v6 = *(_QWORD *)(*(_QWORD *)(v3 + 160) + 24 * a2);
LABEL_12:
  re::AssetHandle::~AssetHandle((re::AssetHandle *)v8);
  return v6;
}

id REVideoFileAssetGetAVAsset(uint64_t a1)
{
  uint64_t v1;
  id v2;
  uint64_t v4[3];

  re::AssetAPIHelper::assetHandleCreate(a1, v4);
  v1 = re::AssetHandle::asset<re::VideoFileAsset>((re::VideoFileAsset *)v4);
  if (v1)
    v2 = **(id **)(v1 + 40);
  else
    v2 = 0;
  re::AssetHandle::~AssetHandle((re::AssetHandle *)v4);
  return v2;
}

void REVideoAssetSetDiffuseSpillMapDimensions(uint64_t a1, int32x2_t a2)
{
  uint32x2_t v3;
  NSObject *v4;
  unsigned int v5;
  uint64_t v6;
  os_unfair_lock_s *v7;
  NSObject *v8;
  uint64_t v9;
  int32x2_t v11;
  uint8_t buf[8];
  re::internal::AssetEntry *v13;
  __int32 v14;
  __int16 v15;
  __int32 v16;
  uint64_t v17;

  v17 = *MEMORY[0x24BDAC8D0];
  v11 = vmin_s32(vmax_s32(a2, 0), (int32x2_t)0x10000000100);
  v3 = (uint32x2_t)vceq_s32(v11, a2);
  if ((vpmin_u32(v3, v3).u32[0] & 0x80000000) == 0)
  {
    if (CoreRELog::onceToken != -1)
      dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
    v4 = (id)CoreRELog::log;
    if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
    {
      LODWORD(v9) = 67109888;
      HIDWORD(v9) = a2.i32[0];
      *(_QWORD *)buf = v9;
      LOWORD(v13) = 1024;
      *(_DWORD *)((unint64_t)buf | 0xA) = a2.i32[1];
      HIWORD(v13) = 1024;
      v14 = v11.i32[0];
      v15 = 1024;
      v16 = v11.i32[1];
      _os_log_error_impl(&dword_224FE9000, v4, OS_LOG_TYPE_ERROR, "[REVideoAssetSetDiffuseSpillMapDimensions] Invalid spill map dimensions: %d %d, diffuse spill map clamped to %d %d", buf, 0x1Au);
    }

  }
  if (a1)
  {
    re::AssetAPIHelper::assetHandleCreate(a1, (uint64_t *)buf);
    if (v13)
    {
      v5 = atomic_load((unsigned int *)v13 + 176);
      if (v5 == 2)
      {
        re::AssetHandle::mutateAssetCommon((re::AssetHandle *)buf);
        ++*((_DWORD *)v13 + 65);
        v6 = re::AssetHandle::asset<re::VideoAsset>((re::VideoAsset *)buf);
        if (v6)
        {
          *(int32x2_t *)(v6 + 216) = v11;
          v7 = (os_unfair_lock_s *)v13;
          *((_BYTE *)v13 + 256) = 1;
          re::internal::AssetEntry::updateMutatedRuntimeAssetSize(v7);
          re::internal::AssetEntry::updateMutatedAssetNonSharedDataSize(v13);
        }
        re::AssetHandle::payloadDidChangeIfPossible((re::AssetHandle *)buf);
      }
    }
    re::AssetHandle::~AssetHandle((re::AssetHandle *)buf);
  }
  else
  {
    if (CoreRELog::onceToken != -1)
      dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
    v8 = (id)CoreRELog::log;
    if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      _os_log_error_impl(&dword_224FE9000, v8, OS_LOG_TYPE_ERROR, "[REVideoAssetSetDiffuseSpillMapDimensions] Invalid video asset reference", buf, 2u);
    }

  }
}

void REVideoAssetSetSpecularSpillMapDimensions(uint64_t a1, int32x2_t a2)
{
  uint32x2_t v3;
  NSObject *v4;
  unsigned int v5;
  uint64_t v6;
  os_unfair_lock_s *v7;
  NSObject *v8;
  uint64_t v9;
  int32x2_t v11;
  uint8_t buf[8];
  re::internal::AssetEntry *v13;
  __int32 v14;
  __int16 v15;
  __int32 v16;
  uint64_t v17;

  v17 = *MEMORY[0x24BDAC8D0];
  v11 = vmin_s32(vmax_s32(a2, 0), (int32x2_t)0x80000000800);
  v3 = (uint32x2_t)vceq_s32(v11, a2);
  if ((vpmin_u32(v3, v3).u32[0] & 0x80000000) == 0)
  {
    if (CoreRELog::onceToken != -1)
      dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
    v4 = (id)CoreRELog::log;
    if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
    {
      LODWORD(v9) = 67109888;
      HIDWORD(v9) = a2.i32[0];
      *(_QWORD *)buf = v9;
      LOWORD(v13) = 1024;
      *(_DWORD *)((unint64_t)buf | 0xA) = a2.i32[1];
      HIWORD(v13) = 1024;
      v14 = v11.i32[0];
      v15 = 1024;
      v16 = v11.i32[1];
      _os_log_error_impl(&dword_224FE9000, v4, OS_LOG_TYPE_ERROR, "[REVideoAssetSetSpecularSpillMapDimensions] Invalid spill map dimensions: %d %d, specular spill map clamped to %d %d", buf, 0x1Au);
    }

  }
  if (a1)
  {
    re::AssetAPIHelper::assetHandleCreate(a1, (uint64_t *)buf);
    if (v13)
    {
      v5 = atomic_load((unsigned int *)v13 + 176);
      if (v5 == 2)
      {
        re::AssetHandle::mutateAssetCommon((re::AssetHandle *)buf);
        ++*((_DWORD *)v13 + 65);
        v6 = re::AssetHandle::asset<re::VideoAsset>((re::VideoAsset *)buf);
        if (v6)
        {
          *(int32x2_t *)(v6 + 232) = v11;
          v7 = (os_unfair_lock_s *)v13;
          *((_BYTE *)v13 + 256) = 1;
          re::internal::AssetEntry::updateMutatedRuntimeAssetSize(v7);
          re::internal::AssetEntry::updateMutatedAssetNonSharedDataSize(v13);
        }
        re::AssetHandle::payloadDidChangeIfPossible((re::AssetHandle *)buf);
      }
    }
    re::AssetHandle::~AssetHandle((re::AssetHandle *)buf);
  }
  else
  {
    if (CoreRELog::onceToken != -1)
      dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
    v8 = (id)CoreRELog::log;
    if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      _os_log_error_impl(&dword_224FE9000, v8, OS_LOG_TYPE_ERROR, "[REVideoAssetSetSpecularSpillMapDimensions] Invalid video asset reference", buf, 2u);
    }

  }
}

void REVideoAssetSetDiffuseSpillMapBlurSigma(uint64_t a1, int a2)
{
  unsigned int v3;
  re::VideoAsset *v4;
  os_unfair_lock_s *v5;
  NSObject *v6;
  uint64_t v7;
  re::internal::AssetEntry *v8;

  if (a1)
  {
    re::AssetAPIHelper::assetHandleCreate(a1, &v7);
    if (v8)
    {
      v3 = atomic_load((unsigned int *)v8 + 176);
      if (v3 == 2)
      {
        re::AssetHandle::mutateAssetCommon((re::AssetHandle *)&v7);
        ++*((_DWORD *)v8 + 65);
        v4 = (re::VideoAsset *)re::AssetHandle::asset<re::VideoAsset>((re::VideoAsset *)&v7);
        if (v4)
        {
          re::VideoAsset::setDiffuseSpillMapBlurSigma(v4, a2);
          v5 = (os_unfair_lock_s *)v8;
          *((_BYTE *)v8 + 256) = 1;
          re::internal::AssetEntry::updateMutatedRuntimeAssetSize(v5);
          re::internal::AssetEntry::updateMutatedAssetNonSharedDataSize(v8);
        }
        re::AssetHandle::payloadDidChangeIfPossible((re::AssetHandle *)&v7);
      }
    }
    re::AssetHandle::~AssetHandle((re::AssetHandle *)&v7);
  }
  else
  {
    if (CoreRELog::onceToken != -1)
      dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
    v6 = (id)CoreRELog::log;
    if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
    {
      LOWORD(v7) = 0;
      _os_log_error_impl(&dword_224FE9000, v6, OS_LOG_TYPE_ERROR, "[REVideoAssetSetDiffuseSpillMapBlurSigma] Invalid video asset reference", (uint8_t *)&v7, 2u);
    }

  }
}

void REVideoAssetSetSpecularSpillMapBlurSigma(uint64_t a1, int a2)
{
  unsigned int v3;
  re::VideoAsset *v4;
  os_unfair_lock_s *v5;
  NSObject *v6;
  uint64_t v7;
  re::internal::AssetEntry *v8;

  if (a1)
  {
    re::AssetAPIHelper::assetHandleCreate(a1, &v7);
    if (v8)
    {
      v3 = atomic_load((unsigned int *)v8 + 176);
      if (v3 == 2)
      {
        re::AssetHandle::mutateAssetCommon((re::AssetHandle *)&v7);
        ++*((_DWORD *)v8 + 65);
        v4 = (re::VideoAsset *)re::AssetHandle::asset<re::VideoAsset>((re::VideoAsset *)&v7);
        if (v4)
        {
          re::VideoAsset::setSpecularSpillMapBlurSigma(v4, a2);
          v5 = (os_unfair_lock_s *)v8;
          *((_BYTE *)v8 + 256) = 1;
          re::internal::AssetEntry::updateMutatedRuntimeAssetSize(v5);
          re::internal::AssetEntry::updateMutatedAssetNonSharedDataSize(v8);
        }
        re::AssetHandle::payloadDidChangeIfPossible((re::AssetHandle *)&v7);
      }
    }
    re::AssetHandle::~AssetHandle((re::AssetHandle *)&v7);
  }
  else
  {
    if (CoreRELog::onceToken != -1)
      dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
    v6 = (id)CoreRELog::log;
    if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
    {
      LOWORD(v7) = 0;
      _os_log_error_impl(&dword_224FE9000, v6, OS_LOG_TYPE_ERROR, "[REVideoAssetSetSpecularSpillMapBlurSigma] Invalid video asset reference", (uint8_t *)&v7, 2u);
    }

  }
}

uint64_t REVideoComponentGetVideoAsset(uint64_t a1)
{
  return *(_QWORD *)(a1 + 168);
}

void REVideoComponentSetVideoAsset(uint64_t a1, uint64_t a2)
{
  uint64_t v3[3];
  uint64_t v4[3];

  re::AssetAPIHelper::assetHandleCreate(a2, v4);
  re::AssetHandle::AssetHandle((re::AssetHandle *)v3, (const re::AssetHandle *)v4);
  re::AssetHandle::operator=((uint64_t *)(a1 + 168), v3);
  *(_BYTE *)(a1 + 73) = 0;
  re::AssetHandle::~AssetHandle((re::AssetHandle *)v3);
  re::AssetHandle::~AssetHandle((re::AssetHandle *)v4);
}

uint64_t REVideoComponentGetMaterialAsset(uint64_t a1)
{
  return *(_QWORD *)(a1 + 32);
}

void REVideoComponentSetMaterialAsset(uint64_t a1, uint64_t a2)
{
  uint64_t v3[3];

  re::AssetAPIHelper::assetHandleCreate(a2, v3);
  re::AssetHandle::operator=((uint64_t *)(a1 + 32), v3);
  re::AssetHandle::~AssetHandle((re::AssetHandle *)v3);
}

void REVideoComponentAddRealityKitDefaultAttachmentsOnAllMaterials(uint64_t a1)
{
  REVideoComponentAddAttachmentOnAllMaterials(a1, CFSTR("REVideoAttachmentChannelID1TexturePlane0"), "texturePlane0");
  REVideoComponentAddAttachmentOnAllMaterials(a1, CFSTR("REVideoAttachmentChannelID1TexturePlane1"), "texturePlane1");
  REVideoComponentAddAttachmentOnAllMaterials(a1, CFSTR("REVideoAttachmentChannelID1TexturePlane2"), "texturePlane2");
  REVideoComponentAddAttachmentOnAllMaterials(a1, CFSTR("REVideoAttachmentChannelID2TexturePlane0"), "texturePlane0ChannelID2");
  REVideoComponentAddAttachmentOnAllMaterials(a1, CFSTR("REVideoAttachmentChannelID2TexturePlane1"), "texturePlane1ChannelID2");
  REVideoComponentAddAttachmentOnAllMaterials(a1, CFSTR("REVideoAttachmentChannelID2TexturePlane2"), "texturePlane2ChannelID2");
  REVideoComponentAddAttachmentOnAllMaterials(a1, CFSTR("REVideoAttachmentConstantYCbCrMatrix"), "YCbCrMatrixOption");
  REVideoComponentAddAttachmentOnAllMaterials(a1, CFSTR("REVideoAttachmentConstantImageFunction"), "imageFunction");
  REVideoComponentAddAttachmentOnAllMaterials(a1, CFSTR("REVideoAttachmentChannelID1TextureSpill"), "textureSpill");
  REVideoComponentAddAttachmentOnAllMaterials(a1, CFSTR("REVideoAttachmentChannelID2TextureSpill"), "textureSpill2");
}

void REVideoComponentAddAttachmentOnAllMaterials(uint64_t a1, id a2, const char *a3)
{
  _anonymous_namespace_ *v5;
  _anonymous_namespace_ *v6;
  StringID v7;
  _QWORD v8[2];

  v5 = (_anonymous_namespace_ *)objc_msgSend(objc_retainAutorelease(a2), "UTF8String");
  *(_QWORD *)&v7.var0 = 0;
  v7.var1 = (char *)&str_110;
  v8[0] = 0;
  v8[1] = &str_110;
  re::DynamicArray<re::ecs2::VideoMaterialAttachment>::add((_anonymous_namespace_ *)(a1 + 80), &v7);
  re::StringID::destroyString((re::StringID *)v8);
  re::StringID::destroyString((re::StringID *)&v7);
}

void REVideoComponentRemoveRealityKitDefaultAttachmentsOnAllMaterials(uint64_t a1)
{
  REVideoComponentRemoveAttachmentFromAllMaterials(a1, CFSTR("REVideoAttachmentChannelID1TexturePlane0"), "texturePlane0");
  REVideoComponentRemoveAttachmentFromAllMaterials(a1, CFSTR("REVideoAttachmentChannelID1TexturePlane1"), "texturePlane1");
  REVideoComponentRemoveAttachmentFromAllMaterials(a1, CFSTR("REVideoAttachmentChannelID1TexturePlane2"), "texturePlane2");
  REVideoComponentRemoveAttachmentFromAllMaterials(a1, CFSTR("REVideoAttachmentChannelID2TexturePlane0"), "texturePlane0ChannelID2");
  REVideoComponentRemoveAttachmentFromAllMaterials(a1, CFSTR("REVideoAttachmentChannelID2TexturePlane1"), "texturePlane1ChannelID2");
  REVideoComponentRemoveAttachmentFromAllMaterials(a1, CFSTR("REVideoAttachmentChannelID2TexturePlane2"), "texturePlane2ChannelID2");
  REVideoComponentRemoveAttachmentFromAllMaterials(a1, CFSTR("REVideoAttachmentConstantYCbCrMatrix"), "YCbCrMatrixOption");
  REVideoComponentRemoveAttachmentFromAllMaterials(a1, CFSTR("REVideoAttachmentConstantImageFunction"), "imageFunction");
  REVideoComponentRemoveAttachmentFromAllMaterials(a1, CFSTR("REVideoAttachmentChannelID1TextureSpill"), "textureSpill");
  REVideoComponentRemoveAttachmentFromAllMaterials(a1, CFSTR("REVideoAttachmentChannelID2TextureSpill"), "textureSpill2");
}

void REVideoComponentRemoveAttachmentFromAllMaterials(uint64_t a1, id a2, const char *a3)
{
  _anonymous_namespace_ *v5;
  _anonymous_namespace_ *v6;
  StringID v7;
  _QWORD v8[2];

  v5 = (_anonymous_namespace_ *)objc_msgSend(objc_retainAutorelease(a2), "UTF8String");
  *(_QWORD *)&v7.var0 = 0;
  v7.var1 = (char *)&str_110;
  v8[0] = 0;
  v8[1] = &str_110;
  re::ecs2::VideoComponent::removeAttachment(a1, &v7);
  re::StringID::destroyString((re::StringID *)v8);
  re::StringID::destroyString((re::StringID *)&v7);
}

double REVideoComponentGetFadeThreshold()
{
  return 0.0;
}

uint64_t REVideoComponentGetDesiredViewingMode(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 56);
}

uint64_t REVideoComponentSetDesiredViewingMode(uint64_t result, char a2)
{
  *(_BYTE *)(result + 56) = a2;
  return result;
}

uint64_t REVideoComponentGetCurrentViewingMode(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 57);
}

double REVideoComponentGetCurrentImageSize(uint64_t a1)
{
  return *(double *)(a1 + 64);
}

uint64_t REVideoComponentGetForceStereoSideBySide(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 72);
}

uint64_t REVideoComponentSetForceStereoSideBySide(uint64_t result, char a2)
{
  *(_BYTE *)(result + 72) = a2;
  return result;
}

uint64_t REVideoComponentSetOptOutOfAudioControl(uint64_t result, char a2)
{
  if (result)
    *(_BYTE *)(result + 267) = a2;
  return result;
}

BOOL REVideoComponentGetOptOutOfAudioControl(_BOOL8 result)
{
  if (result)
    return *(_BYTE *)(result + 267) != 0;
  return result;
}

uint64_t REVideoComponentSetLightSpillTraitEnabled(uint64_t result)
{
  if (result)
    *(_DWORD *)(result + 268) |= 1u;
  return result;
}

uint64_t REVideoComponentGetLightSpillTraitEnabled(uint64_t result)
{
  if (result)
    return *(_BYTE *)(result + 268) & 1;
  return result;
}

re::ecs2::VideoComponent *REVideoComponentGetReadyToRender(re::ecs2::VideoComponent *result)
{
  if (result)
    return (re::ecs2::VideoComponent *)re::ecs2::VideoComponent::getReadyToRender(result);
  return result;
}

const __CFString *REVideoComponentGetStereoMode(uint64_t a1)
{
  if (*(_BYTE *)(a1 + 56) == 1)
    return CFSTR("REVideoStereoModeMono");
  else
    return CFSTR("REVideoStereoModeStereo");
}

uint64_t REVideoComponentSetStereoMode(uint64_t result)
{
  *(_BYTE *)(result + 56) = 1;
  return result;
}

uint64_t REVideoComponentSetTransitionAlpha(uint64_t result, float a2)
{
  *(float *)(result + 276) = a2;
  return result;
}

float REVideoComponentGetTransitionAlpha(uint64_t a1)
{
  return *(float *)(a1 + 276);
}

uint64_t REComponentIsAvailableForMajorVersion(uint64_t a1, uint64_t a2)
{
  __int128 v4;
  __int128 v5;

  (*(void (**)(__int128 *__return_ptr))(*(_QWORD *)a1 + 56))(&v5);
  v4 = v5;
}

uint64_t REAssetIsAvailableForMajorVersion(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v5[3];

  re::AssetAPIHelper::assetHandleCreate(a1, v5);
  v3 = re::TypeAvailabilityUtilities::checkAssetIsAvailableForMajorVersion((re::SceneAsset *)v5, a2, 0);
  re::AssetHandle::~AssetHandle((re::AssetHandle *)v5);
  return v3;
}

uint64_t REComponentGetInitialRelease(uint64_t a1)
{
  __int128 v2;
  __int128 v3;

  (*(void (**)(__int128 *__return_ptr))(*(_QWORD *)a1 + 56))(&v3);
  v2 = v3;
}

uint64_t REAssetGetInitialRelease(uint64_t a1)
{
  const re::AssetHandle *v1;
  uint64_t AssetInitialRelease;
  uint64_t v4[3];

  re::AssetAPIHelper::assetHandleCreate(a1, v4);
  AssetInitialRelease = (int)re::TypeAvailabilityUtilities::getAssetInitialRelease((re::TypeAvailabilityUtilities *)v4, v1);
  re::AssetHandle::~AssetHandle((re::AssetHandle *)v4);
  return AssetInitialRelease;
}

void *RETransformComponentGetComponentType()
{
  if (re::ecs2::dispatchOnceInitECSComponents(void)::onceToken != -1)
    dispatch_once(&re::ecs2::dispatchOnceInitECSComponents(void)::onceToken, &__block_literal_global_13);
  return re::ecs2::ComponentImpl<re::ecs2::TransformComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType;
}

__n128 RETransformComponentGetLocalPose(__n128 *a1)
{
  return a1[4];
}

void RETransformComponentSetLocalPose(__n128 *a1, int8x16_t a2, float32x4_t a3)
{
  float32x2_t v3;
  int8x8_t v4;
  unint64_t *v6;
  unint64_t v7;
  unint64_t v8;
  __n128 *v9;
  NSObject *v10;
  int8x16_t v11;
  float32x4_t v12;
  uint8_t buf[4];
  const char *v14;
  uint64_t v15;

  v15 = *MEMORY[0x24BDAC8D0];
  v3.i32[1] = a2.i32[1];
  v3.i32[0] = vextq_s8(a2, a2, 8uLL).u32[0];
  v4 = vmvn_s8(vorr_s8((int8x8_t)vcltz_f32(v3), (int8x8_t)vcgez_f32(v3)));
  if ((v4.i8[4] & 1) == 0
    && (v4.i8[0] & 1) == 0
    && (vaddvq_s32((int32x4_t)vbicq_s8((int8x16_t)xmmword_22611E0A0, vorrq_s8((int8x16_t)vcltzq_f32(a3), (int8x16_t)vcgezq_f32(a3)))) & 0xF) == 0)
  {
    if (a1[1].n128_u64[0])
    {
      v11 = a2;
      v12 = a3;
      v6 = (unint64_t *)re::BindPoint::baseValueUntyped((re::BindPoint *)&a1[5]);
      v8 = *v6;
      v7 = v6[1];
      if (a1[1].n128_u64[0])
      {
        v9 = (__n128 *)re::BindPoint::baseValueUntyped((re::BindPoint *)&a1[5]);
        a2 = v11;
        a3 = v12;
LABEL_15:
        v9->n128_u64[0] = v8;
        v9->n128_u64[1] = v7;
        v9[1] = (__n128)a3;
        v9[2] = (__n128)a2;
        re::ecs2::Component::enqueueMarkDirty((uint64_t)a1);
        return;
      }
      a2 = v11;
      a3 = v12;
    }
    else
    {
      v8 = a1[2].n128_u64[0];
      v7 = a1[2].n128_u64[1];
    }
    v9 = a1 + 2;
    goto LABEL_15;
  }
  if (CoreRELog::onceToken != -1)
    dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
  v10 = (id)CoreRELog::log;
  if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)buf = 136315138;
    v14 = "RETransformComponentSetLocalPose";
    _os_log_error_impl(&dword_224FE9000, v10, OS_LOG_TYPE_ERROR, "Call to %s contains NaN. Skipping.", buf, 0xCu);
  }

}

void RETransformComponentSetLocalSRT(uint64_t a1, int8x16_t a2, float32x4_t a3, int8x16_t a4)
{
  int8x16_t v4;
  float32x2_t v5;
  int8x8_t v6;
  float32x2_t v7;
  int8x8_t v8;
  uint64_t v10;
  NSObject *v11;
  int8x16_t v12;
  float32x4_t v13;
  int8x16_t v14;
  uint8_t buf[4];
  const char *v16;
  uint64_t v17;

  v4 = a2;
  v17 = *MEMORY[0x24BDAC8D0];
  v5.i32[1] = a2.i32[1];
  v5.i32[0] = vextq_s8(a2, a2, 8uLL).u32[0];
  v6 = vmvn_s8(vorr_s8((int8x8_t)vcltz_f32(v5), (int8x8_t)vcgez_f32(v5)));
  if ((v6.i8[4] & 1) != 0
    || (v6.i8[0] & 1) != 0
    || (vaddvq_s32((int32x4_t)vbicq_s8((int8x16_t)xmmword_22611E0A0, vorrq_s8((int8x16_t)vcltzq_f32(a3), (int8x16_t)vcgezq_f32(a3)))) & 0xF) != 0|| (v7.i32[1] = a4.i32[1], v7.i32[0] = vextq_s8(a4, a4, 8uLL).u32[0], v8 = vmvn_s8(vorr_s8((int8x8_t)vcltz_f32(v7), (int8x8_t)vcgez_f32(v7))), (v8.i8[4] & 1) != 0)|| (v8.i8[0] & 1) != 0)
  {
    if (CoreRELog::onceToken != -1)
      dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
    v11 = (id)CoreRELog::log;
    if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315138;
      v16 = "RETransformComponentSetLocalSRT";
      _os_log_error_impl(&dword_224FE9000, v11, OS_LOG_TYPE_ERROR, "Call to %s contains NaN. Skipping.", buf, 0xCu);
    }

  }
  else
  {
    if (*(_QWORD *)(a1 + 16))
    {
      v13 = a3;
      v14 = a4;
      v12 = v4;
      v10 = re::BindPoint::baseValueUntyped((re::BindPoint *)(a1 + 80));
      v4 = v12;
      a3 = v13;
      a4 = v14;
    }
    else
    {
      v10 = a1 + 32;
    }
    *(int8x16_t *)v10 = v4;
    *(float32x4_t *)(v10 + 16) = a3;
    *(int8x16_t *)(v10 + 32) = a4;
    re::ecs2::Component::enqueueMarkDirty(a1);
  }
}

__n128 RETransformComponentGetLocalSRT(__n128 *a1)
{
  return a1[2];
}

__n128 RETransformComponentGetLocalUnanimatedSRT(uint64_t a1)
{
  uint64_t v1;

  if (*(_QWORD *)(a1 + 16))
    v1 = re::BindPoint::baseValueUntyped((re::BindPoint *)(a1 + 80));
  else
    v1 = a1 + 32;
  return *(__n128 *)v1;
}

uint64_t RETransformComponentIsAnimated(uint64_t a1)
{
  return re::BindPoint::isOverridden((re::BindPoint *)(a1 + 80));
}

void RETransformComponentSetLocalTranslation(uint64_t a1, int8x16_t a2)
{
  float32x2_t v2;
  int8x8_t v3;
  uint64_t v5;
  __n128 *v6;
  NSObject *v7;
  int8x16_t v8;
  uint8_t buf[4];
  const char *v10;
  uint64_t v11;

  v11 = *MEMORY[0x24BDAC8D0];
  v2.i32[1] = a2.i32[1];
  v2.i32[0] = vextq_s8(a2, a2, 8uLL).u32[0];
  v3 = vmvn_s8(vorr_s8((int8x8_t)vcltz_f32(v2), (int8x8_t)vcgez_f32(v2)));
  if ((v3.i8[4] & 1) != 0 || (v3.i8[0] & 1) != 0)
  {
    if (CoreRELog::onceToken != -1)
      dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
    v7 = (id)CoreRELog::log;
    if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315138;
      v10 = "RETransformComponentSetLocalTranslation";
      _os_log_error_impl(&dword_224FE9000, v7, OS_LOG_TYPE_ERROR, "Call to %s contains NaN. Skipping.", buf, 0xCu);
    }

  }
  else
  {
    if (*(_QWORD *)(a1 + 16))
    {
      v8 = a2;
      v5 = re::BindPoint::baseValueUntyped((re::BindPoint *)(a1 + 80));
      a2 = v8;
      v6 = (__n128 *)(v5 + 32);
    }
    else
    {
      v6 = (__n128 *)(a1 + 64);
    }
    *v6 = (__n128)a2;
    re::ecs2::Component::enqueueMarkDirty(a1);
  }
}

__n128 RETransformComponentGetLocalTranslation(__n128 *a1)
{
  return a1[4];
}

void RETransformComponentSetLocalOrientation(uint64_t a1, float32x4_t a2)
{
  NSObject *v2;
  uint64_t v4;
  __n128 *v5;
  float32x4_t v6;
  uint8_t buf[4];
  const char *v8;
  uint64_t v9;

  v9 = *MEMORY[0x24BDAC8D0];
  if ((vmaxv_u16((uint16x4_t)vmovn_s32((int32x4_t)vmvnq_s8(vorrq_s8((int8x16_t)vcltzq_f32(a2), (int8x16_t)vcgezq_f32(a2))))) & 1) != 0)
  {
    if (CoreRELog::onceToken != -1)
      dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
    v2 = (id)CoreRELog::log;
    if (os_log_type_enabled(v2, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315138;
      v8 = "RETransformComponentSetLocalOrientation";
      _os_log_error_impl(&dword_224FE9000, v2, OS_LOG_TYPE_ERROR, "Call to %s contains NaN. Skipping.", buf, 0xCu);
    }

  }
  else
  {
    if (*(_QWORD *)(a1 + 16))
    {
      v6 = a2;
      v4 = re::BindPoint::baseValueUntyped((re::BindPoint *)(a1 + 80));
      a2 = v6;
      v5 = (__n128 *)(v4 + 16);
    }
    else
    {
      v5 = (__n128 *)(a1 + 48);
    }
    *v5 = (__n128)a2;
    re::ecs2::Component::enqueueMarkDirty(a1);
  }
}

__n128 RETransformComponentGetLocalOrientation(__n128 *a1)
{
  return a1[3];
}

void RETransformComponentSetLocalScale(uint64_t a1, int8x16_t a2)
{
  float32x2_t v2;
  int8x8_t v3;
  __n128 *v5;
  NSObject *v6;
  int8x16_t v7;
  uint8_t buf[4];
  const char *v9;
  uint64_t v10;

  v10 = *MEMORY[0x24BDAC8D0];
  v2.i32[1] = a2.i32[1];
  v2.i32[0] = vextq_s8(a2, a2, 8uLL).u32[0];
  v3 = vmvn_s8(vorr_s8((int8x8_t)vcltz_f32(v2), (int8x8_t)vcgez_f32(v2)));
  if ((v3.i8[4] & 1) != 0 || (v3.i8[0] & 1) != 0)
  {
    if (CoreRELog::onceToken != -1)
      dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
    v6 = (id)CoreRELog::log;
    if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315138;
      v9 = "RETransformComponentSetLocalScale";
      _os_log_error_impl(&dword_224FE9000, v6, OS_LOG_TYPE_ERROR, "Call to %s contains NaN. Skipping.", buf, 0xCu);
    }

  }
  else
  {
    if (*(_QWORD *)(a1 + 16))
    {
      v7 = a2;
      v5 = (__n128 *)re::BindPoint::baseValueUntyped((re::BindPoint *)(a1 + 80));
      a2 = v7;
    }
    else
    {
      v5 = (__n128 *)(a1 + 32);
    }
    *v5 = (__n128)a2;
    re::ecs2::Component::enqueueMarkDirty(a1);
  }
}

__n128 RETransformComponentGetLocalScale(__n128 *a1)
{
  return a1[2];
}

double RETransformComponentGetWorldUnanimatedMatrix4x4F(re::ecs2::TransformComponent *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  __int128 v7;

  v2 = *((_QWORD *)this + 2);
  if (v2)
  {
    do
    {
      v3 = v2;
      v2 = *(_QWORD *)(v2 + 24);
    }
    while (v2);
    v4 = *(_QWORD *)(v3 + 16);
    if (v4)
    {
      v5 = *(_QWORD *)(v4 + 56);
      if (v5)
        (*(void (**)(uint64_t))(*(_QWORD *)v5 + 200))(v5);
    }
  }
  re::ecs2::TransformComponent::worldMatrix4x4F(this, 0, (uint64_t)&v7);
  return *(double *)&v7;
}

double RETransformComponentGetWorldMatrix4x4F(re::ecs2::TransformComponent *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  __int128 v7;

  v2 = *((_QWORD *)this + 2);
  if (v2)
  {
    do
    {
      v3 = v2;
      v2 = *(_QWORD *)(v2 + 24);
    }
    while (v2);
    v4 = *(_QWORD *)(v3 + 16);
    if (v4)
    {
      v5 = *(_QWORD *)(v4 + 56);
      if (v5)
        (*(void (**)(uint64_t))(*(_QWORD *)v5 + 200))(v5);
    }
  }
  re::ecs2::TransformComponent::worldMatrix4x4F(this, 1, (uint64_t)&v7);
  return *(double *)&v7;
}

double RETransformComponentGetParentWorldMatrix4x4F(uint64_t a1)
{
  re::ecs2::TransformComponent *v2;
  re::ecs2::TransformComponent *v3;
  re::ecs2::TransformComponent *v4;
  uint64_t v5;
  uint64_t v6;
  double result;
  __int128 v8;

  v2 = *(re::ecs2::TransformComponent **)(a1 + 16);
  if (!v2)
    goto LABEL_9;
  v3 = v2;
  do
  {
    v4 = v3;
    v3 = (re::ecs2::TransformComponent *)*((_QWORD *)v3 + 3);
  }
  while (v3);
  v5 = *((_QWORD *)v4 + 2);
  if (v5)
  {
    v6 = *(_QWORD *)(v5 + 56);
    if (v6)
    {
      (*(void (**)(uint64_t))(*(_QWORD *)v6 + 200))(v6);
      v2 = *(re::ecs2::TransformComponent **)(a1 + 16);
    }
  }
  if (v2)
  {
    re::ecs2::TransformComponent::parentWorldMatrix4x4F(v2, (const re::ecs2::Entity *)1, &v8);
    return *(double *)&v8;
  }
  else
  {
LABEL_9:
    *(_QWORD *)&result = 1065353216;
  }
  return result;
}

double RETransformComponentGetParentWorldUnanimatedMatrix4x4F(uint64_t a1)
{
  re::ecs2::TransformComponent *v1;
  double result;
  __int128 v3;

  v1 = *(re::ecs2::TransformComponent **)(a1 + 16);
  if (v1)
  {
    re::ecs2::TransformComponent::parentWorldMatrix4x4F(v1, 0, &v3);
    return *(double *)&v3;
  }
  else
  {
    *(_QWORD *)&result = 1065353216;
  }
  return result;
}

double RETransformComponentGetWorldPose(uint64_t a1)
{
  re::ecs2::TransformComponent **v2;
  re::ecs2::TransformComponent **v3;
  re::ecs2::TransformComponent **v4;
  re::ecs2::TransformComponent *v5;
  uint64_t v6;
  __int128 v7;
  _OWORD v9[2];
  __int128 v10;

  v2 = *(re::ecs2::TransformComponent ***)(a1 + 16);
  if (!v2)
    goto LABEL_9;
  v3 = v2;
  do
  {
    v4 = v3;
    v3 = (re::ecs2::TransformComponent **)v3[3];
  }
  while (v3);
  v5 = v4[2];
  if (v5)
  {
    v6 = *((_QWORD *)v5 + 7);
    if (v6)
    {
      (*(void (**)(uint64_t))(*(_QWORD *)v6 + 200))(v6);
      v2 = *(re::ecs2::TransformComponent ***)(a1 + 16);
    }
  }
  if (v2)
  {
    re::ecs2::TransformComponent::worldSRT(v2, (const re::ecs2::Entity *)1, (uint64_t)v9);
  }
  else
  {
LABEL_9:
    v7 = *(_OWORD *)(a1 + 48);
    v9[0] = *(_OWORD *)(a1 + 32);
    v9[1] = v7;
    v10 = *(_OWORD *)(a1 + 64);
  }
  return *(double *)&v10;
}

__n128 RETransformComponentGetWorldPosition(__n128 *a1)
{
  re::ecs2::TransformComponent **v2;
  re::ecs2::TransformComponent **v3;
  re::ecs2::TransformComponent **v4;
  re::ecs2::TransformComponent *v5;
  uint64_t v6;
  __n128 result;
  __int128 v8[3];
  __int128 v9;

  v2 = (re::ecs2::TransformComponent **)a1[1].n128_u64[0];
  if (!v2)
    return a1[4];
  v3 = v2;
  do
  {
    v4 = v3;
    v3 = (re::ecs2::TransformComponent **)v3[3];
  }
  while (v3);
  v5 = v4[2];
  if (v5)
  {
    v6 = *((_QWORD *)v5 + 7);
    if (v6)
    {
      (*(void (**)(uint64_t))(*(_QWORD *)v6 + 200))(v6);
      v2 = (re::ecs2::TransformComponent **)a1[1].n128_u64[0];
    }
  }
  if (v2)
  {
    re::ecs2::TransformComponent::worldMatrix4x4F(v2, (const re::ecs2::Entity *)1, v8);
    result.n128_u64[0] = v9;
  }
  else
  {
    return a1[4];
  }
  return result;
}

double RETransformComponentGetWorldOrientation(uint64_t a1)
{
  re::ecs2::TransformComponent **v2;
  re::ecs2::TransformComponent **v3;
  re::ecs2::TransformComponent **v4;
  re::ecs2::TransformComponent *v5;
  uint64_t v6;
  double v7;

  v2 = *(re::ecs2::TransformComponent ***)(a1 + 16);
  if (!v2)
    return *(double *)(a1 + 48);
  v3 = v2;
  do
  {
    v4 = v3;
    v3 = (re::ecs2::TransformComponent **)v3[3];
  }
  while (v3);
  v5 = v4[2];
  if (v5)
  {
    v6 = *((_QWORD *)v5 + 7);
    if (v6)
    {
      (*(void (**)(uint64_t))(*(_QWORD *)v6 + 200))(v6);
      v2 = *(re::ecs2::TransformComponent ***)(a1 + 16);
    }
  }
  if (!v2)
    return *(double *)(a1 + 48);
  re::ecs2::TransformComponent::worldOrientation(v2, (const re::ecs2::Entity *)1);
  return v7;
}

double RETransformComponentGetWorldScale(uint64_t a1)
{
  re::ecs2::TransformComponent **v2;
  re::ecs2::TransformComponent **v3;
  re::ecs2::TransformComponent **v4;
  re::ecs2::TransformComponent *v5;
  uint64_t v6;
  double v7;

  v2 = *(re::ecs2::TransformComponent ***)(a1 + 16);
  if (!v2)
    return *(double *)(a1 + 32);
  v3 = v2;
  do
  {
    v4 = v3;
    v3 = (re::ecs2::TransformComponent **)v3[3];
  }
  while (v3);
  v5 = v4[2];
  if (v5)
  {
    v6 = *((_QWORD *)v5 + 7);
    if (v6)
    {
      (*(void (**)(uint64_t))(*(_QWORD *)v6 + 200))(v6);
      v2 = *(re::ecs2::TransformComponent ***)(a1 + 16);
    }
  }
  if (!v2)
    return *(double *)(a1 + 32);
  re::ecs2::TransformComponent::worldScale(v2, (const re::ecs2::Entity *)1);
  return v7;
}

double RETransformComponentGetWorldSRT(uint64_t a1)
{
  re::ecs2::TransformComponent **v2;
  re::ecs2::TransformComponent **v3;
  re::ecs2::TransformComponent **v4;
  re::ecs2::TransformComponent *v5;
  uint64_t v6;
  __int128 v7;
  _OWORD v9[3];

  v2 = *(re::ecs2::TransformComponent ***)(a1 + 16);
  if (!v2)
    goto LABEL_9;
  v3 = v2;
  do
  {
    v4 = v3;
    v3 = (re::ecs2::TransformComponent **)v3[3];
  }
  while (v3);
  v5 = v4[2];
  if (v5)
  {
    v6 = *((_QWORD *)v5 + 7);
    if (v6)
    {
      (*(void (**)(uint64_t))(*(_QWORD *)v6 + 200))(v6);
      v2 = *(re::ecs2::TransformComponent ***)(a1 + 16);
    }
  }
  if (v2)
  {
    re::ecs2::TransformComponent::worldSRT(v2, (const re::ecs2::Entity *)1, (uint64_t)v9);
  }
  else
  {
LABEL_9:
    v7 = *(_OWORD *)(a1 + 48);
    v9[0] = *(_OWORD *)(a1 + 32);
    v9[1] = v7;
    v9[2] = *(_OWORD *)(a1 + 64);
  }
  return *(double *)v9;
}

void RETransformComponentSetWorldMatrix4x4F(uint64_t a1, __n128 a2, simd_float4 a3, simd_float4 a4, simd_float4 a5)
{
  NSObject *v6;
  _OWORD v11[3];
  simd_float4x4 v12;
  __int128 v13;
  __int128 v14;
  int32x4_t v15;
  uint8_t buf[16];
  simd_float4 v17;
  simd_float4 v18;
  simd_float4 v19;
  uint64_t v20;

  v20 = *MEMORY[0x24BDAC8D0];
  v12.columns[0] = (simd_float4)a2;
  v12.columns[1] = a3;
  v12.columns[2] = a4;
  v12.columns[3] = a5;
  if (containsNaN(&v12))
  {
    if (CoreRELog::onceToken != -1)
      dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
    v6 = (id)CoreRELog::log;
    if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315138;
      *(_QWORD *)&buf[4] = "RETransformComponentSetWorldMatrix4x4F";
      _os_log_error_impl(&dword_224FE9000, v6, OS_LOG_TYPE_ERROR, "Call to %s contains NaN. Skipping.", buf, 0xCu);
    }

  }
  else
  {
    *(__n128 *)buf = a2;
    v17 = a3;
    v18 = a4;
    v19 = a5;
    v14 = xmmword_2260E5D70;
    v15 = 0u;
    v13 = 0u;
    re::decomposeScaleRotationTranslation<float>((uint64_t)buf, &v15, &v14, &v13);
    v11[0] = v15;
    v11[1] = v14;
    v11[2] = v13;
    re::ecs2::TransformComponent::setWorldSRT(a1, (uint64_t)v11, 0);
    re::ecs2::Component::enqueueMarkDirty(a1);
  }
}

BOOL containsNaN(simd_float4x4 *a1)
{
  _BOOL8 result;
  int8x16_t v2;
  float32x2_t v3;
  int8x8_t v4;

  if ((vmaxv_u16((uint16x4_t)vmovn_s32((int32x4_t)vmvnq_s8(vorrq_s8((int8x16_t)vcltzq_f32((float32x4_t)a1->columns[0]), (int8x16_t)vcgezq_f32((float32x4_t)a1->columns[0]))))) & 1) != 0|| (vmaxv_u16((uint16x4_t)vmovn_s32((int32x4_t)vmvnq_s8(vorrq_s8((int8x16_t)vcltzq_f32((float32x4_t)a1->columns[1]), (int8x16_t)vcgezq_f32((float32x4_t)a1->columns[1]))))) & 1) != 0|| (vmaxv_u16((uint16x4_t)vmovn_s32((int32x4_t)vmvnq_s8(vorrq_s8((int8x16_t)vcltzq_f32((float32x4_t)a1->columns[2]), (int8x16_t)vcgezq_f32((float32x4_t)a1->columns[2]))))) & 1) != 0)
  {
    return 1;
  }
  v2 = (int8x16_t)a1->columns[3];
  result = 1;
  v3.i32[1] = v2.i32[1];
  v3.i32[0] = vextq_s8(v2, v2, 8uLL).u32[0];
  v4 = vmvn_s8(vorr_s8((int8x8_t)vcltz_f32(v3), (int8x8_t)vcgez_f32(v3)));
  if ((v4.i8[4] & 1) == 0)
    return (v4.i8[0] & 1) != 0;
  return result;
}

void RETransformComponentSetWorldAnimatedMatrix4x4F(uint64_t a1, __n128 a2, simd_float4 a3, simd_float4 a4, simd_float4 a5)
{
  NSObject *v6;
  _OWORD v11[3];
  simd_float4x4 v12;
  __int128 v13;
  __int128 v14;
  int32x4_t v15;
  uint8_t buf[16];
  simd_float4 v17;
  simd_float4 v18;
  simd_float4 v19;
  uint64_t v20;

  v20 = *MEMORY[0x24BDAC8D0];
  v12.columns[0] = (simd_float4)a2;
  v12.columns[1] = a3;
  v12.columns[2] = a4;
  v12.columns[3] = a5;
  if (containsNaN(&v12))
  {
    if (CoreRELog::onceToken != -1)
      dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
    v6 = (id)CoreRELog::log;
    if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315138;
      *(_QWORD *)&buf[4] = "RETransformComponentSetWorldAnimatedMatrix4x4F";
      _os_log_error_impl(&dword_224FE9000, v6, OS_LOG_TYPE_ERROR, "Call to %s contains NaN. Skipping.", buf, 0xCu);
    }

  }
  else
  {
    *(__n128 *)buf = a2;
    v17 = a3;
    v18 = a4;
    v19 = a5;
    v14 = xmmword_2260E5D70;
    v15 = 0u;
    v13 = 0u;
    re::decomposeScaleRotationTranslation<float>((uint64_t)buf, &v15, &v14, &v13);
    v11[0] = v15;
    v11[1] = v14;
    v11[2] = v13;
    re::ecs2::TransformComponent::setWorldSRT(a1, (uint64_t)v11, (re::ecs2::Entity *)1);
    re::ecs2::Component::enqueueMarkDirty(a1);
  }
}

void RETransformComponentSetWorldPose(_QWORD *a1, int8x16_t a2, float32x4_t a3)
{
  float32x2_t v3;
  int8x8_t v4;
  re::ecs2::TransformComponent **v6;
  uint64_t v7;
  uint64_t v8;
  NSObject *v9;
  int8x16_t v10;
  float32x4_t v11;
  _OWORD buf[3];
  uint64_t v13;

  v13 = *MEMORY[0x24BDAC8D0];
  v3.i32[1] = a2.i32[1];
  v3.i32[0] = vextq_s8(a2, a2, 8uLL).u32[0];
  v4 = vmvn_s8(vorr_s8((int8x8_t)vcltz_f32(v3), (int8x8_t)vcgez_f32(v3)));
  if ((v4.i8[4] & 1) != 0
    || (v4.i8[0] & 1) != 0
    || (vaddvq_s32((int32x4_t)vbicq_s8((int8x16_t)xmmword_22611E0A0, vorrq_s8((int8x16_t)vcltzq_f32(a3), (int8x16_t)vcgezq_f32(a3)))) & 0xF) != 0)
  {
    if (CoreRELog::onceToken != -1)
      dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
    v9 = (id)CoreRELog::log;
    if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
    {
      LODWORD(buf[0]) = 136315138;
      *(_QWORD *)((char *)buf + 4) = "RETransformComponentSetWorldPose";
      _os_log_error_impl(&dword_224FE9000, v9, OS_LOG_TYPE_ERROR, "Call to %s contains NaN. Skipping.", (uint8_t *)buf, 0xCu);
    }

  }
  else
  {
    v6 = (re::ecs2::TransformComponent **)a1[2];
    if (v6)
    {
      v10 = a2;
      v11 = a3;
      re::ecs2::TransformComponent::worldScale(v6, (const re::ecs2::Entity *)1);
      a2 = v10;
      a3 = v11;
    }
    else
    {
      v7 = a1[4];
      v8 = a1[5];
    }
    *(_QWORD *)&buf[0] = v7;
    *((_QWORD *)&buf[0] + 1) = v8;
    buf[1] = a3;
    buf[2] = a2;
    re::ecs2::TransformComponent::setWorldSRT((uint64_t)a1, (uint64_t)buf, 0);
    re::ecs2::Component::enqueueMarkDirty((uint64_t)a1);
  }
}

void RETransformComponentSetWorldPosition(_QWORD *a1, int8x16_t a2)
{
  float32x2_t v2;
  int8x8_t v3;
  NSObject *v5;
  int v6;
  const char *v7;
  uint64_t v8;

  v8 = *MEMORY[0x24BDAC8D0];
  v2.i32[1] = a2.i32[1];
  v2.i32[0] = vextq_s8(a2, a2, 8uLL).u32[0];
  v3 = vmvn_s8(vorr_s8((int8x8_t)vcltz_f32(v2), (int8x8_t)vcgez_f32(v2)));
  if ((v3.i8[4] & 1) != 0 || (v3.i8[0] & 1) != 0)
  {
    if (CoreRELog::onceToken != -1)
      dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
    v5 = (id)CoreRELog::log;
    if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR))
    {
      v6 = 136315138;
      v7 = "RETransformComponentSetWorldPosition";
      _os_log_error_impl(&dword_224FE9000, v5, OS_LOG_TYPE_ERROR, "Call to %s contains NaN. Skipping.", (uint8_t *)&v6, 0xCu);
    }

  }
  else
  {
    re::ecs2::TransformComponent::setWorldPosition(a1, a2.i64[0], a2.i64[1]);
    re::ecs2::Component::enqueueMarkDirty((uint64_t)a1);
  }
}

void RETransformComponentSetWorldOrientation(_QWORD *a1, float32x4_t a2)
{
  NSObject *v2;
  int v4;
  const char *v5;
  uint64_t v6;

  v6 = *MEMORY[0x24BDAC8D0];
  if ((vmaxv_u16((uint16x4_t)vmovn_s32((int32x4_t)vmvnq_s8(vorrq_s8((int8x16_t)vcltzq_f32(a2), (int8x16_t)vcgezq_f32(a2))))) & 1) != 0)
  {
    if (CoreRELog::onceToken != -1)
      dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
    v2 = (id)CoreRELog::log;
    if (os_log_type_enabled(v2, OS_LOG_TYPE_ERROR))
    {
      v4 = 136315138;
      v5 = "RETransformComponentSetWorldOrientation";
      _os_log_error_impl(&dword_224FE9000, v2, OS_LOG_TYPE_ERROR, "Call to %s contains NaN. Skipping.", (uint8_t *)&v4, 0xCu);
    }

  }
  else
  {
    re::ecs2::TransformComponent::setWorldOrientation(a1, a2.i64[0], a2.i64[1]);
    re::ecs2::Component::enqueueMarkDirty((uint64_t)a1);
  }
}

void RETransformComponentSetWorldScale(_QWORD *a1, int8x16_t a2)
{
  float32x2_t v2;
  int8x8_t v3;
  NSObject *v5;
  int v6;
  const char *v7;
  uint64_t v8;

  v8 = *MEMORY[0x24BDAC8D0];
  v2.i32[1] = a2.i32[1];
  v2.i32[0] = vextq_s8(a2, a2, 8uLL).u32[0];
  v3 = vmvn_s8(vorr_s8((int8x8_t)vcltz_f32(v2), (int8x8_t)vcgez_f32(v2)));
  if ((v3.i8[4] & 1) != 0 || (v3.i8[0] & 1) != 0)
  {
    if (CoreRELog::onceToken != -1)
      dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
    v5 = (id)CoreRELog::log;
    if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR))
    {
      v6 = 136315138;
      v7 = "RETransformComponentSetWorldScale";
      _os_log_error_impl(&dword_224FE9000, v5, OS_LOG_TYPE_ERROR, "Call to %s contains NaN. Skipping.", (uint8_t *)&v6, 0xCu);
    }

  }
  else
  {
    re::ecs2::TransformComponent::setWorldScale(a1, a2.i64[0], a2.i64[1]);
    re::ecs2::Component::enqueueMarkDirty((uint64_t)a1);
  }
}

void RETransformComponentSetWorldSRT(uint64_t a1, int8x16_t a2, float32x4_t a3, int8x16_t a4)
{
  int8x8_t v4;
  NSObject *v6;
  _OWORD v7[3];
  uint8_t buf[4];
  const char *v9;
  uint64_t v10;

  v10 = *MEMORY[0x24BDAC8D0];
  v7[0] = a2;
  v7[1] = a3;
  v7[2] = a4;
  a2.i32[0] = vextq_s8(a2, a2, 8uLL).u32[0];
  *(int8x8_t *)a2.i8 = vmvn_s8(vorr_s8((int8x8_t)vcltz_f32(*(float32x2_t *)a2.i8), (int8x8_t)vcgez_f32(*(float32x2_t *)a2.i8)));
  if ((a2.i8[4] & 1) != 0
    || (a2.i8[0] & 1) != 0
    || (vaddvq_s32((int32x4_t)vbicq_s8((int8x16_t)xmmword_22611E0A0, vorrq_s8((int8x16_t)vcltzq_f32(a3), (int8x16_t)vcgezq_f32(a3)))) & 0xF) != 0|| (a4.i32[0] = vextq_s8(a4, a4, 8uLL).u32[0], v4 = vmvn_s8(vorr_s8((int8x8_t)vcltz_f32(*(float32x2_t *)a4.i8), (int8x8_t)vcgez_f32(*(float32x2_t *)a4.i8))), (v4.i8[4] & 1) != 0)|| (v4.i8[0] & 1) != 0)
  {
    if (CoreRELog::onceToken != -1)
      dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
    v6 = (id)CoreRELog::log;
    if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315138;
      v9 = "RETransformComponentSetWorldSRT";
      _os_log_error_impl(&dword_224FE9000, v6, OS_LOG_TYPE_ERROR, "Call to %s contains NaN. Skipping.", buf, 0xCu);
    }

  }
  else
  {
    re::ecs2::TransformComponent::setWorldSRT(a1, (uint64_t)v7, 0);
    re::ecs2::Component::enqueueMarkDirty(a1);
  }
}

void RETransformComponentSetWorldAnimatedSRT(uint64_t a1, int8x16_t a2, float32x4_t a3, int8x16_t a4)
{
  int8x8_t v4;
  NSObject *v6;
  _OWORD v7[3];
  uint8_t buf[4];
  const char *v9;
  uint64_t v10;

  v10 = *MEMORY[0x24BDAC8D0];
  v7[0] = a2;
  v7[1] = a3;
  v7[2] = a4;
  a2.i32[0] = vextq_s8(a2, a2, 8uLL).u32[0];
  *(int8x8_t *)a2.i8 = vmvn_s8(vorr_s8((int8x8_t)vcltz_f32(*(float32x2_t *)a2.i8), (int8x8_t)vcgez_f32(*(float32x2_t *)a2.i8)));
  if ((a2.i8[4] & 1) != 0
    || (a2.i8[0] & 1) != 0
    || (vaddvq_s32((int32x4_t)vbicq_s8((int8x16_t)xmmword_22611E0A0, vorrq_s8((int8x16_t)vcltzq_f32(a3), (int8x16_t)vcgezq_f32(a3)))) & 0xF) != 0|| (a4.i32[0] = vextq_s8(a4, a4, 8uLL).u32[0], v4 = vmvn_s8(vorr_s8((int8x8_t)vcltz_f32(*(float32x2_t *)a4.i8), (int8x8_t)vcgez_f32(*(float32x2_t *)a4.i8))), (v4.i8[4] & 1) != 0)|| (v4.i8[0] & 1) != 0)
  {
    if (CoreRELog::onceToken != -1)
      dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
    v6 = (id)CoreRELog::log;
    if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315138;
      v9 = "RETransformComponentSetWorldAnimatedSRT";
      _os_log_error_impl(&dword_224FE9000, v6, OS_LOG_TYPE_ERROR, "Call to %s contains NaN. Skipping.", buf, 0xCu);
    }

  }
  else
  {
    re::ecs2::TransformComponent::setWorldSRT(a1, (uint64_t)v7, (re::ecs2::Entity *)1);
    re::ecs2::Component::enqueueMarkDirty(a1);
  }
}

double RETransformComponentCalculateWorldMatrix4x4F(re::ecs2::TransformComponent *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  __int128 v7;

  v2 = *((_QWORD *)this + 2);
  if (v2)
  {
    do
    {
      v3 = v2;
      v2 = *(_QWORD *)(v2 + 24);
    }
    while (v2);
    v4 = *(_QWORD *)(v3 + 16);
    if (v4)
    {
      v5 = *(_QWORD *)(v4 + 56);
      if (v5)
        (*(void (**)(uint64_t))(*(_QWORD *)v5 + 200))(v5);
    }
  }
  re::ecs2::TransformComponent::worldMatrix4x4F(this, 1, (uint64_t)&v7);
  return *(double *)&v7;
}

double RETransformComponentCalculateWorldPose(uint64_t a1)
{
  re::ecs2::TransformComponent **v2;
  re::ecs2::TransformComponent **v3;
  re::ecs2::TransformComponent **v4;
  re::ecs2::TransformComponent *v5;
  uint64_t v6;
  __int128 v7;
  _OWORD v9[2];
  __int128 v10;

  v2 = *(re::ecs2::TransformComponent ***)(a1 + 16);
  if (!v2)
    goto LABEL_9;
  v3 = v2;
  do
  {
    v4 = v3;
    v3 = (re::ecs2::TransformComponent **)v3[3];
  }
  while (v3);
  v5 = v4[2];
  if (v5)
  {
    v6 = *((_QWORD *)v5 + 7);
    if (v6)
    {
      (*(void (**)(uint64_t))(*(_QWORD *)v6 + 200))(v6);
      v2 = *(re::ecs2::TransformComponent ***)(a1 + 16);
    }
  }
  if (v2)
  {
    re::ecs2::TransformComponent::worldSRT(v2, (const re::ecs2::Entity *)1, (uint64_t)v9);
  }
  else
  {
LABEL_9:
    v7 = *(_OWORD *)(a1 + 48);
    v9[0] = *(_OWORD *)(a1 + 32);
    v9[1] = v7;
    v10 = *(_OWORD *)(a1 + 64);
  }
  return *(double *)&v10;
}

__n128 RETransformComponentCalculateWorldPosition(__n128 *a1)
{
  re::ecs2::TransformComponent **v2;
  re::ecs2::TransformComponent **v3;
  re::ecs2::TransformComponent **v4;
  re::ecs2::TransformComponent *v5;
  uint64_t v6;
  __n128 result;
  __int128 v8[3];
  __int128 v9;

  v2 = (re::ecs2::TransformComponent **)a1[1].n128_u64[0];
  if (!v2)
    return a1[4];
  v3 = v2;
  do
  {
    v4 = v3;
    v3 = (re::ecs2::TransformComponent **)v3[3];
  }
  while (v3);
  v5 = v4[2];
  if (v5)
  {
    v6 = *((_QWORD *)v5 + 7);
    if (v6)
    {
      (*(void (**)(uint64_t))(*(_QWORD *)v6 + 200))(v6);
      v2 = (re::ecs2::TransformComponent **)a1[1].n128_u64[0];
    }
  }
  if (v2)
  {
    re::ecs2::TransformComponent::worldMatrix4x4F(v2, (const re::ecs2::Entity *)1, v8);
    result.n128_u64[0] = v9;
  }
  else
  {
    return a1[4];
  }
  return result;
}

double RETransformComponentCalculateWorldOrientation(uint64_t a1)
{
  re::ecs2::TransformComponent **v2;
  re::ecs2::TransformComponent **v3;
  re::ecs2::TransformComponent **v4;
  re::ecs2::TransformComponent *v5;
  uint64_t v6;
  double v7;

  v2 = *(re::ecs2::TransformComponent ***)(a1 + 16);
  if (!v2)
    return *(double *)(a1 + 48);
  v3 = v2;
  do
  {
    v4 = v3;
    v3 = (re::ecs2::TransformComponent **)v3[3];
  }
  while (v3);
  v5 = v4[2];
  if (v5)
  {
    v6 = *((_QWORD *)v5 + 7);
    if (v6)
    {
      (*(void (**)(uint64_t))(*(_QWORD *)v6 + 200))(v6);
      v2 = *(re::ecs2::TransformComponent ***)(a1 + 16);
    }
  }
  if (!v2)
    return *(double *)(a1 + 48);
  re::ecs2::TransformComponent::worldOrientation(v2, (const re::ecs2::Entity *)1);
  return v7;
}

double RETransformComponentCalculateWorldScale(uint64_t a1)
{
  re::ecs2::TransformComponent **v2;
  re::ecs2::TransformComponent **v3;
  re::ecs2::TransformComponent **v4;
  re::ecs2::TransformComponent *v5;
  uint64_t v6;
  double v7;

  v2 = *(re::ecs2::TransformComponent ***)(a1 + 16);
  if (!v2)
    return *(double *)(a1 + 32);
  v3 = v2;
  do
  {
    v4 = v3;
    v3 = (re::ecs2::TransformComponent **)v3[3];
  }
  while (v3);
  v5 = v4[2];
  if (v5)
  {
    v6 = *((_QWORD *)v5 + 7);
    if (v6)
    {
      (*(void (**)(uint64_t))(*(_QWORD *)v6 + 200))(v6);
      v2 = *(re::ecs2::TransformComponent ***)(a1 + 16);
    }
  }
  if (!v2)
    return *(double *)(a1 + 32);
  re::ecs2::TransformComponent::worldScale(v2, (const re::ecs2::Entity *)1);
  return v7;
}

double RETransformComponentCalculateWorldSRT(uint64_t a1)
{
  re::ecs2::TransformComponent **v2;
  re::ecs2::TransformComponent **v3;
  re::ecs2::TransformComponent **v4;
  re::ecs2::TransformComponent *v5;
  uint64_t v6;
  __int128 v7;
  _OWORD v9[3];

  v2 = *(re::ecs2::TransformComponent ***)(a1 + 16);
  if (!v2)
    goto LABEL_9;
  v3 = v2;
  do
  {
    v4 = v3;
    v3 = (re::ecs2::TransformComponent **)v3[3];
  }
  while (v3);
  v5 = v4[2];
  if (v5)
  {
    v6 = *((_QWORD *)v5 + 7);
    if (v6)
    {
      (*(void (**)(uint64_t))(*(_QWORD *)v6 + 200))(v6);
      v2 = *(re::ecs2::TransformComponent ***)(a1 + 16);
    }
  }
  if (v2)
  {
    re::ecs2::TransformComponent::worldSRT(v2, (const re::ecs2::Entity *)1, (uint64_t)v9);
  }
  else
  {
LABEL_9:
    v7 = *(_OWORD *)(a1 + 48);
    v9[0] = *(_OWORD *)(a1 + 32);
    v9[1] = v7;
    v9[2] = *(_OWORD *)(a1 + 64);
  }
  return *(double *)v9;
}

uint64_t REStateMachineAssetCreateAsset(re *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  const char **v11;
  const char *v12;
  const char *v13;
  _anonymous_namespace_ *v14;
  const char *v15;
  _anonymous_namespace_ *v16;
  re *inited;
  uint64_t *v18;
  uint64_t v19;
  id v20;
  uint64_t v22[2];
  _QWORD v23[2];
  _QWORD v24[2];
  uint64_t v25[3];
  int v26;
  uint64_t v27;

  v8 = re::globalAllocators(a1);
  v9 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v8[2] + 32))(v8[2], 104, 8);
  v10 = v9;
  *(_OWORD *)v9 = 0u;
  *(_OWORD *)(v9 + 16) = 0u;
  *(_OWORD *)(v9 + 32) = 0u;
  *(_OWORD *)(v9 + 48) = 0u;
  *(_OWORD *)(v9 + 64) = 0u;
  *(_OWORD *)(v9 + 80) = 0u;
  *(_QWORD *)(v9 + 96) = 0;
  v27 = 0;
  memset(v25, 0, sizeof(v25));
  v26 = 0;
  if (a2)
  {
    v11 = (const char **)(a3 + 16);
    do
    {
      v12 = *(v11 - 2);
      v22[0] = 0;
      v22[1] = (uint64_t)&str_110;
      v13 = *(v11 - 1);
      v23[0] = 0;
      v23[1] = &str_110;
      v15 = *v11;
      v11 += 3;
      v24[0] = 0;
      v24[1] = &str_110;
      re::DynamicArray<re::StateMachineInitializationData>::add(v25, v22);
      re::StringID::destroyString((re::StringID *)v24);
      re::StringID::destroyString((re::StringID *)v23);
      re::StringID::destroyString((re::StringID *)v22);
      --a2;
    }
    while (a2);
  }
  inited = re::StateMachineAsset::initWithInitData(v10, v25, a4 + 24);
  v18 = re::StateMachineAsset::assetType(inited);
  (*(void (**)(uint64_t *__return_ptr, re *, uint64_t, uint64_t *, _QWORD, _QWORD, _QWORD))(*(_QWORD *)a1 + 416))(v22, a1, v10, v18, 0, 0, 0);
  v19 = v22[0];
  if (v22[0])
    v20 = (id)(v22[0] + 8);
  re::AssetHandle::~AssetHandle((re::AssetHandle *)v22);
  re::DynamicArray<re::RenderGraphOutputData>::deinit((uint64_t)v25);
  return v19;
}

uint64_t REStateMachineAssetCreate(re *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t *v8;
  uint64_t v9;
  _anonymous_namespace_ *v10;
  const char **v11;
  const char *v12;
  const char *v13;
  _anonymous_namespace_ *v14;
  const char *v15;
  _anonymous_namespace_ *v16;
  re::StateMachineAsset *inited;
  uint64_t *v18;
  uint64_t v19;
  id v20;
  uint64_t v22[2];
  _QWORD v23[2];
  _QWORD v24[2];
  uint64_t v25[3];
  int v26;
  uint64_t v27;

  v8 = re::globalAllocators(a1);
  v9 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v8[2] + 32))(v8[2], 104, 8);
  v10 = (_anonymous_namespace_ *)v9;
  *(_OWORD *)v9 = 0u;
  *(_OWORD *)(v9 + 16) = 0u;
  *(_OWORD *)(v9 + 32) = 0u;
  *(_OWORD *)(v9 + 48) = 0u;
  *(_OWORD *)(v9 + 64) = 0u;
  *(_OWORD *)(v9 + 80) = 0u;
  *(_QWORD *)(v9 + 96) = 0;
  v27 = 0;
  memset(v25, 0, sizeof(v25));
  v26 = 0;
  if (a2)
  {
    v11 = (const char **)(a3 + 16);
    do
    {
      v12 = *(v11 - 2);
      v22[0] = 0;
      v22[1] = (uint64_t)&str_110;
      v13 = *(v11 - 1);
      v23[0] = 0;
      v23[1] = &str_110;
      v15 = *v11;
      v11 += 3;
      v24[0] = 0;
      v24[1] = &str_110;
      re::DynamicArray<re::StateMachineInitializationData>::add(v25, v22);
      re::StringID::destroyString((re::StringID *)v24);
      re::StringID::destroyString((re::StringID *)v23);
      re::StringID::destroyString((re::StringID *)v22);
      --a2;
    }
    while (a2);
  }
  inited = (re::StateMachineAsset *)re::StateMachineAsset::initWithInitData(v10, v25, (uint64_t *)(a4 + 24));
  v18 = re::StateMachineAsset::assetType(inited);
  (*(void (**)(uint64_t *__return_ptr, re *, _anonymous_namespace_ *, uint64_t *, _QWORD, _QWORD, _QWORD))(*(_QWORD *)a1 + 416))(v22, a1, v10, v18, 0, 0, 0);
  v19 = v22[0];
  if (v22[0])
    v20 = (id)(v22[0] + 8);
  re::AssetHandle::~AssetHandle((re::AssetHandle *)v22);
  re::DynamicArray<re::RenderGraphOutputData>::deinit((uint64_t)v25);
  return v19;
}

uint64_t REStateMachineAssetSingleGraphCreate(re *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t *v7;
  re *v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD v12[4];

  v12[3] = *MEMORY[0x24BDAC8D0];
  REStateMachineAssetStateGraphGroupCreate(a1);
  v7 = (uint64_t *)(v6 + 24);
  re::DynamicArray<re::SMAssetStateGraph>::add((_anonymous_namespace_ *)(v6 + 24), a2 + 24);
  REStateMachineAssetStateGraphGroupCollectionCreate(v8);
  v10 = v9;
  re::DynamicArray<re::SMAssetStateGraphGroup>::add((_anonymous_namespace_ *)(v9 + 24), v7);
  v12[0] = "";
  v12[1] = "";
  v12[2] = a3;
  return REStateMachineAssetCreate(a1, 1, (uint64_t)v12, v10);
}

void REStateMachineAssetStateGraphGroupCreate(re *a1)
{
  uint64_t *v1;
  uint64_t v2;

  v1 = re::globalAllocators(a1);
  v2 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v1[2] + 32))(v1[2], 64, 8);
  *(_OWORD *)v2 = 0u;
  *(_OWORD *)(v2 + 16) = 0u;
  *(_OWORD *)(v2 + 32) = 0u;
  *(_OWORD *)(v2 + 48) = 0u;
  ArcSharedObject::ArcSharedObject((ArcSharedObject *)v2, 0);
  *(_QWORD *)v2 = &off_24ED9CD68;
  *(_QWORD *)(v2 + 56) = 0;
  *(_QWORD *)(v2 + 24) = 0;
  *(_QWORD *)(v2 + 32) = 0;
  *(_QWORD *)(v2 + 40) = 0;
  *(_DWORD *)(v2 + 48) = 0;
}

float REStateMachineAssetStateGraphGroupAddStateGraph(uint64_t a1, uint64_t a2)
{
  return re::DynamicArray<re::SMAssetStateGraph>::add((_anonymous_namespace_ *)(a1 + 24), a2 + 24);
}

void REStateMachineAssetStateGraphGroupCollectionCreate(re *a1)
{
  uint64_t *v1;
  uint64_t v2;

  v1 = re::globalAllocators(a1);
  v2 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v1[2] + 32))(v1[2], 64, 8);
  *(_OWORD *)v2 = 0u;
  *(_OWORD *)(v2 + 16) = 0u;
  *(_OWORD *)(v2 + 32) = 0u;
  *(_OWORD *)(v2 + 48) = 0u;
  ArcSharedObject::ArcSharedObject((ArcSharedObject *)v2, 0);
  *(_QWORD *)v2 = &off_24ED9CDB0;
  *(_QWORD *)(v2 + 56) = 0;
  *(_QWORD *)(v2 + 24) = 0;
  *(_QWORD *)(v2 + 32) = 0;
  *(_QWORD *)(v2 + 40) = 0;
  *(_DWORD *)(v2 + 48) = 0;
}

uint64_t REStateMachineAssetStateGraphGroupCollectionAddStateGraphGroup(uint64_t a1, uint64_t a2)
{
  return re::DynamicArray<re::SMAssetStateGraphGroup>::add((_anonymous_namespace_ *)(a1 + 24), (uint64_t *)(a2 + 24));
}

uint64_t REStateMachineAssetStateGraphCreate(re *a1)
{
  uint64_t *v2;
  uint64_t v3;
  _anonymous_namespace_ *v4;
  uint64_t v6[2];

  v2 = re::globalAllocators(a1);
  v3 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v2[2] + 32))(v2[2], 192, 8);
  *(_OWORD *)v3 = 0u;
  *(_OWORD *)(v3 + 16) = 0u;
  *(_OWORD *)(v3 + 32) = 0u;
  *(_OWORD *)(v3 + 48) = 0u;
  *(_OWORD *)(v3 + 80) = 0u;
  *(_OWORD *)(v3 + 96) = 0u;
  *(_OWORD *)(v3 + 112) = 0u;
  *(_OWORD *)(v3 + 128) = 0u;
  *(_OWORD *)(v3 + 144) = 0u;
  *(_OWORD *)(v3 + 160) = 0u;
  *(_OWORD *)(v3 + 176) = 0u;
  *(_OWORD *)(v3 + 64) = 0u;
  ArcSharedObject::ArcSharedObject((ArcSharedObject *)v3, 0);
  *(_QWORD *)v3 = &off_24ED9CD20;
  *(_QWORD *)(v3 + 24) = 0;
  *(_QWORD *)(v3 + 32) = 0;
  *(_QWORD *)(v3 + 40) = 0;
  *(_DWORD *)(v3 + 48) = 0;
  *(_QWORD *)(v3 + 64) = 0;
  *(_QWORD *)(v3 + 56) = 0;
  *(_QWORD *)(v3 + 72) = &str_110;
  *(_BYTE *)(v3 + 80) = 0;
  *(_QWORD *)(v3 + 96) = 0;
  *(_QWORD *)(v3 + 104) = 0;
  *(_QWORD *)(v3 + 88) = 0;
  *(_DWORD *)(v3 + 112) = 0;
  *(_OWORD *)(v3 + 120) = 0u;
  *(_OWORD *)(v3 + 136) = 0u;
  *(_DWORD *)(v3 + 152) = 0;
  *(_QWORD *)(v3 + 160) = 0;
  *(_QWORD *)(v3 + 168) = 0;
  *(_QWORD *)(v3 + 176) = &str_110;
  *(_DWORD *)(v3 + 184) = 0;
  v6[0] = 0;
  v6[1] = (uint64_t)&str_110;
  re::StringID::operator=((unint64_t *)(v3 + 64), v6);
  re::StringID::destroyString((re::StringID *)v6);
  return v3;
}

uint64_t REStateMachineAssetStateCreate(const char *a1)
{
  uint64_t v2;
  _anonymous_namespace_ *v3;
  uint64_t v5[2];
  uint64_t v6;

  v2 = v6;
  v5[0] = 0;
  v5[1] = (uint64_t)&str_110;
  re::StringID::operator=((unint64_t *)(v2 + 104), v5);
  re::StringID::destroyString((re::StringID *)v5);
  return v2;
}

uint64_t REStateMachineAssetTransitionCreate(const char *a1, const char *a2, const char *a3, char a4, float a5)
{
  uint64_t v10;
  _anonymous_namespace_ *v11;
  _anonymous_namespace_ *v12;
  _anonymous_namespace_ *v13;
  uint64_t v15[2];
  uint64_t v16[2];
  uint64_t v17[2];
  uint64_t v18;

  v10 = v18;
  v17[0] = 0;
  v17[1] = (uint64_t)&str_110;
  v16[0] = 0;
  v16[1] = (uint64_t)&str_110;
  v15[0] = 0;
  v15[1] = (uint64_t)&str_110;
  re::StringID::operator=((unint64_t *)(v10 + 64), v17);
  re::StringID::operator=((unint64_t *)(v10 + 80), v16);
  re::StringID::operator=((unint64_t *)(v10 + 96), v15);
  *(float *)(v10 + 112) = a5;
  *(_BYTE *)(v10 + 116) = a4;
  re::StringID::destroyString((re::StringID *)v15);
  re::StringID::destroyString((re::StringID *)v16);
  re::StringID::destroyString((re::StringID *)v17);
  return v10;
}

uint64_t REStateMachineAssetIntConditionCreate(const char *a1, char a2, uint64_t a3)
{
  _anonymous_namespace_ *v6;
  uint64_t v7;
  unint64_t v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13[2];
  unint64_t v14;
  void *v15;
  _BYTE v16[22];
  uint64_t v17;
  _QWORD v18[2];

  v13[0] = 0;
  v13[1] = (uint64_t)&str_110;
  v14 = 0;
  v15 = &str_110;
  v16[0] = 0;
  *(_QWORD *)&v16[8] = 0;
  *(_QWORD *)&v16[14] = 0;
  re::StringID::operator=(&v14, v13);
  v16[0] = 1;
  *(_QWORD *)&v16[8] = a3;
  v16[21] = a2;
  v7 = v17;
  v8 = v14;
  v9 = v15;
  v14 = 0;
  v15 = &str_110;
  v10 = *(_QWORD *)(v17 + 24);
  v11 = *(_QWORD *)(v17 + 32);
  *(_QWORD *)(v17 + 24) = v8;
  *(_QWORD *)(v7 + 32) = v9;
  v18[0] = v8 & 0xFFFFFFFFFFFFFFFELL | v10 & 1;
  v18[1] = v11;
  re::StringID::destroyString((re::StringID *)v18);
  *(_OWORD *)(v7 + 40) = *(_OWORD *)v16;
  *(_QWORD *)(v7 + 54) = *(_QWORD *)&v16[14];
  re::StringID::destroyString((re::StringID *)&v14);
  re::StringID::destroyString((re::StringID *)v13);
  return v7;
}

uint64_t REStateMachineAssetFloatConditionCreate(const char *a1, char a2, float a3)
{
  _anonymous_namespace_ *v6;
  uint64_t v7;
  unint64_t v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13[2];
  unint64_t v14;
  void *v15;
  _BYTE v16[22];
  uint64_t v17;
  _QWORD v18[2];

  v13[0] = 0;
  v13[1] = (uint64_t)&str_110;
  v14 = 0;
  v15 = &str_110;
  v16[0] = 0;
  *(_QWORD *)&v16[8] = 0;
  *(_QWORD *)&v16[14] = 0;
  re::StringID::operator=(&v14, v13);
  v16[0] = 2;
  *(float *)&v16[16] = a3;
  v16[21] = a2;
  v7 = v17;
  v8 = v14;
  v9 = v15;
  v14 = 0;
  v15 = &str_110;
  v10 = *(_QWORD *)(v17 + 24);
  v11 = *(_QWORD *)(v17 + 32);
  *(_QWORD *)(v17 + 24) = v8;
  *(_QWORD *)(v7 + 32) = v9;
  v18[0] = v8 & 0xFFFFFFFFFFFFFFFELL | v10 & 1;
  v18[1] = v11;
  re::StringID::destroyString((re::StringID *)v18);
  *(_OWORD *)(v7 + 40) = *(_OWORD *)v16;
  *(_QWORD *)(v7 + 54) = *(_QWORD *)&v16[14];
  re::StringID::destroyString((re::StringID *)&v14);
  re::StringID::destroyString((re::StringID *)v13);
  return v7;
}

uint64_t REStateMachineAssetBoolConditionCreate(const char *a1, char a2, char a3)
{
  _anonymous_namespace_ *v6;
  uint64_t v7;
  unint64_t v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13[2];
  unint64_t v14;
  void *v15;
  _BYTE v16[22];
  uint64_t v17;
  _QWORD v18[2];

  v13[0] = 0;
  v13[1] = (uint64_t)&str_110;
  v14 = 0;
  v15 = &str_110;
  v16[0] = 0;
  *(_QWORD *)&v16[8] = 0;
  *(_QWORD *)&v16[14] = 0;
  re::StringID::operator=(&v14, v13);
  v16[0] = 3;
  v16[20] = a3;
  v16[21] = a2;
  v7 = v17;
  v8 = v14;
  v9 = v15;
  v14 = 0;
  v15 = &str_110;
  v10 = *(_QWORD *)(v17 + 24);
  v11 = *(_QWORD *)(v17 + 32);
  *(_QWORD *)(v17 + 24) = v8;
  *(_QWORD *)(v7 + 32) = v9;
  v18[0] = v8 & 0xFFFFFFFFFFFFFFFELL | v10 & 1;
  v18[1] = v11;
  re::StringID::destroyString((re::StringID *)v18);
  *(_OWORD *)(v7 + 40) = *(_OWORD *)v16;
  *(_QWORD *)(v7 + 54) = *(_QWORD *)&v16[14];
  re::StringID::destroyString((re::StringID *)&v14);
  re::StringID::destroyString((re::StringID *)v13);
  return v7;
}

uint64_t REStateMachineAssetTriggerConditionCreate(const char *a1)
{
  _anonymous_namespace_ *v2;
  uint64_t v3;
  unint64_t v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v9[2];
  unint64_t v10;
  void *v11;
  _BYTE v12[22];
  uint64_t v13;
  _QWORD v14[2];

  v9[0] = 0;
  v9[1] = (uint64_t)&str_110;
  v10 = 0;
  v11 = &str_110;
  v12[0] = 0;
  *(_QWORD *)&v12[8] = 0;
  *(_QWORD *)&v12[14] = 0;
  re::StringID::operator=(&v10, v9);
  v12[0] = 4;
  *(_WORD *)&v12[20] = 1;
  v3 = v13;
  v4 = v10;
  v5 = v11;
  v10 = 0;
  v11 = &str_110;
  v6 = *(_QWORD *)(v13 + 24);
  v7 = *(_QWORD *)(v13 + 32);
  *(_QWORD *)(v13 + 24) = v4;
  *(_QWORD *)(v3 + 32) = v5;
  v14[0] = v4 & 0xFFFFFFFFFFFFFFFELL | v6 & 1;
  v14[1] = v7;
  re::StringID::destroyString((re::StringID *)v14);
  *(_OWORD *)(v3 + 40) = *(_OWORD *)v12;
  *(_QWORD *)(v3 + 54) = *(_QWORD *)&v12[14];
  re::StringID::destroyString((re::StringID *)&v10);
  re::StringID::destroyString((re::StringID *)v9);
  return v3;
}

uint64_t REStateMachineAssetCommandCreate(_anonymous_namespace_ *a1, const char *a2)
{
  const char *v3;
  const re::StringID *v4;
  uint64_t v5;
  _anonymous_namespace_ *v6;
  uint64_t v8;
  uint64_t v9;
  void *v10;

  v3 = (const char *)a1;
  v9 = 0;
  v10 = &str_110;
  LOBYTE(v3) = re::ecs2::StateCommandFactoryECS::getCommandIDFromCommandName((re::ecs2::StateCommandFactoryECS *)&v9, v4);
  re::StringID::destroyString((re::StringID *)&v9);
  v5 = v8;
  v9 = 0;
  v10 = &str_110;
  *(_BYTE *)(v5 + 424) = (_BYTE)v3;
  re::StringID::operator=((unint64_t *)(v5 + 432), &v9);
  re::StringID::destroyString((re::StringID *)&v9);
  return v5;
}

__n128 REStateMachineAssetTransitionAddCondition(uint64_t a1, uint64_t a2)
{
  unint64_t v4;
  re::StringID *v5;
  __n128 result;

  v4 = *(_QWORD *)(a1 + 40);
  if (v4 >= *(_QWORD *)(a1 + 32))
  {
    re::DynamicArray<re::SMAssetTransitionCondition>::growCapacity((_QWORD *)(a1 + 24), v4 + 1);
    v4 = *(_QWORD *)(a1 + 40);
  }
  v5 = re::StringID::StringID((re::StringID *)(*(_QWORD *)(a1 + 56) + 40 * v4), (const StringID *)(a2 + 24));
  result = *(__n128 *)(a2 + 40);
  *(_QWORD *)((char *)v5 + 30) = *(_QWORD *)(a2 + 54);
  *((__n128 *)v5 + 1) = result;
  ++*(_QWORD *)(a1 + 40);
  ++*(_DWORD *)(a1 + 48);
  return result;
}

re::StringID *REStateMachineAssetStateAddTransition(uint64_t a1, uint64_t a2)
{
  unint64_t v4;
  uint64_t v5;
  re::StringID *result;
  int v7;

  v4 = *(_QWORD *)(a1 + 40);
  if (v4 >= *(_QWORD *)(a1 + 32))
  {
    re::DynamicArray<re::SMAssetStateTransition>::growCapacity((_QWORD *)(a1 + 24), v4 + 1);
    v4 = *(_QWORD *)(a1 + 40);
  }
  v5 = *(_QWORD *)(a1 + 56) + 96 * v4;
  re::DynamicArray<re::SMAssetTransitionCondition>::DynamicArray(v5, (uint64_t *)(a2 + 24));
  re::StringID::StringID((re::StringID *)(v5 + 40), (const StringID *)(a2 + 64));
  re::StringID::StringID((re::StringID *)(v5 + 56), (const StringID *)(a2 + 80));
  result = re::StringID::StringID((re::StringID *)(v5 + 72), (const StringID *)(a2 + 96));
  v7 = *(_DWORD *)(a2 + 112);
  *(_BYTE *)(v5 + 92) = *(_BYTE *)(a2 + 116);
  *(_DWORD *)(v5 + 88) = v7;
  ++*(_QWORD *)(a1 + 40);
  ++*(_DWORD *)(a1 + 48);
  return result;
}

re::StringID *REStateMachineAssetStateAddCommand(uint64_t a1, uint64_t a2)
{
  unint64_t v4;
  uint64_t v5;
  re::StringID *result;

  v4 = *(_QWORD *)(a1 + 80);
  if (v4 >= *(_QWORD *)(a1 + 72))
  {
    re::DynamicArray<re::SMAssetStateCommand>::growCapacity((_QWORD *)(a1 + 64), v4 + 1);
    v4 = *(_QWORD *)(a1 + 80);
  }
  v5 = *(_QWORD *)(a1 + 96) + 424 * v4;
  re::DynamicArray<re::StringID>::DynamicArray(v5, (uint64_t *)(a2 + 24));
  re::DynamicArray<char const*>::DynamicArray(v5 + 40, (uint64_t *)(a2 + 64));
  re::DynamicArray<re::StringID>::DynamicArray(v5 + 80, (uint64_t *)(a2 + 104));
  re::DynamicArray<float>::DynamicArray(v5 + 120, (uint64_t *)(a2 + 144));
  re::DynamicArray<re::StringID>::DynamicArray(v5 + 160, (uint64_t *)(a2 + 184));
  re::DynamicArray<char const*>::DynamicArray(v5 + 200, (uint64_t *)(a2 + 224));
  re::DynamicArray<re::StringID>::DynamicArray(v5 + 240, (uint64_t *)(a2 + 264));
  re::DynamicArray<BOOL>::DynamicArray(v5 + 280, (uint64_t *)(a2 + 304));
  re::DynamicArray<re::StringID>::DynamicArray(v5 + 320, (uint64_t *)(a2 + 344));
  re::DynamicArray<re::StringID>::DynamicArray(v5 + 360, (uint64_t *)(a2 + 384));
  *(_BYTE *)(v5 + 400) = *(_BYTE *)(a2 + 424);
  result = re::StringID::StringID((re::StringID *)(v5 + 408), (const StringID *)(a2 + 432));
  ++*(_QWORD *)(a1 + 80);
  ++*(_DWORD *)(a1 + 88);
  return result;
}

void REStateMachineAssetCommandAddParameterInt(uint64_t a1, const char *a2, uint64_t a3)
{
  _anonymous_namespace_ *v6;
  unint64_t v7;
  StringID v8;

  v6 = (_anonymous_namespace_ *)(a1 + 24);
  *(_QWORD *)&v8.var0 = 0;
  v8.var1 = (char *)&str_110;
  re::DynamicArray<re::StringID>::add(v6, &v8);
  v7 = *(_QWORD *)(a1 + 80);
  if (v7 >= *(_QWORD *)(a1 + 72))
  {
    re::DynamicArray<float *>::growCapacity((_QWORD *)(a1 + 64), v7 + 1);
    v7 = *(_QWORD *)(a1 + 80);
  }
  *(_QWORD *)(*(_QWORD *)(a1 + 96) + 8 * v7) = a3;
  *(_QWORD *)(a1 + 80) = v7 + 1;
  ++*(_DWORD *)(a1 + 88);
  re::StringID::destroyString((re::StringID *)&v8);
}

void REStateMachineAssetCommandAddParameterFloat(uint64_t a1, const char *a2, float a3)
{
  StringID v6;
  float v7;

  *(_QWORD *)&v6.var0 = 0;
  v6.var1 = (char *)&str_110;
  v7 = a3;
  re::DynamicArray<re::StringID>::add((_anonymous_namespace_ *)(a1 + 104), &v6);
  re::DynamicArray<float>::add((_anonymous_namespace_ *)(a1 + 144), &v7);
  re::StringID::destroyString((re::StringID *)&v6);
}

void REStateMachineAssetCommandAddParameterDouble(uint64_t a1, const char *a2, double a3)
{
  unint64_t v6;
  StringID v7;

  *(_QWORD *)&v7.var0 = 0;
  v7.var1 = (char *)&str_110;
  re::DynamicArray<re::StringID>::add((_anonymous_namespace_ *)(a1 + 184), &v7);
  v6 = *(_QWORD *)(a1 + 240);
  if (v6 >= *(_QWORD *)(a1 + 232))
  {
    re::DynamicArray<float *>::growCapacity((_QWORD *)(a1 + 224), v6 + 1);
    v6 = *(_QWORD *)(a1 + 240);
  }
  *(double *)(*(_QWORD *)(a1 + 256) + 8 * v6) = a3;
  *(_QWORD *)(a1 + 240) = v6 + 1;
  ++*(_DWORD *)(a1 + 248);
  re::StringID::destroyString((re::StringID *)&v7);
}

void REStateMachineAssetCommandAddParameterBool(uint64_t a1, const char *a2, char a3)
{
  unint64_t v6;
  StringID v7;

  *(_QWORD *)&v7.var0 = 0;
  v7.var1 = (char *)&str_110;
  re::DynamicArray<re::StringID>::add((_anonymous_namespace_ *)(a1 + 264), &v7);
  v6 = *(_QWORD *)(a1 + 320);
  if (v6 >= *(_QWORD *)(a1 + 312))
  {
    re::DynamicArray<BOOL>::growCapacity((_QWORD *)(a1 + 304), v6 + 1);
    v6 = *(_QWORD *)(a1 + 320);
  }
  *(_BYTE *)(*(_QWORD *)(a1 + 336) + v6) = a3;
  *(_QWORD *)(a1 + 320) = v6 + 1;
  ++*(_DWORD *)(a1 + 328);
  re::StringID::destroyString((re::StringID *)&v7);
}

void REStateMachineAssetCommandAddParameterString(uint64_t a1, const char *a2, const char *a3)
{
  _anonymous_namespace_ *v6;
  StringID v7;
  StringID v8;

  *(_QWORD *)&v8.var0 = 0;
  v8.var1 = (char *)&str_110;
  *(_QWORD *)&v7.var0 = 0;
  v7.var1 = (char *)&str_110;
  re::DynamicArray<re::StringID>::add((_anonymous_namespace_ *)(a1 + 344), &v8);
  re::DynamicArray<re::StringID>::add((_anonymous_namespace_ *)(a1 + 384), &v7);
  re::StringID::destroyString((re::StringID *)&v7);
  re::StringID::destroyString((re::StringID *)&v8);
}

uint64_t REStateMachineAssetCommandGetParameterInt(_anonymous_namespace_ *a1, const char *a2, uint64_t *a3)
{
  re::SMAssetStateCommand *v5;
  uint64_t IntParameter;
  _QWORD v8[2];

  v5 = (_anonymous_namespace_ *)((char *)a1 + 24);
  v8[0] = 0;
  v8[1] = &str_110;
  IntParameter = re::SMAssetStateCommand::getIntParameter(v5, (const re::StringID *)v8, a3);
  re::StringID::destroyString((re::StringID *)v8);
  return IntParameter;
}

uint64_t REStateMachineAssetCommandGetParameterFloat(_anonymous_namespace_ *a1, const char *a2, float *a3)
{
  re::SMAssetStateCommand *v5;
  uint64_t FloatParameter;
  _QWORD v8[2];

  v5 = (_anonymous_namespace_ *)((char *)a1 + 24);
  v8[0] = 0;
  v8[1] = &str_110;
  FloatParameter = re::SMAssetStateCommand::getFloatParameter(v5, (const re::StringID *)v8, a3);
  re::StringID::destroyString((re::StringID *)v8);
  return FloatParameter;
}

uint64_t REStateMachineAssetCommandGetParameterDouble(_anonymous_namespace_ *a1, const char *a2, double *a3)
{
  re::SMAssetStateCommand *v5;
  uint64_t DoubleParameter;
  _QWORD v8[2];

  v5 = (_anonymous_namespace_ *)((char *)a1 + 24);
  v8[0] = 0;
  v8[1] = &str_110;
  DoubleParameter = re::SMAssetStateCommand::getDoubleParameter(v5, (const re::StringID *)v8, a3);
  re::StringID::destroyString((re::StringID *)v8);
  return DoubleParameter;
}

uint64_t REStateMachineAssetCommandGetParameterBool(_anonymous_namespace_ *a1, const char *a2, BOOL *a3)
{
  re::SMAssetStateCommand *v5;
  uint64_t BoolParameter;
  _QWORD v8[2];

  v5 = (_anonymous_namespace_ *)((char *)a1 + 24);
  v8[0] = 0;
  v8[1] = &str_110;
  BoolParameter = re::SMAssetStateCommand::getBoolParameter(v5, (const re::StringID *)v8, a3);
  re::StringID::destroyString((re::StringID *)v8);
  return BoolParameter;
}

BOOL REStateMachineAssetCommandGetParameterString(_anonymous_namespace_ *a1, const char *a2, CFTypeRef *a3)
{
  re::SMAssetStateCommand *v5;
  uint64_t StringParameter;
  CFStringRef v7;
  _QWORD v9[2];

  v5 = (_anonymous_namespace_ *)((char *)a1 + 24);
  v9[0] = 0;
  v9[1] = &str_110;
  StringParameter = re::SMAssetStateCommand::getStringParameter(v5, (const re::StringID *)v9);
  re::StringID::destroyString((re::StringID *)v9);
  if (StringParameter)
  {
    v7 = CFStringCreateWithCString(0, *(const char **)(StringParameter + 8), 0x8000100u);
    *a3 = CFAutorelease(v7);
  }
  return StringParameter != 0;
}

uint64_t REStateMachineAssetCommandGetParameterStringAsChars(_anonymous_namespace_ *a1, const char *a2)
{
  re::SMAssetStateCommand *v3;
  uint64_t StringParameter;
  _QWORD v6[2];

  v3 = (_anonymous_namespace_ *)((char *)a1 + 24);
  v6[0] = 0;
  v6[1] = &str_110;
  StringParameter = re::SMAssetStateCommand::getStringParameter(v3, (const re::StringID *)v6);
  re::StringID::destroyString((re::StringID *)v6);
  if (StringParameter)
    return *(_QWORD *)(StringParameter + 8);
  else
    return 0;
}

uint64_t REStateMachineAssetStateSetExitTime(uint64_t result, float a2)
{
  *(float *)(result + 120) = a2;
  return result;
}

float REStateMachineAssetStateGraphAddState(uint64_t a1, uint64_t a2)
{
  unint64_t v4;
  uint64_t v5;
  float result;

  v4 = *(_QWORD *)(a1 + 40);
  if (v4 >= *(_QWORD *)(a1 + 32))
  {
    re::DynamicArray<re::SMAssetState>::growCapacity((_QWORD *)(a1 + 24), v4 + 1);
    v4 = *(_QWORD *)(a1 + 40);
  }
  v5 = *(_QWORD *)(a1 + 56) + 104 * v4;
  re::DynamicArray<re::SMAssetStateTransition>::DynamicArray(v5, (uint64_t *)(a2 + 24));
  re::DynamicArray<re::SMAssetStateCommand>::DynamicArray(v5 + 40, (uint64_t *)(a2 + 64));
  re::StringID::StringID((re::StringID *)(v5 + 80), (const StringID *)(a2 + 104));
  result = *(float *)(a2 + 120);
  *(float *)(v5 + 96) = result;
  ++*(_QWORD *)(a1 + 40);
  ++*(_DWORD *)(a1 + 48);
  return result;
}

float REStateMachineAssetStateGraphAddAnyState(uint64_t a1, uint64_t a2)
{
  float result;

  re::DynamicArray<re::SMAssetStateTransition>::operator=(a1 + 88, (uint64_t *)(a2 + 24));
  re::DynamicArray<re::SMAssetStateCommand>::operator=(a1 + 128, (uint64_t *)(a2 + 64));
  re::StringID::operator=((unint64_t *)(a1 + 168), (uint64_t *)(a2 + 104));
  result = *(float *)(a2 + 120);
  *(float *)(a1 + 184) = result;
  *(_BYTE *)(a1 + 80) = 1;
  return result;
}

float re::DynamicArray<re::SMAssetStateGraph>::add(_anonymous_namespace_ *this, uint64_t a2)
{
  unint64_t v4;
  uint64_t v5;
  float result;

  v4 = *((_QWORD *)this + 2);
  if (v4 >= *((_QWORD *)this + 1))
  {
    re::DynamicArray<re::SMAssetStateGraph>::growCapacity(this, v4 + 1);
    v4 = *((_QWORD *)this + 2);
  }
  v5 = *((_QWORD *)this + 4) + 168 * v4;
  re::DynamicArray<re::SMAssetState>::DynamicArray(v5, (uint64_t *)a2);
  re::StringID::StringID((re::StringID *)(v5 + 40), (const StringID *)(a2 + 40));
  *(_BYTE *)(v5 + 56) = *(_BYTE *)(a2 + 56);
  re::DynamicArray<re::SMAssetStateTransition>::DynamicArray(v5 + 64, (uint64_t *)(a2 + 64));
  re::DynamicArray<re::SMAssetStateCommand>::DynamicArray(v5 + 104, (uint64_t *)(a2 + 104));
  re::StringID::StringID((re::StringID *)(v5 + 144), (const StringID *)(a2 + 144));
  result = *(float *)(a2 + 160);
  *(float *)(v5 + 160) = result;
  ++*((_QWORD *)this + 2);
  ++*((_DWORD *)this + 6);
  return result;
}

uint64_t re::DynamicArray<re::SMAssetStateGraphGroup>::add(_anonymous_namespace_ *this, uint64_t *a2)
{
  unint64_t v4;
  uint64_t result;

  v4 = *((_QWORD *)this + 2);
  if (v4 >= *((_QWORD *)this + 1))
  {
    re::DynamicArray<re::SMAssetStateGraphGroup>::growCapacity(this, v4 + 1);
    v4 = *((_QWORD *)this + 2);
  }
  result = re::DynamicArray<re::SMAssetStateGraph>::DynamicArray(*((_QWORD *)this + 4) + 40 * v4, a2);
  ++*((_QWORD *)this + 2);
  ++*((_DWORD *)this + 6);
  return result;
}

uint64_t REStateMachineAssetGetStateCount(uint64_t a1)
{
  uint64_t result;

  if (result)
    return *(_QWORD *)(result + 16);
  return result;
}

uint64_t `anonymous namespace'::firstGraphInAsset(uint64_t a1)
{
  uint64_t result;
  uint64_t v2;

  if (result)
  {
    if (*(_QWORD *)(result + 56) && (v2 = *(_QWORD *)(result + 72), *(_QWORD *)(v2 + 16)))
      return *(_QWORD *)(v2 + 32);
    else
      return 0;
  }
  return result;
}

uint64_t REStateMachineAssetGetStateAtIndex(uint64_t a1, unint64_t a2)
{
  uint64_t GraphInAsset;
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;

  if (!GraphInAsset || *(_QWORD *)(GraphInAsset + 16) <= a2)
    return 0;
  v4 = *(_QWORD *)(GraphInAsset + 32) + 104 * a2;
  v5 = v7;
  re::DynamicArray<re::SMAssetStateTransition>::operator=(v7 + 24, (uint64_t *)v4);
  re::DynamicArray<re::SMAssetStateCommand>::operator=(v5 + 64, (uint64_t *)(v4 + 40));
  re::StringID::operator=((unint64_t *)(v5 + 104), (uint64_t *)(v4 + 80));
  *(_DWORD *)(v5 + 120) = *(_DWORD *)(v4 + 96);
  return v5;
}

uint64_t REStateMachineAssetGetAnyState(uint64_t a1)
{
  uint64_t GraphInAsset;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;

  if (!GraphInAsset)
    return 0;
  v2 = GraphInAsset;
  if (!*(_BYTE *)(GraphInAsset + 56))
    return 0;
  v3 = v5;
  re::DynamicArray<re::SMAssetStateTransition>::operator=(v5 + 24, (uint64_t *)(v2 + 64));
  re::DynamicArray<re::SMAssetStateCommand>::operator=(v3 + 64, (uint64_t *)(v2 + 104));
  re::StringID::operator=((unint64_t *)(v3 + 104), (uint64_t *)(v2 + 144));
  *(_DWORD *)(v3 + 120) = *(_DWORD *)(v2 + 160);
  return v3;
}

const char *REStateMachineAssetGetInitialStateName(uint64_t a1)
{
  uint64_t v1;

  if (v1 && *(_QWORD *)(v1 + 16))
    return *(const char **)(*(_QWORD *)(v1 + 32) + 40);
  else
    return "";
}

uint64_t `anonymous namespace'::stateMachineAssetFromREAssetRef(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3[3];

  re::AssetAPIHelper::assetHandleCreate(a1, v3);
  v1 = re::AssetHandle::asset<re::StateMachineAsset>((re::StateMachineAsset *)v3);
  re::AssetHandle::~AssetHandle((re::AssetHandle *)v3);
  return v1;
}

uint64_t REStateMachineAssetStateGetName(uint64_t a1)
{
  return *(_QWORD *)(a1 + 112);
}

float REStateMachineAssetStateGetExitTime(uint64_t a1)
{
  return *(float *)(a1 + 120);
}

uint64_t REStateMachineAssetStateGetTransitionCount(uint64_t a1)
{
  return *(_QWORD *)(a1 + 40);
}

uint64_t REStateMachineAssetStateGetTransitionAtIndex(uint64_t a1, unint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  int v4;
  uint64_t v6;

  if (*(_QWORD *)(a1 + 40) <= a2)
    return 0;
  v2 = *(_QWORD *)(a1 + 56) + 96 * a2;
  v3 = v6;
  re::DynamicArray<re::SMAssetTransitionCondition>::operator=(v6 + 24, (uint64_t *)v2);
  re::StringID::operator=((unint64_t *)(v3 + 64), (uint64_t *)(v2 + 40));
  re::StringID::operator=((unint64_t *)(v3 + 80), (uint64_t *)(v2 + 56));
  re::StringID::operator=((unint64_t *)(v3 + 96), (uint64_t *)(v2 + 72));
  v4 = *(_DWORD *)(v2 + 88);
  *(_BYTE *)(v3 + 116) = *(_BYTE *)(v2 + 92);
  *(_DWORD *)(v3 + 112) = v4;
  return v3;
}

uint64_t REStateMachineAssetStateGetCommandCount(uint64_t a1)
{
  uint64_t v1;
  _BYTE v3[16];
  uint64_t v4;

  re::DynamicArray<re::SMAssetStateCommand>::DynamicArray((uint64_t)v3, (uint64_t *)(a1 + 64));
  v1 = v4;
  re::DynamicArray<re::SMAssetStateCommand>::deinit((uint64_t)v3);
  return v1;
}

uint64_t REStateMachineAssetStateGetCommandAtIndex(uint64_t a1, unint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  _BYTE v7[16];
  unint64_t v8;
  uint64_t v9;

  re::DynamicArray<re::SMAssetStateCommand>::DynamicArray((uint64_t)v7, (uint64_t *)(a1 + 64));
  if (v8 <= a2)
  {
    v4 = 0;
  }
  else
  {
    v3 = v9 + 424 * a2;
    v4 = v6;
    re::DynamicArray<re::StringID>::operator=(v6 + 24, (uint64_t *)v3);
    re::DynamicArray<unsigned long long>::operator=(v4 + 64, (uint64_t *)(v3 + 40));
    re::DynamicArray<re::StringID>::operator=(v4 + 104, (uint64_t *)(v3 + 80));
    re::DynamicArray<float>::operator=(v4 + 144, (uint64_t *)(v3 + 120));
    re::DynamicArray<re::StringID>::operator=(v4 + 184, (uint64_t *)(v3 + 160));
    re::DynamicArray<unsigned long long>::operator=(v4 + 224, (uint64_t *)(v3 + 200));
    re::DynamicArray<re::StringID>::operator=(v4 + 264, (uint64_t *)(v3 + 240));
    re::DynamicArray<BOOL>::operator=(v4 + 304, (uint64_t *)(v3 + 280));
    re::DynamicArray<re::StringID>::operator=(v4 + 344, (uint64_t *)(v3 + 320));
    re::DynamicArray<re::StringID>::operator=(v4 + 384, (uint64_t *)(v3 + 360));
    *(_BYTE *)(v4 + 424) = *(_BYTE *)(v3 + 400);
    re::StringID::operator=((unint64_t *)(v4 + 432), (uint64_t *)(v3 + 408));
  }
  re::DynamicArray<re::SMAssetStateCommand>::deinit((uint64_t)v7);
  return v4;
}

uint64_t REStateMachineAssetTransitionGetName(uint64_t a1)
{
  return *(_QWORD *)(a1 + 72);
}

uint64_t REStateMachineAssetTransitionGetToStateName(uint64_t a1)
{
  return *(_QWORD *)(a1 + 104);
}

float REStateMachineAssetTransitionGetTransitionTime(uint64_t a1)
{
  return *(float *)(a1 + 112);
}

uint64_t REStateMachineAssetTransitionGetInterruptionType(uint64_t a1)
{
  return *(char *)(a1 + 116);
}

uint64_t REStateMachineAssetTransitionGetConditionCount(uint64_t a1)
{
  return *(_QWORD *)(a1 + 40);
}

uint64_t REStateMachineAssetTransitionGetConditionAtIndex(uint64_t a1, unint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  __int128 v4;
  uint64_t v6;

  if (*(_QWORD *)(a1 + 40) <= a2)
    return 0;
  v2 = *(_QWORD *)(a1 + 56) + 40 * a2;
  v3 = v6;
  re::StringID::operator=((unint64_t *)(v6 + 24), (uint64_t *)v2);
  v4 = *(_OWORD *)(v2 + 16);
  *(_QWORD *)(v3 + 54) = *(_QWORD *)(v2 + 30);
  *(_OWORD *)(v3 + 40) = v4;
  return v3;
}

BOOL REStateMachineAssetTransitionConditionGetType(uint64_t a1)
{
  return *(_BYTE *)(a1 + 40) == 4;
}

uint64_t REStateMachineAssetTransitionConditionGetParameterName(uint64_t a1)
{
  return *(_QWORD *)(a1 + 32);
}

uint64_t REStateMachineAssetTransitionConditionGetConditionOperator(uint64_t a1)
{
  return *(char *)(a1 + 61);
}

uint64_t REStateMachineAssetTransitionConditionGetParameterType(uint64_t a1)
{
  unint64_t v1;
  char v2;

  v1 = *(unsigned __int8 *)(a1 + 40);
  if (v1 >= 5)
    v2 = 1;
  else
    v2 = 0x303020101uLL >> (8 * v1);
  return v2 & 3;
}

uint64_t REStateMachineAssetTransitionConditionGetConstantInt(uint64_t a1)
{
  return *(_QWORD *)(a1 + 48);
}

float REStateMachineAssetTransitionConditionGetConstantFloat(uint64_t a1)
{
  return *(float *)(a1 + 56);
}

uint64_t REStateMachineAssetTransitionConditionGetConstantBool(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 60);
}

uint64_t REStateMachineAssetCommandGetType(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 424);
}

uint64_t REStateMachineAssetCommandGetEntityBindTarget(uint64_t a1)
{
  return *(_QWORD *)(a1 + 440);
}

uint64_t REStateMachineAssetCommandGetParameterCount(uint64_t *a1, int a2)
{
  uint64_t *v2;
  uint64_t result;

  switch(a2)
  {
    case 0:
      v2 = a1 + 45;
      goto LABEL_8;
    case 1:
      v2 = a1 + 5;
      goto LABEL_8;
    case 2:
      v2 = a1 + 15;
      goto LABEL_8;
    case 3:
      v2 = a1 + 25;
      goto LABEL_8;
    case 4:
      v2 = a1 + 35;
LABEL_8:
      result = *v2;
      break;
    default:
      result = 0;
      break;
  }
  return result;
}

uint64_t REStateMachineAssetCommandGetParameterNameAtIndex(_QWORD *a1, int a2, unint64_t a3)
{
  _QWORD *v3;

  switch(a2)
  {
    case 0:
      if (a1[45] <= a3)
      {
        os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_16:
        os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_17:
        os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_18:
        os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_19:
        os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
      }
      v3 = a1 + 47;
      break;
    case 1:
      if (a1[5] <= a3)
        goto LABEL_16;
      v3 = a1 + 7;
      break;
    case 2:
      if (a1[15] <= a3)
        goto LABEL_17;
      v3 = a1 + 17;
      break;
    case 3:
      if (a1[25] <= a3)
        goto LABEL_18;
      v3 = a1 + 27;
      break;
    case 4:
      if (a1[35] <= a3)
        goto LABEL_19;
      v3 = a1 + 37;
      break;
    default:
      return 0;
  }
  return *(_QWORD *)(*v3 + 16 * a3 + 8);
}

void `anonymous namespace'::AssetStateGraph::~AssetStateGraph(_anonymous_namespace_::AssetStateGraph *this)
{
  char *v2;
  char *v3;

  *(_QWORD *)this = &off_24ED9CD20;
  v2 = (char *)this + 88;
  v3 = (char *)this + 24;
  re::StringID::destroyString((_anonymous_namespace_::AssetStateGraph *)((char *)this + 168));
  re::DynamicArray<re::SMAssetStateCommand>::deinit((uint64_t)this + 128);
  re::DynamicArray<re::SMAssetStateTransition>::deinit((uint64_t)v2);
  re::StringID::destroyString((_anonymous_namespace_::AssetStateGraph *)((char *)this + 64));
  re::DynamicArray<re::SMAssetState>::deinit((uint64_t)v3);
  *(_QWORD *)this = &off_24ED426B8;
  objc_destructInstance((char *)this + 8);
}

{
  char *v2;
  char *v3;

  *(_QWORD *)this = &off_24ED9CD20;
  v2 = (char *)this + 88;
  v3 = (char *)this + 24;
  re::StringID::destroyString((_anonymous_namespace_::AssetStateGraph *)((char *)this + 168));
  re::DynamicArray<re::SMAssetStateCommand>::deinit((uint64_t)this + 128);
  re::DynamicArray<re::SMAssetStateTransition>::deinit((uint64_t)v2);
  re::StringID::destroyString((_anonymous_namespace_::AssetStateGraph *)((char *)this + 64));
  re::DynamicArray<re::SMAssetState>::deinit((uint64_t)v3);
  *(_QWORD *)this = &off_24ED426B8;
  objc_destructInstance((char *)this + 8);
  JUMPOUT(0x2276933B8);
}

void `anonymous namespace'::AssetStateGraphGroup::~AssetStateGraphGroup(_anonymous_namespace_::AssetStateGraphGroup *this)
{
  *(_QWORD *)this = &off_24ED9CD68;
  re::DynamicArray<re::SMAssetStateGraph>::deinit((uint64_t)this + 24);
  *(_QWORD *)this = &off_24ED426B8;
  objc_destructInstance((char *)this + 8);
}

{
  *(_QWORD *)this = &off_24ED9CD68;
  re::DynamicArray<re::SMAssetStateGraph>::deinit((uint64_t)this + 24);
  *(_QWORD *)this = &off_24ED426B8;
  objc_destructInstance((char *)this + 8);
  JUMPOUT(0x2276933B8);
}

void `anonymous namespace'::AssetStateGraphGroupCollection::~AssetStateGraphGroupCollection(_anonymous_namespace_::AssetStateGraphGroupCollection *this)
{
  *(_QWORD *)this = &off_24ED9CDB0;
  re::DynamicArray<re::SMAssetStateGraphGroup>::deinit((uint64_t)this + 24);
  *(_QWORD *)this = &off_24ED426B8;
  objc_destructInstance((char *)this + 8);
}

{
  *(_QWORD *)this = &off_24ED9CDB0;
  re::DynamicArray<re::SMAssetStateGraphGroup>::deinit((uint64_t)this + 24);
  *(_QWORD *)this = &off_24ED426B8;
  objc_destructInstance((char *)this + 8);
  JUMPOUT(0x2276933B8);
}

double re::make::shared::object<`anonymous namespace'::AssetState>(re *a1)
{
  uint64_t *v2;
  uint64_t v3;
  double result;

  v2 = re::globalAllocators(a1);
  v3 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v2[2] + 32))(v2[2], 128, 8);
  *(_OWORD *)v3 = 0u;
  *(_OWORD *)(v3 + 16) = 0u;
  *(_OWORD *)(v3 + 32) = 0u;
  *(_OWORD *)(v3 + 48) = 0u;
  *(_OWORD *)(v3 + 64) = 0u;
  *(_OWORD *)(v3 + 80) = 0u;
  *(_OWORD *)(v3 + 96) = 0u;
  *(_OWORD *)(v3 + 112) = 0u;
  ArcSharedObject::ArcSharedObject((ArcSharedObject *)v3, 0);
  *(_QWORD *)v3 = &off_24ED9CDF8;
  *(_QWORD *)(v3 + 24) = 0;
  *(_QWORD *)(v3 + 32) = 0;
  *(_QWORD *)(v3 + 40) = 0;
  *(_DWORD *)(v3 + 48) = 0;
  result = 0.0;
  *(_OWORD *)(v3 + 56) = 0u;
  *(_OWORD *)(v3 + 72) = 0u;
  *(_DWORD *)(v3 + 88) = 0;
  *(_QWORD *)(v3 + 96) = 0;
  *(_QWORD *)(v3 + 104) = 0;
  *(_QWORD *)(v3 + 112) = &str_110;
  *(_DWORD *)(v3 + 120) = 0;
  *(_QWORD *)a1 = v3;
  return result;
}

void `anonymous namespace'::AssetState::~AssetState(_anonymous_namespace_::AssetState *this)
{
  *(_QWORD *)this = &off_24ED9CDF8;
  re::StringID::destroyString((_anonymous_namespace_::AssetState *)((char *)this + 104));
  re::DynamicArray<re::SMAssetStateCommand>::deinit((uint64_t)this + 64);
  re::DynamicArray<re::SMAssetStateTransition>::deinit((uint64_t)this + 24);
  *(_QWORD *)this = &off_24ED426B8;
  objc_destructInstance((char *)this + 8);
}

{
  *(_QWORD *)this = &off_24ED9CDF8;
  re::StringID::destroyString((_anonymous_namespace_::AssetState *)((char *)this + 104));
  re::DynamicArray<re::SMAssetStateCommand>::deinit((uint64_t)this + 64);
  re::DynamicArray<re::SMAssetStateTransition>::deinit((uint64_t)this + 24);
  *(_QWORD *)this = &off_24ED426B8;
  objc_destructInstance((char *)this + 8);
  JUMPOUT(0x2276933B8);
}

void re::make::shared::object<`anonymous namespace'::AssetTransition>(re *a1)
{
  uint64_t *v2;
  uint64_t v3;

  v2 = re::globalAllocators(a1);
  v3 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v2[2] + 32))(v2[2], 120, 8);
  *(_OWORD *)v3 = 0u;
  *(_OWORD *)(v3 + 16) = 0u;
  *(_OWORD *)(v3 + 32) = 0u;
  *(_OWORD *)(v3 + 48) = 0u;
  *(_OWORD *)(v3 + 64) = 0u;
  *(_OWORD *)(v3 + 80) = 0u;
  *(_OWORD *)(v3 + 96) = 0u;
  *(_QWORD *)(v3 + 112) = 0;
  ArcSharedObject::ArcSharedObject((ArcSharedObject *)v3, 0);
  *(_QWORD *)v3 = &off_24ED9CE40;
  *(_QWORD *)(v3 + 24) = 0;
  *(_QWORD *)(v3 + 32) = 0;
  *(_QWORD *)(v3 + 40) = 0;
  *(_DWORD *)(v3 + 48) = 0;
  *(_QWORD *)(v3 + 56) = 0;
  *(_QWORD *)(v3 + 64) = 0;
  *(_QWORD *)(v3 + 72) = &str_110;
  *(_QWORD *)(v3 + 80) = 0;
  *(_QWORD *)(v3 + 88) = &str_110;
  *(_QWORD *)(v3 + 96) = 0;
  *(_QWORD *)(v3 + 104) = &str_110;
  *(_DWORD *)(v3 + 112) = 0;
  *(_BYTE *)(v3 + 116) = 0;
  *(_QWORD *)a1 = v3;
}

void `anonymous namespace'::AssetTransition::~AssetTransition(_anonymous_namespace_::AssetTransition *this)
{
  *(_QWORD *)this = &off_24ED9CE40;
  re::StringID::destroyString((_anonymous_namespace_::AssetTransition *)((char *)this + 96));
  re::StringID::destroyString((_anonymous_namespace_::AssetTransition *)((char *)this + 80));
  re::StringID::destroyString((_anonymous_namespace_::AssetTransition *)((char *)this + 64));
  re::DynamicArray<re::SMAssetTransitionCondition>::deinit((uint64_t)this + 24);
  *(_QWORD *)this = &off_24ED426B8;
  objc_destructInstance((char *)this + 8);
}

{
  *(_QWORD *)this = &off_24ED9CE40;
  re::StringID::destroyString((_anonymous_namespace_::AssetTransition *)((char *)this + 96));
  re::StringID::destroyString((_anonymous_namespace_::AssetTransition *)((char *)this + 80));
  re::StringID::destroyString((_anonymous_namespace_::AssetTransition *)((char *)this + 64));
  re::DynamicArray<re::SMAssetTransitionCondition>::deinit((uint64_t)this + 24);
  *(_QWORD *)this = &off_24ED426B8;
  objc_destructInstance((char *)this + 8);
  JUMPOUT(0x2276933B8);
}

void re::make::shared::object<`anonymous namespace'::AssetCondition>(re *a1)
{
  uint64_t *v2;
  uint64_t v3;

  v2 = re::globalAllocators(a1);
  v3 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v2[2] + 32))(v2[2], 64, 8);
  *(_OWORD *)v3 = 0u;
  *(_OWORD *)(v3 + 16) = 0u;
  *(_OWORD *)(v3 + 32) = 0u;
  *(_OWORD *)(v3 + 48) = 0u;
  ArcSharedObject::ArcSharedObject((ArcSharedObject *)v3, 0);
  *(_QWORD *)v3 = &off_24ED9CE88;
  *(_QWORD *)(v3 + 24) = 0;
  *(_QWORD *)(v3 + 32) = &str_110;
  *(_BYTE *)(v3 + 40) = 0;
  *(_QWORD *)(v3 + 48) = 0;
  *(_QWORD *)(v3 + 54) = 0;
  *(_QWORD *)a1 = v3;
}

void `anonymous namespace'::AssetCondition::~AssetCondition(_anonymous_namespace_::AssetCondition *this)
{
  *(_QWORD *)this = &off_24ED9CE88;
  re::StringID::destroyString((_anonymous_namespace_::AssetCondition *)((char *)this + 24));
  *(_QWORD *)this = &off_24ED426B8;
  objc_destructInstance((char *)this + 8);
}

{
  *(_QWORD *)this = &off_24ED9CE88;
  re::StringID::destroyString((_anonymous_namespace_::AssetCondition *)((char *)this + 24));
  *(_QWORD *)this = &off_24ED426B8;
  objc_destructInstance((char *)this + 8);
  JUMPOUT(0x2276933B8);
}

double re::make::shared::object<`anonymous namespace'::AssetCommand>(re *a1)
{
  uint64_t *v2;
  uint64_t v3;
  double result;

  v2 = re::globalAllocators(a1);
  v3 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v2[2] + 32))(v2[2], 448, 8);
  *(_OWORD *)v3 = 0u;
  *(_OWORD *)(v3 + 16) = 0u;
  *(_OWORD *)(v3 + 32) = 0u;
  *(_OWORD *)(v3 + 48) = 0u;
  *(_OWORD *)(v3 + 64) = 0u;
  *(_OWORD *)(v3 + 80) = 0u;
  *(_OWORD *)(v3 + 96) = 0u;
  *(_OWORD *)(v3 + 112) = 0u;
  *(_OWORD *)(v3 + 128) = 0u;
  *(_OWORD *)(v3 + 144) = 0u;
  *(_OWORD *)(v3 + 160) = 0u;
  *(_OWORD *)(v3 + 176) = 0u;
  *(_OWORD *)(v3 + 192) = 0u;
  *(_OWORD *)(v3 + 208) = 0u;
  *(_OWORD *)(v3 + 224) = 0u;
  *(_OWORD *)(v3 + 240) = 0u;
  *(_OWORD *)(v3 + 256) = 0u;
  *(_OWORD *)(v3 + 272) = 0u;
  *(_OWORD *)(v3 + 288) = 0u;
  *(_OWORD *)(v3 + 304) = 0u;
  *(_OWORD *)(v3 + 320) = 0u;
  *(_OWORD *)(v3 + 336) = 0u;
  *(_OWORD *)(v3 + 352) = 0u;
  *(_OWORD *)(v3 + 368) = 0u;
  *(_OWORD *)(v3 + 384) = 0u;
  *(_OWORD *)(v3 + 400) = 0u;
  *(_OWORD *)(v3 + 416) = 0u;
  *(_OWORD *)(v3 + 432) = 0u;
  ArcSharedObject::ArcSharedObject((ArcSharedObject *)v3, 0);
  *(_QWORD *)v3 = &off_24ED9CED0;
  *(_QWORD *)(v3 + 32) = 0;
  *(_QWORD *)(v3 + 40) = 0;
  *(_DWORD *)(v3 + 48) = 0;
  *(_QWORD *)(v3 + 24) = 0;
  *(_QWORD *)(v3 + 416) = 0;
  *(_BYTE *)(v3 + 424) = 0;
  result = 0.0;
  *(_OWORD *)(v3 + 56) = 0u;
  *(_OWORD *)(v3 + 72) = 0u;
  *(_DWORD *)(v3 + 88) = 0;
  *(_OWORD *)(v3 + 96) = 0u;
  *(_OWORD *)(v3 + 112) = 0u;
  *(_DWORD *)(v3 + 128) = 0;
  *(_OWORD *)(v3 + 136) = 0u;
  *(_OWORD *)(v3 + 152) = 0u;
  *(_DWORD *)(v3 + 168) = 0;
  *(_DWORD *)(v3 + 208) = 0;
  *(_OWORD *)(v3 + 176) = 0u;
  *(_OWORD *)(v3 + 192) = 0u;
  *(_DWORD *)(v3 + 248) = 0;
  *(_OWORD *)(v3 + 232) = 0u;
  *(_OWORD *)(v3 + 216) = 0u;
  *(_DWORD *)(v3 + 288) = 0;
  *(_OWORD *)(v3 + 256) = 0u;
  *(_OWORD *)(v3 + 272) = 0u;
  *(_DWORD *)(v3 + 328) = 0;
  *(_OWORD *)(v3 + 296) = 0u;
  *(_OWORD *)(v3 + 312) = 0u;
  *(_DWORD *)(v3 + 368) = 0;
  *(_OWORD *)(v3 + 336) = 0u;
  *(_OWORD *)(v3 + 352) = 0u;
  *(_DWORD *)(v3 + 408) = 0;
  *(_OWORD *)(v3 + 376) = 0u;
  *(_OWORD *)(v3 + 392) = 0u;
  *(_QWORD *)(v3 + 432) = 0;
  *(_QWORD *)(v3 + 440) = &str_110;
  *(_QWORD *)a1 = v3;
  return result;
}

void `anonymous namespace'::AssetCommand::~AssetCommand(_anonymous_namespace_::AssetCommand *this)
{
  *(_QWORD *)this = &off_24ED9CED0;
  re::SMAssetStateCommand::~SMAssetStateCommand((_anonymous_namespace_::AssetCommand *)((char *)this + 24));
  *(_QWORD *)this = &off_24ED426B8;
  objc_destructInstance((char *)this + 8);
}

{
  *(_QWORD *)this = &off_24ED9CED0;
  re::SMAssetStateCommand::~SMAssetStateCommand((_anonymous_namespace_::AssetCommand *)((char *)this + 24));
  *(_QWORD *)this = &off_24ED426B8;
  objc_destructInstance((char *)this + 8);
  JUMPOUT(0x2276933B8);
}

uint64_t REGeomMeshGetName(uint64_t a1)
{
  return *(_QWORD *)(a1 + 24);
}

uint64_t REGeomMeshGetVertexCount(uint64_t a1)
{
  return *(unsigned int *)(a1 + 40);
}

uint64_t REGeomMeshGetFaceCount(uint64_t a1)
{
  return *(unsigned int *)(a1 + 64);
}

uint64_t REGeomMeshGetFaceVertexCount(uint64_t a1, unsigned int a2)
{
  unint64_t v2;

  v2 = *(_QWORD *)(a1 + 64);
  if (v2 <= a2)
  {
    return 0;
  }
  else
  {
    if (v2 <= a2)
    {
      os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
    }
    if (*(_DWORD *)(*(_QWORD *)(a1 + 80) + 16 * a2 + 12) == -1)
      return 3;
    else
      return 4;
  }
}

uint64_t REGeomMeshGetFaceVertexIndices(uint64_t a1, unsigned int a2, uint64_t a3)
{
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v3 = *(_QWORD *)(a1 + 64);
  if (v3 <= a2)
  {
    return 0;
  }
  else
  {
    if (v3 <= a2)
    {
      os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
    }
    v4 = 0;
    v5 = *(_QWORD *)(a1 + 80) + 16 * a2;
    do
    {
      *(_DWORD *)(a3 + v4) = *(_DWORD *)(v5 + v4);
      v4 += 4;
    }
    while (v4 != 16);
    if (*(_DWORD *)(a3 + 12) == -1)
      return 3;
    else
      return 4;
  }
}

uint64_t REGeomMeshGetAttributeCount(uint64_t a1)
{
  return *(unsigned int *)(a1 + 664);
}

uint64_t REGeomMeshGetVertexAttributeCount(uint64_t a1)
{
  return *(unsigned int *)(a1 + 224);
}

uint64_t REGeomMeshGetAttributeIndex(uint64_t a1, char *a2)
{
  uint64_t v3;
  char *v5;

  v5 = a2;
  v3 = re::HashBrown<char const*,unsigned int,re::internal::HashName,re::internal::HashName,void,false>::find((uint64_t *)(a1 + 688), &v5);
  if (v3 == -1)
    return 0xFFFFFFFFLL;
  else
    return *(unsigned int *)(*(_QWORD *)(a1 + 696) + 16 * v3 + 8);
}

uint64_t REGeomMeshGetAttributeValueCount(uint64_t a1, unsigned int a2)
{
  uint64_t v2;

  v2 = re::internal::GeomAttributeManager::attributeByIndex((re::internal::GeomAttributeManager *)(a1 + 88), a2);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v2 + 16))(v2);
}

uint64_t REGeomMeshGetAttributeName(uint64_t a1, unsigned int a2)
{
  if (*(_DWORD *)(a1 + 664) <= a2)
    return 0;
  else
    return *(_QWORD *)(re::internal::GeomAttributeManager::attributeByIndex((re::internal::GeomAttributeManager *)(a1 + 88), a2)+ 8);
}

uint64_t REGeomMeshGetAttributeRate(uint64_t a1, unsigned int a2)
{
  if (*(_DWORD *)(a1 + 664) <= a2)
    return 255;
  else
    return *(unsigned __int8 *)(re::internal::GeomAttributeManager::attributeByIndex((re::internal::GeomAttributeManager *)(a1 + 88), a2)+ 16);
}

uint64_t REGeomMeshGetAttributeType(uint64_t a1, unsigned int a2)
{
  if (*(_DWORD *)(a1 + 664) <= a2)
    return 255;
  else
    return *(unsigned __int8 *)(re::internal::GeomAttributeManager::attributeByIndex((re::internal::GeomAttributeManager *)(a1 + 88), a2)+ 17);
}

_QWORD *REGeomMeshCreateFromPolygon(unsigned int a1, __int128 *a2)
{
  re::GeomMesh *v2;
  unint64_t v3;
  NSObject *v4;
  _QWORD *v5;
  unsigned int *v7;
  _anonymous_namespace_ *v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  unsigned int v13;
  re::internal *v14;
  const re::GeomAttribute *v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  unsigned int *v19;
  uint64_t v20;
  unsigned int *v21;
  uint64_t v22;
  re *v23;
  unsigned int v24;
  unsigned int v25;
  uint64_t *v26;
  re *v27;
  re *v28;
  const char *v29;
  uint64_t *v30;
  _OWORD *v31;
  unsigned int v32;
  uint64_t v33;
  __int128 v34;
  _QWORD v36[2];
  _QWORD v37[3];
  int v38;
  uint64_t v39;
  uint64_t v40;
  unsigned int *v41;
  uint64_t v42;
  uint64_t v43;
  uint8_t buf[8];
  unsigned int v45;
  uint64_t v46;
  unint64_t v47;
  uint64_t v48;
  unsigned int v49;
  uint64_t v50;
  uint64_t *v51;
  unsigned int v52;
  uint64_t v53;
  uint64_t *v54;
  uint64_t v55;
  int v56;
  int v57;
  const char *v58;
  __int16 v59;
  int v60;
  __int16 v61;
  unsigned int *v62;
  __int16 v63;
  unsigned int *v64;
  __int128 v65;
  __int128 v66;
  __int128 v67;
  __int128 v68;
  __int128 v69;
  uint64_t v70;

  LODWORD(v2) = a1;
  v70 = *MEMORY[0x24BDAC8D0];
  v3 = a1 - 2;
  if (a1 > 2)
  {
    v7 = &v45;
    bzero(buf, 0x2D0uLL);
    re::internal::GeomBaseMesh::GeomBaseMesh((re::internal::GeomBaseMesh *)&v45);
    v8 = re::internal::GeomAttributeManager::addAttribute((re::internal::GeomAttributeManager *)&v48, "vertexPosition", 1, 7);
    v40 = 0;
    v41 = 0;
    v42 = 0;
    v39 = 0;
    v38 = 0;
    v36[0] = a2;
    v36[1] = v2;
    memset(v37, 0, sizeof(v37));
    if (v45 > v2 && (_DWORD)v47 && (v47 - 1) > v47)
    {
      while (1)
        ;
    }
    v45 = v2;
    v49 = v2;
    if (v50)
    {
      v9 = v51;
      v10 = 8 * v50;
      do
      {
        v11 = *v9++;
        (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v11 + 72))(v11, v49);
        v10 -= 8;
      }
      while (v10);
    }
    if (v3 < v47)
    {
      v12 = v56;
      if (v56)
      {
        v13 = 0;
        do
        {
          v14 = (re::internal *)re::internal::GeomAttributeContainer::attributeByIndex((re::internal::GeomAttributeContainer *)&v55, v13);
          re::internal::accessFaceVaryingAttributeSubmesh(v14, v15);
          ++v13;
        }
        while (v12 != v13);
      }
    }
    re::DynamicArray<re::GeomCell4>::resize(&v46, v3);
    v52 = v3;
    if (v53)
    {
      v16 = v54;
      v17 = 8 * v53;
      do
      {
        v18 = *v16++;
        (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v18 + 72))(v18, v52);
        v17 -= 8;
      }
      while (v17);
    }
    v19 = 0;
    v21 = v41;
    v20 = v42;
    if (v2 <= 1)
      v22 = 1;
    else
      v22 = v2;
    do
    {
      if (v21 == v19)
      {
        v43 = 0;
        v68 = 0u;
        v69 = 0u;
        v66 = 0u;
        v67 = 0u;
        v65 = 0u;
        os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        v57 = 136315906;
        v58 = "operator[]";
        v59 = 1024;
        v60 = 468;
        v61 = 2048;
        v62 = v21;
        v63 = 2048;
        v64 = v21;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_43:
        v43 = 0;
        v68 = 0u;
        v69 = 0u;
        v66 = 0u;
        v67 = 0u;
        v65 = 0u;
        os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        v57 = 136315906;
        v58 = "operator[]";
        v59 = 1024;
        v60 = 609;
        v61 = 2048;
        v62 = v7;
        v63 = 2048;
        v64 = v7;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
        goto LABEL_44;
      }
      *(_DWORD *)(v20 + 4 * (_QWORD)v19) = (_DWORD)v19;
      v19 = (unsigned int *)((char *)v19 + 1);
    }
    while ((unsigned int *)v22 != v19);
    *(_QWORD *)&v65 = v20;
    *((_QWORD *)&v65 + 1) = v21;
    v23 = (re *)re::triangulatePolygon((uint64_t)v36, (uint64_t)&v65, (uint64_t)v37);
    if ((_DWORD)v3)
    {
      v24 = 0;
      v25 = 0;
      do
      {
        re::GeomMeshBuilder::setFaceVertices((re::GeomMeshBuilder *)buf, v25++, 3, (double *)(v39 + 4 * v24));
        v24 += 3;
      }
      while ((_DWORD)v3 != v25);
    }
    v26 = re::globalAllocators(v23);
    v5 = (_QWORD *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v26[2] + 32))(v26[2], 760, 8);
    v2 = (re::GeomMesh *)(re::Shareable<re::GeomMesh>::Shareable<>(v5) + 3);
    v27 = (re *)re::GeomMesh::operator=((uint64_t)v2, &v45);
    v28 = re::GeomMesh::setName(v27, *(const char **)buf);
    v29 = *(const char **)buf;
    if (*(_QWORD *)buf)
    {
      v30 = re::globalAllocators(v28);
      (*(void (**)(uint64_t, const char *))(*(_QWORD *)v30[2] + 40))(v30[2], v29);
      *(_QWORD *)buf = 0;
    }
    if (v5)
    {
      v31 = (_OWORD *)re::GeomMesh::modifyVertexPositions(v2);
      v7 = (unsigned int *)v32;
      v33 = v32;
      while (v33)
      {
        v34 = *a2++;
        *v31++ = v34;
        --v33;
        if (!--v22)
          goto LABEL_34;
      }
      goto LABEL_43;
    }
LABEL_34:
    if (v37[0] && v39)
      (*(void (**)(void))(*(_QWORD *)v37[0] + 40))();
    if (v40 && v41)
      (*(void (**)(void))(*(_QWORD *)v40 + 40))();
    re::GeomMeshBuilder::~GeomMeshBuilder((re::GeomMeshBuilder *)buf);
  }
  else
  {
    if (CoreRELog::onceToken != -1)
LABEL_44:
      dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
    v4 = (id)CoreRELog::log;
    if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 67109120;
      *(_DWORD *)&buf[4] = (_DWORD)v2;
      _os_log_error_impl(&dword_224FE9000, v4, OS_LOG_TYPE_ERROR, "REGeomMeshCreateFromPolygon - called with a degenerate polygon vertex count of %d.  This value must be greater than 2.", buf, 8u);
    }

    return 0;
  }
  return v5;
}

uint64_t REGeomMeshCreateFromCoreAttributes(unsigned int a1, unsigned int a2, _QWORD *a3, uint64_t a4, __int128 *a5, uint64_t a6, __int128 *a7, __int128 *a8, __int128 *a9, char *__s)
{
  _QWORD *v11;
  unsigned int v12;
  uint64_t v14;
  uint64_t v15;
  unsigned int v16;
  unsigned int v17;
  int v18;
  uint64_t v19;
  int v20;
  unsigned int v21;
  re::internal *v22;
  const re::GeomAttribute *v23;
  re *v24;
  uint64_t *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unsigned int v32;
  uint64_t v33;
  unsigned int v34;
  uint64_t v35;
  int *v36;
  uint64_t v37;
  int *v38;
  uint64_t *v39;
  uint64_t v40;
  re *v41;
  re *v42;
  const char *v43;
  uint64_t *v44;
  re::GeomAttribute *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  NSObject *v49;
  int v50;
  const char *v51;
  NSObject *v52;
  uint32_t v53;
  int v54;
  uint64_t v55;
  __int128 *v57;
  __int128 *v58;
  uint64_t v59;
  __int128 *v60;
  uint8_t buf[8];
  _BYTE v62[6];
  __int16 v63;
  uint64_t v64;
  unint64_t v65;
  uint64_t v66;
  unsigned int v67;
  uint64_t v68;
  uint64_t *v69;
  unsigned int v70;
  uint64_t v71;
  uint64_t *v72;
  uint64_t v73;
  int v74;
  int v75;
  const char *v76;
  __int16 v77;
  int v78;
  __int16 v79;
  uint64_t v80;
  __int16 v81;
  uint64_t v82;
  __int128 v83;
  __int128 v84;
  __int128 v85;
  __int128 v86;
  __int128 v87;
  uint64_t v88;

  v11 = a3;
  v12 = a2;
  v88 = *MEMORY[0x24BDAC8D0];
  if (a2)
  {
    v14 = 0;
    LODWORD(v15) = 0;
    v16 = 0;
    do
    {
      v17 = *((unsigned __int8 *)a3 + v14);
      v18 = v17 - 2;
      if (v17 <= 2)
      {
        if (CoreRELog::onceToken != -1)
          goto LABEL_66;
        goto LABEL_47;
      }
      if (v17 < 5)
        v18 = 1;
      v16 += v18;
      v15 = v15 + v17;
      ++v14;
    }
    while (a2 != v14);
    if (!(_DWORD)v15)
    {
LABEL_11:
      v59 = a6;
      v60 = a5;
      v57 = a8;
      v58 = a7;
      goto LABEL_13;
    }
    v19 = 0;
    while (*(_DWORD *)(a4 + 4 * v19) < a1)
    {
      if (v15 == ++v19)
        goto LABEL_11;
    }
    if (CoreRELog::onceToken != -1)
      dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
    v49 = (id)CoreRELog::log;
    if (os_log_type_enabled(v49, OS_LOG_TYPE_ERROR))
    {
      v54 = *(_DWORD *)(a4 + 4 * v19);
      *(_DWORD *)buf = 67109632;
      *(_DWORD *)&buf[4] = v19;
      *(_WORD *)v62 = 1024;
      *(_DWORD *)&v62[2] = v54;
      v63 = 1024;
      LODWORD(v64) = a1;
      v51 = "REGeomMeshCreateFromCoreAttributes - vertexIndicesPerPolygon[%d] specifies an invalid vertex index (%d) whic"
            "h is larger than the specified vertex count of %d.";
      v52 = v49;
      v53 = 20;
      goto LABEL_53;
    }
    goto LABEL_54;
  }
  v59 = a6;
  v60 = a5;
  v57 = a8;
  v58 = a7;
  v16 = 0;
LABEL_13:
  bzero(buf, 0x2D0uLL);
  re::internal::GeomBaseMesh::GeomBaseMesh((re::internal::GeomBaseMesh *)v62);
  re::internal::GeomAttributeManager::addAttribute((re::internal::GeomAttributeManager *)&v66, "vertexPosition", 1, 7);
  if (v16 < v65)
  {
    v20 = v74;
    if (v74)
    {
      v21 = 0;
      do
      {
        v22 = (re::internal *)re::internal::GeomAttributeContainer::attributeByIndex((re::internal::GeomAttributeContainer *)&v73, v21);
        re::internal::accessFaceVaryingAttributeSubmesh(v22, v23);
        ++v21;
      }
      while (v20 != v21);
    }
  }
  v24 = (re *)re::DynamicArray<re::GeomCell4>::resize(&v64, v16);
  v70 = v16;
  if (v71)
  {
    v25 = v72;
    v26 = 8 * v71;
    do
    {
      v27 = *v25++;
      v24 = (re *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v27 + 72))(v27, v70);
      v26 -= 8;
    }
    while (v26);
  }
  if (*(_DWORD *)v62 > a1 && (_DWORD)v65 && (v65 - 1) > v65)
  {
    while (1)
      ;
  }
  *(_DWORD *)v62 = a1;
  v67 = a1;
  if (v68)
  {
    v28 = v69;
    v29 = 8 * v68;
    do
    {
      v30 = *v28++;
      v24 = (re *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v30 + 72))(v30, v67);
      v29 -= 8;
    }
    while (v29);
  }
  if (__s)
    v24 = re::GeomMesh::setName((re *)buf, __s);
  if (v12)
  {
    v31 = 0;
    v32 = 0;
    v33 = v12;
    do
    {
      v34 = *((unsigned __int8 *)v11 + v31);
      v35 = v32;
      v36 = (int *)(a4 + 4 * v32);
      if (v34 > 4)
      {
        v24 = (re *)re::GeomMeshBuilder::setFaceVertices((uint64_t)buf, v31, *v36, v36[1], v36[2]);
        if (v12 < v12 + v34 - 3)
        {
          v37 = v34 - 2 - 1;
          v38 = (int *)(a4 + 12 + 4 * v35);
          do
          {
            v24 = (re *)re::GeomMeshBuilder::setFaceVertices((uint64_t)buf, v12++, *v36, *(v38 - 1), *v38);
            ++v38;
            --v37;
          }
          while (v37);
        }
      }
      else
      {
        re::GeomMeshBuilder::setFaceVertices((re::GeomMeshBuilder *)buf, v31, *((unsigned __int8 *)v11 + v31), (double *)(a4 + 4 * v32));
      }
      ++v31;
      v32 = v35 + v34;
    }
    while (v31 != v33);
  }
  v39 = re::globalAllocators(v24);
  v40 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v39[2] + 32))(v39[2], 760, 8);
  v11 = re::Shareable<re::GeomMesh>::Shareable<>((_QWORD *)v40) + 3;
  v41 = (re *)re::GeomMesh::operator=((uint64_t)v11, v62);
  v42 = re::GeomMesh::setName(v41, *(const char **)buf);
  v43 = *(const char **)buf;
  if (*(_QWORD *)buf)
  {
    v44 = re::globalAllocators(v42);
    (*(void (**)(uint64_t, const char *))(*(_QWORD *)v44[2] + 40))(v44[2], v43);
    *(_QWORD *)buf = 0;
  }
  if (!v40)
  {
LABEL_63:
    re::GeomMeshBuilder::~GeomMeshBuilder((re::GeomMeshBuilder *)buf);
    return v40;
  }
  if (!_ZN12_GLOBAL__N_131addAndCopyVertexAttributeHelperIN2re7Vector3IfEEDv3_fEEbRNS1_8GeomMeshEPKcNS1_17GeomAttributeTypeEPKT0_((uint64_t)v11, "vertexPosition", v60))goto LABEL_62;
  if (!v59)
    goto LABEL_59;
  v45 = re::GeomMesh::addAttribute((uint64_t)v11, "vertexUV", 1, 6);
  if (!v45)
  {
LABEL_62:
    v40 = 0;
    goto LABEL_63;
  }
  v46 = (uint64_t)v45;
  v14 = *(unsigned int *)(v40 + 40);
  if (!(*(unsigned int (**)(re::GeomAttribute *))(*(_QWORD *)v45 + 16))(v45))
  {
    v48 = 0;
    v47 = 0;
    if ((_DWORD)v14)
      goto LABEL_56;
LABEL_59:
    if (_ZN12_GLOBAL__N_131addAndCopyVertexAttributeHelperIN2re7Vector3IfEEDv3_fEEbRNS1_8GeomMeshEPKcNS1_17GeomAttributeTypeEPKT0_((uint64_t)v11, "vertexNormal", v58)&& _ZN12_GLOBAL__N_131addAndCopyVertexAttributeHelperIN2re7Vector3IfEEDv3_fEEbRNS1_8GeomMeshEPKcNS1_17GeomAttributeTypeEPKT0_((uint64_t)v11, "vertexTangent", v57)&& _ZN12_GLOBAL__N_131addAndCopyVertexAttributeHelperIN2re7Vector3IfEEDv3_fEEbRNS1_8GeomMeshEPKcNS1_17GeomAttributeTypeEPKT0_((uint64_t)v11, "vertexBitangent", a9))
    {
      goto LABEL_63;
    }
    goto LABEL_62;
  }
  v47 = re::internal::GeomTypedAttribute<double>::operator[](v46, 0);
  v48 = (*(unsigned int (**)(uint64_t))(*(_QWORD *)v46 + 16))(v46);
  if (!(_DWORD)v14)
    goto LABEL_59;
LABEL_56:
  v55 = 0;
  while (v48 != v55)
  {
    *(_QWORD *)(v47 + 8 * v55) = *(_QWORD *)(v59 + 8 * v55);
    if (v14 == ++v55)
      goto LABEL_59;
  }
  v86 = 0u;
  v87 = 0u;
  v84 = 0u;
  v85 = 0u;
  v83 = 0u;
  os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
  v75 = 136315906;
  v76 = "operator[]";
  v77 = 1024;
  v78 = 609;
  v79 = 2048;
  v80 = v48;
  v81 = 2048;
  v82 = v48;
  _os_log_send_and_compose_impl();
  _os_crash_msg();
  __break(1u);
LABEL_66:
  dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
LABEL_47:
  v49 = (id)CoreRELog::log;
  if (os_log_type_enabled(v49, OS_LOG_TYPE_ERROR))
  {
    v50 = *((unsigned __int8 *)v11 + v14);
    *(_DWORD *)buf = 67109376;
    *(_DWORD *)&buf[4] = v14;
    *(_WORD *)v62 = 1024;
    *(_DWORD *)&v62[2] = v50;
    v51 = "REGeomMeshCreateFromCoreAttributes - vertexCountPerPolygon[%d] contains a degenerate polygon that is only %d-sided.";
    v52 = v49;
    v53 = 14;
LABEL_53:
    _os_log_error_impl(&dword_224FE9000, v52, OS_LOG_TYPE_ERROR, v51, buf, v53);
  }
LABEL_54:

  return 0;
}

uint64_t _ZN12_GLOBAL__N_131addAndCopyVertexAttributeHelperIN2re7Vector3IfEEDv3_fEEbRNS1_8GeomMeshEPKcNS1_17GeomAttributeTypeEPKT0_(uint64_t a1, char *a2, __int128 *a3)
{
  __int128 *v3;
  uint64_t result;
  uint64_t v6;
  uint64_t v7;
  _OWORD *v8;
  uint64_t v9;
  uint64_t i;
  __int128 v11;

  if (!a3)
    return 1;
  v3 = a3;
  result = (uint64_t)re::GeomMesh::addAttribute(a1, a2, 1, 7);
  if (!result)
    return result;
  v6 = result;
  v7 = *(unsigned int *)(a1 + 16);
  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)result + 16))(result))
  {
    v8 = (_OWORD *)re::internal::GeomTypedAttribute<re::Vector3<float>>::operator[](v6, 0);
    v9 = (*(unsigned int (**)(uint64_t))(*(_QWORD *)v6 + 16))(v6);
    if (!(_DWORD)v7)
      return 1;
LABEL_7:
    for (i = 0; i != v7; ++i)
    {
      if (v9 == i)
      {
        os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
      }
      v11 = *v3++;
      *v8++ = v11;
    }
    return 1;
  }
  v9 = 0;
  v8 = 0;
  if ((_DWORD)v7)
    goto LABEL_7;
  return 1;
}

uint64_t REGeomMeshAddVertexAttributeInt16(uint64_t a1, const char *a2, uint64_t a3)
{
  char *v4;
  re::GeomAttribute *v6;
  uint64_t v7;
  uint64_t v8;
  NSObject *v9;
  const char *v10;
  NSObject *v11;
  uint32_t v12;
  uint64_t v14;
  _OWORD buf[5];
  uint64_t v16;

  v16 = *MEMORY[0x24BDAC8D0];
  if (!a2)
  {
    if (CoreRELog::onceToken != -1)
      dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
    v9 = (id)CoreRELog::log;
    if (!os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
      goto LABEL_15;
    LODWORD(buf[0]) = 136315138;
    *(_QWORD *)((char *)buf + 4) = "REGeomMeshAddVertexAttributeInt16";
    v10 = "%s - attempt to add an attribute with no name.";
    v11 = v9;
    v12 = 12;
    goto LABEL_22;
  }
  v4 = (char *)a2;
  v6 = (re::GeomAttribute *)re::internal::GeomAttributeManager::attributeByName((re::internal::GeomAttributeManager *)(a1 + 88), a2);
  if (!v6 && (v6 = re::GeomMesh::addAttribute(a1 + 24, v4, 1, 0)) == 0
    || *((_BYTE *)v6 + 17)
    || *((_BYTE *)v6 + 16) != 1)
  {
    if (CoreRELog::onceToken == -1)
    {
LABEL_10:
      v9 = (id)CoreRELog::log;
      if (!os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
      {
LABEL_15:

        return 0;
      }
      LODWORD(buf[0]) = 136315394;
      *(_QWORD *)((char *)buf + 4) = "REGeomMeshAddVertexAttributeInt16";
      WORD6(buf[0]) = 2080;
      *(_QWORD *)((char *)buf + 14) = v4;
      v10 = "%s - attempt to add a attribute named \"%s\" which conflicts in type/name of an existing attribute of the same name.";
      v11 = v9;
      v12 = 22;
LABEL_22:
      _os_log_error_impl(&dword_224FE9000, v11, OS_LOG_TYPE_ERROR, v10, (uint8_t *)buf, v12);
      goto LABEL_15;
    }
LABEL_24:
    dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
    goto LABEL_10;
  }
  v7 = *(unsigned int *)(a1 + 40);
  if ((*(unsigned int (**)(re::GeomAttribute *))(*(_QWORD *)v6 + 16))(v6))
  {
    v4 = (char *)re::internal::GeomTypedAttribute<short>::operator[]((uint64_t)v6, 0);
    v8 = (*(unsigned int (**)(re::GeomAttribute *))(*(_QWORD *)v6 + 16))(v6);
    if (!(_DWORD)v7)
      return 1;
    goto LABEL_17;
  }
  v8 = 0;
  v4 = 0;
  if ((_DWORD)v7)
  {
LABEL_17:
    v14 = 0;
    while (v8 != v14)
    {
      *(_WORD *)&v4[2 * v14] = *(_WORD *)(a3 + 2 * v14);
      if (v7 == ++v14)
        return 1;
    }
    memset(buf, 0, sizeof(buf));
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
    goto LABEL_24;
  }
  return 1;
}

uint64_t REGeomMeshAddVertexAttributeUInt16(uint64_t a1, const char *a2, uint64_t a3)
{
  char *v4;
  re::GeomAttribute *v6;
  uint64_t v7;
  uint64_t v8;
  NSObject *v9;
  const char *v10;
  NSObject *v11;
  uint32_t v12;
  uint64_t v14;
  _OWORD buf[5];
  uint64_t v16;

  v16 = *MEMORY[0x24BDAC8D0];
  if (!a2)
  {
    if (CoreRELog::onceToken != -1)
      dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
    v9 = (id)CoreRELog::log;
    if (!os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
      goto LABEL_15;
    LODWORD(buf[0]) = 136315138;
    *(_QWORD *)((char *)buf + 4) = "REGeomMeshAddVertexAttributeUInt16";
    v10 = "%s - attempt to add an attribute with no name.";
    v11 = v9;
    v12 = 12;
    goto LABEL_22;
  }
  v4 = (char *)a2;
  v6 = (re::GeomAttribute *)re::internal::GeomAttributeManager::attributeByName((re::internal::GeomAttributeManager *)(a1 + 88), a2);
  if (!v6 && (v6 = re::GeomMesh::addAttribute(a1 + 24, v4, 1, 1)) == 0
    || *((_BYTE *)v6 + 17) != 1
    || *((_BYTE *)v6 + 16) != 1)
  {
    if (CoreRELog::onceToken == -1)
    {
LABEL_10:
      v9 = (id)CoreRELog::log;
      if (!os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
      {
LABEL_15:

        return 0;
      }
      LODWORD(buf[0]) = 136315394;
      *(_QWORD *)((char *)buf + 4) = "REGeomMeshAddVertexAttributeUInt16";
      WORD6(buf[0]) = 2080;
      *(_QWORD *)((char *)buf + 14) = v4;
      v10 = "%s - attempt to add a attribute named \"%s\" which conflicts in type/name of an existing attribute of the same name.";
      v11 = v9;
      v12 = 22;
LABEL_22:
      _os_log_error_impl(&dword_224FE9000, v11, OS_LOG_TYPE_ERROR, v10, (uint8_t *)buf, v12);
      goto LABEL_15;
    }
LABEL_24:
    dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
    goto LABEL_10;
  }
  v7 = *(unsigned int *)(a1 + 40);
  if ((*(unsigned int (**)(re::GeomAttribute *))(*(_QWORD *)v6 + 16))(v6))
  {
    v4 = (char *)re::internal::GeomTypedAttribute<short>::operator[]((uint64_t)v6, 0);
    v8 = (*(unsigned int (**)(re::GeomAttribute *))(*(_QWORD *)v6 + 16))(v6);
    if (!(_DWORD)v7)
      return 1;
    goto LABEL_17;
  }
  v8 = 0;
  v4 = 0;
  if ((_DWORD)v7)
  {
LABEL_17:
    v14 = 0;
    while (v8 != v14)
    {
      *(_WORD *)&v4[2 * v14] = *(_WORD *)(a3 + 2 * v14);
      if (v7 == ++v14)
        return 1;
    }
    memset(buf, 0, sizeof(buf));
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
    goto LABEL_24;
  }
  return 1;
}

uint64_t REGeomMeshAddVertexAttributeInt32(uint64_t a1, const char *a2, uint64_t a3)
{
  char *v4;
  re::GeomAttribute *v6;
  uint64_t v7;
  uint64_t v8;
  NSObject *v9;
  const char *v10;
  NSObject *v11;
  uint32_t v12;
  uint64_t v14;
  _OWORD buf[5];
  uint64_t v16;

  v16 = *MEMORY[0x24BDAC8D0];
  if (!a2)
  {
    if (CoreRELog::onceToken != -1)
      dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
    v9 = (id)CoreRELog::log;
    if (!os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
      goto LABEL_15;
    LODWORD(buf[0]) = 136315138;
    *(_QWORD *)((char *)buf + 4) = "REGeomMeshAddVertexAttributeInt32";
    v10 = "%s - attempt to add an attribute with no name.";
    v11 = v9;
    v12 = 12;
    goto LABEL_22;
  }
  v4 = (char *)a2;
  v6 = (re::GeomAttribute *)re::internal::GeomAttributeManager::attributeByName((re::internal::GeomAttributeManager *)(a1 + 88), a2);
  if (!v6 && (v6 = re::GeomMesh::addAttribute(a1 + 24, v4, 1, 2)) == 0
    || *((_BYTE *)v6 + 17) != 2
    || *((_BYTE *)v6 + 16) != 1)
  {
    if (CoreRELog::onceToken == -1)
    {
LABEL_10:
      v9 = (id)CoreRELog::log;
      if (!os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
      {
LABEL_15:

        return 0;
      }
      LODWORD(buf[0]) = 136315394;
      *(_QWORD *)((char *)buf + 4) = "REGeomMeshAddVertexAttributeInt32";
      WORD6(buf[0]) = 2080;
      *(_QWORD *)((char *)buf + 14) = v4;
      v10 = "%s - attempt to add a attribute named \"%s\" which conflicts in type/name of an existing attribute of the same name.";
      v11 = v9;
      v12 = 22;
LABEL_22:
      _os_log_error_impl(&dword_224FE9000, v11, OS_LOG_TYPE_ERROR, v10, (uint8_t *)buf, v12);
      goto LABEL_15;
    }
LABEL_24:
    dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
    goto LABEL_10;
  }
  v7 = *(unsigned int *)(a1 + 40);
  if ((*(unsigned int (**)(re::GeomAttribute *))(*(_QWORD *)v6 + 16))(v6))
  {
    v4 = (char *)re::internal::GeomTypedAttribute<float>::operator[]((uint64_t)v6, 0);
    v8 = (*(unsigned int (**)(re::GeomAttribute *))(*(_QWORD *)v6 + 16))(v6);
    if (!(_DWORD)v7)
      return 1;
    goto LABEL_17;
  }
  v8 = 0;
  v4 = 0;
  if ((_DWORD)v7)
  {
LABEL_17:
    v14 = 0;
    while (v8 != v14)
    {
      *(_DWORD *)&v4[4 * v14] = *(_DWORD *)(a3 + 4 * v14);
      if (v7 == ++v14)
        return 1;
    }
    memset(buf, 0, sizeof(buf));
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
    goto LABEL_24;
  }
  return 1;
}

uint64_t REGeomMeshAddVertexAttributeUInt32(uint64_t a1, const char *a2, uint64_t a3)
{
  char *v4;
  re::GeomAttribute *v6;
  uint64_t v7;
  uint64_t v8;
  NSObject *v9;
  const char *v10;
  NSObject *v11;
  uint32_t v12;
  uint64_t v14;
  _OWORD buf[5];
  uint64_t v16;

  v16 = *MEMORY[0x24BDAC8D0];
  if (!a2)
  {
    if (CoreRELog::onceToken != -1)
      dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
    v9 = (id)CoreRELog::log;
    if (!os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
      goto LABEL_15;
    LODWORD(buf[0]) = 136315138;
    *(_QWORD *)((char *)buf + 4) = "REGeomMeshAddVertexAttributeUInt32";
    v10 = "%s - attempt to add an attribute with no name.";
    v11 = v9;
    v12 = 12;
    goto LABEL_22;
  }
  v4 = (char *)a2;
  v6 = (re::GeomAttribute *)re::internal::GeomAttributeManager::attributeByName((re::internal::GeomAttributeManager *)(a1 + 88), a2);
  if (!v6 && (v6 = re::GeomMesh::addAttribute(a1 + 24, v4, 1, 3)) == 0
    || *((_BYTE *)v6 + 17) != 3
    || *((_BYTE *)v6 + 16) != 1)
  {
    if (CoreRELog::onceToken == -1)
    {
LABEL_10:
      v9 = (id)CoreRELog::log;
      if (!os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
      {
LABEL_15:

        return 0;
      }
      LODWORD(buf[0]) = 136315394;
      *(_QWORD *)((char *)buf + 4) = "REGeomMeshAddVertexAttributeUInt32";
      WORD6(buf[0]) = 2080;
      *(_QWORD *)((char *)buf + 14) = v4;
      v10 = "%s - attempt to add a attribute named \"%s\" which conflicts in type/name of an existing attribute of the same name.";
      v11 = v9;
      v12 = 22;
LABEL_22:
      _os_log_error_impl(&dword_224FE9000, v11, OS_LOG_TYPE_ERROR, v10, (uint8_t *)buf, v12);
      goto LABEL_15;
    }
LABEL_24:
    dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
    goto LABEL_10;
  }
  v7 = *(unsigned int *)(a1 + 40);
  if ((*(unsigned int (**)(re::GeomAttribute *))(*(_QWORD *)v6 + 16))(v6))
  {
    v4 = (char *)re::internal::GeomTypedAttribute<float>::operator[]((uint64_t)v6, 0);
    v8 = (*(unsigned int (**)(re::GeomAttribute *))(*(_QWORD *)v6 + 16))(v6);
    if (!(_DWORD)v7)
      return 1;
    goto LABEL_17;
  }
  v8 = 0;
  v4 = 0;
  if ((_DWORD)v7)
  {
LABEL_17:
    v14 = 0;
    while (v8 != v14)
    {
      *(_DWORD *)&v4[4 * v14] = *(_DWORD *)(a3 + 4 * v14);
      if (v7 == ++v14)
        return 1;
    }
    memset(buf, 0, sizeof(buf));
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
    goto LABEL_24;
  }
  return 1;
}

uint64_t REGeomMeshAddVertexAttributeFloat(uint64_t a1, const char *a2, uint64_t a3)
{
  char *v4;
  re::GeomAttribute *v6;
  uint64_t v7;
  uint64_t v8;
  NSObject *v9;
  const char *v10;
  NSObject *v11;
  uint32_t v12;
  uint64_t v14;
  _OWORD buf[5];
  uint64_t v16;

  v16 = *MEMORY[0x24BDAC8D0];
  if (!a2)
  {
    if (CoreRELog::onceToken != -1)
      dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
    v9 = (id)CoreRELog::log;
    if (!os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
      goto LABEL_15;
    LODWORD(buf[0]) = 136315138;
    *(_QWORD *)((char *)buf + 4) = "REGeomMeshAddVertexAttributeFloat";
    v10 = "%s - attempt to add an attribute with no name.";
    v11 = v9;
    v12 = 12;
    goto LABEL_22;
  }
  v4 = (char *)a2;
  v6 = (re::GeomAttribute *)re::internal::GeomAttributeManager::attributeByName((re::internal::GeomAttributeManager *)(a1 + 88), a2);
  if (!v6 && (v6 = re::GeomMesh::addAttribute(a1 + 24, v4, 1, 4)) == 0
    || *((_BYTE *)v6 + 17) != 4
    || *((_BYTE *)v6 + 16) != 1)
  {
    if (CoreRELog::onceToken == -1)
    {
LABEL_10:
      v9 = (id)CoreRELog::log;
      if (!os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
      {
LABEL_15:

        return 0;
      }
      LODWORD(buf[0]) = 136315394;
      *(_QWORD *)((char *)buf + 4) = "REGeomMeshAddVertexAttributeFloat";
      WORD6(buf[0]) = 2080;
      *(_QWORD *)((char *)buf + 14) = v4;
      v10 = "%s - attempt to add a attribute named \"%s\" which conflicts in type/name of an existing attribute of the same name.";
      v11 = v9;
      v12 = 22;
LABEL_22:
      _os_log_error_impl(&dword_224FE9000, v11, OS_LOG_TYPE_ERROR, v10, (uint8_t *)buf, v12);
      goto LABEL_15;
    }
LABEL_24:
    dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
    goto LABEL_10;
  }
  v7 = *(unsigned int *)(a1 + 40);
  if ((*(unsigned int (**)(re::GeomAttribute *))(*(_QWORD *)v6 + 16))(v6))
  {
    v4 = (char *)re::internal::GeomTypedAttribute<float>::operator[]((uint64_t)v6, 0);
    v8 = (*(unsigned int (**)(re::GeomAttribute *))(*(_QWORD *)v6 + 16))(v6);
    if (!(_DWORD)v7)
      return 1;
    goto LABEL_17;
  }
  v8 = 0;
  v4 = 0;
  if ((_DWORD)v7)
  {
LABEL_17:
    v14 = 0;
    while (v8 != v14)
    {
      *(_DWORD *)&v4[4 * v14] = *(_DWORD *)(a3 + 4 * v14);
      if (v7 == ++v14)
        return 1;
    }
    memset(buf, 0, sizeof(buf));
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
    goto LABEL_24;
  }
  return 1;
}

uint64_t REGeomMeshAddVertexAttributeDouble(uint64_t a1, const char *a2, uint64_t a3)
{
  char *v4;
  re::GeomAttribute *v6;
  uint64_t v7;
  uint64_t v8;
  NSObject *v9;
  const char *v10;
  NSObject *v11;
  uint32_t v12;
  uint64_t v14;
  _OWORD buf[5];
  uint64_t v16;

  v16 = *MEMORY[0x24BDAC8D0];
  if (!a2)
  {
    if (CoreRELog::onceToken != -1)
      dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
    v9 = (id)CoreRELog::log;
    if (!os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
      goto LABEL_15;
    LODWORD(buf[0]) = 136315138;
    *(_QWORD *)((char *)buf + 4) = "REGeomMeshAddVertexAttributeDouble";
    v10 = "%s - attempt to add an attribute with no name.";
    v11 = v9;
    v12 = 12;
    goto LABEL_22;
  }
  v4 = (char *)a2;
  v6 = (re::GeomAttribute *)re::internal::GeomAttributeManager::attributeByName((re::internal::GeomAttributeManager *)(a1 + 88), a2);
  if (!v6 && (v6 = re::GeomMesh::addAttribute(a1 + 24, v4, 1, 5)) == 0
    || *((_BYTE *)v6 + 17) != 5
    || *((_BYTE *)v6 + 16) != 1)
  {
    if (CoreRELog::onceToken == -1)
    {
LABEL_10:
      v9 = (id)CoreRELog::log;
      if (!os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
      {
LABEL_15:

        return 0;
      }
      LODWORD(buf[0]) = 136315394;
      *(_QWORD *)((char *)buf + 4) = "REGeomMeshAddVertexAttributeDouble";
      WORD6(buf[0]) = 2080;
      *(_QWORD *)((char *)buf + 14) = v4;
      v10 = "%s - attempt to add a attribute named \"%s\" which conflicts in type/name of an existing attribute of the same name.";
      v11 = v9;
      v12 = 22;
LABEL_22:
      _os_log_error_impl(&dword_224FE9000, v11, OS_LOG_TYPE_ERROR, v10, (uint8_t *)buf, v12);
      goto LABEL_15;
    }
LABEL_24:
    dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
    goto LABEL_10;
  }
  v7 = *(unsigned int *)(a1 + 40);
  if ((*(unsigned int (**)(re::GeomAttribute *))(*(_QWORD *)v6 + 16))(v6))
  {
    v4 = (char *)re::internal::GeomTypedAttribute<double>::operator[]((uint64_t)v6, 0);
    v8 = (*(unsigned int (**)(re::GeomAttribute *))(*(_QWORD *)v6 + 16))(v6);
    if (!(_DWORD)v7)
      return 1;
    goto LABEL_17;
  }
  v8 = 0;
  v4 = 0;
  if ((_DWORD)v7)
  {
LABEL_17:
    v14 = 0;
    while (v8 != v14)
    {
      *(_QWORD *)&v4[8 * v14] = *(_QWORD *)(a3 + 8 * v14);
      if (v7 == ++v14)
        return 1;
    }
    memset(buf, 0, sizeof(buf));
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
    goto LABEL_24;
  }
  return 1;
}

uint64_t REGeomMeshAddVertexAttributeVector2F(uint64_t a1, const char *a2, uint64_t a3)
{
  char *v4;
  re::GeomAttribute *v6;
  uint64_t v7;
  uint64_t v8;
  NSObject *v9;
  const char *v10;
  NSObject *v11;
  uint32_t v12;
  uint64_t v14;
  _OWORD buf[5];
  uint64_t v16;

  v16 = *MEMORY[0x24BDAC8D0];
  if (!a2)
  {
    if (CoreRELog::onceToken != -1)
      dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
    v9 = (id)CoreRELog::log;
    if (!os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
      goto LABEL_15;
    LODWORD(buf[0]) = 136315138;
    *(_QWORD *)((char *)buf + 4) = "REGeomMeshAddVertexAttributeVector2F";
    v10 = "%s - attempt to add an attribute with no name.";
    v11 = v9;
    v12 = 12;
    goto LABEL_22;
  }
  v4 = (char *)a2;
  v6 = (re::GeomAttribute *)re::internal::GeomAttributeManager::attributeByName((re::internal::GeomAttributeManager *)(a1 + 88), a2);
  if (!v6 && (v6 = re::GeomMesh::addAttribute(a1 + 24, v4, 1, 6)) == 0
    || *((_BYTE *)v6 + 17) != 6
    || *((_BYTE *)v6 + 16) != 1)
  {
    if (CoreRELog::onceToken == -1)
    {
LABEL_10:
      v9 = (id)CoreRELog::log;
      if (!os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
      {
LABEL_15:

        return 0;
      }
      LODWORD(buf[0]) = 136315394;
      *(_QWORD *)((char *)buf + 4) = "REGeomMeshAddVertexAttributeVector2F";
      WORD6(buf[0]) = 2080;
      *(_QWORD *)((char *)buf + 14) = v4;
      v10 = "%s - attempt to add a attribute named \"%s\" which conflicts in type/name of an existing attribute of the same name.";
      v11 = v9;
      v12 = 22;
LABEL_22:
      _os_log_error_impl(&dword_224FE9000, v11, OS_LOG_TYPE_ERROR, v10, (uint8_t *)buf, v12);
      goto LABEL_15;
    }
LABEL_24:
    dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
    goto LABEL_10;
  }
  v7 = *(unsigned int *)(a1 + 40);
  if ((*(unsigned int (**)(re::GeomAttribute *))(*(_QWORD *)v6 + 16))(v6))
  {
    v4 = (char *)re::internal::GeomTypedAttribute<double>::operator[]((uint64_t)v6, 0);
    v8 = (*(unsigned int (**)(re::GeomAttribute *))(*(_QWORD *)v6 + 16))(v6);
    if (!(_DWORD)v7)
      return 1;
    goto LABEL_17;
  }
  v8 = 0;
  v4 = 0;
  if ((_DWORD)v7)
  {
LABEL_17:
    v14 = 0;
    while (v8 != v14)
    {
      *(_QWORD *)&v4[8 * v14] = *(_QWORD *)(a3 + 8 * v14);
      if (v7 == ++v14)
        return 1;
    }
    memset(buf, 0, sizeof(buf));
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
    goto LABEL_24;
  }
  return 1;
}

uint64_t REGeomMeshAddVertexAttributeVector3F(uint64_t a1, const char *a2, __int128 *a3)
{
  char *v4;
  re::GeomAttribute *v6;
  uint64_t v7;
  uint64_t v8;
  NSObject *v9;
  const char *v10;
  NSObject *v11;
  uint32_t v12;
  uint64_t v14;
  __int128 v15;
  _OWORD buf[5];
  uint64_t v17;

  v17 = *MEMORY[0x24BDAC8D0];
  if (!a2)
  {
    if (CoreRELog::onceToken != -1)
      dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
    v9 = (id)CoreRELog::log;
    if (!os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
      goto LABEL_15;
    LODWORD(buf[0]) = 136315138;
    *(_QWORD *)((char *)buf + 4) = "REGeomMeshAddVertexAttributeVector3F";
    v10 = "%s - attempt to add an attribute with no name.";
    v11 = v9;
    v12 = 12;
    goto LABEL_22;
  }
  v4 = (char *)a2;
  v6 = (re::GeomAttribute *)re::internal::GeomAttributeManager::attributeByName((re::internal::GeomAttributeManager *)(a1 + 88), a2);
  if (!v6 && (v6 = re::GeomMesh::addAttribute(a1 + 24, v4, 1, 7)) == 0
    || *((_BYTE *)v6 + 17) != 7
    || *((_BYTE *)v6 + 16) != 1)
  {
    if (CoreRELog::onceToken == -1)
    {
LABEL_10:
      v9 = (id)CoreRELog::log;
      if (!os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
      {
LABEL_15:

        return 0;
      }
      LODWORD(buf[0]) = 136315394;
      *(_QWORD *)((char *)buf + 4) = "REGeomMeshAddVertexAttributeVector3F";
      WORD6(buf[0]) = 2080;
      *(_QWORD *)((char *)buf + 14) = v4;
      v10 = "%s - attempt to add a attribute named \"%s\" which conflicts in type/name of an existing attribute of the same name.";
      v11 = v9;
      v12 = 22;
LABEL_22:
      _os_log_error_impl(&dword_224FE9000, v11, OS_LOG_TYPE_ERROR, v10, (uint8_t *)buf, v12);
      goto LABEL_15;
    }
LABEL_24:
    dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
    goto LABEL_10;
  }
  v7 = *(unsigned int *)(a1 + 40);
  if ((*(unsigned int (**)(re::GeomAttribute *))(*(_QWORD *)v6 + 16))(v6))
  {
    v4 = (char *)re::internal::GeomTypedAttribute<re::Vector3<float>>::operator[]((uint64_t)v6, 0);
    v8 = (*(unsigned int (**)(re::GeomAttribute *))(*(_QWORD *)v6 + 16))(v6);
    if (!(_DWORD)v7)
      return 1;
    goto LABEL_17;
  }
  v8 = 0;
  v4 = 0;
  if ((_DWORD)v7)
  {
LABEL_17:
    v14 = 0;
    while (v8 != v14)
    {
      v15 = *a3++;
      *(_OWORD *)v4 = v15;
      v4 += 16;
      if (v7 == ++v14)
        return 1;
    }
    memset(buf, 0, sizeof(buf));
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
    goto LABEL_24;
  }
  return 1;
}

uint64_t REGeomMeshAddVertexAttributeVector4F(uint64_t a1, const char *a2, __int128 *a3)
{
  char *v4;
  re::GeomAttribute *v6;
  uint64_t v7;
  uint64_t v8;
  NSObject *v9;
  const char *v10;
  NSObject *v11;
  uint32_t v12;
  uint64_t v14;
  __int128 v15;
  _OWORD buf[5];
  uint64_t v17;

  v17 = *MEMORY[0x24BDAC8D0];
  if (!a2)
  {
    if (CoreRELog::onceToken != -1)
      dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
    v9 = (id)CoreRELog::log;
    if (!os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
      goto LABEL_15;
    LODWORD(buf[0]) = 136315138;
    *(_QWORD *)((char *)buf + 4) = "REGeomMeshAddVertexAttributeVector4F";
    v10 = "%s - attempt to add an attribute with no name.";
    v11 = v9;
    v12 = 12;
    goto LABEL_22;
  }
  v4 = (char *)a2;
  v6 = (re::GeomAttribute *)re::internal::GeomAttributeManager::attributeByName((re::internal::GeomAttributeManager *)(a1 + 88), a2);
  if (!v6 && (v6 = re::GeomMesh::addAttribute(a1 + 24, v4, 1, 8)) == 0
    || *((_BYTE *)v6 + 17) != 8
    || *((_BYTE *)v6 + 16) != 1)
  {
    if (CoreRELog::onceToken == -1)
    {
LABEL_10:
      v9 = (id)CoreRELog::log;
      if (!os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
      {
LABEL_15:

        return 0;
      }
      LODWORD(buf[0]) = 136315394;
      *(_QWORD *)((char *)buf + 4) = "REGeomMeshAddVertexAttributeVector4F";
      WORD6(buf[0]) = 2080;
      *(_QWORD *)((char *)buf + 14) = v4;
      v10 = "%s - attempt to add a attribute named \"%s\" which conflicts in type/name of an existing attribute of the same name.";
      v11 = v9;
      v12 = 22;
LABEL_22:
      _os_log_error_impl(&dword_224FE9000, v11, OS_LOG_TYPE_ERROR, v10, (uint8_t *)buf, v12);
      goto LABEL_15;
    }
LABEL_24:
    dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
    goto LABEL_10;
  }
  v7 = *(unsigned int *)(a1 + 40);
  if ((*(unsigned int (**)(re::GeomAttribute *))(*(_QWORD *)v6 + 16))(v6))
  {
    v4 = (char *)re::internal::GeomTypedAttribute<re::Vector3<float>>::operator[]((uint64_t)v6, 0);
    v8 = (*(unsigned int (**)(re::GeomAttribute *))(*(_QWORD *)v6 + 16))(v6);
    if (!(_DWORD)v7)
      return 1;
    goto LABEL_17;
  }
  v8 = 0;
  v4 = 0;
  if ((_DWORD)v7)
  {
LABEL_17:
    v14 = 0;
    while (v8 != v14)
    {
      v15 = *a3++;
      *(_OWORD *)v4 = v15;
      v4 += 16;
      if (v7 == ++v14)
        return 1;
    }
    memset(buf, 0, sizeof(buf));
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
    goto LABEL_24;
  }
  return 1;
}

uint64_t REGeomMeshGetAttributeValuesInt16(uint64_t a1, unsigned int a2, uint64_t a3)
{
  _BYTE *v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  uint64_t i;

  if (*(_DWORD *)(a1 + 664) <= a2)
    return 0;
  v4 = (_BYTE *)re::internal::GeomAttributeManager::attributeByIndex((re::internal::GeomAttributeManager *)(a1 + 88), a2);
  if (v4[17])
    return 0;
  v6 = (uint64_t)v4;
  if ((*(unsigned int (**)(_BYTE *))(*(_QWORD *)v4 + 16))(v4))
  {
    v7 = re::internal::GeomTypedAttribute<short>::operator[](v6, 0);
    v8 = (*(unsigned int (**)(uint64_t))(*(_QWORD *)v6 + 16))(v6);
  }
  else
  {
    v8 = 0;
    v7 = 0;
  }
  v9 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v6 + 16))(v6);
  if (v9)
  {
    for (i = 0; i != v9; ++i)
    {
      if (v8 == i)
      {
        os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
      }
      *(_WORD *)(a3 + 2 * i) = *(_WORD *)(v7 + 2 * i);
    }
  }
  return 1;
}

uint64_t REGeomMeshGetAttributeValuesUInt16(uint64_t a1, unsigned int a2, uint64_t a3)
{
  _BYTE *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int v9;
  uint64_t i;

  if (*(_DWORD *)(a1 + 664) <= a2)
    return 0;
  v4 = (_BYTE *)re::internal::GeomAttributeManager::attributeByIndex((re::internal::GeomAttributeManager *)(a1 + 88), a2);
  if (v4[17] != 1)
    return 0;
  v5 = (uint64_t)v4;
  if ((*(unsigned int (**)(_BYTE *))(*(_QWORD *)v4 + 16))(v4))
  {
    v6 = re::internal::GeomTypedAttribute<short>::operator[](v5, 0);
    v7 = (*(unsigned int (**)(uint64_t))(*(_QWORD *)v5 + 16))(v5);
  }
  else
  {
    v7 = 0;
    v6 = 0;
  }
  v9 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 16))(v5);
  if (v9)
  {
    for (i = 0; i != v9; ++i)
    {
      if (v7 == i)
      {
        os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
      }
      *(_WORD *)(a3 + 2 * i) = *(_WORD *)(v6 + 2 * i);
    }
  }
  return 1;
}

uint64_t REGeomMeshGetAttributeValuesInt32(uint64_t a1, unsigned int a2, uint64_t a3)
{
  _BYTE *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int v9;
  uint64_t i;

  if (*(_DWORD *)(a1 + 664) <= a2)
    return 0;
  v4 = (_BYTE *)re::internal::GeomAttributeManager::attributeByIndex((re::internal::GeomAttributeManager *)(a1 + 88), a2);
  if (v4[17] != 2)
    return 0;
  v5 = (uint64_t)v4;
  if ((*(unsigned int (**)(_BYTE *))(*(_QWORD *)v4 + 16))(v4))
  {
    v6 = re::internal::GeomTypedAttribute<int>::operator[](v5, 0);
    v7 = (*(unsigned int (**)(uint64_t))(*(_QWORD *)v5 + 16))(v5);
  }
  else
  {
    v7 = 0;
    v6 = 0;
  }
  v9 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 16))(v5);
  if (v9)
  {
    for (i = 0; i != v9; ++i)
    {
      if (v7 == i)
      {
        os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
      }
      *(_DWORD *)(a3 + 4 * i) = *(_DWORD *)(v6 + 4 * i);
    }
  }
  return 1;
}

uint64_t REGeomMeshGetAttributeValuesUInt32(uint64_t a1, unsigned int a2, uint64_t a3)
{
  _BYTE *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int v9;
  uint64_t i;

  if (*(_DWORD *)(a1 + 664) <= a2)
    return 0;
  v4 = (_BYTE *)re::internal::GeomAttributeManager::attributeByIndex((re::internal::GeomAttributeManager *)(a1 + 88), a2);
  if (v4[17] != 3)
    return 0;
  v5 = (uint64_t)v4;
  if ((*(unsigned int (**)(_BYTE *))(*(_QWORD *)v4 + 16))(v4))
  {
    v6 = re::internal::GeomTypedAttribute<int>::operator[](v5, 0);
    v7 = (*(unsigned int (**)(uint64_t))(*(_QWORD *)v5 + 16))(v5);
  }
  else
  {
    v7 = 0;
    v6 = 0;
  }
  v9 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 16))(v5);
  if (v9)
  {
    for (i = 0; i != v9; ++i)
    {
      if (v7 == i)
      {
        os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
      }
      *(_DWORD *)(a3 + 4 * i) = *(_DWORD *)(v6 + 4 * i);
    }
  }
  return 1;
}

uint64_t REGeomMeshGetAttributeValuesFloat(uint64_t a1, unsigned int a2, uint64_t a3)
{
  _BYTE *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int v9;
  uint64_t i;

  if (*(_DWORD *)(a1 + 664) <= a2)
    return 0;
  v4 = (_BYTE *)re::internal::GeomAttributeManager::attributeByIndex((re::internal::GeomAttributeManager *)(a1 + 88), a2);
  if (v4[17] != 4)
    return 0;
  v5 = (uint64_t)v4;
  if ((*(unsigned int (**)(_BYTE *))(*(_QWORD *)v4 + 16))(v4))
  {
    v6 = re::internal::GeomTypedAttribute<int>::operator[](v5, 0);
    v7 = (*(unsigned int (**)(uint64_t))(*(_QWORD *)v5 + 16))(v5);
  }
  else
  {
    v7 = 0;
    v6 = 0;
  }
  v9 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 16))(v5);
  if (v9)
  {
    for (i = 0; i != v9; ++i)
    {
      if (v7 == i)
      {
        os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
      }
      *(_DWORD *)(a3 + 4 * i) = *(_DWORD *)(v6 + 4 * i);
    }
  }
  return 1;
}

uint64_t REGeomMeshGetAttributeValuesDouble(uint64_t a1, unsigned int a2, uint64_t a3)
{
  _BYTE *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int v9;
  uint64_t i;

  if (*(_DWORD *)(a1 + 664) <= a2)
    return 0;
  v4 = (_BYTE *)re::internal::GeomAttributeManager::attributeByIndex((re::internal::GeomAttributeManager *)(a1 + 88), a2);
  if (v4[17] != 5)
    return 0;
  v5 = (uint64_t)v4;
  if ((*(unsigned int (**)(_BYTE *))(*(_QWORD *)v4 + 16))(v4))
  {
    v6 = re::internal::GeomTypedAttribute<double>::operator[](v5, 0);
    v7 = (*(unsigned int (**)(uint64_t))(*(_QWORD *)v5 + 16))(v5);
  }
  else
  {
    v7 = 0;
    v6 = 0;
  }
  v9 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 16))(v5);
  if (v9)
  {
    for (i = 0; i != v9; ++i)
    {
      if (v7 == i)
      {
        os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
      }
      *(_QWORD *)(a3 + 8 * i) = *(_QWORD *)(v6 + 8 * i);
    }
  }
  return 1;
}

uint64_t REGeomMeshGetAttributeValuesVector2F(uint64_t a1, unsigned int a2, uint64_t a3)
{
  _BYTE *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int v9;
  uint64_t i;

  if (*(_DWORD *)(a1 + 664) <= a2)
    return 0;
  v4 = (_BYTE *)re::internal::GeomAttributeManager::attributeByIndex((re::internal::GeomAttributeManager *)(a1 + 88), a2);
  if (v4[17] != 6)
    return 0;
  v5 = (uint64_t)v4;
  if ((*(unsigned int (**)(_BYTE *))(*(_QWORD *)v4 + 16))(v4))
  {
    v6 = re::internal::GeomTypedAttribute<double>::operator[](v5, 0);
    v7 = (*(unsigned int (**)(uint64_t))(*(_QWORD *)v5 + 16))(v5);
  }
  else
  {
    v7 = 0;
    v6 = 0;
  }
  v9 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 16))(v5);
  if (v9)
  {
    for (i = 0; i != v9; ++i)
    {
      if (v7 == i)
      {
        os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
      }
      *(_QWORD *)(a3 + 8 * i) = *(_QWORD *)(v6 + 8 * i);
    }
  }
  return 1;
}

uint64_t REGeomMeshGetAttributeValuesVector3F(uint64_t a1, unsigned int a2, uint64_t a3)
{
  _BYTE *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int v9;
  uint64_t i;

  if (*(_DWORD *)(a1 + 664) <= a2)
    return 0;
  v4 = (_BYTE *)re::internal::GeomAttributeManager::attributeByIndex((re::internal::GeomAttributeManager *)(a1 + 88), a2);
  if (v4[17] != 7)
    return 0;
  v5 = (uint64_t)v4;
  if ((*(unsigned int (**)(_BYTE *))(*(_QWORD *)v4 + 16))(v4))
  {
    v6 = re::internal::GeomTypedAttribute<re::Vector3<float>>::operator[](v5, 0);
    v7 = (*(unsigned int (**)(uint64_t))(*(_QWORD *)v5 + 16))(v5);
  }
  else
  {
    v7 = 0;
    v6 = 0;
  }
  v9 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 16))(v5);
  if (v9)
  {
    for (i = 0; i != v9; ++i)
    {
      if (v7 == i)
      {
        os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
      }
      *(_OWORD *)(a3 + 16 * i) = *(_OWORD *)(v6 + 16 * i);
    }
  }
  return 1;
}

uint64_t REGeomMeshGetAttributeValuesVector4F(uint64_t a1, unsigned int a2, uint64_t a3)
{
  _BYTE *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int v9;
  uint64_t i;

  if (*(_DWORD *)(a1 + 664) <= a2)
    return 0;
  v4 = (_BYTE *)re::internal::GeomAttributeManager::attributeByIndex((re::internal::GeomAttributeManager *)(a1 + 88), a2);
  if (v4[17] != 8)
    return 0;
  v5 = (uint64_t)v4;
  if ((*(unsigned int (**)(_BYTE *))(*(_QWORD *)v4 + 16))(v4))
  {
    v6 = re::internal::GeomTypedAttribute<re::Vector3<float>>::operator[](v5, 0);
    v7 = (*(unsigned int (**)(uint64_t))(*(_QWORD *)v5 + 16))(v5);
  }
  else
  {
    v7 = 0;
    v6 = 0;
  }
  v9 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 16))(v5);
  if (v9)
  {
    for (i = 0; i != v9; ++i)
    {
      if (v7 == i)
      {
        os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
      }
      *(_OWORD *)(a3 + 16 * i) = *(_OWORD *)(v6 + 16 * i);
    }
  }
  return 1;
}

uint64_t REGeomMeshGetAttributeValueInt16(uint64_t a1, unsigned int a2, unsigned int a3, _WORD *a4)
{
  _BYTE *v6;
  uint64_t v7;
  uint64_t v8;

  if (*(_DWORD *)(a1 + 664) <= a2)
    return 0;
  v6 = (_BYTE *)re::internal::GeomAttributeManager::attributeByIndex((re::internal::GeomAttributeManager *)(a1 + 88), a2);
  if (v6[17])
    return 0;
  v7 = (uint64_t)v6;
  if ((*(unsigned int (**)(_BYTE *))(*(_QWORD *)v6 + 16))(v6) <= a3)
    return 0;
  if (!(*(unsigned int (**)(uint64_t))(*(_QWORD *)v7 + 16))(v7)
    || (v8 = re::internal::GeomTypedAttribute<short>::operator[](v7, 0),
        (*(unsigned int (**)(uint64_t))(*(_QWORD *)v7 + 16))(v7) <= a3))
  {
    while (1)
    {
      os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
    }
  }
  *a4 = *(_WORD *)(v8 + 2 * a3);
  return 1;
}

uint64_t REGeomMeshGetAttributeValueUInt16(uint64_t a1, unsigned int a2, unsigned int a3, _WORD *a4)
{
  _BYTE *v6;
  uint64_t v7;
  uint64_t v8;

  if (*(_DWORD *)(a1 + 664) <= a2)
    return 0;
  v6 = (_BYTE *)re::internal::GeomAttributeManager::attributeByIndex((re::internal::GeomAttributeManager *)(a1 + 88), a2);
  if (v6[17] != 1)
    return 0;
  v7 = (uint64_t)v6;
  if ((*(unsigned int (**)(_BYTE *))(*(_QWORD *)v6 + 16))(v6) <= a3)
    return 0;
  if (!(*(unsigned int (**)(uint64_t))(*(_QWORD *)v7 + 16))(v7)
    || (v8 = re::internal::GeomTypedAttribute<short>::operator[](v7, 0),
        (*(unsigned int (**)(uint64_t))(*(_QWORD *)v7 + 16))(v7) <= a3))
  {
    while (1)
    {
      os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
    }
  }
  *a4 = *(_WORD *)(v8 + 2 * a3);
  return 1;
}

uint64_t REGeomMeshGetAttributeValueInt32(uint64_t a1, unsigned int a2, unsigned int a3, _DWORD *a4)
{
  _BYTE *v6;
  uint64_t v7;
  uint64_t v8;

  if (*(_DWORD *)(a1 + 664) <= a2)
    return 0;
  v6 = (_BYTE *)re::internal::GeomAttributeManager::attributeByIndex((re::internal::GeomAttributeManager *)(a1 + 88), a2);
  if (v6[17] != 2)
    return 0;
  v7 = (uint64_t)v6;
  if ((*(unsigned int (**)(_BYTE *))(*(_QWORD *)v6 + 16))(v6) <= a3)
    return 0;
  if (!(*(unsigned int (**)(uint64_t))(*(_QWORD *)v7 + 16))(v7)
    || (v8 = re::internal::GeomTypedAttribute<int>::operator[](v7, 0),
        (*(unsigned int (**)(uint64_t))(*(_QWORD *)v7 + 16))(v7) <= a3))
  {
    while (1)
    {
      os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
    }
  }
  *a4 = *(_DWORD *)(v8 + 4 * a3);
  return 1;
}

uint64_t REGeomMeshGetAttributeValueUInt32(uint64_t a1, unsigned int a2, unsigned int a3, _DWORD *a4)
{
  _BYTE *v6;
  uint64_t v7;
  uint64_t v8;

  if (*(_DWORD *)(a1 + 664) <= a2)
    return 0;
  v6 = (_BYTE *)re::internal::GeomAttributeManager::attributeByIndex((re::internal::GeomAttributeManager *)(a1 + 88), a2);
  if (v6[17] != 3)
    return 0;
  v7 = (uint64_t)v6;
  if ((*(unsigned int (**)(_BYTE *))(*(_QWORD *)v6 + 16))(v6) <= a3)
    return 0;
  if (!(*(unsigned int (**)(uint64_t))(*(_QWORD *)v7 + 16))(v7)
    || (v8 = re::internal::GeomTypedAttribute<int>::operator[](v7, 0),
        (*(unsigned int (**)(uint64_t))(*(_QWORD *)v7 + 16))(v7) <= a3))
  {
    while (1)
    {
      os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
    }
  }
  *a4 = *(_DWORD *)(v8 + 4 * a3);
  return 1;
}

uint64_t REGeomMeshGetAttributeValueFloat(uint64_t a1, unsigned int a2, unsigned int a3, _DWORD *a4)
{
  _BYTE *v6;
  uint64_t v7;
  uint64_t v8;

  if (*(_DWORD *)(a1 + 664) <= a2)
    return 0;
  v6 = (_BYTE *)re::internal::GeomAttributeManager::attributeByIndex((re::internal::GeomAttributeManager *)(a1 + 88), a2);
  if (v6[17] != 4)
    return 0;
  v7 = (uint64_t)v6;
  if ((*(unsigned int (**)(_BYTE *))(*(_QWORD *)v6 + 16))(v6) <= a3)
    return 0;
  if (!(*(unsigned int (**)(uint64_t))(*(_QWORD *)v7 + 16))(v7)
    || (v8 = re::internal::GeomTypedAttribute<int>::operator[](v7, 0),
        (*(unsigned int (**)(uint64_t))(*(_QWORD *)v7 + 16))(v7) <= a3))
  {
    while (1)
    {
      os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
    }
  }
  *a4 = *(_DWORD *)(v8 + 4 * a3);
  return 1;
}

uint64_t REGeomMeshGetAttributeValueDouble(uint64_t a1, unsigned int a2, unsigned int a3, _QWORD *a4)
{
  _BYTE *v6;
  uint64_t v7;
  uint64_t v8;

  if (*(_DWORD *)(a1 + 664) <= a2)
    return 0;
  v6 = (_BYTE *)re::internal::GeomAttributeManager::attributeByIndex((re::internal::GeomAttributeManager *)(a1 + 88), a2);
  if (v6[17] != 5)
    return 0;
  v7 = (uint64_t)v6;
  if ((*(unsigned int (**)(_BYTE *))(*(_QWORD *)v6 + 16))(v6) <= a3)
    return 0;
  if (!(*(unsigned int (**)(uint64_t))(*(_QWORD *)v7 + 16))(v7)
    || (v8 = re::internal::GeomTypedAttribute<double>::operator[](v7, 0),
        (*(unsigned int (**)(uint64_t))(*(_QWORD *)v7 + 16))(v7) <= a3))
  {
    while (1)
    {
      os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
    }
  }
  *a4 = *(_QWORD *)(v8 + 8 * a3);
  return 1;
}

uint64_t REGeomMeshGetAttributeValueVector2F(uint64_t a1, unsigned int a2, unsigned int a3, _QWORD *a4)
{
  _BYTE *v6;
  uint64_t v7;
  uint64_t v8;

  if (*(_DWORD *)(a1 + 664) <= a2)
    return 0;
  v6 = (_BYTE *)re::internal::GeomAttributeManager::attributeByIndex((re::internal::GeomAttributeManager *)(a1 + 88), a2);
  if (v6[17] != 6)
    return 0;
  v7 = (uint64_t)v6;
  if ((*(unsigned int (**)(_BYTE *))(*(_QWORD *)v6 + 16))(v6) <= a3)
    return 0;
  if (!(*(unsigned int (**)(uint64_t))(*(_QWORD *)v7 + 16))(v7)
    || (v8 = re::internal::GeomTypedAttribute<double>::operator[](v7, 0),
        (*(unsigned int (**)(uint64_t))(*(_QWORD *)v7 + 16))(v7) <= a3))
  {
    while (1)
    {
      os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
    }
  }
  *a4 = *(_QWORD *)(v8 + 8 * a3);
  return 1;
}

uint64_t REGeomMeshGetAttributeValueVector3F(uint64_t a1, unsigned int a2, unsigned int a3, _OWORD *a4)
{
  _BYTE *v6;
  uint64_t v7;
  uint64_t v8;

  if (*(_DWORD *)(a1 + 664) <= a2)
    return 0;
  v6 = (_BYTE *)re::internal::GeomAttributeManager::attributeByIndex((re::internal::GeomAttributeManager *)(a1 + 88), a2);
  if (v6[17] != 7)
    return 0;
  v7 = (uint64_t)v6;
  if ((*(unsigned int (**)(_BYTE *))(*(_QWORD *)v6 + 16))(v6) <= a3)
    return 0;
  if (!(*(unsigned int (**)(uint64_t))(*(_QWORD *)v7 + 16))(v7)
    || (v8 = re::internal::GeomTypedAttribute<re::Vector3<float>>::operator[](v7, 0),
        (*(unsigned int (**)(uint64_t))(*(_QWORD *)v7 + 16))(v7) <= a3))
  {
    while (1)
    {
      os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
    }
  }
  *a4 = *(_OWORD *)(v8 + 16 * a3);
  return 1;
}

uint64_t REGeomMeshGetAttributeValueVector4F(uint64_t a1, unsigned int a2, unsigned int a3, _OWORD *a4)
{
  _BYTE *v6;
  uint64_t v7;
  uint64_t v8;

  if (*(_DWORD *)(a1 + 664) <= a2)
    return 0;
  v6 = (_BYTE *)re::internal::GeomAttributeManager::attributeByIndex((re::internal::GeomAttributeManager *)(a1 + 88), a2);
  if (v6[17] != 8)
    return 0;
  v7 = (uint64_t)v6;
  if ((*(unsigned int (**)(_BYTE *))(*(_QWORD *)v6 + 16))(v6) <= a3)
    return 0;
  if (!(*(unsigned int (**)(uint64_t))(*(_QWORD *)v7 + 16))(v7)
    || (v8 = re::internal::GeomTypedAttribute<re::Vector3<float>>::operator[](v7, 0),
        (*(unsigned int (**)(uint64_t))(*(_QWORD *)v7 + 16))(v7) <= a3))
  {
    while (1)
    {
      os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
    }
  }
  *a4 = *(_OWORD *)(v8 + 16 * a3);
  return 1;
}

BOOL REGeomMeshGetAttributeValuesByIndicesInt16(uint64_t a1, unsigned int a2, unsigned int a3, unsigned int *a4, _WORD *a5)
{
  _BYTE *v8;
  _BOOL8 result;
  uint64_t v10;
  unsigned int v11;
  uint64_t v12;
  unsigned int v13;
  uint64_t v14;
  uint64_t v15;
  unsigned int v16;

  if (*(_DWORD *)(a1 + 664) <= a2)
    return 0;
  v8 = (_BYTE *)re::internal::GeomAttributeManager::attributeByIndex((re::internal::GeomAttributeManager *)(a1 + 88), a2);
  if (v8[17])
    return 0;
  v10 = (uint64_t)v8;
  v11 = (*(uint64_t (**)(_BYTE *))(*(_QWORD *)v8 + 16))(v8);
  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v10 + 16))(v10))
  {
    v12 = re::internal::GeomTypedAttribute<short>::operator[](v10, 0);
    v13 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v10 + 16))(v10);
    if (a3)
      goto LABEL_7;
    return 1;
  }
  v13 = 0;
  v12 = 0;
  if (!a3)
    return 1;
LABEL_7:
  v14 = a3;
  do
  {
    v16 = *a4++;
    v15 = v16;
    result = v16 < v11;
    if (v16 >= v11)
      break;
    if (v13 <= v15)
    {
      os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
    }
    *a5++ = *(_WORD *)(v12 + 2 * v15);
    --v14;
  }
  while (v14);
  return result;
}

BOOL REGeomMeshGetAttributeValuesByIndicesUInt16(uint64_t a1, unsigned int a2, unsigned int a3, unsigned int *a4, _WORD *a5)
{
  _BYTE *v8;
  uint64_t v9;
  unsigned int v10;
  uint64_t v11;
  unsigned int v12;
  uint64_t v13;
  uint64_t v14;
  unsigned int v15;
  _BOOL8 result;

  if (*(_DWORD *)(a1 + 664) <= a2)
    return 0;
  v8 = (_BYTE *)re::internal::GeomAttributeManager::attributeByIndex((re::internal::GeomAttributeManager *)(a1 + 88), a2);
  if (v8[17] != 1)
    return 0;
  v9 = (uint64_t)v8;
  v10 = (*(uint64_t (**)(_BYTE *))(*(_QWORD *)v8 + 16))(v8);
  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v9 + 16))(v9))
  {
    v11 = re::internal::GeomTypedAttribute<short>::operator[](v9, 0);
    v12 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v9 + 16))(v9);
    if (a3)
      goto LABEL_5;
    return 1;
  }
  v12 = 0;
  v11 = 0;
  if (!a3)
    return 1;
LABEL_5:
  v13 = a3;
  do
  {
    v15 = *a4++;
    v14 = v15;
    result = v15 < v10;
    if (v15 >= v10)
      break;
    if (v12 <= v14)
    {
      os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
    }
    *a5++ = *(_WORD *)(v11 + 2 * v14);
    --v13;
  }
  while (v13);
  return result;
}

BOOL REGeomMeshGetAttributeValuesByIndicesInt32(uint64_t a1, unsigned int a2, unsigned int a3, unsigned int *a4, _DWORD *a5)
{
  _BYTE *v8;
  uint64_t v9;
  unsigned int v10;
  uint64_t v11;
  unsigned int v12;
  uint64_t v13;
  uint64_t v14;
  unsigned int v15;
  _BOOL8 result;

  if (*(_DWORD *)(a1 + 664) <= a2)
    return 0;
  v8 = (_BYTE *)re::internal::GeomAttributeManager::attributeByIndex((re::internal::GeomAttributeManager *)(a1 + 88), a2);
  if (v8[17] != 2)
    return 0;
  v9 = (uint64_t)v8;
  v10 = (*(uint64_t (**)(_BYTE *))(*(_QWORD *)v8 + 16))(v8);
  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v9 + 16))(v9))
  {
    v11 = re::internal::GeomTypedAttribute<int>::operator[](v9, 0);
    v12 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v9 + 16))(v9);
    if (a3)
      goto LABEL_5;
    return 1;
  }
  v12 = 0;
  v11 = 0;
  if (!a3)
    return 1;
LABEL_5:
  v13 = a3;
  do
  {
    v15 = *a4++;
    v14 = v15;
    result = v15 < v10;
    if (v15 >= v10)
      break;
    if (v12 <= v14)
    {
      os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
    }
    *a5++ = *(_DWORD *)(v11 + 4 * v14);
    --v13;
  }
  while (v13);
  return result;
}

BOOL REGeomMeshGetAttributeValuesByIndicesUInt32(uint64_t a1, unsigned int a2, unsigned int a3, unsigned int *a4, _DWORD *a5)
{
  _BYTE *v8;
  uint64_t v9;
  unsigned int v10;
  uint64_t v11;
  unsigned int v12;
  uint64_t v13;
  uint64_t v14;
  unsigned int v15;
  _BOOL8 result;

  if (*(_DWORD *)(a1 + 664) <= a2)
    return 0;
  v8 = (_BYTE *)re::internal::GeomAttributeManager::attributeByIndex((re::internal::GeomAttributeManager *)(a1 + 88), a2);
  if (v8[17] != 3)
    return 0;
  v9 = (uint64_t)v8;
  v10 = (*(uint64_t (**)(_BYTE *))(*(_QWORD *)v8 + 16))(v8);
  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v9 + 16))(v9))
  {
    v11 = re::internal::GeomTypedAttribute<int>::operator[](v9, 0);
    v12 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v9 + 16))(v9);
    if (a3)
      goto LABEL_5;
    return 1;
  }
  v12 = 0;
  v11 = 0;
  if (!a3)
    return 1;
LABEL_5:
  v13 = a3;
  do
  {
    v15 = *a4++;
    v14 = v15;
    result = v15 < v10;
    if (v15 >= v10)
      break;
    if (v12 <= v14)
    {
      os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
    }
    *a5++ = *(_DWORD *)(v11 + 4 * v14);
    --v13;
  }
  while (v13);
  return result;
}

BOOL REGeomMeshGetAttributeValuesByIndicesFloat(uint64_t a1, unsigned int a2, unsigned int a3, unsigned int *a4, _DWORD *a5)
{
  _BYTE *v8;
  uint64_t v9;
  unsigned int v10;
  uint64_t v11;
  unsigned int v12;
  uint64_t v13;
  uint64_t v14;
  unsigned int v15;
  _BOOL8 result;

  if (*(_DWORD *)(a1 + 664) <= a2)
    return 0;
  v8 = (_BYTE *)re::internal::GeomAttributeManager::attributeByIndex((re::internal::GeomAttributeManager *)(a1 + 88), a2);
  if (v8[17] != 4)
    return 0;
  v9 = (uint64_t)v8;
  v10 = (*(uint64_t (**)(_BYTE *))(*(_QWORD *)v8 + 16))(v8);
  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v9 + 16))(v9))
  {
    v11 = re::internal::GeomTypedAttribute<int>::operator[](v9, 0);
    v12 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v9 + 16))(v9);
    if (a3)
      goto LABEL_5;
    return 1;
  }
  v12 = 0;
  v11 = 0;
  if (!a3)
    return 1;
LABEL_5:
  v13 = a3;
  do
  {
    v15 = *a4++;
    v14 = v15;
    result = v15 < v10;
    if (v15 >= v10)
      break;
    if (v12 <= v14)
    {
      os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
    }
    *a5++ = *(_DWORD *)(v11 + 4 * v14);
    --v13;
  }
  while (v13);
  return result;
}

BOOL REGeomMeshGetAttributeValuesByIndicesDouble(uint64_t a1, unsigned int a2, unsigned int a3, unsigned int *a4, _QWORD *a5)
{
  _BYTE *v8;
  uint64_t v9;
  unsigned int v10;
  uint64_t v11;
  unsigned int v12;
  uint64_t v13;
  uint64_t v14;
  unsigned int v15;
  _BOOL8 result;

  if (*(_DWORD *)(a1 + 664) <= a2)
    return 0;
  v8 = (_BYTE *)re::internal::GeomAttributeManager::attributeByIndex((re::internal::GeomAttributeManager *)(a1 + 88), a2);
  if (v8[17] != 5)
    return 0;
  v9 = (uint64_t)v8;
  v10 = (*(uint64_t (**)(_BYTE *))(*(_QWORD *)v8 + 16))(v8);
  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v9 + 16))(v9))
  {
    v11 = re::internal::GeomTypedAttribute<double>::operator[](v9, 0);
    v12 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v9 + 16))(v9);
    if (a3)
      goto LABEL_5;
    return 1;
  }
  v12 = 0;
  v11 = 0;
  if (!a3)
    return 1;
LABEL_5:
  v13 = a3;
  do
  {
    v15 = *a4++;
    v14 = v15;
    result = v15 < v10;
    if (v15 >= v10)
      break;
    if (v12 <= v14)
    {
      os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
    }
    *a5++ = *(_QWORD *)(v11 + 8 * v14);
    --v13;
  }
  while (v13);
  return result;
}

BOOL REGeomMeshGetAttributeValuesByIndicesVector2F(uint64_t a1, unsigned int a2, unsigned int a3, unsigned int *a4, _QWORD *a5)
{
  _BYTE *v8;
  uint64_t v9;
  unsigned int v10;
  uint64_t v11;
  unsigned int v12;
  uint64_t v13;
  uint64_t v14;
  unsigned int v15;
  _BOOL8 result;

  if (*(_DWORD *)(a1 + 664) <= a2)
    return 0;
  v8 = (_BYTE *)re::internal::GeomAttributeManager::attributeByIndex((re::internal::GeomAttributeManager *)(a1 + 88), a2);
  if (v8[17] != 6)
    return 0;
  v9 = (uint64_t)v8;
  v10 = (*(uint64_t (**)(_BYTE *))(*(_QWORD *)v8 + 16))(v8);
  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v9 + 16))(v9))
  {
    v11 = re::internal::GeomTypedAttribute<double>::operator[](v9, 0);
    v12 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v9 + 16))(v9);
    if (a3)
      goto LABEL_5;
    return 1;
  }
  v12 = 0;
  v11 = 0;
  if (!a3)
    return 1;
LABEL_5:
  v13 = a3;
  do
  {
    v15 = *a4++;
    v14 = v15;
    result = v15 < v10;
    if (v15 >= v10)
      break;
    if (v12 <= v14)
    {
      os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
    }
    *a5++ = *(_QWORD *)(v11 + 8 * v14);
    --v13;
  }
  while (v13);
  return result;
}

BOOL REGeomMeshGetAttributeValuesByIndicesVector3F(uint64_t a1, unsigned int a2, unsigned int a3, unsigned int *a4, _OWORD *a5)
{
  _BYTE *v8;
  uint64_t v9;
  unsigned int v10;
  uint64_t v11;
  unsigned int v12;
  uint64_t v13;
  uint64_t v14;
  unsigned int v15;
  _BOOL8 result;

  if (*(_DWORD *)(a1 + 664) <= a2)
    return 0;
  v8 = (_BYTE *)re::internal::GeomAttributeManager::attributeByIndex((re::internal::GeomAttributeManager *)(a1 + 88), a2);
  if (v8[17] != 7)
    return 0;
  v9 = (uint64_t)v8;
  v10 = (*(uint64_t (**)(_BYTE *))(*(_QWORD *)v8 + 16))(v8);
  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v9 + 16))(v9))
  {
    v11 = re::internal::GeomTypedAttribute<re::Vector3<float>>::operator[](v9, 0);
    v12 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v9 + 16))(v9);
    if (a3)
      goto LABEL_5;
    return 1;
  }
  v12 = 0;
  v11 = 0;
  if (!a3)
    return 1;
LABEL_5:
  v13 = a3;
  do
  {
    v15 = *a4++;
    v14 = v15;
    result = v15 < v10;
    if (v15 >= v10)
      break;
    if (v12 <= v14)
    {
      os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
    }
    *a5++ = *(_OWORD *)(v11 + 16 * v14);
    --v13;
  }
  while (v13);
  return result;
}

BOOL REGeomMeshGetAttributeValuesByIndicesVector4F(uint64_t a1, unsigned int a2, unsigned int a3, unsigned int *a4, _OWORD *a5)
{
  _BYTE *v8;
  uint64_t v9;
  unsigned int v10;
  uint64_t v11;
  unsigned int v12;
  uint64_t v13;
  uint64_t v14;
  unsigned int v15;
  _BOOL8 result;

  if (*(_DWORD *)(a1 + 664) <= a2)
    return 0;
  v8 = (_BYTE *)re::internal::GeomAttributeManager::attributeByIndex((re::internal::GeomAttributeManager *)(a1 + 88), a2);
  if (v8[17] != 8)
    return 0;
  v9 = (uint64_t)v8;
  v10 = (*(uint64_t (**)(_BYTE *))(*(_QWORD *)v8 + 16))(v8);
  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v9 + 16))(v9))
  {
    v11 = re::internal::GeomTypedAttribute<re::Vector3<float>>::operator[](v9, 0);
    v12 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v9 + 16))(v9);
    if (a3)
      goto LABEL_5;
    return 1;
  }
  v12 = 0;
  v11 = 0;
  if (!a3)
    return 1;
LABEL_5:
  v13 = a3;
  do
  {
    v15 = *a4++;
    v14 = v15;
    result = v15 < v10;
    if (v15 >= v10)
      break;
    if (v12 <= v14)
    {
      os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
    }
    *a5++ = *(_OWORD *)(v11 + 16 * v14);
    --v13;
  }
  while (v13);
  return result;
}

_QWORD *REGeomCompareMeshes(uint64_t a1, uint64_t a2, const re::GeomMesh *a3, float a4)
{
  re *v4;
  uint64_t *v5;
  _QWORD *v6;
  _QWORD *v7;
  re *v8;
  re *v9;
  char *v10;
  uint64_t *v11;
  re::GeomAttribute *v12;
  char *__s;
  _DWORD v15[178];
  _BYTE v16[736];

  re::internal::compareMeshes((re::internal *)(a1 + 24), (const re::GeomMesh *)(a2 + 24), a3, a4, (uint64_t)v16);
  v4 = re::GeomMeshBuilder::GeomMeshBuilder((re *)&__s, (uint64_t)v16);
  v5 = re::globalAllocators(v4);
  v6 = (_QWORD *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v5[2] + 32))(v5[2], 760, 8);
  v7 = re::Shareable<re::GeomMesh>::Shareable<>(v6);
  v8 = (re *)re::GeomMesh::operator=((uint64_t)(v7 + 3), v15);
  v9 = re::GeomMesh::setName(v8, __s);
  v10 = __s;
  if (__s)
  {
    v11 = re::globalAllocators(v9);
    (*(void (**)(uint64_t, char *))(*(_QWORD *)v11[2] + 40))(v11[2], v10);
    __s = 0;
  }
  re::GeomMeshBuilder::~GeomMeshBuilder((re::GeomMeshBuilder *)&__s);
  re::GeomMesh::~GeomMesh((re::GeomMesh *)v16, v12);
  return v6;
}

_QWORD *re::Shareable<re::GeomMesh>::Shareable<>(_QWORD *a1)
{
  ArcSharedObject::ArcSharedObject((ArcSharedObject *)a1, 0);
  *a1 = &off_24ED9CF18;
  re::GeomMesh::GeomMesh((re::GeomMesh *)(a1 + 3), 0);
  return a1;
}

_QWORD *re::Shareable<re::GeomMesh>::~Shareable(_QWORD *a1, re::GeomAttribute *a2)
{
  *a1 = &off_24ED9CF18;
  re::GeomMesh::~GeomMesh((re::GeomMesh *)(a1 + 3), a2);
  *a1 = &off_24ED426B8;
  objc_destructInstance(a1 + 1);
  return a1;
}

void re::Shareable<re::GeomMesh>::~Shareable(_QWORD *a1, re::GeomAttribute *a2)
{
  *a1 = &off_24ED9CF18;
  re::GeomMesh::~GeomMesh((re::GeomMesh *)(a1 + 3), a2);
  *a1 = &off_24ED426B8;
  objc_destructInstance(a1 + 1);
  JUMPOUT(0x2276933B8);
}

void *RESubsceneComponentGetComponentType()
{
  if (re::ecs2::dispatchOnceInitECSComponents(void)::onceToken != -1)
    dispatch_once(&re::ecs2::dispatchOnceInitECSComponents(void)::onceToken, &__block_literal_global_13);
  return re::ecs2::ComponentImpl<re::ecs2::SubsceneComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType;
}

void RESubsceneComponentSetSubscene(uint64_t a1, uint64_t a2)
{
  uint64_t v3[3];

  re::AssetAPIHelper::assetHandleCreate(a2, v3);
  re::ecs2::SubsceneComponent::setSubscene(a1, v3);
  re::AssetHandle::~AssetHandle((re::AssetHandle *)v3);
}

uint64_t RESubsceneComponentIsLoaded(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 25);
}

void RESubsceneComponentLoad(uint64_t a1)
{
  uint64_t v2[3];

  re::AssetHandle::AssetHandle((re::AssetHandle *)v2, (const re::AssetHandle *)(a1 + 32));
  re::ecs2::SubsceneComponent::setSubscene(a1, v2);
  re::AssetHandle::~AssetHandle((re::AssetHandle *)v2);
}

void *RESkyboxComponentGetComponentType()
{
  if (re::ecs2::dispatchOnceInitECSComponents(void)::onceToken != -1)
    dispatch_once(&re::ecs2::dispatchOnceInitECSComponents(void)::onceToken, &__block_literal_global_13);
  return re::ecs2::ComponentImpl<re::ecs2::SkyboxComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType;
}

void RESkyboxComponentSetTexture()
{
  NSObject *v0;
  uint8_t v1[16];

  if (CoreRELog::onceToken != -1)
    dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
  v0 = (id)CoreRELog::log;
  if (os_log_type_enabled(v0, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)v1 = 0;
    _os_log_impl(&dword_224FE9000, v0, OS_LOG_TYPE_DEFAULT, "Please use RESkyboxComponentSetMaterial(). Will be deleted in M9.", v1, 2u);
  }

}

uint64_t RESkyboxComponentGetTexture()
{
  NSObject *v0;
  uint8_t v2[16];

  if (CoreRELog::onceToken != -1)
    dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
  v0 = (id)CoreRELog::log;
  if (os_log_type_enabled(v0, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)v2 = 0;
    _os_log_impl(&dword_224FE9000, v0, OS_LOG_TYPE_DEFAULT, "Please use RESkyboxComponentGetMaterial(). Will be deleted in M9.", v2, 2u);
  }

  return 0;
}

void RESkyboxComponentSetMaterial(uint64_t a1, uint64_t a2)
{
  __int128 v3;
  uint64_t v4;
  __int128 v5;
  uint64_t v6;

  re::AssetAPIHelper::assetHandleCreate(a2, (uint64_t *)&v5);
  v3 = *(_OWORD *)(a1 + 32);
  *(_OWORD *)(a1 + 32) = v5;
  v5 = v3;
  v4 = *(_QWORD *)(a1 + 48);
  *(_QWORD *)(a1 + 48) = v6;
  v6 = v4;
  re::AssetHandle::~AssetHandle((re::AssetHandle *)&v5);
}

uint64_t RESkyboxComponentGetMaterial(uint64_t a1)
{
  return *(_QWORD *)(a1 + 32);
}

uint64_t RESkyboxComponentSetIntensity(uint64_t result, float a2)
{
  *(float *)(result + 28) = a2;
  return result;
}

float RESkyboxComponentGetIntensity(uint64_t a1)
{
  return *(float *)(a1 + 28);
}

void RESkyboxComponentSetMaterialBlockParameter(uint64_t a1, uint64_t a2)
{
  id v4;
  uint64_t v5;

  if (a2)
    v4 = (id)(a2 + 8);
  v5 = *(_QWORD *)(a1 + 56);
  *(_QWORD *)(a1 + 56) = a2;
  if (v5)

}

uint64_t RESkyboxComponentGetMaterialBlockParameter(uint64_t a1)
{
  return *(_QWORD *)(a1 + 56);
}

void *REConstraintListComponentGetComponentType()
{
  if (re::ecs2::dispatchOnceInitECSComponents(void)::onceToken != -1)
    dispatch_once(&re::ecs2::dispatchOnceInitECSComponents(void)::onceToken, &__block_literal_global_13);
  return re::ecs2::ComponentImpl<re::ecs2::ConstraintListComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType;
}

void *REDeferredActivationComponentGetComponentType()
{
  if (re::ecs2::dispatchOnceInitECSComponents(void)::onceToken != -1)
    dispatch_once(&re::ecs2::dispatchOnceInitECSComponents(void)::onceToken, &__block_literal_global_13);
  return re::ecs2::ComponentImpl<re::ecs2::DeferredActivationComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType;
}

void *RECameraMovementComponentGetComponentType()
{
  if (re::ecs2::dispatchOnceInitECSComponents(void)::onceToken != -1)
    dispatch_once(&re::ecs2::dispatchOnceInitECSComponents(void)::onceToken, &__block_literal_global_13);
  return re::ecs2::ComponentImpl<re::ecs2::CameraMovementComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType;
}

uint64_t RECameraMovementComponentSetEnabled(uint64_t result, char a2)
{
  *(_BYTE *)(result + 25) = a2;
  return result;
}

uint64_t RECameraMovementComponentIsEnabled(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 25);
}

uint64_t RECameraMovementComponentSetMode(uint64_t result, int a2)
{
  *(_DWORD *)(result + 28) = a2;
  return result;
}

uint64_t RECameraMovementComponentGetMode(uint64_t a1)
{
  return *(unsigned int *)(a1 + 28);
}

uint64_t RECameraMovementComponentSetMoveSpeedMultiplier(uint64_t result, float a2)
{
  *(float *)(result + 32) = a2;
  return result;
}

float RECameraMovementComponentGetMoveSpeedMultiplier(uint64_t a1)
{
  return *(float *)(a1 + 32);
}

float32x4_t *RECameraMovementComponentLookAt(float32x4_t *a1, __n128 a2, __n128 a3)
{
  return re::ecs2::CameraMovementComponent::lookAt(a1, a2.n128_i64[0], a2.n128_i64[1], a3.n128_i64[0], a3.n128_i64[1]);
}

__CFArray *REAssetManagerGetRegisteredAssetTypeNames(uint64_t a1)
{
  uint64_t v1;
  __CFArray *Mutable;
  uint64_t v3;
  uint64_t v4;
  int *v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  CFStringRef v9;
  int v10;
  int v11;

  v1 = *(_QWORD *)(a1 + 1104);
  Mutable = CFArrayCreateMutable(0, 0, MEMORY[0x24BDBD690]);
  v3 = *(unsigned int *)(v1 + 32);
  if ((_DWORD)v3)
  {
    v4 = 0;
    v5 = (int *)(*(_QWORD *)(v1 + 16) + 8);
    while (1)
    {
      v6 = *v5;
      v5 += 16;
      if (v6 < 0)
        break;
      if (v3 == ++v4)
      {
        LODWORD(v4) = *(_DWORD *)(v1 + 32);
        break;
      }
    }
  }
  else
  {
    LODWORD(v4) = 0;
  }
  if ((_DWORD)v3 != (_DWORD)v4)
  {
    v7 = v4;
    v8 = *(_QWORD *)(v1 + 16);
    do
    {
      v9 = CFStringCreateWithCString(0, **(const char ***)(v8 + (v7 << 6) + 16), 0x8000100u);
      CFArrayAppendValue(Mutable, v9);
      CFRelease(v9);
      v8 = *(_QWORD *)(v1 + 16);
      if (*(_DWORD *)(v1 + 32) <= (v4 + 1))
        v10 = v4 + 1;
      else
        v10 = *(_DWORD *)(v1 + 32);
      v11 = v4;
      while (1)
      {
        v7 = (v11 + 1);
        if (v10 - 1 == v11)
          break;
        ++v11;
        LODWORD(v4) = v7;
        if ((*(_DWORD *)(v8 + (v7 << 6) + 8) & 0x80000000) != 0)
          goto LABEL_17;
      }
      LODWORD(v4) = v10;
LABEL_17:
      ;
    }
    while ((_DWORD)v3 != (_DWORD)v4);
  }
  return Mutable;
}

uint64_t REAssetManagerCreateSampleAsset(_QWORD *a1, char *a2, _QWORD *a3)
{
  re::internal::AssetTypeRegistry *v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  id v12;
  NSObject *v13;
  const char *v14;
  uint8_t v16[24];
  uint64_t v17;

  v17 = *MEMORY[0x24BDAC8D0];
  v6 = (re::internal::AssetTypeRegistry *)a1[138];
  v7 = re::internal::AssetTypeRegistry::assetTypeWithName(v6, a2);
  if (!v7)
  {
    if (a3)
      *a3 = 0;
    if (CoreRELog::onceToken != -1)
      dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
    v13 = (id)CoreRELog::log;
    if (!os_log_type_enabled(v13, OS_LOG_TYPE_ERROR))
      goto LABEL_15;
    *(_DWORD *)v16 = 136315138;
    *(_QWORD *)&v16[4] = a2;
    v14 = "%s is not the name of a registered asset type.";
    goto LABEL_18;
  }
  v8 = v7;
  v9 = re::internal::AssetTypeRegistry::assetLoaderWithAssetType((uint64_t)v6, v7);
  v10 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v9 + 152))(v9);
  if (!v10)
  {
    if (a3)
      *a3 = 0;
    if (CoreRELog::onceToken != -1)
      dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
    v13 = (id)CoreRELog::log;
    if (!os_log_type_enabled(v13, OS_LOG_TYPE_ERROR))
      goto LABEL_15;
    *(_DWORD *)v16 = 136315138;
    *(_QWORD *)&v16[4] = a2;
    v14 = "Failed to create a default AssetPointer for asset type %s.";
LABEL_18:
    _os_log_error_impl(&dword_224FE9000, v13, OS_LOG_TYPE_ERROR, v14, v16, 0xCu);
LABEL_15:

    return 0;
  }
  (*(void (**)(uint8_t *__return_ptr, _QWORD *, uint64_t, unint64_t, _QWORD, _QWORD, _QWORD))(*a1 + 416))(v16, a1, v10, v8, 0, 0, 0);
  v11 = *(_QWORD *)v16;
  v12 = (id)(*(_QWORD *)v16 + 8);
  re::AssetHandle::~AssetHandle((re::AssetHandle *)v16);
  return v11;
}

uint64_t REAssetManagerGetAssetTypeInitialRelease(uint64_t a1, char *a2, _QWORD *a3)
{
  re::internal::AssetTypeRegistry *v5;
  unint64_t v6;
  uint64_t v7;
  int v8;
  NSObject *v9;
  uint64_t v10;
  char v12;
  __int128 v13;
  uint8_t buf[4];
  char *v15;
  uint64_t v16;
  uint64_t v17;

  v17 = *MEMORY[0x24BDAC8D0];
  v5 = *(re::internal::AssetTypeRegistry **)(a1 + 1104);
  v6 = re::internal::AssetTypeRegistry::assetTypeWithName(v5, a2);
  if (v6)
  {
    v7 = re::internal::AssetTypeRegistry::assetLoaderWithAssetType((uint64_t)v5, v6);
    v13 = *(_OWORD *)((*(uint64_t (**)(uint64_t))(*(_QWORD *)v7 + 112))(v7) + 32);
    re::IntrospectionSharedLock::IntrospectionSharedLock((re::IntrospectionSharedLock *)&v12);
    if (buf[0])
      v8 = *(_DWORD *)(v16 + 64);
    else
      v8 = -1;
    v10 = re::TypeAvailabilityUtilities::convertToMajorVersion(v8);
    re::IntrospectionSharedLock::~IntrospectionSharedLock((re::IntrospectionSharedLock *)&v12);
  }
  else
  {
    if (a3)
      *a3 = 0;
    if (CoreRELog::onceToken != -1)
      dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
    v9 = (id)CoreRELog::log;
    if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315138;
      v15 = a2;
      _os_log_error_impl(&dword_224FE9000, v9, OS_LOG_TYPE_ERROR, "%s is not the name of a registered asset type.", buf, 0xCu);
    }

    return 0;
  }
  return v10;
}

void *REProjectiveShadowReceiverComponentGetComponentType()
{
  if (re::ecs2::dispatchOnceInitECSComponents(void)::onceToken != -1)
    dispatch_once(&re::ecs2::dispatchOnceInitECSComponents(void)::onceToken, &__block_literal_global_13);
  return re::ecs2::ComponentImpl<re::ecs2::ProjectiveShadowReceiverComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType;
}

double REProjectiveShadowReceiverComponentGetPlaneNormal()
{
  return 0.0078125;
}

uint64_t REProjectiveShadowReceiverComponentSetShadowIntensity(uint64_t this, float a2)
{
  *(float *)(this + 28) = a2;
  return re::ecs2::Component::enqueueMarkDirty(this);
}

float REProjectiveShadowReceiverComponentGetShadowIntensity(uint64_t a1)
{
  return *(float *)(a1 + 28);
}

uint64_t REProjectiveShadowReceiverComponentSetShadowIntensityDecayRate(uint64_t this, float a2)
{
  *(float *)(this + 36) = a2;
  return re::ecs2::Component::enqueueMarkDirty(this);
}

float REProjectiveShadowReceiverComponentGetShadowIntensityDecayRate(uint64_t a1)
{
  return *(float *)(a1 + 36);
}

uint64_t REProjectiveShadowReceiverComponentSetObjectSpaceDecayRate(uint64_t this, float a2)
{
  *(float *)(this + 32) = a2;
  return re::ecs2::Component::enqueueMarkDirty(this);
}

float REProjectiveShadowReceiverComponentGetObjectSpaceDecayRate(uint64_t a1)
{
  return *(float *)(a1 + 32);
}

float REProjectiveShadowReceiverComponentGetPercentageBelowPlaneShadowCutoff()
{
  return 1.0;
}

_QWORD *REProjectiveShadowReceiverComponentAddReceiverToEntitySubtree(_QWORD *a1)
{
  return addShadowReceiverToEntitySubtree(a1, 1);
}

_QWORD *addShadowReceiverToEntitySubtree(_QWORD *result, int a2)
{
  _QWORD *v3;
  re::ecs2::EntityComponentCollection *v4;
  uint64_t v5;
  re::ecs2::Entity **v6;
  uint64_t v7;
  re::ecs2::Entity *v8;

  v3 = result;
  v4 = (re::ecs2::EntityComponentCollection *)(result + 4);
  if (result[22])
    result = (_QWORD *)re::ecs2::EntityComponentCollection::getOrAdd((re::ecs2::EntityComponentCollection *)(result + 4), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::ProjectiveShadowReceiverComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType);
  if (v3[28])
  {
    if (!a2)
      return result;
  }
  else
  {
    result = (_QWORD *)re::ecs2::EntityComponentCollection::add(v4, (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::ShadowClusterComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType);
    if (!a2)
      return result;
  }
  v5 = v3[41];
  if (v5)
  {
    v6 = (re::ecs2::Entity **)v3[43];
    v7 = 8 * v5;
    do
    {
      v8 = *v6++;
      result = (_QWORD *)addShadowReceiverToEntitySubtree(v8, 1);
      v7 -= 8;
    }
    while (v7);
  }
  return result;
}

void removeShadowReceiverFromEntitySubtree(re::ecs2::Entity *a1, int a2)
{
  re::ecs2::EntityComponentCollection *v4;
  uint64_t v5;
  const __int16 *v6;
  int16x8_t *v7;
  int16x8_t v8;
  int v9;
  uint16x8_t v10;
  uint64_t v11;
  re::ecs2::Entity **v12;
  uint64_t v13;
  re::ecs2::Entity *v14;

  v4 = (re::ecs2::Entity *)((char *)a1 + 32);
  re::ecs2::EntityComponentCollection::remove((re::ecs2::Entity *)((char *)a1 + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::ProjectiveShadowReceiverComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType);
  v5 = *((unsigned __int16 *)a1 + 41);
  if (!*((_WORD *)a1 + 41))
    goto LABEL_7;
  v6 = (const __int16 *)((char *)re::ecs2::ComponentImpl<re::ecs2::GroundingShadowComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType
                       + 16);
  v7 = (int16x8_t *)*((_QWORD *)a1 + 11);
  v8 = vld1q_dup_s16(v6);
  v9 = 1;
  while (1)
  {
    v10 = (uint16x8_t)vandq_s8((int8x16_t)vceqq_s16(v8, *v7), (int8x16_t)xmmword_2260F1E80);
    v10.i16[0] = vmaxvq_u16(v10);
    if (v10.i32[0])
      break;
    v9 -= 8;
    ++v7;
    if (!--v5)
      goto LABEL_7;
  }
  if (v10.u16[0] - v9 >= *((unsigned __int16 *)a1 + 40))
LABEL_7:
    re::ecs2::EntityComponentCollection::remove(v4, (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::ShadowClusterComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType);
  if (a2)
  {
    v11 = *((_QWORD *)a1 + 41);
    if (v11)
    {
      v12 = (re::ecs2::Entity **)*((_QWORD *)a1 + 43);
      v13 = 8 * v11;
      do
      {
        v14 = *v12++;
        removeShadowReceiverFromEntitySubtree(v14, 1);
        v13 -= 8;
      }
      while (v13);
    }
  }
}

uint64_t REProjectiveShadowReceiverSetVisibleForScene(uint64_t a1, char a2)
{
  uint64_t result;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;

  result = re::ecs2::SceneComponentTable::get((re::ecs2::SceneComponentTable *)(a1 + 200), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::ProjectiveShadowReceiverComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType);
  if (result)
  {
    v4 = *(_QWORD *)(result + 24);
    if (v4)
    {
      v5 = *(uint64_t **)(result + 40);
      v6 = 8 * v4;
      do
      {
        v7 = *v5++;
        *(_BYTE *)(v7 + 40) = a2;
        result = re::ecs2::Component::enqueueMarkDirty(v7);
        v6 -= 8;
      }
      while (v6);
    }
  }
  return result;
}

void REProjectiveShadowReceiverSystemSetGapSize(uint64_t a1, int a2)
{
  if (!byte_255828738)
    byte_255828738 = 1;
  dword_25582873C = a2;
}

uint64_t REProjectiveShadowReceiverSystemGetGapSize()
{
  if (byte_255828738)
    return dword_25582873C;
  else
    return 16;
}

uint64_t REProjectiveShadowReceiverSystemGetReferenceShadowRegionDimension()
{
  return 0;
}

void REProjectiveShadowReceiverSystemSetMaxTextureAtlasDimension(uint64_t a1, int a2)
{
  if (!byte_255828710)
    byte_255828710 = 1;
  dword_255828714 = a2;
  if (!byte_255828718)
    byte_255828718 = 1;
  dword_25582871C = a2;
}

uint64_t REProjectiveShadowReceiverSystemGetMaxTextureAtlasDimension()
{
  if (byte_255828710)
    return dword_255828714;
  else
    return 256;
}

uint64_t REProjectiveShadowReceiverSystemGetSupportedMax2DTextureDimension()
{
  return 0;
}

uint64_t REProjectiveShadowReceiverSystemGetInitialContainerRegionDimension()
{
  return 0;
}

void REProjectiveShadowReceiverSystemSetAnchorPlaneOffset(float a1)
{
  if (!byte_255828708)
    byte_255828708 = 1;
  dword_25582870C = LODWORD(a1);
}

float REProjectiveShadowReceiverSystemGetAnchorPlaneOffset()
{
  float result;

  result = *(float *)&dword_25582870C;
  if (!byte_255828708)
    return 0.000001;
  return result;
}

void REProjectiveShadowReceiverSystemSetTextureAtlasDimensions(uint64_t a1, unsigned int a2, unsigned int a3)
{
  int v3;
  int v4;

  if (a3 >= a2)
    v3 = a2;
  else
    v3 = a3;
  if (!byte_255828710)
    byte_255828710 = 1;
  dword_255828714 = v3;
  if (!byte_255828718)
    byte_255828718 = 1;
  if (a2 <= a3)
    v4 = a3;
  else
    v4 = a2;
  dword_25582871C = v4;
}

uint64_t REProjectiveShadowReceiverSystemGetTextureAtlasWidth()
{
  if (byte_255828710)
    return dword_255828714;
  else
    return 256;
}

uint64_t REProjectiveShadowReceiverSystemGetTextureAtlasHeight()
{
  if (byte_255828718)
    return dword_25582871C;
  else
    return 256;
}

void REProjectiveShadowReceiverSystemSetShadowClusterExtentDiscrepancy(float a1)
{
  if (!byte_255828720)
    byte_255828720 = 1;
  dword_255828724 = LODWORD(a1);
}

float REProjectiveShadowReceiverSystemGetShadowClusterExtentDiscrepancy()
{
  float result;

  result = *(float *)&dword_255828724;
  if (!byte_255828720)
    return 0.0;
  return result;
}

void REProjectiveShadowReceiverSystemSetMinimumLargeShadowRadius(float a1)
{
  if (!byte_255828728)
    byte_255828728 = 1;
  dword_25582872C = LODWORD(a1);
}

float REProjectiveShadowReceiverSystemGetMinimumLargeShadowRadius()
{
  float result;

  result = *(float *)&dword_25582872C;
  if (!byte_255828728)
    return 0.25;
  return result;
}

void REProjectiveShadowReceiverSystemSetShadowTransitionRange(float a1)
{
  if (!byte_255828730)
    byte_255828730 = 1;
  dword_255828734 = LODWORD(a1);
}

float REProjectiveShadowReceiverSystemGetShadowTransitionRange()
{
  float result;

  result = *(float *)&dword_255828734;
  if (!byte_255828730)
    return 0.1;
  return result;
}

void REProjectiveShadowReceiverSystemSetShadowClusteringFudgeFactor(float a1)
{
  if (!byte_255828740)
    byte_255828740 = 1;
  dword_255828744 = LODWORD(a1);
}

float REProjectiveShadowReceiverSystemGetShadowClusteringFudgeFactor()
{
  float result;

  result = *(float *)&dword_255828744;
  if (!byte_255828740)
    return 1.0;
  return result;
}

void REProjectiveShadowReceiverSystemSetEnabled(uint64_t a1, char a2)
{
  if (!re::ShadowManager::getMutableDeprecatedShadowParams(void)::deprecatedShadowParams)
    re::ShadowManager::getMutableDeprecatedShadowParams(void)::deprecatedShadowParams = 1;
  byte_255828701 = a2;
}

void REProjectiveShadowReceiverSystemSetPrioritizeShadowMarkers(uint64_t a1, char a2)
{
  if (!byte_255828702)
    byte_255828702 = 1;
  byte_255828703 = a2;
}

void REProjectiveShadowReceiverSystemUseOnlyShadowMarkers(uint64_t a1, char a2)
{
  if (!byte_255828704)
    byte_255828704 = 1;
  byte_255828705 = a2;
}

_QWORD *REProjectiveShadowMarkEntityAsClusterRoot(_QWORD *a1)
{
  return addShadowReceiverToEntitySubtree(a1, 1);
}

BOOL REEntityGetProjectiveShadowClusterID(uint64_t a1, _QWORD *a2)
{
  uint64_t v2;
  _BOOL8 result;

  v2 = *(_QWORD *)(a1 + 224);
  if (v2)
  {
    v2 = *(_QWORD *)(v2 + 64);
    result = v2 != 0;
  }
  else
  {
    result = 0;
  }
  *a2 = v2;
  return result;
}

uint64_t re::convert(int a1)
{
  uint64_t result;

  if (a1 > 47)
  {
    if (a1 <= 49)
    {
      if (a1 == 48)
        return 6;
      else
        return 7;
    }
    else
    {
      switch(a1)
      {
        case 50:
          return 8;
        case 64:
          return 1;
        case 128:
          return 10;
        default:
          return 0;
      }
    }
  }
  else
  {
    switch(a1)
    {
      case 1:
        result = 2;
        break;
      case 2:
        result = 9;
        break;
      case 3:
        result = 11;
        break;
      case 4:
        result = 13;
        break;
      case 5:
        result = 15;
        break;
      case 6:
        result = 17;
        break;
      case 7:
        result = 12;
        break;
      case 8:
        result = 14;
        break;
      case 9:
        result = 16;
        break;
      case 10:
        result = 18;
        break;
      case 20:
        result = 19;
        break;
      case 21:
        result = 20;
        break;
      case 32:
        result = 3;
        break;
      case 33:
        result = 4;
        break;
      case 34:
        result = 5;
        break;
      default:
        return 0;
    }
  }
  return result;
}

uint64_t RETypeRegistryCreateTestData(_anonymous_namespace_ *a1)
{
  uint64_t *v2;
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  const char *v7;
  _anonymous_namespace_ *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  __int128 v13;
  StringID v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  _QWORD v22[2];
  uint64_t v23[2];
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  uint64_t v33;
  const char *v34;
  int v35;
  uint64_t v36;
  const char *v37;
  __int128 v38;
  StringID v39;
  const char **v40;

  v33 = 6059476;
  v34 = "BOOL";
  re::TypeBuilderHelper::registerBasic<BOOL>(a1, &v33, (re::TypeRegistry **)&v30);
  re::StringID::destroyString((re::StringID *)&v33);
  v33 = 208862;
  v34 = "int";
  re::TypeBuilderHelper::registerBasic<int>(a1, &v33, (re::TypeRegistry **)&v29);
  re::StringID::destroyString((re::StringID *)&v33);
  v33 = 0x161EEF7A2;
  v34 = "double";
  re::TypeBuilderHelper::registerBasic<double>(a1, &v33, (re::TypeRegistry **)&v28);
  re::StringID::destroyString((re::StringID *)&v33);
  v33 = 0x971D12FA97F764A2;
  v34 = "Optional<double>";
  re::TypeBuilderHelper::registerOptional<double>(a1, &v33, &v28, (re::TypeRegistry **)&v27);
  re::StringID::destroyString((re::StringID *)&v33);
  v33 = 0x172E213ACLL;
  v34 = "int[3]";
  re::TypeBuilderHelper::registerArray(a1, &v33, &v29, 3uLL, (re::TypeRegistry **)&v26);
  re::StringID::destroyString((re::StringID *)&v33);
  v33 = 0x67A219376628FE62;
  v34 = "DynamicArray<int>";
  re::TypeBuilderHelper::registerDynamicArray<int>(a1, &v33, &v29, (re::TypeRegistry **)&v25);
  re::StringID::destroyString((re::StringID *)&v33);
  v23[0] = 0xE7E18952C29E6A8;
  v23[1] = (uint64_t)"HashTable<int,double>";
  v2 = (uint64_t *)re::HashTable<re::StringID,re::StateParameterInt *,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::tryGet((uint64_t)a1 + 200, v23);
  if (a1 && v2)
  {
    v3 = *v2;
    *(_QWORD *)&v24 = a1;
    *((_QWORD *)&v24 + 1) = v3;
    goto LABEL_14;
  }
  v33 = 0x449AD97C4B77BED4;
  v34 = "_CompareFunc";
  v4 = (uint64_t *)re::HashTable<re::StringID,re::StateParameterInt *,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::tryGet((uint64_t)a1 + 200, &v33);
  if (v4)
  {
    v5 = *v4;
    re::StringID::destroyString((re::StringID *)&v33);
    if (a1)
    {
      v6 = (uint64_t)a1;
      goto LABEL_9;
    }
  }
  else
  {
    re::StringID::destroyString((re::StringID *)&v33);
  }
  *(_QWORD *)&v39.var0 = 0x449AD97C4B77BED4;
  v39.var1 = "_CompareFunc";
  re::TypeRegistry::declareType((uint64_t)a1, 8, &v39, 1u, 0, &v33);
  v6 = v33;
  v5 = (uint64_t)v34;
  re::StringID::destroyString((re::StringID *)&v39);
LABEL_9:
  re::TypeRegistry::typeInfo(a1, (re **)&v29, &v33);
  re::TypeInfo::TypeInfo((uint64_t)&v39, (uint64_t)&v34);
  if (!v6
    || (v7 = *v40,
        v33 = v5,
        v34 = v7,
        v35 = -1,
        (v8 = (_anonymous_namespace_ *)re::HashTable<re::internal::TypeAttributeKey,re::internal::TypeAttributeData,re::Hash<re::internal::TypeAttributeKey>,re::EqualTo<re::internal::TypeAttributeKey>,true,false>::tryGet(*(_QWORD *)&v39.var0 + 768, &v33)) == 0)|| !*(_QWORD *)v8)
  {
    v38 = v29;
    v36 = v6;
    v37 = (const char *)v5;
    v8 = (_anonymous_namespace_ *)re::TypeRegistry::addAttribute((uint64_t)a1, &v38, -1, (uint64_t)&v36, (uint64_t)re::internal::less<int>, 0);
  }
  v31 = v28;
  v32 = v29;
  re::TypeBuilder::beginDictionaryType((uint64_t)&v33, v23, 1, 0x30uLL, 8uLL, &v32, &v31);
  re::TypeBuilder::setConstructor((uint64_t)&v33, (uint64_t)re::TypeBuilderHelper::registerHashTable<int,double,re::Hash<int>,re::EqualTo<int>,true,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,void *)#1}::__invoke);
  re::TypeBuilder::setDestructor((uint64_t)&v33, (uint64_t)re::TypeBuilderHelper::registerHashTable<int,double,re::Hash<int>,re::EqualTo<int>,true,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,void *)#2}::__invoke);
  re::TypeBuilder::setDictionaryAccessors((uint64_t)&v33, (uint64_t)re::TypeBuilderHelper::registerHashTable<int,double,re::Hash<int>,re::EqualTo<int>,true,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *)#1}::__invoke, (uint64_t)re::TypeBuilderHelper::registerHashTable<int,double,re::Hash<int>,re::EqualTo<int>,true,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *)#1}::__invoke, (uint64_t)re::TypeBuilderHelper::registerHashTable<int,double,re::Hash<int>,re::EqualTo<int>,true,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,void *)#3}::__invoke, (uint64_t)re::TypeBuilderHelper::registerHashTable<int,double,re::Hash<int>,re::EqualTo<int>,true,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *,void const*)#1}::__invoke);
  re::TypeBuilder::setDictionaryIterator((uint64_t)&v33, (void *(*)(void *, re::Allocator *))re::TypeBuilderHelper::registerHashTable<int,double,re::Hash<int>,re::EqualTo<int>,true,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *,re::Allocator *)#1}::__invoke, (BOOL (*)(void *))re::TypeBuilderHelper::registerHashTable<int,double,re::Hash<int>,re::EqualTo<int>,true,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *)#2}::__invoke, (const void *(*)(void *))re::TypeBuilderHelper::registerHashTable<int,double,re::Hash<int>,re::EqualTo<int>,true,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *)#3}::__invoke, (void *(*)(void *))re::TypeBuilderHelper::registerHashTable<int,double,re::Hash<int>,re::EqualTo<int>,true,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *)#4}::__invoke, (void (*)(void *, re::Allocator *))re::TypeBuilderHelper::registerHashTable<int,double,re::Hash<int>,re::EqualTo<int>,true,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *,re::Allocator *)#2}::__invoke);
  re::TypeBuilder::commitTo((re::TypeBuilder *)&v33, a1, &v24);
  re::TypeBuilder::~TypeBuilder((re::TypeBuilder *)&v33, v9);
LABEL_14:
  re::StringID::destroyString((re::StringID *)v23);
  re::TypeBuilderHelper::registerDynamicString(a1, &v39);
  re::TypeBuilderHelper::registerStringID(a1, &v38);
  v36 = 0x45F7EF0E6F8;
  v37 = "TestData";
  v22[0] = 0;
  v22[1] = 0xFFFFFFFFLL;
  re::TypeBuilder::beginObjectType((uint64_t)&v33, &v36, 1, 1, 0xB8uLL, 8uLL, (uint64_t)v22);
  re::StringID::destroyString((re::StringID *)&v36);
  re::TypeBuilder::setConstructor((uint64_t)&v33, (uint64_t)RETypeRegistryCreateTestData::$_0::__invoke);
  re::TypeBuilder::setDestructor((uint64_t)&v33, (uint64_t)RETypeRegistryCreateTestData::$_1::__invoke);
  v21 = v30;
  v36 = 196;
  v37 = "b";
  re::TypeBuilder::addObjectMember((uint64_t)&v33, 1, (uint64_t)&v21, &v36, 0);
  re::StringID::destroyString((re::StringID *)&v36);
  v20 = v29;
  v36 = 210;
  v37 = "i";
  re::TypeBuilder::addObjectMember((uint64_t)&v33, 2, (uint64_t)&v20, &v36, 4);
  re::StringID::destroyString((re::StringID *)&v36);
  v19 = v28;
  v36 = 200;
  v37 = "d";
  re::TypeBuilder::addObjectMember((uint64_t)&v33, 3, (uint64_t)&v19, &v36, 8);
  re::StringID::destroyString((re::StringID *)&v36);
  v18 = v27;
  v36 = 0x5BDF69496C0;
  v37 = "optional";
  re::TypeBuilder::addObjectMember((uint64_t)&v33, 4, (uint64_t)&v18, &v36, 16);
  re::StringID::destroyString((re::StringID *)&v36);
  v17 = v26;
  v36 = 0x13D298C84A468ALL;
  v37 = "fixedArray";
  re::TypeBuilder::addObjectMember((uint64_t)&v33, 5, (uint64_t)&v17, &v36, 32);
  re::StringID::destroyString((re::StringID *)&v36);
  v16 = v25;
  v36 = 0x495BC3BA4202E2B4;
  v37 = "dynamicArray";
  re::TypeBuilder::addObjectMember((uint64_t)&v33, 6, (uint64_t)&v16, &v36, 48);
  re::StringID::destroyString((re::StringID *)&v36);
  v15 = v24;
  v36 = 0xA66423A206C0;
  v37 = "hashTable";
  re::TypeBuilder::addObjectMember((uint64_t)&v33, 7, (uint64_t)&v15, &v36, 88);
  re::StringID::destroyString((re::StringID *)&v36);
  v14 = v39;
  v36 = 0xE21CB38E3C008260;
  v37 = "dynamicString";
  re::TypeBuilder::addObjectMember((uint64_t)&v33, 8, (uint64_t)&v14, &v36, 136);
  re::StringID::destroyString((re::StringID *)&v36);
  v13 = v38;
  v36 = 0x5F2D5FB51D8;
  v37 = "stringID";
  re::TypeBuilder::addObjectMember((uint64_t)&v33, 9, (uint64_t)&v13, &v36, 168);
  re::StringID::destroyString((re::StringID *)&v36);
  re::TypeBuilder::commitTo((re::TypeBuilder *)&v33, a1, &v36);
  v10 = v36;
  re::TypeBuilder::~TypeBuilder((re::TypeBuilder *)&v33, v11);
  return v10;
}

unint64_t RETypeRegistryCreateTestData::$_0::__invoke(RETypeRegistryCreateTestData::$_0 *this, void *a2, const re::TypeInfo *a3, re::Allocator *a4, void *a5)
{
  _QWORD *v6;
  re::DynamicString *v7;
  int i;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t result;
  int v16;
  double v17[2];

  *((_BYTE *)this + 16) = 0;
  *((_QWORD *)this + 6) = 0;
  v6 = (_QWORD *)((char *)this + 48);
  *((_QWORD *)this + 7) = 0;
  *((_QWORD *)this + 8) = 0;
  *((_DWORD *)this + 18) = 0;
  *((_OWORD *)this + 5) = 0u;
  *((_OWORD *)this + 6) = 0u;
  *(_OWORD *)((char *)this + 108) = 0u;
  *(_QWORD *)((char *)this + 124) = 0x7FFFFFFFLL;
  *(_OWORD *)((char *)this + 136) = 0u;
  v7 = (RETypeRegistryCreateTestData::$_0 *)((char *)this + 136);
  *(_OWORD *)((char *)this + 152) = 0u;
  re::DynamicString::setCapacity(v7, 0);
  *((_QWORD *)this + 21) = 0;
  *((_QWORD *)this + 22) = &str_110;
  *(_BYTE *)this = 1;
  *((_DWORD *)this + 1) = -123;
  *((_QWORD *)this + 1) = 0x405EDD2F1A9FBE77;
  if (!*((_BYTE *)this + 16))
    *((_BYTE *)this + 16) = 1;
  *((_QWORD *)this + 3) = 0x3FBF7CED916872B0;
  *((_QWORD *)this + 4) = 0xFFFFFFFEFFFFFFFFLL;
  *((_DWORD *)this + 10) = -3;
  for (i = 1; i != 6; ++i)
  {
    LODWORD(v17[0]) = i;
    re::DynamicArray<int>::add(v6, v17);
  }
  v9 = 1;
  v16 = 1;
  do
  {
    v17[0] = (double)(int)v9 / 10.0;
    v10 = 0x94D049BB133111EBLL
        * ((0xBF58476D1CE4E5B9 * (v9 ^ (v9 >> 30))) ^ ((0xBF58476D1CE4E5B9 * (v9 ^ (v9 >> 30))) >> 27));
    v11 = v10 ^ (v10 >> 31);
    if (!*((_QWORD *)this + 11))
    {
      LODWORD(v12) = 0;
LABEL_13:
      re::HashTable<int,double,re::Hash<int>,re::EqualTo<int>,true,false>::addAsMove((uint64_t)this + 88, v12, v11, &v16, v17);
      ++*((_DWORD *)this + 32);
      goto LABEL_14;
    }
    v12 = v11 % *((unsigned int *)this + 28);
    v13 = *(unsigned int *)(*((_QWORD *)this + 12) + 4 * v12);
    if ((_DWORD)v13 == 0x7FFFFFFF)
      goto LABEL_13;
    v14 = *((_QWORD *)this + 13);
    while (v9 != *(_DWORD *)(v14 + 24 * v13 + 12))
    {
      LODWORD(v13) = *(_DWORD *)(v14 + 24 * v13 + 8) & 0x7FFFFFFF;
      if ((_DWORD)v13 == 0x7FFFFFFF)
        goto LABEL_13;
    }
LABEL_14:
    v16 = ++v9;
  }
  while (v9 != 3);
  *(_QWORD *)&v17[0] = "DynamicString Test";
  *(_QWORD *)&v17[1] = 18;
  re::DynamicString::operator=(v7, (uint64_t)v17);
  re::StringID::destroyString((RETypeRegistryCreateTestData::$_0 *)((char *)this + 168));
  result = re::internal::compileTimeHornerHash<14ul>(31, (uint64_t)"StringID Test", 0, 0, 13);
  *((_QWORD *)this + 21) = 2 * result;
  *((_QWORD *)this + 22) = "StringID Test";
  return result;
}

uint64_t re::HashTable<int,double,re::Hash<int>,re::EqualTo<int>,true,false>::addAsMove(uint64_t a1, unsigned int a2, unint64_t a3, _DWORD *a4, _QWORD *a5)
{
  uint64_t v9;
  int v10;
  int v11;
  signed int v12;
  uint64_t v13;
  BOOL v14;
  __int128 v15;
  uint64_t v16;
  uint64_t v17;
  unsigned int v18;
  __int128 v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  int v23;
  signed int v24;
  uint64_t v25;
  _BYTE v27[44];

  v9 = *(unsigned int *)(a1 + 36);
  if ((_DWORD)v9 == 0x7FFFFFFF)
  {
    v9 = *(unsigned int *)(a1 + 32);
    v10 = v9;
    if ((_DWORD)v9 == *(_DWORD *)(a1 + 24))
    {
      v11 = *(_DWORD *)(a1 + 28);
      v12 = 2 * v11;
      v13 = *(_QWORD *)a1;
      if (*(_QWORD *)a1)
      {
        if (v12)
          v14 = (_DWORD)v9 == v12;
        else
          v14 = 1;
        if (!v14 && (v11 & 0x80000000) == 0)
        {
          memset(v27, 0, 36);
          *(_QWORD *)&v27[36] = 0x7FFFFFFFLL;
          re::HashTable<re::internal::SerializeFuncKey,BOOL (*)(re::Serializer<re::EncoderBinary<re::SeekableInputStream>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL),re::internal::HashSerializeFuncKey,re::EqualTo<re::internal::SerializeFuncKey>,false,true>::init((uint64_t)v27, v13, v12);
          v15 = *(_OWORD *)v27;
          *(_OWORD *)v27 = *(_OWORD *)a1;
          *(_OWORD *)a1 = v15;
          v16 = *(_QWORD *)&v27[16];
          v17 = *(_QWORD *)(a1 + 16);
          *(_QWORD *)&v27[16] = v17;
          *(_QWORD *)(a1 + 16) = v16;
          v19 = *(_OWORD *)&v27[24];
          *(_OWORD *)&v27[24] = *(_OWORD *)(a1 + 24);
          v18 = *(_DWORD *)&v27[32];
          *(_OWORD *)(a1 + 24) = v19;
          v20 = v18;
          if (v18)
          {
            v21 = v17 + 16;
            do
            {
              if ((*(_DWORD *)(v21 - 8) & 0x80000000) != 0)
                re::HashTable<int,double,re::Hash<int>,re::EqualTo<int>,true,false>::addAsMove(a1, *(_QWORD *)(v21 - 16) % (unint64_t)*(unsigned int *)(a1 + 24), *(_QWORD *)(v21 - 16), v21 - 4, v21);
              v21 += 24;
              --v20;
            }
            while (v20);
          }
          re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)v27);
        }
      }
      else
      {
        if (v12)
          v24 = 2 * v11;
        else
          v24 = 3;
      }
      a2 = a3 % *(unsigned int *)(a1 + 24);
      v10 = *(_DWORD *)(a1 + 32);
    }
    *(_DWORD *)(a1 + 32) = v10 + 1;
    v22 = *(_QWORD *)(a1 + 16);
    v23 = *(_DWORD *)(v22 + 24 * v9 + 8);
  }
  else
  {
    v22 = *(_QWORD *)(a1 + 16);
    v23 = *(_DWORD *)(v22 + 24 * v9 + 8);
    *(_DWORD *)(a1 + 36) = v23 & 0x7FFFFFFF;
  }
  *(_DWORD *)(v22 + 24 * v9 + 8) = v23 | 0x80000000;
  v25 = *(_QWORD *)(a1 + 8);
  *(_DWORD *)(*(_QWORD *)(a1 + 16) + 24 * v9 + 8) = *(_DWORD *)(*(_QWORD *)(a1 + 16) + 24 * v9 + 8) & 0x80000000 | *(_DWORD *)(v25 + 4 * a2);
  *(_QWORD *)(*(_QWORD *)(a1 + 16) + 24 * v9) = a3;
  *(_DWORD *)(*(_QWORD *)(a1 + 16) + 24 * v9 + 12) = *a4;
  *(_QWORD *)(*(_QWORD *)(a1 + 16) + 24 * v9 + 16) = *a5;
  *(_DWORD *)(v25 + 4 * a2) = v9;
  ++*(_DWORD *)(a1 + 28);
  return v9;
}

uint64_t RETypeRegistryCreateTestData::$_1::__invoke(uint64_t a1)
{
  uint64_t v2;
  double v3;
  uint64_t result;

  re::StringID::destroyString((re::StringID *)(a1 + 168));
  v2 = *(_QWORD *)(a1 + 136);
  if (v2)
  {
    if ((*(_BYTE *)(a1 + 144) & 1) != 0)
      (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v2 + 40))(v2, *(_QWORD *)(a1 + 152));
    *(_OWORD *)(a1 + 136) = 0u;
    *(_OWORD *)(a1 + 152) = 0u;
  }
  v3 = re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)(a1 + 88));
  result = *(_QWORD *)(a1 + 48);
  if (result)
  {
    if (*(_QWORD *)(a1 + 80))
      result = (*(uint64_t (**)(uint64_t, double))(*(_QWORD *)result + 40))(result, v3);
    *(_QWORD *)(a1 + 80) = 0;
    *(_QWORD *)(a1 + 56) = 0;
    *(_QWORD *)(a1 + 64) = 0;
    *(_QWORD *)(a1 + 48) = 0;
    ++*(_DWORD *)(a1 + 72);
  }
  return result;
}

BOOL re::internal::less<int>(_DWORD *a1, _DWORD *a2)
{
  return *a1 < *a2;
}

void re::TypeBuilderHelper::registerHashTable<int,double,re::Hash<int>,re::EqualTo<int>,true,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,void *)#1}::__invoke(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)a1 = 0u;
  *(_DWORD *)(a1 + 36) = 0x7FFFFFFF;
  re::HashTable<re::internal::SerializeFuncKey,BOOL (*)(re::Serializer<re::EncoderBinary<re::SeekableInputStream>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL),re::internal::HashSerializeFuncKey,re::EqualTo<re::internal::SerializeFuncKey>,false,true>::init(a1, a3, 3);
}

double re::TypeBuilderHelper::registerHashTable<int,double,re::Hash<int>,re::EqualTo<int>,true,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,void *)#2}::__invoke(uint64_t *a1)
{
  re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit(a1);
  return re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit(a1);
}

uint64_t re::TypeBuilderHelper::registerHashTable<int,double,re::Hash<int>,re::EqualTo<int>,true,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *)#1}::__invoke(uint64_t a1)
{
  return *(unsigned int *)(a1 + 28);
}

void re::TypeBuilderHelper::registerHashTable<int,double,re::Hash<int>,re::EqualTo<int>,true,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *)#1}::__invoke(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  int v11;

  if (*(_QWORD *)a1 == a3)
  {
    if (*(_DWORD *)(a1 + 28))
    {
      v5 = *(unsigned int *)(a1 + 24);
      if ((_DWORD)v5)
        memset_pattern16(*(void **)(a1 + 8), &unk_2260EB7B0, 4 * v5);
      v6 = *(unsigned int *)(a1 + 32);
      if ((_DWORD)v6)
      {
        v7 = 0;
        v8 = 24 * v6;
        do
        {
          v9 = *(_QWORD *)(a1 + 16) + v7;
          v10 = *(_DWORD *)(v9 + 8);
          if (v10 < 0)
            *(_DWORD *)(v9 + 8) = v10 & 0x7FFFFFFF;
          v7 += 24;
        }
        while (v8 != v7);
      }
      *(_DWORD *)(a1 + 28) = 0;
      *(_DWORD *)(a1 + 32) = 0;
      v11 = *(_DWORD *)(a1 + 40) + 1;
      *(_DWORD *)(a1 + 36) = 0x7FFFFFFF;
      *(_DWORD *)(a1 + 40) = v11;
    }
  }
  else
  {
    re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)a1);
    re::HashTable<re::internal::SerializeFuncKey,BOOL (*)(re::Serializer<re::EncoderBinary<re::SeekableInputStream>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL),re::internal::HashSerializeFuncKey,re::EqualTo<re::internal::SerializeFuncKey>,false,true>::init(a1, a3, 3);
  }
}

uint64_t re::TypeBuilderHelper::registerHashTable<int,double,re::Hash<int>,re::EqualTo<int>,true,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,void *)#3}::__invoke(uint64_t a1, _QWORD **a2, re::Allocator *a3, _DWORD *a4)
{
  void **Instance;
  void **v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unsigned int v17;
  uint64_t v18;
  _BYTE v20[32];
  char v21[8];
  _BYTE v22[32];

  re::TypeRegistry::typeInfo(*a2, a2[2][10], v21);
  re::TypeInfo::TypeInfo((uint64_t)v20, (uint64_t)v22);
  Instance = re::TypeInfo::createInstance((re::TypeInfo *)v20, a3, 0);
  v9 = Instance;
  v10 = (int)*a4;
  v11 = 0x94D049BB133111EBLL
      * ((0xBF58476D1CE4E5B9 * (v10 ^ (v10 >> 30))) ^ ((0xBF58476D1CE4E5B9 * (v10 ^ (v10 >> 30))) >> 27));
  v12 = v11 ^ (v11 >> 31);
  if (!*(_QWORD *)a1)
  {
    LODWORD(v13) = 0;
    goto LABEL_8;
  }
  v13 = v12 % *(unsigned int *)(a1 + 24);
  v14 = *(unsigned int *)(*(_QWORD *)(a1 + 8) + 4 * v13);
  if ((_DWORD)v14 == 0x7FFFFFFF)
  {
LABEL_8:
    v17 = re::HashTable<int,double,re::Hash<int>,re::EqualTo<int>,true,false>::addAsMove(a1, v13, v12, a4, Instance);
    ++*(_DWORD *)(a1 + 40);
    v16 = *(_QWORD *)(a1 + 16) + 24 * v17;
    goto LABEL_9;
  }
  v15 = *(_QWORD *)(a1 + 16);
  while (*(_DWORD *)(v15 + 24 * v14 + 12) != (_DWORD)v10)
  {
    v14 = *(_DWORD *)(v15 + 24 * v14 + 8) & 0x7FFFFFFF;
    if ((_DWORD)v14 == 0x7FFFFFFF)
      goto LABEL_8;
  }
  *(_QWORD *)(v15 + 24 * v14 + 16) = *Instance;
  ++*(_DWORD *)(a1 + 40);
  v16 = *(_QWORD *)(a1 + 16) + 24 * v14;
LABEL_9:
  v18 = v16 + 16;
  re::TypeRegistry::typeInfo(*a2, a2[2][10], v21);
  re::TypeInfo::TypeInfo((uint64_t)v20, (uint64_t)v22);
  re::TypeInfo::releaseInstance((re::TypeInfo *)v20, v9, a3, 0);
  return v18;
}

uint64_t re::TypeBuilderHelper::registerHashTable<int,double,re::Hash<int>,re::EqualTo<int>,true,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *,void const*)#1}::__invoke(uint64_t a1, int *a2)
{
  unint64_t v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v6;

  if (!*(_QWORD *)a1)
    return 0;
  v2 = *a2;
  v3 = 0x94D049BB133111EBLL
     * ((0xBF58476D1CE4E5B9 * (v2 ^ (v2 >> 30))) ^ ((0xBF58476D1CE4E5B9 * (v2 ^ (v2 >> 30))) >> 27));
  v4 = *(unsigned int *)(*(_QWORD *)(a1 + 8) + 4 * ((v3 ^ (v3 >> 31)) % *(unsigned int *)(a1 + 24)));
  if ((_DWORD)v4 == 0x7FFFFFFF)
    return 0;
  v6 = *(_QWORD *)(a1 + 16);
  if (*(_DWORD *)(v6 + 24 * v4 + 12) != (_DWORD)v2)
  {
    while (1)
    {
      LODWORD(v4) = *(_DWORD *)(v6 + 24 * v4 + 8) & 0x7FFFFFFF;
      if ((_DWORD)v4 == 0x7FFFFFFF)
        break;
      if (*(_DWORD *)(v6 + 24 * v4 + 12) == (_DWORD)v2)
        return v6 + 24 * v4 + 16;
    }
    return 0;
  }
  return v6 + 24 * v4 + 16;
}

uint64_t re::TypeBuilderHelper::registerHashTable<int,double,re::Hash<int>,re::EqualTo<int>,true,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *,re::Allocator *)#1}::__invoke(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 32))(a2, 40, 8);
  *(_QWORD *)result = a1;
  *(_DWORD *)(result + 8) = *(_DWORD *)(a1 + 40);
  *(_BYTE *)(result + 16) = 0;
  return result;
}

uint64_t re::TypeBuilderHelper::registerHashTable<int,double,re::Hash<int>,re::EqualTo<int>,true,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *)#2}::__invoke(uint64_t *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  int v4;
  uint64_t v5;
  int *v6;
  int v7;
  uint64_t v8;
  unsigned int v9;
  unsigned int v10;
  int v11;
  uint64_t result;

  v2 = *a1;
  if (*((_DWORD *)a1 + 2) == *(_DWORD *)(*a1 + 40))
  {
    v3 = *(unsigned int *)(v2 + 32);
    if (*((_BYTE *)a1 + 16))
    {
      v4 = *((_DWORD *)a1 + 8);
      if (v4 == (_DWORD)v3)
      {
        LODWORD(v5) = *(_DWORD *)(v2 + 32);
      }
      else
      {
        v8 = a1[3];
        v9 = *(_DWORD *)(v8 + 32);
        v10 = v4 + 1;
        do
        {
          LODWORD(v5) = v10;
          *((_DWORD *)a1 + 8) = v10;
          if (v10 >= v9)
            break;
          v11 = *(_DWORD *)(*(_QWORD *)(v8 + 16) + 24 * v10++ + 8);
        }
        while ((v11 & 0x80000000) == 0);
      }
    }
    else
    {
      v5 = 0;
      if ((_DWORD)v3)
      {
        v6 = (int *)(*(_QWORD *)(v2 + 16) + 8);
        while (1)
        {
          v7 = *v6;
          v6 += 6;
          if (v7 < 0)
            break;
          if (v3 == ++v5)
          {
            LODWORD(v5) = *(_DWORD *)(v2 + 32);
            break;
          }
        }
      }
      *((_BYTE *)a1 + 16) = 1;
      a1[3] = v2;
      a1[4] = v5;
      LODWORD(v3) = *(_DWORD *)(v2 + 32);
    }
    return (_DWORD)v5 != (_DWORD)v3;
  }
  else
  {
    re::internal::assertLog((re::internal *)4, a2, "assertion failure: '%s' (%s:line %i) HashTable entries may not be added or removed during iteration.", "iter->originalVersion == iter->hashTable->version()", "operator()", 583);
    result = _os_crash();
    __break(1u);
  }
  return result;
}

uint64_t re::TypeBuilderHelper::registerHashTable<int,double,re::Hash<int>,re::EqualTo<int>,true,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *)#3}::__invoke(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  if (*(_DWORD *)(a1 + 8) == *(_DWORD *)(*(_QWORD *)a1 + 40))
    return *(_QWORD *)(*(_QWORD *)(a1 + 24) + 16) + 24 * *(unsigned int *)(a1 + 32) + 12;
  re::internal::assertLog((re::internal *)4, a2, "assertion failure: '%s' (%s:line %i) HashTable entries may not be added or removed during iteration.", "iter->originalVersion == iter->hashTable->version()", "operator()", 598);
  result = _os_crash();
  __break(1u);
  return result;
}

uint64_t re::TypeBuilderHelper::registerHashTable<int,double,re::Hash<int>,re::EqualTo<int>,true,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *)#4}::__invoke(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  if (*(_DWORD *)(a1 + 8) == *(_DWORD *)(*(_QWORD *)a1 + 40))
    return *(_QWORD *)(*(_QWORD *)(a1 + 24) + 16) + 24 * *(unsigned int *)(a1 + 32) + 16;
  re::internal::assertLog((re::internal *)4, a2, "assertion failure: '%s' (%s:line %i) HashTable entries may not be added or removed during iteration.", "iter->originalVersion == iter->hashTable->version()", "operator()", 607);
  result = _os_crash();
  __break(1u);
  return result;
}

uint64_t re::TypeBuilderHelper::registerHashTable<int,double,re::Hash<int>,re::EqualTo<int>,true,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *,re::Allocator *)#2}::__invoke(_DWORD *a1, uint64_t a2)
{
  uint64_t result;

  if (a1[2] == *(_DWORD *)(*(_QWORD *)a1 + 40))
    return (*(uint64_t (**)(uint64_t, _DWORD *))(*(_QWORD *)a2 + 40))(a2, a1);
  re::internal::assertLog((re::internal *)4, a2, "assertion failure: '%s' (%s:line %i) HashTable entries may not be added or removed during iteration.", "iter->originalVersion == iter->hashTable->version()", "operator()", 616);
  result = _os_crash();
  __break(1u);
  return result;
}

void *REBillboardComponentGetComponentType()
{
  if (re::ecs2::dispatchOnceInitECSComponents(void)::onceToken != -1)
    dispatch_once(&re::ecs2::dispatchOnceInitECSComponents(void)::onceToken, &__block_literal_global_13);
  return re::ecs2::ComponentImpl<re::ecs2::BillboardComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType;
}

__n128 REBillboardComponentGetUpDirection(__n128 *a1)
{
  return a1[2];
}

__n128 REBillboardComponentGetForwardDirection(__n128 *a1)
{
  return a1[3];
}

__n128 REBillboardComponentGetRotationAxis(__n128 *a1)
{
  return a1[4];
}

uint64_t REBillboardComponentGetUseUpDirection(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 84);
}

uint64_t REBillboardComponentGetUseRotationAxis(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 85);
}

float REBillboardComponentGetBlendFactor(uint64_t a1)
{
  return *(float *)(a1 + 80);
}

uint64_t REBillboardComponentSetUpDirection(uint64_t this, __n128 a2)
{
  *(__n128 *)(this + 32) = a2;
  return re::ecs2::Component::enqueueMarkDirty(this);
}

uint64_t REBillboardComponentSetForwardDirection(uint64_t this, __n128 a2)
{
  *(__n128 *)(this + 48) = a2;
  return re::ecs2::Component::enqueueMarkDirty(this);
}

uint64_t REBillboardComponentSetRotationAxis(uint64_t this, __n128 a2)
{
  *(__n128 *)(this + 64) = a2;
  return re::ecs2::Component::enqueueMarkDirty(this);
}

uint64_t REBillboardComponentSetUseUpDirection(uint64_t this, char a2)
{
  *(_BYTE *)(this + 84) = a2;
  return re::ecs2::Component::enqueueMarkDirty(this);
}

uint64_t REBillboardComponentSetUseRotationAxis(uint64_t this, char a2)
{
  *(_BYTE *)(this + 85) = a2;
  return re::ecs2::Component::enqueueMarkDirty(this);
}

uint64_t REBillboardComponentSetBlendFactor(uint64_t this, float a2)
{
  *(float *)(this + 80) = a2;
  return re::ecs2::Component::enqueueMarkDirty(this);
}

double REAudioFileAssetConfigurationCreate(re *a1)
{
  uint64_t *v1;
  uint64_t v2;
  double result;

  v1 = re::globalAllocators(a1);
  v2 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v1[2] + 32))(v1[2], 88, 8);
  result = 0.0;
  *(_OWORD *)v2 = 0u;
  *(_OWORD *)(v2 + 16) = 0u;
  *(_OWORD *)(v2 + 32) = 0u;
  *(_OWORD *)(v2 + 48) = 0u;
  *(_OWORD *)(v2 + 64) = 0u;
  *(_QWORD *)(v2 + 80) = 0;
  *(_QWORD *)(v2 + 24) = 0xC028000000000000;
  return result;
}

re *REAudioFileAssetConfigurationDestroy(re *result)
{
  re *v1;
  uint64_t v2;
  uint64_t v3;

  if (result)
  {
    v1 = result;
    v2 = re::globalAllocators(result)[2];
    if (*((_BYTE *)v1 + 32))
    {
      v3 = *((_QWORD *)v1 + 5);
      if (v3)
      {
        if ((*((_BYTE *)v1 + 48) & 1) != 0)
          (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v3 + 40))(v3, *((_QWORD *)v1 + 7));
        *(_OWORD *)((char *)v1 + 40) = 0u;
        *(_OWORD *)((char *)v1 + 56) = 0u;
      }
    }
    return (re *)(*(uint64_t (**)(uint64_t, re *))(*(_QWORD *)v2 + 40))(v2, v1);
  }
  return result;
}

uint64_t REAudioFileAssetConfigurationSetShouldLoop(uint64_t result, char a2)
{
  *(_BYTE *)(result + 1) = a2;
  return result;
}

uint64_t REAudioFileAssetConfigurationGetShouldLoop(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 1);
}

uint64_t REAudioFileAssetConfigurationSetLayoutTag(uint64_t result, int a2)
{
  if (!*(_BYTE *)(result + 72))
    *(_BYTE *)(result + 72) = 1;
  *(_DWORD *)(result + 76) = a2;
  return result;
}

uint64_t REAudioFileAssetConfigurationGetLayoutTag(uint64_t a1)
{
  return *(unsigned int *)(a1 + 76);
}

_BYTE *REAudioFileAssetConfigurationSetStreaming(_BYTE *result, char a2)
{
  *result = a2;
  return result;
}

uint64_t REAudioFileAssetConfigurationGetStreaming(unsigned __int8 *a1)
{
  return *a1;
}

uint64_t REAudioFileAssetConfigurationSetInputMode(uint64_t result, char a2)
{
  *(_BYTE *)(result + 80) = a2;
  return result;
}

uint64_t REAudioFileAssetConfigurationGetInputMode(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 80);
}

unsigned __int8 *REAudioFileAssetConfigurationSetMixGroupName(uint64_t a1, id a2)
{
  _anonymous_namespace_ *v3;
  unsigned __int8 *result;
  uint64_t v5;
  unsigned __int8 *v6;
  char v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char v11;
  uint64_t v12;

  if (a2)
  {
    v3 = (_anonymous_namespace_ *)objc_msgSend(objc_retainAutorelease(a2), "UTF8String");
    LOBYTE(v9) = 1;
    re::DynamicString::DynamicString((re::DynamicString *)&v10, (const re::DynamicString *)&v6);
    re::Optional<re::DynamicString>::operator=((unsigned __int8 *)(a1 + 32), &v9);
    if ((_BYTE)v9 && v10 && (v11 & 1) != 0)
      (*(void (**)(void))(*(_QWORD *)v10 + 40))();
    result = v6;
    if (v6 && (v7 & 1) != 0)
    {
      v5 = v8;
      return (unsigned __int8 *)(*(uint64_t (**)(unsigned __int8 *, uint64_t))(*(_QWORD *)result + 40))(result, v5);
    }
  }
  else
  {
    LOBYTE(v9) = 0;
    result = re::Optional<re::DynamicString>::operator=((unsigned __int8 *)(a1 + 32), &v9);
    if ((_BYTE)v9)
    {
      result = (unsigned __int8 *)v10;
      if (v10)
      {
        if ((v11 & 1) != 0)
        {
          v5 = v12;
          return (unsigned __int8 *)(*(uint64_t (**)(unsigned __int8 *, uint64_t))(*(_QWORD *)result + 40))(result, v5);
        }
      }
    }
  }
  return result;
}

id REAudioFileAssetConfigurationGetMixGroupName(uint64_t a1)
{
  uint64_t v1;

  if (!*(_BYTE *)(a1 + 32))
    return 0;
  if ((*(_BYTE *)(a1 + 48) & 1) != 0)
    v1 = *(_QWORD *)(a1 + 56);
  else
    v1 = a1 + 49;
  objc_msgSend(MEMORY[0x24BDD17C8], "stringWithUTF8String:", v1);
  return (id)objc_claimAutoreleasedReturnValue();
}

uint64_t REAudioFileAssetConfigurationSetCalibrationLevel(uint64_t result, double a2)
{
  *(double *)(result + 16) = a2;
  return result;
}

double REAudioFileAssetConfigurationGetCalibrationLevel(uint64_t a1)
{
  return *(double *)(a1 + 16);
}

uint64_t REAudioFileAssetConfigurationSetCalibrationMode(uint64_t result, int a2)
{
  *(_DWORD *)(result + 8) = a2;
  return result;
}

uint64_t REAudioFileAssetConfigurationGetCalibrationMode(uint64_t a1)
{
  return *(unsigned int *)(a1 + 8);
}

uint64_t REAudioFileAssetConfigurationSetNormalizationMode(uint64_t result, int a2)
{
  *(_DWORD *)(result + 4) = a2;
  return result;
}

uint64_t REAudioFileAssetConfigurationGetNormalizationMode(uint64_t a1)
{
  return *(unsigned int *)(a1 + 4);
}

uint64_t REAudioFileAssetConfigurationSetTargetLUFS(uint64_t result, double a2)
{
  *(double *)(result + 24) = a2;
  return result;
}

double REAudioFileAssetConfigurationGetTargetLUFS(uint64_t a1)
{
  return *(double *)(a1 + 24);
}

uint64_t REAudioFileAssetConfigurationSetRandomizeStart(uint64_t result, char a2)
{
  *(_BYTE *)(result + 2) = a2;
  return result;
}

uint64_t REAudioFileAssetConfigurationGetRandomizeStart(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 2);
}

id REAssetManagerGetEngineQueue(uint64_t a1)
{
  id v1;

  v1 = *(id *)(a1 + 584);

  return v1;
}

CFStringRef REAssetManagerCopyResolvedAssetPath(os_unfair_lock_s **a1, char *a2)
{
  const char *v3;
  CFStringRef v4;
  _BYTE v6[8];
  uint64_t v7;
  char v8;
  _BYTE v9[23];
  int v10;
  uint64_t v11;
  char v12;
  _QWORD v13[5];
  _BYTE v14[8];
  int v15;
  uint64_t v16;
  _QWORD v17[5];

  re::AssetManager::parseAssetPath((re::AssetManager *)a1, a2, 0, 0, (uint64_t)v14);
  if (v14[0])
  {
    v10 = v15;
    re::DynamicString::DynamicString((re::DynamicString *)&v11, (const re::DynamicString *)&v16);
    re::DynamicString::DynamicString((re::DynamicString *)v13, (const re::DynamicString *)v17);
    v13[4] = v17[4];
    re::AssetProviderRegistry::getPathFromResolver(a1[149], (const re::DynamicString *)&v11, (const re::DynamicString *)v13, (uint64_t)v6);
    if (v6[0])
    {
      if ((v8 & 1) != 0)
        v3 = *(const char **)&v9[7];
      else
        v3 = v9;
      v4 = CFStringCreateWithCString(0, v3, 0x8000100u);
      if (v6[0] && v7 && (v8 & 1) != 0)
        (*(void (**)(void))(*(_QWORD *)v7 + 40))();
    }
    else
    {
      v4 = 0;
    }
    if (v13[0])
    {
      if ((v13[1] & 1) != 0)
        (*(void (**)(void))(*(_QWORD *)v13[0] + 40))();
      memset(v13, 0, 32);
    }
    if (v11 && (v12 & 1) != 0)
      (*(void (**)(void))(*(_QWORD *)v11 + 40))();
  }
  else
  {
    v4 = 0;
  }
  re::Result<re::AssetPath,re::DetailedError>::~Result((uint64_t)v14);
  return v4;
}

uint64_t REAssetDeduplicationOperationCreate(_anonymous_namespace_ *a1, uint64_t a2, unint64_t a3)
{
  re *v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _BYTE v24[18];
  __int16 v25;
  unint64_t v26;
  __int16 v27;
  unint64_t v28;
  _OWORD v29[5];
  uint64_t v30;

  v30 = *MEMORY[0x24BDAC8D0];
  v20 = 0;
  v21 = 0;
  v22 = 0;
  if (a3)
  {
    v7 = 0;
    v8 = 0;
    do
    {
      re::AssetAPIHelper::assetHandleCreate(*(_QWORD *)(a2 + 8 * v8), &v17);
      v9 = v21;
      if (v21 <= v8)
      {
        v23 = 0;
        memset(v29, 0, sizeof(v29));
        os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        *(_DWORD *)v24 = 136315906;
        *(_QWORD *)&v24[4] = "operator[]";
        *(_WORD *)&v24[12] = 1024;
        *(_DWORD *)&v24[14] = 468;
        v25 = 2048;
        v26 = v8;
        v27 = 2048;
        v28 = v9;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
      }
      v10 = (uint64_t *)(v22 + v7);
      v11 = *(_QWORD *)(v22 + v7 + 8);
      v10[1] = v18;
      v18 = v11;
      v12 = *v10;
      *v10 = 0;
      *v10 = v17;
      v17 = v12;
      v13 = v10[2];
      v10[2] = v19;
      v19 = v13;
      re::AssetHandle::~AssetHandle((re::AssetHandle *)&v17);
      ++v8;
      v7 += 24;
    }
    while (a3 != v8);
  }
  v14 = re::globalAllocators(v6);
  v15 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v14[2] + 32))(v14[2], 72, 8);
  *(_OWORD *)v15 = 0u;
  *(_OWORD *)(v15 + 16) = 0u;
  *(_OWORD *)(v15 + 32) = 0u;
  *(_OWORD *)(v15 + 48) = 0u;
  *(_QWORD *)(v15 + 64) = 0;
  ArcSharedObject::ArcSharedObject((ArcSharedObject *)v15, 0);
  *(_QWORD *)v15 = &off_24ED9CFC8;
  *(_OWORD *)(v15 + 40) = 0u;
  *(_DWORD *)(v15 + 56) = 0;
  *(_OWORD *)(v15 + 24) = 0u;
  *(_QWORD *)(v15 + 60) = 0x7FFFFFFFLL;
  *(_QWORD *)v24 = v22;
  *(_QWORD *)&v24[8] = v21;
  re::AssetDeduplication::deduplicate((uint64_t)v24, (uint64_t)a1, (uint64_t)v29);
  re::HashTable<re::AssetHandle,re::AssetHandle,re::Hash<re::AssetHandle>,re::EqualTo<re::AssetHandle>,true,false>::operator=(v15 + 24, (uint64_t *)v29);
  re::HashTable<re::AssetHandle,re::AssetHandle,re::Hash<re::AssetHandle>,re::EqualTo<re::AssetHandle>,true,false>::deinit((uint64_t *)v29);
  re::FixedArray<re::AssetHandle>::deinit(&v20);
  return v15;
}

uint64_t REAssetDeduplicationOperationGetDeduplicatedAsset(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD v10[3];
  uint64_t v11;
  unint64_t v12;

  v2 = a2;
  re::AssetAPIHelper::assetHandleCreate(a2, &v11);
  if (re::HashTable<re::AssetHandle,re::AssetHandle,re::Hash<re::AssetHandle>,re::EqualTo<re::AssetHandle>,true,false>::containsKey(a1 + 24, (uint64_t)&v11))
  {
    if (*(_QWORD *)(a1 + 24))
    {
      if (v12)
        v4 = *(_QWORD *)(v12 + 664);
      else
        v4 = 0;
      v6 = 0x94D049BB133111EBLL
         * ((0xBF58476D1CE4E5B9 * (v12 ^ (v12 >> 30))) ^ ((0xBF58476D1CE4E5B9 * (v12 ^ (v12 >> 30))) >> 27));
      v7 = *(unsigned int *)(*(_QWORD *)(a1 + 32) + 4 * ((v4 ^ (v6 >> 31) ^ v6) % *(unsigned int *)(a1 + 48)));
      v5 = 0x7FFFFFFFLL;
      if ((_DWORD)v7 != 0x7FFFFFFF)
      {
        do
        {
          v8 = *(_QWORD *)(a1 + 40) + (v7 << 6);
          v5 = v7;
          if (*(_QWORD *)(v8 + 24) == v12)
            break;
          v7 = *(_DWORD *)(v8 + 8) & 0x7FFFFFFF;
          v5 = 0x7FFFFFFFLL;
        }
        while (v7 != 0x7FFFFFFF);
      }
    }
    else
    {
      v5 = 0x7FFFFFFFLL;
    }
    re::AssetHandle::AssetHandle((re::AssetHandle *)v10, (const re::AssetHandle *)(*(_QWORD *)(a1 + 40) + (v5 << 6) + 40));
    v2 = v10[0];
    re::AssetHandle::~AssetHandle((re::AssetHandle *)v10);
  }
  re::AssetHandle::~AssetHandle((re::AssetHandle *)&v11);
  return v2;
}

uint64_t REAssetDeduplicationOperationCreateAssetPathMapping(uint64_t a1, uint64_t a2)
{
  re *v2;
  uint64_t v3;
  _QWORD *v4;
  signed int v5;
  uint64_t v6;
  uint64_t v8;
  uint64_t v9[3];
  unsigned int v10;

  re::AssetDeduplication::remap(a1 + 24, a2 + 24, (uint64_t)v9);
  re::make::shared::object<re::Shareable<re::AssetPathMapping>>(v2, &v8);
  v3 = v8;
  v4 = (_QWORD *)(v8 + 24);
  if ((uint64_t *)(v8 + 24) != v9)
  {
    if (*v4)
    {
      if (v9[0])
      {
        re::HashTable<re::AssetHandle,re::DynamicString,re::Hash<re::AssetHandle>,re::EqualTo<re::AssetHandle>,true,false>::copy(v8 + 24, (uint64_t)v9);
        ++*(_DWORD *)(v3 + 64);
      }
      else
      {
        re::HashTable<re::AssetHandle,re::DynamicString,re::Hash<re::AssetHandle>,re::EqualTo<re::AssetHandle>,true,false>::clear(v8 + 24);
      }
    }
    else if (v9[0])
    {
      if (v10 <= 3)
        v5 = 3;
      else
        v5 = v10;
      re::HashTable<re::AssetHandle,re::DynamicString,re::Hash<re::AssetHandle>,re::EqualTo<re::AssetHandle>,true,false>::init(v8 + 24, v9[0], v5);
      re::HashTable<re::AssetHandle,re::DynamicString,re::Hash<re::AssetHandle>,re::EqualTo<re::AssetHandle>,true,false>::copy((uint64_t)v4, (uint64_t)v9);
    }
  }
  v6 = v8;
  re::HashTable<re::AssetHandle,re::DynamicString,re::Hash<re::AssetHandle>,re::EqualTo<re::AssetHandle>,true,false>::deinit(v9);
  return v6;
}

uint64_t REAssetManagerCustomMemoryAssetCreate(re *a1, uint64_t a2, const void *a3)
{
  uint64_t *v6;
  re::CustomAsset *v7;
  uint64_t v8;
  id v9;
  _QWORD v11[3];

  v6 = re::globalAllocators(a1);
  v7 = (re::CustomAsset *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v6[2] + 32))(v6[2], 16, 8);
  *(_QWORD *)v7 = &off_24ED2BE90;
  *((_QWORD *)v7 + 1) = 0;
  re::CustomAsset::setRuntimeObject(v7, a3);
  (*(void (**)(_QWORD *__return_ptr, re *, re::CustomAsset *, uint64_t, _QWORD, _QWORD, _QWORD))(*(_QWORD *)a1 + 416))(v11, a1, v7, a2, 0, 0, 0);
  v8 = v11[0];
  v9 = (id)(v11[0] + 8);
  re::AssetHandle::~AssetHandle((re::AssetHandle *)v11);
  return v8;
}

_QWORD *REAssetManagerAddCleanupCallback(uint64_t a1, void *aBlock)
{
  _QWORD *result;
  uint64_t v4;
  _QWORD v5[3];
  _QWORD *v6;
  uint64_t v7;

  v7 = *MEMORY[0x24BDAC8D0];
  v5[0] = &off_24ED9D010;
  v5[1] = _Block_copy(aBlock);
  v6 = v5;
  re::AssetManager::addCleanupBlock(a1, (uint64_t)v5);
  result = v6;
  if (v6 == v5)
  {
    v4 = 4;
    result = v5;
  }
  else
  {
    if (!v6)
      return result;
    v4 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v4))();
}

uint64_t REAssetRegistrationOptionsCreate(re *a1)
{
  uint64_t v2;

  re::make::shared::object<re::Shareable<AssetRegistrationOptions>>(a1, &v2);
  return v2;
}

uint64_t REAssetRegistrationOptionsSetIsMutable(uint64_t result, char a2)
{
  *(_BYTE *)(result + 24) = a2;
  return result;
}

uint64_t REAssetHandleCreateFromAssetRegistrationOptions(os_unfair_lock_s *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6;
  id v7;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  _QWORD v14[3];
  int v15;
  uint64_t v16;
  _QWORD v17[3];
  int v18;
  uint64_t v19;
  _QWORD v20[4];
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;

  v21 = 0;
  v22 = 0;
  v23 = 0;
  re::DynamicString::DynamicString((re::DynamicString *)&v12, (const re::DynamicString *)(a2 + 3));
  re::DynamicArray<BOOL>::DynamicArray((uint64_t)v14, a2 + 7);
  re::DynamicArray<BOOL>::DynamicArray((uint64_t)v17, a2 + 12);
  re::DynamicString::DynamicString((re::DynamicString *)v20, (const re::DynamicString *)(a2 + 17));
  if (*(_BYTE *)(a3 + 24))
  {
    re::AssetManager::createNewMutableAssetHandle(a1, (re::DynamicString *)&v12, 0, 1, (re::AssetHandle *)&v9);
  }
  else
  {
    os_unfair_lock_lock(a1 + 16);
    re::AssetManager::assetHandle_assetTablesLocked((re::AssetManager *)a1, (const re::AssetLoadDescriptor *)&v12, &v9);
    os_unfair_lock_unlock(a1 + 16);
  }
  v6 = v9;
  v21 = v9;
  v22 = v10;
  v9 = 0;
  v10 = 0;
  v23 = v11;
  v11 = 0;
  re::AssetHandle::~AssetHandle((re::AssetHandle *)&v9);
  v7 = (id)(v6 + 8);
  if (v20[0])
  {
    if ((v20[1] & 1) != 0)
      (*(void (**)(void))(*(_QWORD *)v20[0] + 40))();
    memset(v20, 0, sizeof(v20));
  }
  if (v17[0])
  {
    if (v19)
      (*(void (**)(void))(*(_QWORD *)v17[0] + 40))();
    v19 = 0;
    memset(v17, 0, sizeof(v17));
    ++v18;
  }
  if (v14[0])
  {
    if (v16)
      (*(void (**)(void))(*(_QWORD *)v14[0] + 40))();
    v16 = 0;
    memset(v14, 0, sizeof(v14));
    ++v15;
  }
  if (v12 && (v13 & 1) != 0)
    (*(void (**)(void))(*(_QWORD *)v12 + 40))();
  re::AssetHandle::~AssetHandle((re::AssetHandle *)&v21);
  return v6;
}

uint64_t REAssetHandleCreateNewFromAssetRegistrationOptions(os_unfair_lock_s *a1, uint64_t *a2, uint64_t a3)
{
  __int128 v6;
  uint64_t v7;
  re::AssetHandle *v8;
  uint64_t v9;
  id v10;
  uint64_t v11;
  __int128 v13;
  uint64_t v14;
  uint64_t v15;
  char v16;
  uint64_t v17;
  _QWORD v18[3];
  int v19;
  uint64_t v20;
  _QWORD v21[3];
  int v22;
  uint64_t v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  uint64_t v27;

  v26 = 0uLL;
  v27 = 0;
  re::DynamicString::DynamicString((re::DynamicString *)&v15, (const re::DynamicString *)(a2 + 3));
  re::DynamicArray<BOOL>::DynamicArray((uint64_t)v18, a2 + 7);
  re::DynamicArray<BOOL>::DynamicArray((uint64_t)v21, a2 + 12);
  re::DynamicString::DynamicString((re::DynamicString *)&v24, (const re::DynamicString *)(a2 + 17));
  if (*(_BYTE *)(a3 + 24))
  {
    re::AssetManager::createNewMutableAssetHandle(a1, (re::DynamicString *)&v15, 0, 1, (re::AssetHandle *)&v13);
    v6 = v26;
    v26 = v13;
    v13 = v6;
    v7 = v27;
    v27 = v14;
    v14 = v7;
    v8 = (re::AssetHandle *)&v13;
    goto LABEL_3;
  }
  re::AssetManager::createNewImmutableAssetHandle(a1, (re::DynamicString *)&v15, 0, (uint64_t)&v13);
  if ((_BYTE)v13)
  {
    re::AssetHandle::operator=((uint64_t *)&v26, (uint64_t *)&v13 + 1);
    if (!(_BYTE)v13)
      goto LABEL_4;
    v8 = (re::AssetHandle *)((char *)&v13 + 8);
LABEL_3:
    re::AssetHandle::~AssetHandle(v8);
LABEL_4:
    v9 = v26;
    v10 = (id)(v26 + 8);
    goto LABEL_5;
  }
  v9 = 0;
LABEL_5:
  if ((_QWORD)v24)
  {
    if ((BYTE8(v24) & 1) != 0)
      (*(void (**)(_QWORD, _QWORD, uint64_t))(*(_QWORD *)v24 + 40))(v24, v25, v11);
    v24 = 0u;
    v25 = 0u;
  }
  if (v21[0])
  {
    if (v23)
      (*(void (**)(_QWORD, uint64_t, uint64_t))(*(_QWORD *)v21[0] + 40))(v21[0], v23, v11);
    v23 = 0;
    memset(v21, 0, sizeof(v21));
    ++v22;
  }
  if (v18[0])
  {
    if (v20)
      (*(void (**)(_QWORD, uint64_t, uint64_t))(*(_QWORD *)v18[0] + 40))(v18[0], v20, v11);
    v20 = 0;
    memset(v18, 0, sizeof(v18));
    ++v19;
  }
  if (v15 && (v16 & 1) != 0)
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v15 + 40))(v15, v17, v11);
  re::AssetHandle::~AssetHandle((re::AssetHandle *)&v26);
  return v9;
}

uint64_t REAssetHandleIsMutable(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3[3];

  re::AssetAPIHelper::assetHandleCreate(a1, v3);
  v1 = *(unsigned __int8 *)(v3[1] + 257);
  re::AssetHandle::~AssetHandle((re::AssetHandle *)v3);
  return v1;
}

uint64_t REAssetHandleIsMutated(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3[3];

  re::AssetAPIHelper::assetHandleCreate(a1, v3);
  v1 = *(unsigned __int8 *)(v3[1] + 256);
  re::AssetHandle::~AssetHandle((re::AssetHandle *)v3);
  return v1;
}

uint64_t REAssetHandleConvertToMutable(uint64_t a1)
{
  os_unfair_lock_s *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;

  re::AssetAPIHelper::assetHandleCreate(a1, &v4);
  if (v5 && (v1 = *(os_unfair_lock_s **)(v5 + 24)) != 0)
    v2 = re::AssetManager::convertToMutable(v1, (const re::AssetHandle *)&v4, 1);
  else
    v2 = 0;
  re::AssetHandle::~AssetHandle((re::AssetHandle *)&v4);
  return v2;
}

uint64_t REAssetManagerCreateFileAssetDescriptor(uint64_t a1, void *a2)
{
  id v3;
  id v4;
  re::AssetPath *v5;
  const re::internal::AssetTypeRegistry *v6;
  uint64_t AssetTypeFromFilePath;
  const char **v8;
  _anonymous_namespace_ *v9;
  _anonymous_namespace_ *v10;
  const char *v11;
  uint64_t v12;
  uint64_t v13;
  re *v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  NSObject *v20;
  NSObject *v21;
  _OWORD v23[2];
  re *v24;
  char v25;
  uint64_t v26;
  _BYTE buf[12];
  uint64_t v28;
  uint64_t v29[3];
  int v30;
  uint64_t v31;
  uint64_t v32[3];
  int v33;
  uint64_t v34;
  __int128 v35;
  __int128 v36;
  uint64_t v37;

  v37 = *MEMORY[0x24BDAC8D0];
  v3 = a2;
  if ((objc_msgSend(v3, "isFileURL") & 1) == 0)
  {
    if (CoreRELog::onceToken != -1)
      dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
    v20 = (id)CoreRELog::log;
    if (os_log_type_enabled(v20, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 138412290;
      *(_QWORD *)&buf[4] = v3;
      _os_log_error_impl(&dword_224FE9000, v20, OS_LOG_TYPE_ERROR, "URL passed to REAssetManagerCreateFileAssetDescriptor must be a file URL: %@", buf, 0xCu);
    }

    goto LABEL_35;
  }
  v4 = objc_retainAutorelease(v3);
  v5 = (re::AssetPath *)objc_msgSend(v4, "fileSystemRepresentation");
  AssetTypeFromFilePath = re::AssetPath::getAssetTypeFromFilePath(v5, *(re::internal::AssetTypeRegistry **)(a1 + 1104), v6);
  if (!AssetTypeFromFilePath)
  {
    if (CoreRELog::onceToken != -1)
      dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
    v21 = (id)CoreRELog::log;
    if (os_log_type_enabled(v21, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 138412290;
      *(_QWORD *)&buf[4] = v4;
      _os_log_error_impl(&dword_224FE9000, v21, OS_LOG_TYPE_ERROR, "Asset path has an unknown extension: %@", buf, 0xCu);
    }

LABEL_35:
    v16 = 0;
    goto LABEL_36;
  }
  v8 = (const char **)AssetTypeFromFilePath;
  v9 = (_anonymous_namespace_ *)objc_msgSend(objc_retainAutorelease(v4), "fileSystemRepresentation");
  v11 = *v8;
  re::FileAssetProvider::makeDescriptor((_anonymous_namespace_ *)&v24, (re::DynamicString *)v23, (uint64_t)buf);
  if (*(_QWORD *)&v23[0])
  {
    if ((BYTE8(v23[0]) & 1) != 0)
      (*(void (**)(void))(**(_QWORD **)&v23[0] + 40))();
    memset(v23, 0, sizeof(v23));
  }
  v14 = v24;
  if (v24 && (v25 & 1) != 0)
    v14 = (re *)(*(uint64_t (**)(re *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)v24 + 40))(v24, v26, v12, v13);
  v15 = re::globalAllocators(v14);
  v16 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v15[2] + 32))(v15[2], 168, 8);
  v17 = re::Shareable<re::AssetLoadDescriptor>::Shareable<>(v16);
  re::DynamicString::operator=((re::DynamicString *)(v17 + 24), (re::DynamicString *)buf);
  re::DynamicArray<BOOL>::operator=(v16 + 56, v29);
  re::DynamicArray<BOOL>::operator=(v16 + 96, v32);
  re::DynamicString::operator=((re::DynamicString *)(v16 + 136), (re::DynamicString *)&v35);
  if ((_QWORD)v35)
  {
    if ((BYTE8(v35) & 1) != 0)
      (*(void (**)(_QWORD, _QWORD, uint64_t, uint64_t))(*(_QWORD *)v35 + 40))(v35, v36, v18, v19);
    v35 = 0u;
    v36 = 0u;
  }
  if (v32[0])
  {
    if (v34)
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)v32[0] + 40))(v32[0], v34, v18, v19);
    v34 = 0;
    memset(v32, 0, sizeof(v32));
    ++v33;
  }
  if (v29[0])
  {
    if (v31)
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)v29[0] + 40))(v29[0], v31, v18, v19);
    v31 = 0;
    memset(v29, 0, sizeof(v29));
    ++v30;
  }
  if (*(_QWORD *)buf && (buf[8] & 1) != 0)
    (*(void (**)(_QWORD, uint64_t, uint64_t, uint64_t))(**(_QWORD **)buf + 40))(*(_QWORD *)buf, v28, v18, v19);
LABEL_36:

  return v16;
}

uint64_t REAssetManagerGetAssetDescriptorCount(os_unfair_lock_s *a1, uint64_t a2)
{
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  _BYTE v7[8];
  _QWORD v8[5];
  uint64_t v9[3];

  re::AssetAPIHelper::assetHandleCreate(a2, v9);
  v3 = re::AssetHandle::assetInfo((re::AssetHandle *)v9);
  if (v3[10] == -1)
    v4 = 0;
  else
    v4 = v3[10];
  re::AssetManager::loadDescriptorsFromAssetId(a1, v4, v7);
  if (v7[0])
  {
    v5 = v8[2];
    re::DynamicArray<re::AssetLoadDescriptor>::deinit((uint64_t)v8);
  }
  else
  {
    v5 = 0;
  }
  re::AssetHandle::~AssetHandle((re::AssetHandle *)v9);
  return v5;
}

uint64_t REAssetManagerCopyAssetDescriptor(os_unfair_lock_s *a1, uint64_t a2, unint64_t a3)
{
  _QWORD *v5;
  uint64_t v6;
  re *v7;
  uint64_t *v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t *v11;
  _BYTE v13[8];
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17[4];
  int v18;
  const char *v19;
  __int16 v20;
  int v21;
  __int16 v22;
  unint64_t v23;
  __int16 v24;
  unint64_t v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  uint64_t v31;

  v31 = *MEMORY[0x24BDAC8D0];
  re::AssetAPIHelper::assetHandleCreate(a2, v17);
  v5 = re::AssetHandle::assetInfo((re::AssetHandle *)v17);
  if (v5[10] == -1)
    v6 = 0;
  else
    v6 = v5[10];
  re::AssetManager::loadDescriptorsFromAssetId(a1, v6, v13);
  if (!v13[0])
  {
    v9 = 0;
    goto LABEL_12;
  }
  if (v15 <= a3)
  {
    v9 = 0;
LABEL_11:
    re::DynamicArray<re::AssetLoadDescriptor>::deinit((uint64_t)&v14);
    goto LABEL_12;
  }
  v8 = re::globalAllocators(v7);
  v9 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v8[2] + 32))(v8[2], 168, 8);
  re::Shareable<re::AssetLoadDescriptor>::Shareable<>(v9);
  v10 = v15;
  if (v15 <= a3)
  {
    v17[3] = 0;
    v29 = 0u;
    v30 = 0u;
    v27 = 0u;
    v28 = 0u;
    v26 = 0u;
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    v18 = 136315906;
    v19 = "operator[]";
    v20 = 1024;
    v21 = 789;
    v22 = 2048;
    v23 = a3;
    v24 = 2048;
    v25 = v10;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  v11 = (uint64_t *)(v16 + 144 * a3);
  re::DynamicString::operator=((re::DynamicString *)(v9 + 24), (re::DynamicString *)v11);
  re::DynamicArray<BOOL>::operator=(v9 + 56, v11 + 4);
  re::DynamicArray<BOOL>::operator=(v9 + 96, v11 + 9);
  re::DynamicString::operator=((re::DynamicString *)(v9 + 136), (re::DynamicString *)(v11 + 14));
  if (v13[0])
    goto LABEL_11;
LABEL_12:
  re::AssetHandle::~AssetHandle((re::AssetHandle *)v17);
  return v9;
}

_QWORD *REAssetManagerRegisterAssetUnloadCompleteCallback(uint64_t a1, void *aBlock)
{
  re *v3;
  uint64_t v4;
  _QWORD *result;
  _QWORD v6[3];
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;

  v9 = *MEMORY[0x24BDAC8D0];
  v3 = (re *)_Block_copy(aBlock);
  v4 = re::globalAllocators(v3)[2];
  v6[0] = &off_24ED9CF60;
  v6[1] = v3;
  v7 = v4;
  v8 = v6;
  re::DynamicArray<re::Function<void ()(re::DynamicArray<unsigned long long>)>>::add((_anonymous_namespace_ *)(a1 + 1576), (uint64_t)v6);
  result = v8;
  if (v8)
  {
    result = (_QWORD *)(*(uint64_t (**)(_QWORD *))*v8)(v8);
    if (v8 != v6)
      return (_QWORD *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v7 + 40))(v7);
  }
  return result;
}

void REAssetManagerReplaceAssetRefDataWith(re::AssetManager *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5[3];
  uint64_t v6[3];

  re::AssetAPIHelper::assetHandleCreate(a2, v6);
  re::AssetAPIHelper::assetHandleCreate(a3, v5);
  re::AssetManager::transferAssetHandleDataToEmptyAssetHandle(a1, (re::AssetHandle *)v6, (re::AssetHandle *)v5);
  re::AssetHandle::~AssetHandle((re::AssetHandle *)v5);
  re::AssetHandle::~AssetHandle((re::AssetHandle *)v6);
}

uint64_t REAssetManagerCreateNewImmutableAssetRefFromExistingWithRegister(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  re::AssetHandle *v7;
  re::DynamicString *v8;
  const re::AssetLoadDescriptor *v9;
  uint64_t v10;
  id v11;
  NSObject *v12;
  NSObject *v13;
  _QWORD *v15;
  char *v16;
  _QWORD *v17;
  char *v18;
  _BYTE v19[24];
  char v20[8];
  uint64_t v21[3];
  uint64_t v22[3];
  uint8_t v23[4];
  char *v24;
  __int128 buf;
  uint64_t v26;
  int v27;
  uint64_t v28;
  uint64_t v29;

  v29 = *MEMORY[0x24BDAC8D0];
  re::AssetAPIHelper::assetHandleCreate(a3, v22);
  {
    v28 = 0;
    v26 = 0;
    buf = 0uLL;
    v8 = (re::DynamicString *)(a2 + 24);
    v27 = 0;
    re::DynamicArray<re::AssetLoadDescriptor>::add((_anonymous_namespace_ *)&buf, v8);
    re::AssetHandle::AssetHandle((re::AssetHandle *)v19, (const re::AssetHandle *)v22);
    re::AssetManager::createNewImmutableAssetHandleFromExistingAssetData(a1, (uint64_t *)&buf, 0, (re::AssetHandle *)v19, a4, v20);
    re::AssetHandle::~AssetHandle((re::AssetHandle *)v19);
    if (v20[0])
    {
      v10 = v21[0];
      if (v21[0])
        v11 = (id)(v21[0] + 8);
    }
    else
    {
      if (CoreRELog::onceToken != -1)
        dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
      v13 = (id)CoreRELog::log;
      if (os_log_type_enabled(v13, OS_LOG_TYPE_ERROR))
      {
        v17 = re::AssetHandle::assetInfo((re::AssetHandle *)v22);
        if ((v17[17] & 1) != 0)
          v18 = (char *)v17[18];
        else
          v18 = (char *)v17 + 137;
        *(_DWORD *)v23 = 136315138;
        v24 = v18;
        _os_log_error_impl(&dword_224FE9000, v13, OS_LOG_TYPE_ERROR, "failed to create immutable asset from existing '%s'", v23, 0xCu);
      }

      v10 = 0;
    }
    if (v20[0])
      re::AssetHandle::~AssetHandle((re::AssetHandle *)v21);
    re::DynamicArray<re::AssetLoadDescriptor>::deinit((uint64_t)&buf);
  }
  else
  {
    if (CoreRELog::onceToken != -1)
      dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
    v12 = (id)CoreRELog::log;
    if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR))
    {
      v15 = re::AssetHandle::assetInfo((re::AssetHandle *)v22);
      if ((v15[17] & 1) != 0)
        v16 = (char *)v15[18];
      else
        v16 = (char *)v15 + 137;
      LODWORD(buf) = 136315138;
      *(_QWORD *)((char *)&buf + 4) = v16;
      _os_log_error_impl(&dword_224FE9000, v12, OS_LOG_TYPE_ERROR, "failed to create immutable asset from existing '%s'", (uint8_t *)&buf, 0xCu);
    }

    v10 = 0;
  }
  re::AssetHandle::~AssetHandle((re::AssetHandle *)v22);
  return v10;
}

BOOL `anonymous namespace'::ensureExistingAssetIsLoaded(_anonymous_namespace_ *this, re::AssetHandle *a2)
{
  uint64_t v3;
  unsigned int v4;
  NSObject *v5;
  _QWORD *v6;
  char *v7;
  uint64_t v8;
  unsigned int v9;
  int v11;
  char *v12;
  uint64_t v13;

  v13 = *MEMORY[0x24BDAC8D0];
  v3 = *((_QWORD *)this + 1);
  if (!v3 || (v4 = atomic_load((unsigned int *)(v3 + 704)), v4 != 2))
  {
    if (CoreRELog::onceToken != -1)
      dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
    v5 = (id)CoreRELog::log;
    if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
    {
      v6 = re::AssetHandle::assetInfo(this);
      if ((v6[17] & 1) != 0)
        v7 = (char *)v6[18];
      else
        v7 = (char *)v6 + 137;
      v11 = 136315138;
      v12 = v7;
      _os_log_impl(&dword_224FE9000, v5, OS_LOG_TYPE_DEFAULT, "existing asset is not loaded: '%s'", (uint8_t *)&v11, 0xCu);
    }

    re::AssetHandle::loadNow(*((_QWORD *)this + 1), 0);
  }
  v8 = *((_QWORD *)this + 1);
  if (!v8)
    return 0;
  v9 = atomic_load((unsigned int *)(v8 + 704));
  return v9 == 2;
}

void `anonymous namespace'::checkProvider(os_unfair_lock_s *this, re::AssetManager *a2, const re::AssetLoadDescriptor *a3)
{
  char *v4;
  const char *v5;
  NSObject *v6;
  char *v7;
  int v8;
  char *v9;
  uint64_t v10;

  v10 = *MEMORY[0x24BDAC8D0];
  v4 = (char *)a2 + 9;
  if ((*((_QWORD *)a2 + 1) & 1) != 0)
    v5 = (const char *)*((_QWORD *)a2 + 2);
  else
    v5 = (char *)a2 + 9;
  if (!re::AssetProviderRegistry::tryGetRawProviderForScheme(this, v5))
  {
    if (CoreRELog::onceToken != -1)
      dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
    v6 = (id)CoreRELog::log;
    if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
    {
      if ((*((_QWORD *)a2 + 1) & 1) != 0)
        v7 = (char *)*((_QWORD *)a2 + 2);
      else
        v7 = v4;
      v8 = 136315138;
      v9 = v7;
      _os_log_impl(&dword_224FE9000, v6, OS_LOG_TYPE_DEFAULT, "Creating an asset for unknown scheme '%s'.", (uint8_t *)&v8, 0xCu);
    }

  }
}

uint64_t REAssetManagerCreateNewImmutableAssetRefFromExisting(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return REAssetManagerCreateNewImmutableAssetRefFromExistingWithRegister(a1, a2, a3, 1);
}

uint64_t REAssetManagerCreateNewImmutableAssetRefFromCloning(uint64_t a1, uint64_t a2, uint64_t a3)
{
  re::AssetHandle *v5;
  re::DynamicString *v6;
  const re::AssetLoadDescriptor *v7;
  uint64_t v8;
  id v9;
  NSObject *v10;
  NSObject *v11;
  _QWORD *v13;
  char *v14;
  _QWORD *v15;
  char *v16;
  _BYTE v17[24];
  char v18[8];
  uint64_t v19[3];
  uint64_t v20[3];
  uint8_t v21[4];
  char *v22;
  __int128 buf;
  uint64_t v24;
  int v25;
  uint64_t v26;
  uint64_t v27;

  v27 = *MEMORY[0x24BDAC8D0];
  re::AssetAPIHelper::assetHandleCreate(a3, v20);
  {
    v26 = 0;
    v24 = 0;
    buf = 0uLL;
    v6 = (re::DynamicString *)(a2 + 24);
    v25 = 0;
    re::DynamicArray<re::AssetLoadDescriptor>::add((_anonymous_namespace_ *)&buf, v6);
    re::AssetHandle::AssetHandle((re::AssetHandle *)v17, (const re::AssetHandle *)v20);
    re::AssetManager::copyNewImmutableAssetHandleFromExistingAssetData(a1, (uint64_t *)&buf, 0, (re::AssetHandle *)v17, v18);
    re::AssetHandle::~AssetHandle((re::AssetHandle *)v17);
    if (v18[0])
    {
      v8 = v19[0];
      if (v19[0])
        v9 = (id)(v19[0] + 8);
    }
    else
    {
      if (CoreRELog::onceToken != -1)
        dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
      v11 = (id)CoreRELog::log;
      if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR))
      {
        v15 = re::AssetHandle::assetInfo((re::AssetHandle *)v20);
        if ((v15[17] & 1) != 0)
          v16 = (char *)v15[18];
        else
          v16 = (char *)v15 + 137;
        *(_DWORD *)v21 = 136315138;
        v22 = v16;
        _os_log_error_impl(&dword_224FE9000, v11, OS_LOG_TYPE_ERROR, "failed to copy immutable asset from existing '%s'", v21, 0xCu);
      }

      v8 = 0;
    }
    if (v18[0])
      re::AssetHandle::~AssetHandle((re::AssetHandle *)v19);
    re::DynamicArray<re::AssetLoadDescriptor>::deinit((uint64_t)&buf);
  }
  else
  {
    if (CoreRELog::onceToken != -1)
      dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
    v10 = (id)CoreRELog::log;
    if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
    {
      v13 = re::AssetHandle::assetInfo((re::AssetHandle *)v20);
      if ((v13[17] & 1) != 0)
        v14 = (char *)v13[18];
      else
        v14 = (char *)v13 + 137;
      LODWORD(buf) = 136315138;
      *(_QWORD *)((char *)&buf + 4) = v14;
      _os_log_error_impl(&dword_224FE9000, v10, OS_LOG_TYPE_ERROR, "failed to copy immutable asset from existing '%s'", (uint8_t *)&buf, 0xCu);
    }

    v8 = 0;
  }
  re::AssetHandle::~AssetHandle((re::AssetHandle *)v20);
  return v8;
}

uint64_t REAssetManagerCreateNewMutableAssetRefFromExisting(uint64_t a1, uint64_t a2, uint64_t a3)
{
  re::AssetHandle *v5;
  const re::AssetLoadDescriptor *v6;
  re::AssetManager *v7;
  uint64_t v8;
  id v9;
  NSObject *v10;
  _QWORD *v12;
  char *v13;
  _BYTE v14[24];
  _QWORD v15[3];
  uint64_t v16[3];
  __int128 buf;
  uint64_t v18;
  int v19;
  uint64_t v20;
  uint64_t v21;

  v21 = *MEMORY[0x24BDAC8D0];
  re::AssetAPIHelper::assetHandleCreate(a3, v16);
  {
    v7 = (re::AssetManager *)(a2 + 24);
    v20 = 0;
    v18 = 0;
    buf = 0uLL;
    v19 = 0;
    re::DynamicArray<re::AssetLoadDescriptor>::add((_anonymous_namespace_ *)&buf, v7);
    re::AssetHandle::AssetHandle((re::AssetHandle *)v14, (const re::AssetHandle *)v16);
    re::AssetManager::createNewMutableAssetHandleFromExistingAssetData((os_unfair_lock_s *)a1, (uint64_t *)&buf, 0, (re::AssetHandle *)v14, (re::AssetHandle *)v15);
    re::AssetHandle::~AssetHandle((re::AssetHandle *)v14);
    v8 = v15[0];
    if (v15[0])
      v9 = (id)(v15[0] + 8);
    re::AssetHandle::~AssetHandle((re::AssetHandle *)v15);
    re::DynamicArray<re::AssetLoadDescriptor>::deinit((uint64_t)&buf);
  }
  else
  {
    if (CoreRELog::onceToken != -1)
      dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
    v10 = (id)CoreRELog::log;
    if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
    {
      v12 = re::AssetHandle::assetInfo((re::AssetHandle *)v16);
      if ((v12[17] & 1) != 0)
        v13 = (char *)v12[18];
      else
        v13 = (char *)v12 + 137;
      LODWORD(buf) = 136315138;
      *(_QWORD *)((char *)&buf + 4) = v13;
      _os_log_error_impl(&dword_224FE9000, v10, OS_LOG_TYPE_ERROR, "failed to create mutable asset from existing '%s'", (uint8_t *)&buf, 0xCu);
    }

    v8 = 0;
  }
  re::AssetHandle::~AssetHandle((re::AssetHandle *)v16);
  return v8;
}

uint64_t REAssetManagerPeerAssetStateIsKnown(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t result;
  uint64_t v6;

  if (result)
  {
    (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t, uint64_t))(*(_QWORD *)result + 168))(&v6, result, a2, a3);
    return (_BYTE)v6 != 0;
  }
  return result;
}

uint64_t `anonymous namespace'::getNetworkAssetService(uint64_t a1)
{
  NSObject *v2;
  uint8_t v4[16];

  if (!a1)
  {
    if (CoreRELog::onceToken != -1)
      dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
    v2 = (id)CoreRELog::log;
    if (os_log_type_enabled(v2, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)v4 = 0;
      _os_log_error_impl(&dword_224FE9000, v2, OS_LOG_TYPE_ERROR, "Cannot query asset state because there is no NetworkAssetService.", v4, 2u);
    }

  }
  return a1;
}

uint64_t REAssetManagerPeerAssetIsLoading(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t result;
  uint64_t v7;

  if (result)
  {
    (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t, uint64_t))(*(_QWORD *)result + 168))(&v7, result, a2, a3);
    return (_BYTE)v7 && HIDWORD(v7) == 1;
  }
  return result;
}

uint64_t REAssetManagerPeerAssetIsLoaded(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t result;
  uint64_t v7;

  if (result)
  {
    (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t, uint64_t))(*(_QWORD *)result + 168))(&v7, result, a2, a3);
    return (_BYTE)v7 && HIDWORD(v7) == 2;
  }
  return result;
}

uint64_t REAssetManagerPeerAssetIsLoadFailed(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t result;
  uint64_t v7;

  if (result)
  {
    (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t, uint64_t))(*(_QWORD *)result + 168))(&v7, result, a2, a3);
    return (_BYTE)v7 && HIDWORD(v7) == 3;
  }
  return result;
}

CFDataRef REAssetManagerCreateJsonDataByReserializingIntrospectedCompiledAssetContents(uint64_t a1, void *a2, const char *a3, CFDataRef *a4, char **a5)
{
  const char **v9;
  unint64_t v10;
  uint64_t v11;
  _anonymous_namespace_ *v12;
  _anonymous_namespace_ *v13;
  uint64_t v14;
  uint64_t v15;
  CFIndex v16;
  const UInt8 *v17;
  const std::error_category *v18;
  char *v19;
  CFDataRef v20;
  _BYTE *v21;
  const std::error_category *cat;
  char *v23;
  std::string *v24;
  _BYTE *v25;
  char *v26;
  char *v27;
  std::string v29;
  id v30;
  char v31;
  _BYTE v32[23];
  uint64_t v33;
  std::error_code v34;
  uint64_t v35;
  char v36;
  id v37[2];
  CFIndex length;
  int v39;
  UInt8 *bytes;
  _BYTE v41[32];
  __int128 v42;
  char v43;
  char v44[16];
  id v45;
  uint64_t v46;
  char v47;
  _BYTE v48[23];
  id v49;
  re::internal::AssetTypeRegistry *v50[3];
  id v51;

  v50[2] = 0;
  v51 = a2;
  v50[0] = *(re::internal::AssetTypeRegistry **)(a1 + 1104);
  v50[1] = 0;
  v9 = (const char **)re::internal::AssetTypeRegistry::assetTypeWithCompiledExtension(v50[0], a3);
  if (v9)
  {
    v10 = (unint64_t)v9;
    v49 = 0;
    v44[0] = 0;
    re::AssetUtilities::loadCompiledAssetFromData(&v51, (uint64_t *)v50, v9, 0, &v49, (uint64_t)v44, (uint64_t)&v45);
    if (!(_BYTE)v45)
    {
      if (!a5)
      {
        v20 = 0;
        goto LABEL_56;
      }
      if ((v47 & 1) != 0)
        v21 = *(_BYTE **)&v48[7];
      else
        v21 = v48;
      re::DynamicString::format((re::DynamicString *)"Failed to load asset pointer from compiled asset data due to error: %s.", (re::DynamicString *)&v33, v21);
      if ((v34.__val_ & 1) != 0)
        cat = v34.__cat_;
      else
        cat = (const std::error_category *)((char *)&v34.__val_ + 1);
      re::WrappedError::make((re::WrappedError *)CFSTR("REAssetRefErrorDomain"), (const __CFString *)4, (uint64_t)cat, v37);
      v23 = (char *)v37[0];
      *a5 = v23;
      CFRetain(v23);

      if (v33 && (v34.__val_ & 1) != 0)
        (*(void (**)(void))(*(_QWORD *)v33 + 40))();
      v20 = 0;
LABEL_55:
      if ((_BYTE)v45)
      {
LABEL_59:

        goto LABEL_60;
      }
LABEL_56:
      if (v46 && (v47 & 1) != 0)
        (*(void (**)(void))(*(_QWORD *)v46 + 40))();
      goto LABEL_59;
    }
    re::IntrospectionSharedLock::IntrospectionSharedLock((re::IntrospectionSharedLock *)&v43);
    v11 = re::internal::AssetTypeRegistry::assetLoaderWithAssetType(*(_QWORD *)(a1 + 1104), v10);
    v42 = *(_OWORD *)((*(uint64_t (**)(uint64_t))(*(_QWORD *)v11 + 112))(v11) + 32);
    re::TypeRegistry::typeInfo((re *)v42, (re **)&v42, &v33);
    v12 = (_anonymous_namespace_ *)re::TypeInfo::TypeInfo((uint64_t)v41, (uint64_t)&v34);
    bytes = 0;
    v37[1] = 0;
    length = 0;
    v39 = 0;
    v13 = (_anonymous_namespace_ *)re::DynamicArray<char>::setCapacity(v37, 0);
    ++v39;
    v14 = v46;
    if ((_BYTE)v33)
    {
      if (a4)
      {
        if (v49)
        {
          v15 = objc_msgSend(objc_retainAutorelease(v49), "bytes");
          v16 = objc_msgSend(v49, "length");
          v17 = (const UInt8 *)v15;
        }
        else
        {
          v17 = 0;
          v16 = 0;
        }
        *a4 = CFDataCreate(0, v17, v16);
      }
      v20 = CFDataCreate(0, bytes, length);
      if (v20)
      {
LABEL_45:
        if ((_BYTE)v33)
        {
LABEL_51:
          if (v37[0] && bytes)
            (*(void (**)(void))(*(_QWORD *)v37[0] + 40))();
          re::IntrospectionSharedLock::~IntrospectionSharedLock((re::IntrospectionSharedLock *)&v43);
          goto LABEL_55;
        }
LABEL_48:
        if (v35 && (v36 & 1) != 0)
          (*(void (**)(void))(*(_QWORD *)v35 + 40))();
        goto LABEL_51;
      }
      if (a5)
      {
        re::WrappedError::make((re::WrappedError *)CFSTR("REAssetRefErrorDomain"), (const __CFString *)4, (uint64_t)"Failed to create CFData object to hold serialized json data.", &v30);
        v27 = (char *)v30;
        *a5 = v27;
        CFRetain(v27);

      }
    }
    else
    {
      if (!a5)
      {
        v20 = 0;
        goto LABEL_48;
      }
      std::error_code::message(&v29, &v34);
      if ((v29.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v24 = &v29;
      else
        v24 = (std::string *)v29.__r_.__value_.__r.__words[0];
      re::DynamicString::format((re::DynamicString *)"Failed to serialize asset to json due to error: %s.", (re::DynamicString *)&v30, v24);
      if (SHIBYTE(v29.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v29.__r_.__value_.__l.__data_);
      if ((v31 & 1) != 0)
        v25 = *(_BYTE **)&v32[7];
      else
        v25 = v32;
      re::WrappedError::make((re::WrappedError *)CFSTR("REAssetRefErrorDomain"), (const __CFString *)4, (uint64_t)v25, &v29);
      v26 = v29.__r_.__value_.__l.__data_;
      *a5 = v26;
      CFRetain(v26);

      if (v30 && (v31 & 1) != 0)
        (*(void (**)(void))(*(_QWORD *)v30 + 40))();
    }
    v20 = 0;
    goto LABEL_45;
  }
  if (a5)
  {
    re::DynamicString::format((re::DynamicString *)"Could not find a registered asset type with compiled extension '%s'.", (re::DynamicString *)&v33, a3);
    v18 = (v34.__val_ & 1) != 0 ? v34.__cat_ : (const std::error_category *)((char *)&v34.__val_ + 1);
    re::WrappedError::make((re::WrappedError *)CFSTR("REAssetRefErrorDomain"), (const __CFString *)4, (uint64_t)v18, &v45);
    v19 = (char *)v45;
    *a5 = v19;
    CFRetain(v19);

    if (v33)
    {
      if ((v34.__val_ & 1) != 0)
        (*(void (**)(void))(*(_QWORD *)v33 + 40))();
    }
  }
  v20 = 0;
LABEL_60:

  return v20;
}

uint64_t REPeerAssetDescriptorCreate(_anonymous_namespace_ *a1, const char *a2, const re::DynamicString *a3)
{
  re *v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  NSObject *v10;
  const char *v11;
  re *v13;
  char v14;
  uint8_t buf[8];
  char v16;
  uint64_t v17[3];
  int v18;
  uint64_t v19;
  uint64_t v20[3];
  int v21;
  uint64_t v22;
  _QWORD v23[4];

  if (!a2)
  {
    if (CoreRELog::onceToken != -1)
      dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
    v10 = (id)CoreRELog::log;
    if (!os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
      goto LABEL_28;
    *(_WORD *)buf = 0;
    v11 = "Invalid assetIdentifierString passed to REPeerAssetDescriptorCreate";
    goto LABEL_31;
  }
  if (!a3)
  {
    if (CoreRELog::onceToken != -1)
      dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
    v10 = (id)CoreRELog::log;
    if (!os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
      goto LABEL_28;
    *(_WORD *)buf = 0;
    v11 = "Invalid assetType passed to REPeerAssetDescriptorCreate";
LABEL_31:
    _os_log_error_impl(&dword_224FE9000, v10, OS_LOG_TYPE_ERROR, v11, buf, 2u);
LABEL_28:

    return 0;
  }
  re::PeerAssetProvider::makeDescriptor(a1, a3, (re::DynamicString *)&v13, (uint64_t)buf);
  v6 = v13;
  if (v13 && (v14 & 1) != 0)
    v6 = (re *)(*(uint64_t (**)(void))(*(_QWORD *)v13 + 40))();
  v7 = re::globalAllocators(v6);
  v8 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v7[2] + 32))(v7[2], 168, 8);
  v9 = re::Shareable<re::AssetLoadDescriptor>::Shareable<>(v8);
  re::DynamicString::operator=((re::DynamicString *)(v9 + 24), (re::DynamicString *)buf);
  re::DynamicArray<BOOL>::operator=(v8 + 56, v17);
  re::DynamicArray<BOOL>::operator=(v8 + 96, v20);
  re::DynamicString::operator=((re::DynamicString *)(v8 + 136), (re::DynamicString *)v23);
  if (v23[0])
  {
    if ((v23[1] & 1) != 0)
      (*(void (**)(void))(*(_QWORD *)v23[0] + 40))();
    memset(v23, 0, sizeof(v23));
  }
  if (v20[0])
  {
    if (v22)
      (*(void (**)(void))(*(_QWORD *)v20[0] + 40))();
    v22 = 0;
    memset(v20, 0, sizeof(v20));
    ++v21;
  }
  if (v17[0])
  {
    if (v19)
      (*(void (**)(void))(*(_QWORD *)v17[0] + 40))();
    v19 = 0;
    memset(v17, 0, sizeof(v17));
    ++v18;
  }
  if (*(_QWORD *)buf && (v16 & 1) != 0)
    (*(void (**)(void))(**(_QWORD **)buf + 40))();
  return v8;
}

uint64_t *REPeerAssetDescriptorGetSourcePeerId(_QWORD *a1)
{
  const char *v2;
  _anonymous_namespace_ *v3;
  uint64_t *v4;
  uint64_t v6;
  NSObject *v7;
  uint8_t v8[8];
  uint64_t *v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  if ((a1[4] & 1) != 0)
    v2 = (const char *)a1[5];
  else
    v2 = (char *)a1 + 33;
  v3 = (_anonymous_namespace_ *)strcmp(v2, "PeerAsset");
  if ((_DWORD)v3)
    return 0;
  v11 = 0;
  v12 = 0;
  v13 = 0;
  re::DynamicString::setCapacity(&v10, 0);
  v6 = re::AssetLoadDescriptor::getIntrospectableData<re::PeerAssetLoadDescriptorParameters>((re::AssetLoadDescriptor *)(a1 + 3), &v9, 0);
  if ((v6 & 1) != 0)
  {
    v4 = v9;
  }
  else
  {
    v7 = *re::assetsLogObjects((re *)v6);
    if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)v8 = 0;
      _os_log_error_impl(&dword_224FE9000, v7, OS_LOG_TYPE_ERROR, "Failed to deserialize PeerAssetDescriptor parameters", v8, 2u);
    }
    v4 = 0;
  }
  if (v10 && (v11 & 1) != 0)
    (*(void (**)(void))(*v10 + 40))();
  return v4;
}

CFStringRef REPeerAssetDescriptorGetAssetIdentifierStringOnPeer(_QWORD *a1)
{
  const char *v2;
  _anonymous_namespace_ *v3;
  CFStringRef v4;
  uint64_t v6;
  const char *v7;
  NSObject *v8;
  uint8_t v9[8];
  uint64_t *v10;
  uint64_t *v11;
  uint64_t v12;
  const char *v13;
  uint64_t v14;

  if ((a1[4] & 1) != 0)
    v2 = (const char *)a1[5];
  else
    v2 = (char *)a1 + 33;
  v3 = (_anonymous_namespace_ *)strcmp(v2, "PeerAsset");
  if ((_DWORD)v3)
    return 0;
  v12 = 0;
  v13 = 0;
  v14 = 0;
  re::DynamicString::setCapacity(&v11, 0);
  v6 = re::AssetLoadDescriptor::getIntrospectableData<re::PeerAssetLoadDescriptorParameters>((re::AssetLoadDescriptor *)(a1 + 3), &v10, 0);
  if ((v6 & 1) != 0)
  {
    if ((v12 & 1) != 0)
      v7 = v13;
    else
      v7 = (char *)&v12 + 1;
    v4 = CFStringCreateWithCString(0, v7, 0x8000100u);
  }
  else
  {
    v8 = *re::assetsLogObjects((re *)v6);
    if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)v9 = 0;
      _os_log_error_impl(&dword_224FE9000, v8, OS_LOG_TYPE_ERROR, "Failed to deserialize PeerAssetDescriptor parameters", v9, 2u);
    }
    v4 = 0;
  }
  if (v11 && (v12 & 1) != 0)
    (*(void (**)(void))(*v11 + 40))();
  return v4;
}

uint64_t REAssetManagerRegisterAndCreateFileNameAliasAssetDescriptor(uint64_t a1, void *a2, const char *a3)
{
  id v5;
  id v6;
  re::AssetPath *v7;
  const re::internal::AssetTypeRegistry *v8;
  _anonymous_namespace_ *AssetTypeFromFilePath;
  const char **v10;
  os_unfair_lock_s *v11;
  id v12;
  _anonymous_namespace_ *v13;
  char v14;
  _anonymous_namespace_ *v15;
  _anonymous_namespace_ *v16;
  const char *v17;
  uint64_t v18;
  uint64_t v19;
  re *v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  NSObject *v26;
  const char *v27;
  NSObject *v29;
  _OWORD v30[2];
  re *v31;
  char v32;
  uint64_t v33;
  _OWORD v34[2];
  _OWORD v35[2];
  _BYTE buf[12];
  __int16 v37;
  _BYTE v38[10];
  uint64_t v39[3];
  int v40;
  uint64_t v41;
  uint64_t v42[3];
  int v43;
  uint64_t v44;
  __int128 v45;
  __int128 v46;
  uint64_t v47;

  v47 = *MEMORY[0x24BDAC8D0];
  v5 = a2;
  if ((objc_msgSend(v5, "isFileURL") & 1) == 0)
  {
    if (CoreRELog::onceToken != -1)
      dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
    v26 = (id)CoreRELog::log;
    if (!os_log_type_enabled(v26, OS_LOG_TYPE_ERROR))
      goto LABEL_41;
    *(_DWORD *)buf = 138412290;
    *(_QWORD *)&buf[4] = v5;
    v27 = "URL passed to REAssetManagerCreateFileAssetDescriptor must be a file URL: %@";
    goto LABEL_50;
  }
  v6 = objc_retainAutorelease(v5);
  v7 = (re::AssetPath *)objc_msgSend(v6, "fileSystemRepresentation");
  AssetTypeFromFilePath = (_anonymous_namespace_ *)re::AssetPath::getAssetTypeFromFilePath(v7, *(re::internal::AssetTypeRegistry **)(a1 + 1104), v8);
  if (!AssetTypeFromFilePath)
  {
    if (CoreRELog::onceToken != -1)
      dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
    v26 = (id)CoreRELog::log;
    if (!os_log_type_enabled(v26, OS_LOG_TYPE_ERROR))
      goto LABEL_41;
    *(_DWORD *)buf = 138412290;
    *(_QWORD *)&buf[4] = v6;
    v27 = "Asset path has an unknown extension: %@";
LABEL_50:
    _os_log_error_impl(&dword_224FE9000, v26, OS_LOG_TYPE_ERROR, v27, buf, 0xCu);
LABEL_41:

LABEL_42:
    v22 = 0;
    goto LABEL_43;
  }
  v10 = (const char **)AssetTypeFromFilePath;
  v11 = *(os_unfair_lock_s **)(a1 + 1296);
  v12 = objc_retainAutorelease(v6);
  v13 = (_anonymous_namespace_ *)objc_msgSend(v12, "fileSystemRepresentation");
  v14 = re::NamedFileRegistry::registerFileNameAlias(v11, (uint64_t)v35, (const char *)v34);
  if (*(_QWORD *)&v34[0])
  {
    if ((BYTE8(v34[0]) & 1) != 0)
      (*(void (**)(void))(**(_QWORD **)&v34[0] + 40))();
    memset(v34, 0, sizeof(v34));
  }
  v15 = *(_anonymous_namespace_ **)&v35[0];
  if (*(_QWORD *)&v35[0])
  {
    if ((BYTE8(v35[0]) & 1) != 0)
      v15 = (_anonymous_namespace_ *)(*(uint64_t (**)(void))(**(_QWORD **)&v35[0] + 40))();
    memset(v35, 0, sizeof(v35));
  }
  if ((v14 & 1) == 0)
  {
    if (CoreRELog::onceToken != -1)
      dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
    v29 = (id)CoreRELog::log;
    if (os_log_type_enabled(v29, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 138412546;
      *(_QWORD *)&buf[4] = v12;
      v37 = 2080;
      *(_QWORD *)v38 = a3;
      _os_log_error_impl(&dword_224FE9000, v29, OS_LOG_TYPE_ERROR, "Failed to register file '%@' with alias '%s'", buf, 0x16u);
    }

    goto LABEL_42;
  }
  v17 = *v10;
  re::NamedFileAssetProvider::makeDescriptor((_anonymous_namespace_ *)&v31, (re::DynamicString *)v30, (uint64_t)buf);
  if (*(_QWORD *)&v30[0])
  {
    if ((BYTE8(v30[0]) & 1) != 0)
      (*(void (**)(void))(**(_QWORD **)&v30[0] + 40))();
    memset(v30, 0, sizeof(v30));
  }
  v20 = v31;
  if (v31 && (v32 & 1) != 0)
    v20 = (re *)(*(uint64_t (**)(re *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)v31 + 40))(v31, v33, v18, v19);
  v21 = re::globalAllocators(v20);
  v22 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v21[2] + 32))(v21[2], 168, 8);
  v23 = re::Shareable<re::AssetLoadDescriptor>::Shareable<>(v22);
  re::DynamicString::operator=((re::DynamicString *)(v23 + 24), (re::DynamicString *)buf);
  re::DynamicArray<BOOL>::operator=(v22 + 56, v39);
  re::DynamicArray<BOOL>::operator=(v22 + 96, v42);
  re::DynamicString::operator=((re::DynamicString *)(v22 + 136), (re::DynamicString *)&v45);
  if ((_QWORD)v45)
  {
    if ((BYTE8(v45) & 1) != 0)
      (*(void (**)(_QWORD, _QWORD, uint64_t, uint64_t))(*(_QWORD *)v45 + 40))(v45, v46, v24, v25);
    v45 = 0u;
    v46 = 0u;
  }
  if (v42[0])
  {
    if (v44)
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)v42[0] + 40))(v42[0], v44, v24, v25);
    v44 = 0;
    memset(v42, 0, sizeof(v42));
    ++v43;
  }
  if (v39[0])
  {
    if (v41)
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)v39[0] + 40))(v39[0], v41, v24, v25);
    v41 = 0;
    memset(v39, 0, sizeof(v39));
    ++v40;
  }
  if (*(_QWORD *)buf && (buf[8] & 1) != 0)
    (*(void (**)(_QWORD, _QWORD, uint64_t, uint64_t))(**(_QWORD **)buf + 40))(*(_QWORD *)buf, *(_QWORD *)&v38[2], v24, v25);
LABEL_43:

  return v22;
}

uint64_t _REAssetManagerGetServiceLocatorForLegacyAPIWorkaround(uint64_t a1)
{
  return *(_QWORD *)(a1 + 1272);
}

uint64_t REAssetManagerRegisterBundleURL(uint64_t a1, const char *a2, CFURLRef anURL)
{
  const __CFString *v5;
  _anonymous_namespace_ *CStringPtr;
  os_unfair_lock_s *v7;
  _anonymous_namespace_ *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _OWORD v13[2];
  __int128 v14;
  __int128 v15;

  v5 = CFURLCopyPath(anURL);
  CStringPtr = (_anonymous_namespace_ *)CFStringGetCStringPtr(v5, 0x8000100u);
  v7 = *(os_unfair_lock_s **)(a1 + 1304);
  v11 = re::BundleFilePathRegistry::registerBundleFilePath(v7, (uint64_t)&v14, (uint64_t)v13);
  if (*(_QWORD *)&v13[0])
  {
    if ((BYTE8(v13[0]) & 1) != 0)
      (*(void (**)(void))(**(_QWORD **)&v13[0] + 40))();
    memset(v13, 0, sizeof(v13));
  }
  if ((_QWORD)v14)
  {
    if ((BYTE8(v14) & 1) != 0)
      (*(void (**)(_QWORD, _QWORD, uint64_t, uint64_t))(*(_QWORD *)v14 + 40))(v14, v15, v9, v10);
    v14 = 0u;
    v15 = 0u;
  }
  CFRelease(v5);
  return v11;
}

uint64_t REAssetManagerRegisterBundle(uint64_t a1, CFBundleRef bundle)
{
  const __CFString *Identifier;
  const char *CStringPtr;
  const __CFURL *v6;
  uint64_t v7;

  Identifier = CFBundleGetIdentifier(bundle);
  CStringPtr = CFStringGetCStringPtr(Identifier, 0x8000100u);
  v6 = CFBundleCopyBundleURL(bundle);
  v7 = REAssetManagerRegisterBundleURL(a1, CStringPtr, v6);
  CFRelease(v6);
  return v7;
}

uint64_t REAssetManagerUnregisterBundle(_anonymous_namespace_ *a1, const char *a2)
{
  os_unfair_lock_s *v3;
  uint64_t v4;
  uint64_t v6;
  char v7;

  v3 = (os_unfair_lock_s *)*((_QWORD *)a1 + 163);
  os_unfair_lock_lock(v3);
  v4 = re::HashTable<re::DynamicString,re::DynamicString,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::remove((uint64_t)&v3[2], (uint64_t)&v6);
  os_unfair_lock_unlock(v3);
  if (v6 && (v7 & 1) != 0)
    (*(void (**)(void))(*(_QWORD *)v6 + 40))();
  return v4;
}

uint64_t REAssetManagerGetAssetRuntimeSizeLimitForResourceShareClient(uint64_t a1)
{
  return *(_QWORD *)(a1 + 1432);
}

uint64_t REMemoryAssetParametersCreate(re *a1)
{
  uint64_t *v1;
  uint64_t v2;
  _anonymous_namespace_ *v3;

  v1 = re::globalAllocators(a1);
  v2 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v1[2] + 32))(v1[2], 64, 8);
  *(_OWORD *)v2 = 0u;
  *(_OWORD *)(v2 + 16) = 0u;
  *(_OWORD *)(v2 + 32) = 0u;
  *(_OWORD *)(v2 + 48) = 0u;
  ArcSharedObject::ArcSharedObject((ArcSharedObject *)v2, 0);
  *(_QWORD *)v2 = off_24ED9D0D8;
  *(_OWORD *)(v2 + 40) = 0u;
  *(_OWORD *)(v2 + 24) = 0u;
  re::DynamicString::setCapacity((_QWORD *)(v2 + 24), 0);
  *(_WORD *)(v2 + 56) = 0;
  return v2;
}

uint64_t REMemoryAssetParametersSetAsyncRegistration(uint64_t result, char a2)
{
  *(_BYTE *)(result + 56) = a2;
  return result;
}

re::DynamicString *REMemoryAssetParametersSetAssetName(uint64_t a1, char *__s)
{
  re::DynamicString *v2;
  _QWORD v4[2];

  v2 = (re::DynamicString *)(a1 + 24);
  v4[0] = __s;
  v4[1] = strlen(__s);
  return re::DynamicString::operator=(v2, (uint64_t)v4);
}

uint64_t re::internal::Callable<REAssetManagerRegisterAssetUnloadCompleteCallback::$_0,void ()(re::DynamicArray<unsigned long long>)>::~Callable(uint64_t a1)
{

  return a1;
}

void re::internal::Callable<REAssetManagerRegisterAssetUnloadCompleteCallback::$_0,void ()(re::DynamicArray<unsigned long long>)>::~Callable(uint64_t a1)
{

  JUMPOUT(0x2276933B8);
}

uint64_t re::internal::Callable<REAssetManagerRegisterAssetUnloadCompleteCallback::$_0,void ()(re::DynamicArray<unsigned long long>)>::operator()(uint64_t result, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v2 = *a2;
  *a2 = 0;
  a2[1] = 0;
  v3 = a2[2];
  a2[2] = 0;
  v4 = a2[4];
  a2[4] = 0;
  ++*((_DWORD *)a2 + 6);
  if (v3)
  {
    v5 = result;
    v6 = 8 * v3;
    v7 = v4;
    do
    {
      v7 += 8;
      result = (*(uint64_t (**)(void))(*(_QWORD *)(v5 + 8) + 16))();
      v6 -= 8;
    }
    while (v6);
  }
  if (v2)
  {
    if (v4)
      return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v2 + 40))(v2, v4);
  }
  return result;
}

_QWORD *re::internal::Callable<REAssetManagerRegisterAssetUnloadCompleteCallback::$_0,void ()(re::DynamicArray<unsigned long long>)>::cloneInto(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_24ED9CF60;
  a2[1] = _Block_copy(*(const void **)(a1 + 8));
  return a2;
}

_QWORD *re::internal::Callable<REAssetManagerRegisterAssetUnloadCompleteCallback::$_0,void ()(re::DynamicArray<unsigned long long>)>::moveInto(uint64_t a1, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = 0;
  *a2 = &off_24ED9CF60;
  a2[1] = v2;
  return a2;
}

uint64_t re::internal::Callable<REAssetManagerRegisterAssetUnloadCompleteCallback::$_0,void ()(re::DynamicArray<unsigned long long>)>::size()
{
  return 16;
}

void REAssetDeduplicationOperationImpl::~REAssetDeduplicationOperationImpl(REAssetDeduplicationOperationImpl *this)
{
  *(_QWORD *)this = &off_24ED9CFC8;
  re::HashTable<re::AssetHandle,re::AssetHandle,re::Hash<re::AssetHandle>,re::EqualTo<re::AssetHandle>,true,false>::deinit((uint64_t *)this + 3);
  *(_QWORD *)this = &off_24ED426B8;
  objc_destructInstance((char *)this + 8);
}

{
  *(_QWORD *)this = &off_24ED9CFC8;
  re::HashTable<re::AssetHandle,re::AssetHandle,re::Hash<re::AssetHandle>,re::EqualTo<re::AssetHandle>,true,false>::deinit((uint64_t *)this + 3);
  *(_QWORD *)this = &off_24ED426B8;
  objc_destructInstance((char *)this + 8);
  JUMPOUT(0x2276933B8);
}

double re::make::shared::object<re::Shareable<re::AssetPathMapping>>@<D0>(re *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t *v3;
  uint64_t v4;
  double result;

  v3 = re::globalAllocators(a1);
  v4 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v3[2] + 32))(v3[2], 72, 8);
  ArcSharedObject::ArcSharedObject((ArcSharedObject *)v4, 0);
  *(_QWORD *)v4 = &off_24ED9D120;
  result = 0.0;
  *(_OWORD *)(v4 + 56) = 0u;
  *(_OWORD *)(v4 + 24) = 0u;
  *(_OWORD *)(v4 + 40) = 0u;
  *(_DWORD *)(v4 + 60) = 0x7FFFFFFF;
  *a2 = v4;
  return result;
}

_QWORD *re::Shareable<re::AssetPathMapping>::~Shareable(_QWORD *a1)
{
  *a1 = &off_24ED9D120;
  re::HashTable<re::AssetHandle,re::DynamicString,re::Hash<re::AssetHandle>,re::EqualTo<re::AssetHandle>,true,false>::deinit(a1 + 3);
  *a1 = &off_24ED426B8;
  objc_destructInstance(a1 + 1);
  return a1;
}

void re::Shareable<re::AssetPathMapping>::~Shareable(_QWORD *a1)
{
  *a1 = &off_24ED9D120;
  re::HashTable<re::AssetHandle,re::DynamicString,re::Hash<re::AssetHandle>,re::EqualTo<re::AssetHandle>,true,false>::deinit(a1 + 3);
  *a1 = &off_24ED426B8;
  objc_destructInstance(a1 + 1);
  JUMPOUT(0x2276933B8);
}

uint64_t std::__function::__func<REAssetManagerAddCleanupCallback::$_0,std::allocator<REAssetManagerAddCleanupCallback::$_0>,void ()(void)>::~__func(uint64_t a1)
{

  return a1;
}

void std::__function::__func<REAssetManagerAddCleanupCallback::$_0,std::allocator<REAssetManagerAddCleanupCallback::$_0>,void ()(void)>::~__func(uint64_t a1)
{

  JUMPOUT(0x2276933B8);
}

_QWORD *std::__function::__func<REAssetManagerAddCleanupCallback::$_0,std::allocator<REAssetManagerAddCleanupCallback::$_0>,void ()(void)>::__clone(uint64_t a1)
{
  _QWORD *v2;

  v2 = operator new(0x10uLL);
  *v2 = &off_24ED9D010;
  v2[1] = _Block_copy(*(const void **)(a1 + 8));
  return v2;
}

void *std::__function::__func<REAssetManagerAddCleanupCallback::$_0,std::allocator<REAssetManagerAddCleanupCallback::$_0>,void ()(void)>::__clone(uint64_t a1, _QWORD *a2)
{
  void *result;

  *a2 = &off_24ED9D010;
  result = _Block_copy(*(const void **)(a1 + 8));
  a2[1] = result;
  return result;
}

void std::__function::__func<REAssetManagerAddCleanupCallback::$_0,std::allocator<REAssetManagerAddCleanupCallback::$_0>,void ()(void)>::destroy(uint64_t a1)
{

}

void std::__function::__func<REAssetManagerAddCleanupCallback::$_0,std::allocator<REAssetManagerAddCleanupCallback::$_0>,void ()(void)>::destroy_deallocate(id *a1)
{

  operator delete(a1);
}

uint64_t std::__function::__func<REAssetManagerAddCleanupCallback::$_0,std::allocator<REAssetManagerAddCleanupCallback::$_0>,void ()(void)>::operator()(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 8) + 16))();
}

uint64_t std::__function::__func<REAssetManagerAddCleanupCallback::$_0,std::allocator<REAssetManagerAddCleanupCallback::$_0>,void ()(void)>::target(uint64_t a1, uint64_t a2)
{
    return a1 + 8;
  else
    return 0;
}

void *std::__function::__func<REAssetManagerAddCleanupCallback::$_0,std::allocator<REAssetManagerAddCleanupCallback::$_0>,void ()(void)>::target_type()
{
}

void re::make::shared::object<re::Shareable<AssetRegistrationOptions>>(re *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t *v3;
  uint64_t v4;

  v3 = re::globalAllocators(a1);
  v4 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v3[2] + 32))(v3[2], 32, 8);
  ArcSharedObject::ArcSharedObject((ArcSharedObject *)v4, 0);
  *(_QWORD *)v4 = &off_24ED9D090;
  *(_BYTE *)(v4 + 24) = 0;
  *a2 = v4;
}

_QWORD *re::Shareable<AssetRegistrationOptions>::~Shareable(_QWORD *a1)
{
  *a1 = &off_24ED426B8;
  objc_destructInstance(a1 + 1);
  return a1;
}

void re::Shareable<AssetRegistrationOptions>::~Shareable(_QWORD *a1)
{
  *a1 = &off_24ED426B8;
  objc_destructInstance(a1 + 1);
  JUMPOUT(0x2276933B8);
}

uint64_t re::Shareable<re::AssetLoadDescriptor>::Shareable<>(uint64_t a1)
{
  _anonymous_namespace_ *v2;
  _anonymous_namespace_ *v3;

  ArcSharedObject::ArcSharedObject((ArcSharedObject *)a1, 0);
  *(_QWORD *)a1 = off_24ED2BB68;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_OWORD *)(a1 + 120) = 0u;
  *(_OWORD *)(a1 + 152) = 0u;
  *(_OWORD *)(a1 + 136) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  v3 = (_anonymous_namespace_ *)re::DynamicString::setCapacity((_QWORD *)(a1 + 24), 0);
  *(_QWORD *)(a1 + 56) = 0;
  *(_QWORD *)(a1 + 64) = 0;
  *(_DWORD *)(a1 + 80) = 0;
  *(_QWORD *)(a1 + 72) = 0;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_DWORD *)(a1 + 120) = 0;
  *(_OWORD *)(a1 + 128) = 0u;
  *(_OWORD *)(a1 + 144) = 0u;
  *(_QWORD *)(a1 + 160) = 0;
  re::DynamicString::setCapacity((_QWORD *)(a1 + 136), 0);
  return a1;
}

void re::MemoryAssetParameters::~MemoryAssetParameters(re::MemoryAssetParameters *this)
{
  uint64_t v2;
  _OWORD *v3;

  *(_QWORD *)this = off_24ED9D0D8;
  v3 = (_OWORD *)((char *)this + 24);
  v2 = *((_QWORD *)this + 3);
  if (v2)
  {
    if ((*((_BYTE *)this + 32) & 1) != 0)
      (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v2 + 40))(v2, *((_QWORD *)this + 5));
    *v3 = 0u;
    v3[1] = 0u;
  }
  *(_QWORD *)this = &off_24ED426B8;
  objc_destructInstance((char *)this + 8);
}

{
  uint64_t v2;
  _OWORD *v3;

  *(_QWORD *)this = off_24ED9D0D8;
  v3 = (_OWORD *)((char *)this + 24);
  v2 = *((_QWORD *)this + 3);
  if (v2)
  {
    if ((*((_BYTE *)this + 32) & 1) != 0)
      (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v2 + 40))(v2, *((_QWORD *)this + 5));
    *v3 = 0u;
    v3[1] = 0u;
  }
  *(_QWORD *)this = &off_24ED426B8;
  objc_destructInstance((char *)this + 8);
  JUMPOUT(0x2276933B8);
}

void *RESkeletalPoseComponentGetComponentType()
{
  if (re::ecs2::dispatchOnceInitECSComponents(void)::onceToken != -1)
    dispatch_once(&re::ecs2::dispatchOnceInitECSComponents(void)::onceToken, &__block_literal_global_13);
  return re::ecs2::ComponentImpl<re::ecs2::SkeletalPoseComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType;
}

uint64_t RESkeletalPoseComponentSetSkeletalPoseDefinition(_QWORD *a1, uint64_t a2)
{
  __int128 v3;
  uint64_t v4;
  uint64_t v5;
  unsigned int v6;
  _anonymous_namespace_ *v7;
  __int128 v9;
  uint64_t v10;

  re::AssetAPIHelper::assetHandleCreate(a2, (uint64_t *)&v9);
  v3 = *((_OWORD *)a1 + 2);
  *((_OWORD *)a1 + 2) = v9;
  v9 = v3;
  v4 = a1[6];
  a1[6] = v10;
  v10 = v4;
  re::AssetHandle::~AssetHandle((re::AssetHandle *)&v9);
  v5 = a1[5];
  if (v5)
  {
    v6 = atomic_load((unsigned int *)(v5 + 704));
    if (v6 == 2)
    {
      v7 = (_anonymous_namespace_ *)re::AssetHandle::asset<re::SkeletalPoseDefinitionAsset>((re::SkeletalPoseDefinitionAsset *)(a1 + 4));
    }
  }
  return re::ecs2::Component::enqueueMarkDirty((uint64_t)a1);
}

uint64_t RESkeletalPoseComponentGetSkeletalPoseAsset(uint64_t a1)
{
  return *(_QWORD *)(a1 + 32);
}

uint64_t RESkeletalPoseComponentGetSkeletalPoseDefinition(uint64_t a1)
{
  return *(_QWORD *)(a1 + 32);
}

void RESkeletalPoseComponentEnsureSkeletalPosesInitialized(uint64_t *a1)
{
  _anonymous_namespace_ *v2;
  _anonymous_namespace_ *v3;
  uint64_t v4;
  const re::ecs2::MeshComponent *v5;
  uint64_t v6;
  unsigned int v7;
  unint64_t v8;

  v2 = (_anonymous_namespace_ *)re::AssetHandle::loadedAsset<re::SkeletalPoseDefinitionAsset>((re::SkeletalPoseDefinitionAsset *)(a1 + 4));
  if (v2)
    v3 = v2;
  else
    v3 = (_anonymous_namespace_ *)(a1 + 19);
  if (*((_QWORD *)v3 + 15)
    || (v4 = a1[2]) != 0
    && (v5 = *(const re::ecs2::MeshComponent **)(v4 + 176)) != 0
    && (v6 = *((_QWORD *)v5 + 5)) != 0
    && (v7 = atomic_load((unsigned int *)(v6 + 704)), v7 == 2)
    && (v8 = 0,
        v2 = (_anonymous_namespace_ *)re::ecs2::SkeletalPoseComponent::skeletalPoseDefinitionAsset((re::ecs2::SkeletalPoseComponent *)a1, v5, &v8), (v3 = v2) != 0))
  {
    if ((_anonymous_namespace_ *)a1[18] != v3)
    {
      a1[18] = (uint64_t)v3;
    }
  }
}

uint64_t re::AssetHandle::asset<re::SkeletalPoseDefinitionAsset>(re::SkeletalPoseDefinitionAsset *a1)
{
  uint64_t *v2;
  uint64_t v3;
  NSObject *v4;
  NSObject *v6;
  _QWORD *v7;
  char *v8;
  int v9;
  char *v10;
  uint64_t v11;

  v11 = *MEMORY[0x24BDAC8D0];
  v2 = re::SkeletalPoseDefinitionAsset::assetType(a1);
  v3 = re::AssetHandle::assetWithType(a1, (const re::AssetType *)v2, 0);
  if (!v3)
  {
    v4 = *re::assetsLogObjects(0);
    if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
    {
      v6 = v4;
      v7 = re::AssetHandle::assetInfo(a1);
      if ((v7[17] & 1) != 0)
        v8 = (char *)v7[18];
      else
        v8 = (char *)v7 + 137;
      v9 = 136315138;
      v10 = v8;
      _os_log_error_impl(&dword_224FE9000, v6, OS_LOG_TYPE_ERROR, "Invalid asset: '%s'", (uint8_t *)&v9, 0xCu);

    }
  }
  return v3;
}

uint64_t RESkeletalPoseComponentGetSkeletonCount(uint64_t a1)
{
  return *(_QWORD *)(a1 + 72);
}

uint64_t RESkeletalPoseComponentGetPoseName(uint64_t a1, unint64_t a2)
{
  if (*(_QWORD *)(a1 + 72) <= a2)
  {
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  return *(_QWORD *)(*(_QWORD *)(a1 + 88) + 88 * a2 + 8);
}

void RESkeletalPoseComponentSetPoseName(_anonymous_namespace_ *a1, unint64_t a2, const char *a3)
{
  unint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  void *v13;
  uint64_t v14;
  int v15;
  const char *v16;
  __int16 v17;
  int v18;
  __int16 v19;
  unint64_t v20;
  __int16 v21;
  unint64_t v22;
  _OWORD v23[5];
  uint64_t v24;

  v24 = *MEMORY[0x24BDAC8D0];
  v12 = 0;
  v13 = &str_110;
  v6 = *((_QWORD *)a1 + 9);
  if (v6 <= a2)
  {
    v14 = 0;
    memset(v23, 0, sizeof(v23));
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    v15 = 136315906;
    v16 = "operator[]";
    v17 = 1024;
    v18 = 789;
    v19 = 2048;
    v20 = a2;
    v21 = 2048;
    v22 = v6;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  v7 = (_QWORD *)(*((_QWORD *)a1 + 11) + 88 * a2);
  v8 = v12;
  v9 = v13;
  v10 = v7[1];
  v11 = v12 & 0xFFFFFFFFFFFFFFFELL | *v7 & 1;
  v12 = 0;
  v13 = &str_110;
  v7[1] = v9;
  *(_QWORD *)&v23[0] = v11;
  *((_QWORD *)&v23[0] + 1) = v10;
  *v7 = v8;
  re::StringID::destroyString((re::StringID *)v23);
  re::StringID::destroyString((re::StringID *)&v12);
}

uint64_t RESkeletalPoseComponentGetJointCount(uint64_t a1, unint64_t a2)
{
  if (*(_QWORD *)(a1 + 72) <= a2)
  {
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  return *(_QWORD *)(*(_QWORD *)(a1 + 88) + 88 * a2 + 24);
}

uint64_t RESkeletalPoseComponentGetJointName(uint64_t a1, unint64_t a2, unint64_t a3)
{
  uint64_t v3;

  if (*(_QWORD *)(a1 + 72) <= a2)
  {
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_5:
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  v3 = *(_QWORD *)(*(_QWORD *)(a1 + 88) + 88 * a2 + 80);
  if (*(_QWORD *)(v3 + 192) <= a3)
    goto LABEL_5;
  return *(_QWORD *)(*(_QWORD *)(v3 + 200) + 16 * a3 + 8);
}

__n128 RESkeletalPoseComponentGetJointTransform(re::ecs2::SkeletalPoseComponent *a1, unint64_t a2, unint64_t a3)
{
  unint64_t v4;

  v4 = re::ecs2::SkeletalPoseComponent::skeletalPose(a1, a2, 1);
  if (*(_QWORD *)(v4 + 24) <= a3)
  {
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  return *(__n128 *)(*(_QWORD *)(v4 + 32) + 48 * a3);
}

void *RESkeletalPoseComponentGetJointTransforms(re::ecs2::SkeletalPoseComponent *a1, unint64_t a2, void *a3)
{
  unint64_t v4;

  v4 = re::ecs2::SkeletalPoseComponent::skeletalPose(a1, a2, 1);
  return memcpy(a3, *(const void **)(v4 + 32), 48 * *(_QWORD *)(v4 + 24));
}

uint64_t RESkeletalPoseComponentSetJointTransform(uint64_t a1, unint64_t a2, unint64_t a3, __n128 a4, __n128 a5, __n128 a6)
{
  uint64_t v6;
  __n128 *v7;

  if (*(_QWORD *)(a1 + 72) <= a2)
  {
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_5:
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  v6 = *(_QWORD *)(a1 + 88);
  if (*(_QWORD *)(v6 + 88 * a2 + 24) <= a3)
    goto LABEL_5;
  v7 = (__n128 *)(*(_QWORD *)(v6 + 88 * a2 + 32) + 48 * a3);
  *v7 = a4;
  v7[1] = a5;
  v7[2] = a6;
  return re::ecs2::Component::enqueueMarkDirty(a1);
}

uint64_t RESkeletalPoseComponentSetJointTransforms(uint64_t a1, unint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  _OWORD v7[5];
  uint64_t v8;

  v8 = *MEMORY[0x24BDAC8D0];
  if (*(_QWORD *)(a1 + 72) <= a2)
  {
    memset(v7, 0, sizeof(v7));
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  v4 = *(_QWORD *)(a1 + 88) + 88 * a2;
  v5 = *(_QWORD *)(v4 + 24);
  *(_QWORD *)&v7[0] = a3;
  *((_QWORD *)&v7[0] + 1) = v5;
  re::FixedArray<re::GenericSRT<float>>::operator=((_anonymous_namespace_ *)(v4 + 16), (uint64_t)v7);
  return re::ecs2::Component::enqueueMarkDirty(a1);
}

uint64_t RESkeletalPoseComponentSetJointRotations(uint64_t a1, unint64_t a2, uint64_t a3)
{
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;

  if (*(_QWORD *)(a1 + 72) <= a2)
    goto LABEL_10;
  v3 = *(_QWORD *)(*(_QWORD *)(a1 + 88) + 88 * a2 + 24);
  if (v3)
  {
    v4 = 0;
    v5 = 16;
    while (*(_QWORD *)(a1 + 72) > a2)
    {
      v6 = *(_QWORD *)(a1 + 88);
      if (*(_QWORD *)(v6 + 88 * a2 + 24) <= v4)
        goto LABEL_9;
      *(_OWORD *)(*(_QWORD *)(v6 + 88 * a2 + 32) + v5) = *(_OWORD *)(a3 + v5);
      ++v4;
      v5 += 48;
      if (v3 == v4)
        return re::ecs2::Component::enqueueMarkDirty(a1);
    }
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_9:
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_10:
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  return re::ecs2::Component::enqueueMarkDirty(a1);
}

uint64_t RESkeletalPoseComponentGetModelSpaceSkeletonCount(uint64_t a1)
{
  return *(_QWORD *)(a1 + 112);
}

uint64_t RESkeletalPoseComponentGetModelSpacePoseName(uint64_t a1, unint64_t a2)
{
  uint64_t v4;
  uint64_t v5;

  v4 = re::AssetHandle::loadedAsset<re::SkeletalPoseDefinitionAsset>((re::SkeletalPoseDefinitionAsset *)(a1 + 32));
  v5 = a1 + 152;
  if (v4)
    v5 = v4;
  if (*(_QWORD *)(v5 + 96) <= a2)
  {
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  return *(_QWORD *)(*(_QWORD *)(v5 + 112) + 16 * a2 + 8);
}

uint64_t RESkeletalPoseComponentGetModelSpaceJointCount(uint64_t a1, unint64_t a2)
{
  if (*(_QWORD *)(a1 + 112) <= a2)
  {
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  return *(_QWORD *)(*(_QWORD *)(a1 + 128) + 40 * a2 + 16);
}

uint64_t RESkeletalPoseComponentGetModelSpaceJointName(uint64_t a1, unint64_t a2, unint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v6 = re::AssetHandle::loadedAsset<re::SkeletalPoseDefinitionAsset>((re::SkeletalPoseDefinitionAsset *)(a1 + 32));
  v7 = a1 + 152;
  if (v6)
    v7 = v6;
  if (*(_QWORD *)(v7 + 176) <= a2)
  {
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_7:
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  v8 = *(_QWORD *)(v7 + 192);
  if (*(_QWORD *)(v8 + 24 * a2 + 8) <= a3)
    goto LABEL_7;
  return *(_QWORD *)(*(_QWORD *)(v8 + 24 * a2 + 16) + 16 * a3 + 8);
}

__n128 RESkeletalPoseComponentGetModelSpaceJointTransform(uint64_t a1, unint64_t a2, unint64_t a3)
{
  uint64_t v3;

  if (*(_QWORD *)(a1 + 112) <= a2)
  {
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_5:
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  v3 = *(_QWORD *)(a1 + 128);
  if (*(_QWORD *)(v3 + 40 * a2 + 16) <= a3)
    goto LABEL_5;
  return *(__n128 *)(*(_QWORD *)(v3 + 40 * a2 + 32) + (a3 << 6));
}

void *RESkeletalPoseComponentGetModelSpaceJointTransforms(uint64_t a1, unint64_t a2, void *__dst)
{
  if (*(_QWORD *)(a1 + 112) <= a2)
  {
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  return memcpy(__dst, *(const void **)(*(_QWORD *)(a1 + 128) + 40 * a2 + 32), *(_QWORD *)(*(_QWORD *)(a1 + 128) + 40 * a2 + 16) << 6);
}

uint64_t RESkeletalPoseComponentSetModelSpaceJointTransform(uint64_t a1, unint64_t a2, unint64_t a3, __n128 a4, __n128 a5, __n128 a6, __n128 a7)
{
  uint64_t v7;
  __n128 *v8;

  if (*(_QWORD *)(a1 + 112) <= a2)
  {
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_5:
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  v7 = *(_QWORD *)(a1 + 128);
  if (*(_QWORD *)(v7 + 40 * a2 + 16) <= a3)
    goto LABEL_5;
  v8 = (__n128 *)(*(_QWORD *)(v7 + 40 * a2 + 32) + (a3 << 6));
  *v8 = a4;
  v8[1] = a5;
  v8[2] = a6;
  v8[3] = a7;
  return re::ecs2::Component::enqueueMarkDirty(a1);
}

uint64_t RESkeletalPoseComponentSetModelSpaceJointTransforms(uint64_t a1, unint64_t a2, uint64_t a3)
{
  _anonymous_namespace_ *v4;
  uint64_t v5;
  _OWORD v7[5];
  uint64_t v8;

  v8 = *MEMORY[0x24BDAC8D0];
  if (*(_QWORD *)(a1 + 112) <= a2)
  {
    memset(v7, 0, sizeof(v7));
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  v4 = (_anonymous_namespace_ *)(*(_QWORD *)(a1 + 128) + 40 * a2);
  v5 = *((_QWORD *)v4 + 2);
  *(_QWORD *)&v7[0] = a3;
  *((_QWORD *)&v7[0] + 1) = v5;
  re::DynamicArray<re::Matrix4x4<float>>::operator=(v4, (uint64_t)v7);
  return re::ecs2::Component::enqueueMarkDirty(a1);
}

BOOL RESkeletalPoseComponentCanAccessPostUpdatePoses(uint64_t a1)
{
  return *(_BYTE *)(a1 + 3816) != 0;
}

uint64_t RESkeletalPoseComponentPostUpdatePoseCount(re::ecs2::SkeletalPoseComponent *a1, uint64_t a2)
{
  if (re::ecs2::SkeletalPoseComponent::ensurePostUpdatePoses(a1, a2))
    return *((_QWORD *)a1 + 491);
  else
    return 0;
}

uint64_t RESkeletalPoseComponentPostUpdatePoseJointCount(re::ecs2::SkeletalPoseComponent *a1, unint64_t a2)
{
  re::ecs2::SkeletalPoseComponent::ensurePostUpdatePoses(a1, a2);
  if (*((_QWORD *)a1 + 491) <= a2)
    return 0;
  else
    return *(_QWORD *)(*((_QWORD *)a1 + 493) + 88 * a2 + 24);
}

uint64_t RESkeletalPoseComponentGetPostUpdatePoseJoints(re::ecs2::SkeletalPoseComponent *a1, unint64_t a2)
{
  re::ecs2::SkeletalPoseComponent::ensurePostUpdatePoses(a1, a2);
  if (*((_QWORD *)a1 + 491) <= a2)
    return 0;
  else
    return *(_QWORD *)(*((_QWORD *)a1 + 493) + 88 * a2 + 32);
}

void RESkeletalPoseComponentSetPostUpdatePoseJoints(re::ecs2::SkeletalPoseComponent *a1, unint64_t a2, unint64_t a3)
{
  unint64_t v6;
  NSObject *v7;
  uint64_t v8;
  uint64_t v9;
  id v10;
  uint64_t v11;
  _QWORD *v12;
  uint8_t buf[16];
  _OWORD v14[4];
  uint64_t v15;
  _BYTE v16[12];
  __int16 v17;
  int v18;
  __int16 v19;
  unint64_t v20;
  __int16 v21;
  unint64_t v22;
  _QWORD v23[6];
  __int128 v24;
  __int128 v25;
  uint64_t v26;

  v26 = *MEMORY[0x24BDAC8D0];
  re::ecs2::SkeletalPoseComponent::ensurePostUpdatePoses(a1, a2);
  v6 = *((_QWORD *)a1 + 491);
  if (v6 >= a2)
  {
    if (v6 <= a2)
    {
      *(_QWORD *)v16 = 0;
      memset(v14, 0, sizeof(v14));
      *(_OWORD *)buf = 0u;
      os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      LODWORD(v23[0]) = 136315906;
      *(_QWORD *)((char *)v23 + 4) = "operator[]";
      WORD2(v23[1]) = 1024;
      *(_DWORD *)((char *)&v23[1] + 6) = 797;
      WORD1(v23[2]) = 2048;
      *(_QWORD *)((char *)&v23[2] + 4) = a2;
      WORD2(v23[3]) = 2048;
      *(_QWORD *)((char *)&v23[3] + 6) = v6;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
      goto LABEL_16;
    }
    v8 = *((_QWORD *)a1 + 493) + 88 * a2;
    re::StringID::StringID((re::StringID *)buf, (const StringID *)v8);
    re::FixedArray<re::GenericSRT<float>>::FixedArray(v14, v8 + 16);
    re::DynamicArray<BOOL>::DynamicArray((uint64_t)&v14[1] + 8, (uint64_t *)(v8 + 40));
    v9 = *(_QWORD *)(v8 + 80);
    v15 = v9;
    if (v9)
      v10 = (id)(v9 + 8);
    v23[0] = a3;
    v23[1] = *((_QWORD *)&v14[0] + 1);
    re::FixedArray<re::GenericSRT<float>>::operator=((_anonymous_namespace_ *)v14, (uint64_t)v23);
    if (re::ecs2::SkeletalPoseComponent::ensurePostUpdatePoses(a1, v11) && *((_QWORD *)a1 + 491) > a2)
    {
      re::DynamicBitset<unsigned long long,256ul>::setBit((uint64_t)a1 + 3824, a2);
      a3 = *((_QWORD *)a1 + 491);
      if (a3 <= a2)
      {
LABEL_16:
        v24 = 0u;
        v25 = 0u;
        memset(v23, 0, sizeof(v23));
        os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        *(_DWORD *)v16 = 136315906;
        *(_QWORD *)&v16[4] = "operator[]";
        v17 = 1024;
        v18 = 789;
        v19 = 2048;
        v20 = a2;
        v21 = 2048;
        v22 = a3;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
      }
      v12 = (_QWORD *)(*((_QWORD *)a1 + 493) + 88 * a2);
      re::StringID::operator=(v12, (uint64_t *)buf);
      re::FixedArray<re::GenericSRT<float>>::operator=(v12 + 2, (uint64_t)v14);
      re::DynamicArray<BOOL>::operator=((uint64_t)(v12 + 5), (uint64_t *)&v14[1] + 1);
      re::SharedPtr<re::SkeletalPoseJointDefinition>::reset(v12 + 10, v15);
    }
    re::SkeletalPose::~SkeletalPose((re::SkeletalPose *)buf);
    return;
  }
  if (CoreRELog::onceToken != -1)
    dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
  v7 = (id)CoreRELog::log;
  if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl(&dword_224FE9000, v7, OS_LOG_TYPE_DEFAULT, "Invalid post update pose index for skeletal pose component.", buf, 2u);
  }

}

uint64_t RESkeletalPoseComponentBuildAndExecuteRig(re::ecs2::SkeletalPoseComponent *a1)
{
  _QWORD *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  re::ecs2::MeshComponent *v7;
  uint64_t v8;
  unsigned int v9;
  re::ecs2::EntityComponentCollection *v10;
  uint64_t v11;
  re::ecs2::RigComponentHelper *v12;
  uint64_t v13;
  unsigned int v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  const re::ecs2::RigComponent *v21;
  re::ecs2::PhysicsSimulationService *v22;
  re::ecs2::PhysicsSimulationData *v23;
  unint64_t v24;
  NSObject *v25;
  const char *v26;
  uint8_t *v27;
  int v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t *v32;
  re::ecs2::SkeletalPoseBufferComponent *v33;
  __int16 v34;
  __int16 v35;
  __int16 v36;
  uint8_t buf[2];
  __int16 v38;
  __int16 v39;
  __int16 v40;

  v1 = (_QWORD *)*((_QWORD *)a1 + 2);
  if (!v1)
  {
    if (CoreRELog::onceToken != -1)
      dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
    v25 = (id)CoreRELog::log;
    if (!os_log_type_enabled(v25, OS_LOG_TYPE_DEFAULT))
      goto LABEL_39;
    v40 = 0;
    v26 = "Cannot build and execute rig for unattached skeletal pose component.";
    v27 = (uint8_t *)&v40;
    goto LABEL_38;
  }
  v3 = *((_QWORD *)a1 + 2);
  do
  {
    v4 = v3;
    v3 = *(_QWORD *)(v3 + 24);
  }
  while (v3);
  v5 = *(_QWORD *)(v4 + 16);
  if (!v5)
  {
    if (CoreRELog::onceToken != -1)
      dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
    v25 = (id)CoreRELog::log;
    if (!os_log_type_enabled(v25, OS_LOG_TYPE_DEFAULT))
      goto LABEL_39;
    v39 = 0;
    v26 = "Cannot build and execute rig for entity not attached to a scene.";
    v27 = (uint8_t *)&v39;
    goto LABEL_38;
  }
  v6 = *(_QWORD *)(v5 + 56);
  if (!v6)
  {
    if (CoreRELog::onceToken != -1)
      dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
    v25 = (id)CoreRELog::log;
    if (!os_log_type_enabled(v25, OS_LOG_TYPE_DEFAULT))
      goto LABEL_39;
    v38 = 0;
    v26 = "Cannot build and execute rig for scene not attached to an ECS service.";
    v27 = (uint8_t *)&v38;
    goto LABEL_38;
  }
  v7 = (re::ecs2::MeshComponent *)v1[22];
  if (!v7)
  {
    if (CoreRELog::onceToken != -1)
      dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
    v25 = (id)CoreRELog::log;
    if (!os_log_type_enabled(v25, OS_LOG_TYPE_DEFAULT))
      goto LABEL_39;
    *(_WORD *)buf = 0;
    v26 = "Cannot build and execute rig for skeletal pose without a corresponding mesh component.";
    v27 = buf;
    goto LABEL_38;
  }
  v8 = *((_QWORD *)v7 + 5);
  if (!v8 || (v9 = atomic_load((unsigned int *)(v8 + 704)), v9 != 2))
  {
    if (CoreRELog::onceToken != -1)
      dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
    v25 = (id)CoreRELog::log;
    if (!os_log_type_enabled(v25, OS_LOG_TYPE_DEFAULT))
      goto LABEL_39;
    v36 = 0;
    v26 = "Cannot build and execute rig for skeletal pose because corresponding mesh asset isn't loaded.";
    v27 = (uint8_t *)&v36;
    goto LABEL_38;
  }
  v10 = (re::ecs2::EntityComponentCollection *)(v1 + 4);
  v11 = re::ecs2::EntityComponentCollection::get((re::ecs2::EntityComponentCollection *)(v1 + 4), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::RigComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType);
  if (!v11)
  {
    if (CoreRELog::onceToken != -1)
      dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
    v25 = (id)CoreRELog::log;
    if (!os_log_type_enabled(v25, OS_LOG_TYPE_DEFAULT))
      goto LABEL_39;
    v35 = 0;
    v26 = "Cannot build and execute rig for skeletal pose without a corresponding rig component.";
    v27 = (uint8_t *)&v35;
    goto LABEL_38;
  }
  v12 = (re::ecs2::RigComponentHelper *)v11;
  v13 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v11 + 16) + 176) + 40);
  if (!v13 || (v14 = atomic_load((unsigned int *)(v13 + 704)), v14 != 2))
  {
    if (CoreRELog::onceToken != -1)
      dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
    v25 = (id)CoreRELog::log;
    if (!os_log_type_enabled(v25, OS_LOG_TYPE_DEFAULT))
      goto LABEL_39;
    v34 = 0;
    v26 = "Cannot build and execute rig for skeletal pose: assets are not yet loaded.";
    v27 = (uint8_t *)&v34;
LABEL_38:
    _os_log_impl(&dword_224FE9000, v25, OS_LOG_TYPE_DEFAULT, v26, v27, 2u);
LABEL_39:

    return 0;
  }
  (*(void (**)(uint64_t))(*(_QWORD *)v6 + 200))(v6);
  v15 = re::ecs2::EntityComponentCollection::get((re::ecs2::EntityComponentCollection *)(v1 + 4), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::MeshSceneComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType);
  if (v15)
  {
    v16 = (uint64_t *)v15;
    v17 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v6 + 32))(v6);
    v18 = re::ServiceLocator::serviceOrNull<re::RenderManager>(v17);
    if (v18)
      re::ecs2::MeshSceneComponent::ensureCachedDataUpToDate(v16, *(re::MeshManager **)(v18 + 32));
  }
  v19 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v6 + 32))(v6);
  v20 = re::ServiceLocator::serviceOrNull<re::ecs2::PhysicsSimulationService>(v19);
  if (v20
    && (v22 = (re::ecs2::PhysicsSimulationService *)v20,
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v20 + 56))(v20, 1),
        (v23 = re::ecs2::PhysicsSimulationService::physicsSimulationForEntity(v22, (const re::ecs2::Entity *)v1)) != 0))
  {
    v24 = *((_QWORD *)v23 + 7);
  }
  else
  {
    v24 = 0;
  }
  v29 = re::ecs2::RigComponentHelper::areAssetAndDependenciesLoaded(v12, v21);
  v30 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v6 + 32))(v6);
  v31 = re::ecs2::EntityComponentCollection::get(v10, (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::MeshSceneComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType);
  v32 = (unint64_t *)re::ecs2::EntityComponentCollection::get(v10, (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::IKParametersComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType);
  re::ecs2::RigComponent::updateRigRuntimeData(v12, v29, v24, v30, (uint64_t)v7, v31, v32);
  v33 = (re::ecs2::SkeletalPoseBufferComponent *)re::ecs2::EntityComponentCollection::getOrAdd(v10, (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::SkeletalPoseBufferComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType);
  re::ecs2::SkeletalPoseComponent::calculateSkeletalPoseBufferWithRig(a1, v7, v12, v33);
  return 1;
}

_QWORD *REPSOToolCreateFromMetallib(re *a1, int a2)
{
  uint64_t *v4;
  _QWORD *v5;
  _anonymous_namespace_ *v6;
  _anonymous_namespace_ *v7;

  v4 = re::globalAllocators(a1);
  v5 = (_QWORD *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v4[2] + 32))(v4[2], 984, 8);
  bzero(v5, 0x3D8uLL);
  ArcSharedObject::ArcSharedObject((ArcSharedObject *)v5, 0);
  *v5 = &off_24ED9D168;
  *(_OWORD *)(v5 + 5) = 0u;
  *(_OWORD *)(v5 + 7) = 0u;
  *(_OWORD *)(v5 + 9) = 0u;
  *(_OWORD *)(v5 + 11) = 0u;
  *(_OWORD *)(v5 + 13) = 0u;
  *((_DWORD *)v5 + 30) = 0;
  *(_OWORD *)(v5 + 3) = 0u;
  *(_QWORD *)((char *)v5 + 124) = 0x7FFFFFFFLL;
  v5[17] = 0;
  *((_OWORD *)v5 + 9) = 0u;
  *((_DWORD *)v5 + 40) = 0;
  *(_OWORD *)(v5 + 21) = 0u;
  *(_OWORD *)(v5 + 23) = 0u;
  *(_OWORD *)(v5 + 25) = 0u;
  *(_OWORD *)((char *)v5 + 212) = 0u;
  *(_QWORD *)((char *)v5 + 228) = 0x7FFFFFFFLL;
  *((_OWORD *)v5 + 15) = 0u;
  *((_OWORD *)v5 + 16) = 0u;
  *((_DWORD *)v5 + 68) = 0;
  *(_QWORD *)((char *)v5 + 276) = 0x7FFFFFFFLL;
  *((_OWORD *)v5 + 18) = 0u;
  *((_OWORD *)v5 + 19) = 0u;
  *((_DWORD *)v5 + 80) = 0;
  *(_QWORD *)((char *)v5 + 324) = 0x7FFFFFFFLL;
  *((_OWORD *)v5 + 21) = 0u;
  *((_OWORD *)v5 + 22) = 0u;
  *((_DWORD *)v5 + 92) = 0;
  *(_QWORD *)((char *)v5 + 372) = 0x7FFFFFFFLL;
  *((_OWORD *)v5 + 24) = 0u;
  *((_OWORD *)v5 + 25) = 0u;
  *((_DWORD *)v5 + 104) = 0;
  *(_QWORD *)((char *)v5 + 420) = 0x7FFFFFFFLL;
  *((_OWORD *)v5 + 27) = 0u;
  *((_OWORD *)v5 + 28) = 0u;
  *((_DWORD *)v5 + 116) = 0;
  *(_QWORD *)((char *)v5 + 468) = 0x7FFFFFFFLL;
  *((_OWORD *)v5 + 30) = 0u;
  *((_OWORD *)v5 + 31) = 0u;
  *((_DWORD *)v5 + 128) = 0;
  *(_QWORD *)((char *)v5 + 516) = 0x7FFFFFFFLL;
  *((_DWORD *)v5 + 140) = 0;
  *((_OWORD *)v5 + 33) = 0u;
  *((_OWORD *)v5 + 34) = 0u;
  *(_QWORD *)((char *)v5 + 564) = 0x7FFFFFFFLL;
  *((_DWORD *)v5 + 152) = 0;
  *((_OWORD *)v5 + 36) = 0u;
  *((_OWORD *)v5 + 37) = 0u;
  *(_QWORD *)((char *)v5 + 612) = 0x7FFFFFFFLL;
  *((_OWORD *)v5 + 39) = 0u;
  *((_DWORD *)v5 + 162) = 0;
  v5[80] = 0;
  *((_OWORD *)v5 + 41) = 0u;
  *((_OWORD *)v5 + 42) = 0u;
  *(_OWORD *)((char *)v5 + 684) = 0u;
  *(_QWORD *)((char *)v5 + 700) = 0x7FFFFFFFLL;
  v5[91] = 0;
  *((_DWORD *)v5 + 184) = 0;
  *(_OWORD *)(v5 + 89) = 0u;
  *((_DWORD *)v5 + 194) = 0;
  *(_OWORD *)(v5 + 93) = 0u;
  *(_OWORD *)(v5 + 95) = 0u;
  *((_DWORD *)v5 + 204) = 0;
  *((_OWORD *)v5 + 49) = 0u;
  *((_OWORD *)v5 + 50) = 0u;
  *((_DWORD *)v5 + 214) = 0;
  *(_OWORD *)(v5 + 103) = 0u;
  *(_OWORD *)(v5 + 105) = 0u;
  *(_OWORD *)((char *)v5 + 908) = 0u;
  *((_OWORD *)v5 + 55) = 0u;
  *((_OWORD *)v5 + 56) = 0u;
  *((_OWORD *)v5 + 54) = 0u;
  *(_QWORD *)((char *)v5 + 924) = 0x7FFFFFFFLL;
  v5[117] = 256;
  *((_OWORD *)v5 + 59) = 0u;
  *((_OWORD *)v5 + 60) = 0u;
  re::DynamicString::setCapacity(v5 + 118, 0);
  *((_BYTE *)v5 + 976) = 0;
  *((_DWORD *)v5 + 245) = 0;
  re::PSOToolManager::init((id *)v5 + 3, a1);
  v5[117] = a2;
  if (v5)
    return v5 + 1;
  else
    return 0;
}

uint64_t REPSOToolAddSearchPath(uint64_t a1, const char *a2)
{
  uint64_t v2;

  v2 = a1 - 8;
  if (!a1)
    v2 = 0;
  return re::PSOToolManager::addSearchPath((re::PSOToolManager *)(v2 + 24), a2);
}

uint64_t REPSOToolGenerateWrappingShaderJSONForMaterial(uint64_t a1, const char *a2, char *a3)
{
  uint64_t v5;
  re::PSOToolManager *v6;
  _anonymous_namespace_ *MaterialDefinitions;
  _anonymous_namespace_ *v8;
  uint64_t result;
  uint64_t v10;
  char v11;
  uint64_t v12;
  char v13;

  v5 = a1 - 8;
  if (!a1)
    v5 = 0;
  v6 = (re::PSOToolManager *)(v5 + 24);
  MaterialDefinitions = (_anonymous_namespace_ *)re::PSOToolManager::readMaterialDefinitions(v5 + 24);
  re::DynamicString::append((re::DynamicString *)&v12, ".rematerialdefinition", 0x15uLL);
  re::DynamicString::append((re::DynamicString *)&v10, ".mtlp-json", 0xAuLL);
  re::PSOToolManager::setCustomMaterialWrappingDefinition(v6, (const re::DynamicString *)&v12);
  re::PSOToolManager::serializeToURL((uint64_t)v6, a3);
  if (v10 && (v11 & 1) != 0)
    (*(void (**)(void))(*(_QWORD *)v10 + 40))();
  result = v12;
  if (v12)
  {
    if ((v13 & 1) != 0)
      return (*(uint64_t (**)(void))(*(_QWORD *)v12 + 40))();
  }
  return result;
}

uint64_t REPSOToolGenerateFrameworkJSON(uint64_t a1, uint64_t a2, char *a3)
{
  uint64_t v3;
  re::PSOToolManager *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  std::ios_base *v9;
  _QWORD *v10;
  uint64_t *v11;
  unsigned int v12;
  unsigned int v13;
  BOOL (*v16)(rapidjson::ParseResult *);
  uint64_t v17;
  int *v18;
  __int16 v19;
  __int128 v20;
  int v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  const char *v26;
  unsigned int v27;
  int *v28;
  uint64_t *v29;
  uint64_t *v30;
  unint64_t v31;
  unsigned int *v32;
  unsigned int v33;
  int *v34;
  int *v35;
  uint64_t *v36;
  uint64_t *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  const char *v43;
  const char *v44;
  unsigned int v45;
  int *v46;
  uint64_t *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  const char *v51;
  size_t v52;
  double v53;
  double v54;
  unsigned int v55;
  int *v56;
  uint64_t *v57;
  uint64_t v58;
  unsigned int v59;
  int *v60;
  uint64_t *v61;
  uint64_t v62;
  int *v63;
  uint64_t v64;
  int v65;
  unsigned int v66;
  int *v67;
  uint64_t *v68;
  uint64_t v69;
  int *v70;
  uint64_t v71;
  int v72;
  __n128 v73;
  unsigned int v74;
  int *v75;
  uint64_t *v76;
  uint64_t v77;
  uint64_t *v78;
  const char *v79;
  size_t v80;
  unsigned int v81;
  int *v82;
  uint64_t *v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  const char *v87;
  const char *v88;
  unsigned int v89;
  int *v90;
  char *v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  const char *v97;
  double v98;
  const char *v99;
  unsigned int v100;
  int *v101;
  double v102;
  double v103;
  unsigned int v104;
  int *v105;
  uint64_t *v106;
  uint64_t v107;
  uint64_t *v108;
  const char *v109;
  size_t v110;
  unsigned int v111;
  int *v112;
  uint64_t *v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  const char *v117;
  const char *v118;
  unsigned int v119;
  int *v120;
  char *v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  const char *v127;
  double v128;
  const char *v129;
  unsigned int v130;
  int *v131;
  uint64_t *v132;
  uint64_t v133;
  uint64_t v134;
  _anonymous_namespace_ *v135;
  int v136;
  unint64_t v137;
  unint64_t v138;
  unint64_t v139;
  unint64_t v140;
  __n128 v141;
  double v142;
  int v144;
  _QWORD *v145;
  uint64_t v146;
  _QWORD *v147;
  uint64_t v148;
  _anonymous_namespace_ *v150;
  _anonymous_namespace_ *v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  _OWORD v155[2];
  uint64_t v156[6];
  uint64_t v157[7];
  _QWORD v158[3];
  int v159;
  uint64_t v160;
  _OWORD v161[2];
  uint64_t v162[6];
  uint64_t v163[6];
  char v164;
  char *v165;
  char v166;
  __n128 v167;
  uint64_t v168;
  int v169;
  uint64_t v170;
  _QWORD v171[3];
  int v172;
  uint64_t v173;
  __int128 v174;
  _OWORD v175[2];
  uint64_t v176[6];
  uint64_t v177[6];
  char v178;
  _QWORD *v179;
  uint64_t v180;
  uint64_t *v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t *v184;
  uint64_t v185;
  uint64_t v186;
  char v187;
  _BYTE v188[48];
  __int128 v189;
  int v190;
  _BYTE v191[12];
  __int128 v192;
  __int128 v193;
  int v194;
  uint64_t v195;
  uint64_t v196;
  uint64_t *v197;
  unint64_t v198;
  unint64_t v199;
  int v200;
  uint64_t v201;
  uint64_t v202;
  const char *v203;
  uint64_t v204;
  int v205;
  uint64_t v206;
  int v207[4];
  __int128 v208;
  __int128 v209;
  void *v210[2];
  __int128 v211;
  uint64_t v212;
  __int128 v213;
  _QWORD v214[2];
  _BYTE v215[408];
  _QWORD v216[22];

  v216[19] = *MEMORY[0x24BDAC8D0];
  v3 = a1 - 8;
  if (!a1)
    v3 = 0;
  v150 = (_anonymous_namespace_ *)v3;
  v4 = (re::PSOToolManager *)(v3 + 24);
  re::PSOToolManager::readMaterialDefinitions(v3 + 24);
  v5 = MEMORY[0x24BEDB838];
  v6 = MEMORY[0x24BEDB838] + 64;
  v7 = *(_QWORD *)(MEMORY[0x24BEDB7E0] + 8);
  v8 = *(_QWORD *)(MEMORY[0x24BEDB7E0] + 16);
  v216[0] = MEMORY[0x24BEDB838] + 64;
  v214[0] = v7;
  *(_QWORD *)((char *)v214 + *(_QWORD *)(v7 - 24)) = v8;
  v214[1] = 0;
  v9 = (std::ios_base *)((char *)v214 + *(_QWORD *)(v214[0] - 24));
  std::ios_base::init(v9, v215);
  v9[1].__vftable = 0;
  v9[1].__fmtflags_ = -1;
  v214[0] = v5 + 24;
  v216[0] = v6;
  MEMORY[0x227692FD4](v215);
  if (!std::filebuf::open())
    std::ios_base::clear((std::ios_base *)((char *)v214 + *(_QWORD *)(v214[0] - 24)), *(_DWORD *)&v215[*(_QWORD *)(v214[0] - 24) + 16] | 4);
  v179 = v214;
  v181 = &v180;
  v182 = 4;
  v183 = 0;
  v186 = 0;
  v184 = &v180;
  v185 = 0;
  v187 = 0;
  rapidjson::BasicIStreamWrapper<std::istream>::Read((uint64_t)&v179);
  v211 = 0u;
  *(_OWORD *)v210 = 0u;
  v208 = 0u;
  v209 = 0u;
  *(_OWORD *)v207 = 0u;
  v212 = 1024;
  LODWORD(v213) = 0;
  *((_QWORD *)&v213 + 1) = 0;
  v10 = (_QWORD *)operator new();
  *((_QWORD *)&v208 + 1) = rapidjson::MemoryPoolAllocator<rapidjson::CrtAllocator>::MemoryPoolAllocator(v10, 0x10000, 0);
  *(_QWORD *)&v209 = *((_QWORD *)&v208 + 1);
  memset(&v188[8], 0, 32);
  *(_QWORD *)v188 = *((_QWORD *)&v209 + 1);
  *(_QWORD *)&v188[40] = 256;
  v190 = 2;
  LODWORD(v189) = 0;
  *((_QWORD *)&v189 + 1) = 0;
  while (1)
  {
    v11 = v184;
    v12 = *(unsigned __int8 *)v184;
    if (v12 > 0x20)
      goto LABEL_10;
    if (((1 << v12) & 0x100002600) == 0)
      break;
    rapidjson::BasicIStreamWrapper<std::istream>::Read((uint64_t)&v179);
  }
  if (!*(_BYTE *)v184)
  {
    v144 = 1;
LABEL_224:
    LODWORD(v189) = v144;
    *((_QWORD *)&v189 + 1) = (char *)v11 + v186 - (char *)v181;
    goto LABEL_20;
  }
LABEL_10:
  rapidjson::GenericReader<rapidjson::UTF8<char>,rapidjson::UTF8<char>,rapidjson::CrtAllocator>::ParseValue<0u,rapidjson::BasicIStreamWrapper<std::istream>,rapidjson::GenericDocument<rapidjson::UTF8<char>,rapidjson::MemoryPoolAllocator<rapidjson::CrtAllocator>,rapidjson::CrtAllocator>>((uint64_t *)v188, &v179, (uint64_t *)v207);
  if (!(_DWORD)v189)
  {
    while (1)
    {
      v11 = v184;
      v13 = *(unsigned __int8 *)v184;
      if (v13 > 0x20 || ((1 << v13) & 0x100002600) == 0)
        break;
      rapidjson::BasicIStreamWrapper<std::istream>::Read((uint64_t)&v179);
    }
    if (*(_BYTE *)v184 && (_DWORD)v189 == 0)
    {
      v144 = 2;
      goto LABEL_224;
    }
  }
LABEL_20:
  *(_QWORD *)&v188[24] = *(_QWORD *)&v188[16];
  v213 = v189;
  if ((_DWORD)v189)
    v16 = 0;
  else
    v16 = rapidjson::ParseResult::IsError;
  if (v16)
  {
    v17 = v211;
    v18 = (int *)(v211 - 24);
    *(_QWORD *)&v211 = v18;
    if (v18 != v207)
    {
      v19 = *(_WORD *)(v17 - 2);
      *(_WORD *)(v17 - 2) = 0;
      v20 = *(_OWORD *)v18;
      v21 = v18[4];
      WORD2(v208) = *((_WORD *)v18 + 10);
      LODWORD(v208) = v21;
      *(_OWORD *)v207 = v20;
      WORD3(v208) = v19;
    }
  }
  *(void **)&v211 = v210[1];
  free(v210[1]);
  v211 = 0uLL;
  v210[1] = 0;
  rapidjson::internal::Stack<rapidjson::CrtAllocator>::Destroy((uint64_t)v188);
  *(_QWORD *)&v188[16] = 0x405000000000000;
  *(_QWORD *)&v188[8] = "SearchPaths";
  *(_QWORD *)v188 = 11;
  v22 = rapidjson::GenericValue<rapidjson::UTF8<char>,rapidjson::MemoryPoolAllocator<rapidjson::CrtAllocator>>::operator[]<rapidjson::MemoryPoolAllocator<rapidjson::CrtAllocator>>(v207[0], *(int **)&v207[2], (unsigned int *)v188);
  v23 = *(unsigned int *)v22;
  if ((_DWORD)v23)
  {
    v24 = v22[1];
    v25 = 24 * v23;
    do
    {
      if ((*(_WORD *)(v24 + 22) & 0x1000) != 0)
        v26 = (const char *)v24;
      else
        v26 = *(const char **)(v24 + 8);
      re::PSOToolManager::addSearchPath(v4, v26);
      v24 += 24;
      v25 -= 24;
    }
    while (v25);
  }
  v27 = v207[0];
  v28 = *(int **)&v207[2];
  if (&v28[12 * v27] != rapidjson::GenericValue<rapidjson::UTF8<char>,rapidjson::MemoryPoolAllocator<rapidjson::CrtAllocator>>::FindMember(v207[0], *(int **)&v207[2], "MaxPermutations"))
  {
    *(_QWORD *)&v188[16] = 0x405000000000000;
    *(_QWORD *)&v188[8] = "MaxPermutations";
    *(_QWORD *)v188 = 15;
    *((_QWORD *)v150 + 117) = *(int *)rapidjson::GenericValue<rapidjson::UTF8<char>,rapidjson::MemoryPoolAllocator<rapidjson::CrtAllocator>>::operator[]<rapidjson::MemoryPoolAllocator<rapidjson::CrtAllocator>>(v27, v28, (unsigned int *)v188);
    v27 = v207[0];
    v28 = *(int **)&v207[2];
  }
  *(_QWORD *)&v188[16] = 0x405000000000000;
  *(_QWORD *)&v188[8] = "Techniques";
  *(_QWORD *)v188 = 10;
  v29 = rapidjson::GenericValue<rapidjson::UTF8<char>,rapidjson::MemoryPoolAllocator<rapidjson::CrtAllocator>>::operator[]<rapidjson::MemoryPoolAllocator<rapidjson::CrtAllocator>>(v27, v28, (unsigned int *)v188);
  if (*(_DWORD *)v29)
  {
    v30 = v29;
    v31 = 0;
    do
    {
      v32 = (unsigned int *)(v30[1] + 24 * v31);
      v33 = *v32;
      v34 = (int *)*((_QWORD *)v32 + 1);
      v35 = &v34[12 * *v32];
      if (v35 == rapidjson::GenericValue<rapidjson::UTF8<char>,rapidjson::MemoryPoolAllocator<rapidjson::CrtAllocator>>::FindMember(*v32, v34, "TechniqueNames"))
      {
        v145 = std::operator<<[abi:nn180100]<std::char_traits<char>>(MEMORY[0x24BEDB310], "error: technique json does not contain TechniqueNames array");
        std::endl[abi:nn180100]<char,std::char_traits<char>>(v145);
        re::internal::assertLog((re::internal *)4, v146, "assertion failure: '%s' (%s:line %i) ", "false", "REPSOToolGenerateFrameworkJSON", 77);
        _os_crash();
        __break(1u);
LABEL_226:
        v147 = std::operator<<[abi:nn180100]<std::char_traits<char>>(MEMORY[0x24BEDB310], "error: technique json does not contain Materials array");
        std::endl[abi:nn180100]<char,std::char_traits<char>>(v147);
        re::internal::assertLog((re::internal *)4, v148, "assertion failure: '%s' (%s:line %i) ", "false", "REPSOToolGenerateFrameworkJSON", 82);
        _os_crash();
        __break(1u);
      }
      if (v35 == rapidjson::GenericValue<rapidjson::UTF8<char>,rapidjson::MemoryPoolAllocator<rapidjson::CrtAllocator>>::FindMember(v33, v34, "Materials"))goto LABEL_226;
      *(_QWORD *)&v188[16] = 0x405000000000000;
      *(_QWORD *)&v188[8] = "TechniqueNames";
      *(_QWORD *)v188 = 14;
      v36 = rapidjson::GenericValue<rapidjson::UTF8<char>,rapidjson::MemoryPoolAllocator<rapidjson::CrtAllocator>>::operator[]<rapidjson::MemoryPoolAllocator<rapidjson::CrtAllocator>>(*v32, *((int **)v32 + 1), (unsigned int *)v188);
      *(_QWORD *)&v188[16] = 0x405000000000000;
      *(_QWORD *)&v188[8] = "Materials";
      *(_QWORD *)v188 = 9;
      v37 = rapidjson::GenericValue<rapidjson::UTF8<char>,rapidjson::MemoryPoolAllocator<rapidjson::CrtAllocator>>::operator[]<rapidjson::MemoryPoolAllocator<rapidjson::CrtAllocator>>(*v32, *((int **)v32 + 1), (unsigned int *)v188);
      if (*(_DWORD *)v37)
      {
        v38 = v37[1];
        v39 = v38 + 24 * *(unsigned int *)v37;
        do
        {
          v40 = *(unsigned int *)v36;
          if ((_DWORD)v40)
          {
            v41 = v36[1];
            v42 = 24 * v40;
            do
            {
              if ((*(_WORD *)(v38 + 22) & 0x1000) != 0)
                v43 = (const char *)v38;
              else
                v43 = *(const char **)(v38 + 8);
              if ((*(_WORD *)(v41 + 22) & 0x1000) != 0)
                v44 = (const char *)v41;
              else
                v44 = *(const char **)(v41 + 8);
              re::PSOToolManager::generateFunctionVariationsForTechnique(v4, v43, v44);
              v41 += 24;
              v42 -= 24;
            }
            while (v42);
          }
          v38 += 24;
        }
        while (v38 != v39);
      }
      ++v31;
    }
    while (v31 < *(unsigned int *)v30);
  }
  v45 = v207[0];
  v46 = *(int **)&v207[2];
  if (&v46[12 * v45] != rapidjson::GenericValue<rapidjson::UTF8<char>,rapidjson::MemoryPoolAllocator<rapidjson::CrtAllocator>>::FindMember(v207[0], *(int **)&v207[2], "ComputeShaders"))
  {
    *(_QWORD *)&v188[16] = 0x405000000000000;
    *(_QWORD *)&v188[8] = "ComputeShaders";
    *(_QWORD *)v188 = 14;
    v47 = rapidjson::GenericValue<rapidjson::UTF8<char>,rapidjson::MemoryPoolAllocator<rapidjson::CrtAllocator>>::operator[]<rapidjson::MemoryPoolAllocator<rapidjson::CrtAllocator>>(v45, v46, (unsigned int *)v188);
    v48 = *(unsigned int *)v47;
    if ((_DWORD)v48)
    {
      v49 = v47[1];
      v50 = 24 * v48;
      do
      {
        memset(v188, 0, 32);
        re::DynamicString::setCapacity(v188, 0);
        v190 = 0;
        *(_OWORD *)&v188[32] = 0u;
        v189 = 0u;
        *(_QWORD *)v191 = 0x7FFFFFFFLL;
        v192 = 0u;
        v193 = 0u;
        v194 = 0;
        v195 = 0x7FFFFFFFLL;
        LOBYTE(v196) = 0;
        if ((*(_WORD *)(v49 + 22) & 0x1000) != 0)
          v51 = (const char *)v49;
        else
          v51 = *(const char **)(v49 + 8);
        v52 = strlen(v51);
        v202 = (uint64_t)v51;
        v203 = (const char *)v52;
        re::DynamicString::operator=((re::DynamicString *)v188, (uint64_t)&v202);
        re::DynamicString::DynamicString((re::DynamicString *)v175, (const re::DynamicString *)v188);
        re::HashTable<re::DynamicString,re::DynamicString,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::HashTable((uint64_t)v176, (uint64_t)&v188[32]);
        re::HashTable<re::DynamicString,re::DynamicArray<re::DynamicString>,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::HashTable((uint64_t)v177, (uint64_t)&v192);
        v178 = v196;
        re::DynamicArray<re::PSOToolComputeDescriptor>::add((_anonymous_namespace_ *)((char *)v150 + 712), (re::DynamicString *)v175);
        re::HashTable<re::DynamicString,re::DynamicArray<re::DynamicString>,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::deinit(v177);
        v53 = re::HashTable<re::DynamicString,re::DynamicString,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::deinit(v176);
        if (*(_QWORD *)&v175[0])
        {
          if ((BYTE8(v175[0]) & 1) != 0)
            (*(void (**)(double))(**(_QWORD **)&v175[0] + 40))(v53);
          memset(v175, 0, sizeof(v175));
        }
        re::HashTable<re::DynamicString,re::DynamicArray<re::DynamicString>,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::deinit((uint64_t *)&v192);
        v54 = re::HashTable<re::DynamicString,re::DynamicString,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::deinit((uint64_t *)&v188[32]);
        v47 = *(uint64_t **)v188;
        if (*(_QWORD *)v188 && (v188[8] & 1) != 0)
          v47 = (uint64_t *)(*(uint64_t (**)(double))(**(_QWORD **)v188 + 40))(v54);
        v49 += 24;
        v50 -= 24;
      }
      while (v50);
    }
  }
  v55 = v207[0];
  v56 = *(int **)&v207[2];
  if (&v56[12 * v55] != rapidjson::GenericValue<rapidjson::UTF8<char>,rapidjson::MemoryPoolAllocator<rapidjson::CrtAllocator>>::FindMember(v207[0], *(int **)&v207[2], "CustomClearShaders"))
  {
    *(_QWORD *)&v188[16] = 0x405000000000000;
    *(_QWORD *)&v188[8] = "CustomClearShaders";
    *(_QWORD *)v188 = 18;
    v57 = rapidjson::GenericValue<rapidjson::UTF8<char>,rapidjson::MemoryPoolAllocator<rapidjson::CrtAllocator>>::operator[]<rapidjson::MemoryPoolAllocator<rapidjson::CrtAllocator>>(v55, v56, (unsigned int *)v188);
    if (*(_DWORD *)v57)
    {
      v58 = v57[1];
      v153 = v58 + 24 * *(unsigned int *)v57;
      do
      {
        memset(v188, 0, 28);
        *(_QWORD *)&v191[4] = 0;
        *(_OWORD *)&v188[32] = 0u;
        v189 = 0u;
        v190 = 0;
        v192 = xmmword_2261B0CE0;
        v59 = *(_DWORD *)v58;
        v60 = *(int **)(v58 + 8);
        if (&v60[12 * v59] != rapidjson::GenericValue<rapidjson::UTF8<char>,rapidjson::MemoryPoolAllocator<rapidjson::CrtAllocator>>::FindMember(*(_DWORD *)v58, v60, "sampleCount"))
        {
          v204 = 0x405000000000000;
          v203 = "sampleCount";
          v202 = 11;
          LODWORD(v192) = *(_DWORD *)rapidjson::GenericValue<rapidjson::UTF8<char>,rapidjson::MemoryPoolAllocator<rapidjson::CrtAllocator>>::operator[]<rapidjson::MemoryPoolAllocator<rapidjson::CrtAllocator>>(*(_DWORD *)v58, *(int **)(v58 + 8), (unsigned int *)&v202);
          v59 = *(_DWORD *)v58;
          v60 = *(int **)(v58 + 8);
        }
        if (&v60[12 * v59] != rapidjson::GenericValue<rapidjson::UTF8<char>,rapidjson::MemoryPoolAllocator<rapidjson::CrtAllocator>>::FindMember(v59, v60, "maxVertexAmplificationCount"))
        {
          v204 = 0x405000000000000;
          v203 = "maxVertexAmplificationCount";
          v202 = 27;
          DWORD1(v192) = *(_DWORD *)rapidjson::GenericValue<rapidjson::UTF8<char>,rapidjson::MemoryPoolAllocator<rapidjson::CrtAllocator>>::operator[]<rapidjson::MemoryPoolAllocator<rapidjson::CrtAllocator>>(*(_DWORD *)v58, *(int **)(v58 + 8), (unsigned int *)&v202);
          v59 = *(_DWORD *)v58;
          v60 = *(int **)(v58 + 8);
        }
        if (&v60[12 * v59] != rapidjson::GenericValue<rapidjson::UTF8<char>,rapidjson::MemoryPoolAllocator<rapidjson::CrtAllocator>>::FindMember(v59, v60, "depth"))
        {
          v204 = 0x405000000000000;
          v203 = "depth";
          v202 = 5;
          DWORD2(v192) = *(_DWORD *)rapidjson::GenericValue<rapidjson::UTF8<char>,rapidjson::MemoryPoolAllocator<rapidjson::CrtAllocator>>::operator[]<rapidjson::MemoryPoolAllocator<rapidjson::CrtAllocator>>(*(_DWORD *)v58, *(int **)(v58 + 8), (unsigned int *)&v202);
          v59 = *(_DWORD *)v58;
          v60 = *(int **)(v58 + 8);
        }
        if (&v60[12 * v59] != rapidjson::GenericValue<rapidjson::UTF8<char>,rapidjson::MemoryPoolAllocator<rapidjson::CrtAllocator>>::FindMember(v59, v60, "stencil"))
        {
          v204 = 0x405000000000000;
          v203 = "stencil";
          v202 = 7;
          HIDWORD(v192) = *(_DWORD *)rapidjson::GenericValue<rapidjson::UTF8<char>,rapidjson::MemoryPoolAllocator<rapidjson::CrtAllocator>>::operator[]<rapidjson::MemoryPoolAllocator<rapidjson::CrtAllocator>>(*(_DWORD *)v58, *(int **)(v58 + 8), (unsigned int *)&v202);
          v59 = *(_DWORD *)v58;
          v60 = *(int **)(v58 + 8);
        }
        if (&v60[12 * v59] != rapidjson::GenericValue<rapidjson::UTF8<char>,rapidjson::MemoryPoolAllocator<rapidjson::CrtAllocator>>::FindMember(v59, v60, "FunctionConstants"))
        {
          v204 = 0x405000000000000;
          v203 = "FunctionConstants";
          v202 = 17;
          v61 = rapidjson::GenericValue<rapidjson::UTF8<char>,rapidjson::MemoryPoolAllocator<rapidjson::CrtAllocator>>::operator[]<rapidjson::MemoryPoolAllocator<rapidjson::CrtAllocator>>(*(_DWORD *)v58, *(int **)(v58 + 8), (unsigned int *)&v202);
          v62 = *(unsigned int *)v61;
          if ((_DWORD)v62)
          {
            v63 = (int *)v61[1];
            v64 = 24 * v62;
            do
            {
              v65 = *v63;
              v63 += 6;
              LODWORD(v202) = v65;
              re::DynamicArray<int>::add(v188, &v202);
              v64 -= 24;
            }
            while (v64);
          }
        }
        v66 = *(_DWORD *)v58;
        v67 = *(int **)(v58 + 8);
        if (&v67[12 * v66] != rapidjson::GenericValue<rapidjson::UTF8<char>,rapidjson::MemoryPoolAllocator<rapidjson::CrtAllocator>>::FindMember(*(_DWORD *)v58, v67, "PixelFormats"))
        {
          v204 = 0x405000000000000;
          v203 = "PixelFormats";
          v202 = 12;
          v68 = rapidjson::GenericValue<rapidjson::UTF8<char>,rapidjson::MemoryPoolAllocator<rapidjson::CrtAllocator>>::operator[]<rapidjson::MemoryPoolAllocator<rapidjson::CrtAllocator>>(*(_DWORD *)v58, *(int **)(v58 + 8), (unsigned int *)&v202);
          v69 = *(unsigned int *)v68;
          if ((_DWORD)v69)
          {
            v70 = (int *)v68[1];
            v71 = 24 * v69;
            do
            {
              v72 = *v70;
              v70 += 6;
              LODWORD(v202) = v72;
              re::DynamicArray<int>::add(&v188[40], &v202);
              v71 -= 24;
            }
            while (v71);
          }
        }
        re::DynamicArray<float>::DynamicArray((uint64_t)&v167, (uint64_t *)v188);
        re::DynamicArray<float>::DynamicArray((uint64_t)v171, (uint64_t *)&v188[40]);
        v174 = v192;
        v73 = re::DynamicArray<re::PSOToolCustomClearDescriptor>::add((_anonymous_namespace_ *)((char *)v150 + 792), &v167);
        if (v171[0])
        {
          if (v173)
            (*(void (**)(__n128))(*(_QWORD *)v171[0] + 40))(v73);
          v173 = 0;
          memset(v171, 0, sizeof(v171));
          ++v172;
        }
        if (v167.n128_u64[0])
        {
          if (v170)
            (*(void (**)(__n128))(*(_QWORD *)v167.n128_u64[0] + 40))(v73);
          v170 = 0;
          v168 = 0;
          v167 = 0uLL;
          ++v169;
        }
        if (*(_QWORD *)&v188[40])
        {
          if (*(_QWORD *)&v191[4])
            (*(void (**)(__n128))(**(_QWORD **)&v188[40] + 40))(v73);
          *(_QWORD *)&v191[4] = 0;
          v189 = 0uLL;
          *(_QWORD *)&v188[40] = 0;
          ++v190;
        }
        if (*(_QWORD *)v188 && *(_QWORD *)&v188[32])
          (*(void (**)(__n128))(**(_QWORD **)v188 + 40))(v73);
        v58 += 24;
      }
      while (v58 != v153);
    }
  }
  v74 = v207[0];
  v75 = *(int **)&v207[2];
  if (&v75[12 * v74] != rapidjson::GenericValue<rapidjson::UTF8<char>,rapidjson::MemoryPoolAllocator<rapidjson::CrtAllocator>>::FindMember(v207[0], *(int **)&v207[2], "SpecializedComputeShaders"))
  {
    *(_QWORD *)&v188[16] = 0x405000000000000;
    *(_QWORD *)&v188[8] = "SpecializedComputeShaders";
    *(_QWORD *)v188 = 25;
    v76 = rapidjson::GenericValue<rapidjson::UTF8<char>,rapidjson::MemoryPoolAllocator<rapidjson::CrtAllocator>>::operator[]<rapidjson::MemoryPoolAllocator<rapidjson::CrtAllocator>>(v74, v75, (unsigned int *)v188);
    if (*(_DWORD *)v76)
    {
      v77 = v76[1];
      v154 = v77 + 24 * *(unsigned int *)v76;
      do
      {
        memset(v188, 0, 32);
        re::DynamicString::setCapacity(v188, 0);
        v190 = 0;
        *(_OWORD *)&v188[32] = 0u;
        v189 = 0u;
        *(_QWORD *)v191 = 0x7FFFFFFFLL;
        v192 = 0u;
        v193 = 0u;
        v194 = 0;
        v195 = 0x7FFFFFFFLL;
        LOBYTE(v196) = 0;
        v204 = 0x405000000000000;
        v203 = "name";
        v202 = 4;
        v78 = rapidjson::GenericValue<rapidjson::UTF8<char>,rapidjson::MemoryPoolAllocator<rapidjson::CrtAllocator>>::operator[]<rapidjson::MemoryPoolAllocator<rapidjson::CrtAllocator>>(*(_DWORD *)v77, *(int **)(v77 + 8), (unsigned int *)&v202);
        if ((*((_WORD *)v78 + 11) & 0x1000) != 0)
          v79 = (const char *)v78;
        else
          v79 = (const char *)v78[1];
        v80 = strlen(v79);
        v202 = (uint64_t)v79;
        v203 = (const char *)v80;
        re::DynamicString::operator=((re::DynamicString *)v188, (uint64_t)&v202);
        v81 = *(_DWORD *)v77;
        v82 = *(int **)(v77 + 8);
        if (&v82[12 * v81] != rapidjson::GenericValue<rapidjson::UTF8<char>,rapidjson::MemoryPoolAllocator<rapidjson::CrtAllocator>>::FindMember(*(_DWORD *)v77, v82, "constants"))
        {
          v204 = 0x405000000000000;
          v203 = "constants";
          v202 = 9;
          v83 = rapidjson::GenericValue<rapidjson::UTF8<char>,rapidjson::MemoryPoolAllocator<rapidjson::CrtAllocator>>::operator[]<rapidjson::MemoryPoolAllocator<rapidjson::CrtAllocator>>(*(_DWORD *)v77, *(int **)(v77 + 8), (unsigned int *)&v202);
          v84 = *(unsigned int *)v83;
          if ((_DWORD)v84)
          {
            v85 = 48 * v84;
            v86 = v83[1] + 24;
            do
            {
              if ((*(_WORD *)(v86 - 2) & 0x1000) != 0)
                v87 = (const char *)(v86 - 24);
              else
                v87 = *(const char **)(v86 - 16);
              if ((*(_WORD *)(v86 + 22) & 0x1000) != 0)
                v88 = (const char *)v86;
              else
                v88 = *(const char **)(v86 + 8);
              v165 = (char *)v88;
              re::HashTable<re::DynamicString,re::DynamicString,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::addNew<char const*>((uint64_t)&v188[32], (re::DynamicString *)&v202, (const char **)&v165);
              v83 = (uint64_t *)v202;
              if (v202 && (v203 & 1) != 0)
                v83 = (uint64_t *)(*(uint64_t (**)(void))(*(_QWORD *)v202 + 40))();
              v86 += 48;
              v85 -= 48;
            }
            while (v85);
          }
        }
        v89 = *(_DWORD *)v77;
        v90 = *(int **)(v77 + 8);
        if (&v90[12 * v89] != rapidjson::GenericValue<rapidjson::UTF8<char>,rapidjson::MemoryPoolAllocator<rapidjson::CrtAllocator>>::FindMember(*(_DWORD *)v77, v90, "variations"))
        {
          v204 = 0x405000000000000;
          v203 = "variations";
          v202 = 10;
          v91 = (char *)rapidjson::GenericValue<rapidjson::UTF8<char>,rapidjson::MemoryPoolAllocator<rapidjson::CrtAllocator>>::operator[]<rapidjson::MemoryPoolAllocator<rapidjson::CrtAllocator>>(*(_DWORD *)v77, *(int **)(v77 + 8), (unsigned int *)&v202);
          if (*(_DWORD *)v91)
          {
            v92 = *((_QWORD *)v91 + 1);
            v93 = v92 + 48 * *(unsigned int *)v91;
            do
            {
              v206 = 0;
              v205 = 0;
              v204 = 0;
              v202 = 0;
              v203 = 0;
              v94 = *(unsigned int *)(v92 + 24);
              if ((_DWORD)v94)
              {
                v95 = *(_QWORD *)(v92 + 32);
                v96 = 24 * v94;
                do
                {
                  if ((*(_WORD *)(v95 + 22) & 0x1000) != 0)
                    v97 = (const char *)v95;
                  else
                    v97 = *(const char **)(v95 + 8);
                  v98 = re::DynamicArray<re::DynamicString>::add((_anonymous_namespace_ *)&v202, &v165);
                  v91 = v165;
                  if (v165 && (v166 & 1) != 0)
                    v91 = (char *)(*(uint64_t (**)(double))(*(_QWORD *)v165 + 40))(v98);
                  v95 += 24;
                  v96 -= 24;
                }
                while (v96);
              }
              if ((*(_WORD *)(v92 + 22) & 0x1000) != 0)
                v99 = (const char *)v92;
              else
                v99 = *(const char **)(v92 + 8);
              re::HashTable<re::DynamicString,re::DynamicArray<re::DynamicString>,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::add<re::DynamicArray<re::DynamicString>&>((uint64_t)&v192, (re::DynamicString *)&v165, &v202);
              if (v165 && (v166 & 1) != 0)
                (*(void (**)(void))(*(_QWORD *)v165 + 40))();
              v91 = (char *)re::DynamicArray<re::DynamicString>::deinit((uint64_t)&v202);
              v92 += 48;
            }
            while (v92 != v93);
          }
        }
        v100 = *(_DWORD *)v77;
        v101 = *(int **)(v77 + 8);
        if (&v101[12 * v100] != rapidjson::GenericValue<rapidjson::UTF8<char>,rapidjson::MemoryPoolAllocator<rapidjson::CrtAllocator>>::FindMember(*(_DWORD *)v77, v101, "threadGroupSizeIsMultipleOfThreadExecutionWidth"))LOBYTE(v196) = 1;
        re::DynamicString::DynamicString((re::DynamicString *)v161, (const re::DynamicString *)v188);
        re::HashTable<re::DynamicString,re::DynamicString,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::HashTable((uint64_t)v162, (uint64_t)&v188[32]);
        re::HashTable<re::DynamicString,re::DynamicArray<re::DynamicString>,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::HashTable((uint64_t)v163, (uint64_t)&v192);
        v164 = v196;
        re::DynamicArray<re::PSOToolComputeDescriptor>::add((_anonymous_namespace_ *)((char *)v150 + 712), (re::DynamicString *)v161);
        re::HashTable<re::DynamicString,re::DynamicArray<re::DynamicString>,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::deinit(v163);
        v102 = re::HashTable<re::DynamicString,re::DynamicString,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::deinit(v162);
        if (*(_QWORD *)&v161[0])
        {
          if ((BYTE8(v161[0]) & 1) != 0)
            (*(void (**)(double))(**(_QWORD **)&v161[0] + 40))(v102);
          memset(v161, 0, sizeof(v161));
        }
        re::HashTable<re::DynamicString,re::DynamicArray<re::DynamicString>,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::deinit((uint64_t *)&v192);
        v103 = re::HashTable<re::DynamicString,re::DynamicString,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::deinit((uint64_t *)&v188[32]);
        v76 = *(uint64_t **)v188;
        if (*(_QWORD *)v188 && (v188[8] & 1) != 0)
          v76 = (uint64_t *)(*(uint64_t (**)(double))(**(_QWORD **)v188 + 40))(v103);
        v77 += 24;
      }
      while (v77 != v154);
    }
  }
  v104 = v207[0];
  v105 = *(int **)&v207[2];
  if (&v105[12 * v104] != rapidjson::GenericValue<rapidjson::UTF8<char>,rapidjson::MemoryPoolAllocator<rapidjson::CrtAllocator>>::FindMember(v207[0], *(int **)&v207[2], "TileShaders"))
  {
    *(_QWORD *)&v188[16] = 0x405000000000000;
    *(_QWORD *)&v188[8] = "TileShaders";
    *(_QWORD *)v188 = 11;
    v106 = rapidjson::GenericValue<rapidjson::UTF8<char>,rapidjson::MemoryPoolAllocator<rapidjson::CrtAllocator>>::operator[]<rapidjson::MemoryPoolAllocator<rapidjson::CrtAllocator>>(v104, v105, (unsigned int *)v188);
    if (*(_DWORD *)v106)
    {
      v107 = v106[1];
      v152 = v107 + 24 * *(unsigned int *)v106;
      v151 = (_anonymous_namespace_ *)((char *)v150 + 752);
      do
      {
        memset(v188, 0, 32);
        re::DynamicString::setCapacity(v188, 0);
        v190 = 0;
        *(_OWORD *)&v188[32] = 0u;
        v189 = 0u;
        *(_QWORD *)v191 = 0x7FFFFFFFLL;
        v192 = 0u;
        v193 = 0u;
        v194 = 0;
        v195 = 0x7FFFFFFFLL;
        LOBYTE(v196) = 1;
        HIDWORD(v196) = 1;
        v201 = 0;
        v198 = 0;
        v199 = 0;
        v197 = 0;
        v200 = 0;
        v204 = 0x405000000000000;
        v203 = "name";
        v202 = 4;
        v108 = rapidjson::GenericValue<rapidjson::UTF8<char>,rapidjson::MemoryPoolAllocator<rapidjson::CrtAllocator>>::operator[]<rapidjson::MemoryPoolAllocator<rapidjson::CrtAllocator>>(*(_DWORD *)v107, *(int **)(v107 + 8), (unsigned int *)&v202);
        if ((*((_WORD *)v108 + 11) & 0x1000) != 0)
          v109 = (const char *)v108;
        else
          v109 = (const char *)v108[1];
        v110 = strlen(v109);
        v202 = (uint64_t)v109;
        v203 = (const char *)v110;
        re::DynamicString::operator=((re::DynamicString *)v188, (uint64_t)&v202);
        v111 = *(_DWORD *)v107;
        v112 = *(int **)(v107 + 8);
        if (&v112[12 * v111] != rapidjson::GenericValue<rapidjson::UTF8<char>,rapidjson::MemoryPoolAllocator<rapidjson::CrtAllocator>>::FindMember(*(_DWORD *)v107, v112, "constants"))
        {
          v204 = 0x405000000000000;
          v203 = "constants";
          v202 = 9;
          v113 = rapidjson::GenericValue<rapidjson::UTF8<char>,rapidjson::MemoryPoolAllocator<rapidjson::CrtAllocator>>::operator[]<rapidjson::MemoryPoolAllocator<rapidjson::CrtAllocator>>(*(_DWORD *)v107, *(int **)(v107 + 8), (unsigned int *)&v202);
          v114 = *(unsigned int *)v113;
          if ((_DWORD)v114)
          {
            v115 = 48 * v114;
            v116 = v113[1] + 24;
            do
            {
              if ((*(_WORD *)(v116 - 2) & 0x1000) != 0)
                v117 = (const char *)(v116 - 24);
              else
                v117 = *(const char **)(v116 - 16);
              if ((*(_WORD *)(v116 + 22) & 0x1000) != 0)
                v118 = (const char *)v116;
              else
                v118 = *(const char **)(v116 + 8);
              v165 = (char *)v118;
              re::HashTable<re::DynamicString,re::DynamicString,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::addNew<char const*>((uint64_t)&v188[32], (re::DynamicString *)&v202, (const char **)&v165);
              v113 = (uint64_t *)v202;
              if (v202 && (v203 & 1) != 0)
                v113 = (uint64_t *)(*(uint64_t (**)(void))(*(_QWORD *)v202 + 40))();
              v116 += 48;
              v115 -= 48;
            }
            while (v115);
          }
        }
        v119 = *(_DWORD *)v107;
        v120 = *(int **)(v107 + 8);
        if (&v120[12 * v119] != rapidjson::GenericValue<rapidjson::UTF8<char>,rapidjson::MemoryPoolAllocator<rapidjson::CrtAllocator>>::FindMember(*(_DWORD *)v107, v120, "variations"))
        {
          v204 = 0x405000000000000;
          v203 = "variations";
          v202 = 10;
          v121 = (char *)rapidjson::GenericValue<rapidjson::UTF8<char>,rapidjson::MemoryPoolAllocator<rapidjson::CrtAllocator>>::operator[]<rapidjson::MemoryPoolAllocator<rapidjson::CrtAllocator>>(*(_DWORD *)v107, *(int **)(v107 + 8), (unsigned int *)&v202);
          if (*(_DWORD *)v121)
          {
            v122 = *((_QWORD *)v121 + 1);
            v123 = v122 + 48 * *(unsigned int *)v121;
            do
            {
              v206 = 0;
              v205 = 0;
              v204 = 0;
              v202 = 0;
              v203 = 0;
              v124 = *(unsigned int *)(v122 + 24);
              if ((_DWORD)v124)
              {
                v125 = *(_QWORD *)(v122 + 32);
                v126 = 24 * v124;
                do
                {
                  if ((*(_WORD *)(v125 + 22) & 0x1000) != 0)
                    v127 = (const char *)v125;
                  else
                    v127 = *(const char **)(v125 + 8);
                  v128 = re::DynamicArray<re::DynamicString>::add((_anonymous_namespace_ *)&v202, &v165);
                  v121 = v165;
                  if (v165 && (v166 & 1) != 0)
                    v121 = (char *)(*(uint64_t (**)(double))(*(_QWORD *)v165 + 40))(v128);
                  v125 += 24;
                  v126 -= 24;
                }
                while (v126);
              }
              if ((*(_WORD *)(v122 + 22) & 0x1000) != 0)
                v129 = (const char *)v122;
              else
                v129 = *(const char **)(v122 + 8);
              re::HashTable<re::DynamicString,re::DynamicArray<re::DynamicString>,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::add<re::DynamicArray<re::DynamicString>&>((uint64_t)&v192, (re::DynamicString *)&v165, &v202);
              if (v165 && (v166 & 1) != 0)
                (*(void (**)(void))(*(_QWORD *)v165 + 40))();
              v121 = (char *)re::DynamicArray<re::DynamicString>::deinit((uint64_t)&v202);
              v122 += 48;
            }
            while (v122 != v123);
          }
        }
        v130 = *(_DWORD *)v107;
        v131 = *(int **)(v107 + 8);
        if (&v131[12 * v130] != rapidjson::GenericValue<rapidjson::UTF8<char>,rapidjson::MemoryPoolAllocator<rapidjson::CrtAllocator>>::FindMember(*(_DWORD *)v107, v131, "threadgroupSizeMatchesTileSize"))
        {
          v204 = 0x405000000000000;
          v203 = "threadgroupSizeMatchesTileSize";
          v202 = 30;
          LOBYTE(v196) = *((unsigned __int16 *)rapidjson::GenericValue<rapidjson::UTF8<char>,rapidjson::MemoryPoolAllocator<rapidjson::CrtAllocator>>::operator[]<rapidjson::MemoryPoolAllocator<rapidjson::CrtAllocator>>(*(_DWORD *)v107, *(int **)(v107 + 8), (unsigned int *)&v202)+ 11) == 10;
          v130 = *(_DWORD *)v107;
          v131 = *(int **)(v107 + 8);
        }
        if (&v131[12 * v130] != rapidjson::GenericValue<rapidjson::UTF8<char>,rapidjson::MemoryPoolAllocator<rapidjson::CrtAllocator>>::FindMember(v130, v131, "sampleCount"))
        {
          v204 = 0x405000000000000;
          v203 = "sampleCount";
          v202 = 11;
          HIDWORD(v196) = *(_DWORD *)rapidjson::GenericValue<rapidjson::UTF8<char>,rapidjson::MemoryPoolAllocator<rapidjson::CrtAllocator>>::operator[]<rapidjson::MemoryPoolAllocator<rapidjson::CrtAllocator>>(*(_DWORD *)v107, *(int **)(v107 + 8), (unsigned int *)&v202);
          v130 = *(_DWORD *)v107;
          v131 = *(int **)(v107 + 8);
        }
        if (&v131[12 * v130] != rapidjson::GenericValue<rapidjson::UTF8<char>,rapidjson::MemoryPoolAllocator<rapidjson::CrtAllocator>>::FindMember(v130, v131, "colorAttachments"))
        {
          v204 = 0x405000000000000;
          v203 = "colorAttachments";
          v202 = 16;
          v132 = rapidjson::GenericValue<rapidjson::UTF8<char>,rapidjson::MemoryPoolAllocator<rapidjson::CrtAllocator>>::operator[]<rapidjson::MemoryPoolAllocator<rapidjson::CrtAllocator>>(*(_DWORD *)v107, *(int **)(v107 + 8), (unsigned int *)&v202);
          if (*(_DWORD *)v132)
          {
            v133 = v132[1];
            v134 = v133 + 24 * *(unsigned int *)v132;
            do
            {
              v204 = 0x405000000000000;
              v203 = "pixelFormat";
              v202 = 11;
              v135 = (_anonymous_namespace_ *)rapidjson::GenericValue<rapidjson::UTF8<char>,rapidjson::MemoryPoolAllocator<rapidjson::CrtAllocator>>::operator[]<rapidjson::MemoryPoolAllocator<rapidjson::CrtAllocator>>(*(_DWORD *)v133, *(int **)(v133 + 8), (unsigned int *)&v202);
              v136 = *(_DWORD *)v135;
              v137 = v199;
              if (v199 >= v198)
              {
                v138 = v199 + 1;
                if (v198 < v199 + 1)
                {
                  if (v197)
                  {
                    v139 = 8;
                    if (v198)
                      v139 = 2 * v198;
                    if (v139 <= v138)
                      v140 = v199 + 1;
                    else
                      v140 = v139;
                    re::DynamicArray<re::EvaluationCommand>::setCapacity(&v197, v140);
                  }
                  else
                  {
                    re::DynamicArray<re::EvaluationCommand>::setCapacity(&v197, v138);
                    ++v200;
                  }
                }
                v137 = v199;
              }
              *(_DWORD *)(v201 + 4 * v137) = v136;
              v199 = v137 + 1;
              ++v200;
              v133 += 24;
            }
            while (v133 != v134);
          }
        }
        re::DynamicString::DynamicString((re::DynamicString *)v155, (const re::DynamicString *)v188);
        re::HashTable<re::DynamicString,re::DynamicString,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::HashTable((uint64_t)v156, (uint64_t)&v188[32]);
        re::HashTable<re::DynamicString,re::DynamicArray<re::DynamicString>,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::HashTable((uint64_t)v157, (uint64_t)&v192);
        v157[6] = v196;
        re::DynamicArray<re::ShaderAPIFlags::Values>::DynamicArray((uint64_t)v158, (uint64_t *)&v197);
        re::DynamicArray<re::PSOToolTileDescriptor>::add(v151, (re::DynamicString *)v155);
        if (v158[0])
        {
          if (v160)
            (*(void (**)(void))(*(_QWORD *)v158[0] + 40))();
          v160 = 0;
          memset(v158, 0, sizeof(v158));
          ++v159;
        }
        re::HashTable<re::DynamicString,re::DynamicArray<re::DynamicString>,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::deinit(v157);
        v141.n128_f64[0] = re::HashTable<re::DynamicString,re::DynamicString,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::deinit(v156);
        if (*(_QWORD *)&v155[0])
        {
          if ((BYTE8(v155[0]) & 1) != 0)
            (*(void (**)(double))(**(_QWORD **)&v155[0] + 40))(v141.n128_f64[0]);
          v141 = 0uLL;
          memset(v155, 0, sizeof(v155));
        }
        if (v197)
        {
          if (v201)
            (*(void (**)(__n128))(*v197 + 40))(v141);
          v201 = 0;
          v198 = 0;
          v199 = 0;
          v197 = 0;
          ++v200;
        }
        re::HashTable<re::DynamicString,re::DynamicArray<re::DynamicString>,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::deinit((uint64_t *)&v192);
        v142 = re::HashTable<re::DynamicString,re::DynamicString,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::deinit((uint64_t *)&v188[32]);
        v106 = *(uint64_t **)v188;
        if (*(_QWORD *)v188 && (v188[8] & 1) != 0)
          v106 = (uint64_t *)(*(uint64_t (**)(double))(**(_QWORD **)v188 + 40))(v142);
        v107 += 24;
      }
      while (v107 != v152);
    }
  }
  re::PSOToolManager::serializeToURL((uint64_t)v4, a3);
  rapidjson::GenericDocument<rapidjson::UTF8<char>,rapidjson::MemoryPoolAllocator<rapidjson::CrtAllocator>,rapidjson::CrtAllocator>::~GenericDocument(v207);
  v214[0] = *MEMORY[0x24BEDB7E0];
  *(_QWORD *)((char *)v214 + *(_QWORD *)(v214[0] - 24)) = *(_QWORD *)(MEMORY[0x24BEDB7E0] + 24);
  MEMORY[0x227692FE0](v215);
  std::istream::~istream();
  return MEMORY[0x227693328](v216);
}

void REPSOTool::~REPSOTool(REPSOTool *this)
{
  *(_QWORD *)this = &off_24ED9D168;
  re::PSOToolManager::~PSOToolManager((REPSOTool *)((char *)this + 24));
  *(_QWORD *)this = &off_24ED426B8;
  objc_destructInstance((char *)this + 8);
}

{
  *(_QWORD *)this = &off_24ED9D168;
  re::PSOToolManager::~PSOToolManager((REPSOTool *)((char *)this + 24));
  *(_QWORD *)this = &off_24ED426B8;
  objc_destructInstance((char *)this + 8);
  JUMPOUT(0x2276933B8);
}

void re::PSOToolManager::~PSOToolManager(re::PSOToolManager *this)
{
  uint64_t v2;
  __n128 v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  uint64_t v24;
  _OWORD *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t *v30;
  uint64_t v31;
  double v32;
  double v33;
  double v34;
  double v35;

  v2 = *((_QWORD *)this + 115);
  if (v2)
  {
    if ((*((_BYTE *)this + 928) & 1) != 0)
      (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v2 + 40))(v2, *((_QWORD *)this + 117));
    *(_OWORD *)((char *)this + 920) = 0u;
    *(_OWORD *)((char *)this + 936) = 0u;
  }
  v3.n128_f64[0] = re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 108);
  v4 = *((_QWORD *)this + 101);
  if (v4)
  {
    v5 = *((_QWORD *)this + 105);
    if (v5)
    {
      v6 = *((_QWORD *)this + 103);
      if (v6)
      {
        v7 = 232 * v6;
        v8 = (_QWORD *)(v5 + 112);
        do
        {
          v9 = v8[10];
          if (v9)
          {
            if (v8[14])
              (*(void (**)(uint64_t, __n128))(*(_QWORD *)v9 + 40))(v9, v3);
            v8[14] = 0;
            v8[11] = 0;
            v8[12] = 0;
            v8[10] = 0;
            ++*((_DWORD *)v8 + 26);
          }
          v10 = v8[5];
          if (v10)
          {
            if (v8[9])
              (*(void (**)(uint64_t, __n128))(*(_QWORD *)v10 + 40))(v10, v3);
            v8[9] = 0;
            v8[6] = 0;
            v8[7] = 0;
            v8[5] = 0;
            ++*((_DWORD *)v8 + 16);
          }
          if (*v8)
          {
            if ((v8[1] & 1) != 0)
              (*(void (**)(_QWORD, _QWORD, __n128))(*(_QWORD *)*v8 + 40))(*v8, v8[2], v3);
            v3 = 0uLL;
            *(_OWORD *)v8 = 0u;
            *((_OWORD *)v8 + 1) = 0u;
          }
          v11 = *(v8 - 5);
          if (v11)
          {
            if (*(v8 - 1))
              (*(void (**)(uint64_t, __n128))(*(_QWORD *)v11 + 40))(v11, v3);
            *(v8 - 1) = 0;
            *(v8 - 4) = 0;
            *(v8 - 3) = 0;
            *(v8 - 5) = 0;
            ++*((_DWORD *)v8 - 4);
          }
          v8 += 29;
          v7 -= 232;
        }
        while (v7);
        v4 = *((_QWORD *)this + 101);
        v5 = *((_QWORD *)this + 105);
      }
      (*(void (**)(uint64_t, uint64_t, __n128))(*(_QWORD *)v4 + 40))(v4, v5, v3);
    }
    *((_QWORD *)this + 105) = 0;
    *((_QWORD *)this + 102) = 0;
    *((_QWORD *)this + 103) = 0;
    *((_QWORD *)this + 101) = 0;
    ++*((_DWORD *)this + 208);
  }
  v12 = *((_QWORD *)this + 96);
  if (v12)
  {
    v13 = *((_QWORD *)this + 100);
    if (v13)
    {
      v14 = *((_QWORD *)this + 98);
      if (v14)
      {
        v15 = 96 * v14;
        v16 = (_QWORD *)(v13 + 40);
        do
        {
          v17 = v16 - 5;
          if (*v16)
          {
            if (v16[4])
              (*(void (**)(_QWORD, __n128))(*(_QWORD *)*v16 + 40))(*v16, v3);
            v16[4] = 0;
            v16[1] = 0;
            v16[2] = 0;
            *v16 = 0;
            ++*((_DWORD *)v16 + 6);
          }
          if (*v17)
          {
            if (*(v16 - 1))
              (*(void (**)(_QWORD, __n128))(*(_QWORD *)*v17 + 40))(*v17, v3);
            *(v16 - 1) = 0;
            *(v16 - 4) = 0;
            *(v16 - 3) = 0;
            *v17 = 0;
            ++*((_DWORD *)v16 - 4);
          }
          v16 += 12;
          v15 -= 96;
        }
        while (v15);
        v12 = *((_QWORD *)this + 96);
        v13 = *((_QWORD *)this + 100);
      }
      (*(void (**)(uint64_t, uint64_t, __n128))(*(_QWORD *)v12 + 40))(v12, v13, v3);
    }
    *((_QWORD *)this + 100) = 0;
    *((_QWORD *)this + 97) = 0;
    *((_QWORD *)this + 98) = 0;
    *((_QWORD *)this + 96) = 0;
    ++*((_DWORD *)this + 198);
  }
  v18 = *((_QWORD *)this + 91);
  if (v18)
  {
    v19 = *((_QWORD *)this + 95);
    if (v19)
    {
      v20 = *((_QWORD *)this + 93);
      if (v20)
      {
        v21 = 176 * v20;
        v22 = (_QWORD *)(v19 + 168);
        do
        {
          v23 = *(v22 - 4);
          if (v23)
          {
            if (*v22)
              (*(void (**)(uint64_t, __n128))(*(_QWORD *)v23 + 40))(v23, v3);
            *v22 = 0;
            *(v22 - 3) = 0;
            *(v22 - 2) = 0;
            *(v22 - 4) = 0;
            ++*((_DWORD *)v22 - 2);
          }
          re::HashTable<re::DynamicString,re::DynamicArray<re::DynamicString>,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::deinit(v22 - 11);
          v3.n128_f64[0] = re::HashTable<re::DynamicString,re::DynamicString,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::deinit(v22 - 17);
          v24 = *(v22 - 21);
          if (v24)
          {
            if ((*(_BYTE *)(v22 - 20) & 1) != 0)
              (*(void (**)(uint64_t, _QWORD, double))(*(_QWORD *)v24 + 40))(v24, *(v22 - 19), v3.n128_f64[0]);
            v25 = v22 - 21;
            v3 = 0uLL;
            *v25 = 0u;
            v25[1] = 0u;
          }
          v22 += 22;
          v21 -= 176;
        }
        while (v21);
        v18 = *((_QWORD *)this + 91);
        v19 = *((_QWORD *)this + 95);
      }
      (*(void (**)(uint64_t, uint64_t, __n128))(*(_QWORD *)v18 + 40))(v18, v19, v3);
    }
    *((_QWORD *)this + 95) = 0;
    *((_QWORD *)this + 92) = 0;
    *((_QWORD *)this + 93) = 0;
    *((_QWORD *)this + 91) = 0;
    ++*((_DWORD *)this + 188);
  }
  v26 = *((_QWORD *)this + 86);
  if (v26)
  {
    v27 = *((_QWORD *)this + 90);
    if (v27)
    {
      v28 = *((_QWORD *)this + 88);
      if (v28)
      {
        v29 = 136 * v28;
        v30 = (uint64_t *)(v27 + 80);
        do
        {
          re::HashTable<re::DynamicString,re::DynamicArray<re::DynamicString>,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::deinit(v30);
          v3.n128_f64[0] = re::HashTable<re::DynamicString,re::DynamicString,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::deinit(v30 - 6);
          v31 = *(v30 - 10);
          if (v31)
          {
            if ((*(_BYTE *)(v30 - 9) & 1) != 0)
              (*(void (**)(uint64_t, _QWORD, double))(*(_QWORD *)v31 + 40))(v31, *(v30 - 8), v3.n128_f64[0]);
            v3 = 0uLL;
            *((_OWORD *)v30 - 5) = 0u;
            *((_OWORD *)v30 - 4) = 0u;
          }
          v30 += 17;
          v29 -= 136;
        }
        while (v29);
        v26 = *((_QWORD *)this + 86);
        v27 = *((_QWORD *)this + 90);
      }
      (*(void (**)(uint64_t, uint64_t, __n128))(*(_QWORD *)v26 + 40))(v26, v27, v3);
    }
    *((_QWORD *)this + 90) = 0;
    *((_QWORD *)this + 87) = 0;
    *((_QWORD *)this + 88) = 0;
    *((_QWORD *)this + 86) = 0;
    ++*((_DWORD *)this + 178);
  }
  re::HashTable<re::DynamicString,re::DynamicString,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::deinit((uint64_t *)this + 80);
  re::DynamicArray<re::DynamicString>::deinit((uint64_t)this + 600);
  v33 = re::HashTable<re::DynamicString,unsigned long,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::deinit((uint64_t *)this + 69, v32);
  re::HashTable<re::DynamicString,unsigned long,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::deinit((uint64_t *)this + 63, v33);
  re::HashTable<unsigned long,re::FunctionVariantDescriptor,re::PrecalculatedHash,re::EqualTo<unsigned long>,false,false>::deinit((uint64_t *)this + 57);
  re::HashTable<unsigned long,re::FunctionVariantDescriptor,re::PrecalculatedHash,re::EqualTo<unsigned long>,false,false>::deinit((uint64_t *)this + 51);
  v34 = re::HashTable<unsigned long,re::FunctionVariantDescriptor,re::PrecalculatedHash,re::EqualTo<unsigned long>,false,false>::deinit((uint64_t *)this + 45);
  v35 = re::HashTable<re::DynamicString,unsigned long,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::deinit((uint64_t *)this + 39, v34);
  re::HashTable<re::DynamicString,re::MaterialFile,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::deinit((uint64_t *)this + 33, v35);
  re::HashTable<re::DynamicString,re::MaterialDefinitionFile,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::deinit((uint64_t *)this + 27);
  re::HashTable<re::StringID,re::DataArrayHandle<re::RigGraphOperatorDefinition>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::deinit((uint64_t *)this + 21);

  re::DynamicArray<re::DynamicString>::deinit((uint64_t)this + 112);
  re::HashTable<re::DynamicString,NS::SharedPtr<MTL::Function>,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::deinit((uint64_t *)this + 8);
  re::HashBrown<unsigned long,re::HashBrown<re::DynamicString,re::VariedFunctionConstant,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,void,false>,re::Hash<unsigned long>,re::EqualTo<unsigned long>,void,false>::deinit((uint64_t)this);
}

uint64_t rapidjson::BasicIStreamWrapper<std::istream>::Read(uint64_t result)
{
  uint64_t v1;
  unint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _BYTE *v7;

  v1 = result;
  v2 = *(_QWORD *)(result + 40);
  if (v2 >= *(_QWORD *)(result + 32))
  {
    if (!*(_BYTE *)(result + 64))
    {
      v3 = *(_QWORD *)(result + 56) + *(_QWORD *)(result + 48);
      v4 = *(_QWORD *)(result + 16);
      v5 = *(_QWORD *)(result + 24);
      *(_QWORD *)(result + 48) = v5;
      *(_QWORD *)(result + 56) = v3;
      *(_QWORD *)(result + 32) = v4 + v5 - 1;
      *(_QWORD *)(result + 40) = v4;
      result = std::istream::read();
      if ((*(_BYTE *)(result + *(_QWORD *)(*(_QWORD *)result - 24) + 32) & 5) != 0)
      {
        v6 = *(_QWORD *)(*(_QWORD *)v1 + 8);
        *(_QWORD *)(v1 + 48) = v6;
        v7 = (_BYTE *)(*(_QWORD *)(v1 + 16) + v6);
        *(_QWORD *)(v1 + 32) = v7;
        *v7 = 0;
        *(_BYTE *)(v1 + 64) = 1;
      }
    }
  }
  else
  {
    *(_QWORD *)(result + 40) = v2 + 1;
  }
  return result;
}

uint64_t *rapidjson::GenericReader<rapidjson::UTF8<char>,rapidjson::UTF8<char>,rapidjson::CrtAllocator>::ParseValue<0u,rapidjson::BasicIStreamWrapper<std::istream>,rapidjson::GenericDocument<rapidjson::UTF8<char>,rapidjson::MemoryPoolAllocator<rapidjson::CrtAllocator>,rapidjson::CrtAllocator>>(uint64_t *result, _QWORD *a2, uint64_t *a3)
{
  uint64_t v5;
  unsigned __int8 *v6;
  int v7;
  _BYTE *v8;
  uint64_t v9;
  __int16 v10;
  _QWORD *v11;
  uint64_t v12;
  unsigned int v13;
  uint64_t v15;
  unsigned __int8 *v16;
  unsigned int v17;
  int v19;
  uint64_t v20;
  uint64_t v21;
  unsigned __int8 *v22;
  int v23;
  unsigned int v24;
  unsigned int v25;
  unsigned int v26;
  double v27;
  int v28;
  unsigned int v29;
  uint64_t v30;
  __int16 v31;
  unint64_t v32;
  int v33;
  unsigned __int8 *v34;
  int v35;
  unsigned __int8 *v36;
  int v37;
  unint64_t v38;
  unsigned __int8 *v39;
  int v40;
  int v41;
  int v42;
  unsigned int v43;
  int v44;
  int v45;
  int v46;
  int v47;
  double v48;
  double v49;
  unsigned __int8 *v50;
  int v51;
  unsigned int v52;
  unsigned __int8 *v53;
  unsigned int v54;
  unsigned int v56;
  BOOL v57;
  uint64_t v58;
  unsigned int v60;
  unsigned __int8 *v61;
  unsigned int v62;
  unsigned int v64;
  uint64_t v65;
  unsigned __int8 *v67;
  unsigned int v68;
  unsigned int v70;
  int v72;
  uint64_t v73;
  uint64_t v74;
  int v75;

  v5 = (uint64_t)result;
  v6 = (unsigned __int8 *)a2[5];
  v7 = (char)*v6;
  if (v7 > 109)
  {
    if (v7 != 123)
    {
      if (v7 == 116)
      {
        result = (uint64_t *)rapidjson::BasicIStreamWrapper<std::istream>::Read((uint64_t)a2);
        v8 = (_BYTE *)a2[5];
        if (*v8 == 114)
        {
          result = (uint64_t *)rapidjson::BasicIStreamWrapper<std::istream>::Read((uint64_t)a2);
          v8 = (_BYTE *)a2[5];
          if (*v8 == 117)
          {
            result = (uint64_t *)rapidjson::BasicIStreamWrapper<std::istream>::Read((uint64_t)a2);
            v8 = (_BYTE *)a2[5];
            if (*v8 == 101)
            {
              result = (uint64_t *)rapidjson::BasicIStreamWrapper<std::istream>::Read((uint64_t)a2);
              v9 = a3[8];
              if (a3[9] - v9 <= 23)
              {
                result = (uint64_t *)rapidjson::internal::Stack<rapidjson::CrtAllocator>::Expand<rapidjson::GenericValue<rapidjson::UTF8<char>,rapidjson::MemoryPoolAllocator<rapidjson::CrtAllocator>>>(a3 + 5);
                v9 = a3[8];
              }
              a3[8] = v9 + 24;
              *(_QWORD *)(v9 + 8) = 0;
              *(_QWORD *)(v9 + 16) = 0;
              *(_QWORD *)v9 = 0;
              v10 = 10;
              goto LABEL_140;
            }
          }
        }
      }
      else
      {
        if (v7 != 110)
          goto LABEL_44;
        result = (uint64_t *)rapidjson::BasicIStreamWrapper<std::istream>::Read((uint64_t)a2);
        v8 = (_BYTE *)a2[5];
        if (*v8 == 117)
        {
          result = (uint64_t *)rapidjson::BasicIStreamWrapper<std::istream>::Read((uint64_t)a2);
          v8 = (_BYTE *)a2[5];
          if (*v8 == 108)
          {
            result = (uint64_t *)rapidjson::BasicIStreamWrapper<std::istream>::Read((uint64_t)a2);
            v8 = (_BYTE *)a2[5];
            if (*v8 == 108)
            {
              result = (uint64_t *)rapidjson::BasicIStreamWrapper<std::istream>::Read((uint64_t)a2);
              v11 = (_QWORD *)a3[8];
              if (a3[9] - (uint64_t)v11 <= 23)
              {
                result = (uint64_t *)rapidjson::internal::Stack<rapidjson::CrtAllocator>::Expand<rapidjson::GenericValue<rapidjson::UTF8<char>,rapidjson::MemoryPoolAllocator<rapidjson::CrtAllocator>>>(a3 + 5);
                v11 = (_QWORD *)a3[8];
              }
              a3[8] = (uint64_t)(v11 + 3);
              *v11 = 0;
              v11[1] = 0;
              v11[2] = 0;
              return result;
            }
          }
        }
      }
LABEL_143:
      v50 = &v8[a2[7] - a2[2]];
      v51 = 3;
LABEL_144:
      *(_DWORD *)(v5 + 48) = v51;
      *(_QWORD *)(v5 + 56) = v50;
      return result;
    }
    result = (uint64_t *)rapidjson::BasicIStreamWrapper<std::istream>::Read((uint64_t)a2);
    v15 = a3[8];
    if (a3[9] - v15 <= 23)
    {
      result = (uint64_t *)rapidjson::internal::Stack<rapidjson::CrtAllocator>::Expand<rapidjson::GenericValue<rapidjson::UTF8<char>,rapidjson::MemoryPoolAllocator<rapidjson::CrtAllocator>>>(a3 + 5);
      v15 = a3[8];
    }
    a3[8] = v15 + 24;
    *(_QWORD *)(v15 + 8) = 0;
    *(_QWORD *)(v15 + 16) = 0;
    *(_QWORD *)v15 = 0;
    *(_WORD *)(v15 + 22) = 3;
    while (1)
    {
      v16 = (unsigned __int8 *)a2[5];
      v17 = *v16;
      if (v17 > 0x20 || ((1 << v17) & 0x100002600) == 0)
        break;
      result = (uint64_t *)rapidjson::BasicIStreamWrapper<std::istream>::Read((uint64_t)a2);
    }
    if (*(_DWORD *)(v5 + 48))
      return result;
    if (v17 != 125)
    {
      if (v17 != 34)
      {
LABEL_198:
        v50 = &v16[a2[7] - a2[2]];
        v51 = 4;
        goto LABEL_144;
      }
      v60 = 0;
      while (1)
      {
        result = (uint64_t *)rapidjson::GenericReader<rapidjson::UTF8<char>,rapidjson::UTF8<char>,rapidjson::CrtAllocator>::ParseString<0u,rapidjson::BasicIStreamWrapper<std::istream>,rapidjson::GenericDocument<rapidjson::UTF8<char>,rapidjson::MemoryPoolAllocator<rapidjson::CrtAllocator>,rapidjson::CrtAllocator>>(v5, a2, a3);
        if (*(_DWORD *)(v5 + 48))
          return result;
        while (1)
        {
          v61 = (unsigned __int8 *)a2[5];
          v62 = *v61;
          if (v62 > 0x20 || ((1 << v62) & 0x100002600) == 0)
            break;
          result = (uint64_t *)rapidjson::BasicIStreamWrapper<std::istream>::Read((uint64_t)a2);
        }
        if (*(_DWORD *)(v5 + 48))
          return result;
        if (v62 != 58)
        {
          v50 = &v61[a2[7] - a2[2]];
          v51 = 5;
          goto LABEL_144;
        }
        do
        {
          result = (uint64_t *)rapidjson::BasicIStreamWrapper<std::istream>::Read((uint64_t)a2);
          v64 = *(unsigned __int8 *)a2[5];
          v57 = v64 > 0x20;
          v65 = (1 << v64) & 0x100002600;
        }
        while (!v57 && v65 != 0);
        if (*(_DWORD *)(v5 + 48))
          return result;
        result = (uint64_t *)rapidjson::GenericReader<rapidjson::UTF8<char>,rapidjson::UTF8<char>,rapidjson::CrtAllocator>::ParseValue<0u,rapidjson::BasicIStreamWrapper<std::istream>,rapidjson::GenericDocument<rapidjson::UTF8<char>,rapidjson::MemoryPoolAllocator<rapidjson::CrtAllocator>,rapidjson::CrtAllocator>>(v5, a2, a3);
        if (*(_DWORD *)(v5 + 48))
          return result;
        while (1)
        {
          v67 = (unsigned __int8 *)a2[5];
          v68 = *v67;
          if (v68 > 0x20 || ((1 << v68) & 0x100002600) == 0)
            break;
          result = (uint64_t *)rapidjson::BasicIStreamWrapper<std::istream>::Read((uint64_t)a2);
        }
        if (*(_DWORD *)(v5 + 48))
          return result;
        v68 = (char)v68;
        ++v60;
        if ((char)v68 != 44)
        {
          if (v68 == 125)
          {
            rapidjson::BasicIStreamWrapper<std::istream>::Read((uint64_t)a2);
            return (uint64_t *)rapidjson::GenericDocument<rapidjson::UTF8<char>,rapidjson::MemoryPoolAllocator<rapidjson::CrtAllocator>,rapidjson::CrtAllocator>::EndObject((uint64_t)a3, v60);
          }
          v50 = &v67[a2[7] - a2[2]];
          v51 = 6;
          goto LABEL_144;
        }
        do
        {
          result = (uint64_t *)rapidjson::BasicIStreamWrapper<std::istream>::Read((uint64_t)a2);
          v16 = (unsigned __int8 *)a2[5];
          v70 = *v16;
        }
        while (v70 <= 0x20 && ((1 << v70) & 0x100002600) != 0);
        if (*(_DWORD *)(v5 + 48))
          return result;
        if (v70 != 34)
          goto LABEL_198;
      }
    }
    result = (uint64_t *)rapidjson::BasicIStreamWrapper<std::istream>::Read((uint64_t)a2);
    v30 = a3[8];
    v31 = 3;
LABEL_63:
    *(_WORD *)(v30 - 2) = v31;
    *(_QWORD *)(v30 - 24) = 0;
    *(_QWORD *)(v30 - 16) = 0;
    return result;
  }
  switch(v7)
  {
    case '"':
      return (uint64_t *)rapidjson::GenericReader<rapidjson::UTF8<char>,rapidjson::UTF8<char>,rapidjson::CrtAllocator>::ParseString<0u,rapidjson::BasicIStreamWrapper<std::istream>,rapidjson::GenericDocument<rapidjson::UTF8<char>,rapidjson::MemoryPoolAllocator<rapidjson::CrtAllocator>,rapidjson::CrtAllocator>>((uint64_t)result, a2, a3);
    case '[':
      result = (uint64_t *)rapidjson::BasicIStreamWrapper<std::istream>::Read((uint64_t)a2);
      v12 = a3[8];
      if (a3[9] - v12 <= 23)
      {
        result = (uint64_t *)rapidjson::internal::Stack<rapidjson::CrtAllocator>::Expand<rapidjson::GenericValue<rapidjson::UTF8<char>,rapidjson::MemoryPoolAllocator<rapidjson::CrtAllocator>>>(a3 + 5);
        v12 = a3[8];
      }
      a3[8] = v12 + 24;
      *(_QWORD *)(v12 + 8) = 0;
      *(_QWORD *)(v12 + 16) = 0;
      *(_QWORD *)v12 = 0;
      *(_WORD *)(v12 + 22) = 4;
      while (1)
      {
        v13 = *(unsigned __int8 *)a2[5];
        if (v13 > 0x20 || ((1 << v13) & 0x100002600) == 0)
          break;
        result = (uint64_t *)rapidjson::BasicIStreamWrapper<std::istream>::Read((uint64_t)a2);
      }
      if (*(_DWORD *)(v5 + 48))
        return result;
      if (v13 != 93)
      {
        v52 = 0;
        while (1)
        {
          result = (uint64_t *)rapidjson::GenericReader<rapidjson::UTF8<char>,rapidjson::UTF8<char>,rapidjson::CrtAllocator>::ParseValue<0u,rapidjson::BasicIStreamWrapper<std::istream>,rapidjson::GenericDocument<rapidjson::UTF8<char>,rapidjson::MemoryPoolAllocator<rapidjson::CrtAllocator>,rapidjson::CrtAllocator>>(v5, a2, a3);
          if (*(_DWORD *)(v5 + 48))
            return result;
          while (1)
          {
            v53 = (unsigned __int8 *)a2[5];
            v54 = *v53;
            if (v54 > 0x20 || ((1 << v54) & 0x100002600) == 0)
              break;
            result = (uint64_t *)rapidjson::BasicIStreamWrapper<std::istream>::Read((uint64_t)a2);
          }
          if (*(_DWORD *)(v5 + 48))
            return result;
          ++v52;
          if (v54 != 44)
          {
            if (v54 == 93)
            {
              rapidjson::BasicIStreamWrapper<std::istream>::Read((uint64_t)a2);
              return (uint64_t *)rapidjson::GenericDocument<rapidjson::UTF8<char>,rapidjson::MemoryPoolAllocator<rapidjson::CrtAllocator>,rapidjson::CrtAllocator>::EndArray((uint64_t)a3, v52);
            }
            v50 = &v53[a2[7] - a2[2]];
            v51 = 7;
            goto LABEL_144;
          }
          do
          {
            result = (uint64_t *)rapidjson::BasicIStreamWrapper<std::istream>::Read((uint64_t)a2);
            v56 = *(unsigned __int8 *)a2[5];
            v57 = v56 > 0x20;
            v58 = (1 << v56) & 0x100002600;
          }
          while (!v57 && v58 != 0);
          if (*(_DWORD *)(v5 + 48))
            return result;
        }
      }
      result = (uint64_t *)rapidjson::BasicIStreamWrapper<std::istream>::Read((uint64_t)a2);
      v30 = a3[8];
      v31 = 4;
      goto LABEL_63;
    case 'f':
      result = (uint64_t *)rapidjson::BasicIStreamWrapper<std::istream>::Read((uint64_t)a2);
      v8 = (_BYTE *)a2[5];
      if (*v8 == 97)
      {
        result = (uint64_t *)rapidjson::BasicIStreamWrapper<std::istream>::Read((uint64_t)a2);
        v8 = (_BYTE *)a2[5];
        if (*v8 == 108)
        {
          result = (uint64_t *)rapidjson::BasicIStreamWrapper<std::istream>::Read((uint64_t)a2);
          v8 = (_BYTE *)a2[5];
          if (*v8 == 115)
          {
            result = (uint64_t *)rapidjson::BasicIStreamWrapper<std::istream>::Read((uint64_t)a2);
            v8 = (_BYTE *)a2[5];
            if (*v8 == 101)
            {
              result = (uint64_t *)rapidjson::BasicIStreamWrapper<std::istream>::Read((uint64_t)a2);
              v9 = a3[8];
              if (a3[9] - v9 <= 23)
              {
                result = (uint64_t *)rapidjson::internal::Stack<rapidjson::CrtAllocator>::Expand<rapidjson::GenericValue<rapidjson::UTF8<char>,rapidjson::MemoryPoolAllocator<rapidjson::CrtAllocator>>>(a3 + 5);
                v9 = a3[8];
              }
              a3[8] = v9 + 24;
              *(_QWORD *)(v9 + 8) = 0;
              *(_QWORD *)(v9 + 16) = 0;
              *(_QWORD *)v9 = 0;
              v10 = 9;
LABEL_140:
              *(_WORD *)(v9 + 22) = v10;
              return result;
            }
          }
        }
      }
      goto LABEL_143;
  }
LABEL_44:
  v19 = *v6;
  v20 = a2[7];
  v21 = a2[2];
  if (v19 == 45)
  {
    result = (uint64_t *)rapidjson::BasicIStreamWrapper<std::istream>::Read((uint64_t)a2);
    v22 = (unsigned __int8 *)a2[5];
    v23 = *v22;
  }
  else
  {
    v23 = *v6;
    v22 = (unsigned __int8 *)a2[5];
  }
  v24 = v23 - 48;
  v73 = v21;
  v74 = v5;
  v72 = v19;
  if (v23 == 48)
  {
    result = (uint64_t *)rapidjson::BasicIStreamWrapper<std::istream>::Read((uint64_t)a2);
    v33 = 0;
    v28 = 0;
    v32 = 0;
    v75 = 0;
    v25 = *(unsigned __int8 *)a2[5];
    v27 = 0.0;
    goto LABEL_88;
  }
  if ((v23 - 49) > 8)
  {
    v36 = &v22[a2[7] - a2[2]];
    v45 = 3;
    goto LABEL_133;
  }
  result = (uint64_t *)rapidjson::BasicIStreamWrapper<std::istream>::Read((uint64_t)a2);
  v25 = *(unsigned __int8 *)a2[5];
  v26 = v25 - 48;
  v27 = 0.0;
  if (v19 != 45)
  {
    if (v26 <= 9)
    {
      v28 = 0;
      v29 = 429496729;
      while (1)
      {
        if (v24 > 0x19999998)
        {
          if (v24 != 429496729)
          {
LABEL_142:
            v29 = v24;
            goto LABEL_71;
          }
          if (v25 > 0x35)
            goto LABEL_71;
        }
        result = (uint64_t *)rapidjson::BasicIStreamWrapper<std::istream>::Read((uint64_t)a2);
        v24 = v25 + 10 * v24 - 48;
        ++v28;
        v25 = *(unsigned __int8 *)a2[5];
        if (v25 - 48 >= 0xA)
        {
LABEL_78:
          v33 = 0;
          v32 = 0;
          v75 = 0;
          goto LABEL_88;
        }
      }
    }
    goto LABEL_146;
  }
  if (v26 > 9)
  {
LABEL_146:
    v33 = 0;
    v28 = 0;
    v32 = 0;
    v75 = 0;
    goto LABEL_88;
  }
  v28 = 0;
  v29 = 214748364;
  while (1)
  {
    if (v24 > 0xCCCCCCB)
    {
      if (v24 != 214748364)
        goto LABEL_142;
      if (v25 > 0x38)
        break;
    }
    result = (uint64_t *)rapidjson::BasicIStreamWrapper<std::istream>::Read((uint64_t)a2);
    v24 = v25 + 10 * v24 - 48;
    ++v28;
    v25 = *(unsigned __int8 *)a2[5];
    if (v25 - 48 >= 0xA)
      goto LABEL_78;
  }
  v25 = 57;
LABEL_71:
  v32 = v29;
  if (v19 == 45)
  {
    while (v32 <= 0xCCCCCCCCCCCCCCBLL || v25 <= 0x38 && v32 == 0xCCCCCCCCCCCCCCCLL)
    {
      result = (uint64_t *)rapidjson::BasicIStreamWrapper<std::istream>::Read((uint64_t)a2);
      v32 = v25 - 48 + 10 * v32;
      ++v28;
      v25 = *(unsigned __int8 *)a2[5];
      if (v25 - 48 >= 0xA)
        goto LABEL_87;
    }
  }
  else
  {
    while (v32 <= 0x1999999999999998 || v25 <= 0x35 && v32 == 0x1999999999999999)
    {
      result = (uint64_t *)rapidjson::BasicIStreamWrapper<std::istream>::Read((uint64_t)a2);
      v32 = v25 - 48 + 10 * v32;
      ++v28;
      v25 = *(unsigned __int8 *)a2[5];
      if (v25 - 48 >= 0xA)
      {
LABEL_87:
        v33 = 0;
        v27 = 0.0;
        v75 = 1;
        v24 = v29;
        goto LABEL_88;
      }
    }
  }
  v27 = (double)v32;
  do
  {
    result = (uint64_t *)rapidjson::BasicIStreamWrapper<std::istream>::Read((uint64_t)a2);
    v27 = (double)(int)(v25 - 48) + v27 * 10.0;
    v25 = *(unsigned __int8 *)a2[5];
  }
  while (v25 - 48 < 0xA);
  v33 = 1;
  v24 = v29;
  v75 = 1;
LABEL_88:
  if (v25 == 46)
  {
    result = (uint64_t *)rapidjson::BasicIStreamWrapper<std::istream>::Read((uint64_t)a2);
    v34 = (unsigned __int8 *)a2[5];
    v25 = *v34;
    if (v25 - 48 >= 0xA)
    {
      v36 = &v34[a2[7] - a2[2]];
      v45 = 14;
      goto LABEL_120;
    }
    v35 = 0;
    if ((v33 & 1) != 0)
      goto LABEL_223;
    if (!v75)
      v32 = v24;
    do
    {
      if (v25 > 0x39 || v32 >> 53)
        break;
      result = (uint64_t *)rapidjson::BasicIStreamWrapper<std::istream>::Read((uint64_t)a2);
      v32 = v25 - 48 + 10 * v32;
      --v35;
      if (v32)
        ++v28;
      v25 = *(unsigned __int8 *)a2[5];
    }
    while (*(char *)a2[5] > 47);
    v27 = (double)v32;
    if (v25 - 48 <= 9)
    {
LABEL_223:
      do
      {
        result = (uint64_t *)rapidjson::BasicIStreamWrapper<std::istream>::Read((uint64_t)a2);
        if (v28 <= 16)
        {
          v27 = (double)(int)(v25 - 48) + v27 * 10.0;
          --v35;
          if (v27 > 0.0)
            ++v28;
        }
        v25 = *(unsigned __int8 *)a2[5];
      }
      while (v25 - 48 < 0xA);
    }
    v33 = 1;
  }
  else
  {
    v35 = 0;
  }
  v36 = &v6[v20 - v73];
  if (v25 == 101 || v25 == 69)
  {
    result = (uint64_t *)rapidjson::BasicIStreamWrapper<std::istream>::Read((uint64_t)a2);
    v37 = 0;
    v38 = v24;
    if (v75)
      v38 = v32;
    if (!v33)
      v27 = (double)v38;
    v39 = (unsigned __int8 *)a2[5];
    v40 = *v39;
    if (v40 != 43)
    {
      if (v40 != 45)
        goto LABEL_111;
      v37 = 1;
    }
    result = (uint64_t *)rapidjson::BasicIStreamWrapper<std::istream>::Read((uint64_t)a2);
    v39 = (unsigned __int8 *)a2[5];
    v40 = *v39;
LABEL_111:
    v41 = v40 - 48;
    if ((v40 - 48) <= 9)
    {
      result = (uint64_t *)rapidjson::BasicIStreamWrapper<std::istream>::Read((uint64_t)a2);
      if (v37)
      {
        v42 = *(unsigned __int8 *)a2[5];
        if ((v42 - 48) <= 9)
        {
          while (1)
          {
            result = (uint64_t *)rapidjson::BasicIStreamWrapper<std::istream>::Read((uint64_t)a2);
            v41 = v42 + 10 * v41 - 48;
            v42 = *(unsigned __int8 *)a2[5];
            v43 = v42 - 48;
            if (v41 > (v35 + 2147483639) / 10)
              break;
            if (v43 >= 0xA)
              goto LABEL_122;
          }
          if (v43 <= 9)
          {
            do
              result = (uint64_t *)rapidjson::BasicIStreamWrapper<std::istream>::Read((uint64_t)a2);
            while (*(unsigned __int8 *)a2[5] - 48 < 0xA);
          }
        }
      }
      else
      {
        while (1)
        {
          v44 = *(unsigned __int8 *)a2[5];
          if ((v44 - 48) > 9)
            break;
          result = (uint64_t *)rapidjson::BasicIStreamWrapper<std::istream>::Read((uint64_t)a2);
          v41 = v44 + 10 * v41 - 48;
          if (v41 > 308 - v35)
          {
            v45 = 13;
            goto LABEL_120;
          }
        }
      }
LABEL_122:
      if (v37)
        v46 = -v41;
      else
        v46 = v41;
LABEL_125:
      v47 = v46 + v35;
      v5 = v74;
      if (v47 > -309)
      {
        if (v47 < 0)
          v48 = v27 / rapidjson::internal::Pow10(int)::e[-v47];
        else
          v48 = v27 * rapidjson::internal::Pow10(int)::e[v47];
      }
      else
      {
        v48 = 0.0;
        if (v47 < 0xFFFFFD98)
          goto LABEL_134;
        v48 = v27 / 1.0e308 / rapidjson::internal::Pow10(int)::e[-308 - v47];
      }
      if (v48 > 1.79769313e308)
      {
        v45 = 13;
        goto LABEL_133;
      }
LABEL_134:
      if (v72 == 45)
        v49 = -v48;
      else
        v49 = v48;
      v9 = a3[8];
      if (a3[9] - v9 <= 23)
      {
        result = (uint64_t *)rapidjson::internal::Stack<rapidjson::CrtAllocator>::Expand<rapidjson::GenericValue<rapidjson::UTF8<char>,rapidjson::MemoryPoolAllocator<rapidjson::CrtAllocator>>>(a3 + 5);
        v9 = a3[8];
      }
      a3[8] = v9 + 24;
      *(_QWORD *)(v9 + 8) = 0;
      *(_QWORD *)(v9 + 16) = 0;
      *(double *)v9 = v49;
      v10 = 534;
      goto LABEL_140;
    }
    v36 = &v39[a2[7] - a2[2]];
    v45 = 15;
LABEL_120:
    v5 = v74;
LABEL_133:
    *(_DWORD *)(v5 + 48) = v45;
    *(_QWORD *)(v5 + 56) = v36;
    return result;
  }
  if (v33)
  {
    v46 = 0;
    goto LABEL_125;
  }
  if (v75)
  {
    if (v72 == 45)
      return rapidjson::GenericDocument<rapidjson::UTF8<char>,rapidjson::MemoryPoolAllocator<rapidjson::CrtAllocator>,rapidjson::CrtAllocator>::Int64(a3, -(uint64_t)v32);
    else
      return rapidjson::GenericDocument<rapidjson::UTF8<char>,rapidjson::MemoryPoolAllocator<rapidjson::CrtAllocator>,rapidjson::CrtAllocator>::Uint64(a3, v32);
  }
  else if (v72 == 45)
  {
    return rapidjson::GenericDocument<rapidjson::UTF8<char>,rapidjson::MemoryPoolAllocator<rapidjson::CrtAllocator>,rapidjson::CrtAllocator>::Int(a3, -v24);
  }
  else
  {
    return rapidjson::GenericDocument<rapidjson::UTF8<char>,rapidjson::MemoryPoolAllocator<rapidjson::CrtAllocator>,rapidjson::CrtAllocator>::Uint(a3, v24);
  }
}

uint64_t rapidjson::GenericReader<rapidjson::UTF8<char>,rapidjson::UTF8<char>,rapidjson::CrtAllocator>::ParseString<0u,rapidjson::BasicIStreamWrapper<std::istream>,rapidjson::GenericDocument<rapidjson::UTF8<char>,rapidjson::MemoryPoolAllocator<rapidjson::CrtAllocator>,rapidjson::CrtAllocator>>(uint64_t a1, _QWORD *a2, _QWORD *a3)
{
  uint64_t result;
  _BYTE *v7;
  unsigned int v8;
  uint64_t v9;
  _BYTE *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unsigned int v15;
  int v16;
  uint64_t *v17;
  _BYTE *v18;
  size_t v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  _BYTE *v24;
  int v25;
  uint64_t v26;
  const void *v27;
  int v28;
  int v29[2];
  size_t __n;

  result = rapidjson::BasicIStreamWrapper<std::istream>::Read((uint64_t)a2);
  *(_QWORD *)v29 = a1;
  for (LODWORD(__n) = 0; ; LODWORD(__n) = __n + 1)
  {
    while (1)
    {
      v7 = (_BYTE *)a2[5];
      v8 = *v7;
      if (v8 != 92)
        break;
      v11 = a2[7];
      v12 = a2[2];
      result = rapidjson::BasicIStreamWrapper<std::istream>::Read((uint64_t)a2);
      v13 = *(unsigned __int8 *)a2[5];
      LOBYTE(v8) = rapidjson::GenericReader<rapidjson::UTF8<char>,rapidjson::UTF8<char>,rapidjson::CrtAllocator>::ParseStringToStream<0u,rapidjson::UTF8<char>,rapidjson::UTF8<char>,rapidjson::BasicIStreamWrapper<std::istream>,rapidjson::GenericReader<rapidjson::UTF8<char>,rapidjson::UTF8<char>,rapidjson::CrtAllocator>::StackStream<char>>(rapidjson::BasicIStreamWrapper<std::istream> &,rapidjson::GenericReader<rapidjson::UTF8<char>,rapidjson::UTF8<char>,rapidjson::CrtAllocator>::StackStream<char> &)::escape[v13];
      if ((_BYTE)v8)
        goto LABEL_5;
      v14 = (uint64_t)&v7[v11 - v12];
      if ((_DWORD)v13 != 117)
      {
        v28 = 10;
LABEL_37:
        *(_DWORD *)(a1 + 48) = v28;
        *(_QWORD *)(a1 + 56) = v14;
        return result;
      }
      rapidjson::BasicIStreamWrapper<std::istream>::Read((uint64_t)a2);
      result = rapidjson::GenericReader<rapidjson::UTF8<char>,rapidjson::UTF8<char>,rapidjson::CrtAllocator>::ParseHex4<rapidjson::BasicIStreamWrapper<std::istream>>(a1, (uint64_t)a2, v14);
      if (*(_DWORD *)(a1 + 48))
        return result;
      v15 = result;
      if (result >> 11 == 27)
      {
        if (result >> 10 > 0x36)
          goto LABEL_38;
        if (*(_BYTE *)a2[5] != 92)
          goto LABEL_38;
        v16 = result;
        result = rapidjson::BasicIStreamWrapper<std::istream>::Read((uint64_t)a2);
        if (*(_BYTE *)a2[5] != 117)
          goto LABEL_38;
        rapidjson::BasicIStreamWrapper<std::istream>::Read((uint64_t)a2);
        result = rapidjson::GenericReader<rapidjson::UTF8<char>,rapidjson::UTF8<char>,rapidjson::CrtAllocator>::ParseHex4<rapidjson::BasicIStreamWrapper<std::istream>>(a1, (uint64_t)a2, v14);
        if (*(_DWORD *)(a1 + 48))
          return result;
        if ((result - 57344) <= 0xFFFFFBFF)
        {
LABEL_38:
          v28 = 9;
          goto LABEL_37;
        }
        v15 = ((result - 56320) | ((v16 << 10) - 56623104)) + 0x10000;
      }
      result = (uint64_t)rapidjson::UTF8<char>::Encode<rapidjson::GenericReader<rapidjson::UTF8<char>,rapidjson::UTF8<char>,rapidjson::CrtAllocator>::StackStream<char>>((char *)v29, v15);
    }
    if (v8 == 34)
      break;
    if (v8 <= 0x1F)
    {
      v24 = &v7[a2[7] - a2[2]];
      if (*v7)
        v25 = 12;
      else
        v25 = 11;
      *(_DWORD *)(a1 + 48) = v25;
      *(_QWORD *)(a1 + 56) = v24;
      return result;
    }
LABEL_5:
    result = rapidjson::BasicIStreamWrapper<std::istream>::Read((uint64_t)a2);
    v9 = *(_QWORD *)v29;
    v10 = *(_BYTE **)(*(_QWORD *)v29 + 24);
    if ((uint64_t)(*(_QWORD *)(*(_QWORD *)v29 + 32) - (_QWORD)v10) <= 0)
    {
      result = (uint64_t)rapidjson::internal::Stack<rapidjson::CrtAllocator>::Expand<char>(*(uint64_t **)v29);
      v10 = *(_BYTE **)(v9 + 24);
    }
    *(_QWORD *)(v9 + 24) = v10 + 1;
    *v10 = v8;
  }
  result = rapidjson::BasicIStreamWrapper<std::istream>::Read((uint64_t)a2);
  v17 = *(uint64_t **)v29;
  v18 = *(_BYTE **)(*(_QWORD *)v29 + 24);
  if ((uint64_t)(*(_QWORD *)(*(_QWORD *)v29 + 32) - (_QWORD)v18) <= 0)
  {
    result = (uint64_t)rapidjson::internal::Stack<rapidjson::CrtAllocator>::Expand<char>(*(uint64_t **)v29);
    v18 = (_BYTE *)v17[3];
  }
  v17[3] = (uint64_t)(v18 + 1);
  *v18 = 0;
  if (!*(_DWORD *)(a1 + 48))
  {
    v19 = __n;
    v20 = (__n + 1);
    v21 = v17[3];
    v17[3] = v21 - v20;
    v22 = (_QWORD *)a3[8];
    if ((uint64_t)(a3[9] - (_QWORD)v22) <= 23)
    {
      rapidjson::internal::Stack<rapidjson::CrtAllocator>::Expand<rapidjson::GenericValue<rapidjson::UTF8<char>,rapidjson::MemoryPoolAllocator<rapidjson::CrtAllocator>>>(a3 + 5);
      v22 = (_QWORD *)a3[8];
    }
    a3[8] = v22 + 3;
    v23 = a3[3];
    *v22 = 0;
    v22[1] = 0;
    v22[2] = 0;
    if (v19 > 0x15)
    {
      *((_WORD *)v22 + 11) = 3077;
      *(_DWORD *)v22 = v19;
      v26 = rapidjson::MemoryPoolAllocator<rapidjson::CrtAllocator>::Malloc(v23, v20);
      v22[1] = v26;
      v22 = (_QWORD *)v26;
    }
    else
    {
      *((_WORD *)v22 + 11) = 7173;
      *((_BYTE *)v22 + 21) = 21 - v19;
    }
    if (v21)
      v27 = (const void *)(v21 - v20);
    else
      v27 = &rapidjson::GenericStringRef<char>::emptyString;
    result = (uint64_t)memcpy(v22, v27, v19);
    *((_BYTE *)v22 + v19) = 0;
  }
  return result;
}

char *rapidjson::internal::Stack<rapidjson::CrtAllocator>::Expand<rapidjson::GenericValue<rapidjson::UTF8<char>,rapidjson::MemoryPoolAllocator<rapidjson::CrtAllocator>>>(uint64_t *a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  size_t v6;

  v2 = a1[2];
  if (v2)
  {
    v3 = a1[4] - v2 + ((unint64_t)(a1[4] - v2 + 1) >> 1);
  }
  else
  {
    if (*a1)
    {
      v2 = 0;
    }
    else
    {
      v4 = operator new();
      *a1 = v4;
      a1[1] = v4;
      v2 = a1[2];
    }
    v3 = a1[5];
  }
  v5 = a1[3] - v2 + 24;
  if (v3 <= v5)
    v6 = v5;
  else
    v6 = v3;
  return rapidjson::internal::Stack<rapidjson::CrtAllocator>::Resize(a1, v6);
}

uint64_t rapidjson::GenericReader<rapidjson::UTF8<char>,rapidjson::UTF8<char>,rapidjson::CrtAllocator>::ParseHex4<rapidjson::BasicIStreamWrapper<std::istream>>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  int v7;
  int v8;
  int v9;

  LODWORD(v6) = 0;
  v7 = 4;
  while (1)
  {
    v8 = **(char **)(a2 + 40);
    if ((v8 - 48) >= 0xA)
      break;
    v9 = -48;
LABEL_8:
    v6 = (v8 + 16 * v6 + v9);
    rapidjson::BasicIStreamWrapper<std::istream>::Read(a2);
    if (!--v7)
      return v6;
  }
  if (**(unsigned __int8 **)(a2 + 40) - 65 < 6)
  {
    v9 = -55;
    goto LABEL_8;
  }
  if (**(unsigned __int8 **)(a2 + 40) - 97 < 6)
  {
    v9 = -87;
    goto LABEL_8;
  }
  v6 = 0;
  *(_DWORD *)(a1 + 48) = 8;
  *(_QWORD *)(a1 + 56) = a3;
  return v6;
}

char *rapidjson::UTF8<char>::Encode<rapidjson::GenericReader<rapidjson::UTF8<char>,rapidjson::UTF8<char>,rapidjson::CrtAllocator>::StackStream<char>>(char *result, unsigned int a2)
{
  char *v3;
  uint64_t v4;
  _BYTE *v5;
  _DWORD *v6;
  unsigned int v7;
  uint64_t *v8;
  _BYTE *v9;
  uint64_t *v10;
  _BYTE *v11;
  uint64_t v12;
  unsigned int v13;
  unsigned int v14;
  uint64_t *v15;
  _BYTE *v16;
  char v17;
  uint64_t *v18;
  _BYTE *v19;
  unsigned int v20;
  unsigned int v21;
  uint64_t *v22;
  _BYTE *v23;
  unsigned int v24;
  uint64_t *v25;
  _BYTE *v26;
  uint64_t *v27;
  _BYTE *v28;

  v3 = result;
  if (a2 <= 0x7F)
  {
    v4 = *(_QWORD *)result;
    v5 = *(_BYTE **)(*(_QWORD *)result + 24);
    if ((uint64_t)(*(_QWORD *)(*(_QWORD *)result + 32) - (_QWORD)v5) <= 0)
    {
      result = rapidjson::internal::Stack<rapidjson::CrtAllocator>::Expand<char>(*(uint64_t **)result);
      v5 = *(_BYTE **)(v4 + 24);
    }
    *(_QWORD *)(v4 + 24) = v5 + 1;
    *v5 = a2;
    v6 = v3 + 8;
    goto LABEL_27;
  }
  if (a2 <= 0x7FF)
  {
    v7 = (a2 >> 6) | 0xFFFFFFC0;
    v8 = *(uint64_t **)result;
    v9 = *(_BYTE **)(*(_QWORD *)result + 24);
    if ((uint64_t)(*(_QWORD *)(*(_QWORD *)result + 32) - (_QWORD)v9) <= 0)
    {
      result = rapidjson::internal::Stack<rapidjson::CrtAllocator>::Expand<char>(*(uint64_t **)result);
      v9 = (_BYTE *)v8[3];
    }
    v8[3] = (uint64_t)(v9 + 1);
    *v9 = v7;
    v6 = v3 + 8;
    ++*((_DWORD *)v3 + 2);
LABEL_24:
    v27 = *(uint64_t **)v3;
    v28 = (_BYTE *)v27[3];
    if (v27[4] - (uint64_t)v28 <= 0)
    {
      result = rapidjson::internal::Stack<rapidjson::CrtAllocator>::Expand<char>(v27);
      v28 = (_BYTE *)v27[3];
    }
    v27[3] = (uint64_t)(v28 + 1);
    *v28 = a2 & 0x3F | 0x80;
    goto LABEL_27;
  }
  v10 = *(uint64_t **)result;
  v11 = *(_BYTE **)(*(_QWORD *)result + 24);
  v12 = *(_QWORD *)(*(_QWORD *)result + 32) - (_QWORD)v11;
  if (HIWORD(a2))
  {
    v20 = (a2 >> 18) | 0xFFFFFFF0;
    if (v12 <= 0)
    {
      result = rapidjson::internal::Stack<rapidjson::CrtAllocator>::Expand<char>(*(uint64_t **)result);
      v11 = (_BYTE *)v10[3];
    }
    v10[3] = (uint64_t)(v11 + 1);
    *v11 = v20;
    v6 = v3 + 8;
    ++*((_DWORD *)v3 + 2);
    v21 = (a2 >> 12) & 0x3F | 0xFFFFFF80;
    v22 = *(uint64_t **)v3;
    v23 = *(_BYTE **)(*(_QWORD *)v3 + 24);
    if ((uint64_t)(*(_QWORD *)(*(_QWORD *)v3 + 32) - (_QWORD)v23) <= 0)
    {
      result = rapidjson::internal::Stack<rapidjson::CrtAllocator>::Expand<char>(*(uint64_t **)v3);
      v21 = (a2 >> 12) & 0x3F | 0xFFFFFF80;
      v23 = (_BYTE *)v22[3];
    }
    v22[3] = (uint64_t)(v23 + 1);
    *v23 = v21;
    ++*((_DWORD *)v3 + 2);
    v24 = (a2 >> 6) & 0x3F | 0xFFFFFF80;
    v25 = *(uint64_t **)v3;
    v26 = *(_BYTE **)(*(_QWORD *)v3 + 24);
    if ((uint64_t)(*(_QWORD *)(*(_QWORD *)v3 + 32) - (_QWORD)v26) <= 0)
    {
      result = rapidjson::internal::Stack<rapidjson::CrtAllocator>::Expand<char>(*(uint64_t **)v3);
      v24 = (a2 >> 6) & 0x3F | 0xFFFFFF80;
      v26 = (_BYTE *)v25[3];
    }
    v25[3] = (uint64_t)(v26 + 1);
    *v26 = v24;
    ++*((_DWORD *)v3 + 2);
    goto LABEL_24;
  }
  v13 = (a2 >> 12) | 0xFFFFFFE0;
  if (v12 <= 0)
  {
    result = rapidjson::internal::Stack<rapidjson::CrtAllocator>::Expand<char>(*(uint64_t **)result);
    v11 = (_BYTE *)v10[3];
  }
  v10[3] = (uint64_t)(v11 + 1);
  *v11 = v13;
  v6 = v3 + 8;
  ++*((_DWORD *)v3 + 2);
  v14 = (a2 >> 6) & 0x3F | 0xFFFFFF80;
  v15 = *(uint64_t **)v3;
  v16 = *(_BYTE **)(*(_QWORD *)v3 + 24);
  if ((uint64_t)(*(_QWORD *)(*(_QWORD *)v3 + 32) - (_QWORD)v16) <= 0)
  {
    result = rapidjson::internal::Stack<rapidjson::CrtAllocator>::Expand<char>(*(uint64_t **)v3);
    v14 = (a2 >> 6) & 0x3F | 0xFFFFFF80;
    v16 = (_BYTE *)v15[3];
  }
  v15[3] = (uint64_t)(v16 + 1);
  *v16 = v14;
  ++*((_DWORD *)v3 + 2);
  v17 = a2 & 0x3F | 0x80;
  v18 = *(uint64_t **)v3;
  v19 = (_BYTE *)v18[3];
  if (v18[4] - (uint64_t)v19 <= 0)
  {
    result = rapidjson::internal::Stack<rapidjson::CrtAllocator>::Expand<char>(v18);
    v17 = a2 & 0x3F | 0x80;
    v19 = (_BYTE *)v18[3];
  }
  v18[3] = (uint64_t)(v19 + 1);
  *v19 = v17;
LABEL_27:
  ++*v6;
  return result;
}

char *rapidjson::internal::Stack<rapidjson::CrtAllocator>::Expand<char>(uint64_t *a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  size_t v6;

  v2 = a1[2];
  if (v2)
  {
    v3 = a1[4] - v2 + ((unint64_t)(a1[4] - v2 + 1) >> 1);
  }
  else
  {
    if (*a1)
    {
      v2 = 0;
    }
    else
    {
      v4 = operator new();
      *a1 = v4;
      a1[1] = v4;
      v2 = a1[2];
    }
    v3 = a1[5];
  }
  v5 = a1[3] - v2;
  if (v3 <= v5 + 1)
    v6 = v5 + 1;
  else
    v6 = v3;
  return rapidjson::internal::Stack<rapidjson::CrtAllocator>::Resize(a1, v6);
}

void *rapidjson::GenericDocument<rapidjson::UTF8<char>,rapidjson::MemoryPoolAllocator<rapidjson::CrtAllocator>,rapidjson::CrtAllocator>::EndObject(uint64_t a1, unsigned int a2)
{
  _WORD *v3;
  void *result;
  uint64_t v5;
  void *v6;

  v3 = (_WORD *)(*(_QWORD *)(a1 + 64) - 48 * a2);
  *(_QWORD *)(a1 + 64) = v3;
  result = *(void **)(a1 + 24);
  *(v3 - 1) = 3;
  if (a2)
  {
    v5 = 48 * a2;
    v6 = (void *)rapidjson::MemoryPoolAllocator<rapidjson::CrtAllocator>::Malloc((uint64_t)result, v5);
    *((_QWORD *)v3 - 2) = v6;
    result = memcpy(v6, v3, v5);
  }
  else
  {
    *((_QWORD *)v3 - 2) = 0;
  }
  *((_DWORD *)v3 - 6) = a2;
  *((_DWORD *)v3 - 5) = a2;
  return result;
}

void *rapidjson::GenericDocument<rapidjson::UTF8<char>,rapidjson::MemoryPoolAllocator<rapidjson::CrtAllocator>,rapidjson::CrtAllocator>::EndArray(uint64_t a1, unsigned int a2)
{
  _WORD *v3;
  void *result;
  uint64_t v5;
  void *v6;

  v3 = (_WORD *)(*(_QWORD *)(a1 + 64) - 24 * a2);
  *(_QWORD *)(a1 + 64) = v3;
  result = *(void **)(a1 + 24);
  *(v3 - 1) = 4;
  if (a2)
  {
    v5 = 24 * a2;
    v6 = (void *)rapidjson::MemoryPoolAllocator<rapidjson::CrtAllocator>::Malloc((uint64_t)result, v5);
    *((_QWORD *)v3 - 2) = v6;
    result = memcpy(v6, v3, v5);
  }
  else
  {
    *((_QWORD *)v3 - 2) = 0;
  }
  *((_DWORD *)v3 - 6) = a2;
  *((_DWORD *)v3 - 5) = a2;
  return result;
}

uint64_t *rapidjson::GenericDocument<rapidjson::UTF8<char>,rapidjson::MemoryPoolAllocator<rapidjson::CrtAllocator>,rapidjson::CrtAllocator>::Int64(uint64_t *result, unint64_t a2)
{
  uint64_t *v3;
  uint64_t v4;
  __int16 v5;
  __int16 v6;

  v3 = result;
  v4 = result[8];
  if (result[9] - v4 <= 23)
  {
    result = (uint64_t *)rapidjson::internal::Stack<rapidjson::CrtAllocator>::Expand<rapidjson::GenericValue<rapidjson::UTF8<char>,rapidjson::MemoryPoolAllocator<rapidjson::CrtAllocator>>>(result + 5);
    v4 = v3[8];
  }
  v3[8] = v4 + 24;
  *(_QWORD *)(v4 + 8) = 0;
  *(_QWORD *)(v4 + 16) = 0;
  *(_QWORD *)v4 = a2;
  *(_WORD *)(v4 + 22) = 150;
  if ((a2 & 0x8000000000000000) != 0)
  {
    if (a2 < 0xFFFFFFFF80000000)
      return result;
    v6 = 182;
    goto LABEL_11;
  }
  if (HIDWORD(a2))
    v5 = 406;
  else
    v5 = 470;
  *(_WORD *)(v4 + 22) = v5;
  if (!(a2 >> 31))
  {
    v6 = v5 | 0x20;
LABEL_11:
    *(_WORD *)(v4 + 22) = v6;
  }
  return result;
}

uint64_t *rapidjson::GenericDocument<rapidjson::UTF8<char>,rapidjson::MemoryPoolAllocator<rapidjson::CrtAllocator>,rapidjson::CrtAllocator>::Uint64(uint64_t *result, uint64_t a2)
{
  uint64_t *v3;
  uint64_t v4;
  __int16 v5;

  v3 = result;
  v4 = result[8];
  if (result[9] - v4 <= 23)
  {
    result = (uint64_t *)rapidjson::internal::Stack<rapidjson::CrtAllocator>::Expand<rapidjson::GenericValue<rapidjson::UTF8<char>,rapidjson::MemoryPoolAllocator<rapidjson::CrtAllocator>>>(result + 5);
    v4 = v3[8];
  }
  v3[8] = v4 + 24;
  *(_QWORD *)(v4 + 8) = 0;
  *(_QWORD *)(v4 + 16) = 0;
  *(_QWORD *)v4 = a2;
  if (a2 < 0)
    v5 = 278;
  else
    v5 = 406;
  *(_WORD *)(v4 + 22) = v5;
  if (!HIDWORD(a2))
  {
    *(_WORD *)(v4 + 22) = v5 | 0x40;
    if (!((unint64_t)a2 >> 31))
      *(_WORD *)(v4 + 22) = v5 | 0x60;
  }
  return result;
}

uint64_t *rapidjson::GenericDocument<rapidjson::UTF8<char>,rapidjson::MemoryPoolAllocator<rapidjson::CrtAllocator>,rapidjson::CrtAllocator>::Int(uint64_t *result, int a2)
{
  uint64_t *v3;
  uint64_t v4;
  __int16 v5;

  v3 = result;
  v4 = result[8];
  if (result[9] - v4 <= 23)
  {
    result = (uint64_t *)rapidjson::internal::Stack<rapidjson::CrtAllocator>::Expand<rapidjson::GenericValue<rapidjson::UTF8<char>,rapidjson::MemoryPoolAllocator<rapidjson::CrtAllocator>>>(result + 5);
    v4 = v3[8];
  }
  v3[8] = v4 + 24;
  *(_QWORD *)(v4 + 8) = 0;
  *(_QWORD *)(v4 + 16) = 0;
  *(_QWORD *)v4 = a2;
  if (a2 < 0)
    v5 = 182;
  else
    v5 = 502;
  *(_WORD *)(v4 + 22) = v5;
  return result;
}

uint64_t *rapidjson::GenericDocument<rapidjson::UTF8<char>,rapidjson::MemoryPoolAllocator<rapidjson::CrtAllocator>,rapidjson::CrtAllocator>::Uint(uint64_t *result, int a2)
{
  uint64_t *v3;
  uint64_t v4;
  __int16 v5;

  v3 = result;
  v4 = result[8];
  if (result[9] - v4 <= 23)
  {
    result = (uint64_t *)rapidjson::internal::Stack<rapidjson::CrtAllocator>::Expand<rapidjson::GenericValue<rapidjson::UTF8<char>,rapidjson::MemoryPoolAllocator<rapidjson::CrtAllocator>>>(result + 5);
    v4 = v3[8];
  }
  v3[8] = v4 + 24;
  *(_QWORD *)(v4 + 8) = 0;
  *(_QWORD *)(v4 + 16) = 0;
  *(_QWORD *)v4 = a2;
  if (a2 < 0)
    v5 = 470;
  else
    v5 = 502;
  *(_WORD *)(v4 + 22) = v5;
  return result;
}

uint64_t *rapidjson::GenericValue<rapidjson::UTF8<char>,rapidjson::MemoryPoolAllocator<rapidjson::CrtAllocator>>::operator[]<rapidjson::MemoryPoolAllocator<rapidjson::CrtAllocator>>(unsigned int a1, int *a2, unsigned int *a3)
{
  unsigned int v5;
  int *v6;
  uint64_t v7;
  int *v8;
  uint64_t *result;
  unsigned __int8 v10;

  if (a1)
  {
    v5 = a1;
    v6 = &a2[12 * a1];
    v7 = 48 * a1;
    v8 = a2;
    while (!rapidjson::GenericValue<rapidjson::UTF8<char>,re::internal::RapidJSONPoolAllocator<re::internal::RapidJSONAllocator>>::StringEqual<re::internal::RapidJSONPoolAllocator<re::internal::RapidJSONAllocator>>(a3, v8))
    {
      v8 += 12;
      v7 -= 48;
      if (!v7)
      {
        v8 = v6;
        break;
      }
    }
  }
  else
  {
    v5 = 0;
    v8 = a2;
  }
  if (v8 != &a2[12 * v5])
    return (uint64_t *)(v8 + 6);
  v10 = atomic_load((unsigned __int8 *)&_MergedGlobals_509);
  if ((v10 & 1) == 0)
  {
    if (__cxa_guard_acquire(&_MergedGlobals_509))
    {
      qword_254124138 = 0;
      unk_254124140 = 0;
      qword_254124148 = 0;
      __cxa_guard_release(&_MergedGlobals_509);
    }
  }
  result = &qword_254124138;
  qword_254124138 = 0;
  unk_254124140 = 0;
  qword_254124148 = 0;
  return result;
}

int *rapidjson::GenericValue<rapidjson::UTF8<char>,rapidjson::MemoryPoolAllocator<rapidjson::CrtAllocator>>::FindMember(unsigned int a1, int *a2, char *__s)
{
  int *v5;
  uint64_t v6;
  _QWORD v8[4];

  v8[3] = *MEMORY[0x24BDAC8D0];
  v8[1] = __s;
  v8[2] = 0x405000000000000;
  v8[0] = strlen(__s);
  if (a1)
  {
    v5 = &a2[12 * a1];
    v6 = 48 * a1;
    while (!rapidjson::GenericValue<rapidjson::UTF8<char>,re::internal::RapidJSONPoolAllocator<re::internal::RapidJSONAllocator>>::StringEqual<re::internal::RapidJSONPoolAllocator<re::internal::RapidJSONAllocator>>((unsigned int *)v8, a2))
    {
      a2 += 12;
      v6 -= 48;
      if (!v6)
        return v5;
    }
  }
  return a2;
}

void *REMeshSmoothComponentGetComponentType()
{
  if (re::ecs2::dispatchOnceInitECSComponents(void)::onceToken != -1)
    dispatch_once(&re::ecs2::dispatchOnceInitECSComponents(void)::onceToken, &__block_literal_global_13);
  return re::ecs2::ComponentImpl<re::ecs2::MeshSmoothComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType;
}

uint64_t REMeshSmoothComponentGetAssignedMeshDeformation(uint64_t a1)
{
  return *(_QWORD *)(a1 + 112);
}

uint64_t REMeshSmoothComponentSetAssignedMeshDeformation(uint64_t a1, uint64_t a2)
{
  __int128 v3;
  uint64_t v4;
  __int128 v6;
  uint64_t v7;

  re::AssetAPIHelper::assetHandleCreate(a2, (uint64_t *)&v6);
  v3 = *(_OWORD *)(a1 + 112);
  *(_OWORD *)(a1 + 112) = v6;
  v6 = v3;
  v4 = *(_QWORD *)(a1 + 128);
  *(_QWORD *)(a1 + 128) = v7;
  v7 = v4;
  re::AssetHandle::~AssetHandle((re::AssetHandle *)&v6);
  *(_QWORD *)(a1 + 48) = 0;
  ++*(_DWORD *)(a1 + 56);
  *(_QWORD *)(a1 + 88) = 0;
  ++*(_DWORD *)(a1 + 96);
  return re::ecs2::Component::enqueueMarkDirty(a1);
}

uint64_t REMeshSmoothComponentSetIterations(_QWORD *a1, unint64_t a2, int a3)
{
  uint64_t result;
  unint64_t v7;

  result = re::initializeAttributes<re::ecs2::MeshSmoothAttributes,re::ecs2::MeshSmoothComponent>((uint64_t)(a1 + 4), a1);
  if ((_DWORD)result)
  {
    v7 = a1[6];
    if (v7)
    {
      if (v7 <= a2)
      {
        os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
      }
      *(_DWORD *)(a1[8] + 4 * a2) = a3;
      return re::ecs2::Component::enqueueMarkDirty((uint64_t)a1);
    }
  }
  return result;
}

uint64_t re::initializeAttributes<re::ecs2::MeshSmoothAttributes,re::ecs2::MeshSmoothComponent>(uint64_t a1, _QWORD *a2)
{
  BOOL v2;
  uint64_t v4;
  unsigned int v5;
  uint64_t v6;
  uint64_t result;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t i;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t *v19;
  uint64_t v20;

  v20 = *MEMORY[0x24BDAC8D0];
  if (*(_QWORD *)(a1 + 16))
    v2 = *(_QWORD *)(a1 + 56) == 0;
  else
    v2 = 1;
  if (!v2)
    return 1;
  v4 = a2[15];
  if (v4)
  {
    v5 = atomic_load((unsigned int *)(v4 + 704));
    if (v5 == 2)
    {
      v6 = *(_QWORD *)(a2[2] + 176);
      if (v6)
      {
        result = re::AssetHandle::loadedAsset<re::MeshAsset>((re::MeshAsset *)(v6 + 32));
        if (!result)
          return result;
        v9 = result;
        v10 = re::AssetHandle::asset<re::BasicAsset<re::AssignedMeshDeformation,&re::kAssignedMeshDeformationAssetName,&re::kAssignedMeshDeformationAssetExtension>>((re::AssetHandle *)(a2 + 14));
        *(_QWORD *)(a1 + 16) = 0;
        ++*(_DWORD *)(a1 + 24);
        *(_QWORD *)(a1 + 56) = 0;
        ++*(_DWORD *)(a1 + 64);
        if (*(_QWORD *)(v10 + 16))
        {
          v11 = v10;
          v12 = 0;
          v13 = v9 + 448;
          do
          {
            re::MeshNameMap::meshInstancePartsForIdentifier(v13, (unsigned __int8 *)(*(_QWORD *)(v11 + 32) + 40 * v12), &v16);
            if (v16)
            {
              for (i = 0; i != v16; ++i)
              {
                v15 = i;
                (*(void (**)(uint64_t *, uint64_t *))(*v19 + 16))(v19, &v15);
                v15 = i;
                (*(void (**)(uint64_t *, uint64_t *))(*v19 + 16))(v19, &v15);
                LODWORD(v15) = 10;
                re::DynamicArray<int>::add((_QWORD *)a1, &v15);
                LODWORD(v15) = 1056964608;
                re::DynamicArray<float>::add((_anonymous_namespace_ *)(a1 + 40), (float *)&v15);
              }
            }
            if (v19)
            {
              (*(void (**)(uint64_t *))*v19)(v19);
              if (v19 != &v17)
                (*(void (**)(uint64_t))(*(_QWORD *)v18 + 40))(v18);
            }
            ++v12;
          }
          while (v12 < *(_QWORD *)(v11 + 16));
        }
        return 1;
      }
    }
  }
  return 0;
}

uint64_t REMeshSmoothComponentSetLambda(_QWORD *a1, unint64_t a2, float a3)
{
  uint64_t result;
  unint64_t v7;

  result = re::initializeAttributes<re::ecs2::MeshSmoothAttributes,re::ecs2::MeshSmoothComponent>((uint64_t)(a1 + 4), a1);
  if ((_DWORD)result)
  {
    v7 = a1[11];
    if (v7)
    {
      if (v7 <= a2)
      {
        os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
      }
      *(float *)(a1[13] + 4 * a2) = a3;
      return re::ecs2::Component::enqueueMarkDirty((uint64_t)a1);
    }
  }
  return result;
}

void *RERayTracedShadowReceiverComponentGetComponentType()
{
  if (re::ecs2::dispatchOnceInitECSComponents(void)::onceToken != -1)
    dispatch_once(&re::ecs2::dispatchOnceInitECSComponents(void)::onceToken, &__block_literal_global_13);
  return re::ecs2::ComponentImpl<re::ecs2::RayTracedShadowReceiverComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType;
}

uint64_t addRayTracedShadowReceiverToEntitySubtree(uint64_t result, int a2)
{
  uint64_t v3;
  uint64_t v4;
  re::ecs2::Entity **v5;
  uint64_t v6;
  re::ecs2::Entity *v7;

  v3 = result;
  if (*(_QWORD *)(result + 176))
    result = re::ecs2::EntityComponentCollection::getOrAdd((re::ecs2::EntityComponentCollection *)(result + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::RayTracedShadowReceiverComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType);
  if (a2)
  {
    v4 = *(_QWORD *)(v3 + 328);
    if (v4)
    {
      v5 = *(re::ecs2::Entity ***)(v3 + 344);
      v6 = 8 * v4;
      do
      {
        v7 = *v5++;
        result = addRayTracedShadowReceiverToEntitySubtree(v7, 1);
        v6 -= 8;
      }
      while (v6);
    }
  }
  return result;
}

void removeRayTracedShadowReceiverFromEntitySubtree(re::ecs2::Entity *a1, int a2)
{
  uint64_t v4;
  re::ecs2::Entity **v5;
  uint64_t v6;
  re::ecs2::Entity *v7;

  re::ecs2::EntityComponentCollection::remove((re::ecs2::Entity *)((char *)a1 + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::RayTracedShadowReceiverComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType);
  if (a2)
  {
    v4 = *((_QWORD *)a1 + 41);
    if (v4)
    {
      v5 = (re::ecs2::Entity **)*((_QWORD *)a1 + 43);
      v6 = 8 * v4;
      do
      {
        v7 = *v5++;
        removeRayTracedShadowReceiverFromEntitySubtree(v7, 1);
        v6 -= 8;
      }
      while (v6);
    }
  }
}

uint64_t RERayTracedShadowReceiverSetVisibleForScene(uint64_t a1, char a2)
{
  uint64_t result;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;

  result = re::ecs2::SceneComponentTable::get((re::ecs2::SceneComponentTable *)(a1 + 200), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::RayTracedShadowReceiverComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType);
  if (result)
  {
    v4 = *(_QWORD *)(result + 24);
    if (v4)
    {
      v5 = *(uint64_t **)(result + 40);
      v6 = 8 * v4;
      do
      {
        v7 = *v5++;
        *(_BYTE *)(v7 + 25) = a2;
        v6 -= 8;
      }
      while (v6);
    }
  }
  return result;
}

uint64_t RERayTracedShadowReceiverComponentSetVisible(uint64_t result, char a2)
{
  *(_BYTE *)(result + 25) = a2;
  return result;
}

uint64_t RERayTracedShadowReceiverComponentGetVisible(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 25);
}

re::ecs2::Component *REComponentCreateHandle(re::ecs2::Component *result)
{
  if (result)
    return (re::ecs2::Component *)re::ecs2::HandleTable::handleIndexAndGeneration((re::ecs2::HandleTable *)re::ecs2::HandleTable::m_instance, result);
  return result;
}

uint64_t REComponentFromHandle(unint64_t a1, uint64_t a2)
{
  unint64_t Slot;
  unint64_t v4;

  Slot = re::ecs2::HandleTable::getSlot((re::ecs2::HandleTable *)re::ecs2::HandleTable::m_instance, a1);
  if (*(_QWORD *)(Slot + 8) != a2)
    return 0;
  v4 = Slot;
  re::ecs2::HandleTable::garbageCollectIncremental((_QWORD *)re::ecs2::HandleTable::m_instance);
  if (*(_QWORD *)(*(_QWORD *)v4 + 16))
    return *(_QWORD *)v4;
  else
    return 0;
}

uint64_t REFrameBoundsGetOccupancyGrid@<X0>(char *__s1@<X3>, uint64_t a2@<X0>, unint64_t a3@<X4>, _OWORD *a4@<X5>, uint64_t a5@<X8>)
{
  _anonymous_namespace_ *v10;
  const char *v11;
  unint64_t *v12;
  uint64_t v13;
  unint64_t *v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  uint64_t result;
  uint64_t v20;
  char v21;

  v10 = (_anonymous_namespace_ *)strcmp(__s1, "EnvironmentColor");
  v11 = "ImmersiveEnvironmentPortal";
  if ((_DWORD)v10)
  {
    v10 = (_anonymous_namespace_ *)strcmp(__s1, "EnvironmentDepth");
    if ((_DWORD)v10)
      v11 = "Camera";
  }
  v12 = (unint64_t *)re::HashTable<re::DynamicString,re::DynamicInlineArray<re::FixedOccupancyGrid,2ul>,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::tryGet(a2 + 64, (uint64_t)&v20);
  if (v12)
  {
    if (*v12 <= a3)
    {
      re::internal::assertLog((re::internal *)6, v13, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < m_size", "operator[]", 389, a3, *v12);
      result = _os_crash();
      __break(1u);
      return result;
    }
    v14 = &v12[10 * a3];
    v16 = *((_OWORD *)v14 + 1);
    v15 = *((_OWORD *)v14 + 2);
    v17 = *((_OWORD *)v14 + 4);
    a4[2] = *((_OWORD *)v14 + 3);
    a4[3] = v17;
    *a4 = v16;
    a4[1] = v15;
    *(_QWORD *)&v15 = v14[10];
    *(_QWORD *)&v18 = v15;
    *((_QWORD *)&v18 + 1) = DWORD1(v15);
    *(_OWORD *)a5 = v18;
    *(_QWORD *)(a5 + 16) = 0x3F80000000000000;
  }
  else
  {
    *(_QWORD *)a5 = 0;
    *(_QWORD *)(a5 + 8) = 0;
    *(_QWORD *)(a5 + 16) = 0;
  }
  result = v20;
  if (v20)
  {
    if ((v21 & 1) != 0)
      return (*(uint64_t (**)(void))(*(_QWORD *)v20 + 40))();
  }
  return result;
}

uint64_t re::HashTable<re::DynamicString,re::DynamicInlineArray<re::FixedOccupancyGrid,2ul>,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::tryGet(uint64_t a1, uint64_t a2)
{
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char v8;

  v4 = re::Hash<re::DynamicString>::operator()((uint64_t)&v8, a2);
  if (!*(_QWORD *)a1)
    return 0;
  v5 = *(unsigned int *)(*(_QWORD *)(a1 + 8) + 4 * (v4 % *(unsigned int *)(a1 + 24)));
  if ((_DWORD)v5 == 0x7FFFFFFF)
    return 0;
  v6 = *(_QWORD *)(a1 + 16);
  while (!re::DynamicString::operator==(v6 + 224 * v5 + 16, a2))
  {
    v5 = *(_DWORD *)(v6 + 224 * v5 + 8) & 0x7FFFFFFF;
    if (v5 == 0x7FFFFFFF)
      return 0;
  }
  return v6 + 224 * v5 + 48;
}

uint64_t REFrameBoundsGetOccupancyGridCount(uint64_t a1, int a2, int a3, char *__s1)
{
  _anonymous_namespace_ *v6;
  const char *v7;
  uint64_t *v8;
  uint64_t v9;
  NSObject *v10;
  _BYTE *v11;
  uint64_t v13;
  char v14;
  _BYTE v15[23];
  uint8_t buf[4];
  _BYTE *v17;
  uint64_t v18;

  v18 = *MEMORY[0x24BDAC8D0];
  v6 = (_anonymous_namespace_ *)strcmp(__s1, "EnvironmentColor");
  v7 = "ImmersiveEnvironmentPortal";
  if ((_DWORD)v6)
  {
    v6 = (_anonymous_namespace_ *)strcmp(__s1, "EnvironmentDepth");
    if ((_DWORD)v6)
      v7 = "Camera";
  }
  v8 = (uint64_t *)re::HashTable<re::DynamicString,re::DynamicInlineArray<re::FixedOccupancyGrid,2ul>,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::tryGet(a1 + 64, (uint64_t)&v13);
  if (v8)
  {
    v9 = *v8;
  }
  else
  {
    v10 = *re::graphicsLogObjects(0);
    if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
    {
      if ((v14 & 1) != 0)
        v11 = *(_BYTE **)&v15[7];
      else
        v11 = v15;
      *(_DWORD *)buf = 136315138;
      v17 = v11;
      _os_log_impl(&dword_224FE9000, v10, OS_LOG_TYPE_DEFAULT, "Attempting to get occupancy count for camera named \"%s\", but could not find any.", buf, 0xCu);
    }
    v9 = 0;
  }
  if (v13 && (v14 & 1) != 0)
    (*(void (**)(void))(*(_QWORD *)v13 + 40))();
  return v9;
}

void REEntityCharacterSetup(uint64_t a1, uint64_t a2, unsigned __int8 *a3)
{
  setEntityCharacterSkeletalPoseDefinition(a2, a1, *((_QWORD *)a3 + 1), *((char **)a3 + 2), *a3);
}

void setEntityCharacterSkeletalPoseDefinition(uint64_t a1, uint64_t a2, uint64_t a3, char *a4, int a5)
{
  re::ecs2::EntityComponentCollection *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  re::MeshAsset *SkeletonJointCount;
  unint64_t v19;
  re::MeshAsset *SkeletonJointName;
  re::MeshAsset *v21;
  re::MeshAsset *v22;
  re::MeshAsset *v23;
  unint64_t v24;
  char *v25;
  size_t v26;
  unint64_t i;
  re::MeshAsset *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t *v32;
  char v33;
  uint64_t v34;
  size_t v35;
  unint64_t v36;
  size_t v37;
  const char *v38;
  size_t v39;
  uint64_t v40;
  NSObject *v41;
  const char *v42;
  unint64_t v43;
  uint64_t v44;
  uint64_t *v45;
  uint64_t v46;
  unint64_t *v47;
  uint64_t v48;
  uint64_t *v49;
  char *v50;
  uint64_t v51;
  unint64_t v52;
  double SkeletonBindPoseTransform;
  float32x4_t v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  uint64_t v59;
  unint64_t v60;
  unint64_t j;
  unint64_t SkeletonJointParent;
  double v63;
  float32x4_t v64;
  float32x4_t v65;
  float32x4_t v66;
  float32x4_t v67;
  float32x4_t v68;
  uint64_t v69;
  uint64_t *v70;
  __int128 v71;
  __int128 v72;
  uint64_t v73;
  uint64_t v74;
  NSObject *v75;
  _QWORD *v76;
  uint64_t v77;
  unint64_t *v78;
  double v79;
  int v80;
  __int128 v81;
  _DWORD *v82;
  uint64_t v83;
  int v84;
  uint64_t v85;
  unint64_t v86;
  size_t v87;
  char *v88;
  unint64_t v89;
  _DWORD *v90;
  uint64_t v91;
  uint64_t v92;
  re *v93;
  uint64_t AssetWithDefinitions;
  uint64_t v95;
  char v96;
  _QWORD *v97;
  uint64_t v98;
  char *v99;
  uint64_t *v100;
  unint64_t *v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  int v105;
  __int128 v106;
  __int128 v107;
  __int128 v108;
  __int128 v109;
  uint64_t v110;
  char *v111;
  uint64_t *v112;
  uint64_t v113;
  char *v114;
  uint64_t *v115;
  _OWORD v116[4];
  uint8_t buf[16];
  __int128 v118;
  __int128 v119;
  __int128 v120;
  uint64_t v121;

  v121 = *MEMORY[0x24BDAC8D0];
  if (re::ecs2::dispatchOnceInitECSComponents(void)::onceToken != -1)
    dispatch_once(&re::ecs2::dispatchOnceInitECSComponents(void)::onceToken, &__block_literal_global_13);
  v10 = (re::ecs2::EntityComponentCollection *)(a2 + 32);
  v11 = re::ecs2::EntityComponentCollection::get((re::ecs2::EntityComponentCollection *)(a2 + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::MeshComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType);
  if (!v11)
  {
    if (CoreRELog::onceToken != -1)
      dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
    v41 = (id)CoreRELog::log;
    if (os_log_type_enabled(v41, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      v42 = "Created entity character does not have a corresponding mesh.";
LABEL_43:
      _os_log_impl(&dword_224FE9000, v41, OS_LOG_TYPE_DEFAULT, v42, buf, 2u);
    }
LABEL_44:

    return;
  }
  v12 = *(_QWORD *)(v11 + 32);
  REAssetHandleLoadNow(v12);
  if (v13)
  {
    v14 = *(_QWORD *)(v13 + 936);
    if (v14)
    {
      v104 = a1;
      v105 = a5;
      v103 = a2;
      v15 = 0;
      v16 = -1;
      do
      {
        v17 = v16;
        v16 = v15;
        if (v17 != -1)
        {
          SkeletonJointCount = REMeshAssetGetSkeletonJointCount(v12, v15);
          if (SkeletonJointCount != REMeshAssetGetSkeletonJointCount(v12, v17))
          {
            if (CoreRELog::onceToken != -1)
              dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
            v41 = (id)CoreRELog::log;
            if (os_log_type_enabled(v41, OS_LOG_TYPE_DEFAULT))
            {
              *(_WORD *)buf = 0;
              v42 = "Created entity character contains multiple skeletons.";
              goto LABEL_43;
            }
            goto LABEL_44;
          }
          if (SkeletonJointCount)
          {
            v19 = 0;
            while (1)
            {
              SkeletonJointName = REMeshAssetGetSkeletonJointName(v12, v17, v19);
              v21 = REMeshAssetGetSkeletonJointName(v12, v15, v19);
              if (strcmp((const char *)SkeletonJointName, (const char *)v21))
                break;
              if (SkeletonJointCount == (re::MeshAsset *)++v19)
                goto LABEL_13;
            }
            if (CoreRELog::onceToken != -1)
              dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
            v41 = (id)CoreRELog::log;
            if (os_log_type_enabled(v41, OS_LOG_TYPE_DEFAULT))
            {
              *(_WORD *)buf = 0;
              v42 = "Created entity character contains multiple skeletons.";
              goto LABEL_43;
            }
            goto LABEL_44;
          }
LABEL_13:
          v16 = v17;
        }
        ++v15;
      }
      while (v15 != v14);
      if (v16 == -1)
        return;
      v22 = REMeshAssetGetSkeletonJointCount(v12, v16);
      if (v22)
      {
        v23 = v22;
        v100 = &v98;
        MEMORY[0x24BDAC7A8](v22);
        v25 = (char *)&v98 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
        if (v24 >= 0x200)
          v26 = 512;
        else
          v26 = v24;
        bzero((char *)&v98 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0), v26);
        for (i = 0; (re::MeshAsset *)i != v23; ++i)
        {
          v28 = REMeshAssetGetSkeletonJointName(v12, v16, i);
          *(_QWORD *)&v25[8 * i] = v28;
        }
        if (a3 == 0 || a4 == 0)
          a4 = v25;
        MEMORY[0x24BDAC7A8](v28);
        v32 = (unint64_t *)((char *)&v98 - v31);
        v102 = v30;
        v101 = v32;
        if ((v33 & 1) != 0)
        {
          v34 = 0;
          v99 = a4;
          while (2)
          {
            *(_QWORD *)&v106 = v34;
            *(_QWORD *)&v109 = *(_QWORD *)&a4[8 * v34];
            v35 = strlen((const char *)v109);
            v36 = 0;
            v37 = v35 + 1;
            *(_QWORD *)&v108 = ~v35;
            *(_QWORD *)&v107 = -(uint64_t)v35;
            while (1)
            {
              v38 = *(const char **)&v25[8 * v36];
              v39 = strlen(v38);
              v29 = strcmp((const char *)v109, v38);
              if (!(_DWORD)v29)
                break;
              if (v37 < v39 && v38[v39 + (_QWORD)v108] == 47)
              {
                v29 = strcmp((const char *)v109, &v38[v39 + v107]);
                if (!(_DWORD)v29)
                  break;
              }
              if (v23 == (re::MeshAsset *)++v36)
              {
                if (CoreRELog::onceToken != -1)
                  dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
                v75 = (id)CoreRELog::log;
                if (os_log_type_enabled(v75, OS_LOG_TYPE_ERROR))
                {
                  *(_DWORD *)buf = 136315138;
                  *(_QWORD *)&buf[4] = v109;
                  _os_log_error_impl(&dword_224FE9000, v75, OS_LOG_TYPE_ERROR, "Created entity character does not contain supplied joint name: %s.", buf, 0xCu);
                }

                return;
              }
            }
            v40 = v106;
            v101[(_QWORD)v106] = v36;
            v34 = v40 + 1;
            a4 = v99;
            if (v34 != a3)
              continue;
            break;
          }
        }
        else
        {
          v43 = 0;
          do
          {
            v32[v43] = v43;
            ++v43;
          }
          while (v30 != v43);
        }
        v113 = 0;
        v114 = 0;
        v115 = 0;
        MEMORY[0x24BDAC7A8](v29);
        v45 = &v98 - 2 * v44;
        v111 = 0;
        v110 = 0;
        v112 = 0;
        MEMORY[0x24BDAC7A8](v46);
        v49 = &v98 - 8 * v48;
        if ((v105 & 1) != 0)
        {
          v50 = a4;
          if (v48)
          {
            v51 = 0;
            do
            {
              v52 = v47[v51];
              SkeletonBindPoseTransform = REMeshAssetGetSkeletonBindPoseTransform(v12, v16, v52);
              *(double *)&v55 = RESRTMatrix(*(float *)&SkeletonBindPoseTransform, v54);
              v109 = v55;
              v108 = v56;
              v107 = v57;
              v106 = v58;
              v59 = v12;
              v60 = v16;
              for (j = v52; ; j = SkeletonJointParent)
              {
                SkeletonJointParent = REMeshAssetGetSkeletonJointParent(v59, v60, j);
                if (SkeletonJointParent == -1)
                  break;
                v63 = REMeshAssetGetSkeletonBindPoseTransform(v12, v16, SkeletonJointParent);
                *(double *)v65.i64 = RESRTMatrix(*(float *)&v63, v64);
                v69 = 0;
                v116[0] = v109;
                v116[1] = v108;
                v116[2] = v107;
                v116[3] = v106;
                *(_OWORD *)buf = 0u;
                v118 = 0u;
                v119 = 0u;
                v120 = 0u;
                do
                {
                  *(float32x4_t *)&buf[v69 * 16] = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v65, COERCE_FLOAT(v116[v69])), v66, *(float32x2_t *)&v116[v69], 1), v67, (float32x4_t)v116[v69], 2), v68, (float32x4_t)v116[v69], 3);
                  ++v69;
                }
                while (v69 != 4);
                v109 = *(_OWORD *)buf;
                v108 = v118;
                v107 = v119;
                v106 = v120;
                v59 = v12;
                v60 = v16;
              }
              v70 = &v49[8 * v51];
              v71 = v108;
              *(_OWORD *)v70 = v109;
              *((_OWORD *)v70 + 1) = v71;
              v72 = v106;
              *((_OWORD *)v70 + 2) = v107;
              *((_OWORD *)v70 + 3) = v72;
              ++v51;
              v48 = v102;
              v47 = v101;
            }
            while (v51 != v102);
          }
          v73 = 0;
          v110 = v48;
          v111 = v50;
          v112 = v49;
          v74 = 1;
        }
        else
        {
          if (v48)
          {
            v76 = v45 + 4;
            v77 = v102;
            do
            {
              v78 = v47 + 1;
              v79 = REMeshAssetGetSkeletonBindPoseTransform(v12, v16, *v47);
              v47 = v78;
              *((_DWORD *)v76 - 6) = v80;
              *((double *)v76 - 4) = v79;
              *((_OWORD *)v76 - 1) = v81;
              v82 = v76 + 1;
              *v76 = v83;
              v76 += 6;
              *v82 = v84;
              --v77;
            }
            while (v77);
          }
          v74 = 0;
          v113 = v102;
          v114 = a4;
          v73 = 1;
          v115 = v45;
        }
        if (v85)
          v86 = *(_QWORD *)(v85 + 416);
        else
          v86 = 0;
        MEMORY[0x24BDAC7A8](v85);
        v88 = (char *)&v98 - ((v87 + 15) & 0xFFFFFFFFFFFFFFF0);
        bzero(v88, v87);
        if (v86)
        {
          v89 = 0;
          v90 = v88 + 36;
          do
          {
            *((_BYTE *)v90 - 36) = 2;
            if (v91)
              v92 = *(_QWORD *)(v91 + 8);
            else
              v92 = 0;
            *(_QWORD *)(v90 - 7) = v92;
            *((_BYTE *)v90 - 4) = v105;
            *v90 = 0;
            v90 += 10;
            ++v89;
          }
          while (v86 != v89);
        }
        v93 = (re *)re::ServiceLocator::serviceOrNull<re::AssetService>(v104);
        AssetWithDefinitions = RESkeletalPoseDefinitionAssetCreateAssetWithDefinitionsEx(v93, v73, (uint64_t)&v113, v74, (uint64_t)&v110, v86, (uint64_t)v88);
        if (re::ecs2::dispatchOnceInitECSComponents(void)::onceToken != -1)
          dispatch_once(&re::ecs2::dispatchOnceInitECSComponents(void)::onceToken, &__block_literal_global_13);
        v95 = v103;
        v96 = v105;
        v97 = (_QWORD *)re::ecs2::EntityComponentCollection::get(v10, (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::SkeletalPoseComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType);
        RESkeletalPoseComponentSetSkeletalPoseDefinition(v97, AssetWithDefinitions);
        if ((v96 & 1) != 0)
          REEntityCharacterSetSkeletalPoseModelSpace(v95, (uint64_t)v112);
        else
          REEntityCharacterSetSkeletalPoseLocalSpace(v95, (uint64_t)v115);

        return;
      }
      if (CoreRELog::onceToken != -1)
        dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
      v41 = (id)CoreRELog::log;
      if (os_log_type_enabled(v41, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)buf = 0;
        v42 = "Created entity character does not contain any joints.";
        goto LABEL_43;
      }
      goto LABEL_44;
    }
  }
}

uint64_t REEntityCharacterCreate(re *a1, void *a2, unsigned __int8 *a3)
{
  AssetService *v6;
  id *v7;
  id *v8;
  re::ecs2::Scene *v9;
  uint64_t v10;
  NSObject *v11;
  void *v12;
  NSObject *v13;
  void *v14;
  id v15;
  uint64_t v16;
  id v17;
  NSObject *v18;
  const __CFString *v19;
  const char *v20;
  const char *v21;
  const __CFString *v23;
  const char *CStringPtr;
  uint64_t v25;
  const __CFString *v26;
  const char *v27;
  CFTypeRef cf;
  uint8_t buf[4];
  uint64_t v30;
  uint64_t v31;

  v31 = *MEMORY[0x24BDAC8D0];
  v6 = (AssetService *)re::ServiceLocator::serviceOrNull<re::AssetService>((uint64_t)a1);
  v7 = RESceneImportOperationCreateWithURL(a2, a1);
  v8 = v7;
  if (!*((_DWORD *)v7 + 6))
  {
    *((_BYTE *)v7 + 192) = 1;
    *((_DWORD *)v7 + 78) = 0;
  }
  cf = 0;
  if ((RESceneImportOperationRun((uint64_t)v7, (CFErrorRef *)&cf) & 1) == 0)
  {
    if (CoreRELog::onceToken != -1)
      dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
    v11 = (id)CoreRELog::log;
    if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR))
    {
      v23 = CFURLGetString((CFURLRef)a2);
      CStringPtr = CFStringGetCStringPtr(v23, 0x8000100u);
      *(_DWORD *)buf = 136315138;
      v30 = (uint64_t)CStringPtr;
      _os_log_error_impl(&dword_224FE9000, v11, OS_LOG_TYPE_ERROR, "Could not load resource: %s.", buf, 0xCu);
    }

    if (cf)
    {
      objc_msgSend((id)cf, "localizedDescription");
      v12 = (void *)objc_claimAutoreleasedReturnValue();
      if (CoreRELog::onceToken != -1)
        dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
      v13 = (id)CoreRELog::log;
      if (os_log_type_enabled(v13, OS_LOG_TYPE_ERROR))
      {
        v25 = objc_msgSend(objc_retainAutorelease(v12), "cStringUsingEncoding:", 1);
        *(_DWORD *)buf = 136315138;
        v30 = v25;
        _os_log_error_impl(&dword_224FE9000, v13, OS_LOG_TYPE_ERROR, "Resource load error: %s.", buf, 0xCu);
      }

      CFRelease(cf);
    }

    return 0;
  }
  v9 = RESceneCreate((_anonymous_namespace_ *)"REEntityCharacterCreateInScene - Temporary Scene");
  if (*((_DWORD *)v8 + 6) == 3 && v8[84])
    v10 = *((_QWORD *)v8[86] + 12);
  else
    v10 = 0;
  v14 = (void *)(v10 + 8);
  v15 = (id)(v10 + 8);

  if ((RESceneLoadFromAsset(v9, v6, v10) & 1) == 0)
  {

    if (CoreRELog::onceToken != -1)
      dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
    v18 = (id)CoreRELog::log;
    if (!os_log_type_enabled(v18, OS_LOG_TYPE_ERROR))
      goto LABEL_30;
    v19 = CFURLGetString((CFURLRef)a2);
    v20 = CFStringGetCStringPtr(v19, 0x8000100u);
    *(_DWORD *)buf = 136315138;
    v30 = (uint64_t)v20;
    v21 = "Could create scene for resource: %s.";
    goto LABEL_34;
  }
  if (*((_QWORD *)v9 + 16) != 1)
  {

    if (CoreRELog::onceToken != -1)
      dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
    v18 = (id)CoreRELog::log;
    if (!os_log_type_enabled(v18, OS_LOG_TYPE_ERROR))
      goto LABEL_30;
    v26 = CFURLGetString((CFURLRef)a2);
    v27 = CFStringGetCStringPtr(v26, 0x8000100u);
    *(_DWORD *)buf = 136315138;
    v30 = (uint64_t)v27;
    v21 = "Could not load a single entity from the resource: %s.";
LABEL_34:
    _os_log_error_impl(&dword_224FE9000, v18, OS_LOG_TYPE_ERROR, v21, buf, 0xCu);
LABEL_30:

    return 0;
  }
  v16 = **((_QWORD **)v9 + 18);
  v17 = (id)(v16 + 8);
  RESceneRemoveEntity((uint64_t)v9, v16);

  if (v16)
    setEntityCharacterSkeletalPoseDefinition((uint64_t)a1, v16, *((_QWORD *)a3 + 1), *((char **)a3 + 2), *a3);
  return v16;
}

uint64_t REEntityCharacterAddToScene(uint64_t a1, re *a2, void *a3, unsigned __int8 *a4)
{
  uint64_t v5;

  v5 = REEntityCharacterCreate(a2, a3, a4);
  RESceneAddEntity(a1, v5);

  return v5;
}

uint64_t REEntityCharacterGetJointCount(uint64_t a1)
{
  uint64_t v2;
  NSObject *v4;
  const char *v5;
  uint8_t *v6;
  __int16 v7;
  __int16 v8;

  if (re::ecs2::dispatchOnceInitECSComponents(void)::onceToken != -1)
    dispatch_once(&re::ecs2::dispatchOnceInitECSComponents(void)::onceToken, &__block_literal_global_13);
  v2 = re::ecs2::EntityComponentCollection::get((re::ecs2::EntityComponentCollection *)(a1 + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::SkeletalPoseComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType);
  if (!v2)
  {
    if (CoreRELog::onceToken != -1)
      dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
    v4 = (id)CoreRELog::log;
    if (!os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
      goto LABEL_15;
    v8 = 0;
    v5 = "No skeleton found for entity.";
    v6 = (uint8_t *)&v8;
    goto LABEL_17;
  }
  if (*(_QWORD *)(v2 + 72) == 1)
    return RESkeletalPoseComponentGetJointCount(v2, 0);
  if (*(_QWORD *)(v2 + 112) == 1)
    return RESkeletalPoseComponentGetModelSpaceJointCount(v2, 0);
  if (CoreRELog::onceToken != -1)
    dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
  v4 = (id)CoreRELog::log;
  if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
  {
    v7 = 0;
    v5 = "Cannot get joint count for non-character entity.";
    v6 = (uint8_t *)&v7;
LABEL_17:
    _os_log_error_impl(&dword_224FE9000, v4, OS_LOG_TYPE_ERROR, v5, v6, 2u);
  }
LABEL_15:

  return 0;
}

const char *REEntityCharacterGetJointName(uint64_t a1, unint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  NSObject *v7;
  const char *v8;
  uint8_t *v9;
  __int16 v10;
  uint8_t buf[2];
  __int16 v12;

  if (re::ecs2::dispatchOnceInitECSComponents(void)::onceToken != -1)
    dispatch_once(&re::ecs2::dispatchOnceInitECSComponents(void)::onceToken, &__block_literal_global_13);
  v4 = re::ecs2::EntityComponentCollection::get((re::ecs2::EntityComponentCollection *)(a1 + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::SkeletalPoseComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType);
  if (!v4)
  {
    if (CoreRELog::onceToken != -1)
      dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
    v7 = (id)CoreRELog::log;
    if (!os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
      goto LABEL_16;
    v12 = 0;
    v8 = "No skeleton found for entity.";
    v9 = (uint8_t *)&v12;
    goto LABEL_26;
  }
  v5 = *(_QWORD *)(v4 + 32);
  if (!v5)
  {
    if (CoreRELog::onceToken != -1)
      dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
    v7 = (id)CoreRELog::log;
    if (!os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
      goto LABEL_16;
    *(_WORD *)buf = 0;
    v8 = "Skeletal pose has not been defined, not a proper entity character.";
    v9 = buf;
    goto LABEL_26;
  }
  if (!REAssetHandleIsLoaded(*(_QWORD *)(v4 + 32)))
    return 0;
  if (RESkeletalPoseDefinitionAssetGetPoseCount(v5) == 1)
  {
    if (RESkeletalPoseDefinitionAssetGetJointCount(v5, 0) > a2)
      return RESkeletalPoseDefinitionAssetGetJointName(v5, 0, a2);
    return 0;
  }
  if (RESkeletalPoseDefinitionAssetGetModelSpacePoseCount(v5) != 1)
  {
    if (CoreRELog::onceToken != -1)
      dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
    v7 = (id)CoreRELog::log;
    if (!os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
      goto LABEL_16;
    v10 = 0;
    v8 = "Cannot get joint name for non-character entity.";
    v9 = (uint8_t *)&v10;
LABEL_26:
    _os_log_error_impl(&dword_224FE9000, v7, OS_LOG_TYPE_ERROR, v8, v9, 2u);
LABEL_16:

    return 0;
  }
  if (RESkeletalPoseDefinitionAssetGetModelSpaceJointCount(v5, 0) <= a2)
    return 0;
  return RESkeletalPoseDefinitionAssetGetModelSpaceJointName(v5, 0, a2);
}

uint64_t REEntityCharacterGetSkeletalPoseLocalSpace(uint64_t a1, void *a2)
{
  re::ecs2::SkeletalPoseComponent *v4;
  uint64_t v5;
  unint64_t v6;
  NSObject *v7;
  const char *v8;
  uint8_t *v9;
  __int16 v11;
  __int16 v12;

  if (re::ecs2::dispatchOnceInitECSComponents(void)::onceToken != -1)
    dispatch_once(&re::ecs2::dispatchOnceInitECSComponents(void)::onceToken, &__block_literal_global_13);
  v4 = (re::ecs2::SkeletalPoseComponent *)re::ecs2::EntityComponentCollection::get((re::ecs2::EntityComponentCollection *)(a1 + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::SkeletalPoseComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType);
  if (!v4)
  {
    if (CoreRELog::onceToken != -1)
      dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
    v7 = (id)CoreRELog::log;
    if (!os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
      goto LABEL_13;
    v12 = 0;
    v8 = "No skeleton found for entity.";
    v9 = (uint8_t *)&v12;
    goto LABEL_16;
  }
  if (*((_QWORD *)v4 + 9) != 1)
  {
    if (CoreRELog::onceToken != -1)
      dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
    v7 = (id)CoreRELog::log;
    if (!os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
      goto LABEL_13;
    v11 = 0;
    v8 = "Cannot set local space transforms for non-character entity.";
    v9 = (uint8_t *)&v11;
LABEL_16:
    _os_log_error_impl(&dword_224FE9000, v7, OS_LOG_TYPE_ERROR, v8, v9, 2u);
LABEL_13:

    return 0;
  }
  v5 = 1;
  v6 = re::ecs2::SkeletalPoseComponent::skeletalPose(v4, 0, 1);
  memcpy(a2, *(const void **)(v6 + 32), 48 * *(_QWORD *)(v6 + 24));
  return v5;
}

uint64_t REEntityCharacterGetSkeletalPoseModelSpace(uint64_t a1, void *a2)
{
  uint64_t v4;
  NSObject *v6;
  const char *v7;
  uint8_t *v8;
  __int16 v9;
  __int16 v10;

  if (re::ecs2::dispatchOnceInitECSComponents(void)::onceToken != -1)
    dispatch_once(&re::ecs2::dispatchOnceInitECSComponents(void)::onceToken, &__block_literal_global_13);
  v4 = re::ecs2::EntityComponentCollection::get((re::ecs2::EntityComponentCollection *)(a1 + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::SkeletalPoseComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType);
  if (!v4)
  {
    if (CoreRELog::onceToken != -1)
      dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
    v6 = (id)CoreRELog::log;
    if (!os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
      goto LABEL_13;
    v10 = 0;
    v7 = "No skeleton found for entity.";
    v8 = (uint8_t *)&v10;
    goto LABEL_15;
  }
  if (*(_QWORD *)(v4 + 112) == 1)
  {
    RESkeletalPoseComponentGetModelSpaceJointTransforms(v4, 0, a2);
    return 1;
  }
  if (CoreRELog::onceToken != -1)
    dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
  v6 = (id)CoreRELog::log;
  if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
  {
    v9 = 0;
    v7 = "Cannot set model space transforms for non-character entity.";
    v8 = (uint8_t *)&v9;
LABEL_15:
    _os_log_error_impl(&dword_224FE9000, v6, OS_LOG_TYPE_ERROR, v7, v8, 2u);
  }
LABEL_13:

  return 0;
}

uint64_t REEntityCharacterSetSkeletalPoseLocalSpace(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  NSObject *v6;
  const char *v7;
  uint8_t *v8;
  __int16 v9;
  __int16 v10;

  if (re::ecs2::dispatchOnceInitECSComponents(void)::onceToken != -1)
    dispatch_once(&re::ecs2::dispatchOnceInitECSComponents(void)::onceToken, &__block_literal_global_13);
  v4 = re::ecs2::EntityComponentCollection::get((re::ecs2::EntityComponentCollection *)(a1 + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::SkeletalPoseComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType);
  if (!v4)
  {
    if (CoreRELog::onceToken != -1)
      dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
    v6 = (id)CoreRELog::log;
    if (!os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
      goto LABEL_13;
    v10 = 0;
    v7 = "No skeleton found for entity.";
    v8 = (uint8_t *)&v10;
    goto LABEL_15;
  }
  if (*(_QWORD *)(v4 + 72) == 1)
  {
    RESkeletalPoseComponentSetJointTransforms(v4, 0, a2);
    return 1;
  }
  if (CoreRELog::onceToken != -1)
    dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
  v6 = (id)CoreRELog::log;
  if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
  {
    v9 = 0;
    v7 = "Cannot set local space transforms for non-character entity.";
    v8 = (uint8_t *)&v9;
LABEL_15:
    _os_log_error_impl(&dword_224FE9000, v6, OS_LOG_TYPE_ERROR, v7, v8, 2u);
  }
LABEL_13:

  return 0;
}

uint64_t REEntityCharacterSetSkeletalPoseLocalRotations(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  NSObject *v6;
  const char *v7;
  uint8_t *v8;
  __int16 v9;
  __int16 v10;

  if (re::ecs2::dispatchOnceInitECSComponents(void)::onceToken != -1)
    dispatch_once(&re::ecs2::dispatchOnceInitECSComponents(void)::onceToken, &__block_literal_global_13);
  v4 = re::ecs2::EntityComponentCollection::get((re::ecs2::EntityComponentCollection *)(a1 + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::SkeletalPoseComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType);
  if (!v4)
  {
    if (CoreRELog::onceToken != -1)
      dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
    v6 = (id)CoreRELog::log;
    if (!os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
      goto LABEL_13;
    v10 = 0;
    v7 = "No skeleton found for entity.";
    v8 = (uint8_t *)&v10;
    goto LABEL_15;
  }
  if (*(_QWORD *)(v4 + 72) == 1)
  {
    RESkeletalPoseComponentSetJointRotations(v4, 0, a2);
    return 1;
  }
  if (CoreRELog::onceToken != -1)
    dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
  v6 = (id)CoreRELog::log;
  if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
  {
    v9 = 0;
    v7 = "Cannot set local space transforms for non-character entity.";
    v8 = (uint8_t *)&v9;
LABEL_15:
    _os_log_error_impl(&dword_224FE9000, v6, OS_LOG_TYPE_ERROR, v7, v8, 2u);
  }
LABEL_13:

  return 0;
}

uint64_t REEntityCharacterSetSkeletalPoseJointLocalSpace(uint64_t a1, unint64_t a2, __n128 a3, __n128 a4, __n128 a5)
{
  uint64_t v7;
  NSObject *v9;
  const char *v10;
  uint8_t *v11;
  uint8_t buf[2];
  __int16 v16;

  if (re::ecs2::dispatchOnceInitECSComponents(void)::onceToken != -1)
    dispatch_once(&re::ecs2::dispatchOnceInitECSComponents(void)::onceToken, &__block_literal_global_13);
  v7 = re::ecs2::EntityComponentCollection::get((re::ecs2::EntityComponentCollection *)(a1 + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::SkeletalPoseComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType);
  if (!v7)
  {
    if (CoreRELog::onceToken != -1)
      dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
    v9 = (id)CoreRELog::log;
    if (!os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
      goto LABEL_13;
    v16 = 0;
    v10 = "No skeleton found for entity.";
    v11 = (uint8_t *)&v16;
    goto LABEL_15;
  }
  if (*(_QWORD *)(v7 + 72) == 1)
  {
    RESkeletalPoseComponentSetJointTransform(v7, 0, a2, a3, a4, a5);
    return 1;
  }
  if (CoreRELog::onceToken != -1)
    dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
  v9 = (id)CoreRELog::log;
  if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
  {
    *(_WORD *)buf = 0;
    v10 = "Cannot set local space transforms for non-character entity.";
    v11 = buf;
LABEL_15:
    _os_log_error_impl(&dword_224FE9000, v9, OS_LOG_TYPE_ERROR, v10, v11, 2u);
  }
LABEL_13:

  return 0;
}

