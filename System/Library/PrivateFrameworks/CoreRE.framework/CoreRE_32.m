uint64_t physx::Gu::HeightFieldUtil::getEdgeFaceIndex(physx::Gu::HeightFieldUtil *this, int a2, unsigned int a3, unsigned int a4, unsigned int a5)
{
  uint64_t v5;
  int v6;
  int v7;
  unsigned int v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  unsigned __int8 *v12;
  unsigned __int8 *v13;
  uint64_t v14;
  unsigned __int8 *v15;
  unsigned __int8 *v16;
  unsigned int v18;
  unsigned int v19;
  uint64_t v20;

  v20 = *MEMORY[0x24BDAC8D0];
  LODWORD(v5) = -3 * a3;
  v6 = -3 * a3 + a2;
  if (v6 == 2)
  {
    LODWORD(v5) = *((_DWORD *)this + 14);
    if ((int)v5 - 1 <= a4)
      goto LABEL_27;
    if (a5)
    {
      LODWORD(v5) = 2 * a3 - 1;
      v18 = v5;
      v8 = 1;
    }
    else
    {
      v8 = 0;
    }
    if (*((_DWORD *)this + 15) - 1 <= a5)
      goto LABEL_26;
    v9 = 2 * a3;
  }
  else
  {
    if (v6 == 1)
    {
      LODWORD(v5) = *((_DWORD *)this + 14);
      if ((int)v5 - 1 > a4)
      {
        LODWORD(v5) = *((_DWORD *)this + 15);
        if ((int)v5 - 1 > a5)
        {
          v5 = 2 * a3;
          v19 = (2 * a3) | 1;
          goto LABEL_20;
        }
      }
      goto LABEL_27;
    }
    if (v6 || (v7 = *((_DWORD *)this + 15), v7 - 1 <= a5))
    {
LABEL_27:
      v16 = (unsigned __int8 *)(*((_QWORD *)this + 10) + 4 * (v5 >> 1) + 2);
      goto LABEL_28;
    }
    if (a4)
    {
      LODWORD(v5) = (*(char *)(*((_QWORD *)this + 10) + 4 * (a3 - v7) + 2) >> 7) + 2 * (a3 - v7) + 1;
      v18 = v5;
      v8 = 1;
    }
    else
    {
      v8 = 0;
    }
    if (*((_DWORD *)this + 14) - 1 <= a4)
    {
LABEL_26:
      if ((v5 & 1) != 0)
      {
        v16 = (unsigned __int8 *)(*((_QWORD *)this + 10) + 4 * (v5 >> 1) + 3);
LABEL_28:
        if ((~*v16 & 0x7F) != 0)
          return v5;
        else
          return 0xFFFFFFFFLL;
      }
      goto LABEL_27;
    }
    v9 = (*(unsigned __int8 *)(*((_QWORD *)this + 10) + 4 * a3 + 2) >> 7) | (2 * a3);
  }
  *(&v18 + v8) = v9;
  v5 = v18;
  if (!v8)
    goto LABEL_26;
LABEL_20:
  v10 = *((_QWORD *)this + 10);
  v11 = v10 + 4 * (v5 >> 1);
  v12 = (unsigned __int8 *)(v11 + 2);
  v13 = (unsigned __int8 *)(v11 + 3);
  if ((v5 & 1) == 0)
    v13 = v12;
  if ((~*v13 & 0x7F) == 0)
  {
    LODWORD(v5) = v19;
    v14 = v10 + ((2 * v19) & 0x1FFFFFFFCLL);
    v15 = (unsigned __int8 *)(v14 + 2);
    v16 = (unsigned __int8 *)(v14 + 3);
    if ((v19 & 1) == 0)
      v16 = v15;
    goto LABEL_28;
  }
  return v5;
}

BOOL physx::Gu::HeightFieldUtil::overlapAABBTriangles(uint64_t a1, float *a2, float *a3, char a4, uint64_t a5)
{
  float v8;
  float v9;
  float v10;
  float v11;
  float v12;
  float v13;
  float v14;
  float v15;
  float v16;
  float v17;
  float v18;
  float v19;
  float v20;
  float v21;
  float v22;
  float v23;
  float v24;
  float v25;
  float v26;
  float v27;
  float v28;
  float v29;
  float v30;
  float v31;
  float v32;
  float v33;
  float v34;
  float v35;
  float v36;
  float v37;
  float v38;
  float v39;
  float v40;
  float v41;
  float v42;
  float v43;
  float v44;
  float v45;
  float v46;
  float v47;
  float v48;
  float v49;
  float v50;
  float v51;
  float v52;
  float v53;
  float v54;
  float v55;
  float v56;
  float v57;
  float v58;
  float v59;
  float v60;
  float v61;
  float v62;
  float v63;
  float v64;
  float v65;
  uint64_t v66;
  uint64_t v67;
  float v68;
  float v69;
  float v70;
  float v71;
  float v72;
  float v73;
  int v74;
  unsigned int v75;
  float v76;
  _BOOL8 result;
  int v78;
  unsigned int v79;
  unsigned int v80;
  unsigned int v81;
  unsigned int v82;
  unsigned int v83;
  unsigned int v84;
  unsigned int v85;
  unsigned int v86;
  unsigned int v87;
  unsigned int v88;
  int v89;
  uint64_t v90;
  float v91;
  float v92;
  float v93;
  unsigned int v94;
  int v95;
  unsigned int v96;
  uint64_t v97;
  uint64_t v98;
  float v99;
  float v100;
  float v101;
  float v102;
  BOOL v103;
  BOOL v104;
  BOOL v106;
  BOOL v107;
  uint64_t v109;
  uint64_t v110;
  unsigned int v111;
  unsigned int v112;
  unsigned int v113;
  unsigned int v114;
  _DWORD v115[64];
  uint64_t v116;

  v116 = *MEMORY[0x24BDAC8D0];
  if ((a4 & 1) != 0)
  {
    v14 = a2[4] * -2.0;
    v15 = a2[5] * -2.0;
    v16 = a2[6] * -2.0;
    v18 = a2[2];
    v17 = a2[3];
    v19 = (float)(v17 * v17) + -0.5;
    v20 = a2[1];
    v21 = (float)((float)(v15 * v20) + (float)(*a2 * v14)) + (float)(v18 * v16);
    v22 = (float)((float)(v14 * v19) - (float)((float)((float)(v20 * v16) - (float)(v18 * v15)) * v17))
        + (float)(*a2 * v21);
    v23 = (float)((float)(v15 * v19) - (float)((float)((float)(v18 * v14) - (float)(*a2 * v16)) * v17))
        + (float)(v20 * v21);
    v24 = (float)((float)(v16 * v19) - (float)((float)((float)(*a2 * v15) - (float)(v20 * v14)) * v17))
        + (float)(v18 * v21);
    v25 = a3[1];
    v27 = a3[2];
    v26 = a3[3];
    v28 = a3[4];
    v29 = a3[5];
    v30 = (float)((float)(*a3 + v26) * 0.5) + (float)((float)(*a3 + v26) * 0.5);
    v31 = (float)((float)(v25 + v28) * 0.5) + (float)((float)(v25 + v28) * 0.5);
    v32 = (float)((float)(v27 + v29) * 0.5) + (float)((float)(v27 + v29) * 0.5);
    v33 = (float)((float)-(float)(v20 * v31) - (float)(*a2 * v30)) - (float)(v18 * v32);
    v34 = v22
        + (float)((float)((float)(v17 * (float)((float)(v18 * v31) - (float)(v20 * v32))) + (float)(v30 * v19))
                - (float)(*a2 * v33));
    v35 = v23
        + (float)((float)((float)(v17 * (float)((float)(*a2 * v32) - (float)(v18 * v30))) + (float)(v31 * v19))
                - (float)(v20 * v33));
    v36 = v24
        + (float)((float)((float)(v17 * (float)((float)(v20 * v30) - (float)(*a2 * v31))) + (float)(v32 * v19))
                - (float)(v18 * v33));
    v37 = (float)-*a2 - *a2;
    v38 = (float)-v20 - v20;
    v39 = (float)-v18 - v18;
    v40 = -(float)(v20 * v38);
    v41 = -(float)(v18 * v39);
    v42 = -(float)(v20 * v37);
    v43 = -(float)(v18 * v37);
    v44 = v17 * v37;
    v45 = -(float)(v18 * v38);
    v46 = v17 * v38;
    v47 = v17 * v39;
    v48 = v43 - v46;
    v49 = (float)(*a2 * v37) + 1.0;
    v50 = v49 - v41;
    v51 = v43 + v46;
    v52 = v49 - v40;
    v53 = (float)(v26 - *a3) * 0.5;
    v54 = (float)(v28 - v25) * 0.5;
    v55 = (float)(v29 - v27) * 0.5;
    v56 = (float)((float)(1.0 - v40) - v41) * v53;
    v57 = (float)(v42 + v47) * v53;
    v58 = (float)(fabsf(v56) + fabsf((float)(v42 - v47) * v54)) + fabsf(v51 * v55);
    v59 = (float)(fabsf(v57) + fabsf(v50 * v54)) + fabsf((float)(v45 - v44) * v55);
    v60 = (float)(fabsf(v48 * v53) + fabsf((float)(v44 + v45) * v54)) + fabsf(v52 * v55);
    v9 = v34 - v58;
    v8 = v35 - v59;
    v10 = v36 - v60;
    v11 = v58 + v34;
    v12 = v59 + v35;
    v13 = v60 + v36;
  }
  else
  {
    v9 = *a3;
    v8 = a3[1];
    v10 = a3[2];
    v11 = a3[3];
    v12 = a3[4];
    v13 = a3[5];
  }
  v61 = v9 * *(float *)a1;
  v62 = *(float *)(a1 + 8);
  v63 = v10 * v62;
  v64 = v11 * *(float *)a1;
  v65 = v13 * v62;
  v66 = *(_QWORD *)(a1 + 16);
  v67 = *(_QWORD *)(a1 + 24);
  v68 = *(float *)(v67 + 20);
  v69 = *(float *)(v67 + 24);
  if (v68 >= 0.0)
    v70 = v61;
  else
    v70 = v64;
  if (v68 >= 0.0)
    v71 = v64;
  else
    v71 = v61;
  if (v69 >= 0.0)
    v72 = v63;
  else
    v72 = v65;
  if (v69 >= 0.0)
    v73 = v65;
  else
    v73 = v63;
  v74 = *(_DWORD *)(v66 + 56);
  v75 = v74 - 1;
  v76 = (float)(v74 - 1);
  if (v70 > v76)
    return 0;
  result = 0;
  v78 = *(_DWORD *)(v66 + 60);
  if (v72 > (float)(v78 - 1) || v71 < 0.0 || v73 < 0.0)
    return result;
  v79 = v74 - 2;
  v80 = vcvtms_u32_f32(v70);
  if (v70 <= (float)v79)
    v79 = v80;
  if (v70 >= 0.0)
    v81 = v79;
  else
    v81 = 0;
  v82 = vcvtps_u32_f32(v71);
  if (v71 <= v76)
    v83 = v82;
  else
    v83 = v75;
  v84 = v78 - 2;
  v85 = vcvtms_u32_f32(v72);
  if (v72 <= (float)(v78 - 2))
    v84 = v85;
  if (v72 >= 0.0)
    v86 = v84;
  else
    v86 = 0;
  v87 = vcvtps_u32_f32(v73);
  if (v73 > (float)(v78 - 1))
    v87 = v78 - 1;
  v88 = v87 - v86;
  if (!(2 * (v83 - v81) * (v87 - v86)))
    return 0;
  if (v83 <= v81)
  {
    v89 = 0;
    return v89 != 0;
  }
  v89 = 0;
  v90 = 0;
  v91 = *(float *)(a1 + 4);
  v92 = v8 * v91;
  v93 = v12 * v91;
  v94 = v86 + v81 * v78;
  v113 = v86;
  v114 = v83;
  v111 = v87 - v86;
  v112 = v87;
  while (v87 <= v86)
  {
LABEL_73:
    v94 = v94 - v88 + *(_DWORD *)(v66 + 60);
    if (++v81 == v83)
    {
      v110 = v90;
      if ((_DWORD)v90)
        goto LABEL_78;
      return v89 != 0;
    }
  }
  v95 = 2 * v94;
  while (1)
  {
    v96 = v94;
    v97 = *(_QWORD *)(a1 + 16);
    v98 = *(_QWORD *)(v97 + 80);
    v99 = (float)*(__int16 *)(v98 + 4 * v94++);
    v100 = (float)*(__int16 *)(v98 + 4 * v94);
    LODWORD(v97) = v96 + *(_DWORD *)(v97 + 60);
    v101 = (float)*(__int16 *)(v98 + 4 * v97);
    v102 = (float)*(__int16 *)(v98 + 4 * (v97 + 1));
    v103 = v93 < v99 && v93 < v100;
    v104 = v103 && v93 < v101;
    if (!v104 || v93 >= v102)
    {
      v106 = v92 <= v99 || v92 <= v100;
      v107 = v106 || v92 <= v101;
      if (v107 || v92 <= v102)
        break;
    }
LABEL_71:
    v95 += 2;
    if (!--v88)
    {
      v66 = *(_QWORD *)(a1 + 16);
      v86 = v113;
      v83 = v114;
      v88 = v111;
      v87 = v112;
      goto LABEL_73;
    }
  }
  v109 = v96;
  if ((~*(unsigned __int8 *)(v98 + 4 * v96 + 2) & 0x7F) == 0)
  {
LABEL_67:
    if ((~*(unsigned __int8 *)(v98 + 4 * v109 + 3) & 0x7F) != 0)
    {
      if (v90 >= 0x40)
      {
        (*(void (**)(uint64_t))(*(_QWORD *)a5 + 16))(a5);
        LODWORD(v90) = 0;
      }
      v110 = (v90 + 1);
      v115[v90] = v95 + 1;
      ++v89;
      v90 = v110;
      if ((a4 & 2) != 0)
        goto LABEL_78;
    }
    goto LABEL_71;
  }
  if (v90 >= 0x40)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)a5 + 16))(a5);
    LODWORD(v90) = 0;
  }
  v115[v90] = v95;
  v90 = (v90 + 1);
  ++v89;
  if ((a4 & 2) == 0)
  {
    v98 = *(_QWORD *)(*(_QWORD *)(a1 + 16) + 80);
    goto LABEL_67;
  }
  v110 = v90;
LABEL_78:
  (*(void (**)(uint64_t, uint64_t, _DWORD *))(*(_QWORD *)a5 + 16))(a5, v110, v115);
  return v89 != 0;
}

BOOL physx::Gu::HeightFieldUtil::getTriangle(uint64_t a1, float *a2, uint64_t a3, uint64_t a4, uint64_t a5, unsigned int a6, int a7, int a8)
{
  float *v8;
  uint64_t v9;
  float v10;
  float v11;
  _BOOL4 v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unsigned __int8 *v18;
  int v19;
  int v20;
  unsigned int v21;
  unsigned int v22;
  int v23;
  BOOL v24;
  uint64_t v25;
  uint64_t v26;
  unsigned int v27;
  int v28;
  unsigned int v29;
  int v30;
  int v31;
  unsigned int v32;
  unsigned int v33;
  unsigned int v34;
  float v35;
  float v36;
  float v37;
  float v38;
  float v39;
  float v40;
  float v41;
  float v42;
  float v43;
  uint64_t v44;
  float *v45;
  uint64_t v46;
  float v47;
  float v48;
  float v49;
  float v50;
  float v51;
  float v52;
  float v53;
  float v54;
  uint64_t v55;
  float v56;
  float v57;
  float v58;
  float v59;
  uint64_t v60;
  float v61;
  float v62;
  float v63;
  unsigned int v64;
  float v65;
  float *v66;
  uint64_t v67;
  float v68;
  unsigned __int8 *v69;
  unsigned int v71;
  uint64_t v72;
  uint64_t v73;

  v73 = *MEMORY[0x24BDAC8D0];
  v9 = *(_QWORD *)(a1 + 16);
  v8 = *(float **)(a1 + 24);
  v11 = v8[5];
  v10 = v8[6];
  if (v11 < 0.0)
    v12 = v10 >= 0.0;
  else
    v12 = v10 < 0.0;
  if (v12)
    v13 = 2;
  else
    v13 = 1;
  if (v12)
    v14 = 1;
  else
    v14 = 2;
  v15 = a6 >> 1;
  v16 = *(_QWORD *)(v9 + 80);
  v17 = v16 + 4 * v15;
  v20 = *(char *)(v17 + 2);
  v18 = (unsigned __int8 *)(v17 + 2);
  v19 = v20;
  if (v20 < 0)
  {
    if ((a6 & 1) != 0)
    {
      v22 = v15 + 1;
      v71 = v15 + 1;
      *(&v71 + v13) = *(_DWORD *)(v9 + 60) + v15 + 1;
      v21 = a6 >> 1;
    }
    else
    {
      v71 = *(_DWORD *)(v9 + 60) + v15;
      v22 = v71;
      *(&v71 + v13) = v15;
      v21 = v22 + 1;
    }
  }
  else if ((a6 & 1) != 0)
  {
    v23 = *(_DWORD *)(v9 + 60);
    v21 = v15 + 1;
    v22 = v23 + v15 + 1;
    v71 = v22;
    *(&v71 + v13) = v23 + v15;
  }
  else
  {
    v71 = a6 >> 1;
    *(&v71 + v13) = v15 + 1;
    v21 = *(_DWORD *)(v9 + 60) + v15;
    v22 = a6 >> 1;
  }
  *(&v71 + v14) = v21;
  if (!a5)
    goto LABEL_44;
  v24 = !v12;
  v25 = 2;
  if (v24)
    v26 = 0;
  else
    v26 = 2;
  if (!v24)
    v25 = 0;
  *(_DWORD *)(a5 + 4 * v26) = -1;
  if (v19 < 0)
  {
    if ((a6 & 1) != 0)
    {
      *(_DWORD *)(a5 + 4) = a6 - 1;
      *(_DWORD *)(a5 + 4 * v25) = -1;
      v33 = *(_DWORD *)(v9 + 60);
      if (v15 % v33 < v33 - 2)
      {
        *(_DWORD *)(a5 + 4 * v26) = a6 + 1;
        v33 = *(_DWORD *)(v9 + 60);
      }
      if (v15 < v33 - 1)
        goto LABEL_44;
      v30 = v15 - v33;
      v31 = (*(unsigned __int8 *)(v16 + 4 * (v15 - v33) + 2) >> 7) ^ 1;
    }
    else
    {
      *(_DWORD *)(a5 + 4) = a6 + 1;
      *(_DWORD *)(a5 + 4 * v25) = -1;
      v29 = *(_DWORD *)(v9 + 60);
      if (v15 % v29)
      {
        *(_DWORD *)(a5 + 4 * v26) = a6 - 1;
        v29 = *(_DWORD *)(v9 + 60);
      }
      if (v15 / v29 == *(_DWORD *)(v9 + 56) - 2)
        goto LABEL_44;
      v30 = v29 + v15;
      v31 = *(unsigned __int8 *)(v16 + 4 * (v29 + v15) + 2) >> 7;
    }
    v28 = v31 | (2 * v30);
    goto LABEL_43;
  }
  if ((a6 & 1) != 0)
  {
    *(_DWORD *)(a5 + 4) = a6 - 1;
    *(_DWORD *)(a5 + 4 * v25) = -1;
    v32 = *(_DWORD *)(v9 + 60);
    if (v15 / v32 != *(_DWORD *)(v9 + 56) - 2)
    {
      *(_DWORD *)(a5 + 4 * v26) = (*(unsigned __int8 *)(v16 + 4 * (v32 + v15) + 2) >> 7) | (2 * (v32 + v15));
      v32 = *(_DWORD *)(v9 + 60);
    }
    if (v15 % v32 < v32 - 2)
    {
      v28 = a6 + 1;
      goto LABEL_43;
    }
  }
  else
  {
    *(_DWORD *)(a5 + 4) = a6 + 1;
    *(_DWORD *)(a5 + 4 * v25) = -1;
    v27 = *(_DWORD *)(v9 + 60);
    if (v15 >= v27 - 1)
    {
      *(_DWORD *)(a5 + 4 * v26) = (*(unsigned __int8 *)(v16 + 4 * (v15 - v27) + 2) >> 7) ^ 1 | (2 * (v15 - v27));
      v27 = *(_DWORD *)(v9 + 60);
    }
    if (v15 % v27)
    {
      v28 = a6 - 1;
LABEL_43:
      *(_DWORD *)(a5 + 4 * v25) = v28;
    }
  }
LABEL_44:
  if (a4)
  {
    *(_DWORD *)a4 = v22;
    *(_QWORD *)(a4 + 4) = v72;
  }
  if (a8)
  {
    v34 = *(_DWORD *)(v9 + 60);
    v35 = v8[4];
    v37 = a2[2];
    v36 = a2[3];
    v38 = (float)(v36 * v36) + -0.5;
    v39 = *a2;
    v40 = a2[1];
    v41 = -v37;
    v42 = -*a2;
    v43 = -v40;
    v44 = 0;
    v45 = (float *)(a3 + 8);
    if ((a7 & 1) != 0)
    {
      do
      {
        v46 = *(unsigned int *)((char *)&v71 + v44);
        v47 = (float)(v11 * (float)(v46 / v34)) + (float)(v11 * (float)(v46 / v34));
        v48 = (float)(v35 * (float)*(__int16 *)(v16 + 4 * v46)) + (float)(v35 * (float)*(__int16 *)(v16 + 4 * v46));
        v49 = (float)(v10 * (float)(v46 % v34)) + (float)(v10 * (float)(v46 % v34));
        v50 = (float)((float)(v40 * v48) + (float)(v39 * v47)) + (float)(v37 * v49);
        v51 = (float)(v36 * (float)((float)(v49 * v42) + (float)(v37 * v47))) + (float)(v48 * v38);
        v52 = (float)((float)(v36 * (float)((float)(v48 * v41) + (float)(v40 * v49))) + (float)(v47 * v38))
            + (float)(v39 * v50);
        v53 = a2[6]
            + (float)((float)((float)(v36 * (float)((float)(v47 * v43) + (float)(v39 * v48))) + (float)(v49 * v38))
                    + (float)(v37 * v50));
        v54 = a2[5] + (float)(v51 + (float)(v40 * v50));
        *(v45 - 2) = a2[4] + v52;
        *(v45 - 1) = v54;
        *v45 = v53;
        v45 += 3;
        v44 += 4;
      }
      while (v44 != 12);
    }
    else
    {
      do
      {
        v55 = *(unsigned int *)((char *)&v71 + v44);
        v56 = (float)(v11 * (float)(v55 / v34)) + (float)(v11 * (float)(v55 / v34));
        v57 = (float)(v35 * (float)*(__int16 *)(v16 + 4 * v55)) + (float)(v35 * (float)*(__int16 *)(v16 + 4 * v55));
        v58 = (float)(v10 * (float)(v55 % v34)) + (float)(v10 * (float)(v55 % v34));
        v59 = (float)((float)(v40 * v57) + (float)(v39 * v56)) + (float)(v37 * v58);
        *(v45 - 2) = (float)((float)(v36 * (float)((float)(v57 * v41) + (float)(v40 * v58))) + (float)(v56 * v38))
                   + (float)(v39 * v59);
        *(v45 - 1) = (float)((float)(v36 * (float)((float)(v58 * v42) + (float)(v37 * v56))) + (float)(v57 * v38))
                   + (float)(v40 * v59);
        *v45 = (float)((float)(v36 * (float)((float)(v56 * v43) + (float)(v39 * v57))) + (float)(v58 * v38))
             + (float)(v37 * v59);
        v45 += 3;
        v44 += 4;
      }
      while (v44 != 12);
    }
  }
  else
  {
    v60 = 0;
    v61 = a2[4];
    v62 = a2[5];
    v63 = a2[6];
    if (!a7)
    {
      v61 = 0.0;
      v62 = 0.0;
      v63 = 0.0;
    }
    v64 = *(_DWORD *)(v9 + 60);
    v65 = v8[4];
    v66 = (float *)(a3 + 8);
    do
    {
      v67 = *(unsigned int *)((char *)&v71 + v60);
      v68 = v62 + (float)(v65 * (float)*(__int16 *)(v16 + 4 * v67));
      *(v66 - 2) = v61 + (float)(v11 * (float)(v67 / v64));
      *(v66 - 1) = v68;
      *v66 = v63 + (float)(v10 * (float)(v67 % v64));
      v66 += 3;
      v60 += 4;
    }
    while (v60 != 12);
  }
  v69 = (unsigned __int8 *)(v16 + 4 * v15 + 3);
  if ((a6 & 1) == 0)
    v69 = v18;
  return (~*v69 & 0x7F) != 0;
}

BOOL GeomOverlapCallback_SphereHeightfield(uint64_t a1, float *a2, uint64_t a3, float *a4)
{
  float v4;
  float v5;
  float v6;
  float v7;
  float v8;
  float v9;
  float v10;
  float v11;
  float v12;
  float v13;
  float v14;
  float v15;
  float v16;
  float v17;
  float v18;
  uint64_t v19;
  float v20;
  float v21;
  float v22;
  float v23;
  float v24;
  float v25;
  unsigned int v26;
  float v27;
  uint64_t v28;
  __int16 *v29;
  float v30;
  float v31;
  float v32;
  float v33;
  float v34;
  float v35;
  float v36;
  float v37;
  float v38;
  float v39;
  _BOOL8 result;
  float v41;
  float v42;
  int v43;
  int v44;
  unsigned int v45;
  unsigned int v46;
  unsigned int v47;
  float v48;
  unsigned int v49;
  unsigned int v50;
  unsigned int v51;
  unsigned int v52;
  unsigned int v53;
  unsigned int v54;
  float v55;
  unsigned int v56;
  unsigned int v57;
  unsigned int ClosestPointsOnCell;
  uint64_t v59;
  float v60;
  float v61;
  float v62[4];
  uint64_t v63;
  uint64_t v64;
  float v65[3];
  float v66[33];
  uint64_t v67;

  v67 = *MEMORY[0x24BDAC8D0];
  v4 = a2[4] - a4[4];
  v5 = a2[5] - a4[5];
  v6 = a2[6] - a4[6];
  v7 = v4 + v4;
  v8 = v5 + v5;
  v9 = v6 + v6;
  v11 = a4[2];
  v10 = a4[3];
  v12 = (float)(v10 * v10) + -0.5;
  v13 = a4[1];
  v14 = (float)((float)(v8 * v13) + (float)(*a4 * v7)) + (float)(v11 * v9);
  v15 = (float)((float)(v7 * v12) - (float)((float)((float)(v13 * v9) - (float)(v11 * v8)) * v10)) + (float)(*a4 * v14);
  v16 = (float)((float)(v8 * v12) - (float)((float)((float)(v11 * v7) - (float)(*a4 * v9)) * v10)) + (float)(v13 * v14);
  v17 = (float)((float)(v9 * v12) - (float)((float)((float)(*a4 * v8) - (float)(v13 * v7)) * v10)) + (float)(v11 * v14);
  v18 = *(float *)(a1 + 4);
  v19 = *(_QWORD *)(a3 + 8);
  v63 = v19;
  v64 = a3;
  v20 = *(float *)(a3 + 24);
  v21 = *(float *)(a3 + 16);
  v22 = 1.0 / *(float *)(a3 + 20);
  v62[0] = v22;
  v62[1] = 1.0 / v21;
  v23 = 1.0 / v20;
  v62[2] = 1.0 / v20;
  v24 = v15 * v22;
  v25 = v17 * (float)(1.0 / v20);
  if ((float)(v15 * v22) < 0.0
    || v25 < 0.0
    || v24 >= (float)(*(float *)(v19 + 64) + 1.0)
    || v25 >= (float)(*(float *)(v19 + 68) + 1.0))
  {
    goto LABEL_14;
  }
  v61 = v21;
  v66[0] = 0.0;
  v65[0] = 0.0;
  v26 = physx::Gu::HeightField::computeCellCoordinates((physx::Gu::HeightField *)v19, v15 * v22, v25, v66, v65);
  v27 = v66[0];
  v28 = *(_QWORD *)(v19 + 80);
  v29 = (__int16 *)(v28 + 4 * v26);
  if (((char)v29[1] & 0x80000000) == 0)
  {
    v30 = (float)*(__int16 *)(v28 + 4 * (*(_DWORD *)(v19 + 60) + v26));
    v31 = (float)*(__int16 *)(v28 + 4 * (v26 + 1));
    if ((float)(v66[0] + v65[0]) >= 1.0)
    {
      v38 = (float)*(__int16 *)(v28 + 4 * (*(_DWORD *)(v19 + 60) + v26 + 1));
      v33 = v38 + (float)((float)(1.0 - v65[0]) * (float)(v30 - v38));
      v27 = 1.0 - v66[0];
      v34 = v31 - v38;
    }
    else
    {
      v32 = (float)*v29;
      v33 = v32 + (float)(v65[0] * (float)(v31 - v32));
      v34 = v30 - v32;
    }
    goto LABEL_11;
  }
  v35 = (float)*v29;
  v36 = (float)*(__int16 *)(v28 + 4 * (*(_DWORD *)(v19 + 60) + v26 + 1));
  if (v65[0] > v66[0])
  {
    v37 = (float)*(__int16 *)(v28 + 4 * (v26 + 1));
    v33 = v35 + (float)(v65[0] * (float)(v37 - v35));
    v34 = v36 - v37;
LABEL_11:
    v39 = v33 + (float)(v27 * v34);
    goto LABEL_12;
  }
  v60 = (float)*(__int16 *)(v28 + 4 * (*(_DWORD *)(v19 + 60) + v26));
  v39 = (float)(v35 + (float)(v66[0] * (float)(v60 - v35))) + (float)(v65[0] * (float)(v36 - v60));
LABEL_12:
  if ((float)(v16 - (float)(v61 * v39)) == 0.0)
    return physx::Gu::HeightFieldUtil::getFaceIndexAtShapePoint((physx::Gu::HeightFieldUtil *)v62, v15, v17) != -1;
LABEL_14:
  v41 = v18 * fabsf(v22);
  v42 = v18 * fabsf(v23);
  v44 = *(_DWORD *)(v19 + 56);
  v43 = *(_DWORD *)(v19 + 60);
  v45 = v44 - 2;
  v46 = vcvtms_u32_f32(v24 - v41);
  if ((float)(v24 - v41) <= (float)(v44 - 2))
    v45 = v46;
  if ((float)(v24 - v41) >= 0.0)
    v47 = v45;
  else
    v47 = 0;
  v48 = v24 + v41;
  v49 = v44 - 1;
  v50 = vcvtps_u32_f32(v48);
  if (v48 <= (float)v49)
    v49 = v50;
  if (v48 >= 0.0)
    v51 = v49;
  else
    v51 = 0;
  v52 = v43 - 2;
  v53 = vcvtms_u32_f32(v25 - v42);
  if ((float)(v25 - v42) <= (float)(v43 - 2))
    v52 = v53;
  if ((float)(v25 - v42) >= 0.0)
    v54 = v52;
  else
    v54 = 0;
  v55 = v25 + v42;
  if ((float)(v25 + v42) >= 0.0)
  {
    v56 = v43 - 1;
    if (v55 <= (float)(v43 - 1))
      v56 = vcvtps_u32_f32(v55);
  }
  else
  {
    v56 = 0;
  }
  if (v47 >= v51)
    return 0;
  while (v54 >= v56)
  {
LABEL_41:
    result = 0;
    if (++v47 == v51)
      return result;
  }
  v57 = v54;
  while (1)
  {
    v65[0] = v15;
    v65[1] = v16;
    v65[2] = v17;
    ClosestPointsOnCell = physx::Gu::HeightFieldUtil::findClosestPointsOnCell((uint64_t)v62, v47, v57, v65, (uint64_t)v66);
    if (ClosestPointsOnCell)
      break;
LABEL_40:
    if (++v57 == v56)
      goto LABEL_41;
  }
  v59 = 0;
  while ((float)((float)((float)((float)(v16 - v66[v59 + 1]) * (float)(v16 - v66[v59 + 1]))
                        + (float)((float)(v15 - v66[v59]) * (float)(v15 - v66[v59])))
                + (float)((float)(v17 - v66[v59 + 2]) * (float)(v17 - v66[v59 + 2]))) > (float)(v18 * v18))
  {
    v59 += 3;
    if (3 * ClosestPointsOnCell == v59)
      goto LABEL_40;
  }
  return 1;
}

uint64_t GeomOverlapCallback_CapsuleHeightfield(uint64_t a1, float *a2, uint64_t a3, float *a4, double a5, double a6, double a7, __n128 a8)
{
  uint64_t v8;
  unsigned int v9;
  unsigned int v10;
  float v11;
  float v12;
  float v13;
  float v14;
  float v15;
  float v16;
  float v17;
  float v18;
  float v19;
  float v20;
  float v21;
  float v22;
  float v23;
  float v24;
  float v25;
  float v26;
  float v27;
  float v28;
  float v29;
  float v30;
  uint64_t v31;
  float v32;
  float v33;
  float v34;
  float v35;
  float v36;
  float v37;
  float v38;
  float v39;
  float v40;
  float v41;
  float v42;
  float v43;
  float v44;
  float v45;
  float v46;
  unsigned int v47;
  char v48;
  float v49;
  unsigned int v50;
  char v51;
  float *v52;
  float v53;
  float v54;
  float v55;
  float v56;
  int v57;
  int v58;
  unsigned int v59;
  unsigned int v60;
  unsigned int v61;
  unsigned int v62;
  unsigned int v63;
  unsigned int v64;
  unsigned int v65;
  unsigned int v66;
  unsigned int v67;
  float v68;
  unsigned int v69;
  float v70;
  unsigned int v71;
  float v72;
  uint64_t v73;
  __int16 *v74;
  float v75;
  float v76;
  float v77;
  float v78;
  float v79;
  float v80;
  float v81;
  float v82;
  unsigned int v83;
  unsigned int ClosestPointsOnCell;
  uint64_t v85;
  float v86;
  float v87;
  float32x4_t v88;
  float32x4_t v89;
  unsigned int v91;
  float v92;
  unsigned int v93;
  unsigned int v94;
  uint64_t v95;
  float v96;
  uint64_t v97;
  uint64_t v98;
  __n128 v99;
  __n128 v100;
  __n128 v101;
  __n128 v102;
  __n128 v103;
  __n128 v104;
  uint64_t v105;
  float v106;
  float v107;
  uint64_t v108;
  float v109;
  float v110;
  uint64_t v111;
  float v112;
  float32x4_t v113;
  float32x4_t v114;
  unsigned int v115;
  int v116;
  float v117;
  float v118;
  __n128 v119;
  float v120;
  __n128 v121;
  float v122;
  __n128 v123;
  float v124;
  __n128 v125;
  float v126;
  __n128 v127;
  __n128 v128;
  unsigned int v130;
  unsigned int v131;
  float v132[4];
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  float32x2_t v136;
  float32x4_t v137;
  float32x4_t v138;
  float32x4_t v139;
  float v140[3];
  float32x4_t v141[8];
  _DWORD v142[6];
  uint64_t v143;

  v8 = 0;
  v9 = 0;
  v10 = 0;
  v143 = *MEMORY[0x24BDAC8D0];
  v11 = a4[1];
  v12 = a4[2];
  v13 = a4[3];
  v14 = a2[4] - a4[4];
  v15 = a2[5] - a4[5];
  v16 = a2[6] - a4[6];
  v17 = v14 + v14;
  v18 = v15 + v15;
  v19 = v16 + v16;
  v20 = (float)(v13 * v13) + -0.5;
  v21 = (float)((float)-(float)(v11 * (float)(v15 + v15)) - (float)(*a4 * (float)(v14 + v14))) - (float)(v12 * v19);
  v22 = (float)((float)(v13 * (float)((float)(v12 * (float)(v15 + v15)) - (float)(v11 * v19)))
              + (float)((float)(v14 + v14) * v20))
      - (float)(*a4 * v21);
  v23 = (float)((float)(v13 * (float)((float)(*a4 * v19) - (float)(v12 * v17))) + (float)((float)(v15 + v15) * v20))
      - (float)(v11 * v21);
  v24 = (float)((float)(v13 * (float)((float)(v11 * v17) - (float)(*a4 * v18))) + (float)(v19 * v20))
      - (float)(v12 * v21);
  v26 = a2[2];
  v25 = a2[3];
  v27 = a2[1];
  v28 = (float)((float)((float)(v13 * *a2) - (float)(*a4 * v25)) - (float)(v11 * v26)) + (float)(v27 * v12);
  v29 = (float)((float)((float)(v13 * v27) - (float)(v11 * v25)) - (float)(v12 * *a2)) + (float)(v26 * *a4);
  v30 = (float)((float)((float)(v13 * v26) - (float)(v12 * v25)) - (float)(*a4 * v27)) + (float)(*a2 * v11);
  a8.n128_f32[0] = (float)((float)((float)(*a4 * *a2) + (float)(v13 * v25)) + (float)(v11 * v27)) + (float)(v12 * v26);
  v31 = *(_QWORD *)(a3 + 8);
  v133 = v31;
  v134 = a3;
  v32 = *(float *)(a3 + 24);
  v33 = 1.0;
  v34 = 1.0 / *(float *)(a3 + 16);
  v35 = 1.0 / *(float *)(a3 + 20);
  v132[0] = v35;
  v132[1] = v34;
  v36 = 1.0 / v32;
  v132[2] = 1.0 / v32;
  v37 = (float)((float)(v28 + v28) * v29) + (float)(v30 * (float)(a8.n128_f32[0] + a8.n128_f32[0]));
  v38 = (float)(v30 * (float)(v28 + v28)) - (float)(v29 * (float)(a8.n128_f32[0] + a8.n128_f32[0]));
  v40 = *(float *)(a1 + 4);
  v39 = *(float *)(a1 + 8);
  a8.n128_f32[0] = (float)((float)((float)(a8.n128_f32[0] * (float)(a8.n128_f32[0] + a8.n128_f32[0])) + -1.0)
                         + (float)(v28 * (float)(v28 + v28)))
                 * v39;
  v41 = v37 * v39;
  v42 = v38 * v39;
  v43 = v22 + a8.n128_f32[0];
  v44 = v22 - a8.n128_f32[0];
  v124 = a8.n128_f32[0] * -2.0;
  v126 = v41 * -2.0;
  a8.n128_f32[0] = v42 * -2.0;
  v128 = a8;
  v118 = v43;
  v120 = v23 + v41;
  *(float *)v142 = v43;
  *(float *)&v142[1] = v23 + v41;
  v122 = v24 + v42;
  *(float *)&v142[2] = v24 + v42;
  *(float *)&v142[3] = v44;
  *(float *)&v142[4] = v23 - v41;
  *(float *)&v142[5] = v24 - v42;
  v45 = fabsf(v35) * v40;
  v46 = fabsf(v36) * v40;
  v47 = -1;
  v48 = 1;
  v49 = v40 * v40;
  v50 = -1;
  do
  {
    v51 = v48;
    v52 = (float *)&v142[3 * v8];
    v53 = *v52;
    v54 = v35 * *v52;
    v55 = v52[2];
    v56 = v36 * v55;
    v57 = *(_DWORD *)(v31 + 56);
    v58 = *(_DWORD *)(v31 + 60);
    v59 = v57 - 2;
    v60 = vcvtms_u32_f32(v54 - v45);
    if ((float)(v54 - v45) <= (float)(v57 - 2))
      v59 = v60;
    if ((float)(v54 - v45) >= 0.0)
      v61 = v59;
    else
      v61 = 0;
    v62 = v57 - 1;
    v63 = vcvtps_u32_f32(v45 + v54);
    if ((float)(v45 + v54) <= (float)v62)
      v62 = v63;
    if ((float)(v45 + v54) >= 0.0)
      v64 = v62;
    else
      v64 = 0;
    v65 = v58 - 2;
    v66 = vcvtms_u32_f32(v56 - v46);
    if ((float)(v56 - v46) <= (float)(v58 - 2))
      v65 = v66;
    if ((float)(v56 - v46) >= 0.0)
      v67 = v65;
    else
      v67 = 0;
    v68 = v46 + v56;
    if ((float)(v46 + v56) >= 0.0)
    {
      v69 = v58 - 1;
      if (v68 <= (float)(v58 - 1))
        v69 = vcvtps_u32_f32(v68);
    }
    else
    {
      v69 = 0;
    }
    v70 = v52[1];
    if (v61 < v47)
      v47 = v61;
    if (v67 < v50)
      v50 = v67;
    if (v64 > v9)
      v9 = v64;
    if (v69 > v10)
      v10 = v69;
    v130 = v10;
    v131 = v9;
    if (v54 < 0.0
      || v56 < 0.0
      || v54 >= (float)(*(float *)(v31 + 64) + v33)
      || v56 >= (float)(*(float *)(v31 + 68) + v33))
    {
      goto LABEL_44;
    }
    v117 = *(float *)(a3 + 16);
    v141[0].i32[0] = 0;
    v139.i32[0] = 0;
    v71 = physx::Gu::HeightField::computeCellCoordinates((physx::Gu::HeightField *)v31, v54, v56, v141[0].f32, v139.f32);
    v72 = v141[0].f32[0];
    v73 = *(_QWORD *)(v31 + 80);
    v74 = (__int16 *)(v73 + 4 * v71);
    if (((char)v74[1] & 0x80000000) == 0)
    {
      v75 = (float)*(__int16 *)(v73 + 4 * (v71 + v58));
      v76 = (float)*(__int16 *)(v73 + 4 * (v71 + 1));
      if ((float)(v141[0].f32[0] + v139.f32[0]) < 1.0)
      {
        v77 = (float)*v74;
        v78 = v77 + (float)(v139.f32[0] * (float)(v76 - v77));
        v79 = v75 - v77;
LABEL_40:
        v82 = v78 + (float)(v72 * v79);
        goto LABEL_41;
      }
      v81 = (float)*(__int16 *)(v73 + 4 * (v71 + v58 + 1));
      v78 = v81 + (float)((float)(1.0 - v139.f32[0]) * (float)(v75 - v81));
      v72 = 1.0 - v141[0].f32[0];
LABEL_39:
      v79 = v76 - v81;
      goto LABEL_40;
    }
    v80 = (float)*v74;
    v76 = (float)*(__int16 *)(v73 + 4 * (v71 + v58 + 1));
    if (v139.f32[0] > v141[0].f32[0])
    {
      v81 = (float)*(__int16 *)(v73 + 4 * (v71 + 1));
      v78 = v80 + (float)(v139.f32[0] * (float)(v81 - v80));
      goto LABEL_39;
    }
    v87 = (float)*(__int16 *)(v73 + 4 * (v71 + v58));
    v82 = (float)(v80 + (float)(v141[0].f32[0] * (float)(v87 - v80))) + (float)(v139.f32[0] * (float)(v76 - v87));
LABEL_41:
    if ((float)(v70 - (float)(v117 * v82)) == 0.0)
    {
      if (physx::Gu::HeightFieldUtil::getFaceIndexAtShapePoint((physx::Gu::HeightFieldUtil *)v132, v53, v55) != -1)return 1;
      goto LABEL_54;
    }
LABEL_44:
    if (v61 < v64)
    {
      while (v67 >= v69)
      {
LABEL_53:
        if (++v61 == v64)
          goto LABEL_54;
      }
      v83 = v67;
      while (1)
      {
        v140[0] = v53;
        v140[1] = v70;
        v140[2] = v55;
        ClosestPointsOnCell = physx::Gu::HeightFieldUtil::findClosestPointsOnCell((uint64_t)v132, v61, v83, v140, (uint64_t)v141);
        if (ClosestPointsOnCell)
          break;
LABEL_52:
        if (++v83 == v69)
          goto LABEL_53;
      }
      v85 = 0;
      while (1)
      {
        v86 = v70 - v141[0].f32[v85 + 1];
        if (v86 > 0.0
          && (float)((float)((float)(v86 * v86)
                           + (float)((float)(v53 - v141[0].f32[v85]) * (float)(v53 - v141[0].f32[v85])))
                   + (float)((float)(v55 - v141[0].f32[v85 + 2]) * (float)(v55 - v141[0].f32[v85 + 2]))) <= v49)
        {
          return 1;
        }
        v85 += 3;
        if (3 * ClosestPointsOnCell == v85)
          goto LABEL_52;
      }
    }
LABEL_54:
    v48 = 0;
    v8 = 1;
    v10 = v130;
    v9 = v131;
    v33 = 1.0;
  }
  while ((v51 & 1) != 0);
  v88.i64[0] = __PAIR64__(LODWORD(v120), LODWORD(v118));
  v88.i64[1] = LODWORD(v122);
  v141[0] = v88;
  v89.i64[0] = __PAIR64__(LODWORD(v126), LODWORD(v124));
  v89.i64[1] = v128.n128_u32[0];
  v139 = v89;
  if (v47 > v131)
    return 0;
  v121 = v128;
  v123 = v128;
  v127 = v128;
  v125 = v128;
  v119 = v128;
  while (v50 > v10)
  {
LABEL_61:
    if (++v47 > v9)
      return 0;
  }
  if (v47 == v9)
    v91 = 1;
  else
    v91 = 3;
  v116 = *(_DWORD *)(v31 + 60);
  v92 = (float)v47;
  v93 = v50;
  while (1)
  {
    v94 = 2 * (v93 == v10);
    if (v94 < v91)
      break;
    v115 = v93 + 1;
LABEL_82:
    v93 = v115;
    if (v115 > v10)
      goto LABEL_61;
  }
  v95 = v116 * v47 + v93;
  v96 = (float)v93;
  v97 = (v95 + 1);
  v98 = (v116 + v95);
  while (1)
  {
    if (physx::Gu::HeightFieldUtil::getEdgeFaceIndex((physx::Gu::HeightFieldUtil *)v31, 3 * v95 + v94, v95, v47, v93) != -1)
    {
      if (v94 == 2)
      {
        v108 = *(_QWORD *)(v31 + 80);
        v109 = *(float *)(a3 + 16);
        v100.n128_u32[0] = *(_DWORD *)(a3 + 20);
        v103.n128_f32[0] = v109 * (float)*(__int16 *)(v108 + 4 * v95);
        v110 = v109 * (float)*(__int16 *)(v108 + 4 * v98);
        v101.n128_f32[0] = v100.n128_f32[0] * v92;
        v99.n128_f32[0] = *(float *)(a3 + 24) * v96;
        v104.n128_f32[0] = v110 - v103.n128_f32[0];
        v102.n128_u32[0] = 0;
      }
      else if (v94 == 1)
      {
        v111 = *(_QWORD *)(v31 + 80);
        v100.n128_u32[0] = *(_DWORD *)(a3 + 20);
        v102.n128_u32[0] = *(_DWORD *)(a3 + 24);
        v101.n128_f32[0] = v100.n128_f32[0] * v92;
        v112 = *(float *)(a3 + 16);
        if (*(char *)(v111 + 4 * v95 + 2) < 0)
        {
          v103.n128_f32[0] = v112 * (float)*(__int16 *)(v111 + 4 * v95);
          v99.n128_f32[0] = v102.n128_f32[0] * v96;
          v104.n128_f32[0] = (float)(v112 * (float)*(__int16 *)(v111 + 4 * (v97 + v116)))
                           - v103.n128_f32[0];
        }
        else
        {
          v103.n128_f32[0] = v112 * (float)*(__int16 *)(v111 + 4 * v97);
          v99.n128_f32[0] = v102.n128_f32[0] * (float)(v93 + 1);
          v104.n128_f32[0] = (float)(v112 * (float)*(__int16 *)(v111 + 4 * v98)) - v103.n128_f32[0];
          v102.n128_f32[0] = -v102.n128_f32[0];
        }
      }
      else
      {
        v101 = v127;
        v100 = v128;
        v103 = v123;
        v102 = v125;
        v104 = v119;
        v99 = v121;
        if (!v94)
        {
          v105 = *(_QWORD *)(v31 + 80);
          v106 = *(float *)(a3 + 16);
          v103.n128_f32[0] = v106 * (float)*(__int16 *)(v105 + 4 * v95);
          v107 = v106 * (float)*(__int16 *)(v105 + 4 * v97);
          v101.n128_f32[0] = *(float *)(a3 + 20) * v92;
          v102.n128_u32[0] = *(_DWORD *)(a3 + 24);
          v99.n128_f32[0] = v102.n128_f32[0] * v96;
          v104.n128_f32[0] = v107 - v103.n128_f32[0];
          v100.n128_u32[0] = 0;
        }
      }
      v127 = v101;
      v128 = v100;
      v113.i64[0] = __PAIR64__(v103.n128_u32[0], v101.n128_u32[0]);
      v121 = v99;
      v123 = v103;
      v113.i64[1] = v99.n128_u32[0];
      v114.i64[0] = __PAIR64__(v104.n128_u32[0], v100.n128_u32[0]);
      v119 = v104;
      v125 = v102;
      v114.i64[1] = v102.n128_u32[0];
      v137 = v114;
      v138 = v113;
      if (physx::Gu::distanceSegmentSegmentSquared(v141, &v139, &v138, &v137, &v136, &v135).f32[0] < v49)
        return 1;
    }
    if (v91 == ++v94)
    {
      v10 = v130;
      v9 = v131;
      v115 = v93 + 1;
      goto LABEL_82;
    }
  }
}

uint64_t GeomOverlapCallback_BoxHeightfield(uint64_t a1, uint64_t a2, float32x2_t *a3, uint64_t a4, double a5, double a6, double a7, double a8, double a9, double a10, double a11)
{
  int32x2_t v11;
  int32x2_t v12;
  int32x2_t v13;
  int32x2_t v14;
  int32x2_t v15;
  int32x2_t v16;
  uint64_t v17;
  float v18;
  float v19;
  float v20;
  float v21;
  float v22;
  float v23;
  float v24;
  float v25;
  float v26;
  float v27;
  float v28;
  float v29;
  float v30;
  float v31;
  float v32;
  float v33;
  float32x2_t v34;
  float32x2_t v35;
  float32x2_t v36;
  float v37;
  float32x2_t v38;
  float32x2_t v39;
  float32x2_t v40;
  float32x2_t v41;
  float32x2_t v42;
  float32x2_t v43;
  float32x2_t v44;
  float32x2_t v45;
  float32x2_t v46;
  float32x2_t v47;
  float v48;
  float32x2_t v49;
  float v50;
  float32x2_t v51;
  float v52;
  const float *v58;
  float *v59;
  uint64_t v60;
  float v61;
  float v62;
  float32x2_t v63;
  float32x2_t v64;
  float32x2_t v65;
  float v66;
  float v67;
  float32x2_t v68;
  float v69;
  float v70;
  float v71;
  float32x4_t v72;
  float32x4_t v73;
  float32x4_t v74;
  const float *v75;
  float *v76;
  uint64_t v77;
  float v78;
  float v79;
  float v80;
  float v81;
  physx::Gu::HeightField *v82;
  float v83;
  unsigned int v84;
  float v85;
  uint64_t v86;
  __int16 *v87;
  float v88;
  float v89;
  float v90;
  float v91;
  float v92;
  float v93;
  float v94;
  float v95;
  float v96;
  uint64_t v97;
  uint64_t v98;
  float32x2_t *v99;
  float32x2_t *v100;
  float v101;
  float32x2_t v102;
  float v103;
  float v104;
  float v105;
  float v106;
  float v107;
  float v108;
  float v109;
  float v110;
  float v111;
  float v112;
  float v113;
  float32x2_t v114;
  float v115;
  float v116;
  float v117;
  float v118;
  float v119;
  float v120;
  float v121;
  float v122;
  float v123;
  float v124;
  float32x4_t v125;
  uint64_t v126;
  float32x4_t v127;
  float32x4_t v128;
  float v129;
  float32x4_t v130;
  float32x4_t v131;
  float32x4_t v132;
  float32x4_t v133;
  float32x2_t v134;
  float32x2_t v135;
  int8x8_t v136;
  float32x4_t v137;
  float32x4_t v138;
  float32x4_t v139;
  float32x4_t v140;
  float v141;
  float v142;
  float v143;
  float v144;
  float *v145;
  float v146;
  float v147;
  float v148;
  int v149;
  int v150;
  unsigned int v151;
  unsigned int v152;
  unsigned int v153;
  float v154;
  unsigned int v155;
  unsigned int v156;
  unsigned int v157;
  float v158;
  unsigned int v159;
  unsigned int v160;
  unsigned int v161;
  float v162;
  unsigned int v163;
  float32x4_t v165;
  int32x4_t v166;
  float32x2_t *v167;
  int32x4_t v168;
  float32x2_t v169;
  physx::Gu::HeightField *v170;
  unsigned int v171;
  uint64_t v172;
  BOOL *v173;
  float32x2_t v174;
  float32x4_t v175;
  float32x4_t v176;
  float32x2_t v177;
  int8x8_t v178;
  float32x4_t v179;
  float32x4_t v180;
  float32x4_t v181;
  float32x4_t v182;
  float32x4_t v183;
  float v184;
  float v185;
  float v186;
  float v187;
  float32x2_t v188;
  float32x2_t v189;
  float32x2_t v190;
  float v191;
  float v192;
  float32x4_t v193;
  unsigned int v194;
  float32x4_t v195;
  unsigned int v196;
  float32x4_t v197;
  float v198;
  float32x4_t v199;
  float32x2_t v200;
  float32x2_t v201;
  float32x4_t v202;
  int32x2_t v203;
  float v204;
  physx::Gu::HeightField *v205;
  float32x2_t *v206;
  char v207;
  float32x2_t v208;
  float v209;
  int32x2_t *v210;
  float v211[6];
  float32x2_t v212;
  float v213;
  _BYTE v214[192];
  uint64_t v215;
  float32x4x3_t v216;
  float32x4x3_t v217;
  float32x4x3_t v218;
  float32x4x3_t v219;

  v17 = 0;
  v215 = *MEMORY[0x24BDAC8D0];
  v12.i32[0] = *(_DWORD *)(a4 + 4);
  v18 = -*(float *)a4;
  v19 = -*(float *)v12.i32;
  v20 = *(float *)(a4 + 8);
  v21 = *(float *)(a4 + 12);
  v22 = -v20;
  v23 = *(float *)(a2 + 16) - *(float *)(a4 + 16);
  v24 = *(float *)(a2 + 20) - *(float *)(a4 + 20);
  v25 = *(float *)(a2 + 24) - *(float *)(a4 + 24);
  *(float *)v11.i32 = v23 + v23;
  v26 = v24 + v24;
  v27 = v25 + v25;
  v28 = (float)(v21 * v21) + -0.5;
  *(float *)&a10 = (float)-(float)(*(float *)v12.i32 * (float)(v24 + v24)) - (float)(*(float *)a4 * *(float *)v11.i32);
  *(float *)&a11 = (float)(v21 * (float)((float)(v20 * v26) - (float)(*(float *)v12.i32 * (float)(v25 + v25))))
                 + (float)(*(float *)v11.i32 * v28);
  v29 = (float)(v21 * (float)((float)(*(float *)a4 * v27) - (float)(v20 * *(float *)v11.i32))) + (float)(v26 * v28);
  v30 = v21 * (float)((float)(*(float *)v12.i32 * *(float *)v11.i32) - (float)(*(float *)a4 * v26));
  v32 = *(float *)(a2 + 8);
  v31 = *(float *)(a2 + 12);
  v14.i32[0] = *(_DWORD *)(a2 + 4);
  v33 = (float)((float)((float)(v21 * *(float *)a2) - (float)(*(float *)a4 * v31)) - (float)(*(float *)v12.i32 * v32))
      + (float)(*(float *)v14.i32 * v20);
  *(float *)v15.i32 = (float)((float)((float)(v21 * *(float *)v14.i32) - (float)(*(float *)v12.i32 * v31))
                            - (float)(v20 * *(float *)a2))
                    + (float)(v32 * *(float *)a4);
  *(float *)v11.i32 = (float)((float)((float)(v21 * v32) - (float)(v20 * v31))
                            - (float)(*(float *)a4 * *(float *)v14.i32))
                    + (float)(*(float *)a2 * *(float *)v12.i32);
  v34 = (float32x2_t)vdup_lane_s32(v11, 0);
  *(float *)v12.i32 = (float)((float)((float)(*(float *)a4 * *(float *)a2) + (float)(v21 * v31))
                            + (float)(*(float *)v12.i32 * *(float *)v14.i32))
                    + (float)(v20 * v32);
  v35 = (float32x2_t)vdup_lane_s32(v12, 0);
  *(float *)v14.i32 = v33 + v33;
  v36 = (float32x2_t)vdup_lane_s32(v14, 0);
  v37 = v30 + (float)(v27 * v28);
  *(float *)v16.i32 = *(float *)v15.i32 + *(float *)v15.i32;
  v38 = (float32x2_t)vdup_lane_s32(v16, 0);
  *(float *)v13.i32 = v33 * (float)(v33 + v33);
  v39 = vmul_n_f32((float32x2_t)vdup_lane_s32(v15, 0), *(float *)v15.i32 + *(float *)v15.i32);
  v40 = vmul_n_f32(v34, *(float *)v11.i32 + *(float *)v11.i32);
  v41 = vmul_n_f32(v36, *(float *)v15.i32);
  v42 = vmul_n_f32(v35, *(float *)v14.i32);
  v43 = vmul_n_f32(v34, *(float *)v15.i32 + *(float *)v15.i32);
  v44 = vmul_n_f32(v35, *(float *)v11.i32 + *(float *)v11.i32);
  v200 = vadd_f32(v41, v44);
  v45 = vsub_f32(v41, v44);
  v46 = vadd_f32(v42, v43);
  v47 = vsub_f32(v43, v42);
  v48 = v45.f32[1];
  v49 = *(float32x2_t *)(a1 + 4);
  v50 = *(float *)(a1 + 12);
  v51 = a3[1];
  v205 = (physx::Gu::HeightField *)v51;
  v206 = a3;
  v52 = a3[3].f32[0];
  __asm { FMOV            V26.2S, #1.0 }
  v203 = vrev64_s32((int32x2_t)vdiv_f32(_D26, a3[2]));
  v204 = 1.0 / v52;
  do
  {
    v58 = (const float *)((char *)&physx::Gu::signs + v17);
    v219 = vld3q_f32(v58);
    v217.val[0] = vmulq_n_f32(v219.val[0], v49.f32[0]);
    v217.val[1] = vmulq_lane_f32(v219.val[1], v49, 1);
    v217.val[2] = vmulq_n_f32(v219.val[2], v50);
    v59 = (float *)&v214[v17 + 96];
    vst3q_f32(v59, v217);
    v17 += 48;
  }
  while (v17 != 96);
  v198 = v50;
  v201 = v49;
  v60 = 0;
  v61 = *(float *)&a10 + (float)(v22 * v27);
  v62 = *(float *)&a11 + (float)(v18 * v61);
  *(float *)&a11 = v29 + (float)(v19 * v61);
  *(float *)&a10 = v37 + (float)(v22 * v61);
  v63 = vmul_n_f32(v36, *(float *)v11.i32);
  v64 = vmul_n_f32(v38, *(float *)v12.i32);
  v65 = vsub_f32(_D26, (float32x2_t)vdup_lane_s32(v13, 0));
  LODWORD(v66) = vsub_f32(v63, v64).u32[0];
  LODWORD(v67) = vsub_f32(v65, v40).u32[0];
  v68 = vadd_f32(v63, v64);
  LODWORD(v69) = vsub_f32(v65, v39).u32[0];
  v70 = (float)(1.0 - v39.f32[1]) - v40.f32[1];
  v71 = v68.f32[1];
  v192 = v62;
  v194 = LODWORD(a11);
  v72 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v219.val[0].f32, 0);
  v73 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)&a11, 0);
  v196 = LODWORD(a10);
  v74 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)&a10, 0);
  do
  {
    v75 = (const float *)&v214[v60 + 96];
    v216 = vld3q_f32(v75);
    v218.val[0] = vaddq_f32(v72, vaddq_f32(vaddq_f32(vmulq_n_f32(v216.val[0], v70), vmulq_lane_f32(v216.val[1], v45, 1)), vmulq_lane_f32(v216.val[2], v68, 1)));
    v218.val[1] = vaddq_f32(v73, vaddq_f32(vaddq_f32(vmulq_n_f32(v216.val[0], v200.f32[0]), vmulq_n_f32(v216.val[1], v67)), vmulq_n_f32(v216.val[2], v47.f32[0])));
    v218.val[2] = vaddq_f32(v74, vaddq_f32(vaddq_f32(vmulq_n_f32(v216.val[0], v66), vmulq_n_f32(v216.val[1], v46.f32[0])), vmulq_n_f32(v216.val[2], v69)));
    v76 = (float *)&v214[v60];
    vst3q_f32(v76, v218);
    v60 += 48;
  }
  while (v60 != 96);
  v184 = v70;
  v185 = v69;
  v186 = v67;
  v187 = v66;
  v188 = v47;
  v190 = v46;
  v77 = 0;
  while (1)
  {
    v78 = *(float *)&v214[v77];
    v79 = v78 * *(float *)v203.i32;
    if ((float)(v78 * *(float *)v203.i32) < 0.0)
      goto LABEL_20;
    v80 = *(float *)&v214[v77 + 8];
    v81 = v80 * v204;
    if ((float)(v80 * v204) < 0.0)
      goto LABEL_20;
    v82 = v205;
    if (v79 >= (float)(*((float *)v205 + 16) + 1.0) || v81 >= (float)(*((float *)v205 + 17) + 1.0))
      goto LABEL_20;
    v83 = v206[2].f32[0];
    LODWORD(v210) = 0;
    v212.i32[0] = 0;
    v84 = physx::Gu::HeightField::computeCellCoordinates(v205, v79, v81, (float *)&v210, (float *)&v212);
    v85 = *(float *)&v210;
    v86 = *((_QWORD *)v82 + 10);
    v87 = (__int16 *)(v86 + 4 * v84);
    if ((char)v87[1] < 0)
    {
      v93 = (float)*v87;
      v89 = (float)*(__int16 *)(v86 + 4 * (*((_DWORD *)v82 + 15) + v84 + 1));
      if (v212.f32[0] <= *(float *)&v210)
      {
        v96 = (float)*(__int16 *)(v86 + 4 * (*((_DWORD *)v82 + 15) + v84));
        v95 = (float)(v93 + (float)(*(float *)&v210 * (float)(v96 - v93))) + (float)(v212.f32[0] * (float)(v89 - v96));
        goto LABEL_18;
      }
      v94 = (float)*(__int16 *)(v86 + 4 * (v84 + 1));
      v91 = v93 + (float)(v212.f32[0] * (float)(v94 - v93));
      goto LABEL_16;
    }
    v88 = (float)*(__int16 *)(v86 + 4 * (*((_DWORD *)v82 + 15) + v84));
    v89 = (float)*(__int16 *)(v86 + 4 * (v84 + 1));
    if ((float)(*(float *)&v210 + v212.f32[0]) >= 1.0)
    {
      v94 = (float)*(__int16 *)(v86 + 4 * (*((_DWORD *)v82 + 15) + v84 + 1));
      v91 = v94 + (float)((float)(1.0 - v212.f32[0]) * (float)(v88 - v94));
      v85 = 1.0 - *(float *)&v210;
LABEL_16:
      v92 = v89 - v94;
      goto LABEL_17;
    }
    v90 = (float)*v87;
    v91 = v90 + (float)(v212.f32[0] * (float)(v89 - v90));
    v92 = v88 - v90;
LABEL_17:
    v95 = v91 + (float)(v85 * v92);
LABEL_18:
    if ((float)(*(float *)&v214[v77 + 4] - (float)(v83 * v95)) == 0.0
      && physx::Gu::HeightFieldUtil::getFaceIndexAtShapePoint((physx::Gu::HeightFieldUtil *)&v203, v78, v80) != -1)
    {
      return 1;
    }
LABEL_20:
    v77 += 12;
    if (v77 == 96)
    {
      v210 = &v203;
      physx::Gu::HeightFieldUtil::computeLocalBounds((uint64_t)&v203, v211);
      v97 = 0;
      v98 = (uint64_t)v210;
      do
      {
        v99 = (float32x2_t *)&v214[12 * physx::Gu::edges[v97]];
        v209 = v99[1].f32[0];
        v100 = (float32x2_t *)&v214[12 * physx::Gu::edges[v97 + 1]];
        v101 = v100[1].f32[0];
        v207 = 0;
        v208 = *v99;
        v212 = vsub_f32(*v100, v208);
        v213 = v101 - v209;
        physx::Gu::HeightFieldTraceUtil::traceSegment<physx::Gu::TriggerTraceSegmentCallback,false,false>(v98, &v208, &v212, &v207, (uint64_t)v211);
        if (v207)
          return 1;
        v97 += 2;
      }
      while (v97 != 24);
      if (v185 >= 0.0)
      {
        v117 = v185 + (float)(v186 + (float)(v184 + 1.0));
        v118 = 0.5 / sqrtf(v117);
        v114.f32[0] = v118 * vsub_f32(v190, v188).f32[0];
        v115 = (float)(v71 - v187) * v118;
        v119 = (float)(v200.f32[0] - v48) * v118;
        v120 = v117 * v118;
        v121 = v185 + (float)((float)(1.0 - v184) - v186);
        v122 = sqrtf(v121);
        v123 = (float)(0.5 / v122) * vadd_f32(v190, v188).f32[0];
        v124 = v121 * (float)(0.5 / v122);
        if (v184 >= (float)-v186)
        {
          v116 = v119;
        }
        else
        {
          v114.f32[0] = (float)(v71 + v187) * (float)(0.5 / v122);
          v115 = v123;
          v116 = v124;
        }
        if (v184 < (float)-v186)
          v102.f32[0] = (float)(v200.f32[0] - v48) * (float)(0.5 / v122);
        else
          v102.f32[0] = v120;
      }
      else
      {
        v102.i32[1] = v200.i32[1];
        v103 = (float)(v186 + (float)(1.0 - v184)) - v185;
        v104 = 0.5 / sqrtf(v103);
        v105 = (float)(v200.f32[0] + v48) * v104;
        v106 = v103 * v104;
        v107 = v104 * vadd_f32(v190, v188).f32[0];
        v108 = (float)(v71 - v187) * v104;
        v109 = (float)((float)(v184 + 1.0) - v186) - v185;
        v110 = 0.5 / sqrtf(v109);
        v111 = v109 * v110;
        v102.f32[0] = (float)(v200.f32[0] + v48) * v110;
        v112 = (float)(v71 + v187) * v110;
        v113 = v110 * vsub_f32(v190, v188).f32[0];
        if (v184 > v186)
          v114.f32[0] = v111;
        else
          v114.f32[0] = v105;
        if (v184 > v186)
          v115 = v102.f32[0];
        else
          v115 = v106;
        if (v184 > v186)
          v116 = v112;
        else
          v116 = v107;
        if (v184 > v186)
          v102.f32[0] = v113;
        else
          v102.f32[0] = v108;
      }
      *(float32x2_t *)v125.f32 = v201;
      v126 = 0;
      v127.i64[0] = __PAIR64__(LODWORD(v115), v114.u32[0]);
      v127.i64[1] = __PAIR64__(v102.u32[0], LODWORD(v116));
      v128.i64[0] = __PAIR64__(v194, LODWORD(v192));
      v129 = v198;
      v128.i64[1] = v196;
      v130 = vnegq_f32(v128);
      v131 = v130;
      v131.i32[3] = 0;
      v132 = v127;
      v132.i32[3] = 0;
      v128.i64[0] = vdupq_lane_s32((int32x2_t)v102, 0).u64[0];
      v133 = vmulq_n_f32(v131, vmla_f32((float32x2_t)0xBF000000BF000000, *(float32x2_t *)v128.f32, *(float32x2_t *)v128.f32).f32[0]);
      v133.i32[3] = 0;
      v114.f32[1] = v115;
      v134 = (float32x2_t)vextq_s8((int8x16_t)v132, (int8x16_t)v132, 8uLL).u64[0];
      v135 = (float32x2_t)vextq_s8((int8x16_t)v131, (int8x16_t)v131, 8uLL).u64[0];
      v136 = (int8x8_t)vmls_f32(vmul_f32((float32x2_t)vext_s8(*(int8x8_t *)v130.f32, (int8x8_t)v135, 4uLL), v114), (float32x2_t)vext_s8((int8x8_t)v114, (int8x8_t)v134, 4uLL), *(float32x2_t *)v130.f32);
      *(int8x8_t *)v137.f32 = vext_s8(v136, (int8x8_t)vmls_f32(vmul_f32(*(float32x2_t *)v130.f32, v134), v114, v135), 4uLL);
      v137.i64[1] = v136.u32[0];
      v138 = vmlsq_lane_f32(v133, v137, v102, 0);
      v138.i64[1] = vextq_s8((int8x16_t)v138, (int8x16_t)v138, 8uLL).u32[0];
      v139 = vmulq_f32(v131, v132);
      v139.i64[0] = vpaddq_f32(v139, v139).u64[0];
      v140 = vmlaq_n_f32(v138, v132, vpadd_f32(*(float32x2_t *)v139.f32, *(float32x2_t *)v139.f32).f32[0]);
      v141 = -3.4028e38;
      v142 = 3.4028e38;
      v143 = 3.4028e38;
      v144 = -3.4028e38;
      do
      {
        v146 = *(float *)&v214[v126];
        if (v146 < v142)
          v142 = *(float *)&v214[v126];
        v145 = (float *)&v214[v126];
        v147 = *(float *)&v214[v126 + 8];
        if (v147 < v143)
          v143 = v145[2];
        if (v146 > v144)
          v144 = *(float *)&v214[v126];
        if (v147 > v141)
          v141 = v145[2];
        v126 += 12;
      }
      while (v126 != 96);
      v148 = v142 * *(float *)v203.i32;
      v150 = *(_DWORD *)(*(_QWORD *)&v51 + 56);
      v149 = *(_DWORD *)(*(_QWORD *)&v51 + 60);
      v151 = v150 - 2;
      v152 = vcvtms_u32_f32(v148);
      if (v148 <= (float)(v150 - 2))
        v151 = v152;
      if (v148 >= 0.0)
        v153 = v151;
      else
        v153 = 0;
      v154 = v144 * *(float *)v203.i32;
      v155 = v150 - 1;
      v156 = vcvtps_u32_f32(v154);
      if (v154 <= (float)v155)
        v155 = v156;
      if (v154 >= 0.0)
        v157 = v155;
      else
        v157 = 0;
      v158 = v143 * v204;
      v159 = v149 - 2;
      v160 = vcvtms_u32_f32(v158);
      if (v158 <= (float)(v149 - 2))
        v159 = v160;
      if (v158 >= 0.0)
        v161 = v159;
      else
        v161 = 0;
      v162 = v141 * v204;
      if (v162 >= 0.0)
      {
        v163 = v149 - 1;
        if (v162 <= (float)(v149 - 1))
          v163 = vcvtps_u32_f32(v162);
      }
      else
      {
        v163 = 0;
      }
      if (v153 > v157)
        return 0;
      v165 = vaddq_f32(v140, v140);
      v165.i32[3] = 0;
      v197 = vnegq_f32(v127);
      v199 = v165;
      v166 = (int32x4_t)v197;
      v166.i32[3] = v102.i32[0];
      v125.i64[1] = LODWORD(v129) | 0x7F7FFFFF00000000;
      v202 = v125;
      v167 = v206;
      v168 = vdupq_laneq_s32(v166, 3);
      v166.i32[3] = 0;
      LODWORD(v191) = vmla_f32((float32x2_t)0xBF000000BF000000, *(float32x2_t *)v168.i8, *(float32x2_t *)v168.i8).u32[0];
      v193 = (float32x4_t)v168;
      v195 = (float32x4_t)v166;
      v189 = (float32x2_t)vextq_s8((int8x16_t)v166, (int8x16_t)v166, 8uLL).u64[0];
      v169 = (float32x2_t)vext_s8(*(int8x8_t *)v197.f32, (int8x8_t)v189, 4uLL);
      while (v161 > v163)
      {
LABEL_90:
        if (++v153 > v157)
          return 0;
      }
      v170 = v205;
      v171 = v161;
      while (1)
      {
        v172 = v171 + v153 * *(_DWORD *)(*(_QWORD *)&v51 + 60);
        (*(void (**)(int32x2_t **__return_ptr, physx::Gu::HeightField *))(*(_QWORD *)v170 + 104))(&v210, v170);
        if ((v210 & 1) == 0)
          break;
        v170 = v205;
        if (v153 && v171 && *((_DWORD *)v205 + 14) - 1 > v153 && *((_DWORD *)v205 + 15) - 1 > v171)
          goto LABEL_80;
        if ((~*(unsigned __int8 *)(*((_QWORD *)v205 + 10) + 4 * v172 + 2) & 0x7F) != 0
          || physx::Gu::HeightField::isSolidVertex(v205, v172, v153, v171, (char *)&v210, v173))
        {
LABEL_88:
          v174.f32[0] = (float)*(__int16 *)(*(_QWORD *)(*(_QWORD *)&v51 + 80) + 4 * v172);
          v174.f32[1] = (float)v153;
          *(int32x2_t *)v175.f32 = vrev64_s32((int32x2_t)vmul_f32(v167[2], v174));
          v175.f32[2] = v167[3].f32[0] * (float)v171;
          v175.i32[3] = 0;
          v176 = vmulq_n_f32(v175, v191);
          v176.i32[3] = 0;
          v177 = (float32x2_t)vextq_s8((int8x16_t)v175, (int8x16_t)v175, 8uLL).u64[0];
          v178 = (int8x8_t)vmls_f32(vmul_f32(*(float32x2_t *)v197.f32, (float32x2_t)vext_s8(*(int8x8_t *)v175.f32, (int8x8_t)v177, 4uLL)), v169, *(float32x2_t *)v175.f32);
          *(int8x8_t *)v179.f32 = vext_s8(v178, (int8x8_t)vmls_f32(vmul_f32(v189, *(float32x2_t *)v175.f32), *(float32x2_t *)v197.f32, v177), 4uLL);
          v179.i64[1] = v178.u32[0];
          v180 = vmlaq_f32(v176, v193, v179);
          v180.i64[1] = vextq_s8((int8x16_t)v180, (int8x16_t)v180, 8uLL).u32[0];
          v181 = vmulq_f32(v195, v175);
          v181.i64[0] = vpaddq_f32(v181, v181).u64[0];
          v182 = vmlaq_n_f32(v180, v195, vpadd_f32(*(float32x2_t *)v181.f32, *(float32x2_t *)v181.f32).f32[0]);
          v182.i64[1] = vextq_s8((int8x16_t)v182, (int8x16_t)v182, 8uLL).u32[0];
          v175.i64[0] = 0x4000000040000000;
          v175.i64[1] = 0x4000000040000000;
          v183 = vmlaq_f32(v199, v175, v182);
          v183.i64[1] = vextq_s8((int8x16_t)v183, (int8x16_t)v183, 8uLL).u32[0];
          *(int16x4_t *)v183.f32 = vmovn_s32(vcgtq_f32(v202, vabsq_f32(v183)));
          if (vuzp1_s8(*(int8x8_t *)v183.f32, *(int8x8_t *)v183.f32).u32[0] == -1)
            return 1;
        }
LABEL_89:
        if (++v171 > v163)
          goto LABEL_90;
      }
      v170 = v205;
LABEL_80:
      if (*(char *)(*((_QWORD *)v170 + 10) + 4 * v172 + 3) < 0)
        goto LABEL_88;
      goto LABEL_89;
    }
  }
}

uint64_t GeomOverlapCallback_ConvexHeightfield(uint64_t a1, float *a2, float32x2_t *a3, uint64_t a4)
{
  uint64_t v4;
  float v5;
  int32x2_t v12;
  float v13;
  float32x2_t v14;
  float32x2_t *v15;

  v4 = *(_QWORD *)(a1 + 32);
  v14 = a3[1];
  v15 = a3;
  v5 = a3[3].f32[0];
  __asm { FMOV            V2.2S, #1.0 }
  v12 = vrev64_s32((int32x2_t)vdiv_f32(_D2, a3[2]));
  v13 = 1.0 / v5;
  return intersectHeightFieldConvex((uint64_t)&v12, a4, v4, a2, (float *)(a1 + 4));
}

uint64_t intersectHeightFieldConvex(uint64_t a1, uint64_t a2, uint64_t a3, float *a4, float *a5)
{
  float v7;
  float v8;
  float v9;
  float v10;
  float v11;
  float v12;
  float v13;
  float v14;
  float v15;
  float v16;
  float v17;
  float v18;
  float v19;
  float v20;
  float v21;
  float v22;
  float v23;
  float v24;
  float v25;
  float v26;
  float v27;
  float v28;
  float v29;
  float v30;
  float v31;
  float v32;
  float v33;
  float v34;
  float v35;
  float v36;
  float v37;
  float v38;
  float v39;
  float v40;
  float v41;
  float v42;
  float v43;
  float v44;
  float v45;
  float v46;
  float v47;
  float v48;
  float v49;
  float v50;
  float v51;
  float v52;
  float v53;
  float v54;
  float v55;
  float v56;
  float v57;
  float v58;
  float v59;
  float v60;
  float v61;
  float v62;
  float v63;
  float v64;
  float v65;
  float v66;
  float v67;
  float v68;
  float v69;
  float v70;
  float v71;
  float v72;
  float v73;
  float v74;
  float v75;
  float v76;
  float v77;
  float v78;
  float v79;
  float v80;
  float v81;
  float v82;
  float v83;
  float v84;
  float v85;
  float v86;
  float v87;
  float v88;
  float v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  _BYTE *v93;
  size_t v94;
  uint64_t v95;
  float v96;
  uint64_t v97;
  float v98;
  float v99;
  float v100;
  float32x2_t v101;
  float32x2_t v102;
  float32x2_t v103;
  float *v104;
  float32x2_t v105;
  float *v106;
  uint64_t v107;
  float v108;
  float v109;
  float v110;
  float v111;
  int v112;
  _BYTE *v113;
  float32x4_t v114;
  _OWORD *v115;
  float32x4_t v116;
  float32x4_t v117;
  float v118;
  float v119;
  float v120;
  uint64_t v121;
  float v122;
  float v123;
  int v124;
  float v125;
  unsigned int v126;
  float v127;
  float v128;
  unsigned int v129;
  int v130;
  float v131;
  unsigned int v132;
  float v133;
  float v134;
  unsigned int v135;
  float v136;
  float v137;
  int v138;
  unsigned int v139;
  uint64_t v140;
  unsigned int v141;
  float v142;
  unint64_t v144;
  float *v145;
  float v146;
  float v147;
  float v148;
  float v149;
  float v150;
  uint64_t v151;
  float v152;
  unsigned int v153;
  float v154;
  uint64_t v155;
  __int16 *v156;
  float v157;
  float v158;
  float v159;
  float v160;
  float v161;
  float v162;
  float v163;
  float v164;
  float v165;
  __int16 v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  int v170;
  uint64_t v171;
  uint64_t v172;
  unsigned int v173;
  unsigned int v174;
  unsigned int v175;
  int v176;
  int v177;
  unsigned int v178;
  int v179;
  uint64_t v180;
  uint64_t v181;
  float v182;
  float v183;
  float *v185;
  float *v186;
  float v187;
  float v188;
  uint64_t v189;
  float v190;
  float v191;
  float v192;
  float v193;
  float v194;
  uint64_t v195;
  uint64_t v196;
  float v197;
  float v198;
  float v199;
  float v200;
  uint64_t v201;
  unsigned int v202;
  uint64_t v203;
  uint64_t v204;
  BOOL *v205;
  BOOL isSolidVertex;
  uint64_t v207;
  float v208;
  float v209;
  float v210;
  float v211;
  float v212;
  float *i;
  _BYTE v214[4];
  float v215;
  float v216;
  float v217;
  uint64_t v218;
  uint64_t v219;
  unsigned int v220;
  unsigned int v221;
  float v222;
  float v223;
  float v224;
  float v225;
  float v226;
  float v227;
  float v228;
  uint64_t v229;
  float v230;
  unsigned int v231;
  uint64_t v232;
  float v233;
  uint64_t v234;
  uint64_t v235;
  float *v236;
  char v237;
  float32x2_t v238;
  float v239;
  uint64_t v240;
  float v241[6];
  __int128 v242;
  __int128 v243;
  __int128 v244;
  __int128 v245;
  __int128 v246;
  __int128 v247;
  __int128 v248;
  __int128 v249;
  float32x2_t v250;
  float v251;
  float32x2_t v252;
  float v253;
  float32x2_t v254;
  float v255;
  float32x2_t v256;
  float v257;
  float v258[12];
  float v259[9];
  float v260;
  float v261;
  float v262;
  float v263[9];
  uint64_t v264;
  int v265;
  float32x2_t v266;
  float v267;
  uint64_t v268;

  v268 = *MEMORY[0x24BDAC8D0];
  v7 = *(float *)a2;
  v8 = *(float *)(a2 + 4);
  v9 = v8 + v8;
  v10 = *(float *)(a2 + 8);
  v11 = *(float *)(a2 + 12);
  v12 = v10 + v10;
  v13 = v8 * (float)(v8 + v8);
  v14 = v10 * (float)(v10 + v10);
  v15 = (float)(v7 + v7) * v8;
  v16 = (float)(v7 + v7) * v10;
  v17 = (float)(v7 + v7) * v11;
  v18 = v9 * v10;
  v19 = v9 * v11;
  v20 = v12 * v11;
  v263[0] = (float)(1.0 - v13) - v14;
  v263[1] = v15 + v20;
  v263[2] = v16 - v19;
  v21 = 1.0 - (float)(v7 * (float)(v7 + v7));
  v263[3] = v15 - v20;
  v263[4] = v21 - v14;
  v263[5] = v18 + v17;
  v263[6] = v16 + v19;
  v263[7] = v18 - v17;
  v22 = *a4;
  v23 = a4[1];
  v24 = a4[2];
  v25 = a4[3];
  v263[8] = v21 - v13;
  v26 = v22 * (float)(v22 + v22);
  v27 = v23 * (float)(v23 + v23);
  v28 = v24 * (float)(v24 + v24);
  v264 = *(_QWORD *)(a2 + 16);
  v29 = (float)(v22 + v22) * v23;
  v30 = (float)(v22 + v22) * v24;
  v31 = (float)(v22 + v22) * v25;
  v265 = *(_DWORD *)(a2 + 24);
  v32 = (float)(v23 + v23) * v24;
  v33 = (float)(v23 + v23) * v25;
  v34 = (float)(v24 + v24) * v25;
  v35 = (float)(1.0 - v27) - v28;
  v36 = v29 + v34;
  v37 = v30 - v33;
  v38 = v29 - v34;
  v39 = 1.0 - v26;
  v40 = (float)(1.0 - v26) - v28;
  v41 = v32 + v31;
  v42 = v30 + v33;
  v43 = v32 - v31;
  v44 = v39 - v27;
  v45 = a5[4];
  v46 = a5[5];
  v47 = a5[6];
  v49 = a5[2];
  v48 = a5[3];
  v50 = v45 + v45;
  v51 = v46 + v46;
  v52 = v45 * (float)(v45 + v45);
  v53 = v46 * (float)(v46 + v46);
  v54 = (float)(v48 + v48) * v45;
  v55 = (float)(v48 + v48) * v46;
  v56 = (float)(v48 + v48) * v47;
  v57 = v50 * v46;
  v58 = v50 * v47;
  v59 = v51 * v47;
  v60 = (float)(1.0 - v52) - v53;
  v61 = v54 + v59;
  v62 = v55 - v58;
  v63 = v54 - v59;
  v64 = 1.0 - (float)(v48 * (float)(v48 + v48));
  v65 = v64 - v53;
  v66 = v57 + v56;
  v67 = v55 + v58;
  v68 = v57 - v56;
  v69 = v64 - v52;
  v70 = a5[1];
  v71 = *a5 * v60;
  v72 = *a5 * v63;
  v73 = *a5 * v67;
  v74 = v61 * v70;
  v75 = v65 * v70;
  v76 = v68 * v70;
  v77 = v62 * v49;
  v78 = v66 * v49;
  v79 = v69 * v49;
  v80 = (float)((float)(v60 * v71) + (float)(v61 * v74)) + (float)(v62 * v77);
  v81 = (float)((float)(v60 * v72) + (float)(v61 * v75)) + (float)(v62 * v78);
  v82 = (float)((float)(v60 * v73) + (float)(v61 * v76)) + (float)(v62 * v79);
  v83 = (float)((float)(v63 * v71) + (float)(v65 * v74)) + (float)(v66 * v77);
  v84 = (float)((float)(v63 * v72) + (float)(v65 * v75)) + (float)(v66 * v78);
  v85 = v68 * v75;
  v86 = (float)((float)(v67 * v71) + (float)(v68 * v74)) + (float)(v69 * v77);
  v87 = (float)((float)(v67 * v72) + v85) + (float)(v69 * v78);
  v88 = (float)((float)(v67 * v73) + (float)(v68 * v76)) + (float)(v69 * v79);
  v223 = v81;
  v224 = v80;
  v222 = v82;
  v227 = (float)((float)(v63 * v73) + (float)(v65 * v76)) + (float)(v66 * v79);
  v228 = v84;
  v258[0] = (float)(v42 * v82) + (float)((float)(v35 * v80) + (float)(v38 * v81));
  v258[1] = (float)(v43 * v82) + (float)((float)(v36 * v80) + (float)(v40 * v81));
  v258[2] = (float)(v44 * v82) + (float)((float)(v37 * v80) + (float)(v41 * v81));
  v258[3] = (float)(v42 * v227) + (float)((float)(v35 * v83) + (float)(v38 * v84));
  v258[4] = (float)(v43 * v227) + (float)((float)(v36 * v83) + (float)(v40 * v84));
  v258[5] = (float)(v44 * v227) + (float)((float)(v37 * v83) + (float)(v41 * v84));
  v259[3] = v38;
  v259[6] = v42;
  v258[6] = (float)(v42 * v88) + (float)((float)(v35 * v86) + (float)(v38 * v87));
  v258[7] = (float)(v43 * v88) + (float)((float)(v36 * v86) + (float)(v40 * v87));
  v225 = v88;
  v226 = v87;
  v89 = a4[5];
  v260 = a4[4];
  v258[8] = (float)(v44 * v88) + (float)((float)(v37 * v86) + (float)(v41 * v87));
  v258[9] = (float)((float)(v42 * 0.0) + (float)((float)(v35 * 0.0) + (float)(v38 * 0.0))) + v260;
  v259[0] = v35;
  v259[1] = v36;
  v259[4] = v40;
  v259[5] = v41;
  v259[2] = v37;
  v259[7] = v43;
  v259[8] = v44;
  v261 = v89;
  v262 = a4[6];
  v258[10] = (float)((float)(v43 * 0.0) + (float)((float)(v36 * 0.0) + (float)(v40 * 0.0))) + v89;
  v258[11] = (float)((float)(v44 * 0.0) + (float)((float)(v37 * 0.0) + (float)(v41 * 0.0))) + v262;
  multiplyInverseRTLeft((float *)&v250, v263, v258);
  v90 = *(unsigned __int8 *)(a3 + 70);
  MEMORY[0x24BDAC7A8](v91);
  v93 = &v214[-v92];
  bzero(&v214[-v92], v94);
  v95 = *(_QWORD *)(a3 + 72);
  LODWORD(v96) = *(unsigned __int8 *)(a3 + 71);
  v97 = 20 * *(unsigned __int8 *)(a3 + 71);
  v234 = v95;
  if ((_DWORD)v90)
  {
    v98 = v251;
    v99 = v253;
    v100 = v255;
    v101 = v250;
    v102 = v252;
    v103 = v254;
    v104 = (float *)(v93 + 8);
    v105 = v256;
    v106 = (float *)(v97 + v95 + 4);
    v107 = v90;
    v108 = v257;
    do
    {
      v109 = *(v106 - 1);
      v110 = v106[1];
      v111 = v108 + (float)((float)((float)(v98 * v109) + (float)(v99 * *v106)) + (float)(v100 * v110));
      *((float32x2_t *)v104 - 1) = vadd_f32(v105, vadd_f32(vadd_f32(vmul_n_f32(v101, v109), vmul_n_f32(v102, *v106)), vmul_n_f32(v103, v110)));
      *v104 = v111;
      v104 += 3;
      v106 += 3;
      --v107;
    }
    while (v107);
    v112 = v90 - 1;
    v113 = &v93[12 * (v90 - 1)];
    v114.i64[0] = *(_QWORD *)v113;
    v114.i64[1] = *((unsigned int *)v113 + 2);
    if ((_DWORD)v90 == 1)
    {
      v116 = v114;
    }
    else
    {
      v115 = v93;
      v116 = v114;
      do
      {
        v117 = *(float32x4_t *)v115;
        v115 = (_OWORD *)((char *)v115 + 12);
        v116 = vminq_f32(v116, v117);
        v114 = vmaxq_f32(v114, v117);
        --v112;
      }
      while (v112);
    }
    v119 = v116.f32[1];
    v118 = v116.f32[2];
    v120 = v114.f32[2];
  }
  else
  {
    v118 = 8.5071e37;
    v114.i32[0] = -25165825;
    v119 = 8.5071e37;
    v116.i32[0] = 2122317823;
    v120 = -8.5071e37;
  }
  v121 = *(_QWORD *)(a1 + 16);
  v122 = *(float *)(a1 + 8);
  v123 = *(float *)a1;
  v124 = *(_DWORD *)(v121 + 56);
  v125 = v116.f32[0] * *(float *)a1;
  if (*(float *)a1 > 0.0)
  {
    if (v125 >= 0.0)
    {
      v126 = v124 - 2;
      if (v125 <= (float)(v124 - 2))
        v126 = vcvtms_u32_f32(v125);
    }
    else
    {
      v126 = 0;
    }
    v128 = v114.f32[0] * v123;
    if (v128 >= 0.0)
    {
      v129 = v124 - 1;
      if (v128 <= (float)(v124 - 1))
        v129 = vcvtps_u32_f32(v128);
      goto LABEL_27;
    }
LABEL_24:
    v129 = 0;
    goto LABEL_27;
  }
  v127 = v114.f32[0] * v123;
  if (v127 >= 0.0)
  {
    v126 = v124 - 2;
    if (v127 <= (float)(v124 - 2))
      v126 = vcvtms_u32_f32(v127);
  }
  else
  {
    v126 = 0;
  }
  if (v125 < 0.0)
    goto LABEL_24;
  v129 = v124 - 1;
  if (v125 <= (float)(v124 - 1))
    v129 = vcvtps_u32_f32(v125);
LABEL_27:
  v130 = *(_DWORD *)(v121 + 60);
  v131 = v118 * v122;
  if (v122 > 0.0)
  {
    if (v131 >= 0.0)
    {
      v132 = v130 - 2;
      if (v131 <= (float)(v130 - 2))
        v132 = vcvtms_u32_f32(v131);
    }
    else
    {
      v132 = 0;
    }
    v134 = v120 * v122;
    if (v134 >= 0.0)
    {
      v135 = v130 - 1;
      if (v134 <= (float)(v130 - 1))
        v135 = vcvtps_u32_f32(v134);
      goto LABEL_43;
    }
LABEL_40:
    v135 = 0;
    goto LABEL_43;
  }
  v133 = v120 * v122;
  if (v133 >= 0.0)
  {
    v132 = v130 - 2;
    if (v133 <= (float)(v130 - 2))
      v132 = vcvtms_u32_f32(v133);
  }
  else
  {
    v132 = 0;
  }
  if (v131 < 0.0)
    goto LABEL_40;
  v135 = v130 - 1;
  if (v131 <= (float)(v130 - 1))
    v135 = vcvtps_u32_f32(v131);
LABEL_43:
  v136 = 1.0 / *(float *)(a1 + 4);
  v231 = v126;
  if (v126 <= v129)
  {
    v138 = v126 * v130;
    v137 = -3.4028e38;
    v139 = v126;
    do
    {
      if (v132 <= v135)
      {
        v141 = v132;
        do
        {
          v140 = *(_QWORD *)(v121 + 80);
          if (v137 <= (float)*(__int16 *)(v140 + 4 * (v138 + v141)))
            v137 = (float)*(__int16 *)(v140 + 4 * (v138 + v141));
          ++v141;
        }
        while (v141 <= v135);
      }
      ++v139;
      v138 += v130;
    }
    while (v139 <= v129);
  }
  else
  {
    v137 = -3.4028e38;
  }
  v230 = v136;
  v142 = v136 * v137;
  if (v119 <= (float)(v136 * v137))
  {
    v220 = v129;
    v221 = v132;
    v229 = v121;
    if (!(_DWORD)v90)
      goto LABEL_75;
    *(float *)&v235 = v86;
    *(float *)&v236 = v83;
    v144 = 0;
    v145 = (float *)(v93 + 8);
    while (1)
    {
      v146 = *(v145 - 1);
      if (v146 < v142)
      {
        v147 = *(v145 - 2);
        v148 = v147 * *(float *)a1;
        if (v148 >= 0.0)
        {
          v149 = *v145;
          v150 = *v145 * *(float *)(a1 + 8);
          if (v150 >= 0.0)
          {
            v151 = *(_QWORD *)(a1 + 16);
            if (v148 < (float)(*(float *)(v151 + 64) + 1.0) && v150 < (float)(*(float *)(v151 + 68) + 1.0))
              break;
          }
        }
      }
LABEL_72:
      ++v144;
      v145 += 3;
      if (v144 >= v90)
      {
        LODWORD(v96) = *(unsigned __int8 *)(a3 + 71);
        v234 = *(_QWORD *)(a3 + 72);
        v97 = 20 * LODWORD(v96);
        v83 = *(float *)&v236;
        v86 = *(float *)&v235;
LABEL_75:
        v248 = 0u;
        v249 = 0u;
        v246 = 0u;
        v247 = 0u;
        v244 = 0u;
        v245 = 0u;
        v242 = 0u;
        v243 = 0u;
        v218 = a1;
        v219 = a3;
        v166 = *(_WORD *)(a3 + 68);
        v167 = v166 & 0x7FFF;
        if (v166 >= 0)
          v168 = 0;
        else
          v168 = 4 * v167;
        v240 = a1;
        v236 = v241;
        physx::Gu::HeightFieldUtil::computeLocalBounds(a1, v241);
        v169 = v234;
        if (v96 != 0.0)
        {
          v232 = v234 + v97 + 12 * v90 + 2 * v167 + 3 * v90 + v168;
          v235 = v240;
          do
          {
            v233 = v96;
            v234 = v169;
            v170 = *(unsigned __int8 *)(v169 + 18);
            if (*(_BYTE *)(v169 + 18))
            {
              v171 = 0;
              v172 = v232 + *(unsigned __int16 *)(v234 + 16);
              v173 = v170 - 1;
              do
              {
                v174 = *(unsigned __int8 *)(v172 + v173);
                v175 = *(unsigned __int8 *)(v172 + v171);
                if (v175 >= v174)
                  v176 = *(unsigned __int8 *)(v172 + v173);
                else
                  v176 = *(unsigned __int8 *)(v172 + v171);
                if (v175 > v174)
                  v174 = *(unsigned __int8 *)(v172 + v171);
                v177 = v174 | (v176 << 8);
                v178 = 9 * ((~(v177 << 15) + v177) ^ ((~(v177 << 15) + v177) >> 10));
                v179 = (v178 ^ (v178 >> 6)) + ~((v178 ^ (v178 >> 6)) << 11);
                v180 = (v179 ^ BYTE2(v179)) & 0x3F;
                if (*((unsigned __int16 *)&v242 + v180) == v177)
                {
                  v181 = v171;
                }
                else
                {
                  *((_WORD *)&v242 + v180) = v177;
                  v181 = (v171 + 1);
                  v182 = *(float *)&v93[12 * v176 + 4];
                  v183 = *(float *)&v93[12 * v174 + 4];
                  if (v182 <= v142 || v183 <= v142)
                  {
                    v185 = (float *)&v93[12 * v174];
                    v186 = (float *)&v93[12 * v176];
                    v238.f32[0] = *v186;
                    v238.f32[1] = v182;
                    v239 = v186[2];
                    v187 = *v185;
                    v188 = v185[2];
                    v237 = 0;
                    v266.f32[0] = v187 - v238.f32[0];
                    v266.f32[1] = v183 - v182;
                    v267 = v188 - v239;
                    physx::Gu::HeightFieldTraceUtil::traceSegment<physx::Gu::TriggerTraceSegmentCallback,false,false>(v235, &v238, &v266, &v237, (uint64_t)v236);
                    v173 = v171;
                    if (v237)
                      return 1;
                  }
                  else
                  {
                    v173 = v171;
                  }
                }
                v171 = v181;
                --v170;
              }
              while (v170);
            }
            v169 = v234 + 20;
            LODWORD(v96) = LODWORD(v233) - 1;
          }
          while (LODWORD(v233) != 1);
        }
        multiplyInverseRTLeft((float *)&v242, v259, v263);
        v189 = v231;
        if (v231 <= v220)
        {
          v217 = (float)((float)(v224 * *(float *)&v242) + (float)(v83 * *((float *)&v242 + 1)))
               + (float)(v86 * *((float *)&v242 + 2));
          v215 = (float)((float)(v222 * *(float *)&v242) + (float)(v227 * *((float *)&v242 + 1)))
               + (float)(v225 * *((float *)&v242 + 2));
          v216 = (float)((float)(v223 * *(float *)&v242) + (float)(v228 * *((float *)&v242 + 1)))
               + (float)(v226 * *((float *)&v242 + 2));
          *(float *)&v236 = (float)((float)(v224 * *((float *)&v242 + 3)) + (float)(v83 * *(float *)&v243))
                          + (float)(v86 * *((float *)&v243 + 1));
          *(float *)&v235 = (float)((float)(v223 * *((float *)&v242 + 3)) + (float)(v228 * *(float *)&v243))
                          + (float)(v226 * *((float *)&v243 + 1));
          v233 = (float)((float)(v224 * *((float *)&v243 + 2)) + (float)(v83 * *((float *)&v243 + 3)))
               + (float)(v86 * *(float *)&v244);
          *(float *)&v234 = (float)((float)(v222 * *((float *)&v242 + 3)) + (float)(v227 * *(float *)&v243))
                          + (float)(v225 * *((float *)&v243 + 1));
          *(float *)&v232 = (float)((float)(v223 * *((float *)&v243 + 2)) + (float)(v228 * *((float *)&v243 + 3)))
                          + (float)(v226 * *(float *)&v244);
          v190 = (float)((float)(v222 * *((float *)&v243 + 2)) + (float)(v227 * *((float *)&v243 + 3)))
               + (float)(v225 * *(float *)&v244);
          v191 = (float)((float)((float)(v224 * *((float *)&v244 + 1)) + (float)(v83 * *((float *)&v244 + 2)))
                       + (float)(v86 * *((float *)&v244 + 3)))
               + 0.0;
          v192 = (float)((float)((float)(v223 * *((float *)&v244 + 1)) + (float)(v228 * *((float *)&v244 + 2)))
                       + (float)(v226 * *((float *)&v244 + 3)))
               + 0.0;
          v193 = (float)((float)((float)(v222 * *((float *)&v244 + 1)) + (float)(v227 * *((float *)&v244 + 2)))
                       + (float)(v225 * *((float *)&v244 + 3)))
               + 0.0;
          v228 = 1.0 / v123;
          v194 = 1.0 / v122;
          v196 = v218;
          v195 = v219;
          while (v221 > v135)
          {
LABEL_100:
            v189 = (v189 + 1);
            if (v189 > v220)
              return 0;
          }
          v197 = v228 * (float)v189;
          v198 = v217 * v197;
          v199 = v216 * v197;
          v200 = v215 * v197;
          v201 = *(_QWORD *)(v196 + 16);
          v202 = v221;
          while (2)
          {
            v203 = v202 + *(_DWORD *)(v229 + 60) * (_DWORD)v189;
            v204 = v189;
            (*(void (**)(uint64_t *__return_ptr, uint64_t))(*(_QWORD *)v201 + 104))(&v240, v201);
            if ((v240 & 1) == 0)
            {
              v201 = *(_QWORD *)(v196 + 16);
              v189 = v204;
              goto LABEL_105;
            }
            v201 = *(_QWORD *)(v196 + 16);
            v189 = v204;
            if ((_DWORD)v204
              && v202
              && *(_DWORD *)(v201 + 56) - 1 > v204
              && *(_DWORD *)(v201 + 60) - 1 > v202)
            {
LABEL_105:
              if (*(char *)(*(_QWORD *)(v201 + 80) + 4 * v203 + 3) < 0)
                goto LABEL_113;
            }
            else if ((~*(unsigned __int8 *)(*(_QWORD *)(v201 + 80) + 4 * v203 + 2) & 0x7F) != 0
                   || (isSolidVertex = physx::Gu::HeightField::isSolidVertex(*(physx::Gu::HeightField **)(v196 + 16), v203, v204, v202, (char *)&v240, v205), v189 = v204, isSolidVertex))
            {
LABEL_113:
              v207 = *(unsigned __int8 *)(v195 + 71);
              if (!*(_BYTE *)(v195 + 71))
                return 1;
              v208 = v230 * (float)*(__int16 *)(*(_QWORD *)(v229 + 80) + 4 * v203);
              v209 = v194 * (float)v202;
              v210 = (float)(*(float *)&v232 * v209) + (float)(v199 + (float)(*(float *)&v235 * v208));
              v211 = (float)(v190 * v209) + (float)(v200 + (float)(*(float *)&v234 * v208));
              v212 = v191 + (float)((float)(v233 * v209) + (float)(v198 + (float)(*(float *)&v236 * v208)));
              for (i = (float *)(*(_QWORD *)(v195 + 72) + 8);
                    (float)(i[1]
                          + (float)((float)((float)((float)(v192 + v210) * *(i - 1)) + (float)(v212 * *(i - 2)))
                                  + (float)((float)(v193 + v211) * *i))) < 0.0;
                    i += 5)
              {
                if (!--v207)
                  return 1;
              }
            }
            if (++v202 > v135)
              goto LABEL_100;
            continue;
          }
        }
        return 0;
      }
    }
    v152 = *(float *)(*(_QWORD *)(a1 + 24) + 16);
    LODWORD(v242) = 0;
    LODWORD(v240) = 0;
    v153 = physx::Gu::HeightField::computeCellCoordinates((physx::Gu::HeightField *)v151, v148, v150, (float *)&v242, (float *)&v240);
    v154 = *(float *)&v242;
    v155 = *(_QWORD *)(v151 + 80);
    v156 = (__int16 *)(v155 + 4 * v153);
    if ((char)v156[1] < 0)
    {
      v162 = (float)*v156;
      v158 = (float)*(__int16 *)(v155 + 4 * (*(_DWORD *)(v151 + 60) + v153 + 1));
      if (*(float *)&v240 <= *(float *)&v242)
      {
        v165 = (float)*(__int16 *)(v155 + 4 * (*(_DWORD *)(v151 + 60) + v153));
        v164 = (float)(v162 + (float)(*(float *)&v242 * (float)(v165 - v162)))
             + (float)(*(float *)&v240 * (float)(v158 - v165));
LABEL_69:
        if ((float)(v146 - (float)(v152 * v164)) == 0.0)
        {
          if (physx::Gu::HeightFieldUtil::getFaceIndexAtShapePoint((physx::Gu::HeightFieldUtil *)a1, v147, v149) != -1)return 1;
          LODWORD(v90) = *(unsigned __int8 *)(a3 + 70);
        }
        goto LABEL_72;
      }
      v163 = (float)*(__int16 *)(v155 + 4 * (v153 + 1));
      v160 = v162 + (float)(*(float *)&v240 * (float)(v163 - v162));
    }
    else
    {
      v157 = (float)*(__int16 *)(v155 + 4 * (*(_DWORD *)(v151 + 60) + v153));
      v158 = (float)*(__int16 *)(v155 + 4 * (v153 + 1));
      if ((float)(*(float *)&v242 + *(float *)&v240) < 1.0)
      {
        v159 = (float)*v156;
        v160 = v159 + (float)(*(float *)&v240 * (float)(v158 - v159));
        v161 = v157 - v159;
LABEL_68:
        v164 = v160 + (float)(v154 * v161);
        goto LABEL_69;
      }
      v163 = (float)*(__int16 *)(v155 + 4 * (*(_DWORD *)(v151 + 60) + v153 + 1));
      v160 = v163 + (float)((float)(1.0 - *(float *)&v240) * (float)(v157 - v163));
      v154 = 1.0 - *(float *)&v242;
    }
    v161 = v158 - v163;
    goto LABEL_68;
  }
  return 0;
}

BOOL sweepCapsule_HeightFieldGeom(float32x2_t *a1, uint64_t a2, physx::Gu::Box *a3, float a4, float a5, uint64_t a6, float *a7, float32x2_t *a8, uint64_t a9, __int16 *a10)
{
  float *v13;
  float v17;
  float v18;
  float v19;
  float v20;
  float v21;
  float v22;
  int v28;
  float v29;
  float v30;
  float v31;
  int32x2_t v32;
  float v33;
  float v34;
  float v35;
  float v36;
  float v37;
  int32x2_t v38;
  float v39;
  float v40;
  float v41;
  int32x2_t v42;
  float v43;
  float v44;
  float v45;
  float v46;
  float v47;
  float v48;
  float v49;
  float v50;
  float v51;
  float v52;
  float v53;
  float v54;
  float32x2_t v55;
  int32x2_t v56;
  float32x2_t v57;
  float v58;
  int32x2_t v59;
  float32x2_t v60;
  float32x2_t v61;
  float32x2_t v62;
  float32x2_t v63;
  float32x2_t v64;
  float32x2_t v65;
  float32x2_t v66;
  float32x2_t v67;
  float32x2_t v68;
  float v69;
  float v70;
  float v71;
  uint64_t v72;
  float *v73;
  int32x2_t v74;
  unsigned int v75;
  uint64_t v76;
  float v77;
  float v78;
  float v79;
  float v80;
  float v81;
  float v82;
  float v83;
  float v84;
  float v85;
  float v86;
  float v87;
  int v88;
  float v89;
  float v90;
  unsigned int v91;
  float v92;
  float v93;
  float v94;
  float v95;
  float v96;
  int v97;
  unsigned int v98;
  float v99;
  int v100;
  unsigned int v101;
  float v102;
  float v103;
  float v104;
  float v105;
  float v106;
  float v107;
  float v108;
  float v109;
  float v110;
  float v111;
  float v112;
  float v113;
  float v114;
  float v115;
  float v116;
  float v117;
  float v118;
  float v119;
  float v120;
  float v121;
  float v122;
  float v123;
  float v124;
  float v125;
  float v126;
  float v127;
  float v128;
  float v129;
  int v130;
  int v131;
  int v132;
  int v133;
  float v134;
  float v135;
  float v136;
  float v137;
  int v138;
  int v139;
  float v140;
  float v141;
  int v142;
  int v143;
  int v144;
  int v145;
  unsigned int v146;
  int v147;
  BOOL v148;
  int v149;
  int v150;
  unsigned int v151;
  int v152;
  int v153;
  int v154;
  int v155;
  int v156;
  signed int v157;
  int v159;
  int v160;
  float v161;
  float v163;
  int v165;
  float32x4_t v166;
  float32x4_t v167;
  float32x4_t v168;
  float32x4_t v169;
  __int16 v170;
  float v171;
  float *v173;
  float32x2_t *v174;
  int v175;
  float v176;
  float v177;
  int v178;
  int v179;
  _QWORD v180[2];
  float32x2_t v181;
  float32x2_t v182[2];
  float32x2_t v183;
  float v184;
  float32x2_t v185;
  float v186;
  float32x2_t v187;
  float v188;
  _QWORD v189[2];
  __int16 v190;
  __int16 v191;
  BOOL v192;
  BOOL v193;
  __int128 *v194;
  float32x2_t *v195;
  uint64_t v196;
  uint64_t v197;
  float v198;
  int32x2_t v199;
  float v200;
  float32x2_t v201;
  float32x2_t *v202;
  float v203[10];
  float v204;
  float v205;
  float v206;
  float v207;
  float v208;
  __int128 v209;
  uint64_t v210;
  float v211;
  uint64_t v212;
  float32x4_t v213;
  uint64_t v214;
  _QWORD *v215;
  unsigned int v216;
  unsigned int v217;
  float v218;
  float v219;
  float32x4_t v220;
  _BYTE v221[28];
  __int128 v222;
  int v223;
  uint64_t v224;

  v13 = a7;
  v224 = *MEMORY[0x24BDAC8D0];
  v17 = a7[6] + a5;
  v209 = *(_OWORD *)a7;
  v210 = *((_QWORD *)a7 + 2);
  v211 = v17;
  physx::Gu::computeBoxAroundCapsule((uint64_t)&v209, (const Capsule *)v203, a3);
  v18 = v203[9];
  v19 = (float)((float)(fabsf(v203[3]) * v207) + (float)(fabsf(v203[0]) * v206)) + (float)(fabsf(v203[6]) * v208);
  v20 = (float)((float)(fabsf(v203[4]) * v207) + (float)(fabsf(v203[1]) * v206)) + (float)(fabsf(v203[7]) * v208);
  v21 = (float)((float)(fabsf(v203[5]) * v207) + (float)(fabsf(v203[2]) * v206)) + (float)(fabsf(v203[8]) * v208);
  v201 = a1[1];
  v202 = a1;
  v22 = a1[3].f32[0];
  __asm { FMOV            V4.2S, #1.0 }
  v199 = vrev64_s32((int32x2_t)vdiv_f32(_D4, a1[2]));
  v200 = 1.0 / v22;
  v28 = a1[3].i8[4] & 2 | *a10 & 0x80;
  v190 = *a10;
  v191 = 0;
  v192 = v28 != 0;
  v193 = (v190 & 0x40) != 0;
  v189[0] = &off_24ED91AA0;
  v189[1] = &v199;
  v194 = &v209;
  v195 = a8;
  v196 = a9;
  v197 = a2;
  v198 = a4;
  *(_DWORD *)(a9 + 16) = -1;
  *(_DWORD *)(a9 + 48) = 2139095039;
  v29 = *(float *)(a2 + 16) * -2.0;
  v30 = *(float *)(a2 + 20) * -2.0;
  v31 = *(float *)(a2 + 24) * -2.0;
  v33 = *(float *)(a2 + 8);
  v32.i32[0] = *(_DWORD *)(a2 + 12);
  v34 = (float)(*(float *)v32.i32 * *(float *)v32.i32) + -0.5;
  v35 = *(float *)a2;
  v36 = *(float *)(a2 + 4);
  v37 = (float)((float)(v30 * v36) + (float)(*(float *)a2 * v29)) + (float)(v33 * v31);
  *(float *)v38.i32 = -v33;
  v39 = (float)((float)(v29 * v34) - (float)((float)((float)(v36 * v31) - (float)(v33 * v30)) * *(float *)v32.i32))
      + (float)(*(float *)a2 * v37);
  v40 = -*(float *)a2;
  v41 = (float)((float)(v30 * v34)
              - (float)((float)((float)(v33 * v29) - (float)(*(float *)a2 * v31)) * *(float *)v32.i32))
      + (float)(v36 * v37);
  *(float *)v42.i32 = -v36;
  v43 = (float)((float)(v31 * v34)
              - (float)((float)((float)(*(float *)a2 * v30) - (float)(v36 * v29)) * *(float *)v32.i32))
      + (float)(v33 * v37);
  v44 = (float)((float)-(float)(v36 * (float)(v204 + v204)) - (float)(*(float *)a2 * (float)(v18 + v18)))
      - (float)(v33 * (float)(v205 + v205));
  v45 = v39
      + (float)((float)((float)(*(float *)v32.i32
                              * (float)((float)(v33 * (float)(v204 + v204)) - (float)(v36 * (float)(v205 + v205))))
                      + (float)((float)(v18 + v18) * v34))
              - (float)(*(float *)a2 * v44));
  v46 = v41
      + (float)((float)((float)(*(float *)v32.i32
                              * (float)((float)(*(float *)a2 * (float)(v205 + v205)) - (float)(v33 * (float)(v18 + v18))))
                      + (float)((float)(v204 + v204) * v34))
              - (float)(v36 * v44));
  v47 = v43
      + (float)((float)((float)(*(float *)v32.i32
                              * (float)((float)(v36 * (float)(v18 + v18)) - (float)(*(float *)a2 * (float)(v204 + v204))))
                      + (float)((float)(v205 + v205) * v34))
              - (float)(v33 * v44));
  v187.f32[0] = v45;
  v187.f32[1] = v46;
  v188 = v47;
  v48 = a8->f32[0] + a8->f32[0];
  v49 = a8->f32[1] + a8->f32[1];
  v50 = a8[1].f32[0] + a8[1].f32[0];
  v51 = (float)((float)-(float)(v36 * v49) - (float)(v35 * v48)) - (float)(v33 * v50);
  v52 = (float)((float)(*(float *)v32.i32 * (float)((float)(v33 * v49) - (float)(v36 * v50))) + (float)(v48 * v34))
      - (float)(v35 * v51);
  v53 = (float)((float)(*(float *)v32.i32 * (float)((float)(v35 * v50) - (float)(v33 * v48))) + (float)(v49 * v34))
      - (float)(v36 * v51);
  v54 = (float)((float)(*(float *)v32.i32 * (float)((float)(v36 * v48) - (float)(v35 * v49))) + (float)(v50 * v34))
      - (float)(v33 * v51);
  v185.f32[0] = v52;
  v185.f32[1] = v53;
  v55 = (float32x2_t)vdup_lane_s32(v32, 0);
  *(float *)v56.i32 = v40 - v35;
  v57 = (float32x2_t)vdup_lane_s32(v56, 0);
  *(float *)v32.i32 = (float)-v36 - v36;
  v186 = v54;
  v58 = (float)-v33 - v33;
  *(float *)v59.i32 = -(float)(v35 * (float)(v40 - v35));
  v60 = vmul_n_f32((float32x2_t)vdup_lane_s32(v42, 0), *(float *)v32.i32);
  v61 = vmul_n_f32((float32x2_t)vdup_lane_s32(v38, 0), v58);
  v62 = vmul_n_f32(v57, -v36);
  v63 = vmul_n_f32(v57, *(float *)v38.i32);
  v64 = vmul_n_f32(v55, *(float *)v56.i32);
  v65 = vmul_n_f32((float32x2_t)vdup_lane_s32(v32, 0), *(float *)v38.i32);
  v66 = vmul_n_f32(v55, *(float *)v32.i32);
  v67 = vmul_n_f32(v55, v58);
  v68 = vsub_f32(_D4, (float32x2_t)vdup_lane_s32(v59, 0));
  *(float *)v59.i32 = vsub_f32(v63, v66).f32[0];
  *(float *)v38.i32 = vadd_f32(v64, v65).f32[0];
  v63.f32[0] = vmuls_lane_f32(v21, vadd_f32(v63, v66), 1);
  v64.f32[0] = v21 * vsub_f32(v65, v64).f32[0];
  v69 = v21 * vsub_f32(v68, v60).f32[0];
  v70 = fabsf(v63.f32[0])
      + (float)(fabsf(v19 * (float)((float)(1.0 - v60.f32[1]) - v61.f32[1]))
              + fabsf(vmuls_lane_f32(v20, vsub_f32(v62, v67), 1)));
  v68.f32[0] = fabsf(v64.f32[0])
             + (float)(fabsf(v19 * vadd_f32(v62, v67).f32[0]) + fabsf(v20 * vsub_f32(v68, v61).f32[0]));
  v71 = fabsf(v69) + (float)(fabsf(v19 * *(float *)v59.i32) + fabsf(v20 * *(float *)v38.i32));
  v183.f32[0] = (float)((float)(v45 + v70) + (float)(v70 - v45)) * 0.5;
  v183.f32[1] = (float)((float)(v68.f32[0] + v46) + (float)(v68.f32[0] - v46)) * 0.5;
  v184 = (float)((float)(v47 + v71) + (float)(v71 - v47)) * 0.5;
  HeightFieldTraceSegmentSweepHelper::HeightFieldTraceSegmentSweepHelper((uint64_t)v180, (uint64_t)&v199, &v183);
  v72 = v180[0];
  v73 = (float *)v180[1];
  v212 = 0;
  if (physx::Gu::intersectRayAABB2(&v181, v182, &v187, &v185, (float *)&v212 + 1, (float *)&v212, a4))
  {
    v75 = 0;
    v76 = *(_QWORD *)(v72 + 16);
    v213.i8[0] = 0;
    v213.i64[1] = v72;
    v214 = v76;
    v223 = 0;
    v77 = v45 + (float)(v52 * a4);
    v78 = v46 + (float)(v53 * a4);
    if (v78 >= v46)
      v79 = v46;
    else
      v79 = v46 + (float)(v53 * a4);
    v80 = v73[1];
    v81 = *(float *)(v72 + 4);
    v82 = (float)(v79 - v80) * v81;
    if (v78 <= v46)
      v78 = v46;
    v218 = v82;
    v219 = (float)(v78 + v80) * v81;
    if (v77 >= v45)
      v83 = v45;
    else
      v83 = v45 + (float)(v52 * a4);
    v84 = *v73;
    v85 = v83 - *v73;
    v86 = *(float *)v72;
    v87 = *(float *)v72 * v85;
    v88 = *(_DWORD *)(v76 + 56);
    if (v87 >= 0.0)
    {
      v75 = v88 - 2;
      if (v87 <= (float)(v88 - 2))
        v75 = vcvtms_u32_f32(v87);
    }
    v89 = v47 + (float)(v54 * a4);
    v220.i32[0] = v75;
    if (v77 <= v45)
      v77 = v45;
    v90 = v86 * (float)(v77 + v84);
    if (v90 >= 0.0)
    {
      v91 = v88 - 1;
      if (v90 <= (float)(v88 - 1))
        v91 = vcvtps_u32_f32(v90);
    }
    else
    {
      v91 = 0;
    }
    v220.i32[1] = v91;
    if (v89 >= v47)
      v92 = v47;
    else
      v92 = v47 + (float)(v54 * a4);
    v93 = v73[2];
    v94 = v92 - v93;
    v95 = *(float *)(v72 + 8);
    v96 = v95 * v94;
    v97 = *(_DWORD *)(v76 + 60);
    if (v96 >= 0.0)
    {
      v98 = v97 - 2;
      if (v96 <= (float)(v97 - 2))
        v98 = vcvtms_u32_f32(v96);
    }
    else
    {
      v98 = 0;
    }
    v220.i32[2] = v98;
    if (v89 <= v47)
      v89 = v47;
    v99 = v95 * (float)(v89 + v93);
    v100 = v97 - 1;
    if (v99 >= 0.0)
    {
      v101 = v97 - 1;
      if (v99 <= (float)v100)
        v101 = vcvtps_u32_f32(v99);
    }
    else
    {
      v101 = 0;
    }
    v173 = v13;
    v174 = a8;
    v220.i32[3] = v101;
    v102 = v84 * v86;
    v103 = ceilf(v84 * v86);
    v104 = v93 * v95;
    v105 = ceilf(v93 * v95);
    v216 = vcvtps_s32_f32(v102) + 1;
    v217 = vcvtps_s32_f32(v104) + 1;
    v106 = (float)(v45 + (float)(v52 * *((float *)&v212 + 1))) * v86;
    v107 = 0.0000001 - v103;
    if (v106 > (float)(0.0000001 - v103))
      v107 = (float)(v45 + (float)(v52 * *((float *)&v212 + 1))) * v86;
    if (v107 >= (float)(v103 + (float)((float)(v88 - 1) * 1.0)))
      v107 = v103 + (float)((float)(v88 - 1) * 1.0);
    v108 = (float)(v47 + (float)(v54 * *((float *)&v212 + 1))) * v95;
    v109 = 0.0000001 - v105;
    if (v108 > (float)(0.0000001 - v105))
      v109 = (float)(v47 + (float)(v54 * *((float *)&v212 + 1))) * v95;
    v110 = v105 + (float)((float)v100 * 1.0);
    if (v109 < v110)
      v110 = v109;
    v111 = (float)(v45 + (float)(v52 * *(float *)&v212)) * v86;
    v112 = (float)(v47 + (float)(v54 * *(float *)&v212)) * v95;
    if ((float)(v111 - v106) < 0.0)
      v113 = -1.0;
    else
      v113 = 1.0;
    if ((float)(v112 - v108) < 0.0)
      v114 = -1.0;
    else
      v114 = 1.0;
    if (vabds_f32(v111, v106) >= 1.0e-10)
      v115 = v111 - v106;
    else
      v115 = v113 * 1.0e-10;
    if (vabds_f32(v112, v108) >= 1.0e-10)
      v116 = v112 - v108;
    else
      v116 = v114 * 1.0e-10;
    v117 = floorf(v107);
    v118 = ceilf(v107);
    v119 = floorf(v110);
    v120 = ceilf(v110);
    if (v116 <= 0.0)
      v121 = v120;
    else
      v121 = v119;
    v122 = v117 + -1.0;
    if (v117 != v107)
      v122 = v117;
    v123 = v118 + 1.0;
    if (v118 != v107)
      v123 = v118;
    if (v115 <= 0.0)
      v124 = v118;
    else
      v124 = v117;
    if (v115 > 0.0)
      v125 = v123;
    else
      v125 = v122;
    v126 = v119 + -1.0;
    if (v119 != v110)
      v126 = v119;
    if (v120 == v110)
      v127 = v120 + 1.0;
    else
      v127 = v120;
    if (v116 <= 0.0)
      v127 = v126;
    v128 = (float)(v125 - v106) / v115;
    v129 = (float)(v127 - v108) / v116;
    if (v128 < 0.0)
      v128 = fabsf(0.0000001 / v115);
    v130 = (int)v124;
    v131 = (int)v121;
    v132 = (int)v113;
    v133 = (int)v114;
    if (v129 < 0.0)
      v129 = fabsf(0.0000001 / v116);
    v176 = 1.0 / fabsf(v115);
    v134 = fabsf(v116);
    v175 = v97;
    v177 = v105 + (float)v97;
    v135 = v103 + (float)v88;
    v136 = 0.0 - v105;
    v137 = 0.0 - v103;
    if (v132 >= 1)
      v138 = 0;
    else
      v138 = -1;
    if (v133 >= 1)
      v139 = 0;
    else
      v139 = -1;
    v178 = v139;
    v179 = v138;
    v140 = 1.0 / v134;
    while (1)
    {
      if (v128 >= v129)
        v141 = v129;
      else
        v141 = v128;
      if (!v213.i8[0])
      {
        v213.i8[0] = 1;
        v215 = v189;
        *(_DWORD *)v221 = v175;
        *(_DWORD *)&v221[4] = v179;
        v222 = xmmword_2261A9E10;
        *(_DWORD *)&v221[8] = v178;
        *(_DWORD *)&v221[12] = v130 - v216;
        v151 = v216 + v130;
        *(_DWORD *)&v221[16] = v216 + v130;
        *(_DWORD *)&v221[20] = v131 - v217;
        v152 = v217 + v131;
        *(_DWORD *)&v221[24] = v217 + v131;
        if ((int)(v130 - v216) <= (int)(v216 + v130))
        {
          v153 = v179;
          v154 = v130 - v216 + v179;
          v155 = v178;
          do
          {
            if (v154 >= v220.i32[0])
            {
              if (v154 >= v220.i32[1])
                break;
              if (*(int *)&v221[20] <= v152)
              {
                v156 = *(_DWORD *)&v221[20] + v155;
                do
                {
                  if (v156 >= v220.i32[2])
                  {
                    if (v156 >= v220.i32[3])
                      break;
                    if (!physx::Gu::HeightFieldTraceUtil::OverlapTraceSegment<CapsuleTraceSegmentReport>::testVertexIndex((uint64_t)&v213, v156 + v154 * *(_DWORD *)v221))goto LABEL_153;
                    v152 = *(_DWORD *)&v221[24];
                    v155 = *(_DWORD *)&v221[8];
                  }
                  v148 = v156++ < v152 + v155;
                }
                while (v148);
                v151 = *(_DWORD *)&v221[16];
                v153 = *(_DWORD *)&v221[4];
              }
            }
            v148 = v154++ < (int)(v151 + v153);
          }
          while (v148);
          if (v223)
          {
            if (!(*(unsigned int (**)(_QWORD *))(*v215 + 16))(v215))
              goto LABEL_153;
            v223 = 0;
          }
        }
        goto LABEL_139;
      }
      v142 = v130 - v216;
      v143 = v216 + v130;
      LODWORD(v222) = v130 - v216;
      DWORD1(v222) = v216 + v130;
      v144 = v131 - v217;
      v145 = v217 + v131;
      DWORD2(v222) = v131 - v217;
      HIDWORD(v222) = v217 + v131;
      v146 = *(_DWORD *)&v221[12];
      if (v130 - v216 == *(_DWORD *)&v221[12])
      {
        if (v144 == *(_DWORD *)&v221[20])
          goto LABEL_124;
        if (v142 <= v143)
        {
          if (v144 >= *(int *)&v221[20])
            v144 = v217 + v131;
          v147 = *(_DWORD *)&v221[8] + v144;
          v148 = *(_DWORD *)&v221[8] + v144 >= v220.i32[2] && v147 < v220.i32[3];
          if (v148)
          {
            v149 = *(_DWORD *)&v221[4];
            v150 = *(_DWORD *)&v221[4] + v142;
            do
            {
              if (v150 >= v220.i32[1])
                break;
              if (v150 >= v220.i32[0])
              {
                if (!physx::Gu::HeightFieldTraceUtil::OverlapTraceSegment<CapsuleTraceSegmentReport>::testVertexIndex((uint64_t)&v213, v147 + *(_DWORD *)v221 * v150))goto LABEL_153;
                v149 = *(_DWORD *)&v221[4];
              }
              v148 = v150++ < v149 + v143;
            }
            while (v148);
          }
        }
      }
      else
      {
        if (v142 >= *(int *)&v221[12])
          v146 = v216 + v130;
        else
          v146 = v130 - v216;
        if (v144 <= v145)
        {
LABEL_124:
          v157 = *(_DWORD *)&v221[4] + v146;
          if ((int)(*(_DWORD *)&v221[4] + v146) >= v220.i32[0] && v157 < v220.i32[1])
          {
            v159 = *(_DWORD *)&v221[8];
            v160 = *(_DWORD *)&v221[8] + v144;
            do
            {
              if (v160 >= v220.i32[3])
                break;
              if (v160 >= v220.i32[2])
              {
                if (!physx::Gu::HeightFieldTraceUtil::OverlapTraceSegment<CapsuleTraceSegmentReport>::testVertexIndex((uint64_t)&v213, v160 + *(_DWORD *)v221 * v157))goto LABEL_153;
                v159 = *(_DWORD *)&v221[8];
              }
              v148 = v160++ < v159 + v145;
            }
            while (v148);
          }
        }
      }
      if (v223)
      {
        if (!(*(unsigned int (**)(_QWORD *))(*v215 + 16))(v215))
          goto LABEL_153;
        v223 = 0;
      }
      *(_OWORD *)&v221[12] = v222;
LABEL_139:
      if (v128 >= v129)
      {
        v131 += v133;
        v163 = (float)(v131 + v133);
        if (v136 > v163 || v177 <= v163)
        {
LABEL_153:
          v13 = v173;
          a8 = v174;
          break;
        }
        v129 = v140 + v129;
      }
      else
      {
        v130 += v132;
        v161 = (float)(v130 + v132);
        if (v137 > v161 || v135 <= v161)
          goto LABEL_153;
        v128 = v176 + v128;
      }
      if (v141 >= 1.0001)
        goto LABEL_153;
    }
  }
  v165 = v191;
  if ((_BYTE)v191)
  {
    if (!HIBYTE(v191))
    {
      v170 = 1027;
      goto LABEL_161;
    }
    *(_WORD *)(a9 + 20) = 1026;
    if ((v190 & 0x200) != 0)
    {
      v166 = *(float32x4_t *)v13;
      v166.i64[1] = *((unsigned int *)v13 + 2);
      v167 = *(float32x4_t *)(v13 + 3);
      v167.i64[1] = *((unsigned int *)v13 + 5);
      v74.i32[0] = (__int32)v13[6];
      LOBYTE(v216) = 1;
      *(int32x2_t *)&v221[16] = vdup_lane_s32(v74, 0);
      v220 = v166;
      *(float32x4_t *)v221 = v167;
      LODWORD(v214) = v74.i32[0];
      HIDWORD(v214) = v74.i32[0];
      v215 = (_QWORD *)(v74.u32[0] | 0x400000000);
      v168 = vaddq_f32(v166, v167);
      v167.i64[0] = 0x3F0000003F000000;
      v167.i64[1] = 0x3F0000003F000000;
      v169 = vmulq_f32(v168, v167);
      v169.i32[3] = 0;
      v213 = v169;
      if ((physx::Gu::computeCapsule_HeightFieldMTD((uint64_t)a1) & 1) != 0)
      {
        v170 = *(_WORD *)(a9 + 20) | 1;
LABEL_161:
        *(_WORD *)(a9 + 20) = v170;
        return v165 != 0;
      }
    }
    *(_DWORD *)(a9 + 48) = 0;
    v171 = -a8[1].f32[0];
    *(float32x2_t *)(a9 + 36) = vneg_f32(*a8);
    *(float *)(a9 + 44) = v171;
  }
  return v165 != 0;
}

BOOL sweepConvex_HeightFieldGeom(float32x2_t *a1, float32x2_t *a2, uint64_t a3, float32x4_t *a4, float32x2_t *a5, uint64_t a6, __int16 *a7, double a8, float a9)
{
  float32x4_t v9;
  float32x4_t v10;
  float32x4_t v11;
  uint64_t v19;
  float v20;
  BOOL v22;
  float v23;
  float v24;
  float v25;
  float v26;
  float v27;
  float v28;
  float v29;
  _BOOL4 v30;
  float v31;
  float v32;
  float v33;
  float v34;
  float v35;
  float v36;
  float v41;
  float32x2_t v42;
  float32x4_t v43;
  float32x4_t v44;
  float32x4_t v45;
  float32x4_t v46;
  float32x2_t v47;
  float32x4_t v48;
  float32x4_t v49;
  float32x2_t v50;
  float32x2_t v51;
  int8x8_t v52;
  float32x4_t v53;
  float32x4_t v54;
  float32x4_t v55;
  float32x4_t v56;
  float32x4_t v57;
  float32x4_t v58;
  float32x2_t v59;
  int8x8_t v60;
  float32x4_t v61;
  float32x4_t v62;
  float32x4_t v63;
  float32x4_t v64;
  float32x2_t v65;
  float v66;
  float32x2_t v67;
  float32x2_t v68;
  __int128 v69;
  __int128 v70;
  float32x4_t v71;
  float32x4_t v72;
  float32x4_t v73;
  float32x4_t v74;
  float32x4_t v75;
  float32x4_t v76;
  float32x2_t v77;
  float32x4_t v78;
  float32x4_t v79;
  float32x4_t v80;
  float32x4_t v81;
  float v82;
  float v83;
  float v84;
  float v85;
  float v86;
  float v87;
  float v88;
  float v89;
  float v90;
  int32x2_t v91;
  float v92;
  float v93;
  float v94;
  float v95;
  float v96;
  int v97;
  float32x4_t v98;
  float32x4_t v99;
  float32x4_t v100;
  float v101;
  float v102;
  float v103;
  float v104;
  float v105;
  float v106;
  uint64_t v107;
  float32x4_t v108;
  int32x4_t v109;
  float32x4_t v110;
  float32x4_t v111;
  int v112;
  float32x4_t v113;
  float32x4_t v114;
  float32x4_t v115;
  float32x4_t v116;
  float32x2_t v117;
  float32x2_t v118;
  float32x2_t v119;
  float32x4_t v120;
  float32x2_t v121;
  float32x2_t v122;
  float32x2_t v123;
  float32x2_t v124;
  float32x2_t v125;
  float32x2_t v126;
  float32x2_t v127;
  float32x2_t v128;
  float32x2_t v129;
  float32x2_t v130;
  int8x8_t v131;
  float32x4_t v132;
  int32x2_t v133;
  float32x4_t v134;
  float32x4_t v135;
  float32x4_t v136;
  float32x4_t v137;
  float32x4_t v138;
  float32x4_t v139;
  float32x4_t v140;
  float32x4_t v141;
  float32x4_t v142;
  float32x4_t v143;
  float32x4_t v144;
  float32x4_t v145;
  float32x4_t v146;
  float32x4_t v147;
  float32x4_t v148;
  float32x4_t v149;
  float32x4_t v150;
  float32x4_t v151;
  float32x4_t v152;
  float32x4_t v153;
  float32x4_t v154;
  float32x4_t v155;
  float32x4_t v156;
  float32x4_t v157;
  float32x4_t v158;
  float32x4_t v159;
  float32x4_t v160;
  float32x4_t v161;
  float32x4_t v162;
  float32x4_t v163;
  float v164;
  float v165;
  float v166;
  float v167;
  uint64_t v168;
  float v174;
  float v175;
  float v176;
  float v177;
  float v178;
  float v179;
  float v180;
  float v181;
  float v182;
  float v183;
  float v184;
  float v185;
  float v186;
  float v187;
  float v188;
  float v189;
  float v190;
  float v191;
  float v192;
  float v193;
  float v194;
  float v195;
  float v196;
  float v197;
  float v198;
  float v199;
  float v200;
  float v201;
  float v202;
  float v203;
  float v204;
  float v205;
  float v206;
  float v207;
  float v208;
  float v209;
  float v210;
  float v211;
  float v212;
  float v213;
  float v214;
  float v215;
  float v216;
  float v217;
  float v218;
  float v219;
  float v220;
  float v221;
  float v222;
  float v223;
  float v224;
  float v225;
  float v226;
  float v227;
  float32x2_t v228;
  float32x2_t v229;
  float v230;
  float32x2_t v231;
  float32x2_t v232;
  float32x2_t v233;
  float32x2_t v234;
  float32x2_t v235;
  float32x2_t v236;
  float32x2_t v237;
  float32x2_t v238;
  float32x2_t v239;
  float v240;
  float v241;
  float v242;
  float v243;
  float v244;
  uint64_t v245;
  float *v246;
  unsigned int v247;
  uint64_t v248;
  float v249;
  float v250;
  float v251;
  float v252;
  float v253;
  float v254;
  float v255;
  float v256;
  float v257;
  float v258;
  float v259;
  int v260;
  float v261;
  float v262;
  unsigned int v263;
  float v264;
  float v265;
  float v266;
  float v267;
  int v268;
  unsigned int v269;
  float v270;
  int v271;
  unsigned int v272;
  float v273;
  float v274;
  float v275;
  float v276;
  float v277;
  float v278;
  float v279;
  float v280;
  float v281;
  float v282;
  float v283;
  float v284;
  float v285;
  float v286;
  float v287;
  float v288;
  float v289;
  float v290;
  float v291;
  float v292;
  float v293;
  float v294;
  float v295;
  float v296;
  float v297;
  float v298;
  int v299;
  int v300;
  int v301;
  int v302;
  float v303;
  float v304;
  float v305;
  float v306;
  int v307;
  int v308;
  float v309;
  float v310;
  int v311;
  int v312;
  int v313;
  int v314;
  unsigned int v315;
  signed int v316;
  BOOL v317;
  int v318;
  signed int v319;
  unsigned int v320;
  int v321;
  signed int v322;
  int v323;
  int v324;
  signed int v325;
  signed int v326;
  int v328;
  signed int v329;
  float v330;
  float v332;
  int v334;
  float v335;
  int v336;
  float v337;
  uint64_t v338;
  int v339;
  float v340;
  float v341;
  float v342;
  char v343;
  float32x2_t *v345;
  uint64_t v346;
  uint64_t v347;
  int v348;
  float v349;
  float v350;
  float v351;
  float v352;
  float v353;
  int v354;
  float32x2_t v355;
  _QWORD v358[2];
  float32x2_t v359;
  float32x2_t v360;
  float32x2_t v361;
  float v362;
  float32x2_t v363;
  float v364;
  unint64_t v365;
  float v366;
  int32x2_t v367;
  float v368;
  float32x2_t v369;
  float32x2_t *v370;
  __int128 v371;
  __int128 v372;
  __int128 v373;
  __int128 v374;
  uint64_t v375;
  char v376;
  char v377[8];
  uint64_t v378;
  uint64_t v379;
  _QWORD *v380;
  unsigned int v381;
  unsigned int v382;
  float v383;
  float v384;
  signed int v385;
  signed int v386;
  signed int v387;
  signed int v388;
  int v389;
  int v390;
  int v391;
  __int128 v392;
  __int128 v393;
  int v394;
  uint64_t v395;
  _QWORD v396[2];
  __int16 v397;
  __int16 v398;
  BOOL v399;
  BOOL v400;
  __int128 v401;
  float32x4_t v402;
  __int128 v403;
  float32x4_t v404;
  float32x4_t v405;
  float32x4_t v406;
  float32x4_t v407;
  __int128 v408;
  char v409;
  __int128 v410;
  __int128 v411;
  __int128 v412;
  __int128 v413;
  __int128 v414;
  __int128 v415;
  uint64_t v416;
  uint64_t v417;
  uint64_t v418;
  char v419;
  __int128 v420;
  int v421;
  __int16 v422;
  uint64_t v423;
  uint64_t v424;
  uint64_t v425;
  int v426;
  int v427;
  float32x4_t v428;
  unint64_t v429;
  uint64_t v430;
  float v431;
  __int32 v432;
  __int32 v433;
  __int32 v434;
  float v435;
  uint64_t v436;

  v436 = *MEMORY[0x24BDAC8D0];
  v19 = *(_QWORD *)(a3 + 32);
  v20 = 1.0;
  v22 = *(float *)(a3 + 4) == 1.0 && *(float *)(a3 + 8) == 1.0 && *(float *)(a3 + 12) == 1.0;
  v371 = xmmword_2260E5F10;
  v372 = xmmword_2260E5F10;
  v373 = xmmword_2260FD430;
  v374 = xmmword_2260E5F20;
  v23 = 0.0;
  v24 = 0.0;
  v375 = 0x3F80000000000000;
  v376 = 0;
  v25 = 0.0;
  v10.i32[0] = 1.0;
  v26 = 0.0;
  v27 = 0.0;
  v28 = 0.0;
  v29 = 1.0;
  if (!v22)
  {
    physx::Cm::FastVertex2ShapeScaling::init((uint64_t)&v371, (float *)(a3 + 4), (float *)(a3 + 16));
    v28 = *((float *)&v371 + 1);
    v29 = *(float *)&v371;
    v26 = *((float *)&v371 + 3);
    v27 = *((float *)&v371 + 2);
    v25 = *((float *)&v372 + 1);
    v10.i32[0] = v372;
    v23 = *((float *)&v372 + 3);
    v24 = *((float *)&v372 + 2);
    v20 = *(float *)&v373;
  }
  v351 = v25;
  v353 = v23;
  v30 = 0;
  v31 = *(float *)(v19 + 32);
  v32 = *(float *)(v19 + 36);
  v33 = *(float *)(v19 + 40);
  v34 = *(float *)(v19 + 44);
  v35 = *(float *)(v19 + 48);
  v350 = *(float *)(v19 + 52);
  v36 = a1[3].f32[0];
  __asm { FMOV            V3.2S, #1.0 }
  v367 = vrev64_s32((int32x2_t)vdiv_f32(_D3, a1[2]));
  v368 = 1.0 / v36;
  v41 = a5[1].f32[0];
  v407 = 0u;
  v408 = 0u;
  v42 = *a5;
  *(float32x2_t *)v11.f32 = vneg_f32(*a5);
  v91.i32[1] = HIDWORD(a8);
  v430 = v11.i64[0];
  v431 = -v41;
  v11.f32[2] = -v41;
  *(float32x2_t *)v43.f32 = a2[2];
  v43.i64[1] = a2[3].u32[0];
  v44.i64[0] = a4[1].i64[0];
  v44.i64[1] = a4[1].u32[2];
  v45 = *a4;
  v46 = vnegq_f32(*a4);
  v47 = (float32x2_t)vdupq_laneq_s32(*(int32x4_t *)a4, 3).u64[0];
  v48 = vsubq_f32(v43, v44);
  v49 = v46;
  v49.i32[3] = 0;
  v43.i32[0] = vmla_f32((float32x2_t)0xBF000000BF000000, v47, v47).u32[0];
  v50 = (float32x2_t)vextq_s8((int8x16_t)v49, (int8x16_t)v49, 8uLL).u64[0];
  v51 = (float32x2_t)vext_s8(*(int8x8_t *)v46.f32, (int8x8_t)v50, 4uLL);
  v52 = (int8x8_t)vmls_f32(vmul_f32(*(float32x2_t *)v46.f32, (float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v48, (int8x16_t)v48, 4uLL)), v51, *(float32x2_t *)v48.f32);
  *(int8x8_t *)v53.f32 = vext_s8(v52, (int8x8_t)vmls_f32(vmul_f32(v50, *(float32x2_t *)v48.f32), *(float32x2_t *)v46.f32, (float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v48, (int8x16_t)v48, 8uLL)), 4uLL);
  v53.i64[1] = v52.u32[0];
  v54 = vmulq_n_f32(v48, v43.f32[0]);
  v54.i32[3] = 0;
  v55 = vmlaq_laneq_f32(v54, v53, *a4, 3);
  v55.i64[1] = vextq_s8((int8x16_t)v55, (int8x16_t)v55, 8uLL).u32[0];
  v56 = vmulq_f32(v49, v48);
  v56.i64[0] = vpaddq_f32(v56, v56).u64[0];
  v57 = vmlaq_n_f32(v55, v49, vpadd_f32(*(float32x2_t *)v56.f32, *(float32x2_t *)v56.f32).f32[0]);
  v58 = *(float32x4_t *)a2->f32;
  v58.i32[3] = 0;
  v59 = (float32x2_t)vextq_s8((int8x16_t)v58, (int8x16_t)v58, 8uLL).u64[0];
  v60 = (int8x8_t)vmls_f32(vmul_f32(*a2, v50), *(float32x2_t *)v46.f32, v59);
  *(float32x2_t *)v46.f32 = vmls_f32(vmul_f32((float32x2_t)vext_s8((int8x8_t)*a2, (int8x8_t)v59, 4uLL), *(float32x2_t *)v46.f32), v51, *a2);
  v61 = vmulq_f32(v58, v49);
  v61.i64[0] = vpaddq_f32(v61, v61).u64[0];
  *(int8x8_t *)v62.f32 = vext_s8(*(int8x8_t *)v46.f32, v60, 4uLL);
  v62.i64[1] = v46.i64[0];
  v63 = vaddq_f32(vaddq_f32(vmulq_laneq_f32(v49, *(float32x4_t *)a2->f32, 3), vmulq_laneq_f32(v58, *a4, 3)), v62);
  *(int32x2_t *)v46.f32 = vdup_lane_s32(*(int32x2_t *)v63.f32, 1);
  *(float32x2_t *)v61.f32 = vsub_f32(vmul_f32((float32x2_t)*(_OWORD *)&vextq_s8(*(int8x16_t *)a2->f32, *(int8x16_t *)a2->f32, 8uLL), (float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v45, (int8x16_t)v45, 8uLL)), vpadd_f32(*(float32x2_t *)v61.f32, *(float32x2_t *)v61.f32));
  *(int32x2_t *)v49.f32 = vdup_laneq_s32((int32x4_t)v63, 2);
  v64 = vaddq_f32(v63, v63);
  *(float32x2_t *)v62.f32 = vmul_lane_f32(*(float32x2_t *)v46.f32, *(float32x2_t *)v64.f32, 1);
  *(float32x2_t *)v58.f32 = vmul_laneq_f32(*(float32x2_t *)v49.f32, v64, 2);
  *(float32x2_t *)v46.f32 = vmul_n_f32(*(float32x2_t *)v46.f32, v64.f32[0]);
  v65 = vmul_n_f32(*(float32x2_t *)v49.f32, v64.f32[0]);
  *(float32x2_t *)v49.f32 = vmul_lane_f32(*(float32x2_t *)v49.f32, *(float32x2_t *)v64.f32, 1);
  v66 = v24;
  v67 = vmul_lane_f32((float32x2_t)vdup_lane_s32(*(int32x2_t *)v64.f32, 0), *(float32x2_t *)v61.f32, 1);
  v68 = vmul_lane_f32((float32x2_t)vdup_lane_s32(*(int32x2_t *)v64.f32, 1), *(float32x2_t *)v61.f32, 1);
  *(float32x2_t *)v61.f32 = vmul_lane_f32((float32x2_t)vdup_laneq_s32((int32x4_t)v64, 2), *(float32x2_t *)v61.f32, 1);
  *(int8x8_t *)&v69 = vext_s8((int8x8_t)vsub_f32(vsub_f32(_D3, *(float32x2_t *)v62.f32), *(float32x2_t *)v58.f32), (int8x8_t)vadd_f32(*(float32x2_t *)v46.f32, *(float32x2_t *)v61.f32), 4uLL);
  *((_QWORD *)&v69 + 1) = vsub_f32(v65, v68).u32[0];
  v355 = _D3;
  *(float32x2_t *)v63.f32 = vsub_f32(_D3, (float32x2_t)vdup_lane_s32((int32x2_t)vmul_f32(*(float32x2_t *)v63.f32, *(float32x2_t *)v64.f32), 0));
  *(int8x8_t *)v61.f32 = vext_s8((int8x8_t)vsub_f32(*(float32x2_t *)v46.f32, *(float32x2_t *)v61.f32), (int8x8_t)vsub_f32(*(float32x2_t *)v63.f32, *(float32x2_t *)v58.f32), 4uLL);
  v61.i64[1] = vadd_f32(*(float32x2_t *)v49.f32, v67).u32[0];
  *(int8x8_t *)&v70 = vext_s8((int8x8_t)vadd_f32(v65, v68), (int8x8_t)vsub_f32(*(float32x2_t *)v49.f32, v67), 4uLL);
  *((_QWORD *)&v70 + 1) = vsub_f32(*(float32x2_t *)v63.f32, *(float32x2_t *)v62.f32).u32[0];
  v71 = vaddq_f32(v57, v57);
  v71.i32[3] = 0;
  v401 = v69;
  v402 = v61;
  v403 = v70;
  v404 = v71;
  v405 = v45;
  v406 = v44;
  v72 = vmulq_n_f32(v11, *(float *)&a8);
  v72.i32[3] = 0;
  v73 = vnegq_f32(v72);
  v74 = v73;
  v74.i32[3] = 0;
  v75 = v45;
  v75.i32[3] = 0;
  v76 = vmulq_n_f32(v74, v43.f32[0]);
  v76.i32[3] = 0;
  v77 = (float32x2_t)vextq_s8((int8x16_t)v75, (int8x16_t)v75, 8uLL).u64[0];
  v44.i64[0] = vextq_s8((int8x16_t)v74, (int8x16_t)v74, 8uLL).u64[0];
  *(float32x2_t *)v43.f32 = vmls_f32(vmul_f32(*(float32x2_t *)v73.f32, v77), *(float32x2_t *)v45.f32, *(float32x2_t *)v44.f32);
  *(float32x2_t *)v44.f32 = vmls_f32(vmul_f32((float32x2_t)vext_s8(*(int8x8_t *)v73.f32, *(int8x8_t *)v44.f32, 4uLL), *(float32x2_t *)v45.f32), (float32x2_t)vext_s8(*(int8x8_t *)v45.f32, (int8x8_t)v77, 4uLL), *(float32x2_t *)v73.f32);
  *(int8x8_t *)v73.f32 = vext_s8(*(int8x8_t *)v44.f32, *(int8x8_t *)v43.f32, 4uLL);
  v73.i64[1] = v44.u32[0];
  v78 = vmlsq_laneq_f32(v76, v73, v45, 3);
  v78.i64[1] = vextq_s8((int8x16_t)v78, (int8x16_t)v78, 8uLL).u32[0];
  v79 = vmulq_f32(v74, v75);
  v79.i64[0] = vpaddq_f32(v79, v79).u64[0];
  v80 = vmlaq_n_f32(v78, v75, vpadd_f32(*(float32x2_t *)v79.f32, *(float32x2_t *)v79.f32).f32[0]);
  v81 = vaddq_f32(v80, v80);
  v81.i32[3] = 0;
  v428 = v81;
  v429 = vdupq_lane_s32(*(int32x2_t *)&a8, 0).u64[0];
  v74.f32[0] = -2.0 * v42.f32[0];
  v75.f32[0] = vmuls_lane_f32(-2.0, v42, 1);
  v81.f32[0] = v41 * -2.0;
  v80.i32[0] = a2[1].i32[0];
  v42.i32[0] = a2[1].i32[1];
  v82 = (float)(v42.f32[0] * v42.f32[0]) + -0.5;
  v77.i32[0] = a2->i32[1];
  v44.f32[0] = (float)(v75.f32[0] * v77.f32[0]) + (float)(a2->f32[0] * v74.f32[0]);
  v43.f32[0] = (float)(v74.f32[0] * v82)
             - (float)((float)((float)(v77.f32[0] * v81.f32[0]) - (float)(v80.f32[0] * v75.f32[0])) * v42.f32[0]);
  v57.f32[0] = (float)(v75.f32[0] * v82)
             - (float)((float)((float)(v80.f32[0] * v74.f32[0]) - (float)(a2->f32[0] * v81.f32[0])) * v42.f32[0]);
  v74.f32[0] = (float)(v81.f32[0] * v82)
             - (float)((float)((float)(a2->f32[0] * v75.f32[0]) - (float)(v77.f32[0] * v74.f32[0])) * v42.f32[0]);
  v81.f32[0] = v44.f32[0] + (float)(v80.f32[0] * v81.f32[0]);
  v75.f32[0] = v43.f32[0] + (float)(a2->f32[0] * v81.f32[0]);
  v45.f32[0] = v57.f32[0] + (float)(v77.f32[0] * v81.f32[0]);
  v81.f32[0] = v74.f32[0] + (float)(v80.f32[0] * v81.f32[0]);
  v83 = (float)(v29 * v31) + (float)(v26 * v32);
  v84 = (float)(v28 * v31) + (float)(v10.f32[0] * v32);
  v85 = (float)(v27 * v31) + (float)(v351 * v32);
  v74.f32[0] = v29 * v34;
  v86 = v27 * v34;
  v87 = v66 * v33;
  *(float *)v91.i32 = v26 * v35;
  v88 = v353 * v33;
  v89 = v20 * v33;
  _D3.f32[0] = v66 * v350;
  v90 = v20 * v350;
  *(float *)v91.i32 = fabsf(v74.f32[0]) + fabsf(*(float *)v91.i32);
  v92 = fabsf(v28 * v34) + fabsf(v10.f32[0] * v35);
  v93 = fabsf(v86) + fabsf(v351 * v35);
  v369 = a1[1];
  v370 = a1;
  v94 = fabsf(_D3.f32[0]);
  v95 = fabsf(v353 * v350);
  v96 = fabsf(v90);
  v97 = a1[3].i8[4] & 2 | *a7 & 0x80;
  v397 = *a7;
  v398 = 0;
  v399 = v97 != 0;
  v400 = (v397 & 0x40) != 0;
  v396[1] = &v367;
  v396[0] = &off_24ED91AF8;
  v420 = 0uLL;
  v409 = 0;
  v422 = 0;
  v425 = 0;
  v423 = 0;
  v424 = 0;
  v435 = a9;
  v421 = -1;
  v426 = LODWORD(a8);
  v432 = v75.i32[0];
  v98 = *(float32x4_t *)(a3 + 4);
  v433 = v45.i32[0];
  v99 = v98;
  v99.i32[3] = 0;
  v434 = v81.i32[0];
  v100 = *(float32x4_t *)(a3 + 16);
  if (v98.f32[0] == 1.0 && v98.f32[1] == 1.0)
    v30 = v98.f32[2] == 1.0;
  v101 = v83 + v87;
  v102 = v84 + v88;
  v103 = v85 + v89;
  v104 = *(float *)v91.i32 + v94;
  v105 = v92 + v95;
  v106 = v93 + v96;
  v107 = *(_QWORD *)(v19 + 72) + 20 * *(unsigned __int8 *)(v19 + 71);
  v108.i64[0] = *(_QWORD *)(v19 + 92);
  v108.i64[1] = *(unsigned int *)(v19 + 100);
  v109 = (int32x4_t)vmulq_f32(v99, v108);
  *(float32x2_t *)v109.i8 = vpmin_f32((float32x2_t)vdup_laneq_s32(v109, 2), *(float32x2_t *)v109.i8);
  *(float *)v109.i32 = vpmin_f32(*(float32x2_t *)v109.i8, *(float32x2_t *)v109.i8).f32[0];
  *(float32x2_t *)&v408 = vmul_n_f32((float32x2_t)0x3D4CCCCD3DCCCCCDLL, *(float *)v109.i32);
  *((float *)&v408 + 2) = 0.025 * *(float *)v109.i32;
  if (v30)
  {
    v110.i32[1] = 0;
    v410 = xmmword_2260E5F10;
    v411 = xmmword_2260E5F20;
    v412 = xmmword_2260E5F40;
    v413 = xmmword_2260E5F10;
    v414 = xmmword_2260E5F20;
    v415 = xmmword_2260E5F40;
  }
  else
  {
    v111 = vrecpeq_f32(v99);
    v112 = 4;
    do
    {
      v111 = vmulq_f32(v111, vrecpsq_f32(v111, v99));
      --v112;
    }
    while (v112);
    *(int32x2_t *)v113.f32 = vdup_lane_s32(*(int32x2_t *)v98.f32, 0);
    v113.i64[1] = v113.u32[0];
    *(int16x4_t *)v113.f32 = vmovn_s32(vceqq_f32(v113, v99));
    if ((~vuzp1_s8(*(int8x8_t *)v113.f32, *(int8x8_t *)v113.f32).u32[0] & 0xFFFFFF) != 0)
    {
      v117 = (float32x2_t)vdup_lane_s32(*(int32x2_t *)v100.f32, 1);
      v118 = (float32x2_t)vdup_laneq_s32((int32x4_t)v100, 2);
      v119 = (float32x2_t)vdup_laneq_s32((int32x4_t)v100, 3);
      v120 = vaddq_f32(v100, v100);
      v121 = vmul_lane_f32(v117, *(float32x2_t *)v120.f32, 1);
      v122 = vmul_laneq_f32(v118, v120, 2);
      v123 = vmul_n_f32(v117, v120.f32[0]);
      v124 = vmul_n_f32(v118, v120.f32[0]);
      v125 = vmul_n_f32(v119, v120.f32[0]);
      v126 = vmul_lane_f32(v118, *(float32x2_t *)v120.f32, 1);
      v127 = vmul_lane_f32(v119, *(float32x2_t *)v120.f32, 1);
      v128 = vmul_laneq_f32(v119, v120, 2);
      v129 = vsub_f32(v355, (float32x2_t)vdup_lane_s32((int32x2_t)vmul_f32(*(float32x2_t *)v100.f32, *(float32x2_t *)v120.f32), 0));
      v130 = (float32x2_t)vext_s8((int8x8_t)vsub_f32(vsub_f32(v355, v121), v122), (int8x8_t)vadd_f32(v123, v128), 4uLL);
      v131 = (int8x8_t)vsub_f32(v123, v128);
      *(float32x2_t *)v132.f32 = v130;
      v132.i64[1] = vsub_f32(v124, v127).u32[0];
      v133 = (int32x2_t)vext_s8(v131, (int8x8_t)vsub_f32(v129, v122), 4uLL);
      *(int8x8_t *)v134.f32 = vext_s8((int8x8_t)vdup_lane_s32((int32x2_t)v130, 0), (int8x8_t)v133, 4uLL);
      *(int32x2_t *)v120.f32 = v133;
      v120.i64[1] = vadd_f32(v126, v125).u32[0];
      *(int8x8_t *)v99.f32 = vext_s8((int8x8_t)vadd_f32(v124, v127), (int8x8_t)vsub_f32(v126, v125), 4uLL);
      *(int8x8_t *)v135.f32 = vext_s8((int8x8_t)v130, (int8x8_t)vdup_lane_s32(v133, 1), 4uLL);
      v99.i64[1] = vsub_f32(v129, v121).u32[0];
      v134.i64[1] = vdup_lane_s32(*(int32x2_t *)v99.f32, 0).u32[0];
      v135.i64[1] = vdup_lane_s32(*(int32x2_t *)v99.f32, 1).u32[0];
      *(int8x8_t *)v136.f32 = vext_s8((int8x8_t)vdup_lane_s32(*(int32x2_t *)&v132.u32[2], 0), (int8x8_t)v120.u32[2], 4uLL);
      v136.i64[1] = vdup_lane_s32(*(int32x2_t *)&v99.u32[2], 0).u32[0];
      v137 = vmulq_n_f32(v134, v98.f32[0]);
      v137.i32[3] = 0;
      v138 = vmulq_lane_f32(v135, *(float32x2_t *)v98.f32, 1);
      v138.i32[3] = 0;
      v139 = vmulq_laneq_f32(v136, v98, 2);
      v139.i32[3] = 0;
      v140 = vmulq_n_f32(v137, v130.f32[0]);
      v140.i32[3] = 0;
      v141 = vmulq_lane_f32(v138, v130, 1);
      v141.i32[3] = 0;
      v142 = vmulq_laneq_f32(v139, v132, 2);
      v142.i32[3] = 0;
      v114 = vaddq_f32(v142, vaddq_f32(v140, v141));
      v143 = vmulq_n_f32(v137, v120.f32[0]);
      v143.i32[3] = 0;
      v144 = vmulq_lane_f32(v138, *(float32x2_t *)v120.f32, 1);
      v144.i32[3] = 0;
      v145 = vmulq_laneq_f32(v139, v120, 2);
      v145.i32[3] = 0;
      v100 = vaddq_f32(v145, vaddq_f32(v143, v144));
      v146 = vmulq_n_f32(v137, v99.f32[0]);
      v146.i32[3] = 0;
      v147 = vmulq_lane_f32(v138, *(float32x2_t *)v99.f32, 1);
      v147.i32[3] = 0;
      v148 = vmulq_laneq_f32(v139, v99, 2);
      v148.i32[3] = 0;
      v115 = vaddq_f32(v148, vaddq_f32(v146, v147));
      v410 = (__int128)v114;
      v411 = (__int128)v100;
      v149 = vmulq_n_f32(v134, v111.f32[0]);
      v149.i32[3] = 0;
      v150 = vmulq_lane_f32(v135, *(float32x2_t *)v111.f32, 1);
      v150.i32[3] = 0;
      v151 = vmulq_laneq_f32(v136, v111, 2);
      v151.i32[3] = 0;
      v152 = vmulq_n_f32(v149, v132.f32[0]);
      v152.i32[3] = 0;
      v153 = vmulq_lane_f32(v150, *(float32x2_t *)v132.f32, 1);
      v153.i32[3] = 0;
      v154 = vmulq_laneq_f32(v151, v132, 2);
      v154.i32[3] = 0;
      v9 = vaddq_f32(v154, vaddq_f32(v152, v153));
      v155 = vmulq_n_f32(v149, v120.f32[0]);
      v155.i32[3] = 0;
      v156 = vmulq_lane_f32(v150, *(float32x2_t *)v120.f32, 1);
      v156.i32[3] = 0;
      v157 = vmulq_laneq_f32(v151, v120, 2);
      v157.i32[3] = 0;
      v158 = vmulq_n_f32(v149, v99.f32[0]);
      v158.i32[3] = 0;
      v159 = vmulq_lane_f32(v150, *(float32x2_t *)v99.f32, 1);
      v159.i32[3] = 0;
      v10 = vaddq_f32(v157, vaddq_f32(v155, v156));
      v160 = vmulq_laneq_f32(v151, v99, 2);
      v160.i32[3] = 0;
      v116 = vaddq_f32(v160, vaddq_f32(v158, v159));
    }
    else
    {
      v111.i32[3] = 0;
      v114 = vmulq_f32(v99, (float32x4_t)xmmword_2260E5F10);
      v100 = vmulq_f32(v99, (float32x4_t)xmmword_2260E5F20);
      v115 = vmulq_f32(v99, (float32x4_t)xmmword_2260E5F40);
      v410 = (__int128)v114;
      v411 = (__int128)v100;
      v9 = vmulq_f32(v111, (float32x4_t)xmmword_2260E5F10);
      v10 = vmulq_f32(v111, (float32x4_t)xmmword_2260E5F20);
      v116 = vmulq_f32(v111, (float32x4_t)xmmword_2260E5F40);
    }
    v413 = (__int128)v9;
    v414 = (__int128)v10;
    v415 = (__int128)v116;
    v161 = vmulq_f32(v114, (float32x4_t)0);
    v161.i32[3] = 0;
    v162 = vmulq_f32(v100, (float32x4_t)0);
    v162.i32[3] = 0;
    v163 = vmulq_f32(v115, (float32x4_t)0);
    v163.i32[3] = 0;
    v110 = vaddq_f32(v162, v161);
    v412 = (__int128)v115;
    v407 = vaddq_f32(v163, v110);
  }
  v347 = (uint64_t)a1;
  v110.f32[0] = v101 - v104;
  v164 = v102 - v105;
  v99.f32[0] = v103 - v106;
  v165 = v101 + v104;
  v166 = v102 + v105;
  v167 = v103 + v106;
  v418 = v107;
  v419 = *(_BYTE *)(v19 + 70);
  v407 = 0uLL;
  v168 = *(_QWORD *)(v19 + 80);
  v417 = v168;
  v416 = v19 + 32;
  if (v168)
  {
    _X8 = *(_QWORD *)(v168 + 24);
    __asm
    {
      PRFM            #0, [X8]
      PRFM            #0, [X8,#0x80]
    }
    _X8 = *(_QWORD *)(v168 + 32);
    __asm { PRFM            #0, [X8] }
  }
  v174 = (float)((float)(v110.f32[0] + v165) * 0.5) + (float)((float)(v110.f32[0] + v165) * 0.5);
  v175 = (float)((float)(v164 + v166) * 0.5) + (float)((float)(v164 + v166) * 0.5);
  v100.f32[0] = (float)((float)(v99.f32[0] + v167) * 0.5) + (float)((float)(v99.f32[0] + v167) * 0.5);
  v10.i32[0] = a4->i32[2];
  v9.i32[0] = a4->i32[3];
  v176 = (float)(v9.f32[0] * v9.f32[0]) + -0.5;
  v177 = a4->f32[0];
  v178 = a4->f32[1];
  v179 = (float)((float)(v175 * v178) + (float)(a4->f32[0] * v174)) + (float)(v10.f32[0] * v100.f32[0]);
  v180 = (float)((float)(v9.f32[0] * (float)((float)(v178 * v100.f32[0]) - (float)(v10.f32[0] * v175)))
               + (float)(v174 * v176))
       + (float)(a4->f32[0] * v179);
  v181 = (float)((float)(v9.f32[0] * (float)((float)(v10.f32[0] * v174) - (float)(a4->f32[0] * v100.f32[0])))
               + (float)(v175 * v176))
       + (float)(v178 * v179);
  v182 = (float)((float)(v9.f32[0] * (float)((float)(a4->f32[0] * v175) - (float)(v178 * v174)))
               + (float)(v100.f32[0] * v176))
       + (float)(v10.f32[0] * v179);
  v183 = a4[1].f32[0] + v180;
  v100.f32[0] = a4[1].f32[1] + v181;
  v184 = a4[1].f32[2] + v182;
  v185 = v178 + v178;
  v186 = v10.f32[0] + v10.f32[0];
  v187 = v178 * (float)(v178 + v178);
  v188 = v10.f32[0] * (float)(v10.f32[0] + v10.f32[0]);
  v189 = (float)(v177 + v177) * v178;
  v190 = (float)(v177 + v177) * v10.f32[0];
  v191 = v9.f32[0] * (float)(v177 + v177);
  v10.f32[0] = v185 * v10.f32[0];
  v192 = v9.f32[0] * v185;
  v9.f32[0] = v9.f32[0] * v186;
  v193 = 1.0 - (float)(v177 * (float)(v177 + v177));
  v194 = (float)(v165 - v110.f32[0]) * 0.5;
  v195 = (float)(v166 - v164) * 0.5;
  v196 = (float)(v167 - v99.f32[0]) * 0.5;
  v110.f32[0] = fabsf(v196 * (float)(v190 + v192))
              + (float)(fabsf(v194 * (float)((float)(1.0 - v187) - v188)) + fabsf(v195 * (float)(v189 - v9.f32[0])));
  v197 = fabsf(v196 * (float)(v10.f32[0] - v191))
       + (float)(fabsf(v194 * (float)(v189 + v9.f32[0])) + fabsf(v195 * (float)(v193 - v188)));
  v198 = fabsf(v196 * (float)(v193 - v187))
       + (float)(fabsf(v194 * (float)(v190 - v192)) + fabsf(v195 * (float)(v191 + v10.f32[0])));
  v199 = v183 - v110.f32[0];
  v200 = v100.f32[0] - v197;
  v201 = v184 - v198;
  v202 = v183 + v110.f32[0];
  v203 = v100.f32[0] + v197;
  v204 = v184 + v198;
  v205 = (float)((float)((float)(v183 + v110.f32[0]) - (float)(v183 - v110.f32[0])) * 0.5) + a9;
  v206 = (float)((float)((float)(v100.f32[0] + v197) - (float)(v100.f32[0] - v197)) * 0.5) + a9;
  v207 = (float)((float)(v204 - v201) * 0.5) + a9;
  v208 = a2[2].f32[0] * -2.0;
  v209 = a2[2].f32[1] * -2.0;
  v210 = a2[3].f32[0] * -2.0;
  v211 = a2[1].f32[0];
  v99.i32[0] = a2[1].i32[1];
  v212 = (float)(v99.f32[0] * v99.f32[0]) + -0.5;
  v110.i32[0] = a2->i32[0];
  v100.i32[0] = a2->i32[1];
  v213 = (float)((float)(v209 * v100.f32[0]) + (float)(a2->f32[0] * v208)) + (float)(v211 * v210);
  *(float *)v91.i32 = -v211;
  v10.f32[0] = -a2->f32[0];
  v9.f32[0] = -v100.f32[0];
  v214 = (float)((float)(v199 + v202) * 0.5) + (float)((float)(v199 + v202) * 0.5);
  v215 = (float)((float)(v200 + v203) * 0.5) + (float)((float)(v200 + v203) * 0.5);
  v216 = (float)((float)(v201 + v204) * 0.5) + (float)((float)(v201 + v204) * 0.5);
  v217 = (float)((float)-(float)(v100.f32[0] * v215) - (float)(a2->f32[0] * v214)) - (float)(v211 * v216);
  v218 = (float)((float)((float)(v208 * v212)
                       - (float)((float)((float)(v100.f32[0] * v210) - (float)(v211 * v209)) * v99.f32[0]))
               + (float)(a2->f32[0] * v213))
       + (float)((float)((float)(v99.f32[0] * (float)((float)(v211 * v215) - (float)(v100.f32[0] * v216)))
                       + (float)(v214 * v212))
               - (float)(a2->f32[0] * v217));
  v219 = (float)((float)((float)(v209 * v212)
                       - (float)((float)((float)(v211 * v208) - (float)(a2->f32[0] * v210)) * v99.f32[0]))
               + (float)(v100.f32[0] * v213))
       + (float)((float)((float)(v99.f32[0] * (float)((float)(a2->f32[0] * v216) - (float)(v211 * v214)))
                       + (float)(v215 * v212))
               - (float)(v100.f32[0] * v217));
  v220 = (float)((float)((float)(v210 * v212)
                       - (float)((float)((float)(a2->f32[0] * v209) - (float)(v100.f32[0] * v208)) * v99.f32[0]))
               + (float)(v211 * v213))
       + (float)((float)((float)(v99.f32[0] * (float)((float)(v100.f32[0] * v214) - (float)(a2->f32[0] * v215)))
                       + (float)(v216 * v212))
               - (float)(v211 * v217));
  v365 = __PAIR64__(LODWORD(v219), LODWORD(v218));
  v366 = v220;
  v221 = a5->f32[0] + a5->f32[0];
  v222 = a5->f32[1] + a5->f32[1];
  v223 = a5[1].f32[0] + a5[1].f32[0];
  v224 = (float)((float)-(float)(v100.f32[0] * v222) - (float)(v110.f32[0] * v221)) - (float)(v211 * v223);
  v225 = (float)((float)(v99.f32[0] * (float)((float)(v211 * v222) - (float)(v100.f32[0] * v223))) + (float)(v221 * v212))
       - (float)(v110.f32[0] * v224);
  v226 = (float)((float)(v99.f32[0] * (float)((float)(v110.f32[0] * v223) - (float)(v211 * v221))) + (float)(v222 * v212))
       - (float)(v100.f32[0] * v224);
  v227 = (float)((float)(v99.f32[0] * (float)((float)(v100.f32[0] * v221) - (float)(v110.f32[0] * v222)))
               + (float)(v223 * v212))
       - (float)(v211 * v224);
  v363.f32[0] = v225;
  v363.f32[1] = v226;
  v364 = v227;
  v228 = (float32x2_t)vdup_lane_s32(*(int32x2_t *)v99.f32, 0);
  v10.f32[0] = v10.f32[0] - v110.f32[0];
  v229 = (float32x2_t)vdup_lane_s32(*(int32x2_t *)v10.f32, 0);
  v100.f32[0] = (float)-v100.f32[0] - v100.f32[0];
  v230 = (float)-v211 - v211;
  v110.f32[0] = -(float)(v110.f32[0] * v10.f32[0]);
  v231 = vmul_n_f32((float32x2_t)vdup_lane_s32(*(int32x2_t *)v9.f32, 0), v100.f32[0]);
  v232 = vmul_n_f32((float32x2_t)vdup_lane_s32(v91, 0), v230);
  v233 = vmul_n_f32(v229, v9.f32[0]);
  v234 = vmul_n_f32(v229, *(float *)v91.i32);
  v235 = vmul_n_f32(v228, v10.f32[0]);
  v236 = vmul_n_f32((float32x2_t)vdup_lane_s32(*(int32x2_t *)v100.f32, 0), *(float *)v91.i32);
  v237 = vmul_n_f32(v228, v100.f32[0]);
  v238 = vmul_n_f32(v228, v230);
  v239 = vsub_f32(v355, (float32x2_t)vdup_lane_s32(*(int32x2_t *)v110.f32, 0));
  v240 = vsub_f32(v234, v237).f32[0];
  v241 = vadd_f32(v235, v236).f32[0];
  v237.f32[0] = vmuls_lane_f32(v207, vadd_f32(v234, v237), 1);
  v236.f32[0] = v207 * vsub_f32(v236, v235).f32[0];
  v242 = v207 * vsub_f32(v239, v231).f32[0];
  v231.f32[0] = fabsf(v237.f32[0])
              + (float)(fabsf(v205 * (float)((float)(1.0 - v231.f32[1]) - v232.f32[1]))
                      + fabsf(vmuls_lane_f32(v206, vsub_f32(v233, v238), 1)));
  v243 = fabsf(v236.f32[0])
       + (float)(fabsf(v205 * vadd_f32(v233, v238).f32[0]) + fabsf(v206 * vsub_f32(v239, v232).f32[0]));
  v244 = fabsf(v242) + (float)(fabsf(v205 * v240) + fabsf(v206 * v241));
  v361.f32[0] = (float)((float)(v218 + v231.f32[0]) + (float)(v231.f32[0] - v218)) * 0.5;
  v361.f32[1] = (float)((float)(v219 + v243) + (float)(v243 - v219)) * 0.5;
  v362 = (float)((float)(v220 + v244) + (float)(v244 - v220)) * 0.5;
  HeightFieldTraceSegmentSweepHelper::HeightFieldTraceSegmentSweepHelper((uint64_t)v358, (uint64_t)&v367, &v361);
  v245 = v358[0];
  v246 = (float *)v358[1];
  v395 = 0;
  if (physx::Gu::intersectRayAABB2(&v359, &v360, (float32x2_t *)&v365, &v363, (float *)&v395 + 1, (float *)&v395, *(float *)&a8))
  {
    v247 = 0;
    v248 = *(_QWORD *)(v245 + 16);
    v377[0] = 0;
    v378 = v245;
    v379 = v248;
    v394 = 0;
    v249 = v218 + (float)(v225 * *(float *)&a8);
    v250 = v219 + (float)(v226 * *(float *)&a8);
    if (v250 >= v219)
      v251 = v219;
    else
      v251 = v219 + (float)(v226 * *(float *)&a8);
    v252 = v246[1];
    v253 = *(float *)(v245 + 4);
    v254 = (float)(v251 - v252) * v253;
    if (v250 <= v219)
      v250 = v219;
    v383 = v254;
    v384 = (float)(v250 + v252) * v253;
    if (v249 >= v218)
      v255 = v218;
    else
      v255 = v218 + (float)(v225 * *(float *)&a8);
    v256 = *v246;
    v257 = v255 - *v246;
    v258 = *(float *)v245;
    v259 = *(float *)v245 * v257;
    v260 = *(_DWORD *)(v248 + 56);
    if (v259 >= 0.0)
    {
      v247 = v260 - 2;
      if (v259 <= (float)(v260 - 2))
        v247 = vcvtms_u32_f32(v259);
    }
    v261 = v220 + (float)(v227 * *(float *)&a8);
    v385 = v247;
    if (v249 <= v218)
      v249 = v218;
    v262 = v258 * (float)(v249 + v256);
    if (v262 >= 0.0)
    {
      v263 = v260 - 1;
      if (v262 <= (float)(v260 - 1))
        v263 = vcvtps_u32_f32(v262);
    }
    else
    {
      v263 = 0;
    }
    v386 = v263;
    if (v261 >= v220)
      v264 = v220;
    else
      v264 = v220 + (float)(v227 * *(float *)&a8);
    v265 = v246[2];
    v266 = *(float *)(v245 + 8);
    v267 = v266 * (float)(v264 - v265);
    v268 = *(_DWORD *)(v248 + 60);
    if (v267 >= 0.0)
    {
      v269 = v268 - 2;
      if (v267 <= (float)(v268 - 2))
        v269 = vcvtms_u32_f32(v267);
    }
    else
    {
      v269 = 0;
    }
    v387 = v269;
    if (v261 <= v220)
      v261 = v220;
    v270 = v266 * (float)(v261 + v265);
    v271 = v268 - 1;
    if (v270 >= 0.0)
    {
      v272 = v268 - 1;
      if (v270 <= (float)v271)
        v272 = vcvtps_u32_f32(v270);
    }
    else
    {
      v272 = 0;
    }
    v388 = v272;
    v273 = v256 * v258;
    v274 = ceilf(v256 * v258);
    v275 = v265 * v266;
    v276 = ceilf(v265 * v266);
    v381 = vcvtps_s32_f32(v273) + 1;
    v382 = vcvtps_s32_f32(v275) + 1;
    v277 = (float)(v218 + (float)(v225 * *((float *)&v395 + 1))) * v258;
    v278 = 0.0000001 - v274;
    if (v277 > (float)(0.0000001 - v274))
      v278 = (float)(v218 + (float)(v225 * *((float *)&v395 + 1))) * v258;
    if (v278 >= (float)(v274 + (float)((float)(v260 - 1) * 1.0)))
      v279 = v274 + (float)((float)(v260 - 1) * 1.0);
    else
      v279 = v278;
    v280 = (float)(v220 + (float)(v227 * *((float *)&v395 + 1))) * v266;
    v281 = 0.0000001 - v276;
    if (v280 > (float)(0.0000001 - v276))
      v281 = (float)(v220 + (float)(v227 * *((float *)&v395 + 1))) * v266;
    v282 = v276 + (float)((float)v271 * 1.0);
    if (v281 < v282)
      v282 = v281;
    v283 = (float)(v218 + (float)(v225 * *(float *)&v395)) * v258;
    v284 = (float)(v220 + (float)(v227 * *(float *)&v395)) * v266;
    if ((float)(v283 - v277) < 0.0)
      v285 = -1.0;
    else
      v285 = 1.0;
    if ((float)(v284 - v280) < 0.0)
      v286 = -1.0;
    else
      v286 = 1.0;
    if (vabds_f32(v283, v277) >= 1.0e-10)
      v287 = v283 - v277;
    else
      v287 = v285 * 1.0e-10;
    if (vabds_f32(v284, v280) >= 1.0e-10)
      v288 = v284 - v280;
    else
      v288 = v286 * 1.0e-10;
    v289 = floorf(v279);
    v290 = ceilf(v279);
    v291 = floorf(v282);
    v292 = ceilf(v282);
    if (v288 <= 0.0)
      v293 = v292;
    else
      v293 = v291;
    if (v287 <= 0.0)
      v294 = v290;
    else
      v294 = v289;
    if (v287 <= 0.0)
    {
      if (v289 == v279)
        v295 = v289 + -1.0;
      else
        v295 = v289;
    }
    else if (v290 == v279)
    {
      v295 = v290 + 1.0;
    }
    else
    {
      v295 = v290;
    }
    if (v288 <= 0.0)
    {
      if (v291 == v282)
        v296 = v291 + -1.0;
      else
        v296 = v291;
    }
    else if (v292 == v282)
    {
      v296 = v292 + 1.0;
    }
    else
    {
      v296 = v292;
    }
    v345 = a5;
    v297 = (float)(v295 - v277) / v287;
    v298 = (float)(v296 - v280) / v288;
    if (v297 < 0.0)
      v297 = fabsf(0.0000001 / v287);
    v346 = a6;
    v299 = (int)v294;
    v300 = (int)v293;
    v301 = (int)v285;
    v302 = (int)v286;
    if (v298 < 0.0)
      v298 = fabsf(0.0000001 / v288);
    v349 = 1.0 / fabsf(v287);
    v303 = fabsf(v288);
    v348 = v268;
    v352 = v276 + (float)v268;
    v304 = v274 + (float)v260;
    v305 = 0.0 - v276;
    v306 = 0.0 - v274;
    if (v301 >= 1)
      v307 = 0;
    else
      v307 = -1;
    if (v302 >= 1)
      v308 = 0;
    else
      v308 = -1;
    v354 = v308;
    v309 = 1.0 / v303;
    while (1)
    {
      if (v297 >= v298)
        v310 = v298;
      else
        v310 = v297;
      if (!v377[0])
      {
        v377[0] = 1;
        v380 = v396;
        v389 = v348;
        v390 = v307;
        v393 = xmmword_2261A9E10;
        v391 = v354;
        LODWORD(v392) = v299 - v381;
        v320 = v381 + v299;
        DWORD1(v392) = v381 + v299;
        DWORD2(v392) = v300 - v382;
        v321 = v382 + v300;
        HIDWORD(v392) = v382 + v300;
        if ((int)(v299 - v381) <= (int)(v381 + v299))
        {
          v322 = v299 - v381 + v307;
          v323 = v354;
          v324 = v307;
          do
          {
            if (v322 >= v385)
            {
              if (v322 >= v386)
                break;
              if (SDWORD2(v392) <= v321)
              {
                v325 = DWORD2(v392) + v323;
                do
                {
                  if (v325 >= v387)
                  {
                    if (v325 >= v388)
                      break;
                    if (!physx::Gu::HeightFieldTraceUtil::OverlapTraceSegment<CapsuleTraceSegmentReport>::testVertexIndex((uint64_t)v377, v325 + v322 * v389))goto LABEL_175;
                    v321 = HIDWORD(v392);
                    v323 = v391;
                  }
                  v317 = v325++ < v321 + v323;
                }
                while (v317);
                v320 = DWORD1(v392);
                v324 = v390;
              }
            }
            v317 = v322++ < (int)(v320 + v324);
          }
          while (v317);
          if (v394)
          {
            if (!(*(unsigned int (**)(_QWORD *))(*v380 + 16))(v380))
              goto LABEL_175;
            v394 = 0;
          }
        }
        goto LABEL_161;
      }
      v311 = v299 - v381;
      v312 = v381 + v299;
      LODWORD(v393) = v299 - v381;
      DWORD1(v393) = v381 + v299;
      v313 = v300 - v382;
      v314 = v382 + v300;
      DWORD2(v393) = v300 - v382;
      HIDWORD(v393) = v382 + v300;
      v315 = v392;
      if (v299 - v381 == (_DWORD)v392)
      {
        if (v313 == DWORD2(v392))
          goto LABEL_146;
        if (v311 <= v312)
        {
          if (v313 >= SDWORD2(v392))
            v313 = v382 + v300;
          v316 = v391 + v313;
          v317 = v391 + v313 >= v387 && v316 < v388;
          if (v317)
          {
            v318 = v390;
            v319 = v390 + v311;
            do
            {
              if (v319 >= v386)
                break;
              if (v319 >= v385)
              {
                if (!physx::Gu::HeightFieldTraceUtil::OverlapTraceSegment<CapsuleTraceSegmentReport>::testVertexIndex((uint64_t)v377, v316 + v389 * v319))goto LABEL_175;
                v318 = v390;
              }
              v317 = v319++ < v318 + v312;
            }
            while (v317);
          }
        }
      }
      else
      {
        if (v311 >= (int)v392)
          v315 = v381 + v299;
        else
          v315 = v299 - v381;
        if (v313 <= v314)
        {
LABEL_146:
          v326 = v390 + v315;
          if ((int)(v390 + v315) >= v385 && v326 < v386)
          {
            v328 = v391;
            v329 = v391 + v313;
            do
            {
              if (v329 >= v388)
                break;
              if (v329 >= v387)
              {
                if (!physx::Gu::HeightFieldTraceUtil::OverlapTraceSegment<CapsuleTraceSegmentReport>::testVertexIndex((uint64_t)v377, v329 + v389 * v326))goto LABEL_175;
                v328 = v391;
              }
              v317 = v329++ < v328 + v314;
            }
            while (v317);
          }
        }
      }
      if (v394)
      {
        if (!(*(unsigned int (**)(_QWORD *))(*v380 + 16))(v380))
          goto LABEL_175;
        v394 = 0;
      }
      v392 = v393;
LABEL_161:
      if (v297 >= v298)
      {
        v300 += v302;
        v332 = (float)(v300 + v302);
        if (v305 > v332 || v352 <= v332)
        {
LABEL_175:
          a5 = v345;
          a6 = v346;
          break;
        }
        v298 = v309 + v298;
      }
      else
      {
        v299 += v301;
        v330 = (float)(v299 + v301);
        if (v306 > v330 || v304 <= v330)
          goto LABEL_175;
        v297 = v349 + v297;
      }
      if (v310 >= 1.0001)
        goto LABEL_175;
    }
  }
  v334 = v398;
  if ((_BYTE)v398)
  {
    if (HIBYTE(v398))
    {
      if ((v397 & 0x200) == 0)
      {
        *(_DWORD *)(a6 + 16) = v421;
        *(_WORD *)(a6 + 20) = 1026;
        v335 = -a5[1].f32[0];
        *(float32x2_t *)(a6 + 36) = vneg_f32(*a5);
        *(float *)(a6 + 44) = v335;
        *(_DWORD *)(a6 + 48) = 0;
        return v334 != 0;
      }
      v343 = physx::Gu::computeConvex_HeightFieldMTD(v347);
      *(_DWORD *)(a6 + 16) = v421;
      *(_WORD *)(a6 + 20) = 1026;
      if ((v343 & 1) != 0)
      {
        *(_WORD *)(a6 + 20) = 1027;
        return v334 != 0;
      }
      *(_DWORD *)(a6 + 48) = 0;
      v342 = -a5[1].f32[0];
      *(float32x2_t *)(a6 + 36) = vneg_f32(*a5);
    }
    else
    {
      *(_OWORD *)a6 = v420;
      *(_DWORD *)(a6 + 16) = v421;
      *(_WORD *)(a6 + 20) = v422;
      *(_QWORD *)(a6 + 24) = v423;
      v337 = *((float *)&v424 + 1);
      v336 = v424;
      v338 = v425;
      v339 = v426;
      *(_DWORD *)(a6 + 52) = v427;
      *(_DWORD *)(a6 + 32) = v336;
      *(float *)(a6 + 36) = -v337;
      *(float *)(a6 + 40) = -*(float *)&v338;
      *(float *)(a6 + 44) = -*((float *)&v338 + 1);
      *(_DWORD *)(a6 + 48) = v339;
      v340 = sqrtf((float)((float)(*(float *)&v338 * *(float *)&v338) + (float)(v337 * v337))+ (float)(*((float *)&v338 + 1) * *((float *)&v338 + 1)));
      if (v340 <= 0.0)
        return v334 != 0;
      v341 = 1.0 / v340;
      *(float *)(a6 + 36) = v341 * (float)-v337;
      *(float *)(a6 + 40) = v341 * (float)-*(float *)&v338;
      v342 = v341 * (float)-*((float *)&v338 + 1);
    }
    *(float *)(a6 + 44) = v342;
  }
  return v334 != 0;
}

BOOL sweepBox_HeightFieldGeom(float32x2_t *a1, uint64_t a2, float a3, float a4, double a5, double a6, double a7, double a8, double a9, double a10, uint64_t a11, float *a12, uint64_t a13, float32x2_t *a14, uint64_t a15, __int16 *a16)
{
  int32x2_t v16;
  int32x2_t v17;
  int32x2_t v18;
  float32x2_t *v20;
  uint64_t v24;
  float32x2_t v25;
  float v26;
  float v27;
  float v28;
  float v29;
  float v30;
  float v31;
  float v32;
  float v33;
  float v34;
  float v35;
  float v36;
  float v37;
  unsigned int v38;
  __int128 v39;
  unsigned int v40;
  unsigned int v41;
  __int128 v42;
  float v43;
  float v44;
  float v45;
  float v46;
  float v47;
  float v48;
  __int128 v49;
  float32x2_t v50;
  float v51;
  int v57;
  float v58;
  float v59;
  float v60;
  float v61;
  float v62;
  float v63;
  float v64;
  float v65;
  float v66;
  float v67;
  float v68;
  float v69;
  float v70;
  float v71;
  float v72;
  float v73;
  float v74;
  float v75;
  float v76;
  float v77;
  float v78;
  float v79;
  float32x2_t v80;
  float32x2_t v81;
  float v82;
  float32x2_t v83;
  float32x2_t v84;
  float32x2_t v85;
  float32x2_t v86;
  float32x2_t v87;
  float32x2_t v88;
  float32x2_t v89;
  float32x2_t v90;
  float v91;
  uint64_t v92;
  float *v93;
  unsigned int v94;
  uint64_t v95;
  float v96;
  float v97;
  float v98;
  float v99;
  float v100;
  float v101;
  float v102;
  float v103;
  float v104;
  float v105;
  float v106;
  int v107;
  float v108;
  float v109;
  unsigned int v110;
  float v111;
  float v112;
  float v113;
  float v114;
  int v115;
  unsigned int v116;
  float v117;
  float v118;
  int v119;
  unsigned int v120;
  float v121;
  float v122;
  float v123;
  float v124;
  float v125;
  float v126;
  float v127;
  float v128;
  float v129;
  float v130;
  float v131;
  float v132;
  float v133;
  float v134;
  float v135;
  float v136;
  float v137;
  float v138;
  float v139;
  float v140;
  float v141;
  float v142;
  float v143;
  float v144;
  float v145;
  float v146;
  int v147;
  int v148;
  int v149;
  float v150;
  float v151;
  int v152;
  int v153;
  float v154;
  float v155;
  int v156;
  int v157;
  int v158;
  int v159;
  unsigned int v160;
  signed int v161;
  BOOL v162;
  int v163;
  signed int v164;
  unsigned int v165;
  int v166;
  int v167;
  signed int v168;
  int v169;
  signed int v170;
  signed int v171;
  int v173;
  signed int v174;
  float v175;
  float v177;
  int v179;
  __int16 v180;
  float v181;
  float v182;
  float v183;
  float v184;
  float v185;
  float v186;
  float v187;
  float v188;
  float v189;
  float v190;
  float v191;
  float v192;
  float v193;
  float v194;
  float v195;
  float v196;
  float v197;
  float v198;
  float v199;
  float v200;
  float v201;
  float v202;
  float v203;
  float v204;
  float v205;
  float v206;
  float v207;
  float v208;
  float v209;
  float v210;
  uint64_t v212;
  float32x2_t *v213;
  int v214;
  float v215;
  float v216;
  float v217;
  float v218;
  int v219;
  int v220;
  int v221;
  _QWORD v222[2];
  float32x2_t v223;
  float32x2_t v224[2];
  float32x2_t v225;
  float v226;
  float32x2_t v227;
  float v228;
  float32x2_t v229;
  float v230;
  _QWORD v231[2];
  __int16 v232;
  __int16 v233;
  BOOL v234;
  BOOL v235;
  _OWORD *v236;
  uint64_t v237;
  _QWORD *v238;
  int32x2_t v239;
  float v240;
  float v241;
  float v242;
  uint64_t v243;
  float v244;
  int32x2_t v245;
  float v246;
  float32x2_t v247;
  float32x2_t *v248;
  _QWORD v249[2];
  float v250;
  float v251;
  float v252;
  int v253;
  char v254;
  __int128 v255;
  _OWORD v256[2];
  char v257[8];
  uint64_t v258;
  uint64_t v259;
  _QWORD *v260;
  unsigned int v261;
  unsigned int v262;
  float v263;
  float v264;
  signed int v265;
  signed int v266;
  signed int v267;
  signed int v268;
  int v269;
  int v270;
  int v271;
  __int128 v272;
  __int128 v273;
  int v274;
  float v275[6];

  v20 = a14;
  v24 = (uint64_t)a1;
  v25.i32[0] = *(_DWORD *)(a13 + 48);
  v26 = *(float *)(a13 + 52);
  v16.i32[0] = *(_DWORD *)(a13 + 56);
  v27 = (float)((float)((float)(fabsf(*(float *)(a13 + 12)) * v26) + (float)(fabsf(*(float *)a13) * v25.f32[0]))
              + (float)(fabsf(*(float *)(a13 + 24)) * *(float *)v16.i32))
      + a4;
  v28 = (float)((float)((float)(fabsf(*(float *)(a13 + 16)) * v26) + (float)(fabsf(*(float *)(a13 + 4)) * v25.f32[0]))
              + (float)(fabsf(*(float *)(a13 + 28)) * *(float *)v16.i32))
      + a4;
  v29 = (float)((float)((float)(fabsf(*(float *)(a13 + 20)) * v26) + (float)(fabsf(*(float *)(a13 + 8)) * v25.f32[0]))
              + (float)(fabsf(*(float *)(a13 + 32)) * *(float *)v16.i32))
      + a4;
  v30 = a12[4] * -2.0;
  v31 = a12[5] * -2.0;
  v32 = a12[6] * -2.0;
  v34 = a12[2];
  v33 = a12[3];
  v35 = (float)(v33 * v33) + -0.5;
  v36 = *a12;
  v37 = a12[1];
  *(float *)v17.i32 = (float)((float)(v31 * v37) + (float)(*a12 * v30)) + (float)(v34 * v32);
  *(float *)&v38 = (float)((float)(v30 * v35) - (float)((float)((float)(v37 * v32) - (float)(v34 * v31)) * v33))
                 + (float)(*a12 * *(float *)v17.i32);
  *(float *)&v39 = -*a12;
  *(float *)&v40 = (float)((float)(v31 * v35) - (float)((float)((float)(v34 * v30) - (float)(*a12 * v32)) * v33))
                 + (float)(v37 * *(float *)v17.i32);
  *(float *)&v41 = (float)((float)(v32 * v35) - (float)((float)((float)(*a12 * v31) - (float)(v37 * v30)) * v33))
                 + (float)(v34 * *(float *)v17.i32);
  *((float *)&v39 + 1) = -v37;
  *((float *)&v39 + 2) = -v34;
  *((float *)&v39 + 3) = v33;
  *(_QWORD *)&v42 = __PAIR64__(v40, v38);
  *((_QWORD *)&v42 + 1) = v41;
  v256[1] = v42;
  v43 = a14->f32[0];
  LODWORD(v42) = a14->i32[1];
  v44 = a14[1].f32[0];
  v45 = (float)(a14->f32[0] * a3) + (float)(a14->f32[0] * a3);
  v46 = (float)(*(float *)&v42 * a3) + (float)(*(float *)&v42 * a3);
  v47 = (float)(v44 * a3) + (float)(v44 * a3);
  v48 = (float)((float)-(float)(v37 * v46) - (float)(v36 * v45)) - (float)(v34 * v47);
  *(_QWORD *)&v49 = __PAIR64__(LODWORD(v26), v25.u32[0]);
  *((_QWORD *)&v49 + 1) = v16.u32[0];
  v253 = 3;
  v254 = 0;
  v249[0] = 0;
  v249[1] = 0;
  v25.f32[1] = v26;
  v255 = v49;
  v256[0] = v39;
  v50 = vpmin_f32((float32x2_t)vdup_lane_s32(v16, 0), v25);
  v50.f32[0] = vpmin_f32(v50, v50).f32[0];
  v250 = 0.15 * v50.f32[0];
  v251 = 0.05 * v50.f32[0];
  v252 = 0.05 * v50.f32[0];
  *(_DWORD *)(a15 + 48) = 2139095039;
  v247 = a1[1];
  v248 = a1;
  v51 = a1[3].f32[0];
  __asm { FMOV            V17.2S, #1.0 }
  v245 = vrev64_s32((int32x2_t)vdiv_f32(_D17, a1[2]));
  v246 = 1.0 / v51;
  v57 = a1[3].i8[4] & 2 | *a16 & 0x80;
  v232 = *a16;
  v233 = 0;
  v234 = v57 != 0;
  v235 = (v232 & 0x40) != 0;
  v231[0] = &off_24ED91B38;
  v231[1] = &v245;
  v236 = v256;
  v237 = a2;
  v238 = v249;
  v240 = (float)((float)(v33 * (float)((float)(v34 * v46) - (float)(v37 * v47))) + (float)(v45 * v35))
       - (float)(v36 * v48);
  v241 = (float)((float)(v33 * (float)((float)(v36 * v47) - (float)(v34 * v45))) + (float)(v46 * v35))
       - (float)(v37 * v48);
  v242 = (float)((float)(v33 * (float)((float)(v37 * v45) - (float)(v36 * v46))) + (float)(v47 * v35))
       - (float)(v34 * v48);
  v243 = a15;
  v244 = a4;
  v239 = vdup_n_s32(0x7F7FFFFFu);
  *(_DWORD *)(a15 + 16) = -1;
  v58 = *(float *)(a2 + 16) * -2.0;
  v59 = *(float *)(a2 + 20) * -2.0;
  v60 = *(float *)(a2 + 24) * -2.0;
  v61 = *(float *)(a2 + 8);
  v17.i32[0] = *(_DWORD *)(a2 + 12);
  v62 = (float)(*(float *)v17.i32 * *(float *)v17.i32) + -0.5;
  LODWORD(a10) = *(_DWORD *)a2;
  LODWORD(v39) = *(_DWORD *)(a2 + 4);
  v63 = (float)((float)(v59 * *(float *)&v39) + (float)(*(float *)a2 * v58)) + (float)(v61 * v60);
  *(float *)&a8 = -v61;
  v64 = (float)((float)(v58 * v62)
              - (float)((float)((float)(*(float *)&v39 * v60) - (float)(v61 * v59)) * *(float *)v17.i32))
      + (float)(*(float *)a2 * v63);
  v65 = -*(float *)a2;
  *(float *)&v49 = (float)((float)(v59 * v62)
                         - (float)((float)((float)(v61 * v58) - (float)(*(float *)a2 * v60)) * *(float *)v17.i32))
                 + (float)(*(float *)&v39 * v63);
  *(float *)v18.i32 = -*(float *)&v39;
  v66 = (float)((float)(v60 * v62)
              - (float)((float)((float)(*(float *)a2 * v59) - (float)(*(float *)&v39 * v58)) * *(float *)v17.i32))
      + (float)(v61 * v63);
  v67 = *(float *)(a13 + 36) + *(float *)(a13 + 36);
  v68 = *(float *)(a13 + 40) + *(float *)(a13 + 40);
  v69 = *(float *)(a13 + 44) + *(float *)(a13 + 44);
  v70 = (float)((float)-(float)(*(float *)&v39 * v68) - (float)(*(float *)a2 * v67)) - (float)(v61 * v69);
  v71 = v64
      + (float)((float)((float)(*(float *)v17.i32 * (float)((float)(v61 * v68) - (float)(*(float *)&v39 * v69)))
                      + (float)(v67 * v62))
              - (float)(*(float *)a2 * v70));
  v72 = *(float *)&v49
      + (float)((float)((float)(*(float *)v17.i32 * (float)((float)(*(float *)a2 * v69) - (float)(v61 * v67)))
                      + (float)(v68 * v62))
              - (float)(*(float *)&v39 * v70));
  v73 = v66
      + (float)((float)((float)(*(float *)v17.i32 * (float)((float)(*(float *)&v39 * v67) - (float)(*(float *)a2 * v68)))
                      + (float)(v69 * v62))
              - (float)(v61 * v70));
  v229.f32[0] = v71;
  v229.f32[1] = v72;
  v230 = v73;
  v74 = v43 + v43;
  *(float *)&v42 = *(float *)&v42 + *(float *)&v42;
  v75 = v44 + v44;
  v76 = (float)((float)-(float)(*(float *)&v39 * *(float *)&v42) - (float)(*(float *)&a10 * v74)) - (float)(v61 * v75);
  v77 = (float)((float)(*(float *)v17.i32 * (float)((float)(*(float *)&v42 * v61) - (float)(*(float *)&v39 * v75)))
              + (float)(v74 * v62))
      - (float)(*(float *)&a10 * v76);
  v78 = (float)((float)(*(float *)v17.i32 * (float)((float)(v75 * *(float *)&a10) - (float)(v61 * v74)))
              + (float)(*(float *)&v42 * v62))
      - (float)(*(float *)&v39 * v76);
  v79 = (float)((float)(*(float *)v17.i32
                      * (float)((float)(v74 * *(float *)&v39) - (float)(*(float *)&a10 * *(float *)&v42)))
              + (float)(v75 * v62))
      - (float)(v61 * v76);
  v227.f32[0] = v77;
  v227.f32[1] = v78;
  v80 = (float32x2_t)vdup_lane_s32(v17, 0);
  *(float *)v17.i32 = v65 - *(float *)&a10;
  v81 = (float32x2_t)vdup_lane_s32(v17, 0);
  *(float *)&v39 = (float)-*(float *)&v39 - *(float *)&v39;
  v228 = v79;
  v82 = (float)-v61 - v61;
  *(float *)&a10 = -(float)(*(float *)&a10 * *(float *)v17.i32);
  v83 = vmul_n_f32((float32x2_t)vdup_lane_s32(v18, 0), *(float *)&v39);
  *(float32x2_t *)&v42 = vmul_n_f32((float32x2_t)vdup_lane_s32(*(int32x2_t *)&a8, 0), v82);
  v84 = vmul_n_f32(v81, *(float *)v18.i32);
  v85 = vmul_n_f32(v81, *(float *)&a8);
  v86 = vmul_n_f32(v80, *(float *)v17.i32);
  v87 = vmul_n_f32((float32x2_t)vdup_lane_s32(*(int32x2_t *)&v39, 0), *(float *)&a8);
  *(float32x2_t *)&v39 = vmul_n_f32(v80, *(float *)&v39);
  v88 = vmul_n_f32(v80, v82);
  v89 = vsub_f32(_D17, (float32x2_t)vdup_lane_s32(*(int32x2_t *)&a10, 0));
  _D17.f32[0] = vadd_f32(v84, v88).f32[0];
  v90 = vsub_f32(v84, v88);
  v84.f32[0] = vsub_f32(v89, *(float32x2_t *)&v42).f32[0];
  v89.f32[0] = vsub_f32(v89, v83).f32[0];
  v83.f32[0] = fabsf(vmuls_lane_f32(v29, vadd_f32(v85, *(float32x2_t *)&v39), 1))
             + (float)(fabsf(v27 * (float)((float)(1.0 - v83.f32[1]) - *((float *)&v42 + 1)))
                     + fabsf(vmuls_lane_f32(v28, v90, 1)));
  *(float *)&v42 = fabsf(v29 * vsub_f32(v87, v86).f32[0]) + (float)(fabsf(v27 * _D17.f32[0]) + fabsf(v28 * v84.f32[0]));
  v91 = fabsf(v29 * v89.f32[0])
      + (float)(fabsf(v27 * vsub_f32(v85, *(float32x2_t *)&v39).f32[0]) + fabsf(v28 * vadd_f32(v86, v87).f32[0]));
  v225.f32[0] = (float)((float)(v71 + v83.f32[0]) + (float)(v83.f32[0] - v71)) * 0.5;
  v225.f32[1] = (float)((float)(*(float *)&v42 + v72) + (float)(*(float *)&v42 - v72)) * 0.5;
  v226 = (float)((float)(v73 + v91) + (float)(v91 - v73)) * 0.5;
  HeightFieldTraceSegmentSweepHelper::HeightFieldTraceSegmentSweepHelper((uint64_t)v222, (uint64_t)&v245, &v225);
  v92 = v222[0];
  v93 = (float *)v222[1];
  *(_QWORD *)v275 = 0;
  if (physx::Gu::intersectRayAABB2(&v223, v224, &v229, &v227, &v275[1], v275, a3))
  {
    v94 = 0;
    v95 = *(_QWORD *)(v92 + 16);
    v257[0] = 0;
    v258 = v92;
    v259 = v95;
    v274 = 0;
    v96 = (float)(v77 * a3) + v71;
    v97 = (float)(v78 * a3) + v72;
    if (v97 >= v72)
      v98 = v72;
    else
      v98 = (float)(v78 * a3) + v72;
    v99 = v93[1];
    v100 = *(float *)(v92 + 4);
    v101 = (float)(v98 - v99) * v100;
    if (v97 <= v72)
      v97 = v72;
    v263 = v101;
    v264 = (float)(v97 + v99) * v100;
    if (v96 >= v71)
      v102 = v71;
    else
      v102 = (float)(v77 * a3) + v71;
    v103 = *v93;
    v104 = v102 - *v93;
    v105 = *(float *)v92;
    v106 = *(float *)v92 * v104;
    v107 = *(_DWORD *)(v95 + 56);
    if (v106 >= 0.0)
    {
      v94 = v107 - 2;
      if (v106 <= (float)(v107 - 2))
        v94 = vcvtms_u32_f32(v106);
    }
    v108 = (float)(v79 * a3) + v73;
    v265 = v94;
    if (v96 <= v71)
      v96 = v71;
    v109 = v105 * (float)(v96 + v103);
    if (v109 >= 0.0)
    {
      v110 = v107 - 1;
      if (v109 <= (float)(v107 - 1))
        v110 = vcvtps_u32_f32(v109);
    }
    else
    {
      v110 = 0;
    }
    v266 = v110;
    if (v108 >= v73)
      v111 = v73;
    else
      v111 = (float)(v79 * a3) + v73;
    v112 = v93[2];
    v113 = *(float *)(v92 + 8);
    v114 = v113 * (float)(v111 - v112);
    v115 = *(_DWORD *)(v95 + 60);
    if (v114 >= 0.0)
    {
      v116 = v115 - 2;
      if (v114 <= (float)(v115 - 2))
        v116 = vcvtms_u32_f32(v114);
    }
    else
    {
      v116 = 0;
    }
    v117 = v71 + (float)(v77 * v275[1]);
    v267 = v116;
    if (v108 <= v73)
      v108 = v73;
    v118 = v113 * (float)(v108 + v112);
    v119 = v115 - 1;
    if (v118 >= 0.0)
    {
      v120 = v115 - 1;
      if (v118 <= (float)v119)
        v120 = vcvtps_u32_f32(v118);
    }
    else
    {
      v120 = 0;
    }
    v268 = v120;
    v121 = v103 * v105;
    v122 = ceilf(v103 * v105);
    v123 = v112 * v113;
    v124 = ceilf(v112 * v113);
    v261 = vcvtps_s32_f32(v121) + 1;
    v262 = vcvtps_s32_f32(v123) + 1;
    v125 = v117 * v105;
    v126 = 0.0000001 - v122;
    if ((float)(v117 * v105) > (float)(0.0000001 - v122))
      v126 = v117 * v105;
    if (v126 >= (float)(v122 + (float)((float)(v107 - 1) * 1.0)))
      v127 = v122 + (float)((float)(v107 - 1) * 1.0);
    else
      v127 = v126;
    v128 = (float)(v73 + (float)(v79 * v275[1])) * v113;
    v129 = 0.0000001 - v124;
    if (v128 > (float)(0.0000001 - v124))
      v129 = (float)(v73 + (float)(v79 * v275[1])) * v113;
    v130 = v124 + (float)((float)v119 * 1.0);
    if (v129 < v130)
      v130 = v129;
    v131 = (float)(v71 + (float)(v77 * v275[0])) * v105;
    v132 = (float)(v73 + (float)(v79 * v275[0])) * v113;
    if ((float)(v131 - v125) < 0.0)
      v133 = -1.0;
    else
      v133 = 1.0;
    if ((float)(v132 - v128) < 0.0)
      v134 = -1.0;
    else
      v134 = 1.0;
    if (vabds_f32(v131, v125) >= 1.0e-10)
      v135 = v131 - v125;
    else
      v135 = v133 * 1.0e-10;
    if (vabds_f32(v132, v128) >= 1.0e-10)
      v136 = v132 - v128;
    else
      v136 = v134 * 1.0e-10;
    v137 = floorf(v127);
    v138 = ceilf(v127);
    v139 = floorf(v130);
    v140 = ceilf(v130);
    if (v136 <= 0.0)
      v141 = v140;
    else
      v141 = v139;
    if (v135 <= 0.0)
      v142 = v138;
    else
      v142 = v137;
    if (v135 <= 0.0)
    {
      if (v137 == v127)
        v143 = v137 + -1.0;
      else
        v143 = v137;
    }
    else if (v138 == v127)
    {
      v143 = v138 + 1.0;
    }
    else
    {
      v143 = v138;
    }
    if (v136 <= 0.0)
    {
      if (v139 == v130)
        v144 = v139 + -1.0;
      else
        v144 = v139;
    }
    else if (v140 == v130)
    {
      v144 = v140 + 1.0;
    }
    else
    {
      v144 = v140;
    }
    v213 = v20;
    v145 = (float)(v143 - v125) / v135;
    v146 = (float)(v144 - v128) / v136;
    if (v145 < 0.0)
      v145 = fabsf(0.0000001 / v135);
    v212 = v24;
    v147 = (int)v142;
    v148 = (int)v141;
    v149 = (int)v134;
    if (v146 < 0.0)
      v146 = fabsf(0.0000001 / v136);
    v215 = 1.0 / fabsf(v135);
    v150 = fabsf(v136);
    v214 = v115;
    v217 = v122 + (float)v107;
    v218 = v124 + (float)v115;
    v216 = 0.0 - v124;
    v151 = 0.0 - v122;
    if ((int)v133 >= 1)
      v152 = 0;
    else
      v152 = -1;
    v221 = v152;
    if (v149 >= 1)
      v153 = 0;
    else
      v153 = -1;
    v219 = (int)v133;
    v220 = v153;
    v154 = 1.0 / v150;
    while (1)
    {
      if (v145 >= v146)
        v155 = v146;
      else
        v155 = v145;
      if (!v257[0])
      {
        v257[0] = 1;
        v260 = v231;
        v269 = v214;
        v270 = v221;
        v273 = xmmword_2261A9E10;
        v271 = v220;
        LODWORD(v272) = v147 - v261;
        v165 = v261 + v147;
        DWORD1(v272) = v261 + v147;
        DWORD2(v272) = v148 - v262;
        v166 = v262 + v148;
        HIDWORD(v272) = v262 + v148;
        if ((int)(v147 - v261) <= (int)(v261 + v147))
        {
          v167 = v221;
          v168 = v147 - v261 + v221;
          v169 = v220;
          do
          {
            if (v168 >= v265)
            {
              if (v168 >= v266)
                break;
              if (SDWORD2(v272) <= v166)
              {
                v170 = DWORD2(v272) + v169;
                do
                {
                  if (v170 >= v267)
                  {
                    if (v170 >= v268)
                      break;
                    if (!physx::Gu::HeightFieldTraceUtil::OverlapTraceSegment<CapsuleTraceSegmentReport>::testVertexIndex((uint64_t)v257, v170 + v168 * v269))goto LABEL_154;
                    v166 = HIDWORD(v272);
                    v169 = v271;
                  }
                  v162 = v170++ < v166 + v169;
                }
                while (v162);
                v165 = DWORD1(v272);
                v167 = v270;
              }
            }
            v162 = v168++ < (int)(v165 + v167);
          }
          while (v162);
          if (v274)
          {
            if (!(*(unsigned int (**)(_QWORD *))(*v260 + 16))(v260))
              goto LABEL_154;
            v274 = 0;
          }
        }
        goto LABEL_140;
      }
      v156 = v147 - v261;
      v157 = v261 + v147;
      LODWORD(v273) = v147 - v261;
      DWORD1(v273) = v261 + v147;
      v158 = v148 - v262;
      v159 = v262 + v148;
      DWORD2(v273) = v148 - v262;
      HIDWORD(v273) = v262 + v148;
      v160 = v272;
      if (v147 - v261 == (_DWORD)v272)
      {
        if (v158 == DWORD2(v272))
          goto LABEL_125;
        if (v156 <= v157)
        {
          if (v158 >= SDWORD2(v272))
            v158 = v262 + v148;
          v161 = v271 + v158;
          v162 = v271 + v158 >= v267 && v161 < v268;
          if (v162)
          {
            v163 = v270;
            v164 = v270 + v156;
            do
            {
              if (v164 >= v266)
                break;
              if (v164 >= v265)
              {
                if (!physx::Gu::HeightFieldTraceUtil::OverlapTraceSegment<CapsuleTraceSegmentReport>::testVertexIndex((uint64_t)v257, v161 + v269 * v164))goto LABEL_154;
                v163 = v270;
              }
              v162 = v164++ < v163 + v157;
            }
            while (v162);
          }
        }
      }
      else
      {
        if (v156 >= (int)v272)
          v160 = v261 + v147;
        else
          v160 = v147 - v261;
        if (v158 <= v159)
        {
LABEL_125:
          v171 = v270 + v160;
          if ((int)(v270 + v160) >= v265 && v171 < v266)
          {
            v173 = v271;
            v174 = v271 + v158;
            do
            {
              if (v174 >= v268)
                break;
              if (v174 >= v267)
              {
                if (!physx::Gu::HeightFieldTraceUtil::OverlapTraceSegment<CapsuleTraceSegmentReport>::testVertexIndex((uint64_t)v257, v174 + v269 * v171))goto LABEL_154;
                v173 = v271;
              }
              v162 = v174++ < v173 + v159;
            }
            while (v162);
          }
        }
      }
      if (v274)
      {
        if (!(*(unsigned int (**)(_QWORD *))(*v260 + 16))(v260))
          goto LABEL_154;
        v274 = 0;
      }
      v272 = v273;
LABEL_140:
      if (v145 >= v146)
      {
        v148 += v149;
        v177 = (float)(v148 + v149);
        if (v216 > v177 || v218 <= v177)
        {
LABEL_154:
          v24 = v212;
          v20 = v213;
          break;
        }
        v146 = v154 + v146;
      }
      else
      {
        v147 += v219;
        v175 = (float)(v147 + v219);
        if (v151 > v175 || v217 <= v175)
          goto LABEL_154;
        v145 = v215 + v145;
      }
      if (v155 >= 1.0001)
        goto LABEL_154;
    }
  }
  v179 = v233;
  if ((_BYTE)v233)
  {
    if (!HIBYTE(v233))
    {
      v182 = *(float *)(a15 + 36);
      v183 = *(float *)(a15 + 40);
      v184 = *(float *)(a15 + 44);
      v185 = (float)((float)(v183 * v183) + (float)(v182 * v182)) + (float)(v184 * v184);
      v186 = 0.0;
      v187 = 0.0;
      v188 = 0.0;
      if (v185 > 0.0)
      {
        v189 = 1.0 / sqrtf(v185);
        v186 = v182 * v189;
        v187 = v183 * v189;
        v188 = v184 * v189;
      }
      if ((float)((float)((float)(v187 * v241) + (float)(v186 * v240)) + (float)(v188 * v242)) > 0.0)
      {
        v186 = -v186;
        v187 = -v187;
        v188 = -v188;
      }
      *(float *)(a15 + 48) = *(float *)(a15 + 48) * a3;
      v190 = v186 + v186;
      v191 = v187 + v187;
      v192 = v188 + v188;
      v194 = a12[2];
      v193 = a12[3];
      v195 = (float)(v193 * v193) + -0.5;
      v196 = *a12;
      v197 = a12[1];
      v198 = (float)((float)(v197 * v191) + (float)(*a12 * v190)) + (float)(v194 * v192);
      v199 = (float)((float)(v193 * (float)((float)(v197 * v192) - (float)(v194 * v191))) + (float)(v190 * v195))
           + (float)(*a12 * v198);
      v200 = (float)((float)(v193 * (float)((float)(v194 * v190) - (float)(*a12 * v192))) + (float)(v191 * v195))
           + (float)(v197 * v198);
      v201 = (float)((float)(v193 * (float)((float)(*a12 * v191) - (float)(v197 * v190))) + (float)(v192 * v195))
           + (float)(v194 * v198);
      *(float *)(a15 + 36) = v199;
      *(float *)(a15 + 40) = v200;
      *(float *)(a15 + 44) = v201;
      v202 = *(float *)(a15 + 24) + *(float *)(a15 + 24);
      v203 = *(float *)(a15 + 28) + *(float *)(a15 + 28);
      v204 = *(float *)(a15 + 32) + *(float *)(a15 + 32);
      v205 = (float)((float)(v197 * v203) + (float)(v196 * v202)) + (float)(v194 * v204);
      v206 = (float)((float)(v193 * (float)((float)(v197 * v204) - (float)(v194 * v203))) + (float)(v202 * v195))
           + (float)(v196 * v205);
      v207 = (float)((float)(v193 * (float)((float)(v194 * v202) - (float)(v196 * v204))) + (float)(v203 * v195))
           + (float)(v197 * v205);
      v208 = (float)((float)(v193 * (float)((float)(v196 * v203) - (float)(v197 * v202))) + (float)(v204 * v195))
           + (float)(v194 * v205);
      v209 = a12[5] + v207;
      v210 = a12[6] + v208;
      *(float *)(a15 + 24) = a12[4] + v206;
      *(float *)(a15 + 28) = v209;
      *(float *)(a15 + 32) = v210;
      v180 = 1027;
      goto LABEL_166;
    }
    *(_WORD *)(a15 + 20) = 1026;
    if ((v232 & 0x200) != 0 && (physx::Gu::computeBox_HeightFieldMTD(v24) & 1) != 0)
    {
      v180 = *(_WORD *)(a15 + 20) | 1;
LABEL_166:
      *(_WORD *)(a15 + 20) = v180;
      return v179 != 0;
    }
    *(_DWORD *)(a15 + 48) = 0;
    v181 = -v20[1].f32[0];
    *(float32x2_t *)(a15 + 36) = vneg_f32(*v20);
    *(float *)(a15 + 44) = v181;
  }
  return v179 != 0;
}

const char *physx::PxHeightField::getConcreteTypeName(physx::PxHeightField *this)
{
  return "PxHeightField";
}

BOOL physx::PxHeightField::isKindOf(physx::PxHeightField *this, const char *a2)
{
  return !strcmp("PxHeightField", a2) || strcmp(a2, "PxBase") == 0;
}

uint64_t physx::Gu::HeightField::getNbRows(physx::Gu::HeightField *this)
{
  return *((unsigned int *)this + 14);
}

uint64_t physx::Gu::HeightField::getNbColumns(physx::Gu::HeightField *this)
{
  return *((unsigned int *)this + 15);
}

uint64_t physx::Gu::HeightField::getFormat(physx::Gu::HeightField *this)
{
  return *((unsigned int *)this + 24);
}

uint64_t physx::Gu::HeightField::getSampleStride(physx::Gu::HeightField *this)
{
  return 4;
}

float physx::Gu::HeightField::getConvexEdgeThreshold(physx::Gu::HeightField *this)
{
  return *((float *)this + 22);
}

uint64_t physx::Gu::HeightField::getFlags@<X0>(uint64_t this@<X0>, _WORD *a2@<X8>)
{
  *a2 = *(_WORD *)(this + 92);
  return this;
}

float physx::Gu::HeightField::getHeight(physx::Gu::HeightField *this, float a2, float a3)
{
  unsigned int v4;
  float v5;
  uint64_t v6;
  __int16 *v7;
  float v8;
  float v9;
  float v10;
  float v11;
  float v12;
  float v13;
  float v14;
  float v15;
  float v16;
  float v18;
  uint64_t v19;

  v19 = 0;
  v4 = physx::Gu::HeightField::computeCellCoordinates(this, a2, a3, (float *)&v19 + 1, (float *)&v19);
  v5 = *((float *)&v19 + 1);
  v6 = *((_QWORD *)this + 10);
  v7 = (__int16 *)(v6 + 4 * v4);
  if (((char)v7[1] & 0x80000000) == 0)
  {
    v8 = (float)*(__int16 *)(v6 + 4 * (*((_DWORD *)this + 15) + v4));
    v9 = (float)*(__int16 *)(v6 + 4 * (v4 + 1));
    if ((float)(*((float *)&v19 + 1) + *(float *)&v19) >= 1.0)
    {
      v16 = (float)*(__int16 *)(v6 + 4 * (*((_DWORD *)this + 15) + v4 + 1));
      v11 = v16 + (float)((float)(1.0 - *(float *)&v19) * (float)(v8 - v16));
      v5 = 1.0 - *((float *)&v19 + 1);
      v12 = v9 - v16;
    }
    else
    {
      v10 = (float)*v7;
      v11 = v10 + (float)(*(float *)&v19 * (float)(v9 - v10));
      v12 = v8 - v10;
    }
    return v11 + (float)(v5 * v12);
  }
  v13 = (float)*v7;
  v14 = (float)*(__int16 *)(v6 + 4 * (*((_DWORD *)this + 15) + v4 + 1));
  if (*(float *)&v19 > *((float *)&v19 + 1))
  {
    v15 = (float)*(__int16 *)(v6 + 4 * (v4 + 1));
    v11 = v13 + (float)(*(float *)&v19 * (float)(v15 - v13));
    v12 = v14 - v15;
    return v11 + (float)(v5 * v12);
  }
  v18 = (float)*(__int16 *)(v6 + 4 * (*((_DWORD *)this + 15) + v4));
  return (float)(v13 + (float)(*((float *)&v19 + 1) * (float)(v18 - v13)))
       + (float)(*(float *)&v19 * (float)(v14 - v18));
}

uint64_t physx::Gu::HeightField::getTriangleMaterialIndex(physx::Gu::HeightField *this, unsigned int a2)
{
  uint64_t v2;
  _BYTE *v3;
  _BYTE *v4;

  v2 = *((_QWORD *)this + 10) + 4 * (a2 >> 1);
  v3 = (_BYTE *)(v2 + 2);
  v4 = (_BYTE *)(v2 + 3);
  if ((a2 & 1) == 0)
    v4 = v3;
  return *v4 & 0x7F;
}

float physx::Gu::HeightField::getTriangleNormal@<S0>(physx::Gu::HeightField *this@<X0>, unsigned int a2@<W1>, uint64_t a3@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  unsigned int v5;
  int v6;
  int v7;
  int v8;
  int v9;
  int v10;
  float result;

  v3 = a2 >> 1;
  v4 = *((_QWORD *)this + 10);
  if (*(char *)(v4 + 4 * v3 + 2) < 0)
  {
    if ((a2 & 1) != 0)
    {
      v6 = *(__int16 *)(v4 + 4 * (v3 + 1));
      v8 = *(__int16 *)(v4 + 4 * (*((_DWORD *)this + 15) + v3 + 1));
      v9 = *(__int16 *)(v4 + 4 * v3);
      v7 = v6;
    }
    else
    {
      v8 = *(__int16 *)(v4 + 4 * (*((_DWORD *)this + 15) + v3));
      v6 = *(__int16 *)(v4 + 4 * v3);
      v7 = *(__int16 *)(v4 + 4 * (*((_DWORD *)this + 15) + v3 + 1));
      v9 = v8;
    }
  }
  else if ((a2 & 1) != 0)
  {
    v10 = *((_DWORD *)this + 15);
    v8 = *(__int16 *)(v4 + 4 * (v10 + v3 + 1));
    v9 = *(__int16 *)(v4 + 4 * (v10 + v3));
    v6 = *(__int16 *)(v4 + 4 * (v3 + 1));
    v7 = v8;
  }
  else
  {
    v5 = *((_DWORD *)this + 15) + v3;
    v6 = *(__int16 *)(v4 + 4 * v3);
    v7 = *(__int16 *)(v4 + 4 * (v3 + 1));
    v8 = *(__int16 *)(v4 + 4 * v5);
    v9 = v6;
  }
  result = -(float)(v6 - v8);
  *(float *)a3 = result;
  *(_DWORD *)(a3 + 4) = -1082130432;
  *(float *)(a3 + 8) = -(float)(v9 - v7);
  return result;
}

uint64_t physx::Gu::HeightField::getSample(physx::Gu::HeightField *this, int a2, int a3)
{
  return *((_QWORD *)this + 10) + 4 * (a3 + *((_DWORD *)this + 15) * a2);
}

uint64_t physx::Gu::HeightField::getTimestamp(physx::Gu::HeightField *this)
{
  return *((unsigned int *)this + 30);
}

char *physx::Gu::HeightFieldTraceUtil::traceSegment<physx::Gu::TriggerTraceSegmentCallback,false,false>(uint64_t a1, float32x2_t *a2, float32x2_t *a3, _BYTE *a4, uint64_t a5)
{
  char *result;
  float v10;
  float v11;
  float v12;
  float v13;
  float v14;
  float v15;
  uint64_t v16;
  int v17;
  int v18;
  float v19;
  float v20;
  float v21;
  float v22;
  float v23;
  float v24;
  float v25;
  float v26;
  float v27;
  float v28;
  float v29;
  float v30;
  float v31;
  float v32;
  float v33;
  float v34;
  BOOL v35;
  float v36;
  float v37;
  float v38;
  float v39;
  float v40;
  float v41;
  float v42;
  float v43;
  float v44;
  float v45;
  float v46;
  float v47;
  float v48;
  float v49;
  float v50;
  float v51;
  int v52;
  int v53;
  float v54;
  int v55;
  int v56;
  float v57;
  float v58;
  float v59;
  float v60;
  int v61;
  float v62;
  uint64_t v63;
  uint64_t v64;
  int v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  float v69;
  float v70;
  int v71;
  float v72;
  float v73;
  int v74;
  float v75;
  float v76;
  float v77;
  float v78;
  float v79;
  float v80;
  float v81;
  float v83;
  float v84;
  float v85;
  float v86;
  float v87;
  float v88;
  float v89;
  float v90;
  int v91;
  int v92;
  uint64_t v93;
  int v94;
  float *v95;
  float v96;
  float v97;
  float v98;
  float v99;
  float v100;
  float v101;
  float v102;
  float v103;
  float v104;
  float v105;
  float v106;
  float v107;
  int v108;
  float v109;
  float v110;
  float v111;
  float v112;
  float v113;
  float v114;
  float v115;
  float v116;
  float v117;
  float v118;
  float v119;
  float v120;
  float v121;
  int v122;
  float v123;
  float v124;
  float v125;
  float v126;
  float v127;
  float v128;
  float v129;
  float v130;
  float v131;
  float v132;
  int v133;
  BOOL v134;
  BOOL v135;
  float v136;
  float v137;
  float v138;
  float v139;
  float v140;
  float v141;
  float v142;
  float v143;
  float v144;
  BOOL v145;
  float v146;
  float v147;
  float v148;
  float v149;
  float v150;
  float v151;
  float v152;
  float v153;
  float v154;
  float v155;
  float v156;
  float v157;
  float v158;
  float v159;
  float v160;
  _DWORD v161[3];
  _DWORD v162[3];
  uint64_t v163;
  float v164[4];
  uint64_t v165;

  v165 = *MEMORY[0x24BDAC8D0];
  v163 = 0;
  result = (char *)physx::Gu::intersectRayAABB2((float32x2_t *)a5, (float32x2_t *)(a5 + 12), a2, a3, (float *)&v163 + 1, (float *)&v163, 1.0);
  if ((_DWORD)result)
  {
    v10 = a3->f32[1];
    v11 = a3[1].f32[0];
    v12 = a2->f32[1];
    v13 = (float)(*((float *)&v163 + 1) * v10) + v12;
    v14 = a2[1].f32[0];
    v156 = v12;
    v15 = v12 + (float)(v10 * *(float *)&v163);
    v16 = *(_QWORD *)(a1 + 16);
    v17 = *(_DWORD *)(v16 + 56);
    v18 = *(_DWORD *)(v16 + 60);
    v19 = *(float *)a1;
    v20 = (float)((float)(*((float *)&v163 + 1) * a3->f32[0]) + a2->f32[0]) * *(float *)a1;
    v21 = fmaxf(v20, 0.0000001);
    if (v21 >= (float)((float)((float)(v17 - 1) * 1.0) + 0.0))
      v21 = (float)((float)(v17 - 1) * 1.0) + 0.0;
    v22 = *(float *)(a1 + 8);
    v23 = (float)((float)(*((float *)&v163 + 1) * v11) + v14) * v22;
    v24 = fmaxf(v23, 0.0000001);
    v25 = (float)((float)(v18 - 1) * 1.0) + 0.0;
    if (v24 < v25)
      v25 = v24;
    v26 = (float)(a2->f32[0] + (float)(a3->f32[0] * *(float *)&v163)) * v19;
    v27 = (float)(v14 + (float)(v11 * *(float *)&v163)) * v22;
    v28 = v26 - v20;
    v29 = v27 - v23;
    if ((float)(v26 - v20) < 0.0)
      v30 = -1.0;
    else
      v30 = 1.0;
    if (v29 < 0.0)
      v31 = -1.0;
    else
      v31 = 1.0;
    if (vabds_f32(v26, v20) < 1.0e-10)
      v28 = v30 * 1.0e-10;
    if (vabds_f32(v27, v23) < 1.0e-10)
      v29 = v31 * 1.0e-10;
    v32 = a3->f32[0] * v19;
    v33 = v11 * v22;
    v34 = sqrtf((float)((float)(v10 * v10) + (float)(v32 * v32)) + (float)(v33 * v33));
    v35 = v34 <= 1.0e-20;
    v146 = v34;
    v36 = 1.0 / v34;
    v37 = v32 * (float)(1.0 / v34);
    if (!v35)
      v32 = v37;
    v160 = v32;
    if (v35)
    {
      v38 = v33;
    }
    else
    {
      v10 = v10 * v36;
      v38 = v33 * v36;
    }
    v39 = floorf(v21);
    v40 = ceilf(v21);
    v41 = floorf(v25);
    v42 = ceilf(v25);
    if (v29 <= 0.0)
      v43 = v42;
    else
      v43 = v41;
    v44 = v39 + -1.0;
    if (v39 != v21)
      v44 = v39;
    v45 = v40 + 1.0;
    if (v40 != v21)
      v45 = v40;
    if (v28 <= 0.0)
      v46 = v40;
    else
      v46 = v39;
    if (v28 > 0.0)
      v47 = v45;
    else
      v47 = v44;
    v48 = v41 + -1.0;
    if (v41 != v25)
      v48 = v41;
    if (v42 == v25)
      v49 = v42 + 1.0;
    else
      v49 = v42;
    if (v29 <= 0.0)
      v49 = v48;
    v50 = (float)(v47 - v20) / v28;
    v51 = (float)(v49 - v23) / v29;
    if (v50 < 0.0)
      v50 = fabsf(0.0000001 / v28);
    v52 = (int)v46;
    v53 = (int)v43;
    v54 = v15 - v13;
    v55 = (int)v30;
    v56 = (int)v31;
    if (v51 < 0.0)
      v51 = fabsf(0.0000001 / v29);
    v57 = *(float *)(*(_QWORD *)(a1 + 24) + 16);
    v150 = v14 * v22;
    v151 = a2->f32[0] * v19;
    v148 = 1.0 / fabsf(v28);
    v58 = fabsf(v29);
    v59 = (float)v52;
    v60 = (float)v53;
    if (v56 <= 1)
      v61 = 1 - v56;
    else
      v61 = 2 - v56;
    v62 = v13 + (float)(v54 * 0.0);
    v63 = *(_QWORD *)(v16 + 80);
    v64 = (v61 >> 1) - v55 + 1;
    v65 = v55 + (v61 >> 1);
    v66 = 2 - v65;
    v67 = v65 + 1;
    v68 = v55 - (v61 >> 1) + 2;
    v158 = -v160;
    v159 = -v38;
    v157 = -v10;
    v149 = (float)v17;
    result = "NS_7Vector3IfEEEE";
    v147 = 1.0 / v58;
    v154 = v30;
    v155 = v13;
    v152 = v15 - v13;
    v153 = v31;
    while (1)
    {
      v69 = v62;
      if (v50 >= v51)
        v70 = v51;
      else
        v70 = v50;
      v62 = v13 + (float)(v70 * v54);
      v71 = v52 + v55;
      v72 = v57 * (float)*(__int16 *)(v63 + 4 * (v53 + v52 * v18));
      v73 = v57 * (float)*(__int16 *)(v63 + 4 * (v53 + v52 * v18 + v56));
      v74 = *(__int16 *)(v63 + 4 * (v53 + (v52 + v55) * v18));
      v164[0] = v72;
      v164[1] = v73;
      v75 = v57 * (float)v74;
      v76 = v57 * (float)*(__int16 *)(v63 + 4 * (v53 + (v52 + v55) * v18 + v56));
      v164[2] = v75;
      v164[3] = v76;
      if (v75 >= v76)
        v77 = v76;
      else
        v77 = v57 * (float)v74;
      if (v75 <= v76)
        v75 = v76;
      if (v72 >= v73)
        v78 = v73;
      else
        v78 = v72;
      if (v72 <= v73)
        v72 = v73;
      if (v78 >= v77)
        v79 = v77;
      else
        v79 = v78;
      if (v72 <= v75)
        v72 = v75;
      if (v69 >= v62)
        v80 = v13 + (float)(v70 * v54);
      else
        v80 = v69;
      if (v69 <= v62)
        v69 = v13 + (float)(v70 * v54);
      v81 = v69 + 0.0001;
      if ((float)(v80 + -0.0001) <= v72 && v81 >= v79)
      {
        v83 = v164[v64];
        v84 = v164[v66];
        v85 = v164[v67];
        v86 = v164[v68];
        if (v59 >= (float)(v30 + v59))
          v87 = v30 + v59;
        else
          v87 = v59;
        if (v59 <= (float)(v30 + v59))
          v88 = v30 + v59;
        else
          v88 = v59;
        if (v60 >= (float)(v31 + v60))
          v89 = v31 + v60;
        else
          v89 = v60;
        if (v60 <= (float)(v31 + v60))
          v90 = v31 + v60;
        else
          v90 = v60;
        *(float *)v162 = v87;
        *(float *)&v162[1] = v84;
        *(float *)&v162[2] = v90;
        *(float *)v161 = v88;
        *(float *)&v161[1] = v86;
        *(float *)&v161[2] = v90;
        if (v71 >= v52)
          v91 = v52;
        else
          v91 = v52 + v55;
        v92 = v53 + v56;
        if (v53 + v56 >= v53)
          v92 = v53;
        v93 = (v92 + v91 * v18);
        v94 = *(unsigned __int8 *)(v63 + 4 * v93 + 2);
        if ((v94 & 0x80) != 0)
        {
          v95 = (float *)v162;
          v96 = v90;
          v90 = v89;
          v97 = v88;
        }
        else
        {
          v95 = (float *)v161;
          v96 = v89;
          v86 = v85;
          v85 = v83;
          v83 = v84;
          v97 = v87;
        }
        v98 = v87 - v97;
        v99 = v83 - v85;
        v100 = v90 - v89;
        v101 = v88 - v97;
        v102 = v86 - v85;
        v103 = v96 - v89;
        v104 = (float)((float)(v86 - v85) * v159) + (float)(v10 * (float)(v96 - v89));
        v105 = (float)((float)(v96 - v89) * v158) + (float)(v38 * (float)(v88 - v97));
        v106 = (float)((float)(v88 - v97) * v157) + (float)(v160 * (float)(v86 - v85));
        v107 = (float)((float)((float)(v83 - v85) * v105) + (float)((float)(v87 - v97) * v104))
             + (float)((float)(v90 - v89) * v106);
        if (fabsf(v107) < 1.4211e-14)
          goto LABEL_97;
        v124 = 1.0 / v107;
        v125 = v151 - v97;
        v126 = v156 - v85;
        v127 = v150 - v89;
        v128 = (float)((float)((float)((float)(v156 - v85) * v105) + (float)(v125 * v104))
                     + (float)((float)(v150 - v89) * v106))
             * v124;
        if (v128 < -0.0001)
          goto LABEL_97;
        if (v128 > 1.0001)
          goto LABEL_97;
        v129 = (float)(v126 * v100) - (float)(v127 * v99);
        v130 = (float)(v127 * v98) - (float)(v125 * v100);
        v131 = (float)(v125 * v99) - (float)(v126 * v98);
        v132 = v124 * (float)((float)((float)(v10 * v130) + (float)(v160 * v129)) + (float)(v38 * v131));
        if (v132 < -0.0001)
          goto LABEL_97;
        v133 = ~v94 & 0x7F;
        v134 = (float)(v128 + v132) > 1.0001 || v133 == 0;
        if (v134
          || ((v109 = v124 * (float)((float)((float)(v102 * v130) + (float)(v101 * v129)) + (float)(v103 * v131)),
               v109 >= 0.0)
            ? (v135 = v109 > v146)
            : (v135 = 1),
              v135))
        {
LABEL_97:
          v108 = 1;
          v109 = 3.4028e38;
        }
        else
        {
          v108 = 0;
        }
        v110 = v95[1];
        v111 = v88 - *v95;
        v112 = v86 - v110;
        v113 = v95[2];
        v114 = v96 - v113;
        v115 = v87 - *v95;
        v116 = v83 - v110;
        v117 = v90 - v113;
        v118 = (float)((float)(v83 - v110) * v159) + (float)(v10 * v117);
        v119 = (float)(v117 * v158) + (float)(v38 * v115);
        v120 = (float)(v115 * v157) + (float)(v160 * (float)(v83 - v110));
        v121 = (float)((float)((float)(v86 - v110) * v119) + (float)(v111 * v118)) + (float)(v114 * v120);
        v30 = v154;
        if (fabsf(v121) < 1.4211e-14)
          goto LABEL_99;
        v136 = 1.0 / v121;
        v137 = v151 - *v95;
        v138 = v156 - v110;
        v139 = v150 - v113;
        v140 = (float)((float)((float)((float)(v156 - v110) * v119) + (float)(v137 * v118))
                     + (float)((float)(v150 - v113) * v120))
             * v136;
        if (v140 < -0.0001)
          goto LABEL_99;
        if (v140 > 1.0001)
          goto LABEL_99;
        v141 = (float)(v138 * v114) - (float)(v139 * v112);
        v142 = (float)(v139 * v111) - (float)(v137 * v114);
        v143 = (float)(v137 * v112) - (float)(v138 * v111);
        v144 = (float)((float)((float)(v10 * v142) + (float)(v160 * v141)) + (float)(v38 * v143)) * v136;
        if (v144 < -0.0001 || (float)(v140 + v144) > 1.0001)
          goto LABEL_99;
        v123 = (float)((float)((float)(v116 * v142) + (float)(v115 * v141)) + (float)(v117 * v143)) * v136;
        v145 = v123 < 0.0 || v123 > v146;
        if (v145 || (~*(unsigned __int8 *)(v63 + 4 * v93 + 3) & 0x7F) == 0)
        {
LABEL_99:
          v122 = 1;
          v123 = 3.4028e38;
        }
        else
        {
          v122 = 0;
        }
        if (v123 > v109)
          v122 = 1;
        v13 = v155;
        v54 = v152;
        v31 = v153;
        if (((v109 <= v123) & ~v108) != 0 || !v122)
          break;
      }
      if (v50 >= v51)
      {
        v53 += v56;
        if (v53 + v56 < 0 || (float)(v53 + v56) >= (float)v18)
          return result;
        v60 = v31 + v60;
        v51 = v147 + v51;
      }
      else
      {
        if (v71 + v55 < 0 || (float)(v71 + v55) >= v149)
          return result;
        v59 = v30 + v59;
        v50 = v148 + v50;
        v52 += v55;
      }
      if (v70 >= 0.9999)
        return result;
    }
    *a4 = 1;
  }
  return result;
}

float multiplyInverseRTLeft(float *a1, float *a2, float *a3)
{
  float v3;
  float v4;
  float v5;
  float v6;
  float v7;
  float v8;
  float v9;
  float v10;
  float v11;
  float v12;
  float v13;
  float v14;
  float v15;
  float v16;
  float v17;
  float v18;
  float v19;
  float v20;
  float v21;
  float v22;
  float v23;
  float v24;
  float v25;
  float v26;
  float v27;
  float v28;
  float v29;
  float v30;
  float v31;
  float v32;
  float v33;
  float v34;
  float result;

  v3 = a2[8];
  v4 = a3[8];
  v5 = a3[9] - a2[9];
  v6 = a3[10] - a2[10];
  v7 = a3[11] - a2[11];
  v8 = a2[1];
  v9 = (float)(v6 * v8) + (float)(*a2 * v5);
  v10 = a2[2];
  v11 = a2[3];
  v12 = a2[4];
  v13 = a2[5];
  v14 = (float)(v6 * v12) + (float)(v11 * v5);
  v15 = a2[6];
  v16 = a2[7];
  v17 = (float)(v6 * v16) + (float)(v15 * v5);
  v18 = a3[1];
  v19 = (float)(*a2 * *a3) + (float)(v8 * v18);
  v20 = (float)(v11 * *a3) + (float)(v12 * v18);
  v21 = (float)(v15 * *a3) + (float)(v16 * v18);
  v22 = a3[2];
  v23 = a3[3];
  v24 = v19 + (float)(v10 * v22);
  v25 = v20 + (float)(v13 * v22);
  v26 = v21 + (float)(v3 * v22);
  v27 = a3[4];
  v28 = a3[5];
  v29 = (float)((float)(*a2 * v23) + (float)(v8 * v27)) + (float)(v10 * v28);
  v30 = (float)((float)(v11 * v23) + (float)(v12 * v27)) + (float)(v13 * v28);
  v31 = (float)((float)(v15 * v23) + (float)(v16 * v27)) + (float)(v3 * v28);
  v32 = a3[6];
  v33 = a3[7];
  v34 = (float)(*a2 * v32) + (float)(v8 * v33);
  *a1 = v24;
  a1[1] = v25;
  a1[2] = v26;
  a1[3] = v29;
  a1[4] = v30;
  a1[5] = v31;
  a1[6] = v34 + (float)(v10 * v4);
  a1[7] = (float)((float)(v11 * v32) + (float)(v12 * v33)) + (float)(v13 * v4);
  a1[8] = (float)((float)(v15 * v32) + (float)(v16 * v33)) + (float)(v3 * v4);
  a1[9] = v9 + (float)(v10 * v7);
  result = v17 + (float)(v3 * v7);
  a1[10] = v14 + (float)(v13 * v7);
  a1[11] = result;
  return result;
}

void CapsuleTraceSegmentReport::~CapsuleTraceSegmentReport(CapsuleTraceSegmentReport *this)
{
  JUMPOUT(0x2276933B8);
}

BOOL CapsuleTraceSegmentReport::onEvent(CapsuleTraceSegmentReport *this, uint64_t a2, unsigned int *a3, double a4, float32x4_t a5, float32x4_t a6)
{
  uint64_t v9;
  uint64_t v10;
  float *v11;
  _BYTE *v12;
  unsigned int *v13;
  unsigned int v14;
  uint64_t v15;
  float32x2_t *v16;
  float v17;
  uint64_t v18;
  _BOOL8 result;
  __int16 v20;
  float v21[3];
  _QWORD v22[2];
  int v23;
  __int16 v24;
  __int128 v25;
  uint64_t v26;
  float v27;
  _BYTE v28[2312];
  uint64_t v29;

  v29 = *MEMORY[0x24BDAC8D0];
  if ((_DWORD)a2)
  {
    v9 = a2;
    v10 = *((_QWORD *)this + 1);
    v11 = (float *)*((_QWORD *)this + 6);
    v12 = v28;
    v13 = a3;
    do
    {
      v14 = *v13++;
      physx::Gu::HeightFieldUtil::getTriangle(v10, v11, (uint64_t)v12, 0, 0, v14, 1, 1);
      v12 += 36;
      --v9;
    }
    while (v9);
  }
  v22[0] = 0;
  v22[1] = 0;
  v23 = -1;
  v24 = 0;
  v26 = 0;
  v25 = 0uLL;
  v27 = 3.4028e38;
  v15 = *((_QWORD *)this + 3);
  v16 = (float32x2_t *)*((_QWORD *)this + 4);
  LODWORD(a4) = *((_DWORD *)this + 14);
  v20 = *((_WORD *)this + 8);
  if ((physx::Gu::sweepCapsuleTriangles_Precise(a2, (uint64_t)v28, v15, v16, 0, (uint64_t)v22, v21, &v20, a4, a5, a6, *((_BYTE *)this + 20), 0) & 1) == 0)return 1;
  v17 = v27;
  v18 = *((_QWORD *)this + 5);
  if (v27 > *(float *)(v18 + 48))
    return 1;
  *(_DWORD *)(v18 + 16) = a3[v23];
  *(_QWORD *)(v18 + 40) = v26;
  *(_OWORD *)(v18 + 24) = v25;
  *(float *)(v18 + 48) = v17;
  *((_BYTE *)this + 18) = 1;
  if (v27 == 0.0)
  {
    result = 0;
    *((_BYTE *)this + 19) = 1;
  }
  else
  {
    return !*((_BYTE *)this + 21);
  }
  return result;
}

uint64_t HeightFieldTraceSegmentSweepHelper::HeightFieldTraceSegmentSweepHelper(uint64_t a1, uint64_t a2, float32x2_t *a3)
{
  float v5;
  float v6;

  *(_QWORD *)a1 = a2;
  *(_QWORD *)(a1 + 8) = a3;
  physx::Gu::HeightFieldUtil::computeLocalBounds(a2, (float *)(a1 + 16));
  v5 = *(float *)(a1 + 24) - a3[1].f32[0];
  *(float32x2_t *)(a1 + 16) = vsub_f32(*(float32x2_t *)(a1 + 16), *a3);
  *(float *)(a1 + 24) = v5;
  v6 = *(float *)(a1 + 36) + a3[1].f32[0];
  *(float32x2_t *)(a1 + 28) = vadd_f32(*(float32x2_t *)(a1 + 28), *a3);
  *(float *)(a1 + 36) = v6;
  return a1;
}

void ConvexTraceSegmentReport::~ConvexTraceSegmentReport(ConvexTraceSegmentReport *this)
{
  JUMPOUT(0x2276933B8);
}

BOOL ConvexTraceSegmentReport::onEvent(ConvexTraceSegmentReport *this, unsigned int a2, unsigned int *a3)
{
  uint64_t v5;
  BOOL v6;
  char *v7;
  float32x4_t *v8;
  unint64_t v9;
  unsigned int v10;
  int32x2_t v11;
  int32x2_t v12;
  float32x4_t v13;
  float32x4_t v14;
  float32x4_t v15;
  float32x4_t v16;
  float32x4_t v17;
  float32x4_t v18;
  float32x4_t v19;
  float32x4_t v20;
  float32x4_t v21;
  float32x4_t v22;
  float32x4_t v23;
  float32x4_t v24;
  float32x4_t v25;
  float32x4_t v26;
  float32x4_t v27;
  float32x4_t v28;
  float32x4_t v29;
  float32x2_t v30;
  float32x4_t v31;
  float32x4_t v32;
  float32x4_t v33;
  float32x2_t v34;
  float32x4_t v35;
  float32x4_t v36;
  float v37;
  float32x4_t v38;
  float32x2_t v39;
  float32x2_t v40;
  int8x8_t v41;
  float32x4_t v42;
  float32x4_t v43;
  float32x4_t v44;
  float32x4_t v45;
  uint64_t v46;
  float32x4_t v47;
  int8x8_t v48;
  float32x4_t v49;
  float32x4_t v50;
  float32x4_t v51;
  float32x4_t v52;
  float32x4_t v53;
  float32x4_t v54;
  float32x2_t v55;
  float32x2_t v56;
  int v57;
  float32x2_t v63;
  float32x2_t v64;
  int v65;
  float32x4_t v66;
  float32x4_t v67;
  int8x16_t v68;
  float v70;
  char *v71;
  float32x4_t v72;
  int32x2_t v73;
  float v74;
  float v75;
  float v76;
  float v77;
  float v78[6];
  __int128 v79;
  uint64_t v80;
  int v81;
  float32x4_t v82;
  _QWORD v83[2];
  _QWORD v84[2];
  float32x4_t v85;
  uint64_t v86;
  uint64_t v87;
  char v88;
  float32x4_t v89;
  float32x4_t v90;
  float32x4_t v91;
  uint64_t v92;
  float32x4_t v93;
  float32x2_t v94;
  float32x4_t v95;
  int8x16_t v96[2];

  v79 = xmmword_2260E5D70;
  v80 = 0;
  v81 = 0;
  if (a2)
  {
    v5 = 0;
    v6 = 0;
    v71 = (char *)this + 328;
    v7 = (char *)this + 128;
    v8 = (float32x4_t *)((char *)this + 368);
    v9 = a2;
    v72 = (float32x4_t)vdupq_n_s32(0x3EAAAA9Fu);
    do
    {
      v10 = a3[v5];
      physx::Gu::HeightFieldUtil::getTriangle(*((_QWORD *)this + 1), (float *)&v79, (uint64_t)&v74, 0, 0, v10, 0, 0);
      v12.i32[0] = *((_DWORD *)this + 104);
      if (*((_BYTE *)this + 20)
        || (float)((float)((float)(*((float *)this + 102)
                                 * (float)((float)((float)(v78[1] - v76) * (float)(v78[2] - v77))
                                         - (float)((float)(v77 - v74) * (float)(v78[4] - v78[1]))))
                         + (float)((float)((float)((float)(v78[0] - v75) * (float)(v78[4] - v78[1]))
                                         - (float)((float)(v78[1] - v76) * (float)(v78[3] - v78[0])))
                                 * *((float *)this + 101)))
                 + (float)((float)((float)((float)(v77 - v74) * (float)(v78[3] - v78[0]))
                                 - (float)((float)(v78[0] - v75) * (float)(v78[2] - v77)))
                         * *((float *)this + 103))) > 0.0)
      {
        v11.i32[0] = *((_DWORD *)this + 88);
        v73 = v11;
        v93 = 0u;
        v92 = 0;
        v13 = *((float32x4_t *)this + 2);
        v14 = *((float32x4_t *)this + 3);
        v15 = vmulq_n_f32(v13, v74);
        v15.i32[3] = 0;
        v16 = vmulq_n_f32(v14, v75);
        v16.i32[3] = 0;
        v18 = *((float32x4_t *)this + 4);
        v17 = *((float32x4_t *)this + 5);
        v19 = vmulq_n_f32(v18, v76);
        v19.i32[3] = 0;
        v20 = vaddq_f32(v17, vaddq_f32(vaddq_f32(v15, v16), v19));
        v21 = vmulq_n_f32(v13, v77);
        v21.i32[3] = 0;
        v22 = vmulq_n_f32(v14, v78[0]);
        v22.i32[3] = 0;
        v23 = vmulq_n_f32(v18, v78[1]);
        v23.i32[3] = 0;
        v24 = vaddq_f32(v17, vaddq_f32(vaddq_f32(v21, v22), v23));
        v25 = vmulq_n_f32(v13, v78[2]);
        v25.i32[3] = 0;
        v26 = vmulq_n_f32(v14, v78[3]);
        v26.i32[3] = 0;
        v27 = vmulq_lane_f32(v18, *(float32x2_t *)&v78[3], 1);
        v27.i32[3] = 0;
        v28 = vaddq_f32(v17, vaddq_f32(vaddq_f32(v25, v26), v27));
        v88 = 0;
        v29 = vmulq_f32(vaddq_f32(v28, vaddq_f32(v20, v24)), v72);
        v29.i32[3] = 0;
        v85 = v29;
        v89 = v20;
        v90 = v24;
        v91 = v28;
        v86 = 0x7F7FFFFF00000000;
        v87 = 0x57F7FFFFFLL;
        v84[0] = off_24ED91370;
        v84[1] = &v85;
        v83[0] = off_24ED91168;
        v83[1] = v7;
        v82 = vsubq_f32(v29, *((float32x4_t *)this + 8));
        v95 = 0u;
        v96[0] = 0u;
        v94 = 0;
        if (physx::Gu::gjkRaycast<physx::Gu::LocalConvex<physx::Gu::TriangleV>,physx::Gu::LocalConvex<physx::Gu::ConvexHullV>>((uint64_t)v84, (uint64_t)v83, &v82, v12, (uint64_t)&v92, &v93, v8, &v94, &v95, v96))
        {
          if (*(float *)&v92 >= v94.f32[0])
          {
            *((_BYTE *)this + 19) = 1;
            *((_DWORD *)this + 80) = v10;
            *((_WORD *)this + 162) = 1026;
            v70 = -*((float *)this + 100);
            *(float32x2_t *)(v71 + 12) = vneg_f32(*(float32x2_t *)((char *)this + 392));
            *((float *)this + 87) = v70;
            *((_DWORD *)this + 88) = 0;
            *((_BYTE *)this + 18) = 1;
            return v6;
          }
          v30 = vmul_f32(v94, *(float32x2_t *)((char *)this + 384));
          if ((vcgt_f32((float32x2_t)vdup_lane_s32(v73, 0), v30).u8[0] & 1) != 0)
          {
            v32 = *((float32x4_t *)this + 6);
            v31 = *((float32x4_t *)this + 7);
            v33 = v32;
            v33.i32[3] = 0;
            v34 = (float32x2_t)vdupq_laneq_s32((int32x4_t)v32, 3).u64[0];
            v36 = v95;
            v35 = (float32x4_t)v96[0];
            LODWORD(v37) = vmla_f32((float32x2_t)0xBF000000BF000000, v34, v34).u32[0];
            v38 = vmulq_n_f32((float32x4_t)v96[0], v37);
            v38.i32[3] = 0;
            *((_DWORD *)this + 80) = v10;
            v39 = (float32x2_t)vextq_s8((int8x16_t)v33, (int8x16_t)v33, 8uLL).u64[0];
            v40 = (float32x2_t)vext_s8(*(int8x8_t *)v32.f32, (int8x8_t)v39, 4uLL);
            v41 = (int8x8_t)vmls_f32(vmul_f32((float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v35, (int8x16_t)v35, 4uLL), *(float32x2_t *)v32.f32), v40, *(float32x2_t *)v35.f32);
            *(int8x8_t *)v42.f32 = vext_s8(v41, (int8x8_t)vmls_f32(vmul_f32(*(float32x2_t *)v35.f32, v39), *(float32x2_t *)v32.f32, (float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v35, (int8x16_t)v35, 8uLL)), 4uLL);
            v42.i64[1] = v41.u32[0];
            v43 = vmlaq_laneq_f32(v38, v42, v32, 3);
            v43.i64[1] = vextq_s8((int8x16_t)v43, (int8x16_t)v43, 8uLL).u32[0];
            v44 = vmulq_f32(v35, v33);
            v44.i64[0] = vpaddq_f32(v44, v44).u64[0];
            v45 = vmlaq_n_f32(v43, v33, vpadd_f32(*(float32x2_t *)v44.f32, *(float32x2_t *)v44.f32).f32[0]);
            v46 = vextq_s8((int8x16_t)v45, (int8x16_t)v45, 8uLL).u32[0];
            v47 = vmulq_n_f32(v36, v37);
            v47.i32[3] = 0;
            v48 = (int8x8_t)vmls_f32(vmul_f32((float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v36, (int8x16_t)v36, 4uLL), *(float32x2_t *)v32.f32), v40, *(float32x2_t *)v36.f32);
            *(int8x8_t *)v49.f32 = vext_s8(v48, (int8x8_t)vmls_f32(vmul_f32(*(float32x2_t *)v36.f32, v39), *(float32x2_t *)v32.f32, (float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v36, (int8x16_t)v36, 8uLL)), 4uLL);
            v49.i64[1] = v48.u32[0];
            v50 = vmlaq_laneq_f32(v47, v49, v32, 3);
            v50.i64[1] = vextq_s8((int8x16_t)v50, (int8x16_t)v50, 8uLL).u32[0];
            v51 = vmulq_f32(v36, v33);
            v51.i64[0] = vpaddq_f32(v51, v51).u64[0];
            v52 = vmlaq_n_f32(v50, v33, vpadd_f32(*(float32x2_t *)v51.f32, *(float32x2_t *)v51.f32).f32[0]);
            v53 = vaddq_f32(v52, v52);
            v53.i32[3] = 0;
            *((_WORD *)this + 162) = 1027;
            v54 = vmulq_f32(v53, v53);
            v54.i64[0] = vpaddq_f32(v54, v54).u64[0];
            v55 = vpadd_f32(*(float32x2_t *)v54.f32, *(float32x2_t *)v54.f32);
            v56 = vrsqrte_f32(v55);
            v57 = 4;
            do
            {
              v56 = vmul_f32(v56, vrsqrts_f32(vmul_f32(v56, v56), v55));
              --v57;
            }
            while (v57);
            __asm { FMOV            V16.2S, #1.0 }
            v63 = vmul_f32(v55, (float32x2_t)vbsl_s8((int8x8_t)vdup_lane_s32(vceqz_f32(v55), 0), _D16, (int8x8_t)v56));
            v64 = vrecpe_f32(v63);
            v65 = 4;
            do
            {
              v64 = vmul_f32(v64, vrecps_f32(v63, v64));
              --v65;
            }
            while (v65);
            v45.i64[1] = v46;
            v66.i64[0] = 0x4000000040000000;
            v66.i64[1] = 0x4000000040000000;
            v67 = vmlaq_f32(v31, v66, v45);
            v68 = (int8x16_t)vmulq_n_f32(v53, v64.f32[0]);
            v67.i32[3] = v68.i32[0];
            *(float32x4_t *)v71 = v67;
            *((_QWORD *)this + 43) = vextq_s8(v68, v68, 4uLL).u64[0];
            *((_DWORD *)this + 88) = v30.i32[0];
            *((_BYTE *)this + 18) = 1;
            if (*((_BYTE *)this + 21) || v30.f32[0] == 0.0)
              return v6;
          }
        }
      }
      v6 = ++v5 >= v9;
    }
    while (v5 != v9);
  }
  return 1;
}

BOOL physx::Gu::gjkRaycast<physx::Gu::LocalConvex<physx::Gu::TriangleV>,physx::Gu::LocalConvex<physx::Gu::ConvexHullV>>(uint64_t a1, uint64_t a2, float32x4_t *a3, int32x2_t a4, uint64_t a5, float32x4_t *a6, float32x4_t *a7, float32x2_t *a8, float32x4_t *a9, int8x16_t *a10)
{
  uint64_t v14;
  float32x4_t v15;
  float32x4_t v16;
  float32x4_t v17;
  float32x2_t v18;
  float32x2_t v19;
  int v20;
  float32x2_t v26;
  float32x2_t v27;
  int v28;
  float32x4_t v29;
  float32x4_t v30;
  float32x4_t v31;
  float32x4_t *v32;
  float32x4_t v33;
  float32x4_t v34;
  float32x4_t v35;
  float32x4_t v36;
  float32x4_t v37;
  float32x4_t v38;
  float32x2_t v39;
  float32x4_t v40;
  float32x4_t v41;
  float32x4_t v42;
  float32x4_t v43;
  const float *v44;
  float32x2_t v45;
  float32x2_t v46;
  float32x2_t v47;
  float32x2_t v48;
  float32x4_t v49;
  float32x4_t v50;
  float32x2_t v51;
  int32x4_t v52;
  float32x4_t v53;
  int8x16_t v54;
  float32x4_t v55;
  float32x2_t v56;
  int8x16_t v57;
  int32x4_t v58;
  unsigned __int32 v59;
  float32x4_t v60;
  float32x2_t v61;
  float32x2_t v62;
  int v63;
  float32x2_t v64;
  float32x2_t v65;
  int v66;
  float32x4_t v67;
  float32x4_t *v68;
  float32x4_t v69;
  float32x4_t v70;
  float32x4_t v71;
  float32x4_t v72;
  float32x4_t v73;
  float32x4_t v74;
  float32x4_t v75;
  float32x4_t v76;
  float32x4_t v77;
  float32x4_t v78;
  float32x4_t v79;
  float32x4_t v80;
  float32x2_t v81;
  float32x4_t v82;
  float32x2_t v83;
  float32x2_t v84;
  int v85;
  float32x2_t v86;
  float32x4_t v87;
  float32x4_t v88;
  float32x4_t v89;
  uint64_t v90;
  float32x4_t v91;
  float32x4_t v92;
  float32x2_t v93;
  float32x4_t v94;
  float32x4_t v95;
  float32x2_t v96;
  float32x2_t v97;
  int v98;
  float32x4_t v99;
  float32x4_t v100;
  float32x4_t v101;
  int8x8_t v102;
  float32x2_t v103;
  float32x2_t v104;
  float32x2_t v105;
  float32x2_t v106;
  float32x2_t v107;
  float32x2_t v108;
  int8x8_t v109;
  float32x4_t v110;
  float32x2_t v111;
  float32x2_t v112;
  int8x8_t v113;
  float32x4_t v114;
  int8x8_t v115;
  float32x4_t v116;
  float32x4_t v117;
  float32x2_t v118;
  float32x4_t v119;
  float32x2_t v120;
  float32x4_t v121;
  float32x2_t v122;
  float32x4_t v123;
  float32x4_t v124;
  float32x4_t v125;
  float32x2_t v126;
  float32x4_t v127;
  float32x2_t v128;
  float32x4_t v129;
  float32x4_t v130;
  float32x2_t v131;
  float32x4_t v132;
  float32x2_t v133;
  float32x4_t v134;
  float32x2_t v135;
  float32x4_t v136;
  float32x2_t v137;
  __int32 v138;
  uint64_t v139;
  uint64_t v140;
  float32x4_t v141;
  float32x2_t v142;
  float32x4_t v143;
  float32x4_t v144;
  float32x2_t v145;
  float32x2_t v146;
  int v147;
  int8x16_t v148;
  float32x2_t v149;
  float32x2_t v150;
  int v151;
  float32x2_t v152;
  float32x2_t v153;
  float32x2_t v154;
  int v155;
  unsigned int v156;
  float32x2_t v157;
  float32x2_t v158;
  float32x2_t v159;
  int v160;
  int8x16_t v161;
  float32x2_t v162;
  float32x2_t v163;
  int v164;
  float32x4_t v165;
  float32x4_t v166;
  float32x4_t v167;
  float32x4_t v168;
  float32x4_t v169;
  float32x4_t v170;
  float32x2_t v171;
  int8x8_t v172;
  int8x16_t v173;
  float32x4_t v174;
  float32x4_t v175;
  float32x2_t v176;
  float32x2_t v177;
  int v178;
  float32x2_t v179;
  float32x2_t v180;
  int v181;
  int8x16_t v182;
  int8x16_t v183;
  float32x4_t v184;
  float32x4_t v185;
  float32x4_t v186;
  int8x16_t *v187;
  float32x4_t v188;
  float32x4_t v189;
  float32x4_t v190;
  float32x4_t v191;
  float32x4_t v192;
  float32x2_t v193;
  float32x2_t v194;
  int v195;
  float32x4_t v196;
  float32x4_t v197;
  int8x16_t v198;
  int32x4_t v200;
  float32x2_t v201;
  int8x16_t v204;
  float32x2_t v205;
  float32x4_t v206;
  int8x16_t v207;
  float32x4_t v208;
  int8x16_t v209;
  float32x4_t v210;
  float32x4_t v211;
  float32x4_t v212;
  float32x4_t v213;
  float32x4_t v214;
  int8x16_t v215;
  float32x4_t v216;
  float32x4_t v217;
  unsigned int v218;
  float32x2_t v219;
  float32x2_t v220;
  float32x4_t v221;
  float32x4_t v222;
  float32x4_t v223;
  __int128 v224;
  float32x4_t v225;
  float32x4_t v226;
  float32x4_t v227;
  __int128 v228;
  float32x4_t v229;
  float32x4_t v230;
  float32x4_t v231[2];
  uint64_t v232;

  v232 = *MEMORY[0x24BDAC8D0];
  v207 = (int8x16_t)vmlaq_f32(*a6, (float32x4_t)0, *a7);
  LODWORD(v14) = vextq_s8(v207, v207, 8uLL).u32[0];
  v218 = 1;
  v15 = vmulq_f32(*a3, *a3);
  v15.i64[0] = vpaddq_f32(v15, v15).u64[0];
  v16 = (float32x4_t)vbslq_s8((int8x16_t)vdupq_lane_s32(vcgt_f32(vpadd_f32(*(float32x2_t *)v15.f32, *(float32x2_t *)v15.f32), (float32x2_t)0x3400000034000000), 0), *(int8x16_t *)a3, (int8x16_t)xmmword_2260E5F10);
  v17 = vmulq_f32(v16, v16);
  v17.i64[0] = vpaddq_f32(v17, v17).u64[0];
  v18 = vpadd_f32(*(float32x2_t *)v17.f32, *(float32x2_t *)v17.f32);
  v19 = vrsqrte_f32(v18);
  v20 = 4;
  do
  {
    v19 = vmul_f32(v19, vrsqrts_f32(vmul_f32(v19, v19), v18));
    --v20;
  }
  while (v20);
  HIDWORD(v14) = 0;
  __asm { FMOV            V8.2S, #1.0 }
  v26 = vmul_f32(v18, (float32x2_t)vbsl_s8((int8x8_t)vdup_lane_s32(vceqz_f32(v18), 0), (int8x8_t)_D8, (int8x8_t)v19));
  v27 = vrecpe_f32(v26);
  v28 = 4;
  do
  {
    v27 = vmul_f32(v27, vrecps_f32(v26, v27));
    --v28;
  }
  while (v28);
  v29.i64[0] = v207.i64[0];
  v29.i64[1] = v14;
  v208 = v29;
  v30 = vmulq_n_f32(v16, v27.f32[0]);
  v30.i32[3] = 0;
  v31 = vnegq_f32(v30);
  v31.i32[3] = 0;
  v32 = *(float32x4_t **)(a1 + 8);
  v33 = v32[3];
  v34 = v32[4];
  v35 = v32[5];
  v36 = vmulq_f32(v31, v33);
  v36.i64[0] = vpaddq_f32(v36, v36).u64[0];
  *(float32x2_t *)v36.f32 = vpadd_f32(*(float32x2_t *)v36.f32, *(float32x2_t *)v36.f32);
  v37 = vmulq_f32(v31, v34);
  v37.i64[0] = vpaddq_f32(v37, v37).u64[0];
  *(float32x2_t *)v37.f32 = vpadd_f32(*(float32x2_t *)v37.f32, *(float32x2_t *)v37.f32);
  v38 = vmulq_f32(v31, v35);
  v38.i64[0] = vpaddq_f32(v38, v38).u64[0];
  *(float32x2_t *)v38.f32 = vpadd_f32(*(float32x2_t *)v38.f32, *(float32x2_t *)v38.f32);
  v39 = (float32x2_t)vdup_lane_s32(a4, 0);
  v217 = v30;
  v213 = (float32x4_t)vbslq_s8((int8x16_t)vdupq_lane_s32((int32x2_t)vand_s8((int8x8_t)vcgt_f32(*(float32x2_t *)v36.f32, *(float32x2_t *)v38.f32), (int8x8_t)vcgt_f32(*(float32x2_t *)v36.f32, *(float32x2_t *)v37.f32)), 0), (int8x16_t)v33, vbslq_s8((int8x16_t)vdupq_lane_s32(vcgt_f32(*(float32x2_t *)v37.f32, *(float32x2_t *)v38.f32), 0), (int8x16_t)v34, (int8x16_t)v35));
  *(double *)v40.i64 = physx::Gu::LocalConvex<physx::Gu::ConvexHullV>::support(a2, &v217);
  v41 = v40;
  v42 = vsubq_f32(v213, v40);
  v229 = v42;
  v230 = 0u;
  memset(v231, 0, sizeof(v231));
  v225 = v213;
  v226 = 0u;
  v43 = vnegq_f32(v42);
  v43.i32[3] = 0;
  v227 = 0u;
  v228 = 0u;
  v221 = v41;
  v222 = 0u;
  v223 = 0u;
  v224 = 0u;
  v44 = (const float *)(*(_QWORD *)(a2 + 8) + 24);
  *(float32x2_t *)v41.f32 = vld1_dup_f32(v44);
  v45 = (float32x2_t)vdup_n_s32(0x7F7FFFFFu);
  *(float32x2_t *)v41.f32 = vmul_f32(vmin_f32(*(float32x2_t *)v41.f32, v45), (float32x2_t)vdup_n_s32(0x3DCCCCCDu));
  v46 = vadd_f32(v39, *(float32x2_t *)v41.f32);
  v47 = vmul_f32(*(float32x2_t *)v41.f32, *(float32x2_t *)v41.f32);
  v48 = vmul_f32(v46, v46);
  v49 = vmulq_f32(v43, v43);
  v50 = vpaddq_f32(v49, v49);
  v51 = vpadd_f32(*(float32x2_t *)v50.f32, *(float32x2_t *)v50.f32);
  v201 = v47;
  *(int32x2_t *)v50.f32 = vcgt_f32(v51, v47);
  v52 = vdupq_lane_s32(*(int32x2_t *)v50.f32, 0);
  v50.i32[0] = -1;
  v200 = (int32x4_t)v50;
  v53 = v42;
  v54.i64[0] = -1;
  v54.i64[1] = -1;
  v204 = (int8x16_t)v43;
  v55 = v43;
  v56 = 0;
  while (1)
  {
    v57 = (int8x16_t)v42;
    v58.i64[0] = -1;
    v58.i64[1] = -1;
    *(int16x4_t *)v58.i8 = vmovn_s32(vceqq_s32(v52, v58));
    v59 = vuzp1_s8(*(int8x8_t *)v58.i8, *(int8x8_t *)v58.i8).u32[0];
    if (v59 != -1)
      break;
    v60 = vmulq_f32(v55, v55);
    v60.i64[0] = vpaddq_f32(v60, v60).u64[0];
    v61 = vpadd_f32(*(float32x2_t *)v60.f32, *(float32x2_t *)v60.f32);
    v62 = vrsqrte_f32(v61);
    v63 = 4;
    do
    {
      v62 = vmul_f32(v62, vrsqrts_f32(vmul_f32(v62, v62), v61));
      --v63;
    }
    while (v63);
    v209 = v57;
    v64 = vmul_f32(v61, (float32x2_t)vbsl_s8((int8x8_t)vdup_lane_s32(vceqz_f32(v61), 0), (int8x8_t)_D8, (int8x8_t)v62));
    v65 = vrecpe_f32(v64);
    v66 = 4;
    do
    {
      v65 = vmul_f32(v65, vrecps_f32(v64, v65));
      --v66;
    }
    while (v66);
    v206 = v55;
    v67 = vmulq_n_f32(v55, v65.f32[0]);
    v67.i32[3] = 0;
    v210 = v67;
    v68 = *(float32x4_t **)(a1 + 8);
    v69 = v68[3];
    v70 = v68[4];
    v71 = v68[5];
    v72 = vmulq_f32(v67, v69);
    v72.i64[0] = vpaddq_f32(v72, v72).u64[0];
    *(float32x2_t *)v72.f32 = vpadd_f32(*(float32x2_t *)v72.f32, *(float32x2_t *)v72.f32);
    v73 = vmulq_f32(v67, v70);
    v73.i64[0] = vpaddq_f32(v73, v73).u64[0];
    *(float32x2_t *)v73.f32 = vpadd_f32(*(float32x2_t *)v73.f32, *(float32x2_t *)v73.f32);
    v74 = vmulq_f32(v67, v71);
    v74.i64[0] = vpaddq_f32(v74, v74).u64[0];
    *(float32x2_t *)v74.f32 = vpadd_f32(*(float32x2_t *)v74.f32, *(float32x2_t *)v74.f32);
    v75 = vnegq_f32(v67);
    v75.i32[3] = 0;
    v214 = (float32x4_t)vbslq_s8((int8x16_t)vdupq_lane_s32((int32x2_t)vand_s8((int8x8_t)vcgt_f32(*(float32x2_t *)v72.f32, *(float32x2_t *)v74.f32), (int8x8_t)vcgt_f32(*(float32x2_t *)v72.f32, *(float32x2_t *)v73.f32)), 0), (int8x16_t)v69, vbslq_s8((int8x16_t)vdupq_lane_s32(vcgt_f32(*(float32x2_t *)v73.f32, *(float32x2_t *)v74.f32), 0), (int8x16_t)v70, (int8x16_t)v71));
    v216 = v75;
    *(double *)v76.i64 = physx::Gu::LocalConvex<physx::Gu::ConvexHullV>::support(a2, &v216);
    v77 = v214;
    v78 = vaddq_f32(v208, v76);
    v42 = vsubq_f32(v214, v78);
    v79 = vnegq_f32(v42);
    v79.i32[3] = 0;
    v80 = vmulq_f32(v210, v79);
    v80.i64[0] = vpaddq_f32(v80, v80).u64[0];
    v81 = vsub_f32(vpadd_f32(*(float32x2_t *)v80.f32, *(float32x2_t *)v80.f32), v46);
    if (v81.f32[0] > 0.0)
    {
      v82 = vmulq_f32(v210, *a7);
      v82.i64[0] = vpaddq_f32(v82, v82).u64[0];
      v83 = vpadd_f32(*(float32x2_t *)v82.f32, *(float32x2_t *)v82.f32);
      if (v83.f32[0] >= 0.0)
        return v59 != -1;
      v84 = vrecpe_f32(v83);
      v85 = 4;
      do
      {
        v84 = vmul_f32(v84, vrecps_f32(v83, v84));
        --v85;
      }
      while (v85);
      v86 = vsub_f32(v56, vmul_f32(v81, v84));
      if ((vcgt_f32(v86, v56).u8[0] & 1) != 0)
      {
        if (v86.f32[0] > 1.0)
          return v59 != -1;
        v87 = vmlaq_n_f32(*a6, *a7, v86.f32[0]);
        v87.i64[1] = vextq_s8((int8x16_t)v87, (int8x16_t)v87, 8uLL).u32[0];
        v211 = v87;
        v88 = vsubq_f32(v87, v208);
        v205 = v86;
        v221 = vaddq_f32(v221, v88);
        v222 = vaddq_f32(v222, v88);
        v223 = vaddq_f32(v223, v88);
        v229 = vsubq_f32(v225, v221);
        v230 = vsubq_f32(v226, v222);
        v231[0] = vsubq_f32(v227, v223);
        *(double *)v89.i64 = physx::Gu::LocalConvex<physx::Gu::ConvexHullV>::support(a2, &v216);
        v77 = v214;
        v78 = vaddq_f32(v211, v89);
        v42 = vsubq_f32(v214, v78);
        v51 = v45;
        v204 = (int8x16_t)v206;
        v208 = v211;
        v56 = v205;
      }
      else
      {
        v56 = v86;
      }
    }
    v90 = v218;
    *(&v225 + v218) = v77;
    *(&v221 + v90) = v78;
    v218 = v90 + 1;
    *(&v229 + v90) = v42;
    if ((_DWORD)v90 == 3)
    {
      physx::Gu::closestPtPointTetrahedron(&v229, &v225, &v221, (int *)&v218);
LABEL_27:
      v53 = (float32x4_t)v209;
      goto LABEL_61;
    }
    if ((_DWORD)v90 != 2)
    {
      v53 = (float32x4_t)v209;
      if ((_DWORD)v90 != 1)
        goto LABEL_61;
      v42 = v229;
      v91 = vsubq_f32(v230, v229);
      v92 = vmulq_f32(v91, v91);
      v92.i64[0] = vpaddq_f32(v92, v92).u64[0];
      v93 = vpadd_f32(*(float32x2_t *)v92.f32, *(float32x2_t *)v92.f32);
      if (vuzp1_s8((int8x8_t)vdup_lane_s16((int16x4_t)vcge_f32((float32x2_t)0x3400000034000000, v93), 0), *(int8x8_t *)v229.f32).u32[0] != -1)
      {
        v94 = vnegq_f32(v229);
        v94.i32[3] = 0;
        v95 = vmulq_f32(v94, v91);
        v95.i64[0] = vpaddq_f32(v95, v95).u64[0];
        v96 = vpadd_f32(*(float32x2_t *)v95.f32, *(float32x2_t *)v95.f32);
        v97 = vrecpe_f32(v93);
        v98 = 4;
        do
        {
          v97 = vmul_f32(v97, vrecps_f32(v93, v97));
          --v98;
        }
        while (v98);
        v42 = vmlaq_n_f32(v229, v91, vmax_f32(vmin_f32(vmul_f32(v96, v97), _D8), 0).f32[0]);
LABEL_42:
        v42.i64[1] = vextq_s8((int8x16_t)v42, (int8x16_t)v42, 8uLL).u32[0];
        goto LABEL_61;
      }
LABEL_43:
      v218 = 1;
      goto LABEL_61;
    }
    v42 = v229;
    v99 = vsubq_f32(v230, v229);
    v100 = vsubq_f32(v231[0], v229);
    v102 = (int8x8_t)vmls_f32(vmul_f32(*(float32x2_t *)v99.f32, (float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v100, (int8x16_t)v100, 4uLL)), (float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v99, (int8x16_t)v99, 4uLL), *(float32x2_t *)v100.f32);
    *(int8x8_t *)v101.f32 = vext_s8(v102, (int8x8_t)vmls_f32(vmul_f32((float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v99, (int8x16_t)v99, 8uLL), *(float32x2_t *)v100.f32), *(float32x2_t *)v99.f32, (float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v100, (int8x16_t)v100, 8uLL)), 4uLL);
    v102.i32[1] = 0;
    v218 = 3;
    v103 = vpadd_f32(vmul_f32(*(float32x2_t *)v101.f32, *(float32x2_t *)v101.f32), vmul_f32((float32x2_t)v102.u32[0], (float32x2_t)v102.u32[0]));
    v104 = vpadd_f32(v103, v103);
    if (v104.f32[0] <= 0.00000011921)
    {
      v218 = 2;
      v141 = vmulq_f32(v99, v99);
      v141.i64[0] = vpaddq_f32(v141, v141).u64[0];
      v142 = vpadd_f32(*(float32x2_t *)v141.f32, *(float32x2_t *)v141.f32);
      v53 = (float32x4_t)v209;
      if (vuzp1_s8((int8x8_t)vdup_lane_s16((int16x4_t)vcge_f32((float32x2_t)0x3400000034000000, v142), 0), *(int8x8_t *)v229.f32).u32[0] != -1)
      {
        v143 = vnegq_f32(v229);
        v143.i32[3] = 0;
        v144 = vmulq_f32(v143, v99);
        v144.i64[0] = vpaddq_f32(v144, v144).u64[0];
        v145 = vpadd_f32(*(float32x2_t *)v144.f32, *(float32x2_t *)v144.f32);
        v146 = vrecpe_f32(v142);
        v147 = 4;
        do
        {
          v146 = vmul_f32(v146, vrecps_f32(v142, v146));
          --v147;
        }
        while (v147);
        v42 = vmlaq_n_f32(v229, v99, vmax_f32(vmin_f32(vmul_f32(v145, v146), _D8), 0).f32[0]);
        goto LABEL_42;
      }
      goto LABEL_43;
    }
    if (v104.f32[0] == 0.0)
    {
      v42 = 0uLL;
      goto LABEL_27;
    }
    *(int8x8_t *)&v101.u32[2] = v102;
    v105 = (float32x2_t)vextq_s8((int8x16_t)v230, (int8x16_t)v230, 8uLL).u64[0];
    v106 = (float32x2_t)vextq_s8((int8x16_t)v231[0], (int8x16_t)v231[0], 8uLL).u64[0];
    v107 = (float32x2_t)vextq_s8((int8x16_t)v231[0], (int8x16_t)v231[0], 4uLL).u64[0];
    v108 = (float32x2_t)vextq_s8((int8x16_t)v230, (int8x16_t)v230, 4uLL).u64[0];
    v109 = (int8x8_t)vmls_f32(vmul_f32(*(float32x2_t *)v230.f32, v107), v108, *(float32x2_t *)v231[0].f32);
    *(int8x8_t *)v110.f32 = vext_s8(v109, (int8x8_t)vmls_f32(vmul_f32(v105, *(float32x2_t *)v231[0].f32), *(float32x2_t *)v230.f32, v106), 4uLL);
    v110.i64[1] = v109.u32[0];
    v111 = (float32x2_t)vextq_s8((int8x16_t)v229, (int8x16_t)v229, 8uLL).u64[0];
    v112 = (float32x2_t)vextq_s8((int8x16_t)v229, (int8x16_t)v229, 4uLL).u64[0];
    v113 = (int8x8_t)vmls_f32(vmul_f32(v112, *(float32x2_t *)v231[0].f32), v107, *(float32x2_t *)v229.f32);
    *(int8x8_t *)v114.f32 = vext_s8(v113, (int8x8_t)vmls_f32(vmul_f32(*(float32x2_t *)v229.f32, v106), *(float32x2_t *)v231[0].f32, v111), 4uLL);
    v114.i64[1] = v113.u32[0];
    v115 = (int8x8_t)vmls_f32(vmul_f32(*(float32x2_t *)v229.f32, v108), v112, *(float32x2_t *)v230.f32);
    *(int8x8_t *)v116.f32 = vext_s8(v115, (int8x8_t)vmls_f32(vmul_f32(v111, *(float32x2_t *)v230.f32), *(float32x2_t *)v229.f32, v105), 4uLL);
    v116.i64[1] = v115.u32[0];
    v117 = vmulq_f32(v110, v101);
    v117.i64[0] = vpaddq_f32(v117, v117).u64[0];
    v118 = vpadd_f32(*(float32x2_t *)v117.f32, *(float32x2_t *)v117.f32);
    v119 = vmulq_f32(v114, v101);
    v119.i64[0] = vpaddq_f32(v119, v119).u64[0];
    v120 = vpadd_f32(*(float32x2_t *)v119.f32, *(float32x2_t *)v119.f32);
    v121 = vmulq_f32(v116, v101);
    v121.i64[0] = vpaddq_f32(v121, v121).u64[0];
    v122 = vpadd_f32(*(float32x2_t *)v121.f32, *(float32x2_t *)v121.f32);
    if (vuzp1_s8((int8x8_t)vdup_lane_s16((int16x4_t)vand_s8(vand_s8((int8x8_t)vcgez_f32(v120), (int8x8_t)vcgez_f32(v118)), (int8x8_t)vcgez_f32(v122)), 0), *(int8x8_t *)v229.f32).u32[0] != -1)
    {
      v123 = vnegq_f32(v229);
      v123.i32[3] = 0;
      v124 = vnegq_f32(v230);
      v124.i32[3] = 0;
      v125 = vmulq_f32(v123, v99);
      v125.i64[0] = vpaddq_f32(v125, v125).u64[0];
      v126 = vpadd_f32(*(float32x2_t *)v125.f32, *(float32x2_t *)v125.f32);
      v127 = vmulq_f32(v99, v124);
      v127.i64[0] = vpaddq_f32(v127, v127).u64[0];
      v128 = vpadd_f32(*(float32x2_t *)v127.f32, *(float32x2_t *)v127.f32);
      if (vuzp1_s8((int8x8_t)vdup_lane_s16((int16x4_t)vand_s8(vand_s8((int8x8_t)vcgez_f32(v126), (int8x8_t)vclez_f32(v128)), (int8x8_t)vclez_f32(v122)), 0), *(int8x8_t *)v229.f32).u32[0] == -1)
      {
        v153 = vsub_f32(v126, v128);
        v154 = vrecpe_f32(v153);
        v155 = 4;
        do
        {
          v154 = vmul_f32(v154, vrecps_f32(v153, v154));
          --v155;
        }
        while (v155);
        v140 = 0;
        v42 = vmlaq_n_f32(v229, v99, vmul_f32(v126, (float32x2_t)vbsl_s8((int8x8_t)vcgt_f32(vabs_f32(v153), (float32x2_t)0x3400000034000000), (int8x8_t)v154, 0)).f32[0]);
        v42.i64[1] = vextq_s8((int8x16_t)v42, (int8x16_t)v42, 8uLL).u32[0];
        v156 = 2;
        v139 = 1;
      }
      else
      {
        v129 = vnegq_f32(v231[0]);
        v129.i32[3] = 0;
        v130 = vmulq_f32(v124, v100);
        v130.i64[0] = vpaddq_f32(v130, v130).u64[0];
        v131 = vpadd_f32(*(float32x2_t *)v130.f32, *(float32x2_t *)v130.f32);
        v132 = vmulq_f32(v99, v129);
        v132.i64[0] = vpaddq_f32(v132, v132).u64[0];
        v133 = vpadd_f32(*(float32x2_t *)v132.f32, *(float32x2_t *)v132.f32);
        v134 = vmulq_f32(v100, v129);
        v134.i64[0] = vpaddq_f32(v134, v134).u64[0];
        v135 = vpadd_f32(*(float32x2_t *)v134.f32, *(float32x2_t *)v134.f32);
        if (vuzp1_s8((int8x8_t)vdup_lane_s16((int16x4_t)vand_s8(vand_s8((int8x8_t)vcge_f32(v131, v128), (int8x8_t)vcge_f32(v133, v135)), (int8x8_t)vclez_f32(v118)), 0), *(int8x8_t *)v229.f32).u32[0] != -1)
        {
          v136 = vmulq_f32(v123, v100);
          v136.i64[0] = vpaddq_f32(v136, v136).u64[0];
          v137 = vpadd_f32(*(float32x2_t *)v136.f32, *(float32x2_t *)v136.f32);
          if (vuzp1_s8((int8x8_t)vdup_lane_s16((int16x4_t)vand_s8(vand_s8((int8x8_t)vcgez_f32(v137), (int8x8_t)vclez_f32(v135)), (int8x8_t)vclez_f32(v120)), 0), *(int8x8_t *)v229.f32).u32[0] == -1)
          {
            v162 = vsub_f32(v137, v135);
            v163 = vrecpe_f32(v162);
            v164 = 4;
            v53 = (float32x4_t)v209;
            do
            {
              v163 = vmul_f32(v163, vrecps_f32(v162, v163));
              --v164;
            }
            while (v164);
            v140 = 0;
            v42 = vmlaq_n_f32(v229, v100, vmul_f32(v137, (float32x2_t)vbsl_s8((int8x8_t)vcgt_f32(vabs_f32(v162), (float32x2_t)0x3400000034000000), (int8x8_t)v163, 0)).f32[0]);
            v42.i64[1] = vextq_s8((int8x16_t)v42, (int8x16_t)v42, 8uLL).u32[0];
            v139 = 2;
            v156 = 2;
          }
          else
          {
            v53 = (float32x4_t)v209;
            if (vuzp1_s8((int8x8_t)vdup_lane_s16((int16x4_t)vand_s8((int8x8_t)vclez_f32(v137), (int8x8_t)vclez_f32(v126)), 0), *(int8x8_t *)v229.f32).u32[0] == -1)
            {
              v140 = 0;
              v139 = 1;
            }
            else
            {
              *(int16x4_t *)v42.f32 = vdup_lane_s16((int16x4_t)vand_s8((int8x8_t)vcge_f32(v128, v131), (int8x8_t)vcgez_f32(v128)), 0);
              *(int8x8_t *)v42.f32 = vuzp1_s8(*(int8x8_t *)v42.f32, *(int8x8_t *)v42.f32);
              v138 = v42.i32[0];
              v42 = (float32x4_t)vbslq_s8((int8x16_t)vdupq_lane_s32((int32x2_t)*(_OWORD *)&vceqq_s32((int32x4_t)v42, v200), 0), (int8x16_t)v230, (int8x16_t)v231[0]);
              v139 = 1;
              if (v138 == -1)
                v140 = 1;
              else
                v140 = 2;
            }
            v156 = 1;
          }
          goto LABEL_60;
        }
        v157 = vsub_f32(v131, v128);
        v158 = vadd_f32(v157, vsub_f32(v133, v135));
        v159 = vrecpe_f32(v158);
        v160 = 4;
        do
        {
          v159 = vmul_f32(v159, vrecps_f32(v158, v159));
          --v160;
        }
        while (v160);
        v161 = (int8x16_t)vmlaq_n_f32(v230, vsubq_f32(v231[0], v230), vmul_f32(v157, (float32x2_t)vbsl_s8((int8x8_t)vcgt_f32(vabs_f32(v158), (float32x2_t)0x3400000034000000), (int8x8_t)v159, 0)).f32[0]);
        v161.i64[1] = vextq_s8(v161, v161, 8uLL).u32[0];
        v139 = 2;
        v42 = (float32x4_t)v161;
        v140 = 1;
        v156 = 2;
      }
      v53 = (float32x4_t)v209;
LABEL_60:
      v165 = *(&v229 + v139);
      v166 = *(&v225 + v140);
      v167 = *(&v225 + v139);
      v168 = *(&v221 + v140);
      v169 = *(&v221 + v139);
      v229 = *(&v229 + v140);
      v230 = v165;
      v225 = v166;
      v226 = v167;
      v221 = v168;
      v222 = v169;
      v218 = v156;
      goto LABEL_61;
    }
    v148 = (int8x16_t)vmulq_f32(v229, v101);
    v149 = (float32x2_t)vextq_s8(v148, v148, 8uLL).u64[0];
    v150 = vrecpe_f32(v104);
    v151 = 4;
    v53 = (float32x4_t)v209;
    do
    {
      v150 = vmul_f32(v150, vrecps_f32(v104, v150));
      --v151;
    }
    while (v151);
    v152 = vpadd_f32(*(float32x2_t *)v148.i8, v149);
    v42 = vmulq_n_f32(v101, vmul_f32(v150, vpadd_f32(v152, v152)).f32[0]);
    v42.i32[3] = 0;
LABEL_61:
    v55 = vnegq_f32(v42);
    v55.i32[3] = 0;
    v170 = vmulq_f32(v42, v42);
    v170.i64[0] = vpaddq_f32(v170, v170).u64[0];
    v171 = vpadd_f32(*(float32x2_t *)v170.f32, *(float32x2_t *)v170.f32);
    v172 = (int8x8_t)vcgt_f32(v51, v171);
    v54 = (int8x16_t)vdupq_lane_s32((int32x2_t)vand_s8(v172, (int8x8_t)0x100000001), 0);
    v52 = vdupq_lane_s32((int32x2_t)vand_s8((int8x8_t)vcgt_f32(v171, v48), v172), 0);
    v51 = v171;
  }
  v173 = (int8x16_t)v53;
  v174 = (float32x4_t)vbslq_s8((int8x16_t)vcltzq_s32(vshlq_n_s32((int32x4_t)vandq_s8((int8x16_t)vdupq_lane_s32(vcgt_f32(v51, v201), 0), v54), 0x1FuLL)), (int8x16_t)v55, v204);
  v175 = vmulq_f32(v174, v174);
  v175.i64[0] = vpaddq_f32(v175, v175).u64[0];
  v176 = vpadd_f32(*(float32x2_t *)v175.f32, *(float32x2_t *)v175.f32);
  v177 = vrsqrte_f32(v176);
  v178 = 4;
  do
  {
    v177 = vmul_f32(v177, vrsqrts_f32(vmul_f32(v177, v177), v176));
    --v178;
  }
  while (v178);
  v179 = vmul_f32(v176, (float32x2_t)vbsl_s8((int8x8_t)vdup_lane_s32(vceqz_f32(v176), 0), (int8x8_t)_D8, (int8x8_t)v177));
  v180 = vrecpe_f32(v179);
  v181 = 4;
  do
  {
    v180 = vmul_f32(v180, vrecps_f32(v179, v180));
    --v181;
  }
  while (v181);
  v182 = (int8x16_t)vdupq_n_s32(-*(char *)(*(_QWORD *)(a1 + 8) + 32));
  v183 = (int8x16_t)vmulq_n_f32(v174, v180.f32[0]);
  v183.i32[3] = 0;
  v184 = vnegq_f32((float32x4_t)vandq_s8((int8x16_t)vdupq_lane_s32(vcgtz_f32(v179), 0), v183));
  v184.i32[3] = 0;
  *a9 = v184;
  *a8 = v56;
  v185 = (float32x4_t)vbslq_s8((int8x16_t)vcltzq_s32(vshlq_n_s32((int32x4_t)v54, 0x1FuLL)), v57, v173);
  v216 = v185;
  if (v218 == 3)
  {
    v219 = 0;
    v220 = 0;
    v212 = v184;
    v215 = v182;
    physx::Gu::barycentricCoordinates(&v216, &v229, &v230, v231, &v220, &v219);
    v184 = v212;
    v182 = v215;
    v54.i32[1] = v225.i32[1];
    v188 = vmulq_n_f32(vsubq_f32(v226, v225), v220.f32[0]);
    v188.i32[3] = 0;
    v189 = vmulq_n_f32(vsubq_f32(v227, v225), v219.f32[0]);
    v189.i32[3] = 0;
    v186 = vaddq_f32(v225, vaddq_f32(v188, v189));
    v187 = a10;
  }
  else if (v218 == 2)
  {
    v190 = vsubq_f32(v229, v185);
    v191 = vsubq_f32(vsubq_f32(v230, v185), v190);
    v192 = vmulq_f32(v191, v191);
    v192.i64[0] = vpaddq_f32(v192, v192).u64[0];
    v193 = vpadd_f32(*(float32x2_t *)v192.f32, *(float32x2_t *)v192.f32);
    v194 = vrecpe_f32(v193);
    v195 = 4;
    v187 = a10;
    do
    {
      v194 = vmul_f32(v194, vrecps_f32(v193, v194));
      --v195;
    }
    while (v195);
    v196 = vnegq_f32(v190);
    v196.i32[3] = 0;
    v197 = vmulq_f32(v196, v191);
    v197.i64[0] = vpaddq_f32(v197, v197).u64[0];
    v186 = vmlaq_n_f32(v225, vsubq_f32(v226, v225), vmul_f32((float32x2_t)vbsl_s8((int8x8_t)vcgtz_f32(v193), (int8x8_t)v194, 0), vpadd_f32(*(float32x2_t *)v197.f32, *(float32x2_t *)v197.f32)).f32[0]);
    v54.i32[1] = 0;
    v186.i64[1] = vextq_s8((int8x16_t)v186, (int8x16_t)v186, 8uLL).u32[0];
  }
  else
  {
    v186 = 0uLL;
    v187 = a10;
    if (v218 == 1)
      v186 = v225;
  }
  v54.i32[0] = *(_DWORD *)(*(_QWORD *)(a1 + 8) + 16);
  v198 = (int8x16_t)vmlsq_lane_f32(v186, v184, *(float32x2_t *)v54.i8, 0);
  v198.i64[1] = vextq_s8(v198, v198, 8uLL).u32[0];
  *v187 = vbslq_s8(v182, v198, (int8x16_t)v186);
  return v59 != -1;
}

void BoxTraceSegmentReport::~BoxTraceSegmentReport(BoxTraceSegmentReport *this)
{
  JUMPOUT(0x2276933B8);
}

BOOL BoxTraceSegmentReport::onEvent(BoxTraceSegmentReport *this, unsigned int a2, unsigned int *a3)
{
  float32x4_t v3;
  uint64_t v6;
  BOOL v7;
  unint64_t i;
  unsigned int v9;
  float32x4_t v10;
  float32x4_t v11;
  float32x4_t v12;
  float32x4_t *v13;
  float32x4_t v14;
  float32x2_t v15;
  float v16;
  float32x4_t v17;
  float32x2_t v18;
  float32x2_t v19;
  float32x2_t v20;
  int8x8_t v21;
  float32x4_t v22;
  float32x4_t v23;
  float32x4_t v24;
  float32x4_t v25;
  float32x4_t v26;
  float32x4_t v27;
  float32x4_t v28;
  int8x8_t v29;
  float32x4_t v30;
  float32x4_t v31;
  float32x4_t v32;
  float32x4_t v33;
  float32x4_t v34;
  float32x4_t v35;
  float32x4_t v36;
  float32x4_t v37;
  float32x4_t v38;
  float32x4_t v39;
  float32x4_t v40;
  float32x4_t v41;
  int8x16_t v42;
  int8x8_t v43;
  float32x4_t v44;
  float32x4_t v45;
  float32x4_t *v46;
  float32x4_t v47;
  float32x2_t v48;
  float v49;
  int8x16_t v50;
  int8x16_t v51;
  uint64_t v52;
  uint64_t v54;
  float32x4_t v55;
  _QWORD v56[2];
  _QWORD v57[2];
  float32x4_t v58;
  uint64_t v59;
  uint64_t v60;
  char v61;
  float32x4_t v62;
  float32x4_t v63;
  float32x4_t v64;
  _BYTE v65[20];
  unsigned int v66;
  float32x2_t v67;
  unsigned int v68;
  float32x4_t v69;
  float32x4_t v70;
  uint64_t v71;
  float32x2_t v72;
  int8x16_t v73;
  int8x16_t v74[2];

  v71 = 0;
  v70 = 0uLL;
  v3.i64[0] = *((_QWORD *)this + 7);
  v3.i64[1] = *((unsigned int *)this + 16);
  v69 = v3;
  if (a2)
  {
    v6 = 0;
    v7 = 0;
    for (i = a2; i != v6; v7 = ++v6 >= i)
    {
      v9 = a3[v6];
      physx::Gu::HeightFieldUtil::getTriangle(*((_QWORD *)this + 1), *((float **)this + 4), (uint64_t)v65, 0, 0, v9, 1, 1);
      v10.i64[0] = *(_QWORD *)v65;
      v10.i64[1] = *(unsigned int *)&v65[8];
      v11.i64[0] = *(_QWORD *)&v65[12];
      v11.i64[1] = v66;
      *(float32x2_t *)v12.f32 = v67;
      v12.i64[1] = v68;
      v13 = (float32x4_t *)*((_QWORD *)this + 3);
      v14 = *v13;
      v14.i32[3] = 0;
      v15 = (float32x2_t)vdupq_laneq_s32(*(int32x4_t *)v13, 3).u64[0];
      LODWORD(v16) = vmla_f32((float32x2_t)0xBF000000BF000000, v15, v15).u32[0];
      v17 = vmulq_n_f32(v10, v16);
      v17.i32[3] = 0;
      v18 = (float32x2_t)vextq_s8((int8x16_t)v14, (int8x16_t)v14, 8uLL).u64[0];
      v19 = (float32x2_t)vextq_s8((int8x16_t)v10, (int8x16_t)v10, 8uLL).u64[0];
      v20 = (float32x2_t)vext_s8(*(int8x8_t *)v13->f32, (int8x8_t)v18, 4uLL);
      v21 = (int8x8_t)vmls_f32(vmul_f32((float32x2_t)vext_s8(*(int8x8_t *)v65, (int8x8_t)v19, 4uLL), *(float32x2_t *)v13->f32), v20, *(float32x2_t *)v65);
      *(int8x8_t *)v22.f32 = vext_s8(v21, (int8x8_t)vmls_f32(vmul_f32(*(float32x2_t *)v65, v18), *(float32x2_t *)v13->f32, v19), 4uLL);
      v22.i64[1] = v21.u32[0];
      v23 = vmlaq_laneq_f32(v17, v22, *v13, 3);
      v23.i64[1] = vextq_s8((int8x16_t)v23, (int8x16_t)v23, 8uLL).u32[0];
      v24 = vmulq_f32(v10, v14);
      v24.i64[0] = vpaddq_f32(v24, v24).u64[0];
      v25 = vmlaq_n_f32(v23, v14, vpadd_f32(*(float32x2_t *)v24.f32, *(float32x2_t *)v24.f32).f32[0]);
      v25.i64[1] = vextq_s8((int8x16_t)v25, (int8x16_t)v25, 8uLL).u32[0];
      v26.i64[0] = 0x4000000040000000;
      v26.i64[1] = 0x4000000040000000;
      v27 = vmlaq_f32(v13[1], v26, v25);
      v27.i64[1] = vextq_s8((int8x16_t)v27, (int8x16_t)v27, 8uLL).u32[0];
      v28 = vmulq_n_f32(v11, v16);
      v28.i32[3] = 0;
      v25.i64[0] = vextq_s8((int8x16_t)v11, (int8x16_t)v11, 8uLL).u64[0];
      v29 = (int8x8_t)vmls_f32(vmul_f32((float32x2_t)vext_s8(*(int8x8_t *)&v65[12], *(int8x8_t *)v25.f32, 4uLL), *(float32x2_t *)v13->f32), v20, *(float32x2_t *)&v65[12]);
      *(int8x8_t *)v30.f32 = vext_s8(v29, (int8x8_t)vmls_f32(vmul_f32(*(float32x2_t *)&v65[12], v18), *(float32x2_t *)v13->f32, *(float32x2_t *)v25.f32), 4uLL);
      v30.i64[1] = v29.u32[0];
      v31 = vmlaq_laneq_f32(v28, v30, *v13, 3);
      v31.i64[1] = vextq_s8((int8x16_t)v31, (int8x16_t)v31, 8uLL).u32[0];
      v32 = vmulq_f32(v11, v14);
      v32.i64[0] = vpaddq_f32(v32, v32).u64[0];
      v33 = vmlaq_n_f32(v31, v14, vpadd_f32(*(float32x2_t *)v32.f32, *(float32x2_t *)v32.f32).f32[0]);
      v33.i64[1] = vextq_s8((int8x16_t)v33, (int8x16_t)v33, 8uLL).u32[0];
      v34 = vmlaq_f32(v13[1], v26, v33);
      v34.i64[1] = vextq_s8((int8x16_t)v34, (int8x16_t)v34, 8uLL).u32[0];
      v35 = vmulq_n_f32(v12, v16);
      v35.i32[3] = 0;
      v30.i64[0] = vextq_s8((int8x16_t)v12, (int8x16_t)v12, 8uLL).u64[0];
      *(float32x2_t *)v33.f32 = vmls_f32(vmul_f32(*(float32x2_t *)v13->f32, (float32x2_t)vext_s8((int8x8_t)v67, *(int8x8_t *)v30.f32, 4uLL)), v20, v67);
      *(int8x8_t *)v36.f32 = vext_s8(*(int8x8_t *)v33.f32, (int8x8_t)vmls_f32(vmul_f32(v67, v18), *(float32x2_t *)v13->f32, *(float32x2_t *)v30.f32), 4uLL);
      v36.i64[1] = v33.u32[0];
      v37 = vmlaq_laneq_f32(v35, v36, *v13, 3);
      v37.i64[1] = vextq_s8((int8x16_t)v37, (int8x16_t)v37, 8uLL).u32[0];
      v38 = vmulq_f32(v12, v14);
      v38.i64[0] = vpaddq_f32(v38, v38).u64[0];
      v39 = vmlaq_n_f32(v37, v14, vpadd_f32(*(float32x2_t *)v38.f32, *(float32x2_t *)v38.f32).f32[0]);
      v39.i64[1] = vextq_s8((int8x16_t)v39, (int8x16_t)v39, 8uLL).u32[0];
      v40 = vmlaq_f32(v13[1], v26, v39);
      v40.i64[1] = vextq_s8((int8x16_t)v40, (int8x16_t)v40, 8uLL).u32[0];
      if (!*((_BYTE *)this + 20))
      {
        v41 = vsubq_f32(v40, v34);
        v42 = (int8x16_t)vsubq_f32(v27, v34);
        v43 = (int8x8_t)vmls_f32(vmul_f32(*(float32x2_t *)v41.f32, (float32x2_t)*(_OWORD *)&vextq_s8(v42, v42, 4uLL)), (float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v41, (int8x16_t)v41, 4uLL), *(float32x2_t *)v42.i8);
        *(int8x8_t *)v41.f32 = vext_s8(v43, (int8x8_t)vmls_f32(vmul_f32((float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v41, (int8x16_t)v41, 8uLL), *(float32x2_t *)v42.i8), *(float32x2_t *)v41.f32, (float32x2_t)*(_OWORD *)&vextq_s8(v42, v42, 8uLL)), 4uLL);
        v41.i64[1] = v43.u32[0];
        v44 = vmulq_f32(v41, v69);
        v44.i64[0] = vpaddq_f32(v44, v44).u64[0];
        if (vpadd_f32(*(float32x2_t *)v44.f32, *(float32x2_t *)v44.f32).f32[0] >= *(float *)&v71)
          continue;
      }
      v61 = 0;
      v45 = vmulq_f32(vaddq_f32(v40, vaddq_f32(v27, v34)), (float32x4_t)vdupq_n_s32(0x3EAAAA9Fu));
      v45.i32[3] = 0;
      v58 = v45;
      v62 = v27;
      v63 = v34;
      v64 = v40;
      v59 = 0x7F7FFFFF00000000;
      v60 = 0x57F7FFFFFLL;
      v57[0] = off_24ED91370;
      v57[1] = &v58;
      v46 = (float32x4_t *)*((_QWORD *)this + 5);
      v56[0] = off_24ED913D0;
      v56[1] = v46;
      v55 = 0u;
      v47 = vsubq_f32(v45, *v46);
      v55 = v47;
      v47.i32[0] = *((_DWORD *)this + 20);
      v73 = 0u;
      v74[0] = 0u;
      v72 = 0;
      if (physx::Gu::gjkRaycast<physx::Gu::LocalConvex<physx::Gu::TriangleV>,physx::Gu::LocalConvex<physx::Gu::BoxV>>((uint64_t)v57, (uint64_t)v56, &v55, *(int32x2_t *)v47.f32, (uint64_t)&v71, &v70, &v69, &v72, (float32x4_t *)&v73, v74))
      {
        v49 = *(float *)&v71;
        v48 = v72;
        v51 = v73;
        v50 = v74[0];
        *((_BYTE *)this + 18) = 1;
        if (v48.f32[0] <= v49)
        {
          v54 = *((_QWORD *)this + 9);
          *(_DWORD *)(v54 + 48) = 0;
          *(_DWORD *)(v54 + 16) = v9;
          *((_BYTE *)this + 19) = 1;
          return v7;
        }
        if (COERCE_FLOAT(*((_QWORD *)this + 6)) > v48.f32[0])
        {
          *((float32x2_t *)this + 6) = v48;
          v52 = *((_QWORD *)this + 9);
          *(_DWORD *)(v52 + 48) = v48.i32[0];
          *(_QWORD *)(v52 + 40) = vextq_s8(v51, v51, 4uLL).u64[0];
          v50.i32[3] = v51.i32[0];
          *(int8x16_t *)(v52 + 24) = v50;
          *(_DWORD *)(v52 + 16) = v9;
          if (*((_BYTE *)this + 21))
            return v7;
        }
      }
    }
  }
  return 1;
}

uint64_t physx::Gu::HeightFieldTraceUtil::OverlapTraceSegment<CapsuleTraceSegmentReport>::testVertexIndex(uint64_t a1, unsigned int a2)
{
  uint64_t v3;
  float v4;
  float v5;
  float v6;
  float v7;
  float v8;
  float v13;
  BOOL v14;
  BOOL v15;
  unsigned int v17;
  uint64_t result;
  unsigned int v19;
  int v20;

  v3 = *(_QWORD *)(*(_QWORD *)(a1 + 16) + 80);
  v4 = (float)*(__int16 *)(v3 + 4 * a2);
  v5 = (float)*(__int16 *)(v3 + 4 * (a2 + 1));
  v6 = (float)*(__int16 *)(v3 + 4 * (*(_DWORD *)(a1 + 64) + a2));
  v7 = (float)*(__int16 *)(v3 + 4 * (*(_DWORD *)(a1 + 64) + a2 + 1));
  v8 = *(float *)(a1 + 44);
  if (v8 < v4 && v8 < v5 && v8 < v6 && v8 < v7)
    return 1;
  v13 = *(float *)(a1 + 40);
  v14 = v13 <= v4 || v13 <= v5;
  v15 = v14 || v13 <= v6;
  if (!v15 && v13 > v7)
    return 1;
  if ((~*(unsigned __int8 *)(v3 + 4 * a2 + 2) & 0x7F) != 0)
  {
    v17 = *(_DWORD *)(a1 + 364);
    if (v17 == 64)
    {
      result = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(a1 + 24) + 16))(*(_QWORD *)(a1 + 24), 64, a1 + 108);
      if (!(_DWORD)result)
        return result;
      v17 = 0;
      v3 = *(_QWORD *)(*(_QWORD *)(a1 + 16) + 80);
    }
    *(_DWORD *)(a1 + 364) = v17 + 1;
    *(_DWORD *)(a1 + 4 * v17 + 108) = 2 * a2;
  }
  result = 1;
  if ((~*(unsigned __int8 *)(v3 + 4 * a2 + 3) & 0x7F) != 0)
  {
    v19 = *(_DWORD *)(a1 + 364);
    if (v19 != 64
      || (v20 = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(a1 + 24) + 16))(*(_QWORD *)(a1 + 24), 64, a1 + 108), v19 = 0, result = 0, v20))
    {
      *(_DWORD *)(a1 + 364) = v19 + 1;
      *(_DWORD *)(a1 + 4 * v19 + 108) = (2 * a2) | 1;
      return 1;
    }
  }
  return result;
}

uint64_t physx::Gu::intersectOBBOBB(float *a1, float *a2, float *a3, float *a4, float *a5, uint64_t a6, int a7)
{
  uint64_t v7;
  uint64_t v8;
  float v9;
  float v10;
  float v11;
  float v12;
  float v13;
  float v14;
  uint64_t v15;
  float *v16;
  float v17;
  float v18;
  float v19;
  float *v20;
  float v21;
  float v22;
  float v23;
  uint64_t v24;
  float v25;
  float v26;
  float v27;
  float *i;
  unint64_t v29;
  float v30;
  float v31;
  float v32;
  float v33;
  _DWORD v35[3];
  float v36;
  float v37;
  float v38;
  float v39;
  float v40;
  float v41;
  float v42;
  float v43;
  float v44;
  float v45;
  float v46;
  float v47;
  float v48;
  float v49;
  float v50;
  float v51;
  float v52;
  float v53;
  uint64_t v54;

  v7 = 0;
  v8 = 0;
  v54 = *MEMORY[0x24BDAC8D0];
  v9 = *a5 - *a2;
  v10 = a5[1] - a2[1];
  v11 = a5[2] - a2[2];
  v12 = (float)((float)(v10 * a3[1]) + (float)(v9 * *a3)) + (float)(v11 * a3[2]);
  v13 = (float)((float)(v10 * a3[4]) + (float)(v9 * a3[3])) + (float)(v11 * a3[5]);
  v14 = (float)((float)(v10 * a3[7]) + (float)(v9 * a3[6])) + (float)(v11 * a3[8]);
  *(float *)v35 = v12;
  *(float *)&v35[1] = v13;
  *(float *)&v35[2] = v14;
  do
  {
    v15 = 0;
    v16 = &a3[3 * v8];
    v17 = *v16;
    v18 = v16[1];
    v19 = v16[2];
    v20 = (float *)(a6 + 8);
    do
    {
      v21 = (float)(v18 * *(v20 - 1)) + (float)(v17 * *(v20 - 2));
      v22 = *v20;
      v20 += 3;
      v23 = v21 + (float)(v19 * v22);
      *(float *)((char *)&v45 + v7 + v15) = v23;
      *(float *)((char *)&v36 + v7 + v15) = fabsf(v23) + 0.000001;
      v15 += 4;
    }
    while (v15 != 12);
    ++v8;
    v7 += 12;
  }
  while (v8 != 3);
  v24 = 0;
  v25 = *a4;
  v26 = a4[1];
  v27 = a4[2];
  for (i = &v38;
        fabsf(*(float *)&v35[v24]) <= (float)(a1[v24]
                                            + (float)((float)((float)(v26 * *(i - 1)) + (float)(v25 * *(i - 2)))
                                                    + (float)(v27 * *i)));
        i += 3)
  {
    if (++v24 == 3)
    {
      v29 = 0;
      v30 = *a1;
      v31 = a1[1];
      v32 = a1[2];
      while (fabsf((float)((float)(v13 * *(float *)((char *)&v48 + v29)) + (float)(v12 * *(float *)((char *)&v45 + v29)))+ (float)(v14 * *(float *)((char *)&v51 + v29))) <= (float)(a4[v29 / 4]+ (float)((float)((float)(v31* *(float *)((char *)&v39 + v29))+ (float)(v30* *(float *)((char *)&v36 + v29)))+ (float)(v32* *(float *)((char *)&v42 + v29)))))
      {
        v29 += 4;
        if (v29 == 12)
        {
          if (!a7)
            return 1;
          if (fabsf((float)(v14 * v48) - (float)(v13 * v51)) <= (float)((float)((float)(v32 * v39) + (float)(v31 * v42))
                                                                       + (float)((float)(v27 * v37) + (float)(v26 * v38)))
            && fabsf((float)(v52 * (float)-v13) + (float)(v14 * v49)) <= (float)((float)((float)(v32 * v40)
                                                                                       + (float)(v31 * v43))
                                                                               + (float)((float)(v27 * v36)
                                                                                       + (float)(v25 * v38)))
            && fabsf((float)(v53 * (float)-v13) + (float)(v14 * v50)) <= (float)((float)((float)(v26 * v36)
                                                                                       + (float)(v25 * v37))
                                                                               + (float)((float)(v32 * v41)
                                                                                       + (float)(v31 * v44)))
            && fabsf((float)(v12 * v51) - (float)(v14 * v45)) <= (float)((float)((float)(v32 * v36) + (float)(v30 * v42))
                                                                       + (float)((float)(v27 * v40) + (float)(v26 * v41)))
            && fabsf((float)(v46 * (float)-v14) + (float)(v12 * v52)) <= (float)((float)((float)(v32 * v37)
                                                                                       + (float)(v30 * v43))
                                                                               + (float)((float)(v27 * v39)
                                                                                       + (float)(v25 * v41)))
            && fabsf((float)(v47 * (float)-v14) + (float)(v12 * v53)) <= (float)((float)((float)(v26 * v39)
                                                                                       + (float)(v25 * v40))
                                                                               + (float)((float)(v32 * v38)
                                                                                       + (float)(v30 * v44)))
            && fabsf((float)(v13 * v45) - (float)(v12 * v48)) <= (float)((float)((float)(v31 * v36) + (float)(v30 * v39))
                                                                       + (float)((float)(v27 * v43) + (float)(v26 * v44))))
          {
            v33 = -v12;
            if (fabsf((float)(v49 * v33) + (float)(v13 * v46)) <= (float)((float)((float)(v31 * v37)
                                                                                 + (float)(v30 * v40))
                                                                         + (float)((float)(v27 * v42)
                                                                                 + (float)(v25 * v44)))
              && fabsf((float)(v50 * v33) + (float)(v13 * v47)) <= (float)((float)((float)(v26 * v42)
                                                                                 + (float)(v25 * v43))
                                                                         + (float)((float)(v31 * v38)
                                                                                 + (float)(v30 * v41))))
            {
              return 1;
            }
          }
          return 0;
        }
      }
      return 0;
    }
  }
  return 0;
}

BOOL physx::Gu::intersectCapsuleTriangle(float *a1, float *a2, float *a3, float *a4, float *a5, float *a6)
{
  float v6;
  float v7;
  float v8;
  float v9;
  float v10;
  float v11;
  float v12;
  float v13;
  float v14;
  float v15;
  float v16;
  float v17;
  float v18;
  float v19;
  float v20;
  float v21;
  float v22;
  float v23;
  float v24;
  float v25;
  float v26;
  float v27;
  float v28;
  float v29;
  float v30;
  float v31;
  float v32;
  float v33;
  float v34;
  float v35;
  float v36;
  float v37;
  float v38;
  float v39;
  float v40;
  float v41;
  float v42;
  float v43;
  float v44;
  float v45;
  float v46;
  float v47;
  float v49;
  float v50;
  float v51;
  float v52;
  float v53;
  float v54;
  float v55;
  float v56;
  float v57;
  float v58;
  float v59;
  float v60;
  float v61;
  float v63;
  float v64;
  float v65;
  float v66;
  float v67;
  float v68;
  float v69;
  float v70;
  float v71;
  float v72;
  float v73;
  float v74;
  float v75;
  float v76;
  float v77;
  float v79;
  float v80;
  float v81;
  float v82;
  float v83;
  float v84;
  float v85;
  float v86;
  float v87;
  float v88;
  float v89;
  float v90;
  float v91;
  float v92;
  float v93;
  float v94;
  float v95;
  float v96;
  float v97;
  float v98;
  float v99;
  float v100;
  float v101;
  float v102;
  float v103;
  float v104;
  float v105;
  float v107;
  float v108;
  float v109;
  float v110;
  float v111;
  float v112;
  float v113;
  float v114;
  float v115;
  float v116;
  float v117;
  float v118;
  float v119;
  float v120;
  float v121;
  float v122;
  float v123;
  float v124;
  float v125;
  float v126;
  float v127;
  float v128;
  float v129;
  float v130;
  float v131;
  float v132;
  float v133;

  v6 = *a2;
  v7 = a2[1];
  v8 = *a5;
  v9 = a5[1];
  v10 = *a2 - *a5;
  v11 = v7 - v9;
  v12 = a2[2];
  v13 = a5[2];
  v14 = v12 - v13;
  v15 = *a6;
  v16 = a6[1];
  v17 = a6[2];
  v18 = (float)((float)((float)(v7 - v9) * v16) + (float)(v10 * *a6)) + (float)((float)(v12 - v13) * v17);
  if (v18 > 0.0)
  {
    v19 = (float)((float)(v16 * v16) + (float)(v15 * v15)) + (float)(v17 * v17);
    if (v18 >= v19)
    {
      v10 = v10 - v15;
      v11 = v11 - v16;
      v14 = v14 - v17;
    }
    else
    {
      v20 = v18 / v19;
      v10 = v10 - (float)(v15 * v20);
      v11 = v11 - (float)(v16 * v20);
      v14 = v14 - (float)(v17 * v20);
    }
  }
  v21 = (float)((float)(v11 * v11) + (float)(v10 * v10)) + (float)(v14 * v14);
  v22 = a5[6];
  if (v21 <= (float)(v22 * v22))
    return 1;
  v23 = *a1;
  v24 = a1[1];
  v25 = a1[2];
  v26 = (float)((float)(v9 * v24) + (float)(v8 * *a1)) + (float)(v13 * v25);
  v27 = a5[3];
  v28 = a5[4];
  v29 = a5[5];
  v30 = (float)((float)(v24 * v28) + (float)(v27 * *a1)) + (float)(v29 * v25);
  if (v26 <= v30)
    v31 = (float)((float)(v24 * v28) + (float)(v27 * *a1)) + (float)(v29 * v25);
  else
    v31 = (float)((float)(v9 * v24) + (float)(v8 * *a1)) + (float)(v13 * v25);
  if (v26 > v30)
    v26 = (float)((float)(v24 * v28) + (float)(v27 * *a1)) + (float)(v29 * v25);
  v32 = v22 * sqrtf((float)((float)(v24 * v24) + (float)(v23 * v23)) + (float)(v25 * v25));
  v33 = v26 - v32;
  v34 = v32 + v31;
  v35 = (float)((float)(v7 * v24) + (float)(v6 * v23)) + (float)(v12 * v25);
  v36 = *a3;
  v37 = a3[1];
  v38 = a3[2];
  v39 = (float)((float)(v24 * v37) + (float)(*a3 * v23)) + (float)(v38 * v25);
  if (v39 >= v35)
    v40 = (float)((float)(v7 * v24) + (float)(v6 * v23)) + (float)(v12 * v25);
  else
    v40 = (float)((float)(v24 * v37) + (float)(*a3 * v23)) + (float)(v38 * v25);
  if (v39 <= v35)
    v41 = (float)((float)(v7 * v24) + (float)(v6 * v23)) + (float)(v12 * v25);
  else
    v41 = (float)((float)(v24 * v37) + (float)(*a3 * v23)) + (float)(v38 * v25);
  v42 = *a4;
  v43 = a4[1];
  v44 = (float)(v24 * v43) + (float)(*a4 * v23);
  v45 = a4[2];
  v46 = v44 + (float)(v45 * v25);
  if (v46 >= v40)
    v47 = v40;
  else
    v47 = v46;
  if (v46 <= v41)
    v46 = v41;
  if (v34 < v47 || v46 < v33)
    return 0;
  v49 = v36 - v6;
  v50 = v37 - v7;
  v51 = v38 - v12;
  v52 = a6[3];
  v133 = a6[4];
  v53 = (float)((float)(v50 * v50) + (float)(v49 * v49)) + (float)(v51 * v51);
  v54 = (float)((float)(v16 * (float)(v37 - v7)) + (float)((float)(v36 - v6) * v15)) + (float)((float)(v38 - v12) * v17);
  v55 = (float)((float)((float)(v9 - v7) * (float)(v37 - v7)) + (float)((float)(v36 - v6) * (float)(v8 - v6)))
      + (float)((float)(v38 - v12) * (float)(v13 - v12));
  v56 = (float)(v53 * v52) - (float)(v54 * v54);
  v57 = 0.0;
  if (v56 != 0.0)
    v57 = (float)((float)(v54
                        * (float)-(float)((float)((float)((float)(v9 - v7) * v16) + (float)(v15 * (float)(v8 - v6)))
                                        + (float)(v17 * (float)(v13 - v12))))
                + (float)(v55 * v52))
        / v56;
  v132 = a6[3];
  if (v57 < 0.0)
    v57 = 0.0;
  v58 = v57 <= 1.0 ? v57 : 1.0;
  v59 = v133
      * (float)((float)(v58 * v54)
              - (float)((float)((float)((float)(v9 - v7) * v16) + (float)(v15 * (float)(v8 - v6)))
                      + (float)(v17 * (float)(v13 - v12))));
  if (v59 >= 0.0)
  {
    v61 = a5[3];
    if (v59 > 1.0)
    {
      v63 = (float)(v54 + v55) / v53;
      if (v63 < 0.0)
        v63 = 0.0;
      v59 = 1.0;
      if (v63 <= 1.0)
        v58 = v63;
      else
        v58 = 1.0;
    }
  }
  else
  {
    v60 = v55 / v53;
    v59 = 0.0;
    if ((float)(v55 / v53) < 0.0)
      v60 = 0.0;
    v58 = v60 <= 1.0 ? v60 : 1.0;
    v61 = a5[3];
  }
  v64 = (float)((float)(v8 - v6) + (float)(v15 * v59)) - (float)(v49 * v58);
  v65 = (float)((float)(v9 - v7) + (float)(v16 * v59)) - (float)(v50 * v58);
  v66 = (float)((float)(v13 - v12) + (float)(v17 * v59)) - (float)(v51 * v58);
  v67 = (float)((float)(v9 * v65) + (float)(v8 * v64)) + (float)(v13 * v66);
  v68 = (float)((float)(v28 * v65) + (float)(v61 * v64)) + (float)(v29 * v66);
  if (v67 <= v68)
    v69 = (float)((float)(v28 * v65) + (float)(v61 * v64)) + (float)(v29 * v66);
  else
    v69 = (float)((float)(v9 * v65) + (float)(v8 * v64)) + (float)(v13 * v66);
  if (v67 > v68)
    v67 = (float)((float)(v28 * v65) + (float)(v61 * v64)) + (float)(v29 * v66);
  v70 = v22 * sqrtf((float)((float)(v65 * v65) + (float)(v64 * v64)) + (float)(v66 * v66));
  v71 = v67 - v70;
  v72 = v69 + v70;
  v73 = (float)((float)(v7 * v65) + (float)(v6 * v64)) + (float)(v12 * v66);
  v74 = (float)((float)(v37 * v65) + (float)(v36 * v64)) + (float)(v38 * v66);
  if (v74 >= v73)
    v75 = (float)((float)(v7 * v65) + (float)(v6 * v64)) + (float)(v12 * v66);
  else
    v75 = (float)((float)(v37 * v65) + (float)(v36 * v64)) + (float)(v38 * v66);
  if (v74 > v73)
    v73 = (float)((float)(v37 * v65) + (float)(v36 * v64)) + (float)(v38 * v66);
  v76 = (float)((float)(v43 * v65) + (float)(v42 * v64)) + (float)(v45 * v66);
  if (v76 >= v75)
    v77 = v75;
  else
    v77 = v76;
  if (v76 <= v73)
    v76 = v73;
  if (v72 < v77 || v76 < v71)
    return 0;
  v79 = v42 - v36;
  v80 = v43 - v37;
  v81 = v45 - v38;
  v82 = (float)((float)(v80 * v80) + (float)(v79 * v79)) + (float)(v81 * v81);
  v83 = (float)((float)(v16 * (float)(v43 - v37)) + (float)((float)(v42 - v36) * v15))
      + (float)((float)(v45 - v38) * v17);
  v84 = (float)((float)((float)(v9 - v37) * (float)(v43 - v37)) + (float)((float)(v42 - v36) * (float)(v8 - v36)))
      + (float)((float)(v45 - v38) * (float)(v13 - v38));
  v85 = (float)(v82 * v132) - (float)(v83 * v83);
  v86 = 0.0;
  if (v85 != 0.0)
    v86 = (float)((float)(v83
                        * (float)-(float)((float)((float)(v16 * (float)(v9 - v37)) + (float)(v15 * (float)(v8 - v36)))
                                        + (float)(v17 * (float)(v13 - v38))))
                + (float)(v84 * v132))
        / v85;
  if (v86 < 0.0)
    v86 = 0.0;
  v87 = v86 <= 1.0 ? v86 : 1.0;
  v88 = v133
      * (float)((float)(v87 * v83)
              - (float)((float)((float)(v16 * (float)(v9 - v37)) + (float)(v15 * (float)(v8 - v36)))
                      + (float)(v17 * (float)(v13 - v38))));
  if (v88 >= 0.0)
  {
    v90 = a5[3];
    if (v88 > 1.0)
    {
      v91 = (float)(v83 + v84) / v82;
      if (v91 < 0.0)
        v91 = 0.0;
      v88 = 1.0;
      if (v91 <= 1.0)
        v87 = v91;
      else
        v87 = 1.0;
    }
  }
  else
  {
    v89 = v84 / v82;
    v88 = 0.0;
    if ((float)(v84 / v82) < 0.0)
      v89 = 0.0;
    v87 = v89 <= 1.0 ? v89 : 1.0;
    v90 = a5[3];
  }
  v92 = (float)((float)(v8 - v36) + (float)(v15 * v88)) - (float)(v79 * v87);
  v93 = (float)((float)(v9 - v37) + (float)(v16 * v88)) - (float)(v80 * v87);
  v94 = (float)((float)(v13 - v38) + (float)(v17 * v88)) - (float)(v81 * v87);
  v95 = (float)((float)(v9 * v93) + (float)(v8 * v92)) + (float)(v13 * v94);
  v96 = (float)((float)(v28 * v93) + (float)(v90 * v92)) + (float)(v29 * v94);
  if (v95 <= v96)
    v97 = (float)((float)(v28 * v93) + (float)(v90 * v92)) + (float)(v29 * v94);
  else
    v97 = (float)((float)(v9 * v93) + (float)(v8 * v92)) + (float)(v13 * v94);
  if (v95 > v96)
    v95 = (float)((float)(v28 * v93) + (float)(v90 * v92)) + (float)(v29 * v94);
  v98 = v22 * sqrtf((float)((float)(v93 * v93) + (float)(v92 * v92)) + (float)(v94 * v94));
  v99 = v95 - v98;
  v100 = v97 + v98;
  v101 = (float)((float)(v7 * v93) + (float)(v6 * v92)) + (float)(v12 * v94);
  v102 = (float)((float)(v37 * v93) + (float)(v36 * v92)) + (float)(v38 * v94);
  if (v102 >= v101)
    v103 = (float)((float)(v7 * v93) + (float)(v6 * v92)) + (float)(v12 * v94);
  else
    v103 = (float)((float)(v37 * v93) + (float)(v36 * v92)) + (float)(v38 * v94);
  if (v102 > v101)
    v101 = (float)((float)(v37 * v93) + (float)(v36 * v92)) + (float)(v38 * v94);
  v104 = (float)((float)(v43 * v93) + (float)(v42 * v92)) + (float)(v45 * v94);
  if (v104 >= v103)
    v105 = v103;
  else
    v105 = v104;
  if (v104 <= v101)
    v104 = v101;
  if (v100 < v105 || v104 < v99)
    return 0;
  v107 = v6 - v42;
  v108 = v7 - v43;
  v109 = v12 - v45;
  v110 = (float)((float)(v108 * v108) + (float)(v107 * v107)) + (float)(v109 * v109);
  v111 = (float)((float)(v16 * (float)(v7 - v43)) + (float)((float)(v6 - v42) * v15))
       + (float)((float)(v12 - v45) * v17);
  v112 = (float)((float)((float)(v7 - v43) * (float)(v9 - v43)) + (float)((float)(v6 - v42) * (float)(v8 - v42)))
       + (float)((float)(v12 - v45) * (float)(v13 - v45));
  v113 = (float)(v110 * v132) - (float)(v111 * v111);
  v114 = 0.0;
  v115 = 0.0;
  if (v113 != 0.0)
    v115 = (float)((float)(v111
                         * (float)-(float)((float)((float)(v16 * (float)(v9 - v43)) + (float)(v15 * (float)(v8 - v42)))
                                         + (float)(v17 * (float)(v13 - v45))))
                 + (float)(v112 * v132))
         / v113;
  if (v115 >= 0.0)
    v114 = v115;
  if (v114 <= 1.0)
    v116 = v114;
  else
    v116 = 1.0;
  v117 = v133
       * (float)((float)(v116 * v111)
               - (float)((float)((float)(v16 * (float)(v9 - v43)) + (float)(v15 * (float)(v8 - v42)))
                       + (float)(v17 * (float)(v13 - v45))));
  if (v117 >= 0.0)
  {
    v118 = a5[3];
    if (v117 > 1.0)
    {
      v116 = 0.0;
      if ((float)((float)(v111 + v112) / v110) >= 0.0)
        v116 = (float)(v111 + v112) / v110;
      v117 = 1.0;
      if (v116 > 1.0)
        v116 = 1.0;
    }
  }
  else
  {
    v116 = v112 / v110;
    v117 = 0.0;
    if ((float)(v112 / v110) < 0.0)
      v116 = 0.0;
    if (v116 > 1.0)
      v116 = 1.0;
    v118 = a5[3];
  }
  v119 = (float)((float)(v8 - v42) + (float)(v15 * v117)) - (float)(v107 * v116);
  v120 = (float)((float)(v9 - v43) + (float)(v16 * v117)) - (float)(v108 * v116);
  v121 = (float)((float)(v13 - v45) + (float)(v17 * v117)) - (float)(v109 * v116);
  v122 = (float)((float)(v9 * v120) + (float)(v8 * v119)) + (float)(v13 * v121);
  v123 = (float)((float)(v28 * v120) + (float)(v118 * v119)) + (float)(v29 * v121);
  if (v122 <= v123)
    v124 = (float)((float)(v28 * v120) + (float)(v118 * v119)) + (float)(v29 * v121);
  else
    v124 = v122;
  if (v122 > v123)
    v122 = (float)((float)(v28 * v120) + (float)(v118 * v119)) + (float)(v29 * v121);
  v125 = v22 * sqrtf((float)((float)(v120 * v120) + (float)(v119 * v119)) + (float)(v121 * v121));
  v126 = v122 - v125;
  v127 = v124 + v125;
  v128 = (float)((float)(v7 * v120) + (float)(v6 * v119)) + (float)(v12 * v121);
  v129 = (float)((float)(v37 * v120) + (float)(v36 * v119)) + (float)(v38 * v121);
  if (v129 >= v128)
    v130 = v128;
  else
    v130 = (float)((float)(v37 * v120) + (float)(v36 * v119)) + (float)(v38 * v121);
  if (v129 > v128)
    v128 = (float)((float)(v37 * v120) + (float)(v36 * v119)) + (float)(v38 * v121);
  v131 = (float)((float)(v43 * v120) + (float)(v42 * v119)) + (float)(v45 * v121);
  if (v131 < v130)
    v130 = (float)((float)(v43 * v120) + (float)(v42 * v119)) + (float)(v45 * v121);
  if (v131 > v128)
    v128 = (float)((float)(v43 * v120) + (float)(v42 * v119)) + (float)(v45 * v121);
  return v128 >= v126 && v127 >= v130;
}

BOOL physx::Gu::intersectEdgeEdge(float *a1, float *a2, float32x2_t *a3, float *a4, float *a5, float *a6, float32x2_t *a7)
{
  float v7;
  float v8;
  float v9;
  float v10;
  float v11;
  float v12;
  float v13;
  float v14;
  float v15;
  float v16;
  float v17;
  float v18;
  float v19;
  float v20;
  float v21;
  float v22;
  float v23;
  float v24;
  float v25;
  float v26;
  float v27;
  float v28;
  float v29;
  float v30;
  float v31;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  float v36;
  float v38;
  float32x2_t v39;
  float32_t v40;
  float v41[3];

  v7 = *a1;
  v8 = a1[1];
  v9 = a2[1] - v8;
  v10 = a1[2];
  v11 = a2[2] - v10;
  v41[0] = *a2 - *a1;
  v41[1] = v9;
  v41[2] = v11;
  v13 = a3->f32[1];
  v12 = a3[1].f32[0];
  v14 = (float)(v9 * v12) - (float)(v11 * v13);
  v15 = (float)(v11 * a3->f32[0]) - (float)(v41[0] * v12);
  v16 = (float)(v41[0] * v13) - (float)(v9 * a3->f32[0]);
  v17 = (float)((float)(v8 * v15) + (float)(v14 * v7)) + (float)(v16 * v10);
  v18 = *a4;
  v19 = a4[1];
  v20 = a4[2];
  v21 = (float)((float)((float)(v15 * v19) + (float)(*a4 * v14)) + (float)(v20 * v16)) - v17;
  v22 = a5[1];
  v23 = a5[2];
  if ((float)(v21 * (float)((float)((float)((float)(v15 * v22) + (float)(*a5 * v14)) + (float)(v23 * v16)) - v17)) > 0.0)
    return 0;
  v24 = *a5 - v18;
  v25 = v22 - v19;
  v26 = v23 - v20;
  v27 = (float)((float)(v15 * v25) + (float)(v14 * v24)) + (float)(v16 * v26);
  if (v27 == 0.0)
    return 0;
  v28 = v21 / v27;
  a7->f32[0] = v18 - (float)(v24 * v28);
  a7->f32[1] = v19 - (float)(v25 * v28);
  a7[1].f32[0] = v20 - (float)(v26 * v28);
  v29 = fabsf(v14);
  v30 = fabsf(v15);
  v31 = fabsf(v16);
  if (v30 > v29 && v30 > v31)
  {
    v33 = 0;
    v34 = 2;
LABEL_10:
    v35 = v33;
    v33 = v34;
    goto LABEL_12;
  }
  v33 = 1;
  if (v31 > v29)
  {
    v34 = 0;
    goto LABEL_10;
  }
  v35 = 2;
LABEL_12:
  v36 = (float)((float)(v41[v33] * (float)(a7->f32[v35] - a1[v35])) - (float)(v41[v35] * (float)(a7->f32[v33] - a1[v33])))
      / (float)((float)(v41[v33] * a3->f32[v35]) - (float)(v41[v35] * a3->f32[v33]));
  *a6 = v36;
  if (v36 < 0.0)
    return 0;
  v38 = v36 * a3[1].f32[0];
  v39 = vsub_f32(*a7, vmul_n_f32(*a3, v36));
  *a7 = v39;
  v40 = a7[1].f32[0] - v38;
  a7[1].f32[0] = v40;
  return (float)((float)((float)((float)(a1[1] - v39.f32[1]) * (float)(a2[1] - v39.f32[1]))
                       + (float)((float)(*a1 - v39.f32[0]) * (float)(*a2 - v39.f32[0])))
               + (float)((float)(a1[2] - v40) * (float)(a2[2] - v40))) < 0.001;
}

uint64_t physx::Gu::rayAABBIntersect2(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, float *a6)
{
  uint64_t v6;
  uint64_t v7;
  int v13;
  float v14;
  float v15;
  float v16;
  float *v17;
  float v18;
  uint64_t v20;
  float v21;
  uint64_t v22;
  float v23;
  float v24;
  float v25;
  float v26;

  v6 = 0;
  v7 = 0;
  __asm { FMOV            V0.2S, #-1.0 }
  v26 = -1.0;
  v13 = 1;
  do
  {
    v14 = *(float *)(a3 + v6);
    v15 = *(float *)(a1 + v6);
    if (v14 >= v15)
    {
      v17 = (float *)(a2 + v6);
      v18 = *(float *)(a2 + v6);
      if (v14 <= v18)
        goto LABEL_9;
      *(float *)(a5 + v6) = v18;
      v16 = *(float *)(a4 + v6);
      if (v16 != 0.0)
        goto LABEL_7;
    }
    else
    {
      *(float *)(a5 + v6) = v15;
      v16 = *(float *)(a4 + v6);
      if (v16 != 0.0)
      {
        v17 = (float *)(a1 + 4 * v7);
LABEL_7:
        v13 = 0;
        *(float *)((char *)&v24 + v6) = (float)(*v17 - *(float *)(a3 + v6)) / v16;
        goto LABEL_9;
      }
    }
    v13 = 0;
LABEL_9:
    ++v7;
    v6 += 4;
  }
  while (v6 != 12);
  if (v13)
  {
    *(_QWORD *)a5 = *(_QWORD *)a3;
    *(_DWORD *)(a5 + 8) = *(_DWORD *)(a3 + 8);
    *a6 = 0.0;
    return 1;
  }
  else
  {
    if (v26 <= *(float *)((unint64_t)&v24 | (4 * (v25 > v24))))
      v20 = v25 > v24;
    else
      v20 = 2;
    v21 = *(&v24 + v20);
    if ((LODWORD(v21) & 0x80000000) == 0)
    {
      v22 = 0;
      while (1)
      {
        if (4 * v20 != v22)
        {
          v23 = *(float *)(a3 + v22) + (float)(v21 * *(float *)(a4 + v22));
          *(float *)(a5 + v22) = v23;
          if (v23 < (float)(*(float *)(a1 + v22) + -0.00001) || v23 > (float)(*(float *)(a2 + v22) + 0.00001))
            break;
        }
        v22 += 4;
        if (v22 == 12)
        {
          *a6 = v21;
          return (v20 + 1);
        }
      }
    }
    return 0;
  }
}

uint64_t physx::Gu::intersectRayAABB(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, float *a5, float *a6)
{
  uint64_t v6;
  float v7;
  unsigned int v8;
  float v9;
  float v11;
  float v12;
  float v13;
  float v14;
  float v15;
  float v16;
  float v17;
  float v18;
  uint64_t v19;
  float v20;

  v6 = 0;
  *a5 = -3.4028e38;
  *a6 = 3.4028e38;
  v7 = 3.4028e38;
  v8 = -1;
  do
  {
    v9 = *(float *)(a4 + 4 * v6);
    if (v9 > -0.00000011921 && v9 < 0.00000011921)
    {
      v20 = *(float *)(a3 + 4 * v6);
      if (v20 < *(float *)(a1 + 4 * v6) || v20 > *(float *)(a2 + 4 * v6))
        return 0xFFFFFFFFLL;
    }
    else
    {
      v11 = *(float *)(a3 + 4 * v6);
      v12 = 1.0 / v9;
      v13 = v12 * (float)(*(float *)(a1 + 4 * v6) - v11);
      v14 = *(float *)(a2 + 4 * v6) - v11;
      v15 = v12 * v14;
      if (v13 <= (float)(v12 * v14))
        v16 = v12 * (float)(*(float *)(a1 + 4 * v6) - v11);
      else
        v16 = v12 * v14;
      if (v13 <= (float)(v12 * v14))
        v17 = v12 * v14;
      else
        v17 = v13;
      v18 = *a5;
      if (v16 > *a5)
      {
        if (v13 <= v15)
          v8 = v6;
        else
          v8 = v6 + 3;
        *a5 = v16;
        v7 = *a6;
        v18 = v16;
      }
      if (v17 < v7)
      {
        *a6 = v17;
        v18 = *a5;
        v7 = v17;
      }
      v19 = 0xFFFFFFFFLL;
      if (v7 < 0.00000011921 || v18 > v7)
        return v19;
    }
    ++v6;
  }
  while (v6 != 3);
  if (*a5 > v7 || v7 < 0.00000011921)
    return 0xFFFFFFFFLL;
  else
    return v8;
}

BOOL physx::Gu::intersectRayAABB2(float32x2_t *a1, float32x2_t *a2, float32x2_t *a3, float32x2_t *a4, float *a5, float *a6, float a7)
{
  float32x2_t v7;
  float32x2_t v8;
  float32x2_t v14;
  float32x2_t v15;
  float32x2_t v16;
  int8x8_t v17;
  int8x8_t v18;
  float v19;
  float v20;
  float v21;
  float v22;
  float v23;
  float v24;
  float v25;

  v7 = vmaxnm_f32(vabs_f32(*a4), (float32x2_t)vdup_n_s32(0x3089705Fu));
  v8 = (float32x2_t)vbsl_s8((int8x8_t)vcgez_f32(*a4), (int8x8_t)v7, (int8x8_t)vneg_f32(v7));
  __asm { FMOV            V2.2S, #1.0 }
  v14 = vdiv_f32(_D2, v8);
  v15 = vmul_f32(vsub_f32(vadd_f32(*a1, (float32x2_t)vdup_n_s32(0xB727C5AC)), *a3), v14);
  v16 = vmul_f32(vsub_f32(vadd_f32(*a2, (float32x2_t)vdup_n_s32(0x3727C5ACu)), *a3), v14);
  v17 = vbsl_s8((int8x8_t)vcgt_f32(v16, v15), (int8x8_t)v15, (int8x8_t)v16);
  v18 = vbsl_s8((int8x8_t)vcgt_f32(v15, v16), (int8x8_t)v15, (int8x8_t)v16);
  v15.i32[0] = a4[1].i32[0];
  v19 = fmaxf(fabsf(v15.f32[0]), 0.000000001);
  if (v15.f32[0] < 0.0)
    v20 = -v19;
  else
    v20 = v19;
  v21 = 1.0 / v20;
  v22 = a3[1].f32[0];
  v23 = (float)((float)(a1[1].f32[0] + -0.00001) - v22) * v21;
  v24 = (float)((float)(a2[1].f32[0] + 0.00001) - v22) * v21;
  if (v23 >= v24)
    v25 = v24;
  else
    v25 = v23;
  if (v23 > v24)
    v24 = v23;
  if (*(float *)v17.i32 <= *(float *)&v17.i32[1])
    v17.i32[0] = v17.i32[1];
  if (*(float *)v17.i32 <= v25)
    *(float *)v17.i32 = v25;
  if (*(float *)v18.i32 >= *(float *)&v18.i32[1])
    v18.i32[0] = v18.i32[1];
  if (*(float *)v18.i32 >= v24)
    *(float *)v18.i32 = v24;
  *a5 = fmaxf(*(float *)v17.i32, 0.0);
  if (*(float *)v18.i32 < a7)
    a7 = *(float *)v18.i32;
  *a6 = a7;
  return *a5 < a7;
}

void physx::Gu::intersectRayCapsuleInternal(float32x2_t *a1, float32x2_t *a2, float *a3, float *a4, float *a5, float a6)
{
  float v7;
  float v8;
  float v9;
  float v10;
  float v11;
  float v12;
  float v13;
  float v14;
  float v15;
  float v16;
  float v17;
  float v18;
  float v19;
  float v20;
  float v21;
  float v22;
  float v23;
  float v24;
  float v25;
  float v26;
  float v27;
  float v28;
  float v29;
  float v30;
  float v31;
  float v32;
  float v33;
  float v34;
  float v35;
  float v36;
  float v37;
  float v38;
  float v39;
  float v40;
  float v41;
  float v42;
  float v43;
  float v44;
  float v45;
  float v46;
  float v47;
  float v48;
  float v49;
  float v50;
  float v51;
  float v52;
  float v53;
  float v54;
  float v55;
  float v56;
  float v57;
  float v58;
  _BOOL4 v59;
  unsigned int v60;
  float v61;
  float v62;
  float v63;
  float v65;
  float v66;
  float v68;
  float v69;
  float v70;
  float v71;
  float v72;
  float v73;
  float v74;
  float v75;
  float v76;
  float v77;
  float v78;
  float v79;

  v7 = a4[1];
  v9 = *a3;
  v8 = a3[1];
  v10 = *a4 - *a3;
  v11 = v7 - v8;
  v12 = a4[2];
  v13 = a3[2];
  v14 = v12 - v13;
  v15 = sqrtf((float)((float)(v11 * v11) + (float)(v10 * v10)) + (float)(v14 * v14));
  if (v15 != 0.0)
  {
    v10 = v10 * (float)(1.0 / v15);
    v11 = v11 * (float)(1.0 / v15);
    v14 = v14 * (float)(1.0 / v15);
  }
  if (v15 <= 0.000001)
  {
    v21 = a1->f32[1];
    v22 = v21 - v8;
    v23 = a1[1].f32[0];
    v24 = v23 - v13;
    v25 = v22 * v22;
    v26 = (float)((float)((float)(v21 - v7) * (float)(v21 - v7))
                + (float)((float)(a1->f32[0] - *a4) * (float)(a1->f32[0] - *a4)))
        + (float)((float)(v23 - v12) * (float)(v23 - v12));
    if ((float)((float)(v25 + (float)((float)(a1->f32[0] - v9) * (float)(a1->f32[0] - v9))) + (float)(v24 * v24)) > v26)
      v26 = (float)(v25 + (float)((float)(a1->f32[0] - v9) * (float)(a1->f32[0] - v9))) + (float)(v24 * v24);
    physx::Gu::intersectRaySphere(a1, a2, a3, a5, 0, (float)(v26 + a6) + (float)(v26 + a6), a6);
    return;
  }
  v16 = 0.0;
  if (v15 <= 0.0)
  {
    v20 = 0.0;
    v19 = 0.0;
  }
  else
  {
    v17 = v14 * v14;
    if (fabsf(v10) >= fabsf(v11))
    {
      v27 = 1.0 / sqrtf(v17 + (float)(v10 * v10));
      v20 = -(float)(v14 * v27);
      v19 = v10 * v27;
    }
    else
    {
      v18 = 1.0 / sqrtf(v17 + (float)(v11 * v11));
      v16 = v14 * v18;
      v19 = -(float)(v11 * v18);
      v20 = 0.0;
    }
  }
  v28 = (float)(v11 * v19) - (float)(v14 * v16);
  v29 = (float)(v14 * v20) - (float)(v10 * v19);
  v30 = (float)(v10 * v16) - (float)(v11 * v20);
  v31 = sqrtf((float)((float)(v29 * v29) + (float)(v28 * v28)) + (float)(v30 * v30));
  if (v31 > 0.0)
  {
    v32 = 1.0 / v31;
    v28 = v28 * v32;
    v29 = v29 * v32;
    v30 = v30 * v32;
  }
  v33 = a2->f32[1];
  v34 = a2[1].f32[0];
  v35 = (float)((float)(v16 * v33) + (float)(v20 * a2->f32[0])) + (float)(v19 * v34);
  v36 = (float)((float)(v29 * v33) + (float)(v28 * a2->f32[0])) + (float)(v30 * v34);
  v37 = (float)((float)(v11 * v33) + (float)(v10 * a2->f32[0])) + (float)(v14 * v34);
  v38 = sqrtf((float)((float)(v36 * v36) + (float)(v35 * v35)) + (float)(v37 * v37));
  v39 = 1.0 / v38;
  if (v38 == 0.0)
    v39 = 0.0;
  v40 = a1->f32[0] - v9;
  v41 = a1->f32[1] - v8;
  v42 = a1[1].f32[0] - v13;
  v43 = (float)((float)(v16 * v41) + (float)(v20 * v40)) + (float)(v19 * v42);
  v44 = (float)((float)(v29 * v41) + (float)(v28 * v40)) + (float)(v30 * v42);
  v45 = (float)((float)(v11 * v41) + (float)(v10 * v40)) + (float)(v14 * v42);
  v46 = a6 * a6;
  if (v38 < 0.00000011921 || (v47 = v37 * v39, fabsf(v37 * v39) >= 1.0))
  {
    v52 = (float)(v46 - (float)(v43 * v43)) - (float)(v44 * v44);
    if (v37 >= 0.0 || v52 < 0.0)
    {
      if (v37 <= 0.0 || v52 < 0.0)
        return;
      v61 = sqrtf(v52);
      v54 = -(float)((float)(v45 + v61) * v39);
      v55 = v39 * (float)((float)(v15 - v45) + v61);
    }
    else
    {
      v53 = sqrtf(v52);
      v54 = v39 * (float)(v45 + v53);
      v55 = -(float)((float)((float)(v15 - v45) + v53) * v39);
    }
    *a5 = v54;
    a5[1] = v55;
    return;
  }
  v48 = (float)((float)(v36 * v39) * (float)(v36 * v39)) + (float)((float)(v35 * v39) * (float)(v35 * v39));
  v49 = (float)(v44 * (float)(v36 * v39)) + (float)(v43 * (float)(v35 * v39));
  v50 = (float)((float)(v44 * v44) + (float)(v43 * v43)) - v46;
  v51 = (float)(v49 * v49) - (float)(v48 * v50);
  if (v51 < 0.0)
    return;
  if (v51 <= 0.0)
  {
    v62 = (float)-v49 / v48;
    v63 = v45 + (float)(v62 * v47);
    if (v63 >= 0.0 && v63 <= v15)
    {
      *a5 = v39 * v62;
      return;
    }
    v60 = 0;
  }
  else
  {
    v56 = sqrtf(v51);
    v57 = (float)(1.0 / v48) * (float)((float)-v49 - v56);
    v58 = v45 + (float)(v57 * v47);
    v59 = v58 >= -0.001;
    if (v58 > (float)(v15 + 0.001))
      v59 = 0;
    if (v59)
    {
      *a5 = v39 * v57;
      v60 = 1;
    }
    else
    {
      v60 = 0;
    }
    v65 = (float)(1.0 / v48) * (float)(v56 - v49);
    v66 = v45 + (float)(v65 * v47);
    if (v66 >= -0.001 && v66 <= (float)(v15 + 0.001))
    {
      a5[v60] = v39 * v65;
      if (v59)
        return;
      v60 = 1;
    }
  }
  v68 = v49 + (float)(v45 * v47);
  v69 = v50 + (float)(v45 * v45);
  v70 = -(float)(v69 - (float)(v68 * v68));
  if (v70 <= 0.0)
  {
    if (v70 != 0.0 || (float)(v45 - (float)(v68 * v47)) > 0.0)
      goto LABEL_57;
    v73 = -v68;
  }
  else
  {
    v71 = sqrtf(v70);
    v72 = (float)-v68 - v71;
    if ((float)(v45 + (float)(v72 * v47)) <= 0.0)
    {
      a5[v60] = v39 * v72;
      if (v60)
        return;
      v60 = 1;
    }
    v73 = v71 - v68;
    if ((float)(v45 + (float)(v73 * v47)) > 0.0)
      goto LABEL_57;
  }
  a5[v60] = v39 * v73;
  if (v60)
    return;
  v60 = 1;
LABEL_57:
  v74 = v68 - (float)(v47 * v15);
  v75 = -(float)((float)(v69 + (float)(v15 * (float)(v15 + (float)(v45 * -2.0)))) - (float)(v74 * v74));
  if (v75 <= 0.0)
  {
    if (v75 == 0.0 && (float)(v45 - (float)(v74 * v47)) >= v15)
    {
      v79 = v39 * (float)-v74;
      goto LABEL_66;
    }
  }
  else
  {
    v76 = sqrtf(v75);
    v77 = (float)-v74 - v76;
    if ((float)(v45 + (float)(v77 * v47)) >= v15)
    {
      a5[v60] = v39 * v77;
      if (v60)
        return;
      v60 = 1;
    }
    v78 = v76 - v74;
    if ((float)(v45 + (float)(v78 * v47)) >= v15)
    {
      v79 = v39 * v78;
LABEL_66:
      a5[v60] = v79;
    }
  }
}

float physx::Gu::intersectRaySphere(float32x2_t *a1, float32x2_t *a2, float *a3, float *a4, uint64_t a5, float a6, float a7)
{
  float v8;
  float v9;
  float v10;
  float result;
  float v12;
  float32x2_t v13;
  float v14;

  v8 = a1[1].f32[0];
  v9 = a2[1].f32[0];
  v10 = fmaxf((float)(sqrtf((float)((float)((float)(COERCE_FLOAT(HIDWORD(*(unint64_t *)a1)) - a3[1])* (float)(COERCE_FLOAT(HIDWORD(*(unint64_t *)a1)) - a3[1]))+ (float)((float)(COERCE_FLOAT(*a1) - *a3) * (float)(COERCE_FLOAT(*a1) - *a3)))+ (float)((float)(v8 - a3[2]) * (float)(v8 - a3[2])))- a7)+ -10.0, 0.0);
  v13 = vadd_f32(*a1, vmul_n_f32(*a2, v10));
  v14 = v8 + (float)(v9 * v10);
  v12 = v10;
  if (physx::Gu::intersectRaySphereBasic(&v13, a2, a3, a4, a5, a6 - v10, a7))
  {
    result = v12 + *a4;
    *a4 = result;
  }
  return result;
}

uint64_t physx::Gu::intersectRaySphereBasic(float32x2_t *a1, float32x2_t *a2, float *a3, float *a4, uint64_t a5, float a6, float a7)
{
  float v7;
  float v8;
  float v9;
  float v10;
  float v11;
  float v12;
  float v13;
  float v15;
  float v16;
  float v18;

  v7 = a1->f32[1];
  v8 = *a3 - a1->f32[0];
  v9 = a3[1] - v7;
  v10 = a1[1].f32[0];
  v11 = a3[2] - v10;
  v12 = (float)((float)(v9 * v9) + (float)(v8 * v8)) + (float)(v11 * v11);
  if (v12 <= (float)(a7 * a7))
  {
    if (a5)
    {
      *(_DWORD *)a5 = a1->i32[0];
      *(float *)(a5 + 4) = v7;
      *(float *)(a5 + 8) = v10;
    }
    *a4 = 0.0;
  }
  else
  {
    v13 = (float)((float)(v9 * a2->f32[1]) + (float)(a2->f32[0] * v8)) + (float)(a2[1].f32[0] * v11);
    if (v13 <= 0.0 || (float)(v13 - a6) > a7)
      return 0;
    v15 = (float)(a7 * a7) - (float)(v12 - (float)(v13 * v13));
    if (v15 < 0.0)
      return 0;
    v16 = v13 - sqrtf(v15);
    *a4 = v16;
    if (v16 > a6)
      return 0;
    if (a5)
    {
      v18 = (float)(v16 * a2[1].f32[0]) + a1[1].f32[0];
      *(float32x2_t *)a5 = vadd_f32(vmul_n_f32(*a2, v16), *a1);
      *(float *)(a5 + 8) = v18;
    }
  }
  return 1;
}

BOOL physx::Gu::intersectSphereBox(physx::Gu *this, const Sphere *a2, const physx::Gu::Box *a3)
{
  float v3;
  float v4;
  float v5;
  float v6;
  float v7;
  float v8;
  float v9;
  float v10;
  float v11;
  float v12;
  float v13;
  float v14;
  float v15;
  float v16;
  float v17;
  float v18;
  int v19;
  float v20;
  float v21;
  BOOL v22;
  float v23;
  float v24;
  float v25;
  float v26;
  float v27;
  float v28;
  _BOOL8 result;

  v3 = *((float *)a2 + 8);
  v4 = *(float *)this - *((float *)a2 + 9);
  v5 = *((float *)this + 1) - *((float *)a2 + 10);
  v6 = *((float *)this + 2) - *((float *)a2 + 11);
  v7 = *((float *)a2 + 1);
  v9 = *((float *)a2 + 2);
  v8 = *((float *)a2 + 3);
  v10 = (float)((float)(v5 * v7) + (float)(*(float *)a2 * v4)) + (float)(v9 * v6);
  v12 = *((float *)a2 + 4);
  v11 = *((float *)a2 + 5);
  v13 = (float)((float)(v5 * v12) + (float)(v8 * v4)) + (float)(v11 * v6);
  v15 = *((float *)a2 + 6);
  v14 = *((float *)a2 + 7);
  v16 = *((float *)a2 + 12);
  v17 = *((float *)a2 + 13);
  v18 = -v16;
  if (v10 > v16)
  {
    v19 = 1;
  }
  else
  {
    v16 = (float)((float)(v5 * v7) + (float)(*(float *)a2 * v4)) + (float)(v9 * v6);
    v19 = 0;
  }
  v20 = (float)((float)(v5 * v14) + (float)(v15 * v4)) + (float)(v3 * v6);
  if (v10 < v18)
  {
    v16 = v18;
    v19 = 1;
  }
  v21 = -v17;
  if (v13 > v17)
    v19 = 1;
  else
    v17 = (float)((float)(v5 * v12) + (float)(v8 * v4)) + (float)(v11 * v6);
  v22 = v13 < v21;
  if (v13 >= v21)
    v23 = v17;
  else
    v23 = v21;
  if (v22)
    v19 = 1;
  v24 = *((float *)a2 + 14);
  v25 = -v24;
  result = 1;
  if (v20 < (float)-v24
    || (v20 <= v24
      ? (v25 = (float)((float)(v5 * v14) + (float)(v15 * v4)) + (float)(v3 * v6))
      : (v19 = 1, v25 = *((float *)a2 + 14)),
        v19 == 1))
  {
    v26 = (float)((float)(*(float *)a2 * v16) + (float)(v8 * v23)) + (float)(v15 * v25);
    v27 = (float)((float)(v7 * v16) + (float)(v12 * v23)) + (float)(v14 * v25);
    v28 = v6 - (float)((float)((float)(v9 * v16) + (float)(v11 * v23)) + (float)(v3 * v25));
    if ((float)((float)((float)((float)(v5 - v27) * (float)(v5 - v27)) + (float)((float)(v4 - v26) * (float)(v4 - v26)))
               + (float)(v28 * v28)) > (float)(*((float *)this + 3) * *((float *)this + 3)))
      return 0;
  }
  return result;
}

BOOL physx::Gu::intersectTriangleBox_Unsafe(float32x4_t *a1, float32x4_t *a2, float32x4_t *a3, float32x4_t *a4, float32x4_t *a5)
{
  float32x4_t v5;
  float32x4_t v6;
  float32x4_t v7;
  float32x4_t v8;
  unsigned __int8 v9;
  float32x4_t v10;
  _BOOL8 result;
  float32x4_t v12;
  float32x4_t v13;
  float32x4_t v14;
  float32x4_t v15;
  float32x2_t v16;
  float32x2_t v17;
  int8x8_t v18;
  int8x16_t v19;
  float32x4_t v20;
  int8x16_t v21;
  float32x4_t v22;
  float32x4_t v23;
  float32x2_t v24;
  float32x4_t v25;
  float32x4_t v26;
  float32x4_t v27;
  float32x4_t v28;
  int16x4_t v29;
  float32x4_t v30;
  float32x4_t v31;
  int8x8_t v32;
  float32x4_t v33;
  float32x4_t v34;
  float32x4_t v35;
  int8x8_t v36;
  float32x4_t v37;
  float32x4_t v38;
  float32x4_t v39;
  int8x8_t v40;
  float32x4_t v41;
  float32x4_t v42;
  float32x4_t v43;
  float32x4_t v44;
  float32x4_t v45;
  float32x4_t v46;
  float32x4_t v47;
  float32x4_t v48;
  float32x4_t v49;
  float32x4_t v50;
  float32x4_t v51;
  float32x4_t v52;
  int8x8_t v53;
  float32x4_t v54;
  float32x4_t v55;
  float32x4_t v56;
  float32x4_t v57;
  int8x8_t v58;
  float32x4_t v59;
  float32x4_t v60;
  float32x4_t v61;
  float32x4_t v62;
  float32x4_t v63;
  float32x4_t v64;
  float32x4_t v65;
  float32x4_t v66;
  int8x8_t v67;
  int8x8_t v68;
  float32x4_t *v69;
  int v70;
  __int128 v71;
  float32x4_t v72;
  float32x4_t v73;
  float32x4_t v74;
  float32x4_t v75;

  v5 = *a1;
  v6 = vsubq_f32(*a3, *a1);
  v7 = *a4;
  v8 = *a5;
  v9 = atomic_load((unsigned __int8 *)_MergedGlobals_505);
  if ((v9 & 1) == 0)
  {
    v69 = a2;
    v75 = v6;
    v73 = *a4;
    v74 = *a1;
    v72 = *a5;
    v70 = __cxa_guard_acquire(_MergedGlobals_505);
    v8 = v72;
    v7 = v73;
    v5 = v74;
    v6 = v75;
    a2 = v69;
    if (v70)
    {
      *(_QWORD *)&v71 = 0x8000000080000000;
      *((_QWORD *)&v71 + 1) = 0x8000000080000000;
      xmmword_254123F00 = v71;
      __cxa_guard_release(_MergedGlobals_505);
      v8 = v72;
      v7 = v73;
      v5 = v74;
      v6 = v75;
      a2 = v69;
    }
  }
  v10 = *a2;
  if ((~vuzp1_s8((int8x8_t)vmovn_s32(vcgeq_f32(*a2, vabsq_f32(v6))), *(int8x8_t *)a2->f32).u32[0] & 0xFFFFFF) == 0)
    return 1;
  v12 = vsubq_f32(v7, v5);
  v13 = vsubq_f32(v8, v5);
  if ((vuzp1_s8((int8x8_t)vmovn_s32(vcgtq_f32(vminq_f32(vminq_f32(v6, v12), v13), v10)), *(int8x8_t *)v10.f32).u32[0] & 0xFFFFFF) != 0
    || (vuzp1_s8((int8x8_t)vmovn_s32(vcgtq_f32(vsubq_f32((float32x4_t)0, v10), vmaxq_f32(vmaxq_f32(v6, v12), v13))), *(int8x8_t *)v10.f32).u32[0] & 0xFFFFFF) != 0)
  {
    return 0;
  }
  result = 0;
  v14 = vsubq_f32(v12, v6);
  v15 = vsubq_f32(v13, v12);
  v16 = (float32x2_t)vextq_s8((int8x16_t)v14, (int8x16_t)v14, 8uLL).u64[0];
  v17 = (float32x2_t)vextq_s8((int8x16_t)v15, (int8x16_t)v15, 8uLL).u64[0];
  v18 = (int8x8_t)vmls_f32(vmul_f32(*(float32x2_t *)v14.f32, (float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v15, (int8x16_t)v15, 4uLL)), (float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v14, (int8x16_t)v14, 4uLL), *(float32x2_t *)v15.f32);
  *(int8x8_t *)v19.i8 = vext_s8(v18, (int8x8_t)vmls_f32(vmul_f32(v16, *(float32x2_t *)v15.f32), *(float32x2_t *)v14.f32, v17), 4uLL);
  v19.i64[1] = v18.u32[0];
  v20 = (float32x4_t)v19;
  v20.i32[3] = 0;
  v21 = vandq_s8((int8x16_t)xmmword_254123F00, v19);
  v22 = v6;
  v22.i32[3] = 0;
  v23 = vmulq_f32(v22, v20);
  v23.i64[0] = vpaddq_f32(v23, v23).u64[0];
  v24 = vpadd_f32(*(float32x2_t *)v23.f32, *(float32x2_t *)v23.f32);
  v25 = (float32x4_t)vorrq_s8(v21, (int8x16_t)v10);
  v25.i32[3] = 0;
  v26 = vmulq_f32(v20, v25);
  v26.i64[0] = vpaddq_f32(v26, v26).u64[0];
  *(int32x2_t *)v26.f32 = vcgt_f32(v24, vpadd_f32(*(float32x2_t *)v26.f32, *(float32x2_t *)v26.f32));
  if ((vuzp1_s8((int8x8_t)vuzp1_s16(*(int16x4_t *)v26.f32, *(int16x4_t *)v26.f32), *(int8x8_t *)v10.f32).u32[0] & 0xFFFFFF) == 0)
  {
    result = 0;
    v27 = (float32x4_t)vorrq_s8(veorq_s8(v21, (int8x16_t)xmmword_254123F00), (int8x16_t)v10);
    v27.i32[3] = 0;
    v28 = vmulq_f32(v20, v27);
    v28.i64[0] = vpaddq_f32(v28, v28).u64[0];
    v29 = (int16x4_t)vcgt_f32(vpadd_f32(*(float32x2_t *)v28.f32, *(float32x2_t *)v28.f32), v24);
    if ((vuzp1_s8((int8x8_t)vuzp1_s16(v29, v29), *(int8x8_t *)v10.f32).u32[0] & 0xFFFFFF) == 0)
    {
      *(int8x8_t *)v30.f32 = vext_s8(*(int8x8_t *)v14.f32, (int8x8_t)v16, 4uLL);
      v30.i64[1] = __PAIR64__(v16.u32[1], v14.u32[0]);
      v31.i64[0] = vextq_s8((int8x16_t)v6, (int8x16_t)v6, 4uLL).u64[0];
      v31.i64[1] = __PAIR64__(vextq_s8(*(int8x16_t *)&v6, *(int8x16_t *)&v6, 8uLL).u32[1], v6.u32[0]);
      v32 = (int8x8_t)vextq_s8((int8x16_t)v12, (int8x16_t)v12, 8uLL).u64[0];
      *(int8x8_t *)v33.f32 = vext_s8(*(int8x8_t *)v12.f32, v32, 4uLL);
      v33.i64[1] = __PAIR64__(v32.u32[1], v12.u32[0]);
      v34 = vmlsq_f32(vmulq_f32(v6, v30), v14, v31);
      v35 = vmlsq_f32(vmulq_f32(v12, v30), v14, v33);
      v36 = (int8x8_t)vextq_s8((int8x16_t)v13, (int8x16_t)v13, 8uLL).u64[0];
      *(int8x8_t *)v37.f32 = vext_s8(*(int8x8_t *)v13.f32, v36, 4uLL);
      v37.i64[1] = __PAIR64__(v36.u32[1], v13.u32[0]);
      v38 = vmlsq_f32(vmulq_f32(v13, v30), v14, v37);
      v39 = vabsq_f32(v14);
      v40 = (int8x8_t)vextq_s8((int8x16_t)v39, (int8x16_t)v39, 8uLL).u64[0];
      *(int8x8_t *)v41.f32 = vext_s8(*(int8x8_t *)v39.f32, v40, 4uLL);
      v42.i64[0] = vextq_s8((int8x16_t)v10, (int8x16_t)v10, 4uLL).u64[0];
      v42.i64[1] = __PAIR64__(vextq_s8(*(int8x16_t *)&v10, *(int8x16_t *)&v10, 8uLL).u32[1], v10.u32[0]);
      v43 = vmulq_f32(v39, v42);
      v39.i32[1] = v40.i32[1];
      v41.i64[1] = v39.i64[0];
      v44 = vmlaq_f32(v43, v41, v10);
      if ((vuzp1_s8((int8x8_t)vmovn_s32(vcgtq_f32(vminq_f32(vminq_f32(v34, v35), v38), v44)), *(int8x8_t *)v10.f32).u32[0] & 0xFFFFFF) == 0
        && (vuzp1_s8((int8x8_t)vmovn_s32(vcgtq_f32(vsubq_f32((float32x4_t)0, v44), vmaxq_f32(vmaxq_f32(v34, v35), v38))), *(int8x8_t *)v10.f32).u32[0] & 0xFFFFFF) == 0)
      {
        v45 = vnegq_f32(v31);
        v46 = vnegq_f32(v33);
        *(int8x8_t *)v47.f32 = vext_s8(*(int8x8_t *)v15.f32, (int8x8_t)v17, 4uLL);
        v47.i64[1] = __PAIR64__(v17.u32[1], v15.u32[0]);
        v48 = vnegq_f32(v37);
        v49 = vmlaq_f32(vmulq_f32(v6, v47), v15, v45);
        v50 = vmlaq_f32(vmulq_f32(v12, v47), v15, v46);
        v51 = vmlaq_f32(vmulq_f32(v13, v47), v15, v48);
        v52 = vabsq_f32(v15);
        v53 = (int8x8_t)vextq_s8((int8x16_t)v52, (int8x16_t)v52, 8uLL).u64[0];
        *(int8x8_t *)v54.f32 = vext_s8(*(int8x8_t *)v52.f32, v53, 4uLL);
        v55 = vmulq_f32(v52, v42);
        v52.i32[1] = v53.i32[1];
        v54.i64[1] = v52.i64[0];
        v56 = vmlaq_f32(v55, v54, v10);
        if ((vuzp1_s8((int8x8_t)vmovn_s32(vcgtq_f32(vminq_f32(vminq_f32(v49, v50), v51), v56)), *(int8x8_t *)v10.f32).u32[0] & 0xFFFFFF) == 0
          && (vuzp1_s8((int8x8_t)vmovn_s32(vcgtq_f32(vsubq_f32((float32x4_t)0, v56), vmaxq_f32(vmaxq_f32(v49, v50), v51))), *(int8x8_t *)v10.f32).u32[0] & 0xFFFFFF) == 0)
        {
          v57 = vsubq_f32(v6, v13);
          v58 = (int8x8_t)vextq_s8((int8x16_t)v57, (int8x16_t)v57, 8uLL).u64[0];
          *(int8x8_t *)v59.f32 = vext_s8(*(int8x8_t *)v57.f32, v58, 4uLL);
          v59.i64[1] = __PAIR64__(v58.u32[1], v57.u32[0]);
          v60 = vmlaq_f32(vmulq_f32(v6, v59), v57, v45);
          v61 = vmlaq_f32(vmulq_f32(v12, v59), v57, v46);
          v62 = vmlaq_f32(vmulq_f32(v13, v59), v57, v48);
          v63 = vabdq_f32(v6, v13);
          v59.i64[0] = vextq_s8((int8x16_t)v63, (int8x16_t)v63, 8uLL).u64[0];
          *(int8x8_t *)v64.f32 = vext_s8(*(int8x8_t *)v63.f32, *(int8x8_t *)v59.f32, 4uLL);
          v65 = vmulq_f32(v63, v42);
          v63.i32[1] = v59.i32[1];
          v64.i64[1] = v63.i64[0];
          v66 = vmlaq_f32(v65, v64, v10);
          v67 = (int8x8_t)vmovn_s32(vcgtq_f32(vminq_f32(vminq_f32(v60, v61), v62), v66));
          if ((vuzp1_s8(v67, v67).u32[0] & 0xFFFFFF) == 0)
          {
            v68 = (int8x8_t)vmovn_s32(vcgtq_f32(vsubq_f32((float32x4_t)0, v66), vmaxq_f32(vmaxq_f32(v60, v61), v62)));
            return (vuzp1_s8(v68, v68).u32[0] & 0xFFFFFF) == 0;
          }
        }
      }
      return 0;
    }
  }
  return result;
}

BOOL physx::Gu::intersectTriangleBox(float32x4_t *a1, float *a2, float *a3, float *a4, double a5, float32x4_t a6, float32x4_t a7)
{
  float32x4_t v7;
  float v8;
  float v9;
  float v10;
  float v11;
  float v12;
  float v13;
  float v14;
  float v15;
  float v16;
  float v17;
  float v18;
  float v19;
  float v20;
  float v21;
  float v22;
  float v23;
  float v24;
  float v25;
  float v26;
  unsigned __int8 v27;
  float32x4_t v28;
  _BOOL8 result;
  float v30;
  float v31;
  float v32;
  float v33;
  float v34;
  float v35;
  float v36;
  float32x4_t v37;
  float32x4_t v38;
  float32x2_t v39;
  float32x2_t v40;
  int8x8_t v41;
  int8x16_t v42;
  float32x4_t v43;
  int8x16_t v44;
  float32x4_t v45;
  float32x4_t v46;
  float32x2_t v47;
  float32x4_t v48;
  float32x4_t v49;
  float32x4_t v50;
  float32x4_t v51;
  int16x4_t v52;
  float32x4_t v53;
  float32x4_t v54;
  int8x8_t v55;
  float32x4_t v56;
  float32x4_t v57;
  float32x4_t v58;
  int8x8_t v59;
  float32x4_t v60;
  float32x4_t v61;
  float32x4_t v62;
  int8x8_t v63;
  float32x4_t v64;
  float32x4_t v65;
  float32x4_t v66;
  float32x4_t v67;
  float32x4_t v68;
  float32x4_t v69;
  float32x4_t v70;
  float32x4_t v71;
  float32x4_t v72;
  float32x4_t v73;
  float32x4_t v74;
  float32x4_t v75;
  int8x8_t v76;
  float32x4_t v77;
  float32x4_t v78;
  float32x4_t v79;
  float32x4_t v80;
  int8x8_t v81;
  float32x4_t v82;
  float32x4_t v83;
  float32x4_t v84;
  float32x4_t v85;
  float32x4_t v86;
  float32x4_t v87;
  float32x4_t v88;
  float32x4_t v89;
  int8x8_t v90;
  int8x8_t v91;
  float32x4_t *v92;
  int v93;
  int v94;
  __int128 v95;
  float32x4_t v96;
  float v97;
  unsigned __int32 v98;
  float v99;
  float v100;
  float v101;
  float v102;
  unsigned __int32 v103;
  float v104;
  float v105;
  float v106;
  float v107;
  float v108;
  float v109;
  float v110;
  float v111;
  float v112;
  float v113;
  float v114;

  v8 = a1[2].f32[0];
  a6.i32[0] = a1[2].i32[1];
  v9 = *a2 - a6.f32[0];
  v11 = a1[2].f32[2];
  v10 = a1[2].f32[3];
  v12 = a2[1] - v11;
  v13 = a2[2] - v10;
  a7.i32[0] = a1->i32[0];
  v14 = a1->f32[1];
  v15 = a1->f32[2];
  v16 = a1->f32[3];
  v7.f32[0] = (float)((float)(v12 * v14) + (float)(a1->f32[0] * v9)) + (float)(v15 * v13);
  v18 = a1[1].f32[0];
  v17 = a1[1].f32[1];
  v19 = a1[1].f32[2];
  v20 = a1[1].f32[3];
  v7.f32[1] = (float)((float)(v12 * v18) + (float)(v16 * v9)) + (float)(v17 * v13);
  v7.f32[2] = (float)((float)(v12 * v20) + (float)(v19 * v9)) + (float)(v8 * v13);
  v21 = *a3;
  v22 = a3[1];
  v23 = a3[2];
  v24 = *a4;
  v25 = a4[1];
  v26 = a4[2];
  v27 = atomic_load((unsigned __int8 *)_MergedGlobals_505);
  if ((v27 & 1) == 0)
  {
    v92 = a1;
    v98 = a1[2].u32[1];
    v99 = a1[2].f32[0];
    v100 = a1[1].f32[2];
    v101 = a1->f32[2];
    v97 = a1[1].f32[1];
    v102 = a1[2].f32[3];
    v103 = a1->i32[0];
    v104 = a1->f32[3];
    v105 = a1[1].f32[3];
    v106 = a1->f32[1];
    v107 = a1[2].f32[2];
    v108 = a1[1].f32[0];
    v109 = a4[2];
    v110 = a3[2];
    v111 = *a4;
    v112 = *a3;
    v113 = a3[1];
    v114 = a4[1];
    v96 = v7;
    v93 = __cxa_guard_acquire(_MergedGlobals_505);
    v7 = v96;
    v22 = v113;
    v25 = v114;
    v24 = v111;
    v21 = v112;
    v26 = v109;
    v23 = v110;
    v11 = v107;
    v18 = v108;
    v14 = v106;
    v16 = v104;
    v20 = v105;
    v10 = v102;
    a7.i32[0] = v103;
    v19 = v100;
    v15 = v101;
    v17 = v97;
    a6.i32[0] = v98;
    v8 = v99;
    v94 = v93;
    a1 = v92;
    if (v94)
    {
      *(_QWORD *)&v95 = 0x8000000080000000;
      *((_QWORD *)&v95 + 1) = 0x8000000080000000;
      xmmword_254123F00 = v95;
      __cxa_guard_release(_MergedGlobals_505);
      v7 = v96;
      v22 = v113;
      v25 = v114;
      v24 = v111;
      v21 = v112;
      v26 = v109;
      v23 = v110;
      v11 = v107;
      v18 = v108;
      v14 = v106;
      v16 = v104;
      v20 = v105;
      v10 = v102;
      a7.i32[0] = v103;
      v19 = v100;
      v15 = v101;
      v17 = v97;
      a6.i32[0] = v98;
      v8 = v99;
      a1 = v92;
    }
  }
  v28 = a1[3];
  if ((~vuzp1_s8((int8x8_t)vmovn_s32(vcgeq_f32(v28, vabsq_f32(v7))), *(int8x8_t *)v28.f32).u32[0] & 0xFFFFFF) == 0)
    return 1;
  v30 = v22 - v11;
  v31 = v25 - v11;
  v32 = v21 - a6.f32[0];
  v33 = v14 * v30;
  v34 = v24 - a6.f32[0];
  a6.f32[0] = v14 * v31;
  v35 = v23 - v10;
  v36 = v26 - v10;
  a6.f32[0] = a6.f32[0] + (float)(a7.f32[0] * v34);
  a7.f32[0] = (float)(v33 + (float)(a7.f32[0] * v32)) + (float)(v15 * v35);
  a6.f32[0] = a6.f32[0] + (float)(v15 * v36);
  a7.f32[1] = (float)((float)(v18 * v30) + (float)(v16 * v32)) + (float)(v17 * v35);
  a6.f32[1] = (float)((float)(v18 * v31) + (float)(v16 * v34)) + (float)(v17 * v36);
  a7.f32[2] = (float)((float)(v20 * v30) + (float)(v19 * v32)) + (float)(v8 * v35);
  a6.f32[2] = (float)((float)(v20 * v31) + (float)(v19 * v34)) + (float)(v8 * v36);
  if ((vuzp1_s8((int8x8_t)vmovn_s32(vcgtq_f32(vminq_f32(vminq_f32(v7, a7), a6), v28)), *(int8x8_t *)v28.f32).u32[0] & 0xFFFFFF) != 0
    || (vuzp1_s8((int8x8_t)vmovn_s32(vcgtq_f32(vsubq_f32((float32x4_t)0, v28), vmaxq_f32(vmaxq_f32(v7, a7), a6))), *(int8x8_t *)v28.f32).u32[0] & 0xFFFFFF) != 0)
  {
    return 0;
  }
  result = 0;
  v37 = vsubq_f32(a7, v7);
  v38 = vsubq_f32(a6, a7);
  v39 = (float32x2_t)vextq_s8((int8x16_t)v37, (int8x16_t)v37, 8uLL).u64[0];
  v40 = (float32x2_t)vextq_s8((int8x16_t)v38, (int8x16_t)v38, 8uLL).u64[0];
  v41 = (int8x8_t)vmls_f32(vmul_f32(*(float32x2_t *)v37.f32, (float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v38, (int8x16_t)v38, 4uLL)), (float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v37, (int8x16_t)v37, 4uLL), *(float32x2_t *)v38.f32);
  *(int8x8_t *)v42.i8 = vext_s8(v41, (int8x8_t)vmls_f32(vmul_f32(v39, *(float32x2_t *)v38.f32), *(float32x2_t *)v37.f32, v40), 4uLL);
  v42.i64[1] = v41.u32[0];
  v43 = (float32x4_t)v42;
  v43.i32[3] = 0;
  v44 = vandq_s8((int8x16_t)xmmword_254123F00, v42);
  v45 = v7;
  v45.i32[3] = 0;
  v46 = vmulq_f32(v45, v43);
  v46.i64[0] = vpaddq_f32(v46, v46).u64[0];
  v47 = vpadd_f32(*(float32x2_t *)v46.f32, *(float32x2_t *)v46.f32);
  v48 = (float32x4_t)vorrq_s8(v44, (int8x16_t)v28);
  v48.i32[3] = 0;
  v49 = vmulq_f32(v43, v48);
  v49.i64[0] = vpaddq_f32(v49, v49).u64[0];
  *(int32x2_t *)v49.f32 = vcgt_f32(v47, vpadd_f32(*(float32x2_t *)v49.f32, *(float32x2_t *)v49.f32));
  if ((vuzp1_s8((int8x8_t)vuzp1_s16(*(int16x4_t *)v49.f32, *(int16x4_t *)v49.f32), *(int8x8_t *)v28.f32).u32[0] & 0xFFFFFF) == 0)
  {
    result = 0;
    v50 = (float32x4_t)vorrq_s8(veorq_s8(v44, (int8x16_t)xmmword_254123F00), (int8x16_t)v28);
    v50.i32[3] = 0;
    v51 = vmulq_f32(v43, v50);
    v51.i64[0] = vpaddq_f32(v51, v51).u64[0];
    v52 = (int16x4_t)vcgt_f32(vpadd_f32(*(float32x2_t *)v51.f32, *(float32x2_t *)v51.f32), v47);
    if ((vuzp1_s8((int8x8_t)vuzp1_s16(v52, v52), *(int8x8_t *)v28.f32).u32[0] & 0xFFFFFF) == 0)
    {
      *(int8x8_t *)v53.f32 = vext_s8(*(int8x8_t *)v37.f32, (int8x8_t)v39, 4uLL);
      v53.i64[1] = __PAIR64__(v39.u32[1], v37.u32[0]);
      v54.i64[0] = vextq_s8((int8x16_t)v7, (int8x16_t)v7, 4uLL).u64[0];
      v54.i64[1] = __PAIR64__(vextq_s8(*(int8x16_t *)&v7, *(int8x16_t *)&v7, 8uLL).u32[1], v7.u32[0]);
      v55 = (int8x8_t)vextq_s8((int8x16_t)a7, (int8x16_t)a7, 8uLL).u64[0];
      *(int8x8_t *)v56.f32 = vext_s8(*(int8x8_t *)a7.f32, v55, 4uLL);
      v56.i64[1] = __PAIR64__(v55.u32[1], a7.u32[0]);
      v57 = vmlsq_f32(vmulq_f32(v7, v53), v37, v54);
      v58 = vmlsq_f32(vmulq_f32(a7, v53), v37, v56);
      v59 = (int8x8_t)vextq_s8((int8x16_t)a6, (int8x16_t)a6, 8uLL).u64[0];
      *(int8x8_t *)v60.f32 = vext_s8(*(int8x8_t *)a6.f32, v59, 4uLL);
      v60.i64[1] = __PAIR64__(v59.u32[1], a6.u32[0]);
      v61 = vmlsq_f32(vmulq_f32(a6, v53), v37, v60);
      v62 = vabsq_f32(v37);
      v63 = (int8x8_t)vextq_s8((int8x16_t)v62, (int8x16_t)v62, 8uLL).u64[0];
      *(int8x8_t *)v64.f32 = vext_s8(*(int8x8_t *)v62.f32, v63, 4uLL);
      v65.i64[0] = vextq_s8((int8x16_t)v28, (int8x16_t)v28, 4uLL).u64[0];
      v65.i64[1] = __PAIR64__(vextq_s8(*(int8x16_t *)&v28, *(int8x16_t *)&v28, 8uLL).u32[1], v28.u32[0]);
      v66 = vmulq_f32(v62, v65);
      v62.i32[1] = v63.i32[1];
      v64.i64[1] = v62.i64[0];
      v67 = vmlaq_f32(v66, v64, v28);
      if ((vuzp1_s8((int8x8_t)vmovn_s32(vcgtq_f32(vminq_f32(vminq_f32(v57, v58), v61), v67)), *(int8x8_t *)v28.f32).u32[0] & 0xFFFFFF) == 0
        && (vuzp1_s8((int8x8_t)vmovn_s32(vcgtq_f32(vsubq_f32((float32x4_t)0, v67), vmaxq_f32(vmaxq_f32(v57, v58), v61))), *(int8x8_t *)v28.f32).u32[0] & 0xFFFFFF) == 0)
      {
        v68 = vnegq_f32(v54);
        v69 = vnegq_f32(v56);
        *(int8x8_t *)v70.f32 = vext_s8(*(int8x8_t *)v38.f32, (int8x8_t)v40, 4uLL);
        v70.i64[1] = __PAIR64__(v40.u32[1], v38.u32[0]);
        v71 = vnegq_f32(v60);
        v72 = vmlaq_f32(vmulq_f32(v7, v70), v38, v68);
        v73 = vmlaq_f32(vmulq_f32(a7, v70), v38, v69);
        v74 = vmlaq_f32(vmulq_f32(a6, v70), v38, v71);
        v75 = vabsq_f32(v38);
        v76 = (int8x8_t)vextq_s8((int8x16_t)v75, (int8x16_t)v75, 8uLL).u64[0];
        *(int8x8_t *)v77.f32 = vext_s8(*(int8x8_t *)v75.f32, v76, 4uLL);
        v78 = vmulq_f32(v75, v65);
        v75.i32[1] = v76.i32[1];
        v77.i64[1] = v75.i64[0];
        v79 = vmlaq_f32(v78, v77, v28);
        if ((vuzp1_s8((int8x8_t)vmovn_s32(vcgtq_f32(vminq_f32(vminq_f32(v72, v73), v74), v79)), *(int8x8_t *)v28.f32).u32[0] & 0xFFFFFF) == 0
          && (vuzp1_s8((int8x8_t)vmovn_s32(vcgtq_f32(vsubq_f32((float32x4_t)0, v79), vmaxq_f32(vmaxq_f32(v72, v73), v74))), *(int8x8_t *)v28.f32).u32[0] & 0xFFFFFF) == 0)
        {
          v80 = vsubq_f32(v7, a6);
          v81 = (int8x8_t)vextq_s8((int8x16_t)v80, (int8x16_t)v80, 8uLL).u64[0];
          *(int8x8_t *)v82.f32 = vext_s8(*(int8x8_t *)v80.f32, v81, 4uLL);
          v82.i64[1] = __PAIR64__(v81.u32[1], v80.u32[0]);
          v83 = vmlaq_f32(vmulq_f32(v7, v82), v80, v68);
          v84 = vmlaq_f32(vmulq_f32(a7, v82), v80, v69);
          v85 = vmlaq_f32(vmulq_f32(a6, v82), v80, v71);
          v86 = vabdq_f32(v7, a6);
          v82.i64[0] = vextq_s8((int8x16_t)v86, (int8x16_t)v86, 8uLL).u64[0];
          *(int8x8_t *)v87.f32 = vext_s8(*(int8x8_t *)v86.f32, *(int8x8_t *)v82.f32, 4uLL);
          v88 = vmulq_f32(v86, v65);
          v86.i32[1] = v82.i32[1];
          v87.i64[1] = v86.i64[0];
          v89 = vmlaq_f32(v88, v87, v28);
          v90 = (int8x8_t)vmovn_s32(vcgtq_f32(vminq_f32(vminq_f32(v83, v84), v85), v89));
          if ((vuzp1_s8(v90, v90).u32[0] & 0xFFFFFF) == 0)
          {
            v91 = (int8x8_t)vmovn_s32(vcgtq_f32(vsubq_f32((float32x4_t)0, v89), vmaxq_f32(vmaxq_f32(v83, v84), v85)));
            return (vuzp1_s8(v91, v91).u32[0] & 0xFFFFFF) == 0;
          }
        }
      }
      return 0;
    }
  }
  return result;
}

uint64_t physx::Gu::sweepSphereSphere(float32x2_t *a1, float32x2_t *a2, float32x2_t *a3, float *a4, float32x2_t *a5, float a6, float a7)
{
  float v7;
  float v8;
  float v9;
  float v10;
  float v11;
  float v12;
  float v13;
  float v14;
  float v15;
  float v16;
  float v17;
  float v18;
  float v19;
  float v20;
  float v21;
  float v22;
  float v23;
  float v24;
  float v25;
  float v26;
  float v27;
  float32x2_t v30;
  float v31;
  float v32;
  float v33;
  float v34;

  v7 = a2->f32[1];
  v8 = a2[1].f32[0];
  v9 = a1->f32[1];
  v10 = a1[1].f32[0];
  v11 = a2->f32[0] - a1->f32[0];
  v12 = v7 - v9;
  v13 = v8 - v10;
  v14 = (float)((float)((float)(v12 * v12) + (float)(v11 * v11)) + (float)(v13 * v13))
      - (float)((float)(a6 + a7) * (float)(a6 + a7));
  if (v14 <= 0.0
    || (v15 = (float)(v8 + a3[1].f32[0]) - v8,
        v16 = (float)((float)(a2->f32[0] + a3->f32[0]) - a2->f32[0]) - (float)(a1->f32[0] - a1->f32[0]),
        v17 = (float)((float)(v7 + a3->f32[1]) - v7) - (float)(v9 - v9),
        v18 = v15 - (float)(v10 - v10),
        v19 = (float)((float)(v17 * v17) + (float)(v16 * v16)) + (float)(v18 * v18),
        v19 == 0.0))
  {
    *a4 = 0.0;
  }
  else
  {
    v20 = (float)((float)((float)(v12 * v17) + (float)(v16 * v11)) + (float)(v18 * v13))
        + (float)((float)((float)(v12 * v17) + (float)(v16 * v11)) + (float)(v18 * v13));
    v21 = (float)(v14 * (float)(v19 * -4.0)) + (float)(v20 * v20);
    if (v21 < 0.0)
      return 0;
    v22 = sqrtf(v21);
    v23 = 1.0 / (float)(v19 + v19);
    v24 = -v20;
    v25 = v23 * (float)(v22 - v20);
    v26 = v23 * (float)(v24 - v22);
    if (v25 <= v26)
      v27 = v25;
    else
      v27 = v26;
    if (v25 > v26)
      v26 = v25;
    *a4 = v27;
    if (v26 < 0.0 || v27 > 1.0)
      return 0;
    if (v27 != 0.0)
    {
      v34 = (float)(v27 * a3[1].f32[0]) + a2[1].f32[0];
      v30 = vsub_f32(vadd_f32(vmul_n_f32(*a3, v27), *a2), *a1);
      v31 = v34 - a1[1].f32[0];
      goto LABEL_16;
    }
  }
  v30 = vneg_f32(*a3);
  v31 = -a3[1].f32[0];
LABEL_16:
  *a5 = v30;
  a5[1].f32[0] = v31;
  v32 = sqrtf(vmlas_n_f32(COERCE_FLOAT(vmul_f32(v30, v30).i32[1]), v30.f32[0], v30.f32[0]) + (float)(v31 * v31));
  if (v32 > 0.0)
  {
    v33 = 1.0 / v32;
    *a5 = vmul_n_f32(v30, v33);
    a5[1].f32[0] = v31 * v33;
  }
  return 1;
}

uint64_t physx::Gu::sweepSphereVSTri(float *a1, float *a2, float32x2_t *a3, float32x2_t *a4, float *a5, _BYTE *a6, int a7, float a8)
{
  float v11;
  float v12;
  float v13;
  float v14;
  float v15;
  float v16;
  float v17;
  float v18;
  float v19;
  float v20;
  float v21;
  float v22;
  float v23;
  float v24;
  float v25;
  float v26;
  float v27;
  float v28;
  float v29;
  float v30;
  float v31;
  float v32;
  float v33;
  float v34;
  float v35;
  float v36;
  BOOL v37;
  float v38;
  float v39;
  float v40;
  float v41;
  float v42;
  float v43;
  float v44;
  BOOL v45;
  float v46;
  float v47;
  float v48;
  float v49;
  float v50;
  float v51;
  float v52;
  float v53;
  float v54;
  uint64_t result;
  float v56;
  float v57;
  float v58;
  float v59;
  float v60;
  float v61;
  float v62;
  float v63;
  float v64;
  float v65;
  float v66;
  float v67;
  float v68;
  float v69;
  float v70;
  float v71;
  float v72;
  float v75;
  float v76;
  float v77;
  float v78;
  unsigned int v79;
  float v80;
  float v81;
  float v82;
  float v83;
  float v84;
  float v85;
  float v86;
  float v87;
  float v88;
  float v89;
  float v90;
  float v91;
  float v92;
  float v93;
  float v94;
  float v95;
  float v96;
  float v97;
  float v98;
  float v99;
  float v100;
  char v101;
  unsigned int v102;
  float *v103;
  float *v104;
  float v105;
  float v106;
  float v107;
  float v108;
  float v109;
  float v110;
  float v111;
  float v112;
  float v113;
  float v114;
  float v115;
  float v116;
  float v117;
  float v118;
  int v119;
  _BOOL4 v120;
  float v121;
  float v123;
  float v124;
  float v125;
  float v126;
  float v127;
  float v128;
  float32x2_t v129;
  float v130;
  float v131;
  float v132;
  uint64_t v133;

  v133 = *MEMORY[0x24BDAC8D0];
  *a6 = 0;
  v11 = *a1;
  v12 = a1[1];
  v14 = a1[2];
  v13 = a1[3];
  v15 = v13 - *a1;
  v17 = a1[4];
  v16 = a1[5];
  v18 = v17 - v12;
  v19 = v16 - v14;
  v21 = a1[6];
  v20 = a1[7];
  v22 = v21 - *a1;
  v23 = v20 - v12;
  v24 = a1[8];
  v25 = v24 - v14;
  if (!a7)
    goto LABEL_24;
  v26 = a3->f32[0];
  v27 = a3->f32[1];
  v28 = a3->f32[0] - v11;
  v29 = a3[1].f32[0];
  v30 = (float)((float)(v18 * (float)(v27 - v12)) + (float)(v15 * v28)) + (float)(v19 * (float)(v29 - v14));
  v31 = (float)((float)(v23 * (float)(v27 - v12)) + (float)(v22 * v28)) + (float)(v25 * (float)(v29 - v14));
  if (v30 > 0.0 || (v32 = *a1, v33 = a1[1], v34 = a1[2], v31 > 0.0))
  {
    v35 = (float)((float)(v18 * (float)(v27 - v17)) + (float)(v15 * (float)(v26 - v13)))
        + (float)(v19 * (float)(v29 - v16));
    v36 = (float)((float)(v23 * (float)(v27 - v17)) + (float)(v22 * (float)(v26 - v13)))
        + (float)(v25 * (float)(v29 - v16));
    v37 = v35 < 0.0 || v36 > v35;
    v32 = a1[3];
    v33 = a1[4];
    v34 = a1[5];
    if (v37)
    {
      v38 = (float)(v30 * v36) - (float)(v35 * v31);
      if (v35 > 0.0 || v30 < 0.0 || v38 > 0.0)
      {
        v43 = (float)((float)(v18 * (float)(v27 - v20)) + (float)(v15 * (float)(v26 - v21)))
            + (float)(v19 * (float)(v29 - v24));
        v44 = (float)((float)(v23 * (float)(v27 - v20)) + (float)(v22 * (float)(v26 - v21)))
            + (float)(v25 * (float)(v29 - v24));
        v45 = v44 < 0.0 || v43 > v44;
        v32 = a1[6];
        v33 = a1[7];
        v34 = a1[8];
        if (!v45)
          goto LABEL_23;
        v46 = (float)(v43 * v31) - (float)(v30 * v44);
        if (v44 > 0.0 || v46 > 0.0 || v31 < 0.0)
        {
          v123 = (float)(v35 * v44) - (float)(v43 * v36);
          if (v123 <= 0.0 && (v124 = v36 - v35, v124 >= 0.0) && (float)(v43 - v44) >= 0.0)
          {
            v128 = v124 / (float)(v124 + (float)(v43 - v44));
            v32 = v13 + (float)((float)(v21 - v13) * v128);
            v33 = v17 + (float)((float)(v20 - v17) * v128);
            v34 = v16 + (float)((float)(v24 - v16) * v128);
          }
          else
          {
            v125 = 1.0 / (float)(v38 + (float)(v123 + v46));
            v126 = v46 * v125;
            v127 = v38 * v125;
            v32 = (float)(v22 * v127) + (float)(v11 + (float)(v15 * v126));
            v33 = (float)(v23 * v127) + (float)(v12 + (float)(v18 * v126));
            v34 = (float)(v25 * v127) + (float)(v14 + (float)(v19 * v126));
          }
          goto LABEL_23;
        }
        v47 = v31 / (float)(v31 - v44);
        v40 = v22 * v47;
        v41 = v23 * v47;
        v42 = v25 * v47;
      }
      else
      {
        v39 = v30 / (float)(v30 - v35);
        v40 = v15 * v39;
        v41 = v18 * v39;
        v42 = v19 * v39;
      }
      v32 = v11 + v40;
      v33 = v12 + v41;
      v34 = v14 + v42;
    }
  }
LABEL_23:
  if ((float)((float)((float)((float)(v33 - v27) * (float)(v33 - v27))
                     + (float)((float)(v32 - v26) * (float)(v32 - v26)))
             + (float)((float)(v34 - v29) * (float)(v34 - v29))) <= (float)(a8 * a8))
  {
    *a5 = 0.0;
    return 1;
  }
LABEL_24:
  v48 = a4->f32[0];
  v49 = a4->f32[1];
  v50 = a4[1].f32[0];
  v51 = (float)(v49 * v25) - (float)(v50 * v23);
  v52 = (float)(v50 * v22) - (float)(a4->f32[0] * v25);
  v53 = (float)(a4->f32[0] * v23) - (float)(v49 * v22);
  v54 = (float)((float)(v18 * v52) + (float)(v15 * v51)) + (float)(v19 * v53);
  if (v54 > -0.00001 && v54 < 0.00001)
    return 0;
  v56 = a2[1];
  v57 = a2[2] * a8;
  v58 = *a2 * a8;
  v59 = (float)((float)(v49 * (float)(v56 * a8)) + (float)(v48 * v58)) + (float)(v50 * v57);
  if (v59 < 0.0)
  {
    v60 = v56 * a8;
  }
  else
  {
    v57 = -v57;
    v60 = -(float)(v56 * a8);
  }
  if (v59 >= 0.0)
    v58 = -(float)(*a2 * a8);
  v61 = a3[1].f32[0];
  v62 = v61 - v57;
  v64 = a3->f32[0];
  v63 = a3->f32[1];
  v65 = 1.0 / v54;
  v66 = (float)(a3->f32[0] - v58) - v11;
  v67 = (float)(v63 - v60) - v12;
  v68 = v65 * (float)((float)((float)(v52 * v67) + (float)(v66 * v51)) + (float)((float)(v62 - v14) * v53));
  v69 = (float)(v67 * v19) - (float)((float)(v62 - v14) * v18);
  v70 = (float)((float)(v62 - v14) * v15) - (float)(v66 * v19);
  v71 = (float)(v66 * v18) - (float)(v67 * v15);
  v72 = v65 * (float)((float)((float)(v49 * v70) + (float)(v48 * v69)) + (float)(v50 * v71));
  if (v68 >= 0.0 && v68 <= 1.0 && v72 >= 0.0 && (float)(v68 + v72) <= 1.0)
  {
    v93 = v65 * (float)((float)((float)(v23 * v70) + (float)(v22 * v69)) + (float)(v25 * v71));
    if (v93 >= 0.0)
    {
      *a5 = v93;
      result = 1;
      *a6 = 1;
      return result;
    }
    return 0;
  }
  if (v68 >= 0.0)
  {
    if (v72 >= 0.0)
    {
      v102 = 2;
    }
    else
    {
      if ((float)(v68 + v72) <= 1.0)
      {
LABEL_60:
        v79 = 0;
        goto LABEL_61;
      }
      v83 = (float)(v13 * v68) + (float)(v21 * v72);
      v84 = (float)(v17 * v68) + (float)(v20 * v72);
      v85 = (float)(v16 * v68) + (float)(v24 * v72);
      v86 = (float)(1.0 - v68) - v72;
      v87 = v12 * v86;
      v88 = v14 * v86;
      v89 = v83 + (float)(v11 * v86);
      if ((float)((float)((float)(v18 * (float)((float)(v84 + v87) - v12)) + (float)(v15 * (float)(v89 - v11)))
                 + (float)(v19 * (float)((float)(v85 + v88) - v14))) >= (float)((float)((float)(v18 * v18)
                                                                                      + (float)(v15 * v15))
                                                                              + (float)(v19 * v19)))
      {
        v90 = v13 - v21;
        v91 = v17 - v20;
        v92 = v16 - v24;
        v81 = (float)((float)(v91 * v91) + (float)(v90 * v90)) + (float)(v92 * v92);
        v82 = (float)((float)(v91 * (float)((float)(v84 + v87) - v20)) + (float)(v90 * (float)(v89 - v21)))
            + (float)(v92 * (float)((float)(v85 + v88) - v24));
        v79 = 1;
LABEL_50:
        if (v82 < v81)
          goto LABEL_63;
LABEL_57:
        v129.i32[0] = 0;
        physx::Gu::intersectRaySphere(a3, a4, &a1[3 * v79], (float *)&v129, 0, 3.4028e38, a8);
        if ((v101 & 1) != 0)
        {
          *a5 = v129.f32[0];
          return 1;
        }
        return 0;
      }
      v102 = 0;
    }
    v79 = 1;
  }
  else
  {
    if (v72 < 0.0)
    {
      v75 = (float)(1.0 - v68) - v72;
      v76 = (float)((float)(v13 * v68) + (float)(v21 * v72)) + (float)(v11 * v75);
      v77 = (float)((float)(v17 * v68) + (float)(v20 * v72)) + (float)(v12 * v75);
      v78 = (float)((float)(v16 * v68) + (float)(v24 * v72)) + (float)(v14 * v75);
      if ((float)((float)((float)((float)(v12 - v17) * (float)(v77 - v17))
                         + (float)((float)(v11 - v13) * (float)(v76 - v13)))
                 + (float)((float)(v14 - v16) * (float)(v78 - v16))) >= (float)((float)((float)((float)(v12 - v17)
                                                                                              * (float)(v12 - v17))
                                                                                      + (float)((float)(v11 - v13)
                                                                                              * (float)(v11 - v13)))
                                                                              + (float)((float)(v14 - v16)
                                                                                      * (float)(v14 - v16))))
      {
        v79 = 0;
        v80 = v11 - v21;
        v81 = (float)((float)((float)(v12 - v20) * (float)(v12 - v20)) + (float)(v80 * v80))
            + (float)((float)(v14 - v24) * (float)(v14 - v24));
        v82 = (float)((float)((float)(v12 - v20) * (float)(v77 - v20)) + (float)(v80 * (float)(v76 - v21)))
            + (float)((float)(v14 - v24) * (float)(v78 - v24));
        goto LABEL_50;
      }
      goto LABEL_60;
    }
    if ((float)(v68 + v72) <= 1.0)
    {
      v79 = 0;
LABEL_63:
      v102 = 2;
      goto LABEL_66;
    }
    v94 = (float)(v13 * v68) + (float)(v21 * v72);
    v95 = (float)(v17 * v68) + (float)(v20 * v72);
    v96 = (float)(v16 * v68) + (float)(v24 * v72);
    v97 = (float)(1.0 - v68) - v72;
    v98 = v12 * v97;
    v99 = v14 * v97;
    v100 = v94 + (float)(v11 * v97);
    if ((float)((float)((float)(v23 * (float)((float)(v95 + v98) - v12)) + (float)(v22 * (float)(v100 - v11)))
               + (float)(v25 * (float)((float)(v96 + v99) - v14))) >= (float)((float)((float)(v23 * v23)
                                                                                    + (float)(v22 * v22))
                                                                            + (float)(v25 * v25)))
    {
      v79 = 2;
      if ((float)((float)((float)((float)(v20 - v17) * (float)((float)(v95 + v98) - v17))
                         + (float)((float)(v21 - v13) * (float)(v100 - v13)))
                 + (float)((float)(v24 - v16) * (float)((float)(v96 + v99) - v16))) >= (float)((float)((float)((float)(v20 - v17) * (float)(v20 - v17)) + (float)((float)(v21 - v13) * (float)(v21 - v13)))
                                                                                             + (float)((float)(v24 - v16) * (float)(v24 - v16))))
        goto LABEL_57;
LABEL_61:
      v102 = 1;
      goto LABEL_66;
    }
    v102 = 0;
    v79 = 2;
  }
LABEL_66:
  v103 = &a1[3 * v79];
  v104 = &a1[3 * v102];
  v105 = v103[1];
  v106 = *v104 - *v103;
  v107 = v104[1] - v105;
  v108 = v103[2];
  v109 = v104[2] - v108;
  v110 = v64 - *v103;
  v111 = v63 - v105;
  v112 = v61 - v108;
  v113 = (float)((float)(v107 * (float)(v63 - v105)) + (float)(v110 * v106)) + (float)(v112 * v109);
  if (v113 > 0.0)
  {
    v114 = (float)((float)(v107 * v107) + (float)(v106 * v106)) + (float)(v109 * v109);
    if (v113 < v114)
    {
      v115 = v113 / v114;
      v106 = v106 * v115;
      v107 = v107 * v115;
      v109 = v109 * v115;
    }
    v110 = v110 - v106;
    v111 = v111 - v107;
    v112 = v112 - v109;
  }
  v116 = sqrtf((float)((float)(v111 * v111) + (float)(v110 * v110)) + (float)(v112 * v112)) - a8;
  if (v116 <= 0.0)
  {
    v120 = 1;
    v117 = 0.0;
  }
  else
  {
    v117 = 0.0;
    if (v116 <= 10.0)
      v118 = 0.0;
    else
      v118 = v116 + -10.0;
    v129.f32[0] = v64 + (float)(v48 * v118);
    v129.f32[1] = v63 + (float)(v49 * v118);
    v130 = v61 + (float)(v50 * v118);
    physx::Gu::intersectRayCapsuleInternal(&v129, a4, v103, v104, &v131, a8);
    v120 = v119 != 0;
    if (v119)
    {
      v121 = v131;
      if (v131 >= v132 && v119 != 1)
        v121 = v132;
      v117 = v118 + v121;
    }
  }
  result = 0;
  if (v120 && v117 >= 0.0)
  {
    *a5 = v117;
    return 1;
  }
  return result;
}

uint64_t physx::Gu::sweepSphereTriangles(uint64_t result, uint64_t a2, float32x2_t *a3, float32x2_t *a4, unsigned int *a5, uint64_t a6, float *a7, int a8, float a9, float a10, char a11, char a12, unsigned __int8 a13)
{
  int v18;
  unsigned int v19;
  unsigned int v20;
  char v21;
  float v22;
  float v23;
  float v24;
  unsigned int v25;
  unsigned int v26;
  float *v27;
  float v28;
  float v29;
  float v30;
  float v31;
  float v32;
  float v33;
  float v34;
  float v35;
  float v36;
  float v37;
  float v38;
  float v39;
  float v40;
  float v41;
  float v42;
  float v43;
  float v44;
  float v45;
  float v46;
  float v47;
  float v48;
  BOOL v50;
  float v51;
  float v53;
  float v54;
  float v55;
  float v56;
  BOOL v57;
  float v59;
  float v60;
  float v61;
  float v62;
  float v63;
  float v64;
  float v65;
  float v66;
  float v67;
  float v68;
  float v69;
  float v70;
  float v71;
  float v72;
  float v73;
  float v74;
  float v75;
  _BOOL4 v77;
  float v78;
  float v79;
  float v80;
  float v81;
  float v82;
  float v85;
  float v87;
  float v88;
  float v89;
  unsigned int v90;
  float v91;
  float v92;
  char v93;
  float v94;
  float32x2_t v95;
  uint64_t v96;
  float v97;

  if (!(_DWORD)result)
    return result;
  v18 = result;
  if (a5)
    v19 = *a5;
  else
    v19 = 0;
  v20 = 0;
  v21 = a8 | a11;
  v22 = (float)((float)(a3->f32[1] * a4->f32[1]) + (float)(a3->f32[0] * a4->f32[0]))
      + (float)(a3[1].f32[0] * a4[1].f32[0]);
  v23 = v22 - (float)(a9 + 0.002);
  v90 = -1;
  v85 = 2.0;
  v24 = a10;
  v88 = 0.0;
  v89 = 0.0;
  v87 = 0.0;
  while (1)
  {
    if (v19 == v20)
      v25 = 0;
    else
      v25 = v20;
    if (v20)
      v26 = v25;
    else
      v26 = v19;
    v27 = (float *)(a2 + 36 * v26);
    v28 = *v27;
    v29 = v27[1];
    v30 = v27[2];
    v31 = v27[3];
    v33 = v27[4];
    v32 = v27[5];
    v34 = v27[6];
    v35 = v27[7];
    v36 = v27[8];
    v37 = (float)((float)(*v27 + v31) + v34) * 0.33333;
    v38 = (float)((float)(v29 + v33) + v35) * 0.33333;
    v39 = (float)((float)(v30 + v32) + v36) * 0.33333;
    v40 = v37 - a3->f32[0];
    v41 = v38 - a3->f32[1];
    v42 = v39 - a3[1].f32[0];
    v43 = a4->f32[0];
    v44 = a4->f32[1];
    v45 = a4[1].f32[0];
    v46 = fmaxf((float)((float)(v41 * v44) + (float)(v40 * a4->f32[0])) + (float)(v42 * v45), 0.0);
    if (v46 >= v24)
      v46 = v24;
    v47 = (float)(sqrtf((float)((float)((float)(v41 - (float)(v44 * v46)) * (float)(v41 - (float)(v44 * v46)))+ (float)((float)(v40 - (float)(v43 * v46)) * (float)(v40 - (float)(v43 * v46))))+ (float)((float)(v42 - (float)(v45 * v46)) * (float)(v42 - (float)(v45 * v46))))- a9)+ -0.0001;
    v57 = v47 < 0.0;
    v48 = v47 * v47;
    v50 = !v57
       && v48 > (float)((float)((float)((float)(v38 - v29) * (float)(v38 - v29))
                              + (float)((float)(v37 - v28) * (float)(v37 - v28)))
                      + (float)((float)(v39 - v30) * (float)(v39 - v30)))
       && v48 > (float)((float)((float)((float)(v38 - v33) * (float)(v38 - v33))
                              + (float)((float)(v37 - v31) * (float)(v37 - v31)))
                      + (float)((float)(v39 - v32) * (float)(v39 - v32)));
    v51 = (float)((float)((float)(v38 - v35) * (float)(v38 - v35)) + (float)((float)(v37 - v34) * (float)(v37 - v34)))
        + (float)((float)(v39 - v36) * (float)(v39 - v36));
    if (v50 && v48 > v51)
      goto LABEL_61;
    v53 = (float)((float)(v29 * v44) + (float)(v28 * v43)) + (float)(v30 * v45);
    v54 = (float)((float)(v33 * v44) + (float)(v31 * v43)) + (float)(v32 * v45);
    v55 = (float)((float)(v35 * v44) + (float)(v34 * v43)) + (float)(v36 * v45);
    if (v53 >= v54)
      v56 = (float)((float)(v33 * v44) + (float)(v31 * v43)) + (float)(v32 * v45);
    else
      v56 = (float)((float)(v29 * v44) + (float)(v28 * v43)) + (float)(v30 * v45);
    if (v56 >= v55)
      v56 = (float)((float)(v35 * v44) + (float)(v34 * v43)) + (float)(v36 * v45);
    if (v56 > (float)((float)(a9 + 0.002) + (float)(v22 + v24)))
      goto LABEL_61;
    v57 = v54 < v23 && v53 < v23;
    if (v57 && v55 < v23)
      goto LABEL_61;
    v59 = v31 - v28;
    v60 = v33 - v29;
    v61 = v32 - v30;
    v62 = v34 - v28;
    v63 = v35 - v29;
    v64 = (float)(v60 * (float)(v36 - v30)) - (float)(v61 * v63);
    v65 = (float)(v61 * v62) - (float)(v59 * (float)(v36 - v30));
    v66 = (float)(v59 * v63) - (float)(v60 * v62);
    if ((v21 & 1) == 0 && (float)((float)((float)(v65 * v44) + (float)(v64 * v43)) + (float)(v66 * v45)) > 0.0)
      goto LABEL_61;
    v67 = sqrtf((float)((float)(v65 * v65) + (float)(v64 * v64)) + (float)(v66 * v66));
    if (v67 == 0.0)
      goto LABEL_61;
    v68 = 1.0 / v67;
    v92 = v64 * v68;
    *(float *)&v96 = v64 * v68;
    *((float *)&v96 + 1) = v65 * v68;
    v69 = v65 * v68;
    v91 = v66 * v68;
    v97 = v66 * v68;
    v94 = 0.0;
    if (!physx::Gu::sweepSphereVSTri(v27, (float *)&v96, a3, a4, &v94, &v93, a13, a9) || v94 > a10)
      goto LABEL_61;
    v70 = a4->f32[1];
    v71 = a4[1].f32[0];
    v72 = -fabsf((float)((float)(v69 * v70) + (float)(v92 * a4->f32[0])) + (float)(v91 * v71));
    v73 = v94 <= v24 ? v24 : v94;
    v74 = v73 >= 1.0 ? v73 * 0.001 : 0.001;
    if ((float)(v24 - v74) <= v94)
    {
      v75 = v24 + v74;
      if (v85 <= v72 || v75 <= v94)
      {
        v77 = v94 < v24;
        if (v85 != v72)
          v77 = 0;
        if (v94 != 0.0 && !v77)
          goto LABEL_61;
      }
    }
    if (v94 == 0.0)
    {
      *a7 = -a4->f32[0];
      a7[1] = -v70;
      a7[2] = -v71;
      *(_DWORD *)(a6 + 16) = v26;
      *(_WORD *)(a6 + 20) = 1026;
      v82 = -a4[1].f32[0];
      *(float32x2_t *)(a6 + 36) = vneg_f32(*a4);
      *(float *)(a6 + 44) = v82;
      *(_DWORD *)(a6 + 48) = 0;
      return 1;
    }
    if ((a12 & 1) != 0)
      break;
    v87 = v92;
    v88 = v69;
    v89 = v91;
    v90 = v26;
    v24 = v94;
    v85 = v72;
LABEL_61:
    if (v18 == ++v20)
      goto LABEL_62;
  }
  v24 = v94;
  v90 = v26;
  v88 = v69;
  v89 = v91;
  v87 = v92;
LABEL_62:
  if (v90 == -1)
    return 0;
  physx::Gu::computeSphereTriImpactData((float *)&v96, &v94, a3, a4, a2 + 36 * v90, v24);
  if (!a11 || a8)
  {
    v81 = v94;
    v78 = v88;
    v80 = v89;
    v79 = v87;
  }
  else
  {
    v79 = v87;
    v78 = v88;
    v80 = v89;
    v81 = v94;
    if ((float)((float)((float)(v88 * a4->f32[1]) + (float)(v87 * a4->f32[0])) + (float)(v89 * a4[1].f32[0])) > 0.0)
    {
      v81 = -v94;
      v95 = vneg_f32(v95);
    }
  }
  *(_QWORD *)(a6 + 24) = v96;
  *(float *)(a6 + 32) = v97;
  *(float *)(a6 + 36) = v81;
  *(float32x2_t *)(a6 + 40) = v95;
  *(float *)(a6 + 48) = v24;
  *(_DWORD *)(a6 + 16) = v90;
  *(_WORD *)(a6 + 20) = 3;
  *a7 = v79;
  a7[1] = v78;
  result = 1;
  a7[2] = v80;
  return result;
}

float *physx::Gu::computeSphereTriImpactData(float *a1, float *a2, float32x2_t *a3, float32x2_t *a4, uint64_t a5, float a6)
{
  float v9;
  float v10;
  float *result;
  float v12;
  float v13;
  float v14;
  float v15;
  float v16;
  float v17;
  float v18;
  float v19;
  float v20;
  float v21;
  float v22;
  float v23;
  float v24;
  float v25;
  float v26;
  float v27;
  float v28;
  float v29;
  float v30;
  uint64_t v31;
  float32x2_t v32;
  float v33;

  v9 = a4[1].f32[0] * a6;
  v10 = a3[1].f32[0];
  v32 = vadd_f32(vmul_n_f32(*a4, a6), *a3);
  v33 = v9 + v10;
  v31 = 0;
  result = physx::Gu::closestPtPointTriangle((float *)&v32, (float *)a5, (float32x2_t *)(a5 + 12), (float32x2_t *)(a5 + 24), (float *)&v31 + 1, (float *)&v31, (uint64_t)&v28);
  v12 = v29;
  v13 = v32.f32[0] - v28;
  v14 = v32.f32[1] - v29;
  v15 = v30;
  v16 = v33 - v30;
  v17 = sqrtf((float)((float)(v14 * v14) + (float)(v13 * v13)) + (float)(v16 * v16));
  if (v17 > 0.0)
  {
    v13 = v13 * (float)(1.0 / v17);
    v14 = v14 * (float)(1.0 / v17);
    v16 = v16 * (float)(1.0 / v17);
  }
  if (v17 < 0.001)
  {
    v18 = *(float *)(a5 + 4);
    v19 = *(float *)(a5 + 8);
    v20 = *(float *)(a5 + 12) - *(float *)a5;
    v21 = *(float *)(a5 + 24) - *(float *)a5;
    v22 = *(float *)(a5 + 16) - v18;
    v23 = *(float *)(a5 + 20) - v19;
    v24 = *(float *)(a5 + 28) - v18;
    v25 = *(float *)(a5 + 32) - v19;
    v13 = (float)(v22 * v25) - (float)(v23 * v24);
    v14 = (float)(v23 * v21) - (float)(v20 * v25);
    v16 = (float)(v20 * v24) - (float)(v22 * v21);
    v26 = sqrtf((float)((float)(v14 * v14) + (float)(v13 * v13)) + (float)(v16 * v16));
    if (v26 > 0.0)
    {
      v27 = 1.0 / v26;
      v13 = v13 * v27;
      v14 = v14 * v27;
      v16 = v16 * v27;
    }
  }
  *a1 = v28;
  a1[1] = v12;
  a1[2] = v15;
  *a2 = v13;
  a2[1] = v14;
  a2[2] = v16;
  return result;
}

void physx::Gu::computeBoxTriImpactData(float32x2_t *a1, float32x2_t *a2, float32x2_t *a3, float32x2_t *a4, uint64_t a5, double a6, double a7, double a8, __n128 a9, double a10, double a11, double a12, __n128 a13)
{
  float v18;
  float v19;
  float v20;
  float v21;
  int8x8_t v23;
  float32x4_t v28;
  float32x4_t v29;
  float32x4_t v30;
  float v31;
  float32x2_t v33;
  float v34;
  float32x2_t v35;
  float32x4_t v36;
  float32x4_t v37;
  float32x4_t v38;
  float32x4_t v39;
  float32x4_t v40;
  float32x4_t v41;
  float32x4_t v42;
  float32x2_t v43;
  float32x4_t v44;
  int32x2_t v45;
  float32x4_t v46;
  float32x4_t v47;
  float32x4_t v48;
  float32x2_t v49;
  int32x4_t v50;
  int v51;
  float32x2_t v52;
  float32x2_t v53;
  int v54;
  float32x4_t v55;
  float32x2_t v56;
  float32x2_t v57;
  int8x16_t v58;
  float32x2_t v59;
  float32x4_t v60;
  float32x4_t v61;
  float32x4_t v62;
  float32x2_t v63;
  float32x4_t v64;
  float32x4_t v65;
  float32x4_t v66;
  float32x4_t v67;
  float32x4_t v68;
  float32x4_t v69;
  float32x2_t v70;
  uint64_t v71;
  float32x4_t v72;
  float32x4_t v73;
  float32x2_t v74;
  float32x4_t v75;
  float32x4_t v76;
  float32x2_t v77;
  float32x2_t v78;
  int v79;
  float32x4_t v80;
  float32x4_t v81;
  float32x4_t v82;
  int8x8_t v83;
  float32x2_t v84;
  float32x2_t v85;
  float32x2_t v86;
  float32x2_t v87;
  float32x2_t v88;
  float32x2_t v89;
  int8x8_t v90;
  float32x4_t v91;
  float32x2_t v92;
  float32x2_t v93;
  int8x8_t v94;
  float32x4_t v95;
  int8x8_t v96;
  float32x4_t v97;
  float32x4_t v98;
  float32x2_t v99;
  float32x4_t v100;
  float32x2_t v101;
  float32x4_t v102;
  float32x2_t v103;
  float32x4_t v104;
  float32x4_t v105;
  float32x4_t v106;
  float32x2_t v107;
  float32x4_t v108;
  float32x2_t v109;
  float32x4_t v110;
  float32x4_t v111;
  float32x2_t v112;
  float32x4_t v113;
  float32x2_t v114;
  float32x4_t v115;
  float32x2_t v116;
  float32x4_t v117;
  float32x2_t v118;
  __int32 v119;
  uint64_t v120;
  uint64_t v121;
  float32x4_t v122;
  float32x2_t v123;
  float32x4_t v124;
  float32x4_t v125;
  float32x2_t v126;
  float32x2_t v127;
  int v128;
  float32x4_t v129;
  float32x2_t v130;
  int v131;
  float32x2_t v132;
  float32x2_t v133;
  float32x2_t v134;
  int v135;
  unsigned int v136;
  float32x2_t v137;
  float32x2_t v138;
  float32x2_t v139;
  int v140;
  int8x16_t v141;
  float32x2_t v142;
  float32x2_t v143;
  int v144;
  float32x4_t v145;
  __int128 v146;
  __int128 v147;
  float32x4_t v148;
  float32x4_t v149;
  float32x4_t v150;
  float32x2_t v151;
  float32x2_t v152;
  int v153;
  float32x2_t v154;
  int v155;
  int16x4_t v156;
  int8x8_t v157;
  float v158;
  float32x2_t v160;
  float32x4_t v161;
  float32x4_t v162;
  float32x4_t v163;
  float32x4_t v164;
  float32x4_t v165;
  float32x2_t v166;
  float32x2_t v167;
  int v168;
  float32x4_t v169;
  float32x4_t v170;
  float32x4_t v171;
  float32x4_t v172;
  float32x4_t v173;
  float32x4_t v174;
  float32x4_t v175;
  float32x2_t v176;
  float32x2_t v177;
  int v178;
  float32x4_t v179;
  float32x4_t v180;
  BOOL v182;
  float v183;
  float32x2_t v184;
  int32x4_t v185;
  int32x2_t v186;
  float32x2_t v187;
  int8x16_t v188;
  float32x4_t v189;
  float32x4_t v190;
  float32x4_t v191;
  float32x4_t v192;
  float32x4_t v193;
  float v194;
  float v195;
  float32x4_t v196;
  float32x4_t v197;
  float32x4_t v198;
  unsigned __int32 v199;
  double v200;
  int v201;
  float v202[6];
  float32x4_t v203;
  float32x4_t v204;
  unsigned int v205;
  float32x2_t v206;
  float32x2_t v207;
  float32x4_t v208;
  float32x4_t v209;
  float32x4_t v210;
  _OWORD v211[4];
  float32x4_t v212;
  float32x4_t v213;
  int8x16_t v214[2];
  uint64_t v215;

  v195 = *(float *)&a6;
  v215 = *MEMORY[0x24BDAC8D0];
  v18 = a3->f32[0];
  v19 = a3->f32[1];
  a9.n128_f32[0] = -v19;
  LODWORD(a10) = a3[1].i32[0];
  v202[0] = -a3->f32[0];
  v202[1] = -v19;
  v202[2] = -*(float *)&a10;
  v202[3] = v18;
  v202[4] = v19;
  v202[5] = *(float *)&a10;
  v20 = a4[1].f32[0];
  v21 = 1.0 / v20;
  _ZF = v20 == 0.0;
  LODWORD(a6) = 0;
  if (!_ZF)
    *(float *)&a6 = v21;
  v23 = (int8x8_t)vceqz_f32(*a4);
  __asm { FMOV            V9.2S, #1.0 }
  v200 = COERCE_DOUBLE(vbic_s8((int8x8_t)vdiv_f32(_D9, *a4), v23));
  v201 = LODWORD(a6);
  v199 = 2139095039;
  *(float *)&a11 = -*(float *)&a10;
  if (physx::Gu::sweepBoxTriangle(a5, (uint64_t)v202, a4, (float *)&v200, a1, a2, &v199, 0, a6, v200, *(double *)&v23, a9, a10, a11, a12, a13)&& (a2->f32[0] != 0.0 || a2->f32[1] != 0.0 || a2[1].f32[0] != 0.0))
  {
    return;
  }
  v31 = a4[1].f32[0];
  _S8 = v31 * v195;
  v33 = vmul_n_f32(*a4, v195);
  v34 = (float)(v31 * v195) + (float)(v31 * -0.1);
  v35 = vadd_f32(v33, vmul_f32(*a4, (float32x2_t)vdup_n_s32(0xBDCCCCCD)));
  *(float32x2_t *)v28.f32 = vsub_f32(*(float32x2_t *)a5, v35);
  *(float32x2_t *)v29.f32 = vsub_f32(*(float32x2_t *)(a5 + 12), v35);
  *(float32x2_t *)v30.f32 = vsub_f32(*(float32x2_t *)(a5 + 24), v35);
  v28.f32[2] = *(float *)(a5 + 8) - v34;
  v29.f32[2] = *(float *)(a5 + 20) - v34;
  v30.f32[2] = *(float *)(a5 + 32) - v34;
  v36 = vaddq_f32(v28, v29);
  v37.i32[3] = 0;
  v38.i32[3] = 0;
  v39 = vaddq_f32(v36, v30);
  v40.i32[3] = 0;
  v41 = (float32x4_t)vdupq_n_s32(0x3EAAAA9Fu);
  v42 = vmulq_f32(v39, v41);
  v42.i32[3] = 0;
  *(float32x2_t *)v41.f32 = *a3;
  v44 = v41;
  v44.i32[2] = a3[1].i32[0];
  v43 = (float32x2_t)vdup_laneq_s32((int32x4_t)v44, 2);
  v44.i32[3] = 0;
  *(float32x2_t *)v41.f32 = vpmin_f32(v43, *a3);
  v45 = (int32x2_t)vpmin_f32(*(float32x2_t *)v41.f32, *(float32x2_t *)v41.f32);
  v43.f32[0] = 0.15 * *(float *)v45.i32;
  v186 = (int32x2_t)v43;
  v46 = vmulq_f32(v42, v42);
  v46.i64[0] = vpaddq_f32(v46, v46).u64[0];
  v205 = 0;
  v50.i64[1] = 0;
  v47 = (float32x4_t)vbslq_s8((int8x16_t)vcltzq_s32(vshlq_n_s32(vdupq_lane_s32(vcgtz_f32(vpadd_f32(*(float32x2_t *)v46.f32, *(float32x2_t *)v46.f32)), 0), 0x1FuLL)), (int8x16_t)v42, (int8x16_t)xmmword_2260E5F10);
  v204 = v47;
  v48 = vmulq_f32(v47, v47);
  v48.i64[0] = vpaddq_f32(v48, v48).u64[0];
  v49 = vpadd_f32(*(float32x2_t *)v48.f32, *(float32x2_t *)v48.f32);
  *(float32x2_t *)v50.i8 = vrsqrte_f32(v49);
  v51 = 4;
  do
  {
    *(float32x2_t *)v50.i8 = vmul_f32(*(float32x2_t *)v50.i8, vrsqrts_f32(vmul_f32(*(float32x2_t *)v50.i8, *(float32x2_t *)v50.i8), v49));
    --v51;
  }
  while (v51);
  v52 = vmul_f32(v49, (float32x2_t)vbsl_s8((int8x8_t)vdup_lane_s32(vceqz_f32(v49), 0), (int8x8_t)_D9, *(int8x8_t *)v50.i8));
  v53 = vrecpe_f32(v52);
  v54 = 4;
  do
  {
    v53 = vmul_f32(v53, vrecps_f32(v52, v53));
    --v54;
  }
  while (v54);
  v187 = v33;
  *(float *)v45.i32 = *(float *)v45.i32 * 0.05;
  v55 = vmulq_n_f32(v47, v53.f32[0]);
  v55.i32[3] = 0;
  *(int32x2_t *)v50.i8 = vdup_lane_s32(v45, 0);
  v56 = (float32x2_t)vdup_n_s32(0x7F7FFFFFu);
  *(float32x2_t *)v50.i8 = vmul_f32(vmin_f32(*(float32x2_t *)v50.i8, v56), (float32x2_t)vdup_n_s32(0x3DCCCCCDu));
  v57 = vmax_f32(*(float32x2_t *)v50.i8, (float32x2_t)vdup_n_s32(0x358637BDu));
  v58 = (int8x16_t)vnegq_f32(v44);
  v58.i32[3] = 0;
  v59 = (float32x2_t)vdup_n_s32(0x3F7FF141u);
  v50.i32[0] = -1;
  v185 = v50;
  v191 = v37;
  v192 = v38;
  v189 = v44;
  v190 = v40;
  v188 = v58;
  while (1)
  {
    v60 = v55;
    v61 = v47;
    v62 = vnegq_f32(v47);
    v62.i32[3] = 0;
    v63 = v56;
    v67 = vmulq_f32(v38, v62);
    v67.i64[0] = vpaddq_f32(v67, v67).u64[0];
    *(float32x2_t *)v67.f32 = vpadd_f32(*(float32x2_t *)v67.f32, *(float32x2_t *)v67.f32);
    v64 = vmulq_f32(v37, v62);
    v64.i64[0] = vpaddq_f32(v64, v64).u64[0];
    *(float32x2_t *)v64.f32 = vpadd_f32(*(float32x2_t *)v64.f32, *(float32x2_t *)v64.f32);
    v65 = vmulq_f32(v40, v62);
    v65.i64[0] = vpaddq_f32(v65, v65).u64[0];
    *(float32x2_t *)v65.f32 = vpadd_f32(*(float32x2_t *)v65.f32, *(float32x2_t *)v65.f32);
    v203 = v61;
    v66 = (float32x4_t)vbslq_s8((int8x16_t)vdupq_lane_s32((int32x2_t)vand_s8((int8x8_t)vcgt_f32(*(float32x2_t *)v67.f32, *(float32x2_t *)v65.f32), (int8x8_t)vcgt_f32(*(float32x2_t *)v67.f32, *(float32x2_t *)v64.f32)), 0), (int8x16_t)v38, vbslq_s8((int8x16_t)vdupq_lane_s32(vcgt_f32(*(float32x2_t *)v64.f32, *(float32x2_t *)v65.f32), 0), (int8x16_t)v37, (int8x16_t)v40));
    v67.i64[0] = 0;
    v67.i32[2] = 0;
    v68 = (float32x4_t)vbslq_s8((int8x16_t)vcgtzq_f32(v61), (int8x16_t)v44, v58);
    v47 = vsubq_f32(v66, v68);
    v69 = vmulq_f32(v60, v47);
    v69.i64[0] = vpaddq_f32(v69, v69).u64[0];
    v70 = vpadd_f32(*(float32x2_t *)v69.f32, *(float32x2_t *)v69.f32);
    if (v70.f32[0] > 3.4028e38)
    {
      _Q6.i64[0] = 0;
      _Q6.i32[2] = 0;
LABEL_79:
      v160 = v187;
      goto LABEL_80;
    }
    if (vuzp1_s8((int8x8_t)vdup_lane_s16((int16x4_t)vand_s8((int8x8_t)vcgtz_f32(v70), (int8x8_t)vcgt_f32(v70, vmul_f32(v63, v59))), 0), *(int8x8_t *)v47.f32).u32[0] == -1)break;
    v71 = v205;
    v211[v205] = v66;
    *(&v208 + v71) = v68;
    v205 = v71 + 1;
    *(&v212 + v71) = v47;
    switch((_DWORD)v71)
    {
      case 3:
        v193 = v61;
        v196 = v60;
        physx::Gu::closestPtPointTetrahedron(&v212, v211, &v208, (int *)&v205);
        v58 = v188;
        v44 = v189;
        v61 = v193;
        v60 = v196;
        v40 = v190;
        v37 = v191;
        v38 = v192;
        goto LABEL_54;
      case 2:
        v47 = v212;
        v80 = vsubq_f32(v213, v212);
        v81 = vsubq_f32((float32x4_t)v214[0], v212);
        v83 = (int8x8_t)vmls_f32(vmul_f32(*(float32x2_t *)v80.f32, (float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v81, (int8x16_t)v81, 4uLL)), (float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v80, (int8x16_t)v80, 4uLL), *(float32x2_t *)v81.f32);
        *(int8x8_t *)v82.f32 = vext_s8(v83, (int8x8_t)vmls_f32(vmul_f32((float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v80, (int8x16_t)v80, 8uLL), *(float32x2_t *)v81.f32), *(float32x2_t *)v80.f32, (float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v81, (int8x16_t)v81, 8uLL)), 4uLL);
        v83.i32[1] = 0;
        v205 = 3;
        v84 = vpadd_f32(vmul_f32(*(float32x2_t *)v82.f32, *(float32x2_t *)v82.f32), vmul_f32((float32x2_t)v83.u32[0], (float32x2_t)v83.u32[0]));
        v85 = vpadd_f32(v84, v84);
        if (v85.f32[0] > 0.00000011921)
        {
          if (v85.f32[0] == 0.0)
          {
            v47 = 0uLL;
          }
          else
          {
            *(int8x8_t *)&v82.u32[2] = v83;
            v86 = (float32x2_t)vextq_s8((int8x16_t)v213, (int8x16_t)v213, 8uLL).u64[0];
            v87 = (float32x2_t)vextq_s8(v214[0], v214[0], 8uLL).u64[0];
            v88 = (float32x2_t)vextq_s8(v214[0], v214[0], 4uLL).u64[0];
            v89 = (float32x2_t)vextq_s8((int8x16_t)v213, (int8x16_t)v213, 4uLL).u64[0];
            v90 = (int8x8_t)vmls_f32(vmul_f32(*(float32x2_t *)v213.f32, v88), v89, *(float32x2_t *)v214[0].i8);
            *(int8x8_t *)v91.f32 = vext_s8(v90, (int8x8_t)vmls_f32(vmul_f32(v86, *(float32x2_t *)v214[0].i8), *(float32x2_t *)v213.f32, v87), 4uLL);
            v91.i64[1] = v90.u32[0];
            v92 = (float32x2_t)vextq_s8((int8x16_t)v212, (int8x16_t)v212, 8uLL).u64[0];
            v93 = (float32x2_t)vextq_s8((int8x16_t)v212, (int8x16_t)v212, 4uLL).u64[0];
            v94 = (int8x8_t)vmls_f32(vmul_f32(v93, *(float32x2_t *)v214[0].i8), v88, *(float32x2_t *)v212.f32);
            *(int8x8_t *)v95.f32 = vext_s8(v94, (int8x8_t)vmls_f32(vmul_f32(*(float32x2_t *)v212.f32, v87), *(float32x2_t *)v214[0].i8, v92), 4uLL);
            v95.i64[1] = v94.u32[0];
            v96 = (int8x8_t)vmls_f32(vmul_f32(*(float32x2_t *)v212.f32, v89), v93, *(float32x2_t *)v213.f32);
            *(int8x8_t *)v97.f32 = vext_s8(v96, (int8x8_t)vmls_f32(vmul_f32(v92, *(float32x2_t *)v213.f32), *(float32x2_t *)v212.f32, v86), 4uLL);
            v97.i64[1] = v96.u32[0];
            v98 = vmulq_f32(v91, v82);
            v98.i64[0] = vpaddq_f32(v98, v98).u64[0];
            v99 = vpadd_f32(*(float32x2_t *)v98.f32, *(float32x2_t *)v98.f32);
            v100 = vmulq_f32(v95, v82);
            v100.i64[0] = vpaddq_f32(v100, v100).u64[0];
            v101 = vpadd_f32(*(float32x2_t *)v100.f32, *(float32x2_t *)v100.f32);
            v102 = vmulq_f32(v97, v82);
            v102.i64[0] = vpaddq_f32(v102, v102).u64[0];
            v103 = vpadd_f32(*(float32x2_t *)v102.f32, *(float32x2_t *)v102.f32);
            if (vuzp1_s8((int8x8_t)vdup_lane_s16((int16x4_t)vand_s8(vand_s8((int8x8_t)vcgez_f32(v101), (int8x8_t)vcgez_f32(v99)), (int8x8_t)vcgez_f32(v103)), 0), *(int8x8_t *)v212.f32).u32[0] == -1)
            {
              v129 = vmulq_f32(v212, v82);
              v130 = vrecpe_f32(v85);
              v131 = 4;
              do
              {
                v130 = vmul_f32(v130, vrecps_f32(v85, v130));
                --v131;
              }
              while (v131);
              v132 = (float32x2_t)vpaddq_f32(v129, v129).u64[0];
              v47 = vmulq_n_f32(v82, vmul_f32(v130, vpadd_f32(v132, v132)).f32[0]);
              v47.i32[3] = 0;
            }
            else
            {
              v104 = vnegq_f32(v212);
              v104.i32[3] = 0;
              v105 = vnegq_f32(v213);
              v105.i32[3] = 0;
              v106 = vmulq_f32(v104, v80);
              v106.i64[0] = vpaddq_f32(v106, v106).u64[0];
              v107 = vpadd_f32(*(float32x2_t *)v106.f32, *(float32x2_t *)v106.f32);
              v108 = vmulq_f32(v80, v105);
              v108.i64[0] = vpaddq_f32(v108, v108).u64[0];
              v109 = vpadd_f32(*(float32x2_t *)v108.f32, *(float32x2_t *)v108.f32);
              if (vuzp1_s8((int8x8_t)vdup_lane_s16((int16x4_t)vand_s8(vand_s8((int8x8_t)vcgez_f32(v107), (int8x8_t)vclez_f32(v109)), (int8x8_t)vclez_f32(v103)), 0), *(int8x8_t *)v212.f32).u32[0] == -1)
              {
                v133 = vsub_f32(v107, v109);
                v134 = vrecpe_f32(v133);
                v135 = 4;
                do
                {
                  v134 = vmul_f32(v134, vrecps_f32(v133, v134));
                  --v135;
                }
                while (v135);
                v121 = 0;
                v47 = vmlaq_n_f32(v212, v80, vmul_f32(v107, (float32x2_t)vbsl_s8((int8x8_t)vcgt_f32(vabs_f32(v133), (float32x2_t)0x3400000034000000), (int8x8_t)v134, 0)).f32[0]);
                v47.i64[1] = vextq_s8((int8x16_t)v47, (int8x16_t)v47, 8uLL).u32[0];
                v136 = 2;
                v120 = 1;
              }
              else
              {
                v110 = vnegq_f32((float32x4_t)v214[0]);
                v110.i32[3] = 0;
                v111 = vmulq_f32(v105, v81);
                v111.i64[0] = vpaddq_f32(v111, v111).u64[0];
                v112 = vpadd_f32(*(float32x2_t *)v111.f32, *(float32x2_t *)v111.f32);
                v113 = vmulq_f32(v80, v110);
                v113.i64[0] = vpaddq_f32(v113, v113).u64[0];
                v114 = vpadd_f32(*(float32x2_t *)v113.f32, *(float32x2_t *)v113.f32);
                v115 = vmulq_f32(v81, v110);
                v115.i64[0] = vpaddq_f32(v115, v115).u64[0];
                v116 = vpadd_f32(*(float32x2_t *)v115.f32, *(float32x2_t *)v115.f32);
                if (vuzp1_s8((int8x8_t)vdup_lane_s16((int16x4_t)vand_s8(vand_s8((int8x8_t)vcge_f32(v112, v109), (int8x8_t)vcge_f32(v114, v116)), (int8x8_t)vclez_f32(v99)), 0), *(int8x8_t *)v212.f32).u32[0] == -1)
                {
                  v137 = vsub_f32(v112, v109);
                  v138 = vadd_f32(v137, vsub_f32(v114, v116));
                  v139 = vrecpe_f32(v138);
                  v140 = 4;
                  do
                  {
                    v139 = vmul_f32(v139, vrecps_f32(v138, v139));
                    --v140;
                  }
                  while (v140);
                  v141 = (int8x16_t)vmlaq_n_f32(v213, vsubq_f32((float32x4_t)v214[0], v213), vmul_f32(v137, (float32x2_t)vbsl_s8((int8x8_t)vcgt_f32(vabs_f32(v138), (float32x2_t)0x3400000034000000), (int8x8_t)v139, 0)).f32[0]);
                  v141.i64[1] = vextq_s8(v141, v141, 8uLL).u32[0];
                  v136 = 2;
                  v120 = 2;
                  v121 = 1;
                  v47 = (float32x4_t)v141;
                }
                else
                {
                  v117 = vmulq_f32(v104, v81);
                  v117.i64[0] = vpaddq_f32(v117, v117).u64[0];
                  v118 = vpadd_f32(*(float32x2_t *)v117.f32, *(float32x2_t *)v117.f32);
                  if (vuzp1_s8((int8x8_t)vdup_lane_s16((int16x4_t)vand_s8(vand_s8((int8x8_t)vcgez_f32(v118), (int8x8_t)vclez_f32(v116)), (int8x8_t)vclez_f32(v101)), 0), *(int8x8_t *)v212.f32).u32[0] == -1)
                  {
                    v142 = vsub_f32(v118, v116);
                    v143 = vrecpe_f32(v142);
                    v144 = 4;
                    do
                    {
                      v143 = vmul_f32(v143, vrecps_f32(v142, v143));
                      --v144;
                    }
                    while (v144);
                    v121 = 0;
                    v47 = vmlaq_n_f32(v212, v81, vmul_f32(v118, (float32x2_t)vbsl_s8((int8x8_t)vcgt_f32(vabs_f32(v142), (float32x2_t)0x3400000034000000), (int8x8_t)v143, 0)).f32[0]);
                    v47.i64[1] = vextq_s8((int8x16_t)v47, (int8x16_t)v47, 8uLL).u32[0];
                    v120 = 2;
                  }
                  else if (vuzp1_s8((int8x8_t)vdup_lane_s16((int16x4_t)vand_s8((int8x8_t)vclez_f32(v118), (int8x8_t)vclez_f32(v107)), 0), *(int8x8_t *)v212.f32).u32[0] == -1)
                  {
                    v121 = 0;
                    v120 = 1;
                  }
                  else
                  {
                    *(int16x4_t *)v47.f32 = vdup_lane_s16((int16x4_t)vand_s8((int8x8_t)vcge_f32(v109, v112), (int8x8_t)vcgez_f32(v109)), 0);
                    *(int8x8_t *)v47.f32 = vuzp1_s8(*(int8x8_t *)v47.f32, *(int8x8_t *)v47.f32);
                    v119 = v47.i32[0];
                    v47 = (float32x4_t)vbslq_s8((int8x16_t)vdupq_lane_s32((int32x2_t)*(_OWORD *)&vceqq_s32((int32x4_t)v47, v185), 0), (int8x16_t)v213, v214[0]);
                    v120 = 1;
                    if (v119 == -1)
                      v121 = 1;
                    else
                      v121 = 2;
                  }
                  v136 = v120;
                }
              }
              v145 = *(&v212 + v120);
              v146 = v211[v121];
              v147 = v211[v120];
              v148 = *(&v208 + v121);
              v149 = *(&v208 + v120);
              v212 = *(&v212 + v121);
              v213 = v145;
              v211[0] = v146;
              v211[1] = v147;
              v208 = v148;
              v209 = v149;
              v205 = v136;
            }
          }
          goto LABEL_54;
        }
        v205 = 2;
        v122 = vmulq_f32(v80, v80);
        v122.i64[0] = vpaddq_f32(v122, v122).u64[0];
        v123 = vpadd_f32(*(float32x2_t *)v122.f32, *(float32x2_t *)v122.f32);
        if (vuzp1_s8((int8x8_t)vdup_lane_s16((int16x4_t)vcge_f32((float32x2_t)0x3400000034000000, v123), 0), *(int8x8_t *)v212.f32).u32[0] != -1)
        {
          v124 = vnegq_f32(v212);
          v124.i32[3] = 0;
          v125 = vmulq_f32(v124, v80);
          v125.i64[0] = vpaddq_f32(v125, v125).u64[0];
          v126 = vpadd_f32(*(float32x2_t *)v125.f32, *(float32x2_t *)v125.f32);
          v127 = vrecpe_f32(v123);
          v128 = 4;
          do
          {
            v127 = vmul_f32(v127, vrecps_f32(v123, v127));
            --v128;
          }
          while (v128);
          v47 = vmlaq_n_f32(v212, v80, vmax_f32(vmin_f32(vmul_f32(v126, v127), _D9), 0).f32[0]);
          goto LABEL_36;
        }
        break;
      case 1:
        v47 = v212;
        v72 = vsubq_f32(v213, v212);
        v73 = vmulq_f32(v72, v72);
        v73.i64[0] = vpaddq_f32(v73, v73).u64[0];
        v74 = vpadd_f32(*(float32x2_t *)v73.f32, *(float32x2_t *)v73.f32);
        if (vuzp1_s8((int8x8_t)vdup_lane_s16((int16x4_t)vcge_f32((float32x2_t)0x3400000034000000, v74), 0), *(int8x8_t *)v212.f32).u32[0] != -1)
        {
          v75 = vnegq_f32(v212);
          v75.i32[3] = 0;
          v76 = vmulq_f32(v75, v72);
          v76.i64[0] = vpaddq_f32(v76, v76).u64[0];
          v77 = vpadd_f32(*(float32x2_t *)v76.f32, *(float32x2_t *)v76.f32);
          v78 = vrecpe_f32(v74);
          v79 = 4;
          do
          {
            v78 = vmul_f32(v78, vrecps_f32(v74, v78));
            --v79;
          }
          while (v79);
          v47 = vmlaq_n_f32(v212, v72, vmax_f32(vmin_f32(vmul_f32(v77, v78), _D9), 0).f32[0]);
LABEL_36:
          v47.i64[1] = vextq_s8((int8x16_t)v47, (int8x16_t)v47, 8uLL).u32[0];
          goto LABEL_54;
        }
        break;
      default:
        goto LABEL_54;
    }
    v205 = 1;
LABEL_54:
    v204 = v47;
    v150 = vmulq_f32(v47, v47);
    v150.i64[0] = vpaddq_f32(v150, v150).u64[0];
    v151 = vpadd_f32(*(float32x2_t *)v150.f32, *(float32x2_t *)v150.f32);
    v152 = vrsqrte_f32(v151);
    v153 = 4;
    do
    {
      v152 = vmul_f32(v152, vrsqrts_f32(vmul_f32(v152, v152), v151));
      --v153;
    }
    while (v153);
    v56 = vmul_f32(v151, (float32x2_t)vbsl_s8((int8x8_t)vdup_lane_s32(vceqz_f32(v151), 0), (int8x8_t)_D9, (int8x8_t)v152));
    v154 = vrecpe_f32(v56);
    v155 = 4;
    do
    {
      v154 = vmul_f32(v154, vrecps_f32(v56, v154));
      --v155;
    }
    while (v155);
    v55 = vmulq_n_f32(v47, v154.f32[0]);
    v55.i32[3] = 0;
    v156 = (int16x4_t)vcgt_f32(v63, v56);
    if (vuzp1_s8((int8x8_t)vdup_lane_s16((int16x4_t)vand_s8((int8x8_t)vcgt_f32(v56, v57), (int8x8_t)v156), 0), *(int8x8_t *)v47.f32).u32[0] != -1)
    {
      v157 = (int8x8_t)vdup_lane_s16(v156, 0);
      if (vuzp1_s8(v157, v157).u32[0] == -1)
        goto LABEL_83;
      LODWORD(v158) = vmin_f32((float32x2_t)vdup_lane_s32(v186, 0), 0).u32[0];
      if (v205 == 3)
      {
        v206 = 0;
        v207 = 0;
        v194 = v158;
        v198 = v60;
        physx::Gu::barycentricCoordinates(&v203, &v212, &v213, (float32x4_t *)v214, &v207, &v206);
        v158 = v194;
        v60 = v198;
        v171 = vmulq_n_f32(vsubq_f32(v209, v208), v207.f32[0]);
        v171.i32[3] = 0;
        v172 = vmulq_n_f32(vsubq_f32(v210, v208), v206.f32[0]);
        v172.i32[3] = 0;
        v67 = vaddq_f32(v208, vaddq_f32(v171, v172));
      }
      else if (v205 == 2)
      {
        v173 = vsubq_f32(v212, v61);
        v174 = vsubq_f32(vsubq_f32(v213, v61), v173);
        v175 = vmulq_f32(v174, v174);
        v175.i64[0] = vpaddq_f32(v175, v175).u64[0];
        v176 = vpadd_f32(*(float32x2_t *)v175.f32, *(float32x2_t *)v175.f32);
        v177 = vrecpe_f32(v176);
        v178 = 4;
        do
        {
          v177 = vmul_f32(v177, vrecps_f32(v176, v177));
          --v178;
        }
        while (v178);
        v179 = vnegq_f32(v173);
        v179.i32[3] = 0;
        v180 = vmulq_f32(v179, v174);
        v180.i64[0] = vpaddq_f32(v180, v180).u64[0];
        v67 = vmlaq_n_f32(v208, vsubq_f32(v209, v208), vmul_f32((float32x2_t)vbsl_s8((int8x8_t)vcgtz_f32(v176), (int8x8_t)v177, 0), vpadd_f32(*(float32x2_t *)v180.f32, *(float32x2_t *)v180.f32)).f32[0]);
        v67.i32[2] = vextq_s8((int8x16_t)v67, (int8x16_t)v67, 8uLL).u32[0];
      }
      else
      {
        v67.i64[0] = 0;
        v67.i32[2] = 0;
        if (v205 == 1)
          v67 = v208;
      }
      if (vmax_f32(v63, 0).f32[0] <= (float)(0.2 * v158))
      {
LABEL_83:
        *a1 = 0;
        a1[1].i32[0] = 0;
        v184 = vneg_f32(*a4);
        v183 = -a4[1].f32[0];
        goto LABEL_84;
      }
      _Q6 = vnegq_f32(v60);
      goto LABEL_79;
    }
  }
  _Q6 = vnegq_f32(v60);
  _Q6.i32[3] = 0;
  if (v205 == 3)
  {
    v206 = 0;
    v207 = 0;
    v197 = _Q6;
    physx::Gu::barycentricCoordinates(&v204, &v212, &v213, (float32x4_t *)v214, &v207, &v206);
    _Q6 = v197;
    v161 = vmulq_n_f32(vsubq_f32(v209, v208), v207.f32[0]);
    v161.i32[3] = 0;
    v162 = vmulq_n_f32(vsubq_f32(v210, v208), v206.f32[0]);
    v162.i32[3] = 0;
    v67 = vaddq_f32(v208, vaddq_f32(v161, v162));
    goto LABEL_79;
  }
  if (v205 == 2)
  {
    v163 = vsubq_f32(v212, v61);
    v164 = vsubq_f32(vsubq_f32(v213, v61), v163);
    v165 = vmulq_f32(v164, v164);
    v165.i64[0] = vpaddq_f32(v165, v165).u64[0];
    v166 = vpadd_f32(*(float32x2_t *)v165.f32, *(float32x2_t *)v165.f32);
    v167 = vrecpe_f32(v166);
    v168 = 4;
    v160 = v187;
    do
    {
      v167 = vmul_f32(v167, vrecps_f32(v166, v167));
      --v168;
    }
    while (v168);
    v169 = vnegq_f32(v163);
    v169.i32[3] = 0;
    v170 = vmulq_f32(v169, v164);
    v170.i64[0] = vpaddq_f32(v170, v170).u64[0];
    v67 = vmlaq_n_f32(v208, vsubq_f32(v209, v208), vmul_f32((float32x2_t)vbsl_s8((int8x8_t)vcgtz_f32(v166), (int8x8_t)v167, 0), vpadd_f32(*(float32x2_t *)v170.f32, *(float32x2_t *)v170.f32)).f32[0]);
    v67.i32[2] = vextq_s8((int8x16_t)v67, (int8x16_t)v67, 8uLL).u32[0];
  }
  else
  {
    v160 = v187;
    if (v205 == 1)
      v67 = v208;
  }
LABEL_80:
  *a1 = vadd_f32(v160, *(float32x2_t *)v67.f32);
  a1[1].f32[0] = _S8 + v67.f32[2];
  __asm { FMLA            S0, S8, V6.S[2] }
  v182 = _S0 <= 0.0;
  v183 = -_Q6.f32[2];
  v184 = (float32x2_t)vbsl_s8((int8x8_t)vcltz_s32(vshl_n_s32(vdup_n_s32(_S0 > 0.0), 0x1FuLL)), (int8x8_t)vneg_f32(*(float32x2_t *)_Q6.f32), *(int8x8_t *)_Q6.f32);
  if (v182)
    v183 = _Q6.f32[2];
LABEL_84:
  *a2 = v184;
  a2[1].f32[0] = v183;
}

float32_t physx::Gu::computeEdgeEdgeNormal(float32x2_t *a1, float32x2_t *a2, float32x2_t *a3, float32x2_t *a4, float32x2_t *a5, float32x2_t *a6, float a7)
{
  float v7;
  float v8;
  float v9;
  float v10;
  float32x2_t v11;
  float32x2_t v12;
  float32x2_t v13;
  float v14;
  float v15;
  float32x2_t v16;
  float v17;
  float v18;
  float v19;
  float v20;
  float v21;
  float v22;
  float v23;
  float v24;
  float v25;
  float v26;
  float v27;
  float v28;
  float v29;
  float32_t result;

  v7 = a7 + -0.1;
  v8 = (float)((float)(a7 + -0.1) * a6[1].f32[0]) + a2[1].f32[0];
  v9 = a4[1].f32[0];
  v10 = a3[1].f32[0];
  v11 = vadd_f32(vmul_n_f32(*a6, v7), *a2);
  v12 = vsub_f32(*a4, v11);
  v13 = *a3;
  LODWORD(v14) = HIDWORD(*(unint64_t *)a3);
  v15 = vmlas_n_f32(vmuls_lane_f32(v14, *a3, 1), v13.f32[0], v13.f32[0]) + (float)(v10 * v10);
  v16 = *a5;
  v17 = a5[1].f32[0];
  v18 = vmlas_n_f32(vmuls_lane_f32(COERCE_FLOAT(HIDWORD(*(unint64_t *)a5)), *a5, 1), v16.f32[0], v16.f32[0])
      + (float)(v17 * v17);
  v19 = vmlas_n_f32(vmuls_lane_f32(v14, *a5, 1), COERCE_FLOAT(*a5), COERCE_FLOAT(*a3)) + (float)(v10 * v17);
  v20 = vmlas_n_f32(vmuls_lane_f32(v12.f32[1], *a3, 1), v12.f32[0], COERCE_FLOAT(*a3)) + (float)(v10 * (float)(v9 - v8));
  v21 = vmlas_n_f32(vmuls_lane_f32(v12.f32[1], *a5, 1), v12.f32[0], COERCE_FLOAT(*a5));
  v22 = (float)(v15 * v18) - (float)(v19 * v19);
  v23 = 0.0;
  if (v22 != 0.0)
  {
    v24 = (float)((float)(v19 * (float)-(float)(v21 + (float)(v17 * (float)(v9 - v8)))) + (float)(v20 * v18)) / v22;
    if (v24 >= 0.0)
    {
      v23 = v24;
      if (v24 > 1.0)
        v23 = 1.0;
    }
  }
  v25 = (float)((float)(v23 * v19) - (float)(v21 + (float)(v17 * (float)(v9 - v8)))) / v18;
  if (v25 >= 0.0)
  {
    if (v25 > 1.0)
    {
      v28 = (float)(v20 + v19) / v15;
      v29 = 1.0;
      if (v28 <= 1.0)
        v29 = v28;
      if (v28 >= 0.0)
        v23 = v29;
      else
        v23 = 0.0;
      v25 = 1.0;
    }
  }
  else
  {
    v26 = v20 / v15;
    v25 = 0.0;
    v27 = 1.0;
    if (v26 <= 1.0)
      v27 = v26;
    if (v26 >= 0.0)
      v23 = v27;
    else
      v23 = 0.0;
  }
  result = (float)(v8 + (float)(v10 * v23)) - (float)(v9 + (float)(v17 * v25));
  *a1 = vsub_f32(vadd_f32(v11, vmul_n_f32(v13, v23)), vadd_f32(*a4, vmul_n_f32(v16, v25)));
  a1[1].f32[0] = result;
  return result;
}

uint64_t physx::Gu::contactCapsuleConvex(uint64_t a1)
{
  float v1;
  float32x2_t v2;
  uint64_t v3;
  uint64_t v4;
  float32x2_t *v5;
  float *v6;
  float *v7;
  uint64_t v8;
  float *v9;
  float *v10;
  float *v11;
  uint64_t v12;
  uint64_t v13;
  _BOOL4 v14;
  uint64_t v15;
  float *v16;
  float32x4_t v17;
  float *v18;
  float32x4_t v19;
  float32x4_t v20;
  float v21;
  float v22;
  float v23;
  float v24;
  float v25;
  float v26;
  float v27;
  float v28;
  unsigned int v29;
  unsigned int v30;
  float v31;
  float v32;
  float v33;
  float v34;
  float v35;
  int32x2_t v36;
  int32x2_t v37;
  float32x4_t v38;
  int32x2_t v39;
  float v40;
  float v41;
  int32x2_t v42;
  float32x2_t v43;
  float32x2_t v44;
  float32x2_t v45;
  float32x2_t v46;
  float32x2_t v47;
  float32x2_t v48;
  float32x2_t v54;
  float32x2_t v55;
  float32x4_t v56;
  int8x8_t v57;
  float32x2_t v58;
  float32x4_t v59;
  float32x2_t v60;
  float32x4_t v61;
  uint64_t v62;
  float32x4_t v63;
  int32x4_t v64;
  float32x4_t v65;
  float32x4_t v66;
  int v67;
  float32x4_t v68;
  float32x4_t v69;
  float32x4_t v70;
  float32x4_t v71;
  float32x4_t v72;
  float32x4_t v73;
  float32x4_t v74;
  float32x2_t v75;
  float32x2_t v76;
  float32x2_t v77;
  float32x4_t v78;
  float32x2_t v79;
  float32x2_t v80;
  float32x2_t v81;
  float32x2_t v82;
  float32x2_t v83;
  float32x2_t v84;
  float32x2_t v85;
  float32x2_t v86;
  float32x2_t v87;
  float32x4_t v88;
  int32x2_t v89;
  int8x8_t v90;
  int8x8_t v91;
  float32x4_t v92;
  float32x4_t v93;
  float32x4_t v94;
  float32x4_t v95;
  float32x4_t v96;
  float32x4_t v97;
  float32x4_t v98;
  float32x4_t v99;
  float32x4_t v100;
  float32x4_t v101;
  float32x4_t v102;
  float32x4_t v103;
  float32x4_t v104;
  float32x4_t v105;
  float32x4_t v106;
  float32x4_t v107;
  float32x4_t v108;
  float32x4_t v109;
  float32x4_t v110;
  float32x4_t v111;
  float32x4_t v112;
  float32x4_t v113;
  float32x4_t v114;
  float32x4_t v115;
  float32x4_t v116;
  float32x4_t v117;
  float32x4_t v118;
  float32x4_t v119;
  float32x4_t v120;
  float32x4_t v121;
  float32x4_t v122;
  float32x4_t v123;
  float32x4_t v124;
  float32x4_t v125;
  float32x4_t v126;
  float32x4_t v127;
  float32x4_t v128;
  float v129;
  float v130;
  float v131;
  float v132;
  float v133;
  float v134;
  float v135;
  BOOL v136;
  float v137;
  float v138;
  float v139;
  float v140;
  float v141;
  float v142;
  float v143;
  float v144;
  float v145;
  float v146;
  float v147;
  float v148;
  float v149;
  float v150;
  float v151;
  float v152;
  float v153;
  float v154;
  float v155;
  float v156;
  float v157;
  float v158;
  int v159;
  __int128 v160;
  unint64_t v161;
  float v162;
  float v163;
  float v164;
  float v165;
  float v166;
  float v167;
  float v168;
  float v169;
  float v170;
  float v171;
  float v172;
  float v173;
  float v174;
  float v175;
  float v176;
  float v177;
  unsigned int v178;
  float v179;
  float v180;
  float v181;
  float v182;
  float v183;
  float v184;
  float v185;
  float v186;
  float v187;
  float v188;
  float v189;
  float v190;
  float v191;
  float v192;
  unsigned int v193;
  int v194;
  uint64_t v195;
  float v196;
  uint64_t v197;
  uint64_t v198;
  float v199;
  float v200;
  float v201;
  float v202;
  float v203;
  float v204;
  float v205;
  float v206;
  float v207;
  float v208;
  float v209;
  float v210;
  float v211;
  float v212;
  float v213;
  int v214;
  float32x2_t *v215;
  float v216;
  uint64_t v217;
  float v218;
  float v219;
  float32_t v220;
  float32x2_t v221;
  uint64_t v222;
  float *v223;
  float v224;
  float v225;
  float v226;
  float v227;
  float v228;
  float v229;
  float v230;
  float v231;
  float v232;
  float v233;
  float v234;
  float *v235;
  float v236;
  float v237;
  float v238;
  float v239;
  float v240;
  float v241;
  float v242;
  float v243;
  float v244;
  float v245;
  float v246;
  float v247;
  float v248;
  float v249;
  float v250;
  float32x2_t v251;
  float v252;
  float v253;
  float v254;
  float v255;
  float v256;
  float v257;
  float v258;
  float v259;
  float v260;
  float v261;
  unint64_t v262;
  float v263;
  unsigned int UniqueConvexEdges;
  float v266;
  float v267;
  float v268;
  float v269;
  float v270;
  float v271;
  float v272;
  float v274;
  float v276;
  float v277;
  float v278;
  unsigned int v281;
  int v282;
  unsigned int v283;
  unsigned int v284;
  uint64_t v285;
  float v286;
  float v287;
  float v288;
  float v289;
  float v290;
  uint64_t v291;
  float v292;
  float v293;
  float v294;
  unsigned __int8 *v295;
  unsigned int v296;
  float *v297;
  float v298;
  float v299;
  float v300;
  float v301;
  float v302;
  float v303;
  float v304;
  float v305;
  float v306;
  float v307;
  float v308;
  float v309;
  float v310;
  float v311;
  float v312;
  float v313;
  unsigned int v314;
  unsigned int v315;
  float v316;
  float *v317;
  float v318;
  float v319;
  float v320;
  float v321;
  float v322;
  float v323;
  float v324;
  float v325;
  float v326;
  float v327;
  float v328;
  float v329;
  float32_t v330;
  float32_t v331;
  float32x2_t *v332;
  char *v333;
  int v334;
  uint64_t v335;
  uint64_t v336;
  uint64_t v337;
  unsigned int v338;
  float v339;
  uint64_t v340;
  __int128 v341;
  float v342;
  float *v343;
  float v344;
  float v345;
  float v346;
  float v347;
  float v348;
  float v349;
  float v350;
  float v351;
  float *v352;
  float v353;
  float v354;
  float v355;
  float v356;
  float v357;
  float v358;
  float v359;
  float v360;
  float32_t v361;
  float v362;
  float32_t v363;
  float32_t v364;
  float v365;
  float32x2_t *v366;
  float32_t v367;
  float v368;
  float v369;
  float v370;
  float v371;
  float v372;
  float v373;
  float v374;
  float v375;
  float v376;
  float v377;
  float v378;
  float v379;
  float v380;
  float v381;
  float v382;
  float v383;
  float v384;
  float v385;
  float32x2_t v386;
  float v387;
  float v388;
  float v389;
  float v390;
  float v391;
  float v392;
  float v393;
  float v394;
  float v395;
  float v396;
  float v397;
  float v398;
  float v399;
  float v400;
  float v401;
  float *v402;
  float v403;
  float v404;
  float v405;
  float v406;
  float v407;
  float v408;
  float v409;
  float v410;
  float v411;
  float v412;
  float32x2_t *v413;
  float v414;
  __int128 v415;
  __int128 v416;
  float v417;
  float32x2_t v418;
  float v419;
  __int128 v420;
  __int128 v421;
  __int128 v422;
  __int128 v423;
  uint64_t v424;
  char v425;
  int8x16_t v426;
  float v427;
  float v428;
  float32x4_t v429;
  uint64_t (**v430)();
  _OWORD *v431;
  uint64_t (**v432)();
  float32x4_t *v433;
  unint64_t v434;
  float v435;
  float v436;
  float32x2_t v437;
  float v438;
  double v439;
  float v440;
  unint64_t v441;
  float v442;
  float32x4_t v443;
  float32x4_t v444;
  uint64_t v445;
  uint64_t v446;
  uint64_t v447;
  uint64_t v448;
  float32x4_t v449;
  float32x4_t v450;
  uint64_t v451;
  uint64_t (*v452)(float32x4_t *, __int128 *, float32x4_t *);
  _OWORD v453[2];
  float v454;
  uint64_t v455;
  int v456;
  __int128 v457;
  __int128 v458;
  __int128 v459;
  __int128 v460;
  __int128 v461;
  __int128 v462;
  uint64_t v463;
  uint64_t v464;
  uint64_t v465;
  char v466;
  uint64_t v467;

  MEMORY[0x24BDAC7A8](a1);
  v413 = v5;
  v7 = v6;
  v9 = (float *)v8;
  v11 = v10;
  v12 = v4;
  v13 = v3;
  v14 = 0;
  v467 = *MEMORY[0x24BDAC8D0];
  v15 = *(_QWORD *)(v4 + 32);
  v16 = (float *)(v4 + 16);
  v17 = *(float32x4_t *)(v4 + 16);
  v18 = (float *)(v4 + 4);
  v19 = *(float32x4_t *)(v4 + 4);
  v20 = v19;
  v20.i32[3] = 0;
  v56.i32[0] = *(_DWORD *)(v8 + 4);
  v59.i32[0] = *(_DWORD *)(v8 + 8);
  v61.i32[0] = *(_DWORD *)(v8 + 12);
  v21 = v10[4] - *(float *)(v8 + 16);
  v22 = v10[5] - *(float *)(v8 + 20);
  v23 = v10[6] - *(float *)(v8 + 24);
  v24 = v21 + v21;
  v25 = v22 + v22;
  v26 = v23 + v23;
  v27 = (float)(v61.f32[0] * v61.f32[0]) + -0.5;
  v28 = (float)((float)-(float)(v56.f32[0] * v25) - (float)(*(float *)v8 * v24)) - (float)(v59.f32[0] * v26);
  *(float *)&v29 = (float)((float)(v61.f32[0] * (float)((float)(v59.f32[0] * v25) - (float)(v56.f32[0] * v26)))
                         + (float)(v24 * v27))
                 - (float)(*(float *)v8 * v28);
  *(float *)&v30 = (float)((float)(v61.f32[0] * (float)((float)(*(float *)v8 * v26) - (float)(v59.f32[0] * v24)))
                         + (float)(v25 * v27))
                 - (float)(v56.f32[0] * v28);
  v31 = (float)((float)(v61.f32[0] * (float)((float)(v56.f32[0] * v24) - (float)(*(float *)v8 * v25)))
              + (float)(v26 * v27))
      - (float)(v59.f32[0] * v28);
  v33 = v10[2];
  v32 = v10[3];
  v34 = v10[1];
  v35 = (float)((float)((float)(v61.f32[0] * *v10) - (float)(*(float *)v8 * v32)) - (float)(v56.f32[0] * v33))
      + (float)(v34 * v59.f32[0]);
  *(float *)v36.i32 = (float)((float)((float)(v61.f32[0] * v34) - (float)(v56.f32[0] * v32)) - (float)(v59.f32[0] * *v10))
                    + (float)(v33 * *(float *)v8);
  *(float *)v37.i32 = (float)((float)((float)(v61.f32[0] * v33) - (float)(v59.f32[0] * v32))
                            - (float)(*(float *)v8 * v34))
                    + (float)(*v10 * v56.f32[0]);
  v56.f32[0] = (float)((float)((float)(*(float *)v8 * *v10) + (float)(v61.f32[0] * v32)) + (float)(v56.f32[0] * v34))
             + (float)(v59.f32[0] * v33);
  v38.i32[3] = 0;
  v38.i64[0] = __PAIR64__(v30, v29);
  *(int32x2_t *)v61.f32 = vdup_lane_s32(v37, 0);
  *(int32x2_t *)v56.f32 = vdup_lane_s32(*(int32x2_t *)v56.f32, 0);
  *(float *)v39.i32 = v35 + v35;
  v40 = *(float *)v36.i32 + *(float *)v36.i32;
  v41 = *(float *)v37.i32 + *(float *)v37.i32;
  *(float *)v42.i32 = v35 * (float)(v35 + v35);
  v43 = vmul_n_f32((float32x2_t)vdup_lane_s32(v36, 0), *(float *)v36.i32 + *(float *)v36.i32);
  *(float32x2_t *)v59.f32 = vmul_n_f32(*(float32x2_t *)v61.f32, *(float *)v37.i32 + *(float *)v37.i32);
  v44 = vmul_n_f32((float32x2_t)vdup_lane_s32(v39, 0), *(float *)v36.i32);
  v45 = vmul_n_f32(*(float32x2_t *)v61.f32, *(float *)v39.i32);
  v46 = vmul_n_f32(*(float32x2_t *)v56.f32, *(float *)v39.i32);
  *(float32x2_t *)v61.f32 = vmul_n_f32(*(float32x2_t *)v61.f32, v40);
  v47 = vmul_n_f32(*(float32x2_t *)v56.f32, v40);
  v48 = vmul_n_f32(*(float32x2_t *)v56.f32, v41);
  __asm { FMOV            V17.2S, #1.0 }
  v54 = vsub_f32(_D17, (float32x2_t)vdup_lane_s32(v42, 0));
  v55 = vsub_f32(v45, v47);
  *(int8x8_t *)v56.f32 = vext_s8((int8x8_t)vsub_f32(vsub_f32(_D17, v43), *(float32x2_t *)v59.f32), (int8x8_t)vadd_f32(v44, v48), 4uLL);
  v57 = (int8x8_t)vsub_f32(v44, v48);
  v58 = vadd_f32(v46, *(float32x2_t *)v61.f32);
  *(int8x8_t *)v59.f32 = vext_s8(v57, (int8x8_t)vsub_f32(v54, *(float32x2_t *)v59.f32), 4uLL);
  v60 = vsub_f32(v54, v43);
  *(int8x8_t *)v61.f32 = vext_s8((int8x8_t)vadd_f32(v45, v47), (int8x8_t)vsub_f32(*(float32x2_t *)v61.f32, v46), 4uLL);
  if (*(float *)(v4 + 4) == 1.0 && *(float *)(v4 + 8) == 1.0)
    v14 = *(float *)(v4 + 12) == 1.0;
  v62 = *(_QWORD *)(v3 + 8);
  v38.f32[2] = v31;
  *(float32x2_t *)&v56.u32[2] = v55;
  *(float32x2_t *)&v59.u32[2] = v58;
  *(float32x2_t *)&v61.u32[2] = v60;
  LOBYTE(v454) = 0;
  memset(v453, 0, sizeof(v453));
  v463 = v15 + 32;
  v465 = *(_QWORD *)(v15 + 72) + 20 * *(unsigned __int8 *)(v15 + 71);
  v466 = *(_BYTE *)(v15 + 70);
  v63.i64[0] = *(_QWORD *)(v15 + 92);
  v63.i64[1] = *(unsigned int *)(v15 + 100);
  v64 = (int32x4_t)vmulq_f32(v20, v63);
  *(float32x2_t *)v64.i8 = vpmin_f32((float32x2_t)vdup_laneq_s32(v64, 2), *(float32x2_t *)v64.i8);
  *(float *)v64.i32 = vpmin_f32(*(float32x2_t *)v64.i8, *(float32x2_t *)v64.i8).f32[0];
  *(float32x2_t *)&v453[1] = vmul_n_f32((float32x2_t)0x3D4CCCCD3DCCCCCDLL, *(float *)v64.i32);
  *((float *)&v453[1] + 2) = 0.025 * *(float *)v64.i32;
  if (v14)
  {
    v457 = xmmword_2260E5F10;
    v458 = xmmword_2260E5F20;
    v459 = xmmword_2260E5F40;
    v460 = xmmword_2260E5F10;
    v461 = xmmword_2260E5F20;
    v462 = xmmword_2260E5F40;
    v65 = 0uLL;
  }
  else
  {
    v66 = vrecpeq_f32(v20);
    v67 = 4;
    do
    {
      v66 = vmulq_f32(v66, vrecpsq_f32(v66, v20));
      --v67;
    }
    while (v67);
    *(int32x2_t *)v68.f32 = vdup_lane_s32(*(int32x2_t *)v19.f32, 0);
    v68.i64[1] = v68.u32[0];
    if ((~vuzp1_s8((int8x8_t)vmovn_s32(vceqq_f32(v68, v20)), *(int8x8_t *)v38.f32).u32[0] & 0xFFFFFF) != 0)
    {
      v75 = (float32x2_t)vdup_lane_s32(*(int32x2_t *)v17.f32, 1);
      v76 = (float32x2_t)vdup_laneq_s32((int32x4_t)v17, 2);
      v77 = (float32x2_t)vdup_laneq_s32((int32x4_t)v17, 3);
      v78 = vaddq_f32(v17, v17);
      v79 = vmul_lane_f32(v75, *(float32x2_t *)v78.f32, 1);
      v80 = vmul_laneq_f32(v76, v78, 2);
      v81 = vmul_n_f32(v75, v78.f32[0]);
      v82 = vmul_n_f32(v76, v78.f32[0]);
      v83 = vmul_n_f32(v77, v78.f32[0]);
      v84 = vmul_lane_f32(v76, *(float32x2_t *)v78.f32, 1);
      v85 = vmul_lane_f32(v77, *(float32x2_t *)v78.f32, 1);
      v86 = vmul_laneq_f32(v77, v78, 2);
      v87 = vsub_f32(_D17, (float32x2_t)vdup_lane_s32((int32x2_t)vmul_f32(*(float32x2_t *)v17.f32, *(float32x2_t *)v78.f32), 0));
      *(int8x8_t *)v88.f32 = vext_s8((int8x8_t)vsub_f32(vsub_f32(_D17, v79), v80), (int8x8_t)vadd_f32(v81, v86), 4uLL);
      v88.i64[1] = vsub_f32(v82, v85).u32[0];
      v89 = (int32x2_t)vext_s8((int8x8_t)vsub_f32(v81, v86), (int8x8_t)vsub_f32(v87, v80), 4uLL);
      v90 = (int8x8_t)vadd_f32(v82, v85);
      *(int8x8_t *)v78.f32 = vext_s8((int8x8_t)vdup_lane_s32(*(int32x2_t *)v88.f32, 0), (int8x8_t)v89, 4uLL);
      v91 = (int8x8_t)vdup_lane_s32(v89, 1);
      *(int32x2_t *)v92.f32 = v89;
      v92.i64[1] = vadd_f32(v84, v83).u32[0];
      *(int8x8_t *)v93.f32 = vext_s8(v90, (int8x8_t)vsub_f32(v84, v83), 4uLL);
      *(int8x8_t *)v94.f32 = vext_s8(*(int8x8_t *)v88.f32, v91, 4uLL);
      v93.i64[1] = vsub_f32(v87, v79).u32[0];
      v78.i64[1] = vdup_lane_s32(*(int32x2_t *)v93.f32, 0).u32[0];
      v94.i64[1] = vdup_lane_s32(*(int32x2_t *)v93.f32, 1).u32[0];
      *(int8x8_t *)v95.f32 = vext_s8((int8x8_t)vdup_lane_s32((int32x2_t)v88.u32[2], 0), *(int8x8_t *)&v92.u32[2], 4uLL);
      v95.i64[1] = vdup_lane_s32(*(int32x2_t *)&v93.u32[2], 0).u32[0];
      v96 = vmulq_n_f32(v78, v19.f32[0]);
      v96.i32[3] = 0;
      v97 = vmulq_lane_f32(v94, *(float32x2_t *)v19.f32, 1);
      v97.i32[3] = 0;
      v98 = vmulq_laneq_f32(v95, v19, 2);
      v98.i32[3] = 0;
      v99 = vmulq_n_f32(v96, v88.f32[0]);
      v99.i32[3] = 0;
      v100 = vmulq_lane_f32(v97, *(float32x2_t *)v88.f32, 1);
      v100.i32[3] = 0;
      v101 = vmulq_laneq_f32(v98, v88, 2);
      v101.i32[3] = 0;
      v69 = vaddq_f32(v101, vaddq_f32(v99, v100));
      v102 = vmulq_n_f32(v96, v92.f32[0]);
      v102.i32[3] = 0;
      v103 = vmulq_lane_f32(v97, *(float32x2_t *)v92.f32, 1);
      v103.i32[3] = 0;
      v104 = vmulq_laneq_f32(v98, v92, 2);
      v104.i32[3] = 0;
      v105 = vaddq_f32(v102, v103);
      v106 = vmulq_n_f32(v96, v93.f32[0]);
      v106.i32[3] = 0;
      v107 = vmulq_lane_f32(v97, *(float32x2_t *)v93.f32, 1);
      v107.i32[3] = 0;
      v108 = vmulq_laneq_f32(v98, v93, 2);
      v108.i32[3] = 0;
      v70 = vaddq_f32(v104, v105);
      v71 = vaddq_f32(v108, vaddq_f32(v106, v107));
      v457 = (__int128)v69;
      v458 = (__int128)v70;
      v459 = (__int128)v71;
      v109 = vmulq_n_f32(v78, v66.f32[0]);
      v109.i32[3] = 0;
      v110 = vmulq_lane_f32(v94, *(float32x2_t *)v66.f32, 1);
      v110.i32[3] = 0;
      v111 = vmulq_laneq_f32(v95, v66, 2);
      v111.i32[3] = 0;
      v112 = vmulq_n_f32(v109, v88.f32[0]);
      v112.i32[3] = 0;
      v113 = vmulq_lane_f32(v110, *(float32x2_t *)v88.f32, 1);
      v113.i32[3] = 0;
      v114 = vmulq_laneq_f32(v111, v88, 2);
      v114.i32[3] = 0;
      v72 = vaddq_f32(v114, vaddq_f32(v112, v113));
      v115 = vmulq_n_f32(v109, v92.f32[0]);
      v115.i32[3] = 0;
      v116 = vmulq_lane_f32(v110, *(float32x2_t *)v92.f32, 1);
      v116.i32[3] = 0;
      v117 = vmulq_laneq_f32(v111, v92, 2);
      v117.i32[3] = 0;
      v118 = vmulq_n_f32(v109, v93.f32[0]);
      v118.i32[3] = 0;
      v119 = vmulq_lane_f32(v110, *(float32x2_t *)v93.f32, 1);
      v119.i32[3] = 0;
      v73 = vaddq_f32(v117, vaddq_f32(v115, v116));
      v120 = vmulq_laneq_f32(v111, v93, 2);
      v120.i32[3] = 0;
      v74 = vaddq_f32(v120, vaddq_f32(v118, v119));
    }
    else
    {
      v66.i32[3] = 0;
      v69 = vmulq_f32(v20, (float32x4_t)xmmword_2260E5F10);
      v70 = vmulq_f32(v20, (float32x4_t)xmmword_2260E5F20);
      v71 = vmulq_f32(v20, (float32x4_t)xmmword_2260E5F40);
      v457 = (__int128)v69;
      v458 = (__int128)v70;
      v459 = (__int128)v71;
      v72 = vmulq_f32(v66, (float32x4_t)xmmword_2260E5F10);
      v73 = vmulq_f32(v66, (float32x4_t)xmmword_2260E5F20);
      v74 = vmulq_f32(v66, (float32x4_t)xmmword_2260E5F40);
    }
    v461 = (__int128)v73;
    v462 = (__int128)v74;
    v121 = vmulq_f32(v69, (float32x4_t)0);
    v121.i32[3] = 0;
    v122 = vmulq_f32(v70, (float32x4_t)0);
    v122.i32[3] = 0;
    v123 = vmulq_f32(v71, (float32x4_t)0);
    v123.i32[3] = 0;
    v65 = vaddq_f32(v123, vaddq_f32(v122, v121));
    v460 = (__int128)v72;
    v453[0] = v65;
  }
  v420 = 0u;
  v426 = 0u;
  v443 = 0u;
  v444 = v38;
  v441 = 0;
  v124 = vmulq_n_f32((float32x4_t)xmmword_2260E5F10, *(float *)&v62);
  v125 = vmulq_n_f32(v56, v124.f32[0]);
  v125.i32[3] = 0;
  v126 = vmulq_lane_f32(v59, *(float32x2_t *)v124.f32, 1);
  v126.i32[3] = 0;
  v127 = vmulq_laneq_f32(v61, v124, 2);
  v127.i32[3] = 0;
  v464 = *(_QWORD *)(v15 + 80);
  v128 = vaddq_f32(v127, vaddq_f32(v126, v125));
  v451 = 0;
  v449 = vaddq_f32(v38, v128);
  v450 = vsubq_f32(v38, v128);
  v445 = 0;
  v446 = 0x400000000;
  LOBYTE(v447) = 1;
  v432 = off_24ED91108;
  v433 = &v444;
  v430 = off_24ED91168;
  v431 = v453;
  v429 = vsubq_f32(v38, v65);
  v439 = COERCE_DOUBLE(vdup_n_s32(0x7F7FFFFFu));
  if (physx::Gu::gjk<physx::Gu::LocalConvex<physx::Gu::CapsuleV>,physx::Gu::LocalConvex<physx::Gu::ConvexHullV>>((uint64_t)&v432, (uint64_t)&v430, &v429, &v439, (int8x16_t *)&v420, &v426, &v443, &v441, v439, *(double *)v450.i64, *(double *)v449.i64, (int32x4_t)v127) == 2)
  {
    v129 = 0.0;
  }
  else
  {
    v129 = *(float *)&v441;
    v131 = v9[2];
    v130 = v9[3];
    v132 = (float)(v130 * v130) + -0.5;
    v133 = v9[1];
    v134 = (float)((float)((float)(*(float *)&v426.i32[1] + *(float *)&v426.i32[1]) * v133)
                 + (float)(*v9 * (float)(*(float *)v426.i32 + *(float *)v426.i32)))
         + (float)(v131 * (float)(*(float *)&v426.i32[2] + *(float *)&v426.i32[2]));
    v2.f32[0] = v9[4]
              + (float)((float)((float)(v130
                                      * (float)((float)(v133 * (float)(*(float *)&v426.i32[2] + *(float *)&v426.i32[2]))
                                              - (float)(v131 * (float)(*(float *)&v426.i32[1] + *(float *)&v426.i32[1]))))
                              + (float)((float)(*(float *)v426.i32 + *(float *)v426.i32) * v132))
                      + (float)(*v9 * v134));
    v1 = v9[5]
       + (float)((float)((float)(v130
                               * (float)((float)(v131 * (float)(*(float *)v426.i32 + *(float *)v426.i32))
                                       - (float)(*v9 * (float)(*(float *)&v426.i32[2] + *(float *)&v426.i32[2]))))
                       + (float)((float)(*(float *)&v426.i32[1] + *(float *)&v426.i32[1]) * v132))
               + (float)(v133 * v134));
    v372 = v9[6]
         + (float)((float)((float)(v130
                                 * (float)((float)(*v9 * (float)(*(float *)&v426.i32[1] + *(float *)&v426.i32[1]))
                                         - (float)(v133 * (float)(*(float *)v426.i32 + *(float *)v426.i32))))
                         + (float)((float)(*(float *)&v426.i32[2] + *(float *)&v426.i32[2]) * v132))
                 + (float)(v131 * v134));
    v135 = (float)((float)((float)(v443.f32[1] + v443.f32[1]) * v133) + (float)(*v9 * (float)(v443.f32[0] + v443.f32[0])))
         + (float)(v131 * (float)(v443.f32[2] + v443.f32[2]));
    v414 = (float)((float)(v130
                         * (float)((float)(v133 * (float)(v443.f32[2] + v443.f32[2]))
                                 - (float)(v131 * (float)(v443.f32[1] + v443.f32[1]))))
                 + (float)((float)(v443.f32[0] + v443.f32[0]) * v132))
         + (float)(*v9 * v135);
    v407 = (float)((float)(v130
                         * (float)((float)(*v9 * (float)(v443.f32[1] + v443.f32[1]))
                                 - (float)(v133 * (float)(v443.f32[0] + v443.f32[0]))))
                 + (float)((float)(v443.f32[2] + v443.f32[2]) * v132))
         + (float)(v131 * v135);
    v410 = (float)((float)(v130
                         * (float)((float)(v131 * (float)(v443.f32[0] + v443.f32[0]))
                                 - (float)(*v9 * (float)(v443.f32[2] + v443.f32[2]))))
                 + (float)((float)(v443.f32[1] + v443.f32[1]) * v132))
         + (float)(v133 * v135);
  }
  if (v129 >= (float)(*(float *)(v13 + 4) + *v7))
    return 0;
  v136 = 0;
  v137 = *v11;
  v138 = v11[1];
  v139 = v137 + v137;
  v141 = v11[2];
  v140 = v11[3];
  v142 = v140 + v140;
  v143 = (float)((float)(v140 * (float)(v140 + v140)) + -1.0) + (float)(v137 * (float)(v137 + v137));
  v144 = (float)(v139 * v138) + (float)(v141 * (float)(v140 + v140));
  v145 = (float)(v139 * v141) - (float)(v138 * v142);
  v146 = *(float *)(v13 + 8);
  v147 = v143 * v146;
  v148 = v146 * v144;
  v149 = v145 * v146;
  v150 = v11[4];
  v151 = v11[5];
  v152 = v150 + v147;
  v153 = v151 + v148;
  v154 = v11[6];
  v155 = v149 + v154;
  *(float *)v426.i32 = v150 + v147;
  *(float *)&v426.i32[1] = v151 + v148;
  v156 = v150 - v147;
  v157 = v151 - v148;
  v158 = v154 - v149;
  *(float *)&v426.i32[2] = v149 + v154;
  *(float *)&v426.i32[3] = v150 - v147;
  v427 = v151 - v148;
  v428 = v154 - v149;
  v159 = 2;
  if ((float)(v150 + v147) == (float)(v150 - v147) && v153 == v157)
  {
    v136 = v155 == v158;
    if (v155 == v158)
      v159 = 1;
    else
      v159 = 2;
  }
  v377 = v129;
  v420 = xmmword_2260E5F10;
  v421 = xmmword_2260E5F10;
  v422 = xmmword_2260FD430;
  v423 = xmmword_2260E5F20;
  v424 = 0x3F80000000000000;
  v425 = 0;
  if (*(float *)(v12 + 4) != 1.0 || *(float *)(v12 + 8) != 1.0 || *(float *)(v12 + 12) != 1.0)
    physx::Cm::FastVertex2ShapeScaling::init((uint64_t)&v420, v18, v16);
  physx::Gu::getPolygonalData_Convex((uint64_t)&v444, *(_QWORD *)(v12 + 48), (uint64_t)&v420);
  if (v377 <= 0.0)
  {
    v405 = v156;
    v402 = v7;
    v195 = v13;
    v196 = *(float *)(v13 + 4);
    v197 = v445;
    v198 = v446;
    v199 = *v9;
    v200 = v9[1];
    v201 = v9[2];
    v202 = v9[3];
    v203 = v200 + v200;
    v204 = v201 + v201;
    v205 = v200 * (float)(v200 + v200);
    v206 = v201 * (float)(v201 + v201);
    v207 = (float)(v199 + v199) * v200;
    v208 = (float)(v199 + v199) * v201;
    v209 = (float)(v199 + v199) * v202;
    v210 = v203 * v201;
    v211 = v203 * v202;
    v212 = v204 * v202;
    *(float *)v453 = (float)(1.0 - v205) - v206;
    *((float *)v453 + 1) = v207 + v212;
    v213 = 1.0 - (float)(v199 * (float)(v199 + v199));
    *((float *)v453 + 2) = v208 - v211;
    *((float *)v453 + 3) = v207 - v212;
    *(float *)&v453[1] = v213 - v206;
    *((float *)&v453[1] + 1) = v210 + v209;
    *((float *)&v453[1] + 2) = v208 + v211;
    *((float *)&v453[1] + 3) = v210 - v209;
    v455 = *((_QWORD *)v9 + 2);
    v214 = *((_DWORD *)v9 + 6);
    v454 = v213 - v205;
    v456 = v214;
    if ((_DWORD)v445)
    {
      v215 = (float32x2_t *)(v446 + 8);
      *(_QWORD *)&v160 = 0;
      v216 = 0.0;
      v2.i32[0] = 2139095039;
      v217 = v445;
      while (1)
      {
        v415 = v160;
        v218 = v215[-1].f32[0];
        v219 = v215[-1].f32[1];
        v220 = (float)((float)(v218 * *((float *)v453 + 2)) + (float)(v219 * *((float *)&v453[1] + 1)))
             + (float)(v215->f32[0] * v454);
        *(float32x2_t *)v443.f32 = vadd_f32(vadd_f32(vmul_n_f32(*(float32x2_t *)&v453[0], v218), vmul_n_f32(*(float32x2_t *)((char *)v453 + 12), v219)), vmul_n_f32(*(float32x2_t *)((char *)&v453[1] + 8), v215->f32[0]));
        v443.f32[2] = v220;
        LODWORD(v432) = 0;
        if (!GuTestAxis(v443.f32, (float *)v426.i32, (uint64_t)&v444, (uint64_t)&v420, (uint64_t)v453, (float *)&v432, v196))return 0;
        v221.i32[0] = (int)v432;
        *((_QWORD *)&v160 + 1) = *((_QWORD *)&v415 + 1);
        *(int8x8_t *)&v160 = vbsl_s8((int8x8_t)vdup_lane_s32(vcgt_f32(v2, v221), 0), *(int8x8_t *)v443.f32, *(int8x8_t *)&v415);
        if (*(float *)&v432 < v2.f32[0])
        {
          v216 = v443.f32[2];
          v2.f32[0] = *(float *)&v432;
        }
        v215 = (float32x2_t *)((char *)v215 + 20);
        if (!--v217)
          goto LABEL_41;
      }
    }
    *(_QWORD *)&v160 = 0;
    v216 = 0.0;
    v2.i32[0] = 2139095039;
LABEL_41:
    v378 = v155;
    v380 = v152;
    v373 = v153;
    v370 = v157;
    if (v136)
    {
      v222 = v195;
      v223 = v402;
    }
    else
    {
      v224 = v405 - v152;
      v225 = v157 - v153;
      v226 = v158 - v155;
      v227 = (float)((float)(v225 * v225) + (float)(v224 * v224)) + (float)(v226 * v226);
      v228 = 0.0;
      v229 = 0.0;
      v230 = 0.0;
      v222 = v195;
      if (v227 > 0.0)
      {
        v231 = 1.0 / sqrtf(v227);
        v228 = v224 * v231;
        v229 = v225 * v231;
        v230 = v226 * v231;
      }
      v223 = v402;
      if ((_DWORD)v197)
      {
        v232 = -v230;
        v233 = -v228;
        v234 = -v229;
        v235 = (float *)(v198 + 8);
        v408 = -v229;
        v411 = v230;
        do
        {
          v236 = *(v235 - 2);
          v237 = *(v235 - 1);
          v238 = (float)((float)(v236 * *(float *)v453) + (float)(v237 * *((float *)v453 + 3)))
               + (float)(*v235 * *((float *)&v453[1] + 2));
          v239 = (float)((float)(v236 * *((float *)v453 + 1)) + (float)(v237 * *(float *)&v453[1]))
               + (float)(*v235 * *((float *)&v453[1] + 3));
          v240 = (float)((float)(v236 * *((float *)v453 + 2)) + (float)(v237 * *((float *)&v453[1] + 1)))
               + (float)(*v235 * v454);
          v241 = (float)(v239 * v232) + (float)(v229 * v240);
          v242 = (float)(v240 * v233) + (float)(v230 * v238);
          v243 = (float)(v238 * v234) + (float)(v228 * v239);
          if (fabsf(v241) > 0.000001 || fabsf(v242) > 0.000001 || fabsf(v243) > 0.000001)
          {
            v244 = v229;
            v245 = v228;
            v416 = v160;
            v246 = (float)((float)(v242 * v242) + (float)(v241 * v241)) + (float)(v243 * v243);
            v247 = 0.0;
            v248 = 0.0;
            v249 = 0.0;
            if (v246 > 0.0)
            {
              v250 = 1.0 / sqrtf(v246);
              v247 = v241 * v250;
              v248 = v242 * v250;
              v249 = v243 * v250;
            }
            v443.i64[0] = __PAIR64__(LODWORD(v248), LODWORD(v247));
            v443.f32[2] = v249;
            LODWORD(v432) = 0;
            if (!GuTestAxis(v443.f32, (float *)v426.i32, (uint64_t)&v444, (uint64_t)&v420, (uint64_t)v453, (float *)&v432, v196))return 0;
            v251.i32[0] = (int)v432;
            *((_QWORD *)&v160 + 1) = *((_QWORD *)&v416 + 1);
            *(int8x8_t *)&v160 = vbsl_s8((int8x8_t)vdup_lane_s32(vcgt_f32(v2, v251), 0), *(int8x8_t *)v443.f32, *(int8x8_t *)&v416);
            if (*(float *)&v432 < v2.f32[0])
            {
              v216 = v443.f32[2];
              v2.f32[0] = *(float *)&v432;
            }
            v228 = v245;
            v229 = v244;
            v234 = v408;
            v230 = v411;
          }
          v235 += 5;
          --v197;
        }
        while (v197);
      }
    }
    v252 = v378;
    v253 = v9[1];
    v254 = v9[2];
    v255 = v9[3];
    v256 = (float)((float)((float)(v444.f32[1] + v444.f32[1]) * v253) + (float)(*v9 * (float)(v444.f32[0] + v444.f32[0])))
         + (float)(v254 * (float)(v444.f32[2] + v444.f32[2]));
    v257 = (float)(v255 * v255) + -0.5;
    v258 = v380;
    v259 = v373;
    v260 = vmlas_n_f32(vmuls_lane_f32((float)((float)(v373 + v370) * 0.5)- (float)(v9[5]+ (float)((float)((float)((float)((float)(v254 * (float)(v444.f32[0] + v444.f32[0]))- (float)(*v9 * (float)(v444.f32[2] + v444.f32[2])))* v255)+ (float)((float)(v444.f32[1] + v444.f32[1]) * v257))+ (float)(v253 * v256))), *(float32x2_t *)&v160, 1), (float)((float)(v380 + v405) * 0.5)- (float)(v9[4]+ (float)((float)((float)(v255* (float)((float)(v253 * (float)(v444.f32[2] + v444.f32[2]))- (float)(v254 * (float)(v444.f32[1] + v444.f32[1]))))+ (float)((float)(v444.f32[0] + v444.f32[0]) * v257))+ (float)(*v9 * v256))), *(float *)&v160)+ (float)(v216
                 * (float)((float)((float)(v378 + v158) * 0.5)
                         - (float)(v9[6]
                                 + (float)((float)((float)(v255
                                                         * (float)((float)(*v9 * (float)(v444.f32[1] + v444.f32[1]))
                                                                 - (float)(v253 * (float)(v444.f32[0] + v444.f32[0]))))
                                                 + (float)((float)(v444.f32[2] + v444.f32[2]) * v257))
                                         + (float)(v254 * v256)))));
    if (v260 >= 0.0)
      v261 = v216;
    else
      v261 = -v216;
    v386 = (float32x2_t)vbsl_s8((int8x8_t)vcltz_s32(vshl_n_s32(vdup_n_s32(v260 < 0.0), 0x1FuLL)), (int8x8_t)vneg_f32(*(float32x2_t *)&v160), *(int8x8_t *)&v160);
    v434 = (unint64_t)v386;
    v388 = v261;
    v435 = v261;
    GuGenerateVFContacts2((uint64_t)v413, v9, (uint64_t)&v444, (uint64_t)v18, v159, (uint64_t)&v426, (float32x2_t *)&v434, *(float *)(v222 + 4), *v223);
    v262 = v413[512].u32[0];
    if (v136 || v262 == 2)
      return 1;
    v384 = *(float *)(v222 + 4);
    v263 = *v223;
    UniqueConvexEdges = physx::Gu::findUniqueConvexEdges(512, (uint64_t)v453, v445, (float32x2_t *)v446, v448);
    v432 = (uint64_t (**)())__PAIR64__(LODWORD(v373), LODWORD(v380));
    *(float *)&v433 = v378;
    v430 = (uint64_t (**)())__PAIR64__(LODWORD(v370), LODWORD(v405));
    *(float *)&v431 = v158;
    _S0 = v405 - v380;
    v266 = v370 - v373;
    v267 = v158 - v378;
    v268 = sqrtf((float)((float)(v266 * v266) + (float)(_S0 * _S0)) + (float)(v267 * v267));
    if (v268 > 0.0)
    {
      v269 = 0.01 / v268;
      v270 = _S0 * v269;
      v271 = v266 * v269;
      v272 = v267 * v269;
      v258 = v380 - v270;
      v259 = v373 - v271;
      *(float *)&v432 = v380 - v270;
      *((float *)&v432 + 1) = v373 - v271;
      v252 = v378 - v272;
      *(float *)&v433 = v378 - v272;
      *(float *)&v430 = v405 + v270;
      *((float *)&v430 + 1) = v370 + v271;
      *(float *)&v431 = v158 + v272;
      _S0 = (float)(v405 + v270) - (float)(v380 - v270);
      v266 = (float)(v370 + v271) - (float)(v373 - v271);
      v267 = (float)(v158 + v272) - (float)(v378 - v272);
    }
    v429.i64[0] = __PAIR64__(LODWORD(v266), LODWORD(_S0));
    v429.f32[2] = v267;
    _V5.S[1] = v386.i32[1];
    v274 = vmuls_lane_f32(-v267, v386, 1) + (float)(v266 * v388);
    __asm { FMLA            S1, S0, V5.S[1] }
    v443.i64[0] = __PAIR64__(COERCE_UNSIGNED_INT(vmlas_n_f32(-(float)(_S0 * v388), v267, v386.f32[0])), LODWORD(v274));
    v443.f32[2] = _S1;
    v443.f32[3] = -(float)((float)((float)(v259 * v443.f32[1]) + (float)(v274 * v258)) + (float)(_S1 * v252));
    v276 = fabsf(v274);
    v277 = fabsf(v443.f32[1]);
    v278 = fabsf(_S1);
    if (v277 <= v276 || v277 <= v278)
    {
      v281 = 1;
      if (v278 <= v276)
      {
        v283 = 2;
        if (!UniqueConvexEdges)
          return 1;
LABEL_77:
        v417 = 1.0
             / (float)((float)(v429.f32[v281] * *((float *)&v434 + v283))
                     - (float)(v429.f32[v283] * *((float *)&v434 + v281)));
        v285 = v447;
        v287 = v9[2];
        v286 = v9[3];
        v288 = (float)(v286 * v286) + -0.5;
        v290 = *v9;
        v289 = v9[1];
        v409 = -*v9;
        v412 = -v287;
        v406 = -v289;
        v291 = UniqueConvexEdges;
        v400 = *(float *)&v420;
        v403 = (float)-v384 - v263;
        v396 = *((float *)&v420 + 2);
        v398 = *((float *)&v420 + 1);
        v392 = *(float *)&v421;
        v394 = *((float *)&v420 + 3);
        v292 = *((float *)&v421 + 2);
        v390 = *((float *)&v421 + 1);
        v293 = *((float *)&v421 + 3);
        v294 = *(float *)&v422;
        v295 = (unsigned __int8 *)v453 + 1;
        do
        {
          v296 = *v295;
          v297 = (float *)(v285 + 12 * *(v295 - 1));
          v298 = v297[1];
          v299 = v394 * v298;
          v300 = (float)(v398 * *v297) + (float)(v392 * v298);
          v301 = (float)(v396 * *v297) + (float)(v390 * v298);
          v302 = v297[2];
          v303 = v293 * v302;
          v304 = v301 + (float)(v294 * v302);
          v305 = (float)((float)((float)(v400 * *v297) + v299) + (float)(v292 * v302))
               + (float)((float)((float)(v400 * *v297) + v299) + (float)(v292 * v302));
          v306 = (float)(v300 + v303) + (float)(v300 + v303);
          v307 = v304 + v304;
          v308 = (float)((float)(v289 * v306) + (float)(v290 * v305)) + (float)(v287 * v307);
          v309 = (float)((float)(v286 * (float)((float)(v306 * v412) + (float)(v289 * v307))) + (float)(v305 * v288))
               + (float)(v290 * v308);
          v310 = (float)((float)(v286 * (float)((float)(v307 * v409) + (float)(v287 * v305))) + (float)(v306 * v288))
               + (float)(v289 * v308);
          v311 = (float)((float)(v286 * (float)((float)(v305 * v406) + (float)(v290 * v306))) + (float)(v307 * v288))
               + (float)(v287 * v308);
          v312 = v9[4];
          v313 = v9[5];
          *(float *)&v314 = v312 + v309;
          *(float *)&v315 = v313 + v310;
          v316 = v9[6];
          v441 = __PAIR64__(v315, v314);
          v442 = v316 + v311;
          v317 = (float *)(v285 + 12 * v296);
          v318 = v317[1];
          v319 = v394 * v318;
          v320 = (float)(v398 * *v317) + (float)(v392 * v318);
          v321 = (float)(v396 * *v317) + (float)(v390 * v318);
          v322 = v317[2];
          v323 = v293 * v322;
          v324 = v321 + (float)(v294 * v322);
          v325 = (float)((float)((float)(v400 * *v317) + v319) + (float)(v292 * v322))
               + (float)((float)((float)(v400 * *v317) + v319) + (float)(v292 * v322));
          v326 = (float)(v320 + v323) + (float)(v320 + v323);
          v327 = v324 + v324;
          v328 = (float)((float)(v289 * v326) + (float)(v290 * v325)) + (float)(v287 * v327);
          *(float *)&v439 = v312
                          + (float)((float)((float)(v286 * (float)((float)(v326 * v412) + (float)(v289 * v327)))
                                          + (float)(v325 * v288))
                                  + (float)(v290 * v328));
          *((float *)&v439 + 1) = v313
                                + (float)((float)((float)(v286 * (float)((float)(v327 * v409) + (float)(v287 * v325)))
                                                + (float)(v326 * v288))
                                        + (float)(v289 * v328));
          v440 = v316
               + (float)((float)((float)(v286 * (float)((float)(v325 * v406) + (float)(v290 * v326)))
                               + (float)(v327 * v288))
                       + (float)(v287 * v328));
          v418.i32[0] = 0;
          if (intersectEdgeEdgePreca((float *)&v432, (float *)&v430, (uint64_t)&v429, v443.f32, v281, v283, (float32x2_t *)&v434, (float *)&v441, v417, v403, (float *)&v439, (float *)&v418, &v437)&& v262 <= 0x3F)
          {
            v329 = v418.f32[0];
            v330 = -(float)(v384 + v418.f32[0]);
            v331 = v438 - (float)(v388 * v418.f32[0]);
            v332 = &v413[8 * v262++];
            v413[512].i32[0] = v262;
            *v332 = v386;
            v332[2] = vsub_f32(v437, vmul_n_f32(v386, v329));
            v332[3].f32[0] = v331;
            v332[1].f32[0] = v388;
            v332[1].f32[1] = v330;
            v332[6].i32[1] = -1;
          }
          v295 += 16;
          --v291;
        }
        while (v291);
        return 1;
      }
      v282 = 0;
    }
    else
    {
      v281 = 0;
      v282 = 2;
    }
    v283 = v281;
    v281 = v282;
    if (!UniqueConvexEdges)
      return 1;
    goto LABEL_77;
  }
  v375 = -v410;
  v376 = -v414;
  v418.f32[0] = -v414;
  v418.f32[1] = -v410;
  v374 = -v407;
  v419 = -v407;
  GuGenerateVFContacts2((uint64_t)v413, v9, (uint64_t)&v444, (uint64_t)v18, v159, (uint64_t)&v426, &v418, *(float *)(v13 + 4), *v7);
  v161 = v413[512].u32[0];
  if ((_DWORD)v161 != 2)
  {
    if (v136)
    {
LABEL_93:
      if (!v161)
      {
        v367 = v377 - *(float *)(v13 + 4);
        v413[512].i32[0] = 1;
        *v413 = v418;
        v368 = v419;
        v413[2].i32[0] = v2.i32[0];
        v413[2].f32[1] = v1;
        v413[3].f32[0] = v372;
        v413[1].f32[0] = v368;
        v413[1].f32[1] = v367;
        v413[6].i32[1] = -1;
      }
      return 1;
    }
    v369 = v1;
    v162 = *v9;
    v163 = v9[1];
    v164 = v9[2];
    v165 = v9[3];
    v166 = v163 + v163;
    v167 = v164 + v164;
    v168 = v163 * (float)(v163 + v163);
    v169 = v164 * (float)(v164 + v164);
    v170 = (float)(v162 + v162) * v163;
    v171 = (float)(v162 + v162) * v164;
    v172 = (float)(v162 + v162) * v165;
    v173 = v166 * v164;
    v174 = v166 * v165;
    v175 = v167 * v165;
    v176 = 1.0 - (float)(v162 * (float)(v162 + v162));
    v383 = v9[5];
    v385 = v9[4];
    v382 = v9[6];
    v371 = *(float *)(v13 + 4);
    v177 = *v7;
    v399 = v171 - v174;
    v401 = v170 + v175;
    v404 = (float)(1.0 - v168) - v169;
    v395 = v176 - v169;
    v397 = v170 - v175;
    v391 = v171 + v174;
    v393 = v173 + v172;
    v387 = v176 - v168;
    v389 = v173 - v172;
    v443.f32[0] = (float)((float)((float)(v170 + v175) * v375) + (float)(v404 * v376))
                + (float)((float)(v171 - v174) * v374);
    v443.f32[1] = (float)((float)((float)(v176 - v169) * v375) + (float)((float)(v170 - v175) * v376))
                + (float)((float)(v173 + v172) * v374);
    v443.f32[2] = (float)((float)((float)(v173 - v172) * v375) + (float)((float)(v171 + v174) * v376))
                + (float)((float)(v176 - v168) * v374);
    v178 = v452(&v444, &v420, &v443);
    v432 = (uint64_t (**)())__PAIR64__(LODWORD(v153), LODWORD(v152));
    *(float *)&v433 = v155;
    v430 = (uint64_t (**)())__PAIR64__(LODWORD(v157), LODWORD(v156));
    *(float *)&v431 = v158;
    v179 = v156 - v152;
    v180 = v157 - v153;
    v181 = v158 - v155;
    v182 = sqrtf((float)((float)(v180 * v180) + (float)(v179 * v179)) + (float)(v181 * v181));
    if (v182 > 0.0)
    {
      v183 = 0.01 / v182;
      v184 = v179 * v183;
      v185 = v180 * v183;
      v186 = v181 * v183;
      v152 = v152 - v184;
      v153 = v153 - v185;
      v432 = (uint64_t (**)())__PAIR64__(LODWORD(v153), LODWORD(v152));
      v155 = v155 - v186;
      *(float *)&v433 = v155;
      *(float *)&v430 = v156 + v184;
      *((float *)&v430 + 1) = v157 + v185;
      *(float *)&v431 = v158 + v186;
      v179 = (float)(v156 + v184) - v152;
      v180 = (float)(v157 + v185) - v153;
      v181 = (float)(v158 + v186) - v155;
    }
    v429.i64[0] = __PAIR64__(LODWORD(v180), LODWORD(v179));
    v429.f32[2] = v181;
    v187 = (float)(v410 * v181) + (float)(v180 * v374);
    v188 = (float)(v407 * v179) + (float)(v181 * v376);
    v189 = (float)(v414 * v180) + (float)(v179 * v375);
    *(float *)v453 = -v187;
    *((float *)v453 + 1) = -v188;
    *((float *)v453 + 2) = -v189;
    *((float *)v453 + 3) = -(float)((float)((float)-(float)(v188 * v153) - (float)(v187 * v152))
                                  + (float)((float)-v189 * v155));
    v190 = fabsf(v187);
    v191 = fabsf(v188);
    v192 = fabsf(v189);
    if (v191 <= v190 || v191 <= v192)
    {
      v193 = 1;
      if (v192 <= v190)
      {
        v284 = 2;
        goto LABEL_84;
      }
      v194 = 0;
    }
    else
    {
      v193 = 0;
      v194 = 2;
    }
    v284 = v193;
    v193 = v194;
LABEL_84:
    v333 = (char *)(v446 + 20 * v178);
    v334 = v333[18];
    v161 = v413[512].u32[0];
    if (v333[18])
    {
      v335 = 0;
      v336 = v447;
      v337 = v448 + *((unsigned __int16 *)v333 + 8);
      v338 = v334 - 1;
      v339 = *((float *)&v420 + 1);
      v379 = *(float *)&v420;
      v381 = 1.0 / (float)((float)(v429.f32[v284] * v418.f32[v193]) - (float)(v429.f32[v193] * v418.f32[v284]));
      v340 = *((_QWORD *)&v420 + 1);
      v341 = v421;
      v342 = *(float *)&v422;
      do
      {
        v343 = (float *)(v336 + 12 * *(unsigned __int8 *)(v337 + v338));
        v344 = v343[1];
        v345 = (float)(v379 * *v343) + (float)(*((float *)&v340 + 1) * v344);
        v346 = (float)(v339 * *v343) + (float)(*(float *)&v341 * v344);
        v347 = (float)(*(float *)&v340 * *v343) + (float)(*((float *)&v341 + 1) * v344);
        v348 = v343[2];
        v349 = v345 + (float)(*((float *)&v341 + 2) * v348);
        v350 = v346 + (float)(*((float *)&v341 + 3) * v348);
        v351 = v347 + (float)(v342 * v348);
        *(float *)&v441 = v385 + (float)((float)(v391 * v351) + (float)((float)(v404 * v349) + (float)(v397 * v350)));
        *((float *)&v441 + 1) = v383
                              + (float)((float)(v389 * v351) + (float)((float)(v401 * v349) + (float)(v395 * v350)));
        v442 = v382 + (float)((float)(v387 * v351) + (float)((float)(v399 * v349) + (float)(v393 * v350)));
        v352 = (float *)(v336 + 12 * *(unsigned __int8 *)(v337 + v335));
        v353 = v352[1];
        v354 = (float)(v379 * *v352) + (float)(*((float *)&v340 + 1) * v353);
        v355 = (float)(v339 * *v352) + (float)(*(float *)&v341 * v353);
        v356 = (float)(*(float *)&v340 * *v352) + (float)(*((float *)&v341 + 1) * v353);
        v357 = v352[2];
        v358 = v354 + (float)(*((float *)&v341 + 2) * v357);
        v359 = v355 + (float)(*((float *)&v341 + 3) * v357);
        v360 = v356 + (float)(v342 * v357);
        *(float *)&v439 = v385 + (float)((float)(v391 * v360) + (float)((float)(v404 * v358) + (float)(v397 * v359)));
        *((float *)&v439 + 1) = v383
                              + (float)((float)(v389 * v360) + (float)((float)(v401 * v358) + (float)(v395 * v359)));
        v440 = v382 + (float)((float)(v387 * v360) + (float)((float)(v399 * v358) + (float)(v393 * v359)));
        v436 = 0.0;
        v434 = __PAIR64__(LODWORD(v410), LODWORD(v414));
        v435 = v407;
        if (intersectEdgeEdgePreca((float *)&v432, (float *)&v430, (uint64_t)&v429, (float *)v453, v193, v284, (float32x2_t *)&v434, (float *)&v441, v381, 0.0, (float *)&v439, &v436, &v437)&& v436 < (float)(v371 + v177)&& v161 <= 0x3F)
        {
          v361 = (float)(v407 * v436) + v438;
          v362 = v437.f32[0];
          v363 = (float)(v410 * v436) + v437.f32[1];
          v364 = v436 - v371;
          v365 = v414 * v436;
          v366 = &v413[8 * v161++];
          v413[512].i32[0] = v161;
          v366->f32[0] = v376;
          v366->f32[1] = v375;
          v366[2].f32[0] = v365 + v362;
          v366[2].f32[1] = v363;
          v366[3].f32[0] = v361;
          v366[1].f32[0] = v374;
          v366[1].f32[1] = v364;
          v366[6].i32[1] = -1;
        }
        v338 = v335++;
      }
      while (v334 != (_DWORD)v335);
      v161 = v413[512].u32[0];
    }
    v1 = v369;
    goto LABEL_93;
  }
  return 1;
}

void GuGenerateVFContacts2(uint64_t a1, float *a2, uint64_t a3, uint64_t a4, int a5, uint64_t a6, float32x2_t *a7, float a8, float a9)
{
  float v16;
  float v22;
  float v23;
  float v24;
  float v25;
  float v26;
  float v27;
  float v28;
  float v29;
  float v30;
  float v31;
  uint64_t v32;
  float v33;
  float v34;
  float v35;
  float v36;
  float v37;
  float v38;
  float v39;
  float v40;
  float v41;
  float v42;
  float v43;
  float v44;
  float v45;
  float v46;
  float v47;
  float v48;
  float v49;
  float v50;
  float v51;
  float v52;
  int v53;
  float *v54;
  float v55;
  unint64_t v56;
  float32x2_t *v57;
  float32x2_t v58;
  float v59;
  float v60;
  float v61;
  float v62;
  float v63;
  float v64;
  int v65;
  float *v66;
  float v67;
  float v68;
  float v69;
  float v70;
  float v71;
  float v72;
  float32x2_t *v73;
  float32x2_t v74;
  float v75[7];
  float32x2_t v76;
  float v77;
  __int128 v78;
  float v79;
  float v80;
  float v81;
  float v82;
  float v83;
  float v84;
  float v85;
  float v86;
  float v87;
  float v88;
  float v89;
  float v90;

  v16 = 1.0 / *(float *)(a4 + 8);
  __asm { FMOV            V2.2S, #1.0 }
  v76 = vdiv_f32(_D2, *(float32x2_t *)a4);
  v77 = v16;
  v78 = *(_OWORD *)(a4 + 12);
  v22 = a2[4] * -2.0;
  v23 = a2[5] * -2.0;
  _D2.f32[0] = a2[6] * -2.0;
  v25 = a2[2];
  v24 = a2[3];
  v26 = (float)(v24 * v24) + -0.5;
  v27 = a2[1];
  v28 = (float)((float)(v23 * v27) + (float)(*a2 * v22)) + (float)(v25 * _D2.f32[0]);
  v29 = (float)((float)(v22 * v26) - (float)((float)((float)(v27 * _D2.f32[0]) - (float)(v25 * v23)) * v24))
      + (float)(*a2 * v28);
  v30 = (float)((float)(v23 * v26) - (float)((float)((float)(v25 * v22) - (float)(*a2 * _D2.f32[0])) * v24))
      + (float)(v27 * v28);
  v31 = (float)(_D2.f32[0] * v26) - (float)((float)((float)(*a2 * v23) - (float)(v27 * v22)) * v24);
  v75[0] = -*a2;
  v75[1] = -v27;
  v75[2] = -v25;
  v75[3] = v24;
  v75[4] = v29;
  v75[5] = v30;
  v75[6] = v31 + (float)(v25 * v28);
  physx::operator*((float *)&v76, v75, &v79);
  v32 = 0;
  v33 = a7->f32[1];
  v34 = a7[1].f32[0];
  v35 = v79;
  v36 = v80;
  v37 = v81;
  v38 = v82;
  v39 = -(float)(v33 * v82);
  v40 = v83;
  v41 = v84;
  v42 = -(float)(v33 * v83);
  v43 = (float)-(float)(v33 * v84) - (float)(a7->f32[0] * v81);
  v44 = v85;
  v45 = v86;
  v46 = (float)(v39 - (float)(a7->f32[0] * v79)) - (float)(v34 * v85);
  v47 = (float)(v42 - (float)(a7->f32[0] * v80)) - (float)(v34 * v86);
  v48 = v87;
  v49 = v88;
  v50 = v43 - (float)(v34 * v87);
  v51 = v89;
  v52 = v90;
  v53 = *(_DWORD *)(a3 + 16);
  v54 = *(float **)(a3 + 24);
  v55 = (float)(a8 + a9) + -0.00001;
  v56 = *(unsigned int *)(a1 + 4096);
  do
  {
    if (v53)
    {
      v57 = (float32x2_t *)(a6 + 12 * v32);
      v58 = *v57;
      v59 = v57[1].f32[0];
      v60 = v49
          + (float)((float)((float)(v35 * COERCE_FLOAT(*v57)) + vmuls_lane_f32(v38, *v57, 1)) + (float)(v44 * v59));
      v61 = v51
          + (float)((float)((float)(v36 * COERCE_FLOAT(*v57)) + vmuls_lane_f32(v40, *v57, 1)) + (float)(v45 * v59));
      v62 = v52
          + (float)((float)((float)(v37 * COERCE_FLOAT(*v57)) + vmuls_lane_f32(v41, *v57, 1)) + (float)(v48 * v59));
      v63 = -3.4028e38;
      v64 = 3.4028e38;
      v65 = v53;
      v66 = v54;
      do
      {
        v67 = v66[1];
        v68 = v66[2];
        v69 = v66[3] + (float)((float)((float)(v61 * v67) + (float)(v60 * *v66)) + (float)(v62 * v68));
        v70 = (float)((float)(v47 * v67) + (float)(*v66 * v46)) + (float)(v68 * v50);
        v71 = (float)-v69 / v70;
        if (v70 <= 0.0000001)
        {
          if (v70 >= -0.0000001)
          {
            if (v69 > 0.0)
              goto LABEL_19;
          }
          else if (v63 <= v71)
          {
            v63 = (float)-v69 / v70;
          }
        }
        else if (v64 >= v71)
        {
          v64 = (float)-v69 / v70;
        }
        v66 += 5;
        --v65;
      }
      while (v65);
      if (v63 < v55 && v63 != -3.4028e38 && v63 < v64 && v56 <= 0x3F)
      {
        v72 = a7[1].f32[0];
        v73 = (float32x2_t *)(a1 + (v56++ << 6));
        *(_DWORD *)(a1 + 4096) = v56;
        v73[1].f32[0] = v72;
        v74 = vsub_f32(v58, vmul_n_f32(*a7, v63));
        *v73 = *a7;
        v73[2] = v74;
        v73[3].f32[0] = v59 - (float)(v63 * v72);
        v73[1].f32[1] = v63 - a8;
        v73[6].i32[1] = -1;
      }
    }
LABEL_19:
    ++v32;
  }
  while (v32 != a5);
}

uint64_t physx::Gu::SourceMesh::remapTopology(uint64_t this, const unsigned int *a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t (*v10)(uint64_t, uint64_t, const char *, const char *, uint64_t);
  const char *v11;
  _QWORD *v12;
  _QWORD *v13;
  const void *v14;
  unint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  size_t v20;
  const char *v21;
  _QWORD *v22;
  unint64_t v23;
  _QWORD *v24;
  uint64_t v25;
  int v26;
  unint64_t v27;
  void *v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  const unsigned int *v33;

  v2 = *(unsigned int *)(this + 24);
  if ((_DWORD)v2)
  {
    v4 = this;
    v5 = *(_QWORD *)(this + 32);
    v6 = physx::shdfnd::Foundation::mInstance;
    v7 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)physx::shdfnd::Foundation::mInstance + 40))(physx::shdfnd::Foundation::mInstance);
    v9 = *(_QWORD *)(v6 + 24);
    v8 = v6 + 24;
    v10 = *(uint64_t (**)(uint64_t, uint64_t, const char *, const char *, uint64_t))(v9 + 16);
    if (v5)
    {
      if (v7)
        v11 = "static const char *physx::shdfnd::ReflectionAllocator<physx::Gu::IndTri32>::getName() [T = physx::Gu::IndTri32]";
      else
        v11 = "<allocation names disabled>";
      v12 = (_QWORD *)v10(v8, 12 * v2 + 16, v11, "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/common/src/../../geomutils/src/mesh/GuBV4.cpp", 92);
      v13 = v12;
      *v12 = 12;
      v12[1] = v2;
      v14 = v12 + 2;
      if (*(_DWORD *)(v4 + 24))
      {
        v15 = 0;
        v16 = v12 + 2;
        do
        {
          v17 = *(_QWORD *)(v4 + 32) + 12 * a2[v15];
          v18 = *(_QWORD *)v17;
          *((_DWORD *)v16 + 2) = *(_DWORD *)(v17 + 8);
          *v16 = v18;
          v16 = (_QWORD *)((char *)v16 + 12);
          ++v15;
          v19 = *(unsigned int *)(v4 + 24);
        }
        while (v15 < v19);
        v20 = (12 * v19);
      }
      else
      {
        v20 = 0;
      }
      v28 = *(void **)(v4 + 32);
    }
    else
    {
      if (v7)
        v21 = "static const char *physx::shdfnd::ReflectionAllocator<physx::Gu::IndTri16>::getName() [T = physx::Gu::IndTri16]";
      else
        v21 = "<allocation names disabled>";
      v22 = (_QWORD *)v10(v8, 6 * v2 + 16, v21, "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/common/src/../../geomutils/src/mesh/GuBV4.cpp", 102);
      v13 = v22;
      *v22 = 6;
      v22[1] = v2;
      v14 = v22 + 2;
      if (*(_DWORD *)(v4 + 24))
      {
        v23 = 0;
        v24 = v22 + 2;
        do
        {
          v25 = *(_QWORD *)(v4 + 40) + 6 * a2[v23];
          v26 = *(_DWORD *)v25;
          *((_WORD *)v24 + 2) = *(_WORD *)(v25 + 4);
          *(_DWORD *)v24 = v26;
          v24 = (_QWORD *)((char *)v24 + 6);
          ++v23;
          v27 = *(unsigned int *)(v4 + 24);
        }
        while (v23 < v27);
        v20 = (6 * v27);
      }
      else
      {
        v20 = 0;
      }
      v28 = *(void **)(v4 + 40);
    }
    memcpy(v28, v14, v20);
    this = (*(uint64_t (**)(uint64_t, _QWORD *))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24, v13);
    v29 = *(unsigned int *)(v4 + 24);
    if ((_DWORD)v29)
    {
      this = (*(uint64_t (**)(uint64_t, uint64_t, const char *, const char *, uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24)
                                                                                              + 16))(physx::shdfnd::Foundation::mInstance + 24, 4 * v29, "NonTrackedAlloc", "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/common/src/../../geomutils/src/mesh/GuBV4.cpp", 111);
      v30 = this;
      if (*(_DWORD *)(v4 + 24))
      {
        v31 = 0;
        v32 = *(_QWORD *)(v4 + 16);
        do
        {
          v33 = a2;
          if (v32)
            v33 = (const unsigned int *)(v32 + 4 * *a2);
          *(_DWORD *)(this + 4 * v31++) = *v33;
          ++a2;
        }
        while (v31 < *(unsigned int *)(v4 + 24));
        if (!v32)
          goto LABEL_29;
LABEL_28:
        this = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
LABEL_29:
        *(_QWORD *)(v4 + 16) = v30;
        return this;
      }
    }
    else
    {
      v30 = 0;
    }
    if (!*(_QWORD *)(v4 + 16))
      goto LABEL_29;
    goto LABEL_28;
  }
  return this;
}

float physx::Gu::BV4Tree::init(float32x2_t *a1, uint64_t a2, uint64_t a3)
{
  float32_t v3;
  float v4;
  float v5;
  float v6;
  float v7;
  float result;

  v3 = (float)(*(float *)(a3 + 8) + *(float *)(a3 + 20)) * 0.5;
  a1[1] = vmul_f32(vadd_f32(*(float32x2_t *)a3, *(float32x2_t *)(a3 + 12)), (float32x2_t)0x3F0000003F000000);
  a1[2].f32[0] = v3;
  v4 = *(float *)(a3 + 8);
  v5 = *(float *)(a3 + 12) - *(float *)a3;
  v6 = *(float *)(a3 + 20);
  v7 = *(float *)(a3 + 16) - *(float *)(a3 + 4);
  *a1 = (float32x2_t)a2;
  result = sqrtf((float)((float)((float)(v7 * 0.5) * (float)(v7 * 0.5)) + (float)((float)(v5 * 0.5) * (float)(v5 * 0.5)))+ (float)((float)((float)(v6 - v4) * 0.5) * (float)((float)(v6 - v4) * 0.5)));
  a1[2].f32[1] = result;
  return result;
}

double physx::Gu::BV4Tree::operator=(uint64_t a1, uint64_t a2)
{
  double result;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_DWORD *)(a1 + 40) = *(_DWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 44) = *(_QWORD *)(a2 + 44);
  *(_QWORD *)(a1 + 52) = *(_QWORD *)(a2 + 52);
  *(_QWORD *)(a1 + 60) = *(_QWORD *)(a2 + 60);
  *(_BYTE *)(a1 + 68) = *(_BYTE *)(a2 + 68);
  *(_BYTE *)(a1 + 69) = *(_BYTE *)(a2 + 69);
  *(_QWORD *)a2 = 0;
  *(_DWORD *)(a2 + 24) = 0;
  result = 0.0;
  *(_OWORD *)(a2 + 32) = 0u;
  *(_OWORD *)(a2 + 48) = 0u;
  *(_QWORD *)(a2 + 62) = 0;
  return result;
}

uint64_t physx::Gu::BV4Tree::load(uint64_t a1, void (***a2)(_QWORD, unsigned __int32 *, uint64_t), int a3)
{
  uint64_t *v6;
  uint64_t result;
  unsigned int v8;
  uint8x8_t v9;
  unsigned int v10;
  uint64_t v11;
  uint64_t v12;
  int16x8_t v13;
  __n128 v14;
  int16x8_t v15;
  int v16;
  uint64_t v17;
  uint8x8_t v18;
  uint64_t i;
  int16x8_t v20;
  uint64_t v21;
  uint8x8_t v22;
  uint64_t j;
  int16x8_t v24;
  BOOL v25;
  int Dword;
  uint64_t v27;
  uint64_t v28;
  unsigned int v29;
  int v30;
  unsigned int v31;
  unsigned __int32 v32;

  if (!*(_BYTE *)(a1 + 68) && *(_QWORD *)(a1 + 32))
    (*(void (**)(uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
  *(_OWORD *)(a1 + 32) = 0u;
  v6 = (uint64_t *)(a1 + 32);
  *(_QWORD *)a1 = 0;
  *(_DWORD *)(a1 + 24) = 0;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_QWORD *)(a1 + 62) = 0;
  v30 = 0;
  (**a2)(a2, (unsigned __int32 *)((char *)&v30 + 3), 1);
  (**a2)(a2, (unsigned __int32 *)((char *)&v30 + 2), 1);
  (**a2)(a2, (unsigned __int32 *)((char *)&v30 + 1), 1);
  (**a2)(a2, (unsigned __int32 *)&v30, 1);
  result = 0;
  if (HIBYTE(v30) == 66 && BYTE2(v30) == 86 && BYTE1(v30) == 52 && v30 == 32)
  {
    v31 = 0;
    (**a2)(a2, &v31, 4);
    v8 = v31;
    if (v31 == 1 || v31 == 0x1000000)
    {
      (**a2)(a2, (unsigned __int32 *)(a1 + 8), 12);
      v10 = 1;
    }
    else
    {
      v10 = bswap32(v31);
      if (a3)
        v29 = v10;
      else
        v29 = v31;
      if (v29 >= 4)
        return 0;
      (**a2)(a2, (unsigned __int32 *)(a1 + 8), 12);
      if ((a3 & 1) == 0)
      {
        (**a2)(a2, &v32, 4);
        v16 = 0;
        v10 = v8;
        goto LABEL_14;
      }
    }
    v11 = 0;
    v12 = a1 + 8;
    do
    {
      v9.i32[0] = *(_DWORD *)(v12 + v11);
      v13 = (int16x8_t)vmovl_u8(v9);
      *(int16x4_t *)v13.i8 = vrev64_s16(*(int16x4_t *)v13.i8);
      v9 = (uint8x8_t)vmovn_s16(v13);
      *(_DWORD *)(v12 + v11) = v9.i32[0];
      v11 += 4;
    }
    while (v11 != 12);
    v14 = ((__n128 (*)(_QWORD, unsigned __int32 *, uint64_t))**a2)(a2, &v32, 4);
    v14.n128_u32[0] = v32;
    v15 = (int16x8_t)vmovl_u8((uint8x8_t)v14.n128_u64[0]);
    *(int16x4_t *)v15.i8 = vrev64_s16(*(int16x4_t *)v15.i8);
    v32 = vmovn_s16(v15).u32[0];
    v16 = 1;
LABEL_14:
    *(_DWORD *)(a1 + 20) = v32;
    *(_DWORD *)(a1 + 40) = physx::readDword(v16, a2);
    v17 = a1 + 44;
    (**a2)(a2, (unsigned __int32 *)(a1 + 44), 12);
    if (v16)
    {
      for (i = 0; i != 12; i += 4)
      {
        v18.i32[0] = *(_DWORD *)(v17 + i);
        v20 = (int16x8_t)vmovl_u8(v18);
        *(int16x4_t *)v20.i8 = vrev64_s16(*(int16x4_t *)v20.i8);
        v18 = (uint8x8_t)vmovn_s16(v20);
        *(_DWORD *)(v17 + i) = v18.i32[0];
      }
      v21 = a1 + 56;
      (**a2)(a2, (unsigned __int32 *)(a1 + 56), 12);
      for (j = 0; j != 12; j += 4)
      {
        v22.i32[0] = *(_DWORD *)(v21 + j);
        v24 = (int16x8_t)vmovl_u8(v22);
        *(int16x4_t *)v24.i8 = vrev64_s16(*(int16x4_t *)v24.i8);
        v22 = (uint8x8_t)vmovn_s16(v24);
        *(_DWORD *)(v21 + j) = v22.i32[0];
      }
    }
    else
    {
      (**a2)(a2, (unsigned __int32 *)(a1 + 56), 12);
    }
    v25 = v10 != 3 || physx::readDword(v16, a2) != 0;
    *(_BYTE *)(a1 + 69) = v25;
    Dword = physx::readDword(v16, a2);
    *(_DWORD *)(a1 + 24) = Dword;
    if (Dword)
    {
      v27 = (16 * Dword);
      if ((_DWORD)v27)
        v28 = (*(uint64_t (**)(uint64_t, uint64_t, const char *, const char *, uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24)
                                                                                               + 16))(physx::shdfnd::Foundation::mInstance + 24, v27, "NonTrackedAlloc", "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/common/src/../../geomutils/src/mesh/GuBV4.cpp", 280);
      else
        v28 = 0;
      *v6 = v28;
      ((void (*)(void (***)(_QWORD, unsigned __int32 *, uint64_t)))**a2)(a2);
    }
    else
    {
      *v6 = 0;
    }
    return 1;
  }
  return result;
}

_QWORD *physx::Gu::AABBTree::release(_QWORD *this)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v1 = this;
  v2 = this[1];
  if (v2)
  {
    v3 = v2 - 16;
    v4 = *(_QWORD *)(v2 - 8);
    if (v4)
    {
      v5 = v2 - 24;
      v6 = 48 * v4;
      do
      {
        v7 = v5 + v6;
        *(_QWORD *)v7 = 0;
        *(_QWORD *)(v7 + 8) = 0;
        *(_DWORD *)(v7 + 16) = 0;
        v6 -= 48;
      }
      while (v6);
    }
    this = (_QWORD *)(*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24)
                                                                 + 24))(physx::shdfnd::Foundation::mInstance + 24, v3);
    v1[1] = 0;
  }
  if (*v1)
    this = (_QWORD *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
  *v1 = 0;
  return this;
}

BOOL physx::Gu::AABBTree::buildFromMesh(physx::Gu::AABBTree *this, physx::Gu::SourceMesh *a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _DWORD *v12;
  unsigned __int16 *v13;
  uint64_t v14;
  float32x4_t v15;
  uint64_t v16;
  unsigned int v17;
  unsigned int v18;
  unsigned int v19;
  float32x4_t v20;
  float32x4_t v21;
  float32x4_t v22;
  float32x4_t v23;
  float32x4_t v24;
  float32x4_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  const char *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v36;

  v3 = *((unsigned int *)a2 + 6);
  if ((_DWORD)v3)
  {
    if ((_DWORD)v3 == -1)
    {
      v7 = 0;
      v8 = 0;
    }
    else
    {
      v7 = (*(uint64_t (**)(uint64_t, uint64_t, const char *, const char *, uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24)
                                                                                            + 16))(physx::shdfnd::Foundation::mInstance + 24, 24 * (v3 + 1), "NonTrackedAlloc", "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/common/src/../../geomutils/src/mesh/GuBV4Build.cpp", 252);
      v8 = (*(uint64_t (**)(uint64_t, uint64_t, const char *, const char *, uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24)
                                                                                            + 16))(physx::shdfnd::Foundation::mInstance + 24, 12 * (v3 + 1), "NonTrackedAlloc", "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/common/src/../../geomutils/src/mesh/GuBV4Build.cpp", 253);
    }
    v9 = 0;
    v10 = *((_QWORD *)a2 + 1);
    v11 = *((_QWORD *)a2 + 4);
    v12 = (_DWORD *)(v7 + 24);
    v13 = (unsigned __int16 *)(*((_QWORD *)a2 + 5) + 4);
    v14 = v11 + 4;
    v15.i64[0] = 0x3F0000003F000000;
    v15.i64[1] = 0x3F0000003F000000;
    v16 = v3;
    do
    {
      if (v11)
      {
        v17 = *(_DWORD *)(v11 + v9);
        v18 = *(_DWORD *)(v14 + v9);
        v19 = *(_DWORD *)(v14 + v9 + 4);
      }
      else
      {
        v17 = *(v13 - 2);
        v18 = *(v13 - 1);
        v19 = *v13;
      }
      v20 = *(float32x4_t *)(v10 + 12 * v17);
      v21 = *(float32x4_t *)(v10 + 12 * v18);
      v22 = *(float32x4_t *)(v10 + 12 * v19);
      v23 = vminq_f32(vminq_f32(v20, v21), v22);
      v24 = vmaxq_f32(vmaxq_f32(v20, v21), v22);
      v25 = vaddq_f32(v23, v24);
      v23.i32[3] = v24.i32[0];
      *(float32x4_t *)(v12 - 6) = v23;
      *((_QWORD *)v12 - 1) = vextq_s8((int8x16_t)v24, (int8x16_t)v24, 4uLL).u64[0];
      *v12 = v24.i32[3];
      *(float32x4_t *)(v8 + v9) = vmulq_f32(v25, v15);
      v9 += 12;
      v12 += 6;
      v13 += 3;
      --v16;
    }
    while (v16);
    physx::Gu::AABBTree::release(this);
    v36 = 1;
    v26 = (*(uint64_t (**)(uint64_t, uint64_t, const char *, const char *, uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24)
                                                                                           + 16))(physx::shdfnd::Foundation::mInstance + 24, 4 * v3, "NonTrackedAlloc", "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/common/src/../../geomutils/src/mesh/GuBV4Build.cpp", 283);
    v27 = 0;
    *(_QWORD *)this = v26;
    do
    {
      *(_DWORD *)(v26 + 4 * v27) = v27;
      ++v27;
    }
    while (v3 != v27);
    v28 = (2 * v3 - 1);
    v29 = physx::shdfnd::Foundation::mInstance;
    if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)physx::shdfnd::Foundation::mInstance + 40))(physx::shdfnd::Foundation::mInstance))
      v30 = "static const char *physx::shdfnd::ReflectionAllocator<physx::Gu::AABBTreeNode>::getName() [T = physx::Gu::AABBTreeNode]";
    else
      v30 = "<allocation names disabled>";
    v31 = (*(uint64_t (**)(uint64_t, uint64_t, const char *, const char *, uint64_t))(*(_QWORD *)(v29 + 24) + 16))(v29 + 24, 48 * v28 + 16, v30, "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/common/src/../../geomutils/src/mesh/GuBV4Build.cpp", 291);
    *(_QWORD *)v31 = 48;
    *(_QWORD *)(v31 + 8) = v28;
    v32 = v31 + 16;
    v33 = 48 * (2 * v3 - 2) + 48;
    v34 = v31 + 40;
    do
    {
      *(_QWORD *)v34 = 0;
      *(_QWORD *)(v34 + 8) = 0;
      *(_DWORD *)(v34 + 16) = 0;
      v34 += 48;
      v33 -= 48;
    }
    while (v33);
    *((_QWORD *)this + 1) = v32;
    *(_QWORD *)(v31 + 48) = *(_QWORD *)this;
    *(_DWORD *)(v31 + 56) = v3;
    local_BuildHierarchy(v32, v7, v8, (unsigned int *)&v36, v32, a3);
    *((_DWORD *)this + 4) = v36;
    if (v8)
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24, v8);
    if (v7)
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24, v7);
  }
  return (_DWORD)v3 != 0;
}

uint64_t local_BuildHierarchy(uint64_t result, uint64_t a2, uint64_t a3, unsigned int *a4, uint64_t a5, uint64_t a6)
{
  uint64_t v11;
  unsigned int *v12;
  uint64_t v13;
  _OWORD *v14;
  float32x4_t v15;
  float32x4_t v16;
  float32x4_t v17;
  uint64_t v18;
  unsigned int *v19;
  unsigned int v20;
  uint64_t v21;
  float32x4_t v22;
  float32x4_t v23;
  uint64_t v24;
  unsigned int v25;
  float32x4_t v26;
  unsigned __int8 v27;
  unsigned int v28;
  unsigned int v29;
  BOOL v30;
  float v31;
  float v32;
  float v33;
  unsigned int v34;
  unsigned int v35;
  BOOL v36;
  unsigned int v37;
  unsigned int v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  float32x4_t v42;
  uint64_t v43;

  v11 = result;
  v43 = *MEMORY[0x24BDAC8D0];
  while (1)
  {
    v12 = *(unsigned int **)(v11 + 32);
    v13 = *(unsigned int *)(v11 + 40);
    v14 = (_OWORD *)(a2 + 24 * *v12);
    v15 = *(float32x4_t *)v14;
    v16 = *(float32x4_t *)((char *)v14 + 12);
    v17 = *(float32x4_t *)(a3 + 12 * *v12);
    if (v13 >= 2)
    {
      v18 = v13 - 1;
      v19 = v12 + 1;
      do
      {
        v20 = *v19++;
        v21 = a2 + 24 * v20;
        v15 = vminq_f32(v15, *(float32x4_t *)v21);
        v16 = vmaxq_f32(v16, *(float32x4_t *)(v21 + 12));
        v17 = vaddq_f32(v17, *(float32x4_t *)(a3 + 12 * v20));
        --v18;
      }
      while (v18);
    }
    v15.i32[3] = v16.i32[0];
    *(float32x4_t *)v11 = v15;
    *(_QWORD *)(v11 + 16) = vextq_s8((int8x16_t)v16, (int8x16_t)v16, 4uLL).u64[0];
    if (v13 <= a6)
      break;
    v22 = vmulq_n_f32(v17, 1.0 / (float)v13);
    v23 = 0uLL;
    v24 = v13;
    do
    {
      v25 = *v12++;
      v26 = vsubq_f32(*(float32x4_t *)(a3 + 12 * v25), v22);
      v23 = vaddq_f32(v23, vmulq_f32(v26, v26));
      --v24;
    }
    while (v24);
    v42 = vmulq_n_f32(v23, 1.0 / (float)(v13 - 1));
    v27 = vmovn_s32(vcgtq_f32((float32x4_t)vdupq_lane_s32(*(int32x2_t *)v42.f32, 1), v42)).u8[0];
    if (v42.f32[2] <= *(float *)((unint64_t)&v42 & 0xFFFFFFFFFFFFFFFBLL | (4 * (v27 & 1))))
      v28 = v27 & 1;
    else
      v28 = 2;
    v29 = local_Split(v11, a3, v28);
    if (v29)
      v30 = v29 == (_DWORD)v13;
    else
      v30 = 1;
    if (v30)
    {
      v31 = (float)local_Split(v11, a3, 0) / (float)*(unsigned int *)(v11 + 40);
      v32 = (float)local_Split(v11, a3, 1u) / (float)*(unsigned int *)(v11 + 40);
      v33 = (float)local_Split(v11, a3, 2u) / (float)*(unsigned int *)(v11 + 40);
      v42.f32[0] = (float)(v31 + -0.5) * (float)(v31 + -0.5);
      v42.f32[1] = (float)(v32 + -0.5) * (float)(v32 + -0.5);
      v34 = (float)((float)(v33 + -0.5) * (float)(v33 + -0.5)) >= v42.f32[v42.f32[1] < v42.f32[0]]
          ? v42.f32[1] < v42.f32[0]
          : 2;
      v29 = local_Split(v11, a3, v34);
      v35 = *(_DWORD *)(v11 + 40);
      v36 = v29 == v35 || v29 == 0;
      v37 = v35 >> 1;
      if (v36)
        v29 = v37;
    }
    v38 = *a4;
    v39 = a5 + 48 * *a4;
    *(_QWORD *)(v11 + 24) = v39;
    *a4 = v38 + 2;
    v40 = v39 + 48;
    if (a5)
      v41 = v39 + 48;
    else
      v41 = 0;
    *(_QWORD *)(v39 + 32) = *(_QWORD *)(v11 + 32);
    *(_DWORD *)(v39 + 40) = v29;
    *(_QWORD *)(v41 + 32) = *(_QWORD *)(v11 + 32) + 4 * v29;
    *(_DWORD *)(v41 + 40) = *(_DWORD *)(v11 + 40) - v29;
    result = local_BuildHierarchy(v39, a2, a3, a4, a5, a6);
    v11 = v40;
  }
  return result;
}

uint64_t physx::Gu::AABBTree::walk(BOOL (*)(physx::Gu::AABBTreeNode const*,unsigned int,void *),void *)const::Local::_Walk(uint64_t result, unsigned int *a2, unsigned int *a3, uint64_t (*a4)(uint64_t, _QWORD, uint64_t), uint64_t a5)
{
  uint64_t v9;
  unsigned int v10;
  uint64_t v11;

  if (result)
  {
    v9 = result;
    v10 = *a3 + 1;
    *a3 = v10;
    if (v10 > *a2)
      *a2 = v10;
    if (!a4 || (result = a4(result, *a3, a5), (_DWORD)result))
    {
      result = *(_QWORD *)(v9 + 24);
      if (result)
      {
        result = physx::Gu::AABBTree::walk(BOOL (*)(physx::Gu::AABBTreeNode const*,unsigned int,void *),void *)const::Local::_Walk(result, a2, a3, a4, a5);
        --*a3;
        v11 = *(_QWORD *)(v9 + 24);
        if (v11)
        {
          result = physx::Gu::AABBTree::walk(BOOL (*)(physx::Gu::AABBTreeNode const*,unsigned int,void *),void *)const::Local::_Walk(v11 + 48, a2, a3, a4, a5);
          --*a3;
        }
      }
    }
  }
  return result;
}

uint64_t BV4BuildParams::allocateNode(BV4BuildParams *this)
{
  uint64_t v2;
  unsigned int v3;
  uint64_t v4;
  const char *v5;
  uint64_t v6;
  _DWORD *v7;
  _DWORD *v8;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  v2 = *((_QWORD *)this + 3);
  if (!v2 || (v3 = *(_DWORD *)(v2 + 51208), v3 == 256))
  {
    v4 = physx::shdfnd::Foundation::mInstance;
    if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)physx::shdfnd::Foundation::mInstance + 40))(physx::shdfnd::Foundation::mInstance))
      v5 = "static const char *physx::shdfnd::ReflectionAllocator<BV4BuildParams::Slab>::getName() [T = BV4BuildParams::Slab]";
    else
      v5 = "<allocation names disabled>";
    v2 = (*(uint64_t (**)(uint64_t, uint64_t, const char *, const char *, uint64_t))(*(_QWORD *)(v4 + 24) + 16))(v4 + 24, 51224, v5, "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/common/src/../../geomutils/src/mesh/GuBV4Build.cpp", 509);
    v6 = 0;
    v7 = (_DWORD *)(v2 + 51208);
    v8 = (_DWORD *)(v2 + 8);
    __asm { FMOV            V1.2S, #-1.0 }
    do
    {
      v8 += 50;
      v14 = v6;
      v15 = 192;
      do
      {
        v16 = v2 + v14;
        *(_QWORD *)(v16 + 48) = 0xFFFFFFFFLL;
        *(_OWORD *)(v16 + 20) = xmmword_2261A9F70;
        *(_QWORD *)(v16 + 36) = _D1;
        *(_DWORD *)(v16 + 56) = 0;
        v14 += 48;
        v15 -= 48;
      }
      while (v15);
      v6 += 200;
    }
    while (v8 != v7);
    v3 = 0;
    *v7 = 0;
    *(_QWORD *)(v2 + 51216) = *((_QWORD *)this + 3);
    *((_QWORD *)this + 3) = v2;
  }
  *(_DWORD *)(v2 + 51208) = v3 + 1;
  return v2 + 200 * v3 + 8;
}

BOOL physx::Gu::BuildBV4Ex(uint64_t a1, unsigned int *a2, uint64_t a3, float a4)
{
  unsigned int v4;
  uint64_t v8;
  _BOOL8 v9;
  const unsigned int *v10;
  uint64_t v11;
  unsigned int v12;
  uint64_t Node;
  int64x2_t v15;
  int64x2_t v16;
  int64x2_t v17;
  int32x4_t v18;
  __int32 v19;
  int v20;
  int v21;
  size_t v22;
  char *v23;
  int v24;
  float v25;
  BOOL v26;
  float32x4_t v27;
  float32x4_t v28;
  int8x8_t v29;
  int8x8_t v30;
  float v31;
  float v32;
  int v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  const char *v37;
  void *v38;
  int v39;
  uint64_t v40;
  _DWORD *v41;
  char *v42;
  uint64_t v43;
  uint64_t i;
  char *v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t v48;
  _BYTE v49[20];
  __int128 v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  unsigned int *v54;
  uint64_t v55;
  uint64_t v56;
  int v57;
  float32x2_t v58[2];
  float32x2_t v59;
  unsigned int v60;
  int8x8_t v61;
  float v62;
  int8x8_t v63;
  float v64;
  unsigned int v65;
  unsigned int v66;
  int v67;

  v4 = a3;
  v8 = a2[6];
  v55 = 0;
  v56 = 0;
  v57 = 0;
  v9 = physx::Gu::AABBTree::buildFromMesh((physx::Gu::AABBTree *)&v55, (physx::Gu::SourceMesh *)a2, a3);
  if (!v9)
    goto LABEL_10;
  if ((_DWORD)v8)
    v10 = (const unsigned int *)(*(uint64_t (**)(uint64_t, uint64_t, const char *, const char *, uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 16))(physx::shdfnd::Foundation::mInstance + 24, 4 * v8, "NonTrackedAlloc", "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/common/src/../../geomutils/src/mesh/GuBV4Build.cpp", 1483);
  else
    v10 = 0;
  v54 = a2;
  *(_QWORD *)v49 = v10;
  *(_QWORD *)&v49[8] = v4;
  *(_DWORD *)&v49[16] = v8;
  v50 = 0u;
  v51 = 0u;
  v52 = 0u;
  v53 = 0u;
  v63.i32[0] = 0;
  v61.i32[0] = 0;
  v11 = v56;
  physx::Gu::AABBTree::walk(BOOL (*)(physx::Gu::AABBTreeNode const*,unsigned int,void *),void *)const::Local::_Walk(v56, (unsigned int *)&v63, (unsigned int *)&v61, (uint64_t (*)(uint64_t, _QWORD, uint64_t))gReorderCallback, (uint64_t)v49);
  physx::Gu::SourceMesh::remapTopology((uint64_t)a2, v10);
  if (v10)
    (*(void (**)(uint64_t, const unsigned int *))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24, v10);
  v12 = a2[6];
  if (v12 <= v4 || v12 <= 4)
  {
    physx::Gu::BV4Tree::init((float32x2_t *)a1, (uint64_t)a2, v11);
    goto LABEL_10;
  }
  BuildBV4Internal(physx::Gu::BV4Tree &,physx::Gu::AABBTree const&,physx::Gu::SourceMesh *,float,BOOL)::Local::_Check(*(_QWORD *)(v11 + 24));
  *(float *)&v50 = a4;
  *(_QWORD *)((char *)&v50 + 4) = 0;
  *(_DWORD *)v49 = 1;
  *(_OWORD *)&v49[4] = 0uLL;
  Node = BV4BuildParams::allocateNode((BV4BuildParams *)v49);
  _BuildBV4(&v55, (_DWORD *)Node, v11, (uint64_t)v49);
  physx::Gu::BV4Tree::init((float32x2_t *)a1, (uint64_t)a2, v56);
  *(_BYTE *)(a1 + 69) = 1;
  v15.i64[0] = *(_QWORD *)(Node + 40);
  v15.i64[1] = *(_QWORD *)(Node + 88);
  v16.i64[0] = *(_QWORD *)(Node + 136);
  v16.i64[1] = *(_QWORD *)(Node + 184);
  v17.i64[0] = 0xFFFFFFFFLL;
  v17.i64[1] = 0xFFFFFFFFLL;
  v18 = (int32x4_t)vbicq_s8((int8x16_t)xmmword_22611E0A0, (int8x16_t)vuzp1q_s32((int32x4_t)vceqq_s64(v15, v17), (int32x4_t)vceqq_s64(v16, v17)));
  v18.i32[0] = vaddvq_s32(v18);
  *(int8x8_t *)v18.i8 = vcnt_s8(*(int8x8_t *)v18.i8);
  v18.i16[0] = vaddlv_u8(*(uint8x8_t *)v18.i8);
  v19 = v18.i32[0];
  v20 = vaddvq_s32(*(int32x4_t *)&v49[4]);
  v21 = v20;
  v22 = (v20 << 6);
  if ((_DWORD)v22)
    v23 = (char *)(*(uint64_t (**)(uint64_t, _QWORD, const char *, const char *, uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24)
                                                                                                  + 16))(physx::shdfnd::Foundation::mInstance + 24, (v20 << 6), "NonTrackedAlloc", "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/common/src/../../geomutils/src/mesh/GuBV4Build.cpp", 1090);
  else
    v23 = 0;
  if ((v19 - 2) >= 3)
    v24 = -1;
  else
    v24 = 2 * (v19 - 2);
  v66 = 0;
  v67 = 4;
  *(_DWORD *)(a1 + 40) = v24;
  v65 = 0;
  if (*(_BYTE *)(a1 + 69))
  {
    v59 = (float32x2_t)0x80000000800000;
    v60 = -8388609;
    v58[0] = (float32x2_t)0x80000000800000;
    v58[1].i32[0] = -8388609;
    _ComputeMaxValues(Node, (float *)&v59, (float *)v58);
    v25 = 32767.0 / *(float *)&v60;
    v26 = *(float *)&v60 == 0.0;
    v27 = (float32x4_t)vdupq_n_s32(0x46FFFE00u);
    *(float32x2_t *)v28.f32 = v59;
    v29 = (int8x8_t)vceqz_f32(v59);
    v30 = (int8x8_t)vdiv_f32(*(float32x2_t *)v27.f32, v59);
    v28.i64[1] = __PAIR64__(v58[0].u32[0], v60);
    *(float32x4_t *)(a1 + 44) = vdivq_f32(v28, v27);
    if (v26)
      v31 = 0.0;
    else
      v31 = v25;
    v32 = 32767.0 / v58[1].f32[0];
    if (v58[1].f32[0] == 0.0)
      v32 = 0.0;
    *(float32x2_t *)(a1 + 60) = vdiv_f32(*(float32x2_t *)((char *)v58 + 4), *(float32x2_t *)v27.f32);
    v63 = vbic_s8(v30, v29);
    v64 = v31;
    v61 = vbic_s8((int8x8_t)vdiv_f32(*(float32x2_t *)v27.f32, v58[0]), (int8x8_t)vceqz_f32(v58[0]));
    v62 = v32;
    _FlattenQ((uint64_t)v23, 0, &v67, (_QWORD *)Node, &v66, &v65, (float *)&v63, (float *)&v61, a1 + 44, a1 + 56);
  }
  v33 = 4 * v21;
  v34 = *(_QWORD *)((char *)&v50 + 4);
  if (*(_QWORD *)((char *)&v50 + 4))
  {
    do
    {
      v35 = *(_QWORD *)(v34 + 51216);
      (*(void (**)(uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
      v34 = v35;
    }
    while (v35);
  }
  *(_QWORD *)((char *)&v50 + 4) = 0;
  if (*(_BYTE *)(a1 + 69))
  {
    if (v33)
    {
      v36 = physx::shdfnd::Foundation::mInstance;
      if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)physx::shdfnd::Foundation::mInstance + 40))(physx::shdfnd::Foundation::mInstance))
        v37 = "static const char *physx::shdfnd::ReflectionAllocator<physx::Gu::BVDataPackedT<physx::Gu::QuantizedAABB>>:"
              ":getName() [T = physx::Gu::BVDataPackedT<physx::Gu::QuantizedAABB>]";
      else
        v37 = "<allocation names disabled>";
      v38 = (void *)(*(uint64_t (**)(uint64_t, uint64_t, const char *, const char *, uint64_t))(*(_QWORD *)(v36 + 24) + 16))(v36 + 24, 16 * (4 * v21), v37, "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/common/src/../../geomutils/src/mesh/GuBV4Build.cpp", 1218);
      memcpy(v38, v23, v22);
      v39 = v21 & 0x3FFFFFFF;
      if ((v21 & 0x3FFFFFFF) == 0)
      {
        if (!v38)
          goto LABEL_41;
LABEL_40:
        (*(void (**)(uint64_t, void *))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24, v38);
        goto LABEL_41;
      }
    }
    else
    {
      memcpy(0, v23, v22);
      v39 = v21 & 0x3FFFFFFF;
      if ((v21 & 0x3FFFFFFF) == 0)
        goto LABEL_41;
      v38 = 0;
    }
    v40 = 0;
    v41 = v38;
    v42 = v23;
    do
    {
      v43 = 0;
      for (i = 0; i != 16; i += 4)
      {
        v45 = &v42[i];
        HIDWORD(v46) = v41[v43];
        LODWORD(v46) = HIDWORD(v46);
        *(_DWORD *)v45 = v46 >> 16;
        HIDWORD(v46) = v41[v43 + 1];
        LODWORD(v46) = HIDWORD(v46);
        *((_DWORD *)v45 + 4) = v46 >> 16;
        HIDWORD(v46) = v41[v43 + 2];
        LODWORD(v46) = HIDWORD(v46);
        *((_DWORD *)v45 + 8) = v46 >> 16;
        *((_DWORD *)v45 + 12) = v41[i + 3];
        v43 += 4;
      }
      ++v40;
      v42 += 64;
      v41 += 16;
    }
    while (v40 != v39);
    goto LABEL_40;
  }
LABEL_41:
  *(_DWORD *)(a1 + 24) = v33;
  *(_QWORD *)(a1 + 32) = v23;
  v47 = *(_QWORD *)((char *)&v50 + 4);
  if (*(_QWORD *)((char *)&v50 + 4))
  {
    do
    {
      v48 = *(_QWORD *)(v47 + 51216);
      (*(void (**)(uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
      v47 = v48;
    }
    while (v48);
  }
LABEL_10:
  physx::Gu::AABBTree::release(&v55);
  return v9;
}

uint64_t gReorderCallback(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v3;
  _DWORD *v4;
  uint64_t v5;
  unsigned int v6;

  if (!*(_QWORD *)(a1 + 24))
  {
    v3 = *(unsigned int *)(a1 + 40);
    ++*((_DWORD *)a3 + v3 + 5);
    if ((_DWORD)v3)
    {
      v4 = *(_DWORD **)(a1 + 32);
      v5 = *a3;
      v6 = *((_DWORD *)a3 + 3);
      do
      {
        *(_DWORD *)(v5 + 4 * v6) = *v4;
        *v4++ = *((_DWORD *)a3 + 3);
        v6 = *((_DWORD *)a3 + 3) + 1;
        *((_DWORD *)a3 + 3) = v6;
        --v3;
      }
      while (v3);
    }
  }
  return 1;
}

uint64_t MeshRayCollider::collideOBB(physx::Gu::Box *a1, char a2, uint64_t a3, uint64_t a4, int a5)
{
  int v5;
  unsigned int v6;
  float v7;
  float v8;
  float v9;
  float v10;
  float v11;
  float v12;
  float v13;
  float v14;
  float v15;
  float v16;
  float v17;
  float v18;
  float v19;
  float v20;
  float v21;
  float v22;
  float v23;
  uint64_t result;
  uint64_t v25;
  float v26;
  uint64_t v27;
  float v28;
  uint64_t (**v29)();
  uint64_t (**v30)(_QWORD, uint64_t, unsigned int *);
  uint64_t (***v31)(_QWORD, _QWORD *, uint64_t *, int *, uint64_t *, int *, int *);
  int v32;
  int8x16_t v33;
  __int128 v34;
  __int128 v35;
  char v36;
  int v37;
  int v38;
  _QWORD v39[2];
  int v40;
  __int16 v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  int v46;
  uint64_t v47;
  int v48;
  uint64_t v49;
  int v50;
  char v51;
  BOOL v52;
  __int128 v53;
  __int128 v54;
  unsigned int v55[4];
  uint64_t v56;

  v56 = *MEMORY[0x24BDAC8D0];
  v5 = *(_DWORD *)(a3 + 88);
  v6 = *(unsigned __int8 *)(a3 + 92);
  v29 = off_24ED91BB8;
  v30 = (uint64_t (**)(_QWORD, uint64_t, unsigned int *))&unk_24ED91BE8;
  v31 = (uint64_t (***)(_QWORD, _QWORD *, uint64_t *, int *, uint64_t *, int *, int *))a4;
  v32 = (v6 >> 1) & 1;
  v33 = vextq_s8(*(int8x16_t *)(a3 + 40), *(int8x16_t *)(a3 + 40), 8uLL);
  v34 = 0u;
  v35 = 0u;
  v36 = a2;
  v37 = v5;
  v38 = 0;
  v39[0] = 0;
  v39[1] = 0;
  v40 = -1;
  v41 = 0;
  v42 = 0;
  v43 = 0;
  v44 = 0;
  v45 = 2139095039;
  v46 = 0;
  v52 = *(_DWORD *)(a4 + 8) == 1;
  v51 = 0;
  v53 = 0u;
  v54 = 0u;
  if (!a5)
    goto LABEL_13;
  v7 = *((float *)a1 + 8);
  v8 = *(float *)a1;
  v9 = *((float *)a1 + 4);
  if (v7 < 0.0)
  {
    if (v8 <= v9)
    {
      v10 = (float)((float)(1.0 - v8) + v9) - v7;
      v11 = *((float *)a1 + 6);
      v12 = *((float *)a1 + 2);
    }
    else
    {
      v10 = (float)((float)(v8 + 1.0) - v9) - v7;
      v11 = *((float *)a1 + 5);
      v12 = *((float *)a1 + 7);
    }
    v13 = v11 - v12;
    goto LABEL_9;
  }
  if (v8 < (float)-v9)
  {
    v13 = *((float *)a1 + 1) - *((float *)a1 + 3);
    v10 = v7 + (float)((float)(1.0 - v8) - v9);
LABEL_9:
    v14 = 0.5 / sqrtf(v10);
    goto LABEL_11;
  }
  v14 = v7 + (float)((float)(v8 + 1.0) + v9);
  v13 = 0.5 / sqrtf(v14);
LABEL_11:
  if (fabsf(v13 * v14) > 0.9999)
  {
    v15 = *((float *)a1 + 13);
    v16 = *((float *)a1 + 14);
    v18 = *((float *)a1 + 11);
    v17 = *((float *)a1 + 12);
    v19 = (float)((float)(fabsf(*((float *)a1 + 3)) * v15) + (float)(fabsf(v8) * v17))
        + (float)(fabsf(*((float *)a1 + 6)) * v16);
    v20 = (float)((float)(fabsf(v9) * v15) + (float)(fabsf(*((float *)a1 + 1)) * v17))
        + (float)(fabsf(*((float *)a1 + 7)) * v16);
    v21 = (float)((float)(fabsf(*((float *)a1 + 5)) * v15) + (float)(fabsf(*((float *)a1 + 2)) * v17))
        + (float)(fabsf(v7) * v16);
    v22 = *((float *)a1 + 9);
    v23 = *((float *)a1 + 10);
    *(float *)&v27 = v22 - v19;
    *((float *)&v27 + 1) = v23 - v20;
    v28 = v18 - v21;
    *(float *)&v25 = v22 + v19;
    *((float *)&v25 + 1) = v20 + v23;
    v26 = v21 + v18;
    result = physx::Gu::RTree::traverseAABB(a3 + 160, &v27, &v25, 4, (uint64_t)v55, &v30);
    goto LABEL_14;
  }
LABEL_13:
  result = physx::Gu::RTree::traverseOBB(a3 + 160, a1, 4u, v55, (physx::Gu::RTree::Callback *)&v30);
LABEL_14:
  v29 = off_24ED91BB8;
  v30 = (uint64_t (**)(_QWORD, uint64_t, unsigned int *))&unk_24ED91BE8;
  if (v51)
    return (**v31)(v31, v39, &v47, &v48, &v49, &v38, &v50);
  return result;
}

uint64_t RayRTreeCallback<0,false>::~RayRTreeCallback(uint64_t a1)
{
  *(_QWORD *)a1 = off_24ED91BB8;
  *(_QWORD *)(a1 + 8) = &unk_24ED91BE8;
  if (*(_BYTE *)(a1 + 208))
    (***(void (****)(_QWORD, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(a1 + 16))(*(_QWORD *)(a1 + 16), a1 + 96, a1 + 160, a1 + 172, a1 + 184, a1 + 88, a1 + 196);
  return a1;
}

uint64_t RayRTreeCallback<1,false>::~RayRTreeCallback(uint64_t a1)
{
  *(_QWORD *)a1 = off_24ED91C70;
  *(_QWORD *)(a1 + 8) = &unk_24ED91CA0;
  if (*(_BYTE *)(a1 + 208))
    (***(void (****)(_QWORD, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(a1 + 16))(*(_QWORD *)(a1 + 16), a1 + 96, a1 + 160, a1 + 172, a1 + 184, a1 + 88, a1 + 196);
  return a1;
}

uint64_t RayRTreeCallback<0,true>::~RayRTreeCallback(uint64_t a1)
{
  *(_QWORD *)a1 = off_24ED91D08;
  *(_QWORD *)(a1 + 8) = &unk_24ED91D38;
  if (*(_BYTE *)(a1 + 208))
    (***(void (****)(_QWORD, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(a1 + 16))(*(_QWORD *)(a1 + 16), a1 + 96, a1 + 160, a1 + 172, a1 + 184, a1 + 88, a1 + 196);
  return a1;
}

uint64_t MeshRayCollider::collide<1,1>(uint64_t a1, uint64_t a2, char a3, uint64_t a4, uint64_t a5, float32x2_t *a6, float32_t a7)
{
  int v7;
  int v8;
  float v9;
  __int128 v10;
  float v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  float32x2_t v15;
  uint64_t result;
  int v17;
  int v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  float32x2_t v23;
  float v24;
  uint64_t v25;
  float v26;
  uint64_t (**v27)();
  uint64_t (**v28)(_QWORD, uint64_t, unsigned int *);
  uint64_t (***v29)(_QWORD, uint64_t *, uint64_t *, int *, uint64_t *, float32_t *, int *);
  int v30;
  int8x16_t v31;
  float32x2_t *v32;
  int v33;
  __int128 v34;
  unsigned int v35;
  char v36;
  int v37;
  float32_t v38;
  uint64_t v39;
  uint64_t v40;
  int v41;
  __int16 v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  int v47;
  uint64_t v48;
  int v49;
  uint64_t v50;
  int v51;
  char v52;
  BOOL v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  _BYTE v57[16];
  uint64_t v58;

  v58 = *MEMORY[0x24BDAC8D0];
  if (a7 == 0.0)
  {
    v7 = *(_DWORD *)(a4 + 88);
    v8 = (*(unsigned __int8 *)(a4 + 92) >> 1) & 1;
    v27 = off_24ED91C70;
    v28 = (uint64_t (**)(_QWORD, uint64_t, unsigned int *))&unk_24ED91CA0;
    v29 = (uint64_t (***)(_QWORD, uint64_t *, uint64_t *, int *, uint64_t *, float32_t *, int *))a5;
    v30 = v8;
    v31 = vextq_s8(*(int8x16_t *)(a4 + 40), *(int8x16_t *)(a4 + 40), 8uLL);
    v32 = a6;
    v9 = *(float *)(a1 + 8);
    *(_QWORD *)&v10 = *(_QWORD *)a2;
    v35 = *(_DWORD *)(a2 + 8);
    v36 = a3;
    v37 = v7;
    v38 = a7;
    v39 = 0;
    v40 = 0;
    v41 = -1;
    v42 = 0;
    v44 = 0;
    v45 = 0;
    v43 = 0;
    v46 = 2139095039;
    v47 = 0;
    v53 = *(_DWORD *)(a5 + 8) == 1;
    v52 = 0;
    v11 = a6[1].f32[0];
    *(_QWORD *)&v12 = *(_QWORD *)a1;
    LODWORD(v13) = vdup_lane_s32(*(int32x2_t *)a1, 1).u32[0];
    *((float *)&v13 + 1) = v9;
    *((_QWORD *)&v13 + 1) = v10;
    *((_QWORD *)&v10 + 1) = v35;
    v56 = v10;
    v33 = v12;
    v34 = v13;
    *(float32x2_t *)&v14 = *a6;
    *(float32x2_t *)&v13 = vsub_f32(*(float32x2_t *)&v12, *a6);
    v15 = vadd_f32(*(float32x2_t *)&v12, *a6);
    *((_QWORD *)&v14 + 1) = LODWORD(v11);
    *((_QWORD *)&v12 + 1) = LODWORD(v9);
    v54 = v14;
    v55 = v12;
    v25 = v13;
    v26 = v9 - v11;
    v23 = v15;
    v24 = v9 + v11;
    result = physx::Gu::RTree::traverseAABB(a4 + 160, &v25, &v23, 4, (uint64_t)v57, &v28);
    v27 = off_24ED91C70;
    v28 = (uint64_t (**)(_QWORD, uint64_t, unsigned int *))&unk_24ED91CA0;
    if (!v52)
      return result;
  }
  else
  {
    v17 = *(_DWORD *)(a4 + 88);
    v18 = (*(unsigned __int8 *)(a4 + 92) >> 1) & 1;
    v27 = off_24ED91DA0;
    v28 = (uint64_t (**)(_QWORD, uint64_t, unsigned int *))&unk_24ED91DD0;
    v29 = (uint64_t (***)(_QWORD, uint64_t *, uint64_t *, int *, uint64_t *, float32_t *, int *))a5;
    v30 = v18;
    v31 = vextq_s8(*(int8x16_t *)(a4 + 40), *(int8x16_t *)(a4 + 40), 8uLL);
    v32 = a6;
    v33 = *(_DWORD *)a1;
    *(_QWORD *)&v19 = *(_QWORD *)(a1 + 4);
    HIDWORD(v20) = 0;
    LODWORD(v20) = v33;
    *(_QWORD *)((char *)&v20 + 4) = v19;
    *(_QWORD *)&v21 = *(_QWORD *)a2;
    *((_QWORD *)&v19 + 1) = *(_QWORD *)a2;
    v34 = v19;
    v35 = *(_DWORD *)(a2 + 8);
    v36 = a3;
    v37 = v17;
    v38 = a7;
    v39 = 0;
    v40 = 0;
    v41 = -1;
    v42 = 0;
    v44 = 0;
    v45 = 0;
    v43 = 0;
    v46 = 2139095039;
    v47 = 0;
    v53 = *(_DWORD *)(a5 + 8) == 1;
    v52 = 0;
    *(float32x2_t *)&v22 = *a6;
    *((_QWORD *)&v22 + 1) = a6[1].u32[0];
    v54 = v22;
    v55 = v20;
    *((_QWORD *)&v21 + 1) = v35;
    v56 = v21;
    result = physx::Gu::RTree::traverseRay<1>(a4 + 160, a1, a2, a7, 4, (uint64_t)v57, (uint64_t (***)(_QWORD, uint64_t, _DWORD *, float *))&v27, (uint64_t)a6);
    v27 = off_24ED91DA0;
    v28 = (uint64_t (**)(_QWORD, uint64_t, unsigned int *))&unk_24ED91DD0;
    if (!v52)
      return result;
  }
  return (**v29)(v29, &v39, &v48, &v49, &v50, &v38, &v51);
}

uint64_t RayRTreeCallback<1,true>::~RayRTreeCallback(uint64_t a1)
{
  *(_QWORD *)a1 = off_24ED91DA0;
  *(_QWORD *)(a1 + 8) = &unk_24ED91DD0;
  if (*(_BYTE *)(a1 + 208))
    (***(void (****)(_QWORD, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(a1 + 16))(*(_QWORD *)(a1 + 16), a1 + 96, a1 + 160, a1 + 172, a1 + 184, a1 + 88, a1 + 196);
  return a1;
}

uint64_t physx::Gu::raycast_triangleMesh_RTREE(uint64_t a1, uint64_t a2, float *a3, float *a4, float *a5, unsigned __int16 *a6, unsigned int a7, uint64_t a8, float32_t a9)
{
  uint64_t v18;
  float32x2_t v19;
  float v20;
  float v21;
  float v27;
  float v28;
  float v29;
  float v30;
  float v31;
  float v32;
  float v33;
  float v34;
  float v35;
  float v36;
  float v37;
  float v38;
  float v39;
  float v40;
  float v41;
  float v42;
  float v43;
  float v44;
  float v45;
  float v46;
  float v47;
  float v48;
  float v49;
  float v50;
  _QWORD *v51;
  float v52;
  float v53;
  float v54;
  float v55;
  float v56;
  float v57;
  float v58;
  float v59;
  float v60;
  float v61;
  float v62;
  float v63;
  float v64;
  float v65;
  float v66;
  char v67;
  int v68;
  int v69;
  int v70;
  int v71;
  BOOL v73;
  __int128 v74;
  __int128 v75;
  int v76;
  int v77;
  BOOL v79;
  __int128 v80;
  __int128 v81;
  uint64_t (**v83)();
  float v84;
  __int128 v85;
  unsigned int v86;
  uint64_t v87;
  float *v88;
  _QWORD *v89;
  int v90;
  float *v91;
  BOOL v92;
  float v93;
  _QWORD v94[3];
  float v95;
  float v96;
  int8x16_t v97;
  float v98;
  float v99;
  float v100;
  float v101;
  float v102;
  float v103;
  uint64_t v104;
  float v105;
  unint64_t v106;
  float v107;
  uint64_t (**v108)();
  uint64_t (**v109)(_QWORD, uint64_t, unsigned int *);
  uint64_t (***v110)();
  float v111;
  float v112;
  int8x16_t v113;
  uint64_t v114;
  float v115;
  float v116;
  float v117;
  float v118;
  float v119;
  float v120;
  BOOL v121;
  int v122;
  float32_t v123;
  uint64_t v124;
  uint64_t v125;
  int v126;
  __int16 v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  int v132;
  uint64_t v133;
  int v134;
  uint64_t v135;
  int v136;
  char v137;
  BOOL v138;
  __int128 v139;
  __int128 v140;
  float v141[7];
  uint64_t v142;

  v142 = *MEMORY[0x24BDAC8D0];
  v18 = a2 + 4;
  v19 = *(float32x2_t *)(a2 + 4);
  v20 = *(float *)(a2 + 12);
  v21 = 1.0;
  if (v19.f32[0] == 1.0 && COERCE_FLOAT(HIDWORD(*(_QWORD *)(a2 + 4))) == 1.0 && v20 == 1.0)
  {
    v51 = 0;
    v52 = a4[1] - a3[5];
    v53 = a4[2] - a3[6];
    v54 = (float)(*a4 - a3[4]) + (float)(*a4 - a3[4]);
    v55 = v52 + v52;
    v56 = v53 + v53;
    v58 = a3[2];
    v57 = a3[3];
    v59 = (float)(v57 * v57) + -0.5;
    v60 = *a3;
    v61 = a3[1];
    v62 = (float)((float)((float)(v52 + v52) * v61) + (float)(*a3 * v54)) + (float)(v58 * v56);
    v42 = (float)((float)(v54 * v59) - (float)((float)((float)(v61 * v56) - (float)(v58 * (float)(v52 + v52))) * v57))
        + (float)(*a3 * v62);
    v43 = (float)((float)((float)(v52 + v52) * v59) - (float)((float)((float)(v58 * v54) - (float)(*a3 * v56)) * v57))
        + (float)(v61 * v62);
    v44 = (float)((float)(v56 * v59) - (float)((float)((float)(*a3 * v55) - (float)(v61 * v54)) * v57))
        + (float)(v58 * v62);
    v101 = v42;
    v102 = v43;
    v103 = v44;
    v63 = *a5 + *a5;
    v64 = a5[1] + a5[1];
    v65 = a5[2] + a5[2];
    v66 = (float)((float)(v61 * v64) + (float)(v60 * v63)) + (float)(v58 * v65);
    v47 = (float)((float)(v63 * v59) - (float)((float)((float)(v61 * v65) - (float)(v58 * v64)) * v57))
        + (float)(v60 * v66);
    v48 = (float)((float)(v64 * v59) - (float)((float)((float)(v58 * v63) - (float)(v60 * v65)) * v57))
        + (float)(v61 * v66);
    v49 = (float)((float)(v65 * v59) - (float)((float)((float)(v60 * v64) - (float)(v61 * v63)) * v57))
        + (float)(v58 * v66);
    v98 = v47;
    v99 = v48;
    v100 = v49;
  }
  else
  {
    __asm { FMOV            V2.2S, #1.0 }
    v83 = (uint64_t (**)())vdiv_f32(_D2, v19);
    v84 = 1.0 / v20;
    v85 = *(_OWORD *)(a2 + 16);
    v27 = a3[4] * -2.0;
    v28 = a3[5] * -2.0;
    _D2.f32[0] = a3[6] * -2.0;
    v30 = a3[2];
    v29 = a3[3];
    v31 = (float)(v29 * v29) + -0.5;
    v32 = a3[1];
    v33 = (float)((float)(v28 * v32) + (float)(*a3 * v27)) + (float)(v30 * _D2.f32[0]);
    v34 = (float)((float)(v27 * v31) - (float)((float)((float)(v32 * _D2.f32[0]) - (float)(v30 * v28)) * v29))
        + (float)(*a3 * v33);
    v35 = (float)((float)(v28 * v31) - (float)((float)((float)(v30 * v27) - (float)(*a3 * _D2.f32[0])) * v29))
        + (float)(v32 * v33);
    v36 = (float)(_D2.f32[0] * v31) - (float)((float)((float)(*a3 * v28) - (float)(v32 * v27)) * v29);
    v141[0] = -*a3;
    v141[1] = -v32;
    v141[2] = -v30;
    v141[3] = v29;
    v141[4] = v34;
    v141[5] = v35;
    v141[6] = v36 + (float)(v30 * v33);
    physx::operator*((float *)&v83, v141, (float *)&v108);
    v94[0] = v108;
    v94[1] = v109;
    v94[2] = v110;
    v95 = v111;
    v96 = v112;
    v97 = v113;
    v37 = a4[1];
    v38 = (float)(*(float *)&v108 * *a4) + (float)(*((float *)&v109 + 1) * v37);
    v39 = (float)(*((float *)&v108 + 1) * *a4) + (float)(*(float *)&v110 * v37);
    v40 = (float)(*(float *)&v109 * *a4) + (float)(*((float *)&v110 + 1) * v37);
    v41 = a4[2];
    v42 = *(float *)&v113.i32[1] + (float)(v38 + (float)(v111 * v41));
    v43 = *(float *)&v113.i32[2] + (float)(v39 + (float)(v112 * v41));
    v44 = *(float *)&v113.i32[3] + (float)(v40 + (float)(*(float *)v113.i32 * v41));
    v101 = v42;
    v102 = v43;
    v103 = v44;
    v45 = a5[1];
    v46 = a5[2];
    v47 = (float)((float)(*(float *)&v108 * *a5) + (float)(*((float *)&v109 + 1) * v45)) + (float)(v111 * v46);
    v48 = (float)((float)(*((float *)&v108 + 1) * *a5) + (float)(*(float *)&v110 * v45)) + (float)(v112 * v46);
    v49 = (float)((float)(*(float *)&v109 * *a5) + (float)(*((float *)&v110 + 1) * v45))
        + (float)(*(float *)v113.i32 * v46);
    v98 = v47;
    v99 = v48;
    v100 = v49;
    v50 = sqrtf((float)((float)(v48 * v48) + (float)(v47 * v47)) + (float)(v49 * v49));
    v21 = 1.0 / v50;
    if (v50 > 0.0)
    {
      v47 = v47 * v21;
      v48 = v48 * v21;
      v98 = v47;
      v99 = v48;
      v49 = v49 * v21;
      v100 = v49;
    }
    a9 = (float)(v50 * a9) + 0.001;
    v51 = v94;
  }
  v67 = *(_BYTE *)(a2 + 32);
  v68 = *a6;
  v69 = (v68 & 0x40) == 0;
  if (a7 >= 2)
    v69 = 2;
  v84 = *(float *)&v69;
  v83 = &off_24ED91B78;
  *(_QWORD *)((char *)&v85 + 4) = a8;
  HIDWORD(v85) = 0;
  v86 = a7;
  v87 = v18;
  v88 = a3;
  v89 = v51;
  v90 = v68;
  v91 = a5;
  v92 = (v67 & 2) != 0;
  v93 = v21;
  if (a9 == 0.0)
  {
    v70 = *(_DWORD *)(a1 + 88);
    v71 = (*(unsigned __int8 *)(a1 + 92) >> 1) & 1;
    v108 = off_24ED91BB8;
    v109 = (uint64_t (**)(_QWORD, uint64_t, unsigned int *))&unk_24ED91BE8;
    v110 = &v83;
    v111 = *(float *)&v71;
    v113 = vextq_s8(*(int8x16_t *)(a1 + 40), *(int8x16_t *)(a1 + 40), 8uLL);
    v114 = 0;
    v115 = v42;
    v116 = v43;
    v117 = v44;
    v118 = v47;
    v119 = v48;
    v120 = v49;
    v121 = (v67 & 2 | v68 & 0x80) != 0;
    v122 = v70;
    v123 = a9;
    v124 = 0;
    v125 = 0;
    v126 = -1;
    v127 = 0;
    v129 = 0;
    v130 = 0;
    v128 = 0;
    v131 = 2139095039;
    v132 = 0;
    v73 = (v68 & 0x40) == 0 && a7 < 2;
    v138 = v73;
    *(_QWORD *)&v74 = __PAIR64__(LODWORD(v43), LODWORD(v42));
    *((_QWORD *)&v74 + 1) = LODWORD(v44);
    *(_QWORD *)&v75 = __PAIR64__(LODWORD(v48), LODWORD(v47));
    v137 = 0;
    *((_QWORD *)&v75 + 1) = LODWORD(v49);
    v139 = v74;
    v140 = v75;
    v106 = __PAIR64__(LODWORD(v43), LODWORD(v42));
    v107 = v44;
    *(float *)&v104 = v42 + 0.0;
    *((float *)&v104 + 1) = v43 + 0.0;
    v105 = v44 + 0.0;
    physx::Gu::RTree::traverseAABB(a1 + 160, &v106, &v104, 4, (uint64_t)v141, &v109);
    v108 = off_24ED91BB8;
    v109 = (uint64_t (**)(_QWORD, uint64_t, unsigned int *))&unk_24ED91BE8;
    if (v137)
LABEL_30:
      ((void (*)(uint64_t (***)(), uint64_t *, uint64_t *, int *, uint64_t *, float32_t *, int *))**v110)(v110, &v124, &v133, &v134, &v135, &v123, &v136);
  }
  else
  {
    v76 = *(_DWORD *)(a1 + 88);
    v77 = (*(unsigned __int8 *)(a1 + 92) >> 1) & 1;
    v108 = off_24ED91D08;
    v109 = (uint64_t (**)(_QWORD, uint64_t, unsigned int *))&unk_24ED91D38;
    v110 = &v83;
    v111 = *(float *)&v77;
    v113 = vextq_s8(*(int8x16_t *)(a1 + 40), *(int8x16_t *)(a1 + 40), 8uLL);
    v114 = 0;
    v115 = v42;
    v116 = v43;
    v117 = v44;
    v118 = v47;
    v119 = v48;
    v120 = v49;
    v121 = (v67 & 2 | v68 & 0x80) != 0;
    v122 = v76;
    v123 = a9;
    v124 = 0;
    v125 = 0;
    v126 = -1;
    v127 = 0;
    v129 = 0;
    v130 = 0;
    v128 = 0;
    v131 = 2139095039;
    v132 = 0;
    v79 = (v68 & 0x40) == 0 && a7 < 2;
    v138 = v79;
    *(_QWORD *)&v80 = __PAIR64__(LODWORD(v43), LODWORD(v42));
    *((_QWORD *)&v80 + 1) = LODWORD(v44);
    *(_QWORD *)&v81 = __PAIR64__(LODWORD(v48), LODWORD(v47));
    v137 = 0;
    *((_QWORD *)&v81 + 1) = LODWORD(v49);
    v139 = v80;
    v140 = v81;
    physx::Gu::RTree::traverseRay<0>(a1 + 160, (uint64_t)&v101, (uint64_t)&v98, a9, 4, (uint64_t)v141, (uint64_t (***)(_QWORD, uint64_t, _DWORD *, float *))&v108);
    v108 = off_24ED91D08;
    v109 = (uint64_t (**)(_QWORD, uint64_t, unsigned int *))&unk_24ED91D38;
    if (v137)
      goto LABEL_30;
  }
  return HIDWORD(v85);
}

BOOL physx::Gu::intersectSphereVsMesh_RTREE(float *a1, uint64_t a2, float *a3, uint64_t a4, uint64_t a5, int8x16_t a6, int8x16_t a7)
{
  float v8;
  BOOL v11;
  float v12;
  float v13;
  float v14;
  float v15;
  float v16;
  float v17;
  float v18;
  float v19;
  float v20;
  float v21;
  float v22;
  float v23;
  float v24;
  float v25;
  float v26;
  float v27;
  float v28;
  float v29;
  float v30;
  float v31;
  float v32;
  float v33;
  float v34;
  float v35;
  float v36;
  float v37;
  float v38;
  float v39;
  float v40;
  float v41;
  float v42;
  uint64_t v43;
  __int128 v44;
  float v45;
  float v46;
  float v47;
  float v48;
  float v49;
  float v50;
  float v51;
  float v52;
  float v53;
  float v54;
  uint64_t v55;
  uint64_t v56;
  float v57;
  float v58;
  float v59;
  float v60;
  float v61;
  float v62;
  float v63;
  float v64;
  float v65;
  float v66;
  float v67;
  float v68;
  float v69;
  int v70;
  float v71;
  float32x2_t *v72;
  float v73;
  float32x2_t *v74;
  float v75;
  float v76;
  float32x2_t *v77;
  float v78;
  float v79;
  float32x2_t v80;
  float32x4_t v82[2];
  float32x2_t v83;
  float v84;
  float v85;
  float v86;
  float v87;
  __int128 v88;
  __int128 v89;
  int v90;
  float v91;
  __int128 v92;
  unsigned __int32 v93;
  float32x2_t v94;
  float v95;
  float32x2_t v96;
  float v97;
  float32x2_t v98;
  float v99;
  uint64_t (**v100)();
  int v101;
  uint64_t *v102;
  uint64_t v103;
  unsigned __int8 v104;
  BOOL v105;
  float v106;
  float v107;
  float v108;
  unsigned __int32 v109;
  uint64_t v110;
  float v111;
  float v112;
  float v113;
  float v114;
  float v115;
  float v116;
  float v117;

  v8 = *(float *)a4;
  a7.i32[0] = *(_DWORD *)(a4 + 4);
  a6.i32[0] = *(_DWORD *)(a4 + 8);
  if (*(float *)a4 == 1.0 && *(float *)a7.i32 == 1.0 && *(float *)a6.i32 == 1.0)
  {
    v57 = a1[1] - a3[5];
    v58 = a1[3];
    v59 = a1[2] - a3[6];
    v60 = (float)(*a1 - a3[4]) + (float)(*a1 - a3[4]);
    v61 = v57 + v57;
    v62 = v59 + v59;
    v64 = a3[2];
    v63 = a3[3];
    v65 = (float)(v63 * v63) + -0.5;
    v66 = *a3;
    v67 = a3[1];
    v68 = (float)((float)(v61 * v67) + (float)(*a3 * v60)) + (float)(v64 * v62);
    v69 = (float)((float)(v61 * v65) - (float)((float)((float)(v64 * v60) - (float)(*a3 * v62)) * v63))
        + (float)(v67 * v68);
    DWORD2(v88) = 2;
    *(_QWORD *)&v89 = v82;
    *((_QWORD *)&v89 + 1) = a5;
    LOWORD(v90) = 0;
    *(_QWORD *)&v88 = off_24ED91E38;
    *((float *)&v92 + 1) = v69;
    *((float *)&v92 + 2) = (float)((float)(v62 * v65) - (float)((float)((float)(v66 * v61) - (float)(v67 * v60)) * v63))
                         + (float)(v64 * v68);
    v91 = v58 * v58;
    *(float *)&v92 = (float)((float)(v60 * v65) - (float)((float)((float)(v67 * v62) - (float)(v64 * v61)) * v63))
                   + (float)(v66 * v68);
    *(float *)&v100 = *(float *)&v92;
    *((float *)&v100 + 1) = v69;
    v101 = SDWORD2(v92);
    v110 = 1065353216;
    v111 = 0.0;
    v98.i32[0] = fmaxf(v58, 0.001);
    v98.i32[1] = v98.i32[0];
    v99 = v98.f32[0];
    MeshRayCollider::collide<1,1>((uint64_t)&v100, (uint64_t)&v110, 1, a2, (uint64_t)&v88, &v98, 0.0);
    v70 = v90;
  }
  else
  {
    v11 = (float)((float)(v8 * *(float *)a7.i32) * *(float *)a6.i32) < 0.0;
    v12 = *(float *)(a4 + 12);
    v13 = *(float *)(a4 + 16);
    v14 = *(float *)(a4 + 20);
    v15 = *(float *)(a4 + 24);
    v16 = v13 + v13;
    v17 = v14 + v14;
    v18 = v13 * (float)(v13 + v13);
    v19 = v14 * (float)(v14 + v14);
    v20 = (float)(v12 + v12) * v13;
    v21 = (float)(v12 + v12) * v14;
    v22 = (float)(v12 + v12) * v15;
    v23 = v16 * v14;
    v24 = v16 * v15;
    v25 = v17 * v15;
    v26 = (float)(1.0 - v18) - v19;
    v27 = v20 + v25;
    v28 = v21 - v24;
    v29 = v20 - v25;
    v30 = 1.0 - (float)(v12 * (float)(v12 + v12));
    v31 = v30 - v19;
    v32 = v23 + v22;
    v33 = v21 + v24;
    v34 = v23 - v22;
    v35 = v30 - v18;
    v36 = v8 * v26;
    v37 = v8 * v29;
    v38 = v8 * v33;
    v39 = *(float *)a7.i32 * v27;
    v40 = *(float *)a7.i32 * v31;
    *(float *)a7.i32 = *(float *)a7.i32 * v34;
    v41 = *(float *)a6.i32 * v28;
    v42 = *(float *)a6.i32 * v32;
    *(float *)a6.i32 = *(float *)a6.i32 * v35;
    *(float *)&v110 = (float)(v28 * v41) + (float)((float)(v26 * v36) + (float)(v27 * v39));
    *((float *)&v110 + 1) = (float)(v28 * v42) + (float)((float)(v26 * v37) + (float)(v27 * v40));
    v111 = (float)(v28 * *(float *)a6.i32) + (float)((float)(v26 * v38) + (float)(v27 * *(float *)a7.i32));
    v112 = (float)(v32 * v41) + (float)((float)(v29 * v36) + (float)(v31 * v39));
    v113 = (float)(v32 * v42) + (float)((float)(v29 * v37) + (float)(v31 * v40));
    v114 = (float)(v32 * *(float *)a6.i32) + (float)((float)(v29 * v38) + (float)(v31 * *(float *)a7.i32));
    v115 = (float)(v35 * v41) + (float)((float)(v33 * v36) + (float)(v34 * v39));
    v116 = (float)(v35 * v42) + (float)((float)(v33 * v37) + (float)(v34 * v40));
    v117 = (float)(v35 * *(float *)a6.i32) + (float)((float)(v33 * v38) + (float)(v34 * *(float *)a7.i32));
    v43 = 2;
    v101 = 2;
    v102 = &v110;
    v103 = a5;
    v104 = 0;
    v105 = v11;
    v100 = off_24ED91E90;
    a6.i32[0] = *(__int32 *)a1;
    *(_QWORD *)&v44 = *(_QWORD *)(a1 + 1);
    *(float *)a7.i32 = (float)(*a1 - a3[4]) + (float)(*a1 - a3[4]);
    v45 = (float)(*(float *)&v44 - a3[5]) + (float)(*(float *)&v44 - a3[5]);
    v46 = (float)(*((float *)&v44 + 1) - a3[6]) + (float)(*((float *)&v44 + 1) - a3[6]);
    v48 = a3[2];
    v47 = a3[3];
    v49 = (float)(v47 * v47) + -0.5;
    v50 = a3[1];
    v51 = (float)((float)(v45 * v50) + (float)(*a3 * *(float *)a7.i32)) + (float)(v48 * v46);
    v52 = (float)((float)(*(float *)a7.i32 * v49) - (float)((float)((float)(v50 * v46) - (float)(v48 * v45)) * v47))
        + (float)(*a3 * v51);
    v53 = (float)((float)(v45 * v49) - (float)((float)((float)(v48 * *(float *)a7.i32) - (float)(*a3 * v46)) * v47))
        + (float)(v50 * v51);
    *(float *)a7.i32 = (float)((float)(v46 * v49)
                             - (float)((float)((float)(*a3 * v45) - (float)(v50 * *(float *)a7.i32)) * v47))
                     + (float)(v48 * v51);
    v108 = v53;
    v109 = a7.i32[0];
    a7.i32[0] = (__int32)a1[3];
    v106 = *(float *)a7.i32 * *(float *)a7.i32;
    v107 = v52;
    v88 = xmmword_2260E5F10;
    v89 = xmmword_2260E5F10;
    v90 = 1065353216;
    v91 = *(float *)a6.i32;
    DWORD2(v44) = a7.i32[0];
    HIDWORD(v44) = a7.i32[0];
    v92 = v44;
    v93 = a7.i32[0];
    physx::Gu::computeVertexSpaceOBB(v82, (uint64_t)&v88, a3, (float *)a4, a6, a7, (int32x4_t)xmmword_2260E5F10);
    if (v86 <= v87)
      v54 = v87;
    else
      v54 = v86;
    if (v85 >= v54)
    {
      v56 = 0;
      v55 = 1;
    }
    else
    {
      v55 = 0;
      if (v86 >= v87)
      {
        v56 = 1;
        v43 = 2;
      }
      else
      {
        v56 = 2;
        v43 = 1;
      }
    }
    v71 = *(&v85 + v56);
    v72 = (float32x2_t *)((char *)v82 + 12 * v56);
    v73 = v71 * v72[1].f32[0];
    v74 = (float32x2_t *)((char *)v82 + 12 * v55);
    v75 = fabsf(v74[1].f32[0]);
    v76 = *(&v85 + v55);
    v77 = (float32x2_t *)((char *)v82 + 12 * v43);
    v78 = fabsf(v77[1].f32[0]);
    v79 = *(&v85 + v43);
    v80 = vmul_n_f32(*v72, v71);
    v98 = vsub_f32(v83, v80);
    v99 = v84 - v73;
    v94 = vadd_f32(vadd_f32(vmul_n_f32(vabs_f32(*v74), v76), vmul_n_f32(vabs_f32(*v77), v79)), (float32x2_t)vdup_n_s32(0x3A83126Fu));
    v95 = (float)((float)(v75 * v76) + (float)(v78 * v79)) + 0.001;
    v96 = v80;
    v97 = v73;
    MeshRayCollider::collide<1,1>((uint64_t)&v98, (uint64_t)&v96, 1, a2, (uint64_t)&v100, &v94, 2.0);
    v70 = v104;
  }
  return v70 != 0;
}

BOOL physx::Gu::intersectBoxVsMesh_RTREE(uint64_t a1, uint64_t a2, float32x4_t *a3, uint64_t a4, uint64_t a5, int8x16_t a6, int8x16_t a7, int32x4_t a8)
{
  float v12;
  float v13;
  BOOL v17;
  float32x2_t v18;
  float32x2_t v19;
  float32x2_t v20;
  float32x4_t v21;
  float32x2_t v22;
  float32x2_t v23;
  float32x2_t v24;
  float32x2_t v25;
  float32x2_t v26;
  float32x2_t v27;
  float32x2_t v28;
  float32x2_t v29;
  float32x2_t v34;
  float32x2_t v35;
  float v36;
  float v37;
  float32x2_t v38;
  float v39;
  float v40;
  float v41;
  float v42;
  float v43;
  float v44;
  float v45;
  float v46;
  float v47;
  float v48;
  float v49;
  float v50;
  float v51;
  float v52;
  float v53;
  float v54;
  float v55;
  float v56;
  float v57;
  float v58;
  float v59;
  float v60;
  float v61;
  float v62;
  float v63;
  float v64;
  float v65;
  float v66;
  float v67;
  float v68;
  float v69;
  float v70;
  float v71;
  float v72;
  float v73;
  float v74;
  float v75;
  float v76;
  float v77;
  float v78;
  float v79;
  float v80;
  float v81;
  float v82;
  float v83;
  float v84;
  float v85;
  float v86;
  float v87;
  float v88;
  float v89;
  float v90;
  float v91;
  float v92;
  float v93;
  float v94;
  float v95;
  float v96;
  float v97;
  float v98;
  float v99;
  float v100;
  float v101;
  float v102;
  float v103;
  float v104;
  float v105;
  float v106;
  float v107;
  float v108;
  float v109;
  float v110;
  float v111;
  float v112;
  float v113;
  float v114;
  float v115;
  float v116;
  float v117;
  float v118;
  float v119;
  float v120;
  float v121;
  float v122;
  float v123;
  float v124;
  float v125;
  float v126;
  float v127;
  float v128;
  float v129;
  float v130;
  float v131;
  float v132;
  float v133;
  float v134;
  float v135;
  float v136;
  float v137;
  float v138;
  unsigned int v139;
  unsigned int v140;
  __int32 v141;
  float v142;
  float v143;
  float v144;
  float v145;
  float v146;
  float v147;
  float v148;
  float v149;
  float v150;
  float v151;
  float v152;
  float v153;
  float v154;
  uint64_t (**v156)();
  int v157;
  _DWORD *v158;
  uint64_t v159;
  __int16 v160;
  float v161;
  float v162;
  float v163;
  float v164;
  float v165;
  float v166;
  float v167;
  float v168;
  float v169;
  float v170;
  float v171;
  float v172;
  unint64_t v173;
  __int32 v174;
  float v175;
  uint64_t v176;
  float32x4_t v177;
  float v178;
  float v179;
  float v180;
  float v181;
  float v182;
  float v183;
  float v184;
  float v185;
  unsigned int v186;
  unsigned int v187;
  __int32 v188;
  _DWORD v189[9];

  a7.i32[0] = *(_DWORD *)a4;
  a8.i32[0] = *(_DWORD *)(a4 + 4);
  v12 = *(float *)(a4 + 8);
  v13 = 1.0;
  if (*(float *)a4 == 1.0 && *(float *)a8.i32 == 1.0 && v12 == 1.0)
  {
    v94 = a3[1].f32[0] * -2.0;
    v95 = a3[1].f32[1] * -2.0;
    v96 = a3[1].f32[2] * -2.0;
    v97 = a3->f32[2];
    v98 = a3->f32[3];
    v99 = (float)(v98 * v98) + -0.5;
    v100 = a3->f32[0];
    v101 = a3->f32[1];
    v102 = (float)((float)(v95 * v101) + (float)(a3->f32[0] * v94)) + (float)(v97 * v96);
    v103 = (float)((float)(v94 * v99) - (float)((float)((float)(v101 * v96) - (float)(v97 * v95)) * v98))
         + (float)(a3->f32[0] * v102);
    v104 = (float)((float)(v95 * v99) - (float)((float)((float)(v97 * v94) - (float)(a3->f32[0] * v96)) * v98))
         + (float)(v101 * v102);
    v105 = (float)((float)(v96 * v99) - (float)((float)((float)(a3->f32[0] * v95) - (float)(v101 * v94)) * v98))
         + (float)(v97 * v102);
    v106 = *(float *)a1 + *(float *)a1;
    v107 = *(float *)(a1 + 4) + *(float *)(a1 + 4);
    v108 = *(float *)(a1 + 8) + *(float *)(a1 + 8);
    v109 = (float)((float)-(float)(v101 * v107) - (float)(a3->f32[0] * v106)) - (float)(v97 * v108);
    v110 = (float)((float)(v98 * (float)((float)(v97 * v107) - (float)(v101 * v108))) + (float)(v106 * v99))
         - (float)(a3->f32[0] * v109);
    v111 = (float)((float)(v98 * (float)((float)(a3->f32[0] * v108) - (float)(v97 * v106))) + (float)(v107 * v99))
         - (float)(v101 * v109);
    v112 = (float)((float)(v98 * (float)((float)(v101 * v106) - (float)(a3->f32[0] * v107))) + (float)(v108 * v99))
         - (float)(v97 * v109);
    v113 = *(float *)(a1 + 12) + *(float *)(a1 + 12);
    v114 = *(float *)(a1 + 16) + *(float *)(a1 + 16);
    v115 = *(float *)(a1 + 20) + *(float *)(a1 + 20);
    v116 = (float)((float)-(float)(v101 * v114) - (float)(a3->f32[0] * v113)) - (float)(v97 * v115);
    v117 = (float)(v98 * (float)((float)(v97 * v114) - (float)(v101 * v115))) + (float)(v113 * v99);
    v118 = v117 - (float)(a3->f32[0] * v116);
    v119 = (float)((float)(v98 * (float)((float)(a3->f32[0] * v115) - (float)(v97 * v113))) + (float)(v114 * v99))
         - (float)(v101 * v116);
    v120 = (float)(v98 * (float)((float)(v101 * v113) - (float)(a3->f32[0] * v114))) + (float)(v115 * v99);
    v121 = v120 - (float)(v97 * v116);
    v122 = *(float *)(a1 + 24) + *(float *)(a1 + 24);
    v123 = *(float *)(a1 + 28) + *(float *)(a1 + 28);
    v124 = *(float *)(a1 + 32) + *(float *)(a1 + 32);
    v125 = (float)((float)-(float)(v101 * v123) - (float)(a3->f32[0] * v122)) - (float)(v97 * v124);
    v126 = (float)((float)(v98 * (float)((float)(v97 * v123) - (float)(v101 * v124))) + (float)(v122 * v99))
         - (float)(a3->f32[0] * v125);
    v127 = (float)((float)(v98 * (float)((float)(a3->f32[0] * v124) - (float)(v97 * v122))) + (float)(v123 * v99))
         - (float)(v101 * v125);
    v128 = (float)((float)(v98 * (float)((float)(v101 * v122) - (float)(a3->f32[0] * v123))) + (float)(v124 * v99))
         - (float)(v97 * v125);
    v129 = *(float *)(a1 + 36) + *(float *)(a1 + 36);
    v130 = *(float *)(a1 + 40) + *(float *)(a1 + 40);
    v131 = *(float *)(a1 + 44) + *(float *)(a1 + 44);
    v132 = (float)((float)-(float)(v101 * v130) - (float)(a3->f32[0] * v129)) - (float)(v97 * v131);
    v133 = (float)((float)(v98 * (float)((float)(v97 * v130) - (float)(v101 * v131))) + (float)(v129 * v99))
         - (float)(a3->f32[0] * v132);
    v134 = (float)((float)(v98 * (float)((float)(a3->f32[0] * v131) - (float)(v97 * v129))) + (float)(v130 * v99))
         - (float)(v101 * v132);
    v135 = (float)((float)(v98 * (float)((float)(v101 * v129) - (float)(a3->f32[0] * v130))) + (float)(v131 * v99))
         - (float)(v97 * v132);
    v136 = v103 + v133;
    v137 = v104 + v134;
    v138 = v105 + v135;
    v139 = *(_DWORD *)(a1 + 48);
    v140 = *(_DWORD *)(a1 + 52);
    v141 = *(_DWORD *)(a1 + 56);
    v177.i64[0] = __PAIR64__(LODWORD(v111), LODWORD(v110));
    v177.i64[1] = __PAIR64__(LODWORD(v118), LODWORD(v112));
    v178 = v119;
    v179 = v121;
    v180 = v126;
    v181 = v127;
    v182 = v128;
    v183 = v136;
    v184 = v137;
    v185 = v138;
    v186 = v139;
    v187 = v140;
    v188 = v141;
    v142 = (float)(v118 * v127) - (float)(v119 * v126);
    v143 = (float)((float)(v111 * (float)((float)(v121 * v126) - (float)(v118 * v128)))
                 + (float)(v110 * (float)((float)(v119 * v128) - (float)(v121 * v127))))
         + (float)(v112 * v142);
    if (v143 == 0.0)
    {
      v147 = 0.0;
      v148 = 0.0;
      v149 = 0.0;
      v150 = 1.0;
      v151 = 0.0;
      v152 = 0.0;
      v153 = 0.0;
      v154 = 1.0;
    }
    else
    {
      v144 = -(float)(v120 + (float)((float)-v97 * v116));
      v145 = -(float)(v117 + (float)((float)-v100 * v116));
      v146 = 1.0 / v143;
      v13 = (float)((float)(v119 * v128) - (float)(v127 * v121)) * (float)(1.0 / v143);
      v147 = -(float)((float)((float)(v111 * v128) - (float)(v127 * v112)) * (float)(1.0 / v143));
      v148 = (float)((float)(v111 * v121) - (float)(v112 * v119)) * (float)(1.0 / v143);
      v149 = -(float)((float)((float)(v126 * v144) + (float)(v118 * v128)) * (float)(1.0 / v143));
      v150 = (float)((float)(v110 * v128) - (float)(v112 * v126)) * v146;
      v151 = -(float)((float)((float)(v110 * v121) - (float)(v112 * v118)) * v146);
      v152 = v142 * v146;
      v153 = -(float)((float)((float)(v110 * v127) - (float)(v111 * v126)) * v146);
      v154 = (float)((float)(v111 * v145) + (float)(v110 * v119)) * v146;
    }
    *(float *)v189 = v13;
    *(float *)&v189[1] = v147;
    *(float *)&v189[2] = v148;
    *(float *)&v189[3] = v149;
    *(float *)&v189[4] = v150;
    *(float *)&v189[5] = v151;
    *(float *)&v189[6] = v152;
    *(float *)&v189[7] = v153;
    *(float *)&v189[8] = v154;
    v157 = 2;
    v158 = v189;
    v159 = a5;
    v160 = 0;
    v156 = off_24ED91ED0;
    *(float *)&v176 = -(float)((float)((float)-(float)(v137 * v150) - (float)(v136 * v147)) - (float)(v138 * v153));
    *((float *)&v176 + 1) = -(float)((float)((float)-(float)(v137 * v151) - (float)(v136 * v148)) - (float)(v138 * v154));
    v173 = __PAIR64__(v140, v139);
    v175 = -(float)((float)((float)-(float)(v137 * v149) - (float)(v136 * v13)) - (float)(v138 * v152));
    v174 = v141;
  }
  else
  {
    *(float *)a6.i32 = (float)(*(float *)a7.i32 * *(float *)a8.i32) * v12;
    v17 = *(float *)a6.i32 < 0.0;
    physx::Gu::computeVertexSpaceOBB(&v177, a1, a3->f32, (float *)a4, a6, a7, a8);
    v18 = (float32x2_t)vdup_lane_s32(*(int32x2_t *)a3->f32, 1);
    v19 = (float32x2_t)vdup_laneq_s32(*(int32x4_t *)a3, 2);
    v20 = (float32x2_t)vdup_laneq_s32(*(int32x4_t *)a3, 3);
    v21 = vaddq_f32(*a3, *a3);
    v22 = vmul_lane_f32(v18, *(float32x2_t *)v21.f32, 1);
    v23 = vmul_laneq_f32(v19, v21, 2);
    v24 = vmul_n_f32(v18, v21.f32[0]);
    v25 = vmul_n_f32(v19, v21.f32[0]);
    v26 = vmul_n_f32(v20, v21.f32[0]);
    v27 = vmul_lane_f32(v19, *(float32x2_t *)v21.f32, 1);
    v28 = vmul_lane_f32(v20, *(float32x2_t *)v21.f32, 1);
    v29 = vmul_laneq_f32(v20, v21, 2);
    __asm { FMOV            V3.2S, #1.0 }
    v34 = vsub_f32(_D3, (float32x2_t)vdup_lane_s32((int32x2_t)vmul_f32(*(float32x2_t *)a3->f32, *(float32x2_t *)v21.f32), 0));
    _D3.f32[0] = vadd_f32(v24, v29).f32[0];
    v21.f32[0] = vsub_f32(v25, v28).f32[0];
    v35 = vsub_f32(v24, v29);
    v36 = vsub_f32(v34, v23).f32[0];
    v37 = vadd_f32(v27, v26).f32[0];
    v38 = vadd_f32(v25, v28);
    v24.f32[0] = vsub_f32(v27, v26).f32[0];
    v27.f32[0] = vsub_f32(v34, v22).f32[0];
    v22.f32[0] = (float)(1.0 - v22.f32[1]) - v23.f32[1];
    v23.i32[0] = *(_DWORD *)(a4 + 16);
    v26.i32[0] = *(_DWORD *)(a4 + 20);
    v28.i32[0] = *(_DWORD *)(a4 + 24);
    v39 = *(float *)(a4 + 8);
    v34.i32[0] = *(_DWORD *)(a4 + 12);
    v40 = v23.f32[0] + v23.f32[0];
    v41 = v26.f32[0] + v26.f32[0];
    v42 = v23.f32[0] * (float)(v23.f32[0] + v23.f32[0]);
    v43 = v26.f32[0] * (float)(v26.f32[0] + v26.f32[0]);
    v23.f32[0] = (float)(v34.f32[0] + v34.f32[0]) * v23.f32[0];
    v44 = (float)(v34.f32[0] + v34.f32[0]) * v26.f32[0];
    v45 = (float)(v34.f32[0] + v34.f32[0]) * v28.f32[0];
    v26.f32[0] = v40 * v26.f32[0];
    v46 = v40 * v28.f32[0];
    v28.f32[0] = v41 * v28.f32[0];
    v47 = (float)(1.0 - v42) - v43;
    v48 = v23.f32[0] + v28.f32[0];
    v49 = v44 - v46;
    v23.f32[0] = v23.f32[0] - v28.f32[0];
    v25.f32[0] = 1.0 - (float)(v34.f32[0] * (float)(v34.f32[0] + v34.f32[0]));
    v28.f32[0] = v25.f32[0] - v43;
    v34.f32[0] = v26.f32[0] + v45;
    v50 = v44 + v46;
    v26.f32[0] = v26.f32[0] - v45;
    v25.f32[0] = v25.f32[0] - v42;
    v51 = *(float *)(a4 + 4);
    v52 = *(float *)a4 * v47;
    v53 = *(float *)a4 * v23.f32[0];
    v54 = *(float *)a4 * v50;
    v55 = v48 * v51;
    v56 = v28.f32[0] * v51;
    v57 = v26.f32[0] * v51;
    v58 = v49 * v39;
    v59 = v34.f32[0] * v39;
    v60 = v25.f32[0] * v39;
    v61 = v47 * v53;
    v62 = v48 * v56;
    v63 = (float)(v47 * v52) + (float)(v48 * v55);
    v64 = (float)(v47 * v54) + (float)(v48 * v57);
    v65 = v63 + (float)(v49 * v58);
    v66 = (float)(v61 + v62) + (float)(v49 * v59);
    v67 = v64 + (float)(v49 * v60);
    v68 = v23.f32[0] * v53;
    v69 = v28.f32[0] * v56;
    v70 = (float)(v23.f32[0] * v52) + (float)(v28.f32[0] * v55);
    v23.f32[0] = (float)(v23.f32[0] * v54) + (float)(v28.f32[0] * v57);
    v28.f32[0] = v70 + (float)(v34.f32[0] * v58);
    v71 = (float)(v68 + v69) + (float)(v34.f32[0] * v59);
    v23.f32[0] = v23.f32[0] + (float)(v34.f32[0] * v60);
    v34.f32[0] = v50 * v52;
    v72 = v50 * v53;
    v73 = v26.f32[0] * v56;
    v34.f32[0] = v34.f32[0] + (float)(v26.f32[0] * v55);
    v26.f32[0] = (float)(v50 * v54) + (float)(v26.f32[0] * v57);
    v74 = v25.f32[0] * v58;
    v75 = v25.f32[0] * v59;
    v25.f32[0] = v25.f32[0] * v60;
    v34.f32[0] = v34.f32[0] + v74;
    v76 = (float)(v72 + v73) + v75;
    v25.f32[0] = v26.f32[0] + v25.f32[0];
    v77 = (float)(v65 * _D3.f32[0]) + (float)(v66 * v36);
    v78 = (float)(v65 * v21.f32[0]) + (float)(v66 * v37);
    v79 = vmuls_lane_f32(v67, v38, 1) + (float)((float)(v22.f32[0] * v65) + vmuls_lane_f32(v66, v35, 1));
    v80 = (float)(v67 * v24.f32[0]) + v77;
    v81 = (float)(v67 * v27.f32[0]) + v78;
    v82 = v28.f32[0] * _D3.f32[0];
    v26.f32[0] = (float)(v22.f32[0] * v28.f32[0]) + vmuls_lane_f32(v71, v35, 1);
    v28.f32[0] = (float)(v28.f32[0] * v21.f32[0]) + (float)(v71 * v37);
    v83 = vmuls_lane_f32(v23.f32[0], v38, 1) + v26.f32[0];
    v84 = (float)(v23.f32[0] * v24.f32[0]) + (float)(v82 + (float)(v71 * v36));
    v85 = (float)(v23.f32[0] * v27.f32[0]) + v28.f32[0];
    v86 = vmuls_lane_f32(v25.f32[0], v38, 1) + (float)((float)(v22.f32[0] * v34.f32[0]) + vmuls_lane_f32(v76, v35, 1));
    v87 = (float)(v25.f32[0] * v24.f32[0]) + (float)((float)(v34.f32[0] * _D3.f32[0]) + (float)(v76 * v36));
    v23.f32[0] = (float)(v25.f32[0] * v27.f32[0]) + (float)((float)(v34.f32[0] * v21.f32[0]) + (float)(v76 * v37));
    v88 = *(float *)a1;
    v22.i32[0] = *(_DWORD *)(a1 + 4);
    v21.i32[0] = *(_DWORD *)(a1 + 8);
    v24.i32[0] = *(_DWORD *)(a1 + 12);
    v27.i32[0] = *(_DWORD *)(a1 + 16);
    v38.i32[0] = *(_DWORD *)(a1 + 20);
    v35.i32[0] = *(_DWORD *)(a1 + 24);
    v89 = *(float *)(a1 + 28);
    _D3.i32[0] = *(_DWORD *)(a1 + 32);
    v25.i32[0] = *(_DWORD *)(a1 + 36);
    v90 = *(float *)(a1 + 40);
    v26.i32[0] = *(_DWORD *)(a1 + 44);
    v34.f32[0] = (float)((float)-(float)(v90 * v22.f32[0]) - (float)(*(float *)a1 * v25.f32[0]))
               - (float)(v21.f32[0] * v26.f32[0]);
    v91 = a3[1].f32[0];
    v92 = a3[1].f32[1];
    v93 = a3[1].f32[2];
    v157 = 2;
    v158 = v189;
    v159 = a5;
    LOBYTE(v160) = 0;
    HIBYTE(v160) = v17;
    v156 = off_24ED91F10;
    v161 = (float)(v21.f32[0] * v81) + (float)((float)(v88 * v79) + (float)(v22.f32[0] * v80));
    v162 = (float)(v38.f32[0] * v81) + (float)((float)(v24.f32[0] * v79) + (float)(v27.f32[0] * v80));
    v163 = (float)((float)(v79 * v35.f32[0]) + (float)(v80 * v89)) + (float)(v81 * _D3.f32[0]);
    v164 = (float)(v21.f32[0] * v85) + (float)((float)(v88 * v83) + (float)(v22.f32[0] * v84));
    v165 = (float)(v38.f32[0] * v85) + (float)((float)(v24.f32[0] * v83) + (float)(v27.f32[0] * v84));
    v166 = (float)((float)(v83 * v35.f32[0]) + (float)(v84 * v89)) + (float)(v85 * _D3.f32[0]);
    v167 = (float)(v21.f32[0] * v23.f32[0]) + (float)((float)(v88 * v86) + (float)(v22.f32[0] * v87));
    v168 = (float)(v38.f32[0] * v23.f32[0]) + (float)((float)(v24.f32[0] * v86) + (float)(v27.f32[0] * v87));
    v169 = (float)((float)(v86 * v35.f32[0]) + (float)(v87 * v89)) + (float)(v23.f32[0] * _D3.f32[0]);
    v170 = v34.f32[0] + (float)((float)((float)(v88 * v91) + (float)(v22.f32[0] * v92)) + (float)(v21.f32[0] * v93));
    v171 = (float)((float)((float)-(float)(v90 * v27.f32[0]) - (float)(v24.f32[0] * v25.f32[0]))
                 - (float)(v38.f32[0] * v26.f32[0]))
         + (float)((float)((float)(v24.f32[0] * v91) + (float)(v27.f32[0] * v92)) + (float)(v38.f32[0] * v93));
    v172 = (float)((float)((float)-(float)(v90 * v89) - (float)(v35.f32[0] * v25.f32[0]))
                 - (float)(_D3.f32[0] * v26.f32[0]))
         + (float)((float)((float)(v35.f32[0] * v91) + (float)(v89 * v92)) + (float)(_D3.f32[0] * v93));
    v176 = 0;
    v175 = 0.0;
    v38.i32[0] = *(_DWORD *)(a1 + 56);
    v173 = *(_QWORD *)(a1 + 48);
    v174 = v38.i32[0];
  }
  MeshRayCollider::collideOBB((physx::Gu::Box *)&v177, 1, a2, (uint64_t)&v156, 1);
  return (_BYTE)v160 != 0;
}

BOOL physx::Gu::intersectCapsuleVsMesh_RTREE(Capsule *a1, uint64_t a2, float *a3, float *a4, uint64_t a5, double a6, double a7, int32x2_t a8)
{
  float v10;
  float v11;
  float v12;
  float v16;
  float v17;
  float v18;
  float v19;
  float v20;
  float v21;
  float v22;
  float v23;
  float v24;
  float v25;
  float v26;
  float v27;
  float v28;
  float v29;
  float v30;
  float v31;
  float v32;
  float v33;
  float v34;
  float v35;
  float v36;
  float v37;
  float v38;
  float v39;
  int v40;
  float v41;
  float v42;
  float v43;
  float v44;
  float v45;
  float v46;
  float v47;
  float v48;
  float v49;
  float v50;
  float v51;
  float v52;
  float v53;
  unsigned int v54;
  unsigned int v55;
  __int32 v56;
  float v57;
  float v58;
  float v59;
  float v60;
  float v61;
  float v62;
  float v63;
  float v64;
  float v65;
  int8x16_t v66;
  int8x16_t v67;
  int32x4_t v68;
  int v69;
  float v70;
  float v71;
  float v72;
  float v73;
  float v74;
  float v75;
  float v76;
  float v77;
  float v78;
  float v79;
  float v80;
  float v81;
  float v82;
  float v83;
  float v84;
  float v85;
  float v86;
  float v87;
  float v88;
  float v89;
  float v90;
  float v91;
  float v92;
  float v93;
  float v94;
  int v95;
  int v96;
  int32x4_t v97;
  __int128 v98;
  __int128 v99;
  float v101[3];
  _DWORD v102[3];
  float32x4_t v103;
  _BYTE *v104;
  uint64_t v105;
  __int16 v106;
  float v107;
  uint64_t v108;
  float v109;
  float v110;
  float v111;
  __int32 v112;
  float v113;
  float v114;
  float v115;
  float v116;
  float v117;
  _BYTE v118[60];
  uint64_t (**v119)();
  void *v120;
  float32x4_t *v121;
  uint64_t v122;
  int8x16_t v123;
  _DWORD *v124;
  float v125;
  uint64_t v126;
  float v127;
  float v128;
  float v129;
  float v130;
  int v131;
  int v132;
  _QWORD v133[2];
  int v134;
  __int16 v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  int v140;
  uint64_t v141;
  int v142;
  uint64_t v143;
  int v144;
  __int16 v145;
  int32x4_t v146;
  __int128 v147;
  __int128 v148;
  float v149[9];
  uint64_t v150;

  v150 = *MEMORY[0x24BDAC8D0];
  v10 = *a4;
  v11 = a4[1];
  v12 = a4[2];
  if (*a4 == 1.0 && v11 == 1.0 && v12 == 1.0)
  {
    v103.i32[2] = 2;
    v104 = v118;
    v105 = a5;
    v106 = 0;
    v103.i64[0] = (uint64_t)off_24ED91F50;
    v70 = a3[4];
    v71 = a3[5];
    v72 = a3[6];
    v73 = *((float *)a1 + 3);
    v74 = (float)(*(float *)a1 - v70) + (float)(*(float *)a1 - v70);
    v75 = (float)(*((float *)a1 + 1) - v71) + (float)(*((float *)a1 + 1) - v71);
    v76 = (float)(*((float *)a1 + 2) - v72) + (float)(*((float *)a1 + 2) - v72);
    v78 = a3[2];
    v77 = a3[3];
    v79 = (float)(v77 * v77) + -0.5;
    v80 = *a3;
    v81 = a3[1];
    v82 = (float)(v75 * v79) - (float)((float)((float)(v78 * v74) - (float)(*a3 * v76)) * v77);
    v83 = (float)(*a3 * v75) - (float)(v81 * v74);
    v84 = (float)((float)(v75 * v81) + (float)(*a3 * v74)) + (float)(v78 * v76);
    v85 = (float)((float)(v74 * v79) - (float)((float)((float)(v81 * v76) - (float)(v78 * v75)) * v77))
        + (float)(*a3 * v84);
    v107 = v85;
    *(float *)&v108 = v82 + (float)(v81 * v84);
    a8.i32[0] = *((_DWORD *)a1 + 6);
    v86 = (float)(v73 - v70) + (float)(v73 - v70);
    v87 = (float)(*((float *)a1 + 4) - v71) + (float)(*((float *)a1 + 4) - v71);
    v88 = (float)(*((float *)a1 + 5) - v72) + (float)(*((float *)a1 + 5) - v72);
    v89 = (float)((float)(v81 * v87) + (float)(v80 * v86)) + (float)(v78 * v88);
    *((float *)&v108 + 1) = (float)((float)(v76 * v79) - (float)(v83 * v77)) + (float)(v78 * v84);
    v109 = (float)((float)(v86 * v79) - (float)((float)((float)(v81 * v88) - (float)(v78 * v87)) * v77))
         + (float)(v80 * v89);
    v110 = (float)((float)(v87 * v79) - (float)((float)((float)(v78 * v86) - (float)(v80 * v88)) * v77))
         + (float)(v81 * v89);
    v111 = (float)((float)(v88 * v79) - (float)((float)((float)(v80 * v87) - (float)(v81 * v86)) * v77))
         + (float)(v78 * v89);
    v90 = v109 - v85;
    v91 = v110 - *(float *)&v108;
    v92 = v111 - *((float *)&v108 + 1);
    v112 = a8.i32[0];
    v113 = v109 - v85;
    v114 = v110 - *(float *)&v108;
    v115 = v92;
    v93 = (float)((float)(v91 * v91) + (float)(v90 * v90)) + (float)(v92 * v92);
    v94 = 1.0 / v93;
    if (v93 == 0.0)
      v94 = 0.0;
    v116 = (float)((float)(v91 * v91) + (float)(v90 * v90)) + (float)(v92 * v92);
    v117 = v94;
    v102[0] = a8.i32[0];
    v102[1] = a8.i32[0];
    v102[2] = a8.i32[0];
    v101[0] = v109 - v85;
    v101[1] = v110 - *(float *)&v108;
    v101[2] = v111 - *((float *)&v108 + 1);
    v95 = *(_DWORD *)(a2 + 88);
    v96 = (*(unsigned __int8 *)(a2 + 92) >> 1) & 1;
    v119 = off_24ED91C70;
    v120 = &unk_24ED91CA0;
    v121 = &v103;
    LODWORD(v122) = v96;
    v123 = vextq_s8(*(int8x16_t *)(a2 + 40), *(int8x16_t *)(a2 + 40), 8uLL);
    v124 = v102;
    v125 = v85;
    v126 = v108;
    v127 = v109 - v85;
    v128 = v110 - *(float *)&v108;
    v129 = v111 - *((float *)&v108 + 1);
    LOBYTE(v130) = 1;
    v131 = v95;
    v132 = 1065353216;
    v133[0] = 0;
    v133[1] = 0;
    v134 = -1;
    v135 = 0;
    v136 = 0;
    v137 = 0;
    v138 = 0;
    v139 = 2139095039;
    v140 = 0;
    v145 = 0;
    v97 = vdupq_lane_s32(a8, 0);
    v97.i32[3] = 0;
    HIDWORD(v98) = 0;
    HIDWORD(v99) = 0;
    *(float *)&v99 = v85;
    *(_QWORD *)((char *)&v99 + 4) = v108;
    v146 = v97;
    v147 = v99;
    *(float *)&v98 = v109 - v85;
    *((float *)&v98 + 1) = v110 - *(float *)&v108;
    *((float *)&v98 + 2) = v111 - *((float *)&v108 + 1);
    v148 = v98;
    physx::Gu::RTree::traverseRay<1>(a2 + 160, (uint64_t)&v107, (uint64_t)v101, 1.0, 4, (uint64_t)v149, (uint64_t (***)(_QWORD, uint64_t, _DWORD *, float *))&v119, (uint64_t)v102);
    v119 = off_24ED91C70;
    v120 = &unk_24ED91CA0;
    if ((_BYTE)v145)
      (*(void (**)(float32x4_t *, _QWORD *, uint64_t *, int *, uint64_t *, int *, int *))v121->i64[0])(v121, v133, &v141, &v142, &v143, &v132, &v144);
    v69 = v106;
  }
  else
  {
    v16 = a4[3];
    v17 = a4[4];
    v18 = a4[5];
    v19 = a4[6];
    v20 = v17 + v17;
    v21 = v18 + v18;
    v22 = v17 * (float)(v17 + v17);
    v23 = v18 * (float)(v18 + v18);
    v24 = (float)(v16 + v16) * v17;
    v25 = (float)(v16 + v16) * v18;
    v26 = (float)(v16 + v16) * v19;
    v27 = v20 * v18;
    v28 = v20 * v19;
    v29 = v21 * v19;
    v30 = (float)(1.0 - v22) - v23;
    v31 = v24 + v29;
    v32 = v25 - v28;
    v33 = v24 - v29;
    v34 = 1.0 - (float)(v16 * (float)(v16 + v16));
    v35 = v34 - v23;
    v36 = v27 + v26;
    v37 = v25 + v28;
    v38 = v27 - v26;
    v39 = v34 - v22;
    v149[0] = (float)(v32 * (float)(v12 * v32))
            + (float)((float)(v30 * (float)(v10 * v30)) + (float)(v31 * (float)(v11 * v31)));
    v149[1] = (float)(v32 * (float)(v12 * v36))
            + (float)((float)(v30 * (float)(v10 * v33)) + (float)(v31 * (float)(v11 * v35)));
    v149[2] = (float)(v32 * (float)(v12 * v39))
            + (float)((float)(v30 * (float)(v10 * v37)) + (float)(v31 * (float)(v11 * v38)));
    v149[3] = (float)(v36 * (float)(v12 * v32))
            + (float)((float)(v33 * (float)(v10 * v30)) + (float)(v35 * (float)(v11 * v31)));
    v149[4] = (float)(v36 * (float)(v12 * v36))
            + (float)((float)(v33 * (float)(v10 * v33)) + (float)(v35 * (float)(v11 * v35)));
    v149[5] = (float)(v36 * (float)(v12 * v39))
            + (float)((float)(v33 * (float)(v10 * v37)) + (float)(v35 * (float)(v11 * v38)));
    v149[6] = (float)(v39 * (float)(v12 * v32))
            + (float)((float)(v37 * (float)(v10 * v30)) + (float)(v38 * (float)(v11 * v31)));
    v149[7] = (float)(v39 * (float)(v12 * v36))
            + (float)((float)(v37 * (float)(v10 * v33)) + (float)(v38 * (float)(v11 * v35)));
    v149[8] = (float)(v39 * (float)(v12 * v39))
            + (float)((float)(v37 * (float)(v10 * v37)) + (float)(v38 * (float)(v11 * v38)));
    LODWORD(v120) = 2;
    v121 = (float32x4_t *)v149;
    v122 = a5;
    v123.i8[0] = 0;
    v123.i8[1] = (float)((float)(v10 * v11) * v12) < 0.0;
    v119 = off_24ED91F90;
    v40 = *((_DWORD *)a1 + 6);
    v41 = a3[4];
    v42 = a3[5];
    v43 = a3[6];
    v44 = *((float *)a1 + 3);
    v45 = (float)(*(float *)a1 - v41) + (float)(*(float *)a1 - v41);
    v46 = (float)(*((float *)a1 + 1) - v42) + (float)(*((float *)a1 + 1) - v42);
    v47 = (float)(*((float *)a1 + 2) - v43) + (float)(*((float *)a1 + 2) - v43);
    v49 = a3[2];
    v48 = a3[3];
    v50 = (float)(v48 * v48) + -0.5;
    v51 = *a3;
    v52 = a3[1];
    v53 = (float)((float)(v46 * v52) + (float)(*a3 * v45)) + (float)(v49 * v47);
    *(float *)&v54 = (float)((float)(v45 * v50) - (float)((float)((float)(v52 * v47) - (float)(v49 * v46)) * v48))
                   + (float)(*a3 * v53);
    *(float *)&v55 = (float)((float)(v46 * v50) - (float)((float)((float)(v49 * v45) - (float)(*a3 * v47)) * v48))
                   + (float)(v52 * v53);
    *(float *)&v56 = (float)((float)(v47 * v50) - (float)((float)((float)(*a3 * v46) - (float)(v52 * v45)) * v48))
                   + (float)(v49 * v53);
    *(uint64_t *)((char *)v123.i64 + 4) = __PAIR64__(v55, v54);
    v57 = (float)(v44 - v41) + (float)(v44 - v41);
    v58 = (float)(*((float *)a1 + 4) - v42) + (float)(*((float *)a1 + 4) - v42);
    v59 = (float)(*((float *)a1 + 5) - v43) + (float)(*((float *)a1 + 5) - v43);
    v60 = (float)((float)(v52 * v58) + (float)(v51 * v57)) + (float)(v49 * v59);
    v123.i32[3] = v56;
    *(float *)&v124 = (float)((float)(v57 * v50) - (float)((float)((float)(v52 * v59) - (float)(v49 * v58)) * v48))
                    + (float)(v51 * v60);
    *((float *)&v124 + 1) = (float)((float)(v58 * v50) - (float)((float)((float)(v49 * v57) - (float)(v51 * v59)) * v48))
                          + (float)(v52 * v60);
    v125 = (float)((float)(v59 * v50) - (float)((float)((float)(v51 * v58) - (float)(v52 * v57)) * v48))
         + (float)(v49 * v60);
    v61 = *(float *)&v124 - *(float *)&v54;
    v62 = *((float *)&v124 + 1) - *(float *)&v55;
    v63 = v125 - *(float *)&v56;
    v64 = (float)((float)(v62 * v62) + (float)(v61 * v61)) + (float)(v63 * v63);
    LODWORD(v126) = v40;
    *((float *)&v126 + 1) = *(float *)&v124 - *(float *)&v54;
    v127 = *((float *)&v124 + 1) - *(float *)&v55;
    v128 = v63;
    v65 = 1.0 / v64;
    if (v64 == 0.0)
      v65 = 0.0;
    v129 = (float)((float)(v62 * v62) + (float)(v61 * v61)) + (float)(v63 * v63);
    v130 = v65;
    *(float *)v66.i32 = physx::Gu::Box::create((physx::Gu::Box *)v118, a1);
    physx::Gu::computeVertexSpaceOBB(&v103, (uint64_t)v118, a3, a4, v66, v67, v68);
    MeshRayCollider::collideOBB((physx::Gu::Box *)&v103, 1, a2, (uint64_t)&v119, 1);
    v69 = v123.u8[0];
  }
  return v69 != 0;
}

uint64_t physx::Gu::intersectOBB_RTREE(uint64_t a1, physx::Gu::Box *a2, uint64_t a3, char a4, int a5)
{
  return MeshRayCollider::collideOBB(a2, a4, a1, a3, a5);
}

BOOL physx::Gu::sweepCapsule_MeshGeom_RTREE(uint64_t a1, uint64_t a2, uint64_t a3, float *a4, float *a5, uint64_t a6, unsigned __int16 *a7, float a8, float a9)
{
  float v15;
  float v16;
  float v17;
  float v18;
  float v19;
  float v20;
  float v21;
  float *v22;
  float v23;
  float v24;
  BOOL v26;
  char v27;
  float v28;
  float v29;
  float v30;
  float v31;
  float v32;
  float v33;
  float v34;
  float v35;
  float v36;
  float v37;
  float v38;
  float v39;
  float v40;
  float v41;
  float v42;
  float v43;
  float v44;
  float v45;
  float v46;
  float v47;
  float v48;
  float v49;
  float v50;
  float v51;
  float v52;
  float v53;
  float v54;
  float v55;
  float v56;
  float v57;
  float v58;
  float v59;
  float v60;
  float v61;
  float v62;
  float v63;
  float v64;
  float v65;
  float v66;
  float v67;
  float v68;
  float v69;
  float v70;
  float v71;
  float v72;
  float v73;
  float v74;
  float v79;
  float v80;
  float32x2_t v81;
  float v82;
  float v83;
  BOOL v84;
  BOOL v85;
  float v87;
  float v88;
  float v89;
  float v90;
  float v91;
  _BYTE v92[32];
  __int128 v93;
  float v94;
  float *v95;
  float *v96;
  BOOL v97;
  BOOL v98;
  __int128 v99;
  __int128 v100;
  float v101[6];
  float32x2_t v102;
  float v103;
  float32x2_t v104;
  float v105;
  float32x2_t v106;
  float v107;
  float v108;
  float v109;
  float v110;
  float v111;
  float v112;
  float v113;
  float v114;
  float32x2_t v115;
  float v116;
  float v117[5];

  v15 = a4[5];
  v16 = a4[6] + a9;
  v17 = *a4;
  v18 = a4[1];
  v108 = *a4;
  v109 = v18;
  v19 = a4[2];
  v20 = a4[3];
  v110 = v19;
  v111 = v20;
  v21 = a4[4];
  v112 = v21;
  v113 = v15;
  v114 = v16;
  v23 = *(float *)(a2 + 4);
  v24 = *(float *)(a2 + 8);
  v22 = (float *)(a2 + 4);
  v26 = v23 == 1.0 && v24 == 1.0 && *(float *)(a2 + 12) == 1.0;
  v27 = *(_BYTE *)(a2 + 32);
  v28 = *(float *)(a3 + 16);
  v29 = *(float *)(a3 + 20);
  v30 = v17 - v28;
  v31 = *(float *)(a3 + 24);
  v32 = v30 + v30;
  v33 = (float)(v18 - v29) + (float)(v18 - v29);
  v34 = (float)(v19 - v31) + (float)(v19 - v31);
  v36 = *(float *)(a3 + 8);
  v35 = *(float *)(a3 + 12);
  v37 = (float)(v35 * v35) + -0.5;
  v39 = *(float *)a3;
  v38 = *(float *)(a3 + 4);
  v40 = (float)((float)(v33 * v38) + (float)(*(float *)a3 * v32)) + (float)(v36 * v34);
  v41 = (float)((float)(v32 * v37) - (float)((float)((float)(v38 * v34) - (float)(v36 * v33)) * v35))
      + (float)(*(float *)a3 * v40);
  v42 = (float)((float)(v33 * v37) - (float)((float)((float)(v36 * v32) - (float)(*(float *)a3 * v34)) * v35))
      + (float)(v38 * v40);
  v43 = (float)((float)(v34 * v37) - (float)((float)((float)(*(float *)a3 * v33) - (float)(v38 * v32)) * v35))
      + (float)(v36 * v40);
  v44 = (float)(v20 - v28) + (float)(v20 - v28);
  v45 = (float)(v21 - v29) + (float)(v21 - v29);
  v46 = (float)(v15 - v31) + (float)(v15 - v31);
  v47 = (float)((float)(v45 * v38) + (float)(*(float *)a3 * v44)) + (float)(v36 * v46);
  v48 = (float)((float)(v44 * v37) - (float)((float)((float)(v38 * v46) - (float)(v36 * v45)) * v35))
      + (float)(*(float *)a3 * v47);
  v49 = (float)((float)(v45 * v37) - (float)((float)((float)(v36 * v44) - (float)(*(float *)a3 * v46)) * v35))
      + (float)(v38 * v47);
  v50 = (float)((float)(v46 * v37) - (float)((float)((float)(*(float *)a3 * v45) - (float)(v38 * v44)) * v35))
      + (float)(v36 * v47);
  v51 = (float)(v43 + v50) * 0.5;
  v106.f32[0] = (float)(v41 + v48) * 0.5;
  v106.f32[1] = (float)(v42 + v49) * 0.5;
  v107 = v51;
  v52 = *a5 + *a5;
  v53 = a5[1] + a5[1];
  v54 = a5[2] + a5[2];
  v55 = (float)((float)(v38 * v53) + (float)(v39 * v52)) + (float)(v36 * v54);
  v56 = (float)((float)(v52 * v37) - (float)((float)((float)(v38 * v54) - (float)(v36 * v53)) * v35))
      + (float)(v39 * v55);
  v57 = (float)((float)(v53 * v37) - (float)((float)((float)(v36 * v52) - (float)(v39 * v54)) * v35))
      + (float)(v38 * v55);
  v58 = (float)((float)(v54 * v37) - (float)((float)((float)(v39 * v53) - (float)(v38 * v52)) * v35))
      + (float)(v36 * v55);
  v104.f32[0] = v56;
  v104.f32[1] = v57;
  v105 = v58;
  v102.f32[0] = v16 + (float)(vabds_f32(v41, v48) * 0.5);
  v102.f32[1] = v16 + (float)(vabds_f32(v42, v49) * 0.5);
  v103 = v16 + (float)(vabds_f32(v43, v50) * 0.5);
  if (v26)
  {
    v59 = v38 + v38;
    v60 = v36 + v36;
    v61 = v38 * (float)(v38 + v38);
    v62 = v36 * (float)(v36 + v36);
    v63 = (float)(v39 + v39) * v38;
    v64 = (float)(v39 + v39) * v36;
    v65 = v35 * (float)(v39 + v39);
    v66 = v59 * v36;
    v67 = v35 * v59;
    v68 = v35 * v60;
    v69 = 1.0;
    v70 = v63 + v68;
    v71 = v63 - v68;
    *(float *)&v99 = (float)(1.0 - v61) - v62;
    *((float *)&v99 + 1) = v70;
    v72 = 1.0 - (float)(v39 * (float)(v39 + v39));
    *((float *)&v99 + 2) = v64 - v67;
    *((float *)&v99 + 3) = v71;
    *(float *)&v100 = v72 - v62;
    *((float *)&v100 + 1) = v65 + v66;
    *((float *)&v100 + 2) = v64 + v67;
    *((float *)&v100 + 3) = v66 - v65;
    v101[0] = v72 - v61;
    *(_QWORD *)&v101[1] = __PAIR64__(LODWORD(v29), LODWORD(v28));
    v101[3] = v31;
    v73 = a8;
  }
  else
  {
    v90 = (float)(v41 + v48) * 0.5;
    v91 = (float)(v42 + v49) * 0.5;
    physx::operator*(a3, v22, (uint64_t)v92);
    v99 = *(_OWORD *)v92;
    v100 = *(_OWORD *)&v92[16];
    *(_OWORD *)v101 = v93;
    v87 = (float)(v56 * a8) + v90;
    v88 = (float)(v57 * a8) + v91;
    v89 = (float)(v58 * a8) + v51;
    v74 = 1.0 / *(float *)(a2 + 12);
    __asm { FMOV            V2.2S, #1.0 }
    v115 = vdiv_f32(_D2, *(float32x2_t *)(a2 + 4));
    v116 = v74;
    *(_OWORD *)v117 = *(_OWORD *)(a2 + 16);
    physx::Cm::FastVertex2ShapeScaling::init((uint64_t)v92, (float *)&v115, v117);
    v79 = v107;
    v80 = v103;
    v107 = (float)((float)(v90 * *(float *)&v92[8]) + (float)(v91 * *(float *)&v92[20]))
         + (float)(v107 * *(float *)&v93);
    v103 = (float)(fabsf(*(float *)&v92[8] * v102.f32[0]) + fabsf(*(float *)&v92[20] * v102.f32[1]))
         + fabsf(*(float *)&v93 * v103);
    v106 = vadd_f32(vadd_f32(vmul_n_f32(*(float32x2_t *)v92, v90), vmul_n_f32(*(float32x2_t *)&v92[12], v91)), vmul_n_f32(*(float32x2_t *)&v92[24], v79));
    v102 = vadd_f32(vadd_f32(vabs_f32(vmul_n_f32(*(float32x2_t *)v92, v102.f32[0])), vabs_f32(vmul_n_f32(*(float32x2_t *)&v92[12], v102.f32[1]))), vabs_f32(vmul_n_f32(*(float32x2_t *)&v92[24], v80)));
    v81 = vsub_f32(vadd_f32(vadd_f32(vmul_n_f32(*(float32x2_t *)v92, v87), vmul_n_f32(*(float32x2_t *)&v92[12], v88)), vmul_n_f32(*(float32x2_t *)&v92[24], v89)), v106);
    v82 = (float)((float)((float)(v87 * *(float *)&v92[8]) + (float)(v88 * *(float *)&v92[20]))
                + (float)(v89 * *(float *)&v93))
        - v107;
    v104 = v81;
    v105 = v82;
    v83 = sqrtf(vmlas_n_f32(COERCE_FLOAT(vmul_f32(v81, v81).i32[1]), v81.f32[0], v81.f32[0]) + (float)(v82 * v82));
    v73 = 0.0;
    if (v83 >= 1.0e-20)
    {
      v104 = vmul_n_f32(v81, 1.0 / v83);
      v105 = v82 * (float)(1.0 / v83);
      v73 = v83;
    }
    v69 = v73 / a8;
  }
  v84 = (float)((float)(*(float *)(a2 + 4) * *(float *)(a2 + 8)) * *(float *)(a2 + 12)) < 0.0;
  *(_DWORD *)&v92[8] = 2;
  *(_DWORD *)&v92[12] = *a7;
  v92[16] = v84;
  *(float *)&v92[20] = v69;
  *(_QWORD *)v92 = &off_24ED920C0;
  *(_QWORD *)&v92[24] = a6;
  *(_QWORD *)&v93 = &v99;
  *((_QWORD *)&v93 + 1) = LODWORD(a8) | 0x4000000000000000;
  v94 = a8 + 0.001;
  v95 = &v108;
  v96 = a5;
  v97 = (v27 & 2) != 0;
  v85 = v108 == v111 && v109 == v112 && v110 == v113;
  v98 = v85;
  *(float *)(a6 + 48) = a8;
  MeshRayCollider::collide<1,1>((uint64_t)&v106, (uint64_t)&v104, 1, a1, (uint64_t)v92, &v102, v73);
  return physx::Gu::SweepCapsuleMeshHitCallback::finalizeHit((uint64_t)v92, a6, (uint64_t)&v108, a2);
}

BOOL physx::Gu::sweepBox_MeshGeom_RTREE(uint64_t a1, uint64_t a2, uint64_t a3, float *a4, float *a5, uint64_t a6, unsigned __int16 *a7, double a8, float a9)
{
  float *v16;
  float v17;
  float v18;
  int v20;
  int v21;
  float v22;
  float v23;
  float v24;
  float v25;
  float v26;
  float v27;
  float v28;
  float v29;
  float v30;
  float v31;
  float v32;
  float v33;
  float v34;
  float v35;
  float v36;
  float v37;
  float v38;
  float v39;
  float v40;
  float v41;
  float v42;
  float v43;
  float v44;
  float v45;
  float v46;
  float v47;
  float v48;
  float v49;
  float v50;
  float v51;
  float v52;
  float v53;
  float v54;
  float v55;
  float v56;
  float v57;
  float v58;
  float v59;
  float v60;
  float v61;
  float v62;
  float v63;
  float v64;
  float v65;
  float v66;
  float v67;
  float v68;
  float v69;
  float v70;
  float v71;
  float v72;
  float v73;
  float v74;
  float v75;
  float v76;
  float v77;
  float v78;
  float v79;
  float v80;
  float v81;
  float v82;
  float v83;
  float v84;
  float v85;
  float v86;
  float v87;
  float v88;
  float v89;
  float v90;
  float v91;
  float v92;
  float v93;
  float v94;
  float v95;
  float v96;
  float v97;
  float v98;
  float v99;
  float v100;
  float v101;
  float v102;
  float v103;
  float v104;
  float v105;
  float v106;
  float v107;
  float v108;
  float v109;
  float v110;
  float v111;
  float v112;
  float v113;
  int v114;
  float v115;
  float v116;
  float32x2_t v117;
  float32x2_t v119;
  float32x2_t v120;
  float32x2_t v121;
  float32x2_t v122;
  float32x2_t v123;
  float32x2_t v124;
  float v128;
  float32x2_t v129;
  float v130;
  float v131;
  int32x4_t v132;
  float32x4_t v133;
  float v134;
  float v135;
  float v136;
  float v137;
  float v138;
  float v139;
  float v140;
  float v141;
  float v142;
  float v143;
  float v144;
  float v145;
  float v146;
  float v147;
  float v148;
  float v149;
  float v150;
  float v151;
  float v152;
  float v153;
  float v154;
  float v155;
  float v156;
  float v157;
  float v158;
  float v159;
  float v160;
  float v161;
  float v162;
  float v163;
  float v164;
  float v165;
  float v166;
  float v167;
  float v168;
  float v169;
  float v170;
  float v171;
  float v172;
  float v173;
  float v174;
  float v175;
  float v176;
  float v177;
  float v178;
  float v179;
  float v180;
  float v181;
  float v182;
  float v183;
  float v184;
  int8x16_t v185;
  float v186;
  float v187;
  float v188;
  float v189;
  float v190;
  float v191;
  float v192;
  float v193;
  float v194;
  float v195;
  float v196;
  float v197;
  float v198;
  float v199;
  float v200;
  float v201;
  float v202;
  float v203;
  float v204;
  float v205;
  float v206;
  float v207;
  float v208;
  float v209;
  float v210;
  float v211;
  float v212;
  float v213;
  float v214;
  float v215;
  float v216;
  float v217;
  float v218;
  float v219;
  float v220;
  float v221;
  float v222;
  float v223;
  float v224;
  float32_t v225;
  float v226;
  float v227;
  BOOL v228;
  __int128 v229;
  float v230;
  float v231;
  float v232;
  double v233;
  double v234;
  double v235;
  double v236;
  double v237;
  double v238;
  double v239;
  __n128 v240;
  float v242;
  float v243;
  float v244;
  float v245;
  float v246;
  float v247;
  float v248;
  float v249;
  float v250;
  float v251;
  float v252;
  float v255[3];
  float32x2_t v256;
  float v257;
  float32x4_t v258;
  float v259;
  float v260;
  float v261;
  float32x2_t v262;
  float v263;
  float32x2_t v264;
  float v265;
  float32x2_t v266;
  float v267;
  float32x2_t v268;
  float v269;
  float32x2_t v270;
  float v271;
  float32x2_t v272;
  float v273;
  float32x4_t v274;
  float v275;
  float v276;
  float32x2_t *v277;
  float v278;
  float v279;
  int32x2_t v280;
  float *v281;
  float32x2_t *v282;
  float *v283;
  float v284;
  __int128 v285;
  float v286;
  float v287;
  float v288;
  char v289;
  uint64_t v290;

  v290 = *MEMORY[0x24BDAC8D0];
  v17 = *(float *)(a2 + 4);
  v18 = *(float *)(a2 + 8);
  v16 = (float *)(a2 + 4);
  if (v17 == 1.0 && v18 == 1.0)
  {
    v20 = (*a7 >> 7) & 1;
    v21 = (*(unsigned __int8 *)(a2 + 32) >> 1) & 1;
    if (*(float *)(a2 + 12) == 1.0)
    {
      v23 = *(float *)a3;
      v22 = *(float *)(a3 + 4);
      v24 = *(float *)(a3 + 8);
      v25 = *(float *)(a3 + 12);
      v26 = v22 * (float)(v22 + v22);
      v27 = v24 * (float)(v24 + v24);
      v28 = (float)(v23 + v23) * v22;
      v29 = (float)(v23 + v23) * v24;
      v30 = (float)(v23 + v23) * v25;
      v31 = (float)(v22 + v22) * v24;
      v32 = (float)(v22 + v22) * v25;
      v33 = (float)(v24 + v24) * v25;
      v34 = v28 + v33;
      v246 = v29 - v32;
      v247 = (float)(1.0 - v26) - v27;
      v243 = v28 - v33;
      v35 = 1.0 - (float)(v23 * (float)(v23 + v23));
      v249 = v34;
      v250 = v35 - v27;
      v242 = v29 + v32;
      v244 = v31 - v30;
      v245 = v31 + v30;
      v251 = v35 - v26;
      v37 = *(float *)(a3 + 16);
      v36 = *(float *)(a3 + 20);
      v38 = (float)-v23 - v23;
      v39 = (float)-v22 - v22;
      v40 = (float)-v24 - v24;
      v41 = -(float)(v22 * v39);
      v42 = -(float)(v24 * v40);
      v43 = -(float)(v22 * v38);
      v44 = -(float)(v24 * v38);
      v45 = v38 * v25;
      v46 = -(float)(v24 * v39);
      v47 = v39 * v25;
      v48 = v40 * v25;
      v49 = (float)(1.0 - v41) - v42;
      v50 = v48 - (float)(v22 * v38);
      v51 = v44 - v47;
      v52 = v43 - v48;
      v53 = (float)(*(float *)a3 * v38) + 1.0;
      v54 = v53 - v42;
      v55 = v46 + v45;
      v56 = v44 + v47;
      v57 = v46 - v45;
      v58 = v53 - v41;
      v60 = a4[8];
      v59 = a4[9];
      v61 = a4[10];
      v62 = a4[11];
      v252 = *(float *)(a3 + 24);
      v270.f32[0] = (float)((float)(v49 * (float)(v59 - v37)) + (float)(v52 * (float)(v61 - v36)))
                  + (float)(v56 * (float)(v62 - v252));
      v270.f32[1] = (float)((float)(v50 * (float)(v59 - v37)) + (float)(v54 * (float)(v61 - v36)))
                  + (float)(v57 * (float)(v62 - v252));
      v271 = (float)((float)(v51 * (float)(v59 - v37)) + (float)(v55 * (float)(v61 - v36)))
           + (float)(v58 * (float)(v62 - v252));
      v63 = a5[1];
      v64 = (float)(v49 * *a5) + (float)(v52 * v63);
      v65 = (float)(v50 * *a5) + (float)(v54 * v63);
      v66 = (float)(v51 * *a5) + (float)(v55 * v63);
      v67 = a5[2];
      v68 = v64 + (float)(v56 * v67);
      v69 = v65 + (float)(v57 * v67);
      v70 = v66 + (float)(v58 * v67);
      v72 = *a4;
      v71 = a4[1];
      v73 = a4[2];
      v74 = a4[3];
      v75 = (float)((float)(v49 * *a4) + (float)(v52 * v71)) + (float)(v56 * v73);
      v76 = (float)((float)(v50 * *a4) + (float)(v54 * v71)) + (float)(v57 * v73);
      v77 = (float)((float)(v51 * *a4) + (float)(v55 * v71)) + (float)(v58 * v73);
      v79 = a4[4];
      v78 = a4[5];
      v80 = (float)((float)(v49 * v74) + (float)(v52 * v79)) + (float)(v56 * v78);
      v81 = (float)((float)(v50 * v74) + (float)(v54 * v79)) + (float)(v57 * v78);
      v82 = (float)((float)(v51 * v74) + (float)(v55 * v79)) + (float)(v58 * v78);
      v84 = a4[6];
      v83 = a4[7];
      v85 = (float)((float)(v49 * v84) + (float)(v52 * v83)) + (float)(v56 * v60);
      v86 = (float)((float)(v50 * v84) + (float)(v54 * v83)) + (float)(v57 * v60);
      v87 = (float)((float)(v51 * v84) + (float)(v55 * v83)) + (float)(v58 * v60);
      v88 = fabsf(v76);
      v89 = fabsf(v77);
      v91 = v242;
      v90 = v243;
      v92 = a4[12];
      v93 = a4[13];
      v94 = fabsf(v75) * v92;
      v95 = v88 * v92;
      v96 = v89 * v92;
      v97 = fabsf(v80);
      v98 = fabsf(v82);
      v100 = v244;
      v99 = v245;
      v101 = v97 * v93;
      v102 = fabsf(v81) * v93;
      v103 = v98 * v93;
      v105 = v246;
      v104 = v247;
      v106 = v94 + v101;
      v107 = a4[14];
      v108 = fabsf(v85) * v107;
      v109 = fabsf(v86) * v107;
      v110 = fabsf(v87) * v107;
      v111 = v106 + v108;
      v112 = (float)(v95 + v102) + v109;
      v113 = (float)(v96 + v103) + v110;
      v114 = 1;
      v248 = v68 * *(float *)&a8;
      v115 = v69 * *(float *)&a8;
      v116 = v70 * *(float *)&a8;
      goto LABEL_12;
    }
  }
  else
  {
    v20 = (*a7 >> 7) & 1;
    v21 = (*(unsigned __int8 *)(a2 + 32) >> 1) & 1;
  }
  physx::operator*(a3, v16, (uint64_t)&v274);
  v133 = *(float32x4_t *)a3;
  *(int32x2_t *)v185.i8 = vdup_lane_s32(*(int32x2_t *)a3, 1);
  *(int32x2_t *)v132.i8 = vdup_laneq_s32(*(int32x4_t *)a3, 2);
  v117 = (float32x2_t)vdup_laneq_s32(*(int32x4_t *)a3, 3);
  _Q4 = vaddq_f32(v133, v133);
  *(int32x2_t *)v133.f32 = vdup_lane_s32((int32x2_t)vmul_f32(*(float32x2_t *)a3, *(float32x2_t *)_Q4.f32), 0);
  v119 = vmul_lane_f32(*(float32x2_t *)v185.i8, *(float32x2_t *)_Q4.f32, 1);
  v120 = vmul_laneq_f32(*(float32x2_t *)v132.i8, _Q4, 2);
  *(float32x2_t *)v185.i8 = vmul_n_f32(*(float32x2_t *)v185.i8, _Q4.f32[0]);
  v121 = vmul_n_f32(*(float32x2_t *)v132.i8, _Q4.f32[0]);
  v122 = vmul_n_f32(v117, _Q4.f32[0]);
  *(float32x2_t *)v132.i8 = vmul_lane_f32(*(float32x2_t *)v132.i8, *(float32x2_t *)_Q4.f32, 1);
  v123 = vmul_lane_f32(v117, *(float32x2_t *)_Q4.f32, 1);
  v124 = vmul_laneq_f32(v117, _Q4, 2);
  __asm { FMOV            V4.2S, #1.0 }
  *(float32x2_t *)v133.f32 = vsub_f32(*(float32x2_t *)_Q4.f32, *(float32x2_t *)v133.f32);
  _Q4.f32[0] = vadd_f32(*(float32x2_t *)v185.i8, v124).f32[0];
  v128 = vsub_f32(v121, v123).f32[0];
  v129 = vsub_f32(*(float32x2_t *)v185.i8, v124);
  v130 = vsub_f32(*(float32x2_t *)v133.f32, v120).f32[0];
  v131 = vadd_f32(*(float32x2_t *)v132.i8, v122).f32[0];
  *(float32x2_t *)v185.i8 = vadd_f32(v121, v123);
  *(float32x2_t *)v132.i8 = vsub_f32(*(float32x2_t *)v132.i8, v122);
  v124.f32[0] = vsub_f32(*(float32x2_t *)v133.f32, v119).f32[0];
  v133.i32[0] = 1.0;
  v119.f32[0] = (float)(1.0 - v119.f32[1]) - v120.f32[1];
  v120.i32[0] = *(_DWORD *)(a2 + 20);
  v121.i32[0] = *(_DWORD *)(a2 + 24);
  v122.i32[0] = *(_DWORD *)(a2 + 28);
  v134 = *(float *)(a2 + 12);
  v123.i32[0] = *(_DWORD *)(a2 + 16);
  v135 = v120.f32[0] + v120.f32[0];
  v136 = v121.f32[0] + v121.f32[0];
  v137 = v120.f32[0] * (float)(v120.f32[0] + v120.f32[0]);
  v138 = v121.f32[0] * (float)(v121.f32[0] + v121.f32[0]);
  v120.f32[0] = (float)(v123.f32[0] + v123.f32[0]) * v120.f32[0];
  v139 = (float)(v123.f32[0] + v123.f32[0]) * v121.f32[0];
  v140 = (float)(v123.f32[0] + v123.f32[0]) * v122.f32[0];
  v121.f32[0] = v135 * v121.f32[0];
  v141 = v135 * v122.f32[0];
  v122.f32[0] = v136 * v122.f32[0];
  v142 = (float)(1.0 - v137) - v138;
  v143 = v120.f32[0] + v122.f32[0];
  v144 = v139 - v141;
  v120.f32[0] = v120.f32[0] - v122.f32[0];
  v122.f32[0] = 1.0 - (float)(v123.f32[0] * (float)(v123.f32[0] + v123.f32[0]));
  v123.f32[0] = v122.f32[0] - v138;
  v145 = v121.f32[0] + v140;
  v146 = v139 + v141;
  v121.f32[0] = v121.f32[0] - v140;
  v122.f32[0] = v122.f32[0] - v137;
  v147 = *(float *)(a2 + 4);
  v148 = *(float *)(a2 + 8);
  v149 = v147 * v142;
  v150 = v147 * v120.f32[0];
  v151 = v147 * v146;
  v152 = v143 * v148;
  v153 = v123.f32[0] * v148;
  v154 = v121.f32[0] * v148;
  v155 = v144 * v134;
  v156 = v145 * v134;
  v157 = v122.f32[0] * v134;
  v158 = v142 * v150;
  v159 = v143 * v153;
  v160 = (float)(v142 * v149) + (float)(v143 * v152);
  v161 = (float)(v142 * v151) + (float)(v143 * v154);
  v162 = v160 + (float)(v144 * v155);
  v163 = (float)(v158 + v159) + (float)(v144 * v156);
  v164 = v161 + (float)(v144 * v157);
  v165 = (float)(v120.f32[0] * v149) + (float)(v123.f32[0] * v152);
  v166 = (float)(v120.f32[0] * v150) + (float)(v123.f32[0] * v153);
  v120.f32[0] = (float)(v120.f32[0] * v151) + (float)(v123.f32[0] * v154);
  v167 = v145 * v156;
  v123.f32[0] = v165 + (float)(v145 * v155);
  v168 = v120.f32[0] + (float)(v145 * v157);
  v169 = v146 * v151;
  v170 = (float)((float)(v146 * v149) + (float)(v121.f32[0] * v152)) + (float)(v122.f32[0] * v155);
  v171 = (float)((float)(v146 * v150) + (float)(v121.f32[0] * v153)) + (float)(v122.f32[0] * v156);
  v172 = (float)(v169 + (float)(v121.f32[0] * v154)) + (float)(v122.f32[0] * v157);
  v173 = vmuls_lane_f32(v164, *(float32x2_t *)v185.i8, 1)
       + (float)((float)(v119.f32[0] * v162) + vmuls_lane_f32(v163, v129, 1));
  v174 = (float)(v164 * *(float *)v132.i32) + (float)((float)(v162 * _Q4.f32[0]) + (float)(v163 * v130));
  v175 = (float)(v164 * v124.f32[0]) + (float)((float)(v162 * v128) + (float)(v163 * v131));
  v176 = (float)(v123.f32[0] * v128) + (float)((float)(v166 + v167) * v131);
  v177 = vmuls_lane_f32(v168, *(float32x2_t *)v185.i8, 1)
       + (float)((float)(v119.f32[0] * v123.f32[0]) + vmuls_lane_f32(v166 + v167, v129, 1));
  v178 = (float)(v168 * *(float *)v132.i32)
       + (float)((float)(v123.f32[0] * _Q4.f32[0]) + (float)((float)(v166 + v167) * v130));
  v179 = (float)(v168 * v124.f32[0]) + v176;
  _Q4.f32[0] = (float)(v170 * _Q4.f32[0]) + (float)(v171 * v130);
  v180 = (float)(v170 * v128) + (float)(v171 * v131);
  v181 = vmuls_lane_f32(v172, *(float32x2_t *)v185.i8, 1)
       + (float)((float)(v119.f32[0] * v170) + vmuls_lane_f32(v171, v129, 1));
  v182 = (float)(v172 * *(float *)v132.i32) + _Q4.f32[0];
  v183 = (float)(v172 * v124.f32[0]) + v180;
  v184 = (float)(v177 * v182) - (float)(v178 * v181);
  *(float *)v185.i32 = (float)((float)(v174 * (float)((float)(v179 * v181) - (float)(v177 * v183)))
                             + (float)(v173 * (float)((float)(v178 * v183) - (float)(v179 * v182))))
                     + (float)(v175 * v184);
  if (*(float *)v185.i32 == 0.0)
  {
    v185.i32[0] = 0;
    v132.i32[0] = 0;
    v187 = 0.0;
    v188 = 1.0;
    v189 = 0.0;
    v190 = 0.0;
    v191 = 0.0;
    v192 = 1.0;
  }
  else
  {
    v186 = 1.0 / *(float *)v185.i32;
    v133.f32[0] = (float)((float)(v178 * v183) - (float)(v182 * v179)) * (float)(1.0 / *(float *)v185.i32);
    *(float *)v185.i32 = -(float)((float)((float)(v174 * v183) - (float)(v182 * v175))
                                * (float)(1.0 / *(float *)v185.i32));
    *(float *)v132.i32 = (float)((float)(v174 * v179) - (float)(v175 * v178)) * v186;
    v187 = -(float)((float)((float)(v181 * (float)-v179) + (float)(v177 * v183)) * v186);
    v188 = (float)((float)(v173 * v183) - (float)(v175 * v181)) * v186;
    v189 = -(float)((float)((float)(v173 * v179) - (float)(v175 * v177)) * v186);
    v190 = v184 * v186;
    v191 = -(float)((float)((float)(v173 * v182) - (float)(v174 * v181)) * v186);
    v192 = (float)((float)(v174 * (float)-v177) + (float)(v173 * v178)) * v186;
  }
  v104 = v274.f32[0];
  v90 = v274.f32[3];
  v105 = v274.f32[2];
  v99 = v276;
  v249 = v274.f32[1];
  v250 = v275;
  v100 = *((float *)&v277 + 1);
  v91 = *(float *)&v277;
  v37 = v279;
  v36 = *(float *)v280.i32;
  v251 = v278;
  v252 = *(float *)&v280.i32[1];
  v193 = *(float *)(a3 + 16);
  v194 = *(float *)(a3 + 20);
  v195 = *(float *)(a3 + 24);
  v262 = (float32x2_t)__PAIR64__(v185.u32[0], v133.u32[0]);
  v263 = *(float *)v132.i32;
  v264 = (float32x2_t)__PAIR64__(LODWORD(v188), LODWORD(v187));
  v265 = v189;
  v266 = (float32x2_t)__PAIR64__(LODWORD(v191), LODWORD(v190));
  v267 = v192;
  v268.f32[0] = (float)((float)-(float)(v194 * v187) - (float)(v133.f32[0] * v193)) - (float)(v190 * v195);
  v268.f32[1] = (float)((float)-(float)(v194 * v188) - (float)(*(float *)v185.i32 * v193)) - (float)(v191 * v195);
  v269 = (float)((float)-(float)(v194 * v189) - (float)(*(float *)v132.i32 * v193)) - (float)(v192 * v195);
  physx::transform((uint64_t)&v262, (uint64_t)a4, &v274, (int8x16_t)v133, v185, v132);
  v114 = 0;
  v111 = (float)((float)(fabsf(v274.f32[3]) * *((float *)&v281 + 1)) + (float)(fabsf(v274.f32[0]) * *(float *)&v281))
       + (float)(fabsf(*(float *)&v277) * *(float *)&v282);
  v112 = (float)((float)(fabsf(v275) * *((float *)&v281 + 1)) + (float)(fabsf(v274.f32[1]) * *(float *)&v281))
       + (float)(fabsf(*((float *)&v277 + 1)) * *(float *)&v282);
  v113 = (float)((float)(fabsf(v276) * *((float *)&v281 + 1)) + (float)(fabsf(v274.f32[2]) * *(float *)&v281))
       + (float)(fabsf(v278) * *(float *)&v282);
  v60 = a4[8];
  v59 = a4[9];
  v61 = a4[10];
  v62 = a4[11];
  v270 = vadd_f32(vadd_f32(vadd_f32(vmul_n_f32(v262, v59), vmul_n_f32(v264, v61)), vmul_n_f32(v266, v62)), v268);
  v271 = (float)((float)((float)(v59 * v263) + (float)(v61 * v265)) + (float)(v62 * v267)) + v269;
  v196 = *a5 * *(float *)&a8;
  v197 = a5[1] * *(float *)&a8;
  v198 = a5[2] * *(float *)&a8;
  v199 = v263 * v196;
  v248 = (float)((float)(v196 * v262.f32[0]) + (float)(v197 * v264.f32[0])) + (float)(v198 * v266.f32[0]);
  v115 = (float)(vmuls_lane_f32(v196, v262, 1) + vmuls_lane_f32(v197, v264, 1)) + vmuls_lane_f32(v198, v266, 1);
  v116 = (float)(v199 + (float)(v265 * v197)) + (float)(v267 * v198);
  v72 = *a4;
  v71 = a4[1];
  v73 = a4[2];
  v74 = a4[3];
  v79 = a4[4];
  v78 = a4[5];
  v84 = a4[6];
  v83 = a4[7];
LABEL_12:
  v272.f32[0] = (float)(v111 + a9) * 1.01;
  v272.f32[1] = (float)(v112 + a9) * 1.01;
  v273 = (float)(v113 + a9) * 1.01;
  v262.f32[0] = (float)((float)(v72 * v104) + (float)(v71 * v249)) + (float)(v73 * v105);
  v262.f32[1] = (float)((float)(v74 * v104) + (float)(v79 * v249)) + (float)(v78 * v105);
  v263 = (float)((float)(v84 * v104) + (float)(v83 * v249)) + (float)(v60 * v105);
  v264.f32[0] = (float)((float)(v72 * v90) + (float)(v71 * v250)) + (float)(v73 * v99);
  v264.f32[1] = (float)((float)(v74 * v90) + (float)(v79 * v250)) + (float)(v78 * v99);
  v265 = (float)((float)(v84 * v90) + (float)(v83 * v250)) + (float)(v60 * v99);
  v266.f32[0] = (float)((float)(v72 * v91) + (float)(v71 * v100)) + (float)(v73 * v251);
  v266.f32[1] = (float)((float)(v74 * v91) + (float)(v79 * v100)) + (float)(v78 * v251);
  v267 = (float)((float)(v84 * v91) + (float)(v83 * v100)) + (float)(v60 * v251);
  v268.f32[0] = (float)((float)((float)-(float)(v61 * v71) - (float)(v72 * v59)) - (float)(v73 * v62))
              + (float)((float)((float)(v72 * v37) + (float)(v71 * v36)) + (float)(v73 * v252));
  v268.f32[1] = (float)((float)((float)-(float)(v61 * v79) - (float)(v74 * v59)) - (float)(v78 * v62))
              + (float)((float)((float)(v74 * v37) + (float)(v79 * v36)) + (float)(v78 * v252));
  v269 = (float)((float)((float)-(float)(v61 * v83) - (float)(v84 * v59)) - (float)(v60 * v62))
       + (float)((float)((float)(v84 * v37) + (float)(v83 * v36)) + (float)(v60 * v252));
  v200 = a4[8];
  v201 = a4[4];
  if (v200 >= 0.0)
  {
    v209 = v71 - v74;
    if (v72 >= (float)-v201)
    {
      v214 = v200 + (float)((float)(v72 + 1.0) + v201);
      v215 = 0.5 / sqrtf(v214);
      v205 = v215 * (float)(a4[5] - a4[7]);
      v206 = (float)(v84 - v73) * v215;
      v207 = v209 * v215;
      v208 = v214 * v215;
    }
    else
    {
      v210 = v200 + (float)((float)(1.0 - v72) - v201);
      v211 = 0.5 / sqrtf(v210);
      v205 = (float)(v84 + v73) * v211;
      v206 = v211 * (float)(a4[5] + a4[7]);
      v207 = v210 * v211;
      v208 = v209 * v211;
    }
  }
  else
  {
    v202 = v74 + v71;
    if (v72 <= v201)
    {
      v212 = (float)((float)(1.0 - v72) + v201) - v200;
      v213 = 0.5 / sqrtf(v212);
      v205 = v202 * v213;
      v206 = v212 * v213;
      v207 = v213 * (float)(a4[5] + a4[7]);
      v208 = (float)(v84 - v73) * v213;
    }
    else
    {
      v203 = (float)((float)(v72 + 1.0) - v201) - v200;
      v204 = 0.5 / sqrtf(v203);
      v205 = v203 * v204;
      v206 = v202 * v204;
      v207 = (float)(v84 + v73) * v204;
      v208 = v204 * (float)(a4[5] - a4[7]);
    }
  }
  v216 = fmaxf(sqrtf((float)((float)(v115 * v115) + (float)(v248 * v248)) + (float)(v116 * v116)), 0.00001);
  v217 = v216 / *(float *)&a8;
  if (v114)
    v217 = 1.0;
  v258.i64[0] = __PAIR64__(LODWORD(v206), LODWORD(v205));
  v258.i64[1] = __PAIR64__(LODWORD(v208), LODWORD(v207));
  v259 = v59;
  v260 = v61;
  v261 = v62;
  v218 = a5[1];
  v219 = (float)(v72 * *a5) + (float)(v71 * v218);
  v220 = (float)(v74 * *a5) + (float)(v79 * v218);
  v221 = (float)(v84 * *a5) + (float)(v83 * v218);
  v222 = a5[2];
  v223 = v78 * v222;
  v224 = v60 * v222;
  v225 = v219 + (float)(v73 * v222);
  v226 = v220 + v223;
  v227 = v221 + v224;
  v256.f32[0] = v225;
  v256.f32[1] = v220 + v223;
  v257 = v227;
  v228 = (float)((float)(*(float *)(a2 + 4) * *(float *)(a2 + 8)) * *(float *)(a2 + 12)) < 0.0;
  v274.i32[2] = 2;
  v274.i32[3] = *a7;
  LOBYTE(v275) = v228;
  v274.i64[0] = (uint64_t)&off_24ED920E8;
  v277 = &v262;
  v276 = v217;
  v278 = *(float *)&a8;
  v279 = *(float *)&a8;
  v281 = a4;
  v282 = &v256;
  v283 = a5;
  v289 = v21 | v20;
  HIDWORD(v229) = 0;
  *(float *)&v229 = v225 * *(float *)&a8;
  *((float *)&v229 + 1) = (float)(v220 + v223) * *(float *)&a8;
  *((float *)&v229 + 2) = v227 * *(float *)&a8;
  v285 = v229;
  v280 = vdup_lane_s32(*(int32x2_t *)&a8, 0);
  v284 = a9;
  v230 = 1.0 / v225;
  if (v225 == 0.0)
    v230 = 0.0;
  if (v226 == 0.0)
    v231 = 0.0;
  else
    v231 = 1.0 / v226;
  if (v227 == 0.0)
    v232 = 0.0;
  else
    v232 = 1.0 / v227;
  v286 = v230;
  v287 = v231;
  v288 = v232;
  v255[0] = v248 * (float)(1.0 / v216);
  v255[1] = v115 * (float)(1.0 / v216);
  v255[2] = v116 * (float)(1.0 / v216);
  MeshRayCollider::collide<1,1>((uint64_t)&v270, (uint64_t)v255, v21 | v20, a1, (uint64_t)&v274, &v272, v216);
  return physx::Gu::SweepBoxMeshHitCallback::finalizeHit((uint64_t)&v274, a6, a2, v233, v234, v235, v236, v237, v238, v239, v240, a3, &v258, &v256, v20, v21);
}

uint64_t physx::Gu::sweepConvex_MeshGeom_RTREE(uint64_t a1, uint64_t a2, float32x2_t *a3, uint64_t a4, float a5)
{
  _BYTE v8[60];

  physx::Gu::computeSweptBox((uint64_t)v8, (float *)(a2 + 48), (float32x2_t *)(a2 + 36), (float *)a2, a3, a5);
  return MeshRayCollider::collideOBB((physx::Gu::Box *)v8, 1, a1, a4, 1);
}

BOOL intersectEdgeEdgePreca(float *a1, float *a2, uint64_t a3, float *a4, unsigned int a5, unsigned int a6, float32x2_t *a7, float *a8, float a9, float a10, float *a11, float *a12, float32x2_t *a13)
{
  float v13;
  float v14;
  float v15;
  float v16;
  float v17;
  float v18;
  float v19;
  float v20;
  float v21;
  float v22;
  float v23;
  float v24;
  float v25;
  float v26;
  float v27;
  float v29;
  float32x2_t v30;
  float32_t v31;

  v13 = *a8;
  v14 = a8[1];
  v15 = a4[1];
  v16 = a8[2];
  v17 = a4[2];
  v18 = a4[3];
  v19 = (float)((float)((float)(v14 * v15) + (float)(*a8 * *a4)) + (float)(v16 * v17)) + v18;
  v20 = a11[1];
  v21 = a11[2];
  if ((float)(v19 * (float)(v18 + (float)((float)((float)(v15 * v20) + (float)(*a11 * *a4)) + (float)(v21 * v17)))) > 0.0)
    return 0;
  v22 = *a11 - v13;
  v23 = v20 - v14;
  v24 = v21 - v16;
  v25 = (float)((float)(v15 * v23) + (float)(*a4 * v22)) + (float)(v17 * v24);
  if (v25 == 0.0)
    return 0;
  v26 = v19 / v25;
  a13->f32[0] = v13 - (float)(v22 * v26);
  a13->f32[1] = v14 - (float)(v23 * v26);
  a13[1].f32[0] = v16 - (float)(v24 * v26);
  v27 = (float)((float)(*(float *)(a3 + 4 * a5) * (float)(a13->f32[a6] - a1[a6]))
              - (float)(*(float *)(a3 + 4 * a6) * (float)(a13->f32[a5] - a1[a5])))
      * a9;
  *a12 = v27;
  if (v27 < a10)
    return 0;
  v29 = v27 * a7[1].f32[0];
  v30 = vsub_f32(*a13, vmul_n_f32(*a7, v27));
  *a13 = v30;
  v31 = a13[1].f32[0] - v29;
  a13[1].f32[0] = v31;
  return (float)((float)((float)((float)(a1[1] - v30.f32[1]) * (float)(a2[1] - v30.f32[1]))
                       + (float)((float)(*a1 - v30.f32[0]) * (float)(*a2 - v30.f32[0])))
               + (float)((float)(a1[2] - v31) * (float)(a2[2] - v31))) < 0.0;
}

uint64_t GuTestAxis(float *a1, float *a2, uint64_t a3, uint64_t a4, uint64_t a5, float *a6, float a7)
{
  float v9;
  float v10;
  float v11;
  float v12;
  float v13;
  float v14;
  uint64_t result;
  float v16;
  uint64_t v17;

  v9 = a1[1];
  v10 = a1[2];
  v11 = (float)((float)(a2[1] * v9) + (float)(*a2 * *a1)) + (float)(a2[2] * v10);
  v12 = (float)((float)(v9 * a2[4]) + (float)(a2[3] * *a1)) + (float)(a2[5] * v10);
  if (v11 <= v12)
    v13 = v11;
  else
    v13 = v12;
  if (v11 <= v12)
    v11 = v12;
  v14 = v11 + a7;
  v17 = 0;
  (*(void (**)(uint64_t, float *, uint64_t, uint64_t, char *, uint64_t *))(a3 + 88))(a3, a1, a5, a4, (char *)&v17 + 4, &v17);
  result = 0;
  if (v14 >= *((float *)&v17 + 1))
  {
    if (*(float *)&v17 >= (float)(v13 - a7))
    {
      v16 = v14 - *((float *)&v17 + 1);
      if ((float)(v14 - *((float *)&v17 + 1)) >= (float)(*(float *)&v17 - (float)(v13 - a7)))
        v16 = *(float *)&v17 - (float)(v13 - a7);
      *a6 = v16;
      return 1;
    }
    else
    {
      return 0;
    }
  }
  return result;
}

uint64_t local_Split(uint64_t a1, uint64_t a2, unsigned int a3)
{
  uint64_t v3;
  uint64_t result;
  unsigned int *v6;
  float v7;
  unsigned int *v8;
  unsigned int v9;

  v3 = *(unsigned int *)(a1 + 40);
  if (!(_DWORD)v3)
    return 0;
  result = 0;
  v6 = *(unsigned int **)(a1 + 32);
  v7 = (float)(*(float *)(a1 + 4 * a3) + *(float *)(a1 + 4 * a3 + 12)) * 0.5;
  v8 = v6;
  do
  {
    v9 = *v8;
    if (*(float *)(a2 + 4 * a3 + 12 * *v8) > v7)
    {
      *v8 = v6[result];
      v6[result] = v9;
      result = (result + 1);
    }
    ++v8;
    --v3;
  }
  while (v3);
  return result;
}

uint64_t BuildBV4Internal(physx::Gu::BV4Tree &,physx::Gu::AABBTree const&,physx::Gu::SourceMesh *,float,BOOL)::Local::_Check(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  int v6;
  __int128 v7;
  uint64_t v8;
  __int128 v9;
  uint64_t v10;
  uint64_t v11;

  if (result)
  {
    v1 = result;
    v2 = result + 48;
    v11 = 0;
    BuildBV4Internal(physx::Gu::BV4Tree &,physx::Gu::AABBTree const&,physx::Gu::SourceMesh *,float,BOOL)::Local::_CheckMD(result, (unsigned int *)&v11 + 1, (unsigned int *)&v11);
    v10 = 0;
    BuildBV4Internal(physx::Gu::BV4Tree &,physx::Gu::AABBTree const&,physx::Gu::SourceMesh *,float,BOOL)::Local::_CheckMD(v2, (unsigned int *)&v10 + 1, (unsigned int *)&v10);
    if (HIDWORD(v11) > HIDWORD(v10))
    {
      v3 = v1;
      v4 = *(_QWORD *)(v1 + 24);
      v5 = *(_QWORD *)(v1 + 32);
      v6 = *(_DWORD *)(v1 + 40);
      v7 = *(_OWORD *)(v1 + 48);
      v8 = *(_QWORD *)(v1 + 64);
      *(_OWORD *)(v1 + 24) = *(_OWORD *)(v1 + 72);
      *(_DWORD *)(v1 + 40) = *(_DWORD *)(v1 + 88);
      v9 = *(_OWORD *)v1;
      *(_OWORD *)v1 = v7;
      *(_OWORD *)(v1 + 48) = v9;
      *(_QWORD *)&v7 = *(_QWORD *)(v1 + 16);
      *(_QWORD *)(v1 + 16) = v8;
      *(_QWORD *)(v1 + 64) = v7;
      *(_QWORD *)(v1 + 72) = v4;
      *(_QWORD *)(v1 + 80) = v5;
      *(_DWORD *)(v1 + 88) = v6;
      v1 = v2;
      v2 = v3;
    }
    BuildBV4Internal(physx::Gu::BV4Tree &,physx::Gu::AABBTree const&,physx::Gu::SourceMesh *,float,BOOL)::Local::_Check(*(_QWORD *)(v1 + 24));
    return BuildBV4Internal(physx::Gu::BV4Tree &,physx::Gu::AABBTree const&,physx::Gu::SourceMesh *,float,BOOL)::Local::_Check(*(_QWORD *)(v2 + 24));
  }
  return result;
}

uint64_t _BuildBV4(uint64_t *a1, _DWORD *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  float *v10;
  float *v11;
  uint64_t v12;
  uint64_t result;
  float *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;

  while (1)
  {
    while (1)
    {
      v8 = *(_QWORD *)(a3 + 24);
      v9 = v8 ? v8 + 48 : 0;
      v10 = *(float **)(v8 + 24);
      v11 = *(float **)(v9 + 24);
      if (!v10)
        break;
      if (!v11)
      {
        ++*(_DWORD *)(a4 + 12);
        setPrimitive(*a1, (uint64_t)a2, 2u, v9, *(float *)(a4 + 20));
        v14 = *(float **)(v8 + 24);
        if (v14)
          a3 = (uint64_t)(v14 + 12);
        else
          a3 = 0;
        v15 = setNode(*a1, (uint64_t)a2, 0, *(_QWORD *)(v8 + 24), (BV4BuildParams *)a4);
        v16 = setNode(*a1, (uint64_t)a2, 1u, a3, (BV4BuildParams *)a4);
        a2[12] = precomputeNodeSorting((float *)v8, (float *)v9);
        result = precomputeNodeSorting(v14, (float *)a3);
        a2[24] = result;
        if (!v15)
          goto LABEL_20;
        goto LABEL_19;
      }
      ++*(_DWORD *)(a4 + 16);
      a3 = (uint64_t)(v11 + 12);
      v17 = setNode(*a1, (uint64_t)a2, 0, (uint64_t)v10, (BV4BuildParams *)a4);
      v18 = setNode(*a1, (uint64_t)a2, 1u, (uint64_t)(v10 + 12), (BV4BuildParams *)a4);
      v19 = setNode(*a1, (uint64_t)a2, 2u, (uint64_t)v11, (BV4BuildParams *)a4);
      v12 = setNode(*a1, (uint64_t)a2, 3u, (uint64_t)(v11 + 12), (BV4BuildParams *)a4);
      a2[12] = precomputeNodeSorting((float *)v8, (float *)v9);
      a2[24] = precomputeNodeSorting(v10, v10 + 12);
      result = precomputeNodeSorting(v11, v11 + 12);
      a2[36] = result;
      if (v17)
        result = _BuildBV4(a1, v17, v10, a4);
      if (v18)
        result = _BuildBV4(a1, v18, v10 + 12, a4);
      if (v19)
        result = _BuildBV4(a1, v19, v11, a4);
      a2 = (_DWORD *)v12;
      if (!v12)
        return result;
    }
    if (!v11)
      break;
    ++*(_DWORD *)(a4 + 8);
    setPrimitive(*a1, (uint64_t)a2, 0, v8, *(float *)(a4 + 20));
    v14 = *(float **)(v9 + 24);
    if (v14)
      a3 = (uint64_t)(v14 + 12);
    else
      a3 = 0;
    v15 = setNode(*a1, (uint64_t)a2, 1u, *(_QWORD *)(v9 + 24), (BV4BuildParams *)a4);
    v16 = setNode(*a1, (uint64_t)a2, 2u, a3, (BV4BuildParams *)a4);
    a2[12] = precomputeNodeSorting((float *)v8, (float *)v9);
    result = precomputeNodeSorting(v14, (float *)a3);
    a2[36] = result;
    if (!v15)
      goto LABEL_20;
LABEL_19:
    result = _BuildBV4(a1, v15, v14, a4);
LABEL_20:
    a2 = (_DWORD *)v16;
    if (!v16)
      return result;
  }
  ++*(_DWORD *)(a4 + 4);
  setPrimitive(*a1, (uint64_t)a2, 0, v8, *(float *)(a4 + 20));
  setPrimitive(*a1, (uint64_t)a2, 1u, v9, *(float *)(a4 + 20));
  result = precomputeNodeSorting((float *)v8, (float *)v9);
  a2[12] = result;
  return result;
}

uint64_t BuildBV4Internal(physx::Gu::BV4Tree &,physx::Gu::AABBTree const&,physx::Gu::SourceMesh *,float,BOOL)::Local::_CheckMD(uint64_t a1, unsigned int *a2, unsigned int *a3)
{
  unsigned int v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t result;
  uint64_t v10;

  v4 = *a3;
  v5 = *a3 + 1;
  *a3 = v5;
  if (*a2 <= v5)
    v6 = v4 + 1;
  else
    v6 = *a2;
  *a2 = v6;
  result = *(_QWORD *)(a1 + 24);
  if (result)
  {
    result = ((uint64_t (*)(void))BuildBV4Internal(physx::Gu::BV4Tree &,physx::Gu::AABBTree const&,physx::Gu::SourceMesh *,float,BOOL)::Local::_CheckMD)();
    --*a3;
    v10 = *(_QWORD *)(a1 + 24);
    if (v10)
    {
      result = BuildBV4Internal(physx::Gu::BV4Tree &,physx::Gu::AABBTree const&,physx::Gu::SourceMesh *,float,BOOL)::Local::_CheckMD(v10 + 48, a2, a3);
      --*a3;
    }
  }
  return result;
}

uint64_t setPrimitive(uint64_t result, uint64_t a2, unsigned int a3, uint64_t a4, float a5)
{
  int v5;
  uint64_t v6;
  uint64_t v7;
  float32x4_t v8;
  float v9;
  float32x4_t v10;
  float32x4_t v11;
  float32x4_t v12;
  float32x4_t v13;
  float v14;
  float *v15;
  uint64_t v16;

  v5 = *(_DWORD *)(a4 + 40);
  v6 = *(_QWORD *)(a4 + 32);
  v7 = a2 + 48 * a3;
  v8 = *(float32x4_t *)(a4 + 4);
  v9 = (float)(*(float *)a4 + COERCE_FLOAT(*(_QWORD *)(a4 + 12))) * 0.5;
  v10 = (float32x4_t)vextq_s8((int8x16_t)v8, vextq_s8((int8x16_t)v8, (int8x16_t)v8, 8uLL), 0xCuLL);
  v10.i32[1] = *(_DWORD *)(a4 + 20);
  v11.i64[0] = vaddq_f32(v8, v10).u64[0];
  v10.i32[2] = *(_DWORD *)a4;
  v11.i64[1] = vsubq_f32(v8, v10).i64[1];
  v12.i64[0] = 0x3F0000003F000000;
  v12.i64[1] = 0x3F0000003F000000;
  v13 = vmulq_f32(v11, v12);
  v14 = (float)(v10.f32[1] - COERCE_FLOAT(HIDWORD(*(_QWORD *)(a4 + 4)))) * 0.5;
  *(float *)(v7 + 32) = v14;
  v15 = (float *)(v7 + 32);
  *(v15 - 5) = v9;
  *((float32x4_t *)v15 - 1) = v13;
  if (a5 != 0.0)
  {
    v16 = a2 + 48 * a3;
    *(float *)(v16 + 24) = v13.f32[2] + a5;
    *(float *)(v16 + 28) = v13.f32[3] + a5;
    *v15 = v14 + a5;
  }
  *(_QWORD *)(a2 + 48 * a3 + 40) = (2 * (v5 & 0x8000000F | (16 * (((v6 - result) >> 2) & 0x7FFFFFF)))) | 1;
  return result;
}

uint64_t precomputeNodeSorting(float *a1, float *a2)
{
  float v2;
  float v3;
  float v4;
  float v5;
  float v6;
  float v7;
  float v8;
  float v9;
  float v10;
  float v11;
  float v12;
  float v13;
  float v14;
  int v15;

  v2 = (float)((float)(*a1 + a1[3]) * 0.5) - (float)((float)(*a2 + a2[3]) * 0.5);
  v3 = (float)((float)(a1[1] + a1[4]) * 0.5) - (float)((float)(a2[1] + a2[4]) * 0.5);
  v4 = (float)((float)(a1[2] + a1[5]) * 0.5) - (float)((float)(a2[2] + a2[5]) * 0.5);
  v5 = v3 * 0.57735;
  v6 = (float)(v3 * 0.57735) + (float)(v2 * 0.57735);
  v7 = v3 * -0.57735;
  v8 = v7 + (float)(v2 * 0.57735);
  v9 = v8 + (float)(v4 * 0.57735);
  v10 = v8 + (float)(v4 * -0.57735);
  v11 = v5 + (float)(v2 * -0.57735);
  v12 = v11 + (float)(v4 * 0.57735);
  v13 = v11 + (float)(v4 * -0.57735);
  v14 = v7 + (float)(v2 * -0.57735);
  if ((float)(v6 + (float)(v4 * -0.57735)) >= 0.0)
    v15 = (((float)(v6 + (float)(v4 * 0.57735)) >= 0.0) << 7) | 0x40;
  else
    v15 = ((float)(v6 + (float)(v4 * 0.57735)) >= 0.0) << 7;
  if (v9 >= 0.0)
    v15 |= 0x20u;
  if (v10 >= 0.0)
    v15 |= 0x10u;
  if (v12 >= 0.0)
    v15 |= 8u;
  if (v13 >= 0.0)
    v15 |= 4u;
  if ((float)(v14 + (float)(v4 * 0.57735)) >= 0.0)
    v15 |= 2u;
  return v15 | ((float)(v14 + (float)(v4 * -0.57735)) >= 0.0);
}

uint64_t setNode(uint64_t a1, uint64_t a2, unsigned int a3, uint64_t a4, BV4BuildParams *this)
{
  uint64_t v7;
  float32x4_t v8;
  float32x4_t v9;
  float32x4_t v10;
  float v11;
  float32x4_t v12;
  float32x4_t v13;
  float v14;
  float *v15;
  float v16;
  uint64_t v17;
  uint64_t result;

  if (*(_QWORD *)(a4 + 24))
  {
    v7 = a2 + 48 * a3;
    v8 = *(float32x4_t *)(a4 + 4);
    v9 = (float32x4_t)vextq_s8((int8x16_t)v8, vextq_s8((int8x16_t)v8, (int8x16_t)v8, 8uLL), 0xCuLL);
    v9.i32[1] = *(_DWORD *)(a4 + 20);
    v10.i64[0] = vaddq_f32(v8, v9).u64[0];
    v9.i32[2] = *(_DWORD *)a4;
    v10.i64[1] = vsubq_f32(v8, v9).i64[1];
    v11 = (float)(*(float *)a4 + COERCE_FLOAT(*(_QWORD *)(a4 + 12))) * 0.5;
    v12.i64[0] = 0x3F0000003F000000;
    v12.i64[1] = 0x3F0000003F000000;
    v13 = vmulq_f32(v10, v12);
    v14 = (float)(v9.f32[1] - COERCE_FLOAT(HIDWORD(*(_QWORD *)(a4 + 4)))) * 0.5;
    *(float *)(v7 + 32) = v14;
    v15 = (float *)(v7 + 32);
    *(v15 - 5) = v11;
    *((float32x4_t *)v15 - 1) = v13;
    v16 = *((float *)this + 5);
    if (v16 != 0.0)
    {
      v17 = a2 + 48 * a3;
      *(float *)(v17 + 24) = v13.f32[2] + v16;
      *(float *)(v17 + 28) = v13.f32[3] + v16;
      *v15 = v14 + v16;
    }
    ++*(_DWORD *)this;
    result = BV4BuildParams::allocateNode(this);
    *(_QWORD *)(a2 + 48 * a3 + 40) = result;
  }
  else
  {
    setPrimitive(a1, a2, a3, a4, *((float *)this + 5));
    return 0;
  }
  return result;
}

uint64_t _ComputeMaxValues(uint64_t a1, float *a2, float *a3)
{
  uint64_t i;
  float *v7;
  uint64_t result;
  float v9;
  float v10;
  float v11;
  float v12;
  float v13;
  float v14;
  float v15;
  float v16;
  float v17;
  float v18;
  float v19;
  float v20;

  for (i = 0; i != 192; i += 48)
  {
    v7 = (float *)(a1 + i);
    result = *(_QWORD *)(a1 + i + 40);
    if (result != 0xFFFFFFFFLL)
    {
      v10 = v7[3];
      v9 = v7[4];
      v11 = v7[5];
      v12 = v7[6];
      v14 = v7[7];
      v13 = v7[8];
      v15 = vabds_f32(v10, v12);
      if (v15 > *a2)
        *a2 = v15;
      v16 = fabsf(v9 - v14);
      if (v16 > a2[1])
        a2[1] = v16;
      v17 = fabsf(v11 - v13);
      if (v17 > a2[2])
        a2[2] = v17;
      v18 = fabsf(v10 + v12);
      if (v18 > *a3)
        *a3 = v18;
      v19 = fabsf(v9 + v14);
      if (v19 > a3[1])
        a3[1] = v19;
      v20 = fabsf(v11 + v13);
      if (v20 > a3[2])
        a3[2] = v20;
      if ((result & 1) == 0)
        result = _ComputeMaxValues();
    }
  }
  return result;
}

uint64_t _FlattenQ(uint64_t result, unsigned int a2, int *a3, _QWORD *a4, unsigned int *a5, unsigned int *a6, float *a7, float *a8, uint64_t a9, uint64_t a10)
{
  unsigned int v10;
  int64x2_t v11;
  int64x2_t v12;
  __n128 v13;
  int64x2_t v14;
  int8x16_t v15;
  uint64_t v16;
  char v17;
  float v18;
  float v19;
  float v20;
  float v21;
  float v22;
  float v23;
  uint8x8_t v24;
  uint64_t v25;
  uint64_t v26;
  float *v27;
  float v28;
  float v29;
  float v30;
  float v31;
  unsigned int v32;
  float v33;
  float v34;
  unsigned int v35;
  unsigned int v36;
  unsigned int v37;
  uint64_t v38;
  _WORD *v39;
  __int16 *v40;
  __int16 v41;
  float v42;
  float v43;
  float v44;
  float v45;
  __int16 v46;
  float v47;
  BOOL v48;
  uint64_t v50;
  unsigned int v51;
  uint64_t v52;
  _DWORD *v53;
  _QWORD *v54;
  _QWORD *v55;
  int v56;
  int64x2_t v57;
  int64x2_t v58;
  int32x4_t v59;
  uint64_t v60;
  _OWORD *v61;
  unint64_t *v62;
  unsigned int *v63;
  uint64_t v64;
  float *v65;
  float *v66;
  _OWORD v68[2];
  unint64_t v69;
  uint64_t v70;
  uint64_t v71;

  v71 = *MEMORY[0x24BDAC8D0];
  v10 = *a6 + 1;
  *a6 = v10;
  if (v10 > *a5)
    *a5 = v10;
  v11.i64[0] = a4[5];
  v11.i64[1] = a4[11];
  v12.i64[0] = a4[17];
  v12.i64[1] = a4[23];
  v13 = (__n128)xmmword_22611E0A0;
  v14.i64[0] = 0xFFFFFFFFLL;
  v14.i64[1] = 0xFFFFFFFFLL;
  v15 = (int8x16_t)vuzp1q_s32((int32x4_t)vceqq_s64(v11, v14), (int32x4_t)vceqq_s64(v12, v14));
  if ((vmaxv_u16((uint16x4_t)vmovn_s32((int32x4_t)vmvnq_s8(v15))) & 1) != 0)
  {
    v16 = 0;
    v17 = vaddvq_s32((int32x4_t)vbicq_s8((int8x16_t)xmmword_22611E0A0, v15));
    v18 = *a7;
    v19 = a7[1];
    v20 = a7[2];
    v21 = *a8;
    v22 = a8[1];
    v23 = a8[2];
    v24 = (uint8x8_t)vcnt_s8((int8x8_t)(v17 & 0xF));
    v24.i16[0] = vaddlv_u8(v24);
    v25 = v24.u32[0];
    do
    {
      v26 = 0;
      v27 = (float *)&a4[6 * v16];
      v28 = v27[3];
      v29 = v27[4];
      v31 = v27[5];
      v30 = v27[6];
      *(float *)&v32 = v28 - v30;
      v33 = v27[7];
      v34 = v27[8];
      *(float *)&v35 = v29 - v33;
      *(float *)&v36 = v28 + v30;
      *(float *)&v37 = v29 + v33;
      v38 = v16 + a2;
      v39 = (_WORD *)(result + 16 * v38);
      v39[1] = (int)(float)(v18 * *(float *)&v32);
      v39[3] = (int)(float)(v19 * *(float *)&v35);
      v39[5] = (int)(float)(v20 * (float)(v31 - v34));
      *v39 = (int)(float)(v21 * *(float *)&v36);
      v39[2] = (int)(float)(v22 * *(float *)&v37);
      v39[4] = (int)(float)(v23 * (float)(v31 + v34));
      *(_QWORD *)&v68[0] = __PAIR64__(v35, v32);
      *((float *)v68 + 2) = v31 - v34;
      v69 = __PAIR64__(v37, v36);
      *(float *)&v70 = v31 + v34;
      do
      {
        v40 = &v39[2 * v26];
        v41 = v40[1];
        v42 = *(float *)(a9 + 4 * v26);
        v43 = *(float *)(a10 + 4 * v26);
        v44 = *((float *)&v69 + v26);
        v45 = *((float *)v68 + v26);
        v46 = *v40;
LABEL_7:
        v47 = v42 * (float)v41;
        if (v41)
          v48 = v47 <= v45;
        else
          v48 = 1;
        while (v46 != 0x7FFF && (float)(v43 * (float)v46) < v44)
        {
          *v40 = ++v46;
          if (!v48)
          {
LABEL_18:
            v40[1] = --v41;
            goto LABEL_7;
          }
        }
        if (v47 > v45 && v41 != 0)
          goto LABEL_18;
        ++v26;
      }
      while (v26 != 3);
      *(_DWORD *)(result + 16 * v38 + 12) = a4[6 * v16++ + 5];
    }
    while (v16 != v25);
  }
  v50 = 0;
  v51 = 0;
  v69 = -1;
  v70 = -1;
  v52 = result + 16 * a2;
  v53 = a4 + 6;
  memset(v68, 0, sizeof(v68));
  do
  {
    v54 = (_QWORD *)*((_QWORD *)v53 - 1);
    if (v54 == (_QWORD *)0xFFFFFFFFLL)
    {
      v55 = (_QWORD *)(v52 + v50);
      *v55 = 0;
      v55[1] = 0xFFFFFFFF00000000;
    }
    else if ((v54 & 1) == 0)
    {
      v56 = *a3;
      *a3 += 4;
      v57.i64[0] = v54[5];
      v57.i64[1] = v54[11];
      v58.i64[0] = v54[17];
      v58.i64[1] = v54[23];
      v59 = (int32x4_t)vbicq_s8((int8x16_t)xmmword_22611E0A0, (int8x16_t)vuzp1q_s32((int32x4_t)vceqq_s64(v57, v14), (int32x4_t)vceqq_s64(v58, v14)));
      v59.i32[0] = vaddvq_s32(v59);
      *(int8x8_t *)v59.i8 = vcnt_s8(*(int8x8_t *)v59.i8);
      v59.i16[0] = vaddlv_u8(*(uint8x8_t *)v59.i8);
      *((_DWORD *)&v69 + v51) = v56;
      *((_QWORD *)v68 + v51++) = v54;
      *(_DWORD *)(v52 + v50 + 12) = (((v56 << 11) | (2 * v59.i32[0])) - 4) | (8 * *v53);
    }
    v50 += 16;
    v53 += 12;
  }
  while (v50 != 64);
  if (v51)
  {
    v60 = v51;
    v61 = v68;
    v62 = &v69;
    do
    {
      v62 = (unint64_t *)((char *)v62 + 4);
      v61 = (_OWORD *)((char *)v61 + 8);
      v63 = a5;
      v64 = result;
      v65 = a7;
      v66 = a8;
      _FlattenQ(v13);
      a8 = v66;
      a7 = v65;
      result = v64;
      a5 = v63;
      --*a6;
      --v60;
    }
    while (v60);
  }
  return result;
}

BOOL RayMeshColliderCallback::processHit(uint64_t a1, float *a2, float *a3, float *a4, float *a5)
{
  float v5;
  float v6;
  float v7;
  float v8;
  float v9;
  float v10;
  float v11;
  float v12;
  float v13;
  float v14;
  float v15;
  float *v16;
  float *v17;
  float v18;
  float v19;
  float v20;
  float v21;
  float v22;
  float v23;
  float v24;
  float v25;
  float v26;
  __int16 v27;
  float v28;
  float v29;
  int v30;
  int v31;
  float v32;
  float v33;
  float v34;
  float *v35;
  float v36;
  BOOL v37;
  float v38;
  float v39;
  float v40;
  float v41;
  float v42;
  float v43;
  uint64_t v44;
  int v45;
  float v46;
  float v47;
  float v48;
  float v49;
  float v50;
  float v51;
  float v52;
  float v53;
  float v54;
  float v55;
  float v56;
  float v57;
  float v58;
  float v59;
  float v60;
  float v61;
  float v62;
  float v63;
  float v64;
  float v65;
  float v66;
  float v67;
  float v68;
  float v69;
  float v70;
  float v71;
  float v72;
  float v73;
  float v74;
  float v75;
  float v76;
  float v77;
  float v78;
  float v79;
  float v80;
  float v81;
  float v82;
  float v83;
  float v84;
  float v85;
  float v86;
  float v87;
  float v88;
  uint64_t v89;
  uint64_t v90;
  __int128 v92;
  int v93;

  v6 = a2[13];
  v5 = a2[14];
  v7 = *a3;
  v8 = a3[1];
  v9 = a3[2];
  v10 = *a4;
  v11 = a4[1];
  v12 = a4[2];
  v13 = *a5;
  v14 = a5[1];
  v15 = a5[2];
  v92 = *(_OWORD *)a2;
  v93 = *((_DWORD *)a2 + 4);
  v17 = *(float **)(a1 + 32);
  v16 = *(float **)(a1 + 40);
  v18 = *v17;
  v19 = v17[1];
  v20 = v17[2];
  v21 = v16[2];
  v22 = v16[3];
  v23 = (float)(v22 * v22) + -0.5;
  v25 = *v16;
  v24 = v16[1];
  if ((*(_BYTE *)(a1 + 56) & 2) != 0)
  {
    v32 = (float)((float)(v11 - v8) * (float)(v15 - v9)) - (float)((float)(v12 - v9) * (float)(v14 - v8));
    v33 = (float)((float)(v12 - v9) * (float)(v13 - v7)) - (float)((float)(v10 - v7) * (float)(v15 - v9));
    v34 = (float)((float)(v10 - v7) * (float)(v14 - v8)) - (float)((float)(v11 - v8) * (float)(v13 - v7));
    v35 = *(float **)(a1 + 48);
    if (v35)
    {
      v26 = (float)((float)(v33 * v35[1]) + (float)(*v35 * v32)) + (float)(v35[2] * v34);
      v28 = (float)((float)(v33 * v35[4]) + (float)(v35[3] * v32)) + (float)(v35[5] * v34);
      v29 = (float)((float)(v33 * v35[7]) + (float)(v35[6] * v32)) + (float)(v35[8] * v34);
      v36 = (float)(v18 * v19) * v20;
      v37 = v36 < 0.0;
      if (v36 < 0.0)
        v30 = *((_DWORD *)a2 + 14);
      else
        v30 = *((_DWORD *)a2 + 13);
      if (v37)
        v31 = *((_DWORD *)a2 + 13);
      else
        v31 = *((_DWORD *)a2 + 14);
    }
    else
    {
      v38 = v32 + v32;
      v39 = v33 + v33;
      v40 = v34 + v34;
      v41 = (float)((float)(v39 * v24) + (float)(v25 * v38)) + (float)(v21 * v40);
      v26 = (float)((float)(v22 * (float)((float)(v39 * (float)-v21) + (float)(v24 * v40))) + (float)(v38 * v23))
          + (float)(v25 * v41);
      v28 = (float)((float)(v22 * (float)((float)(v40 * (float)-v25) + (float)(v21 * v38))) + (float)(v39 * v23))
          + (float)(v24 * v41);
      v29 = (float)((float)(v22 * (float)((float)(v38 * (float)-v24) + (float)(v25 * v39))) + (float)(v40 * v23))
          + (float)(v21 * v41);
      v30 = *((_DWORD *)a2 + 13);
      v31 = *((_DWORD *)a2 + 14);
    }
    v42 = sqrtf((float)((float)(v28 * v28) + (float)(v26 * v26)) + (float)(v29 * v29));
    if (v42 > 0.0)
    {
      v43 = 1.0 / v42;
      v26 = v26 * v43;
      v28 = v28 * v43;
      v29 = v29 * v43;
    }
    if (*(_BYTE *)(a1 + 72)
      && (float)((float)((float)(v28 * *(float *)(*(_QWORD *)(a1 + 64) + 4)) + (float)(v26 * **(float **)(a1 + 64)))
               + (float)(v29 * *(float *)(*(_QWORD *)(a1 + 64) + 8))) > 0.0)
    {
      v26 = -v26;
      v28 = -v28;
      v29 = -v29;
    }
    v27 = 1035;
  }
  else
  {
    v26 = 0.0;
    v27 = 1033;
    v28 = 0.0;
    v29 = 0.0;
    v30 = *((_DWORD *)a2 + 13);
    v31 = *((_DWORD *)a2 + 14);
  }
  v44 = *(unsigned int *)(a1 + 24);
  v45 = *(_DWORD *)(a1 + 28);
  if ((_DWORD)v44 != v45)
  {
    v46 = (float)(1.0 - v6) - v5;
    v47 = v6 * v11;
    v48 = v5 * v13;
    v49 = v5 * v14;
    v50 = (float)((float)(v46 * v9) + (float)(v6 * v12)) + (float)(v5 * v15);
    v51 = (float)((float)((float)(v46 * v7) + (float)(v6 * v10)) + v48)
        + (float)((float)((float)(v46 * v7) + (float)(v6 * v10)) + v48);
    v52 = (float)((float)((float)(v46 * v8) + v47) + v49) + (float)((float)((float)(v46 * v8) + v47) + v49);
    v53 = v50 + v50;
    v54 = v17[3];
    v55 = v17[4];
    v56 = v17[5];
    v57 = v17[6];
    v58 = (float)(v57 * v57) + -0.5;
    v59 = v57 * (float)((float)(v56 * v51) - (float)(v54 * v53));
    v60 = v57 * (float)((float)(v54 * v52) - (float)(v55 * v51));
    v61 = (float)((float)(v52 * v55) + (float)(v54 * v51)) + (float)(v56 * v53);
    v62 = (float)(v57 * (float)((float)(v55 * v53) - (float)(v56 * v52))) + (float)(v51 * v58);
    v63 = v19 * (float)((float)(v59 + (float)(v52 * v58)) + (float)(v55 * v61));
    v64 = v20 * (float)((float)(v60 + (float)(v53 * v58)) + (float)(v56 * v61));
    v65 = (float)(v18 * (float)(v62 + (float)(v54 * v61))) + (float)(v18 * (float)(v62 + (float)(v54 * v61)));
    v66 = v63 + v63;
    v67 = v64 + v64;
    v68 = -(float)((float)((float)(v55 * v67) - (float)(v56 * v66)) * v57);
    v69 = -(float)((float)((float)(v56 * v65) - (float)(v54 * v67)) * v57);
    v70 = -(float)((float)((float)(v54 * v66) - (float)(v55 * v65)) * v57);
    v71 = (float)((float)(v55 * v66) + (float)(v54 * v65)) + (float)(v56 * v67);
    v72 = (float)((float)(v68 + (float)(v65 * v58)) + (float)(v54 * v71))
        + (float)((float)(v68 + (float)(v65 * v58)) + (float)(v54 * v71));
    v73 = (float)((float)(v69 + (float)(v66 * v58)) + (float)(v55 * v71))
        + (float)((float)(v69 + (float)(v66 * v58)) + (float)(v55 * v71));
    v74 = (float)((float)(v70 + (float)(v67 * v58)) + (float)(v56 * v71))
        + (float)((float)(v70 + (float)(v67 * v58)) + (float)(v56 * v71));
    v75 = v22 * (float)((float)(v24 * v74) - (float)(v21 * v73));
    v76 = v22 * (float)((float)(v21 * v72) - (float)(v25 * v74));
    v77 = v22 * (float)((float)(v25 * v73) - (float)(v24 * v72));
    v78 = (float)((float)(v24 * v73) + (float)(v25 * v72)) + (float)(v21 * v74);
    v79 = v75 + (float)(v72 * v23);
    v80 = v76 + (float)(v73 * v23);
    v81 = v77 + (float)(v74 * v23);
    v82 = a2[12];
    v83 = v79 + (float)(v25 * v78);
    v84 = v80 + (float)(v24 * v78);
    v85 = v16[4];
    v86 = v16[5];
    v87 = v16[6];
    v88 = *(float *)(a1 + 76);
    v89 = *(_QWORD *)(a1 + 16);
    *(_DWORD *)(a1 + 24) = v44 + 1;
    v90 = v89 + (v44 << 6);
    *(_OWORD *)v90 = v92;
    *(_DWORD *)(v90 + 16) = v93;
    *(_WORD *)(v90 + 20) = v27;
    *(float *)(v90 + 24) = v85 + v83;
    *(float *)(v90 + 28) = v86 + v84;
    *(float *)(v90 + 32) = v87 + (float)(v81 + (float)(v21 * v78));
    *(float *)(v90 + 36) = v26;
    *(float *)(v90 + 40) = v28;
    *(float *)(v90 + 44) = v29;
    *(float *)(v90 + 48) = v82 * v88;
    *(_DWORD *)(v90 + 52) = v30;
    *(_DWORD *)(v90 + 56) = v31;
  }
  return (_DWORD)v44 != v45;
}

void RayMeshColliderCallback::~RayMeshColliderCallback(RayMeshColliderCallback *this)
{
  JUMPOUT(0x2276933B8);
}

uint64_t RayRTreeCallback<0,false>::processResults(uint64_t a1, unsigned int a2, uint64_t a3, float *a4)
{
  unint64_t v6;
  BOOL v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unsigned int v17;
  unsigned int v18;
  unsigned int v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  _QWORD *v23;
  _QWORD *v24;
  float v25;
  float v26;
  char v27;
  unint64_t v29;
  uint64_t v30;
  char v31;
  float v32;
  __int128 v33;
  int v34;
  __int16 v35;
  __int128 v36;
  uint64_t v37;
  _BYTE v38[12];
  _DWORD v39[3];
  uint64_t v40;

  v40 = *MEMORY[0x24BDAC8D0];
  v33 = 0uLL;
  v34 = -1;
  v35 = 0;
  v37 = 0;
  v36 = 0uLL;
  *(_QWORD *)v38 = 2139095039;
  *(_DWORD *)&v38[8] = 0;
  if (a2)
  {
    v6 = 0;
    v7 = 0;
    v8 = a1 + 96;
    v29 = a2;
    v30 = a3;
    while (2)
    {
      v31 = v7;
      v9 = *(unsigned int *)(a3 + 4 * v6);
      v10 = v9 >> 5;
      v11 = ((v9 >> 1) & 0xF) + 1;
      v12 = 3 * (v9 >> 5);
      v13 = 4 * v12;
      v14 = 2 * v12;
      do
      {
        v15 = *(_QWORD *)(a1 + 32);
        if (*(_DWORD *)(a1 + 24))
        {
          v16 = v15 + v14;
          v17 = *(unsigned __int16 *)(v15 + v14);
          v18 = *(unsigned __int16 *)(v16 + 2);
          v19 = *(unsigned __int16 *)(v16 + 4);
        }
        else
        {
          v20 = v15 + v13;
          v17 = *(_DWORD *)(v15 + v13);
          v18 = *(_DWORD *)(v20 + 4);
          v19 = *(_DWORD *)(v20 + 8);
        }
        v21 = *(_QWORD *)(a1 + 40);
        v22 = (_QWORD *)(v21 + 12 * v17);
        v23 = (_QWORD *)(v21 + 12 * v18);
        v24 = (_QWORD *)(v21 + 12 * v19);
        v39[0] = v17;
        v39[1] = v18;
        v39[2] = v19;
        v34 = v10;
        v35 = 1;
        if (*(_BYTE *)(a1 + 209))
        {
          v25 = *(float *)v38;
          if (*(float *)v38 < *(float *)(a1 + 144))
          {
            *(_OWORD *)v8 = v33;
            *(_DWORD *)(v8 + 16) = v34;
            *(_WORD *)(a1 + 116) = 1;
            *(_OWORD *)(a1 + 120) = v36;
            *(_QWORD *)(a1 + 136) = v37;
            *(float *)(a1 + 144) = v25;
            *(_QWORD *)(a1 + 148) = *(_QWORD *)&v38[4];
            if (v25 >= *a4)
              v25 = *a4;
            *a4 = v25;
            *(_QWORD *)(a1 + 160) = *v22;
            *(_DWORD *)(a1 + 168) = *(_DWORD *)(v21 + 12 * v17 + 8);
            *(_QWORD *)(a1 + 172) = *v23;
            *(_DWORD *)(a1 + 180) = *(_DWORD *)(v21 + 12 * v18 + 8);
            *(_QWORD *)(a1 + 184) = *v24;
            *(_DWORD *)(a1 + 192) = *(_DWORD *)(v21 + 12 * v19 + 8);
            *(_DWORD *)(a1 + 196) = v17;
            *(_DWORD *)(a1 + 200) = v18;
            *(_DWORD *)(a1 + 204) = v19;
            *(_BYTE *)(a1 + 208) = 1;
          }
        }
        else
        {
          v32 = *a4;
          if (!(***(unsigned int (****)(_QWORD, __int128 *, _QWORD *, _QWORD *, _QWORD *, float *, _DWORD *))(a1 + 16))(*(_QWORD *)(a1 + 16), &v33, v22, v23, v24, &v32, v39))goto LABEL_19;
          v26 = v32;
          if (v32 < *a4)
          {
            *a4 = v32;
            *(float *)(a1 + 88) = v26;
          }
        }
        if (!*(_DWORD *)(*(_QWORD *)(a1 + 16) + 8))
        {
LABEL_19:
          v27 = v31;
          return v27 & 1;
        }
        LODWORD(v10) = v10 + 1;
        v13 += 12;
        v14 += 6;
        --v11;
      }
      while (v11);
      ++v6;
      a3 = v30;
      v7 = v6 >= v29;
      if (v6 != v29)
        continue;
      break;
    }
  }
  v27 = 1;
  return v27 & 1;
}

void RayRTreeCallback<0,false>::~RayRTreeCallback(uint64_t a1)
{
  *(_QWORD *)a1 = off_24ED91BB8;
  *(_QWORD *)(a1 + 8) = &unk_24ED91BE8;
  if (*(_BYTE *)(a1 + 208))
    (***(void (****)(_QWORD, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(a1 + 16))(*(_QWORD *)(a1 + 16), a1 + 96, a1 + 160, a1 + 172, a1 + 184, a1 + 88, a1 + 196);
  JUMPOUT(0x2276933B8);
}

BOOL RayRTreeCallback<0,false>::processResults(uint64_t a1, unsigned int a2, uint64_t a3)
{
  unint64_t v4;
  BOOL v5;
  uint64_t v6;
  float v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unsigned int v16;
  unsigned int v17;
  unsigned int v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  _QWORD *v22;
  _QWORD *v23;
  float v24;
  float v25;
  unint64_t v27;
  uint64_t v28;
  float v29;
  __int128 v30;
  int v31;
  __int16 v32;
  __int128 v33;
  uint64_t v34;
  _BYTE v35[12];
  _DWORD v36[3];
  uint64_t v37;

  v37 = *MEMORY[0x24BDAC8D0];
  v30 = 0uLL;
  v31 = -1;
  v32 = 0;
  v34 = 0;
  v33 = 0uLL;
  *(_QWORD *)v35 = 2139095039;
  *(_DWORD *)&v35[8] = 0;
  if (a2)
  {
    v4 = 0;
    v5 = 0;
    v6 = a1 + 96;
    v7 = 0.0;
    v27 = a2;
    v28 = a3;
LABEL_3:
    v8 = *(unsigned int *)(a3 + 4 * v4);
    v9 = v8 >> 5;
    v10 = ((v8 >> 1) & 0xF) + 1;
    v11 = 3 * (v8 >> 5);
    v12 = 4 * v11;
    v13 = 2 * v11;
    while (1)
    {
      v14 = *(_QWORD *)(a1 + 32);
      if (*(_DWORD *)(a1 + 24))
      {
        v15 = v14 + v13;
        v16 = *(unsigned __int16 *)(v14 + v13);
        v17 = *(unsigned __int16 *)(v15 + 2);
        v18 = *(unsigned __int16 *)(v15 + 4);
      }
      else
      {
        v19 = v14 + v12;
        v16 = *(_DWORD *)(v14 + v12);
        v17 = *(_DWORD *)(v19 + 4);
        v18 = *(_DWORD *)(v19 + 8);
      }
      v20 = *(_QWORD *)(a1 + 40);
      v21 = (_QWORD *)(v20 + 12 * v16);
      v22 = (_QWORD *)(v20 + 12 * v17);
      v23 = (_QWORD *)(v20 + 12 * v18);
      v36[0] = v16;
      v36[1] = v17;
      v36[2] = v18;
      v31 = v9;
      v32 = 1;
      if (*(_BYTE *)(a1 + 209))
      {
        v24 = *(float *)v35;
        if (*(float *)v35 < *(float *)(a1 + 144))
        {
          *(_OWORD *)v6 = v30;
          *(_DWORD *)(v6 + 16) = v31;
          *(_WORD *)(a1 + 116) = 1;
          *(_OWORD *)(a1 + 120) = v33;
          *(_QWORD *)(a1 + 136) = v34;
          *(float *)(a1 + 144) = v24;
          *(_QWORD *)(a1 + 148) = *(_QWORD *)&v35[4];
          if (v24 < v7)
            v7 = v24;
          *(_QWORD *)(a1 + 160) = *v21;
          *(_DWORD *)(a1 + 168) = *(_DWORD *)(v20 + 12 * v16 + 8);
          *(_QWORD *)(a1 + 172) = *v22;
          *(_DWORD *)(a1 + 180) = *(_DWORD *)(v20 + 12 * v17 + 8);
          *(_QWORD *)(a1 + 184) = *v23;
          *(_DWORD *)(a1 + 192) = *(_DWORD *)(v20 + 12 * v18 + 8);
          *(_DWORD *)(a1 + 196) = v16;
          *(_DWORD *)(a1 + 200) = v17;
          *(_DWORD *)(a1 + 204) = v18;
          *(_BYTE *)(a1 + 208) = 1;
        }
      }
      else
      {
        v29 = v7;
        if (!(***(unsigned int (****)(_QWORD, __int128 *, _QWORD *, _QWORD *, _QWORD *, float *, _DWORD *))(a1 + 16))(*(_QWORD *)(a1 + 16), &v30, v21, v22, v23, &v29, v36))return v5;
        v25 = v29;
        if (v29 < v7)
        {
          *(float *)(a1 + 88) = v29;
          v7 = v25;
        }
      }
      if (!*(_DWORD *)(*(_QWORD *)(a1 + 16) + 8))
        break;
      LODWORD(v9) = v9 + 1;
      v12 += 12;
      v13 += 6;
      if (!--v10)
      {
        ++v4;
        a3 = v28;
        v5 = v4 >= v27;
        if (v4 != v27)
          goto LABEL_3;
        return 1;
      }
    }
  }
  else
  {
    return 1;
  }
  return v5;
}

BOOL `non-virtual thunk to'RayRTreeCallback<0,false>::processResults(uint64_t a1, unsigned int a2, uint64_t a3)
{
  return RayRTreeCallback<0,false>::processResults(a1 - 8, a2, a3);
}

uint64_t `non-virtual thunk to'RayRTreeCallback<0,false>::~RayRTreeCallback(uint64_t result)
{
  *(_QWORD *)(result - 8) = off_24ED91BB8;
  *(_QWORD *)result = &unk_24ED91BE8;
  if (*(_BYTE *)(result + 200))
    return (***(uint64_t (****)(_QWORD, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(result + 8))(*(_QWORD *)(result + 8), result + 88, result + 152, result + 164, result + 176, result + 80, result + 188);
  return result;
}

void `non-virtual thunk to'RayRTreeCallback<0,false>::~RayRTreeCallback(uint64_t a1)
{
  RayRTreeCallback<0,false>::~RayRTreeCallback(a1 - 8);
}

uint64_t RayRTreeCallback<1,false>::processResults(uint64_t a1, unsigned int a2, uint64_t a3, float *a4)
{
  unint64_t v6;
  BOOL v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unsigned int v17;
  unsigned int v18;
  unsigned int v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  _QWORD *v23;
  _QWORD *v24;
  float v25;
  float v26;
  char v27;
  unint64_t v29;
  uint64_t v30;
  char v31;
  float v32;
  __int128 v33;
  int v34;
  __int16 v35;
  __int128 v36;
  uint64_t v37;
  _BYTE v38[12];
  _DWORD v39[3];
  uint64_t v40;

  v40 = *MEMORY[0x24BDAC8D0];
  v33 = 0uLL;
  v34 = -1;
  v35 = 0;
  v37 = 0;
  v36 = 0uLL;
  *(_QWORD *)v38 = 2139095039;
  *(_DWORD *)&v38[8] = 0;
  if (a2)
  {
    v6 = 0;
    v7 = 0;
    v8 = a1 + 96;
    v29 = a2;
    v30 = a3;
    while (2)
    {
      v31 = v7;
      v9 = *(unsigned int *)(a3 + 4 * v6);
      v10 = v9 >> 5;
      v11 = ((v9 >> 1) & 0xF) + 1;
      v12 = 3 * (v9 >> 5);
      v13 = 4 * v12;
      v14 = 2 * v12;
      do
      {
        v15 = *(_QWORD *)(a1 + 32);
        if (*(_DWORD *)(a1 + 24))
        {
          v16 = v15 + v14;
          v17 = *(unsigned __int16 *)(v15 + v14);
          v18 = *(unsigned __int16 *)(v16 + 2);
          v19 = *(unsigned __int16 *)(v16 + 4);
        }
        else
        {
          v20 = v15 + v13;
          v17 = *(_DWORD *)(v15 + v13);
          v18 = *(_DWORD *)(v20 + 4);
          v19 = *(_DWORD *)(v20 + 8);
        }
        v21 = *(_QWORD *)(a1 + 40);
        v22 = (_QWORD *)(v21 + 12 * v17);
        v23 = (_QWORD *)(v21 + 12 * v18);
        v24 = (_QWORD *)(v21 + 12 * v19);
        v39[0] = v17;
        v39[1] = v18;
        v39[2] = v19;
        v34 = v10;
        v35 = 1;
        if (*(_BYTE *)(a1 + 209))
        {
          v25 = *(float *)v38;
          if (*(float *)v38 < *(float *)(a1 + 144))
          {
            *(_OWORD *)v8 = v33;
            *(_DWORD *)(v8 + 16) = v34;
            *(_WORD *)(a1 + 116) = 1;
            *(_OWORD *)(a1 + 120) = v36;
            *(_QWORD *)(a1 + 136) = v37;
            *(float *)(a1 + 144) = v25;
            *(_QWORD *)(a1 + 148) = *(_QWORD *)&v38[4];
            if (v25 >= *a4)
              v25 = *a4;
            *a4 = v25;
            *(_QWORD *)(a1 + 160) = *v22;
            *(_DWORD *)(a1 + 168) = *(_DWORD *)(v21 + 12 * v17 + 8);
            *(_QWORD *)(a1 + 172) = *v23;
            *(_DWORD *)(a1 + 180) = *(_DWORD *)(v21 + 12 * v18 + 8);
            *(_QWORD *)(a1 + 184) = *v24;
            *(_DWORD *)(a1 + 192) = *(_DWORD *)(v21 + 12 * v19 + 8);
            *(_DWORD *)(a1 + 196) = v17;
            *(_DWORD *)(a1 + 200) = v18;
            *(_DWORD *)(a1 + 204) = v19;
            *(_BYTE *)(a1 + 208) = 1;
          }
        }
        else
        {
          v32 = *a4;
          if (!(***(unsigned int (****)(_QWORD, __int128 *, _QWORD *, _QWORD *, _QWORD *, float *, _DWORD *))(a1 + 16))(*(_QWORD *)(a1 + 16), &v33, v22, v23, v24, &v32, v39))goto LABEL_19;
          v26 = v32;
          if (v32 < *a4)
          {
            *a4 = v32;
            *(float *)(a1 + 88) = v26;
          }
        }
        if (!*(_DWORD *)(*(_QWORD *)(a1 + 16) + 8))
        {
LABEL_19:
          v27 = v31;
          return v27 & 1;
        }
        LODWORD(v10) = v10 + 1;
        v13 += 12;
        v14 += 6;
        --v11;
      }
      while (v11);
      ++v6;
      a3 = v30;
      v7 = v6 >= v29;
      if (v6 != v29)
        continue;
      break;
    }
  }
  v27 = 1;
  return v27 & 1;
}

void RayRTreeCallback<1,false>::~RayRTreeCallback(uint64_t a1)
{
  *(_QWORD *)a1 = off_24ED91C70;
  *(_QWORD *)(a1 + 8) = &unk_24ED91CA0;
  if (*(_BYTE *)(a1 + 208))
    (***(void (****)(_QWORD, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(a1 + 16))(*(_QWORD *)(a1 + 16), a1 + 96, a1 + 160, a1 + 172, a1 + 184, a1 + 88, a1 + 196);
  JUMPOUT(0x2276933B8);
}

BOOL RayRTreeCallback<1,false>::processResults(uint64_t a1, unsigned int a2, uint64_t a3)
{
  unint64_t v4;
  BOOL v5;
  uint64_t v6;
  float v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unsigned int v16;
  unsigned int v17;
  unsigned int v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  _QWORD *v22;
  _QWORD *v23;
  float v24;
  float v25;
  unint64_t v27;
  uint64_t v28;
  float v29;
  __int128 v30;
  int v31;
  __int16 v32;
  __int128 v33;
  uint64_t v34;
  _BYTE v35[12];
  _DWORD v36[3];
  uint64_t v37;

  v37 = *MEMORY[0x24BDAC8D0];
  v30 = 0uLL;
  v31 = -1;
  v32 = 0;
  v34 = 0;
  v33 = 0uLL;
  *(_QWORD *)v35 = 2139095039;
  *(_DWORD *)&v35[8] = 0;
  if (a2)
  {
    v4 = 0;
    v5 = 0;
    v6 = a1 + 96;
    v7 = 0.0;
    v27 = a2;
    v28 = a3;
LABEL_3:
    v8 = *(unsigned int *)(a3 + 4 * v4);
    v9 = v8 >> 5;
    v10 = ((v8 >> 1) & 0xF) + 1;
    v11 = 3 * (v8 >> 5);
    v12 = 4 * v11;
    v13 = 2 * v11;
    while (1)
    {
      v14 = *(_QWORD *)(a1 + 32);
      if (*(_DWORD *)(a1 + 24))
      {
        v15 = v14 + v13;
        v16 = *(unsigned __int16 *)(v14 + v13);
        v17 = *(unsigned __int16 *)(v15 + 2);
        v18 = *(unsigned __int16 *)(v15 + 4);
      }
      else
      {
        v19 = v14 + v12;
        v16 = *(_DWORD *)(v14 + v12);
        v17 = *(_DWORD *)(v19 + 4);
        v18 = *(_DWORD *)(v19 + 8);
      }
      v20 = *(_QWORD *)(a1 + 40);
      v21 = (_QWORD *)(v20 + 12 * v16);
      v22 = (_QWORD *)(v20 + 12 * v17);
      v23 = (_QWORD *)(v20 + 12 * v18);
      v36[0] = v16;
      v36[1] = v17;
      v36[2] = v18;
      v31 = v9;
      v32 = 1;
      if (*(_BYTE *)(a1 + 209))
      {
        v24 = *(float *)v35;
        if (*(float *)v35 < *(float *)(a1 + 144))
        {
          *(_OWORD *)v6 = v30;
          *(_DWORD *)(v6 + 16) = v31;
          *(_WORD *)(a1 + 116) = 1;
          *(_OWORD *)(a1 + 120) = v33;
          *(_QWORD *)(a1 + 136) = v34;
          *(float *)(a1 + 144) = v24;
          *(_QWORD *)(a1 + 148) = *(_QWORD *)&v35[4];
          if (v24 < v7)
            v7 = v24;
          *(_QWORD *)(a1 + 160) = *v21;
          *(_DWORD *)(a1 + 168) = *(_DWORD *)(v20 + 12 * v16 + 8);
          *(_QWORD *)(a1 + 172) = *v22;
          *(_DWORD *)(a1 + 180) = *(_DWORD *)(v20 + 12 * v17 + 8);
          *(_QWORD *)(a1 + 184) = *v23;
          *(_DWORD *)(a1 + 192) = *(_DWORD *)(v20 + 12 * v18 + 8);
          *(_DWORD *)(a1 + 196) = v16;
          *(_DWORD *)(a1 + 200) = v17;
          *(_DWORD *)(a1 + 204) = v18;
          *(_BYTE *)(a1 + 208) = 1;
        }
      }
      else
      {
        v29 = v7;
        if (!(***(unsigned int (****)(_QWORD, __int128 *, _QWORD *, _QWORD *, _QWORD *, float *, _DWORD *))(a1 + 16))(*(_QWORD *)(a1 + 16), &v30, v21, v22, v23, &v29, v36))return v5;
        v25 = v29;
        if (v29 < v7)
        {
          *(float *)(a1 + 88) = v29;
          v7 = v25;
        }
      }
      if (!*(_DWORD *)(*(_QWORD *)(a1 + 16) + 8))
        break;
      LODWORD(v9) = v9 + 1;
      v12 += 12;
      v13 += 6;
      if (!--v10)
      {
        ++v4;
        a3 = v28;
        v5 = v4 >= v27;
        if (v4 != v27)
          goto LABEL_3;
        return 1;
      }
    }
  }
  else
  {
    return 1;
  }
  return v5;
}

BOOL `non-virtual thunk to'RayRTreeCallback<1,false>::processResults(uint64_t a1, unsigned int a2, uint64_t a3)
{
  return RayRTreeCallback<1,false>::processResults(a1 - 8, a2, a3);
}

uint64_t `non-virtual thunk to'RayRTreeCallback<1,false>::~RayRTreeCallback(uint64_t result)
{
  *(_QWORD *)(result - 8) = off_24ED91C70;
  *(_QWORD *)result = &unk_24ED91CA0;
  if (*(_BYTE *)(result + 200))
    return (***(uint64_t (****)(_QWORD, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(result + 8))(*(_QWORD *)(result + 8), result + 88, result + 152, result + 164, result + 176, result + 80, result + 188);
  return result;
}

void `non-virtual thunk to'RayRTreeCallback<1,false>::~RayRTreeCallback(uint64_t a1)
{
  RayRTreeCallback<1,false>::~RayRTreeCallback(a1 - 8);
}

BOOL RayRTreeCallback<0,true>::processResults(uint64_t a1, unsigned int a2, uint64_t a3, float *a4)
{
  uint64_t v6;
  uint64_t v7;
  BOOL v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unsigned int v18;
  unsigned int v19;
  unsigned int v20;
  uint64_t v21;
  uint64_t v22;
  float *v23;
  float *v24;
  float *v25;
  float v26;
  float v27;
  float v28;
  float v29;
  float v30;
  float v31;
  float v32;
  float v33;
  float v34;
  float v35;
  float v36;
  float v37;
  float v38;
  float v39;
  float v40;
  float v41;
  float v42;
  float v43;
  float v44;
  float v45;
  float v46;
  float v47;
  float v48;
  float v49;
  BOOL v50;
  float v51;
  float v52;
  float v53;
  float v54;
  BOOL v55;
  float v57;
  float v58;
  float v59;
  float v60;
  float v61;
  float v62;
  float v63;
  BOOL v64;
  float v65;
  float v66;
  float v67;
  float v68;
  BOOL v69;
  uint64_t v72;
  unint64_t v73;
  float v75;
  __int128 v76;
  int v77;
  __int16 v78;
  __int128 v79;
  uint64_t v80;
  float v81;
  float v82[4];
  unsigned int v83;
  unsigned int v84;
  unsigned int v85;
  uint64_t v86;

  v86 = *MEMORY[0x24BDAC8D0];
  v76 = 0uLL;
  v77 = -1;
  v78 = 0;
  v80 = 0;
  v79 = 0uLL;
  if (!a2)
    return 1;
  v6 = a3;
  v7 = 0;
  v8 = 0;
  v9 = a2;
  v72 = a1 + 96;
  v73 = a2;
  do
  {
    v10 = *(unsigned int *)(v6 + 4 * v7);
    v11 = v10 >> 5;
    v12 = ((v10 >> 1) & 0xF) + 1;
    v13 = 3 * (v10 >> 5);
    v14 = 4 * v13;
    v15 = 2 * v13;
    do
    {
      v16 = *(_QWORD *)(a1 + 32);
      if (*(_DWORD *)(a1 + 24))
      {
        v17 = v16 + v15;
        v18 = *(unsigned __int16 *)(v16 + v15);
        v19 = *(unsigned __int16 *)(v17 + 2);
        v20 = *(unsigned __int16 *)(v17 + 4);
      }
      else
      {
        v21 = v16 + v14;
        v18 = *(_DWORD *)(v16 + v14);
        v19 = *(_DWORD *)(v21 + 4);
        v20 = *(_DWORD *)(v21 + 8);
      }
      v22 = *(_QWORD *)(a1 + 40);
      v23 = (float *)(v22 + 12 * v18);
      v24 = (float *)(v22 + 12 * v19);
      v25 = (float *)(v22 + 12 * v20);
      v83 = v18;
      v84 = v19;
      v85 = v20;
      v26 = *(float *)(a1 + 84);
      v28 = *v23;
      v27 = v23[1];
      v29 = *v24 - *v23;
      v30 = v24[1] - v27;
      v31 = v23[2];
      v32 = v24[2] - v31;
      v33 = *v25 - *v23;
      v34 = v25[1] - v27;
      v35 = v25[2] - v31;
      v37 = *(float *)(a1 + 72);
      v36 = *(float *)(a1 + 76);
      v38 = *(float *)(a1 + 68);
      v39 = (float)(v37 * v35) - (float)(v36 * v34);
      v40 = (float)(v36 * v33) - (float)(v38 * v35);
      v41 = (float)(v38 * v34) - (float)(v37 * v33);
      v42 = (float)((float)(v30 * v40) + (float)(v29 * v39)) + (float)(v32 * v41);
      if (*(_BYTE *)(a1 + 80))
      {
        if (fabsf(v42) < 1.4211e-14)
          goto LABEL_46;
        v43 = *(float *)(a1 + 56) - v28;
        v44 = 1.0 / v42;
        v45 = *(float *)(a1 + 60) - v27;
        v46 = *(float *)(a1 + 64) - v31;
        v47 = v44 * (float)((float)((float)(v40 * v45) + (float)(v43 * v39)) + (float)(v46 * v41));
        v48 = -v26;
        v49 = v26 + 1.0;
        v50 = v47 >= (float)-v26 && v47 <= v49;
        v51 = (float)(v45 * v32) - (float)(v46 * v30);
        v52 = (float)(v46 * v29) - (float)(v43 * v32);
        v53 = (float)(v43 * v30) - (float)(v45 * v29);
        v54 = v44 * (float)((float)((float)(v37 * v52) + (float)(v38 * v51)) + (float)(v36 * v53));
        v55 = !v50 || v54 < v48;
        if (v55 || (float)(v47 + v54) > v49)
          goto LABEL_46;
        v57 = v44 * (float)((float)((float)(v34 * v52) + (float)(v33 * v51)) + (float)(v35 * v53));
        v81 = v57;
        v82[0] = v47;
      }
      else
      {
        if (v42 < 1.4211e-14)
          goto LABEL_46;
        v58 = *(float *)(a1 + 56) - v28;
        v59 = *(float *)(a1 + 60) - v27;
        v60 = *(float *)(a1 + 64) - v31;
        v61 = (float)((float)(v40 * v59) + (float)(v58 * v39)) + (float)(v60 * v41);
        v62 = -(float)(v26 * v42);
        v63 = v42 + (float)(v26 * v42);
        v64 = v61 >= v62 && v61 <= v63;
        v65 = (float)(v59 * v32) - (float)(v60 * v30);
        v66 = (float)(v60 * v29) - (float)(v58 * v32);
        v67 = (float)(v58 * v30) - (float)(v59 * v29);
        v68 = (float)((float)(v37 * v66) + (float)(v38 * v65)) + (float)(v36 * v67);
        v69 = !v64 || v68 < v62;
        if (v69 || (float)(v61 + v68) > v63)
          goto LABEL_46;
        v57 = (float)(1.0 / v42) * (float)((float)((float)(v34 * v66) + (float)(v33 * v65)) + (float)(v35 * v67));
        v81 = v57;
        v82[0] = (float)(1.0 / v42) * v61;
        v54 = (float)(1.0 / v42) * v68;
      }
      v82[1] = v54;
      if (v57 >= 0.0 && v57 <= *(float *)(a1 + 88))
      {
        v77 = v11;
        v78 = 1;
        if (*(_BYTE *)(a1 + 209))
        {
          if (v57 < *(float *)(a1 + 144))
          {
            *(_OWORD *)v72 = v76;
            *(_DWORD *)(v72 + 16) = v77;
            *(_WORD *)(a1 + 116) = 1;
            *(_OWORD *)(a1 + 120) = v79;
            *(_QWORD *)(a1 + 136) = v80;
            *(float *)(a1 + 144) = v57;
            *(_QWORD *)(a1 + 148) = *(_QWORD *)v82;
            if (v57 >= *a4)
              v57 = *a4;
            *a4 = v57;
            *(_QWORD *)(a1 + 160) = *(_QWORD *)v23;
            *(float *)(a1 + 168) = v23[2];
            *(_QWORD *)(a1 + 172) = *(_QWORD *)v24;
            *(float *)(a1 + 180) = v24[2];
            *(_QWORD *)(a1 + 184) = *(_QWORD *)v25;
            *(float *)(a1 + 192) = v25[2];
            *(_DWORD *)(a1 + 196) = v18;
            *(_DWORD *)(a1 + 200) = v19;
            *(_DWORD *)(a1 + 204) = v20;
            *(_BYTE *)(a1 + 208) = 1;
          }
        }
        else
        {
          v75 = *a4;
          if (!(***(unsigned int (****)(_QWORD, __int128 *))(a1 + 16))(*(_QWORD *)(a1 + 16), &v76))
            return v8;
          if (v75 < *a4)
          {
            *a4 = v75;
            *(float *)(a1 + 88) = v75;
          }
          v9 = v73;
          v6 = a3;
        }
        if (!*(_DWORD *)(*(_QWORD *)(a1 + 16) + 8))
          return v8;
      }
LABEL_46:
      LODWORD(v11) = v11 + 1;
      v14 += 12;
      v15 += 6;
      --v12;
    }
    while (v12);
    v8 = ++v7 >= v9;
  }
  while (v7 != v9);
  return 1;
}

void RayRTreeCallback<0,true>::~RayRTreeCallback(uint64_t a1)
{
  *(_QWORD *)a1 = off_24ED91D08;
  *(_QWORD *)(a1 + 8) = &unk_24ED91D38;
  if (*(_BYTE *)(a1 + 208))
    (***(void (****)(_QWORD, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(a1 + 16))(*(_QWORD *)(a1 + 16), a1 + 96, a1 + 160, a1 + 172, a1 + 184, a1 + 88, a1 + 196);
  JUMPOUT(0x2276933B8);
}

BOOL RayRTreeCallback<0,true>::processResults(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v5;
  _BOOL4 v6;
  float v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unsigned int v17;
  unsigned int v18;
  unsigned int v19;
  uint64_t v20;
  uint64_t v21;
  float *v22;
  float *v23;
  float *v24;
  float v25;
  float v26;
  float v27;
  float v28;
  float v29;
  float v30;
  float v31;
  float v32;
  float v33;
  float v34;
  float v35;
  float v36;
  float v37;
  float v38;
  float v39;
  float v40;
  float v41;
  float v42;
  float v43;
  float v44;
  float v45;
  float v46;
  float v47;
  float v48;
  BOOL v49;
  float v50;
  float v51;
  float v52;
  float v53;
  BOOL v54;
  float v56;
  float v57;
  float v58;
  float v59;
  float v60;
  float v61;
  float v62;
  BOOL v63;
  float v64;
  float v65;
  float v66;
  float v67;
  BOOL v68;
  uint64_t v71;
  _BOOL4 v72;
  __int128 v73;
  int v74;
  __int16 v75;
  __int128 v76;
  uint64_t v77;
  float v78;
  float v79[4];
  unsigned int v80;
  unsigned int v81;
  unsigned int v82;
  uint64_t v83;

  v83 = *MEMORY[0x24BDAC8D0];
  v73 = 0uLL;
  v74 = -1;
  v75 = 0;
  v77 = 0;
  v76 = 0uLL;
  if (a2)
  {
    v5 = 0;
    v6 = 0;
    v71 = a1 + 96;
    v7 = 0.0;
    v8 = a2;
LABEL_3:
    v9 = *(unsigned int *)(a3 + 4 * v5);
    v10 = v9 >> 5;
    v11 = ((v9 >> 1) & 0xF) + 1;
    v12 = 3 * (v9 >> 5);
    v13 = 4 * v12;
    v14 = 2 * v12;
    while (1)
    {
      v15 = *(_QWORD *)(a1 + 32);
      if (*(_DWORD *)(a1 + 24))
      {
        v16 = v15 + v14;
        v17 = *(unsigned __int16 *)(v15 + v14);
        v18 = *(unsigned __int16 *)(v16 + 2);
        v19 = *(unsigned __int16 *)(v16 + 4);
      }
      else
      {
        v20 = v15 + v13;
        v17 = *(_DWORD *)(v15 + v13);
        v18 = *(_DWORD *)(v20 + 4);
        v19 = *(_DWORD *)(v20 + 8);
      }
      v21 = *(_QWORD *)(a1 + 40);
      v22 = (float *)(v21 + 12 * v17);
      v23 = (float *)(v21 + 12 * v18);
      v24 = (float *)(v21 + 12 * v19);
      v80 = v17;
      v81 = v18;
      v82 = v19;
      v25 = *(float *)(a1 + 84);
      v27 = *v22;
      v26 = v22[1];
      v28 = *v23 - *v22;
      v29 = v23[1] - v26;
      v30 = v22[2];
      v31 = v23[2] - v30;
      v32 = *v24 - *v22;
      v33 = v24[1] - v26;
      v34 = v24[2] - v30;
      v36 = *(float *)(a1 + 72);
      v35 = *(float *)(a1 + 76);
      v37 = *(float *)(a1 + 68);
      v38 = (float)(v36 * v34) - (float)(v35 * v33);
      v39 = (float)(v35 * v32) - (float)(v37 * v34);
      v40 = (float)(v37 * v33) - (float)(v36 * v32);
      v41 = (float)((float)(v29 * v39) + (float)(v28 * v38)) + (float)(v31 * v40);
      if (*(_BYTE *)(a1 + 80))
      {
        if (fabsf(v41) >= 1.4211e-14)
        {
          v42 = *(float *)(a1 + 56) - v27;
          v43 = 1.0 / v41;
          v44 = *(float *)(a1 + 60) - v26;
          v45 = *(float *)(a1 + 64) - v30;
          v46 = v43 * (float)((float)((float)(v39 * v44) + (float)(v42 * v38)) + (float)(v45 * v40));
          v47 = -v25;
          v48 = v25 + 1.0;
          v49 = v46 >= (float)-v25 && v46 <= v48;
          v50 = (float)(v44 * v31) - (float)(v45 * v29);
          v51 = (float)(v45 * v28) - (float)(v42 * v31);
          v52 = (float)(v42 * v29) - (float)(v44 * v28);
          v53 = v43 * (float)((float)((float)(v36 * v51) + (float)(v37 * v50)) + (float)(v35 * v52));
          v54 = !v49 || v53 < v47;
          if (!v54 && (float)(v46 + v53) <= v48)
          {
            v56 = v43 * (float)((float)((float)(v33 * v51) + (float)(v32 * v50)) + (float)(v34 * v52));
            v78 = v56;
            v79[0] = v46;
LABEL_34:
            v79[1] = v53;
            if (v56 >= 0.0 && v56 <= *(float *)(a1 + 88))
            {
              v74 = v10;
              v75 = 1;
              if (*(_BYTE *)(a1 + 209))
              {
                if (v56 < *(float *)(a1 + 144))
                {
                  *(_OWORD *)v71 = v73;
                  *(_DWORD *)(v71 + 16) = v74;
                  *(_WORD *)(a1 + 116) = 1;
                  *(_OWORD *)(a1 + 120) = v76;
                  *(_QWORD *)(a1 + 136) = v77;
                  *(float *)(a1 + 144) = v56;
                  *(_QWORD *)(a1 + 148) = *(_QWORD *)v79;
                  if (v56 < v7)
                    v7 = v56;
                  *(_QWORD *)(a1 + 160) = *(_QWORD *)v22;
                  *(float *)(a1 + 168) = v22[2];
                  *(_QWORD *)(a1 + 172) = *(_QWORD *)v23;
                  *(float *)(a1 + 180) = v23[2];
                  *(_QWORD *)(a1 + 184) = *(_QWORD *)v24;
                  *(float *)(a1 + 192) = v24[2];
                  *(_DWORD *)(a1 + 196) = v17;
                  *(_DWORD *)(a1 + 200) = v18;
                  *(_DWORD *)(a1 + 204) = v19;
                  *(_BYTE *)(a1 + 208) = 1;
                }
              }
              else
              {
                v72 = v6;
                if (!(***(unsigned int (****)(_QWORD, __int128 *))(a1 + 16))(*(_QWORD *)(a1 + 16), &v73))
                {
                  LOBYTE(v6) = v72;
                  return v6;
                }
                v6 = v72;
              }
              if (!*(_DWORD *)(*(_QWORD *)(a1 + 16) + 8))
                return v6;
            }
          }
        }
      }
      else if (v41 >= 1.4211e-14)
      {
        v57 = *(float *)(a1 + 56) - v27;
        v58 = *(float *)(a1 + 60) - v26;
        v59 = *(float *)(a1 + 64) - v30;
        v60 = (float)((float)(v39 * v58) + (float)(v57 * v38)) + (float)(v59 * v40);
        v61 = -(float)(v25 * v41);
        v62 = v41 + (float)(v25 * v41);
        v63 = v60 >= v61 && v60 <= v62;
        v64 = (float)(v58 * v31) - (float)(v59 * v29);
        v65 = (float)(v59 * v28) - (float)(v57 * v31);
        v66 = (float)(v57 * v29) - (float)(v58 * v28);
        v67 = (float)((float)(v36 * v65) + (float)(v37 * v64)) + (float)(v35 * v66);
        v68 = !v63 || v67 < v61;
        if (!v68 && (float)(v60 + v67) <= v62)
        {
          v56 = (float)(1.0 / v41) * (float)((float)((float)(v33 * v65) + (float)(v32 * v64)) + (float)(v34 * v66));
          v78 = v56;
          v79[0] = (float)(1.0 / v41) * v60;
          v53 = (float)(1.0 / v41) * v67;
          goto LABEL_34;
        }
      }
      LODWORD(v10) = v10 + 1;
      v13 += 12;
      v14 += 6;
      if (!--v11)
      {
        v6 = ++v5 >= v8;
        if (v5 != v8)
          goto LABEL_3;
        break;
      }
    }
  }
  LOBYTE(v6) = 1;
  return v6;
}

BOOL `non-virtual thunk to'RayRTreeCallback<0,true>::processResults(uint64_t a1, unsigned int a2, uint64_t a3)
{
  return RayRTreeCallback<0,true>::processResults(a1 - 8, a2, a3);
}

uint64_t `non-virtual thunk to'RayRTreeCallback<0,true>::~RayRTreeCallback(uint64_t result)
{
  *(_QWORD *)(result - 8) = off_24ED91D08;
  *(_QWORD *)result = &unk_24ED91D38;
  if (*(_BYTE *)(result + 200))
    return (***(uint64_t (****)(_QWORD, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(result + 8))(*(_QWORD *)(result + 8), result + 88, result + 152, result + 164, result + 176, result + 80, result + 188);
  return result;
}

void `non-virtual thunk to'RayRTreeCallback<0,true>::~RayRTreeCallback(uint64_t a1)
{
  RayRTreeCallback<0,true>::~RayRTreeCallback(a1 - 8);
}

BOOL RayRTreeCallback<1,true>::processResults(uint64_t a1, unsigned int a2, uint64_t a3, float *a4)
{
  unint64_t v6;
  BOOL v7;
  uint64_t v8;
  float32x4_t v9;
  int8x16_t v10;
  int8x16_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unsigned __int16 *v17;
  unsigned int v18;
  unsigned int v19;
  unsigned int v20;
  unsigned int *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  float32x4_t v26;
  float32x4_t v27;
  float32x4_t v28;
  float32x4_t v29;
  float32x4_t v30;
  float v31;
  float v32;
  float32x4_t v33;
  float32x4_t v34;
  float32x4_t v35;
  float32x4_t v36;
  int v37;
  float32x4_t v38;
  float32x4_t v39;
  float32x4_t v40;
  float32x4_t v41;
  int32x4_t v42;
  int32x4_t v43;
  unint64_t v45;
  uint64_t v46;
  float v47;
  __int128 v48;
  int v49;
  __int16 v50;
  __int128 v51;
  uint64_t v52;
  int v53;
  uint64_t v54;
  unsigned int v55;
  unsigned int v56;
  unsigned int v57;
  uint64_t v58;

  v58 = *MEMORY[0x24BDAC8D0];
  v48 = 0uLL;
  v49 = -1;
  v50 = 0;
  v52 = 0;
  v51 = 0uLL;
  if (a2)
  {
    v6 = 0;
    v7 = 0;
    v8 = a1 + 96;
    v9 = (float32x4_t)xmmword_2261A9F50;
    v10 = (int8x16_t)xmmword_226168830;
    v11 = (int8x16_t)xmmword_2260EDC60;
    v45 = a2;
    v46 = a3;
LABEL_3:
    v12 = 0;
    v13 = *(unsigned int *)(a3 + 4 * v6);
    v14 = v13 >> 5;
    v15 = ((v13 >> 1) & 0xF) + 1;
    while (1)
    {
      v16 = *(_QWORD *)(a1 + 32);
      if (*(_DWORD *)(a1 + 24))
      {
        v17 = (unsigned __int16 *)(v16 + 6 * (v12 + v14));
        v18 = *v17;
        v19 = v17[1];
        v20 = v17[2];
      }
      else
      {
        v21 = (unsigned int *)(v16 + 12 * (v12 + v14));
        v18 = *v21;
        v19 = v21[1];
        v20 = v21[2];
      }
      v22 = *(_QWORD *)(a1 + 40);
      v23 = v22 + 12 * v18;
      v24 = v22 + 12 * v19;
      v25 = v22 + 12 * v20;
      v55 = v18;
      v56 = v19;
      v57 = v20;
      v26.i64[0] = *(_QWORD *)v23;
      v26.i64[1] = *(unsigned int *)(v23 + 8);
      v27.i64[0] = *(_QWORD *)v24;
      v27.i64[1] = *(unsigned int *)(v24 + 8);
      v28.i64[0] = *(_QWORD *)v25;
      v28.i64[1] = *(unsigned int *)(v25 + 8);
      v29 = vminq_f32(vminq_f32(v26, v27), v28);
      v30 = vmaxq_f32(v26, v27);
      v31 = *(float *)(a1 + 88);
      v32 = v31 >= 1.0 ? v31 * 0.001 : 0.001;
      v33 = *(float32x4_t *)(a1 + 224);
      v34 = vsubq_f32(v29, v33);
      v29.f32[0] = v31 + v32;
      v35 = vmulq_f32(vmaxq_f32(vabsq_f32(*(float32x4_t *)(a1 + 256)), v9), (float32x4_t)vbslq_s8((int8x16_t)vcgezq_f32(*(float32x4_t *)(a1 + 256)), v11, v10));
      v36 = vrecpeq_f32(v35);
      v37 = 4;
      do
      {
        v36 = vmulq_f32(v36, vrecpsq_f32(v36, v35));
        --v37;
      }
      while (v37);
      v38 = vaddq_f32(vmaxq_f32(v30, v28), v33);
      v36.i32[3] = 0;
      v39 = *(float32x4_t *)(a1 + 240);
      v40 = vmulq_f32(v36, vsubq_f32(v34, v39));
      v41 = vmulq_f32(v36, vsubq_f32(v38, v39));
      v42 = (int32x4_t)vminq_f32(v41, v40);
      v43 = (int32x4_t)vmaxq_f32(v41, v40);
      if ((vcgt_f32(vmin_f32(vmin_f32((float32x2_t)vdup_lane_s32(*(int32x2_t *)v43.i8, 0), vmin_f32((float32x2_t)vdup_lane_s32(*(int32x2_t *)v43.i8, 1), (float32x2_t)vdup_laneq_s32(v43, 2))), (float32x2_t)vdup_lane_s32(*(int32x2_t *)v29.f32, 0)), vmax_f32(vmax_f32((float32x2_t)vdup_lane_s32(*(int32x2_t *)v42.i8, 0), vmax_f32((float32x2_t)vdup_lane_s32(*(int32x2_t *)v42.i8, 1), (float32x2_t)vdup_laneq_s32(v42, 2))), 0)).u32[0] & 1) != 0)
      {
        v53 = *(_DWORD *)(a1 + 88);
        v54 = 0;
        v49 = v12 + v14;
        v50 = 1;
        if (*(_BYTE *)(a1 + 209))
        {
          if (v31 < *(float *)(a1 + 144))
          {
            *(_OWORD *)v8 = v48;
            *(_DWORD *)(v8 + 16) = v49;
            *(_WORD *)(a1 + 116) = 1;
            *(_OWORD *)(a1 + 120) = v51;
            *(_QWORD *)(a1 + 136) = v52;
            *(float *)(a1 + 144) = v31;
            *(_QWORD *)(a1 + 148) = v54;
            if (v31 >= *a4)
              v31 = *a4;
            *a4 = v31;
            *(_QWORD *)(a1 + 160) = *(_QWORD *)v23;
            *(_DWORD *)(a1 + 168) = *(_DWORD *)(v23 + 8);
            *(_QWORD *)(a1 + 172) = *(_QWORD *)v24;
            *(_DWORD *)(a1 + 180) = *(_DWORD *)(v24 + 8);
            *(_QWORD *)(a1 + 184) = *(_QWORD *)v25;
            *(_DWORD *)(a1 + 192) = *(_DWORD *)(v25 + 8);
            *(_DWORD *)(a1 + 196) = v18;
            *(_DWORD *)(a1 + 200) = v19;
            *(_DWORD *)(a1 + 204) = v20;
            *(_BYTE *)(a1 + 208) = 1;
          }
        }
        else
        {
          v47 = *a4;
          if (!(***(unsigned int (****)(_QWORD, __int128 *))(a1 + 16))(*(_QWORD *)(a1 + 16), &v48))
            return v7;
          if (v47 < *a4)
          {
            *a4 = v47;
            *(float *)(a1 + 88) = v47;
          }
          v10 = (int8x16_t)xmmword_226168830;
          v9 = (float32x4_t)xmmword_2261A9F50;
          v11 = (int8x16_t)xmmword_2260EDC60;
        }
        if (!*(_DWORD *)(*(_QWORD *)(a1 + 16) + 8))
          break;
      }
      if (++v12 == v15)
      {
        ++v6;
        a3 = v46;
        v7 = v6 >= v45;
        if (v6 != v45)
          goto LABEL_3;
        return 1;
      }
    }
  }
  else
  {
    return 1;
  }
  return v7;
}

void RayRTreeCallback<1,true>::~RayRTreeCallback(uint64_t a1)
{
  *(_QWORD *)a1 = off_24ED91DA0;
  *(_QWORD *)(a1 + 8) = &unk_24ED91DD0;
  if (*(_BYTE *)(a1 + 208))
    (***(void (****)(_QWORD, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(a1 + 16))(*(_QWORD *)(a1 + 16), a1 + 96, a1 + 160, a1 + 172, a1 + 184, a1 + 88, a1 + 196);
  JUMPOUT(0x2276933B8);
}

BOOL RayRTreeCallback<1,true>::processResults(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v5;
  BOOL v6;
  uint64_t v7;
  float v8;
  float32x4_t v9;
  int8x16_t v10;
  int8x16_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unsigned __int16 *v17;
  unsigned int v18;
  unsigned int v19;
  unsigned int v20;
  unsigned int *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  float32x4_t v26;
  float32x4_t v27;
  float32x4_t v28;
  float32x4_t v29;
  float32x4_t v30;
  float v31;
  float v32;
  float32x4_t v33;
  float32x4_t v34;
  float32x4_t v35;
  float32x4_t v36;
  int v37;
  float32x4_t v38;
  float32x4_t v39;
  float32x4_t v40;
  float32x4_t v41;
  int32x4_t v42;
  int32x4_t v43;
  unint64_t v45;
  __int128 v46;
  int v47;
  __int16 v48;
  __int128 v49;
  uint64_t v50;
  int v51;
  uint64_t v52;
  unsigned int v53;
  unsigned int v54;
  unsigned int v55;
  uint64_t v56;

  v56 = *MEMORY[0x24BDAC8D0];
  v46 = 0uLL;
  v47 = -1;
  v48 = 0;
  v50 = 0;
  v49 = 0uLL;
  if (a2)
  {
    v5 = 0;
    v6 = 0;
    v7 = a1 + 96;
    v8 = 0.0;
    v9 = (float32x4_t)xmmword_2261A9F50;
    v10 = (int8x16_t)xmmword_226168830;
    v11 = (int8x16_t)xmmword_2260EDC60;
    v45 = a2;
LABEL_3:
    v12 = 0;
    v13 = *(unsigned int *)(a3 + 4 * v5);
    v14 = v13 >> 5;
    v15 = ((v13 >> 1) & 0xF) + 1;
    while (1)
    {
      v16 = *(_QWORD *)(a1 + 32);
      if (*(_DWORD *)(a1 + 24))
      {
        v17 = (unsigned __int16 *)(v16 + 6 * (v12 + v14));
        v18 = *v17;
        v19 = v17[1];
        v20 = v17[2];
      }
      else
      {
        v21 = (unsigned int *)(v16 + 12 * (v12 + v14));
        v18 = *v21;
        v19 = v21[1];
        v20 = v21[2];
      }
      v22 = *(_QWORD *)(a1 + 40);
      v23 = v22 + 12 * v18;
      v24 = v22 + 12 * v19;
      v25 = v22 + 12 * v20;
      v53 = v18;
      v54 = v19;
      v55 = v20;
      v26.i64[0] = *(_QWORD *)v23;
      v26.i64[1] = *(unsigned int *)(v23 + 8);
      v27.i64[0] = *(_QWORD *)v24;
      v27.i64[1] = *(unsigned int *)(v24 + 8);
      v28.i64[0] = *(_QWORD *)v25;
      v28.i64[1] = *(unsigned int *)(v25 + 8);
      v29 = vminq_f32(vminq_f32(v26, v27), v28);
      v30 = vmaxq_f32(v26, v27);
      v31 = *(float *)(a1 + 88);
      v32 = v31 >= 1.0 ? v31 * 0.001 : 0.001;
      v33 = *(float32x4_t *)(a1 + 224);
      v34 = vsubq_f32(v29, v33);
      v29.f32[0] = v31 + v32;
      v35 = vmulq_f32(vmaxq_f32(vabsq_f32(*(float32x4_t *)(a1 + 256)), v9), (float32x4_t)vbslq_s8((int8x16_t)vcgezq_f32(*(float32x4_t *)(a1 + 256)), v11, v10));
      v36 = vrecpeq_f32(v35);
      v37 = 4;
      do
      {
        v36 = vmulq_f32(v36, vrecpsq_f32(v36, v35));
        --v37;
      }
      while (v37);
      v38 = vaddq_f32(vmaxq_f32(v30, v28), v33);
      v36.i32[3] = 0;
      v39 = *(float32x4_t *)(a1 + 240);
      v40 = vmulq_f32(v36, vsubq_f32(v34, v39));
      v41 = vmulq_f32(v36, vsubq_f32(v38, v39));
      v42 = (int32x4_t)vminq_f32(v41, v40);
      v43 = (int32x4_t)vmaxq_f32(v41, v40);
      if ((vcgt_f32(vmin_f32(vmin_f32((float32x2_t)vdup_lane_s32(*(int32x2_t *)v43.i8, 0), vmin_f32((float32x2_t)vdup_lane_s32(*(int32x2_t *)v43.i8, 1), (float32x2_t)vdup_laneq_s32(v43, 2))), (float32x2_t)vdup_lane_s32(*(int32x2_t *)v29.f32, 0)), vmax_f32(vmax_f32((float32x2_t)vdup_lane_s32(*(int32x2_t *)v42.i8, 0), vmax_f32((float32x2_t)vdup_lane_s32(*(int32x2_t *)v42.i8, 1), (float32x2_t)vdup_laneq_s32(v42, 2))), 0)).u32[0] & 1) != 0)
      {
        v51 = *(_DWORD *)(a1 + 88);
        v52 = 0;
        v47 = v12 + v14;
        v48 = 1;
        if (*(_BYTE *)(a1 + 209))
        {
          if (v31 < *(float *)(a1 + 144))
          {
            *(_OWORD *)v7 = v46;
            *(_DWORD *)(v7 + 16) = v47;
            *(_WORD *)(a1 + 116) = 1;
            *(_OWORD *)(a1 + 120) = v49;
            *(_QWORD *)(a1 + 136) = v50;
            *(float *)(a1 + 144) = v31;
            *(_QWORD *)(a1 + 148) = v52;
            if (v31 < v8)
              v8 = v31;
            *(_QWORD *)(a1 + 160) = *(_QWORD *)v23;
            *(_DWORD *)(a1 + 168) = *(_DWORD *)(v23 + 8);
            *(_QWORD *)(a1 + 172) = *(_QWORD *)v24;
            *(_DWORD *)(a1 + 180) = *(_DWORD *)(v24 + 8);
            *(_QWORD *)(a1 + 184) = *(_QWORD *)v25;
            *(_DWORD *)(a1 + 192) = *(_DWORD *)(v25 + 8);
            *(_DWORD *)(a1 + 196) = v18;
            *(_DWORD *)(a1 + 200) = v19;
            *(_DWORD *)(a1 + 204) = v20;
            *(_BYTE *)(a1 + 208) = 1;
          }
        }
        else
        {
          if (!(***(unsigned int (****)(_QWORD, __int128 *))(a1 + 16))(*(_QWORD *)(a1 + 16), &v46))
            return v6;
          v10 = (int8x16_t)xmmword_226168830;
          v9 = (float32x4_t)xmmword_2261A9F50;
          v11 = (int8x16_t)xmmword_2260EDC60;
        }
        if (!*(_DWORD *)(*(_QWORD *)(a1 + 16) + 8))
          break;
      }
      if (++v12 == v15)
      {
        v6 = ++v5 >= v45;
        if (v5 != v45)
          goto LABEL_3;
        return 1;
      }
    }
  }
  else
  {
    return 1;
  }
  return v6;
}

BOOL `non-virtual thunk to'RayRTreeCallback<1,true>::processResults(uint64_t a1, unsigned int a2, uint64_t a3)
{
  return RayRTreeCallback<1,true>::processResults(a1 - 8, a2, a3);
}

uint64_t `non-virtual thunk to'RayRTreeCallback<1,true>::~RayRTreeCallback(uint64_t result)
{
  *(_QWORD *)(result - 8) = off_24ED91DA0;
  *(_QWORD *)result = &unk_24ED91DD0;
  if (*(_BYTE *)(result + 200))
    return (***(uint64_t (****)(_QWORD, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(result + 8))(*(_QWORD *)(result + 8), result + 88, result + 152, result + 164, result + 176, result + 80, result + 188);
  return result;
}

void `non-virtual thunk to'RayRTreeCallback<1,true>::~RayRTreeCallback(uint64_t a1)
{
  RayRTreeCallback<1,true>::~RayRTreeCallback(a1 - 8);
}

uint64_t `anonymous namespace'::IntersectSphereVsMeshCallback<true>::processHit(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  float32x4_t v7;
  float32x4_t v8;
  float v9;
  uint64_t result;
  uint64_t *v11;
  uint64_t v12;
  unsigned int v13;
  int v14;
  uint64_t v15;
  float32x4_t v16;
  float32x4_t v17;
  float32x2_t v18;
  float32x2_t v19;
  float32x4_t v20;
  float32x4_t v21;
  float32x4_t v22;

  v7.i64[0] = *(_QWORD *)a3;
  v7.i64[1] = *(unsigned int *)(a3 + 8);
  v22 = v7;
  v7.i64[0] = *(_QWORD *)a4;
  v7.i64[1] = *(unsigned int *)(a4 + 8);
  v8.i64[0] = *(_QWORD *)a5;
  v8.i32[2] = *(_DWORD *)(a5 + 8);
  v21 = v7;
  v8.i64[1] = v8.u32[2];
  v20 = v8;
  v18 = 0;
  v19 = 0;
  v17 = 0uLL;
  v7.i64[0] = *(_QWORD *)(a1 + 40);
  v7.i64[1] = *(unsigned int *)(a1 + 48);
  v16 = v7;
  v9 = physx::Gu::distancePointTriangleSquared(&v16, &v22, &v21, &v20, &v19, &v18, &v17).f32[0];
  result = 1;
  if (v9 <= *(float *)(a1 + 36))
  {
    *(_BYTE *)(a1 + 32) = 1;
    v11 = *(uint64_t **)(a1 + 24);
    if (v11)
    {
      v12 = *((unsigned int *)v11 + 2);
      if (v12 >= *((_DWORD *)v11 + 3))
      {
        *((_BYTE *)v11 + 24) = 1;
      }
      else
      {
        v13 = *((_DWORD *)v11 + 5);
        if (v13 >= *((_DWORD *)v11 + 4))
        {
          v14 = *(_DWORD *)(a2 + 16);
          v15 = *v11;
          *((_DWORD *)v11 + 2) = v12 + 1;
          *(_DWORD *)(v15 + 4 * v12) = v14;
        }
        else
        {
          *((_DWORD *)v11 + 5) = v13 + 1;
        }
      }
    }
    else
    {
      return 0;
    }
  }
  return result;
}

void `anonymous namespace'::IntersectSphereVsMeshCallback<true>::~IntersectSphereVsMeshCallback()
{
  JUMPOUT(0x2276933B8);
}

uint64_t `anonymous namespace'::IntersectSphereVsMeshCallback<false>::processHit(uint64_t a1, uint64_t a2, float *a3, float *a4, float *a5)
{
  uint64_t v7;
  float v8;
  float v9;
  float v10;
  float v11;
  float v12;
  float v13;
  float32x2_t v14;
  float32x2_t v15;
  float32x2_t v16;
  float32x2_t v17;
  float32x4_t v18;
  float *v19;
  float v20;
  float v21;
  float32x4_t v22;
  float *v23;
  float v24;
  float v25;
  float v26;
  float32x4_t v27;
  float32x4_t v28;
  float v29;
  uint64_t result;
  uint64_t *v31;
  uint64_t v32;
  unsigned int v33;
  int v34;
  uint64_t v35;
  float32x4_t v36;
  float32x4_t v37;
  float32x2_t v38;
  float32x2_t v39;
  float32x4_t v40;
  float32x4_t v41;
  float32x4_t v42;

  v7 = *(_QWORD *)(a1 + 16);
  v8 = *(float *)(v7 + 8);
  v9 = a3[1];
  v10 = *(float *)(v7 + 20);
  v11 = (float)(*a3 * v8) + (float)(v9 * v10);
  v12 = a3[2];
  v13 = *(float *)(v7 + 32);
  v14 = *(float32x2_t *)v7;
  v15 = *(float32x2_t *)(v7 + 12);
  v16 = vadd_f32(vmul_n_f32(*(float32x2_t *)v7, *a3), vmul_n_f32(v15, v9));
  v17 = *(float32x2_t *)(v7 + 24);
  *(float32x2_t *)v18.f32 = vadd_f32(v16, vmul_n_f32(v17, v12));
  v18.i64[1] = COERCE_UNSIGNED_INT(v11 + (float)(v12 * v13));
  v42 = v18;
  if (*(_BYTE *)(a1 + 33))
    v19 = a5;
  else
    v19 = a4;
  v20 = v19[1];
  v21 = v19[2];
  *(float32x2_t *)v22.f32 = vadd_f32(vadd_f32(vmul_n_f32(v14, *v19), vmul_n_f32(v15, v20)), vmul_n_f32(v17, v21));
  v22.f32[2] = (float)((float)(v8 * *v19) + (float)(v10 * v20)) + (float)(v13 * v21);
  v22.i32[3] = 0;
  if (*(_BYTE *)(a1 + 33))
    v23 = a4;
  else
    v23 = a5;
  v24 = v23[1];
  v25 = (float)(v8 * *v23) + (float)(v10 * v24);
  v26 = v23[2];
  *(float32x2_t *)v27.f32 = vadd_f32(vadd_f32(vmul_n_f32(v14, *v23), vmul_n_f32(v15, v24)), vmul_n_f32(v17, v26));
  v27.f32[2] = v25 + (float)(v13 * v26);
  v41 = v22;
  v27.i32[3] = 0;
  v40 = v27;
  v38 = 0;
  v39 = 0;
  v37 = 0uLL;
  v28.i64[0] = *(_QWORD *)(a1 + 40);
  v28.i64[1] = *(unsigned int *)(a1 + 48);
  v36 = v28;
  v29 = physx::Gu::distancePointTriangleSquared(&v36, &v42, &v41, &v40, &v39, &v38, &v37).f32[0];
  result = 1;
  if (v29 <= *(float *)(a1 + 36))
  {
    *(_BYTE *)(a1 + 32) = 1;
    v31 = *(uint64_t **)(a1 + 24);
    if (v31)
    {
      v32 = *((unsigned int *)v31 + 2);
      if (v32 >= *((_DWORD *)v31 + 3))
      {
        *((_BYTE *)v31 + 24) = 1;
      }
      else
      {
        v33 = *((_DWORD *)v31 + 5);
        if (v33 >= *((_DWORD *)v31 + 4))
        {
          v34 = *(_DWORD *)(a2 + 16);
          v35 = *v31;
          *((_DWORD *)v31 + 2) = v32 + 1;
          *(_DWORD *)(v35 + 4 * v32) = v34;
        }
        else
        {
          *((_DWORD *)v31 + 5) = v33 + 1;
        }
      }
    }
    else
    {
      return 0;
    }
  }
  return result;
}

void `anonymous namespace'::IntersectSphereVsMeshCallback<false>::~IntersectSphereVsMeshCallback()
{
  JUMPOUT(0x2276933B8);
}

uint64_t `anonymous namespace'::IntersectBoxVsMeshCallback<true>::processHit(uint64_t a1, uint64_t a2, float *a3, float *a4, float *a5)
{
  float *v7;
  float v8;
  float v9;
  float v10;
  float v11;
  float v12;
  float v13;
  float v14;
  float v15;
  float v16;
  float v17;
  float v18;
  float v19;
  float v20;
  float v21;
  float v22;
  float v23;
  float v24;
  float v25;
  float v26;
  float v27;
  float v28;
  float v29;
  float v30;
  float v31;
  _BOOL4 v32;
  uint64_t result;
  uint64_t *v34;
  uint64_t v35;
  unsigned int v36;
  int v37;
  uint64_t v38;
  float32x4_t v39;
  float32x4_t v40;
  float32x4_t v41;

  v7 = *(float **)(a1 + 16);
  v8 = *v7;
  v9 = v7[1];
  v10 = a3[1];
  v11 = v7[2];
  v12 = v7[3];
  v13 = v7[4];
  v14 = v7[5];
  v15 = (float)(*a3 * *v7) + (float)(v10 * v12);
  v16 = (float)(*a3 * v9) + (float)(v10 * v13);
  v17 = (float)(*a3 * v11) + (float)(v10 * v14);
  v18 = a3[2];
  v19 = v7[6];
  v20 = v7[7];
  v21 = v7[8];
  v41.f32[0] = v15 + (float)(v18 * v19);
  v41.f32[1] = v16 + (float)(v18 * v20);
  v41.f32[2] = v17 + (float)(v18 * v21);
  v22 = a4[1];
  v23 = (float)(v8 * *a4) + (float)(v12 * v22);
  v24 = (float)(v9 * *a4) + (float)(v13 * v22);
  v25 = (float)(v11 * *a4) + (float)(v14 * v22);
  v26 = a4[2];
  v40.f32[0] = v23 + (float)(v19 * v26);
  v40.f32[1] = v24 + (float)(v20 * v26);
  v40.f32[2] = v25 + (float)(v21 * v26);
  v27 = a5[1];
  v28 = (float)(v8 * *a5) + (float)(v12 * v27);
  v29 = (float)(v9 * *a5) + (float)(v13 * v27);
  v30 = (float)(v11 * *a5) + (float)(v14 * v27);
  v31 = a5[2];
  v39.f32[0] = v28 + (float)(v19 * v31);
  v39.f32[1] = v29 + (float)(v20 * v31);
  v39.f32[2] = v30 + (float)(v21 * v31);
  v32 = physx::Gu::intersectTriangleBox_Unsafe((float32x4_t *)(a1 + 100), (float32x4_t *)(a1 + 84), &v41, &v40, &v39);
  result = 1;
  if (v32)
  {
    *(_BYTE *)(a1 + 32) = 1;
    v34 = *(uint64_t **)(a1 + 24);
    if (v34)
    {
      v35 = *((unsigned int *)v34 + 2);
      if (v35 >= *((_DWORD *)v34 + 3))
      {
        *((_BYTE *)v34 + 24) = 1;
      }
      else
      {
        v36 = *((_DWORD *)v34 + 5);
        if (v36 >= *((_DWORD *)v34 + 4))
        {
          v37 = *(_DWORD *)(a2 + 16);
          v38 = *v34;
          *((_DWORD *)v34 + 2) = v35 + 1;
          *(_DWORD *)(v38 + 4 * v35) = v37;
        }
        else
        {
          *((_DWORD *)v34 + 5) = v36 + 1;
        }
      }
    }
    else
    {
      return 0;
    }
  }
  return result;
}

void `anonymous namespace'::IntersectBoxVsMeshCallback<true>::~IntersectBoxVsMeshCallback()
{
  JUMPOUT(0x2276933B8);
}

uint64_t `anonymous namespace'::IntersectBoxVsMeshCallback<false>::processHit(uint64_t a1, uint64_t a2, float *a3, float *a4, float *a5)
{
  float v7;
  float v8;
  float v9;
  float v10;
  float v11;
  float v12;
  float v13;
  float v14;
  float v15;
  float v16;
  float v17;
  float v18;
  float v19;
  float v20;
  float v21;
  float v22;
  float v23;
  float32_t v24;
  float v25;
  float v26;
  BOOL v27;
  float *v28;
  float v29;
  float v30;
  float v31;
  float v32;
  float v33;
  float *v34;
  float v35;
  float v36;
  float v37;
  float v38;
  float v39;
  _BOOL4 v40;
  uint64_t result;
  uint64_t *v42;
  uint64_t v43;
  unsigned int v44;
  int v45;
  uint64_t v46;
  float32x4_t v47;
  float32x4_t v48;
  float32x4_t v49;

  v7 = *(float *)(a1 + 36);
  v8 = *(float *)(a1 + 40);
  v9 = a3[1];
  v10 = *(float *)(a1 + 44);
  v11 = *(float *)(a1 + 48);
  v12 = *(float *)(a1 + 52);
  v13 = *(float *)(a1 + 56);
  v14 = (float)(*a3 * v7) + (float)(v9 * v11);
  v15 = (float)(*a3 * v8) + (float)(v9 * v12);
  v16 = (float)(*a3 * v10) + (float)(v9 * v13);
  v17 = a3[2];
  v18 = *(float *)(a1 + 60);
  v19 = *(float *)(a1 + 64);
  v20 = v17 * v19;
  v21 = *(float *)(a1 + 68);
  v22 = *(float *)(a1 + 72);
  v23 = v16 + (float)(v17 * v21);
  v24 = (float)(v14 + (float)(v17 * v18)) + v22;
  v25 = *(float *)(a1 + 76);
  v26 = *(float *)(a1 + 80);
  v49.f32[0] = v24;
  v49.f32[1] = (float)(v15 + v20) + v25;
  v49.f32[2] = v23 + v26;
  v27 = *(_BYTE *)(a1 + 33) == 0;
  if (*(_BYTE *)(a1 + 33))
    v28 = a5;
  else
    v28 = a4;
  v29 = v28[1];
  v30 = (float)(v7 * *v28) + (float)(v11 * v29);
  v31 = (float)(v8 * *v28) + (float)(v12 * v29);
  v32 = (float)(v10 * *v28) + (float)(v13 * v29);
  v33 = v28[2];
  v48.f32[0] = v22 + (float)(v30 + (float)(v18 * v33));
  v48.f32[1] = v25 + (float)(v31 + (float)(v19 * v33));
  v48.f32[2] = v26 + (float)(v32 + (float)(v21 * v33));
  if (v27)
    v34 = a5;
  else
    v34 = a4;
  v35 = v34[1];
  v36 = (float)(v7 * *v34) + (float)(v11 * v35);
  v37 = (float)(v8 * *v34) + (float)(v12 * v35);
  v38 = (float)(v10 * *v34) + (float)(v13 * v35);
  v39 = v34[2];
  v47.f32[0] = v22 + (float)(v36 + (float)(v18 * v39));
  v47.f32[1] = v25 + (float)(v37 + (float)(v19 * v39));
  v47.f32[2] = v26 + (float)(v38 + (float)(v21 * v39));
  v40 = physx::Gu::intersectTriangleBox_Unsafe((float32x4_t *)(a1 + 100), (float32x4_t *)(a1 + 84), &v49, &v48, &v47);
  result = 1;
  if (v40)
  {
    *(_BYTE *)(a1 + 32) = 1;
    v42 = *(uint64_t **)(a1 + 24);
    if (v42)
    {
      v43 = *((unsigned int *)v42 + 2);
      if (v43 >= *((_DWORD *)v42 + 3))
      {
        *((_BYTE *)v42 + 24) = 1;
      }
      else
      {
        v44 = *((_DWORD *)v42 + 5);
        if (v44 >= *((_DWORD *)v42 + 4))
        {
          v45 = *(_DWORD *)(a2 + 16);
          v46 = *v42;
          *((_DWORD *)v42 + 2) = v43 + 1;
          *(_DWORD *)(v46 + 4 * v43) = v45;
        }
        else
        {
          *((_DWORD *)v42 + 5) = v44 + 1;
        }
      }
    }
    else
    {
      return 0;
    }
  }
  return result;
}

void `anonymous namespace'::IntersectBoxVsMeshCallback<false>::~IntersectBoxVsMeshCallback()
{
  JUMPOUT(0x2276933B8);
}

uint64_t `anonymous namespace'::IntersectCapsuleVsMeshCallback<true>::processHit(uint64_t a1, uint64_t a2, float *a3, float *a4, float *a5)
{
  float v7;
  float v8;
  float v9;
  float v10;
  float v11;
  float v12;
  float v13;
  float v14;
  _BOOL4 v15;
  uint64_t result;
  uint64_t *v17;
  uint64_t v18;
  unsigned int v19;
  int v20;
  uint64_t v21;
  float v22[3];

  v7 = a3[1];
  v8 = *a3 - *a4;
  v9 = v7 - a4[1];
  v10 = a3[2];
  v11 = *a3 - *a5;
  v12 = v10 - a4[2];
  v13 = v7 - a5[1];
  v14 = v10 - a5[2];
  v22[0] = (float)(v9 * v14) - (float)(v12 * v13);
  v22[1] = (float)(v12 * v11) - (float)(v8 * v14);
  v22[2] = (float)(v8 * v13) - (float)(v9 * v11);
  v15 = physx::Gu::intersectCapsuleTriangle(v22, a3, a4, a5, (float *)(a1 + 36), (float *)(a1 + 64));
  result = 1;
  if (v15)
  {
    *(_BYTE *)(a1 + 32) = 1;
    v17 = *(uint64_t **)(a1 + 24);
    if (v17)
    {
      v18 = *((unsigned int *)v17 + 2);
      if (v18 >= *((_DWORD *)v17 + 3))
      {
        *((_BYTE *)v17 + 24) = 1;
      }
      else
      {
        v19 = *((_DWORD *)v17 + 5);
        if (v19 >= *((_DWORD *)v17 + 4))
        {
          v20 = *(_DWORD *)(a2 + 16);
          v21 = *v17;
          *((_DWORD *)v17 + 2) = v18 + 1;
          *(_DWORD *)(v21 + 4 * v18) = v20;
        }
        else
        {
          *((_DWORD *)v17 + 5) = v19 + 1;
        }
      }
    }
    else
    {
      return 0;
    }
  }
  return result;
}

void `anonymous namespace'::IntersectCapsuleVsMeshCallback<true>::~IntersectCapsuleVsMeshCallback()
{
  JUMPOUT(0x2276933B8);
}

uint64_t `anonymous namespace'::IntersectCapsuleVsMeshCallback<false>::processHit(uint64_t a1, uint64_t a2, float *a3, float *a4, float *a5)
{
  float *v7;
  float v8;
  float v9;
  float v10;
  float v11;
  float v12;
  float v13;
  float v14;
  float v15;
  float v16;
  float v17;
  float v18;
  float v19;
  float v20;
  float v21;
  float v22;
  float v23;
  float v24;
  BOOL v25;
  float *v26;
  float v27;
  float v28;
  float v29;
  float v30;
  float v31;
  float v32;
  float v33;
  float v34;
  float *v35;
  float v36;
  float v37;
  float v38;
  float v39;
  float v40;
  float v41;
  float v42;
  _BOOL4 v43;
  uint64_t result;
  uint64_t *v45;
  uint64_t v46;
  unsigned int v47;
  int v48;
  uint64_t v49;
  float v50[3];
  float v51;
  float v52;
  float v53;
  float v54[3];
  float v55[3];

  v7 = *(float **)(a1 + 16);
  v8 = *v7;
  v9 = v7[1];
  v10 = a3[1];
  v11 = v7[2];
  v12 = v7[3];
  v13 = v7[4];
  v14 = v7[5];
  v15 = (float)(*a3 * *v7) + (float)(v10 * v12);
  v16 = (float)(*a3 * v9) + (float)(v10 * v13);
  v17 = (float)(*a3 * v11) + (float)(v10 * v14);
  v18 = a3[2];
  v19 = v7[6];
  v20 = v7[7];
  v21 = v7[8];
  v22 = v15 + (float)(v18 * v19);
  v23 = v16 + (float)(v18 * v20);
  v24 = v17 + (float)(v18 * v21);
  v55[0] = v22;
  v55[1] = v23;
  v55[2] = v24;
  v25 = *(_BYTE *)(a1 + 33) == 0;
  if (*(_BYTE *)(a1 + 33))
    v26 = a5;
  else
    v26 = a4;
  v27 = v26[1];
  v28 = (float)(v8 * *v26) + (float)(v12 * v27);
  v29 = (float)(v9 * *v26) + (float)(v13 * v27);
  v30 = (float)(v11 * *v26) + (float)(v14 * v27);
  v31 = v26[2];
  v32 = v28 + (float)(v19 * v31);
  v33 = v29 + (float)(v20 * v31);
  v34 = v30 + (float)(v21 * v31);
  v54[0] = v32;
  v54[1] = v33;
  v54[2] = v34;
  if (v25)
    v35 = a5;
  else
    v35 = a4;
  v36 = v35[1];
  v37 = (float)(v8 * *v35) + (float)(v12 * v36);
  v38 = (float)(v9 * *v35) + (float)(v13 * v36);
  v39 = v35[2];
  v40 = (float)((float)(v11 * *v35) + (float)(v14 * v36)) + (float)(v21 * v39);
  v51 = v37 + (float)(v19 * v39);
  v52 = v38 + (float)(v20 * v39);
  v53 = v40;
  v41 = v24 - v34;
  v42 = v24 - v40;
  v50[0] = (float)((float)(v23 - v33) * v42) - (float)(v41 * (float)(v23 - v52));
  v50[1] = (float)(v41 * (float)(v22 - v51)) - (float)((float)(v22 - v32) * v42);
  v50[2] = (float)((float)(v22 - v32) * (float)(v23 - v52)) - (float)((float)(v23 - v33) * (float)(v22 - v51));
  v43 = physx::Gu::intersectCapsuleTriangle(v50, v55, v54, &v51, (float *)(a1 + 36), (float *)(a1 + 64));
  result = 1;
  if (v43)
  {
    *(_BYTE *)(a1 + 32) = 1;
    v45 = *(uint64_t **)(a1 + 24);
    if (v45)
    {
      v46 = *((unsigned int *)v45 + 2);
      if (v46 >= *((_DWORD *)v45 + 3))
      {
        *((_BYTE *)v45 + 24) = 1;
      }
      else
      {
        v47 = *((_DWORD *)v45 + 5);
        if (v47 >= *((_DWORD *)v45 + 4))
        {
          v48 = *(_DWORD *)(a2 + 16);
          v49 = *v45;
          *((_DWORD *)v45 + 2) = v46 + 1;
          *(_DWORD *)(v49 + 4 * v46) = v48;
        }
        else
        {
          *((_DWORD *)v45 + 5) = v47 + 1;
        }
      }
    }
    else
    {
      return 0;
    }
  }
  return result;
}

void `anonymous namespace'::IntersectCapsuleVsMeshCallback<false>::~IntersectCapsuleVsMeshCallback()
{
  JUMPOUT(0x2276933B8);
}

void physx::PxMeshQuery::getTriangle(uint64_t a1, uint64_t a2, unsigned int a3, float *a4, unsigned int *a5, _DWORD *a6, uint64_t a7, uint64_t a8)
{
  uint64_t v14;
  float v15;
  uint64_t v16;
  unsigned int *v17;
  unsigned int v18;
  unsigned int v19;
  unsigned int v20;
  unsigned __int16 *v21;
  unsigned int v22;
  uint64_t v23;
  float *v24;
  float v25;
  float v26;
  float v27;
  float v28;
  float v29;
  float v30;
  float v31;
  float v32;
  float v33;
  float v34;
  float v35;
  float v36;
  float v37;
  float v38;
  float v39;
  float v40;
  float v41;
  float v42;
  float v43;
  float v44;
  float v45;
  float v46;
  float *v47;
  float v48;
  float v49;
  float v50;
  float v51;
  float v52;
  float *v53;
  float v54;
  float v55;
  float v56;
  float v57;
  float v58;
  uint64_t v59;
  unsigned int v60;
  unsigned int v61;
  int v62;
  float v63;
  float v64;
  float v65;
  float v66;
  float v67;
  float v68;
  float v69;
  float v70;
  float v71;
  float v72;
  float v73;
  float v74;

  v14 = *(_QWORD *)(a1 + 40);
  if (a6 && !*(_QWORD *)(v14 + 112))
    physx::shdfnd::Foundation::error(physx::shdfnd::Foundation::mInstance, 8, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/common/src/../../geomutils/src/mesh/GuMeshQuery.cpp", 111, "Adjacency information not created. Set buildTriangleAdjacencies on Cooking params.", (uint64_t)a6, a7, a8, SLOBYTE(v63));
  physx::operator*(a2, (float *)(a1 + 4), (uint64_t)&v63);
  v15 = (float)(*(float *)(a1 + 4) * *(float *)(a1 + 8)) * *(float *)(a1 + 12);
  v16 = *(_QWORD *)(v14 + 48);
  if ((*(_BYTE *)(v14 + 92) & 2) != 0)
  {
    v21 = (unsigned __int16 *)(v16 + 6 * a3);
    v18 = *v21;
    v19 = v21[1];
    v20 = v21[2];
  }
  else
  {
    v17 = (unsigned int *)(v16 + 12 * a3);
    v18 = *v17;
    v19 = v17[1];
    v20 = v17[2];
  }
  if (v15 >= 0.0)
    v22 = v20;
  else
    v22 = v19;
  if (v15 < 0.0)
    v19 = v20;
  v23 = *(_QWORD *)(v14 + 40);
  v24 = (float *)(v23 + 12 * v18);
  v25 = v63;
  v26 = v64;
  v27 = v24[1];
  v28 = v65;
  v29 = v66;
  v30 = v67;
  v31 = v68;
  v32 = (float)(*v24 * v63) + (float)(v27 * v66);
  v33 = (float)(*v24 * v64) + (float)(v27 * v67);
  v34 = (float)(*v24 * v65) + (float)(v27 * v68);
  v35 = v24[2];
  v36 = v69;
  v37 = v70;
  v38 = v35 * v70;
  v39 = v71;
  v40 = v72;
  v41 = v34 + (float)(v35 * v71);
  v42 = (float)(v32 + (float)(v35 * v69)) + v72;
  v43 = v73;
  v44 = v74;
  v45 = (float)(v33 + v38) + v73;
  v46 = v41 + v74;
  *a4 = v42;
  a4[1] = v45;
  a4[2] = v46;
  v47 = (float *)(v23 + 12 * v19);
  v48 = v47[1];
  v49 = (float)(v25 * *v47) + (float)(v29 * v48);
  v50 = (float)(v26 * *v47) + (float)(v30 * v48);
  v51 = (float)(v28 * *v47) + (float)(v31 * v48);
  v52 = v47[2];
  a4[3] = v40 + (float)(v49 + (float)(v36 * v52));
  a4[4] = v43 + (float)(v50 + (float)(v37 * v52));
  a4[5] = v44 + (float)(v51 + (float)(v39 * v52));
  v53 = (float *)(v23 + 12 * v22);
  v54 = v53[1];
  v55 = (float)(v25 * *v53) + (float)(v29 * v54);
  v56 = (float)(v26 * *v53) + (float)(v30 * v54);
  v57 = (float)(v28 * *v53) + (float)(v31 * v54);
  v58 = v53[2];
  a4[6] = v40 + (float)(v55 + (float)(v36 * v58));
  a4[7] = v43 + (float)(v56 + (float)(v37 * v58));
  a4[8] = v44 + (float)(v57 + (float)(v39 * v58));
  if (a5)
  {
    *a5 = v18;
    a5[1] = v19;
    a5[2] = v22;
  }
  if (a6)
  {
    v59 = *(_QWORD *)(v14 + 112);
    if (v59)
    {
      v60 = 3 * a3 + 2;
      if (v15 >= 0.0)
        v61 = 3 * a3;
      else
        v61 = 3 * a3 + 2;
      if (v15 < 0.0)
        v60 = 3 * a3;
      *a6 = *(_DWORD *)(v59 + 4 * v61);
      a6[1] = *(_DWORD *)(v59 + 4 * (3 * a3 + 1));
      v62 = *(_DWORD *)(v59 + 4 * v60);
    }
    else
    {
      *(_QWORD *)a6 = -1;
      v62 = -1;
    }
    a6[2] = v62;
  }
}

BOOL physx::PxMeshQuery::getTriangle(float32x2_t *a1, float *a2, unsigned int a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  float v6;
  int32x2_t v13;
  float v14;
  float32x2_t v15;
  float32x2_t *v16;

  v15 = a1[1];
  v16 = a1;
  v6 = a1[3].f32[0];
  __asm { FMOV            V2.2S, #1.0 }
  v13 = vrev64_s32((int32x2_t)vdiv_f32(_D2, a1[2]));
  v14 = 1.0 / v6;
  return physx::Gu::HeightFieldUtil::getTriangle((uint64_t)&v13, a2, a4, a5, a6, a3, 1, 1);
}

uint64_t physx::PxMeshQuery::findOverlapTriangleMesh(int *a1, float32x4_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, int a6, int a7, _BYTE *a8)
{
  uint64_t v10;
  float v11;
  float32x2_t v12;
  float32x2_t v13;
  float32x2_t v14;
  float32x2_t v16;
  float32x2_t v17;
  float32x2_t v18;
  float32x2_t v19;
  float32x2_t v20;
  float32x2_t v21;
  float32x2_t v22;
  float32x2_t v23;
  float32x2_t v24;
  float32x2_t v29;
  uint64_t v30;
  uint64_t v31;
  __int128 v32;
  unsigned int v33;
  uint64_t (**v34)();
  int v35;
  float v36;
  float v37;
  float v38;
  float v39;
  float v40;
  float v41;
  float v42;
  float v43;
  float v44;
  float v45;
  int v46;
  float v47;
  float v48;
  float v49;
  float v50;
  float v51;
  float v52;
  uint64_t v54;
  uint64_t v55;
  float v56;
  uint64_t v57;
  int32x2_t v58;
  __int32 v59;
  __int128 v60;
  int v61;
  uint64_t v62;
  unsigned int v63;
  int v64;
  int v65;
  int v66;
  char v67;

  v62 = a5;
  v63 = 0;
  v64 = a6;
  v65 = a7;
  v66 = 0;
  v67 = 0;
  v10 = *(_QWORD *)(a3 + 40);
  v11 = *(float *)a1;
  if (!*a1)
  {
    v35 = a1[1];
    v54 = a2[1].i64[0];
    LODWORD(v55) = a2[1].i32[2];
    HIDWORD(v55) = v35;
    v33 = *(unsigned __int16 *)(v10 + 8) - 3;
    v34 = physx::Gu::gMidphaseSphereOverlapTable;
    goto LABEL_7;
  }
  if (LODWORD(v11) == 2)
  {
    v36 = a2->f32[0];
    v37 = a2->f32[1];
    v38 = v36 + v36;
    v40 = a2->f32[2];
    v39 = a2->f32[3];
    v41 = v39 + v39;
    v42 = (float)((float)(v39 * (float)(v39 + v39)) + -1.0) + (float)(v36 * (float)(v36 + v36));
    v43 = (float)(v38 * v37) + (float)(v40 * (float)(v39 + v39));
    v44 = (float)(v38 * v40) - (float)(v37 * v41);
    v46 = a1[1];
    v45 = *((float *)a1 + 2);
    v47 = v42 * v45;
    v48 = v45 * v43;
    v49 = v44 * v45;
    v50 = a2[1].f32[0];
    v51 = a2[1].f32[1];
    v52 = a2[1].f32[2];
    *(float *)&v54 = v50 + v47;
    *((float *)&v54 + 1) = v51 + v48;
    *(float *)&v55 = v49 + v52;
    *((float *)&v55 + 1) = v50 - v47;
    v56 = v51 - v48;
    *(float *)&v57 = v52 - v49;
    HIDWORD(v57) = v46;
    v33 = *(unsigned __int16 *)(v10 + 8) - 3;
    v34 = (uint64_t (**)())&physx::Gu::gMidphaseCapsuleOverlapTable;
    goto LABEL_7;
  }
  if (LODWORD(v11) == 3)
  {
    v12 = (float32x2_t)vdup_lane_s32(*(int32x2_t *)a2->f32, 1);
    v13 = (float32x2_t)vdup_laneq_s32(*(int32x4_t *)a2, 2);
    v14 = (float32x2_t)vdup_laneq_s32(*(int32x4_t *)a2, 3);
    _Q4 = vaddq_f32(*a2, *a2);
    v16 = (float32x2_t)vdup_lane_s32((int32x2_t)vmul_f32(*(float32x2_t *)a2->f32, *(float32x2_t *)_Q4.f32), 0);
    v17 = vmul_lane_f32(v12, *(float32x2_t *)_Q4.f32, 1);
    v18 = vmul_laneq_f32(v13, _Q4, 2);
    v19 = vmul_n_f32(v12, _Q4.f32[0]);
    v20 = vmul_n_f32(v13, _Q4.f32[0]);
    v21 = vmul_n_f32(v14, _Q4.f32[0]);
    v22 = vmul_lane_f32(v13, *(float32x2_t *)_Q4.f32, 1);
    v23 = vmul_lane_f32(v14, *(float32x2_t *)_Q4.f32, 1);
    v24 = vmul_laneq_f32(v14, _Q4, 2);
    __asm { FMOV            V4.2S, #1.0 }
    v29 = vsub_f32(*(float32x2_t *)_Q4.f32, v16);
    LODWORD(v30) = vsub_f32(v20, v23).u32[0];
    LODWORD(v31) = vadd_f32(v22, v21).u32[0];
    *(float *)&v54 = (float)(1.0 - v17.f32[1]) - v18.f32[1];
    HIDWORD(v54) = vadd_f32(v19, v24).u32[0];
    HIDWORD(v30) = vsub_f32(v19, v24).i32[1];
    v55 = v30;
    LODWORD(v56) = vsub_f32(v29, v18).u32[0];
    HIDWORD(v31) = vadd_f32(v20, v23).i32[1];
    v57 = v31;
    v58 = vzip1_s32((int32x2_t)vsub_f32(v22, v21), (int32x2_t)vsub_f32(v29, v17));
    *(_QWORD *)&v32 = *(uint64_t *)((char *)a2[1].i64 + 4);
    *((_QWORD *)&v32 + 1) = *(_QWORD *)(a1 + 1);
    v59 = a2[1].i32[0];
    v60 = v32;
    v61 = a1[3];
    v33 = *(unsigned __int16 *)(v10 + 8) - 3;
    v34 = physx::Gu::gMidphaseBoxOverlapTable;
LABEL_7:
    ((void (*)(uint64_t *))v34[v33])(&v54);
  }
  *a8 = v67;
  return v63;
}

uint64_t physx::PxMeshQuery::findOverlapHeightField(uint64_t a1, float *a2, float32x2_t *a3, float *a4, uint64_t a5, int a6, int a7, _BYTE *a8, double a9, double a10, double a11, double a12)
{
  int32x2_t v12;
  int32x2_t v13;
  int32x2_t v14;
  float v16;
  float v17;
  float v18;
  float v19;
  float v20;
  float v21;
  float v22;
  float v23;
  float v24;
  float v25;
  float v26;
  float v27;
  float v28;
  float v29;
  float v30;
  float v31;
  float v32;
  float v33;
  float v34;
  float v35;
  float v36;
  float v37;
  float v38;
  char v39;
  float v40;
  float v41;
  float v42;
  float v43;
  float v44;
  float v45;
  float v46;
  float v47;
  float v48;
  float v49;
  float v50;
  float v51;
  float v52;
  float v53;
  float v54;
  float v55;
  float v56;
  float v57;
  float v58;
  float v59;
  float v60;
  float v61;
  float v62;
  float v63;
  float v64;
  float v65;
  float v66;
  float v67;
  float v68;
  float v69;
  float32x4_t v70;
  float v71;
  float32x2_t v77;
  float32x2_t v78;
  float32x2_t v79;
  float32x4_t v80;
  float32x2_t v81;
  float32x2_t v82;
  float32x2_t v83;
  float32x2_t v84;
  float32x2_t v85;
  float32x2_t v86;
  float32x2_t v87;
  float32x2_t v88;
  float32x2_t v89;
  uint64_t v90;
  float v92;
  _QWORD v93[2];
  unsigned int v94;
  int v95;
  int v96;
  int v97;
  char v98;
  int32x2_t *v99;
  float v100;
  unsigned __int32 v101;
  float32x2_t v102;
  unsigned __int32 v103;
  uint64_t v104;
  int32x2_t v105;
  float v106;
  float v107;
  float v108;
  float v109;
  float v110;
  float v111;
  char v112;
  int32x2_t v113;
  float v114;
  float32x2_t v115;
  float32x2_t *v116;
  float v117[6];

  v16 = *a4;
  v17 = a4[1];
  v19 = a4[2];
  v18 = a4[3];
  v21 = a2[4];
  v20 = a2[5];
  v23 = a4[4];
  v22 = a4[5];
  v24 = a2[6];
  v25 = a4[6];
  v27 = a2[2];
  v26 = a2[3];
  v29 = *a2;
  v28 = a2[1];
  *(float *)&a12 = (float)((float)((float)(v18 * *a2) - (float)(*a4 * v26)) - (float)(v17 * v27)) + (float)(v28 * v19);
  v30 = (float)((float)(v18 * v28) - (float)(v17 * v26)) - (float)(v19 * *a2);
  v31 = (float)((float)(v18 * v27) - (float)(v19 * v26)) - (float)(*a4 * v28);
  v32 = (float)((float)(*a4 * *a2) + (float)(v18 * v26)) + (float)(v17 * v28);
  v33 = 0.0;
  switch(*(_DWORD *)a1)
  {
    case 0xFFFFFFFF:
    case 1:
    case 4:
    case 5:
    case 6:
    case 7:
      *a8 = 0;
      goto LABEL_3;
    case 0:
      v33 = *(float *)(a1 + 4);
      v34 = v33;
      v35 = v33;
      break;
    case 2:
      v34 = *(float *)(a1 + 4);
      v33 = *(float *)(a1 + 8) + v34;
      v35 = v34;
      break;
    case 3:
      v33 = *(float *)(a1 + 4);
      v34 = *(float *)(a1 + 8);
      v35 = *(float *)(a1 + 12);
      break;
    default:
LABEL_3:
      v34 = 0.0;
      v35 = 0.0;
      break;
  }
  v36 = -v16;
  v37 = -v17;
  v38 = -v19;
  *(float *)v14.i32 = v30 + (float)(v27 * v16);
  *(float *)v13.i32 = v31 + (float)(v29 * v17);
  *(float *)v12.i32 = v32 + (float)(v19 * v27);
  if (*(float *)&a12 == 0.0 && *(float *)v14.i32 == 0.0 && *(float *)v13.i32 == 0.0)
  {
    v39 = 1;
    v40 = v33;
    v41 = v34;
    v42 = v35;
  }
  else
  {
    v39 = 0;
    v92 = v25;
    v43 = v23;
    v44 = v22;
    v45 = v20;
    v46 = v21;
    v47 = *(float *)v14.i32 * (float)(*(float *)v14.i32 + *(float *)v14.i32);
    v48 = *(float *)v13.i32 * (float)(*(float *)v13.i32 + *(float *)v13.i32);
    v49 = (float)(*(float *)&a12 + *(float *)&a12) * *(float *)v14.i32;
    v50 = *(float *)v13.i32 * (float)(*(float *)&a12 + *(float *)&a12);
    v51 = *(float *)v12.i32 * (float)(*(float *)&a12 + *(float *)&a12);
    v52 = *(float *)v13.i32 * (float)(*(float *)v14.i32 + *(float *)v14.i32);
    v53 = *(float *)v12.i32 * (float)(*(float *)v14.i32 + *(float *)v14.i32);
    v54 = *(float *)v12.i32 * (float)(*(float *)v13.i32 + *(float *)v13.i32);
    v55 = v49 + v54;
    v56 = v50 - v53;
    v57 = v49 - v54;
    v58 = 1.0 - (float)(*(float *)&a12 * (float)(*(float *)&a12 + *(float *)&a12));
    v59 = (float)(v51 + v52) * v34;
    v60 = (float)(v52 - v51) * v35;
    v40 = (float)(fabsf((float)((float)(1.0 - v47) - v48) * v33) + fabsf(v57 * v34)) + fabsf((float)(v50 + v53) * v35);
    v41 = (float)(fabsf(v55 * v33) + fabsf((float)(v58 - v48) * v34)) + fabsf(v60);
    v61 = fabsf((float)(v58 - v47) * v35);
    v21 = v46;
    v20 = v45;
    v22 = v44;
    v23 = v43;
    v25 = v92;
    v42 = (float)(fabsf(v56 * v33) + fabsf(v59)) + v61;
  }
  v62 = (float)(v24 - v25) + (float)(v24 - v25);
  v63 = (float)(v21 - v23) + (float)(v21 - v23);
  v64 = (float)(v20 - v22) + (float)(v20 - v22);
  v65 = (float)((float)(v64 * v37) + (float)(v36 * v63)) + (float)(v38 * v62);
  v66 = (float)(v18 * v18) + -0.5;
  v67 = (float)((float)(v18 * (float)((float)(v17 * v63) + (float)(v36 * v64))) + (float)(v62 * v66))
      + (float)(v38 * v65);
  v68 = (float)((float)(v18 * (float)((float)(v16 * v62) + (float)(v38 * v63))) + (float)(v64 * v66))
      + (float)(v37 * v65);
  v69 = (float)((float)(v18 * (float)((float)(v19 * v64) + (float)(v37 * v62))) + (float)(v63 * v66))
      + (float)(v36 * v65);
  v117[0] = v69 - v40;
  v117[1] = v68 - v41;
  v117[2] = v67 - v42;
  v117[3] = v69 + v40;
  v117[4] = v68 + v41;
  v117[5] = v67 + v42;
  v70.i64[0] = __PAIR64__(v14.u32[0], LODWORD(a12));
  v70.i64[1] = __PAIR64__(v12.u32[0], v13.u32[0]);
  v115 = a3[1];
  v116 = a3;
  v71 = a3[3].f32[0];
  __asm { FMOV            V19.2S, #1.0 }
  v113 = vrev64_s32((int32x2_t)vdiv_f32(_D19, a3[2]));
  v114 = 1.0 / v71;
  v94 = 0;
  v95 = a6;
  v96 = a7;
  v97 = 0;
  v98 = 0;
  v93[0] = &off_24ED92000;
  v93[1] = a5;
  v99 = &v113;
  v112 = v39;
  v77 = (float32x2_t)vdup_lane_s32(v14, 0);
  v78 = (float32x2_t)vdup_lane_s32(v13, 0);
  v79 = (float32x2_t)vdup_lane_s32(v12, 0);
  v80 = vaddq_f32(v70, v70);
  v81 = (float32x2_t)vdup_lane_s32((int32x2_t)vmul_f32(*(float32x2_t *)&a12, *(float32x2_t *)v80.f32), 0);
  v82 = vmul_lane_f32(v77, *(float32x2_t *)v80.f32, 1);
  v83 = vmul_laneq_f32(v78, v80, 2);
  v84 = vmul_n_f32(v77, v80.f32[0]);
  v85 = vmul_n_f32(v78, v80.f32[0]);
  v86 = vmul_n_f32(v79, v80.f32[0]);
  v87 = vmul_lane_f32(v78, *(float32x2_t *)v80.f32, 1);
  v88 = vmul_lane_f32(v79, *(float32x2_t *)v80.f32, 1);
  *(float32x2_t *)v80.f32 = vmul_laneq_f32(v79, v80, 2);
  v89 = vsub_f32(_D19, v81);
  _D19.i32[0] = vsub_f32(v85, v88).u32[0];
  LODWORD(v90) = vadd_f32(v87, v86).u32[0];
  v100 = (float)(1.0 - v82.f32[1]) - v83.f32[1];
  v101 = vadd_f32(v84, *(float32x2_t *)v80.f32).u32[0];
  _D19.i32[1] = vsub_f32(v84, *(float32x2_t *)&v80).i32[1];
  v102 = _D19;
  v103 = vsub_f32(v89, v83).u32[0];
  HIDWORD(v90) = vadd_f32(v85, v88).i32[1];
  v104 = v90;
  v105 = vzip1_s32((int32x2_t)vsub_f32(v87, v86), (int32x2_t)vsub_f32(v89, v82));
  v106 = v69;
  v107 = v68;
  v108 = v67;
  v109 = v33;
  v110 = v34;
  v111 = v35;
  physx::Gu::HeightFieldUtil::overlapAABBTriangles((uint64_t)&v113, a4, v117, 0, (uint64_t)v93);
  *a8 = v98;
  return v94;
}

uint64_t physx::PxMeshQuery::sweep(float32x2_t *a1, int *a2, int32x2_t *a3, uint64_t a4, uint64_t a5, uint64_t a6, __int16 *a7, unsigned int *a8, double a9, double a10, double a11, __n128 a12, double a13, float32x4_t a14, double a15, __n128 a16, unsigned __int8 a17)
{
  int v17;
  int v18;
  __int16 v20;
  __int16 v21;
  __int16 v22;
  __int16 v23;
  _DWORD v24[3];

  LODWORD(a11) = 1287568416;
  *(float *)&a9 = fminf(*(float *)&a9, 100000000.0);
  v17 = *a2;
  if (*a2 == 3)
  {
    if ((*a7 & 0x100) != 0)
    {
      v21 = *a7;
      return physx::Gu::sweepBoxTriangles_Precise(a4, a5, a17, (uint64_t)a2, (uint64_t)a3, a1, a6, a8, a9, a10, a11, a12, a13, *(double *)a14.i64, a15, a16, &v21);
    }
    else
    {
      v20 = *a7;
      return physx::Gu::sweepBoxTriangles(a4, a5, a17, (uint64_t)a2, a3, (uint64_t)a1, a6, a8, a9, *(float *)&a10, a11, a12.n128_f64[0], a13, a14, &v20);
    }
  }
  else if (v17 == 2)
  {
    v22 = *a7;
    return physx::Gu::sweepCapsuleTriangles(a4, a5, (physx::Gu::Box *)a17, (uint64_t)a2, (float *)a3, a1, a6, a8, *(float *)&a9, *(float *)&a10, &v22);
  }
  else if (v17)
  {
    return 0;
  }
  else
  {
    v18 = a2[1];
    v24[0] = 2;
    v24[1] = v18;
    v24[2] = 0;
    v23 = *a7;
    return physx::Gu::sweepCapsuleTriangles(a4, a5, (physx::Gu::Box *)a17, (uint64_t)v24, (float *)a3, a1, a6, a8, *(float *)&a9, *(float *)&a10, &v23);
  }
}

uint64_t GeomOverlapCallback_SphereMesh(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int v3;
  uint64_t v5;
  int v6;
  int v7;

  v3 = *(_DWORD *)(a1 + 4);
  v5 = *(_QWORD *)(a2 + 16);
  v6 = *(_DWORD *)(a2 + 24);
  v7 = v3;
  return ((uint64_t (*)(uint64_t *))physx::Gu::gMidphaseSphereOverlapTable[*(unsigned __int16 *)(*(_QWORD *)(a3 + 40) + 8)
                                                                                  - 3])(&v5);
}

uint64_t GeomOverlapCallback_CapsuleMesh(uint64_t a1, float *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  float v5;
  float v6;
  float v7;
  float v8;
  float v9;
  float v10;
  float v11;
  float v12;
  float v13;
  float v14;
  float v15;
  float v16;
  float v17;
  float v18;
  float v19;
  float v20;
  float v21;
  float v23[7];

  v4 = *(_QWORD *)(a3 + 40);
  v5 = *a2;
  v6 = a2[1];
  v7 = v5 + v5;
  v9 = a2[2];
  v8 = a2[3];
  v10 = v8 + v8;
  v11 = (float)((float)(v8 * (float)(v8 + v8)) + -1.0) + (float)(v5 * (float)(v5 + v5));
  v12 = (float)(v7 * v6) + (float)(v9 * (float)(v8 + v8));
  v13 = (float)(v7 * v9) - (float)(v6 * v10);
  v15 = *(float *)(a1 + 4);
  v14 = *(float *)(a1 + 8);
  v16 = v11 * v14;
  v17 = v14 * v12;
  v18 = v13 * v14;
  v19 = a2[4];
  v20 = a2[5];
  v21 = a2[6];
  v23[0] = v19 + v16;
  v23[1] = v20 + v17;
  v23[2] = v18 + v21;
  v23[3] = v19 - v16;
  v23[4] = v20 - v17;
  v23[5] = v21 - v18;
  v23[6] = v15;
  return ((uint64_t (*)(float *, uint64_t, uint64_t, uint64_t, _QWORD))*(&physx::Gu::gMidphaseCapsuleOverlapTable
                                                                              + *(unsigned __int16 *)(v4 + 8)
                                                                              - 3))(v23, v4, a4, a3 + 4, 0);
}

uint64_t GeomOverlapCallback_BoxMesh(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  float32x2_t v5;
  float32x2_t v6;
  float32x2_t v7;
  float32x2_t v9;
  float32x2_t v10;
  float32x2_t v11;
  float32x2_t v12;
  float32x2_t v13;
  float32x2_t v14;
  float32x2_t v15;
  float32x2_t v16;
  float32x2_t v17;
  float32x2_t v22;
  uint64_t v23;
  uint64_t v24;
  __int128 v25;
  float v27[2];
  uint64_t v28;
  unsigned __int32 v29;
  uint64_t v30;
  int32x2_t v31;
  int v32;
  __int128 v33;
  int v34;

  v4 = *(_QWORD *)(a3 + 40);
  v5 = (float32x2_t)vdup_lane_s32(*(int32x2_t *)a2, 1);
  v6 = (float32x2_t)vdup_laneq_s32(*(int32x4_t *)a2, 2);
  v7 = (float32x2_t)vdup_laneq_s32(*(int32x4_t *)a2, 3);
  _Q4 = vaddq_f32(*(float32x4_t *)a2, *(float32x4_t *)a2);
  v9 = (float32x2_t)vdup_lane_s32((int32x2_t)vmul_f32(*(float32x2_t *)a2, *(float32x2_t *)_Q4.f32), 0);
  v10 = vmul_lane_f32(v5, *(float32x2_t *)_Q4.f32, 1);
  v11 = vmul_laneq_f32(v6, _Q4, 2);
  v12 = vmul_n_f32(v5, _Q4.f32[0]);
  v13 = vmul_n_f32(v6, _Q4.f32[0]);
  v14 = vmul_n_f32(v7, _Q4.f32[0]);
  v15 = vmul_lane_f32(v6, *(float32x2_t *)_Q4.f32, 1);
  v16 = vmul_lane_f32(v7, *(float32x2_t *)_Q4.f32, 1);
  v17 = vmul_laneq_f32(v7, _Q4, 2);
  __asm { FMOV            V4.2S, #1.0 }
  v22 = vsub_f32(*(float32x2_t *)_Q4.f32, v9);
  LODWORD(v23) = vsub_f32(v13, v16).u32[0];
  LODWORD(v24) = vadd_f32(v15, v14).u32[0];
  HIDWORD(v23) = vsub_f32(v12, v17).i32[1];
  v27[0] = (float)(1.0 - v10.f32[1]) - v11.f32[1];
  LODWORD(v27[1]) = vadd_f32(v12, v17).u32[0];
  v28 = v23;
  v29 = vsub_f32(v22, v11).u32[0];
  HIDWORD(v24) = vadd_f32(v13, v16).i32[1];
  v30 = v24;
  v31 = vzip1_s32((int32x2_t)vsub_f32(v15, v14), (int32x2_t)vsub_f32(v22, v10));
  v32 = *(_DWORD *)(a2 + 16);
  *(_QWORD *)&v25 = *(_QWORD *)(a2 + 20);
  *((_QWORD *)&v25 + 1) = *(_QWORD *)(a1 + 4);
  v33 = v25;
  v34 = *(_DWORD *)(a1 + 12);
  return ((uint64_t (*)(float *))physx::Gu::gMidphaseBoxOverlapTable[*(unsigned __int16 *)(v4 + 8)
                                                                             - 3])(v27);
}

uint64_t GeomOverlapCallback_ConvexMesh(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  BOOL v8;
  char v9;
  uint64_t v10;
  uint64_t v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  float v15;
  float v16;
  float v17;
  float v18;
  float v19;
  float v20;
  float v21;
  float v22;
  float v23;
  float v24;
  float v25;
  float v26;
  float v27;
  float v28;
  float v29;
  int v30;
  float v31;
  float v32;
  float v33;
  float v34;
  float v35;
  float v36;
  float v37;
  float v38;
  float v39;
  float v40;
  float v41;
  float v42;
  float v43;
  float v44;
  float v45;
  float v46;
  float v47;
  float v48;
  float v49;
  float v50;
  float v51;
  float v52;
  float v53;
  float v54;
  float v55;
  float32x2_t v56;
  float32x2_t v57;
  double v58;
  float32x4_t v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  float32x4_t v63;
  float32x4_t v64;
  float32x4_t v65;
  float32x4_t v71;
  float32x4_t v72;
  uint64_t v73;
  unsigned int v74;
  char v75;
  __int32 v76;
  uint64_t v77;
  float32x4_t v78;
  float32x4_t v79;
  float32x4_t v80;
  float32x4_t v81;
  float32x4_t v82;
  float32x4_t v83;
  int v84;
  float32x4_t v85;
  float32x2_t v86;
  float32x2_t v87;
  float32x2_t v88;
  float32x4_t v89;
  float32x2_t v90;
  float32x2_t v91;
  float32x2_t v92;
  float32x2_t v93;
  float32x2_t v94;
  float32x2_t v95;
  float32x2_t v96;
  float32x2_t v97;
  float32x2_t v98;
  float32x2_t v99;
  float32x2_t v100;
  int8x8_t v101;
  float32x4_t v102;
  int32x2_t v103;
  int8x8_t v104;
  int8x8_t v105;
  float32x4_t v106;
  float32x4_t v107;
  float32x4_t v108;
  float32x4_t v109;
  float32x4_t v110;
  float32x4_t v111;
  float32x4_t v112;
  float32x4_t v113;
  float32x4_t v114;
  float32x4_t v115;
  float32x4_t v116;
  float32x4_t v117;
  float32x4_t v118;
  float32x4_t v119;
  float32x4_t v120;
  float32x4_t v121;
  float32x4_t v122;
  float32x4_t v123;
  float32x4_t v124;
  float32x4_t v125;
  float32x4_t v126;
  float32x4_t v127;
  float32x4_t v128;
  float32x4_t v129;
  float32x4_t v130;
  float32x4_t v131;
  float32x4_t v132;
  float32x4_t v133;
  float32x4_t v134;
  float32x4_t v135;
  float32x4_t v136;
  int32x4_t v137;
  uint64_t v138;
  int32x2_t v139;
  float v140;
  float v141;
  float v142;
  float v143;
  float v144;
  float v145;
  float v146;
  float v147;
  unsigned int v148;
  unsigned int v149;
  unsigned int v150;
  float v151;
  float v152;
  float v153;
  __int128 v154;
  float32x2_t v155;
  float32x2_t v156;
  float32x2_t v157;
  float32x2_t v158;
  float32x2_t v159;
  float32x2_t v160;
  float32x2_t v161;
  float32x2_t v162;
  float32x2_t v163;
  float32x2_t v164;
  __int128 v165;
  __int128 v166;
  __int128 v167;
  __int128 v168;
  __int128 v169;
  __int128 v170;
  float v172;
  float v173;
  float v174;
  float v175;
  float v176;
  float v177;
  float v178;
  float v179;
  float v180;
  float v181;
  float v182;
  float v183;
  float32x2_t v184;
  float v185;
  float32x2_t v186;
  float v187;
  double v188;
  float v189;
  float v190[9];
  uint64_t v191;
  int v192;
  float v193[9];
  uint64_t v194;
  int v195;
  _OWORD v196[2];
  __int128 v197;
  __int128 v198;
  uint64_t v199;
  char v200;
  _BYTE v201[32];
  __int128 v202;
  __int128 v203;
  uint64_t v204;
  char v205;
  uint64_t (**v206)();
  int v207;
  __int128 v208;
  __int128 v209;
  __int128 v210;
  int32x4_t v211;
  __int128 v212;
  float32x4_t v213;
  float32x2_t v214;
  float v215;
  int v216;
  char v217;
  float32x4_t v218;
  float32x4_t v219;
  float32x4_t v220;
  float32x4_t v221;
  float32x4_t v222;
  float32x4_t v223;
  uint64_t v224;
  uint64_t v225;
  uint64_t v226;
  char v227;
  __int128 v228;
  __int128 v229;
  __int128 v230;
  __int128 v231;
  __int128 v232;
  __int128 v233;
  __int128 v234;
  unsigned __int8 v235;
  char v236;
  uint64_t v237;

  v237 = *MEMORY[0x24BDAC8D0];
  v8 = *(float *)(a1 + 4) == 1.0 && *(float *)(a1 + 8) == 1.0 && *(float *)(a1 + 12) == 1.0;
  v9 = *(float *)(a3 + 4) == 1.0 && *(float *)(a3 + 8) == 1.0 && *(float *)(a3 + 12) == 1.0;
  v10 = *(_QWORD *)(a1 + 32);
  v11 = *(_QWORD *)(a3 + 40);
  v12 = xmmword_2260E5F10;
  *(_OWORD *)v201 = xmmword_2260E5F10;
  *(_OWORD *)&v201[16] = xmmword_2260E5F10;
  v13 = xmmword_2260FD430;
  v14 = xmmword_2260E5F20;
  v202 = xmmword_2260FD430;
  v203 = xmmword_2260E5F20;
  v204 = 0x3F80000000000000;
  v205 = 0;
  if (!v8)
  {
    physx::Cm::FastVertex2ShapeScaling::init((uint64_t)v201, (float *)(a1 + 4), (float *)(a1 + 16));
    v13 = xmmword_2260FD430;
    v14 = xmmword_2260E5F20;
    v12 = xmmword_2260E5F10;
  }
  v196[0] = v12;
  v196[1] = v12;
  v197 = v13;
  v198 = v14;
  v199 = 0x3F80000000000000;
  v200 = 0;
  if ((v9 & 1) == 0)
    physx::Cm::FastVertex2ShapeScaling::init((uint64_t)v196, (float *)(a3 + 4), (float *)(a3 + 16));
  v15 = *(float *)a2;
  v16 = *(float *)(a2 + 4);
  v17 = *(float *)(a2 + 8);
  v18 = *(float *)(a2 + 12);
  v19 = v16 + v16;
  v20 = v17 + v17;
  v21 = v16 * (float)(v16 + v16);
  v22 = v17 * (float)(v17 + v17);
  v23 = (float)(v15 + v15) * v16;
  v24 = (float)(v15 + v15) * v17;
  v25 = (float)(v15 + v15) * v18;
  v26 = v19 * v17;
  v27 = v19 * v18;
  v28 = v20 * v18;
  v193[0] = (float)(1.0 - v21) - v22;
  v193[1] = v23 + v28;
  v29 = 1.0 - (float)(v15 * (float)(v15 + v15));
  v193[2] = v24 - v27;
  v193[3] = v23 - v28;
  v193[4] = v29 - v22;
  v193[5] = v26 + v25;
  v193[6] = v24 + v27;
  v193[7] = v26 - v25;
  v194 = *(_QWORD *)(a2 + 16);
  v30 = *(_DWORD *)(a2 + 24);
  v193[8] = v29 - v21;
  v195 = v30;
  v31 = *(float *)a4;
  v32 = *(float *)(a4 + 4);
  v33 = *(float *)(a4 + 8);
  v34 = *(float *)(a4 + 12);
  v35 = v32 + v32;
  v36 = v33 + v33;
  v37 = v32 * (float)(v32 + v32);
  v38 = v33 * (float)(v33 + v33);
  v39 = (float)(v31 + v31) * v32;
  v40 = (float)(v31 + v31) * v33;
  v41 = (float)(v31 + v31) * v34;
  v42 = v35 * v33;
  v43 = v35 * v34;
  v44 = v36 * v34;
  v190[0] = (float)(1.0 - v37) - v38;
  v190[1] = v39 + v44;
  v45 = 1.0 - (float)(v31 * (float)(v31 + v31));
  v190[2] = v40 - v43;
  v190[3] = v39 - v44;
  v190[4] = v45 - v38;
  v190[5] = v42 + v41;
  v190[6] = v40 + v43;
  v190[7] = v42 - v41;
  v190[8] = v45 - v37;
  v191 = *(_QWORD *)(a4 + 16);
  v192 = *(_DWORD *)(a4 + 24);
  v46 = *(float *)(v10 + 32);
  v47 = *(float *)(v10 + 36);
  v48 = *(float *)(v10 + 40);
  v49 = (float)((float)(v46 * *(float *)&v201[8]) + (float)(v47 * *(float *)&v201[20])) + (float)(v48 * *(float *)&v202);
  v50 = *(float *)(v10 + 44);
  v51 = *(float *)(v10 + 48);
  v52 = *(float *)(v10 + 52);
  v53 = (float)(fabsf(*(float *)&v201[8] * v50) + fabsf(*(float *)&v201[20] * v51)) + fabsf(*(float *)&v202 * v52);
  v54 = v49 - v53;
  v55 = v49 + v53;
  v56 = vadd_f32(vadd_f32(vmul_n_f32(*(float32x2_t *)v201, v46), vmul_n_f32(*(float32x2_t *)&v201[12], v47)), vmul_n_f32(*(float32x2_t *)&v201[24], v48));
  v57 = vadd_f32(vadd_f32(vabs_f32(vmul_n_f32(*(float32x2_t *)v201, v50)), vabs_f32(vmul_n_f32(*(float32x2_t *)&v201[12], v51))), vabs_f32(vmul_n_f32(*(float32x2_t *)&v201[24], v52)));
  v186 = vsub_f32(v56, v57);
  v187 = v54;
  v58 = COERCE_DOUBLE(vadd_f32(v56, v57));
  v188 = v58;
  v189 = v55;
  LODWORD(v58) = 0;
  physx::Gu::computeHullOBB(&v172, (uint64_t)&v186, v193, v190, (uint64_t)v196, v9, v58);
  v207 = 2;
  v206 = &off_24ED92070;
  v235 = 0;
  if ((v9 & 1) == 0)
  {
    *(_QWORD *)&v60 = *(_QWORD *)&v196[0];
    *((_QWORD *)&v60 + 1) = DWORD2(v196[0]);
    *(_QWORD *)&v61 = *(_QWORD *)((char *)v196 + 12);
    *((_QWORD *)&v61 + 1) = DWORD1(v196[1]);
    *(_QWORD *)&v62 = *((_QWORD *)&v196[1] + 1);
    *((_QWORD *)&v62 + 1) = v197;
    v232 = v60;
    v233 = v61;
    v234 = v62;
  }
  v63 = *(float32x4_t *)(a1 + 4);
  v64 = v63;
  v64.i32[3] = 0;
  v65 = *(float32x4_t *)(a1 + 16);
  __asm { FMOV            V0.2S, #1.0 }
  v71 = (float32x4_t)xmmword_2260E5F20;
  v72 = (float32x4_t)xmmword_2260E5F10;
  if (_ZF && v63.f32[1] == 1.0)
  {
    v73 = *(_QWORD *)(v10 + 72);
    v74 = *(unsigned __int8 *)(v10 + 71);
    v75 = *(_BYTE *)(v10 + 70);
    v76 = *(_DWORD *)(v10 + 92);
    v77 = *(_QWORD *)(v10 + 96);
    if (v63.f32[2] == 1.0)
    {
      v78 = (float32x4_t)xmmword_2260E5F40;
      v79 = 0uLL;
      v80 = (float32x4_t)xmmword_2260E5F10;
      v81 = (float32x4_t)xmmword_2260E5F20;
      v82 = (float32x4_t)xmmword_2260E5F40;
      goto LABEL_27;
    }
  }
  else
  {
    v73 = *(_QWORD *)(v10 + 72);
    v74 = *(unsigned __int8 *)(v10 + 71);
    v75 = *(_BYTE *)(v10 + 70);
    v76 = *(_DWORD *)(v10 + 92);
    v77 = *(_QWORD *)(v10 + 96);
  }
  v83 = vrecpeq_f32(v64);
  v84 = 4;
  do
  {
    v83 = vmulq_f32(v83, vrecpsq_f32(v83, v64));
    --v84;
  }
  while (v84);
  *(int32x2_t *)v85.f32 = vdup_lane_s32(*(int32x2_t *)v63.f32, 0);
  v85.i64[1] = v85.u32[0];
  if ((~vuzp1_s8((int8x8_t)vmovn_s32(vceqq_f32(v85, v64)), (int8x8_t)_D0).u32[0] & 0xFFFFFF) != 0)
  {
    v86 = (float32x2_t)vdup_lane_s32(*(int32x2_t *)v65.f32, 1);
    v87 = (float32x2_t)vdup_laneq_s32((int32x4_t)v65, 2);
    v88 = (float32x2_t)vdup_laneq_s32((int32x4_t)v65, 3);
    v89 = vaddq_f32(v65, v65);
    v90 = (float32x2_t)vdup_lane_s32((int32x2_t)vmul_f32(*(float32x2_t *)v65.f32, *(float32x2_t *)v89.f32), 0);
    v91 = vmul_lane_f32(v86, *(float32x2_t *)v89.f32, 1);
    v92 = vmul_laneq_f32(v87, v89, 2);
    v93 = vmul_n_f32(v86, v89.f32[0]);
    v94 = vmul_n_f32(v87, v89.f32[0]);
    v95 = vmul_n_f32(v88, v89.f32[0]);
    v96 = vmul_lane_f32(v87, *(float32x2_t *)v89.f32, 1);
    v97 = vmul_lane_f32(v88, *(float32x2_t *)v89.f32, 1);
    v98 = vmul_laneq_f32(v88, v89, 2);
    v99 = vsub_f32(_D0, v90);
    v100 = (float32x2_t)vext_s8((int8x8_t)vsub_f32(vsub_f32(_D0, v91), v92), (int8x8_t)vadd_f32(v93, v98), 4uLL);
    v101 = (int8x8_t)vsub_f32(v93, v98);
    *(float32x2_t *)v102.f32 = v100;
    v102.i64[1] = vsub_f32(v94, v97).u32[0];
    v103 = (int32x2_t)vext_s8(v101, (int8x8_t)vsub_f32(v99, v92), 4uLL);
    v104 = (int8x8_t)vadd_f32(v94, v97);
    *(int8x8_t *)v89.f32 = vext_s8((int8x8_t)vdup_lane_s32((int32x2_t)v100, 0), (int8x8_t)v103, 4uLL);
    v105 = (int8x8_t)vdup_lane_s32(v103, 1);
    *(int32x2_t *)v106.f32 = v103;
    v106.i64[1] = vadd_f32(v96, v95).u32[0];
    *(int8x8_t *)v107.f32 = vext_s8(v104, (int8x8_t)vsub_f32(v96, v95), 4uLL);
    *(int8x8_t *)v108.f32 = vext_s8((int8x8_t)v100, v105, 4uLL);
    v107.i64[1] = vsub_f32(v99, v91).u32[0];
    v89.i64[1] = vdup_lane_s32(*(int32x2_t *)v107.f32, 0).u32[0];
    v108.i64[1] = vdup_lane_s32(*(int32x2_t *)v107.f32, 1).u32[0];
    *(int8x8_t *)v109.f32 = vext_s8((int8x8_t)vdup_lane_s32(*(int32x2_t *)&v102.u32[2], 0), *(int8x8_t *)&v106.u32[2], 4uLL);
    v109.i64[1] = vdup_lane_s32(*(int32x2_t *)&v107.u32[2], 0).u32[0];
    v110 = vmulq_n_f32(v89, v63.f32[0]);
    v110.i32[3] = 0;
    v111 = vmulq_lane_f32(v108, *(float32x2_t *)v63.f32, 1);
    v111.i32[3] = 0;
    v112 = vmulq_laneq_f32(v109, v63, 2);
    v112.i32[3] = 0;
    v113 = vmulq_n_f32(v110, v100.f32[0]);
    v113.i32[3] = 0;
    v114 = vmulq_lane_f32(v111, v100, 1);
    v114.i32[3] = 0;
    v115 = vmulq_laneq_f32(v112, v102, 2);
    v115.i32[3] = 0;
    v72 = vaddq_f32(v115, vaddq_f32(v113, v114));
    v116 = vmulq_n_f32(v110, v106.f32[0]);
    v116.i32[3] = 0;
    v59 = vmulq_lane_f32(v111, *(float32x2_t *)v106.f32, 1);
    v59.i32[3] = 0;
    v117 = vmulq_laneq_f32(v112, v106, 2);
    v117.i32[3] = 0;
    v118 = vmulq_n_f32(v110, v107.f32[0]);
    v118.i32[3] = 0;
    v119 = vmulq_lane_f32(v111, *(float32x2_t *)v107.f32, 1);
    v119.i32[3] = 0;
    v71 = vaddq_f32(v117, vaddq_f32(v116, v59));
    v120 = vmulq_laneq_f32(v112, v107, 2);
    v120.i32[3] = 0;
    v78 = vaddq_f32(v120, vaddq_f32(v118, v119));
    v121 = vmulq_n_f32(v89, v83.f32[0]);
    v121.i32[3] = 0;
    v122 = vmulq_lane_f32(v108, *(float32x2_t *)v83.f32, 1);
    v122.i32[3] = 0;
    v123 = vmulq_laneq_f32(v109, v83, 2);
    v123.i32[3] = 0;
    v124 = vmulq_n_f32(v121, v102.f32[0]);
    v124.i32[3] = 0;
    v125 = vmulq_lane_f32(v122, *(float32x2_t *)v102.f32, 1);
    v125.i32[3] = 0;
    v126 = vmulq_laneq_f32(v123, v102, 2);
    v126.i32[3] = 0;
    v80 = vaddq_f32(v126, vaddq_f32(v124, v125));
    v127 = vmulq_n_f32(v121, v106.f32[0]);
    v127.i32[3] = 0;
    v128 = vmulq_lane_f32(v122, *(float32x2_t *)v106.f32, 1);
    v128.i32[3] = 0;
    v129 = vmulq_laneq_f32(v123, v106, 2);
    v129.i32[3] = 0;
    v130 = vmulq_n_f32(v121, v107.f32[0]);
    v130.i32[3] = 0;
    v131 = vmulq_lane_f32(v122, *(float32x2_t *)v107.f32, 1);
    v131.i32[3] = 0;
    v81 = vaddq_f32(v129, vaddq_f32(v127, v128));
    v132 = vmulq_laneq_f32(v123, v107, 2);
    v132.i32[3] = 0;
    v82 = vaddq_f32(v132, vaddq_f32(v130, v131));
  }
  else
  {
    v83.i32[3] = 0;
    v80 = vmulq_f32(v83, (float32x4_t)xmmword_2260E5F10);
    v72 = vmulq_f32(v64, (float32x4_t)xmmword_2260E5F10);
    v81 = vmulq_f32(v83, (float32x4_t)xmmword_2260E5F20);
    v71 = vmulq_f32(v64, (float32x4_t)xmmword_2260E5F20);
    v78 = vmulq_f32(v64, (float32x4_t)xmmword_2260E5F40);
    v82 = vmulq_f32(v83, (float32x4_t)xmmword_2260E5F40);
  }
  v133 = vmulq_f32(v72, (float32x4_t)0);
  v133.i32[3] = 0;
  v134 = vmulq_f32(v71, (float32x4_t)0);
  v134.i32[3] = 0;
  v135 = vmulq_f32(v78, (float32x4_t)0);
  v135.i32[3] = 0;
  v79 = vaddq_f32(vaddq_f32(v133, v134), v135);
LABEL_27:
  v136.i32[3] = 0;
  v136.i32[0] = v76;
  *(uint64_t *)((char *)v136.i64 + 4) = v77;
  v137 = (int32x4_t)vmulq_f32(v64, v136);
  *(float32x2_t *)v137.i8 = vpmin_f32((float32x2_t)vdup_laneq_s32(v137, 2), *(float32x2_t *)v137.i8);
  *(float *)v137.i32 = vpmin_f32(*(float32x2_t *)v137.i8, *(float32x2_t *)v137.i8).f32[0];
  v138 = *(_QWORD *)(v10 + 80);
  v139.i32[1] = 1028443341;
  v214 = vmul_n_f32((float32x2_t)0x3D4CCCCD3DCCCCCDLL, *(float *)v137.i32);
  v215 = 0.025 * *(float *)v137.i32;
  v218 = v72;
  v219 = v71;
  v220 = v78;
  v221 = v80;
  v222 = v81;
  v223 = v82;
  v140 = *(float *)(a2 + 4);
  v141 = *(float *)(a2 + 8);
  v142 = *(float *)(a2 + 12);
  v143 = *(float *)(a4 + 16) - *(float *)(a2 + 16);
  v80.f32[0] = *(float *)(a4 + 20) - *(float *)(a2 + 20);
  v144 = *(float *)(a4 + 24) - *(float *)(a2 + 24);
  v145 = v143 + v143;
  v80.f32[0] = v80.f32[0] + v80.f32[0];
  v146 = v144 + v144;
  v136.f32[0] = (float)(v142 * v142) + -0.5;
  v147 = (float)((float)-(float)(v140 * v80.f32[0]) - (float)(*(float *)a2 * v145)) - (float)(v141 * v146);
  *(float *)&v148 = (float)((float)(v142 * (float)((float)(v141 * v80.f32[0]) - (float)(v140 * v146)))
                          + (float)(v145 * v136.f32[0]))
                  - (float)(*(float *)a2 * v147);
  *(float *)&v149 = (float)((float)(v142 * (float)((float)(*(float *)a2 * v146) - (float)(v141 * v145)))
                          + (float)(v80.f32[0] * v136.f32[0]))
                  - (float)(v140 * v147);
  *(float *)&v150 = (float)((float)(v142 * (float)((float)(v140 * v145) - (float)(*(float *)a2 * v80.f32[0])))
                          + (float)(v146 * v136.f32[0]))
                  - (float)(v141 * v147);
  v151 = *(float *)(a4 + 8);
  v80.i32[0] = *(_DWORD *)(a4 + 12);
  v152 = *(float *)(a4 + 4);
  v136.f32[0] = (float)(v142 * *(float *)a4) - (float)(*(float *)a2 * v80.f32[0]);
  v71.f32[0] = (float)((float)((float)(v142 * v152) - (float)(v140 * v80.f32[0])) - (float)(v141 * *(float *)a4))
             + (float)(v151 * *(float *)a2);
  v59.f32[0] = (float)((float)((float)(v142 * v151) - (float)(v141 * v80.f32[0])) - (float)(*(float *)a2 * v152))
             + (float)(*(float *)a4 * v140);
  v153 = *(float *)a2 * *(float *)a4;
  v137.i32[3] = 0;
  v216 = 0;
  v217 = 0;
  v224 = v10 + 32;
  v225 = v138;
  v226 = v73 + 20 * v74;
  v227 = v75;
  v136.f32[0] = (float)(v136.f32[0] - (float)(v140 * v151)) + (float)(v152 * v141);
  *(float *)v139.i32 = (float)((float)(v153 + (float)(v142 * v80.f32[0])) + (float)(v140 * v152)) + (float)(v141 * v151);
  *(_QWORD *)&v154 = __PAIR64__(v149, v148);
  *((_QWORD *)&v154 + 1) = v150;
  v155 = (float32x2_t)vdup_lane_s32(*(int32x2_t *)v59.f32, 0);
  v156 = (float32x2_t)vdup_lane_s32(v139, 0);
  v80.f32[0] = v136.f32[0] + v136.f32[0];
  v136.f32[0] = v136.f32[0] * (float)(v136.f32[0] + v136.f32[0]);
  v157 = vmul_n_f32((float32x2_t)vdup_lane_s32(*(int32x2_t *)v71.f32, 0), v71.f32[0] + v71.f32[0]);
  v158 = vmul_n_f32(v155, v59.f32[0] + v59.f32[0]);
  v159 = vmul_n_f32((float32x2_t)vdup_lane_s32(*(int32x2_t *)v80.f32, 0), v71.f32[0]);
  v160 = vmul_n_f32(v155, v80.f32[0]);
  v161 = vmul_n_f32(v156, v80.f32[0]);
  v162 = vmul_n_f32(v155, v71.f32[0] + v71.f32[0]);
  v163 = vmul_n_f32(v156, v71.f32[0] + v71.f32[0]);
  v164 = vmul_n_f32(v156, v59.f32[0] + v59.f32[0]);
  *(float32x2_t *)v136.f32 = vsub_f32(_D0, (float32x2_t)vdup_lane_s32(*(int32x2_t *)v136.f32, 0));
  *(int8x8_t *)&v165 = vext_s8((int8x8_t)vsub_f32(vsub_f32(_D0, v157), v158), (int8x8_t)vadd_f32(v159, v164), 4uLL);
  *((_QWORD *)&v165 + 1) = vsub_f32(v160, v163).u32[0];
  *(int8x8_t *)&v166 = vext_s8((int8x8_t)vsub_f32(v159, v164), (int8x8_t)vsub_f32(*(float32x2_t *)v136.f32, v158), 4uLL);
  *((_QWORD *)&v166 + 1) = vadd_f32(v161, v162).u32[0];
  *(int8x8_t *)&v167 = vext_s8((int8x8_t)vadd_f32(v160, v163), (int8x8_t)vsub_f32(v162, v161), 4uLL);
  *((_QWORD *)&v167 + 1) = vsub_f32(*(float32x2_t *)v136.f32, v157).u32[0];
  v228 = v165;
  v229 = v166;
  v230 = v167;
  v231 = v154;
  v236 = v9;
  *(_QWORD *)&v168 = __PAIR64__(LODWORD(v175), LODWORD(v172));
  *((_QWORD *)&v168 + 1) = LODWORD(v178);
  *(_QWORD *)&v169 = __PAIR64__(LODWORD(v176), LODWORD(v173));
  *((_QWORD *)&v169 + 1) = LODWORD(v179);
  *(_QWORD *)&v170 = __PAIR64__(LODWORD(v177), LODWORD(v174));
  *((_QWORD *)&v170 + 1) = LODWORD(v180);
  *(float *)v137.i32 = (float)((float)-(float)(v182 * v173) - (float)(v172 * v181)) - (float)(v174 * v183);
  *(float *)&v137.i32[1] = (float)((float)-(float)(v182 * v176) - (float)(v175 * v181)) - (float)(v177 * v183);
  *(float *)&v137.i32[2] = (float)((float)-(float)(v182 * v179) - (float)(v178 * v181)) - (float)(v180 * v183);
  v208 = v168;
  v209 = v169;
  v210 = v170;
  v211 = v137;
  *(float32x2_t *)&v165 = vadd_f32(v184, (float32x2_t)vdup_n_s32(0x3A83126Fu));
  *((float *)&v165 + 2) = v185 + 0.001;
  HIDWORD(v165) = 0;
  v212 = v165;
  v213 = v79;
  ((void (*)(uint64_t, float *, uint64_t (***)(), uint64_t, _QWORD))*(&physx::Gu::gMidphaseBoxCBOverlapTable
                                                                                       + *(unsigned __int16 *)(v11 + 8)
                                                                                       - 3))(v11, &v172, &v206, 1, 0);
  return v235;
}

uint64_t physx::Gu::RTree::load(uint64_t a1, void (***a2)(_QWORD, unsigned __int32 *, uint64_t), uint64_t a3, int a4)
{
  uint64_t v6;
  uint64_t result;
  unsigned int v8;
  uint8x8_t v9;
  uint64_t i;
  int16x8_t v11;
  uint64_t v12;
  uint8x8_t v13;
  uint64_t j;
  int16x8_t v15;
  uint64_t v16;
  uint8x8_t v17;
  uint64_t k;
  int16x8_t v19;
  uint64_t v20;
  uint8x8_t v21;
  uint64_t m;
  int16x8_t v23;
  int v24;
  uint64_t v25;
  unint64_t v26;
  unsigned int v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint8x8_t v37;
  uint64_t v38;
  uint64_t v39;
  int16x8_t v40;
  uint64_t v41;
  uint8x8_t v42;
  uint64_t v43;
  uint64_t v44;
  int16x8_t v45;
  uint64_t v46;
  uint8x8_t v47;
  uint64_t v48;
  uint64_t v49;
  int16x8_t v50;
  uint64_t v51;
  uint8x8_t v52;
  uint64_t v53;
  uint64_t v54;
  int16x8_t v55;
  uint64_t v56;
  uint8x8_t v57;
  uint64_t v58;
  uint64_t v59;
  int16x8_t v60;
  uint64_t v61;
  uint8x8_t v62;
  uint64_t v63;
  uint64_t v64;
  int16x8_t v65;
  uint64_t v66;
  uint8x8_t v67;
  uint64_t v68;
  uint64_t v69;
  int16x8_t v70;
  uint64_t v71;
  int v73;
  unsigned int v74;

  if ((*(_BYTE *)(a1 + 84) & 1) == 0)
  {
    v6 = *(_QWORD *)(a1 + 88);
    if (v6)
    {
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24, v6 - *(_QWORD *)(v6 - 8));
      *(_QWORD *)(a1 + 88) = 0;
    }
  }
  v73 = 0;
  (**a2)(a2, (unsigned __int32 *)((char *)&v73 + 3), 1);
  (**a2)(a2, (unsigned __int32 *)((char *)&v73 + 2), 1);
  (**a2)(a2, (unsigned __int32 *)((char *)&v73 + 1), 1);
  (**a2)(a2, (unsigned __int32 *)&v73, 1);
  result = 0;
  if (HIBYTE(v73) == 82 && BYTE2(v73) == 84 && BYTE1(v73) == 82 && v73 == 69)
  {
    v74 = 0;
    (**a2)(a2, &v74, 4);
    v8 = v74;
    if (v74 == 1 || v74 == 0x1000000)
    {
      (**a2)(a2, (unsigned __int32 *)a1, 16);
    }
    else
    {
      v27 = bswap32(v74);
      if (a4)
        v8 = v27;
      if (v8 >= 4)
        return 0;
      (**a2)(a2, (unsigned __int32 *)a1, 16);
      if (!a4)
      {
        (**a2)(a2, (unsigned __int32 *)(a1 + 16), 16);
        (**a2)(a2, (unsigned __int32 *)(a1 + 32), 16);
        (**a2)(a2, (unsigned __int32 *)(a1 + 48), 16);
        v24 = 0;
        goto LABEL_20;
      }
    }
    for (i = 0; i != 16; i += 4)
    {
      v9.i32[0] = *(_DWORD *)(a1 + i);
      v11 = (int16x8_t)vmovl_u8(v9);
      *(int16x4_t *)v11.i8 = vrev64_s16(*(int16x4_t *)v11.i8);
      v9 = (uint8x8_t)vmovn_s16(v11);
      *(_DWORD *)(a1 + i) = v9.i32[0];
    }
    v12 = a1 + 16;
    (**a2)(a2, (unsigned __int32 *)(a1 + 16), 16);
    for (j = 0; j != 16; j += 4)
    {
      v13.i32[0] = *(_DWORD *)(v12 + j);
      v15 = (int16x8_t)vmovl_u8(v13);
      *(int16x4_t *)v15.i8 = vrev64_s16(*(int16x4_t *)v15.i8);
      v13 = (uint8x8_t)vmovn_s16(v15);
      *(_DWORD *)(v12 + j) = v13.i32[0];
    }
    v16 = a1 + 32;
    (**a2)(a2, (unsigned __int32 *)(a1 + 32), 16);
    for (k = 0; k != 16; k += 4)
    {
      v17.i32[0] = *(_DWORD *)(v16 + k);
      v19 = (int16x8_t)vmovl_u8(v17);
      *(int16x4_t *)v19.i8 = vrev64_s16(*(int16x4_t *)v19.i8);
      v17 = (uint8x8_t)vmovn_s16(v19);
      *(_DWORD *)(v16 + k) = v17.i32[0];
    }
    v20 = a1 + 48;
    (**a2)(a2, (unsigned __int32 *)(a1 + 48), 16);
    for (m = 0; m != 16; m += 4)
    {
      v21.i32[0] = *(_DWORD *)(v20 + m);
      v23 = (int16x8_t)vmovl_u8(v21);
      *(int16x4_t *)v23.i8 = vrev64_s16(*(int16x4_t *)v23.i8);
      v21 = (uint8x8_t)vmovn_s16(v23);
      *(_DWORD *)(v20 + m) = v21.i32[0];
    }
    v24 = 1;
LABEL_20:
    *(_DWORD *)(a1 + 64) = physx::readDword(v24, a2);
    *(_DWORD *)(a1 + 68) = physx::readDword(v24, a2);
    *(_DWORD *)(a1 + 72) = physx::readDword(v24, a2);
    *(_DWORD *)(a1 + 76) = physx::readDword(v24, a2);
    *(_DWORD *)(a1 + 80) = physx::readDword(v24, a2);
    physx::readDword(v24, a2);
    v25 = (*(uint64_t (**)(uint64_t, uint64_t, const char *, const char *, uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24)
                                                                                           + 16))(physx::shdfnd::Foundation::mInstance + 24, 112 * *(unsigned int *)(a1 + 80) + 135, "NonTrackedAlloc", "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/common/src/../../geomutils/src/mesh/GuRTree.cpp", 87);
    if (v25)
    {
      v26 = (v25 + 135) & 0xFFFFFFFFFFFFFF80;
      *(_QWORD *)(v26 - 8) = v26 - v25;
    }
    else
    {
      v26 = 0;
    }
    v28 = a1;
    *(_QWORD *)(a1 + 88) = v26;
    if (*(_DWORD *)(a1 + 80))
    {
      v71 = 0;
      v29 = 0;
      v30 = 16;
      v31 = 32;
      v32 = 48;
      v33 = 64;
      v34 = 80;
      v35 = 96;
      do
      {
        v36 = *(_QWORD *)(v28 + 88);
        (**a2)(a2, (unsigned __int32 *)(v36 + 112 * v29), 16);
        if (v24)
        {
          v38 = 0;
          v39 = v36 + v71;
          do
          {
            v37.i32[0] = *(_DWORD *)(v39 + v38);
            v40 = (int16x8_t)vmovl_u8(v37);
            *(int16x4_t *)v40.i8 = vrev64_s16(*(int16x4_t *)v40.i8);
            v37 = (uint8x8_t)vmovn_s16(v40);
            *(_DWORD *)(v39 + v38) = v37.i32[0];
            v38 += 4;
          }
          while (v38 != 16);
        }
        v41 = *(_QWORD *)(a1 + 88);
        (**a2)(a2, (unsigned __int32 *)(v41 + 112 * v29 + 16), 16);
        if (v24)
        {
          v43 = 0;
          v44 = v41 + v30;
          do
          {
            v42.i32[0] = *(_DWORD *)(v44 + v43);
            v45 = (int16x8_t)vmovl_u8(v42);
            *(int16x4_t *)v45.i8 = vrev64_s16(*(int16x4_t *)v45.i8);
            v42 = (uint8x8_t)vmovn_s16(v45);
            *(_DWORD *)(v44 + v43) = v42.i32[0];
            v43 += 4;
          }
          while (v43 != 16);
        }
        v46 = *(_QWORD *)(a1 + 88);
        (**a2)(a2, (unsigned __int32 *)(v46 + 112 * v29 + 32), 16);
        if (v24)
        {
          v48 = 0;
          v49 = v46 + v31;
          do
          {
            v47.i32[0] = *(_DWORD *)(v49 + v48);
            v50 = (int16x8_t)vmovl_u8(v47);
            *(int16x4_t *)v50.i8 = vrev64_s16(*(int16x4_t *)v50.i8);
            v47 = (uint8x8_t)vmovn_s16(v50);
            *(_DWORD *)(v49 + v48) = v47.i32[0];
            v48 += 4;
          }
          while (v48 != 16);
        }
        v51 = *(_QWORD *)(a1 + 88);
        (**a2)(a2, (unsigned __int32 *)(v51 + 112 * v29 + 48), 16);
        if (v24)
        {
          v53 = 0;
          v54 = v51 + v32;
          do
          {
            v52.i32[0] = *(_DWORD *)(v54 + v53);
            v55 = (int16x8_t)vmovl_u8(v52);
            *(int16x4_t *)v55.i8 = vrev64_s16(*(int16x4_t *)v55.i8);
            v52 = (uint8x8_t)vmovn_s16(v55);
            *(_DWORD *)(v54 + v53) = v52.i32[0];
            v53 += 4;
          }
          while (v53 != 16);
        }
        v56 = *(_QWORD *)(a1 + 88);
        (**a2)(a2, (unsigned __int32 *)(v56 + 112 * v29 + 64), 16);
        if (v24)
        {
          v58 = 0;
          v59 = v56 + v33;
          do
          {
            v57.i32[0] = *(_DWORD *)(v59 + v58);
            v60 = (int16x8_t)vmovl_u8(v57);
            *(int16x4_t *)v60.i8 = vrev64_s16(*(int16x4_t *)v60.i8);
            v57 = (uint8x8_t)vmovn_s16(v60);
            *(_DWORD *)(v59 + v58) = v57.i32[0];
            v58 += 4;
          }
          while (v58 != 16);
        }
        v61 = *(_QWORD *)(a1 + 88);
        (**a2)(a2, (unsigned __int32 *)(v61 + 112 * v29 + 80), 16);
        if (v24)
        {
          v63 = 0;
          v64 = v61 + v34;
          do
          {
            v62.i32[0] = *(_DWORD *)(v64 + v63);
            v65 = (int16x8_t)vmovl_u8(v62);
            *(int16x4_t *)v65.i8 = vrev64_s16(*(int16x4_t *)v65.i8);
            v62 = (uint8x8_t)vmovn_s16(v65);
            *(_DWORD *)(v64 + v63) = v62.i32[0];
            v63 += 4;
          }
          while (v63 != 16);
        }
        v66 = *(_QWORD *)(a1 + 88);
        (**a2)(a2, (unsigned __int32 *)(v66 + 112 * v29 + 96), 16);
        if (v24)
        {
          v68 = 0;
          v69 = v66 + v35;
          do
          {
            v67.i32[0] = *(_DWORD *)(v69 + v68);
            v70 = (int16x8_t)vmovl_u8(v67);
            *(int16x4_t *)v70.i8 = vrev64_s16(*(int16x4_t *)v70.i8);
            v67 = (uint8x8_t)vmovn_s16(v70);
            *(_DWORD *)(v69 + v68) = v67.i32[0];
            v68 += 4;
          }
          while (v68 != 16);
        }
        ++v29;
        v28 = a1;
        v71 += 112;
        v30 += 112;
        v31 += 112;
        v32 += 112;
        v33 += 112;
        v34 += 112;
        v35 += 112;
      }
      while (v29 < *(unsigned int *)(a1 + 80));
    }
    return 1;
  }
  return result;
}

uint64_t physx::Gu::RTree::refitAllStaticTree(uint64_t result, uint64_t (***a2)(_QWORD, _QWORD, __int128 *, __int128 *), float *a3)
{
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  float v10;
  uint64_t v11;
  float *v12;
  float v13;
  float v14;
  uint64_t v15;
  _DWORD *v16;
  uint64_t v17;
  unsigned int v18;
  uint64_t v19;
  uint64_t v20;
  float *v21;
  float *v22;
  float *v23;
  float *v24;
  uint64_t v25;
  char v26;
  float v27;
  float v28;
  float v29;
  float *v30;
  float v31;
  float v32;
  uint64_t v33;
  uint64_t v34;
  int v35;
  _DWORD *v36;
  uint64_t v37;
  uint64_t v38;
  float v39;
  float v40;
  float v41;
  float v42;
  float v43;
  float v44;
  uint64_t v45;
  uint64_t v46;
  float v47;
  float v48;
  float v49;
  float v50;
  float v51;
  float v52;
  float *v53;
  float v54;
  float v55;
  uint64_t v57;
  __int128 v58;
  __int128 v59;

  v57 = result;
  v3 = *(unsigned int *)(result + 80);
  if ((int)v3 >= 1)
  {
    v5 = *(_QWORD *)(result + 88) + 48;
    do
    {
      v6 = 0;
      v7 = v3--;
      v8 = *(_QWORD *)(v57 + 88);
      v9 = v8 + 112 * v3;
      do
      {
        v10 = *(float *)(v9 + 4 * v6);
        v11 = v8 + 112 * v3 + 4 * v6;
        v13 = *(float *)(v11 + 48);
        v12 = (float *)(v11 + 48);
        v14 = v13;
        if (v10 <= v13)
        {
          v15 = v8 + 112 * v3 + 4 * v6;
          v18 = *(_DWORD *)(v15 + 96);
          v16 = (_DWORD *)(v15 + 96);
          v17 = v18;
          if ((v18 & 1) != 0)
          {
            v58 = 0u;
            v59 = 0u;
            result = (**a2)(a2, (*v16 - 1), &v59, &v58);
            v33 = *(_QWORD *)((char *)&v59 + 4);
            v34 = v58;
            v35 = DWORD2(v58);
            *(_DWORD *)(v9 + 4 * v6) = v59;
            v36 = (_DWORD *)(v8 + 112 * v3 + 4 * v6);
            v36[4] = v33;
            v36[8] = HIDWORD(v33);
            *(_DWORD *)v12 = v34;
            v36[16] = HIDWORD(v34);
            v36[20] = v35;
          }
          else
          {
            v19 = 0;
            v20 = v8 + 112 * v3 + 4 * v6;
            v21 = (float *)(v20 + 16);
            v22 = (float *)(v20 + 32);
            v23 = (float *)(v20 + 64);
            v24 = (float *)(v20 + 80);
            v25 = v5 + v17;
            v26 = 1;
            do
            {
              v27 = *(float *)(v25 + v19 - 48);
              if (v27 <= *(float *)(v25 + v19))
              {
                if ((v26 & 1) != 0)
                {
                  *(float *)(v9 + 4 * v6) = v27;
                  *v21 = *(float *)(v25 + v19 - 32);
                  *v22 = *(float *)(v25 + v19 - 16);
                  v14 = *(float *)(v25 + v19);
                  *v12 = v14;
                  *v23 = *(float *)(v25 + v19 + 16);
                  v28 = *(float *)(v25 + v19 + 32);
                }
                else
                {
                  if (v10 < v27)
                    v27 = v10;
                  *(float *)(v9 + 4 * v6) = v27;
                  v29 = *v21;
                  v30 = (float *)(v25 + v19);
                  if (*v21 >= *(float *)(v25 + v19 - 32))
                    v29 = *(float *)(v25 + v19 - 32);
                  *v21 = v29;
                  v31 = *v22;
                  if (*v22 >= *(v30 - 4))
                    v31 = *(v30 - 4);
                  *v22 = v31;
                  if (v14 <= *v30)
                    v14 = *v30;
                  *v12 = v14;
                  v32 = *v23;
                  if (*v23 <= v30[4])
                    v32 = v30[4];
                  *v23 = v32;
                  v28 = *v24;
                  if (*v24 <= v30[8])
                    v28 = v30[8];
                }
                v26 = 0;
                *v24 = v28;
                v10 = v27;
              }
              v19 += 4;
            }
            while (v19 != 16);
          }
        }
        ++v6;
      }
      while (v6 != 4);
    }
    while (v7 > 1);
  }
  if (a3)
  {
    v37 = *(unsigned int *)(v57 + 68);
    if ((_DWORD)v37)
    {
      v38 = 0;
      v39 = a3[4];
      v40 = a3[5];
      v42 = *a3;
      v41 = a3[1];
      v44 = a3[2];
      v43 = a3[3];
      v45 = *(_QWORD *)(v57 + 88) + 48;
      do
      {
        v46 = -16;
        v47 = 3.4028e38;
        v48 = -3.4028e38;
        v49 = -3.4028e38;
        v50 = -3.4028e38;
        v51 = 3.4028e38;
        v52 = 3.4028e38;
        do
        {
          v53 = (float *)(v45 + v46);
          v54 = *(float *)(v45 + v46 - 32);
          v55 = *(float *)(v45 + v46 + 16);
          if (v54 <= v55)
          {
            if (v52 >= v54)
              v52 = *(float *)(v45 + v46 - 32);
            if (v51 >= *(v53 - 4))
              v51 = *(v53 - 4);
            if (v47 >= *v53)
              v47 = *v53;
            if (v50 <= v55)
              v50 = *(float *)(v45 + v46 + 16);
            if (v49 <= v53[8])
              v49 = v53[8];
            if (v48 <= v53[12])
              v48 = v53[12];
          }
          v46 += 4;
        }
        while (v46);
        if (v42 >= v52)
          v42 = v52;
        if (v41 >= v51)
          v41 = v51;
        if (v44 >= v47)
          v44 = v47;
        if (v43 <= v50)
          v43 = v50;
        if (v39 <= v49)
          v39 = v49;
        if (v40 <= v48)
          v40 = v48;
        if (!v38)
        {
          v42 = v52;
          v41 = v51;
          v44 = v47;
          v43 = v50;
          v39 = v49;
        }
        *a3 = v42;
        a3[1] = v41;
        if (!v38)
          v40 = v48;
        a3[2] = v44;
        a3[3] = v43;
        a3[4] = v39;
        a3[5] = v40;
        ++v38;
        v45 += 112;
      }
      while (v38 != v37);
    }
  }
  return result;
}

uint64_t physx::Gu::RTree::traverseRay<0>(uint64_t result, uint64_t a2, uint64_t a3, float32_t a4, uint64_t a5, uint64_t a6, uint64_t (***a7)(_QWORD, uint64_t, _DWORD *, float *))
{
  float32x4_t v7;
  uint64_t v8;
  uint64_t v10;
  float32x4_t v11;
  float32x4_t v12;
  int8x16_t v13;
  int8x16_t v14;
  float32x4_t v15;
  float32x4_t v16;
  float32x4_t v17;
  float32x4_t v18;
  float32x4_t v19;
  int32x4_t v20;
  uint64_t v21;
  uint64x2_t v22;
  _DWORD *v23;
  int v24;
  int64x2_t v25;
  int64x2_t v26;
  int32x2_t v27;
  uint64_t v28;
  uint64_t v29;
  float32x4_t *v30;
  float32x4_t v31;
  int8x16_t v32;
  float32x4_t v33;
  float32x4_t v34;
  float32x4_t v35;
  float32x4_t v36;
  float32x4_t v37;
  float32x4_t v38;
  float32x4_t v39;
  float32x4_t v40;
  float32x4_t v41;
  float32x4_t v42;
  float32x4_t v43;
  float32x4_t v44;
  int8x16_t v45;
  __int32 v46;
  int v47;
  int v48;
  __int32 v49;
  int v50;
  float32x4_t v51;
  float32x4_t v52;
  float32x4_t v53;
  float32x4_t v54;
  float32x4_t v55;
  float32x4_t v56;
  float32x4_t v57;
  float32x4_t v58;
  float32x4_t v59;
  int8x16_t v60;
  float v61;
  _DWORD v62[3];
  _QWORD v63[64];

  v63[63] = *MEMORY[0x24BDAC8D0];
  v8 = *(unsigned int *)(result + 68);
  if ((int)v8 - 1 >= 0)
  {
    v7.f32[0] = a4;
    v10 = *(_QWORD *)(result + 88);
    v11 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v7.f32, 0);
    v12.i64[0] = *(_QWORD *)a2;
    v12.i64[1] = *(unsigned int *)(a2 + 8);
    v13.i64[0] = *(_QWORD *)a3;
    v13.i64[1] = *(unsigned int *)(a3 + 8);
    v14.i64[0] = 0x8000000080000000;
    v14.i64[1] = 0x8000000080000000;
    v15 = (float32x4_t)vorrq_s8(vandq_s8(v13, v14), (int8x16_t)vmaxq_f32(vabsq_f32((float32x4_t)v13), (float32x4_t)vdupq_n_s32(0x3089705Fu)));
    v16 = vrecpeq_f32(v15);
    v17 = vmulq_f32(v16, vrecpsq_f32(v16, v15));
    v18.i64[0] = 0x4000000040000000;
    v18.i64[1] = 0x4000000040000000;
    v19 = vmulq_f32(v17, vmlsq_f32(v18, v17, v15));
    v20 = (int32x4_t)vmlsq_f32((float32x4_t)0, v12, v19);
    v57 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v19.f32, 1);
    v58 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v19.f32, 0);
    v55 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v20.i8, 0);
    v56 = (float32x4_t)vdupq_laneq_s32((int32x4_t)v19, 2);
    v53 = (float32x4_t)vdupq_laneq_s32(v20, 2);
    v54 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v20.i8, 1);
    v21 = (v8 + 1) & 0x1FFFFFFFELL;
    v22 = (uint64x2_t)vdupq_n_s64(v8 - 1);
    v23 = v63;
    v24 = 112 * v8 - 112;
    v25 = (int64x2_t)xmmword_2260E7EE0;
    v26 = vdupq_n_s64(2uLL);
    do
    {
      v27 = vmovn_s64((int64x2_t)vcgeq_u64(v22, (uint64x2_t)v25));
      if ((v27.i8[0] & 1) != 0)
        *(v23 - 1) = v24;
      if ((v27.i8[4] & 1) != 0)
        *v23 = v24 - 112;
      v25 = vaddq_s64(v25, v26);
      v23 += 2;
      v24 -= 224;
      v21 -= 2;
    }
    while (v21);
    v52 = (float32x4_t)vdupq_n_s32(0x3089705Fu);
    do
    {
      while (1)
      {
        v28 = (v8 - 1);
        v29 = v62[v28 + 2];
        if ((v29 & 1) != 0)
          break;
        v30 = (float32x4_t *)(v10 + v29);
        v31 = v30[3];
        v32 = (int8x16_t)vcgtq_f32(*v30, v31);
        v33 = vmlaq_f32(v55, v58, *v30);
        v34 = vmlaq_f32(v54, v57, v30[1]);
        v35 = vmlaq_f32(v53, v56, v30[2]);
        v36 = vmlaq_f32(v55, v58, v31);
        v37 = vmlaq_f32(v54, v57, v30[4]);
        v38 = vmlaq_f32(v53, v56, v30[5]);
        v39 = vminq_f32(v33, v36);
        v40 = vmaxq_f32(v33, v36);
        v41 = vminq_f32(v34, v37);
        v42 = vmaxq_f32(v34, v37);
        v43 = vmaxq_f32(vmaxq_f32(v39, v41), vminq_f32(v35, v38));
        v44 = vminq_f32(vminq_f32(v40, v42), vmaxq_f32(v35, v38));
        v45 = vorrq_s8(vorrq_s8((int8x16_t)vcgtq_f32(v43, v11), v32), vorrq_s8((int8x16_t)vcgtq_f32(v52, v44), (int8x16_t)vcgtq_f32(v43, v44)));
        v46 = v30[6].i32[1];
        v62[v28 + 2] = v30[6].i32[0];
        v47 = v45.i32[0] + v8;
        v62[v47 + 2] = v46;
        v48 = v45.i32[1] + v47 + 1;
        v49 = v30[6].i32[2];
        LODWORD(v30) = v30[6].i32[3];
        v62[v48 + 2] = v49;
        v50 = v45.i32[2] + v48 + 1;
        v62[v50 + 2] = (_DWORD)v30;
        LODWORD(v8) = v45.i32[3] + v50 + 1;
        if (!(_DWORD)v8)
          return result;
      }
      v59 = v7;
      v60 = (int8x16_t)v11;
      v62[0] = v29 - 1;
      v61 = v7.f32[0];
      result = (**a7)(a7, 1, v62, &v61);
      if (!(_DWORD)result)
        break;
      v51.f32[0] = v61;
      v7 = v59;
      v11 = (float32x4_t)vbslq_s8((int8x16_t)vdupq_lane_s32((int32x2_t)*(_OWORD *)&vmvnq_s8((int8x16_t)vceqq_f32(v59, v51)), 0), (int8x16_t)vdupq_lane_s32(*(int32x2_t *)v51.f32, 0), v60);
      if (v59.f32[0] != v61)
        v7.f32[0] = v61;
      LODWORD(v8) = v28;
    }
    while ((_DWORD)v28);
  }
  return result;
}

uint64_t physx::Gu::RTree::traverseRay<1>(uint64_t result, uint64_t a2, uint64_t a3, float32_t a4, uint64_t a5, uint64_t a6, uint64_t (***a7)(_QWORD, uint64_t, _DWORD *, float *), uint64_t a8)
{
  float32x4_t v8;
  uint64_t v9;
  uint64_t v11;
  float32x4_t v12;
  float32x4_t v13;
  float32x4_t v14;
  int8x16_t v15;
  int8x16_t v16;
  float32x4_t v17;
  float32x4_t v18;
  float32x4_t v19;
  float32x4_t v20;
  float32x4_t v21;
  int32x4_t v22;
  uint64_t v23;
  uint64x2_t v24;
  _DWORD *v25;
  int v26;
  int64x2_t v27;
  int64x2_t v28;
  int32x2_t v29;
  uint64_t v30;
  uint64_t v31;
  float32x4_t *v32;
  float32x4_t v33;
  int8x16_t v34;
  float32x4_t v35;
  float32x4_t v36;
  float32x4_t v37;
  float32x4_t v38;
  float32x4_t v39;
  float32x4_t v40;
  float32x4_t v41;
  float32x4_t v42;
  float32x4_t v43;
  float32x4_t v44;
  float32x4_t v45;
  float32x4_t v46;
  int8x16_t v47;
  __int32 v48;
  int v49;
  int v50;
  __int32 v51;
  int v52;
  float32x4_t v53;
  float32x4_t v54;
  float32x4_t v55;
  float32x4_t v56;
  float32x4_t v57;
  float32x4_t v58;
  float32x4_t v59;
  float32x4_t v60;
  float32x4_t v61;
  float32x4_t v62;
  float32x4_t v63;
  float32x4_t v64;
  int8x16_t v65;
  float v66;
  _DWORD v67[3];
  _QWORD v68[64];

  v68[63] = *MEMORY[0x24BDAC8D0];
  v9 = *(unsigned int *)(result + 68);
  if ((int)v9 - 1 >= 0)
  {
    v8.f32[0] = a4;
    v11 = *(_QWORD *)(result + 88);
    v12.i64[0] = *(_QWORD *)a8;
    v12.i64[1] = *(unsigned int *)(a8 + 8);
    v13 = vaddq_f32(v12, (float32x4_t)vdupq_n_s32(0x33D6BF95u));
    v62 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v13.f32, 1);
    v63 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v13.f32, 0);
    v61 = (float32x4_t)vdupq_laneq_s32((int32x4_t)v13, 2);
    v14 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v8.f32, 0);
    v13.i64[0] = *(_QWORD *)a2;
    v13.i64[1] = *(unsigned int *)(a2 + 8);
    v15.i64[0] = *(_QWORD *)a3;
    v15.i64[1] = *(unsigned int *)(a3 + 8);
    v16.i64[0] = 0x8000000080000000;
    v16.i64[1] = 0x8000000080000000;
    v17 = (float32x4_t)vorrq_s8(vandq_s8(v15, v16), (int8x16_t)vmaxq_f32(vabsq_f32((float32x4_t)v15), (float32x4_t)vdupq_n_s32(0x3089705Fu)));
    v18 = vrecpeq_f32(v17);
    v19 = vmulq_f32(v18, vrecpsq_f32(v18, v17));
    v20.i64[0] = 0x4000000040000000;
    v20.i64[1] = 0x4000000040000000;
    v21 = vmulq_f32(v19, vmlsq_f32(v20, v19, v17));
    v22 = (int32x4_t)vmlsq_f32((float32x4_t)0, v13, v21);
    v59 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v21.f32, 1);
    v60 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v21.f32, 0);
    v57 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v22.i8, 0);
    v58 = (float32x4_t)vdupq_laneq_s32((int32x4_t)v21, 2);
    v55 = (float32x4_t)vdupq_laneq_s32(v22, 2);
    v56 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v22.i8, 1);
    v23 = (v9 + 1) & 0x1FFFFFFFELL;
    v24 = (uint64x2_t)vdupq_n_s64(v9 - 1);
    v25 = v68;
    v26 = 112 * v9 - 112;
    v27 = (int64x2_t)xmmword_2260E7EE0;
    v28 = vdupq_n_s64(2uLL);
    do
    {
      v29 = vmovn_s64((int64x2_t)vcgeq_u64(v24, (uint64x2_t)v27));
      if ((v29.i8[0] & 1) != 0)
        *(v25 - 1) = v26;
      if ((v29.i8[4] & 1) != 0)
        *v25 = v26 - 112;
      v27 = vaddq_s64(v27, v28);
      v25 += 2;
      v26 -= 224;
      v23 -= 2;
    }
    while (v23);
    v54 = (float32x4_t)vdupq_n_s32(0x3089705Fu);
    do
    {
      while (1)
      {
        v30 = (v9 - 1);
        v31 = v67[v30 + 2];
        if ((v31 & 1) != 0)
          break;
        v32 = (float32x4_t *)(v11 + v31);
        v33 = v32[3];
        v34 = (int8x16_t)vcgtq_f32(*v32, v33);
        v35 = vmlaq_f32(v57, v60, vsubq_f32(*v32, v63));
        v36 = vmlaq_f32(v56, v59, vsubq_f32(v32[1], v62));
        v37 = vmlaq_f32(v55, v58, vsubq_f32(v32[2], v61));
        v38 = vmlaq_f32(v57, v60, vaddq_f32(v63, v33));
        v39 = vmlaq_f32(v56, v59, vaddq_f32(v62, v32[4]));
        v40 = vmlaq_f32(v55, v58, vaddq_f32(v61, v32[5]));
        v41 = vminq_f32(v35, v38);
        v42 = vmaxq_f32(v35, v38);
        v43 = vminq_f32(v36, v39);
        v44 = vmaxq_f32(v36, v39);
        v45 = vmaxq_f32(vmaxq_f32(v41, v43), vminq_f32(v37, v40));
        v46 = vminq_f32(vminq_f32(v42, v44), vmaxq_f32(v37, v40));
        v47 = vorrq_s8(vorrq_s8((int8x16_t)vcgtq_f32(v45, v14), v34), vorrq_s8((int8x16_t)vcgtq_f32(v54, v46), (int8x16_t)vcgtq_f32(v45, v46)));
        v48 = v32[6].i32[1];
        v67[v30 + 2] = v32[6].i32[0];
        v49 = v47.i32[0] + v9;
        v67[v49 + 2] = v48;
        v50 = v47.i32[1] + v49 + 1;
        v51 = v32[6].i32[2];
        LODWORD(v32) = v32[6].i32[3];
        v67[v50 + 2] = v51;
        v52 = v47.i32[2] + v50 + 1;
        v67[v52 + 2] = (_DWORD)v32;
        LODWORD(v9) = v47.i32[3] + v52 + 1;
        if (!(_DWORD)v9)
          return result;
      }
      v64 = v8;
      v65 = (int8x16_t)v14;
      v67[0] = v31 - 1;
      v66 = v8.f32[0];
      result = (**a7)(a7, 1, v67, &v66);
      if (!(_DWORD)result)
        break;
      v53.f32[0] = v66;
      v8 = v64;
      v14 = (float32x4_t)vbslq_s8((int8x16_t)vdupq_lane_s32((int32x2_t)*(_OWORD *)&vmvnq_s8((int8x16_t)vceqq_f32(v64, v53)), 0), (int8x16_t)vdupq_lane_s32(*(int32x2_t *)v53.f32, 0), v65);
      if (v64.f32[0] != v66)
        v8.f32[0] = v66;
      LODWORD(v9) = v30;
    }
    while ((_DWORD)v30);
  }
  return result;
}

uint64_t physx::Gu::RTree::traverseAABB(uint64_t result, _QWORD *a2, _QWORD *a3, uint64_t a4, uint64_t a5, uint64_t (***a6)(_QWORD, uint64_t, unsigned int *))
{
  int32x2_t v7;
  int32x2_t v8;
  int32x2_t v9;
  int32x2_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64x2_t v15;
  int v16;
  _DWORD *v17;
  int32x2_t v18;
  uint64_t v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  float32x4_t *v24;
  float32x4_t *v25;
  __int32 v26;
  float32x4_t v27;
  float32x4_t v28;
  float32x4_t v29;
  float32x4_t v30;
  float32x4_t v31;
  float32x4_t v32;
  unsigned int v33;
  _OWORD v34[2];
  _QWORD v35[64];

  v35[63] = *MEMORY[0x24BDAC8D0];
  v7 = *(int32x2_t *)a2;
  v8 = *(int32x2_t *)((char *)a2 + 4);
  v9 = *(int32x2_t *)a3;
  v10 = *(int32x2_t *)((char *)a3 + 4);
  v11 = *(unsigned int *)(result + 68);
  if ((int)v11 - 1 < 0)
  {
    v13 = 1;
  }
  else
  {
    v12 = 0;
    v13 = v11 + 1;
    v14 = (v11 + 1) & 0xFFFFFFFELL;
    v15 = (uint64x2_t)vdupq_n_s64(v11 - 1);
    v16 = 112 * v11 - 224;
    v17 = v35;
    do
    {
      v18 = vmovn_s64((int64x2_t)vcgeq_u64(v15, (uint64x2_t)vorrq_s8((int8x16_t)vdupq_n_s64(v12), (int8x16_t)xmmword_2260E7EE0)));
      if ((v18.i8[0] & 1) != 0)
        *(v17 - 1) = v16 + 112;
      if ((v18.i8[4] & 1) != 0)
        *v17 = v16;
      v12 += 2;
      v16 -= 224;
      v17 += 2;
    }
    while (v14 != v12);
  }
  v19 = 0;
  v31 = (float32x4_t)vdupq_lane_s32(v8, 0);
  v32 = (float32x4_t)vdupq_lane_s32(v7, 0);
  v29 = (float32x4_t)vdupq_lane_s32(v9, 0);
  v30 = (float32x4_t)vdupq_lane_s32(v8, 1);
  v27 = (float32x4_t)vdupq_lane_s32(v10, 1);
  v28 = (float32x4_t)vdupq_lane_s32(v10, 0);
  v20 = 1;
  v21 = *(_QWORD *)(result + 88);
  do
  {
    --v13;
    v22 = v19;
    if (!v20)
      v22 = *((unsigned int *)&v34[1] + v13 + 2);
    v23 = 0;
    v20 = 0;
    v24 = (float32x4_t *)(v21 + v22);
    v25 = v24 + 6;
    v34[0] = vorrq_s8(vorrq_s8(vorrq_s8((int8x16_t)vcgtq_f32(v24[1], v28), (int8x16_t)vcgtq_f32(*v24, v29)), vorrq_s8((int8x16_t)vcgtq_f32(v24[2], v27), (int8x16_t)vcgtq_f32(v32, v24[3]))), vorrq_s8((int8x16_t)vcgtq_f32(v31, v24[4]), (int8x16_t)vcgtq_f32(v30, v24[5])));
    do
    {
      v26 = v25->i32[v23];
      v33 = v26 & 0xFFFFFFFE;
      if (!*(_DWORD *)((char *)v34 + v23 * 4))
      {
        if ((v26 & 1) != 0)
        {
          result = (**a6)(a6, 1, &v33);
          if ((result & 1) == 0)
            return result;
        }
        else
        {
          *((_DWORD *)&v34[1] + v13++ + 2) = v26 & 0xFFFFFFFE;
          v20 = 1;
          v19 = v26 & 0xFFFFFFFE;
        }
      }
      ++v23;
    }
    while (v23 != 4);
  }
  while (v13 > 1);
  return result;
}

uint64_t physx::Gu::RTree::traverseOBB(uint64_t this, const physx::Gu::Box *a2, unsigned int a3, unsigned int *a4, physx::Gu::RTree::Callback *a5)
{
  float32x4_t v5;
  float32x4_t v6;
  uint64_t v8;
  __int128 v9;
  __int128 v10;
  int32x2_t v11;
  float32x2_t v12;
  int32x2_t v13;
  float32x4_t v14;
  float32x4_t v15;
  float32x4_t v16;
  float32x4_t v17;
  float32x4_t v18;
  float32x4_t v19;
  int v20;
  int v21;
  int *v22;
  uint64_t v23;
  int32x4_t v24;
  int32x4_t v25;
  int32x4_t v26;
  int v27;
  uint64_t v28;
  uint64_t v29;
  float32x4_t *v30;
  float32x4_t v31;
  float32x4_t v32;
  float32x4_t v33;
  float32x4_t v34;
  float32x4_t v35;
  float32x4_t v36;
  float32x4_t v37;
  float32x4_t v38;
  float32x4_t v39;
  float32x4_t v40;
  float32x4_t v41;
  float32x4_t v42;
  float32x4_t v43;
  float32x4_t v44;
  float32x4_t v45;
  float32x4_t v46;
  float32x4_t v47;
  float32x4_t v48;
  float32x4_t v49;
  float32x4_t v50;
  float32x4_t v51;
  float32x4_t v52;
  float32x4_t v53;
  float32x4_t v54;
  float32x4_t v55;
  float32x4_t v56;
  float32x4_t v57;
  float32x4_t v58;
  float32x4_t v59;
  float32x4_t v60;
  float32x4_t v61;
  float32x4_t v62;
  float32x4_t v63;
  float32x4_t v64;
  float32x4_t v65;
  float32x4_t v66;
  float32x4_t v67;
  float32x4_t v68;
  float32x4_t v69;
  float32x4_t v70;
  float32x4_t v71;
  float32x4_t v72;
  float32x4_t v73;
  float32x4_t v74;
  float32x4_t v75;
  float32x4_t v76;
  float32x4_t v77;
  float32x4_t v78;
  float32x4_t v79;
  float32x4_t v80;
  float32x4_t v81;
  float32x4_t v82;
  float32x4_t v83;
  float32x4_t v84;
  float32x4_t v85;
  float32x4_t v86;
  float32x4_t v87;
  int8x16_t v88;
  float32x4_t *v89;
  __int32 v90;
  float32x4_t v91;
  float32x4_t v92;
  float32x4_t v93;
  float32x4_t v94;
  float32x4_t v95;
  float32x4_t v96;
  float32x4_t v97;
  float32x4_t v98;
  float32x4_t v99;
  float32x4_t v100;
  float32x4_t v101;
  float32x4_t v102;
  float32x4_t v103;
  float32x4_t v104;
  float32x4_t v105;
  float32x4_t v106;
  float32x4_t v107;
  float32x4_t v108;
  float32x4_t v109;
  float32x4_t v110;
  float32x4_t v111;
  float32x4_t v112;
  float32x4_t v113;
  float32x4_t v114;
  float32x4_t v115;
  float32x4_t v116;
  float32x4_t v117;
  float32x4_t v118;
  float32x4_t v119;
  unsigned int v120;
  int8x16_t v121;
  int v122[128];
  uint64_t v123;

  v123 = *MEMORY[0x24BDAC8D0];
  v8 = *(_QWORD *)(this + 88);
  v9 = *(_OWORD *)((char *)a2 + 36);
  v10 = *(_OWORD *)((char *)a2 + 40);
  v11 = *(int32x2_t *)((char *)a2 + 48);
  v12 = *(float32x2_t *)((char *)a2 + 52);
  v13 = (int32x2_t)*(unsigned int *)a2;
  v14 = (float32x4_t)*(unsigned int *)a2;
  v14.i32[1] = *((_DWORD *)a2 + 1);
  v15 = v14;
  v15.i32[2] = *((_DWORD *)a2 + 2);
  v5.i32[0] = *((_DWORD *)a2 + 3);
  v16 = v5;
  v16.i32[1] = *((_DWORD *)a2 + 4);
  v17 = v16;
  v17.i32[2] = *((_DWORD *)a2 + 5);
  v6.i32[0] = *((_DWORD *)a2 + 6);
  v18 = v6;
  v18.i32[1] = *((_DWORD *)a2 + 7);
  v19 = v18;
  v19.i32[2] = *((_DWORD *)a2 + 8);
  v20 = *(_DWORD *)(this + 68);
  if (v20 - 1 < 0)
  {
    v22 = v122;
  }
  else
  {
    v21 = 112 * v20 - 112;
    v22 = v122;
    do
    {
      *v22++ = v21;
      v21 -= 112;
      --v20;
    }
    while (v20);
  }
  v23 = 0;
  v117 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)&v9, 0);
  v116 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)&v10, 0);
  v114 = (float32x4_t)vdupq_lane_s32(v13, 0);
  v115 = (float32x4_t)vdupq_lane_s32((int32x2_t)(v10 >> 32), 0);
  v112 = (float32x4_t)vdupq_laneq_s32((int32x4_t)v15, 2);
  v113 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v14.f32, 1);
  v110 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v16.f32, 1);
  v111 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v5.f32, 0);
  v108 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v6.f32, 0);
  v109 = (float32x4_t)vdupq_laneq_s32((int32x4_t)v17, 2);
  v106 = (float32x4_t)vdupq_laneq_s32((int32x4_t)v19, 2);
  v107 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v18.f32, 1);
  v105 = (float32x4_t)vdupq_lane_s32(v11, 0);
  v103 = (float32x4_t)vdupq_lane_s32((int32x2_t)v12, 0);
  v104 = vsubq_f32((float32x4_t)0, v105);
  v102 = vsubq_f32((float32x4_t)0, v103);
  v24 = (int32x4_t)vmlaq_n_f32((float32x4_t)0, v15, *(float *)v11.i32);
  v100 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v24.i8, 0);
  v101 = (float32x4_t)vdupq_lane_s32((int32x2_t)v12, 1);
  v25 = (int32x4_t)vmlaq_n_f32((float32x4_t)0, v17, v12.f32[0]);
  v98 = (float32x4_t)vdupq_laneq_s32(v24, 2);
  v99 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v24.i8, 1);
  v96 = vsubq_f32((float32x4_t)0, v101);
  v97 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v25.i8, 0);
  v26 = (int32x4_t)vmlaq_lane_f32((float32x4_t)0, v19, v12, 1);
  v94 = (float32x4_t)vdupq_laneq_s32(v25, 2);
  v95 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v25.i8, 1);
  v27 = 1;
  v92 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v26.i8, 1);
  v93 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v26.i8, 0);
  v91 = (float32x4_t)vdupq_laneq_s32(v26, 2);
  do
  {
    --v22;
    v28 = v23;
    if (!v27)
      v28 = *v22;
    v29 = 0;
    v27 = 0;
    v30 = (float32x4_t *)(v8 + v28);
    v31 = v30[1];
    v33 = v30[2];
    v32 = v30[3];
    v34 = v30[4];
    v35 = v30[5];
    v36 = vmaxq_f32(*v30, vminq_f32(v32, v117));
    v37 = vmaxq_f32(v31, vminq_f32(v34, v116));
    v38 = vmaxq_f32(v33, vminq_f32(v35, v115));
    v39 = vsubq_f32(v36, v117);
    v40 = vsubq_f32(v37, v116);
    v41 = vsubq_f32(v38, v115);
    v42 = vmaxq_f32(v104, vminq_f32(vmlaq_f32(vmlaq_f32(vmlaq_f32((float32x4_t)0, v112, v41), v113, v40), v114, v39), v105));
    v43 = vmaxq_f32(v102, vminq_f32(vmlaq_f32(vmlaq_f32(vmlaq_f32((float32x4_t)0, v109, v41), v110, v40), v111, v39), v103));
    v44 = vmaxq_f32(v96, vminq_f32(vmlaq_f32(vmlaq_f32(vmlaq_f32((float32x4_t)0, v106, v41), v107, v40), v108, v39), v101));
    v45 = vmlaq_f32(vmlaq_f32(vmlaq_f32(v117, v108, v44), v111, v43), v114, v42);
    v46 = vmlaq_f32(vmlaq_f32(vmlaq_f32(v116, v107, v44), v110, v43), v113, v42);
    v47 = vmlaq_f32(vmlaq_f32(vmlaq_f32(v115, v106, v44), v109, v43), v112, v42);
    v118 = vmaxq_f32(v33, vminq_f32(v35, v47));
    v119 = vmaxq_f32(v31, vminq_f32(v34, v46));
    v48.i64[0] = 0x3F0000003F000000;
    v48.i64[1] = 0x3F0000003F000000;
    v49 = vmlaq_f32((float32x4_t)0, v48, vaddq_f32(*v30, v32));
    v50 = vmlaq_f32((float32x4_t)0, v48, vaddq_f32(v31, v34));
    v51 = vmlaq_f32((float32x4_t)0, v48, vaddq_f32(v33, v35));
    v52 = vsubq_f32(v32, v49);
    v53 = vsubq_f32(v34, v50);
    v54 = vsubq_f32(v35, v51);
    v55 = vsubq_f32(v45, v36);
    v56 = vsubq_f32(v46, v37);
    v57 = vsubq_f32(v47, v38);
    v58 = vmlaq_f32((float32x4_t)0, v54, v57);
    v59 = vmlaq_f32((float32x4_t)0, v51, v57);
    v60 = vmlaq_f32((float32x4_t)0, v98, v57);
    v61 = vmlaq_f32((float32x4_t)0, v94, v57);
    v62 = vmlaq_f32((float32x4_t)0, v91, v57);
    v63 = vmlaq_f32((float32x4_t)0, v115, v57);
    v64 = vmlaq_f32((float32x4_t)0, v53, v56);
    v65 = vmlaq_f32(v59, v50, v56);
    v66 = vmlaq_f32(v60, v99, v56);
    v67 = vmlaq_f32(v61, v95, v56);
    v68 = vmlaq_f32(v62, v92, v56);
    v69 = vmlaq_f32(v63, v116, v56);
    v70 = vmlaq_f32((float32x4_t)0, v52, v55);
    v71 = vmlaq_f32(v66, v100, v55);
    v72 = vmlaq_f32(v67, v97, v55);
    v73 = vmlaq_f32(v68, v93, v55);
    v74 = vabdq_f32(vmlaq_f32(v65, v49, v55), vmlaq_f32(v69, v117, v55));
    v75 = vaddq_f32(vaddq_f32(vabsq_f32(v70), vabsq_f32(v64)), vabsq_f32(v58));
    v76 = (float32x4_t)vdupq_n_s32(0xB58637BD);
    v77 = vsubq_f32(v45, vmaxq_f32(*v30, vminq_f32(v32, v45)));
    v78 = vsubq_f32(v46, v119);
    v79 = vsubq_f32(v47, v118);
    v80 = vmlaq_f32((float32x4_t)0, v52, v77);
    v81 = vmlaq_f32((float32x4_t)0, v54, v79);
    v82 = vmlaq_f32(vmlaq_f32(vmlaq_f32((float32x4_t)0, v51, v79), v50, v78), v49, v77);
    v83 = vmlaq_f32(vmlaq_f32(vmlaq_f32((float32x4_t)0, v98, v79), v99, v78), v100, v77);
    v84 = vmlaq_f32(vmlaq_f32(vmlaq_f32((float32x4_t)0, v94, v79), v95, v78), v97, v77);
    v85 = vmlaq_f32(vmlaq_f32(vmlaq_f32((float32x4_t)0, v91, v79), v92, v78), v93, v77);
    v86 = vabdq_f32(v82, vmlaq_f32(vmlaq_f32(vmlaq_f32((float32x4_t)0, v115, v79), v116, v78), v117, v77));
    v87 = (float32x4_t)vdupq_n_s32(0x358637BDu);
    v88 = (int8x16_t)vmovl_u16((uint16x4_t)vmvn_s8((int8x8_t)vmovn_s32((int32x4_t)vorrq_s8(vorrq_s8(vandq_s8((int8x16_t)vcgtq_f32(vaddq_f32(v74, v76), vaddq_f32(v75, vaddq_f32(vaddq_f32(vabsq_f32(v71), vabsq_f32(v72)), vabsq_f32(v73)))), (int8x16_t)vcgtq_f32(v74, v87)), (int8x16_t)vcgtq_f32(*v30, v32)), vandq_s8((int8x16_t)vcgtq_f32(vaddq_f32(v86, v76), vaddq_f32(vaddq_f32(vaddq_f32(vabsq_f32(v80), vabsq_f32(vmlaq_f32((float32x4_t)0, v53, v78))), vabsq_f32(v81)), vaddq_f32(vaddq_f32(vabsq_f32(v83), vabsq_f32(v84)), vabsq_f32(v85)))), (int8x16_t)vcgtq_f32(v86, v87))))));
    v32.i64[0] = 0x100000001;
    v32.i64[1] = 0x100000001;
    v121 = vandq_s8(v88, (int8x16_t)v32);
    v89 = v30 + 6;
    do
    {
      v90 = v89->i32[v29];
      v120 = v90 & 0xFFFFFFFE;
      if (v121.i32[v29])
      {
        if ((v90 & 1) != 0)
        {
          this = (**(uint64_t (***)(physx::Gu::RTree::Callback *, uint64_t, unsigned int *, unsigned int *))a5)(a5, 1, &v120, a4);
          if ((this & 1) == 0)
            return this;
        }
        else
        {
          *v22++ = v90 & 0xFFFFFFFE;
          v23 = v120;
          v27 = 1;
        }
      }
      ++v29;
    }
    while (v29 != 4);
  }
  while (v22 > v122);
  return this;
}

uint64_t physx::Gu::unsupportedBoxOverlapMidphase(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  char vars0;

  if (!physx::Gu::Midphase::outputError(void)::reportOnlyOnce)
  {
    physx::Gu::Midphase::outputError(void)::reportOnlyOnce = 1;
    physx::shdfnd::Foundation::error(physx::shdfnd::Foundation::mInstance, 8, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/common/src/../../geomutils/src/mesh/GuMidphaseInterface.h", 175, "BV4 midphase only supported on Intel platforms.", a6, a7, a8, vars0);
  }
  return 0;
}

{
  char vars0;

  if (!physx::Gu::Midphase::outputError(void)::reportOnlyOnce)
  {
    physx::Gu::Midphase::outputError(void)::reportOnlyOnce = 1;
    physx::shdfnd::Foundation::error(physx::shdfnd::Foundation::mInstance, 8, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/geomutils/src/mesh/GuMidphaseInterface.h", 175, "BV4 midphase only supported on Intel platforms.", a6, a7, a8, vars0);
  }
  return 0;
}

uint64_t physx::Gu::unsupportedCapsuleOverlapMidphase(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  char vars0;

  if (!physx::Gu::Midphase::outputError(void)::reportOnlyOnce)
  {
    physx::Gu::Midphase::outputError(void)::reportOnlyOnce = 1;
    physx::shdfnd::Foundation::error(physx::shdfnd::Foundation::mInstance, 8, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/common/src/../../geomutils/src/mesh/GuMidphaseInterface.h", 175, "BV4 midphase only supported on Intel platforms.", a6, a7, a8, vars0);
  }
  return 0;
}

uint64_t physx::Gu::unsupportedSphereOverlapMidphase(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  char vars0;

  if (!physx::Gu::Midphase::outputError(void)::reportOnlyOnce)
  {
    physx::Gu::Midphase::outputError(void)::reportOnlyOnce = 1;
    physx::shdfnd::Foundation::error(physx::shdfnd::Foundation::mInstance, 8, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/common/src/../../geomutils/src/mesh/GuMidphaseInterface.h", 175, "BV4 midphase only supported on Intel platforms.", a6, a7, a8, vars0);
  }
  return 0;
}

void `anonymous namespace'::HfTrianglesEntityReport2::~HfTrianglesEntityReport2(_anonymous_namespace_::HfTrianglesEntityReport2 *this)
{
  JUMPOUT(0x2276933B8);
}

uint64_t `anonymous namespace'::HfTrianglesEntityReport2::onEvent(float32x4_t *this, unsigned int a2, unsigned int *a3)
{
  uint64_t v5;
  int v6;
  int v7;
  unsigned __int32 v8;
  uint64_t v9;
  uint64_t v10;
  double v11;
  float32x4_t v12;
  float32x4_t v13;
  uint64_t v14;
  unsigned __int32 v15;
  unsigned int v16;
  uint64_t v17;
  uint64_t result;
  float v19[3];
  float v20;
  float v21;
  __int128 v22;
  uint64_t v23;
  int v24;

  if (!this[7].i8[0])
  {
    v22 = xmmword_2260E5D70;
    v23 = 0;
    v24 = 0;
    if (a2)
    {
      v10 = a2;
      do
      {
        physx::Gu::HeightFieldUtil::getTriangle(this[2].i64[1], (float *)&v22, (uint64_t)v19, 0, 0, *a3, 0, 0);
        if (physx::Gu::intersectTriangleBox(this + 3, v19, &v20, &v21, v11, v12, v13))
        {
          v14 = this[1].u32[0];
          if (v14 >= this[1].i32[1])
            goto LABEL_18;
          v15 = this[1].u32[3];
          if (v15 >= this[1].i32[2])
          {
            v16 = *a3;
            v17 = this->i64[1];
            this[1].i32[0] = v14 + 1;
            *(_DWORD *)(v17 + 4 * v14) = v16;
          }
          else
          {
            this[1].i32[3] = v15 + 1;
          }
        }
        ++a3;
        --v10;
      }
      while (v10);
    }
    return 1;
  }
  if (!a2)
    return 1;
  while (1)
  {
    v5 = this[1].u32[0];
    if (v5 >= this[1].i32[1])
      break;
    v7 = *a3++;
    v6 = v7;
    v8 = this[1].u32[3];
    if (v8 >= this[1].i32[2])
    {
      v9 = this->i64[1];
      this[1].i32[0] = v5 + 1;
      *(_DWORD *)(v9 + 4 * v5) = v6;
    }
    else
    {
      this[1].i32[3] = v8 + 1;
    }
    if (!--a2)
      return 1;
  }
LABEL_18:
  result = 0;
  this[2].i8[0] = 1;
  return result;
}

uint64_t ConvexVsMeshOverlapCallback::processHit(uint64_t a1, uint64_t a2, float *a3, float *a4, float *a5)
{
  float32x4_t v5;
  float32x4_t v6;
  float32x4_t v7;
  float32x4_t v8;
  float32x4_t v9;
  float32x4_t v10;
  float32x4_t v11;
  float32x4_t v12;
  float32x4_t v13;
  float32x4_t v14;
  float32x4_t v15;
  float32x4_t v16;
  float32x4_t v17;
  float32x4_t v18;
  float32x4_t v19;
  float32x4_t v20;
  float32x4_t v21;
  float32x4_t v22;
  float32x4_t v23;
  float32x4_t v24;
  float32x4_t v25;
  float32x4_t v26;
  float32x4_t v27;
  int16x8_t v28;
  float32x4_t v29;
  float32x4_t v30;
  float32x4_t v31;
  int8x16_t v32;
  float32x4_t v34;
  float32x4_t v35;
  float32x4_t v36;
  float32x4_t v37;
  float32x4_t v38;
  float32x4_t v39;
  float32x4_t v40;
  float32x4_t v41;
  float32x4_t v42;
  float32x4_t v43;
  float32x4_t v44;
  float32x4_t v45;
  __int128 v46;
  int32x4_t v47;
  int32x4_t v48;
  float32x2x2_t v49;
  int32x4_t v50;
  float32x4_t v51;
  float *v52;
  float *v53;
  float32x4_t v54;
  float32x4_t v55;
  float32x4_t v56;
  float32x4_t v57;
  float32x2_t v58;
  int32x4_t v59;
  int v60;
  float32x2_t v66;
  float32x2_t v67;
  int v68;
  float32x4_t v69;
  const float *v70;
  float32x2_t v71;
  float32x2_t v72;
  float32x2_t v73;
  float32x2_t v74;
  float32x2_t v75;
  float32x2_t v76;
  float32x4_t v77;
  float32x4_t v78;
  float32x4_t v79;
  float32x4_t v80;
  float32x4_t v81;
  float32x2_t v82;
  int8x8_t v83;
  uint64_t v84;
  float32x4_t v85;
  float32x4_t v86;
  float32x2_t v87;
  float32x4_t v88;
  float32x4_t v89;
  float32x2_t v90;
  float32x2_t v91;
  int v92;
  float32x4_t v93;
  float32x4_t v94;
  float32x4_t v95;
  int8x8_t v96;
  float32x2_t v97;
  float32x2_t v98;
  float32x2_t v99;
  float32x2_t v100;
  float32x2_t v101;
  float32x2_t v102;
  int8x8_t v103;
  float32x4_t v104;
  float32x2_t v105;
  float32x2_t v106;
  int8x8_t v107;
  float32x4_t v108;
  int8x8_t v109;
  float32x4_t v110;
  float32x4_t v111;
  float32x2_t v112;
  float32x4_t v113;
  float32x2_t v114;
  float32x4_t v115;
  float32x2_t v116;
  float32x4_t v117;
  float32x4_t v118;
  float32x4_t v119;
  float32x2_t v120;
  float32x4_t v121;
  float32x2_t v122;
  float32x4_t v123;
  float32x4_t v124;
  float32x2_t v125;
  float32x4_t v126;
  float32x2_t v127;
  float32x4_t v128;
  float32x2_t v129;
  float32x4_t v130;
  float32x2_t v131;
  __int32 v132;
  uint64_t v133;
  uint64_t v134;
  float32x4_t v135;
  float32x2_t v136;
  float32x4_t v137;
  float32x4_t v138;
  float32x2_t v139;
  float32x2_t v140;
  int v141;
  float32x4_t v142;
  float32x2_t v143;
  int v144;
  float32x2_t v145;
  float32x2_t v146;
  float32x2_t v147;
  int v148;
  unsigned int v149;
  float32x2_t v150;
  float32x2_t v151;
  float32x2_t v152;
  int v153;
  int8x16_t v154;
  float32x2_t v155;
  float32x2_t v156;
  int v157;
  float32x4_t v158;
  __int128 v159;
  __int128 v160;
  __int128 v161;
  __int128 v162;
  float32x4_t v163;
  float32x2_t v164;
  float32x2_t v165;
  int v166;
  float32x2_t v167;
  int v168;
  int16x4_t v169;
  int8x8_t v170;
  const float *v171;
  float32x2_t v172;
  const float *v173;
  float32x2_t v174;
  float32x2_t v175;
  uint64_t result;
  int32x4_t v177;
  float32x4_t v178;
  float32x4_t v179;
  uint64_t (**v180)();
  uint64_t v181;
  float32x4_t v182;
  uint64_t v183;
  int32x4_t v184[2];
  _OWORD v185[2];
  float32x4_t v186;
  uint64_t v187;
  uint64_t v188;
  char v189;
  float32x4_t v190;
  float32x4_t v191;
  float32x4_t v192;
  float32x4_t v193;
  float32x4_t v194;
  float32x4_t v195;
  unsigned int v196;
  float32x2_t v197;
  _OWORD v198[4];
  _OWORD v199[4];
  float32x4_t v200;
  float32x4_t v201;
  float32x4_t v202[2];
  uint64_t v203;
  float32x2x2_t v204;

  v203 = *MEMORY[0x24BDAC8D0];
  v5 = (float32x4_t)*(unsigned int *)a3;
  v5.f32[1] = a3[1];
  v6 = v5;
  v6.f32[2] = a3[2];
  v7 = (float32x4_t)*(unsigned int *)a4;
  v7.f32[1] = a4[1];
  v8 = v7;
  v8.f32[2] = a4[2];
  v9 = (float32x4_t)*(unsigned int *)a5;
  v9.f32[1] = a5[1];
  v10 = v9;
  v10.f32[2] = a5[2];
  v11 = *(float32x4_t *)(a1 + 16);
  v12 = *(float32x4_t *)(a1 + 32);
  v13 = vmulq_n_f32(v11, *a3);
  v13.i32[3] = 0;
  v14 = vmulq_lane_f32(v12, *(float32x2_t *)v5.f32, 1);
  v14.i32[3] = 0;
  v16 = *(float32x4_t *)(a1 + 48);
  v15 = *(float32x4_t *)(a1 + 64);
  v17 = vmulq_laneq_f32(v16, v6, 2);
  v17.i32[3] = 0;
  v18 = vaddq_f32(vaddq_f32(v13, v14), v17);
  v19 = vmulq_n_f32(v11, *a4);
  v19.i32[3] = 0;
  v20 = vmulq_lane_f32(v12, *(float32x2_t *)v7.f32, 1);
  v20.i32[3] = 0;
  v21 = vaddq_f32(v15, v18);
  v22 = vmulq_laneq_f32(v16, v8, 2);
  v22.i32[3] = 0;
  v23 = vmulq_n_f32(v11, *a5);
  v23.i32[3] = 0;
  v24 = vmulq_lane_f32(v12, *(float32x2_t *)v9.f32, 1);
  v24.i32[3] = 0;
  v25 = vaddq_f32(v15, vaddq_f32(vaddq_f32(v19, v20), v22));
  v26 = vmulq_laneq_f32(v16, v10, 2);
  v26.i32[3] = 0;
  v27 = vaddq_f32(v15, vaddq_f32(vaddq_f32(v23, v24), v26));
  v28 = (int16x8_t)vminq_f32(vminq_f32(v21, v25), v27);
  v29 = vmaxq_f32(vmaxq_f32(v21, v25), v27);
  v30 = *(float32x4_t *)(a1 + 80);
  v31 = vnegq_f32(v30);
  v31.i32[3] = 0;
  v32 = vorrq_s8((int8x16_t)vcgtq_f32(v31, v29), (int8x16_t)vcgtq_f32((float32x4_t)v28, v30));
  *(int16x4_t *)v28.i8 = vmovn_s32((int32x4_t)v32);
  v28.i64[1] = vextq_s8(v32, v32, 8uLL).u64[0];
  *(int8x8_t *)v32.i8 = vmovn_s16(v28);
  if (vuzp1_s8((int8x8_t)vdup_lane_s16((int16x4_t)vtst_s32((int32x2_t)(v32.i64[0] & 0xFFFFFF00FFFFFFLL), (int32x2_t)(v32.i64[0] & 0xFFFFFF00FFFFFFLL)), 0), *(int8x8_t *)v5.f32).u32[0] != -1)
  {
    if (!*(_BYTE *)(a1 + 385))
    {
      v34 = *(float32x4_t *)(a1 + 336);
      v35 = *(float32x4_t *)(a1 + 352);
      v36 = vmulq_n_f32(v34, *a3);
      v36.i32[3] = 0;
      v37 = vmulq_lane_f32(v35, *(float32x2_t *)v5.f32, 1);
      v37.i32[3] = 0;
      v38 = *(float32x4_t *)(a1 + 368);
      v39 = vmulq_laneq_f32(v38, v6, 2);
      v39.i32[3] = 0;
      v6 = vaddq_f32(vaddq_f32(v36, v37), v39);
      v40 = vmulq_n_f32(v34, *a4);
      v40.i32[3] = 0;
      v41 = vmulq_lane_f32(v35, *(float32x2_t *)v7.f32, 1);
      v41.i32[3] = 0;
      v42 = vmulq_laneq_f32(v38, v8, 2);
      v42.i32[3] = 0;
      v43 = vmulq_n_f32(v34, *a5);
      v43.i32[3] = 0;
      v44 = vmulq_lane_f32(v35, *(float32x2_t *)v9.f32, 1);
      v44.i32[3] = 0;
      v8 = vaddq_f32(vaddq_f32(v40, v41), v42);
      v45 = vmulq_laneq_f32(v38, v10, 2);
      v45.i32[3] = 0;
      v10 = vaddq_f32(vaddq_f32(v43, v44), v45);
    }
    v47 = *(int32x4_t *)(a1 + 304);
    v46 = *(_OWORD *)(a1 + 320);
    v48 = *(int32x4_t *)(a1 + 288);
    v184[0] = *(int32x4_t *)(a1 + 272);
    v185[0] = v47;
    v49 = (float32x2x2_t)vzip1q_s32(v184[0], v47);
    v204.val[0] = (float32x2_t)vzip2q_s32(v184[0], v47).u64[0];
    v50 = vzip1q_s32(v48, (int32x4_t)0);
    v204.val[1] = (float32x2_t)vzip2q_s32(v48, (int32x4_t)0).u64[0];
    v51 = vmulq_f32(vaddq_f32(vaddq_f32(v6, v8), v10), (float32x4_t)vdupq_n_s32(0x3EAAAA9Fu));
    v51.i32[3] = 0;
    v186 = v51;
    v190 = v6;
    v191 = v8;
    v189 = 0;
    v192 = v10;
    v187 = 0x7F7FFFFF00000000;
    v188 = 0x57F7FFFFFLL;
    v182.i64[0] = (uint64_t)off_24ED91658;
    v182.i64[1] = (uint64_t)&v186;
    v183 = a1 + 272;
    v52 = (float *)v184;
    v53 = (float *)v185;
    vst2_f32(v52, v49);
    v185[1] = v46;
    v184[1] = vzip2q_s32((int32x4_t)v49, v50);
    vst2_f32(v53, v204);
    v180 = off_24ED91168;
    v181 = a1 + 96;
    v54 = *(float32x4_t *)(a1 + 320);
    v196 = 0;
    v55 = vmulq_f32(v54, v54);
    v55.i64[0] = vpaddq_f32(v55, v55).u64[0];
    v59.i64[1] = 0;
    v56 = (float32x4_t)vbslq_s8((int8x16_t)vdupq_lane_s32(vcgtz_f32(vpadd_f32(*(float32x2_t *)v55.f32, *(float32x2_t *)v55.f32)), 0), (int8x16_t)v54, (int8x16_t)xmmword_2260E5F10);
    v195 = v56;
    v57 = vmulq_f32(v56, v56);
    v57.i64[0] = vpaddq_f32(v57, v57).u64[0];
    v58 = vpadd_f32(*(float32x2_t *)v57.f32, *(float32x2_t *)v57.f32);
    *(float32x2_t *)v59.i8 = vrsqrte_f32(v58);
    v60 = 4;
    do
    {
      *(float32x2_t *)v59.i8 = vmul_f32(*(float32x2_t *)v59.i8, vrsqrts_f32(vmul_f32(*(float32x2_t *)v59.i8, *(float32x2_t *)v59.i8), v58));
      --v60;
    }
    while (v60);
    __asm { FMOV            V9.2S, #1.0 }
    v66 = vmul_f32(v58, (float32x2_t)vbsl_s8((int8x8_t)vdup_lane_s32(vceqz_f32(v58), 0), (int8x8_t)_D9, *(int8x8_t *)v59.i8));
    v67 = vrecpe_f32(v66);
    v68 = 4;
    do
    {
      v67 = vmul_f32(v67, vrecps_f32(v66, v67));
      --v68;
    }
    while (v68);
    v69 = vmulq_n_f32(v56, v67.f32[0]);
    v69.i32[3] = 0;
    v70 = (const float *)(a1 + 116);
    *(float32x2_t *)v59.i8 = vld1_dup_f32(v70);
    v71 = (float32x2_t)vdup_n_s32(0x7F7FFFFFu);
    *(float32x2_t *)v59.i8 = vmul_f32(vmin_f32(*(float32x2_t *)v59.i8, v71), (float32x2_t)vdup_n_s32(0x3DCCCCCDu));
    v72 = (float32x2_t)vdup_n_s32(0x358637BDu);
    v73 = vmax_f32(*(float32x2_t *)v59.i8, v72);
    v59.i32[0] = *(_DWORD *)(a1 + 112);
    v72.i32[0] = -*(char *)(a1 + 128);
    *(int32x2_t *)v59.i8 = vdup_lane_s32((int32x2_t)vand_s8(*(int8x8_t *)v59.i8, (int8x8_t)v72), 0);
    v74 = vadd_f32(*(float32x2_t *)v59.i8, 0);
    v75 = (float32x2_t)vdup_n_s32(0x3F7FF141u);
    v59.i32[0] = -1;
    v177 = v59;
    while (1)
    {
      v179 = v69;
      v76 = v71;
      v194 = v56;
      v77 = vnegq_f32(v56);
      v77.i32[3] = 0;
      v193 = v77;
      *(double *)v78.i64 = physx::Gu::RelativeConvex<physx::Gu::TriangleV>::support(&v182, (float32x2_t *)&v193);
      v178 = v78;
      *(double *)v79.i64 = physx::Gu::LocalConvex<physx::Gu::ConvexHullV>::support((uint64_t)&v180, &v195);
      v80 = v79;
      v56 = vsubq_f32(v178, v79);
      v81 = vmulq_f32(v179, v56);
      v81.i64[0] = vpaddq_f32(v81, v81).u64[0];
      v82 = vpadd_f32(*(float32x2_t *)v81.f32, *(float32x2_t *)v81.f32);
      v83 = (int8x8_t)vcgt_f32(v82, v74);
      if ((vmvn_s8(v83).u8[0] & 1) == 0)
        return 1;
      v84 = v196;
      if (vuzp1_s8((int8x8_t)vdup_lane_s16((int16x4_t)vand_s8(v83, (int8x8_t)vcgt_f32(v82, vmul_f32(v76, v75))), 0), *(int8x8_t *)v56.f32).u32[0] == -1)
      {
        if (v196 == 3)
        {
          v193.i64[0] = 0;
          v197 = 0;
          physx::Gu::barycentricCoordinates(&v195, &v200, &v201, v202, (float32x2_t *)&v193, &v197);
        }
        return 1;
      }
      v199[v196] = v178;
      v198[v84] = v80;
      v196 = v84 + 1;
      *(&v200 + v84) = v56;
      switch((_DWORD)v84)
      {
        case 3:
          physx::Gu::closestPtPointTetrahedron(&v200, v199, v198, (int *)&v196);
          goto LABEL_51;
        case 2:
          v56 = v200;
          v93 = vsubq_f32(v201, v200);
          v94 = vsubq_f32(v202[0], v200);
          v96 = (int8x8_t)vmls_f32(vmul_f32(*(float32x2_t *)v93.f32, (float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v94, (int8x16_t)v94, 4uLL)), (float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v93, (int8x16_t)v93, 4uLL), *(float32x2_t *)v94.f32);
          *(int8x8_t *)v95.f32 = vext_s8(v96, (int8x8_t)vmls_f32(vmul_f32((float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v93, (int8x16_t)v93, 8uLL), *(float32x2_t *)v94.f32), *(float32x2_t *)v93.f32, (float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v94, (int8x16_t)v94, 8uLL)), 4uLL);
          v96.i32[1] = 0;
          v196 = 3;
          v97 = vpadd_f32(vmul_f32(*(float32x2_t *)v95.f32, *(float32x2_t *)v95.f32), vmul_f32((float32x2_t)v96.u32[0], (float32x2_t)v96.u32[0]));
          v98 = vpadd_f32(v97, v97);
          if (v98.f32[0] > 0.00000011921)
          {
            if (v98.f32[0] == 0.0)
            {
              v56 = 0uLL;
            }
            else
            {
              *(int8x8_t *)&v95.u32[2] = v96;
              v99 = (float32x2_t)vextq_s8((int8x16_t)v201, (int8x16_t)v201, 8uLL).u64[0];
              v100 = (float32x2_t)vextq_s8((int8x16_t)v202[0], (int8x16_t)v202[0], 8uLL).u64[0];
              v101 = (float32x2_t)vextq_s8((int8x16_t)v202[0], (int8x16_t)v202[0], 4uLL).u64[0];
              v102 = (float32x2_t)vextq_s8((int8x16_t)v201, (int8x16_t)v201, 4uLL).u64[0];
              v103 = (int8x8_t)vmls_f32(vmul_f32(*(float32x2_t *)v201.f32, v101), v102, *(float32x2_t *)v202[0].f32);
              *(int8x8_t *)v104.f32 = vext_s8(v103, (int8x8_t)vmls_f32(vmul_f32(v99, *(float32x2_t *)v202[0].f32), *(float32x2_t *)v201.f32, v100), 4uLL);
              v104.i64[1] = v103.u32[0];
              v105 = (float32x2_t)vextq_s8((int8x16_t)v200, (int8x16_t)v200, 8uLL).u64[0];
              v106 = (float32x2_t)vextq_s8((int8x16_t)v200, (int8x16_t)v200, 4uLL).u64[0];
              v107 = (int8x8_t)vmls_f32(vmul_f32(v106, *(float32x2_t *)v202[0].f32), v101, *(float32x2_t *)v200.f32);
              *(int8x8_t *)v108.f32 = vext_s8(v107, (int8x8_t)vmls_f32(vmul_f32(*(float32x2_t *)v200.f32, v100), *(float32x2_t *)v202[0].f32, v105), 4uLL);
              v108.i64[1] = v107.u32[0];
              v109 = (int8x8_t)vmls_f32(vmul_f32(*(float32x2_t *)v200.f32, v102), v106, *(float32x2_t *)v201.f32);
              *(int8x8_t *)v110.f32 = vext_s8(v109, (int8x8_t)vmls_f32(vmul_f32(v105, *(float32x2_t *)v201.f32), *(float32x2_t *)v200.f32, v99), 4uLL);
              v110.i64[1] = v109.u32[0];
              v111 = vmulq_f32(v104, v95);
              v111.i64[0] = vpaddq_f32(v111, v111).u64[0];
              v112 = vpadd_f32(*(float32x2_t *)v111.f32, *(float32x2_t *)v111.f32);
              v113 = vmulq_f32(v108, v95);
              v113.i64[0] = vpaddq_f32(v113, v113).u64[0];
              v114 = vpadd_f32(*(float32x2_t *)v113.f32, *(float32x2_t *)v113.f32);
              v115 = vmulq_f32(v110, v95);
              v115.i64[0] = vpaddq_f32(v115, v115).u64[0];
              v116 = vpadd_f32(*(float32x2_t *)v115.f32, *(float32x2_t *)v115.f32);
              if (vuzp1_s8((int8x8_t)vdup_lane_s16((int16x4_t)vand_s8(vand_s8((int8x8_t)vcgez_f32(v114), (int8x8_t)vcgez_f32(v112)), (int8x8_t)vcgez_f32(v116)), 0), *(int8x8_t *)v200.f32).u32[0] == -1)
              {
                v142 = vmulq_f32(v200, v95);
                v143 = vrecpe_f32(v98);
                v144 = 4;
                do
                {
                  v143 = vmul_f32(v143, vrecps_f32(v98, v143));
                  --v144;
                }
                while (v144);
                v145 = (float32x2_t)vpaddq_f32(v142, v142).u64[0];
                v56 = vmulq_n_f32(v95, vmul_f32(v143, vpadd_f32(v145, v145)).f32[0]);
                v56.i32[3] = 0;
              }
              else
              {
                v117 = vnegq_f32(v200);
                v117.i32[3] = 0;
                v118 = vnegq_f32(v201);
                v118.i32[3] = 0;
                v119 = vmulq_f32(v117, v93);
                v119.i64[0] = vpaddq_f32(v119, v119).u64[0];
                v120 = vpadd_f32(*(float32x2_t *)v119.f32, *(float32x2_t *)v119.f32);
                v121 = vmulq_f32(v93, v118);
                v121.i64[0] = vpaddq_f32(v121, v121).u64[0];
                v122 = vpadd_f32(*(float32x2_t *)v121.f32, *(float32x2_t *)v121.f32);
                if (vuzp1_s8((int8x8_t)vdup_lane_s16((int16x4_t)vand_s8(vand_s8((int8x8_t)vcgez_f32(v120), (int8x8_t)vclez_f32(v122)), (int8x8_t)vclez_f32(v116)), 0), *(int8x8_t *)v200.f32).u32[0] == -1)
                {
                  v146 = vsub_f32(v120, v122);
                  v147 = vrecpe_f32(v146);
                  v148 = 4;
                  do
                  {
                    v147 = vmul_f32(v147, vrecps_f32(v146, v147));
                    --v148;
                  }
                  while (v148);
                  v134 = 0;
                  v56 = vmlaq_n_f32(v200, v93, vmul_f32(v120, (float32x2_t)vbsl_s8((int8x8_t)vcgt_f32(vabs_f32(v146), (float32x2_t)0x3400000034000000), (int8x8_t)v147, 0)).f32[0]);
                  v56.i64[1] = vextq_s8((int8x16_t)v56, (int8x16_t)v56, 8uLL).u32[0];
                  v149 = 2;
                  v133 = 1;
                }
                else
                {
                  v123 = vnegq_f32(v202[0]);
                  v123.i32[3] = 0;
                  v124 = vmulq_f32(v118, v94);
                  v124.i64[0] = vpaddq_f32(v124, v124).u64[0];
                  v125 = vpadd_f32(*(float32x2_t *)v124.f32, *(float32x2_t *)v124.f32);
                  v126 = vmulq_f32(v93, v123);
                  v126.i64[0] = vpaddq_f32(v126, v126).u64[0];
                  v127 = vpadd_f32(*(float32x2_t *)v126.f32, *(float32x2_t *)v126.f32);
                  v128 = vmulq_f32(v94, v123);
                  v128.i64[0] = vpaddq_f32(v128, v128).u64[0];
                  v129 = vpadd_f32(*(float32x2_t *)v128.f32, *(float32x2_t *)v128.f32);
                  if (vuzp1_s8((int8x8_t)vdup_lane_s16((int16x4_t)vand_s8(vand_s8((int8x8_t)vcge_f32(v125, v122), (int8x8_t)vcge_f32(v127, v129)), (int8x8_t)vclez_f32(v112)), 0), *(int8x8_t *)v200.f32).u32[0] == -1)
                  {
                    v150 = vsub_f32(v125, v122);
                    v151 = vadd_f32(v150, vsub_f32(v127, v129));
                    v152 = vrecpe_f32(v151);
                    v153 = 4;
                    do
                    {
                      v152 = vmul_f32(v152, vrecps_f32(v151, v152));
                      --v153;
                    }
                    while (v153);
                    v154 = (int8x16_t)vmlaq_n_f32(v201, vsubq_f32(v202[0], v201), vmul_f32(v150, (float32x2_t)vbsl_s8((int8x8_t)vcgt_f32(vabs_f32(v151), (float32x2_t)0x3400000034000000), (int8x8_t)v152, 0)).f32[0]);
                    v154.i64[1] = vextq_s8(v154, v154, 8uLL).u32[0];
                    v149 = 2;
                    v133 = 2;
                    v134 = 1;
                    v56 = (float32x4_t)v154;
                  }
                  else
                  {
                    v130 = vmulq_f32(v117, v94);
                    v130.i64[0] = vpaddq_f32(v130, v130).u64[0];
                    v131 = vpadd_f32(*(float32x2_t *)v130.f32, *(float32x2_t *)v130.f32);
                    if (vuzp1_s8((int8x8_t)vdup_lane_s16((int16x4_t)vand_s8(vand_s8((int8x8_t)vcgez_f32(v131), (int8x8_t)vclez_f32(v129)), (int8x8_t)vclez_f32(v114)), 0), *(int8x8_t *)v200.f32).u32[0] == -1)
                    {
                      v155 = vsub_f32(v131, v129);
                      v156 = vrecpe_f32(v155);
                      v157 = 4;
                      do
                      {
                        v156 = vmul_f32(v156, vrecps_f32(v155, v156));
                        --v157;
                      }
                      while (v157);
                      v134 = 0;
                      v56 = vmlaq_n_f32(v200, v94, vmul_f32(v131, (float32x2_t)vbsl_s8((int8x8_t)vcgt_f32(vabs_f32(v155), (float32x2_t)0x3400000034000000), (int8x8_t)v156, 0)).f32[0]);
                      v56.i64[1] = vextq_s8((int8x16_t)v56, (int8x16_t)v56, 8uLL).u32[0];
                      v133 = 2;
                    }
                    else if (vuzp1_s8((int8x8_t)vdup_lane_s16((int16x4_t)vand_s8((int8x8_t)vclez_f32(v131), (int8x8_t)vclez_f32(v120)), 0), *(int8x8_t *)v200.f32).u32[0] == -1)
                    {
                      v134 = 0;
                      v133 = 1;
                    }
                    else
                    {
                      *(int16x4_t *)v56.f32 = vdup_lane_s16((int16x4_t)vand_s8((int8x8_t)vcge_f32(v122, v125), (int8x8_t)vcgez_f32(v122)), 0);
                      *(int8x8_t *)v56.f32 = vuzp1_s8(*(int8x8_t *)v56.f32, *(int8x8_t *)v56.f32);
                      v132 = v56.i32[0];
                      v56 = (float32x4_t)vbslq_s8((int8x16_t)vdupq_lane_s32((int32x2_t)*(_OWORD *)&vceqq_s32((int32x4_t)v56, v177), 0), (int8x16_t)v201, (int8x16_t)v202[0]);
                      v133 = 1;
                      if (v132 == -1)
                        v134 = 1;
                      else
                        v134 = 2;
                    }
                    v149 = v133;
                  }
                }
                v158 = *(&v200 + v133);
                v159 = v199[v134];
                v160 = v199[v133];
                v161 = v198[v134];
                v162 = v198[v133];
                v200 = *(&v200 + v134);
                v201 = v158;
                v199[0] = v159;
                v199[1] = v160;
                v198[0] = v161;
                v198[1] = v162;
                v196 = v149;
              }
            }
            goto LABEL_51;
          }
          v196 = 2;
          v135 = vmulq_f32(v93, v93);
          v135.i64[0] = vpaddq_f32(v135, v135).u64[0];
          v136 = vpadd_f32(*(float32x2_t *)v135.f32, *(float32x2_t *)v135.f32);
          if (vuzp1_s8((int8x8_t)vdup_lane_s16((int16x4_t)vcge_f32((float32x2_t)0x3400000034000000, v136), 0), *(int8x8_t *)v200.f32).u32[0] != -1)
          {
            v137 = vnegq_f32(v200);
            v137.i32[3] = 0;
            v138 = vmulq_f32(v137, v93);
            v138.i64[0] = vpaddq_f32(v138, v138).u64[0];
            v139 = vpadd_f32(*(float32x2_t *)v138.f32, *(float32x2_t *)v138.f32);
            v140 = vrecpe_f32(v136);
            v141 = 4;
            do
            {
              v140 = vmul_f32(v140, vrecps_f32(v136, v140));
              --v141;
            }
            while (v141);
            v56 = vmlaq_n_f32(v200, v93, vmax_f32(vmin_f32(vmul_f32(v139, v140), _D9), 0).f32[0]);
            goto LABEL_33;
          }
          break;
        case 1:
          v56 = v200;
          v85 = vsubq_f32(v201, v200);
          v86 = vmulq_f32(v85, v85);
          v86.i64[0] = vpaddq_f32(v86, v86).u64[0];
          v87 = vpadd_f32(*(float32x2_t *)v86.f32, *(float32x2_t *)v86.f32);
          if (vuzp1_s8((int8x8_t)vdup_lane_s16((int16x4_t)vcge_f32((float32x2_t)0x3400000034000000, v87), 0), *(int8x8_t *)v200.f32).u32[0] != -1)
          {
            v88 = vnegq_f32(v200);
            v88.i32[3] = 0;
            v89 = vmulq_f32(v88, v85);
            v89.i64[0] = vpaddq_f32(v89, v89).u64[0];
            v90 = vpadd_f32(*(float32x2_t *)v89.f32, *(float32x2_t *)v89.f32);
            v91 = vrecpe_f32(v87);
            v92 = 4;
            do
            {
              v91 = vmul_f32(v91, vrecps_f32(v87, v91));
              --v92;
            }
            while (v92);
            v56 = vmlaq_n_f32(v200, v85, vmax_f32(vmin_f32(vmul_f32(v90, v91), _D9), 0).f32[0]);
LABEL_33:
            v56.i64[1] = vextq_s8((int8x16_t)v56, (int8x16_t)v56, 8uLL).u32[0];
            goto LABEL_51;
          }
          break;
        default:
          goto LABEL_51;
      }
      v196 = 1;
LABEL_51:
      v195 = v56;
      v163 = vmulq_f32(v56, v56);
      v163.i64[0] = vpaddq_f32(v163, v163).u64[0];
      v164 = vpadd_f32(*(float32x2_t *)v163.f32, *(float32x2_t *)v163.f32);
      v165 = vrsqrte_f32(v164);
      v166 = 4;
      do
      {
        v165 = vmul_f32(v165, vrsqrts_f32(vmul_f32(v165, v165), v164));
        --v166;
      }
      while (v166);
      v71 = vmul_f32(v164, (float32x2_t)vbsl_s8((int8x8_t)vdup_lane_s32(vceqz_f32(v164), 0), (int8x8_t)_D9, (int8x8_t)v165));
      v167 = vrecpe_f32(v71);
      v168 = 4;
      do
      {
        v167 = vmul_f32(v167, vrecps_f32(v71, v167));
        --v168;
      }
      while (v168);
      v69 = vmulq_n_f32(v56, v167.f32[0]);
      v69.i32[3] = 0;
      v169 = (int16x4_t)vcgt_f32(v76, v71);
      if (vuzp1_s8((int8x8_t)vdup_lane_s16((int16x4_t)vand_s8((int8x8_t)vcgt_f32(v71, v73), (int8x8_t)v169), 0), *(int8x8_t *)v56.f32).u32[0] != -1)
      {
        v170 = (int8x8_t)vdup_lane_s16(v169, 0);
        if (vuzp1_s8(v170, v170).u32[0] == -1)
          goto LABEL_60;
        v171 = (const float *)(v182.i64[1] + 16);
        v172 = vld1_dup_f32(v171);
        v173 = (const float *)(v181 + 16);
        v174 = vld1_dup_f32(v173);
        v175 = (float32x2_t)vbsl_s8((int8x8_t)vdup_lane_s32(vcgtz_f32(v74), 0), (int8x8_t)v74, (int8x8_t)vmul_f32(vmin_f32(v172, v174), (float32x2_t)vdup_n_s32(0x3E4CCCCDu)));
        if (v196 == 3)
        {
          v193.i64[0] = 0;
          v197 = 0;
          physx::Gu::barycentricCoordinates(&v194, &v200, &v201, v202, (float32x2_t *)&v193, &v197);
        }
        if ((vcgt_f32(vmax_f32(vsub_f32(v76, v74), 0), v175).u32[0] & 1) == 0)
        {
LABEL_60:
          result = 0;
          *(_BYTE *)(a1 + 384) = 1;
          return result;
        }
        return 1;
      }
    }
  }
  return 1;
}

void ConvexVsMeshOverlapCallback::~ConvexVsMeshOverlapCallback(ConvexVsMeshOverlapCallback *this)
{
  JUMPOUT(0x2276933B8);
}

uint64_t physx::Gu::SweepCapsuleMeshHitCallback::processHit(uint64_t a1, uint64_t a2, float *a3, float *a4, float *a5, float *a6, double a7, float32x4_t a8, float32x4_t a9)
{
  float v12;
  float v13;
  float v14;
  float *v15;
  uint64_t v16;
  float v17;
  float v18;
  float v19;
  float v20;
  float v21;
  float v22;
  float v23;
  float v24;
  float v25;
  float v26;
  float v27;
  float v28;
  float v29;
  float v30;
  float *v31;
  float v32;
  float v33;
  float v34;
  float v35;
  float v36;
  float *v37;
  float v38;
  float v39;
  float v40;
  float v41;
  float v42;
  float v43;
  float v44;
  float v45;
  float v46;
  float v47;
  float v48;
  float v49;
  float v50;
  float v51;
  float v52;
  float32x2_t *v53;
  float v54;
  float32x2_t *v55;
  __int16 v56;
  int v57;
  float v58;
  float v59;
  float v60;
  float v61;
  float v62;
  float v63;
  float v64;
  float v65;
  float v66;
  _BOOL4 v67;
  uint64_t v68;
  float32x2_t *v69;
  float v70;
  float v71;
  float v72;
  float v73;
  float v74;
  float v75;
  float v76;
  float v77;
  float v78;
  float v79;
  float v80;
  float v81;
  float v82;
  _BOOL4 v84;
  float v85;
  uint64_t v86;
  __int16 v88;
  float v89;
  float v90;
  float v91;
  _QWORD v92[2];
  int v93;
  __int16 v94;
  _BYTE v95[24];
  float v96;
  float v97[3];
  unint64_t v98;
  float v99;
  unint64_t v100;
  float v101;
  float v102;
  float v103;
  float v104;
  uint64_t v105;

  v12 = *a3;
  v13 = a3[1];
  v14 = a3[2];
  v16 = *(_QWORD *)(a1 + 24);
  v15 = *(float **)(a1 + 32);
  v18 = *v15;
  v17 = v15[1];
  v19 = v15[2];
  v20 = v15[3];
  v21 = v15[4];
  v22 = v15[5];
  v23 = v13 * v22;
  v24 = v15[6];
  v25 = v15[7];
  v26 = v15[8];
  v27 = v15[9];
  v28 = (float)((float)(*a3 * v17) + (float)(v13 * v21)) + (float)(v14 * v25);
  v29 = v15[10];
  v30 = v15[11];
  if (*(_BYTE *)(a1 + 16))
    v31 = a5;
  else
    v31 = a4;
  v32 = *v31;
  v33 = v31[1];
  v34 = v31[2];
  v35 = (float)((float)(v19 * *v31) + (float)(v22 * v33)) + (float)(v26 * v34);
  v36 = v29 + (float)((float)((float)(v17 * *v31) + (float)(v21 * v33)) + (float)(v25 * v34));
  if (*(_BYTE *)(a1 + 16))
    v37 = a4;
  else
    v37 = a5;
  v38 = v37[1];
  v39 = (float)(v17 * *v37) + (float)(v21 * v38);
  v40 = (float)(v19 * *v37) + (float)(v22 * v38);
  v41 = v37[2];
  v42 = v39 + (float)(v25 * v41);
  v43 = v40 + (float)(v26 * v41);
  v44 = v29 + v42;
  v45 = (float)((float)(v12 * v18) + (float)(v13 * v20)) + (float)(v14 * v24);
  v46 = (float)((float)(v12 * v19) + v23) + (float)(v14 * v26);
  v47 = v45 + v27;
  a8.f32[0] = v28 + v29;
  a9.f32[0] = v46 + v30;
  v48 = v27 + (float)((float)((float)(v18 * v32) + (float)(v20 * v33)) + (float)(v24 * v34));
  v49 = v27 + (float)((float)((float)(v18 * *v37) + (float)(v20 * v38)) + (float)(v24 * v41));
  v97[0] = v47;
  v97[1] = v28 + v29;
  v97[2] = a9.f32[0];
  v98 = __PAIR64__(LODWORD(v36), LODWORD(v48));
  v99 = v30 + v35;
  v100 = __PAIR64__(LODWORD(v44), LODWORD(v49));
  v101 = v30 + v43;
  v92[0] = 0;
  v92[1] = 0;
  v93 = -1;
  v94 = 0;
  memset(v95, 0, sizeof(v95));
  v96 = 3.4028e38;
  v50 = *(float *)(v16 + 48);
  v51 = v50 * 0.001;
  if (v50 < 1.0)
    v51 = 0.001;
  v52 = v50 + v51;
  v53 = *(float32x2_t **)(a1 + 56);
  if (*(_BYTE *)(a1 + 73))
  {
    v54 = v53[3].f32[0];
    v55 = *(float32x2_t **)(a1 + 64);
    v56 = *(_WORD *)(a1 + 12);
    v57 = *(unsigned __int8 *)(a1 + 72);
    if ((v56 & 0x10) != 0)
      goto LABEL_15;
    v58 = v48 - v47;
    v59 = v36 - a8.f32[0];
    v60 = (float)(v30 + v35) - a9.f32[0];
    v61 = v49 - v47;
    v62 = v44 - a8.f32[0];
    v63 = (float)(v30 + v43) - a9.f32[0];
    v64 = (float)(v59 * v63) - (float)(v60 * v62);
    v65 = (float)(v60 * v61) - (float)(v58 * v63);
    v66 = (float)(v58 * v62) - (float)(v59 * v61);
    if ((v56 & 0x80) == 0
      && !*(_BYTE *)(a1 + 72)
      && (float)((float)((float)(v65 * v55->f32[1]) + (float)(v64 * v55->f32[0])) + (float)(v66 * v55[1].f32[0])) > 0.0)
    {
      return 1;
    }
    v105 = 0;
    physx::Gu::closestPtPointTriangle((float *)v53, v97, (float32x2_t *)&v98, (float32x2_t *)&v100, (float *)&v105 + 1, (float *)&v105, (uint64_t)&v102);
    if ((float)((float)((float)((float)(v103 - v53->f32[1]) * (float)(v103 - v53->f32[1]))
                       + (float)((float)(v102 - v53->f32[0]) * (float)(v102 - v53->f32[0])))
               + (float)((float)(v104 - v53[1].f32[0]) * (float)(v104 - v53[1].f32[0]))) > (float)(v54 * v54))
    {
LABEL_15:
      v67 = v57 != 0;
      v68 = 1;
      if ((physx::Gu::sweepSphereTriangles(1, (uint64_t)v97, v53, v55, 0, (uint64_t)v92, &v89, v67, v54, v52, (v56 & 0x80) != 0, 0, 0) & 1) == 0)return v68;
    }
    else
    {
      v70 = (float)((float)(v65 * v65) + (float)(v64 * v64)) + (float)(v66 * v66);
      v71 = 0.0;
      v72 = 0.0;
      v73 = 0.0;
      if (v70 > 0.0)
      {
        v74 = 1.0 / sqrtf(v70);
        v73 = v64 * v74;
        v72 = v65 * v74;
        v71 = v66 * v74;
      }
      v89 = v73;
      v90 = v72;
      v91 = v71;
      v94 = 1026;
      v75 = -v55[1].f32[0];
      *(float32x2_t *)&v95[12] = vneg_f32(*v55);
      *(float *)&v95[20] = v75;
      v96 = 0.0;
    }
  }
  else
  {
    v69 = *(float32x2_t **)(a1 + 64);
    v88 = *(_WORD *)(a1 + 12);
    v68 = 1;
    *(float *)&a7 = v50 + v51;
    if (!physx::Gu::sweepCapsuleTriangles_Precise(1, (uint64_t)v97, (uint64_t)v53, v69, 0, (uint64_t)v92, &v89, &v88, a7, a8, a9, *(_BYTE *)(a1 + 72), 0))return v68;
  }
  v76 = v96;
  if (v96 <= *(float *)(a1 + 40))
  {
    v77 = -fabsf((float)((float)(v90 * *(float *)(*(_QWORD *)(a1 + 64) + 4)) + (float)(v89 * **(float **)(a1 + 64)))+ (float)(v91 * *(float *)(*(_QWORD *)(a1 + 64) + 8)));
    v78 = *(float *)(a1 + 48);
    if (v96 <= v78)
      v79 = *(float *)(a1 + 48);
    else
      v79 = v96;
    v80 = v79 * 0.001;
    if (v79 < 1.0)
      v80 = 0.001;
    if ((float)(v78 - v80) > v96)
      goto LABEL_39;
    v81 = *(float *)(a1 + 44);
    v82 = v78 + v80;
    if (v81 > v77 && v82 > v96)
      goto LABEL_39;
    v84 = v96 < v78;
    if (v81 != v77)
      v84 = 0;
    if (v96 == 0.0 || v84)
    {
LABEL_39:
      *(float *)(a1 + 44) = v77;
      *a6 = v76 * *(float *)(a1 + 20);
      v85 = *(float *)(a1 + 48);
      if (v85 >= v76)
        v85 = v76;
      *(float *)(a1 + 48) = v85;
      v86 = *(_QWORD *)(a1 + 24);
      *(_WORD *)(v86 + 20) = v94;
      *(float *)(v86 + 48) = v76;
      *(_QWORD *)(v86 + 40) = *(_QWORD *)&v95[16];
      *(_OWORD *)(v86 + 24) = *(_OWORD *)v95;
      *(_DWORD *)(v86 + 16) = *(_DWORD *)(a2 + 16);
      *(_BYTE *)(a1 + 14) = 1;
      if (v96 == 0.0)
      {
        v68 = 0;
        *(_BYTE *)(a1 + 15) = 1;
        return v68;
      }
      if ((*(_WORD *)(a1 + 12) & 0x40) != 0)
        return 0;
    }
  }
  return 1;
}

BOOL physx::Gu::SweepCapsuleMeshHitCallback::finalizeHit(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  int v4;
  float32x2_t *v7;
  char v8;
  float v9;
  float v10;

  v4 = *(unsigned __int8 *)(a1 + 14);
  if (*(_BYTE *)(a1 + 14))
  {
    if (*(_BYTE *)(a1 + 15))
    {
      if ((*(_WORD *)(a1 + 12) & 0x200) == 0)
      {
        v7 = *(float32x2_t **)(a1 + 64);
        *(_WORD *)(a2 + 20) = 1026;
LABEL_9:
        *(_DWORD *)(a2 + 48) = 0;
        v10 = -v7[1].f32[0];
        *(float32x2_t *)(a2 + 36) = vneg_f32(*v7);
        *(float *)(a2 + 44) = v10;
        return v4 != 0;
      }
      v8 = physx::Gu::computeCapsule_TriangleMeshMTD(a4);
      v7 = *(float32x2_t **)(a1 + 64);
      *(_WORD *)(a2 + 20) = 1026;
      if ((v8 & 1) == 0)
        goto LABEL_9;
      if (*(float *)(a2 + 48) == 0.0)
      {
        v9 = -v7[1].f32[0];
        *(float32x2_t *)(a2 + 36) = vneg_f32(*v7);
        *(float *)(a2 + 44) = v9;
      }
    }
    *(_WORD *)(a2 + 20) = 1027;
  }
  return v4 != 0;
}

uint64_t sweepCapsule_MeshGeom(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, __int16 *a8)
{
  uint64_t (*v8)(void);
  __int16 v10;

  v8 = physx::Gu::gMidphaseCapsuleSweepTable[*(unsigned __int16 *)(*(_QWORD *)(a1 + 40) + 8) - 3];
  v10 = *a8;
  return v8();
}

uint64_t physx::Gu::SweepBoxMeshHitCallback::processHit(uint64_t a1, uint64_t a2, float32x2_t *a3, float32x2_t *a4, float32x2_t *a5, float *a6, int32x4_t a7, double a8, int32x4_t a9, int32x4_t a10, double a11, int32x4_t a12, int32x4_t a13)
{
  int32x4_t v13;
  int32x4_t v14;
  int32x4_t v15;
  uint64_t v19;
  float32x4_t v20;
  float32x4_t v21;
  float32x4_t v22;
  float32x4_t v23;
  float32x4_t v24;
  float32x4_t v25;
  float32x2_t *v26;
  float32x4_t v27;
  float32x4_t v28;
  float32x2_t *v29;
  float32x4_t v30;
  float32x4_t v31;
  float32x4_t v32;
  int8x16_t v33;
  int8x8_t v34;
  float32x4_t v35;
  uint64_t v36;
  int32x4_t v37;
  float32x2_t v38;
  float32x2_t v39;
  float32x4_t v40;
  int32x2_t v41;
  _BOOL4 v42;
  float32x4_t v43;
  int8x16_t v44;
  float32x2_t v45;
  uint64_t v46;
  __int128 v47;
  uint64_t result;
  uint64_t v49;
  int32x2_t v50;
  float v51;
  float v52;
  __int32 *v53;
  __int32 v54;
  __int32 v55;
  float32x2_t *v56;
  float32x4_t v57;
  float v58;
  float32x4_t v59;
  float32x4_t v60;
  float32x4_t v61;
  float32x4_t v62;
  int32x4_t v63;
  float32x4_t v64;
  float32x4_t v65;
  float32x4_t v66;
  float32x4_t v67;
  float32x4_t v68;
  int32x4_t v69;
  float32x4_t v70;
  float32x4_t v71;
  int32x4_t v72;
  float32x4_t v73;
  int32x4_t v74;
  float32x4_t v75;
  int v76;
  float v77;
  uint64_t v78;
  float32x4_t v79;
  float32x4_t v80;
  float32x4_t v81;
  float v82;
  float32x4_t v83;
  float32x2_t v84;
  float v85;
  float32x4_t v86;
  int8x16_t v87;
  int8x16_t v88;
  float32x4_t v89;
  float32x4_t v90;
  _QWORD v91[2];
  _QWORD v92[2];
  float32x4_t v93;
  float32x4_t v94;
  float v95;
  float32x4_t v96;
  float32x4_t v97;
  float32x4_t v98;
  _QWORD v99[2];
  float v100;
  float v101;
  float v102;
  int v103;
  char v104;
  int32x4_t v105;
  float32x4_t v106;
  float32x2_t v107;
  float32x2_t v108;
  float32x4_t v109;
  int8x16_t v110;

  if ((*(_WORD *)(a1 + 12) & 0x100) == 0)
  {
    v107 = 0;
    v19 = *(_QWORD *)(a1 + 24);
    v20 = *(float32x4_t *)v19;
    v21 = *(float32x4_t *)(v19 + 12);
    v22 = *(float32x4_t *)(v19 + 24);
    v23 = *(float32x4_t *)(v19 + 36);
    v24 = vaddq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(*(float32x4_t *)v19, COERCE_FLOAT(*(_OWORD *)a3->f32)), v21, *a3, 1), v22, *(float32x4_t *)a3->f32, 2), v23);
    v25 = v24;
    v25.i32[3] = 0;
    if (*(_BYTE *)(a1 + 16))
      v26 = a5;
    else
      v26 = a4;
    v27 = vaddq_f32(v23, vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v20, COERCE_FLOAT(*(_OWORD *)v26->f32)), v21, *v26, 1), v22, *(float32x4_t *)v26->f32, 2));
    v28 = v27;
    v28.i32[3] = 0;
    if (*(_BYTE *)(a1 + 16))
      v29 = a4;
    else
      v29 = a5;
    v30 = vaddq_f32(v23, vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v20, COERCE_FLOAT(*(_OWORD *)v29->f32)), v21, *v29, 1), v22, *(float32x4_t *)v29->f32, 2));
    v31 = v30;
    v31.i32[3] = 0;
    if (*(_BYTE *)(a1 + 176))
      goto LABEL_10;
    v32 = vsubq_f32(v31, v28);
    v33 = (int8x16_t)vsubq_f32(v25, v28);
    v34 = (int8x8_t)vmls_f32(vmul_f32((float32x2_t)*(_OWORD *)&vextq_s8(v33, v33, 4uLL), *(float32x2_t *)v32.f32), (float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v32, (int8x16_t)v32, 4uLL), *(float32x2_t *)v33.i8);
    *(int8x8_t *)v32.f32 = vext_s8(v34, (int8x8_t)vmls_f32(vmul_f32(*(float32x2_t *)v33.i8, (float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v32, (int8x16_t)v32, 8uLL)), *(float32x2_t *)v32.f32, (float32x2_t)*(_OWORD *)&vextq_s8(v33, v33, 8uLL)), 4uLL);
    v32.i64[1] = v34.u32[0];
    v22 = *(float32x4_t *)(a1 + 144);
    v35 = vmulq_f32(v32, v22);
    v35.i64[0] = vpaddq_f32(v35, v35).u64[0];
    if (vpadd_f32(*(float32x2_t *)v35.f32, *(float32x2_t *)v35.f32).f32[0] < 0.0)
    {
LABEL_10:
      v87 = (int8x16_t)v30;
      v88 = (int8x16_t)v27;
      v89 = v24;
      v36 = *(_QWORD *)(a1 + 48);
      v22.i64[0] = *(_QWORD *)(v36 + 48);
      v37 = (int32x4_t)v22;
      v37.i32[2] = *(_DWORD *)(v36 + 56);
      v38 = (float32x2_t)vdup_laneq_s32(v37, 2);
      v37.i32[3] = 0;
      v103 = 3;
      v104 = 0;
      v99[0] = 0;
      v99[1] = 0;
      v105 = v37;
      v106 = 0u;
      v39 = vpmin_f32(v38, *(float32x2_t *)v22.f32);
      v39.f32[0] = vpmin_f32(v39, v39).f32[0];
      v100 = 0.15 * v39.f32[0];
      v101 = 0.05 * v39.f32[0];
      v102 = 0.05 * v39.f32[0];
      LOBYTE(v95) = 0;
      v40 = vmulq_f32(vaddq_f32(vaddq_f32(v25, v28), v31), (float32x4_t)vdupq_n_s32(0x3EAAAA9Fu));
      v40.i32[3] = 0;
      v93 = v40;
      v96 = v25;
      v97 = v28;
      v98 = v31;
      v41.i32[1] = 2139095039;
      v94.i64[0] = 0x7F7FFFFF00000000;
      v94.i64[1] = 0x57F7FFFFFLL;
      v92[0] = off_24ED91370;
      v92[1] = &v93;
      v91[0] = off_24ED913D0;
      v91[1] = v99;
      v90 = v40;
      v41.i32[0] = *(_DWORD *)(a1 + 72);
      v109 = 0u;
      v110 = 0u;
      v108 = 0;
      v42 = physx::Gu::gjkRaycast<physx::Gu::LocalConvex<physx::Gu::TriangleV>,physx::Gu::LocalConvex<physx::Gu::BoxV>>((uint64_t)v92, (uint64_t)v91, &v90, v41, (uint64_t)&v107, &v106, (float32x4_t *)(a1 + 144), &v108, &v109, &v110);
      if (!v42)
        return !v42;
      v43 = v109;
      v44 = v110;
      *(_BYTE *)(a1 + 14) = 1;
      *(int8x16_t *)(a1 + 112) = v44;
      *(_DWORD *)(a1 + 160) = *(_DWORD *)(a2 + 16);
      v45 = v107;
      if ((vcge_f32(v107, v108).u8[0] & 1) != 0)
      {
        *(_BYTE *)(a1 + 15) = 1;
        *a6 = 0.0;
        *(float32x2_t *)(a1 + 40) = v45;
        *(_DWORD *)(a1 + 32) = 0;
        v46 = *(_QWORD *)(a1 + 64);
        v43.i64[0] = *(_QWORD *)v46;
        *(_QWORD *)&v47 = vnegq_f32(v43).u64[0];
        *((float *)&v47 + 2) = -*(float *)(v46 + 8);
        HIDWORD(v47) = 0;
        *(_OWORD *)(a1 + 128) = v47;
        return !v42;
      }
      v82 = *(float *)(a1 + 32) * v108.f32[0];
      v83 = vmulq_n_f32(*(float32x4_t *)(a1 + 144), v108.f32[0]);
      v84 = vmul_f32(v108, *(float32x2_t *)(a1 + 40));
      *(float *)(a1 + 32) = v82;
      v83.i32[3] = 0;
      *(float32x2_t *)(a1 + 40) = v84;
      *(float32x4_t *)(a1 + 128) = v43;
      *(float32x4_t *)(a1 + 144) = v83;
      v85 = v82 * *(float *)(a1 + 20);
      if (v85 < *a6)
        *a6 = v85;
      v86 = v89;
      v86.i32[3] = v88.i32[0];
      *(float32x4_t *)(a1 + 76) = v86;
      *(int8x16_t *)(a1 + 92) = vextq_s8(vextq_s8(v88, v88, 0xCuLL), v87, 8uLL);
      *(_DWORD *)(a1 + 108) = v87.i32[2];
    }
    return 1;
  }
  v49 = *(_QWORD *)(a1 + 24);
  v13.i32[0] = *(_DWORD *)v49;
  a9.i64[0] = *(_QWORD *)(v49 + 4);
  v50 = (int32x2_t)*a3;
  a13.i32[0] = *(_DWORD *)(v49 + 12);
  v14.i64[0] = *(_QWORD *)(v49 + 16);
  a10.i64[0] = *(_QWORD *)(v49 + 24);
  v51 = *(float *)(v49 + 32);
  a7.i64[0] = *(_QWORD *)(v49 + 36);
  v52 = *(float *)(v49 + 44);
  if (*(_BYTE *)(a1 + 16))
    v53 = (__int32 *)a5;
  else
    v53 = (__int32 *)a4;
  v54 = *v53;
  v55 = v53[1];
  a12.i32[0] = v53[2];
  if (*(_BYTE *)(a1 + 16))
    v56 = a4;
  else
    v56 = a5;
  v57.i64[0] = vzip1q_s32(v13, v14).u64[0];
  v57.i64[1] = __PAIR64__(v57.u32[0], a9.u32[1]);
  v58 = v52
      + (float)(vadd_f32(vmul_lane_f32(*v56, *(float32x2_t *)a9.i8, 1), (float32x2_t)vdup_lane_s32((int32x2_t)vmul_f32(*(float32x2_t *)v14.i8, *v56), 1)).f32[0]+ (float)(v51 * v56[1].f32[0]));
  *(float32x2_t *)v59.f32 = *a3;
  v59.i64[1] = __PAIR64__(v54, v50.u32[0]);
  v60 = vmulq_f32(v57, v59);
  v59.i64[0] = vzip1q_s32(a13, a9).u64[0];
  v59.i64[1] = __PAIR64__(v59.u32[0], v14.u32[1]);
  *(int32x2_t *)v61.f32 = vrev64_s32(v50);
  v61.i64[1] = __PAIR64__(v55, v61.u32[0]);
  v62 = vaddq_f32(v60, vmulq_f32(v59, v61));
  v60.i64[0] = a10.i64[0];
  v60.i64[1] = __PAIR64__(a10.u32[0], LODWORD(v51));
  v15.i32[0] = a3[1].i32[0];
  v63 = v15;
  v63.i32[1] = a12.i32[0];
  v64 = (float32x4_t)vzip1q_s32(v63, v63);
  v64.i32[2] = v15.i32[0];
  v65 = vmulq_f32(v60, v64);
  v60.i64[0] = a7.i64[0];
  v60.i64[1] = __PAIR64__(a7.u32[0], LODWORD(v52));
  v66 = vaddq_f32(v62, v65);
  v62.i64[0] = v14.i64[0];
  v62.i64[1] = __PAIR64__(v14.u32[0], v13.u32[0]);
  v67.i32[0] = v55;
  *(float32x2_t *)&v67.u32[2] = *v56;
  v67.i32[1] = v55;
  a9.i32[2] = a9.i32[0];
  a9.i32[3] = a13.i32[0];
  v68.i32[0] = v54;
  *(float32x2_t *)&v68.u32[2] = *v56;
  v68.i32[1] = v54;
  v69 = (int32x4_t)vmulq_f32((float32x4_t)a9, v68);
  v70 = (float32x4_t)vrev64q_s32(v69);
  v70.i64[0] = v69.i64[0];
  v71 = vaddq_f32(v70, vmulq_f32(v62, v67));
  v72 = vuzp2q_s32(a10, vzip1q_s32(a10, a10));
  v73 = (float32x4_t)v72;
  v73.f32[1] = v51;
  v73.i32[3] = v72.i32[0];
  a12.i32[1] = v56[1].i32[0];
  v74 = vuzp2q_s32(a7, vzip1q_s32(a7, a7));
  v75 = (float32x4_t)v74;
  v75.f32[1] = v52;
  v75.i32[3] = v74.i32[0];
  v93 = vaddq_f32(v60, v66);
  v94 = vaddq_f32(v75, vaddq_f32(v71, vmulq_f32(v73, (float32x4_t)vzip1q_s32(a12, a12))));
  v95 = v58;
  LODWORD(v99[0]) = 2139095039;
  v76 = physx::Gu::triBoxSweepTestBoxSpace(v93.f32, (float *)(*(_QWORD *)(a1 + 48) + 48), *(float **)(a1 + 56), (float *)(a1 + 164), (float *)v99, *(_BYTE *)(a1 + 176) == 0, *(float *)(a1 + 32));
  result = v76 == 0;
  if (v76)
  {
    v77 = *(float *)v99;
    if (*(float *)v99 <= *(float *)(a1 + 32))
    {
      *(_DWORD *)(a1 + 32) = v99[0];
      *a6 = v77 * *(float *)(a1 + 20);
      v78 = *(_QWORD *)(a1 + 64);
      v79 = v93;
      v80 = v94;
      v81 = v93;
      v81.i32[3] = 0;
      *(_BYTE *)(a1 + 14) = 1;
      *(float32x4_t *)(a1 + 112) = v81;
      v81.i64[0] = *(_QWORD *)v78;
      v81.i64[0] = vnegq_f32(v81).u64[0];
      v81.f32[2] = -*(float *)(v78 + 8);
      v81.i32[3] = 0;
      *(float32x4_t *)(a1 + 128) = v81;
      *(_DWORD *)(a1 + 160) = *(_DWORD *)(a2 + 16);
      *(float32x4_t *)(a1 + 76) = v79;
      *(float32x4_t *)(a1 + 92) = v80;
      *(float *)(a1 + 108) = v95;
      if (v77 == 0.0)
      {
        *(_BYTE *)(a1 + 15) = 1;
        return result;
      }
    }
    return 1;
  }
  return result;
}

BOOL physx::Gu::SweepBoxMeshHitCallback::finalizeHit(uint64_t a1, uint64_t a2, uint64_t a3, double a4, double a5, double a6, double a7, double a8, double a9, double a10, __n128 a11, uint64_t a12, float32x4_t *a13, float32x2_t *a14, int a15, char a16)
{
  int v16;
  float32x4_t v19;
  __n128 v20;
  float32x2_t *v21;
  __int16 v25;
  float32x4_t v26;
  float32x4_t v27;
  float32x4_t v28;
  float v29;
  float v30;
  float v31;
  float32x4_t v32;
  float32x2_t v33;
  float v34;
  float32x4_t v35;
  float32x2_t v36;
  float32x2_t v37;
  int8x8_t v38;
  float32x4_t v39;
  float32x4_t v40;
  float32x4_t v41;
  float32x4_t v42;
  int8x16_t v43;
  float32x4_t v44;
  float32x4_t v45;
  float32x4_t v46;
  float32x4_t v47;
  float32x4_t v48;
  float32x4_t v49;
  char v50;
  float v51;
  __int16 v52;
  float v53;
  uint64_t v54;
  float v55;
  float v56;
  float v57;
  float v58;
  float v59;
  float v60;
  float v61;
  float v62;
  float v63;
  float v64;
  float v65;
  float v66;
  float32x2_t v68;
  float v69;
  float32x2_t v70;
  float v71;

  v16 = *(unsigned __int8 *)(a1 + 14);
  if (*(_BYTE *)(a1 + 14))
  {
    v19 = *(float32x4_t *)(a1 + 112);
    v20 = *(__n128 *)(a1 + 128);
    *(_DWORD *)(a2 + 16) = *(_DWORD *)(a1 + 160);
    if (*(_BYTE *)(a1 + 15))
    {
      if ((*(_WORD *)(a1 + 12) & 0x200) == 0)
      {
        v21 = *(float32x2_t **)(a1 + 64);
        *(_WORD *)(a2 + 20) = 1026;
LABEL_15:
        *(_DWORD *)(a2 + 48) = 0;
        v53 = -v21[1].f32[0];
        *(float32x2_t *)(a2 + 36) = vneg_f32(*v21);
        *(float *)(a2 + 44) = v53;
        return v16 != 0;
      }
      v50 = physx::Gu::computeBox_TriangleMeshMTD(a3);
      v21 = *(float32x2_t **)(a1 + 64);
      *(_WORD *)(a2 + 20) = 1026;
      if ((v50 & 1) == 0)
        goto LABEL_15;
      if (*(float *)(a2 + 48) == 0.0)
      {
        v51 = -v21[1].f32[0];
        *(float32x2_t *)(a2 + 36) = vneg_f32(*v21);
        *(float *)(a2 + 44) = v51;
      }
      v52 = 1027;
LABEL_29:
      *(_WORD *)(a2 + 20) = v52;
      return v16 != 0;
    }
    LODWORD(a4) = *(_DWORD *)(a1 + 32);
    *(_DWORD *)(a2 + 48) = LODWORD(a4);
    *(_WORD *)(a2 + 20) = 1024;
    v25 = *(_WORD *)(a1 + 12);
    if ((v25 & 0x100) != 0)
    {
      if ((v25 & 3) != 0)
      {
        v54 = *(_QWORD *)(a1 + 48);
        physx::Gu::computeBoxTriImpactData(&v70, &v68, (float32x2_t *)(v54 + 48), a14, a1 + 76, a4, *(double *)v19.i64, a6, v20, a8, a9, a10, a11);
        if ((v25 & 2) != 0)
        {
          v55 = v68.f32[1];
          v56 = v68.f32[0];
          v57 = v69;
          v58 = sqrtf((float)((float)(v68.f32[1] * v68.f32[1]) + (float)(v68.f32[0] * v68.f32[0])) + (float)(v57 * v57));
          if (v58 > 0.0)
          {
            v59 = 1.0 / v58;
            v56 = v68.f32[0] * v59;
            v55 = v68.f32[1] * v59;
            v57 = v69 * v59;
          }
          v60 = a14->f32[1];
          v61 = a14[1].f32[0];
          if ((float)((float)((float)(v55 * v60) + (float)(v56 * a14->f32[0])) + (float)(v57 * v61)) > 0.0)
          {
            v57 = -v57;
            v55 = -v55;
            v56 = -v56;
          }
          if (a15)
          {
            if ((a16 & 1) == 0)
            {
              v62 = *(float *)(a1 + 76);
              v63 = *(float *)(a1 + 80);
              v64 = *(float *)(a1 + 84);
              if ((float)((float)((float)(v60
                                         * (float)((float)((float)(*(float *)(a1 + 96) - v64)
                                                         * (float)(*(float *)(a1 + 100) - v62))
                                                 - (float)((float)(*(float *)(a1 + 88) - v62)
                                                         * (float)(*(float *)(a1 + 108) - v64))))
                                 + (float)((float)((float)((float)(*(float *)(a1 + 92) - v63)
                                                         * (float)(*(float *)(a1 + 108) - v64))
                                                 - (float)((float)(*(float *)(a1 + 96) - v64)
                                                         * (float)(*(float *)(a1 + 104) - v63)))
                                         * a14->f32[0]))
                         + (float)((float)((float)((float)(*(float *)(a1 + 88) - v62)
                                                 * (float)(*(float *)(a1 + 104) - v63))
                                         - (float)((float)(*(float *)(a1 + 92) - v63)
                                                 * (float)(*(float *)(a1 + 100) - v62)))
                                 * v61)) > 0.0)
              {
                v56 = -v56;
                v55 = -v55;
                v57 = -v57;
              }
            }
          }
          v65 = (float)((float)(v56 * *(float *)(v54 + 8)) + (float)(v55 * *(float *)(v54 + 20)))
              + (float)(v57 * *(float *)(v54 + 32));
          *(float32x2_t *)(a2 + 36) = vadd_f32(vadd_f32(vmul_n_f32(*(float32x2_t *)v54, v56), vmul_n_f32(*(float32x2_t *)(v54 + 12), v55)), vmul_n_f32(*(float32x2_t *)(v54 + 24), v57));
          *(float *)(a2 + 44) = v65;
          *(_WORD *)(a2 + 20) |= 2u;
        }
        if ((v25 & 1) != 0)
        {
          v66 = (float)((float)((float)(v70.f32[0] * *(float *)(v54 + 8)) + (float)(v70.f32[1] * *(float *)(v54 + 20)))
                      + (float)(v71 * *(float *)(v54 + 32)))
              + *(float *)(v54 + 44);
          *(float32x2_t *)(a2 + 24) = vadd_f32(vadd_f32(vadd_f32(vmul_n_f32(*(float32x2_t *)v54, v70.f32[0]), vmul_n_f32(*(float32x2_t *)(v54 + 12), v70.f32[1])), vmul_n_f32(*(float32x2_t *)(v54 + 24), v71)), *(float32x2_t *)(v54 + 36));
          *(float *)(a2 + 32) = v66;
          v52 = *(_WORD *)(a2 + 20) | 1;
          goto LABEL_29;
        }
      }
    }
    else
    {
      v26.i64[0] = a13[1].i64[0];
      v26.i64[1] = a13[1].u32[2];
      v27 = *a13;
      *(_WORD *)(a2 + 20) = 1027;
      v28 = vnegq_f32((float32x4_t)v20);
      v28.i32[3] = 0;
      if (a15)
      {
        if ((a16 & 1) == 0)
        {
          v29 = *(float *)(a1 + 76);
          v30 = *(float *)(a1 + 80);
          v31 = *(float *)(a1 + 84);
          if ((float)((float)((float)(a14->f32[1]
                                     * (float)((float)((float)(*(float *)(a1 + 96) - v31)
                                                     * (float)(*(float *)(a1 + 100) - v29))
                                             - (float)((float)(*(float *)(a1 + 88) - v29)
                                                     * (float)(*(float *)(a1 + 108) - v31))))
                             + (float)((float)((float)((float)(*(float *)(a1 + 92) - v30)
                                                     * (float)(*(float *)(a1 + 108) - v31))
                                             - (float)((float)(*(float *)(a1 + 96) - v31)
                                                     * (float)(*(float *)(a1 + 104) - v30)))
                                     * a14->f32[0]))
                     + (float)((float)((float)((float)(*(float *)(a1 + 88) - v29) * (float)(*(float *)(a1 + 104) - v30))
                                     - (float)((float)(*(float *)(a1 + 92) - v30) * (float)(*(float *)(a1 + 100) - v29)))
                             * a14[1].f32[0])) > 0.0)
          {
            v28 = vnegq_f32(v28);
            v28.i32[3] = 0;
          }
        }
      }
      v32 = v27;
      v32.i32[3] = 0;
      v33 = (float32x2_t)vdupq_laneq_s32((int32x4_t)v27, 3).u64[0];
      LODWORD(v34) = vmla_f32((float32x2_t)0xBF000000BF000000, v33, v33).u32[0];
      v35 = vmulq_n_f32(v28, v34);
      v35.i32[3] = 0;
      v36 = (float32x2_t)vextq_s8((int8x16_t)v32, (int8x16_t)v32, 8uLL).u64[0];
      v37 = (float32x2_t)vext_s8(*(int8x8_t *)v27.f32, (int8x8_t)v36, 4uLL);
      v38 = (int8x8_t)vmls_f32(vmul_f32(*(float32x2_t *)v27.f32, (float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v28, (int8x16_t)v28, 4uLL)), v37, *(float32x2_t *)v28.f32);
      *(int8x8_t *)v39.f32 = vext_s8(v38, (int8x8_t)vmls_f32(vmul_f32(v36, *(float32x2_t *)v28.f32), *(float32x2_t *)v27.f32, (float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v28, (int8x16_t)v28, 8uLL)), 4uLL);
      v39.i64[1] = v38.u32[0];
      v40 = vmlaq_laneq_f32(v35, v39, v27, 3);
      v40.i64[1] = vextq_s8((int8x16_t)v40, (int8x16_t)v40, 8uLL).u32[0];
      v41 = vmulq_f32(v32, v28);
      v41.i64[0] = vpaddq_f32(v41, v41).u64[0];
      v42 = vmlaq_n_f32(v40, v32, vpadd_f32(*(float32x2_t *)v41.f32, *(float32x2_t *)v41.f32).f32[0]);
      v43 = (int8x16_t)vaddq_f32(v42, v42);
      v44 = vmulq_n_f32(v19, v34);
      v44.i32[3] = 0;
      *(float32x2_t *)v39.f32 = vmls_f32(vmul_f32((float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v19, (int8x16_t)v19, 4uLL), *(float32x2_t *)v27.f32), v37, *(float32x2_t *)v19.f32);
      *(int8x8_t *)v45.f32 = vext_s8(*(int8x8_t *)v39.f32, (int8x8_t)vmls_f32(vmul_f32(*(float32x2_t *)v19.f32, v36), *(float32x2_t *)v27.f32, (float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v19, (int8x16_t)v19, 8uLL)), 4uLL);
      v45.i64[1] = v39.u32[0];
      v46 = vmlaq_laneq_f32(v44, v45, v27, 3);
      v46.i64[1] = vextq_s8((int8x16_t)v46, (int8x16_t)v46, 8uLL).u32[0];
      v47 = vmulq_f32(v19, v32);
      v47.i64[0] = vpaddq_f32(v47, v47).u64[0];
      v48 = vmlaq_n_f32(v46, v32, vpadd_f32(*(float32x2_t *)v47.f32, *(float32x2_t *)v47.f32).f32[0]);
      v48.i64[1] = vextq_s8((int8x16_t)v48, (int8x16_t)v48, 8uLL).u32[0];
      *(_QWORD *)(a2 + 40) = vextq_s8(v43, v43, 4uLL).u64[0];
      v47.i64[0] = 0x4000000040000000;
      v47.i64[1] = 0x4000000040000000;
      v49 = vmlaq_f32(v26, v47, v48);
      v49.i32[3] = v43.i32[0];
      *(float32x4_t *)(a2 + 24) = v49;
    }
  }
  return v16 != 0;
}

uint64_t sweepBox_MeshGeom(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, __int16 *a8)
{
  uint64_t (*v8)(void);
  __int16 v10;

  v8 = physx::Gu::gMidphaseBoxSweepTable[*(unsigned __int16 *)(*(_QWORD *)(a1 + 40) + 8) - 3];
  v10 = *a8;
  return v8();
}

BOOL physx::Gu::SweepConvexMeshHitCallback::processHit(uint64_t a1, uint64_t a2, float *a3, float *a4, float *a5, float *a6, int32x2_t a7)
{
  int32x2_t v7;
  float *v10;
  float v11;
  float v12;
  float v13;
  float v14;
  float v15;
  float v16;
  float v17;
  float v18;
  float v19;
  float v20;
  float v21;
  float v22;
  float v23;
  float v24;
  float v25;
  float v26;
  float v27;
  float *v28;
  float v29;
  float v30;
  float v31;
  float v32;
  float v33;
  float v34;
  float v35;
  float v36;
  float *v37;
  float v38;
  float v39;
  float v40;
  float v41;
  float v42;
  float v43;
  float v44;
  float v45;
  float v46;
  float v47;
  float v48;
  int v49;
  float32x4_t v50;
  float32x4_t v51;
  float32x4_t v52;
  float32x4_t v53;
  float32x4_t v54;
  float32x4_t v55;
  float32x4_t v56;
  float32x4_t v57;
  float32x4_t v58;
  float32x4_t v59;
  float32x4_t v60;
  float32x4_t v61;
  float32x4_t v62;
  float32x4_t v63;
  float32x4_t v64;
  float32x4_t v65;
  float32x4_t v66;
  float32x2_t v67;
  float32x4_t v68;
  float32x4_t v69;
  float32x4_t v70;
  float32x4_t v71;
  float32x4_t v72;
  float32x2_t v73;
  float v74;
  float32x4_t v75;
  float32x2_t v76;
  float32x2_t v77;
  int8x8_t v78;
  float32x4_t v79;
  float32x4_t v80;
  float32x4_t v81;
  float32x4_t v82;
  uint64_t v83;
  float32x4_t v84;
  int8x8_t v85;
  float32x4_t v86;
  float32x4_t v87;
  float32x4_t v88;
  float32x4_t v89;
  float32x4_t v90;
  float32x4_t v91;
  float32x2_t v92;
  float32x2_t v93;
  int v94;
  float32x2_t v100;
  float32x2_t v101;
  int v102;
  float32x4_t v103;
  float32x4_t v104;
  int8x16_t v105;
  float v106;
  int32x2_t v108;
  float v109;
  float v110;
  float v111;
  float v112;
  float v113;
  float v114;
  float v115;
  float v116;
  float v117;
  float32x4_t v118;
  _QWORD v119[2];
  _QWORD v120[2];
  float32x4_t v121;
  uint64_t v122;
  uint64_t v123;
  char v124;
  float32x4_t v125;
  float32x4_t v126;
  float32x4_t v127;
  uint64_t v128;
  float32x4_t v129;
  float32x2_t v130;
  float32x4_t v131;
  float32x4_t v132;

  v10 = *(float **)(a1 + 336);
  v11 = *v10;
  v12 = v10[1];
  v13 = a3[1];
  v14 = v10[2];
  v15 = v10[3];
  v16 = v10[4];
  v17 = v10[5];
  v18 = (float)(*a3 * *v10) + (float)(v13 * v15);
  v19 = (float)(*a3 * v12) + (float)(v13 * v16);
  v20 = (float)(*a3 * v14) + (float)(v13 * v17);
  v21 = a3[2];
  v22 = v10[6];
  v23 = v10[7];
  v24 = v10[8];
  v25 = v18 + (float)(v21 * v22);
  v26 = v19 + (float)(v21 * v23);
  v27 = v20 + (float)(v21 * v24);
  if (*(_BYTE *)(a1 + 16))
    v28 = a5;
  else
    v28 = a4;
  v29 = v28[1];
  v30 = (float)(v11 * *v28) + (float)(v15 * v29);
  v31 = (float)(v12 * *v28) + (float)(v16 * v29);
  v32 = (float)(v14 * *v28) + (float)(v17 * v29);
  v33 = v28[2];
  v34 = v30 + (float)(v22 * v33);
  v35 = v31 + (float)(v23 * v33);
  v36 = v32 + (float)(v24 * v33);
  if (*(_BYTE *)(a1 + 16))
    v37 = a4;
  else
    v37 = a5;
  v38 = v37[1];
  v39 = (float)(v11 * *v37) + (float)(v15 * v38);
  v40 = (float)(v12 * *v37) + (float)(v16 * v38);
  v41 = (float)(v14 * *v37) + (float)(v17 * v38);
  v42 = v37[2];
  v43 = v22 * v42;
  v44 = v23 * v42;
  v45 = v24 * v42;
  v46 = v39 + v43;
  v47 = v40 + v44;
  v48 = v41 + v45;
  a7.i32[0] = *(_DWORD *)(a1 + 456);
  v49 = *(_DWORD *)(a2 + 16);
  if (!*(_BYTE *)(a1 + 461)
    && (float)((float)((float)((float)((float)((float)(v36 - v27) * (float)(v46 - v34))
                                     - (float)((float)(v34 - v25) * (float)(v48 - v36)))
                             * *(float *)(a1 + 448))
                     + (float)((float)((float)((float)(v35 - v26) * (float)(v48 - v36))
                                     - (float)((float)(v36 - v27) * (float)(v47 - v35)))
                             * *(float *)(a1 + 444)))
             + (float)((float)((float)((float)(v34 - v25) * (float)(v47 - v35))
                             - (float)((float)(v35 - v26) * (float)(v46 - v34)))
                     * *(float *)(a1 + 452))) <= 0.0)
  {
    return 1;
  }
  v7.i32[0] = *(_DWORD *)(a1 + 392);
  v108 = v7;
  v129 = 0u;
  v50 = *(float32x4_t *)(a1 + 240);
  v51 = *(float32x4_t *)(a1 + 256);
  v52 = vmulq_n_f32(v50, v25);
  v52.i32[3] = 0;
  v53 = vmulq_n_f32(v51, v26);
  v53.i32[3] = 0;
  v128 = 0;
  v55 = *(float32x4_t *)(a1 + 272);
  v54 = *(float32x4_t *)(a1 + 288);
  v56 = vmulq_n_f32(v55, v27);
  v56.i32[3] = 0;
  v57 = vaddq_f32(v54, vaddq_f32(vaddq_f32(v52, v53), v56));
  v58 = vmulq_n_f32(v50, v34);
  v58.i32[3] = 0;
  v59 = vmulq_n_f32(v51, v35);
  v59.i32[3] = 0;
  v60 = vmulq_n_f32(v55, v36);
  v60.i32[3] = 0;
  v61 = vaddq_f32(v54, vaddq_f32(vaddq_f32(v58, v59), v60));
  v62 = vmulq_n_f32(v50, v46);
  v62.i32[3] = 0;
  v63 = vmulq_n_f32(v51, v47);
  v63.i32[3] = 0;
  v64 = vmulq_n_f32(v55, v48);
  v64.i32[3] = 0;
  v65 = vaddq_f32(v54, vaddq_f32(vaddq_f32(v62, v63), v64));
  v124 = 0;
  v66 = vmulq_f32(vaddq_f32(v65, vaddq_f32(v57, v61)), (float32x4_t)vdupq_n_s32(0x3EAAAA9Fu));
  v66.i32[3] = 0;
  v121 = v66;
  v125 = v57;
  v126 = v61;
  v127 = v65;
  v122 = 0x7F7FFFFF00000000;
  v123 = 0x57F7FFFFFLL;
  v120[0] = off_24ED91370;
  v120[1] = &v121;
  v119[0] = off_24ED91168;
  v119[1] = a1 + 64;
  v117 = v25;
  v118 = vsubq_f32(v66, *(float32x4_t *)(a1 + 64));
  v131 = 0u;
  v132 = 0u;
  v130 = 0;
  v115 = v27;
  v116 = v26;
  v113 = v35;
  v114 = v34;
  v111 = v46;
  v112 = v36;
  v109 = v47;
  v110 = v48;
  if (!physx::Gu::gjkRaycast<physx::Gu::LocalConvex<physx::Gu::TriangleV>,physx::Gu::LocalConvex<physx::Gu::ConvexHullV>>((uint64_t)v120, (uint64_t)v119, &v118, a7, (uint64_t)&v128, &v129, (float32x4_t *)(a1 + 416), &v130, &v131, (int8x16_t *)&v132))return 1;
  if (*(float *)&v128 >= v130.f32[0])
  {
    *(_BYTE *)(a1 + 15) = 1;
    *(_DWORD *)(a1 + 360) = v49;
    *(_WORD *)(a1 + 364) = 1026;
    v106 = -*(float *)(a1 + 440);
    *(float32x2_t *)(a1 + 380) = vneg_f32(*(float32x2_t *)(a1 + 432));
    *(float *)(a1 + 388) = v106;
    *(_DWORD *)(a1 + 392) = 0;
    v67.i32[0] = 0;
  }
  else
  {
    v67 = vmul_f32(v130, *(float32x2_t *)(a1 + 400));
    if ((vcgt_f32((float32x2_t)vdup_lane_s32(v108, 0), v67).u8[0] & 1) == 0)
      return 1;
    v68 = v131;
    v69 = v132;
    v71 = *(float32x4_t *)(a1 + 304);
    v70 = *(float32x4_t *)(a1 + 320);
    v72 = v71;
    v72.i32[3] = 0;
    v73 = (float32x2_t)vdupq_laneq_s32((int32x4_t)v71, 3).u64[0];
    *(_DWORD *)(a1 + 360) = v49;
    LODWORD(v74) = vmla_f32((float32x2_t)0xBF000000BF000000, v73, v73).u32[0];
    v75 = vmulq_n_f32(v69, v74);
    v75.i32[3] = 0;
    v76 = (float32x2_t)vextq_s8((int8x16_t)v72, (int8x16_t)v72, 8uLL).u64[0];
    v77 = (float32x2_t)vext_s8(*(int8x8_t *)v71.f32, (int8x8_t)v76, 4uLL);
    v78 = (int8x8_t)vmls_f32(vmul_f32((float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v69, (int8x16_t)v69, 4uLL), *(float32x2_t *)v71.f32), v77, *(float32x2_t *)v69.f32);
    *(int8x8_t *)v79.f32 = vext_s8(v78, (int8x8_t)vmls_f32(vmul_f32(*(float32x2_t *)v69.f32, v76), *(float32x2_t *)v71.f32, (float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v69, (int8x16_t)v69, 8uLL)), 4uLL);
    v79.i64[1] = v78.u32[0];
    v80 = vmlaq_laneq_f32(v75, v79, v71, 3);
    v80.i64[1] = vextq_s8((int8x16_t)v80, (int8x16_t)v80, 8uLL).u32[0];
    v81 = vmulq_f32(v69, v72);
    v81.i64[0] = vpaddq_f32(v81, v81).u64[0];
    v82 = vmlaq_n_f32(v80, v72, vpadd_f32(*(float32x2_t *)v81.f32, *(float32x2_t *)v81.f32).f32[0]);
    v83 = vextq_s8((int8x16_t)v82, (int8x16_t)v82, 8uLL).u32[0];
    v84 = vmulq_n_f32(v68, v74);
    v84.i32[3] = 0;
    v85 = (int8x8_t)vmls_f32(vmul_f32((float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v68, (int8x16_t)v68, 4uLL), *(float32x2_t *)v71.f32), v77, *(float32x2_t *)v68.f32);
    *(int8x8_t *)v86.f32 = vext_s8(v85, (int8x8_t)vmls_f32(vmul_f32(*(float32x2_t *)v68.f32, v76), *(float32x2_t *)v71.f32, (float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v68, (int8x16_t)v68, 8uLL)), 4uLL);
    v86.i64[1] = v85.u32[0];
    v87 = vmlaq_laneq_f32(v84, v86, v71, 3);
    v87.i64[1] = vextq_s8((int8x16_t)v87, (int8x16_t)v87, 8uLL).u32[0];
    v88 = vmulq_f32(v68, v72);
    v88.i64[0] = vpaddq_f32(v88, v88).u64[0];
    v89 = vmlaq_n_f32(v87, v72, vpadd_f32(*(float32x2_t *)v88.f32, *(float32x2_t *)v88.f32).f32[0]);
    v90 = vaddq_f32(v89, v89);
    v90.i32[3] = 0;
    *(_WORD *)(a1 + 364) = 1027;
    v91 = vmulq_f32(v90, v90);
    v91.i64[0] = vpaddq_f32(v91, v91).u64[0];
    v92 = vpadd_f32(*(float32x2_t *)v91.f32, *(float32x2_t *)v91.f32);
    v93 = vrsqrte_f32(v92);
    v94 = 4;
    do
    {
      v93 = vmul_f32(v93, vrsqrts_f32(vmul_f32(v93, v93), v92));
      --v94;
    }
    while (v94);
    __asm { FMOV            V16.2S, #1.0 }
    v100 = vmul_f32(v92, (float32x2_t)vbsl_s8((int8x8_t)vdup_lane_s32(vceqz_f32(v92), 0), _D16, (int8x8_t)v93));
    v101 = vrecpe_f32(v100);
    v102 = 4;
    do
    {
      v101 = vmul_f32(v101, vrecps_f32(v100, v101));
      --v102;
    }
    while (v102);
    v82.i64[1] = v83;
    v103.i64[0] = 0x4000000040000000;
    v103.i64[1] = 0x4000000040000000;
    v104 = vmlaq_f32(v70, v103, v82);
    v105 = (int8x16_t)vmulq_n_f32(v90, v101.f32[0]);
    v104.i32[3] = v105.i32[0];
    *(float32x4_t *)(a1 + 368) = v104;
    *(_QWORD *)(a1 + 384) = vextq_s8(v105, v105, 4uLL).u64[0];
    *(_DWORD *)(a1 + 392) = v67.i32[0];
  }
  *(_BYTE *)(a1 + 14) = 1;
  *a6 = v67.f32[0] * *(float *)(a1 + 20);
  *(float *)(a1 + 24) = v117;
  *(float *)(a1 + 28) = v116;
  *(float *)(a1 + 32) = v115;
  *(float *)(a1 + 36) = v114;
  *(float *)(a1 + 40) = v113;
  *(float *)(a1 + 44) = v112;
  *(float *)(a1 + 48) = v111;
  *(float *)(a1 + 52) = v109;
  *(float *)(a1 + 56) = v110;
  return !*(_BYTE *)(a1 + 460) && *(float *)(a1 + 392) != 0.0;
}

BOOL sweepConvex_MeshGeom(uint64_t a1, float32x4_t *a2, uint64_t a3, float32x4_t *a4, float32x2_t *a5, uint64_t a6, unsigned __int16 *a7, double a8, double a9)
{
  BOOL v15;
  _BOOL4 v16;
  uint64_t v17;
  __int128 v18;
  float v19;
  float v20;
  float v21;
  float v22;
  float v23;
  float v24;
  float v25;
  float v26;
  float v27;
  float v28;
  float32x2_t v29;
  float32x2_t v30;
  float v31;
  float v32;
  float v33;
  float v34;
  float v35;
  float v36;
  float v37;
  float v38;
  float v39;
  float v40;
  float v41;
  float32_t v42;
  float v43;
  float v44;
  float v45;
  float v46;
  float v47;
  float v48;
  float v49;
  float v50;
  float v51;
  float v52;
  float v53;
  float32x2_t v54;
  float v55;
  float v56;
  float v57;
  float v58;
  float v59;
  float v60;
  float v61;
  float v62;
  float v63;
  float v64;
  float v65;
  float v66;
  float32x2_t v67;
  float32x4_t v68;
  int8x8_t v69;
  _BOOL4 v70;
  float v71;
  unsigned __int16 v72;
  int v73;
  float v74;
  float v75;
  float v76;
  float v77;
  float32x4_t v78;
  float32x4_t v79;
  float32x4_t v80;
  float32x4_t v81;
  float32x2_t v82;
  float32x4_t v83;
  float32x4_t v84;
  float32x4_t v85;
  float32x2_t v86;
  float32x2_t v87;
  int8x8_t v88;
  float32x4_t v89;
  float32x4_t v90;
  float32x4_t v91;
  float32x4_t v92;
  float32x4_t v93;
  float32x4_t v94;
  float32x4_t v95;
  float32x2_t v96;
  float32x4_t v97;
  int8x8_t v98;
  float32x4_t v99;
  float32x4_t v100;
  float32x4_t v101;
  float32x2_t v102;
  float32x2_t v103;
  float32x2_t v104;
  float32x2_t v105;
  float32x2_t v106;
  float32x2_t v107;
  float32x2_t v108;
  __int128 v113;
  float32x4_t v114;
  float32x4_t v115;
  float32x4_t v116;
  float32x4_t v117;
  float32x4_t v118;
  float32x4_t v119;
  float32x4_t v120;
  float32x4_t v121;
  float32x4_t v122;
  float32x4_t v123;
  float32x4_t v124;
  float32x4_t v125;
  uint64_t v126;
  float32x4_t v127;
  int32x4_t v128;
  float32x4_t v129;
  int v130;
  float32x4_t v131;
  float32x4_t v132;
  float32x4_t v133;
  float32x4_t v134;
  float32x4_t v135;
  float32x4_t v136;
  float32x4_t v137;
  float32x2_t v138;
  float32x2_t v139;
  float32x2_t v140;
  float32x4_t v141;
  float32x2_t v142;
  float32x2_t v143;
  float32x2_t v144;
  float32x2_t v145;
  float32x2_t v146;
  float32x2_t v147;
  float32x2_t v148;
  float32x2_t v149;
  float32x2_t v150;
  int32x2_t v151;
  int8x8_t v152;
  float32x4_t v153;
  int32x2_t v154;
  int8x8_t v155;
  int8x8_t v156;
  float32x4_t v157;
  int32x2_t v158;
  float32x4_t v159;
  float32x4_t v160;
  float32x4_t v161;
  float32x4_t v162;
  float32x4_t v163;
  float32x4_t v164;
  float32x4_t v165;
  float32x4_t v166;
  float32x4_t v167;
  float32x4_t v168;
  float32x4_t v169;
  float32x4_t v170;
  float32x4_t v171;
  float32x4_t v172;
  float32x4_t v173;
  float32x4_t v174;
  float32x4_t v175;
  float32x4_t v176;
  float32x4_t v177;
  float32x4_t v178;
  float32x4_t v179;
  float32x4_t v180;
  float32x4_t v181;
  float32x4_t v182;
  float32x4_t v183;
  float32x4_t v184;
  float32x4_t v185;
  float32x4_t v186;
  float32x4_t v187;
  float32x4_t v188;
  uint64_t v189;
  int v195;
  uint64_t v196;
  uint64_t v197;
  int v198;
  float v199;
  float v200;
  float v201;
  float v202;
  float v203;
  float v204;
  float v205;
  float v206;
  float v207;
  float v208;
  float v209;
  float v210;
  float v211;
  float v212;
  float v213;
  char v214;
  float v215;
  float v216;
  char v218;
  uint64_t v220;
  float32x2_t v224;
  float v225;
  float v226;
  float v227;
  float v228;
  float v229;
  float v230;
  float v231;
  uint64_t v232;
  __int32 v233;
  float v234[12];
  float32x2_t v235;
  float v236;
  float32x2_t v237;
  float v238;
  float32x2_t v239;
  float v240;
  _OWORD v241[2];
  __int128 v242;
  _BYTE v243[24];
  char v244;
  _BYTE v245[32];
  __int128 v246;
  __int128 v247;
  uint64_t v248;
  char v249;
  uint64_t (**v250)();
  int v251;
  float v252;
  float v253;
  float v254;
  float v255;
  float v256;
  float v257;
  uint64_t v258;
  float v259;
  float v260;
  float v261;
  float v262;
  float32x4_t v263;
  __int128 v264;
  char v265;
  __int128 v266;
  __int128 v267;
  __int128 v268;
  __int128 v269;
  __int128 v270;
  __int128 v271;
  uint64_t v272;
  uint64_t v273;
  uint64_t v274;
  char v275;
  __int128 v276;
  float32x4_t v277;
  float32x4_t v278;
  float32x4_t v279;
  float32x4_t v280;
  float32x4_t v281;
  _OWORD *v282;
  __int128 v283;
  int v284;
  __int16 v285;
  uint64_t v286;
  uint64_t v287;
  uint64_t v288;
  int v289;
  int v290;
  unint64_t v291;
  float32x4_t v292;
  uint64_t v293;
  float v294;
  float v295;
  float v296;
  float v297;
  int v298;
  BOOL v299;
  BOOL v300;
  uint64_t v301;

  v301 = *MEMORY[0x24BDAC8D0];
  v15 = *(float *)(a3 + 4) == 1.0 && *(float *)(a3 + 8) == 1.0 && *(float *)(a3 + 12) == 1.0;
  v16 = *(float *)(a1 + 4) == 1.0 && *(float *)(a1 + 8) == 1.0 && *(float *)(a1 + 12) == 1.0;
  v17 = *(_QWORD *)(a3 + 32);
  v220 = *(_QWORD *)(a1 + 40);
  *(_OWORD *)v245 = xmmword_2260E5F10;
  *(_OWORD *)&v245[16] = xmmword_2260E5F10;
  v18 = xmmword_2260FD430;
  v246 = xmmword_2260FD430;
  v247 = xmmword_2260E5F20;
  v248 = 0x3F80000000000000;
  v249 = 0;
  if (!v15)
  {
    physx::Cm::FastVertex2ShapeScaling::init((uint64_t)v245, (float *)(a3 + 4), (float *)(a3 + 16));
    v18 = xmmword_2260FD430;
  }
  v241[0] = xmmword_2260E5F10;
  v241[1] = xmmword_2260E5F10;
  v242 = v18;
  *(_OWORD *)v243 = xmmword_2260E5F20;
  *(_QWORD *)&v243[16] = 0x3F80000000000000;
  v244 = 0;
  if (!v16)
    physx::Cm::FastVertex2ShapeScaling::init((uint64_t)v241, (float *)(a1 + 4), (float *)(a1 + 16));
  v19 = *(float *)(v17 + 32);
  v20 = *(float *)(v17 + 36);
  v21 = *(float *)(v17 + 40);
  v22 = (float)((float)(v19 * *(float *)&v245[8]) + (float)(v20 * *(float *)&v245[20])) + (float)(v21 * *(float *)&v246);
  v23 = *(float *)(v17 + 44);
  v24 = *(float *)(v17 + 48);
  v25 = *(float *)(v17 + 52);
  v26 = (float)(fabsf(*(float *)&v245[8] * v23) + fabsf(*(float *)&v245[20] * v24)) + fabsf(*(float *)&v246 * v25);
  v27 = v22 - v26;
  v28 = v22 + v26;
  v29 = vadd_f32(vadd_f32(vmul_n_f32(*(float32x2_t *)v245, v19), vmul_n_f32(*(float32x2_t *)&v245[12], v20)), vmul_n_f32(*(float32x2_t *)&v245[24], v21));
  v30 = vadd_f32(vadd_f32(vabs_f32(vmul_n_f32(*(float32x2_t *)v245, v23)), vabs_f32(vmul_n_f32(*(float32x2_t *)&v245[12], v24))), vabs_f32(vmul_n_f32(*(float32x2_t *)&v245[24], v25)));
  v237 = vsub_f32(v29, v30);
  v238 = v27;
  v239 = vadd_f32(v29, v30);
  v240 = v28;
  v29.i32[0] = a4->i32[0];
  v31 = a4->f32[1];
  v32 = a4->f32[2];
  v30.i32[0] = a4->i32[3];
  v33 = v31 + v31;
  v34 = v32 + v32;
  v35 = v31 * (float)(v31 + v31);
  v36 = v32 * (float)(v32 + v32);
  v37 = (float)(v29.f32[0] + v29.f32[0]) * v31;
  v38 = (float)(v29.f32[0] + v29.f32[0]) * v32;
  v39 = (float)(v29.f32[0] + v29.f32[0]) * v30.f32[0];
  v40 = v33 * v32;
  v41 = v33 * v30.f32[0];
  v30.f32[0] = v34 * v30.f32[0];
  *(float *)&v250 = (float)(1.0 - v35) - v36;
  *((float *)&v250 + 1) = v37 + v30.f32[0];
  v29.f32[0] = 1.0 - (float)(v29.f32[0] * (float)(v29.f32[0] + v29.f32[0]));
  *(float *)&v251 = v38 - v41;
  v252 = v37 - v30.f32[0];
  v253 = v29.f32[0] - v36;
  v254 = v40 + v39;
  v255 = v38 + v41;
  v256 = v40 - v39;
  v258 = a4[1].i64[0];
  v42 = a4[1].f32[2];
  v257 = v29.f32[0] - v35;
  v259 = v42;
  v29.i32[0] = a2->i32[0];
  v43 = a2->f32[1];
  v44 = a2->f32[2];
  v30.i32[0] = a2->i32[3];
  v45 = v43 + v43;
  v46 = v44 + v44;
  v47 = v43 * (float)(v43 + v43);
  v48 = v44 * (float)(v44 + v44);
  v49 = (float)(v29.f32[0] + v29.f32[0]) * v43;
  v50 = (float)(v29.f32[0] + v29.f32[0]) * v44;
  v51 = (float)(v29.f32[0] + v29.f32[0]) * v30.f32[0];
  v52 = v45 * v44;
  v53 = v45 * v30.f32[0];
  v30.f32[0] = v46 * v30.f32[0];
  v224.f32[0] = (float)(1.0 - v47) - v48;
  v224.f32[1] = v49 + v30.f32[0];
  v29.f32[0] = 1.0 - (float)(v29.f32[0] * (float)(v29.f32[0] + v29.f32[0]));
  v225 = v50 - v53;
  v226 = v49 - v30.f32[0];
  v227 = v29.f32[0] - v48;
  v228 = v52 + v51;
  v229 = v50 + v53;
  v230 = v52 - v51;
  v231 = v29.f32[0] - v47;
  v232 = a2[1].i64[0];
  v29.i32[1] = HIDWORD(v232);
  v233 = a2[1].i32[2];
  v29.i32[0] = 0;
  physx::Gu::computeHullOBB(v234, (uint64_t)&v237, (float *)&v250, (float *)&v224, (uint64_t)v241, v16, *(double *)&v29);
  v235 = vadd_f32(v235, (float32x2_t)vdup_lane_s32(*(int32x2_t *)&a9, 0));
  v236 = v236 + *(float *)&a9;
  v54 = *a5;
  LODWORD(v55) = HIDWORD(*(unint64_t *)a5);
  v56 = a5[1].f32[0];
  v58 = a2->f32[2];
  v57 = a2->f32[3];
  v59 = (float)(v57 * v57) + -0.5;
  v60 = a2->f32[0];
  v61 = a2->f32[1];
  v62 = (float)((float)((float)(v55 + v55) * v61) + (float)(a2->f32[0] * (float)(v54.f32[0] + v54.f32[0])))
      + (float)(v58 * (float)(v56 + v56));
  v63 = -a2->f32[0];
  v68.f32[0] = (float)((float)((float)((float)(v54.f32[0] + v54.f32[0]) * v59)
                             - (float)((float)((float)(v61 * (float)(v56 + v56)) - (float)(v58 * (float)(v55 + v55)))
                                     * v57))
                     + (float)(a2->f32[0] * v62))
             * *(float *)&a8;
  v64 = (float)((float)((float)((float)(v55 + v55) * v59)
                      - (float)((float)((float)(v58 * (float)(v54.f32[0] + v54.f32[0]))
                                      - (float)(a2->f32[0] * (float)(v56 + v56)))
                              * v57))
              + (float)(v61 * v62))
      * *(float *)&a8;
  v65 = (float)((float)((float)((float)(v56 + v56) * v59)
                      - (float)((float)((float)(a2->f32[0] * (float)(v55 + v55))
                                      - (float)(v61 * (float)(v54.f32[0] + v54.f32[0])))
                              * v57))
              + (float)(v58 * v62))
      * *(float *)&a8;
  v66 = (float)(*((float *)&v242 + 3) * v68.f32[0]) + (float)(v64 * *(float *)&v243[8]);
  v67 = vadd_f32(vadd_f32(vmul_n_f32(*(float32x2_t *)((char *)&v242 + 4), v68.f32[0]), vmul_n_f32(*(float32x2_t *)v243, v64)), vmul_n_f32(*(float32x2_t *)&v243[12], v65));
  v68.f32[0] = v66 + (float)(v65 * *(float *)&v243[20]);
  v224 = v67;
  v225 = v68.f32[0];
  v69 = (int8x8_t)vmul_f32(v67, v67);
  *(float *)v69.i32 = sqrtf(vmlas_n_f32(*(float *)&v69.i32[1], v67.f32[0], v67.f32[0]) + (float)(v68.f32[0] * v68.f32[0]));
  if (*(float *)v69.i32 > 0.0)
  {
    v224 = vmul_n_f32(v67, 1.0 / *(float *)v69.i32);
    v225 = v68.f32[0] * (float)(1.0 / *(float *)v69.i32);
  }
  v70 = 0;
  if (v16)
    v71 = 1.0;
  else
    v71 = *(float *)v69.i32 / *(float *)&a8;
  v72 = *a7;
  v218 = *(_BYTE *)(a1 + 32);
  v73 = *a7 & 0x80 | v218 & 2;
  *(float32x2_t *)v68.f32 = vneg_f32(v54);
  v251 = 2;
  LODWORD(v252) = v72;
  LOBYTE(v253) = v244;
  v254 = v71;
  v250 = &off_24ED92110;
  v263 = 0u;
  v264 = 0u;
  v265 = 0;
  v282 = v241;
  v283 = 0uLL;
  v285 = 0;
  v288 = 0;
  v286 = 0;
  v287 = 0;
  v293 = v68.i64[0];
  v294 = -v56;
  v298 = LODWORD(a9);
  v299 = (v72 & 0x40) != 0;
  v300 = v73 != 0;
  v289 = LODWORD(a8);
  v284 = -1;
  v74 = v54.f32[0] * -2.0;
  v75 = v55 * -2.0;
  v76 = v56 * -2.0;
  v77 = (float)((float)(v75 * v61) + (float)(v60 * v74)) + (float)(v58 * v76);
  v295 = (float)((float)(v74 * v59) - (float)((float)((float)(v75 * (float)-v58) + (float)(v61 * v76)) * v57))
       + (float)(v60 * v77);
  v296 = (float)((float)(v75 * v59) - (float)((float)((float)(v76 * v63) + (float)(v58 * v74)) * v57))
       + (float)(v61 * v77);
  v297 = (float)((float)(v76 * v59) - (float)((float)((float)(v74 * (float)-v61) + (float)(v60 * v75)) * v57))
       + (float)(v58 * v77);
  v68.f32[2] = v294;
  v78.i64[0] = a2[1].i64[0];
  v78.i64[1] = a2[1].u32[2];
  v79 = *a4;
  v80.i64[0] = a4[1].i64[0];
  v80.i64[1] = a4[1].u32[2];
  v81 = vnegq_f32(*a4);
  v82 = (float32x2_t)vdupq_laneq_s32(*(int32x4_t *)a4, 3).u64[0];
  v83 = v81;
  v83.i32[3] = 0;
  v84 = vsubq_f32(v78, v80);
  v78.i32[0] = vmla_f32((float32x2_t)0xBF000000BF000000, v82, v82).u32[0];
  v85 = vmulq_n_f32(v84, v78.f32[0]);
  v85.i32[3] = 0;
  v86 = (float32x2_t)vextq_s8((int8x16_t)v83, (int8x16_t)v83, 8uLL).u64[0];
  v87 = (float32x2_t)vext_s8(*(int8x8_t *)v81.f32, (int8x8_t)v86, 4uLL);
  v88 = (int8x8_t)vmls_f32(vmul_f32(*(float32x2_t *)v81.f32, (float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v84, (int8x16_t)v84, 4uLL)), v87, *(float32x2_t *)v84.f32);
  *(int8x8_t *)v89.f32 = vext_s8(v88, (int8x8_t)vmls_f32(vmul_f32(v86, *(float32x2_t *)v84.f32), *(float32x2_t *)v81.f32, (float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v84, (int8x16_t)v84, 8uLL)), 4uLL);
  v89.i64[1] = v88.u32[0];
  v90 = vmlaq_laneq_f32(v85, v89, *a4, 3);
  v90.i64[1] = vextq_s8((int8x16_t)v90, (int8x16_t)v90, 8uLL).u32[0];
  v91 = vmulq_f32(v83, v84);
  v91.i64[0] = vpaddq_f32(v91, v91).u64[0];
  v92 = vmlaq_n_f32(v90, v83, vpadd_f32(*(float32x2_t *)v91.f32, *(float32x2_t *)v91.f32).f32[0]);
  v93 = vaddq_f32(v92, v92);
  v93.i32[3] = 0;
  v94 = *a2;
  v94.i32[3] = 0;
  v95 = vmulq_f32(v94, v83);
  v95.i64[0] = vpaddq_f32(v95, v95).u64[0];
  v96 = vsub_f32(vmul_f32((float32x2_t)*(_OWORD *)&vextq_s8(*(int8x16_t *)a2, *(int8x16_t *)a2, 8uLL), (float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v79, (int8x16_t)v79, 8uLL)), vpadd_f32(*(float32x2_t *)v95.f32, *(float32x2_t *)v95.f32));
  v97 = vmulq_laneq_f32(v94, *a4, 3);
  v94.i64[0] = vextq_s8((int8x16_t)v94, (int8x16_t)v94, 8uLL).u64[0];
  v98 = (int8x8_t)vmls_f32(vmul_f32((float32x2_t)vext_s8(*(int8x8_t *)a2->f32, *(int8x8_t *)v94.f32, 4uLL), *(float32x2_t *)v81.f32), v87, *(float32x2_t *)a2->f32);
  *(int8x8_t *)v99.f32 = vext_s8(v98, (int8x8_t)vmls_f32(vmul_f32(*(float32x2_t *)a2->f32, v86), *(float32x2_t *)v81.f32, *(float32x2_t *)v94.f32), 4uLL);
  *(int8x8_t *)&v99.u32[2] = v98;
  v100 = vaddq_f32(vaddq_f32(vmulq_laneq_f32(v83, *a2, 3), v97), v99);
  *(int32x2_t *)v81.f32 = vdup_lane_s32(*(int32x2_t *)v100.f32, 1);
  *(int32x2_t *)v83.f32 = vdup_laneq_s32((int32x4_t)v100, 2);
  v101 = vaddq_f32(v100, v100);
  v102 = (float32x2_t)vdup_laneq_s32((int32x4_t)v101, 2);
  v103 = (float32x2_t)vdup_lane_s32((int32x2_t)vmul_f32(*(float32x2_t *)v100.f32, *(float32x2_t *)v101.f32), 0);
  v104 = vmul_lane_f32(*(float32x2_t *)v81.f32, *(float32x2_t *)v101.f32, 1);
  v105 = vmul_laneq_f32(*(float32x2_t *)v83.f32, v101, 2);
  *(float32x2_t *)v81.f32 = vmul_n_f32(*(float32x2_t *)v81.f32, v101.f32[0]);
  v106 = vmul_n_f32(*(float32x2_t *)v83.f32, v101.f32[0]);
  v107 = vmul_lane_f32((float32x2_t)vdup_lane_s32(*(int32x2_t *)v101.f32, 0), v96, 1);
  *(float32x2_t *)v83.f32 = vmul_lane_f32(*(float32x2_t *)v83.f32, *(float32x2_t *)v101.f32, 1);
  *(float32x2_t *)v101.f32 = vmul_lane_f32((float32x2_t)vdup_lane_s32(*(int32x2_t *)v101.f32, 1), v96, 1);
  v108 = vmul_lane_f32(v102, v96, 1);
  __asm { FMOV            V3.2S, #1.0 }
  *(float32x2_t *)v97.f32 = vsub_f32(_D3, v103);
  *(int8x8_t *)&v113 = vext_s8((int8x8_t)vsub_f32(vsub_f32(_D3, v104), v105), (int8x8_t)vadd_f32(*(float32x2_t *)v81.f32, v108), 4uLL);
  *((_QWORD *)&v113 + 1) = vsub_f32(v106, *(float32x2_t *)v101.f32).u32[0];
  *(int8x8_t *)v81.f32 = vext_s8((int8x8_t)vsub_f32(*(float32x2_t *)v81.f32, v108), (int8x8_t)vsub_f32(*(float32x2_t *)v97.f32, v105), 4uLL);
  v81.i64[1] = vadd_f32(*(float32x2_t *)v83.f32, v107).u32[0];
  *(int8x8_t *)v83.f32 = vext_s8((int8x8_t)vadd_f32(v106, *(float32x2_t *)v101.f32), (int8x8_t)vsub_f32(*(float32x2_t *)v83.f32, v107), 4uLL);
  v83.i64[1] = vsub_f32(*(float32x2_t *)v97.f32, v104).u32[0];
  v276 = v113;
  v277 = v81;
  v278 = v83;
  v279 = v93;
  v280 = v79;
  v281 = v80;
  v114 = vmulq_n_f32(v68, *(float *)&a8);
  v114.i32[3] = 0;
  v115 = vnegq_f32(v114);
  v116 = v115;
  v116.i32[3] = 0;
  v117 = v79;
  v117.i32[3] = 0;
  v118 = vmulq_n_f32(v116, v78.f32[0]);
  v118.i32[3] = 0;
  v81.i64[0] = vextq_s8((int8x16_t)v117, (int8x16_t)v117, 8uLL).u64[0];
  v83.i64[0] = vextq_s8((int8x16_t)v116, (int8x16_t)v116, 8uLL).u64[0];
  *(float32x2_t *)v101.f32 = vmls_f32(vmul_f32((float32x2_t)vext_s8(*(int8x8_t *)v115.f32, *(int8x8_t *)v83.f32, 4uLL), *(float32x2_t *)v79.f32), (float32x2_t)vext_s8(*(int8x8_t *)v79.f32, *(int8x8_t *)v81.f32, 4uLL), *(float32x2_t *)v115.f32);
  *(int8x8_t *)v115.f32 = vext_s8(*(int8x8_t *)v101.f32, (int8x8_t)vmls_f32(vmul_f32(*(float32x2_t *)v115.f32, *(float32x2_t *)v81.f32), *(float32x2_t *)v79.f32, *(float32x2_t *)v83.f32), 4uLL);
  v115.i64[1] = v101.u32[0];
  v119 = vmlsq_laneq_f32(v118, v115, v79, 3);
  v119.i64[1] = vextq_s8((int8x16_t)v119, (int8x16_t)v119, 8uLL).u32[0];
  v120 = vmulq_f32(v116, v117);
  v120.i64[0] = vpaddq_f32(v120, v120).u64[0];
  v121 = vmlaq_n_f32(v119, v117, vpadd_f32(*(float32x2_t *)v120.f32, *(float32x2_t *)v120.f32).f32[0]);
  v122 = vaddq_f32(v121, v121);
  v122.i32[3] = 0;
  v292 = v122;
  v291 = vdupq_lane_s32(*(int32x2_t *)&a8, 0).u64[0];
  v123 = *(float32x4_t *)(a3 + 4);
  v124 = v123;
  v124.i32[3] = 0;
  if (v123.f32[0] == 1.0 && v123.f32[1] == 1.0)
    v70 = v123.f32[2] == 1.0;
  v125 = *(float32x4_t *)(a3 + 16);
  v126 = *(_QWORD *)(v17 + 72) + 20 * *(unsigned __int8 *)(v17 + 71);
  v127.i64[0] = *(_QWORD *)(v17 + 92);
  v127.i64[1] = *(unsigned int *)(v17 + 100);
  v128 = (int32x4_t)vmulq_f32(v124, v127);
  *(float32x2_t *)v128.i8 = vpmin_f32((float32x2_t)vdup_laneq_s32(v128, 2), *(float32x2_t *)v128.i8);
  *(float *)v128.i32 = vpmin_f32(*(float32x2_t *)v128.i8, *(float32x2_t *)v128.i8).f32[0];
  *(float32x2_t *)&v264 = vmul_n_f32((float32x2_t)0x3D4CCCCD3DCCCCCDLL, *(float *)v128.i32);
  *((float *)&v264 + 2) = 0.025 * *(float *)v128.i32;
  if (v70)
  {
    v266 = xmmword_2260E5F10;
    v267 = xmmword_2260E5F20;
    v268 = xmmword_2260E5F40;
    v269 = xmmword_2260E5F10;
    v270 = xmmword_2260E5F20;
    v271 = xmmword_2260E5F40;
  }
  else
  {
    v129 = vrecpeq_f32(v124);
    v130 = 4;
    do
    {
      v129 = vmulq_f32(v129, vrecpsq_f32(v129, v124));
      --v130;
    }
    while (v130);
    *(int32x2_t *)v131.f32 = vdup_lane_s32(*(int32x2_t *)v123.f32, 0);
    v131.i64[1] = v131.u32[0];
    if ((~vuzp1_s8((int8x8_t)vmovn_s32(vceqq_f32(v131, v124)), v69).u32[0] & 0xFFFFFF) != 0)
    {
      v138 = (float32x2_t)vdup_lane_s32(*(int32x2_t *)v125.f32, 1);
      v139 = (float32x2_t)vdup_laneq_s32((int32x4_t)v125, 2);
      v140 = (float32x2_t)vdup_laneq_s32((int32x4_t)v125, 3);
      v141 = vaddq_f32(v125, v125);
      v142 = vmul_lane_f32(v138, *(float32x2_t *)v141.f32, 1);
      v143 = vmul_laneq_f32(v139, v141, 2);
      v144 = vmul_n_f32(v138, v141.f32[0]);
      v145 = vmul_n_f32(v139, v141.f32[0]);
      v146 = vmul_n_f32(v140, v141.f32[0]);
      v147 = vmul_lane_f32(v139, *(float32x2_t *)v141.f32, 1);
      v148 = vmul_lane_f32(v140, *(float32x2_t *)v141.f32, 1);
      v149 = vmul_laneq_f32(v140, v141, 2);
      v150 = vsub_f32(_D3, (float32x2_t)vdup_lane_s32((int32x2_t)vmul_f32(*(float32x2_t *)v125.f32, *(float32x2_t *)v141.f32), 0));
      v151 = (int32x2_t)vext_s8((int8x8_t)vsub_f32(vsub_f32(_D3, v142), v143), (int8x8_t)vadd_f32(v144, v149), 4uLL);
      v152 = (int8x8_t)vsub_f32(v144, v149);
      *(int32x2_t *)v153.f32 = v151;
      v153.i64[1] = vsub_f32(v145, v148).u32[0];
      v154 = (int32x2_t)vext_s8(v152, (int8x8_t)vsub_f32(v150, v143), 4uLL);
      v155 = (int8x8_t)vadd_f32(v145, v148);
      *(int8x8_t *)v141.f32 = vext_s8((int8x8_t)vdup_lane_s32(v151, 0), (int8x8_t)v154, 4uLL);
      v156 = (int8x8_t)vdup_lane_s32(v154, 1);
      *(int32x2_t *)v157.f32 = v154;
      v157.i64[1] = vadd_f32(v147, v146).u32[0];
      v158 = (int32x2_t)vext_s8(v155, (int8x8_t)vsub_f32(v147, v146), 4uLL);
      *(int8x8_t *)v159.f32 = vext_s8((int8x8_t)v151, v156, 4uLL);
      *(int32x2_t *)v160.f32 = v158;
      v160.i64[1] = vsub_f32(v150, v142).u32[0];
      v141.i64[1] = vdup_lane_s32(v158, 0).u32[0];
      v159.i64[1] = vdup_lane_s32(v158, 1).u32[0];
      *(int8x8_t *)v161.f32 = vext_s8((int8x8_t)vdup_lane_s32(*(int32x2_t *)&v153.u32[2], 0), *(int8x8_t *)&v157.u32[2], 4uLL);
      v161.i64[1] = vdup_lane_s32(*(int32x2_t *)&v160.u32[2], 0).u32[0];
      v162 = vmulq_n_f32(v141, v123.f32[0]);
      v162.i32[3] = 0;
      v163 = vmulq_lane_f32(v159, *(float32x2_t *)v123.f32, 1);
      v163.i32[3] = 0;
      v164 = vmulq_laneq_f32(v161, v123, 2);
      v164.i32[3] = 0;
      v165 = vmulq_n_f32(v162, v153.f32[0]);
      v165.i32[3] = 0;
      v166 = vmulq_lane_f32(v163, *(float32x2_t *)v153.f32, 1);
      v166.i32[3] = 0;
      v167 = vmulq_laneq_f32(v164, v153, 2);
      v167.i32[3] = 0;
      v132 = vaddq_f32(v167, vaddq_f32(v165, v166));
      v168 = vmulq_n_f32(v162, v157.f32[0]);
      v168.i32[3] = 0;
      v169 = vmulq_lane_f32(v163, *(float32x2_t *)v157.f32, 1);
      v169.i32[3] = 0;
      v170 = vmulq_laneq_f32(v164, v157, 2);
      v170.i32[3] = 0;
      v133 = vaddq_f32(v170, vaddq_f32(v168, v169));
      v171 = vmulq_n_f32(v162, v160.f32[0]);
      v171.i32[3] = 0;
      v172 = vmulq_lane_f32(v163, *(float32x2_t *)v160.f32, 1);
      v172.i32[3] = 0;
      v173 = vmulq_laneq_f32(v164, v160, 2);
      v173.i32[3] = 0;
      v134 = vaddq_f32(v173, vaddq_f32(v171, v172));
      v266 = (__int128)v132;
      v267 = (__int128)v133;
      v174 = vmulq_n_f32(v141, v129.f32[0]);
      v174.i32[3] = 0;
      v175 = vmulq_lane_f32(v159, *(float32x2_t *)v129.f32, 1);
      v175.i32[3] = 0;
      v176 = vmulq_laneq_f32(v161, v129, 2);
      v176.i32[3] = 0;
      v177 = vmulq_n_f32(v174, v153.f32[0]);
      v177.i32[3] = 0;
      v178 = vmulq_lane_f32(v175, *(float32x2_t *)v153.f32, 1);
      v178.i32[3] = 0;
      v179 = vmulq_laneq_f32(v176, v153, 2);
      v179.i32[3] = 0;
      v135 = vaddq_f32(v179, vaddq_f32(v177, v178));
      v180 = vmulq_n_f32(v174, v157.f32[0]);
      v180.i32[3] = 0;
      v181 = vmulq_lane_f32(v175, *(float32x2_t *)v157.f32, 1);
      v181.i32[3] = 0;
      v182 = vmulq_laneq_f32(v176, v157, 2);
      v182.i32[3] = 0;
      v183 = vmulq_n_f32(v174, v160.f32[0]);
      v183.i32[3] = 0;
      v184 = vmulq_lane_f32(v175, *(float32x2_t *)v160.f32, 1);
      v184.i32[3] = 0;
      v136 = vaddq_f32(v182, vaddq_f32(v180, v181));
      v185 = vmulq_laneq_f32(v176, v160, 2);
      v185.i32[3] = 0;
      v137 = vaddq_f32(v185, vaddq_f32(v183, v184));
    }
    else
    {
      v129.i32[3] = 0;
      v132 = vmulq_f32(v124, (float32x4_t)xmmword_2260E5F10);
      v133 = vmulq_f32(v124, (float32x4_t)xmmword_2260E5F20);
      v134 = vmulq_f32(v124, (float32x4_t)xmmword_2260E5F40);
      v266 = (__int128)v132;
      v267 = (__int128)v133;
      v135 = vmulq_f32(v129, (float32x4_t)xmmword_2260E5F10);
      v136 = vmulq_f32(v129, (float32x4_t)xmmword_2260E5F20);
      v137 = vmulq_f32(v129, (float32x4_t)xmmword_2260E5F40);
    }
    v268 = (__int128)v134;
    v269 = (__int128)v135;
    v270 = (__int128)v136;
    v271 = (__int128)v137;
    v186 = vmulq_f32(v132, (float32x4_t)0);
    v186.i32[3] = 0;
    v187 = vmulq_f32(v133, (float32x4_t)0);
    v187.i32[3] = 0;
    v188 = vmulq_f32(v134, (float32x4_t)0);
    v188.i32[3] = 0;
    v263 = vaddq_f32(v188, vaddq_f32(v187, v186));
  }
  v274 = v126;
  v275 = *(_BYTE *)(v17 + 70);
  v263 = 0uLL;
  v189 = *(_QWORD *)(v17 + 80);
  v273 = v189;
  v272 = v17 + 32;
  if (v189)
  {
    _X10 = *(_QWORD *)(v189 + 24);
    _X9 = *(_QWORD *)(v189 + 32);
    __asm
    {
      PRFM            #0, [X10]
      PRFM            #0, [X10,#0x80]
      PRFM            #0, [X9]
    }
  }
  physx::Gu::gMidphaseConvexSweepTable[*(unsigned __int16 *)(v220 + 8) - 3]();
  v195 = BYTE2(v252);
  if (BYTE2(v252))
  {
    if (HIBYTE(v252))
    {
      if ((*a7 & 0x200) != 0)
      {
        v214 = physx::Gu::computeConvex_TriangleMeshMTD(a1);
        *(_WORD *)(a6 + 20) = 1026;
        if ((v214 & 1) != 0)
        {
          if (*(float *)(a6 + 48) == 0.0)
          {
            v215 = -a5[1].f32[0];
            *(float32x2_t *)(a6 + 36) = vneg_f32(*a5);
            *(float *)(a6 + 44) = v215;
          }
          *(_WORD *)(a6 + 20) = 1027;
          goto LABEL_48;
        }
      }
      else
      {
        *(_WORD *)(a6 + 20) = 1026;
      }
      *(_DWORD *)(a6 + 48) = 0;
      v216 = -a5[1].f32[0];
      *(float32x2_t *)(a6 + 36) = vneg_f32(*a5);
      *(float *)(a6 + 44) = v216;
LABEL_48:
      *(_DWORD *)(a6 + 16) = v284;
      return v195 != 0;
    }
    *(_OWORD *)a6 = v283;
    *(_DWORD *)(a6 + 16) = v284;
    *(_WORD *)(a6 + 20) = v285;
    *(_QWORD *)(a6 + 24) = v286;
    v196 = v287;
    v197 = v288;
    v198 = v289;
    *(_DWORD *)(a6 + 52) = v290;
    v199 = -*((float *)&v196 + 1);
    v200 = -*(float *)&v197;
    v201 = -*((float *)&v197 + 1);
    *(_DWORD *)(a6 + 32) = v196;
    *(float *)(a6 + 36) = -*((float *)&v196 + 1);
    *(float *)(a6 + 40) = -*(float *)&v197;
    *(float *)(a6 + 44) = -*((float *)&v197 + 1);
    *(_DWORD *)(a6 + 48) = v198;
    v202 = sqrtf((float)((float)(*(float *)&v197 * *(float *)&v197) + (float)(*((float *)&v196 + 1) * *((float *)&v196 + 1)))+ (float)(*((float *)&v197 + 1) * *((float *)&v197 + 1)));
    if (v202 > 0.0)
    {
      v203 = 1.0 / v202;
      v199 = v203 * v199;
      v200 = v203 * v200;
      *(float *)(a6 + 36) = v199;
      *(float *)(a6 + 40) = v200;
      v201 = v203 * v201;
      *(float *)(a6 + 44) = v201;
    }
    if ((v218 & 2) == 0 && (v72 & 0x80) != 0)
    {
      v204 = (float)((float)(*((float *)&v258 + 1) - v256) * (float)(v262 - v257))
           - (float)((float)(v259 - v257) * (float)(v261 - v256));
      v205 = (float)((float)(v259 - v257) * (float)(v260 - v255))
           - (float)((float)(*(float *)&v258 - v255) * (float)(v262 - v257));
      v206 = (float)((float)(*(float *)&v258 - v255) * (float)(v261 - v256))
           - (float)((float)(*((float *)&v258 + 1) - v256) * (float)(v260 - v255));
      v207 = v205 + v205;
      v208 = v206 + v206;
      v210 = a2->f32[2];
      v209 = a2->f32[3];
      v211 = (float)(v209 * v209) + -0.5;
      v212 = a2->f32[1];
      v213 = (float)((float)(v212 * v207) + (float)(a2->f32[0] * (float)(v204 + v204))) + (float)(v210 * v208);
      if ((float)((float)((float)(a5->f32[1]
                                 * (float)((float)((float)(v209
                                                         * (float)((float)(v210 * (float)(v204 + v204))
                                                                 - (float)(a2->f32[0] * v208)))
                                                 + (float)(v207 * v211))
                                         + (float)(v212 * v213)))
                         + (float)((float)((float)((float)(v209 * (float)((float)(v212 * v208) - (float)(v210 * v207)))
                                                 + (float)((float)(v204 + v204) * v211))
                                         + (float)(a2->f32[0] * v213))
                                 * a5->f32[0]))
                 + (float)((float)((float)((float)(v209
                                                 * (float)((float)(a2->f32[0] * v207)
                                                         - (float)(v212 * (float)(v204 + v204))))
                                         + (float)(v208 * v211))
                                 + (float)(v210 * v213))
                         * a5[1].f32[0])) > 0.0)
      {
        *(float *)(a6 + 36) = -v199;
        *(float *)(a6 + 40) = -v200;
        *(float *)(a6 + 44) = -v201;
      }
    }
  }
  return v195 != 0;
}

double physx::Gu::TriangleMesh::TriangleMesh(physx::Gu::TriangleMesh *this, physx::GuMeshFactory *a2, physx::Gu::TriangleMeshData *a3)
{
  int v3;
  uint64_t v4;
  uint64_t v5;
  float v6;
  float v7;
  uint64_t v8;
  double result;

  *((_WORD *)this + 4) = physx::gTable[*((unsigned int *)a3 + 2)];
  *((_WORD *)this + 5) = 3;
  *((_DWORD *)this + 6) = 1;
  *(_QWORD *)this = &off_24ED92138;
  *((_QWORD *)this + 2) = &unk_24ED921F8;
  v3 = *((_DWORD *)a3 + 26);
  *((_DWORD *)this + 7) = *((_DWORD *)a3 + 4);
  *((_DWORD *)this + 8) = v3;
  v4 = *((_QWORD *)a3 + 14);
  v5 = *((_QWORD *)a3 + 15);
  *((_QWORD *)this + 5) = *((_QWORD *)a3 + 3);
  *((_QWORD *)this + 6) = v4;
  v6 = (float)(*((float *)a3 + 10) + *((float *)a3 + 13)) * 0.5;
  *((float32x2_t *)this + 7) = vmul_f32(vadd_f32(*(float32x2_t *)((char *)a3 + 32), *(float32x2_t *)((char *)a3 + 44)), (float32x2_t)0x3F0000003F000000);
  *((float *)this + 16) = v6;
  v7 = (float)(*((float *)a3 + 13) - *((float *)a3 + 10)) * 0.5;
  *(float32x2_t *)((char *)this + 68) = vmul_f32(vsub_f32(*(float32x2_t *)((char *)a3 + 44), *(float32x2_t *)((char *)a3 + 32)), (float32x2_t)0x3F0000003F000000);
  *((float *)this + 19) = v7;
  *((_QWORD *)this + 10) = v5;
  *((_DWORD *)this + 22) = *((_DWORD *)a3 + 14);
  *((_BYTE *)this + 92) = *((_BYTE *)a3 + 12);
  *((_QWORD *)this + 12) = *((_QWORD *)a3 + 16);
  *(_OWORD *)((char *)this + 104) = *((_OWORD *)a3 + 4);
  *((_QWORD *)this + 15) = a2;
  *((_OWORD *)this + 8) = *((_OWORD *)a3 + 5);
  v8 = *((_QWORD *)a3 + 17);
  *((_QWORD *)this + 18) = *((_QWORD *)a3 + 12);
  *((_QWORD *)this + 19) = v8;
  *((_QWORD *)a3 + 3) = 0;
  *((_QWORD *)a3 + 12) = 0;
  result = 0.0;
  *((_OWORD *)a3 + 4) = 0u;
  *((_OWORD *)a3 + 5) = 0u;
  *((_OWORD *)a3 + 7) = 0u;
  *((_OWORD *)a3 + 8) = 0u;
  return result;
}

void physx::Gu::TriangleMesh::~TriangleMesh(physx::Gu::TriangleMesh *this)
{
  uint64_t v2;

  *(_QWORD *)this = &off_24ED92138;
  *((_QWORD *)this + 2) = &unk_24ED921F8;
  if ((*((_BYTE *)this + 10) & 1) != 0)
  {
    if (*((_QWORD *)this + 10))
      (*(void (**)(uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
    *((_QWORD *)this + 10) = 0;
    if (*((_QWORD *)this + 13))
      (*(void (**)(uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
    *((_QWORD *)this + 13) = 0;
    if (*((_QWORD *)this + 14))
      (*(void (**)(uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
    *((_QWORD *)this + 14) = 0;
    if (*((_QWORD *)this + 12))
      (*(void (**)(uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
    *((_QWORD *)this + 12) = 0;
    if (*((_QWORD *)this + 6))
      (*(void (**)(uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
    *((_QWORD *)this + 6) = 0;
    if (*((_QWORD *)this + 5))
      (*(void (**)(uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
    *((_QWORD *)this + 5) = 0;
    if (*((_QWORD *)this + 16))
      (*(void (**)(uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
    *((_QWORD *)this + 16) = 0;
    if (*((_QWORD *)this + 17))
      (*(void (**)(uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
    *((_QWORD *)this + 17) = 0;
    if (*((_QWORD *)this + 18))
      (*(void (**)(uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
    *((_QWORD *)this + 18) = 0;
    v2 = *((_QWORD *)this + 19);
    if (v2)
    {
      physx::Gu::BV32Tree::release(*((_QWORD *)this + 19));
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24, v2);
    }
  }
}

uint64_t physx::Gu::TriangleMesh::exportExtraData(uint64_t result, uint64_t a2)
{
  uint64_t v3;
  char v4;
  char v5;

  v3 = result;
  if (*(_QWORD *)(result + 40))
  {
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 24))(a2, 16);
    result = (*(uint64_t (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)a2 + 16))(a2, *(_QWORD *)(v3 + 40), (12 * *(_DWORD *)(v3 + 28)));
  }
  if (*(_QWORD *)(v3 + 48))
  {
    v4 = *(_BYTE *)(v3 + 92);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 24))(a2, 16);
    if ((v4 & 2) != 0)
      v5 = 1;
    else
      v5 = 2;
    result = (*(uint64_t (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)a2 + 16))(a2, *(_QWORD *)(v3 + 48), ((3 * *(_DWORD *)(v3 + 32)) << v5));
  }
  if (*(_QWORD *)(v3 + 80))
  {
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 24))(a2, 16);
    result = (*(uint64_t (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)a2 + 16))(a2, *(_QWORD *)(v3 + 80), *(unsigned int *)(v3 + 32));
  }
  if (*(_QWORD *)(v3 + 96))
  {
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 24))(a2, 16);
    result = (*(uint64_t (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)a2 + 16))(a2, *(_QWORD *)(v3 + 96), (2 * *(_DWORD *)(v3 + 32)));
  }
  if (*(_QWORD *)(v3 + 104))
  {
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 24))(a2, 16);
    result = (*(uint64_t (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)a2 + 16))(a2, *(_QWORD *)(v3 + 104), (4 * *(_DWORD *)(v3 + 32)));
  }
  if (*(_QWORD *)(v3 + 112))
  {
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 24))(a2, 16);
    return (*(uint64_t (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)a2 + 16))(a2, *(_QWORD *)(v3 + 112), (12 * *(_DWORD *)(v3 + 32)));
  }
  return result;
}

uint64_t physx::Gu::TriangleMesh::onRefCountZero(physx::Gu::TriangleMesh *this, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, char a9)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t result;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;

  if (!physx::GuMeshFactory::removeTriangleMesh(*((_QWORD *)this + 15), (uint64_t)this))
    return physx::shdfnd::Foundation::error(physx::shdfnd::Foundation::mInstance, 8, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/common/src/../../geomutils/src/mesh/GuTriangleMesh.cpp", 208, "Gu::TriangleMesh::release: double deletion detected!", v10, v11, v12, a9);
  v13 = *((unsigned __int16 *)this + 4);
  v14 = *((_QWORD *)this + 15);
  v15 = *(_QWORD *)this;
  if ((*((_WORD *)this + 5) & 1) != 0)
    result = (*(uint64_t (**)(physx::Gu::TriangleMesh *))(v15 + 32))(this);
  else
    result = (*(uint64_t (**)(physx::Gu::TriangleMesh *))(v15 + 24))(this);
  v17 = *(unsigned int *)(v14 + 248);
  if ((_DWORD)v17)
  {
    v18 = 0;
    v19 = 8 * v17;
    do
    {
      result = (*(uint64_t (**)(_QWORD, physx::Gu::TriangleMesh *, uint64_t))(**(_QWORD **)(*(_QWORD *)(v14 + 240) + v18)
                                                                                     + 16))(*(_QWORD *)(*(_QWORD *)(v14 + 240) + v18), this, v13);
      v18 += 8;
    }
    while (v19 != v18);
  }
  return result;
}

uint64_t `non-virtual thunk to'physx::Gu::TriangleMesh::onRefCountZero(physx::Gu::TriangleMesh *this, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, char a9)
{
  return physx::Gu::TriangleMesh::onRefCountZero((physx::Gu::TriangleMesh *)((char *)this - 16), a2, a3, a4, a5, a6, a7, a8, a9);
}

uint64_t physx::Gu::TriangleMesh::release(uint64_t this)
{
  unsigned int *v1;
  unsigned int v2;
  unsigned int v3;

  v1 = (unsigned int *)(this + 24);
  do
  {
    v2 = __ldaxr(v1);
    v3 = v2 - 1;
  }
  while (__stlxr(v3, v1));
  if (!v3)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)(this + 16) + 16))(this + 16);
  return this;
}

uint64_t physx::Gu::TriangleMesh::getVerticesForModification(physx::Gu::TriangleMesh *this, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  char vars0;

  physx::shdfnd::Foundation::error(physx::shdfnd::Foundation::mInstance, 8, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/common/src/../../geomutils/src/mesh/GuTriangleMesh.cpp", 220, "PxTriangleMesh::getVerticesForModification() is only supported for meshes with PxMeshMidPhase::eBVH33.", a6, a7, a8, vars0);
  return 0;
}

float physx::Gu::TriangleMesh::refitBVH@<S0>(physx::Gu::TriangleMesh *this@<X0>, uint64_t a2@<X5>, uint64_t a3@<X6>, uint64_t a4@<X7>, uint64_t a5@<X8>)
{
  float v7;
  float32x4_t v8;
  float32x4_t v9;
  __int128 v10;
  float result;
  char v12;

  physx::shdfnd::Foundation::error(physx::shdfnd::Foundation::mInstance, 8, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/common/src/../../geomutils/src/mesh/GuTriangleMesh.cpp", 227, "PxTriangleMesh::refitBVH() is only supported for meshes with PxMeshMidPhase::eBVH33.", a2, a3, a4, v12);
  v7 = *((float *)this + 19);
  v8 = *(float32x4_t *)((char *)this + 60);
  v9 = (float32x4_t)vextq_s8((int8x16_t)v8, vextq_s8((int8x16_t)v8, (int8x16_t)v8, 8uLL), 0xCuLL);
  v9.f32[1] = v7;
  *(_QWORD *)&v10 = vsubq_f32(v8, v9).u64[0];
  v9.i32[2] = *((_DWORD *)this + 14);
  *((_QWORD *)&v10 + 1) = vaddq_f32(v8, v9).i64[1];
  v8.i32[0] = HIDWORD(*(_QWORD *)((char *)this + 60));
  *(float *)a5 = v9.f32[2] - COERCE_FLOAT(*(_QWORD *)((char *)this + 68));
  result = v8.f32[0] + v7;
  *(_OWORD *)(a5 + 4) = v10;
  *(float *)(a5 + 20) = v8.f32[0] + v7;
  return result;
}

physx::Gu::BV4TriangleMesh *physx::Gu::BV4TriangleMesh::BV4TriangleMesh(physx::Gu::BV4TriangleMesh *this, physx::GuMeshFactory *a2, physx::Gu::TriangleMeshData *a3)
{
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;

  physx::Gu::TriangleMesh::TriangleMesh(this, a2, a3);
  *(_QWORD *)v5 = off_24ED92220;
  *(_QWORD *)(v5 + 16) = &unk_24ED922E0;
  *(_DWORD *)(v5 + 160) = 0;
  v6 = v5 + 160;
  *(_QWORD *)(v5 + 168) = 0;
  *(_QWORD *)(v5 + 176) = 0;
  *(_DWORD *)(v5 + 184) = 0;
  *(_OWORD *)(v5 + 240) = 0u;
  *(_OWORD *)(v5 + 256) = 0u;
  *(_OWORD *)(v5 + 208) = 0u;
  v7 = (_QWORD *)(v5 + 208);
  *(_QWORD *)(v5 + 270) = 0;
  *(_OWORD *)(v5 + 192) = 0u;
  *(_OWORD *)(v5 + 220) = 0u;
  *(_DWORD *)(v5 + 160) = *((_DWORD *)a3 + 36);
  *(_DWORD *)(v5 + 184) = *((_DWORD *)a3 + 42);
  *(_OWORD *)(v5 + 192) = *((_OWORD *)a3 + 11);
  *(_OWORD *)(v5 + 168) = *(_OWORD *)((char *)a3 + 152);
  *((_DWORD *)a3 + 36) = 0;
  *((_QWORD *)a3 + 19) = 0;
  *((_QWORD *)a3 + 20) = 0;
  *((_DWORD *)a3 + 42) = 0;
  *((_QWORD *)a3 + 22) = 0;
  *((_QWORD *)a3 + 23) = 0;
  physx::Gu::BV4Tree::operator=(v5 + 208, (uint64_t)a3 + 192);
  *v7 = v6;
  return this;
}

uint64_t physx::Gu::BV4TriangleMesh::exportExtraData(uint64_t a1, uint64_t a2)
{
  if (*(_DWORD *)(a1 + 232))
  {
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 24))(a2, 16);
    (*(void (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)a2 + 16))(a2, *(_QWORD *)(a1 + 240), (16 * *(_DWORD *)(a1 + 232)));
  }
  return physx::Gu::TriangleMesh::exportExtraData(a1, a2);
}

__n128 physx::Gu::RTreeTriangleMesh::RTreeTriangleMesh(physx::Gu::RTreeTriangleMesh *this, physx::GuMeshFactory *a2, physx::Gu::TriangleMeshData *a3)
{
  uint64_t v4;
  __n128 result;

  physx::Gu::TriangleMesh::TriangleMesh(this, a2, a3);
  *(_QWORD *)v4 = off_24ED92308;
  *(_QWORD *)(v4 + 16) = &unk_24ED923C8;
  *(_DWORD *)(v4 + 244) = 0;
  *(_QWORD *)(v4 + 248) = 0;
  *(_QWORD *)(v4 + 232) = 0;
  *(_DWORD *)(v4 + 224) = 4;
  *(_OWORD *)(v4 + 160) = *((_OWORD *)a3 + 9);
  *(_OWORD *)(v4 + 176) = *((_OWORD *)a3 + 10);
  *(_OWORD *)(v4 + 192) = *((_OWORD *)a3 + 11);
  *(_OWORD *)(v4 + 208) = *((_OWORD *)a3 + 12);
  result = *((__n128 *)a3 + 14);
  *(_OWORD *)(v4 + 224) = *((_OWORD *)a3 + 13);
  *(__n128 *)(v4 + 240) = result;
  *((_QWORD *)a3 + 29) = 0;
  return result;
}

uint64_t physx::Gu::RTreeTriangleMesh::exportExtraData(uint64_t a1, uint64_t a2)
{
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 24))(a2, 128);
  (*(void (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)a2 + 16))(a2, *(_QWORD *)(a1 + 248), (112 * *(_DWORD *)(a1 + 240)));
  return physx::Gu::TriangleMesh::exportExtraData(a1, a2);
}

uint64_t physx::Gu::RTreeTriangleMesh::getVerticesForModification(physx::Gu::RTreeTriangleMesh *this)
{
  return (*(uint64_t (**)(physx::Gu::RTreeTriangleMesh *))(*(_QWORD *)this + 56))(this);
}

float32x2_t physx::Gu::RTreeTriangleMesh::refitBVH@<D0>(physx::Gu::RTreeTriangleMesh *this@<X0>, uint64_t a2@<X8>)
{
  char v4;
  char *v5;
  uint64_t (**v6)();
  int v7;
  int v8;
  uint64_t i;
  float32x4_t v10;
  float32x4_t v11;
  float32x4_t v12;
  float32x4_t v13;
  float32x2_t v14;
  float32x2_t result;
  uint64_t (**v16)();
  __int128 v17;

  v4 = *((_BYTE *)this + 92);
  v5 = (char *)this + 160;
  if ((v4 & 2) != 0)
    v6 = off_24ED92510;
  else
    v6 = off_24ED92560;
  v16 = v6;
  v17 = *(_OWORD *)((char *)this + 40);
  physx::Gu::RTree::refitAllStaticTree((uint64_t)v5, (uint64_t (***)(_QWORD, _QWORD, __int128 *, __int128 *))&v16, (float *)a2);
  v7 = *((_DWORD *)this + 61);
  if ((v7 & 2) == 0)
  {
    *((_DWORD *)this + 61) = v7 | 2;
    if (*((_QWORD *)this + 10))
    {
      v8 = (*(uint64_t (**)(physx::Gu::RTreeTriangleMesh *))(*(_QWORD *)this + 80))(this);
      if (v8)
      {
        for (i = 0; i != v8; *(_BYTE *)(*((_QWORD *)this + 10) + i++) |= 0x38u)
          ;
      }
    }
  }
  v10 = (float32x4_t)vextq_s8(*(int8x16_t *)a2, *(int8x16_t *)a2, 8uLL);
  v11 = (float32x4_t)vextq_s8(*(int8x16_t *)a2, (int8x16_t)v10, 0xCuLL);
  v12 = vsubq_f32(*(float32x4_t *)a2, v11);
  *(uint64_t *)((char *)v11.i64 + 4) = *(_QWORD *)(a2 + 16);
  v13 = vaddq_f32(*(float32x4_t *)a2, v11);
  v13.i32[3] = v12.i32[3];
  v14 = vsub_f32(*(float32x2_t *)(a2 + 16), (float32x2_t)vext_s8(*(int8x8_t *)a2, *(int8x8_t *)v10.f32, 4uLL));
  v10.i64[0] = 0x3F0000003F000000;
  v10.i64[1] = 0x3F0000003F000000;
  result = vmul_f32(v14, (float32x2_t)0x3F0000003F000000);
  *(float32x4_t *)((char *)this + 56) = vmulq_f32(v13, v10);
  *((float32x2_t *)this + 9) = result;
  return result;
}

uint64_t physx::Gu::BV32Tree::release(uint64_t this)
{
  uint64_t v1;

  v1 = this;
  if (!*(_BYTE *)(this + 56))
  {
    if (*(_QWORD *)(this + 32))
    {
      this = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
      *(_QWORD *)(v1 + 32) = 0;
    }
    if (*(_QWORD *)(v1 + 40))
      this = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
    *(_QWORD *)(v1 + 40) = 0;
  }
  *(_QWORD *)(v1 + 32) = 0;
  *(_DWORD *)(v1 + 24) = 0;
  return this;
}

uint64_t physx::Gu::BV32Tree::load(uint64_t a1, void (***a2)(_QWORD, unsigned __int32 *, uint64_t), int a3)
{
  uint64_t result;
  unsigned int v7;
  __n128 v8;
  int16x8_t v9;
  uint8x8_t v10;
  int16x8_t v11;
  __n128 v12;
  int16x8_t v13;
  uint8x8_t v14;
  int16x8_t v15;
  unsigned int Dword;
  uint64_t v17;
  uint64_t v18;
  __int32 *v19;
  unsigned int v20;
  unsigned int v21;
  unsigned int v22;
  int v23;
  unsigned int v24;

  physx::Gu::BV32Tree::release(a1);
  v23 = 0;
  (**a2)(a2, (unsigned __int32 *)((char *)&v23 + 3), 1);
  (**a2)(a2, (unsigned __int32 *)((char *)&v23 + 2), 1);
  (**a2)(a2, (unsigned __int32 *)((char *)&v23 + 1), 1);
  (**a2)(a2, (unsigned __int32 *)&v23, 1);
  result = 0;
  if (HIBYTE(v23) != 66 || BYTE2(v23) != 86 || BYTE1(v23) != 51 || v23 != 50)
    return result;
  v24 = 0;
  (**a2)(a2, &v24, 4);
  v7 = v24;
  if (v24 == 1 || v24 == 0x1000000)
  {
    v8 = ((__n128 (*)(_QWORD, unsigned int *, uint64_t))**a2)(a2, &v24, 4);
  }
  else
  {
    v22 = bswap32(v24);
    if (a3)
      v7 = v22;
    if (v7 >= 4)
      return 0;
    (**a2)(a2, &v24, 4);
    if (!a3)
      goto LABEL_9;
  }
  v8.n128_u32[0] = v24;
  v9 = (int16x8_t)vmovl_u8((uint8x8_t)v8.n128_u64[0]);
  *(int16x4_t *)v9.i8 = vrev64_s16(*(int16x4_t *)v9.i8);
  v24 = vmovn_s16(v9).u32[0];
  a3 = 1;
LABEL_9:
  *(_DWORD *)(a1 + 8) = v24;
  (**a2)(a2, &v24, 4);
  if (a3)
  {
    v10.i32[0] = v24;
    v11 = (int16x8_t)vmovl_u8(v10);
    *(int16x4_t *)v11.i8 = vrev64_s16(*(int16x4_t *)v11.i8);
    *(_DWORD *)(a1 + 12) = vmovn_s16(v11).u32[0];
    v12 = ((__n128 (*)(_QWORD, unsigned int *, uint64_t))**a2)(a2, &v24, 4);
    v12.n128_u32[0] = v24;
    v13 = (int16x8_t)vmovl_u8((uint8x8_t)v12.n128_u64[0]);
    *(int16x4_t *)v13.i8 = vrev64_s16(*(int16x4_t *)v13.i8);
    v24 = vmovn_s16(v13).u32[0];
  }
  else
  {
    *(_DWORD *)(a1 + 12) = v24;
    (**a2)(a2, &v24, 4);
  }
  *(_DWORD *)(a1 + 16) = v24;
  (**a2)(a2, &v24, 4);
  if (a3)
  {
    v14.i32[0] = v24;
    v15 = (int16x8_t)vmovl_u8(v14);
    *(int16x4_t *)v15.i8 = vrev64_s16(*(int16x4_t *)v15.i8);
    v24 = vmovn_s16(v15).u32[0];
  }
  *(_DWORD *)(a1 + 20) = v24;
  *(_DWORD *)(a1 + 52) = physx::readDword(a3, a2);
  Dword = physx::readDword(a3, a2);
  *(_DWORD *)(a1 + 48) = Dword;
  if (Dword)
  {
    v17 = 1168 * Dword;
    v18 = 0;
    *(_QWORD *)(a1 + 40) = (*(uint64_t (**)(uint64_t, uint64_t, const char *, const char *, uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 16))(physx::shdfnd::Foundation::mInstance + 24, v17, "NonTrackedAlloc", "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/common/src/../../geomutils/src/mesh/GuBV32.cpp", 167);
    do
    {
      v19 = (__int32 *)(*(_QWORD *)(a1 + 40) + v18);
      v20 = physx::readDword(a3, a2);
      v19[288] = v20;
      physx::readFloatBuffer(v19 + 256, v20, a3, (void (***)(_QWORD, __int32 *, _QWORD))a2);
      v21 = 4 * v19[288];
      physx::readFloatBuffer(v19, v21, a3, (void (***)(_QWORD, __int32 *, _QWORD))a2);
      physx::readFloatBuffer(v19 + 128, v21, a3, (void (***)(_QWORD, __int32 *, _QWORD))a2);
      v18 += 1168;
    }
    while (v17 != v18);
  }
  return 1;
}

uint64_t physx::Gu::BV32Tree::calculateLeafNode(uint64_t result, uint64_t a2)
{
  unint64_t v2;
  uint64_t v3;
  uint64_t v4;
  int v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;

  v2 = *(_QWORD *)(a2 + 32);
  if ((v2 & 1) == 0)
  {
    v3 = (v2 >> 1) & 0x3FF;
    if ((_DWORD)v3)
    {
      v4 = result;
      v5 = 0;
      v6 = v2 >> 11;
      v7 = v2 >> 11;
      v8 = (v2 >> 1) & 0x3FF;
      do
      {
        v5 += *(_DWORD *)(*(_QWORD *)(result + 32) + 40 * v7++ + 32) & 1;
        --v8;
      }
      while (v8);
      *(_DWORD *)(a2 + 12) = v5;
      do
      {
        result = physx::Gu::BV32Tree::calculateLeafNode(v4, *(_QWORD *)(v4 + 32) + 40 * v6);
        LODWORD(v6) = v6 + 1;
        --v3;
      }
      while (v3);
    }
    else
    {
      *(_DWORD *)(a2 + 12) = 0;
    }
  }
  return result;
}

uint64_t physx::Gu::BV32Tree::createSOAformatNode(uint64_t result, uint64_t a2, unint64_t a3, unsigned int a4, _DWORD *a5, _DWORD *a6)
{
  uint64_t v6;
  unsigned int v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  int v18;
  unsigned int v19;
  __int128 v20;
  int *v21;
  unsigned int v22;
  uint64_t v23;
  _DWORD *v24;
  uint64_t *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  _OWORD v29[16];
  _OWORD v30[8];
  uint64_t v31;

  v31 = *MEMORY[0x24BDAC8D0];
  v6 = (a3 >> 1) & 0x3FF;
  if ((_DWORD)v6)
  {
    v9 = a4;
    v10 = result;
    v11 = 0;
    v12 = a3 >> 11;
    v13 = *(_QWORD *)(result + 32);
    v14 = 256;
    do
    {
      v15 = v13 + 40 * (v12 + v14 - 256);
      v16 = *(_DWORD *)(v15 + 8);
      v17 = a2 + v11;
      *(_QWORD *)v17 = *(_QWORD *)v15;
      *(_DWORD *)(v17 + 8) = v16;
      *(_DWORD *)(v17 + 12) = 0;
      v18 = *(_DWORD *)(v15 + 24);
      *(_QWORD *)(v17 + 512) = *(_QWORD *)(v15 + 16);
      *(_DWORD *)(v17 + 520) = v18;
      *(_DWORD *)(v17 + 524) = 0;
      *(_DWORD *)(a2 + 4 * v14) = *(_QWORD *)(v15 + 32);
      v11 += 16;
      ++v14;
    }
    while (16 * ((a3 >> 1) & 0x3FF) != v11);
    v19 = 0;
    *(_DWORD *)(a2 + 1152) = v6;
    *(_QWORD *)&v20 = -1;
    *((_QWORD *)&v20 + 1) = -1;
    v30[6] = v20;
    v30[7] = v20;
    v30[4] = v20;
    v30[5] = v20;
    v30[2] = v20;
    v30[3] = v20;
    v30[0] = v20;
    v30[1] = v20;
    v21 = (int *)(a2 + 1024);
    memset(v29, 0, sizeof(v29));
    do
    {
      v22 = *(_DWORD *)(v13 + 40 * v12 + 32);
      if ((v22 & 1) == 0)
      {
        v23 = v13 + 40 * v12;
        result = *a5;
        *a5 = result + ((v22 >> 1) & 0x3FF) - *(_DWORD *)(v23 + 12);
        *v21 = *v21 & 0x7FF | ((v19 + a4) << 11);
        *((_DWORD *)v30 + v19) = result;
        *((_QWORD *)v29 + v19++) = v23;
      }
      ++v21;
      LODWORD(v12) = v12 + 1;
      --v6;
    }
    while (v6);
    *a6 += v19;
    if (v19)
    {
      v24 = v30;
      v25 = (uint64_t *)v29;
      v26 = v19;
      do
      {
        v28 = *v25++;
        v27 = v28;
        LODWORD(v28) = *v24++;
        result = physx::Gu::BV32Tree::createSOAformatNode(v10, *(_QWORD *)(v10 + 40) + 1168 * v9++, *(_QWORD *)(v27 + 32), v28, a5, a6);
        --v26;
      }
      while (v26);
    }
  }
  else
  {
    *(_DWORD *)(a2 + 1152) = 0;
  }
  return result;
}

BOOL physx::Gu::BuildBV32Ex(float32x2_t *this, physx::Gu::BV32Tree *a2, physx::Gu::SourceMesh *a3, float a4)
{
  int v4;
  uint64_t v8;
  _BOOL8 v9;
  const unsigned int *v10;
  uint64_t v11;
  uint64_t v12;
  float v13;
  float v14;
  float v15;
  float v16;
  float v17;
  float v18;
  uint64_t v19;
  const char *v20;
  uint64_t v21;
  double v22;
  uint64_t v23;
  uint64_t v24;
  float32x2_t *v30;
  float v31;
  int v32;
  unsigned __int32 v33;
  uint64_t v34;
  uint64_t v35;
  const char *v36;
  float32x2_t *v37;
  uint64_t v38;
  unint64_t v39;
  float32x2_t *v40;
  uint64_t v41;
  float32_t v42;
  float32_t v43;
  uint64_t v44;
  float32x2_t v45;
  unint64_t v46;
  _QWORD v48[2];
  int v49;
  int v50;
  int v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  uint64_t v60;
  uint64_t v61;
  int v62;
  _BYTE v63[12];

  v4 = (int)a3;
  v8 = *((unsigned int *)a2 + 6);
  v60 = 0;
  v61 = 0;
  v62 = 0;
  v9 = physx::Gu::AABBTree::buildFromMesh((physx::Gu::AABBTree *)&v60, a2, (uint64_t)a3);
  if (v9)
  {
    if ((_DWORD)v8)
      v10 = (const unsigned int *)(*(uint64_t (**)(uint64_t, uint64_t, const char *, const char *, uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 16))(physx::shdfnd::Foundation::mInstance + 24, 4 * v8, "NonTrackedAlloc", "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/common/src/../../geomutils/src/mesh/GuBV32Build.cpp", 509);
    else
      v10 = 0;
    v48[0] = a2;
    v48[1] = v10;
    v49 = v4;
    v50 = 0;
    v51 = v8;
    v52 = 0u;
    v53 = 0u;
    v54 = 0u;
    v55 = 0u;
    v56 = 0u;
    v57 = 0u;
    v58 = 0u;
    v59 = 0u;
    *(_QWORD *)&v63[4] = 0;
    physx::Gu::AABBTree::walk(BOOL (*)(physx::Gu::AABBTreeNode const*,unsigned int,void *),void *)const::Local::_Walk(v61, (unsigned int *)&v63[8], (unsigned int *)&v63[4], gReorderCallback, (uint64_t)v48);
    physx::Gu::SourceMesh::remapTopology((uint64_t)a2, v10);
    if (v10)
      (*(void (**)(uint64_t, const unsigned int *))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24)
                                                            + 24))(physx::shdfnd::Foundation::mInstance + 24, v10);
    if (*((_DWORD *)a2 + 6) > 0x20u)
    {
      BuildBV4Internal(physx::Gu::BV4Tree &,physx::Gu::AABBTree const&,physx::Gu::SourceMesh *,float,BOOL)::Local::_Check(*(_QWORD *)(v61 + 24));
      LODWORD(v48[0]) = 1;
      v19 = physx::shdfnd::Foundation::mInstance;
      if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)physx::shdfnd::Foundation::mInstance + 40))(physx::shdfnd::Foundation::mInstance))
        v20 = "static const char *physx::shdfnd::ReflectionAllocator<BV32Node>::getName() [T = BV32Node]";
      else
        v20 = "<allocation names disabled>";
      v21 = (*(uint64_t (**)(uint64_t, uint64_t, const char *, const char *, uint64_t))(*(_QWORD *)(v19 + 24)
                                                                                             + 16))(v19 + 24, 1296, v20, "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/common/src/../../geomutils/src/mesh/GuBV32Build.cpp", 337);
      v23 = v21;
      v24 = 0;
      __asm { FMOV            V9.2S, #-1.0 }
      do
      {
        v30 = (float32x2_t *)(v21 + v24);
        v30[5] = (float32x2_t)0xFFFFFFFFLL;
        v30[1] = 0;
        v30[2] = 0;
        v30[3] = _D9;
        v24 += 40;
        v30[4].i32[0] = -1082130432;
      }
      while (v24 != 1280);
      *(_DWORD *)(v21 + 1288) = 0;
      *(float *)&v22 = a4;
      _BuildBV32(&v60, v21, *(_QWORD *)(v61 + 24), v48, v22);
      v31 = physx::Gu::BV4Tree::init(this, (uint64_t)a2, v61);
      v32 = *(_DWORD *)(v23 + 1288) + 1;
      *(_DWORD *)&v63[8] = v32;
      v33 = v48[0];
      v34 = 40 * LODWORD(v48[0]);
      v35 = physx::shdfnd::Foundation::mInstance;
      if ((*(unsigned int (**)(uint64_t, float))(*(_QWORD *)physx::shdfnd::Foundation::mInstance + 40))(physx::shdfnd::Foundation::mInstance, v31))
      {
        v36 = "static const char *physx::shdfnd::ReflectionAllocator<physx::Gu::BV32Data>::getName() [T = physx::Gu::BV32Data]";
      }
      else
      {
        v36 = "<allocation names disabled>";
      }
      v37 = (float32x2_t *)(*(uint64_t (**)(uint64_t, uint64_t, const char *, const char *, uint64_t))(*(_QWORD *)(v35 + 24) + 16))(v35 + 24, v34, v36, "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/common/src/../../geomutils/src/mesh/GuBV32Build.cpp", 419);
      v38 = (uint64_t)v37;
      v39 = 0;
      do
      {
        v40 = &v37[v39 / 8];
        v40[4] = (float32x2_t)0xFFFFFFFFLL;
        *v40 = 0;
        v40[1] = 0;
        v40[2] = _D9;
        v39 += 40;
        v40[3].i32[0] = -1082130432;
      }
      while (v34 != v39);
      v41 = v61;
      v42 = (float)(*(float *)(v41 + 8) + *(float *)(v41 + 20)) * 0.5;
      *v37 = vmul_f32(vadd_f32(*(float32x2_t *)v61, *(float32x2_t *)(v61 + 12)), (float32x2_t)0x3F0000003F000000);
      v37[1].f32[0] = v42;
      v43 = (float)(*(float *)(v41 + 20) - *(float *)(v41 + 8)) * 0.5;
      v37[2] = vmul_f32(vsub_f32(*(float32x2_t *)(v41 + 12), *(float32x2_t *)v41), (float32x2_t)0x3F0000003F000000);
      v37[3].f32[0] = v43;
      v37[4] = (float32x2_t)(2 * *(_DWORD *)(v23 + 1288) + 2048);
      this[6].i32[1] = v32;
      *(_QWORD *)v63 = 0;
      BuildBV32Internal(physx::Gu::BV32Tree &,physx::Gu::AABBTree const&,physx::Gu::SourceMesh *,float)::Local::_Flatten((uint64_t)v37, 1u, (int *)&v63[8], v23, (unsigned int *)&v63[4], (unsigned int *)v63);
      this[3].i32[0] = v33;
      this[4] = (float32x2_t)v38;
      physx::Gu::BV32Tree::calculateLeafNode((uint64_t)this, v38);
      v44 = (*(uint64_t (**)(uint64_t, uint64_t, const char *, const char *, uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24)
                                                                                             + 16))(physx::shdfnd::Foundation::mInstance + 24, 1168 * v33, "NonTrackedAlloc", "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/common/src/../../geomutils/src/mesh/GuBV32Build.cpp", 447);
      this[5] = (float32x2_t)v44;
      this[6].i32[0] = v33;
      v45 = this[4];
      v46 = *(_QWORD *)(*(_QWORD *)&v45 + 32);
      *(_DWORD *)&v63[4] = ((v46 >> 1) & 0x3FF) - *(_DWORD *)(*(_QWORD *)&v45 + 12) + 1;
      *(_DWORD *)&v63[8] = 1;
      physx::Gu::BV32Tree::createSOAformatNode((uint64_t)this, v44, v46, 1u, &v63[4], &v63[8]);
      this[6].i32[0] = *(_DWORD *)&v63[8];
    }
    else
    {
      this[6].i32[0] = 1;
      v11 = (*(uint64_t (**)(uint64_t, uint64_t, const char *, const char *, uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24)
                                                                                             + 16))(physx::shdfnd::Foundation::mInstance + 24, 1168, "NonTrackedAlloc", "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/common/src/../../geomutils/src/mesh/GuBV32Build.cpp", 289);
      this[5] = (float32x2_t)v11;
      *(_DWORD *)(v11 + 1152) = 1;
      v12 = v61;
      v13 = *(float *)v61;
      v14 = *(float *)(v61 + 4);
      v16 = *(float *)(v61 + 8);
      v15 = *(float *)(v61 + 12);
      v17 = *(float *)(v61 + 16);
      v18 = *(float *)(v61 + 20);
      *(float *)v11 = (float)(*(float *)v61 + v15) * 0.5;
      *(float *)(v11 + 4) = (float)(v14 + v17) * 0.5;
      *(float *)(v11 + 8) = (float)(v16 + v18) * 0.5;
      *(_DWORD *)(v11 + 12) = 0;
      *(float *)(v11 + 512) = (float)(v15 - v13) * 0.5;
      *(float *)(v11 + 516) = (float)(v17 - v14) * 0.5;
      *(float *)(v11 + 520) = (float)(v18 - v16) * 0.5;
      *(_DWORD *)(v11 + 524) = 0;
      *(_DWORD *)(v11 + 1024) = (2 * *((_DWORD *)a2 + 6)) | 1;
      physx::Gu::BV4Tree::init(this, (uint64_t)a2, v12);
    }
  }
  physx::Gu::AABBTree::release(&v60);
  return v9;
}

uint64_t gReorderCallback(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  _DWORD *v4;
  uint64_t v5;
  unsigned int v6;

  if (!*(_QWORD *)(a1 + 24))
  {
    v3 = *(unsigned int *)(a1 + 40);
    ++*(_DWORD *)(a3 + 4 * (v3 - 1) + 28);
    if ((_DWORD)v3)
    {
      v4 = *(_DWORD **)(a1 + 32);
      v5 = *(_QWORD *)(a3 + 8);
      v6 = *(_DWORD *)(a3 + 20);
      do
      {
        *(_DWORD *)(v5 + 4 * v6) = *v4;
        *v4++ = *(_DWORD *)(a3 + 20);
        v6 = *(_DWORD *)(a3 + 20) + 1;
        *(_DWORD *)(a3 + 20) = v6;
        --v3;
      }
      while (v3);
    }
  }
  return 1;
}

BOOL physx::Gu::pcmContactBoxBox(_DWORD *a1, _DWORD *a2, float32x4_t *a3, float32x4_t *a4, int32x2_t *a5, uint64_t *a6, uint64_t a7)
{
  float32x4_t v7;
  float32x4_t v8;
  int32x2_t v16;
  float32x4_t v17;
  float32x4_t v18;
  float32x4_t v19;
  float32x4_t v20;
  float32x4_t v21;
  float32x4_t v22;
  float32x4_t v23;
  float32x4_t v24;
  float32x4_t v25;
  float32x4_t v26;
  int32x4_t v27;
  float v28;
  float32x4_t v29;
  float32x2_t v30;
  float32x2_t v31;
  int8x8_t v32;
  float32x4_t v33;
  float32x4_t v34;
  float32x4_t v35;
  float32x4_t v36;
  float32x4_t v37;
  float32x2_t v38;
  float32x4_t v39;
  float32x2_t v40;
  float32x4_t v41;
  int8x8_t v42;
  float32x4_t v43;
  float32x4_t v44;
  float32x2_t v45;
  float32x2_t v46;
  float32x2_t v47;
  float32x2_t v48;
  float32x2_t v49;
  float32x2_t v50;
  float32x2_t v51;
  float32x2_t v53;
  float32x4_t v54;
  float32x4_t v55;
  float32x4_t v56;
  float32x4_t v57;
  float32x4_t v58;
  float32x2_t v59;
  float32x2_t v60;
  float32x2_t v61;
  float32x2_t v62;
  float32x2_t v63;
  float32x2_t v64;
  uint64_t v65;
  float32x2_t v66;
  float32x2_t v67;
  unsigned int v68;
  uint64_t v69;
  uint64_t v70;
  float32x4_t *v71;
  float32x4_t v72;
  float32x4_t v73;
  float32x4_t v74;
  float32x4_t v75;
  float32x4_t v76;
  float32x4_t v77;
  float32x4_t v78;
  float32x4_t v79;
  float32x2_t v80;
  float32x4_t v81;
  float32x4_t v82;
  float32x4_t v83;
  unsigned __int8 v84;
  float32x4_t *v85;
  float32x4_t v86;
  float32x4_t v87;
  int v88;
  float32x4_t v89;
  float32x2_t v90;
  float32x2_t v91;
  int v92;
  int32x2_t v93;
  float32x4_t v94;
  float32x2_t v95;
  float32x2_t v96;
  int v97;
  float32x2_t v98;
  int8x16_t v99;
  const float *v100;
  float32x2_t v101;
  float32x2_t v102;
  float32x4_t v103;
  float32x2_t v104;
  float32x4_t v105;
  float32x2_t v106;
  float32x2_t v107;
  float32x2_t v108;
  float v109;
  float v110;
  float v111;
  float32x2_t v112;
  float32x2_t v113;
  float32x2_t v114;
  float32x2_t v115;
  float v116;
  float32x2_t v117;
  float32x2_t v118;
  float v119;
  int8x8_t v120;
  uint64_t v121;
  int8x16_t v122;
  float32x4_t v123;
  uint64_t v124;
  float32x4_t *v125;
  float32x4_t v126;
  float32x4_t v127;
  float32x4_t v128;
  float32x4_t v129;
  float32x4_t v130;
  float32x2_t v131;
  int8x8_t v132;
  float32x4_t v133;
  float32x4_t v134;
  float32x4_t v135;
  float32x4_t v136;
  float32x4_t v137;
  float32x2_t v138;
  float32x2_t v139;
  int v140;
  float32x2_t v141;
  float32x2_t v142;
  int v143;
  float32x4_t v144;
  float32x2_t v146;
  float32x2_t v147;
  float32x4_t v148;
  float32x2_t v149;
  float32x2_t v150;
  float32x2_t v151;
  float32x2_t v152;
  float32x2_t v153;
  float32x2_t v154;
  float32x2_t v155;
  float32x2_t v156;
  int32x2_t v157;
  int8x8_t v158;
  int8x8_t v159;
  float32x4_t v160;
  float32x2_t v161;
  int32x2_t v162;
  int8x8_t v163;
  int8x8_t v164;
  float32x4_t v165;
  float32x4_t v166;
  unsigned __int32 v167;
  int32x2_t v168;
  float32x2_t v169;
  float32x2_t v170;
  float32x4_t v171;
  float32x2_t v172;
  float32x2_t v173;
  float32x2_t v174;
  float32x2_t v175;
  float32x2_t v176;
  float32x2_t v177;
  float32x2_t v178;
  unsigned __int32 v179;
  float32x2_t v180;
  float32x4_t v181;
  int8x8_t v182;
  int8x8_t v183;
  int8x16_t v184;
  float32x4_t v185;
  float32x4_t v186;
  float32x2_t v187;
  float32x4_t v188;
  float32x4_t v189;
  float32x4_t v190;
  float32x4_t v191;
  float32x2_t v192;
  float32x4_t v193;
  int8x8_t v194;
  int8x8_t v195;
  int8x8_t v196;
  float32x4_t v197;
  float32x4_t v198;
  float32x4_t v199;
  float32x4_t v200;
  float32x4_t v201;
  float32x4_t v202;
  float32x4_t v203;
  float32x4_t v204;
  float32x4_t v205;
  float32x4_t v206;
  float32x4_t v207;
  float32x4_t v208;
  float32x4_t v209;
  float32x4_t v210;
  float32x4_t v211;
  int32x4_t v212;
  float32x2_t v213;
  float32x2_t v214;
  float32x2_t v215;
  float32x2_t v216;
  float32x2_t v217;
  float32x4_t v218;
  float32x4_t v219;
  float32x2_t v220;
  float32x4_t v221;
  int32x4_t v222;
  float32x4_t v223;
  unsigned __int32 v224;
  float32x2_t v225;
  float32x4_t v226;
  int32x4_t v227;
  float32x4_t v228;
  float32x4_t v229;
  float32x2_t v230;
  int32x4_t v231;
  float32x4_t v232;
  float32x2_t v233;
  int32x4_t v234;
  float32x4_t v235;
  float32x2_t v236;
  int32x4_t v237;
  float v238;
  int v239;
  int8x8_t v240;
  int8x8_t v241;
  int8x8_t v242;
  float32x4_t v243;
  float32x4_t v244;
  int8x8_t v245;
  float32x4_t v246;
  float32x4_t v247;
  float32x4_t v248;
  float32x4_t v249;
  float32x4_t v250;
  uint64_t v251;
  float32x4_t v252;
  float32x2_t v253;
  unsigned int v254;
  float32x4_t v255;
  int32x4_t v256;
  int8x16_t v257;
  float32x4_t v258;
  float32x4_t v259;
  int32x4_t v260;
  int8x16_t v261;
  int32x4_t v262;
  int8x16_t v263;
  float32x4_t v264;
  uint64_t v265;
  uint64_t v266;
  uint64_t v267;
  float32x4_t v268;
  float32x4_t v269;
  float32x4_t v270;
  int8x16_t v271;
  float32x4_t v272;
  float32x4_t v273;
  float32x4_t v274;
  int8x16_t v275;
  float32x4_t v276;
  int8x16_t v277;
  float32x4_t v278;
  float32x4_t v279;
  float32x4_t v280;
  float32x4_t v281;
  unsigned __int32 v282;
  int32x4_t v283;
  float32x4_t v284;
  float32x4_t v285;
  float32x4_t v286;
  float32x4_t v287;
  float32x4_t v288;
  float32x4_t v289;
  float32x4_t v290;
  float32x4_t v291;
  float32x4_t v292;
  float32x4_t v293;
  float32x4_t v294;
  float32x4_t v295;
  float32x4_t v296;
  float32x4_t v297;
  float32x4_t v298;
  float32x4_t v299;
  float32x4_t v300;
  double v301;
  double v302;
  double v303;
  double v304;
  float32x4_t v305;
  double v306;
  float32x4_t v307;
  float32x4_t v308;
  int8x16_t v309;
  float32x4_t v310;
  float32x4_t v311;
  float32x4_t v312;
  float32x4_t v313;
  unsigned __int32 v314;
  float32x4_t v315;
  float32x4_t v316;
  float32x4_t v317;
  float32x4_t v318;
  float32x4_t v319;
  float32x4_t v320;
  float32x4_t v321;
  float32x4_t v322;
  float32x4_t v323;
  float32x4_t v324;
  float32x4_t v325;
  float32x4_t v326;
  float32x4_t v327;
  float32x4_t v328;
  float32x4_t v329;
  float32x4_t v330;
  float32x4_t v331;
  double v332;
  double v333;
  double v334;
  double v335;
  float32x4_t v336;
  double v337;
  float32x4_t v338;
  int8x8_t *v339;
  int8x16_t v340;
  float32x4_t v341;
  float32x4_t v342;
  float32x4_t v343;
  float32x4_t v344;
  float32x4_t v345;
  float32x4_t v346;
  float32x4_t v347;
  float32x4_t v348;
  float32x4_t v349;
  float32x4_t v350;
  float32x4_t v351;
  float32x4_t v352;
  float32x4_t v353;
  float32x4_t v354;
  float32x4_t v355;
  float32x4_t v356;
  float32x4_t v357;
  float32x4_t v358;
  float32x4_t v359;
  float32x4_t v360;
  float32x4_t v361;
  int8x16_t v362;
  float32x4_t v363;
  float32x4_t v364;
  float32x4_t v365;
  float32x4_t v366;
  unsigned __int32 v367;
  float32x4_t v368;
  float32x4_t v369;
  float32x4_t v370;
  float32x4_t v371;
  float32x4_t v372;
  float32x4_t v373;
  float32x4_t v374;
  float32x4_t v375;
  float32x4_t v376;
  float32x4_t v377;
  float32x4_t v378;
  float32x4_t v379;
  float32x4_t v380;
  float32x4_t v381;
  float32x4_t v382;
  double v383;
  double v384;
  double v385;
  double v386;
  float32x4_t v387;
  double v388;
  float32x4_t v389;
  float32x4_t v390;
  float32x4_t v391;
  float32x4_t v392;
  float32x4_t v393;
  float32x4_t v394;
  unsigned __int32 v395;
  float32x4_t v396;
  float32x4_t v397;
  float32x4_t v398;
  float32x4_t v399;
  float32x4_t v400;
  float32x4_t v401;
  float32x4_t v402;
  float32x4_t v403;
  float32x4_t v404;
  float32x4_t v405;
  float32x4_t v406;
  float32x4_t v407;
  float32x4_t v408;
  float32x4_t v409;
  float32x4_t v410;
  double v411;
  double v412;
  double v413;
  double v414;
  float32x4_t v415;
  double v416;
  float32x4_t v417;
  float32x4_t v418;
  float32x4_t v419;
  int8x16_t v420;
  float32x4_t v421;
  float32x4_t v422;
  float32x4_t v423;
  float32x4_t v424;
  unsigned __int32 v425;
  float32x4_t v426;
  float32x4_t v427;
  float32x4_t v428;
  float32x4_t v429;
  float32x4_t v430;
  float32x4_t v431;
  float32x4_t v432;
  float32x4_t v433;
  float32x4_t v434;
  float32x4_t v435;
  float32x4_t v436;
  float32x4_t v437;
  float32x4_t v438;
  float32x4_t v439;
  float32x4_t v440;
  float32x4_t v441;
  double v442;
  double v443;
  double v444;
  double v445;
  float32x4_t v446;
  double v447;
  float32x4_t v448;
  uint64_t v449;
  _OWORD *v450;
  __int128 v451;
  unsigned int v452;
  uint64_t v453;
  float32x4_t v454;
  float32x4_t v455;
  float32x4_t v456;
  float32x4_t v457;
  unsigned __int32 v458;
  float32x4_t v459;
  float32x4_t v460;
  float32x4_t v461;
  float32x4_t v462;
  float32x4_t v463;
  float32x4_t v464;
  float32x4_t v465;
  float32x4_t v466;
  float32x4_t v467;
  float32x4_t v468;
  float32x4_t v469;
  float32x4_t v470;
  float32x4_t v471;
  float32x4_t v472;
  float32x4_t v473;
  float32x4_t v474;
  float32x4_t v475;
  float32x4_t v476;
  unsigned __int32 v477;
  float32x4_t v478;
  float32x4_t v479;
  float32x4_t v480;
  float32x4_t v481;
  float32x4_t v482;
  float32x4_t v483;
  float32x4_t v484;
  float32x4_t v485;
  uint64_t v486;
  float32x4_t *v487;
  float32x4_t v488;
  float32x4_t v489;
  float32x4_t v490;
  float32x4_t v491;
  float32x4_t v492;
  float32x4_t v493;
  float32x4_t v494;
  float32x4_t v495;
  float32x4_t v496;
  float32x4_t v497;
  float32x4_t v498;
  float32x4_t v499;
  float32x4_t v500;
  float32x4_t v501;
  float32x4_t v502;
  float32x4_t v503;
  float32x2_t v504;
  float32x2_t v505;
  int v506;
  float32x2_t v507;
  float32x2_t v508;
  int v509;
  float32x4_t v510;
  float32x4_t v511;
  float32x2x2_t v512;
  int32x4_t v513;
  float *v514;
  float *v515;
  int32x4_t v516;
  int v517;
  float32x4_t v518;
  float32x2x2_t v519;
  int32x4_t v520;
  float32x4_t *v521;
  float *v522;
  float32x4_t v523;
  float32x4_t v524;
  float32x4_t v525;
  float32x4_t v526;
  float32x2_t v527;
  float32x4_t v528;
  float32x4_t v529;
  float32x4_t v530;
  float32x2_t v531;
  float32x4_t v532;
  float32x2_t v533;
  float32x2_t v534;
  int8x8_t v535;
  float32x4_t v536;
  float32x4_t v537;
  float32x4_t v538;
  float32x4_t v539;
  float32x4_t v540;
  float32x4_t v541;
  float32x2_t v542;
  float32x2_t v543;
  int v544;
  float32x2_t v545;
  float32x2_t v546;
  int v547;
  float32x4_t v548;
  float32x4_t v549;
  float v550;
  float32x4_t v551;
  float32x4_t v552;
  uint64_t v553;
  double v554;
  float32x2_t v555;
  int8x8_t v556;
  int8x8_t v557;
  uint64_t v558;
  __int32 v559;
  uint64_t v560;
  float32x4_t v561;
  uint64_t v562;
  float32x2_t v563;
  int8x8_t v564;
  float32x4_t v565;
  float32x4_t v566;
  float v567;
  float32x4_t v568;
  float32x4_t v569;
  float32x4_t v570;
  float32x4_t v571;
  float32x4_t v572;
  float v573;
  float32x4_t v574;
  float32x4_t v575;
  float32x4_t v576;
  float32x4_t v577;
  int32x2_t v578;
  float32x4_t v579;
  float32x4_t v580;
  float32x4_t v581;
  float32x4_t v582;
  float32x2_t v583;
  float32x2_t v584;
  float32x4_t v585;
  float32x2_t v586;
  float32x4_t v587;
  int32x2_t v588;
  float32x4_t v589;
  float32x4_t v590;
  float32x2_t v591;
  float32x4_t v592;
  float32x2_t v593;
  float32x4_t v594;
  float32x4_t v595;
  int32x4_t v596;
  __int128 v597;
  float32x4_t v598;
  float32x4_t v599;
  float32x4_t v600;
  int32x4_t v601;
  _OWORD v602[2];
  int8x8_t v603[2];
  float32x4_t v604;
  float v605;
  float v606;
  float v607;
  int v608;
  char v609;
  float32x4_t v610;
  int8x16_t v611;
  float v612;
  float v613;
  float v614;
  int v615;
  char v616;
  float32x4_t v617;
  unsigned int v618;
  float32x4_t v619;
  float32x4_t v620;
  float32x4_t v621;
  float32x4_t v622;
  int32x4_t v623;
  int32x4_t v624;
  int32x4_t v625;
  float32x4_t v626;
  float32x4_t v627[2];
  float32x2_t v628;
  int8x8_t v629;
  float32x2_t v630;
  float32x4_t v631;
  __int128 v632;
  int8x16_t v633;
  uint64_t v634;
  float32x4_t v635;
  int32x4_t *v636;
  _OWORD v637[2];
  _OWORD v638[2];
  uint64_t v639;
  float32x2x2_t v640;
  float32x2x2_t v641;

  v639 = *MEMORY[0x24BDAC8D0];
  _X20 = *a6;
  __asm { PRFM            #0, [X20,#0x100] }
  v16 = vdup_lane_s32(*a5, 0);
  v8.i32[0] = a1[1];
  v17 = v8;
  v17.i32[1] = a1[2];
  v18 = v17;
  v18.i32[2] = a1[3];
  v7.i32[0] = a2[1];
  v588 = *(int32x2_t *)v7.f32;
  v7.i32[1] = a2[2];
  v19 = v7;
  v19.i32[2] = a2[3];
  v628 = (float32x2_t)v16;
  v20 = *a3;
  v21.i64[0] = a3[1].i64[0];
  v21.i64[1] = a3[1].u32[2];
  v23.i64[0] = a4[1].i64[0];
  v22 = *a4;
  v23.i64[1] = a4[1].u32[2];
  v24 = vnegq_f32(*a4);
  v25 = vsubq_f32(v21, v23);
  v26 = v24;
  v26.i32[3] = 0;
  v27 = vdupq_laneq_s32(*(int32x4_t *)a4, 3);
  LODWORD(v28) = vmla_f32((float32x2_t)0xBF000000BF000000, *(float32x2_t *)v27.i8, *(float32x2_t *)v27.i8).u32[0];
  v29 = vmulq_n_f32(v25, v28);
  v29.i32[3] = 0;
  v30 = (float32x2_t)vextq_s8((int8x16_t)v26, (int8x16_t)v26, 8uLL).u64[0];
  v31 = (float32x2_t)vext_s8(*(int8x8_t *)v24.f32, (int8x8_t)v30, 4uLL);
  v32 = (int8x8_t)vmls_f32(vmul_f32(*(float32x2_t *)v24.f32, (float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v25, (int8x16_t)v25, 4uLL)), v31, *(float32x2_t *)v25.f32);
  *(int8x8_t *)v33.f32 = vext_s8(v32, (int8x8_t)vmls_f32(vmul_f32(v30, *(float32x2_t *)v25.f32), *(float32x2_t *)v24.f32, (float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v25, (int8x16_t)v25, 8uLL)), 4uLL);
  v33.i64[1] = v32.u32[0];
  v34 = vmlaq_laneq_f32(v29, v33, *a4, 3);
  v34.i64[1] = vextq_s8((int8x16_t)v34, (int8x16_t)v34, 8uLL).u32[0];
  v35 = vmulq_f32(v26, v25);
  v35.i64[0] = vpaddq_f32(v35, v35).u64[0];
  v36 = vmlaq_n_f32(v34, v26, vpadd_f32(*(float32x2_t *)v35.f32, *(float32x2_t *)v35.f32).f32[0]);
  v58 = vaddq_f32(v36, v36);
  v58.i32[3] = 0;
  v627[0] = v22;
  v627[1] = v23;
  v37 = v20;
  v37.i32[3] = 0;
  v38 = (float32x2_t)vdupq_laneq_s32((int32x4_t)v20, 3).u64[0];
  v39 = vmulq_f32(v37, v26);
  v39.i64[0] = vpaddq_f32(v39, v39).u64[0];
  v40 = vsub_f32(vmul_laneq_f32(v38, v22, 3), vpadd_f32(*(float32x2_t *)v39.f32, *(float32x2_t *)v39.f32));
  v41 = vmulq_laneq_f32(v37, v22, 3);
  v37.i64[0] = vextq_s8((int8x16_t)v37, (int8x16_t)v37, 8uLL).u64[0];
  v42 = (int8x8_t)vmls_f32(vmul_f32((float32x2_t)vext_s8(*(int8x8_t *)v20.f32, *(int8x8_t *)v37.f32, 4uLL), *(float32x2_t *)v24.f32), v31, *(float32x2_t *)v20.f32);
  *(int8x8_t *)v24.f32 = vext_s8(v42, (int8x8_t)vmls_f32(vmul_f32(*(float32x2_t *)v20.f32, v30), *(float32x2_t *)v24.f32, *(float32x2_t *)v37.f32), 4uLL);
  *(int8x8_t *)&v24.u32[2] = v42;
  v43 = vaddq_f32(vaddq_f32(vmulq_laneq_f32(v26, v20, 3), v41), v24);
  *(int32x2_t *)v24.f32 = vdup_lane_s32(*(int32x2_t *)v43.f32, 1);
  *(int32x2_t *)v26.f32 = vdup_laneq_s32((int32x4_t)v43, 2);
  v44 = vaddq_f32(v43, v43);
  *(int32x2_t *)v41.f32 = vdup_lane_s32(*(int32x2_t *)v44.f32, 1);
  v45 = (float32x2_t)vdup_laneq_s32((int32x4_t)v44, 2);
  v46 = (float32x2_t)vdup_lane_s32((int32x2_t)vmul_f32(*(float32x2_t *)v43.f32, *(float32x2_t *)v44.f32), 0);
  v47 = vmul_lane_f32(*(float32x2_t *)v24.f32, *(float32x2_t *)v44.f32, 1);
  v48 = vmul_laneq_f32(*(float32x2_t *)v26.f32, v44, 2);
  v49 = vmul_n_f32(*(float32x2_t *)v24.f32, v44.f32[0]);
  v50 = vmul_n_f32(*(float32x2_t *)v26.f32, v44.f32[0]);
  v51 = vmul_lane_f32((float32x2_t)vdup_lane_s32(*(int32x2_t *)v44.f32, 0), v40, 1);
  *(float32x2_t *)v44.f32 = vmul_lane_f32(*(float32x2_t *)v26.f32, *(float32x2_t *)v44.f32, 1);
  *(float32x2_t *)v41.f32 = vmul_lane_f32(*(float32x2_t *)v41.f32, v40, 1);
  *(float32x2_t *)v26.f32 = vmul_lane_f32(v45, v40, 1);
  __asm { FMOV            V25.2S, #1.0 }
  v53 = vsub_f32(_D25, v46);
  *(int8x8_t *)v54.f32 = vext_s8((int8x8_t)vsub_f32(vsub_f32(_D25, v47), v48), (int8x8_t)vadd_f32(v49, *(float32x2_t *)v26.f32), 4uLL);
  v54.i64[1] = vsub_f32(v50, *(float32x2_t *)v41.f32).u32[0];
  *(int8x8_t *)v55.f32 = vext_s8((int8x8_t)vsub_f32(v49, *(float32x2_t *)v26.f32), (int8x8_t)vsub_f32(v53, v48), 4uLL);
  v55.i64[1] = vadd_f32(*(float32x2_t *)v44.f32, v51).u32[0];
  v623 = (int32x4_t)v54;
  v624 = (int32x4_t)v55;
  *(float32x2_t *)v41.f32 = vadd_f32(v50, *(float32x2_t *)v41.f32);
  v56 = v58;
  *(int8x8_t *)v57.f32 = vext_s8(*(int8x8_t *)v41.f32, (int8x8_t)vsub_f32(*(float32x2_t *)v44.f32, v51), 4uLL);
  v57.i64[1] = vsub_f32(v53, v47).u32[0];
  v625 = (int32x4_t)v57;
  v626 = v58;
  v58.i32[0] = a5[1].i32[0];
  v584 = *(float32x2_t *)v17.f32;
  v591 = (float32x2_t)vdup_laneq_s32((int32x4_t)v18, 2);
  v59 = vpmin_f32(v591, *(float32x2_t *)v17.f32);
  v60 = vpmin_f32(v59, v59);
  v59.f32[0] = v58.f32[0] * 0.15;
  v61 = (float32x2_t)vdup_lane_s32((int32x2_t)v59, 0);
  *(int32x2_t *)v41.f32 = vdup_n_s32(0x3E19999Au);
  v586 = *(float32x2_t *)v7.f32;
  v583 = (float32x2_t)vdup_laneq_s32((int32x4_t)v19, 2);
  v62 = vpmin_f32(v583, *(float32x2_t *)v7.f32);
  v63 = vpmin_f32(v62, v62);
  v573 = v63.f32[0];
  v64 = vmin_f32(vmin_f32(vmul_f32(v60, *(float32x2_t *)v41.f32), v61), vmin_f32(vmul_f32(v63, *(float32x2_t *)v41.f32), v61));
  v65 = *(unsigned __int8 *)(_X20 + 64);
  if (*(_BYTE *)(_X20 + 64))
  {
    v66 = vmul_f32(v64, (float32x2_t)vdup_n_s32(0x3F4CCCCDu));
    v67 = vmul_f32(v66, v66);
    v68 = v65 - 1;
    do
    {
      v69 = *(_QWORD *)(_X20 + 80);
      v70 = v68;
      v71 = (float32x4_t *)(v69 + 48 * v68);
      v72 = v71[1];
      v73 = vmulq_n_f32(v54, COERCE_FLOAT(*v71));
      v73.i32[3] = 0;
      v74 = vmulq_lane_f32(v55, *(float32x2_t *)v71->f32, 1);
      v74.i32[3] = 0;
      v75 = vmulq_laneq_f32(v57, *v71, 2);
      v75.i32[3] = 0;
      v76 = vaddq_f32(v56, vaddq_f32(v75, vaddq_f32(v73, v74)));
      v77 = v71[2];
      v78 = v77;
      v78.i32[3] = 0;
      v79 = vmulq_f32(v78, vsubq_f32(v76, v72));
      v79.i64[0] = vpaddq_f32(v79, v79).u64[0];
      v80 = vpadd_f32(*(float32x2_t *)v79.f32, *(float32x2_t *)v79.f32);
      v81 = vmlsq_lane_f32(v76, v78, v80, 0);
      v81.i64[1] = vextq_s8((int8x16_t)v81, (int8x16_t)v81, 8uLL).u32[0];
      v82 = vsubq_f32(v72, v81);
      v83 = vmulq_f32(v82, v82);
      v83.i64[0] = vpaddq_f32(v83, v83).u64[0];
      if (vuzp1_s8((int8x8_t)vdup_lane_s16((int16x4_t)vcgt_f32(vpadd_f32(*(float32x2_t *)v83.f32, *(float32x2_t *)v83.f32), v67), 0), (int8x8_t)v40).u32[0] == -1)
      {
        v84 = *(_BYTE *)(_X20 + 64) - 1;
        *(_BYTE *)(_X20 + 64) = v84;
        v85 = (float32x4_t *)(v69 + 48 * v84);
        v86 = *v85;
        v87 = v85[2];
        v71[1] = v85[1];
        v71[2] = v87;
        *v71 = v86;
      }
      else
      {
        v77.i32[3] = v80.i32[1];
        v71[2] = v77;
      }
      --v68;
    }
    while (v70);
    v88 = *(unsigned __int8 *)(_X20 + 64);
  }
  else
  {
    v88 = 0;
  }
  v43.i32[3] = v40.i32[1];
  v581 = v43;
  v89 = vmulq_f32(v18, v18);
  v89.i64[0] = vpaddq_f32(v89, v89).u64[0];
  v90 = vpadd_f32(*(float32x2_t *)v89.f32, *(float32x2_t *)v89.f32);
  v91 = vrsqrte_f32(v90);
  v92 = 4;
  do
  {
    v91 = vmul_f32(v91, vrsqrts_f32(vmul_f32(v91, v91), v90));
    --v92;
  }
  while (v92);
  v593 = (float32x2_t)v16;
  v574 = v18;
  v93 = vdup_lane_s32(vceqz_f32(v90), 0);
  v94 = vmulq_f32(v19, v19);
  v94.i64[0] = vpaddq_f32(v94, v94).u64[0];
  v95 = vpadd_f32(*(float32x2_t *)v94.f32, *(float32x2_t *)v94.f32);
  v96 = vrsqrte_f32(v95);
  v97 = 4;
  do
  {
    v96 = vmul_f32(v96, vrsqrts_f32(vmul_f32(v96, v96), v95));
    --v97;
  }
  while (v97);
  v575 = v23;
  v577 = v21;
  v578 = *(int32x2_t *)v8.f32;
  if (v88 != (_DWORD)v65)
    goto LABEL_38;
  v98 = vmul_n_f32(v64, physx::Gu::invalidateThresholds[v65]);
  v99 = (int8x16_t)vabdq_f32(v56, *(float32x4_t *)(_X20 + 16));
  *(float32x2_t *)v99.i8 = vpmax_f32((float32x2_t)*(_OWORD *)&vextq_s8(v99, v99, 8uLL), *(float32x2_t *)v99.i8);
  v100 = (const float *)((char *)&physx::Gu::invalidateQuatThresholds + 4 * v65);
  v101 = vld1_dup_f32(v100);
  v102 = vpmax_f32(*(float32x2_t *)v99.i8, *(float32x2_t *)v99.i8);
  v103 = vmulq_f32(v20, *(float32x4_t *)(_X20 + 32));
  v103.i64[0] = vpaddq_f32(v103, v103).u64[0];
  v104 = vpadd_f32(*(float32x2_t *)v103.f32, *(float32x2_t *)v103.f32);
  v105 = vmulq_f32(v22, *(float32x4_t *)(_X20 + 48));
  v105.i64[0] = vpaddq_f32(v105, v105).u64[0];
  v106 = vpadd_f32(*(float32x2_t *)v105.f32, *(float32x2_t *)v105.f32);
  if (vuzp1_s8((int8x8_t)vdup_lane_s16((int16x4_t)vorr_s8(vorr_s8((int8x8_t)vcgt_f32(v101, v104), (int8x8_t)vcgt_f32(v101, v106)), (int8x8_t)vcgt_f32(v102, v98)), 0), (int8x8_t)v90).u32[0] == -1)goto LABEL_38;
  v563 = v38;
  v565 = v20;
  v569 = v22;
  v571 = (float32x4_t)v27;
  v579 = v19;
  v107 = vmul_f32(v90, (float32x2_t)vbsl_s8((int8x8_t)vcltz_s32(vshl_n_s32(v93, 0x1FuLL)), (int8x8_t)_D25, (int8x8_t)v91));
  v108 = (float32x2_t)vbsl_s8((int8x8_t)vdup_lane_s32(vceqz_f32(v95), 0), (int8x8_t)_D25, (int8x8_t)v96);
  v109 = 0.0;
  v110 = 0.0;
  v553 = v58.i64[0];
  v567 = v28;
  v561 = v56;
  if (v104.f32[0] < 1.0)
  {
    v111 = -1.0;
    if (v104.f32[0] >= -1.0)
      v111 = v104.f32[0];
    if (v111 > 1.0)
      v111 = 1.0;
    v112 = _D25;
    v113 = v64;
    v559 = v106.i32[0];
    v110 = acosf(v111);
    v109 = 0.0;
    v106.i32[0] = v559;
    v56 = v561;
    v20 = v565;
    v28 = v567;
    v22 = v569;
    v21 = v577;
    *(int32x2_t *)v8.f32 = v578;
    v23 = v575;
    v64 = v113;
    _D25 = v112;
    v58.i64[0] = v553;
  }
  v114 = vmul_f32(v95, v108);
  v115 = vmul_n_f32(v107, v110);
  if (v106.f32[0] < 1.0)
  {
    v116 = -1.0;
    if (v106.f32[0] >= -1.0)
      v116 = v106.f32[0];
    if (v116 > 1.0)
      v116 = 1.0;
    v117 = _D25;
    v118 = v64;
    v119 = acosf(v116);
    v56 = v561;
    v20 = v565;
    v28 = v567;
    v22 = v569;
    v21 = v577;
    *(int32x2_t *)v8.f32 = v578;
    v23 = v575;
    v64 = v118;
    v58.i64[0] = v553;
    _D25 = v117;
    v109 = v119;
  }
  v120 = (int8x8_t)vdup_lane_s16((int16x4_t)vorr_s8((int8x8_t)vcgt_f32(vmul_n_f32(v114, v109), v98), (int8x8_t)vcgt_f32(v115, v98)), 0);
  v19 = v579;
  v27.i64[0] = v571.i64[0];
  v38 = v563;
  if (vuzp1_s8(v120, v120).u32[0] == -1)
  {
LABEL_38:
    v555 = v64;
    *(float32x4_t *)_X20 = v581;
    *(float32x4_t *)(_X20 + 16) = v56;
    *(float32x4_t *)(_X20 + 32) = v20;
    *(float32x4_t *)(_X20 + 48) = v22;
    v146 = (float32x2_t)vdup_lane_s32(*(int32x2_t *)v20.f32, 1);
    v147 = (float32x2_t)vdup_laneq_s32((int32x4_t)v20, 2);
    v148 = vaddq_f32(v20, v20);
    v149 = (float32x2_t)vdup_lane_s32((int32x2_t)vmul_f32(*(float32x2_t *)v20.f32, *(float32x2_t *)v148.f32), 0);
    v150 = vmul_lane_f32(v146, *(float32x2_t *)v148.f32, 1);
    v151 = vmul_laneq_f32(v147, v148, 2);
    v152 = vmul_n_f32(v146, v148.f32[0]);
    v153 = vmul_n_f32(v147, v148.f32[0]);
    v154 = vmul_n_f32(v38, v148.f32[0]);
    v155 = vmul_lane_f32(v38, *(float32x2_t *)v148.f32, 1);
    v156 = vmul_laneq_f32(v38, v148, 2);
    v157 = (int32x2_t)vext_s8((int8x8_t)vsub_f32(vsub_f32(_D25, v150), v151), (int8x8_t)vadd_f32(v152, v156), 4uLL);
    v158 = (int8x8_t)vdup_lane_s32(v157, 0);
    *(float32x2_t *)v148.f32 = vmul_lane_f32(v147, *(float32x2_t *)v148.f32, 1);
    v159 = (int8x8_t)vdup_lane_s32(v157, 1);
    *(int32x2_t *)v160.f32 = v157;
    v160.i64[1] = vsub_f32(v153, v155).u32[0];
    v161 = vsub_f32(_D25, v149);
    v162 = (int32x2_t)vext_s8((int8x8_t)vsub_f32(v152, v156), (int8x8_t)vsub_f32(v161, v151), 4uLL);
    v163 = (int8x8_t)vdup_lane_s32(v162, 0);
    v164 = (int8x8_t)vdup_lane_s32(v162, 1);
    *(int32x2_t *)v165.f32 = v162;
    v165.i64[1] = vadd_f32(*(float32x2_t *)v148.f32, v154).u32[0];
    v166 = v22;
    v167 = vsub_f32(v161, v150).u32[0];
    v168 = (int32x2_t)vext_s8((int8x8_t)vadd_f32(v153, v155), (int8x8_t)vsub_f32(*(float32x2_t *)v148.f32, v154), 4uLL);
    v169 = (float32x2_t)vdup_lane_s32(*(int32x2_t *)v166.f32, 1);
    v170 = (float32x2_t)vdup_laneq_s32((int32x4_t)v166, 2);
    v171 = vaddq_f32(v166, v166);
    *(float32x2_t *)v148.f32 = vmul_lane_f32(v169, *(float32x2_t *)v171.f32, 1);
    v172 = vmul_laneq_f32(v170, v171, 2);
    v173 = vmul_n_f32(v169, v171.f32[0]);
    v174 = vmul_n_f32(v170, v171.f32[0]);
    v175 = vmul_n_f32(*(float32x2_t *)v27.i8, v171.f32[0]);
    v176 = vmul_lane_f32(v170, *(float32x2_t *)v171.f32, 1);
    v177 = vmul_lane_f32(*(float32x2_t *)v27.i8, *(float32x2_t *)v171.f32, 1);
    v178 = vmul_laneq_f32(*(float32x2_t *)v27.i8, v171, 2);
    *(float32x2_t *)v171.f32 = vsub_f32(_D25, (float32x2_t)vdup_lane_s32((int32x2_t)vmul_f32(*(float32x2_t *)v166.f32, *(float32x2_t *)v171.f32), 0));
    v564 = (int8x8_t)_D25;
    v179 = vsub_f32(v174, v177).u32[0];
    v180 = (float32x2_t)vext_s8((int8x8_t)vsub_f32(vsub_f32(_D25, *(float32x2_t *)v148.f32), v172), (int8x8_t)vadd_f32(v173, v178), 4uLL);
    *(float32x2_t *)v181.f32 = v180;
    v181.i64[1] = v179;
    v182 = (int8x8_t)vsub_f32(v173, v178);
    v183 = (int8x8_t)vadd_f32(v176, v175).u32[0];
    *(int8x8_t *)v184.i8 = vext_s8(v182, (int8x8_t)vsub_f32(*(float32x2_t *)v171.f32, v172), 4uLL);
    v185.i64[0] = v184.i64[0];
    v185.i64[1] = v183.u32[0];
    v619 = v181;
    v620 = v185;
    *(int8x8_t *)v186.f32 = vext_s8((int8x8_t)vadd_f32(v174, v177), (int8x8_t)vsub_f32(v176, v175), 4uLL);
    v186.i64[1] = vsub_f32(*(float32x2_t *)v171.f32, *(float32x2_t *)v148.f32).u32[0];
    v621 = v186;
    v622 = v23;
    v618 = 0;
    v603[0] = (int8x8_t)vdup_lane_s32(*(int32x2_t *)v8.f32, 0);
    v187 = (float32x2_t)vdup_lane_s32((int32x2_t)v584, 1);
    *(float32x2_t *)&v597 = v187;
    *(float32x2_t *)v596.i8 = v591;
    v188 = vsubq_f32(v23, v21);
    v566 = v165;
    v568 = v160;
    v189 = vmulq_f32(v188, v160);
    v189.i64[0] = vpaddq_f32(v189, v189).u64[0];
    *(float32x2_t *)v148.f32 = vpadd_f32(*(float32x2_t *)v189.f32, *(float32x2_t *)v189.f32);
    v190 = vmulq_f32(v188, v165);
    v556 = v158;
    v557 = v159;
    *(int8x8_t *)v191.f32 = vext_s8(v158, v163, 4uLL);
    v558 = vdup_lane_s32(v168, 0).u32[0];
    v191.i64[1] = v558;
    v192 = (float32x2_t)vpaddq_f32(v190, v190).u64[0];
    *(int8x8_t *)v193.f32 = vext_s8(v159, v164, 4uLL);
    v560 = vdup_lane_s32(v168, 1).u32[0];
    v193.i64[1] = v560;
    v194 = (int8x8_t)vdup_lane_s32(*(int32x2_t *)&v160.u32[2], 0);
    v195 = (int8x8_t)vdup_lane_s32(*(int32x2_t *)&v165.u32[2], 0);
    v196 = (int8x8_t)vpadd_f32(v192, v192);
    *(int8x8_t *)v197.f32 = vext_s8(v194, v195, 4uLL);
    v562 = vdup_lane_s32((int32x2_t)v167, 0).u32[0];
    v197.i64[1] = v562;
    v198 = vmulq_n_f32(v191, v180.f32[0]);
    v198.i32[3] = 0;
    v199 = vmulq_lane_f32(v193, v180, 1);
    v199.i32[3] = 0;
    *(int8x8_t *)v200.f32 = vext_s8(*(int8x8_t *)v148.f32, v196, 4uLL);
    v582 = v181;
    v201 = vmulq_laneq_f32(v197, v181, 2);
    v201.i32[3] = 0;
    v202 = vaddq_f32(v201, vaddq_f32(v198, v199));
    v203 = vmulq_n_f32(v191, *(float *)v184.i32);
    v203.i32[3] = 0;
    v204 = vmulq_lane_f32(v193, *(float32x2_t *)v184.i8, 1);
    v204.i32[3] = 0;
    v570 = v186;
    v572 = v185;
    v205 = vmulq_laneq_f32(v197, v185, 2);
    v205.i32[3] = 0;
    v206 = vaddq_f32(v205, vaddq_f32(v203, v204));
    v207 = vmulq_n_f32(v191, v186.f32[0]);
    v207.i32[3] = 0;
    v208 = vmulq_lane_f32(v193, *(float32x2_t *)v186.f32, 1);
    v208.i32[3] = 0;
    v209 = vmulq_laneq_f32(v197, v186, 2);
    v209.i32[3] = 0;
    v210 = vaddq_f32(v209, vaddq_f32(v207, v208));
    *(int8x8_t *)v208.f32 = vext_s8((int8x8_t)vdup_lane_s32(*(int32x2_t *)v202.f32, 0), (int8x8_t)vdup_lane_s32(*(int32x2_t *)v206.f32, 0), 4uLL);
    v208.i64[1] = vdup_lane_s32(*(int32x2_t *)v210.f32, 0).u32[0];
    v211 = vaddq_f32(vabsq_f32(v208), (float32x4_t)xmmword_2261A9050);
    v212 = (int32x4_t)vmulq_f32(v19, v211);
    v213 = (float32x2_t)vdup_lane_s32(v588, 0);
    *(float32x2_t *)v595.f32 = v213;
    *(float32x2_t *)v209.f32 = vadd_f32((float32x2_t)vdup_lane_s32(*(int32x2_t *)v212.i8, 0), vadd_f32((float32x2_t)vdup_lane_s32(*(int32x2_t *)v212.i8, 1), (float32x2_t)vdup_laneq_s32(v212, 2)));
    v214 = (float32x2_t)vdup_lane_s32(*(int32x2_t *)v200.f32, 0);
    v215 = vsub_f32(vadd_f32((float32x2_t)v603[0], *(float32x2_t *)v209.f32), vabs_f32(v214));
    v216 = (float32x2_t)vdup_lane_s32((int32x2_t)v586, 1);
    v630 = v216;
    v629 = (int8x8_t)v583;
    v217 = vadd_f32(v593, v215);
    if (v217.f32[0] >= 0.0)
    {
      *(int32x2_t *)v218.f32 = v168;
      *(int8x8_t *)v219.f32 = vext_s8((int8x8_t)vdup_lane_s32(*(int32x2_t *)v202.f32, 1), (int8x8_t)vdup_lane_s32(*(int32x2_t *)v206.f32, 1), 4uLL);
      v219.i64[1] = vdup_lane_s32(*(int32x2_t *)v210.f32, 1).u32[0];
      v220 = (float32x2_t)vdup_lane_s32(*(int32x2_t *)v200.f32, 1);
      v221 = vaddq_f32(vabsq_f32(v219), (float32x4_t)xmmword_2261A9050);
      v222 = (int32x4_t)vmulq_f32(v19, v221);
      v580 = v19;
      *(float32x2_t *)&v631.u32[2] = vadd_f32(v593, vsub_f32(vadd_f32(v187, vadd_f32((float32x2_t)vdup_lane_s32(*(int32x2_t *)v222.i8, 0), vadd_f32((float32x2_t)vdup_lane_s32(*(int32x2_t *)v222.i8, 1), (float32x2_t)vdup_laneq_s32(v222, 2)))), vabs_f32(v220)));
      if (v631.f32[2] >= 0.0)
      {
        v218.i64[1] = v167;
        v552 = v218;
        v223 = vmulq_f32(v188, v218);
        v223.i64[0] = vpaddq_f32(v223, v223).u64[0];
        v224 = vpadd_f32(*(float32x2_t *)v223.f32, *(float32x2_t *)v223.f32).u32[0];
        *(int8x8_t *)v223.f32 = vext_s8((int8x8_t)vdup_laneq_s32((int32x4_t)v202, 2), (int8x8_t)vdup_laneq_s32((int32x4_t)v206, 2), 4uLL);
        v223.i64[1] = vdup_laneq_s32((int32x4_t)v210, 2).u32[0];
        v225 = (float32x2_t)vdup_lane_s32((int32x2_t)v224, 0);
        v226 = vaddq_f32(vabsq_f32(v223), (float32x4_t)xmmword_2261A9050);
        v227 = (int32x4_t)vmulq_f32(v19, v226);
        *(float32x2_t *)&v632 = vadd_f32(v593, vsub_f32(vadd_f32(v591, vadd_f32((float32x2_t)vdup_lane_s32(*(int32x2_t *)v227.i8, 0), vadd_f32((float32x2_t)vdup_lane_s32(*(int32x2_t *)v227.i8, 1), (float32x2_t)vdup_laneq_s32(v227, 2)))), vabs_f32(v225)));
        if (*(float *)&v632 >= 0.0)
        {
          v200.i64[1] = v224;
          v228 = vaddq_f32(vabsq_f32(v202), (float32x4_t)xmmword_2261A9050);
          v229 = vmulq_f32(v202, v200);
          v229.i64[0] = vpaddq_f32(v229, v229).u64[0];
          v230 = vpadd_f32(*(float32x2_t *)v229.f32, *(float32x2_t *)v229.f32);
          v231 = (int32x4_t)vmulq_f32(v574, v228);
          *((float32x2_t *)&v632 + 1) = vadd_f32(v593, vsub_f32(vadd_f32(v213, vadd_f32((float32x2_t)vdup_lane_s32(*(int32x2_t *)v231.i8, 0), vadd_f32((float32x2_t)vdup_lane_s32(*(int32x2_t *)v231.i8, 1), (float32x2_t)vdup_laneq_s32(v231, 2)))), vabs_f32(v230)));
          if (*((float *)&v632 + 2) >= 0.0)
          {
            v232 = vmulq_f32(v206, v200);
            v232.i64[0] = vpaddq_f32(v232, v232).u64[0];
            v233 = vpadd_f32(*(float32x2_t *)v232.f32, *(float32x2_t *)v232.f32);
            v550 = v233.f32[0];
            v551 = vaddq_f32(vabsq_f32(v206), (float32x4_t)xmmword_2261A9050);
            v234 = (int32x4_t)vmulq_f32(v574, v551);
            *(float32x2_t *)v633.i8 = vadd_f32(v593, vsub_f32(vadd_f32(v216, vadd_f32((float32x2_t)vdup_lane_s32(*(int32x2_t *)v234.i8, 0), vadd_f32((float32x2_t)vdup_lane_s32(*(int32x2_t *)v234.i8, 1), (float32x2_t)vdup_laneq_s32(v234, 2)))), vabs_f32(v233)));
            if (*(float *)v633.i32 >= 0.0)
            {
              v235 = vmulq_f32(v210, v200);
              v235.i64[0] = vpaddq_f32(v235, v235).u64[0];
              v236 = vpadd_f32(*(float32x2_t *)v235.f32, *(float32x2_t *)v235.f32);
              v549 = vaddq_f32(vabsq_f32(v210), (float32x4_t)xmmword_2261A9050);
              v237 = (int32x4_t)vmulq_f32(v574, v549);
              v633.u64[1] = (unint64_t)vadd_f32(v593, vsub_f32(vadd_f32(v583, vadd_f32((float32x2_t)vdup_lane_s32(*(int32x2_t *)v237.i8, 0), vadd_f32((float32x2_t)vdup_lane_s32(*(int32x2_t *)v237.i8, 1), (float32x2_t)vdup_laneq_s32(v237, 2)))), vabs_f32(v236)));
              if (*(float *)&v633.i32[2] >= 0.0
                && (vcgt_f32(vabd_f32(vmul_lane_f32(v225, *(float32x2_t *)v202.f32, 1), vmul_laneq_f32(v220, v202, 2)), vadd_f32(v593, vadd_f32(vadd_f32(vmul_laneq_f32(v187, v228, 2), vmul_lane_f32(v591, *(float32x2_t *)v228.f32, 1)), vadd_f32(vmul_laneq_f32(v216, v211, 2), vmul_lane_f32(v583, *(float32x2_t *)v211.f32, 1))))).u8[0] & 1) == 0&& (vcgt_f32(vabd_f32(vmul_lane_f32(v225, *(float32x2_t *)v206.f32, 1), vmul_laneq_f32(v220, v206, 2)), vadd_f32(v593, vadd_f32(vadd_f32(vmul_laneq_f32(v187, v551, 2), vmul_lane_f32(v591, *(float32x2_t *)v551.f32, 1)), vadd_f32(vmul_n_f32((float32x2_t)vdup_laneq_s32((int32x4_t)v211, 2), *(float *)v588.i32), vmul_n_f32(v583, v211.f32[0]))))).u8[0] & 1) == 0&& (vcgt_f32(vabd_f32(vmul_lane_f32(v225, *(float32x2_t *)v210.f32, 1), vmul_laneq_f32(v220, v210, 2)), vadd_f32(v593,
                        vadd_f32(vadd_f32(vmul_laneq_f32(v187, v549, 2), vmul_lane_f32(v591, *(float32x2_t *)v549.f32, 1)), vadd_f32(vmul_n_f32((float32x2_t)vdup_lane_s32(*(int32x2_t *)v211.f32, 1), *(float *)v588.i32), vmul_lane_f32((float32x2_t)vdup_lane_s32(*(int32x2_t *)v211.f32, 0), v586, 1))))).u8[0] & 1) == 0&& (vcgt_f32(vabd_f32(vmul_laneq_f32(v214, v202, 2), vmul_n_f32(v225, v202.f32[0])), vadd_f32(v593, vadd_f32(vadd_f32(vmul_n_f32((float32x2_t)vdup_laneq_s32((int32x4_t)v228, 2), *(float *)v578.i32), vmul_n_f32(v591, v228.f32[0])), vadd_f32(vmul_laneq_f32(v216, v221, 2), vmul_lane_f32(v583, *(float32x2_t *)v221.f32, 1))))).u8[0] & 1) == 0&& (vcgt_f32(vabd_f32(vmul_laneq_f32(v214, v206, 2), vmul_n_f32(v225, v206.f32[0])), vadd_f32(v593, vadd_f32(vadd_f32(
                            vmul_n_f32((float32x2_t)vdup_laneq_s32((int32x4_t)v551, 2), *(float *)v578.i32),
                            vmul_n_f32(v591, v551.f32[0])),
                          vadd_f32(vmul_n_f32((float32x2_t)vdup_laneq_s32((int32x4_t)v221, 2), *(float *)v588.i32), vmul_n_f32(v583, v221.f32[0]))))).u8[0] & 1) == 0&& (vcgt_f32(vabd_f32(vmul_laneq_f32(v214, v210, 2), vmul_n_f32(v225, v210.f32[0])), vadd_f32(v593, vadd_f32(vadd_f32(vmul_n_f32((float32x2_t)vdup_laneq_s32((int32x4_t)v549, 2), *(float *)v578.i32), vmul_n_f32(v591, v549.f32[0])), vadd_f32(vmul_n_f32((float32x2_t)vdup_lane_s32(*(int32x2_t *)v221.f32, 1), *(float *)v588.i32), vmul_lane_f32((float32x2_t)vdup_lane_s32(*(int32x2_t *)v221.f32, 0), v586, 1))))).u8[0] & 1) == 0&& (vcgt_f32(vabd_f32(vmul_n_f32(v220, v202.f32[0]), vmul_lane_f32(v214, *(float32x2_t *)v202.f32, 1)), vadd_f32(v593, vadd_f32(vadd_f32(
                            vmul_n_f32((float32x2_t)vdup_lane_s32(*(int32x2_t *)v228.f32, 1), *(float *)v578.i32),
                            vmul_lane_f32((float32x2_t)vdup_lane_s32(*(int32x2_t *)v228.f32, 0), v584, 1)),
                          vadd_f32(vmul_laneq_f32(v216, v226, 2), vmul_lane_f32(v583, *(float32x2_t *)v226.f32, 1))))).u8[0] & 1) == 0
                && (vcgt_f32(vabd_f32(vmul_n_f32(v220, v206.f32[0]), vmul_lane_f32(v214, *(float32x2_t *)v206.f32, 1)), vadd_f32(v593, vadd_f32(vadd_f32(vmul_n_f32((float32x2_t)vdup_lane_s32(*(int32x2_t *)v551.f32, 1), *(float *)v578.i32), vmul_lane_f32((float32x2_t)vdup_lane_s32(*(int32x2_t *)v551.f32, 0), v584, 1)), vadd_f32(vmul_n_f32((float32x2_t)vdup_laneq_s32((int32x4_t)v226, 2), *(float *)v588.i32), vmul_n_f32(v583, v226.f32[0]))))).u8[0] & 1) == 0&& (vcgt_f32(vabd_f32(vmul_n_f32(v220, v210.f32[0]), vmul_lane_f32(v214, *(float32x2_t *)v210.f32, 1)), vadd_f32(v593, vadd_f32(vadd_f32(vmul_n_f32((float32x2_t)vdup_lane_s32(*(int32x2_t *)v549.f32, 1), *(float *)v578.i32), vmul_lane_f32((float32x2_t)vdup_lane_s32(*(int32x2_t *)v549.f32, 0), v584, 1)), vadd_f32(
                            vmul_n_f32((float32x2_t)vdup_lane_s32(*(int32x2_t *)v226.f32, 1), *(float *)v588.i32),
                            vmul_lane_f32((float32x2_t)vdup_lane_s32(*(int32x2_t *)v226.f32, 0), v586, 1))))).u8[0] & 1) == 0)
              {
                v238 = v230.f32[0];
                v554 = *(double *)v58.i64;
                v239 = 0;
                v240 = (int8x8_t)vdup_lane_s32((int32x2_t)v180, 0);
                v241 = (int8x8_t)vdup_lane_s32((int32x2_t)v180, 1);
                v242 = (int8x8_t)vdup_lane_s32((int32x2_t)v179, 0);
                v243 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v181.f32, 1);
                v244 = (float32x4_t)vdupq_laneq_s32((int32x4_t)v181, 2);
                v245 = (int8x8_t)vdup_lane_s32(*(int32x2_t *)v184.i8, 1);
                v246 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v572.f32, 0);
                v247 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v572.f32, 1);
                v248 = (float32x4_t)vdupq_laneq_s32((int32x4_t)v572, 2);
                v249 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v186.f32, 0);
                v250 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v186.f32, 1);
                v251 = 1;
                v252 = (float32x4_t)vdupq_laneq_s32((int32x4_t)v186, 2);
                do
                {
                  v253 = *(float32x2_t *)&v631.f32[2 * v251];
                  if ((vcgt_f32(v217, v253).u8[0] & 1) != 0)
                  {
                    v239 = v251;
                    v254 = -1;
                  }
                  else
                  {
                    v254 = 0;
                  }
                  v217 = (float32x2_t)vbsl_s8((int8x8_t)vdup_n_s32(v254), (int8x8_t)v253, (int8x8_t)v217);
                  ++v251;
                }
                while (v251 != 6);
                v611 = 0uLL;
                switch(v239)
                {
                  case 0:
                    v255 = (float32x4_t)vdupq_lane_s32(v578, 0);
                    if (v200.f32[0] <= 0.0)
                    {
                      v258 = vnegq_f32(v552);
                      v258.i32[3] = 0;
                      v277 = (int8x16_t)vmlsq_f32(v577, v255, v568);
                      v277.i64[1] = vextq_s8(v277, v277, 8uLL).u32[0];
                      v592 = (float32x4_t)v277;
                      v594 = v568;
                    }
                    else
                    {
                      v256 = (int32x4_t)vnegq_f32(v568);
                      v556.i32[0] = vdup_lane_s32(*(int32x2_t *)v256.i8, 0).u32[0];
                      v557.i32[0] = vdup_lane_s32(*(int32x2_t *)v256.i8, 1).u32[0];
                      v194.i32[0] = vdup_laneq_s32(v256, 2).u32[0];
                      v256.i32[3] = 0;
                      v257 = (int8x16_t)vmlaq_f32(v577, v255, v568);
                      v257.i64[1] = vextq_s8(v257, v257, 8uLL).u32[0];
                      v592 = (float32x4_t)v257;
                      v594 = (float32x4_t)v256;
                      v258 = v552;
                    }
                    v278 = vsubq_f32(v575, v592);
                    v279 = vmulq_f32(v258, v278);
                    v279.i64[0] = vpaddq_f32(v279, v279).u64[0];
                    v280 = vmulq_f32(v278, v165);
                    v280.i64[0] = vpaddq_f32(v280, v280).u64[0];
                    v281 = vmulq_f32(v594, v278);
                    v281.i64[0] = vpaddq_f32(v281, v281).u64[0];
                    v282 = vpadd_f32(*(float32x2_t *)v281.f32, *(float32x2_t *)v281.f32).u32[0];
                    *(int8x8_t *)v281.f32 = vext_s8((int8x8_t)vpadd_f32(*(float32x2_t *)v279.f32, *(float32x2_t *)v279.f32), (int8x8_t)vpadd_f32(*(float32x2_t *)v280.f32, *(float32x2_t *)v280.f32), 4uLL);
                    v281.i64[1] = v282;
                    *(int8x8_t *)v279.f32 = vext_s8((int8x8_t)vdup_lane_s32(*(int32x2_t *)v258.f32, 0), v163, 4uLL);
                    v279.i64[1] = v556.u32[0];
                    v283 = (int32x4_t)v258;
                    *(int8x8_t *)v284.f32 = vext_s8(*(int8x8_t *)v258.f32, v164, 4uLL);
                    v284.i64[1] = v557.u32[0];
                    v285 = (float32x4_t)v283;
                    v589 = (float32x4_t)v283;
                    *(int8x8_t *)v286.f32 = vext_s8((int8x8_t)vdup_laneq_s32(v283, 2), v195, 4uLL);
                    v286.i64[1] = v194.u32[0];
                    v287 = vmulq_n_f32(v279, v181.f32[0]);
                    v287.i32[3] = 0;
                    v288 = vmulq_f32(v243, v284);
                    v288.i32[3] = 0;
                    v289 = vmulq_f32(v244, v286);
                    v289.i32[3] = 0;
                    v290 = vaddq_f32(v287, v288);
                    v291 = vmulq_f32(v246, v279);
                    v291.i32[3] = 0;
                    v292 = vmulq_f32(v247, v284);
                    v292.i32[3] = 0;
                    v293 = vmulq_f32(v248, v286);
                    v293.i32[3] = 0;
                    v294 = vmulq_f32(v249, v279);
                    v294.i32[3] = 0;
                    v295 = vmulq_f32(v250, v284);
                    v295.i32[3] = 0;
                    v296 = vmulq_f32(v252, v286);
                    v296.i32[3] = 0;
                    v598 = vaddq_f32(v289, v290);
                    v599 = vaddq_f32(v293, vaddq_f32(v291, v292));
                    v600 = vaddq_f32(v296, vaddq_f32(v294, v295));
                    v601 = (int32x4_t)v281;
                    v297 = vmulq_f32(v285, v594);
                    v297.i64[0] = vpaddq_f32(v297, v297).u64[0];
                    v298 = vmulq_f32(v594, v165);
                    v298.i64[0] = vpaddq_f32(v298, v298).u64[0];
                    v299 = vmulq_f32(v594, v594);
                    v299.i64[0] = vpaddq_f32(v299, v299).u64[0];
                    *(int8x8_t *)v297.f32 = vext_s8((int8x8_t)vpadd_f32(*(float32x2_t *)v297.f32, *(float32x2_t *)v297.f32), (int8x8_t)vpadd_f32(*(float32x2_t *)v298.f32, *(float32x2_t *)v298.f32), 4uLL);
                    v297.i64[1] = vpadd_f32(*(float32x2_t *)v299.f32, *(float32x2_t *)v299.f32).u32[0];
                    v604 = v297;
                    v300 = vnegq_f32(v297);
                    v300.i32[3] = 0;
                    physx::Gu::getIncidentPolygon(&v635, &v611, &v598, v300, v580);
                    physx::Gu::calculateContacts((int8x8_t *)&v596, (int8x8_t *)&v597, &v635, (int32x4_t *)&v611, &v604, a7, &v618, &v628, v301, v302, v303, v304, v305, v306, v307);
                    v582 = v589;
                    v572 = v566;
                    goto LABEL_88;
                  case 1:
                    v259 = (float32x4_t)vdupq_lane_s32((int32x2_t)v584, 1);
                    if (v200.f32[1] <= 0.0)
                    {
                      v308 = vnegq_f32(v552);
                      v308.i32[3] = 0;
                      v572 = v308;
                      v309 = (int8x16_t)vmlsq_f32(v577, v259, v165);
                      v309.i64[1] = vextq_s8(v309, v309, 8uLL).u32[0];
                      v592 = (float32x4_t)v309;
                      v594 = v165;
                    }
                    else
                    {
                      v260 = (int32x4_t)vnegq_f32(v165);
                      v163.i32[0] = vdup_lane_s32(*(int32x2_t *)v260.i8, 0).u32[0];
                      v164.i32[0] = vdup_lane_s32(*(int32x2_t *)v260.i8, 1).u32[0];
                      v195.i32[0] = vdup_laneq_s32(v260, 2).u32[0];
                      v260.i32[3] = 0;
                      v261 = (int8x16_t)vmlaq_f32(v577, v259, v165);
                      v261.i64[1] = vextq_s8(v261, v261, 8uLL).u32[0];
                      v592 = (float32x4_t)v261;
                      v594 = (float32x4_t)v260;
                      v572 = v552;
                    }
                    v310 = vsubq_f32(v575, v592);
                    v311 = vmulq_f32(v310, v568);
                    v311.i64[0] = vpaddq_f32(v311, v311).u64[0];
                    v312 = vmulq_f32(v572, v310);
                    v312.i64[0] = vpaddq_f32(v312, v312).u64[0];
                    v313 = vmulq_f32(v594, v310);
                    v313.i64[0] = vpaddq_f32(v313, v313).u64[0];
                    v314 = vpadd_f32(*(float32x2_t *)v313.f32, *(float32x2_t *)v313.f32).u32[0];
                    *(int8x8_t *)v313.f32 = vext_s8((int8x8_t)vpadd_f32(*(float32x2_t *)v311.f32, *(float32x2_t *)v311.f32), (int8x8_t)vpadd_f32(*(float32x2_t *)v312.f32, *(float32x2_t *)v312.f32), 4uLL);
                    v313.i64[1] = v314;
                    *(int8x8_t *)v315.f32 = vext_s8(v556, *(int8x8_t *)v572.f32, 4uLL);
                    v315.i64[1] = v163.u32[0];
                    *(int8x8_t *)v316.f32 = vext_s8(v557, (int8x8_t)vdup_lane_s32(*(int32x2_t *)v572.f32, 1), 4uLL);
                    v316.i64[1] = v164.u32[0];
                    *(int8x8_t *)v317.f32 = vext_s8(v194, (int8x8_t)*(_OWORD *)&vextq_s8((int8x16_t)v572, (int8x16_t)v572, 8uLL), 4uLL);
                    v317.i64[1] = v195.u32[0];
                    v318 = vmulq_n_f32(v315, v181.f32[0]);
                    v318.i32[3] = 0;
                    v319 = vmulq_f32(v243, v316);
                    v319.i32[3] = 0;
                    v320 = vmulq_f32(v244, v317);
                    v320.i32[3] = 0;
                    v321 = vaddq_f32(v318, v319);
                    v322 = vmulq_f32(v246, v315);
                    v322.i32[3] = 0;
                    v323 = vmulq_f32(v247, v316);
                    v323.i32[3] = 0;
                    v324 = vmulq_f32(v248, v317);
                    v324.i32[3] = 0;
                    v325 = vmulq_f32(v249, v315);
                    v325.i32[3] = 0;
                    v326 = vmulq_f32(v250, v316);
                    v326.i32[3] = 0;
                    v327 = vmulq_f32(v252, v317);
                    v327.i32[3] = 0;
                    v598 = vaddq_f32(v320, v321);
                    v599 = vaddq_f32(v324, vaddq_f32(v322, v323));
                    v600 = vaddq_f32(v327, vaddq_f32(v325, v326));
                    v601 = (int32x4_t)v313;
                    v328 = vmulq_f32(v594, v568);
                    v328.i64[0] = vpaddq_f32(v328, v328).u64[0];
                    v329 = vmulq_f32(v572, v594);
                    v329.i64[0] = vpaddq_f32(v329, v329).u64[0];
                    v330 = vmulq_f32(v594, v594);
                    v330.i64[0] = vpaddq_f32(v330, v330).u64[0];
                    *(int8x8_t *)v328.f32 = vext_s8((int8x8_t)vpadd_f32(*(float32x2_t *)v328.f32, *(float32x2_t *)v328.f32), (int8x8_t)vpadd_f32(*(float32x2_t *)v329.f32, *(float32x2_t *)v329.f32), 4uLL);
                    v328.i64[1] = vpadd_f32(*(float32x2_t *)v330.f32, *(float32x2_t *)v330.f32).u32[0];
                    v604 = v328;
                    v331 = vnegq_f32(v328);
                    v331.i32[3] = 0;
                    physx::Gu::getIncidentPolygon(&v635, &v611, &v598, v331, v580);
                    v339 = (int8x8_t *)&v596;
                    goto LABEL_78;
                  case 2:
                    if (v200.f32[2] <= 0.0)
                    {
                      v340 = (int8x16_t)vmlsq_laneq_f32(v577, v552, v574, 2);
                      v267 = v562;
                      v340.i64[1] = vextq_s8(v340, v340, 8uLL).u32[0];
                      v592 = (float32x4_t)v340;
                      v594 = v552;
                      v265 = v558;
                      v266 = v560;
                      v572 = v165;
                    }
                    else
                    {
                      v262 = (int32x4_t)vnegq_f32(v552);
                      LODWORD(v265) = vdup_lane_s32(*(int32x2_t *)v262.i8, 0).u32[0];
                      LODWORD(v266) = vdup_lane_s32(*(int32x2_t *)v262.i8, 1).u32[0];
                      LODWORD(v267) = vdup_laneq_s32(v262, 2).u32[0];
                      v262.i32[3] = 0;
                      v594 = (float32x4_t)v262;
                      v263 = (int8x16_t)vmlaq_laneq_f32(v577, v552, v574, 2);
                      v263.i64[1] = vextq_s8(v263, v263, 8uLL).u32[0];
                      v592 = (float32x4_t)v263;
                      v264 = vnegq_f32(v165);
                      v264.i32[3] = 0;
                      v572 = v264;
                      v265 = v265;
                      v266 = v266;
                      v267 = v267;
                    }
                    v341 = vsubq_f32(v575, v592);
                    v342 = vmulq_f32(v341, v568);
                    v342.i64[0] = vpaddq_f32(v342, v342).u64[0];
                    v343 = vmulq_f32(v572, v341);
                    v343.i64[0] = vpaddq_f32(v343, v343).u64[0];
                    v344 = vmulq_f32(v594, v341);
                    v344.i64[0] = vpaddq_f32(v344, v344).u64[0];
                    *(int8x8_t *)v342.f32 = vext_s8((int8x8_t)vpadd_f32(*(float32x2_t *)v342.f32, *(float32x2_t *)v342.f32), (int8x8_t)vpadd_f32(*(float32x2_t *)v343.f32, *(float32x2_t *)v343.f32), 4uLL);
                    v342.i64[1] = vpadd_f32(*(float32x2_t *)v344.f32, *(float32x2_t *)v344.f32).u32[0];
                    *(int8x8_t *)v345.f32 = vext_s8(v556, *(int8x8_t *)v572.f32, 4uLL);
                    v345.i64[1] = v265;
                    *(int8x8_t *)v346.f32 = vext_s8(v557, (int8x8_t)vdup_lane_s32(*(int32x2_t *)v572.f32, 1), 4uLL);
                    v346.i64[1] = v266;
                    *(int8x8_t *)v347.f32 = vext_s8(v194, (int8x8_t)*(_OWORD *)&vextq_s8((int8x16_t)v572, (int8x16_t)v572, 8uLL), 4uLL);
                    v347.i64[1] = v267;
                    v348 = vmulq_n_f32(v345, v181.f32[0]);
                    v348.i32[3] = 0;
                    v349 = vmulq_f32(v243, v346);
                    v349.i32[3] = 0;
                    v350 = vmulq_f32(v244, v347);
                    v350.i32[3] = 0;
                    v351 = vaddq_f32(v348, v349);
                    v352 = vmulq_f32(v246, v345);
                    v352.i32[3] = 0;
                    v353 = vmulq_f32(v247, v346);
                    v353.i32[3] = 0;
                    v354 = vmulq_f32(v248, v347);
                    v354.i32[3] = 0;
                    v355 = vmulq_f32(v249, v345);
                    v355.i32[3] = 0;
                    v356 = vmulq_f32(v250, v346);
                    v356.i32[3] = 0;
                    v357 = vmulq_f32(v252, v347);
                    v357.i32[3] = 0;
                    v598 = vaddq_f32(v350, v351);
                    v599 = vaddq_f32(v354, vaddq_f32(v352, v353));
                    v600 = vaddq_f32(v357, vaddq_f32(v355, v356));
                    v601 = (int32x4_t)v342;
                    v358 = vmulq_f32(v594, v568);
                    v358.i64[0] = vpaddq_f32(v358, v358).u64[0];
                    v359 = vmulq_f32(v572, v594);
                    v359.i64[0] = vpaddq_f32(v359, v359).u64[0];
                    v360 = vmulq_f32(v594, v594);
                    v360.i64[0] = vpaddq_f32(v360, v360).u64[0];
                    *(int8x8_t *)v358.f32 = vext_s8((int8x8_t)vpadd_f32(*(float32x2_t *)v358.f32, *(float32x2_t *)v358.f32), (int8x8_t)vpadd_f32(*(float32x2_t *)v359.f32, *(float32x2_t *)v359.f32), 4uLL);
                    v358.i64[1] = vpadd_f32(*(float32x2_t *)v360.f32, *(float32x2_t *)v360.f32).u32[0];
                    v604 = v358;
                    v361 = vnegq_f32(v358);
                    v361.i32[3] = 0;
                    physx::Gu::getIncidentPolygon(&v635, &v611, &v598, v361, v580);
                    v339 = (int8x8_t *)&v597;
LABEL_78:
                    physx::Gu::calculateContacts(v603, v339, &v635, (int32x4_t *)&v611, &v604, a7, &v618, &v628, v332, v333, v334, v335, v336, v337, v338);
                    v582 = v568;
                    goto LABEL_88;
                  case 3:
                    v268 = vnegq_f32(v181);
                    v269 = v268;
                    v269.i32[3] = 0;
                    if (v238 <= 0.0)
                    {
                      v362 = (int8x16_t)vmlaq_n_f32(v575, v181, *(float *)v588.i32);
                      v362.i64[1] = vextq_s8(v362, v362, 8uLL).u32[0];
                      v240.i32[0] = vdup_lane_s32(*(int32x2_t *)v268.f32, 0).u32[0];
                      v241.i32[0] = vdup_lane_s32(*(int32x2_t *)v268.f32, 1).u32[0];
                      v242.i32[0] = vdup_laneq_s32((int32x4_t)v268, 2).u32[0];
                      v592 = (float32x4_t)v362;
                      v594 = v269;
                    }
                    else
                    {
                      v270 = vnegq_f32(v570);
                      v270.i32[3] = 0;
                      v570 = v270;
                      v271 = (int8x16_t)vmlaq_n_f32(v575, v268, *(float *)v588.i32);
                      v271.i64[1] = vextq_s8(v271, v271, 8uLL).u32[0];
                      v592 = (float32x4_t)v271;
                      v594 = v181;
                      v582 = v269;
                    }
                    v363 = vsubq_f32(v577, v592);
                    v364 = vmulq_f32(v570, v363);
                    v364.i64[0] = vpaddq_f32(v364, v364).u64[0];
                    v365 = vmulq_f32(v363, v572);
                    v365.i64[0] = vpaddq_f32(v365, v365).u64[0];
                    v366 = vmulq_f32(v594, v363);
                    v366.i64[0] = vpaddq_f32(v366, v366).u64[0];
                    v367 = vpadd_f32(*(float32x2_t *)v366.f32, *(float32x2_t *)v366.f32).u32[0];
                    *(int8x8_t *)v366.f32 = vext_s8((int8x8_t)vpadd_f32(*(float32x2_t *)v364.f32, *(float32x2_t *)v364.f32), (int8x8_t)vpadd_f32(*(float32x2_t *)v365.f32, *(float32x2_t *)v365.f32), 4uLL);
                    v366.i64[1] = v367;
                    *(int8x8_t *)v364.f32 = vext_s8((int8x8_t)vdup_lane_s32(*(int32x2_t *)v570.f32, 0), *(int8x8_t *)v184.i8, 4uLL);
                    v364.i64[1] = v240.u32[0];
                    *(int8x8_t *)v365.f32 = vext_s8(*(int8x8_t *)v570.f32, v245, 4uLL);
                    v365.i64[1] = v241.u32[0];
                    *(int8x8_t *)v368.f32 = vext_s8((int8x8_t)vdup_laneq_s32((int32x4_t)v570, 2), (int8x8_t)v183.u32[0], 4uLL);
                    v368.i64[1] = v242.u32[0];
                    v369 = vmulq_n_f32(v364, v568.f32[0]);
                    v369.i32[3] = 0;
                    v370 = vmulq_lane_f32(v365, *(float32x2_t *)v568.f32, 1);
                    v370.i32[3] = 0;
                    v371 = vmulq_laneq_f32(v368, v568, 2);
                    v371.i32[3] = 0;
                    v372 = vaddq_f32(v369, v370);
                    v373 = vmulq_n_f32(v364, v165.f32[0]);
                    v373.i32[3] = 0;
                    v374 = vmulq_lane_f32(v365, *(float32x2_t *)v165.f32, 1);
                    v374.i32[3] = 0;
                    v375 = vaddq_f32(v371, v372);
                    v376 = vmulq_laneq_f32(v368, v165, 2);
                    v376.i32[3] = 0;
                    v377 = vmulq_n_f32(v364, v552.f32[0]);
                    v377.i32[3] = 0;
                    v378 = vmulq_lane_f32(v365, *(float32x2_t *)v552.f32, 1);
                    v378.i32[3] = 0;
                    v379 = vmulq_laneq_f32(v368, v552, 2);
                    v379.i32[3] = 0;
                    v598 = v375;
                    v599 = vaddq_f32(v376, vaddq_f32(v373, v374));
                    v600 = vaddq_f32(v379, vaddq_f32(v377, v378));
                    v601 = (int32x4_t)v366;
                    v380 = vmulq_f32(v570, v582);
                    v380.i64[0] = vpaddq_f32(v380, v380).u64[0];
                    v381 = vmulq_f32(v582, v572);
                    v381.i64[0] = vpaddq_f32(v381, v381).u64[0];
                    v382 = vmulq_f32(v594, v582);
                    v382.i64[0] = vpaddq_f32(v382, v382).u64[0];
                    *(int8x8_t *)v380.f32 = vext_s8((int8x8_t)vpadd_f32(*(float32x2_t *)v380.f32, *(float32x2_t *)v380.f32), (int8x8_t)vpadd_f32(*(float32x2_t *)v381.f32, *(float32x2_t *)v381.f32), 4uLL);
                    v380.i64[1] = vpadd_f32(*(float32x2_t *)v382.f32, *(float32x2_t *)v382.f32).u32[0];
                    v604 = v380;
                    physx::Gu::getIncidentPolygon(&v635, &v611, &v598, v380, v574);
                    physx::Gu::calculateContacts(&v629, (int8x8_t *)&v630, &v635, (int32x4_t *)&v611, &v604, a7, &v618, &v628, v383, v384, v385, v386, v387, v388, v389);
                    v582 = v570;
                    goto LABEL_85;
                  case 4:
                    v272 = vnegq_f32(v572);
                    v273 = v272;
                    v273.i32[3] = 0;
                    if (v550 <= 0.0)
                    {
                      v272 = v572;
                      v594 = v273;
                      v273 = v572;
                    }
                    else
                    {
                      v274 = vnegq_f32(v570);
                      v274.i32[3] = 0;
                      v570 = v274;
                      v594 = v572;
                    }
                    v390 = vmlaq_lane_f32(v575, v272, v586, 1);
                    v390.i64[1] = vextq_s8((int8x16_t)v390, (int8x16_t)v390, 8uLL).u32[0];
                    v576 = v390;
                    v391 = vsubq_f32(v577, v390);
                    v392 = vmulq_f32(v391, v181);
                    v392.i64[0] = vpaddq_f32(v392, v392).u64[0];
                    v393 = vmulq_f32(v570, v391);
                    v393.i64[0] = vpaddq_f32(v393, v393).u64[0];
                    v394 = vmulq_f32(v594, v391);
                    v394.i64[0] = vpaddq_f32(v394, v394).u64[0];
                    v395 = vpadd_f32(*(float32x2_t *)v394.f32, *(float32x2_t *)v394.f32).u32[0];
                    *(int8x8_t *)v394.f32 = vext_s8((int8x8_t)vpadd_f32(*(float32x2_t *)v392.f32, *(float32x2_t *)v392.f32), (int8x8_t)vpadd_f32(*(float32x2_t *)v393.f32, *(float32x2_t *)v393.f32), 4uLL);
                    v394.i64[1] = v395;
                    *(int8x8_t *)v393.f32 = vext_s8(v240, *(int8x8_t *)v570.f32, 4uLL);
                    v393.i64[1] = vdup_lane_s32(*(int32x2_t *)v594.f32, 0).u32[0];
                    *(int8x8_t *)v392.f32 = vext_s8(v241, (int8x8_t)vdup_lane_s32(*(int32x2_t *)v570.f32, 1), 4uLL);
                    v392.i64[1] = vdup_lane_s32(*(int32x2_t *)v594.f32, 1).u32[0];
                    *(int8x8_t *)v396.f32 = vext_s8(v242, (int8x8_t)*(_OWORD *)&vextq_s8((int8x16_t)v570, (int8x16_t)v570, 8uLL), 4uLL);
                    v396.i64[1] = vdup_laneq_s32((int32x4_t)v594, 2).u32[0];
                    v397 = vmulq_n_f32(v393, v568.f32[0]);
                    v397.i32[3] = 0;
                    v398 = vmulq_lane_f32(v392, *(float32x2_t *)v568.f32, 1);
                    v398.i32[3] = 0;
                    v399 = vmulq_laneq_f32(v396, v568, 2);
                    v399.i32[3] = 0;
                    v400 = vaddq_f32(v397, v398);
                    v401 = vmulq_n_f32(v393, v165.f32[0]);
                    v401.i32[3] = 0;
                    v402 = vmulq_lane_f32(v392, *(float32x2_t *)v165.f32, 1);
                    v402.i32[3] = 0;
                    v403 = vaddq_f32(v399, v400);
                    v404 = vmulq_laneq_f32(v396, v165, 2);
                    v404.i32[3] = 0;
                    v405 = vmulq_n_f32(v393, v552.f32[0]);
                    v405.i32[3] = 0;
                    v406 = vmulq_lane_f32(v392, *(float32x2_t *)v552.f32, 1);
                    v406.i32[3] = 0;
                    v407 = vmulq_laneq_f32(v396, v552, 2);
                    v407.i32[3] = 0;
                    v598 = v403;
                    v599 = vaddq_f32(v404, vaddq_f32(v401, v402));
                    v600 = vaddq_f32(v407, vaddq_f32(v405, v406));
                    v601 = (int32x4_t)v394;
                    v408 = vmulq_f32(v273, v181);
                    v408.i64[0] = vpaddq_f32(v408, v408).u64[0];
                    v409 = vmulq_f32(v570, v273);
                    v409.i64[0] = vpaddq_f32(v409, v409).u64[0];
                    v410 = vmulq_f32(v594, v273);
                    v410.i64[0] = vpaddq_f32(v410, v410).u64[0];
                    v405.i32[0] = vpadd_f32(*(float32x2_t *)v410.f32, *(float32x2_t *)v410.f32).u32[0];
                    *(int8x8_t *)v410.f32 = vext_s8((int8x8_t)vpadd_f32(*(float32x2_t *)v408.f32, *(float32x2_t *)v408.f32), (int8x8_t)vpadd_f32(*(float32x2_t *)v409.f32, *(float32x2_t *)v409.f32), 4uLL);
                    v410.i64[1] = v405.u32[0];
                    v604 = v410;
                    physx::Gu::getIncidentPolygon(&v635, &v611, &v598, v410, v574);
                    physx::Gu::calculateContacts((int8x8_t *)&v595, &v629, &v635, (int32x4_t *)&v611, &v604, a7, &v618, &v628, v411, v412, v413, v414, v415, v416, v417);
                    v572 = v570;
                    v592 = v576;
                    goto LABEL_85;
                  case 5:
                    if (v236.f32[0] <= 0.0)
                    {
                      v184 = (int8x16_t)vnegq_f32(v572);
                      v418 = (float32x4_t)v184;
                      v418.i32[3] = 0;
                      v572 = v418;
                      v419 = vnegq_f32(v570);
                      v419.i32[3] = 0;
                      v594 = v419;
                      v420 = (int8x16_t)vmlaq_laneq_f32(v575, v570, v580, 2);
                      v420.i64[1] = vextq_s8(v420, v420, 8uLL).u32[0];
                      v245 = (int8x8_t)vdup_lane_s32(*(int32x2_t *)v184.i8, 1);
                      v183 = (int8x8_t)vextq_s8(v184, v184, 8uLL).u64[0];
                      v592 = (float32x4_t)v420;
                    }
                    else
                    {
                      v275 = (int8x16_t)vmlsq_laneq_f32(v575, v186, v580, 2);
                      v594 = v186;
                      v276 = vnegq_f32(v186);
                      v276.i32[3] = 0;
                      v275.i64[1] = vextq_s8(v275, v275, 8uLL).u32[0];
                      v592 = (float32x4_t)v275;
                      v570 = v276;
                    }
                    v421 = vsubq_f32(v577, v592);
                    v422 = vmulq_f32(v421, v181);
                    v422.i64[0] = vpaddq_f32(v422, v422).u64[0];
                    v423 = vmulq_f32(v572, v421);
                    v423.i64[0] = vpaddq_f32(v423, v423).u64[0];
                    v424 = vmulq_f32(v594, v421);
                    v424.i64[0] = vpaddq_f32(v424, v424).u64[0];
                    v425 = vpadd_f32(*(float32x2_t *)v424.f32, *(float32x2_t *)v424.f32).u32[0];
                    *(int8x8_t *)v424.f32 = vext_s8((int8x8_t)vpadd_f32(*(float32x2_t *)v422.f32, *(float32x2_t *)v422.f32), (int8x8_t)vpadd_f32(*(float32x2_t *)v423.f32, *(float32x2_t *)v423.f32), 4uLL);
                    v424.i64[1] = v425;
                    *(int8x8_t *)v423.f32 = vext_s8(v240, *(int8x8_t *)v184.i8, 4uLL);
                    v423.i64[1] = vdup_lane_s32(*(int32x2_t *)v594.f32, 0).u32[0];
                    *(int8x8_t *)v426.f32 = vext_s8(v241, v245, 4uLL);
                    v426.i64[1] = vdup_lane_s32(*(int32x2_t *)v594.f32, 1).u32[0];
                    *(int8x8_t *)v427.f32 = vext_s8(v242, v183, 4uLL);
                    v427.i64[1] = vdup_laneq_s32((int32x4_t)v594, 2).u32[0];
                    v428 = vmulq_n_f32(v423, v568.f32[0]);
                    v428.i32[3] = 0;
                    v429 = vmulq_lane_f32(v426, *(float32x2_t *)v568.f32, 1);
                    v429.i32[3] = 0;
                    v430 = vmulq_laneq_f32(v427, v568, 2);
                    v430.i32[3] = 0;
                    v431 = vaddq_f32(v428, v429);
                    v432 = vmulq_n_f32(v423, v165.f32[0]);
                    v432.i32[3] = 0;
                    v433 = vmulq_lane_f32(v426, *(float32x2_t *)v165.f32, 1);
                    v433.i32[3] = 0;
                    v434 = vaddq_f32(v430, v431);
                    v435 = vmulq_laneq_f32(v427, v165, 2);
                    v435.i32[3] = 0;
                    v436 = vmulq_n_f32(v423, v552.f32[0]);
                    v436.i32[3] = 0;
                    v437 = vmulq_lane_f32(v426, *(float32x2_t *)v552.f32, 1);
                    v437.i32[3] = 0;
                    v438 = vmulq_laneq_f32(v427, v552, 2);
                    v438.i32[3] = 0;
                    v598 = v434;
                    v599 = vaddq_f32(v435, vaddq_f32(v432, v433));
                    v600 = vaddq_f32(v438, vaddq_f32(v436, v437));
                    v601 = (int32x4_t)v424;
                    v439 = vmulq_f32(v570, v181);
                    v439.i64[0] = vpaddq_f32(v439, v439).u64[0];
                    v440 = vmulq_f32(v572, v570);
                    v440.i64[0] = vpaddq_f32(v440, v440).u64[0];
                    v441 = vmulq_f32(v594, v570);
                    v441.i64[0] = vpaddq_f32(v441, v441).u64[0];
                    *(int8x8_t *)v439.f32 = vext_s8((int8x8_t)vpadd_f32(*(float32x2_t *)v439.f32, *(float32x2_t *)v439.f32), (int8x8_t)vpadd_f32(*(float32x2_t *)v440.f32, *(float32x2_t *)v440.f32), 4uLL);
                    v439.i64[1] = vpadd_f32(*(float32x2_t *)v441.f32, *(float32x2_t *)v441.f32).u32[0];
                    v604 = v439;
                    physx::Gu::getIncidentPolygon(&v635, &v611, &v598, v439, v574);
                    physx::Gu::calculateContacts((int8x8_t *)&v595, (int8x8_t *)&v630, &v635, (int32x4_t *)&v611, &v604, a7, &v618, &v628, v442, v443, v444, v445, v446, v447, v448);
LABEL_85:
                    v449 = v618;
                    if (v618)
                    {
                      v450 = (_OWORD *)(a7 + 16);
                      do
                      {
                        v451 = *(v450 - 1);
                        *(v450 - 1) = *v450;
                        *v450 = v451;
                        v450 += 3;
                        --v449;
                      }
                      while (v449);
                    }
LABEL_88:
                    v452 = v618;
                    if (v618)
                    {
                      v453 = 0;
                      v454 = vsubq_f32(v592, v622);
                      v455 = vmulq_f32(v619, v454);
                      v455.i64[0] = vpaddq_f32(v455, v455).u64[0];
                      v456 = vmulq_f32(v454, v620);
                      v456.i64[0] = vpaddq_f32(v456, v456).u64[0];
                      v457 = vmulq_f32(v454, v621);
                      v457.i64[0] = vpaddq_f32(v457, v457).u64[0];
                      v458 = vpadd_f32(*(float32x2_t *)v457.f32, *(float32x2_t *)v457.f32).u32[0];
                      *(int8x8_t *)v459.f32 = vext_s8((int8x8_t)vpadd_f32(*(float32x2_t *)v455.f32, *(float32x2_t *)v455.f32), (int8x8_t)vpadd_f32(*(float32x2_t *)v456.f32, *(float32x2_t *)v456.f32), 4uLL);
                      v459.i64[1] = v458;
                      *(int8x8_t *)v460.f32 = vext_s8((int8x8_t)vdup_lane_s32(*(int32x2_t *)v619.f32, 0), *(int8x8_t *)v620.f32, 4uLL);
                      v460.i64[1] = vdup_lane_s32(*(int32x2_t *)v621.f32, 0).u32[0];
                      *(int8x8_t *)v461.f32 = vext_s8(*(int8x8_t *)v619.f32, (int8x8_t)vdup_lane_s32(*(int32x2_t *)v620.f32, 1), 4uLL);
                      v461.i64[1] = vdup_lane_s32(*(int32x2_t *)v621.f32, 1).u32[0];
                      v585 = v619;
                      v587 = v620;
                      v590 = v621;
                      *(int8x8_t *)v456.f32 = vext_s8((int8x8_t)vdup_laneq_s32((int32x4_t)v619, 2), (int8x8_t)*(_OWORD *)&vextq_s8((int8x16_t)v587, (int8x16_t)v587, 8uLL), 4uLL);
                      v456.i64[1] = vdup_laneq_s32((int32x4_t)v621, 2).u32[0];
                      v462 = vmulq_n_f32(v460, v582.f32[0]);
                      v462.i32[3] = 0;
                      v463 = vmulq_lane_f32(v461, *(float32x2_t *)v582.f32, 1);
                      v463.i32[3] = 0;
                      v464 = vmulq_laneq_f32(v456, v582, 2);
                      v464.i32[3] = 0;
                      v465 = vaddq_f32(v464, vaddq_f32(v462, v463));
                      v466 = vmulq_n_f32(v460, v572.f32[0]);
                      v466.i32[3] = 0;
                      v467 = vmulq_lane_f32(v461, *(float32x2_t *)v572.f32, 1);
                      v467.i32[3] = 0;
                      v468 = vmulq_laneq_f32(v456, v572, 2);
                      v468.i32[3] = 0;
                      v469 = vaddq_f32(v466, v467);
                      v470 = vmulq_n_f32(v460, v594.f32[0]);
                      v470.i32[3] = 0;
                      v471 = vmulq_lane_f32(v461, *(float32x2_t *)v594.f32, 1);
                      v471.i32[3] = 0;
                      v472 = vmulq_laneq_f32(v456, v594, 2);
                      v472.i32[3] = 0;
                      v473 = vsubq_f32(v592, v577);
                      v474 = vmulq_f32(v473, v568);
                      v474.i64[0] = vpaddq_f32(v474, v474).u64[0];
                      v475 = vmulq_f32(v473, v566);
                      v475.i64[0] = vpaddq_f32(v475, v475).u64[0];
                      v476 = vmulq_f32(v473, v552);
                      v476.i64[0] = vpaddq_f32(v476, v476).u64[0];
                      v477 = vpadd_f32(*(float32x2_t *)v476.f32, *(float32x2_t *)v476.f32).u32[0];
                      *(int8x8_t *)v478.f32 = vext_s8((int8x8_t)vpadd_f32(*(float32x2_t *)v474.f32, *(float32x2_t *)v474.f32), (int8x8_t)vpadd_f32(*(float32x2_t *)v475.f32, *(float32x2_t *)v475.f32), 4uLL);
                      v478.i64[1] = v477;
                      v479 = vaddq_f32(v468, v469);
                      *(int8x8_t *)v468.f32 = vext_s8((int8x8_t)vdup_lane_s32(*(int32x2_t *)v568.f32, 0), *(int8x8_t *)v566.f32, 4uLL);
                      v468.i64[1] = v558;
                      *(int8x8_t *)v475.f32 = vext_s8(*(int8x8_t *)v568.f32, (int8x8_t)vdup_lane_s32(*(int32x2_t *)v566.f32, 1), 4uLL);
                      v475.i64[1] = v560;
                      *(int8x8_t *)v480.f32 = vext_s8((int8x8_t)vdup_laneq_s32((int32x4_t)v568, 2), (int8x8_t)*(_OWORD *)&vextq_s8((int8x16_t)v566, (int8x16_t)v566, 8uLL), 4uLL);
                      v480.i64[1] = v562;
                      v481 = vaddq_f32(v472, vaddq_f32(v470, v471));
                      v482 = vaddq_f32(vmulq_laneq_f32(v480, v582, 2), vaddq_f32(vmulq_n_f32(v468, v582.f32[0]), vmulq_lane_f32(v475, *(float32x2_t *)v582.f32, 1)));
                      v483 = vaddq_f32(vmulq_laneq_f32(v480, v572, 2), vaddq_f32(vmulq_n_f32(v468, v572.f32[0]), vmulq_lane_f32(v475, *(float32x2_t *)v572.f32, 1)));
                      v484 = vaddq_f32(vmulq_laneq_f32(v480, v594, 2), vaddq_f32(vmulq_n_f32(v468, v594.f32[0]), vmulq_lane_f32(v475, *(float32x2_t *)v594.f32, 1)));
                      v485 = vaddq_f32(vmulq_laneq_f32(v481, *(float32x4_t *)(a7 + 32), 2), vaddq_f32(vmulq_n_f32(v465, COERCE_FLOAT(*(_OWORD *)(a7 + 32))), vmulq_lane_f32(v479, *(float32x2_t *)(a7 + 32), 1)));
                      v486 = 48 * v618;
                      do
                      {
                        v487 = (float32x4_t *)(a7 + v453);
                        v488 = *(float32x4_t *)(a7 + v453);
                        v489 = *(float32x4_t *)(a7 + v453 + 16);
                        v490 = vmulq_n_f32(v482, v488.f32[0]);
                        v490.i32[3] = 0;
                        v491 = vmulq_lane_f32(v483, *(float32x2_t *)v488.f32, 1);
                        v491.i32[3] = 0;
                        v492 = vmulq_laneq_f32(v484, v488, 2);
                        v492.i32[3] = 0;
                        v493 = vaddq_f32(v492, vaddq_f32(v490, v491));
                        v494 = vmulq_n_f32(v465, v489.f32[0]);
                        v494.i32[3] = 0;
                        v495 = vmulq_lane_f32(v479, *(float32x2_t *)v489.f32, 1);
                        v495.i32[3] = 0;
                        v496 = vmulq_laneq_f32(v481, v489, 2);
                        v496.i32[3] = 0;
                        *v487 = vaddq_f32(v493, v478);
                        v487[1] = vaddq_f32(vaddq_f32(v496, vaddq_f32(v494, v495)), v459);
                        v497 = v485;
                        v497.i32[3] = *(_DWORD *)(a7 + v453 + 44);
                        v487[2] = v497;
                        v453 += 48;
                      }
                      while (v486 != v453);
                      physx::Gu::PersistentContactManifold::addBatchManifoldContacts(_X20, (int32x4_t *)a7, v452, v554);
                      v498 = *(float32x4_t *)(*(_QWORD *)(_X20 + 80) + 32);
                      v499 = vmulq_n_f32(v585, v498.f32[0]);
                      v499.i32[3] = 0;
                      v500 = vmulq_lane_f32(v587, *(float32x2_t *)v498.f32, 1);
                      v500.i32[3] = 0;
                      v501 = vmulq_laneq_f32(v590, v498, 2);
                      v501.i32[3] = 0;
                      v502 = vaddq_f32(v501, vaddq_f32(v499, v500));
                      v503 = vmulq_f32(v502, v502);
                      v503.i64[0] = vpaddq_f32(v503, v503).u64[0];
                      v504 = vpadd_f32(*(float32x2_t *)v503.f32, *(float32x2_t *)v503.f32);
                      v505 = vrsqrte_f32(v504);
                      v506 = 4;
                      do
                      {
                        v505 = vmul_f32(v505, vrsqrts_f32(vmul_f32(v505, v505), v504));
                        --v506;
                      }
                      while (v506);
                      v507 = vmul_f32(v504, (float32x2_t)vbsl_s8((int8x8_t)vdup_lane_s32(vceqz_f32(v504), 0), v564, (int8x8_t)v505));
                      v508 = vrecpe_f32(v507);
                      v509 = 4;
                      do
                      {
                        v508 = vmul_f32(v508, vrecps_f32(v507, v508));
                        --v509;
                      }
                      while (v509);
                      v510 = vmulq_n_f32(v502, v508.f32[0]);
                      v510.i32[3] = 0;
                      v635 = v510;
                      physx::Gu::PersistentContactManifold::addManifoldContactsToContactBuffer(_X20, a7, &v635, &v619);
                      return 1;
                    }
                    v617 = v574;
                    v612 = 0.15 * v60.f32[0];
                    v613 = 0.05 * v60.f32[0];
                    v614 = 0.05 * v60.f32[0];
                    v610 = v580;
                    v605 = 0.15 * v573;
                    v606 = 0.05 * v573;
                    *(_BYTE *)(_X20 + 66) = 0;
                    v607 = 0.05 * v573;
                    v511 = v626;
                    v637[0] = v623;
                    v638[0] = v625;
                    v512 = (float32x2x2_t)vzip1q_s32(v623, v625);
                    v640.val[0] = (float32x2_t)vzip2q_s32(v623, v625).u64[0];
                    v513 = vzip1q_s32(v624, (int32x4_t)0);
                    v640.val[1] = (float32x2_t)vzip2q_s32(v624, (int32x4_t)0).u64[0];
                    v615 = 3;
                    v616 = 0;
                    v611 = 0uLL;
                    v608 = 3;
                    v609 = 0;
                    v604 = 0uLL;
                    v635.i64[0] = (uint64_t)off_24ED91430;
                    v635.i64[1] = (uint64_t)&v611;
                    v636 = &v623;
                    v514 = (float *)v637;
                    vst2_f32(v514, v512);
                    v515 = (float *)v638;
                    v516 = vzip2q_s32((int32x4_t)v512, v513);
                    v638[1] = v511;
                    v637[1] = v516;
                    vst2_f32(v515, v640);
                    v603[1] = (int8x8_t)&v604;
                    v603[0] = (int8x8_t)off_24ED913D0;
                    v634 = 0;
                    v631 = 0u;
                    v632 = 0u;
                    v633 = 0u;
                    v517 = physx::Gu::gjkPenetration<physx::Gu::RelativeConvex<physx::Gu::BoxV>,physx::Gu::LocalConvex<physx::Gu::BoxV>>(&v635, (uint64_t)v603, &v626, (uint64_t *)&v628, 1, (_BYTE *)(_X20 + 67), (_BYTE *)(_X20 + 71), (_BYTE *)(_X20 + 66), *(double *)v516.i64, *(double *)v511.i64, 0, (uint64_t)&v631);
                    if (v517 == 5)
                    {
                      v518 = v626;
                      v600 = (float32x4_t)v623;
                      v602[0] = v625;
                      v519 = (float32x2x2_t)vzip1q_s32(v623, v625);
                      v641.val[0] = (float32x2_t)vzip2q_s32(v623, v625).u64[0];
                      v520 = vzip1q_s32(v624, (int32x4_t)0);
                      v641.val[1] = (float32x2_t)vzip2q_s32(v624, (int32x4_t)0).u64[0];
                      v598.i64[1] = (uint64_t)&v611;
                      v598.i64[0] = (uint64_t)off_24ED91430;
                      v599.i64[0] = (uint64_t)&v623;
                      v521 = &v600;
                      v522 = (float *)v602;
                      vst2_f32(v521->f32, v519);
                      v602[1] = v518;
                      vst2_f32(v522, v641);
                      v601 = vzip2q_s32((int32x4_t)v519, v520);
                      *((_QWORD *)&v597 + 1) = &v604;
                      *(_QWORD *)&v597 = off_24ED913D0;
                      v517 = physx::Gu::epaPenetration((uint64_t)&v598);
                    }
                    if (v517 == 5 || v517 == 2)
                    {
                      v630 = vmul_f32(v555, (float32x2_t)vdup_n_s32(0x3D4CCCCDu));
                      v523 = vsubq_f32(v631, v626);
                      v524 = vmulq_f32((float32x4_t)v623, v523);
                      v525 = vmulq_f32(v523, (float32x4_t)v624);
                      v526 = vmulq_f32(v523, (float32x4_t)v625);
                      v527 = (float32x2_t)vpaddq_f32(v524, v524).u64[0];
                      v524.i64[0] = vpaddq_f32(v525, v525).u64[0];
                      v526.i64[0] = vpaddq_f32(v526, v526).u64[0];
                      *(int8x8_t *)v528.f32 = vext_s8((int8x8_t)vpadd_f32(v527, v527), (int8x8_t)vpadd_f32(*(float32x2_t *)v524.f32, *(float32x2_t *)v524.f32), 4uLL);
                      v528.i64[1] = vpadd_f32(*(float32x2_t *)v526.f32, *(float32x2_t *)v526.f32).u32[0];
                      v597 = v632;
                      v598 = v528;
                      v529 = (float32x4_t)v633;
                      v529.i32[3] = HIDWORD(v634);
                      v596 = (int32x4_t)v529;
                      physx::Gu::PersistentContactManifold::addManifoldPoint(_X20, &v598, &v597, &v596, &v630);
                      v530 = v627[0];
                      v530.i32[3] = 0;
                      v531 = (float32x2_t)vdupq_laneq_s32((int32x4_t)v627[0], 3).u64[0];
                      v532 = vmulq_n_f32((float32x4_t)v633, vmla_f32((float32x2_t)0xBF000000BF000000, v531, v531).f32[0]);
                      v532.i32[3] = 0;
                      v533 = (float32x2_t)vextq_s8((int8x16_t)v530, (int8x16_t)v530, 8uLL).u64[0];
                      v534 = (float32x2_t)vextq_s8(v633, v633, 8uLL).u64[0];
                      v535 = (int8x8_t)vmls_f32(vmul_f32(*(float32x2_t *)v627[0].f32, (float32x2_t)vext_s8(*(int8x8_t *)v633.i8, (int8x8_t)v534, 4uLL)), (float32x2_t)vext_s8(*(int8x8_t *)v627[0].f32, (int8x8_t)v533, 4uLL), *(float32x2_t *)v633.i8);
                      *(int8x8_t *)v536.f32 = vext_s8(v535, (int8x8_t)vmls_f32(vmul_f32(v533, *(float32x2_t *)v633.i8), *(float32x2_t *)v627[0].f32, v534), 4uLL);
                      v536.i64[1] = v535.u32[0];
                      v537 = vmlaq_laneq_f32(v532, v536, v627[0], 3);
                      v537.i64[1] = vextq_s8((int8x16_t)v537, (int8x16_t)v537, 8uLL).u32[0];
                      v538 = vmulq_f32(v530, (float32x4_t)v633);
                      v538.i64[0] = vpaddq_f32(v538, v538).u64[0];
                      v539 = vmlaq_n_f32(v537, v530, vpadd_f32(*(float32x2_t *)v538.f32, *(float32x2_t *)v538.f32).f32[0]);
                      v540 = vaddq_f32(v539, v539);
                      v540.i32[3] = 0;
                      v541 = vmulq_f32(v540, v540);
                      v541.i64[0] = vpaddq_f32(v541, v541).u64[0];
                      v542 = vpadd_f32(*(float32x2_t *)v541.f32, *(float32x2_t *)v541.f32);
                      v543 = vrsqrte_f32(v542);
                      v544 = 4;
                      do
                      {
                        v543 = vmul_f32(v543, vrsqrts_f32(vmul_f32(v543, v543), v542));
                        --v544;
                      }
                      while (v544);
                      v545 = vmul_f32(v542, (float32x2_t)vbsl_s8((int8x8_t)vdup_lane_s32(vceqz_f32(v542), 0), v564, (int8x8_t)v543));
                      v546 = vrecpe_f32(v545);
                      v547 = 4;
                      do
                      {
                        v546 = vmul_f32(v546, vrecps_f32(v545, v546));
                        --v547;
                      }
                      while (v547);
                      v548 = vmulq_n_f32(v540, v546.f32[0]);
                      v548.i32[3] = 0;
                      v595 = v548;
                      physx::Gu::PersistentContactManifold::addManifoldContactsToContactBuffer(_X20, a7, &v595, v627, (uint64_t *)&v628);
                    }
                    return v517 == 2 || v517 == 5;
                  default:
                    return 0;
                }
              }
            }
          }
        }
      }
    }
    return 0;
  }
  if (!(_DWORD)v65)
    return 0;
  v121 = *(_QWORD *)(_X20 + 80);
  v122 = *(int8x16_t *)(v121 + 32);
  v123 = (float32x4_t)v122;
  if ((_DWORD)v65 != 1)
  {
    v124 = v65 - 1;
    v125 = (float32x4_t *)(v121 + 80);
    v123 = (float32x4_t)v122;
    do
    {
      v126 = *v125;
      v125 += 3;
      v123 = vaddq_f32(v123, v126);
      --v124;
    }
    while (v124);
  }
  v123.i32[3] = 0;
  v127 = vmulq_f32(v123, v123);
  v127.i64[0] = vpaddq_f32(v127, v127).u64[0];
  v122.i32[3] = 0;
  v128 = v22;
  v128.i32[3] = 0;
  v129 = (float32x4_t)vbslq_s8((int8x16_t)vcltzq_s32(vshlq_n_s32(vdupq_lane_s32(vcgt_f32(vpadd_f32(*(float32x2_t *)v127.f32, *(float32x2_t *)v127.f32), (float32x2_t)0x3400000034000000), 0), 0x1FuLL)), (int8x16_t)v123, v122);
  v130 = vmulq_n_f32(v129, v28);
  v130.i32[3] = 0;
  v127.i64[0] = vextq_s8((int8x16_t)v128, (int8x16_t)v128, 8uLL).u64[0];
  v131 = (float32x2_t)vextq_s8((int8x16_t)v129, (int8x16_t)v129, 8uLL).u64[0];
  v132 = (int8x8_t)vmls_f32(vmul_f32(*(float32x2_t *)v22.f32, (float32x2_t)vext_s8(*(int8x8_t *)v129.f32, (int8x8_t)v131, 4uLL)), (float32x2_t)vext_s8(*(int8x8_t *)v22.f32, *(int8x8_t *)v127.f32, 4uLL), *(float32x2_t *)v129.f32);
  *(int8x8_t *)v127.f32 = vext_s8(v132, (int8x8_t)vmls_f32(vmul_f32(*(float32x2_t *)v127.f32, *(float32x2_t *)v129.f32), *(float32x2_t *)v22.f32, v131), 4uLL);
  v127.i64[1] = v132.u32[0];
  v133 = vmlaq_f32(v130, v571, v127);
  v133.i64[1] = vextq_s8((int8x16_t)v133, (int8x16_t)v133, 8uLL).u32[0];
  v134 = vmulq_f32(v128, v129);
  v134.i64[0] = vpaddq_f32(v134, v134).u64[0];
  v135 = vmlaq_n_f32(v133, v128, vpadd_f32(*(float32x2_t *)v134.f32, *(float32x2_t *)v134.f32).f32[0]);
  v136 = vaddq_f32(v135, v135);
  v136.i32[3] = 0;
  v137 = vmulq_f32(v136, v136);
  v137.i64[0] = vpaddq_f32(v137, v137).u64[0];
  v138 = vpadd_f32(*(float32x2_t *)v137.f32, *(float32x2_t *)v137.f32);
  v139 = vrsqrte_f32(v138);
  v140 = 4;
  do
  {
    v139 = vmul_f32(v139, vrsqrts_f32(vmul_f32(v139, v139), v138));
    --v140;
  }
  while (v140);
  v141 = vmul_f32(v138, (float32x2_t)vbsl_s8((int8x8_t)vdup_lane_s32(vceqz_f32(v138), 0), (int8x8_t)_D25, (int8x8_t)v139));
  v142 = vrecpe_f32(v141);
  v143 = 4;
  do
  {
    v142 = vmul_f32(v142, vrecps_f32(v141, v142));
    --v143;
  }
  while (v143);
  v144 = vmulq_n_f32(v136, v142.f32[0]);
  v144.i32[3] = 0;
  v635 = v144;
  physx::Gu::PersistentContactManifold::addManifoldContactsToContactBuffer(_X20, a7, &v635, v627, (uint64_t *)&v628);
  return 1;
}

uint64_t physx::Gu::pcmContactBoxConvex(uint64_t a1, uint64_t a2, float32x4_t *a3, float32x4_t *a4, uint64_t a5, uint64_t *a6, float32x4_t *a7)
{
  uint64_t v9;
  float32x2_t v15;
  float32x4_t v16;
  float32x4_t v17;
  float32x2_t v18;
  float32x4_t v19;
  float32x4_t v20;
  float32x4_t v21;
  float32x4_t v22;
  float32x4_t v23;
  float32x4_t v24;
  float32x2_t v25;
  float32x4_t v26;
  float32x4_t v27;
  float32x2_t v28;
  float32x2_t v29;
  int8x8_t v30;
  float32x4_t v31;
  float32x4_t v32;
  float32x4_t v33;
  float32x4_t v34;
  float32x4_t v35;
  float32x4_t v36;
  float32x4_t v37;
  float32x2_t v38;
  float32x4_t v39;
  float32x4_t v40;
  float32x4_t v41;
  float32x4_t v42;
  float32x2_t v43;
  float32x2_t v44;
  float32x2_t v45;
  float32x2_t v46;
  float32x4_t v48;
  float32x4_t v49;
  float32x4_t v50;
  float v51;
  float32x4_t v52;
  int32x4_t v53;
  float32x2_t v55;
  uint64_t v56;
  float32x2_t v57;
  float32x2_t v58;
  unsigned int v59;
  uint64_t v60;
  uint64_t v61;
  float32x4_t *v62;
  float32x4_t v63;
  float32x4_t v64;
  float32x4_t v65;
  float32x4_t v66;
  float32x4_t v67;
  float32x4_t v68;
  float32x4_t v69;
  float32x4_t v70;
  float32x2_t v71;
  float32x4_t v72;
  float32x4_t v73;
  float32x4_t v74;
  unsigned __int8 v75;
  float32x4_t *v76;
  float32x4_t v77;
  float32x4_t v78;
  float32x4_t v79;
  float32x2_t v80;
  float32x2_t v81;
  int v82;
  int32x2_t v83;
  float32x4_t v84;
  float32x4_t v85;
  float32x2_t v86;
  float32x4_t v87;
  int v88;
  float32x4_t v89;
  float32x4_t v90;
  float32x2_t v91;
  int8x16_t v92;
  const float *v93;
  float32x2_t v94;
  float32x2_t v95;
  float32x4_t v96;
  float32x2_t v97;
  float32x4_t v98;
  float32x2_t v99;
  float32x2_t v100;
  float32x2_t v101;
  float v102;
  float v103;
  float v104;
  float32x2_t v105;
  float32x2_t v106;
  float32x2_t v107;
  float32x2_t v108;
  float v109;
  float32x2_t v110;
  float32x2_t v111;
  float v112;
  int8x8_t v113;
  uint64_t v114;
  int8x16_t v115;
  float32x4_t v116;
  uint64_t v117;
  float32x4_t *v118;
  float32x4_t v119;
  float32x4_t v120;
  float32x4_t v121;
  float32x4_t v122;
  float32x4_t v123;
  float32x2_t v124;
  float32x2_t v125;
  int8x8_t v126;
  float32x4_t v127;
  float32x4_t v128;
  float32x4_t v129;
  float32x4_t v130;
  float32x4_t v131;
  float32x4_t v132;
  float32x2_t v133;
  float32x2_t v134;
  int v135;
  float32x2_t v136;
  float32x2_t v137;
  int v138;
  float32x4_t v139;
  _BOOL4 v142;
  float32x4_t v143;
  float32x4_t v144;
  float32x4_t v145;
  float32x4_t v146;
  int32x4_t v147;
  float32x4_t v148;
  int v149;
  float32x4_t v150;
  float32x4_t v151;
  float32x4_t v152;
  float32x4_t v153;
  float32x4_t v154;
  float32x4_t v155;
  float32x4_t v156;
  float32x2_t v157;
  float32x2_t v158;
  float32x2_t v159;
  float32x4_t v160;
  float32x2_t v161;
  float32x2_t v162;
  float32x2_t v163;
  float32x2_t v164;
  float32x2_t v165;
  float32x2_t v166;
  float32x2_t v167;
  float32x2_t v168;
  float32x2_t v169;
  float32x2_t v170;
  float32x4_t v171;
  float32x4_t v172;
  float32x4_t v173;
  float32x4_t v174;
  int8x8_t v175;
  float32x4_t v176;
  float32x4_t v177;
  float32x4_t v178;
  float32x4_t v179;
  float32x4_t v180;
  float32x4_t v181;
  float32x4_t v182;
  float32x4_t v183;
  float32x4_t v184;
  float32x4_t v185;
  float32x4_t v186;
  float32x4_t v187;
  float32x4_t v188;
  float32x4_t v189;
  float32x4_t v190;
  float32x4_t v191;
  float32x4_t v192;
  float32x4_t v193;
  float32x4_t v194;
  float32x4_t v195;
  float32x4_t v196;
  float32x4_t v197;
  float32x4_t v198;
  float32x4_t v199;
  float32x4_t v200;
  float32x4_t v201;
  float32x4_t v202;
  float32x4_t v203;
  float32x4_t v204;
  float32x4_t v205;
  uint64_t v206;
  float32x4_t v207;
  double v208;
  int8x8_t v209;
  float32x4_t v210;
  float32x2x2_t v211;
  int32x4_t v212;
  float *v213;
  float *v214;
  int32x4_t v215;
  int v216;
  double v217;
  float32x2_t v218;
  char v219;
  __int32 v220;
  float v221;
  float32x4_t v222;
  float32x4_t v223;
  float32x4_t v224;
  float32x4_t v225;
  __int32 v226;
  float32x4_t v227;
  float32x2_t v228;
  uint64_t (**v229)();
  float32x4_t *v230;
  float32x4_t v231;
  int32x4_t *v232;
  _OWORD v233[2];
  _OWORD v234[2];
  _QWORD v235[2];
  float v236;
  float v237;
  float v238;
  int v239;
  char v240;
  float32x4_t v241;
  int32x4_t v242;
  int32x4_t v243;
  int32x4_t v244;
  float32x4_t v245;
  float32x4_t v246[2];
  float32x4_t v247[2];
  float32x2_t v248;
  float32x4_t v249[4];
  uint64_t v250;
  float32x4_t v251;
  float32x2_t v252;
  float v253;
  int v254;
  char v255;
  __int128 v256;
  __int128 v257;
  __int128 v258;
  __int128 v259;
  __int128 v260;
  __int128 v261;
  uint64_t v262;
  uint64_t v263;
  uint64_t v264;
  char v265;
  uint64_t v266;
  float32x2x2_t v267;

  v266 = *MEMORY[0x24BDAC8D0];
  v9 = *a6;
  _X24 = *(_QWORD *)(a2 + 48);
  __asm { PRFM            #0, [X24] }
  v15 = (float32x2_t)vdup_lane_s32(*(int32x2_t *)a5, 0);
  v248 = v15;
  v16 = *(float32x4_t *)(a1 + 4);
  v17 = v16;
  v17.i32[2] = *(_DWORD *)(a1 + 12);
  v18 = (float32x2_t)vdup_laneq_s32((int32x4_t)v17, 2);
  v19 = v17;
  v19.i32[3] = 0;
  v20 = *(float32x4_t *)(a2 + 4);
  v21 = v20;
  v21.i32[3] = 0;
  v17.i64[0] = a3[1].i64[0];
  v17.i64[1] = a3[1].u32[2];
  v247[0] = *a3;
  v247[1] = v17;
  v22.i64[0] = a4[1].i64[0];
  v22.i64[1] = a4[1].u32[2];
  v246[0] = *a4;
  v246[1] = v22;
  v23 = vnegq_f32(v246[0]);
  v24 = v23;
  v24.i32[3] = 0;
  v25 = (float32x2_t)vdupq_laneq_s32((int32x4_t)v246[0], 3).u64[0];
  v26 = vsubq_f32(v17, v22);
  v27 = vmulq_n_f32(v26, vmla_f32((float32x2_t)0xBF000000BF000000, v25, v25).f32[0]);
  v27.i32[3] = 0;
  v28 = (float32x2_t)vextq_s8((int8x16_t)v24, (int8x16_t)v24, 8uLL).u64[0];
  v29 = (float32x2_t)vext_s8(*(int8x8_t *)v23.f32, (int8x8_t)v28, 4uLL);
  v30 = (int8x8_t)vmls_f32(vmul_f32(*(float32x2_t *)v23.f32, (float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v26, (int8x16_t)v26, 4uLL)), v29, *(float32x2_t *)v26.f32);
  *(int8x8_t *)v31.f32 = vext_s8(v30, (int8x8_t)vmls_f32(vmul_f32(v28, *(float32x2_t *)v26.f32), *(float32x2_t *)v23.f32, (float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v26, (int8x16_t)v26, 8uLL)), 4uLL);
  v31.i64[1] = v30.u32[0];
  v32 = vmlaq_laneq_f32(v27, v31, v246[0], 3);
  v32.i64[1] = vextq_s8((int8x16_t)v32, (int8x16_t)v32, 8uLL).u32[0];
  v33 = vmulq_f32(v24, v26);
  v33.i64[0] = vpaddq_f32(v33, v33).u64[0];
  v34 = vmlaq_n_f32(v32, v24, vpadd_f32(*(float32x2_t *)v33.f32, *(float32x2_t *)v33.f32).f32[0]);
  v35 = vaddq_f32(v34, v34);
  v35.i32[3] = 0;
  v36 = v247[0];
  v36.i32[3] = 0;
  v37 = vmulq_f32(v36, v24);
  v37.i64[0] = vpaddq_f32(v37, v37).u64[0];
  v38 = vsub_f32(vmul_f32((float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v247[0], (int8x16_t)v247[0], 8uLL), (float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v246[0], (int8x16_t)v246[0], 8uLL)), vpadd_f32(*(float32x2_t *)v37.f32, *(float32x2_t *)v37.f32));
  v39 = vmulq_laneq_f32(v36, v246[0], 3);
  v36.i64[0] = vextq_s8((int8x16_t)v36, (int8x16_t)v36, 8uLL).u64[0];
  *(float32x2_t *)v37.f32 = vmls_f32(vmul_f32((float32x2_t)vext_s8(*(int8x8_t *)v247[0].f32, *(int8x8_t *)v36.f32, 4uLL), *(float32x2_t *)v23.f32), v29, *(float32x2_t *)v247[0].f32);
  *(int8x8_t *)v40.f32 = vext_s8(*(int8x8_t *)v37.f32, (int8x8_t)vmls_f32(vmul_f32(*(float32x2_t *)v247[0].f32, v28), *(float32x2_t *)v23.f32, *(float32x2_t *)v36.f32), 4uLL);
  v40.i64[1] = v37.i64[0];
  v41 = vaddq_f32(vaddq_f32(vmulq_laneq_f32(v24, v247[0], 3), v39), v40);
  *(int32x2_t *)v40.f32 = vdup_lane_s32(*(int32x2_t *)v41.f32, 1);
  *(int32x2_t *)v39.f32 = vdup_laneq_s32((int32x4_t)v41, 2);
  v42 = vaddq_f32(v41, v41);
  *(int32x2_t *)v24.f32 = vdup_lane_s32(*(int32x2_t *)v42.f32, 1);
  *(int32x2_t *)v37.f32 = vdup_laneq_s32((int32x4_t)v42, 2);
  v43 = (float32x2_t)vdup_lane_s32((int32x2_t)vmul_f32(*(float32x2_t *)v41.f32, *(float32x2_t *)v42.f32), 0);
  *(float32x2_t *)v31.f32 = vmul_lane_f32(*(float32x2_t *)v40.f32, *(float32x2_t *)v42.f32, 1);
  v44 = vmul_laneq_f32(*(float32x2_t *)v39.f32, v42, 2);
  v45 = vmul_n_f32(*(float32x2_t *)v40.f32, v42.f32[0]);
  v46 = vmul_n_f32(*(float32x2_t *)v39.f32, v42.f32[0]);
  *(float32x2_t *)v23.f32 = vmul_lane_f32((float32x2_t)vdup_lane_s32(*(int32x2_t *)v42.f32, 0), v38, 1);
  *(float32x2_t *)v42.f32 = vmul_lane_f32(*(float32x2_t *)v39.f32, *(float32x2_t *)v42.f32, 1);
  *(float32x2_t *)v24.f32 = vmul_lane_f32(*(float32x2_t *)v24.f32, v38, 1);
  *(float32x2_t *)v39.f32 = vmul_lane_f32(*(float32x2_t *)v37.f32, v38, 1);
  __asm { FMOV            V24.2S, #1.0 }
  *(float32x2_t *)v37.f32 = vsub_f32(_D24, v43);
  *(int8x8_t *)v48.f32 = vext_s8((int8x8_t)vsub_f32(vsub_f32(_D24, *(float32x2_t *)v31.f32), v44), (int8x8_t)vadd_f32(v45, *(float32x2_t *)v39.f32), 4uLL);
  v48.i64[1] = vsub_f32(v46, *(float32x2_t *)v24.f32).u32[0];
  *(int8x8_t *)v49.f32 = vext_s8((int8x8_t)vsub_f32(v45, *(float32x2_t *)v39.f32), (int8x8_t)vsub_f32(*(float32x2_t *)v37.f32, v44), 4uLL);
  v49.i64[1] = vadd_f32(*(float32x2_t *)v42.f32, *(float32x2_t *)v23.f32).u32[0];
  v242 = (int32x4_t)v48;
  v243 = (int32x4_t)v49;
  *(int8x8_t *)v50.f32 = vext_s8((int8x8_t)vadd_f32(v46, *(float32x2_t *)v24.f32), (int8x8_t)vsub_f32(*(float32x2_t *)v42.f32, *(float32x2_t *)v23.f32), 4uLL);
  v50.i64[1] = vsub_f32(*(float32x2_t *)v37.f32, *(float32x2_t *)v31.f32).u32[0];
  v244 = (int32x4_t)v50;
  v245 = v35;
  v52.i64[0] = *(_QWORD *)(_X24 + 60);
  v51 = *(float *)(a5 + 8);
  v52.i64[1] = *(unsigned int *)(_X24 + 68);
  v53 = (int32x4_t)vmulq_f32(v21, v52);
  *(int32x2_t *)v37.f32 = vdup_laneq_s32(v53, 2);
  *(float32x2_t *)v53.i8 = vpmin_f32(*(float32x2_t *)v37.f32, *(float32x2_t *)v53.i8);
  v37.f32[0] = v51 * 0.05;
  __asm { FMOV            V17.2S, #0.25 }
  *(float32x2_t *)v16.f32 = vpmin_f32(v18, *(float32x2_t *)v16.f32);
  v55 = vpmin_f32(*(float32x2_t *)v16.f32, *(float32x2_t *)v16.f32);
  v16.f32[0] = v51 * 0.15;
  v228 = vmin_f32(vmin_f32(vmul_f32(vpmin_f32(*(float32x2_t *)v53.i8, *(float32x2_t *)v53.i8), _D17), (float32x2_t)vdup_lane_s32(*(int32x2_t *)v37.f32, 0)), vmin_f32(vmul_f32(v55, (float32x2_t)vdup_n_s32(0x3E19999Au)), (float32x2_t)vdup_lane_s32(*(int32x2_t *)v16.f32, 0)));
  v56 = *(unsigned __int8 *)(v9 + 64);
  if (*(_BYTE *)(v9 + 64))
  {
    v57 = vmul_f32(v228, (float32x2_t)vdup_n_s32(0x3F4CCCCDu));
    v58 = vmul_f32(v57, v57);
    v59 = v56 - 1;
    do
    {
      v60 = *(_QWORD *)(v9 + 80);
      v61 = v59;
      v62 = (float32x4_t *)(v60 + 48 * v59);
      v63 = v62[1];
      v64 = vmulq_n_f32(v48, COERCE_FLOAT(*v62));
      v64.i32[3] = 0;
      v65 = vmulq_lane_f32(v49, *(float32x2_t *)v62->f32, 1);
      v65.i32[3] = 0;
      v66 = vmulq_laneq_f32(v50, *v62, 2);
      v66.i32[3] = 0;
      v67 = vaddq_f32(v35, vaddq_f32(v66, vaddq_f32(v64, v65)));
      v68 = v62[2];
      v69 = v68;
      v69.i32[3] = 0;
      v70 = vmulq_f32(v69, vsubq_f32(v67, v63));
      v70.i64[0] = vpaddq_f32(v70, v70).u64[0];
      v71 = vpadd_f32(*(float32x2_t *)v70.f32, *(float32x2_t *)v70.f32);
      v72 = vmlsq_lane_f32(v67, v69, v71, 0);
      v72.i64[1] = vextq_s8((int8x16_t)v72, (int8x16_t)v72, 8uLL).u32[0];
      v73 = vsubq_f32(v63, v72);
      v74 = vmulq_f32(v73, v73);
      v74.i64[0] = vpaddq_f32(v74, v74).u64[0];
      if (vuzp1_s8((int8x8_t)vdup_lane_s16((int16x4_t)vcgt_f32(vpadd_f32(*(float32x2_t *)v74.f32, *(float32x2_t *)v74.f32), v58), 0), (int8x8_t)v58).u32[0] == -1)
      {
        v75 = *(_BYTE *)(v9 + 64) - 1;
        *(_BYTE *)(v9 + 64) = v75;
        v76 = (float32x4_t *)(v60 + 48 * v75);
        v77 = *v76;
        v78 = v76[2];
        v62[1] = v76[1];
        v62[2] = v78;
        *v62 = v77;
      }
      else
      {
        v68.i32[3] = v71.i32[1];
        v62[2] = v68;
      }
      --v59;
    }
    while (v61);
    v52.i64[0] = *(_QWORD *)(_X24 + 60);
    v52.i64[1] = *(unsigned int *)(_X24 + 68);
  }
  v41.i32[3] = v38.i32[1];
  v79 = vmulq_f32(v19, v19);
  v79.i64[0] = vpaddq_f32(v79, v79).u64[0];
  v80 = vpadd_f32(*(float32x2_t *)v79.f32, *(float32x2_t *)v79.f32);
  v81 = vrsqrte_f32(v80);
  v82 = 4;
  do
  {
    v81 = vmul_f32(v81, vrsqrts_f32(vmul_f32(v81, v81), v80));
    --v82;
  }
  while (v82);
  v83 = vdup_lane_s32(vceqz_f32(v80), 0);
  v84 = vmulq_f32(v21, v52);
  v85 = vmulq_f32(v84, v84);
  v87 = vpaddq_f32(v85, v85);
  v86 = vpadd_f32(*(float32x2_t *)v87.f32, *(float32x2_t *)v87.f32);
  *(float32x2_t *)v87.f32 = vrsqrte_f32(v86);
  v88 = 4;
  do
  {
    *(float32x2_t *)v87.f32 = vmul_f32(*(float32x2_t *)v87.f32, vrsqrts_f32(vmul_f32(*(float32x2_t *)v87.f32, *(float32x2_t *)v87.f32), v86));
    --v88;
  }
  while (v88);
  v89 = v247[0];
  v90 = v246[0];
  if (*(unsigned __int8 *)(v9 + 64) != (_DWORD)v56)
    goto LABEL_36;
  v91 = vmul_n_f32(v228, physx::Gu::invalidateThresholds[v56]);
  v92 = (int8x16_t)vabdq_f32(v35, *(float32x4_t *)(v9 + 16));
  *(float32x2_t *)v92.i8 = vpmax_f32((float32x2_t)*(_OWORD *)&vextq_s8(v92, v92, 8uLL), *(float32x2_t *)v92.i8);
  v93 = (const float *)((char *)&physx::Gu::invalidateQuatThresholds + 4 * v56);
  v94 = vld1_dup_f32(v93);
  v95 = vpmax_f32(*(float32x2_t *)v92.i8, *(float32x2_t *)v92.i8);
  v96 = vmulq_f32(v247[0], *(float32x4_t *)(v9 + 32));
  v96.i64[0] = vpaddq_f32(v96, v96).u64[0];
  v97 = vpadd_f32(*(float32x2_t *)v96.f32, *(float32x2_t *)v96.f32);
  v98 = vmulq_f32(v246[0], *(float32x4_t *)(v9 + 48));
  v98.i64[0] = vpaddq_f32(v98, v98).u64[0];
  v99 = vpadd_f32(*(float32x2_t *)v98.f32, *(float32x2_t *)v98.f32);
  if (vuzp1_s8((int8x8_t)vdup_lane_s16((int16x4_t)vorr_s8(vorr_s8((int8x8_t)vcgt_f32(v94, v97), (int8x8_t)vcgt_f32(v94, v99)), (int8x8_t)vcgt_f32(v95, v91)), 0), (int8x8_t)v80).u32[0] == -1)goto LABEL_36;
  v100 = vmul_f32(v80, (float32x2_t)vbsl_s8((int8x8_t)vcltz_s32(vshl_n_s32(v83, 0x1FuLL)), (int8x8_t)_D24, (int8x8_t)v81));
  v101 = (float32x2_t)vbsl_s8((int8x8_t)vdup_lane_s32(vceqz_f32(v86), 0), (int8x8_t)_D24, *(int8x8_t *)v87.f32);
  v102 = 0.0;
  v103 = 0.0;
  v226 = v55.i32[0];
  v227 = v19;
  v224 = v21;
  v225 = v20;
  v222 = v41;
  v223 = v35;
  if (v97.f32[0] < 1.0)
  {
    v104 = -1.0;
    if (v97.f32[0] >= -1.0)
      v104 = v97.f32[0];
    if (v104 > 1.0)
      v104 = 1.0;
    v221 = v51;
    v105 = _D24;
    v220 = v99.i32[0];
    v106 = v100;
    v103 = acosf(v104);
    v100 = v106;
    v102 = 0.0;
    v99.i32[0] = v220;
    v89 = v247[0];
    v90 = v246[0];
    v41 = v222;
    v35 = v223;
    v21 = v224;
    v20 = v225;
    _D24 = v105;
    v55.i32[0] = v226;
    v19 = v227;
    v51 = v221;
  }
  v107 = vmul_f32(v86, v101);
  v108 = vmul_n_f32(v100, v103);
  if (v99.f32[0] < 1.0)
  {
    v109 = -1.0;
    if (v99.f32[0] >= -1.0)
      v109 = v99.f32[0];
    if (v109 > 1.0)
      v109 = 1.0;
    v110 = v15;
    v111 = _D24;
    v112 = acosf(v109);
    v89 = v247[0];
    v90 = v246[0];
    v41 = v222;
    v35 = v223;
    v21 = v224;
    v20 = v225;
    _D24 = v111;
    v55.i32[0] = v226;
    v19 = v227;
    v15 = v110;
    v102 = v112;
  }
  v113 = (int8x8_t)vdup_lane_s16((int16x4_t)vorr_s8((int8x8_t)vcgt_f32(vmul_n_f32(v107, v102), v91), (int8x8_t)vcgt_f32(v108, v91)), 0);
  if (vuzp1_s8(v113, v113).u32[0] == -1)
  {
LABEL_36:
    *(float32x4_t *)v9 = v41;
    *(float32x4_t *)(v9 + 16) = v35;
    *(float32x4_t *)(v9 + 32) = v89;
    *(float32x4_t *)(v9 + 48) = v90;
    v142 = *(float *)(a2 + 4) == 1.0 && *(float *)(a2 + 8) == 1.0 && *(float *)(a2 + 12) == 1.0;
    v143 = *(float32x4_t *)(a2 + 16);
    v87.i32[0] = *(_DWORD *)(_X24 + 24);
    v144 = v87;
    v144.i32[1] = *(_DWORD *)(_X24 + 28);
    v145 = v144;
    v145.i32[2] = *(_DWORD *)(_X24 + 32);
    v254 = 0;
    v255 = 0;
    v251 = v145;
    v262 = _X24;
    v264 = *(_QWORD *)(_X24 + 40) + 20 * *(unsigned __int8 *)(_X24 + 39);
    v265 = *(_BYTE *)(_X24 + 38);
    v146.i64[0] = *(_QWORD *)(_X24 + 60);
    v146.i64[1] = *(unsigned int *)(_X24 + 68);
    v147 = (int32x4_t)vmulq_f32(v21, v146);
    *(float32x2_t *)v147.i8 = vpmin_f32((float32x2_t)vdup_laneq_s32(v147, 2), *(float32x2_t *)v147.i8);
    *(float *)v147.i32 = vpmin_f32(*(float32x2_t *)v147.i8, *(float32x2_t *)v147.i8).f32[0];
    v252 = vmul_n_f32((float32x2_t)0x3D4CCCCD3DCCCCCDLL, *(float *)v147.i32);
    v253 = 0.025 * *(float *)v147.i32;
    if (v142)
    {
      v256 = xmmword_2260E5F10;
      v257 = xmmword_2260E5F20;
      v258 = xmmword_2260E5F40;
      v259 = xmmword_2260E5F10;
      v260 = xmmword_2260E5F20;
      v261 = xmmword_2260E5F40;
    }
    else
    {
      v148 = vrecpeq_f32(v21);
      v149 = 4;
      do
      {
        v148 = vmulq_f32(v148, vrecpsq_f32(v148, v21));
        --v149;
      }
      while (v149);
      *(int32x2_t *)v150.f32 = vdup_lane_s32(*(int32x2_t *)v20.f32, 0);
      v150.i64[1] = v150.u32[0];
      if ((~vuzp1_s8((int8x8_t)vmovn_s32(vceqq_f32(v150, v21)), *(int8x8_t *)v144.f32).u32[0] & 0xFFFFFF) != 0)
      {
        v157 = (float32x2_t)vdup_lane_s32(*(int32x2_t *)v143.f32, 1);
        v158 = (float32x2_t)vdup_laneq_s32((int32x4_t)v143, 2);
        v159 = (float32x2_t)vdup_laneq_s32((int32x4_t)v143, 3);
        v160 = vaddq_f32(v143, v143);
        v161 = (float32x2_t)vdup_lane_s32((int32x2_t)vmul_f32(*(float32x2_t *)v143.f32, *(float32x2_t *)v160.f32), 0);
        v162 = vmul_lane_f32(v157, *(float32x2_t *)v160.f32, 1);
        v163 = vmul_laneq_f32(v158, v160, 2);
        v164 = vmul_n_f32(v157, v160.f32[0]);
        v165 = vmul_n_f32(v158, v160.f32[0]);
        v166 = vmul_n_f32(v159, v160.f32[0]);
        v167 = vmul_lane_f32(v158, *(float32x2_t *)v160.f32, 1);
        v168 = vmul_lane_f32(v159, *(float32x2_t *)v160.f32, 1);
        v169 = vmul_laneq_f32(v159, v160, 2);
        v170 = vsub_f32(_D24, v161);
        *(int8x8_t *)v171.f32 = vext_s8((int8x8_t)vsub_f32(vsub_f32(_D24, v162), v163), (int8x8_t)vadd_f32(v164, v169), 4uLL);
        v171.i64[1] = vsub_f32(v165, v168).u32[0];
        *(int8x8_t *)v172.f32 = vext_s8((int8x8_t)vsub_f32(v164, v169), (int8x8_t)vsub_f32(v170, v163), 4uLL);
        *(int8x8_t *)v173.f32 = vext_s8((int8x8_t)vdup_lane_s32(*(int32x2_t *)v171.f32, 0), *(int8x8_t *)v172.f32, 4uLL);
        v172.i64[1] = vadd_f32(v167, v166).u32[0];
        *(int8x8_t *)v174.f32 = vext_s8(*(int8x8_t *)v171.f32, (int8x8_t)vdup_lane_s32(*(int32x2_t *)v172.f32, 1), 4uLL);
        v175 = (int8x8_t)vsub_f32(v167, v166);
        v167.i32[0] = vsub_f32(v170, v162).u32[0];
        *(int8x8_t *)v176.f32 = vext_s8((int8x8_t)vadd_f32(v165, v168), v175, 4uLL);
        v176.i64[1] = v167.u32[0];
        v173.i64[1] = vdup_lane_s32(*(int32x2_t *)v176.f32, 0).u32[0];
        v174.i64[1] = vdup_lane_s32(*(int32x2_t *)v176.f32, 1).u32[0];
        *(int8x8_t *)v177.f32 = vext_s8((int8x8_t)vdup_lane_s32(*(int32x2_t *)&v171.u32[2], 0), *(int8x8_t *)&v172.u32[2], 4uLL);
        v177.i64[1] = vdup_lane_s32((int32x2_t)v167.u32[0], 0).u32[0];
        v178 = vmulq_n_f32(v173, v20.f32[0]);
        v178.i32[3] = 0;
        v179 = vmulq_lane_f32(v174, *(float32x2_t *)v20.f32, 1);
        v179.i32[3] = 0;
        v180 = vmulq_laneq_f32(v177, v20, 2);
        v180.i32[3] = 0;
        v181 = vmulq_n_f32(v178, v171.f32[0]);
        v181.i32[3] = 0;
        v182 = vmulq_lane_f32(v179, *(float32x2_t *)v171.f32, 1);
        v182.i32[3] = 0;
        v183 = vmulq_laneq_f32(v180, v171, 2);
        v183.i32[3] = 0;
        v184 = vaddq_f32(v181, v182);
        v185 = vmulq_n_f32(v178, v172.f32[0]);
        v185.i32[3] = 0;
        v186 = vmulq_lane_f32(v179, *(float32x2_t *)v172.f32, 1);
        v186.i32[3] = 0;
        v187 = vmulq_laneq_f32(v180, v172, 2);
        v187.i32[3] = 0;
        v151 = vaddq_f32(v183, v184);
        v152 = vaddq_f32(v187, vaddq_f32(v185, v186));
        v188 = vmulq_n_f32(v178, v176.f32[0]);
        v188.i32[3] = 0;
        v189 = vmulq_lane_f32(v179, *(float32x2_t *)v176.f32, 1);
        v189.i32[3] = 0;
        v190 = vmulq_laneq_f32(v180, v176, 2);
        v190.i32[3] = 0;
        v153 = vaddq_f32(v190, vaddq_f32(v188, v189));
        v191 = vmulq_n_f32(v173, v148.f32[0]);
        v191.i32[3] = 0;
        v192 = vmulq_lane_f32(v174, *(float32x2_t *)v148.f32, 1);
        v192.i32[3] = 0;
        v193 = vmulq_laneq_f32(v177, v148, 2);
        v193.i32[3] = 0;
        v256 = (__int128)v151;
        v257 = (__int128)v152;
        v258 = (__int128)v153;
        v261 = (__int128)v193;
        v194 = vmulq_n_f32(v191, v171.f32[0]);
        v194.i32[3] = 0;
        v195 = vmulq_lane_f32(v192, *(float32x2_t *)v171.f32, 1);
        v195.i32[3] = 0;
        v196 = vmulq_laneq_f32(v193, v171, 2);
        v196.i32[3] = 0;
        v154 = vaddq_f32(v196, vaddq_f32(v194, v195));
        v197 = vmulq_n_f32(v191, v172.f32[0]);
        v197.i32[3] = 0;
        v198 = vmulq_lane_f32(v192, *(float32x2_t *)v172.f32, 1);
        v198.i32[3] = 0;
        v199 = vmulq_laneq_f32(v193, v172, 2);
        v199.i32[3] = 0;
        v200 = vmulq_n_f32(v191, v176.f32[0]);
        v200.i32[3] = 0;
        v201 = vmulq_lane_f32(v192, *(float32x2_t *)v176.f32, 1);
        v201.i32[3] = 0;
        v155 = vaddq_f32(v199, vaddq_f32(v197, v198));
        v202 = vmulq_laneq_f32(v193, v176, 2);
        v202.i32[3] = 0;
        v156 = vaddq_f32(v202, vaddq_f32(v200, v201));
      }
      else
      {
        v148.i32[3] = 0;
        v151 = vmulq_f32(v21, (float32x4_t)xmmword_2260E5F10);
        v152 = vmulq_f32(v21, (float32x4_t)xmmword_2260E5F20);
        v153 = vmulq_f32(v21, (float32x4_t)xmmword_2260E5F40);
        v256 = (__int128)v151;
        v257 = (__int128)v152;
        v258 = (__int128)v153;
        v154 = vmulq_f32(v148, (float32x4_t)xmmword_2260E5F10);
        v155 = vmulq_f32(v148, (float32x4_t)xmmword_2260E5F20);
        v156 = vmulq_f32(v148, (float32x4_t)xmmword_2260E5F40);
      }
      v260 = (__int128)v155;
      v261 = (__int128)v156;
      v203 = vmulq_n_f32(v151, v87.f32[0]);
      v203.i32[3] = 0;
      v204 = vmulq_lane_f32(v152, *(float32x2_t *)v144.f32, 1);
      v204.i32[3] = 0;
      v205 = vmulq_laneq_f32(v153, v145, 2);
      v205.i32[3] = 0;
      v259 = (__int128)v154;
      v251 = vaddq_f32(v205, vaddq_f32(v204, v203));
    }
    v206 = *(_QWORD *)(_X24 + 48);
    v241 = v19;
    v236 = 0.15 * v55.f32[0];
    v237 = 0.05 * v55.f32[0];
    v238 = 0.05 * v55.f32[0];
    v207 = v245;
    v233[0] = v242;
    v234[0] = v244;
    v209 = *(int8x8_t *)v243.i8;
    v208 = *(double *)v244.i64;
    v210 = (float32x4_t)v242;
    v211 = (float32x2x2_t)vzip1q_s32(v242, v244);
    v267.val[0] = (float32x2_t)vzip2q_s32(v242, v244).u64[0];
    v212 = vzip1q_s32(v243, (int32x4_t)0);
    v267.val[1] = (float32x2_t)vzip2q_s32(v243, (int32x4_t)0).u64[0];
    v263 = v206;
    v239 = 3;
    v240 = 0;
    v235[0] = 0;
    v235[1] = 0;
    v250 = 0;
    memset(v249, 0, 48);
    v231.i64[0] = (uint64_t)off_24ED91430;
    v231.i64[1] = (uint64_t)v235;
    v232 = &v242;
    v213 = (float *)v233;
    v214 = (float *)v234;
    v215 = vzip2q_s32((int32x4_t)v211, v212);
    vst2_f32(v213, v211);
    v234[1] = v207;
    vst2_f32(v214, v267);
    v233[1] = v215;
    if (v142)
    {
      v229 = off_24ED925A0;
      v230 = &v251;
      v216 = physx::Gu::gjkPenetration<physx::Gu::RelativeConvex<physx::Gu::BoxV>,physx::Gu::LocalConvex<physx::Gu::ConvexHullNoScaleV>>(&v231, (uint64_t)&v229, (_BYTE *)(v9 + 67), (_BYTE *)(v9 + 71), (_BYTE *)(v9 + 66), v249, v245, v15, *(double *)v207.i64, v210, v209);
      v218 = v248;
      v219 = 1;
    }
    else
    {
      v229 = off_24ED91168;
      v230 = &v251;
      v216 = physx::Gu::gjkPenetration<physx::Gu::RelativeConvex<physx::Gu::BoxV>,physx::Gu::LocalConvex<physx::Gu::ConvexHullV>>(&v231, (uint64_t)&v229, &v245, (uint64_t *)&v248, 1, (_BYTE *)(v9 + 67), (_BYTE *)(v9 + 71), (_BYTE *)(v9 + 66), *(double *)v215.i64, v208, *(int8x8_t *)v207.f32, v210, (uint64_t)v249);
      v218 = v248;
      v219 = 0;
    }
    *(float *)&v217 = v51;
    return physx::Gu::generateOrProcessContactsBoxConvex((uint64_t)&v231, (uint64_t)&v229, (uint64_t)v247, (int32x4_t *)v246, (float32x4_t *)&v242, v216, (uint64_t)v249, v9, v228, v218, v217, a7, v56, v219);
  }
  else if ((_DWORD)v56)
  {
    v114 = *(_QWORD *)(v9 + 80);
    v115 = *(int8x16_t *)(v114 + 32);
    v116 = (float32x4_t)v115;
    if ((_DWORD)v56 != 1)
    {
      v117 = v56 - 1;
      v118 = (float32x4_t *)(v114 + 80);
      v116 = (float32x4_t)v115;
      do
      {
        v119 = *v118;
        v118 += 3;
        v116 = vaddq_f32(v116, v119);
        --v117;
      }
      while (v117);
    }
    v116.i32[3] = 0;
    v120 = vmulq_f32(v116, v116);
    v120.i64[0] = vpaddq_f32(v120, v120).u64[0];
    v115.i32[3] = 0;
    v121 = (float32x4_t)vbslq_s8((int8x16_t)vcltzq_s32(vshlq_n_s32(vdupq_lane_s32(vcgt_f32(vpadd_f32(*(float32x2_t *)v120.f32, *(float32x2_t *)v120.f32), (float32x2_t)0x3400000034000000), 0), 0x1FuLL)), (int8x16_t)v116, v115);
    v122 = v90;
    v122.i32[3] = 0;
    v120.i64[0] = vdupq_laneq_s32((int32x4_t)v90, 3).u64[0];
    v123 = vmulq_n_f32(v121, vmla_f32((float32x2_t)0xBF000000BF000000, *(float32x2_t *)v120.f32, *(float32x2_t *)v120.f32).f32[0]);
    v123.i32[3] = 0;
    v124 = (float32x2_t)vextq_s8((int8x16_t)v122, (int8x16_t)v122, 8uLL).u64[0];
    v125 = (float32x2_t)vextq_s8((int8x16_t)v121, (int8x16_t)v121, 8uLL).u64[0];
    v126 = (int8x8_t)vmls_f32(vmul_f32(*(float32x2_t *)v90.f32, (float32x2_t)vext_s8(*(int8x8_t *)v121.f32, (int8x8_t)v125, 4uLL)), (float32x2_t)vext_s8(*(int8x8_t *)v90.f32, (int8x8_t)v124, 4uLL), *(float32x2_t *)v121.f32);
    *(int8x8_t *)v127.f32 = vext_s8(v126, (int8x8_t)vmls_f32(vmul_f32(v124, *(float32x2_t *)v121.f32), *(float32x2_t *)v90.f32, v125), 4uLL);
    v127.i64[1] = v126.u32[0];
    v128 = vmlaq_laneq_f32(v123, v127, v90, 3);
    v128.i64[1] = vextq_s8((int8x16_t)v128, (int8x16_t)v128, 8uLL).u32[0];
    v129 = vmulq_f32(v122, v121);
    v129.i64[0] = vpaddq_f32(v129, v129).u64[0];
    v130 = vmlaq_n_f32(v128, v122, vpadd_f32(*(float32x2_t *)v129.f32, *(float32x2_t *)v129.f32).f32[0]);
    v131 = vaddq_f32(v130, v130);
    v131.i32[3] = 0;
    v132 = vmulq_f32(v131, v131);
    v132.i64[0] = vpaddq_f32(v132, v132).u64[0];
    v133 = vpadd_f32(*(float32x2_t *)v132.f32, *(float32x2_t *)v132.f32);
    v134 = vrsqrte_f32(v133);
    v135 = 4;
    do
    {
      v134 = vmul_f32(v134, vrsqrts_f32(vmul_f32(v134, v134), v133));
      --v135;
    }
    while (v135);
    v136 = vmul_f32(v133, (float32x2_t)vbsl_s8((int8x8_t)vdup_lane_s32(vceqz_f32(v133), 0), (int8x8_t)_D24, (int8x8_t)v134));
    v137 = vrecpe_f32(v136);
    v138 = 4;
    do
    {
      v137 = vmul_f32(v137, vrecps_f32(v136, v137));
      --v138;
    }
    while (v138);
    v139 = vmulq_n_f32(v131, v137.f32[0]);
    v139.i32[3] = 0;
    v251 = v139;
    physx::Gu::PersistentContactManifold::addManifoldContactsToContactBuffer(v9, (uint64_t)a7, &v251, v246, (uint64_t *)&v248);
    return 1;
  }
  else
  {
    return 0;
  }
}

uint64_t physx::Gu::gjkPenetration<physx::Gu::RelativeConvex<physx::Gu::BoxV>,physx::Gu::LocalConvex<physx::Gu::ConvexHullNoScaleV>>(float32x4_t *a1, uint64_t a2, _BYTE *a3, _BYTE *a4, _BYTE *a5, float32x4_t *a6, float32x4_t a7, float32x2_t a8, double a9, float32x4_t a10, int8x8_t a11)
{
  _BYTE *v11;
  float32x4_t *v15;
  const float *v16;
  float32x2_t v17;
  uint64_t v18;
  const float *v19;
  float32x2_t v20;
  float32x2_t v21;
  float32x2_t v22;
  float32x2_t v23;
  float32x2_t v24;
  uint64_t v25;
  uint64_t v31;
  float32x4_t *v32;
  float32x4_t v33;
  uint64_t v34;
  int8x16_t v35;
  uint64_t v36;
  unsigned int v37;
  float32x4_t v38;
  float32x4_t v39;
  float32x4_t v40;
  float32x4_t v41;
  float32x4_t v42;
  float32x4_t v43;
  float32x4_t v44;
  float32x4_t v45;
  float32x4_t v46;
  float32x2_t v47;
  float32x4_t v48;
  float32x4_t v49;
  float32x2_t v50;
  int v51;
  float32x4_t v52;
  float32x4_t v53;
  float32x2_t v54;
  float32x2_t v55;
  int v56;
  float32x2_t v57;
  float32x2_t v58;
  int v59;
  float32x4_t v60;
  float32x2_t v61;
  int32x4_t v62;
  float32x4_t v63;
  float32x4_t v64;
  float32x4_t v65;
  int8x8_t v66;
  float32x2_t v67;
  float32x2_t v68;
  float32x2_t v69;
  float32x2_t v70;
  float32x2_t v71;
  float32x2_t v72;
  int8x8_t v73;
  float32x4_t v74;
  float32x2_t v75;
  float32x2_t v76;
  int8x8_t v77;
  float32x4_t v78;
  int8x8_t v79;
  float32x4_t v80;
  float32x4_t v81;
  float32x2_t v82;
  float32x4_t v83;
  float32x2_t v84;
  float32x4_t v85;
  float32x2_t v86;
  float32x4_t v87;
  float32x4_t v88;
  float32x4_t v89;
  float32x2_t v90;
  float32x4_t v91;
  float32x2_t v92;
  float32x4_t v93;
  float32x4_t v94;
  float32x2_t v95;
  float32x4_t v96;
  float32x2_t v97;
  float32x4_t v98;
  float32x2_t v99;
  float32x4_t v100;
  int32x4_t v101;
  __int32 v102;
  uint64_t v103;
  uint64_t v104;
  float32x4_t v105;
  float32x2_t v106;
  float32x4_t v107;
  float32x4_t v108;
  float32x2_t v109;
  float32x2_t v110;
  int v111;
  int8x16_t v112;
  float32x2_t v113;
  float32x2_t v114;
  int v115;
  float32x2_t v116;
  float32x2_t v117;
  float32x2_t v118;
  int v119;
  unsigned int v120;
  float32x2_t v121;
  float32x2_t v122;
  float32x2_t v123;
  int v124;
  int8x16_t v125;
  float32x2_t v126;
  float32x2_t v127;
  int v128;
  float32x4_t v129;
  float32x4_t v130;
  float32x4_t v131;
  float32x4_t v132;
  float32x4_t v133;
  int v134;
  int v135;
  int v136;
  int v137;
  float32x4_t v138;
  float32x2_t v139;
  float32x2_t v140;
  int v141;
  float32x2_t v142;
  int v143;
  float32x4_t v144;
  float32x2_t v145;
  int32x4_t v146;
  float32x2_t i;
  float32x4_t v148;
  int32x4_t v149;
  float32x4_t v150;
  float32x4_t v151;
  uint64_t v152;
  uint64_t v153;
  int v154;
  float32x4_t v155;
  float32x4_t v156;
  float32x2_t v157;
  float32x2_t v158;
  uint64_t v159;
  float32x4_t v160;
  float32x4_t v161;
  float32x2_t v162;
  float32x4_t v163;
  float32x4_t v164;
  float32x2_t v165;
  float32x2_t v166;
  int v167;
  float32x4_t v168;
  float32x4_t v169;
  float32x4_t v170;
  int8x8_t v171;
  float32x2_t v172;
  float32x2_t v173;
  float32x2_t v174;
  float32x2_t v175;
  float32x2_t v176;
  float32x2_t v177;
  int8x8_t v178;
  float32x4_t v179;
  float32x2_t v180;
  float32x2_t v181;
  int8x8_t v182;
  float32x4_t v183;
  int8x8_t v184;
  float32x4_t v185;
  float32x4_t v186;
  float32x2_t v187;
  float32x4_t v188;
  float32x2_t v189;
  float32x4_t v190;
  float32x2_t v191;
  float32x4_t v192;
  float32x4_t v193;
  float32x4_t v194;
  float32x2_t v195;
  float32x4_t v196;
  float32x2_t v197;
  float32x4_t v198;
  float32x4_t v199;
  float32x2_t v200;
  float32x4_t v201;
  float32x2_t v202;
  float32x4_t v203;
  float32x2_t v204;
  float32x4_t v205;
  float32x2_t v206;
  __int32 v207;
  uint64_t v208;
  uint64_t v209;
  float32x4_t v210;
  float32x2_t v211;
  float32x4_t v212;
  float32x4_t v213;
  float32x2_t v214;
  float32x2_t v215;
  int v216;
  int8x16_t v217;
  float32x2_t v218;
  float32x2_t v219;
  int v220;
  float32x2_t v221;
  float32x2_t v222;
  float32x2_t v223;
  int v224;
  unsigned int v225;
  float32x2_t v226;
  float32x2_t v227;
  float32x2_t v228;
  int v229;
  int8x16_t v230;
  float32x2_t v231;
  float32x2_t v232;
  int v233;
  float32x4_t v234;
  float32x4_t v235;
  float32x4_t v236;
  float32x4_t v237;
  float32x4_t v238;
  float32x4_t v239;
  int v240;
  int v241;
  int v242;
  int v243;
  float32x4_t v244;
  float32x2_t v245;
  float32x2_t v246;
  int v247;
  float32x2_t v248;
  int v249;
  float32x4_t v250;
  int8x8_t v251;
  uint64_t v252;
  int *v253;
  int *v254;
  int v255;
  int v256;
  uint64_t result;
  uint64_t v258;
  int *v259;
  int *v260;
  int v261;
  int v262;
  int *v263;
  int *v264;
  uint64_t v265;
  int v266;
  int v267;
  float32x4_t *v268;
  int8x16_t v269;
  int8x16_t v270;
  uint64_t v271;
  int *v272;
  int *v273;
  int v274;
  int v275;
  float32x4_t v276;
  float32x4_t v277;
  float32x4_t v278;
  float32x4_t v279;
  float32x4_t v280;
  float32x4_t v281;
  float32x4_t v282;
  float32x2_t v283;
  float32x2_t v284;
  int v285;
  float32x4_t v286;
  float32x4_t v287;
  float32x4_t v288;
  float32x4_t v289;
  float32x4_t v290;
  float32x4_t v291;
  float32x4_t v292;
  float32x4_t v293;
  float32x4_t v294;
  float32x4_t v295;
  float32x2_t v296;
  float32x2_t v297;
  int v298;
  float32x4_t v299;
  float32x4_t v300;
  float32x2_t v301;
  int v302;
  float32x4_t v303;
  int32x4_t v304;
  float32x4_t v308;
  float32x4_t v309;
  float32x4_t v310;
  float32x2_t v311;
  float32x4_t v312;
  float32x4_t v313;
  unsigned int v314;
  float32x4_t v315;
  float32x2_t v316;
  int v317;
  int v318;
  int v319;
  int v320;
  int8x16_t v321;
  float32x4_t v322;
  float32x4_t v323;
  int8x16_t v324;
  float32x4_t v325;
  float32x4_t v326;
  float32x4_t v327;
  float32x4_t v328;
  float32x4_t v329[2];
  uint64_t v330;

  v11 = a4;
  v330 = *MEMORY[0x24BDAC8D0];
  v15 = (float32x4_t *)a1->i64[1];
  v16 = &v15[1].f32[1];
  v17 = vld1_dup_f32(v16);
  v18 = *(_QWORD *)(a2 + 8);
  v19 = (const float *)(v18 + 20);
  v20 = vld1_dup_f32(v19);
  v21 = vmin_f32(v17, v20);
  v22 = (float32x2_t)vdup_n_s32(0x3DCCCCCDu);
  v23 = vmul_f32(v21, v22);
  v21.i32[0] = v15[1].i32[0];
  v22.i32[0] = *(_DWORD *)(v18 + 16);
  a10.i32[0] = -v15[2].i8[0];
  a11.i32[0] = -*(char *)(v18 + 32);
  v24 = vadd_f32((float32x2_t)vand_s8(*(int8x8_t *)a10.f32, (int8x8_t)v21), (float32x2_t)vand_s8(a11, (int8x8_t)v22));
  v315 = 0uLL;
  v314 = 0;
  v25 = *a5;
  __asm { FMOV            V10.2S, #1.0 }
  if (!*a5)
  {
    v52 = vmulq_f32(a7, a7);
    v52.i64[0] = vpaddq_f32(v52, v52).u64[0];
    v44 = (float32x4_t)vbslq_s8((int8x16_t)vdupq_lane_s32(vcgtz_f32(vpadd_f32(*(float32x2_t *)v52.f32, *(float32x2_t *)v52.f32)), 0), (int8x16_t)a7, (int8x16_t)xmmword_2260E5F10);
    v315 = v44;
    v53 = vmulq_f32(v44, v44);
    v53.i64[0] = vpaddq_f32(v53, v53).u64[0];
    v54 = vpadd_f32(*(float32x2_t *)v53.f32, *(float32x2_t *)v53.f32);
    v55 = vrsqrte_f32(v54);
    v56 = 4;
    do
    {
      v55 = vmul_f32(v55, vrsqrts_f32(vmul_f32(v55, v55), v54));
      --v56;
    }
    while (v56);
    v57 = vmul_f32(v54, (float32x2_t)vbsl_s8((int8x8_t)vdup_lane_s32(vceqz_f32(v54), 0), (int8x8_t)_D10, (int8x8_t)v55));
    v58 = vrecpe_f32(v57);
    v59 = 4;
    do
    {
      *(float32x2_t *)a10.f32 = vrecps_f32(v57, v58);
      v58 = vmul_f32(v58, *(float32x2_t *)a10.f32);
      --v59;
    }
    while (v59);
    v60 = vmulq_n_f32(v44, v58.f32[0]);
    v60.i32[3] = 0;
    v310 = v60;
    v61 = (float32x2_t)vdup_n_s32(0x7F7FFFFFu);
    v62.i64[0] = -1;
    v62.i64[1] = -1;
    v63 = 0uLL;
    goto LABEL_54;
  }
  v31 = 0;
  v32 = (float32x4_t *)a1[1].i64[0];
  v33 = v15[3];
  v34 = *(_QWORD *)(v18 + 160);
  v35 = (int8x16_t)vnegq_f32(v33);
  v35.i32[3] = 0;
  do
  {
    v36 = a3[v31];
    *(&v319 + v31) = v36;
    v37 = a4[v31];
    *(&v317 + v31) = v37;
    v38 = (float32x4_t)vbslq_s8(physx::boxVertexTable[v36], (int8x16_t)v33, v35);
    v39 = vmulq_n_f32(*v32, v38.f32[0]);
    v39.i32[3] = 0;
    v40 = vmulq_lane_f32(v32[1], *(float32x2_t *)v38.f32, 1);
    v40.i32[3] = 0;
    v41 = vmulq_laneq_f32(v32[2], v38, 2);
    v41.i32[3] = 0;
    v42 = vaddq_f32(v41, vaddq_f32(v39, v40));
    a10 = *(float32x4_t *)(v34 + 12 * v37);
    v43 = vaddq_f32(v32[3], v42);
    a10.i32[3] = 0;
    v44 = vsubq_f32(v43, a10);
    *(&v324 + v31) = (int8x16_t)v43;
    *(&v321 + v31) = (int8x16_t)a10;
    *(&v327 + v31++) = v44;
  }
  while (v25 != v31);
  v314 = v25;
  switch((_DWORD)v31)
  {
    case 4:
      physx::Gu::closestPtPointTetrahedron(&v327, &v324, &v321, &v319, &v317, (int *)&v314);
      goto LABEL_49;
    case 3:
      v314 = 3;
      v44 = v327;
      a10 = vsubq_f32(v328, v327);
      v64 = vsubq_f32(v329[0], v327);
      v66 = (int8x8_t)vmls_f32(vmul_f32(*(float32x2_t *)a10.f32, (float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v64, (int8x16_t)v64, 4uLL)), (float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)a10, (int8x16_t)a10, 4uLL), *(float32x2_t *)v64.f32);
      *(int8x8_t *)v65.f32 = vext_s8(v66, (int8x8_t)vmls_f32(vmul_f32((float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)a10, (int8x16_t)a10, 8uLL), *(float32x2_t *)v64.f32), *(float32x2_t *)a10.f32, (float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v64, (int8x16_t)v64, 8uLL)), 4uLL);
      v66.i32[1] = 0;
      v67 = vpadd_f32(vmul_f32(*(float32x2_t *)v65.f32, *(float32x2_t *)v65.f32), vmul_f32((float32x2_t)v66.u32[0], (float32x2_t)v66.u32[0]));
      v68 = vpadd_f32(v67, v67);
      if (v68.f32[0] > 0.00000011921)
      {
        if (v68.f32[0] == 0.0)
        {
          v44 = 0uLL;
        }
        else
        {
          *(int8x8_t *)&v65.u32[2] = v66;
          v69 = (float32x2_t)vextq_s8((int8x16_t)v328, (int8x16_t)v328, 8uLL).u64[0];
          v70 = (float32x2_t)vextq_s8((int8x16_t)v329[0], (int8x16_t)v329[0], 8uLL).u64[0];
          v71 = (float32x2_t)vextq_s8((int8x16_t)v329[0], (int8x16_t)v329[0], 4uLL).u64[0];
          v72 = (float32x2_t)vextq_s8((int8x16_t)v328, (int8x16_t)v328, 4uLL).u64[0];
          v73 = (int8x8_t)vmls_f32(vmul_f32(*(float32x2_t *)v328.f32, v71), v72, *(float32x2_t *)v329[0].f32);
          *(int8x8_t *)v74.f32 = vext_s8(v73, (int8x8_t)vmls_f32(vmul_f32(v69, *(float32x2_t *)v329[0].f32), *(float32x2_t *)v328.f32, v70), 4uLL);
          v74.i64[1] = v73.u32[0];
          v75 = (float32x2_t)vextq_s8((int8x16_t)v327, (int8x16_t)v327, 8uLL).u64[0];
          v76 = (float32x2_t)vextq_s8((int8x16_t)v327, (int8x16_t)v327, 4uLL).u64[0];
          v77 = (int8x8_t)vmls_f32(vmul_f32(v76, *(float32x2_t *)v329[0].f32), v71, *(float32x2_t *)v327.f32);
          *(int8x8_t *)v78.f32 = vext_s8(v77, (int8x8_t)vmls_f32(vmul_f32(*(float32x2_t *)v327.f32, v70), *(float32x2_t *)v329[0].f32, v75), 4uLL);
          v78.i64[1] = v77.u32[0];
          v79 = (int8x8_t)vmls_f32(vmul_f32(*(float32x2_t *)v327.f32, v72), v76, *(float32x2_t *)v328.f32);
          *(int8x8_t *)v80.f32 = vext_s8(v79, (int8x8_t)vmls_f32(vmul_f32(v75, *(float32x2_t *)v328.f32), *(float32x2_t *)v327.f32, v69), 4uLL);
          v80.i64[1] = v79.u32[0];
          v81 = vmulq_f32(v74, v65);
          v81.i64[0] = vpaddq_f32(v81, v81).u64[0];
          v82 = vpadd_f32(*(float32x2_t *)v81.f32, *(float32x2_t *)v81.f32);
          v83 = vmulq_f32(v78, v65);
          v83.i64[0] = vpaddq_f32(v83, v83).u64[0];
          v84 = vpadd_f32(*(float32x2_t *)v83.f32, *(float32x2_t *)v83.f32);
          v85 = vmulq_f32(v80, v65);
          v85.i64[0] = vpaddq_f32(v85, v85).u64[0];
          v86 = vpadd_f32(*(float32x2_t *)v85.f32, *(float32x2_t *)v85.f32);
          if (vuzp1_s8((int8x8_t)vdup_lane_s16((int16x4_t)vand_s8(vand_s8((int8x8_t)vcgez_f32(v84), (int8x8_t)vcgez_f32(v82)), (int8x8_t)vcgez_f32(v86)), 0), *(int8x8_t *)v327.f32).u32[0] == -1)
          {
            v112 = (int8x16_t)vmulq_f32(v327, v65);
            v113 = (float32x2_t)vextq_s8(v112, v112, 8uLL).u64[0];
            v114 = vrecpe_f32(v68);
            v115 = 4;
            do
            {
              v114 = vmul_f32(v114, vrecps_f32(v68, v114));
              --v115;
            }
            while (v115);
            v116 = vpadd_f32(*(float32x2_t *)v112.i8, v113);
            v44 = vmulq_n_f32(v65, vmul_f32(v114, vpadd_f32(v116, v116)).f32[0]);
            v44.i32[3] = 0;
          }
          else
          {
            v87 = vnegq_f32(v327);
            v87.i32[3] = 0;
            v88 = vnegq_f32(v328);
            v88.i32[3] = 0;
            v89 = vmulq_f32(v87, a10);
            v89.i64[0] = vpaddq_f32(v89, v89).u64[0];
            v90 = vpadd_f32(*(float32x2_t *)v89.f32, *(float32x2_t *)v89.f32);
            v91 = vmulq_f32(a10, v88);
            v91.i64[0] = vpaddq_f32(v91, v91).u64[0];
            v92 = vpadd_f32(*(float32x2_t *)v91.f32, *(float32x2_t *)v91.f32);
            if (vuzp1_s8((int8x8_t)vdup_lane_s16((int16x4_t)vand_s8(vand_s8((int8x8_t)vcgez_f32(v90), (int8x8_t)vclez_f32(v92)), (int8x8_t)vclez_f32(v86)), 0), *(int8x8_t *)v327.f32).u32[0] == -1)
            {
              v117 = vsub_f32(v90, v92);
              v118 = vrecpe_f32(v117);
              v119 = 4;
              do
              {
                v118 = vmul_f32(v118, vrecps_f32(v117, v118));
                --v119;
              }
              while (v119);
              v104 = 0;
              v44 = vmlaq_n_f32(v327, a10, vmul_f32(v90, (float32x2_t)vbsl_s8((int8x8_t)vcgt_f32(vabs_f32(v117), (float32x2_t)0x3400000034000000), (int8x8_t)v118, 0)).f32[0]);
              v44.i64[1] = vextq_s8((int8x16_t)v44, (int8x16_t)v44, 8uLL).u32[0];
              v120 = 2;
              v103 = 1;
            }
            else
            {
              v93 = vnegq_f32(v329[0]);
              v93.i32[3] = 0;
              v94 = vmulq_f32(v88, v64);
              v94.i64[0] = vpaddq_f32(v94, v94).u64[0];
              v95 = vpadd_f32(*(float32x2_t *)v94.f32, *(float32x2_t *)v94.f32);
              v96 = vmulq_f32(a10, v93);
              v96.i64[0] = vpaddq_f32(v96, v96).u64[0];
              v97 = vpadd_f32(*(float32x2_t *)v96.f32, *(float32x2_t *)v96.f32);
              v98 = vmulq_f32(v64, v93);
              v98.i64[0] = vpaddq_f32(v98, v98).u64[0];
              v99 = vpadd_f32(*(float32x2_t *)v98.f32, *(float32x2_t *)v98.f32);
              if (vuzp1_s8((int8x8_t)vdup_lane_s16((int16x4_t)vand_s8(vand_s8((int8x8_t)vcge_f32(v95, v92), (int8x8_t)vcge_f32(v97, v99)), (int8x8_t)vclez_f32(v82)), 0), *(int8x8_t *)v327.f32).u32[0] == -1)
              {
                v121 = vsub_f32(v95, v92);
                v122 = vadd_f32(v121, vsub_f32(v97, v99));
                v123 = vrecpe_f32(v122);
                v124 = 4;
                do
                {
                  v123 = vmul_f32(v123, vrecps_f32(v122, v123));
                  --v124;
                }
                while (v124);
                v125 = (int8x16_t)vmlaq_n_f32(v328, vsubq_f32(v329[0], v328), vmul_f32(v121, (float32x2_t)vbsl_s8((int8x8_t)vcgt_f32(vabs_f32(v122), (float32x2_t)0x3400000034000000), (int8x8_t)v123, 0)).f32[0]);
                v125.i64[1] = vextq_s8(v125, v125, 8uLL).u32[0];
                v120 = 2;
                v104 = 1;
                v103 = 2;
                v44 = (float32x4_t)v125;
              }
              else
              {
                v100 = vmulq_f32(v87, v64);
                v101 = (int32x4_t)vpaddq_f32(v100, v100);
                *(float32x2_t *)v101.i8 = vpadd_f32(*(float32x2_t *)v101.i8, *(float32x2_t *)v101.i8);
                if (vuzp1_s8((int8x8_t)vdup_lane_s16((int16x4_t)vand_s8(vand_s8((int8x8_t)vcgez_f32(*(float32x2_t *)v101.i8), (int8x8_t)vclez_f32(v99)), (int8x8_t)vclez_f32(v84)), 0), *(int8x8_t *)v327.f32).u32[0] == -1)
                {
                  v126 = vsub_f32(*(float32x2_t *)v101.i8, v99);
                  v127 = vrecpe_f32(v126);
                  v128 = 4;
                  do
                  {
                    v127 = vmul_f32(v127, vrecps_f32(v126, v127));
                    --v128;
                  }
                  while (v128);
                  v104 = 0;
                  v44 = vmlaq_n_f32(v327, v64, vmul_f32(*(float32x2_t *)v101.i8, (float32x2_t)vbsl_s8((int8x8_t)vcgt_f32(vabs_f32(v126), (float32x2_t)0x3400000034000000), (int8x8_t)v127, 0)).f32[0]);
                  v44.i64[1] = vextq_s8((int8x16_t)v44, (int8x16_t)v44, 8uLL).u32[0];
                  v103 = 2;
                }
                else if (vuzp1_s8((int8x8_t)vdup_lane_s16((int16x4_t)vand_s8((int8x8_t)vclez_f32(*(float32x2_t *)v101.i8), (int8x8_t)vclez_f32(v90)), 0), *(int8x8_t *)v327.f32).u32[0] == -1)
                {
                  v104 = 0;
                  v103 = 1;
                }
                else
                {
                  *(int32x2_t *)v101.i8 = vcge_f32(v92, v95);
                  *(int16x4_t *)v44.f32 = vdup_lane_s16((int16x4_t)vand_s8(*(int8x8_t *)v101.i8, (int8x8_t)vcgez_f32(v92)), 0);
                  *(int8x8_t *)v44.f32 = vuzp1_s8(*(int8x8_t *)v44.f32, *(int8x8_t *)v44.f32);
                  v101.i32[0] = -1;
                  v102 = v44.i32[0];
                  v44 = (float32x4_t)vbslq_s8((int8x16_t)vdupq_lane_s32((int32x2_t)*(_OWORD *)&vceqq_s32((int32x4_t)v44, v101), 0), (int8x16_t)v328, (int8x16_t)v329[0]);
                  v103 = 1;
                  if (v102 == -1)
                    v104 = 1;
                  else
                    v104 = 2;
                }
                v120 = v103;
              }
            }
            v129 = *(&v327 + v104);
            v130 = *(&v327 + v103);
            a10 = *((float32x4_t *)&v324 + v104);
            v131 = *((float32x4_t *)&v324 + v103);
            v132 = *((float32x4_t *)&v321 + v104);
            v133 = *((float32x4_t *)&v321 + v103);
            v134 = *(&v319 + v104);
            v135 = *(&v319 + v103);
            v136 = *(&v317 + v104);
            v137 = *(&v317 + v103);
            v327 = v129;
            v328 = v130;
            v324 = (int8x16_t)a10;
            v325 = v131;
            v321 = (int8x16_t)v132;
            v322 = v133;
            v319 = v134;
            v320 = v135;
            v317 = v136;
            v318 = v137;
            v314 = v120;
          }
        }
        goto LABEL_49;
      }
      v314 = 2;
      v105 = vmulq_f32(a10, a10);
      v105.i64[0] = vpaddq_f32(v105, v105).u64[0];
      v106 = vpadd_f32(*(float32x2_t *)v105.f32, *(float32x2_t *)v105.f32);
      if (vuzp1_s8((int8x8_t)vdup_lane_s16((int16x4_t)vcge_f32((float32x2_t)0x3400000034000000, v106), 0), *(int8x8_t *)v327.f32).u32[0] != -1)
      {
        v107 = vnegq_f32(v327);
        v107.i32[3] = 0;
        v108 = vmulq_f32(v107, a10);
        v108.i64[0] = vpaddq_f32(v108, v108).u64[0];
        v109 = vpadd_f32(*(float32x2_t *)v108.f32, *(float32x2_t *)v108.f32);
        v110 = vrecpe_f32(v106);
        v111 = 4;
        do
        {
          v110 = vmul_f32(v110, vrecps_f32(v106, v110));
          --v111;
        }
        while (v111);
        v44 = vmlaq_n_f32(v327, a10, vmax_f32(vmin_f32(vmul_f32(v109, v110), _D10), 0).f32[0]);
        goto LABEL_31;
      }
      break;
    case 2:
      v44 = v327;
      v45 = vsubq_f32(v328, v327);
      v46 = vmulq_f32(v45, v45);
      v46.i64[0] = vpaddq_f32(v46, v46).u64[0];
      v47 = vpadd_f32(*(float32x2_t *)v46.f32, *(float32x2_t *)v46.f32);
      if (vuzp1_s8((int8x8_t)vdup_lane_s16((int16x4_t)vcge_f32((float32x2_t)0x3400000034000000, v47), 0), *(int8x8_t *)v327.f32).u32[0] != -1)
      {
        v48 = vnegq_f32(v327);
        v48.i32[3] = 0;
        v49 = vmulq_f32(v48, v45);
        a10 = vpaddq_f32(v49, v49);
        *(float32x2_t *)a10.f32 = vpadd_f32(*(float32x2_t *)a10.f32, *(float32x2_t *)a10.f32);
        v50 = vrecpe_f32(v47);
        v51 = 4;
        do
        {
          v50 = vmul_f32(v50, vrecps_f32(v47, v50));
          --v51;
        }
        while (v51);
        v44 = vmlaq_n_f32(v327, v45, vmax_f32(vmin_f32(vmul_f32(*(float32x2_t *)a10.f32, v50), _D10), 0).f32[0]);
LABEL_31:
        v44.i64[1] = vextq_s8((int8x16_t)v44, (int8x16_t)v44, 8uLL).u32[0];
        goto LABEL_49;
      }
      break;
    default:
      goto LABEL_49;
  }
  v314 = 1;
LABEL_49:
  v315 = v44;
  v138 = vmulq_f32(v44, v44);
  v138.i64[0] = vpaddq_f32(v138, v138).u64[0];
  v139 = vpadd_f32(*(float32x2_t *)v138.f32, *(float32x2_t *)v138.f32);
  v140 = vrsqrte_f32(v139);
  v141 = 4;
  do
  {
    v140 = vmul_f32(v140, vrsqrts_f32(vmul_f32(v140, v140), v139));
    --v141;
  }
  while (v141);
  v61 = vmul_f32(v139, (float32x2_t)vbsl_s8((int8x8_t)vdup_lane_s32(vceqz_f32(v139), 0), (int8x8_t)_D10, (int8x8_t)v140));
  v142 = vrecpe_f32(v61);
  v143 = 4;
  do
  {
    *(float32x2_t *)a10.f32 = vrecps_f32(v61, v142);
    v142 = vmul_f32(v142, *(float32x2_t *)a10.f32);
    --v143;
  }
  while (v143);
  v144 = vmulq_n_f32(v44, v142.f32[0]);
  v144.i32[3] = 0;
  v310 = v144;
  v62 = vdupq_lane_s32(vcgt_f32(v61, v23), 0);
  v63 = v44;
LABEL_54:
  v145 = vadd_f32(v24, a8);
  a10.i32[0] = -1;
  v304 = (int32x4_t)a10;
  v146.i64[0] = -1;
  v146.i64[1] = -1;
  for (i = v61; ; i = v158)
  {
    v148 = v44;
    v149.i64[0] = -1;
    v149.i64[1] = -1;
    *(int16x4_t *)v149.i8 = vmovn_s32(vceqq_s32(v62, v149));
    if (vuzp1_s8(*(int8x8_t *)v149.i8, *(int8x8_t *)v149.i8).u32[0] != -1)
      break;
    v308 = v148;
    v150 = vnegq_f32(v148);
    v150.i32[3] = 0;
    v311 = v61;
    v313 = v150;
    *(double *)v151.i64 = physx::Gu::RelativeConvex<physx::Gu::BoxV>::support(a1, (float32x2_t *)&v313, (unsigned __int32 *)&v319 + v314);
    v309 = v151;
    v152 = v314;
    v153 = *(_QWORD *)(a2 + 8);
    v154 = physx::Gu::ConvexHullV::supportVertexIndex(v153, &v315);
    *(&v317 + v152) = v154;
    v155 = *(float32x4_t *)(*(_QWORD *)(v153 + 160) + 12 * v154);
    v155.i32[3] = 0;
    v44 = vsubq_f32(v309, v155);
    v156 = vmulq_f32(v310, v44);
    v156.i64[0] = vpaddq_f32(v156, v156).u64[0];
    v157 = vpadd_f32(*(float32x2_t *)v156.f32, *(float32x2_t *)v156.f32);
    if ((vmvn_s8((int8x8_t)vcgt_f32(v157, v145)).u8[0] & 1) == 0)
    {
      if (a3)
      {
        v258 = v314;
        *a5 = v314;
        if ((_DWORD)v258)
        {
          v259 = &v317;
          v260 = &v319;
          do
          {
            v261 = *v260++;
            *a3++ = v261;
            v262 = *v259++;
            *v11++ = v262;
            --v258;
          }
          while (v258);
        }
      }
      return 0;
    }
    v158 = v311;
    v159 = v314;
    if (v157.f32[0] > (float)(0.99977 * v311.f32[0]))
    {
      if (!a3)
        goto LABEL_121;
      *a5 = v314;
      if ((_DWORD)v159)
      {
        v263 = &v317;
        v264 = &v319;
        v265 = v159;
        do
        {
          v266 = *v264++;
          *a3++ = v266;
          v267 = *v263++;
          *v11++ = v267;
          --v265;
        }
        while (v265);
LABEL_121:
        v268 = a6;
        a6[2] = v310;
        switch((_DWORD)v159)
        {
          case 3:
            v313.i64[0] = 0;
            v316 = 0;
            physx::Gu::barycentricCoordinates(&v315, &v327, &v328, v329, (float32x2_t *)&v313, &v316);
            v158 = v311;
            v276 = vmulq_n_f32(vsubq_f32(v325, (float32x4_t)v324), v313.f32[0]);
            v276.i32[3] = 0;
            v277 = vmulq_n_f32(vsubq_f32(v326, (float32x4_t)v324), v316.f32[0]);
            v277.i32[3] = 0;
            v269 = (int8x16_t)vaddq_f32((float32x4_t)v324, vaddq_f32(v276, v277));
            v278 = vmulq_n_f32(vsubq_f32(v322, (float32x4_t)v321), v313.f32[0]);
            v278.i32[3] = 0;
            v279 = vmulq_n_f32(vsubq_f32(v323, (float32x4_t)v321), v316.f32[0]);
            v279.i32[3] = 0;
            v270 = (int8x16_t)vaddq_f32((float32x4_t)v321, vaddq_f32(v278, v279));
            break;
          case 2:
            v280 = vsubq_f32(v327, v315);
            v281 = vsubq_f32(vsubq_f32(v328, v315), v280);
            v282 = vmulq_f32(v281, v281);
            v282.i64[0] = vpaddq_f32(v282, v282).u64[0];
            v283 = vpadd_f32(*(float32x2_t *)v282.f32, *(float32x2_t *)v282.f32);
            v284 = vrecpe_f32(v283);
            v285 = 4;
            do
            {
              v284 = vmul_f32(v284, vrecps_f32(v283, v284));
              --v285;
            }
            while (v285);
            v286 = vnegq_f32(v280);
            v286.i32[3] = 0;
            v287 = vmulq_f32(v286, v281);
            v287.i64[0] = vpaddq_f32(v287, v287).u64[0];
            v286.i32[0] = vmul_f32((float32x2_t)vbsl_s8((int8x8_t)vcgtz_f32(v283), (int8x8_t)v284, 0), vpadd_f32(*(float32x2_t *)v287.f32, *(float32x2_t *)v287.f32)).u32[0];
            v269 = (int8x16_t)vmlaq_n_f32((float32x4_t)v324, vsubq_f32(v325, (float32x4_t)v324), v286.f32[0]);
            v269.i64[1] = vextq_s8(v269, v269, 8uLL).u32[0];
            v270 = (int8x16_t)vmlaq_n_f32((float32x4_t)v321, vsubq_f32(v322, (float32x4_t)v321), v286.f32[0]);
            v270.i64[1] = vextq_s8(v270, v270, 8uLL).u32[0];
            break;
          case 1:
            v269 = v324;
            result = 2;
            v270 = v321;
LABEL_147:
            *v268 = (float32x4_t)v269;
            v268[1] = (float32x4_t)v270;
            *(float32x2_t *)v268[4].f32 = v158;
            return result;
          default:
LABEL_134:
            result = 2;
            v269 = 0uLL;
            v270 = 0uLL;
            goto LABEL_147;
        }
        result = 2;
        goto LABEL_147;
      }
      v268 = a6;
      a6[2] = v310;
      goto LABEL_134;
    }
    *(&v324 + v314) = (int8x16_t)v309;
    *(&v321 + v159) = (int8x16_t)v155;
    v314 = v159 + 1;
    *(&v327 + v159) = v44;
    if ((_DWORD)v159 == 3)
    {
      physx::Gu::closestPtPointTetrahedron(&v327, &v324, &v321, &v319, &v317, (int *)&v314);
      v158 = v311;
LABEL_66:
      v63 = v308;
      goto LABEL_101;
    }
    if ((_DWORD)v159 == 2)
    {
      v44 = v327;
      v168 = vsubq_f32(v328, v327);
      v169 = vsubq_f32(v329[0], v327);
      v171 = (int8x8_t)vmls_f32(vmul_f32(*(float32x2_t *)v168.f32, (float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v169, (int8x16_t)v169, 4uLL)), (float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v168, (int8x16_t)v168, 4uLL), *(float32x2_t *)v169.f32);
      *(int8x8_t *)v170.f32 = vext_s8(v171, (int8x8_t)vmls_f32(vmul_f32((float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v168, (int8x16_t)v168, 8uLL), *(float32x2_t *)v169.f32), *(float32x2_t *)v168.f32, (float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v169, (int8x16_t)v169, 8uLL)), 4uLL);
      v171.i32[1] = 0;
      v314 = 3;
      v172 = vpadd_f32(vmul_f32(*(float32x2_t *)v170.f32, *(float32x2_t *)v170.f32), vmul_f32((float32x2_t)v171.u32[0], (float32x2_t)v171.u32[0]));
      v173 = vpadd_f32(v172, v172);
      if (v173.f32[0] <= 0.00000011921)
      {
        v314 = 2;
        v210 = vmulq_f32(v168, v168);
        v210.i64[0] = vpaddq_f32(v210, v210).u64[0];
        v211 = vpadd_f32(*(float32x2_t *)v210.f32, *(float32x2_t *)v210.f32);
        if (vuzp1_s8((int8x8_t)vdup_lane_s16((int16x4_t)vcge_f32((float32x2_t)0x3400000034000000, v211), 0), *(int8x8_t *)v327.f32).u32[0] != -1)
        {
          v212 = vnegq_f32(v327);
          v212.i32[3] = 0;
          v213 = vmulq_f32(v212, v168);
          v213.i64[0] = vpaddq_f32(v213, v213).u64[0];
          v214 = vpadd_f32(*(float32x2_t *)v213.f32, *(float32x2_t *)v213.f32);
          v215 = vrecpe_f32(v211);
          v216 = 4;
          v63 = v308;
          do
          {
            v215 = vmul_f32(v215, vrecps_f32(v211, v215));
            --v216;
          }
          while (v216);
          v44 = vmlaq_n_f32(v327, v168, vmax_f32(vmin_f32(vmul_f32(v214, v215), _D10), 0).f32[0]);
LABEL_81:
          v44.i64[1] = vextq_s8((int8x16_t)v44, (int8x16_t)v44, 8uLL).u32[0];
          goto LABEL_101;
        }
        v314 = 1;
        goto LABEL_66;
      }
      if (v173.f32[0] == 0.0)
      {
        v44 = 0uLL;
        goto LABEL_66;
      }
      *(int8x8_t *)&v170.u32[2] = v171;
      v174 = (float32x2_t)vextq_s8((int8x16_t)v328, (int8x16_t)v328, 8uLL).u64[0];
      v175 = (float32x2_t)vextq_s8((int8x16_t)v329[0], (int8x16_t)v329[0], 8uLL).u64[0];
      v176 = (float32x2_t)vextq_s8((int8x16_t)v329[0], (int8x16_t)v329[0], 4uLL).u64[0];
      v177 = (float32x2_t)vextq_s8((int8x16_t)v328, (int8x16_t)v328, 4uLL).u64[0];
      v178 = (int8x8_t)vmls_f32(vmul_f32(*(float32x2_t *)v328.f32, v176), v177, *(float32x2_t *)v329[0].f32);
      *(int8x8_t *)v179.f32 = vext_s8(v178, (int8x8_t)vmls_f32(vmul_f32(v174, *(float32x2_t *)v329[0].f32), *(float32x2_t *)v328.f32, v175), 4uLL);
      v179.i64[1] = v178.u32[0];
      v180 = (float32x2_t)vextq_s8((int8x16_t)v327, (int8x16_t)v327, 8uLL).u64[0];
      v181 = (float32x2_t)vextq_s8((int8x16_t)v327, (int8x16_t)v327, 4uLL).u64[0];
      v182 = (int8x8_t)vmls_f32(vmul_f32(v181, *(float32x2_t *)v329[0].f32), v176, *(float32x2_t *)v327.f32);
      *(int8x8_t *)v183.f32 = vext_s8(v182, (int8x8_t)vmls_f32(vmul_f32(*(float32x2_t *)v327.f32, v175), *(float32x2_t *)v329[0].f32, v180), 4uLL);
      v183.i64[1] = v182.u32[0];
      v184 = (int8x8_t)vmls_f32(vmul_f32(*(float32x2_t *)v327.f32, v177), v181, *(float32x2_t *)v328.f32);
      *(int8x8_t *)v185.f32 = vext_s8(v184, (int8x8_t)vmls_f32(vmul_f32(v180, *(float32x2_t *)v328.f32), *(float32x2_t *)v327.f32, v174), 4uLL);
      v185.i64[1] = v184.u32[0];
      v186 = vmulq_f32(v179, v170);
      v186.i64[0] = vpaddq_f32(v186, v186).u64[0];
      v187 = vpadd_f32(*(float32x2_t *)v186.f32, *(float32x2_t *)v186.f32);
      v188 = vmulq_f32(v183, v170);
      v188.i64[0] = vpaddq_f32(v188, v188).u64[0];
      v189 = vpadd_f32(*(float32x2_t *)v188.f32, *(float32x2_t *)v188.f32);
      v190 = vmulq_f32(v185, v170);
      v190.i64[0] = vpaddq_f32(v190, v190).u64[0];
      v191 = vpadd_f32(*(float32x2_t *)v190.f32, *(float32x2_t *)v190.f32);
      if (vuzp1_s8((int8x8_t)vdup_lane_s16((int16x4_t)vand_s8(vand_s8((int8x8_t)vcgez_f32(v189), (int8x8_t)vcgez_f32(v187)), (int8x8_t)vcgez_f32(v191)), 0), *(int8x8_t *)v327.f32).u32[0] != -1)
      {
        v192 = vnegq_f32(v327);
        v192.i32[3] = 0;
        v193 = vnegq_f32(v328);
        v193.i32[3] = 0;
        v194 = vmulq_f32(v192, v168);
        v194.i64[0] = vpaddq_f32(v194, v194).u64[0];
        v195 = vpadd_f32(*(float32x2_t *)v194.f32, *(float32x2_t *)v194.f32);
        v196 = vmulq_f32(v168, v193);
        v196.i64[0] = vpaddq_f32(v196, v196).u64[0];
        v197 = vpadd_f32(*(float32x2_t *)v196.f32, *(float32x2_t *)v196.f32);
        if (vuzp1_s8((int8x8_t)vdup_lane_s16((int16x4_t)vand_s8(vand_s8((int8x8_t)vcgez_f32(v195), (int8x8_t)vclez_f32(v197)), (int8x8_t)vclez_f32(v191)), 0), *(int8x8_t *)v327.f32).u32[0] == -1)
        {
          v222 = vsub_f32(v195, v197);
          v223 = vrecpe_f32(v222);
          v224 = 4;
          do
          {
            v223 = vmul_f32(v223, vrecps_f32(v222, v223));
            --v224;
          }
          while (v224);
          v209 = 0;
          v44 = vmlaq_n_f32(v327, v168, vmul_f32(v195, (float32x2_t)vbsl_s8((int8x8_t)vcgt_f32(vabs_f32(v222), (float32x2_t)0x3400000034000000), (int8x8_t)v223, 0)).f32[0]);
          v44.i64[1] = vextq_s8((int8x16_t)v44, (int8x16_t)v44, 8uLL).u32[0];
          v225 = 2;
          v208 = 1;
        }
        else
        {
          v198 = vnegq_f32(v329[0]);
          v198.i32[3] = 0;
          v199 = vmulq_f32(v193, v169);
          v199.i64[0] = vpaddq_f32(v199, v199).u64[0];
          v200 = vpadd_f32(*(float32x2_t *)v199.f32, *(float32x2_t *)v199.f32);
          v201 = vmulq_f32(v168, v198);
          v201.i64[0] = vpaddq_f32(v201, v201).u64[0];
          v202 = vpadd_f32(*(float32x2_t *)v201.f32, *(float32x2_t *)v201.f32);
          v203 = vmulq_f32(v169, v198);
          v203.i64[0] = vpaddq_f32(v203, v203).u64[0];
          v204 = vpadd_f32(*(float32x2_t *)v203.f32, *(float32x2_t *)v203.f32);
          if (vuzp1_s8((int8x8_t)vdup_lane_s16((int16x4_t)vand_s8(vand_s8((int8x8_t)vcge_f32(v200, v197), (int8x8_t)vcge_f32(v202, v204)), (int8x8_t)vclez_f32(v187)), 0), *(int8x8_t *)v327.f32).u32[0] != -1)
          {
            v205 = vmulq_f32(v192, v169);
            v205.i64[0] = vpaddq_f32(v205, v205).u64[0];
            v206 = vpadd_f32(*(float32x2_t *)v205.f32, *(float32x2_t *)v205.f32);
            if (vuzp1_s8((int8x8_t)vdup_lane_s16((int16x4_t)vand_s8(vand_s8((int8x8_t)vcgez_f32(v206), (int8x8_t)vclez_f32(v204)), (int8x8_t)vclez_f32(v189)), 0), *(int8x8_t *)v327.f32).u32[0] == -1)
            {
              v231 = vsub_f32(v206, v204);
              v232 = vrecpe_f32(v231);
              v233 = 4;
              v63 = v308;
              do
              {
                v232 = vmul_f32(v232, vrecps_f32(v231, v232));
                --v233;
              }
              while (v233);
              v209 = 0;
              v44 = vmlaq_n_f32(v327, v169, vmul_f32(v206, (float32x2_t)vbsl_s8((int8x8_t)vcgt_f32(vabs_f32(v231), (float32x2_t)0x3400000034000000), (int8x8_t)v232, 0)).f32[0]);
              v44.i64[1] = vextq_s8((int8x16_t)v44, (int8x16_t)v44, 8uLL).u32[0];
              v208 = 2;
              v225 = 2;
            }
            else
            {
              v63 = v308;
              if (vuzp1_s8((int8x8_t)vdup_lane_s16((int16x4_t)vand_s8((int8x8_t)vclez_f32(v206), (int8x8_t)vclez_f32(v195)), 0), *(int8x8_t *)v327.f32).u32[0] == -1)
              {
                v209 = 0;
                v208 = 1;
              }
              else
              {
                *(int16x4_t *)v44.f32 = vdup_lane_s16((int16x4_t)vand_s8((int8x8_t)vcge_f32(v197, v200), (int8x8_t)vcgez_f32(v197)), 0);
                *(int8x8_t *)v44.f32 = vuzp1_s8(*(int8x8_t *)v44.f32, *(int8x8_t *)v44.f32);
                v207 = v44.i32[0];
                v44 = (float32x4_t)vbslq_s8((int8x16_t)vdupq_lane_s32((int32x2_t)*(_OWORD *)&vceqq_s32((int32x4_t)v44, v304), 0), (int8x16_t)v328, (int8x16_t)v329[0]);
                v208 = 1;
                if (v207 == -1)
                  v209 = 1;
                else
                  v209 = 2;
              }
              v225 = 1;
            }
            goto LABEL_100;
          }
          v226 = vsub_f32(v200, v197);
          v227 = vadd_f32(v226, vsub_f32(v202, v204));
          v228 = vrecpe_f32(v227);
          v229 = 4;
          do
          {
            v228 = vmul_f32(v228, vrecps_f32(v227, v228));
            --v229;
          }
          while (v229);
          v230 = (int8x16_t)vmlaq_n_f32(v328, vsubq_f32(v329[0], v328), vmul_f32(v226, (float32x2_t)vbsl_s8((int8x8_t)vcgt_f32(vabs_f32(v227), (float32x2_t)0x3400000034000000), (int8x8_t)v228, 0)).f32[0]);
          v230.i64[1] = vextq_s8(v230, v230, 8uLL).u32[0];
          v208 = 2;
          v44 = (float32x4_t)v230;
          v209 = 1;
          v225 = 2;
        }
        v63 = v308;
LABEL_100:
        v234 = *(&v327 + v209);
        v235 = *(&v327 + v208);
        v236 = *((float32x4_t *)&v324 + v209);
        v237 = *((float32x4_t *)&v324 + v208);
        v238 = *((float32x4_t *)&v321 + v209);
        v239 = *((float32x4_t *)&v321 + v208);
        v240 = *(&v319 + v209);
        v241 = *(&v319 + v208);
        v242 = *(&v317 + v209);
        v243 = *(&v317 + v208);
        v327 = v234;
        v328 = v235;
        v324 = (int8x16_t)v236;
        v325 = v237;
        v321 = (int8x16_t)v238;
        v322 = v239;
        v319 = v240;
        v320 = v241;
        v317 = v242;
        v318 = v243;
        v314 = v225;
        goto LABEL_101;
      }
      v217 = (int8x16_t)vmulq_f32(v327, v170);
      v218 = (float32x2_t)vextq_s8(v217, v217, 8uLL).u64[0];
      v219 = vrecpe_f32(v173);
      v220 = 4;
      v63 = v308;
      do
      {
        v219 = vmul_f32(v219, vrecps_f32(v173, v219));
        --v220;
      }
      while (v220);
      v221 = vpadd_f32(*(float32x2_t *)v217.i8, v218);
      v44 = vmulq_n_f32(v170, vmul_f32(v219, vpadd_f32(v221, v221)).f32[0]);
      v44.i32[3] = 0;
    }
    else
    {
      v63 = v308;
      if ((_DWORD)v159 == 1)
      {
        v44 = v327;
        v160 = vsubq_f32(v328, v327);
        v161 = vmulq_f32(v160, v160);
        v161.i64[0] = vpaddq_f32(v161, v161).u64[0];
        v162 = vpadd_f32(*(float32x2_t *)v161.f32, *(float32x2_t *)v161.f32);
        if (vuzp1_s8((int8x8_t)vdup_lane_s16((int16x4_t)vcge_f32((float32x2_t)0x3400000034000000, v162), 0), *(int8x8_t *)v327.f32).u32[0] == -1)
        {
          v314 = 1;
          goto LABEL_101;
        }
        v163 = vnegq_f32(v327);
        v163.i32[3] = 0;
        v164 = vmulq_f32(v163, v160);
        v164.i64[0] = vpaddq_f32(v164, v164).u64[0];
        v165 = vpadd_f32(*(float32x2_t *)v164.f32, *(float32x2_t *)v164.f32);
        v166 = vrecpe_f32(v162);
        v167 = 4;
        do
        {
          v166 = vmul_f32(v166, vrecps_f32(v162, v166));
          --v167;
        }
        while (v167);
        v44 = vmlaq_n_f32(v327, v160, vmax_f32(vmin_f32(vmul_f32(v165, v166), _D10), 0).f32[0]);
        goto LABEL_81;
      }
    }
LABEL_101:
    v315 = v44;
    v244 = vmulq_f32(v44, v44);
    v244.i64[0] = vpaddq_f32(v244, v244).u64[0];
    v245 = vpadd_f32(*(float32x2_t *)v244.f32, *(float32x2_t *)v244.f32);
    v246 = vrsqrte_f32(v245);
    v247 = 4;
    do
    {
      v246 = vmul_f32(v246, vrsqrts_f32(vmul_f32(v246, v246), v245));
      --v247;
    }
    while (v247);
    v61 = vmul_f32(v245, (float32x2_t)vbsl_s8((int8x8_t)vdup_lane_s32(vceqz_f32(v245), 0), (int8x8_t)_D10, (int8x8_t)v246));
    v248 = vrecpe_f32(v61);
    v249 = 4;
    do
    {
      v248 = vmul_f32(v248, vrecps_f32(v61, v248));
      --v249;
    }
    while (v249);
    v250 = vmulq_n_f32(v44, v248.f32[0]);
    v250.i32[3] = 0;
    v310 = v250;
    *(int32x2_t *)v250.f32 = vcgt_f32(v158, v61);
    v146 = vdupq_lane_s32(*(int32x2_t *)v250.f32, 0);
    v62 = vdupq_lane_s32((int32x2_t)vand_s8((int8x8_t)vcgt_f32(v61, v23), *(int8x8_t *)v250.f32), 0);
  }
  v251 = (int8x8_t)vmovn_s32(vceqzq_s32(v146));
  v252 = v314;
  if (vuzp1_s8(v251, v251).u32[0] == -1)
  {
    if (a3)
    {
      v271 = v314 - 1;
      *a5 = v314 - 1;
      if ((_DWORD)v252 == 1)
      {
LABEL_132:
        v269 = v324;
        v270 = v321;
        goto LABEL_144;
      }
      v272 = &v317;
      v273 = &v319;
      do
      {
        v274 = *v273++;
        *a3++ = v274;
        v275 = *v272++;
        *v11++ = v275;
        --v271;
      }
      while (v271);
    }
    v315 = v63;
    if ((_DWORD)v252 == 3)
    {
      v313.i64[0] = 0;
      v316 = 0;
      v312 = v63;
      physx::Gu::barycentricCoordinates(&v315, &v327, &v328, v329, (float32x2_t *)&v313, &v316);
      v288 = vmulq_n_f32(vsubq_f32(v325, (float32x4_t)v324), v313.f32[0]);
      v288.i32[3] = 0;
      v289 = vmulq_n_f32(vsubq_f32(v326, (float32x4_t)v324), v316.f32[0]);
      v289.i32[3] = 0;
      v290 = vaddq_f32(v288, v289);
      v291 = vmulq_n_f32(vsubq_f32(v322, (float32x4_t)v321), v313.f32[0]);
      v291.i32[3] = 0;
      v269 = (int8x16_t)vaddq_f32((float32x4_t)v324, v290);
      v292 = vmulq_n_f32(vsubq_f32(v323, (float32x4_t)v321), v316.f32[0]);
      v63 = v312;
      v292.i32[3] = 0;
      v270 = (int8x16_t)vaddq_f32((float32x4_t)v321, vaddq_f32(v291, v292));
    }
    else
    {
      if ((_DWORD)v252 == 2)
      {
        v293 = vsubq_f32(v327, v63);
        v294 = vsubq_f32(vsubq_f32(v328, v63), v293);
        v295 = vmulq_f32(v294, v294);
        v295.i64[0] = vpaddq_f32(v295, v295).u64[0];
        v296 = vpadd_f32(*(float32x2_t *)v295.f32, *(float32x2_t *)v295.f32);
        v297 = vrecpe_f32(v296);
        v298 = 4;
        do
        {
          v297 = vmul_f32(v297, vrecps_f32(v296, v297));
          --v298;
        }
        while (v298);
        v299 = vnegq_f32(v293);
        v299.i32[3] = 0;
        v300 = vmulq_f32(v299, v294);
        v300.i64[0] = vpaddq_f32(v300, v300).u64[0];
        v299.i32[0] = vmul_f32((float32x2_t)vbsl_s8((int8x8_t)vcgtz_f32(v296), (int8x8_t)v297, 0), vpadd_f32(*(float32x2_t *)v300.f32, *(float32x2_t *)v300.f32)).u32[0];
        v269 = (int8x16_t)vmlaq_n_f32((float32x4_t)v324, vsubq_f32(v325, (float32x4_t)v324), v299.f32[0]);
        v269.i64[1] = vextq_s8(v269, v269, 8uLL).u32[0];
        v270 = (int8x16_t)vmlaq_n_f32((float32x4_t)v321, vsubq_f32(v322, (float32x4_t)v321), v299.f32[0]);
        v270.i64[1] = vextq_s8(v270, v270, 8uLL).u32[0];
        goto LABEL_144;
      }
      v269 = 0uLL;
      v270 = 0uLL;
      if ((_DWORD)v252 == 1)
        goto LABEL_132;
    }
LABEL_144:
    v301 = vrecpe_f32(i);
    v302 = 4;
    do
    {
      v301 = vmul_f32(v301, vrecps_f32(i, v301));
      --v302;
    }
    while (v302);
    v303 = vmulq_n_f32(v63, v301.f32[0]);
    v303.i32[3] = 0;
    v268 = a6;
    a6[2] = v303;
    a6[3] = v310;
    result = 4;
    v158 = i;
    goto LABEL_147;
  }
  if (a3)
  {
    *a5 = v314;
    if ((_DWORD)v252)
    {
      v253 = &v317;
      v254 = &v319;
      do
      {
        v255 = *v254++;
        *a3++ = v255;
        v256 = *v253++;
        *v11++ = v256;
        --v252;
      }
      while (v252);
    }
  }
  return 5;
}

uint64_t physx::Gu::generateOrProcessContactsBoxConvex(uint64_t a1, uint64_t a2, uint64_t a3, int32x4_t *a4, float32x4_t *a5, int a6, uint64_t a7, uint64_t a8, float32x2_t a9, float32x2_t a10, double a11, float32x4_t *a12, unsigned int a13, char a14)
{
  uint64_t v23;
  float32x4_t *v24;
  float32x4_t v25;
  uint64_t v26;
  float32x4_t *v27;
  float32x4_t v28;
  float32x4_t v29;
  float32x2_t v30;
  float32x2_t v31;
  int v32;
  float32x2_t v33;
  float32x2_t v34;
  int v35;
  float32x4_t v36;
  _BOOL8 v37;
  int v38;
  float32x4_t v39;
  float32x4_t v40;
  int32x4_t v41;
  char v44;
  uint64_t v45;
  float32x4_t *v46;
  uint64_t (**v47)();
  uint64_t v48;
  int8x16_t v49;
  unint64_t v50;
  float32x4_t v51;
  unint64_t v52;
  float32x4_t *v53;
  float32x4_t v54;
  float32x4_t v55;
  float32x4_t v56;
  float32x4_t *v57;
  float32x4_t v58;
  float32x2_t v59;
  float32x4_t v60;
  float32x2_t v61;
  float32x2_t v62;
  int8x8_t v63;
  float32x4_t v64;
  float32x4_t v65;
  float32x4_t v66;
  float32x4_t v67;
  float32x4_t v68;
  float32x4_t v69;
  float32x2_t v70;
  float32x2_t v71;
  int v72;
  float32x2_t v73;
  float32x2_t v74;
  int v75;
  float32x4_t v76;
  uint64_t v77;
  float32x4_t v78;
  float32x4_t v79;
  float32x2_t v80;
  float32x4_t v81;
  float32x2_t v82;
  int8x8_t v83;
  float32x4_t v84;
  float32x4_t v85;
  float32x4_t v86;
  float32x4_t v87;
  float32x4_t v88;
  float32x4_t v89;
  float32x2_t v90;
  float32x2_t v91;
  int v92;
  float32x2_t v93;
  float32x2_t v94;
  int v95;
  float32x4_t v96;
  uint64_t v97;
  int8x16_t v98;
  unint64_t v99;
  float32x4_t v100;
  unint64_t v101;
  float32x4_t *v102;
  float32x4_t v103;
  float32x4_t v104;
  float32x4_t v105;
  float32x4_t v106;
  float32x2_t v107;
  float32x4_t v108;
  float32x2_t v109;
  float32x2_t v110;
  int8x8_t v111;
  float32x4_t v112;
  float32x4_t v113;
  float32x4_t v114;
  float32x4_t v115;
  float32x4_t v116;
  float32x4_t v117;
  float32x2_t v118;
  float32x2_t v119;
  int v120;
  float32x2_t v121;
  float32x2_t v122;
  int v123;
  float32x4_t v124;
  float32x4_t v127;
  float32x2_t v128;
  float32x4_t v129;
  unsigned int v130;
  _OWORD v131[3];
  _BYTE v132[104];
  float32x4_t v133;
  uint64_t v134;
  uint64_t v135;
  __int32 v136;
  uint64_t v137;
  int v138;
  uint64_t v139;
  int v140;
  uint64_t *v141;
  char *v142;
  void *v143;
  __int128 v144;
  __int128 v145;
  _QWORD v146[7];
  char v147;
  float32x4_t *v148;
  _QWORD v149[7];
  char v150;
  uint64_t v151;
  uint64_t v152;

  v152 = *MEMORY[0x24BDAC8D0];
  v128 = a10;
  if (!a6)
    return 0;
  __asm { FMOV            V8.2S, #1.0 }
  v23 = *(unsigned __int8 *)(a8 + 64);
  if (*(_BYTE *)(a8 + 64))
  {
    v24 = *(float32x4_t **)(a8 + 80);
    v25 = v24[2];
    if ((_DWORD)v23 != 1)
    {
      v26 = v23 - 1;
      v27 = v24 + 5;
      do
      {
        v28 = *v27;
        v27 += 3;
        v25 = vaddq_f32(v25, v28);
        --v26;
      }
      while (v26);
    }
    v25.i32[3] = 0;
    v29 = vmulq_f32(v25, v25);
    v29.i64[0] = vpaddq_f32(v29, v29).u64[0];
    v30 = vpadd_f32(*(float32x2_t *)v29.f32, *(float32x2_t *)v29.f32);
    v31 = vrsqrte_f32(v30);
    v32 = 4;
    do
    {
      v31 = vmul_f32(v31, vrsqrts_f32(vmul_f32(v31, v31), v30));
      --v32;
    }
    while (v32);
    v33 = vmul_f32(v30, (float32x2_t)vbsl_s8((int8x8_t)vdup_lane_s32(vceqz_f32(v30), 0), _D8, (int8x8_t)v31));
    v34 = vrecpe_f32(v33);
    v35 = 4;
    do
    {
      v34 = vmul_f32(v34, vrecps_f32(v33, v34));
      --v35;
    }
    while (v35);
    v36 = vmulq_n_f32(v25, v34.f32[0]);
    v36.i32[3] = 0;
  }
  else
  {
    v36 = 0uLL;
  }
  v127 = v36;
  v38 = physx::Gu::addGJKEPAContacts(a1, a2, a5, a6, a12, (float32x4_t *)a7, a8, vmul_f32(a9, (float32x2_t)vdup_n_s32(0x3D4CCCCDu)));
  v39 = *(float32x4_t *)(a7 + 32);
  v40 = vmulq_f32(v127, v39);
  v41 = (int32x4_t)vpaddq_f32(v40, v40);
  if (vpadd_f32(*(float32x2_t *)v41.i8, *(float32x2_t *)v41.i8).f32[0] >= 0.70711
    && *(unsigned __int8 *)(a8 + 64) >= a13
    && v38 == 0)
  {
    v78 = vaddq_f32(v127, v39);
    v79 = *(float32x4_t *)a4;
    v79.i32[3] = 0;
    v80 = (float32x2_t)vdupq_laneq_s32(*a4, 3).u64[0];
    v81 = vmulq_n_f32(v78, vmla_f32((float32x2_t)0xBF000000BF000000, v80, v80).f32[0]);
    v81.i32[3] = 0;
    v82 = (float32x2_t)vextq_s8((int8x16_t)v79, (int8x16_t)v79, 8uLL).u64[0];
    v83 = (int8x8_t)vmls_f32(vmul_f32((float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v78, (int8x16_t)v78, 4uLL), *(float32x2_t *)a4->i8), (float32x2_t)vext_s8(*(int8x8_t *)a4->i8, (int8x8_t)v82, 4uLL), *(float32x2_t *)v78.f32);
    *(int8x8_t *)v84.f32 = vext_s8(v83, (int8x8_t)vmls_f32(vmul_f32(*(float32x2_t *)v78.f32, v82), *(float32x2_t *)a4->i8, (float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v78, (int8x16_t)v78, 8uLL)), 4uLL);
    v84.i64[1] = v83.u32[0];
    v85 = vmlaq_laneq_f32(v81, v84, *(float32x4_t *)a4, 3);
    v85.i64[1] = vextq_s8((int8x16_t)v85, (int8x16_t)v85, 8uLL).u32[0];
    v86 = vmulq_f32(v78, v79);
    v86.i64[0] = vpaddq_f32(v86, v86).u64[0];
    v87 = vmlaq_n_f32(v85, v79, vpadd_f32(*(float32x2_t *)v86.f32, *(float32x2_t *)v86.f32).f32[0]);
    v88 = vaddq_f32(v87, v87);
    v88.i32[3] = 0;
    v89 = vmulq_f32(v88, v88);
    v89.i64[0] = vpaddq_f32(v89, v89).u64[0];
    v90 = vpadd_f32(*(float32x2_t *)v89.f32, *(float32x2_t *)v89.f32);
    v91 = vrsqrte_f32(v90);
    v92 = 4;
    do
    {
      v91 = vmul_f32(v91, vrsqrts_f32(vmul_f32(v91, v91), v90));
      --v92;
    }
    while (v92);
    v93 = vmul_f32(v90, (float32x2_t)vbsl_s8((int8x8_t)vdup_lane_s32(vceqz_f32(v90), 0), _D8, (int8x8_t)v91));
    v94 = vrecpe_f32(v93);
    v95 = 4;
    do
    {
      v94 = vmul_f32(v94, vrecps_f32(v93, v94));
      --v95;
    }
    while (v95);
    v96 = vmulq_n_f32(v88, v94.f32[0]);
    v96.i32[3] = 0;
    v133 = v96;
    physx::Gu::PersistentContactManifold::addManifoldContactsToContactBuffer(a8, (uint64_t)a12, &v133, (float32x4_t *)a4, (uint64_t *)&v128);
    return 1;
  }
  else
  {
    v44 = v38;
    v45 = *(_QWORD *)(a1 + 8);
    v46 = *(float32x4_t **)(a2 + 8);
    v39.i32[0] = *(_DWORD *)(v45 + 56);
    v135 = *(_QWORD *)(v45 + 48);
    v41.i64[0] = v135;
    v136 = v39.i32[0];
    physx::Gu::PolygonalBox::PolygonalBox((uint64_t)&v133, (uint64_t)&v135, *(double *)v39.i64, v41);
    v137 = 0;
    v138 = 0;
    v139 = 0x600000008;
    v140 = 0;
    v141 = &v134;
    v142 = &v133.i8[8];
    v144 = 0u;
    v145 = 0u;
    v143 = &physx::Gu::gPCMBoxPolygonData;
    physx::Gu::getPCMConvexData(v46, a14, (uint64_t)v132);
    v131[0] = xmmword_2260E5F10;
    v131[1] = xmmword_2260E5F20;
    v131[2] = xmmword_2260E5F40;
    v149[5] = v131;
    v149[6] = v131;
    v150 = 1;
    v149[4] = a3;
    v149[0] = &off_24ED90FE0;
    v151 = v45;
    v146[5] = v46 + 3;
    v146[6] = v46 + 6;
    v47 = &off_24ED91040;
    if (!a14)
      v47 = &off_24ED91090;
    v147 = a14;
    v146[4] = a4;
    v146[0] = v47;
    v148 = v46;
    v130 = 0;
    v37 = physx::Gu::generateFullContactManifold((uint64_t)&v137, (uint64_t)v132, v149, v146, (uint64_t)a12, &v130, &v128, (float32x4_t *)(a7 + 32), *(float *)(v45 + 16), v46[1].f32[0], *(float *)&a11, (float32x4_t *)a7, (float32x2_t *)(a7 + 16), v44);
    if (v37)
    {
      if (v130)
      {
        physx::Gu::PersistentContactManifold::addBatchManifoldContacts(a8, (int32x4_t *)a12, v130, a11);
        v48 = *(_QWORD *)(a8 + 80);
        v49 = *(int8x16_t *)(v48 + 32);
        v50 = *(unsigned __int8 *)(a8 + 64);
        v51 = (float32x4_t)v49;
        if (v50 >= 2)
        {
          v52 = v50 - 1;
          v53 = (float32x4_t *)(v48 + 80);
          v51 = (float32x4_t)v49;
          do
          {
            v54 = *v53;
            v53 += 3;
            v51 = vaddq_f32(v51, v54);
            --v52;
          }
          while (v52);
        }
        v51.i32[3] = 0;
        v55 = vmulq_f32(v51, v51);
        v55.i64[0] = vpaddq_f32(v55, v55).u64[0];
        v49.i32[3] = 0;
        v56 = (float32x4_t)vbslq_s8((int8x16_t)vcltzq_s32(vshlq_n_s32(vdupq_lane_s32(vcgt_f32(vpadd_f32(*(float32x2_t *)v55.f32, *(float32x2_t *)v55.f32), (float32x2_t)0x3400000034000000), 0), 0x1FuLL)), (int8x16_t)v51, v49);
        v57 = (float32x4_t *)a4;
        v58 = *(float32x4_t *)a4;
        v58.i32[3] = 0;
        v59 = (float32x2_t)vdupq_laneq_s32(*a4, 3).u64[0];
        v60 = vmulq_n_f32(v56, vmla_f32((float32x2_t)0xBF000000BF000000, v59, v59).f32[0]);
        v60.i32[3] = 0;
        v61 = (float32x2_t)vextq_s8((int8x16_t)v58, (int8x16_t)v58, 8uLL).u64[0];
        v62 = (float32x2_t)vextq_s8((int8x16_t)v56, (int8x16_t)v56, 8uLL).u64[0];
        v63 = (int8x8_t)vmls_f32(vmul_f32(*(float32x2_t *)a4->i8, (float32x2_t)vext_s8(*(int8x8_t *)v56.f32, (int8x8_t)v62, 4uLL)), (float32x2_t)vext_s8(*(int8x8_t *)a4->i8, (int8x8_t)v61, 4uLL), *(float32x2_t *)v56.f32);
        *(int8x8_t *)v64.f32 = vext_s8(v63, (int8x8_t)vmls_f32(vmul_f32(v61, *(float32x2_t *)v56.f32), *(float32x2_t *)a4->i8, v62), 4uLL);
        v64.i64[1] = v63.u32[0];
        v65 = vmlaq_laneq_f32(v60, v64, *(float32x4_t *)a4, 3);
        v65.i64[1] = vextq_s8((int8x16_t)v65, (int8x16_t)v65, 8uLL).u32[0];
        v66 = vmulq_f32(v58, v56);
        v66.i64[0] = vpaddq_f32(v66, v66).u64[0];
        v67 = vmlaq_n_f32(v65, v58, vpadd_f32(*(float32x2_t *)v66.f32, *(float32x2_t *)v66.f32).f32[0]);
        v68 = vaddq_f32(v67, v67);
        v68.i32[3] = 0;
        v69 = vmulq_f32(v68, v68);
        v69.i64[0] = vpaddq_f32(v69, v69).u64[0];
        v70 = vpadd_f32(*(float32x2_t *)v69.f32, *(float32x2_t *)v69.f32);
        v71 = vrsqrte_f32(v70);
        v72 = 4;
        do
        {
          v71 = vmul_f32(v71, vrsqrts_f32(vmul_f32(v71, v71), v70));
          --v72;
        }
        while (v72);
        v73 = vmul_f32(v70, (float32x2_t)vbsl_s8((int8x8_t)vdup_lane_s32(vceqz_f32(v70), 0), _D8, (int8x8_t)v71));
        v74 = vrecpe_f32(v73);
        v75 = 4;
        do
        {
          v74 = vmul_f32(v74, vrecps_f32(v73, v74));
          --v75;
        }
        while (v75);
        v76 = vmulq_n_f32(v68, v74.f32[0]);
        v76.i32[3] = 0;
        v129 = v76;
        v77 = a8;
LABEL_46:
        physx::Gu::PersistentContactManifold::addManifoldContactsToContactBuffer(v77, (uint64_t)a12, &v129, v57, (uint64_t *)&v128);
        return v37;
      }
      if ((v44 & 1) == 0)
      {
        v77 = a8;
        v97 = *(_QWORD *)(a8 + 80);
        v98 = *(int8x16_t *)(v97 + 32);
        v99 = *(unsigned __int8 *)(a8 + 64);
        v100 = (float32x4_t)v98;
        if (v99 >= 2)
        {
          v101 = v99 - 1;
          v102 = (float32x4_t *)(v97 + 80);
          v100 = (float32x4_t)v98;
          do
          {
            v103 = *v102;
            v102 += 3;
            v100 = vaddq_f32(v100, v103);
            --v101;
          }
          while (v101);
        }
        v100.i32[3] = 0;
        v104 = vmulq_f32(v100, v100);
        v104.i64[0] = vpaddq_f32(v104, v104).u64[0];
        v98.i32[3] = 0;
        v105 = (float32x4_t)vbslq_s8((int8x16_t)vcltzq_s32(vshlq_n_s32(vdupq_lane_s32(vcgt_f32(vpadd_f32(*(float32x2_t *)v104.f32, *(float32x2_t *)v104.f32), (float32x2_t)0x3400000034000000), 0), 0x1FuLL)), (int8x16_t)v100, v98);
        v57 = (float32x4_t *)a4;
        v106 = *(float32x4_t *)a4;
        v106.i32[3] = 0;
        v107 = (float32x2_t)vdupq_laneq_s32(*a4, 3).u64[0];
        v108 = vmulq_n_f32(v105, vmla_f32((float32x2_t)0xBF000000BF000000, v107, v107).f32[0]);
        v108.i32[3] = 0;
        v109 = (float32x2_t)vextq_s8((int8x16_t)v106, (int8x16_t)v106, 8uLL).u64[0];
        v110 = (float32x2_t)vextq_s8((int8x16_t)v105, (int8x16_t)v105, 8uLL).u64[0];
        v111 = (int8x8_t)vmls_f32(vmul_f32(*(float32x2_t *)a4->i8, (float32x2_t)vext_s8(*(int8x8_t *)v105.f32, (int8x8_t)v110, 4uLL)), (float32x2_t)vext_s8(*(int8x8_t *)a4->i8, (int8x8_t)v109, 4uLL), *(float32x2_t *)v105.f32);
        *(int8x8_t *)v112.f32 = vext_s8(v111, (int8x8_t)vmls_f32(vmul_f32(v109, *(float32x2_t *)v105.f32), *(float32x2_t *)a4->i8, v110), 4uLL);
        v112.i64[1] = v111.u32[0];
        v113 = vmlaq_laneq_f32(v108, v112, *(float32x4_t *)a4, 3);
        v113.i64[1] = vextq_s8((int8x16_t)v113, (int8x16_t)v113, 8uLL).u32[0];
        v114 = vmulq_f32(v106, v105);
        v114.i64[0] = vpaddq_f32(v114, v114).u64[0];
        v115 = vmlaq_n_f32(v113, v106, vpadd_f32(*(float32x2_t *)v114.f32, *(float32x2_t *)v114.f32).f32[0]);
        v116 = vaddq_f32(v115, v115);
        v116.i32[3] = 0;
        v117 = vmulq_f32(v116, v116);
        v117.i64[0] = vpaddq_f32(v117, v117).u64[0];
        v118 = vpadd_f32(*(float32x2_t *)v117.f32, *(float32x2_t *)v117.f32);
        v119 = vrsqrte_f32(v118);
        v120 = 4;
        do
        {
          v119 = vmul_f32(v119, vrsqrts_f32(vmul_f32(v119, v119), v118));
          --v120;
        }
        while (v120);
        v121 = vmul_f32(v118, (float32x2_t)vbsl_s8((int8x8_t)vdup_lane_s32(vceqz_f32(v118), 0), _D8, (int8x8_t)v119));
        v122 = vrecpe_f32(v121);
        v123 = 4;
        do
        {
          v122 = vmul_f32(v122, vrecps_f32(v121, v122));
          --v123;
        }
        while (v123);
        v124 = vmulq_n_f32(v116, v122.f32[0]);
        v124.i32[3] = 0;
        v129 = v124;
        goto LABEL_46;
      }
    }
  }
  return v37;
}

BOOL physx::PxTriangleMesh::isKindOf(physx::PxTriangleMesh *this, const char *a2)
{
  return !strcmp("PxTriangleMesh", a2) || strcmp(a2, "PxBase") == 0;
}

uint64_t physx::Gu::TriangleMesh::getNbVertices(physx::Gu::TriangleMesh *this)
{
  return *((unsigned int *)this + 7);
}

uint64_t physx::Gu::TriangleMesh::getVertices(physx::Gu::TriangleMesh *this)
{
  return *((_QWORD *)this + 5);
}

uint64_t physx::Gu::TriangleMesh::getNbTriangles(physx::Gu::TriangleMesh *this)
{
  return *((unsigned int *)this + 8);
}

uint64_t physx::Gu::TriangleMesh::getTriangles(physx::Gu::TriangleMesh *this)
{
  return *((_QWORD *)this + 6);
}

uint64_t physx::Gu::TriangleMesh::getTriangleMeshFlags@<X0>(uint64_t this@<X0>, _BYTE *a2@<X8>)
{
  *a2 = *(_BYTE *)(this + 92);
  return this;
}

uint64_t physx::Gu::TriangleMesh::getTrianglesRemap(physx::Gu::TriangleMesh *this)
{
  return *((_QWORD *)this + 13);
}

uint64_t physx::Gu::TriangleMesh::getTriangleMaterialIndex(physx::Gu::TriangleMesh *this, unsigned int a2)
{
  uint64_t v2;

  v2 = *((_QWORD *)this + 12);
  if (v2)
    return *(unsigned __int16 *)(v2 + 2 * a2);
  else
    return 0xFFFFLL;
}

float physx::Gu::TriangleMesh::getLocalBounds@<S0>(physx::Gu::TriangleMesh *this@<X0>, uint64_t a2@<X8>)
{
  float v2;
  float32x4_t v3;
  float32x4_t v4;
  __int128 v5;
  float result;

  v2 = *((float *)this + 19);
  v3 = *(float32x4_t *)((char *)this + 60);
  v4 = (float32x4_t)vextq_s8((int8x16_t)v3, vextq_s8((int8x16_t)v3, (int8x16_t)v3, 8uLL), 0xCuLL);
  v4.f32[1] = v2;
  *(_QWORD *)&v5 = vsubq_f32(v3, v4).u64[0];
  v4.i32[2] = *((_DWORD *)this + 14);
  *((_QWORD *)&v5 + 1) = vaddq_f32(v3, v4).i64[1];
  v3.i32[0] = HIDWORD(*(_QWORD *)((char *)this + 60));
  *(float *)a2 = v4.f32[2] - COERCE_FLOAT(*(_QWORD *)((char *)this + 68));
  result = v3.f32[0] + v2;
  *(_OWORD *)(a2 + 4) = v5;
  *(float *)(a2 + 20) = v3.f32[0] + v2;
  return result;
}

uint64_t physx::Gu::TriangleMesh::getReferenceCount(physx::Gu::TriangleMesh *this)
{
  return *((unsigned int *)this + 6);
}

uint64_t physx::Gu::TriangleMesh::acquireReference(uint64_t this)
{
  unsigned int *v1;
  unsigned int v2;

  v1 = (unsigned int *)(this + 24);
  do
    v2 = __ldaxr(v1);
  while (__stlxr(v2 + 1, v1));
  return this;
}

void physx::Gu::SweepBoxMeshHitCallback::~SweepBoxMeshHitCallback(physx::Gu::SweepBoxMeshHitCallback *this)
{
  JUMPOUT(0x2276933B8);
}

void physx::Gu::SweepConvexMeshHitCallback::~SweepConvexMeshHitCallback(physx::Gu::SweepConvexMeshHitCallback *this)
{
  JUMPOUT(0x2276933B8);
}

void physx::Gu::SweepCapsuleMeshHitCallback::~SweepCapsuleMeshHitCallback(physx::Gu::SweepCapsuleMeshHitCallback *this)
{
  JUMPOUT(0x2276933B8);
}

const char *physx::Gu::BV4TriangleMesh::getConcreteTypeName(physx::Gu::BV4TriangleMesh *this)
{
  return "PxBVH34TriangleMesh";
}

void physx::Gu::BV4TriangleMesh::~BV4TriangleMesh(physx::Gu::BV4TriangleMesh *this)
{
  uint64_t v2;

  physx::Gu::BV4TriangleMesh::~BV4TriangleMesh(this);
  if (v2)
    (*(void (**)(uint64_t, physx::Gu::BV4TriangleMesh *))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24)
                                                                  + 24))(physx::shdfnd::Foundation::mInstance + 24, this);
}

{
  *(_QWORD *)this = off_24ED92220;
  *((_QWORD *)this + 2) = &unk_24ED922E0;
  if (!*((_BYTE *)this + 276) && *((_QWORD *)this + 30))
    (*(void (**)(uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
  *((_QWORD *)this + 26) = 0;
  *((_DWORD *)this + 58) = 0;
  *((_OWORD *)this + 15) = 0u;
  *((_OWORD *)this + 16) = 0u;
  *(_QWORD *)((char *)this + 270) = 0;
  if (*((_QWORD *)this + 22))
    (*(void (**)(uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
  *((_QWORD *)this + 22) = 0;
  physx::Gu::TriangleMesh::~TriangleMesh(this);
}

uint64_t physx::Gu::BV4TriangleMesh::getMidphaseID(physx::Gu::BV4TriangleMesh *this)
{
  return 1;
}

void `non-virtual thunk to'physx::Gu::BV4TriangleMesh::~BV4TriangleMesh(physx::Gu::BV4TriangleMesh *this)
{
  physx::Gu::BV4TriangleMesh::~BV4TriangleMesh((physx::Gu::BV4TriangleMesh *)((char *)this - 16));
}

{
  char *v1;

  v1 = (char *)this - 16;
  physx::Gu::BV4TriangleMesh::~BV4TriangleMesh((physx::Gu::BV4TriangleMesh *)((char *)this - 16));
  (*(void (**)(uint64_t, char *))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24, v1);
}

const char *physx::Gu::RTreeTriangleMesh::getConcreteTypeName(physx::Gu::RTreeTriangleMesh *this)
{
  return "PxBVH33TriangleMesh";
}

void physx::Gu::RTreeTriangleMesh::~RTreeTriangleMesh(physx::Gu::RTreeTriangleMesh *this)
{
  uint64_t v2;

  *(_QWORD *)this = off_24ED92308;
  *((_QWORD *)this + 2) = &unk_24ED923C8;
  if ((*((_BYTE *)this + 244) & 1) == 0)
  {
    v2 = *((_QWORD *)this + 31);
    if (v2)
    {
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24, v2 - *(_QWORD *)(v2 - 8));
      *((_QWORD *)this + 31) = 0;
    }
  }
  physx::Gu::TriangleMesh::~TriangleMesh(this);
}

{
  uint64_t v2;

  *(_QWORD *)this = off_24ED92308;
  *((_QWORD *)this + 2) = &unk_24ED923C8;
  if ((*((_BYTE *)this + 244) & 1) == 0)
  {
    v2 = *((_QWORD *)this + 31);
    if (v2)
    {
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24, v2 - *(_QWORD *)(v2 - 8));
      *((_QWORD *)this + 31) = 0;
    }
  }
  physx::Gu::TriangleMesh::~TriangleMesh(this);
  (*(void (**)(uint64_t, physx::Gu::RTreeTriangleMesh *))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24)
                                                                  + 24))(physx::shdfnd::Foundation::mInstance + 24, this);
}

uint64_t physx::Gu::RTreeTriangleMesh::getMidphaseID(physx::Gu::RTreeTriangleMesh *this)
{
  return 0;
}

void `non-virtual thunk to'physx::Gu::RTreeTriangleMesh::~RTreeTriangleMesh(physx::Gu::RTreeTriangleMesh *this)
{
  physx::Gu::TriangleMesh *v1;
  uint64_t v3;

  *((_QWORD *)this - 2) = off_24ED92308;
  v1 = (physx::Gu::RTreeTriangleMesh *)((char *)this - 16);
  *(_QWORD *)this = &unk_24ED923C8;
  if ((*((_BYTE *)this + 228) & 1) == 0)
  {
    v3 = *((_QWORD *)this + 29);
    if (v3)
    {
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24, v3 - *(_QWORD *)(v3 - 8));
      *((_QWORD *)this + 29) = 0;
    }
  }
  physx::Gu::TriangleMesh::~TriangleMesh(v1);
}

{
  physx::Gu::RTreeTriangleMesh::~RTreeTriangleMesh((physx::Gu::RTreeTriangleMesh *)((char *)this - 16));
}

uint64_t physx::Gu::unsupportedCapsuleSweepMidphase(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  char vars0;

  if (!physx::Gu::Midphase::outputError(void)::reportOnlyOnce)
  {
    physx::Gu::Midphase::outputError(void)::reportOnlyOnce = 1;
    physx::shdfnd::Foundation::error(physx::shdfnd::Foundation::mInstance, 8, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/common/src/../../geomutils/src/mesh/GuMidphaseInterface.h", 175, "BV4 midphase only supported on Intel platforms.", a6, a7, a8, vars0);
  }
  return 0;
}

uint64_t physx::Gu::unsupportedBoxSweepMidphase(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  char vars0;

  if (!physx::Gu::Midphase::outputError(void)::reportOnlyOnce)
  {
    physx::Gu::Midphase::outputError(void)::reportOnlyOnce = 1;
    physx::shdfnd::Foundation::error(physx::shdfnd::Foundation::mInstance, 8, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/common/src/../../geomutils/src/mesh/GuMidphaseInterface.h", 175, "BV4 midphase only supported on Intel platforms.", a6, a7, a8, vars0);
  }
  return 0;
}

uint64_t physx::Gu::unsupportedConvexSweepMidphase(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, char a9)
{
  uint64_t result;

  if (!physx::Gu::Midphase::outputError(void)::reportOnlyOnce)
  {
    physx::Gu::Midphase::outputError(void)::reportOnlyOnce = 1;
    return physx::shdfnd::Foundation::error(physx::shdfnd::Foundation::mInstance, 8, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/common/src/../../geomutils/src/mesh/GuMidphaseInterface.h", 175, "BV4 midphase only supported on Intel platforms.", a6, a7, a8, a9);
  }
  return result;
}

uint64_t _BuildBV32(uint64_t *a1, uint64_t a2, uint64_t a3, _DWORD *a4, double a5)
{
  _DWORD *v8;
  unsigned int v9;
  uint64_t result;
  unsigned int v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  float v15;
  unint64_t v16;
  float32x2_t v17;
  uint64_t v23;
  float32_t v24;
  float32x2_t *v25;
  float32x2_t v26;
  float v27;
  float32x2_t *v28;
  uint64_t v29;
  const char *v30;
  uint64_t v31;
  uint64_t i;
  uint64_t v33;
  int v34;
  uint64_t v35;
  uint64_t v36;
  float32_t v37;
  float32x2_t *v38;
  float32x2_t v39;
  float v40;
  float32x2_t *v41;
  __n128 v42;
  _OWORD v43[16];
  uint64_t v44;

  v42.n128_f64[0] = a5;
  v44 = *MEMORY[0x24BDAC8D0];
  v8 = (_DWORD *)(a2 + 1288);
  memset(v43, 0, sizeof(v43));
  v9 = 31;
  result = fillInNodes(a3, 0, 0x1Fu, (uint64_t)v43, (_DWORD *)(a2 + 1288));
  v11 = 0;
  do
  {
    v12 = v11;
    if (v9 <= v11 + 1)
      ++v11;
    else
      v11 = v9;
    while (*((_QWORD *)v43 + v12))
    {
      if (++v12 >= (unint64_t)v9)
        goto LABEL_13;
    }
    if (v9 > v12)
    {
      while (!*((_QWORD *)v43 + v9))
      {
        if (--v9 <= v12)
          goto LABEL_16;
      }
    }
    v11 = v12;
LABEL_13:
    if (v11 != v9)
    {
      v13 = *((_QWORD *)v43 + v9);
      *((_QWORD *)v43 + v9) = *((_QWORD *)v43 + v11);
      *((_QWORD *)v43 + v11) = v13;
    }
  }
  while (v11 < v9);
LABEL_16:
  *a4 += *v8;
  v14 = *v8;
  v15 = v42.n128_f32[0];
  if ((_DWORD)v14)
  {
    v16 = 0;
    v17 = (float32x2_t)vdup_lane_s32((int32x2_t)v42.n128_u64[0], 0);
    __asm { FMOV            V11.2S, #-1.0 }
    do
    {
      v23 = *((_QWORD *)v43 + v16);
      if (v23)
      {
        if (*(_QWORD *)(v23 + 24))
        {
          v24 = (float)(*(float *)(v23 + 8) + *(float *)(v23 + 20)) * 0.5;
          v25 = (float32x2_t *)(a2 + 40 * v16);
          v25[1] = vmul_f32(vadd_f32(*(float32x2_t *)v23, *(float32x2_t *)(v23 + 12)), (float32x2_t)0x3F0000003F000000);
          v25[2].f32[0] = v24;
          v26 = vmul_f32(vsub_f32(*(float32x2_t *)(v23 + 12), *(float32x2_t *)v23), (float32x2_t)0x3F0000003F000000);
          v27 = (float)(*(float *)(v23 + 20) - *(float *)(v23 + 8)) * 0.5;
          v25[3] = v26;
          v28 = v25 + 3;
          v28[1].f32[0] = v27;
          if (v15 != 0.0)
          {
            *v28 = vadd_f32(v26, v17);
            v28[1].f32[0] = v27 + v15;
          }
          v29 = physx::shdfnd::Foundation::mInstance;
          if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)physx::shdfnd::Foundation::mInstance + 40))(physx::shdfnd::Foundation::mInstance))
            v30 = "static const char *physx::shdfnd::ReflectionAllocator<BV32Node>::getName() [T = BV32Node]";
          else
            v30 = "<allocation names disabled>";
          v31 = (*(uint64_t (**)(uint64_t, uint64_t, const char *, const char *, uint64_t))(*(_QWORD *)(v29 + 24)
                                                                                                 + 16))(v29 + 24, 1296, v30, "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/common/src/../../geomutils/src/mesh/GuBV32Build.cpp", 147);
          for (i = 0; i != 1280; i += 40)
          {
            v33 = v31 + i;
            *(_QWORD *)(v33 + 40) = 0xFFFFFFFFLL;
            *(_QWORD *)(v33 + 8) = 0;
            *(_QWORD *)(v33 + 16) = 0;
            *(_QWORD *)(v33 + 24) = _D11;
            *(_DWORD *)(v33 + 32) = -1082130432;
          }
          *(_DWORD *)(v31 + 1288) = 0;
          *(_QWORD *)(a2 + 40 * v16 + 40) = v31;
          result = _BuildBV32(a1, v42);
          v15 = v42.n128_f32[0];
          v14 = *(unsigned int *)(a2 + 1288);
        }
        else
        {
          v34 = *(_DWORD *)(v23 + 40);
          v35 = *a1;
          v36 = *(_QWORD *)(v23 + 32);
          v37 = (float)(*(float *)(v23 + 8) + *(float *)(v23 + 20)) * 0.5;
          v38 = (float32x2_t *)(a2 + 40 * v16);
          v38[1] = vmul_f32(vadd_f32(*(float32x2_t *)v23, *(float32x2_t *)(v23 + 12)), (float32x2_t)0x3F0000003F000000);
          v38[2].f32[0] = v37;
          v39 = vmul_f32(vsub_f32(*(float32x2_t *)(v23 + 12), *(float32x2_t *)v23), (float32x2_t)0x3F0000003F000000);
          v40 = (float)(*(float *)(v23 + 20) - *(float *)(v23 + 8)) * 0.5;
          v38[3] = v39;
          v41 = v38 + 3;
          v41[1].f32[0] = v40;
          if (v15 != 0.0)
          {
            *v41 = vadd_f32(v39, v17);
            v41[1].f32[0] = v40 + v15;
          }
          *(_QWORD *)(a2 + 40 * v16 + 40) = (2
                                           * (v34 & 0x8000003F | ((((v36 - v35) >> 2) & 0x1FFFFFF) << 6))) | 1;
        }
      }
      ++v16;
    }
    while (v16 < v14);
  }
  return result;
}

uint64_t BuildBV32Internal(physx::Gu::BV32Tree &,physx::Gu::AABBTree const&,physx::Gu::SourceMesh *,float)::Local::_Flatten(uint64_t a1, unsigned int a2, int *a3, uint64_t a4, unsigned int *a5, unsigned int *a6)
{
  unsigned int v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unsigned int v18;
  __int128 v19;
  uint64_t v20;
  int v21;
  uint64_t v22;
  uint64_t *v23;
  unsigned int *v24;
  uint64_t v25;
  unsigned int v26;
  uint64_t v27;
  uint64_t result;
  _OWORD v29[16];
  _OWORD v30[8];
  uint64_t v31;

  v31 = *MEMORY[0x24BDAC8D0];
  v11 = *a6 + 1;
  *a6 = v11;
  if (v11 > *a5)
    *a5 = v11;
  v12 = *(unsigned int *)(a4 + 1288);
  if (!(_DWORD)v12)
    return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24, a4);
  v13 = 0;
  v14 = a4 + 24;
  do
  {
    v15 = a1 + 40 * (a2 + v13);
    *(_QWORD *)v15 = *(_QWORD *)(v14 - 16);
    *(_DWORD *)(v15 + 8) = *(_DWORD *)(v14 - 8);
    *(_QWORD *)(v15 + 16) = *(_QWORD *)v14;
    *(_DWORD *)(v15 + 24) = *(_DWORD *)(v14 + 8);
    *(_QWORD *)(v15 + 32) = *(unsigned int *)(v14 + 16);
    ++v13;
    v14 += 40;
  }
  while (v12 != v13);
  v16 = 0;
  v17 = 0;
  v18 = 0;
  *(_QWORD *)&v19 = -1;
  *((_QWORD *)&v19 + 1) = -1;
  v30[6] = v19;
  v30[7] = v19;
  v30[4] = v19;
  v30[5] = v19;
  v30[2] = v19;
  v30[3] = v19;
  v30[0] = v19;
  v30[1] = v19;
  memset(v29, 0, sizeof(v29));
  do
  {
    v20 = *(_QWORD *)(a4 + v16 + 40);
    if ((v20 & 1) == 0)
    {
      v21 = *a3;
      *a3 += *(_DWORD *)(v20 + 1288);
      *(_QWORD *)(a1 + 40 * a2 + 32 + v16) = ((v21 << 11) + 2 * *(_DWORD *)(v20 + 1288));
      *((_DWORD *)v30 + v18) = v21;
      *((_QWORD *)v29 + v18++) = v20;
      v12 = *(unsigned int *)(a4 + 1288);
    }
    ++v17;
    v16 += 40;
  }
  while (v17 < v12);
  if (!v18)
    return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24, a4);
  v22 = v18;
  v23 = (uint64_t *)v29;
  v24 = (unsigned int *)v30;
  do
  {
    v26 = *v24++;
    v25 = v26;
    v27 = *v23++;
    result = BuildBV32Internal(physx::Gu::BV32Tree &,physx::Gu::AABBTree const&,physx::Gu::SourceMesh *,float)::Local::_Flatten(a1, v25, a3, v27, a5, a6);
    --*a6;
    --v22;
  }
  while (v22);
  if (a4)
    return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24, a4);
  return result;
}

uint64_t fillInNodes(uint64_t result, unsigned int a2, unsigned int a3, uint64_t a4, _DWORD *a5)
{
  unsigned int v7;
  uint64_t v8;
  uint64_t v9;
  unsigned int v10;
  int v11;

  v7 = a3;
  if (a2 + 1 == a3)
  {
LABEL_10:
    if (result)
      v8 = result + 48;
    else
      v8 = 0;
    *(_QWORD *)(a4 + 8 * a2) = result;
    v11 = 2;
  }
  else
  {
    while (1)
    {
      v8 = result + 48;
      v9 = result ? result + 48 : 0;
      v10 = a2 + ((v7 - a2) >> 1);
      if (*(_QWORD *)(result + 24))
      {
        fillInNodes(*(_QWORD *)(result + 24));
      }
      else
      {
        *(_QWORD *)(a4 + 8 * a2) = result;
        ++*a5;
      }
      result = *(_QWORD *)(v9 + 24);
      a2 = v10 + 1;
      if (!result)
        break;
      if (v10 + 2 == v7)
        goto LABEL_10;
    }
    v11 = 1;
    v7 = v10 + 1;
  }
  *(_QWORD *)(a4 + 8 * v7) = v8;
  *a5 += v11;
  return result;
}

float32x4_t *physx::Gu::getIncidentPolygon(float32x4_t *result, int8x16_t *a2, float32x4_t *a3, float32x4_t a4, float32x4_t a5)
{
  float32x4_t v5;
  float32x4_t v6;
  float32x4_t v7;
  float32x4_t v8;
  float32x2_t v9;
  float32x4_t v10;
  float32x2_t v11;
  float32x4_t v12;
  float32x2_t v13;
  float32x2_t v14;
  float32x2_t v15;
  int32x2_t v16;
  int8x16_t v17;
  float32x4_t v18;
  float32x4_t v19;
  float32x4_t v20;
  float32x4_t v21;
  float32x4_t v22;
  float32x4_t v23;
  float32x4_t v24;
  unsigned __int8 v25;
  float32x4_t v26;
  float32x2_t v27;
  int32x2_t v28;
  int8x16_t v29;
  int8x16_t v30;
  float32x4_t v31;
  float32x4_t v32;
  float32x4_t v33;
  float32x2_t v34;
  int32x2_t v35;
  int8x16_t v36;
  int8x16_t v37;
  float32x4_t v38;
  float32x4_t v39;
  float32x4_t v40;

  v6 = *a3;
  v5 = a3[1];
  v7 = a3[2];
  v8 = vmulq_f32(*a3, a4);
  v8.i64[0] = vpaddq_f32(v8, v8).u64[0];
  v9 = vpadd_f32(*(float32x2_t *)v8.f32, *(float32x2_t *)v8.f32);
  v10 = vmulq_f32(v5, a4);
  v10.i64[0] = vpaddq_f32(v10, v10).u64[0];
  v11 = vpadd_f32(*(float32x2_t *)v10.f32, *(float32x2_t *)v10.f32);
  v12 = vmulq_f32(v7, a4);
  v12.i64[0] = vpaddq_f32(v12, v12).u64[0];
  v13 = vpadd_f32(*(float32x2_t *)v12.f32, *(float32x2_t *)v12.f32);
  v14 = vabs_f32(v13);
  if ((vcage_f32(v9, v11).u8[0] & 1) != 0 && (vcge_f32(vabs_f32(v9), v14).u8[0] & 1) != 0)
  {
    v15 = (float32x2_t)vdup_lane_s32(*(int32x2_t *)a5.f32, 0);
    v16 = vcgtz_f32(v9);
    v17 = (int8x16_t)vnegq_f32(v6);
    v17.i32[3] = 0;
    v18 = vmulq_n_f32(v6, *(float *)vbsl_s8((int8x8_t)v16, (int8x8_t)vneg_f32(v15), (int8x8_t)v15).i32);
    v18.i32[3] = 0;
    v19 = vmulq_lane_f32(v5, *(float32x2_t *)a5.f32, 1);
    v19.i32[3] = 0;
    v20 = vmulq_laneq_f32(v7, a5, 2);
    v20.i32[3] = 0;
    *a2 = vbslq_s8((int8x16_t)vdupq_lane_s32(v16, 0), v17, (int8x16_t)v6);
    v21 = vaddq_f32(v18, a3[3]);
    v22 = vaddq_f32(v19, v20);
    v23 = vsubq_f32(v19, v20);
    *result = vaddq_f32(v22, v21);
    result[1] = vaddq_f32(v23, v21);
    result[2] = vsubq_f32(v21, v22);
    v24 = vsubq_f32(v21, v23);
  }
  else
  {
    v25 = vcge_f32(vabs_f32(v11), v14).u8[0];
    v26 = vmulq_n_f32(v6, a5.f32[0]);
    v26.i32[3] = 0;
    if ((v25 & 1) != 0)
    {
      v27 = (float32x2_t)vdup_lane_s32(*(int32x2_t *)a5.f32, 1);
      v28 = vcgtz_f32(v11);
      v29 = (int8x16_t)vnegq_f32(v5);
      v29.i32[3] = 0;
      v30 = vbslq_s8((int8x16_t)vdupq_lane_s32(v28, 0), v29, (int8x16_t)v5);
      v31 = vmulq_n_f32(v5, *(float *)vbsl_s8((int8x8_t)v28, (int8x8_t)vneg_f32(v27), (int8x8_t)v27).i32);
      v31.i32[3] = 0;
      v32 = vmulq_laneq_f32(v7, a5, 2);
      v32.i32[3] = 0;
      *a2 = v30;
      v33 = vaddq_f32(v31, a3[3]);
    }
    else
    {
      v34 = (float32x2_t)vdup_laneq_s32((int32x4_t)a5, 2);
      v35 = vcgtz_f32(v13);
      v36 = (int8x16_t)vnegq_f32(v7);
      v36.i32[3] = 0;
      v37 = vbslq_s8((int8x16_t)vdupq_lane_s32(v35, 0), v36, (int8x16_t)v7);
      v32 = vmulq_lane_f32(v5, *(float32x2_t *)a5.f32, 1);
      v32.i32[3] = 0;
      v38 = vmulq_n_f32(v7, *(float *)vbsl_s8((int8x8_t)v35, (int8x8_t)vneg_f32(v34), (int8x8_t)v34).i32);
      v38.i32[3] = 0;
      *a2 = v37;
      v33 = vaddq_f32(v38, a3[3]);
    }
    v39 = vaddq_f32(v26, v32);
    v40 = vsubq_f32(v26, v32);
    *result = vaddq_f32(v39, v33);
    result[1] = vaddq_f32(v40, v33);
    result[2] = vsubq_f32(v33, v39);
    v24 = vsubq_f32(v33, v40);
  }
  result[3] = v24;
  return result;
}

int8x8_t *physx::Gu::calculateContacts(int8x8_t *result, int8x8_t *a2, float32x4_t *a3, int32x4_t *a4, float32x4_t *a5, uint64_t a6, _DWORD *a7, float32x2_t *a8, double a9, double a10, double a11, double a12, float32x4_t a13, double a14, float32x4_t a15)
{
  float32x4_t v15;
  uint64_t v16;
  float32x2_t v17;
  float32x2_t v18;
  float32x4_t v19;
  float32x4_t v20;
  float32x4_t v21;
  float32x4_t v22;
  float32x2_t v23;
  float32x4_t v24;
  unsigned int v25;
  float32x2_t v26;
  int8x8_t v27;
  int32x2_t v28;
  int32x4_t v29;
  int32x4_t v30;
  uint64_t v31;
  float32x2_t v32;
  float32x2_t v33;
  char v34;
  uint64_t v35;
  float32x4_t v36;
  float32x2_t v37;
  float32x4_t v38;
  float32x2_t v39;
  float32x2_t v40;
  float32x2_t v41;
  float32x2_t v42;
  float32x2_t v43;
  int8x8_t v44;
  int8x8_t v45;
  int8x8_t v46;
  int8x16_t v47;
  float32x2_t v48;
  float32x2_t v49;
  int v50;
  float32x2_t v51;
  float32x2_t v52;
  float32x2_t v53;
  unsigned int v54;
  int8x8_t v55;
  int32x2_t v56;
  float32x4_t v57;
  uint64_t v58;
  float32x2_t v59;
  float32x2_t v60;
  char v61;
  uint64_t v62;
  float32x4_t v63;
  float32x2_t v64;
  float32x4_t v65;
  float32x2_t v66;
  float32x2_t v67;
  float32x2_t v68;
  float32x2_t v69;
  float32x2_t v70;
  int8x8_t v71;
  int8x8_t v72;
  int8x8_t v73;
  float32x2_t v74;
  float32x2_t v75;
  int v76;
  float32x2_t v77;
  float32x2_t v78;
  float32x2_t v79;
  float32x4_t v80;
  unsigned int v81;
  int32x2_t v82;
  int32x4_t v83;
  int32x4_t v84;
  uint64_t v85;
  float32x2_t v86;
  float32x2_t v87;
  char v88;
  uint64_t v89;
  float32x4_t v90;
  float32x2_t v91;
  float32x4_t v92;
  float32x2_t v93;
  float32x2_t v94;
  float32x2_t v95;
  float32x2_t v96;
  float32x2_t v97;
  int8x8_t v98;
  int8x8_t v99;
  int8x8_t v100;
  int8x16_t v101;
  float32x2_t v102;
  float32x2_t v103;
  int v104;
  float32x2_t v105;
  float32x2_t v106;
  float32x2_t v107;
  float32x4_t v108;
  unsigned int v109;
  int32x2_t v110;
  uint64_t v111;
  float32x2_t v112;
  float32x2_t v113;
  char v114;
  uint64_t v115;
  float32x4_t v116;
  float32x2_t v117;
  float32x4_t v118;
  float32x2_t v119;
  float32x2_t v120;
  float32x2_t v121;
  float32x2_t v122;
  float32x2_t v123;
  int8x8_t v124;
  int8x8_t v125;
  int8x8_t v126;
  int8x16_t v127;
  float32x2_t v128;
  float32x2_t v129;
  int v130;
  float32x2_t v131;
  float32x2_t v132;
  float32x2_t v133;
  float32x4_t v134;
  float32x4_t v135;
  unsigned int v136;
  uint64_t v137;
  float32x4_t v138;
  uint64_t v139;
  uint64_t v145;
  float32x4_t v146;
  float32x4_t v147;
  int v148;
  BOOL v149;
  char v150;
  int v151;
  int8x16_t v152;
  float32x4_t v153;
  float32x4_t v154;
  float32x4_t v155;
  float32x4_t v156;
  float32x4_t v157;
  int32x4_t v158;
  int32x4_t v159;
  float32x2_t v160;
  float32x2_t v161;
  int32x4_t v162;
  float32x4_t v163;
  int32x4_t v164;
  float32x4_t v165;
  unsigned int v166;
  int32x4_t v167;
  __int128 v168;
  __int128 v169;
  float32x4_t v170;
  unsigned int v171;
  _BYTE v172[8];

  v16 = 0;
  v17 = (float32x2_t)*result;
  v18 = (float32x2_t)*a2;
  *(int8x8_t *)v19.f32 = vext_s8(*result, *a2, 4uLL);
  v19.i64[1] = 2139095039;
  v20 = (float32x4_t)xmmword_2261A69F0;
  v21 = (float32x4_t)xmmword_2261AA230;
  *(float32x2_t *)a15.f32 = *a8;
  do
  {
    v22 = a3[v16];
    v23 = vneg_f32((float32x2_t)vdup_laneq_s32((int32x4_t)v22, 2));
    if ((vmvn_s8((int8x8_t)vcgt_f32(*(float32x2_t *)a15.f32, v23)).u8[0] & 1) != 0)
    {
      v172[v16 + 4] = 0;
LABEL_5:
      v172[v16] = 0;
      goto LABEL_6;
    }
    v172[v16 + 4] = 1;
    v15 = (float32x4_t)vcgeq_f32(v19, vabsq_f32(v22));
    if (vuzp1_s8((int8x8_t)vmovn_s32((int32x4_t)v15), (int8x8_t)2139095039).u32[0] != -1)
      goto LABEL_5;
    v172[v16] = 1;
    v24 = v22;
    v24.i32[2] = 0;
    *(float32x4_t *)(a6 + 48 * *a7) = v24;
    *(float32x4_t *)(a6 + 48 * *a7 + 16) = a3[v16];
    a15 = *a5;
    a15.i32[3] = v23.i32[1];
    v25 = (*a7)++;
    *(float32x4_t *)(a6 + 48 * v25 + 32) = a15;
    *(float32x2_t *)a15.f32 = *a8;
LABEL_6:
    v20 = vminq_f32(v20, v22);
    v21 = vmaxq_f32(v21, v22);
    ++v16;
  }
  while (v16 != 4);
  if (*a7 != 4)
  {
    v26 = (float32x2_t)vdup_laneq_s32(*a4, 2);
    *(float32x2_t *)a13.f32 = vneg_f32(v18);
    v27 = *result;
    *(int8x8_t *)v15.f32 = vext_s8(*result, *a2, 4uLL);
    v28 = (int32x2_t)vorrq_s8((int8x16_t)vcgtq_f32(v20, v15), (int8x16_t)vcgtq_f32(v15, v21)).u64[0];
    v29 = (int32x4_t)vorrq_s8((int8x16_t)vdupq_lane_s32(v28, 0), (int8x16_t)vdupq_lane_s32(v28, 1));
    v30.i64[0] = -1;
    v30.i64[1] = -1;
    if (vuzp1_s8((int8x8_t)vmovn_s32(vceqq_s32(v29, v30)), (int8x8_t)2139095039).u32[0] != -1)
    {
      v31 = 0;
      v32 = (float32x2_t)vdup_lane_s32(*(int32x2_t *)v15.f32, 0);
      v33 = (float32x2_t)vdup_lane_s32(*(int32x2_t *)v15.f32, 1);
      v34 = 1;
      LODWORD(v35) = 3;
      do
      {
        while (1)
        {
          v36 = a3[v35];
          v35 = v31;
          v37 = (float32x2_t)vdup_lane_s32(*(int32x2_t *)v36.f32, 1);
          v38 = a3[v31];
          v39 = (float32x2_t)vdup_lane_s32(*(int32x2_t *)v38.f32, 1);
          v40 = (float32x2_t)vdup_lane_s32(*(int32x2_t *)v36.f32, 0);
          v41 = (float32x2_t)vdup_lane_s32(*(int32x2_t *)v38.f32, 0);
          if (vuzp1_s8((int8x8_t)vdup_lane_s16((int16x4_t)vorr_s8(vand_s8((int8x8_t)vceq_f32(v32, v41), (int8x8_t)vceq_f32(v33, v39)), vand_s8((int8x8_t)vceq_f32(v32, v40), (int8x8_t)vceq_f32(v33, v37))), 0), (int8x8_t)2139095039).u32[0] == -1)goto LABEL_21;
          if ((veor_s8((int8x8_t)vcgt_f32(v37, v33), (int8x8_t)vcgt_f32(v39, v33)).u8[0] & 1) == 0)
            break;
          v42 = vsub_f32(v39, v37);
          v43 = vmul_f32(vsub_f32(v33, v37), vsub_f32(v41, v40));
          v44 = (int8x8_t)vmul_n_f32(v42, v15.f32[0]);
          v45 = (int8x8_t)vadd_f32(v43, vmul_f32(vadd_f32(v40, (float32x2_t)0x3400000034000000), v42));
          v46 = (int8x8_t)vdup_lane_s32(vcgtz_f32(v42), 0);
          if ((vcge_f32((float32x2_t)vbsl_s8(v46, v45, v44), (float32x2_t)vbsl_s8(v46, v44, v45)).u8[0] & 1) == 0)
            break;
          if ((v34 & 1) == 0)
            goto LABEL_25;
          v34 = 0;
          ++v31;
          if (v35 == 3)
            goto LABEL_21;
        }
        ++v31;
      }
      while (v35 != 3);
      if ((v34 & 1) == 0)
      {
LABEL_21:
        v47 = (int8x16_t)vmulq_f32(*(float32x4_t *)a4, vsubq_f32(*a3, v15));
        v48 = (float32x2_t)vextq_s8(v47, v47, 8uLL).u64[0];
        v49 = vrecpe_f32(v26);
        v50 = 4;
        do
        {
          v49 = vmul_f32(v49, vrecps_f32(v26, v49));
          --v50;
        }
        while (v50);
        v51 = vpadd_f32(*(float32x2_t *)v47.i8, v48);
        v52 = vmul_f32(v49, vpadd_f32(v51, v51));
        v53 = vneg_f32(v52);
        if ((vmvn_s8((int8x8_t)vcgt_f32(*(float32x2_t *)a15.f32, v53)).u8[0] & 1) == 0)
        {
          *(float32x4_t *)(a6 + 48 * *a7) = v15;
          v15.i32[2] = v52.i32[0];
          *(float32x4_t *)(a6 + 48 * *a7 + 16) = v15;
          a15 = *a5;
          a15.i32[3] = v53.i32[1];
          v54 = (*a7)++;
          *(float32x4_t *)(a6 + 48 * v54 + 32) = a15;
          v27 = *result;
        }
      }
    }
LABEL_25:
    v55 = (int8x8_t)vneg_f32(v17);
    *(int8x8_t *)a15.f32 = vext_s8(v27, *(int8x8_t *)a13.f32, 4uLL);
    v56 = (int32x2_t)vorrq_s8((int8x16_t)vcgtq_f32(v20, a15), (int8x16_t)vcgtq_f32(a15, v21)).u64[0];
    v57 = (float32x4_t)vceqq_s32((int32x4_t)vorrq_s8((int8x16_t)vdupq_lane_s32(v56, 0), (int8x16_t)vdupq_lane_s32(v56, 1)), v30);
    if (vuzp1_s8((int8x8_t)vmovn_s32((int32x4_t)v57), (int8x8_t)2139095039).u32[0] != -1)
    {
      v58 = 0;
      v59 = (float32x2_t)vdup_lane_s32(*(int32x2_t *)a15.f32, 0);
      v60 = (float32x2_t)vdup_lane_s32(*(int32x2_t *)a15.f32, 1);
      v61 = 1;
      LODWORD(v62) = 3;
      do
      {
        while (1)
        {
          v63 = a3[v62];
          v62 = v58;
          v64 = (float32x2_t)vdup_lane_s32(*(int32x2_t *)v63.f32, 1);
          v65 = a3[v58];
          v66 = (float32x2_t)vdup_lane_s32(*(int32x2_t *)v65.f32, 1);
          v67 = (float32x2_t)vdup_lane_s32(*(int32x2_t *)v63.f32, 0);
          v68 = (float32x2_t)vdup_lane_s32(*(int32x2_t *)v65.f32, 0);
          if (vuzp1_s8((int8x8_t)vdup_lane_s16((int16x4_t)vorr_s8(vand_s8((int8x8_t)vceq_f32(v59, v68), (int8x8_t)vceq_f32(v60, v66)), vand_s8((int8x8_t)vceq_f32(v59, v67), (int8x8_t)vceq_f32(v60, v64))), 0), (int8x8_t)2139095039).u32[0] == -1)goto LABEL_36;
          if ((veor_s8((int8x8_t)vcgt_f32(v64, v60), (int8x8_t)vcgt_f32(v66, v60)).u8[0] & 1) == 0)
            break;
          v69 = vsub_f32(v66, v64);
          v70 = vmul_f32(vsub_f32(v60, v64), vsub_f32(v68, v67));
          v71 = (int8x8_t)vmul_n_f32(v69, a15.f32[0]);
          v72 = (int8x8_t)vadd_f32(v70, vmul_f32(vadd_f32(v67, (float32x2_t)0x3400000034000000), v69));
          v73 = (int8x8_t)vdup_lane_s32(vcgtz_f32(v69), 0);
          if ((vcge_f32((float32x2_t)vbsl_s8(v73, v72, v71), (float32x2_t)vbsl_s8(v73, v71, v72)).u8[0] & 1) == 0)
            break;
          if ((v61 & 1) == 0)
            goto LABEL_40;
          v61 = 0;
          ++v58;
          if (v62 == 3)
            goto LABEL_36;
        }
        ++v58;
      }
      while (v62 != 3);
      if ((v61 & 1) == 0)
      {
LABEL_36:
        v57 = vmulq_f32(*(float32x4_t *)a4, vsubq_f32(*a3, a15));
        v74 = (float32x2_t)vextq_s8((int8x16_t)v57, (int8x16_t)v57, 8uLL).u64[0];
        v75 = vrecpe_f32(v26);
        v76 = 4;
        do
        {
          v75 = vmul_f32(v75, vrecps_f32(v26, v75));
          --v76;
        }
        while (v76);
        v77 = vpadd_f32(*(float32x2_t *)v57.f32, v74);
        v78 = vmul_f32(v75, vpadd_f32(v77, v77));
        v79 = vneg_f32(v78);
        if (COERCE_FLOAT(*a8) > v79.f32[0])
        {
          *(float32x4_t *)(a6 + 48 * *a7) = a15;
          a15.i32[2] = v78.i32[0];
          *(float32x4_t *)(a6 + 48 * *a7 + 16) = a15;
          v80 = *a5;
          v80.i32[3] = v79.i32[1];
          v81 = (*a7)++;
          *(float32x4_t *)(a6 + 48 * v81 + 32) = v80;
        }
      }
    }
LABEL_40:
    *(int8x8_t *)v57.f32 = vext_s8(v55, *a2, 4uLL);
    v82 = (int32x2_t)vorrq_s8((int8x16_t)vcgtq_f32(v20, v57), (int8x16_t)vcgtq_f32(v57, v21)).u64[0];
    v83 = (int32x4_t)vorrq_s8((int8x16_t)vdupq_lane_s32(v82, 0), (int8x16_t)vdupq_lane_s32(v82, 1));
    v84.i64[0] = -1;
    v84.i64[1] = -1;
    if (vuzp1_s8((int8x8_t)vmovn_s32(vceqq_s32(v83, v84)), (int8x8_t)2139095039).u32[0] != -1)
    {
      v85 = 0;
      v86 = (float32x2_t)vdup_lane_s32(*(int32x2_t *)v57.f32, 0);
      v87 = (float32x2_t)vdup_lane_s32(*(int32x2_t *)v57.f32, 1);
      v88 = 1;
      LODWORD(v89) = 3;
      do
      {
        while (1)
        {
          v90 = a3[v89];
          v89 = v85;
          v91 = (float32x2_t)vdup_lane_s32(*(int32x2_t *)v90.f32, 1);
          v92 = a3[v85];
          v93 = (float32x2_t)vdup_lane_s32(*(int32x2_t *)v92.f32, 1);
          v94 = (float32x2_t)vdup_lane_s32(*(int32x2_t *)v90.f32, 0);
          v95 = (float32x2_t)vdup_lane_s32(*(int32x2_t *)v92.f32, 0);
          if (vuzp1_s8((int8x8_t)vdup_lane_s16((int16x4_t)vorr_s8(vand_s8((int8x8_t)vceq_f32(v86, v95), (int8x8_t)vceq_f32(v87, v93)), vand_s8((int8x8_t)vceq_f32(v86, v94), (int8x8_t)vceq_f32(v87, v91))), 0), (int8x8_t)2139095039).u32[0] == -1)goto LABEL_51;
          if ((veor_s8((int8x8_t)vcgt_f32(v91, v87), (int8x8_t)vcgt_f32(v93, v87)).u8[0] & 1) == 0)
            break;
          v96 = vsub_f32(v93, v91);
          v97 = vmul_f32(vsub_f32(v87, v91), vsub_f32(v95, v94));
          v98 = (int8x8_t)vmul_n_f32(v96, v57.f32[0]);
          v99 = (int8x8_t)vadd_f32(v97, vmul_f32(vadd_f32(v94, (float32x2_t)0x3400000034000000), v96));
          v100 = (int8x8_t)vdup_lane_s32(vcgtz_f32(v96), 0);
          if ((vcge_f32((float32x2_t)vbsl_s8(v100, v99, v98), (float32x2_t)vbsl_s8(v100, v98, v99)).u8[0] & 1) == 0)
            break;
          if ((v88 & 1) == 0)
            goto LABEL_55;
          v88 = 0;
          ++v85;
          if (v89 == 3)
            goto LABEL_51;
        }
        ++v85;
      }
      while (v89 != 3);
      if ((v88 & 1) == 0)
      {
LABEL_51:
        v101 = (int8x16_t)vmulq_f32(*(float32x4_t *)a4, vsubq_f32(*a3, v57));
        v102 = (float32x2_t)vextq_s8(v101, v101, 8uLL).u64[0];
        v103 = vrecpe_f32(v26);
        v104 = 4;
        do
        {
          v103 = vmul_f32(v103, vrecps_f32(v26, v103));
          --v104;
        }
        while (v104);
        v105 = vpadd_f32(*(float32x2_t *)v101.i8, v102);
        v106 = vmul_f32(v103, vpadd_f32(v105, v105));
        v107 = vneg_f32(v106);
        if (COERCE_FLOAT(*a8) > v107.f32[0])
        {
          *(float32x4_t *)(a6 + 48 * *a7) = v57;
          v57.i32[2] = v106.i32[0];
          *(float32x4_t *)(a6 + 48 * *a7 + 16) = v57;
          v108 = *a5;
          v108.i32[3] = v107.i32[1];
          v109 = (*a7)++;
          *(float32x4_t *)(a6 + 48 * v109 + 32) = v108;
        }
      }
    }
LABEL_55:
    *(int8x8_t *)a13.f32 = vext_s8(v55, *(int8x8_t *)a13.f32, 4uLL);
    v110 = (int32x2_t)vorrq_s8((int8x16_t)vcgtq_f32(a13, v21), (int8x16_t)vcgtq_f32(v20, a13)).u64[0];
    if (vuzp1_s8((int8x8_t)vmovn_s32(vceqq_s32((int32x4_t)vorrq_s8((int8x16_t)vdupq_lane_s32(v110, 0), (int8x16_t)vdupq_lane_s32(v110, 1)), v84)), (int8x8_t)2139095039).u32[0] != -1)
    {
      v111 = 0;
      v112 = (float32x2_t)vdup_lane_s32(*(int32x2_t *)a13.f32, 0);
      v113 = (float32x2_t)vdup_lane_s32(*(int32x2_t *)a13.f32, 1);
      v114 = 1;
      LODWORD(v115) = 3;
      do
      {
        while (1)
        {
          v116 = a3[v115];
          v115 = v111;
          v117 = (float32x2_t)vdup_lane_s32(*(int32x2_t *)v116.f32, 1);
          v118 = a3[v111];
          v119 = (float32x2_t)vdup_lane_s32(*(int32x2_t *)v118.f32, 1);
          v120 = (float32x2_t)vdup_lane_s32(*(int32x2_t *)v116.f32, 0);
          v121 = (float32x2_t)vdup_lane_s32(*(int32x2_t *)v118.f32, 0);
          if (vuzp1_s8((int8x8_t)vdup_lane_s16((int16x4_t)vorr_s8(vand_s8((int8x8_t)vceq_f32(v112, v121), (int8x8_t)vceq_f32(v113, v119)), vand_s8((int8x8_t)vceq_f32(v112, v120), (int8x8_t)vceq_f32(v113, v117))), 0), (int8x8_t)2139095039).u32[0] == -1)goto LABEL_66;
          if ((veor_s8((int8x8_t)vcgt_f32(v117, v113), (int8x8_t)vcgt_f32(v119, v113)).u8[0] & 1) == 0)
            break;
          v122 = vsub_f32(v119, v117);
          v123 = vmul_f32(vsub_f32(v113, v117), vsub_f32(v121, v120));
          v124 = (int8x8_t)vmul_n_f32(v122, a13.f32[0]);
          v125 = (int8x8_t)vadd_f32(v123, vmul_f32(vadd_f32(v120, (float32x2_t)0x3400000034000000), v122));
          v126 = (int8x8_t)vdup_lane_s32(vcgtz_f32(v122), 0);
          if ((vcge_f32((float32x2_t)vbsl_s8(v126, v125, v124), (float32x2_t)vbsl_s8(v126, v124, v125)).u8[0] & 1) == 0)
            break;
          if ((v114 & 1) == 0)
            goto LABEL_70;
          v114 = 0;
          ++v111;
          if (v115 == 3)
            goto LABEL_66;
        }
        ++v111;
      }
      while (v115 != 3);
      if ((v114 & 1) == 0)
      {
LABEL_66:
        v127 = (int8x16_t)vmulq_f32(*(float32x4_t *)a4, vsubq_f32(*a3, a13));
        v128 = (float32x2_t)vextq_s8(v127, v127, 8uLL).u64[0];
        v129 = vrecpe_f32(v26);
        v130 = 4;
        do
        {
          v129 = vmul_f32(v129, vrecps_f32(v26, v129));
          --v130;
        }
        while (v130);
        v131 = vpadd_f32(*(float32x2_t *)v127.i8, v128);
        v132 = vmul_f32(v129, vpadd_f32(v131, v131));
        v133 = vneg_f32(v132);
        if (COERCE_FLOAT(*a8) > v133.f32[0])
        {
          *(float32x4_t *)(a6 + 48 * *a7) = a13;
          v134 = a13;
          v134.i32[2] = v132.i32[0];
          *(float32x4_t *)(a6 + 48 * *a7 + 16) = v134;
          v135 = *a5;
          v135.i32[3] = v133.i32[1];
          v136 = (*a7)++;
          *(float32x4_t *)(a6 + 48 * v136 + 32) = v135;
        }
      }
    }
LABEL_70:
    v137 = 0;
    *(int8x8_t *)v138.f32 = vext_s8(*result, *a2, 4uLL);
    v138.i64[1] = 2139095039;
    a13.i64[1] = vneg_f32(vadd_f32(*a8, (float32x2_t)0x3400000034000000)).u32[0];
    v139 = 3;
    __asm { FMOV            V5.2S, #1.0 }
    while (2)
    {
      v145 = v139;
      v139 = v137;
      v146 = a3[v137];
      v147 = a3[v145];
      if (v172[v137 + 4])
      {
        v148 = v172[v137];
        v149 = v172[v137] != 0;
        v150 = v172[v145 + 4];
        if (!v150)
          goto LABEL_78;
        v151 = v172[v145];
        v150 = v151 != 0;
        if (!v148 || !v151)
          goto LABEL_78;
      }
      else if (v172[v145 + 4])
      {
        v149 = 0;
        v150 = v172[v145] != 0;
LABEL_78:
        v152 = (int8x16_t)vcgtq_f32((float32x4_t)xmmword_2261A9050, vabdq_f32(v147, v146));
        if (vuzp1_s8(vmvn_s8((int8x8_t)vmovn_s32((int32x4_t)vandq_s8(v152, vorrq_s8((int8x16_t)vcgtq_f32(a13, v146), (int8x16_t)vcgtq_f32(v146, v138))))), (int8x8_t)0x358637BD358637BDLL).u32[0] == -1)
        {
          v153 = vsubq_f32(v147, v146);
          v154 = vrecpeq_f32(v153);
          v155 = vmulq_f32(v154, vrecpsq_f32(v154, v153));
          v155.i32[3] = 0;
          v156 = (float32x4_t)vbicq_s8((int8x16_t)vmulq_f32(vsubq_f32(a13, v146), v155), v152);
          v157 = (float32x4_t)vbslq_s8(v152, (int8x16_t)xmmword_2261A69F0, (int8x16_t)vmulq_f32(vsubq_f32(v138, v146), v155));
          v158 = (int32x4_t)vminq_f32(v156, v157);
          v159 = (int32x4_t)vmaxq_f32(v156, v157);
          *(float32x2_t *)v158.i8 = vpmax_f32((float32x2_t)vdup_laneq_s32(v158, 2), *(float32x2_t *)v158.i8);
          *(float32x2_t *)v159.i8 = vpmin_f32((float32x2_t)vdup_laneq_s32(v159, 2), *(float32x2_t *)v159.i8);
          v160 = vmax_f32(vpmax_f32(*(float32x2_t *)v158.i8, *(float32x2_t *)v158.i8), 0);
          v161 = vmin_f32(vpmin_f32(*(float32x2_t *)v159.i8, *(float32x2_t *)v159.i8), _D5);
          if (vuzp1_s8((int8x8_t)vdup_lane_s16((int16x4_t)vbic_s8(vmvn_s8((int8x8_t)vcgt_f32(v160, v161)), (int8x8_t)vcgt_f32(v160, _D5)), 0), (int8x8_t)0x358637BD358637BDLL).u32[0] == -1)
          {
            if (!v149)
            {
              v162 = (int32x4_t)vmlaq_n_f32(v146, v153, v160.f32[0]);
              v163 = (float32x4_t)vdupq_laneq_s32(v162, 2);
              v162.i64[1] = vextq_s8((int8x16_t)v162, (int8x16_t)v162, 8uLL).u32[0];
              v164 = v162;
              v164.i32[2] = 0;
              *(int32x4_t *)(a6 + 48 * *a7) = v164;
              *(int32x4_t *)(a6 + 48 * *a7 + 16) = v162;
              v165 = *a5;
              v165.i32[3] = vnegq_f32(v163).i32[3];
              v166 = (*a7)++;
              *(float32x4_t *)(a6 + 48 * v166 + 32) = v165;
            }
            if ((v150 & 1) == 0)
            {
              v167 = (int32x4_t)vmlaq_n_f32(v146, v153, v161.f32[0]);
              *(_QWORD *)&v168 = v167.i64[0];
              *((_QWORD *)&v168 + 1) = vextq_s8((int8x16_t)v167, (int8x16_t)v167, 8uLL).u32[0];
              v169 = v168;
              DWORD2(v169) = 0;
              *(_OWORD *)(a6 + 48 * *a7) = v169;
              *(_OWORD *)(a6 + 48 * *a7 + 16) = v168;
              v170 = *a5;
              v170.i32[3] = vnegq_f32((float32x4_t)vdupq_laneq_s32(v167, 2)).i32[3];
              v171 = (*a7)++;
              *(float32x4_t *)(a6 + 48 * v171 + 32) = v170;
            }
          }
        }
      }
      v137 = v139 + 1;
      if (v139 == 3)
        return result;
      continue;
    }
  }
  return result;
}

uint64_t physx::RefitCallback<unsigned short>::recomputeBounds(uint64_t result, unint64_t a2, float32x4_t *a3, float32x4_t *a4)
{
  uint64_t v4;
  uint64_t v5;
  unsigned __int16 *v6;
  uint64_t v7;
  float32x4_t v8;
  uint64_t v9;
  float32x4_t v10;
  float32x4_t v11;
  float32x4_t v12;
  uint64_t v13;
  float32x4_t v14;
  float32x4_t v15;
  float32x4_t v16;
  uint64_t v17;
  unsigned __int16 *v18;
  uint64_t v19;
  float32x4_t v20;
  float32x4_t v21;
  float32x4_t v22;
  uint64_t v23;
  float32x4_t v24;
  float32x4_t v25;
  unsigned int v26;
  uint64_t v27;

  v4 = *(_QWORD *)(result + 8);
  v5 = *(_QWORD *)(result + 16);
  v6 = (unsigned __int16 *)(v5 + 6 * (a2 >> 5));
  v7 = v4 + 12 * *v6;
  v8.i64[0] = *(_QWORD *)v7;
  v8.i64[1] = *(unsigned int *)(v7 + 8);
  v9 = v4 + 12 * v6[1];
  v10.i64[0] = *(_QWORD *)v9;
  v10.i64[1] = *(unsigned int *)(v9 + 8);
  v11 = vminq_f32(v8, v10);
  v12 = vmaxq_f32(v8, v10);
  v13 = v4 + 12 * v6[2];
  v14.i64[0] = *(_QWORD *)v13;
  v14.i64[1] = *(unsigned int *)(v13 + 8);
  v15 = vminq_f32(v11, v14);
  v16 = vmaxq_f32(v12, v14);
  if (((a2 >> 1) & 0xF) != 0)
  {
    v17 = (a2 >> 1) & 0xF;
    v18 = (unsigned __int16 *)(v5 + 6 * (a2 >> 5) + 10);
    do
    {
      v19 = v4 + 12 * *(v18 - 2);
      v20.i64[0] = *(_QWORD *)v19;
      v20.i64[1] = *(unsigned int *)(v19 + 8);
      v21 = vminq_f32(v15, v20);
      v22 = vmaxq_f32(v16, v20);
      v23 = v4 + 12 * *(v18 - 1);
      v20.i64[0] = *(_QWORD *)v23;
      v20.i64[1] = *(unsigned int *)(v23 + 8);
      v24 = vminq_f32(v21, v20);
      v25 = vmaxq_f32(v22, v20);
      v26 = *v18;
      v18 += 3;
      v27 = v4 + 12 * v26;
      v20.i64[0] = *(_QWORD *)v27;
      v20.i64[1] = *(unsigned int *)(v27 + 8);
      v15 = vminq_f32(v24, v20);
      v16 = vmaxq_f32(v25, v20);
      --v17;
    }
    while (v17);
  }
  *a3 = v15;
  *a4 = v16;
  return result;
}

void physx::RefitCallback<unsigned short>::~RefitCallback()
{
  JUMPOUT(0x2276933B8);
}

uint64_t physx::RefitCallback<unsigned int>::recomputeBounds(uint64_t result, unint64_t a2, float32x4_t *a3, float32x4_t *a4)
{
  uint64_t v4;
  uint64_t v5;
  unsigned int *v6;
  uint64_t v7;
  float32x4_t v8;
  uint64_t v9;
  float32x4_t v10;
  float32x4_t v11;
  float32x4_t v12;
  uint64_t v13;
  float32x4_t v14;
  float32x4_t v15;
  float32x4_t v16;
  uint64_t v17;
  unsigned int *v18;
  uint64_t v19;
  float32x4_t v20;
  float32x4_t v21;
  float32x4_t v22;
  uint64_t v23;
  float32x4_t v24;
  float32x4_t v25;
  unsigned int v26;
  uint64_t v27;

  v4 = *(_QWORD *)(result + 8);
  v5 = *(_QWORD *)(result + 16);
  v6 = (unsigned int *)(v5 + 12 * (a2 >> 5));
  v7 = v4 + 12 * *v6;
  v8.i64[0] = *(_QWORD *)v7;
  v8.i64[1] = *(unsigned int *)(v7 + 8);
  v9 = v4 + 12 * v6[1];
  v10.i64[0] = *(_QWORD *)v9;
  v10.i64[1] = *(unsigned int *)(v9 + 8);
  v11 = vminq_f32(v8, v10);
  v12 = vmaxq_f32(v8, v10);
  v13 = v4 + 12 * v6[2];
  v14.i64[0] = *(_QWORD *)v13;
  v14.i64[1] = *(unsigned int *)(v13 + 8);
  v15 = vminq_f32(v11, v14);
  v16 = vmaxq_f32(v12, v14);
  if (((a2 >> 1) & 0xF) != 0)
  {
    v17 = (a2 >> 1) & 0xF;
    v18 = (unsigned int *)(v5 + 12 * (a2 >> 5) + 20);
    do
    {
      v19 = v4 + 12 * *(v18 - 2);
      v20.i64[0] = *(_QWORD *)v19;
      v20.i64[1] = *(unsigned int *)(v19 + 8);
      v21 = vminq_f32(v15, v20);
      v22 = vmaxq_f32(v16, v20);
      v23 = v4 + 12 * *(v18 - 1);
      v20.i64[0] = *(_QWORD *)v23;
      v20.i64[1] = *(unsigned int *)(v23 + 8);
      v24 = vminq_f32(v21, v20);
      v25 = vmaxq_f32(v22, v20);
      v26 = *v18;
      v18 += 3;
      v27 = v4 + 12 * v26;
      v20.i64[0] = *(_QWORD *)v27;
      v20.i64[1] = *(unsigned int *)(v27 + 8);
      v15 = vminq_f32(v24, v20);
      v16 = vmaxq_f32(v25, v20);
      --v17;
    }
    while (v17);
  }
  *a3 = v15;
  *a4 = v16;
  return result;
}

void physx::RefitCallback<unsigned int>::~RefitCallback()
{
  JUMPOUT(0x2276933B8);
}

__n128 physx::Gu::LocalConvex<physx::Gu::ConvexHullNoScaleV>::supportPoint(uint64_t a1, int a2)
{
  return *(__n128 *)(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 160) + 12 * a2);
}

__n128 physx::Gu::LocalConvex<physx::Gu::ConvexHullNoScaleV>::support(uint64_t a1, float32x4_t *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a1 + 8);
  return *(__n128 *)(*(_QWORD *)(v2 + 160) + 12 * physx::Gu::ConvexHullV::supportVertexIndex(v2, a2));
}

__n128 physx::Gu::LocalConvex<physx::Gu::ConvexHullNoScaleV>::support(uint64_t a1, float32x4_t *a2, _DWORD *a3)
{
  uint64_t v4;
  int v5;

  v4 = *(_QWORD *)(a1 + 8);
  v5 = physx::Gu::ConvexHullV::supportVertexIndex(v4, a2);
  *a3 = v5;
  return *(__n128 *)(*(_QWORD *)(v4 + 160) + 12 * v5);
}

float32x2_t physx::Gu::LocalConvex<physx::Gu::ConvexHullNoScaleV>::getSweepMargin(uint64_t a1)
{
  const float *v1;

  v1 = (const float *)(*(_QWORD *)(a1 + 8) + 24);
  return vld1_dup_f32(v1);
}

__n128 physx::Gu::LocalConvex<physx::Gu::ConvexHullNoScaleV>::getCenter(uint64_t a1)
{
  return *(__n128 *)*(_QWORD *)(a1 + 8);
}

void physx::Gu::LocalConvex<physx::Gu::ConvexHullNoScaleV>::~LocalConvex()
{
  JUMPOUT(0x2276933B8);
}

uint64_t physx::Gu::pcmContactCapsuleBox(uint64_t a1, uint64_t a2, float32x4_t *a3, int32x4_t *a4, uint64_t a5, float32x4_t **a6, _OWORD *a7)
{
  int32x4_t v16;
  int32x4_t v17;
  float32x4_t v18;
  float32x4_t v19;
  float32x4_t v20;
  float32x4_t v21;
  float32x2_t v22;
  float32x4_t v23;
  float32x4_t v24;
  float32x2_t v25;
  float32x2_t v26;
  int8x8_t v27;
  float32x4_t v28;
  float32x4_t v29;
  float32x4_t v30;
  float32x4_t v31;
  float32x4_t v32;
  float32x4_t v33;
  float32x4_t v34;
  float32x2_t v35;
  float32x4_t v36;
  float32x4_t v37;
  float32x4_t v38;
  float32x4_t v39;
  float32x2_t v40;
  float32x2_t v41;
  float32x2_t v42;
  float32x4_t v44;
  float32x4_t v45;
  float32x4_t v46;
  int32x2_t v47;
  float32x2_t v48;
  uint64_t v49;
  uint64_t v50;
  float32x2_t v51;
  float32x2_t v52;
  float32x2_t v53;
  float32x2_t v54;
  unsigned int v55;
  uint64_t v56;
  uint64_t v57;
  float32x4_t *v58;
  float32x4_t v59;
  float32x4_t v60;
  float32x4_t v61;
  float32x4_t v62;
  float32x4_t v63;
  float32x4_t v64;
  float32x4_t v65;
  float32x4_t v66;
  float32x2_t v67;
  float32x4_t v68;
  float32x4_t v69;
  float32x4_t v70;
  unsigned __int8 v71;
  float32x4_t *v72;
  float32x4_t v73;
  float32x4_t v74;
  int v75;
  float32x4_t v76;
  int8x16_t v77;
  const float *v78;
  float32x2_t v79;
  float32x4_t v80;
  uint64_t v81;
  int8x16_t v82;
  float32x4_t v83;
  uint64_t v84;
  float32x4_t *v85;
  float32x4_t v86;
  float32x4_t v87;
  float32x4_t v88;
  float32x4_t v89;
  float32x2_t v90;
  float32x4_t v91;
  float32x2_t v92;
  float32x2_t v93;
  int8x8_t v94;
  float32x4_t v95;
  float32x4_t v96;
  float32x4_t v97;
  float32x4_t v98;
  float32x4_t v99;
  float32x4_t v100;
  float32x2_t v101;
  float32x2_t v102;
  int v103;
  float32x2_t v104;
  float32x2_t v105;
  int v106;
  float32x4_t v107;
  float32x4_t *v108;
  float32x4_t *v109;
  float32x4_t v110;
  float32x4_t v111;
  float32x4_t v112;
  float32x4_t v113;
  float32x4_t v114;
  uint64_t result;
  int32x4_t v116;
  unsigned int v117;
  float32x4_t v118;
  float32x4_t v119;
  float32x4_t v120;
  float32x4_t v121;
  float32x4_t v122;
  float32x4_t v123;
  float32x4_t v124;
  __int128 v125;
  int32x4_t v126;
  __int32 v127;
  int8x16_t v128;
  unsigned int v129;
  float32x2_t v130;
  float32x2_t v131;
  float32x4_t v132;
  char v133;
  int v134;
  float32x4_t v135;
  float32x4_t v136;
  float32x4_t v137;
  float32x4_t v138;
  float32x4_t v139;
  float32x4_t *v140;
  float32x2_t v141;
  float32x4_t v142;
  float32x4_t v143;
  float32x2_t v144;
  int8x8_t v145;
  float32x4_t v146;
  float32x4_t v147;
  float32x4_t v148;
  float32x4_t v149;
  float32x4_t v150;
  float32x4_t v151;
  float32x2_t v152;
  float32x4_t v153;
  float32x2_t v154;
  float32x2_t v155;
  int8x8_t v156;
  float32x4_t v157;
  float32x4_t v158;
  float32x4_t v159;
  float32x4_t v160;
  float32x4_t v161;
  float32x4_t v162;
  float32x4_t v163;
  float32x4_t v164;
  float32x4_t v165;
  float32x2_t v166;
  float32x4_t v167;
  float32x2_t v168;
  float32x4_t v169;
  int32x4_t v170;
  float32x2_t v171;
  uint64_t v172;
  int v173;
  uint64_t v174;
  int v175;
  unsigned int v176;
  float32x4_t v177;
  _QWORD v178[2];
  _QWORD v179[2];
  float32x4_t v180;
  float v181;
  float v182;
  float v183;
  int v184;
  char v185;
  int32x4_t v186;
  float32x4_t v187;
  float32x4_t v188;
  float32x4_t v189;
  float32x4_t v190;
  float32x2_t v191;
  int32x4_t v192;
  float32x4_t v193;
  float32x4_t v194[2];
  int32x2_t v195;
  float32x4_t v196;
  float32x4_t v197;
  int8x16_t v198[2];
  uint64_t v199;
  float32x4_t v200;
  __int32 v201;
  __int32 v202;
  __int32 v203;
  int v204;
  char v205;
  float32x4_t v206;
  float32x4_t v207;
  float32x2_t v208;
  uint64_t v209;

  v209 = *MEMORY[0x24BDAC8D0];
  _X20 = *a6;
  __asm { PRFM            #0, [X20,#0x100] }
  v16 = *(int32x4_t *)(a2 + 4);
  v17 = v16;
  v17.i32[2] = *(_DWORD *)(a2 + 12);
  v195 = vdup_lane_s32(*(int32x2_t *)a5, 0);
  v18.i64[0] = a3[1].i64[0];
  v18.i64[1] = a3[1].u32[2];
  v194[0] = *a3;
  v194[1] = v18;
  v19.i64[0] = a4[1].i64[0];
  v19.i64[1] = a4[1].u32[2];
  v192 = *a4;
  v193 = v19;
  v20 = vnegq_f32((float32x4_t)v192);
  v21 = v20;
  v21.i32[3] = 0;
  v22 = (float32x2_t)vdupq_laneq_s32(v192, 3).u64[0];
  v23 = vsubq_f32(v18, v19);
  v24 = vmulq_n_f32(v23, vmla_f32((float32x2_t)0xBF000000BF000000, v22, v22).f32[0]);
  v24.i32[3] = 0;
  v25 = (float32x2_t)vextq_s8((int8x16_t)v21, (int8x16_t)v21, 8uLL).u64[0];
  v26 = (float32x2_t)vext_s8(*(int8x8_t *)v20.f32, (int8x8_t)v25, 4uLL);
  v27 = (int8x8_t)vmls_f32(vmul_f32(*(float32x2_t *)v20.f32, (float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v23, (int8x16_t)v23, 4uLL)), v26, *(float32x2_t *)v23.f32);
  *(int8x8_t *)v28.f32 = vext_s8(v27, (int8x8_t)vmls_f32(vmul_f32(v25, *(float32x2_t *)v23.f32), *(float32x2_t *)v20.f32, (float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v23, (int8x16_t)v23, 8uLL)), 4uLL);
  v28.i64[1] = v27.u32[0];
  v29 = vmlaq_laneq_f32(v24, v28, (float32x4_t)v192, 3);
  v29.i64[1] = vextq_s8((int8x16_t)v29, (int8x16_t)v29, 8uLL).u32[0];
  v30 = vmulq_f32(v21, v23);
  v30.i64[0] = vpaddq_f32(v30, v30).u64[0];
  v31 = vmlaq_n_f32(v29, v21, vpadd_f32(*(float32x2_t *)v30.f32, *(float32x2_t *)v30.f32).f32[0]);
  v32 = vaddq_f32(v31, v31);
  v32.i32[3] = 0;
  v33 = v194[0];
  v33.i32[3] = 0;
  v34 = vmulq_f32(v33, v21);
  v34.i64[0] = vpaddq_f32(v34, v34).u64[0];
  v35 = vsub_f32(vmul_f32((float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v194[0], (int8x16_t)v194[0], 8uLL), (float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v192, (int8x16_t)v192, 8uLL)), vpadd_f32(*(float32x2_t *)v34.f32, *(float32x2_t *)v34.f32));
  v36 = vmulq_laneq_f32(v33, (float32x4_t)v192, 3);
  v33.i64[0] = vextq_s8((int8x16_t)v33, (int8x16_t)v33, 8uLL).u64[0];
  *(float32x2_t *)v31.f32 = vmls_f32(vmul_f32((float32x2_t)vext_s8(*(int8x8_t *)v194[0].f32, *(int8x8_t *)v33.f32, 4uLL), *(float32x2_t *)v20.f32), v26, *(float32x2_t *)v194[0].f32);
  *(int8x8_t *)v37.f32 = vext_s8(*(int8x8_t *)v31.f32, (int8x8_t)vmls_f32(vmul_f32(*(float32x2_t *)v194[0].f32, v25), *(float32x2_t *)v20.f32, *(float32x2_t *)v33.f32), 4uLL);
  v37.i64[1] = v31.i64[0];
  v38 = vaddq_f32(vaddq_f32(vmulq_laneq_f32(v21, v194[0], 3), v36), v37);
  *(int32x2_t *)v37.f32 = vdup_lane_s32(*(int32x2_t *)v38.f32, 1);
  *(int32x2_t *)v36.f32 = vdup_laneq_s32((int32x4_t)v38, 2);
  v39 = vaddq_f32(v38, v38);
  *(int32x2_t *)v31.f32 = vdup_laneq_s32((int32x4_t)v39, 2);
  *(int32x2_t *)v34.f32 = vdup_lane_s32((int32x2_t)vmul_f32(*(float32x2_t *)v38.f32, *(float32x2_t *)v39.f32), 0);
  v40 = vmul_lane_f32(*(float32x2_t *)v37.f32, *(float32x2_t *)v39.f32, 1);
  *(float32x2_t *)v28.f32 = vmul_laneq_f32(*(float32x2_t *)v36.f32, v39, 2);
  v41 = vmul_n_f32(*(float32x2_t *)v37.f32, v39.f32[0]);
  v42 = vmul_n_f32(*(float32x2_t *)v36.f32, v39.f32[0]);
  *(float32x2_t *)v21.f32 = vmul_lane_f32((float32x2_t)vdup_lane_s32(*(int32x2_t *)v39.f32, 0), v35, 1);
  *(float32x2_t *)v36.f32 = vmul_lane_f32(*(float32x2_t *)v36.f32, *(float32x2_t *)v39.f32, 1);
  *(float32x2_t *)v39.f32 = vmul_lane_f32((float32x2_t)vdup_lane_s32(*(int32x2_t *)v39.f32, 1), v35, 1);
  *(float32x2_t *)v33.f32 = vmul_lane_f32(*(float32x2_t *)v31.f32, v35, 1);
  __asm { FMOV            V1.2S, #1.0 }
  *(float32x2_t *)v31.f32 = vsub_f32(_D1, *(float32x2_t *)v34.f32);
  *(int8x8_t *)v44.f32 = vext_s8((int8x8_t)vsub_f32(vsub_f32(_D1, v40), *(float32x2_t *)v28.f32), (int8x8_t)vadd_f32(v41, *(float32x2_t *)v33.f32), 4uLL);
  v44.i64[1] = vsub_f32(v42, *(float32x2_t *)v39.f32).u32[0];
  *(int8x8_t *)v45.f32 = vext_s8((int8x8_t)vsub_f32(v41, *(float32x2_t *)v33.f32), (int8x8_t)vsub_f32(*(float32x2_t *)v31.f32, *(float32x2_t *)v28.f32), 4uLL);
  v45.i64[1] = vadd_f32(*(float32x2_t *)v36.f32, *(float32x2_t *)v21.f32).u32[0];
  v47 = (int32x2_t)vsub_f32(*(float32x2_t *)v36.f32, *(float32x2_t *)v21.f32);
  *(int8x8_t *)v46.f32 = vext_s8((int8x8_t)vadd_f32(v42, *(float32x2_t *)v39.f32), (int8x8_t)v47, 4uLL);
  v46.i64[1] = vsub_f32(*(float32x2_t *)v31.f32, v40).u32[0];
  v47.i32[0] = *(_DWORD *)(a1 + 4);
  v48 = (float32x2_t)vdup_lane_s32(v47, 0);
  v191 = v48;
  v49 = *(_QWORD *)(a1 + 8);
  v50 = _X20[4].u8[0];
  *(float32x2_t *)v16.i8 = vpmin_f32((float32x2_t)vdup_laneq_s32(v17, 2), *(float32x2_t *)v16.i8);
  v51 = vpmin_f32(*(float32x2_t *)v16.i8, *(float32x2_t *)v16.i8);
  v31.f32[0] = *(float *)(a5 + 8) * 0.15;
  v52 = vmin_f32(vmin_f32(vmul_f32(v51, (float32x2_t)vdup_n_s32(0x3E19999Au)), (float32x2_t)vdup_lane_s32(*(int32x2_t *)v31.f32, 0)), v48);
  if (_X20[4].i8[0])
  {
    v53 = vmul_f32(v52, (float32x2_t)vdup_n_s32(0x3F4CCCCDu));
    v54 = vmul_f32(v53, v53);
    v55 = v50 - 1;
    do
    {
      v56 = _X20[5].i64[0];
      v57 = v55;
      v58 = (float32x4_t *)(v56 + 48 * v55);
      v59 = v58[1];
      v60 = vmulq_n_f32(v44, COERCE_FLOAT(*v58));
      v60.i32[3] = 0;
      v61 = vmulq_lane_f32(v45, *(float32x2_t *)v58->f32, 1);
      v61.i32[3] = 0;
      v62 = vmulq_laneq_f32(v46, *v58, 2);
      v62.i32[3] = 0;
      v63 = vaddq_f32(v32, vaddq_f32(v62, vaddq_f32(v60, v61)));
      v64 = v58[2];
      v65 = v64;
      v65.i32[3] = 0;
      v66 = vmulq_f32(v65, vsubq_f32(v63, v59));
      v66.i64[0] = vpaddq_f32(v66, v66).u64[0];
      v67 = vpadd_f32(*(float32x2_t *)v66.f32, *(float32x2_t *)v66.f32);
      v68 = vmlsq_lane_f32(v63, v65, v67, 0);
      v68.i64[1] = vextq_s8((int8x16_t)v68, (int8x16_t)v68, 8uLL).u32[0];
      v69 = vsubq_f32(v59, v68);
      v70 = vmulq_f32(v69, v69);
      v70.i64[0] = vpaddq_f32(v70, v70).u64[0];
      if (vuzp1_s8((int8x8_t)vdup_lane_s16((int16x4_t)vcgt_f32(vpadd_f32(*(float32x2_t *)v70.f32, *(float32x2_t *)v70.f32), v54), 0), *(int8x8_t *)v17.i8).u32[0] == -1)
      {
        v71 = _X20[4].i8[0] - 1;
        _X20[4].i8[0] = v71;
        v72 = (float32x4_t *)(v56 + 48 * v71);
        v73 = *v72;
        v74 = v72[2];
        v58[1] = v72[1];
        v58[2] = v74;
        *v58 = v73;
      }
      else
      {
        v64.i32[3] = v67.i32[1];
        v58[2] = v64;
      }
      --v55;
    }
    while (v57);
    v75 = _X20[4].u8[0];
  }
  else
  {
    v75 = 0;
  }
  v76 = v38;
  v76.i32[3] = v35.i32[1];
  if (v75 != (_DWORD)v50
    || (v77 = (int8x16_t)vabdq_f32(v32, _X20[1]),
        *(float32x2_t *)v77.i8 = vpmax_f32((float32x2_t)*(_OWORD *)&vextq_s8(v77, v77, 8uLL), *(float32x2_t *)v77.i8),
        v78 = (const float *)((char *)&physx::Gu::invalidateQuatThresholds2 + 4 * v50),
        v79 = vld1_dup_f32(v78),
        v80 = vmulq_f32(v76, *_X20),
        v80.i64[0] = vpaddq_f32(v80, v80).u64[0],
        vuzp1_s8((int8x8_t)vdup_lane_s16((int16x4_t)vorr_s8((int8x8_t)vcgt_f32(v79, vpadd_f32(*(float32x2_t *)v80.f32, *(float32x2_t *)v80.f32)), (int8x8_t)vcgt_f32(vpmax_f32(*(float32x2_t *)v77.i8, *(float32x2_t *)v77.i8), vmul_n_f32(v52, physx::Gu::invalidateThresholds2[v50]))), 0), *(int8x8_t *)v17.i8).u32[0] == -1))
  {
    v165 = v76;
    v166 = *(float32x2_t *)v38.f32;
    v168 = v35;
    v17.i32[3] = 0;
    *_X20 = v76;
    _X20[1] = v32;
    v187 = v44;
    v188 = v45;
    v189 = v46;
    v190 = v32;
    v184 = 3;
    v185 = 0;
    v180 = v193;
    v186 = v17;
    v181 = 0.15 * v51.f32[0];
    v182 = 0.05 * v51.f32[0];
    v183 = 0.05 * v51.f32[0];
    v110 = vmulq_n_f32((float32x4_t)xmmword_2260E5F10, *(float *)&v49);
    v163 = v45;
    v164 = v44;
    v111 = vmulq_n_f32(v44, v110.f32[0]);
    v111.i32[3] = 0;
    v112 = vmulq_lane_f32(v45, *(float32x2_t *)v110.f32, 1);
    v112.i32[3] = 0;
    v162 = v46;
    v113 = vmulq_laneq_f32(v46, v110, 2);
    v113.i32[3] = 0;
    v114 = vaddq_f32(v113, vaddq_f32(v111, v112));
    v204 = 4;
    v200 = v32;
    v208 = v48;
    v206 = vaddq_f32(v32, v114);
    v207 = vsubq_f32(v32, v114);
    v201 = v47.i32[0];
    v202 = v47.i32[0];
    v203 = v47.i32[0];
    v205 = 1;
    v179[0] = off_24ED91108;
    v179[1] = &v200;
    v178[0] = off_24ED913D0;
    v178[1] = &v180;
    v199 = 0;
    v196 = 0u;
    v197 = 0u;
    v198[0] = 0u;
    v167 = v32;
    v177 = vsubq_f32(v32, v193);
    result = physx::Gu::gjkPenetration<physx::Gu::LocalConvex<physx::Gu::CapsuleV>,physx::Gu::LocalConvex<physx::Gu::BoxV>>((uint64_t)v179, (uint64_t)v178, &v177, (uint64_t *)&v195, 1, &_X20[4].i8[3], &_X20[4].i8[7], &_X20[4].i8[2], *(double *)v177.i64, *(double *)v193.i64, (int8x8_t)v47, v206, (uint64_t)&v196);
    v176 = 0;
    switch((_DWORD)result)
    {
      case 0:
        return result;
      case 2:
        v117 = 0;
        v118 = v196;
        v119 = v197;
        v120 = v167;
        v121 = vsubq_f32(v196, v167);
        v122 = vmulq_f32(v121, v164);
        v122.i64[0] = vpaddq_f32(v122, v122).u64[0];
        v123 = vmulq_f32(v121, v163);
        v123.i64[0] = vpaddq_f32(v123, v123).u64[0];
        v124 = vmulq_f32(v121, v162);
        v124.i64[0] = vpaddq_f32(v124, v124).u64[0];
        *(int8x8_t *)&v125 = vext_s8((int8x8_t)vpadd_f32(*(float32x2_t *)v122.f32, *(float32x2_t *)v122.f32), (int8x8_t)vpadd_f32(*(float32x2_t *)v123.f32, *(float32x2_t *)v123.f32), 4uLL);
        *((_QWORD *)&v125 + 1) = vpadd_f32(*(float32x2_t *)v124.f32, *(float32x2_t *)v124.f32).u32[0];
        v126 = (int32x4_t)v198[0];
        v127 = HIDWORD(v199);
        v128 = v198[0];
        v128.i32[3] = HIDWORD(v199);
        *a7 = v125;
        a7[1] = v119;
        v129 = 1;
        v130 = v168;
        v132 = v165;
        v131 = v166;
        break;
      case 4:
        v174 = *(_QWORD *)(a2 + 4);
        v175 = *(_DWORD *)(a2 + 12);
        v116.i32[0] = *(_DWORD *)(a5 + 8);
        return physx::Gu::fullContactsGenerationCapsuleBox((uint64_t)&v200, (uint64_t)&v180, (uint64_t)&v174, &v187, v194, &v192, (uint64_t)a7, (int *)&v176, COERCE_DOUBLE(__PAIR64__(HIDWORD(v174), LODWORD(v181))), v116, (uint64_t)a7, (uint64_t)_X20, v198, (float32x2_t *)&v197, (float32x2_t *)&v195, 1);
      default:
        v133 = 1;
        v134 = physx::Gu::epaPenetration((uint64_t)v179);
        v120 = v167;
        v130 = v168;
        v132 = v165;
        v131 = v166;
        if (v134 != 5)
        {
LABEL_31:
          v172 = *(_QWORD *)(a2 + 4);
          v173 = *(_DWORD *)(a2 + 12);
          v126.i32[0] = *(_DWORD *)(a5 + 8);
          return physx::Gu::fullContactsGenerationCapsuleBox((uint64_t)&v200, (uint64_t)&v180, (uint64_t)&v172, &v187, v194, &v192, (uint64_t)a7, (int *)&v176, COERCE_DOUBLE(__PAIR64__(HIDWORD(v172), LODWORD(v181))), v126, (uint64_t)a7, (uint64_t)_X20, v198, (float32x2_t *)&v197, (float32x2_t *)&v195, v133);
        }
        v118 = v196;
        v135 = v197;
        v136 = vsubq_f32(v196, v190);
        v137 = vmulq_f32(v187, v136);
        v137.i64[0] = vpaddq_f32(v137, v137).u64[0];
        v138 = vmulq_f32(v136, v188);
        v138.i64[0] = vpaddq_f32(v138, v138).u64[0];
        v139 = vmulq_f32(v136, v189);
        v139.i64[0] = vpaddq_f32(v139, v139).u64[0];
        *(int8x8_t *)v138.f32 = vext_s8((int8x8_t)vpadd_f32(*(float32x2_t *)v137.f32, *(float32x2_t *)v137.f32), (int8x8_t)vpadd_f32(*(float32x2_t *)v138.f32, *(float32x2_t *)v138.f32), 4uLL);
        v138.i64[1] = vpadd_f32(*(float32x2_t *)v139.f32, *(float32x2_t *)v139.f32).u32[0];
        v126 = (int32x4_t)v198[0];
        v127 = HIDWORD(v199);
        v128 = v198[0];
        v128.i32[3] = HIDWORD(v199);
        v117 = v176;
        v140 = (float32x4_t *)&a7[3 * v176];
        *v140 = v138;
        v140[1] = v135;
        v129 = v117 + 1;
        break;
    }
    v133 = 0;
    v176 = v129;
    a7[3 * v117 + 2] = v128;
    if ((_DWORD)v50 && v75 == (_DWORD)v50)
    {
      v141 = (float32x2_t)vdup_lane_s32((int32x2_t)v130, 1);
      v171 = vmul_f32(v52, (float32x2_t)vdup_n_s32(0x3DCCCCCDu));
      v126.i32[3] = v127;
      v170 = v126;
      v132.i32[3] = 0;
      v142 = vsubq_f32(v118, v120);
      v143 = vmulq_n_f32(v142, vmla_f32((float32x2_t)0xBF000000BF000000, v141, v141).f32[0]);
      v143.i32[3] = 0;
      v144 = (float32x2_t)vextq_s8((int8x16_t)v132, (int8x16_t)v132, 8uLL).u64[0];
      v145 = (int8x8_t)vmls_f32(vmul_f32(v131, (float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v142, (int8x16_t)v142, 4uLL)), (float32x2_t)vext_s8((int8x8_t)v131, (int8x8_t)v144, 4uLL), *(float32x2_t *)v142.f32);
      *(int8x8_t *)v146.f32 = vext_s8(v145, (int8x8_t)vmls_f32(vmul_f32(v144, *(float32x2_t *)v142.f32), v131, (float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v142, (int8x16_t)v142, 8uLL)), 4uLL);
      v146.i64[1] = v145.u32[0];
      v147 = vmlsq_lane_f32(v143, v146, v130, 1);
      v147.i64[1] = vextq_s8((int8x16_t)v147, (int8x16_t)v147, 8uLL).u32[0];
      v148 = vmulq_f32(v132, v142);
      v148.i64[0] = vpaddq_f32(v148, v148).u64[0];
      v149 = vmlaq_n_f32(v147, v132, vpadd_f32(*(float32x2_t *)v148.f32, *(float32x2_t *)v148.f32).f32[0]);
      v150 = vaddq_f32(v149, v149);
      v150.i32[3] = 0;
      v169 = v150;
      physx::Gu::PersistentContactManifold::addManifoldPoint2((uint64_t)_X20, &v169, &v197, (__int128 *)v170.i8, &v171);
      v151 = (float32x4_t)v192;
      v151.i32[3] = 0;
      v152 = (float32x2_t)vdupq_laneq_s32(v192, 3).u64[0];
      v153 = vmulq_n_f32((float32x4_t)v198[0], vmla_f32((float32x2_t)0xBF000000BF000000, v152, v152).f32[0]);
      v153.i32[3] = 0;
      v154 = (float32x2_t)vextq_s8((int8x16_t)v151, (int8x16_t)v151, 8uLL).u64[0];
      v155 = (float32x2_t)vextq_s8(v198[0], v198[0], 8uLL).u64[0];
      v156 = (int8x8_t)vmls_f32(vmul_f32(*(float32x2_t *)v192.i8, (float32x2_t)vext_s8(*(int8x8_t *)v198[0].i8, (int8x8_t)v155, 4uLL)), (float32x2_t)vext_s8(*(int8x8_t *)v192.i8, (int8x8_t)v154, 4uLL), *(float32x2_t *)v198[0].i8);
      *(int8x8_t *)v157.f32 = vext_s8(v156, (int8x8_t)vmls_f32(vmul_f32(v154, *(float32x2_t *)v198[0].i8), *(float32x2_t *)v192.i8, v155), 4uLL);
      v157.i64[1] = v156.u32[0];
      v158 = vmlaq_laneq_f32(v153, v157, (float32x4_t)v192, 3);
      v158.i64[1] = vextq_s8((int8x16_t)v158, (int8x16_t)v158, 8uLL).u32[0];
      v159 = vmulq_f32(v151, (float32x4_t)v198[0]);
      v159.i64[0] = vpaddq_f32(v159, v159).u64[0];
      v160 = vmlaq_n_f32(v158, v151, vpadd_f32(*(float32x2_t *)v159.f32, *(float32x2_t *)v159.f32).f32[0]);
      v161 = vaddq_f32(v160, v160);
      v161.i32[3] = 0;
      v169 = v161;
      v108 = &v169;
      v109 = &v169;
LABEL_30:
      physx::Gu::PersistentContactManifold::addManifoldContactsToContactBuffer((uint64_t)_X20, (uint64_t)a7, v108, v109, v194, &v191, (float32x2_t *)&v195);
      return 1;
    }
    goto LABEL_31;
  }
  if ((_DWORD)v50)
  {
    v81 = _X20[5].i64[0];
    v82 = *(int8x16_t *)(v81 + 32);
    v83 = (float32x4_t)v82;
    if ((_DWORD)v50 != 1)
    {
      v84 = v50 - 1;
      v85 = (float32x4_t *)(v81 + 80);
      v83 = (float32x4_t)v82;
      do
      {
        v86 = *v85;
        v85 += 3;
        v83 = vaddq_f32(v83, v86);
        --v84;
      }
      while (v84);
    }
    v83.i32[3] = 0;
    v87 = vmulq_f32(v83, v83);
    v87.i64[0] = vpaddq_f32(v87, v87).u64[0];
    v82.i32[3] = 0;
    v88 = (float32x4_t)vbslq_s8((int8x16_t)vcltzq_s32(vshlq_n_s32(vdupq_lane_s32(vcgt_f32(vpadd_f32(*(float32x2_t *)v87.f32, *(float32x2_t *)v87.f32), (float32x2_t)0x3400000034000000), 0), 0x1FuLL)), (int8x16_t)v83, v82);
    v89 = (float32x4_t)v192;
    v89.i32[3] = 0;
    v90 = (float32x2_t)vdupq_laneq_s32(v192, 3).u64[0];
    v91 = vmulq_n_f32(v88, vmla_f32((float32x2_t)0xBF000000BF000000, v90, v90).f32[0]);
    v91.i32[3] = 0;
    v92 = (float32x2_t)vextq_s8((int8x16_t)v89, (int8x16_t)v89, 8uLL).u64[0];
    v93 = (float32x2_t)vextq_s8((int8x16_t)v88, (int8x16_t)v88, 8uLL).u64[0];
    v94 = (int8x8_t)vmls_f32(vmul_f32(*(float32x2_t *)v192.i8, (float32x2_t)vext_s8(*(int8x8_t *)v88.f32, (int8x8_t)v93, 4uLL)), (float32x2_t)vext_s8(*(int8x8_t *)v192.i8, (int8x8_t)v92, 4uLL), *(float32x2_t *)v88.f32);
    *(int8x8_t *)v95.f32 = vext_s8(v94, (int8x8_t)vmls_f32(vmul_f32(v92, *(float32x2_t *)v88.f32), *(float32x2_t *)v192.i8, v93), 4uLL);
    v95.i64[1] = v94.u32[0];
    v96 = vmlaq_laneq_f32(v91, v95, (float32x4_t)v192, 3);
    v96.i64[1] = vextq_s8((int8x16_t)v96, (int8x16_t)v96, 8uLL).u32[0];
    v97 = vmulq_f32(v89, v88);
    v97.i64[0] = vpaddq_f32(v97, v97).u64[0];
    v98 = vmlaq_n_f32(v96, v89, vpadd_f32(*(float32x2_t *)v97.f32, *(float32x2_t *)v97.f32).f32[0]);
    v99 = vaddq_f32(v98, v98);
    v99.i32[3] = 0;
    v100 = vmulq_f32(v99, v99);
    v100.i64[0] = vpaddq_f32(v100, v100).u64[0];
    v101 = vpadd_f32(*(float32x2_t *)v100.f32, *(float32x2_t *)v100.f32);
    v102 = vrsqrte_f32(v101);
    v103 = 4;
    do
    {
      v102 = vmul_f32(v102, vrsqrts_f32(vmul_f32(v102, v102), v101));
      --v103;
    }
    while (v103);
    v104 = vmul_f32(v101, (float32x2_t)vbsl_s8((int8x8_t)vdup_lane_s32(vceqz_f32(v101), 0), (int8x8_t)_D1, (int8x8_t)v102));
    v105 = vrecpe_f32(v104);
    v106 = 4;
    do
    {
      v105 = vmul_f32(v105, vrecps_f32(v104, v105));
      --v106;
    }
    while (v106);
    v107 = vmulq_n_f32(v99, v105.f32[0]);
    v107.i32[3] = 0;
    v200 = v107;
    v108 = &v200;
    v109 = &v200;
    goto LABEL_30;
  }
  return 0;
}

uint64_t physx::Gu::fullContactsGenerationCapsuleBox(uint64_t a1, uint64_t a2, uint64_t a3, float32x4_t *a4, float32x4_t *a5, int32x4_t *a6, uint64_t a7, int *a8, double a9, int32x4_t a10, uint64_t a11, uint64_t a12, int8x16_t *a13, float32x2_t *a14, float32x2_t *a15, char a16)
{
  float v19;
  __int32 v20;
  uint64_t v22;
  float32x4_t v23;
  unsigned int v24;
  uint64_t CapsuleBoxFullContactManifold;
  int v26;
  float32x4_t v27;
  float32x2_t v28;
  float32x4_t v29;
  float32x2_t v30;
  float32x2_t v31;
  int8x8_t v32;
  float32x4_t v33;
  float32x4_t v34;
  float32x4_t v35;
  float32x4_t v36;
  float32x4_t v37;
  _OWORD v42[3];
  _BYTE v43[8];
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  int v47;
  uint64_t v48;
  int v49;
  uint64_t *v50;
  uint64_t *v51;
  void *v52;
  __int128 v53;
  __int128 v54;
  _QWORD v55[7];
  char v56;
  uint64_t v57;
  uint64_t v58;

  v19 = *(float *)a10.i32;
  v20 = LODWORD(a9);
  v58 = *MEMORY[0x24BDAC8D0];
  physx::Gu::PolygonalBox::PolygonalBox((uint64_t)v43, a3, a9, a10);
  v46 = 0;
  v48 = 0x600000008;
  v47 = 0;
  v49 = 0;
  v22 = a7;
  v50 = &v45;
  v51 = &v44;
  v52 = &physx::Gu::gPCMBoxPolygonData;
  v53 = 0u;
  v54 = 0u;
  v42[0] = xmmword_2260E5F10;
  v42[1] = xmmword_2260E5F20;
  v23 = (float32x4_t)xmmword_2260E5F40;
  v42[2] = xmmword_2260E5F40;
  v55[5] = v42;
  v55[6] = v42;
  v56 = 1;
  v55[4] = a6;
  v55[0] = &off_24ED90FE0;
  v57 = a2;
  v24 = *a8;
  v23.i32[0] = v20;
  CapsuleBoxFullContactManifold = physx::Gu::generateCapsuleBoxFullContactManifold((float32x4_t *)a1, (uint64_t)&v46, v55, a4, a7, a8, a15, a13, v23, v19, a14, a16);
  if ((_DWORD)CapsuleBoxFullContactManifold)
  {
    v26 = *a8;
    if (v24)
    {
      if (v26 != v24)
      {
        v24 = v26 - 1;
        *a8 = v26 - 1;
        v22 = a7 + 48;
      }
    }
    else
    {
      v24 = *a8;
    }
    physx::Gu::PersistentContactManifold::addBatchManifoldContacts2(a12, v22, v24);
    v27 = *(float32x4_t *)a6;
    v27.i32[3] = 0;
    v28 = (float32x2_t)vdupq_laneq_s32(*a6, 3).u64[0];
    v29 = vmulq_n_f32(*(float32x4_t *)a13, vmla_f32((float32x2_t)0xBF000000BF000000, v28, v28).f32[0]);
    v29.i32[3] = 0;
    v30 = (float32x2_t)vextq_s8((int8x16_t)v27, (int8x16_t)v27, 8uLL).u64[0];
    v31 = (float32x2_t)vextq_s8(*a13, *a13, 8uLL).u64[0];
    v32 = (int8x8_t)vmls_f32(vmul_f32(*(float32x2_t *)a6->i8, (float32x2_t)vext_s8(*(int8x8_t *)a13->i8, (int8x8_t)v31, 4uLL)), (float32x2_t)vext_s8(*(int8x8_t *)a6->i8, (int8x8_t)v30, 4uLL), *(float32x2_t *)a13->i8);
    *(int8x8_t *)v33.f32 = vext_s8(v32, (int8x8_t)vmls_f32(vmul_f32(v30, *(float32x2_t *)a13->i8), *(float32x2_t *)a6->i8, v31), 4uLL);
    v33.i64[1] = v32.u32[0];
    v34 = vmlaq_laneq_f32(v29, v33, *(float32x4_t *)a6, 3);
    v34.i64[1] = vextq_s8((int8x16_t)v34, (int8x16_t)v34, 8uLL).u32[0];
    v35 = vmulq_f32(v27, *(float32x4_t *)a13);
    v35.i64[0] = vpaddq_f32(v35, v35).u64[0];
    v36 = vmlaq_n_f32(v34, v27, vpadd_f32(*(float32x2_t *)v35.f32, *(float32x2_t *)v35.f32).f32[0]);
    v37 = vaddq_f32(v36, v36);
    v37.i32[3] = 0;
    *a13 = (int8x16_t)v37;
    physx::Gu::PersistentContactManifold::addManifoldContactsToContactBuffer(a12, a11, a13, (float32x4_t *)a13, a5, (float32x2_t *)(a1 + 80), a15);
  }
  return CapsuleBoxFullContactManifold;
}

uint64_t physx::Gu::pcmContactCapsuleCapsule(uint64_t a1, uint64_t a2, float32x4_t *a3, float32x4_t *a4, float32x2_t *a5, uint64_t a6, uint64_t a7)
{
  float32x4_t v8;
  float32x4_t v10;
  float32x4_t v11;
  float32x2_t v12;
  float32x2_t v13;
  uint64_t v14;
  float32x4_t v15;
  float32x4_t v16;
  float32x2_t v17;
  float32x4_t v18;
  float32x2_t v19;
  float32x4_t v20;
  float32x4_t v21;
  float32x4_t v22;
  float32x4_t v27;
  float32x4_t v28;
  float32x4_t v29;
  float32x4_t v30;
  float32x4_t v31;
  float32x2_t v32;
  float32x2_t v33;
  float32x2_t v34;
  int8x16_t v35;
  int8x16_t v36;
  unsigned __int8 v37;
  float32x2_t v38;
  float32x4_t v39;
  float32x2_t v40;
  float32x4_t v41;
  float32x2_t v42;
  float32x2_t v43;
  int v44;
  float32x2_t v46;
  float32x2_t v47;
  int v48;
  int8x16_t v49;
  int8x16_t v50;
  float32x2_t v51;
  int v52;
  float32x4_t v53;
  float32x2_t v54;
  float32x2_t v55;
  int v56;
  int8x16_t v57;
  float32x4_t v58;
  float32x4_t v59;
  float32x4_t v60;
  int v61;
  int32x4_t v62;
  int32x4_t v63;
  int32x4_t v64;
  int32x4_t v65;
  int32x4_t v66;
  int32x4_t v67;
  float32x4_t v68;
  int8x8_t v70;
  float32x4_t v71;
  float32x4_t v72;
  float32x4_t v73;
  float32x2_t v74;
  int v75;
  float32x4_t v76;
  float32x4_t v77;
  float32x4_t v78;
  float32x2_t v79;
  float32x2_t v80;
  int v81;
  float32x2_t v82;
  float32x2_t v83;
  int v84;
  float32x4_t v85;
  float32x4_t v86;
  float32x4_t v87;
  uint64_t v88;
  float32x4_t *v89;
  float32x4_t v90;
  float32x4_t v91;
  float32x4_t v92;
  float32x2_t v93;
  float32x2_t v94;
  int v95;
  float32x2_t v96;
  float32x2_t v97;
  int v98;
  float32x4_t v99;
  float32x4_t v100;
  float32x4_t v101;
  uint64_t v102;
  float32x4_t *v103;
  float32x4_t v104;
  float32x4_t v105;
  float32x4_t v106;
  float32x2_t v107;
  float32x2_t v108;
  int v109;
  float32x2_t v110;
  float32x2_t v111;
  int v112;
  float32x4_t v113;
  float32x4_t v114;
  float32x4_t v115;
  uint64_t v116;
  float32x4_t *v117;
  float32x4_t v118;
  float32x4_t v119;
  float32x2_t v120;
  int32x2_t v121;
  float32x4_t v122;
  float32x4_t v123;
  float32x2_t v124;
  float32x2_t v125;
  int v126;
  float32x2_t v127;
  float32x2_t v128;
  int v129;
  float32x4_t v130;
  float32x4_t v131;
  float32x4_t v132;
  float32x2_t v133;
  int v134;
  float32x4_t v135;
  uint64_t v136;
  float32x4_t *v137;
  float32x2_t v139;
  int v140;
  float32x2_t v141;
  float32x2_t v142;
  int v143;
  float32x4_t v144;
  float32x4_t v145;
  float32x4_t v146;
  uint64_t v147;
  float32x4_t *v148;
  float32x4_t v149;
  float32x4_t v150;
  float32x2_t v151;
  float32x4_t v152;
  float32x2_t v153;
  float32x4_t v154;
  float32x4_t v155;
  float32x4_t v156;
  float32x4_t v157;
  uint64_t v158;
  float32x2_t v159;
  float32x4_t v160;
  float32x4_t v161;
  float32x4_t v162;
  float32x4_t v163;

  v8.i64[0] = a3[1].i64[0];
  v8.i64[1] = a3[1].u32[2];
  _Q5 = *(int8x16_t *)a3;
  v10.i64[0] = a4[1].i64[0];
  v10.i64[1] = a4[1].u32[2];
  v11 = *a4;
  v12 = *(float32x2_t *)(a1 + 4);
  v13 = *(float32x2_t *)(a2 + 4);
  v14 = *(_QWORD *)(a2 + 8);
  v15.i64[0] = 0x3F0000003F000000;
  v15.i64[1] = 0x3F0000003F000000;
  v16 = vmulq_f32(vaddq_f32(v8, v10), v15);
  v16.i32[3] = 0;
  v17 = *a5;
  v18 = vsubq_f32(v8, v16);
  v19 = (float32x2_t)vextq_s8(_Q5, _Q5, 8uLL).u64[0];
  v20 = vmulq_n_f32(*a3, vadd_f32(*(float32x2_t *)_Q5.i8, *(float32x2_t *)_Q5.i8).f32[0]);
  v20.i32[3] = 0;
  v152 = v16;
  v21 = vsubq_f32(v10, v16);
  *(int8x8_t *)v15.f32 = vext_s8((int8x8_t)vdup_laneq_s32(*(int32x4_t *)a3, 3), (int8x8_t)v19, 4uLL);
  v15.i64[1] = vneg_f32((float32x2_t)vdup_lane_s32(*(int32x2_t *)a3->f32, 1)).u32[0];
  v22 = vmlaq_n_f32(v20, v15, *(float *)vdup_lane_s32((int32x2_t)vadd_f32(v19, v19), 1).i32);
  __asm { FMOV            V5.2S, #-1.0 }
  v22.i32[0] = vadd_f32(*(float32x2_t *)v22.f32, *(float32x2_t *)_Q5.i8).u32[0];
  v27 = vmulq_n_f32(v22, COERCE_FLOAT(*(_QWORD *)(a1 + 8)));
  v27.i32[3] = 0;
  v163 = vaddq_f32(v18, v27);
  v28 = vsubq_f32(v18, v27);
  v27.i64[0] = vextq_s8((int8x16_t)v11, (int8x16_t)v11, 8uLL).u64[0];
  v29 = vmulq_n_f32(v11, vadd_f32(*(float32x2_t *)v11.f32, *(float32x2_t *)v11.f32).f32[0]);
  v29.i32[3] = 0;
  v155 = v163;
  *(int8x8_t *)v18.f32 = vext_s8((int8x8_t)vdup_laneq_s32((int32x4_t)v11, 3), *(int8x8_t *)v27.f32, 4uLL);
  v18.i64[1] = vneg_f32((float32x2_t)vdup_lane_s32(*(int32x2_t *)v11.f32, 1)).u32[0];
  v30 = vmlaq_n_f32(v29, v18, *(float *)vdup_lane_s32((int32x2_t)vadd_f32(*(float32x2_t *)v27.f32, *(float32x2_t *)v27.f32), 1).i32);
  v30.i32[0] = vadd_f32(*(float32x2_t *)v30.f32, *(float32x2_t *)_Q5.i8).u32[0];
  v31 = vmulq_n_f32(v30, *(float *)&v14);
  v31.i32[3] = 0;
  v161 = vaddq_f32(v21, v31);
  v162 = vsubq_f32(v28, v163);
  v149 = vsubq_f32(v21, v31);
  v150 = v28;
  v156 = vsubq_f32(v149, v161);
  v157 = v162;
  v160 = v156;
  v151 = v12;
  v153 = vadd_f32(v12, v13);
  v154 = v161;
  v32 = vadd_f32(v153, v17);
  v33 = (float32x2_t)vdup_lane_s32((int32x2_t)vmul_f32(v32, v32), 0);
  v158 = 0;
  v159 = 0;
  v34 = physx::Gu::distanceSegmentSegmentSquared(&v163, &v162, &v161, &v160, &v159, &v158);
  v37 = vcge_f32(v33, v34).u8[0];
  if ((v37 & 1) != 0)
  {
    v38 = (float32x2_t)vdup_lane_s32((int32x2_t)v153, 0);
    v39 = vmulq_f32(v157, v157);
    v39.i64[0] = vpaddq_f32(v39, v39).u64[0];
    v40 = vpadd_f32(*(float32x2_t *)v39.f32, *(float32x2_t *)v39.f32);
    v41 = vmulq_f32(v156, v156);
    v41.i64[0] = vpaddq_f32(v41, v41).u64[0];
    v42 = vpadd_f32(*(float32x2_t *)v41.f32, *(float32x2_t *)v41.f32);
    v43 = vrsqrte_f32(v40);
    v44 = 4;
    do
    {
      v43 = vmul_f32(v43, vrsqrts_f32(vmul_f32(v43, v43), v40));
      --v44;
    }
    while (v44);
    *(int32x2_t *)v35.i8 = vcgt_f32((float32x2_t)vdup_n_s32(0x358637BDu), v42);
    __asm { FMOV            V2.2S, #1.0 }
    v46 = vmul_f32(v40, (float32x2_t)vbsl_s8((int8x8_t)vdup_lane_s32(vceqz_f32(v40), 0), _D2, (int8x8_t)v43));
    v47 = vrecpe_f32(v46);
    v48 = 4;
    do
    {
      v47 = vmul_f32(v47, vrecps_f32(v46, v47));
      --v48;
    }
    while (v48);
    v49 = (int8x16_t)vmulq_n_f32(v157, v47.f32[0]);
    v49.i32[3] = 0;
    *(int32x2_t *)v36.i8 = vcgt_f32((float32x2_t)vdup_n_s32(0x358637BDu), v40);
    v50 = (int8x16_t)vdupq_lane_s32((int32x2_t)*(_OWORD *)&vmvnq_s8(v36), 0);
    v51 = vrsqrte_f32(v42);
    v52 = 4;
    do
    {
      v51 = vmul_f32(v51, vrsqrts_f32(vmul_f32(v51, v51), v42));
      --v52;
    }
    while (v52);
    v53 = (float32x4_t)vandq_s8(v49, v50);
    v54 = vmul_f32(v42, (float32x2_t)vbsl_s8((int8x8_t)vdup_lane_s32(vceqz_f32(v42), 0), _D2, (int8x8_t)v51));
    v55 = vrecpe_f32(v54);
    v56 = 4;
    do
    {
      v55 = vmul_f32(v55, vrecps_f32(v54, v55));
      --v56;
    }
    while (v56);
    v57 = (int8x16_t)vmulq_n_f32(v156, v55.f32[0]);
    v57.i32[3] = 0;
    v58 = vmulq_f32(v53, (float32x4_t)vandq_s8(v57, (int8x16_t)vdupq_lane_s32((int32x2_t)*(_OWORD *)&vmvnq_s8(v35), 0)));
    v58.i64[0] = vpaddq_f32(v58, v58).u64[0];
    if (vabs_f32(vpadd_f32(*(float32x2_t *)v58.f32, *(float32x2_t *)v58.f32)).f32[0] <= 0.9998)
      goto LABEL_38;
    *(int32x2_t *)v59.f32 = vrev64_s32((int32x2_t)v40);
    *(int32x2_t *)&v59.u32[2] = vrev64_s32((int32x2_t)v42);
    v60 = vrecpeq_f32(v59);
    v61 = 4;
    do
    {
      v60 = vmulq_f32(v60, vrecpsq_f32(v60, v59));
      --v61;
    }
    while (v61);
    v62 = (int32x4_t)vmulq_f32(v157, vsubq_f32(v154, v155));
    v63 = (int32x4_t)vmulq_f32(v156, vsubq_f32(v155, v154));
    v64 = vzip1q_s32(v62, v63);
    v65 = (int32x4_t)vmulq_f32(v157, vsubq_f32(v149, v155));
    v66 = (int32x4_t)vmulq_f32(vsubq_f32(v150, v154), v156);
    v67 = vzip1q_s32(v65, v66);
    v68 = (float32x4_t)vbicq_s8((int8x16_t)vmulq_f32(vaddq_f32((float32x4_t)vzip1q_s32(vzip2q_s32(v62, v63), vzip2q_s32(v65, v66)), vaddq_f32((float32x4_t)vzip1q_s32(v64, v67), (float32x4_t)vzip2q_s32(v64, v67))), v60), (int8x16_t)vceqzq_f32(v59));
    __asm { FMOV            V6.4S, #1.0 }
    v70 = (int8x8_t)vmovn_s32((int32x4_t)vandq_s8((int8x16_t)vcgezq_f32(v68), (int8x16_t)vcgeq_f32(_Q6, v68)));
    if (vdup_lane_s8(v70, 0).u32[0] == -1
      && (v71 = vmlaq_n_f32(v155, v157, v68.f32[0]),
          v71.i64[1] = vextq_s8((int8x16_t)v71, (int8x16_t)v71, 8uLL).u32[0],
          v72 = vsubq_f32(v71, v154),
          v73 = vmulq_f32(v72, v72),
          v73.i64[0] = vpaddq_f32(v73, v73).u64[0],
          v74 = vpadd_f32(*(float32x2_t *)v73.f32, *(float32x2_t *)v73.f32),
          vuzp1_s8((int8x8_t)vdup_lane_s16((int16x4_t)vand_s8((int8x8_t)vcgt_f32(v74, (float32x2_t)vdup_n_s32(0x358637BDu)), (int8x8_t)vcgt_f32(v33, v74)), 0), (int8x8_t)v34).u32[0] == -1))
    {
      v139 = vrsqrte_f32(v74);
      v140 = 4;
      do
      {
        v139 = vmul_f32(v139, vrsqrts_f32(vmul_f32(v139, v139), v74));
        --v140;
      }
      while (v140);
      v141 = vmul_f32(v74, (float32x2_t)vbsl_s8((int8x8_t)vdup_lane_s32(vceqz_f32(v74), 0), _D2, (int8x8_t)v139));
      v142 = vrecpe_f32(v141);
      v143 = 4;
      do
      {
        v142 = vmul_f32(v142, vrecps_f32(v141, v142));
        --v143;
      }
      while (v143);
      v144 = vmulq_n_f32(v72, v142.f32[0]);
      v145 = v144;
      v145.i32[3] = 0;
      v146 = vaddq_f32(v152, vmlsq_lane_f32(v71, v145, v151, 0));
      v147 = *(unsigned int *)(a7 + 4096);
      *(_DWORD *)(a7 + 4096) = v147 + 1;
      v144.i32[3] = vsub_f32(v141, v38).i32[1];
      v148 = (float32x4_t *)(a7 + (v147 << 6));
      *v148 = v144;
      v148[1].i64[0] = v146.i64[0];
      v148[1].i32[2] = v146.i32[2];
      v148[3].i32[1] = -1;
      v75 = 1;
    }
    else
    {
      v75 = 0;
    }
    if (vdup_lane_s8(v70, 2).u32[0] == -1)
    {
      v76 = vmlaq_lane_f32(v155, v157, *(float32x2_t *)v68.f32, 1);
      v76.i64[1] = vextq_s8((int8x16_t)v76, (int8x16_t)v76, 8uLL).u32[0];
      v77 = vsubq_f32(v76, v149);
      v78 = vmulq_f32(v77, v77);
      v78.i64[0] = vpaddq_f32(v78, v78).u64[0];
      v79 = vpadd_f32(*(float32x2_t *)v78.f32, *(float32x2_t *)v78.f32);
      if (vuzp1_s8((int8x8_t)vdup_lane_s16((int16x4_t)vand_s8((int8x8_t)vcgt_f32(v79, (float32x2_t)vdup_n_s32(0x358637BDu)), (int8x8_t)vcgt_f32(v33, v79)), 0), (int8x8_t)v34).u32[0] == -1)
      {
        v80 = vrsqrte_f32(v79);
        v81 = 4;
        do
        {
          v80 = vmul_f32(v80, vrsqrts_f32(vmul_f32(v80, v80), v79));
          --v81;
        }
        while (v81);
        v82 = vmul_f32(v79, (float32x2_t)vbsl_s8((int8x8_t)vdup_lane_s32(vceqz_f32(v79), 0), _D2, (int8x8_t)v80));
        v83 = vrecpe_f32(v82);
        v84 = 4;
        do
        {
          v83 = vmul_f32(v83, vrecps_f32(v82, v83));
          --v84;
        }
        while (v84);
        v85 = vmulq_n_f32(v77, v83.f32[0]);
        v86 = v85;
        v86.i32[3] = 0;
        v87 = vaddq_f32(v152, vmlsq_lane_f32(v76, v86, v151, 0));
        v88 = *(unsigned int *)(a7 + 4096);
        *(_DWORD *)(a7 + 4096) = v88 + 1;
        v85.i32[3] = vsub_f32(v82, v38).i32[1];
        v89 = (float32x4_t *)(a7 + (v88 << 6));
        *v89 = v85;
        v89[1].i64[0] = v87.i64[0];
        v89[1].i32[2] = v87.i32[2];
        v89[3].i32[1] = -1;
        ++v75;
      }
    }
    if (vdup_lane_s8(v70, 4).u32[0] == -1)
    {
      v90 = vmlaq_laneq_f32(v154, v156, v68, 2);
      v90.i64[1] = vextq_s8((int8x16_t)v90, (int8x16_t)v90, 8uLL).u32[0];
      v91 = vsubq_f32(v155, v90);
      v92 = vmulq_f32(v91, v91);
      v92.i64[0] = vpaddq_f32(v92, v92).u64[0];
      v93 = vpadd_f32(*(float32x2_t *)v92.f32, *(float32x2_t *)v92.f32);
      if (vuzp1_s8((int8x8_t)vdup_lane_s16((int16x4_t)vand_s8((int8x8_t)vcgt_f32(v93, (float32x2_t)vdup_n_s32(0x358637BDu)), (int8x8_t)vcgt_f32(v33, v93)), 0), (int8x8_t)v34).u32[0] == -1)
      {
        v94 = vrsqrte_f32(v93);
        v95 = 4;
        do
        {
          v94 = vmul_f32(v94, vrsqrts_f32(vmul_f32(v94, v94), v93));
          --v95;
        }
        while (v95);
        v96 = vmul_f32(v93, (float32x2_t)vbsl_s8((int8x8_t)vdup_lane_s32(vceqz_f32(v93), 0), _D2, (int8x8_t)v94));
        v97 = vrecpe_f32(v96);
        v98 = 4;
        do
        {
          v97 = vmul_f32(v97, vrecps_f32(v96, v97));
          --v98;
        }
        while (v98);
        v99 = vmulq_n_f32(v91, v97.f32[0]);
        v100 = v99;
        v100.i32[3] = 0;
        v101 = vaddq_f32(v152, vmlsq_lane_f32(v155, v100, v151, 0));
        v102 = *(unsigned int *)(a7 + 4096);
        *(_DWORD *)(a7 + 4096) = v102 + 1;
        v99.i32[3] = vsub_f32(v96, v38).i32[1];
        v103 = (float32x4_t *)(a7 + (v102 << 6));
        *v103 = v99;
        v103[1].i64[0] = v101.i64[0];
        v103[1].i32[2] = v101.i32[2];
        v103[3].i32[1] = -1;
        ++v75;
      }
    }
    if (vdup_lane_s8(v70, 6).u32[0] == -1)
    {
      v104 = vmlaq_laneq_f32(v154, v156, v68, 3);
      v104.i64[1] = vextq_s8((int8x16_t)v104, (int8x16_t)v104, 8uLL).u32[0];
      v105 = vsubq_f32(v150, v104);
      v106 = vmulq_f32(v105, v105);
      v106.i64[0] = vpaddq_f32(v106, v106).u64[0];
      v107 = vpadd_f32(*(float32x2_t *)v106.f32, *(float32x2_t *)v106.f32);
      if (vuzp1_s8((int8x8_t)vdup_lane_s16((int16x4_t)vand_s8((int8x8_t)vcgt_f32(v107, (float32x2_t)vdup_n_s32(0x358637BDu)), (int8x8_t)vcgt_f32(v33, v107)), 0), (int8x8_t)v34).u32[0] == -1)
      {
        v108 = vrsqrte_f32(v107);
        v109 = 4;
        do
        {
          v108 = vmul_f32(v108, vrsqrts_f32(vmul_f32(v108, v108), v107));
          --v109;
        }
        while (v109);
        v110 = vmul_f32(v107, (float32x2_t)vbsl_s8((int8x8_t)vdup_lane_s32(vceqz_f32(v107), 0), _D2, (int8x8_t)v108));
        v111 = vrecpe_f32(v110);
        v112 = 4;
        do
        {
          v111 = vmul_f32(v111, vrecps_f32(v110, v111));
          --v112;
        }
        while (v112);
        v113 = vmulq_n_f32(v105, v111.f32[0]);
        v114 = v113;
        v114.i32[3] = 0;
        v115 = vaddq_f32(v152, vmlsq_lane_f32(v150, v114, v151, 0));
        v116 = *(unsigned int *)(a7 + 4096);
        *(_DWORD *)(a7 + 4096) = v116 + 1;
        v113.i32[3] = vsub_f32(v110, v38).i32[1];
        v117 = (float32x4_t *)(a7 + (v116 << 6));
        *v117 = v113;
        v117[1].i64[0] = v115.i64[0];
        v117[1].i32[2] = v115.i32[2];
        v117[3].i32[1] = -1;
        ++v75;
      }
    }
    if (!v75)
    {
LABEL_38:
      v118 = vmlaq_n_f32(v155, v157, v159.f32[0]);
      v118.i64[1] = vextq_s8((int8x16_t)v118, (int8x16_t)v118, 8uLL).u32[0];
      v119 = vmlaq_n_f32(v154, v156, *(float *)&v158);
      v119.i64[1] = vextq_s8((int8x16_t)v119, (int8x16_t)v119, 8uLL).u32[0];
      v120 = (float32x2_t)vdup_n_s32(0x358637BDu);
      v121 = vcgt_f32(v120, v34);
      v122 = (float32x4_t)vbslq_s8((int8x16_t)vdupq_lane_s32(v121, 0), vbslq_s8((int8x16_t)vdupq_lane_s32(vcgt_f32(v40, v120), 0), (int8x16_t)v157, (int8x16_t)xmmword_2260E5F10), (int8x16_t)vsubq_f32(v118, v119));
      v123 = vmulq_f32(v122, v122);
      v123.i64[0] = vpaddq_f32(v123, v123).u64[0];
      v124 = vpadd_f32(*(float32x2_t *)v123.f32, *(float32x2_t *)v123.f32);
      v125 = vrsqrte_f32(v124);
      v126 = 4;
      do
      {
        v125 = vmul_f32(v125, vrsqrts_f32(vmul_f32(v125, v125), v124));
        --v126;
      }
      while (v126);
      v127 = vmul_f32(v124, (float32x2_t)vbsl_s8((int8x8_t)vdup_lane_s32(vceqz_f32(v124), 0), _D2, (int8x8_t)v125));
      v128 = vrecpe_f32(v127);
      v129 = 4;
      do
      {
        v128 = vmul_f32(v128, vrecps_f32(v127, v128));
        --v129;
      }
      while (v129);
      v130 = vmulq_n_f32(v122, v128.f32[0]);
      v131 = v130;
      v131.i32[3] = 0;
      v132 = vmlsq_lane_f32(v118, v131, v151, 0);
      v133 = vrsqrte_f32(v34);
      v134 = 4;
      do
      {
        v133 = vmul_f32(v133, vrsqrts_f32(vmul_f32(v133, v133), v34));
        --v134;
      }
      while (v134);
      v135 = vaddq_f32(v152, v132);
      v136 = *(unsigned int *)(a7 + 4096);
      *(_DWORD *)(a7 + 4096) = v136 + 1;
      v130.i32[3] = vsub_f32((float32x2_t)vand_s8((int8x8_t)vdup_lane_s32((int32x2_t)vmvn_s8(*(int8x8_t *)&v121), 0), (int8x8_t)vmul_f32(v34, (float32x2_t)vbsl_s8((int8x8_t)vcltz_s32(vshl_n_s32(vdup_lane_s32(vceqz_f32(v34), 0), 0x1FuLL)), _D2, *(int8x8_t *)&v133))), v38).i32[1];
      v137 = (float32x4_t *)(a7 + (v136 << 6));
      *v137 = v130;
      v137[1].i64[0] = v135.i64[0];
      v137[1].i32[2] = v135.i32[2];
      v137[3].i32[1] = -1;
    }
  }
  return v37 & 1;
}

uint64_t physx::Gu::pcmContactCapsuleConvex(uint64_t a1, uint64_t a2, float32x4_t *a3, int32x4_t *a4, uint64_t a5, float32x4_t **a6, float32x4_t *a7)
{
  float32x4_t *v8;
  float32x4_t v15;
  float32x4_t v16;
  int32x2_t v17;
  uint64_t v18;
  int32x2_t v19;
  int32x2_t v20;
  float32x4_t v21;
  float32x4_t v22;
  float32x4_t v23;
  float32x4_t v24;
  float32x4_t v25;
  float32x2_t v26;
  float32x4_t v27;
  float32x2_t v28;
  float32x2_t v29;
  int8x8_t v30;
  float32x4_t v31;
  float32x4_t v32;
  float32x4_t v33;
  float32x4_t v34;
  float32x4_t v35;
  float32x4_t v36;
  float32x4_t v37;
  float32x4_t v38;
  int8x8_t v39;
  float32x4_t v40;
  float32x4_t v41;
  float32x2_t v43;
  float32x2_t v44;
  float32x2_t v45;
  float32x2_t v46;
  float32x2_t v47;
  float32x2_t v48;
  float32x2_t v49;
  float32x2_t v51;
  float32x4_t v52;
  float32x4_t v53;
  float32x4_t v54;
  int8x16_t v55;
  float32x2_t v56;
  uint64_t v57;
  float32x2_t v59;
  unsigned int v60;
  uint64_t v61;
  uint64_t v62;
  float32x4_t *v63;
  float32x4_t v64;
  float32x4_t v65;
  float32x4_t v66;
  float32x4_t v67;
  float32x4_t v68;
  float32x4_t v69;
  float32x4_t v70;
  float32x4_t v71;
  float32x2_t v72;
  float32x4_t v73;
  float32x4_t v74;
  float32x4_t v75;
  unsigned __int8 v76;
  float32x4_t *v77;
  float32x4_t v78;
  float32x4_t v79;
  int v80;
  const float *v81;
  float32x2_t v82;
  float32x4_t v83;
  int8x8_t v84;
  uint64_t v85;
  int8x16_t v86;
  float32x4_t v87;
  uint64_t v88;
  float32x4_t *v89;
  float32x4_t v90;
  float32x4_t v91;
  float32x4_t v92;
  float32x4_t v93;
  float32x2_t v94;
  float32x4_t v95;
  float32x2_t v96;
  float32x2_t v97;
  int8x8_t v98;
  float32x4_t v99;
  float32x4_t v100;
  float32x4_t v101;
  float32x4_t v102;
  float32x4_t v103;
  float32x4_t v104;
  float32x2_t v105;
  float32x2_t v106;
  int v107;
  float32x2_t v108;
  float32x2_t v109;
  int v110;
  float32x4_t v111;
  float32x4_t *v112;
  float32x4_t *v113;
  _BOOL4 v114;
  float32x4_t v115;
  float32x4_t v116;
  float32x4_t v117;
  float32x4_t v118;
  int32x4_t v119;
  float32x4_t v120;
  int v121;
  float32x4_t v122;
  float32x4_t v123;
  float32x4_t v124;
  float32x4_t v125;
  float32x4_t v126;
  float32x4_t v127;
  float32x2_t v128;
  float32x2_t v129;
  float32x2_t v130;
  float32x4_t v131;
  float32x2_t v132;
  float32x2_t v133;
  float32x2_t v134;
  float32x2_t v135;
  float32x2_t v136;
  float32x2_t v137;
  float32x2_t v138;
  float32x2_t v139;
  float32x2_t v140;
  int32x2_t v141;
  int8x8_t v142;
  float32x4_t v143;
  int32x2_t v144;
  int8x8_t v145;
  int8x8_t v146;
  float32x4_t v147;
  float32x4_t v148;
  float32x4_t v149;
  float32x4_t v150;
  float32x4_t v151;
  float32x4_t v152;
  float32x4_t v153;
  float32x4_t v154;
  float32x4_t v155;
  float32x4_t v156;
  float32x4_t v157;
  float32x4_t v158;
  float32x4_t v159;
  float32x4_t v160;
  float32x4_t v161;
  float32x4_t v162;
  float32x4_t v163;
  float32x4_t v164;
  float32x4_t v165;
  float32x4_t v166;
  float32x4_t v167;
  float32x4_t v168;
  float32x4_t v169;
  float32x4_t v170;
  float32x4_t v171;
  float32x4_t v172;
  float32x4_t v173;
  float32x4_t v174;
  float32x4_t v175;
  float32x4_t v176;
  float32x4_t v177;
  float32x4_t v178;
  float32x4_t v179;
  float32x4_t v180;
  float32x4_t v181;
  float32x4_t v182;
  float32x4_t v183;
  float32x4_t v184;
  float32x4_t v185;
  float32x4_t v186;
  float32x4_t v187;
  float32x4_t v188;
  uint64_t result;
  float32x4_t v190;
  float32x4_t v191;
  float32x4_t v192;
  float32x4_t v193;
  float32x4_t v194;
  float32x4_t v195;
  uint64_t (**v196)();
  float32x4_t v197;
  float32x4_t v198;
  float32x4_t v199;
  float32x4_t v200;
  float32x4_t v201;
  float32x2_t v202;
  float32x4_t v203;
  char v204;
  float32x4_t v205;
  float32x2_t v206;
  float32x4_t v207;
  float32x2_t v208;
  float32x2_t v209;
  int8x8_t v210;
  float32x4_t v211;
  float32x4_t v212;
  float32x4_t v213;
  float32x4_t v214;
  float32x4_t v215;
  float32x4_t v216;
  float32x4_t v217;
  float32x4_t v218;
  float32x4_t v219;
  float v220;
  float32x4_t v221;
  float32x2_t v222;
  float32x4_t v223;
  float32x4_t v224;
  _QWORD v225[2];
  float32x4_t v226;
  float32x4_t v227;
  float32x4_t v228;
  float32x4_t v229;
  int32x4_t v230[2];
  float32x4_t v231[2];
  float32x2_t v232;
  float32x2_t v233;
  float32x4_t v234;
  float32x4_t v235;
  float32x4_t v236[2];
  uint64_t v237;
  float32x4_t v238;
  __int32 v239;
  __int32 v240;
  __int32 v241;
  int v242;
  char v243;
  float32x4_t v244;
  float32x4_t v245;
  int32x2_t v246;
  float32x4_t v247;
  float32x2_t v248;
  float v249;
  int v250;
  char v251;
  __int128 v252;
  __int128 v253;
  __int128 v254;
  float32x4_t v255;
  __int128 v256;
  __int128 v257;
  uint64_t v258;
  uint64_t v259;
  uint64_t v260;
  char v261;
  uint64_t v262;

  v262 = *MEMORY[0x24BDAC8D0];
  v8 = *a6;
  _X8 = *(_QWORD *)(a2 + 48);
  __asm { PRFM            #0, [X8] }
  v15 = *(float32x4_t *)(a2 + 4);
  v16 = v15;
  v16.i32[3] = 0;
  v19 = *(int32x2_t *)a5;
  v17 = vdup_lane_s32(*(int32x2_t *)a5, 0);
  v18 = *(_QWORD *)(a1 + 8);
  v19.i32[0] = *(_DWORD *)(a1 + 4);
  v20 = vdup_lane_s32(v19, 0);
  v232 = (float32x2_t)v20;
  v233 = (float32x2_t)v17;
  v21.i64[0] = a3[1].i64[0];
  v21.i64[1] = a3[1].u32[2];
  v231[0] = *a3;
  v231[1] = v21;
  v22.i64[0] = a4[1].i64[0];
  v22.i64[1] = a4[1].u32[2];
  v230[0] = *a4;
  v230[1] = (int32x4_t)v22;
  v23 = vnegq_f32((float32x4_t)v230[0]);
  v24 = vsubq_f32(v21, v22);
  v25 = v23;
  v25.i32[3] = 0;
  v26 = (float32x2_t)vdupq_laneq_s32(v230[0], 3).u64[0];
  v27 = vmulq_n_f32(v24, vmla_f32((float32x2_t)0xBF000000BF000000, v26, v26).f32[0]);
  v27.i32[3] = 0;
  v28 = (float32x2_t)vextq_s8((int8x16_t)v25, (int8x16_t)v25, 8uLL).u64[0];
  v29 = (float32x2_t)vext_s8(*(int8x8_t *)v23.f32, (int8x8_t)v28, 4uLL);
  v30 = (int8x8_t)vmls_f32(vmul_f32(*(float32x2_t *)v23.f32, (float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v24, (int8x16_t)v24, 4uLL)), v29, *(float32x2_t *)v24.f32);
  *(int8x8_t *)v31.f32 = vext_s8(v30, (int8x8_t)vmls_f32(vmul_f32(v28, *(float32x2_t *)v24.f32), *(float32x2_t *)v23.f32, (float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v24, (int8x16_t)v24, 8uLL)), 4uLL);
  v31.i64[1] = v30.u32[0];
  v32 = vmlaq_laneq_f32(v27, v31, (float32x4_t)v230[0], 3);
  v32.i64[1] = vextq_s8((int8x16_t)v32, (int8x16_t)v32, 8uLL).u32[0];
  v33 = vmulq_f32(v25, v24);
  v33.i64[0] = vpaddq_f32(v33, v33).u64[0];
  v34 = vmlaq_n_f32(v32, v25, vpadd_f32(*(float32x2_t *)v33.f32, *(float32x2_t *)v33.f32).f32[0]);
  v35 = vaddq_f32(v34, v34);
  v35.i32[3] = 0;
  v36 = v231[0];
  v36.i32[3] = 0;
  v37 = vmulq_f32(v36, v25);
  v38 = vmulq_laneq_f32(v36, (float32x4_t)v230[0], 3);
  v36.i64[0] = vextq_s8((int8x16_t)v36, (int8x16_t)v36, 8uLL).u64[0];
  v39 = (int8x8_t)vmls_f32(vmul_f32((float32x2_t)vext_s8(*(int8x8_t *)v231[0].f32, *(int8x8_t *)v36.f32, 4uLL), *(float32x2_t *)v23.f32), v29, *(float32x2_t *)v231[0].f32);
  *(int8x8_t *)v40.f32 = vext_s8(v39, (int8x8_t)vmls_f32(vmul_f32(*(float32x2_t *)v231[0].f32, v28), *(float32x2_t *)v23.f32, *(float32x2_t *)v36.f32), 4uLL);
  *(int8x8_t *)&v40.u32[2] = v39;
  v41 = vaddq_f32(vaddq_f32(vmulq_laneq_f32(v25, v231[0], 3), v38), v40);
  *(int32x2_t *)v40.f32 = vdup_lane_s32(*(int32x2_t *)v41.f32, 1);
  *(int32x2_t *)v25.f32 = vdup_laneq_s32((int32x4_t)v41, 2);
  v23.i64[0] = vpaddq_f32(v37, v37).u64[0];
  _Q18 = vaddq_f32(v41, v41);
  v43 = (float32x2_t)vdup_laneq_s32((int32x4_t)_Q18, 2);
  v44 = (float32x2_t)vdup_lane_s32((int32x2_t)vmul_f32(*(float32x2_t *)v41.f32, *(float32x2_t *)_Q18.f32), 0);
  v45 = vsub_f32(vmul_f32((float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v231[0], (int8x16_t)v231[0], 8uLL), (float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v230[0], (int8x16_t)v230[0], 8uLL)), vpadd_f32(*(float32x2_t *)v23.f32, *(float32x2_t *)v23.f32));
  *(float32x2_t *)v33.f32 = vmul_lane_f32(*(float32x2_t *)v40.f32, *(float32x2_t *)_Q18.f32, 1);
  v46 = vmul_laneq_f32(*(float32x2_t *)v25.f32, _Q18, 2);
  v47 = vmul_n_f32(*(float32x2_t *)v40.f32, _Q18.f32[0]);
  v48 = vmul_n_f32(*(float32x2_t *)v25.f32, _Q18.f32[0]);
  v49 = vmul_lane_f32((float32x2_t)vdup_lane_s32(*(int32x2_t *)_Q18.f32, 0), v45, 1);
  *(float32x2_t *)v25.f32 = vmul_lane_f32(*(float32x2_t *)v25.f32, *(float32x2_t *)_Q18.f32, 1);
  *(float32x2_t *)_Q18.f32 = vmul_lane_f32((float32x2_t)vdup_lane_s32(*(int32x2_t *)_Q18.f32, 1), v45, 1);
  *(float32x2_t *)v37.f32 = vmul_lane_f32(v43, v45, 1);
  __asm { FMOV            V5.2S, #1.0 }
  v51 = vsub_f32(_D5, v44);
  *(int8x8_t *)v52.f32 = vext_s8((int8x8_t)vsub_f32(vsub_f32(_D5, *(float32x2_t *)v33.f32), v46), (int8x8_t)vadd_f32(v47, *(float32x2_t *)v37.f32), 4uLL);
  v52.i64[1] = vsub_f32(v48, *(float32x2_t *)_Q18.f32).u32[0];
  *(int8x8_t *)v53.f32 = vext_s8((int8x8_t)vsub_f32(v47, *(float32x2_t *)v37.f32), (int8x8_t)vsub_f32(v51, v46), 4uLL);
  v53.i64[1] = vadd_f32(*(float32x2_t *)v25.f32, v49).u32[0];
  v226 = v52;
  v227 = v53;
  *(int8x8_t *)v54.f32 = vext_s8((int8x8_t)vadd_f32(v48, *(float32x2_t *)_Q18.f32), (int8x8_t)vsub_f32(*(float32x2_t *)v25.f32, v49), 4uLL);
  v54.i64[1] = vsub_f32(v51, *(float32x2_t *)v33.f32).u32[0];
  v228 = v54;
  v229 = v35;
  v25.i64[0] = *(_QWORD *)(_X8 + 60);
  v25.i64[1] = *(unsigned int *)(_X8 + 68);
  v55 = (int8x16_t)vmulq_f32(v16, v25);
  *(int32x2_t *)v33.f32 = vdup_laneq_s32((int32x4_t)v55, 2);
  *(float32x2_t *)v55.i8 = vpmin_f32(*(float32x2_t *)v33.f32, *(float32x2_t *)v55.i8);
  v220 = *(float *)(a5 + 8);
  v33.f32[0] = v220 * 0.05;
  __asm { FMOV            V18.2S, #0.25 }
  *(float32x2_t *)v55.i8 = vmin_f32(vmul_f32(vpmin_f32(*(float32x2_t *)v55.i8, *(float32x2_t *)v55.i8), *(float32x2_t *)_Q18.f32), (float32x2_t)vdup_lane_s32(*(int32x2_t *)v33.f32, 0));
  v56 = vmin_f32(*(float32x2_t *)v55.i8, vmul_n_f32((float32x2_t)vdup_n_s32(0x3D4CCCCDu), *(float *)v19.i32));
  v57 = v8[4].u8[0];
  if (v8[4].i8[0])
  {
    __asm { FMOV            V16.2S, #1.25 }
    v59 = vmul_f32(v56, _D16);
    *(float32x2_t *)v55.i8 = vmul_f32(v59, v59);
    v60 = v57 - 1;
    do
    {
      v61 = v8[5].i64[0];
      v62 = v60;
      v63 = (float32x4_t *)(v61 + 48 * v60);
      v64 = v63[1];
      v65 = vmulq_n_f32(v52, COERCE_FLOAT(*v63));
      v65.i32[3] = 0;
      v66 = vmulq_lane_f32(v53, *(float32x2_t *)v63->f32, 1);
      v66.i32[3] = 0;
      v67 = vmulq_laneq_f32(v54, *v63, 2);
      v67.i32[3] = 0;
      v68 = vaddq_f32(v35, vaddq_f32(v67, vaddq_f32(v65, v66)));
      v69 = v63[2];
      v70 = v69;
      v70.i32[3] = 0;
      v71 = vmulq_f32(v70, vsubq_f32(v68, v64));
      v71.i64[0] = vpaddq_f32(v71, v71).u64[0];
      v72 = vpadd_f32(*(float32x2_t *)v71.f32, *(float32x2_t *)v71.f32);
      v73 = vmlsq_lane_f32(v68, v70, v72, 0);
      v73.i64[1] = vextq_s8((int8x16_t)v73, (int8x16_t)v73, 8uLL).u32[0];
      v74 = vsubq_f32(v64, v73);
      v75 = vmulq_f32(v74, v74);
      v75.i64[0] = vpaddq_f32(v75, v75).u64[0];
      if (vuzp1_s8((int8x8_t)vdup_lane_s16((int16x4_t)vcgt_f32(vpadd_f32(*(float32x2_t *)v75.f32, *(float32x2_t *)v75.f32), *(float32x2_t *)v55.i8), 0), (int8x8_t)v19).u32[0] == -1)
      {
        v76 = v8[4].i8[0] - 1;
        v8[4].i8[0] = v76;
        v77 = (float32x4_t *)(v61 + 48 * v76);
        v78 = *v77;
        v79 = v77[2];
        v63[1] = v77[1];
        v63[2] = v79;
        *v63 = v78;
      }
      else
      {
        v69.i32[3] = v72.i32[1];
        v63[2] = v69;
      }
      --v60;
    }
    while (v62);
    v80 = v8[4].u8[0];
  }
  else
  {
    v80 = 0;
  }
  v41.i32[3] = v45.i32[1];
  if (v80 == (_DWORD)v57)
  {
    v55 = (int8x16_t)vabdq_f32(v35, v8[1]);
    *(float32x2_t *)v55.i8 = vpmax_f32((float32x2_t)*(_OWORD *)&vextq_s8(v55, v55, 8uLL), *(float32x2_t *)v55.i8);
    v81 = (const float *)((char *)&physx::Gu::invalidateQuatThresholds2 + 4 * v57);
    v82 = vld1_dup_f32(v81);
    v83 = vmulq_f32(v41, *v8);
    v83.i64[0] = vpaddq_f32(v83, v83).u64[0];
    v84 = (int8x8_t)vcgt_f32(vpmax_f32(*(float32x2_t *)v55.i8, *(float32x2_t *)v55.i8), vmul_n_f32(v56, physx::Gu::invalidateThresholds2[v57]));
    *(int32x2_t *)v55.i8 = vcgt_f32(v82, vpadd_f32(*(float32x2_t *)v83.f32, *(float32x2_t *)v83.f32));
    if (vuzp1_s8((int8x8_t)vdup_lane_s16((int16x4_t)vorr_s8(*(int8x8_t *)v55.i8, v84), 0), (int8x8_t)v19).u32[0] != -1)
    {
      if (!(_DWORD)v57)
        return 0;
      v85 = v8[5].i64[0];
      v86 = *(int8x16_t *)(v85 + 32);
      v87 = (float32x4_t)v86;
      if ((_DWORD)v57 != 1)
      {
        v88 = v57 - 1;
        v89 = (float32x4_t *)(v85 + 80);
        v87 = (float32x4_t)v86;
        do
        {
          v90 = *v89;
          v89 += 3;
          v87 = vaddq_f32(v87, v90);
          --v88;
        }
        while (v88);
      }
      v87.i32[3] = 0;
      v91 = vmulq_f32(v87, v87);
      v91.i64[0] = vpaddq_f32(v91, v91).u64[0];
      v86.i32[3] = 0;
      v92 = (float32x4_t)vbslq_s8((int8x16_t)vcltzq_s32(vshlq_n_s32(vdupq_lane_s32(vcgt_f32(vpadd_f32(*(float32x2_t *)v91.f32, *(float32x2_t *)v91.f32), (float32x2_t)0x3400000034000000), 0), 0x1FuLL)), (int8x16_t)v87, v86);
      v93 = (float32x4_t)v230[0];
      v93.i32[3] = 0;
      v94 = (float32x2_t)vdupq_laneq_s32(v230[0], 3).u64[0];
      v95 = vmulq_n_f32(v92, vmla_f32((float32x2_t)0xBF000000BF000000, v94, v94).f32[0]);
      v95.i32[3] = 0;
      v96 = (float32x2_t)vextq_s8((int8x16_t)v93, (int8x16_t)v93, 8uLL).u64[0];
      v97 = (float32x2_t)vextq_s8((int8x16_t)v92, (int8x16_t)v92, 8uLL).u64[0];
      v98 = (int8x8_t)vmls_f32(vmul_f32(*(float32x2_t *)v230[0].i8, (float32x2_t)vext_s8(*(int8x8_t *)v92.f32, (int8x8_t)v97, 4uLL)), (float32x2_t)vext_s8(*(int8x8_t *)v230[0].i8, (int8x8_t)v96, 4uLL), *(float32x2_t *)v92.f32);
      *(int8x8_t *)v99.f32 = vext_s8(v98, (int8x8_t)vmls_f32(vmul_f32(v96, *(float32x2_t *)v92.f32), *(float32x2_t *)v230[0].i8, v97), 4uLL);
      v99.i64[1] = v98.u32[0];
      v100 = vmlaq_laneq_f32(v95, v99, (float32x4_t)v230[0], 3);
      v100.i64[1] = vextq_s8((int8x16_t)v100, (int8x16_t)v100, 8uLL).u32[0];
      v101 = vmulq_f32(v93, v92);
      v101.i64[0] = vpaddq_f32(v101, v101).u64[0];
      v102 = vmlaq_n_f32(v100, v93, vpadd_f32(*(float32x2_t *)v101.f32, *(float32x2_t *)v101.f32).f32[0]);
      v103 = vaddq_f32(v102, v102);
      v103.i32[3] = 0;
      v104 = vmulq_f32(v103, v103);
      v104.i64[0] = vpaddq_f32(v104, v104).u64[0];
      v105 = vpadd_f32(*(float32x2_t *)v104.f32, *(float32x2_t *)v104.f32);
      v106 = vrsqrte_f32(v105);
      v107 = 4;
      do
      {
        v106 = vmul_f32(v106, vrsqrts_f32(vmul_f32(v106, v106), v105));
        --v107;
      }
      while (v107);
      v108 = vmul_f32(v105, (float32x2_t)vbsl_s8((int8x8_t)vdup_lane_s32(vceqz_f32(v105), 0), (int8x8_t)_D5, (int8x8_t)v106));
      v109 = vrecpe_f32(v108);
      v110 = 4;
      do
      {
        v109 = vmul_f32(v109, vrecps_f32(v108, v109));
        --v110;
      }
      while (v110);
      v111 = vmulq_n_f32(v103, v109.f32[0]);
      v111.i32[3] = 0;
      v247 = v111;
      v112 = &v247;
      v113 = &v247;
      goto LABEL_48;
    }
  }
  v114 = 0;
  if (*(float *)(a2 + 4) == 1.0 && *(float *)(a2 + 8) == 1.0)
    v114 = *(float *)(a2 + 12) == 1.0;
  *v8 = v41;
  v8[1] = v35;
  v115 = *(float32x4_t *)(a2 + 16);
  v55.i32[0] = *(_DWORD *)(_X8 + 24);
  v116 = (float32x4_t)v55;
  v116.i32[1] = *(_DWORD *)(_X8 + 28);
  v117 = v116;
  v117.i32[2] = *(_DWORD *)(_X8 + 32);
  v250 = 0;
  v251 = 0;
  v247 = v117;
  v258 = _X8;
  v260 = *(_QWORD *)(_X8 + 40) + 20 * *(unsigned __int8 *)(_X8 + 39);
  v261 = *(_BYTE *)(_X8 + 38);
  v118.i64[0] = *(_QWORD *)(_X8 + 60);
  v118.i64[1] = *(unsigned int *)(_X8 + 68);
  v119 = (int32x4_t)vmulq_f32(v16, v118);
  *(float32x2_t *)v119.i8 = vpmin_f32((float32x2_t)vdup_laneq_s32(v119, 2), *(float32x2_t *)v119.i8);
  *(float *)v119.i32 = vpmin_f32(*(float32x2_t *)v119.i8, *(float32x2_t *)v119.i8).f32[0];
  v248 = vmul_n_f32((float32x2_t)0x3D4CCCCD3DCCCCCDLL, *(float *)v119.i32);
  v249 = 0.025 * *(float *)v119.i32;
  if (v114)
  {
    v252 = xmmword_2260E5F10;
    v253 = xmmword_2260E5F20;
    v254 = xmmword_2260E5F40;
    v255 = (float32x4_t)xmmword_2260E5F10;
    v256 = xmmword_2260E5F20;
    v257 = xmmword_2260E5F40;
  }
  else
  {
    v120 = vrecpeq_f32(v16);
    v121 = 4;
    do
    {
      v120 = vmulq_f32(v120, vrecpsq_f32(v120, v16));
      --v121;
    }
    while (v121);
    *(int32x2_t *)v122.f32 = vdup_lane_s32(*(int32x2_t *)v15.f32, 0);
    v122.i64[1] = v122.u32[0];
    if ((~vuzp1_s8((int8x8_t)vmovn_s32(vceqq_f32(v122, v16)), (int8x8_t)v19).u32[0] & 0xFFFFFF) != 0)
    {
      v128 = (float32x2_t)vdup_lane_s32(*(int32x2_t *)v115.f32, 1);
      v129 = (float32x2_t)vdup_laneq_s32((int32x4_t)v115, 2);
      v130 = (float32x2_t)vdup_laneq_s32((int32x4_t)v115, 3);
      v131 = vaddq_f32(v115, v115);
      v132 = vmul_lane_f32(v128, *(float32x2_t *)v131.f32, 1);
      v133 = vmul_laneq_f32(v129, v131, 2);
      v134 = vmul_n_f32(v128, v131.f32[0]);
      v135 = vmul_n_f32(v129, v131.f32[0]);
      v136 = vmul_n_f32(v130, v131.f32[0]);
      v137 = vmul_lane_f32(v129, *(float32x2_t *)v131.f32, 1);
      v138 = vmul_lane_f32(v130, *(float32x2_t *)v131.f32, 1);
      v139 = vmul_laneq_f32(v130, v131, 2);
      v140 = vsub_f32(_D5, (float32x2_t)vdup_lane_s32((int32x2_t)vmul_f32(*(float32x2_t *)v115.f32, *(float32x2_t *)v131.f32), 0));
      v141 = (int32x2_t)vext_s8((int8x8_t)vsub_f32(vsub_f32(_D5, v132), v133), (int8x8_t)vadd_f32(v134, v139), 4uLL);
      v142 = (int8x8_t)vsub_f32(v134, v139);
      *(int32x2_t *)v143.f32 = v141;
      v143.i64[1] = vsub_f32(v135, v138).u32[0];
      v144 = (int32x2_t)vext_s8(v142, (int8x8_t)vsub_f32(v140, v133), 4uLL);
      v145 = (int8x8_t)vadd_f32(v135, v138);
      *(int8x8_t *)v131.f32 = vext_s8((int8x8_t)vdup_lane_s32(v141, 0), (int8x8_t)v144, 4uLL);
      v146 = (int8x8_t)vdup_lane_s32(v144, 1);
      *(int32x2_t *)v147.f32 = v144;
      v147.i64[1] = vadd_f32(v137, v136).u32[0];
      *(int8x8_t *)v148.f32 = vext_s8(v145, (int8x8_t)vsub_f32(v137, v136), 4uLL);
      *(int8x8_t *)v149.f32 = vext_s8((int8x8_t)v141, v146, 4uLL);
      v148.i64[1] = vsub_f32(v140, v132).u32[0];
      v131.i64[1] = vdup_lane_s32(*(int32x2_t *)v148.f32, 0).u32[0];
      v149.i64[1] = vdup_lane_s32(*(int32x2_t *)v148.f32, 1).u32[0];
      *(int8x8_t *)v150.f32 = vext_s8((int8x8_t)vdup_lane_s32(*(int32x2_t *)&v143.u32[2], 0), *(int8x8_t *)&v147.u32[2], 4uLL);
      v150.i64[1] = vdup_lane_s32(*(int32x2_t *)&v148.u32[2], 0).u32[0];
      v151 = vmulq_n_f32(v131, v15.f32[0]);
      v151.i32[3] = 0;
      v152 = vmulq_lane_f32(v149, *(float32x2_t *)v15.f32, 1);
      v152.i32[3] = 0;
      v153 = vmulq_laneq_f32(v150, v15, 2);
      v153.i32[3] = 0;
      v154 = vmulq_n_f32(v151, v143.f32[0]);
      v154.i32[3] = 0;
      v155 = vmulq_lane_f32(v152, *(float32x2_t *)v143.f32, 1);
      v155.i32[3] = 0;
      v156 = vmulq_laneq_f32(v153, v143, 2);
      v156.i32[3] = 0;
      v123 = vaddq_f32(v156, vaddq_f32(v154, v155));
      v157 = vmulq_n_f32(v151, v147.f32[0]);
      v157.i32[3] = 0;
      v158 = vmulq_lane_f32(v152, *(float32x2_t *)v147.f32, 1);
      v158.i32[3] = 0;
      v159 = vmulq_laneq_f32(v153, v147, 2);
      v159.i32[3] = 0;
      v160 = vaddq_f32(v157, v158);
      v161 = vmulq_n_f32(v151, v148.f32[0]);
      v161.i32[3] = 0;
      v162 = vmulq_lane_f32(v152, *(float32x2_t *)v148.f32, 1);
      v162.i32[3] = 0;
      v163 = vmulq_laneq_f32(v153, v148, 2);
      v163.i32[3] = 0;
      v124 = vaddq_f32(v159, v160);
      v125 = vaddq_f32(v163, vaddq_f32(v161, v162));
      v252 = (__int128)v123;
      v253 = (__int128)v124;
      v164 = vmulq_n_f32(v131, v120.f32[0]);
      v164.i32[3] = 0;
      v165 = vmulq_lane_f32(v149, *(float32x2_t *)v120.f32, 1);
      v165.i32[3] = 0;
      v166 = vmulq_laneq_f32(v150, v120, 2);
      v166.i32[3] = 0;
      v257 = (__int128)v166;
      v167 = vmulq_n_f32(v164, v143.f32[0]);
      v167.i32[3] = 0;
      v168 = vmulq_lane_f32(v165, *(float32x2_t *)v143.f32, 1);
      v168.i32[3] = 0;
      v169 = vmulq_laneq_f32(v166, v143, 2);
      v169.i32[3] = 0;
      v170 = vaddq_f32(v169, vaddq_f32(v167, v168));
      v171 = vmulq_n_f32(v164, v147.f32[0]);
      v171.i32[3] = 0;
      v172 = vmulq_lane_f32(v165, *(float32x2_t *)v147.f32, 1);
      v172.i32[3] = 0;
      v173 = vmulq_laneq_f32(v166, v147, 2);
      v173.i32[3] = 0;
      v174 = vmulq_n_f32(v164, v148.f32[0]);
      v174.i32[3] = 0;
      v175 = vmulq_lane_f32(v165, *(float32x2_t *)v148.f32, 1);
      v175.i32[3] = 0;
      v126 = vaddq_f32(v173, vaddq_f32(v171, v172));
      v176 = vmulq_laneq_f32(v166, v148, 2);
      v176.i32[3] = 0;
      v127 = vaddq_f32(v176, vaddq_f32(v174, v175));
      v254 = (__int128)v125;
      v255 = v170;
      v52 = v226;
      v53 = v227;
      v54 = v228;
      v35 = v229;
    }
    else
    {
      v120.i32[3] = 0;
      v123 = vmulq_f32(v16, (float32x4_t)xmmword_2260E5F10);
      v124 = vmulq_f32(v16, (float32x4_t)xmmword_2260E5F20);
      v125 = vmulq_f32(v16, (float32x4_t)xmmword_2260E5F40);
      v252 = (__int128)v123;
      v253 = (__int128)v124;
      v126 = vmulq_f32(v120, (float32x4_t)xmmword_2260E5F20);
      v127 = vmulq_f32(v120, (float32x4_t)xmmword_2260E5F40);
      v254 = (__int128)v125;
      v255 = vmulq_f32(v120, (float32x4_t)xmmword_2260E5F10);
    }
    v256 = (__int128)v126;
    v257 = (__int128)v127;
    v177 = vmulq_n_f32(v123, *(float *)v55.i32);
    v177.i32[3] = 0;
    v178 = vmulq_lane_f32(v124, *(float32x2_t *)v116.f32, 1);
    v178.i32[3] = 0;
    v179 = vmulq_laneq_f32(v125, v117, 2);
    v179.i32[3] = 0;
    v117 = vaddq_f32(v179, vaddq_f32(v178, v177));
    v247 = v117;
  }
  v259 = *(_QWORD *)(_X8 + 48);
  v180 = vmulq_n_f32((float32x4_t)xmmword_2260E5F10, *(float *)&v18);
  v217 = v53;
  v218 = v52;
  v181 = vmulq_n_f32(v52, v180.f32[0]);
  v181.i32[3] = 0;
  v182 = vmulq_lane_f32(v53, *(float32x2_t *)v180.f32, 1);
  v182.i32[3] = 0;
  v216 = v54;
  v183 = vmulq_laneq_f32(v54, v180, 2);
  v183.i32[3] = 0;
  v184 = vaddq_f32(v182, v181);
  v185 = vaddq_f32(v183, v184);
  v242 = 4;
  v238 = v35;
  v246 = v20;
  v186 = vaddq_f32(v35, v185);
  v187 = vsubq_f32(v35, v185);
  v244 = v186;
  v245 = v187;
  v239 = v19.i32[0];
  v240 = v19.i32[0];
  v241 = v19.i32[0];
  v243 = 1;
  v237 = 0;
  v234 = 0u;
  v235 = 0u;
  v236[0] = 0u;
  v225[0] = off_24ED91108;
  v225[1] = &v238;
  v219 = v35;
  v188 = vsubq_f32(v35, v117);
  v224 = v188;
  if (!v114)
  {
    v223.i64[0] = (uint64_t)off_24ED91168;
    v223.i64[1] = (uint64_t)&v247;
    result = physx::Gu::gjkPenetration<physx::Gu::LocalConvex<physx::Gu::CapsuleV>,physx::Gu::LocalConvex<physx::Gu::ConvexHullV>>((uint64_t)v225, (uint64_t)&v223, &v224, (uint64_t *)&v233, 1, &v8[4].i8[3], &v8[4].i8[7], &v8[4].i8[2], *(double *)v188.i64, *(double *)v186.i64, *(int8x8_t *)v187.f32, v184, (uint64_t)&v234);
    if (!(_DWORD)result)
      return result;
LABEL_35:
    if ((_DWORD)result == 4)
      return physx::Gu::fullContactsGenerationCapsuleConvex((uint64_t)&v238, &v247, &v226, v231, v230, (uint64_t)a7, (uint64_t)a7, v114, v248.f32[0], v220, (uint64_t)v8, v236, (float32x2_t *)&v235, &v233, 1);
    v222 = vmul_f32(v56, (float32x2_t)vdup_n_s32(0x3D4CCCCDu));
    if ((_DWORD)result == 2)
    {
      v190 = v235;
      v191 = vsubq_f32(v234, v219);
      v192 = vmulq_f32(v218, v191);
      v192.i64[0] = vpaddq_f32(v192, v192).u64[0];
      v193 = vmulq_f32(v217, v191);
      v193.i64[0] = vpaddq_f32(v193, v193).u64[0];
      v194 = vmulq_f32(v216, v191);
      v194.i64[0] = vpaddq_f32(v194, v194).u64[0];
      *(int8x8_t *)v192.f32 = vext_s8((int8x8_t)vpadd_f32(*(float32x2_t *)v192.f32, *(float32x2_t *)v192.f32), (int8x8_t)vpadd_f32(*(float32x2_t *)v193.f32, *(float32x2_t *)v193.f32), 4uLL);
      v192.i64[1] = vpadd_f32(*(float32x2_t *)v194.f32, *(float32x2_t *)v194.f32).u32[0];
      v223 = v192;
      v195 = v236[0];
      v195.i32[3] = HIDWORD(v237);
      v221 = v195;
      *a7 = v192;
      a7[1] = v190;
    }
    else
    {
      if (v114)
        v196 = off_24ED925A0;
      else
        v196 = off_24ED91168;
      v223.i64[0] = (uint64_t)v196;
      v223.i64[1] = (uint64_t)&v247;
      if (physx::Gu::epaPenetration((uint64_t)v225) != 5)
      {
        v204 = 1;
        return physx::Gu::fullContactsGenerationCapsuleConvex((uint64_t)&v238, &v247, &v226, v231, v230, (uint64_t)a7, (uint64_t)a7, v114, v248.f32[0], v220, (uint64_t)v8, v236, (float32x2_t *)&v235, &v233, v204);
      }
      v197 = v235;
      v198 = vsubq_f32(v234, v229);
      v199 = vmulq_f32(v226, v198);
      v200 = vmulq_f32(v198, v227);
      v201 = vmulq_f32(v198, v228);
      v202 = (float32x2_t)vpaddq_f32(v199, v199).u64[0];
      v199.i64[0] = vpaddq_f32(v200, v200).u64[0];
      v201.i64[0] = vpaddq_f32(v201, v201).u64[0];
      *(int8x8_t *)v203.f32 = vext_s8((int8x8_t)vpadd_f32(v202, v202), (int8x8_t)vpadd_f32(*(float32x2_t *)v199.f32, *(float32x2_t *)v199.f32), 4uLL);
      v203.i64[1] = vpadd_f32(*(float32x2_t *)v201.f32, *(float32x2_t *)v201.f32).u32[0];
      v223 = v203;
      v195 = v236[0];
      v195.i32[3] = HIDWORD(v237);
      v221 = v195;
      *a7 = v203;
      a7[1] = v197;
    }
    a7[2] = v195;
    physx::Gu::PersistentContactManifold::addManifoldPoint2((uint64_t)v8, &v223, &v235, (__int128 *)&v221, &v222);
    v204 = 0;
    if ((_DWORD)v57 && v80 == (_DWORD)v57)
    {
      v205 = (float32x4_t)v230[0];
      v205.i32[3] = 0;
      v206 = (float32x2_t)vdupq_laneq_s32(v230[0], 3).u64[0];
      v207 = vmulq_n_f32(v236[0], vmla_f32((float32x2_t)0xBF000000BF000000, v206, v206).f32[0]);
      v207.i32[3] = 0;
      v208 = (float32x2_t)vextq_s8((int8x16_t)v205, (int8x16_t)v205, 8uLL).u64[0];
      v209 = (float32x2_t)vextq_s8((int8x16_t)v236[0], (int8x16_t)v236[0], 8uLL).u64[0];
      v210 = (int8x8_t)vmls_f32(vmul_f32(*(float32x2_t *)v230[0].i8, (float32x2_t)vext_s8(*(int8x8_t *)v236[0].f32, (int8x8_t)v209, 4uLL)), (float32x2_t)vext_s8(*(int8x8_t *)v230[0].i8, (int8x8_t)v208, 4uLL), *(float32x2_t *)v236[0].f32);
      *(int8x8_t *)v211.f32 = vext_s8(v210, (int8x8_t)vmls_f32(vmul_f32(v208, *(float32x2_t *)v236[0].f32), *(float32x2_t *)v230[0].i8, v209), 4uLL);
      v211.i64[1] = v210.u32[0];
      v212 = vmlaq_laneq_f32(v207, v211, (float32x4_t)v230[0], 3);
      v212.i64[1] = vextq_s8((int8x16_t)v212, (int8x16_t)v212, 8uLL).u32[0];
      v213 = vmulq_f32(v205, v236[0]);
      v213.i64[0] = vpaddq_f32(v213, v213).u64[0];
      v214 = vmlaq_n_f32(v212, v205, vpadd_f32(*(float32x2_t *)v213.f32, *(float32x2_t *)v213.f32).f32[0]);
      v215 = vaddq_f32(v214, v214);
      v215.i32[3] = 0;
      v223 = v215;
      v112 = &v223;
      v113 = &v223;
LABEL_48:
      physx::Gu::PersistentContactManifold::addManifoldContactsToContactBuffer((uint64_t)v8, (uint64_t)a7, v112, v113, v231, &v232, &v233);
      return 1;
    }
    return physx::Gu::fullContactsGenerationCapsuleConvex((uint64_t)&v238, &v247, &v226, v231, v230, (uint64_t)a7, (uint64_t)a7, v114, v248.f32[0], v220, (uint64_t)v8, v236, (float32x2_t *)&v235, &v233, v204);
  }
  v223.i64[0] = (uint64_t)off_24ED925A0;
  v223.i64[1] = (uint64_t)&v247;
  result = physx::Gu::gjkPenetration<physx::Gu::LocalConvex<physx::Gu::CapsuleV>,physx::Gu::LocalConvex<physx::Gu::ConvexHullNoScaleV>>((uint64_t)v225, (uint64_t)&v223, &v224, (uint64_t *)&v233, 1, &v8[4].i8[3], &v8[4].i8[7], &v8[4].i8[2], *(double *)v188.i64, *(double *)v186.i64, *(int8x8_t *)v187.f32, v184, (uint64_t)&v234);
  if ((_DWORD)result)
    goto LABEL_35;
  return result;
}

uint64_t physx::Gu::gjkPenetration<physx::Gu::LocalConvex<physx::Gu::CapsuleV>,physx::Gu::LocalConvex<physx::Gu::ConvexHullNoScaleV>>(uint64_t a1, uint64_t a2, float32x4_t *a3, uint64_t *a4, int a5, _BYTE *a6, _BYTE *a7, _BYTE *a8, double a9, double a10, int8x8_t a11, float32x4_t a12, uint64_t a13)
{
  _BYTE *v13;
  _BYTE *v14;
  uint64_t v15;
  const float *v16;
  float32x2_t v17;
  uint64_t v18;
  const float *v19;
  float32x2_t v20;
  float32x2_t v21;
  float32x2_t v22;
  float32x2_t v23;
  int32x2_t v24;
  float32x2_t v25;
  float32x2_t v26;
  float32x2_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  unsigned int v39;
  float32x4_t v40;
  float32x4_t v41;
  float32x4_t v42;
  float32x4_t v43;
  float32x4_t v44;
  float32x2_t v45;
  float32x4_t v46;
  float32x4_t v47;
  float32x2_t v48;
  int v49;
  float32x4_t v50;
  float32x4_t v51;
  float32x2_t v52;
  float32x2_t v53;
  int v54;
  float32x2_t v55;
  float32x2_t v56;
  int v57;
  float32x4_t v58;
  float32x2_t v59;
  int32x4_t v60;
  float32x4_t v61;
  float32x4_t v62;
  float32x4_t v63;
  int8x8_t v64;
  float32x2_t v65;
  float32x2_t v66;
  float32x2_t v67;
  float32x2_t v68;
  float32x2_t v69;
  float32x2_t v70;
  int8x8_t v71;
  float32x4_t v72;
  float32x2_t v73;
  float32x2_t v74;
  int8x8_t v75;
  float32x4_t v76;
  int8x8_t v77;
  float32x4_t v78;
  float32x4_t v79;
  float32x2_t v80;
  float32x4_t v81;
  float32x2_t v82;
  float32x4_t v83;
  float32x2_t v84;
  float32x4_t v85;
  float32x4_t v86;
  float32x4_t v87;
  float32x2_t v88;
  float32x4_t v89;
  float32x2_t v90;
  float32x4_t v91;
  float32x4_t v92;
  float32x2_t v93;
  float32x4_t v94;
  float32x2_t v95;
  float32x4_t v96;
  float32x2_t v97;
  float32x4_t v98;
  int32x4_t v99;
  __int32 v100;
  uint64_t v101;
  uint64_t v102;
  float32x4_t v103;
  float32x2_t v104;
  float32x4_t v105;
  float32x4_t v106;
  float32x2_t v107;
  float32x2_t v108;
  int v109;
  int8x16_t v110;
  float32x2_t v111;
  float32x2_t v112;
  int v113;
  float32x2_t v114;
  float32x2_t v115;
  float32x2_t v116;
  int v117;
  unsigned int v118;
  float32x2_t v119;
  float32x2_t v120;
  float32x2_t v121;
  int v122;
  int8x16_t v123;
  float32x2_t v124;
  float32x2_t v125;
  int v126;
  float32x4_t v127;
  float32x4_t v128;
  float32x4_t v129;
  float32x4_t v130;
  float32x4_t v131;
  int v132;
  int v133;
  int v134;
  int v135;
  float32x4_t v136;
  float32x2_t v137;
  float32x2_t v138;
  int v139;
  float32x2_t v140;
  int v141;
  float32x4_t v142;
  float v143;
  int32x4_t v144;
  float32x2_t i;
  float32x4_t v146;
  int32x4_t v147;
  float32x4_t v148;
  uint64_t v149;
  float32x4_t *v150;
  float32x4_t v151;
  float32x4_t v152;
  uint64_t v153;
  int v154;
  float32x4_t v155;
  float32x4_t v156;
  float32x4_t v157;
  float v158;
  float32x2_t v159;
  uint64_t v160;
  float32x4_t v161;
  float32x4_t v162;
  float32x2_t v163;
  float32x4_t v164;
  float32x4_t v165;
  float32x2_t v166;
  float32x2_t v167;
  int v168;
  float32x4_t v169;
  float32x4_t v170;
  float32x4_t v171;
  int8x8_t v172;
  float32x2_t v173;
  float32x2_t v174;
  float32x2_t v175;
  float32x2_t v176;
  float32x2_t v177;
  float32x2_t v178;
  int8x8_t v179;
  float32x4_t v180;
  float32x2_t v181;
  float32x2_t v182;
  int8x8_t v183;
  float32x4_t v184;
  int8x8_t v185;
  float32x4_t v186;
  float32x4_t v187;
  float32x2_t v188;
  float32x4_t v189;
  float32x2_t v190;
  float32x4_t v191;
  float32x2_t v192;
  float32x4_t v193;
  float32x4_t v194;
  float32x4_t v195;
  float32x2_t v196;
  float32x4_t v197;
  float32x2_t v198;
  float32x4_t v199;
  float32x4_t v200;
  float32x2_t v201;
  float32x4_t v202;
  float32x2_t v203;
  float32x4_t v204;
  float32x2_t v205;
  float32x4_t v206;
  float32x2_t v207;
  __int32 v208;
  uint64_t v209;
  uint64_t v210;
  float32x4_t v211;
  float32x2_t v212;
  float32x4_t v213;
  float32x4_t v214;
  float32x2_t v215;
  float32x2_t v216;
  int v217;
  int8x16_t v218;
  float32x2_t v219;
  float32x2_t v220;
  int v221;
  float32x2_t v222;
  float32x2_t v223;
  float32x2_t v224;
  int v225;
  unsigned int v226;
  float32x2_t v227;
  float32x2_t v228;
  float32x2_t v229;
  int v230;
  int8x16_t v231;
  float32x2_t v232;
  float32x2_t v233;
  int v234;
  float32x4_t v235;
  float32x4_t v236;
  float32x4_t v237;
  float32x4_t v238;
  float32x4_t v239;
  float32x4_t v240;
  int v241;
  int v242;
  int v243;
  int v244;
  float32x4_t v245;
  float32x2_t v246;
  float32x2_t v247;
  int v248;
  float32x2_t v249;
  int v250;
  float32x4_t v251;
  int8x8_t v252;
  uint64_t v253;
  int *v254;
  int *v255;
  int v256;
  int v257;
  uint64_t result;
  uint64_t v259;
  int *v260;
  int *v261;
  int v262;
  int v263;
  float32x2_t v264;
  int *v265;
  int *v266;
  uint64_t v267;
  int v268;
  int v269;
  uint64_t v270;
  float32x4_t v271;
  float32x4_t v272;
  int v273;
  float32x2_t v274;
  uint64_t v275;
  int *v276;
  int *v277;
  int v278;
  int v279;
  float32x4_t v280;
  float32x4_t v281;
  float32x4_t v282;
  float32x4_t v283;
  float32x4_t v284;
  float32x4_t v285;
  float32x4_t v286;
  float32x4_t v287;
  float32x4_t v288;
  float32x4_t v289;
  float32x2_t v290;
  float32x2_t v291;
  int v292;
  float32x4_t v293;
  float32x4_t v294;
  int8x16_t v295;
  int8x16_t v296;
  float32x4_t v297;
  float32x4_t v298;
  float32x4_t v299;
  float32x4_t v300;
  float32x4_t v301;
  float32x4_t v302;
  float32x4_t v303;
  float32x4_t v304;
  float32x2_t v305;
  float32x2_t v306;
  int v307;
  float32x4_t v308;
  float32x4_t v309;
  float32x2_t v310;
  int v311;
  float32x4_t v312;
  int8x16_t v313;
  int8x16_t v314;
  int32x4_t v315;
  float32x2_t v316;
  float v317;
  float32x2_t v320;
  float32x4_t v323;
  float32x4_t v324;
  float32x4_t v325;
  int v326;
  float32x2_t v327;
  float32x4_t v328;
  unsigned int v329;
  float32x4_t v330;
  float32x2_t v331;
  float32x2_t v332;
  int v333;
  int v334;
  int v335;
  int v336;
  float32x4_t v337;
  float32x4_t v338;
  float32x4_t v339;
  float32x4_t v340;
  float32x4_t v341;
  float32x4_t v342;
  float32x4_t v343;
  float32x4_t v344;
  int8x16_t v345[2];
  uint64_t v346;

  v13 = a7;
  v14 = a6;
  v346 = *MEMORY[0x24BDAC8D0];
  v15 = *(_QWORD *)(a1 + 8);
  v16 = (const float *)(v15 + 20);
  v17 = vld1_dup_f32(v16);
  v18 = *(_QWORD *)(a2 + 8);
  v19 = (const float *)(v18 + 20);
  v20 = vld1_dup_f32(v19);
  v21 = vmin_f32(v17, v20);
  v22 = (float32x2_t)vdup_n_s32(0x3DCCCCCDu);
  v23 = vmul_f32(v21, v22);
  v21.i32[0] = *(_DWORD *)(v15 + 16);
  v22.i32[0] = *(_DWORD *)(v18 + 16);
  a11.i32[0] = -*(char *)(v15 + 32);
  v24 = (int32x2_t)vand_s8(a11, (int8x8_t)v21);
  v25 = (float32x2_t)vdup_lane_s32(v24, 0);
  v24.i32[0] = -*(char *)(v18 + 32);
  v26 = (float32x2_t)vdup_lane_s32((int32x2_t)vand_s8((int8x8_t)v24, (int8x8_t)v22), 0);
  v316 = v25;
  v317 = v26.f32[0];
  v27 = vadd_f32(v25, v26);
  v28 = *a4;
  v330 = 0uLL;
  v329 = 0;
  v29 = *a8;
  __asm { FMOV            V9.2S, #1.0 }
  v320 = v27;
  if (!*a8)
  {
    v50 = vmulq_f32(*a3, *a3);
    v50.i64[0] = vpaddq_f32(v50, v50).u64[0];
    v42 = (float32x4_t)vbslq_s8((int8x16_t)vdupq_lane_s32(vcgtz_f32(vpadd_f32(*(float32x2_t *)v50.f32, *(float32x2_t *)v50.f32)), 0), *(int8x16_t *)a3, (int8x16_t)xmmword_2260E5F10);
    v330 = v42;
    v51 = vmulq_f32(v42, v42);
    v51.i64[0] = vpaddq_f32(v51, v51).u64[0];
    v52 = vpadd_f32(*(float32x2_t *)v51.f32, *(float32x2_t *)v51.f32);
    v53 = vrsqrte_f32(v52);
    v54 = 4;
    do
    {
      v53 = vmul_f32(v53, vrsqrts_f32(vmul_f32(v53, v53), v52));
      --v54;
    }
    while (v54);
    v55 = vmul_f32(v52, (float32x2_t)vbsl_s8((int8x8_t)vdup_lane_s32(vceqz_f32(v52), 0), (int8x8_t)_D9, (int8x8_t)v53));
    v56 = vrecpe_f32(v55);
    v57 = 4;
    do
    {
      *(float32x2_t *)a12.f32 = vrecps_f32(v55, v56);
      v56 = vmul_f32(v56, *(float32x2_t *)a12.f32);
      --v57;
    }
    while (v57);
    v58 = vmulq_n_f32(v42, v56.f32[0]);
    v58.i32[3] = 0;
    v325 = v58;
    v59 = (float32x2_t)vdup_n_s32(0x7F7FFFFFu);
    v60.i64[0] = -1;
    v60.i64[1] = -1;
    v61 = 0uLL;
    goto LABEL_54;
  }
  v35 = 0;
  v36 = v15 + 48;
  v37 = *(_QWORD *)(v18 + 160);
  do
  {
    v38 = a6[v35];
    *(&v335 + v35) = v38;
    v39 = a7[v35];
    *(&v333 + v35) = v39;
    v40 = *(float32x4_t *)(v36 + 16 * (1 - v38));
    v41 = *(float32x4_t *)(v37 + 12 * v39);
    v41.i32[3] = 0;
    v42 = vsubq_f32(v40, v41);
    *(&v340 + v35) = v40;
    *(&v337 + v35) = v41;
    *(&v343 + v35++) = v42;
  }
  while (v29 != v35);
  v329 = v29;
  switch((_DWORD)v35)
  {
    case 4:
      v326 = v28;
      physx::Gu::closestPtPointTetrahedron(&v343, &v340, &v337, &v335, &v333, (int *)&v329);
      LODWORD(v28) = v326;
      v27.i32[0] = v320.i32[0];
      goto LABEL_49;
    case 3:
      v329 = 3;
      v42 = v343;
      a12 = vsubq_f32(v344, v343);
      v62 = vsubq_f32((float32x4_t)v345[0], v343);
      v64 = (int8x8_t)vmls_f32(vmul_f32(*(float32x2_t *)a12.f32, (float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v62, (int8x16_t)v62, 4uLL)), (float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)a12, (int8x16_t)a12, 4uLL), *(float32x2_t *)v62.f32);
      *(int8x8_t *)v63.f32 = vext_s8(v64, (int8x8_t)vmls_f32(vmul_f32((float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)a12, (int8x16_t)a12, 8uLL), *(float32x2_t *)v62.f32), *(float32x2_t *)a12.f32, (float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v62, (int8x16_t)v62, 8uLL)), 4uLL);
      v64.i32[1] = 0;
      v65 = vpadd_f32(vmul_f32(*(float32x2_t *)v63.f32, *(float32x2_t *)v63.f32), vmul_f32((float32x2_t)v64.u32[0], (float32x2_t)v64.u32[0]));
      v66 = vpadd_f32(v65, v65);
      if (v66.f32[0] > 0.00000011921)
      {
        if (v66.f32[0] == 0.0)
        {
          v42 = 0uLL;
        }
        else
        {
          *(int8x8_t *)&v63.u32[2] = v64;
          v67 = (float32x2_t)vextq_s8((int8x16_t)v344, (int8x16_t)v344, 8uLL).u64[0];
          v68 = (float32x2_t)vextq_s8(v345[0], v345[0], 8uLL).u64[0];
          v69 = (float32x2_t)vextq_s8(v345[0], v345[0], 4uLL).u64[0];
          v70 = (float32x2_t)vextq_s8((int8x16_t)v344, (int8x16_t)v344, 4uLL).u64[0];
          v71 = (int8x8_t)vmls_f32(vmul_f32(*(float32x2_t *)v344.f32, v69), v70, *(float32x2_t *)v345[0].i8);
          *(int8x8_t *)v72.f32 = vext_s8(v71, (int8x8_t)vmls_f32(vmul_f32(v67, *(float32x2_t *)v345[0].i8), *(float32x2_t *)v344.f32, v68), 4uLL);
          v72.i64[1] = v71.u32[0];
          v73 = (float32x2_t)vextq_s8((int8x16_t)v343, (int8x16_t)v343, 8uLL).u64[0];
          v74 = (float32x2_t)vextq_s8((int8x16_t)v343, (int8x16_t)v343, 4uLL).u64[0];
          v75 = (int8x8_t)vmls_f32(vmul_f32(v74, *(float32x2_t *)v345[0].i8), v69, *(float32x2_t *)v343.f32);
          *(int8x8_t *)v76.f32 = vext_s8(v75, (int8x8_t)vmls_f32(vmul_f32(*(float32x2_t *)v343.f32, v68), *(float32x2_t *)v345[0].i8, v73), 4uLL);
          v76.i64[1] = v75.u32[0];
          v77 = (int8x8_t)vmls_f32(vmul_f32(*(float32x2_t *)v343.f32, v70), v74, *(float32x2_t *)v344.f32);
          *(int8x8_t *)v78.f32 = vext_s8(v77, (int8x8_t)vmls_f32(vmul_f32(v73, *(float32x2_t *)v344.f32), *(float32x2_t *)v343.f32, v67), 4uLL);
          v78.i64[1] = v77.u32[0];
          v79 = vmulq_f32(v72, v63);
          v79.i64[0] = vpaddq_f32(v79, v79).u64[0];
          v80 = vpadd_f32(*(float32x2_t *)v79.f32, *(float32x2_t *)v79.f32);
          v81 = vmulq_f32(v76, v63);
          v81.i64[0] = vpaddq_f32(v81, v81).u64[0];
          v82 = vpadd_f32(*(float32x2_t *)v81.f32, *(float32x2_t *)v81.f32);
          v83 = vmulq_f32(v78, v63);
          v83.i64[0] = vpaddq_f32(v83, v83).u64[0];
          v84 = vpadd_f32(*(float32x2_t *)v83.f32, *(float32x2_t *)v83.f32);
          if (vuzp1_s8((int8x8_t)vdup_lane_s16((int16x4_t)vand_s8(vand_s8((int8x8_t)vcgez_f32(v82), (int8x8_t)vcgez_f32(v80)), (int8x8_t)vcgez_f32(v84)), 0), *(int8x8_t *)v343.f32).u32[0] == -1)
          {
            v110 = (int8x16_t)vmulq_f32(v343, v63);
            v111 = (float32x2_t)vextq_s8(v110, v110, 8uLL).u64[0];
            v112 = vrecpe_f32(v66);
            v113 = 4;
            do
            {
              v112 = vmul_f32(v112, vrecps_f32(v66, v112));
              --v113;
            }
            while (v113);
            v114 = vpadd_f32(*(float32x2_t *)v110.i8, v111);
            v42 = vmulq_n_f32(v63, vmul_f32(v112, vpadd_f32(v114, v114)).f32[0]);
            v42.i32[3] = 0;
          }
          else
          {
            v85 = vnegq_f32(v343);
            v85.i32[3] = 0;
            v86 = vnegq_f32(v344);
            v86.i32[3] = 0;
            v87 = vmulq_f32(v85, a12);
            v87.i64[0] = vpaddq_f32(v87, v87).u64[0];
            v88 = vpadd_f32(*(float32x2_t *)v87.f32, *(float32x2_t *)v87.f32);
            v89 = vmulq_f32(a12, v86);
            v89.i64[0] = vpaddq_f32(v89, v89).u64[0];
            v90 = vpadd_f32(*(float32x2_t *)v89.f32, *(float32x2_t *)v89.f32);
            if (vuzp1_s8((int8x8_t)vdup_lane_s16((int16x4_t)vand_s8(vand_s8((int8x8_t)vcgez_f32(v88), (int8x8_t)vclez_f32(v90)), (int8x8_t)vclez_f32(v84)), 0), *(int8x8_t *)v343.f32).u32[0] == -1)
            {
              v115 = vsub_f32(v88, v90);
              v116 = vrecpe_f32(v115);
              v117 = 4;
              do
              {
                v116 = vmul_f32(v116, vrecps_f32(v115, v116));
                --v117;
              }
              while (v117);
              v102 = 0;
              v42 = vmlaq_n_f32(v343, a12, vmul_f32(v88, (float32x2_t)vbsl_s8((int8x8_t)vcgt_f32(vabs_f32(v115), (float32x2_t)0x3400000034000000), (int8x8_t)v116, 0)).f32[0]);
              v42.i64[1] = vextq_s8((int8x16_t)v42, (int8x16_t)v42, 8uLL).u32[0];
              v118 = 2;
              v101 = 1;
            }
            else
            {
              v91 = vnegq_f32((float32x4_t)v345[0]);
              v91.i32[3] = 0;
              v92 = vmulq_f32(v86, v62);
              v92.i64[0] = vpaddq_f32(v92, v92).u64[0];
              v93 = vpadd_f32(*(float32x2_t *)v92.f32, *(float32x2_t *)v92.f32);
              v94 = vmulq_f32(a12, v91);
              v94.i64[0] = vpaddq_f32(v94, v94).u64[0];
              v95 = vpadd_f32(*(float32x2_t *)v94.f32, *(float32x2_t *)v94.f32);
              v96 = vmulq_f32(v62, v91);
              v96.i64[0] = vpaddq_f32(v96, v96).u64[0];
              v97 = vpadd_f32(*(float32x2_t *)v96.f32, *(float32x2_t *)v96.f32);
              if (vuzp1_s8((int8x8_t)vdup_lane_s16((int16x4_t)vand_s8(vand_s8((int8x8_t)vcge_f32(v93, v90), (int8x8_t)vcge_f32(v95, v97)), (int8x8_t)vclez_f32(v80)), 0), *(int8x8_t *)v343.f32).u32[0] == -1)
              {
                v119 = vsub_f32(v93, v90);
                v120 = vadd_f32(v119, vsub_f32(v95, v97));
                v121 = vrecpe_f32(v120);
                v122 = 4;
                do
                {
                  v121 = vmul_f32(v121, vrecps_f32(v120, v121));
                  --v122;
                }
                while (v122);
                v123 = (int8x16_t)vmlaq_n_f32(v344, vsubq_f32((float32x4_t)v345[0], v344), vmul_f32(v119, (float32x2_t)vbsl_s8((int8x8_t)vcgt_f32(vabs_f32(v120), (float32x2_t)0x3400000034000000), (int8x8_t)v121, 0)).f32[0]);
                v123.i64[1] = vextq_s8(v123, v123, 8uLL).u32[0];
                v118 = 2;
                v102 = 1;
                v101 = 2;
                v42 = (float32x4_t)v123;
              }
              else
              {
                v98 = vmulq_f32(v85, v62);
                v99 = (int32x4_t)vpaddq_f32(v98, v98);
                *(float32x2_t *)v99.i8 = vpadd_f32(*(float32x2_t *)v99.i8, *(float32x2_t *)v99.i8);
                if (vuzp1_s8((int8x8_t)vdup_lane_s16((int16x4_t)vand_s8(vand_s8((int8x8_t)vcgez_f32(*(float32x2_t *)v99.i8), (int8x8_t)vclez_f32(v97)), (int8x8_t)vclez_f32(v82)), 0), *(int8x8_t *)v343.f32).u32[0] == -1)
                {
                  v124 = vsub_f32(*(float32x2_t *)v99.i8, v97);
                  v125 = vrecpe_f32(v124);
                  v126 = 4;
                  do
                  {
                    v125 = vmul_f32(v125, vrecps_f32(v124, v125));
                    --v126;
                  }
                  while (v126);
                  v102 = 0;
                  v42 = vmlaq_n_f32(v343, v62, vmul_f32(*(float32x2_t *)v99.i8, (float32x2_t)vbsl_s8((int8x8_t)vcgt_f32(vabs_f32(v124), (float32x2_t)0x3400000034000000), (int8x8_t)v125, 0)).f32[0]);
                  v42.i64[1] = vextq_s8((int8x16_t)v42, (int8x16_t)v42, 8uLL).u32[0];
                  v101 = 2;
                }
                else if (vuzp1_s8((int8x8_t)vdup_lane_s16((int16x4_t)vand_s8((int8x8_t)vclez_f32(*(float32x2_t *)v99.i8), (int8x8_t)vclez_f32(v88)), 0), *(int8x8_t *)v343.f32).u32[0] == -1)
                {
                  v102 = 0;
                  v101 = 1;
                }
                else
                {
                  *(int32x2_t *)v99.i8 = vcge_f32(v90, v93);
                  *(int16x4_t *)v42.f32 = vdup_lane_s16((int16x4_t)vand_s8(*(int8x8_t *)v99.i8, (int8x8_t)vcgez_f32(v90)), 0);
                  *(int8x8_t *)v42.f32 = vuzp1_s8(*(int8x8_t *)v42.f32, *(int8x8_t *)v42.f32);
                  v99.i32[0] = -1;
                  v100 = v42.i32[0];
                  v42 = (float32x4_t)vbslq_s8((int8x16_t)vdupq_lane_s32((int32x2_t)*(_OWORD *)&vceqq_s32((int32x4_t)v42, v99), 0), (int8x16_t)v344, v345[0]);
                  v101 = 1;
                  if (v100 == -1)
                    v102 = 1;
                  else
                    v102 = 2;
                }
                v118 = v101;
              }
            }
            v127 = *(&v343 + v102);
            v128 = *(&v343 + v101);
            a12 = *(&v340 + v102);
            v129 = *(&v340 + v101);
            v130 = *(&v337 + v102);
            v131 = *(&v337 + v101);
            v132 = *(&v335 + v102);
            v133 = *(&v335 + v101);
            v134 = *(&v333 + v102);
            v135 = *(&v333 + v101);
            v343 = v127;
            v344 = v128;
            v340 = a12;
            v341 = v129;
            v337 = v130;
            v338 = v131;
            v335 = v132;
            v336 = v133;
            v333 = v134;
            v334 = v135;
            v329 = v118;
          }
        }
        goto LABEL_49;
      }
      v329 = 2;
      v103 = vmulq_f32(a12, a12);
      v103.i64[0] = vpaddq_f32(v103, v103).u64[0];
      v104 = vpadd_f32(*(float32x2_t *)v103.f32, *(float32x2_t *)v103.f32);
      if (vuzp1_s8((int8x8_t)vdup_lane_s16((int16x4_t)vcge_f32((float32x2_t)0x3400000034000000, v104), 0), *(int8x8_t *)v343.f32).u32[0] != -1)
      {
        v105 = vnegq_f32(v343);
        v105.i32[3] = 0;
        v106 = vmulq_f32(v105, a12);
        v106.i64[0] = vpaddq_f32(v106, v106).u64[0];
        v107 = vpadd_f32(*(float32x2_t *)v106.f32, *(float32x2_t *)v106.f32);
        v108 = vrecpe_f32(v104);
        v109 = 4;
        do
        {
          v108 = vmul_f32(v108, vrecps_f32(v104, v108));
          --v109;
        }
        while (v109);
        v42 = vmlaq_n_f32(v343, a12, vmax_f32(vmin_f32(vmul_f32(v107, v108), _D9), 0).f32[0]);
        goto LABEL_31;
      }
      break;
    case 2:
      v42 = v343;
      v43 = vsubq_f32(v344, v343);
      v44 = vmulq_f32(v43, v43);
      v44.i64[0] = vpaddq_f32(v44, v44).u64[0];
      v45 = vpadd_f32(*(float32x2_t *)v44.f32, *(float32x2_t *)v44.f32);
      if (vuzp1_s8((int8x8_t)vdup_lane_s16((int16x4_t)vcge_f32((float32x2_t)0x3400000034000000, v45), 0), *(int8x8_t *)v343.f32).u32[0] != -1)
      {
        v46 = vnegq_f32(v343);
        v46.i32[3] = 0;
        v47 = vmulq_f32(v46, v43);
        a12 = vpaddq_f32(v47, v47);
        *(float32x2_t *)a12.f32 = vpadd_f32(*(float32x2_t *)a12.f32, *(float32x2_t *)a12.f32);
        v48 = vrecpe_f32(v45);
        v49 = 4;
        do
        {
          v48 = vmul_f32(v48, vrecps_f32(v45, v48));
          --v49;
        }
        while (v49);
        v42 = vmlaq_n_f32(v343, v43, vmax_f32(vmin_f32(vmul_f32(*(float32x2_t *)a12.f32, v48), _D9), 0).f32[0]);
LABEL_31:
        v42.i64[1] = vextq_s8((int8x16_t)v42, (int8x16_t)v42, 8uLL).u32[0];
        goto LABEL_49;
      }
      break;
    default:
      goto LABEL_49;
  }
  v329 = 1;
LABEL_49:
  v330 = v42;
  v136 = vmulq_f32(v42, v42);
  v136.i64[0] = vpaddq_f32(v136, v136).u64[0];
  v137 = vpadd_f32(*(float32x2_t *)v136.f32, *(float32x2_t *)v136.f32);
  v138 = vrsqrte_f32(v137);
  v139 = 4;
  do
  {
    v138 = vmul_f32(v138, vrsqrts_f32(vmul_f32(v138, v138), v137));
    --v139;
  }
  while (v139);
  v59 = vmul_f32(v137, (float32x2_t)vbsl_s8((int8x8_t)vdup_lane_s32(vceqz_f32(v137), 0), (int8x8_t)_D9, (int8x8_t)v138));
  v140 = vrecpe_f32(v59);
  v141 = 4;
  do
  {
    *(float32x2_t *)a12.f32 = vrecps_f32(v59, v140);
    v140 = vmul_f32(v140, *(float32x2_t *)a12.f32);
    --v141;
  }
  while (v141);
  v142 = vmulq_n_f32(v42, v140.f32[0]);
  v142.i32[3] = 0;
  v325 = v142;
  v60 = vdupq_lane_s32(vcgt_f32(v59, v23), 0);
  v61 = v42;
LABEL_54:
  v143 = *(float *)&v28 + v27.f32[0];
  a12.i32[0] = -1;
  v315 = (int32x4_t)a12;
  v144.i64[0] = -1;
  v144.i64[1] = -1;
  for (i = v59; ; i = v159)
  {
    v146 = v42;
    v147.i64[0] = -1;
    v147.i64[1] = -1;
    *(int16x4_t *)v147.i8 = vmovn_s32(vceqq_s32(v60, v147));
    if (vuzp1_s8(*(int8x8_t *)v147.i8, *(int8x8_t *)v147.i8).u32[0] != -1)
      break;
    v327 = v59;
    v323 = v146;
    v148 = vnegq_f32(v146);
    v148.i32[3] = 0;
    v149 = v329;
    v150 = *(float32x4_t **)(a1 + 8);
    v151 = vmulq_f32(v148, v150[3]);
    v151.i64[0] = vpaddq_f32(v151, v151).u64[0];
    v152 = vmulq_f32(v148, v150[4]);
    v152.i64[0] = vpaddq_f32(v152, v152).u64[0];
    *(int8x8_t *)v152.f32 = vand_s8((int8x8_t)vcgt_f32(vpadd_f32(*(float32x2_t *)v151.f32, *(float32x2_t *)v151.f32), vpadd_f32(*(float32x2_t *)v152.f32, *(float32x2_t *)v152.f32)), (int8x8_t)0x100000001);
    *(&v335 + v329) = v152.i32[0];
    v324 = (float32x4_t)vbslq_s8((int8x16_t)vcltzq_s32(vshlq_n_s32(vdupq_lane_s32(*(int32x2_t *)v152.f32, 0), 0x1FuLL)), (int8x16_t)v150[3], (int8x16_t)v150[4]);
    v153 = *(_QWORD *)(a2 + 8);
    v154 = physx::Gu::ConvexHullV::supportVertexIndex(v153, &v330);
    v155 = v325;
    *(&v333 + v149) = v154;
    v156 = *(float32x4_t *)(*(_QWORD *)(v153 + 160) + 12 * v154);
    v156.i32[3] = 0;
    v42 = vsubq_f32(v324, v156);
    v157 = vmulq_f32(v325, v42);
    v157.i64[0] = vpaddq_f32(v157, v157).u64[0];
    v158 = vpadd_f32(*(float32x2_t *)v157.f32, *(float32x2_t *)v157.f32).f32[0];
    if (v158 > v143)
    {
      if (v14)
      {
        v259 = v329;
        *a8 = v329;
        if ((_DWORD)v259)
        {
          v260 = &v333;
          v261 = &v335;
          do
          {
            v262 = *v261++;
            *v14++ = v262;
            v263 = *v260++;
            *v13++ = v263;
            --v259;
          }
          while (v259);
        }
      }
      return 0;
    }
    v159 = v327;
    v160 = v329;
    if (v158 > (float)(0.99977 * v327.f32[0]))
    {
      v264 = v320;
      if (!v14)
        goto LABEL_121;
      *a8 = v329;
      if ((_DWORD)v160)
      {
        v265 = &v333;
        v266 = &v335;
        v267 = v160;
        do
        {
          v268 = *v266++;
          *v14++ = v268;
          v269 = *v265++;
          *v13++ = v269;
          --v267;
        }
        while (v267);
LABEL_121:
        v270 = a13;
        *(float32x4_t *)(a13 + 32) = v325;
        if ((_DWORD)v160 != 3)
        {
          if ((_DWORD)v160 != 2)
          {
            v271 = 0uLL;
            v272 = 0uLL;
            v273 = a5;
            if ((_DWORD)v160 == 1)
            {
              v271 = v340;
              v272 = v337;
              if (!a5)
                goto LABEL_142;
LABEL_138:
              *(float32x4_t *)v270 = v271;
              *(float32x4_t *)(v270 + 16) = v272;
              result = 2;
              *(float32x2_t *)(v270 + 64) = v159;
              return result;
            }
LABEL_137:
            if (!v273)
              goto LABEL_142;
            goto LABEL_138;
          }
          v287 = vsubq_f32(v343, v330);
          v288 = vsubq_f32(vsubq_f32(v344, v330), v287);
          v289 = vmulq_f32(v288, v288);
          v289.i64[0] = vpaddq_f32(v289, v289).u64[0];
          v290 = vpadd_f32(*(float32x2_t *)v289.f32, *(float32x2_t *)v289.f32);
          v291 = vrecpe_f32(v290);
          v292 = 4;
          do
          {
            v291 = vmul_f32(v291, vrecps_f32(v290, v291));
            --v292;
          }
          while (v292);
          v293 = vnegq_f32(v287);
          v293.i32[3] = 0;
          v294 = vmulq_f32(v293, v288);
          v294.i64[0] = vpaddq_f32(v294, v294).u64[0];
          v293.i32[0] = vmul_f32((float32x2_t)vbsl_s8((int8x8_t)vcgtz_f32(v290), (int8x8_t)v291, 0), vpadd_f32(*(float32x2_t *)v294.f32, *(float32x2_t *)v294.f32)).u32[0];
          v271 = vmlaq_n_f32(v340, vsubq_f32(v341, v340), v293.f32[0]);
          v271.i64[1] = vextq_s8((int8x16_t)v271, (int8x16_t)v271, 8uLL).u32[0];
          v272 = vmlaq_n_f32(v337, vsubq_f32(v338, v337), v293.f32[0]);
          v272.i64[1] = vextq_s8((int8x16_t)v272, (int8x16_t)v272, 8uLL).u32[0];
          if (a5)
            goto LABEL_138;
LABEL_142:
          v295 = (int8x16_t)vmlsq_lane_f32(v271, v155, v316, 0);
          v295.i64[1] = vextq_s8(v295, v295, 8uLL).u32[0];
          v296 = (int8x16_t)vmlaq_n_f32(v272, v155, v317);
          v296.i64[1] = vextq_s8(v296, v296, 8uLL).u32[0];
          *(int8x16_t *)v270 = v295;
          *(int8x16_t *)(v270 + 16) = v296;
          *(float32x2_t *)(v270 + 64) = vsub_f32(v159, v264);
          return 2;
        }
        v331 = 0;
        v332 = 0;
        physx::Gu::barycentricCoordinates(&v330, &v343, &v344, (float32x4_t *)v345, &v332, &v331);
        v155 = v325;
        v159 = v327;
        v264 = v320;
        v282 = vmulq_n_f32(vsubq_f32(v341, v340), v332.f32[0]);
        v282.i32[3] = 0;
        v283 = vmulq_n_f32(vsubq_f32(v342, v340), v331.f32[0]);
        v283.i32[3] = 0;
        v284 = vaddq_f32(v282, v283);
        v285 = vmulq_n_f32(vsubq_f32(v338, v337), v332.f32[0]);
        v285.i32[3] = 0;
        v271 = vaddq_f32(v340, v284);
        v286 = vmulq_n_f32(vsubq_f32(v339, v337), v331.f32[0]);
        v286.i32[3] = 0;
        v272 = vaddq_f32(v337, vaddq_f32(v285, v286));
      }
      else
      {
        v270 = a13;
        *(float32x4_t *)(a13 + 32) = v325;
        v271 = 0uLL;
        v272 = 0uLL;
      }
      v273 = a5;
      goto LABEL_137;
    }
    *(&v340 + v329) = v324;
    *(&v337 + v160) = v156;
    v329 = v160 + 1;
    *(&v343 + v160) = v42;
    if ((_DWORD)v160 == 3)
    {
      physx::Gu::closestPtPointTetrahedron(&v343, &v340, &v337, &v335, &v333, (int *)&v329);
      v159 = v327;
LABEL_66:
      v61 = v323;
      goto LABEL_101;
    }
    if ((_DWORD)v160 == 2)
    {
      v42 = v343;
      v169 = vsubq_f32(v344, v343);
      v170 = vsubq_f32((float32x4_t)v345[0], v343);
      v172 = (int8x8_t)vmls_f32(vmul_f32(*(float32x2_t *)v169.f32, (float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v170, (int8x16_t)v170, 4uLL)), (float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v169, (int8x16_t)v169, 4uLL), *(float32x2_t *)v170.f32);
      *(int8x8_t *)v171.f32 = vext_s8(v172, (int8x8_t)vmls_f32(vmul_f32((float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v169, (int8x16_t)v169, 8uLL), *(float32x2_t *)v170.f32), *(float32x2_t *)v169.f32, (float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v170, (int8x16_t)v170, 8uLL)), 4uLL);
      v172.i32[1] = 0;
      v329 = 3;
      v173 = vpadd_f32(vmul_f32(*(float32x2_t *)v171.f32, *(float32x2_t *)v171.f32), vmul_f32((float32x2_t)v172.u32[0], (float32x2_t)v172.u32[0]));
      v174 = vpadd_f32(v173, v173);
      if (v174.f32[0] <= 0.00000011921)
      {
        v329 = 2;
        v211 = vmulq_f32(v169, v169);
        v211.i64[0] = vpaddq_f32(v211, v211).u64[0];
        v212 = vpadd_f32(*(float32x2_t *)v211.f32, *(float32x2_t *)v211.f32);
        if (vuzp1_s8((int8x8_t)vdup_lane_s16((int16x4_t)vcge_f32((float32x2_t)0x3400000034000000, v212), 0), *(int8x8_t *)v343.f32).u32[0] != -1)
        {
          v213 = vnegq_f32(v343);
          v213.i32[3] = 0;
          v214 = vmulq_f32(v213, v169);
          v214.i64[0] = vpaddq_f32(v214, v214).u64[0];
          v215 = vpadd_f32(*(float32x2_t *)v214.f32, *(float32x2_t *)v214.f32);
          v216 = vrecpe_f32(v212);
          v217 = 4;
          v61 = v323;
          do
          {
            v216 = vmul_f32(v216, vrecps_f32(v212, v216));
            --v217;
          }
          while (v217);
          v42 = vmlaq_n_f32(v343, v169, vmax_f32(vmin_f32(vmul_f32(v215, v216), _D9), 0).f32[0]);
LABEL_81:
          v42.i64[1] = vextq_s8((int8x16_t)v42, (int8x16_t)v42, 8uLL).u32[0];
          goto LABEL_101;
        }
        v329 = 1;
        goto LABEL_66;
      }
      if (v174.f32[0] == 0.0)
      {
        v42 = 0uLL;
        goto LABEL_66;
      }
      *(int8x8_t *)&v171.u32[2] = v172;
      v175 = (float32x2_t)vextq_s8((int8x16_t)v344, (int8x16_t)v344, 8uLL).u64[0];
      v176 = (float32x2_t)vextq_s8(v345[0], v345[0], 8uLL).u64[0];
      v177 = (float32x2_t)vextq_s8(v345[0], v345[0], 4uLL).u64[0];
      v178 = (float32x2_t)vextq_s8((int8x16_t)v344, (int8x16_t)v344, 4uLL).u64[0];
      v179 = (int8x8_t)vmls_f32(vmul_f32(*(float32x2_t *)v344.f32, v177), v178, *(float32x2_t *)v345[0].i8);
      *(int8x8_t *)v180.f32 = vext_s8(v179, (int8x8_t)vmls_f32(vmul_f32(v175, *(float32x2_t *)v345[0].i8), *(float32x2_t *)v344.f32, v176), 4uLL);
      v180.i64[1] = v179.u32[0];
      v181 = (float32x2_t)vextq_s8((int8x16_t)v343, (int8x16_t)v343, 8uLL).u64[0];
      v182 = (float32x2_t)vextq_s8((int8x16_t)v343, (int8x16_t)v343, 4uLL).u64[0];
      v183 = (int8x8_t)vmls_f32(vmul_f32(v182, *(float32x2_t *)v345[0].i8), v177, *(float32x2_t *)v343.f32);
      *(int8x8_t *)v184.f32 = vext_s8(v183, (int8x8_t)vmls_f32(vmul_f32(*(float32x2_t *)v343.f32, v176), *(float32x2_t *)v345[0].i8, v181), 4uLL);
      v184.i64[1] = v183.u32[0];
      v185 = (int8x8_t)vmls_f32(vmul_f32(*(float32x2_t *)v343.f32, v178), v182, *(float32x2_t *)v344.f32);
      *(int8x8_t *)v186.f32 = vext_s8(v185, (int8x8_t)vmls_f32(vmul_f32(v181, *(float32x2_t *)v344.f32), *(float32x2_t *)v343.f32, v175), 4uLL);
      v186.i64[1] = v185.u32[0];
      v187 = vmulq_f32(v180, v171);
      v187.i64[0] = vpaddq_f32(v187, v187).u64[0];
      v188 = vpadd_f32(*(float32x2_t *)v187.f32, *(float32x2_t *)v187.f32);
      v189 = vmulq_f32(v184, v171);
      v189.i64[0] = vpaddq_f32(v189, v189).u64[0];
      v190 = vpadd_f32(*(float32x2_t *)v189.f32, *(float32x2_t *)v189.f32);
      v191 = vmulq_f32(v186, v171);
      v191.i64[0] = vpaddq_f32(v191, v191).u64[0];
      v192 = vpadd_f32(*(float32x2_t *)v191.f32, *(float32x2_t *)v191.f32);
      if (vuzp1_s8((int8x8_t)vdup_lane_s16((int16x4_t)vand_s8(vand_s8((int8x8_t)vcgez_f32(v190), (int8x8_t)vcgez_f32(v188)), (int8x8_t)vcgez_f32(v192)), 0), *(int8x8_t *)v343.f32).u32[0] != -1)
      {
        v193 = vnegq_f32(v343);
        v193.i32[3] = 0;
        v194 = vnegq_f32(v344);
        v194.i32[3] = 0;
        v195 = vmulq_f32(v193, v169);
        v195.i64[0] = vpaddq_f32(v195, v195).u64[0];
        v196 = vpadd_f32(*(float32x2_t *)v195.f32, *(float32x2_t *)v195.f32);
        v197 = vmulq_f32(v169, v194);
        v197.i64[0] = vpaddq_f32(v197, v197).u64[0];
        v198 = vpadd_f32(*(float32x2_t *)v197.f32, *(float32x2_t *)v197.f32);
        if (vuzp1_s8((int8x8_t)vdup_lane_s16((int16x4_t)vand_s8(vand_s8((int8x8_t)vcgez_f32(v196), (int8x8_t)vclez_f32(v198)), (int8x8_t)vclez_f32(v192)), 0), *(int8x8_t *)v343.f32).u32[0] == -1)
        {
          v223 = vsub_f32(v196, v198);
          v224 = vrecpe_f32(v223);
          v225 = 4;
          do
          {
            v224 = vmul_f32(v224, vrecps_f32(v223, v224));
            --v225;
          }
          while (v225);
          v210 = 0;
          v42 = vmlaq_n_f32(v343, v169, vmul_f32(v196, (float32x2_t)vbsl_s8((int8x8_t)vcgt_f32(vabs_f32(v223), (float32x2_t)0x3400000034000000), (int8x8_t)v224, 0)).f32[0]);
          v42.i64[1] = vextq_s8((int8x16_t)v42, (int8x16_t)v42, 8uLL).u32[0];
          v226 = 2;
          v209 = 1;
        }
        else
        {
          v199 = vnegq_f32((float32x4_t)v345[0]);
          v199.i32[3] = 0;
          v200 = vmulq_f32(v194, v170);
          v200.i64[0] = vpaddq_f32(v200, v200).u64[0];
          v201 = vpadd_f32(*(float32x2_t *)v200.f32, *(float32x2_t *)v200.f32);
          v202 = vmulq_f32(v169, v199);
          v202.i64[0] = vpaddq_f32(v202, v202).u64[0];
          v203 = vpadd_f32(*(float32x2_t *)v202.f32, *(float32x2_t *)v202.f32);
          v204 = vmulq_f32(v170, v199);
          v204.i64[0] = vpaddq_f32(v204, v204).u64[0];
          v205 = vpadd_f32(*(float32x2_t *)v204.f32, *(float32x2_t *)v204.f32);
          if (vuzp1_s8((int8x8_t)vdup_lane_s16((int16x4_t)vand_s8(vand_s8((int8x8_t)vcge_f32(v201, v198), (int8x8_t)vcge_f32(v203, v205)), (int8x8_t)vclez_f32(v188)), 0), *(int8x8_t *)v343.f32).u32[0] != -1)
          {
            v206 = vmulq_f32(v193, v170);
            v206.i64[0] = vpaddq_f32(v206, v206).u64[0];
            v207 = vpadd_f32(*(float32x2_t *)v206.f32, *(float32x2_t *)v206.f32);
            if (vuzp1_s8((int8x8_t)vdup_lane_s16((int16x4_t)vand_s8(vand_s8((int8x8_t)vcgez_f32(v207), (int8x8_t)vclez_f32(v205)), (int8x8_t)vclez_f32(v190)), 0), *(int8x8_t *)v343.f32).u32[0] == -1)
            {
              v232 = vsub_f32(v207, v205);
              v233 = vrecpe_f32(v232);
              v234 = 4;
              v61 = v323;
              do
              {
                v233 = vmul_f32(v233, vrecps_f32(v232, v233));
                --v234;
              }
              while (v234);
              v210 = 0;
              v42 = vmlaq_n_f32(v343, v170, vmul_f32(v207, (float32x2_t)vbsl_s8((int8x8_t)vcgt_f32(vabs_f32(v232), (float32x2_t)0x3400000034000000), (int8x8_t)v233, 0)).f32[0]);
              v42.i64[1] = vextq_s8((int8x16_t)v42, (int8x16_t)v42, 8uLL).u32[0];
              v209 = 2;
              v226 = 2;
            }
            else
            {
              v61 = v323;
              if (vuzp1_s8((int8x8_t)vdup_lane_s16((int16x4_t)vand_s8((int8x8_t)vclez_f32(v207), (int8x8_t)vclez_f32(v196)), 0), *(int8x8_t *)v343.f32).u32[0] == -1)
              {
                v210 = 0;
                v209 = 1;
              }
              else
              {
                *(int16x4_t *)v42.f32 = vdup_lane_s16((int16x4_t)vand_s8((int8x8_t)vcge_f32(v198, v201), (int8x8_t)vcgez_f32(v198)), 0);
                *(int8x8_t *)v42.f32 = vuzp1_s8(*(int8x8_t *)v42.f32, *(int8x8_t *)v42.f32);
                v208 = v42.i32[0];
                v42 = (float32x4_t)vbslq_s8((int8x16_t)vdupq_lane_s32((int32x2_t)*(_OWORD *)&vceqq_s32((int32x4_t)v42, v315), 0), (int8x16_t)v344, v345[0]);
                v209 = 1;
                if (v208 == -1)
                  v210 = 1;
                else
                  v210 = 2;
              }
              v226 = 1;
            }
            goto LABEL_100;
          }
          v227 = vsub_f32(v201, v198);
          v228 = vadd_f32(v227, vsub_f32(v203, v205));
          v229 = vrecpe_f32(v228);
          v230 = 4;
          do
          {
            v229 = vmul_f32(v229, vrecps_f32(v228, v229));
            --v230;
          }
          while (v230);
          v231 = (int8x16_t)vmlaq_n_f32(v344, vsubq_f32((float32x4_t)v345[0], v344), vmul_f32(v227, (float32x2_t)vbsl_s8((int8x8_t)vcgt_f32(vabs_f32(v228), (float32x2_t)0x3400000034000000), (int8x8_t)v229, 0)).f32[0]);
          v231.i64[1] = vextq_s8(v231, v231, 8uLL).u32[0];
          v209 = 2;
          v42 = (float32x4_t)v231;
          v210 = 1;
          v226 = 2;
        }
        v61 = v323;
LABEL_100:
        v235 = *(&v343 + v210);
        v236 = *(&v343 + v209);
        v237 = *(&v340 + v210);
        v238 = *(&v340 + v209);
        v239 = *(&v337 + v210);
        v240 = *(&v337 + v209);
        v241 = *(&v335 + v210);
        v242 = *(&v335 + v209);
        v243 = *(&v333 + v210);
        v244 = *(&v333 + v209);
        v343 = v235;
        v344 = v236;
        v340 = v237;
        v341 = v238;
        v337 = v239;
        v338 = v240;
        v335 = v241;
        v336 = v242;
        v333 = v243;
        v334 = v244;
        v329 = v226;
        goto LABEL_101;
      }
      v218 = (int8x16_t)vmulq_f32(v343, v171);
      v219 = (float32x2_t)vextq_s8(v218, v218, 8uLL).u64[0];
      v220 = vrecpe_f32(v174);
      v221 = 4;
      v61 = v323;
      do
      {
        v220 = vmul_f32(v220, vrecps_f32(v174, v220));
        --v221;
      }
      while (v221);
      v222 = vpadd_f32(*(float32x2_t *)v218.i8, v219);
      v42 = vmulq_n_f32(v171, vmul_f32(v220, vpadd_f32(v222, v222)).f32[0]);
      v42.i32[3] = 0;
    }
    else
    {
      v61 = v323;
      if ((_DWORD)v160 == 1)
      {
        v42 = v343;
        v161 = vsubq_f32(v344, v343);
        v162 = vmulq_f32(v161, v161);
        v162.i64[0] = vpaddq_f32(v162, v162).u64[0];
        v163 = vpadd_f32(*(float32x2_t *)v162.f32, *(float32x2_t *)v162.f32);
        if (vuzp1_s8((int8x8_t)vdup_lane_s16((int16x4_t)vcge_f32((float32x2_t)0x3400000034000000, v163), 0), *(int8x8_t *)v343.f32).u32[0] == -1)
        {
          v329 = 1;
          goto LABEL_101;
        }
        v164 = vnegq_f32(v343);
        v164.i32[3] = 0;
        v165 = vmulq_f32(v164, v161);
        v165.i64[0] = vpaddq_f32(v165, v165).u64[0];
        v166 = vpadd_f32(*(float32x2_t *)v165.f32, *(float32x2_t *)v165.f32);
        v167 = vrecpe_f32(v163);
        v168 = 4;
        do
        {
          v167 = vmul_f32(v167, vrecps_f32(v163, v167));
          --v168;
        }
        while (v168);
        v42 = vmlaq_n_f32(v343, v161, vmax_f32(vmin_f32(vmul_f32(v166, v167), _D9), 0).f32[0]);
        goto LABEL_81;
      }
    }
LABEL_101:
    v330 = v42;
    v245 = vmulq_f32(v42, v42);
    v245.i64[0] = vpaddq_f32(v245, v245).u64[0];
    v246 = vpadd_f32(*(float32x2_t *)v245.f32, *(float32x2_t *)v245.f32);
    v247 = vrsqrte_f32(v246);
    v248 = 4;
    do
    {
      v247 = vmul_f32(v247, vrsqrts_f32(vmul_f32(v247, v247), v246));
      --v248;
    }
    while (v248);
    v59 = vmul_f32(v246, (float32x2_t)vbsl_s8((int8x8_t)vdup_lane_s32(vceqz_f32(v246), 0), (int8x8_t)_D9, (int8x8_t)v247));
    v249 = vrecpe_f32(v59);
    v250 = 4;
    do
    {
      v249 = vmul_f32(v249, vrecps_f32(v59, v249));
      --v250;
    }
    while (v250);
    v251 = vmulq_n_f32(v42, v249.f32[0]);
    v251.i32[3] = 0;
    v325 = v251;
    *(int32x2_t *)v251.f32 = vcgt_f32(v159, v59);
    v144 = vdupq_lane_s32(*(int32x2_t *)v251.f32, 0);
    v60 = vdupq_lane_s32((int32x2_t)vand_s8((int8x8_t)vcgt_f32(v59, v23), *(int8x8_t *)v251.f32), 0);
  }
  v252 = (int8x8_t)vmovn_s32(vceqzq_s32(v144));
  v253 = v329;
  if (vuzp1_s8(v252, v252).u32[0] != -1)
  {
    if (v14)
    {
      *a8 = v329;
      if ((_DWORD)v253)
      {
        v254 = &v333;
        v255 = &v335;
        do
        {
          v256 = *v255++;
          *v14++ = v256;
          v257 = *v254++;
          *v13++ = v257;
          --v253;
        }
        while (v253);
      }
    }
    return 5;
  }
  v274 = v320;
  if (v14)
  {
    v275 = v329 - 1;
    *a8 = v329 - 1;
    if ((_DWORD)v253 != 1)
    {
      v276 = &v333;
      v277 = &v335;
      do
      {
        v278 = *v277++;
        *v14++ = v278;
        v279 = *v276++;
        *v13++ = v279;
        --v275;
      }
      while (v275);
      goto LABEL_130;
    }
LABEL_133:
    v280 = v340;
    v281 = v337;
  }
  else
  {
LABEL_130:
    v330 = v61;
    if ((_DWORD)v253 == 3)
    {
      v331 = 0;
      v332 = 0;
      v328 = v61;
      physx::Gu::barycentricCoordinates(&v330, &v343, &v344, (float32x4_t *)v345, &v332, &v331);
      v274 = v320;
      v297 = vmulq_n_f32(vsubq_f32(v341, v340), v332.f32[0]);
      v297.i32[3] = 0;
      v298 = vmulq_n_f32(vsubq_f32(v342, v340), v331.f32[0]);
      v298.i32[3] = 0;
      v299 = vaddq_f32(v297, v298);
      v300 = vmulq_n_f32(vsubq_f32(v338, v337), v332.f32[0]);
      v300.i32[3] = 0;
      v280 = vaddq_f32(v340, v299);
      v301 = vmulq_n_f32(vsubq_f32(v339, v337), v331.f32[0]);
      v61 = v328;
      v301.i32[3] = 0;
      v281 = vaddq_f32(v337, vaddq_f32(v300, v301));
    }
    else if ((_DWORD)v253 == 2)
    {
      v302 = vsubq_f32(v343, v61);
      v303 = vsubq_f32(vsubq_f32(v344, v61), v302);
      v304 = vmulq_f32(v303, v303);
      v304.i64[0] = vpaddq_f32(v304, v304).u64[0];
      v305 = vpadd_f32(*(float32x2_t *)v304.f32, *(float32x2_t *)v304.f32);
      v306 = vrecpe_f32(v305);
      v307 = 4;
      do
      {
        v306 = vmul_f32(v306, vrecps_f32(v305, v306));
        --v307;
      }
      while (v307);
      v308 = vnegq_f32(v302);
      v308.i32[3] = 0;
      v309 = vmulq_f32(v308, v303);
      v309.i64[0] = vpaddq_f32(v309, v309).u64[0];
      v308.i32[0] = vmul_f32((float32x2_t)vbsl_s8((int8x8_t)vcgtz_f32(v305), (int8x8_t)v306, 0), vpadd_f32(*(float32x2_t *)v309.f32, *(float32x2_t *)v309.f32)).u32[0];
      v280 = vmlaq_n_f32(v340, vsubq_f32(v341, v340), v308.f32[0]);
      v280.i64[1] = vextq_s8((int8x16_t)v280, (int8x16_t)v280, 8uLL).u32[0];
      v281 = vmlaq_n_f32(v337, vsubq_f32(v338, v337), v308.f32[0]);
      v281.i64[1] = vextq_s8((int8x16_t)v281, (int8x16_t)v281, 8uLL).u32[0];
    }
    else
    {
      v280 = 0uLL;
      v281 = 0uLL;
      if ((_DWORD)v253 == 1)
        goto LABEL_133;
    }
  }
  v310 = vrecpe_f32(i);
  v311 = 4;
  do
  {
    v310 = vmul_f32(v310, vrecps_f32(i, v310));
    --v311;
  }
  while (v311);
  v312 = vmulq_n_f32(v61, v310.f32[0]);
  v312.i32[3] = 0;
  *(float32x4_t *)(a13 + 32) = v312;
  *(float32x4_t *)(a13 + 48) = v325;
  if (a5)
  {
    *(float32x4_t *)a13 = v280;
    *(float32x4_t *)(a13 + 16) = v281;
    *(float32x2_t *)(a13 + 64) = i;
  }
  else
  {
    v313 = (int8x16_t)vmlsq_lane_f32(v280, v312, v316, 0);
    v313.i64[1] = vextq_s8(v313, v313, 8uLL).u32[0];
    v314 = (int8x16_t)vmlaq_n_f32(v281, v312, v317);
    v314.i64[1] = vextq_s8(v314, v314, 8uLL).u32[0];
    *(int8x16_t *)a13 = v313;
    *(int8x16_t *)(a13 + 16) = v314;
    *(float32x2_t *)(a13 + 64) = vsub_f32(i, v274);
    if ((vcge_f32(v274, i).u32[0] & 1) != 0)
      return 2;
  }
  return 4;
}

uint64_t physx::Gu::fullContactsGenerationCapsuleConvex(uint64_t a1, float32x4_t *a2, float32x4_t *a3, float32x4_t *a4, int32x4_t *a5, uint64_t a6, uint64_t a7, int a8, float a9, float a10, uint64_t a11, float32x4_t *a12, float32x2_t *a13, float32x2_t *a14, char a15)
{
  uint64_t (**v22)();
  uint64_t FullContactManifold;
  float32x4_t v24;
  float32x2_t v25;
  float32x4_t v26;
  float32x2_t v27;
  float32x2_t v28;
  int8x8_t v29;
  float32x4_t v30;
  float32x4_t v31;
  float32x4_t v32;
  float32x4_t v33;
  float32x4_t v34;
  unsigned int v39;
  _BYTE v40[104];
  _QWORD v41[7];
  char v42;
  float32x4_t *v43;
  uint64_t v44;

  v44 = *MEMORY[0x24BDAC8D0];
  physx::Gu::getPCMConvexData(a2, a8, (uint64_t)v40);
  v41[4] = a5;
  v41[5] = a2 + 3;
  v41[6] = a2 + 6;
  v22 = &off_24ED91090;
  v42 = a8;
  if (a8)
    v22 = &off_24ED91040;
  v41[0] = v22;
  v43 = a2;
  v39 = 0;
  FullContactManifold = physx::Gu::generateFullContactManifold((float32x4_t *)a1, (uint64_t)v40, v41, a3, a6, (int *)&v39, a14, a12, a9, a10, a13, a15);
  if ((_DWORD)FullContactManifold)
  {
    if (v39)
    {
      physx::Gu::PersistentContactManifold::addBatchManifoldContacts2(a11, a6, v39);
LABEL_7:
      v24 = *(float32x4_t *)a5;
      v24.i32[3] = 0;
      v25 = (float32x2_t)vdupq_laneq_s32(*a5, 3).u64[0];
      v26 = vmulq_n_f32(*a12, vmla_f32((float32x2_t)0xBF000000BF000000, v25, v25).f32[0]);
      v26.i32[3] = 0;
      v27 = (float32x2_t)vextq_s8((int8x16_t)v24, (int8x16_t)v24, 8uLL).u64[0];
      v28 = (float32x2_t)vextq_s8(*(int8x16_t *)a12, *(int8x16_t *)a12, 8uLL).u64[0];
      v29 = (int8x8_t)vmls_f32(vmul_f32(*(float32x2_t *)a5->i8, (float32x2_t)vext_s8(*(int8x8_t *)a12->f32, (int8x8_t)v28, 4uLL)), (float32x2_t)vext_s8(*(int8x8_t *)a5->i8, (int8x8_t)v27, 4uLL), *(float32x2_t *)a12->f32);
      *(int8x8_t *)v30.f32 = vext_s8(v29, (int8x8_t)vmls_f32(vmul_f32(v27, *(float32x2_t *)a12->f32), *(float32x2_t *)a5->i8, v28), 4uLL);
      v30.i64[1] = v29.u32[0];
      v31 = vmlaq_laneq_f32(v26, v30, *(float32x4_t *)a5, 3);
      v31.i64[1] = vextq_s8((int8x16_t)v31, (int8x16_t)v31, 8uLL).u32[0];
      v32 = vmulq_f32(v24, *a12);
      v32.i64[0] = vpaddq_f32(v32, v32).u64[0];
      v33 = vmlaq_n_f32(v31, v24, vpadd_f32(*(float32x2_t *)v32.f32, *(float32x2_t *)v32.f32).f32[0]);
      v34 = vaddq_f32(v33, v33);
      v34.i32[3] = 0;
      *a12 = v34;
      physx::Gu::PersistentContactManifold::addManifoldContactsToContactBuffer(a11, a7, a12, a12, a4, (float32x2_t *)(a1 + 80), a14);
      return FullContactManifold;
    }
    if ((a15 & 1) == 0)
      goto LABEL_7;
  }
  return FullContactManifold;
}

BOOL physx::Gu::pcmContactCapsuleHeightField(uint64_t a1, float32x2_t *a2, float32x4_t *a3, uint64_t a4, int32x2_t *a5, float32x4_t **a6, uint64_t a7, double a8)
{
  float32x4_t *v9;
  int32x2_t v10;
  float32x4_t v11;
  float32x4_t v12;
  float32x4_t v13;
  float32x4_t v14;
  float32x4_t v15;
  float32x2_t v16;
  float32x4_t v17;
  float32x2_t v18;
  float32x2_t v19;
  int8x8_t v20;
  float32x4_t v21;
  float32x4_t v22;
  float32x4_t v23;
  float32x4_t v24;
  float32x4_t v25;
  float32x4_t v26;
  float32x4_t v27;
  float32x2_t v28;
  int8x8_t v29;
  float32x4_t v30;
  float32x4_t v31;
  float32x4_t v32;
  int8x16_t v33;
  float32x4_t v34;
  float32x2_t v39;
  float32x2_t v40;
  float32x4_t v41;
  float32x2_t v42;
  float32x2_t v43;
  float32x2_t v44;
  float32x2_t v45;
  float32x2_t v46;
  float32x2_t v47;
  float32x2_t v48;
  float32x2_t v49;
  float32x2_t v50;
  float32x2_t v51;
  float32x2_t v52;
  float32x4_t v53;
  __int128 v54;
  unsigned int v55;
  unsigned int v56;
  __int8 *v57;
  uint64_t v58;
  unsigned int v59;
  unsigned __int32 v64;
  unsigned __int8 v65;
  char *v66;
  __int8 v67;
  float v71;
  float v72;
  float v73;
  float v74;
  float v75;
  float v76;
  float v77;
  float v78;
  float v79;
  float v80;
  float v81;
  float v82;
  float v83;
  float v84;
  float v85;
  float v86;
  float v87;
  float v88;
  float v89;
  float v90;
  float v91;
  float v92;
  float v93;
  float v94;
  float v95;
  float v96;
  unsigned int v97;
  unsigned int v98;
  unsigned int v99;
  float v100;
  float v101;
  float v102;
  float v103;
  unsigned int v104;
  unsigned int v105;
  unsigned int v106;
  float32x4_t v107;
  float32x4_t v108;
  float v109;
  float v110;
  float v111;
  float v112;
  float v113;
  float v114;
  float v115;
  float v116;
  float v117;
  float v118;
  float v119;
  float v120;
  float v121;
  float v122;
  float v123;
  float v124;
  float v125;
  float v126;
  float v127;
  float v128;
  float v129;
  float v130;
  float v131;
  float v132;
  float v133;
  float v134;
  float v135;
  float v136;
  float v137;
  float v138;
  float v139;
  float v140;
  float v141;
  float v142;
  float v143;
  float v144;
  float v145;
  float v146;
  float v147;
  float v148;
  float v149;
  float v150;
  float v151;
  float v152;
  float v153;
  float v154;
  float v155;
  float v156;
  float v157;
  float v158;
  float v159;
  float v160;
  float v161;
  float v162;
  unsigned int v163;
  uint64_t v164;
  int v165;
  unsigned int v166;
  uint64_t v167;
  char *v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t *v171;
  int v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t i;
  float32x4_t *v177;
  int v178;
  uint64_t v179;
  uint64_t v180;
  float32x4_t *v181;
  float32x4_t v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t v187;
  unint64_t v188;
  unint64_t v189;
  unsigned int v190;
  unsigned int v191;
  unint64_t v192;
  float32x4_t v193;
  float32x4_t v194;
  __int128 *v195;
  __int128 v196;
  __int128 v197;
  __int128 v198;
  uint64_t v199;
  unsigned int v200;
  uint64_t v202;
  float v203;
  float v204;
  float v205;
  float v206;
  int32x2_t v207;
  float v208;
  float32x2_t v209;
  float32x2_t *v210;
  float32x2_t v211;
  float32x4_t v212[2];
  float32x4_t v213[2];
  float32x2_t v214;
  float32x2_t v215;
  float32x4_t v216;
  __int128 v217;
  _OWORD v218[128];
  uint64_t v219[38];
  uint64_t v220;
  uint64_t v221[9];
  uint64_t v222;
  unsigned int v223;
  unsigned int v224;
  float32x2_t v225;
  float32x2_t v226;
  float32x4_t *v227;
  float32x4_t v228;
  int v229;
  int v230;
  int v231;
  int v232;
  char v233;
  float32x4_t v234;
  float32x4_t v235;
  float32x2_t v236;
  uint64_t v237;

  v237 = *MEMORY[0x24BDAC8D0];
  v9 = *a6;
  LODWORD(a8) = *(_DWORD *)(a1 + 4);
  v10 = vdup_lane_s32(*(int32x2_t *)&a8, 0);
  v214 = (float32x2_t)vdup_lane_s32(*a5, 0);
  v215 = (float32x2_t)v10;
  v11.i64[0] = a3[1].i64[0];
  v11.i64[1] = a3[1].u32[2];
  v213[0] = *a3;
  v213[1] = v11;
  v12.i64[0] = *(_QWORD *)(a4 + 16);
  v12.i64[1] = *(unsigned int *)(a4 + 24);
  v212[0] = *(float32x4_t *)a4;
  v212[1] = v12;
  v13 = vnegq_f32(v212[0]);
  v14 = v13;
  v14.i32[3] = 0;
  v15 = vsubq_f32(v11, v12);
  v16 = (float32x2_t)vdupq_laneq_s32((int32x4_t)v212[0], 3).u64[0];
  v17 = vmulq_n_f32(v15, vmla_f32((float32x2_t)0xBF000000BF000000, v16, v16).f32[0]);
  v17.i32[3] = 0;
  v18 = (float32x2_t)vextq_s8((int8x16_t)v14, (int8x16_t)v14, 8uLL).u64[0];
  v19 = (float32x2_t)vext_s8(*(int8x8_t *)v13.f32, (int8x8_t)v18, 4uLL);
  v20 = (int8x8_t)vmls_f32(vmul_f32(*(float32x2_t *)v13.f32, (float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v15, (int8x16_t)v15, 4uLL)), v19, *(float32x2_t *)v15.f32);
  *(int8x8_t *)v21.f32 = vext_s8(v20, (int8x8_t)vmls_f32(vmul_f32(v18, *(float32x2_t *)v15.f32), *(float32x2_t *)v13.f32, (float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v15, (int8x16_t)v15, 8uLL)), 4uLL);
  v21.i64[1] = v20.u32[0];
  v22 = vmlaq_laneq_f32(v17, v21, v212[0], 3);
  v22.i64[1] = vextq_s8((int8x16_t)v22, (int8x16_t)v22, 8uLL).u32[0];
  v23 = vmulq_f32(v14, v15);
  v23.i64[0] = vpaddq_f32(v23, v23).u64[0];
  v24 = vmlaq_n_f32(v22, v14, vpadd_f32(*(float32x2_t *)v23.f32, *(float32x2_t *)v23.f32).f32[0]);
  v25 = vaddq_f32(v24, v24);
  v25.i32[3] = 0;
  v26 = v213[0];
  v26.i32[3] = 0;
  v27 = vmulq_f32(v26, v14);
  v27.i64[0] = vpaddq_f32(v27, v27).u64[0];
  v28 = vsub_f32(vmul_f32((float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v213[0], (int8x16_t)v213[0], 8uLL), (float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v212[0], (int8x16_t)v212[0], 8uLL)), vpadd_f32(*(float32x2_t *)v27.f32, *(float32x2_t *)v27.f32));
  v27.i64[0] = vextq_s8((int8x16_t)v26, (int8x16_t)v26, 8uLL).u64[0];
  v29 = (int8x8_t)vmls_f32(vmul_f32((float32x2_t)vext_s8(*(int8x8_t *)v213[0].f32, *(int8x8_t *)v27.f32, 4uLL), *(float32x2_t *)v13.f32), v19, *(float32x2_t *)v213[0].f32);
  *(int8x8_t *)v30.f32 = vext_s8(v29, (int8x8_t)vmls_f32(vmul_f32(*(float32x2_t *)v213[0].f32, v18), *(float32x2_t *)v13.f32, *(float32x2_t *)v27.f32), 4uLL);
  *(int8x8_t *)&v30.u32[2] = v29;
  v31 = vaddq_f32(vaddq_f32(vmulq_laneq_f32(v14, v213[0], 3), vmulq_laneq_f32(v26, v212[0], 3)), v30);
  v32 = v31;
  v32.i32[3] = v28.i32[1];
  v211 = vmul_n_f32((float32x2_t)vdup_n_s32(0x3A83126Fu), *(float *)&a8);
  v33 = (int8x16_t)vabdq_f32(v25, v9[1]);
  *(float32x2_t *)v33.i8 = vpmax_f32((float32x2_t)*(_OWORD *)&vextq_s8(v33, v33, 8uLL), *(float32x2_t *)v33.i8);
  v34 = vmulq_f32(v32, *v9);
  v34.i64[0] = vpaddq_f32(v34, v34).u64[0];
  __asm { FMOV            V5.2S, #1.0 }
  if (vuzp1_s8((int8x8_t)vdup_lane_s16((int16x4_t)vorr_s8((int8x8_t)vcgt_f32((float32x2_t)vdup_n_s32(0x3F7FF2E5u), vpadd_f32(*(float32x2_t *)v34.f32, *(float32x2_t *)v34.f32)), (int8x8_t)vcgt_f32(vpmax_f32(*(float32x2_t *)v33.i8, *(float32x2_t *)v33.i8), vmul_n_f32((float32x2_t)vdup_n_s32(0x3CA3D70Au), *(float *)&a8))), 0), *(int8x8_t *)&a8).u32[0] == -1)
  {
    v9[3].i8[14] = 0;
    *v9 = v32;
    v9[1] = v25;
    v209 = a2[1];
    v210 = a2;
    v71 = a2[3].f32[0];
    v207 = vrev64_s32((int32x2_t)vdiv_f32(_D5, a2[2]));
    v208 = 1.0 / v71;
    v72 = a3->f32[0];
    v73 = a3->f32[1];
    v74 = v72 + v72;
    v76 = a3->f32[2];
    v75 = a3->f32[3];
    v77 = v75 + v75;
    v78 = (float)((float)(v75 * (float)(v75 + v75)) + -1.0) + (float)(v72 * (float)(v72 + v72));
    v79 = (float)(v74 * v73) + (float)(v76 * (float)(v75 + v75));
    v80 = (float)(v74 * v76) - (float)(v73 * v77);
    v81 = *(float *)(a1 + 8);
    v82 = v78 * v81;
    v83 = v81 * v79;
    v84 = v80 * v81;
    v85 = *(float *)(a1 + 4) + *(float *)a5->i32;
    v86 = a3[1].f32[0] - *(float *)(a4 + 16);
    v87 = a3[1].f32[1] - *(float *)(a4 + 20);
    v88 = a3[1].f32[2] - *(float *)(a4 + 24);
    v89 = v86 + v86;
    v90 = v87 + v87;
    v91 = v88 + v88;
    v93 = *(float *)(a4 + 8);
    v92 = *(float *)(a4 + 12);
    v94 = (float)(v92 * v92) + -0.5;
    v95 = *(float *)(a4 + 4);
    v96 = (float)((float)(v90 * v95) + (float)(*(float *)a4 * v89)) + (float)(v93 * v91);
    *(float *)&v97 = (float)((float)(v89 * v94) - (float)((float)((float)(v95 * v91) - (float)(v93 * v90)) * v92))
                   + (float)(*(float *)a4 * v96);
    *(float *)&v98 = (float)((float)(v90 * v94)
                           - (float)((float)((float)(v93 * v89) - (float)(*(float *)a4 * v91)) * v92))
                   + (float)(v95 * v96);
    *(float *)&v99 = (float)((float)(v91 * v94)
                           - (float)((float)((float)(*(float *)a4 * v90) - (float)(v95 * v89)) * v92))
                   + (float)(v93 * v96);
    v100 = v82 + v82;
    v101 = v83 + v83;
    v102 = v84 + v84;
    v103 = (float)((float)(v101 * v95) + (float)(*(float *)a4 * v100)) + (float)(v93 * v102);
    *(float *)&v104 = (float)((float)(v100 * v94) - (float)((float)((float)(v95 * v102) - (float)(v93 * v101)) * v92))
                    + (float)(*(float *)a4 * v103);
    *(float *)&v105 = (float)((float)(v101 * v94)
                            - (float)((float)((float)(v93 * v100) - (float)(*(float *)a4 * v102)) * v92))
                    + (float)(v95 * v103);
    *(float *)&v106 = (float)((float)(v102 * v94)
                            - (float)((float)((float)(*(float *)a4 * v101) - (float)(v95 * v100)) * v92))
                    + (float)(v93 * v103);
    v107.i64[0] = __PAIR64__(v98, v97);
    v107.i64[1] = v99;
    v108.i64[0] = __PAIR64__(v105, v104);
    v108.i64[1] = v106;
    v232 = 4;
    v228 = v107;
    v236 = (float32x2_t)v10;
    v234 = vaddq_f32(v107, v108);
    v235 = vsubq_f32(v107, v108);
    v229 = LODWORD(a8);
    v230 = LODWORD(a8);
    v231 = LODWORD(a8);
    v233 = 1;
    v216.i64[1] = (uint64_t)&v207;
    *(_QWORD *)&v217 = a4;
    (*(void (**)(uint64_t *__return_ptr))(**(_QWORD **)&v209 + 104))(&v202);
    BYTE8(v217) = (v202 & 1) == 0;
    v216.i64[0] = (uint64_t)&off_24ED92600;
    physx::Gu::PCMMeshContactGeneration::PCMMeshContactGeneration((unint64_t)v218, &v214, &v211, v213, v212, (uint64_t)v9, a7, 0, 0);
    v227 = &v228;
    v225 = vadd_f32(v236, v214);
    v226 = vmul_f32(v225, v225);
    v109 = v85 + *(float *)(a1 + 8);
    v110 = *(float *)(a4 + 4);
    v111 = *(float *)(a4 + 8);
    v112 = *(float *)(a4 + 12);
    v113 = a3[1].f32[0] - *(float *)(a4 + 16);
    v114 = a3[1].f32[1] - *(float *)(a4 + 20);
    v115 = a3[1].f32[2] - *(float *)(a4 + 24);
    v116 = v113 + v113;
    v117 = v114 + v114;
    v118 = v115 + v115;
    v119 = (float)(v112 * v112) + -0.5;
    v120 = (float)((float)-(float)(v110 * v117) - (float)(*(float *)a4 * v116)) - (float)(v111 * v118);
    v121 = (float)((float)(v112 * (float)((float)(v111 * v117) - (float)(v110 * v118))) + (float)(v116 * v119))
         - (float)(*(float *)a4 * v120);
    v122 = (float)((float)(v112 * (float)((float)(*(float *)a4 * v118) - (float)(v111 * v116))) + (float)(v117 * v119))
         - (float)(v110 * v120);
    v123 = (float)((float)(v112 * (float)((float)(v110 * v116) - (float)(*(float *)a4 * v117))) + (float)(v118 * v119))
         - (float)(v111 * v120);
    v125 = a3->f32[2];
    v124 = a3->f32[3];
    v126 = a3->f32[1];
    v127 = (float)((float)((float)(v112 * a3->f32[0]) - (float)(*(float *)a4 * v124)) - (float)(v110 * v125))
         + (float)(v126 * v111);
    v128 = (float)((float)((float)(v112 * v126) - (float)(v110 * v124)) - (float)(v111 * a3->f32[0]))
         + (float)(v125 * *(float *)a4);
    v129 = (float)((float)((float)(v112 * v125) - (float)(v111 * v124)) - (float)(*(float *)a4 * v126))
         + (float)(a3->f32[0] * v110);
    v130 = (float)((float)((float)(*(float *)a4 * a3->f32[0]) + (float)(v112 * v124)) + (float)(v110 * v126))
         + (float)(v111 * v125);
    v131 = (float)((float)(v109 - v109) * 0.5) + (float)((float)(v109 - v109) * 0.5);
    v132 = (float)((float)(v85 - v85) * 0.5) + (float)((float)(v85 - v85) * 0.5);
    v133 = (float)(v130 * v130) + -0.5;
    v134 = (float)((float)(v132 * v128) + (float)(v127 * v131)) + (float)(v129 * v132);
    v135 = (float)((float)(v130 * (float)((float)(v128 * v132) - (float)(v129 * v132))) + (float)(v131 * v133))
         + (float)(v127 * v134);
    v136 = (float)((float)(v130 * (float)((float)(v129 * v131) - (float)(v127 * v132))) + (float)(v132 * v133))
         + (float)(v128 * v134);
    v137 = (float)((float)(v130 * (float)((float)(v127 * v132) - (float)(v128 * v131))) + (float)(v132 * v133))
         + (float)(v129 * v134);
    v138 = v121 + v135;
    v139 = v122 + v136;
    v140 = v123 + v137;
    v141 = v128 + v128;
    v142 = v129 + v129;
    v143 = v128 * (float)(v128 + v128);
    v144 = v129 * (float)(v129 + v129);
    v145 = (float)(v127 + v127) * v128;
    v146 = v129 * (float)(v127 + v127);
    v147 = v130 * (float)(v127 + v127);
    v148 = v129 * v141;
    v149 = v130 * v141;
    v150 = v130 * v142;
    v151 = (float)(1.0 - v143) - v144;
    v152 = 1.0 - (float)(v127 * (float)(v127 + v127));
    v153 = v152 - v144;
    v154 = v152 - v143;
    v155 = (float)(v109 + v109) * 0.5;
    v156 = (float)(v85 + v85) * 0.5;
    v157 = v155 * (float)(v145 + v150);
    v158 = v156 * (float)(v145 - v150);
    v159 = v156 * (float)(v147 + v148);
    v160 = fabsf(v156 * (float)(v146 + v149)) + (float)(fabsf(v158) + fabsf(v155 * v151));
    v161 = fabsf(v156 * (float)(v148 - v147)) + (float)(fabsf(v157) + fabsf(v156 * v153));
    v162 = fabsf(v156 * v154) + (float)(fabsf(v155 * (float)(v146 - v149)) + fabsf(v159));
    *(float *)&v202 = v138 - v160;
    *((float *)&v202 + 1) = v139 - v161;
    v203 = v140 - v162;
    v204 = v138 + v160;
    v205 = v139 + v161;
    v206 = v140 + v162;
    physx::Gu::HeightFieldUtil::overlapAABBTriangles((uint64_t)&v207, (float *)a4, (float *)&v202, 0, (uint64_t)&v216);
    v163 = v223;
    if (v223)
    {
      v164 = v224;
      if (v224 >= 2)
      {
        v165 = 0;
        v166 = -1;
        v167 = 1;
        do
        {
          v168 = (char *)v218 + 8 * v167;
          v169 = *((_QWORD *)v168 + 255);
          v170 = *((_QWORD *)v168 + 256);
          if (COERCE_FLOAT(*(_QWORD *)(v169 + 40)) > COERCE_FLOAT(*(_QWORD *)(v170 + 40)))
          {
            *((_QWORD *)v168 + 255) = v170;
            *((_QWORD *)v168 + 256) = v169;
            if ((int)v167 - 2 >= 0)
            {
              v171 = &v219[v166 + 1];
              v172 = v165;
              do
              {
                v174 = *(v171 - 1);
                v173 = *v171;
                if (COERCE_FLOAT(*(_QWORD *)(*v171 + 40)) >= COERCE_FLOAT(*(_QWORD *)(v174 + 40)))
                  break;
                *v171 = v174;
                *--v171 = v173;
                --v172;
              }
              while (v172 > 0);
            }
          }
          ++v167;
          ++v166;
          ++v165;
        }
        while (v167 != v164);
      }
      if ((_DWORD)v164)
      {
        v175 = 0;
        for (i = 0; i != v164; ++i)
        {
          v177 = (float32x4_t *)v219[i];
          v177[1].i64[1] = (uint64_t)v177;
          v177[2].i64[0] = (uint64_t)v177;
          v178 = v177[3].i32[1] - v177[3].i32[0];
          v177[3].i32[2] = v178;
          v177[1].i64[0] = 0;
          v179 = v175;
          while (v179)
          {
            v180 = *(_QWORD *)((char *)&v218[127] + v179 + 8);
            v181 = *(float32x4_t **)(v180 + 32);
            v182 = vmulq_f32(*v177, *v181);
            v182.i64[0] = vpaddq_f32(v182, v182).u64[0];
            v179 -= 8;
            if (vpadd_f32(*(float32x2_t *)v182.f32, *(float32x2_t *)v182.f32).f32[0] >= *(float *)&v220)
            {
              *(_QWORD *)(v180 + 16) = v177;
              v181[1].i64[1] = (uint64_t)v177;
              v177[2].i64[0] = (uint64_t)v181;
              *(_DWORD *)(*(_QWORD *)(v180 + 32) + 56) += v178;
              break;
            }
          }
          v175 += 8;
        }
        v183 = 0;
        v184 = v222;
        do
        {
          v185 = v219[v183];
          if (v185)
            _ZF = *(_QWORD *)(v185 + 32) == v185;
          else
            _ZF = 0;
          if (_ZF)
          {
            while (*(_QWORD *)(v185 + 16))
            {
              v187 = v185;
              v185 = *(_QWORD *)(v185 + 16);
              v188 = *(unsigned int *)(v187 + 48);
              v189 = *(unsigned int *)(v187 + 52);
              if (v188 < v189)
              {
                v190 = *(_DWORD *)(v185 + 52);
                do
                {
                  v191 = *(_DWORD *)(v185 + 48);
                  if (v191 < v190)
                  {
                    do
                    {
                      v192 = v184 + ((unint64_t)v191 << 6);
                      v193 = vsubq_f32(*(float32x4_t *)(v192 + 16), *(float32x4_t *)(v184 + (v188 << 6) + 16));
                      v194 = vmulq_f32(v193, v193);
                      v194.i64[0] = vpaddq_f32(v194, v194).u64[0];
                      if (*(float *)v221 > vpadd_f32(*(float32x2_t *)v194.f32, *(float32x2_t *)v194.f32).f32[0])
                      {
                        v195 = (__int128 *)(v184 + ((unint64_t)(v190 - 1) << 6));
                        v196 = *v195;
                        v197 = v195[1];
                        v198 = v195[2];
                        *(_DWORD *)(v192 + 48) = *((_DWORD *)v195 + 12);
                        *(_OWORD *)(v192 + 16) = v197;
                        *(_OWORD *)(v192 + 32) = v198;
                        *(_OWORD *)v192 = v196;
                        v190 = *(_DWORD *)(v185 + 52) - 1;
                        *(_DWORD *)(v185 + 52) = v190;
                        --v191;
                      }
                      ++v191;
                    }
                    while (v191 < v190);
                    v189 = *(unsigned int *)(v187 + 52);
                  }
                  ++v188;
                }
                while (v188 < v189);
              }
            }
          }
          ++v183;
        }
        while (v183 != v164);
        v199 = v222;
        v163 = v223;
        v200 = v224;
      }
      else
      {
        v200 = 0;
        v199 = v222;
      }
      physx::Gu::MultiplePersistentContactManifold::addManifoldContactPoints(v219[36], v199, v163, v219, v200, (uint64_t)v221, &v220, 3);
    }
  }
  else
  {
    v39 = (float32x2_t)vdup_lane_s32(*(int32x2_t *)v31.f32, 1);
    v40 = (float32x2_t)vdup_laneq_s32((int32x4_t)v31, 2);
    v41 = vaddq_f32(v31, v31);
    v42 = (float32x2_t)vdup_lane_s32(*(int32x2_t *)v41.f32, 1);
    v43 = (float32x2_t)vdup_laneq_s32((int32x4_t)v41, 2);
    v44 = vmul_lane_f32(v39, *(float32x2_t *)v41.f32, 1);
    v45 = vmul_laneq_f32(v40, v41, 2);
    v46 = vmul_n_f32(v39, v41.f32[0]);
    v47 = vmul_n_f32(v40, v41.f32[0]);
    v48 = vmul_lane_f32(v40, *(float32x2_t *)v41.f32, 1);
    v49 = (float32x2_t)vdup_lane_s32((int32x2_t)vmul_f32(*(float32x2_t *)v31.f32, *(float32x2_t *)v41.f32), 0);
    *(float32x2_t *)v41.f32 = vmul_lane_f32((float32x2_t)vdup_lane_s32(*(int32x2_t *)v41.f32, 0), v28, 1);
    v50 = vmul_lane_f32(v42, v28, 1);
    v51 = vmul_lane_f32(v43, v28, 1);
    v52 = vsub_f32(_D5, v49);
    *(int8x8_t *)v53.f32 = vext_s8((int8x8_t)vsub_f32(vsub_f32(_D5, v44), v45), (int8x8_t)vadd_f32(v46, v51), 4uLL);
    v53.i64[1] = vsub_f32(v47, v50).u32[0];
    *(int8x8_t *)&v54 = vext_s8((int8x8_t)vsub_f32(v46, v51), (int8x8_t)vsub_f32(v52, v45), 4uLL);
    *((_QWORD *)&v54 + 1) = vadd_f32(v48, *(float32x2_t *)v41.f32).u32[0];
    v216 = v53;
    v217 = v54;
    *(int8x8_t *)&v54 = vext_s8((int8x8_t)vadd_f32(v47, v50), (int8x8_t)vsub_f32(v48, *(float32x2_t *)v41.f32), 4uLL);
    *((_QWORD *)&v54 + 1) = vsub_f32(v52, v44).u32[0];
    v218[0] = v54;
    v218[1] = v25;
    *(float32x2_t *)v228.f32 = vmul_n_f32((float32x2_t)vdup_n_s32(0x3D4CCCCDu), *(float *)&a8);
    v55 = v9[3].u8[14];
    if (v9[3].i8[14])
    {
      v56 = 0;
      do
      {
        v57 = &v9[3].i8[v56 + 8];
        v58 = *v57;
        v59 = v55 - 2;
        if (v56 < v59)
          v59 = v56;
        _X8 = (uint64_t)&v9[25 * v9[3].u8[v59 + 9] + 4];
        __asm
        {
          PRFM            #0, [X8]
          PRFM            #0, [X8,#0x80]
          PRFM            #0, [X8,#0x100]
        }
        v64 = physx::Gu::SinglePersistentContactManifold::refreshContactPoints((uint64_t)&v9[25 * *v57 + 4], &v216, (float32x2_t *)&v228).u32[0];
        if (v9[25 * v58 + 28].i32[0])
        {
          v9[2].i32[v58] = v64;
        }
        else
        {
          v65 = v9[3].i8[14] - 1;
          v9[3].i8[14] = v65;
          v66 = (char *)v9 + v65;
          v67 = v66[56];
          v66[56] = v58;
          *v57 = v67;
          --v56;
        }
        ++v56;
        v55 = v9[3].u8[14];
      }
      while (v56 < v55);
    }
  }
  return physx::Gu::MultiplePersistentContactManifold::addManifoldContactsToContactBuffer((uint64_t)v9, a7, v213, (int32x4_t *)v212, &v215);
}

BOOL physx::Gu::pcmContactCapsuleMesh(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  float32x4_t *v3;
  float32x4_t *v4;
  int32x2_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  float32x4_t **v9;
  float32x4_t *v10;
  int32x2_t v11;
  float32x4_t v12;
  float32x4_t v13;
  float32x4_t v14;
  float32x4_t v15;
  float32x4_t v16;
  float32x2_t v17;
  float32x4_t v18;
  float32x2_t v19;
  float32x2_t v20;
  int8x8_t v21;
  float32x4_t v22;
  float32x4_t v23;
  float32x4_t v24;
  float32x4_t v25;
  float32x4_t v26;
  float32x4_t v27;
  float32x4_t v28;
  float32x2_t v29;
  float32x4_t v30;
  float32x4_t v31;
  float32x4_t v32;
  int8x16_t v33;
  float32x4_t v34;
  float32x2_t v35;
  float32x2_t v36;
  float32x4_t v37;
  float32x2_t v38;
  float32x2_t v39;
  float32x2_t v40;
  float32x2_t v41;
  float32x2_t v42;
  float32x2_t v43;
  float32x2_t v44;
  float32x2_t v45;
  float32x2_t v46;
  float32x2_t v51;
  float32x4_t v52;
  __int128 v53;
  unsigned int v54;
  unsigned int v55;
  __int8 *v56;
  uint64_t v57;
  unsigned int v58;
  unsigned __int32 v63;
  unsigned __int8 v64;
  char *v65;
  __int8 v66;
  uint64_t v67;
  float *v68;
  float *v69;
  float *v70;
  uint64_t v71;
  uint64_t v72;
  float *v73;
  float v74;
  BOOL v75;
  float v76;
  float v77;
  BOOL v78;
  float v79;
  float v80;
  float v81;
  float v82;
  float v83;
  float v84;
  float v85;
  float v86;
  float v87;
  float v88;
  float v89;
  float v90;
  float v91;
  float v92;
  float v93;
  float v94;
  float v95;
  float v96;
  float v97;
  float v98;
  float v99;
  float v100;
  float v101;
  float v102;
  float v103;
  float v104;
  float v105;
  float v106;
  float v107;
  float v108;
  float v109;
  float v110;
  float v111;
  float v112;
  float v113;
  float v114;
  float v115;
  float v116;
  float v117;
  float v118;
  float v119;
  float v120;
  float v121;
  float v122;
  unsigned int v123;
  unsigned int v124;
  unsigned int v125;
  float v126;
  float v127;
  float v128;
  float v129;
  unsigned int v130;
  unsigned int v131;
  unsigned int v132;
  float32x4_t v133;
  float32x4_t v134;
  float v135;
  uint64_t v136;
  uint64_t v137;
  __n128 v138;
  unsigned int v139;
  uint64_t v140;
  int v141;
  unsigned int v142;
  uint64_t v143;
  _QWORD *v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t *v147;
  int v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t i;
  float32x4_t *v153;
  int v154;
  uint64_t v155;
  uint64_t v156;
  float32x4_t *v157;
  float32x4_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v163;
  unint64_t v164;
  unint64_t v165;
  unsigned int v166;
  unsigned int v167;
  unint64_t v168;
  float32x4_t v169;
  float32x4_t v170;
  __int128 *v171;
  __int128 v172;
  __int128 v173;
  __int128 v174;
  uint64_t v175;
  unsigned int v176;
  float v178[9];
  float v179;
  float v180;
  _DWORD v181[7];
  _OWORD v182[4];
  uint64_t v183;
  char v184;
  float32x2_t v185;
  int32x4_t v186[2];
  int8x16_t v187[2];
  float32x2_t v188;
  int32x2_t v189;
  float32x4_t v190;
  __int128 v191;
  _OWORD v192[53];
  int v193;
  _QWORD v194[256];
  uint64_t v195[38];
  uint64_t v196;
  uint64_t v197[9];
  uint64_t v198;
  unsigned int v199;
  unsigned int v200;
  float32x2_t v201;
  float32x2_t v202;
  float32x4_t *v203;
  float32x4_t v204;
  int32x2_t v205;
  __int32 v206;
  int v207;
  char v208;
  float32x4_t v209;
  float32x4_t v210;
  float32x2_t v211;
  uint64_t v212;

  MEMORY[0x24BDAC7A8](a1);
  v8 = v7;
  v212 = *MEMORY[0x24BDAC8D0];
  v10 = *v9;
  v11 = *(int32x2_t *)(v1 + 4);
  v188 = (float32x2_t)vdup_lane_s32(*v5, 0);
  v189 = vdup_lane_s32(v11, 0);
  v12.i64[0] = v3[1].i64[0];
  v12.i64[1] = v3[1].u32[2];
  v187[0] = *(int8x16_t *)v3;
  v187[1] = (int8x16_t)v12;
  v13.i64[0] = v4[1].i64[0];
  v13.i64[1] = v4[1].u32[2];
  v186[0] = *(int32x4_t *)v4;
  v186[1] = (int32x4_t)v13;
  v14 = vnegq_f32((float32x4_t)v186[0]);
  v15 = v14;
  v15.i32[3] = 0;
  v16 = vsubq_f32(v12, v13);
  v17 = (float32x2_t)vdupq_laneq_s32(v186[0], 3).u64[0];
  v18 = vmulq_n_f32(v16, vmla_f32((float32x2_t)0xBF000000BF000000, v17, v17).f32[0]);
  v18.i32[3] = 0;
  v19 = (float32x2_t)vextq_s8((int8x16_t)v15, (int8x16_t)v15, 8uLL).u64[0];
  v20 = (float32x2_t)vext_s8(*(int8x8_t *)v14.f32, (int8x8_t)v19, 4uLL);
  v21 = (int8x8_t)vmls_f32(vmul_f32(*(float32x2_t *)v14.f32, (float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v16, (int8x16_t)v16, 4uLL)), v20, *(float32x2_t *)v16.f32);
  *(int8x8_t *)v22.f32 = vext_s8(v21, (int8x8_t)vmls_f32(vmul_f32(v19, *(float32x2_t *)v16.f32), *(float32x2_t *)v14.f32, (float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v16, (int8x16_t)v16, 8uLL)), 4uLL);
  v22.i64[1] = v21.u32[0];
  v23 = vmlaq_laneq_f32(v18, v22, (float32x4_t)v186[0], 3);
  v23.i64[1] = vextq_s8((int8x16_t)v23, (int8x16_t)v23, 8uLL).u32[0];
  v24 = vmulq_f32(v15, v16);
  v24.i64[0] = vpaddq_f32(v24, v24).u64[0];
  v25 = vmlaq_n_f32(v23, v15, vpadd_f32(*(float32x2_t *)v24.f32, *(float32x2_t *)v24.f32).f32[0]);
  v26 = vaddq_f32(v25, v25);
  v26.i32[3] = 0;
  v27 = (float32x4_t)v187[0];
  v27.i32[3] = 0;
  v28 = vmulq_f32(v27, v15);
  v28.i64[0] = vpaddq_f32(v28, v28).u64[0];
  v29 = vsub_f32(vmul_f32((float32x2_t)*(_OWORD *)&vextq_s8(v187[0], v187[0], 8uLL), (float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v186[0], (int8x16_t)v186[0], 8uLL)), vpadd_f32(*(float32x2_t *)v28.f32, *(float32x2_t *)v28.f32));
  v28.i64[0] = vextq_s8((int8x16_t)v27, (int8x16_t)v27, 8uLL).u64[0];
  *(float32x2_t *)v22.f32 = vmls_f32(vmul_f32((float32x2_t)vext_s8(*(int8x8_t *)v187[0].i8, *(int8x8_t *)v28.f32, 4uLL), *(float32x2_t *)v14.f32), v20, *(float32x2_t *)v187[0].i8);
  *(int8x8_t *)v30.f32 = vext_s8(*(int8x8_t *)v22.f32, (int8x8_t)vmls_f32(vmul_f32(*(float32x2_t *)v187[0].i8, v19), *(float32x2_t *)v14.f32, *(float32x2_t *)v28.f32), 4uLL);
  v30.i64[1] = v22.i64[0];
  v31 = vaddq_f32(vaddq_f32(vmulq_laneq_f32(v15, (float32x4_t)v187[0], 3), vmulq_laneq_f32(v27, (float32x4_t)v186[0], 3)), v30);
  v32 = v31;
  v32.i32[3] = v29.i32[1];
  v33 = (int8x16_t)vabdq_f32(v26, v10[1]);
  *(float32x2_t *)v33.i8 = vpmax_f32((float32x2_t)*(_OWORD *)&vextq_s8(v33, v33, 8uLL), *(float32x2_t *)v33.i8);
  v34 = vmulq_f32(v32, *v10);
  v34.i64[0] = vpaddq_f32(v34, v34).u64[0];
  if (vuzp1_s8((int8x8_t)vdup_lane_s16((int16x4_t)vorr_s8((int8x8_t)vcgt_f32((float32x2_t)vdup_n_s32(0x3F7FF2E5u), vpadd_f32(*(float32x2_t *)v34.f32, *(float32x2_t *)v34.f32)), (int8x8_t)vcgt_f32(vpmax_f32(*(float32x2_t *)v33.i8, *(float32x2_t *)v33.i8), vmul_n_f32((float32x2_t)vdup_n_s32(0x3CA3D70Au), *(float *)v11.i32))), 0), (int8x8_t)v11).u32[0] == -1)
  {
    v67 = v6;
    v68 = (float *)v5;
    v69 = (float *)v4;
    v70 = (float *)v3;
    v71 = v2;
    v72 = v1;
    v185 = vmul_n_f32((float32x2_t)vdup_n_s32(0x3A83126Fu), *(float *)v11.i32);
    v182[0] = xmmword_2260E5F10;
    v182[1] = xmmword_2260E5F10;
    v182[2] = xmmword_2260FD430;
    v182[3] = xmmword_2260E5F20;
    v183 = 0x3F80000000000000;
    v74 = *(float *)(v2 + 4);
    v73 = (float *)(v2 + 4);
    v75 = v74 == 1.0;
    v76 = v73[1];
    v77 = v73[2];
    v184 = 0;
    if (v76 != 1.0)
      v75 = 0;
    v78 = v77 == 1.0 && v75;
    if (!v78)
      physx::Cm::FastVertex2ShapeScaling::init((uint64_t)v182, v73, (float *)(v71 + 16));
    v79 = *v70;
    v80 = v70[1];
    v82 = v70[2];
    v81 = v70[3];
    v83 = v81 + v81;
    v84 = (float)((float)(v81 * (float)(v81 + v81)) + -1.0) + (float)(v79 * (float)(v79 + v79));
    v85 = (float)((float)(v79 + v79) * v80) + (float)(v82 * v83);
    v86 = (float)((float)(v79 + v79) * v82) - (float)(v80 * v83);
    v87 = *(float *)(v72 + 4);
    v88 = *(float *)(v72 + 8);
    v89 = v84 * v88;
    v90 = v88 * v85;
    v91 = v86 * v88;
    v92 = v70[4];
    v93 = v70[5];
    v94 = v70[6];
    v95 = v69[4];
    v96 = v69[5];
    v97 = v69[6];
    v98 = (float)((float)(v92 + v89) - v95) + (float)((float)(v92 + v89) - v95);
    v99 = (float)((float)(v93 + v90) - v96) + (float)((float)(v93 + v90) - v96);
    v100 = (float)((float)(v91 + v94) - v97) + (float)((float)(v91 + v94) - v97);
    v101 = v69[2];
    v102 = v69[3];
    v103 = (float)(v102 * v102) + -0.5;
    v104 = v69[1];
    v105 = (float)((float)(v99 * v104) + (float)(*v69 * v98)) + (float)(v101 * v100);
    v106 = (float)((float)(v98 * v103) - (float)((float)((float)(v104 * v100) - (float)(v101 * v99)) * v102))
         + (float)(*v69 * v105);
    v107 = (float)((float)(v99 * v103) - (float)((float)((float)(v101 * v98) - (float)(*v69 * v100)) * v102))
         + (float)(v104 * v105);
    v108 = (float)((float)(v100 * v103) - (float)((float)((float)(*v69 * v99) - (float)(v104 * v98)) * v102))
         + (float)(v101 * v105);
    v109 = (float)((float)(v92 - v89) - v95) + (float)((float)(v92 - v89) - v95);
    v110 = (float)((float)(v93 - v90) - v96) + (float)((float)(v93 - v90) - v96);
    v111 = (float)((float)(v94 - v91) - v97) + (float)((float)(v94 - v91) - v97);
    v112 = (float)(v110 * v104) + (float)(*v69 * v109);
    v113 = (float)(v109 * v103) - (float)((float)((float)(v104 * v111) - (float)(v101 * v110)) * v102);
    v114 = (float)(v110 * v103) - (float)((float)((float)(v101 * v109) - (float)(*v69 * v111)) * v102);
    v115 = (float)(*v69 * v110) - (float)(v104 * v109);
    v116 = v112 + (float)(v101 * v111);
    v117 = v113 + (float)(*v69 * v116);
    v118 = (float)(v111 * v103) - (float)(v115 * v102);
    v119 = (float)(v92 - v95) + (float)(v92 - v95);
    v120 = (float)(v93 - v96) + (float)(v93 - v96);
    v121 = (float)(v94 - v97) + (float)(v94 - v97);
    v122 = (float)((float)(v120 * v104) + (float)(*v69 * v119)) + (float)(v101 * v121);
    *(float *)&v123 = (float)((float)(v119 * v103) - (float)((float)((float)(v104 * v121) - (float)(v101 * v120)) * v102))
                    + (float)(*v69 * v122);
    *(float *)&v124 = (float)((float)(v120 * v103) - (float)((float)((float)(v101 * v119) - (float)(*v69 * v121)) * v102))
                    + (float)(v104 * v122);
    *(float *)&v125 = (float)((float)(v121 * v103) - (float)((float)((float)(*v69 * v120) - (float)(v104 * v119)) * v102))
                    + (float)(v101 * v122);
    v126 = v89 + v89;
    v127 = v90 + v90;
    v128 = v91 + v91;
    v129 = (float)((float)(v127 * v104) + (float)(*v69 * v126)) + (float)(v101 * v128);
    *(float *)&v130 = (float)((float)(v126 * v103) - (float)((float)((float)(v104 * v128) - (float)(v101 * v127)) * v102))
                    + (float)(*v69 * v129);
    *(float *)&v131 = (float)((float)(v127 * v103) - (float)((float)((float)(v101 * v126) - (float)(*v69 * v128)) * v102))
                    + (float)(v104 * v129);
    *(float *)&v132 = (float)((float)(v128 * v103) - (float)((float)((float)(*v69 * v127) - (float)(v104 * v126)) * v102))
                    + (float)(v101 * v129);
    v133.i64[0] = __PAIR64__(v124, v123);
    v133.i64[1] = v125;
    v134.i64[0] = __PAIR64__(v131, v130);
    v134.i64[1] = v132;
    v135 = *v68;
    v207 = 4;
    v204 = v133;
    v211 = (float32x2_t)v189;
    v209 = vaddq_f32(v133, v134);
    v210 = vsubq_f32(v133, v134);
    v205 = vdup_lane_s32(v189, 0);
    v206 = v189.i32[0];
    v208 = 1;
    *(float *)v181 = v106;
    *(float *)&v181[1] = v107;
    *(float *)&v181[2] = v108;
    *(float *)&v181[3] = v117;
    *(float *)&v181[4] = v114 + (float)(v104 * v116);
    *(float *)&v181[5] = v118 + (float)(v101 * v116);
    *(float *)&v181[6] = v87 + v135;
    v136 = *(_QWORD *)(v71 + 48);
    v10[3].i8[14] = 0;
    *v10 = v32;
    v10[1] = v26;
    v137 = *(_QWORD *)(v136 + 80);
    v190.i32[2] = 2;
    *(_QWORD *)&v191 = v182;
    *((_QWORD *)&v191 + 1) = v137;
    LOBYTE(v192[0]) = v78;
    v193 = 0;
    v190.i64[0] = (uint64_t)&off_24ED92658;
    physx::Gu::PCMMeshContactGeneration::PCMMeshContactGeneration((unint64_t)v194, &v188, &v185, (float32x4_t *)v187, (float32x4_t *)v186, (uint64_t)v10, v8, 0, v67);
    v203 = &v204;
    v201 = vadd_f32(v211, v188);
    v202 = vmul_f32(v201, v201);
    v138.n128_f32[0] = physx::Gu::Box::create((physx::Gu::Box *)v178, (const Capsule *)v181);
    if (!v78)
      v138.n128_f32[0] = physx::Cm::FastVertex2ShapeScaling::transformQueryBounds((uint64_t)v182, &v179, &v180, v178);
    ((void (*)(uint64_t, float *, float32x4_t *, uint64_t, uint64_t, __n128))*(&physx::Gu::gMidphaseBoxCBOverlapTable
                                                                                     + *(unsigned __int16 *)(v136 + 8)
                                                                                     - 3))(v136, v178, &v190, 1, 1, v138);
    if (v193)
    {
      physx::Gu::PCMMeshContactGeneration::processTriangleCache<16u,physx::Gu::PCMCapsuleVsMeshContactGeneration>((unint64_t)v194, (uint64_t)v192 + 4);
      v193 = 0;
    }
    v139 = v199;
    if (v199)
    {
      v140 = v200;
      if (v200 >= 2)
      {
        v141 = 0;
        v142 = -1;
        v143 = 1;
        do
        {
          v144 = &v194[v143];
          v145 = v144[255];
          v146 = v144[256];
          if (COERCE_FLOAT(*(_QWORD *)(v145 + 40)) > COERCE_FLOAT(*(_QWORD *)(v146 + 40)))
          {
            v144[255] = v146;
            v144[256] = v145;
            if ((int)v143 - 2 >= 0)
            {
              v147 = &v195[v142 + 1];
              v148 = v141;
              do
              {
                v150 = *(v147 - 1);
                v149 = *v147;
                if (COERCE_FLOAT(*(_QWORD *)(*v147 + 40)) >= COERCE_FLOAT(*(_QWORD *)(v150 + 40)))
                  break;
                *v147 = v150;
                *--v147 = v149;
                --v148;
              }
              while (v148 > 0);
            }
          }
          ++v143;
          ++v142;
          ++v141;
        }
        while (v143 != v140);
      }
      if ((_DWORD)v140)
      {
        v151 = 0;
        for (i = 0; i != v140; ++i)
        {
          v153 = (float32x4_t *)v195[i];
          v153[1].i64[1] = (uint64_t)v153;
          v153[2].i64[0] = (uint64_t)v153;
          v154 = v153[3].i32[1] - v153[3].i32[0];
          v153[3].i32[2] = v154;
          v153[1].i64[0] = 0;
          v155 = v151;
          while (v155)
          {
            v156 = *(_QWORD *)((char *)&v194[255] + v155);
            v157 = *(float32x4_t **)(v156 + 32);
            v158 = vmulq_f32(*v153, *v157);
            v158.i64[0] = vpaddq_f32(v158, v158).u64[0];
            v155 -= 8;
            if (vpadd_f32(*(float32x2_t *)v158.f32, *(float32x2_t *)v158.f32).f32[0] >= *(float *)&v196)
            {
              *(_QWORD *)(v156 + 16) = v153;
              v157[1].i64[1] = (uint64_t)v153;
              v153[2].i64[0] = (uint64_t)v157;
              *(_DWORD *)(*(_QWORD *)(v156 + 32) + 56) += v154;
              break;
            }
          }
          v151 += 8;
        }
        v159 = 0;
        v160 = v198;
        do
        {
          v161 = v195[v159];
          if (v161)
            _ZF = *(_QWORD *)(v161 + 32) == v161;
          else
            _ZF = 0;
          if (_ZF)
          {
            while (*(_QWORD *)(v161 + 16))
            {
              v163 = v161;
              v161 = *(_QWORD *)(v161 + 16);
              v164 = *(unsigned int *)(v163 + 48);
              v165 = *(unsigned int *)(v163 + 52);
              if (v164 < v165)
              {
                v166 = *(_DWORD *)(v161 + 52);
                do
                {
                  v167 = *(_DWORD *)(v161 + 48);
                  if (v167 < v166)
                  {
                    do
                    {
                      v168 = v160 + ((unint64_t)v167 << 6);
                      v169 = vsubq_f32(*(float32x4_t *)(v168 + 16), *(float32x4_t *)(v160 + (v164 << 6) + 16));
                      v170 = vmulq_f32(v169, v169);
                      v170.i64[0] = vpaddq_f32(v170, v170).u64[0];
                      if (*(float *)v197 > vpadd_f32(*(float32x2_t *)v170.f32, *(float32x2_t *)v170.f32).f32[0])
                      {
                        v171 = (__int128 *)(v160 + ((unint64_t)(v166 - 1) << 6));
                        v172 = *v171;
                        v173 = v171[1];
                        v174 = v171[2];
                        *(_DWORD *)(v168 + 48) = *((_DWORD *)v171 + 12);
                        *(_OWORD *)(v168 + 16) = v173;
                        *(_OWORD *)(v168 + 32) = v174;
                        *(_OWORD *)v168 = v172;
                        v166 = *(_DWORD *)(v161 + 52) - 1;
                        *(_DWORD *)(v161 + 52) = v166;
                        --v167;
                      }
                      ++v167;
                    }
                    while (v167 < v166);
                    v165 = *(unsigned int *)(v163 + 52);
                  }
                  ++v164;
                }
                while (v164 < v165);
              }
            }
          }
          ++v159;
        }
        while (v159 != v140);
        v175 = v198;
        v139 = v199;
        v176 = v200;
      }
      else
      {
        v176 = 0;
        v175 = v198;
      }
      physx::Gu::MultiplePersistentContactManifold::addManifoldContactPoints(v195[36], v175, v139, v195, v176, (uint64_t)v197, &v196, 3);
    }
  }
  else
  {
    v35 = (float32x2_t)vdup_lane_s32(*(int32x2_t *)v31.f32, 1);
    v36 = (float32x2_t)vdup_laneq_s32((int32x4_t)v31, 2);
    v37 = vaddq_f32(v31, v31);
    v38 = (float32x2_t)vdup_laneq_s32((int32x4_t)v37, 2);
    v39 = (float32x2_t)vdup_lane_s32((int32x2_t)vmul_f32(*(float32x2_t *)v31.f32, *(float32x2_t *)v37.f32), 0);
    v40 = vmul_lane_f32(v35, *(float32x2_t *)v37.f32, 1);
    v41 = vmul_laneq_f32(v36, v37, 2);
    v42 = vmul_n_f32(v35, v37.f32[0]);
    v43 = vmul_n_f32(v36, v37.f32[0]);
    v44 = vmul_lane_f32((float32x2_t)vdup_lane_s32(*(int32x2_t *)v37.f32, 0), v29, 1);
    v45 = vmul_lane_f32(v36, *(float32x2_t *)v37.f32, 1);
    *(float32x2_t *)v37.f32 = vmul_lane_f32((float32x2_t)vdup_lane_s32(*(int32x2_t *)v37.f32, 1), v29, 1);
    v46 = vmul_lane_f32(v38, v29, 1);
    __asm { FMOV            V7.2S, #1.0 }
    v51 = vsub_f32(_D7, v39);
    *(int8x8_t *)v52.f32 = vext_s8((int8x8_t)vsub_f32(vsub_f32(_D7, v40), v41), (int8x8_t)vadd_f32(v42, v46), 4uLL);
    v52.i64[1] = vsub_f32(v43, *(float32x2_t *)v37.f32).u32[0];
    *(int8x8_t *)&v53 = vext_s8((int8x8_t)vsub_f32(v42, v46), (int8x8_t)vsub_f32(v51, v41), 4uLL);
    *((_QWORD *)&v53 + 1) = vadd_f32(v45, v44).u32[0];
    v190 = v52;
    v191 = v53;
    *(int8x8_t *)&v53 = vext_s8((int8x8_t)vadd_f32(v43, *(float32x2_t *)v37.f32), (int8x8_t)vsub_f32(v45, v44), 4uLL);
    *((_QWORD *)&v53 + 1) = vsub_f32(v51, v40).u32[0];
    v192[0] = v53;
    v192[1] = v26;
    *(float32x2_t *)v204.f32 = vmul_n_f32((float32x2_t)vdup_n_s32(0x3D4CCCCDu), *(float *)v11.i32);
    v54 = v10[3].u8[14];
    if (v10[3].i8[14])
    {
      v55 = 0;
      do
      {
        v56 = &v10[3].i8[v55 + 8];
        v57 = *v56;
        v58 = v54 - 2;
        if (v55 < v58)
          v58 = v55;
        _X8 = (uint64_t)&v10[25 * v10[3].u8[v58 + 9] + 4];
        __asm
        {
          PRFM            #0, [X8]
          PRFM            #0, [X8,#0x80]
          PRFM            #0, [X8,#0x100]
        }
        v63 = physx::Gu::SinglePersistentContactManifold::refreshContactPoints((uint64_t)&v10[25 * *v56 + 4], &v190, (float32x2_t *)&v204).u32[0];
        if (v10[25 * v57 + 28].i32[0])
        {
          v10[2].i32[v57] = v63;
        }
        else
        {
          v64 = v10[3].i8[14] - 1;
          v10[3].i8[14] = v64;
          v65 = (char *)v10 + v64;
          v66 = v65[56];
          v65[56] = v57;
          *v56 = v66;
          --v55;
        }
        ++v55;
        v54 = v10[3].u8[14];
      }
      while (v55 < v54);
    }
  }
  return physx::Gu::MultiplePersistentContactManifold::addManifoldContactsToContactBuffer((uint64_t)v10, v8, (float32x4_t *)v187, v186, (float32x2_t *)&v189);
}

int64x2_t physx::Gu::PCMConvexVsMeshContactGeneration::addContactsToPatch(float32x4_t *a1, unsigned int a2, float32x4_t a3)
{
  float32x4_t v5;
  float32x4_t v6;
  int64x2_t result;
  uint64_t v8;
  float32x4_t v9;
  unint64_t v10;
  unsigned int v11;
  unint64_t v12;
  unint64_t v13;
  unsigned int v14;
  uint64_t v15;
  unint64_t v16;
  float32x4_t v17;
  unint64_t v18;
  __int128 v19;
  __int128 v20;
  unint64_t v21;
  unint64_t v22;
  int32x4_t *v23;
  float32x2_t v24;
  float32x4_t v25;
  float32x4_t *v26;
  float32x4_t v27;
  float32x4_t v28;
  float32x4_t v29;
  float32x4_t v30;
  uint64_t v31;
  uint64_t v32;
  float32x4_t v33;
  float32x4_t *v34;
  float32x2_t *v35;
  _DWORD *v36;
  unint64_t v37;
  unint64_t i;
  unsigned int v39;
  uint64_t v40;
  float32x4_t *v41;
  float32x4_t *v42;
  float32x4_t v43;
  float32x4_t v44;
  unint64_t v45;
  uint64_t v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  unint64_t v50;
  unint64_t v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  uint64_t v55;
  int v56;
  unsigned int v57;
  uint64_t j;
  char *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  int v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t *v66;
  float32x4_t *v67;
  uint64_t v68;
  uint64_t k;
  float32x4_t *v70;
  int v71;
  uint64_t v72;
  uint64_t v73;
  float32x4_t *v74;
  float32x4_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t *v78;
  uint64_t v79;
  BOOL v80;
  uint64_t v81;
  unint64_t v82;
  unint64_t v83;
  unsigned int v84;
  unsigned int v85;
  unint64_t v86;
  float32x4_t v87;
  float32x4_t v88;
  unint64_t v89;
  __int128 v90;
  __int128 v91;
  __int128 v92;
  unsigned int v93;
  uint64_t v94;
  int64x2_t v95;
  int64x2_t v96;
  uint64_t v97;
  uint64_t v98;

  v5 = vmulq_f32(a1[148], a3);
  v5.i64[0] = vpaddq_f32(v5, v5).u64[0];
  v6 = vmulq_f32(a1[149], a3);
  v6.i64[0] = vpaddq_f32(v6, v6).u64[0];
  result = (int64x2_t)vmulq_f32(a1[150], a3);
  result.i64[0] = vpaddq_f32((float32x4_t)result, (float32x4_t)result).u64[0];
  v8 = vpadd_f32(*(float32x2_t *)result.i8, *(float32x2_t *)result.i8).u32[0];
  *(int8x8_t *)v9.f32 = vext_s8((int8x8_t)vpadd_f32(*(float32x2_t *)v5.f32, *(float32x2_t *)v5.f32), (int8x8_t)vpadd_f32(*(float32x2_t *)v6.f32, *(float32x2_t *)v6.f32), 4uLL);
  LODWORD(v10) = a1[152].i32[2];
  v11 = v10 - a2;
  if (v11 >= 6)
  {
    v97 = v8;
    v98 = v9.i64[0];
    physx::Gu::SinglePersistentContactManifold::reduceContacts(a1[152].i64[0] + ((unint64_t)a2 << 6), v11);
    v8 = v97;
    v9.i64[0] = v98;
    LODWORD(v10) = a2 + 5;
    a1[152].i32[2] = a2 + 5;
  }
  if (v10 > a2)
  {
    v12 = a2;
    do
    {
      v13 = v12++;
      if (v12 < v10)
      {
        v14 = v12;
        do
        {
          v15 = a1[152].i64[0];
          v16 = v15 + ((unint64_t)v14 << 6);
          v17 = vsubq_f32(*(float32x4_t *)(v16 + 16), *(float32x4_t *)(v15 + (v13 << 6) + 16));
          result = (int64x2_t)vmulq_f32(v17, v17);
          result.i64[0] = vpaddq_f32((float32x4_t)result, (float32x4_t)result).u64[0];
          if (COERCE_FLOAT(a1[147].i64[1]) > vpadd_f32(*(float32x2_t *)result.i8, *(float32x2_t *)result.i8).f32[0])
          {
            v18 = v15 + ((unint64_t)(v10 - 1) << 6);
            result = *(int64x2_t *)v18;
            v19 = *(_OWORD *)(v18 + 16);
            v20 = *(_OWORD *)(v18 + 32);
            *(_DWORD *)(v16 + 48) = *(_DWORD *)(v18 + 48);
            *(_OWORD *)(v16 + 16) = v19;
            *(_OWORD *)(v16 + 32) = v20;
            *(int64x2_t *)v16 = result;
            LODWORD(v10) = a1[152].i32[2] - 1;
            a1[152].i32[2] = v10;
            --v14;
          }
          ++v14;
        }
        while (v14 < v10);
      }
    }
    while (v12 < v10);
  }
  v9.i64[1] = v8;
  if (v10 <= a2)
  {
    *(int32x2_t *)result.i8 = vdup_n_s32(0x7F7FFFFFu);
  }
  else
  {
    v21 = (unint64_t)a2 << 6;
    *(int32x2_t *)result.i8 = vdup_n_s32(0x7F7FFFFFu);
    v22 = a2;
    do
    {
      v23 = (int32x4_t *)(a1[152].i64[0] + v21);
      v24 = (float32x2_t)vdup_laneq_s32(v23[2], 3);
      v25 = v9;
      v25.i32[3] = HIDWORD(*(_OWORD *)&v23[2]);
      v23[2] = (int32x4_t)v25;
      v26 = (float32x4_t *)(a1[152].i64[0] + v21);
      v27 = vsubq_f32(v26[1], a1[151]);
      v28 = vmulq_f32(a1[148], v27);
      v28.i64[0] = vpaddq_f32(v28, v28).u64[0];
      v29 = vmulq_f32(v27, a1[149]);
      v29.i64[0] = vpaddq_f32(v29, v29).u64[0];
      v30 = vmulq_f32(v27, a1[150]);
      v30.i64[0] = vpaddq_f32(v30, v30).u64[0];
      *(int8x8_t *)v28.f32 = vext_s8((int8x8_t)vpadd_f32(*(float32x2_t *)v28.f32, *(float32x2_t *)v28.f32), (int8x8_t)vpadd_f32(*(float32x2_t *)v29.f32, *(float32x2_t *)v29.f32), 4uLL);
      v28.i64[1] = vpadd_f32(*(float32x2_t *)v30.f32, *(float32x2_t *)v30.f32).u32[0];
      v26[1] = v28;
      *(float32x2_t *)result.i8 = vmin_f32(*(float32x2_t *)result.i8, v24);
      ++v22;
      v10 = a1[152].u32[2];
      v21 += 64;
    }
    while (v22 < v10);
  }
  v31 = a1[152].u32[3];
  if ((_DWORD)v31
    && (v32 = (v31 - 1),
        v33 = vmulq_f32(a1[4 * v32], v9),
        v33.i64[0] = vpaddq_f32(v33, v33).u64[0],
        vpadd_f32(*(float32x2_t *)v33.f32, *(float32x2_t *)v33.f32).f32[0] > COERCE_FLOAT(a1[147].i64[0])))
  {
    v35 = (float32x2_t *)&a1[4 * v32];
    v36 = (_DWORD *)&v35[6] + 1;
    v37 = v35[6].u32[1];
    for (i = v35[6].u32[0]; i < v37; ++i)
    {
      v39 = a2;
      if (v10 > a2)
      {
        do
        {
          v40 = a1[152].i64[0];
          v41 = (float32x4_t *)(v40 + ((unint64_t)v39 << 6));
          v42 = (float32x4_t *)(v40 + (i << 6));
          v43 = vsubq_f32(v41[1], v42[1]);
          v44 = vmulq_f32(v43, v43);
          v44.i64[0] = vpaddq_f32(v44, v44).u64[0];
          if (COERCE_FLOAT(a1[147].i64[1]) > vpadd_f32(*(float32x2_t *)v44.f32, *(float32x2_t *)v44.f32).f32[0])
          {
            if (v42[2].f32[3] > v41[2].f32[3])
            {
              v45 = v40 + ((unint64_t)v39 << 6);
              v46 = v40 + (i << 6);
              v47 = *(_OWORD *)v45;
              v48 = *(_OWORD *)(v45 + 16);
              v49 = *(_OWORD *)(v45 + 32);
              *(_DWORD *)(v46 + 48) = *(_DWORD *)(v45 + 48);
              *(_OWORD *)(v46 + 16) = v48;
              *(_OWORD *)(v46 + 32) = v49;
              *(_OWORD *)v46 = v47;
              v40 = a1[152].i64[0];
              LODWORD(v10) = a1[152].i32[2];
            }
            v50 = v40 + ((unint64_t)(v10 - 1) << 6);
            v51 = v40 + ((unint64_t)v39 << 6);
            v52 = *(_OWORD *)v50;
            v53 = *(_OWORD *)(v50 + 16);
            v54 = *(_OWORD *)(v50 + 32);
            *(_DWORD *)(v51 + 48) = *(_DWORD *)(v50 + 48);
            *(_OWORD *)(v51 + 16) = v53;
            *(_OWORD *)(v51 + 32) = v54;
            *(_OWORD *)v51 = v52;
            LODWORD(v10) = a1[152].i32[2] - 1;
            a1[152].i32[2] = v10;
            --v39;
          }
          ++v39;
        }
        while (v39 < v10);
        v37 = *v36;
      }
    }
    *v36 = v10;
    *(float32x2_t *)result.i8 = vmin_f32(v35[5], *(float32x2_t *)result.i8);
    v35[5] = *(float32x2_t *)result.i8;
  }
  else
  {
    v34 = &a1[4 * v31];
    v34[3].i32[0] = a2;
    v34[3].i32[1] = v10;
    v34[2].i64[1] = result.i64[0];
    a1[152].i32[3] = v31 + 1;
    *v34 = v9;
    LODWORD(v10) = a1[152].i32[2];
  }
  if (v10 >= 0x10)
  {
    v55 = a1[152].u32[3];
    if (v55 >= 2)
    {
      v56 = 0;
      v57 = -1;
      for (j = 1; j != v55; ++j)
      {
        v59 = (char *)a1 + 8 * j;
        v60 = *((_QWORD *)v59 + 255);
        v61 = *((_QWORD *)v59 + 256);
        if (COERCE_FLOAT(*(_QWORD *)(v60 + 40)) > COERCE_FLOAT(*(_QWORD *)(v61 + 40)))
        {
          *((_QWORD *)v59 + 255) = v61;
          *((_QWORD *)v59 + 256) = v60;
          if ((int)j - 2 >= 0)
          {
            v62 = (uint64_t)&a1[128].i64[v57 + 1];
            v63 = v56;
            do
            {
              v65 = *(_QWORD *)(v62 - 8);
              v64 = *(_QWORD *)v62;
              if (COERCE_FLOAT(*(_QWORD *)(*(_QWORD *)v62 + 40)) >= COERCE_FLOAT(*(_QWORD *)(v65 + 40)))
                break;
              *(_QWORD *)v62 = v65;
              *(_QWORD *)(v62 - 8) = v64;
              v62 -= 8;
              --v63;
            }
            while (v63 > 0);
          }
        }
        ++v57;
        ++v56;
      }
    }
    v66 = (uint64_t *)&a1[128];
    v67 = a1 + 147;
    if ((_DWORD)v55)
    {
      v68 = 0;
      for (k = 0; k != v55; ++k)
      {
        v70 = (float32x4_t *)v66[k];
        v70[1].i64[1] = (uint64_t)v70;
        v70[2].i64[0] = (uint64_t)v70;
        v71 = v70[3].i32[1] - v70[3].i32[0];
        v70[3].i32[2] = v71;
        v70[1].i64[0] = 0;
        v72 = v68;
        while (v72)
        {
          v73 = *(uint64_t *)((char *)&a1[127].i64[1] + v72);
          v74 = *(float32x4_t **)(v73 + 32);
          v75 = vmulq_f32(*v70, *v74);
          v75.i64[0] = vpaddq_f32(v75, v75).u64[0];
          v72 -= 8;
          if (vpadd_f32(*(float32x2_t *)v75.f32, *(float32x2_t *)v75.f32).f32[0] >= COERCE_FLOAT(v67->i64[0]))
          {
            *(_QWORD *)(v73 + 16) = v70;
            v74[1].i64[1] = (uint64_t)v70;
            v70[2].i64[0] = (uint64_t)v74;
            *(_DWORD *)(*(_QWORD *)(v73 + 32) + 56) += v71;
            break;
          }
        }
        v68 += 8;
      }
      v76 = 0;
      v77 = a1[152].i64[0];
      v78 = &a1[147].i64[1];
      do
      {
        v79 = v66[v76];
        if (v79)
          v80 = *(_QWORD *)(v79 + 32) == v79;
        else
          v80 = 0;
        if (v80)
        {
          while (*(_QWORD *)(v79 + 16))
          {
            v81 = v79;
            v79 = *(_QWORD *)(v79 + 16);
            v82 = *(unsigned int *)(v81 + 48);
            v83 = *(unsigned int *)(v81 + 52);
            if (v82 < v83)
            {
              v84 = *(_DWORD *)(v79 + 52);
              do
              {
                v85 = *(_DWORD *)(v79 + 48);
                if (v85 < v84)
                {
                  do
                  {
                    v86 = v77 + ((unint64_t)v85 << 6);
                    v87 = vsubq_f32(*(float32x4_t *)(v86 + 16), *(float32x4_t *)(v77 + (v82 << 6) + 16));
                    v88 = vmulq_f32(v87, v87);
                    v88.i64[0] = vpaddq_f32(v88, v88).u64[0];
                    if (COERCE_FLOAT(*v78) > vpadd_f32(*(float32x2_t *)v88.f32, *(float32x2_t *)v88.f32).f32[0])
                    {
                      v89 = v77 + ((unint64_t)(v84 - 1) << 6);
                      v90 = *(_OWORD *)v89;
                      v91 = *(_OWORD *)(v89 + 16);
                      v92 = *(_OWORD *)(v89 + 32);
                      *(_DWORD *)(v86 + 48) = *(_DWORD *)(v89 + 48);
                      *(_OWORD *)(v86 + 16) = v91;
                      *(_OWORD *)(v86 + 32) = v92;
                      *(_OWORD *)v86 = v90;
                      v84 = *(_DWORD *)(v79 + 52) - 1;
                      *(_DWORD *)(v79 + 52) = v84;
                      --v85;
                    }
                    ++v85;
                  }
                  while (v85 < v84);
                  v83 = *(unsigned int *)(v81 + 52);
                }
                ++v82;
              }
              while (v82 < v83);
            }
          }
        }
        ++v76;
      }
      while (v76 != v55);
      LODWORD(v10) = a1[152].i32[2];
      v93 = a1[152].u32[3];
    }
    else
    {
      v93 = 0;
      v78 = &a1[147].i64[1];
    }
    physx::Gu::MultiplePersistentContactManifold::addManifoldContactPoints(a1[146].i64[0], a1[152].i64[0], v10, v66, v93, (uint64_t)v78, v67, 6);
    a1[152].i64[1] = 0;
    result = (int64x2_t)xmmword_2260E7EE0;
    v94 = 128;
    v95 = vdupq_n_s64((unint64_t)a1);
    v96 = vdupq_n_s64(2uLL);
    do
    {
      a1[v94] = (float32x4_t)vaddq_s64(v95, vshlq_n_s64(result, 6uLL));
      result = vaddq_s64(result, v96);
      ++v94;
    }
    while (v94 != 144);
  }
  return result;
}

void physx::Gu::PCMConvexVsMeshContactGeneration::generateLastContacts(float32x4_t *this)
{
  uint64_t v1;
  unsigned int v2;
  uint64_t v4;
  uint64_t v5;
  __int8 *v6;
  uint64_t v7;
  unsigned int v8;
  unsigned int v9;
  unsigned int v10;
  uint64_t v11;
  int v12;
  int v13;
  int v14;
  int v15;
  int v16;
  int v17;
  float32x4_t v18;
  float32x4_t v19;
  float32x4_t v20;
  float32x4_t v21;
  unsigned int v22;
  unsigned int v23;
  unsigned int v24;
  unint64_t v25;
  uint64_t v26;
  unint64_t v27;
  int k;
  int i;
  int j;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  __int128 v34;
  __int8 *v35;
  float32x4_t v36;
  float32x4_t *v37;
  uint64_t v38;
  uint64_t v39;
  __int32 *v40;
  unint64_t v41;
  __int8 *v42;
  unsigned int v43;
  float32x2_t v44;
  float32x2_t v45;
  float32x4_t v46;
  float32x4_t v47;
  uint64_t v48;
  int v49;
  int v50;
  char v51;
  float32x4_t v52;
  float32x4_t v53;
  float32x4_t v54[2];

  v1 = this[233].i64[1];
  v2 = *(_DWORD *)(v1 + 4368);
  if (v2 > 0xE)
  {
    v4 = 0;
    v5 = *(_QWORD *)(v1 + 4360);
    v41 = v2 / 0xFuLL;
    v42 = &this[153].i8[4];
    v40 = &this[152].i32[2];
    v37 = this + 144;
    v6 = &this[234].i8[8];
    v36 = (float32x4_t)vdupq_n_s32(0x3EAAAA9Fu);
    v35 = &this[274].i8[8];
    v38 = v5;
    do
    {
      v7 = v5 + 60 * v4;
      v9 = *(_DWORD *)(v7 + 36);
      v8 = *(_DWORD *)(v7 + 40);
      v10 = *(_DWORD *)(v7 + 44);
      v11 = *(unsigned __int8 *)(v7 + 56);
      if ((v11 & 8) != 0
        || (v9 >= v8 ? (v12 = *(_DWORD *)(v7 + 40)) : (v12 = *(_DWORD *)(v7 + 36)),
            v9 <= v8 ? (v13 = *(_DWORD *)(v7 + 40)) : (v13 = *(_DWORD *)(v7 + 36)),
            !physx::Gu::CacheMap<physx::Gu::CachedEdge,128u>::get((uint64_t)v42, v12, v13)))
      {
        if ((v11 & 0x10) != 0
          || (v8 >= v10 ? (v14 = v10) : (v14 = v8),
              v8 <= v10 ? (v15 = v10) : (v15 = v8),
              !physx::Gu::CacheMap<physx::Gu::CachedEdge,128u>::get((uint64_t)v42, v14, v15)))
        {
          if ((v11 & 0x20) != 0
            || (v10 >= v9 ? (v16 = v9) : (v16 = v10),
                v10 <= v9 ? (v17 = v9) : (v17 = v10),
                !physx::Gu::CacheMap<physx::Gu::CachedEdge,128u>::get((uint64_t)v42, v16, v17)))
          {
            v50 = 5;
            v51 = 0;
            v18.i64[0] = *(_QWORD *)v7;
            v18.i64[1] = *(unsigned int *)(v7 + 8);
            v19.i64[0] = *(_QWORD *)(v7 + 12);
            v19.i64[1] = *(unsigned int *)(v7 + 20);
            v20.i64[0] = *(_QWORD *)(v7 + 24);
            v20.i64[1] = *(unsigned int *)(v7 + 32);
            v21 = vmulq_f32(vaddq_f32(vaddq_f32(v18, v19), v20), v36);
            v21.i32[3] = 0;
            v47 = v21;
            v52 = v18;
            v53 = v19;
            v54[0] = v20;
            v48 = 0x7F7FFFFF00000000;
            v49 = 2139095039;
            v46 = 0uLL;
            v22 = this[152].u32[2];
            physx::Gu::PCMConvexVsMeshContactGeneration::generatePolyDataContactManifold((uint64_t)this, (uint64_t)&v47, *(_DWORD *)(v5 + 60 * v4 + 52), *(_DWORD *)(v5 + 60 * v4 + 48), v11, this[152].i64[0], v40, v37, &v46);
            v23 = v22;
            v44 = 0;
            v45 = 0;
            v24 = this[152].u32[2];
            v39 = v4;
            if (v24 <= v22)
            {
              LODWORD(v27) = this[152].i32[2];
            }
            else
            {
              v43 = v22;
              v25 = v24 - 1;
              v26 = v25 << 6;
              LODWORD(v27) = this[152].i32[2];
              do
              {
                physx::Gu::barycentricCoordinates((float32x4_t *)(this[152].i64[0] + ((unint64_t)--v24 << 6) + 16), &v52, &v53, v54, &v45, &v44);
                if (v45.f32[0] > 0.97)
                {
                  for (i = v35[v8 & 0x7F]; i != 255; i = this[266].u8[i + 8])
                  {
                    if (*(_DWORD *)&v6[4 * i] == v8)
                    {
LABEL_44:
                      v27 = (v27 - 1);
                      if (v27 > v24)
                      {
                        v31 = v26;
                        v32 = v25;
                        do
                        {
                          ++v32;
                          v33 = this[152].i64[0] + v31;
                          v34 = *(_OWORD *)(v33 + 80);
                          *(_OWORD *)v33 = *(_OWORD *)(v33 + 64);
                          *(_OWORD *)(v33 + 16) = v34;
                          *(_OWORD *)(v33 + 32) = *(_OWORD *)(v33 + 96);
                          *(_DWORD *)(v33 + 48) = *(_DWORD *)(v33 + 112);
                          v31 += 64;
                        }
                        while (v32 < v27);
                      }
                      break;
                    }
                  }
                }
                else if (v44.f32[0] > 0.97)
                {
                  for (j = v35[v10 & 0x7F]; j != 255; j = this[266].u8[j + 8])
                  {
                    if (*(_DWORD *)&v6[4 * j] == v10)
                      goto LABEL_44;
                  }
                }
                else if (vadd_f32(v45, v44).f32[0] <= 0.03)
                {
                  for (k = v35[v9 & 0x7F]; k != 255; k = this[266].u8[k + 8])
                  {
                    if (*(_DWORD *)&v6[4 * k] == v9)
                      goto LABEL_44;
                  }
                }
                v23 = v43;
                --v25;
                v26 -= 64;
              }
              while (v43 < v24);
            }
            *v40 = v27;
            if (v27 > v23)
              physx::Gu::PCMConvexVsMeshContactGeneration::addContactsToPatch(this, v23, v46);
            v5 = v38;
            v4 = v39;
          }
        }
      }
      ++v4;
    }
    while (v4 != v41);
  }
}

uint64_t physx::Gu::CacheMap<physx::Gu::CachedEdge,128u>::get(uint64_t a1, int a2, int a3)
{
  unsigned int v3;
  unsigned int i;
  uint64_t v5;
  uint64_t v6;

  v3 = 9
     * (((a3 | (a2 << 16)) + ~((a3 | (a2 << 16)) << 15)) ^ (((a3 | (a2 << 16)) + ~((a3 | (a2 << 16)) << 15)) >> 10));
  for (i = *(unsigned __int8 *)(a1
                               + ((((v3 ^ (v3 >> 6)) - 1) ^ (((v3 ^ (v3 >> 6))
                                                                                              + ~((v3 ^ (v3 >> 6)) << 11)) >> 16)) & 0x7F)
                               + 1152); i != 255; i = *(unsigned __int8 *)(a1 + v5 + 1024))
  {
    v5 = i;
    if (*(_DWORD *)(a1 + 8 * i) == a2)
    {
      v6 = a1 + 8 * i;
      if (*(_DWORD *)(v6 + 4) == a3)
        return v6;
    }
  }
  return 0;
}

BOOL physx::Gu::PCMConvexVsMeshContactGeneration::processTriangle(uint64_t a1, float *a2, __int32 a3, char a4, int *a5, double a6, double a7, __n128 a8, double a9, double a10, __n128 a11)
{
  float32x4_t v14;
  float32x4_t v15;
  __n128 v16;
  float32x4_t v17;
  __n128 v18;
  float32x4_t v19;
  int8x16_t v20;
  int8x16_t v21;
  int8x8_t v22;
  float32x4_t v23;
  float32x2_t v24;
  float32x2_t v25;
  int v26;
  float32x2_t v32;
  float32x2_t v33;
  int v34;
  float32x4_t v35;
  float32x4_t v36;
  float32x4_t v37;
  float v38;
  float32x4_t v39;
  float32x4_t v40;
  float32x4_t v41;
  float32x4_t v42;
  float32x4_t v43;
  float32x4_t v44;
  float32x4_t v45;
  float32x4_t v46;
  float32x4_t v47;
  float32x4_t v48;
  float32x4_t v49;
  float32x4_t v50;
  float32x4_t v51;
  float32x4_t v52;
  float32x4_t v53;
  float32x4_t v54;
  float32x4_t v55;
  uint64_t v56;
  unsigned int v57;
  unsigned int v58;
  int v59;
  unsigned int v61;
  unsigned int v62;
  int v63;
  unsigned int v64;
  unsigned int v65;
  int v66;
  float v67;
  int v68;
  unsigned int v69;
  float32x4_t v70;
  float32x4_t v71;
  uint64_t v72;
  uint64_t v73;
  char v74;
  float32x4_t v75;
  float32x4_t v76;
  float32x4_t v77;
  _OWORD v78[3];
  _QWORD v79[7];
  char v80;
  float32x4_t *v81;
  uint64_t v82;

  v82 = *MEMORY[0x24BDAC8D0];
  v78[0] = xmmword_2260E5F10;
  v78[1] = xmmword_2260E5F20;
  v78[2] = xmmword_2260E5F40;
  v14 = (float32x4_t)*(unsigned int *)a2;
  v14.f32[1] = a2[1];
  v15 = v14;
  v15.f32[2] = a2[2];
  a11.n128_f32[0] = a2[3];
  v16 = a11;
  v16.n128_f32[1] = a2[4];
  v17 = (float32x4_t)v16;
  v17.f32[2] = a2[5];
  a8.n128_f32[0] = a2[6];
  v18 = a8;
  v18.n128_f32[1] = a2[7];
  v19 = (float32x4_t)v18;
  v19.f32[2] = a2[8];
  v20 = (int8x16_t)vsubq_f32(v17, v15);
  v21 = (int8x16_t)vsubq_f32(v19, v15);
  v22 = (int8x8_t)vmls_f32(vmul_f32(*(float32x2_t *)v20.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v21, v21, 4uLL)), (float32x2_t)*(_OWORD *)&vextq_s8(v20, v20, 4uLL), *(float32x2_t *)v21.i8);
  *(int8x8_t *)v23.f32 = vext_s8(v22, (int8x8_t)vmls_f32(vmul_f32((float32x2_t)*(_OWORD *)&vextq_s8(v20, v20, 8uLL), *(float32x2_t *)v21.i8), *(float32x2_t *)v20.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v21, v21, 8uLL)), 4uLL);
  v23.i64[1] = v22.u32[0];
  *(float32x2_t *)v21.i8 = vpadd_f32(vmul_f32(*(float32x2_t *)v23.f32, *(float32x2_t *)v23.f32), vmul_f32((float32x2_t)v22.u32[0], (float32x2_t)v22.u32[0]));
  v24 = vpadd_f32(*(float32x2_t *)v21.i8, *(float32x2_t *)v21.i8);
  v25 = vrsqrte_f32(v24);
  v26 = 4;
  do
  {
    v25 = vmul_f32(v25, vrsqrts_f32(vmul_f32(v25, v25), v24));
    --v26;
  }
  while (v26);
  __asm { FMOV            V21.2S, #1.0 }
  v32 = vmul_f32(v24, (float32x2_t)vbsl_s8((int8x8_t)vdup_lane_s32(vceqz_f32(v24), 0), _D21, (int8x8_t)v25));
  v33 = vrecpe_f32(v32);
  v34 = 4;
  do
  {
    v33 = vmul_f32(v33, vrecps_f32(v32, v33));
    --v34;
  }
  while (v34);
  v35 = vmulq_n_f32(v23, v33.f32[0]);
  v35.i32[3] = 0;
  v36 = vmulq_f32(v15, v35);
  v36.i64[0] = vpaddq_f32(v36, v36).u64[0];
  v37 = vmulq_f32(v35, *(float32x4_t *)(a1 + 4528));
  v37.i64[0] = vpaddq_f32(v37, v37).u64[0];
  v38 = vsub_f32(vpadd_f32(*(float32x2_t *)v37.f32, *(float32x2_t *)v37.f32), vpadd_f32(*(float32x2_t *)v36.f32, *(float32x2_t *)v36.f32)).f32[0];
  if (v38 >= 0.0)
  {
    v67 = v38;
    v39 = *(float32x4_t *)(a1 + 2368);
    v40 = vmulq_n_f32(v39, *a2);
    v40.i32[3] = 0;
    v41 = *(float32x4_t *)(a1 + 2384);
    v42 = vmulq_lane_f32(v41, *(float32x2_t *)v14.f32, 1);
    v42.i32[3] = 0;
    v43 = *(float32x4_t *)(a1 + 2416);
    v44 = *(float32x4_t *)(a1 + 2400);
    v45 = vmulq_laneq_f32(v44, v15, 2);
    v45.i32[3] = 0;
    v46 = vaddq_f32(v43, vaddq_f32(vaddq_f32(v40, v42), v45));
    v47 = vmulq_n_f32(v39, a11.n128_f32[0]);
    v47.i32[3] = 0;
    v48 = vmulq_lane_f32(v41, (float32x2_t)v16.n128_u64[0], 1);
    v48.i32[3] = 0;
    v49 = vmulq_laneq_f32(v44, v17, 2);
    v49.i32[3] = 0;
    v50 = vaddq_f32(v43, vaddq_f32(vaddq_f32(v47, v48), v49));
    v51 = vmulq_n_f32(v39, a8.n128_f32[0]);
    v51.i32[3] = 0;
    v52 = vmulq_lane_f32(v41, (float32x2_t)v18.n128_u64[0], 1);
    v52.i32[3] = 0;
    v53 = vmulq_laneq_f32(v44, v19, 2);
    v53.i32[3] = 0;
    v54 = vaddq_f32(v43, vaddq_f32(vaddq_f32(v51, v52), v53));
    v74 = 0;
    v55 = vmulq_f32(vaddq_f32(v54, vaddq_f32(v46, v50)), (float32x4_t)vdupq_n_s32(0x3EAAAA9Fu));
    v55.i32[3] = 0;
    v71 = v55;
    v75 = v46;
    v76 = v50;
    v77 = v54;
    v72 = 0x7F7FFFFF00000000;
    v73 = 0x57F7FFFFFLL;
    v56 = *(_QWORD *)(a1 + 2320);
    v79[5] = v78;
    v79[6] = v78;
    v80 = 1;
    v79[4] = v56;
    v79[0] = &off_24ED92778;
    v81 = &v71;
    v57 = *(_DWORD *)(a1 + 2440);
    v70 = 0uLL;
    physx::Gu::PCMConvexVsMeshContactGeneration::generateTriangleFullContactManifold(a1, (uint64_t)&v71, a3, a5, a4, *(_QWORD *)(a1 + 4544), (uint64_t)v79, *(_QWORD **)(a1 + 4552), *(_QWORD *)(a1 + 2432), (_DWORD *)(a1 + 2440), (float32x2_t *)(a1 + 2304), &v70);
    if (*(_DWORD *)(a1 + 2440) <= v57)
    {
LABEL_17:
      v38 = v67;
      return v38 >= 0.0;
    }
    if ((a4 & 8) != 0)
    {
      if ((a4 & 0x10) != 0)
        goto LABEL_9;
    }
    else
    {
      v61 = *a5;
      v62 = a5[1];
      if (*a5 >= v62)
        v63 = a5[1];
      else
        v63 = *a5;
      if (v61 <= v62)
        v61 = a5[1];
      v68 = v63;
      v69 = v61;
      physx::Gu::CacheMap<physx::Gu::CachedEdge,128u>::addData(a1 + 2452, &v68);
      if ((a4 & 0x10) != 0)
      {
LABEL_9:
        if ((a4 & 0x20) != 0)
        {
LABEL_16:
          v68 = *a5;
          physx::Gu::CacheMap<physx::Gu::CachedVertex,128u>::addData(a1 + 3752, &v68);
          v68 = a5[1];
          physx::Gu::CacheMap<physx::Gu::CachedVertex,128u>::addData(a1 + 3752, &v68);
          v68 = a5[2];
          physx::Gu::CacheMap<physx::Gu::CachedVertex,128u>::addData(a1 + 3752, &v68);
          physx::Gu::PCMConvexVsMeshContactGeneration::addContactsToPatch((float32x4_t *)a1, v57, v70);
          goto LABEL_17;
        }
LABEL_10:
        v58 = a5[2];
        if (v58 >= *a5)
          v59 = *a5;
        else
          v59 = a5[2];
        if (v58 <= *a5)
          v58 = *a5;
        v68 = v59;
        v69 = v58;
        physx::Gu::CacheMap<physx::Gu::CachedEdge,128u>::addData(a1 + 2452, &v68);
        goto LABEL_16;
      }
    }
    v64 = a5[1];
    v65 = a5[2];
    if (v64 >= v65)
      v66 = a5[2];
    else
      v66 = a5[1];
    if (v64 <= v65)
      v64 = a5[2];
    v68 = v66;
    v69 = v64;
    physx::Gu::CacheMap<physx::Gu::CachedEdge,128u>::addData(a1 + 2452, &v68);
    if ((a4 & 0x20) != 0)
      goto LABEL_16;
    goto LABEL_10;
  }
  return v38 >= 0.0;
}

uint64_t physx::Gu::PCMConvexVsMeshContactGeneration::processTriangle(uint64_t a1, float32x4_t *a2, float *a3, __int32 a4, unsigned int a5, float32x2_t *a6, char a7, uint64_t a8, float32x4_t *a9, uint64_t a10, _DWORD *a11)
{
  float32x4_t v11;
  float32x4_t v12;
  float32x4_t v13;
  float32x4_t v14;
  float32x4_t v15;
  float32x4_t v16;
  float32x4_t v17;
  float32x4_t v18;
  float32x4_t v19;
  float32x4_t v20;
  float32x4_t v21;
  float32x4_t v22;
  float32x4_t v23;
  float32x4_t v24;
  float32x4_t v25;
  float32x4_t v26;
  float32x4_t v27;
  float32x4_t v28;
  int8x16_t v29;
  int8x16_t v30;
  int8x8_t v31;
  float32x4_t v32;
  float32x2_t v33;
  float32x2_t v34;
  float32x2_t v35;
  int v36;
  float32x2_t v42;
  float32x2_t v43;
  int v44;
  float32x4_t v45;
  float32x4_t v46;
  float32x4_t v47;
  uint64_t v48;
  float32x4_t v49;
  float32x4_t v51;
  float32x4_t v52;
  uint64_t v53;
  uint64_t v54;
  char v55;
  float32x4_t v56;
  float32x4_t v57;
  float32x4_t v58;
  _OWORD v59[3];
  _QWORD v60[7];
  char v61;
  float32x4_t *v62;
  uint64_t v63;

  v63 = *MEMORY[0x24BDAC8D0];
  v59[0] = xmmword_2260E5F10;
  v59[1] = xmmword_2260E5F20;
  v11 = a9[1];
  v12 = vmulq_n_f32(*a9, *a3);
  v12.i32[3] = 0;
  v13 = vmulq_n_f32(v11, a3[1]);
  v13.i32[3] = 0;
  v14 = vaddq_f32(v12, v13);
  v16 = a9[2];
  v15 = a9[3];
  v17 = vmulq_n_f32(v16, a3[2]);
  v17.i32[3] = 0;
  v18 = vaddq_f32(v14, v17);
  v19 = vmulq_n_f32(*a9, a3[3]);
  v19.i32[3] = 0;
  v20 = vmulq_n_f32(v11, a3[4]);
  v20.i32[3] = 0;
  v21 = vaddq_f32(v15, v18);
  v22 = vmulq_n_f32(v16, a3[5]);
  v22.i32[3] = 0;
  v23 = vaddq_f32(vaddq_f32(v19, v20), v22);
  v24 = vmulq_n_f32(*a9, a3[6]);
  v24.i32[3] = 0;
  v25 = vmulq_n_f32(v11, a3[7]);
  v25.i32[3] = 0;
  v26 = vaddq_f32(v15, v23);
  v27 = vmulq_n_f32(v16, a3[8]);
  v27.i32[3] = 0;
  v28 = vaddq_f32(v15, vaddq_f32(vaddq_f32(v24, v25), v27));
  v29 = (int8x16_t)vsubq_f32(v26, v21);
  v30 = (int8x16_t)vsubq_f32(v28, v21);
  v31 = (int8x8_t)vmls_f32(vmul_f32(*(float32x2_t *)v29.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v30, v30, 4uLL)), (float32x2_t)*(_OWORD *)&vextq_s8(v29, v29, 4uLL), *(float32x2_t *)v30.i8);
  *(int8x8_t *)v32.f32 = vext_s8(v31, (int8x8_t)vmls_f32(vmul_f32((float32x2_t)*(_OWORD *)&vextq_s8(v29, v29, 8uLL), *(float32x2_t *)v30.i8), *(float32x2_t *)v29.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v30, v30, 8uLL)), 4uLL);
  v32.i64[1] = v31.u32[0];
  v59[2] = xmmword_2260E5F40;
  v33 = vpadd_f32(vmul_f32(*(float32x2_t *)v32.f32, *(float32x2_t *)v32.f32), vmul_f32((float32x2_t)v31.u32[0], (float32x2_t)v31.u32[0]));
  v34 = vpadd_f32(v33, v33);
  v35 = vrsqrte_f32(v34);
  v36 = 4;
  do
  {
    v35 = vmul_f32(v35, vrsqrts_f32(vmul_f32(v35, v35), v34));
    --v36;
  }
  while (v36);
  __asm { FMOV            V7.2S, #1.0 }
  v42 = vmul_f32(v34, (float32x2_t)vbsl_s8((int8x8_t)vdup_lane_s32(vceqz_f32(v34), 0), _D7, (int8x8_t)v35));
  v43 = vrecpe_f32(v42);
  v44 = 4;
  do
  {
    v43 = vmul_f32(v43, vrecps_f32(v42, v43));
    --v44;
  }
  while (v44);
  if ((a7 & 1) == 0)
  {
    v45 = vmulq_n_f32(v32, v43.f32[0]);
    v45.i32[3] = 0;
    v46 = vmulq_f32(v45, a2[1]);
    v46.i64[0] = vpaddq_f32(v46, v46).u64[0];
    v47 = vmulq_f32(v21, v45);
    v47.i64[0] = vpaddq_f32(v47, v47).u64[0];
    if (vsub_f32(vpadd_f32(*(float32x2_t *)v46.f32, *(float32x2_t *)v46.f32), vpadd_f32(*(float32x2_t *)v47.f32, *(float32x2_t *)v47.f32)).f32[0] < 0.0)return 0;
  }
  v55 = 0;
  v49 = vmulq_f32(vaddq_f32(v28, vaddq_f32(v21, v26)), (float32x4_t)vdupq_n_s32(0x3EAAAA9Fu));
  v49.i32[3] = 0;
  v52 = v49;
  v56 = v21;
  v57 = v26;
  v58 = v28;
  v53 = 0x7F7FFFFF00000000;
  v54 = 0x57F7FFFFFLL;
  v60[5] = v59;
  v60[6] = v59;
  v48 = 1;
  v61 = 1;
  v60[4] = a8;
  v60[0] = &off_24ED92778;
  v62 = &v52;
  v51 = 0uLL;
  physx::Gu::PCMConvexVsMeshContactGeneration::generateTriangleFullContactManifold((uint64_t)&v52, a4, a5, a1, (uint64_t)v60, a2, a10, a11, a6, &v51);
  return v48;
}

BOOL physx::Gu::PCMSphereVsMeshContactGeneration::processTriangle(unint64_t a1, uint64_t a2, int a3, unsigned int a4, unsigned int *a5)
{
  unsigned __int32 v8;
  unsigned __int32 v9;
  float32x4_t v10;
  float32x4_t v11;
  uint64_t v12;
  float32x4_t v13;
  uint64_t v14;
  unsigned __int32 v15;
  float32x4_t v16;
  float32x4_t v17;
  float32x4_t v18;
  int8x8_t v19;
  float32x4_t v20;
  float32x2_t v21;
  float32x2_t v22;
  float32x2_t v23;
  int v24;
  float32x2_t v30;
  float32x2_t v31;
  int v32;
  float32x4_t v33;
  float32x4_t v34;
  float32x2_t v35;
  float32x4_t v36;
  float32x4_t v37;
  float v38;
  float32x4_t v39;
  float32x4_t v40;
  float32x2_t v41;
  float32x4_t v42;
  float32x2_t v43;
  float32x4_t v44;
  float32x4_t v45;
  float32x2_t v46;
  float32x4_t v47;
  float32x2_t v48;
  float32x4_t v49;
  float32x4_t v50;
  float32x2_t v51;
  float32x4_t v52;
  float32x2_t v53;
  float32x2_t v54;
  float32x2_t v55;
  float32x2_t v56;
  float32x2_t v57;
  int8x8_t v58;
  float32x4_t v59;
  float32x4_t v60;
  float32x2_t v61;
  float32x2_t v62;
  int8x8_t v63;
  float32x4_t v64;
  float32x4_t v65;
  int8x8_t v66;
  float32x4_t v67;
  float32x4_t v68;
  float32x4_t v69;
  float32x2_t v70;
  int v71;
  float32x2_t v72;
  float32x4_t v73;
  float32x4_t v74;
  float32x2_t v75;
  int v76;
  float32x4_t v77;
  float32x4_t v78;
  float32x4_t v79;
  float32x4_t v80;
  float32x2_t v81;
  float32x2_t v82;
  int v83;
  float32x4_t v84;
  float32x2_t v85;
  float32x2_t v86;
  float32x2_t v87;
  int v88;
  int8x16_t v89;
  float32x4_t v90;
  float32x4_t v91;
  float32x2_t v92;
  float32x2_t v93;
  int v94;
  float32x4_t v95;
  float32x2_t v96;
  float32x4_t v97;
  float32x4_t v98;
  float32x2_t v99;
  float32x2_t v100;
  int v101;
  float32x2_t v102;
  float32x2_t v103;
  int v104;
  float32x4_t v105;
  uint64_t v106;
  unsigned int v107;
  unsigned int v108;
  uint64_t v109;
  uint64_t v110;
  float32x2_t v111;
  int v112;
  float32x2_t v113;
  unsigned int v114;
  unsigned int v115;
  unsigned int v116;
  unsigned int v117;
  unsigned int v118;
  unsigned int v119;
  unsigned int v120;
  unsigned int v121;
  int64x2_t v122;
  float32x4_t v124;
  float32x2_t v125;
  unsigned __int32 v126;
  uint64_t v127;
  __int128 v128;
  float32x4_t v129;
  float32x4_t v130;

  v8 = *(_DWORD *)(a2 + 8);
  v9 = *(_DWORD *)(a2 + 20);
  v10.i64[0] = *(_QWORD *)a2;
  v11.i64[0] = *(_QWORD *)a2;
  v11.i64[1] = v8;
  v12 = *(_QWORD *)(a2 + 12);
  v13.i64[0] = v12;
  v13.i64[1] = v9;
  v14 = *(_QWORD *)(a2 + 24);
  v15 = *(_DWORD *)(a2 + 32);
  v16.i64[0] = v14;
  v16.i64[1] = v15;
  v17 = vsubq_f32(v13, v11);
  v18 = vsubq_f32(v16, v11);
  v19 = (int8x8_t)vmls_f32(vmul_f32(*(float32x2_t *)v17.f32, (float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v18, (int8x16_t)v18, 4uLL)), (float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v17, (int8x16_t)v17, 4uLL), *(float32x2_t *)v18.f32);
  *(int8x8_t *)v20.f32 = vext_s8(v19, (int8x8_t)vmls_f32(vmul_f32((float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v17, (int8x16_t)v17, 8uLL), *(float32x2_t *)v18.f32), *(float32x2_t *)v17.f32, (float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v18, (int8x16_t)v18, 8uLL)), 4uLL);
  v20.i64[1] = v19.u32[0];
  v21 = vpadd_f32(vmul_f32(*(float32x2_t *)v20.f32, *(float32x2_t *)v20.f32), vmul_f32((float32x2_t)v19.u32[0], (float32x2_t)v19.u32[0]));
  v22 = vpadd_f32(v21, v21);
  v23 = vrsqrte_f32(v22);
  v24 = 4;
  do
  {
    v23 = vmul_f32(v23, vrsqrts_f32(vmul_f32(v23, v23), v22));
    --v24;
  }
  while (v24);
  __asm { FMOV            V0.2S, #1.0 }
  v30 = vmul_f32(v22, (float32x2_t)vbsl_s8((int8x8_t)vdup_lane_s32(vceqz_f32(v22), 0), _D0, (int8x8_t)v23));
  v31 = vrecpe_f32(v30);
  v32 = 4;
  do
  {
    v31 = vmul_f32(v31, vrecps_f32(v30, v31));
    --v32;
  }
  while (v32);
  v33 = vmulq_n_f32(v20, v31.f32[0]);
  v33.i32[3] = 0;
  v34 = vmulq_f32(v11, v33);
  v34.i64[0] = vpaddq_f32(v34, v34).u64[0];
  v35 = vpadd_f32(*(float32x2_t *)v34.f32, *(float32x2_t *)v34.f32);
  v36 = *(float32x4_t *)(a1 + 3760);
  v37 = vmulq_f32(v33, v36);
  v37.i64[0] = vpaddq_f32(v37, v37).u64[0];
  v38 = vsub_f32(vpadd_f32(*(float32x2_t *)v37.f32, *(float32x2_t *)v37.f32), v35).f32[0];
  if (v38 < 0.0)
    return v38 >= 0.0;
  v39 = vsubq_f32(v36, v11);
  v40 = vmulq_f32(v17, v39);
  v40.i64[0] = vpaddq_f32(v40, v40).u64[0];
  v41 = vpadd_f32(*(float32x2_t *)v40.f32, *(float32x2_t *)v40.f32);
  v42 = vmulq_f32(v18, v39);
  v42.i64[0] = vpaddq_f32(v42, v42).u64[0];
  v43 = vpadd_f32(*(float32x2_t *)v42.f32, *(float32x2_t *)v42.f32);
  if (vuzp1_s8((int8x8_t)vdup_lane_s16((int16x4_t)vand_s8((int8x8_t)vcltz_f32(v43), (int8x8_t)vcltz_f32(v41)), 0), _D0).u32[0] == -1)
  {
    LOBYTE(v76) = (a4 & 0x28) != 0;
    v130 = v11;
    v78 = vmulq_f32(v39, v39);
LABEL_29:
    v96 = (float32x2_t)vpaddq_f32(v78, v78).u64[0];
    v75 = vpadd_f32(v96, v96);
    goto LABEL_30;
  }
  v44 = vsubq_f32(v36, v13);
  v45 = vmulq_f32(v17, v44);
  v45.i64[0] = vpaddq_f32(v45, v45).u64[0];
  v46 = vpadd_f32(*(float32x2_t *)v45.f32, *(float32x2_t *)v45.f32);
  v47 = vmulq_f32(v18, v44);
  v47.i64[0] = vpaddq_f32(v47, v47).u64[0];
  v48 = vpadd_f32(*(float32x2_t *)v47.f32, *(float32x2_t *)v47.f32);
  if (vuzp1_s8((int8x8_t)vdup_lane_s16((int16x4_t)vand_s8((int8x8_t)vcge_f32(v46, v48), (int8x8_t)vcgez_f32(v46)), 0), _D0).u32[0] == -1)
  {
    LOBYTE(v76) = (a4 & 0x18) != 0;
    v130 = v13;
    v79 = vmulq_f32(v44, v44);
    v79.i64[0] = vpaddq_f32(v79, v79).u64[0];
    v75 = vpadd_f32(*(float32x2_t *)v79.f32, *(float32x2_t *)v79.f32);
    v8 = v9;
    v11 = v13;
    v10.i64[0] = v12;
  }
  else
  {
    v49 = vsubq_f32(v36, v16);
    v50 = vmulq_f32(v17, v49);
    v50.i64[0] = vpaddq_f32(v50, v50).u64[0];
    v51 = vpadd_f32(*(float32x2_t *)v50.f32, *(float32x2_t *)v50.f32);
    v52 = vmulq_f32(v18, v49);
    v52.i64[0] = vpaddq_f32(v52, v52).u64[0];
    v53 = vpadd_f32(*(float32x2_t *)v52.f32, *(float32x2_t *)v52.f32);
    if (vuzp1_s8((int8x8_t)vdup_lane_s16((int16x4_t)vand_s8((int8x8_t)vcgez_f32(v53), (int8x8_t)vcge_f32(v53, v51)), 0), _D0).u32[0] != -1)
    {
      v54 = (float32x2_t)vextq_s8((int8x16_t)v44, (int8x16_t)v44, 8uLL).u64[0];
      v55 = (float32x2_t)vextq_s8((int8x16_t)v44, (int8x16_t)v44, 4uLL).u64[0];
      v56 = (float32x2_t)vextq_s8((int8x16_t)v39, (int8x16_t)v39, 8uLL).u64[0];
      v57 = (float32x2_t)vextq_s8((int8x16_t)v39, (int8x16_t)v39, 4uLL).u64[0];
      v58 = (int8x8_t)vmls_f32(vmul_f32(*(float32x2_t *)v39.f32, v55), v57, *(float32x2_t *)v44.f32);
      *(int8x8_t *)v59.f32 = vext_s8(v58, (int8x8_t)vmls_f32(vmul_f32(v56, *(float32x2_t *)v44.f32), *(float32x2_t *)v39.f32, v54), 4uLL);
      v59.i64[1] = v58.u32[0];
      v60 = vmulq_f32(v20, v59);
      v60.i64[0] = vpaddq_f32(v60, v60).u64[0];
      if (vuzp1_s8((int8x8_t)vdup_lane_s16((int16x4_t)vand_s8(vand_s8((int8x8_t)vcltz_f32(v46), (int8x8_t)vcgez_f32(v41)), (int8x8_t)vcltz_f32(vpadd_f32(*(float32x2_t *)v60.f32, *(float32x2_t *)v60.f32))), 0), _D0).u32[0] == -1)
      {
        v81 = vsub_f32(v41, v46);
        v82 = vrecpe_f32(v81);
        v83 = 4;
        do
        {
          v82 = vmul_f32(v82, vrecps_f32(v81, v82));
          --v83;
        }
        while (v83);
        v76 = (a4 >> 3) & 1;
        v11 = vmlaq_n_f32(v11, v17, vmul_f32(v41, v82).f32[0]);
      }
      else
      {
        v61 = (float32x2_t)vextq_s8((int8x16_t)v49, (int8x16_t)v49, 8uLL).u64[0];
        v62 = (float32x2_t)vextq_s8((int8x16_t)v49, (int8x16_t)v49, 4uLL).u64[0];
        v63 = (int8x8_t)vmls_f32(vmul_f32(*(float32x2_t *)v44.f32, v62), v55, *(float32x2_t *)v49.f32);
        *(int8x8_t *)v64.f32 = vext_s8(v63, (int8x8_t)vmls_f32(vmul_f32(v54, *(float32x2_t *)v49.f32), *(float32x2_t *)v44.f32, v61), 4uLL);
        v64.i64[1] = v63.u32[0];
        v65 = vmulq_f32(v20, v64);
        v65.i64[0] = vpaddq_f32(v65, v65).u64[0];
        if (vuzp1_s8((int8x8_t)vdup_lane_s16((int16x4_t)vand_s8(vand_s8((int8x8_t)vcge_f32(v51, v53), (int8x8_t)vcge_f32(v48, v46)), (int8x8_t)vcltz_f32(vpadd_f32(*(float32x2_t *)v65.f32, *(float32x2_t *)v65.f32))), 0), _D0).u32[0] == -1)
        {
          v84 = vsubq_f32(v16, v13);
          v85 = vsub_f32(v48, v46);
          v86 = vadd_f32(v85, vsub_f32(v51, v53));
          v87 = vrecpe_f32(v86);
          v88 = 4;
          do
          {
            v87 = vmul_f32(v87, vrecps_f32(v86, v87));
            --v88;
          }
          while (v88);
          v76 = (a4 >> 4) & 1;
          v89 = (int8x16_t)vmlaq_n_f32(v13, v84, vmul_f32(v85, v87).f32[0]);
          v11.i64[0] = v89.i64[0];
          v11.i64[1] = vextq_s8(v89, v89, 8uLL).u32[0];
          v90 = vsubq_f32(v36, v11);
          v130 = v11;
          v91 = vmulq_f32(v90, v90);
          v91.i64[0] = vpaddq_f32(v91, v91).u64[0];
          v75 = vpadd_f32(*(float32x2_t *)v91.f32, *(float32x2_t *)v91.f32);
          v8 = v89.u32[2];
          v10.i64[0] = v89.i64[0];
          goto LABEL_30;
        }
        v66 = (int8x8_t)vmls_f32(vmul_f32(*(float32x2_t *)v49.f32, v57), v62, *(float32x2_t *)v39.f32);
        *(int8x8_t *)v67.f32 = vext_s8(v66, (int8x8_t)vmls_f32(vmul_f32(v61, *(float32x2_t *)v39.f32), *(float32x2_t *)v49.f32, v56), 4uLL);
        v67.i64[1] = v66.u32[0];
        v68 = vmulq_f32(v20, v67);
        v68.i64[0] = vpaddq_f32(v68, v68).u64[0];
        if (vuzp1_s8((int8x8_t)vdup_lane_s16((int16x4_t)vand_s8(vand_s8((int8x8_t)vcltz_f32(v53), (int8x8_t)vcgez_f32(v43)), (int8x8_t)vcltz_f32(vpadd_f32(*(float32x2_t *)v68.f32, *(float32x2_t *)v68.f32))), 0), _D0).u32[0] != -1)
        {
          v69 = vmulq_f32(v20, vsubq_f32(v11, v36));
          v70 = vrecpe_f32(v22);
          v71 = 4;
          do
          {
            v70 = vmul_f32(v70, vrecps_f32(v22, v70));
            --v71;
          }
          while (v71);
          v72 = (float32x2_t)vpaddq_f32(v69, v69).u64[0];
          v73 = vmulq_n_f32(v20, vmul_f32(v70, vpadd_f32(v72, v72)).f32[0]);
          v73.i32[3] = 0;
          v10 = vaddq_f32(v36, v73);
          v130 = v10;
          v74 = vmulq_f32(v73, v73);
          v74.i64[0] = vpaddq_f32(v74, v74).u64[0];
          v75 = vpadd_f32(*(float32x2_t *)v74.f32, *(float32x2_t *)v74.f32);
          if (COERCE_FLOAT(*(_QWORD *)(a1 + 3784)) <= v75.f32[0])
            return v38 >= 0.0;
          v8 = v10.u32[2];
          LOBYTE(v76) = 1;
          v77 = v33;
          goto LABEL_36;
        }
        v92 = vsub_f32(v43, v53);
        v93 = vrecpe_f32(v92);
        v94 = 4;
        do
        {
          v93 = vmul_f32(v93, vrecps_f32(v92, v93));
          --v94;
        }
        while (v94);
        v76 = (a4 >> 5) & 1;
        v11 = vmlaq_n_f32(v11, v18, vmul_f32(v43, v93).f32[0]);
      }
      v10.i64[0] = v11.i64[0];
      v8 = v11.u32[2];
      v11.i64[1] = vextq_s8((int8x16_t)v11, (int8x16_t)v11, 8uLL).u32[0];
      v95 = vsubq_f32(v36, v11);
      v130 = v11;
      v78 = vmulq_f32(v95, v95);
      goto LABEL_29;
    }
    LOBYTE(v76) = (a4 & 0x30) != 0;
    v130 = v16;
    v80 = vmulq_f32(v49, v49);
    v80.i64[0] = vpaddq_f32(v80, v80).u64[0];
    v75 = vpadd_f32(*(float32x2_t *)v80.f32, *(float32x2_t *)v80.f32);
    v8 = v15;
    v11 = v16;
    v10.i64[0] = v14;
  }
LABEL_30:
  if (COERCE_FLOAT(*(_QWORD *)(a1 + 3784)) <= v75.f32[0])
    return v38 >= 0.0;
  v97 = vsubq_f32(v36, v11);
  v98 = vmulq_f32(v97, v97);
  v98.i64[0] = vpaddq_f32(v98, v98).u64[0];
  v99 = vpadd_f32(*(float32x2_t *)v98.f32, *(float32x2_t *)v98.f32);
  v100 = vrsqrte_f32(v99);
  v101 = 4;
  do
  {
    v100 = vmul_f32(v100, vrsqrts_f32(vmul_f32(v100, v100), v99));
    --v101;
  }
  while (v101);
  v102 = vmul_f32(v99, (float32x2_t)vbsl_s8((int8x8_t)vdup_lane_s32(vceqz_f32(v99), 0), _D0, (int8x8_t)v100));
  v103 = vrecpe_f32(v102);
  v104 = 4;
  do
  {
    v103 = vmul_f32(v103, vrecps_f32(v102, v103));
    --v104;
  }
  while (v104);
  v77 = vmulq_n_f32(v97, v103.f32[0]);
  v77.i32[3] = 0;
LABEL_36:
  v129 = v77;
  v105 = vmulq_f32(v33, v77);
  v105.i64[0] = vpaddq_f32(v105, v105).u64[0];
  if (vpadd_f32(*(float32x2_t *)v105.f32, *(float32x2_t *)v105.f32).f32[0] > 0.996)
  {
    v111 = vrsqrte_f32(v75);
    v112 = 4;
    do
    {
      v111 = vmul_f32(v111, vrsqrts_f32(vmul_f32(v111, v111), v75));
      --v112;
    }
    while (v112);
    v113 = vmul_f32(v75, (float32x2_t)vbsl_s8((int8x8_t)vdup_lane_s32(vceqz_f32(v75), 0), _D0, (int8x8_t)v111));
    v114 = *a5;
    v115 = a5[1];
    if (*a5 >= v115)
      v116 = a5[1];
    else
      v116 = *a5;
    if (v114 <= v115)
      v114 = a5[1];
    *(_QWORD *)&v128 = __PAIR64__(v114, v116);
    physx::Gu::CacheMap<physx::Gu::CachedEdge,128u>::addData(a1 + 2452, (int *)&v128);
    v117 = a5[1];
    v118 = a5[2];
    if (v117 >= v118)
      v119 = a5[2];
    else
      v119 = a5[1];
    if (v117 <= v118)
      v117 = a5[2];
    *(_QWORD *)&v128 = __PAIR64__(v117, v119);
    physx::Gu::CacheMap<physx::Gu::CachedEdge,128u>::addData(a1 + 2452, (int *)&v128);
    v120 = a5[2];
    if (v120 >= *a5)
      v121 = *a5;
    else
      v121 = a5[2];
    if (v120 <= *a5)
      v120 = *a5;
    *(_QWORD *)&v128 = __PAIR64__(v120, v121);
    physx::Gu::CacheMap<physx::Gu::CachedEdge,128u>::addData(a1 + 2452, (int *)&v128);
    *(float32x2_t *)v122.i8 = v113;
    physx::Gu::PCMSphereVsMeshContactGeneration::addToPatch(a1, &v130, &v129, a3, v122);
  }
  else
  {
    v106 = *(_QWORD *)(a1 + 3736);
    v107 = *(_DWORD *)(v106 + 4368);
    v108 = v107 + 15;
    v126 = v8;
    v127 = v10.i64[0];
    v124 = v77;
    v125 = v75;
    if ((*(_DWORD *)(v106 + 4372) & 0x7FFFFFFFu) < v107 + 15)
    {
      physx::shdfnd::Array<unsigned int,physx::shdfnd::InlineAllocator<4352u,physx::shdfnd::ReflectionAllocator<unsigned int>>>::recreate(v106, v107 + 15);
      v75 = v125;
      v106 = *(_QWORD *)(a1 + 3736);
      v107 = *(_DWORD *)(v106 + 4368);
    }
    v109 = *(_QWORD *)(v106 + 4360) + 4 * v107;
    *(_DWORD *)(v106 + 4368) = v108;
    *(float32x2_t *)&v128 = v75;
    v110 = *(unsigned int *)(a1 + 4832);
    DWORD2(v128) = v110;
    if ((*(_DWORD *)(a1 + 4836) & 0x7FFFFFFFu) <= v110)
    {
      physx::shdfnd::Array<physx::Gu::SortedTriangle,physx::shdfnd::InlineAllocator<1024u,physx::shdfnd::ReflectionAllocator<physx::Gu::SortedTriangle>>>::growAndPushBack(a1 + 3792, &v128);
      v75 = v125;
    }
    else
    {
      *(_OWORD *)(*(_QWORD *)(a1 + 4824) + 16 * v110) = v128;
      ++*(_DWORD *)(a1 + 4832);
    }
    *(_DWORD *)(v109 + 48) = a3;
    *(_DWORD *)(v109 + 52) = 0;
    *(_BYTE *)(v109 + 56) = v76;
    *(_DWORD *)(v109 + 36) = *a5;
    *(_DWORD *)(v109 + 40) = a5[1];
    *(_DWORD *)(v109 + 44) = a5[2];
    *(_QWORD *)v109 = v127;
    *(_DWORD *)(v109 + 8) = v126;
    *(_DWORD *)(v109 + 20) = v124.i32[2];
    *(_QWORD *)(v109 + 12) = v124.i64[0];
    *(float32x2_t *)(v109 + 24) = v75;
    *(_DWORD *)(v109 + 32) = v75.i32[0];
  }
  return v38 >= 0.0;
}

int64x2_t physx::Gu::PCMSphereVsMeshContactGeneration::addToPatch(unint64_t a1, _OWORD *a2, float32x4_t *a3, int a4, int64x2_t result)
{
  int v6;
  uint64_t v7;
  float32x4_t v8;
  _QWORD *v9;
  float32x4_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int64x2_t *v14;
  unsigned int v15;
  uint64_t v16;
  int v17;
  unsigned int v18;
  uint64_t i;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  int v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t *v27;
  _QWORD *v28;
  uint64_t v29;
  uint64_t j;
  float32x4_t *v31;
  int v32;
  uint64_t v33;
  uint64_t v34;
  float32x4_t *v35;
  float32x4_t v36;
  uint64_t v37;
  uint64_t v38;
  _QWORD *v39;
  uint64_t v40;
  BOOL v41;
  uint64_t v42;
  unint64_t v43;
  unint64_t v44;
  unsigned int v45;
  unsigned int v46;
  uint64_t v47;
  float32x4_t v48;
  float32x4_t v49;
  __int128 *v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  unint64_t v54;
  _QWORD *v55;
  int64x2_t v56;
  unsigned int v57;
  uint64_t v58;
  int64x2_t v59;
  int64x2_t v60;

  v6 = *(_DWORD *)(a1 + 2444);
  if (v6
    && (v7 = (v6 - 1),
        v8 = vmulq_f32(*(float32x4_t *)(a1 + ((unint64_t)v7 << 6)), *a3),
        v8.i64[0] = vpaddq_f32(v8, v8).u64[0],
        vpadd_f32(*(float32x2_t *)v8.f32, *(float32x2_t *)v8.f32).f32[0] > COERCE_FLOAT(*(_QWORD *)(a1 + 2352))))
  {
    v54 = a1 + (v7 << 6);
    if (COERCE_FLOAT(*(_QWORD *)(v54 + 40)) > *(float *)result.i32)
    {
      v55 = (_QWORD *)(*(_QWORD *)(a1 + 2432) + ((unint64_t)*(unsigned int *)(v54 + 48) << 6));
      *v55 = 0;
      v55[1] = 0;
      *(_OWORD *)(*(_QWORD *)(a1 + 2432) + ((unint64_t)*(unsigned int *)(v54 + 48) << 6) + 16) = *a2;
      v56 = *(int64x2_t *)a3;
      v56.i32[3] = result.i32[1];
      *(int64x2_t *)(*(_QWORD *)(a1 + 2432) + ((unint64_t)*(unsigned int *)(v54 + 48) << 6) + 32) = v56;
      *(_DWORD *)(*(_QWORD *)(a1 + 2432) + ((unint64_t)*(unsigned int *)(v54 + 48) << 6) + 48) = a4;
      *(_QWORD *)(v54 + 40) = result.i64[0];
    }
  }
  else
  {
    v9 = (_QWORD *)(*(_QWORD *)(a1 + 2432) + ((unint64_t)*(unsigned int *)(a1 + 2440) << 6));
    *v9 = 0;
    v9[1] = 0;
    *(_OWORD *)(*(_QWORD *)(a1 + 2432) + ((unint64_t)*(unsigned int *)(a1 + 2440) << 6) + 16) = *a2;
    v10 = *a3;
    v10.i32[3] = result.i32[1];
    *(float32x4_t *)(*(_QWORD *)(a1 + 2432) + ((unint64_t)*(unsigned int *)(a1 + 2440) << 6) + 32) = v10;
    v11 = *(_QWORD *)(a1 + 2432);
    v12 = *(unsigned int *)(a1 + 2440);
    *(_DWORD *)(a1 + 2440) = v12 + 1;
    *(_DWORD *)(v11 + (v12 << 6) + 48) = a4;
    v13 = *(unsigned int *)(a1 + 2444);
    v14 = (int64x2_t *)(a1 + (v13 << 6));
    v14[3].i32[0] = v12;
    v14[3].i32[1] = v12 + 1;
    v14[2].i64[1] = result.i64[0];
    result = *(int64x2_t *)a3;
    *(_DWORD *)(a1 + 2444) = v13 + 1;
    *v14 = result;
  }
  v15 = *(_DWORD *)(a1 + 2440);
  if (v15 >= 0x10)
  {
    v16 = *(unsigned int *)(a1 + 2444);
    if (v16 >= 2)
    {
      v17 = 0;
      v18 = -1;
      for (i = 1; i != v16; ++i)
      {
        v20 = a1 + 8 * i;
        v21 = *(_QWORD *)(v20 + 2040);
        v22 = *(_QWORD *)(v20 + 2048);
        if (COERCE_FLOAT(*(_QWORD *)(v21 + 40)) > COERCE_FLOAT(*(_QWORD *)(v22 + 40)))
        {
          *(_QWORD *)(v20 + 2040) = v22;
          *(_QWORD *)(v20 + 2048) = v21;
          if ((int)i - 2 >= 0)
          {
            v23 = a1 + 2056 + 8 * v18;
            v24 = v17;
            do
            {
              v26 = *(_QWORD *)(v23 - 8);
              v25 = *(_QWORD *)v23;
              if (COERCE_FLOAT(*(_QWORD *)(*(_QWORD *)v23 + 40)) >= COERCE_FLOAT(*(_QWORD *)(v26 + 40)))
                break;
              *(_QWORD *)v23 = v26;
              *(_QWORD *)(v23 - 8) = v25;
              v23 -= 8;
              --v24;
            }
            while (v24 > 0);
          }
        }
        ++v18;
        ++v17;
      }
    }
    v27 = (uint64_t *)(a1 + 2048);
    v28 = (_QWORD *)(a1 + 2352);
    if ((_DWORD)v16)
    {
      v29 = 0;
      for (j = 0; j != v16; ++j)
      {
        v31 = (float32x4_t *)v27[j];
        v31[1].i64[1] = (uint64_t)v31;
        v31[2].i64[0] = (uint64_t)v31;
        v32 = v31[3].i32[1] - v31[3].i32[0];
        v31[3].i32[2] = v32;
        v31[1].i64[0] = 0;
        v33 = v29;
        while (v33)
        {
          v34 = *(_QWORD *)(a1 + 2040 + v33);
          v35 = *(float32x4_t **)(v34 + 32);
          v36 = vmulq_f32(*v31, *v35);
          v36.i64[0] = vpaddq_f32(v36, v36).u64[0];
          v33 -= 8;
          if (vpadd_f32(*(float32x2_t *)v36.f32, *(float32x2_t *)v36.f32).f32[0] >= COERCE_FLOAT(*v28))
          {
            *(_QWORD *)(v34 + 16) = v31;
            v35[1].i64[1] = (uint64_t)v31;
            v31[2].i64[0] = (uint64_t)v35;
            *(_DWORD *)(*(_QWORD *)(v34 + 32) + 56) += v32;
            break;
          }
        }
        v29 += 8;
      }
      v37 = 0;
      v38 = *(_QWORD *)(a1 + 2432);
      v39 = (_QWORD *)(a1 + 2360);
      do
      {
        v40 = v27[v37];
        if (v40)
          v41 = *(_QWORD *)(v40 + 32) == v40;
        else
          v41 = 0;
        if (v41)
        {
          while (*(_QWORD *)(v40 + 16))
          {
            v42 = v40;
            v40 = *(_QWORD *)(v40 + 16);
            v43 = *(unsigned int *)(v42 + 48);
            v44 = *(unsigned int *)(v42 + 52);
            if (v43 < v44)
            {
              v45 = *(_DWORD *)(v40 + 52);
              do
              {
                v46 = *(_DWORD *)(v40 + 48);
                if (v46 < v45)
                {
                  do
                  {
                    v47 = v38 + ((unint64_t)v46 << 6);
                    v48 = vsubq_f32(*(float32x4_t *)(v47 + 16), *(float32x4_t *)(v38 + (v43 << 6) + 16));
                    v49 = vmulq_f32(v48, v48);
                    v49.i64[0] = vpaddq_f32(v49, v49).u64[0];
                    if (COERCE_FLOAT(*v39) > vpadd_f32(*(float32x2_t *)v49.f32, *(float32x2_t *)v49.f32).f32[0])
                    {
                      v50 = (__int128 *)(v38 + ((unint64_t)(v45 - 1) << 6));
                      v51 = *v50;
                      v52 = v50[1];
                      v53 = v50[2];
                      *(_DWORD *)(v47 + 48) = *((_DWORD *)v50 + 12);
                      *(_OWORD *)(v47 + 16) = v52;
                      *(_OWORD *)(v47 + 32) = v53;
                      *(_OWORD *)v47 = v51;
                      v45 = *(_DWORD *)(v40 + 52) - 1;
                      *(_DWORD *)(v40 + 52) = v45;
                      --v46;
                    }
                    ++v46;
                  }
                  while (v46 < v45);
                  v44 = *(unsigned int *)(v42 + 52);
                }
                ++v43;
              }
              while (v43 < v44);
            }
          }
        }
        ++v37;
      }
      while (v37 != v16);
      v15 = *(_DWORD *)(a1 + 2440);
      v57 = *(_DWORD *)(a1 + 2444);
    }
    else
    {
      v57 = 0;
      v39 = (_QWORD *)(a1 + 2360);
    }
    physx::Gu::MultiplePersistentContactManifold::addManifoldContactPoints(*(_QWORD *)(a1 + 2336), *(_QWORD *)(a1 + 2432), v15, v27, v57, (uint64_t)v39, v28, 1);
    *(_QWORD *)(a1 + 2440) = 0;
    result = (int64x2_t)xmmword_2260E7EE0;
    v58 = 2048;
    v59 = vdupq_n_s64(a1);
    v60 = vdupq_n_s64(2uLL);
    do
    {
      *(int64x2_t *)(a1 + v58) = vaddq_s64(v59, vshlq_n_s64(result, 6uLL));
      result = vaddq_s64(result, v60);
      v58 += 16;
    }
    while (v58 != 2304);
  }
  return result;
}

void physx::Gu::PCMSphereVsMeshContactGeneration::generateLastContacts(physx::Gu::PCMSphereVsMeshContactGeneration *this)
{
  uint64_t v1;
  int v2;
  int v3;
  _OWORD *v4;
  int v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  __int128 v9;
  _QWORD *v10;
  uint64_t v11;
  __int128 v12;
  __int128 v13;
  uint64_t v14;
  __int128 *v15;
  __int128 v16;
  int v17;
  uint64_t v18;
  __int128 *v19;
  uint64_t v20;
  __int128 *v21;
  uint64_t v22;
  __int128 v23;
  __int128 v24;
  unsigned __int32 v25;
  unsigned __int32 v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  int v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t *v34;
  int v35;
  uint64_t v36;
  __int128 v37;
  __int32 v38;
  uint64_t v40;
  uint64_t v41;
  char *v42;
  unsigned int v47;
  uint64_t v48;
  unsigned int v49;
  unsigned int v50;
  unsigned int v51;
  int v52;
  unsigned int v53;
  unsigned int v54;
  int v55;
  unsigned int v56;
  unsigned int v57;
  int v58;
  unsigned int v59;
  unsigned int v60;
  int v61;
  uint64_t v62;
  __int128 v63;
  int64x2_t v64;
  float32x2_t v65;
  int v66;
  uint64_t v67;
  float32x4_t v69;
  _OWORD *v70;
  char v71;
  void *v72;
  char v73;
  _OWORD v74[8];
  uint64_t v75;

  v75 = *MEMORY[0x24BDAC8D0];
  v67 = *((unsigned int *)this + 1208);
  if (!(_DWORD)v67)
    return;
  v1 = *((_QWORD *)this + 603);
  v73 = 0;
  v72 = v74;
  *(uint64_t *)((char *)v69.i64 + 4) = 0x2000000000;
  v70 = v74;
  v71 = 0;
  v2 = v67 - 1;
  if ((int)v67 - 1 < 1)
    goto LABEL_44;
  v3 = 0;
  v4 = v74;
  memset(v74, 0, sizeof(v74));
  while (1)
  {
    while (1)
    {
      if (v2 <= v3)
        goto LABEL_36;
      if ((v2 - v3) <= 4)
        break;
      v5 = v3 + v2;
      if (v3 + v2 < 0 != __OFADD__(v3, v2))
        ++v5;
      v6 = (_QWORD *)(v1 + 16 * (v5 >> 1));
      v7 = (_QWORD *)(v1 + 16 * v3);
      v8 = *v7;
      if (COERCE_FLOAT(*v6) < COERCE_FLOAT(*v7))
      {
        v9 = *(_OWORD *)v7;
        *(_OWORD *)v7 = *(_OWORD *)v6;
        *(_OWORD *)v6 = v9;
        v8 = *v7;
      }
      v10 = (_QWORD *)(v1 + 16 * v2);
      v11 = *v10;
      if (COERCE_FLOAT(*v10) < *(float *)&v8)
      {
        v12 = *(_OWORD *)v7;
        *(_OWORD *)v7 = *(_OWORD *)v10;
        *(_OWORD *)v10 = v12;
        v11 = *v10;
      }
      if (*(float *)&v11 < COERCE_FLOAT(*v6))
      {
        v13 = *(_OWORD *)v6;
        *(_OWORD *)v6 = *(_OWORD *)v10;
        *(_OWORD *)v10 = v13;
      }
      v14 = v2 - 1;
      v15 = (__int128 *)(v1 + 16 * v14);
      v16 = *(_OWORD *)v6;
      *(_OWORD *)v6 = *v15;
      *v15 = v16;
      v17 = v3;
      while (1)
      {
        v18 = *(_QWORD *)v15;
        v19 = (__int128 *)(v1 + 16 * v17);
        do
        {
          v20 = *((_QWORD *)v19++ + 2);
          ++v17;
        }
        while (*(float *)&v20 < *(float *)&v18);
        v21 = (__int128 *)(v1 + 16 * (int)v14);
        do
        {
          v22 = *((_QWORD *)v21-- - 2);
          LODWORD(v14) = v14 - 1;
        }
        while (*(float *)&v18 < *(float *)&v22);
        if (v17 >= (int)v14)
          break;
        v23 = *v19;
        *v19 = *v21;
        *v21 = v23;
      }
      v24 = *v19;
      *v19 = *v15;
      *v15 = v24;
      v25 = v69.u32[1];
      v26 = v69.i32[2] - 1;
      if (v17 - v3 >= v2 - v17)
      {
        if (v69.i32[1] >= v26)
        {
          physx::shdfnd::internal::Stack<physx::shdfnd::ReflectionAllocator<physx::Gu::SortedTriangle>>::grow((uint64_t)&v69);
          v25 = v69.u32[1];
          v4 = v70;
        }
        v69.i32[1] = v25 + 1;
        *((_DWORD *)v4 + v25) = v17 + 1;
        v28 = v69.u32[1];
        ++v69.i32[1];
        *((_DWORD *)v4 + v28) = v2;
        v2 = v17 - 1;
      }
      else
      {
        if (v69.i32[1] >= v26)
        {
          physx::shdfnd::internal::Stack<physx::shdfnd::ReflectionAllocator<physx::Gu::SortedTriangle>>::grow((uint64_t)&v69);
          v25 = v69.u32[1];
          v4 = v70;
        }
        v69.i32[1] = v25 + 1;
        *((_DWORD *)v4 + v25) = v3;
        v27 = v69.u32[1];
        ++v69.i32[1];
        *((_DWORD *)v4 + v27) = v17 - 1;
        v3 = v17 + 1;
      }
    }
    v29 = v3;
    v30 = v3 + 1;
    v31 = v1 + 16 + 16 * v3;
    do
    {
      v32 = 0;
      v33 = v29++;
      v34 = (uint64_t *)v31;
      v35 = v33;
      do
      {
        v36 = *v34;
        v34 += 2;
        if (*(float *)&v36 < COERCE_FLOAT(*(_QWORD *)(v1 + 16 * v35)))
          v35 = v30 + v32;
        ++v32;
      }
      while (v33 + v32 < v2);
      if (v35 != (_DWORD)v33)
      {
        v37 = *(_OWORD *)(v1 + 16 * v35);
        *(_OWORD *)(v1 + 16 * v35) = *(_OWORD *)(v1 + 16 * v33);
        *(_OWORD *)(v1 + 16 * v33) = v37;
      }
      ++v30;
      v31 += 16;
    }
    while (v29 != v2);
LABEL_36:
    v38 = v69.i32[1];
    if (!v69.i32[1])
      break;
    --v69.i32[1];
    v2 = *((_DWORD *)v4 + (v38 - 1));
    v69.i32[1] = v38 - 2;
    v3 = *((_DWORD *)v4 + (v38 - 2));
  }
  if (v71)
    _ZF = v4 == 0;
  else
    _ZF = 1;
  if (!_ZF)
  {
    (*(void (**)(uint64_t, _OWORD *))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24, v4);
    if (v73)
      physx::shdfnd::TempAllocator::deallocate((physx::shdfnd::TempAllocator *)&v72, (char *)v72);
  }
LABEL_44:
  v40 = 0;
  v41 = *(_QWORD *)(*((_QWORD *)this + 467) + 4360);
  v42 = (char *)this + 2452;
  __asm { FMOV            V8.2S, #1.0 }
  do
  {
    v47 = *(_DWORD *)(*((_QWORD *)this + 603) + 16 * v40 + 8);
    v48 = v41 + 60 * v47;
    v50 = *(_DWORD *)(v48 + 36);
    v49 = *(_DWORD *)(v48 + 40);
    v51 = *(_DWORD *)(v48 + 44);
    v52 = *(unsigned __int8 *)(v48 + 56);
    if (v50 >= v49)
      v53 = *(_DWORD *)(v48 + 40);
    else
      v53 = *(_DWORD *)(v48 + 36);
    if (v50 <= v49)
      v54 = v49;
    else
      v54 = v50;
    *(_QWORD *)&v74[0] = __PAIR64__(v54, v53);
    v55 = physx::Gu::CacheMap<physx::Gu::CachedEdge,128u>::addData((uint64_t)v42, (int *)v74);
    if (v49 >= v51)
      v56 = v51;
    else
      v56 = v49;
    if (v49 <= v51)
      v57 = v51;
    else
      v57 = v49;
    *(_QWORD *)&v74[0] = __PAIR64__(v57, v56);
    v58 = physx::Gu::CacheMap<physx::Gu::CachedEdge,128u>::addData((uint64_t)v42, (int *)v74);
    if (v51 >= v50)
      v59 = v50;
    else
      v59 = v51;
    if (v51 <= v50)
      v60 = v50;
    else
      v60 = v51;
    *(_QWORD *)&v74[0] = __PAIR64__(v60, v59);
    v61 = physx::Gu::CacheMap<physx::Gu::CachedEdge,128u>::addData((uint64_t)v42, (int *)v74);
    if (v55 && v58 && v61 && v52)
    {
      v62 = v41 + 60 * v47;
      *(_QWORD *)&v63 = *(_QWORD *)v62;
      *((_QWORD *)&v63 + 1) = *(unsigned int *)(v62 + 8);
      v74[0] = v63;
      *(_QWORD *)&v63 = *(_QWORD *)(v62 + 12);
      v64.i64[1] = *(unsigned int *)(v62 + 20);
      v69 = (float32x4_t)v64;
      v62 += 24;
      *(float32x2_t *)v64.i8 = vld1_dup_f32((const float *)v62);
      v65 = vrsqrte_f32(*(float32x2_t *)v64.i8);
      v66 = 4;
      do
      {
        v65 = vmul_f32(v65, vrsqrts_f32(vmul_f32(v65, v65), *(float32x2_t *)v64.i8));
        --v66;
      }
      while (v66);
      *(float32x2_t *)v64.i8 = vmul_f32(*(float32x2_t *)v64.i8, (float32x2_t)vbsl_s8((int8x8_t)vdup_lane_s32(vceqz_f32(*(float32x2_t *)v64.i8), 0), _D8, (int8x8_t)v65));
      physx::Gu::PCMSphereVsMeshContactGeneration::addToPatch((unint64_t)this, v74, &v69, *(_DWORD *)(v41 + 60 * v47 + 48), v64);
    }
    ++v40;
  }
  while (v40 != v67);
}

__n128 physx::Gu::PCMCapsuleVsMeshContactGeneration::generateEE(int8x8_t *a1, int a2, uint64_t a3, _DWORD *a4, __n128 result, float32x4_t a6, float32x2_t a7, float32x4_t a8, float32x4_t a9)
{
  float32x4_t v9;
  float32x4_t v10;
  float32x2_t v11;
  float32x2_t v12;
  int8x8_t v13;
  float32x4_t v14;
  float32x4_t v15;
  float32x2_t v16;
  float32x4_t v17;
  float32x2_t v18;
  float32x4_t v19;
  float32x4_t v20;
  float32x4_t v21;
  float32x2_t v22;
  float32x2_t v23;
  int v24;
  int8x8_t v25;
  float32x4_t v26;
  float32x4_t v27;
  int8x16_t v28;
  float32x2_t v29;
  float32x4_t v30;
  float32x2_t v31;
  float32x2_t v32;
  int v33;
  float32x2_t v34;
  float32x2_t v35;
  float32x4_t v41;
  uint64_t v42;
  float32x2_t v43;
  float32x4_t v44;
  float32x4_t v45;
  uint64_t v46;

  v9 = vsubq_f32(a9, a8);
  v10 = *(float32x4_t *)a1->i8;
  v11 = (float32x2_t)vextq_s8((int8x16_t)v10, (int8x16_t)v10, 8uLL).u64[0];
  v12 = (float32x2_t)vext_s8(*a1, (int8x8_t)v11, 4uLL);
  v13 = (int8x8_t)vmls_f32(vmul_f32(*(float32x2_t *)v9.f32, v12), (float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v9, (int8x16_t)v9, 4uLL), (float32x2_t)*a1);
  *(int8x8_t *)v14.f32 = vext_s8(v13, (int8x8_t)vmls_f32(vmul_f32((float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v9, (int8x16_t)v9, 8uLL), (float32x2_t)*a1), *(float32x2_t *)v9.f32, v11), 4uLL);
  v14.i64[1] = v13.u32[0];
  v15 = vmulq_f32(v14, a8);
  v15.i64[0] = vpaddq_f32(v15, v15).u64[0];
  v16 = vpadd_f32(*(float32x2_t *)v15.f32, *(float32x2_t *)v15.f32);
  v17 = vmulq_f32(v14, (float32x4_t)result);
  v17.i64[0] = vpaddq_f32(v17, v17).u64[0];
  v18 = vpadd_f32(*(float32x2_t *)v17.f32, *(float32x2_t *)v17.f32);
  v19 = vmulq_f32(v14, a6);
  v19.i64[0] = vpaddq_f32(v19, v19).u64[0];
  if (vmul_f32(vsub_f32(v18, v16), vsub_f32(vpadd_f32(*(float32x2_t *)v19.f32, *(float32x2_t *)v19.f32), v16)).f32[0] <= 0.0)
  {
    v20 = vsubq_f32(a6, (float32x4_t)result);
    v21 = vmulq_f32(v20, v14);
    v21.i64[0] = vpaddq_f32(v21, v21).u64[0];
    v22 = vpadd_f32(*(float32x2_t *)v21.f32, *(float32x2_t *)v21.f32);
    if (v22.f32[0] != 0.0)
    {
      v23 = vrecpe_f32(v22);
      v24 = 4;
      do
      {
        v23 = vmul_f32(v23, vrecps_f32(v22, v23));
        --v24;
      }
      while (v24);
      result = (__n128)vmlaq_n_f32((float32x4_t)result, v20, vmul_f32(vsub_f32(v16, v18), v23).f32[0]);
      result.n128_u64[1] = vextq_s8((int8x16_t)result, (int8x16_t)result, 8uLL).u32[0];
      v25 = (int8x8_t)vmls_f32(vmul_f32((float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v20, (int8x16_t)v20, 4uLL), *(float32x2_t *)v10.f32), v12, *(float32x2_t *)v20.f32);
      *(int8x8_t *)v26.f32 = vext_s8(v25, (int8x8_t)vmls_f32(vmul_f32(*(float32x2_t *)v20.f32, v11), *(float32x2_t *)v10.f32, (float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v20, (int8x16_t)v20, 8uLL)), 4uLL);
      v26.i64[1] = v25.u32[0];
      v27 = vsubq_f32((float32x4_t)result, a8);
      v28 = (int8x16_t)vmulq_f32(v26, v27);
      v29 = (float32x2_t)vextq_s8(v28, v28, 8uLL).u64[0];
      v30 = vmulq_f32(v9, v26);
      v30.i64[0] = vpaddq_f32(v30, v30).u64[0];
      v31 = vpadd_f32(*(float32x2_t *)v30.f32, *(float32x2_t *)v30.f32);
      v32 = vrecpe_f32(v31);
      v33 = 4;
      do
      {
        v32 = vmul_f32(v32, vrecps_f32(v31, v32));
        --v33;
      }
      while (v33);
      v34 = vpadd_f32(*(float32x2_t *)v28.i8, v29);
      v35 = vmul_f32(v32, vpadd_f32(v34, v34));
      __asm { FMOV            V6.2S, #1.0 }
      if (vuzp1_s8((int8x8_t)vdup_lane_s16((int16x4_t)vorn_s8(vmvn_s8((int8x8_t)vcge_f32(_D6, v35)), (int8x8_t)vcgez_f32(v35)), 0), (int8x8_t)result.n128_u64[0]).u32[0] != -1)
      {
        v41 = vmlsq_lane_f32(v27, v9, v35, 0);
        v42 = vextq_s8((int8x16_t)v41, (int8x16_t)v41, 8uLL).u32[0];
        v43 = vpadd_f32(vmul_f32(*(float32x2_t *)v41.f32, *(float32x2_t *)v41.f32), vmul_f32((float32x2_t)v42, (float32x2_t)v42));
        if ((vmvn_s8((int8x8_t)vcgt_f32(a7, vpadd_f32(v43, v43))).u8[0] & 1) == 0)
        {
          v41.i64[1] = v42;
          v44 = vsubq_f32((float32x4_t)result, v41);
          v45 = vmulq_f32(v10, v41);
          v45.i64[0] = vpaddq_f32(v45, v45).u64[0];
          *(__n128 *)(a3 + ((unint64_t)*a4 << 6)) = result;
          *(float32x4_t *)(a3 + ((unint64_t)*a4 << 6) + 16) = v44;
          result = *(__n128 *)a1->i8;
          result.n128_u32[3] = vpadd_f32(*(float32x2_t *)&v45, *(float32x2_t *)&v45).u32[1];
          *(__n128 *)(a3 + ((unint64_t)*a4 << 6) + 32) = result;
          v46 = *a4;
          *a4 = v46 + 1;
          *(_DWORD *)(a3 + (v46 << 6) + 48) = a2;
        }
      }
    }
  }
  return result;
}

__n128 physx::Gu::PCMCapsuleVsMeshContactGeneration::generateEEMTD(int8x8_t *a1, int a2, uint64_t a3, _DWORD *a4, __n128 result, float32x4_t a6, float32x2_t a7, float32x4_t a8, float32x4_t a9)
{
  float32x4_t v9;
  float32x4_t v10;
  float32x2_t v11;
  float32x2_t v12;
  int8x8_t v13;
  float32x4_t v14;
  float32x4_t v15;
  float32x2_t v16;
  float32x4_t v17;
  float32x2_t v18;
  float32x4_t v19;
  float32x4_t v20;
  float32x4_t v21;
  float32x2_t v22;
  float32x2_t v23;
  int v24;
  int8x8_t v25;
  float32x4_t v26;
  float32x4_t v27;
  int8x16_t v28;
  float32x2_t v29;
  float32x4_t v30;
  float32x2_t v31;
  float32x2_t v32;
  int v33;
  float32x2_t v34;
  float32x4_t v40;
  float32x4_t v41;
  float32x2_t v42;
  uint64_t v43;

  v9 = vsubq_f32(a9, a8);
  v10 = *(float32x4_t *)a1->i8;
  v11 = (float32x2_t)vextq_s8((int8x16_t)v10, (int8x16_t)v10, 8uLL).u64[0];
  v12 = (float32x2_t)vext_s8(*a1, (int8x8_t)v11, 4uLL);
  v13 = (int8x8_t)vmls_f32(vmul_f32(*(float32x2_t *)v9.f32, v12), (float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v9, (int8x16_t)v9, 4uLL), (float32x2_t)*a1);
  *(int8x8_t *)v14.f32 = vext_s8(v13, (int8x8_t)vmls_f32(vmul_f32((float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v9, (int8x16_t)v9, 8uLL), (float32x2_t)*a1), *(float32x2_t *)v9.f32, v11), 4uLL);
  v14.i64[1] = v13.u32[0];
  v15 = vmulq_f32(v14, a8);
  v15.i64[0] = vpaddq_f32(v15, v15).u64[0];
  v16 = vpadd_f32(*(float32x2_t *)v15.f32, *(float32x2_t *)v15.f32);
  v17 = vmulq_f32(v14, (float32x4_t)result);
  v17.i64[0] = vpaddq_f32(v17, v17).u64[0];
  v18 = vpadd_f32(*(float32x2_t *)v17.f32, *(float32x2_t *)v17.f32);
  v19 = vmulq_f32(v14, a6);
  v19.i64[0] = vpaddq_f32(v19, v19).u64[0];
  if (vmul_f32(vsub_f32(v18, v16), vsub_f32(vpadd_f32(*(float32x2_t *)v19.f32, *(float32x2_t *)v19.f32), v16)).f32[0] <= 0.0)
  {
    v20 = vsubq_f32(a6, (float32x4_t)result);
    v21 = vmulq_f32(v20, v14);
    v21.i64[0] = vpaddq_f32(v21, v21).u64[0];
    v22 = vpadd_f32(*(float32x2_t *)v21.f32, *(float32x2_t *)v21.f32);
    if (v22.f32[0] != 0.0)
    {
      v23 = vrecpe_f32(v22);
      v24 = 4;
      do
      {
        v23 = vmul_f32(v23, vrecps_f32(v22, v23));
        --v24;
      }
      while (v24);
      result = (__n128)vmlaq_n_f32((float32x4_t)result, v20, vmul_f32(vsub_f32(v16, v18), v23).f32[0]);
      result.n128_u64[1] = vextq_s8((int8x16_t)result, (int8x16_t)result, 8uLL).u32[0];
      v25 = (int8x8_t)vmls_f32(vmul_f32((float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v20, (int8x16_t)v20, 4uLL), *(float32x2_t *)v10.f32), v12, *(float32x2_t *)v20.f32);
      *(int8x8_t *)v26.f32 = vext_s8(v25, (int8x8_t)vmls_f32(vmul_f32(*(float32x2_t *)v20.f32, v11), *(float32x2_t *)v10.f32, (float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v20, (int8x16_t)v20, 8uLL)), 4uLL);
      v26.i64[1] = v25.u32[0];
      v27 = vsubq_f32((float32x4_t)result, a8);
      v28 = (int8x16_t)vmulq_f32(v26, v27);
      v29 = (float32x2_t)vextq_s8(v28, v28, 8uLL).u64[0];
      v30 = vmulq_f32(v9, v26);
      v30.i64[0] = vpaddq_f32(v30, v30).u64[0];
      v31 = vpadd_f32(*(float32x2_t *)v30.f32, *(float32x2_t *)v30.f32);
      v32 = vrecpe_f32(v31);
      v33 = 4;
      do
      {
        v32 = vmul_f32(v32, vrecps_f32(v31, v32));
        --v33;
      }
      while (v33);
      v34 = vpadd_f32(*(float32x2_t *)v28.i8, v29);
      __asm { FMOV            V6.2S, #1.0 }
      v40 = vmlsq_lane_f32(v27, v9, vmax_f32(vmin_f32(vmul_f32(v32, vpadd_f32(v34, v34)), _D6), 0), 0);
      v40.i64[1] = vextq_s8((int8x16_t)v40, (int8x16_t)v40, 8uLL).u32[0];
      v41 = vmulq_f32(v10, v40);
      v41.i64[0] = vpaddq_f32(v41, v41).u64[0];
      v42 = vpadd_f32(*(float32x2_t *)v41.f32, *(float32x2_t *)v41.f32);
      if ((vmvn_s8((int8x8_t)vcgt_f32(a7, v42)).u8[0] & 1) == 0)
      {
        *(__n128 *)(a3 + ((unint64_t)*a4 << 6)) = result;
        *(float32x4_t *)(a3 + ((unint64_t)*a4 << 6) + 16) = vsubq_f32((float32x4_t)result, v40);
        result = *(__n128 *)a1->i8;
        result.n128_u32[3] = v42.u32[1];
        *(__n128 *)(a3 + ((unint64_t)*a4 << 6) + 32) = result;
        v43 = *a4;
        *a4 = v43 + 1;
        *(_DWORD *)(a3 + (v43 << 6) + 48) = a2;
      }
    }
  }
  return result;
}

float32x4_t physx::Gu::PCMCapsuleVsMeshContactGeneration::generateContacts(float32x4_t *a1, float32x4_t *a2, float32x4_t *a3, int a4, float32x4_t *a5, float32x2_t *a6, uint64_t a7, _DWORD *a8, float32x4_t a9, float32x4_t a10, float32x4_t a11)
{
  float32x4_t v11;
  float32x4_t v12;
  float32x4_t v13;
  float32x4_t result;
  float32x4_t v15;
  float32x2_t v16;
  float32x4_t v17;
  float32x2_t v18;
  float32x2_t v19;
  float32x2_t v20;
  int v21;
  float32x4_t v22;
  float32x4_t v23;
  float32x4_t v24;
  int8x16_t v25;
  float32x2_t v26;
  float32x4_t v27;
  float32x2_t v28;
  float32x2_t v29;
  int v30;
  float32x2_t v31;
  float32x2_t v32;
  int8x8_t v33;
  int8x8_t v34;
  float32x4_t v35;
  float32x4_t v36;
  float32x2_t v37;
  float32x4_t v38;
  float32x4_t v39;
  float32x4_t v40;
  float32x4_t v41;
  float32x2_t v42;
  float32x2_t v43;
  float32x4_t v44;
  float32x4_t v45;
  uint64_t v46;
  float32x4_t v47;
  float32x4_t v48;
  float32x2_t v49;
  int8x16_t v50;
  float32x2_t v51;
  int v52;
  float32x2_t v53;
  float32x2_t v54;
  float32x4_t v55;
  float32x4_t v56;
  float32x4_t v57;
  float32x4_t v58;
  float32x2_t v59;
  float32x2_t v60;
  int8x8_t v61;
  uint64_t v62;

  v11 = *a1;
  v12 = vsubq_f32(a9, *a1);
  v13 = vsubq_f32(a10, *a1);
  result = vmulq_f32(v12, v12);
  result.i64[0] = vpaddq_f32(result, result).u64[0];
  *(float32x2_t *)result.f32 = vpadd_f32(*(float32x2_t *)result.f32, *(float32x2_t *)result.f32);
  v15 = vmulq_f32(v12, v13);
  v15.i64[0] = vpaddq_f32(v15, v15).u64[0];
  v16 = vpadd_f32(*(float32x2_t *)v15.f32, *(float32x2_t *)v15.f32);
  v17 = vmulq_f32(v13, v13);
  v17.i64[0] = vpaddq_f32(v17, v17).u64[0];
  v18 = vpadd_f32(*(float32x2_t *)v17.f32, *(float32x2_t *)v17.f32);
  v19 = vsub_f32(vmul_f32(*(float32x2_t *)result.f32, v18), vmul_f32(v16, v16));
  v20 = vrecpe_f32(v19);
  v21 = 4;
  do
  {
    v20 = vmul_f32(v20, vrecps_f32(v19, v20));
    --v21;
  }
  while (v21);
  v22 = vsubq_f32(a11, v11);
  v23 = *a2;
  v24 = vnegq_f32(v22);
  v24.i32[3] = 0;
  v25 = (int8x16_t)vmulq_f32(v24, *a2);
  v26 = (float32x2_t)vextq_s8(v25, v25, 8uLL).u64[0];
  v27 = vmulq_f32(*a2, *a3);
  v27.i64[0] = vpaddq_f32(v27, v27).u64[0];
  v28 = vpadd_f32(*(float32x2_t *)v27.f32, *(float32x2_t *)v27.f32);
  v29 = vrecpe_f32(v28);
  v30 = 4;
  v31 = v29;
  do
  {
    v31 = vmul_f32(v31, vrecps_f32(v28, v31));
    --v30;
  }
  while (v30);
  v32 = vpadd_f32(*(float32x2_t *)v25.i8, v26);
  v33 = (int8x8_t)vmul_f32(v31, vpadd_f32(v32, v32));
  v34 = (int8x8_t)vdup_lane_s32(vcgtz_f32(v28), 0);
  *(int8x8_t *)v35.f32 = vand_s8(v34, v33);
  v36 = vmulq_f32(v22, v23);
  v36.i64[0] = vpaddq_f32(v36, v36).u64[0];
  v37 = vpadd_f32(*(float32x2_t *)v36.f32, *(float32x2_t *)v36.f32);
  v38 = vmlaq_n_f32(a11, *a3, v35.f32[0]);
  v38.i64[1] = vextq_s8((int8x16_t)v38, (int8x16_t)v38, 8uLL).u32[0];
  v39 = vsubq_f32(v38, v11);
  v40 = vmulq_f32(v12, v39);
  v40.i64[0] = vpaddq_f32(v40, v40).u64[0];
  *(float32x2_t *)v40.f32 = vpadd_f32(*(float32x2_t *)v40.f32, *(float32x2_t *)v40.f32);
  v41 = vmulq_f32(v13, v39);
  v41.i64[0] = vpaddq_f32(v41, v41).u64[0];
  *(float32x2_t *)v41.f32 = vpadd_f32(*(float32x2_t *)v41.f32, *(float32x2_t *)v41.f32);
  v42 = vmul_f32(v20, vsub_f32(vmul_f32(v18, *(float32x2_t *)v40.f32), vmul_f32(v16, *(float32x2_t *)v41.f32)));
  *(float32x2_t *)v41.f32 = vmul_f32(v20, vsub_f32(vmul_f32(*(float32x2_t *)result.f32, *(float32x2_t *)v41.f32), vmul_f32(v16, *(float32x2_t *)v40.f32)));
  v43 = (float32x2_t)vdup_n_s32(0x3F800001u);
  v44 = vsubq_f32(*a5, v11);
  if (vuzp1_s8((int8x8_t)vcltz_s16(vshl_n_s16(vdup_lane_s16((int16x4_t)vand_s8(vand_s8(vand_s8(vand_s8((int8x8_t)vcge_f32(v43, v42), (int8x8_t)vcgt_f32(*a6, v37)), vand_s8((int8x8_t)vcge_f32(v42, (float32x2_t)0xB4000000B4000000), (int8x8_t)vcge_f32(v43, *(float32x2_t *)v41.f32))), (int8x8_t)vcge_f32(*(float32x2_t *)v41.f32, (float32x2_t)0xB4000000B4000000)), (int8x8_t)vcgt_f32(v43, vadd_f32(v42, *(float32x2_t *)v41.f32))), 0), 0xFuLL)), *(int8x8_t *)result.f32).u32[0] == -1)
  {
    *(float32x4_t *)(a7 + ((unint64_t)*a8 << 6)) = a11;
    *(float32x4_t *)(a7 + ((unint64_t)*a8 << 6) + 16) = v38;
    v45 = *a3;
    v35.i64[1] = v35.i64[0];
    v45.i32[3] = vnegq_f32(v35).i32[3];
    *(float32x4_t *)(a7 + ((unint64_t)*a8 << 6) + 32) = v45;
    v46 = *a8;
    *a8 = v46 + 1;
    *(_DWORD *)(a7 + (v46 << 6) + 48) = a4;
    v23 = *a2;
  }
  v47 = vnegq_f32(v44);
  v47.i32[3] = 0;
  v48 = vmulq_f32(v47, v23);
  v49 = (float32x2_t)vextq_s8((int8x16_t)v48, (int8x16_t)v48, 8uLL).u64[0];
  v50 = (int8x16_t)vmulq_f32(v44, v23);
  v51 = (float32x2_t)vextq_s8(v50, v50, 8uLL).u64[0];
  v52 = 4;
  do
  {
    v29 = vmul_f32(v29, vrecps_f32(v28, v29));
    --v52;
  }
  while (v52);
  v53 = vpadd_f32(*(float32x2_t *)v48.f32, v49);
  v54 = vpadd_f32(*(float32x2_t *)v50.i8, v51);
  *(int8x8_t *)v48.f32 = vand_s8(v34, (int8x8_t)vmul_f32(v29, vpadd_f32(v53, v53)));
  v55 = vmlaq_n_f32(*a5, *a3, v48.f32[0]);
  v55.i64[1] = vextq_s8((int8x16_t)v55, (int8x16_t)v55, 8uLL).u32[0];
  v56 = vsubq_f32(v55, *a1);
  v57 = vmulq_f32(v12, v56);
  v57.i64[0] = vpaddq_f32(v57, v57).u64[0];
  *(float32x2_t *)v57.f32 = vpadd_f32(*(float32x2_t *)v57.f32, *(float32x2_t *)v57.f32);
  v58 = vmulq_f32(v13, v56);
  v58.i64[0] = vpaddq_f32(v58, v58).u64[0];
  *(float32x2_t *)v58.f32 = vpadd_f32(*(float32x2_t *)v58.f32, *(float32x2_t *)v58.f32);
  v59 = vmul_f32(v20, vsub_f32(vmul_f32(v18, *(float32x2_t *)v57.f32), vmul_f32(v16, *(float32x2_t *)v58.f32)));
  v60 = vmul_f32(v20, vsub_f32(vmul_f32(*(float32x2_t *)result.f32, *(float32x2_t *)v58.f32), vmul_f32(v16, *(float32x2_t *)v57.f32)));
  *(int32x2_t *)v57.f32 = vdup_n_s32(0x3F800001u);
  v61 = (int8x8_t)vcltz_s16(vshl_n_s16(vdup_lane_s16((int16x4_t)vand_s8(vand_s8(vand_s8(vand_s8((int8x8_t)vcge_f32(*(float32x2_t *)v57.f32, v59), (int8x8_t)vcgt_f32(*a6, vpadd_f32(v54, v54))), vand_s8((int8x8_t)vcge_f32(v59, (float32x2_t)0xB4000000B4000000), (int8x8_t)vcge_f32(*(float32x2_t *)v57.f32, v60))), (int8x8_t)vcge_f32(v60, (float32x2_t)0xB4000000B4000000)), (int8x8_t)vcgt_f32(*(float32x2_t *)v57.f32, vadd_f32(v59, v60))), 0), 0xFuLL));
  *(int8x8_t *)result.f32 = vuzp1_s8(v61, v61);
  if (result.i32[0] == -1)
  {
    *(float32x4_t *)(a7 + ((unint64_t)*a8 << 6)) = *a5;
    *(float32x4_t *)(a7 + ((unint64_t)*a8 << 6) + 16) = v55;
    v48.i64[1] = v48.i64[0];
    result = *a3;
    result.i32[3] = vnegq_f32(v48).i32[3];
    *(float32x4_t *)(a7 + ((unint64_t)*a8 << 6) + 32) = result;
    v62 = *a8;
    *a8 = v62 + 1;
    *(_DWORD *)(a7 + (v62 << 6) + 48) = a4;
  }
  return result;
}

_QWORD *physx::Gu::pcmDistanceSegmentTriangleSquared(_QWORD *result, _QWORD *a2, _QWORD *a3, float32x4_t a4, float32x4_t a5, float32x4_t a6, float32x4_t a7, float32x4_t a8)
{
  float32x4_t v8;
  float32x4_t v9;
  int8x8_t v10;
  float32x4_t v11;
  float32x2_t v12;
  float32x2_t v13;
  float32x2_t v14;
  int v15;
  float32x4_t v16;
  float32x2_t v22;
  float32x2_t v23;
  int v24;
  int32x4_t v25;
  float32x4_t v26;
  int32x4_t v27;
  int32x4_t v28;
  int32x4_t v29;
  float32x4_t v30;
  int32x4_t v31;
  int32x4_t v32;
  int32x4_t v33;
  float32x4_t v34;
  int32x4_t v35;
  float32x2_t v36;
  float32x2_t v37;
  int v38;
  float32x4_t v39;
  float32x4_t v40;
  float32x2_t v41;
  float32x2_t v42;
  float32x2_t v43;
  float32x4_t v44;
  float32x2_t v45;
  float32x2_t v46;
  int v47;
  float32x2_t v48;
  float32x4_t v49;
  float32x4_t v50;
  float32x4_t v51;
  float32x4_t v52;
  float32x2_t v53;
  float32x2_t v54;
  float32x2_t v55;
  float32x2_t v56;
  float32x2_t v57;
  float32x4_t v58;
  float32x4_t v59;
  float32x4_t v60;
  float32x4_t v61;
  int32x4_t v62;
  int32x4_t v63;
  int32x4_t v64;
  int32x4_t v65;
  int32x4_t v66;
  float32x4_t v67;
  float32x4_t v68;
  float32x4_t v69;
  int32x4_t v70;
  int8x8_t v71;
  int8x8_t v72;
  int8x8_t v73;
  float32x2_t v74;
  int8x8_t v75;
  float32x4_t v76;
  float32x4_t v77;
  float32x4_t v78;
  int32x4_t v79;
  int32x4_t v80;
  float32x4_t v81;
  float32x4_t v82;
  int32x4_t v83;
  int32x4_t v84;
  float32x4_t v85;
  int32x4_t v86;
  int32x4_t v87;
  float32x4_t v88;
  float32x4_t v89;
  float32x4_t v90;
  float32x4_t v91;
  float32x4_t v92;
  float32x4_t v93;
  float32x4_t v94;
  float32x4_t v95;
  float32x4_t v96;
  int v97;
  float32x4_t v98;
  float32x4_t v99;
  float32x4_t v100;
  float32x4_t v101;
  float32x4_t v102;
  float32x4_t v103;
  float32x4_t v104;
  float32x4_t v105;
  float32x4_t v106;
  float32x4_t v107;
  float32x4_t v108;
  int v109;
  float32x4_t v110;
  float32x4_t v111;
  float32x4_t v112;
  float32x4_t v113;
  float32x4_t v114;
  float32x4_t v115;
  float32x4_t v116;
  int v117;
  float32x4_t v118;
  int8x16_t v120;
  float32x4_t v121;
  int8x16_t v122;
  float32x4_t v123;
  float32x4_t v124;
  float32x4_t v125;
  float32x4_t v126;
  float32x4_t v127;
  float32x4_t v128;
  float32x2_t v129;
  int8x8_t v130;
  int32x4_t v131;
  float32x2_t v132;
  int32x2_t v133;
  int8x8_t v134;
  int8x8_t v135;
  float32x2_t v136;
  int8x8_t v137;
  int8x8_t v138;
  int8x8_t v139;
  int32x4_t v140;
  int8x8_t v141;
  int8x8_t v142;
  int8x8_t v143;
  int8x8_t v144;
  int8x8_t v145;

  v8 = vsubq_f32(a7, a6);
  v9 = vsubq_f32(a8, a6);
  v10 = (int8x8_t)vmls_f32(vmul_f32(*(float32x2_t *)v8.f32, (float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v9, (int8x16_t)v9, 4uLL)), (float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v8, (int8x16_t)v8, 4uLL), *(float32x2_t *)v9.f32);
  *(int8x8_t *)v11.f32 = vext_s8(v10, (int8x8_t)vmls_f32(vmul_f32((float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v8, (int8x16_t)v8, 8uLL), *(float32x2_t *)v9.f32), *(float32x2_t *)v8.f32, (float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v9, (int8x16_t)v9, 8uLL)), 4uLL);
  v11.i64[1] = v10.u32[0];
  v12 = vpadd_f32(vmul_f32(*(float32x2_t *)v11.f32, *(float32x2_t *)v11.f32), vmul_f32((float32x2_t)v10.u32[0], (float32x2_t)v10.u32[0]));
  v13 = vpadd_f32(v12, v12);
  v14 = vrsqrte_f32(v13);
  v15 = 4;
  do
  {
    v14 = vmul_f32(v14, vrsqrts_f32(vmul_f32(v14, v14), v13));
    --v15;
  }
  while (v15);
  v16 = vsubq_f32(a4, a6);
  __asm { FMOV            V5.2S, #1.0 }
  v22 = vmul_f32(v13, (float32x2_t)vbsl_s8((int8x8_t)vdup_lane_s32(vceqz_f32(v13), 0), (int8x8_t)_D5, (int8x8_t)v14));
  v23 = vrecpe_f32(v22);
  v24 = 4;
  do
  {
    v23 = vmul_f32(v23, vrecps_f32(v22, v23));
    --v24;
  }
  while (v24);
  v25 = (int32x4_t)vsubq_f32(a8, a7);
  v26 = vmulq_n_f32(v11, v23.f32[0]);
  v26.i32[3] = 0;
  v27 = (int32x4_t)vmulq_f32(v8, v8);
  v28 = (int32x4_t)vmulq_f32(v8, v9);
  v29 = (int32x4_t)vmulq_f32(v9, v9);
  v30 = vmulq_f32(v16, v26);
  v31 = vzip1q_s32(v27, v29);
  v32 = vzip2q_s32(v27, v29);
  v33 = vzip1q_s32(v28, (int32x4_t)v30);
  v34 = vaddq_f32((float32x4_t)vzip1q_s32(v32, vzip2q_s32(v28, (int32x4_t)v30)), vaddq_f32((float32x4_t)vzip1q_s32(v31, v33), (float32x4_t)vzip2q_s32(v31, v33)));
  v35 = (int32x4_t)vmulq_f32(v34, v34);
  v36 = vsub_f32(vmul_laneq_f32((float32x2_t)vdup_lane_s32(*(int32x2_t *)v34.f32, 0), v34, 2), (float32x2_t)vdup_lane_s32(*(int32x2_t *)v35.i8, 1));
  v37 = vrecpe_f32(v36);
  v38 = 4;
  do
  {
    v37 = vmul_f32(v37, vrecps_f32(v36, v37));
    --v38;
  }
  while (v38);
  v39 = vsubq_f32(a5, a4);
  v40 = vmulq_f32(vsubq_f32(a5, a6), v26);
  v40.i64[0] = vpaddq_f32(v40, v40).u64[0];
  v41 = vpadd_f32(*(float32x2_t *)v40.f32, *(float32x2_t *)v40.f32);
  if (vuzp1_s8((int8x8_t)vdup_lane_s16((int16x4_t)vcltz_f32(vmul_laneq_f32(v41, v34, 3)), 0), *(int8x8_t *)a4.f32).u32[0] != -1)
    goto LABEL_11;
  v42 = (float32x2_t)vdup_lane_s32(*(int32x2_t *)v34.f32, 1);
  v43 = (float32x2_t)vpaddq_f32(v30, v30).u64[0];
  v44 = vmulq_f32(v39, v26);
  v44.i64[0] = vpaddq_f32(v44, v44).u64[0];
  v45 = vpadd_f32(*(float32x2_t *)v44.f32, *(float32x2_t *)v44.f32);
  v46 = vrecpe_f32(v45);
  v47 = 4;
  do
  {
    v46 = vmul_f32(v46, vrecps_f32(v45, v46));
    --v47;
  }
  while (v47);
  v48 = vmul_f32(v46, vneg_f32(vpadd_f32(v43, v43)));
  v49 = vmlaq_n_f32(a4, v39, v48.f32[0]);
  v49.i64[1] = vextq_s8((int8x16_t)v49, (int8x16_t)v49, 8uLL).u32[0];
  v50 = vsubq_f32(v49, a6);
  v51 = vmulq_f32(v8, v50);
  v51.i64[0] = vpaddq_f32(v51, v51).u64[0];
  *(float32x2_t *)v51.f32 = vpadd_f32(*(float32x2_t *)v51.f32, *(float32x2_t *)v51.f32);
  v52 = vmulq_f32(v9, v50);
  v52.i64[0] = vpaddq_f32(v52, v52).u64[0];
  v53 = vpadd_f32(*(float32x2_t *)v52.f32, *(float32x2_t *)v52.f32);
  v54 = vmul_f32(v37, vmls_f32(vmul_laneq_f32(*(float32x2_t *)v51.f32, v34, 2), v53, v42));
  v55 = vmul_f32(v37, vmls_f32(vmul_n_f32(v53, v34.f32[0]), *(float32x2_t *)v51.f32, v42));
  v56 = (float32x2_t)vdup_n_s32(0x3F800001u);
  if (vuzp1_s8((int8x8_t)vcltz_s16(vshl_n_s16(vdup_lane_s16((int16x4_t)vand_s8(vand_s8(vand_s8((int8x8_t)vcge_f32(v54, (float32x2_t)0xB4000000B4000000), (int8x8_t)vcge_f32(v56, v54)), vand_s8((int8x8_t)vcge_f32(v56, v55), (int8x8_t)vcge_f32(v55, (float32x2_t)0xB4000000B4000000))), (int8x8_t)vcgt_f32(v56, vadd_f32(v54, v55))), 0), 0xFuLL)), *(int8x8_t *)a4.f32).u32[0] == -1)
  {
    *result = v48;
    *a2 = v54;
    *a3 = v55;
  }
  else
  {
LABEL_11:
    v57 = (float32x2_t)vdup_laneq_s32(v35, 3);
    v58 = vmlsq_laneq_f32(a4, v26, v34, 3);
    v58.i64[1] = vextq_s8((int8x16_t)v58, (int8x16_t)v58, 8uLL).u32[0];
    v59 = vmlsq_lane_f32(a5, v26, v41, 0);
    v59.i64[1] = vextq_s8((int8x16_t)v59, (int8x16_t)v59, 8uLL).u32[0];
    v60 = vsubq_f32(v58, a6);
    v61 = vsubq_f32(v59, a6);
    v62 = (int32x4_t)vmulq_f32(v8, v60);
    v63 = (int32x4_t)vmulq_f32(v9, v60);
    v64 = (int32x4_t)vmulq_f32(v8, v61);
    v65 = (int32x4_t)vmulq_f32(v9, v61);
    v66 = vzip1q_s32(v62, v64);
    v67 = (float32x4_t)vzip2q_s32(v62, v64);
    v68 = (float32x4_t)vzip1q_s32(v63, v65);
    v69 = vaddq_f32((float32x4_t)vzip1q_s32((int32x4_t)v67, vzip2q_s32(v63, v65)), vaddq_f32((float32x4_t)vzip1q_s32(v66, (int32x4_t)v68), (float32x4_t)vzip2q_s32(v66, (int32x4_t)v68)));
    *(int32x2_t *)v67.f32 = vrev64_s32(*(int32x2_t *)v69.f32);
    *(int32x2_t *)&v67.u32[2] = vrev64_s32((int32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v69, (int8x16_t)v69, 8uLL));
    v70 = (int32x4_t)vmulq_n_f32(vmlsq_lane_f32(vmulq_f32((float32x4_t)vzip1q_s32(vdupq_laneq_s32((int32x4_t)v34, 2), vdupq_lane_s32(*(int32x2_t *)v34.f32, 0)), v69), v67, *(float32x2_t *)v34.f32, 1), v37.f32[0]);
    v71 = (int8x8_t)vdup_lane_s32(*(int32x2_t *)v70.i8, 0);
    v72 = (int8x8_t)vdup_lane_s32(*(int32x2_t *)v70.i8, 1);
    v73 = (int8x8_t)vdup_laneq_s32(v70, 2);
    v74 = vmul_f32(v41, v41);
    v75 = (int8x8_t)vdup_laneq_s32(v70, 3);
    v76 = (float32x4_t)vuzp1q_s32(v70, v70);
    v77 = (float32x4_t)vuzp2q_s32(v70, v70);
    v68.i64[0] = 0xB4000000B4000000;
    v68.i64[1] = 0xB4000000B4000000;
    v78 = (float32x4_t)vdupq_n_s32(0x3F800001u);
    v77.i64[0] = vandq_s8(vandq_s8(vandq_s8((int8x16_t)vcgeq_f32(v76, v68), (int8x16_t)vcgeq_f32(v78, v76)), vandq_s8((int8x16_t)vcgeq_f32(v78, v77), (int8x16_t)vcgeq_f32(v77, v68))), (int8x16_t)vcgtq_f32(v78, vaddq_f32(v76, v77))).u64[0];
    v79 = vdupq_lane_s32(*(int32x2_t *)v77.f32, 0);
    v80 = vdupq_lane_s32(*(int32x2_t *)v77.f32, 1);
    v66.i64[0] = -1;
    v66.i64[1] = -1;
    if (vuzp1_s8((int8x8_t)vmovn_s32(vceqq_s32((int32x4_t)vandq_s8((int8x16_t)v79, (int8x16_t)v80), v66)), *(int8x8_t *)a4.f32).u32[0] == -1)
    {
      v141 = (int8x8_t)vdup_lane_s32(vcgt_f32(v74, v57), 0);
      *result = vbic_s8((int8x8_t)_D5, v141);
      *a2 = vbsl_s8(v141, v71, v73);
      *a3 = vbsl_s8(v141, v72, v75);
    }
    else
    {
      v144 = v73;
      v81 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v39.f32, 1);
      v82 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)a4.f32, 1);
      v83 = vzip1q_s32((int32x4_t)v8, (int32x4_t)v9);
      v84 = vzip1q_s32(v25, (int32x4_t)v8);
      v85 = (float32x4_t)vzip2q_s32(v83, v84);
      v86 = vzip1q_s32((int32x4_t)a6, (int32x4_t)a6);
      v87 = vzip1q_s32((int32x4_t)a7, (int32x4_t)a6);
      v88 = (float32x4_t)vzip2q_s32(v86, v87);
      v89 = vsubq_f32(v82, v88);
      v90 = vmulq_f32(v39, v39);
      v90.i64[0] = vpaddq_f32(v90, v90).u64[0];
      *(float32x2_t *)v95.f32 = vpadd_f32(*(float32x2_t *)v90.f32, *(float32x2_t *)v90.f32);
      v91 = vmulq_f32(v85, v85);
      v92 = vmulq_lane_f32(v85, *(float32x2_t *)v39.f32, 1);
      v93 = vmulq_lane_f32(v89, *(float32x2_t *)v39.f32, 1);
      v94 = vmulq_f32(v89, v85);
      v95.i64[1] = v95.i64[0];
      v96 = vrecpeq_f32(v95);
      v97 = 4;
      do
      {
        v96 = vmulq_f32(v96, vrecpsq_f32(v96, v95));
        --v97;
      }
      while (v97);
      v98 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v39.f32, 0);
      v99 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)a4.f32, 0);
      v100 = (float32x4_t)vzip1q_s32(v83, v84);
      v101 = (float32x4_t)vzip1q_s32(v86, v87);
      v102 = vsubq_f32(v99, v101);
      v103 = vmlaq_n_f32(v93, v102, v39.f32[0]);
      v104 = (float32x4_t)vdupq_laneq_s32((int32x4_t)v39, 2);
      v105 = (float32x4_t)vzip1q_s32(vzip2q_s32((int32x4_t)v8, (int32x4_t)v9), vzip2q_s32(v25, (int32x4_t)v8));
      v106 = (float32x4_t)vzip1q_s32(vdupq_laneq_s32((int32x4_t)a6, 2), vzip2q_s32((int32x4_t)a7, (int32x4_t)a6));
      v107 = vmlaq_f32(vmlaq_f32(v91, v100, v100), v105, v105);
      v108 = vrecpeq_f32(v107);
      v109 = 4;
      do
      {
        v108 = vmulq_f32(v108, vrecpsq_f32(v108, v107));
        --v109;
      }
      while (v109);
      v145 = v75;
      v110 = (float32x4_t)vdupq_laneq_s32((int32x4_t)a4, 2);
      v111 = vsubq_f32(v110, v106);
      v112 = vmlaq_f32(v103, v111, v104);
      v113 = vmlaq_f32(vmlaq_f32(v92, v100, v98), v105, v104);
      v114 = vsubq_f32(vmulq_f32(v107, v95), vmulq_f32(v113, v113));
      v115 = vmulq_f32(v112, v107);
      v116 = vrecpeq_f32(v114);
      v117 = 4;
      do
      {
        v116 = vmulq_f32(v116, vrecpsq_f32(v116, v114));
        --v117;
      }
      while (v117);
      v118 = vmlaq_f32(vmlaq_f32(v94, v102, v100), v111, v105);
      __asm { FMOV            V14.4S, #1.0 }
      v120 = (int8x16_t)vmaxq_f32(vminq_f32((float32x4_t)vbslq_s8((int8x16_t)vceqzq_f32(v114), (int8x16_t)_Q14, (int8x16_t)vmulq_f32(vsubq_f32(vmulq_f32(v113, v118), v115), v116)), _Q14), (float32x4_t)0);
      v121.i64[0] = 0x3400000034000000;
      v121.i64[1] = 0x3400000034000000;
      v122 = (int8x16_t)vcgeq_f32(v121, v114);
      v121.i64[0] = 0x3F0000003F000000;
      v121.i64[1] = 0x3F0000003F000000;
      v123 = vmaxq_f32(vminq_f32((float32x4_t)vbslq_s8((int8x16_t)vceqzq_f32(v107), (int8x16_t)_Q14, (int8x16_t)vmulq_f32(v108, vaddq_f32(v118, vmulq_f32(v113, (float32x4_t)vbslq_s8(v122, (int8x16_t)v121, v120))))), _Q14), (float32x4_t)0);
      v124 = vmaxq_f32(vminq_f32((float32x4_t)vbslq_s8((int8x16_t)vceqzq_f32(v95), (int8x16_t)_Q14, (int8x16_t)vmulq_f32(v96, vsubq_f32(vmulq_f32(v113, v123), v112))), _Q14), (float32x4_t)0);
      v125 = vmlaq_f32(v106, v123, v105);
      v126 = vsubq_f32(vmlaq_f32(v99, v124, v98), vmlaq_f32(v101, v123, v100));
      v127 = vsubq_f32(vmlaq_f32(v82, v124, v81), vmlaq_f32(v88, v123, v85));
      v128 = vsubq_f32(vmlaq_f32(v110, v124, v104), v125);
      v129 = (float32x2_t)vdup_lane_s32(*(int32x2_t *)v123.f32, 1);
      v130 = (int8x8_t)vdup_laneq_s32((int32x4_t)v123, 2);
      v131 = (int32x4_t)vmlaq_f32(vmlaq_f32(vmulq_f32(v128, v128), v127, v127), v126, v126);
      *(int32x2_t *)v126.f32 = vdup_lane_s32(*(int32x2_t *)v131.i8, 0);
      v132 = (float32x2_t)vdup_lane_s32(*(int32x2_t *)v131.i8, 1);
      *(int32x2_t *)v131.i8 = vdup_laneq_s32(v131, 2);
      v133 = (int32x2_t)vand_s8((int8x8_t)vcgt_f32(v132, *(float32x2_t *)v126.f32), (int8x8_t)vcgt_f32(*(float32x2_t *)v131.i8, *(float32x2_t *)v126.f32));
      v134 = (int8x8_t)vdup_lane_s32(vcgt_f32(*(float32x2_t *)v131.i8, v132), 0);
      *(int8x8_t *)v131.i8 = vbsl_s8(v134, (int8x8_t)v132, *(int8x8_t *)v131.i8);
      v135 = (int8x8_t)vdup_lane_s32(v133, 0);
      v136 = (float32x2_t)vbsl_s8(v135, *(int8x8_t *)v126.f32, *(int8x8_t *)v131.i8);
      v137 = vbsl_s8(v135, (int8x8_t)vdup_lane_s32(*(int32x2_t *)v123.f32, 0), vand_s8(v134, (int8x8_t)vsub_f32(_D5, v129)));
      v138 = vbic_s8(vbsl_s8(v134, (int8x8_t)v129, v130), v135);
      v139 = vbsl_s8(v135, (int8x8_t)vdup_lane_s32(*(int32x2_t *)v124.f32, 0), vbsl_s8(v134, (int8x8_t)vdup_lane_s32(*(int32x2_t *)v124.f32, 1), (int8x8_t)vdup_laneq_s32((int32x4_t)v124, 2)));
      v140.i64[0] = -1;
      v140.i64[1] = -1;
      if (vuzp1_s8((int8x8_t)vmovn_s32(vceqq_s32(v79, v140)), (int8x8_t)v136).u32[0] == -1)
      {
        v142 = (int8x8_t)vdup_lane_s32(vcgt_f32(v136, v57), 0);
        *result = vbic_s8(v139, v142);
        *a2 = vbsl_s8(v142, v71, v137);
        *a3 = vbsl_s8(v142, v72, v138);
      }
      else if (vuzp1_s8((int8x8_t)vmovn_s32(vceqq_s32(v80, v140)), (int8x8_t)v136).u32[0] == -1)
      {
        v143 = (int8x8_t)vdup_lane_s32(vcgt_f32(v136, v74), 0);
        *result = vbsl_s8(v143, (int8x8_t)_D5, v139);
        *a2 = vbsl_s8(v143, v144, v137);
        *a3 = vbsl_s8(v143, v145, v138);
      }
      else
      {
        *result = v139;
        *a2 = v137;
        *a3 = v138;
      }
    }
  }
  return result;
}

BOOL physx::Gu::selectNormal(char a1, double a2, double a3)
{
  uint64_t v3;

  if (*(float *)&a2 < 0.000001)
  {
    if (*(float *)&a3 < 0.000001)
    {
      if ((a1 & 0x28) == 0)
        return 1;
    }
    else if (*(float *)&a3 > 1.0)
    {
      if ((a1 & 0x30) == 0)
        return 1;
    }
    else if ((a1 & 0x20) == 0)
    {
      return 1;
    }
    return 0;
  }
  if (*(float *)&a2 > 1.0)
    return *(float *)&a3 < 0.000001 && (a1 & 0x18) == 0;
  if (*(float *)&a3 < 0.000001)
    return (a1 & 8) == 0;
  v3 = 1;
  if ((a1 & 0x10) != 0 && vadd_f32(*(float32x2_t *)&a2, *(float32x2_t *)&a3).f32[0] >= 0.9999)
    return 0;
  return v3;
}

uint64_t physx::Gu::PCMCapsuleVsMeshContactGeneration::processTriangle(float32x4_t *a1, int a2, float32x4_t *a3, float32x2_t *a4, char a5, uint64_t a6, _DWORD *a7)
{
  float32x4_t v13;
  float32x4_t v14;
  float32x4_t v15;
  int8x16_t v16;
  int8x16_t v17;
  int8x8_t v18;
  float32x4_t v19;
  float32x2_t v20;
  float32x2_t v21;
  int v22;
  float32x2_t v28;
  float32x2_t v29;
  int v30;
  float32x4_t v31;
  float32x2_t v32;
  float32x2_t v33;
  float32x4_t v34;
  float32x4_t v35;
  float32x4_t v36;
  float32x4_t v37;
  int8x16_t v38;
  float32x4_t v39;
  float32x4_t v40;
  int8x16_t v41;
  float32x4_t v42;
  float32x2_t v43;
  float32x2_t v44;
  int v45;
  float32x2_t v46;
  float32x2_t v47;
  int v48;
  float32x2_t v50;
  float32x2_t v51;
  float v52;
  float32x4_t v53;
  float32x4_t v54;
  float32x4_t v55;
  float32x4_t v56;
  float32x4_t v57;
  float32x4_t v58;
  float32x4_t v59;
  double v60;
  double v61;
  uint64_t v62;
  float32x4_t v63;
  float32x4_t v64;

  v13 = a1[3];
  v14 = a1[4];
  v15 = a1[5];
  v16 = (int8x16_t)vsubq_f32(v14, v13);
  v17 = (int8x16_t)vsubq_f32(v15, v13);
  v18 = (int8x8_t)vmls_f32(vmul_f32(*(float32x2_t *)v16.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v17, v17, 4uLL)), (float32x2_t)*(_OWORD *)&vextq_s8(v16, v16, 4uLL), *(float32x2_t *)v17.i8);
  *(int8x8_t *)v19.f32 = vext_s8(v18, (int8x8_t)vmls_f32(vmul_f32((float32x2_t)*(_OWORD *)&vextq_s8(v16, v16, 8uLL), *(float32x2_t *)v17.i8), *(float32x2_t *)v16.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v17, v17, 8uLL)), 4uLL);
  v19.i64[1] = v18.u32[0];
  v64 = v13;
  *(float32x2_t *)v17.i8 = vpadd_f32(vmul_f32(*(float32x2_t *)v19.f32, *(float32x2_t *)v19.f32), vmul_f32((float32x2_t)v18.u32[0], (float32x2_t)v18.u32[0]));
  v20 = vpadd_f32(*(float32x2_t *)v17.i8, *(float32x2_t *)v17.i8);
  v21 = vrsqrte_f32(v20);
  v22 = 4;
  do
  {
    v21 = vmul_f32(v21, vrsqrts_f32(vmul_f32(v21, v21), v20));
    --v22;
  }
  while (v22);
  __asm { FMOV            V8.2S, #1.0 }
  v28 = vmul_f32(v20, (float32x2_t)vbsl_s8((int8x8_t)vdup_lane_s32(vceqz_f32(v20), 0), (int8x8_t)_D8, (int8x8_t)v21));
  v29 = vrecpe_f32(v28);
  v30 = 4;
  do
  {
    v29 = vmul_f32(v29, vrecps_f32(v28, v29));
    --v30;
  }
  while (v30);
  v31 = vmulq_n_f32(v19, v29.f32[0]);
  v31.i32[3] = 0;
  v54 = v31;
  v63 = v31;
  v32 = vmul_f32(*a4, *a4);
  v61 = 0.0;
  v62 = 0;
  v60 = 0.0;
  v55 = a3[3];
  v56 = v13;
  v53 = a3[4];
  v57 = v14;
  v58 = v15;
  physx::Gu::pcmDistanceSegmentTriangleSquared(&v62, &v61, &v60, v55, v53, v13, v14, v15);
  if ((vcgt_f32(v32, v33).u8[0] & 1) != 0)
  {
    v52 = v33.f32[0];
    v50 = *(float32x2_t *)&v60;
    v51 = *(float32x2_t *)&v61;
    if (physx::Gu::selectNormal(a5, v61, v60))
    {
      v34 = v55;
      v59 = v54;
      v35 = v57;
      v36 = v58;
    }
    else
    {
      v35 = v57;
      v36 = v58;
      v37 = v54;
      v34 = v55;
      if (v52 != 0.0)
      {
        v38 = (int8x16_t)vmlaq_n_f32(v55, vsubq_f32(v53, v55), *(float *)&v62);
        v39 = vmulq_n_f32(v58, v50.f32[0]);
        v39.i32[3] = 0;
        v40 = vmlaq_n_f32(v39, v57, v51.f32[0]);
        v40.i64[1] = vextq_s8((int8x16_t)v40, (int8x16_t)v40, 8uLL).u32[0];
        v41 = (int8x16_t)vmlaq_n_f32(v40, v56, vsub_f32(_D8, vadd_f32(v51, v50)).f32[0]);
        *(float32x2_t *)v42.f32 = vsub_f32(*(float32x2_t *)v38.i8, *(float32x2_t *)v41.i8);
        *(float32x2_t *)&v42.u32[2] = vsub_f32((float32x2_t)vextq_s8(v38, v38, 8uLL).u32[0], (float32x2_t)vextq_s8(v41, v41, 8uLL).u32[0]);
        *(float32x2_t *)v41.i8 = vpadd_f32(vmul_f32(*(float32x2_t *)v42.f32, *(float32x2_t *)v42.f32), vmul_f32(*(float32x2_t *)&v42.u32[2], *(float32x2_t *)&v42.u32[2]));
        v43 = vpadd_f32(*(float32x2_t *)v41.i8, *(float32x2_t *)v41.i8);
        v44 = vrsqrte_f32(v43);
        v45 = 4;
        do
        {
          v44 = vmul_f32(v44, vrsqrts_f32(vmul_f32(v44, v44), v43));
          --v45;
        }
        while (v45);
        v46 = vmul_f32(v43, (float32x2_t)vbsl_s8((int8x8_t)vdup_lane_s32(vceqz_f32(v43), 0), (int8x8_t)_D8, (int8x8_t)v44));
        v47 = vrecpe_f32(v46);
        v48 = 4;
        do
        {
          v47 = vmul_f32(v47, vrecps_f32(v46, v47));
          --v48;
        }
        while (v48);
        v37 = vmulq_n_f32(v42, v47.f32[0]);
        v37.i32[3] = 0;
      }
      v59 = v37;
    }
    physx::Gu::PCMCapsuleVsMeshContactGeneration::generateContacts(&v64, &v63, &v59, a2, a3 + 4, a4, a6, a7, v35, v36, v34);
    physx::Gu::PCMCapsuleVsMeshContactGeneration::generateEEMTD((int8x8_t *)&v59, a2, a6, a7, (__n128)a3[3], a3[4], *a4, v56, v57);
    physx::Gu::PCMCapsuleVsMeshContactGeneration::generateEEMTD((int8x8_t *)&v59, a2, a6, a7, (__n128)a3[3], a3[4], *a4, v57, v58);
    physx::Gu::PCMCapsuleVsMeshContactGeneration::generateEEMTD((int8x8_t *)&v59, a2, a6, a7, (__n128)a3[3], a3[4], *a4, v56, v58);
  }
  return 1;
}

uint64_t physx::Gu::pcmContactConvexConvex(uint64_t a1, uint64_t a2, float32x4_t *a3, float32x4_t *a4, uint64_t a5, uint64_t *a6, uint64_t a7)
{
  uint64_t v10;
  float32x4_t v18;
  float32x4_t v19;
  float32x4_t v20;
  float32x4_t v21;
  float32x4_t v22;
  float32x4_t v23;
  float32x4_t v24;
  float32x4_t v25;
  float32x4_t v26;
  float32x2_t v27;
  float32x4_t v28;
  float32x2_t v29;
  float32x2_t v30;
  int8x8_t v31;
  float32x4_t v32;
  float32x4_t v33;
  float32x4_t v34;
  float32x4_t v35;
  float32x4_t v36;
  float32x4_t v37;
  float32x4_t v38;
  float32x2_t v39;
  float32x4_t v40;
  float32x4_t v41;
  float32x4_t v42;
  float32x4_t v43;
  float32x2_t v44;
  float32x2_t v45;
  float32x2_t v46;
  float32x2_t v47;
  float32x2_t v48;
  float32x2_t v50;
  float32x4_t v51;
  float32x4_t v52;
  float32x4_t v53;
  float v54;
  float32x4_t v55;
  float32x4_t v56;
  float32x2_t v57;
  float32x4_t v59;
  int32x4_t v60;
  uint64_t v61;
  float32x2_t v62;
  float32x2_t v63;
  float32x2_t v64;
  unsigned int v65;
  uint64_t v66;
  uint64_t v67;
  float32x4_t *v68;
  float32x4_t v69;
  float32x4_t v70;
  float32x4_t v71;
  float32x4_t v72;
  float32x4_t v73;
  float32x4_t v74;
  float32x4_t v75;
  float32x4_t v76;
  float32x2_t v77;
  float32x4_t v78;
  float32x4_t v79;
  float32x4_t v80;
  unsigned __int8 v81;
  float32x4_t *v82;
  float32x4_t v83;
  float32x4_t v84;
  int v85;
  float32x4_t v86;
  float32x2_t v87;
  float32x2_t v88;
  int v89;
  int32x2_t v90;
  float32x4_t v91;
  float32x4_t v92;
  float32x2_t v93;
  float32x2_t v94;
  int v95;
  float32x4_t v96;
  float32x4_t v97;
  float32x2_t v98;
  int8x16_t v99;
  const float *v100;
  float32x2_t v101;
  float32x2_t v102;
  float32x4_t v103;
  float32x2_t v104;
  float32x4_t v105;
  float32x2_t v106;
  float32x2_t v107;
  float32x2_t v108;
  float v109;
  float v110;
  float v111;
  float32x2_t v112;
  float32x2_t v113;
  float v114;
  float v115;
  int8x8_t v116;
  uint64_t v117;
  int8x16_t v118;
  float32x4_t v119;
  uint64_t v120;
  float32x4_t *v121;
  float32x4_t v122;
  float32x4_t v123;
  float32x4_t v124;
  float32x4_t v125;
  float32x4_t v126;
  float32x2_t v127;
  float32x2_t v128;
  int8x8_t v129;
  float32x4_t v130;
  float32x4_t v131;
  float32x4_t v132;
  float32x4_t v133;
  float32x4_t v134;
  float32x4_t v135;
  float32x2_t v136;
  float32x2_t v137;
  int v138;
  float32x2_t v139;
  float32x2_t v140;
  int v141;
  float32x4_t v142;
  _BOOL4 v145;
  _BOOL4 v147;
  float32x4_t v148;
  float32x4_t v149;
  float32x4_t v150;
  float32x4_t v151;
  float32x4_t v152;
  int32x4_t v153;
  float v154;
  float32x4_t v155;
  float32x4_t v156;
  int v157;
  float32x4_t v158;
  float32x4_t v159;
  float32x4_t v160;
  float32x4_t v161;
  float32x4_t v162;
  float32x4_t v163;
  float32x4_t v164;
  float32x2_t v165;
  float32x2_t v166;
  float32x2_t v167;
  float32x4_t v168;
  float32x2_t v169;
  float32x2_t v170;
  float32x2_t v171;
  float32x2_t v172;
  float32x2_t v173;
  float32x2_t v174;
  float32x2_t v175;
  float32x2_t v176;
  float32x2_t v177;
  float32x2_t v178;
  float32x4_t v179;
  float32x4_t v180;
  float32x4_t v181;
  float32x4_t v182;
  int8x8_t v183;
  float32x4_t v184;
  float32x4_t v185;
  float32x4_t v186;
  float32x4_t v187;
  float32x4_t v188;
  float32x4_t v189;
  float32x4_t v190;
  float32x4_t v191;
  float32x4_t v192;
  float32x4_t v193;
  float32x4_t v194;
  float32x4_t v195;
  float32x4_t v196;
  float32x4_t v197;
  float32x4_t v198;
  float32x4_t v199;
  float32x4_t v200;
  float32x4_t v201;
  float32x4_t v202;
  float32x4_t v203;
  float32x4_t v204;
  float32x4_t v205;
  float32x4_t v206;
  float32x4_t v207;
  float32x4_t v208;
  float32x4_t v209;
  float32x4_t v210;
  float32x4_t v211;
  float32x4_t v212;
  float32x4_t v213;
  float32x4_t v214;
  float32x4_t v215;
  int32x4_t v216;
  float32x4_t v217;
  int v218;
  float32x4_t v219;
  float32x4_t v220;
  float32x4_t v221;
  float32x4_t v222;
  float32x4_t v223;
  float32x4_t v224;
  float32x4_t v225;
  float32x2_t v226;
  float32x2_t v227;
  float32x2_t v228;
  float32x4_t v229;
  float32x2_t v230;
  float32x2_t v231;
  float32x2_t v232;
  float32x2_t v233;
  float32x2_t v234;
  float32x2_t v235;
  float32x2_t v236;
  float32x2_t v237;
  float32x2_t v238;
  int8x8_t v239;
  float32x4_t v240;
  int32x2_t v241;
  int8x8_t v242;
  float32x4_t v243;
  int8x8_t v244;
  float32x4_t v245;
  float32x4_t v246;
  float32x4_t v247;
  float32x4_t v248;
  float32x4_t v249;
  float32x4_t v250;
  float32x4_t v251;
  float32x4_t v252;
  float32x4_t v253;
  float32x4_t v254;
  float32x4_t v255;
  float32x4_t v256;
  float32x4_t v257;
  float32x4_t v258;
  float32x4_t v259;
  float32x4_t v260;
  float32x4_t v261;
  float32x4_t v262;
  float32x4_t v263;
  float32x4_t v264;
  float32x4_t v265;
  float32x4_t v266;
  float32x4_t v267;
  float32x4_t v268;
  float32x4_t v269;
  float32x4_t v270;
  float32x4_t v271;
  float32x4_t v272;
  float32x4_t v273;
  float32x4_t v274;
  float32x4_t v275;
  float32x4_t v276;
  float32x2_t v277;
  float32x4_t v278;
  int8x8_t v279;
  float32x4_t v280;
  float32x2x2_t v281;
  int32x4_t v282;
  float *v283;
  float *v284;
  _BYTE *v285;
  _BYTE *v286;
  _BYTE *v287;
  int v288;
  double v289;
  __int16 v290;
  float32x4_t v291;
  double v292;
  int8x8_t v293;
  float32x4_t v294;
  float32x2x2_t v295;
  int32x4_t v296;
  float *v297;
  float *v298;
  int32x4_t v299;
  float32x2_t v300;
  float32x2_t v301;
  float32x4_t *v302;
  _BYTE v303[6];
  __int32 v304;
  float32x4_t v305;
  float32x4_t v306;
  float32x4_t v307;
  float32x4_t v308;
  float32x4_t v309;
  float32x4_t v310;
  int32x4_t v311;
  int32x4_t v312;
  int32x4_t v313;
  float32x4_t v314;
  float32x4_t v315[2];
  float32x4_t v316[2];
  int32x2_t v317;
  uint64_t (**v318)();
  float32x4_t *v319;
  float32x4_t v320;
  int32x4_t *v321;
  int32x4_t v322;
  int32x4_t v323;
  int32x4_t v324;
  float32x4_t v325;
  int32x2_t v326;
  float32x4_t v327[4];
  uint64_t v328;
  float32x4_t v329;
  float32x2_t v330;
  float v331;
  int v332;
  char v333;
  __int128 v334;
  __int128 v335;
  __int128 v336;
  __int128 v337;
  __int128 v338;
  __int128 v339;
  uint64_t v340;
  uint64_t v341;
  uint64_t v342;
  char v343;
  float32x4_t v344;
  float32x2_t v345;
  float v346;
  int v347;
  char v348;
  __int128 v349;
  __int128 v350;
  __int128 v351;
  __int128 v352;
  __int128 v353;
  __int128 v354;
  uint64_t v355;
  uint64_t v356;
  uint64_t v357;
  char v358;
  uint64_t v359;
  float32x2x2_t v360;
  float32x2x2_t v361;

  v359 = *MEMORY[0x24BDAC8D0];
  v10 = *a6;
  _X27 = *(_QWORD *)(a1 + 48);
  __asm { PRFM            #0, [X27] }
  _X26 = *(_QWORD *)(a2 + 48);
  __asm { PRFM            #0, [X26] }
  v18 = *(float32x4_t *)(a1 + 4);
  v19 = v18;
  v19.i32[3] = 0;
  v20 = *(float32x4_t *)(a2 + 4);
  v21 = v20;
  v21.i32[3] = 0;
  v317 = vdup_lane_s32(*(int32x2_t *)a5, 0);
  v22.i64[0] = a3[1].i64[0];
  v22.i64[1] = a3[1].u32[2];
  v316[0] = *a3;
  v316[1] = v22;
  v23.i64[0] = a4[1].i64[0];
  v23.i64[1] = a4[1].u32[2];
  v315[0] = *a4;
  v315[1] = v23;
  v24 = vnegq_f32(v315[0]);
  v25 = vsubq_f32(v22, v23);
  v26 = v24;
  v26.i32[3] = 0;
  v27 = (float32x2_t)vdupq_laneq_s32((int32x4_t)v315[0], 3).u64[0];
  v28 = vmulq_n_f32(v25, vmla_f32((float32x2_t)0xBF000000BF000000, v27, v27).f32[0]);
  v28.i32[3] = 0;
  v29 = (float32x2_t)vextq_s8((int8x16_t)v26, (int8x16_t)v26, 8uLL).u64[0];
  v30 = (float32x2_t)vext_s8(*(int8x8_t *)v24.f32, (int8x8_t)v29, 4uLL);
  v31 = (int8x8_t)vmls_f32(vmul_f32(*(float32x2_t *)v24.f32, (float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v25, (int8x16_t)v25, 4uLL)), v30, *(float32x2_t *)v25.f32);
  *(int8x8_t *)v32.f32 = vext_s8(v31, (int8x8_t)vmls_f32(vmul_f32(v29, *(float32x2_t *)v25.f32), *(float32x2_t *)v24.f32, (float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v25, (int8x16_t)v25, 8uLL)), 4uLL);
  v32.i64[1] = v31.u32[0];
  v33 = vmlaq_laneq_f32(v28, v32, v315[0], 3);
  v33.i64[1] = vextq_s8((int8x16_t)v33, (int8x16_t)v33, 8uLL).u32[0];
  v34 = vmulq_f32(v26, v25);
  v34.i64[0] = vpaddq_f32(v34, v34).u64[0];
  v35 = vmlaq_n_f32(v33, v26, vpadd_f32(*(float32x2_t *)v34.f32, *(float32x2_t *)v34.f32).f32[0]);
  v36 = vaddq_f32(v35, v35);
  v36.i32[3] = 0;
  v37 = v316[0];
  v37.i32[3] = 0;
  v38 = vmulq_f32(v37, v26);
  v38.i64[0] = vpaddq_f32(v38, v38).u64[0];
  v39 = vsub_f32(vmul_f32((float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v316[0], (int8x16_t)v316[0], 8uLL), (float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v315[0], (int8x16_t)v315[0], 8uLL)), vpadd_f32(*(float32x2_t *)v38.f32, *(float32x2_t *)v38.f32));
  v40 = vmulq_laneq_f32(v37, v315[0], 3);
  v37.i64[0] = vextq_s8((int8x16_t)v37, (int8x16_t)v37, 8uLL).u64[0];
  *(float32x2_t *)v38.f32 = vmls_f32(vmul_f32((float32x2_t)vext_s8(*(int8x8_t *)v316[0].f32, *(int8x8_t *)v37.f32, 4uLL), *(float32x2_t *)v24.f32), v30, *(float32x2_t *)v316[0].f32);
  *(int8x8_t *)v41.f32 = vext_s8(*(int8x8_t *)v38.f32, (int8x8_t)vmls_f32(vmul_f32(*(float32x2_t *)v316[0].f32, v29), *(float32x2_t *)v24.f32, *(float32x2_t *)v37.f32), 4uLL);
  v41.i64[1] = v38.i64[0];
  v42 = vaddq_f32(vaddq_f32(vmulq_laneq_f32(v26, v316[0], 3), v40), v41);
  *(int32x2_t *)v41.f32 = vdup_lane_s32(*(int32x2_t *)v42.f32, 1);
  *(int32x2_t *)v24.f32 = vdup_laneq_s32((int32x4_t)v42, 2);
  v43 = vaddq_f32(v42, v42);
  *(int32x2_t *)v37.f32 = vdup_lane_s32(*(int32x2_t *)v43.f32, 1);
  v44 = (float32x2_t)vdup_laneq_s32((int32x4_t)v43, 2);
  *(int32x2_t *)v38.f32 = vdup_lane_s32((int32x2_t)vmul_f32(*(float32x2_t *)v42.f32, *(float32x2_t *)v43.f32), 0);
  v45 = vmul_lane_f32(*(float32x2_t *)v41.f32, *(float32x2_t *)v43.f32, 1);
  v46 = vmul_laneq_f32(*(float32x2_t *)v24.f32, v43, 2);
  v47 = vmul_n_f32(*(float32x2_t *)v41.f32, v43.f32[0]);
  v48 = vmul_n_f32(*(float32x2_t *)v24.f32, v43.f32[0]);
  *(float32x2_t *)v26.f32 = vmul_lane_f32((float32x2_t)vdup_lane_s32(*(int32x2_t *)v43.f32, 0), v39, 1);
  *(float32x2_t *)v43.f32 = vmul_lane_f32(*(float32x2_t *)v24.f32, *(float32x2_t *)v43.f32, 1);
  *(float32x2_t *)v37.f32 = vmul_lane_f32(*(float32x2_t *)v37.f32, v39, 1);
  *(float32x2_t *)v24.f32 = vmul_lane_f32(v44, v39, 1);
  __asm { FMOV            V10.2S, #1.0 }
  v50 = vsub_f32(_D10, *(float32x2_t *)v38.f32);
  *(int8x8_t *)v51.f32 = vext_s8((int8x8_t)vsub_f32(vsub_f32(_D10, v45), v46), (int8x8_t)vadd_f32(v47, *(float32x2_t *)v24.f32), 4uLL);
  v51.i64[1] = vsub_f32(v48, *(float32x2_t *)v37.f32).u32[0];
  *(float32x2_t *)v38.f32 = vsub_f32(v50, v46);
  *(int8x8_t *)v52.f32 = vext_s8((int8x8_t)vsub_f32(v47, *(float32x2_t *)v24.f32), *(int8x8_t *)v38.f32, 4uLL);
  v52.i64[1] = vadd_f32(*(float32x2_t *)v43.f32, *(float32x2_t *)v26.f32).u32[0];
  v311 = (int32x4_t)v51;
  v312 = (int32x4_t)v52;
  *(int8x8_t *)v53.f32 = vext_s8((int8x8_t)vadd_f32(v48, *(float32x2_t *)v37.f32), (int8x8_t)vsub_f32(*(float32x2_t *)v43.f32, *(float32x2_t *)v26.f32), 4uLL);
  v53.i64[1] = vsub_f32(v50, v45).u32[0];
  v313 = (int32x4_t)v53;
  v314 = v36;
  v54 = *(float *)(a5 + 8);
  v55.i64[0] = *(_QWORD *)(_X27 + 60);
  v55.i64[1] = *(unsigned int *)(_X27 + 68);
  v56 = vmulq_f32(v19, v55);
  v57 = vpmin_f32((float32x2_t)vdup_laneq_s32((int32x4_t)v56, 2), *(float32x2_t *)v56.f32);
  v38.f32[0] = v54 * 0.05;
  *(int32x2_t *)v38.f32 = vdup_lane_s32(*(int32x2_t *)v38.f32, 0);
  __asm { FMOV            V16.2S, #0.25 }
  v59.i64[0] = *(_QWORD *)(_X26 + 60);
  v59.i64[1] = *(unsigned int *)(_X26 + 68);
  v60 = (int32x4_t)vmulq_f32(v21, v59);
  *(float32x2_t *)v60.i8 = vpmin_f32((float32x2_t)vdup_laneq_s32(v60, 2), *(float32x2_t *)v60.i8);
  v61 = *(unsigned __int8 *)(v10 + 64);
  v62 = vmin_f32(vmin_f32(vmul_f32(vpmin_f32(v57, v57), _D16), *(float32x2_t *)v38.f32), vmin_f32(vmul_f32(vpmin_f32(*(float32x2_t *)v60.i8, *(float32x2_t *)v60.i8), _D16), *(float32x2_t *)v38.f32));
  if (*(_BYTE *)(v10 + 64))
  {
    v63 = vmul_f32(v62, (float32x2_t)vdup_n_s32(0x3F4CCCCDu));
    v64 = vmul_f32(v63, v63);
    v65 = v61 - 1;
    do
    {
      v66 = *(_QWORD *)(v10 + 80);
      v67 = v65;
      v68 = (float32x4_t *)(v66 + 48 * v65);
      v69 = v68[1];
      v70 = vmulq_n_f32(v51, COERCE_FLOAT(*v68));
      v70.i32[3] = 0;
      v71 = vmulq_lane_f32(v52, *(float32x2_t *)v68->f32, 1);
      v71.i32[3] = 0;
      v72 = vmulq_laneq_f32(v53, *v68, 2);
      v72.i32[3] = 0;
      v73 = vaddq_f32(v36, vaddq_f32(v72, vaddq_f32(v70, v71)));
      v74 = v68[2];
      v75 = v74;
      v75.i32[3] = 0;
      v76 = vmulq_f32(v75, vsubq_f32(v73, v69));
      v76.i64[0] = vpaddq_f32(v76, v76).u64[0];
      v77 = vpadd_f32(*(float32x2_t *)v76.f32, *(float32x2_t *)v76.f32);
      v78 = vmlsq_lane_f32(v73, v75, v77, 0);
      v78.i64[1] = vextq_s8((int8x16_t)v78, (int8x16_t)v78, 8uLL).u32[0];
      v79 = vsubq_f32(v69, v78);
      v80 = vmulq_f32(v79, v79);
      v80.i64[0] = vpaddq_f32(v80, v80).u64[0];
      if (vuzp1_s8((int8x8_t)vdup_lane_s16((int16x4_t)vcgt_f32(vpadd_f32(*(float32x2_t *)v80.f32, *(float32x2_t *)v80.f32), v64), 0), (int8x8_t)v39).u32[0] == -1)
      {
        v81 = *(_BYTE *)(v10 + 64) - 1;
        *(_BYTE *)(v10 + 64) = v81;
        v82 = (float32x4_t *)(v66 + 48 * v81);
        v83 = *v82;
        v84 = v82[2];
        v68[1] = v82[1];
        v68[2] = v84;
        *v68 = v83;
      }
      else
      {
        v74.i32[3] = v77.i32[1];
        v68[2] = v74;
      }
      --v65;
    }
    while (v67);
    v85 = *(unsigned __int8 *)(v10 + 64);
    v55.i64[0] = *(_QWORD *)(_X27 + 60);
    v55.i64[1] = *(unsigned int *)(_X27 + 68);
    v56 = vmulq_f32(v19, v55);
  }
  else
  {
    v85 = 0;
  }
  v42.i32[3] = v39.i32[1];
  v86 = vmulq_f32(v56, v56);
  v86.i64[0] = vpaddq_f32(v86, v86).u64[0];
  v87 = vpadd_f32(*(float32x2_t *)v86.f32, *(float32x2_t *)v86.f32);
  v88 = vrsqrte_f32(v87);
  v89 = 4;
  do
  {
    v88 = vmul_f32(v88, vrsqrts_f32(vmul_f32(v88, v88), v87));
    --v89;
  }
  while (v89);
  v90 = vdup_lane_s32(vceqz_f32(v87), 0);
  v91 = vmulq_f32(v21, v55);
  v92 = vmulq_f32(v91, v91);
  v92.i64[0] = vpaddq_f32(v92, v92).u64[0];
  v93 = vpadd_f32(*(float32x2_t *)v92.f32, *(float32x2_t *)v92.f32);
  v94 = vrsqrte_f32(v93);
  v95 = 4;
  do
  {
    v94 = vmul_f32(v94, vrsqrts_f32(vmul_f32(v94, v94), v93));
    --v95;
  }
  while (v95);
  v96 = v316[0];
  v97 = v315[0];
  if (v85 != (_DWORD)v61)
    goto LABEL_37;
  v98 = vmul_n_f32(v62, physx::Gu::invalidateThresholds[v61]);
  v99 = (int8x16_t)vabdq_f32(v36, *(float32x4_t *)(v10 + 16));
  *(float32x2_t *)v99.i8 = vpmax_f32((float32x2_t)*(_OWORD *)&vextq_s8(v99, v99, 8uLL), *(float32x2_t *)v99.i8);
  v100 = (const float *)((char *)&physx::Gu::invalidateQuatThresholds + 4 * v61);
  v101 = vld1_dup_f32(v100);
  v102 = vpmax_f32(*(float32x2_t *)v99.i8, *(float32x2_t *)v99.i8);
  v103 = vmulq_f32(v316[0], *(float32x4_t *)(v10 + 32));
  v103.i64[0] = vpaddq_f32(v103, v103).u64[0];
  v104 = vpadd_f32(*(float32x2_t *)v103.f32, *(float32x2_t *)v103.f32);
  v105 = vmulq_f32(v315[0], *(float32x4_t *)(v10 + 48));
  v56 = vpaddq_f32(v105, v105);
  v106 = vpadd_f32(*(float32x2_t *)v56.f32, *(float32x2_t *)v56.f32);
  *(int8x8_t *)v56.f32 = vuzp1_s8((int8x8_t)vdup_lane_s16((int16x4_t)vorr_s8(vorr_s8((int8x8_t)vcgt_f32(v101, v104), (int8x8_t)vcgt_f32(v101, v106)), (int8x8_t)vcgt_f32(v102, v98)), 0), (int8x8_t)v87);
  if (v56.i32[0] == -1)
    goto LABEL_37;
  v107 = vmul_f32(v87, (float32x2_t)vbsl_s8((int8x8_t)vcltz_s32(vshl_n_s32(v90, 0x1FuLL)), (int8x8_t)_D10, (int8x8_t)v88));
  v108 = (float32x2_t)vbsl_s8((int8x8_t)vdup_lane_s32(vceqz_f32(v93), 0), (int8x8_t)_D10, (int8x8_t)v94);
  v109 = 0.0;
  v110 = 0.0;
  v309 = v21;
  v310 = v20;
  v307 = v19;
  v308 = v18;
  v305 = v42;
  v306 = v36;
  if (v104.f32[0] < 1.0)
  {
    v111 = -1.0;
    if (v104.f32[0] >= -1.0)
      v111 = v104.f32[0];
    if (v111 > 1.0)
      v111 = 1.0;
    v304 = v106.i32[0];
    v110 = acosf(v111);
    v109 = 0.0;
    v106.i32[0] = v304;
    v96 = v316[0];
    v97 = v315[0];
    v42 = v305;
    v36 = v306;
    v19 = v307;
    v18 = v308;
    v21 = v309;
    v20 = v310;
  }
  v112 = vmul_f32(v93, v108);
  v113 = vmul_n_f32(v107, v110);
  if (v106.f32[0] < 1.0)
  {
    v114 = -1.0;
    if (v106.f32[0] >= -1.0)
      v114 = v106.f32[0];
    if (v114 > 1.0)
      v114 = 1.0;
    v115 = acosf(v114);
    v96 = v316[0];
    v97 = v315[0];
    v42 = v305;
    v36 = v306;
    v19 = v307;
    v18 = v308;
    v21 = v309;
    v20 = v310;
    v109 = v115;
  }
  v116 = (int8x8_t)vdup_lane_s16((int16x4_t)vorr_s8((int8x8_t)vcgt_f32(vmul_n_f32(v112, v109), v98), (int8x8_t)vcgt_f32(v113, v98)), 0);
  if (vuzp1_s8(v116, v116).u32[0] == -1)
  {
LABEL_37:
    *(float32x4_t *)v10 = v42;
    *(float32x4_t *)(v10 + 16) = v36;
    *(float32x4_t *)(v10 + 32) = v96;
    *(float32x4_t *)(v10 + 48) = v97;
    v145 = *(float *)(a1 + 4) == 1.0 && *(float *)(a1 + 8) == 1.0 && *(float *)(a1 + 12) == 1.0;
    v147 = *(float *)(a2 + 4) == 1.0 && *(float *)(a2 + 8) == 1.0 && *(float *)(a2 + 12) == 1.0;
    v148 = *(float32x4_t *)(a1 + 16);
    v149 = *(float32x4_t *)(a2 + 16);
    v56.i32[0] = *(_DWORD *)(_X27 + 24);
    v150 = v56;
    v150.i32[1] = *(_DWORD *)(_X27 + 28);
    v151 = v150;
    v151.i32[2] = *(_DWORD *)(_X27 + 32);
    v347 = 0;
    v348 = 0;
    v344 = v151;
    v355 = _X27;
    v357 = *(_QWORD *)(_X27 + 40) + 20 * *(unsigned __int8 *)(_X27 + 39);
    v358 = *(_BYTE *)(_X27 + 38);
    v152.i64[0] = *(_QWORD *)(_X27 + 60);
    v152.i64[1] = *(unsigned int *)(_X27 + 68);
    v153 = (int32x4_t)vmulq_f32(v19, v152);
    *(float32x2_t *)v153.i8 = vpmin_f32((float32x2_t)vdup_laneq_s32(v153, 2), *(float32x2_t *)v153.i8);
    v154 = vpmin_f32(*(float32x2_t *)v153.i8, *(float32x2_t *)v153.i8).f32[0];
    v345 = vmul_n_f32((float32x2_t)0x3D4CCCCD3DCCCCCDLL, v154);
    v346 = 0.025 * v154;
    if (v145)
    {
      v349 = xmmword_2260E5F10;
      v350 = xmmword_2260E5F20;
      v155 = (float32x4_t)xmmword_2260E5F40;
      v351 = xmmword_2260E5F40;
      v352 = xmmword_2260E5F10;
      v353 = xmmword_2260E5F20;
      v354 = xmmword_2260E5F40;
    }
    else
    {
      v156 = vrecpeq_f32(v19);
      v157 = 4;
      do
      {
        v156 = vmulq_f32(v156, vrecpsq_f32(v156, v19));
        --v157;
      }
      while (v157);
      *(int32x2_t *)v158.f32 = vdup_lane_s32(*(int32x2_t *)v18.f32, 0);
      v158.i64[1] = v158.u32[0];
      if ((~vuzp1_s8((int8x8_t)vmovn_s32(vceqq_f32(v158, v19)), *(int8x8_t *)v149.f32).u32[0] & 0xFFFFFF) != 0)
      {
        v165 = (float32x2_t)vdup_lane_s32(*(int32x2_t *)v148.f32, 1);
        v166 = (float32x2_t)vdup_laneq_s32((int32x4_t)v148, 2);
        v167 = (float32x2_t)vdup_laneq_s32((int32x4_t)v148, 3);
        v168 = vaddq_f32(v148, v148);
        v169 = (float32x2_t)vdup_lane_s32((int32x2_t)vmul_f32(*(float32x2_t *)v148.f32, *(float32x2_t *)v168.f32), 0);
        v170 = vmul_lane_f32(v165, *(float32x2_t *)v168.f32, 1);
        v171 = vmul_laneq_f32(v166, v168, 2);
        v172 = vmul_n_f32(v165, v168.f32[0]);
        v173 = vmul_n_f32(v166, v168.f32[0]);
        v174 = vmul_n_f32(v167, v168.f32[0]);
        v175 = vmul_lane_f32(v166, *(float32x2_t *)v168.f32, 1);
        v176 = vmul_lane_f32(v167, *(float32x2_t *)v168.f32, 1);
        v177 = vmul_laneq_f32(v167, v168, 2);
        v178 = vsub_f32(_D10, v169);
        *(int8x8_t *)v179.f32 = vext_s8((int8x8_t)vsub_f32(vsub_f32(_D10, v170), v171), (int8x8_t)vadd_f32(v172, v177), 4uLL);
        v179.i64[1] = vsub_f32(v173, v176).u32[0];
        *(int8x8_t *)v180.f32 = vext_s8((int8x8_t)vsub_f32(v172, v177), (int8x8_t)vsub_f32(v178, v171), 4uLL);
        *(int8x8_t *)v181.f32 = vext_s8((int8x8_t)vdup_lane_s32(*(int32x2_t *)v179.f32, 0), *(int8x8_t *)v180.f32, 4uLL);
        v180.i64[1] = vadd_f32(v175, v174).u32[0];
        *(int8x8_t *)v182.f32 = vext_s8(*(int8x8_t *)v179.f32, (int8x8_t)vdup_lane_s32(*(int32x2_t *)v180.f32, 1), 4uLL);
        v183 = (int8x8_t)vsub_f32(v175, v174);
        v175.i32[0] = vsub_f32(v178, v170).u32[0];
        *(int8x8_t *)v184.f32 = vext_s8((int8x8_t)vadd_f32(v173, v176), v183, 4uLL);
        v184.i64[1] = v175.u32[0];
        v181.i64[1] = vdup_lane_s32(*(int32x2_t *)v184.f32, 0).u32[0];
        v182.i64[1] = vdup_lane_s32(*(int32x2_t *)v184.f32, 1).u32[0];
        *(int8x8_t *)v185.f32 = vext_s8((int8x8_t)vdup_lane_s32(*(int32x2_t *)&v179.u32[2], 0), *(int8x8_t *)&v180.u32[2], 4uLL);
        v185.i64[1] = vdup_lane_s32((int32x2_t)v175.u32[0], 0).u32[0];
        v186 = vmulq_n_f32(v181, v18.f32[0]);
        v186.i32[3] = 0;
        v187 = vmulq_lane_f32(v182, *(float32x2_t *)v18.f32, 1);
        v187.i32[3] = 0;
        v188 = vmulq_laneq_f32(v185, v18, 2);
        v188.i32[3] = 0;
        v189 = vmulq_n_f32(v186, v179.f32[0]);
        v189.i32[3] = 0;
        v190 = vmulq_lane_f32(v187, *(float32x2_t *)v179.f32, 1);
        v190.i32[3] = 0;
        v191 = vmulq_laneq_f32(v188, v179, 2);
        v191.i32[3] = 0;
        v192 = vaddq_f32(v189, v190);
        v193 = vmulq_n_f32(v186, v180.f32[0]);
        v193.i32[3] = 0;
        v194 = vmulq_lane_f32(v187, *(float32x2_t *)v180.f32, 1);
        v194.i32[3] = 0;
        v195 = vmulq_laneq_f32(v188, v180, 2);
        v195.i32[3] = 0;
        v159 = vaddq_f32(v191, v192);
        v160 = vaddq_f32(v195, vaddq_f32(v193, v194));
        v196 = vmulq_n_f32(v186, v184.f32[0]);
        v196.i32[3] = 0;
        v197 = vmulq_lane_f32(v187, *(float32x2_t *)v184.f32, 1);
        v197.i32[3] = 0;
        v198 = vmulq_laneq_f32(v188, v184, 2);
        v198.i32[3] = 0;
        v161 = vaddq_f32(v198, vaddq_f32(v196, v197));
        v199 = vmulq_n_f32(v181, v156.f32[0]);
        v199.i32[3] = 0;
        v200 = vmulq_lane_f32(v182, *(float32x2_t *)v156.f32, 1);
        v200.i32[3] = 0;
        v201 = vmulq_laneq_f32(v185, v156, 2);
        v201.i32[3] = 0;
        v349 = (__int128)v159;
        v350 = (__int128)v160;
        v351 = (__int128)v161;
        v354 = (__int128)v201;
        v202 = vmulq_n_f32(v199, v179.f32[0]);
        v202.i32[3] = 0;
        v203 = vmulq_lane_f32(v200, *(float32x2_t *)v179.f32, 1);
        v203.i32[3] = 0;
        v204 = vmulq_laneq_f32(v201, v179, 2);
        v204.i32[3] = 0;
        v162 = vaddq_f32(v204, vaddq_f32(v202, v203));
        v205 = vmulq_n_f32(v199, v180.f32[0]);
        v205.i32[3] = 0;
        v206 = vmulq_lane_f32(v200, *(float32x2_t *)v180.f32, 1);
        v206.i32[3] = 0;
        v207 = vmulq_laneq_f32(v201, v180, 2);
        v207.i32[3] = 0;
        v208 = vmulq_n_f32(v199, v184.f32[0]);
        v208.i32[3] = 0;
        v209 = vmulq_lane_f32(v200, *(float32x2_t *)v184.f32, 1);
        v209.i32[3] = 0;
        v163 = vaddq_f32(v207, vaddq_f32(v205, v206));
        v210 = vmulq_laneq_f32(v201, v184, 2);
        v210.i32[3] = 0;
        v164 = vaddq_f32(v210, vaddq_f32(v208, v209));
      }
      else
      {
        v156.i32[3] = 0;
        v159 = vmulq_f32(v19, (float32x4_t)xmmword_2260E5F10);
        v160 = vmulq_f32(v19, (float32x4_t)xmmword_2260E5F20);
        v161 = vmulq_f32(v19, (float32x4_t)xmmword_2260E5F40);
        v349 = (__int128)v159;
        v350 = (__int128)v160;
        v351 = (__int128)v161;
        v162 = vmulq_f32(v156, (float32x4_t)xmmword_2260E5F10);
        v163 = vmulq_f32(v156, (float32x4_t)xmmword_2260E5F20);
        v164 = vmulq_f32(v156, (float32x4_t)xmmword_2260E5F40);
      }
      v353 = (__int128)v163;
      v354 = (__int128)v164;
      v155 = vmulq_n_f32(v159, v56.f32[0]);
      v155.i32[3] = 0;
      v211 = vmulq_lane_f32(v160, *(float32x2_t *)v150.f32, 1);
      v211.i32[3] = 0;
      v212 = vmulq_laneq_f32(v161, v151, 2);
      v212.i32[3] = 0;
      v352 = (__int128)v162;
      v344 = vaddq_f32(v212, vaddq_f32(v211, v155));
    }
    v356 = *(_QWORD *)(_X27 + 48);
    v155.i32[0] = *(_DWORD *)(_X26 + 24);
    v213 = v155;
    v213.i32[1] = *(_DWORD *)(_X26 + 28);
    v214 = v213;
    v214.i32[2] = *(_DWORD *)(_X26 + 32);
    v332 = 0;
    v333 = 0;
    v340 = _X26;
    v342 = *(_QWORD *)(_X26 + 40) + 20 * *(unsigned __int8 *)(_X26 + 39);
    v343 = *(_BYTE *)(_X26 + 38);
    v215.i64[0] = *(_QWORD *)(_X26 + 60);
    v215.i32[2] = *(_DWORD *)(_X26 + 68);
    v329 = v214;
    v215.i64[1] = v215.u32[2];
    v216 = (int32x4_t)vmulq_f32(v21, v215);
    *(float32x2_t *)v216.i8 = vpmin_f32((float32x2_t)vdup_laneq_s32(v216, 2), *(float32x2_t *)v216.i8);
    *(float *)v216.i32 = vpmin_f32(*(float32x2_t *)v216.i8, *(float32x2_t *)v216.i8).f32[0];
    v330 = vmul_n_f32((float32x2_t)0x3D4CCCCD3DCCCCCDLL, *(float *)v216.i32);
    v331 = 0.025 * *(float *)v216.i32;
    if (v147)
    {
      v334 = xmmword_2260E5F10;
      v335 = xmmword_2260E5F20;
      v336 = xmmword_2260E5F40;
      v337 = xmmword_2260E5F10;
      v338 = xmmword_2260E5F20;
      v339 = xmmword_2260E5F40;
    }
    else
    {
      v217 = vrecpeq_f32(v21);
      v218 = 4;
      do
      {
        v217 = vmulq_f32(v217, vrecpsq_f32(v217, v21));
        --v218;
      }
      while (v218);
      *(int32x2_t *)v219.f32 = vdup_lane_s32(*(int32x2_t *)v20.f32, 0);
      v219.i64[1] = v219.u32[0];
      if ((~vuzp1_s8((int8x8_t)vmovn_s32(vceqq_f32(v219, v21)), *(int8x8_t *)v149.f32).u32[0] & 0xFFFFFF) != 0)
      {
        v226 = (float32x2_t)vdup_lane_s32(*(int32x2_t *)v149.f32, 1);
        v227 = (float32x2_t)vdup_laneq_s32((int32x4_t)v149, 2);
        v228 = (float32x2_t)vdup_laneq_s32((int32x4_t)v149, 3);
        v229 = vaddq_f32(v149, v149);
        v230 = vmul_lane_f32(v226, *(float32x2_t *)v229.f32, 1);
        v231 = vmul_laneq_f32(v227, v229, 2);
        v232 = vmul_n_f32(v226, v229.f32[0]);
        v233 = vmul_n_f32(v227, v229.f32[0]);
        v234 = vmul_n_f32(v228, v229.f32[0]);
        v235 = vmul_lane_f32(v227, *(float32x2_t *)v229.f32, 1);
        v236 = vmul_lane_f32(v228, *(float32x2_t *)v229.f32, 1);
        v237 = vmul_laneq_f32(v228, v229, 2);
        v238 = vsub_f32(_D10, (float32x2_t)vdup_lane_s32((int32x2_t)vmul_f32(*(float32x2_t *)v149.f32, *(float32x2_t *)v229.f32), 0));
        *(int8x8_t *)v229.f32 = vext_s8((int8x8_t)vsub_f32(vsub_f32(_D10, v230), v231), (int8x8_t)vadd_f32(v232, v237), 4uLL);
        v239 = (int8x8_t)vsub_f32(v232, v237);
        v240.i64[0] = v229.i64[0];
        v240.i64[1] = vsub_f32(v233, v236).u32[0];
        v241 = (int32x2_t)vext_s8(v239, (int8x8_t)vsub_f32(v238, v231), 4uLL);
        v242 = (int8x8_t)vadd_f32(v233, v236);
        *(int8x8_t *)v243.f32 = vext_s8((int8x8_t)vdup_lane_s32(*(int32x2_t *)v229.f32, 0), (int8x8_t)v241, 4uLL);
        v244 = (int8x8_t)vdup_lane_s32(v241, 1);
        *(int32x2_t *)v245.f32 = v241;
        v245.i64[1] = vadd_f32(v235, v234).u32[0];
        *(int8x8_t *)v246.f32 = vext_s8(v242, (int8x8_t)vsub_f32(v235, v234), 4uLL);
        *(int8x8_t *)v247.f32 = vext_s8(*(int8x8_t *)v229.f32, v244, 4uLL);
        v246.i64[1] = vsub_f32(v238, v230).u32[0];
        v243.i64[1] = vdup_lane_s32(*(int32x2_t *)v246.f32, 0).u32[0];
        v247.i64[1] = vdup_lane_s32(*(int32x2_t *)v246.f32, 1).u32[0];
        *(int8x8_t *)v248.f32 = vext_s8((int8x8_t)vdup_lane_s32(*(int32x2_t *)&v240.u32[2], 0), *(int8x8_t *)&v245.u32[2], 4uLL);
        v248.i64[1] = vdup_lane_s32(*(int32x2_t *)&v246.u32[2], 0).u32[0];
        v249 = vmulq_n_f32(v243, v20.f32[0]);
        v249.i32[3] = 0;
        v250 = vmulq_lane_f32(v247, *(float32x2_t *)v20.f32, 1);
        v250.i32[3] = 0;
        v251 = vmulq_laneq_f32(v248, v20, 2);
        v251.i32[3] = 0;
        v252 = vmulq_n_f32(v249, v240.f32[0]);
        v252.i32[3] = 0;
        v253 = vmulq_lane_f32(v250, *(float32x2_t *)v240.f32, 1);
        v253.i32[3] = 0;
        v254 = vmulq_laneq_f32(v251, v240, 2);
        v254.i32[3] = 0;
        v220 = vaddq_f32(v254, vaddq_f32(v252, v253));
        v255 = vmulq_n_f32(v249, v245.f32[0]);
        v255.i32[3] = 0;
        v256 = vmulq_lane_f32(v250, *(float32x2_t *)v245.f32, 1);
        v256.i32[3] = 0;
        v257 = vmulq_laneq_f32(v251, v245, 2);
        v257.i32[3] = 0;
        v258 = vaddq_f32(v255, v256);
        v259 = vmulq_n_f32(v249, v246.f32[0]);
        v259.i32[3] = 0;
        v260 = vmulq_lane_f32(v250, *(float32x2_t *)v246.f32, 1);
        v260.i32[3] = 0;
        v261 = vmulq_laneq_f32(v251, v246, 2);
        v261.i32[3] = 0;
        v221 = vaddq_f32(v257, v258);
        v222 = vaddq_f32(v261, vaddq_f32(v259, v260));
        v334 = (__int128)v220;
        v335 = (__int128)v221;
        v336 = (__int128)v222;
        v262 = vmulq_n_f32(v243, v217.f32[0]);
        v262.i32[3] = 0;
        v263 = vmulq_lane_f32(v247, *(float32x2_t *)v217.f32, 1);
        v263.i32[3] = 0;
        v264 = vmulq_laneq_f32(v248, v217, 2);
        v264.i32[3] = 0;
        v265 = vmulq_n_f32(v262, v240.f32[0]);
        v265.i32[3] = 0;
        v266 = vmulq_lane_f32(v263, *(float32x2_t *)v240.f32, 1);
        v266.i32[3] = 0;
        v267 = vmulq_laneq_f32(v264, v240, 2);
        v267.i32[3] = 0;
        v223 = vaddq_f32(v267, vaddq_f32(v265, v266));
        v268 = vmulq_n_f32(v262, v245.f32[0]);
        v268.i32[3] = 0;
        v269 = vmulq_lane_f32(v263, *(float32x2_t *)v245.f32, 1);
        v269.i32[3] = 0;
        v270 = vmulq_laneq_f32(v264, v245, 2);
        v270.i32[3] = 0;
        v271 = vmulq_n_f32(v262, v246.f32[0]);
        v271.i32[3] = 0;
        v272 = vmulq_lane_f32(v263, *(float32x2_t *)v246.f32, 1);
        v272.i32[3] = 0;
        v224 = vaddq_f32(v270, vaddq_f32(v268, v269));
        v273 = vmulq_laneq_f32(v264, v246, 2);
        v273.i32[3] = 0;
        v225 = vaddq_f32(v273, vaddq_f32(v271, v272));
      }
      else
      {
        v217.i32[3] = 0;
        v220 = vmulq_f32(v21, (float32x4_t)xmmword_2260E5F10);
        v221 = vmulq_f32(v21, (float32x4_t)xmmword_2260E5F20);
        v222 = vmulq_f32(v21, (float32x4_t)xmmword_2260E5F40);
        v334 = (__int128)v220;
        v335 = (__int128)v221;
        v336 = (__int128)v222;
        v223 = vmulq_f32(v217, (float32x4_t)xmmword_2260E5F10);
        v224 = vmulq_f32(v217, (float32x4_t)xmmword_2260E5F20);
        v225 = vmulq_f32(v217, (float32x4_t)xmmword_2260E5F40);
      }
      v338 = (__int128)v224;
      v339 = (__int128)v225;
      v274 = vmulq_n_f32(v220, v155.f32[0]);
      v274.i32[3] = 0;
      v275 = vmulq_lane_f32(v221, *(float32x2_t *)v213.f32, 1);
      v275.i32[3] = 0;
      v276 = vmulq_laneq_f32(v222, v214, 2);
      v276.i32[3] = 0;
      v337 = (__int128)v223;
      v329 = vaddq_f32(v276, vaddq_f32(v275, v274));
    }
    v341 = *(_QWORD *)(_X26 + 48);
    v328 = 0;
    memset(v327, 0, 48);
    v277 = (float32x2_t)v317;
    if (v145)
    {
      v278 = v314;
      v322 = v311;
      v324 = v313;
      v279 = *(int8x8_t *)v312.i8;
      v280 = (float32x4_t)v311;
      v281 = (float32x2x2_t)vzip1q_s32(v311, v313);
      v360.val[0] = (float32x2_t)vzip2q_s32(v311, v313).u64[0];
      v282 = vzip1q_s32(v312, (int32x4_t)0);
      v360.val[1] = (float32x2_t)vzip2q_s32(v312, (int32x4_t)0).u64[0];
      v320.i64[0] = (uint64_t)off_24ED926C0;
      v320.i64[1] = (uint64_t)&v344;
      v321 = &v311;
      v283 = (float *)&v322;
      v284 = (float *)&v324;
      vst2_f32(v283, v281);
      v325 = v278;
      v323 = vzip2q_s32((int32x4_t)v281, v282);
      vst2_f32(v284, v360);
      v285 = (_BYTE *)(v10 + 67);
      v286 = (_BYTE *)(v10 + 71);
      v287 = (_BYTE *)(v10 + 66);
      if (v147)
      {
        v318 = off_24ED925A0;
        v319 = &v329;
        v288 = physx::Gu::gjkPenetration<physx::Gu::RelativeConvex<physx::Gu::ConvexHullNoScaleV>,physx::Gu::LocalConvex<physx::Gu::ConvexHullNoScaleV>>(&v320, (uint64_t)&v318, v285, v286, v287, v327, v314, v277, *(double *)v278.i64, v280, v279);
        v290 = 257;
      }
      else
      {
        v318 = off_24ED91168;
        v319 = &v329;
        v288 = physx::Gu::gjkPenetration<physx::Gu::RelativeConvex<physx::Gu::ConvexHullNoScaleV>,physx::Gu::LocalConvex<physx::Gu::ConvexHullV>>(&v320, (uint64_t)&v318, v285, v286, v287, v327, v314, v277, *(double *)v278.i64, v280, v279);
        v290 = 1;
      }
    }
    else
    {
      v291 = v314;
      v322 = v311;
      v324 = v313;
      v293 = *(int8x8_t *)v312.i8;
      v292 = *(double *)v313.i64;
      v294 = (float32x4_t)v311;
      v295 = (float32x2x2_t)vzip1q_s32(v311, v313);
      v361.val[0] = (float32x2_t)vzip2q_s32(v311, v313).u64[0];
      v296 = vzip1q_s32(v312, (int32x4_t)0);
      v361.val[1] = (float32x2_t)vzip2q_s32(v312, (int32x4_t)0).u64[0];
      v326 = v317;
      v320.i64[0] = (uint64_t)off_24ED91490;
      v320.i64[1] = (uint64_t)&v344;
      v321 = &v311;
      v297 = (float *)&v322;
      v298 = (float *)&v324;
      v299 = vzip2q_s32((int32x4_t)v295, v296);
      vst2_f32(v297, v295);
      v325 = v291;
      v323 = v299;
      vst2_f32(v298, v361);
      if (!v147)
      {
        v318 = off_24ED91168;
        v319 = &v329;
        v288 = physx::Gu::gjkPenetration<physx::Gu::RelativeConvex<physx::Gu::ConvexHullV>,physx::Gu::LocalConvex<physx::Gu::ConvexHullV>>(&v320, (uint64_t)&v318, &v314, (uint64_t *)&v326, 1, (_BYTE *)(v10 + 67), (_BYTE *)(v10 + 71), (_BYTE *)(v10 + 66), *(double *)v299.i64, v292, *(int8x8_t *)v291.f32, v294, (uint64_t)v327);
        v301 = (float32x2_t)v326;
        *(_WORD *)&v303[4] = 0;
        *(_DWORD *)v303 = v61;
        v302 = (float32x4_t *)a7;
        v300 = v62;
        goto LABEL_73;
      }
      v318 = off_24ED925A0;
      v319 = &v329;
      v288 = physx::Gu::gjkPenetration<physx::Gu::RelativeConvex<physx::Gu::ConvexHullV>,physx::Gu::LocalConvex<physx::Gu::ConvexHullNoScaleV>>(&v320, (uint64_t)&v318, (_BYTE *)(v10 + 67), (_BYTE *)(v10 + 71), (_BYTE *)(v10 + 66), v327, v314, v277, *(double *)v291.i64, v294, v293);
      v290 = 256;
    }
    *(_WORD *)&v303[4] = v290;
    *(_DWORD *)v303 = v61;
    v302 = (float32x4_t *)a7;
    v300 = v62;
    v301 = v277;
LABEL_73:
    *(float *)&v289 = v54;
    return physx::Gu::generateOrProcessContactsConvexConvex((uint64_t)&v320, (uint64_t)&v318, (uint64_t)v316, (int32x4_t *)v315, (float32x4_t *)&v311, v288, (uint64_t)v327, v10, v300, v301, v289, v302, *(unsigned int *)v303, v303[4], v303[5]);
  }
  if (!(_DWORD)v61)
    return 0;
  v117 = *(_QWORD *)(v10 + 80);
  v118 = *(int8x16_t *)(v117 + 32);
  v119 = (float32x4_t)v118;
  if ((_DWORD)v61 != 1)
  {
    v120 = v61 - 1;
    v121 = (float32x4_t *)(v117 + 80);
    v119 = (float32x4_t)v118;
    do
    {
      v122 = *v121;
      v121 += 3;
      v119 = vaddq_f32(v119, v122);
      --v120;
    }
    while (v120);
  }
  v119.i32[3] = 0;
  v123 = vmulq_f32(v119, v119);
  v123.i64[0] = vpaddq_f32(v123, v123).u64[0];
  v118.i32[3] = 0;
  v124 = (float32x4_t)vbslq_s8((int8x16_t)vcltzq_s32(vshlq_n_s32(vdupq_lane_s32(vcgt_f32(vpadd_f32(*(float32x2_t *)v123.f32, *(float32x2_t *)v123.f32), (float32x2_t)0x3400000034000000), 0), 0x1FuLL)), (int8x16_t)v119, v118);
  v125 = v97;
  v125.i32[3] = 0;
  v123.i64[0] = vdupq_laneq_s32((int32x4_t)v97, 3).u64[0];
  v126 = vmulq_n_f32(v124, vmla_f32((float32x2_t)0xBF000000BF000000, *(float32x2_t *)v123.f32, *(float32x2_t *)v123.f32).f32[0]);
  v126.i32[3] = 0;
  v127 = (float32x2_t)vextq_s8((int8x16_t)v125, (int8x16_t)v125, 8uLL).u64[0];
  v128 = (float32x2_t)vextq_s8((int8x16_t)v124, (int8x16_t)v124, 8uLL).u64[0];
  v129 = (int8x8_t)vmls_f32(vmul_f32(*(float32x2_t *)v97.f32, (float32x2_t)vext_s8(*(int8x8_t *)v124.f32, (int8x8_t)v128, 4uLL)), (float32x2_t)vext_s8(*(int8x8_t *)v97.f32, (int8x8_t)v127, 4uLL), *(float32x2_t *)v124.f32);
  *(int8x8_t *)v130.f32 = vext_s8(v129, (int8x8_t)vmls_f32(vmul_f32(v127, *(float32x2_t *)v124.f32), *(float32x2_t *)v97.f32, v128), 4uLL);
  v130.i64[1] = v129.u32[0];
  v131 = vmlaq_laneq_f32(v126, v130, v97, 3);
  v131.i64[1] = vextq_s8((int8x16_t)v131, (int8x16_t)v131, 8uLL).u32[0];
  v132 = vmulq_f32(v125, v124);
  v132.i64[0] = vpaddq_f32(v132, v132).u64[0];
  v133 = vmlaq_n_f32(v131, v125, vpadd_f32(*(float32x2_t *)v132.f32, *(float32x2_t *)v132.f32).f32[0]);
  v134 = vaddq_f32(v133, v133);
  v134.i32[3] = 0;
  v135 = vmulq_f32(v134, v134);
  v135.i64[0] = vpaddq_f32(v135, v135).u64[0];
  v136 = vpadd_f32(*(float32x2_t *)v135.f32, *(float32x2_t *)v135.f32);
  v137 = vrsqrte_f32(v136);
  v138 = 4;
  do
  {
    v137 = vmul_f32(v137, vrsqrts_f32(vmul_f32(v137, v137), v136));
    --v138;
  }
  while (v138);
  v139 = vmul_f32(v136, (float32x2_t)vbsl_s8((int8x8_t)vdup_lane_s32(vceqz_f32(v136), 0), (int8x8_t)_D10, (int8x8_t)v137));
  v140 = vrecpe_f32(v139);
  v141 = 4;
  do
  {
    v140 = vmul_f32(v140, vrecps_f32(v139, v140));
    --v141;
  }
  while (v141);
  v142 = vmulq_n_f32(v134, v140.f32[0]);
  v142.i32[3] = 0;
  v344 = v142;
  physx::Gu::PersistentContactManifold::addManifoldContactsToContactBuffer(v10, a7, &v344, v315, (uint64_t *)&v317);
  return 1;
}

BOOL physx::Gu::PCMContactConvexHeightfield(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, char a9, float32x4_t *a10, uint64_t a11)
{
  float32x4_t *v11;
  uint64_t v12;
  float *v13;
  float32x2_t *v14;
  float32x4_t *v15;
  float32x4_t *v16;
  uint64_t v17;
  uint64_t v18;
  double v19;
  uint64_t v20;
  float32x4_t v21;
  float32x4_t v22;
  float32x4_t v23;
  float32x4_t v24;
  int32x2_t v25;
  float32x4_t v26;
  float32x4_t v27;
  float32x4_t v28;
  float32x2_t v29;
  float32x4_t v30;
  float32x2_t v31;
  float32x2_t v32;
  int8x8_t v33;
  float32x4_t v34;
  float32x4_t v35;
  float32x4_t v36;
  float32x4_t v37;
  float32x4_t v38;
  float32x4_t v39;
  float32x2_t v40;
  float32x4_t v41;
  float32x4_t v42;
  float32x4_t v43;
  int8x16_t v44;
  float32x4_t v45;
  float32x2_t v50;
  float32x2_t v51;
  float32x4_t v52;
  float32x2_t v53;
  float32x2_t v54;
  float32x2_t v55;
  float32x2_t v56;
  float32x2_t v57;
  float32x2_t v58;
  float32x2_t v59;
  float32x2_t v60;
  float32x2_t v61;
  float32x2_t v62;
  float32x2_t v63;
  float32x4_t v64;
  unsigned int v65;
  unsigned int v66;
  __int8 *v67;
  uint64_t v68;
  unsigned int v69;
  unsigned __int32 v74;
  unsigned __int8 v75;
  char *v76;
  __int8 v77;
  float *v79;
  float *v80;
  float v81;
  float v82;
  float v83;
  float v84;
  float v85;
  float v86;
  float v87;
  float v88;
  float v89;
  float v90;
  float v91;
  float v92;
  float v93;
  float v94;
  float v95;
  float v96;
  float v97;
  float v98;
  float v99;
  float v100;
  float v101;
  float32x4_t *v102;
  float v103;
  uint64_t v104;
  uint64_t v105;
  char v106;
  float v107;
  float v108;
  float v109;
  float v110;
  float v111;
  float v112;
  float v113;
  float v114;
  float v115;
  float v116;
  float v117;
  float v118;
  float v119;
  float v120;
  float v121;
  float v122;
  float v123;
  float v124;
  float v125;
  float v126;
  float v127;
  float v128;
  float v129;
  float v130;
  float v131;
  float v132;
  float v133;
  float v134;
  float v135;
  float v136;
  float v137;
  unsigned int v138;
  uint64_t v139;
  int v140;
  unsigned int v141;
  uint64_t v142;
  char *v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t *v146;
  int v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t i;
  float32x4_t *v152;
  int v153;
  uint64_t v154;
  uint64_t v155;
  float32x4_t *v156;
  float32x4_t v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v162;
  unint64_t v163;
  unint64_t v164;
  unsigned int v165;
  unsigned int v166;
  unint64_t v167;
  float32x4_t v168;
  float32x4_t v169;
  __int128 *v170;
  __int128 v171;
  __int128 v172;
  __int128 v173;
  uint64_t v174;
  unsigned int v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  float v179;
  float v180;
  float v181;
  float v182;
  __int16 v183;
  int32x2_t v184;
  float v185;
  float32x2_t v186;
  float32x2_t *v187;
  float32x2_t v188;
  float32x4_t v189[2];
  float32x4_t v190[2];
  int32x2_t v191;
  float32x4_t v192;
  float32x4_t v193;
  float32x4_t v194[128];
  uint64_t v195[38];
  uint64_t v196;
  float v197[18];
  uint64_t v198;
  unsigned int v199;
  unsigned int v200;
  float32x2_t v201[544];
  char v202;
  float32x2_t *v203;
  uint64_t v204;
  uint64_t v205;

  v19 = MEMORY[0x24BDAC7A8](a1);
  v20 = v17;
  v205 = *MEMORY[0x24BDAC8D0];
  v21 = *v15;
  v22.i64[0] = v15[1].i64[0];
  v22.i64[1] = v15[1].u32[2];
  v23 = *v16;
  v24.i64[0] = v16[1].i64[0];
  v24.i64[1] = v16[1].u32[2];
  v191 = vdup_lane_s32(v25, 0);
  v190[0] = v21;
  v190[1] = v22;
  v26 = vnegq_f32(v23);
  v27 = vsubq_f32(v22, v24);
  v28 = v26;
  v28.i32[3] = 0;
  v29 = (float32x2_t)vdupq_laneq_s32((int32x4_t)v23, 3).u64[0];
  v30 = vmulq_n_f32(v27, vmla_f32((float32x2_t)0xBF000000BF000000, v29, v29).f32[0]);
  v30.i32[3] = 0;
  v189[0] = v23;
  v189[1] = v24;
  v31 = (float32x2_t)vextq_s8((int8x16_t)v28, (int8x16_t)v28, 8uLL).u64[0];
  v32 = (float32x2_t)vext_s8(*(int8x8_t *)v26.f32, (int8x8_t)v31, 4uLL);
  v33 = (int8x8_t)vmls_f32(vmul_f32(*(float32x2_t *)v26.f32, (float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v27, (int8x16_t)v27, 4uLL)), v32, *(float32x2_t *)v27.f32);
  *(int8x8_t *)v24.f32 = vext_s8(v33, (int8x8_t)vmls_f32(vmul_f32(v31, *(float32x2_t *)v27.f32), *(float32x2_t *)v26.f32, (float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v27, (int8x16_t)v27, 8uLL)), 4uLL);
  v24.i64[1] = v33.u32[0];
  v34 = vmlaq_laneq_f32(v30, v24, v23, 3);
  v34.i64[1] = vextq_s8((int8x16_t)v34, (int8x16_t)v34, 8uLL).u32[0];
  v35 = vmulq_f32(v28, v27);
  v35.i64[0] = vpaddq_f32(v35, v35).u64[0];
  v36 = vmlaq_n_f32(v34, v28, vpadd_f32(*(float32x2_t *)v35.f32, *(float32x2_t *)v35.f32).f32[0]);
  v37 = vaddq_f32(v36, v36);
  v37.i32[3] = 0;
  v38 = v21;
  v38.i32[3] = 0;
  v39 = vmulq_f32(v38, v28);
  v39.i64[0] = vpaddq_f32(v39, v39).u64[0];
  v40 = vsub_f32(vmul_f32((float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v21, (int8x16_t)v21, 8uLL), (float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v23, (int8x16_t)v23, 8uLL)), vpadd_f32(*(float32x2_t *)v39.f32, *(float32x2_t *)v39.f32));
  v41 = vmulq_laneq_f32(v38, v23, 3);
  v38.i64[0] = vextq_s8((int8x16_t)v38, (int8x16_t)v38, 8uLL).u64[0];
  *(float32x2_t *)v39.f32 = vmls_f32(vmul_f32((float32x2_t)vext_s8(*(int8x8_t *)v21.f32, *(int8x8_t *)v38.f32, 4uLL), *(float32x2_t *)v26.f32), v32, *(float32x2_t *)v21.f32);
  *(int8x8_t *)v26.f32 = vext_s8(*(int8x8_t *)v39.f32, (int8x8_t)vmls_f32(vmul_f32(*(float32x2_t *)v21.f32, v31), *(float32x2_t *)v26.f32, *(float32x2_t *)v38.f32), 4uLL);
  v26.i64[1] = v39.i64[0];
  v42 = vaddq_f32(vaddq_f32(vmulq_laneq_f32(v28, v21, 3), v41), v26);
  v43 = v42;
  v43.i32[3] = v40.i32[1];
  v44 = (int8x16_t)vabdq_f32(v37, a10[1]);
  *(float32x2_t *)v44.i8 = vpmax_f32((float32x2_t)*(_OWORD *)&vextq_s8(v44, v44, 8uLL), *(float32x2_t *)v44.i8);
  v45 = vmulq_f32(v43, *a10);
  v45.i64[0] = vpaddq_f32(v45, v45).u64[0];
  __asm { FMOV            V1.2S, #1.0 }
  if (vuzp1_s8((int8x8_t)vdup_lane_s16((int16x4_t)vorr_s8((int8x8_t)vcgt_f32((float32x2_t)vdup_n_s32(0x3F7FF2E5u), vpadd_f32(*(float32x2_t *)v45.f32, *(float32x2_t *)v45.f32)), (int8x8_t)vcgt_f32(vpmax_f32(*(float32x2_t *)v44.i8, *(float32x2_t *)v44.i8), vmul_f32(*(float32x2_t *)&v19, (float32x2_t)vdup_n_s32(0x3E4CCCCDu)))), 0), *(int8x8_t *)&v19).u32[0] == -1)
  {
    v79 = (float *)v16;
    v80 = v13;
    v177 = v17;
    v188 = vmul_f32(*(float32x2_t *)&v19, (float32x2_t)vdup_n_s32(0x3D4CCCCDu));
    a10[3].i8[14] = 0;
    *a10 = v43;
    a10[1] = v37;
    v81 = v16->f32[1];
    v82 = v16->f32[2];
    v83 = v16->f32[3];
    v84 = v15[1].f32[0] - v16[1].f32[0];
    v85 = v15[1].f32[1] - v16[1].f32[1];
    v86 = v15[1].f32[2] - v16[1].f32[2];
    v87 = v84 + v84;
    v88 = v85 + v85;
    v89 = v86 + v86;
    v90 = (float)(v83 * v83) + -0.5;
    v91 = (float)((float)-(float)(v81 * v88) - (float)(v16->f32[0] * v87)) - (float)(v82 * v89);
    v92 = (float)((float)(v83 * (float)((float)(v82 * v88) - (float)(v81 * v89))) + (float)(v87 * v90))
        - (float)(v16->f32[0] * v91);
    v93 = (float)((float)(v83 * (float)((float)(v16->f32[0] * v89) - (float)(v82 * v87))) + (float)(v88 * v90))
        - (float)(v81 * v91);
    v94 = (float)((float)(v83 * (float)((float)(v81 * v87) - (float)(v16->f32[0] * v88))) + (float)(v89 * v90))
        - (float)(v82 * v91);
    v96 = v15->f32[2];
    v95 = v15->f32[3];
    v97 = v15->f32[1];
    v98 = (float)((float)((float)(v83 * v15->f32[0]) - (float)(v16->f32[0] * v95)) - (float)(v81 * v96))
        + (float)(v97 * v82);
    v99 = (float)((float)((float)(v83 * v97) - (float)(v81 * v95)) - (float)(v82 * v15->f32[0]))
        + (float)(v96 * v16->f32[0]);
    v100 = (float)((float)((float)(v83 * v96) - (float)(v82 * v95)) - (float)(v16->f32[0] * v97))
         + (float)(v15->f32[0] * v81);
    v101 = (float)((float)((float)(v16->f32[0] * v15->f32[0]) + (float)(v83 * v95)) + (float)(v81 * v97))
         + (float)(v82 * v96);
    v102 = v11;
    v186 = v14[1];
    v187 = v14;
    v103 = v14[3].f32[0];
    v184 = vrev64_s32((int32x2_t)vdiv_f32(_D1, v14[2]));
    v185 = 1.0 / v103;
    v204 = 0x44000000000;
    v202 = 1;
    v203 = v201;
    v104 = v18;
    v105 = v12;
    (*(void (**)(__int16 *__return_ptr))(**(_QWORD **)&v186 + 104))(&v183);
    v106 = (v183 & 1) == 0;
    v192.i64[1] = (uint64_t)&v184;
    v193.i64[0] = (uint64_t)v79;
    (*(void (**)(uint64_t *__return_ptr))(**(_QWORD **)&v186 + 104))(&v178);
    v193.i8[8] = (v178 & 1) == 0;
    v192.i64[0] = (uint64_t)&off_24ED92720;
    v176 = v104;
    v20 = v177;
    physx::Gu::PCMConvexVsMeshContactGeneration::PCMConvexVsMeshContactGeneration((unint64_t)v194, &v191, &v188, v190, v189, (uint64_t)a10, v177, v102, v105, (uint64_t)v201, v176, a9, v106, a11);
    v107 = v80[1];
    v109 = v80[2];
    v108 = v80[3];
    v110 = v80[4];
    v111 = v80[5];
    v112 = (float)((float)(*v80 + v108) * 0.5) + (float)((float)(*v80 + v108) * 0.5);
    v113 = (float)((float)(v107 + v110) * 0.5) + (float)((float)(v107 + v110) * 0.5);
    v114 = (float)((float)(v109 + v111) * 0.5) + (float)((float)(v109 + v111) * 0.5);
    v115 = (float)(v101 * v101) + -0.5;
    v116 = (float)((float)(v99 * v113) + (float)(v98 * v112)) + (float)(v100 * v114);
    v117 = (float)((float)(v101 * (float)((float)(v99 * v114) - (float)(v100 * v113))) + (float)(v112 * v115))
         + (float)(v98 * v116);
    v118 = (float)((float)(v101 * (float)((float)(v100 * v112) - (float)(v98 * v114))) + (float)(v113 * v115))
         + (float)(v99 * v116);
    v119 = (float)((float)(v101 * (float)((float)(v98 * v113) - (float)(v99 * v112))) + (float)(v114 * v115))
         + (float)(v100 * v116);
    v120 = v92 + v117;
    v121 = v93 + v118;
    v122 = v94 + v119;
    v123 = v99 * (float)(v99 + v99);
    v124 = v100 * (float)(v100 + v100);
    v125 = (float)(v98 + v98) * v99;
    v126 = v100 * (float)(v98 + v98);
    v127 = v101 * (float)(v98 + v98);
    v128 = v100 * (float)(v99 + v99);
    v129 = v101 * (float)(v99 + v99);
    v130 = v101 * (float)(v100 + v100);
    v131 = 1.0 - (float)(v98 * (float)(v98 + v98));
    v132 = (float)(v108 - *v80) * 0.5;
    v133 = (float)(v110 - v107) * 0.5;
    v134 = (float)(v111 - v109) * 0.5;
    v135 = (float)(fabsf((float)((float)(1.0 - v123) - v124) * v132) + fabsf((float)(v125 - v130) * v133))
         + fabsf((float)(v126 + v129) * v134);
    v136 = (float)(fabsf((float)(v125 + v130) * v132) + fabsf((float)(v131 - v124) * v133))
         + fabsf((float)(v128 - v127) * v134);
    v137 = (float)(fabsf((float)(v126 - v129) * v132) + fabsf((float)(v127 + v128) * v133))
         + fabsf((float)(v131 - v123) * v134);
    *(float *)&v178 = v120 - v135;
    *((float *)&v178 + 1) = v121 - v136;
    v179 = v122 - v137;
    v180 = v135 + v120;
    v181 = v136 + v121;
    v182 = v137 + v122;
    physx::Gu::HeightFieldUtil::overlapAABBTriangles((uint64_t)&v184, v79, (float *)&v178, 0, (uint64_t)&v192);
    physx::Gu::PCMConvexVsMeshContactGeneration::generateLastContacts(v194);
    v138 = v199;
    if (v199)
    {
      v139 = v200;
      if (v200 >= 2)
      {
        v140 = 0;
        v141 = -1;
        v142 = 1;
        do
        {
          v143 = (char *)v194 + 8 * v142;
          v144 = *((_QWORD *)v143 + 255);
          v145 = *((_QWORD *)v143 + 256);
          if (COERCE_FLOAT(*(_QWORD *)(v144 + 40)) > COERCE_FLOAT(*(_QWORD *)(v145 + 40)))
          {
            *((_QWORD *)v143 + 255) = v145;
            *((_QWORD *)v143 + 256) = v144;
            if ((int)v142 - 2 >= 0)
            {
              v146 = &v195[v141 + 1];
              v147 = v140;
              do
              {
                v149 = *(v146 - 1);
                v148 = *v146;
                if (COERCE_FLOAT(*(_QWORD *)(*v146 + 40)) >= COERCE_FLOAT(*(_QWORD *)(v149 + 40)))
                  break;
                *v146 = v149;
                *--v146 = v148;
                --v147;
              }
              while (v147 > 0);
            }
          }
          ++v142;
          ++v141;
          ++v140;
        }
        while (v142 != v139);
      }
      if ((_DWORD)v139)
      {
        v150 = 0;
        for (i = 0; i != v139; ++i)
        {
          v152 = (float32x4_t *)v195[i];
          v152[1].i64[1] = (uint64_t)v152;
          v152[2].i64[0] = (uint64_t)v152;
          v153 = v152[3].i32[1] - v152[3].i32[0];
          v152[3].i32[2] = v153;
          v152[1].i64[0] = 0;
          v154 = v150;
          while (v154)
          {
            v155 = *(uint64_t *)((char *)&v194[127].i64[1] + v154);
            v156 = *(float32x4_t **)(v155 + 32);
            v157 = vmulq_f32(*v152, *v156);
            v157.i64[0] = vpaddq_f32(v157, v157).u64[0];
            v154 -= 8;
            if (vpadd_f32(*(float32x2_t *)v157.f32, *(float32x2_t *)v157.f32).f32[0] >= *(float *)&v196)
            {
              *(_QWORD *)(v155 + 16) = v152;
              v156[1].i64[1] = (uint64_t)v152;
              v152[2].i64[0] = (uint64_t)v156;
              *(_DWORD *)(*(_QWORD *)(v155 + 32) + 56) += v153;
              break;
            }
          }
          v150 += 8;
        }
        v158 = 0;
        v159 = v198;
        do
        {
          v160 = v195[v158];
          if (v160)
            _ZF = *(_QWORD *)(v160 + 32) == v160;
          else
            _ZF = 0;
          if (_ZF)
          {
            while (*(_QWORD *)(v160 + 16))
            {
              v162 = v160;
              v160 = *(_QWORD *)(v160 + 16);
              v163 = *(unsigned int *)(v162 + 48);
              v164 = *(unsigned int *)(v162 + 52);
              if (v163 < v164)
              {
                v165 = *(_DWORD *)(v160 + 52);
                do
                {
                  v166 = *(_DWORD *)(v160 + 48);
                  if (v166 < v165)
                  {
                    do
                    {
                      v167 = v159 + ((unint64_t)v166 << 6);
                      v168 = vsubq_f32(*(float32x4_t *)(v167 + 16), *(float32x4_t *)(v159 + (v163 << 6) + 16));
                      v169 = vmulq_f32(v168, v168);
                      v169.i64[0] = vpaddq_f32(v169, v169).u64[0];
                      if (v197[0] > vpadd_f32(*(float32x2_t *)v169.f32, *(float32x2_t *)v169.f32).f32[0])
                      {
                        v170 = (__int128 *)(v159 + ((unint64_t)(v165 - 1) << 6));
                        v171 = *v170;
                        v172 = v170[1];
                        v173 = v170[2];
                        *(_DWORD *)(v167 + 48) = *((_DWORD *)v170 + 12);
                        *(_OWORD *)(v167 + 16) = v172;
                        *(_OWORD *)(v167 + 32) = v173;
                        *(_OWORD *)v167 = v171;
                        v165 = *(_DWORD *)(v160 + 52) - 1;
                        *(_DWORD *)(v160 + 52) = v165;
                        --v166;
                      }
                      ++v166;
                    }
                    while (v166 < v165);
                    v164 = *(unsigned int *)(v162 + 52);
                  }
                  ++v163;
                }
                while (v163 < v164);
              }
            }
          }
          ++v158;
        }
        while (v158 != v139);
        v174 = v198;
        v138 = v199;
        v175 = v200;
      }
      else
      {
        v175 = 0;
        v174 = v198;
      }
      physx::Gu::MultiplePersistentContactManifold::addManifoldContactPoints(v195[36], v174, v138, v195, v175, (uint64_t)v197, &v196, 6);
    }
    if ((v204 & 0x8000000000000000) == 0 && (v204 & 0x7FFFFFFF00000000) != 0 && v203 != v201 && v203)
      (*(void (**)(uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
  }
  else
  {
    v50 = (float32x2_t)vdup_lane_s32(*(int32x2_t *)v42.f32, 1);
    v51 = (float32x2_t)vdup_laneq_s32((int32x4_t)v42, 2);
    v194[1] = v37;
    v52 = vaddq_f32(v42, v42);
    v53 = (float32x2_t)vdup_lane_s32(*(int32x2_t *)v52.f32, 1);
    v54 = (float32x2_t)vdup_laneq_s32((int32x4_t)v52, 2);
    v55 = (float32x2_t)vdup_lane_s32((int32x2_t)vmul_f32(*(float32x2_t *)v42.f32, *(float32x2_t *)v52.f32), 0);
    v56 = vmul_lane_f32(v50, *(float32x2_t *)v52.f32, 1);
    v57 = vmul_laneq_f32(v51, v52, 2);
    v58 = vmul_n_f32(v50, v52.f32[0]);
    v59 = vmul_n_f32(v51, v52.f32[0]);
    v60 = vmul_lane_f32((float32x2_t)vdup_lane_s32(*(int32x2_t *)v52.f32, 0), v40, 1);
    *(float32x2_t *)v52.f32 = vmul_lane_f32(v51, *(float32x2_t *)v52.f32, 1);
    v61 = vmul_lane_f32(v53, v40, 1);
    v62 = vmul_lane_f32(v54, v40, 1);
    v63 = vsub_f32(_D1, v55);
    *(int8x8_t *)v64.f32 = vext_s8((int8x8_t)vsub_f32(vsub_f32(_D1, v56), v57), (int8x8_t)vadd_f32(v58, v62), 4uLL);
    v64.i64[1] = vsub_f32(v59, v61).u32[0];
    v192 = v64;
    *(int8x8_t *)v64.f32 = vext_s8((int8x8_t)vsub_f32(v58, v62), (int8x8_t)vsub_f32(v63, v57), 4uLL);
    v64.i64[1] = vadd_f32(*(float32x2_t *)v52.f32, v60).u32[0];
    v193 = v64;
    *(int8x8_t *)v64.f32 = vext_s8((int8x8_t)vadd_f32(v59, v61), (int8x8_t)vsub_f32(*(float32x2_t *)v52.f32, v60), 4uLL);
    v64.i64[1] = vsub_f32(v63, v56).u32[0];
    v194[0] = v64;
    v201[0] = vmul_f32(*(float32x2_t *)&v19, (float32x2_t)vdup_n_s32(0x3F19999Au));
    v65 = a10[3].u8[14];
    if (a10[3].i8[14])
    {
      v66 = 0;
      do
      {
        v67 = &a10[3].i8[v66 + 8];
        v68 = *v67;
        v69 = v65 - 2;
        if (v66 < v69)
          v69 = v66;
        _X8 = (uint64_t)&a10[25 * a10[3].u8[v69 + 9] + 4];
        __asm
        {
          PRFM            #0, [X8]
          PRFM            #0, [X8,#0x80]
          PRFM            #0, [X8,#0x100]
        }
        v74 = physx::Gu::SinglePersistentContactManifold::refreshContactPoints((uint64_t)&a10[25 * *v67 + 4], &v192, v201).u32[0];
        if (a10[25 * v68 + 28].i32[0])
        {
          a10[2].i32[v68] = v74;
        }
        else
        {
          v75 = a10[3].i8[14] - 1;
          a10[3].i8[14] = v75;
          v76 = (char *)a10 + v75;
          v77 = v76[56];
          v76[56] = v68;
          *v67 = v77;
          --v66;
        }
        ++v66;
        v65 = a10[3].u8[14];
      }
      while (v66 < v65);
    }
  }
  return physx::Gu::MultiplePersistentContactManifold::addManifoldContactsToContactBuffer((uint64_t)a10, v20, v189);
}

BOOL physx::Gu::pcmContactConvexHeightField(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, float32x4_t **a6, uint64_t a7, uint64_t a8)
{
  uint64_t v15;
  float32x4_t *v16;
  __int128 v17;
  _BOOL4 PCMConvexData;
  _BOOL4 v19;
  float32x4_t v20;
  float32x4_t v21;
  float32x4_t v22;
  int32x4_t v23;
  float32x2_t v24;
  float v25;
  int8x8_t v31;
  float32x4_t v32;
  float32x4_t v33;
  int v34;
  float32x4_t v35;
  float32x4_t v36;
  float32x4_t v37;
  float32x4_t v38;
  float32x4_t v39;
  float32x4_t v40;
  float32x4_t v41;
  float32x2_t v42;
  float32x2_t v43;
  float32x2_t v44;
  float32x2_t v46;
  float32x2_t v47;
  float32x2_t v48;
  float32x2_t v49;
  float32x2_t v50;
  float32x2_t v51;
  float32x2_t v52;
  float32x2_t v53;
  float32x2_t v54;
  float32x2_t v55;
  float32x4_t v56;
  float32x4_t v57;
  int8x8_t v58;
  float32x4_t v59;
  float32x4_t v60;
  float32x4_t v61;
  float32x4_t v62;
  float32x4_t v63;
  float32x4_t v64;
  float32x4_t v65;
  float32x4_t v66;
  float32x4_t v67;
  float32x4_t v68;
  float32x4_t v69;
  float32x4_t v70;
  float32x4_t v71;
  float32x4_t v72;
  float32x4_t v73;
  float32x4_t v74;
  float32x4_t v75;
  float32x4_t v76;
  float32x4_t v77;
  float32x4_t v78;
  float32x4_t v79;
  float32x4_t v80;
  float32x4_t v81;
  float32x4_t v82;
  float32x4_t v83;
  float32x4_t v84;
  float32x4_t v85;
  float32x4_t v86;
  float32x4_t v87;
  float32x4_t v88;
  float32x4_t v89;
  _BYTE v91[104];
  _BYTE v92[24];
  _OWORD v93[4];
  uint64_t v94;
  char v95;
  _OWORD v96[2];
  _QWORD v97[4];
  _OWORD *v98;
  __int128 *v99;
  __int128 *v100;
  char v101;
  float32x4_t *v102;
  float32x4_t v103;
  __int128 v104;
  char v105;
  __int128 v106;
  __int128 v107;
  __int128 v108;
  __int128 v109;
  __int128 v110;
  __int128 v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  char v115;
  uint64_t v116;

  v116 = *MEMORY[0x24BDAC8D0];
  v15 = *(_QWORD *)(a1 + 48);
  v16 = *a6;
  *(_QWORD *)&v17 = *(_QWORD *)(a3 + 16);
  *((_QWORD *)&v17 + 1) = *(unsigned int *)(a3 + 24);
  v96[0] = *(_OWORD *)a3;
  v96[1] = v17;
  v93[0] = xmmword_2260E5F10;
  v93[1] = xmmword_2260E5F10;
  v93[2] = xmmword_2260FD430;
  v93[3] = xmmword_2260E5F20;
  v94 = 0x3F80000000000000;
  v95 = 0;
  PCMConvexData = physx::Gu::getPCMConvexData(a1, (uint64_t)v93, (uint64_t)v92, (uint64_t)v91);
  v19 = 0;
  v20.i64[0] = *(_QWORD *)(v15 + 60);
  v21 = *(float32x4_t *)(a1 + 4);
  v22 = v21;
  v22.i32[3] = 0;
  v20.i64[1] = *(unsigned int *)(v15 + 68);
  v23 = (int32x4_t)vmulq_f32(v22, v20);
  v24 = vpmin_f32((float32x2_t)vdup_laneq_s32(v23, 2), *(float32x2_t *)v23.i8);
  LODWORD(v25) = vpmin_f32(v24, v24).u32[0];
  __asm { FMOV            V1.2S, #0.25 }
  if (v21.f32[0] == 1.0 && v21.f32[1] == 1.0)
    v19 = v21.f32[2] == 1.0;
  v24.f32[0] = *(float *)(a5 + 8) * 0.05;
  v31 = (int8x8_t)vdup_lane_s32((int32x2_t)v24, 0);
  v32 = *(float32x4_t *)(a1 + 16);
  v105 = 0;
  v103 = 0u;
  v104 = 0u;
  v112 = v15;
  v114 = *(_QWORD *)(v15 + 40) + 20 * *(unsigned __int8 *)(v15 + 39);
  v115 = *(_BYTE *)(v15 + 38);
  *(float32x2_t *)&v104 = vmul_n_f32((float32x2_t)0x3D4CCCCD3DCCCCCDLL, v25);
  *((float *)&v104 + 2) = 0.025 * v25;
  if (v19)
  {
    v106 = xmmword_2260E5F10;
    v107 = xmmword_2260E5F20;
    v108 = xmmword_2260E5F40;
    v109 = xmmword_2260E5F10;
    v110 = xmmword_2260E5F20;
    v111 = xmmword_2260E5F40;
  }
  else
  {
    v33 = vrecpeq_f32(v22);
    v34 = 4;
    do
    {
      v33 = vmulq_f32(v33, vrecpsq_f32(v33, v22));
      --v34;
    }
    while (v34);
    *(int32x2_t *)v35.f32 = vdup_lane_s32(*(int32x2_t *)v21.f32, 0);
    v35.i64[1] = v35.u32[0];
    if ((~vuzp1_s8((int8x8_t)vmovn_s32(vceqq_f32(v35, v22)), v31).u32[0] & 0xFFFFFF) != 0)
    {
      v42 = (float32x2_t)vdup_lane_s32(*(int32x2_t *)v32.f32, 1);
      v43 = (float32x2_t)vdup_laneq_s32((int32x4_t)v32, 2);
      v44 = (float32x2_t)vdup_laneq_s32((int32x4_t)v32, 3);
      _Q17 = vaddq_f32(v32, v32);
      v46 = (float32x2_t)vdup_lane_s32((int32x2_t)vmul_f32(*(float32x2_t *)v32.f32, *(float32x2_t *)_Q17.f32), 0);
      v47 = vmul_lane_f32(v42, *(float32x2_t *)_Q17.f32, 1);
      v48 = vmul_laneq_f32(v43, _Q17, 2);
      v49 = vmul_n_f32(v42, _Q17.f32[0]);
      v50 = vmul_n_f32(v43, _Q17.f32[0]);
      v51 = vmul_n_f32(v44, _Q17.f32[0]);
      v52 = vmul_lane_f32(v43, *(float32x2_t *)_Q17.f32, 1);
      v53 = vmul_lane_f32(v44, *(float32x2_t *)_Q17.f32, 1);
      v54 = vmul_laneq_f32(v44, _Q17, 2);
      __asm { FMOV            V17.2S, #1.0 }
      v55 = vsub_f32(*(float32x2_t *)_Q17.f32, v46);
      *(int8x8_t *)v56.f32 = vext_s8((int8x8_t)vsub_f32(vsub_f32(*(float32x2_t *)_Q17.f32, v47), v48), (int8x8_t)vadd_f32(v49, v54), 4uLL);
      v56.i64[1] = vsub_f32(v50, v53).u32[0];
      *(int8x8_t *)v57.f32 = vext_s8((int8x8_t)vsub_f32(v49, v54), (int8x8_t)vsub_f32(v55, v48), 4uLL);
      v58 = (int8x8_t)vadd_f32(v50, v53);
      *(int8x8_t *)_Q17.f32 = vext_s8((int8x8_t)vdup_lane_s32(*(int32x2_t *)v56.f32, 0), *(int8x8_t *)v57.f32, 4uLL);
      v57.i64[1] = vadd_f32(v52, v51).u32[0];
      v53.i32[0] = vsub_f32(v55, v47).u32[0];
      *(int8x8_t *)v59.f32 = vext_s8(v58, (int8x8_t)vsub_f32(v52, v51), 4uLL);
      *(int8x8_t *)v60.f32 = vext_s8(*(int8x8_t *)v56.f32, (int8x8_t)vdup_lane_s32(*(int32x2_t *)v57.f32, 1), 4uLL);
      v59.i64[1] = v53.u32[0];
      _Q17.i64[1] = vdup_lane_s32(*(int32x2_t *)v59.f32, 0).u32[0];
      v60.i64[1] = vdup_lane_s32(*(int32x2_t *)v59.f32, 1).u32[0];
      *(int8x8_t *)v61.f32 = vext_s8((int8x8_t)vdup_lane_s32(*(int32x2_t *)&v56.u32[2], 0), *(int8x8_t *)&v57.u32[2], 4uLL);
      v61.i64[1] = vdup_lane_s32((int32x2_t)v53.u32[0], 0).u32[0];
      v62 = vmulq_n_f32(_Q17, v21.f32[0]);
      v62.i32[3] = 0;
      v63 = vmulq_lane_f32(v60, *(float32x2_t *)v21.f32, 1);
      v63.i32[3] = 0;
      v64 = vmulq_laneq_f32(v61, v21, 2);
      v64.i32[3] = 0;
      v65 = vmulq_n_f32(v62, v56.f32[0]);
      v65.i32[3] = 0;
      v66 = vmulq_lane_f32(v63, *(float32x2_t *)v56.f32, 1);
      v66.i32[3] = 0;
      v67 = vmulq_laneq_f32(v64, v56, 2);
      v67.i32[3] = 0;
      v36 = vaddq_f32(v67, vaddq_f32(v65, v66));
      v68 = vmulq_n_f32(v62, v57.f32[0]);
      v68.i32[3] = 0;
      v69 = vmulq_lane_f32(v63, *(float32x2_t *)v57.f32, 1);
      v69.i32[3] = 0;
      v70 = vmulq_laneq_f32(v64, v57, 2);
      v70.i32[3] = 0;
      v71 = vaddq_f32(v68, v69);
      v72 = vmulq_n_f32(v62, v59.f32[0]);
      v72.i32[3] = 0;
      v73 = vmulq_lane_f32(v63, *(float32x2_t *)v59.f32, 1);
      v73.i32[3] = 0;
      v74 = vmulq_laneq_f32(v64, v59, 2);
      v74.i32[3] = 0;
      v37 = vaddq_f32(v70, v71);
      v38 = vaddq_f32(v74, vaddq_f32(v72, v73));
      v106 = (__int128)v36;
      v107 = (__int128)v37;
      v108 = (__int128)v38;
      v75 = vmulq_n_f32(_Q17, v33.f32[0]);
      v75.i32[3] = 0;
      v76 = vmulq_lane_f32(v60, *(float32x2_t *)v33.f32, 1);
      v76.i32[3] = 0;
      v77 = vmulq_laneq_f32(v61, v33, 2);
      v77.i32[3] = 0;
      v78 = vmulq_n_f32(v75, v56.f32[0]);
      v78.i32[3] = 0;
      v79 = vmulq_lane_f32(v76, *(float32x2_t *)v56.f32, 1);
      v79.i32[3] = 0;
      v80 = vmulq_laneq_f32(v77, v56, 2);
      v80.i32[3] = 0;
      v39 = vaddq_f32(v80, vaddq_f32(v78, v79));
      v81 = vmulq_n_f32(v75, v57.f32[0]);
      v81.i32[3] = 0;
      v82 = vmulq_lane_f32(v76, *(float32x2_t *)v57.f32, 1);
      v82.i32[3] = 0;
      v83 = vmulq_laneq_f32(v77, v57, 2);
      v83.i32[3] = 0;
      v84 = vmulq_n_f32(v75, v59.f32[0]);
      v84.i32[3] = 0;
      v85 = vmulq_lane_f32(v76, *(float32x2_t *)v59.f32, 1);
      v85.i32[3] = 0;
      v40 = vaddq_f32(v83, vaddq_f32(v81, v82));
      v86 = vmulq_laneq_f32(v77, v59, 2);
      v86.i32[3] = 0;
      v41 = vaddq_f32(v86, vaddq_f32(v84, v85));
    }
    else
    {
      v33.i32[3] = 0;
      v36 = vmulq_f32(v22, (float32x4_t)xmmword_2260E5F10);
      v37 = vmulq_f32(v22, (float32x4_t)xmmword_2260E5F20);
      v38 = vmulq_f32(v22, (float32x4_t)xmmword_2260E5F40);
      v106 = (__int128)v36;
      v107 = (__int128)v37;
      v108 = (__int128)v38;
      v39 = vmulq_f32(v33, (float32x4_t)xmmword_2260E5F10);
      v40 = vmulq_f32(v33, (float32x4_t)xmmword_2260E5F20);
      v41 = vmulq_f32(v33, (float32x4_t)xmmword_2260E5F40);
    }
    v110 = (__int128)v40;
    v111 = (__int128)v41;
    v87 = vmulq_f32(v36, (float32x4_t)0);
    v87.i32[3] = 0;
    v88 = vmulq_f32(v37, (float32x4_t)0);
    v88.i32[3] = 0;
    v89 = vmulq_f32(v38, (float32x4_t)0);
    v89.i32[3] = 0;
    v109 = (__int128)v39;
    v103 = vaddq_f32(v89, vaddq_f32(v88, v87));
  }
  v113 = *(_QWORD *)(v15 + 48);
  v99 = &v106;
  v100 = &v109;
  if (PCMConvexData)
  {
    v101 = 1;
    v98 = v96;
    v97[0] = &off_24ED91040;
    v102 = &v103;
    return physx::Gu::PCMContactConvexHeightfield((uint64_t)v91, (uint64_t)v97, (uint64_t)v92, a2, a3, a4, a7, (uint64_t)v93, 1, v16, a8);
  }
  else
  {
    v101 = 0;
    v98 = v96;
    v97[0] = &off_24ED91090;
    v102 = &v103;
    return physx::Gu::PCMContactConvexHeightfield((uint64_t)v91, (uint64_t)v97, (uint64_t)v92, a2, a3, a4, a7, (uint64_t)v93, 0, v16, a8);
  }
}

BOOL physx::Gu::pcmContactBoxHeightField(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, __int32 *a5, float32x4_t **a6, uint64_t a7, uint64_t a8, int32x2_t a9, int32x4_t a10, double a11, double a12, int32x4_t a13)
{
  float32x4_t *v18;
  float v19;
  float32x2_t v20;
  __int128 v21;
  __int128 v22;
  int32x4_t v23;
  _OWORD v25[3];
  _BYTE v26[8];
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  int v30;
  uint64_t v31;
  int v32;
  uint64_t *v33;
  uint64_t *v34;
  void *v35;
  __int128 v36;
  __int128 v37;
  _OWORD v38[2];
  _QWORD v39[2];
  __int32 v40;
  unsigned __int32 v41;
  unsigned __int32 v42;
  int v43;
  char v44;
  int32x4_t v45;
  _OWORD v46[4];
  uint64_t v47;
  char v48;
  float32x2_t v49;
  float v50;
  float32x2_t v51;
  float v52;
  _QWORD v53[7];
  char v54;
  _QWORD *v55;
  uint64_t v56;

  v56 = *MEMORY[0x24BDAC8D0];
  v18 = *a6;
  a9.i32[0] = *a5;
  a10.i32[0] = *(_DWORD *)(a1 + 12);
  v19 = *(float *)a5 + *(float *)a10.i32;
  a13.i64[0] = *(_QWORD *)(a1 + 4);
  v20 = vadd_f32((float32x2_t)vdup_lane_s32(a9, 0), *(float32x2_t *)a13.i8);
  v49 = vneg_f32(v20);
  v50 = -v19;
  v51 = v20;
  v52 = v19;
  v46[0] = xmmword_2260E5F10;
  v46[1] = xmmword_2260E5F10;
  v46[2] = xmmword_2260FD430;
  v46[3] = xmmword_2260E5F20;
  v47 = 0x3F80000000000000;
  v48 = 0;
  *(_QWORD *)&v21 = *(_QWORD *)(a3 + 16);
  *((_QWORD *)&v21 + 1) = *(unsigned int *)(a3 + 24);
  v22 = *(_OWORD *)a3;
  v23 = a13;
  v23.i32[2] = a10.i32[0];
  *(int32x2_t *)a10.i8 = vdup_laneq_s32(v23, 2);
  v23.i32[3] = 0;
  *(float32x2_t *)a10.i8 = vpmin_f32(*(float32x2_t *)a10.i8, *(float32x2_t *)a13.i8);
  *(float32x2_t *)a10.i8 = vpmin_f32(*(float32x2_t *)a10.i8, *(float32x2_t *)a10.i8);
  v43 = 3;
  v44 = 0;
  v39[0] = 0;
  v39[1] = 0;
  v45 = v23;
  *(float *)v23.i32 = 0.15 * *(float *)a10.i32;
  *(float *)a10.i32 = 0.05 * *(float *)a10.i32;
  v40 = v23.i32[0];
  v41 = a10.i32[0];
  v42 = a10.i32[0];
  v38[0] = v22;
  v38[1] = v21;
  physx::Gu::PolygonalBox::PolygonalBox((uint64_t)v26, a1 + 4, *(double *)&v21, a10);
  v29 = 0;
  v31 = 0x600000008;
  v30 = 0;
  v32 = 0;
  v33 = &v28;
  v34 = &v27;
  v35 = &physx::Gu::gPCMBoxPolygonData;
  v36 = 0u;
  v37 = 0u;
  v25[0] = xmmword_2260E5F10;
  v25[1] = xmmword_2260E5F20;
  v25[2] = xmmword_2260E5F40;
  v53[5] = v25;
  v53[6] = v25;
  v54 = 1;
  v53[4] = v38;
  v53[0] = &off_24ED90FE0;
  v55 = v39;
  return physx::Gu::PCMContactConvexHeightfield((uint64_t)&v29, (uint64_t)v53, (uint64_t)&v49, a2, a3, a4, a7, (uint64_t)v46, 1, v18, a8);
}

void physx::PCMCapsuleVsHeightfieldContactGenerationCallback::~PCMCapsuleVsHeightfieldContactGenerationCallback(physx::PCMCapsuleVsHeightfieldContactGenerationCallback *this)
{
  JUMPOUT(0x2276933B8);
}

uint64_t physx::Gu::PCMHeightfieldContactGenerationCallback<physx::PCMCapsuleVsHeightfieldContactGenerationCallback>::onEvent(uint64_t a1, unsigned int a2, unsigned int *a3)
{
  unsigned int v4;
  int v6;
  int v7;
  int v8;
  float v9;
  float v10;
  float v11;
  float v12;
  float v13;
  uint64_t v14;
  int v15;
  unsigned int v16;
  float v17;
  float v18;
  float v19;
  float *v20;
  float v21;
  float v22;
  int v23;
  int v24;
  unint64_t v26;
  unsigned int v27;
  int v28;
  int v29;
  unsigned int v30;
  unsigned int *v31;
  int v32;
  float v33;
  float v34;
  float v35;
  float v36;
  float v37;
  float v38;
  float v39;
  float v40;
  float v41;
  float v42;
  float v43;
  float v44;
  float v45;
  float v46;
  float v47;
  float v48;
  float v49;
  float v50;
  char v51[12];
  _DWORD v52[3];
  _DWORD v53[3];
  _BYTE v54[848];
  int v55;
  uint64_t v56;

  v56 = *MEMORY[0x24BDAC8D0];
  if (a2 + 15 >= 0x10)
  {
    v4 = a2;
    v6 = 0;
    v27 = (a2 + 15) >> 4;
    v26 = a1 + 32;
    do
    {
      v55 = 0;
      v29 = v6;
      v30 = v4;
      if (v4 >= 0x10)
        v7 = 16;
      else
        v7 = v4;
      v28 = v7;
      if (v7)
      {
        v32 = v7;
        do
        {
          v8 = *a3;
          physx::Gu::HeightFieldUtil::getTriangle(*(_QWORD *)(a1 + 8), *(float **)(a1 + 16), (uint64_t)&v42, (uint64_t)v53, (uint64_t)v52, *a3, 0, 0);
          v9 = (float)((float)(v46 - v43) * (float)(v50 - v44)) - (float)((float)(v47 - v44) * (float)(v49 - v43));
          v10 = (float)((float)(v47 - v44) * (float)(v48 - v42)) - (float)((float)(v45 - v42) * (float)(v50 - v44));
          v11 = (float)((float)(v45 - v42) * (float)(v49 - v43)) - (float)((float)(v46 - v43) * (float)(v48 - v42));
          v12 = sqrtf((float)((float)(v10 * v10) + (float)(v9 * v9)) + (float)(v11 * v11));
          v31 = a3 + 1;
          if (v12 > 0.0)
          {
            v13 = 1.0 / v12;
            v9 = v9 * v13;
            v10 = v10 * v13;
            v11 = v11 * v13;
          }
          v14 = 0;
          v15 = 0;
          --v32;
          do
          {
            v16 = v52[v14];
            if (v16 == -1)
            {
              if (*(_BYTE *)(a1 + 24))
                v24 = 8 << v14;
              else
                v24 = 1 << v14;
              v15 |= v24;
            }
            else
            {
              physx::Gu::HeightFieldUtil::getTriangle(*(_QWORD *)(a1 + 8), *(float **)(a1 + 16), (uint64_t)&v33, (uint64_t)v51, 0, v16, 0, 0);
              v17 = (float)((float)(v37 - v34) * (float)(v41 - v35)) - (float)((float)(v38 - v35) * (float)(v40 - v34));
              v18 = (float)((float)(v38 - v35) * (float)(v39 - v33)) - (float)((float)(v36 - v33) * (float)(v41 - v35));
              v19 = (float)((float)(v36 - v33) * (float)(v40 - v34)) - (float)((float)(v37 - v34) * (float)(v39 - v33));
              v20 = &v42 + 3 * byte_2261AA610[v14];
              if ((float)((float)((float)(v18 * (float)(v20[1] - v34)) + (float)(v17 * (float)(*v20 - v33)))
                         + (float)(v19 * (float)(v20[2] - v35))) < 0.0)
              {
                v21 = sqrtf((float)((float)(v18 * v18) + (float)(v17 * v17)) + (float)(v19 * v19));
                if (v21 > 0.0)
                {
                  v22 = 1.0 / v21;
                  v17 = v17 * v22;
                  v18 = v18 * v22;
                  v19 = v19 * v22;
                }
                v23 = 8 << v14;
                if ((float)((float)((float)(v10 * v18) + (float)(v17 * v9)) + (float)(v19 * v11)) >= 0.997)
                  v23 = 0;
                v15 |= v23;
              }
            }
            ++v14;
          }
          while (v14 != 3);
          physx::Gu::TriangleCache<16u>::addTriangle((uint64_t)v54, (uint64_t)&v42, v53, v8, v15);
          a3 = v31;
        }
        while (v32);
      }
      v4 = v30 - v28;
      physx::Gu::PCMMeshContactGeneration::processTriangleCache<16u,physx::Gu::PCMCapsuleVsMeshContactGeneration>(v26, (uint64_t)v54);
      v6 = v29 + 1;
    }
    while (v29 + 1 != v27);
  }
  return 1;
}

int32x2_t physx::Gu::PCMMeshContactGeneration::PCMMeshContactGeneration(unint64_t a1, _QWORD *a2, float32x2_t *a3, float32x4_t *a4, float32x4_t *a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  int32x2_t v10;
  _QWORD *v11;
  __int128 v12;
  float32x4_t v13;
  float32x4_t v14;
  float32x4_t v15;
  float32x2_t v16;
  float32x4_t v17;
  float32x2_t v18;
  float32x2_t v19;
  int8x8_t v20;
  float32x4_t v21;
  float32x4_t v22;
  float32x4_t v23;
  float32x4_t v24;
  float32x4_t v25;
  float32x4_t v26;
  float32x4_t v27;
  float32x4_t v28;
  float32x4_t v29;
  float32x2_t v30;
  float32x2_t v32;
  float32x2_t v33;
  float32x2_t v34;
  float32x2_t v35;
  int64x2_t v40;
  uint64_t i;
  int32x2_t result;

  v9 = 0;
  v10 = vdup_n_s32(0x7F7FFFFFu);
  do
  {
    v11 = (_QWORD *)(a1 + v9);
    v11[2] = 0;
    v11[3] = 0;
    v11[4] = v11;
    v11[5] = v10;
    v9 += 64;
  }
  while (v9 != 2048);
  *(_QWORD *)(a1 + 2304) = *a2;
  *(float32x2_t *)(a1 + 2312) = *a3;
  *(_QWORD *)(a1 + 2320) = a4;
  *(_QWORD *)(a1 + 2328) = a5;
  *(_QWORD *)(a1 + 2336) = a6;
  *(_QWORD *)(a1 + 2344) = a7;
  *(_QWORD *)(a1 + 2424) = 0;
  *(_QWORD *)(a1 + 2416) = 0;
  *(_OWORD *)(a1 + 2368) = xmmword_2260E5F10;
  *(_OWORD *)(a1 + 2384) = xmmword_2260E5F20;
  *(_OWORD *)(a1 + 2400) = xmmword_2260E5F40;
  *(_DWORD *)(a1 + 3732) = 0;
  *(_QWORD *)&v12 = -1;
  *((_QWORD *)&v12 + 1) = -1;
  *(_OWORD *)(a1 + 3604) = v12;
  *(_OWORD *)(a1 + 3620) = v12;
  *(_OWORD *)(a1 + 3636) = v12;
  *(_OWORD *)(a1 + 3652) = v12;
  *(_OWORD *)(a1 + 3668) = v12;
  *(_OWORD *)(a1 + 3684) = v12;
  *(_OWORD *)(a1 + 3700) = v12;
  *(_OWORD *)(a1 + 3716) = v12;
  *(_QWORD *)(a1 + 3736) = a8;
  *(_QWORD *)(a1 + 3744) = a9;
  *(_QWORD *)(a1 + 2440) = 0;
  *(_DWORD *)(a1 + 2448) = 0;
  v13 = vnegq_f32(*a4);
  v14 = vsubq_f32(a5[1], a4[1]);
  v15 = v13;
  v15.i32[3] = 0;
  v16 = (float32x2_t)vdupq_laneq_s32(*(int32x4_t *)a4, 3).u64[0];
  v17 = vmulq_n_f32(v14, vmla_f32((float32x2_t)0xBF000000BF000000, v16, v16).f32[0]);
  v17.i32[3] = 0;
  v18 = (float32x2_t)vextq_s8((int8x16_t)v15, (int8x16_t)v15, 8uLL).u64[0];
  v19 = (float32x2_t)vext_s8(*(int8x8_t *)v13.f32, (int8x8_t)v18, 4uLL);
  v20 = (int8x8_t)vmls_f32(vmul_f32(*(float32x2_t *)v13.f32, (float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v14, (int8x16_t)v14, 4uLL)), v19, *(float32x2_t *)v14.f32);
  *(int8x8_t *)v21.f32 = vext_s8(v20, (int8x8_t)vmls_f32(vmul_f32(v18, *(float32x2_t *)v14.f32), *(float32x2_t *)v13.f32, (float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v14, (int8x16_t)v14, 8uLL)), 4uLL);
  v21.i64[1] = v20.u32[0];
  v22 = vmlaq_laneq_f32(v17, v21, *a4, 3);
  v22.i64[1] = vextq_s8((int8x16_t)v22, (int8x16_t)v22, 8uLL).u32[0];
  v23 = vmulq_f32(v15, v14);
  v23.i64[0] = vpaddq_f32(v23, v23).u64[0];
  v24 = vmlaq_n_f32(v22, v15, vpadd_f32(*(float32x2_t *)v23.f32, *(float32x2_t *)v23.f32).f32[0]);
  v25 = vaddq_f32(v24, v24);
  v25.i32[3] = 0;
  v26 = *a5;
  v26.i32[3] = 0;
  v27 = vmulq_f32(v15, v26);
  v27.i64[0] = vpaddq_f32(v27, v27).u64[0];
  *(float32x2_t *)v21.f32 = vsub_f32(vmul_f32((float32x2_t)*(_OWORD *)&vextq_s8(*(int8x16_t *)a4, *(int8x16_t *)a4, 8uLL), (float32x2_t)*(_OWORD *)&vextq_s8(*(int8x16_t *)a5, *(int8x16_t *)a5, 8uLL)), vpadd_f32(*(float32x2_t *)v27.f32, *(float32x2_t *)v27.f32));
  v28 = vmulq_laneq_f32(v26, *a4, 3);
  v26.i64[0] = vextq_s8((int8x16_t)v26, (int8x16_t)v26, 8uLL).u64[0];
  *(float32x2_t *)v27.f32 = vmls_f32(vmul_f32(*(float32x2_t *)v13.f32, (float32x2_t)vext_s8(*(int8x8_t *)a5->f32, *(int8x8_t *)v26.f32, 4uLL)), v19, *(float32x2_t *)a5->f32);
  *(int8x8_t *)v13.f32 = vext_s8(*(int8x8_t *)v27.f32, (int8x8_t)vmls_f32(vmul_f32(v18, *(float32x2_t *)a5->f32), *(float32x2_t *)v13.f32, *(float32x2_t *)v26.f32), 4uLL);
  v13.i64[1] = v27.i64[0];
  v29 = vaddq_f32(vaddq_f32(vmulq_laneq_f32(v15, *a5, 3), v28), v13);
  *(int32x2_t *)v28.f32 = vdup_lane_s32(*(int32x2_t *)v29.f32, 1);
  *(int32x2_t *)v15.f32 = vdup_laneq_s32((int32x4_t)v29, 2);
  v30 = (float32x2_t)vdup_lane_s32(*(int32x2_t *)v21.f32, 1);
  _Q5 = vaddq_f32(v29, v29);
  *(int32x2_t *)v29.f32 = vdup_lane_s32((int32x2_t)vmul_f32(*(float32x2_t *)v29.f32, *(float32x2_t *)_Q5.f32), 0);
  v32 = vmul_lane_f32(*(float32x2_t *)v28.f32, *(float32x2_t *)_Q5.f32, 1);
  *(float32x2_t *)v21.f32 = vmul_laneq_f32(*(float32x2_t *)v15.f32, _Q5, 2);
  *(float32x2_t *)v28.f32 = vmul_n_f32(*(float32x2_t *)v28.f32, _Q5.f32[0]);
  *(float32x2_t *)v27.f32 = vmul_n_f32(*(float32x2_t *)v15.f32, _Q5.f32[0]);
  v33 = vmul_n_f32(v30, _Q5.f32[0]);
  *(float32x2_t *)v15.f32 = vmul_lane_f32(*(float32x2_t *)v15.f32, *(float32x2_t *)_Q5.f32, 1);
  v34 = vmul_lane_f32(v30, *(float32x2_t *)_Q5.f32, 1);
  v35 = vmul_laneq_f32(v30, _Q5, 2);
  __asm { FMOV            V5.2S, #1.0 }
  *(float32x2_t *)v29.f32 = vsub_f32(*(float32x2_t *)_Q5.f32, *(float32x2_t *)v29.f32);
  *(int8x8_t *)_Q5.f32 = vext_s8((int8x8_t)vsub_f32(vsub_f32(*(float32x2_t *)_Q5.f32, v32), *(float32x2_t *)v21.f32), (int8x8_t)vadd_f32(*(float32x2_t *)v28.f32, v35), 4uLL);
  _Q5.i64[1] = vsub_f32(*(float32x2_t *)v27.f32, v34).u32[0];
  *(int8x8_t *)v28.f32 = vext_s8((int8x8_t)vsub_f32(*(float32x2_t *)v28.f32, v35), (int8x8_t)vsub_f32(*(float32x2_t *)v29.f32, *(float32x2_t *)v21.f32), 4uLL);
  v28.i64[1] = vadd_f32(*(float32x2_t *)v15.f32, v33).u32[0];
  *(int8x8_t *)v15.f32 = vext_s8((int8x8_t)vadd_f32(*(float32x2_t *)v27.f32, v34), (int8x8_t)vsub_f32(*(float32x2_t *)v15.f32, v33), 4uLL);
  v15.i64[1] = vsub_f32(*(float32x2_t *)v29.f32, v32).u32[0];
  *(float32x4_t *)(a1 + 2368) = _Q5;
  *(float32x4_t *)(a1 + 2384) = v28;
  *(float32x4_t *)(a1 + 2400) = v15;
  *(float32x4_t *)(a1 + 2416) = v25;
  v40 = (int64x2_t)xmmword_2260E7EE0;
  for (i = 2048; i != 2304; i += 16)
  {
    *(int64x2_t *)(a1 + i) = vaddq_s64(vdupq_n_s64(a1), vshlq_n_s64(v40, 6uLL));
    v40 = vaddq_s64(v40, vdupq_n_s64(2uLL));
  }
  *(_QWORD *)(a1 + 2432) = a7;
  *(float32x2_t *)(a1 + 2360) = vmul_f32(*a3, *a3);
  result = vdup_n_s32(0x3F7EF9DBu);
  *(int32x2_t *)(a1 + 2352) = result;
  return result;
}

float physx::Gu::TriangleCache<16u>::addTriangle(uint64_t a1, uint64_t a2, _DWORD *a3, int a4, char a5)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  float result;

  v5 = *(unsigned int *)(a1 + 848);
  *(_DWORD *)(a1 + 848) = v5 + 1;
  v6 = a1 + 12 * (3 * v5);
  *(_QWORD *)v6 = *(_QWORD *)a2;
  *(_DWORD *)(v6 + 8) = *(_DWORD *)(a2 + 8);
  LODWORD(v6) = 3 * v5 + 1;
  v7 = a1 + 12 * v6;
  *(_QWORD *)v7 = *(_QWORD *)(a2 + 12);
  *(_DWORD *)(v7 + 8) = *(_DWORD *)(a2 + 20);
  LODWORD(v7) = 3 * v5 + 2;
  v8 = a1 + 12 * v7;
  *(_QWORD *)v8 = *(_QWORD *)(a2 + 24);
  result = *(float *)(a2 + 32);
  *(float *)(v8 + 8) = result;
  *(_DWORD *)(a1 + 576 + 4 * (3 * v5)) = *a3;
  *(_DWORD *)(a1 + 576 + 4 * v6) = a3[1];
  *(_DWORD *)(a1 + 576 + 4 * v7) = a3[2];
  *(_DWORD *)(a1 + 4 * v5 + 768) = a4;
  *(_BYTE *)(a1 + v5 + 832) = a5;
  return result;
}

void physx::Gu::PCMMeshContactGeneration::processTriangleCache<16u,physx::Gu::PCMCapsuleVsMeshContactGeneration>(unint64_t a1, uint64_t a2)
{
  int v2;
  uint64_t v3;
  char *v5;
  int *v6;
  _DWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  unint64_t v14;
  int32x2_t v15;
  int v16;
  float32x4_t v17;
  float32x4_t v18;
  float32x4_t v19;
  char v20;
  int8x16_t v21;
  int8x16_t v22;
  int8x8_t v23;
  float32x4_t v24;
  float32x2_t v25;
  float32x2_t v26;
  int v27;
  float32x2_t v28;
  float32x2_t v29;
  int v30;
  float32x4_t v31;
  float32x4_t v32;
  float32x4_t *v33;
  float32x4_t v34;
  float32x4_t *v35;
  float32x4_t v36;
  float v37;
  float32x4_t v38;
  float32x4_t v39;
  float32x4_t v40;
  float32x4_t v41;
  int8x16_t v42;
  float32x4_t v43;
  float32x4_t v44;
  int8x16_t v45;
  float32x4_t v46;
  float32x2_t v47;
  float32x2_t v48;
  int v49;
  float32x2_t v50;
  float32x2_t v51;
  int v52;
  uint64_t v53;
  uint64_t v54;
  unint64_t v55;
  float32x2_t v56;
  unint64_t v57;
  unint64_t v58;
  int32x4_t *v59;
  float32x4_t v60;
  float32x4_t v61;
  float32x2_t v62;
  float32x4_t v63;
  unint64_t v64;
  unint64_t v65;
  float32x4_t v66;
  unsigned int v67;
  uint64_t v68;
  uint64_t v69;
  float32x4_t v70;
  float32x4_t v71;
  __int128 *v72;
  __int128 v73;
  __int128 v74;
  __int128 v75;
  uint64_t v76;
  uint64_t v77;
  float32x4_t v78;
  unint64_t v79;
  float32x2_t *v80;
  _DWORD *v81;
  unint64_t v82;
  unint64_t i;
  unsigned int v84;
  uint64_t v85;
  float32x4_t *v86;
  float32x4_t *v87;
  float32x4_t v88;
  float32x4_t v89;
  __int128 *v90;
  uint64_t v91;
  __int128 v92;
  __int128 v93;
  __int128 v94;
  __int128 *v95;
  uint64_t v96;
  __int128 v97;
  __int128 v98;
  __int128 v99;
  uint64_t v100;
  int v101;
  unsigned int v102;
  uint64_t j;
  unint64_t v104;
  uint64_t v105;
  uint64_t v106;
  unint64_t v107;
  int v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t k;
  float32x4_t *v113;
  int v114;
  uint64_t v115;
  uint64_t v116;
  float32x4_t *v117;
  float32x4_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v123;
  unint64_t v124;
  unint64_t v125;
  unsigned int v126;
  unsigned int v127;
  uint64_t v128;
  float32x4_t v129;
  float32x4_t v130;
  __int128 *v131;
  __int128 v132;
  __int128 v133;
  __int128 v134;
  unsigned int v135;
  int64x2_t v136;
  uint64_t m;
  unint64_t v138;
  uint64_t *v139;
  float32x2_t *v140;
  float32x2_t v141;
  float32x2_t v142;
  float v143;
  float32x4_t v144;
  float32x4_t v145;
  unint64_t v146;
  float32x4_t v147;
  int *v148;
  char *v149;
  float32x4_t v150;
  float32x4_t v151;
  float32x4_t v152;
  float32x4_t v153;
  double v154;
  double v155;
  uint64_t v156;
  float32x4_t v157;
  float32x4_t v158[2];

  v2 = *(_DWORD *)(a2 + 848);
  if (v2)
  {
    v3 = a2;
    v5 = (char *)(a2 + 832);
    v6 = (int *)(a2 + 768);
    v7 = (_DWORD *)(a1 + 2440);
    v8 = (_QWORD *)(a1 + 2360);
    v9 = (_QWORD *)(a1 + 2352);
    v139 = (uint64_t *)(a1 + 2048);
    v140 = (float32x2_t *)(a1 + 3752);
    __asm { FMOV            V8.2S, #1.0 }
    v138 = a1 + 2056;
    v14 = a1 + 2040;
    v15 = vdup_n_s32(0x7F7FFFFFu);
    do
    {
      v16 = *v6;
      v17.i64[0] = *(_QWORD *)v3;
      v17.i64[1] = *(unsigned int *)(v3 + 8);
      v18.i64[0] = *(_QWORD *)(v3 + 12);
      v18.i64[1] = *(unsigned int *)(v3 + 20);
      v19.i64[0] = *(_QWORD *)(v3 + 24);
      v19.i64[1] = *(unsigned int *)(v3 + 32);
      v20 = *v5;
      v21 = (int8x16_t)vsubq_f32(v18, v17);
      v22 = (int8x16_t)vsubq_f32(v19, v17);
      v23 = (int8x8_t)vmls_f32(vmul_f32(*(float32x2_t *)v21.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v22, v22, 4uLL)), (float32x2_t)*(_OWORD *)&vextq_s8(v21, v21, 4uLL), *(float32x2_t *)v22.i8);
      *(int8x8_t *)v24.f32 = vext_s8(v23, (int8x8_t)vmls_f32(vmul_f32((float32x2_t)*(_OWORD *)&vextq_s8(v21, v21, 8uLL), *(float32x2_t *)v22.i8), *(float32x2_t *)v21.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v22, v22, 8uLL)), 4uLL);
      v24.i64[1] = v23.u32[0];
      v158[0] = v17;
      *(float32x2_t *)v22.i8 = vpadd_f32(vmul_f32(*(float32x2_t *)v24.f32, *(float32x2_t *)v24.f32), vmul_f32((float32x2_t)v23.u32[0], (float32x2_t)v23.u32[0]));
      v25 = vpadd_f32(*(float32x2_t *)v22.i8, *(float32x2_t *)v22.i8);
      v26 = vrsqrte_f32(v25);
      v27 = 4;
      do
      {
        v26 = vmul_f32(v26, vrsqrts_f32(vmul_f32(v26, v26), v25));
        --v27;
      }
      while (v27);
      v28 = vmul_f32(v25, (float32x2_t)vbsl_s8((int8x8_t)vdup_lane_s32(vceqz_f32(v25), 0), (int8x8_t)_D8, (int8x8_t)v26));
      v29 = vrecpe_f32(v28);
      v30 = 4;
      do
      {
        v29 = vmul_f32(v29, vrecps_f32(v28, v29));
        --v30;
      }
      while (v30);
      v31 = vmulq_n_f32(v24, v29.f32[0]);
      v31.i32[3] = 0;
      v157 = v31;
      v32 = vmulq_f32(v17, v31);
      v32.i64[0] = vpaddq_f32(v32, v32).u64[0];
      v33 = *(float32x4_t **)(a1 + 3768);
      v34 = vmulq_f32(v31, *v33);
      v34.i64[0] = vpaddq_f32(v34, v34).u64[0];
      if (vsub_f32(vpadd_f32(*(float32x2_t *)v34.f32, *(float32x2_t *)v34.f32), vpadd_f32(*(float32x2_t *)v32.f32, *(float32x2_t *)v32.f32)).f32[0] >= 0.0)
      {
        v148 = v6;
        v149 = v5;
        v155 = 0.0;
        v156 = 0;
        v154 = 0.0;
        v36 = v33[4];
        v35 = v33 + 4;
        v145 = v35[-1];
        v147 = v31;
        v144 = v36;
        v150 = v17;
        v151 = v18;
        v152 = v19;
        physx::Gu::pcmDistanceSegmentTriangleSquared(&v156, &v155, &v154, v145, v36, v17, v18, v19);
        if (COERCE_FLOAT(*(_QWORD *)(a1 + 3760)) > v37)
        {
          v143 = v37;
          v141 = *(float32x2_t *)&v154;
          v142 = *(float32x2_t *)&v155;
          if (physx::Gu::selectNormal(v20, v155, v154))
          {
            v38 = v145;
            v153 = v147;
            v39 = v151;
            v40 = v152;
          }
          else
          {
            v38 = v145;
            v41 = v147;
            v39 = v151;
            v40 = v152;
            if (v143 != 0.0)
            {
              v42 = (int8x16_t)vmlaq_n_f32(v145, vsubq_f32(v144, v145), *(float *)&v156);
              v43 = vmulq_n_f32(v152, v141.f32[0]);
              v43.i32[3] = 0;
              v44 = vmlaq_n_f32(v43, v151, v142.f32[0]);
              v44.i64[1] = vextq_s8((int8x16_t)v44, (int8x16_t)v44, 8uLL).u32[0];
              v45 = (int8x16_t)vmlaq_n_f32(v44, v150, vsub_f32(_D8, vadd_f32(v142, v141)).f32[0]);
              *(float32x2_t *)v46.f32 = vsub_f32(*(float32x2_t *)v42.i8, *(float32x2_t *)v45.i8);
              *(float32x2_t *)&v46.u32[2] = vsub_f32((float32x2_t)vextq_s8(v42, v42, 8uLL).u32[0], (float32x2_t)vextq_s8(v45, v45, 8uLL).u32[0]);
              *(float32x2_t *)v45.i8 = vpadd_f32(vmul_f32(*(float32x2_t *)v46.f32, *(float32x2_t *)v46.f32), vmul_f32(*(float32x2_t *)&v46.u32[2], *(float32x2_t *)&v46.u32[2]));
              v47 = vpadd_f32(*(float32x2_t *)v45.i8, *(float32x2_t *)v45.i8);
              v48 = vrsqrte_f32(v47);
              v49 = 4;
              do
              {
                v48 = vmul_f32(v48, vrsqrts_f32(vmul_f32(v48, v48), v47));
                --v49;
              }
              while (v49);
              v50 = vmul_f32(v47, (float32x2_t)vbsl_s8((int8x8_t)vdup_lane_s32(vceqz_f32(v47), 0), (int8x8_t)_D8, (int8x8_t)v48));
              v51 = vrecpe_f32(v50);
              v52 = 4;
              do
              {
                v51 = vmul_f32(v51, vrecps_f32(v50, v51));
                --v52;
              }
              while (v52);
              v41 = vmulq_n_f32(v46, v51.f32[0]);
              v41.i32[3] = 0;
              v147 = v41;
            }
            v153 = v41;
          }
          v146 = *(unsigned int *)(a1 + 2440);
          physx::Gu::PCMCapsuleVsMeshContactGeneration::generateContacts(v158, &v157, &v153, v16, v35, v140, *(_QWORD *)(a1 + 2432), v7, v39, v40, v38);
          v53 = *(_QWORD *)(a1 + 3768);
          v54 = *(_QWORD *)(a1 + 2432);
          physx::Gu::PCMCapsuleVsMeshContactGeneration::generateEE((int8x8_t *)&v153, v16, v54, v7, *(__n128 *)(v53 + 48), *(float32x4_t *)(v53 + 64), *(float32x2_t *)(a1 + 3760), v150, v151);
          physx::Gu::PCMCapsuleVsMeshContactGeneration::generateEE((int8x8_t *)&v153, v16, v54, v7, *(__n128 *)(v53 + 48), *(float32x4_t *)(v53 + 64), *(float32x2_t *)(a1 + 3760), v151, v152);
          physx::Gu::PCMCapsuleVsMeshContactGeneration::generateEE((int8x8_t *)&v153, v16, v54, v7, *(__n128 *)(v53 + 48), *(float32x4_t *)(v53 + 64), *(float32x2_t *)(a1 + 3760), v150, v152);
          LODWORD(v55) = *(_DWORD *)(a1 + 2440);
          if ((_DWORD)v55 != (_DWORD)v146)
          {
            v56 = (float32x2_t)v15;
            if (v146 < v55)
            {
              v56 = (float32x2_t)vdup_n_s32(0x7F7FFFFFu);
              v57 = v146 << 6;
              v58 = v146;
              do
              {
                v59 = (int32x4_t *)(*(_QWORD *)(a1 + 2432) + v57);
                v60 = vmulq_n_f32(*(float32x4_t *)(a1 + 2368), COERCE_FLOAT(*v59));
                v60.i32[3] = 0;
                v61 = vmulq_lane_f32(*(float32x4_t *)(a1 + 2384), *(float32x2_t *)v59->i8, 1);
                v61.i32[3] = 0;
                v62 = (float32x2_t)vdup_laneq_s32(v59[2], 3);
                v63 = vmulq_laneq_f32(*(float32x4_t *)(a1 + 2400), *(float32x4_t *)v59, 2);
                v63.i32[3] = 0;
                *(float32x4_t *)v59 = vaddq_f32(*(float32x4_t *)(a1 + 2416), vaddq_f32(vaddq_f32(v60, v61), v63));
                v56 = vmin_f32(v56, v62);
                ++v58;
                v55 = *(unsigned int *)(a1 + 2440);
                v57 += 64;
              }
              while (v58 < v55);
            }
            v64 = v146;
            if (v146 < v55)
            {
              do
              {
                v65 = v64++;
                if (v64 < v55)
                {
                  v66 = *(float32x4_t *)(*(_QWORD *)(a1 + 2432) + (v65 << 6) + 16);
                  v67 = v64;
                  do
                  {
                    v68 = *(_QWORD *)(a1 + 2432);
                    v69 = v68 + ((unint64_t)v67 << 6);
                    v70 = vsubq_f32(*(float32x4_t *)(v69 + 16), v66);
                    v71 = vmulq_f32(v70, v70);
                    v71.i64[0] = vpaddq_f32(v71, v71).u64[0];
                    if (COERCE_FLOAT(*(_QWORD *)(a1 + 2360)) > vpadd_f32(*(float32x2_t *)v71.f32, *(float32x2_t *)v71.f32).f32[0])
                    {
                      v72 = (__int128 *)(v68 + ((unint64_t)(v55 - 1) << 6));
                      v73 = *v72;
                      v74 = v72[1];
                      v75 = v72[2];
                      *(_DWORD *)(v69 + 48) = *((_DWORD *)v72 + 12);
                      *(_OWORD *)(v69 + 16) = v74;
                      *(_OWORD *)(v69 + 32) = v75;
                      *(_OWORD *)v69 = v73;
                      LODWORD(v55) = *v7 - 1;
                      *v7 = v55;
                      --v67;
                    }
                    ++v67;
                  }
                  while (v67 < v55);
                }
              }
              while (v64 < v55);
            }
            v76 = *(unsigned int *)(a1 + 2444);
            if ((_DWORD)v76
              && (v77 = (v76 - 1),
                  v78 = vmulq_f32(v147, *(float32x4_t *)(a1 + (v77 << 6))),
                  v78.i64[0] = vpaddq_f32(v78, v78).u64[0],
                  vpadd_f32(*(float32x2_t *)v78.f32, *(float32x2_t *)v78.f32).f32[0] > COERCE_FLOAT(*(_QWORD *)(a1 + 2352))))
            {
              v80 = (float32x2_t *)(a1 + (v77 << 6));
              v81 = (_DWORD *)&v80[6] + 1;
              v82 = v80[6].u32[1];
              for (i = v80[6].u32[0]; i < v82; ++i)
              {
                v84 = v146;
                if (v146 < v55)
                {
                  do
                  {
                    v85 = *(_QWORD *)(a1 + 2432);
                    v86 = (float32x4_t *)(v85 + ((unint64_t)v84 << 6));
                    v87 = (float32x4_t *)(v85 + (i << 6));
                    v88 = vsubq_f32(v86[1], v87[1]);
                    v89 = vmulq_f32(v88, v88);
                    v89.i64[0] = vpaddq_f32(v89, v89).u64[0];
                    if (COERCE_FLOAT(*(_QWORD *)(a1 + 2360)) > vpadd_f32(*(float32x2_t *)v89.f32, *(float32x2_t *)v89.f32).f32[0])
                    {
                      if (v87[2].f32[3] > v86[2].f32[3])
                      {
                        v90 = (__int128 *)(v85 + ((unint64_t)v84 << 6));
                        v91 = v85 + (i << 6);
                        v92 = *v90;
                        v93 = v90[1];
                        v94 = v90[2];
                        *(_DWORD *)(v91 + 48) = *((_DWORD *)v90 + 12);
                        *(_OWORD *)(v91 + 16) = v93;
                        *(_OWORD *)(v91 + 32) = v94;
                        *(_OWORD *)v91 = v92;
                        v85 = *(_QWORD *)(a1 + 2432);
                        LODWORD(v55) = *(_DWORD *)(a1 + 2440);
                      }
                      v95 = (__int128 *)(v85 + ((unint64_t)(v55 - 1) << 6));
                      v96 = v85 + ((unint64_t)v84 << 6);
                      v97 = *v95;
                      v98 = v95[1];
                      v99 = v95[2];
                      *(_DWORD *)(v96 + 48) = *((_DWORD *)v95 + 12);
                      *(_OWORD *)(v96 + 16) = v98;
                      *(_OWORD *)(v96 + 32) = v99;
                      *(_OWORD *)v96 = v97;
                      LODWORD(v55) = *v7 - 1;
                      *v7 = v55;
                      --v84;
                    }
                    ++v84;
                  }
                  while (v84 < v55);
                  v82 = *v81;
                }
              }
              *v81 = v55;
              v80[5] = vmin_f32(v80[5], v56);
            }
            else
            {
              v79 = a1 + (v76 << 6);
              *(_DWORD *)(v79 + 48) = v146;
              *(_DWORD *)(v79 + 52) = v55;
              *(float32x2_t *)(v79 + 40) = v56;
              *(_DWORD *)(a1 + 2444) = v76 + 1;
              *(float32x4_t *)v79 = v147;
              LODWORD(v55) = *(_DWORD *)(a1 + 2440);
            }
            if (v55 >= 0x10)
            {
              v100 = *(unsigned int *)(a1 + 2444);
              if (v100 >= 2)
              {
                v101 = 0;
                v102 = -1;
                for (j = 1; j != v100; ++j)
                {
                  v104 = a1 + 8 * j;
                  v105 = *(_QWORD *)(v104 + 2040);
                  v106 = *(_QWORD *)(v104 + 2048);
                  if (COERCE_FLOAT(*(_QWORD *)(v105 + 40)) > COERCE_FLOAT(*(_QWORD *)(v106 + 40)))
                  {
                    *(_QWORD *)(v104 + 2040) = v106;
                    *(_QWORD *)(v104 + 2048) = v105;
                    if ((int)j - 2 >= 0)
                    {
                      v107 = v138 + 8 * v102;
                      v108 = v101;
                      do
                      {
                        v110 = *(_QWORD *)(v107 - 8);
                        v109 = *(_QWORD *)v107;
                        if (COERCE_FLOAT(*(_QWORD *)(*(_QWORD *)v107 + 40)) >= COERCE_FLOAT(*(_QWORD *)(v110 + 40)))
                          break;
                        *(_QWORD *)v107 = v110;
                        *(_QWORD *)(v107 - 8) = v109;
                        v107 -= 8;
                        --v108;
                      }
                      while (v108 > 0);
                    }
                  }
                  ++v102;
                  ++v101;
                }
              }
              if ((_DWORD)v100)
              {
                v111 = 0;
                for (k = 0; k != v100; ++k)
                {
                  v113 = (float32x4_t *)v139[k];
                  v113[1].i64[1] = (uint64_t)v113;
                  v113[2].i64[0] = (uint64_t)v113;
                  v114 = v113[3].i32[1] - v113[3].i32[0];
                  v113[3].i32[2] = v114;
                  v113[1].i64[0] = 0;
                  v115 = v111;
                  while (v115)
                  {
                    v116 = *(_QWORD *)(v14 + v115);
                    v117 = *(float32x4_t **)(v116 + 32);
                    v118 = vmulq_f32(*v113, *v117);
                    v118.i64[0] = vpaddq_f32(v118, v118).u64[0];
                    v115 -= 8;
                    if (vpadd_f32(*(float32x2_t *)v118.f32, *(float32x2_t *)v118.f32).f32[0] >= COERCE_FLOAT(*v9))
                    {
                      *(_QWORD *)(v116 + 16) = v113;
                      v117[1].i64[1] = (uint64_t)v113;
                      v113[2].i64[0] = (uint64_t)v117;
                      *(_DWORD *)(*(_QWORD *)(v116 + 32) + 56) += v114;
                      break;
                    }
                  }
                  v111 += 8;
                }
                v119 = 0;
                v120 = *(_QWORD *)(a1 + 2432);
                do
                {
                  v121 = v139[v119];
                  if (v121)
                    _ZF = *(_QWORD *)(v121 + 32) == v121;
                  else
                    _ZF = 0;
                  if (_ZF)
                  {
                    while (*(_QWORD *)(v121 + 16))
                    {
                      v123 = v121;
                      v121 = *(_QWORD *)(v121 + 16);
                      v124 = *(unsigned int *)(v123 + 48);
                      v125 = *(unsigned int *)(v123 + 52);
                      if (v124 < v125)
                      {
                        v126 = *(_DWORD *)(v121 + 52);
                        do
                        {
                          v127 = *(_DWORD *)(v121 + 48);
                          if (v127 < v126)
                          {
                            do
                            {
                              v128 = v120 + ((unint64_t)v127 << 6);
                              v129 = vsubq_f32(*(float32x4_t *)(v128 + 16), *(float32x4_t *)(v120 + (v124 << 6) + 16));
                              v130 = vmulq_f32(v129, v129);
                              v130.i64[0] = vpaddq_f32(v130, v130).u64[0];
                              if (COERCE_FLOAT(*v8) > vpadd_f32(*(float32x2_t *)v130.f32, *(float32x2_t *)v130.f32).f32[0])
                              {
                                v131 = (__int128 *)(v120 + ((unint64_t)(v126 - 1) << 6));
                                v132 = *v131;
                                v133 = v131[1];
                                v134 = v131[2];
                                *(_DWORD *)(v128 + 48) = *((_DWORD *)v131 + 12);
                                *(_OWORD *)(v128 + 16) = v133;
                                *(_OWORD *)(v128 + 32) = v134;
                                *(_OWORD *)v128 = v132;
                                v126 = *(_DWORD *)(v121 + 52) - 1;
                                *(_DWORD *)(v121 + 52) = v126;
                                --v127;
                              }
                              ++v127;
                            }
                            while (v127 < v126);
                            v125 = *(unsigned int *)(v123 + 52);
                          }
                          ++v124;
                        }
                        while (v124 < v125);
                      }
                    }
                  }
                  ++v119;
                }
                while (v119 != v100);
                LODWORD(v55) = *(_DWORD *)(a1 + 2440);
                v135 = *(_DWORD *)(a1 + 2444);
              }
              else
              {
                v135 = 0;
              }
              physx::Gu::MultiplePersistentContactManifold::addManifoldContactPoints(*(_QWORD *)(a1 + 2336), *(_QWORD *)(a1 + 2432), v55, v139, v135, (uint64_t)v8, v9, 3);
              *(_QWORD *)(a1 + 2440) = 0;
              v136 = (int64x2_t)xmmword_2260E7EE0;
              for (m = 2048; m != 2304; m += 16)
              {
                *(int64x2_t *)(a1 + m) = vaddq_s64(vdupq_n_s64(a1), vshlq_n_s64(v136, 6uLL));
                v136 = vaddq_s64(v136, vdupq_n_s64(2uLL));
              }
            }
          }
        }
        v6 = v148;
        v5 = v149;
      }
      v3 += 36;
      ++v6;
      ++v5;
      --v2;
    }
    while (v2);
  }
}

uint64_t physx::Gu::PCMMeshContactGenerationCallback<physx::PCMCapsuleVsMeshContactGenerationCallback>::processHit(uint64_t a1, uint64_t a2, float32x2_t *a3, float *a4, float *a5, uint64_t a6, _DWORD *a7)
{
  float v9;
  __int128 v10;
  float v11;
  uint64_t v12;
  uint64_t v13;
  float v14;
  float v15;
  float v16;
  float v17;
  float v18;
  float v19;
  float v20;
  float v21;
  float v22;
  BOOL v23;
  uint64_t v24;
  float32x2_t *v25;
  float v26;
  float v27;
  float v28;
  float v29;
  float32x2_t v30;
  float32x2_t v31;
  float32x2_t v32;
  uint64_t v33;
  uint64_t v34;
  char v35;
  float32x2_t v37;
  float v38;
  float v39;
  __int128 v40;
  uint64_t v41;

  v41 = *MEMORY[0x24BDAC8D0];
  if (*(_BYTE *)(a1 + 32))
  {
    v37 = *a3;
    v9 = a3[1].f32[0];
    v39 = *a4;
    *(_QWORD *)&v10 = *(_QWORD *)(a4 + 1);
    *((_QWORD *)&v10 + 1) = *(_QWORD *)a5;
    v40 = v10;
    v11 = a5[2];
    v12 = 2;
  }
  else
  {
    v13 = *(_QWORD *)(a1 + 16);
    v14 = *(float *)(v13 + 8);
    v15 = a3->f32[0];
    v16 = a3->f32[1];
    v17 = *(float *)(v13 + 20);
    v18 = a3[1].f32[0];
    v19 = *(float *)(v13 + 32);
    v9 = (float)((float)(a3->f32[0] * v14) + (float)(v16 * v17)) + (float)(v18 * v19);
    v20 = *a4;
    v21 = a4[1];
    v22 = a4[2];
    v23 = *(_BYTE *)(v13 + 72) == 0;
    v24 = 24;
    if (!*(_BYTE *)(v13 + 72))
      v24 = 12;
    v25 = (float32x2_t *)((char *)&v37 + v24);
    *(float *)((char *)&v37 + v24 + 8) = (float)((float)(v14 * *a4) + (float)(v17 * v21)) + (float)(v19 * v22);
    v26 = *a5;
    v27 = a5[1];
    v28 = (float)(v14 * *a5) + (float)(v17 * v27);
    v29 = a5[2];
    v11 = v28 + (float)(v19 * v29);
    v12 = 1;
    if (v23)
      v12 = 2;
    v30 = *(float32x2_t *)v13;
    v31 = *(float32x2_t *)(v13 + 12);
    v32 = *(float32x2_t *)(v13 + 24);
    v37 = vadd_f32(vadd_f32(vmul_n_f32(*(float32x2_t *)v13, v15), vmul_n_f32(v31, v16)), vmul_n_f32(v32, v18));
    *v25 = vadd_f32(vadd_f32(vmul_n_f32(v30, v20), vmul_n_f32(v31, v21)), vmul_n_f32(v32, v22));
    *(float32x2_t *)((char *)&v37 + 12 * v12) = vadd_f32(vadd_f32(vmul_n_f32(v30, v26), vmul_n_f32(v31, v27)), vmul_n_f32(v32, v29));
  }
  v38 = v9;
  *((float *)&v37 + 3 * v12 + 2) = v11;
  v33 = *(unsigned int *)(a2 + 16);
  v34 = *(_QWORD *)(a1 + 24);
  if (v34)
    v35 = *(_BYTE *)(v34 + v33);
  else
    v35 = 56;
  if (*(_DWORD *)(a1 + 884) == 16)
  {
    physx::Gu::PCMMeshContactGeneration::processTriangleCache<16u,physx::Gu::PCMCapsuleVsMeshContactGeneration>(a1 + 896, a1 + 36);
    *(_DWORD *)(a1 + 884) = 0;
  }
  physx::Gu::TriangleCache<16u>::addTriangle(a1 + 36, (uint64_t)&v37, a7, v33, v35);
  return 1;
}

void physx::PCMCapsuleVsMeshContactGenerationCallback::~PCMCapsuleVsMeshContactGenerationCallback(physx::PCMCapsuleVsMeshContactGenerationCallback *this)
{
  JUMPOUT(0x2276933B8);
}

uint64_t physx::Gu::gjkPenetration<physx::Gu::RelativeConvex<physx::Gu::ConvexHullNoScaleV>,physx::Gu::LocalConvex<physx::Gu::ConvexHullNoScaleV>>(float32x4_t *a1, uint64_t a2, _BYTE *a3, _BYTE *a4, _BYTE *a5, float32x4_t *a6, float32x4_t a7, float32x2_t a8, double a9, float32x4_t a10, int8x8_t a11)
{
  _BYTE *v11;
  uint64_t v15;
  const float *v16;
  float32x2_t v17;
  uint64_t v18;
  const float *v19;
  float32x2_t v20;
  float32x2_t v21;
  float32x2_t v22;
  float32x2_t v23;
  float32x2_t v24;
  uint64_t v25;
  uint64_t v31;
  float32x4_t *v32;
  uint64_t v33;
  uint64_t v34;
  unsigned int v35;
  unsigned int v36;
  float32x4_t v37;
  float32x4_t v38;
  float32x4_t v39;
  float32x4_t v40;
  float32x4_t v41;
  float32x4_t v42;
  float32x4_t v43;
  float32x4_t v44;
  float32x4_t v45;
  float32x4_t v46;
  float32x2_t v47;
  float32x4_t v48;
  float32x4_t v49;
  float32x2_t v50;
  int v51;
  float32x4_t v52;
  float32x4_t v53;
  float32x2_t v54;
  float32x2_t v55;
  int v56;
  float32x2_t v57;
  float32x2_t v58;
  int v59;
  float32x4_t v60;
  float32x2_t v61;
  int32x4_t v62;
  float32x4_t v63;
  float32x4_t v64;
  float32x4_t v65;
  int8x8_t v66;
  float32x2_t v67;
  float32x2_t v68;
  float32x2_t v69;
  float32x2_t v70;
  float32x2_t v71;
  float32x2_t v72;
  int8x8_t v73;
  float32x4_t v74;
  float32x2_t v75;
  float32x2_t v76;
  int8x8_t v77;
  float32x4_t v78;
  int8x8_t v79;
  float32x4_t v80;
  float32x4_t v81;
  float32x2_t v82;
  float32x4_t v83;
  float32x2_t v84;
  float32x4_t v85;
  float32x2_t v86;
  float32x4_t v87;
  float32x4_t v88;
  float32x4_t v89;
  float32x2_t v90;
  float32x4_t v91;
  float32x2_t v92;
  float32x4_t v93;
  float32x4_t v94;
  float32x2_t v95;
  float32x4_t v96;
  float32x2_t v97;
  float32x4_t v98;
  float32x2_t v99;
  float32x4_t v100;
  int32x4_t v101;
  __int32 v102;
  uint64_t v103;
  uint64_t v104;
  float32x4_t v105;
  float32x2_t v106;
  float32x4_t v107;
  float32x4_t v108;
  float32x2_t v109;
  float32x2_t v110;
  int v111;
  int8x16_t v112;
  float32x2_t v113;
  float32x2_t v114;
  int v115;
  float32x2_t v116;
  float32x2_t v117;
  float32x2_t v118;
  int v119;
  unsigned int v120;
  float32x2_t v121;
  float32x2_t v122;
  float32x2_t v123;
  int v124;
  int8x16_t v125;
  float32x2_t v126;
  float32x2_t v127;
  int v128;
  float32x4_t v129;
  float32x4_t v130;
  float32x4_t v131;
  float32x4_t v132;
  float32x4_t v133;
  int v134;
  int v135;
  int v136;
  int v137;
  float32x4_t v138;
  float32x2_t v139;
  float32x2_t v140;
  int v141;
  float32x2_t v142;
  int v143;
  float32x4_t v144;
  float32x2_t v145;
  int32x4_t v146;
  float32x2_t i;
  float32x4_t v148;
  int32x4_t v149;
  float32x4_t v150;
  float32x4_t v151;
  uint64_t v152;
  uint64_t v153;
  int v154;
  float32x4_t v155;
  float32x4_t v156;
  float32x2_t v157;
  float32x2_t v158;
  uint64_t v159;
  float32x4_t v160;
  float32x4_t v161;
  float32x2_t v162;
  float32x4_t v163;
  float32x4_t v164;
  float32x2_t v165;
  float32x2_t v166;
  int v167;
  float32x4_t v168;
  float32x4_t v169;
  float32x4_t v170;
  int8x8_t v171;
  float32x2_t v172;
  float32x2_t v173;
  float32x2_t v174;
  float32x2_t v175;
  float32x2_t v176;
  float32x2_t v177;
  int8x8_t v178;
  float32x4_t v179;
  float32x2_t v180;
  float32x2_t v181;
  int8x8_t v182;
  float32x4_t v183;
  int8x8_t v184;
  float32x4_t v185;
  float32x4_t v186;
  float32x2_t v187;
  float32x4_t v188;
  float32x2_t v189;
  float32x4_t v190;
  float32x2_t v191;
  float32x4_t v192;
  float32x4_t v193;
  float32x4_t v194;
  float32x2_t v195;
  float32x4_t v196;
  float32x2_t v197;
  float32x4_t v198;
  float32x4_t v199;
  float32x2_t v200;
  float32x4_t v201;
  float32x2_t v202;
  float32x4_t v203;
  float32x2_t v204;
  float32x4_t v205;
  float32x2_t v206;
  __int32 v207;
  uint64_t v208;
  uint64_t v209;
  float32x4_t v210;
  float32x2_t v211;
  float32x4_t v212;
  float32x4_t v213;
  float32x2_t v214;
  float32x2_t v215;
  int v216;
  int8x16_t v217;
  float32x2_t v218;
  float32x2_t v219;
  int v220;
  float32x2_t v221;
  float32x2_t v222;
  float32x2_t v223;
  int v224;
  unsigned int v225;
  float32x2_t v226;
  float32x2_t v227;
  float32x2_t v228;
  int v229;
  int8x16_t v230;
  float32x2_t v231;
  float32x2_t v232;
  int v233;
  float32x4_t v234;
  float32x4_t v235;
  float32x4_t v236;
  float32x4_t v237;
  float32x4_t v238;
  float32x4_t v239;
  int v240;
  int v241;
  int v242;
  int v243;
  float32x4_t v244;
  float32x2_t v245;
  float32x2_t v246;
  int v247;
  float32x2_t v248;
  int v249;
  float32x4_t v250;
  int8x8_t v251;
  uint64_t v252;
  int *v253;
  int *v254;
  int v255;
  int v256;
  uint64_t result;
  uint64_t v258;
  int *v259;
  int *v260;
  int v261;
  int v262;
  int *v263;
  int *v264;
  uint64_t v265;
  int v266;
  int v267;
  float32x4_t *v268;
  int8x16_t v269;
  int8x16_t v270;
  uint64_t v271;
  int *v272;
  int *v273;
  int v274;
  int v275;
  float32x4_t v276;
  float32x4_t v277;
  float32x4_t v278;
  float32x4_t v279;
  float32x4_t v280;
  float32x4_t v281;
  float32x4_t v282;
  float32x2_t v283;
  float32x2_t v284;
  int v285;
  float32x4_t v286;
  float32x4_t v287;
  float32x4_t v288;
  float32x4_t v289;
  float32x4_t v290;
  float32x4_t v291;
  float32x4_t v292;
  float32x4_t v293;
  float32x4_t v294;
  float32x4_t v295;
  float32x2_t v296;
  float32x2_t v297;
  int v298;
  float32x4_t v299;
  float32x4_t v300;
  float32x2_t v301;
  int v302;
  float32x4_t v303;
  int32x4_t v304;
  float32x4_t v308;
  float32x4_t v309;
  float32x4_t v310;
  float32x2_t v311;
  float32x4_t v312;
  float32x4_t v313;
  unsigned int v314;
  float32x4_t v315;
  float32x2_t v316;
  int v317;
  int v318;
  int v319;
  int v320;
  int8x16_t v321;
  float32x4_t v322;
  float32x4_t v323;
  int8x16_t v324;
  float32x4_t v325;
  float32x4_t v326;
  float32x4_t v327;
  float32x4_t v328;
  float32x4_t v329[2];
  uint64_t v330;

  v11 = a4;
  v330 = *MEMORY[0x24BDAC8D0];
  v15 = a1->i64[1];
  v16 = (const float *)(v15 + 20);
  v17 = vld1_dup_f32(v16);
  v18 = *(_QWORD *)(a2 + 8);
  v19 = (const float *)(v18 + 20);
  v20 = vld1_dup_f32(v19);
  v21 = vmin_f32(v17, v20);
  v22 = (float32x2_t)vdup_n_s32(0x3DCCCCCDu);
  v23 = vmul_f32(v21, v22);
  v21.i32[0] = *(_DWORD *)(v15 + 16);
  v22.i32[0] = *(_DWORD *)(v18 + 16);
  a10.i32[0] = -*(char *)(v15 + 32);
  a11.i32[0] = -*(char *)(v18 + 32);
  v24 = vadd_f32((float32x2_t)vand_s8(*(int8x8_t *)a10.f32, (int8x8_t)v21), (float32x2_t)vand_s8(a11, (int8x8_t)v22));
  v315 = 0uLL;
  v314 = 0;
  v25 = *a5;
  __asm { FMOV            V10.2S, #1.0 }
  if (!*a5)
  {
    v52 = vmulq_f32(a7, a7);
    v52.i64[0] = vpaddq_f32(v52, v52).u64[0];
    v44 = (float32x4_t)vbslq_s8((int8x16_t)vdupq_lane_s32(vcgtz_f32(vpadd_f32(*(float32x2_t *)v52.f32, *(float32x2_t *)v52.f32)), 0), (int8x16_t)a7, (int8x16_t)xmmword_2260E5F10);
    v315 = v44;
    v53 = vmulq_f32(v44, v44);
    v53.i64[0] = vpaddq_f32(v53, v53).u64[0];
    v54 = vpadd_f32(*(float32x2_t *)v53.f32, *(float32x2_t *)v53.f32);
    v55 = vrsqrte_f32(v54);
    v56 = 4;
    do
    {
      v55 = vmul_f32(v55, vrsqrts_f32(vmul_f32(v55, v55), v54));
      --v56;
    }
    while (v56);
    v57 = vmul_f32(v54, (float32x2_t)vbsl_s8((int8x8_t)vdup_lane_s32(vceqz_f32(v54), 0), (int8x8_t)_D10, (int8x8_t)v55));
    v58 = vrecpe_f32(v57);
    v59 = 4;
    do
    {
      *(float32x2_t *)a10.f32 = vrecps_f32(v57, v58);
      v58 = vmul_f32(v58, *(float32x2_t *)a10.f32);
      --v59;
    }
    while (v59);
    v60 = vmulq_n_f32(v44, v58.f32[0]);
    v60.i32[3] = 0;
    v310 = v60;
    v61 = (float32x2_t)vdup_n_s32(0x7F7FFFFFu);
    v62.i64[0] = -1;
    v62.i64[1] = -1;
    v63 = 0uLL;
    goto LABEL_54;
  }
  v31 = 0;
  v32 = (float32x4_t *)a1[1].i64[0];
  v33 = *(_QWORD *)(v15 + 160);
  v34 = *(_QWORD *)(v18 + 160);
  do
  {
    v35 = a3[v31];
    *(&v319 + v31) = v35;
    v36 = a4[v31];
    *(&v317 + v31) = v36;
    v37 = *(float32x4_t *)(v33 + 12 * v35);
    v38 = vmulq_n_f32(*v32, v37.f32[0]);
    v38.i32[3] = 0;
    v39 = vmulq_lane_f32(v32[1], *(float32x2_t *)v37.f32, 1);
    v39.i32[3] = 0;
    v40 = vmulq_laneq_f32(v32[2], v37, 2);
    v40.i32[3] = 0;
    a10 = v32[3];
    v41 = vaddq_f32(vaddq_f32(v38, v39), v40);
    v42 = *(float32x4_t *)(v34 + 12 * v36);
    v43 = vaddq_f32(a10, v41);
    v42.i32[3] = 0;
    v44 = vsubq_f32(v43, v42);
    *(&v324 + v31) = (int8x16_t)v43;
    *(&v321 + v31) = (int8x16_t)v42;
    *(&v327 + v31++) = v44;
  }
  while (v25 != v31);
  v314 = v25;
  switch((_DWORD)v31)
  {
    case 4:
      physx::Gu::closestPtPointTetrahedron(&v327, &v324, &v321, &v319, &v317, (int *)&v314);
      goto LABEL_49;
    case 3:
      v314 = 3;
      v44 = v327;
      a10 = vsubq_f32(v328, v327);
      v64 = vsubq_f32(v329[0], v327);
      v66 = (int8x8_t)vmls_f32(vmul_f32(*(float32x2_t *)a10.f32, (float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v64, (int8x16_t)v64, 4uLL)), (float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)a10, (int8x16_t)a10, 4uLL), *(float32x2_t *)v64.f32);
      *(int8x8_t *)v65.f32 = vext_s8(v66, (int8x8_t)vmls_f32(vmul_f32((float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)a10, (int8x16_t)a10, 8uLL), *(float32x2_t *)v64.f32), *(float32x2_t *)a10.f32, (float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v64, (int8x16_t)v64, 8uLL)), 4uLL);
      v66.i32[1] = 0;
      v67 = vpadd_f32(vmul_f32(*(float32x2_t *)v65.f32, *(float32x2_t *)v65.f32), vmul_f32((float32x2_t)v66.u32[0], (float32x2_t)v66.u32[0]));
      v68 = vpadd_f32(v67, v67);
      if (v68.f32[0] > 0.00000011921)
      {
        if (v68.f32[0] == 0.0)
        {
          v44 = 0uLL;
        }
        else
        {
          *(int8x8_t *)&v65.u32[2] = v66;
          v69 = (float32x2_t)vextq_s8((int8x16_t)v328, (int8x16_t)v328, 8uLL).u64[0];
          v70 = (float32x2_t)vextq_s8((int8x16_t)v329[0], (int8x16_t)v329[0], 8uLL).u64[0];
          v71 = (float32x2_t)vextq_s8((int8x16_t)v329[0], (int8x16_t)v329[0], 4uLL).u64[0];
          v72 = (float32x2_t)vextq_s8((int8x16_t)v328, (int8x16_t)v328, 4uLL).u64[0];
          v73 = (int8x8_t)vmls_f32(vmul_f32(*(float32x2_t *)v328.f32, v71), v72, *(float32x2_t *)v329[0].f32);
          *(int8x8_t *)v74.f32 = vext_s8(v73, (int8x8_t)vmls_f32(vmul_f32(v69, *(float32x2_t *)v329[0].f32), *(float32x2_t *)v328.f32, v70), 4uLL);
          v74.i64[1] = v73.u32[0];
          v75 = (float32x2_t)vextq_s8((int8x16_t)v327, (int8x16_t)v327, 8uLL).u64[0];
          v76 = (float32x2_t)vextq_s8((int8x16_t)v327, (int8x16_t)v327, 4uLL).u64[0];
          v77 = (int8x8_t)vmls_f32(vmul_f32(v76, *(float32x2_t *)v329[0].f32), v71, *(float32x2_t *)v327.f32);
          *(int8x8_t *)v78.f32 = vext_s8(v77, (int8x8_t)vmls_f32(vmul_f32(*(float32x2_t *)v327.f32, v70), *(float32x2_t *)v329[0].f32, v75), 4uLL);
          v78.i64[1] = v77.u32[0];
          v79 = (int8x8_t)vmls_f32(vmul_f32(*(float32x2_t *)v327.f32, v72), v76, *(float32x2_t *)v328.f32);
          *(int8x8_t *)v80.f32 = vext_s8(v79, (int8x8_t)vmls_f32(vmul_f32(v75, *(float32x2_t *)v328.f32), *(float32x2_t *)v327.f32, v69), 4uLL);
          v80.i64[1] = v79.u32[0];
          v81 = vmulq_f32(v74, v65);
          v81.i64[0] = vpaddq_f32(v81, v81).u64[0];
          v82 = vpadd_f32(*(float32x2_t *)v81.f32, *(float32x2_t *)v81.f32);
          v83 = vmulq_f32(v78, v65);
          v83.i64[0] = vpaddq_f32(v83, v83).u64[0];
          v84 = vpadd_f32(*(float32x2_t *)v83.f32, *(float32x2_t *)v83.f32);
          v85 = vmulq_f32(v80, v65);
          v85.i64[0] = vpaddq_f32(v85, v85).u64[0];
          v86 = vpadd_f32(*(float32x2_t *)v85.f32, *(float32x2_t *)v85.f32);
          if (vuzp1_s8((int8x8_t)vdup_lane_s16((int16x4_t)vand_s8(vand_s8((int8x8_t)vcgez_f32(v84), (int8x8_t)vcgez_f32(v82)), (int8x8_t)vcgez_f32(v86)), 0), *(int8x8_t *)v327.f32).u32[0] == -1)
          {
            v112 = (int8x16_t)vmulq_f32(v327, v65);
            v113 = (float32x2_t)vextq_s8(v112, v112, 8uLL).u64[0];
            v114 = vrecpe_f32(v68);
            v115 = 4;
            do
            {
              v114 = vmul_f32(v114, vrecps_f32(v68, v114));
              --v115;
            }
            while (v115);
            v116 = vpadd_f32(*(float32x2_t *)v112.i8, v113);
            v44 = vmulq_n_f32(v65, vmul_f32(v114, vpadd_f32(v116, v116)).f32[0]);
            v44.i32[3] = 0;
          }
          else
          {
            v87 = vnegq_f32(v327);
            v87.i32[3] = 0;
            v88 = vnegq_f32(v328);
            v88.i32[3] = 0;
            v89 = vmulq_f32(v87, a10);
            v89.i64[0] = vpaddq_f32(v89, v89).u64[0];
            v90 = vpadd_f32(*(float32x2_t *)v89.f32, *(float32x2_t *)v89.f32);
            v91 = vmulq_f32(a10, v88);
            v91.i64[0] = vpaddq_f32(v91, v91).u64[0];
            v92 = vpadd_f32(*(float32x2_t *)v91.f32, *(float32x2_t *)v91.f32);
            if (vuzp1_s8((int8x8_t)vdup_lane_s16((int16x4_t)vand_s8(vand_s8((int8x8_t)vcgez_f32(v90), (int8x8_t)vclez_f32(v92)), (int8x8_t)vclez_f32(v86)), 0), *(int8x8_t *)v327.f32).u32[0] == -1)
            {
              v117 = vsub_f32(v90, v92);
              v118 = vrecpe_f32(v117);
              v119 = 4;
              do
              {
                v118 = vmul_f32(v118, vrecps_f32(v117, v118));
                --v119;
              }
              while (v119);
              v104 = 0;
              v44 = vmlaq_n_f32(v327, a10, vmul_f32(v90, (float32x2_t)vbsl_s8((int8x8_t)vcgt_f32(vabs_f32(v117), (float32x2_t)0x3400000034000000), (int8x8_t)v118, 0)).f32[0]);
              v44.i64[1] = vextq_s8((int8x16_t)v44, (int8x16_t)v44, 8uLL).u32[0];
              v120 = 2;
              v103 = 1;
            }
            else
            {
              v93 = vnegq_f32(v329[0]);
              v93.i32[3] = 0;
              v94 = vmulq_f32(v88, v64);
              v94.i64[0] = vpaddq_f32(v94, v94).u64[0];
              v95 = vpadd_f32(*(float32x2_t *)v94.f32, *(float32x2_t *)v94.f32);
              v96 = vmulq_f32(a10, v93);
              v96.i64[0] = vpaddq_f32(v96, v96).u64[0];
              v97 = vpadd_f32(*(float32x2_t *)v96.f32, *(float32x2_t *)v96.f32);
              v98 = vmulq_f32(v64, v93);
              v98.i64[0] = vpaddq_f32(v98, v98).u64[0];
              v99 = vpadd_f32(*(float32x2_t *)v98.f32, *(float32x2_t *)v98.f32);
              if (vuzp1_s8((int8x8_t)vdup_lane_s16((int16x4_t)vand_s8(vand_s8((int8x8_t)vcge_f32(v95, v92), (int8x8_t)vcge_f32(v97, v99)), (int8x8_t)vclez_f32(v82)), 0), *(int8x8_t *)v327.f32).u32[0] == -1)
              {
                v121 = vsub_f32(v95, v92);
                v122 = vadd_f32(v121, vsub_f32(v97, v99));
                v123 = vrecpe_f32(v122);
                v124 = 4;
                do
                {
                  v123 = vmul_f32(v123, vrecps_f32(v122, v123));
                  --v124;
                }
                while (v124);
                v125 = (int8x16_t)vmlaq_n_f32(v328, vsubq_f32(v329[0], v328), vmul_f32(v121, (float32x2_t)vbsl_s8((int8x8_t)vcgt_f32(vabs_f32(v122), (float32x2_t)0x3400000034000000), (int8x8_t)v123, 0)).f32[0]);
                v125.i64[1] = vextq_s8(v125, v125, 8uLL).u32[0];
                v120 = 2;
                v104 = 1;
                v103 = 2;
                v44 = (float32x4_t)v125;
              }
              else
              {
                v100 = vmulq_f32(v87, v64);
                v101 = (int32x4_t)vpaddq_f32(v100, v100);
                *(float32x2_t *)v101.i8 = vpadd_f32(*(float32x2_t *)v101.i8, *(float32x2_t *)v101.i8);
                if (vuzp1_s8((int8x8_t)vdup_lane_s16((int16x4_t)vand_s8(vand_s8((int8x8_t)vcgez_f32(*(float32x2_t *)v101.i8), (int8x8_t)vclez_f32(v99)), (int8x8_t)vclez_f32(v84)), 0), *(int8x8_t *)v327.f32).u32[0] == -1)
                {
                  v126 = vsub_f32(*(float32x2_t *)v101.i8, v99);
                  v127 = vrecpe_f32(v126);
                  v128 = 4;
                  do
                  {
                    v127 = vmul_f32(v127, vrecps_f32(v126, v127));
                    --v128;
                  }
                  while (v128);
                  v104 = 0;
                  v44 = vmlaq_n_f32(v327, v64, vmul_f32(*(float32x2_t *)v101.i8, (float32x2_t)vbsl_s8((int8x8_t)vcgt_f32(vabs_f32(v126), (float32x2_t)0x3400000034000000), (int8x8_t)v127, 0)).f32[0]);
                  v44.i64[1] = vextq_s8((int8x16_t)v44, (int8x16_t)v44, 8uLL).u32[0];
                  v103 = 2;
                }
                else if (vuzp1_s8((int8x8_t)vdup_lane_s16((int16x4_t)vand_s8((int8x8_t)vclez_f32(*(float32x2_t *)v101.i8), (int8x8_t)vclez_f32(v90)), 0), *(int8x8_t *)v327.f32).u32[0] == -1)
                {
                  v104 = 0;
                  v103 = 1;
                }
                else
                {
                  *(int32x2_t *)v101.i8 = vcge_f32(v92, v95);
                  *(int16x4_t *)v44.f32 = vdup_lane_s16((int16x4_t)vand_s8(*(int8x8_t *)v101.i8, (int8x8_t)vcgez_f32(v92)), 0);
                  *(int8x8_t *)v44.f32 = vuzp1_s8(*(int8x8_t *)v44.f32, *(int8x8_t *)v44.f32);
                  v101.i32[0] = -1;
                  v102 = v44.i32[0];
                  v44 = (float32x4_t)vbslq_s8((int8x16_t)vdupq_lane_s32((int32x2_t)*(_OWORD *)&vceqq_s32((int32x4_t)v44, v101), 0), (int8x16_t)v328, (int8x16_t)v329[0]);
                  v103 = 1;
                  if (v102 == -1)
                    v104 = 1;
                  else
                    v104 = 2;
                }
                v120 = v103;
              }
            }
            v129 = *(&v327 + v104);
            v130 = *(&v327 + v103);
            a10 = *((float32x4_t *)&v324 + v104);
            v131 = *((float32x4_t *)&v324 + v103);
            v132 = *((float32x4_t *)&v321 + v104);
            v133 = *((float32x4_t *)&v321 + v103);
            v134 = *(&v319 + v104);
            v135 = *(&v319 + v103);
            v136 = *(&v317 + v104);
            v137 = *(&v317 + v103);
            v327 = v129;
            v328 = v130;
            v324 = (int8x16_t)a10;
            v325 = v131;
            v321 = (int8x16_t)v132;
            v322 = v133;
            v319 = v134;
            v320 = v135;
            v317 = v136;
            v318 = v137;
            v314 = v120;
          }
        }
        goto LABEL_49;
      }
      v314 = 2;
      v105 = vmulq_f32(a10, a10);
      v105.i64[0] = vpaddq_f32(v105, v105).u64[0];
      v106 = vpadd_f32(*(float32x2_t *)v105.f32, *(float32x2_t *)v105.f32);
      if (vuzp1_s8((int8x8_t)vdup_lane_s16((int16x4_t)vcge_f32((float32x2_t)0x3400000034000000, v106), 0), *(int8x8_t *)v327.f32).u32[0] != -1)
      {
        v107 = vnegq_f32(v327);
        v107.i32[3] = 0;
        v108 = vmulq_f32(v107, a10);
        v108.i64[0] = vpaddq_f32(v108, v108).u64[0];
        v109 = vpadd_f32(*(float32x2_t *)v108.f32, *(float32x2_t *)v108.f32);
        v110 = vrecpe_f32(v106);
        v111 = 4;
        do
        {
          v110 = vmul_f32(v110, vrecps_f32(v106, v110));
          --v111;
        }
        while (v111);
        v44 = vmlaq_n_f32(v327, a10, vmax_f32(vmin_f32(vmul_f32(v109, v110), _D10), 0).f32[0]);
        goto LABEL_31;
      }
      break;
    case 2:
      v44 = v327;
      v45 = vsubq_f32(v328, v327);
      v46 = vmulq_f32(v45, v45);
      v46.i64[0] = vpaddq_f32(v46, v46).u64[0];
      v47 = vpadd_f32(*(float32x2_t *)v46.f32, *(float32x2_t *)v46.f32);
      if (vuzp1_s8((int8x8_t)vdup_lane_s16((int16x4_t)vcge_f32((float32x2_t)0x3400000034000000, v47), 0), *(int8x8_t *)v327.f32).u32[0] != -1)
      {
        v48 = vnegq_f32(v327);
        v48.i32[3] = 0;
        v49 = vmulq_f32(v48, v45);
        a10 = vpaddq_f32(v49, v49);
        *(float32x2_t *)a10.f32 = vpadd_f32(*(float32x2_t *)a10.f32, *(float32x2_t *)a10.f32);
        v50 = vrecpe_f32(v47);
        v51 = 4;
        do
        {
          v50 = vmul_f32(v50, vrecps_f32(v47, v50));
          --v51;
        }
        while (v51);
        v44 = vmlaq_n_f32(v327, v45, vmax_f32(vmin_f32(vmul_f32(*(float32x2_t *)a10.f32, v50), _D10), 0).f32[0]);
LABEL_31:
        v44.i64[1] = vextq_s8((int8x16_t)v44, (int8x16_t)v44, 8uLL).u32[0];
        goto LABEL_49;
      }
      break;
    default:
      goto LABEL_49;
  }
  v314 = 1;
LABEL_49:
  v315 = v44;
  v138 = vmulq_f32(v44, v44);
  v138.i64[0] = vpaddq_f32(v138, v138).u64[0];
  v139 = vpadd_f32(*(float32x2_t *)v138.f32, *(float32x2_t *)v138.f32);
  v140 = vrsqrte_f32(v139);
  v141 = 4;
  do
  {
    v140 = vmul_f32(v140, vrsqrts_f32(vmul_f32(v140, v140), v139));
    --v141;
  }
  while (v141);
  v61 = vmul_f32(v139, (float32x2_t)vbsl_s8((int8x8_t)vdup_lane_s32(vceqz_f32(v139), 0), (int8x8_t)_D10, (int8x8_t)v140));
  v142 = vrecpe_f32(v61);
  v143 = 4;
  do
  {
    *(float32x2_t *)a10.f32 = vrecps_f32(v61, v142);
    v142 = vmul_f32(v142, *(float32x2_t *)a10.f32);
    --v143;
  }
  while (v143);
  v144 = vmulq_n_f32(v44, v142.f32[0]);
  v144.i32[3] = 0;
  v310 = v144;
  v62 = vdupq_lane_s32(vcgt_f32(v61, v23), 0);
  v63 = v44;
LABEL_54:
  v145 = vadd_f32(v24, a8);
  a10.i32[0] = -1;
  v304 = (int32x4_t)a10;
  v146.i64[0] = -1;
  v146.i64[1] = -1;
  for (i = v61; ; i = v158)
  {
    v148 = v44;
    v149.i64[0] = -1;
    v149.i64[1] = -1;
    *(int16x4_t *)v149.i8 = vmovn_s32(vceqq_s32(v62, v149));
    if (vuzp1_s8(*(int8x8_t *)v149.i8, *(int8x8_t *)v149.i8).u32[0] != -1)
      break;
    v308 = v148;
    v150 = vnegq_f32(v148);
    v150.i32[3] = 0;
    v311 = v61;
    v313 = v150;
    *(double *)v151.i64 = physx::Gu::RelativeConvex<physx::Gu::ConvexHullNoScaleV>::support(a1, (float32x2_t *)&v313, &v319 + v314);
    v309 = v151;
    v152 = v314;
    v153 = *(_QWORD *)(a2 + 8);
    v154 = physx::Gu::ConvexHullV::supportVertexIndex(v153, &v315);
    *(&v317 + v152) = v154;
    v155 = *(float32x4_t *)(*(_QWORD *)(v153 + 160) + 12 * v154);
    v155.i32[3] = 0;
    v44 = vsubq_f32(v309, v155);
    v156 = vmulq_f32(v310, v44);
    v156.i64[0] = vpaddq_f32(v156, v156).u64[0];
    v157 = vpadd_f32(*(float32x2_t *)v156.f32, *(float32x2_t *)v156.f32);
    if ((vmvn_s8((int8x8_t)vcgt_f32(v157, v145)).u8[0] & 1) == 0)
    {
      if (a3)
      {
        v258 = v314;
        *a5 = v314;
        if ((_DWORD)v258)
        {
          v259 = &v317;
          v260 = &v319;
          do
          {
            v261 = *v260++;
            *a3++ = v261;
            v262 = *v259++;
            *v11++ = v262;
            --v258;
          }
          while (v258);
        }
      }
      return 0;
    }
    v158 = v311;
    v159 = v314;
    if (v157.f32[0] > (float)(0.99977 * v311.f32[0]))
    {
      if (!a3)
        goto LABEL_121;
      *a5 = v314;
      if ((_DWORD)v159)
      {
        v263 = &v317;
        v264 = &v319;
        v265 = v159;
        do
        {
          v266 = *v264++;
          *a3++ = v266;
          v267 = *v263++;
          *v11++ = v267;
          --v265;
        }
        while (v265);
LABEL_121:
        v268 = a6;
        a6[2] = v310;
        switch((_DWORD)v159)
        {
          case 3:
            v313.i64[0] = 0;
            v316 = 0;
            physx::Gu::barycentricCoordinates(&v315, &v327, &v328, v329, (float32x2_t *)&v313, &v316);
            v158 = v311;
            v276 = vmulq_n_f32(vsubq_f32(v325, (float32x4_t)v324), v313.f32[0]);
            v276.i32[3] = 0;
            v277 = vmulq_n_f32(vsubq_f32(v326, (float32x4_t)v324), v316.f32[0]);
            v277.i32[3] = 0;
            v269 = (int8x16_t)vaddq_f32((float32x4_t)v324, vaddq_f32(v276, v277));
            v278 = vmulq_n_f32(vsubq_f32(v322, (float32x4_t)v321), v313.f32[0]);
            v278.i32[3] = 0;
            v279 = vmulq_n_f32(vsubq_f32(v323, (float32x4_t)v321), v316.f32[0]);
            v279.i32[3] = 0;
            v270 = (int8x16_t)vaddq_f32((float32x4_t)v321, vaddq_f32(v278, v279));
            break;
          case 2:
            v280 = vsubq_f32(v327, v315);
            v281 = vsubq_f32(vsubq_f32(v328, v315), v280);
            v282 = vmulq_f32(v281, v281);
            v282.i64[0] = vpaddq_f32(v282, v282).u64[0];
            v283 = vpadd_f32(*(float32x2_t *)v282.f32, *(float32x2_t *)v282.f32);
            v284 = vrecpe_f32(v283);
            v285 = 4;
            do
            {
              v284 = vmul_f32(v284, vrecps_f32(v283, v284));
              --v285;
            }
            while (v285);
            v286 = vnegq_f32(v280);
            v286.i32[3] = 0;
            v287 = vmulq_f32(v286, v281);
            v287.i64[0] = vpaddq_f32(v287, v287).u64[0];
            v286.i32[0] = vmul_f32((float32x2_t)vbsl_s8((int8x8_t)vcgtz_f32(v283), (int8x8_t)v284, 0), vpadd_f32(*(float32x2_t *)v287.f32, *(float32x2_t *)v287.f32)).u32[0];
            v269 = (int8x16_t)vmlaq_n_f32((float32x4_t)v324, vsubq_f32(v325, (float32x4_t)v324), v286.f32[0]);
            v269.i64[1] = vextq_s8(v269, v269, 8uLL).u32[0];
            v270 = (int8x16_t)vmlaq_n_f32((float32x4_t)v321, vsubq_f32(v322, (float32x4_t)v321), v286.f32[0]);
            v270.i64[1] = vextq_s8(v270, v270, 8uLL).u32[0];
            break;
          case 1:
            v269 = v324;
            result = 2;
            v270 = v321;
LABEL_147:
            *v268 = (float32x4_t)v269;
            v268[1] = (float32x4_t)v270;
            *(float32x2_t *)v268[4].f32 = v158;
            return result;
          default:
LABEL_134:
            result = 2;
            v269 = 0uLL;
            v270 = 0uLL;
            goto LABEL_147;
        }
        result = 2;
        goto LABEL_147;
      }
      v268 = a6;
      a6[2] = v310;
      goto LABEL_134;
    }
    *(&v324 + v314) = (int8x16_t)v309;
    *(&v321 + v159) = (int8x16_t)v155;
    v314 = v159 + 1;
    *(&v327 + v159) = v44;
    if ((_DWORD)v159 == 3)
    {
      physx::Gu::closestPtPointTetrahedron(&v327, &v324, &v321, &v319, &v317, (int *)&v314);
      v158 = v311;
LABEL_66:
      v63 = v308;
      goto LABEL_101;
    }
    if ((_DWORD)v159 == 2)
    {
      v44 = v327;
      v168 = vsubq_f32(v328, v327);
      v169 = vsubq_f32(v329[0], v327);
      v171 = (int8x8_t)vmls_f32(vmul_f32(*(float32x2_t *)v168.f32, (float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v169, (int8x16_t)v169, 4uLL)), (float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v168, (int8x16_t)v168, 4uLL), *(float32x2_t *)v169.f32);
      *(int8x8_t *)v170.f32 = vext_s8(v171, (int8x8_t)vmls_f32(vmul_f32((float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v168, (int8x16_t)v168, 8uLL), *(float32x2_t *)v169.f32), *(float32x2_t *)v168.f32, (float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v169, (int8x16_t)v169, 8uLL)), 4uLL);
      v171.i32[1] = 0;
      v314 = 3;
      v172 = vpadd_f32(vmul_f32(*(float32x2_t *)v170.f32, *(float32x2_t *)v170.f32), vmul_f32((float32x2_t)v171.u32[0], (float32x2_t)v171.u32[0]));
      v173 = vpadd_f32(v172, v172);
      if (v173.f32[0] <= 0.00000011921)
      {
        v314 = 2;
        v210 = vmulq_f32(v168, v168);
        v210.i64[0] = vpaddq_f32(v210, v210).u64[0];
        v211 = vpadd_f32(*(float32x2_t *)v210.f32, *(float32x2_t *)v210.f32);
        if (vuzp1_s8((int8x8_t)vdup_lane_s16((int16x4_t)vcge_f32((float32x2_t)0x3400000034000000, v211), 0), *(int8x8_t *)v327.f32).u32[0] != -1)
        {
          v212 = vnegq_f32(v327);
          v212.i32[3] = 0;
          v213 = vmulq_f32(v212, v168);
          v213.i64[0] = vpaddq_f32(v213, v213).u64[0];
          v214 = vpadd_f32(*(float32x2_t *)v213.f32, *(float32x2_t *)v213.f32);
          v215 = vrecpe_f32(v211);
          v216 = 4;
          v63 = v308;
          do
          {
            v215 = vmul_f32(v215, vrecps_f32(v211, v215));
            --v216;
          }
          while (v216);
          v44 = vmlaq_n_f32(v327, v168, vmax_f32(vmin_f32(vmul_f32(v214, v215), _D10), 0).f32[0]);
LABEL_81:
          v44.i64[1] = vextq_s8((int8x16_t)v44, (int8x16_t)v44, 8uLL).u32[0];
          goto LABEL_101;
        }
        v314 = 1;
        goto LABEL_66;
      }
      if (v173.f32[0] == 0.0)
      {
        v44 = 0uLL;
        goto LABEL_66;
      }
      *(int8x8_t *)&v170.u32[2] = v171;
      v174 = (float32x2_t)vextq_s8((int8x16_t)v328, (int8x16_t)v328, 8uLL).u64[0];
      v175 = (float32x2_t)vextq_s8((int8x16_t)v329[0], (int8x16_t)v329[0], 8uLL).u64[0];
      v176 = (float32x2_t)vextq_s8((int8x16_t)v329[0], (int8x16_t)v329[0], 4uLL).u64[0];
      v177 = (float32x2_t)vextq_s8((int8x16_t)v328, (int8x16_t)v328, 4uLL).u64[0];
      v178 = (int8x8_t)vmls_f32(vmul_f32(*(float32x2_t *)v328.f32, v176), v177, *(float32x2_t *)v329[0].f32);
      *(int8x8_t *)v179.f32 = vext_s8(v178, (int8x8_t)vmls_f32(vmul_f32(v174, *(float32x2_t *)v329[0].f32), *(float32x2_t *)v328.f32, v175), 4uLL);
      v179.i64[1] = v178.u32[0];
      v180 = (float32x2_t)vextq_s8((int8x16_t)v327, (int8x16_t)v327, 8uLL).u64[0];
      v181 = (float32x2_t)vextq_s8((int8x16_t)v327, (int8x16_t)v327, 4uLL).u64[0];
      v182 = (int8x8_t)vmls_f32(vmul_f32(v181, *(float32x2_t *)v329[0].f32), v176, *(float32x2_t *)v327.f32);
      *(int8x8_t *)v183.f32 = vext_s8(v182, (int8x8_t)vmls_f32(vmul_f32(*(float32x2_t *)v327.f32, v175), *(float32x2_t *)v329[0].f32, v180), 4uLL);
      v183.i64[1] = v182.u32[0];
      v184 = (int8x8_t)vmls_f32(vmul_f32(*(float32x2_t *)v327.f32, v177), v181, *(float32x2_t *)v328.f32);
      *(int8x8_t *)v185.f32 = vext_s8(v184, (int8x8_t)vmls_f32(vmul_f32(v180, *(float32x2_t *)v328.f32), *(float32x2_t *)v327.f32, v174), 4uLL);
      v185.i64[1] = v184.u32[0];
      v186 = vmulq_f32(v179, v170);
      v186.i64[0] = vpaddq_f32(v186, v186).u64[0];
      v187 = vpadd_f32(*(float32x2_t *)v186.f32, *(float32x2_t *)v186.f32);
      v188 = vmulq_f32(v183, v170);
      v188.i64[0] = vpaddq_f32(v188, v188).u64[0];
      v189 = vpadd_f32(*(float32x2_t *)v188.f32, *(float32x2_t *)v188.f32);
      v190 = vmulq_f32(v185, v170);
      v190.i64[0] = vpaddq_f32(v190, v190).u64[0];
      v191 = vpadd_f32(*(float32x2_t *)v190.f32, *(float32x2_t *)v190.f32);
      if (vuzp1_s8((int8x8_t)vdup_lane_s16((int16x4_t)vand_s8(vand_s8((int8x8_t)vcgez_f32(v189), (int8x8_t)vcgez_f32(v187)), (int8x8_t)vcgez_f32(v191)), 0), *(int8x8_t *)v327.f32).u32[0] != -1)
      {
        v192 = vnegq_f32(v327);
        v192.i32[3] = 0;
        v193 = vnegq_f32(v328);
        v193.i32[3] = 0;
        v194 = vmulq_f32(v192, v168);
        v194.i64[0] = vpaddq_f32(v194, v194).u64[0];
        v195 = vpadd_f32(*(float32x2_t *)v194.f32, *(float32x2_t *)v194.f32);
        v196 = vmulq_f32(v168, v193);
        v196.i64[0] = vpaddq_f32(v196, v196).u64[0];
        v197 = vpadd_f32(*(float32x2_t *)v196.f32, *(float32x2_t *)v196.f32);
        if (vuzp1_s8((int8x8_t)vdup_lane_s16((int16x4_t)vand_s8(vand_s8((int8x8_t)vcgez_f32(v195), (int8x8_t)vclez_f32(v197)), (int8x8_t)vclez_f32(v191)), 0), *(int8x8_t *)v327.f32).u32[0] == -1)
        {
          v222 = vsub_f32(v195, v197);
          v223 = vrecpe_f32(v222);
          v224 = 4;
          do
          {
            v223 = vmul_f32(v223, vrecps_f32(v222, v223));
            --v224;
          }
          while (v224);
          v209 = 0;
          v44 = vmlaq_n_f32(v327, v168, vmul_f32(v195, (float32x2_t)vbsl_s8((int8x8_t)vcgt_f32(vabs_f32(v222), (float32x2_t)0x3400000034000000), (int8x8_t)v223, 0)).f32[0]);
          v44.i64[1] = vextq_s8((int8x16_t)v44, (int8x16_t)v44, 8uLL).u32[0];
          v225 = 2;
          v208 = 1;
        }
        else
        {
          v198 = vnegq_f32(v329[0]);
          v198.i32[3] = 0;
          v199 = vmulq_f32(v193, v169);
          v199.i64[0] = vpaddq_f32(v199, v199).u64[0];
          v200 = vpadd_f32(*(float32x2_t *)v199.f32, *(float32x2_t *)v199.f32);
          v201 = vmulq_f32(v168, v198);
          v201.i64[0] = vpaddq_f32(v201, v201).u64[0];
          v202 = vpadd_f32(*(float32x2_t *)v201.f32, *(float32x2_t *)v201.f32);
          v203 = vmulq_f32(v169, v198);
          v203.i64[0] = vpaddq_f32(v203, v203).u64[0];
          v204 = vpadd_f32(*(float32x2_t *)v203.f32, *(float32x2_t *)v203.f32);
          if (vuzp1_s8((int8x8_t)vdup_lane_s16((int16x4_t)vand_s8(vand_s8((int8x8_t)vcge_f32(v200, v197), (int8x8_t)vcge_f32(v202, v204)), (int8x8_t)vclez_f32(v187)), 0), *(int8x8_t *)v327.f32).u32[0] != -1)
          {
            v205 = vmulq_f32(v192, v169);
            v205.i64[0] = vpaddq_f32(v205, v205).u64[0];
            v206 = vpadd_f32(*(float32x2_t *)v205.f32, *(float32x2_t *)v205.f32);
            if (vuzp1_s8((int8x8_t)vdup_lane_s16((int16x4_t)vand_s8(vand_s8((int8x8_t)vcgez_f32(v206), (int8x8_t)vclez_f32(v204)), (int8x8_t)vclez_f32(v189)), 0), *(int8x8_t *)v327.f32).u32[0] == -1)
            {
              v231 = vsub_f32(v206, v204);
              v232 = vrecpe_f32(v231);
              v233 = 4;
              v63 = v308;
              do
              {
                v232 = vmul_f32(v232, vrecps_f32(v231, v232));
                --v233;
              }
              while (v233);
              v209 = 0;
              v44 = vmlaq_n_f32(v327, v169, vmul_f32(v206, (float32x2_t)vbsl_s8((int8x8_t)vcgt_f32(vabs_f32(v231), (float32x2_t)0x3400000034000000), (int8x8_t)v232, 0)).f32[0]);
              v44.i64[1] = vextq_s8((int8x16_t)v44, (int8x16_t)v44, 8uLL).u32[0];
              v208 = 2;
              v225 = 2;
            }
            else
            {
              v63 = v308;
              if (vuzp1_s8((int8x8_t)vdup_lane_s16((int16x4_t)vand_s8((int8x8_t)vclez_f32(v206), (int8x8_t)vclez_f32(v195)), 0), *(int8x8_t *)v327.f32).u32[0] == -1)
              {
                v209 = 0;
                v208 = 1;
              }
              else
              {
                *(int16x4_t *)v44.f32 = vdup_lane_s16((int16x4_t)vand_s8((int8x8_t)vcge_f32(v197, v200), (int8x8_t)vcgez_f32(v197)), 0);
                *(int8x8_t *)v44.f32 = vuzp1_s8(*(int8x8_t *)v44.f32, *(int8x8_t *)v44.f32);
                v207 = v44.i32[0];
                v44 = (float32x4_t)vbslq_s8((int8x16_t)vdupq_lane_s32((int32x2_t)*(_OWORD *)&vceqq_s32((int32x4_t)v44, v304), 0), (int8x16_t)v328, (int8x16_t)v329[0]);
                v208 = 1;
                if (v207 == -1)
                  v209 = 1;
                else
                  v209 = 2;
              }
              v225 = 1;
            }
            goto LABEL_100;
          }
          v226 = vsub_f32(v200, v197);
          v227 = vadd_f32(v226, vsub_f32(v202, v204));
          v228 = vrecpe_f32(v227);
          v229 = 4;
          do
          {
            v228 = vmul_f32(v228, vrecps_f32(v227, v228));
            --v229;
          }
          while (v229);
          v230 = (int8x16_t)vmlaq_n_f32(v328, vsubq_f32(v329[0], v328), vmul_f32(v226, (float32x2_t)vbsl_s8((int8x8_t)vcgt_f32(vabs_f32(v227), (float32x2_t)0x3400000034000000), (int8x8_t)v228, 0)).f32[0]);
          v230.i64[1] = vextq_s8(v230, v230, 8uLL).u32[0];
          v208 = 2;
          v44 = (float32x4_t)v230;
          v209 = 1;
          v225 = 2;
        }
        v63 = v308;
LABEL_100:
        v234 = *(&v327 + v209);
        v235 = *(&v327 + v208);
        v236 = *((float32x4_t *)&v324 + v209);
        v237 = *((float32x4_t *)&v324 + v208);
        v238 = *((float32x4_t *)&v321 + v209);
        v239 = *((float32x4_t *)&v321 + v208);
        v240 = *(&v319 + v209);
        v241 = *(&v319 + v208);
        v242 = *(&v317 + v209);
        v243 = *(&v317 + v208);
        v327 = v234;
        v328 = v235;
        v324 = (int8x16_t)v236;
        v325 = v237;
        v321 = (int8x16_t)v238;
        v322 = v239;
        v319 = v240;
        v320 = v241;
        v317 = v242;
        v318 = v243;
        v314 = v225;
        goto LABEL_101;
      }
      v217 = (int8x16_t)vmulq_f32(v327, v170);
      v218 = (float32x2_t)vextq_s8(v217, v217, 8uLL).u64[0];
      v219 = vrecpe_f32(v173);
      v220 = 4;
      v63 = v308;
      do
      {
        v219 = vmul_f32(v219, vrecps_f32(v173, v219));
        --v220;
      }
      while (v220);
      v221 = vpadd_f32(*(float32x2_t *)v217.i8, v218);
      v44 = vmulq_n_f32(v170, vmul_f32(v219, vpadd_f32(v221, v221)).f32[0]);
      v44.i32[3] = 0;
    }
    else
    {
      v63 = v308;
      if ((_DWORD)v159 == 1)
      {
        v44 = v327;
        v160 = vsubq_f32(v328, v327);
        v161 = vmulq_f32(v160, v160);
        v161.i64[0] = vpaddq_f32(v161, v161).u64[0];
        v162 = vpadd_f32(*(float32x2_t *)v161.f32, *(float32x2_t *)v161.f32);
        if (vuzp1_s8((int8x8_t)vdup_lane_s16((int16x4_t)vcge_f32((float32x2_t)0x3400000034000000, v162), 0), *(int8x8_t *)v327.f32).u32[0] == -1)
        {
          v314 = 1;
          goto LABEL_101;
        }
        v163 = vnegq_f32(v327);
        v163.i32[3] = 0;
        v164 = vmulq_f32(v163, v160);
        v164.i64[0] = vpaddq_f32(v164, v164).u64[0];
        v165 = vpadd_f32(*(float32x2_t *)v164.f32, *(float32x2_t *)v164.f32);
        v166 = vrecpe_f32(v162);
        v167 = 4;
        do
        {
          v166 = vmul_f32(v166, vrecps_f32(v162, v166));
          --v167;
        }
        while (v167);
        v44 = vmlaq_n_f32(v327, v160, vmax_f32(vmin_f32(vmul_f32(v165, v166), _D10), 0).f32[0]);
        goto LABEL_81;
      }
    }
LABEL_101:
    v315 = v44;
    v244 = vmulq_f32(v44, v44);
    v244.i64[0] = vpaddq_f32(v244, v244).u64[0];
    v245 = vpadd_f32(*(float32x2_t *)v244.f32, *(float32x2_t *)v244.f32);
    v246 = vrsqrte_f32(v245);
    v247 = 4;
    do
    {
      v246 = vmul_f32(v246, vrsqrts_f32(vmul_f32(v246, v246), v245));
      --v247;
    }
    while (v247);
    v61 = vmul_f32(v245, (float32x2_t)vbsl_s8((int8x8_t)vdup_lane_s32(vceqz_f32(v245), 0), (int8x8_t)_D10, (int8x8_t)v246));
    v248 = vrecpe_f32(v61);
    v249 = 4;
    do
    {
      v248 = vmul_f32(v248, vrecps_f32(v61, v248));
      --v249;
    }
    while (v249);
    v250 = vmulq_n_f32(v44, v248.f32[0]);
    v250.i32[3] = 0;
    v310 = v250;
    *(int32x2_t *)v250.f32 = vcgt_f32(v158, v61);
    v146 = vdupq_lane_s32(*(int32x2_t *)v250.f32, 0);
    v62 = vdupq_lane_s32((int32x2_t)vand_s8((int8x8_t)vcgt_f32(v61, v23), *(int8x8_t *)v250.f32), 0);
  }
  v251 = (int8x8_t)vmovn_s32(vceqzq_s32(v146));
  v252 = v314;
  if (vuzp1_s8(v251, v251).u32[0] == -1)
  {
    if (a3)
    {
      v271 = v314 - 1;
      *a5 = v314 - 1;
      if ((_DWORD)v252 == 1)
      {
LABEL_132:
        v269 = v324;
        v270 = v321;
        goto LABEL_144;
      }
      v272 = &v317;
      v273 = &v319;
      do
      {
        v274 = *v273++;
        *a3++ = v274;
        v275 = *v272++;
        *v11++ = v275;
        --v271;
      }
      while (v271);
    }
    v315 = v63;
    if ((_DWORD)v252 == 3)
    {
      v313.i64[0] = 0;
      v316 = 0;
      v312 = v63;
      physx::Gu::barycentricCoordinates(&v315, &v327, &v328, v329, (float32x2_t *)&v313, &v316);
      v288 = vmulq_n_f32(vsubq_f32(v325, (float32x4_t)v324), v313.f32[0]);
      v288.i32[3] = 0;
      v289 = vmulq_n_f32(vsubq_f32(v326, (float32x4_t)v324), v316.f32[0]);
      v289.i32[3] = 0;
      v290 = vaddq_f32(v288, v289);
      v291 = vmulq_n_f32(vsubq_f32(v322, (float32x4_t)v321), v313.f32[0]);
      v291.i32[3] = 0;
      v269 = (int8x16_t)vaddq_f32((float32x4_t)v324, v290);
      v292 = vmulq_n_f32(vsubq_f32(v323, (float32x4_t)v321), v316.f32[0]);
      v63 = v312;
      v292.i32[3] = 0;
      v270 = (int8x16_t)vaddq_f32((float32x4_t)v321, vaddq_f32(v291, v292));
    }
    else
    {
      if ((_DWORD)v252 == 2)
      {
        v293 = vsubq_f32(v327, v63);
        v294 = vsubq_f32(vsubq_f32(v328, v63), v293);
        v295 = vmulq_f32(v294, v294);
        v295.i64[0] = vpaddq_f32(v295, v295).u64[0];
        v296 = vpadd_f32(*(float32x2_t *)v295.f32, *(float32x2_t *)v295.f32);
        v297 = vrecpe_f32(v296);
        v298 = 4;
        do
        {
          v297 = vmul_f32(v297, vrecps_f32(v296, v297));
          --v298;
        }
        while (v298);
        v299 = vnegq_f32(v293);
        v299.i32[3] = 0;
        v300 = vmulq_f32(v299, v294);
        v300.i64[0] = vpaddq_f32(v300, v300).u64[0];
        v299.i32[0] = vmul_f32((float32x2_t)vbsl_s8((int8x8_t)vcgtz_f32(v296), (int8x8_t)v297, 0), vpadd_f32(*(float32x2_t *)v300.f32, *(float32x2_t *)v300.f32)).u32[0];
        v269 = (int8x16_t)vmlaq_n_f32((float32x4_t)v324, vsubq_f32(v325, (float32x4_t)v324), v299.f32[0]);
        v269.i64[1] = vextq_s8(v269, v269, 8uLL).u32[0];
        v270 = (int8x16_t)vmlaq_n_f32((float32x4_t)v321, vsubq_f32(v322, (float32x4_t)v321), v299.f32[0]);
        v270.i64[1] = vextq_s8(v270, v270, 8uLL).u32[0];
        goto LABEL_144;
      }
      v269 = 0uLL;
      v270 = 0uLL;
      if ((_DWORD)v252 == 1)
        goto LABEL_132;
    }
LABEL_144:
    v301 = vrecpe_f32(i);
    v302 = 4;
    do
    {
      v301 = vmul_f32(v301, vrecps_f32(i, v301));
      --v302;
    }
    while (v302);
    v303 = vmulq_n_f32(v63, v301.f32[0]);
    v303.i32[3] = 0;
    v268 = a6;
    a6[2] = v303;
    a6[3] = v310;
    result = 4;
    v158 = i;
    goto LABEL_147;
  }
  if (a3)
  {
    *a5 = v314;
    if ((_DWORD)v252)
    {
      v253 = &v317;
      v254 = &v319;
      do
      {
        v255 = *v254++;
        *a3++ = v255;
        v256 = *v253++;
        *v11++ = v256;
        --v252;
      }
      while (v252);
    }
  }
  return 5;
}

uint64_t physx::Gu::generateOrProcessContactsConvexConvex(uint64_t a1, uint64_t a2, uint64_t a3, int32x4_t *a4, float32x4_t *a5, int a6, uint64_t a7, uint64_t a8, float32x2_t a9, float32x2_t a10, double a11, float32x4_t *a12, unsigned int a13, char a14, char a15)
{
  uint64_t v24;
  float32x4_t *v25;
  float32x4_t v26;
  uint64_t v27;
  float32x4_t *v28;
  float32x4_t v29;
  float32x4_t v30;
  float32x2_t v31;
  float32x2_t v32;
  int v33;
  float32x2_t v34;
  float32x2_t v35;
  int v36;
  float32x4_t v37;
  _BOOL8 v38;
  int v39;
  float32x4_t v40;
  float32x4_t v41;
  char v44;
  float32x4_t *v45;
  float32x4_t *v46;
  uint64_t (**v47)();
  uint64_t (**v48)();
  uint64_t v49;
  int8x16_t v50;
  unint64_t v51;
  float32x4_t v52;
  unint64_t v53;
  float32x4_t *v54;
  float32x4_t v55;
  float32x4_t v56;
  float32x4_t v57;
  float32x4_t v58;
  float32x2_t v59;
  float32x4_t v60;
  float32x2_t v61;
  float32x2_t v62;
  int8x8_t v63;
  float32x4_t v64;
  float32x4_t v65;
  float32x4_t v66;
  float32x4_t v67;
  float32x4_t v68;
  float32x4_t v69;
  float32x2_t v70;
  float32x2_t v71;
  int v72;
  float32x2_t v73;
  float32x2_t v74;
  int v75;
  float32x4_t v76;
  uint64_t v77;
  float32x4_t v78;
  float32x4_t v79;
  float32x2_t v80;
  float32x4_t v81;
  float32x2_t v82;
  int8x8_t v83;
  float32x4_t v84;
  float32x4_t v85;
  float32x4_t v86;
  float32x4_t v87;
  float32x4_t v88;
  float32x4_t v89;
  float32x2_t v90;
  float32x2_t v91;
  int v92;
  float32x2_t v93;
  float32x2_t v94;
  int v95;
  float32x4_t v96;
  uint64_t v97;
  int8x16_t v98;
  unint64_t v99;
  float32x4_t v100;
  unint64_t v101;
  float32x4_t *v102;
  float32x4_t v103;
  float32x4_t v104;
  float32x4_t v105;
  float32x4_t v106;
  float32x2_t v107;
  float32x4_t v108;
  float32x2_t v109;
  float32x2_t v110;
  int8x8_t v111;
  float32x4_t v112;
  float32x4_t v113;
  float32x4_t v114;
  float32x4_t v115;
  float32x4_t v116;
  float32x4_t v117;
  float32x2_t v118;
  float32x2_t v119;
  int v120;
  float32x2_t v121;
  float32x2_t v122;
  int v123;
  float32x4_t v124;
  float32x4_t v127;
  float32x2_t v128;
  float32x4_t v129;
  unsigned int v130;
  _BYTE v131[104];
  _OWORD v132[7];
  _QWORD v133[7];
  char v134;
  float32x4_t *v135;
  _QWORD v136[7];
  char v137;
  float32x4_t *v138;
  uint64_t v139;

  v139 = *MEMORY[0x24BDAC8D0];
  v128 = a10;
  if (!a6)
    return 0;
  __asm { FMOV            V8.2S, #1.0 }
  v24 = *(unsigned __int8 *)(a8 + 64);
  if (*(_BYTE *)(a8 + 64))
  {
    v25 = *(float32x4_t **)(a8 + 80);
    v26 = v25[2];
    if ((_DWORD)v24 != 1)
    {
      v27 = v24 - 1;
      v28 = v25 + 5;
      do
      {
        v29 = *v28;
        v28 += 3;
        v26 = vaddq_f32(v26, v29);
        --v27;
      }
      while (v27);
    }
    v26.i32[3] = 0;
    v30 = vmulq_f32(v26, v26);
    v30.i64[0] = vpaddq_f32(v30, v30).u64[0];
    v31 = vpadd_f32(*(float32x2_t *)v30.f32, *(float32x2_t *)v30.f32);
    v32 = vrsqrte_f32(v31);
    v33 = 4;
    do
    {
      v32 = vmul_f32(v32, vrsqrts_f32(vmul_f32(v32, v32), v31));
      --v33;
    }
    while (v33);
    v34 = vmul_f32(v31, (float32x2_t)vbsl_s8((int8x8_t)vdup_lane_s32(vceqz_f32(v31), 0), _D8, (int8x8_t)v32));
    v35 = vrecpe_f32(v34);
    v36 = 4;
    do
    {
      v35 = vmul_f32(v35, vrecps_f32(v34, v35));
      --v36;
    }
    while (v36);
    v37 = vmulq_n_f32(v26, v35.f32[0]);
    v37.i32[3] = 0;
  }
  else
  {
    v37 = 0uLL;
  }
  v127 = v37;
  v39 = physx::Gu::addGJKEPAContacts(a1, a2, a5, a6, a12, (float32x4_t *)a7, a8, vmul_f32(a9, (float32x2_t)vdup_n_s32(0x3D4CCCCDu)));
  v40 = *(float32x4_t *)(a7 + 32);
  v41 = vmulq_f32(v127, v40);
  v41.i64[0] = vpaddq_f32(v41, v41).u64[0];
  if (vpadd_f32(*(float32x2_t *)v41.f32, *(float32x2_t *)v41.f32).f32[0] >= 0.70711
    && *(unsigned __int8 *)(a8 + 64) >= a13
    && v39 == 0)
  {
    v78 = vaddq_f32(v127, v40);
    v79 = *(float32x4_t *)a4;
    v79.i32[3] = 0;
    v80 = (float32x2_t)vdupq_laneq_s32(*a4, 3).u64[0];
    v81 = vmulq_n_f32(v78, vmla_f32((float32x2_t)0xBF000000BF000000, v80, v80).f32[0]);
    v81.i32[3] = 0;
    v82 = (float32x2_t)vextq_s8((int8x16_t)v79, (int8x16_t)v79, 8uLL).u64[0];
    v83 = (int8x8_t)vmls_f32(vmul_f32((float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v78, (int8x16_t)v78, 4uLL), *(float32x2_t *)a4->i8), (float32x2_t)vext_s8(*(int8x8_t *)a4->i8, (int8x8_t)v82, 4uLL), *(float32x2_t *)v78.f32);
    *(int8x8_t *)v84.f32 = vext_s8(v83, (int8x8_t)vmls_f32(vmul_f32(*(float32x2_t *)v78.f32, v82), *(float32x2_t *)a4->i8, (float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v78, (int8x16_t)v78, 8uLL)), 4uLL);
    v84.i64[1] = v83.u32[0];
    v85 = vmlaq_laneq_f32(v81, v84, *(float32x4_t *)a4, 3);
    v85.i64[1] = vextq_s8((int8x16_t)v85, (int8x16_t)v85, 8uLL).u32[0];
    v86 = vmulq_f32(v78, v79);
    v86.i64[0] = vpaddq_f32(v86, v86).u64[0];
    v87 = vmlaq_n_f32(v85, v79, vpadd_f32(*(float32x2_t *)v86.f32, *(float32x2_t *)v86.f32).f32[0]);
    v88 = vaddq_f32(v87, v87);
    v88.i32[3] = 0;
    v89 = vmulq_f32(v88, v88);
    v89.i64[0] = vpaddq_f32(v89, v89).u64[0];
    v90 = vpadd_f32(*(float32x2_t *)v89.f32, *(float32x2_t *)v89.f32);
    v91 = vrsqrte_f32(v90);
    v92 = 4;
    do
    {
      v91 = vmul_f32(v91, vrsqrts_f32(vmul_f32(v91, v91), v90));
      --v92;
    }
    while (v92);
    v93 = vmul_f32(v90, (float32x2_t)vbsl_s8((int8x8_t)vdup_lane_s32(vceqz_f32(v90), 0), _D8, (int8x8_t)v91));
    v94 = vrecpe_f32(v93);
    v95 = 4;
    do
    {
      v94 = vmul_f32(v94, vrecps_f32(v93, v94));
      --v95;
    }
    while (v95);
    v96 = vmulq_n_f32(v88, v94.f32[0]);
    v96.i32[3] = 0;
    v132[0] = v96;
    physx::Gu::PersistentContactManifold::addManifoldContactsToContactBuffer(a8, (uint64_t)a12, v132, (float32x4_t *)a4, (uint64_t *)&v128);
    return 1;
  }
  else
  {
    v44 = v39;
    v45 = *(float32x4_t **)(a1 + 8);
    v46 = *(float32x4_t **)(a2 + 8);
    physx::Gu::getPCMConvexData(v45, a14, (uint64_t)v132);
    physx::Gu::getPCMConvexData(v46, a15, (uint64_t)v131);
    v136[5] = v45 + 3;
    v136[6] = v45 + 6;
    v47 = &off_24ED91090;
    v137 = a14;
    if (a14)
      v48 = &off_24ED91040;
    else
      v48 = &off_24ED91090;
    v136[4] = a3;
    v136[0] = v48;
    v138 = v45;
    v133[5] = v46 + 3;
    v133[6] = v46 + 6;
    if (a15)
      v47 = &off_24ED91040;
    v134 = a15;
    v133[4] = a4;
    v133[0] = v47;
    v135 = v46;
    v130 = 0;
    v38 = physx::Gu::generateFullContactManifold((uint64_t)v132, (uint64_t)v131, v136, v133, (uint64_t)a12, &v130, &v128, (float32x4_t *)(a7 + 32), v45[1].f32[0], v46[1].f32[0], *(float *)&a11, (float32x4_t *)a7, (float32x2_t *)(a7 + 16), v44);
    if (v38)
    {
      if (v130)
      {
        physx::Gu::PersistentContactManifold::addBatchManifoldContacts(a8, (int32x4_t *)a12, v130, a11);
        v49 = *(_QWORD *)(a8 + 80);
        v50 = *(int8x16_t *)(v49 + 32);
        v51 = *(unsigned __int8 *)(a8 + 64);
        v52 = (float32x4_t)v50;
        if (v51 >= 2)
        {
          v53 = v51 - 1;
          v54 = (float32x4_t *)(v49 + 80);
          v52 = (float32x4_t)v50;
          do
          {
            v55 = *v54;
            v54 += 3;
            v52 = vaddq_f32(v52, v55);
            --v53;
          }
          while (v53);
        }
        v52.i32[3] = 0;
        v56 = vmulq_f32(v52, v52);
        v56.i64[0] = vpaddq_f32(v56, v56).u64[0];
        v50.i32[3] = 0;
        v57 = (float32x4_t)vbslq_s8((int8x16_t)vcltzq_s32(vshlq_n_s32(vdupq_lane_s32(vcgt_f32(vpadd_f32(*(float32x2_t *)v56.f32, *(float32x2_t *)v56.f32), (float32x2_t)0x3400000034000000), 0), 0x1FuLL)), (int8x16_t)v52, v50);
        v58 = *(float32x4_t *)a4;
        v58.i32[3] = 0;
        v59 = (float32x2_t)vdupq_laneq_s32(*a4, 3).u64[0];
        v60 = vmulq_n_f32(v57, vmla_f32((float32x2_t)0xBF000000BF000000, v59, v59).f32[0]);
        v60.i32[3] = 0;
        v61 = (float32x2_t)vextq_s8((int8x16_t)v58, (int8x16_t)v58, 8uLL).u64[0];
        v62 = (float32x2_t)vextq_s8((int8x16_t)v57, (int8x16_t)v57, 8uLL).u64[0];
        v63 = (int8x8_t)vmls_f32(vmul_f32(*(float32x2_t *)a4->i8, (float32x2_t)vext_s8(*(int8x8_t *)v57.f32, (int8x8_t)v62, 4uLL)), (float32x2_t)vext_s8(*(int8x8_t *)a4->i8, (int8x8_t)v61, 4uLL), *(float32x2_t *)v57.f32);
        *(int8x8_t *)v64.f32 = vext_s8(v63, (int8x8_t)vmls_f32(vmul_f32(v61, *(float32x2_t *)v57.f32), *(float32x2_t *)a4->i8, v62), 4uLL);
        v64.i64[1] = v63.u32[0];
        v65 = vmlaq_laneq_f32(v60, v64, *(float32x4_t *)a4, 3);
        v65.i64[1] = vextq_s8((int8x16_t)v65, (int8x16_t)v65, 8uLL).u32[0];
        v66 = vmulq_f32(v58, v57);
        v66.i64[0] = vpaddq_f32(v66, v66).u64[0];
        v67 = vmlaq_n_f32(v65, v58, vpadd_f32(*(float32x2_t *)v66.f32, *(float32x2_t *)v66.f32).f32[0]);
        v68 = vaddq_f32(v67, v67);
        v68.i32[3] = 0;
        v69 = vmulq_f32(v68, v68);
        v69.i64[0] = vpaddq_f32(v69, v69).u64[0];
        v70 = vpadd_f32(*(float32x2_t *)v69.f32, *(float32x2_t *)v69.f32);
        v71 = vrsqrte_f32(v70);
        v72 = 4;
        do
        {
          v71 = vmul_f32(v71, vrsqrts_f32(vmul_f32(v71, v71), v70));
          --v72;
        }
        while (v72);
        v73 = vmul_f32(v70, (float32x2_t)vbsl_s8((int8x8_t)vdup_lane_s32(vceqz_f32(v70), 0), _D8, (int8x8_t)v71));
        v74 = vrecpe_f32(v73);
        v75 = 4;
        do
        {
          v74 = vmul_f32(v74, vrecps_f32(v73, v74));
          --v75;
        }
        while (v75);
        v76 = vmulq_n_f32(v68, v74.f32[0]);
        v76.i32[3] = 0;
        v129 = v76;
        v77 = a8;
LABEL_49:
        physx::Gu::PersistentContactManifold::addManifoldContactsToContactBuffer(v77, (uint64_t)a12, &v129, (float32x4_t *)a4, (uint64_t *)&v128);
        return v38;
      }
      if ((v44 & 1) == 0)
      {
        v77 = a8;
        v97 = *(_QWORD *)(a8 + 80);
        v98 = *(int8x16_t *)(v97 + 32);
        v99 = *(unsigned __int8 *)(a8 + 64);
        v100 = (float32x4_t)v98;
        if (v99 >= 2)
        {
          v101 = v99 - 1;
          v102 = (float32x4_t *)(v97 + 80);
          v100 = (float32x4_t)v98;
          do
          {
            v103 = *v102;
            v102 += 3;
            v100 = vaddq_f32(v100, v103);
            --v101;
          }
          while (v101);
        }
        v100.i32[3] = 0;
        v104 = vmulq_f32(v100, v100);
        v104.i64[0] = vpaddq_f32(v104, v104).u64[0];
        v98.i32[3] = 0;
        v105 = (float32x4_t)vbslq_s8((int8x16_t)vcltzq_s32(vshlq_n_s32(vdupq_lane_s32(vcgt_f32(vpadd_f32(*(float32x2_t *)v104.f32, *(float32x2_t *)v104.f32), (float32x2_t)0x3400000034000000), 0), 0x1FuLL)), (int8x16_t)v100, v98);
        v106 = *(float32x4_t *)a4;
        v106.i32[3] = 0;
        v107 = (float32x2_t)vdupq_laneq_s32(*a4, 3).u64[0];
        v108 = vmulq_n_f32(v105, vmla_f32((float32x2_t)0xBF000000BF000000, v107, v107).f32[0]);
        v108.i32[3] = 0;
        v109 = (float32x2_t)vextq_s8((int8x16_t)v106, (int8x16_t)v106, 8uLL).u64[0];
        v110 = (float32x2_t)vextq_s8((int8x16_t)v105, (int8x16_t)v105, 8uLL).u64[0];
        v111 = (int8x8_t)vmls_f32(vmul_f32(*(float32x2_t *)a4->i8, (float32x2_t)vext_s8(*(int8x8_t *)v105.f32, (int8x8_t)v110, 4uLL)), (float32x2_t)vext_s8(*(int8x8_t *)a4->i8, (int8x8_t)v109, 4uLL), *(float32x2_t *)v105.f32);
        *(int8x8_t *)v112.f32 = vext_s8(v111, (int8x8_t)vmls_f32(vmul_f32(v109, *(float32x2_t *)v105.f32), *(float32x2_t *)a4->i8, v110), 4uLL);
        v112.i64[1] = v111.u32[0];
        v113 = vmlaq_laneq_f32(v108, v112, *(float32x4_t *)a4, 3);
        v113.i64[1] = vextq_s8((int8x16_t)v113, (int8x16_t)v113, 8uLL).u32[0];
        v114 = vmulq_f32(v106, v105);
        v114.i64[0] = vpaddq_f32(v114, v114).u64[0];
        v115 = vmlaq_n_f32(v113, v106, vpadd_f32(*(float32x2_t *)v114.f32, *(float32x2_t *)v114.f32).f32[0]);
        v116 = vaddq_f32(v115, v115);
        v116.i32[3] = 0;
        v117 = vmulq_f32(v116, v116);
        v117.i64[0] = vpaddq_f32(v117, v117).u64[0];
        v118 = vpadd_f32(*(float32x2_t *)v117.f32, *(float32x2_t *)v117.f32);
        v119 = vrsqrte_f32(v118);
        v120 = 4;
        do
        {
          v119 = vmul_f32(v119, vrsqrts_f32(vmul_f32(v119, v119), v118));
          --v120;
        }
        while (v120);
        v121 = vmul_f32(v118, (float32x2_t)vbsl_s8((int8x8_t)vdup_lane_s32(vceqz_f32(v118), 0), _D8, (int8x8_t)v119));
        v122 = vrecpe_f32(v121);
        v123 = 4;
        do
        {
          v122 = vmul_f32(v122, vrecps_f32(v121, v122));
          --v123;
        }
        while (v123);
        v124 = vmulq_n_f32(v116, v122.f32[0]);
        v124.i32[3] = 0;
        v129 = v124;
        goto LABEL_49;
      }
    }
  }
  return v38;
}

uint64_t physx::Gu::gjkPenetration<physx::Gu::RelativeConvex<physx::Gu::ConvexHullNoScaleV>,physx::Gu::LocalConvex<physx::Gu::ConvexHullV>>(float32x4_t *a1, uint64_t a2, _BYTE *a3, _BYTE *a4, _BYTE *a5, float32x4_t *a6, float32x4_t a7, float32x2_t a8, double a9, float32x4_t a10, int8x8_t a11)
{
  _BYTE *v11;
  uint64_t v16;
  const float *v17;
  float32x2_t v18;
  float32x4_t *v19;
  const float *v20;
  float32x2_t v21;
  float32x2_t v22;
  float32x2_t v23;
  float32x2_t v24;
  float32x2_t v25;
  uint64_t v26;
  uint64_t v32;
  float32x4_t *v33;
  uint64_t v34;
  uint64_t v35;
  float32x4_t v36;
  float32x4_t v37;
  unsigned int v38;
  unsigned int v39;
  float32x4_t v40;
  float32x4_t v41;
  float32x4_t v42;
  float32x4_t v43;
  float32x4_t v44;
  float32x4_t v45;
  float32x4_t v46;
  float32x4_t v47;
  float32x4_t v48;
  float32x4_t v49;
  float32x4_t v50;
  float32x4_t v51;
  float32x4_t v52;
  float32x4_t v53;
  float32x2_t v54;
  float32x4_t v55;
  float32x4_t v56;
  float32x2_t v57;
  int v58;
  float32x4_t v59;
  float32x4_t v60;
  float32x2_t v61;
  float32x2_t v62;
  int v63;
  float32x2_t v64;
  float32x2_t v65;
  int v66;
  float32x4_t v67;
  float32x2_t v68;
  int32x4_t v69;
  float32x4_t v70;
  float32x4_t v71;
  float32x4_t v72;
  int8x8_t v73;
  float32x2_t v74;
  float32x2_t v75;
  float32x2_t v76;
  float32x2_t v77;
  float32x2_t v78;
  float32x2_t v79;
  int8x8_t v80;
  float32x4_t v81;
  float32x2_t v82;
  float32x2_t v83;
  int8x8_t v84;
  float32x4_t v85;
  int8x8_t v86;
  float32x4_t v87;
  float32x4_t v88;
  float32x2_t v89;
  float32x4_t v90;
  float32x2_t v91;
  float32x4_t v92;
  float32x2_t v93;
  float32x4_t v94;
  float32x4_t v95;
  float32x4_t v96;
  float32x2_t v97;
  float32x4_t v98;
  float32x2_t v99;
  float32x4_t v100;
  float32x4_t v101;
  float32x2_t v102;
  float32x4_t v103;
  float32x2_t v104;
  float32x4_t v105;
  float32x2_t v106;
  float32x4_t v107;
  int32x4_t v108;
  __int32 v109;
  uint64_t v110;
  uint64_t v111;
  float32x4_t v112;
  float32x2_t v113;
  float32x4_t v114;
  float32x4_t v115;
  float32x2_t v116;
  float32x2_t v117;
  int v118;
  int8x16_t v119;
  float32x2_t v120;
  float32x2_t v121;
  int v122;
  float32x2_t v123;
  float32x2_t v124;
  float32x2_t v125;
  int v126;
  unsigned int v127;
  float32x2_t v128;
  float32x2_t v129;
  float32x2_t v130;
  int v131;
  int8x16_t v132;
  float32x2_t v133;
  float32x2_t v134;
  int v135;
  float32x4_t v136;
  float32x4_t v137;
  float32x4_t v138;
  float32x4_t v139;
  float32x4_t v140;
  int v141;
  int v142;
  int v143;
  int v144;
  float32x4_t v145;
  float32x2_t v146;
  float32x2_t v147;
  int v148;
  float32x2_t v149;
  int v150;
  float32x4_t v151;
  float32x2_t v152;
  int32x4_t v153;
  float32x2_t i;
  float32x4_t v155;
  int32x4_t v156;
  float32x4_t v157;
  float32x4_t v158;
  float32x4_t v159;
  float32x4_t v160;
  float32x4_t v161;
  float32x2_t v162;
  float32x2_t v163;
  uint64_t v164;
  float32x4_t v165;
  float32x4_t v166;
  float32x2_t v167;
  float32x4_t v168;
  float32x4_t v169;
  float32x2_t v170;
  float32x2_t v171;
  int v172;
  float32x4_t v173;
  float32x4_t v174;
  float32x4_t v175;
  int8x8_t v176;
  float32x2_t v177;
  float32x2_t v178;
  float32x2_t v179;
  float32x2_t v180;
  float32x2_t v181;
  float32x2_t v182;
  int8x8_t v183;
  float32x4_t v184;
  float32x2_t v185;
  float32x2_t v186;
  int8x8_t v187;
  float32x4_t v188;
  int8x8_t v189;
  float32x4_t v190;
  float32x4_t v191;
  float32x2_t v192;
  float32x4_t v193;
  float32x2_t v194;
  float32x4_t v195;
  float32x2_t v196;
  float32x4_t v197;
  float32x4_t v198;
  float32x4_t v199;
  float32x2_t v200;
  float32x4_t v201;
  float32x2_t v202;
  float32x4_t v203;
  float32x4_t v204;
  float32x2_t v205;
  float32x4_t v206;
  float32x2_t v207;
  float32x4_t v208;
  float32x2_t v209;
  float32x4_t v210;
  float32x2_t v211;
  __int32 v212;
  uint64_t v213;
  uint64_t v214;
  float32x4_t v215;
  float32x2_t v216;
  float32x4_t v217;
  float32x4_t v218;
  float32x2_t v219;
  float32x2_t v220;
  int v221;
  int8x16_t v222;
  float32x2_t v223;
  float32x2_t v224;
  int v225;
  float32x2_t v226;
  float32x2_t v227;
  float32x2_t v228;
  int v229;
  unsigned int v230;
  float32x2_t v231;
  float32x2_t v232;
  float32x2_t v233;
  int v234;
  int8x16_t v235;
  float32x2_t v236;
  float32x2_t v237;
  int v238;
  float32x4_t v239;
  float32x4_t v240;
  float32x4_t v241;
  float32x4_t v242;
  float32x4_t v243;
  float32x4_t v244;
  int v245;
  int v246;
  int v247;
  int v248;
  float32x4_t v249;
  float32x2_t v250;
  float32x2_t v251;
  int v252;
  float32x2_t v253;
  int v254;
  float32x4_t v255;
  int8x8_t v256;
  uint64_t v257;
  int *v258;
  int *v259;
  int v260;
  int v261;
  uint64_t result;
  uint64_t v263;
  int *v264;
  int *v265;
  int v266;
  int v267;
  int *v268;
  int *v269;
  uint64_t v270;
  int v271;
  int v272;
  float32x4_t *v273;
  int8x16_t v274;
  int8x16_t v275;
  uint64_t v276;
  int *v277;
  int *v278;
  int v279;
  int v280;
  float32x4_t v281;
  float32x4_t v282;
  float32x4_t v283;
  float32x4_t v284;
  float32x4_t v285;
  float32x4_t v286;
  float32x4_t v287;
  float32x2_t v288;
  float32x2_t v289;
  int v290;
  float32x4_t v291;
  float32x4_t v292;
  float32x4_t v293;
  float32x4_t v294;
  float32x4_t v295;
  float32x4_t v296;
  float32x4_t v297;
  float32x4_t v298;
  float32x4_t v299;
  float32x4_t v300;
  float32x2_t v301;
  float32x2_t v302;
  int v303;
  float32x4_t v304;
  float32x4_t v305;
  float32x2_t v306;
  int v307;
  float32x4_t v308;
  int32x4_t v309;
  float32x4_t v312;
  float32x4_t v313;
  float32x4_t v314;
  float32x2_t v315;
  float32x4_t v316;
  float32x4_t v317;
  unsigned int v318;
  float32x4_t v319;
  float32x2_t v320;
  int v321;
  int v322;
  int v323;
  int v324;
  int8x16_t v325;
  float32x4_t v326;
  float32x4_t v327;
  int8x16_t v328;
  float32x4_t v329;
  float32x4_t v330;
  float32x4_t v331;
  float32x4_t v332;
  float32x4_t v333[2];
  uint64_t v334;

  v11 = a4;
  v334 = *MEMORY[0x24BDAC8D0];
  v16 = a1->i64[1];
  v17 = (const float *)(v16 + 20);
  v18 = vld1_dup_f32(v17);
  v19 = *(float32x4_t **)(a2 + 8);
  v20 = &v19[1].f32[1];
  v21 = vld1_dup_f32(v20);
  v22 = vmin_f32(v18, v21);
  v23 = (float32x2_t)vdup_n_s32(0x3DCCCCCDu);
  v24 = vmul_f32(v22, v23);
  v22.i32[0] = *(_DWORD *)(v16 + 16);
  v23.i32[0] = v19[1].i32[0];
  a10.i32[0] = -*(char *)(v16 + 32);
  a11.i32[0] = -v19[2].i8[0];
  v25 = vadd_f32((float32x2_t)vand_s8(*(int8x8_t *)a10.f32, (int8x8_t)v22), (float32x2_t)vand_s8(a11, (int8x8_t)v23));
  v319 = 0uLL;
  v318 = 0;
  v26 = *a5;
  __asm { FMOV            V10.2S, #1.0 }
  if (!*a5)
  {
    v59 = vmulq_f32(a7, a7);
    v59.i64[0] = vpaddq_f32(v59, v59).u64[0];
    v51 = (float32x4_t)vbslq_s8((int8x16_t)vdupq_lane_s32(vcgtz_f32(vpadd_f32(*(float32x2_t *)v59.f32, *(float32x2_t *)v59.f32)), 0), (int8x16_t)a7, (int8x16_t)xmmword_2260E5F10);
    v319 = v51;
    v60 = vmulq_f32(v51, v51);
    v60.i64[0] = vpaddq_f32(v60, v60).u64[0];
    v61 = vpadd_f32(*(float32x2_t *)v60.f32, *(float32x2_t *)v60.f32);
    v62 = vrsqrte_f32(v61);
    v63 = 4;
    do
    {
      v62 = vmul_f32(v62, vrsqrts_f32(vmul_f32(v62, v62), v61));
      --v63;
    }
    while (v63);
    v64 = vmul_f32(v61, (float32x2_t)vbsl_s8((int8x8_t)vdup_lane_s32(vceqz_f32(v61), 0), (int8x8_t)_D10, (int8x8_t)v62));
    v65 = vrecpe_f32(v64);
    v66 = 4;
    do
    {
      *(float32x2_t *)a10.f32 = vrecps_f32(v64, v65);
      v65 = vmul_f32(v65, *(float32x2_t *)a10.f32);
      --v66;
    }
    while (v66);
    v67 = vmulq_n_f32(v51, v65.f32[0]);
    v67.i32[3] = 0;
    v314 = v67;
    v68 = (float32x2_t)vdup_n_s32(0x7F7FFFFFu);
    v69.i64[0] = -1;
    v69.i64[1] = -1;
    v70 = 0uLL;
    goto LABEL_54;
  }
  v32 = 0;
  v33 = (float32x4_t *)a1[1].i64[0];
  v34 = *(_QWORD *)(v16 + 160);
  v35 = v19[10].i64[0];
  v36 = v19[3];
  v37 = v19[4];
  a10 = v19[5];
  do
  {
    v38 = a3[v32];
    *(&v323 + v32) = v38;
    v39 = a4[v32];
    *(&v321 + v32) = v39;
    v40 = *(float32x4_t *)(v34 + 12 * v38);
    v41 = vmulq_n_f32(*v33, v40.f32[0]);
    v41.i32[3] = 0;
    v42 = vmulq_lane_f32(v33[1], *(float32x2_t *)v40.f32, 1);
    v42.i32[3] = 0;
    v43 = vmulq_laneq_f32(v33[2], v40, 2);
    v43.i32[3] = 0;
    v44 = vaddq_f32(vaddq_f32(v41, v42), v43);
    v45 = *(float32x4_t *)(v35 + 12 * v39);
    v46 = vmulq_n_f32(v36, v45.f32[0]);
    v46.i32[3] = 0;
    v47 = vmulq_lane_f32(v37, *(float32x2_t *)v45.f32, 1);
    v47.i32[3] = 0;
    v48 = vmulq_laneq_f32(a10, v45, 2);
    v48.i32[3] = 0;
    v49 = vaddq_f32(v33[3], v44);
    v50 = vaddq_f32(v48, vaddq_f32(v46, v47));
    v51 = vsubq_f32(v49, v50);
    *(&v328 + v32) = (int8x16_t)v49;
    *(&v325 + v32) = (int8x16_t)v50;
    *(&v331 + v32++) = v51;
  }
  while (v26 != v32);
  v318 = v26;
  switch((_DWORD)v32)
  {
    case 4:
      physx::Gu::closestPtPointTetrahedron(&v331, &v328, &v325, &v323, &v321, (int *)&v318);
      goto LABEL_49;
    case 3:
      v318 = 3;
      v51 = v331;
      a10 = vsubq_f32(v332, v331);
      v71 = vsubq_f32(v333[0], v331);
      v73 = (int8x8_t)vmls_f32(vmul_f32(*(float32x2_t *)a10.f32, (float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v71, (int8x16_t)v71, 4uLL)), (float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)a10, (int8x16_t)a10, 4uLL), *(float32x2_t *)v71.f32);
      *(int8x8_t *)v72.f32 = vext_s8(v73, (int8x8_t)vmls_f32(vmul_f32((float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)a10, (int8x16_t)a10, 8uLL), *(float32x2_t *)v71.f32), *(float32x2_t *)a10.f32, (float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v71, (int8x16_t)v71, 8uLL)), 4uLL);
      v73.i32[1] = 0;
      v74 = vpadd_f32(vmul_f32(*(float32x2_t *)v72.f32, *(float32x2_t *)v72.f32), vmul_f32((float32x2_t)v73.u32[0], (float32x2_t)v73.u32[0]));
      v75 = vpadd_f32(v74, v74);
      if (v75.f32[0] > 0.00000011921)
      {
        if (v75.f32[0] == 0.0)
        {
          v51 = 0uLL;
        }
        else
        {
          *(int8x8_t *)&v72.u32[2] = v73;
          v76 = (float32x2_t)vextq_s8((int8x16_t)v332, (int8x16_t)v332, 8uLL).u64[0];
          v77 = (float32x2_t)vextq_s8((int8x16_t)v333[0], (int8x16_t)v333[0], 8uLL).u64[0];
          v78 = (float32x2_t)vextq_s8((int8x16_t)v333[0], (int8x16_t)v333[0], 4uLL).u64[0];
          v79 = (float32x2_t)vextq_s8((int8x16_t)v332, (int8x16_t)v332, 4uLL).u64[0];
          v80 = (int8x8_t)vmls_f32(vmul_f32(*(float32x2_t *)v332.f32, v78), v79, *(float32x2_t *)v333[0].f32);
          *(int8x8_t *)v81.f32 = vext_s8(v80, (int8x8_t)vmls_f32(vmul_f32(v76, *(float32x2_t *)v333[0].f32), *(float32x2_t *)v332.f32, v77), 4uLL);
          v81.i64[1] = v80.u32[0];
          v82 = (float32x2_t)vextq_s8((int8x16_t)v331, (int8x16_t)v331, 8uLL).u64[0];
          v83 = (float32x2_t)vextq_s8((int8x16_t)v331, (int8x16_t)v331, 4uLL).u64[0];
          v84 = (int8x8_t)vmls_f32(vmul_f32(v83, *(float32x2_t *)v333[0].f32), v78, *(float32x2_t *)v331.f32);
          *(int8x8_t *)v85.f32 = vext_s8(v84, (int8x8_t)vmls_f32(vmul_f32(*(float32x2_t *)v331.f32, v77), *(float32x2_t *)v333[0].f32, v82), 4uLL);
          v85.i64[1] = v84.u32[0];
          v86 = (int8x8_t)vmls_f32(vmul_f32(*(float32x2_t *)v331.f32, v79), v83, *(float32x2_t *)v332.f32);
          *(int8x8_t *)v87.f32 = vext_s8(v86, (int8x8_t)vmls_f32(vmul_f32(v82, *(float32x2_t *)v332.f32), *(float32x2_t *)v331.f32, v76), 4uLL);
          v87.i64[1] = v86.u32[0];
          v88 = vmulq_f32(v81, v72);
          v88.i64[0] = vpaddq_f32(v88, v88).u64[0];
          v89 = vpadd_f32(*(float32x2_t *)v88.f32, *(float32x2_t *)v88.f32);
          v90 = vmulq_f32(v85, v72);
          v90.i64[0] = vpaddq_f32(v90, v90).u64[0];
          v91 = vpadd_f32(*(float32x2_t *)v90.f32, *(float32x2_t *)v90.f32);
          v92 = vmulq_f32(v87, v72);
          v92.i64[0] = vpaddq_f32(v92, v92).u64[0];
          v93 = vpadd_f32(*(float32x2_t *)v92.f32, *(float32x2_t *)v92.f32);
          if (vuzp1_s8((int8x8_t)vdup_lane_s16((int16x4_t)vand_s8(vand_s8((int8x8_t)vcgez_f32(v91), (int8x8_t)vcgez_f32(v89)), (int8x8_t)vcgez_f32(v93)), 0), *(int8x8_t *)v331.f32).u32[0] == -1)
          {
            v119 = (int8x16_t)vmulq_f32(v331, v72);
            v120 = (float32x2_t)vextq_s8(v119, v119, 8uLL).u64[0];
            v121 = vrecpe_f32(v75);
            v122 = 4;
            do
            {
              v121 = vmul_f32(v121, vrecps_f32(v75, v121));
              --v122;
            }
            while (v122);
            v123 = vpadd_f32(*(float32x2_t *)v119.i8, v120);
            v51 = vmulq_n_f32(v72, vmul_f32(v121, vpadd_f32(v123, v123)).f32[0]);
            v51.i32[3] = 0;
          }
          else
          {
            v94 = vnegq_f32(v331);
            v94.i32[3] = 0;
            v95 = vnegq_f32(v332);
            v95.i32[3] = 0;
            v96 = vmulq_f32(v94, a10);
            v96.i64[0] = vpaddq_f32(v96, v96).u64[0];
            v97 = vpadd_f32(*(float32x2_t *)v96.f32, *(float32x2_t *)v96.f32);
            v98 = vmulq_f32(a10, v95);
            v98.i64[0] = vpaddq_f32(v98, v98).u64[0];
            v99 = vpadd_f32(*(float32x2_t *)v98.f32, *(float32x2_t *)v98.f32);
            if (vuzp1_s8((int8x8_t)vdup_lane_s16((int16x4_t)vand_s8(vand_s8((int8x8_t)vcgez_f32(v97), (int8x8_t)vclez_f32(v99)), (int8x8_t)vclez_f32(v93)), 0), *(int8x8_t *)v331.f32).u32[0] == -1)
            {
              v124 = vsub_f32(v97, v99);
              v125 = vrecpe_f32(v124);
              v126 = 4;
              do
              {
                v125 = vmul_f32(v125, vrecps_f32(v124, v125));
                --v126;
              }
              while (v126);
              v111 = 0;
              v51 = vmlaq_n_f32(v331, a10, vmul_f32(v97, (float32x2_t)vbsl_s8((int8x8_t)vcgt_f32(vabs_f32(v124), (float32x2_t)0x3400000034000000), (int8x8_t)v125, 0)).f32[0]);
              v51.i64[1] = vextq_s8((int8x16_t)v51, (int8x16_t)v51, 8uLL).u32[0];
              v127 = 2;
              v110 = 1;
            }
            else
            {
              v100 = vnegq_f32(v333[0]);
              v100.i32[3] = 0;
              v101 = vmulq_f32(v95, v71);
              v101.i64[0] = vpaddq_f32(v101, v101).u64[0];
              v102 = vpadd_f32(*(float32x2_t *)v101.f32, *(float32x2_t *)v101.f32);
              v103 = vmulq_f32(a10, v100);
              v103.i64[0] = vpaddq_f32(v103, v103).u64[0];
              v104 = vpadd_f32(*(float32x2_t *)v103.f32, *(float32x2_t *)v103.f32);
              v105 = vmulq_f32(v71, v100);
              v105.i64[0] = vpaddq_f32(v105, v105).u64[0];
              v106 = vpadd_f32(*(float32x2_t *)v105.f32, *(float32x2_t *)v105.f32);
              if (vuzp1_s8((int8x8_t)vdup_lane_s16((int16x4_t)vand_s8(vand_s8((int8x8_t)vcge_f32(v102, v99), (int8x8_t)vcge_f32(v104, v106)), (int8x8_t)vclez_f32(v89)), 0), *(int8x8_t *)v331.f32).u32[0] == -1)
              {
                v128 = vsub_f32(v102, v99);
                v129 = vadd_f32(v128, vsub_f32(v104, v106));
                v130 = vrecpe_f32(v129);
                v131 = 4;
                do
                {
                  v130 = vmul_f32(v130, vrecps_f32(v129, v130));
                  --v131;
                }
                while (v131);
                v132 = (int8x16_t)vmlaq_n_f32(v332, vsubq_f32(v333[0], v332), vmul_f32(v128, (float32x2_t)vbsl_s8((int8x8_t)vcgt_f32(vabs_f32(v129), (float32x2_t)0x3400000034000000), (int8x8_t)v130, 0)).f32[0]);
                v132.i64[1] = vextq_s8(v132, v132, 8uLL).u32[0];
                v127 = 2;
                v111 = 1;
                v110 = 2;
                v51 = (float32x4_t)v132;
              }
              else
              {
                v107 = vmulq_f32(v94, v71);
                v108 = (int32x4_t)vpaddq_f32(v107, v107);
                *(float32x2_t *)v108.i8 = vpadd_f32(*(float32x2_t *)v108.i8, *(float32x2_t *)v108.i8);
                if (vuzp1_s8((int8x8_t)vdup_lane_s16((int16x4_t)vand_s8(vand_s8((int8x8_t)vcgez_f32(*(float32x2_t *)v108.i8), (int8x8_t)vclez_f32(v106)), (int8x8_t)vclez_f32(v91)), 0), *(int8x8_t *)v331.f32).u32[0] == -1)
                {
                  v133 = vsub_f32(*(float32x2_t *)v108.i8, v106);
                  v134 = vrecpe_f32(v133);
                  v135 = 4;
                  do
                  {
                    v134 = vmul_f32(v134, vrecps_f32(v133, v134));
                    --v135;
                  }
                  while (v135);
                  v111 = 0;
                  v51 = vmlaq_n_f32(v331, v71, vmul_f32(*(float32x2_t *)v108.i8, (float32x2_t)vbsl_s8((int8x8_t)vcgt_f32(vabs_f32(v133), (float32x2_t)0x3400000034000000), (int8x8_t)v134, 0)).f32[0]);
                  v51.i64[1] = vextq_s8((int8x16_t)v51, (int8x16_t)v51, 8uLL).u32[0];
                  v110 = 2;
                }
                else if (vuzp1_s8((int8x8_t)vdup_lane_s16((int16x4_t)vand_s8((int8x8_t)vclez_f32(*(float32x2_t *)v108.i8), (int8x8_t)vclez_f32(v97)), 0), *(int8x8_t *)v331.f32).u32[0] == -1)
                {
                  v111 = 0;
                  v110 = 1;
                }
                else
                {
                  *(int32x2_t *)v108.i8 = vcge_f32(v99, v102);
                  *(int16x4_t *)v51.f32 = vdup_lane_s16((int16x4_t)vand_s8(*(int8x8_t *)v108.i8, (int8x8_t)vcgez_f32(v99)), 0);
                  *(int8x8_t *)v51.f32 = vuzp1_s8(*(int8x8_t *)v51.f32, *(int8x8_t *)v51.f32);
                  v108.i32[0] = -1;
                  v109 = v51.i32[0];
                  v51 = (float32x4_t)vbslq_s8((int8x16_t)vdupq_lane_s32((int32x2_t)*(_OWORD *)&vceqq_s32((int32x4_t)v51, v108), 0), (int8x16_t)v332, (int8x16_t)v333[0]);
                  v110 = 1;
                  if (v109 == -1)
                    v111 = 1;
                  else
                    v111 = 2;
                }
                v127 = v110;
              }
            }
            v136 = *(&v331 + v111);
            v137 = *(&v331 + v110);
            a10 = *((float32x4_t *)&v328 + v111);
            v138 = *((float32x4_t *)&v328 + v110);
            v139 = *((float32x4_t *)&v325 + v111);
            v140 = *((float32x4_t *)&v325 + v110);
            v141 = *(&v323 + v111);
            v142 = *(&v323 + v110);
            v143 = *(&v321 + v111);
            v144 = *(&v321 + v110);
            v331 = v136;
            v332 = v137;
            v328 = (int8x16_t)a10;
            v329 = v138;
            v325 = (int8x16_t)v139;
            v326 = v140;
            v323 = v141;
            v324 = v142;
            v321 = v143;
            v322 = v144;
            v318 = v127;
          }
        }
        goto LABEL_49;
      }
      v318 = 2;
      v112 = vmulq_f32(a10, a10);
      v112.i64[0] = vpaddq_f32(v112, v112).u64[0];
      v113 = vpadd_f32(*(float32x2_t *)v112.f32, *(float32x2_t *)v112.f32);
      if (vuzp1_s8((int8x8_t)vdup_lane_s16((int16x4_t)vcge_f32((float32x2_t)0x3400000034000000, v113), 0), *(int8x8_t *)v331.f32).u32[0] != -1)
      {
        v114 = vnegq_f32(v331);
        v114.i32[3] = 0;
        v115 = vmulq_f32(v114, a10);
        v115.i64[0] = vpaddq_f32(v115, v115).u64[0];
        v116 = vpadd_f32(*(float32x2_t *)v115.f32, *(float32x2_t *)v115.f32);
        v117 = vrecpe_f32(v113);
        v118 = 4;
        do
        {
          v117 = vmul_f32(v117, vrecps_f32(v113, v117));
          --v118;
        }
        while (v118);
        v51 = vmlaq_n_f32(v331, a10, vmax_f32(vmin_f32(vmul_f32(v116, v117), _D10), 0).f32[0]);
        goto LABEL_31;
      }
      break;
    case 2:
      v51 = v331;
      v52 = vsubq_f32(v332, v331);
      v53 = vmulq_f32(v52, v52);
      v53.i64[0] = vpaddq_f32(v53, v53).u64[0];
      v54 = vpadd_f32(*(float32x2_t *)v53.f32, *(float32x2_t *)v53.f32);
      if (vuzp1_s8((int8x8_t)vdup_lane_s16((int16x4_t)vcge_f32((float32x2_t)0x3400000034000000, v54), 0), *(int8x8_t *)v331.f32).u32[0] != -1)
      {
        v55 = vnegq_f32(v331);
        v55.i32[3] = 0;
        v56 = vmulq_f32(v55, v52);
        a10 = vpaddq_f32(v56, v56);
        *(float32x2_t *)a10.f32 = vpadd_f32(*(float32x2_t *)a10.f32, *(float32x2_t *)a10.f32);
        v57 = vrecpe_f32(v54);
        v58 = 4;
        do
        {
          v57 = vmul_f32(v57, vrecps_f32(v54, v57));
          --v58;
        }
        while (v58);
        v51 = vmlaq_n_f32(v331, v52, vmax_f32(vmin_f32(vmul_f32(*(float32x2_t *)a10.f32, v57), _D10), 0).f32[0]);
LABEL_31:
        v51.i64[1] = vextq_s8((int8x16_t)v51, (int8x16_t)v51, 8uLL).u32[0];
        goto LABEL_49;
      }
      break;
    default:
      goto LABEL_49;
  }
  v318 = 1;
LABEL_49:
  v319 = v51;
  v145 = vmulq_f32(v51, v51);
  v145.i64[0] = vpaddq_f32(v145, v145).u64[0];
  v146 = vpadd_f32(*(float32x2_t *)v145.f32, *(float32x2_t *)v145.f32);
  v147 = vrsqrte_f32(v146);
  v148 = 4;
  do
  {
    v147 = vmul_f32(v147, vrsqrts_f32(vmul_f32(v147, v147), v146));
    --v148;
  }
  while (v148);
  v68 = vmul_f32(v146, (float32x2_t)vbsl_s8((int8x8_t)vdup_lane_s32(vceqz_f32(v146), 0), (int8x8_t)_D10, (int8x8_t)v147));
  v149 = vrecpe_f32(v68);
  v150 = 4;
  do
  {
    *(float32x2_t *)a10.f32 = vrecps_f32(v68, v149);
    v149 = vmul_f32(v149, *(float32x2_t *)a10.f32);
    --v150;
  }
  while (v150);
  v151 = vmulq_n_f32(v51, v149.f32[0]);
  v151.i32[3] = 0;
  v314 = v151;
  v69 = vdupq_lane_s32(vcgt_f32(v68, v24), 0);
  v70 = v51;
LABEL_54:
  v152 = vadd_f32(v25, a8);
  a10.i32[0] = -1;
  v309 = (int32x4_t)a10;
  v153.i64[0] = -1;
  v153.i64[1] = -1;
  for (i = v68; ; i = v163)
  {
    v155 = v51;
    v156.i64[0] = -1;
    v156.i64[1] = -1;
    *(int16x4_t *)v156.i8 = vmovn_s32(vceqq_s32(v69, v156));
    if (vuzp1_s8(*(int8x8_t *)v156.i8, *(int8x8_t *)v156.i8).u32[0] != -1)
      break;
    v312 = v155;
    v157 = vnegq_f32(v155);
    v157.i32[3] = 0;
    v315 = v68;
    v317 = v157;
    *(double *)v158.i64 = physx::Gu::RelativeConvex<physx::Gu::ConvexHullNoScaleV>::support(a1, (float32x2_t *)&v317, &v323 + v318);
    v313 = v158;
    *(double *)v159.i64 = physx::Gu::LocalConvex<physx::Gu::ConvexHullV>::support(a2, &v319, &v321 + v318);
    v160 = v159;
    v51 = vsubq_f32(v313, v159);
    v161 = vmulq_f32(v314, v51);
    v161.i64[0] = vpaddq_f32(v161, v161).u64[0];
    v162 = vpadd_f32(*(float32x2_t *)v161.f32, *(float32x2_t *)v161.f32);
    if ((vmvn_s8((int8x8_t)vcgt_f32(v162, v152)).u8[0] & 1) == 0)
    {
      if (a3)
      {
        v263 = v318;
        *a5 = v318;
        if ((_DWORD)v263)
        {
          v264 = &v321;
          v265 = &v323;
          do
          {
            v266 = *v265++;
            *a3++ = v266;
            v267 = *v264++;
            *v11++ = v267;
            --v263;
          }
          while (v263);
        }
      }
      return 0;
    }
    v163 = v315;
    v164 = v318;
    if (v162.f32[0] > (float)(0.99977 * v315.f32[0]))
    {
      if (!a3)
        goto LABEL_121;
      *a5 = v318;
      if ((_DWORD)v164)
      {
        v268 = &v321;
        v269 = &v323;
        v270 = v164;
        do
        {
          v271 = *v269++;
          *a3++ = v271;
          v272 = *v268++;
          *v11++ = v272;
          --v270;
        }
        while (v270);
LABEL_121:
        v273 = a6;
        a6[2] = v314;
        switch((_DWORD)v164)
        {
          case 3:
            v317.i64[0] = 0;
            v320 = 0;
            physx::Gu::barycentricCoordinates(&v319, &v331, &v332, v333, (float32x2_t *)&v317, &v320);
            v163 = v315;
            v281 = vmulq_n_f32(vsubq_f32(v329, (float32x4_t)v328), v317.f32[0]);
            v281.i32[3] = 0;
            v282 = vmulq_n_f32(vsubq_f32(v330, (float32x4_t)v328), v320.f32[0]);
            v282.i32[3] = 0;
            v274 = (int8x16_t)vaddq_f32((float32x4_t)v328, vaddq_f32(v281, v282));
            v283 = vmulq_n_f32(vsubq_f32(v326, (float32x4_t)v325), v317.f32[0]);
            v283.i32[3] = 0;
            v284 = vmulq_n_f32(vsubq_f32(v327, (float32x4_t)v325), v320.f32[0]);
            v284.i32[3] = 0;
            v275 = (int8x16_t)vaddq_f32((float32x4_t)v325, vaddq_f32(v283, v284));
            break;
          case 2:
            v285 = vsubq_f32(v331, v319);
            v286 = vsubq_f32(vsubq_f32(v332, v319), v285);
            v287 = vmulq_f32(v286, v286);
            v287.i64[0] = vpaddq_f32(v287, v287).u64[0];
            v288 = vpadd_f32(*(float32x2_t *)v287.f32, *(float32x2_t *)v287.f32);
            v289 = vrecpe_f32(v288);
            v290 = 4;
            do
            {
              v289 = vmul_f32(v289, vrecps_f32(v288, v289));
              --v290;
            }
            while (v290);
            v291 = vnegq_f32(v285);
            v291.i32[3] = 0;
            v292 = vmulq_f32(v291, v286);
            v292.i64[0] = vpaddq_f32(v292, v292).u64[0];
            v291.i32[0] = vmul_f32((float32x2_t)vbsl_s8((int8x8_t)vcgtz_f32(v288), (int8x8_t)v289, 0), vpadd_f32(*(float32x2_t *)v292.f32, *(float32x2_t *)v292.f32)).u32[0];
            v274 = (int8x16_t)vmlaq_n_f32((float32x4_t)v328, vsubq_f32(v329, (float32x4_t)v328), v291.f32[0]);
            v274.i64[1] = vextq_s8(v274, v274, 8uLL).u32[0];
            v275 = (int8x16_t)vmlaq_n_f32((float32x4_t)v325, vsubq_f32(v326, (float32x4_t)v325), v291.f32[0]);
            v275.i64[1] = vextq_s8(v275, v275, 8uLL).u32[0];
            break;
          case 1:
            v274 = v328;
            result = 2;
            v275 = v325;
LABEL_147:
            *v273 = (float32x4_t)v274;
            v273[1] = (float32x4_t)v275;
            *(float32x2_t *)v273[4].f32 = v163;
            return result;
          default:
LABEL_134:
            result = 2;
            v274 = 0uLL;
            v275 = 0uLL;
            goto LABEL_147;
        }
        result = 2;
        goto LABEL_147;
      }
      v273 = a6;
      a6[2] = v314;
      goto LABEL_134;
    }
    *(&v328 + v318) = (int8x16_t)v313;
    *(&v325 + v164) = (int8x16_t)v160;
    v318 = v164 + 1;
    *(&v331 + v164) = v51;
    if ((_DWORD)v164 == 3)
    {
      physx::Gu::closestPtPointTetrahedron(&v331, &v328, &v325, &v323, &v321, (int *)&v318);
      v163 = v315;
LABEL_66:
      v70 = v312;
      goto LABEL_101;
    }
    if ((_DWORD)v164 == 2)
    {
      v51 = v331;
      v173 = vsubq_f32(v332, v331);
      v174 = vsubq_f32(v333[0], v331);
      v176 = (int8x8_t)vmls_f32(vmul_f32(*(float32x2_t *)v173.f32, (float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v174, (int8x16_t)v174, 4uLL)), (float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v173, (int8x16_t)v173, 4uLL), *(float32x2_t *)v174.f32);
      *(int8x8_t *)v175.f32 = vext_s8(v176, (int8x8_t)vmls_f32(vmul_f32((float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v173, (int8x16_t)v173, 8uLL), *(float32x2_t *)v174.f32), *(float32x2_t *)v173.f32, (float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v174, (int8x16_t)v174, 8uLL)), 4uLL);
      v176.i32[1] = 0;
      v318 = 3;
      v177 = vpadd_f32(vmul_f32(*(float32x2_t *)v175.f32, *(float32x2_t *)v175.f32), vmul_f32((float32x2_t)v176.u32[0], (float32x2_t)v176.u32[0]));
      v178 = vpadd_f32(v177, v177);
      if (v178.f32[0] <= 0.00000011921)
      {
        v318 = 2;
        v215 = vmulq_f32(v173, v173);
        v215.i64[0] = vpaddq_f32(v215, v215).u64[0];
        v216 = vpadd_f32(*(float32x2_t *)v215.f32, *(float32x2_t *)v215.f32);
        if (vuzp1_s8((int8x8_t)vdup_lane_s16((int16x4_t)vcge_f32((float32x2_t)0x3400000034000000, v216), 0), *(int8x8_t *)v331.f32).u32[0] != -1)
        {
          v217 = vnegq_f32(v331);
          v217.i32[3] = 0;
          v218 = vmulq_f32(v217, v173);
          v218.i64[0] = vpaddq_f32(v218, v218).u64[0];
          v219 = vpadd_f32(*(float32x2_t *)v218.f32, *(float32x2_t *)v218.f32);
          v220 = vrecpe_f32(v216);
          v221 = 4;
          v70 = v312;
          do
          {
            v220 = vmul_f32(v220, vrecps_f32(v216, v220));
            --v221;
          }
          while (v221);
          v51 = vmlaq_n_f32(v331, v173, vmax_f32(vmin_f32(vmul_f32(v219, v220), _D10), 0).f32[0]);
LABEL_81:
          v51.i64[1] = vextq_s8((int8x16_t)v51, (int8x16_t)v51, 8uLL).u32[0];
          goto LABEL_101;
        }
        v318 = 1;
        goto LABEL_66;
      }
      if (v178.f32[0] == 0.0)
      {
        v51 = 0uLL;
        goto LABEL_66;
      }
      *(int8x8_t *)&v175.u32[2] = v176;
      v179 = (float32x2_t)vextq_s8((int8x16_t)v332, (int8x16_t)v332, 8uLL).u64[0];
      v180 = (float32x2_t)vextq_s8((int8x16_t)v333[0], (int8x16_t)v333[0], 8uLL).u64[0];
      v181 = (float32x2_t)vextq_s8((int8x16_t)v333[0], (int8x16_t)v333[0], 4uLL).u64[0];
      v182 = (float32x2_t)vextq_s8((int8x16_t)v332, (int8x16_t)v332, 4uLL).u64[0];
      v183 = (int8x8_t)vmls_f32(vmul_f32(*(float32x2_t *)v332.f32, v181), v182, *(float32x2_t *)v333[0].f32);
      *(int8x8_t *)v184.f32 = vext_s8(v183, (int8x8_t)vmls_f32(vmul_f32(v179, *(float32x2_t *)v333[0].f32), *(float32x2_t *)v332.f32, v180), 4uLL);
      v184.i64[1] = v183.u32[0];
      v185 = (float32x2_t)vextq_s8((int8x16_t)v331, (int8x16_t)v331, 8uLL).u64[0];
      v186 = (float32x2_t)vextq_s8((int8x16_t)v331, (int8x16_t)v331, 4uLL).u64[0];
      v187 = (int8x8_t)vmls_f32(vmul_f32(v186, *(float32x2_t *)v333[0].f32), v181, *(float32x2_t *)v331.f32);
      *(int8x8_t *)v188.f32 = vext_s8(v187, (int8x8_t)vmls_f32(vmul_f32(*(float32x2_t *)v331.f32, v180), *(float32x2_t *)v333[0].f32, v185), 4uLL);
      v188.i64[1] = v187.u32[0];
      v189 = (int8x8_t)vmls_f32(vmul_f32(*(float32x2_t *)v331.f32, v182), v186, *(float32x2_t *)v332.f32);
      *(int8x8_t *)v190.f32 = vext_s8(v189, (int8x8_t)vmls_f32(vmul_f32(v185, *(float32x2_t *)v332.f32), *(float32x2_t *)v331.f32, v179), 4uLL);
      v190.i64[1] = v189.u32[0];
      v191 = vmulq_f32(v184, v175);
      v191.i64[0] = vpaddq_f32(v191, v191).u64[0];
      v192 = vpadd_f32(*(float32x2_t *)v191.f32, *(float32x2_t *)v191.f32);
      v193 = vmulq_f32(v188, v175);
      v193.i64[0] = vpaddq_f32(v193, v193).u64[0];
      v194 = vpadd_f32(*(float32x2_t *)v193.f32, *(float32x2_t *)v193.f32);
      v195 = vmulq_f32(v190, v175);
      v195.i64[0] = vpaddq_f32(v195, v195).u64[0];
      v196 = vpadd_f32(*(float32x2_t *)v195.f32, *(float32x2_t *)v195.f32);
      if (vuzp1_s8((int8x8_t)vdup_lane_s16((int16x4_t)vand_s8(vand_s8((int8x8_t)vcgez_f32(v194), (int8x8_t)vcgez_f32(v192)), (int8x8_t)vcgez_f32(v196)), 0), *(int8x8_t *)v331.f32).u32[0] != -1)
      {
        v197 = vnegq_f32(v331);
        v197.i32[3] = 0;
        v198 = vnegq_f32(v332);
        v198.i32[3] = 0;
        v199 = vmulq_f32(v197, v173);
        v199.i64[0] = vpaddq_f32(v199, v199).u64[0];
        v200 = vpadd_f32(*(float32x2_t *)v199.f32, *(float32x2_t *)v199.f32);
        v201 = vmulq_f32(v173, v198);
        v201.i64[0] = vpaddq_f32(v201, v201).u64[0];
        v202 = vpadd_f32(*(float32x2_t *)v201.f32, *(float32x2_t *)v201.f32);
        if (vuzp1_s8((int8x8_t)vdup_lane_s16((int16x4_t)vand_s8(vand_s8((int8x8_t)vcgez_f32(v200), (int8x8_t)vclez_f32(v202)), (int8x8_t)vclez_f32(v196)), 0), *(int8x8_t *)v331.f32).u32[0] == -1)
        {
          v227 = vsub_f32(v200, v202);
          v228 = vrecpe_f32(v227);
          v229 = 4;
          do
          {
            v228 = vmul_f32(v228, vrecps_f32(v227, v228));
            --v229;
          }
          while (v229);
          v214 = 0;
          v51 = vmlaq_n_f32(v331, v173, vmul_f32(v200, (float32x2_t)vbsl_s8((int8x8_t)vcgt_f32(vabs_f32(v227), (float32x2_t)0x3400000034000000), (int8x8_t)v228, 0)).f32[0]);
          v51.i64[1] = vextq_s8((int8x16_t)v51, (int8x16_t)v51, 8uLL).u32[0];
          v230 = 2;
          v213 = 1;
        }
        else
        {
          v203 = vnegq_f32(v333[0]);
          v203.i32[3] = 0;
          v204 = vmulq_f32(v198, v174);
          v204.i64[0] = vpaddq_f32(v204, v204).u64[0];
          v205 = vpadd_f32(*(float32x2_t *)v204.f32, *(float32x2_t *)v204.f32);
          v206 = vmulq_f32(v173, v203);
          v206.i64[0] = vpaddq_f32(v206, v206).u64[0];
          v207 = vpadd_f32(*(float32x2_t *)v206.f32, *(float32x2_t *)v206.f32);
          v208 = vmulq_f32(v174, v203);
          v208.i64[0] = vpaddq_f32(v208, v208).u64[0];
          v209 = vpadd_f32(*(float32x2_t *)v208.f32, *(float32x2_t *)v208.f32);
          if (vuzp1_s8((int8x8_t)vdup_lane_s16((int16x4_t)vand_s8(vand_s8((int8x8_t)vcge_f32(v205, v202), (int8x8_t)vcge_f32(v207, v209)), (int8x8_t)vclez_f32(v192)), 0), *(int8x8_t *)v331.f32).u32[0] != -1)
          {
            v210 = vmulq_f32(v197, v174);
            v210.i64[0] = vpaddq_f32(v210, v210).u64[0];
            v211 = vpadd_f32(*(float32x2_t *)v210.f32, *(float32x2_t *)v210.f32);
            if (vuzp1_s8((int8x8_t)vdup_lane_s16((int16x4_t)vand_s8(vand_s8((int8x8_t)vcgez_f32(v211), (int8x8_t)vclez_f32(v209)), (int8x8_t)vclez_f32(v194)), 0), *(int8x8_t *)v331.f32).u32[0] == -1)
            {
              v236 = vsub_f32(v211, v209);
              v237 = vrecpe_f32(v236);
              v238 = 4;
              v70 = v312;
              do
              {
                v237 = vmul_f32(v237, vrecps_f32(v236, v237));
                --v238;
              }
              while (v238);
              v214 = 0;
              v51 = vmlaq_n_f32(v331, v174, vmul_f32(v211, (float32x2_t)vbsl_s8((int8x8_t)vcgt_f32(vabs_f32(v236), (float32x2_t)0x3400000034000000), (int8x8_t)v237, 0)).f32[0]);
              v51.i64[1] = vextq_s8((int8x16_t)v51, (int8x16_t)v51, 8uLL).u32[0];
              v213 = 2;
              v230 = 2;
            }
            else
            {
              v70 = v312;
              if (vuzp1_s8((int8x8_t)vdup_lane_s16((int16x4_t)vand_s8((int8x8_t)vclez_f32(v211), (int8x8_t)vclez_f32(v200)), 0), *(int8x8_t *)v331.f32).u32[0] == -1)
              {
                v214 = 0;
                v213 = 1;
              }
              else
              {
                *(int16x4_t *)v51.f32 = vdup_lane_s16((int16x4_t)vand_s8((int8x8_t)vcge_f32(v202, v205), (int8x8_t)vcgez_f32(v202)), 0);
                *(int8x8_t *)v51.f32 = vuzp1_s8(*(int8x8_t *)v51.f32, *(int8x8_t *)v51.f32);
                v212 = v51.i32[0];
                v51 = (float32x4_t)vbslq_s8((int8x16_t)vdupq_lane_s32((int32x2_t)*(_OWORD *)&vceqq_s32((int32x4_t)v51, v309), 0), (int8x16_t)v332, (int8x16_t)v333[0]);
                v213 = 1;
                if (v212 == -1)
                  v214 = 1;
                else
                  v214 = 2;
              }
              v230 = 1;
            }
            goto LABEL_100;
          }
          v231 = vsub_f32(v205, v202);
          v232 = vadd_f32(v231, vsub_f32(v207, v209));
          v233 = vrecpe_f32(v232);
          v234 = 4;
          do
          {
            v233 = vmul_f32(v233, vrecps_f32(v232, v233));
            --v234;
          }
          while (v234);
          v235 = (int8x16_t)vmlaq_n_f32(v332, vsubq_f32(v333[0], v332), vmul_f32(v231, (float32x2_t)vbsl_s8((int8x8_t)vcgt_f32(vabs_f32(v232), (float32x2_t)0x3400000034000000), (int8x8_t)v233, 0)).f32[0]);
          v235.i64[1] = vextq_s8(v235, v235, 8uLL).u32[0];
          v213 = 2;
          v51 = (float32x4_t)v235;
          v214 = 1;
          v230 = 2;
        }
        v70 = v312;
LABEL_100:
        v239 = *(&v331 + v214);
        v240 = *(&v331 + v213);
        v241 = *((float32x4_t *)&v328 + v214);
        v242 = *((float32x4_t *)&v328 + v213);
        v243 = *((float32x4_t *)&v325 + v214);
        v244 = *((float32x4_t *)&v325 + v213);
        v245 = *(&v323 + v214);
        v246 = *(&v323 + v213);
        v247 = *(&v321 + v214);
        v248 = *(&v321 + v213);
        v331 = v239;
        v332 = v240;
        v328 = (int8x16_t)v241;
        v329 = v242;
        v325 = (int8x16_t)v243;
        v326 = v244;
        v323 = v245;
        v324 = v246;
        v321 = v247;
        v322 = v248;
        v318 = v230;
        goto LABEL_101;
      }
      v222 = (int8x16_t)vmulq_f32(v331, v175);
      v223 = (float32x2_t)vextq_s8(v222, v222, 8uLL).u64[0];
      v224 = vrecpe_f32(v178);
      v225 = 4;
      v70 = v312;
      do
      {
        v224 = vmul_f32(v224, vrecps_f32(v178, v224));
        --v225;
      }
      while (v225);
      v226 = vpadd_f32(*(float32x2_t *)v222.i8, v223);
      v51 = vmulq_n_f32(v175, vmul_f32(v224, vpadd_f32(v226, v226)).f32[0]);
      v51.i32[3] = 0;
    }
    else
    {
      v70 = v312;
      if ((_DWORD)v164 == 1)
      {
        v51 = v331;
        v165 = vsubq_f32(v332, v331);
        v166 = vmulq_f32(v165, v165);
        v166.i64[0] = vpaddq_f32(v166, v166).u64[0];
        v167 = vpadd_f32(*(float32x2_t *)v166.f32, *(float32x2_t *)v166.f32);
        if (vuzp1_s8((int8x8_t)vdup_lane_s16((int16x4_t)vcge_f32((float32x2_t)0x3400000034000000, v167), 0), *(int8x8_t *)v331.f32).u32[0] == -1)
        {
          v318 = 1;
          goto LABEL_101;
        }
        v168 = vnegq_f32(v331);
        v168.i32[3] = 0;
        v169 = vmulq_f32(v168, v165);
        v169.i64[0] = vpaddq_f32(v169, v169).u64[0];
        v170 = vpadd_f32(*(float32x2_t *)v169.f32, *(float32x2_t *)v169.f32);
        v171 = vrecpe_f32(v167);
        v172 = 4;
        do
        {
          v171 = vmul_f32(v171, vrecps_f32(v167, v171));
          --v172;
        }
        while (v172);
        v51 = vmlaq_n_f32(v331, v165, vmax_f32(vmin_f32(vmul_f32(v170, v171), _D10), 0).f32[0]);
        goto LABEL_81;
      }
    }
LABEL_101:
    v319 = v51;
    v249 = vmulq_f32(v51, v51);
    v249.i64[0] = vpaddq_f32(v249, v249).u64[0];
    v250 = vpadd_f32(*(float32x2_t *)v249.f32, *(float32x2_t *)v249.f32);
    v251 = vrsqrte_f32(v250);
    v252 = 4;
    do
    {
      v251 = vmul_f32(v251, vrsqrts_f32(vmul_f32(v251, v251), v250));
      --v252;
    }
    while (v252);
    v68 = vmul_f32(v250, (float32x2_t)vbsl_s8((int8x8_t)vdup_lane_s32(vceqz_f32(v250), 0), (int8x8_t)_D10, (int8x8_t)v251));
    v253 = vrecpe_f32(v68);
    v254 = 4;
    do
    {
      v253 = vmul_f32(v253, vrecps_f32(v68, v253));
      --v254;
    }
    while (v254);
    v255 = vmulq_n_f32(v51, v253.f32[0]);
    v255.i32[3] = 0;
    v314 = v255;
    *(int32x2_t *)v255.f32 = vcgt_f32(v163, v68);
    v153 = vdupq_lane_s32(*(int32x2_t *)v255.f32, 0);
    v69 = vdupq_lane_s32((int32x2_t)vand_s8((int8x8_t)vcgt_f32(v68, v24), *(int8x8_t *)v255.f32), 0);
  }
  v256 = (int8x8_t)vmovn_s32(vceqzq_s32(v153));
  v257 = v318;
  if (vuzp1_s8(v256, v256).u32[0] == -1)
  {
    if (a3)
    {
      v276 = v318 - 1;
      *a5 = v318 - 1;
      if ((_DWORD)v257 == 1)
      {
LABEL_132:
        v274 = v328;
        v275 = v325;
        goto LABEL_144;
      }
      v277 = &v321;
      v278 = &v323;
      do
      {
        v279 = *v278++;
        *a3++ = v279;
        v280 = *v277++;
        *v11++ = v280;
        --v276;
      }
      while (v276);
    }
    v319 = v70;
    if ((_DWORD)v257 == 3)
    {
      v317.i64[0] = 0;
      v320 = 0;
      v316 = v70;
      physx::Gu::barycentricCoordinates(&v319, &v331, &v332, v333, (float32x2_t *)&v317, &v320);
      v293 = vmulq_n_f32(vsubq_f32(v329, (float32x4_t)v328), v317.f32[0]);
      v293.i32[3] = 0;
      v294 = vmulq_n_f32(vsubq_f32(v330, (float32x4_t)v328), v320.f32[0]);
      v294.i32[3] = 0;
      v295 = vaddq_f32(v293, v294);
      v296 = vmulq_n_f32(vsubq_f32(v326, (float32x4_t)v325), v317.f32[0]);
      v296.i32[3] = 0;
      v274 = (int8x16_t)vaddq_f32((float32x4_t)v328, v295);
      v297 = vmulq_n_f32(vsubq_f32(v327, (float32x4_t)v325), v320.f32[0]);
      v70 = v316;
      v297.i32[3] = 0;
      v275 = (int8x16_t)vaddq_f32((float32x4_t)v325, vaddq_f32(v296, v297));
    }
    else
    {
      if ((_DWORD)v257 == 2)
      {
        v298 = vsubq_f32(v331, v70);
        v299 = vsubq_f32(vsubq_f32(v332, v70), v298);
        v300 = vmulq_f32(v299, v299);
        v300.i64[0] = vpaddq_f32(v300, v300).u64[0];
        v301 = vpadd_f32(*(float32x2_t *)v300.f32, *(float32x2_t *)v300.f32);
        v302 = vrecpe_f32(v301);
        v303 = 4;
        do
        {
          v302 = vmul_f32(v302, vrecps_f32(v301, v302));
          --v303;
        }
        while (v303);
        v304 = vnegq_f32(v298);
        v304.i32[3] = 0;
        v305 = vmulq_f32(v304, v299);
        v305.i64[0] = vpaddq_f32(v305, v305).u64[0];
        v304.i32[0] = vmul_f32((float32x2_t)vbsl_s8((int8x8_t)vcgtz_f32(v301), (int8x8_t)v302, 0), vpadd_f32(*(float32x2_t *)v305.f32, *(float32x2_t *)v305.f32)).u32[0];
        v274 = (int8x16_t)vmlaq_n_f32((float32x4_t)v328, vsubq_f32(v329, (float32x4_t)v328), v304.f32[0]);
        v274.i64[1] = vextq_s8(v274, v274, 8uLL).u32[0];
        v275 = (int8x16_t)vmlaq_n_f32((float32x4_t)v325, vsubq_f32(v326, (float32x4_t)v325), v304.f32[0]);
        v275.i64[1] = vextq_s8(v275, v275, 8uLL).u32[0];
        goto LABEL_144;
      }
      v274 = 0uLL;
      v275 = 0uLL;
      if ((_DWORD)v257 == 1)
        goto LABEL_132;
    }
LABEL_144:
    v306 = vrecpe_f32(i);
    v307 = 4;
    do
    {
      v306 = vmul_f32(v306, vrecps_f32(i, v306));
      --v307;
    }
    while (v307);
    v308 = vmulq_n_f32(v70, v306.f32[0]);
    v308.i32[3] = 0;
    v273 = a6;
    a6[2] = v308;
    a6[3] = v314;
    result = 4;
    v163 = i;
    goto LABEL_147;
  }
  if (a3)
  {
    *a5 = v318;
    if ((_DWORD)v257)
    {
      v258 = &v321;
      v259 = &v323;
      do
      {
        v260 = *v259++;
        *a3++ = v260;
        v261 = *v258++;
        *v11++ = v261;
        --v257;
      }
      while (v257);
    }
  }
  return 5;
}

double physx::Gu::RelativeConvex<physx::Gu::ConvexHullNoScaleV>::supportPoint(uint64_t a1, int a2)
{
  float32x4_t v2;
  float32x4_t *v3;
  float32x4_t v4;
  float32x4_t v5;
  float32x4_t v6;
  double result;

  v2 = *(float32x4_t *)(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 160) + 12 * a2);
  v3 = *(float32x4_t **)(a1 + 16);
  v4 = vmulq_n_f32(*v3, v2.f32[0]);
  v4.i32[3] = 0;
  v5 = vmulq_lane_f32(v3[1], *(float32x2_t *)v2.f32, 1);
  v5.i32[3] = 0;
  v6 = vmulq_laneq_f32(v3[2], v2, 2);
  v6.i32[3] = 0;
  *(_QWORD *)&result = vaddq_f32(v3[3], vaddq_f32(vaddq_f32(v4, v5), v6)).u64[0];
  return result;
}

double physx::Gu::RelativeConvex<physx::Gu::ConvexHullNoScaleV>::support(float32x4_t *a1, float32x2_t *a2)
{
  uint64_t v2;
  float32x4_t *v3;
  float32x4_t v4;
  float32x4_t v5;
  float32x4_t v6;
  float32x4_t v7;
  float32x4_t v8;
  float32x4_t v9;
  float32x4_t v10;
  double result;
  float32x4_t v12;

  v2 = a1->i64[1];
  v3 = (float32x4_t *)a1[1].i64[0];
  v4 = vmulq_n_f32(a1[2], COERCE_FLOAT(*(_OWORD *)a2->f32));
  v4.i32[3] = 0;
  v5 = vmulq_lane_f32(a1[3], *a2, 1);
  v5.i32[3] = 0;
  v6 = vmulq_laneq_f32(a1[4], *(float32x4_t *)a2->f32, 2);
  v6.i32[3] = 0;
  v12 = vaddq_f32(vaddq_f32(v4, v5), v6);
  v7 = *(float32x4_t *)(*(_QWORD *)(v2 + 160) + 12
                                              * physx::Gu::ConvexHullV::supportVertexIndex(v2, &v12));
  v8 = vmulq_n_f32(*v3, v7.f32[0]);
  v8.i32[3] = 0;
  v9 = vmulq_lane_f32(v3[1], *(float32x2_t *)v7.f32, 1);
  v9.i32[3] = 0;
  v10 = vmulq_laneq_f32(v3[2], v7, 2);
  v10.i32[3] = 0;
  *(_QWORD *)&result = vaddq_f32(v3[3], vaddq_f32(vaddq_f32(v8, v9), v10)).u64[0];
  return result;
}

double physx::Gu::RelativeConvex<physx::Gu::ConvexHullNoScaleV>::support(float32x4_t *a1, float32x2_t *a2, _DWORD *a3)
{
  uint64_t v4;
  float32x4_t *v5;
  float32x4_t v6;
  float32x4_t v7;
  float32x4_t v8;
  int v9;
  float32x4_t v10;
  float32x4_t v11;
  float32x4_t v12;
  float32x4_t v13;
  double result;
  float32x4_t v15;

  v4 = a1->i64[1];
  v5 = (float32x4_t *)a1[1].i64[0];
  v6 = vmulq_n_f32(a1[2], COERCE_FLOAT(*(_OWORD *)a2->f32));
  v6.i32[3] = 0;
  v7 = vmulq_lane_f32(a1[3], *a2, 1);
  v7.i32[3] = 0;
  v8 = vmulq_laneq_f32(a1[4], *(float32x4_t *)a2->f32, 2);
  v8.i32[3] = 0;
  v15 = vaddq_f32(vaddq_f32(v6, v7), v8);
  v9 = physx::Gu::ConvexHullV::supportVertexIndex(v4, &v15);
  *a3 = v9;
  v10 = *(float32x4_t *)(*(_QWORD *)(v4 + 160) + 12 * v9);
  v11 = vmulq_n_f32(*v5, v10.f32[0]);
  v11.i32[3] = 0;
  v12 = vmulq_lane_f32(v5[1], *(float32x2_t *)v10.f32, 1);
  v12.i32[3] = 0;
  v13 = vmulq_laneq_f32(v5[2], v10, 2);
  v13.i32[3] = 0;
  *(_QWORD *)&result = vaddq_f32(v5[3], vaddq_f32(vaddq_f32(v11, v12), v13)).u64[0];
  return result;
}

float32x2_t physx::Gu::RelativeConvex<physx::Gu::ConvexHullNoScaleV>::getSweepMargin(uint64_t a1)
{
  const float *v1;

  v1 = (const float *)(*(_QWORD *)(a1 + 8) + 24);
  return vld1_dup_f32(v1);
}

double physx::Gu::RelativeConvex<physx::Gu::ConvexHullNoScaleV>::getCenter(uint64_t a1)
{
  float32x4_t *v1;
  float32x2_t *v2;
  float32x4_t v3;
  float32x4_t v4;
  float32x4_t v5;
  double result;

  v2 = *(float32x2_t **)(a1 + 8);
  v1 = *(float32x4_t **)(a1 + 16);
  v3 = vmulq_n_f32(*v1, COERCE_FLOAT(*(_OWORD *)v2->f32));
  v3.i32[3] = 0;
  v4 = vmulq_lane_f32(v1[1], *v2, 1);
  v4.i32[3] = 0;
  v5 = vmulq_laneq_f32(v1[2], *(float32x4_t *)v2->f32, 2);
  v5.i32[3] = 0;
  *(_QWORD *)&result = vaddq_f32(v1[3], vaddq_f32(vaddq_f32(v3, v4), v5)).u64[0];
  return result;
}

void physx::Gu::RelativeConvex<physx::Gu::ConvexHullNoScaleV>::~RelativeConvex()
{
  JUMPOUT(0x2276933B8);
}

uint64_t physx::Gu::gjkPenetration<physx::Gu::RelativeConvex<physx::Gu::ConvexHullV>,physx::Gu::LocalConvex<physx::Gu::ConvexHullNoScaleV>>(float32x4_t *a1, uint64_t a2, _BYTE *a3, _BYTE *a4, _BYTE *a5, float32x4_t *a6, float32x4_t a7, float32x2_t a8, double a9, float32x4_t a10, int8x8_t a11)
{
  _BYTE *v11;
  float32x4_t *v15;
  const float *v16;
  float32x2_t v17;
  uint64_t v18;
  const float *v19;
  float32x2_t v20;
  float32x2_t v21;
  float32x2_t v22;
  float32x2_t v23;
  float32x2_t v24;
  uint64_t v25;
  uint64_t v31;
  float32x4_t *v32;
  uint64_t v33;
  float32x4_t v34;
  float32x4_t v35;
  uint64_t v36;
  unsigned int v37;
  unsigned int v38;
  float32x4_t v39;
  float32x4_t v40;
  float32x4_t v41;
  float32x4_t v42;
  float32x4_t v43;
  float32x4_t v44;
  float32x4_t v45;
  float32x4_t v46;
  float32x4_t v47;
  float32x4_t v48;
  float32x4_t v49;
  float32x4_t v50;
  float32x4_t v51;
  float32x4_t v52;
  float32x2_t v53;
  float32x4_t v54;
  float32x4_t v55;
  float32x2_t v56;
  int v57;
  float32x4_t v58;
  float32x4_t v59;
  float32x2_t v60;
  float32x2_t v61;
  int v62;
  float32x2_t v63;
  float32x2_t v64;
  int v65;
  float32x4_t v66;
  float32x2_t v67;
  int32x4_t v68;
  float32x4_t v69;
  float32x4_t v70;
  float32x4_t v71;
  int8x8_t v72;
  float32x2_t v73;
  float32x2_t v74;
  float32x2_t v75;
  float32x2_t v76;
  float32x2_t v77;
  float32x2_t v78;
  int8x8_t v79;
  float32x4_t v80;
  float32x2_t v81;
  float32x2_t v82;
  int8x8_t v83;
  float32x4_t v84;
  int8x8_t v85;
  float32x4_t v86;
  float32x4_t v87;
  float32x2_t v88;
  float32x4_t v89;
  float32x2_t v90;
  float32x4_t v91;
  float32x2_t v92;
  float32x4_t v93;
  float32x4_t v94;
  float32x4_t v95;
  float32x2_t v96;
  float32x4_t v97;
  float32x2_t v98;
  float32x4_t v99;
  float32x4_t v100;
  float32x2_t v101;
  float32x4_t v102;
  float32x2_t v103;
  float32x4_t v104;
  float32x2_t v105;
  float32x4_t v106;
  int32x4_t v107;
  __int32 v108;
  uint64_t v109;
  uint64_t v110;
  float32x4_t v111;
  float32x2_t v112;
  float32x4_t v113;
  float32x4_t v114;
  float32x2_t v115;
  float32x2_t v116;
  int v117;
  int8x16_t v118;
  float32x2_t v119;
  float32x2_t v120;
  int v121;
  float32x2_t v122;
  float32x2_t v123;
  float32x2_t v124;
  int v125;
  unsigned int v126;
  float32x2_t v127;
  float32x2_t v128;
  float32x2_t v129;
  int v130;
  int8x16_t v131;
  float32x2_t v132;
  float32x2_t v133;
  int v134;
  float32x4_t v135;
  float32x4_t v136;
  float32x4_t v137;
  float32x4_t v138;
  float32x4_t v139;
  int v140;
  int v141;
  int v142;
  int v143;
  float32x4_t v144;
  float32x2_t v145;
  float32x2_t v146;
  int v147;
  float32x2_t v148;
  int v149;
  float32x4_t v150;
  float32x2_t v151;
  int32x4_t v152;
  float32x2_t i;
  float32x4_t v154;
  int32x4_t v155;
  float32x4_t v156;
  float32x4_t v157;
  uint64_t v158;
  uint64_t v159;
  int v160;
  float32x4_t v161;
  float32x4_t v162;
  float32x2_t v163;
  float32x2_t v164;
  uint64_t v165;
  float32x4_t v166;
  float32x4_t v167;
  float32x2_t v168;
  float32x4_t v169;
  float32x4_t v170;
  float32x2_t v171;
  float32x2_t v172;
  int v173;
  float32x4_t v174;
  float32x4_t v175;
  float32x4_t v176;
  int8x8_t v177;
  float32x2_t v178;
  float32x2_t v179;
  float32x2_t v180;
  float32x2_t v181;
  float32x2_t v182;
  float32x2_t v183;
  int8x8_t v184;
  float32x4_t v185;
  float32x2_t v186;
  float32x2_t v187;
  int8x8_t v188;
  float32x4_t v189;
  int8x8_t v190;
  float32x4_t v191;
  float32x4_t v192;
  float32x2_t v193;
  float32x4_t v194;
  float32x2_t v195;
  float32x4_t v196;
  float32x2_t v197;
  float32x4_t v198;
  float32x4_t v199;
  float32x4_t v200;
  float32x2_t v201;
  float32x4_t v202;
  float32x2_t v203;
  float32x4_t v204;
  float32x4_t v205;
  float32x2_t v206;
  float32x4_t v207;
  float32x2_t v208;
  float32x4_t v209;
  float32x2_t v210;
  float32x4_t v211;
  float32x2_t v212;
  __int32 v213;
  uint64_t v214;
  uint64_t v215;
  float32x4_t v216;
  float32x2_t v217;
  float32x4_t v218;
  float32x4_t v219;
  float32x2_t v220;
  float32x2_t v221;
  int v222;
  int8x16_t v223;
  float32x2_t v224;
  float32x2_t v225;
  int v226;
  float32x2_t v227;
  float32x2_t v228;
  float32x2_t v229;
  int v230;
  unsigned int v231;
  float32x2_t v232;
  float32x2_t v233;
  float32x2_t v234;
  int v235;
  int8x16_t v236;
  float32x2_t v237;
  float32x2_t v238;
  int v239;
  float32x4_t v240;
  float32x4_t v241;
  float32x4_t v242;
  float32x4_t v243;
  float32x4_t v244;
  float32x4_t v245;
  int v246;
  int v247;
  int v248;
  int v249;
  float32x4_t v250;
  float32x2_t v251;
  float32x2_t v252;
  int v253;
  float32x2_t v254;
  int v255;
  float32x4_t v256;
  int8x8_t v257;
  uint64_t v258;
  int *v259;
  int *v260;
  int v261;
  int v262;
  uint64_t result;
  uint64_t v264;
  int *v265;
  int *v266;
  int v267;
  int v268;
  int *v269;
  int *v270;
  uint64_t v271;
  int v272;
  int v273;
  float32x4_t *v274;
  int8x16_t v275;
  int8x16_t v276;
  uint64_t v277;
  int *v278;
  int *v279;
  int v280;
  int v281;
  float32x4_t v282;
  float32x4_t v283;
  float32x4_t v284;
  float32x4_t v285;
  float32x4_t v286;
  float32x4_t v287;
  float32x4_t v288;
  float32x2_t v289;
  float32x2_t v290;
  int v291;
  float32x4_t v292;
  float32x4_t v293;
  float32x4_t v294;
  float32x4_t v295;
  float32x4_t v296;
  float32x4_t v297;
  float32x4_t v298;
  float32x4_t v299;
  float32x4_t v300;
  float32x4_t v301;
  float32x2_t v302;
  float32x2_t v303;
  int v304;
  float32x4_t v305;
  float32x4_t v306;
  float32x2_t v307;
  int v308;
  float32x4_t v309;
  int32x4_t v310;
  float32x4_t v314;
  float32x4_t v315;
  float32x4_t v316;
  float32x2_t v317;
  float32x4_t v318;
  float32x4_t v319;
  unsigned int v320;
  float32x4_t v321;
  float32x2_t v322;
  int v323;
  int v324;
  int v325;
  int v326;
  int8x16_t v327;
  float32x4_t v328;
  float32x4_t v329;
  int8x16_t v330;
  float32x4_t v331;
  float32x4_t v332;
  float32x4_t v333;
  float32x4_t v334;
  float32x4_t v335[2];
  uint64_t v336;

  v11 = a4;
  v336 = *MEMORY[0x24BDAC8D0];
  v15 = (float32x4_t *)a1->i64[1];
  v16 = &v15[1].f32[1];
  v17 = vld1_dup_f32(v16);
  v18 = *(_QWORD *)(a2 + 8);
  v19 = (const float *)(v18 + 20);
  v20 = vld1_dup_f32(v19);
  v21 = vmin_f32(v17, v20);
  v22 = (float32x2_t)vdup_n_s32(0x3DCCCCCDu);
  v23 = vmul_f32(v21, v22);
  v21.i32[0] = v15[1].i32[0];
  v22.i32[0] = *(_DWORD *)(v18 + 16);
  a10.i32[0] = -v15[2].i8[0];
  a11.i32[0] = -*(char *)(v18 + 32);
  v24 = vadd_f32((float32x2_t)vand_s8(*(int8x8_t *)a10.f32, (int8x8_t)v21), (float32x2_t)vand_s8(a11, (int8x8_t)v22));
  v321 = 0uLL;
  v320 = 0;
  v25 = *a5;
  __asm { FMOV            V10.2S, #1.0 }
  if (!*a5)
  {
    v58 = vmulq_f32(a7, a7);
    v58.i64[0] = vpaddq_f32(v58, v58).u64[0];
    v50 = (float32x4_t)vbslq_s8((int8x16_t)vdupq_lane_s32(vcgtz_f32(vpadd_f32(*(float32x2_t *)v58.f32, *(float32x2_t *)v58.f32)), 0), (int8x16_t)a7, (int8x16_t)xmmword_2260E5F10);
    v321 = v50;
    v59 = vmulq_f32(v50, v50);
    v59.i64[0] = vpaddq_f32(v59, v59).u64[0];
    v60 = vpadd_f32(*(float32x2_t *)v59.f32, *(float32x2_t *)v59.f32);
    v61 = vrsqrte_f32(v60);
    v62 = 4;
    do
    {
      v61 = vmul_f32(v61, vrsqrts_f32(vmul_f32(v61, v61), v60));
      --v62;
    }
    while (v62);
    v63 = vmul_f32(v60, (float32x2_t)vbsl_s8((int8x8_t)vdup_lane_s32(vceqz_f32(v60), 0), (int8x8_t)_D10, (int8x8_t)v61));
    v64 = vrecpe_f32(v63);
    v65 = 4;
    do
    {
      *(float32x2_t *)a10.f32 = vrecps_f32(v63, v64);
      v64 = vmul_f32(v64, *(float32x2_t *)a10.f32);
      --v65;
    }
    while (v65);
    v66 = vmulq_n_f32(v50, v64.f32[0]);
    v66.i32[3] = 0;
    v316 = v66;
    v67 = (float32x2_t)vdup_n_s32(0x7F7FFFFFu);
    v68.i64[0] = -1;
    v68.i64[1] = -1;
    v69 = 0uLL;
    goto LABEL_54;
  }
  v31 = 0;
  v32 = (float32x4_t *)a1[1].i64[0];
  v33 = v15[10].i64[0];
  v34 = v15[3];
  v35 = v15[4];
  a10 = v15[5];
  v36 = *(_QWORD *)(v18 + 160);
  do
  {
    v37 = a3[v31];
    *(&v325 + v31) = v37;
    v38 = a4[v31];
    *(&v323 + v31) = v38;
    v39 = *(float32x4_t *)(v33 + 12 * v37);
    v40 = vmulq_n_f32(v34, v39.f32[0]);
    v40.i32[3] = 0;
    v41 = vmulq_lane_f32(v35, *(float32x2_t *)v39.f32, 1);
    v41.i32[3] = 0;
    v42 = vmulq_laneq_f32(a10, v39, 2);
    v42.i32[3] = 0;
    v43 = vaddq_f32(v42, vaddq_f32(v40, v41));
    v44 = vmulq_n_f32(*v32, v43.f32[0]);
    v44.i32[3] = 0;
    v45 = vmulq_lane_f32(v32[1], *(float32x2_t *)v43.f32, 1);
    v45.i32[3] = 0;
    v46 = vmulq_laneq_f32(v32[2], v43, 2);
    v46.i32[3] = 0;
    v47 = vaddq_f32(v46, vaddq_f32(v44, v45));
    v48 = *(float32x4_t *)(v36 + 12 * v38);
    v49 = vaddq_f32(v32[3], v47);
    v48.i32[3] = 0;
    v50 = vsubq_f32(v49, v48);
    *(&v330 + v31) = (int8x16_t)v49;
    *(&v327 + v31) = (int8x16_t)v48;
    *(&v333 + v31++) = v50;
  }
  while (v25 != v31);
  v320 = v25;
  switch((_DWORD)v31)
  {
    case 4:
      physx::Gu::closestPtPointTetrahedron(&v333, &v330, &v327, &v325, &v323, (int *)&v320);
      goto LABEL_49;
    case 3:
      v320 = 3;
      v50 = v333;
      a10 = vsubq_f32(v334, v333);
      v70 = vsubq_f32(v335[0], v333);
      v72 = (int8x8_t)vmls_f32(vmul_f32(*(float32x2_t *)a10.f32, (float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v70, (int8x16_t)v70, 4uLL)), (float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)a10, (int8x16_t)a10, 4uLL), *(float32x2_t *)v70.f32);
      *(int8x8_t *)v71.f32 = vext_s8(v72, (int8x8_t)vmls_f32(vmul_f32((float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)a10, (int8x16_t)a10, 8uLL), *(float32x2_t *)v70.f32), *(float32x2_t *)a10.f32, (float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v70, (int8x16_t)v70, 8uLL)), 4uLL);
      v72.i32[1] = 0;
      v73 = vpadd_f32(vmul_f32(*(float32x2_t *)v71.f32, *(float32x2_t *)v71.f32), vmul_f32((float32x2_t)v72.u32[0], (float32x2_t)v72.u32[0]));
      v74 = vpadd_f32(v73, v73);
      if (v74.f32[0] > 0.00000011921)
      {
        if (v74.f32[0] == 0.0)
        {
          v50 = 0uLL;
        }
        else
        {
          *(int8x8_t *)&v71.u32[2] = v72;
          v75 = (float32x2_t)vextq_s8((int8x16_t)v334, (int8x16_t)v334, 8uLL).u64[0];
          v76 = (float32x2_t)vextq_s8((int8x16_t)v335[0], (int8x16_t)v335[0], 8uLL).u64[0];
          v77 = (float32x2_t)vextq_s8((int8x16_t)v335[0], (int8x16_t)v335[0], 4uLL).u64[0];
          v78 = (float32x2_t)vextq_s8((int8x16_t)v334, (int8x16_t)v334, 4uLL).u64[0];
          v79 = (int8x8_t)vmls_f32(vmul_f32(*(float32x2_t *)v334.f32, v77), v78, *(float32x2_t *)v335[0].f32);
          *(int8x8_t *)v80.f32 = vext_s8(v79, (int8x8_t)vmls_f32(vmul_f32(v75, *(float32x2_t *)v335[0].f32), *(float32x2_t *)v334.f32, v76), 4uLL);
          v80.i64[1] = v79.u32[0];
          v81 = (float32x2_t)vextq_s8((int8x16_t)v333, (int8x16_t)v333, 8uLL).u64[0];
          v82 = (float32x2_t)vextq_s8((int8x16_t)v333, (int8x16_t)v333, 4uLL).u64[0];
          v83 = (int8x8_t)vmls_f32(vmul_f32(v82, *(float32x2_t *)v335[0].f32), v77, *(float32x2_t *)v333.f32);
          *(int8x8_t *)v84.f32 = vext_s8(v83, (int8x8_t)vmls_f32(vmul_f32(*(float32x2_t *)v333.f32, v76), *(float32x2_t *)v335[0].f32, v81), 4uLL);
          v84.i64[1] = v83.u32[0];
          v85 = (int8x8_t)vmls_f32(vmul_f32(*(float32x2_t *)v333.f32, v78), v82, *(float32x2_t *)v334.f32);
          *(int8x8_t *)v86.f32 = vext_s8(v85, (int8x8_t)vmls_f32(vmul_f32(v81, *(float32x2_t *)v334.f32), *(float32x2_t *)v333.f32, v75), 4uLL);
          v86.i64[1] = v85.u32[0];
          v87 = vmulq_f32(v80, v71);
          v87.i64[0] = vpaddq_f32(v87, v87).u64[0];
          v88 = vpadd_f32(*(float32x2_t *)v87.f32, *(float32x2_t *)v87.f32);
          v89 = vmulq_f32(v84, v71);
          v89.i64[0] = vpaddq_f32(v89, v89).u64[0];
          v90 = vpadd_f32(*(float32x2_t *)v89.f32, *(float32x2_t *)v89.f32);
          v91 = vmulq_f32(v86, v71);
          v91.i64[0] = vpaddq_f32(v91, v91).u64[0];
          v92 = vpadd_f32(*(float32x2_t *)v91.f32, *(float32x2_t *)v91.f32);
          if (vuzp1_s8((int8x8_t)vdup_lane_s16((int16x4_t)vand_s8(vand_s8((int8x8_t)vcgez_f32(v90), (int8x8_t)vcgez_f32(v88)), (int8x8_t)vcgez_f32(v92)), 0), *(int8x8_t *)v333.f32).u32[0] == -1)
          {
            v118 = (int8x16_t)vmulq_f32(v333, v71);
            v119 = (float32x2_t)vextq_s8(v118, v118, 8uLL).u64[0];
            v120 = vrecpe_f32(v74);
            v121 = 4;
            do
            {
              v120 = vmul_f32(v120, vrecps_f32(v74, v120));
              --v121;
            }
            while (v121);
            v122 = vpadd_f32(*(float32x2_t *)v118.i8, v119);
            v50 = vmulq_n_f32(v71, vmul_f32(v120, vpadd_f32(v122, v122)).f32[0]);
            v50.i32[3] = 0;
          }
          else
          {
            v93 = vnegq_f32(v333);
            v93.i32[3] = 0;
            v94 = vnegq_f32(v334);
            v94.i32[3] = 0;
            v95 = vmulq_f32(v93, a10);
            v95.i64[0] = vpaddq_f32(v95, v95).u64[0];
            v96 = vpadd_f32(*(float32x2_t *)v95.f32, *(float32x2_t *)v95.f32);
            v97 = vmulq_f32(a10, v94);
            v97.i64[0] = vpaddq_f32(v97, v97).u64[0];
            v98 = vpadd_f32(*(float32x2_t *)v97.f32, *(float32x2_t *)v97.f32);
            if (vuzp1_s8((int8x8_t)vdup_lane_s16((int16x4_t)vand_s8(vand_s8((int8x8_t)vcgez_f32(v96), (int8x8_t)vclez_f32(v98)), (int8x8_t)vclez_f32(v92)), 0), *(int8x8_t *)v333.f32).u32[0] == -1)
            {
              v123 = vsub_f32(v96, v98);
              v124 = vrecpe_f32(v123);
              v125 = 4;
              do
              {
                v124 = vmul_f32(v124, vrecps_f32(v123, v124));
                --v125;
              }
              while (v125);
              v110 = 0;
              v50 = vmlaq_n_f32(v333, a10, vmul_f32(v96, (float32x2_t)vbsl_s8((int8x8_t)vcgt_f32(vabs_f32(v123), (float32x2_t)0x3400000034000000), (int8x8_t)v124, 0)).f32[0]);
              v50.i64[1] = vextq_s8((int8x16_t)v50, (int8x16_t)v50, 8uLL).u32[0];
              v126 = 2;
              v109 = 1;
            }
            else
            {
              v99 = vnegq_f32(v335[0]);
              v99.i32[3] = 0;
              v100 = vmulq_f32(v94, v70);
              v100.i64[0] = vpaddq_f32(v100, v100).u64[0];
              v101 = vpadd_f32(*(float32x2_t *)v100.f32, *(float32x2_t *)v100.f32);
              v102 = vmulq_f32(a10, v99);
              v102.i64[0] = vpaddq_f32(v102, v102).u64[0];
              v103 = vpadd_f32(*(float32x2_t *)v102.f32, *(float32x2_t *)v102.f32);
              v104 = vmulq_f32(v70, v99);
              v104.i64[0] = vpaddq_f32(v104, v104).u64[0];
              v105 = vpadd_f32(*(float32x2_t *)v104.f32, *(float32x2_t *)v104.f32);
              if (vuzp1_s8((int8x8_t)vdup_lane_s16((int16x4_t)vand_s8(vand_s8((int8x8_t)vcge_f32(v101, v98), (int8x8_t)vcge_f32(v103, v105)), (int8x8_t)vclez_f32(v88)), 0), *(int8x8_t *)v333.f32).u32[0] == -1)
              {
                v127 = vsub_f32(v101, v98);
                v128 = vadd_f32(v127, vsub_f32(v103, v105));
                v129 = vrecpe_f32(v128);
                v130 = 4;
                do
                {
                  v129 = vmul_f32(v129, vrecps_f32(v128, v129));
                  --v130;
                }
                while (v130);
                v131 = (int8x16_t)vmlaq_n_f32(v334, vsubq_f32(v335[0], v334), vmul_f32(v127, (float32x2_t)vbsl_s8((int8x8_t)vcgt_f32(vabs_f32(v128), (float32x2_t)0x3400000034000000), (int8x8_t)v129, 0)).f32[0]);
                v131.i64[1] = vextq_s8(v131, v131, 8uLL).u32[0];
                v126 = 2;
                v110 = 1;
                v109 = 2;
                v50 = (float32x4_t)v131;
              }
              else
              {
                v106 = vmulq_f32(v93, v70);
                v107 = (int32x4_t)vpaddq_f32(v106, v106);
                *(float32x2_t *)v107.i8 = vpadd_f32(*(float32x2_t *)v107.i8, *(float32x2_t *)v107.i8);
                if (vuzp1_s8((int8x8_t)vdup_lane_s16((int16x4_t)vand_s8(vand_s8((int8x8_t)vcgez_f32(*(float32x2_t *)v107.i8), (int8x8_t)vclez_f32(v105)), (int8x8_t)vclez_f32(v90)), 0), *(int8x8_t *)v333.f32).u32[0] == -1)
                {
                  v132 = vsub_f32(*(float32x2_t *)v107.i8, v105);
                  v133 = vrecpe_f32(v132);
                  v134 = 4;
                  do
                  {
                    v133 = vmul_f32(v133, vrecps_f32(v132, v133));
                    --v134;
                  }
                  while (v134);
                  v110 = 0;
                  v50 = vmlaq_n_f32(v333, v70, vmul_f32(*(float32x2_t *)v107.i8, (float32x2_t)vbsl_s8((int8x8_t)vcgt_f32(vabs_f32(v132), (float32x2_t)0x3400000034000000), (int8x8_t)v133, 0)).f32[0]);
                  v50.i64[1] = vextq_s8((int8x16_t)v50, (int8x16_t)v50, 8uLL).u32[0];
                  v109 = 2;
                }
                else if (vuzp1_s8((int8x8_t)vdup_lane_s16((int16x4_t)vand_s8((int8x8_t)vclez_f32(*(float32x2_t *)v107.i8), (int8x8_t)vclez_f32(v96)), 0), *(int8x8_t *)v333.f32).u32[0] == -1)
                {
                  v110 = 0;
                  v109 = 1;
                }
                else
                {
                  *(int32x2_t *)v107.i8 = vcge_f32(v98, v101);
                  *(int16x4_t *)v50.f32 = vdup_lane_s16((int16x4_t)vand_s8(*(int8x8_t *)v107.i8, (int8x8_t)vcgez_f32(v98)), 0);
                  *(int8x8_t *)v50.f32 = vuzp1_s8(*(int8x8_t *)v50.f32, *(int8x8_t *)v50.f32);
                  v107.i32[0] = -1;
                  v108 = v50.i32[0];
                  v50 = (float32x4_t)vbslq_s8((int8x16_t)vdupq_lane_s32((int32x2_t)*(_OWORD *)&vceqq_s32((int32x4_t)v50, v107), 0), (int8x16_t)v334, (int8x16_t)v335[0]);
                  v109 = 1;
                  if (v108 == -1)
                    v110 = 1;
                  else
                    v110 = 2;
                }
                v126 = v109;
              }
            }
            v135 = *(&v333 + v110);
            v136 = *(&v333 + v109);
            a10 = *((float32x4_t *)&v330 + v110);
            v137 = *((float32x4_t *)&v330 + v109);
            v138 = *((float32x4_t *)&v327 + v110);
            v139 = *((float32x4_t *)&v327 + v109);
            v140 = *(&v325 + v110);
            v141 = *(&v325 + v109);
            v142 = *(&v323 + v110);
            v143 = *(&v323 + v109);
            v333 = v135;
            v334 = v136;
            v330 = (int8x16_t)a10;
            v331 = v137;
            v327 = (int8x16_t)v138;
            v328 = v139;
            v325 = v140;
            v326 = v141;
            v323 = v142;
            v324 = v143;
            v320 = v126;
          }
        }
        goto LABEL_49;
      }
      v320 = 2;
      v111 = vmulq_f32(a10, a10);
      v111.i64[0] = vpaddq_f32(v111, v111).u64[0];
      v112 = vpadd_f32(*(float32x2_t *)v111.f32, *(float32x2_t *)v111.f32);
      if (vuzp1_s8((int8x8_t)vdup_lane_s16((int16x4_t)vcge_f32((float32x2_t)0x3400000034000000, v112), 0), *(int8x8_t *)v333.f32).u32[0] != -1)
      {
        v113 = vnegq_f32(v333);
        v113.i32[3] = 0;
        v114 = vmulq_f32(v113, a10);
        v114.i64[0] = vpaddq_f32(v114, v114).u64[0];
        v115 = vpadd_f32(*(float32x2_t *)v114.f32, *(float32x2_t *)v114.f32);
        v116 = vrecpe_f32(v112);
        v117 = 4;
        do
        {
          v116 = vmul_f32(v116, vrecps_f32(v112, v116));
          --v117;
        }
        while (v117);
        v50 = vmlaq_n_f32(v333, a10, vmax_f32(vmin_f32(vmul_f32(v115, v116), _D10), 0).f32[0]);
        goto LABEL_31;
      }
      break;
    case 2:
      v50 = v333;
      v51 = vsubq_f32(v334, v333);
      v52 = vmulq_f32(v51, v51);
      v52.i64[0] = vpaddq_f32(v52, v52).u64[0];
      v53 = vpadd_f32(*(float32x2_t *)v52.f32, *(float32x2_t *)v52.f32);
      if (vuzp1_s8((int8x8_t)vdup_lane_s16((int16x4_t)vcge_f32((float32x2_t)0x3400000034000000, v53), 0), *(int8x8_t *)v333.f32).u32[0] != -1)
      {
        v54 = vnegq_f32(v333);
        v54.i32[3] = 0;
        v55 = vmulq_f32(v54, v51);
        a10 = vpaddq_f32(v55, v55);
        *(float32x2_t *)a10.f32 = vpadd_f32(*(float32x2_t *)a10.f32, *(float32x2_t *)a10.f32);
        v56 = vrecpe_f32(v53);
        v57 = 4;
        do
        {
          v56 = vmul_f32(v56, vrecps_f32(v53, v56));
          --v57;
        }
        while (v57);
        v50 = vmlaq_n_f32(v333, v51, vmax_f32(vmin_f32(vmul_f32(*(float32x2_t *)a10.f32, v56), _D10), 0).f32[0]);
LABEL_31:
        v50.i64[1] = vextq_s8((int8x16_t)v50, (int8x16_t)v50, 8uLL).u32[0];
        goto LABEL_49;
      }
      break;
    default:
      goto LABEL_49;
  }
  v320 = 1;
LABEL_49:
  v321 = v50;
  v144 = vmulq_f32(v50, v50);
  v144.i64[0] = vpaddq_f32(v144, v144).u64[0];
  v145 = vpadd_f32(*(float32x2_t *)v144.f32, *(float32x2_t *)v144.f32);
  v146 = vrsqrte_f32(v145);
  v147 = 4;
  do
  {
    v146 = vmul_f32(v146, vrsqrts_f32(vmul_f32(v146, v146), v145));
    --v147;
  }
  while (v147);
  v67 = vmul_f32(v145, (float32x2_t)vbsl_s8((int8x8_t)vdup_lane_s32(vceqz_f32(v145), 0), (int8x8_t)_D10, (int8x8_t)v146));
  v148 = vrecpe_f32(v67);
  v149 = 4;
  do
  {
    *(float32x2_t *)a10.f32 = vrecps_f32(v67, v148);
    v148 = vmul_f32(v148, *(float32x2_t *)a10.f32);
    --v149;
  }
  while (v149);
  v150 = vmulq_n_f32(v50, v148.f32[0]);
  v150.i32[3] = 0;
  v316 = v150;
  v68 = vdupq_lane_s32(vcgt_f32(v67, v23), 0);
  v69 = v50;
LABEL_54:
  v151 = vadd_f32(v24, a8);
  a10.i32[0] = -1;
  v310 = (int32x4_t)a10;
  v152.i64[0] = -1;
  v152.i64[1] = -1;
  for (i = v67; ; i = v164)
  {
    v154 = v50;
    v155.i64[0] = -1;
    v155.i64[1] = -1;
    *(int16x4_t *)v155.i8 = vmovn_s32(vceqq_s32(v68, v155));
    if (vuzp1_s8(*(int8x8_t *)v155.i8, *(int8x8_t *)v155.i8).u32[0] != -1)
      break;
    v314 = v154;
    v156 = vnegq_f32(v154);
    v156.i32[3] = 0;
    v317 = v67;
    v319 = v156;
    *(double *)v157.i64 = physx::Gu::RelativeConvex<physx::Gu::ConvexHullV>::support(a1, (float32x2_t *)&v319, &v325 + v320);
    v315 = v157;
    v158 = v320;
    v159 = *(_QWORD *)(a2 + 8);
    v160 = physx::Gu::ConvexHullV::supportVertexIndex(v159, &v321);
    *(&v323 + v158) = v160;
    v161 = *(float32x4_t *)(*(_QWORD *)(v159 + 160) + 12 * v160);
    v161.i32[3] = 0;
    v50 = vsubq_f32(v315, v161);
    v162 = vmulq_f32(v316, v50);
    v162.i64[0] = vpaddq_f32(v162, v162).u64[0];
    v163 = vpadd_f32(*(float32x2_t *)v162.f32, *(float32x2_t *)v162.f32);
    if ((vmvn_s8((int8x8_t)vcgt_f32(v163, v151)).u8[0] & 1) == 0)
    {
      if (a3)
      {
        v264 = v320;
        *a5 = v320;
        if ((_DWORD)v264)
        {
          v265 = &v323;
          v266 = &v325;
          do
          {
            v267 = *v266++;
            *a3++ = v267;
            v268 = *v265++;
            *v11++ = v268;
            --v264;
          }
          while (v264);
        }
      }
      return 0;
    }
    v164 = v317;
    v165 = v320;
    if (v163.f32[0] > (float)(0.99977 * v317.f32[0]))
    {
      if (!a3)
        goto LABEL_121;
      *a5 = v320;
      if ((_DWORD)v165)
      {
        v269 = &v323;
        v270 = &v325;
        v271 = v165;
        do
        {
          v272 = *v270++;
          *a3++ = v272;
          v273 = *v269++;
          *v11++ = v273;
          --v271;
        }
        while (v271);
LABEL_121:
        v274 = a6;
        a6[2] = v316;
        switch((_DWORD)v165)
        {
          case 3:
            v319.i64[0] = 0;
            v322 = 0;
            physx::Gu::barycentricCoordinates(&v321, &v333, &v334, v335, (float32x2_t *)&v319, &v322);
            v164 = v317;
            v282 = vmulq_n_f32(vsubq_f32(v331, (float32x4_t)v330), v319.f32[0]);
            v282.i32[3] = 0;
            v283 = vmulq_n_f32(vsubq_f32(v332, (float32x4_t)v330), v322.f32[0]);
            v283.i32[3] = 0;
            v275 = (int8x16_t)vaddq_f32((float32x4_t)v330, vaddq_f32(v282, v283));
            v284 = vmulq_n_f32(vsubq_f32(v328, (float32x4_t)v327), v319.f32[0]);
            v284.i32[3] = 0;
            v285 = vmulq_n_f32(vsubq_f32(v329, (float32x4_t)v327), v322.f32[0]);
            v285.i32[3] = 0;
            v276 = (int8x16_t)vaddq_f32((float32x4_t)v327, vaddq_f32(v284, v285));
            break;
          case 2:
            v286 = vsubq_f32(v333, v321);
            v287 = vsubq_f32(vsubq_f32(v334, v321), v286);
            v288 = vmulq_f32(v287, v287);
            v288.i64[0] = vpaddq_f32(v288, v288).u64[0];
            v289 = vpadd_f32(*(float32x2_t *)v288.f32, *(float32x2_t *)v288.f32);
            v290 = vrecpe_f32(v289);
            v291 = 4;
            do
            {
              v290 = vmul_f32(v290, vrecps_f32(v289, v290));
              --v291;
            }
            while (v291);
            v292 = vnegq_f32(v286);
            v292.i32[3] = 0;
            v293 = vmulq_f32(v292, v287);
            v293.i64[0] = vpaddq_f32(v293, v293).u64[0];
            v292.i32[0] = vmul_f32((float32x2_t)vbsl_s8((int8x8_t)vcgtz_f32(v289), (int8x8_t)v290, 0), vpadd_f32(*(float32x2_t *)v293.f32, *(float32x2_t *)v293.f32)).u32[0];
            v275 = (int8x16_t)vmlaq_n_f32((float32x4_t)v330, vsubq_f32(v331, (float32x4_t)v330), v292.f32[0]);
            v275.i64[1] = vextq_s8(v275, v275, 8uLL).u32[0];
            v276 = (int8x16_t)vmlaq_n_f32((float32x4_t)v327, vsubq_f32(v328, (float32x4_t)v327), v292.f32[0]);
            v276.i64[1] = vextq_s8(v276, v276, 8uLL).u32[0];
            break;
          case 1:
            v275 = v330;
            result = 2;
            v276 = v327;
LABEL_147:
            *v274 = (float32x4_t)v275;
            v274[1] = (float32x4_t)v276;
            *(float32x2_t *)v274[4].f32 = v164;
            return result;
          default:
LABEL_134:
            result = 2;
            v275 = 0uLL;
            v276 = 0uLL;
            goto LABEL_147;
        }
        result = 2;
        goto LABEL_147;
      }
      v274 = a6;
      a6[2] = v316;
      goto LABEL_134;
    }
    *(&v330 + v320) = (int8x16_t)v315;
    *(&v327 + v165) = (int8x16_t)v161;
    v320 = v165 + 1;
    *(&v333 + v165) = v50;
    if ((_DWORD)v165 == 3)
    {
      physx::Gu::closestPtPointTetrahedron(&v333, &v330, &v327, &v325, &v323, (int *)&v320);
      v164 = v317;
LABEL_66:
      v69 = v314;
      goto LABEL_101;
    }
    if ((_DWORD)v165 == 2)
    {
      v50 = v333;
      v174 = vsubq_f32(v334, v333);
      v175 = vsubq_f32(v335[0], v333);
      v177 = (int8x8_t)vmls_f32(vmul_f32(*(float32x2_t *)v174.f32, (float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v175, (int8x16_t)v175, 4uLL)), (float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v174, (int8x16_t)v174, 4uLL), *(float32x2_t *)v175.f32);
      *(int8x8_t *)v176.f32 = vext_s8(v177, (int8x8_t)vmls_f32(vmul_f32((float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v174, (int8x16_t)v174, 8uLL), *(float32x2_t *)v175.f32), *(float32x2_t *)v174.f32, (float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v175, (int8x16_t)v175, 8uLL)), 4uLL);
      v177.i32[1] = 0;
      v320 = 3;
      v178 = vpadd_f32(vmul_f32(*(float32x2_t *)v176.f32, *(float32x2_t *)v176.f32), vmul_f32((float32x2_t)v177.u32[0], (float32x2_t)v177.u32[0]));
      v179 = vpadd_f32(v178, v178);
      if (v179.f32[0] <= 0.00000011921)
      {
        v320 = 2;
        v216 = vmulq_f32(v174, v174);
        v216.i64[0] = vpaddq_f32(v216, v216).u64[0];
        v217 = vpadd_f32(*(float32x2_t *)v216.f32, *(float32x2_t *)v216.f32);
        if (vuzp1_s8((int8x8_t)vdup_lane_s16((int16x4_t)vcge_f32((float32x2_t)0x3400000034000000, v217), 0), *(int8x8_t *)v333.f32).u32[0] != -1)
        {
          v218 = vnegq_f32(v333);
          v218.i32[3] = 0;
          v219 = vmulq_f32(v218, v174);
          v219.i64[0] = vpaddq_f32(v219, v219).u64[0];
          v220 = vpadd_f32(*(float32x2_t *)v219.f32, *(float32x2_t *)v219.f32);
          v221 = vrecpe_f32(v217);
          v222 = 4;
          v69 = v314;
          do
          {
            v221 = vmul_f32(v221, vrecps_f32(v217, v221));
            --v222;
          }
          while (v222);
          v50 = vmlaq_n_f32(v333, v174, vmax_f32(vmin_f32(vmul_f32(v220, v221), _D10), 0).f32[0]);
LABEL_81:
          v50.i64[1] = vextq_s8((int8x16_t)v50, (int8x16_t)v50, 8uLL).u32[0];
          goto LABEL_101;
        }
        v320 = 1;
        goto LABEL_66;
      }
      if (v179.f32[0] == 0.0)
      {
        v50 = 0uLL;
        goto LABEL_66;
      }
      *(int8x8_t *)&v176.u32[2] = v177;
      v180 = (float32x2_t)vextq_s8((int8x16_t)v334, (int8x16_t)v334, 8uLL).u64[0];
      v181 = (float32x2_t)vextq_s8((int8x16_t)v335[0], (int8x16_t)v335[0], 8uLL).u64[0];
      v182 = (float32x2_t)vextq_s8((int8x16_t)v335[0], (int8x16_t)v335[0], 4uLL).u64[0];
      v183 = (float32x2_t)vextq_s8((int8x16_t)v334, (int8x16_t)v334, 4uLL).u64[0];
      v184 = (int8x8_t)vmls_f32(vmul_f32(*(float32x2_t *)v334.f32, v182), v183, *(float32x2_t *)v335[0].f32);
      *(int8x8_t *)v185.f32 = vext_s8(v184, (int8x8_t)vmls_f32(vmul_f32(v180, *(float32x2_t *)v335[0].f32), *(float32x2_t *)v334.f32, v181), 4uLL);
      v185.i64[1] = v184.u32[0];
      v186 = (float32x2_t)vextq_s8((int8x16_t)v333, (int8x16_t)v333, 8uLL).u64[0];
      v187 = (float32x2_t)vextq_s8((int8x16_t)v333, (int8x16_t)v333, 4uLL).u64[0];
      v188 = (int8x8_t)vmls_f32(vmul_f32(v187, *(float32x2_t *)v335[0].f32), v182, *(float32x2_t *)v333.f32);
      *(int8x8_t *)v189.f32 = vext_s8(v188, (int8x8_t)vmls_f32(vmul_f32(*(float32x2_t *)v333.f32, v181), *(float32x2_t *)v335[0].f32, v186), 4uLL);
      v189.i64[1] = v188.u32[0];
      v190 = (int8x8_t)vmls_f32(vmul_f32(*(float32x2_t *)v333.f32, v183), v187, *(float32x2_t *)v334.f32);
      *(int8x8_t *)v191.f32 = vext_s8(v190, (int8x8_t)vmls_f32(vmul_f32(v186, *(float32x2_t *)v334.f32), *(float32x2_t *)v333.f32, v180), 4uLL);
      v191.i64[1] = v190.u32[0];
      v192 = vmulq_f32(v185, v176);
      v192.i64[0] = vpaddq_f32(v192, v192).u64[0];
      v193 = vpadd_f32(*(float32x2_t *)v192.f32, *(float32x2_t *)v192.f32);
      v194 = vmulq_f32(v189, v176);
      v194.i64[0] = vpaddq_f32(v194, v194).u64[0];
      v195 = vpadd_f32(*(float32x2_t *)v194.f32, *(float32x2_t *)v194.f32);
      v196 = vmulq_f32(v191, v176);
      v196.i64[0] = vpaddq_f32(v196, v196).u64[0];
      v197 = vpadd_f32(*(float32x2_t *)v196.f32, *(float32x2_t *)v196.f32);
      if (vuzp1_s8((int8x8_t)vdup_lane_s16((int16x4_t)vand_s8(vand_s8((int8x8_t)vcgez_f32(v195), (int8x8_t)vcgez_f32(v193)), (int8x8_t)vcgez_f32(v197)), 0), *(int8x8_t *)v333.f32).u32[0] != -1)
      {
        v198 = vnegq_f32(v333);
        v198.i32[3] = 0;
        v199 = vnegq_f32(v334);
        v199.i32[3] = 0;
        v200 = vmulq_f32(v198, v174);
        v200.i64[0] = vpaddq_f32(v200, v200).u64[0];
        v201 = vpadd_f32(*(float32x2_t *)v200.f32, *(float32x2_t *)v200.f32);
        v202 = vmulq_f32(v174, v199);
        v202.i64[0] = vpaddq_f32(v202, v202).u64[0];
        v203 = vpadd_f32(*(float32x2_t *)v202.f32, *(float32x2_t *)v202.f32);
        if (vuzp1_s8((int8x8_t)vdup_lane_s16((int16x4_t)vand_s8(vand_s8((int8x8_t)vcgez_f32(v201), (int8x8_t)vclez_f32(v203)), (int8x8_t)vclez_f32(v197)), 0), *(int8x8_t *)v333.f32).u32[0] == -1)
        {
          v228 = vsub_f32(v201, v203);
          v229 = vrecpe_f32(v228);
          v230 = 4;
          do
          {
            v229 = vmul_f32(v229, vrecps_f32(v228, v229));
            --v230;
          }
          while (v230);
          v215 = 0;
          v50 = vmlaq_n_f32(v333, v174, vmul_f32(v201, (float32x2_t)vbsl_s8((int8x8_t)vcgt_f32(vabs_f32(v228), (float32x2_t)0x3400000034000000), (int8x8_t)v229, 0)).f32[0]);
          v50.i64[1] = vextq_s8((int8x16_t)v50, (int8x16_t)v50, 8uLL).u32[0];
          v231 = 2;
          v214 = 1;
        }
        else
        {
          v204 = vnegq_f32(v335[0]);
          v204.i32[3] = 0;
          v205 = vmulq_f32(v199, v175);
          v205.i64[0] = vpaddq_f32(v205, v205).u64[0];
          v206 = vpadd_f32(*(float32x2_t *)v205.f32, *(float32x2_t *)v205.f32);
          v207 = vmulq_f32(v174, v204);
          v207.i64[0] = vpaddq_f32(v207, v207).u64[0];
          v208 = vpadd_f32(*(float32x2_t *)v207.f32, *(float32x2_t *)v207.f32);
          v209 = vmulq_f32(v175, v204);
          v209.i64[0] = vpaddq_f32(v209, v209).u64[0];
          v210 = vpadd_f32(*(float32x2_t *)v209.f32, *(float32x2_t *)v209.f32);
          if (vuzp1_s8((int8x8_t)vdup_lane_s16((int16x4_t)vand_s8(vand_s8((int8x8_t)vcge_f32(v206, v203), (int8x8_t)vcge_f32(v208, v210)), (int8x8_t)vclez_f32(v193)), 0), *(int8x8_t *)v333.f32).u32[0] != -1)
          {
            v211 = vmulq_f32(v198, v175);
            v211.i64[0] = vpaddq_f32(v211, v211).u64[0];
            v212 = vpadd_f32(*(float32x2_t *)v211.f32, *(float32x2_t *)v211.f32);
            if (vuzp1_s8((int8x8_t)vdup_lane_s16((int16x4_t)vand_s8(vand_s8((int8x8_t)vcgez_f32(v212), (int8x8_t)vclez_f32(v210)), (int8x8_t)vclez_f32(v195)), 0), *(int8x8_t *)v333.f32).u32[0] == -1)
            {
              v237 = vsub_f32(v212, v210);
              v238 = vrecpe_f32(v237);
              v239 = 4;
              v69 = v314;
              do
              {
                v238 = vmul_f32(v238, vrecps_f32(v237, v238));
                --v239;
              }
              while (v239);
              v215 = 0;
              v50 = vmlaq_n_f32(v333, v175, vmul_f32(v212, (float32x2_t)vbsl_s8((int8x8_t)vcgt_f32(vabs_f32(v237), (float32x2_t)0x3400000034000000), (int8x8_t)v238, 0)).f32[0]);
              v50.i64[1] = vextq_s8((int8x16_t)v50, (int8x16_t)v50, 8uLL).u32[0];
              v214 = 2;
              v231 = 2;
            }
            else
            {
              v69 = v314;
              if (vuzp1_s8((int8x8_t)vdup_lane_s16((int16x4_t)vand_s8((int8x8_t)vclez_f32(v212), (int8x8_t)vclez_f32(v201)), 0), *(int8x8_t *)v333.f32).u32[0] == -1)
              {
                v215 = 0;
                v214 = 1;
              }
              else
              {
                *(int16x4_t *)v50.f32 = vdup_lane_s16((int16x4_t)vand_s8((int8x8_t)vcge_f32(v203, v206), (int8x8_t)vcgez_f32(v203)), 0);
                *(int8x8_t *)v50.f32 = vuzp1_s8(*(int8x8_t *)v50.f32, *(int8x8_t *)v50.f32);
                v213 = v50.i32[0];
                v50 = (float32x4_t)vbslq_s8((int8x16_t)vdupq_lane_s32((int32x2_t)*(_OWORD *)&vceqq_s32((int32x4_t)v50, v310), 0), (int8x16_t)v334, (int8x16_t)v335[0]);
                v214 = 1;
                if (v213 == -1)
                  v215 = 1;
                else
                  v215 = 2;
              }
              v231 = 1;
            }
            goto LABEL_100;
          }
          v232 = vsub_f32(v206, v203);
          v233 = vadd_f32(v232, vsub_f32(v208, v210));
          v234 = vrecpe_f32(v233);
          v235 = 4;
          do
          {
            v234 = vmul_f32(v234, vrecps_f32(v233, v234));
            --v235;
          }
          while (v235);
          v236 = (int8x16_t)vmlaq_n_f32(v334, vsubq_f32(v335[0], v334), vmul_f32(v232, (float32x2_t)vbsl_s8((int8x8_t)vcgt_f32(vabs_f32(v233), (float32x2_t)0x3400000034000000), (int8x8_t)v234, 0)).f32[0]);
          v236.i64[1] = vextq_s8(v236, v236, 8uLL).u32[0];
          v214 = 2;
          v50 = (float32x4_t)v236;
          v215 = 1;
          v231 = 2;
        }
        v69 = v314;
LABEL_100:
        v240 = *(&v333 + v215);
        v241 = *(&v333 + v214);
        v242 = *((float32x4_t *)&v330 + v215);
        v243 = *((float32x4_t *)&v330 + v214);
        v244 = *((float32x4_t *)&v327 + v215);
        v245 = *((float32x4_t *)&v327 + v214);
        v246 = *(&v325 + v215);
        v247 = *(&v325 + v214);
        v248 = *(&v323 + v215);
        v249 = *(&v323 + v214);
        v333 = v240;
        v334 = v241;
        v330 = (int8x16_t)v242;
        v331 = v243;
        v327 = (int8x16_t)v244;
        v328 = v245;
        v325 = v246;
        v326 = v247;
        v323 = v248;
        v324 = v249;
        v320 = v231;
        goto LABEL_101;
      }
      v223 = (int8x16_t)vmulq_f32(v333, v176);
      v224 = (float32x2_t)vextq_s8(v223, v223, 8uLL).u64[0];
      v225 = vrecpe_f32(v179);
      v226 = 4;
      v69 = v314;
      do
      {
        v225 = vmul_f32(v225, vrecps_f32(v179, v225));
        --v226;
      }
      while (v226);
      v227 = vpadd_f32(*(float32x2_t *)v223.i8, v224);
      v50 = vmulq_n_f32(v176, vmul_f32(v225, vpadd_f32(v227, v227)).f32[0]);
      v50.i32[3] = 0;
    }
    else
    {
      v69 = v314;
      if ((_DWORD)v165 == 1)
      {
        v50 = v333;
        v166 = vsubq_f32(v334, v333);
        v167 = vmulq_f32(v166, v166);
        v167.i64[0] = vpaddq_f32(v167, v167).u64[0];
        v168 = vpadd_f32(*(float32x2_t *)v167.f32, *(float32x2_t *)v167.f32);
        if (vuzp1_s8((int8x8_t)vdup_lane_s16((int16x4_t)vcge_f32((float32x2_t)0x3400000034000000, v168), 0), *(int8x8_t *)v333.f32).u32[0] == -1)
        {
          v320 = 1;
          goto LABEL_101;
        }
        v169 = vnegq_f32(v333);
        v169.i32[3] = 0;
        v170 = vmulq_f32(v169, v166);
        v170.i64[0] = vpaddq_f32(v170, v170).u64[0];
        v171 = vpadd_f32(*(float32x2_t *)v170.f32, *(float32x2_t *)v170.f32);
        v172 = vrecpe_f32(v168);
        v173 = 4;
        do
        {
          v172 = vmul_f32(v172, vrecps_f32(v168, v172));
          --v173;
        }
        while (v173);
        v50 = vmlaq_n_f32(v333, v166, vmax_f32(vmin_f32(vmul_f32(v171, v172), _D10), 0).f32[0]);
        goto LABEL_81;
      }
    }
LABEL_101:
    v321 = v50;
    v250 = vmulq_f32(v50, v50);
    v250.i64[0] = vpaddq_f32(v250, v250).u64[0];
    v251 = vpadd_f32(*(float32x2_t *)v250.f32, *(float32x2_t *)v250.f32);
    v252 = vrsqrte_f32(v251);
    v253 = 4;
    do
    {
      v252 = vmul_f32(v252, vrsqrts_f32(vmul_f32(v252, v252), v251));
      --v253;
    }
    while (v253);
    v67 = vmul_f32(v251, (float32x2_t)vbsl_s8((int8x8_t)vdup_lane_s32(vceqz_f32(v251), 0), (int8x8_t)_D10, (int8x8_t)v252));
    v254 = vrecpe_f32(v67);
    v255 = 4;
    do
    {
      v254 = vmul_f32(v254, vrecps_f32(v67, v254));
      --v255;
    }
    while (v255);
    v256 = vmulq_n_f32(v50, v254.f32[0]);
    v256.i32[3] = 0;
    v316 = v256;
    *(int32x2_t *)v256.f32 = vcgt_f32(v164, v67);
    v152 = vdupq_lane_s32(*(int32x2_t *)v256.f32, 0);
    v68 = vdupq_lane_s32((int32x2_t)vand_s8((int8x8_t)vcgt_f32(v67, v23), *(int8x8_t *)v256.f32), 0);
  }
  v257 = (int8x8_t)vmovn_s32(vceqzq_s32(v152));
  v258 = v320;
  if (vuzp1_s8(v257, v257).u32[0] == -1)
  {
    if (a3)
    {
      v277 = v320 - 1;
      *a5 = v320 - 1;
      if ((_DWORD)v258 == 1)
      {
LABEL_132:
        v275 = v330;
        v276 = v327;
        goto LABEL_144;
      }
      v278 = &v323;
      v279 = &v325;
      do
      {
        v280 = *v279++;
        *a3++ = v280;
        v281 = *v278++;
        *v11++ = v281;
        --v277;
      }
      while (v277);
    }
    v321 = v69;
    if ((_DWORD)v258 == 3)
    {
      v319.i64[0] = 0;
      v322 = 0;
      v318 = v69;
      physx::Gu::barycentricCoordinates(&v321, &v333, &v334, v335, (float32x2_t *)&v319, &v322);
      v294 = vmulq_n_f32(vsubq_f32(v331, (float32x4_t)v330), v319.f32[0]);
      v294.i32[3] = 0;
      v295 = vmulq_n_f32(vsubq_f32(v332, (float32x4_t)v330), v322.f32[0]);
      v295.i32[3] = 0;
      v296 = vaddq_f32(v294, v295);
      v297 = vmulq_n_f32(vsubq_f32(v328, (float32x4_t)v327), v319.f32[0]);
      v297.i32[3] = 0;
      v275 = (int8x16_t)vaddq_f32((float32x4_t)v330, v296);
      v298 = vmulq_n_f32(vsubq_f32(v329, (float32x4_t)v327), v322.f32[0]);
      v69 = v318;
      v298.i32[3] = 0;
      v276 = (int8x16_t)vaddq_f32((float32x4_t)v327, vaddq_f32(v297, v298));
    }
    else
    {
      if ((_DWORD)v258 == 2)
      {
        v299 = vsubq_f32(v333, v69);
        v300 = vsubq_f32(vsubq_f32(v334, v69), v299);
        v301 = vmulq_f32(v300, v300);
        v301.i64[0] = vpaddq_f32(v301, v301).u64[0];
        v302 = vpadd_f32(*(float32x2_t *)v301.f32, *(float32x2_t *)v301.f32);
        v303 = vrecpe_f32(v302);
        v304 = 4;
        do
        {
          v303 = vmul_f32(v303, vrecps_f32(v302, v303));
          --v304;
        }
        while (v304);
        v305 = vnegq_f32(v299);
        v305.i32[3] = 0;
        v306 = vmulq_f32(v305, v300);
        v306.i64[0] = vpaddq_f32(v306, v306).u64[0];
        v305.i32[0] = vmul_f32((float32x2_t)vbsl_s8((int8x8_t)vcgtz_f32(v302), (int8x8_t)v303, 0), vpadd_f32(*(float32x2_t *)v306.f32, *(float32x2_t *)v306.f32)).u32[0];
        v275 = (int8x16_t)vmlaq_n_f32((float32x4_t)v330, vsubq_f32(v331, (float32x4_t)v330), v305.f32[0]);
        v275.i64[1] = vextq_s8(v275, v275, 8uLL).u32[0];
        v276 = (int8x16_t)vmlaq_n_f32((float32x4_t)v327, vsubq_f32(v328, (float32x4_t)v327), v305.f32[0]);
        v276.i64[1] = vextq_s8(v276, v276, 8uLL).u32[0];
        goto LABEL_144;
      }
      v275 = 0uLL;
      v276 = 0uLL;
      if ((_DWORD)v258 == 1)
        goto LABEL_132;
    }
LABEL_144:
    v307 = vrecpe_f32(i);
    v308 = 4;
    do
    {
      v307 = vmul_f32(v307, vrecps_f32(i, v307));
      --v308;
    }
    while (v308);
    v309 = vmulq_n_f32(v69, v307.f32[0]);
    v309.i32[3] = 0;
    v274 = a6;
    a6[2] = v309;
    a6[3] = v316;
    result = 4;
    v164 = i;
    goto LABEL_147;
  }
  if (a3)
  {
    *a5 = v320;
    if ((_DWORD)v258)
    {
      v259 = &v323;
      v260 = &v325;
      do
      {
        v261 = *v260++;
        *a3++ = v261;
        v262 = *v259++;
        *v11++ = v262;
        --v258;
      }
      while (v258);
    }
  }
  return 5;
}

void physx::PCMConvexVsHeightfieldContactGenerationCallback::~PCMConvexVsHeightfieldContactGenerationCallback(physx::PCMConvexVsHeightfieldContactGenerationCallback *this)
{
  JUMPOUT(0x2276933B8);
}

uint64_t physx::Gu::PCMHeightfieldContactGenerationCallback<physx::PCMConvexVsHeightfieldContactGenerationCallback>::onEvent(uint64_t a1, unsigned int a2, unsigned int *a3, double a4, double a5, __n128 a6, double a7, double a8, __n128 a9)
{
  unsigned int v10;
  int v12;
  int v13;
  int v14;
  float v15;
  float v16;
  float v17;
  float v18;
  float v19;
  uint64_t v20;
  int v21;
  unsigned int v22;
  float v23;
  float v24;
  float v25;
  float *v26;
  float v27;
  float v28;
  int v29;
  int v30;
  uint64_t v32;
  unsigned int v33;
  int v34;
  int v35;
  unsigned int v36;
  unsigned int *v37;
  int v38;
  float v39;
  float v40;
  float v41;
  float v42;
  float v43;
  float v44;
  float v45;
  float v46;
  float v47;
  float v48;
  float v49;
  float v50;
  float v51;
  float v52;
  float v53;
  float v54;
  float v55;
  float v56;
  _BYTE v57[12];
  _DWORD v58[3];
  _DWORD v59[3];
  _BYTE v60[848];
  int v61;
  uint64_t v62;

  v62 = *MEMORY[0x24BDAC8D0];
  if (a2 + 15 >= 0x10)
  {
    v10 = a2;
    v12 = 0;
    v33 = (a2 + 15) >> 4;
    v32 = a1 + 32;
    do
    {
      v61 = 0;
      v35 = v12;
      v36 = v10;
      if (v10 >= 0x10)
        v13 = 16;
      else
        v13 = v10;
      v34 = v13;
      if (v13)
      {
        v38 = v13;
        do
        {
          v14 = *a3;
          physx::Gu::HeightFieldUtil::getTriangle(*(_QWORD *)(a1 + 8), *(float **)(a1 + 16), (uint64_t)&v48, (uint64_t)v59, (uint64_t)v58, *a3, 0, 0);
          v15 = (float)((float)(v52 - v49) * (float)(v56 - v50)) - (float)((float)(v53 - v50) * (float)(v55 - v49));
          v16 = (float)((float)(v53 - v50) * (float)(v54 - v48)) - (float)((float)(v51 - v48) * (float)(v56 - v50));
          v17 = (float)((float)(v51 - v48) * (float)(v55 - v49)) - (float)((float)(v52 - v49) * (float)(v54 - v48));
          v18 = sqrtf((float)((float)(v16 * v16) + (float)(v15 * v15)) + (float)(v17 * v17));
          v37 = a3 + 1;
          if (v18 > 0.0)
          {
            v19 = 1.0 / v18;
            v15 = v15 * v19;
            v16 = v16 * v19;
            v17 = v17 * v19;
          }
          v20 = 0;
          v21 = 0;
          --v38;
          do
          {
            v22 = v58[v20];
            if (v22 == -1)
            {
              if (*(_BYTE *)(a1 + 24))
                v30 = 8 << v20;
              else
                v30 = 1 << v20;
              v21 |= v30;
            }
            else
            {
              physx::Gu::HeightFieldUtil::getTriangle(*(_QWORD *)(a1 + 8), *(float **)(a1 + 16), (uint64_t)&v39, (uint64_t)v57, 0, v22, 0, 0);
              v23 = (float)((float)(v43 - v40) * (float)(v47 - v41)) - (float)((float)(v44 - v41) * (float)(v46 - v40));
              v24 = (float)((float)(v44 - v41) * (float)(v45 - v39)) - (float)((float)(v42 - v39) * (float)(v47 - v41));
              v25 = (float)((float)(v42 - v39) * (float)(v46 - v40)) - (float)((float)(v43 - v40) * (float)(v45 - v39));
              v26 = &v48 + 3 * byte_2261AA610[v20];
              if ((float)((float)((float)(v24 * (float)(v26[1] - v40)) + (float)(v23 * (float)(*v26 - v39)))
                         + (float)(v25 * (float)(v26[2] - v41))) < 0.0)
              {
                v27 = sqrtf((float)((float)(v24 * v24) + (float)(v23 * v23)) + (float)(v25 * v25));
                if (v27 > 0.0)
                {
                  v28 = 1.0 / v27;
                  v23 = v23 * v28;
                  v24 = v24 * v28;
                  v25 = v25 * v28;
                }
                v29 = 8 << v20;
                if ((float)((float)((float)(v16 * v24) + (float)(v23 * v15)) + (float)(v25 * v17)) >= 0.997)
                  v29 = 0;
                v21 |= v29;
              }
            }
            ++v20;
          }
          while (v20 != 3);
          *(float *)&a4 = physx::Gu::TriangleCache<16u>::addTriangle((uint64_t)v60, (uint64_t)&v48, v59, v14, v21);
          a3 = v37;
        }
        while (v38);
      }
      v10 = v36 - v34;
      physx::Gu::PCMMeshContactGeneration::processTriangleCache<16u,physx::Gu::PCMConvexVsMeshContactGeneration>(v32, (uint64_t)v60, a4, a5, a6, a7, a8, a9);
      v12 = v35 + 1;
    }
    while (v35 + 1 != v33);
  }
  return 1;
}

float physx::Gu::PCMConvexVsMeshContactGeneration::PCMConvexVsMeshContactGeneration(unint64_t a1, _QWORD *a2, float32x2_t *a3, float32x4_t *a4, float32x4_t *a5, uint64_t a6, uint64_t a7, float32x4_t *a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, char a13, uint64_t a14)
{
  _BYTE *v15;
  uint64_t v16;
  __int128 v17;
  float32x4_t v18;
  float32x4_t v19;
  float32x4_t v20;
  float32x4_t v21;
  float32x4_t v22;
  float result;

  v15 = (_BYTE *)(a1 + 4568);
  physx::Gu::PCMMeshContactGeneration::PCMMeshContactGeneration(a1, a2, a3, a4, a5, a6, a7, a10, a14);
  *(_DWORD *)(v16 + 4520) = 0;
  *(_QWORD *)&v17 = -1;
  *((_QWORD *)&v17 + 1) = -1;
  *(_OWORD *)(v16 + 4488) = v17;
  *(_OWORD *)(v16 + 4504) = v17;
  *(_OWORD *)(v16 + 4456) = v17;
  *(_OWORD *)(v16 + 4472) = v17;
  *(_OWORD *)(v16 + 4424) = v17;
  *(_OWORD *)(v16 + 4440) = v17;
  *(_OWORD *)(v16 + 4392) = v17;
  *(_OWORD *)(v16 + 4408) = v17;
  *(_QWORD *)(v16 + 4544) = a8;
  *(_QWORD *)(v16 + 4552) = a9;
  *(_QWORD *)(v16 + 4560) = a11;
  *v15 = a12;
  v15[1] = a13;
  v18 = *a8;
  v18.i64[1] = a8->u32[2];
  v19 = vsubq_f32(v18, *(float32x4_t *)(v16 + 2416));
  v20 = vmulq_f32(*(float32x4_t *)(v16 + 2368), v19);
  v20.i64[0] = vpaddq_f32(v20, v20).u64[0];
  v21 = vmulq_f32(v19, *(float32x4_t *)(v16 + 2384));
  v21.i64[0] = vpaddq_f32(v21, v21).u64[0];
  v22 = vmulq_f32(v19, *(float32x4_t *)(v16 + 2400));
  v22.i64[0] = vpaddq_f32(v22, v22).u64[0];
  LODWORD(result) = vpadd_f32(*(float32x2_t *)v22.f32, *(float32x2_t *)v22.f32).u32[0];
  *(int8x8_t *)v20.f32 = vext_s8((int8x8_t)vpadd_f32(*(float32x2_t *)v20.f32, *(float32x2_t *)v20.f32), (int8x8_t)vpadd_f32(*(float32x2_t *)v21.f32, *(float32x2_t *)v21.f32), 4uLL);
  v20.i64[1] = LODWORD(result);
  *(float32x4_t *)(v16 + 4528) = v20;
  return result;
}

uint64_t physx::Gu::PCMMeshContactGeneration::processTriangleCache<16u,physx::Gu::PCMConvexVsMeshContactGeneration>(uint64_t a1, uint64_t a2, double a3, double a4, __n128 a5, double a6, double a7, __n128 a8)
{
  int v8;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v8 = *(_DWORD *)(a2 + 848);
  if (v8)
  {
    v11 = 0;
    v12 = 0;
    v13 = 576;
    do
    {
      physx::Gu::PCMConvexVsMeshContactGeneration::processTriangle(a1, (float *)(a2 + v11), *(_DWORD *)(a2 + 4 * v12 + 768), *(_BYTE *)(a2 + v12 + 832), (int *)(a2 + v13), a3, a4, a5, a6, a7, a8);
      ++v12;
      v13 += 12;
      v11 += 36;
    }
    while (v8 != (_DWORD)v12);
  }
  return 1;
}

void physx::Gu::SupportLocalImpl<physx::Gu::TriangleV>::~SupportLocalImpl()
{
  JUMPOUT(0x2276933B8);
}

double physx::Gu::SupportLocalImpl<physx::Gu::TriangleV>::doSupport(uint64_t a1, float32x4_t *a2)
{
  float32x4_t *v2;
  float32x4_t v3;
  float32x4_t v4;
  float32x4_t v5;
  float32x4_t v6;
  float32x4_t v7;
  float32x4_t v8;
  double result;

  v2 = *(float32x4_t **)(a1 + 64);
  v3 = v2[3];
  v4 = v2[4];
  v5 = v2[5];
  v6 = vmulq_f32(v3, *a2);
  v6.i64[0] = vpaddq_f32(v6, v6).u64[0];
  *(float32x2_t *)v6.f32 = vpadd_f32(*(float32x2_t *)v6.f32, *(float32x2_t *)v6.f32);
  v7 = vmulq_f32(v4, *a2);
  v7.i64[0] = vpaddq_f32(v7, v7).u64[0];
  *(float32x2_t *)v7.f32 = vpadd_f32(*(float32x2_t *)v7.f32, *(float32x2_t *)v7.f32);
  v8 = vmulq_f32(v5, *a2);
  v8.i64[0] = vpaddq_f32(v8, v8).u64[0];
  *(float32x2_t *)v8.f32 = vpadd_f32(*(float32x2_t *)v8.f32, *(float32x2_t *)v8.f32);
  *(_QWORD *)&result = vbslq_s8((int8x16_t)vdupq_lane_s32((int32x2_t)vand_s8((int8x8_t)vcgt_f32(*(float32x2_t *)v6.f32, *(float32x2_t *)v8.f32), (int8x8_t)vcgt_f32(*(float32x2_t *)v6.f32, *(float32x2_t *)v7.f32)), 0), (int8x16_t)v3, vbslq_s8((int8x16_t)vdupq_lane_s32(vcgt_f32(*(float32x2_t *)v7.f32, *(float32x2_t *)v8.f32), 0), (int8x16_t)v4, (int8x16_t)v5)).u64[0];
  return result;
}

float32x2_t physx::Gu::SupportLocalImpl<physx::Gu::TriangleV>::doSupport(uint64_t a1, float32x4_t *a2, float32x2_t *a3, float32x2_t *a4)
{
  float32x4_t *v4;
  float32x4_t v5;
  float32x4_t v6;
  float32x4_t v7;
  float32x2_t result;

  v4 = *(float32x4_t **)(a1 + 64);
  v5 = vmulq_f32(v4[3], *a2);
  v5.i64[0] = vpaddq_f32(v5, v5).u64[0];
  *(float32x2_t *)v5.f32 = vpadd_f32(*(float32x2_t *)v5.f32, *(float32x2_t *)v5.f32);
  v6 = vmulq_f32(v4[4], *a2);
  v6.i64[0] = vpaddq_f32(v6, v6).u64[0];
  *(float32x2_t *)v6.f32 = vpadd_f32(*(float32x2_t *)v6.f32, *(float32x2_t *)v6.f32);
  v7 = vmulq_f32(v4[5], *a2);
  v7.i64[0] = vpaddq_f32(v7, v7).u64[0];
  *(float32x2_t *)v7.f32 = vpadd_f32(*(float32x2_t *)v7.f32, *(float32x2_t *)v7.f32);
  *a4 = vmax_f32(*(float32x2_t *)v5.f32, vmax_f32(*(float32x2_t *)v6.f32, *(float32x2_t *)v7.f32));
  result = vmin_f32(*(float32x2_t *)v5.f32, vmin_f32(*(float32x2_t *)v6.f32, *(float32x2_t *)v7.f32));
  *a3 = result;
  return result;
}

float physx::Gu::SupportLocalImpl<physx::Gu::TriangleV>::populateVerts(uint64_t a1, unsigned __int8 *a2, unsigned int a3, uint64_t a4, _OWORD *a5)
{
  uint64_t v5;
  unsigned int v6;
  uint64_t v7;
  __int128 v8;

  if (a3)
  {
    v5 = a3;
    do
    {
      v6 = *a2++;
      v7 = a4 + 12 * v6;
      *(_QWORD *)&v8 = *(_QWORD *)v7;
      *((_QWORD *)&v8 + 1) = *(unsigned int *)(v7 + 8);
      *a5++ = v8;
      --v5;
    }
    while (v5);
  }
  return *(float *)&v8;
}

uint64_t physx::shdfnd::Array<physx::Gu::SortedTriangle,physx::shdfnd::InlineAllocator<1024u,physx::shdfnd::ReflectionAllocator<physx::Gu::SortedTriangle>>>::growAndPushBack(uint64_t result, _OWORD *a2)
{
  uint64_t v3;
  int v4;
  int v5;
  uint64_t v7;
  const char *v8;
  _OWORD *v9;
  uint64_t v10;
  unint64_t v11;
  __int128 *v12;
  _OWORD *v13;
  __int128 v14;
  uint64_t v15;
  uint64_t v16;

  v3 = result;
  v4 = *(_DWORD *)(result + 1044);
  if ((v4 & 0x7FFFFFFF) != 0)
    v5 = 2 * v4;
  else
    v5 = 1;
  if (!v5)
    goto LABEL_14;
  if ((16 * v5) <= 0x400 && *(_BYTE *)(result + 1024) == 0)
  {
    *(_BYTE *)(result + 1024) = 1;
    v9 = (_OWORD *)result;
    goto LABEL_16;
  }
  if (!(16 * v5))
  {
LABEL_14:
    v9 = 0;
    goto LABEL_16;
  }
  v7 = physx::shdfnd::Foundation::mInstance;
  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)physx::shdfnd::Foundation::mInstance + 40))(physx::shdfnd::Foundation::mInstance))
    v8 = "static const char *physx::shdfnd::ReflectionAllocator<physx::Gu::SortedTriangle>::getName() [T = physx::Gu::SortedTriangle]";
  else
    v8 = "<allocation names disabled>";
  result = (*(uint64_t (**)(uint64_t, _QWORD, const char *, const char *, uint64_t))(*(_QWORD *)(v7 + 24) + 16))(v7 + 24, (16 * v5), v8, "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/foundation/include/PsArray.h", 553);
  v9 = (_OWORD *)result;
LABEL_16:
  v10 = *(unsigned int *)(v3 + 1040);
  if ((_DWORD)v10)
  {
    v11 = (unint64_t)&v9[v10];
    v12 = *(__int128 **)(v3 + 1032);
    v13 = v9;
    do
    {
      v14 = *v12++;
      *v13++ = v14;
    }
    while ((unint64_t)v13 < v11);
    v15 = *(unsigned int *)(v3 + 1040);
  }
  else
  {
    v15 = 0;
  }
  v9[v15] = *a2;
  if ((*(_DWORD *)(v3 + 1044) & 0x80000000) == 0)
  {
    v16 = *(_QWORD *)(v3 + 1032);
    if (v16 == v3)
    {
      *(_BYTE *)(v3 + 1024) = 0;
    }
    else if (v16)
    {
      result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
    }
  }
  *(_QWORD *)(v3 + 1032) = v9;
  *(_DWORD *)(v3 + 1044) = v5;
  ++*(_DWORD *)(v3 + 1040);
  return result;
}

void *physx::shdfnd::internal::Stack<physx::shdfnd::ReflectionAllocator<physx::Gu::SortedTriangle>>::grow(uint64_t a1)
{
  unsigned int v2;
  uint64_t v3;
  uint64_t v4;
  const char *v5;
  void *v6;
  void *result;

  v2 = 2 * *(_DWORD *)(a1 + 8);
  *(_DWORD *)(a1 + 8) = v2;
  if (v2)
  {
    v3 = 4 * v2;
    v4 = physx::shdfnd::Foundation::mInstance;
    if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)physx::shdfnd::Foundation::mInstance + 40))(physx::shdfnd::Foundation::mInstance))
      v5 = "static const char *physx::shdfnd::ReflectionAllocator<physx::Gu::SortedTriangle>::getName() [T = physx::Gu::SortedTriangle]";
    else
      v5 = "<allocation names disabled>";
    v6 = (void *)(*(uint64_t (**)(uint64_t, uint64_t, const char *, const char *, uint64_t))(*(_QWORD *)(v4 + 24)
                                                                                                  + 16))(v4 + 24, v3, v5, "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/foundation/include/PsSortInternals.h", 155);
  }
  else
  {
    v6 = 0;
  }
  result = memcpy(v6, *(const void **)(a1 + 16), (4 * *(_DWORD *)(a1 + 4)));
  if (*(_BYTE *)(a1 + 24) && *(_QWORD *)(a1 + 16))
    result = (void *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
  *(_BYTE *)(a1 + 24) = 1;
  *(_QWORD *)(a1 + 16) = v6;
  return result;
}

BOOL physx::Gu::PCMContactConvexMesh(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, char a11, float32x4_t *a12, uint64_t a13)
{
  float32x4_t *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  float32x4_t *v17;
  float32x4_t *v18;
  uint64_t v19;
  double v20;
  int32x2_t v21;
  uint64_t v22;
  uint64_t v23;
  float32x4_t v24;
  float32x4_t v25;
  float32x4_t v26;
  float32x4_t v27;
  float32x4_t v28;
  float32x4_t v29;
  float32x4_t v30;
  float32x2_t v31;
  float32x4_t v32;
  float32x2_t v33;
  float32x2_t v34;
  int8x8_t v35;
  float32x4_t v36;
  float32x4_t v37;
  float32x4_t v38;
  float32x4_t v39;
  float32x4_t v40;
  float32x4_t v41;
  float32x4_t v42;
  float32x2_t v43;
  float32x4_t v44;
  int8x8_t v45;
  float32x4_t v46;
  float32x4_t v47;
  int8x16_t v48;
  float32x4_t v49;
  float32x2_t v50;
  float32x2_t v51;
  float32x4_t v52;
  float32x2_t v53;
  float32x2_t v54;
  float32x2_t v55;
  float32x2_t v56;
  float32x2_t v57;
  float32x2_t v58;
  float32x2_t v59;
  float32x2_t v60;
  float32x2_t v61;
  float32x2_t v66;
  float32x4_t v67;
  __int128 v68;
  unsigned int v69;
  unsigned int v70;
  __int8 *v71;
  uint64_t v72;
  unsigned int v73;
  unsigned __int32 v78;
  unsigned __int8 v79;
  char *v80;
  __int8 v81;
  uint64_t v83;
  float v84;
  float v85;
  float v86;
  float v87;
  float v88;
  float v89;
  float v90;
  float v91;
  float v92;
  float v93;
  float v94;
  float v95;
  float v96;
  float v97;
  float v98;
  __int32 v99;
  float v100;
  float v101;
  float v102;
  float v103;
  float v104;
  float v105;
  float v106;
  float v107;
  float v108;
  float v109;
  float v110;
  float v111;
  float v112;
  float v113;
  float v114;
  float32x4_t *v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  float v119;
  double v120;
  double v121;
  __n128 v122;
  double v123;
  double v124;
  __n128 v125;
  unsigned int v126;
  uint64_t v127;
  int v128;
  unsigned int v129;
  uint64_t v130;
  char *v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t *v134;
  int v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t i;
  float32x4_t *v140;
  int v141;
  uint64_t v142;
  uint64_t v143;
  float32x4_t *v144;
  float32x4_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v150;
  unint64_t v151;
  unint64_t v152;
  unsigned int v153;
  unsigned int v154;
  unint64_t v155;
  float32x4_t v156;
  float32x4_t v157;
  __int128 *v158;
  __int128 v159;
  __int128 v160;
  __int128 v161;
  uint64_t v162;
  unsigned int v163;
  float v164[16];
  float v165[9];
  uint64_t v166;
  __int32 v167;
  float v168[9];
  uint64_t v169;
  __int32 v170;
  float32x2_t v171;
  float32x4_t v172[2];
  float32x4_t v173[2];
  int32x2_t v174;
  float32x4_t v175;
  __int128 v176;
  _OWORD v177[53];
  int v178;
  float32x4_t v179[128];
  uint64_t v180[38];
  uint64_t v181;
  uint64_t v182[9];
  uint64_t v183;
  unsigned int v184;
  unsigned int v185;
  float *v186;
  float32x2_t v187[544];
  char v188;
  float32x2_t *v189;
  uint64_t v190;
  uint64_t v191;

  v20 = MEMORY[0x24BDAC7A8](a1);
  v23 = v22;
  v191 = *MEMORY[0x24BDAC8D0];
  v24 = *v17;
  v25.i64[0] = v17[1].i64[0];
  v25.i64[1] = v17[1].u32[2];
  v26.i64[0] = v18[1].i64[0];
  v26.i64[1] = v18[1].u32[2];
  v27 = *v18;
  v174 = vdup_lane_s32(v21, 0);
  v173[0] = v24;
  v173[1] = v25;
  v172[0] = v27;
  v172[1] = v26;
  v28 = vnegq_f32(v27);
  v29 = v28;
  v29.i32[3] = 0;
  v30 = vsubq_f32(v25, v26);
  v31 = (float32x2_t)vdupq_laneq_s32((int32x4_t)v27, 3).u64[0];
  v32 = vmulq_n_f32(v30, vmla_f32((float32x2_t)0xBF000000BF000000, v31, v31).f32[0]);
  v32.i32[3] = 0;
  v33 = (float32x2_t)vextq_s8((int8x16_t)v29, (int8x16_t)v29, 8uLL).u64[0];
  v34 = (float32x2_t)vext_s8(*(int8x8_t *)v28.f32, (int8x8_t)v33, 4uLL);
  v35 = (int8x8_t)vmls_f32(vmul_f32(*(float32x2_t *)v28.f32, (float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v30, (int8x16_t)v30, 4uLL)), v34, *(float32x2_t *)v30.f32);
  *(int8x8_t *)v36.f32 = vext_s8(v35, (int8x8_t)vmls_f32(vmul_f32(v33, *(float32x2_t *)v30.f32), *(float32x2_t *)v28.f32, (float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v30, (int8x16_t)v30, 8uLL)), 4uLL);
  v36.i64[1] = v35.u32[0];
  v37 = vmlaq_laneq_f32(v32, v36, v27, 3);
  v37.i64[1] = vextq_s8((int8x16_t)v37, (int8x16_t)v37, 8uLL).u32[0];
  v38 = vmulq_f32(v29, v30);
  v38.i64[0] = vpaddq_f32(v38, v38).u64[0];
  v39 = vmlaq_n_f32(v37, v29, vpadd_f32(*(float32x2_t *)v38.f32, *(float32x2_t *)v38.f32).f32[0]);
  v40 = vaddq_f32(v39, v39);
  v40.i32[3] = 0;
  v41 = v24;
  v41.i32[3] = 0;
  v42 = vmulq_f32(v41, v29);
  v42.i64[0] = vpaddq_f32(v42, v42).u64[0];
  v43 = vsub_f32(vmul_f32((float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v24, (int8x16_t)v24, 8uLL), (float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v27, (int8x16_t)v27, 8uLL)), vpadd_f32(*(float32x2_t *)v42.f32, *(float32x2_t *)v42.f32));
  v44 = vmulq_laneq_f32(v29, v24, 3);
  v42.i64[0] = vextq_s8((int8x16_t)v41, (int8x16_t)v41, 8uLL).u64[0];
  v45 = (int8x8_t)vmls_f32(vmul_f32((float32x2_t)vext_s8(*(int8x8_t *)v24.f32, *(int8x8_t *)v42.f32, 4uLL), *(float32x2_t *)v28.f32), v34, *(float32x2_t *)v24.f32);
  *(int8x8_t *)v24.f32 = vext_s8(v45, (int8x8_t)vmls_f32(vmul_f32(*(float32x2_t *)v24.f32, v33), *(float32x2_t *)v28.f32, *(float32x2_t *)v42.f32), 4uLL);
  *(int8x8_t *)&v24.u32[2] = v45;
  v46 = vaddq_f32(vaddq_f32(v44, vmulq_laneq_f32(v41, v27, 3)), v24);
  v47 = v46;
  v47.i32[3] = v43.i32[1];
  v48 = (int8x16_t)vabdq_f32(v40, a12[1]);
  *(float32x2_t *)v48.i8 = vpmax_f32((float32x2_t)*(_OWORD *)&vextq_s8(v48, v48, 8uLL), *(float32x2_t *)v48.i8);
  v49 = vmulq_f32(v47, *a12);
  v49.i64[0] = vpaddq_f32(v49, v49).u64[0];
  if (vuzp1_s8((int8x8_t)vdup_lane_s16((int16x4_t)vorr_s8((int8x8_t)vcgt_f32((float32x2_t)vdup_n_s32(0x3F7FF2E5u), vpadd_f32(*(float32x2_t *)v49.f32, *(float32x2_t *)v49.f32)), (int8x8_t)vcgt_f32(vpmax_f32(*(float32x2_t *)v48.i8, *(float32x2_t *)v48.i8), vmul_f32(*(float32x2_t *)&v20, (float32x2_t)vdup_n_s32(0x3E4CCCCDu)))), 0), *(int8x8_t *)&v20).u32[0] == -1)
  {
    v171 = vmul_f32(*(float32x2_t *)&v20, (float32x2_t)vdup_n_s32(0x3D4CCCCDu));
    a12[3].i8[14] = 0;
    *a12 = v47;
    a12[1] = v40;
    v83 = *(_QWORD *)(v16 + 48);
    v84 = v17->f32[0];
    v85 = v17->f32[1];
    v86 = v17->f32[2];
    v87 = v17->f32[3];
    v88 = v85 + v85;
    v89 = v86 + v86;
    v90 = v85 * (float)(v85 + v85);
    v91 = v86 * (float)(v86 + v86);
    v92 = (float)(v84 + v84) * v85;
    v93 = (float)(v84 + v84) * v86;
    v94 = (float)(v84 + v84) * v87;
    v95 = v88 * v86;
    v96 = v88 * v87;
    v97 = v89 * v87;
    v168[0] = (float)(1.0 - v90) - v91;
    v168[1] = v92 + v97;
    v98 = 1.0 - (float)(v84 * (float)(v84 + v84));
    v168[2] = v93 - v96;
    v168[3] = v92 - v97;
    v168[4] = v98 - v91;
    v168[5] = v95 + v94;
    v168[6] = v93 + v96;
    v168[7] = v95 - v94;
    v169 = v17[1].i64[0];
    v99 = v17[1].i32[2];
    v168[8] = v98 - v90;
    v170 = v99;
    v100 = v18->f32[0];
    v101 = v18->f32[1];
    v102 = v18->f32[2];
    v103 = v18->f32[3];
    v104 = v101 + v101;
    v105 = v102 + v102;
    v106 = v101 * (float)(v101 + v101);
    v107 = v102 * (float)(v102 + v102);
    v108 = (float)(v100 + v100) * v101;
    v109 = (float)(v100 + v100) * v102;
    v110 = (float)(v100 + v100) * v103;
    v111 = v104 * v102;
    v112 = v104 * v103;
    v113 = v105 * v103;
    v165[0] = (float)(1.0 - v106) - v107;
    v165[1] = v108 + v113;
    v114 = 1.0 - (float)(v100 * (float)(v100 + v100));
    v165[2] = v109 - v112;
    v165[3] = v108 - v113;
    v165[4] = v114 - v107;
    v165[5] = v111 + v110;
    v165[6] = v109 + v112;
    v165[7] = v111 - v110;
    v165[8] = v114 - v106;
    v166 = v18[1].i64[0];
    v167 = v18[1].i32[2];
    v115 = v13;
    v116 = v14;
    v117 = v19;
    physx::Gu::computeHullOBB(v164, v15, v168, v165, a9, a11, COERCE_DOUBLE(__PAIR64__(HIDWORD(v166), v21.u32[0])));
    v190 = 0x44000000000;
    v188 = 1;
    v189 = v187;
    v118 = *(_QWORD *)(v83 + 80);
    v175.i32[2] = 2;
    *(_QWORD *)&v176 = a9;
    *((_QWORD *)&v176 + 1) = v118;
    LOBYTE(v177[0]) = a11;
    v178 = 0;
    v175.i64[0] = (uint64_t)&off_24ED927C8;
    v119 = physx::Gu::PCMConvexVsMeshContactGeneration::PCMConvexVsMeshContactGeneration((unint64_t)v179, &v174, &v171, v173, v172, (uint64_t)a12, v23, v115, v116, (uint64_t)v187, v117, a10, 1, a13);
    v186 = v164;
    ((void (*)(uint64_t, float *, float32x4_t *, uint64_t, uint64_t, float))*(&physx::Gu::gMidphaseBoxCBOverlapTable
                                                                                    + *(unsigned __int16 *)(v83 + 8)
                                                                                    - 3))(v83, v164, &v175, 1, 1, v119);
    if (v178)
    {
      physx::Gu::PCMMeshContactGeneration::processTriangleCache<16u,physx::Gu::PCMConvexVsMeshContactGeneration>((uint64_t)v179, (uint64_t)v177 + 4, v120, v121, v122, v123, v124, v125);
      v178 = 0;
    }
    physx::Gu::PCMConvexVsMeshContactGeneration::generateLastContacts(v179);
    v126 = v184;
    if (v184)
    {
      v127 = v185;
      if (v185 >= 2)
      {
        v128 = 0;
        v129 = -1;
        v130 = 1;
        do
        {
          v131 = (char *)v179 + 8 * v130;
          v132 = *((_QWORD *)v131 + 255);
          v133 = *((_QWORD *)v131 + 256);
          if (COERCE_FLOAT(*(_QWORD *)(v132 + 40)) > COERCE_FLOAT(*(_QWORD *)(v133 + 40)))
          {
            *((_QWORD *)v131 + 255) = v133;
            *((_QWORD *)v131 + 256) = v132;
            if ((int)v130 - 2 >= 0)
            {
              v134 = &v180[v129 + 1];
              v135 = v128;
              do
              {
                v137 = *(v134 - 1);
                v136 = *v134;
                if (COERCE_FLOAT(*(_QWORD *)(*v134 + 40)) >= COERCE_FLOAT(*(_QWORD *)(v137 + 40)))
                  break;
                *v134 = v137;
                *--v134 = v136;
                --v135;
              }
              while (v135 > 0);
            }
          }
          ++v130;
          ++v129;
          ++v128;
        }
        while (v130 != v127);
      }
      if ((_DWORD)v127)
      {
        v138 = 0;
        for (i = 0; i != v127; ++i)
        {
          v140 = (float32x4_t *)v180[i];
          v140[1].i64[1] = (uint64_t)v140;
          v140[2].i64[0] = (uint64_t)v140;
          v141 = v140[3].i32[1] - v140[3].i32[0];
          v140[3].i32[2] = v141;
          v140[1].i64[0] = 0;
          v142 = v138;
          while (v142)
          {
            v143 = *(uint64_t *)((char *)&v179[127].i64[1] + v142);
            v144 = *(float32x4_t **)(v143 + 32);
            v145 = vmulq_f32(*v140, *v144);
            v145.i64[0] = vpaddq_f32(v145, v145).u64[0];
            v142 -= 8;
            if (vpadd_f32(*(float32x2_t *)v145.f32, *(float32x2_t *)v145.f32).f32[0] >= *(float *)&v181)
            {
              *(_QWORD *)(v143 + 16) = v140;
              v144[1].i64[1] = (uint64_t)v140;
              v140[2].i64[0] = (uint64_t)v144;
              *(_DWORD *)(*(_QWORD *)(v143 + 32) + 56) += v141;
              break;
            }
          }
          v138 += 8;
        }
        v146 = 0;
        v147 = v183;
        do
        {
          v148 = v180[v146];
          if (v148)
            _ZF = *(_QWORD *)(v148 + 32) == v148;
          else
            _ZF = 0;
          if (_ZF)
          {
            while (*(_QWORD *)(v148 + 16))
            {
              v150 = v148;
              v148 = *(_QWORD *)(v148 + 16);
              v151 = *(unsigned int *)(v150 + 48);
              v152 = *(unsigned int *)(v150 + 52);
              if (v151 < v152)
              {
                v153 = *(_DWORD *)(v148 + 52);
                do
                {
                  v154 = *(_DWORD *)(v148 + 48);
                  if (v154 < v153)
                  {
                    do
                    {
                      v155 = v147 + ((unint64_t)v154 << 6);
                      v156 = vsubq_f32(*(float32x4_t *)(v155 + 16), *(float32x4_t *)(v147 + (v151 << 6) + 16));
                      v157 = vmulq_f32(v156, v156);
                      v157.i64[0] = vpaddq_f32(v157, v157).u64[0];
                      if (*(float *)v182 > vpadd_f32(*(float32x2_t *)v157.f32, *(float32x2_t *)v157.f32).f32[0])
                      {
                        v158 = (__int128 *)(v147 + ((unint64_t)(v153 - 1) << 6));
                        v159 = *v158;
                        v160 = v158[1];
                        v161 = v158[2];
                        *(_DWORD *)(v155 + 48) = *((_DWORD *)v158 + 12);
                        *(_OWORD *)(v155 + 16) = v160;
                        *(_OWORD *)(v155 + 32) = v161;
                        *(_OWORD *)v155 = v159;
                        v153 = *(_DWORD *)(v148 + 52) - 1;
                        *(_DWORD *)(v148 + 52) = v153;
                        --v154;
                      }
                      ++v154;
                    }
                    while (v154 < v153);
                    v152 = *(unsigned int *)(v150 + 52);
                  }
                  ++v151;
                }
                while (v151 < v152);
              }
            }
          }
          ++v146;
        }
        while (v146 != v127);
        v162 = v183;
        v126 = v184;
        v163 = v185;
      }
      else
      {
        v163 = 0;
        v162 = v183;
      }
      physx::Gu::MultiplePersistentContactManifold::addManifoldContactPoints(v180[36], v162, v126, v180, v163, (uint64_t)v182, &v181, 6);
    }
    if ((v190 & 0x8000000000000000) == 0 && (v190 & 0x7FFFFFFF00000000) != 0 && v189 != v187 && v189)
      (*(void (**)(uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
  }
  else
  {
    v50 = (float32x2_t)vdup_lane_s32(*(int32x2_t *)v46.f32, 1);
    v51 = (float32x2_t)vdup_laneq_s32((int32x4_t)v46, 2);
    v52 = vaddq_f32(v46, v46);
    v53 = (float32x2_t)vdup_laneq_s32((int32x4_t)v52, 2);
    v177[1] = v40;
    v54 = (float32x2_t)vdup_lane_s32((int32x2_t)vmul_f32(*(float32x2_t *)v46.f32, *(float32x2_t *)v52.f32), 0);
    v55 = vmul_lane_f32(v50, *(float32x2_t *)v52.f32, 1);
    v56 = vmul_laneq_f32(v51, v52, 2);
    v57 = vmul_n_f32(v50, v52.f32[0]);
    v58 = vmul_n_f32(v51, v52.f32[0]);
    v59 = vmul_lane_f32((float32x2_t)vdup_lane_s32(*(int32x2_t *)v52.f32, 0), v43, 1);
    v60 = vmul_lane_f32(v51, *(float32x2_t *)v52.f32, 1);
    *(float32x2_t *)v52.f32 = vmul_lane_f32((float32x2_t)vdup_lane_s32(*(int32x2_t *)v52.f32, 1), v43, 1);
    v61 = vmul_lane_f32(v53, v43, 1);
    __asm { FMOV            V16.2S, #1.0 }
    v66 = vsub_f32(_D16, v54);
    *(int8x8_t *)v67.f32 = vext_s8((int8x8_t)vsub_f32(vsub_f32(_D16, v55), v56), (int8x8_t)vadd_f32(v57, v61), 4uLL);
    v67.i64[1] = vsub_f32(v58, *(float32x2_t *)v52.f32).u32[0];
    v175 = v67;
    *(int8x8_t *)&v68 = vext_s8((int8x8_t)vsub_f32(v57, v61), (int8x8_t)vsub_f32(v66, v56), 4uLL);
    *((_QWORD *)&v68 + 1) = vadd_f32(v60, v59).u32[0];
    v176 = v68;
    *(int8x8_t *)&v68 = vext_s8((int8x8_t)vadd_f32(v58, *(float32x2_t *)v52.f32), (int8x8_t)vsub_f32(v60, v59), 4uLL);
    *((_QWORD *)&v68 + 1) = vsub_f32(v66, v55).u32[0];
    v177[0] = v68;
    v187[0] = vmul_f32(*(float32x2_t *)&v20, (float32x2_t)vdup_n_s32(0x3F4CCCCDu));
    v69 = a12[3].u8[14];
    if (a12[3].i8[14])
    {
      v70 = 0;
      do
      {
        v71 = &a12[3].i8[v70 + 8];
        v72 = *v71;
        v73 = v69 - 2;
        if (v70 < v73)
          v73 = v70;
        _X8 = (uint64_t)&a12[25 * a12[3].u8[v73 + 9] + 4];
        __asm
        {
          PRFM            #0, [X8]
          PRFM            #0, [X8,#0x80]
          PRFM            #0, [X8,#0x100]
        }
        v78 = physx::Gu::SinglePersistentContactManifold::refreshContactPoints((uint64_t)&a12[25 * *v71 + 4], &v175, v187).u32[0];
        if (a12[25 * v72 + 28].i32[0])
        {
          a12[2].i32[v72] = v78;
        }
        else
        {
          v79 = a12[3].i8[14] - 1;
          a12[3].i8[14] = v79;
          v80 = (char *)a12 + v79;
          v81 = v80[56];
          v80[56] = v72;
          *v71 = v81;
          --v70;
        }
        ++v70;
        v69 = a12[3].u8[14];
      }
      while (v70 < v69);
    }
  }
  return physx::Gu::MultiplePersistentContactManifold::addManifoldContactsToContactBuffer((uint64_t)a12, v23, v172);
}

BOOL physx::Gu::pcmContactConvexMesh(uint64_t a1, float *a2, uint64_t a3, uint64_t a4, uint64_t a5, float32x4_t **a6, uint64_t a7, uint64_t a8)
{
  float32x4_t *v8;
  uint64_t v16;
  __int128 v17;
  float *v18;
  float v19;
  float v20;
  char v22;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  BOOL PCMConvexData;
  float32x4_t v28;
  float32x4_t v29;
  float32x4_t v30;
  float32x4_t v31;
  int32x4_t v32;
  int32x2_t v33;
  int8x8_t v38;
  float32x4_t v39;
  int v40;
  float32x4_t v41;
  float32x4_t v42;
  float32x4_t v43;
  float32x4_t v44;
  float32x4_t v45;
  float32x4_t v46;
  float32x4_t v47;
  float32x2_t v48;
  float32x2_t v49;
  float32x2_t v50;
  float32x2_t v52;
  float32x2_t v53;
  float32x2_t v54;
  float32x2_t v55;
  float32x2_t v56;
  float32x2_t v57;
  float32x2_t v58;
  float32x2_t v59;
  float32x2_t v60;
  float32x2_t v61;
  int8x8_t v62;
  float32x4_t v63;
  int32x2_t v64;
  int8x8_t v65;
  float32x4_t v66;
  int8x8_t v67;
  float32x4_t v68;
  float32x4_t v69;
  float32x4_t v70;
  float32x4_t v71;
  float32x4_t v72;
  float32x4_t v73;
  float32x4_t v74;
  float32x4_t v75;
  float32x4_t v76;
  float32x4_t v77;
  float32x4_t v78;
  float32x4_t v79;
  float32x4_t v80;
  float32x4_t v81;
  float32x4_t v82;
  float32x4_t v83;
  float32x4_t v84;
  float32x4_t v85;
  float32x4_t v86;
  float32x4_t v87;
  float32x4_t v88;
  float32x4_t v89;
  float32x4_t v90;
  float32x4_t v91;
  float32x4_t v92;
  float32x4_t v93;
  float32x4_t v94;
  float32x4_t v95;
  float32x4_t v96;
  float32x4_t v97;
  float32x4_t v98;
  float32x4_t v99;
  _BYTE v100[104];
  _BYTE v101[24];
  _OWORD v102[4];
  uint64_t v103;
  char v104;
  _OWORD v105[4];
  uint64_t v106;
  char v107;
  _OWORD v108[2];
  _QWORD v109[4];
  _OWORD *v110;
  __int128 *v111;
  __int128 *v112;
  char v113;
  float32x4_t *v114;
  float32x4_t v115;
  __int128 v116;
  char v117;
  __int128 v118;
  __int128 v119;
  __int128 v120;
  __int128 v121;
  __int128 v122;
  __int128 v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  char v127;
  uint64_t v128;

  v128 = *MEMORY[0x24BDAC8D0];
  v8 = *a6;
  if (!*a6)
    return 0;
  v16 = *(_QWORD *)(a1 + 48);
  *(_QWORD *)&v17 = *(_QWORD *)(a3 + 16);
  *((_QWORD *)&v17 + 1) = *(unsigned int *)(a3 + 24);
  v108[0] = *(_OWORD *)a3;
  v108[1] = v17;
  v19 = a2[1];
  v20 = a2[2];
  v18 = a2 + 1;
  v22 = v19 == 1.0 && v20 == 1.0 && a2[3] == 1.0;
  v24 = xmmword_2260E5F10;
  v105[0] = xmmword_2260E5F10;
  v105[1] = xmmword_2260E5F10;
  v25 = xmmword_2260FD430;
  v26 = xmmword_2260E5F20;
  v105[2] = xmmword_2260FD430;
  v105[3] = xmmword_2260E5F20;
  v106 = 0x3F80000000000000;
  v107 = 0;
  if ((v22 & 1) == 0)
  {
    physx::Cm::FastVertex2ShapeScaling::init((uint64_t)v105, v18, a2 + 4);
    v25 = xmmword_2260FD430;
    v26 = xmmword_2260E5F20;
    v24 = xmmword_2260E5F10;
  }
  v102[0] = v24;
  v102[1] = v24;
  v102[2] = v25;
  v102[3] = v26;
  v103 = 0x3F80000000000000;
  v104 = 0;
  PCMConvexData = physx::Gu::getPCMConvexData(a1, (uint64_t)v102, (uint64_t)v101, (uint64_t)v100);
  v28 = *(float32x4_t *)(a1 + 16);
  v29 = *(float32x4_t *)(a1 + 4);
  v30 = v29;
  v30.i32[3] = 0;
  v31.i64[0] = *(_QWORD *)(v16 + 60);
  v31.i64[1] = *(unsigned int *)(v16 + 68);
  v32 = (int32x4_t)vmulq_f32(v30, v31);
  *(float32x2_t *)v32.i8 = vpmin_f32((float32x2_t)vdup_laneq_s32(v32, 2), *(float32x2_t *)v32.i8);
  *(float32x2_t *)v32.i8 = vpmin_f32(*(float32x2_t *)v32.i8, *(float32x2_t *)v32.i8);
  *(float *)v33.i32 = *(float *)(a5 + 8) * 0.05;
  __asm { FMOV            V5.2S, #0.25 }
  v38 = (int8x8_t)vmin_f32(vmul_f32(*(float32x2_t *)v32.i8, _D5), (float32x2_t)vdup_lane_s32(v33, 0));
  v117 = 0;
  v115 = 0u;
  v116 = 0u;
  v124 = v16;
  v126 = *(_QWORD *)(v16 + 40) + 20 * *(unsigned __int8 *)(v16 + 39);
  v127 = *(_BYTE *)(v16 + 38);
  *(float32x2_t *)&v116 = vmul_n_f32((float32x2_t)0x3D4CCCCD3DCCCCCDLL, *(float *)v32.i32);
  *((float *)&v116 + 2) = 0.025 * *(float *)v32.i32;
  if (PCMConvexData)
  {
    v118 = xmmword_2260E5F10;
    v119 = xmmword_2260E5F20;
    v120 = xmmword_2260E5F40;
    v121 = xmmword_2260E5F10;
    v122 = xmmword_2260E5F20;
    v123 = xmmword_2260E5F40;
    v125 = *(_QWORD *)(v16 + 48);
    v111 = &v118;
    v112 = &v121;
    v113 = 1;
    v110 = v108;
    v109[0] = &off_24ED91040;
    v114 = &v115;
    return physx::Gu::PCMContactConvexMesh((uint64_t)v100, (uint64_t)v109, (uint64_t)v101, (uint64_t)a2, a3, a4, a7, (uint64_t)v102, (uint64_t)v105, 1, v22, v8, a8);
  }
  else
  {
    v39 = vrecpeq_f32(v30);
    v40 = 4;
    do
    {
      v39 = vmulq_f32(v39, vrecpsq_f32(v39, v30));
      --v40;
    }
    while (v40);
    *(int32x2_t *)v41.f32 = vdup_lane_s32(*(int32x2_t *)v29.f32, 0);
    v41.i64[1] = v41.u32[0];
    if ((~vuzp1_s8((int8x8_t)vmovn_s32(vceqq_f32(v41, v30)), v38).u32[0] & 0xFFFFFF) != 0)
    {
      v48 = (float32x2_t)vdup_lane_s32(*(int32x2_t *)v28.f32, 1);
      v49 = (float32x2_t)vdup_laneq_s32((int32x4_t)v28, 2);
      v50 = (float32x2_t)vdup_laneq_s32((int32x4_t)v28, 3);
      _Q7 = vaddq_f32(v28, v28);
      v52 = (float32x2_t)vdup_lane_s32((int32x2_t)vmul_f32(*(float32x2_t *)v28.f32, *(float32x2_t *)_Q7.f32), 0);
      v53 = vmul_lane_f32(v48, *(float32x2_t *)_Q7.f32, 1);
      v54 = vmul_laneq_f32(v49, _Q7, 2);
      v55 = vmul_n_f32(v48, _Q7.f32[0]);
      v56 = vmul_n_f32(v49, _Q7.f32[0]);
      v57 = vmul_n_f32(v50, _Q7.f32[0]);
      v58 = vmul_lane_f32(v49, *(float32x2_t *)_Q7.f32, 1);
      v59 = vmul_lane_f32(v50, *(float32x2_t *)_Q7.f32, 1);
      v60 = vmul_laneq_f32(v50, _Q7, 2);
      __asm { FMOV            V7.2S, #1.0 }
      v61 = vsub_f32(*(float32x2_t *)_Q7.f32, v52);
      *(int8x8_t *)_Q7.f32 = vext_s8((int8x8_t)vsub_f32(vsub_f32(*(float32x2_t *)_Q7.f32, v53), v54), (int8x8_t)vadd_f32(v55, v60), 4uLL);
      v62 = (int8x8_t)vsub_f32(v55, v60);
      v63.i64[0] = _Q7.i64[0];
      v63.i64[1] = vsub_f32(v56, v59).u32[0];
      v64 = (int32x2_t)vext_s8(v62, (int8x8_t)vsub_f32(v61, v54), 4uLL);
      v65 = (int8x8_t)vadd_f32(v56, v59);
      *(int8x8_t *)v66.f32 = vext_s8((int8x8_t)vdup_lane_s32(*(int32x2_t *)_Q7.f32, 0), (int8x8_t)v64, 4uLL);
      v67 = (int8x8_t)vdup_lane_s32(v64, 1);
      *(int32x2_t *)v68.f32 = v64;
      v68.i64[1] = vadd_f32(v58, v57).u32[0];
      v64.i32[0] = vsub_f32(v61, v53).u32[0];
      *(int8x8_t *)v69.f32 = vext_s8(v65, (int8x8_t)vsub_f32(v58, v57), 4uLL);
      *(int8x8_t *)v70.f32 = vext_s8(*(int8x8_t *)_Q7.f32, v67, 4uLL);
      v69.i64[1] = v64.u32[0];
      v66.i64[1] = vdup_lane_s32(*(int32x2_t *)v69.f32, 0).u32[0];
      v70.i64[1] = vdup_lane_s32(*(int32x2_t *)v69.f32, 1).u32[0];
      *(int8x8_t *)v71.f32 = vext_s8((int8x8_t)vdup_lane_s32(*(int32x2_t *)&v63.u32[2], 0), *(int8x8_t *)&v68.u32[2], 4uLL);
      v71.i64[1] = vdup_lane_s32((int32x2_t)v64.u32[0], 0).u32[0];
      v72 = vmulq_n_f32(v66, v29.f32[0]);
      v72.i32[3] = 0;
      v73 = vmulq_lane_f32(v70, *(float32x2_t *)v29.f32, 1);
      v73.i32[3] = 0;
      v74 = vmulq_laneq_f32(v71, v29, 2);
      v74.i32[3] = 0;
      v75 = vmulq_n_f32(v72, v63.f32[0]);
      v75.i32[3] = 0;
      v76 = vmulq_lane_f32(v73, *(float32x2_t *)v63.f32, 1);
      v76.i32[3] = 0;
      v77 = vmulq_laneq_f32(v74, v63, 2);
      v77.i32[3] = 0;
      v42 = vaddq_f32(v77, vaddq_f32(v75, v76));
      v78 = vmulq_n_f32(v72, v68.f32[0]);
      v78.i32[3] = 0;
      v79 = vmulq_lane_f32(v73, *(float32x2_t *)v68.f32, 1);
      v79.i32[3] = 0;
      v80 = vmulq_laneq_f32(v74, v68, 2);
      v80.i32[3] = 0;
      v81 = vaddq_f32(v78, v79);
      v82 = vmulq_n_f32(v72, v69.f32[0]);
      v82.i32[3] = 0;
      v83 = vmulq_lane_f32(v73, *(float32x2_t *)v69.f32, 1);
      v83.i32[3] = 0;
      v84 = vmulq_laneq_f32(v74, v69, 2);
      v84.i32[3] = 0;
      v43 = vaddq_f32(v80, v81);
      v44 = vaddq_f32(v84, vaddq_f32(v82, v83));
      v118 = (__int128)v42;
      v119 = (__int128)v43;
      v120 = (__int128)v44;
      v85 = vmulq_n_f32(v66, v39.f32[0]);
      v85.i32[3] = 0;
      v86 = vmulq_lane_f32(v70, *(float32x2_t *)v39.f32, 1);
      v86.i32[3] = 0;
      v87 = vmulq_laneq_f32(v71, v39, 2);
      v87.i32[3] = 0;
      v88 = vmulq_n_f32(v85, v63.f32[0]);
      v88.i32[3] = 0;
      v89 = vmulq_lane_f32(v86, *(float32x2_t *)v63.f32, 1);
      v89.i32[3] = 0;
      v90 = vmulq_laneq_f32(v87, v63, 2);
      v90.i32[3] = 0;
      v45 = vaddq_f32(v90, vaddq_f32(v88, v89));
      v91 = vmulq_n_f32(v85, v68.f32[0]);
      v91.i32[3] = 0;
      v92 = vmulq_lane_f32(v86, *(float32x2_t *)v68.f32, 1);
      v92.i32[3] = 0;
      v93 = vmulq_laneq_f32(v87, v68, 2);
      v93.i32[3] = 0;
      v94 = vmulq_n_f32(v85, v69.f32[0]);
      v94.i32[3] = 0;
      v95 = vmulq_lane_f32(v86, *(float32x2_t *)v69.f32, 1);
      v95.i32[3] = 0;
      v46 = vaddq_f32(v93, vaddq_f32(v91, v92));
      v96 = vmulq_laneq_f32(v87, v69, 2);
      v96.i32[3] = 0;
      v47 = vaddq_f32(v96, vaddq_f32(v94, v95));
    }
    else
    {
      v39.i32[3] = 0;
      v42 = vmulq_f32(v30, (float32x4_t)xmmword_2260E5F10);
      v43 = vmulq_f32(v30, (float32x4_t)xmmword_2260E5F20);
      v44 = vmulq_f32(v30, (float32x4_t)xmmword_2260E5F40);
      v118 = (__int128)v42;
      v119 = (__int128)v43;
      v120 = (__int128)v44;
      v45 = vmulq_f32(v39, (float32x4_t)xmmword_2260E5F10);
      v46 = vmulq_f32(v39, (float32x4_t)xmmword_2260E5F20);
      v47 = vmulq_f32(v39, (float32x4_t)xmmword_2260E5F40);
    }
    v97 = vmulq_f32(v42, (float32x4_t)0);
    v97.i32[3] = 0;
    v98 = vmulq_f32(v43, (float32x4_t)0);
    v99 = vmulq_f32(v44, (float32x4_t)0);
    v98.i32[3] = 0;
    v99.i32[3] = 0;
    v122 = (__int128)v46;
    v123 = (__int128)v47;
    v121 = (__int128)v45;
    v115 = vaddq_f32(v99, vaddq_f32(v98, v97));
    v125 = *(_QWORD *)(v16 + 48);
    v111 = &v118;
    v112 = &v121;
    v113 = 0;
    v110 = v108;
    v109[0] = &off_24ED91090;
    v114 = &v115;
    return physx::Gu::PCMContactConvexMesh((uint64_t)v100, (uint64_t)v109, (uint64_t)v101, (uint64_t)a2, a3, a4, a7, (uint64_t)v102, (uint64_t)v105, 0, v22, v8, a8);
  }
}

BOOL physx::Gu::pcmContactBoxMesh(uint64_t a1, float *a2, uint64_t a3, uint64_t a4, uint64_t a5, float32x4_t **a6, uint64_t a7, uint64_t a8)
{
  float32x4_t *v8;
  uint64_t v14;
  unsigned int v15;
  int32x2_t v16;
  float *v17;
  float v18;
  float v19;
  char v21;
  __int128 v23;
  __int128 v24;
  float32x2_t v25;
  int32x4_t v26;
  _OWORD v28[3];
  _BYTE v29[8];
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  int v33;
  uint64_t v34;
  int v35;
  uint64_t *v36;
  uint64_t *v37;
  void *v38;
  __int128 v39;
  __int128 v40;
  _OWORD v41[2];
  _QWORD v42[2];
  float v43;
  float v44;
  float v45;
  int v46;
  char v47;
  __int128 v48;
  _OWORD v49[4];
  uint64_t v50;
  char v51;
  _OWORD v52[4];
  uint64_t v53;
  char v54;
  float32x2_t v55;
  float v56;
  unsigned int v57;
  int32x2_t v58;
  _QWORD v59[7];
  char v60;
  _QWORD *v61;
  uint64_t v62;

  v62 = *MEMORY[0x24BDAC8D0];
  v8 = *a6;
  if (!*a6)
    return 0;
  v14 = a1 + 4;
  v15 = *(_DWORD *)(a1 + 4);
  v16 = *(int32x2_t *)(a1 + 8);
  v55 = vneg_f32(*(float32x2_t *)(a1 + 4));
  v56 = -*(float *)&v16.i32[1];
  v57 = v15;
  v58 = v16;
  v18 = a2[1];
  v19 = a2[2];
  v17 = a2 + 1;
  v21 = v18 == 1.0 && v19 == 1.0 && a2[3] == 1.0;
  v52[0] = xmmword_2260E5F10;
  v52[1] = xmmword_2260E5F10;
  v23 = xmmword_2260FD430;
  v52[2] = xmmword_2260FD430;
  v52[3] = xmmword_2260E5F20;
  v53 = 0x3F80000000000000;
  v54 = 0;
  if ((v21 & 1) == 0)
  {
    physx::Cm::FastVertex2ShapeScaling::init((uint64_t)v52, v17, a2 + 4);
    v23 = xmmword_2260FD430;
    v15 = *(_DWORD *)(a1 + 4);
    v16 = *(int32x2_t *)(a1 + 8);
  }
  v49[0] = xmmword_2260E5F10;
  v49[1] = xmmword_2260E5F10;
  v49[2] = v23;
  v49[3] = xmmword_2260E5F20;
  v50 = 0x3F80000000000000;
  v51 = 0;
  *(_QWORD *)&v24 = __PAIR64__(v16.u32[0], v15);
  v25 = vpmin_f32((float32x2_t)vdup_lane_s32(v16, 1), (float32x2_t)__PAIR64__(v16.u32[0], v15));
  *((_QWORD *)&v24 + 1) = v16.u32[1];
  v25.f32[0] = vpmin_f32(v25, v25).f32[0];
  v46 = 3;
  v47 = 0;
  v42[1] = 0;
  v42[0] = 0;
  v48 = v24;
  v43 = 0.15 * v25.f32[0];
  v44 = 0.05 * v25.f32[0];
  v45 = 0.05 * v25.f32[0];
  v26.i64[0] = *(_QWORD *)(a3 + 16);
  v26.i64[1] = *(unsigned int *)(a3 + 24);
  v41[0] = *(_OWORD *)a3;
  v41[1] = v26;
  physx::Gu::PolygonalBox::PolygonalBox((uint64_t)v29, v14, *(double *)v41, v26);
  v32 = 0;
  v34 = 0x600000008;
  v33 = 0;
  v35 = 0;
  v36 = &v31;
  v37 = &v30;
  v38 = &physx::Gu::gPCMBoxPolygonData;
  v39 = 0u;
  v40 = 0u;
  v28[0] = xmmword_2260E5F10;
  v28[1] = xmmword_2260E5F20;
  v28[2] = xmmword_2260E5F40;
  v59[5] = v28;
  v59[6] = v28;
  v60 = 1;
  v59[4] = v41;
  v59[0] = &off_24ED90FE0;
  v61 = v42;
  return physx::Gu::PCMContactConvexMesh((uint64_t)&v32, (uint64_t)v59, (uint64_t)&v55, (uint64_t)a2, a3, a4, a7, (uint64_t)v49, (uint64_t)v52, 1, v21, v8, a8);
}

uint64_t physx::Gu::buildPartialHull(uint64_t result, uint64_t a2, _DWORD *a3, float32x4_t *a4, float32x4_t a5)
{
  uint64_t v8;
  float32x4_t v9;
  float32x2_t v10;
  float32x2_t v11;
  int v12;
  float32x2_t v18;
  float32x2_t v19;
  int v20;
  unint64_t v21;
  unint64_t v22;
  float32x4_t v23;
  uint64_t v24;
  int v25;
  _BYTE *v26;
  int v27;
  unsigned int v28;
  unsigned __int8 *v29;
  float32x4_t v30;
  float32x4_t *v31;
  float32x4_t v32;
  float32x4_t v33;
  unsigned int v34;
  float32x4_t v35;
  float32x4_t v36;
  float32x4_t v37;
  float32x2_t v38;
  float32x4_t *v39;
  float32x4_t v40;
  float32x4_t v41;
  float32x4_t v42;
  float32x4_t v43;
  float32x4_t v44;
  float32x4_t v45;
  float v49;
  float v50;
  float32x4_t v51;
  float32x4_t v52;
  uint64_t v53;
  float v54;

  v8 = result;
  v9 = vmulq_f32(a5, a5);
  v9.i64[0] = vpaddq_f32(v9, v9).u64[0];
  v10 = vpadd_f32(*(float32x2_t *)v9.f32, *(float32x2_t *)v9.f32);
  v11 = vrsqrte_f32(v10);
  v12 = 4;
  do
  {
    v11 = vmul_f32(v11, vrsqrts_f32(vmul_f32(v11, v11), v10));
    --v12;
  }
  while (v12);
  __asm { FMOV            V4.2S, #1.0 }
  v18 = vmul_f32(v10, (float32x2_t)vbsl_s8((int8x8_t)vdup_lane_s32(vceqz_f32(v10), 0), _D4, (int8x8_t)v11));
  v19 = vrecpe_f32(v18);
  v20 = 4;
  do
  {
    v19 = vmul_f32(v19, vrecps_f32(v18, v19));
    --v20;
  }
  while (v20);
  v21 = *(unsigned int *)(result + 16);
  if ((_DWORD)v21)
  {
    v22 = 0;
    v23 = vmulq_n_f32(a5, v19.f32[0]);
    v23.i32[3] = 0;
    v51 = v23;
    do
    {
      v24 = *(_QWORD *)(v8 + 24) + 20 * v22;
      v27 = *(unsigned __int8 *)(v24 + 18);
      v26 = (_BYTE *)(v24 + 18);
      v25 = v27;
      if (v27)
      {
        v28 = 0;
        v29 = (unsigned __int8 *)(*(_QWORD *)(v8 + 40) + *((unsigned __int16 *)v26 - 1));
        v30 = *(float32x4_t *)(*(_QWORD *)(v8 + 32) + 12 * *v29);
        v31 = *(float32x4_t **)(a2 + 40);
        v32 = vmulq_n_f32(*v31, v30.f32[0]);
        v32.i32[3] = 0;
        v33 = vmulq_lane_f32(v31[1], *(float32x2_t *)v30.f32, 1);
        v33.i32[3] = 0;
        v34 = v25 - 1;
        v35 = vmulq_laneq_f32(v31[2], v30, 2);
        v35.i32[3] = 0;
        v36 = vaddq_f32(vaddq_f32(v32, v33), v35);
        v37 = vmulq_f32(v23, vsubq_f32(v36, *a4));
        v37.i64[0] = vpaddq_f32(v37, v37).u64[0];
        v38 = vpadd_f32(*(float32x2_t *)v37.f32, *(float32x2_t *)v37.f32);
        do
        {
          v39 = *(float32x4_t **)(a2 + 40);
          v40 = *(float32x4_t *)(*(_QWORD *)(v8 + 32) + 12 * v29[v34]);
          v41 = vmulq_n_f32(*v39, v40.f32[0]);
          v41.i32[3] = 0;
          v42 = vmulq_lane_f32(v39[1], *(float32x2_t *)v40.f32, 1);
          v42.i32[3] = 0;
          v43 = vmulq_laneq_f32(v39[2], v40, 2);
          v43.i32[3] = 0;
          v44 = vaddq_f32(vaddq_f32(v41, v42), v43);
          v45 = vmulq_f32(v23, vsubq_f32(v44, *a4));
          v45.i64[0] = vpaddq_f32(v45, v45).u64[0];
          *(int32x2_t *)v41.f32 = vcgtz_f32(v38);
          v38 = vpadd_f32(*(float32x2_t *)v45.f32, *(float32x2_t *)v45.f32);
          if (vuzp1_s8((int8x8_t)vdup_lane_s16((int16x4_t)vorr_s8((int8x8_t)vcgtz_f32(v38), *(int8x8_t *)v41.f32), 0), *(int8x8_t *)v36.f32).u32[0] == -1)
          {
            _Q0 = vsubq_f32(v36, v44);
            _S1 = _Q0.i32[2];
            __asm { FMLA            S2, S1, V0.S[2] }
            v52 = v44;
            if (_S2 <= 0.0)
            {
              _Q0.i64[0] = 0;
              v50 = 0.0;
            }
            else
            {
              v49 = 1.0 / sqrtf(_S2);
              *(float32x2_t *)_Q0.f32 = vmul_n_f32(*(float32x2_t *)_Q0.f32, v49);
              v50 = _Q0.f32[2] * v49;
            }
            v53 = _Q0.i64[0];
            v54 = v50;
            result = physx::Gu::SeparatingAxes::addAxis(a3, (float *)&v53);
            LOBYTE(v25) = *v26;
            v23 = v51;
            v44 = v52;
          }
          v34 = v28++;
          v36 = v44;
        }
        while (v28 < v25);
        v21 = *(unsigned int *)(v8 + 16);
      }
      ++v22;
    }
    while (v22 < v21);
  }
  return result;
}

uint64_t physx::Gu::generatedContacts(uint64_t a1, uint64_t a2, float32x4_t *a3, float32x4_t *a4, uint64_t a5, uint64_t a6, float32x4_t *a7, uint64_t a8, _DWORD *a9, _QWORD *a10)
{
  uint64_t v15;
  float32x4_t v16;
  float32x4_t *v17;
  float32x4_t v18;
  float32x4_t v19;
  float32x4_t v20;
  unsigned __int32 v21;
  float32x4_t v22;
  uint64_t v23;
  float32x4_t v24;
  float32x2_t v25;
  float32x2_t v26;
  int v27;
  float32x2_t v32;
  float32x2_t v33;
  int v34;
  float32x4_t v35;
  float32x4_t v36;
  float32x4_t v37;
  float32x4_t v38;
  uint64_t v39;
  uint64_t v40;
  size_t v41;
  char *v42;
  float32x4_t *v43;
  size_t v44;
  uint64_t v45;
  size_t v46;
  char *v47;
  float32x4_t *v48;
  uint64_t v49;
  uint64_t v50;
  char *v51;
  uint64_t v52;
  uint64_t v53;
  char *v54;
  size_t v55;
  unint64_t v56;
  uint64_t v57;
  uint64_t result;
  float32x4_t v59;
  float32x4_t v60;
  float32x4_t v61;
  float32x4_t v62;
  float32x4_t v63;
  float32x4_t v64;
  float32x4_t v65;
  float32x4_t v66;
  unint64_t v67;
  float32x4_t v68;
  float32x4_t v69;
  float32x4_t v70;
  float32x4_t v71;
  float32x4_t v72;
  float32x4_t v73;
  float32x4_t v74;
  int v75;
  unint64_t v76;
  float32x4_t v77;
  unint64_t v78;
  unint64_t v79;
  _QWORD *v80;
  unint64_t v81;
  float v82;
  float32x4_t v83;
  float32x4_t v84;
  float32x2_t v85;
  int32x4_t v86;
  float32x4_t v87;
  float32x4_t v88;
  float32x4_t v89;
  float32x4_t v90;
  float32x4_t v91;
  float32x4_t v92;
  float32x4_t v93;
  float32x4_t v94;
  float32x4_t v95;
  int8x16_t v96;
  float32x4_t v97;
  float32x4_t v98;
  uint64_t v99;
  int32x2_t v100;
  uint64_t v102;
  float32x2_t v103;
  float32x2_t v104;
  uint64_t v105;
  float32x4_t v106;
  float32x2_t v107;
  float32x4_t v108;
  float32x2_t v109;
  float32x2_t v110;
  float32x2_t v111;
  float32x2_t v112;
  float32x2_t v113;
  int8x8_t v114;
  int8x8_t v115;
  int8x8_t v116;
  float32x4_t v117;
  float32x4_t v118;
  float32x4_t v119;
  float32x4_t v120;
  float32x4_t v121;
  unsigned int v122;
  float32x2_t v123;
  float32x4_t v124;
  float32x4_t *v125;
  float32x4_t v126;
  float32x4_t v127;
  float32x4_t v128;
  float32x4_t v129;
  float32x4_t v130;
  float32x2_t v131;
  float32x2_t v132;
  int v133;
  float32x2_t v134;
  float32x2_t v135;
  int v136;
  int v137;
  float32x4_t v138;
  unsigned int v139;
  unint64_t v140;
  float32x4_t v141;
  float32x4_t v142;
  float32x4_t v143;
  float32x4_t v144;
  float32x4_t v145;
  int8x16_t v146;
  int32x4_t v147;
  float32x2_t v148;
  float32x2_t v149;
  uint64_t v150;
  float32x4_t v151;
  int32x2_t v152;
  uint64_t v154;
  float32x2_t v155;
  float32x2_t v156;
  char v157;
  float32x4_t v158;
  float32x2_t v159;
  float32x4_t v160;
  float32x2_t v161;
  float32x2_t v162;
  float32x2_t v163;
  float32x2_t v164;
  float32x2_t v165;
  int8x8_t v166;
  int8x8_t v167;
  int8x8_t v168;
  float32x4_t v169;
  float32x4_t v170;
  float32x4_t v171;
  unsigned __int32 v172;
  float32x4_t v173;
  float32x4_t v174;
  float32x4_t v175;
  float32x4_t v176;
  float32x4_t v177;
  int8x16_t v178;
  float32x2_t v179;
  int v180;
  float32x2_t v181;
  float32x2_t v182;
  float32x2_t v183;
  int8x16_t v184;
  float32x4_t v185;
  unsigned int v186;
  unsigned int v187;
  uint64_t v188;
  uint64_t v189;
  int32x4_t v190;
  uint64_t v191;
  uint64_t v192;
  float32x4_t v193;
  float32x4_t v194;
  float32x4_t v195;
  float32x4_t v196;
  float32x4_t v197;
  uint64_t v198;
  float32x4_t v199;
  float32x4_t v200;
  float32x4_t v201;
  float32x4_t v202;
  int32x2_t v203;
  int32x2_t v204;
  float32x2_t v205;
  float32x2_t v206;
  int32x2_t v207;
  float32x2_t v208;
  float32x2_t v209;
  float32x2_t v210;
  float32x2_t v211;
  float32x2_t v212;
  float32x2_t v213;
  float32x2_t v214;
  float32x2_t v215;
  float32x2_t v216;
  int v217;
  float32x4_t v218;
  int32x4_t v219;
  float32x4_t v220;
  float32x4_t v221;
  float32x4_t v222;
  float32x4_t v223;
  float32x4_t v224;
  float32x4_t v225;
  float32x4_t v226;
  float32x4_t v227;
  float32x4_t v228;
  float32x4_t v229;
  float32x4_t v230;
  float32x4_t v231;
  unsigned int v232;
  uint64_t v233;
  uint64_t v234;
  uint64_t v235;
  uint64_t v236;
  float32x4_t v237;
  float32x4_t v238;
  float32x4_t v239;
  uint64_t v240;
  uint64_t v241;
  uint64_t v242;
  _QWORD *v243;
  float32x4_t v244;
  uint64_t v245;

  v245 = *MEMORY[0x24BDAC8D0];
  v240 = a1;
  v241 = a5;
  v15 = *(_QWORD *)(a1 + 40);
  v16 = *a3;
  v16.i64[1] = a3->u32[2];
  v17 = *(float32x4_t **)(a5 + 48);
  v18 = vmulq_f32(*v17, v16);
  v18.i64[0] = vpaddq_f32(v18, v18).u64[0];
  v19 = vmulq_f32(v16, v17[1]);
  v19.i64[0] = vpaddq_f32(v19, v19).u64[0];
  v20 = vmulq_f32(v16, v17[2]);
  v20.i64[0] = vpaddq_f32(v20, v20).u64[0];
  v21 = vpadd_f32(*(float32x2_t *)v20.f32, *(float32x2_t *)v20.f32).u32[0];
  *(int8x8_t *)v22.f32 = vext_s8((int8x8_t)vpadd_f32(*(float32x2_t *)v18.f32, *(float32x2_t *)v18.f32), (int8x8_t)vpadd_f32(*(float32x2_t *)v19.f32, *(float32x2_t *)v19.f32), 4uLL);
  v22.i64[1] = v21;
  v23 = a3[1].u16[0];
  v24 = vmulq_f32(v22, v22);
  v24.i64[0] = vpaddq_f32(v24, v24).u64[0];
  v25 = vpadd_f32(*(float32x2_t *)v24.f32, *(float32x2_t *)v24.f32);
  v26 = vrsqrte_f32(v25);
  v27 = 4;
  do
  {
    v26 = vmul_f32(v26, vrsqrts_f32(vmul_f32(v26, v26), v25));
    --v27;
  }
  while (v27);
  v242 = a6;
  v243 = a10;
  __asm { FMOV            V8.2S, #1.0 }
  v32 = vmul_f32(v25, (float32x2_t)vbsl_s8((int8x8_t)vdup_lane_s32(vceqz_f32(v25), 0), _D8, (int8x8_t)v26));
  v33 = vrecpe_f32(v32);
  v34 = 4;
  do
  {
    v33 = vmul_f32(v33, vrecps_f32(v32, v33));
    --v34;
  }
  while (v34);
  v236 = v15 + v23;
  v35 = vmulq_n_f32(v22, v33.f32[0]);
  v35.i32[3] = 0;
  v244 = v35;
  *(int8x8_t *)v36.f32 = physx::Gu::findRotationMatrixFromZAxis((int32x4_t *)&v244);
  v238 = v37;
  v239 = v36;
  v237 = v38;
  v235 = *(_QWORD *)(a2 + 40) + a4[1].u16[0];
  v39 = a3[1].u8[2];
  MEMORY[0x24BDAC7A8](v40);
  v234 = a2;
  v42 = (char *)&v233 - v41;
  bzero((char *)&v233 - v41, v41);
  v43 = (float32x4_t *)((unint64_t)(v42 + 15) & 0xFFFFFFFFFFFFFFF0);
  v44 = a4[1].u8[2];
  MEMORY[0x24BDAC7A8](v45);
  v47 = (char *)&v233 - v46;
  bzero((char *)&v233 - v46, v46);
  v48 = (float32x4_t *)((unint64_t)(v47 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v49);
  v51 = (char *)&v233 - v50;
  bzero((char *)&v233 - v50, v44);
  MEMORY[0x24BDAC7A8](v52);
  v54 = (char *)&v233 - v53;
  bzero((char *)&v233 - v53, v55);
  v56 = (unint64_t)(v54 + 15);
  (*(void (**)(uint64_t, uint64_t, uint64_t, _QWORD, float32x4_t *))(*(_QWORD *)v241 + 32))(v241, v236, v39, *(_QWORD *)(v240 + 32), v43);
  v57 = v242;
  result = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, _QWORD, float32x4_t *))(*(_QWORD *)v242 + 32))(v242, v235, a4[1].u8[2], *(_QWORD *)(v234 + 32), v48);
  v59 = v237;
  v60 = v238;
  v61 = v239;
  v62 = *v48;
  v63 = (float32x4_t)xmmword_2261AA230;
  v64 = (float32x4_t)xmmword_2261A69F0;
  v65 = (float32x4_t)xmmword_2261A69F0;
  v66 = (float32x4_t)xmmword_2261AA230;
  if (a3[1].i8[2])
  {
    v67 = 0;
    v68 = (float32x4_t)xmmword_2261A69F0;
    v69 = (float32x4_t)xmmword_2261AA230;
    do
    {
      v70 = v43[v67];
      v71 = vmulq_n_f32(v61, v70.f32[0]);
      v71.i32[3] = 0;
      v72 = vmulq_lane_f32(v60, *(float32x2_t *)v70.f32, 1);
      v72.i32[3] = 0;
      v73 = vmulq_laneq_f32(v59, v70, 2);
      v73.i32[3] = 0;
      v74 = vaddq_f32(v73, vaddq_f32(v71, v72));
      v43[v67] = v74;
      v68 = vminq_f32(v68, v74);
      v69 = vmaxq_f32(v69, v74);
      ++v67;
    }
    while (v67 < a3[1].u8[2]);
    v65 = vaddq_f32(v68, (float32x4_t)xmmword_2261AA650);
    v66 = vaddq_f32(v69, (float32x4_t)xmmword_2261AA660);
  }
  v75 = 0;
  v76 = v56 & 0xFFFFFFFFFFFFFFF0;
  v77 = *v43;
  LODWORD(v78) = a4[1].u8[2];
  v79 = *a9;
  v80 = v243;
  if (a4[1].i8[2] && v79 <= 0x3F)
  {
    v81 = 0;
    v75 = 0;
    v82 = v77.f32[2] + COERCE_FLOAT(*v243);
    v83 = (float32x4_t)xmmword_2261A69F0;
    v84 = (float32x4_t)xmmword_2261AA230;
    v85 = (float32x2_t)vextq_s8((int8x16_t)v77, (int8x16_t)v77, 8uLL).u64[0];
    v86.i64[0] = -1;
    v86.i64[1] = -1;
    do
    {
      v87 = v48[v81];
      v88 = vsubq_f32(v87, a7[3]);
      v89 = vmulq_f32(*a7, v88);
      v89.i64[0] = vpaddq_f32(v89, v89).u64[0];
      v90 = vmulq_f32(v88, a7[1]);
      v90.i64[0] = vpaddq_f32(v90, v90).u64[0];
      v91 = vmulq_f32(v88, a7[2]);
      v91.i64[0] = vpaddq_f32(v91, v91).u64[0];
      *(int8x8_t *)v92.f32 = vext_s8((int8x8_t)vpadd_f32(*(float32x2_t *)v89.f32, *(float32x2_t *)v89.f32), (int8x8_t)vpadd_f32(*(float32x2_t *)v90.f32, *(float32x2_t *)v90.f32), 4uLL);
      v92.i64[1] = vpadd_f32(*(float32x2_t *)v91.f32, *(float32x2_t *)v91.f32).u32[0];
      v93 = vmulq_n_f32(v61, v92.f32[0]);
      v93.i32[3] = 0;
      v94 = vmulq_lane_f32(v60, *(float32x2_t *)v92.f32, 1);
      v94.i32[3] = 0;
      v95 = vmulq_laneq_f32(v59, v92, 2);
      v95.i32[3] = 0;
      v96 = (int8x16_t)vaddq_f32(v95, vaddq_f32(v93, v94));
      v48[v81] = (float32x4_t)v96;
      *(int32x2_t *)(v76 + 8 * v81) = vdup_lane_s32((int32x2_t)vsub_f32((float32x2_t)*(_OWORD *)&vextq_s8(v96, v96, 8uLL), v85), 0);
      v97 = v48[v81];
      v98 = v97;
      v98.i32[2] = v77.i32[2];
      v48[v81] = v98;
      if (v82 > *(float *)&v96.i32[2])
      {
        v51[v81] = 1;
        v99 = a3[1].u8[2];
        v100 = (int32x2_t)vorrq_s8((int8x16_t)vcgtq_f32(v65, v98), (int8x16_t)vcgtq_f32(v98, v66)).u64[0];
        if (vuzp1_s8((int8x8_t)vmovn_s32(vceqq_s32((int32x4_t)vorrq_s8((int8x16_t)vdupq_lane_s32(v100, 0), (int8x16_t)vdupq_lane_s32(v100, 1)), v86)), *(int8x8_t *)v77.f32).u32[0] != -1&& (_DWORD)v99 != 0)
        {
          v102 = 0;
          v103 = (float32x2_t)vdup_lane_s32(*(int32x2_t *)v97.f32, 0);
          v104 = (float32x2_t)vdup_lane_s32(*(int32x2_t *)v97.f32, 1);
          LODWORD(v105) = v99 - 1;
          result = 1;
          while (1)
          {
            v106 = v43[v105];
            v105 = v102;
            v107 = (float32x2_t)vdup_lane_s32(*(int32x2_t *)v106.f32, 1);
            v108 = v43[v102];
            v109 = (float32x2_t)vdup_lane_s32(*(int32x2_t *)v108.f32, 1);
            v110 = (float32x2_t)vdup_lane_s32(*(int32x2_t *)v106.f32, 0);
            v111 = (float32x2_t)vdup_lane_s32(*(int32x2_t *)v108.f32, 0);
            if (vuzp1_s8((int8x8_t)vdup_lane_s16((int16x4_t)vorr_s8(vand_s8((int8x8_t)vceq_f32(v103, v111), (int8x8_t)vceq_f32(v104, v109)), vand_s8((int8x8_t)vceq_f32(v103, v110), (int8x8_t)vceq_f32(v104, v107))), 0), *(int8x8_t *)v77.f32).u32[0] == -1)break;
            if ((veor_s8((int8x8_t)vcgt_f32(v107, v104), (int8x8_t)vcgt_f32(v109, v104)).u8[0] & 1) != 0
              && (v112 = vsub_f32(v109, v107),
                  v113 = vmul_f32(vsub_f32(v104, v107), vsub_f32(v111, v110)),
                  v114 = (int8x8_t)vmul_n_f32(v112, v97.f32[0]),
                  v115 = (int8x8_t)vadd_f32(v113, vmul_f32(vadd_f32(v110, (float32x2_t)0x3400000034000000), v112)),
                  v116 = (int8x8_t)vdup_lane_s32(vcgtz_f32(v112), 0),
                  (vcge_f32((float32x2_t)vbsl_s8(v116, v115, v114), (float32x2_t)vbsl_s8(v116, v114, v115)).u8[0] & 1) != 0))
            {
              if ((result & 1) == 0)
                goto LABEL_29;
              result = 0;
              ++v102;
              if (v99 - 1 == v105)
                break;
            }
            else
            {
              ++v102;
              if (v99 == v105 + 1)
              {
                if ((result & 1) != 0)
                  goto LABEL_29;
                break;
              }
            }
          }
          ++v75;
          v117 = v244;
          v117.i32[3] = HIDWORD(*(_QWORD *)(v76 + 8 * v81));
          *(float32x4_t *)(a8 + 48 * *a9) = v87;
          v118 = v48[v81];
          v119 = vmulq_f32(v61, v118);
          v119.i64[0] = vpaddq_f32(v119, v119).u64[0];
          v120 = vmulq_f32(v60, v118);
          v120.i64[0] = vpaddq_f32(v120, v120).u64[0];
          v121 = vmulq_f32(v59, v118);
          v121.i64[0] = vpaddq_f32(v121, v121).u64[0];
          *(int8x8_t *)v119.f32 = vext_s8((int8x8_t)vpadd_f32(*(float32x2_t *)v119.f32, *(float32x2_t *)v119.f32), (int8x8_t)vpadd_f32(*(float32x2_t *)v120.f32, *(float32x2_t *)v120.f32), 4uLL);
          v119.i64[1] = vpadd_f32(*(float32x2_t *)v121.f32, *(float32x2_t *)v121.f32).u32[0];
          *(float32x4_t *)(a8 + 48 * *a9 + 16) = v119;
          v122 = (*a9)++;
          *(float32x4_t *)(a8 + 48 * v122 + 32) = v117;
        }
      }
      else
      {
        v51[v81] = 0;
      }
LABEL_29:
      v83 = vminq_f32(v83, v98);
      v84 = vmaxq_f32(v84, v98);
      ++v81;
      v78 = a4[1].u8[2];
      v79 = *a9;
    }
    while (v81 < v78 && v79 < 0x40);
    v64 = vaddq_f32(v83, (float32x4_t)xmmword_2261AA650);
    v63 = vaddq_f32(v84, (float32x4_t)xmmword_2261AA660);
  }
  if (v75 != (_DWORD)v78)
  {
    v123 = (float32x2_t)vdup_laneq_s32((int32x4_t)v77, 2);
    v124 = *a4;
    v124.i64[1] = a4->u32[2];
    v125 = *(float32x4_t **)(v57 + 48);
    v126 = vmulq_f32(*v125, v124);
    v126.i64[0] = vpaddq_f32(v126, v126).u64[0];
    v127 = vmulq_f32(v124, v125[1]);
    v127.i64[0] = vpaddq_f32(v127, v127).u64[0];
    v128 = vmulq_f32(v124, v125[2]);
    v128.i64[0] = vpaddq_f32(v128, v128).u64[0];
    *(int8x8_t *)v129.f32 = vext_s8((int8x8_t)vpadd_f32(*(float32x2_t *)v126.f32, *(float32x2_t *)v126.f32), (int8x8_t)vpadd_f32(*(float32x2_t *)v127.f32, *(float32x2_t *)v127.f32), 4uLL);
    v129.i64[1] = vpadd_f32(*(float32x2_t *)v128.f32, *(float32x2_t *)v128.f32).u32[0];
    v130 = vmulq_f32(v129, v129);
    v130.i64[0] = vpaddq_f32(v130, v130).u64[0];
    v131 = vpadd_f32(*(float32x2_t *)v130.f32, *(float32x2_t *)v130.f32);
    v132 = vrsqrte_f32(v131);
    v133 = 4;
    do
    {
      v132 = vmul_f32(v132, vrsqrts_f32(vmul_f32(v132, v132), v131));
      --v133;
    }
    while (v133);
    v134 = vmul_f32(v131, (float32x2_t)vbsl_s8((int8x8_t)vdup_lane_s32(vceqz_f32(v131), 0), _D8, (int8x8_t)v132));
    v135 = vrecpe_f32(v134);
    v136 = 4;
    do
    {
      v135 = vmul_f32(v135, vrecps_f32(v134, v135));
      --v136;
    }
    while (v136);
    v137 = 0;
    v138 = v244;
    v139 = a3[1].u8[2];
    if (a3[1].i8[2] && v79 <= 0x3F)
    {
      v140 = 0;
      v137 = 0;
      v141 = vmulq_n_f32(v129, v135.f32[0]);
      v141.i32[3] = 0;
      v142 = vmulq_n_f32(*a7, v244.f32[0]);
      v142.i32[3] = 0;
      v143 = vmulq_lane_f32(a7[1], *(float32x2_t *)v244.f32, 1);
      v143.i32[3] = 0;
      v144 = vmulq_laneq_f32(a7[2], v244, 2);
      v144.i32[3] = 0;
      v145 = vaddq_f32(vaddq_f32(v142, v143), v144);
      v146 = (int8x16_t)vmulq_f32(v141, v145);
      v147.i64[0] = -1;
      v147.i64[1] = -1;
      *(float32x2_t *)v146.i8 = vpadd_f32(*(float32x2_t *)v146.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v146, v146, 8uLL));
      v148 = vpadd_f32(*(float32x2_t *)v146.i8, *(float32x2_t *)v146.i8);
      v149 = vrecpe_f32(v148);
      do
      {
        v150 = a4[1].u8[2];
        v151 = v43[v140];
        v152 = (int32x2_t)vorrq_s8((int8x16_t)vcgtq_f32(v64, v151), (int8x16_t)vcgtq_f32(v151, v63)).u64[0];
        if (vuzp1_s8((int8x8_t)vmovn_s32(vceqq_s32((int32x4_t)vorrq_s8((int8x16_t)vdupq_lane_s32(v152, 0), (int8x16_t)vdupq_lane_s32(v152, 1)), v147)), *(int8x8_t *)v77.f32).u32[0] != -1&& (_DWORD)v150 != 0)
        {
          v154 = 0;
          v155 = (float32x2_t)vdup_lane_s32(*(int32x2_t *)v151.f32, 0);
          v156 = (float32x2_t)vdup_lane_s32(*(int32x2_t *)v151.f32, 1);
          LODWORD(result) = v150 - 1;
          v157 = 1;
          while (1)
          {
            v158 = v48[result];
            result = v154;
            v159 = (float32x2_t)vdup_lane_s32(*(int32x2_t *)v158.f32, 1);
            v160 = v48[v154];
            v161 = (float32x2_t)vdup_lane_s32(*(int32x2_t *)v160.f32, 1);
            v162 = (float32x2_t)vdup_lane_s32(*(int32x2_t *)v158.f32, 0);
            v163 = (float32x2_t)vdup_lane_s32(*(int32x2_t *)v160.f32, 0);
            if (vuzp1_s8((int8x8_t)vdup_lane_s16((int16x4_t)vorr_s8(vand_s8((int8x8_t)vceq_f32(v155, v163), (int8x8_t)vceq_f32(v156, v161)), vand_s8((int8x8_t)vceq_f32(v155, v162), (int8x8_t)vceq_f32(v156, v159))), 0), *(int8x8_t *)v77.f32).u32[0] == -1)break;
            if ((veor_s8((int8x8_t)vcgt_f32(v159, v156), (int8x8_t)vcgt_f32(v161, v156)).u8[0] & 1) != 0
              && (v164 = vsub_f32(v161, v159),
                  v165 = vmul_f32(vsub_f32(v156, v159), vsub_f32(v163, v162)),
                  v166 = (int8x8_t)vmul_n_f32(v164, v151.f32[0]),
                  v167 = (int8x8_t)vadd_f32(v165, vmul_f32(vadd_f32(v162, (float32x2_t)0x3400000034000000), v164)),
                  v168 = (int8x8_t)vdup_lane_s32(vcgtz_f32(v164), 0),
                  (vcge_f32((float32x2_t)vbsl_s8(v168, v167, v166), (float32x2_t)vbsl_s8(v168, v166, v167)).u8[0] & 1) != 0))
            {
              if ((v157 & 1) == 0)
                goto LABEL_45;
              v157 = 0;
              ++v154;
              if (v150 - 1 == result)
                break;
            }
            else
            {
              ++v154;
              if (v150 == result + 1)
              {
                if ((v157 & 1) != 0)
                  goto LABEL_45;
                break;
              }
            }
          }
          v169 = vmulq_f32(v61, v151);
          v169.i64[0] = vpaddq_f32(v169, v169).u64[0];
          v170 = vmulq_f32(v60, v151);
          v170.i64[0] = vpaddq_f32(v170, v170).u64[0];
          v171 = vmulq_f32(v59, v151);
          v171.i64[0] = vpaddq_f32(v171, v171).u64[0];
          v172 = vpadd_f32(*(float32x2_t *)v171.f32, *(float32x2_t *)v171.f32).u32[0];
          *(int8x8_t *)v173.f32 = vext_s8((int8x8_t)vpadd_f32(*(float32x2_t *)v169.f32, *(float32x2_t *)v169.f32), (int8x8_t)vpadd_f32(*(float32x2_t *)v170.f32, *(float32x2_t *)v170.f32), 4uLL);
          v173.i64[1] = v172;
          v174 = vmulq_n_f32(*a7, v173.f32[0]);
          v174.i32[3] = 0;
          v175 = vmulq_lane_f32(a7[1], *(float32x2_t *)v173.f32, 1);
          v175.i32[3] = 0;
          v176 = vmulq_laneq_f32(a7[2], v173, 2);
          v176.i32[3] = 0;
          v177 = vaddq_f32(a7[3], vaddq_f32(v176, vaddq_f32(v174, v175)));
          v178 = (int8x16_t)vmulq_f32(v141, vsubq_f32(v62, v177));
          v179 = (float32x2_t)vextq_s8(v178, v178, 8uLL).u64[0];
          v180 = 4;
          v181 = v149;
          do
          {
            v181 = vmul_f32(v181, vrecps_f32(v148, v181));
            --v180;
          }
          while (v180);
          v182 = vpadd_f32(*(float32x2_t *)v178.i8, v179);
          v183 = vmul_f32(v181, vpadd_f32(v182, v182));
          if (v183.f32[0] <= COERCE_FLOAT(*v80))
          {
            ++v137;
            v184 = (int8x16_t)vmlaq_n_f32(v177, v145, v183.f32[0]);
            v184.i64[1] = vextq_s8(v184, v184, 8uLL).u32[0];
            v185 = v138;
            v185.i32[3] = v183.i32[1];
            *(int8x16_t *)(a8 + 48 * v79) = v184;
            *(float32x4_t *)(a8 + 48 * *a9 + 16) = v173;
            v186 = (*a9)++;
            *(float32x4_t *)(a8 + 48 * v186 + 32) = v185;
            v139 = a3[1].u8[2];
            v79 = *a9;
          }
        }
LABEL_45:
        ++v140;
      }
      while (v140 < v139 && v79 < 0x40);
    }
    if (v137 != v139)
    {
      v187 = a4[1].u8[2];
      if (a4[1].i8[2])
      {
        v188 = 0;
        LODWORD(v189) = v187 - 1;
        v190.i64[0] = -1;
        v190.i64[1] = -1;
        do
        {
          v191 = v189;
          v189 = v188;
          if ((v51[v188] || v51[v191]) && v139 && v79 <= 0x3F)
          {
            v192 = 0;
            v193 = v48[v189];
            v194 = v48[v191];
            v195 = v193;
            v195.i32[2] = vadd_f32(v123, *(float32x2_t *)(v76 + 8 * v189)).u32[0];
            v196 = vminq_f32(v193, v194);
            v197 = vmaxq_f32(v193, v194);
            LODWORD(v198) = v139 - 1;
            v199 = v194;
            v199.i32[2] = vadd_f32(v123, *(float32x2_t *)(v76 + 8 * v191)).u32[0];
            v200 = vnegq_f32(vsubq_f32(v199, v195));
            do
            {
              v201 = v43[v198];
              v198 = v192;
              v202 = v43[v192];
              v203 = (int32x2_t)vorrq_s8((int8x16_t)vcgtq_f32(v196, vmaxq_f32(v202, v201)), (int8x16_t)vcgtq_f32(vminq_f32(v202, v201), v197)).u64[0];
              if (vuzp1_s8((int8x8_t)vmovn_s32(vceqq_s32((int32x4_t)vorrq_s8((int8x16_t)vdupq_lane_s32(v203, 0), (int8x16_t)vdupq_lane_s32(v203, 1)), v190)), *(int8x8_t *)v77.f32).u32[0] != -1)
              {
                v204 = (int32x2_t)vsub_f32(*(float32x2_t *)v202.f32, *(float32x2_t *)v193.f32);
                v205 = vsub_f32(*(float32x2_t *)v201.f32, *(float32x2_t *)v193.f32);
                v206 = vsub_f32(vmul_lane_f32((float32x2_t)vdup_lane_s32(v204, 0), v205, 1), vmul_n_f32((float32x2_t)vdup_lane_s32(v204, 1), v205.f32[0]));
                v207 = (int32x2_t)vsub_f32(*(float32x2_t *)v202.f32, *(float32x2_t *)v194.f32);
                v208 = vsub_f32(*(float32x2_t *)v201.f32, *(float32x2_t *)v194.f32);
                v209 = vsub_f32(vmul_lane_f32((float32x2_t)vdup_lane_s32(v207, 0), v208, 1), vmul_n_f32((float32x2_t)vdup_lane_s32(v207, 1), v208.f32[0]));
                if (vmul_f32(v206, v209).f32[0] < 0.0)
                {
                  v210 = vsub_f32(*(float32x2_t *)v193.f32, *(float32x2_t *)v202.f32);
                  v211 = vsub_f32(*(float32x2_t *)v194.f32, *(float32x2_t *)v202.f32);
                  v212 = vsub_f32(vmul_lane_f32(v210, v211, 1), vmul_lane_f32(v211, v210, 1));
                  v213 = vsub_f32(*(float32x2_t *)v193.f32, *(float32x2_t *)v201.f32);
                  v214 = vsub_f32(*(float32x2_t *)v194.f32, *(float32x2_t *)v201.f32);
                  if (vmul_f32(v212, vsub_f32(vmul_lane_f32(v213, v214, 1), vmul_lane_f32(v214, v213, 1))).f32[0] < 0.0)
                  {
                    v215 = vsub_f32(v209, v206);
                    v216 = vrecpe_f32(v215);
                    v217 = 4;
                    do
                    {
                      v216 = vmul_f32(v216, vrecps_f32(v215, v216));
                      --v217;
                    }
                    while (v217);
                    v218 = vmlaq_n_f32(v195, v200, vmul_f32(v206, v216).f32[0]);
                    v219 = (int32x4_t)vsubq_f32(v218, v77);
                    if (*(float *)&v219.i32[2] <= COERCE_FLOAT(*v80))
                    {
                      v218.i64[1] = vextq_s8((int8x16_t)v218, (int8x16_t)v218, 8uLL).u32[0];
                      v220 = v218;
                      v220.i32[2] = v77.i32[2];
                      v221 = vmulq_f32(v61, v218);
                      v221.i64[0] = vpaddq_f32(v221, v221).u64[0];
                      v222 = vmulq_f32(v60, v218);
                      v222.i64[0] = vpaddq_f32(v222, v222).u64[0];
                      *(int8x8_t *)v221.f32 = vext_s8((int8x8_t)vpadd_f32(*(float32x2_t *)v221.f32, *(float32x2_t *)v221.f32), (int8x8_t)vpadd_f32(*(float32x2_t *)v222.f32, *(float32x2_t *)v222.f32), 4uLL);
                      v223 = vmulq_f32(v59, v218);
                      v223.i64[0] = vpaddq_f32(v223, v223).u64[0];
                      v221.i64[1] = vpadd_f32(*(float32x2_t *)v223.f32, *(float32x2_t *)v223.f32).u32[0];
                      v224 = vmulq_n_f32(*a7, v221.f32[0]);
                      v224.i32[3] = 0;
                      v225 = vmulq_lane_f32(a7[1], *(float32x2_t *)v221.f32, 1);
                      v225.i32[3] = 0;
                      v226 = vmulq_laneq_f32(a7[2], v221, 2);
                      v226.i32[3] = 0;
                      v227 = vaddq_f32(a7[3], vaddq_f32(v226, vaddq_f32(v224, v225)));
                      v228 = vmulq_f32(v61, v220);
                      v228.i64[0] = vpaddq_f32(v228, v228).u64[0];
                      v229 = vmulq_f32(v60, v220);
                      v229.i64[0] = vpaddq_f32(v229, v229).u64[0];
                      *(int8x8_t *)v228.f32 = vext_s8((int8x8_t)vpadd_f32(*(float32x2_t *)v228.f32, *(float32x2_t *)v228.f32), (int8x8_t)vpadd_f32(*(float32x2_t *)v229.f32, *(float32x2_t *)v229.f32), 4uLL);
                      v230 = vmulq_f32(v59, v220);
                      v230.i64[0] = vpaddq_f32(v230, v230).u64[0];
                      v228.i64[1] = vpadd_f32(*(float32x2_t *)v230.f32, *(float32x2_t *)v230.f32).u32[0];
                      v231 = v138;
                      v231.i32[3] = vdupq_laneq_s32(v219, 2).i32[3];
                      *(float32x4_t *)(a8 + 48 * v79) = v227;
                      *(float32x4_t *)(a8 + 48 * *a9 + 16) = v228;
                      v232 = (*a9)++;
                      *(float32x4_t *)(a8 + 48 * v232 + 32) = v231;
                      v139 = a3[1].u8[2];
                      v79 = *a9;
                    }
                  }
                }
              }
              v192 = v198 + 1;
            }
            while (v198 + 1 < (unint64_t)v139 && v79 < 0x40);
            v187 = a4[1].u8[2];
          }
          v188 = v189 + 1;
        }
        while (v189 + 1 < (unint64_t)v187);
      }
    }
  }
  return result;
}

BOOL physx::Gu::generateFullContactManifold(uint64_t a1, uint64_t a2, _QWORD *a3, _QWORD *a4, uint64_t a5, _DWORD *a6, float32x2_t *a7, float32x4_t *a8, float a9, float a10, float a11, float32x4_t *a12, float32x2_t *a13, char a14)
{
  float32x4_t *v21;
  float32x4_t *v22;
  float32x4_t v23;
  float32x4_t v24;
  float32x4_t v25;
  float32x4_t v26;
  float32x4_t v27;
  float32x4_t v28;
  float32x4_t v29;
  float32x2_t v30;
  float32x4_t v31;
  float32x2_t v32;
  float32x2_t v33;
  int8x8_t v34;
  float32x4_t v35;
  float32x4_t v36;
  float32x4_t v37;
  float32x4_t v38;
  float32x4_t v39;
  float32x4_t v40;
  float32x4_t v41;
  int32x2_t v42;
  float32x4_t v43;
  int8x8_t v44;
  float32x4_t v45;
  float32x2_t v46;
  float32x4_t v47;
  float32x2_t v48;
  float32x2_t v49;
  float32x2_t v50;
  float32x2_t v51;
  float32x2_t v52;
  float32x2_t v53;
  float32x4_t v59;
  float32x4_t v60;
  float32x4_t v61;
  float32x4_t v62;
  float32x4_t v63;
  float32x2_t v64;
  int8x8_t v65;
  float32x4_t v66;
  float32x4_t v67;
  float32x4_t v68;
  float32x4_t v69;
  float32x4_t v70;
  float32x4_t v71;
  float32x4_t v72;
  float32x4_t v73;
  int8x8_t v74;
  float32x4_t v75;
  float32x4_t v76;
  float32x2_t v77;
  float32x2_t v78;
  float32x4_t v79;
  float32x4_t v80;
  float32x4_t v81;
  int v82;
  _BOOL8 result;
  float32x4_t v84;
  char v85;
  float32x4_t v86;
  float32x4_t v87;
  float32x4_t v88;
  float32x4_t v89;
  _OWORD *v90;
  float32x4_t *v91;
  float32x4_t v92;
  float32x4_t v93;
  float32x4_t v94;
  float32x4_t v95;
  float32x4_t v96;
  float32x4_t v97;
  float32x2_t v98;
  uint64_t v99;
  unsigned int v100;
  _OWORD *v101;
  uint64_t j;
  float32x4_t v103;
  float32x4_t v104;
  float32x4_t v105;
  float32x2_t v106;
  unsigned int v107;
  _OWORD *v108;
  float32x4_t v109;
  float32x4_t *v110;
  float32x4_t v111;
  float32x4_t v112;
  float32x4_t v113;
  unsigned __int32 v114;
  float32x4_t v115;
  float32x4_t v116;
  float32x4_t v117;
  float32x2_t v118;
  uint64_t v119;
  unsigned int v120;
  _OWORD *v121;
  uint64_t k;
  float32x4_t v123;
  float32x4_t v124;
  float32x4_t v125;
  float32x2_t v126;
  unsigned int v127;
  uint64_t v128;
  uint64_t v129;
  float32x4_t v130;
  uint64_t v131;
  float32x2_t v132;
  int v133;
  unsigned __int8 *v134;
  float32x4_t v135;
  float32x4_t v136;
  float32x4_t v137;
  float32x4_t v138;
  float32x2_t v139;
  float32x4_t v140;
  float32x2_t v141;
  float32x2_t v142;
  float32x2_t v143;
  int v144;
  unsigned __int8 *v145;
  unsigned int v146;
  float32x4_t v147;
  float32x4_t v148;
  float32x4_t v149;
  float32x4_t v150;
  float32x4_t v151;
  float32x4_t v152;
  float32x4_t v153;
  _OWORD *v154;
  float32x4_t v155;
  float32x4_t *v156;
  float32x4_t v157;
  float32x4_t v158;
  float32x4_t v159;
  unsigned __int32 v160;
  float32x4_t v161;
  float32x4_t v162;
  float32x4_t v163;
  float32x2_t v164;
  uint64_t v165;
  unsigned int v166;
  _OWORD *v167;
  uint64_t m;
  float32x4_t v169;
  float32x4_t v170;
  float32x4_t v171;
  float32x2_t v172;
  unsigned int v173;
  uint64_t v174;
  uint64_t v175;
  float32x4_t v176;
  uint64_t v177;
  float32x2_t v178;
  int v179;
  unsigned __int8 *v180;
  float32x4_t v181;
  float32x4_t v182;
  float32x4_t v183;
  float32x4_t v184;
  float32x2_t v185;
  float32x4_t v186;
  float32x2_t v187;
  float32x2_t v188;
  float32x2_t v189;
  int v190;
  unsigned __int8 *v191;
  unsigned int v192;
  float32x4_t v193;
  float32x4_t v194;
  float32x4_t v195;
  float32x4_t v196;
  float32x4_t *v197;
  float32x4_t *v198;
  float32x4_t v199;
  float32x4_t v200;
  float32x4_t v201;
  _OWORD *v202;
  float32x4_t v203;
  float32x4_t *v204;
  float32x4_t v205;
  float32x4_t v206;
  float32x4_t v207;
  unsigned __int32 v208;
  float32x4_t v209;
  float32x4_t v210;
  float32x4_t v211;
  float32x2_t v212;
  uint64_t v213;
  unsigned int v214;
  _OWORD *v215;
  uint64_t i;
  float32x4_t v217;
  float32x4_t v218;
  float32x4_t v219;
  float32x2_t v220;
  unsigned int v221;
  uint64_t v222;
  uint64_t v223;
  float32x4_t v224;
  uint64_t v225;
  float32x2_t v226;
  int v227;
  unsigned __int8 *v228;
  float32x4_t v229;
  float32x4_t v230;
  float32x4_t v231;
  float32x4_t v232;
  float32x2_t v233;
  float32x4_t v234;
  float32x2_t v235;
  float32x2_t v236;
  float32x2_t v237;
  int v238;
  unsigned __int8 *v239;
  unsigned int v240;
  float32x4_t v241;
  float32x4_t v242;
  float32x4_t v243;
  float32x4_t v244;
  unint64_t v245;
  float32x4_t v246;
  uint64_t v247;
  __int128 v248;
  float32x4_t v249;
  unint64_t v250;
  uint64_t v251;
  uint64_t v252;
  float32x4_t v253;
  uint64_t v254;
  float32x2_t v255;
  int v256;
  unsigned __int8 *v257;
  float32x4_t v258;
  float32x4_t v259;
  float32x4_t v260;
  float32x4_t v261;
  float32x2_t v262;
  float32x4_t v263;
  float32x2_t v264;
  float32x2_t v265;
  float32x2_t v266;
  int v267;
  unsigned __int8 *v268;
  unsigned int v269;
  float32x4_t v270;
  float32x4_t v271;
  float32x4_t v272;
  float32x4_t v273;
  char v274;
  float v275;
  float v276;
  float v277;
  float v278;
  float v279;
  float32x4_t v280;
  float32x4_t v281;
  int8x8_t v282;
  float32x4_t v283;
  int8x8_t v284;
  float32x4_t v285;
  unsigned __int32 v286;
  float32x4_t *v287;
  float32x4_t v288;
  float32x4_t v289;
  float32x4_t v290;
  uint64_t v292;
  float v295;
  float v296;
  uint64_t v297;
  unsigned int v298;
  unsigned int v299;
  float *v300;
  uint64_t n;
  float v302;
  float v303;
  float32x4_t v304;
  float32x4_t v305;
  float32x4_t v306;
  float32x4_t v307;
  float32x4_t v308;
  unsigned __int32 v309;
  float32x4_t v310;
  uint64_t v311;
  float32x4_t v312;
  float32x2_t v313;
  float32x2_t v314;
  int v315;
  float32x2_t v316;
  float32x2_t v317;
  int v318;
  uint64_t v319;
  float32x4_t v320;
  float32x4_t v321;
  float32x2_t v322;
  float32x4_t v323;
  float32x4_t v324;
  float32x4_t v325;
  float32x4_t v326;
  unsigned __int32 v327;
  float32x4_t v328;
  float32x4_t v329;
  float32x2_t v330;
  float32x2_t v331;
  int v332;
  float32x2_t v333;
  float32x2_t v334;
  int v335;
  float32x4_t v336;
  float32x4_t v337;
  float32x2_t v338;
  unsigned int v339;
  float32x4_t v340;
  float32x4_t v341;
  float32x4_t v342;
  float32x4_t v343;
  float32x4_t v344;
  float32x4_t *v345;
  float32x4_t v346;
  float32x4_t v347;
  float32x4_t v348;
  uint64_t v350;
  float v353;
  float v354;
  uint64_t v355;
  unsigned int v356;
  unsigned int v357;
  float *v358;
  uint64_t ii;
  float v360;
  float v361;
  float32x4_t v362;
  float32x4_t v363;
  float32x4_t v364;
  float32x4_t v365;
  unsigned __int32 v366;
  float32x4_t v367;
  uint64_t v368;
  float32x4_t v369;
  float32x2_t v370;
  float32x2_t v371;
  int v372;
  float32x2_t v373;
  float32x2_t v374;
  int v375;
  uint64_t v376;
  float32x4_t v377;
  float32x4_t v378;
  float32x2_t v379;
  float32x4_t v380;
  float32x4_t v381;
  float32x4_t v382;
  float32x4_t v383;
  unsigned __int32 v384;
  float32x4_t v385;
  float32x4_t v386;
  float32x2_t v387;
  float32x2_t v388;
  int v389;
  float32x2_t v390;
  float32x2_t v391;
  int v392;
  float32x4_t v393;
  float32x4_t v394;
  float32x2_t v395;
  unsigned int v396;
  float32x4_t *v397;
  float32x4_t v398;
  float32x4_t v399;
  float32x4_t v400;
  float32x4_t v401;
  unsigned __int32 v402;
  float32x4_t v403;
  float32x4_t v404;
  float32x2_t v405;
  float32x2_t v406;
  int v407;
  float32x2_t v408;
  float32x2_t v409;
  int v410;
  uint64_t v411;
  float32x4_t v412;
  float32x4_t v413;
  float32x4_t v414;
  float32x4_t v415;
  unsigned __int32 v416;
  float32x4_t v417;
  float32x4_t v418;
  float32x2_t v419;
  float32x2_t v420;
  int v421;
  float32x2_t v422;
  float32x2_t v423;
  int v424;
  float32x4_t v425;
  float32x4_t v426;
  float32x4_t v427;
  float32x4_t v428;
  float32x4_t v429;
  unint64_t v430;
  float32x4_t v431;
  float32x4_t v432;
  float32x4_t v433;
  float32x4_t v434;
  uint64_t v435;
  __int128 v436;
  float32x4_t v437;
  unsigned int v438;
  unsigned int v439;
  float32x4_t v440;
  float32x4_t v441;
  float32x4_t v442;
  float32x4_t v443;
  float32x4_t v444;
  float32x4_t v445;
  float32x4_t v446;
  float32x4_t v447;
  unsigned int v448;
  unsigned int v449;
  int32x2_t v450;
  int v451;
  float32x4_t v452[4];
  float32x4_t v453[4];
  float32x4_t v454[64];
  uint64_t v455;

  v455 = *MEMORY[0x24BDAC8D0];
  v21 = (float32x4_t *)a3[4];
  v22 = (float32x4_t *)a4[4];
  v23 = *v21;
  v24 = v21[1];
  v25 = vnegq_f32(*v21);
  v26 = v25;
  v26.i32[3] = 0;
  v27 = *v22;
  v28 = v22[1];
  v29 = vsubq_f32(v28, v24);
  v30 = (float32x2_t)vdupq_laneq_s32(*(int32x4_t *)v21, 3).u64[0];
  v31 = vmulq_n_f32(v29, vmla_f32((float32x2_t)0xBF000000BF000000, v30, v30).f32[0]);
  v31.i32[3] = 0;
  v32 = (float32x2_t)vextq_s8((int8x16_t)v26, (int8x16_t)v26, 8uLL).u64[0];
  v33 = (float32x2_t)vext_s8(*(int8x8_t *)v25.f32, (int8x8_t)v32, 4uLL);
  v34 = (int8x8_t)vmls_f32(vmul_f32(*(float32x2_t *)v25.f32, (float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v29, (int8x16_t)v29, 4uLL)), v33, *(float32x2_t *)v29.f32);
  *(int8x8_t *)v35.f32 = vext_s8(v34, (int8x8_t)vmls_f32(vmul_f32(v32, *(float32x2_t *)v29.f32), *(float32x2_t *)v25.f32, (float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v29, (int8x16_t)v29, 8uLL)), 4uLL);
  v35.i64[1] = v34.u32[0];
  v36 = vmlaq_laneq_f32(v31, v35, *v21, 3);
  v36.i64[1] = vextq_s8((int8x16_t)v36, (int8x16_t)v36, 8uLL).u32[0];
  v37 = vmulq_f32(v26, v29);
  v37.i64[0] = vpaddq_f32(v37, v37).u64[0];
  v38 = vmlaq_n_f32(v36, v26, vpadd_f32(*(float32x2_t *)v37.f32, *(float32x2_t *)v37.f32).f32[0]);
  v39 = vaddq_f32(v38, v38);
  v39.i32[3] = 0;
  v40 = *v22;
  v40.i32[3] = 0;
  *(float32x2_t *)v37.f32 = vmul_f32((float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v23, (int8x16_t)v23, 8uLL), (float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v27, (int8x16_t)v27, 8uLL));
  v41 = vmulq_f32(v26, v40);
  v41.i64[0] = vpaddq_f32(v41, v41).u64[0];
  v42 = (int32x2_t)vsub_f32(*(float32x2_t *)v37.f32, vpadd_f32(*(float32x2_t *)v41.f32, *(float32x2_t *)v41.f32));
  v41.i64[0] = vdupq_laneq_s32(*(int32x4_t *)v22, 3).u64[0];
  v43 = vmulq_laneq_f32(v40, *v21, 3);
  v40.i64[0] = vextq_s8((int8x16_t)v40, (int8x16_t)v40, 8uLL).u64[0];
  v44 = (int8x8_t)vmls_f32(vmul_f32(*(float32x2_t *)v25.f32, (float32x2_t)vext_s8(*(int8x8_t *)v22->f32, *(int8x8_t *)v40.f32, 4uLL)), v33, *(float32x2_t *)v22->f32);
  *(int8x8_t *)v25.f32 = vext_s8(v44, (int8x8_t)vmls_f32(vmul_f32(v32, *(float32x2_t *)v22->f32), *(float32x2_t *)v25.f32, *(float32x2_t *)v40.f32), 4uLL);
  *(int8x8_t *)&v25.u32[2] = v44;
  v45 = vaddq_f32(vaddq_f32(vmulq_laneq_f32(v26, *v22, 3), v43), v25);
  *(int32x2_t *)v26.f32 = vdup_lane_s32(*(int32x2_t *)v45.f32, 1);
  v46 = (float32x2_t)vdup_laneq_s32((int32x4_t)v45, 2);
  *(int32x2_t *)v40.f32 = vdup_lane_s32(v42, 1);
  v453[3] = v39;
  v47 = vaddq_f32(v45, v45);
  v48 = (float32x2_t)vdup_lane_s32((int32x2_t)vmul_f32(*(float32x2_t *)v45.f32, *(float32x2_t *)v47.f32), 0);
  v49 = vmul_lane_f32(*(float32x2_t *)v26.f32, *(float32x2_t *)v47.f32, 1);
  *(float32x2_t *)v43.f32 = vmul_laneq_f32(v46, v47, 2);
  *(float32x2_t *)v26.f32 = vmul_n_f32(*(float32x2_t *)v26.f32, v47.f32[0]);
  v50 = vmul_n_f32(v46, v47.f32[0]);
  v51 = vmul_n_f32(*(float32x2_t *)v40.f32, v47.f32[0]);
  v52 = vmul_lane_f32(v46, *(float32x2_t *)v47.f32, 1);
  v53 = vmul_lane_f32(*(float32x2_t *)v40.f32, *(float32x2_t *)v47.f32, 1);
  *(float32x2_t *)v47.f32 = vmul_laneq_f32(*(float32x2_t *)v40.f32, v47, 2);
  __asm { FMOV            V3.2S, #1.0 }
  *(float32x2_t *)v40.f32 = vsub_f32(_D3, v48);
  *(int8x8_t *)v59.f32 = vext_s8((int8x8_t)vsub_f32(vsub_f32(_D3, v49), *(float32x2_t *)v43.f32), (int8x8_t)vadd_f32(*(float32x2_t *)v26.f32, *(float32x2_t *)v47.f32), 4uLL);
  v59.i64[1] = vsub_f32(v50, v53).u32[0];
  *(int8x8_t *)v26.f32 = vext_s8((int8x8_t)vsub_f32(*(float32x2_t *)v26.f32, *(float32x2_t *)v47.f32), (int8x8_t)vsub_f32(*(float32x2_t *)v40.f32, *(float32x2_t *)v43.f32), 4uLL);
  v26.i64[1] = vadd_f32(v52, v51).u32[0];
  v442 = v26;
  v443 = v59;
  v453[0] = v59;
  v453[1] = v26;
  *(int8x8_t *)v26.f32 = vext_s8((int8x8_t)vadd_f32(v50, v53), (int8x8_t)vsub_f32(v52, v51), 4uLL);
  v26.i64[1] = vsub_f32(*(float32x2_t *)v40.f32, v49).u32[0];
  v441 = v26;
  v453[2] = v26;
  v60 = vnegq_f32(v27);
  v61 = vsubq_f32(v24, v28);
  v62 = v60;
  v62.i32[3] = 0;
  v63 = vmulq_n_f32(v61, vmla_f32((float32x2_t)0xBF000000BF000000, *(float32x2_t *)v41.f32, *(float32x2_t *)v41.f32).f32[0]);
  v63.i32[3] = 0;
  v64 = (float32x2_t)vextq_s8((int8x16_t)v62, (int8x16_t)v62, 8uLL).u64[0];
  *(int8x8_t *)v40.f32 = vext_s8(*(int8x8_t *)v60.f32, (int8x8_t)v64, 4uLL);
  v65 = (int8x8_t)vmls_f32(vmul_f32((float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v61, (int8x16_t)v61, 4uLL), *(float32x2_t *)v60.f32), *(float32x2_t *)v40.f32, *(float32x2_t *)v61.f32);
  *(int8x8_t *)v41.f32 = vext_s8(v65, (int8x8_t)vmls_f32(vmul_f32(*(float32x2_t *)v61.f32, v64), *(float32x2_t *)v60.f32, (float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v61, (int8x16_t)v61, 8uLL)), 4uLL);
  v41.i64[1] = v65.u32[0];
  v66 = vmlaq_laneq_f32(v63, v41, v27, 3);
  v66.i64[1] = vextq_s8((int8x16_t)v66, (int8x16_t)v66, 8uLL).u32[0];
  v67 = vmulq_f32(v61, v62);
  v67.i64[0] = vpaddq_f32(v67, v67).u64[0];
  v68 = vmlaq_n_f32(v66, v62, vpadd_f32(*(float32x2_t *)v67.f32, *(float32x2_t *)v67.f32).f32[0]);
  v69 = vaddq_f32(v68, v68);
  v69.i32[3] = 0;
  v70 = v23;
  v70.i32[3] = 0;
  v71 = vmulq_f32(v70, v62);
  v71.i64[0] = vpaddq_f32(v71, v71).u64[0];
  v72 = vmulq_laneq_f32(v62, v23, 3);
  v73 = vmulq_laneq_f32(v70, v27, 3);
  v70.i64[0] = vextq_s8((int8x16_t)v70, (int8x16_t)v70, 8uLL).u64[0];
  v74 = (int8x8_t)vmls_f32(vmul_f32((float32x2_t)vext_s8(*(int8x8_t *)v23.f32, *(int8x8_t *)v70.f32, 4uLL), *(float32x2_t *)v60.f32), *(float32x2_t *)v40.f32, *(float32x2_t *)v23.f32);
  *(int8x8_t *)v23.f32 = vext_s8(v74, (int8x8_t)vmls_f32(vmul_f32(*(float32x2_t *)v23.f32, v64), *(float32x2_t *)v60.f32, *(float32x2_t *)v70.f32), 4uLL);
  *(int8x8_t *)&v23.u32[2] = v74;
  v75 = vaddq_f32(vaddq_f32(v72, v73), v23);
  *(int32x2_t *)v73.f32 = vdup_lane_s32(*(int32x2_t *)v75.f32, 1);
  *(int32x2_t *)v70.f32 = vdup_laneq_s32((int32x4_t)v75, 2);
  v76 = vaddq_f32(v75, v75);
  v77 = (float32x2_t)vdup_laneq_s32((int32x4_t)v76, 2);
  *(float32x2_t *)v37.f32 = vsub_f32(*(float32x2_t *)v37.f32, vpadd_f32(*(float32x2_t *)v71.f32, *(float32x2_t *)v71.f32));
  *(int32x2_t *)v75.f32 = vdup_lane_s32((int32x2_t)vmul_f32(*(float32x2_t *)v75.f32, *(float32x2_t *)v76.f32), 0);
  *(float32x2_t *)v71.f32 = vmul_lane_f32(*(float32x2_t *)v73.f32, *(float32x2_t *)v76.f32, 1);
  *(float32x2_t *)v40.f32 = vmul_laneq_f32(*(float32x2_t *)v70.f32, v76, 2);
  *(float32x2_t *)v73.f32 = vmul_n_f32(*(float32x2_t *)v73.f32, v76.f32[0]);
  v78 = vmul_n_f32(*(float32x2_t *)v70.f32, v76.f32[0]);
  *(float32x2_t *)v60.f32 = vmul_lane_f32((float32x2_t)vdup_lane_s32(*(int32x2_t *)v76.f32, 0), *(float32x2_t *)v37.f32, 1);
  *(float32x2_t *)v70.f32 = vmul_lane_f32(*(float32x2_t *)v70.f32, *(float32x2_t *)v76.f32, 1);
  *(float32x2_t *)v76.f32 = vmul_lane_f32((float32x2_t)vdup_lane_s32(*(int32x2_t *)v76.f32, 1), *(float32x2_t *)v37.f32, 1);
  *(float32x2_t *)v37.f32 = vmul_lane_f32(v77, *(float32x2_t *)v37.f32, 1);
  *(float32x2_t *)v75.f32 = vsub_f32(_D3, *(float32x2_t *)v75.f32);
  *(int8x8_t *)v79.f32 = vext_s8((int8x8_t)vsub_f32(vsub_f32(_D3, *(float32x2_t *)v71.f32), *(float32x2_t *)v40.f32), (int8x8_t)vadd_f32(*(float32x2_t *)v73.f32, *(float32x2_t *)v37.f32), 4uLL);
  v79.i64[1] = vsub_f32(v78, *(float32x2_t *)v76.f32).u32[0];
  *(int8x8_t *)v80.f32 = vext_s8((int8x8_t)vsub_f32(*(float32x2_t *)v73.f32, *(float32x2_t *)v37.f32), (int8x8_t)vsub_f32(*(float32x2_t *)v75.f32, *(float32x2_t *)v40.f32), 4uLL);
  v80.i64[1] = vadd_f32(*(float32x2_t *)v70.f32, *(float32x2_t *)v60.f32).u32[0];
  v452[0] = v79;
  v452[1] = v80;
  *(int8x8_t *)v81.f32 = vext_s8((int8x8_t)vadd_f32(v78, *(float32x2_t *)v76.f32), (int8x8_t)vsub_f32(*(float32x2_t *)v70.f32, *(float32x2_t *)v60.f32), 4uLL);
  v81.i64[1] = vsub_f32(*(float32x2_t *)v75.f32, *(float32x2_t *)v71.f32).u32[0];
  v452[2] = v81;
  v452[3] = v69;
  v446 = v80;
  v447 = v79;
  v445 = v81;
  if (a14)
  {
    v451 = 0;
    v450 = vdup_n_s32(0x7F7FFFFFu);
    v454[0] = 0uLL;
    v449 = 0;
    if ((physx::Gu::testFaceNormal(a1, a2, (uint64_t)a3, (uint64_t)a4, v452, v453, a7, &v450, &v449, (int8x16_t *)v454, 0, &v451) & 1) != 0)
    {
      v448 = 0;
      v82 = physx::Gu::testFaceNormal(a2, a1, (uint64_t)a4, (uint64_t)a3, v453, v452, a7, &v450, &v448, (int8x16_t *)v454, 1, &v451);
      result = 0;
      v84 = v447;
      if (v82)
      {
        v85 = 0;
        v439 = v448;
        v438 = v449;
        while ((v85 & 1) == 0)
        {
          if (v451 == 1)
          {
            v199 = vmulq_n_f32(v443, v454[0].f32[0]);
            v199.i32[3] = 0;
            v200 = vmulq_lane_f32(v442, *(float32x2_t *)v454[0].f32, 1);
            v200.i32[3] = 0;
            v201 = vmulq_laneq_f32(v441, v454[0], 2);
            v201.i32[3] = 0;
            v202 = *(_OWORD **)(a1 + 24);
            v203 = vaddq_f32(v201, vaddq_f32(v199, v200));
            v204 = (float32x4_t *)a3[5];
            v205 = vmulq_f32(*v204, v203);
            v205.i64[0] = vpaddq_f32(v205, v205).u64[0];
            v206 = vmulq_f32(v204[1], v203);
            v206.i64[0] = vpaddq_f32(v206, v206).u64[0];
            v207 = vmulq_f32(v203, v204[2]);
            v207.i64[0] = vpaddq_f32(v207, v207).u64[0];
            v208 = vpadd_f32(*(float32x2_t *)v207.f32, *(float32x2_t *)v207.f32).u32[0];
            *(int8x8_t *)v209.f32 = vext_s8((int8x8_t)vpadd_f32(*(float32x2_t *)v205.f32, *(float32x2_t *)v205.f32), (int8x8_t)vpadd_f32(*(float32x2_t *)v206.f32, *(float32x2_t *)v206.f32), 4uLL);
            v209.i64[1] = v208;
            v210 = *(float32x4_t *)v202;
            v210.i32[3] = 0;
            v211 = vmulq_f32(v210, v209);
            v211.i64[0] = vpaddq_f32(v211, v211).u64[0];
            v212 = vpadd_f32(*(float32x2_t *)v211.f32, *(float32x2_t *)v211.f32);
            v213 = *(unsigned int *)(a1 + 16);
            if (v213 < 2)
            {
              v214 = 0;
            }
            else
            {
              v214 = 0;
              v215 = (_OWORD *)((char *)v202 + 20);
              for (i = 1; i != v213; ++i)
              {
                v217 = *(float32x4_t *)v215;
                v215 = (_OWORD *)((char *)v215 + 20);
                v218 = v217;
                v218.i32[3] = 0;
                v219 = vmulq_f32(v218, v209);
                v219.i64[0] = vpaddq_f32(v219, v219).u64[0];
                v220 = vpadd_f32(*(float32x2_t *)v219.f32, *(float32x2_t *)v219.f32);
                if ((vcgt_f32(v212, v220).u8[0] & 1) != 0)
                {
                  v214 = i;
                  v221 = -1;
                }
                else
                {
                  v221 = 0;
                }
                v212 = (float32x2_t)vbsl_s8((int8x8_t)vdup_n_s32(v221), (int8x8_t)v220, (int8x8_t)v212);
              }
            }
            v251 = *(unsigned int *)(a1 + 20);
            if ((_DWORD)v251)
            {
              v252 = 0;
              v253 = vnegq_f32(v209);
              v253.i32[3] = 0;
              v254 = *(_QWORD *)(a1 + 48);
              v255 = vmul_f32(v212, v212);
              v256 = -1;
              do
              {
                v257 = (unsigned __int8 *)(v254 + (2 * v252));
                v258 = *(float32x4_t *)((char *)v202 + 20 * *v257);
                v258.i32[3] = 0;
                v259 = *(float32x4_t *)((char *)v202 + 20 * v257[1]);
                v259.i32[3] = 0;
                v260 = vaddq_f32(v258, v259);
                v261 = vmulq_f32(v260, v260);
                v261.i64[0] = vpaddq_f32(v261, v261).u64[0];
                v262 = vpadd_f32(*(float32x2_t *)v261.f32, *(float32x2_t *)v261.f32);
                v263 = vmulq_f32(v253, v260);
                v263.i64[0] = vpaddq_f32(v263, v263).u64[0];
                v264 = vpadd_f32(*(float32x2_t *)v263.f32, *(float32x2_t *)v263.f32);
                v265 = vmul_f32(v264, v264);
                if (vuzp1_s8((int8x8_t)vdup_lane_s16((int16x4_t)vand_s8((int8x8_t)vcgt_f32(v265, vmul_f32(v255, v262)), (int8x8_t)vcgez_f32(v264)), 0), *(int8x8_t *)v253.f32).u32[0] == -1)
                {
                  v266 = vrecpe_f32(v262);
                  v267 = 4;
                  do
                  {
                    v266 = vmul_f32(v266, vrecps_f32(v262, v266));
                    --v267;
                  }
                  while (v267);
                  v255 = vmul_f32(v265, v266);
                  v256 = v252;
                }
                ++v252;
              }
              while (v252 != v251);
              if (v256 != -1)
              {
                v268 = (unsigned __int8 *)(v254 + (2 * v256));
                v269 = *v268;
                v270 = *(float32x4_t *)((char *)v202 + 20 * *v268);
                v214 = v268[1];
                v270.i32[3] = 0;
                v271 = *(float32x4_t *)((char *)v202 + 20 * v214);
                v271.i32[3] = 0;
                v272 = vmulq_f32(v253, v270);
                v272.i64[0] = vpaddq_f32(v272, v272).u64[0];
                v273 = vmulq_f32(v253, v271);
                v273.i64[0] = vpaddq_f32(v273, v273).u64[0];
                if ((vcgt_f32(vpadd_f32(*(float32x2_t *)v272.f32, *(float32x2_t *)v272.f32), vpadd_f32(*(float32x2_t *)v273.f32, *(float32x2_t *)v273.f32)).u8[0] & 1) != 0)v214 = v269;
              }
            }
            v198 = (float32x4_t *)(*(_QWORD *)(a2 + 24) + 20 * v439);
            v197 = (float32x4_t *)((char *)v202 + 20 * (int)v214);
            goto LABEL_89;
          }
          if (v451)
            goto LABEL_18;
          v86 = vmulq_n_f32(v84, v454[0].f32[0]);
          v86.i32[3] = 0;
          v87 = vmulq_lane_f32(v446, *(float32x2_t *)v454[0].f32, 1);
          v87.i32[3] = 0;
          v88 = vmulq_laneq_f32(v445, v454[0], 2);
          v88.i32[3] = 0;
          v89 = vaddq_f32(v88, vaddq_f32(v86, v87));
          v90 = *(_OWORD **)(a2 + 24);
          v91 = (float32x4_t *)a4[5];
          v92 = vmulq_f32(*v91, v89);
          v92.i64[0] = vpaddq_f32(v92, v92).u64[0];
          v93 = vmulq_f32(v89, v91[1]);
          v93.i64[0] = vpaddq_f32(v93, v93).u64[0];
          v94 = vmulq_f32(v89, v91[2]);
          v94.i64[0] = vpaddq_f32(v94, v94).u64[0];
          *(int8x8_t *)v95.f32 = vext_s8((int8x8_t)vpadd_f32(*(float32x2_t *)v92.f32, *(float32x2_t *)v92.f32), (int8x8_t)vpadd_f32(*(float32x2_t *)v93.f32, *(float32x2_t *)v93.f32), 4uLL);
          v95.i64[1] = vpadd_f32(*(float32x2_t *)v94.f32, *(float32x2_t *)v94.f32).u32[0];
          v96 = *(float32x4_t *)v90;
          v96.i32[3] = 0;
          v97 = vmulq_f32(v96, v95);
          v97.i64[0] = vpaddq_f32(v97, v97).u64[0];
          v98 = vpadd_f32(*(float32x2_t *)v97.f32, *(float32x2_t *)v97.f32);
          v99 = *(unsigned int *)(a2 + 16);
          if (v99 < 2)
          {
            v100 = 0;
          }
          else
          {
            v100 = 0;
            v101 = (_OWORD *)((char *)v90 + 20);
            for (j = 1; j != v99; ++j)
            {
              v103 = *(float32x4_t *)v101;
              v101 = (_OWORD *)((char *)v101 + 20);
              v104 = v103;
              v104.i32[3] = 0;
              v105 = vmulq_f32(v104, v95);
              v105.i64[0] = vpaddq_f32(v105, v105).u64[0];
              v106 = vpadd_f32(*(float32x2_t *)v105.f32, *(float32x2_t *)v105.f32);
              if ((vcgt_f32(v98, v106).u8[0] & 1) != 0)
              {
                v100 = j;
                v107 = -1;
              }
              else
              {
                v107 = 0;
              }
              v98 = (float32x2_t)vbsl_s8((int8x8_t)vdup_n_s32(v107), (int8x8_t)v106, (int8x8_t)v98);
            }
          }
          v222 = *(unsigned int *)(a2 + 20);
          v440 = v89;
          if ((_DWORD)v222)
          {
            v223 = 0;
            v224 = vnegq_f32(v95);
            v224.i32[3] = 0;
            v225 = *(_QWORD *)(a2 + 48);
            v226 = vmul_f32(v98, v98);
            v227 = -1;
            do
            {
              v228 = (unsigned __int8 *)(v225 + (2 * v223));
              v229 = *(float32x4_t *)((char *)v90 + 20 * *v228);
              v229.i32[3] = 0;
              v230 = *(float32x4_t *)((char *)v90 + 20 * v228[1]);
              v230.i32[3] = 0;
              v231 = vaddq_f32(v229, v230);
              v232 = vmulq_f32(v231, v231);
              v232.i64[0] = vpaddq_f32(v232, v232).u64[0];
              v233 = vpadd_f32(*(float32x2_t *)v232.f32, *(float32x2_t *)v232.f32);
              v234 = vmulq_f32(v224, v231);
              v234.i64[0] = vpaddq_f32(v234, v234).u64[0];
              v235 = vpadd_f32(*(float32x2_t *)v234.f32, *(float32x2_t *)v234.f32);
              v236 = vmul_f32(v235, v235);
              if (vuzp1_s8((int8x8_t)vdup_lane_s16((int16x4_t)vand_s8((int8x8_t)vcgt_f32(v236, vmul_f32(v226, v233)), (int8x8_t)vcgez_f32(v235)), 0), *(int8x8_t *)v224.f32).u32[0] == -1)
              {
                v237 = vrecpe_f32(v233);
                v238 = 4;
                do
                {
                  v237 = vmul_f32(v237, vrecps_f32(v233, v237));
                  --v238;
                }
                while (v238);
                v226 = vmul_f32(v236, v237);
                v227 = v223;
              }
              ++v223;
            }
            while (v223 != v222);
            if (v227 != -1)
            {
              v239 = (unsigned __int8 *)(v225 + (2 * v227));
              v240 = *v239;
              v241 = *(float32x4_t *)((char *)v90 + 20 * *v239);
              v100 = v239[1];
              v241.i32[3] = 0;
              v242 = *(float32x4_t *)((char *)v90 + 20 * v100);
              v242.i32[3] = 0;
              v243 = vmulq_f32(v224, v241);
              v243.i64[0] = vpaddq_f32(v243, v243).u64[0];
              v244 = vmulq_f32(v224, v242);
              v244.i64[0] = vpaddq_f32(v244, v244).u64[0];
              if ((vcgt_f32(vpadd_f32(*(float32x2_t *)v243.f32, *(float32x2_t *)v243.f32), vpadd_f32(*(float32x2_t *)v244.f32, *(float32x2_t *)v244.f32)).u8[0] & 1) != 0)v100 = v240;
            }
          }
          physx::Gu::generatedContacts(a1, a2, (float32x4_t *)(*(_QWORD *)(a1 + 24) + 20 * v438), (float32x4_t *)((char *)v90 + 20 * (int)v100), (uint64_t)a3, (uint64_t)a4, v452, a5, a6, a7);
          if (*a6)
          {
            v245 = 0;
            v246 = vnegq_f32(v440);
            v247 = a5 + 32;
            v84 = v447;
            do
            {
              v248 = *(_OWORD *)(v247 - 32);
              v249 = v246;
              v249.i32[3] = *(_DWORD *)(v247 + 12);
              *(_OWORD *)(v247 - 32) = *(_OWORD *)(v247 - 16);
              *(_OWORD *)(v247 - 16) = v248;
              *(float32x4_t *)v247 = v249;
              v247 += 48;
              ++v245;
              v250 = *a6;
            }
            while (v245 < v250);
            goto LABEL_91;
          }
          LODWORD(v250) = 0;
LABEL_90:
          v84 = v447;
LABEL_91:
          v274 = v85 | ((_DWORD)v250 != 0);
          v85 = 1;
          if ((v274 & 1) != 0)
            return 1;
        }
        result = physx::Gu::testEdgeNormal(a1, a2, (uint64_t)a3, (uint64_t)a4, (uint64_t)v452, (uint64_t)v453, (uint64_t)a7, (uint64_t)&v450, v454, &v451);
        if (!result)
          return result;
        v84 = v447;
        if (v451 != 2)
          return result;
LABEL_18:
        v108 = *(_OWORD **)(a1 + 24);
        v109 = vnegq_f32(v454[0]);
        v109.i32[3] = 0;
        v110 = (float32x4_t *)a3[5];
        v111 = vmulq_f32(v109, *v110);
        v111.i64[0] = vpaddq_f32(v111, v111).u64[0];
        v112 = vmulq_f32(v109, v110[1]);
        v112.i64[0] = vpaddq_f32(v112, v112).u64[0];
        v113 = vmulq_f32(v109, v110[2]);
        v113.i64[0] = vpaddq_f32(v113, v113).u64[0];
        v114 = vpadd_f32(*(float32x2_t *)v113.f32, *(float32x2_t *)v113.f32).u32[0];
        *(int8x8_t *)v115.f32 = vext_s8((int8x8_t)vpadd_f32(*(float32x2_t *)v111.f32, *(float32x2_t *)v111.f32), (int8x8_t)vpadd_f32(*(float32x2_t *)v112.f32, *(float32x2_t *)v112.f32), 4uLL);
        v115.i64[1] = v114;
        v116 = *(float32x4_t *)v108;
        v116.i32[3] = 0;
        v117 = vmulq_f32(v116, v115);
        v117.i64[0] = vpaddq_f32(v117, v117).u64[0];
        v118 = vpadd_f32(*(float32x2_t *)v117.f32, *(float32x2_t *)v117.f32);
        v119 = *(unsigned int *)(a1 + 16);
        if (v119 < 2)
        {
          v120 = 0;
        }
        else
        {
          v120 = 0;
          v121 = (_OWORD *)((char *)v108 + 20);
          for (k = 1; k != v119; ++k)
          {
            v123 = *(float32x4_t *)v121;
            v121 = (_OWORD *)((char *)v121 + 20);
            v124 = v123;
            v124.i32[3] = 0;
            v125 = vmulq_f32(v124, v115);
            v125.i64[0] = vpaddq_f32(v125, v125).u64[0];
            v126 = vpadd_f32(*(float32x2_t *)v125.f32, *(float32x2_t *)v125.f32);
            if ((vcgt_f32(v118, v126).u8[0] & 1) != 0)
            {
              v120 = k;
              v127 = -1;
            }
            else
            {
              v127 = 0;
            }
            v118 = (float32x2_t)vbsl_s8((int8x8_t)vdup_n_s32(v127), (int8x8_t)v126, (int8x8_t)v118);
          }
        }
        v128 = *(unsigned int *)(a1 + 20);
        if ((_DWORD)v128)
        {
          v129 = 0;
          v130 = vnegq_f32(v115);
          v130.i32[3] = 0;
          v131 = *(_QWORD *)(a1 + 48);
          v132 = vmul_f32(v118, v118);
          v133 = -1;
          do
          {
            v134 = (unsigned __int8 *)(v131 + (2 * v129));
            v135 = *(float32x4_t *)((char *)v108 + 20 * *v134);
            v135.i32[3] = 0;
            v136 = *(float32x4_t *)((char *)v108 + 20 * v134[1]);
            v136.i32[3] = 0;
            v137 = vaddq_f32(v135, v136);
            v138 = vmulq_f32(v137, v137);
            v138.i64[0] = vpaddq_f32(v138, v138).u64[0];
            v139 = vpadd_f32(*(float32x2_t *)v138.f32, *(float32x2_t *)v138.f32);
            v140 = vmulq_f32(v130, v137);
            v140.i64[0] = vpaddq_f32(v140, v140).u64[0];
            v141 = vpadd_f32(*(float32x2_t *)v140.f32, *(float32x2_t *)v140.f32);
            v142 = vmul_f32(v141, v141);
            if (vuzp1_s8((int8x8_t)vdup_lane_s16((int16x4_t)vand_s8((int8x8_t)vcgt_f32(v142, vmul_f32(v132, v139)), (int8x8_t)vcgez_f32(v141)), 0), *(int8x8_t *)v454[0].f32).u32[0] == -1)
            {
              v143 = vrecpe_f32(v139);
              v144 = 4;
              do
              {
                v143 = vmul_f32(v143, vrecps_f32(v139, v143));
                --v144;
              }
              while (v144);
              v132 = vmul_f32(v142, v143);
              v133 = v129;
            }
            ++v129;
          }
          while (v129 != v128);
          if (v133 != -1)
          {
            v145 = (unsigned __int8 *)(v131 + (2 * v133));
            v146 = *v145;
            v147 = *(float32x4_t *)((char *)v108 + 20 * *v145);
            v120 = v145[1];
            v147.i32[3] = 0;
            v148 = *(float32x4_t *)((char *)v108 + 20 * v120);
            v148.i32[3] = 0;
            v149 = vmulq_f32(v130, v147);
            v149.i64[0] = vpaddq_f32(v149, v149).u64[0];
            v150 = vmulq_f32(v130, v148);
            v150.i64[0] = vpaddq_f32(v150, v150).u64[0];
            if ((vcgt_f32(vpadd_f32(*(float32x2_t *)v149.f32, *(float32x2_t *)v149.f32), vpadd_f32(*(float32x2_t *)v150.f32, *(float32x2_t *)v150.f32)).u8[0] & 1) != 0)v120 = v146;
          }
        }
        v151 = vmulq_n_f32(v84, v454[0].f32[0]);
        v151.i32[3] = 0;
        v152 = vmulq_lane_f32(v446, *(float32x2_t *)v454[0].f32, 1);
        v152.i32[3] = 0;
        v153 = vmulq_laneq_f32(v445, v454[0], 2);
        v153.i32[3] = 0;
        v154 = *(_OWORD **)(a2 + 24);
        v155 = vaddq_f32(v153, vaddq_f32(v151, v152));
        v156 = (float32x4_t *)a4[5];
        v157 = vmulq_f32(v155, *v156);
        v157.i64[0] = vpaddq_f32(v157, v157).u64[0];
        v158 = vmulq_f32(v155, v156[1]);
        v158.i64[0] = vpaddq_f32(v158, v158).u64[0];
        v159 = vmulq_f32(v155, v156[2]);
        v159.i64[0] = vpaddq_f32(v159, v159).u64[0];
        v160 = vpadd_f32(*(float32x2_t *)v159.f32, *(float32x2_t *)v159.f32).u32[0];
        *(int8x8_t *)v161.f32 = vext_s8((int8x8_t)vpadd_f32(*(float32x2_t *)v157.f32, *(float32x2_t *)v157.f32), (int8x8_t)vpadd_f32(*(float32x2_t *)v158.f32, *(float32x2_t *)v158.f32), 4uLL);
        v161.i64[1] = v160;
        v162 = *(float32x4_t *)v154;
        v162.i32[3] = 0;
        v163 = vmulq_f32(v162, v161);
        v163.i64[0] = vpaddq_f32(v163, v163).u64[0];
        v164 = vpadd_f32(*(float32x2_t *)v163.f32, *(float32x2_t *)v163.f32);
        v165 = *(unsigned int *)(a2 + 16);
        if (v165 < 2)
        {
          v166 = 0;
        }
        else
        {
          v166 = 0;
          v167 = (_OWORD *)((char *)v154 + 20);
          for (m = 1; m != v165; ++m)
          {
            v169 = *(float32x4_t *)v167;
            v167 = (_OWORD *)((char *)v167 + 20);
            v170 = v169;
            v170.i32[3] = 0;
            v171 = vmulq_f32(v170, v161);
            v171.i64[0] = vpaddq_f32(v171, v171).u64[0];
            v172 = vpadd_f32(*(float32x2_t *)v171.f32, *(float32x2_t *)v171.f32);
            if ((vcgt_f32(v164, v172).u8[0] & 1) != 0)
            {
              v166 = m;
              v173 = -1;
            }
            else
            {
              v173 = 0;
            }
            v164 = (float32x2_t)vbsl_s8((int8x8_t)vdup_n_s32(v173), (int8x8_t)v172, (int8x8_t)v164);
          }
        }
        v174 = *(unsigned int *)(a2 + 20);
        if ((_DWORD)v174)
        {
          v175 = 0;
          v176 = vnegq_f32(v161);
          v176.i32[3] = 0;
          v177 = *(_QWORD *)(a2 + 48);
          v178 = vmul_f32(v164, v164);
          v179 = -1;
          do
          {
            v180 = (unsigned __int8 *)(v177 + (2 * v175));
            v181 = *(float32x4_t *)((char *)v154 + 20 * *v180);
            v181.i32[3] = 0;
            v182 = *(float32x4_t *)((char *)v154 + 20 * v180[1]);
            v182.i32[3] = 0;
            v183 = vaddq_f32(v181, v182);
            v184 = vmulq_f32(v183, v183);
            v184.i64[0] = vpaddq_f32(v184, v184).u64[0];
            v185 = vpadd_f32(*(float32x2_t *)v184.f32, *(float32x2_t *)v184.f32);
            v186 = vmulq_f32(v176, v183);
            v186.i64[0] = vpaddq_f32(v186, v186).u64[0];
            v187 = vpadd_f32(*(float32x2_t *)v186.f32, *(float32x2_t *)v186.f32);
            v188 = vmul_f32(v187, v187);
            if (vuzp1_s8((int8x8_t)vdup_lane_s16((int16x4_t)vand_s8((int8x8_t)vcgt_f32(v188, vmul_f32(v178, v185)), (int8x8_t)vcgez_f32(v187)), 0), *(int8x8_t *)v176.f32).u32[0] == -1)
            {
              v189 = vrecpe_f32(v185);
              v190 = 4;
              do
              {
                v189 = vmul_f32(v189, vrecps_f32(v185, v189));
                --v190;
              }
              while (v190);
              v178 = vmul_f32(v188, v189);
              v179 = v175;
            }
            ++v175;
          }
          while (v175 != v174);
          if (v179 != -1)
          {
            v191 = (unsigned __int8 *)(v177 + (2 * v179));
            v192 = *v191;
            v193 = *(float32x4_t *)((char *)v154 + 20 * *v191);
            v166 = v191[1];
            v193.i32[3] = 0;
            v194 = *(float32x4_t *)((char *)v154 + 20 * v166);
            v194.i32[3] = 0;
            v195 = vmulq_f32(v176, v193);
            v195.i64[0] = vpaddq_f32(v195, v195).u64[0];
            v196 = vmulq_f32(v176, v194);
            v196.i64[0] = vpaddq_f32(v196, v196).u64[0];
            if ((vcgt_f32(vpadd_f32(*(float32x2_t *)v195.f32, *(float32x2_t *)v195.f32), vpadd_f32(*(float32x2_t *)v196.f32, *(float32x2_t *)v196.f32)).u8[0] & 1) != 0)v166 = v192;
          }
        }
        v197 = (float32x4_t *)((char *)v108 + 20 * (int)v120);
        v198 = (float32x4_t *)((char *)v154 + 20 * (int)v166);
LABEL_89:
        physx::Gu::generatedContacts(a2, a1, v198, v197, (uint64_t)a4, (uint64_t)a3, v453, a5, a6, a7);
        LODWORD(v250) = *a6;
        goto LABEL_90;
      }
    }
    else
    {
      return 0;
    }
  }
  else
  {
    v275 = a11 * 0.01;
    v276 = a11 * 0.05;
    if ((float)(a11 * 0.01) > a9)
      a9 = a11 * 0.01;
    if (v276 >= a9)
      v277 = a9;
    else
      v277 = a11 * 0.05;
    if (v275 <= a10)
      v278 = a10;
    else
      v278 = v275;
    if (v276 >= v278)
      v279 = v278;
    else
      v279 = v276;
    v280 = vnegq_f32(*a8);
    v281 = vmulq_f32(*a8, v79);
    v281.i64[0] = vpaddq_f32(v281, v281).u64[0];
    v282 = (int8x8_t)vpadd_f32(*(float32x2_t *)v281.f32, *(float32x2_t *)v281.f32);
    v283 = vmulq_f32(*a8, v80);
    v283.i64[0] = vpaddq_f32(v283, v283).u64[0];
    v284 = (int8x8_t)vpadd_f32(*(float32x2_t *)v283.f32, *(float32x2_t *)v283.f32);
    v285 = vmulq_f32(*a8, v81);
    v285.i64[0] = vpaddq_f32(v285, v285).u64[0];
    v286 = vpadd_f32(*(float32x2_t *)v285.f32, *(float32x2_t *)v285.f32).u32[0];
    v287 = (float32x4_t *)a4[6];
    v289 = *v287;
    v288 = v287[1];
    v290 = v287[2];
    _Q20 = vaddq_f32(vaddq_f32(vmulq_n_f32(*v287, COERCE_FLOAT(*(_OWORD *)a13->f32)), vmulq_lane_f32(v288, *a13, 1)), vmulq_laneq_f32(v290, *(float32x4_t *)a13->f32, 2));
    v292 = *(_QWORD *)(a2 + 24);
    _S23 = *(_DWORD *)(v292 + 8);
    __asm { FMLA            S22, S23, V20.S[2] }
    v295 = *(float *)(v292 + 12) + _S22;
    v296 = fabsf(v295);
    if (v295 < (float)-v279)
      v296 = 3.4028e38;
    v454[0].f32[0] = v296;
    v297 = *(unsigned int *)(a2 + 16);
    if (v297 < 2)
    {
      v299 = 0;
      v298 = 0;
    }
    else
    {
      v298 = 0;
      v299 = 0;
      v300 = (float *)(v292 + 32);
      for (n = 1; n != v297; ++n)
      {
        v302 = *v300
             + (float)((float)((float)(_Q20.f32[1] * *(v300 - 2)) + (float)(_Q20.f32[0] * *(v300 - 3)))
                     + (float)(_Q20.f32[2] * *(v300 - 1)));
        v303 = fabsf(v302);
        if (v302 < (float)-v279)
          v303 = 3.4028e38;
        v454[0].f32[n] = v303;
        if (v296 > v303)
        {
          v299 = n;
          v296 = v303;
        }
        if (v302 > v295)
        {
          v295 = v302;
          v298 = n;
        }
        v300 += 5;
      }
    }
    *(int8x8_t *)v304.f32 = vext_s8(v282, v284, 4uLL);
    v280.i32[3] = 0;
    if (v296 != 3.4028e38)
    {
      v305 = *(float32x4_t *)(v292 + 20 * v299);
      v305.i32[3] = 0;
      v306 = vmulq_f32(v289, v305);
      v306.i64[0] = vpaddq_f32(v306, v306).u64[0];
      v307 = vmulq_f32(v288, v305);
      v307.i64[0] = vpaddq_f32(v307, v307).u64[0];
      v308 = vmulq_f32(v290, v305);
      v308.i64[0] = vpaddq_f32(v308, v308).u64[0];
      v309 = vpadd_f32(*(float32x2_t *)v308.f32, *(float32x2_t *)v308.f32).u32[0];
      *(int8x8_t *)v310.f32 = vext_s8((int8x8_t)vpadd_f32(*(float32x2_t *)v306.f32, *(float32x2_t *)v306.f32), (int8x8_t)vpadd_f32(*(float32x2_t *)v307.f32, *(float32x2_t *)v307.f32), 4uLL);
      v310.i64[1] = v309;
      v311 = v299;
      v312 = vmulq_f32(v310, v310);
      v312.i64[0] = vpaddq_f32(v312, v312).u64[0];
      v313 = vpadd_f32(*(float32x2_t *)v312.f32, *(float32x2_t *)v312.f32);
      v314 = vrsqrte_f32(v313);
      v315 = 4;
      do
      {
        v314 = vmul_f32(v314, vrsqrts_f32(vmul_f32(v314, v314), v313));
        --v315;
      }
      while (v315);
      v316 = vmul_f32(v313, (float32x2_t)vbsl_s8((int8x8_t)vdup_lane_s32(vceqz_f32(v313), 0), (int8x8_t)_D3, (int8x8_t)v314));
      v317 = vrecpe_f32(v316);
      v318 = 4;
      do
      {
        v317 = vmul_f32(v317, vrecps_f32(v316, v317));
        --v318;
      }
      while (v318);
      if ((_DWORD)v297)
      {
        v319 = 0;
        v320 = vmulq_n_f32(v310, v317.f32[0]);
        v320.i32[3] = 0;
        v321 = vmulq_f32(v280, v320);
        v321.i64[0] = vpaddq_f32(v321, v321).u64[0];
        v322 = vpadd_f32(*(float32x2_t *)v321.f32, *(float32x2_t *)v321.f32);
        v298 = v299;
        do
        {
          if (v319 != v311 && (float)(v454[0].f32[v319] - v296) < v279)
          {
            v323 = *(float32x4_t *)(v292 + 20 * v319);
            v323.i32[3] = 0;
            v324 = vmulq_f32(v289, v323);
            v324.i64[0] = vpaddq_f32(v324, v324).u64[0];
            v325 = vmulq_f32(v288, v323);
            v325.i64[0] = vpaddq_f32(v325, v325).u64[0];
            v326 = vmulq_f32(v290, v323);
            v326.i64[0] = vpaddq_f32(v326, v326).u64[0];
            v327 = vpadd_f32(*(float32x2_t *)v326.f32, *(float32x2_t *)v326.f32).u32[0];
            *(int8x8_t *)v328.f32 = vext_s8((int8x8_t)vpadd_f32(*(float32x2_t *)v324.f32, *(float32x2_t *)v324.f32), (int8x8_t)vpadd_f32(*(float32x2_t *)v325.f32, *(float32x2_t *)v325.f32), 4uLL);
            v328.i64[1] = v327;
            v329 = vmulq_f32(v328, v328);
            v329.i64[0] = vpaddq_f32(v329, v329).u64[0];
            v330 = vpadd_f32(*(float32x2_t *)v329.f32, *(float32x2_t *)v329.f32);
            v331 = vrsqrte_f32(v330);
            v332 = 4;
            do
            {
              v331 = vmul_f32(v331, vrsqrts_f32(vmul_f32(v331, v331), v330));
              --v332;
            }
            while (v332);
            v333 = vmul_f32(v330, (float32x2_t)vbsl_s8((int8x8_t)vdup_lane_s32(vceqz_f32(v330), 0), (int8x8_t)_D3, (int8x8_t)v331));
            v334 = vrecpe_f32(v333);
            v335 = 4;
            do
            {
              v334 = vmul_f32(v334, vrecps_f32(v333, v334));
              --v335;
            }
            while (v335);
            v336 = vmulq_n_f32(v328, v334.f32[0]);
            v336.i32[3] = 0;
            v337 = vmulq_f32(v280, v336);
            v337.i64[0] = vpaddq_f32(v337, v337).u64[0];
            v338 = vpadd_f32(*(float32x2_t *)v337.f32, *(float32x2_t *)v337.f32);
            if ((vcgt_f32(v322, v338).u8[0] & 1) != 0)
            {
              v298 = v319;
              v339 = -1;
            }
            else
            {
              v339 = 0;
            }
            v322 = (float32x2_t)vbsl_s8((int8x8_t)vdup_n_s32(v339), (int8x8_t)v338, (int8x8_t)v322);
          }
          ++v319;
        }
        while (v319 != v297);
      }
      else
      {
        v298 = v299;
      }
    }
    v340 = vsubq_f32(*a12, v69);
    v341 = vmulq_f32(v340, v79);
    v341.i64[0] = vpaddq_f32(v341, v341).u64[0];
    v342 = vmulq_f32(v340, v446);
    v342.i64[0] = vpaddq_f32(v342, v342).u64[0];
    v343 = vmulq_f32(v340, v445);
    v343.i64[0] = vpaddq_f32(v343, v343).u64[0];
    *(int8x8_t *)v344.f32 = vext_s8((int8x8_t)vpadd_f32(*(float32x2_t *)v341.f32, *(float32x2_t *)v341.f32), (int8x8_t)vpadd_f32(*(float32x2_t *)v342.f32, *(float32x2_t *)v342.f32), 4uLL);
    v344.i64[1] = vpadd_f32(*(float32x2_t *)v343.f32, *(float32x2_t *)v343.f32).u32[0];
    v345 = (float32x4_t *)a3[6];
    v347 = *v345;
    v346 = v345[1];
    v348 = v345[2];
    _Q20 = vaddq_f32(vmulq_laneq_f32(v348, v344, 2), vaddq_f32(vmulq_n_f32(*v345, v344.f32[0]), vmulq_lane_f32(v346, *(float32x2_t *)v344.f32, 1)));
    v350 = *(_QWORD *)(a1 + 24);
    _S23 = *(_DWORD *)(v350 + 8);
    __asm { FMLA            S22, S23, V20.S[2] }
    v353 = *(float *)(v350 + 12) + _S22;
    v354 = fabsf(v353);
    if (v353 < (float)-v277)
      v354 = 3.4028e38;
    v454[0].f32[0] = v354;
    v355 = *(unsigned int *)(a1 + 16);
    if (v355 < 2)
    {
      v357 = 0;
      v356 = 0;
    }
    else
    {
      v356 = 0;
      v357 = 0;
      v358 = (float *)(v350 + 32);
      for (ii = 1; ii != v355; ++ii)
      {
        v360 = *v358
             + (float)((float)((float)(_Q20.f32[1] * *(v358 - 2)) + (float)(_Q20.f32[0] * *(v358 - 3)))
                     + (float)(_Q20.f32[2] * *(v358 - 1)));
        v361 = fabsf(v360);
        if (v360 < (float)-v277)
          v361 = 3.4028e38;
        v454[0].f32[ii] = v361;
        if (v354 > v361)
        {
          v357 = ii;
          v354 = v361;
        }
        if (v360 > v353)
        {
          v353 = v360;
          v356 = ii;
        }
        v358 += 5;
      }
    }
    v304.i64[1] = v286;
    if (v354 != 3.4028e38)
    {
      v362 = *(float32x4_t *)(v350 + 20 * v357);
      v362.i32[3] = 0;
      v363 = vmulq_f32(v347, v362);
      v363.i64[0] = vpaddq_f32(v363, v363).u64[0];
      v364 = vmulq_f32(v346, v362);
      v364.i64[0] = vpaddq_f32(v364, v364).u64[0];
      v365 = vmulq_f32(v348, v362);
      v365.i64[0] = vpaddq_f32(v365, v365).u64[0];
      v366 = vpadd_f32(*(float32x2_t *)v365.f32, *(float32x2_t *)v365.f32).u32[0];
      *(int8x8_t *)v367.f32 = vext_s8((int8x8_t)vpadd_f32(*(float32x2_t *)v363.f32, *(float32x2_t *)v363.f32), (int8x8_t)vpadd_f32(*(float32x2_t *)v364.f32, *(float32x2_t *)v364.f32), 4uLL);
      v367.i64[1] = v366;
      v368 = v357;
      v369 = vmulq_f32(v367, v367);
      v369.i64[0] = vpaddq_f32(v369, v369).u64[0];
      v370 = vpadd_f32(*(float32x2_t *)v369.f32, *(float32x2_t *)v369.f32);
      v371 = vrsqrte_f32(v370);
      v372 = 4;
      do
      {
        v371 = vmul_f32(v371, vrsqrts_f32(vmul_f32(v371, v371), v370));
        --v372;
      }
      while (v372);
      v373 = vmul_f32(v370, (float32x2_t)vbsl_s8((int8x8_t)vdup_lane_s32(vceqz_f32(v370), 0), (int8x8_t)_D3, (int8x8_t)v371));
      v374 = vrecpe_f32(v373);
      v375 = 4;
      do
      {
        v374 = vmul_f32(v374, vrecps_f32(v373, v374));
        --v375;
      }
      while (v375);
      if ((_DWORD)v355)
      {
        v376 = 0;
        v377 = vmulq_n_f32(v367, v374.f32[0]);
        v377.i32[3] = 0;
        v378 = vmulq_f32(v377, v304);
        v378.i64[0] = vpaddq_f32(v378, v378).u64[0];
        v379 = vpadd_f32(*(float32x2_t *)v378.f32, *(float32x2_t *)v378.f32);
        v356 = v357;
        do
        {
          if (v376 != v368 && (float)(v454[0].f32[v376] - v354) < v277)
          {
            v380 = *(float32x4_t *)(v350 + 20 * v376);
            v380.i32[3] = 0;
            v381 = vmulq_f32(v347, v380);
            v381.i64[0] = vpaddq_f32(v381, v381).u64[0];
            v382 = vmulq_f32(v346, v380);
            v382.i64[0] = vpaddq_f32(v382, v382).u64[0];
            v383 = vmulq_f32(v348, v380);
            v383.i64[0] = vpaddq_f32(v383, v383).u64[0];
            v384 = vpadd_f32(*(float32x2_t *)v383.f32, *(float32x2_t *)v383.f32).u32[0];
            *(int8x8_t *)v385.f32 = vext_s8((int8x8_t)vpadd_f32(*(float32x2_t *)v381.f32, *(float32x2_t *)v381.f32), (int8x8_t)vpadd_f32(*(float32x2_t *)v382.f32, *(float32x2_t *)v382.f32), 4uLL);
            v385.i64[1] = v384;
            v386 = vmulq_f32(v385, v385);
            v386.i64[0] = vpaddq_f32(v386, v386).u64[0];
            v387 = vpadd_f32(*(float32x2_t *)v386.f32, *(float32x2_t *)v386.f32);
            v388 = vrsqrte_f32(v387);
            v389 = 4;
            do
            {
              v388 = vmul_f32(v388, vrsqrts_f32(vmul_f32(v388, v388), v387));
              --v389;
            }
            while (v389);
            v390 = vmul_f32(v387, (float32x2_t)vbsl_s8((int8x8_t)vdup_lane_s32(vceqz_f32(v387), 0), (int8x8_t)_D3, (int8x8_t)v388));
            v391 = vrecpe_f32(v390);
            v392 = 4;
            do
            {
              v391 = vmul_f32(v391, vrecps_f32(v390, v391));
              --v392;
            }
            while (v392);
            v393 = vmulq_n_f32(v385, v391.f32[0]);
            v393.i32[3] = 0;
            v394 = vmulq_f32(v393, v304);
            v394.i64[0] = vpaddq_f32(v394, v394).u64[0];
            v395 = vpadd_f32(*(float32x2_t *)v394.f32, *(float32x2_t *)v394.f32);
            if ((vcgt_f32(v379, v395).u8[0] & 1) != 0)
            {
              v356 = v376;
              v396 = -1;
            }
            else
            {
              v396 = 0;
            }
            v379 = (float32x2_t)vbsl_s8((int8x8_t)vdup_n_s32(v396), (int8x8_t)v395, (int8x8_t)v379);
          }
          ++v376;
        }
        while (v376 != v355);
      }
      else
      {
        v356 = v357;
      }
    }
    v397 = (float32x4_t *)(v292 + 20 * v298);
    v398.i64[0] = v397->i64[0];
    v398.i64[1] = v397->u32[2];
    v399 = vmulq_f32(v289, v398);
    v399.i64[0] = vpaddq_f32(v399, v399).u64[0];
    v400 = vmulq_f32(v288, v398);
    v400.i64[0] = vpaddq_f32(v400, v400).u64[0];
    v401 = vmulq_f32(v290, v398);
    v401.i64[0] = vpaddq_f32(v401, v401).u64[0];
    v402 = vpadd_f32(*(float32x2_t *)v401.f32, *(float32x2_t *)v401.f32).u32[0];
    *(int8x8_t *)v403.f32 = vext_s8((int8x8_t)vpadd_f32(*(float32x2_t *)v399.f32, *(float32x2_t *)v399.f32), (int8x8_t)vpadd_f32(*(float32x2_t *)v400.f32, *(float32x2_t *)v400.f32), 4uLL);
    v403.i64[1] = v402;
    v404 = vmulq_f32(v403, v403);
    v404.i64[0] = vpaddq_f32(v404, v404).u64[0];
    v405 = vpadd_f32(*(float32x2_t *)v404.f32, *(float32x2_t *)v404.f32);
    v406 = vrsqrte_f32(v405);
    v407 = 4;
    do
    {
      v406 = vmul_f32(v406, vrsqrts_f32(vmul_f32(v406, v406), v405));
      --v407;
    }
    while (v407);
    v408 = vmul_f32(v405, (float32x2_t)vbsl_s8((int8x8_t)vdup_lane_s32(vceqz_f32(v405), 0), (int8x8_t)_D3, (int8x8_t)v406));
    v409 = vrecpe_f32(v408);
    v410 = 4;
    do
    {
      v409 = vmul_f32(v409, vrecps_f32(v408, v409));
      --v410;
    }
    while (v410);
    v411 = v350 + 20 * v356;
    v412.i64[0] = *(_QWORD *)v411;
    v412.i64[1] = *(unsigned int *)(v411 + 8);
    v413 = vmulq_f32(v347, v412);
    v413.i64[0] = vpaddq_f32(v413, v413).u64[0];
    v414 = vmulq_f32(v346, v412);
    v414.i64[0] = vpaddq_f32(v414, v414).u64[0];
    v415 = vmulq_f32(v348, v412);
    v415.i64[0] = vpaddq_f32(v415, v415).u64[0];
    v416 = vpadd_f32(*(float32x2_t *)v415.f32, *(float32x2_t *)v415.f32).u32[0];
    *(int8x8_t *)v417.f32 = vext_s8((int8x8_t)vpadd_f32(*(float32x2_t *)v413.f32, *(float32x2_t *)v413.f32), (int8x8_t)vpadd_f32(*(float32x2_t *)v414.f32, *(float32x2_t *)v414.f32), 4uLL);
    v417.i64[1] = v416;
    v418 = vmulq_f32(v417, v417);
    v418.i64[0] = vpaddq_f32(v418, v418).u64[0];
    v419 = vpadd_f32(*(float32x2_t *)v418.f32, *(float32x2_t *)v418.f32);
    v420 = vrsqrte_f32(v419);
    v421 = 4;
    do
    {
      v420 = vmul_f32(v420, vrsqrts_f32(vmul_f32(v420, v420), v419));
      --v421;
    }
    while (v421);
    v422 = vmul_f32(v419, (float32x2_t)vbsl_s8((int8x8_t)vdup_lane_s32(vceqz_f32(v419), 0), (int8x8_t)_D3, (int8x8_t)v420));
    v423 = vrecpe_f32(v422);
    v424 = 4;
    do
    {
      v423 = vmul_f32(v423, vrecps_f32(v422, v423));
      --v424;
    }
    while (v424);
    v425 = vmulq_n_f32(v403, v409.f32[0]);
    v425.i32[3] = 0;
    v426 = vmulq_n_f32(v417, v423.f32[0]);
    v427 = v426;
    v427.i32[3] = 0;
    v428 = vmulq_f32(v280, v425);
    v428.i64[0] = vpaddq_f32(v428, v428).u64[0];
    v429 = vmulq_f32(v427, v304);
    v429.i64[0] = vpaddq_f32(v429, v429).u64[0];
    if ((vcage_f32(vpadd_f32(*(float32x2_t *)v428.f32, *(float32x2_t *)v428.f32), vpadd_f32(*(float32x2_t *)v429.f32, *(float32x2_t *)v429.f32)).u8[0] & 1) != 0)
    {
      physx::Gu::generatedContacts(a2, a1, v397, (float32x4_t *)(v350 + 20 * v356), (uint64_t)a4, (uint64_t)a3, v453, a5, a6, a7);
    }
    else
    {
      v444 = v426;
      physx::Gu::generatedContacts(a1, a2, (float32x4_t *)(v350 + 20 * v356), v397, (uint64_t)a3, (uint64_t)a4, v452, a5, a6, a7);
      if (*a6)
      {
        v430 = 0;
        v431 = vmulq_n_f32(v447, v444.f32[0]);
        v431.i32[3] = 0;
        v432 = vmulq_lane_f32(v446, *(float32x2_t *)v444.f32, 1);
        v432.i32[3] = 0;
        v433 = vmulq_laneq_f32(v445, v444, 2);
        v433.i32[3] = 0;
        v434 = vnegq_f32(vaddq_f32(v433, vaddq_f32(v431, v432)));
        v435 = a5 + 32;
        do
        {
          v436 = *(_OWORD *)(v435 - 32);
          v437 = v434;
          v437.i32[3] = *(_DWORD *)(v435 + 12);
          *(_OWORD *)(v435 - 32) = *(_OWORD *)(v435 - 16);
          *(_OWORD *)(v435 - 16) = v436;
          *(float32x4_t *)v435 = v437;
          v435 += 48;
          ++v430;
        }
        while (v430 < *a6);
      }
    }
    return 1;
  }
  return result;
}

uint64_t physx::Gu::testFaceNormal(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, float32x4_t *a5, float32x4_t *a6, float32x2_t *a7, _QWORD *a8, _DWORD *a9, int8x16_t *a10, int a11, _DWORD *a12)
{
  __int128 v12;
  int8x16_t v13;
  unint64_t v14;
  uint64_t v20;
  int v21;
  float32x4_t v22;
  float32x4_t v23;
  float32x4_t v24;
  float32x2_t v25;
  float32x4_t v26;
  float32x4_t v27;
  int8x16_t v28;
  uint64_t v33;
  uint64_t v34;
  float32x4_t v35;
  unsigned int v36;
  float32x4_t v37;
  float32x4_t *v38;
  float32x4_t v39;
  float32x4_t v40;
  float32x4_t v41;
  float32x4_t v42;
  int32x2_t v43;
  float32x4_t v44;
  float32x2_t v45;
  float32x2_t v46;
  int v47;
  float32x2_t v48;
  float32x2_t v49;
  int v50;
  float32x4_t v51;
  float32x2_t v52;
  float32x4_t v53;
  float32x4_t v54;
  float32x4_t v55;
  float32x4_t v56;
  float32x4_t v57;
  float32x2_t v58;
  float32x4_t v59;
  float32x4_t v60;
  float32x4_t v61;
  float32x2_t v62;
  float32x2_t v63;
  float32x2_t v64;
  unsigned __int8 v65;
  unsigned int v67;
  int8x16_t v68;
  int8x16_t v71;
  float32x4_t v72;
  float32x4_t v73;
  float32x4_t v74;
  int8x16_t v75;
  __int128 v76;
  int8x16_t v77;
  float32x4_t v78;
  float32x2_t v79;
  float32x2_t v80[2];

  v13 = *a10;
  v14 = *(unsigned int *)(a1 + 16);
  if ((_DWORD)v14)
  {
    v20 = 0;
    v21 = 0;
    v26.i32[0] = HIDWORD(*(_QWORD *)(a2 + 64));
    v26.i32[1] = *(_DWORD *)(a2 + 72);
    v22 = vmulq_n_f32(*a6, COERCE_FLOAT(*(_QWORD *)a2));
    v23 = vmulq_n_f32(a6[1], COERCE_FLOAT(*(_QWORD *)(a2 + 4)));
    v22.i32[3] = 0;
    v23.i32[3] = 0;
    v24 = vmulq_n_f32(a6[2], COERCE_FLOAT(*(_QWORD *)(a2 + 8)));
    v24.i32[3] = 0;
    v25 = (float32x2_t)vdup_lane_s32(*(int32x2_t *)(a2 + 64), 0);
    v26.i64[1] = *(unsigned int *)(a2 + 76);
    v73 = v26;
    v74 = a6[3];
    v27 = vaddq_f32(v74, vaddq_f32(vaddq_f32(v22, v23), v24));
    v28 = (int8x16_t)vnegq_f32(v26);
    v28.i32[3] = 0;
    v80[0] = 0;
    v79 = 0;
    *(int32x2_t *)&v12 = vdup_n_s32(0x7F7FFFFFu);
    __asm { FMOV            V9.2S, #1.0 }
    v71 = v28;
    v72 = v27;
    while (1)
    {
      v33 = *(_QWORD *)(a1 + 24) + 20 * v20;
      v34 = *(_QWORD *)(a1 + 32) + 12 * *(unsigned __int8 *)(v33 + 19);
      v35.i64[0] = *(_QWORD *)v34;
      v36 = *(_DWORD *)(v34 + 8);
      v37.i64[0] = *(_QWORD *)v33;
      v37.i64[1] = *(unsigned int *)(v33 + 8);
      v38 = *(float32x4_t **)(a3 + 48);
      v39 = vmulq_f32(v37, *v38);
      v39.i64[0] = vpaddq_f32(v39, v39).u64[0];
      v40 = vmulq_f32(v37, v38[1]);
      v40.i64[0] = vpaddq_f32(v40, v40).u64[0];
      v43 = (int32x2_t)vpadd_f32(*(float32x2_t *)v40.f32, *(float32x2_t *)v40.f32);
      v41 = vmulq_f32(v37, v38[2]);
      v41.i64[0] = vpaddq_f32(v41, v41).u64[0];
      *(int8x8_t *)v42.f32 = vext_s8((int8x8_t)vpadd_f32(*(float32x2_t *)v39.f32, *(float32x2_t *)v39.f32), (int8x8_t)v43, 4uLL);
      v42.i64[1] = vpadd_f32(*(float32x2_t *)v41.f32, *(float32x2_t *)v41.f32).u32[0];
      v43.i32[0] = *(_DWORD *)(v33 + 12);
      v44 = vmulq_f32(v42, v42);
      v44.i64[0] = vpaddq_f32(v44, v44).u64[0];
      v45 = vpadd_f32(*(float32x2_t *)v44.f32, *(float32x2_t *)v44.f32);
      v46 = vrsqrte_f32(v45);
      v47 = 4;
      do
      {
        v46 = vmul_f32(v46, vrsqrts_f32(vmul_f32(v46, v46), v45));
        --v47;
      }
      while (v47);
      v48 = vmul_f32(v45, (float32x2_t)vbsl_s8((int8x8_t)vdup_lane_s32(vceqz_f32(v45), 0), _D9, (int8x8_t)v46));
      v49 = vrecpe_f32(v48);
      v50 = 4;
      do
      {
        v49 = vmul_f32(v49, vrecps_f32(v48, v49));
        --v50;
      }
      while (v50);
      v35.i64[1] = v36;
      v51 = vmulq_f32(v35, v37);
      v51.i64[0] = vpaddq_f32(v51, v51).u64[0];
      v52 = vmul_f32(v49, vpadd_f32(*(float32x2_t *)v51.f32, *(float32x2_t *)v51.f32));
      *(float32x2_t *)v51.f32 = vneg_f32((float32x2_t)vdup_lane_s32(v43, 0));
      v53 = vmulq_n_f32(v42, v49.f32[0]);
      v54 = vmulq_n_f32(*a5, v53.f32[0]);
      v55 = vmulq_lane_f32(a5[1], *(float32x2_t *)v53.f32, 1);
      v56 = vmulq_laneq_f32(a5[2], v53, 2);
      v57 = v53;
      v57.i32[3] = 0;
      v54.i32[3] = 0;
      v58 = vmul_f32(v49, *(float32x2_t *)v51.f32);
      v55.i32[3] = 0;
      v56.i32[3] = 0;
      v78 = vaddq_f32(vaddq_f32(v54, v55), v56);
      v59 = vmulq_f32(v78, (float32x4_t)vbslq_s8((int8x16_t)vcgtzq_f32(v78), (int8x16_t)v26, v28));
      v59.i64[0] = vpaddq_f32(v59, v59).u64[0];
      *(float32x2_t *)v59.f32 = vmax_f32(vpadd_f32(*(float32x2_t *)v59.f32, *(float32x2_t *)v59.f32), v25);
      v60 = vmulq_f32(v27, v57);
      v60.i64[0] = vpaddq_f32(v60, v60).u64[0];
      *(float32x2_t *)v60.f32 = vpadd_f32(*(float32x2_t *)v60.f32, *(float32x2_t *)v60.f32);
      if ((vcgt_f32(vsub_f32(vmin_f32(v58, vadd_f32(*(float32x2_t *)v59.f32, *(float32x2_t *)v60.f32)), vmax_f32(v52, vsub_f32(*(float32x2_t *)v60.f32, *(float32x2_t *)v59.f32))), *(float32x2_t *)&v12).u8[0] & 1) == 0)
      {
        v76 = v12;
        v77 = v13;
        v75 = (int8x16_t)v57;
        v61 = vmulq_f32(v74, v57);
        v61.i64[0] = vpaddq_f32(v61, v61).u64[0];
        v62 = vpadd_f32(*(float32x2_t *)v61.f32, *(float32x2_t *)v61.f32);
        (*(void (**)(uint64_t, float32x4_t *, float32x2_t *, float32x2_t *))(*(_QWORD *)a4 + 24))(a4, &v78, v80, &v79);
        v63 = vadd_f32(v62, v80[0]);
        v80[0] = v63;
        v79 = vadd_f32(v62, v79);
        if (vuzp1_s8((int8x8_t)vdup_lane_s16((int16x4_t)vorr_s8((int8x8_t)vcgt_f32(v63, vadd_f32(v58, *a7)), (int8x8_t)vcgt_f32(v52, vadd_f32(v79, *a7))), 0), (int8x8_t)v63).u32[0] == -1)return 0;
        v64 = vsub_f32(v58, v63);
        *((_QWORD *)&v12 + 1) = *((_QWORD *)&v76 + 1);
        v65 = vcgt_f32(*(float32x2_t *)&v76, v64).u8[0];
        _ZF = (v65 & 1) == 0;
        if ((v65 & 1) != 0)
          v67 = -1;
        else
          v67 = 0;
        v68 = (int8x16_t)vdupq_n_s32(v67);
        v13 = vbslq_s8(v68, v75, v77);
        if (!_ZF)
          v21 = v20;
        *(int8x8_t *)&v12 = vbsl_s8(*(int8x8_t *)v68.i8, (int8x8_t)v64, *(int8x8_t *)&v76);
        v14 = *(unsigned int *)(a1 + 16);
        v27 = v72;
        v26 = v73;
        v28 = v71;
      }
      if (++v20 >= v14)
        goto LABEL_18;
    }
  }
  v21 = 0;
  *(int32x2_t *)&v12 = vdup_n_s32(0x7F7FFFFFu);
LABEL_18:
  if (COERCE_FLOAT(*a8) > *(float *)&v12)
  {
    *a10 = v13;
    *a8 = v12;
    *a12 = a11;
  }
  *a9 = v21;
  return 1;
}

BOOL physx::Gu::testEdgeNormal(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, float32x4_t *a9, _DWORD *a10)
{
  float32x2_t v10;
  float32x2_t *v11;
  float32x4_t *v12;
  float32x4_t *v13;
  float32x4_t *v14;
  float32x4_t *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  float32x2_t *v24;
  float32x2_t v25;
  float32x4_t v26;
  float32x4_t v27;
  float32x4_t v28;
  float32x4_t v29;
  float32x4_t v30;
  float32x4_t v31;
  float32x4_t v32;
  float32x4_t v33;
  float32x4_t v34;
  float32x4_t v35;
  float32x4_t v36;
  float32x4_t v37;
  float32x4_t v38;
  float32x4_t v39;
  float32x4_t v40;
  float32x4_t v41;
  float32x4_t v42;
  float32x4_t v43;
  uint64_t v44;
  BOOL v45;
  float32x2_t v46;
  int8x16_t v47;
  int8x16_t v48;
  int8x16_t v49;
  float32x2_t v50;
  int8x16_t v51;
  uint64_t v52;
  uint64_t v53;
  int8x8_t *v54;
  float32x2_t v55;
  float32x2_t v56;
  float *v57;
  float32x4_t v58;
  float32x4_t v59;
  float32x4_t v60;
  float32x4_t v61;
  int8x8_t v62;
  float32x2_t v63;
  float32x2_t v64;
  int v65;
  float32x4_t v66;
  float32x4_t v67;
  float32x4_t v68;
  float32x4_t v69;
  float32x4_t v70;
  float32x4_t v71;
  float32x4_t v72;
  float32x4_t v73;
  float32x2_t v74;
  float32x2_t v75;
  float32x2_t v76;
  float32x2_t *v78;
  int32x2_t v79;
  unint64_t v80;
  int32x2_t v81;
  int8x16_t v82;
  float32x4_t v83;
  int8x16_t v84;
  float32x4_t v85;
  float32x2_t *v86;
  float32x4_t v87;
  float32x4_t v88;
  float32x4_t v89;
  float32x4_t v90;
  float32x4_t v91;
  _DWORD v92[769];
  _DWORD v93[769];
  float32x4_t v94;
  float32x4_t v95;
  float32x4_t v96;
  float32x4_t v97;
  float32x2_t v98;
  float32x2_t v99;
  float32x2_t v100;
  float32x2_t v101[2];

  MEMORY[0x24BDAC7A8](a1);
  v86 = v11;
  v13 = v12;
  v15 = v14;
  v17 = v16;
  v19 = v18;
  v21 = v20;
  v23 = v22;
  v78 = v24;
  v25 = *v24;
  v100 = 0;
  v101[0] = 0;
  v98 = 0;
  v99 = 0;
  v26 = *(float32x4_t *)v22;
  v26.i64[1] = *(unsigned int *)(v22 + 8);
  v27 = vmulq_n_f32(*v12, COERCE_FLOAT(*(_QWORD *)v20));
  v27.i32[3] = 0;
  v28 = vmulq_n_f32(v12[1], COERCE_FLOAT(*(_QWORD *)(v20 + 4)));
  v28.i32[3] = 0;
  v29 = vmulq_n_f32(v12[2], COERCE_FLOAT(*(_QWORD *)(v20 + 8)));
  v29.i32[3] = 0;
  v85 = v12[3];
  v30 = vsubq_f32(vaddq_f32(v85, vaddq_f32(vaddq_f32(v27, v28), v29)), v26);
  v81 = *(int32x2_t *)(v20 + 64);
  v28.i32[0] = v81.i32[1];
  v28.i32[1] = *(_DWORD *)(v20 + 72);
  v28.i32[2] = *(_DWORD *)(v20 + 76);
  v87 = v28;
  v79 = *(int32x2_t *)(v22 + 64);
  v27.i32[0] = v79.i32[1];
  v27.i32[1] = *(_DWORD *)(v22 + 72);
  v27.i32[2] = *(_DWORD *)(v22 + 76);
  v88 = v27;
  v89 = v30;
  v97 = v30;
  *(double *)v31.i64 = (*(double (**)(uint64_t, float32x4_t *))(*(_QWORD *)v18 + 16))(v18, &v97);
  v83 = v31;
  v32 = vnegq_f32(v97);
  v33 = vmulq_n_f32(*v15, v32.f32[0]);
  v33.i32[3] = 0;
  v34 = vmulq_lane_f32(v15[1], *(float32x2_t *)v32.f32, 1);
  v34.i32[3] = 0;
  v35 = vmulq_laneq_f32(v15[2], v32, 2);
  v35.i32[3] = 0;
  v96 = vaddq_f32(vaddq_f32(v33, v34), v35);
  *(double *)v36.i64 = (*(double (**)(uint64_t, float32x4_t *))(*(_QWORD *)v17 + 16))(v17, &v96);
  v37 = vmulq_n_f32(*v15, v83.f32[0]);
  v37.i32[3] = 0;
  v38 = vmulq_lane_f32(v15[1], *(float32x2_t *)v83.f32, 1);
  v38.i32[3] = 0;
  v39 = vmulq_laneq_f32(v15[2], v83, 2);
  v39.i32[3] = 0;
  v40 = vaddq_f32(v15[3], vaddq_f32(vaddq_f32(v37, v38), v39));
  v41 = vmulq_n_f32(*v13, v36.f32[0]);
  v41.i32[3] = 0;
  v42 = vmulq_lane_f32(v13[1], *(float32x2_t *)v36.f32, 1);
  v42.i32[3] = 0;
  v43 = vmulq_laneq_f32(v13[2], v36, 2);
  v43.i32[3] = 0;
  v94 = vaddq_f32(v13[3], vaddq_f32(vaddq_f32(v41, v42), v43));
  v95 = v40;
  v93[0] = 0;
  v92[0] = 0;
  physx::Gu::buildPartialHull(v23, v19, v93, &v94, v97);
  physx::Gu::buildPartialHull(v21, v17, v92, &v95, v96);
  v80 = v93[0];
  if (v93[0])
  {
    v44 = 0;
    v45 = 0;
    v46 = (float32x2_t)vdup_lane_s32(v81, 0);
    v48 = (int8x16_t)v87;
    v47 = (int8x16_t)v88;
    v49 = (int8x16_t)vnegq_f32(v87);
    v49.i32[3] = 0;
    v50 = (float32x2_t)vdup_lane_s32(v79, 0);
    v51 = (int8x16_t)vnegq_f32(v88);
    v51.i32[3] = 0;
    v52 = v92[0];
    v82 = v51;
    v84 = v49;
    do
    {
      if ((_DWORD)v52)
      {
        v53 = 0;
        v54 = (int8x8_t *)&v93[3 * v44 + 1];
        v55 = (float32x2_t)*v54;
        v10.i32[0] = v54[1].i32[0];
        v56 = (float32x2_t)vext_s8(*v54, (int8x8_t)v10, 4uLL);
        do
        {
          v57 = (float *)&v92[3 * v53 + 1];
          v58 = vmulq_n_f32(*v13, *v57);
          v58.i32[3] = 0;
          v59 = vmulq_n_f32(v13[1], v57[1]);
          v59.i32[3] = 0;
          v60 = vmulq_n_f32(v13[2], v57[2]);
          v60.i32[3] = 0;
          v61 = vaddq_f32(vaddq_f32(v58, v59), v60);
          v62 = (int8x8_t)vmls_f32(vmul_f32(v55, (float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v61, (int8x16_t)v61, 4uLL)), v56, *(float32x2_t *)v61.f32);
          *(int8x8_t *)v61.f32 = vext_s8(v62, (int8x8_t)vmls_f32(vmul_f32(v10, *(float32x2_t *)v61.f32), v55, (float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v61, (int8x16_t)v61, 8uLL)), 4uLL);
          v62.i32[1] = 0;
          *(float32x2_t *)v59.f32 = vpadd_f32(vmul_f32(*(float32x2_t *)v61.f32, *(float32x2_t *)v61.f32), vmul_f32((float32x2_t)v62.u32[0], (float32x2_t)v62.u32[0]));
          v63 = vpadd_f32(*(float32x2_t *)v59.f32, *(float32x2_t *)v59.f32);
          if (v63.f32[0] >= 0.00000011921)
          {
            *(int8x8_t *)&v61.u32[2] = v62;
            v64 = vrsqrte_f32(v63);
            v65 = 4;
            do
            {
              v64 = vmul_f32(v64, vrsqrts_f32(vmul_f32(v64, v64), v63));
              --v65;
            }
            while (v65);
            v66 = vmulq_n_f32(v61, v64.f32[0]);
            v67 = vmulq_n_f32(*v15, v66.f32[0]);
            v68 = vmulq_lane_f32(v15[1], *(float32x2_t *)v66.f32, 1);
            v69 = vmulq_laneq_f32(v15[2], v66, 2);
            v66.i32[3] = 0;
            v67.i32[3] = 0;
            v68.i32[3] = 0;
            v69.i32[3] = 0;
            v90 = vaddq_f32(vaddq_f32(v67, v68), v69);
            v91 = v66;
            v70 = vmulq_f32(v90, (float32x4_t)vbslq_s8((int8x16_t)vcgtzq_f32(v90), v48, v49));
            v70.i64[0] = vpaddq_f32(v70, v70).u64[0];
            *(float32x2_t *)v70.f32 = vmax_f32(vpadd_f32(*(float32x2_t *)v70.f32, *(float32x2_t *)v70.f32), v46);
            v71 = vmulq_f32(v89, v66);
            v71.i64[0] = vpaddq_f32(v71, v71).u64[0];
            *(float32x2_t *)v71.f32 = vpadd_f32(*(float32x2_t *)v71.f32, *(float32x2_t *)v71.f32);
            v72 = vmulq_f32(v66, (float32x4_t)vbslq_s8((int8x16_t)vcgtzq_f32(v66), v47, v51));
            v72.i64[0] = vpaddq_f32(v72, v72).u64[0];
            *(float32x2_t *)v72.f32 = vmax_f32(vpadd_f32(*(float32x2_t *)v72.f32, *(float32x2_t *)v72.f32), v50);
            if ((vcgt_f32(vsub_f32(vmin_f32(*(float32x2_t *)v72.f32, vadd_f32(*(float32x2_t *)v70.f32, *(float32x2_t *)v71.f32)), vmax_f32(vneg_f32(*(float32x2_t *)v72.f32), vsub_f32(*(float32x2_t *)v71.f32, *(float32x2_t *)v70.f32))), v25).u32[0] & 1) == 0)
            {
              (*(void (**)(uint64_t, float32x4_t *, float32x2_t *, float32x2_t *))(*(_QWORD *)v19 + 24))(v19, &v91, v101, &v100);
              v73 = vmulq_f32(v85, v91);
              v73.i64[0] = vpaddq_f32(v73, v73).u64[0];
              v74 = vpadd_f32(*(float32x2_t *)v73.f32, *(float32x2_t *)v73.f32);
              (*(void (**)(uint64_t, float32x4_t *, float32x2_t *, float32x2_t *))(*(_QWORD *)v17 + 24))(v17, &v90, &v99, &v98);
              v75 = vadd_f32(v74, v99);
              v98 = vadd_f32(v74, v98);
              v99 = v75;
              if (vuzp1_s8((int8x8_t)vdup_lane_s16((int16x4_t)vorr_s8((int8x8_t)vcgt_f32(v75, vadd_f32(v100, *v86)), (int8x8_t)vcgt_f32(v101[0], vadd_f32(v98, *v86))), 0), (int8x8_t)v75).u32[0] == -1)return v45;
              v76 = vsub_f32(v100, v75);
              v48 = (int8x16_t)v87;
              v47 = (int8x16_t)v88;
              v51 = v82;
              v49 = v84;
              if ((vcgt_f32(v25, v76).u8[0] & 1) != 0)
              {
                *a9 = v91;
                *a10 = 2;
                v25 = v76;
              }
            }
          }
          ++v53;
        }
        while (v53 != v52);
      }
      v45 = ++v44 >= v80;
    }
    while (v44 != v80);
  }
  *v78 = v25;
  return 1;
}

uint64_t physx::Gu::addGJKEPAContacts(uint64_t a1, uint64_t a2, float32x4_t *a3, int a4, float32x4_t *a5, float32x4_t *a6, uint64_t a7, float32x2_t a8)
{
  float32x4_t v14;
  float32x4_t v15;
  float32x4_t v16;
  float32x4_t v17;
  float32x4_t v18;
  float32x2_t v19;
  float32x2_t v20;
  int v21;
  float32x2_t v27;
  float32x2_t v28;
  int v29;
  float32x4_t v30;
  float32x4_t v31;
  uint64_t v32;
  float32x4_t v34;
  float32x4_t v35;

  if (a4 == 2)
    goto LABEL_11;
  if (a4 != 4)
  {
    v32 = 1;
    if (physx::Gu::epaPenetration(a1) != 5)
      return v32;
LABEL_11:
    physx::Gu::addManifoldPoint(a5, a7, (uint64_t)a6, a3, a8);
    return 0;
  }
  v14 = vmulq_f32(a6[2], a6[3]);
  v14.i64[0] = vpaddq_f32(v14, v14).u64[0];
  if (vpadd_f32(*(float32x2_t *)v14.f32, *(float32x2_t *)v14.f32).f32[0] > 0.9999)
  {
    v35 = a6[2];
    *(double *)v15.i64 = (*(double (**)(uint64_t))(*(_QWORD *)a1 + 32))(a1);
    v34 = v15;
    *(double *)v16.i64 = (*(double (**)(uint64_t))(*(_QWORD *)a2 + 32))(a2);
    v17 = vsubq_f32(v34, v16);
    v18 = vmulq_f32(v17, v17);
    v18.i64[0] = vpaddq_f32(v18, v18).u64[0];
    v19 = vpadd_f32(*(float32x2_t *)v18.f32, *(float32x2_t *)v18.f32);
    v20 = vrsqrte_f32(v19);
    v21 = 4;
    do
    {
      v20 = vmul_f32(v20, vrsqrts_f32(vmul_f32(v20, v20), v19));
      --v21;
    }
    while (v21);
    __asm { FMOV            V4.2S, #1.0 }
    v27 = vmul_f32(v19, (float32x2_t)vbsl_s8((int8x8_t)vdup_lane_s32(vceqz_f32(v19), 0), _D4, (int8x8_t)v20));
    v28 = vrecpe_f32(v27);
    v29 = 4;
    do
    {
      v28 = vmul_f32(v28, vrecps_f32(v27, v28));
      --v29;
    }
    while (v29);
    v30 = vmulq_n_f32(v17, v28.f32[0]);
    v30.i32[3] = 0;
    v31 = vmulq_f32(v35, v30);
    v31.i64[0] = vpaddq_f32(v31, v31).u64[0];
    if (vpadd_f32(*(float32x2_t *)v31.f32, *(float32x2_t *)v31.f32).f32[0] > 0.707)
      goto LABEL_11;
  }
  return 1;
}

uint64_t physx::Gu::computeMTD(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int32x2_t *a5, float32x4_t *a6)
{
  float32x4_t *v12;
  float32x4_t *v13;
  float32x4_t v14;
  float32x4_t v15;
  float32x4_t v16;
  float32x4_t v17;
  float32x4_t v18;
  float32x4_t v19;
  float32x4_t v20;
  float32x2_t v21;
  float32x4_t v22;
  float32x2_t v23;
  float32x2_t v24;
  int8x8_t v25;
  float32x4_t v26;
  float32x4_t v27;
  float32x4_t v28;
  float32x4_t v29;
  float32x4_t v30;
  float32x4_t v31;
  float32x2_t v32;
  float32x4_t v33;
  int32x2_t v34;
  float32x4_t v35;
  int8x8_t v36;
  float32x2_t v38;
  float32x4_t v39;
  float32x2_t v40;
  float32x2_t v41;
  float32x2_t v42;
  float32x2_t v43;
  float32x2_t v44;
  float32x2_t v45;
  float32x4_t v50;
  float32x4_t v51;
  float32x4_t v52;
  float32x4_t v53;
  float32x4_t v54;
  float32x4_t v55;
  float32x4_t v56;
  float32x4_t v57;
  float32x4_t v58;
  float32x4_t v59;
  float32x4_t v60;
  float32x2_t v61;
  float32x4_t v62;
  float32x4_t v63;
  float32x4_t v64;
  float32x4_t v65;
  float32x2_t v66;
  float32x2_t v67;
  int v68;
  uint64_t result;
  float32x2_t v70;
  float32x2_t v71;
  float32x2_t v72;
  float32x2_t v73;
  float32x4_t v74;
  float32x4_t v75;
  float32x2_t v76;
  float32x4_t v77;
  float32x2_t v78;
  int8x8_t v79;
  float32x4_t v80;
  float32x4_t v81;
  float32x4_t v82;
  float32x4_t v83;
  float32x4_t v84;
  float32x4_t v85;
  float32x4_t v86;
  float32x2_t v87;
  float32x4_t v88;
  float32x2_t v89;
  int8x8_t v90;
  float32x4_t v91;
  float32x4_t v92;
  float32x4_t v93;
  float32x4_t v94;
  float32x4_t v95;
  int v96;
  int v97;
  float32x2_t v98;
  int8x16_t v99;
  int32x2_t v100;
  int v101;
  float32x4_t v102[4];
  float32x4_t v103[4];

  v12 = *(float32x4_t **)(a3 + 32);
  v13 = *(float32x4_t **)(a4 + 32);
  v14 = *v12;
  v15 = v12[1];
  v16 = vnegq_f32(*v12);
  v17 = *v13;
  v18 = v13[1];
  v19 = vsubq_f32(v18, v15);
  v20 = v16;
  v20.i32[3] = 0;
  v21 = (float32x2_t)vdupq_laneq_s32(*(int32x4_t *)v12, 3).u64[0];
  v22 = vmulq_n_f32(v19, vmla_f32((float32x2_t)0xBF000000BF000000, v21, v21).f32[0]);
  v22.i32[3] = 0;
  v23 = (float32x2_t)vextq_s8((int8x16_t)v20, (int8x16_t)v20, 8uLL).u64[0];
  v24 = (float32x2_t)vext_s8(*(int8x8_t *)v16.f32, (int8x8_t)v23, 4uLL);
  v25 = (int8x8_t)vmls_f32(vmul_f32(*(float32x2_t *)v16.f32, (float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v19, (int8x16_t)v19, 4uLL)), v24, *(float32x2_t *)v19.f32);
  *(int8x8_t *)v26.f32 = vext_s8(v25, (int8x8_t)vmls_f32(vmul_f32(v23, *(float32x2_t *)v19.f32), *(float32x2_t *)v16.f32, (float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v19, (int8x16_t)v19, 8uLL)), 4uLL);
  v26.i64[1] = v25.u32[0];
  v27 = vmlaq_laneq_f32(v22, v26, *v12, 3);
  v27.i64[1] = vextq_s8((int8x16_t)v27, (int8x16_t)v27, 8uLL).u32[0];
  v28 = vmulq_f32(v20, v19);
  v28.i64[0] = vpaddq_f32(v28, v28).u64[0];
  v29 = vmlaq_n_f32(v27, v20, vpadd_f32(*(float32x2_t *)v28.f32, *(float32x2_t *)v28.f32).f32[0]);
  v30 = vaddq_f32(v29, v29);
  v30.i32[3] = 0;
  v31 = *v13;
  v31.i32[3] = 0;
  v32 = vmul_f32((float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v14, (int8x16_t)v14, 8uLL), (float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v17, (int8x16_t)v17, 8uLL));
  v33 = vmulq_f32(v20, v31);
  v33.i64[0] = vpaddq_f32(v33, v33).u64[0];
  v34 = (int32x2_t)vsub_f32(v32, vpadd_f32(*(float32x2_t *)v33.f32, *(float32x2_t *)v33.f32));
  v33.i64[0] = vdupq_laneq_s32(*(int32x4_t *)v13, 3).u64[0];
  v35 = vmulq_laneq_f32(v31, *v12, 3);
  v31.i64[0] = vextq_s8((int8x16_t)v31, (int8x16_t)v31, 8uLL).u64[0];
  v36 = (int8x8_t)vmls_f32(vmul_f32(*(float32x2_t *)v16.f32, (float32x2_t)vext_s8(*(int8x8_t *)v13->f32, *(int8x8_t *)v31.f32, 4uLL)), v24, *(float32x2_t *)v13->f32);
  *(int8x8_t *)v16.f32 = vext_s8(v36, (int8x8_t)vmls_f32(vmul_f32(v23, *(float32x2_t *)v13->f32), *(float32x2_t *)v16.f32, *(float32x2_t *)v31.f32), 4uLL);
  *(int8x8_t *)&v16.u32[2] = v36;
  _Q5 = vaddq_f32(vaddq_f32(vmulq_laneq_f32(v20, *v13, 3), v35), v16);
  *(int32x2_t *)v20.f32 = vdup_lane_s32(*(int32x2_t *)_Q5.f32, 1);
  v38 = (float32x2_t)vdup_laneq_s32((int32x4_t)_Q5, 2);
  *(int32x2_t *)v31.f32 = vdup_lane_s32(v34, 1);
  v39 = vaddq_f32(_Q5, _Q5);
  *(int32x2_t *)v35.f32 = vdup_lane_s32((int32x2_t)vmul_f32(*(float32x2_t *)_Q5.f32, *(float32x2_t *)v39.f32), 0);
  v40 = vmul_lane_f32(*(float32x2_t *)v20.f32, *(float32x2_t *)v39.f32, 1);
  v41 = vmul_laneq_f32(v38, v39, 2);
  *(float32x2_t *)v20.f32 = vmul_n_f32(*(float32x2_t *)v20.f32, v39.f32[0]);
  v42 = vmul_n_f32(v38, v39.f32[0]);
  v43 = vmul_n_f32(*(float32x2_t *)v31.f32, v39.f32[0]);
  v44 = vmul_lane_f32(v38, *(float32x2_t *)v39.f32, 1);
  v45 = vmul_lane_f32(*(float32x2_t *)v31.f32, *(float32x2_t *)v39.f32, 1);
  *(float32x2_t *)v31.f32 = vmul_laneq_f32(*(float32x2_t *)v31.f32, v39, 2);
  __asm { FMOV            V5.2S, #1.0 }
  *(float32x2_t *)v39.f32 = vsub_f32(*(float32x2_t *)_Q5.f32, *(float32x2_t *)v35.f32);
  *(int8x8_t *)v35.f32 = vext_s8((int8x8_t)vsub_f32(vsub_f32(*(float32x2_t *)_Q5.f32, v40), v41), (int8x8_t)vadd_f32(*(float32x2_t *)v20.f32, *(float32x2_t *)v31.f32), 4uLL);
  v35.i64[1] = vsub_f32(v42, v45).u32[0];
  *(int8x8_t *)v20.f32 = vext_s8((int8x8_t)vsub_f32(*(float32x2_t *)v20.f32, *(float32x2_t *)v31.f32), (int8x8_t)vsub_f32(*(float32x2_t *)v39.f32, v41), 4uLL);
  v20.i64[1] = vadd_f32(v44, v43).u32[0];
  v103[0] = v35;
  v103[1] = v20;
  *(int8x8_t *)v20.f32 = vext_s8((int8x8_t)vadd_f32(v42, v45), (int8x8_t)vsub_f32(v44, v43), 4uLL);
  v20.i64[1] = vsub_f32(*(float32x2_t *)v39.f32, v40).u32[0];
  v50 = vnegq_f32(v17);
  v51 = vsubq_f32(v15, v18);
  v52 = v50;
  v52.i32[3] = 0;
  v53 = vmulq_n_f32(v51, vmla_f32((float32x2_t)0xBF000000BF000000, *(float32x2_t *)v33.f32, *(float32x2_t *)v33.f32).f32[0]);
  v53.i32[3] = 0;
  v31.i64[0] = vextq_s8((int8x16_t)v52, (int8x16_t)v52, 8uLL).u64[0];
  *(int8x8_t *)v35.f32 = vext_s8(*(int8x8_t *)v50.f32, *(int8x8_t *)v31.f32, 4uLL);
  *(float32x2_t *)v39.f32 = vmls_f32(vmul_f32((float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v51, (int8x16_t)v51, 4uLL), *(float32x2_t *)v50.f32), *(float32x2_t *)v35.f32, *(float32x2_t *)v51.f32);
  *(int8x8_t *)v54.f32 = vext_s8(*(int8x8_t *)v39.f32, (int8x8_t)vmls_f32(vmul_f32(*(float32x2_t *)v51.f32, *(float32x2_t *)v31.f32), *(float32x2_t *)v50.f32, (float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v51, (int8x16_t)v51, 8uLL)), 4uLL);
  v54.i64[1] = v39.u32[0];
  v55 = vmlaq_laneq_f32(v53, v54, v17, 3);
  v55.i64[1] = vextq_s8((int8x16_t)v55, (int8x16_t)v55, 8uLL).u32[0];
  v56 = vmulq_f32(v51, v52);
  v56.i64[0] = vpaddq_f32(v56, v56).u64[0];
  v57 = vmlaq_n_f32(v55, v52, vpadd_f32(*(float32x2_t *)v56.f32, *(float32x2_t *)v56.f32).f32[0]);
  v58 = vaddq_f32(v57, v57);
  v58.i32[3] = 0;
  v59 = v14;
  v59.i32[3] = 0;
  v60 = vmulq_f32(v59, v52);
  v60.i64[0] = vpaddq_f32(v60, v60).u64[0];
  v61 = vsub_f32(v32, vpadd_f32(*(float32x2_t *)v60.f32, *(float32x2_t *)v60.f32));
  v62 = vmulq_laneq_f32(v52, v14, 3);
  v63 = vmulq_laneq_f32(v59, v17, 3);
  v59.i64[0] = vextq_s8((int8x16_t)v59, (int8x16_t)v59, 8uLL).u64[0];
  *(float32x2_t *)v60.f32 = vmls_f32(vmul_f32((float32x2_t)vext_s8(*(int8x8_t *)v14.f32, *(int8x8_t *)v59.f32, 4uLL), *(float32x2_t *)v50.f32), *(float32x2_t *)v35.f32, *(float32x2_t *)v14.f32);
  *(int8x8_t *)v14.f32 = vext_s8(*(int8x8_t *)v60.f32, (int8x8_t)vmls_f32(vmul_f32(*(float32x2_t *)v14.f32, *(float32x2_t *)v31.f32), *(float32x2_t *)v50.f32, *(float32x2_t *)v59.f32), 4uLL);
  v14.i64[1] = v60.i64[0];
  v64 = vaddq_f32(vaddq_f32(v62, v63), v14);
  *(int32x2_t *)v63.f32 = vdup_lane_s32(*(int32x2_t *)v64.f32, 1);
  *(int32x2_t *)v62.f32 = vdup_laneq_s32((int32x4_t)v64, 2);
  v65 = vaddq_f32(v64, v64);
  *(int32x2_t *)v60.f32 = vdup_laneq_s32((int32x4_t)v65, 2);
  *(int32x2_t *)v64.f32 = vdup_lane_s32((int32x2_t)vmul_f32(*(float32x2_t *)v64.f32, *(float32x2_t *)v65.f32), 0);
  *(float32x2_t *)v39.f32 = vmul_lane_f32(*(float32x2_t *)v63.f32, *(float32x2_t *)v65.f32, 1);
  *(float32x2_t *)v35.f32 = vmul_laneq_f32(*(float32x2_t *)v62.f32, v65, 2);
  *(float32x2_t *)v63.f32 = vmul_n_f32(*(float32x2_t *)v63.f32, v65.f32[0]);
  v66 = vmul_n_f32(*(float32x2_t *)v62.f32, v65.f32[0]);
  *(float32x2_t *)v50.f32 = vmul_lane_f32((float32x2_t)vdup_lane_s32(*(int32x2_t *)v65.f32, 0), v61, 1);
  *(float32x2_t *)v62.f32 = vmul_lane_f32(*(float32x2_t *)v62.f32, *(float32x2_t *)v65.f32, 1);
  *(float32x2_t *)v65.f32 = vmul_lane_f32((float32x2_t)vdup_lane_s32(*(int32x2_t *)v65.f32, 1), v61, 1);
  v67 = vmul_lane_f32(*(float32x2_t *)v60.f32, v61, 1);
  *(float32x2_t *)v64.f32 = vsub_f32(*(float32x2_t *)_Q5.f32, *(float32x2_t *)v64.f32);
  *(int8x8_t *)_Q5.f32 = vext_s8((int8x8_t)vsub_f32(vsub_f32(*(float32x2_t *)_Q5.f32, *(float32x2_t *)v39.f32), *(float32x2_t *)v35.f32), (int8x8_t)vadd_f32(*(float32x2_t *)v63.f32, v67), 4uLL);
  _Q5.i64[1] = vsub_f32(v66, *(float32x2_t *)v65.f32).u32[0];
  *(int8x8_t *)v63.f32 = vext_s8((int8x8_t)vsub_f32(*(float32x2_t *)v63.f32, v67), (int8x8_t)vsub_f32(*(float32x2_t *)v64.f32, *(float32x2_t *)v35.f32), 4uLL);
  v63.i64[1] = vadd_f32(*(float32x2_t *)v62.f32, *(float32x2_t *)v50.f32).u32[0];
  v103[2] = v20;
  v103[3] = v30;
  v102[0] = _Q5;
  v102[1] = v63;
  *(int8x8_t *)v30.f32 = vext_s8((int8x8_t)vadd_f32(v66, *(float32x2_t *)v65.f32), (int8x8_t)vsub_f32(*(float32x2_t *)v62.f32, *(float32x2_t *)v50.f32), 4uLL);
  v30.i64[1] = vsub_f32(*(float32x2_t *)v64.f32, *(float32x2_t *)v39.f32).u32[0];
  v102[2] = v30;
  v102[3] = v58;
  v101 = 0;
  v100 = vdup_n_s32(0x7F7FFFFFu);
  v99 = 0uLL;
  v98 = 0;
  v68 = physx::Gu::testFaceNormal(a1, a2, a3, a4, v102, v103, &v98, &v100, &v97, &v99, 0, &v101);
  result = 0;
  if (v68)
  {
    result = physx::Gu::testFaceNormal(a2, a1, a4, a3, v103, v102, &v98, &v100, &v96, &v99, 1, &v101);
    if ((_DWORD)result)
    {
      result = physx::Gu::testEdgeNormal(a1, a2, a3, a4, (uint64_t)v102, (uint64_t)v103, (uint64_t)&v98, (uint64_t)&v100, (float32x4_t *)&v99, &v101);
      if ((_DWORD)result)
      {
        *a5 = v100;
        v70 = (float32x2_t)vextq_s8(v99, v99, 8uLL).u64[0];
        v71 = (float32x2_t)vext_s8(*(int8x8_t *)v99.i8, (int8x8_t)v70, 4uLL);
        v72 = vneg_f32(v70);
        v73 = vneg_f32(*(float32x2_t *)v99.i8);
        if (v101 == 1)
        {
          v74 = *(float32x4_t *)*(_QWORD *)(a4 + 32);
          v75 = v74;
          v75.i32[3] = 0;
          v76 = (float32x2_t)vdupq_laneq_s32((int32x4_t)v74, 3).u64[0];
          v77 = vmulq_n_f32((float32x4_t)v99, vmla_f32((float32x2_t)0xBF000000BF000000, v76, v76).f32[0]);
          v77.i32[3] = 0;
          v78 = (float32x2_t)vextq_s8((int8x16_t)v75, (int8x16_t)v75, 8uLL).u64[0];
          v79 = (int8x8_t)vmla_f32(vmul_f32(v71, *(float32x2_t *)v74.f32), (float32x2_t)vext_s8(*(int8x8_t *)v74.f32, (int8x8_t)v78, 4uLL), v73);
          *(int8x8_t *)v80.f32 = vext_s8(v79, (int8x8_t)vmla_f32(vmul_f32(*(float32x2_t *)v99.i8, v78), *(float32x2_t *)v74.f32, v72), 4uLL);
          v80.i64[1] = v79.u32[0];
          v81 = vmlaq_laneq_f32(v77, v80, v74, 3);
          v81.i64[1] = vextq_s8((int8x16_t)v81, (int8x16_t)v81, 8uLL).u32[0];
          v82 = vmulq_f32((float32x4_t)v99, v75);
          v82.i64[0] = vpaddq_f32(v82, v82).u64[0];
          v83 = vmlaq_n_f32(v81, v75, vpadd_f32(*(float32x2_t *)v82.f32, *(float32x2_t *)v82.f32).f32[0]);
          v84 = vaddq_f32(v83, v83);
        }
        else
        {
          v85 = *(float32x4_t *)*(_QWORD *)(a3 + 32);
          v86 = v85;
          v86.i32[3] = 0;
          v87 = (float32x2_t)vdupq_laneq_s32((int32x4_t)v85, 3).u64[0];
          v88 = vmulq_n_f32((float32x4_t)v99, vmla_f32((float32x2_t)0xBF000000BF000000, v87, v87).f32[0]);
          v88.i32[3] = 0;
          v89 = (float32x2_t)vextq_s8((int8x16_t)v86, (int8x16_t)v86, 8uLL).u64[0];
          v90 = (int8x8_t)vmla_f32(vmul_f32(v71, *(float32x2_t *)v85.f32), (float32x2_t)vext_s8(*(int8x8_t *)v85.f32, (int8x8_t)v89, 4uLL), v73);
          *(int8x8_t *)v91.f32 = vext_s8(v90, (int8x8_t)vmla_f32(vmul_f32(*(float32x2_t *)v99.i8, v89), *(float32x2_t *)v85.f32, v72), 4uLL);
          v91.i64[1] = v90.u32[0];
          v92 = vmlaq_laneq_f32(v88, v91, v85, 3);
          v92.i64[1] = vextq_s8((int8x16_t)v92, (int8x16_t)v92, 8uLL).u32[0];
          v93 = vmulq_f32((float32x4_t)v99, v86);
          v93.i64[0] = vpaddq_f32(v93, v93).u64[0];
          v94 = vmlaq_n_f32(v92, v86, vpadd_f32(*(float32x2_t *)v93.f32, *(float32x2_t *)v93.f32).f32[0]);
          v95 = vaddq_f32(v94, v94);
          v95.i32[3] = 0;
          v84 = vnegq_f32(v95);
        }
        v84.i32[3] = 0;
        *a6 = v84;
        return 1;
      }
    }
  }
  return result;
}

float32x4_t physx::Gu::generatedCapsuleBoxFaceContacts(float32x4_t *a1, uint64_t a2, float32x4_t *a3, _QWORD *a4, float32x4_t *a5, uint64_t a6, _DWORD *a7, float32x4_t *a8, float32x4_t result)
{
  float32x4_t v13;
  float32x4_t *v14;
  float32x4_t v15;
  float32x4_t v16;
  float32x4_t v17;
  float32x4_t v18;
  float32x2_t v19;
  float32x4_t v20;
  float32x2_t v21;
  float32x2_t v22;
  int v23;
  float32x2_t v28;
  float32x2_t v29;
  int v30;
  float32x4_t v31;
  unsigned __int8 *v32;
  float32x4_t v33;
  float32x4_t *v34;
  float32x4_t v35;
  float32x4_t v36;
  float32x4_t v37;
  float32x4_t v38;
  int8x16_t v39;
  float32x2_t v40;
  int8x16_t v41;
  int8x16_t v42;
  float32x4_t v43;
  float32x2_t v44;
  float32x2_t v45;
  int v46;
  float32x2_t v47;
  float32x2_t v48;
  float32x2_t v49;
  float32x2_t v50;
  float32x2_t v51;
  int8x16_t v52;
  int8x16_t v53;
  int32x4_t v54;
  int8x8_t v55;
  float32x4_t v59;
  float32x4_t v60;
  float32x4_t v61;
  uint64_t v62;
  uint64_t v63;
  size_t v64;
  __int8 *v65;
  unint64_t v66;
  unint64_t v67;
  float32x4_t v68;
  float32x4_t v69;
  float32x4_t v70;
  float32x4_t v71;
  float32x4_t v72;
  float32x4_t v73;
  float32x4_t v74;
  float32x4_t v75;
  float32x4_t v76;
  unint64_t v77;
  float32x4_t *v78;
  int32x4_t v79;
  uint64_t v80;
  float32x4_t v81;
  float32x4_t v82;
  float32x4_t v83;
  float32x4_t v84;
  float32x4_t v85;
  uint64_t v87;
  float32x2_t v88;
  float32x2_t v89;
  uint64_t v90;
  uint64_t v91;
  char v92;
  __int128 v93;
  float32x2_t v94;
  __int128 v95;
  float32x2_t v96;
  float32x2_t v97;
  float32x2_t v98;
  float32x2_t v99;
  float32x2_t v100;
  int8x8_t v101;
  int8x8_t v102;
  int8x8_t v103;
  float32x4_t v104;
  float32x4_t v105;
  float32x4_t v106;
  float32x4_t v107;
  float32x4_t v108;
  unsigned int v109;
  unsigned __int32 v110;
  float32x4_t v111;
  float32x4_t v112;
  float32x4_t v113;
  float32x4_t v114;
  float32x4_t v115;
  uint64_t v116;
  int32x2_t v117;
  int32x4_t v118;
  int8x8_t v119;
  uint64_t v121;
  float32x2_t v122;
  uint64_t v123;
  char v124;
  __int128 v125;
  float32x2_t v126;
  __int128 v127;
  float32x2_t v128;
  float32x2_t v129;
  float32x2_t v130;
  float32x2_t v131;
  float32x2_t v132;
  int8x8_t v133;
  int8x8_t v134;
  int8x8_t v135;
  float32x4_t v136;
  float32x4_t v137;
  float32x4_t v138;
  float32x4_t v139;
  __int128 v140;
  unsigned int v141;
  int8x16_t v142;
  int32x4_t v143;
  float32x4_t v144;
  float32x4_t v145;
  int32x4_t v146;
  float32x4_t v147;
  int8x16_t v148;
  float32x4_t *v149;
  int32x4_t v150;
  uint64_t v151;

  v151 = *MEMORY[0x24BDAC8D0];
  v13 = *a3;
  v13.i64[1] = a3->u32[2];
  v14 = (float32x4_t *)a4[6];
  v15 = vmulq_f32(*v14, v13);
  v15.i64[0] = vpaddq_f32(v15, v15).u64[0];
  v16 = vmulq_f32(v13, v14[1]);
  v16.i64[0] = vpaddq_f32(v16, v16).u64[0];
  v17 = vmulq_f32(v13, v14[2]);
  v17.i64[0] = vpaddq_f32(v17, v17).u64[0];
  *(int8x8_t *)v18.f32 = vext_s8((int8x8_t)vpadd_f32(*(float32x2_t *)v15.f32, *(float32x2_t *)v15.f32), (int8x8_t)vpadd_f32(*(float32x2_t *)v16.f32, *(float32x2_t *)v16.f32), 4uLL);
  v18.i64[1] = vpadd_f32(*(float32x2_t *)v17.f32, *(float32x2_t *)v17.f32).u32[0];
  v19 = *(float32x2_t *)a1[5].f32;
  v20 = vmulq_f32(v18, v18);
  v20.i64[0] = vpaddq_f32(v20, v20).u64[0];
  v21 = vpadd_f32(*(float32x2_t *)v20.f32, *(float32x2_t *)v20.f32);
  v22 = vrsqrte_f32(v21);
  v23 = 4;
  do
  {
    v22 = vmul_f32(v22, vrsqrts_f32(vmul_f32(v22, v22), v21));
    --v23;
  }
  while (v23);
  __asm { FMOV            V6.2S, #1.0 }
  v28 = vmul_f32(v21, (float32x2_t)vbsl_s8((int8x8_t)vdup_lane_s32(vceqz_f32(v21), 0), _D6, (int8x8_t)v22));
  v29 = vrecpe_f32(v28);
  v30 = 4;
  do
  {
    v29 = vmul_f32(v29, vrecps_f32(v28, v29));
    --v30;
  }
  while (v30);
  v31 = vmulq_n_f32(v18, v29.f32[0]);
  v31.i32[3] = 0;
  v150 = (int32x4_t)v31;
  v32 = (unsigned __int8 *)(*(_QWORD *)(a2 + 40) + a3[1].u16[0]);
  v33 = *(float32x4_t *)(*(_QWORD *)(a2 + 32) + 12 * *v32);
  v34 = (float32x4_t *)a4[5];
  v35 = vmulq_n_f32(*v34, v33.f32[0]);
  v35.i32[3] = 0;
  v36 = vmulq_lane_f32(v34[1], *(float32x2_t *)v33.f32, 1);
  v36.i32[3] = 0;
  v37 = vmulq_laneq_f32(v34[2], v33, 2);
  v37.i32[3] = 0;
  v38 = vaddq_f32(vaddq_f32(v35, v36), v37);
  v39 = (int8x16_t)vmulq_f32(v31, vsubq_f32(a1[3], v38));
  v40 = (float32x2_t)vextq_s8(v39, v39, 8uLL).u64[0];
  v41 = (int8x16_t)vmulq_f32(v31, vsubq_f32(a1[4], v38));
  v42 = vextq_s8(v41, v41, 8uLL);
  v43 = vmulq_f32(v31, *a8);
  v43.i64[0] = vpaddq_f32(v43, v43).u64[0];
  v44 = vpadd_f32(*(float32x2_t *)v43.f32, *(float32x2_t *)v43.f32);
  v45 = vrecpe_f32(v44);
  v46 = 4;
  do
  {
    v45 = vmul_f32(v45, vrecps_f32(v44, v45));
    --v46;
  }
  while (v46);
  v47 = vpadd_f32(*(float32x2_t *)v39.i8, v40);
  v48 = vpadd_f32(*(float32x2_t *)v41.i8, *(float32x2_t *)v42.i8);
  v49 = vadd_f32(v19, *(float32x2_t *)result.f32);
  v50 = vpadd_f32(v47, v47);
  v51 = (float32x2_t)vand_s8((int8x8_t)vdup_lane_s32(vcgtz_f32(v44), 0), (int8x8_t)v45);
  *(float32x2_t *)v42.i8 = vmul_f32(v50, v51);
  *(float32x2_t *)v41.i8 = vmul_f32(vpadd_f32(v48, v48), v51);
  v52 = (int8x16_t)vdupq_lane_s32(vcge_f32(v49, *(float32x2_t *)v42.i8), 0);
  v53 = (int8x16_t)vdupq_lane_s32(vcge_f32(v49, *(float32x2_t *)v41.i8), 0);
  v54.i64[0] = -1;
  v54.i64[1] = -1;
  v55 = (int8x8_t)vmovn_s32(vceqq_s32((int32x4_t)vorrq_s8(v53, v52), v54));
  *(int8x8_t *)result.f32 = vuzp1_s8(v55, v55);
  if (result.i32[0] == -1)
  {
    v142 = v42;
    v143 = (int32x4_t)v52;
    v146 = (int32x4_t)v53;
    v148 = v41;
    v149 = a8;
    *(int8x8_t *)v59.f32 = physx::Gu::findRotationMatrixFromZAxis(&v150);
    v144 = v59;
    v145 = v60;
    v147 = v61;
    v62 = a3[1].u8[2];
    MEMORY[0x24BDAC7A8](v63);
    v65 = &v142.i8[-v64];
    bzero((char *)&v142 - v64, v64);
    v66 = (unint64_t)(v65 + 15) & 0xFFFFFFFFFFFFFFF0;
    (*(void (**)(_QWORD *, unsigned __int8 *, uint64_t, _QWORD, unint64_t))(*a4 + 32))(a4, v32, v62, *(_QWORD *)(a2 + 32), v66);
    if (a3[1].i8[2])
    {
      v67 = 0;
      v68 = (float32x4_t)xmmword_2261A69F0;
      result = (float32x4_t)xmmword_2261AA230;
      v69 = v147;
      v71 = v144;
      v70 = v145;
      do
      {
        v72 = *(float32x4_t *)(v66 + 16 * v67);
        v73 = vmulq_n_f32(v71, v72.f32[0]);
        v73.i32[3] = 0;
        v74 = vmulq_lane_f32(v70, *(float32x2_t *)v72.f32, 1);
        v74.i32[3] = 0;
        v75 = vmulq_laneq_f32(v69, v72, 2);
        v75.i32[3] = 0;
        v76 = vaddq_f32(v75, vaddq_f32(v73, v74));
        *(float32x4_t *)(v66 + 16 * v67) = v76;
        v68 = vminq_f32(v68, v76);
        result = vmaxq_f32(result, v76);
        ++v67;
        v77 = a3[1].u8[2];
      }
      while (v67 < v77);
      v78 = v149;
    }
    else
    {
      LODWORD(v77) = 0;
      result = (float32x4_t)xmmword_2261AA230;
      v68 = (float32x4_t)xmmword_2261A69F0;
      v78 = v149;
      v69 = v147;
      v71 = v144;
      v70 = v145;
    }
    v79.i64[0] = -1;
    v79.i64[1] = -1;
    if (vuzp1_s8((int8x8_t)vmovn_s32(vceqq_s32(v143, v79)), *(int8x8_t *)result.f32).u32[0] == -1)
    {
      v80 = v77;
      v81 = vmlsq_lane_f32(a1[3], *v78, *(float32x2_t *)v142.i8, 0);
      v82 = vmulq_n_f32(v71, v81.f32[0]);
      v82.i32[3] = 0;
      v83 = vmulq_lane_f32(v70, *(float32x2_t *)v81.f32, 1);
      v83.i32[3] = 0;
      v84 = vmulq_laneq_f32(v69, v81, 2);
      v84.i32[3] = 0;
      v85 = vaddq_f32(v84, vaddq_f32(v82, v83));
      v83.i64[0] = vorrq_s8((int8x16_t)vcgtq_f32(v68, v85), (int8x16_t)vcgtq_f32(v85, result)).u64[0];
      if (vuzp1_s8((int8x8_t)vmovn_s32(vceqq_s32((int32x4_t)vorrq_s8((int8x16_t)vdupq_lane_s32(*(int32x2_t *)v83.f32, 0), (int8x16_t)vdupq_lane_s32(*(int32x2_t *)v83.f32, 1)), v79)), *(int8x8_t *)result.f32).u32[0] != -1&& (_DWORD)v77 != 0)
      {
        v87 = 0;
        v81.i64[1] = vextq_s8((int8x16_t)v81, (int8x16_t)v81, 8uLL).u32[0];
        v88 = (float32x2_t)vdup_lane_s32(*(int32x2_t *)v85.f32, 0);
        v89 = (float32x2_t)vdup_lane_s32(*(int32x2_t *)v85.f32, 1);
        LODWORD(v90) = v77 - 1;
        v91 = v77 - 1;
        v92 = 1;
        while (1)
        {
          v93 = *(_OWORD *)(v66 + 16 * v90);
          v90 = v87;
          v94 = (float32x2_t)vdup_lane_s32(*(int32x2_t *)&v93, 1);
          v95 = *(_OWORD *)(v66 + 16 * v87);
          v96 = (float32x2_t)vdup_lane_s32(*(int32x2_t *)&v95, 1);
          v97 = (float32x2_t)vdup_lane_s32(*(int32x2_t *)&v93, 0);
          v98 = (float32x2_t)vdup_lane_s32(*(int32x2_t *)&v95, 0);
          if (vuzp1_s8((int8x8_t)vdup_lane_s16((int16x4_t)vorr_s8(vand_s8((int8x8_t)vceq_f32(v88, v98), (int8x8_t)vceq_f32(v89, v96)), vand_s8((int8x8_t)vceq_f32(v88, v97), (int8x8_t)vceq_f32(v89, v94))), 0), *(int8x8_t *)result.f32).u32[0] == -1)break;
          if ((veor_s8((int8x8_t)vcgt_f32(v94, v89), (int8x8_t)vcgt_f32(v96, v89)).u8[0] & 1) != 0
            && (v99 = vsub_f32(v96, v94),
                v100 = vmul_f32(vsub_f32(v89, v94), vsub_f32(v98, v97)),
                v101 = (int8x8_t)vmul_n_f32(v99, v85.f32[0]),
                v102 = (int8x8_t)vadd_f32(v100, vmul_f32(vadd_f32(v97, (float32x2_t)0x3400000034000000), v99)),
                v103 = (int8x8_t)vdup_lane_s32(vcgtz_f32(v99), 0),
                (vcge_f32((float32x2_t)vbsl_s8(v103, v102, v101), (float32x2_t)vbsl_s8(v103, v101, v102)).u8[0] & 1) != 0))
          {
            if ((v92 & 1) == 0)
              goto LABEL_29;
            v92 = 0;
            ++v87;
            if (v91 == v90)
              break;
          }
          else
          {
            ++v87;
            if (v80 == v90 + 1)
            {
              if ((v92 & 1) != 0)
                goto LABEL_29;
              break;
            }
          }
        }
        v104 = vsubq_f32(a1[3], a5[3]);
        v105 = vmulq_f32(*a5, v104);
        v105.i64[0] = vpaddq_f32(v105, v105).u64[0];
        v106 = vmulq_f32(v104, a5[1]);
        v106.i64[0] = vpaddq_f32(v106, v106).u64[0];
        v107 = vmulq_f32(v104, a5[2]);
        v107.i64[0] = vpaddq_f32(v107, v107).u64[0];
        *(int8x8_t *)v105.f32 = vext_s8((int8x8_t)vpadd_f32(*(float32x2_t *)v105.f32, *(float32x2_t *)v105.f32), (int8x8_t)vpadd_f32(*(float32x2_t *)v106.f32, *(float32x2_t *)v106.f32), 4uLL);
        v105.i64[1] = vpadd_f32(*(float32x2_t *)v107.f32, *(float32x2_t *)v107.f32).u32[0];
        *(float32x4_t *)(a6 + 48 * *a7) = v105;
        *(float32x4_t *)(a6 + 48 * *a7 + 16) = v81;
        v108 = *v78;
        v108.i32[3] = v142.i32[1];
        v109 = (*a7)++;
        *(float32x4_t *)(a6 + 48 * v109 + 32) = v108;
      }
    }
LABEL_29:
    v110 = v148.u32[1];
    if (vuzp1_s8((int8x8_t)vmovn_s32(vceqq_s32(v146, v79)), *(int8x8_t *)result.f32).u32[0] == -1)
    {
      v111 = vmlsq_lane_f32(a1[4], *v78, *(float32x2_t *)v148.i8, 0);
      v112 = vmulq_n_f32(v71, v111.f32[0]);
      v112.i32[3] = 0;
      v113 = vmulq_lane_f32(v70, *(float32x2_t *)v111.f32, 1);
      v113.i32[3] = 0;
      v114 = vmulq_laneq_f32(v69, v111, 2);
      v114.i32[3] = 0;
      v115 = vaddq_f32(v114, vaddq_f32(v112, v113));
      v116 = a3[1].u8[2];
      v117 = (int32x2_t)vorrq_s8((int8x16_t)vcgtq_f32(v68, v115), (int8x16_t)vcgtq_f32(v115, result)).u64[0];
      v118.i64[0] = -1;
      v118.i64[1] = -1;
      v119 = (int8x8_t)vmovn_s32(vceqq_s32((int32x4_t)vorrq_s8((int8x16_t)vdupq_lane_s32(v117, 0), (int8x16_t)vdupq_lane_s32(v117, 1)), v118));
      *(int8x8_t *)result.f32 = vuzp1_s8(v119, v119);
      if (result.i32[0] != -1 && (_DWORD)v116 != 0)
      {
        v121 = 0;
        v111.i64[1] = vextq_s8((int8x16_t)v111, (int8x16_t)v111, 8uLL).u32[0];
        *(int32x2_t *)result.f32 = vdup_lane_s32(*(int32x2_t *)v115.f32, 0);
        v122 = (float32x2_t)vdup_lane_s32(*(int32x2_t *)v115.f32, 1);
        LODWORD(v123) = v116 - 1;
        v124 = 1;
        while (1)
        {
          v125 = *(_OWORD *)(v66 + 16 * v123);
          v123 = v121;
          v126 = (float32x2_t)vdup_lane_s32(*(int32x2_t *)&v125, 1);
          v127 = *(_OWORD *)(v66 + 16 * v121);
          v128 = (float32x2_t)vdup_lane_s32(*(int32x2_t *)&v127, 1);
          v129 = (float32x2_t)vdup_lane_s32(*(int32x2_t *)&v125, 0);
          v130 = (float32x2_t)vdup_lane_s32(*(int32x2_t *)&v127, 0);
          if (vuzp1_s8((int8x8_t)vdup_lane_s16((int16x4_t)vorr_s8(vand_s8((int8x8_t)vceq_f32(*(float32x2_t *)result.f32, v130), (int8x8_t)vceq_f32(v122, v128)), vand_s8((int8x8_t)vceq_f32(*(float32x2_t *)result.f32, v129), (int8x8_t)vceq_f32(v122, v126))), 0), *(int8x8_t *)result.f32).u32[0] == -1)break;
          if ((veor_s8((int8x8_t)vcgt_f32(v126, v122), (int8x8_t)vcgt_f32(v128, v122)).u8[0] & 1) != 0
            && (v131 = vsub_f32(v128, v126),
                v132 = vmul_f32(vsub_f32(v122, v126), vsub_f32(v130, v129)),
                v133 = (int8x8_t)vmul_n_f32(v131, v115.f32[0]),
                v134 = (int8x8_t)vadd_f32(v132, vmul_f32(vadd_f32(v129, (float32x2_t)0x3400000034000000), v131)),
                v135 = (int8x8_t)vdup_lane_s32(vcgtz_f32(v131), 0),
                (vcge_f32((float32x2_t)vbsl_s8(v135, v134, v133), (float32x2_t)vbsl_s8(v135, v133, v134)).u8[0] & 1) != 0))
          {
            if ((v124 & 1) == 0)
              return result;
            v124 = 0;
            ++v121;
            if (v116 - 1 == v123)
              break;
          }
          else
          {
            ++v121;
            if (v116 == v123 + 1)
            {
              if ((v124 & 1) != 0)
                return result;
              break;
            }
          }
        }
        v136 = vsubq_f32(a1[4], a5[3]);
        v137 = vmulq_f32(*a5, v136);
        v137.i64[0] = vpaddq_f32(v137, v137).u64[0];
        v138 = vmulq_f32(v136, a5[1]);
        v138.i64[0] = vpaddq_f32(v138, v138).u64[0];
        v139 = vmulq_f32(v136, a5[2]);
        v139.i64[0] = vpaddq_f32(v139, v139).u64[0];
        *(int8x8_t *)&v140 = vext_s8((int8x8_t)vpadd_f32(*(float32x2_t *)v137.f32, *(float32x2_t *)v137.f32), (int8x8_t)vpadd_f32(*(float32x2_t *)v138.f32, *(float32x2_t *)v138.f32), 4uLL);
        *((_QWORD *)&v140 + 1) = vpadd_f32(*(float32x2_t *)v139.f32, *(float32x2_t *)v139.f32).u32[0];
        *(_OWORD *)(a6 + 48 * *a7) = v140;
        *(float32x4_t *)(a6 + 48 * *a7 + 16) = v111;
        result = *v78;
        result.i32[3] = v110;
        v141 = (*a7)++;
        *(float32x4_t *)(a6 + 48 * v141 + 32) = result;
      }
    }
  }
  return result;
}

uint64_t physx::Gu::generatedContactsEEContacts(float32x4_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, float32x4_t *a6, uint64_t a7, _DWORD *a8, _QWORD *a9, int8x8_t *a10)
{
  uint64_t v17;
  uint64_t v18;
  size_t v19;
  char *v20;
  unint64_t v21;
  uint64_t result;
  unsigned int v23;
  uint64_t v24;
  uint64_t v25;
  float v26;
  float32x4_t v27;
  float32x4_t v28;
  float32x4_t v29;
  float32x4_t v30;
  float32x2_t v31;
  float32x2_t v32;
  int8x8_t v33;
  float32x4_t v34;
  float32x4_t v35;
  float32x2_t v36;
  float32x4_t v37;
  float32x4_t v38;
  float32x4_t v39;
  float32x2_t v40;
  float32x4_t v41;
  float32x4_t v42;
  float32x4_t v43;
  float32x2_t v44;
  float32x2_t v45;
  int v46;
  float32x4_t v47;
  int8x8_t v48;
  float32x4_t v49;
  float32x4_t v50;
  float32x4_t v51;
  float32x4_t v52;
  float32x2_t v53;
  float32x2_t v54;
  int v55;
  float32x2_t v56;
  float32x2_t v57;
  float32x4_t v58;
  float32x4_t v59;
  float32x2_t v60;
  float32x4_t v61;
  float32x4_t v62;
  float32x4_t v63;
  float32x4_t v64;
  float32x4_t v65;
  __int128 v66;
  unsigned int v67;
  _QWORD v68[2];

  v68[1] = *MEMORY[0x24BDAC8D0];
  v17 = a3 + *(unsigned __int16 *)(a4 + 16);
  v18 = *(unsigned __int8 *)(a4 + 18);
  MEMORY[0x24BDAC7A8](a1);
  v20 = (char *)v68 - v19;
  bzero((char *)v68 - v19, v19);
  v21 = (unint64_t)(v20 + 15) & 0xFFFFFFFFFFFFFFF0;
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, unint64_t))(*(_QWORD *)a5 + 32))(a5, v17, v18, a2, v21);
  v23 = *(unsigned __int8 *)(a4 + 18);
  if (*(_BYTE *)(a4 + 18))
  {
    v24 = 0;
    LODWORD(v25) = v23 - 1;
    v26 = COERCE_FLOAT(*a9) + COERCE_FLOAT(a1[5].i64[0]);
    do
    {
      v27 = *(float32x4_t *)(v21 + 16 * v25);
      v25 = v24;
      v28 = *(float32x4_t *)(v21 + 16 * v24);
      v29 = vsubq_f32(v27, v28);
      v30 = *(float32x4_t *)a10->i8;
      v31 = (float32x2_t)vextq_s8((int8x16_t)v30, (int8x16_t)v30, 8uLL).u64[0];
      v32 = (float32x2_t)vext_s8(*a10, (int8x8_t)v31, 4uLL);
      v33 = (int8x8_t)vmls_f32(vmul_f32(*(float32x2_t *)v29.f32, v32), (float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v29, (int8x16_t)v29, 4uLL), (float32x2_t)*a10);
      *(int8x8_t *)v34.f32 = vext_s8(v33, (int8x8_t)vmls_f32(vmul_f32((float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v29, (int8x16_t)v29, 8uLL), (float32x2_t)*a10), *(float32x2_t *)v29.f32, v31), 4uLL);
      v34.i64[1] = v33.u32[0];
      v35 = vmulq_f32(v28, v34);
      v35.i64[0] = vpaddq_f32(v35, v35).u64[0];
      v36 = vpadd_f32(*(float32x2_t *)v35.f32, *(float32x2_t *)v35.f32);
      v37 = a1[3];
      v38 = a1[4];
      v39 = vmulq_f32(v37, v34);
      v39.i64[0] = vpaddq_f32(v39, v39).u64[0];
      v40 = vpadd_f32(*(float32x2_t *)v39.f32, *(float32x2_t *)v39.f32);
      v41 = vmulq_f32(v38, v34);
      v41.i64[0] = vpaddq_f32(v41, v41).u64[0];
      if (vmul_f32(vsub_f32(v40, v36), vsub_f32(vpadd_f32(*(float32x2_t *)v41.f32, *(float32x2_t *)v41.f32), v36)).f32[0] <= 0.0)
      {
        v42 = vsubq_f32(v38, v37);
        v43 = vmulq_f32(v34, v42);
        v43.i64[0] = vpaddq_f32(v43, v43).u64[0];
        v44 = vpadd_f32(*(float32x2_t *)v43.f32, *(float32x2_t *)v43.f32);
        if (v44.f32[0] != 0.0)
        {
          v45 = vrecpe_f32(v44);
          v46 = 4;
          do
          {
            v45 = vmul_f32(v45, vrecps_f32(v44, v45));
            --v46;
          }
          while (v46);
          v47 = vmlaq_n_f32(v37, v42, vmul_f32(vsub_f32(v36, v40), v45).f32[0]);
          v47.i64[1] = vextq_s8((int8x16_t)v47, (int8x16_t)v47, 8uLL).u32[0];
          v48 = (int8x8_t)vmls_f32(vmul_f32(*(float32x2_t *)v30.f32, (float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v42, (int8x16_t)v42, 4uLL)), v32, *(float32x2_t *)v42.f32);
          *(int8x8_t *)v49.f32 = vext_s8(v48, (int8x8_t)vmls_f32(vmul_f32(v31, *(float32x2_t *)v42.f32), *(float32x2_t *)v30.f32, (float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v42, (int8x16_t)v42, 8uLL)), 4uLL);
          v49.i64[1] = v48.u32[0];
          v50 = vsubq_f32(v47, v28);
          v51 = vmulq_f32(v49, v50);
          v52 = vmulq_f32(v29, v49);
          v52.i64[0] = vpaddq_f32(v52, v52).u64[0];
          v53 = vpadd_f32(*(float32x2_t *)v52.f32, *(float32x2_t *)v52.f32);
          v54 = vrecpe_f32(v53);
          v55 = 4;
          do
          {
            v54 = vmul_f32(v54, vrecps_f32(v53, v54));
            --v55;
          }
          while (v55);
          v56 = (float32x2_t)vpaddq_f32(v51, v51).u64[0];
          v57 = vmul_f32(v54, vpadd_f32(v56, v56));
          if (v57.f32[0] <= 1.005 && v57.f32[0] >= -0.005)
          {
            v58 = vmlsq_lane_f32(v50, v29, v57, 0);
            v58.i64[1] = vextq_s8((int8x16_t)v58, (int8x16_t)v58, 8uLL).u32[0];
            v59 = vmulq_f32(v30, v58);
            v59.i64[0] = vpaddq_f32(v59, v59).u64[0];
            v60 = vpadd_f32(*(float32x2_t *)v59.f32, *(float32x2_t *)v59.f32);
            if (v26 >= v60.f32[0])
            {
              v61 = vsubq_f32(v47, v58);
              v62 = vsubq_f32(v47, a6[3]);
              v63 = vmulq_f32(*a6, v62);
              v63.i64[0] = vpaddq_f32(v63, v63).u64[0];
              v64 = vmulq_f32(v62, a6[1]);
              v64.i64[0] = vpaddq_f32(v64, v64).u64[0];
              v65 = vmulq_f32(v62, a6[2]);
              v65.i64[0] = vpaddq_f32(v65, v65).u64[0];
              *(int8x8_t *)v63.f32 = vext_s8((int8x8_t)vpadd_f32(*(float32x2_t *)v63.f32, *(float32x2_t *)v63.f32), (int8x8_t)vpadd_f32(*(float32x2_t *)v64.f32, *(float32x2_t *)v64.f32), 4uLL);
              v63.i64[1] = vpadd_f32(*(float32x2_t *)v65.f32, *(float32x2_t *)v65.f32).u32[0];
              *(float32x4_t *)(a7 + 48 * *a8) = v63;
              *(float32x4_t *)(a7 + 48 * *a8 + 16) = v61;
              v66 = *(_OWORD *)a10->i8;
              HIDWORD(v66) = v60.i32[1];
              v67 = (*a8)++;
              *(_OWORD *)(a7 + 48 * v67 + 32) = v66;
              v23 = *(unsigned __int8 *)(a4 + 18);
            }
          }
        }
      }
      v24 = v25 + 1;
    }
    while (v25 + 1 < (unint64_t)v23);
  }
  return result;
}

uint64_t physx::Gu::generateCapsuleBoxFullContactManifold(float32x4_t *a1, uint64_t a2, _QWORD *a3, float32x4_t *a4, uint64_t a5, int *a6, float32x2_t *a7, int8x16_t *a8, float32x4_t a9, float a10, float32x2_t *a11, char a12)
{
  int v20;
  _OWORD *v21;
  float32x4_t v22;
  float32x4_t *v23;
  float32x4_t v24;
  float32x4_t v25;
  float32x4_t v26;
  unsigned __int32 v27;
  float32x4_t v28;
  float32x4_t v29;
  float32x2_t v30;
  uint64_t v31;
  unsigned int v32;
  _OWORD *v33;
  uint64_t i;
  float32x4_t v35;
  float32x4_t v36;
  float32x4_t v37;
  float32x2_t v38;
  unsigned int v39;
  float v40;
  float v41;
  float32x4_t v42;
  float32x4_t *v43;
  float32x4_t v44;
  float32x4_t v45;
  float32x4_t v46;
  uint64_t v48;
  float v55;
  float v56;
  uint64_t v57;
  unsigned int v58;
  unsigned int v59;
  float *v60;
  uint64_t j;
  float v62;
  float v63;
  float32x4_t v65;
  float32x4_t v66;
  float32x4_t v67;
  float32x4_t v68;
  float32x4_t v69;
  float32x4_t v70;
  uint64_t v71;
  float32x4_t v72;
  float32x2_t v73;
  float32x2_t v74;
  int v75;
  float32x2_t v77;
  float32x2_t v78;
  int v79;
  uint64_t v80;
  float32x4_t v81;
  float32x4_t v82;
  float32x2_t v83;
  float32x4_t v84;
  float32x4_t v85;
  float32x4_t v86;
  float32x4_t v87;
  unsigned __int32 v88;
  float32x4_t v89;
  float32x4_t v90;
  float32x2_t v91;
  float32x2_t v92;
  int v93;
  float32x2_t v94;
  float32x2_t v95;
  int v96;
  float32x4_t v97;
  float32x4_t v98;
  float32x2_t v99;
  unsigned int v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  float32x2_t v104;
  int v105;
  unsigned __int8 *v106;
  float32x4_t v107;
  float32x4_t v108;
  float32x4_t v109;
  float32x4_t v110;
  float32x2_t v111;
  float32x4_t v112;
  float32x2_t v113;
  float32x2_t v114;
  float32x2_t v115;
  int v116;
  unsigned __int8 *v117;
  unsigned int v118;
  float32x4_t v119;
  float32x4_t v120;
  float32x4_t v121;
  float32x4_t v122;
  float32x4_t *v123;
  float32x2_t v124[130];

  v124[128] = *(float32x2_t *)MEMORY[0x24BDAC8D0];
  v20 = *a6;
  if (a12)
  {
    if ((physx::Gu::testSATCapsulePoly(a1, a2, a3, a7, v124, a8) & 1) == 0)
      return 0;
    v21 = *(_OWORD **)(a2 + 24);
    v22 = vnegq_f32(*(float32x4_t *)a8);
    v22.i32[3] = 0;
    v23 = (float32x4_t *)a3[5];
    v24 = vmulq_f32(v22, *v23);
    v24.i64[0] = vpaddq_f32(v24, v24).u64[0];
    v25 = vmulq_f32(v22, v23[1]);
    v25.i64[0] = vpaddq_f32(v25, v25).u64[0];
    v26 = vmulq_f32(v22, v23[2]);
    v26.i64[0] = vpaddq_f32(v26, v26).u64[0];
    v27 = vpadd_f32(*(float32x2_t *)v26.f32, *(float32x2_t *)v26.f32).u32[0];
    *(int8x8_t *)a9.f32 = vext_s8((int8x8_t)vpadd_f32(*(float32x2_t *)v24.f32, *(float32x2_t *)v24.f32), (int8x8_t)vpadd_f32(*(float32x2_t *)v25.f32, *(float32x2_t *)v25.f32), 4uLL);
    a9.i64[1] = v27;
    v28 = *(float32x4_t *)v21;
    v28.i32[3] = 0;
    v29 = vmulq_f32(v28, a9);
    v29.i64[0] = vpaddq_f32(v29, v29).u64[0];
    v30 = vpadd_f32(*(float32x2_t *)v29.f32, *(float32x2_t *)v29.f32);
    v31 = *(unsigned int *)(a2 + 16);
    if (v31 < 2)
    {
      v32 = 0;
    }
    else
    {
      v32 = 0;
      v33 = (_OWORD *)((char *)v21 + 20);
      for (i = 1; i != v31; ++i)
      {
        v35 = *(float32x4_t *)v33;
        v33 = (_OWORD *)((char *)v33 + 20);
        v36 = v35;
        v36.i32[3] = 0;
        v37 = vmulq_f32(v36, a9);
        v37.i64[0] = vpaddq_f32(v37, v37).u64[0];
        v38 = vpadd_f32(*(float32x2_t *)v37.f32, *(float32x2_t *)v37.f32);
        if ((vcgt_f32(v30, v38).u8[0] & 1) != 0)
        {
          v32 = i;
          v39 = -1;
        }
        else
        {
          v39 = 0;
        }
        v30 = (float32x2_t)vbsl_s8((int8x8_t)vdup_n_s32(v39), (int8x8_t)v38, (int8x8_t)v30);
      }
    }
    v101 = *(unsigned int *)(a2 + 20);
    if ((_DWORD)v101)
    {
      v102 = 0;
      a9 = vnegq_f32(a9);
      a9.i32[3] = 0;
      v103 = *(_QWORD *)(a2 + 48);
      v104 = vmul_f32(v30, v30);
      v105 = -1;
      do
      {
        v106 = (unsigned __int8 *)(v103 + (2 * v102));
        v107 = *(float32x4_t *)((char *)v21 + 20 * *v106);
        v107.i32[3] = 0;
        v108 = *(float32x4_t *)((char *)v21 + 20 * v106[1]);
        v108.i32[3] = 0;
        v109 = vaddq_f32(v107, v108);
        v110 = vmulq_f32(v109, v109);
        v110.i64[0] = vpaddq_f32(v110, v110).u64[0];
        v111 = vpadd_f32(*(float32x2_t *)v110.f32, *(float32x2_t *)v110.f32);
        v112 = vmulq_f32(a9, v109);
        v112.i64[0] = vpaddq_f32(v112, v112).u64[0];
        v113 = vpadd_f32(*(float32x2_t *)v112.f32, *(float32x2_t *)v112.f32);
        v114 = vmul_f32(v113, v113);
        if (vuzp1_s8((int8x8_t)vdup_lane_s16((int16x4_t)vand_s8((int8x8_t)vcgt_f32(v114, vmul_f32(v104, v111)), (int8x8_t)vcgez_f32(v113)), 0), *(int8x8_t *)a9.f32).u32[0] == -1)
        {
          v115 = vrecpe_f32(v111);
          v116 = 4;
          do
          {
            v115 = vmul_f32(v115, vrecps_f32(v111, v115));
            --v116;
          }
          while (v116);
          v104 = vmul_f32(v114, v115);
          v105 = v102;
        }
        ++v102;
      }
      while (v102 != v101);
      if (v105 != -1)
      {
        v117 = (unsigned __int8 *)(v103 + (2 * v105));
        v118 = *v117;
        v119 = *(float32x4_t *)((char *)v21 + 20 * *v117);
        v32 = v117[1];
        v119.i32[3] = 0;
        v120 = *(float32x4_t *)((char *)v21 + 20 * v32);
        v120.i32[3] = 0;
        v121 = vmulq_f32(a9, v119);
        v121.i64[0] = vpaddq_f32(v121, v121).u64[0];
        v122 = vmulq_f32(a9, v120);
        a9 = vpaddq_f32(v122, v122);
        if ((vcgt_f32(vpadd_f32(*(float32x2_t *)v121.f32, *(float32x2_t *)v121.f32), vpadd_f32(*(float32x2_t *)a9.f32, *(float32x2_t *)a9.f32)).u8[0] & 1) != 0)v32 = v118;
      }
    }
    v123 = (float32x4_t *)((char *)v21 + 20 * (int)v32);
  }
  else
  {
    v40 = a10 * 0.01;
    v41 = a10 * 0.05;
    if (v40 > a9.f32[0])
      a9.f32[0] = v40;
    if (v41 < a9.f32[0])
      a9.f32[0] = v41;
    v42 = *(float32x4_t *)a8;
    v43 = (float32x4_t *)a3[6];
    v44 = *v43;
    v45 = v43[1];
    v46 = v43[2];
    _Q6 = vaddq_f32(vaddq_f32(vmulq_n_f32(*v43, COERCE_FLOAT(*(_OWORD *)a11->f32)), vmulq_lane_f32(v45, *a11, 1)), vmulq_laneq_f32(v46, *(float32x4_t *)a11->f32, 2));
    v48 = *(_QWORD *)(a2 + 24);
    _S17 = *(_DWORD *)(v48 + 8);
    __asm { FMLA            S16, S17, V6.S[2] }
    v55 = *(float *)(v48 + 12) + _S16;
    v56 = fabsf(v55);
    if (v55 < (float)-a9.f32[0])
      v56 = 3.4028e38;
    v124[0].f32[0] = v56;
    v57 = *(unsigned int *)(a2 + 16);
    if (v57 < 2)
    {
      v59 = 0;
      v58 = 0;
    }
    else
    {
      v58 = 0;
      v59 = 0;
      v60 = (float *)(v48 + 32);
      for (j = 1; j != v57; ++j)
      {
        v62 = *v60
            + (float)((float)((float)(_Q6.f32[1] * *(v60 - 2)) + (float)(_Q6.f32[0] * *(v60 - 3)))
                    + (float)(_Q6.f32[2] * *(v60 - 1)));
        v63 = fabsf(v62);
        if (v62 < (float)-a9.f32[0])
          v63 = 3.4028e38;
        v124[0].f32[j] = v63;
        if (v56 > v63)
        {
          v59 = j;
          v56 = v63;
        }
        if (v62 > v55)
        {
          v55 = v62;
          v58 = j;
        }
        v60 += 5;
      }
    }
    if (v56 != 3.4028e38)
    {
      v65 = vnegq_f32(v42);
      v65.i32[3] = 0;
      v66 = *(float32x4_t *)(v48 + 20 * v59);
      v66.i32[3] = 0;
      v67 = vmulq_f32(v44, v66);
      v67.i64[0] = vpaddq_f32(v67, v67).u64[0];
      v68 = vmulq_f32(v45, v66);
      v68.i64[0] = vpaddq_f32(v68, v68).u64[0];
      v69 = vmulq_f32(v46, v66);
      v69.i64[0] = vpaddq_f32(v69, v69).u64[0];
      *(int8x8_t *)v70.f32 = vext_s8((int8x8_t)vpadd_f32(*(float32x2_t *)v67.f32, *(float32x2_t *)v67.f32), (int8x8_t)vpadd_f32(*(float32x2_t *)v68.f32, *(float32x2_t *)v68.f32), 4uLL);
      v70.i64[1] = vpadd_f32(*(float32x2_t *)v69.f32, *(float32x2_t *)v69.f32).u32[0];
      v71 = v59;
      v72 = vmulq_f32(v70, v70);
      v72.i64[0] = vpaddq_f32(v72, v72).u64[0];
      v73 = vpadd_f32(*(float32x2_t *)v72.f32, *(float32x2_t *)v72.f32);
      v74 = vrsqrte_f32(v73);
      v75 = 4;
      do
      {
        v74 = vmul_f32(v74, vrsqrts_f32(vmul_f32(v74, v74), v73));
        --v75;
      }
      while (v75);
      __asm { FMOV            V6.2S, #1.0 }
      v77 = vmul_f32(v73, (float32x2_t)vbsl_s8((int8x8_t)vdup_lane_s32(vceqz_f32(v73), 0), _D6, (int8x8_t)v74));
      v78 = vrecpe_f32(v77);
      v79 = 4;
      do
      {
        v78 = vmul_f32(v78, vrecps_f32(v77, v78));
        --v79;
      }
      while (v79);
      if ((_DWORD)v57)
      {
        v80 = 0;
        v81 = vmulq_n_f32(v70, v78.f32[0]);
        v81.i32[3] = 0;
        v82 = vmulq_f32(v65, v81);
        v82.i64[0] = vpaddq_f32(v82, v82).u64[0];
        v83 = vpadd_f32(*(float32x2_t *)v82.f32, *(float32x2_t *)v82.f32);
        v58 = v59;
        do
        {
          if (v80 != v71 && (float)(v124[0].f32[v80] - v56) < a9.f32[0])
          {
            v84 = *(float32x4_t *)(v48 + 20 * v80);
            v84.i32[3] = 0;
            v85 = vmulq_f32(v44, v84);
            v85.i64[0] = vpaddq_f32(v85, v85).u64[0];
            v86 = vmulq_f32(v45, v84);
            v86.i64[0] = vpaddq_f32(v86, v86).u64[0];
            v87 = vmulq_f32(v46, v84);
            v87.i64[0] = vpaddq_f32(v87, v87).u64[0];
            v88 = vpadd_f32(*(float32x2_t *)v87.f32, *(float32x2_t *)v87.f32).u32[0];
            *(int8x8_t *)v89.f32 = vext_s8((int8x8_t)vpadd_f32(*(float32x2_t *)v85.f32, *(float32x2_t *)v85.f32), (int8x8_t)vpadd_f32(*(float32x2_t *)v86.f32, *(float32x2_t *)v86.f32), 4uLL);
            v89.i64[1] = v88;
            v90 = vmulq_f32(v89, v89);
            v90.i64[0] = vpaddq_f32(v90, v90).u64[0];
            v91 = vpadd_f32(*(float32x2_t *)v90.f32, *(float32x2_t *)v90.f32);
            v92 = vrsqrte_f32(v91);
            v93 = 4;
            do
            {
              v92 = vmul_f32(v92, vrsqrts_f32(vmul_f32(v92, v92), v91));
              --v93;
            }
            while (v93);
            v94 = vmul_f32(v91, (float32x2_t)vbsl_s8((int8x8_t)vdup_lane_s32(vceqz_f32(v91), 0), _D6, (int8x8_t)v92));
            v95 = vrecpe_f32(v94);
            v96 = 4;
            do
            {
              v95 = vmul_f32(v95, vrecps_f32(v94, v95));
              --v96;
            }
            while (v96);
            v97 = vmulq_n_f32(v89, v95.f32[0]);
            v97.i32[3] = 0;
            v98 = vmulq_f32(v65, v97);
            v98.i64[0] = vpaddq_f32(v98, v98).u64[0];
            v99 = vpadd_f32(*(float32x2_t *)v98.f32, *(float32x2_t *)v98.f32);
            if ((vcgt_f32(v83, v99).u8[0] & 1) != 0)
            {
              v58 = v80;
              v100 = -1;
            }
            else
            {
              v100 = 0;
            }
            v83 = (float32x2_t)vbsl_s8((int8x8_t)vdup_n_s32(v100), (int8x8_t)v99, (int8x8_t)v83);
          }
          ++v80;
        }
        while (v80 != v57);
      }
      else
      {
        v58 = v59;
      }
    }
    v123 = (float32x4_t *)(v48 + 20 * v58);
  }
  *(float32x2_t *)a9.f32 = *a7;
  physx::Gu::generatedCapsuleBoxFaceContacts(a1, a2, v123, a3, a4, a5, a6, (float32x4_t *)a8, a9);
  if ((*a6 - v20) <= 1)
    physx::Gu::generatedContactsEEContacts(a1, *(_QWORD *)(a2 + 32), *(_QWORD *)(a2 + 40), (uint64_t)v123, (uint64_t)a3, a4, a5, a6, a7, (int8x8_t *)a8);
  return 1;
}

uint64_t physx::Gu::testSATCapsulePoly(float32x4_t *a1, uint64_t a2, _QWORD *a3, float32x2_t *a4, float32x2_t *a5, int8x16_t *a6)
{
  unint64_t v6;
  uint64_t v11;
  float32x4_t *v12;
  float32x4_t v13;
  float32x4_t v14;
  float32x4_t v15;
  float32x2_t v16;
  int8x16_t v17;
  float32x2_t v18;
  uint64_t v24;
  float32x4_t v25;
  float32x4_t v26;
  float32x4_t v27;
  float32x4_t v28;
  float32x4_t v29;
  float32x4_t v30;
  int32x2_t v31;
  float32x4_t v32;
  float32x2_t v33;
  float32x2_t v34;
  int v35;
  float32x2_t v36;
  float32x2_t v37;
  int v38;
  float32x4_t v39;
  float32x4_t v40;
  float32x2_t v41;
  float32x2_t v42;
  float32x4_t v43;
  float32x4_t v44;
  float32x2_t v45;
  float32x2_t v46;
  float32x2_t v47;
  unsigned int v48;
  int8x16_t v49;
  int8x16_t *v50;
  unint64_t v51;
  int8x16_t v52;
  float32x2_t v53;
  float32x2_t v54;
  uint64_t v55;
  int v56;
  unsigned __int8 *v57;
  int v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  unsigned __int8 v62;
  unsigned int v63;
  uint64_t v64;
  float32x4_t v65;
  float32x4_t v66;
  float32x4_t v67;
  float32x4_t *v68;
  float32x4_t v69;
  float32x4_t v70;
  float32x4_t v71;
  int8x8_t v72;
  float32x2_t v73;
  float32x2_t v74;
  int v75;
  float32x2_t v76;
  float32x2_t v77;
  int v78;
  float32x4_t v79;
  float32x4_t v80;
  float32x4_t v81;
  float32x2_t v82;
  float32x2_t v83;
  float32x2_t v84;
  float32x2_t v85;
  unsigned int v86;
  int8x16_t v87;
  float32x2_t *v89;
  float32x2_t v90;
  float32x2_t v91;
  uint64_t v92;
  int8x16_t v93;
  float32x4_t v94;
  float32x2_t v95;
  float32x2_t v96;

  v6 = *(unsigned int *)(a2 + 16);
  if ((_DWORD)v6)
  {
    v11 = 0;
    v95 = 0;
    v96 = 0;
    v12 = (float32x4_t *)a3[6];
    v13 = *v12;
    v14 = a1[3];
    v15 = a1[4];
    v16 = *(float32x2_t *)a1[5].f32;
    v17 = (int8x16_t)xmmword_2260E5F20;
    v18 = (float32x2_t)vdup_n_s32(0x7F7FFFFFu);
    __asm { FMOV            V9.2S, #1.0 }
    do
    {
      v24 = *(_QWORD *)(a2 + 24) + 20 * v11;
      v25 = *(float32x4_t *)(*(_QWORD *)(a2 + 32) + 12 * *(unsigned __int8 *)(v24 + 19));
      v26 = *(float32x4_t *)v24;
      v26.i32[3] = 0;
      v27 = vmulq_f32(v13, v26);
      v27.i64[0] = vpaddq_f32(v27, v27).u64[0];
      v28 = vmulq_f32(v12[1], v26);
      v28.i64[0] = vpaddq_f32(v28, v28).u64[0];
      v31 = (int32x2_t)vpadd_f32(*(float32x2_t *)v28.f32, *(float32x2_t *)v28.f32);
      v29 = vmulq_f32(v12[2], v26);
      v29.i64[0] = vpaddq_f32(v29, v29).u64[0];
      *(int8x8_t *)v30.f32 = vext_s8((int8x8_t)vpadd_f32(*(float32x2_t *)v27.f32, *(float32x2_t *)v27.f32), (int8x8_t)v31, 4uLL);
      v30.i64[1] = vpadd_f32(*(float32x2_t *)v29.f32, *(float32x2_t *)v29.f32).u32[0];
      v31.i32[0] = *(_DWORD *)(v24 + 12);
      v32 = vmulq_f32(v30, v30);
      v32.i64[0] = vpaddq_f32(v32, v32).u64[0];
      v33 = vpadd_f32(*(float32x2_t *)v32.f32, *(float32x2_t *)v32.f32);
      v34 = vrsqrte_f32(v33);
      v35 = 4;
      do
      {
        v34 = vmul_f32(v34, vrsqrts_f32(vmul_f32(v34, v34), v33));
        --v35;
      }
      while (v35);
      v36 = vmul_f32(v33, (float32x2_t)vbsl_s8((int8x8_t)vdup_lane_s32(vceqz_f32(v33), 0), _D9, (int8x8_t)v34));
      v37 = vrecpe_f32(v36);
      v38 = 4;
      do
      {
        v37 = vmul_f32(v37, vrecps_f32(v36, v37));
        --v38;
      }
      while (v38);
      v25.i32[3] = 0;
      v39 = vmulq_n_f32(v30, v37.f32[0]);
      v39.i32[3] = 0;
      v40 = vmulq_f32(v25, v26);
      v40.i64[0] = vpaddq_f32(v40, v40).u64[0];
      v41 = vmul_f32(v37, vpadd_f32(*(float32x2_t *)v40.f32, *(float32x2_t *)v40.f32));
      v42 = vmul_f32(v37, vneg_f32((float32x2_t)vdup_lane_s32(v31, 0)));
      v43 = vmulq_f32(v14, v39);
      v43.i64[0] = vpaddq_f32(v43, v43).u64[0];
      *(float32x2_t *)v43.f32 = vpadd_f32(*(float32x2_t *)v43.f32, *(float32x2_t *)v43.f32);
      v44 = vmulq_f32(v15, v39);
      v44.i64[0] = vpaddq_f32(v44, v44).u64[0];
      *(float32x2_t *)v44.f32 = vpadd_f32(*(float32x2_t *)v44.f32, *(float32x2_t *)v44.f32);
      v45 = vmin_f32(*(float32x2_t *)v43.f32, *(float32x2_t *)v44.f32);
      *(float32x2_t *)v44.f32 = vmax_f32(*(float32x2_t *)v43.f32, *(float32x2_t *)v44.f32);
      v46 = vsub_f32(v45, v16);
      if (vuzp1_s8((int8x8_t)vdup_lane_s16((int16x4_t)vorr_s8((int8x8_t)vcgt_f32(v41, vadd_f32(*a4, vadd_f32(v16, *(float32x2_t *)v44.f32))), (int8x8_t)vcgt_f32(v46, vadd_f32(*a4, v42))), 0), *(int8x8_t *)v13.f32).u32[0] == -1)return 0;
      v47 = vsub_f32(v42, v46);
      if ((vcgt_f32(v18, v47).u8[0] & 1) != 0)
        v48 = -1;
      else
        v48 = 0;
      v49 = (int8x16_t)vdupq_n_s32(v48);
      v17 = vbslq_s8(v49, (int8x16_t)v39, v17);
      v18 = (float32x2_t)vbsl_s8(*(int8x8_t *)v49.i8, (int8x8_t)v47, (int8x8_t)v18);
      ++v11;
    }
    while (v11 != v6);
    v50 = a6;
    v89 = a5;
    v51 = 0;
    v52 = (int8x16_t)vsubq_f32(v15, v14);
    v53 = (float32x2_t)vextq_s8(v52, v52, 8uLL).u64[0];
    v54 = (float32x2_t)vextq_s8(v52, v52, 4uLL).u64[0];
    v91 = v53;
    v92 = v52.i64[0];
    v90 = v54;
    do
    {
      v55 = *(_QWORD *)(a2 + 24) + 20 * v51;
      v58 = *(unsigned __int8 *)(v55 + 18);
      v57 = (unsigned __int8 *)(v55 + 18);
      v56 = v58;
      if (v58)
      {
        v59 = 0;
        v60 = *(_QWORD *)(a2 + 40) + *((unsigned __int16 *)v57 - 1);
        LODWORD(v61) = v56 - 1;
        v62 = v56;
        do
        {
          v63 = *(unsigned __int8 *)(v60 + v61);
          v61 = v59;
          v64 = *(_QWORD *)(a2 + 32);
          v65 = *(float32x4_t *)(v64 + 12 * *(unsigned __int8 *)(v60 + v59));
          v65.i32[3] = 0;
          v66 = *(float32x4_t *)(v64 + 12 * v63);
          v66.i32[3] = 0;
          v67 = vsubq_f32(v66, v65);
          v68 = (float32x4_t *)a3[6];
          v69 = vmulq_f32(*v68, v67);
          v69.i64[0] = vpaddq_f32(v69, v69).u64[0];
          v70 = vmulq_f32(v67, v68[1]);
          v70.i64[0] = vpaddq_f32(v70, v70).u64[0];
          v71 = vmulq_f32(v67, v68[2]);
          v71.i64[0] = vpaddq_f32(v71, v71).u64[0];
          v71.i32[0] = vpadd_f32(*(float32x2_t *)v71.f32, *(float32x2_t *)v71.f32).u32[0];
          *(int8x8_t *)v69.f32 = vext_s8((int8x8_t)vpadd_f32(*(float32x2_t *)v69.f32, *(float32x2_t *)v69.f32), (int8x8_t)vpadd_f32(*(float32x2_t *)v70.f32, *(float32x2_t *)v70.f32), 4uLL);
          v72 = (int8x8_t)vmls_f32(vmul_f32(*(float32x2_t *)v52.i8, (float32x2_t)vext_s8(*(int8x8_t *)v69.f32, (int8x8_t)v71.u32[0], 4uLL)), v54, *(float32x2_t *)v69.f32);
          *(int8x8_t *)v71.f32 = vext_s8(v72, (int8x8_t)vmls_f32(vmul_f32(v53, *(float32x2_t *)v69.f32), *(float32x2_t *)v52.i8, (float32x2_t)v71.u32[0]), 4uLL);
          v72.i32[1] = 0;
          *(float32x2_t *)v69.f32 = vpadd_f32(vmul_f32(*(float32x2_t *)v71.f32, *(float32x2_t *)v71.f32), vmul_f32((float32x2_t)v72.u32[0], (float32x2_t)v72.u32[0]));
          v73 = vpadd_f32(*(float32x2_t *)v69.f32, *(float32x2_t *)v69.f32);
          if (v73.f32[0] >= 0.00000011921)
          {
            *(int8x8_t *)&v71.u32[2] = v72;
            v74 = vrsqrte_f32(v73);
            v75 = 4;
            do
            {
              v74 = vmul_f32(v74, vrsqrts_f32(vmul_f32(v74, v74), v73));
              --v75;
            }
            while (v75);
            v93 = v17;
            v76 = vmul_f32(v73, (float32x2_t)vbsl_s8((int8x8_t)vdup_lane_s32(vceqz_f32(v73), 0), _D9, (int8x8_t)v74));
            v77 = vrecpe_f32(v76);
            v78 = 4;
            do
            {
              v77 = vmul_f32(v77, vrecps_f32(v76, v77));
              --v78;
            }
            while (v78);
            v79 = vmulq_n_f32(v71, v77.f32[0]);
            v79.i32[3] = 0;
            v94 = v79;
            (*(void (**)(_QWORD *, float32x4_t *, float32x2_t *, float32x2_t *))(*a3 + 24))(a3, &v94, &v96, &v95);
            v80 = vmulq_f32(a1[3], v94);
            v80.i64[0] = vpaddq_f32(v80, v80).u64[0];
            *(float32x2_t *)v80.f32 = vpadd_f32(*(float32x2_t *)v80.f32, *(float32x2_t *)v80.f32);
            v81 = vmulq_f32(v94, a1[4]);
            v81.i64[0] = vpaddq_f32(v81, v81).u64[0];
            *(float32x2_t *)v81.f32 = vpadd_f32(*(float32x2_t *)v81.f32, *(float32x2_t *)v81.f32);
            v82 = vmin_f32(*(float32x2_t *)v80.f32, *(float32x2_t *)v81.f32);
            *(float32x2_t *)v81.f32 = vmax_f32(*(float32x2_t *)v80.f32, *(float32x2_t *)v81.f32);
            v83 = *(float32x2_t *)a1[5].f32;
            v84 = vsub_f32(v82, v83);
            if (vuzp1_s8((int8x8_t)vdup_lane_s16((int16x4_t)vorr_s8((int8x8_t)vcgt_f32(v84, vadd_f32(v95, *a4)), (int8x8_t)vcgt_f32(v96, vadd_f32(vadd_f32(*(float32x2_t *)v81.f32, v83), *a4))), 0), *(int8x8_t *)v94.f32).u32[0] == -1)return 0;
            v85 = vsub_f32(v95, v84);
            if ((vcgt_f32(v18, v85).u8[0] & 1) != 0)
              v86 = -1;
            else
              v86 = 0;
            v87 = (int8x16_t)vdupq_n_s32(v86);
            v18 = (float32x2_t)vbsl_s8(*(int8x8_t *)v87.i8, (int8x8_t)v85, (int8x8_t)v18);
            v52.i64[0] = v92;
            v17 = vbslq_s8(v87, (int8x16_t)v94, v93);
            v62 = *v57;
            v54 = v90;
            v53 = v91;
          }
          v59 = v61 + 1;
        }
        while (v61 + 1 < (unint64_t)v62);
        v6 = *(unsigned int *)(a2 + 16);
      }
      ++v51;
    }
    while (v51 < v6);
  }
  else
  {
    v50 = a6;
    v89 = a5;
    v17 = (int8x16_t)xmmword_2260E5F20;
    v18 = (float32x2_t)vdup_n_s32(0x7F7FFFFFu);
  }
  *v50 = v17;
  *v89 = v18;
  return 1;
}

uint64_t physx::Gu::generateFullContactManifold(float32x4_t *a1, uint64_t a2, _QWORD *a3, float32x4_t *a4, uint64_t a5, int *a6, float32x2_t *a7, float32x4_t *a8, float a9, float a10, float32x2_t *a11, char a12)
{
  int v21;
  float32x4_t v22;
  uint64_t result;
  _OWORD *v24;
  float32x4_t v25;
  float32x4_t *v26;
  float32x4_t v27;
  float32x4_t v28;
  float32x4_t v29;
  unsigned __int32 v30;
  float32x4_t v31;
  float32x4_t v32;
  float32x4_t v33;
  float32x2_t v34;
  uint64_t v35;
  unsigned int v36;
  _OWORD *v37;
  uint64_t j;
  float32x4_t v39;
  float32x4_t v40;
  float32x4_t v41;
  float32x2_t v42;
  unsigned int v43;
  float v45;
  float32x4_t *v46;
  float32x4_t v47;
  float32x4_t v48;
  float32x4_t v49;
  uint64_t v51;
  float v58;
  float v59;
  uint64_t v60;
  unsigned int v61;
  unsigned int v62;
  float *v63;
  uint64_t i;
  float v65;
  float v66;
  float32x4_t v67;
  float32x4_t v68;
  float32x4_t v69;
  float32x4_t v70;
  float32x4_t v71;
  float32x4_t v72;
  float32x4_t v73;
  uint64_t v74;
  float32x4_t v75;
  float32x2_t v76;
  float32x2_t v77;
  int v78;
  float32x2_t v80;
  float32x2_t v81;
  int v82;
  uint64_t v83;
  float32x4_t v84;
  float32x4_t v85;
  float32x2_t v86;
  float32x4_t v87;
  float32x4_t v88;
  float32x4_t v89;
  float32x4_t v90;
  unsigned __int32 v91;
  float32x4_t v92;
  float32x4_t v93;
  float32x2_t v94;
  float32x2_t v95;
  int v96;
  float32x2_t v97;
  float32x2_t v98;
  int v99;
  float32x4_t v100;
  float32x4_t v101;
  float32x2_t v102;
  unsigned int v103;
  uint64_t v104;
  uint64_t v105;
  float32x4_t v106;
  uint64_t v107;
  float32x2_t v108;
  int v109;
  unsigned __int8 *v110;
  float32x4_t v111;
  float32x4_t v112;
  float32x4_t v113;
  float32x4_t v114;
  float32x2_t v115;
  float32x4_t v116;
  float32x2_t v117;
  float32x2_t v118;
  float32x2_t v119;
  int v120;
  unsigned __int8 *v121;
  unsigned int v122;
  float32x4_t v123;
  float32x4_t v124;
  float32x4_t v125;
  float32x4_t v126;
  uint64_t v127;
  float32x4_t v128;
  float32x4_t v129;
  float32x2_t v130[129];

  v130[128] = *(float32x2_t *)MEMORY[0x24BDAC8D0];
  v21 = *a6;
  v22 = *a8;
  v129 = *a8;
  if (!a12)
  {
    v128 = v22;
    physx::Gu::generatedFaceContacts((uint64_t)a1, a2, (uint64_t)a3, a4, a5, a6, &v129, *a7);
    if ((*a6 - v21) > 1)
    {
LABEL_64:
      v67 = v128;
      goto LABEL_65;
    }
    v45 = a10 * 0.01;
    if ((float)(a10 * 0.01) <= a9)
      v45 = a9;
    if ((float)(a10 * 0.05) < v45)
      v45 = a10 * 0.05;
    v46 = (float32x4_t *)a3[6];
    v47 = *v46;
    v48 = v46[1];
    v49 = v46[2];
    _Q5 = vaddq_f32(vaddq_f32(vmulq_n_f32(*v46, COERCE_FLOAT(*(_OWORD *)a11->f32)), vmulq_lane_f32(v48, *a11, 1)), vmulq_laneq_f32(v49, *(float32x4_t *)a11->f32, 2));
    v51 = *(_QWORD *)(a2 + 24);
    _S16 = *(_DWORD *)(v51 + 8);
    __asm { FMLA            S7, S16, V5.S[2] }
    v58 = *(float *)(v51 + 12) + _S7;
    v59 = fabsf(v58);
    if (v58 < (float)-v45)
      v59 = 3.4028e38;
    v130[0].f32[0] = v59;
    v60 = *(unsigned int *)(a2 + 16);
    if (v60 < 2)
    {
      v62 = 0;
      v61 = 0;
    }
    else
    {
      v61 = 0;
      v62 = 0;
      v63 = (float *)(v51 + 32);
      for (i = 1; i != v60; ++i)
      {
        v65 = *v63
            + (float)((float)((float)(_Q5.f32[1] * *(v63 - 2)) + (float)(_Q5.f32[0] * *(v63 - 3)))
                    + (float)(_Q5.f32[2] * *(v63 - 1)));
        v66 = fabsf(v65);
        if (v65 < (float)-v45)
          v66 = 3.4028e38;
        v130[0].f32[i] = v66;
        if (v59 > v66)
        {
          v62 = i;
          v59 = v66;
        }
        if (v65 > v58)
        {
          v58 = v65;
          v61 = i;
        }
        v63 += 5;
      }
    }
    if (v59 != 3.4028e38)
    {
      v68 = vnegq_f32(v128);
      v68.i32[3] = 0;
      v69 = *(float32x4_t *)(v51 + 20 * v62);
      v69.i32[3] = 0;
      v70 = vmulq_f32(v47, v69);
      v70.i64[0] = vpaddq_f32(v70, v70).u64[0];
      v71 = vmulq_f32(v48, v69);
      v71.i64[0] = vpaddq_f32(v71, v71).u64[0];
      v72 = vmulq_f32(v49, v69);
      v72.i64[0] = vpaddq_f32(v72, v72).u64[0];
      *(int8x8_t *)v73.f32 = vext_s8((int8x8_t)vpadd_f32(*(float32x2_t *)v70.f32, *(float32x2_t *)v70.f32), (int8x8_t)vpadd_f32(*(float32x2_t *)v71.f32, *(float32x2_t *)v71.f32), 4uLL);
      v73.i64[1] = vpadd_f32(*(float32x2_t *)v72.f32, *(float32x2_t *)v72.f32).u32[0];
      v74 = v62;
      v75 = vmulq_f32(v73, v73);
      v75.i64[0] = vpaddq_f32(v75, v75).u64[0];
      v76 = vpadd_f32(*(float32x2_t *)v75.f32, *(float32x2_t *)v75.f32);
      v77 = vrsqrte_f32(v76);
      v78 = 4;
      do
      {
        v77 = vmul_f32(v77, vrsqrts_f32(vmul_f32(v77, v77), v76));
        --v78;
      }
      while (v78);
      __asm { FMOV            V6.2S, #1.0 }
      v80 = vmul_f32(v76, (float32x2_t)vbsl_s8((int8x8_t)vdup_lane_s32(vceqz_f32(v76), 0), _D6, (int8x8_t)v77));
      v81 = vrecpe_f32(v80);
      v82 = 4;
      do
      {
        v81 = vmul_f32(v81, vrecps_f32(v80, v81));
        --v82;
      }
      while (v82);
      if ((_DWORD)v60)
      {
        v83 = 0;
        v84 = vmulq_n_f32(v73, v81.f32[0]);
        v84.i32[3] = 0;
        v85 = vmulq_f32(v68, v84);
        v85.i64[0] = vpaddq_f32(v85, v85).u64[0];
        v86 = vpadd_f32(*(float32x2_t *)v85.f32, *(float32x2_t *)v85.f32);
        v61 = v62;
        do
        {
          if (v83 != v74 && (float)(v130[0].f32[v83] - v59) < v45)
          {
            v87 = *(float32x4_t *)(v51 + 20 * v83);
            v87.i32[3] = 0;
            v88 = vmulq_f32(v47, v87);
            v88.i64[0] = vpaddq_f32(v88, v88).u64[0];
            v89 = vmulq_f32(v48, v87);
            v89.i64[0] = vpaddq_f32(v89, v89).u64[0];
            v90 = vmulq_f32(v49, v87);
            v90.i64[0] = vpaddq_f32(v90, v90).u64[0];
            v91 = vpadd_f32(*(float32x2_t *)v90.f32, *(float32x2_t *)v90.f32).u32[0];
            *(int8x8_t *)v92.f32 = vext_s8((int8x8_t)vpadd_f32(*(float32x2_t *)v88.f32, *(float32x2_t *)v88.f32), (int8x8_t)vpadd_f32(*(float32x2_t *)v89.f32, *(float32x2_t *)v89.f32), 4uLL);
            v92.i64[1] = v91;
            v93 = vmulq_f32(v92, v92);
            v93.i64[0] = vpaddq_f32(v93, v93).u64[0];
            v94 = vpadd_f32(*(float32x2_t *)v93.f32, *(float32x2_t *)v93.f32);
            v95 = vrsqrte_f32(v94);
            v96 = 4;
            do
            {
              v95 = vmul_f32(v95, vrsqrts_f32(vmul_f32(v95, v95), v94));
              --v96;
            }
            while (v96);
            v97 = vmul_f32(v94, (float32x2_t)vbsl_s8((int8x8_t)vdup_lane_s32(vceqz_f32(v94), 0), _D6, (int8x8_t)v95));
            v98 = vrecpe_f32(v97);
            v99 = 4;
            do
            {
              v98 = vmul_f32(v98, vrecps_f32(v97, v98));
              --v99;
            }
            while (v99);
            v100 = vmulq_n_f32(v92, v98.f32[0]);
            v100.i32[3] = 0;
            v101 = vmulq_f32(v68, v100);
            v101.i64[0] = vpaddq_f32(v101, v101).u64[0];
            v102 = vpadd_f32(*(float32x2_t *)v101.f32, *(float32x2_t *)v101.f32);
            if ((vcgt_f32(v86, v102).u8[0] & 1) != 0)
            {
              v61 = v83;
              v103 = -1;
            }
            else
            {
              v103 = 0;
            }
            v86 = (float32x2_t)vbsl_s8((int8x8_t)vdup_n_s32(v103), (int8x8_t)v102, (int8x8_t)v86);
          }
          ++v83;
        }
        while (v83 != v60);
      }
      else
      {
        v61 = v62;
      }
    }
    v127 = v51 + 20 * v61;
LABEL_63:
    physx::Gu::generatedContactsEEContacts(a1, *(_QWORD *)(a2 + 32), *(_QWORD *)(a2 + 40), v127, (uint64_t)a3, a4, a5, a6, a7, (int8x8_t *)&v129);
    goto LABEL_64;
  }
  result = physx::Gu::testSATCapsulePoly(a1, a2, a3, a7, v130, (int8x16_t *)&v129);
  if (!(_DWORD)result)
    return result;
  physx::Gu::generatedFaceContacts((uint64_t)a1, a2, (uint64_t)a3, a4, a5, a6, &v129, *a7);
  if ((*a6 - v21) < 2)
  {
    v24 = *(_OWORD **)(a2 + 24);
    v128 = v129;
    v25 = vnegq_f32(v129);
    v25.i32[3] = 0;
    v26 = (float32x4_t *)a3[5];
    v27 = vmulq_f32(v25, *v26);
    v27.i64[0] = vpaddq_f32(v27, v27).u64[0];
    v28 = vmulq_f32(v25, v26[1]);
    v28.i64[0] = vpaddq_f32(v28, v28).u64[0];
    v29 = vmulq_f32(v25, v26[2]);
    v29.i64[0] = vpaddq_f32(v29, v29).u64[0];
    v30 = vpadd_f32(*(float32x2_t *)v29.f32, *(float32x2_t *)v29.f32).u32[0];
    *(int8x8_t *)v31.f32 = vext_s8((int8x8_t)vpadd_f32(*(float32x2_t *)v27.f32, *(float32x2_t *)v27.f32), (int8x8_t)vpadd_f32(*(float32x2_t *)v28.f32, *(float32x2_t *)v28.f32), 4uLL);
    v31.i64[1] = v30;
    v32 = *(float32x4_t *)v24;
    v32.i32[3] = 0;
    v33 = vmulq_f32(v32, v31);
    v33.i64[0] = vpaddq_f32(v33, v33).u64[0];
    v34 = vpadd_f32(*(float32x2_t *)v33.f32, *(float32x2_t *)v33.f32);
    v35 = *(unsigned int *)(a2 + 16);
    if (v35 < 2)
    {
      v36 = 0;
    }
    else
    {
      v36 = 0;
      v37 = (_OWORD *)((char *)v24 + 20);
      for (j = 1; j != v35; ++j)
      {
        v39 = *(float32x4_t *)v37;
        v37 = (_OWORD *)((char *)v37 + 20);
        v40 = v39;
        v40.i32[3] = 0;
        v41 = vmulq_f32(v40, v31);
        v41.i64[0] = vpaddq_f32(v41, v41).u64[0];
        v42 = vpadd_f32(*(float32x2_t *)v41.f32, *(float32x2_t *)v41.f32);
        if ((vcgt_f32(v34, v42).u8[0] & 1) != 0)
        {
          v36 = j;
          v43 = -1;
        }
        else
        {
          v43 = 0;
        }
        v34 = (float32x2_t)vbsl_s8((int8x8_t)vdup_n_s32(v43), (int8x8_t)v42, (int8x8_t)v34);
      }
    }
    v104 = *(unsigned int *)(a2 + 20);
    if ((_DWORD)v104)
    {
      v105 = 0;
      v106 = vnegq_f32(v31);
      v106.i32[3] = 0;
      v107 = *(_QWORD *)(a2 + 48);
      v108 = vmul_f32(v34, v34);
      v109 = -1;
      do
      {
        v110 = (unsigned __int8 *)(v107 + (2 * v105));
        v111 = *(float32x4_t *)((char *)v24 + 20 * *v110);
        v111.i32[3] = 0;
        v112 = *(float32x4_t *)((char *)v24 + 20 * v110[1]);
        v112.i32[3] = 0;
        v113 = vaddq_f32(v111, v112);
        v114 = vmulq_f32(v113, v113);
        v114.i64[0] = vpaddq_f32(v114, v114).u64[0];
        v115 = vpadd_f32(*(float32x2_t *)v114.f32, *(float32x2_t *)v114.f32);
        v116 = vmulq_f32(v106, v113);
        v116.i64[0] = vpaddq_f32(v116, v116).u64[0];
        v117 = vpadd_f32(*(float32x2_t *)v116.f32, *(float32x2_t *)v116.f32);
        v118 = vmul_f32(v117, v117);
        if (vuzp1_s8((int8x8_t)vdup_lane_s16((int16x4_t)vand_s8((int8x8_t)vcgt_f32(v118, vmul_f32(v108, v115)), (int8x8_t)vcgez_f32(v117)), 0), *(int8x8_t *)v106.f32).u32[0] == -1)
        {
          v119 = vrecpe_f32(v115);
          v120 = 4;
          do
          {
            v119 = vmul_f32(v119, vrecps_f32(v115, v119));
            --v120;
          }
          while (v120);
          v108 = vmul_f32(v118, v119);
          v109 = v105;
        }
        ++v105;
      }
      while (v105 != v104);
      if (v109 != -1)
      {
        v121 = (unsigned __int8 *)(v107 + (2 * v109));
        v122 = *v121;
        v123 = *(float32x4_t *)((char *)v24 + 20 * *v121);
        v36 = v121[1];
        v123.i32[3] = 0;
        v124 = *(float32x4_t *)((char *)v24 + 20 * v36);
        v124.i32[3] = 0;
        v125 = vmulq_f32(v106, v123);
        v125.i64[0] = vpaddq_f32(v125, v125).u64[0];
        v126 = vmulq_f32(v106, v124);
        v126.i64[0] = vpaddq_f32(v126, v126).u64[0];
        if ((vcgt_f32(vpadd_f32(*(float32x2_t *)v125.f32, *(float32x2_t *)v125.f32), vpadd_f32(*(float32x2_t *)v126.f32, *(float32x2_t *)v126.f32)).u8[0] & 1) != 0)v36 = v122;
      }
    }
    v127 = (uint64_t)v24 + 20 * (int)v36;
    goto LABEL_63;
  }
  v67 = v129;
LABEL_65:
  *a8 = v67;
  return 1;
}

__n128 physx::Gu::generatedFaceContacts(uint64_t a1, uint64_t a2, uint64_t a3, float32x4_t *a4, uint64_t a5, _DWORD *a6, float32x4_t *a7, float32x2_t a8)
{
  float32x4_t *v8;
  float32x4_t v9;
  float32x4_t v10;
  float32x4_t v11;
  float32x4_t v12;
  float32x4_t v13;
  float32x4_t v14;
  float32x4_t v15;
  __n128 result;
  float32x4_t v17;
  float32x4_t v18;
  float32x4_t *v19;
  uint64_t v20;
  float32x4_t v21;
  float32x4_t v22;
  float32x4_t v23;
  float32x4_t v24;
  float32x2_t v30;
  float32x4_t v31;
  float32x2_t v32;
  float32x4_t v33;
  float32x2_t v34;
  float32x4_t v35;
  float32x2_t v36;
  float32x2_t v37;
  int v38;
  float32x2_t v39;
  int8x8_t v40;
  float32x4_t v41;
  float32x4_t v42;
  float32x4_t v43;
  float32x4_t v44;
  __int128 v45;
  int8x16_t v46;
  float32x4_t v47;
  unsigned int v48;
  float32x4_t v49;
  uint64_t v50;
  float32x4_t v51;
  float32x4_t v52;
  float32x4_t v53;
  float32x4_t v54;
  float32x2_t v56;
  float32x4_t v57;
  float32x2_t v58;
  float32x4_t v59;
  float32x2_t v60;
  float32x4_t v61;
  float32x2_t v62;
  float32x2_t v63;
  int v64;
  float32x2_t v65;
  int8x8_t v66;
  float32x4_t v67;
  float32x4_t v68;
  float32x4_t v69;
  float32x4_t v70;
  __int128 v71;
  int8x16_t v72;
  unsigned int v73;

  v15 = vnegq_f32(*a7);
  v8 = *(float32x4_t **)(a3 + 48);
  v9 = *v8;
  v10 = v8[1];
  v11 = vmulq_n_f32(*v8, v15.f32[0]);
  v12 = vmulq_lane_f32(v10, *(float32x2_t *)v15.f32, 1);
  v13 = v8[2];
  v14 = vmulq_laneq_f32(v13, v15, 2);
  v15.i32[3] = 0;
  v11.i32[3] = 0;
  v12.i32[3] = 0;
  v14.i32[3] = 0;
  result.n128_u64[0] = (unint64_t)vadd_f32(*(float32x2_t *)(a1 + 80), a8);
  v17 = vaddq_f32(vaddq_f32(v11, v12), v14);
  v18 = *(float32x4_t *)(a1 + 48);
  v19 = (float32x4_t *)*(unsigned int *)(a2 + 16);
  if ((_DWORD)v19)
  {
    v20 = 0;
    v21 = vmulq_n_f32(v9, v18.f32[0]);
    v21.i32[3] = 0;
    v22 = vmulq_lane_f32(v10, *(float32x2_t *)v18.f32, 1);
    v22.i32[3] = 0;
    v23 = vmulq_laneq_f32(v13, v18, 2);
    v23.i32[3] = 0;
    v24 = vaddq_f32(v23, vaddq_f32(v21, v22));
    __asm { FMOV            V17.2S, #1.0 }
    v30 = 0;
    while (1)
    {
      v31 = *(float32x4_t *)(*(_QWORD *)(a2 + 24) + 20 * v20);
      v32 = (float32x2_t)vdup_laneq_s32((int32x4_t)v31, 3);
      v31.i32[3] = 0;
      v33 = vmulq_f32(v17, v31);
      v33.i64[0] = vpaddq_f32(v33, v33).u64[0];
      v34 = vpadd_f32(*(float32x2_t *)v33.f32, *(float32x2_t *)v33.f32);
      v35 = vmulq_f32(v24, v31);
      v35.i64[0] = vpaddq_f32(v35, v35).u64[0];
      v36 = vadd_f32(v32, vpadd_f32(*(float32x2_t *)v35.f32, *(float32x2_t *)v35.f32));
      if (vabs_f32(v34).f32[0] < 0.0000001)
      {
        if (v36.f32[0] > 0.0)
          break;
      }
      else
      {
        v37 = vrecpe_f32(v34);
        v38 = 4;
        do
        {
          v37 = vmul_f32(v37, vrecps_f32(v34, v37));
          --v38;
        }
        while (v38);
        v39 = vmul_f32(v37, vneg_f32(v36));
        v40 = (int8x8_t)vcltz_f32(v34);
        v30 = (float32x2_t)vbsl_s8((int8x8_t)vdup_lane_s32((int32x2_t)vand_s8((int8x8_t)vcgt_f32(v39, v30), v40), 0), (int8x8_t)v39, (int8x8_t)v30);
        _D17 = (float32x2_t)vbsl_s8((int8x8_t)vdup_lane_s32((int32x2_t)vbic_s8((int8x8_t)vcgt_f32(_D17, v39), v40), 0), (int8x8_t)v39, (int8x8_t)_D17);
      }
      if ((vcgt_f32(v30, _D17).u8[0] & 1) != 0)
        break;
      if ((float32x4_t *)++v20 == v19)
        goto LABEL_12;
    }
  }
  else
  {
    v30 = 0;
LABEL_12:
    if ((vcge_f32((float32x2_t)result.n128_u64[0], v30).u8[0] & 1) != 0)
    {
      v41 = vsubq_f32(v18, a4[3]);
      v42 = vmulq_f32(*a4, v41);
      v42.i64[0] = vpaddq_f32(v42, v42).u64[0];
      v43 = vmulq_f32(v41, a4[1]);
      v43.i64[0] = vpaddq_f32(v43, v43).u64[0];
      v44 = vmulq_f32(v41, a4[2]);
      v44.i64[0] = vpaddq_f32(v44, v44).u64[0];
      *(int8x8_t *)&v45 = vext_s8((int8x8_t)vpadd_f32(*(float32x2_t *)v42.f32, *(float32x2_t *)v42.f32), (int8x8_t)vpadd_f32(*(float32x2_t *)v43.f32, *(float32x2_t *)v43.f32), 4uLL);
      *((_QWORD *)&v45 + 1) = vpadd_f32(*(float32x2_t *)v44.f32, *(float32x2_t *)v44.f32).u32[0];
      *(_OWORD *)(a5 + 48 * *a6) = v45;
      v46 = (int8x16_t)vmlaq_n_f32(*(float32x4_t *)(a1 + 48), v15, v30.f32[0]);
      v46.i64[1] = vextq_s8(v46, v46, 8uLL).u32[0];
      *(int8x16_t *)(a5 + 48 * *a6 + 16) = v46;
      v47 = *a7;
      v47.i32[3] = v30.i32[1];
      v48 = (*a6)++;
      *(float32x4_t *)(a5 + 48 * v48 + 32) = v47;
      v19 = *(float32x4_t **)(a3 + 48);
      v9 = *v19;
      v10 = v19[1];
      v13 = v19[2];
      LODWORD(v19) = *(_DWORD *)(a2 + 16);
    }
  }
  v49 = *(float32x4_t *)(a1 + 64);
  if ((_DWORD)v19)
  {
    v50 = 0;
    v51 = vmulq_n_f32(v9, v49.f32[0]);
    v51.i32[3] = 0;
    v52 = vmulq_lane_f32(v10, *(float32x2_t *)v49.f32, 1);
    v52.i32[3] = 0;
    v53 = vmulq_laneq_f32(v13, v49, 2);
    v53.i32[3] = 0;
    v54 = vaddq_f32(v53, vaddq_f32(v51, v52));
    __asm { FMOV            V5.2S, #1.0 }
    v56 = 0;
    while (1)
    {
      v57 = *(float32x4_t *)(*(_QWORD *)(a2 + 24) + 20 * v50);
      v58 = (float32x2_t)vdup_laneq_s32((int32x4_t)v57, 3);
      v57.i32[3] = 0;
      v59 = vmulq_f32(v17, v57);
      v59.i64[0] = vpaddq_f32(v59, v59).u64[0];
      v60 = vpadd_f32(*(float32x2_t *)v59.f32, *(float32x2_t *)v59.f32);
      v61 = vmulq_f32(v54, v57);
      v61.i64[0] = vpaddq_f32(v61, v61).u64[0];
      v62 = vadd_f32(v58, vpadd_f32(*(float32x2_t *)v61.f32, *(float32x2_t *)v61.f32));
      if (vabs_f32(v60).f32[0] < 0.0000001)
      {
        if (v62.f32[0] > 0.0)
          return result;
      }
      else
      {
        v63 = vrecpe_f32(v60);
        v64 = 4;
        do
        {
          v63 = vmul_f32(v63, vrecps_f32(v60, v63));
          --v64;
        }
        while (v64);
        v65 = vmul_f32(v63, vneg_f32(v62));
        v66 = (int8x8_t)vcltz_f32(v60);
        v56 = (float32x2_t)vbsl_s8((int8x8_t)vdup_lane_s32((int32x2_t)vand_s8((int8x8_t)vcgt_f32(v65, v56), v66), 0), (int8x8_t)v65, (int8x8_t)v56);
        _D5 = (float32x2_t)vbsl_s8((int8x8_t)vdup_lane_s32((int32x2_t)vbic_s8((int8x8_t)vcgt_f32(_D5, v65), v66), 0), (int8x8_t)v65, (int8x8_t)_D5);
      }
      if ((vcgt_f32(v56, _D5).u8[0] & 1) != 0)
        break;
      if (++v50 == v19)
        goto LABEL_25;
    }
  }
  else
  {
    v56 = 0;
LABEL_25:
    result.n128_u64[0] = (unint64_t)vcge_f32((float32x2_t)result.n128_u64[0], v56);
    if ((result.n128_u8[0] & 1) != 0)
    {
      v67 = vsubq_f32(v49, a4[3]);
      v68 = vmulq_f32(*a4, v67);
      v68.i64[0] = vpaddq_f32(v68, v68).u64[0];
      v69 = vmulq_f32(v67, a4[1]);
      v69.i64[0] = vpaddq_f32(v69, v69).u64[0];
      v70 = vmulq_f32(v67, a4[2]);
      v70.i64[0] = vpaddq_f32(v70, v70).u64[0];
      *(int8x8_t *)&v71 = vext_s8((int8x8_t)vpadd_f32(*(float32x2_t *)v68.f32, *(float32x2_t *)v68.f32), (int8x8_t)vpadd_f32(*(float32x2_t *)v69.f32, *(float32x2_t *)v69.f32), 4uLL);
      *((_QWORD *)&v71 + 1) = vpadd_f32(*(float32x2_t *)v70.f32, *(float32x2_t *)v70.f32).u32[0];
      *(_OWORD *)(a5 + 48 * *a6) = v71;
      v72 = (int8x16_t)vmlaq_n_f32(*(float32x4_t *)(a1 + 64), v15, v56.f32[0]);
      v72.i64[1] = vextq_s8(v72, v72, 8uLL).u32[0];
      *(int8x16_t *)(a5 + 48 * *a6 + 16) = v72;
      result = *(__n128 *)a7;
      result.n128_u32[3] = v56.u32[1];
      v73 = (*a6)++;
      *(__n128 *)(a5 + 48 * v73 + 32) = result;
    }
  }
  return result;
}

uint64_t physx::Gu::generateSphereFullContactManifold(float32x4_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, _DWORD *a5, float32x2_t *a6, float32x4_t *a7, char a8)
{
  uint64_t v8;
  uint64_t v9;
  float32x4_t *v10;
  float32x2_t v11;
  float32x4_t v12;
  float32x2_t v13;
  uint64_t v19;
  float32x4_t v20;
  float32x4_t v21;
  float32x4_t v22;
  float32x4_t v23;
  float32x4_t v24;
  float32x4_t v25;
  int32x2_t v26;
  float32x4_t v27;
  float32x2_t v28;
  float32x2_t v29;
  int v30;
  float32x2_t v31;
  float32x2_t v32;
  int v33;
  float32x4_t v34;
  float32x4_t v35;
  float32x2_t v36;
  float32x2_t v37;
  float32x4_t v38;
  float32x4_t v39;
  float32x2_t v40;
  float32x2_t v41;
  float32x2_t v42;
  unsigned int v43;
  int8x16_t v44;
  float32x4_t v45;
  uint64_t v46;
  uint64_t v47;
  float32x4_t *v48;
  float32x4_t v49;
  float32x4_t v50;
  float32x4_t v51;
  float32x4_t v52;
  float32x4_t v53;
  float32x4_t v54;
  float32x4_t v55;
  float32x4_t v56;
  float32x4_t v57;
  float32x4_t v58;
  float32x4_t v59;
  float32x4_t v60;
  float32x2_t v62;
  float32x4_t v63;
  float32x2_t v64;
  float32x4_t v65;
  float32x2_t v66;
  float32x4_t v67;
  float32x2_t v68;
  float32x2_t v69;
  int v70;
  float32x2_t v71;
  int8x8_t v72;
  _QWORD *v73;
  int8x16_t v74;
  float32x4_t v75;

  if ((a8 & 1) == 0)
  {
    v12 = *a7;
LABEL_17:
    v45 = vnegq_f32(v12);
    v46 = *(unsigned int *)(a2 + 16);
    if ((_DWORD)v46)
    {
      v47 = 0;
      v48 = *(float32x4_t **)(a3 + 48);
      v49 = v48[1];
      v50 = vmulq_n_f32(*v48, v45.f32[0]);
      v50.i32[3] = 0;
      v51 = vmulq_lane_f32(v49, *(float32x2_t *)v45.f32, 1);
      v51.i32[3] = 0;
      v52 = v48[2];
      v53 = vmulq_laneq_f32(v52, v45, 2);
      v53.i32[3] = 0;
      v54 = vaddq_f32(v50, v51);
      v55 = a1[3];
      v56 = vmulq_n_f32(*v48, v55.f32[0]);
      v56.i32[3] = 0;
      v57 = vmulq_lane_f32(v49, *(float32x2_t *)v55.f32, 1);
      v57.i32[3] = 0;
      v58 = vaddq_f32(v54, v53);
      v59 = vmulq_laneq_f32(v52, v55, 2);
      v59.i32[3] = 0;
      v60 = vaddq_f32(v59, vaddq_f32(v56, v57));
      __asm { FMOV            V6.2S, #1.0 }
      v62 = 0;
      while (1)
      {
        v63 = *(float32x4_t *)(*(_QWORD *)(a2 + 24) + 20 * v47);
        v64 = (float32x2_t)vdup_laneq_s32((int32x4_t)v63, 3);
        v63.i32[3] = 0;
        v65 = vmulq_f32(v58, v63);
        v65.i64[0] = vpaddq_f32(v65, v65).u64[0];
        v66 = vpadd_f32(*(float32x2_t *)v65.f32, *(float32x2_t *)v65.f32);
        v67 = vmulq_f32(v60, v63);
        v67.i64[0] = vpaddq_f32(v67, v67).u64[0];
        v68 = vadd_f32(v64, vpadd_f32(*(float32x2_t *)v67.f32, *(float32x2_t *)v67.f32));
        if (vabs_f32(v66).f32[0] < 0.0000001)
        {
          if (v68.f32[0] > 0.0)
            return 1;
        }
        else
        {
          v69 = vrecpe_f32(v66);
          v70 = 4;
          do
          {
            v69 = vmul_f32(v69, vrecps_f32(v66, v69));
            --v70;
          }
          while (v70);
          v71 = vmul_f32(v69, vneg_f32(v68));
          v72 = (int8x8_t)vcltz_f32(v66);
          v62 = (float32x2_t)vbsl_s8((int8x8_t)vdup_lane_s32((int32x2_t)vand_s8((int8x8_t)vcgt_f32(v71, v62), v72), 0), (int8x8_t)v71, (int8x8_t)v62);
          _D6 = (float32x2_t)vbsl_s8((int8x8_t)vdup_lane_s32((int32x2_t)vbic_s8((int8x8_t)vcgt_f32(_D6, v71), v72), 0), (int8x8_t)v71, (int8x8_t)_D6);
        }
        if ((vcgt_f32(v62, _D6).u8[0] & 1) != 0)
          break;
        if (++v47 == v46)
          goto LABEL_28;
      }
    }
    else
    {
      v62 = 0;
LABEL_28:
      if ((float)(COERCE_FLOAT(a1[5].i64[0]) + COERCE_FLOAT(*a6)) >= v62.f32[0])
      {
        v45.i32[3] = 0;
        v73 = (_QWORD *)(a4 + 48 * *a5);
        *v73 = 0;
        v73[1] = 0;
        v74 = (int8x16_t)vmlaq_n_f32(a1[3], v45, v62.f32[0]);
        v74.i64[1] = vextq_s8(v74, v74, 8uLL).u32[0];
        *(int8x16_t *)(a4 + 48 * *a5 + 16) = v74;
        v75 = *a7;
        v75.i32[3] = v62.i32[1];
        LODWORD(v73) = (*a5)++;
        *(float32x4_t *)(a4 + 48 * v73 + 32) = v75;
      }
    }
    return 1;
  }
  v8 = *(unsigned int *)(a2 + 16);
  if (!(_DWORD)v8)
  {
    v12 = (float32x4_t)xmmword_2260E5F20;
LABEL_16:
    *a7 = v12;
    goto LABEL_17;
  }
  v9 = 0;
  v10 = *(float32x4_t **)(a3 + 48);
  v11 = *(float32x2_t *)a1[5].f32;
  v12 = (float32x4_t)xmmword_2260E5F20;
  v13 = (float32x2_t)vdup_n_s32(0x7F7FFFFFu);
  __asm { FMOV            V16.2S, #1.0 }
  while (1)
  {
    v19 = *(_QWORD *)(a2 + 24) + 20 * v9;
    v20 = *(float32x4_t *)(*(_QWORD *)(a2 + 32) + 12 * *(unsigned __int8 *)(v19 + 19));
    v21 = *(float32x4_t *)v19;
    v21.i32[3] = 0;
    v22 = vmulq_f32(*v10, v21);
    v22.i64[0] = vpaddq_f32(v22, v22).u64[0];
    v23 = vmulq_f32(v10[1], v21);
    v23.i64[0] = vpaddq_f32(v23, v23).u64[0];
    v26 = (int32x2_t)vpadd_f32(*(float32x2_t *)v23.f32, *(float32x2_t *)v23.f32);
    v24 = vmulq_f32(v10[2], v21);
    v24.i64[0] = vpaddq_f32(v24, v24).u64[0];
    *(int8x8_t *)v25.f32 = vext_s8((int8x8_t)vpadd_f32(*(float32x2_t *)v22.f32, *(float32x2_t *)v22.f32), (int8x8_t)v26, 4uLL);
    v25.i64[1] = vpadd_f32(*(float32x2_t *)v24.f32, *(float32x2_t *)v24.f32).u32[0];
    v26.i32[0] = *(_DWORD *)(v19 + 12);
    v27 = vmulq_f32(v25, v25);
    v27.i64[0] = vpaddq_f32(v27, v27).u64[0];
    v28 = vpadd_f32(*(float32x2_t *)v27.f32, *(float32x2_t *)v27.f32);
    v29 = vrsqrte_f32(v28);
    v30 = 4;
    do
    {
      v29 = vmul_f32(v29, vrsqrts_f32(vmul_f32(v29, v29), v28));
      --v30;
    }
    while (v30);
    v31 = vmul_f32(v28, (float32x2_t)vbsl_s8((int8x8_t)vdup_lane_s32(vceqz_f32(v28), 0), _D16, (int8x8_t)v29));
    v32 = vrecpe_f32(v31);
    v33 = 4;
    do
    {
      v32 = vmul_f32(v32, vrecps_f32(v31, v32));
      --v33;
    }
    while (v33);
    v20.i32[3] = 0;
    v34 = vmulq_n_f32(v25, v32.f32[0]);
    v34.i32[3] = 0;
    v35 = vmulq_f32(v20, v21);
    v35.i64[0] = vpaddq_f32(v35, v35).u64[0];
    v36 = vmul_f32(v32, vpadd_f32(*(float32x2_t *)v35.f32, *(float32x2_t *)v35.f32));
    v37 = vmul_f32(v32, vneg_f32((float32x2_t)vdup_lane_s32(v26, 0)));
    v38 = vmulq_f32(a1[3], v34);
    v38.i64[0] = vpaddq_f32(v38, v38).u64[0];
    *(float32x2_t *)v38.f32 = vpadd_f32(*(float32x2_t *)v38.f32, *(float32x2_t *)v38.f32);
    v39 = vmulq_f32(a1[4], v34);
    v39.i64[0] = vpaddq_f32(v39, v39).u64[0];
    *(float32x2_t *)v39.f32 = vpadd_f32(*(float32x2_t *)v39.f32, *(float32x2_t *)v39.f32);
    v40 = vmin_f32(*(float32x2_t *)v38.f32, *(float32x2_t *)v39.f32);
    *(float32x2_t *)v39.f32 = vmax_f32(*(float32x2_t *)v38.f32, *(float32x2_t *)v39.f32);
    v41 = vsub_f32(v40, v11);
    if (vuzp1_s8((int8x8_t)vdup_lane_s16((int16x4_t)vorr_s8((int8x8_t)vcgt_f32(v36, vadd_f32(*a6, vadd_f32(v11, *(float32x2_t *)v39.f32))), (int8x8_t)vcgt_f32(v41, vadd_f32(*a6, v37))), 0), *(int8x8_t *)v12.f32).u32[0] == -1)return 0;
    v42 = vsub_f32(v37, v41);
    if ((vcgt_f32(v13, v42).u8[0] & 1) != 0)
      v43 = -1;
    else
      v43 = 0;
    v44 = (int8x16_t)vdupq_n_s32(v43);
    v12 = (float32x4_t)vbslq_s8(v44, (int8x16_t)v34, (int8x16_t)v12);
    v13 = (float32x2_t)vbsl_s8(*(int8x8_t *)v44.i8, (int8x8_t)v42, (int8x8_t)v13);
    if (++v9 == v8)
      goto LABEL_16;
  }
}

double physx::Gu::computeMTD(float32x4_t *a1, uint64_t a2, _QWORD *a3, float32x2_t *a4, float32x4_t *a5)
{
  double result;
  int32x4_t *v9;
  float32x4_t v10;
  float32x2_t v11;
  float32x4_t v12;
  float32x2_t v13;
  float32x2_t v14;
  int8x8_t v15;
  float32x4_t v16;
  float32x4_t v17;
  float32x4_t v18;
  float32x4_t v19;
  float32x4_t v20;
  double v21;
  int8x16_t v22;
  float32x2_t v23;

  v23 = 0;
  v22 = 0uLL;
  v21 = 0.0;
  if (physx::Gu::testSATCapsulePoly(a1, a2, a3, &v23, (float32x2_t *)&v21, &v22))
  {
    v9 = (int32x4_t *)a3[4];
    v10 = *(float32x4_t *)v9;
    v10.i32[3] = 0;
    v11 = (float32x2_t)vdupq_laneq_s32(*v9, 3).u64[0];
    v12 = vmulq_n_f32((float32x4_t)v22, vmla_f32((float32x2_t)0xBF000000BF000000, v11, v11).f32[0]);
    v12.i32[3] = 0;
    v13 = (float32x2_t)vextq_s8((int8x16_t)v10, (int8x16_t)v10, 8uLL).u64[0];
    v14 = (float32x2_t)vextq_s8(v22, v22, 8uLL).u64[0];
    v15 = (int8x8_t)vmls_f32(vmul_f32(*(float32x2_t *)v9->i8, (float32x2_t)vext_s8(*(int8x8_t *)v22.i8, (int8x8_t)v14, 4uLL)), (float32x2_t)vext_s8(*(int8x8_t *)v9->i8, (int8x8_t)v13, 4uLL), *(float32x2_t *)v22.i8);
    *(int8x8_t *)v16.f32 = vext_s8(v15, (int8x8_t)vmls_f32(vmul_f32(v13, *(float32x2_t *)v22.i8), *(float32x2_t *)v9->i8, v14), 4uLL);
    v16.i64[1] = v15.u32[0];
    v17 = vmlaq_laneq_f32(v12, v16, *(float32x4_t *)v9, 3);
    v17.i64[1] = vextq_s8((int8x16_t)v17, (int8x16_t)v17, 8uLL).u32[0];
    v18 = vmulq_f32(v10, (float32x4_t)v22);
    v18.i64[0] = vpaddq_f32(v18, v18).u64[0];
    v19 = vmlaq_n_f32(v17, v10, vpadd_f32(*(float32x2_t *)v18.f32, *(float32x2_t *)v18.f32).f32[0]);
    v20 = vaddq_f32(v19, v19);
    v20.i32[3] = 0;
    *a5 = v20;
    result = v21;
    *(double *)a4 = v21;
  }
  return result;
}

BOOL physx::Gu::pcmContactPlaneBox(uint64_t a1, _DWORD *a2, float32x4_t *a3, float32x4_t *a4, uint64_t a5, float32x4_t **a6, uint64_t a7)
{
  float32x4_t v14;
  float32x4_t v15;
  float32x4_t v16;
  float32x4_t v17;
  float32x2_t v18;
  float32x2_t v19;
  float32x4_t v20;
  float32x4_t v21;
  float32x4_t v22;
  float32x2_t v23;
  float32x2_t v24;
  int8x8_t v25;
  float32x4_t v26;
  float32x4_t v27;
  float32x4_t v28;
  float32x4_t v29;
  float32x4_t v30;
  int8x16_t v31;
  float32x4_t v32;
  float32x2_t v33;
  float32x4_t v34;
  float32x4_t v35;
  float32x2_t v37;
  float32x4_t v38;
  int8x16_t v39;
  int8x8_t v40;
  float32x4_t v41;
  float32x4_t v42;
  float32x4_t v43;
  float32x2_t v44;
  float32x2_t v45;
  int v46;
  float32x4_t v47;
  float32x2_t v48;
  float32x2_t v50;
  float32x2_t v51;
  int v52;
  float32x4_t v53;
  float32x2_t v54;
  float32x4_t v55;
  float32x4_t v56;
  float32x4_t v57;
  float32x2_t v58;
  float32x4_t v59;
  float32x4_t v60;
  float32x2_t v61;
  float32x2_t v62;
  float32x2_t v63;
  float32x2_t v64;
  float32x4_t v65;
  int v66;
  float32x2_t v67;
  float32x2_t v68;
  float32x2_t v69;
  float32x2_t v70;
  float32x2_t v71;
  float32x2_t v72;
  float32x2_t v73;
  float32x2_t v74;
  float32x2_t v75;
  float32x2_t v76;
  float32x4_t v77;
  float32x4_t v78;
  float32x4_t v79;
  float32x2_t v80;
  unsigned int v81;
  uint64_t v82;
  uint64_t v83;
  float32x4_t *v84;
  float32x4_t v85;
  float32x4_t v86;
  float32x4_t v87;
  float32x4_t v88;
  float32x4_t v89;
  float32x4_t v90;
  float32x4_t v91;
  float32x4_t v92;
  float32x2_t v93;
  float32x4_t v94;
  float32x4_t v95;
  float32x4_t v96;
  unsigned __int8 v97;
  float32x4_t *v98;
  float32x4_t v99;
  float32x4_t v100;
  int v101;
  int8x16_t v102;
  float32x4_t v103;
  unsigned int v104;
  float32x2_t v105;
  float32x2_t v106;
  float32x4_t v107;
  float32x4_t v108;
  float32x2_t v109;
  float32x4_t v110;
  float32x4_t v111;
  float32x4_t v112;
  float32x2_t v113;
  float32x2_t v114;
  float32x4_t v115;
  float32x4_t v116;
  float32x2_t v117;
  float32x2_t v118;
  int32x2_t v119;
  int32x2_t v120;
  float32x2_t v121;
  float32x2_t v122;
  int8x16_t v123;
  __int32 v124;
  int8x16_t v125;
  int32x2_t v126;
  int8x8_t v127;
  unsigned __int32 v128;
  float32x2_t v129;
  float32x2_t v130;
  float32x4_t v131;
  float32x4_t v132;
  float32x4_t v133;
  uint64_t v134;
  float32x4_t v135;
  float32x4_t v136;
  int8x16_t v137;
  int32x2_t v138;
  float32x2_t v139;
  float32x4_t v140;
  float32x2_t v141;
  float32x4_t v142;
  float32x4_t v143;
  float32x4_t v144;
  uint64_t v145;
  float32x4_t v146;
  float32x4_t v147;
  int8x16_t v148;
  int32x2_t v149;
  int8x8_t v150;
  float32x2_t v151;
  float32x2_t v152;
  float32x4_t v153;
  float32x4_t v154;
  uint64_t v155;
  float32x4_t v156;
  float32x4_t v157;
  int8x16_t v158;
  __int32 v159;
  int8x16_t v160;
  int32x2_t v161;
  float32x2_t v162;
  float32x4_t v163;
  float32x2_t v164;
  float32x4_t v165;
  float32x4_t v166;
  float32x4_t v167;
  uint64_t v168;
  float32x4_t v169;
  float32x4_t v170;
  int8x16_t v171;
  float32x2_t v172;
  float32x2_t v173;
  float32x4_t v174;
  float32x4_t v175;
  uint64_t v176;
  float32x4_t v177;
  float32x4_t v178;
  int8x16_t v179;
  __int32 v180;
  int8x16_t v181;
  float32x2_t v182;
  float32x4_t v183;
  float32x2_t v184;
  float32x4_t v185;
  float32x4_t v186;
  float32x4_t v187;
  uint64_t v188;
  float32x4_t v189;
  float32x4_t v190;
  int8x16_t v191;
  int8x16_t v192;
  float32x2_t v193;
  float32x4_t v194;
  float32x4_t v195;
  uint64_t v196;
  float32x4_t v197;
  int8x16_t v198;
  float32x2_t v200;
  float32x4_t v201;
  float32x4_t v202[2];

  _X20 = *a6;
  __asm { PRFM            #0, [X20,#0x100] }
  v14 = *a4;
  v15.i64[0] = a4[1].i64[0];
  v15.i64[1] = a4[1].u32[2];
  v16.i64[0] = a3[1].i64[0];
  v16.i64[1] = a3[1].u32[2];
  v202[0] = *a3;
  v202[1] = v16;
  v17 = vnegq_f32(v202[0]);
  v18 = (float32x2_t)vextq_s8((int8x16_t)v202[0], (int8x16_t)v202[0], 8uLL).u64[0];
  v19 = (float32x2_t)vdupq_laneq_s32((int32x4_t)v202[0], 3).u64[0];
  v20 = vsubq_f32(v15, v16);
  v21 = v17;
  v21.i32[3] = 0;
  v22 = vmulq_n_f32(v20, vmla_f32((float32x2_t)0xBF000000BF000000, v19, v19).f32[0]);
  v22.i32[3] = 0;
  v23 = (float32x2_t)vextq_s8((int8x16_t)v21, (int8x16_t)v21, 8uLL).u64[0];
  v24 = (float32x2_t)vext_s8(*(int8x8_t *)v17.f32, (int8x8_t)v23, 4uLL);
  v25 = (int8x8_t)vmls_f32(vmul_f32(*(float32x2_t *)v17.f32, (float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v20, (int8x16_t)v20, 4uLL)), v24, *(float32x2_t *)v20.f32);
  *(int8x8_t *)v26.f32 = vext_s8(v25, (int8x8_t)vmls_f32(vmul_f32(v23, *(float32x2_t *)v20.f32), *(float32x2_t *)v17.f32, (float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v20, (int8x16_t)v20, 8uLL)), 4uLL);
  v26.i64[1] = v25.u32[0];
  v27 = vmlaq_laneq_f32(v22, v26, v202[0], 3);
  v27.i64[1] = vextq_s8((int8x16_t)v27, (int8x16_t)v27, 8uLL).u32[0];
  v28 = vmulq_f32(v21, v20);
  v28.i64[0] = vpaddq_f32(v28, v28).u64[0];
  v29 = vmlaq_n_f32(v27, v21, vpadd_f32(*(float32x2_t *)v28.f32, *(float32x2_t *)v28.f32).f32[0]);
  v30 = v14;
  v30.i32[3] = 0;
  v31 = (int8x16_t)vmulq_f32(v14, v202[0]);
  v32 = vmulq_f32(v30, v21);
  v32.i64[0] = vpaddq_f32(v32, v32).u64[0];
  v33 = vpadd_f32(*(float32x2_t *)v32.f32, *(float32x2_t *)v32.f32);
  v34 = vmulq_laneq_f32(v30, v202[0], 3);
  v35 = vmulq_n_f32(v202[0], vadd_f32(*(float32x2_t *)v202[0].f32, *(float32x2_t *)v202[0].f32).f32[0]);
  v39 = vextq_s8((int8x16_t)v30, (int8x16_t)v30, 8uLL);
  *(int8x8_t *)_Q17.f32 = vext_s8((int8x8_t)v19, (int8x8_t)v18, 4uLL);
  _Q17.i64[1] = vneg_f32((float32x2_t)vdup_lane_s32(*(int32x2_t *)v202[0].f32, 1)).u32[0];
  v37 = vmul_f32((float32x2_t)vext_s8(*(int8x8_t *)v14.f32, *(int8x8_t *)v39.i8, 4uLL), *(float32x2_t *)v17.f32);
  v35.i32[3] = 0;
  v38 = vmlaq_n_f32(v35, _Q17, *(float *)vdup_lane_s32((int32x2_t)vadd_f32(v18, v18), 1).i32);
  __asm { FMOV            V17.2S, #-1.0 }
  *(float32x2_t *)v39.i8 = vneg_f32(*(float32x2_t *)v39.i8);
  v38.i64[1] = vextq_s8((int8x16_t)v38, (int8x16_t)v38, 8uLL).u32[0];
  v40 = (int8x8_t)vmls_f32(v37, v24, *(float32x2_t *)v14.f32);
  v38.i32[0] = vadd_f32(*(float32x2_t *)v38.f32, *(float32x2_t *)_Q17.f32).u32[0];
  v41 = vnegq_f32(v38);
  v41.i32[3] = 0;
  v42 = vaddq_f32(vmulq_laneq_f32(v21, v14, 3), v34);
  v43 = vmulq_f32(v41, v41);
  v43.i64[0] = vpaddq_f32(v43, v43).u64[0];
  v44 = vpadd_f32(*(float32x2_t *)v43.f32, *(float32x2_t *)v43.f32);
  v45 = vrsqrte_f32(v44);
  v46 = 4;
  do
  {
    v45 = vmul_f32(v45, vrsqrts_f32(vmul_f32(v45, v45), v44));
    --v46;
  }
  while (v46);
  *(int8x8_t *)v47.f32 = vext_s8(v40, (int8x8_t)vmla_f32(vmul_f32(*(float32x2_t *)v14.f32, v23), *(float32x2_t *)v17.f32, *(float32x2_t *)v39.i8), 4uLL);
  *(int8x8_t *)&v47.u32[2] = v40;
  v48 = (float32x2_t)vextq_s8(v31, v31, 8uLL).u64[0];
  __asm { FMOV            V1.2S, #1.0 }
  v50 = vmul_f32(v44, (float32x2_t)vbsl_s8((int8x8_t)vdup_lane_s32(vceqz_f32(v44), 0), (int8x8_t)_D1, (int8x8_t)v45));
  v51 = vrecpe_f32(v50);
  v52 = 4;
  do
  {
    v51 = vmul_f32(v51, vrecps_f32(v50, v51));
    --v52;
  }
  while (v52);
  v53 = vaddq_f32(v29, v29);
  v54 = vsub_f32(v48, v33);
  v55 = vaddq_f32(v42, v47);
  v56 = v53;
  v56.i32[3] = 0;
  v57 = vmulq_n_f32(v41, v51.f32[0]);
  v57.i32[3] = 0;
  v201 = v57;
  v57.i64[0] = *(_QWORD *)a5;
  v58 = (float32x2_t)vdup_lane_s32(*(int32x2_t *)a5, 0);
  v200 = v58;
  v39.i32[0] = a2[1];
  v59 = (float32x4_t)v39;
  v59.i32[1] = a2[2];
  v60 = v59;
  v60.i32[2] = a2[3];
  v61 = (float32x2_t)vdup_laneq_s32((int32x4_t)v60, 2);
  v62 = vpmin_f32(v61, *(float32x2_t *)v59.f32);
  v57.f32[0] = *(float *)(a5 + 8) * 0.15;
  v63 = (float32x2_t)vdup_lane_s32(*(int32x2_t *)v55.f32, 1);
  v64 = vmul_f32(vmin_f32(vmul_f32(vpmin_f32(v62, v62), (float32x2_t)vdup_n_s32(0x3E19999Au)), (float32x2_t)vdup_lane_s32(*(int32x2_t *)v57.f32, 0)), (float32x2_t)vdup_n_s32(0x3E4CCCCDu));
  *(int32x2_t *)v57.f32 = vdup_laneq_s32((int32x4_t)v55, 2);
  v65 = vaddq_f32(v55, v55);
  v66 = _X20[4].u8[0];
  v67 = (float32x2_t)vdup_lane_s32(*(int32x2_t *)v65.f32, 1);
  v68 = (float32x2_t)vdup_laneq_s32((int32x4_t)v65, 2);
  v69 = (float32x2_t)vdup_lane_s32((int32x2_t)vmul_f32(*(float32x2_t *)v55.f32, *(float32x2_t *)v65.f32), 0);
  v70 = vmul_lane_f32(v63, *(float32x2_t *)v65.f32, 1);
  v71 = vmul_laneq_f32(*(float32x2_t *)v57.f32, v65, 2);
  v72 = vmul_n_f32(v63, v65.f32[0]);
  v73 = vmul_n_f32(*(float32x2_t *)v57.f32, v65.f32[0]);
  v74 = vmul_lane_f32((float32x2_t)vdup_lane_s32(*(int32x2_t *)v65.f32, 0), v54, 1);
  *(float32x2_t *)v65.f32 = vmul_lane_f32(*(float32x2_t *)v57.f32, *(float32x2_t *)v65.f32, 1);
  v75 = vmul_lane_f32(v67, v54, 1);
  *(float32x2_t *)v57.f32 = vmul_lane_f32(v68, v54, 1);
  v76 = vsub_f32(_D1, v69);
  *(int8x8_t *)v77.f32 = vext_s8((int8x8_t)vsub_f32(vsub_f32(_D1, v70), v71), (int8x8_t)vadd_f32(v72, *(float32x2_t *)v57.f32), 4uLL);
  v77.i64[1] = vsub_f32(v73, v75).u32[0];
  *(int8x8_t *)v78.f32 = vext_s8((int8x8_t)vsub_f32(v72, *(float32x2_t *)v57.f32), (int8x8_t)vsub_f32(v76, v71), 4uLL);
  v78.i64[1] = vadd_f32(*(float32x2_t *)v65.f32, v74).u32[0];
  *(int8x8_t *)v79.f32 = vext_s8((int8x8_t)vadd_f32(v73, v75), (int8x8_t)vsub_f32(*(float32x2_t *)v65.f32, v74), 4uLL);
  v79.i64[1] = vsub_f32(v76, v70).u32[0];
  if (_X20[4].i8[0])
  {
    v80 = vmul_f32(v64, v64);
    v81 = v66 - 1;
    do
    {
      v82 = _X20[5].i64[0];
      v83 = v81;
      v84 = (float32x4_t *)(v82 + 48 * v81);
      v85 = v84[1];
      v86 = vmulq_n_f32(v77, COERCE_FLOAT(*v84));
      v86.i32[3] = 0;
      v87 = vmulq_lane_f32(v78, *(float32x2_t *)v84->f32, 1);
      v87.i32[3] = 0;
      v88 = vmulq_laneq_f32(v79, *v84, 2);
      v88.i32[3] = 0;
      v89 = vaddq_f32(v56, vaddq_f32(v88, vaddq_f32(v86, v87)));
      v90 = v84[2];
      v91 = v90;
      v91.i32[3] = 0;
      v92 = vmulq_f32(v91, vsubq_f32(v89, v85));
      v92.i64[0] = vpaddq_f32(v92, v92).u64[0];
      v93 = vpadd_f32(*(float32x2_t *)v92.f32, *(float32x2_t *)v92.f32);
      v94 = vmlsq_lane_f32(v89, v91, v93, 0);
      v94.i64[1] = vextq_s8((int8x16_t)v94, (int8x16_t)v94, 8uLL).u32[0];
      v95 = vsubq_f32(v85, v94);
      v96 = vmulq_f32(v95, v95);
      v96.i64[0] = vpaddq_f32(v96, v96).u64[0];
      if (vuzp1_s8((int8x8_t)vdup_lane_s16((int16x4_t)vcgt_f32(vpadd_f32(*(float32x2_t *)v96.f32, *(float32x2_t *)v96.f32), v80), 0), *(int8x8_t *)v56.f32).u32[0] == -1)
      {
        v97 = _X20[4].i8[0] - 1;
        _X20[4].i8[0] = v97;
        v98 = (float32x4_t *)(v82 + 48 * v97);
        v99 = *v98;
        v100 = v98[2];
        v84[1] = v98[1];
        v84[2] = v100;
        *v84 = v99;
      }
      else
      {
        v90.i32[3] = v93.i32[1];
        v84[2] = v90;
      }
      --v81;
    }
    while (v83);
    v101 = _X20[4].u8[0];
  }
  else
  {
    v101 = 0;
  }
  v55.i32[3] = v54.i32[1];
  if (v101 != v66
    || (v102 = (int8x16_t)vabdq_f32(v56, _X20[1]),
        *(float32x2_t *)v102.i8 = vpmax_f32((float32x2_t)*(_OWORD *)&vextq_s8(v102, v102, 8uLL), *(float32x2_t *)v102.i8), v103 = vmulq_f32(v55, *_X20), v103.i64[0] = vpaddq_f32(v103, v103).u64[0], vuzp1_s8((int8x8_t)vdup_lane_s16((int16x4_t)vorr_s8((int8x8_t)vcgt_f32((float32x2_t)vdup_n_s32(0x3F7FF2E5u), vpadd_f32(*(float32x2_t *)v103.f32, *(float32x2_t *)v103.f32)), (int8x8_t)vcgt_f32(vpmax_f32(*(float32x2_t *)v102.i8, *(float32x2_t *)v102.i8), v64)), 0), *(int8x8_t *)v56.f32).u32[0] == -1))
  {
    v104 = 0;
    v105 = (float32x2_t)vdupq_lane_s32(*(int32x2_t *)v39.i8, 0).u64[0];
    v106 = (float32x2_t)vdupq_lane_s32(*(int32x2_t *)v59.f32, 1).u64[0];
    v107 = vmulq_n_f32(v77, *(float *)v39.i32);
    v108 = vmulq_lane_f32(v78, *(float32x2_t *)v59.f32, 1);
    v109 = vsub_f32(*(float32x2_t *)v107.f32, *(float32x2_t *)v108.f32);
    v107.i32[3] = 0;
    v110 = v108;
    v110.i32[3] = 0;
    _X20[4].i8[0] = 0;
    v111 = vmulq_laneq_f32(v79, v60, 2);
    v112 = v111;
    v112.i32[3] = 0;
    *_X20 = v55;
    _X20[1] = v56;
    v113 = (float32x2_t)vnegq_f32(v112).u64[0];
    v114 = (float32x2_t)vdup_lane_s32(*(int32x2_t *)v53.f32, 0);
    v115 = vaddq_f32(v107, v110);
    v116 = vaddq_f32(v112, v115);
    v117 = (float32x2_t)vdup_lane_s32(*(int32x2_t *)v116.f32, 0);
    v118 = (float32x2_t)vdup_lane_s32((int32x2_t)vadd_f32(*(float32x2_t *)v115.f32, v113), 0);
    v119 = (int32x2_t)vadd_f32(*(float32x2_t *)v111.f32, v109);
    v120 = (int32x2_t)vsub_f32(v109, *(float32x2_t *)v111.f32);
    v121 = vsub_f32(v58, v114);
    if ((vcgt_f32(v121, v117).u8[0] & 1) != 0)
    {
      v122 = vadd_f32(v114, v117);
      v123 = (int8x16_t)vmlaq_n_f32(vaddq_f32(v56, v116), (float32x4_t)xmmword_2261AA670, v122.f32[0]);
      v123.i64[1] = vextq_s8(v123, v123, 8uLL).u32[0];
      *(float32x4_t *)a7 = v60;
      *(int8x16_t *)(a7 + 16) = v123;
      v124 = v122.i32[1];
      v125.i64[0] = 0;
      v125.i32[2] = 0;
      v125.i32[3] = v124;
      *(int8x16_t *)(a7 + 32) = vorrq_s8(v125, (int8x16_t)xmmword_2260E5F10);
      v104 = 1;
    }
    v126 = (int32x2_t)vsub_f32(*(float32x2_t *)v111.f32, v109);
    v127 = (int8x8_t)vneg_f32(v106);
    v128 = vneg_f32(v61).u32[0];
    v129 = (float32x2_t)vdup_lane_s32(v119, 0);
    if ((vcgt_f32(v121, v118).u8[0] & 1) != 0)
    {
      v130 = vadd_f32(v114, v118);
      *(int8x8_t *)v131.f32 = vext_s8((int8x8_t)v105, (int8x8_t)v106, 4uLL);
      v131.i64[1] = v128;
      v132 = vmulq_n_f32(v77, v131.f32[0]);
      v132.i32[3] = 0;
      v133 = vmulq_lane_f32(v78, *(float32x2_t *)v131.f32, 1);
      v133.i32[3] = 0;
      v134 = a7 + 48 * v104;
      v135 = vaddq_f32(v132, v133);
      v136 = vmulq_laneq_f32(v79, v131, 2);
      v136.i32[3] = 0;
      v137 = (int8x16_t)vmlaq_n_f32(vaddq_f32(v56, vaddq_f32(v136, v135)), (float32x4_t)xmmword_2261AA670, v130.f32[0]);
      v137.i64[1] = vextq_s8(v137, v137, 8uLL).u32[0];
      *(float32x4_t *)v134 = v131;
      *(int8x16_t *)(v134 + 16) = v137;
      v137.i64[0] = 0;
      v137.i32[2] = 0;
      v137.i32[3] = v130.i32[1];
      ++v104;
      *(int8x16_t *)(v134 + 32) = vorrq_s8(v137, (int8x16_t)xmmword_2260E5F10);
    }
    v138 = (int32x2_t)vsub_f32(v113, v109);
    v139 = (float32x2_t)vdup_lane_s32(v120, 0);
    *(int8x8_t *)v140.f32 = vext_s8((int8x8_t)v105, v127, 4uLL);
    if ((vcgt_f32(v121, v129).u32[0] & 1) != 0)
    {
      v141 = vadd_f32(v114, v129);
      v142.i64[0] = v140.i64[0];
      v142.i64[1] = v61.u32[0];
      v143 = vmulq_n_f32(v77, v140.f32[0]);
      v143.i32[3] = 0;
      v144 = vmulq_lane_f32(v78, *(float32x2_t *)v140.f32, 1);
      v144.i32[3] = 0;
      v145 = a7 + 48 * v104;
      v146 = vaddq_f32(v143, v144);
      v147 = vmulq_laneq_f32(v79, v142, 2);
      v147.i32[3] = 0;
      v148 = (int8x16_t)vmlaq_n_f32(vaddq_f32(v56, vaddq_f32(v147, v146)), (float32x4_t)xmmword_2261AA670, v141.f32[0]);
      v148.i64[1] = vextq_s8(v148, v148, 8uLL).u32[0];
      *(float32x4_t *)v145 = v142;
      *(int8x16_t *)(v145 + 16) = v148;
      v148.i64[0] = 0;
      v148.i32[2] = 0;
      v148.i32[3] = v141.i32[1];
      ++v104;
      *(int8x16_t *)(v145 + 32) = vorrq_s8(v148, (int8x16_t)xmmword_2260E5F10);
    }
    v149 = (int32x2_t)vsub_f32(*(float32x2_t *)v111.f32, *(float32x2_t *)v115.f32);
    v150 = (int8x8_t)vneg_f32(v105);
    v151 = (float32x2_t)vdup_lane_s32(v126, 0);
    if ((vcgt_f32(v121, v139).u8[0] & 1) != 0)
    {
      v152 = vadd_f32(v114, v139);
      v140.i64[1] = v128;
      v153 = vmulq_n_f32(v77, v140.f32[0]);
      v153.i32[3] = 0;
      v154 = vmulq_lane_f32(v78, *(float32x2_t *)v140.f32, 1);
      v154.i32[3] = 0;
      v155 = a7 + 48 * v104;
      v156 = vaddq_f32(v153, v154);
      v157 = vmulq_laneq_f32(v79, v140, 2);
      v157.i32[3] = 0;
      v158 = (int8x16_t)vmlaq_n_f32(vaddq_f32(v56, vaddq_f32(v157, v156)), (float32x4_t)xmmword_2261AA670, v152.f32[0]);
      v158.i64[1] = vextq_s8(v158, v158, 8uLL).u32[0];
      *(float32x4_t *)v155 = v140;
      *(int8x16_t *)(v155 + 16) = v158;
      v159 = v152.i32[1];
      v160.i64[0] = 0;
      v160.i32[2] = 0;
      v160.i32[3] = v159;
      ++v104;
      *(int8x16_t *)(v155 + 32) = vorrq_s8(v160, (int8x16_t)xmmword_2260E5F10);
    }
    v161 = (int32x2_t)vsub_f32(v113, *(float32x2_t *)v115.f32);
    v162 = (float32x2_t)vdup_lane_s32(v138, 0);
    *(int8x8_t *)v163.f32 = vext_s8(v150, (int8x8_t)v106, 4uLL);
    if ((vcgt_f32(v121, v151).u8[0] & 1) != 0)
    {
      v164 = vadd_f32(v114, v151);
      v165.i64[0] = v163.i64[0];
      v165.i64[1] = v61.u32[0];
      v166 = vmulq_n_f32(v77, v163.f32[0]);
      v166.i32[3] = 0;
      v167 = vmulq_lane_f32(v78, *(float32x2_t *)v163.f32, 1);
      v167.i32[3] = 0;
      v168 = a7 + 48 * v104;
      v169 = vaddq_f32(v166, v167);
      v170 = vmulq_laneq_f32(v79, v165, 2);
      v170.i32[3] = 0;
      v171 = (int8x16_t)vmlaq_n_f32(vaddq_f32(v56, vaddq_f32(v170, v169)), (float32x4_t)xmmword_2261AA670, v164.f32[0]);
      v171.i64[1] = vextq_s8(v171, v171, 8uLL).u32[0];
      *(float32x4_t *)v168 = v165;
      *(int8x16_t *)(v168 + 16) = v171;
      v171.i64[0] = 0;
      v171.i32[2] = 0;
      v171.i32[3] = v164.i32[1];
      ++v104;
      *(int8x16_t *)(v168 + 32) = vorrq_s8(v171, (int8x16_t)xmmword_2260E5F10);
    }
    v172 = (float32x2_t)vdup_lane_s32(v149, 0);
    if ((vcgt_f32(v121, v162).u8[0] & 1) != 0)
    {
      v173 = vadd_f32(v114, v162);
      v163.i64[1] = v128;
      v174 = vmulq_n_f32(v77, v163.f32[0]);
      v174.i32[3] = 0;
      v175 = vmulq_lane_f32(v78, *(float32x2_t *)v163.f32, 1);
      v175.i32[3] = 0;
      v176 = a7 + 48 * v104;
      v177 = vaddq_f32(v174, v175);
      v178 = vmulq_laneq_f32(v79, v163, 2);
      v178.i32[3] = 0;
      v179 = (int8x16_t)vmlaq_n_f32(vaddq_f32(v56, vaddq_f32(v178, v177)), (float32x4_t)xmmword_2261AA670, v173.f32[0]);
      v179.i64[1] = vextq_s8(v179, v179, 8uLL).u32[0];
      *(float32x4_t *)v176 = v163;
      *(int8x16_t *)(v176 + 16) = v179;
      v180 = v173.i32[1];
      v181.i64[0] = 0;
      v181.i32[2] = 0;
      v181.i32[3] = v180;
      ++v104;
      *(int8x16_t *)(v176 + 32) = vorrq_s8(v181, (int8x16_t)xmmword_2260E5F10);
    }
    v182 = (float32x2_t)vdup_lane_s32(v161, 0);
    *(int8x8_t *)v183.f32 = vext_s8(v150, v127, 4uLL);
    if ((vcgt_f32(v121, v172).u8[0] & 1) != 0)
    {
      v184 = vadd_f32(v114, v172);
      v185.i64[0] = v183.i64[0];
      v185.i64[1] = v61.u32[0];
      v186 = vmulq_n_f32(v77, v183.f32[0]);
      v186.i32[3] = 0;
      v187 = vmulq_lane_f32(v78, *(float32x2_t *)v183.f32, 1);
      v187.i32[3] = 0;
      v188 = a7 + 48 * v104;
      v189 = vaddq_f32(v186, v187);
      v190 = vmulq_laneq_f32(v79, v185, 2);
      v190.i32[3] = 0;
      v191 = (int8x16_t)vmlaq_n_f32(vaddq_f32(v56, vaddq_f32(v190, v189)), (float32x4_t)xmmword_2261AA670, v184.f32[0]);
      v191.i64[1] = vextq_s8(v191, v191, 8uLL).u32[0];
      *(float32x4_t *)v188 = v185;
      *(int8x16_t *)(v188 + 16) = v191;
      v191.i32[0] = v184.i32[1];
      v192.i64[0] = 0;
      v192.i32[2] = 0;
      v192.i32[3] = v191.i32[0];
      ++v104;
      *(int8x16_t *)(v188 + 32) = vorrq_s8(v192, (int8x16_t)xmmword_2260E5F10);
    }
    if ((vcgt_f32(v121, v182).u8[0] & 1) != 0)
    {
      v193 = vadd_f32(v114, v182);
      v183.i64[1] = v128;
      v194 = vmulq_n_f32(v77, v183.f32[0]);
      v194.i32[3] = 0;
      v195 = vmulq_lane_f32(v78, *(float32x2_t *)v183.f32, 1);
      v195.i32[3] = 0;
      v196 = a7 + 48 * v104;
      v197 = vmulq_laneq_f32(v79, v183, 2);
      v197.i32[3] = 0;
      v198 = (int8x16_t)vmlaq_n_f32(vaddq_f32(v56, vaddq_f32(v197, vaddq_f32(v194, v195))), (float32x4_t)xmmword_2261AA670, v193.f32[0]);
      v198.i64[1] = vextq_s8(v198, v198, 8uLL).u32[0];
      *(float32x4_t *)v196 = v183;
      *(int8x16_t *)(v196 + 16) = v198;
      v194.i64[0] = 0;
      v194.i32[2] = 0;
      v194.i32[3] = v193.i32[1];
      ++v104;
      *(int8x16_t *)(v196 + 32) = vorrq_s8((int8x16_t)v194, (int8x16_t)xmmword_2260E5F10);
    }
    physx::Gu::PersistentContactManifold::addBatchManifoldContactsCluster((uint64_t)_X20, (float32x4_t *)a7, v104);
  }
  physx::Gu::PersistentContactManifold::addManifoldContactsToContactBuffer((uint64_t)_X20, a7, &v201, v202, (uint64_t *)&v200);
  return _X20[4].i8[0] != 0;
}

BOOL physx::Gu::pcmContactPlaneCapsule(uint64_t a1, uint64_t a2, float32x4_t *a3, float32x4_t *a4, int32x2_t *a5, float32x4_t **a6, uint64_t a7)
{
  float32x4_t v14;
  int8x16_t v15;
  float32x4_t v16;
  float32x4_t v17;
  float32x2_t v18;
  float32x4_t v19;
  float32x4_t v20;
  float32x4_t v21;
  float32x2_t v22;
  float32x2_t v23;
  int8x8_t v24;
  float32x4_t v25;
  float32x4_t v26;
  float32x4_t v27;
  float32x4_t v28;
  float32x4_t v29;
  float32x2_t v30;
  float32x4_t v31;
  int8x8_t v32;
  float32x4_t v33;
  int8x16_t v34;
  int8x16_t v36;
  float32x4_t v37;
  float32x4_t v38;
  float32x2_t v39;
  float32x4_t v40;
  float32x2_t v41;
  float32x4_t v42;
  float32x4_t v43;
  float32x4_t v44;
  float32x2_t v45;
  float32x2_t v46;
  int v47;
  float32x4_t v48;
  float32x2_t v49;
  float32x2_t v51;
  float32x2_t v52;
  int v53;
  float32x2_t v54;
  float32x4_t v55;
  float32x4_t v56;
  float32x4_t v57;
  float32x4_t v58;
  float32x2_t v59;
  int32x2_t v60;
  float32x2_t v61;
  uint64_t v62;
  float32x2_t v63;
  int v64;
  float32x2_t v65;
  float32x2_t v66;
  float32x4_t v67;
  float32x2_t v68;
  float32x2_t v69;
  float32x2_t v70;
  float32x2_t v71;
  float32x2_t v72;
  float32x2_t v73;
  float32x2_t v74;
  float32x2_t v75;
  float32x2_t v76;
  float32x4_t v77;
  float32x4_t v78;
  float32x4_t v79;
  float32x2_t v80;
  unsigned int v81;
  uint64_t v82;
  uint64_t v83;
  float32x4_t *v84;
  float32x4_t v85;
  float32x4_t v86;
  float32x4_t v87;
  float32x4_t v88;
  float32x4_t v89;
  float32x4_t v90;
  float32x4_t v91;
  float32x4_t v92;
  float32x2_t v93;
  float32x4_t v94;
  float32x4_t v95;
  float32x4_t v96;
  unsigned __int8 v97;
  float32x4_t *v98;
  float32x4_t v99;
  float32x4_t v100;
  int v101;
  float32x4_t v102;
  int8x16_t v103;
  float32x4_t v104;
  float32x4_t v105;
  float32x4_t v106;
  float32x4_t v107;
  float32x4_t v108;
  float32x4_t v109;
  float32x2_t v110;
  float32x2_t v111;
  float32x4_t v112;
  float32x4_t v113;
  float32x2_t v114;
  float32x2_t v115;
  float32x4_t v116;
  float32x4_t v117;
  int8x8_t v118;
  float32x4_t v119;
  float32x4_t v120;
  float32x4_t v121;
  float32x4_t v122;
  float32x4_t v123;
  int32x4_t v124;
  int8x16_t v125;
  float32x4_t v126;
  float32x4_t v127;
  int8x8_t v128;
  float32x4_t v129;
  float32x4_t v130;
  float32x4_t v131;
  float32x4_t v132;
  int8x16_t v133;
  int32x4_t v134;
  int8x16_t v135;
  float32x2_t v137;
  float32x4_t v138;
  float32x4_t v139;
  float32x4_t v140;
  uint64_t v141;
  float32x2_t v142;
  int8x16_t v143;
  float32x4_t v144;
  float32x4_t v145;
  float32x2_t v146;
  float32x2_t v147;
  float32x2_t v148;
  float32x4_t v149;
  float32x4_t v150;
  float32x4_t v151[2];

  _X20 = *a6;
  __asm { PRFM            #0, [X20,#0x100] }
  v14.i64[0] = a4[1].i64[0];
  v14.i64[1] = a4[1].u32[2];
  v151[0] = *a4;
  v151[1] = v14;
  v15 = *(int8x16_t *)a3;
  v16.i64[0] = a3[1].i64[0];
  v16.i64[1] = a3[1].u32[2];
  v17 = vnegq_f32(*a3);
  v18 = (float32x2_t)vdupq_laneq_s32(*(int32x4_t *)a3, 3).u64[0];
  v19 = vsubq_f32(v14, v16);
  v20 = v17;
  v20.i32[3] = 0;
  v21 = vmulq_n_f32(v19, vmla_f32((float32x2_t)0xBF000000BF000000, v18, v18).f32[0]);
  v21.i32[3] = 0;
  v22 = (float32x2_t)vextq_s8((int8x16_t)v20, (int8x16_t)v20, 8uLL).u64[0];
  v23 = (float32x2_t)vext_s8(*(int8x8_t *)v17.f32, (int8x8_t)v22, 4uLL);
  v24 = (int8x8_t)vmls_f32(vmul_f32(*(float32x2_t *)v17.f32, (float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v19, (int8x16_t)v19, 4uLL)), v23, *(float32x2_t *)v19.f32);
  *(int8x8_t *)v25.f32 = vext_s8(v24, (int8x8_t)vmls_f32(vmul_f32(v22, *(float32x2_t *)v19.f32), *(float32x2_t *)v17.f32, (float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v19, (int8x16_t)v19, 8uLL)), 4uLL);
  v25.i64[1] = v24.u32[0];
  v26 = vmlaq_laneq_f32(v21, v25, *a3, 3);
  v26.i64[1] = vextq_s8((int8x16_t)v26, (int8x16_t)v26, 8uLL).u32[0];
  v25.i64[0] = vextq_s8(v15, v15, 8uLL).u64[0];
  v27 = vmulq_f32(v20, v19);
  v27.i64[0] = vpaddq_f32(v27, v27).u64[0];
  v28 = vmlaq_n_f32(v26, v20, vpadd_f32(*(float32x2_t *)v27.f32, *(float32x2_t *)v27.f32).f32[0]);
  v29 = v151[0];
  v29.i32[3] = 0;
  v30 = (float32x2_t)vextq_s8((int8x16_t)v29, (int8x16_t)v29, 8uLL).u64[0];
  v31 = vmulq_n_f32(*a3, vadd_f32(*(float32x2_t *)v15.i8, *(float32x2_t *)v15.i8).f32[0]);
  v31.i32[3] = 0;
  v32 = (int8x8_t)vmls_f32(vmul_f32((float32x2_t)vext_s8(*(int8x8_t *)v151[0].f32, (int8x8_t)v30, 4uLL), *(float32x2_t *)v17.f32), v23, *(float32x2_t *)v151[0].f32);
  *(int8x8_t *)v33.f32 = vext_s8((int8x8_t)v18, *(int8x8_t *)v25.f32, 4uLL);
  v33.i64[1] = vneg_f32((float32x2_t)vdup_lane_s32(*(int32x2_t *)a3->f32, 1)).u32[0];
  v34 = (int8x16_t)vmlaq_n_f32(v31, v33, *(float *)vdup_lane_s32((int32x2_t)vadd_f32(*(float32x2_t *)v25.f32, *(float32x2_t *)v25.f32), 1).i32);
  v42.i32[1] = v34.i32[1];
  __asm { FMOV            V0.2S, #-1.0 }
  v36 = (int8x16_t)vmulq_f32(v151[0], *a3);
  v37 = vmulq_laneq_f32(v29, *a3, 3);
  v38 = vmulq_f32(v29, v20);
  v38.i64[0] = vpaddq_f32(v38, v38).u64[0];
  v39 = vpadd_f32(*(float32x2_t *)v38.f32, *(float32x2_t *)v38.f32);
  v40 = vmulq_laneq_f32(v20, v151[0], 3);
  v41 = vneg_f32(v30);
  v42.i64[1] = vextq_s8(v34, v34, 8uLL).u32[0];
  v42.i32[0] = vadd_f32(*(float32x2_t *)v34.i8, _D0).u32[0];
  v43 = vaddq_f32(v40, v37);
  v44 = vmulq_f32(v42, v42);
  v44.i64[0] = vpaddq_f32(v44, v44).u64[0];
  v45 = vpadd_f32(*(float32x2_t *)v44.f32, *(float32x2_t *)v44.f32);
  v46 = vrsqrte_f32(v45);
  v47 = 4;
  do
  {
    v46 = vmul_f32(v46, vrsqrts_f32(vmul_f32(v46, v46), v45));
    --v47;
  }
  while (v47);
  *(int8x8_t *)v48.f32 = vext_s8(v32, (int8x8_t)vmla_f32(vmul_f32(*(float32x2_t *)v151[0].f32, v22), *(float32x2_t *)v17.f32, v41), 4uLL);
  *(int8x8_t *)&v48.u32[2] = v32;
  v49 = (float32x2_t)vextq_s8(v36, v36, 8uLL).u64[0];
  __asm { FMOV            V6.2S, #1.0 }
  v51 = vmul_f32(v45, (float32x2_t)vbsl_s8((int8x8_t)vdup_lane_s32(vceqz_f32(v45), 0), (int8x8_t)_D6, (int8x8_t)v46));
  v52 = vrecpe_f32(v51);
  v53 = 4;
  do
  {
    v52 = vmul_f32(v52, vrecps_f32(v51, v52));
    --v53;
  }
  while (v53);
  v56 = vaddq_f32(v28, v28);
  v54 = vsub_f32(v49, v39);
  v55 = vaddq_f32(v43, v48);
  v56.i32[3] = 0;
  v57 = vmulq_n_f32(v42, v52.f32[0]);
  v57.i32[3] = 0;
  v150 = v57;
  v58 = vnegq_f32(v57);
  v58.i32[3] = 0;
  v149 = v58;
  v59 = (float32x2_t)vdup_lane_s32(*a5, 0);
  v148 = v59;
  v60 = *(int32x2_t *)(a2 + 4);
  v61 = (float32x2_t)vdup_lane_s32(v60, 0);
  v62 = *(_QWORD *)(a2 + 8);
  v63 = (float32x2_t)vdup_lane_s32(*(int32x2_t *)v55.f32, 1);
  v146 = vmul_n_f32((float32x2_t)vdup_n_s32(0x3A83126Fu), *(float *)v60.i32);
  v147 = v61;
  v64 = _X20[4].u8[0];
  if (_X20[4].i8[0])
  {
    v65 = (float32x2_t)vdup_laneq_s32((int32x4_t)v55, 2);
    v66 = vmul_n_f32((float32x2_t)vdup_n_s32(0x3D4CCCCDu), *(float *)v60.i32);
    v67 = vaddq_f32(v55, v55);
    v68 = (float32x2_t)vdup_lane_s32((int32x2_t)vmul_f32(*(float32x2_t *)v55.f32, *(float32x2_t *)v67.f32), 0);
    v69 = vmul_lane_f32(v63, *(float32x2_t *)v67.f32, 1);
    v70 = vmul_laneq_f32(v65, v67, 2);
    v71 = vmul_n_f32(v63, v67.f32[0]);
    v72 = vmul_n_f32(v65, v67.f32[0]);
    v73 = vmul_lane_f32((float32x2_t)vdup_lane_s32(*(int32x2_t *)v67.f32, 0), v54, 1);
    v74 = vmul_lane_f32(v65, *(float32x2_t *)v67.f32, 1);
    v75 = vmul_lane_f32((float32x2_t)vdup_lane_s32(*(int32x2_t *)v67.f32, 1), v54, 1);
    *(float32x2_t *)v67.f32 = vmul_lane_f32((float32x2_t)vdup_laneq_s32((int32x4_t)v67, 2), v54, 1);
    v76 = vsub_f32(_D6, v68);
    *(int8x8_t *)v77.f32 = vext_s8((int8x8_t)vsub_f32(vsub_f32(_D6, v69), v70), (int8x8_t)vadd_f32(v71, *(float32x2_t *)v67.f32), 4uLL);
    *(float32x2_t *)&v77.u32[2] = vsub_f32(v72, v75);
    *(int8x8_t *)v78.f32 = vext_s8((int8x8_t)vsub_f32(v71, *(float32x2_t *)v67.f32), (int8x8_t)vsub_f32(v76, v70), 4uLL);
    *(float32x2_t *)&v78.u32[2] = vadd_f32(v74, v73);
    *(int8x8_t *)v79.f32 = vext_s8((int8x8_t)vadd_f32(v72, v75), (int8x8_t)vsub_f32(v74, v73), 4uLL);
    *(float32x2_t *)&v79.u32[2] = vsub_f32(v76, v69);
    v80 = vmul_f32(v66, v66);
    v81 = v64 - 1;
    do
    {
      v82 = _X20[5].i64[0];
      v83 = v81;
      v84 = (float32x4_t *)(v82 + 48 * v81);
      v85 = v84[1];
      v86 = vmulq_n_f32(v77, COERCE_FLOAT(*v84));
      v86.i32[3] = 0;
      v87 = vmulq_lane_f32(v78, *(float32x2_t *)v84->f32, 1);
      v87.i32[3] = 0;
      v88 = vmulq_laneq_f32(v79, *v84, 2);
      v88.i32[3] = 0;
      v89 = vaddq_f32(v56, vaddq_f32(v88, vaddq_f32(v86, v87)));
      v90 = v84[2];
      v91 = v90;
      v91.i32[3] = 0;
      v92 = vmulq_f32(v91, vsubq_f32(v89, v85));
      v92.i64[0] = vpaddq_f32(v92, v92).u64[0];
      v93 = vpadd_f32(*(float32x2_t *)v92.f32, *(float32x2_t *)v92.f32);
      v94 = vmlsq_lane_f32(v89, v91, v93, 0);
      v94.i64[1] = vextq_s8((int8x16_t)v94, (int8x16_t)v94, 8uLL).u32[0];
      v95 = vsubq_f32(v85, v94);
      v96 = vmulq_f32(v95, v95);
      v96.i64[0] = vpaddq_f32(v96, v96).u64[0];
      if (vuzp1_s8((int8x8_t)vdup_lane_s16((int16x4_t)vcgt_f32(vpadd_f32(*(float32x2_t *)v96.f32, *(float32x2_t *)v96.f32), v80), 0), (int8x8_t)_D0).u32[0] == -1)
      {
        v97 = _X20[4].i8[0] - 1;
        _X20[4].i8[0] = v97;
        v98 = (float32x4_t *)(v82 + 48 * v97);
        v99 = *v98;
        v100 = v98[2];
        v84[1] = v98[1];
        v84[2] = v100;
        *v84 = v99;
      }
      else
      {
        v90.i32[3] = v93.i32[1];
        v84[2] = v90;
      }
      --v81;
    }
    while (v83);
    v101 = _X20[4].u8[0];
  }
  else
  {
    v101 = 0;
  }
  v102 = v55;
  v102.i32[3] = v54.i32[1];
  if (v101 != v64
    || (v103 = (int8x16_t)vabdq_f32(v56, _X20[1]),
        *(float32x2_t *)v103.i8 = vpmax_f32((float32x2_t)*(_OWORD *)&vextq_s8(v103, v103, 8uLL), *(float32x2_t *)v103.i8), v104 = vmulq_f32(v102, *_X20), v104.i64[0] = vpaddq_f32(v104, v104).u64[0], vuzp1_s8((int8x8_t)vdup_lane_s16((int16x4_t)vorr_s8((int8x8_t)vcgt_f32((float32x2_t)vdup_n_s32(0x3F7FF2E5u), vpadd_f32(*(float32x2_t *)v104.f32, *(float32x2_t *)v104.f32)), (int8x8_t)vcgt_f32(vpmax_f32(*(float32x2_t *)v103.i8, *(float32x2_t *)v103.i8), vmul_n_f32((float32x2_t)vdup_n_s32(0x3CA3D70Au), *(float *)v60.i32))), 0), (int8x8_t)_D0).u32[0] == -1))
  {
    v105 = v102;
    v105.i32[3] = 0;
    *(int8x8_t *)v106.f32 = vext_s8((int8x8_t)v54, (int8x8_t)*(_OWORD *)&vextq_s8((int8x16_t)v55, (int8x16_t)v55, 8uLL), 4uLL);
    v107 = vmulq_n_f32(v105, vadd_f32(*(float32x2_t *)v55.f32, *(float32x2_t *)v55.f32).f32[0]);
    v107.i32[3] = 0;
    v106.i64[1] = vneg_f32(v63).u32[0];
    v108 = vmlaq_n_f32(v107, v106, *(float *)vdup_lane_s32((int32x2_t)vadd_f32(v54, v54), 1).i32);
    v108.i32[0] = vadd_f32(*(float32x2_t *)v108.f32, _D0).u32[0];
    v109 = vmulq_n_f32(v108, *(float *)&v62);
    v110 = (float32x2_t)vextq_s8((int8x16_t)v105, (int8x16_t)v105, 8uLL).u64[0];
    v109.i32[3] = 0;
    v111 = (float32x2_t)vdup_lane_s32((int32x2_t)v54, 1);
    v112 = vaddq_f32(v56, v109);
    v113 = vsubq_f32(v56, v109);
    v114 = vadd_f32(v59, v61);
    _X20[4].i8[0] = 0;
    *_X20 = v102;
    _X20[1] = v56;
    v115 = (float32x2_t)vext_s8(*(int8x8_t *)v55.f32, (int8x8_t)v110, 4uLL);
    if ((vcgt_f32(v114, (float32x2_t)vdup_lane_s32(*(int32x2_t *)v112.f32, 0)).u8[0] & 1) != 0)
    {
      v116 = vsubq_f32(v112, v56);
      v117 = vmulq_n_f32(v116, vmla_f32((float32x2_t)0xBF000000BF000000, v111, v111).f32[0]);
      v117.i32[3] = 0;
      v138 = v113;
      v118 = (int8x8_t)vmls_f32(vmul_f32(*(float32x2_t *)v55.f32, (float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v116, (int8x16_t)v116, 4uLL)), v115, *(float32x2_t *)v116.f32);
      *(int8x8_t *)v119.f32 = vext_s8(v118, (int8x8_t)vmls_f32(vmul_f32(v110, *(float32x2_t *)v116.f32), *(float32x2_t *)v55.f32, (float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v116, (int8x16_t)v116, 8uLL)), 4uLL);
      v119.i64[1] = v118.u32[0];
      v120 = vmlsq_lane_f32(v117, v119, v54, 1);
      v120.i64[1] = vextq_s8((int8x16_t)v120, (int8x16_t)v120, 8uLL).u32[0];
      v121 = vmulq_f32(v105, v116);
      v121.i64[0] = vpaddq_f32(v121, v121).u64[0];
      v122 = vmlaq_n_f32(v120, v105, vpadd_f32(*(float32x2_t *)v121.f32, *(float32x2_t *)v121.f32).f32[0]);
      v123 = vaddq_f32(v122, v122);
      v123.i32[3] = 0;
      v145 = v123;
      v124 = vdupq_lane_s32(*(int32x2_t *)v112.f32, 0);
      v125 = (int8x16_t)vmlaq_n_f32(v112, (float32x4_t)xmmword_2261AA670, v112.f32[0]);
      v125.i64[1] = vextq_s8(v125, v125, 8uLL).u32[0];
      v144 = (float32x4_t)v125;
      v125.i64[0] = 0;
      v125.i32[2] = 0;
      v125.i32[3] = v124.i32[3];
      v142 = v54;
      v143 = vorrq_s8(v125, (int8x16_t)xmmword_2260E5F10);
      v140 = v56;
      v141 = v55.i64[0];
      v139 = v105;
      v137 = v110;
      physx::Gu::PersistentContactManifold::addManifoldPoint2((uint64_t)_X20, &v145, &v144, (__int128 *)v143.i8, &v146);
      v110 = v137;
      v113 = v138;
      v105 = v139;
      v56 = v140;
      v55.i64[0] = v141;
      v54 = v142;
    }
    if ((vcgt_f32(v114, (float32x2_t)vdup_lane_s32(*(int32x2_t *)v113.f32, 0)).u8[0] & 1) != 0)
    {
      v126 = vsubq_f32(v113, v56);
      v127 = vmulq_n_f32(v126, vmla_f32((float32x2_t)0xBF000000BF000000, v111, v111).f32[0]);
      v127.i32[3] = 0;
      v128 = (int8x8_t)vmls_f32(vmul_f32(*(float32x2_t *)v55.f32, (float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v126, (int8x16_t)v126, 4uLL)), v115, *(float32x2_t *)v126.f32);
      *(int8x8_t *)v129.f32 = vext_s8(v128, (int8x8_t)vmls_f32(vmul_f32(v110, *(float32x2_t *)v126.f32), *(float32x2_t *)v55.f32, (float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v126, (int8x16_t)v126, 8uLL)), 4uLL);
      v129.i64[1] = v128.u32[0];
      v130 = vmlsq_lane_f32(v127, v129, v54, 1);
      v130.i64[1] = vextq_s8((int8x16_t)v130, (int8x16_t)v130, 8uLL).u32[0];
      v131 = vmulq_f32(v105, v126);
      v131.i64[0] = vpaddq_f32(v131, v131).u64[0];
      v132 = vmlaq_n_f32(v130, v105, vpadd_f32(*(float32x2_t *)v131.f32, *(float32x2_t *)v131.f32).f32[0]);
      v133 = (int8x16_t)vaddq_f32(v132, v132);
      v133.i32[3] = 0;
      v145 = (float32x4_t)v133;
      v134 = vdupq_lane_s32(*(int32x2_t *)v113.f32, 0);
      v135 = (int8x16_t)vmlaq_n_f32(v113, (float32x4_t)xmmword_2261AA670, v113.f32[0]);
      v135.i64[1] = vextq_s8(v135, v135, 8uLL).u32[0];
      v133.i64[0] = 0;
      v133.i32[2] = 0;
      v133.i32[3] = v134.i32[3];
      v143 = vorrq_s8(v133, (int8x16_t)xmmword_2260E5F10);
      v144 = (float32x4_t)v135;
      physx::Gu::PersistentContactManifold::addManifoldPoint2((uint64_t)_X20, &v145, &v144, (__int128 *)v143.i8, &v146);
    }
  }
  physx::Gu::PersistentContactManifold::addManifoldContactsToContactBuffer((uint64_t)_X20, a7, &v149, &v150, v151, &v147, &v148);
  return _X20[4].i8[0] != 0;
}

BOOL physx::Gu::pcmContactPlaneConvex(uint64_t a1, uint64_t a2, float32x4_t *a3, float32x4_t *a4, uint64_t a5, float32x4_t **a6, int32x4_t *a7)
{
  float32x4_t v14;
  float32x4_t v15;
  int8x16_t v16;
  float32x4_t v17;
  float32x4_t v18;
  float32x2_t v19;
  float32x2_t v20;
  float32x4_t v21;
  float32x4_t v22;
  float32x4_t v23;
  float32x2_t v24;
  float32x2_t v25;
  int8x8_t v26;
  float32x4_t v27;
  float32x4_t v28;
  float32x4_t v29;
  float32x4_t v30;
  float32x4_t v31;
  int8x16_t v32;
  float32x4_t v33;
  float32x2_t v34;
  float32x4_t v35;
  float32x4_t v36;
  float32x2_t v37;
  float32x2_t v38;
  int8x8_t v39;
  float32x4_t v40;
  float32x4_t v41;
  float32x4_t v42;
  uint64_t v43;
  float32x4_t v44;
  float v45;
  int32x4_t v46;
  float32x2_t v47;
  float v48;
  float32x4_t v49;
  float32x4_t v50;
  int8x16_t v51;
  int32x2_t v53;
  float32x4_t v54;
  float32x4_t v55;
  float32x2_t v56;
  float32x2_t v57;
  int v58;
  float32x2_t v59;
  float32x4_t v60;
  float32x2_t v61;
  float32x4_t v62;
  float32x2_t v64;
  float32x2_t v65;
  int v66;
  float32x2_t v67;
  float32x4_t v69;
  float32x2_t v70;
  float32x4_t v71;
  float32x4_t v72;
  int32x2_t v73;
  float32x2_t v74;
  float32x2_t v75;
  float32x2_t v76;
  float32x4_t v77;
  int v78;
  float32x2_t v79;
  float32x2_t v80;
  float32x2_t v81;
  float32x2_t v82;
  float32x2_t v83;
  float32x2_t v84;
  float32x2_t v85;
  float32x2_t v86;
  float32x2_t v87;
  float32x4_t v88;
  float32x4_t v89;
  float32x4_t v90;
  float32x2_t v91;
  unsigned int v92;
  uint64_t v93;
  uint64_t v94;
  float32x4_t *v95;
  float32x4_t v96;
  float32x4_t v97;
  float32x4_t v98;
  float32x4_t v99;
  float32x4_t v100;
  float32x4_t v101;
  float32x4_t v102;
  float32x4_t v103;
  float32x2_t v104;
  float32x4_t v105;
  float32x4_t v106;
  float32x4_t v107;
  unsigned __int8 v108;
  float32x4_t *v109;
  float32x4_t v110;
  float32x4_t v111;
  int v112;
  int8x16_t v113;
  float32x4_t v114;
  float32x4_t v115;
  uint64_t v116;
  uint64_t v117;
  unsigned int v118;
  float32x2_t v119;
  float32x2_t v120;
  float32x2_t v121;
  float32x4_t v122;
  float32x2_t v123;
  float32x2_t v124;
  float32x2_t v125;
  float32x2_t v126;
  float32x2_t v127;
  float32x2_t v128;
  float32x2_t v129;
  float32x2_t v130;
  float32x2_t v131;
  float32x4_t v132;
  float32x4_t v133;
  float32x4_t v134;
  float32x4_t v135;
  float32x4_t v136;
  float32x4_t v137;
  float32x4_t v138;
  float32x4_t v139;
  float32x4_t v140;
  float32x4_t v141;
  float32x4_t v142;
  float32x4_t v143;
  float32x4_t v144;
  float32x4_t v145;
  float32x4_t v146;
  float32x4_t v147;
  float32x4_t v148;
  float32x4_t v149;
  float32x4_t v150;
  float32x4_t v151;
  uint64_t v152;
  float32x4_t v153;
  float32x4_t v154;
  float32x4_t v155;
  const float *v156;
  float *v157;
  float32x4_t v158;
  float v159;
  float32x4_t v160;
  float32x4_t v161;
  float32x4_t v162;
  float32x4_t v163;
  float32x4_t v164;
  float32x4_t v165;
  float32x4_t v166;
  _OWORD *i8;
  int32x4_t v168;
  int8x16_t v169;
  uint64_t i;
  float32x4_t *v171;
  _OWORD *v172;
  float32x4_t v173;
  float32x4_t v175;
  float32x4_t v176;
  float32x4_t v177;
  float32x4_t v178;
  float32x4_t v179;
  float32x4_t v180;
  __int32 v181;
  float32x4_t v182;
  int32x2_t v183;
  float32x4_t v184;
  float32x4_t v185[2];

  _X20 = *a6;
  __asm { PRFM            #0, [X20,#0x100] }
  v14.i64[0] = a4[1].i64[0];
  v14.i64[1] = a4[1].u32[2];
  v15 = *a4;
  v17.i64[0] = a3[1].i64[0];
  v17.i64[1] = a3[1].u32[2];
  v185[0] = *a3;
  v16 = (int8x16_t)v185[0];
  v185[1] = v17;
  v18 = vnegq_f32(v185[0]);
  v19 = (float32x2_t)vextq_s8(v16, v16, 8uLL).u64[0];
  v20 = (float32x2_t)vdupq_laneq_s32((int32x4_t)v185[0], 3).u64[0];
  v21 = vsubq_f32(v14, v17);
  v22 = v18;
  v22.i32[3] = 0;
  v23 = vmulq_n_f32(v21, vmla_f32((float32x2_t)0xBF000000BF000000, v20, v20).f32[0]);
  v23.i32[3] = 0;
  v24 = (float32x2_t)vextq_s8((int8x16_t)v22, (int8x16_t)v22, 8uLL).u64[0];
  v25 = (float32x2_t)vext_s8(*(int8x8_t *)v18.f32, (int8x8_t)v24, 4uLL);
  v26 = (int8x8_t)vmls_f32(vmul_f32(*(float32x2_t *)v18.f32, (float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v21, (int8x16_t)v21, 4uLL)), v25, *(float32x2_t *)v21.f32);
  *(int8x8_t *)v27.f32 = vext_s8(v26, (int8x8_t)vmls_f32(vmul_f32(v24, *(float32x2_t *)v21.f32), *(float32x2_t *)v18.f32, (float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v21, (int8x16_t)v21, 8uLL)), 4uLL);
  v27.i64[1] = v26.u32[0];
  v28 = vmlaq_laneq_f32(v23, v27, v185[0], 3);
  v28.i64[1] = vextq_s8((int8x16_t)v28, (int8x16_t)v28, 8uLL).u32[0];
  v29 = vmulq_f32(v22, v21);
  v29.i64[0] = vpaddq_f32(v29, v29).u64[0];
  v30 = v15;
  v30.i32[3] = 0;
  v31 = vmlaq_n_f32(v28, v22, vpadd_f32(*(float32x2_t *)v29.f32, *(float32x2_t *)v29.f32).f32[0]);
  v32 = (int8x16_t)vmulq_f32(v15, v185[0]);
  v33 = vmulq_f32(v30, v22);
  v33.i64[0] = vpaddq_f32(v33, v33).u64[0];
  v34 = vpadd_f32(*(float32x2_t *)v33.f32, *(float32x2_t *)v33.f32);
  v35 = vmulq_laneq_f32(v22, v15, 3);
  v36 = vmulq_laneq_f32(v30, v185[0], 3);
  v37 = (float32x2_t)vextq_s8((int8x16_t)v30, (int8x16_t)v30, 8uLL).u64[0];
  *(float32x2_t *)v30.f32 = vmul_f32((float32x2_t)vext_s8(*(int8x8_t *)v15.f32, (int8x8_t)v37, 4uLL), *(float32x2_t *)v18.f32);
  v38 = vneg_f32(v37);
  v39 = (int8x8_t)vmls_f32(*(float32x2_t *)v30.f32, v25, *(float32x2_t *)v15.f32);
  v40 = vaddq_f32(v35, v36);
  v41 = *(float32x4_t *)(a2 + 4);
  v42 = v41;
  v42.i32[3] = 0;
  v43 = *(_QWORD *)(a2 + 48);
  v44.i64[0] = *(_QWORD *)(v43 + 60);
  v44.i64[1] = *(unsigned int *)(v43 + 68);
  v45 = *(float *)(a5 + 8);
  v46 = (int32x4_t)vmulq_f32(v42, v44);
  v47 = vpmin_f32((float32x2_t)vdup_laneq_s32(v46, 2), *(float32x2_t *)v46.i8);
  LODWORD(v48) = vdup_lane_s32((int32x2_t)vadd_f32(v19, v19), 1).u32[0];
  v49 = vmulq_n_f32(v185[0], vadd_f32(*(float32x2_t *)v16.i8, *(float32x2_t *)v16.i8).f32[0]);
  v49.i32[3] = 0;
  *(int8x8_t *)v50.f32 = vext_s8((int8x8_t)v20, (int8x8_t)v19, 4uLL);
  v50.i64[1] = vneg_f32((float32x2_t)vdup_lane_s32(*(int32x2_t *)v185[0].f32, 1)).u32[0];
  v51 = (int8x16_t)vmlaq_n_f32(v49, v50, v48);
  __asm { FMOV            V16.2S, #-1.0 }
  v53 = (int32x2_t)vadd_f32(*(float32x2_t *)v51.i8, _D16);
  v54.i64[1] = vextq_s8(v51, v51, 8uLL).u32[0];
  v54.i64[0] = __PAIR64__(v51.u32[1], v53.u32[0]);
  v55 = vmulq_f32(v54, v54);
  v55.i64[0] = vpaddq_f32(v55, v55).u64[0];
  v56 = vpadd_f32(*(float32x2_t *)v55.f32, *(float32x2_t *)v55.f32);
  v57 = vrsqrte_f32(v56);
  v58 = 4;
  do
  {
    v57 = vmul_f32(v57, vrsqrts_f32(vmul_f32(v57, v57), v56));
    --v58;
  }
  while (v58);
  v59 = (float32x2_t)vextq_s8(v32, v32, 8uLL).u64[0];
  *(int8x8_t *)v60.f32 = vext_s8(v39, (int8x8_t)vmla_f32(vmul_f32(*(float32x2_t *)v15.f32, v24), *(float32x2_t *)v18.f32, v38), 4uLL);
  v61 = vpmin_f32(v47, v47);
  *(int8x8_t *)&v60.u32[2] = v39;
  v62 = vaddq_f32(v40, v60);
  __asm { FMOV            V4.2S, #1.0 }
  v64 = vmul_f32(v56, (float32x2_t)vbsl_s8((int8x8_t)vdup_lane_s32(vceqz_f32(v56), 0), (int8x8_t)_D4, (int8x8_t)v57));
  v65 = vrecpe_f32(v64);
  v66 = 4;
  do
  {
    v65 = vmul_f32(v65, vrecps_f32(v64, v65));
    --v66;
  }
  while (v66);
  v69 = vaddq_f32(v31, v31);
  v67 = vsub_f32(v59, v34);
  __asm { FMOV            V1.2S, #0.25 }
  *(float *)v53.i32 = v45 * 0.05;
  v69.i32[3] = 0;
  v70 = vmin_f32(vmul_f32(v61, _D1), (float32x2_t)vdup_lane_s32(v53, 0));
  v71 = vmulq_n_f32(v54, v65.f32[0]);
  v71.i32[3] = 0;
  v72 = vnegq_f32(v71);
  v72.i32[3] = 0;
  v184 = v72;
  v73 = *(int32x2_t *)a5;
  v183 = vdup_lane_s32(*(int32x2_t *)a5, 0);
  v74 = (float32x2_t)vdup_lane_s32(*(int32x2_t *)v62.f32, 1);
  v75 = vmul_f32(v70, (float32x2_t)vdup_n_s32(0x3E4CCCCDu));
  v76 = (float32x2_t)vdup_laneq_s32((int32x4_t)v62, 2);
  v77 = vaddq_f32(v62, v62);
  v78 = _X20[4].u8[0];
  v79 = (float32x2_t)vdup_lane_s32((int32x2_t)vmul_f32(*(float32x2_t *)v62.f32, *(float32x2_t *)v77.f32), 0);
  v80 = vmul_lane_f32(v74, *(float32x2_t *)v77.f32, 1);
  v81 = vmul_laneq_f32(v76, v77, 2);
  v82 = vmul_n_f32(v74, v77.f32[0]);
  v83 = vmul_n_f32(v76, v77.f32[0]);
  v84 = vmul_lane_f32((float32x2_t)vdup_lane_s32(*(int32x2_t *)v77.f32, 0), v67, 1);
  v85 = vmul_lane_f32(v76, *(float32x2_t *)v77.f32, 1);
  v86 = vmul_lane_f32((float32x2_t)vdup_lane_s32(*(int32x2_t *)v77.f32, 1), v67, 1);
  *(float32x2_t *)v77.f32 = vmul_lane_f32((float32x2_t)vdup_laneq_s32((int32x4_t)v77, 2), v67, 1);
  v87 = vsub_f32(_D4, v79);
  *(int8x8_t *)v88.f32 = vext_s8((int8x8_t)vsub_f32(vsub_f32(_D4, v80), v81), (int8x8_t)vadd_f32(v82, *(float32x2_t *)v77.f32), 4uLL);
  v88.i64[1] = vsub_f32(v83, v86).u32[0];
  *(int8x8_t *)v89.f32 = vext_s8((int8x8_t)vsub_f32(v82, *(float32x2_t *)v77.f32), (int8x8_t)vsub_f32(v87, v81), 4uLL);
  v89.i64[1] = vadd_f32(v85, v84).u32[0];
  *(int8x8_t *)v90.f32 = vext_s8((int8x8_t)vadd_f32(v83, v86), (int8x8_t)vsub_f32(v85, v84), 4uLL);
  v90.i64[1] = vsub_f32(v87, v80).u32[0];
  if (_X20[4].i8[0])
  {
    v91 = vmul_f32(v75, v75);
    v92 = v78 - 1;
    do
    {
      v93 = _X20[5].i64[0];
      v94 = v92;
      v95 = (float32x4_t *)(v93 + 48 * v92);
      v96 = v95[1];
      v97 = vmulq_n_f32(v88, COERCE_FLOAT(*v95));
      v97.i32[3] = 0;
      v98 = vmulq_lane_f32(v89, *(float32x2_t *)v95->f32, 1);
      v98.i32[3] = 0;
      v99 = vmulq_laneq_f32(v90, *v95, 2);
      v99.i32[3] = 0;
      v100 = vaddq_f32(v69, vaddq_f32(v99, vaddq_f32(v97, v98)));
      v101 = v95[2];
      v102 = v101;
      v102.i32[3] = 0;
      v103 = vmulq_f32(v102, vsubq_f32(v100, v96));
      v103.i64[0] = vpaddq_f32(v103, v103).u64[0];
      v104 = vpadd_f32(*(float32x2_t *)v103.f32, *(float32x2_t *)v103.f32);
      v105 = vmlsq_lane_f32(v100, v102, v104, 0);
      v105.i64[1] = vextq_s8((int8x16_t)v105, (int8x16_t)v105, 8uLL).u32[0];
      v106 = vsubq_f32(v96, v105);
      v107 = vmulq_f32(v106, v106);
      v107.i64[0] = vpaddq_f32(v107, v107).u64[0];
      if (vuzp1_s8((int8x8_t)vdup_lane_s16((int16x4_t)vcgt_f32(vpadd_f32(*(float32x2_t *)v107.f32, *(float32x2_t *)v107.f32), v91), 0), *(int8x8_t *)v41.f32).u32[0] == -1)
      {
        v108 = _X20[4].i8[0] - 1;
        _X20[4].i8[0] = v108;
        v109 = (float32x4_t *)(v93 + 48 * v108);
        v110 = *v109;
        v111 = v109[2];
        v95[1] = v109[1];
        v95[2] = v111;
        *v95 = v110;
      }
      else
      {
        v101.i32[3] = v104.i32[1];
        v95[2] = v101;
      }
      --v92;
    }
    while (v94);
    v112 = _X20[4].u8[0];
  }
  else
  {
    v112 = 0;
  }
  v62.i32[3] = v67.i32[1];
  if (v112 != v78
    || (v113 = (int8x16_t)vabdq_f32(v69, _X20[1]),
        *(float32x2_t *)v113.i8 = vpmax_f32((float32x2_t)*(_OWORD *)&vextq_s8(v113, v113, 8uLL), *(float32x2_t *)v113.i8), v114 = vmulq_f32(v62, *_X20), v114.i64[0] = vpaddq_f32(v114, v114).u64[0], vuzp1_s8((int8x8_t)vdup_lane_s16((int16x4_t)vorr_s8((int8x8_t)vcgt_f32((float32x2_t)vdup_n_s32(0x3F7FF2E5u), vpadd_f32(*(float32x2_t *)v114.f32, *(float32x2_t *)v114.f32)), (int8x8_t)vcgt_f32(vpmax_f32(*(float32x2_t *)v113.i8, *(float32x2_t *)v113.i8), v75)), 0), *(int8x8_t *)v41.f32).u32[0] == -1))
  {
    v115 = *(float32x4_t *)(a2 + 16);
    _X20[4].i8[0] = 0;
    *_X20 = v62;
    _X20[1] = v69;
    v116 = *(unsigned __int8 *)(v43 + 38);
    if (*(_BYTE *)(v43 + 38))
    {
      v117 = 0;
      v118 = 0;
      v119 = (float32x2_t)vdup_lane_s32(*(int32x2_t *)v115.f32, 1);
      v120 = (float32x2_t)vdup_laneq_s32((int32x4_t)v115, 2);
      v121 = (float32x2_t)vdup_laneq_s32((int32x4_t)v115, 3);
      v122 = vaddq_f32(v115, v115);
      v123 = vmul_lane_f32(v119, *(float32x2_t *)v122.f32, 1);
      v124 = vmul_laneq_f32(v120, v122, 2);
      v125 = vmul_n_f32(v119, v122.f32[0]);
      v126 = vmul_n_f32(v120, v122.f32[0]);
      v127 = vmul_n_f32(v121, v122.f32[0]);
      v128 = vmul_lane_f32(v120, *(float32x2_t *)v122.f32, 1);
      v129 = vmul_lane_f32(v121, *(float32x2_t *)v122.f32, 1);
      v130 = vmul_laneq_f32(v121, v122, 2);
      v131 = vsub_f32(_D4, (float32x2_t)vdup_lane_s32((int32x2_t)vmul_f32(*(float32x2_t *)v115.f32, *(float32x2_t *)v122.f32), 0));
      *(int8x8_t *)v122.f32 = vext_s8((int8x8_t)vsub_f32(vsub_f32(_D4, v123), v124), (int8x8_t)vadd_f32(v125, v130), 4uLL);
      v122.i64[1] = vsub_f32(v126, v129).u32[0];
      *(int8x8_t *)v132.f32 = vext_s8((int8x8_t)vsub_f32(v125, v130), (int8x8_t)vsub_f32(v131, v124), 4uLL);
      *(int8x8_t *)v133.f32 = vext_s8((int8x8_t)vdup_lane_s32(*(int32x2_t *)v122.f32, 0), *(int8x8_t *)v132.f32, 4uLL);
      v132.i64[1] = vadd_f32(v128, v127).u32[0];
      *(int8x8_t *)v134.f32 = vext_s8((int8x8_t)vadd_f32(v126, v129), (int8x8_t)vsub_f32(v128, v127), 4uLL);
      v133.i64[1] = v134.i64[0];
      *(int8x8_t *)v135.f32 = vext_s8(*(int8x8_t *)v122.f32, (int8x8_t)vdup_lane_s32(*(int32x2_t *)v132.f32, 1), 4uLL);
      v134.i64[1] = vsub_f32(v131, v123).u32[0];
      *(int32x2_t *)&v135.u32[2] = vdup_lane_s32(*(int32x2_t *)v134.f32, 1);
      *(int8x8_t *)v136.f32 = vext_s8((int8x8_t)vdup_lane_s32((int32x2_t)v122.u32[2], 0), *(int8x8_t *)&v132.u32[2], 4uLL);
      v136.i64[1] = v134.i64[1];
      v137 = vmulq_n_f32(v133, v41.f32[0]);
      v138 = vmulq_lane_f32(v135, *(float32x2_t *)v41.f32, 1);
      v139 = vmulq_laneq_f32(v136, v41, 2);
      v140 = vmulq_n_f32(v137, v122.f32[0]);
      v140.i32[3] = 0;
      v141 = vmulq_lane_f32(v138, *(float32x2_t *)v122.f32, 1);
      v141.i32[3] = 0;
      v142 = vmulq_laneq_f32(v139, v122, 2);
      v142.i32[3] = 0;
      v143 = vaddq_f32(v142, vaddq_f32(v140, v141));
      v144 = vmulq_n_f32(v137, v132.f32[0]);
      v144.i32[3] = 0;
      v145 = vmulq_lane_f32(v138, *(float32x2_t *)v132.f32, 1);
      v145.i32[3] = 0;
      v146 = vmulq_laneq_f32(v139, v132, 2);
      v146.i32[3] = 0;
      v147 = vaddq_f32(v146, vaddq_f32(v144, v145));
      v148 = vmulq_n_f32(v137, v134.f32[0]);
      v148.i32[3] = 0;
      v149 = vmulq_lane_f32(v138, *(float32x2_t *)v134.f32, 1);
      v149.i32[3] = 0;
      v150 = vmulq_laneq_f32(v139, v134, 2);
      v150.i32[3] = 0;
      v151 = vaddq_f32(v150, vaddq_f32(v148, v149));
      v152 = *(_QWORD *)(v43 + 40) + 20 * *(unsigned __int8 *)(v43 + 39);
      v153 = vaddq_f32(vmulq_laneq_f32(v90, v143, 2), vaddq_f32(vmulq_n_f32(v88, v143.f32[0]), vmulq_lane_f32(v89, *(float32x2_t *)v143.f32, 1)));
      v154 = vaddq_f32(vmulq_laneq_f32(v90, v147, 2), vaddq_f32(vmulq_n_f32(v88, v147.f32[0]), vmulq_lane_f32(v89, *(float32x2_t *)v147.f32, 1)));
      v155 = vaddq_f32(vmulq_laneq_f32(v90, v151, 2), vaddq_f32(vmulq_n_f32(v88, v151.f32[0]), vmulq_lane_f32(v89, *(float32x2_t *)v151.f32, 1)));
      v181 = v73.i32[0];
      v182 = v69;
      v179 = v147;
      v180 = v143;
      v177 = v153;
      v178 = v151;
      v175 = v155;
      v176 = v154;
      do
      {
        v156 = (const float *)(v152 + 12 * v117);
        v158 = vld1q_dup_f32(v156);
        v157 = (float *)(v156 + 1);
        v159 = *(float *)(v152 + 12 * v117 + 8);
        v160 = vmulq_f32(v153, v158);
        v160.i32[3] = 0;
        v161 = vmulq_n_f32(v154, *v157);
        v161.i32[3] = 0;
        v162 = vmulq_n_f32(v155, v159);
        v162.i32[3] = 0;
        v41 = vaddq_f32(v69, vaddq_f32(vaddq_f32(v160, v161), v162));
        if (*(float *)v73.i32 > v41.f32[0])
        {
          v163 = vmulq_f32(v143, v158);
          v163.i32[3] = 0;
          v164 = vmulq_n_f32(v147, *v157);
          v164.i32[3] = 0;
          v165 = vmulq_n_f32(v151, v159);
          v165.i32[3] = 0;
          v166 = vaddq_f32(vaddq_f32(v163, v164), v165);
          i8 = a7[3 * v118].i8;
          v168 = vdupq_lane_s32(*(int32x2_t *)v41.f32, 0);
          v169 = (int8x16_t)vmlaq_n_f32(v41, (float32x4_t)xmmword_2261AA670, v41.f32[0]);
          v169.i64[1] = vextq_s8(v169, v169, 8uLL).u32[0];
          v164.i64[0] = 0;
          v164.i32[2] = 0;
          v164.i32[3] = v168.i32[3];
          *i8 = v166;
          i8[1] = v169;
          v41 = (float32x4_t)vorrq_s8((int8x16_t)v164, (int8x16_t)xmmword_2260E5F10);
          ++v118;
          i8[2] = v41;
          if (v118 >= 0x40)
          {
            v41.f32[0] = v45;
            physx::Gu::PersistentContactManifold::reduceBatchContacts((uint64_t)_X20, a7, v118, *(double *)v41.i64);
            for (i = 0; i != 12; i += 3)
            {
              v171 = (float32x4_t *)(_X20[5].i64[0] + i * 16);
              v172 = a7[i].i8;
              v41 = *v171;
              v173 = v171[2];
              v172[1] = v171[1];
              v172[2] = v173;
              *v172 = v41;
            }
            v118 = 4;
            v73.i32[0] = v181;
            v69 = v182;
            v147 = v179;
            v143 = v180;
            v153 = v177;
            v151 = v178;
            v155 = v175;
            v154 = v176;
          }
        }
        ++v117;
      }
      while (v117 != v116);
    }
    else
    {
      v118 = 0;
    }
    v41.f32[0] = v45;
    physx::Gu::PersistentContactManifold::addBatchManifoldContacts((uint64_t)_X20, a7, v118, *(double *)v41.i64);
  }
  physx::Gu::PersistentContactManifold::addManifoldContactsToContactBuffer((uint64_t)_X20, (uint64_t)a7, &v184, v185, (uint64_t *)&v183);
  return _X20[4].i8[0] != 0;
}

uint64_t physx::Gu::pcmContactSphereBox(uint64_t a1, uint64_t a2, uint64_t a3, int32x4_t *a4, float32x2_t *a5, uint64_t a6, uint64_t a7)
{
  float32x4_t v7;
  int32x4_t v8;
  float32x4_t v9;
  float32x4_t v10;
  float32x2_t v11;
  float32x4_t v12;
  float32x4_t v13;
  float32x4_t v14;
  int32x2_t v15;
  float32x4_t v16;
  float32x2_t v17;
  float32x2_t v18;
  int8x8_t v19;
  float32x4_t v20;
  float32x4_t v21;
  float32x4_t v22;
  float32x4_t v23;
  float32x4_t v24;
  float32x4_t v25;
  float32x2_t v26;
  float32x4_t v27;
  float32x4_t v28;
  float32x4_t v29;
  float32x2_t v30;
  unsigned __int8 v31;
  int16x8_t v32;
  unint64_t v33;
  float32x4_t v34;
  float32x2_t v35;
  int v36;
  float32x2_t v37;
  int v38;
  float32x4_t v39;
  float32x4_t v40;
  float32x4_t v41;
  float32x2_t v42;
  int8x8_t v43;
  float32x4_t v44;
  float32x4_t v45;
  float32x4_t v46;
  float32x4_t v47;
  float32x4_t v48;
  float32x4_t v49;
  float32x4_t v50;
  float32x4_t v51;
  float32x4_t v52;
  float32x4_t v53;
  int8x16_t v54;
  float32x4_t v55;
  int8x8_t v56;
  int8x8_t v57;
  int8x8_t v58;
  float32x4_t v59;
  float32x4_t v60;
  int16x8_t v61;
  int32x4_t v62;
  int16x8_t v63;
  int16x4_t v64;
  float32x4_t v65;
  float32x4_t v66;
  float32x2_t v67;
  int8x8_t v68;
  float32x4_t v69;
  float32x4_t v70;
  float32x4_t v71;
  float32x4_t v72;
  float32x4_t v73;
  uint64_t v74;
  uint64_t v75;

  v7.i64[0] = *(_QWORD *)(a3 + 16);
  v7.i64[1] = *(unsigned int *)(a3 + 24);
  v8 = *a4;
  v9.i64[0] = a4[1].i64[0];
  v9.i64[1] = a4[1].u32[2];
  v10 = *(float32x4_t *)(a2 + 4);
  v10.i64[1] = *(unsigned int *)(a2 + 12);
  v11 = *(float32x2_t *)(a1 + 4);
  v12 = *(float32x4_t *)a4;
  v12.i32[3] = 0;
  v13 = (float32x4_t)vdupq_laneq_s32(*a4, 3);
  v14 = vsubq_f32(v7, v9);
  v15 = (int32x2_t)vmla_f32((float32x2_t)0xBF000000BF000000, *(float32x2_t *)v13.f32, *(float32x2_t *)v13.f32);
  v16 = vmulq_n_f32(v14, *(float *)v15.i32);
  v16.i32[3] = 0;
  v17 = (float32x2_t)vextq_s8((int8x16_t)v12, (int8x16_t)v12, 8uLL).u64[0];
  v18 = (float32x2_t)vext_s8(*(int8x8_t *)a4->i8, (int8x8_t)v17, 4uLL);
  v19 = (int8x8_t)vmls_f32(vmul_f32(*(float32x2_t *)a4->i8, (float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v14, (int8x16_t)v14, 4uLL)), v18, *(float32x2_t *)v14.f32);
  *(int8x8_t *)v20.f32 = vext_s8(v19, (int8x8_t)vmls_f32(vmul_f32(v17, *(float32x2_t *)v14.f32), *(float32x2_t *)a4->i8, (float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v14, (int8x16_t)v14, 8uLL)), 4uLL);
  v20.i64[1] = v19.u32[0];
  v21 = vmlsq_laneq_f32(v16, v20, *(float32x4_t *)a4, 3);
  v21.i64[1] = vextq_s8((int8x16_t)v21, (int8x16_t)v21, 8uLL).u32[0];
  v22 = vmulq_f32(v12, v14);
  v22.i64[0] = vpaddq_f32(v22, v22).u64[0];
  v23 = vmlaq_n_f32(v21, v12, vpadd_f32(*(float32x2_t *)v22.f32, *(float32x2_t *)v22.f32).f32[0]);
  v24 = vaddq_f32(v23, v23);
  v24.i32[3] = 0;
  v25 = vnegq_f32(v10);
  v25.i32[3] = 0;
  *(float32x2_t *)v23.f32 = vadd_f32(v11, *a5);
  v26 = (float32x2_t)vdup_lane_s32((int32x2_t)vmul_f32(*(float32x2_t *)v23.f32, *(float32x2_t *)v23.f32), 0);
  v27 = vmaxq_f32(vminq_f32(v24, v10), v25);
  v28 = vsubq_f32(v24, v27);
  v29 = vmulq_f32(v28, v28);
  v29.i64[0] = vpaddq_f32(v29, v29).u64[0];
  v30 = vpadd_f32(*(float32x2_t *)v29.f32, *(float32x2_t *)v29.f32);
  v31 = vcgt_f32(v26, v30).u8[0];
  if ((v31 & 1) != 0)
  {
    v32 = (int16x8_t)vcgeq_f32(v10, vabsq_f32(v24));
    v33 = vextq_s8((int8x16_t)v32, (int8x16_t)v32, 8uLL).u64[0];
    *(int16x4_t *)v32.i8 = vmovn_s32((int32x4_t)v32);
    v32.i64[1] = v33;
    if (vuzp1_s8((int8x8_t)vdup_lane_s16((int16x4_t)vceq_s32((int32x2_t)(*(_QWORD *)&vmovn_s16(v32) & 0xFFFFFF00FFFFFFLL), (int32x2_t)0xFFFFFF00FFFFFFLL), 0), (int8x8_t)v11).u32[0] == -1)
    {
      v55 = vsubq_f32(v10, vabsq_f32(v27));
      v56 = (int8x8_t)vdup_lane_s32(*(int32x2_t *)v55.f32, 0);
      v57 = (int8x8_t)vdup_lane_s32(*(int32x2_t *)v55.f32, 1);
      v58 = (int8x8_t)vdup_laneq_s32((int32x4_t)v55, 2);
      *(int8x8_t *)v59.f32 = v56;
      v59.i64[1] = v56.u32[0];
      *(int8x8_t *)v60.f32 = v58;
      v60.i64[1] = v58.u32[0];
      v61 = (int16x8_t)vcgeq_f32(v55, v60);
      v60.i64[0] = vextq_s8((int8x16_t)v61, (int8x16_t)v61, 8uLL).u64[0];
      *(int16x4_t *)v61.i8 = vmovn_s32((int32x4_t)v61);
      v61.i64[1] = v60.i64[0];
      v62 = vdupq_lane_s32(vceq_s32((int32x2_t)(*(_QWORD *)&vmovn_s16(v61) & 0xFFFFFF00FFFFFFLL), (int32x2_t)0xFFFFFF00FFFFFFLL), 0);
      v63 = (int16x8_t)vcgeq_f32(v55, v59);
      v59.i64[0] = vextq_s8((int8x16_t)v63, (int8x16_t)v63, 8uLL).u64[0];
      *(int16x4_t *)v63.i8 = vmovn_s32((int32x4_t)v63);
      v63.i64[1] = v59.i64[0];
      v64 = (int16x4_t)vceq_s32((int32x2_t)(*(_QWORD *)&vmovn_s16(v63) & 0xFFFFFF00FFFFFFLL), (int32x2_t)0xFFFFFF00FFFFFFLL);
      v65 = vmulq_f32((float32x4_t)vbslq_s8((int8x16_t)vcgezq_f32(v27), (int8x16_t)xmmword_2260EDC60, (int8x16_t)xmmword_226168830), (float32x4_t)vbslq_s8((int8x16_t)vcltzq_s32(vshlq_n_s32(v62, 0x1FuLL)), (int8x16_t)xmmword_2260E5F40, vbslq_s8((int8x16_t)vcltzq_s32(vshlq_n_s32((int32x4_t)vmovl_u16((uint16x4_t)vdup_lane_s16(v64, 0)), 0x1FuLL)), (int8x16_t)xmmword_2260E5F10, (int8x16_t)xmmword_2260E5F20)));
      v66 = vmulq_n_f32(v65, *(float *)v15.i32);
      v66.i32[3] = 0;
      v67 = (float32x2_t)vbsl_s8(*(int8x8_t *)v62.i8, v58, vbsl_s8((int8x8_t)vdup_lane_s32((int32x2_t)v64, 0), v56, v57));
      v68 = (int8x8_t)vmls_f32(vmul_f32(*(float32x2_t *)v8.i8, (float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v65, (int8x16_t)v65, 4uLL)), v18, *(float32x2_t *)v65.f32);
      *(int8x8_t *)v69.f32 = vext_s8(v68, (int8x8_t)vmls_f32(vmul_f32(v17, *(float32x2_t *)v65.f32), *(float32x2_t *)v8.i8, (float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v65, (int8x16_t)v65, 8uLL)), 4uLL);
      v69.i64[1] = v68.u32[0];
      v70 = vmlaq_f32(v66, v13, v69);
      v70.i64[1] = vextq_s8((int8x16_t)v70, (int8x16_t)v70, 8uLL).u32[0];
      v37 = vneg_f32(v67);
      v71 = vmulq_f32(v12, v65);
      v71.i64[0] = vpaddq_f32(v71, v71).u64[0];
      v72 = vmlaq_n_f32(v70, v12, vpadd_f32(*(float32x2_t *)v71.f32, *(float32x2_t *)v71.f32).f32[0]);
      v47 = vaddq_f32(v72, v72);
      v47.i32[3] = 0;
      v73 = vmulq_n_f32(v47, v37.f32[0]);
      v73.i32[3] = 0;
      v54 = (int8x16_t)vsubq_f32(v7, v73);
    }
    else
    {
      v34 = (float32x4_t)vdupq_lane_s32(v15, 0);
      v35 = vrsqrte_f32(v30);
      v36 = 4;
      do
      {
        v35 = vmul_f32(v35, vrsqrts_f32(vmul_f32(v35, v35), v30));
        --v36;
      }
      while (v36);
      v37 = vrecpe_f32(v35);
      v38 = 4;
      do
      {
        v37 = vmul_f32(v37, vrecps_f32(v35, v37));
        --v38;
      }
      while (v38);
      v39 = vmulq_n_f32(v28, v35.f32[0]);
      v40 = v39;
      v40.i32[3] = 0;
      v41 = vmulq_n_f32(v40, *(float *)v15.i32);
      v41.i32[3] = 0;
      v42 = (float32x2_t)vextq_s8((int8x16_t)v40, (int8x16_t)v40, 8uLL).u64[0];
      v43 = (int8x8_t)vmls_f32(vmul_f32(*(float32x2_t *)v8.i8, (float32x2_t)vext_s8(*(int8x8_t *)v39.f32, (int8x8_t)v42, 4uLL)), v18, *(float32x2_t *)v39.f32);
      *(int8x8_t *)v39.f32 = vext_s8(v43, (int8x8_t)vmls_f32(vmul_f32(v17, *(float32x2_t *)v39.f32), *(float32x2_t *)v8.i8, v42), 4uLL);
      v39.i64[1] = v43.u32[0];
      v44 = vmlaq_f32(v41, v13, v39);
      v44.i64[1] = vextq_s8((int8x16_t)v44, (int8x16_t)v44, 8uLL).u32[0];
      v45 = vmulq_f32(v12, v40);
      v45.i64[0] = vpaddq_f32(v45, v45).u64[0];
      v46 = vmlaq_n_f32(v44, v12, vpadd_f32(*(float32x2_t *)v45.f32, *(float32x2_t *)v45.f32).f32[0]);
      v47 = vaddq_f32(v46, v46);
      v47.i32[3] = 0;
      v48 = vmulq_f32(v34, v27);
      v48.i32[3] = 0;
      *(float32x2_t *)v40.f32 = vmls_f32(vmul_f32(*(float32x2_t *)v8.i8, (float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v27, (int8x16_t)v27, 4uLL)), v18, *(float32x2_t *)v27.f32);
      *(int8x8_t *)v49.f32 = vext_s8(*(int8x8_t *)v40.f32, (int8x8_t)vmls_f32(vmul_f32(v17, *(float32x2_t *)v27.f32), *(float32x2_t *)v8.i8, (float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v27, (int8x16_t)v27, 8uLL)), 4uLL);
      v49.i64[1] = v40.u32[0];
      v50 = vmlaq_f32(v48, v13, v49);
      v50.i64[1] = vextq_s8((int8x16_t)v50, (int8x16_t)v50, 8uLL).u32[0];
      v51 = vmulq_f32(v12, v27);
      v51.i64[0] = vpaddq_f32(v51, v51).u64[0];
      v52 = vmlaq_n_f32(v50, v12, vpadd_f32(*(float32x2_t *)v51.f32, *(float32x2_t *)v51.f32).f32[0]);
      v52.i64[1] = vextq_s8((int8x16_t)v52, (int8x16_t)v52, 8uLL).u32[0];
      v53.i64[0] = 0x4000000040000000;
      v53.i64[1] = 0x4000000040000000;
      v54 = (int8x16_t)vmlaq_f32(v9, v53, v52);
      v54.i64[1] = vextq_s8(v54, v54, 8uLL).u32[0];
    }
    v74 = *(unsigned int *)(a7 + 4096);
    *(_DWORD *)(a7 + 4096) = v74 + 1;
    v75 = a7 + (v74 << 6);
    *(float32x4_t *)v75 = v47;
    *(int8x16_t *)(v75 + 16) = v54;
    *(_DWORD *)(v75 + 12) = vsub_f32(v37, v11).u32[0];
    *(_DWORD *)(v75 + 52) = -1;
  }
  return v31 & 1;
}

uint64_t physx::Gu::pcmContactSphereCapsule(uint64_t a1, uint64_t a2, uint64_t a3, float32x4_t *a4, float32x2_t *a5, uint64_t a6, uint64_t a7)
{
  float32x4_t v7;
  float32x4_t v8;
  float32x2_t v10;
  float32x2_t v11;
  float32x4_t v12;
  float32x4_t v13;
  float32x4_t v14;
  float32x4_t v19;
  float32x4_t v20;
  float32x4_t v21;
  float32x4_t v22;
  float32x4_t v23;
  int8x16_t v24;
  float32x2_t v25;
  float32x4_t v26;
  float32x2_t v27;
  float32x2_t v28;
  int v29;
  float32x2_t v30;
  float32x2_t v31;
  float32x2_t v32;
  float32x2_t v34;
  int8x16_t v35;
  float32x2_t v36;
  unsigned __int8 v37;
  float32x4_t v38;
  float32x4_t v39;
  float32x4_t v40;
  float32x2_t v41;
  float32x2_t v42;
  int v43;
  float32x2_t v44;
  float32x2_t v45;
  int v46;
  int8x16_t v47;
  float32x4_t v48;
  int8x16_t v49;
  uint64_t v50;
  float32x2_t v51;
  int v52;
  uint64_t v53;
  uint64_t v54;

  v7.i64[0] = *(_QWORD *)(a3 + 16);
  v7.i64[1] = *(unsigned int *)(a3 + 24);
  v8.i64[0] = a4[1].i64[0];
  v8.i64[1] = a4[1].u32[2];
  _Q3 = *(int8x16_t *)a4;
  v10 = *(float32x2_t *)(a1 + 4);
  v11 = (float32x2_t)vextq_s8(_Q3, _Q3, 8uLL).u64[0];
  v12 = vmulq_n_f32(*a4, vadd_f32(*(float32x2_t *)_Q3.i8, *(float32x2_t *)_Q3.i8).f32[0]);
  v12.i32[3] = 0;
  *(int8x8_t *)v13.f32 = vext_s8((int8x8_t)vdup_laneq_s32(*(int32x4_t *)a4, 3), (int8x8_t)v11, 4uLL);
  v13.i64[1] = vneg_f32((float32x2_t)vdup_lane_s32(*(int32x2_t *)a4->f32, 1)).u32[0];
  v14 = vmlaq_n_f32(v12, v13, *(float *)vdup_lane_s32((int32x2_t)vadd_f32(v11, v11), 1).i32);
  __asm { FMOV            V3.2S, #-1.0 }
  v14.i32[0] = vadd_f32(*(float32x2_t *)v14.f32, *(float32x2_t *)_Q3.i8).u32[0];
  v19 = vmulq_n_f32(v14, COERCE_FLOAT(*(_QWORD *)(a2 + 8)));
  v19.i32[3] = 0;
  v20 = vaddq_f32(v8, v19);
  v21 = vsubq_f32(v8, v19);
  v22 = vsubq_f32(v7, v20);
  v23 = vsubq_f32(v21, v20);
  v24 = (int8x16_t)vmulq_f32(v22, v23);
  v25 = (float32x2_t)vextq_s8(v24, v24, 8uLL).u64[0];
  v26 = vmulq_f32(v23, v23);
  v26.i64[0] = vpaddq_f32(v26, v26).u64[0];
  v27 = vpadd_f32(*(float32x2_t *)v26.f32, *(float32x2_t *)v26.f32);
  v28 = vrecpe_f32(v27);
  v29 = 4;
  do
  {
    v28 = vmul_f32(v28, vrecps_f32(v27, v28));
    --v29;
  }
  while (v29);
  v30 = vadd_f32(v10, *(float32x2_t *)(a2 + 4));
  v31 = vpadd_f32(*(float32x2_t *)v24.i8, v25);
  v32 = vadd_f32(v30, *a5);
  __asm { FMOV            V3.2S, #1.0 }
  v34 = (float32x2_t)vbic_s8((int8x8_t)vmax_f32(vmin_f32(vmul_f32(v28, vpadd_f32(v31, v31)), _D3), 0), (int8x8_t)vceqz_f32(v27));
  v35 = (int8x16_t)vmlsq_lane_f32(v22, v23, v34, 0);
  v31.i32[0] = vextq_s8(v35, v35, 8uLL).u32[0];
  *(float32x2_t *)v35.i8 = vpadd_f32(vmul_f32(*(float32x2_t *)v35.i8, *(float32x2_t *)v35.i8), vmul_f32((float32x2_t)v31.u32[0], (float32x2_t)v31.u32[0]));
  v36 = vpadd_f32(*(float32x2_t *)v35.i8, *(float32x2_t *)v35.i8);
  v37 = vcgt_f32((float32x2_t)vdup_lane_s32((int32x2_t)vmul_f32(v32, v32), 0), v36).u8[0];
  if ((v37 & 1) != 0)
  {
    v38 = vmlaq_f32(v20, (float32x4_t)vdupq_lane_s32((int32x2_t)v34, 0), v23);
    v38.i64[1] = vextq_s8((int8x16_t)v38, (int8x16_t)v38, 8uLL).u32[0];
    v39 = vsubq_f32(v7, v38);
    v40 = vmulq_f32(v39, v39);
    v40.i64[0] = vpaddq_f32(v40, v40).u64[0];
    v41 = vpadd_f32(*(float32x2_t *)v40.f32, *(float32x2_t *)v40.f32);
    v42 = vrsqrte_f32(v41);
    v43 = 4;
    do
    {
      v42 = vmul_f32(v42, vrsqrts_f32(vmul_f32(v42, v42), v41));
      --v43;
    }
    while (v43);
    v44 = vmul_f32(v41, (float32x2_t)vbsl_s8((int8x8_t)vdup_lane_s32(vceqz_f32(v41), 0), (int8x8_t)_D3, (int8x8_t)v42));
    v45 = vrecpe_f32(v44);
    v46 = 4;
    do
    {
      v45 = vmul_f32(v45, vrecps_f32(v44, v45));
      --v46;
    }
    while (v46);
    v47 = (int8x16_t)vmulq_n_f32(v39, v45.f32[0]);
    v47.i32[3] = 0;
    v48 = (float32x4_t)vbslq_s8((int8x16_t)vcltzq_s32(vshlq_n_s32(vdupq_lane_s32(vcgtz_f32(v44), 0), 0x1FuLL)), v47, (int8x16_t)xmmword_2260E5F10);
    v49 = (int8x16_t)vmlsq_lane_f32(v7, v48, v10, 0);
    v50 = vextq_s8(v49, v49, 8uLL).u32[0];
    v51 = vrsqrte_f32(v36);
    v52 = 4;
    do
    {
      v51 = vmul_f32(v51, vrsqrts_f32(vmul_f32(v51, v51), v36));
      --v52;
    }
    while (v52);
    v49.i64[1] = v50;
    v53 = *(unsigned int *)(a7 + 4096);
    *(_DWORD *)(a7 + 4096) = v53 + 1;
    v54 = a7 + (v53 << 6);
    *(float32x4_t *)v54 = v48;
    *(int8x16_t *)(v54 + 16) = v49;
    *(_DWORD *)(v54 + 12) = vsub_f32(vmul_f32(v36, (float32x2_t)vbsl_s8((int8x8_t)vceqz_f32(v36), (int8x8_t)_D3, (int8x8_t)v51)), v30).u32[0];
    *(_DWORD *)(v54 + 52) = -1;
  }
  return v37 & 1;
}

uint64_t physx::Gu::PCMMeshContactGenerationCallback<physx::PCMConvexVsMeshContactGenerationCallback>::processHit(uint64_t a1, uint64_t a2, uint64_t a3, float *a4, uint64_t a5, double a6, float32x4_t a7, float32x4_t a8, uint64_t a9, _DWORD *a10)
{
  double v16;
  __int128 v17;
  __n128 v18;
  float32x2_t v19;
  double v20;
  __n128 v21;
  uint64_t v22;
  uint64_t v23;
  float v24;
  float v25;
  float v26;
  float v27;
  float v28;
  float v29;
  float v30;
  float v31;
  BOOL v32;
  uint64_t v33;
  float32x2_t *v34;
  float v35;
  float v36;
  float v37;
  float32x2_t v38;
  float32x2_t v39;
  float32x2_t v40;
  uint64_t v41;
  uint64_t v42;
  char v43;
  float32x2_t v45;
  int v46;
  float v47;
  __int128 v48;
  uint64_t v49;

  v49 = *MEMORY[0x24BDAC8D0];
  if (physx::Gu::intersectTriangleBox(*(float32x4_t **)(a1 + 5472), (float *)a3, a4, (float *)a5, a6, a7, a8))
  {
    if (*(_BYTE *)(a1 + 32))
    {
      v16 = *(double *)a3;
      v45 = *(float32x2_t *)a3;
      LODWORD(v16) = *(_DWORD *)(a3 + 8);
      v47 = *a4;
      *(_QWORD *)&v17 = *(_QWORD *)(a4 + 1);
      v18.n128_u64[0] = *(_QWORD *)a5;
      *((_QWORD *)&v17 + 1) = *(_QWORD *)a5;
      v48 = v17;
      LODWORD(v17) = *(_DWORD *)(a5 + 8);
      v22 = 2;
    }
    else
    {
      v23 = *(_QWORD *)(a1 + 16);
      v24 = *(float *)(v23 + 8);
      v25 = *(float *)a3;
      v26 = *(float *)(a3 + 4);
      v27 = *(float *)(v23 + 20);
      v21.n128_u32[0] = *(_DWORD *)(a3 + 8);
      v28 = *(float *)(v23 + 32);
      *(float *)&v16 = (float)((float)(*(float *)a3 * v24) + (float)(v26 * v27)) + (float)(v21.n128_f32[0] * v28);
      v29 = *a4;
      v30 = a4[1];
      v31 = a4[2];
      v32 = *(_BYTE *)(v23 + 72) == 0;
      v33 = 24;
      if (!*(_BYTE *)(v23 + 72))
        v33 = 12;
      v34 = (float32x2_t *)((char *)&v45 + v33);
      *(float *)((char *)&v45 + v33 + 8) = (float)((float)(v24 * *a4) + (float)(v27 * v30)) + (float)(v28 * v31);
      v35 = *(float *)a5;
      v36 = *(float *)(a5 + 4);
      v37 = (float)(v24 * *(float *)a5) + (float)(v27 * v36);
      LODWORD(v20) = *(_DWORD *)(a5 + 8);
      *(float *)&v17 = v37 + (float)(v28 * *(float *)&v20);
      v22 = 1;
      if (v32)
        v22 = 2;
      v38 = *(float32x2_t *)v23;
      v39 = *(float32x2_t *)(v23 + 12);
      v40 = *(float32x2_t *)(v23 + 24);
      v45 = vadd_f32(vadd_f32(vmul_n_f32(*(float32x2_t *)v23, v25), vmul_n_f32(v39, v26)), vmul_n_f32(v40, v21.n128_f32[0]));
      *v34 = vadd_f32(vadd_f32(vmul_n_f32(v38, v29), vmul_n_f32(v39, v30)), vmul_n_f32(v40, v31));
      v19 = vmul_n_f32(v40, *(float *)&v20);
      v18.n128_u64[0] = (unint64_t)vadd_f32(vadd_f32(vmul_n_f32(v38, v35), vmul_n_f32(v39, v36)), v19);
      *(unint64_t *)((char *)&v45 + 12 * v22) = v18.n128_u64[0];
    }
    v46 = LODWORD(v16);
    *((_DWORD *)&v45 + 3 * v22 + 2) = v17;
    v41 = *(unsigned int *)(a2 + 16);
    v42 = *(_QWORD *)(a1 + 24);
    if (v42)
      v43 = *(_BYTE *)(v42 + v41);
    else
      v43 = 56;
    if (*(_DWORD *)(a1 + 884) == 16)
    {
      physx::Gu::PCMMeshContactGeneration::processTriangleCache<16u,physx::Gu::PCMConvexVsMeshContactGeneration>(a1 + 896, a1 + 36, v16, *(double *)&v17, v18, *(double *)&v19, v20, v21);
      *(_DWORD *)(a1 + 884) = 0;
    }
    physx::Gu::TriangleCache<16u>::addTriangle(a1 + 36, (uint64_t)&v45, a10, v41, v43);
  }
  return 1;
}

void physx::PCMConvexVsMeshContactGenerationCallback::~PCMConvexVsMeshContactGenerationCallback(physx::PCMConvexVsMeshContactGenerationCallback *this)
{
  JUMPOUT(0x2276933B8);
}

double physx::Gu::pcmContactSphereConvex(uint64_t a1, uint64_t a2, float32x4_t *a3, int32x4_t *a4, uint64_t a5, float32x4_t **a6, uint64_t a7)
{
  float32x2_t v7;
  float32x4_t *v9;
  float32x4_t v16;
  float32x4_t v17;
  float32x4_t v18;
  float32x4_t v19;
  float32x4_t v20;
  float32x4_t v21;
  float32x4_t v22;
  float32x2_t v23;
  float32x4_t v24;
  float32x4_t v25;
  float32x2_t v26;
  float32x2_t v27;
  int8x8_t v28;
  float32x4_t v29;
  float32x4_t v30;
  float32x4_t v31;
  float32x4_t v32;
  float32x4_t v33;
  float32x4_t v34;
  int8x16_t v36;
  float32x4_t v37;
  float32x4_t v38;
  float32x4_t v39;
  int32x4_t v41;
  uint64_t v42;
  float32x2_t v43;
  float32x2_t v44;
  float32x2_t v45;
  float32x4_t v46;
  float32x2_t v47;
  float32x2_t v48;
  float32x2_t v49;
  float32x2_t v50;
  float32x2_t v51;
  float32x2_t v52;
  float32x2_t v53;
  float32x2_t v54;
  float32x2_t v55;
  float32x2_t v56;
  float32x2_t v57;
  float32x4_t v58;
  float32x4_t v59;
  float32x4_t v60;
  float32x2_t v61;
  float32x2_t v62;
  unsigned int v63;
  uint64_t v64;
  uint64_t v65;
  float32x4_t *v66;
  float32x4_t v67;
  float32x4_t v68;
  float32x4_t v69;
  float32x4_t v70;
  float32x4_t v71;
  float32x4_t v72;
  float32x4_t v73;
  float32x4_t v74;
  float32x2_t v75;
  float32x4_t v76;
  float32x4_t v77;
  float32x4_t v78;
  unsigned __int8 v79;
  float32x4_t *v80;
  float32x4_t v81;
  float32x4_t v82;
  int v83;
  float32x2_t v84;
  int8x16_t v85;
  const float *v86;
  float32x2_t v87;
  float32x4_t v88;
  int32x4_t v89;
  float32x4_t v90;
  float32x4_t v91;
  float32x2_t v92;
  float32x4_t v93;
  float32x2_t v94;
  float32x2_t v95;
  int8x8_t v96;
  float32x4_t v97;
  float32x4_t v98;
  float32x4_t v99;
  float32x4_t v100;
  float32x4_t v101;
  int8x16_t v102;
  uint64_t v103;
  uint64_t v104;
  _BOOL4 v105;
  float32x4_t v106;
  float32x4_t v107;
  float32x4_t v108;
  float32x4_t v109;
  int32x4_t v110;
  float32x4_t v111;
  float32x4_t v112;
  float32x4_t v113;
  int v114;
  float32x4_t v115;
  float32x4_t v116;
  float32x4_t v117;
  float32x4_t v118;
  float32x4_t v119;
  float32x4_t v120;
  float32x4_t v121;
  float32x2_t v122;
  float32x2_t v123;
  float32x2_t v124;
  float32x4_t v125;
  float32x2_t v126;
  float32x2_t v127;
  float32x2_t v128;
  float32x2_t v129;
  float32x2_t v130;
  float32x2_t v131;
  float32x2_t v132;
  float32x2_t v133;
  float32x2_t v134;
  float32x4_t v135;
  int32x2_t v136;
  int8x8_t v137;
  int8x8_t v138;
  float32x4_t v139;
  float32x4_t v140;
  float32x4_t v141;
  float32x4_t v142;
  float32x4_t v143;
  float32x4_t v144;
  float32x4_t v145;
  float32x4_t v146;
  float32x4_t v147;
  float32x4_t v148;
  float32x4_t v149;
  float32x4_t v150;
  float32x4_t v151;
  float32x4_t v152;
  float32x4_t v153;
  float32x4_t v154;
  float32x4_t v155;
  float32x4_t v156;
  float32x4_t v157;
  float32x4_t v158;
  float32x4_t v159;
  float32x4_t v160;
  float32x4_t v161;
  float32x4_t v162;
  float32x4_t v163;
  float32x4_t v164;
  float32x4_t v165;
  float32x4_t v166;
  float32x4_t v167;
  float32x4_t v168;
  float32x4_t v169;
  float32x4_t v170;
  int v171;
  float32x2_t v172;
  uint64_t (**v173)();
  int v174;
  uint64_t v175;
  float32x4_t v176;
  float32x4_t v177;
  float32x2_t v178;
  float32x4_t v179;
  float32x2_t v180;
  float32x2_t v181;
  int8x8_t v182;
  float32x4_t v183;
  float32x4_t v184;
  float32x4_t v185;
  float32x4_t v186;
  int8x16_t v187;
  uint64_t v188;
  uint64_t v189;
  float32x2_t v191;
  uint64_t (**v192)();
  float32x4_t *v193;
  float32x4_t v194;
  _QWORD v195[2];
  int32x4_t v196[2];
  float32x4_t v197;
  float32x4_t v198;
  int32x2_t v199;
  __int128 v200;
  __int128 v201;
  int8x16_t v202[2];
  uint64_t v203;
  float32x4_t v204;
  __int32 v205;
  __int32 v206;
  __int32 v207;
  int v208;
  char v209;
  float32x4_t v210;
  float32x4_t v211;
  uint64_t v212;
  float32x4_t v213;
  float32x2_t v214;
  float v215;
  int v216;
  char v217;
  __int128 v218;
  __int128 v219;
  __int128 v220;
  __int128 v221;
  __int128 v222;
  __int128 v223;
  uint64_t v224;
  uint64_t v225;
  uint64_t v226;
  char v227;
  uint64_t v228;

  v228 = *MEMORY[0x24BDAC8D0];
  v9 = *a6;
  _X8 = *(_QWORD *)(a2 + 48);
  __asm { PRFM            #0, [X8] }
  v16 = *(float32x4_t *)(a2 + 4);
  v17 = v16;
  v17.i32[3] = 0;
  v7.i32[0] = *(_DWORD *)(a1 + 4);
  *(int32x2_t *)v18.f32 = vdup_lane_s32((int32x2_t)v7, 0);
  v199 = vdup_lane_s32(*(int32x2_t *)a5, 0);
  v19.i64[0] = a3[1].i64[0];
  v19.i64[1] = a3[1].u32[2];
  v197 = *a3;
  v198 = v19;
  v20.i64[0] = a4[1].i64[0];
  v20.i64[1] = a4[1].u32[2];
  v196[0] = *a4;
  v196[1] = (int32x4_t)v20;
  v21 = vnegq_f32((float32x4_t)v196[0]);
  v22 = v21;
  v22.i32[3] = 0;
  v23 = (float32x2_t)vdupq_laneq_s32(v196[0], 3).u64[0];
  v24 = vsubq_f32(v19, v20);
  v25 = vmulq_n_f32(v24, vmla_f32((float32x2_t)0xBF000000BF000000, v23, v23).f32[0]);
  v25.i32[3] = 0;
  v26 = (float32x2_t)vextq_s8((int8x16_t)v22, (int8x16_t)v22, 8uLL).u64[0];
  v27 = (float32x2_t)vext_s8(*(int8x8_t *)v21.f32, (int8x8_t)v26, 4uLL);
  v28 = (int8x8_t)vmls_f32(vmul_f32(*(float32x2_t *)v21.f32, (float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v24, (int8x16_t)v24, 4uLL)), v27, *(float32x2_t *)v24.f32);
  *(int8x8_t *)v29.f32 = vext_s8(v28, (int8x8_t)vmls_f32(vmul_f32(v26, *(float32x2_t *)v24.f32), *(float32x2_t *)v21.f32, (float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v24, (int8x16_t)v24, 8uLL)), 4uLL);
  v29.i64[1] = v28.u32[0];
  v30 = vmlaq_laneq_f32(v25, v29, (float32x4_t)v196[0], 3);
  v30.i64[1] = vextq_s8((int8x16_t)v30, (int8x16_t)v30, 8uLL).u32[0];
  v31 = vmulq_f32(v22, v24);
  v31.i64[0] = vpaddq_f32(v31, v31).u64[0];
  v32 = vmlaq_n_f32(v30, v22, vpadd_f32(*(float32x2_t *)v31.f32, *(float32x2_t *)v31.f32).f32[0]);
  v33 = vaddq_f32(v32, v32);
  v33.i32[3] = 0;
  v34 = v197;
  v34.i32[3] = 0;
  v36 = vextq_s8((int8x16_t)v197, (int8x16_t)v197, 8uLL);
  _Q18 = vmulq_f32(v34, v22);
  _Q18.i64[0] = vpaddq_f32(_Q18, _Q18).u64[0];
  *(float32x2_t *)v36.i8 = vsub_f32(vmul_f32(*(float32x2_t *)v36.i8, (float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v196[0], (int8x16_t)v196[0], 8uLL)), vpadd_f32(*(float32x2_t *)_Q18.f32, *(float32x2_t *)_Q18.f32));
  v37 = vmulq_laneq_f32(v34, (float32x4_t)v196[0], 3);
  _Q18.i64[0] = vextq_s8((int8x16_t)v34, (int8x16_t)v34, 8uLL).u64[0];
  *(float32x2_t *)v34.f32 = vmls_f32(vmul_f32((float32x2_t)vext_s8(*(int8x8_t *)v197.f32, *(int8x8_t *)_Q18.f32, 4uLL), *(float32x2_t *)v21.f32), v27, *(float32x2_t *)v197.f32);
  *(int8x8_t *)v38.f32 = vext_s8(*(int8x8_t *)v34.f32, (int8x8_t)vmls_f32(vmul_f32(*(float32x2_t *)v197.f32, v26), *(float32x2_t *)v21.f32, *(float32x2_t *)_Q18.f32), 4uLL);
  v38.i64[1] = v34.i64[0];
  v39 = vaddq_f32(vaddq_f32(vmulq_laneq_f32(v22, v197, 3), v37), v38);
  __asm { FMOV            V5.2S, #1.0 }
  v21.i64[0] = *(_QWORD *)(_X8 + 60);
  v21.i64[1] = *(unsigned int *)(_X8 + 68);
  v41 = (int32x4_t)vmulq_f32(v17, v21);
  *(int32x2_t *)v22.f32 = vdup_laneq_s32(v41, 2);
  *(float32x2_t *)v41.i8 = vpmin_f32(*(float32x2_t *)v22.f32, *(float32x2_t *)v41.i8);
  v22.f32[0] = *(float *)(a5 + 8) * 0.05;
  __asm { FMOV            V18.2S, #0.25 }
  v42 = v9[4].u8[0];
  v43 = vmin_f32(vmin_f32(vmul_f32(vpmin_f32(*(float32x2_t *)v41.i8, *(float32x2_t *)v41.i8), *(float32x2_t *)_Q18.f32), (float32x2_t)vdup_lane_s32(*(int32x2_t *)v22.f32, 0)), *(float32x2_t *)v18.f32);
  if (v9[4].i8[0])
  {
    v44 = (float32x2_t)vdup_lane_s32(*(int32x2_t *)v39.f32, 1);
    v45 = (float32x2_t)vdup_laneq_s32((int32x4_t)v39, 2);
    v46 = vaddq_f32(v39, v39);
    v47 = (float32x2_t)vdup_lane_s32(*(int32x2_t *)v46.f32, 1);
    v48 = (float32x2_t)vdup_laneq_s32((int32x4_t)v46, 2);
    v49 = (float32x2_t)vdup_lane_s32((int32x2_t)vmul_f32(*(float32x2_t *)v39.f32, *(float32x2_t *)v46.f32), 0);
    v50 = vmul_lane_f32(v44, *(float32x2_t *)v46.f32, 1);
    v51 = vmul_laneq_f32(v45, v46, 2);
    v52 = vmul_n_f32(v44, v46.f32[0]);
    v53 = vmul_n_f32(v45, v46.f32[0]);
    v54 = vmul_lane_f32((float32x2_t)vdup_lane_s32(*(int32x2_t *)v46.f32, 0), *(float32x2_t *)v36.i8, 1);
    *(float32x2_t *)v46.f32 = vmul_lane_f32(v45, *(float32x2_t *)v46.f32, 1);
    v55 = vmul_lane_f32(v47, *(float32x2_t *)v36.i8, 1);
    v56 = vmul_lane_f32(v48, *(float32x2_t *)v36.i8, 1);
    v57 = vsub_f32(_D5, v49);
    *(int8x8_t *)v58.f32 = vext_s8((int8x8_t)vsub_f32(vsub_f32(_D5, v50), v51), (int8x8_t)vadd_f32(v52, v56), 4uLL);
    *(float32x2_t *)&v58.u32[2] = vsub_f32(v53, v55);
    *(int8x8_t *)v59.f32 = vext_s8((int8x8_t)vsub_f32(v52, v56), (int8x8_t)vsub_f32(v57, v51), 4uLL);
    *(float32x2_t *)&v59.u32[2] = vadd_f32(*(float32x2_t *)v46.f32, v54);
    *(int8x8_t *)v60.f32 = vext_s8((int8x8_t)vadd_f32(v53, v55), (int8x8_t)vsub_f32(*(float32x2_t *)v46.f32, v54), 4uLL);
    *(float32x2_t *)&v60.u32[2] = vsub_f32(v57, v50);
    v61 = vmul_f32(v43, (float32x2_t)vdup_n_s32(0x3D4CCCCDu));
    v62 = vmul_f32(v61, v61);
    v63 = v42 - 1;
    do
    {
      v64 = v9[5].i64[0];
      v65 = v63;
      v66 = (float32x4_t *)(v64 + 48 * v63);
      v67 = v66[1];
      v68 = vmulq_n_f32(v58, COERCE_FLOAT(*v66));
      v68.i32[3] = 0;
      v69 = vmulq_lane_f32(v59, *(float32x2_t *)v66->f32, 1);
      v69.i32[3] = 0;
      v70 = vmulq_laneq_f32(v60, *v66, 2);
      v70.i32[3] = 0;
      v71 = vaddq_f32(v33, vaddq_f32(v70, vaddq_f32(v68, v69)));
      v72 = v66[2];
      v73 = v72;
      v73.i32[3] = 0;
      v74 = vmulq_f32(v73, vsubq_f32(v71, v67));
      v74.i64[0] = vpaddq_f32(v74, v74).u64[0];
      v75 = vpadd_f32(*(float32x2_t *)v74.f32, *(float32x2_t *)v74.f32);
      v76 = vmlsq_lane_f32(v71, v73, v75, 0);
      v76.i64[1] = vextq_s8((int8x16_t)v76, (int8x16_t)v76, 8uLL).u32[0];
      v77 = vsubq_f32(v67, v76);
      v78 = vmulq_f32(v77, v77);
      v78.i64[0] = vpaddq_f32(v78, v78).u64[0];
      if (vuzp1_s8((int8x8_t)vdup_lane_s16((int16x4_t)vcgt_f32(vpadd_f32(*(float32x2_t *)v78.f32, *(float32x2_t *)v78.f32), v62), 0), *(int8x8_t *)v18.f32).u32[0] == -1)
      {
        v79 = v9[4].i8[0] - 1;
        v9[4].i8[0] = v79;
        v80 = (float32x4_t *)(v64 + 48 * v79);
        v81 = *v80;
        v82 = v80[2];
        v66[1] = v80[1];
        v66[2] = v82;
        *v66 = v81;
      }
      else
      {
        v72.i32[3] = v75.i32[1];
        v66[2] = v72;
      }
      --v63;
    }
    while (v65);
    v83 = v9[4].u8[0];
  }
  else
  {
    v83 = 0;
  }
  v39.i32[3] = v36.i32[1];
  if (v83 != (_DWORD)v42)
    goto LABEL_13;
  v84 = vmul_n_f32(v43, physx::Gu::invalidateThresholds2[v42]);
  v85 = (int8x16_t)vabdq_f32(v33, v9[1]);
  *(float32x2_t *)v85.i8 = vpmax_f32((float32x2_t)*(_OWORD *)&vextq_s8(v85, v85, 8uLL), *(float32x2_t *)v85.i8);
  v86 = (const float *)((char *)&physx::Gu::invalidateQuatThresholds2 + 4 * v42);
  v87 = vld1_dup_f32(v86);
  v88 = vmulq_f32(v39, *v9);
  v88.i64[0] = vpaddq_f32(v88, v88).u64[0];
  *(int8x8_t *)v36.i8 = vuzp1_s8((int8x8_t)vdup_lane_s16((int16x4_t)vorr_s8((int8x8_t)vcgt_f32(v87, vpadd_f32(*(float32x2_t *)v88.f32, *(float32x2_t *)v88.f32)), (int8x8_t)vcgt_f32(vpmax_f32(*(float32x2_t *)v85.i8, *(float32x2_t *)v85.i8), v84)), 0), *(int8x8_t *)v18.f32);
  if (v36.i32[0] == -1)
  {
LABEL_13:
    v105 = 0;
    *v9 = v39;
    v9[1] = v33;
    if (*(float *)(a2 + 4) == 1.0 && *(float *)(a2 + 8) == 1.0)
      v105 = *(float *)(a2 + 12) == 1.0;
    v106 = *(float32x4_t *)(a2 + 16);
    v36.i32[0] = *(_DWORD *)(_X8 + 24);
    v107 = (float32x4_t)v36;
    v107.i32[1] = *(_DWORD *)(_X8 + 28);
    v108 = v107;
    v108.i32[2] = *(_DWORD *)(_X8 + 32);
    v216 = 0;
    v217 = 0;
    v213 = v108;
    v224 = _X8;
    v226 = *(_QWORD *)(_X8 + 40) + 20 * *(unsigned __int8 *)(_X8 + 39);
    v227 = *(_BYTE *)(_X8 + 38);
    v109.i64[0] = *(_QWORD *)(_X8 + 60);
    v109.i64[1] = *(unsigned int *)(_X8 + 68);
    v110 = (int32x4_t)vmulq_f32(v17, v109);
    *(float32x2_t *)v110.i8 = vpmin_f32((float32x2_t)vdup_laneq_s32(v110, 2), *(float32x2_t *)v110.i8);
    *(float *)v110.i32 = vpmin_f32(*(float32x2_t *)v110.i8, *(float32x2_t *)v110.i8).f32[0];
    v214 = vmul_n_f32((float32x2_t)0x3D4CCCCD3DCCCCCDLL, *(float *)v110.i32);
    v215 = 0.025 * *(float *)v110.i32;
    if (v105)
    {
      v111.i64[0] = 1065353216;
      v112 = (float32x4_t)xmmword_2260E5F20;
      v218 = xmmword_2260E5F10;
      v219 = xmmword_2260E5F20;
      v220 = xmmword_2260E5F40;
      v221 = xmmword_2260E5F10;
      v222 = xmmword_2260E5F20;
      v223 = xmmword_2260E5F40;
    }
    else
    {
      v113 = vrecpeq_f32(v17);
      v114 = 4;
      do
      {
        v113 = vmulq_f32(v113, vrecpsq_f32(v113, v17));
        --v114;
      }
      while (v114);
      *(int32x2_t *)v115.f32 = vdup_lane_s32(*(int32x2_t *)v16.f32, 0);
      v115.i64[1] = v115.u32[0];
      if ((~vuzp1_s8((int8x8_t)vmovn_s32(vceqq_f32(v115, v17)), *(int8x8_t *)v18.f32).u32[0] & 0xFFFFFF) != 0)
      {
        v122 = (float32x2_t)vdup_lane_s32(*(int32x2_t *)v106.f32, 1);
        v123 = (float32x2_t)vdup_laneq_s32((int32x4_t)v106, 2);
        v124 = (float32x2_t)vdup_laneq_s32((int32x4_t)v106, 3);
        v125 = vaddq_f32(v106, v106);
        v126 = vmul_lane_f32(v122, *(float32x2_t *)v125.f32, 1);
        v127 = vmul_laneq_f32(v123, v125, 2);
        v128 = vmul_n_f32(v122, v125.f32[0]);
        v129 = vmul_n_f32(v123, v125.f32[0]);
        v130 = vmul_n_f32(v124, v125.f32[0]);
        v131 = vmul_lane_f32(v123, *(float32x2_t *)v125.f32, 1);
        v132 = vmul_lane_f32(v124, *(float32x2_t *)v125.f32, 1);
        v133 = vmul_laneq_f32(v124, v125, 2);
        v134 = vsub_f32(_D5, (float32x2_t)vdup_lane_s32((int32x2_t)vmul_f32(*(float32x2_t *)v106.f32, *(float32x2_t *)v125.f32), 0));
        *(int8x8_t *)v135.f32 = vext_s8((int8x8_t)vsub_f32(vsub_f32(_D5, v126), v127), (int8x8_t)vadd_f32(v128, v133), 4uLL);
        v135.i64[1] = vsub_f32(v129, v132).u32[0];
        v136 = (int32x2_t)vext_s8((int8x8_t)vsub_f32(v128, v133), (int8x8_t)vsub_f32(v134, v127), 4uLL);
        v137 = (int8x8_t)vadd_f32(v129, v132);
        *(int8x8_t *)v125.f32 = vext_s8((int8x8_t)vdup_lane_s32(*(int32x2_t *)v135.f32, 0), (int8x8_t)v136, 4uLL);
        v138 = (int8x8_t)vdup_lane_s32(v136, 1);
        *(int32x2_t *)v139.f32 = v136;
        v139.i64[1] = vadd_f32(v131, v130).u32[0];
        *(int8x8_t *)v140.f32 = vext_s8(v137, (int8x8_t)vsub_f32(v131, v130), 4uLL);
        *(int8x8_t *)v141.f32 = vext_s8(*(int8x8_t *)v135.f32, v138, 4uLL);
        v140.i64[1] = vsub_f32(v134, v126).u32[0];
        v125.i64[1] = vdup_lane_s32(*(int32x2_t *)v140.f32, 0).u32[0];
        v141.i64[1] = vdup_lane_s32(*(int32x2_t *)v140.f32, 1).u32[0];
        *(int8x8_t *)v142.f32 = vext_s8((int8x8_t)vdup_lane_s32((int32x2_t)v135.u32[2], 0), *(int8x8_t *)&v139.u32[2], 4uLL);
        v142.i64[1] = vdup_lane_s32(*(int32x2_t *)&v140.u32[2], 0).u32[0];
        v143 = vmulq_n_f32(v125, v16.f32[0]);
        v143.i32[3] = 0;
        v144 = vmulq_lane_f32(v141, *(float32x2_t *)v16.f32, 1);
        v144.i32[3] = 0;
        v145 = vmulq_laneq_f32(v142, v16, 2);
        v145.i32[3] = 0;
        v146 = vmulq_n_f32(v143, v135.f32[0]);
        v146.i32[3] = 0;
        v147 = vmulq_lane_f32(v144, *(float32x2_t *)v135.f32, 1);
        v147.i32[3] = 0;
        v148 = vmulq_laneq_f32(v145, v135, 2);
        v148.i32[3] = 0;
        v116 = vaddq_f32(v148, vaddq_f32(v146, v147));
        v149 = vmulq_n_f32(v143, v139.f32[0]);
        v149.i32[3] = 0;
        v150 = vmulq_lane_f32(v144, *(float32x2_t *)v139.f32, 1);
        v150.i32[3] = 0;
        v151 = vmulq_laneq_f32(v145, v139, 2);
        v151.i32[3] = 0;
        v152 = vaddq_f32(v149, v150);
        v153 = vmulq_n_f32(v143, v140.f32[0]);
        v153.i32[3] = 0;
        v154 = vmulq_lane_f32(v144, *(float32x2_t *)v140.f32, 1);
        v154.i32[3] = 0;
        v155 = vmulq_laneq_f32(v145, v140, 2);
        v155.i32[3] = 0;
        v117 = vaddq_f32(v151, v152);
        v118 = vaddq_f32(v155, vaddq_f32(v153, v154));
        v218 = (__int128)v116;
        v219 = (__int128)v117;
        v220 = (__int128)v118;
        v156 = vmulq_n_f32(v125, v113.f32[0]);
        v156.i32[3] = 0;
        v157 = vmulq_lane_f32(v141, *(float32x2_t *)v113.f32, 1);
        v157.i32[3] = 0;
        v158 = vmulq_laneq_f32(v142, v113, 2);
        v158.i32[3] = 0;
        v159 = vmulq_n_f32(v156, v135.f32[0]);
        v159.i32[3] = 0;
        v160 = vmulq_lane_f32(v157, *(float32x2_t *)v135.f32, 1);
        v160.i32[3] = 0;
        v161 = vmulq_laneq_f32(v158, v135, 2);
        v161.i32[3] = 0;
        v119 = vaddq_f32(v161, vaddq_f32(v159, v160));
        v162 = vmulq_n_f32(v156, v139.f32[0]);
        v162.i32[3] = 0;
        v163 = vmulq_lane_f32(v157, *(float32x2_t *)v139.f32, 1);
        v163.i32[3] = 0;
        v164 = vmulq_laneq_f32(v158, v139, 2);
        v164.i32[3] = 0;
        v165 = vmulq_n_f32(v156, v140.f32[0]);
        v165.i32[3] = 0;
        v166 = vmulq_lane_f32(v157, *(float32x2_t *)v140.f32, 1);
        v166.i32[3] = 0;
        v120 = vaddq_f32(v164, vaddq_f32(v162, v163));
        v167 = vmulq_laneq_f32(v158, v140, 2);
        v167.i32[3] = 0;
        v121 = vaddq_f32(v167, vaddq_f32(v165, v166));
      }
      else
      {
        v113.i32[3] = 0;
        v116 = vmulq_f32(v17, (float32x4_t)xmmword_2260E5F10);
        v117 = vmulq_f32(v17, (float32x4_t)xmmword_2260E5F20);
        v118 = vmulq_f32(v17, (float32x4_t)xmmword_2260E5F40);
        v218 = (__int128)v116;
        v219 = (__int128)v117;
        v220 = (__int128)v118;
        v119 = vmulq_f32(v113, (float32x4_t)xmmword_2260E5F10);
        v120 = vmulq_f32(v113, (float32x4_t)xmmword_2260E5F20);
        v121 = vmulq_f32(v113, (float32x4_t)xmmword_2260E5F40);
      }
      v222 = (__int128)v120;
      v223 = (__int128)v121;
      v168 = vmulq_n_f32(v116, *(float *)v36.i32);
      v168.i32[3] = 0;
      v112 = vmulq_lane_f32(v117, *(float32x2_t *)v107.f32, 1);
      v112.i32[3] = 0;
      v169 = vmulq_laneq_f32(v118, v108, 2);
      v169.i32[3] = 0;
      v111 = vaddq_f32(v112, v168);
      v108 = vaddq_f32(v169, v111);
      v221 = (__int128)v119;
      v213 = v108;
    }
    v225 = *(_QWORD *)(_X8 + 48);
    v208 = 4;
    v204 = v33;
    v212 = v18.i64[0];
    v210 = v33;
    v211 = v33;
    v205 = v7.i32[0];
    v206 = v7.i32[0];
    v191 = v7;
    v207 = v7.i32[0];
    v209 = 1;
    v203 = 0;
    v200 = 0u;
    v201 = 0u;
    v202[0] = 0u;
    v170 = vsubq_f32(v33, v108);
    v195[0] = off_24ED91108;
    v195[1] = &v204;
    v194 = v170;
    if (v105)
    {
      v192 = off_24ED925A0;
      v193 = &v213;
      v171 = physx::Gu::gjkPenetration<physx::Gu::LocalConvex<physx::Gu::CapsuleV>,physx::Gu::LocalConvex<physx::Gu::ConvexHullNoScaleV>>((uint64_t)v195, (uint64_t)&v192, &v194, (uint64_t *)&v199, 1, &v9[4].i8[3], &v9[4].i8[7], &v9[4].i8[2], *(double *)v170.i64, *(double *)v33.i64, *(int8x8_t *)v111.f32, v112, (uint64_t)&v200);
    }
    else
    {
      v192 = off_24ED91168;
      v193 = &v213;
      v171 = physx::Gu::gjkPenetration<physx::Gu::LocalConvex<physx::Gu::CapsuleV>,physx::Gu::LocalConvex<physx::Gu::ConvexHullV>>((uint64_t)v195, (uint64_t)&v192, &v194, (uint64_t *)&v199, 1, &v9[4].i8[3], &v9[4].i8[7], &v9[4].i8[2], *(double *)v170.i64, *(double *)v33.i64, *(int8x8_t *)v111.f32, v112, (uint64_t)&v200);
    }
    v172 = v191;
    switch(v171)
    {
      case 2:
        goto LABEL_33;
      case 4:
        goto LABEL_34;
      case 5:
        if (v105)
          v173 = off_24ED925A0;
        else
          v173 = off_24ED91168;
        v192 = v173;
        v193 = &v213;
        v174 = physx::Gu::epaPenetration((uint64_t)v195);
        v172 = v191;
        if (v174 == 5)
        {
LABEL_33:
          v175 = v9[5].i64[0];
          *(_QWORD *)v175 = 0;
          *(_QWORD *)(v175 + 8) = 0;
          *(_OWORD *)(v175 + 16) = v201;
          v176 = (float32x4_t)v202[0];
          v176.i32[3] = HIDWORD(v203);
          *(float32x4_t *)(v175 + 32) = v176;
          v177 = (float32x4_t)v196[0];
          v177.i32[3] = 0;
          v178 = (float32x2_t)vdupq_laneq_s32(v196[0], 3).u64[0];
          v179 = vmulq_n_f32((float32x4_t)v202[0], vmla_f32((float32x2_t)0xBF000000BF000000, v178, v178).f32[0]);
          v179.i32[3] = 0;
          v180 = (float32x2_t)vextq_s8((int8x16_t)v177, (int8x16_t)v177, 8uLL).u64[0];
          v181 = (float32x2_t)vextq_s8(v202[0], v202[0], 8uLL).u64[0];
          v182 = (int8x8_t)vmls_f32(vmul_f32(*(float32x2_t *)v196[0].i8, (float32x2_t)vext_s8(*(int8x8_t *)v202[0].i8, (int8x8_t)v181, 4uLL)), (float32x2_t)vext_s8(*(int8x8_t *)v196[0].i8, (int8x8_t)v180, 4uLL), *(float32x2_t *)v202[0].i8);
          *(int8x8_t *)v183.f32 = vext_s8(v182, (int8x8_t)vmls_f32(vmul_f32(v180, *(float32x2_t *)v202[0].i8), *(float32x2_t *)v196[0].i8, v181), 4uLL);
          v183.i64[1] = v182.u32[0];
          v184 = vmlaq_laneq_f32(v179, v183, (float32x4_t)v196[0], 3);
          v184.i64[1] = vextq_s8((int8x16_t)v184, (int8x16_t)v184, 8uLL).u32[0];
          v185 = vmulq_f32(v177, (float32x4_t)v202[0]);
          v185.i64[0] = vpaddq_f32(v185, v185).u64[0];
          v186 = vmlaq_n_f32(v184, v177, vpadd_f32(*(float32x2_t *)v185.f32, *(float32x2_t *)v185.f32).f32[0]);
          v18 = vaddq_f32(v186, v186);
          v18.i32[3] = 0;
          v187 = (int8x16_t)vmlsq_lane_f32(v198, v18, v172, 0);
          v187.i64[1] = vextq_s8(v187, v187, 8uLL).u32[0];
          v9[4].i8[0] = 1;
          v177.i32[0] = v203;
          v188 = *(unsigned int *)(a7 + 4096);
          *(_DWORD *)(a7 + 4096) = v188 + 1;
          v189 = a7 + (v188 << 6);
          *(float32x4_t *)v189 = v18;
          *(int8x16_t *)(v189 + 16) = v187;
          v18.f32[0] = v177.f32[0] - v172.f32[0];
          *(float *)(v189 + 12) = v177.f32[0] - v172.f32[0];
          *(_DWORD *)(v189 + 52) = -1;
        }
        else
        {
LABEL_34:
          v18.i64[0] = physx::Gu::fullContactsGenerationSphereConvex(&v204, &v213, &v197, v196, a7, a7, v105, (uint64_t)v9, (float32x4_t *)v202, (float32x2_t *)&v199).u64[0];
        }
        break;
      default:
        return *(double *)v18.i64;
    }
  }
  else if ((_DWORD)v42)
  {
    v89 = *(int32x4_t *)(v9[5].i64[0] + 32);
    v90 = (float32x4_t)v89;
    v90.i32[3] = 0;
    v91 = (float32x4_t)v196[0];
    v91.i32[3] = 0;
    v92 = (float32x2_t)vdupq_laneq_s32(v196[0], 3).u64[0];
    v93 = vmulq_n_f32(v90, vmla_f32((float32x2_t)0xBF000000BF000000, v92, v92).f32[0]);
    v93.i32[3] = 0;
    v94 = (float32x2_t)vextq_s8((int8x16_t)v91, (int8x16_t)v91, 8uLL).u64[0];
    v95 = (float32x2_t)vextq_s8((int8x16_t)v90, (int8x16_t)v90, 8uLL).u64[0];
    v96 = (int8x8_t)vmls_f32(vmul_f32(*(float32x2_t *)v196[0].i8, (float32x2_t)vext_s8(*(int8x8_t *)v89.i8, (int8x8_t)v95, 4uLL)), (float32x2_t)vext_s8(*(int8x8_t *)v196[0].i8, (int8x8_t)v94, 4uLL), *(float32x2_t *)v89.i8);
    *(int8x8_t *)v97.f32 = vext_s8(v96, (int8x8_t)vmls_f32(vmul_f32(*(float32x2_t *)v89.i8, v94), *(float32x2_t *)v196[0].i8, v95), 4uLL);
    v97.i64[1] = v96.u32[0];
    v98 = vmlaq_laneq_f32(v93, v97, (float32x4_t)v196[0], 3);
    v98.i64[1] = vextq_s8((int8x16_t)v98, (int8x16_t)v98, 8uLL).u32[0];
    v99 = vmulq_f32(v90, v91);
    v99.i64[0] = vpaddq_f32(v99, v99).u64[0];
    v100 = vmlaq_n_f32(v98, v91, vpadd_f32(*(float32x2_t *)v99.f32, *(float32x2_t *)v99.f32).f32[0]);
    v101 = vaddq_f32(v100, v100);
    v101.i32[3] = 0;
    v102 = (int8x16_t)vmlsq_lane_f32(v19, v101, v7, 0);
    v102.i64[1] = vextq_s8(v102, v102, 8uLL).u32[0];
    *(float32x2_t *)v18.f32 = vsub_f32((float32x2_t)vdup_laneq_s32(v89, 3), *(float32x2_t *)v18.f32);
    v103 = *(unsigned int *)(a7 + 4096);
    *(_DWORD *)(a7 + 4096) = v103 + 1;
    v104 = a7 + (v103 << 6);
    *(float32x4_t *)v104 = v101;
    *(int8x16_t *)(v104 + 16) = v102;
    *(_DWORD *)(v104 + 12) = v18.i32[0];
    *(_DWORD *)(v104 + 52) = -1;
  }
  return *(double *)v18.i64;
}

float32x4_t physx::Gu::fullContactsGenerationSphereConvex(float32x4_t *a1, float32x4_t *a2, float32x4_t *a3, int32x4_t *a4, uint64_t a5, uint64_t a6, int a7, uint64_t a8, float32x4_t *a9, float32x2_t *a10)
{
  uint64_t (**v17)();
  int v18;
  float32x4_t result;
  _OWORD *v20;
  float32x4_t v21;
  float32x2_t v22;
  float32x4_t v23;
  float32x2_t v24;
  float32x2_t v25;
  int8x8_t v26;
  float32x4_t v27;
  float32x4_t v28;
  float32x4_t v29;
  float32x4_t v30;
  int8x16_t v31;
  uint64_t v32;
  uint64_t v33;
  int v35;
  _BYTE v36[104];
  _QWORD v37[7];
  char v38;
  float32x4_t *v39;
  uint64_t v40;

  v40 = *MEMORY[0x24BDAC8D0];
  physx::Gu::getPCMConvexData(a2, a7, (uint64_t)v36);
  v37[4] = a4;
  v37[5] = a2 + 3;
  v37[6] = a2 + 6;
  v17 = &off_24ED91090;
  v38 = a7;
  if (a7)
    v17 = &off_24ED91040;
  v37[0] = v17;
  v39 = a2;
  v35 = 0;
  v18 = physx::Gu::generateSphereFullContactManifold(a1, (uint64_t)v36, (uint64_t)v37, a5, &v35, a10, a9, 1);
  if (!v35)
    v18 = 0;
  if (v18 == 1)
  {
    v20 = *(_OWORD **)(a8 + 80);
    *v20 = *(_OWORD *)a5;
    v20[1] = *(_OWORD *)(a5 + 16);
    v20[2] = *(_OWORD *)(a5 + 32);
    *(_BYTE *)(a8 + 64) = 1;
    v21 = *(float32x4_t *)a4;
    v21.i32[3] = 0;
    v22 = (float32x2_t)vdupq_laneq_s32(*a4, 3).u64[0];
    v23 = vmulq_n_f32(*a9, vmla_f32((float32x2_t)0xBF000000BF000000, v22, v22).f32[0]);
    v23.i32[3] = 0;
    v24 = (float32x2_t)vextq_s8((int8x16_t)v21, (int8x16_t)v21, 8uLL).u64[0];
    v25 = (float32x2_t)vextq_s8(*(int8x16_t *)a9, *(int8x16_t *)a9, 8uLL).u64[0];
    v26 = (int8x8_t)vmls_f32(vmul_f32(*(float32x2_t *)a4->i8, (float32x2_t)vext_s8(*(int8x8_t *)a9->f32, (int8x8_t)v25, 4uLL)), (float32x2_t)vext_s8(*(int8x8_t *)a4->i8, (int8x8_t)v24, 4uLL), *(float32x2_t *)a9->f32);
    *(int8x8_t *)v27.f32 = vext_s8(v26, (int8x8_t)vmls_f32(vmul_f32(v24, *(float32x2_t *)a9->f32), *(float32x2_t *)a4->i8, v25), 4uLL);
    v27.i64[1] = v26.u32[0];
    v28 = vmlaq_laneq_f32(v23, v27, *(float32x4_t *)a4, 3);
    v28.i64[1] = vextq_s8((int8x16_t)v28, (int8x16_t)v28, 8uLL).u32[0];
    v29 = vmulq_f32(v21, *a9);
    v29.i64[0] = vpaddq_f32(v29, v29).u64[0];
    v30 = vmlaq_n_f32(v28, v21, vpadd_f32(*(float32x2_t *)v29.f32, *(float32x2_t *)v29.f32).f32[0]);
    result = vaddq_f32(v30, v30);
    result.i32[3] = 0;
    v21.i64[0] = a1[5].i64[0];
    v31 = (int8x16_t)vmlsq_lane_f32(a3[1], result, *(float32x2_t *)v21.f32, 0);
    v31.i64[1] = vextq_s8(v31, v31, 8uLL).u32[0];
    v21.i32[0] = vsub_f32((float32x2_t)vdup_laneq_s32(*(int32x4_t *)(a5 + 32), 3), *(float32x2_t *)v21.f32).u32[0];
    v32 = *(unsigned int *)(a6 + 4096);
    *(_DWORD *)(a6 + 4096) = v32 + 1;
    v33 = a6 + (v32 << 6);
    *(float32x4_t *)v33 = result;
    *(int8x16_t *)(v33 + 16) = v31;
    *(_DWORD *)(v33 + 12) = v21.i32[0];
    *(_DWORD *)(v33 + 52) = -1;
  }
  return result;
}

BOOL physx::Gu::pcmContactSphereHeightField(uint64_t a1)
{
  uint64_t v1;
  float32x2_t *v2;
  float32x4_t *v3;
  float32x4_t *v4;
  int32x2_t *v5;
  uint64_t v6;
  uint64_t v7;
  float32x4_t **v8;
  float32x4_t *v9;
  float32x4_t v10;
  float32x4_t v11;
  float32x4_t v12;
  float32x4_t v13;
  int32x2_t v14;
  float32x2_t v15;
  float32x4_t v16;
  float32x4_t v17;
  float32x4_t v18;
  float32x2_t v19;
  float32x4_t v20;
  float32x2_t v21;
  float32x2_t v22;
  int8x8_t v23;
  float32x4_t v24;
  float32x4_t v25;
  float32x4_t v26;
  float32x4_t v27;
  float32x4_t v28;
  float32x4_t v29;
  float32x2_t v30;
  float32x4_t v31;
  float32x4_t v32;
  float32x4_t v33;
  float32x4_t v34;
  int8x16_t v35;
  float32x4_t v36;
  float32x2_t v41;
  float32x2_t v42;
  float32x4_t v43;
  float32x2_t v44;
  float32x2_t v45;
  float32x2_t v46;
  float32x2_t v47;
  float32x2_t v48;
  float32x2_t v49;
  float32x2_t v50;
  float32x2_t v51;
  float32x2_t v52;
  float32x2_t v53;
  float32x2_t v54;
  float32x4_t v55;
  __int128 v56;
  unsigned int v57;
  unsigned int v58;
  __int8 *v59;
  uint64_t v60;
  unsigned int v61;
  unsigned __int32 v66;
  unsigned __int8 v67;
  char *v68;
  __int8 v69;
  float *v71;
  float v72;
  float v73;
  float v74;
  float v75;
  float v76;
  float v77;
  float v78;
  float v79;
  float v80;
  float v81;
  float v82;
  float v83;
  unsigned int v84;
  unsigned int v85;
  unsigned int v86;
  __int128 v87;
  float32x2_t v88;
  uint64_t v89;
  unsigned int v90;
  uint64_t v91;
  int v92;
  unsigned int v93;
  uint64_t v94;
  char *v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t *v98;
  int v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t i;
  float32x4_t *v104;
  int v105;
  uint64_t v106;
  uint64_t v107;
  float32x4_t *v108;
  float32x4_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v114;
  unint64_t v115;
  unint64_t v116;
  unsigned int v117;
  unsigned int v118;
  unint64_t v119;
  float32x4_t v120;
  float32x4_t v121;
  __int128 *v122;
  __int128 v123;
  __int128 v124;
  __int128 v125;
  uint64_t v126;
  unsigned int v127;
  __int128 v128;
  float v129[6];
  int32x2_t v130;
  float v131;
  float32x2_t v132;
  float32x2_t *v133;
  float32x2_t v134;
  float32x4_t v135[2];
  float32x4_t v136[2];
  float32x2_t v137;
  float32x2_t v138;
  __int16 v139;
  float32x4_t v140;
  __int128 v141;
  _OWORD v142[128];
  uint64_t v143[38];
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  __int128 v148;
  float32x2_t v149;
  float32x2_t v150;
  _BYTE v151[1032];
  _BYTE *v152;
  uint64_t v153;
  float32x2_t v154[544];
  char v155;
  float32x2_t *v156;
  uint64_t v157;
  uint64_t v158;

  MEMORY[0x24BDAC7A8](a1);
  v7 = v6;
  v158 = *MEMORY[0x24BDAC8D0];
  v9 = *v8;
  v10 = *v3;
  v11.i64[0] = v3[1].i64[0];
  v11.i64[1] = v3[1].u32[2];
  v12.i64[0] = v4[1].i64[0];
  v12.i64[1] = v4[1].u32[2];
  v13 = *v4;
  v14 = *(int32x2_t *)(v1 + 4);
  v15 = (float32x2_t)vdup_lane_s32(v14, 0);
  v137 = (float32x2_t)vdup_lane_s32(*v5, 0);
  v138 = v15;
  v136[0] = v10;
  v136[1] = v11;
  v16 = vnegq_f32(v13);
  v17 = vsubq_f32(v11, v12);
  v18 = v16;
  v18.i32[3] = 0;
  v19 = (float32x2_t)vdupq_laneq_s32((int32x4_t)v13, 3).u64[0];
  v20 = vmulq_n_f32(v17, vmla_f32((float32x2_t)0xBF000000BF000000, v19, v19).f32[0]);
  v20.i32[3] = 0;
  v135[0] = v13;
  v135[1] = v12;
  v21 = (float32x2_t)vextq_s8((int8x16_t)v18, (int8x16_t)v18, 8uLL).u64[0];
  v22 = (float32x2_t)vext_s8(*(int8x8_t *)v16.f32, (int8x8_t)v21, 4uLL);
  v23 = (int8x8_t)vmls_f32(vmul_f32(*(float32x2_t *)v16.f32, (float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v17, (int8x16_t)v17, 4uLL)), v22, *(float32x2_t *)v17.f32);
  *(int8x8_t *)v12.f32 = vext_s8(v23, (int8x8_t)vmls_f32(vmul_f32(v21, *(float32x2_t *)v17.f32), *(float32x2_t *)v16.f32, (float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v17, (int8x16_t)v17, 8uLL)), 4uLL);
  v12.i64[1] = v23.u32[0];
  v24 = vmlaq_laneq_f32(v20, v12, v13, 3);
  v24.i64[1] = vextq_s8((int8x16_t)v24, (int8x16_t)v24, 8uLL).u32[0];
  v25 = vmulq_f32(v18, v17);
  v25.i64[0] = vpaddq_f32(v25, v25).u64[0];
  v26 = vmlaq_n_f32(v24, v18, vpadd_f32(*(float32x2_t *)v25.f32, *(float32x2_t *)v25.f32).f32[0]);
  v27 = vaddq_f32(v26, v26);
  v27.i32[3] = 0;
  v28 = v10;
  v28.i32[3] = 0;
  v29 = vmulq_f32(v28, v18);
  v29.i64[0] = vpaddq_f32(v29, v29).u64[0];
  v30 = vsub_f32(vmul_f32((float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v10, (int8x16_t)v10, 8uLL), (float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v13, (int8x16_t)v13, 8uLL)), vpadd_f32(*(float32x2_t *)v29.f32, *(float32x2_t *)v29.f32));
  v31 = vmulq_laneq_f32(v18, v10, 3);
  v32 = vmulq_laneq_f32(v28, v13, 3);
  v28.i64[0] = vextq_s8((int8x16_t)v28, (int8x16_t)v28, 8uLL).u64[0];
  *(float32x2_t *)v29.f32 = vmls_f32(vmul_f32((float32x2_t)vext_s8(*(int8x8_t *)v10.f32, *(int8x8_t *)v28.f32, 4uLL), *(float32x2_t *)v16.f32), v22, *(float32x2_t *)v10.f32);
  *(int8x8_t *)v10.f32 = vext_s8(*(int8x8_t *)v29.f32, (int8x8_t)vmls_f32(vmul_f32(*(float32x2_t *)v10.f32, v21), *(float32x2_t *)v16.f32, *(float32x2_t *)v28.f32), 4uLL);
  v10.i64[1] = v29.i64[0];
  v33 = vaddq_f32(vaddq_f32(v31, v32), v10);
  v34 = v33;
  v34.i32[3] = v30.i32[1];
  v35 = (int8x16_t)vabdq_f32(v27, v9[1]);
  *(float32x2_t *)v35.i8 = vpmax_f32((float32x2_t)*(_OWORD *)&vextq_s8(v35, v35, 8uLL), *(float32x2_t *)v35.i8);
  v36 = vmulq_f32(v34, *v9);
  v36.i64[0] = vpaddq_f32(v36, v36).u64[0];
  __asm { FMOV            V3.2S, #1.0 }
  if (vuzp1_s8((int8x8_t)vdup_lane_s16((int16x4_t)vorr_s8((int8x8_t)vcgt_f32((float32x2_t)vdup_n_s32(0x3F7FF2E5u), vpadd_f32(*(float32x2_t *)v36.f32, *(float32x2_t *)v36.f32)), (int8x8_t)vcgt_f32(vpmax_f32(*(float32x2_t *)v35.i8, *(float32x2_t *)v35.i8), vmul_n_f32((float32x2_t)vdup_n_s32(0x3CA3D70Au), *(float *)v14.i32))), 0), (int8x8_t)v14).u32[0] == -1)
  {
    v71 = (float *)v4;
    v9[3].i8[14] = 0;
    *v9 = v34;
    v9[1] = v27;
    v134 = vmul_n_f32((float32x2_t)vdup_n_s32(0x3A83126Fu), *(float *)v14.i32);
    v132 = v2[1];
    v133 = v2;
    v72 = v2[3].f32[0];
    v130 = vrev64_s32((int32x2_t)vdiv_f32(_D3, v2[2]));
    v131 = 1.0 / v72;
    v73 = v3[1].f32[0] - v4[1].f32[0];
    v74 = v3[1].f32[1] - v4[1].f32[1];
    v75 = v3[1].f32[2] - v4[1].f32[2];
    v76 = v73 + v73;
    v77 = v74 + v74;
    v78 = v75 + v75;
    v80 = v4->f32[2];
    v79 = v4->f32[3];
    v81 = (float)(v79 * v79) + -0.5;
    v82 = v4->f32[1];
    v83 = (float)((float)(v77 * v82) + (float)(v4->f32[0] * v76)) + (float)(v80 * v78);
    *(float *)&v84 = (float)((float)(v76 * v81) - (float)((float)((float)(v82 * v78) - (float)(v80 * v77)) * v79))
                   + (float)(v4->f32[0] * v83);
    *(float *)&v85 = (float)((float)(v77 * v81) - (float)((float)((float)(v80 * v76) - (float)(v4->f32[0] * v78)) * v79))
                   + (float)(v82 * v83);
    *(float *)&v86 = (float)((float)(v78 * v81) - (float)((float)((float)(v4->f32[0] * v77) - (float)(v82 * v76)) * v79))
                   + (float)(v80 * v83);
    *(_QWORD *)&v87 = __PAIR64__(v85, v84);
    *((_QWORD *)&v87 + 1) = v86;
    v128 = v87;
    *(float *)&v87 = *(float *)(v1 + 4) + *(float *)v5->i32;
    v129[0] = *(float *)&v84 - *(float *)&v87;
    v129[1] = *(float *)&v85 - *(float *)&v87;
    v129[2] = *(float *)&v86 - *(float *)&v87;
    v129[3] = *(float *)&v87 + *(float *)&v84;
    v129[4] = *(float *)&v87 + *(float *)&v85;
    v129[5] = *(float *)&v87 + *(float *)&v86;
    v157 = 0x44000000000;
    v155 = 1;
    v156 = v154;
    v140.i64[1] = (uint64_t)&v130;
    *(_QWORD *)&v141 = v4;
    (*(void (**)(__int16 *__return_ptr, float32x2_t))(**(_QWORD **)&v132 + 104))(&v139, v132);
    BYTE8(v141) = (v139 & 1) == 0;
    v140.i64[0] = (uint64_t)off_24ED92830;
    physx::Gu::PCMMeshContactGeneration::PCMMeshContactGeneration((unint64_t)v142, &v137, &v134, v136, v135, (uint64_t)v9, v7, (uint64_t)v154, 0);
    v148 = v128;
    v149 = v15;
    v153 = 0x4000000000;
    v151[1024] = 1;
    v152 = v151;
    v88 = vadd_f32(v15, v137);
    v150 = vmul_f32(v88, v88);
    physx::Gu::HeightFieldUtil::overlapAABBTriangles((uint64_t)&v130, v71, v129, 0, (uint64_t)&v140);
    physx::Gu::PCMSphereVsMeshContactGeneration::generateLastContacts((physx::Gu::PCMSphereVsMeshContactGeneration *)v142);
    v90 = v147;
    if ((_DWORD)v147)
    {
      v91 = HIDWORD(v147);
      if (HIDWORD(v147) >= 2)
      {
        v92 = 0;
        v93 = -1;
        v94 = 1;
        do
        {
          v95 = (char *)v142 + 8 * v94;
          v96 = *((_QWORD *)v95 + 255);
          v97 = *((_QWORD *)v95 + 256);
          if (COERCE_FLOAT(*(_QWORD *)(v96 + 40)) > COERCE_FLOAT(*(_QWORD *)(v97 + 40)))
          {
            *((_QWORD *)v95 + 255) = v97;
            *((_QWORD *)v95 + 256) = v96;
            if ((int)v94 - 2 >= 0)
            {
              v98 = &v143[v93 + 1];
              v99 = v92;
              do
              {
                v101 = *(v98 - 1);
                v100 = *v98;
                if (COERCE_FLOAT(*(_QWORD *)(*v98 + 40)) >= COERCE_FLOAT(*(_QWORD *)(v101 + 40)))
                  break;
                *v98 = v101;
                *--v98 = v100;
                --v99;
              }
              while (v99 > 0);
            }
          }
          ++v94;
          ++v93;
          ++v92;
        }
        while (v94 != v91);
      }
      if ((_DWORD)v91)
      {
        v102 = 0;
        for (i = 0; i != v91; ++i)
        {
          v104 = (float32x4_t *)v143[i];
          v104[1].i64[1] = (uint64_t)v104;
          v104[2].i64[0] = (uint64_t)v104;
          v105 = v104[3].i32[1] - v104[3].i32[0];
          v104[3].i32[2] = v105;
          v104[1].i64[0] = 0;
          v106 = v102;
          while (v106)
          {
            v107 = *(_QWORD *)((char *)&v142[127] + v106 + 8);
            v108 = *(float32x4_t **)(v107 + 32);
            v109 = vmulq_f32(*v104, *v108);
            v109.i64[0] = vpaddq_f32(v109, v109).u64[0];
            v106 -= 8;
            if (vpadd_f32(*(float32x2_t *)v109.f32, *(float32x2_t *)v109.f32).f32[0] >= *(float *)&v144)
            {
              *(_QWORD *)(v107 + 16) = v104;
              v108[1].i64[1] = (uint64_t)v104;
              v104[2].i64[0] = (uint64_t)v108;
              *(_DWORD *)(*(_QWORD *)(v107 + 32) + 56) += v105;
              break;
            }
          }
          v102 += 8;
        }
        v110 = 0;
        v111 = v146;
        do
        {
          v112 = v143[v110];
          if (v112)
            _ZF = *(_QWORD *)(v112 + 32) == v112;
          else
            _ZF = 0;
          if (_ZF)
          {
            while (*(_QWORD *)(v112 + 16))
            {
              v114 = v112;
              v112 = *(_QWORD *)(v112 + 16);
              v115 = *(unsigned int *)(v114 + 48);
              v116 = *(unsigned int *)(v114 + 52);
              if (v115 < v116)
              {
                v117 = *(_DWORD *)(v112 + 52);
                do
                {
                  v118 = *(_DWORD *)(v112 + 48);
                  if (v118 < v117)
                  {
                    do
                    {
                      v119 = v111 + ((unint64_t)v118 << 6);
                      v120 = vsubq_f32(*(float32x4_t *)(v119 + 16), *(float32x4_t *)(v111 + (v115 << 6) + 16));
                      v121 = vmulq_f32(v120, v120);
                      v121.i64[0] = vpaddq_f32(v121, v121).u64[0];
                      if (*(float *)&v145 > vpadd_f32(*(float32x2_t *)v121.f32, *(float32x2_t *)v121.f32).f32[0])
                      {
                        v122 = (__int128 *)(v111 + ((unint64_t)(v117 - 1) << 6));
                        v123 = *v122;
                        v124 = v122[1];
                        v125 = v122[2];
                        *(_DWORD *)(v119 + 48) = *((_DWORD *)v122 + 12);
                        *(_OWORD *)(v119 + 16) = v124;
                        *(_OWORD *)(v119 + 32) = v125;
                        *(_OWORD *)v119 = v123;
                        v117 = *(_DWORD *)(v112 + 52) - 1;
                        *(_DWORD *)(v112 + 52) = v117;
                        --v118;
                      }
                      ++v118;
                    }
                    while (v118 < v117);
                    v116 = *(unsigned int *)(v114 + 52);
                  }
                  ++v115;
                }
                while (v115 < v116);
              }
            }
          }
          ++v110;
        }
        while (v110 != v91);
        v126 = v146;
        v90 = v147;
        v127 = HIDWORD(v147);
      }
      else
      {
        v127 = 0;
        v126 = v146;
      }
      physx::Gu::MultiplePersistentContactManifold::addManifoldContactPoints(v143[36], v126, v90, v143, v127, v89, &v144, 1);
      v147 = 0;
    }
    v140.i64[0] = (uint64_t)off_24ED92830;
    if ((v153 & 0x8000000000000000) == 0 && (v153 & 0x7FFFFFFF00000000) != 0 && v152 != v151 && v152)
      (*(void (**)(uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
    if ((v157 & 0x8000000000000000) == 0 && (v157 & 0x7FFFFFFF00000000) != 0 && v156 != v154 && v156)
      (*(void (**)(uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
  }
  else
  {
    v41 = (float32x2_t)vdup_lane_s32(*(int32x2_t *)v33.f32, 1);
    v42 = (float32x2_t)vdup_laneq_s32((int32x4_t)v33, 2);
    v43 = vaddq_f32(v33, v33);
    v44 = (float32x2_t)vdup_lane_s32(*(int32x2_t *)v43.f32, 1);
    v45 = (float32x2_t)vdup_laneq_s32((int32x4_t)v43, 2);
    v46 = vmul_lane_f32(v41, *(float32x2_t *)v43.f32, 1);
    v47 = vmul_laneq_f32(v42, v43, 2);
    v48 = vmul_n_f32(v41, v43.f32[0]);
    v49 = vmul_n_f32(v42, v43.f32[0]);
    v50 = vmul_lane_f32(v42, *(float32x2_t *)v43.f32, 1);
    v51 = (float32x2_t)vdup_lane_s32((int32x2_t)vmul_f32(*(float32x2_t *)v33.f32, *(float32x2_t *)v43.f32), 0);
    *(float32x2_t *)v43.f32 = vmul_lane_f32((float32x2_t)vdup_lane_s32(*(int32x2_t *)v43.f32, 0), v30, 1);
    v52 = vmul_lane_f32(v44, v30, 1);
    v53 = vmul_lane_f32(v45, v30, 1);
    v54 = vsub_f32(_D3, v51);
    *(int8x8_t *)v55.f32 = vext_s8((int8x8_t)vsub_f32(vsub_f32(_D3, v46), v47), (int8x8_t)vadd_f32(v48, v53), 4uLL);
    v55.i64[1] = vsub_f32(v49, v52).u32[0];
    *(int8x8_t *)&v56 = vext_s8((int8x8_t)vsub_f32(v48, v53), (int8x8_t)vsub_f32(v54, v47), 4uLL);
    *((_QWORD *)&v56 + 1) = vadd_f32(v50, *(float32x2_t *)v43.f32).u32[0];
    v140 = v55;
    v141 = v56;
    *(int8x8_t *)v55.f32 = vext_s8((int8x8_t)vadd_f32(v49, v52), (int8x8_t)vsub_f32(v50, *(float32x2_t *)v43.f32), 4uLL);
    v55.i64[1] = vsub_f32(v54, v46).u32[0];
    v142[0] = v55;
    v142[1] = v27;
    v154[0] = vmul_n_f32((float32x2_t)vdup_n_s32(0x3D4CCCCDu), *(float *)v14.i32);
    v57 = v9[3].u8[14];
    if (v9[3].i8[14])
    {
      v58 = 0;
      do
      {
        v59 = &v9[3].i8[v58 + 8];
        v60 = *v59;
        v61 = v57 - 2;
        if (v58 < v61)
          v61 = v58;
        _X8 = (uint64_t)&v9[25 * v9[3].u8[v61 + 9] + 4];
        __asm
        {
          PRFM            #0, [X8]
          PRFM            #0, [X8,#0x80]
          PRFM            #0, [X8,#0x100]
        }
        v66 = physx::Gu::SinglePersistentContactManifold::refreshContactPoints((uint64_t)&v9[25 * *v59 + 4], &v140, v154).u32[0];
        if (v9[25 * v60 + 28].i32[0])
        {
          v9[2].i32[v60] = v66;
        }
        else
        {
          v67 = v9[3].i8[14] - 1;
          v9[3].i8[14] = v67;
          v68 = (char *)v9 + v67;
          v69 = v68[56];
          v68[56] = v60;
          *v59 = v69;
          --v58;
        }
        ++v58;
        v57 = v9[3].u8[14];
      }
      while (v58 < v57);
    }
  }
  return physx::Gu::MultiplePersistentContactManifold::addManifoldContactsToContactBuffer((uint64_t)v9, v7, v136, (int32x4_t *)v135, &v138);
}

void physx::PCMSphereVsHeightfieldContactGenerationCallback::~PCMSphereVsHeightfieldContactGenerationCallback(physx::PCMSphereVsHeightfieldContactGenerationCallback *this)
{
  int v1;
  physx::PCMSphereVsHeightfieldContactGenerationCallback *v2;

  *(_QWORD *)this = off_24ED92830;
  v1 = *((_DWORD *)this + 1217);
  if ((v1 & 0x80000000) == 0 && (v1 & 0x7FFFFFFF) != 0)
  {
    v2 = (physx::PCMSphereVsHeightfieldContactGenerationCallback *)*((_QWORD *)this + 607);
    if (v2 == (physx::PCMSphereVsHeightfieldContactGenerationCallback *)((char *)this + 3824))
    {
      *((_BYTE *)this + 4848) = 0;
    }
    else if (v2)
    {
      (*(void (**)(uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
    }
  }
}

{
  int v1;
  physx::PCMSphereVsHeightfieldContactGenerationCallback *v2;

  *(_QWORD *)this = off_24ED92830;
  v1 = *((_DWORD *)this + 1217);
  if ((v1 & 0x80000000) == 0 && (v1 & 0x7FFFFFFF) != 0)
  {
    v2 = (physx::PCMSphereVsHeightfieldContactGenerationCallback *)*((_QWORD *)this + 607);
    if (v2 == (physx::PCMSphereVsHeightfieldContactGenerationCallback *)((char *)this + 3824))
    {
      *((_BYTE *)this + 4848) = 0;
    }
    else if (v2)
    {
      (*(void (**)(uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
    }
  }
  JUMPOUT(0x2276933B8);
}

BOOL physx::Gu::MultiplePersistentContactManifold::addManifoldContactsToContactBuffer(uint64_t a1, uint64_t a2, float32x4_t *a3, int32x4_t *a4, float32x2_t *a5)
{
  unsigned int v5;
  unint64_t v6;
  unint64_t v7;
  float32x4_t v13;
  unsigned int v14;
  float32x4_t *v15;
  unint64_t v16;
  float32x4_t v17;
  unint64_t v18;
  float32x4_t *v19;
  float32x4_t v20;
  float32x4_t v21;
  float32x4_t v22;
  float32x2_t v23;
  float32x4_t v24;
  float32x2_t v25;
  float32x2_t v26;
  int8x8_t v27;
  float32x4_t v28;
  float32x4_t v29;
  float32x4_t v30;
  float32x4_t v31;
  float32x4_t v32;
  float32x4_t v33;
  float32x2_t v34;
  float32x2_t v35;
  int v36;
  float32x2_t v37;
  float32x2_t v38;
  int v39;
  uint64_t v40;
  uint64_t v41;
  float32x4_t v42;
  float32x4_t v43;
  uint64_t v44;
  float32x4_t v45;
  float32x2_t v46;
  float32x4_t v47;
  float32x4_t v48;
  float32x2_t v49;
  float32x2_t v50;
  int8x8_t v51;
  float32x4_t v52;
  float32x4_t v53;
  float32x4_t v54;
  float32x4_t v55;
  float32x4_t v56;
  int8x16_t v57;
  uint64_t v58;
  int v59;
  unint64_t v60;

  *(_BYTE *)(a1 + 63) = 0;
  v5 = *(unsigned __int8 *)(a1 + 62);
  if (*(_BYTE *)(a1 + 62))
  {
    v6 = 0;
    v7 = 0;
    __asm { FMOV            V0.2S, #1.0 }
    v13.i64[0] = 0x4000000040000000;
    v13.i64[1] = 0x4000000040000000;
    do
    {
      v14 = *(unsigned __int8 *)(a1 + v6 + 56);
      v15 = (float32x4_t *)(a1 + 400 * *(unsigned __int8 *)(a1 + v6 + 56));
      v16 = v15[28].u32[0];
      *(_BYTE *)(a1 + 63) += v16;
      v17 = v15[6];
      if (v16 >= 2)
      {
        v18 = v16 - 1;
        v19 = (float32x4_t *)(a1 + 160 + 400 * v14);
        do
        {
          v20 = *v19;
          v19 += 4;
          v17 = vaddq_f32(v17, v20);
          --v18;
        }
        while (v18);
      }
      v21 = v17;
      v21.i32[3] = 0;
      v22 = *(float32x4_t *)a4;
      v22.i32[3] = 0;
      v23 = (float32x2_t)vdupq_laneq_s32(*a4, 3).u64[0];
      v24 = vmulq_n_f32(v21, vmla_f32((float32x2_t)0xBF000000BF000000, v23, v23).f32[0]);
      v24.i32[3] = 0;
      v25 = (float32x2_t)vextq_s8((int8x16_t)v22, (int8x16_t)v22, 8uLL).u64[0];
      v26 = (float32x2_t)vextq_s8((int8x16_t)v21, (int8x16_t)v21, 8uLL).u64[0];
      v27 = (int8x8_t)vmls_f32(vmul_f32(*(float32x2_t *)a4->i8, (float32x2_t)vext_s8(*(int8x8_t *)v17.f32, (int8x8_t)v26, 4uLL)), (float32x2_t)vext_s8(*(int8x8_t *)a4->i8, (int8x8_t)v25, 4uLL), *(float32x2_t *)v17.f32);
      *(int8x8_t *)v28.f32 = vext_s8(v27, (int8x8_t)vmls_f32(vmul_f32(*(float32x2_t *)v17.f32, v25), *(float32x2_t *)a4->i8, v26), 4uLL);
      v28.i64[1] = v27.u32[0];
      v29 = vmlaq_laneq_f32(v24, v28, *(float32x4_t *)a4, 3);
      v29.i64[1] = vextq_s8((int8x16_t)v29, (int8x16_t)v29, 8uLL).u32[0];
      v30 = vmulq_f32(v21, v22);
      v30.i64[0] = vpaddq_f32(v30, v30).u64[0];
      v31 = vmlaq_n_f32(v29, v22, vpadd_f32(*(float32x2_t *)v30.f32, *(float32x2_t *)v30.f32).f32[0]);
      v32 = vaddq_f32(v31, v31);
      v32.i32[3] = 0;
      v33 = vmulq_f32(v32, v32);
      v33.i64[0] = vpaddq_f32(v33, v33).u64[0];
      v34 = vpadd_f32(*(float32x2_t *)v33.f32, *(float32x2_t *)v33.f32);
      v35 = vrsqrte_f32(v34);
      v36 = 4;
      do
      {
        v35 = vmul_f32(v35, vrsqrts_f32(vmul_f32(v35, v35), v34));
        --v36;
      }
      while (v36);
      v37 = vmul_f32(v34, (float32x2_t)vbsl_s8((int8x8_t)vdup_lane_s32(vceqz_f32(v34), 0), _D0, (int8x8_t)v35));
      v38 = vrecpe_f32(v37);
      v39 = 4;
      do
      {
        v38 = vmul_f32(v38, vrecps_f32(v37, v38));
        --v39;
      }
      while (v39);
      if (v7 <= 0x3F && (_DWORD)v16)
      {
        v40 = 0;
        v41 = 0;
        v42 = vmulq_n_f32(v32, v38.f32[0]);
        v42.i32[3] = 0;
        v43 = vnegq_f32(v42);
        v44 = a1 + 400 * v14;
        do
        {
          v45 = *a3;
          v45.i32[3] = 0;
          v46 = (float32x2_t)vdupq_laneq_s32(*(int32x4_t *)a3, 3).u64[0];
          v47 = *(float32x4_t *)(v44 + v40 + 64);
          v48 = vmulq_n_f32(v47, vmla_f32((float32x2_t)0xBF000000BF000000, v46, v46).f32[0]);
          v48.i32[3] = 0;
          v49 = (float32x2_t)vextq_s8((int8x16_t)v45, (int8x16_t)v45, 8uLL).u64[0];
          v50 = (float32x2_t)vextq_s8((int8x16_t)v47, (int8x16_t)v47, 8uLL).u64[0];
          v51 = (int8x8_t)vmls_f32(vmul_f32(*(float32x2_t *)a3->f32, (float32x2_t)vext_s8(*(int8x8_t *)v47.f32, (int8x8_t)v50, 4uLL)), (float32x2_t)vext_s8(*(int8x8_t *)a3->f32, (int8x8_t)v49, 4uLL), *(float32x2_t *)v47.f32);
          *(int8x8_t *)v52.f32 = vext_s8(v51, (int8x8_t)vmls_f32(vmul_f32(v49, *(float32x2_t *)v47.f32), *(float32x2_t *)a3->f32, v50), 4uLL);
          v52.i64[1] = v51.u32[0];
          v53 = vmlaq_laneq_f32(v48, v52, *a3, 3);
          v53.i64[1] = vextq_s8((int8x16_t)v53, (int8x16_t)v53, 8uLL).u32[0];
          v54 = vmulq_f32(v45, v47);
          v54.i64[0] = vpaddq_f32(v54, v54).u64[0];
          v55 = vmlaq_n_f32(v53, v45, vpadd_f32(*(float32x2_t *)v54.f32, *(float32x2_t *)v54.f32).f32[0]);
          v55.i64[1] = vextq_s8((int8x16_t)v55, (int8x16_t)v55, 8uLL).u32[0];
          v56 = vmlaq_f32(a3[1], v13, v55);
          v56.i64[1] = vextq_s8((int8x16_t)v56, (int8x16_t)v56, 8uLL).u32[0];
          v57 = (int8x16_t)vmlaq_n_f32(v56, v43, COERCE_FLOAT(*a5));
          v57.i64[1] = vextq_s8(v57, v57, 8uLL).u32[0];
          v54.i32[0] = vsub_f32((float32x2_t)vdup_laneq_s32(*(int32x4_t *)(v44 + v40 + 96), 3), *a5).u32[0];
          v58 = a2 + (v7 << 6) + v40;
          *(float32x4_t *)v58 = v42;
          *(int8x16_t *)(v58 + 16) = v57;
          *(_DWORD *)(v58 + 12) = v54.i32[0];
          *(_DWORD *)(v58 + 52) = *(_DWORD *)(v44 + v40 + 112);
          v59 = v41 + 1;
          if (v41 + 1 >= v16)
            break;
          v60 = v7 + v41;
          v40 += 64;
          ++v41;
        }
        while (v60 < 0x3F);
        v7 = (v7 + v59);
        v5 = *(unsigned __int8 *)(a1 + 62);
      }
      ++v6;
    }
    while (v6 < v5);
  }
  else
  {
    v7 = 0;
  }
  *(_DWORD *)(a2 + 4096) = v7;
  return v7 != 0;
}

BOOL physx::Gu::pcmContactSphereMesh(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  float32x4_t **v6;
  float32x4_t *v7;
  uint64_t v8;
  float32x4_t v9;
  float v10;
  __int128 v11;
  float32x4_t v12;
  float32x4_t v13;
  float v14;
  float32x2_t v15;
  float32x2_t v16;
  float32x4_t v17;
  uint64_t v18;
  double v19;
  float32x2_t v20;
  __int32 *v21;
  int32x2_t v22;
  float32x4_t v23;
  float32x4_t v24;
  float32x4_t v25;
  float32x2_t v26;
  float32x4_t v27;
  float32x2_t v28;
  float32x2_t v29;
  int8x8_t v30;
  float32x4_t v31;
  float32x4_t v32;
  float32x4_t v33;
  float32x4_t v34;
  float32x4_t v35;
  float32x4_t v36;
  float32x4_t v37;
  float32x2_t v38;
  float32x4_t v39;
  float32x4_t v40;
  float32x4_t v41;
  int8x16_t v42;
  float32x4_t v43;
  float32x2_t v44;
  float32x2_t v45;
  float32x4_t v46;
  float32x2_t v47;
  float32x2_t v48;
  float32x2_t v49;
  float32x2_t v50;
  float32x2_t v51;
  float32x2_t v52;
  float32x2_t v53;
  float32x2_t v54;
  float32x2_t v55;
  float32x2_t v60;
  float32x4_t v61;
  __int128 v62;
  unsigned int v63;
  unsigned int v64;
  __int8 *v65;
  uint64_t v66;
  unsigned int v67;
  unsigned __int32 v72;
  unsigned __int8 v73;
  char *v74;
  __int8 v75;
  uint64_t v77;
  float32x2_t v78;
  unsigned int v79;
  float v80;
  float v81;
  float32x2_t v82;
  float32x2_t v86;
  uint64_t v87;
  float v88;
  BOOL v89;
  BOOL v90;
  uint64_t v91;
  float v92;
  float32x2_t v93;
  float32x2_t v94;
  __int32 v95;
  __int128 v96;
  int32x2_t v97;
  __int128 v98;
  uint64_t v99;
  unsigned int v100;
  uint64_t v101;
  int v102;
  unsigned int v103;
  uint64_t v104;
  _QWORD *v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t *v108;
  int v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t i;
  float32x4_t *v114;
  int v115;
  uint64_t v116;
  uint64_t v117;
  float32x4_t *v118;
  float32x4_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v124;
  unint64_t v125;
  unint64_t v126;
  unsigned int v127;
  unsigned int v128;
  unint64_t v129;
  float32x4_t v130;
  float32x4_t v131;
  __int128 *v132;
  __int128 v133;
  __int128 v134;
  __int128 v135;
  uint64_t v136;
  unsigned int v137;
  float32x4_t v138;
  float32x4_t v139;
  int32x2_t v140;
  float32x2_t v141;
  float v142;
  __int128 v143;
  _OWORD v144[2];
  float v145;
  float v146;
  float32x2_t v147;
  int32x2_t v148;
  __int32 v149;
  __int128 v150;
  __int128 v151;
  int v152;
  int32x2_t v153;
  __int32 v154;
  float v155;
  float32x2_t v156;
  _OWORD v157[4];
  uint64_t v158;
  char v159;
  float32x2_t v160;
  float32x4_t v161[2];
  float32x4_t v162[2];
  float32x2_t v163;
  float32x2_t v164;
  float32x4_t v165;
  __int128 v166;
  _OWORD v167[53];
  int v168;
  _QWORD v169[256];
  uint64_t v170[38];
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  __int128 v175;
  float32x2_t v176;
  float32x2_t v177;
  _BYTE v178[1032];
  _BYTE *v179;
  uint64_t v180;
  float32x2_t v181[544];
  char v182;
  float32x2_t *v183;
  uint64_t v184;
  uint64_t v185;

  v19 = MEMORY[0x24BDAC7A8](a1);
  v5 = v4;
  v185 = *MEMORY[0x24BDAC8D0];
  v7 = *v6;
  v9 = *(float32x4_t *)v8;
  v10 = *(float *)(v8 + 16);
  HIDWORD(v11) = 0;
  v12.i32[3] = 0;
  v12.f32[0] = v10;
  v13 = *(float32x4_t *)v2;
  v14 = *(float *)(v2 + 16);
  v15 = *(float32x2_t *)(v8 + 20);
  *(float32x2_t *)&v12.i32[1] = v15;
  v16 = *(float32x2_t *)(v2 + 20);
  v17.i32[3] = 0;
  v17.f32[0] = v14;
  *(float32x2_t *)&v17.i32[1] = v16;
  LODWORD(v19) = *(_DWORD *)(v18 + 4);
  v20 = (float32x2_t)vdup_lane_s32(*(int32x2_t *)&v19, 0);
  v22.i32[0] = *v21;
  v163 = (float32x2_t)vdup_lane_s32(v22, 0);
  v164 = v20;
  v162[0] = v9;
  v162[1] = v12;
  v161[0] = v13;
  v161[1] = v17;
  v23 = vnegq_f32(v13);
  v24 = v23;
  v24.i32[3] = 0;
  v25 = vsubq_f32(v12, v17);
  v26 = (float32x2_t)vdupq_laneq_s32((int32x4_t)v13, 3).u64[0];
  v27 = vmulq_n_f32(v25, vmla_f32((float32x2_t)0xBF000000BF000000, v26, v26).f32[0]);
  v27.i32[3] = 0;
  v28 = (float32x2_t)vextq_s8((int8x16_t)v24, (int8x16_t)v24, 8uLL).u64[0];
  v29 = (float32x2_t)vext_s8(*(int8x8_t *)v23.f32, (int8x8_t)v28, 4uLL);
  v30 = (int8x8_t)vmls_f32(vmul_f32(*(float32x2_t *)v23.f32, (float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v25, (int8x16_t)v25, 4uLL)), v29, *(float32x2_t *)v25.f32);
  *(int8x8_t *)v31.f32 = vext_s8(v30, (int8x8_t)vmls_f32(vmul_f32(v28, *(float32x2_t *)v25.f32), *(float32x2_t *)v23.f32, (float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v25, (int8x16_t)v25, 8uLL)), 4uLL);
  v31.i64[1] = v30.u32[0];
  v32 = vmlaq_laneq_f32(v27, v31, v13, 3);
  v32.i64[1] = vextq_s8((int8x16_t)v32, (int8x16_t)v32, 8uLL).u32[0];
  v33 = vmulq_f32(v24, v25);
  v33.i64[0] = vpaddq_f32(v33, v33).u64[0];
  v34 = vmlaq_n_f32(v32, v24, vpadd_f32(*(float32x2_t *)v33.f32, *(float32x2_t *)v33.f32).f32[0]);
  v35 = vaddq_f32(v34, v34);
  v35.i32[3] = 0;
  v36 = v9;
  v36.i32[3] = 0;
  v37 = vmulq_f32(v36, v24);
  v37.i64[0] = vpaddq_f32(v37, v37).u64[0];
  v38 = vsub_f32(vmul_f32((float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v9, (int8x16_t)v9, 8uLL), (float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v13, (int8x16_t)v13, 8uLL)), vpadd_f32(*(float32x2_t *)v37.f32, *(float32x2_t *)v37.f32));
  v39 = vmulq_laneq_f32(v24, v9, 3);
  v37.i64[0] = vextq_s8((int8x16_t)v36, (int8x16_t)v36, 8uLL).u64[0];
  *(float32x2_t *)v31.f32 = vmls_f32(vmul_f32((float32x2_t)vext_s8(*(int8x8_t *)v9.f32, *(int8x8_t *)v37.f32, 4uLL), *(float32x2_t *)v23.f32), v29, *(float32x2_t *)v9.f32);
  *(int8x8_t *)v9.f32 = vext_s8(*(int8x8_t *)v31.f32, (int8x8_t)vmls_f32(vmul_f32(*(float32x2_t *)v9.f32, v28), *(float32x2_t *)v23.f32, *(float32x2_t *)v37.f32), 4uLL);
  v9.i64[1] = v31.i64[0];
  v40 = vaddq_f32(vaddq_f32(v39, vmulq_laneq_f32(v36, v13, 3)), v9);
  v41 = v40;
  v41.i32[3] = v38.i32[1];
  v42 = (int8x16_t)vabdq_f32(v35, v7[1]);
  *(float32x2_t *)v42.i8 = vpmax_f32((float32x2_t)*(_OWORD *)&vextq_s8(v42, v42, 8uLL), *(float32x2_t *)v42.i8);
  v43 = vmulq_f32(v41, *v7);
  v43.i64[0] = vpaddq_f32(v43, v43).u64[0];
  if (vuzp1_s8((int8x8_t)vdup_lane_s16((int16x4_t)vorr_s8((int8x8_t)vcgt_f32((float32x2_t)vdup_n_s32(0x3F7FF2E5u), vpadd_f32(*(float32x2_t *)v43.f32, *(float32x2_t *)v43.f32)), (int8x8_t)vcgt_f32(vpmax_f32(*(float32x2_t *)v42.i8, *(float32x2_t *)v42.i8), vmul_n_f32((float32x2_t)vdup_n_s32(0x3CA3D70Au), *(float *)&v19))), 0), *(int8x8_t *)&v19).u32[0] == -1)
  {
    v77 = v3;
    v160 = vmul_n_f32((float32x2_t)vdup_n_s32(0x3A83126Fu), *(float *)&v19);
    v78 = vsub_f32(v15, v16);
    *(float *)&v79 = (float)(v10 - v14) + (float)(v10 - v14);
    v80 = *(float *)(v2 + 12);
    v81 = (float)(v80 * v80) + -0.5;
    v82 = vadd_f32(v78, v78);
    _D7 = *(float32x2_t *)(v2 + 4);
    _D18 = (float32x2_t)__PAIR64__(_D7.u32[1], v82.u32[1]);
    __asm { FMLA            S16, S18, V7.S[1] }
    v86.i32[0] = _D7.i32[0];
    v86.i32[1] = *(_DWORD *)v2;
    _D18.i32[0] = *(_DWORD *)v2;
    v141 = vmla_n_f32(vmla_n_f32((float32x2_t)vrev64_s32((int32x2_t)vmul_n_f32(vneg_f32(vmla_f32(vmul_f32((float32x2_t)__PAIR64__(v82.u32[1], v79), vneg_f32(v86)), (float32x2_t)__PAIR64__(v79, v82.u32[0]), _D18)), v80)), v82, v81), _D7, _S16);
    v142 = (float)((float)(*(float *)&v79 * v81)
                 - (float)(vmlas_n_f32((float)-_D7.f32[1] * v82.f32[0], v82.f32[1], _D7.f32[0]) * v80))
         + (float)(*(float *)v2 * _S16);
    *(_QWORD *)&v11 = __PAIR64__(v141.u32[0], LODWORD(v142));
    *(float *)&v19 = *(float *)&v19 + *(float *)v22.i32;
    v140 = *(int32x2_t *)&v19;
    DWORD2(v11) = v141.i32[1];
    v143 = v11;
    v87 = *(_QWORD *)(v1 + 48);
    v157[0] = xmmword_2260E5F10;
    v157[1] = xmmword_2260E5F10;
    v157[2] = xmmword_2260FD430;
    v157[3] = xmmword_2260E5F20;
    v158 = 0x3F80000000000000;
    v159 = 0;
    v88 = 1.0;
    v89 = *(float *)(v1 + 4) == 1.0;
    if (*(float *)(v1 + 8) != 1.0)
      v89 = 0;
    v90 = *(float *)(v1 + 12) == 1.0 && v89;
    if (!v90)
    {
      v138 = v41;
      v139 = v35;
      physx::Cm::FastVertex2ShapeScaling::init((uint64_t)v157, (float *)(v1 + 4), (float *)(v1 + 16));
      v41 = v138;
      v35 = v139;
    }
    v7[3].i8[14] = 0;
    *v7 = v41;
    v7[1] = v35;
    v184 = 0x44000000000;
    v182 = 1;
    v183 = v181;
    v91 = *(_QWORD *)(v87 + 80);
    v165.i32[2] = 2;
    *(_QWORD *)&v166 = v157;
    *((_QWORD *)&v166 + 1) = v91;
    LOBYTE(v167[0]) = v90;
    v168 = 0;
    v165.i64[0] = (uint64_t)&off_24ED92888;
    physx::Gu::PCMMeshContactGeneration::PCMMeshContactGeneration((unint64_t)v169, &v163, &v160, v162, v161, (uint64_t)v7, v5, (uint64_t)v181, v77);
    v92 = v142;
    v175 = v143;
    v176 = v20;
    v180 = 0x4000000000;
    v178[1024] = 1;
    v179 = v178;
    v93 = vadd_f32(v20, v163);
    v177 = vmul_f32(v93, v93);
    v95 = v140.i32[0];
    v94 = v141;
    v156 = v141;
    v153.i32[0] = v140.i32[0];
    v153.i32[1] = v140.i32[0];
    v154 = v140.i32[0];
    v155 = v142;
    v96 = xmmword_2260E5F10;
    v150 = xmmword_2260E5F10;
    v151 = xmmword_2260E5F10;
    *(float *)&v152 = 1.0;
    if (v90)
    {
      v97 = vdup_lane_s32(v140, 0);
      v98 = xmmword_2260E5F10;
    }
    else
    {
      physx::Cm::FastVertex2ShapeScaling::transformQueryBounds((uint64_t)v157, &v155, (float *)&v153, (float *)&v150);
      v96 = v150;
      v98 = v151;
      v88 = *(float *)&v152;
      v95 = v154;
      v92 = v155;
      v94 = v156;
      v97 = v153;
    }
    v144[0] = v96;
    v144[1] = v98;
    v145 = v88;
    v146 = v92;
    v147 = v94;
    v148 = v97;
    v149 = v95;
    ((void (*)(uint64_t, _OWORD *, float32x4_t *, uint64_t, uint64_t))*(&physx::Gu::gMidphaseBoxCBOverlapTable
                                                                              + *(unsigned __int16 *)(v87 + 8)
                                                                              - 3))(v87, v144, &v165, 1, 1);
    if (v168)
    {
      physx::Gu::PCMMeshContactGeneration::processTriangleCache<16u,physx::Gu::PCMSphereVsMeshContactGeneration>((_BOOL8)v169, (uint64_t)v167 + 4);
      v168 = 0;
    }
    physx::Gu::PCMSphereVsMeshContactGeneration::generateLastContacts((physx::Gu::PCMSphereVsMeshContactGeneration *)v169);
    v100 = v174;
    if ((_DWORD)v174)
    {
      v101 = HIDWORD(v174);
      if (HIDWORD(v174) >= 2)
      {
        v102 = 0;
        v103 = -1;
        v104 = 1;
        do
        {
          v105 = &v169[v104];
          v106 = v105[255];
          v107 = v105[256];
          if (COERCE_FLOAT(*(_QWORD *)(v106 + 40)) > COERCE_FLOAT(*(_QWORD *)(v107 + 40)))
          {
            v105[255] = v107;
            v105[256] = v106;
            if ((int)v104 - 2 >= 0)
            {
              v108 = &v170[v103 + 1];
              v109 = v102;
              do
              {
                v111 = *(v108 - 1);
                v110 = *v108;
                if (COERCE_FLOAT(*(_QWORD *)(*v108 + 40)) >= COERCE_FLOAT(*(_QWORD *)(v111 + 40)))
                  break;
                *v108 = v111;
                *--v108 = v110;
                --v109;
              }
              while (v109 > 0);
            }
          }
          ++v104;
          ++v103;
          ++v102;
        }
        while (v104 != v101);
      }
      if ((_DWORD)v101)
      {
        v112 = 0;
        for (i = 0; i != v101; ++i)
        {
          v114 = (float32x4_t *)v170[i];
          v114[1].i64[1] = (uint64_t)v114;
          v114[2].i64[0] = (uint64_t)v114;
          v115 = v114[3].i32[1] - v114[3].i32[0];
          v114[3].i32[2] = v115;
          v114[1].i64[0] = 0;
          v116 = v112;
          while (v116)
          {
            v117 = *(_QWORD *)((char *)&v169[255] + v116);
            v118 = *(float32x4_t **)(v117 + 32);
            v119 = vmulq_f32(*v114, *v118);
            v119.i64[0] = vpaddq_f32(v119, v119).u64[0];
            v116 -= 8;
            if (vpadd_f32(*(float32x2_t *)v119.f32, *(float32x2_t *)v119.f32).f32[0] >= *(float *)&v171)
            {
              *(_QWORD *)(v117 + 16) = v114;
              v118[1].i64[1] = (uint64_t)v114;
              v114[2].i64[0] = (uint64_t)v118;
              *(_DWORD *)(*(_QWORD *)(v117 + 32) + 56) += v115;
              break;
            }
          }
          v112 += 8;
        }
        v120 = 0;
        v121 = v173;
        do
        {
          v122 = v170[v120];
          if (v122)
            _ZF = *(_QWORD *)(v122 + 32) == v122;
          else
            _ZF = 0;
          if (_ZF)
          {
            while (*(_QWORD *)(v122 + 16))
            {
              v124 = v122;
              v122 = *(_QWORD *)(v122 + 16);
              v125 = *(unsigned int *)(v124 + 48);
              v126 = *(unsigned int *)(v124 + 52);
              if (v125 < v126)
              {
                v127 = *(_DWORD *)(v122 + 52);
                do
                {
                  v128 = *(_DWORD *)(v122 + 48);
                  if (v128 < v127)
                  {
                    do
                    {
                      v129 = v121 + ((unint64_t)v128 << 6);
                      v130 = vsubq_f32(*(float32x4_t *)(v129 + 16), *(float32x4_t *)(v121 + (v125 << 6) + 16));
                      v131 = vmulq_f32(v130, v130);
                      v131.i64[0] = vpaddq_f32(v131, v131).u64[0];
                      if (*(float *)&v172 > vpadd_f32(*(float32x2_t *)v131.f32, *(float32x2_t *)v131.f32).f32[0])
                      {
                        v132 = (__int128 *)(v121 + ((unint64_t)(v127 - 1) << 6));
                        v133 = *v132;
                        v134 = v132[1];
                        v135 = v132[2];
                        *(_DWORD *)(v129 + 48) = *((_DWORD *)v132 + 12);
                        *(_OWORD *)(v129 + 16) = v134;
                        *(_OWORD *)(v129 + 32) = v135;
                        *(_OWORD *)v129 = v133;
                        v127 = *(_DWORD *)(v122 + 52) - 1;
                        *(_DWORD *)(v122 + 52) = v127;
                        --v128;
                      }
                      ++v128;
                    }
                    while (v128 < v127);
                    v126 = *(unsigned int *)(v124 + 52);
                  }
                  ++v125;
                }
                while (v125 < v126);
              }
            }
          }
          ++v120;
        }
        while (v120 != v101);
        v136 = v173;
        v100 = v174;
        v137 = HIDWORD(v174);
      }
      else
      {
        v137 = 0;
        v136 = v173;
      }
      physx::Gu::MultiplePersistentContactManifold::addManifoldContactPoints(v170[36], v136, v100, v170, v137, v99, &v171, 1);
      v174 = 0;
    }
    v165.i64[0] = (uint64_t)&off_24ED92888;
    if ((v180 & 0x8000000000000000) == 0 && (v180 & 0x7FFFFFFF00000000) != 0 && v179 != v178 && v179)
      (*(void (**)(uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
    if ((v184 & 0x8000000000000000) == 0 && (v184 & 0x7FFFFFFF00000000) != 0 && v183 != v181 && v183)
      (*(void (**)(uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
  }
  else
  {
    v44 = (float32x2_t)vdup_lane_s32(*(int32x2_t *)v40.f32, 1);
    v45 = (float32x2_t)vdup_laneq_s32((int32x4_t)v40, 2);
    v46 = vaddq_f32(v40, v40);
    v47 = (float32x2_t)vdup_laneq_s32((int32x4_t)v46, 2);
    v48 = (float32x2_t)vdup_lane_s32((int32x2_t)vmul_f32(*(float32x2_t *)v40.f32, *(float32x2_t *)v46.f32), 0);
    v49 = vmul_lane_f32(v44, *(float32x2_t *)v46.f32, 1);
    v50 = vmul_laneq_f32(v45, v46, 2);
    v51 = vmul_n_f32(v44, v46.f32[0]);
    v52 = vmul_n_f32(v45, v46.f32[0]);
    v53 = vmul_lane_f32((float32x2_t)vdup_lane_s32(*(int32x2_t *)v46.f32, 0), v38, 1);
    v54 = vmul_lane_f32(v45, *(float32x2_t *)v46.f32, 1);
    *(float32x2_t *)v46.f32 = vmul_lane_f32((float32x2_t)vdup_lane_s32(*(int32x2_t *)v46.f32, 1), v38, 1);
    v55 = vmul_lane_f32(v47, v38, 1);
    __asm { FMOV            V7.2S, #1.0 }
    v60 = vsub_f32(_D7, v48);
    *(int8x8_t *)v61.f32 = vext_s8((int8x8_t)vsub_f32(vsub_f32(_D7, v49), v50), (int8x8_t)vadd_f32(v51, v55), 4uLL);
    v61.i64[1] = vsub_f32(v52, *(float32x2_t *)v46.f32).u32[0];
    *(int8x8_t *)&v62 = vext_s8((int8x8_t)vsub_f32(v51, v55), (int8x8_t)vsub_f32(v60, v50), 4uLL);
    *((_QWORD *)&v62 + 1) = vadd_f32(v54, v53).u32[0];
    v165 = v61;
    v166 = v62;
    *(int8x8_t *)&v62 = vext_s8((int8x8_t)vadd_f32(v52, *(float32x2_t *)v46.f32), (int8x8_t)vsub_f32(v54, v53), 4uLL);
    *((_QWORD *)&v62 + 1) = vsub_f32(v60, v49).u32[0];
    v167[0] = v62;
    v167[1] = v35;
    v181[0] = vmul_n_f32((float32x2_t)vdup_n_s32(0x3D4CCCCDu), *(float *)&v19);
    v63 = v7[3].u8[14];
    if (v7[3].i8[14])
    {
      v64 = 0;
      do
      {
        v65 = &v7[3].i8[v64 + 8];
        v66 = *v65;
        v67 = v63 - 2;
        if (v64 < v67)
          v67 = v64;
        _X8 = (uint64_t)&v7[25 * v7[3].u8[v67 + 9] + 4];
        __asm
        {
          PRFM            #0, [X8]
          PRFM            #0, [X8,#0x80]
          PRFM            #0, [X8,#0x100]
        }
        v72 = physx::Gu::SinglePersistentContactManifold::refreshContactPoints((uint64_t)&v7[25 * *v65 + 4], &v165, v181).u32[0];
        if (v7[25 * v66 + 28].i32[0])
        {
          v7[2].i32[v66] = v72;
        }
        else
        {
          v73 = v7[3].i8[14] - 1;
          v7[3].i8[14] = v73;
          v74 = (char *)v7 + v73;
          v75 = v74[56];
          v74[56] = v66;
          *v65 = v75;
          --v64;
        }
        ++v64;
        v63 = v7[3].u8[14];
      }
      while (v64 < v63);
    }
  }
  return physx::Gu::MultiplePersistentContactManifold::addManifoldContactsToContactBuffer((uint64_t)v7, v5, v162, (int32x4_t *)v161, &v164);
}

void physx::PCMSphereVsMeshContactGenerationCallback::~PCMSphereVsMeshContactGenerationCallback(physx::PCMSphereVsMeshContactGenerationCallback *this)
{
  int v1;
  physx::PCMSphereVsMeshContactGenerationCallback *v2;

  *(_QWORD *)this = &off_24ED92888;
  v1 = *((_DWORD *)this + 1433);
  if ((v1 & 0x80000000) == 0 && (v1 & 0x7FFFFFFF) != 0)
  {
    v2 = (physx::PCMSphereVsMeshContactGenerationCallback *)*((_QWORD *)this + 715);
    if (v2 == (physx::PCMSphereVsMeshContactGenerationCallback *)((char *)this + 4688))
    {
      *((_BYTE *)this + 5712) = 0;
    }
    else if (v2)
    {
      (*(void (**)(uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
    }
  }
}

{
  int v1;
  physx::PCMSphereVsMeshContactGenerationCallback *v2;

  *(_QWORD *)this = &off_24ED92888;
  v1 = *((_DWORD *)this + 1433);
  if ((v1 & 0x80000000) == 0 && (v1 & 0x7FFFFFFF) != 0)
  {
    v2 = (physx::PCMSphereVsMeshContactGenerationCallback *)*((_QWORD *)this + 715);
    if (v2 == (physx::PCMSphereVsMeshContactGenerationCallback *)((char *)this + 4688))
    {
      *((_BYTE *)this + 5712) = 0;
    }
    else if (v2)
    {
      (*(void (**)(uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
    }
  }
  JUMPOUT(0x2276933B8);
}

uint64_t physx::Gu::pcmContactSpherePlane(uint64_t a1, uint64_t a2, float32x4_t *a3, uint64_t a4, int32x2_t *a5, uint64_t a6, uint64_t a7)
{
  float32x4_t v7;
  float32x4_t v8;
  int8x16_t v9;
  float32x4_t v10;
  float32x2_t v11;
  float32x4_t v12;
  float32x4_t v13;
  float32x2_t v14;
  float32x2_t v15;
  int8x8_t v16;
  float32x4_t v17;
  float32x4_t v18;
  float32x4_t v19;
  float32x2_t v20;
  unsigned __int8 v21;
  float v22;
  float32x4_t v23;
  float32x4_t v25;
  int8x16_t v30;
  uint64_t v31;
  uint64_t v32;

  v7 = a3[1];
  v7.i32[3] = 0;
  v9 = *(int8x16_t *)a4;
  v8 = *(float32x4_t *)(a4 + 16);
  v8.i32[3] = 0;
  v10 = *(float32x4_t *)a4;
  v10.i32[3] = 0;
  v11 = (float32x2_t)vdupq_laneq_s32(*(int32x4_t *)a4, 3).u64[0];
  v12 = vsubq_f32(v7, v8);
  v13 = vmulq_n_f32(v12, vmla_f32((float32x2_t)0xBF000000BF000000, v11, v11).f32[0]);
  v13.i32[3] = 0;
  v14 = *(float32x2_t *)(a1 + 4);
  v15 = (float32x2_t)vextq_s8((int8x16_t)v10, (int8x16_t)v10, 8uLL).u64[0];
  v16 = (int8x8_t)vmls_f32(vmul_f32(*(float32x2_t *)a4, (float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v12, (int8x16_t)v12, 4uLL)), (float32x2_t)vext_s8(*(int8x8_t *)a4, (int8x8_t)v15, 4uLL), *(float32x2_t *)v12.f32);
  *(int8x8_t *)v17.f32 = vext_s8(v16, (int8x8_t)vmls_f32(vmul_f32(v15, *(float32x2_t *)v12.f32), *(float32x2_t *)a4, (float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v12, (int8x16_t)v12, 8uLL)), 4uLL);
  v17.i64[1] = v16.u32[0];
  v18 = vmlsq_laneq_f32(v13, v17, *(float32x4_t *)a4, 3);
  v18.i64[1] = vextq_s8((int8x16_t)v18, (int8x16_t)v18, 8uLL).u32[0];
  v19 = vmulq_f32(v10, v12);
  v19.i64[0] = vpaddq_f32(v19, v19).u64[0];
  v18.i64[0] = vmlaq_n_f32(v18, v10, vpadd_f32(*(float32x2_t *)v19.f32, *(float32x2_t *)v19.f32).f32[0]).u64[0];
  v20 = (float32x2_t)vdup_lane_s32((int32x2_t)vsub_f32(vadd_f32(*(float32x2_t *)v18.f32, *(float32x2_t *)v18.f32), v14), 0);
  v21 = vcge_f32((float32x2_t)vdup_lane_s32(*a5, 0), v20).u8[0];
  if ((v21 & 1) != 0)
  {
    LODWORD(v22) = vadd_f32(v11, v11).u32[0];
    v23 = vmulq_n_f32(v10, vadd_f32(*(float32x2_t *)v9.i8, *(float32x2_t *)v9.i8).f32[0]);
    v23.i32[3] = 0;
    *(int8x8_t *)_Q3.f32 = vext_s8((int8x8_t)v11, (int8x8_t)*(_OWORD *)&vextq_s8(v9, v9, 8uLL), 4uLL);
    _Q3.i64[1] = vneg_f32((float32x2_t)vdup_lane_s32(*(int32x2_t *)v9.i8, 1)).u32[0];
    v25 = vmlaq_n_f32(v23, _Q3, v22);
    __asm { FMOV            V3.2S, #-1.0 }
    v25.i64[1] = vextq_s8((int8x16_t)v25, (int8x16_t)v25, 8uLL).u32[0];
    v25.i32[0] = vadd_f32(*(float32x2_t *)v25.f32, *(float32x2_t *)_Q3.f32).u32[0];
    v30 = (int8x16_t)vmlsq_lane_f32(v7, v25, v14, 0);
    v30.i64[1] = vextq_s8(v30, v30, 8uLL).u32[0];
    v31 = *(unsigned int *)(a7 + 4096);
    *(_DWORD *)(a7 + 4096) = v31 + 1;
    v32 = a7 + (v31 << 6);
    *(float32x4_t *)v32 = v25;
    *(int8x16_t *)(v32 + 16) = v30;
    *(_DWORD *)(v32 + 12) = v20.i32[0];
    *(_DWORD *)(v32 + 52) = -1;
  }
  return v21 & 1;
}

uint64_t physx::Gu::pcmContactSphereSphere(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, float32x2_t *a5, uint64_t a6, uint64_t a7)
{
  float32x4_t v7;
  float32x4_t v8;
  float32x2_t v9;
  float32x4_t v10;
  float32x4_t v11;
  float32x2_t v12;
  float32x2_t v13;
  float32x2_t v14;
  unsigned __int8 v15;
  float32x2_t v16;
  int v17;
  float32x2_t v23;
  float32x2_t v24;
  int v25;
  int8x16_t v26;
  float32x4_t v27;
  int8x16_t v28;
  uint64_t v29;
  uint64_t v30;

  v7.i64[0] = *(_QWORD *)(a3 + 16);
  v7.i64[1] = *(unsigned int *)(a3 + 24);
  v8.i64[0] = *(_QWORD *)(a4 + 16);
  v8.i64[1] = *(unsigned int *)(a4 + 24);
  v9 = *(float32x2_t *)(a2 + 4);
  v10 = vsubq_f32(v7, v8);
  v11 = vmulq_f32(v10, v10);
  v11.i64[0] = vpaddq_f32(v11, v11).u64[0];
  v12 = vpadd_f32(*(float32x2_t *)v11.f32, *(float32x2_t *)v11.f32);
  v13 = vadd_f32(*(float32x2_t *)(a1 + 4), v9);
  v14 = vadd_f32(*a5, v13);
  v15 = vcgt_f32((float32x2_t)vdup_lane_s32((int32x2_t)vmul_f32(v14, v14), 0), v12).u8[0];
  if ((v15 & 1) != 0)
  {
    v16 = vrsqrte_f32(v12);
    v17 = 4;
    do
    {
      v16 = vmul_f32(v16, vrsqrts_f32(vmul_f32(v16, v16), v12));
      --v17;
    }
    while (v17);
    __asm { FMOV            V7.2S, #1.0 }
    v23 = vmul_f32(v12, (float32x2_t)vbsl_s8((int8x8_t)vdup_lane_s32(vceqz_f32(v12), 0), _D7, (int8x8_t)v16));
    v24 = vrecpe_f32(v23);
    v25 = 4;
    do
    {
      v24 = vmul_f32(v24, vrecps_f32(v23, v24));
      --v25;
    }
    while (v25);
    v26 = (int8x16_t)vmulq_n_f32(v10, v24.f32[0]);
    v26.i32[3] = 0;
    v27 = (float32x4_t)vbslq_s8((int8x16_t)vcltzq_s32(vshlq_n_s32(vdupq_lane_s32(vcge_f32((float32x2_t)vdup_n_s32(0x3727C5ACu), v23), 0), 0x1FuLL)), (int8x16_t)xmmword_2260E5F10, v26);
    v28 = (int8x16_t)vmlaq_n_f32(v8, v27, v9.f32[0]);
    v28.i64[1] = vextq_s8(v28, v28, 8uLL).u32[0];
    v29 = *(unsigned int *)(a7 + 4096);
    *(_DWORD *)(a7 + 4096) = v29 + 1;
    v30 = a7 + (v29 << 6);
    *(float32x4_t *)v30 = v27;
    *(int8x16_t *)(v30 + 16) = v28;
    *(_DWORD *)(v30 + 12) = vsub_f32(v23, v13).u32[0];
    *(_DWORD *)(v30 + 52) = -1;
  }
  return v15 & 1;
}

float32x4_t *physx::Gu::getPCMConvexData(float32x4_t *result, char a2, uint64_t a3)
{
  uint64_t v3;
  float32x4_t v4;
  uint64_t v5;
  unsigned int v6;
  __int16 v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  v3 = result[9].i64[0];
  v4 = vaddq_f32(vaddq_f32(vmulq_n_f32(result[3], *(float *)(v3 + 24)), vmulq_n_f32(result[4], *(float *)(v3 + 28))), vmulq_n_f32(result[5], *(float *)(v3 + 32)));
  *(_QWORD *)a3 = v4.i64[0];
  *(_DWORD *)(a3 + 8) = v4.i32[2];
  v5 = *(unsigned __int8 *)(v3 + 38);
  v6 = *(unsigned __int8 *)(v3 + 39);
  *(_DWORD *)(a3 + 12) = v5;
  *(_DWORD *)(a3 + 16) = v6;
  v7 = *(_WORD *)(v3 + 36);
  v8 = v7;
  v9 = v7 & 0x7FFF;
  *(_DWORD *)(a3 + 20) = v9;
  v10 = *(_QWORD *)(v3 + 40);
  v11 = v10 + 20 * v6;
  *(_QWORD *)(a3 + 24) = v10;
  *(_QWORD *)(a3 + 32) = v11;
  v12 = v11 + 12 * v5;
  v13 = v12 + 2 * v9 + 3 * v5;
  v14 = 4 * v9;
  if (v8 >= 0)
    v14 = 0;
  v15 = v13 + v14;
  if (v8 >= 0)
    v13 = 0;
  *(_QWORD *)(a3 + 40) = v15;
  *(_QWORD *)(a3 + 48) = v12;
  *(_QWORD *)(a3 + 56) = v13;
  *(_QWORD *)(a3 + 80) = *(_QWORD *)(v3 + 48);
  *(_OWORD *)(a3 + 64) = *(_OWORD *)(v3 + 56);
  if ((a2 & 1) == 0)
  {
    *(_QWORD *)(a3 + 64) = 0;
    *(_QWORD *)(a3 + 72) = 0;
  }
  return result;
}

BOOL physx::Gu::getPCMConvexData(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _BOOL4 v8;
  _BOOL8 v9;
  uint64_t v10;
  float v11;
  float v12;
  float v13;
  float v14;
  float v15;
  float v16;
  float v17;
  float v18;
  float v19;
  float v20;
  float32x2_t v21;
  float32x2_t v22;
  float32x2_t v23;
  float32x2_t v24;
  float32x2_t v25;
  float v26;
  float v27;
  uint64_t v28;
  unsigned int v29;
  __int16 v30;
  int v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;

  v8 = *(float *)(a1 + 4) == 1.0;
  if (*(float *)(a1 + 8) != 1.0)
    v8 = 0;
  v9 = *(float *)(a1 + 12) == 1.0 && v8;
  if (!v9)
    physx::Cm::FastVertex2ShapeScaling::init(a2, (float *)(a1 + 4), (float *)(a1 + 16));
  v10 = *(_QWORD *)(a1 + 48);
  v11 = *(float *)(a2 + 8);
  v12 = *(float *)(v10 + 4);
  v13 = *(float *)(a2 + 20);
  v14 = *(float *)(a2 + 32);
  v15 = *(float *)(v10 + 8);
  v16 = *(float *)(v10 + 12);
  v17 = (float)((float)(*(float *)v10 * v11) + (float)(v12 * v13)) + (float)(v15 * v14);
  v18 = *(float *)(v10 + 16);
  v19 = *(float *)(v10 + 20);
  v20 = (float)(fabsf(v11 * v16) + fabsf(v13 * v18)) + fabsf(v14 * v19);
  v21 = *(float32x2_t *)(a2 + 12);
  v22 = vadd_f32(vmul_n_f32(*(float32x2_t *)a2, *(float *)v10), vmul_n_f32(v21, v12));
  v23 = *(float32x2_t *)(a2 + 24);
  v24 = vadd_f32(v22, vmul_n_f32(v23, v15));
  v25 = vadd_f32(vadd_f32(vabs_f32(vmul_n_f32(*(float32x2_t *)a2, v16)), vabs_f32(vmul_n_f32(v21, v18))), vabs_f32(vmul_n_f32(v23, v19)));
  *(float32x2_t *)a3 = vsub_f32(v24, v25);
  *(float *)(a3 + 8) = v17 - v20;
  *(float32x2_t *)(a3 + 12) = vadd_f32(v24, v25);
  *(float *)(a3 + 20) = v17 + v20;
  v24.i32[0] = *(_DWORD *)(v10 + 24);
  v25.i32[0] = *(_DWORD *)(v10 + 28);
  v26 = *(float *)(v10 + 32);
  v27 = (float)((float)(v24.f32[0] * *(float *)(a2 + 8)) + (float)(v25.f32[0] * *(float *)(a2 + 20)))
      + (float)(v26 * *(float *)(a2 + 32));
  *(float32x2_t *)a4 = vadd_f32(vadd_f32(vmul_n_f32(*(float32x2_t *)a2, v24.f32[0]), vmul_n_f32(*(float32x2_t *)(a2 + 12), v25.f32[0])), vmul_n_f32(*(float32x2_t *)(a2 + 24), v26));
  *(float *)(a4 + 8) = v27;
  v28 = *(unsigned __int8 *)(v10 + 38);
  v29 = *(unsigned __int8 *)(v10 + 39);
  *(_DWORD *)(a4 + 12) = v28;
  *(_DWORD *)(a4 + 16) = v29;
  v30 = *(_WORD *)(v10 + 36);
  v31 = v30;
  v32 = v30 & 0x7FFF;
  *(_DWORD *)(a4 + 20) = v32;
  v33 = *(_QWORD *)(v10 + 40);
  v34 = v33 + 20 * v29;
  *(_QWORD *)(a4 + 24) = v33;
  *(_QWORD *)(a4 + 32) = v34;
  v35 = v34 + 12 * v28;
  v36 = v35 + 2 * v32 + 3 * v28;
  v37 = 4 * v32;
  if (v31 >= 0)
    v37 = 0;
  v38 = v36 + v37;
  if (v31 >= 0)
    v36 = 0;
  *(_QWORD *)(a4 + 40) = v38;
  *(_QWORD *)(a4 + 48) = v35;
  *(_QWORD *)(a4 + 56) = v36;
  *(_QWORD *)(a4 + 80) = *(_QWORD *)(v10 + 48);
  *(_OWORD *)(a4 + 64) = *(_OWORD *)(v10 + 56);
  return v9;
}

uint64_t physx::Gu::PCMConvexVsMeshContactGeneration::generateTriangleFullContactManifold(uint64_t a1, uint64_t a2, __int32 a3, _DWORD *a4, unsigned int a5, uint64_t a6, uint64_t a7, _QWORD *a8, uint64_t a9, _DWORD *a10, float32x2_t *a11, float32x4_t *a12)
{
  double v20;
  double v21;
  double v22;
  double v23;
  __n128 v24;
  float32x4_t v25;
  int8x16_t v26;
  int8x16_t v27;
  int8x8_t v28;
  float32x4_t v29;
  float32x2_t v30;
  float32x2_t v31;
  int v32;
  float32x2_t v38;
  float32x2_t v39;
  int v40;
  float32x4_t v41;
  _OWORD *v42;
  float32x4_t *v43;
  float32x4_t v44;
  float32x4_t v45;
  float32x4_t v46;
  unsigned __int32 v47;
  float32x4_t v48;
  float32x4_t v49;
  float32x4_t v50;
  float32x2_t v51;
  uint64_t v52;
  unsigned int v53;
  _OWORD *v54;
  uint64_t j;
  float32x4_t v56;
  float32x4_t v57;
  float32x4_t v58;
  float32x2_t v59;
  unsigned int v60;
  unsigned int v61;
  int v62;
  unsigned int v64;
  float32x4_t v65;
  float32x4_t v66;
  uint64_t v67;
  unsigned int v68;
  unsigned int v69;
  uint64_t v70;
  int v71;
  int v72;
  int v73;
  float32x4_t *v74;
  float32x4_t v75;
  float32x4_t v76;
  float32x4_t v77;
  unsigned __int32 v78;
  float32x4_t v79;
  _OWORD *v80;
  float32x4_t v81;
  float32x4_t v82;
  float32x2_t v83;
  uint64_t v84;
  unsigned int v85;
  _OWORD *v86;
  uint64_t i;
  float32x4_t v88;
  float32x4_t v89;
  float32x4_t v90;
  float32x2_t v91;
  unsigned int v92;
  uint64_t v93;
  uint64_t v94;
  float32x4_t v95;
  uint64_t v96;
  float32x2_t v97;
  int v98;
  unsigned __int8 *v99;
  float32x4_t v100;
  float32x4_t v101;
  float32x4_t v102;
  float32x4_t v103;
  float32x2_t v104;
  float32x4_t v105;
  float32x2_t v106;
  float32x2_t v107;
  float32x2_t v108;
  int v109;
  unsigned __int8 *v110;
  unsigned int v111;
  float32x4_t v112;
  float32x4_t v113;
  float32x4_t v114;
  float32x4_t v115;
  float32x4_t *v116;
  uint64_t v117;
  uint64_t v118;
  float32x4_t v119;
  uint64_t v120;
  float32x2_t v121;
  int v122;
  unsigned __int8 *v123;
  float32x4_t v124;
  float32x4_t v125;
  float32x4_t v126;
  float32x4_t v127;
  float32x2_t v128;
  float32x4_t v129;
  float32x2_t v130;
  float32x2_t v131;
  float32x2_t v132;
  int v133;
  unsigned __int8 *v134;
  unsigned int v135;
  float32x4_t v136;
  float32x4_t v137;
  float32x4_t v138;
  float32x4_t v139;
  uint64_t v140;
  float32x4_t v141;
  float32x4_t *v142;
  float32x4_t v143;
  float32x4_t v144;
  float32x4_t v145;
  unsigned __int32 v146;
  float32x4_t v147;
  float32x4_t v148;
  float32x2_t v149;
  float32x2_t v150;
  int v151;
  float32x2_t v152;
  float32x2_t v153;
  int v154;
  float32x4_t v155;
  float32x4_t v156;
  int32x4_t v157;
  int32x4_t v158;
  unsigned int v159;
  int v160;
  float32x4_t v161;
  int32x2_t v162;
  int v163;

  v163 = 0;
  v162 = vdup_n_s32(0x7F7FFFFFu);
  v161 = 0uLL;
  if (!physx::testTriangleFaceNormal((float32x4_t *)a2, (uint64_t)a8, a11, (float32x2_t *)&v162, &v160, &v161, &v163)
    || (v159 = 0,
        !physx::testPolyFaceNormal(a6, a7, (uint64_t)a8, a11, &v162, &v159, (int8x16_t *)&v161, &v163, v20, v21, v22, v23, v24))|| !physx::testPolyEdgeNormal((float32x4_t *)a2, a5, a6, a7, a8,
                        a11,
                        (float32x2_t *)&v162,
                        &v161,
                        &v163))
  {
    v61 = 0;
    v62 = 1;
    goto LABEL_18;
  }
  v25 = *(float32x4_t *)(a2 + 48);
  v26 = (int8x16_t)vsubq_f32(*(float32x4_t *)(a2 + 64), v25);
  v27 = (int8x16_t)vsubq_f32(*(float32x4_t *)(a2 + 80), v25);
  v28 = (int8x8_t)vmls_f32(vmul_f32(*(float32x2_t *)v26.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v27, v27, 4uLL)), (float32x2_t)*(_OWORD *)&vextq_s8(v26, v26, 4uLL), *(float32x2_t *)v27.i8);
  *(int8x8_t *)v29.f32 = vext_s8(v28, (int8x8_t)vmls_f32(vmul_f32((float32x2_t)*(_OWORD *)&vextq_s8(v26, v26, 8uLL), *(float32x2_t *)v27.i8), *(float32x2_t *)v26.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v27, v27, 8uLL)), 4uLL);
  v29.i64[1] = v28.u32[0];
  *(float32x2_t *)v26.i8 = vpadd_f32(vmul_f32(*(float32x2_t *)v29.f32, *(float32x2_t *)v29.f32), vmul_f32((float32x2_t)v28.u32[0], (float32x2_t)v28.u32[0]));
  v30 = vpadd_f32(*(float32x2_t *)v26.i8, *(float32x2_t *)v26.i8);
  v31 = vrsqrte_f32(v30);
  v32 = 4;
  do
  {
    v31 = vmul_f32(v31, vrsqrts_f32(vmul_f32(v31, v31), v30));
    --v32;
  }
  while (v32);
  __asm { FMOV            V0.2S, #1.0 }
  v38 = vmul_f32(v30, (float32x2_t)vbsl_s8((int8x8_t)vdup_lane_s32(vceqz_f32(v30), 0), _D0, (int8x8_t)v31));
  v39 = vrecpe_f32(v38);
  v40 = 4;
  do
  {
    v39 = vmul_f32(v39, vrecps_f32(v38, v39));
    --v40;
  }
  while (v40);
  v41 = vmulq_n_f32(v29, v39.f32[0]);
  v41.i32[3] = 0;
  v158 = (int32x4_t)v41;
  if (v163 == 1)
  {
    v64 = v159;
    v65 = vnegq_f32(v161);
    v65.i32[3] = 0;
    v66 = vmulq_f32(v41, v65);
    v66.i64[0] = vpaddq_f32(v66, v66).u64[0];
    if (vpadd_f32(*(float32x2_t *)v66.f32, *(float32x2_t *)v66.f32).f32[0] <= 0.70711)
    {
      if ((a5 & 7) == 0 || *(_BYTE *)(a1 + 4569))
      {
        v67 = *(_QWORD *)(a1 + 3736);
        v68 = *(_DWORD *)(v67 + 4368);
        v69 = v68 + 15;
        if ((*(_DWORD *)(v67 + 4372) & 0x7FFFFFFFu) < v68 + 15)
        {
          physx::shdfnd::Array<unsigned int,physx::shdfnd::InlineAllocator<4352u,physx::shdfnd::ReflectionAllocator<unsigned int>>>::recreate(v67, v68 + 15);
          v67 = *(_QWORD *)(a1 + 3736);
          v68 = *(_DWORD *)(v67 + 4368);
        }
        v70 = *(_QWORD *)(v67 + 4360) + 4 * v68;
        *(_DWORD *)(v67 + 4368) = v69;
        *(_DWORD *)(v70 + 48) = a3;
        *(_DWORD *)(v70 + 52) = v64;
        *(_BYTE *)(v70 + 56) = a5;
        *(_DWORD *)(v70 + 36) = *a4;
        *(_DWORD *)(v70 + 40) = a4[1];
        *(_DWORD *)(v70 + 44) = a4[2];
        v71 = *(_DWORD *)(a2 + 56);
        *(_QWORD *)v70 = *(_QWORD *)(a2 + 48);
        *(_DWORD *)(v70 + 8) = v71;
        v72 = *(_DWORD *)(a2 + 72);
        *(_QWORD *)(v70 + 12) = *(_QWORD *)(a2 + 64);
        *(_DWORD *)(v70 + 20) = v72;
        v73 = *(_DWORD *)(a2 + 88);
        *(_QWORD *)(v70 + 24) = *(_QWORD *)(a2 + 80);
        *(_DWORD *)(v70 + 32) = v73;
      }
      v62 = 1;
      goto LABEL_66;
    }
    v116 = (float32x4_t *)(*(_QWORD *)(a6 + 24) + 20 * v159);
  }
  else
  {
    if (v163)
    {
      v74 = (float32x4_t *)a8[5];
      v75 = vmulq_f32(v161, *v74);
      v75.i64[0] = vpaddq_f32(v75, v75).u64[0];
      v76 = vmulq_f32(v161, v74[1]);
      v76.i64[0] = vpaddq_f32(v76, v76).u64[0];
      v77 = vmulq_f32(v161, v74[2]);
      v77.i64[0] = vpaddq_f32(v77, v77).u64[0];
      v78 = vpadd_f32(*(float32x2_t *)v77.f32, *(float32x2_t *)v77.f32).u32[0];
      *(int8x8_t *)v79.f32 = vext_s8((int8x8_t)vpadd_f32(*(float32x2_t *)v75.f32, *(float32x2_t *)v75.f32), (int8x8_t)vpadd_f32(*(float32x2_t *)v76.f32, *(float32x2_t *)v76.f32), 4uLL);
      v79.i64[1] = v78;
      v80 = *(_OWORD **)(a6 + 24);
      v81 = *(float32x4_t *)v80;
      v81.i32[3] = 0;
      v82 = vmulq_f32(v81, v79);
      v82.i64[0] = vpaddq_f32(v82, v82).u64[0];
      v83 = vpadd_f32(*(float32x2_t *)v82.f32, *(float32x2_t *)v82.f32);
      v84 = *(unsigned int *)(a6 + 16);
      if (v84 < 2)
      {
        v85 = 0;
      }
      else
      {
        v85 = 0;
        v86 = (_OWORD *)((char *)v80 + 20);
        for (i = 1; i != v84; ++i)
        {
          v88 = *(float32x4_t *)v86;
          v86 = (_OWORD *)((char *)v86 + 20);
          v89 = v88;
          v89.i32[3] = 0;
          v90 = vmulq_f32(v89, v79);
          v90.i64[0] = vpaddq_f32(v90, v90).u64[0];
          v91 = vpadd_f32(*(float32x2_t *)v90.f32, *(float32x2_t *)v90.f32);
          if ((vcgt_f32(v83, v91).u8[0] & 1) != 0)
          {
            v85 = i;
            v92 = -1;
          }
          else
          {
            v92 = 0;
          }
          v83 = (float32x2_t)vbsl_s8((int8x8_t)vdup_n_s32(v92), (int8x8_t)v91, (int8x8_t)v83);
        }
      }
      v117 = *(unsigned int *)(a6 + 20);
      if ((_DWORD)v117)
      {
        v118 = 0;
        v119 = vnegq_f32(v79);
        v119.i32[3] = 0;
        v120 = *(_QWORD *)(a6 + 48);
        v121 = vmul_f32(v83, v83);
        v122 = -1;
        do
        {
          v123 = (unsigned __int8 *)(v120 + (2 * v118));
          v124 = *(float32x4_t *)((char *)v80 + 20 * *v123);
          v124.i32[3] = 0;
          v125 = *(float32x4_t *)((char *)v80 + 20 * v123[1]);
          v125.i32[3] = 0;
          v126 = vaddq_f32(v124, v125);
          v127 = vmulq_f32(v126, v126);
          v127.i64[0] = vpaddq_f32(v127, v127).u64[0];
          v128 = vpadd_f32(*(float32x2_t *)v127.f32, *(float32x2_t *)v127.f32);
          v129 = vmulq_f32(v119, v126);
          v129.i64[0] = vpaddq_f32(v129, v129).u64[0];
          v130 = vpadd_f32(*(float32x2_t *)v129.f32, *(float32x2_t *)v129.f32);
          v131 = vmul_f32(v130, v130);
          if (vuzp1_s8((int8x8_t)vdup_lane_s16((int16x4_t)vand_s8((int8x8_t)vcgt_f32(v131, vmul_f32(v121, v128)), (int8x8_t)vcgez_f32(v130)), 0), _D0).u32[0] == -1)
          {
            v132 = vrecpe_f32(v128);
            v133 = 4;
            do
            {
              v132 = vmul_f32(v132, vrecps_f32(v128, v132));
              --v133;
            }
            while (v133);
            v121 = vmul_f32(v131, v132);
            v122 = v118;
          }
          ++v118;
        }
        while (v118 != v117);
        if (v122 != -1)
        {
          v134 = (unsigned __int8 *)(v120 + (2 * v122));
          v135 = *v134;
          v136 = *(float32x4_t *)((char *)v80 + 20 * *v134);
          v85 = v134[1];
          v136.i32[3] = 0;
          v137 = *(float32x4_t *)((char *)v80 + 20 * v85);
          v137.i32[3] = 0;
          v138 = vmulq_f32(v119, v136);
          v138.i64[0] = vpaddq_f32(v138, v138).u64[0];
          v139 = vmulq_f32(v119, v137);
          v139.i64[0] = vpaddq_f32(v139, v139).u64[0];
          if ((vcgt_f32(vpadd_f32(*(float32x2_t *)v138.f32, *(float32x2_t *)v138.f32), vpadd_f32(*(float32x2_t *)v139.f32, *(float32x2_t *)v139.f32)).u8[0] & 1) != 0)v85 = v135;
        }
      }
      v140 = (uint64_t)v80 + 20 * v85;
      v141.i64[0] = *(_QWORD *)v140;
      v141.i64[1] = *(unsigned int *)(v140 + 8);
      v142 = (float32x4_t *)a8[6];
      v143 = vmulq_f32(*v142, v141);
      v143.i64[0] = vpaddq_f32(v143, v143).u64[0];
      v144 = vmulq_f32(v141, v142[1]);
      v144.i64[0] = vpaddq_f32(v144, v144).u64[0];
      v145 = vmulq_f32(v141, v142[2]);
      v145.i64[0] = vpaddq_f32(v145, v145).u64[0];
      v146 = vpadd_f32(*(float32x2_t *)v145.f32, *(float32x2_t *)v145.f32).u32[0];
      *(int8x8_t *)v147.f32 = vext_s8((int8x8_t)vpadd_f32(*(float32x2_t *)v143.f32, *(float32x2_t *)v143.f32), (int8x8_t)vpadd_f32(*(float32x2_t *)v144.f32, *(float32x2_t *)v144.f32), 4uLL);
      v147.i64[1] = v146;
      v148 = vmulq_f32(v147, v147);
      v148.i64[0] = vpaddq_f32(v148, v148).u64[0];
      v149 = vpadd_f32(*(float32x2_t *)v148.f32, *(float32x2_t *)v148.f32);
      v150 = vrsqrte_f32(v149);
      v151 = 4;
      do
      {
        v150 = vmul_f32(v150, vrsqrts_f32(vmul_f32(v150, v150), v149));
        --v151;
      }
      while (v151);
      v152 = vmul_f32(v149, (float32x2_t)vbsl_s8((int8x8_t)vdup_lane_s32(vceqz_f32(v149), 0), _D0, (int8x8_t)v150));
      v153 = vrecpe_f32(v152);
      v154 = 4;
      do
      {
        v153 = vmul_f32(v153, vrecps_f32(v152, v153));
        --v154;
      }
      while (v154);
      v155 = vmulq_n_f32(v147, v153.f32[0]);
      v155.i32[3] = 0;
      v157 = (int32x4_t)v155;
      v156 = vnegq_f32(v155);
      v156.i32[3] = 0;
      *a12 = v156;
      physx::generatedPolyContacts(a6, v140, a2, a3, (uint64_t)a8, a9, a10, a11, &v157);
      goto LABEL_65;
    }
    v42 = *(_OWORD **)(a6 + 24);
    v43 = (float32x4_t *)a8[5];
    v44 = vmulq_f32(v161, *v43);
    v44.i64[0] = vpaddq_f32(v44, v44).u64[0];
    v45 = vmulq_f32(v161, v43[1]);
    v45.i64[0] = vpaddq_f32(v45, v45).u64[0];
    v46 = vmulq_f32(v161, v43[2]);
    v46.i64[0] = vpaddq_f32(v46, v46).u64[0];
    v47 = vpadd_f32(*(float32x2_t *)v46.f32, *(float32x2_t *)v46.f32).u32[0];
    *(int8x8_t *)v48.f32 = vext_s8((int8x8_t)vpadd_f32(*(float32x2_t *)v44.f32, *(float32x2_t *)v44.f32), (int8x8_t)vpadd_f32(*(float32x2_t *)v45.f32, *(float32x2_t *)v45.f32), 4uLL);
    v48.i64[1] = v47;
    v49 = *(float32x4_t *)v42;
    v49.i32[3] = 0;
    v50 = vmulq_f32(v49, v48);
    v50.i64[0] = vpaddq_f32(v50, v50).u64[0];
    v51 = vpadd_f32(*(float32x2_t *)v50.f32, *(float32x2_t *)v50.f32);
    v52 = *(unsigned int *)(a6 + 16);
    if (v52 < 2)
    {
      v53 = 0;
    }
    else
    {
      v53 = 0;
      v54 = (_OWORD *)((char *)v42 + 20);
      for (j = 1; j != v52; ++j)
      {
        v56 = *(float32x4_t *)v54;
        v54 = (_OWORD *)((char *)v54 + 20);
        v57 = v56;
        v57.i32[3] = 0;
        v58 = vmulq_f32(v57, v48);
        v58.i64[0] = vpaddq_f32(v58, v58).u64[0];
        v59 = vpadd_f32(*(float32x2_t *)v58.f32, *(float32x2_t *)v58.f32);
        if ((vcgt_f32(v51, v59).u8[0] & 1) != 0)
        {
          v53 = j;
          v60 = -1;
        }
        else
        {
          v60 = 0;
        }
        v51 = (float32x2_t)vbsl_s8((int8x8_t)vdup_n_s32(v60), (int8x8_t)v59, (int8x8_t)v51);
      }
    }
    v93 = *(unsigned int *)(a6 + 20);
    if ((_DWORD)v93)
    {
      v94 = 0;
      v95 = vnegq_f32(v48);
      v95.i32[3] = 0;
      v96 = *(_QWORD *)(a6 + 48);
      v97 = vmul_f32(v51, v51);
      v98 = -1;
      do
      {
        v99 = (unsigned __int8 *)(v96 + (2 * v94));
        v100 = *(float32x4_t *)((char *)v42 + 20 * *v99);
        v100.i32[3] = 0;
        v101 = *(float32x4_t *)((char *)v42 + 20 * v99[1]);
        v101.i32[3] = 0;
        v102 = vaddq_f32(v100, v101);
        v103 = vmulq_f32(v102, v102);
        v103.i64[0] = vpaddq_f32(v103, v103).u64[0];
        v104 = vpadd_f32(*(float32x2_t *)v103.f32, *(float32x2_t *)v103.f32);
        v105 = vmulq_f32(v95, v102);
        v105.i64[0] = vpaddq_f32(v105, v105).u64[0];
        v106 = vpadd_f32(*(float32x2_t *)v105.f32, *(float32x2_t *)v105.f32);
        v107 = vmul_f32(v106, v106);
        if (vuzp1_s8((int8x8_t)vdup_lane_s16((int16x4_t)vand_s8((int8x8_t)vcgt_f32(v107, vmul_f32(v97, v104)), (int8x8_t)vcgez_f32(v106)), 0), *(int8x8_t *)v95.f32).u32[0] == -1)
        {
          v108 = vrecpe_f32(v104);
          v109 = 4;
          do
          {
            v108 = vmul_f32(v108, vrecps_f32(v104, v108));
            --v109;
          }
          while (v109);
          v97 = vmul_f32(v107, v108);
          v98 = v94;
        }
        ++v94;
      }
      while (v94 != v93);
      if (v98 != -1)
      {
        v110 = (unsigned __int8 *)(v96 + (2 * v98));
        v111 = *v110;
        v112 = *(float32x4_t *)((char *)v42 + 20 * *v110);
        v53 = v110[1];
        v112.i32[3] = 0;
        v113 = *(float32x4_t *)((char *)v42 + 20 * v53);
        v113.i32[3] = 0;
        v114 = vmulq_f32(v95, v112);
        v114.i64[0] = vpaddq_f32(v114, v114).u64[0];
        v115 = vmulq_f32(v95, v113);
        v115.i64[0] = vpaddq_f32(v115, v115).u64[0];
        if ((vcgt_f32(vpadd_f32(*(float32x2_t *)v114.f32, *(float32x2_t *)v114.f32), vpadd_f32(*(float32x2_t *)v115.f32, *(float32x2_t *)v115.f32)).u8[0] & 1) != 0)v53 = v111;
      }
    }
    v116 = (float32x4_t *)((char *)v42 + 20 * (int)v53);
  }
  *a12 = v41;
  physx::generatedTriangleContacts(a2, a3, a6, v116, (uint64_t)a8, a9, a10, a11, &v158);
LABEL_65:
  v62 = 0;
LABEL_66:
  v61 = 1;
LABEL_18:
  if (v62)
    return v61;
  else
    return 1;
}

BOOL physx::testTriangleFaceNormal(float32x4_t *a1, uint64_t a2, float32x2_t *a3, float32x2_t *a4, _DWORD *a5, float32x4_t *a6, _DWORD *a7)
{
  float32x4_t v12;
  int8x16_t v13;
  int8x16_t v14;
  int8x8_t v15;
  float32x4_t v16;
  float32x2_t v17;
  float32x2_t v18;
  int v19;
  float32x2_t v25;
  float32x2_t v26;
  int v27;
  float32x4_t v28;
  float32x4_t v29;
  float32x2_t v30;
  unsigned __int32 v31;
  float32x4_t v33;
  float32x2_t v34;
  float32x2_t v35;

  v12 = a1[3];
  v13 = (int8x16_t)vsubq_f32(a1[4], v12);
  v14 = (int8x16_t)vsubq_f32(a1[5], v12);
  v15 = (int8x8_t)vmls_f32(vmul_f32(*(float32x2_t *)v13.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v14, v14, 4uLL)), (float32x2_t)*(_OWORD *)&vextq_s8(v13, v13, 4uLL), *(float32x2_t *)v14.i8);
  *(int8x8_t *)v16.f32 = vext_s8(v15, (int8x8_t)vmls_f32(vmul_f32((float32x2_t)*(_OWORD *)&vextq_s8(v13, v13, 8uLL), *(float32x2_t *)v14.i8), *(float32x2_t *)v13.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v14, v14, 8uLL)), 4uLL);
  v16.i64[1] = v15.u32[0];
  *(float32x2_t *)v14.i8 = vpadd_f32(vmul_f32(*(float32x2_t *)v16.f32, *(float32x2_t *)v16.f32), vmul_f32((float32x2_t)v15.u32[0], (float32x2_t)v15.u32[0]));
  v17 = vpadd_f32(*(float32x2_t *)v14.i8, *(float32x2_t *)v14.i8);
  v18 = vrsqrte_f32(v17);
  v19 = 4;
  do
  {
    v18 = vmul_f32(v18, vrsqrts_f32(vmul_f32(v18, v18), v17));
    --v19;
  }
  while (v19);
  __asm { FMOV            V5.2S, #1.0 }
  v25 = vmul_f32(v17, (float32x2_t)vbsl_s8((int8x8_t)vdup_lane_s32(vceqz_f32(v17), 0), _D5, (int8x8_t)v18));
  v26 = vrecpe_f32(v25);
  v27 = 4;
  do
  {
    v26 = vmul_f32(v26, vrecps_f32(v25, v26));
    --v27;
  }
  while (v27);
  v34 = 0;
  v35 = 0;
  v28 = vmulq_n_f32(v16, v26.f32[0]);
  v28.i32[3] = 0;
  v33 = v28;
  v29 = vmulq_f32(v12, v28);
  v29.i64[0] = vpaddq_f32(v29, v29).u64[0];
  v30 = vpadd_f32(*(float32x2_t *)v29.f32, *(float32x2_t *)v29.f32);
  (*(void (**)(uint64_t, float32x4_t *, float32x2_t *, float32x2_t *))(*(_QWORD *)a2 + 24))(a2, &v33, &v35, &v34);
  v31 = vuzp1_s8((int8x8_t)vdup_lane_s16((int16x4_t)vorr_s8((int8x8_t)vcgt_f32(v30, vadd_f32(*a3, v34)), (int8x8_t)vcgt_f32(v35, vadd_f32(v30, *a3))), 0), (int8x8_t)v35).u32[0];
  if (v31 != -1)
  {
    *a4 = vadd_f32(vsub_f32(v30, v35), (float32x2_t)0xB4000000B4000000);
    *a7 = 0;
    *a5 = 0;
    *a6 = v33;
  }
  return v31 != -1;
}

uint64_t physx::testPolyFaceNormal(uint64_t a1, uint64_t a2, uint64_t a3, float32x2_t *a4, _QWORD *a5, _DWORD *a6, int8x16_t *a7, _DWORD *a8, double a9, double a10, double a11, double a12, __n128 a13)
{
  int8x16_t v18;
  int v19;
  uint64_t v20;
  unint64_t v21;
  int v22;
  float32x4_t *v23;
  float32x4_t v24;
  const float *v25;
  float32x2_t v26;
  float32x4_t v27;
  float32x4_t v28;
  float32x2_t v29;
  float32x2_t v30;
  unsigned __int8 v31;
  BOOL v32;
  unsigned int v33;
  int8x16_t v34;
  uint64_t v36;
  unint64_t v37;
  float32x4_t *v38;
  float32x4_t v39;
  const float *v40;
  float32x2_t v41;
  float32x4_t v42;
  float32x4_t *v43;
  float32x4_t v44;
  float32x4_t v45;
  float32x4_t v46;
  float32x4_t v47;
  float32x4_t v48;
  float32x2_t v49;
  float32x2_t v50;
  float32x4_t v51;
  float32x2_t v52;
  unsigned __int8 v53;
  BOOL v54;
  unsigned int v55;
  int8x16_t v56;
  __n128 v60;
  __n128 v61;
  int8x16_t v62;
  int8x16_t v63;
  int8x16_t v64;
  float32x2_t v65;
  float32x2_t v66;

  v18 = *a7;
  v65 = 0;
  v66 = 0;
  v19 = *(_DWORD *)(a1 + 16);
  if (*(_BYTE *)(a3 + 56))
  {
    if (v19)
    {
      v20 = 0;
      v21 = 0;
      v22 = 0;
      a13.n128_u64[0] = (unint64_t)vdup_n_s32(0x7F7FFFFFu);
      while (1)
      {
        v60 = a13;
        v62 = v18;
        v23 = (float32x4_t *)(*(_QWORD *)(a1 + 24) + v20);
        v24 = *(float32x4_t *)(*(_QWORD *)(a1 + 32) + 12 * v23[1].u8[3]);
        v24.i32[3] = 0;
        v25 = &v23->f32[3];
        v26 = vld1_dup_f32(v25);
        v64 = 0uLL;
        v27 = *v23;
        v27.i32[3] = 0;
        v64 = (int8x16_t)v27;
        v28 = vmulq_f32(v24, v27);
        v28.i64[0] = vpaddq_f32(v28, v28).u64[0];
        v29 = vpadd_f32(*(float32x2_t *)v28.f32, *(float32x2_t *)v28.f32);
        (*(void (**)(uint64_t, int8x16_t *, float32x2_t *, float32x2_t *))(*(_QWORD *)a2 + 24))(a2, &v64, &v66, &v65);
        if (vuzp1_s8((int8x8_t)vdup_lane_s16((int16x4_t)vorr_s8((int8x8_t)vcgt_f32(v29, vadd_f32(*a4, v65)), (int8x8_t)vcgt_f32(v66, vsub_f32(*a4, v26))), 0), (int8x8_t)v66).u32[0] == -1)return 0;
        v30 = vsub_f32(vneg_f32(v26), v66);
        a13.n128_u64[1] = v60.n128_u64[1];
        v31 = vcgt_f32((float32x2_t)v60.n128_u64[0], v30).u8[0];
        v32 = (v31 & 1) == 0;
        if ((v31 & 1) != 0)
          v33 = -1;
        else
          v33 = 0;
        v34 = (int8x16_t)vdupq_n_s32(v33);
        v18 = vbslq_s8(v34, v64, v62);
        if (!v32)
          v22 = v21;
        a13.n128_u64[0] = (unint64_t)vbsl_s8(*(int8x8_t *)v34.i8, (int8x8_t)v30, (int8x8_t)v60.n128_u64[0]);
        ++v21;
        v20 += 20;
        if (v21 >= *(unsigned int *)(a1 + 16))
          goto LABEL_23;
      }
    }
  }
  else if (v19)
  {
    v36 = 0;
    v37 = 0;
    v22 = 0;
    a13.n128_u64[0] = (unint64_t)vdup_n_s32(0x7F7FFFFFu);
    while (1)
    {
      v61 = a13;
      v63 = v18;
      v38 = (float32x4_t *)(*(_QWORD *)(a1 + 24) + v36);
      v39 = *(float32x4_t *)(*(_QWORD *)(a1 + 32) + 12 * v38[1].u8[3]);
      v39.i32[3] = 0;
      v40 = &v38->f32[3];
      v41 = vld1_dup_f32(v40);
      v42 = *v38;
      v42.i32[3] = 0;
      v43 = *(float32x4_t **)(a3 + 48);
      v44 = vmulq_f32(v42, *v43);
      v44.i64[0] = vpaddq_f32(v44, v44).u64[0];
      v45 = vmulq_f32(v42, v43[1]);
      v45.i64[0] = vpaddq_f32(v45, v45).u64[0];
      v46 = vmulq_f32(v42, v43[2]);
      v46.i64[0] = vpaddq_f32(v46, v46).u64[0];
      *(int8x8_t *)v44.f32 = vext_s8((int8x8_t)vpadd_f32(*(float32x2_t *)v44.f32, *(float32x2_t *)v44.f32), (int8x8_t)vpadd_f32(*(float32x2_t *)v45.f32, *(float32x2_t *)v45.f32), 4uLL);
      v44.i64[1] = vpadd_f32(*(float32x2_t *)v46.f32, *(float32x2_t *)v46.f32).u32[0];
      v47 = vmulq_f32(v44, v44);
      v47.i64[0] = vpaddq_f32(v47, v47).u64[0];
      *(float32x2_t *)v47.f32 = vpadd_f32(*(float32x2_t *)v47.f32, *(float32x2_t *)v47.f32);
      *(float32x2_t *)v46.f32 = vrsqrte_f32(*(float32x2_t *)v47.f32);
      *(float32x2_t *)v47.f32 = vmul_f32(*(float32x2_t *)v46.f32, vrsqrts_f32(vmul_f32(*(float32x2_t *)v46.f32, *(float32x2_t *)v46.f32), *(float32x2_t *)v47.f32));
      v48 = vmulq_f32(v39, v42);
      v48.i64[0] = vpaddq_f32(v48, v48).u64[0];
      v49 = vmul_f32(*(float32x2_t *)v47.f32, vpadd_f32(*(float32x2_t *)v48.f32, *(float32x2_t *)v48.f32));
      v50 = vmul_f32(*(float32x2_t *)v47.f32, vneg_f32(v41));
      v51 = vmulq_n_f32(v44, v47.f32[0]);
      v51.i32[3] = 0;
      v64 = (int8x16_t)v51;
      (*(void (**)(uint64_t, int8x16_t *, float32x2_t *, float32x2_t *))(*(_QWORD *)a2 + 24))(a2, &v64, &v66, &v65);
      if (vuzp1_s8((int8x8_t)vdup_lane_s16((int16x4_t)vorr_s8((int8x8_t)vcgt_f32(v49, vadd_f32(*a4, v65)), (int8x8_t)vcgt_f32(v66, vadd_f32(v50, *a4))), 0), (int8x8_t)v66).u32[0] == -1)return 0;
      v52 = vsub_f32(v50, v66);
      a13.n128_u64[1] = v61.n128_u64[1];
      v53 = vcgt_f32((float32x2_t)v61.n128_u64[0], v52).u8[0];
      v54 = (v53 & 1) == 0;
      if ((v53 & 1) != 0)
        v55 = -1;
      else
        v55 = 0;
      v56 = (int8x16_t)vdupq_n_s32(v55);
      v18 = vbslq_s8(v56, v64, v63);
      if (!v54)
        v22 = v37;
      a13.n128_u64[0] = (unint64_t)vbsl_s8(*(int8x8_t *)v56.i8, (int8x8_t)v52, (int8x8_t)v61.n128_u64[0]);
      ++v37;
      v36 += 20;
      if (v37 >= *(unsigned int *)(a1 + 16))
        goto LABEL_23;
    }
  }
  v22 = 0;
  a13.n128_u64[0] = (unint64_t)vdup_n_s32(0x7F7FFFFFu);
LABEL_23:
  if (COERCE_FLOAT(*a5) > (float)(a13.n128_f32[0] + 0.00000011921))
  {
    *a7 = v18;
    *a5 = a13.n128_u64[0];
    *a8 = 1;
  }
  *a6 = v22;
  return 1;
}

uint64_t physx::testPolyEdgeNormal(float32x4_t *a1, unsigned int a2, uint64_t a3, uint64_t a4, _QWORD *a5, float32x2_t *a6, float32x2_t *a7, _OWORD *a8, _DWORD *a9)
{
  uint64_t v12;
  unsigned int v13;
  float32x4_t *v14;
  float32x4_t v15;
  float32x4_t v16;
  float32x4_t v17;
  float32x4_t v18;
  float32x4_t v19;
  float32x4_t v20;
  float32x4_t v21;
  float32x4_t v22;
  float32x4_t v23;
  float32x4_t v24;
  float32x2_t v25;
  float32x4_t v26;
  float32x4_t v27;
  float32x4_t v28;
  float32x4_t v29;
  float32x4_t v30;
  float32x4_t v31;
  float32x4_t v32;
  float32x4_t v33;
  uint64_t v34;
  int8x16_t v35;
  int8x16_t v36;
  int8x8_t v37;
  float32x4_t v38;
  float32x2_t v39;
  float32x2_t v40;
  int v41;
  float32x2_t v47;
  float32x2_t v48;
  int v49;
  unint64_t v50;
  unint64_t v51;
  float32x4_t v52;
  uint64_t v53;
  float32x4_t v54;
  uint64_t v55;
  uint64_t v56;
  float32x4_t v57;
  float32x4_t v58;
  uint64_t v59;
  int v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  unsigned int v65;
  uint64_t v66;
  float32x4_t v67;
  float32x4_t v68;
  int8x16_t v69;
  float32x2_t v70;
  float32x2_t v71;
  int8x16_t v72;
  float32x2_t v73;
  int8x8_t v74;
  float32x4_t v75;
  float32x4_t v76;
  float32x4_t *v77;
  float32x4_t v78;
  float32x4_t v79;
  float32x4_t v80;
  unsigned __int32 v81;
  float32x4_t v82;
  float32x4_t v83;
  float32x2_t v84;
  float32x2_t v85;
  int v86;
  float32x2_t v87;
  float32x2_t v88;
  int v89;
  float32x4_t v90;
  float32x2_t v91;
  float32x2_t *v93;
  unsigned __int8 *v94;
  uint64_t v95;
  float32x4_t v97;
  float32x2_t v98;
  float32x2_t v99;
  uint64_t v100;
  _OWORD v101[7];
  float32x2_t v102;
  float32x2_t v103;
  float32x2_t v104;
  float32x2_t v105[9];

  v12 = 0;
  v13 = 0;
  v105[7] = *(float32x2_t *)MEMORY[0x24BDAC8D0];
  v14 = (float32x4_t *)a5[6];
  v15 = v14[1];
  v16 = a1[3];
  v17 = a1[4];
  v18 = vmulq_n_f32(*v14, v16.f32[0]);
  v18.i32[3] = 0;
  v19 = vmulq_lane_f32(v15, *(float32x2_t *)v16.f32, 1);
  v19.i32[3] = 0;
  v20 = v14[2];
  v21 = vmulq_laneq_f32(v20, v16, 2);
  v21.i32[3] = 0;
  v22 = vaddq_f32(vaddq_f32(v18, v19), v21);
  v23 = vmulq_n_f32(*v14, v17.f32[0]);
  v23.i32[3] = 0;
  v24 = vmulq_lane_f32(v15, *(float32x2_t *)v17.f32, 1);
  v24.i32[3] = 0;
  v25 = *a7;
  v26 = vmulq_laneq_f32(v20, v17, 2);
  v26.i32[3] = 0;
  v27 = vaddq_f32(v23, v24);
  v28 = a1[5];
  v29 = vmulq_n_f32(*v14, v28.f32[0]);
  v29.i32[3] = 0;
  v30 = vmulq_lane_f32(v15, *(float32x2_t *)v28.f32, 1);
  v30.i32[3] = 0;
  v31 = vaddq_f32(v26, v27);
  v32 = vmulq_laneq_f32(v20, v28, 2);
  v32.i32[3] = 0;
  v33 = vaddq_f32(v32, vaddq_f32(v29, v30));
  v101[4] = v22;
  v101[5] = v31;
  v101[6] = v33;
  v34 = 2;
  do
  {
    if (((a2 >> (v34 + 3)) & 1) != 0)
      *(float32x4_t *)v105[2 * v13++ + 1].f32 = vsubq_f32((float32x4_t)v101[v34 + 4], (float32x4_t)v101[v12 + 4]);
    v34 = v12++;
  }
  while (v12 != 3);
  if (v13)
  {
    v35 = (int8x16_t)vsubq_f32(v31, v22);
    v36 = (int8x16_t)vsubq_f32(v33, v22);
    v37 = (int8x8_t)vmls_f32(vmul_f32(*(float32x2_t *)v35.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v36, v36, 4uLL)), (float32x2_t)*(_OWORD *)&vextq_s8(v35, v35, 4uLL), *(float32x2_t *)v36.i8);
    *(int8x8_t *)v38.f32 = vext_s8(v37, (int8x8_t)vmls_f32(vmul_f32((float32x2_t)*(_OWORD *)&vextq_s8(v35, v35, 8uLL), *(float32x2_t *)v36.i8), *(float32x2_t *)v35.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v36, v36, 8uLL)), 4uLL);
    v38.i64[1] = v37.u32[0];
    *(float32x2_t *)v35.i8 = vpadd_f32(vmul_f32(*(float32x2_t *)v38.f32, *(float32x2_t *)v38.f32), vmul_f32((float32x2_t)v37.u32[0], (float32x2_t)v37.u32[0]));
    v39 = vpadd_f32(*(float32x2_t *)v35.i8, *(float32x2_t *)v35.i8);
    v40 = vrsqrte_f32(v39);
    v41 = 4;
    do
    {
      v40 = vmul_f32(v40, vrsqrts_f32(vmul_f32(v40, v40), v39));
      --v41;
    }
    while (v41);
    __asm { FMOV            V9.2S, #1.0 }
    v47 = vmul_f32(v39, (float32x2_t)vbsl_s8((int8x8_t)vdup_lane_s32(vceqz_f32(v39), 0), _D9, (int8x8_t)v40));
    v48 = vrecpe_f32(v47);
    v49 = 4;
    do
    {
      v48 = vmul_f32(v48, vrecps_f32(v47, v48));
      --v49;
    }
    while (v49);
    v50 = *(unsigned int *)(a3 + 16);
    if ((_DWORD)v50)
    {
      v51 = 0;
      v52 = vmulq_n_f32(v38, v48.f32[0]);
      v52.i32[3] = 0;
      v104 = 0;
      v105[0] = 0;
      v102 = 0;
      v103 = 0;
      v53 = v13;
      v54 = (float32x4_t)xmmword_2261A9050;
      v93 = a7;
      v95 = a3;
      v97 = v52;
      do
      {
        v55 = *(_QWORD *)(a3 + 24);
        v56 = v55 + 20 * v51;
        v57.i64[0] = *(_QWORD *)v56;
        v57.i64[1] = *(unsigned int *)(v56 + 8);
        v58 = vmulq_f32(v52, v57);
        v58.i64[0] = vpaddq_f32(v58, v58).u64[0];
        if (vpadd_f32(*(float32x2_t *)v58.f32, *(float32x2_t *)v58.f32).f32[0] <= 0.0)
        {
          v59 = v55 + 20 * v51;
          v60 = *(unsigned __int8 *)(v59 + 18);
          v94 = (unsigned __int8 *)(v59 + 18);
          if (*(_BYTE *)(v59 + 18))
          {
            v61 = 0;
            v62 = *(_QWORD *)(a3 + 40) + *(unsigned __int16 *)(v56 + 16);
            LODWORD(v63) = v60 - 1;
            while (2)
            {
              v64 = 0;
              v65 = *(unsigned __int8 *)(v62 + v63);
              v63 = v61;
              v66 = *(_QWORD *)(v95 + 32);
              v67 = *(float32x4_t *)(v66 + 12 * *(unsigned __int8 *)(v62 + v63));
              v67.i32[3] = 0;
              v68 = *(float32x4_t *)(v66 + 12 * v65);
              v68.i32[3] = 0;
              v69 = (int8x16_t)vsubq_f32(v68, v67);
              v70 = (float32x2_t)vextq_s8(v69, v69, 8uLL).u64[0];
              v71 = (float32x2_t)vextq_s8(v69, v69, 4uLL).u64[0];
              v99 = v70;
              v100 = v69.i64[0];
              v98 = v71;
              do
              {
                v72 = *(int8x16_t *)v105[2 * v64 + 1].f32;
                v73 = (float32x2_t)vextq_s8(v72, v72, 8uLL).u64[0];
                v74 = (int8x8_t)vmls_f32(vmul_f32(*(float32x2_t *)v69.i8, (float32x2_t)vext_s8(*(int8x8_t *)v72.i8, (int8x8_t)v73, 4uLL)), v71, *(float32x2_t *)v72.i8);
                *(int8x8_t *)v75.f32 = vext_s8(v74, (int8x8_t)vmls_f32(vmul_f32(v70, *(float32x2_t *)v72.i8), *(float32x2_t *)v69.i8, v73), 4uLL);
                v75.i64[1] = v74.u32[0];
                if ((~vuzp1_s8((int8x8_t)vmovn_s32(vcgtq_f32(v54, vabsq_f32(v75))), *(int8x8_t *)v75.f32).u32[0] & 0xFFFFFF) != 0)
                {
                  v76 = vmulq_f32(v52, v75);
                  v76.i64[0] = vpaddq_f32(v76, v76).u64[0];
                  if (vpadd_f32(*(float32x2_t *)v76.f32, *(float32x2_t *)v76.f32).f32[0] > 0.0)
                  {
                    v77 = (float32x4_t *)a5[6];
                    v78 = vmulq_f32(v75, *v77);
                    v78.i64[0] = vpaddq_f32(v78, v78).u64[0];
                    v79 = vmulq_f32(v75, v77[1]);
                    v79.i64[0] = vpaddq_f32(v79, v79).u64[0];
                    v80 = vmulq_f32(v75, v77[2]);
                    v80.i64[0] = vpaddq_f32(v80, v80).u64[0];
                    v81 = vpadd_f32(*(float32x2_t *)v80.f32, *(float32x2_t *)v80.f32).u32[0];
                    *(int8x8_t *)v82.f32 = vext_s8((int8x8_t)vpadd_f32(*(float32x2_t *)v78.f32, *(float32x2_t *)v78.f32), (int8x8_t)vpadd_f32(*(float32x2_t *)v79.f32, *(float32x2_t *)v79.f32), 4uLL);
                    v82.i64[1] = v81;
                    v83 = vmulq_f32(v82, v82);
                    v83.i64[0] = vpaddq_f32(v83, v83).u64[0];
                    v84 = vpadd_f32(*(float32x2_t *)v83.f32, *(float32x2_t *)v83.f32);
                    v85 = vrsqrte_f32(v84);
                    v86 = 4;
                    do
                    {
                      v85 = vmul_f32(v85, vrsqrts_f32(vmul_f32(v85, v85), v84));
                      --v86;
                    }
                    while (v86);
                    v87 = vmul_f32(v84, (float32x2_t)vbsl_s8((int8x8_t)vdup_lane_s32(vceqz_f32(v84), 0), _D9, (int8x8_t)v85));
                    v88 = vrecpe_f32(v87);
                    v89 = 4;
                    do
                    {
                      v88 = vmul_f32(v88, vrecps_f32(v87, v88));
                      --v89;
                    }
                    while (v89);
                    v90 = vmulq_n_f32(v82, v88.f32[0]);
                    v90.i32[3] = 0;
                    v101[0] = v90;
                    (*(void (**)(uint64_t, _OWORD *, float32x2_t *, float32x2_t *))(*(_QWORD *)a4 + 24))(a4, v101, v105, &v104);
                    (*(void (**)(_QWORD *, _OWORD *, float32x2_t *, float32x2_t *))(*a5 + 24))(a5, v101, &v103, &v102);
                    if (vuzp1_s8((int8x8_t)vdup_lane_s16((int16x4_t)vorr_s8((int8x8_t)vcgt_f32(v105[0], vadd_f32(*a6, v102)), (int8x8_t)vcgt_f32(v103, vadd_f32(v104, *a6))), 0), (int8x8_t)v103).u32[0] == -1)return 0;
                    v91 = vsub_f32(v104, v103);
                    v52 = v97;
                    if ((vcgt_f32(v25, v91).u8[0] & 1) != 0)
                    {
                      *a8 = v101[0];
                      *a9 = 2;
                      v25 = v91;
                    }
                    v54 = (float32x4_t)xmmword_2261A9050;
                    v70 = v99;
                    v69.i64[0] = v100;
                    v71 = v98;
                  }
                }
                ++v64;
              }
              while (v64 != v53);
              v61 = v63 + 1;
              if (v63 + 1 < (unint64_t)*v94)
                continue;
              break;
            }
            a3 = v95;
            v50 = *(unsigned int *)(v95 + 16);
            a7 = v93;
          }
        }
        ++v51;
      }
      while (v51 < v50);
    }
    *a7 = v25;
  }
  return 1;
}

void physx::generatedTriangleContacts(uint64_t a1, __int32 a2, uint64_t a3, float32x4_t *a4, uint64_t a5, uint64_t a6, _DWORD *a7, _QWORD *a8, int32x4_t *a9)
{
  float32x4_t v15;
  float32x4_t v16;
  float32x4_t v17;
  unsigned __int8 *v18;
  size_t v19;
  uint64_t v20;
  size_t v21;
  char *v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  size_t v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  int32x4_t v31;
  uint64_t v32;
  void (*v33)(uint64_t, unsigned __int8 *, size_t, uint64_t, unint64_t);
  float32x4_t v34;
  float32x4_t v35;
  float32x4_t v36;
  uint64_t v37;
  float32x4_t v38;
  float32x4_t v39;
  float32x4_t v40;
  float32x4_t v41;
  float32x4_t v42;
  float32x4_t v43;
  float32x4_t v44;
  float32x4_t v45;
  float32x4_t v46;
  float32x4_t v47;
  unint64_t v48;
  int v49;
  unint64_t v50;
  float32x4_t v51;
  float32x4_t v52;
  float32x2_t v53;
  float32x4_t v54;
  float v55;
  float32x4_t v56;
  float32x4_t v57;
  int8x16_t v58;
  int32x4_t v59;
  float32x4_t v60;
  float32x4_t v61;
  float32x4_t v62;
  float32x4_t v63;
  int8x16_t v64;
  float32x4_t v65;
  float32x4_t v66;
  float v67;
  unsigned __int32 v68;
  unint64_t v70;
  uint64_t v71;
  float32x2_t v72;
  float32x2_t v73;
  char v74;
  uint64_t v75;
  int32x4_t v76;
  float32x2_t v77;
  int32x4_t v78;
  float32x2_t v79;
  float32x2_t v80;
  float32x2_t v81;
  float32x2_t v82;
  float32x2_t v83;
  int8x8_t v84;
  int8x8_t v85;
  int8x8_t v86;
  float32x4_t v87;
  float32x4_t v88;
  int8x16_t v89;
  uint64_t v90;
  uint64_t v91;
  int v92;
  float32x4_t v93;
  float32x4_t v94;
  float32x4_t *v95;
  float32x4_t v96;
  float32x4_t v97;
  float32x4_t v98;
  unsigned __int32 v99;
  float32x4_t v100;
  float32x4_t v101;
  float32x4_t v102;
  float32x2_t v103;
  float32x2_t v104;
  int v105;
  float32x2_t v110;
  float32x2_t v111;
  int v112;
  uint64_t v113;
  int v114;
  float *v115;
  float32x4_t v116;
  float32x4_t *v117;
  float32x4_t v118;
  float32x4_t v119;
  float32x4_t v120;
  float32x4_t v121;
  float32x2_t v122;
  float32x4_t v123;
  int32x4_t v124;
  uint64_t v125;
  float32x4_t v126;
  int32x2_t v127;
  uint64_t v129;
  float32x2_t v130;
  float32x2_t v131;
  uint64_t v132;
  char v133;
  __int128 v134;
  float32x2_t v135;
  __int128 v136;
  float32x2_t v137;
  float32x2_t v138;
  float32x2_t v139;
  float32x2_t v140;
  float32x2_t v141;
  int8x8_t v142;
  int8x8_t v143;
  int8x8_t v144;
  float32x4_t v145;
  float32x4_t v146;
  float32x4_t v147;
  unsigned __int32 v148;
  float32x4_t v149;
  float32x4_t v150;
  float v151;
  float32x4_t v152;
  float32x4_t v153;
  float32x4_t v154;
  uint64_t v155;
  float32x4_t *v156;
  int v157;
  uint64_t v158;
  unint64_t v159;
  float32x4_t v160;
  int32x4_t v161;
  float32x4_t v162;
  uint64_t v163;
  float32x4_t v164;
  float32x4_t v165;
  uint64_t v166;
  uint64_t v167;
  float32x4_t v168;
  float32x4_t v169;
  int32x2_t v170;
  int32x2_t v171;
  float32x2_t v172;
  float32x2_t v173;
  int32x2_t v174;
  float32x2_t v175;
  float32x2_t v176;
  float32x2_t v177;
  float32x2_t v178;
  float32x2_t v179;
  float32x2_t v180;
  float32x2_t v181;
  float32x2_t v182;
  float32x2_t v183;
  int v184;
  float32x4_t v185;
  int32x4_t v186;
  float32x4_t v187;
  float32x4_t v188;
  float32x4_t v189;
  float32x4_t v190;
  float32x4_t v191;
  float32x4_t v192;
  float32x4_t v193;
  float32x4_t v194;
  uint64_t v195;
  float32x4_t *v196;
  int v197;
  float32x4_t v198;
  float32x4_t v199;
  uint64_t v200;
  uint64_t v201;
  unsigned __int8 *v202;
  int8x16_t v203;
  float32x4_t v204;
  float32x4_t v205;
  float32x4_t v206;
  float32x4_t v207;
  float32x4_t v208;
  float32x4_t v209;
  float32x4_t v210;
  int32x4_t v211;
  float32x4_t v212;
  float32x4_t v213;
  float32x4_t v214;
  float32x4_t *v215;
  __int32 v216;
  uint64_t v217;
  uint64_t v218;
  int32x4_t v219[2];
  float32x4_t v220;
  uint64_t v221;

  v218 = a6;
  v216 = a2;
  v221 = *MEMORY[0x24BDAC8D0];
  v217 = *a7;
  v215 = (float32x4_t *)a9;
  *(int8x8_t *)v15.f32 = physx::Gu::findRotationMatrixFromZAxis(a9);
  v213 = v16;
  v214 = v15;
  v212 = v17;
  v18 = (unsigned __int8 *)(*(_QWORD *)(a3 + 40) + a4[1].u16[0]);
  v19 = a4[1].u8[2];
  MEMORY[0x24BDAC7A8](v20);
  v22 = (char *)&v198 - v21;
  bzero((char *)&v198 - v21, v21);
  v23 = (unint64_t)(v22 + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v24);
  v26 = (char *)&v198 - v25;
  bzero((char *)&v198 - v25, v27);
  v211.i64[0] = (uint64_t)(v26 + 15);
  MEMORY[0x24BDAC7A8](v28);
  v30 = (char *)&v198 - v29;
  v31 = *(int32x4_t *)(a1 + 64);
  v219[0] = *(int32x4_t *)(a1 + 48);
  v219[1] = v31;
  v220 = *(float32x4_t *)(a1 + 80);
  v32 = *(_QWORD *)(a3 + 32);
  v33 = *(void (**)(uint64_t, unsigned __int8 *, size_t, uint64_t, unint64_t))(*(_QWORD *)a5 + 32);
  v202 = v18;
  v33(a5, v18, v19, v32, v23);
  v35 = v212;
  v34 = v213;
  v36 = v214;
  v37 = 0;
  v38 = (float32x4_t)xmmword_2261AA230;
  v39 = (float32x4_t)xmmword_2261A69F0;
  do
  {
    v40 = (float32x4_t)v219[v37];
    v41 = vmulq_n_f32(v36, v40.f32[0]);
    v41.i32[3] = 0;
    v42 = vmulq_lane_f32(v34, *(float32x2_t *)v40.f32, 1);
    v42.i32[3] = 0;
    v43 = vmulq_laneq_f32(v35, v40, 2);
    v43.i32[3] = 0;
    v44 = vaddq_f32(v43, vaddq_f32(v41, v42));
    v219[v37] = (int32x4_t)v44;
    v39 = vminq_f32(v39, v44);
    v38 = vmaxq_f32(v38, v44);
    ++v37;
  }
  while (v37 != 3);
  v209 = v39;
  v210 = v38;
  bzero(v30, v19);
  v46 = v212;
  v45 = v213;
  v47 = v214;
  if (a4[1].i8[2])
  {
    v200 = a3;
    v201 = a5;
    v48 = 0;
    v49 = 0;
    v50 = v211.i64[0] & 0xFFFFFFFFFFFFFFF0;
    v198 = (float32x4_t)xmmword_2261AA650;
    v51 = vaddq_f32(v209, (float32x4_t)xmmword_2261AA650);
    v52 = (float32x4_t)v219[0];
    v53 = (float32x2_t)vdup_laneq_s32(v219[0], 2);
    v199 = (float32x4_t)xmmword_2261AA660;
    v54 = vaddq_f32(v210, (float32x4_t)xmmword_2261AA660);
    v55 = *(float *)&v219[0].i32[2] + COERCE_FLOAT(*a8);
    v210.i64[0] = v218 + (v217 << 6);
    v56 = (float32x4_t)xmmword_2261AA230;
    v57 = (float32x4_t)xmmword_2261A69F0;
    v209.i32[0] = v217 + 5;
    v58 = vextq_s8((int8x16_t)v52, (int8x16_t)v52, 8uLL);
    v59.i64[0] = -1;
    v59.i64[1] = -1;
    v211 = v219[0];
    v205 = v51;
    v204 = v54;
    v203 = v58;
    do
    {
      v60 = *(float32x4_t *)(v23 + 16 * v48);
      v61 = vmulq_n_f32(v47, v60.f32[0]);
      v61.i32[3] = 0;
      v62 = vmulq_lane_f32(v45, *(float32x2_t *)v60.f32, 1);
      v62.i32[3] = 0;
      v63 = vmulq_laneq_f32(v46, v60, 2);
      v63.i32[3] = 0;
      v64 = (int8x16_t)vaddq_f32(v63, vaddq_f32(v61, v62));
      *(int8x16_t *)(v23 + 16 * v48) = v64;
      *(int32x2_t *)(v50 + 8 * v48) = vdup_lane_s32((int32x2_t)vsub_f32((float32x2_t)*(_OWORD *)&vextq_s8(v64, v64, 8uLL), *(float32x2_t *)v58.i8), 0);
      v65 = *(float32x4_t *)(v23 + 16 * v48);
      v66 = v65;
      v66.i32[2] = v52.i32[2];
      *(float32x4_t *)(v23 + 16 * v48) = v66;
      v67 = *(float *)&v64.i32[2];
      v64.i64[0] = vorrq_s8((int8x16_t)vcgtq_f32(v51, v66), (int8x16_t)vcgtq_f32(v66, v54)).u64[0];
      v68 = vuzp1_s8((int8x8_t)vmovn_s32(vceqq_s32((int32x4_t)vorrq_s8((int8x16_t)vdupq_lane_s32(*(int32x2_t *)v64.i8, 0), (int8x16_t)vdupq_lane_s32(*(int32x2_t *)v64.i8, 1)), v59)), *(int8x8_t *)v60.f32).u32[0];
      if (v55 > *(float *)&v64.i32[2] && v68 != -1)
      {
        v71 = 0;
        v72 = (float32x2_t)vdup_lane_s32(*(int32x2_t *)v65.f32, 0);
        v73 = (float32x2_t)vdup_lane_s32(*(int32x2_t *)v65.f32, 1);
        v74 = 1;
        LODWORD(v75) = 2;
        while (1)
        {
          v76 = v219[v75];
          v75 = v71;
          v77 = (float32x2_t)vdup_lane_s32(*(int32x2_t *)v76.i8, 1);
          v78 = v219[v71];
          v79 = (float32x2_t)vdup_lane_s32(*(int32x2_t *)v78.i8, 1);
          v80 = (float32x2_t)vdup_lane_s32(*(int32x2_t *)v76.i8, 0);
          v81 = (float32x2_t)vdup_lane_s32(*(int32x2_t *)v78.i8, 0);
          if (vuzp1_s8((int8x8_t)vdup_lane_s16((int16x4_t)vorr_s8(vand_s8((int8x8_t)vceq_f32(v72, v81), (int8x8_t)vceq_f32(v73, v79)), vand_s8((int8x8_t)vceq_f32(v72, v80), (int8x8_t)vceq_f32(v73, v77))), 0), *(int8x8_t *)v60.f32).u32[0] == -1)break;
          if ((veor_s8((int8x8_t)vcgt_f32(v77, v73), (int8x8_t)vcgt_f32(v79, v73)).u8[0] & 1) != 0
            && (v82 = vsub_f32(v79, v77),
                v83 = vmul_f32(vsub_f32(v73, v77), vsub_f32(v81, v80)),
                v84 = (int8x8_t)vmul_n_f32(v82, v65.f32[0]),
                v85 = (int8x8_t)vadd_f32(v83, vmul_f32(vadd_f32(v80, (float32x2_t)0x3400000034000000), v82)),
                v86 = (int8x8_t)vdup_lane_s32(vcgtz_f32(v82), 0),
                (vcge_f32((float32x2_t)vbsl_s8(v86, v85, v84), (float32x2_t)vbsl_s8(v86, v84, v85)).u8[0] & 1) != 0))
          {
            if ((v74 & 1) == 0)
              goto LABEL_10;
            v74 = 0;
            ++v71;
            if (v75 == 2)
              break;
          }
          else
          {
            ++v71;
            if (v75 == 2)
            {
              if ((v74 & 1) != 0)
                goto LABEL_10;
              break;
            }
          }
        }
        v87 = *v215;
        v88 = vmulq_f32(*v215, vsubq_f32(*(float32x4_t *)(a1 + 48), v60));
        v88.i64[0] = vpaddq_f32(v88, v88).u64[0];
        *(float32x2_t *)v88.f32 = vpadd_f32(*(float32x2_t *)v88.f32, *(float32x2_t *)v88.f32);
        v89 = (int8x16_t)vmlaq_n_f32(v60, *v215, v88.f32[0]);
        ++v49;
        v89.i64[1] = vextq_s8(v89, v89, 8uLL).u32[0];
        v88.i64[1] = v88.i64[0];
        v87.i32[3] = vnegq_f32(v88).i32[3];
        v90 = *a7;
        v91 = v218 + (v90 << 6);
        *(float32x4_t *)v91 = v60;
        *(int8x16_t *)(v91 + 16) = v89;
        *(float32x4_t *)(v91 + 32) = v87;
        *(_DWORD *)(v91 + 48) = v216;
        v92 = v90 + 1;
        *a7 = v92;
        if ((v92 - v217) >= 0x10)
        {
          v208 = v56;
          v207 = v57;
          v206 = v66;
          physx::Gu::SinglePersistentContactManifold::reduceContacts(v210.i64[0], v92 - v217);
          v66 = v206;
          v59.i64[0] = -1;
          v59.i64[1] = -1;
          v58.i64[0] = v203.i64[0];
          v57 = v207;
          v54 = v204;
          v51 = v205;
          v56 = v208;
          v52 = (float32x4_t)v211;
          v46 = v212;
          v45 = v213;
          v47 = v214;
          *a7 = v209.i32[0];
        }
      }
LABEL_10:
      v57 = vminq_f32(v57, v66);
      v56 = vmaxq_f32(v56, v66);
      v30[v48++] = v55 > v67;
      v70 = a4[1].u8[2];
    }
    while (v48 < v70);
    if (v49 != (_DWORD)v70)
    {
      v93 = vaddq_f32(v57, v198);
      v94 = *a4;
      v94.i64[1] = a4->u32[2];
      v95 = *(float32x4_t **)(v201 + 48);
      v96 = vmulq_f32(*v95, v94);
      v97 = vmulq_f32(v94, v95[1]);
      v98 = vmulq_f32(v94, v95[2]);
      v96.i64[0] = vpaddq_f32(v96, v96).u64[0];
      v97.i64[0] = vpaddq_f32(v97, v97).u64[0];
      v98.i64[0] = vpaddq_f32(v98, v98).u64[0];
      v99 = vpadd_f32(*(float32x2_t *)v98.f32, *(float32x2_t *)v98.f32).u32[0];
      *(int8x8_t *)v100.f32 = vext_s8((int8x8_t)vpadd_f32(*(float32x2_t *)v96.f32, *(float32x2_t *)v96.f32), (int8x8_t)vpadd_f32(*(float32x2_t *)v97.f32, *(float32x2_t *)v97.f32), 4uLL);
      v100.i64[1] = v99;
      v101 = vaddq_f32(v56, v199);
      v102 = vmulq_f32(v100, v100);
      v102.i64[0] = vpaddq_f32(v102, v102).u64[0];
      v103 = vpadd_f32(*(float32x2_t *)v102.f32, *(float32x2_t *)v102.f32);
      v104 = vrsqrte_f32(v103);
      v105 = 4;
      do
      {
        v104 = vmul_f32(v104, vrsqrts_f32(vmul_f32(v104, v104), v103));
        --v105;
      }
      while (v105);
      __asm { FMOV            V4.2S, #1.0 }
      v110 = vmul_f32(v103, (float32x2_t)vbsl_s8((int8x8_t)vdup_lane_s32(vceqz_f32(v103), 0), _D4, (int8x8_t)v104));
      v111 = vrecpe_f32(v110);
      v112 = 4;
      do
      {
        v111 = vmul_f32(v111, vrecps_f32(v110, v111));
        --v112;
      }
      while (v112);
      v113 = 0;
      v114 = 0;
      v115 = (float *)(*(_QWORD *)(v200 + 32) + 12 * *v202);
      v116 = vmulq_n_f32(v100, v111.f32[0]);
      v116.i32[3] = 0;
      v117 = *(float32x4_t **)(v201 + 40);
      v118 = vmulq_n_f32(*v117, *v115);
      v118.i32[3] = 0;
      v119 = vmulq_n_f32(v117[1], v115[1]);
      v119.i32[3] = 0;
      v120 = vmulq_n_f32(v117[2], v115[2]);
      v120.i32[3] = 0;
      v121 = vmulq_f32(v116, vaddq_f32(vaddq_f32(v118, v119), v120));
      v121.i64[0] = vpaddq_f32(v121, v121).u64[0];
      v122 = vpadd_f32(*(float32x2_t *)v121.f32, *(float32x2_t *)v121.f32);
      v123 = vnegq_f32(v116);
      v124.i64[0] = -1;
      v124.i64[1] = -1;
      v208 = v93;
      v207 = v101;
      v206 = v116;
      v205 = v123;
      do
      {
        v125 = a4[1].u8[2];
        v126 = (float32x4_t)v219[v113];
        v127 = (int32x2_t)vorrq_s8((int8x16_t)vcgtq_f32(v93, v126), (int8x16_t)vcgtq_f32(v126, v101)).u64[0];
        if (vuzp1_s8((int8x8_t)vmovn_s32(vceqq_s32((int32x4_t)vorrq_s8((int8x16_t)vdupq_lane_s32(v127, 0), (int8x16_t)vdupq_lane_s32(v127, 1)), v124)), *(int8x8_t *)v126.f32).u32[0] != -1&& (_DWORD)v125 != 0)
        {
          v129 = 0;
          v130 = (float32x2_t)vdup_lane_s32(*(int32x2_t *)v126.f32, 0);
          v131 = (float32x2_t)vdup_lane_s32(*(int32x2_t *)v126.f32, 1);
          LODWORD(v132) = v125 - 1;
          v133 = 1;
          while (1)
          {
            v134 = *(_OWORD *)(v23 + 16 * v132);
            v132 = v129;
            v135 = (float32x2_t)vdup_lane_s32(*(int32x2_t *)&v134, 1);
            v136 = *(_OWORD *)(v23 + 16 * v129);
            v137 = (float32x2_t)vdup_lane_s32(*(int32x2_t *)&v136, 1);
            v138 = (float32x2_t)vdup_lane_s32(*(int32x2_t *)&v134, 0);
            v139 = (float32x2_t)vdup_lane_s32(*(int32x2_t *)&v136, 0);
            if (vuzp1_s8((int8x8_t)vdup_lane_s16((int16x4_t)vorr_s8(vand_s8((int8x8_t)vceq_f32(v130, v139), (int8x8_t)vceq_f32(v131, v137)), vand_s8((int8x8_t)vceq_f32(v130, v138), (int8x8_t)vceq_f32(v131, v135))), 0), *(int8x8_t *)v126.f32).u32[0] == -1)break;
            if ((veor_s8((int8x8_t)vcgt_f32(v135, v131), (int8x8_t)vcgt_f32(v137, v131)).u8[0] & 1) != 0
              && (v140 = vsub_f32(v137, v135),
                  v141 = vmul_f32(vsub_f32(v131, v135), vsub_f32(v139, v138)),
                  v142 = (int8x8_t)vmul_n_f32(v140, v126.f32[0]),
                  v143 = (int8x8_t)vadd_f32(v141, vmul_f32(vadd_f32(v138, (float32x2_t)0x3400000034000000), v140)),
                  v144 = (int8x8_t)vdup_lane_s32(vcgtz_f32(v140), 0),
                  (vcge_f32((float32x2_t)vbsl_s8(v144, v143, v142), (float32x2_t)vbsl_s8(v144, v142, v143)).u8[0] & 1) != 0))
            {
              if ((v133 & 1) == 0)
                goto LABEL_34;
              v133 = 0;
              ++v129;
              if (v125 - 1 == v132)
                break;
            }
            else
            {
              ++v129;
              if (v125 == v132 + 1)
              {
                if ((v133 & 1) != 0)
                  goto LABEL_34;
                break;
              }
            }
          }
          ++v114;
          v145 = vmulq_f32(v47, v126);
          v145.i64[0] = vpaddq_f32(v145, v145).u64[0];
          v146 = vmulq_f32(v45, v126);
          v146.i64[0] = vpaddq_f32(v146, v146).u64[0];
          v147 = vmulq_f32(v46, v126);
          v147.i64[0] = vpaddq_f32(v147, v147).u64[0];
          v148 = vpadd_f32(*(float32x2_t *)v147.f32, *(float32x2_t *)v147.f32).u32[0];
          *(int8x8_t *)v149.f32 = vext_s8((int8x8_t)vpadd_f32(*(float32x2_t *)v145.f32, *(float32x2_t *)v145.f32), (int8x8_t)vpadd_f32(*(float32x2_t *)v146.f32, *(float32x2_t *)v146.f32), 4uLL);
          v149.i64[1] = v148;
          v150 = vmulq_f32(v116, v149);
          v150.i64[0] = vpaddq_f32(v150, v150).u64[0];
          v151 = vsub_f32(vpadd_f32(*(float32x2_t *)v150.f32, *(float32x2_t *)v150.f32), v122).f32[0];
          if (v151 <= COERCE_FLOAT(*a8))
          {
            v152 = vmlaq_n_f32(v149, v123, v151);
            v152.i64[1] = vextq_s8((int8x16_t)v152, (int8x16_t)v152, 8uLL).u32[0];
            v153 = *v215;
            v154 = vmulq_f32(vsubq_f32(v152, v149), *v215);
            v154.i64[0] = vpaddq_f32(v154, v154).u64[0];
            v153.i32[3] = vpadd_f32(*(float32x2_t *)&v154, *(float32x2_t *)&v154).i32[1];
            v155 = *a7;
            v156 = (float32x4_t *)(v218 + (v155 << 6));
            *v156 = v152;
            v156[1] = v149;
            v156[2] = v153;
            v156[3].i32[0] = v216;
            v157 = v155 + 1;
            *a7 = v157;
            if ((v157 - v217) >= 0x10)
            {
              physx::Gu::SinglePersistentContactManifold::reduceContacts(v210.i64[0], v157 - v217);
              v124.i64[0] = -1;
              v124.i64[1] = -1;
              v123 = v205;
              v116 = v206;
              v101 = v207;
              v93 = v208;
              v52 = (float32x4_t)v211;
              v46 = v212;
              v45 = v213;
              v47 = v214;
              *a7 = v209.i32[0];
            }
          }
        }
LABEL_34:
        ++v113;
      }
      while (v113 != 3);
      if (v114 != 3)
      {
        v158 = 0;
        LODWORD(v159) = a4[1].u8[2];
        v160 = v220;
        v161.i64[0] = -1;
        v161.i64[1] = -1;
        do
        {
          v162 = (float32x4_t)v219[v158];
          if ((_DWORD)v159)
          {
            v163 = 0;
            v164 = vminq_f32(v162, v160);
            v165 = vmaxq_f32(v162, v160);
            LODWORD(v166) = v159 - 1;
            v208 = v160;
            v207 = v162;
            v206 = v164;
            v205 = v165;
            do
            {
              v167 = v166;
              v166 = v163;
              if (v30[v163] || v30[v167])
              {
                v168 = *(float32x4_t *)(v23 + 16 * v163);
                v169 = *(float32x4_t *)(v23 + 16 * v167);
                v170 = (int32x2_t)vorrq_s8((int8x16_t)vcgtq_f32(v164, vmaxq_f32(v168, v169)), (int8x16_t)vcgtq_f32(vminq_f32(v168, v169), v165)).u64[0];
                if (vuzp1_s8((int8x8_t)vmovn_s32(vceqq_s32((int32x4_t)vorrq_s8((int8x16_t)vdupq_lane_s32(v170, 0), (int8x16_t)vdupq_lane_s32(v170, 1)), v161)), *(int8x8_t *)v168.f32).u32[0] != -1)
                {
                  v171 = (int32x2_t)vsub_f32(*(float32x2_t *)v162.f32, *(float32x2_t *)v168.f32);
                  v172 = vsub_f32(*(float32x2_t *)v160.f32, *(float32x2_t *)v168.f32);
                  v173 = vsub_f32(vmul_lane_f32((float32x2_t)vdup_lane_s32(v171, 0), v172, 1), vmul_n_f32((float32x2_t)vdup_lane_s32(v171, 1), v172.f32[0]));
                  v174 = (int32x2_t)vsub_f32(*(float32x2_t *)v162.f32, *(float32x2_t *)v169.f32);
                  v175 = vsub_f32(*(float32x2_t *)v160.f32, *(float32x2_t *)v169.f32);
                  v176 = vsub_f32(vmul_lane_f32((float32x2_t)vdup_lane_s32(v174, 0), v175, 1), vmul_n_f32((float32x2_t)vdup_lane_s32(v174, 1), v175.f32[0]));
                  if (vmul_f32(v173, v176).f32[0] < 0.0)
                  {
                    v177 = vsub_f32(*(float32x2_t *)v168.f32, *(float32x2_t *)v162.f32);
                    v178 = vsub_f32(*(float32x2_t *)v169.f32, *(float32x2_t *)v162.f32);
                    v179 = vsub_f32(vmul_lane_f32(v177, v178, 1), vmul_lane_f32(v178, v177, 1));
                    v180 = vsub_f32(*(float32x2_t *)v168.f32, *(float32x2_t *)v160.f32);
                    v181 = vsub_f32(*(float32x2_t *)v169.f32, *(float32x2_t *)v160.f32);
                    if (vmul_f32(v179, vsub_f32(vmul_lane_f32(v180, v181, 1), vmul_lane_f32(v181, v180, 1))).f32[0] < 0.0)
                    {
                      v182 = vsub_f32(v176, v173);
                      v183 = vrecpe_f32(v182);
                      v184 = 4;
                      do
                      {
                        v183 = vmul_f32(v183, vrecps_f32(v182, v183));
                        --v184;
                      }
                      while (v184);
                      v168.i32[2] = vadd_f32(v53, *(float32x2_t *)(v50 + 8 * v166)).u32[0];
                      v169.i32[2] = vadd_f32(v53, *(float32x2_t *)(v50 + 8 * v167)).u32[0];
                      v185 = vmlsq_lane_f32(v168, vsubq_f32(v169, v168), vmul_f32(v173, v183), 0);
                      v186 = (int32x4_t)vsubq_f32(v185, v52);
                      if (*(float *)&v186.i32[2] <= COERCE_FLOAT(*a8))
                      {
                        v185.i64[1] = vextq_s8((int8x16_t)v185, (int8x16_t)v185, 8uLL).u32[0];
                        v187 = v185;
                        v187.i32[2] = v52.i32[2];
                        v188 = vmulq_f32(v47, v185);
                        v188.i64[0] = vpaddq_f32(v188, v188).u64[0];
                        v189 = vmulq_f32(v45, v185);
                        v189.i64[0] = vpaddq_f32(v189, v189).u64[0];
                        *(int8x8_t *)v188.f32 = vext_s8((int8x8_t)vpadd_f32(*(float32x2_t *)v188.f32, *(float32x2_t *)v188.f32), (int8x8_t)vpadd_f32(*(float32x2_t *)v189.f32, *(float32x2_t *)v189.f32), 4uLL);
                        v190 = vmulq_f32(v46, v185);
                        v190.i64[0] = vpaddq_f32(v190, v190).u64[0];
                        v188.i64[1] = vpadd_f32(*(float32x2_t *)v190.f32, *(float32x2_t *)v190.f32).u32[0];
                        v191 = vmulq_f32(v47, v187);
                        v191.i64[0] = vpaddq_f32(v191, v191).u64[0];
                        v192 = vmulq_f32(v45, v187);
                        v192.i64[0] = vpaddq_f32(v192, v192).u64[0];
                        v193 = vmulq_f32(v46, v187);
                        v193.i64[0] = vpaddq_f32(v193, v193).u64[0];
                        *(int8x8_t *)v191.f32 = vext_s8((int8x8_t)vpadd_f32(*(float32x2_t *)v191.f32, *(float32x2_t *)v191.f32), (int8x8_t)vpadd_f32(*(float32x2_t *)v192.f32, *(float32x2_t *)v192.f32), 4uLL);
                        v191.i64[1] = vpadd_f32(*(float32x2_t *)v193.f32, *(float32x2_t *)v193.f32).u32[0];
                        v194 = *v215;
                        v194.i32[3] = vdupq_laneq_s32(v186, 2).i32[3];
                        v195 = *a7;
                        v196 = (float32x4_t *)(v218 + (v195 << 6));
                        *v196 = v188;
                        v196[1] = v191;
                        v196[2] = v194;
                        v196[3].i32[0] = v216;
                        v197 = v195 + 1;
                        *a7 = v197;
                        if ((v197 - v217) >= 0x10)
                        {
                          physx::Gu::SinglePersistentContactManifold::reduceContacts(v210.i64[0], v197 - v217);
                          v165 = v205;
                          v164 = v206;
                          v162 = v207;
                          v160.i64[0] = v208.i64[0];
                          v161.i64[0] = -1;
                          v161.i64[1] = -1;
                          v52 = (float32x4_t)v211;
                          v46 = v212;
                          v45 = v213;
                          v47 = v214;
                          *a7 = v209.i32[0];
                        }
                      }
                    }
                  }
                }
              }
              v163 = v166 + 1;
              v159 = a4[1].u8[2];
            }
            while (v166 + 1 < v159);
          }
          ++v158;
          v160 = v162;
        }
        while (v158 != 3);
      }
    }
  }
}

void physx::generatedPolyContacts(uint64_t a1, uint64_t a2, uint64_t a3, __int32 a4, uint64_t a5, uint64_t a6, _DWORD *a7, _QWORD *a8, int32x4_t *a9)
{
  uint64_t v16;
  float32x4_t v17;
  float32x4_t v18;
  float32x4_t v19;
  uint64_t v20;
  uint64_t v21;
  size_t v22;
  char *v23;
  float32x4_t *v24;
  float32x4_t v25;
  float32x4_t v26;
  float32x4_t v27;
  __int128 v28;
  float32x4_t *v29;
  float32x4_t *v30;
  __int128 v31;
  float32x4_t v32;
  float32x4_t v33;
  float32x4_t v34;
  int8x16_t v35;
  float32x4_t v36;
  float32x4_t v37;
  unint64_t v38;
  float32x4_t v39;
  float32x4_t v40;
  float32x4_t v41;
  float32x4_t v42;
  float32x4_t v43;
  float32x4_t v44;
  float32x4_t v45;
  uint64_t v46;
  int v47;
  float v48;
  int8x16_t v49;
  int32x4_t v50;
  float32x4_t v51;
  float32x4_t v52;
  float32x4_t v53;
  float32x4_t v54;
  int8x16_t v55;
  float32x4_t v56;
  uint64_t v57;
  int32x2_t v58;
  uint64_t v60;
  float32x2_t v61;
  float32x2_t v62;
  uint64_t v63;
  char v64;
  float32x4_t v65;
  float32x2_t v66;
  float32x4_t v67;
  float32x2_t v68;
  float32x2_t v69;
  float32x2_t v70;
  float32x2_t v71;
  float32x2_t v72;
  int8x8_t v73;
  int8x8_t v74;
  int8x8_t v75;
  float32x4_t v76;
  int8x16_t v77;
  float32x4_t v78;
  uint64_t v79;
  uint64_t v80;
  int v81;
  uint64_t v82;
  float32x2_t v83;
  float32x4_t *v84;
  float32x4_t *v85;
  float32x4_t v86;
  int8x16_t v87;
  float32x4_t *v88;
  int8x16_t v89;
  int8x8_t v90;
  float32x4_t v91;
  float32x2_t v92;
  float32x2_t v93;
  int v94;
  float32x2_t v99;
  float32x2_t v100;
  int v101;
  unint64_t v102;
  unint64_t v103;
  float32x4_t v104;
  float32x4_t v105;
  float32x4_t v106;
  float32x4_t v107;
  float32x2_t v108;
  int32x4_t v109;
  float32x4_t v110;
  int32x2_t v111;
  uint64_t v112;
  float32x2_t v113;
  float32x2_t v114;
  char v115;
  uint64_t v116;
  __int128 v117;
  float32x2_t v118;
  __int128 v119;
  float32x2_t v120;
  float32x2_t v121;
  float32x2_t v122;
  float32x2_t v123;
  float32x2_t v124;
  int8x8_t v125;
  int8x8_t v126;
  int8x8_t v127;
  float32x4_t v128;
  float32x4_t v129;
  float32x4_t v130;
  float32x4_t v131;
  float32x4_t v132;
  float v133;
  int8x16_t v134;
  int8x8_t v135;
  float32x4_t v136;
  float32x4_t v137;
  float32x4_t v138;
  uint64_t v139;
  float32x4_t *v140;
  int v141;
  float32x4_t v142;
  uint64_t v143;
  uint64_t v144;
  int32x4_t v145;
  int v146;
  uint64_t v147;
  uint64_t v148;
  float32x4_t v149;
  float32x4_t v150;
  float32x4_t v151;
  float32x4_t v152;
  uint64_t v153;
  float32x4_t v154;
  float32x4_t v155;
  int32x2_t v156;
  int8x8_t v157;
  int32x2_t v158;
  float32x2_t v159;
  float32x2_t v160;
  int32x2_t v161;
  float32x2_t v162;
  float32x2_t v163;
  float32x2_t v164;
  float32x2_t v165;
  float32x2_t v166;
  float32x2_t v167;
  float32x2_t v168;
  float32x2_t v169;
  float32x2_t v170;
  int v171;
  float32x2_t v172;
  float32x4_t v173;
  float32x4_t v174;
  float32x4_t v175;
  int32x4_t v176;
  float32x4_t v177;
  float32x4_t v178;
  float32x4_t v179;
  float32x4_t v180;
  float32x4_t v181;
  float32x4_t v182;
  float32x4_t v183;
  float32x4_t v184;
  uint64_t v185;
  float32x4_t *v186;
  int v187;
  uint64_t v188;
  float32x4_t *v189;
  float32x4_t *v190;
  float32x4_t *v191;
  int8x16_t v192;
  float32x4_t v193;
  float32x4_t v194;
  float32x4_t v195;
  uint64_t v196;
  int v197;
  uint64_t v198;
  int8x16_t v199;
  float32x4_t v200;
  float32x4_t v201;
  float32x4_t v202;
  float32x4_t v203;
  float32x4_t v204;
  float32x4_t v205;
  float32x4_t v206;
  float32x4_t v207;
  __int32 v208;
  uint64_t v209;
  float32x2_t v210;
  float32x2_t v211;
  float32x4_t v212[2];
  _OWORD v213[3];
  uint64_t v214;

  v208 = a4;
  v214 = *MEMORY[0x24BDAC8D0];
  v209 = *a7;
  v16 = *(_QWORD *)(a1 + 40) + *(unsigned __int16 *)(a2 + 16);
  v207 = *(float32x4_t *)a9;
  v203.i64[0] = (uint64_t)a9;
  *(int8x8_t *)v17.f32 = physx::Gu::findRotationMatrixFromZAxis(a9);
  v206 = v17;
  v205 = v18;
  v204 = v19;
  v20 = *(unsigned __int8 *)(a2 + 18);
  MEMORY[0x24BDAC7A8](v21);
  v23 = (char *)&v188 - v22;
  bzero((char *)&v188 - v22, v22);
  v24 = (float32x4_t *)((unint64_t)(v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, _QWORD, float32x4_t *))(*(_QWORD *)a5 + 32))(a5, v16, v20, *(_QWORD *)(a1 + 32), v24);
  v25 = v204;
  v26 = v205;
  v27 = v206;
  v28 = *(_OWORD *)(a3 + 64);
  a3 += 64;
  v29 = (float32x4_t *)(a3 - 16);
  v213[0] = *(_OWORD *)(a3 - 16);
  v213[1] = v28;
  v191 = (float32x4_t *)a3;
  v31 = *(_OWORD *)(a3 + 16);
  v30 = (float32x4_t *)(a3 + 16);
  v213[2] = v31;
  v32 = *v24;
  v33 = (float32x4_t)xmmword_2261A69F0;
  v34 = (float32x4_t)xmmword_2261AA230;
  v35 = *(int8x16_t *)v24;
  v36 = (float32x4_t)xmmword_2261AA230;
  v37 = (float32x4_t)xmmword_2261A69F0;
  if (*(_BYTE *)(a2 + 18))
  {
    v38 = 0;
    v39 = (float32x4_t)xmmword_2261AA230;
    v40 = (float32x4_t)xmmword_2261A69F0;
    do
    {
      v41 = v24[v38];
      v42 = vmulq_n_f32(v27, v41.f32[0]);
      v42.i32[3] = 0;
      v43 = vmulq_lane_f32(v26, *(float32x2_t *)v41.f32, 1);
      v43.i32[3] = 0;
      v44 = vmulq_laneq_f32(v25, v41, 2);
      v44.i32[3] = 0;
      v45 = vaddq_f32(v44, vaddq_f32(v42, v43));
      v24[v38] = v45;
      v40 = vminq_f32(v40, v45);
      v39 = vmaxq_f32(v39, v45);
      ++v38;
    }
    while (v38 < *(unsigned __int8 *)(a2 + 18));
    v35 = *(int8x16_t *)v24;
    v37 = vaddq_f32(v40, (float32x4_t)xmmword_2261AA650);
    v36 = vaddq_f32(v39, (float32x4_t)xmmword_2261AA660);
  }
  v189 = v30;
  v190 = v29;
  v46 = 0;
  v47 = 0;
  v207 = vnegq_f32(v207);
  v48 = *(float *)&v35.i32[2] + COERCE_FLOAT(*a8);
  v196 = a6;
  v198 = a6 + (v209 << 6);
  v197 = v209 + 5;
  v49 = vextq_s8(v35, v35, 8uLL);
  v50.i64[0] = -1;
  v50.i64[1] = -1;
  v199 = v35;
  v195 = v32;
  v194 = v37;
  v193 = v36;
  v192 = v49;
  do
  {
    v51 = (float32x4_t)v213[v46];
    v52 = vmulq_n_f32(v27, v51.f32[0]);
    v52.i32[3] = 0;
    v53 = vmulq_lane_f32(v26, *(float32x2_t *)v51.f32, 1);
    v53.i32[3] = 0;
    v54 = vmulq_laneq_f32(v25, v51, 2);
    v54.i32[3] = 0;
    v55 = (int8x16_t)vaddq_f32(v54, vaddq_f32(v52, v53));
    *(int32x2_t *)&v212[1].u32[2 * v46 + 2] = vdup_lane_s32((int32x2_t)vsub_f32((float32x2_t)*(_OWORD *)&vextq_s8(v55, v55, 8uLL), *(float32x2_t *)v49.i8), 0);
    v56 = (float32x4_t)v55;
    v56.i32[2] = v35.i32[2];
    v213[v46] = v56;
    if (v48 > *(float *)&v55.i32[2])
    {
      v212[1].i8[v46 + 5] = 1;
      v57 = *(unsigned __int8 *)(a2 + 18);
      v58 = (int32x2_t)vorrq_s8((int8x16_t)vcgtq_f32(v37, v56), (int8x16_t)vcgtq_f32(v56, v36)).u64[0];
      if (vuzp1_s8((int8x8_t)vmovn_s32(vceqq_s32((int32x4_t)vorrq_s8((int8x16_t)vdupq_lane_s32(v58, 0), (int8x16_t)vdupq_lane_s32(v58, 1)), v50)), *(int8x8_t *)v51.f32).u32[0] != -1&& (_DWORD)v57 != 0)
      {
        v60 = 0;
        v61 = (float32x2_t)vdup_lane_s32(*(int32x2_t *)v55.i8, 0);
        v62 = (float32x2_t)vdup_lane_s32(*(int32x2_t *)v55.i8, 1);
        LODWORD(v63) = v57 - 1;
        v64 = 1;
        while (1)
        {
          v65 = v24[v63];
          v63 = v60;
          v66 = (float32x2_t)vdup_lane_s32(*(int32x2_t *)v65.f32, 1);
          v67 = v24[v60];
          v68 = (float32x2_t)vdup_lane_s32(*(int32x2_t *)v67.f32, 1);
          v69 = (float32x2_t)vdup_lane_s32(*(int32x2_t *)v65.f32, 0);
          v70 = (float32x2_t)vdup_lane_s32(*(int32x2_t *)v67.f32, 0);
          if (vuzp1_s8((int8x8_t)vdup_lane_s16((int16x4_t)vorr_s8(vand_s8((int8x8_t)vceq_f32(v61, v70), (int8x8_t)vceq_f32(v62, v68)), vand_s8((int8x8_t)vceq_f32(v61, v69), (int8x8_t)vceq_f32(v62, v66))), 0), *(int8x8_t *)v51.f32).u32[0] == -1)break;
          if ((veor_s8((int8x8_t)vcgt_f32(v66, v62), (int8x8_t)vcgt_f32(v68, v62)).u8[0] & 1) != 0
            && (v71 = vsub_f32(v68, v66),
                v72 = vmul_f32(vsub_f32(v62, v66), vsub_f32(v70, v69)),
                v73 = (int8x8_t)vmul_n_f32(v71, *(float *)v55.i32),
                v74 = (int8x8_t)vadd_f32(v72, vmul_f32(vadd_f32(v69, (float32x2_t)0x3400000034000000), v71)),
                v75 = (int8x8_t)vdup_lane_s32(vcgtz_f32(v71), 0),
                (vcge_f32((float32x2_t)vbsl_s8(v75, v74, v73), (float32x2_t)vbsl_s8(v75, v73, v74)).u8[0] & 1) != 0))
          {
            if ((v64 & 1) == 0)
              goto LABEL_12;
            v64 = 0;
            ++v60;
            if (v57 - 1 == v63)
              break;
          }
          else
          {
            ++v60;
            if (v57 == v63 + 1)
            {
              if ((v64 & 1) != 0)
                goto LABEL_12;
              break;
            }
          }
        }
        ++v47;
        v76 = vmulq_f32(vsubq_f32(v51, v32), *(float32x4_t *)v203.i64[0]);
        v76.i64[0] = vpaddq_f32(v76, v76).u64[0];
        *(float32x2_t *)v76.f32 = vpadd_f32(*(float32x2_t *)v76.f32, *(float32x2_t *)v76.f32);
        v77 = (int8x16_t)vmlsq_lane_f32(v51, *(float32x4_t *)v203.i64[0], *(float32x2_t *)v76.f32, 0);
        v77.i64[1] = vextq_s8(v77, v77, 8uLL).u32[0];
        v78 = v207;
        v78.i32[3] = v76.i32[1];
        v79 = *a7;
        v80 = v196 + (v79 << 6);
        *(int8x16_t *)v80 = v77;
        *(float32x4_t *)(v80 + 16) = v51;
        *(float32x4_t *)(v80 + 32) = v78;
        *(_DWORD *)(v80 + 48) = v208;
        v81 = v79 + 1;
        *a7 = v81;
        if ((v81 - v209) >= 0x10)
        {
          v202 = v33;
          v201 = v34;
          v200 = v56;
          physx::Gu::SinglePersistentContactManifold::reduceContacts(v198, v81 - v209);
          v56 = v200;
          v50.i64[0] = -1;
          v50.i64[1] = -1;
          v49.i64[0] = v192.i64[0];
          v36 = v193;
          v37 = v194;
          v32 = v195;
          v34 = v201;
          v33 = v202;
          v35 = v199;
          v25 = v204;
          v26 = v205;
          v27 = v206;
          *a7 = v197;
        }
      }
    }
LABEL_12:
    v33 = vminq_f32(v33, v56);
    v34 = vmaxq_f32(v34, v56);
    ++v46;
  }
  while (v46 != 3);
  v82 = v196;
  if (v47 != 3)
  {
    v83 = (float32x2_t)vdup_laneq_s32((int32x4_t)v35, 2);
    v84 = v191;
    v85 = v190;
    v86 = *v190;
    v87 = (int8x16_t)vsubq_f32(*v191, *v190);
    v88 = v189;
    v89 = (int8x16_t)vsubq_f32(*v189, *v190);
    v90 = (int8x8_t)vmls_f32(vmul_f32(*(float32x2_t *)v87.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v89, v89, 4uLL)), (float32x2_t)*(_OWORD *)&vextq_s8(v87, v87, 4uLL), *(float32x2_t *)v89.i8);
    *(int8x8_t *)v91.f32 = vext_s8(v90, (int8x8_t)vmls_f32(vmul_f32((float32x2_t)*(_OWORD *)&vextq_s8(v87, v87, 8uLL), *(float32x2_t *)v89.i8), *(float32x2_t *)v87.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v89, v89, 8uLL)), 4uLL);
    v91.i64[1] = v90.u32[0];
    *(float32x2_t *)v89.i8 = vpadd_f32(vmul_f32(*(float32x2_t *)v91.f32, *(float32x2_t *)v91.f32), vmul_f32((float32x2_t)v90.u32[0], (float32x2_t)v90.u32[0]));
    v92 = vpadd_f32(*(float32x2_t *)v89.i8, *(float32x2_t *)v89.i8);
    v93 = vrsqrte_f32(v92);
    v94 = 4;
    do
    {
      v93 = vmul_f32(v93, vrsqrts_f32(vmul_f32(v93, v93), v92));
      --v94;
    }
    while (v94);
    __asm { FMOV            V9.2S, #1.0 }
    v99 = vmul_f32(v92, (float32x2_t)vbsl_s8((int8x8_t)vdup_lane_s32(vceqz_f32(v92), 0), (int8x8_t)_D9, (int8x8_t)v93));
    v100 = vrecpe_f32(v99);
    v101 = 4;
    do
    {
      v100 = vmul_f32(v100, vrecps_f32(v99, v100));
      --v101;
    }
    while (v101);
    LODWORD(v102) = *(unsigned __int8 *)(a2 + 18);
    if (*(_BYTE *)(a2 + 18))
    {
      v103 = 0;
      v201.i32[0] = 0;
      v104 = vaddq_f32(v33, (float32x4_t)xmmword_2261AA650);
      v105 = vaddq_f32(v34, (float32x4_t)xmmword_2261AA660);
      v106 = vmulq_n_f32(v91, v100.f32[0]);
      v106.i32[3] = 0;
      v107 = vmulq_f32(v86, v106);
      v107.i64[0] = vpaddq_f32(v107, v107).u64[0];
      v108 = vpadd_f32(*(float32x2_t *)v107.f32, *(float32x2_t *)v107.f32);
      v200 = vnegq_f32(v106);
      v109.i64[0] = -1;
      v109.i64[1] = -1;
      v195 = v104;
      v194 = v105;
      v193 = v106;
      do
      {
        v110 = v24[v103];
        v111 = (int32x2_t)vorrq_s8((int8x16_t)vcgtq_f32(v104, v110), (int8x16_t)vcgtq_f32(v110, v105)).u64[0];
        if (vuzp1_s8((int8x8_t)vmovn_s32(vceqq_s32((int32x4_t)vorrq_s8((int8x16_t)vdupq_lane_s32(v111, 0), (int8x16_t)vdupq_lane_s32(v111, 1)), v109)), *(int8x8_t *)v110.f32).u32[0] != -1)
        {
          v112 = 0;
          v113 = (float32x2_t)vdup_lane_s32(*(int32x2_t *)v110.f32, 0);
          v114 = (float32x2_t)vdup_lane_s32(*(int32x2_t *)v110.f32, 1);
          v115 = 1;
          LODWORD(v116) = 2;
          while (1)
          {
            v117 = v213[v116];
            v116 = v112;
            v118 = (float32x2_t)vdup_lane_s32(*(int32x2_t *)&v117, 1);
            v119 = v213[v112];
            v120 = (float32x2_t)vdup_lane_s32(*(int32x2_t *)&v119, 1);
            v121 = (float32x2_t)vdup_lane_s32(*(int32x2_t *)&v117, 0);
            v122 = (float32x2_t)vdup_lane_s32(*(int32x2_t *)&v119, 0);
            if (vuzp1_s8((int8x8_t)vdup_lane_s16((int16x4_t)vorr_s8(vand_s8((int8x8_t)vceq_f32(v113, v122), (int8x8_t)vceq_f32(v114, v120)), vand_s8((int8x8_t)vceq_f32(v113, v121), (int8x8_t)vceq_f32(v114, v118))), 0), *(int8x8_t *)v110.f32).u32[0] == -1)break;
            if ((veor_s8((int8x8_t)vcgt_f32(v118, v114), (int8x8_t)vcgt_f32(v120, v114)).u8[0] & 1) != 0
              && (v123 = vsub_f32(v120, v118),
                  v124 = vmul_f32(vsub_f32(v114, v118), vsub_f32(v122, v121)),
                  v125 = (int8x8_t)vmul_n_f32(v123, v110.f32[0]),
                  v126 = (int8x8_t)vadd_f32(v124, vmul_f32(vadd_f32(v121, (float32x2_t)0x3400000034000000), v123)),
                  v127 = (int8x8_t)vdup_lane_s32(vcgtz_f32(v123), 0),
                  (vcge_f32((float32x2_t)vbsl_s8(v127, v126, v125), (float32x2_t)vbsl_s8(v127, v125, v126)).u8[0] & 1) != 0))
            {
              if ((v115 & 1) == 0)
                goto LABEL_48;
              v115 = 0;
              ++v112;
              if (v116 == 2)
                break;
            }
            else
            {
              ++v112;
              if (v116 == 2)
              {
                if ((v115 & 1) != 0)
                  goto LABEL_48;
                break;
              }
            }
          }
          v128 = vmulq_f32(v27, v110);
          v128.i64[0] = vpaddq_f32(v128, v128).u64[0];
          v129 = vmulq_f32(v26, v110);
          v129.i64[0] = vpaddq_f32(v129, v129).u64[0];
          v130 = vmulq_f32(v25, v110);
          v130.i64[0] = vpaddq_f32(v130, v130).u64[0];
          *(int8x8_t *)v131.f32 = vext_s8((int8x8_t)vpadd_f32(*(float32x2_t *)v128.f32, *(float32x2_t *)v128.f32), (int8x8_t)vpadd_f32(*(float32x2_t *)v129.f32, *(float32x2_t *)v129.f32), 4uLL);
          v131.i64[1] = vpadd_f32(*(float32x2_t *)v130.f32, *(float32x2_t *)v130.f32).u32[0];
          v132 = vmulq_f32(v106, v131);
          v132.i64[0] = vpaddq_f32(v132, v132).u64[0];
          v133 = vsub_f32(vpadd_f32(*(float32x2_t *)v132.f32, *(float32x2_t *)v132.f32), v108).f32[0];
          if (v133 <= COERCE_FLOAT(*a8))
          {
            v202 = v131;
            v134 = (int8x16_t)vmlaq_n_f32(v131, v200, v133);
            v134.i64[1] = vextq_s8(v134, v134, 8uLL).u32[0];
            v212[0] = (float32x4_t)v134;
            v210 = 0;
            v211 = 0;
            physx::Gu::barycentricCoordinates(v212, v85, v84, v88, &v211, &v210);
            v135 = (int8x8_t)vdup_lane_s16((int16x4_t)vand_s8(vand_s8((int8x8_t)vcgez_f32(v210), (int8x8_t)vcgez_f32(v211)), (int8x8_t)vcge_f32(_D9, vadd_f32(v211, v210))), 0);
            if (vuzp1_s8(v135, v135).u32[0] == -1)
            {
              ++v201.i32[0];
              v136 = v212[0];
              v137 = vmulq_f32(vsubq_f32(v212[0], v202), *(float32x4_t *)v203.i64[0]);
              v137.i64[0] = vpaddq_f32(v137, v137).u64[0];
              v138 = v207;
              v138.i32[3] = vpadd_f32(*(float32x2_t *)&v137, *(float32x2_t *)&v137).i32[1];
              v139 = *a7;
              v140 = (float32x4_t *)(v82 + (v139 << 6));
              *v140 = v202;
              v140[1] = v136;
              v140[2] = v138;
              v140[3].i32[0] = v208;
              v141 = v139 + 1;
              *a7 = v141;
              if ((v141 - v209) >= 0x10)
              {
                physx::Gu::SinglePersistentContactManifold::reduceContacts(v198, v141 - v209);
                *a7 = v197;
              }
            }
            v27 = v206;
            v26 = v205;
            v25 = v204;
            v104 = v195;
            v105 = v194;
            v106 = v193;
            v109.i64[0] = -1;
            v109.i64[1] = -1;
            LODWORD(v102) = *(unsigned __int8 *)(a2 + 18);
          }
        }
LABEL_48:
        ++v103;
      }
      while (v103 < v102);
    }
    else
    {
      v201.i32[0] = 0;
    }
    v142 = (float32x4_t)v199;
    if (v201.i32[0] != (_DWORD)v102)
    {
      v143 = 0;
      v144 = 2;
      v145.i64[0] = -1;
      v145.i64[1] = -1;
      v146 = v102;
      do
      {
        v147 = v144;
        v144 = v143;
        if ((v212[1].i8[v143 + 5] || v212[1].i8[v147 + 5]) && v146)
        {
          v148 = 0;
          v149 = (float32x4_t)v213[v143];
          v150 = (float32x4_t)v213[v147];
          v151 = vminq_f32(v149, v150);
          v152 = vmaxq_f32(v149, v150);
          LODWORD(v153) = v102 - 1;
          v203 = v149;
          v202 = v150;
          v201 = v151;
          v200 = v152;
          do
          {
            v154 = v24[v153];
            v153 = v148;
            v155 = v24[v148];
            v156 = (int32x2_t)vorrq_s8((int8x16_t)vcgtq_f32(v151, vmaxq_f32(v155, v154)), (int8x16_t)vcgtq_f32(vminq_f32(v155, v154), v152)).u64[0];
            v157 = (int8x8_t)vmovn_s32(vceqq_s32((int32x4_t)vorrq_s8((int8x16_t)vdupq_lane_s32(v156, 0), (int8x16_t)vdupq_lane_s32(v156, 1)), v145));
            if (vuzp1_s8(v157, v157).u32[0] != -1)
            {
              v158 = (int32x2_t)vsub_f32(*(float32x2_t *)v155.f32, *(float32x2_t *)v149.f32);
              v159 = vsub_f32(*(float32x2_t *)v154.f32, *(float32x2_t *)v149.f32);
              v160 = vsub_f32(vmul_lane_f32((float32x2_t)vdup_lane_s32(v158, 0), v159, 1), vmul_n_f32((float32x2_t)vdup_lane_s32(v158, 1), v159.f32[0]));
              v161 = (int32x2_t)vsub_f32(*(float32x2_t *)v155.f32, *(float32x2_t *)v150.f32);
              v162 = vsub_f32(*(float32x2_t *)v154.f32, *(float32x2_t *)v150.f32);
              v163 = vsub_f32(vmul_lane_f32((float32x2_t)vdup_lane_s32(v161, 0), v162, 1), vmul_n_f32((float32x2_t)vdup_lane_s32(v161, 1), v162.f32[0]));
              if (vmul_f32(v160, v163).f32[0] < 0.0)
              {
                v164 = vsub_f32(*(float32x2_t *)v149.f32, *(float32x2_t *)v155.f32);
                v165 = vsub_f32(*(float32x2_t *)v150.f32, *(float32x2_t *)v155.f32);
                v166 = vsub_f32(vmul_lane_f32(v164, v165, 1), vmul_lane_f32(v165, v164, 1));
                v167 = vsub_f32(*(float32x2_t *)v149.f32, *(float32x2_t *)v154.f32);
                v168 = vsub_f32(*(float32x2_t *)v150.f32, *(float32x2_t *)v154.f32);
                if (vmul_f32(v166, vsub_f32(vmul_lane_f32(v167, v168, 1), vmul_lane_f32(v168, v167, 1))).f32[0] < 0.0)
                {
                  v169 = vsub_f32(v163, v160);
                  v170 = vrecpe_f32(v169);
                  v171 = 4;
                  do
                  {
                    v170 = vmul_f32(v170, vrecps_f32(v169, v170));
                    --v171;
                  }
                  while (v171);
                  v172 = vmul_f32(v160, v170);
                  v173 = v149;
                  v173.i32[2] = vadd_f32(v83, *(float32x2_t *)&v212[1].u32[2 * v144 + 2]).u32[0];
                  v174 = v150;
                  v174.i32[2] = vadd_f32(v83, *(float32x2_t *)&v212[1].u32[2 * v147 + 2]).u32[0];
                  v175 = vmlsq_lane_f32(v173, vsubq_f32(v174, v173), v172, 0);
                  v176 = (int32x4_t)vsubq_f32(v175, v142);
                  if (*(float *)&v176.i32[2] <= COERCE_FLOAT(*a8))
                  {
                    v175.i64[1] = vextq_s8((int8x16_t)v175, (int8x16_t)v175, 8uLL).u32[0];
                    v177 = v175;
                    v177.i32[2] = v142.i32[2];
                    v178 = vmulq_f32(v27, v175);
                    v178.i64[0] = vpaddq_f32(v178, v178).u64[0];
                    v179 = vmulq_f32(v26, v175);
                    v179.i64[0] = vpaddq_f32(v179, v179).u64[0];
                    *(int8x8_t *)v178.f32 = vext_s8((int8x8_t)vpadd_f32(*(float32x2_t *)v178.f32, *(float32x2_t *)v178.f32), (int8x8_t)vpadd_f32(*(float32x2_t *)v179.f32, *(float32x2_t *)v179.f32), 4uLL);
                    v180 = vmulq_f32(v25, v175);
                    v180.i64[0] = vpaddq_f32(v180, v180).u64[0];
                    v178.i64[1] = vpadd_f32(*(float32x2_t *)v180.f32, *(float32x2_t *)v180.f32).u32[0];
                    v181 = vmulq_f32(v27, v177);
                    v181.i64[0] = vpaddq_f32(v181, v181).u64[0];
                    v182 = vmulq_f32(v26, v177);
                    v182.i64[0] = vpaddq_f32(v182, v182).u64[0];
                    v183 = vmulq_f32(v25, v177);
                    v183.i64[0] = vpaddq_f32(v183, v183).u64[0];
                    *(int8x8_t *)v181.f32 = vext_s8((int8x8_t)vpadd_f32(*(float32x2_t *)v181.f32, *(float32x2_t *)v181.f32), (int8x8_t)vpadd_f32(*(float32x2_t *)v182.f32, *(float32x2_t *)v182.f32), 4uLL);
                    v181.i64[1] = vpadd_f32(*(float32x2_t *)v183.f32, *(float32x2_t *)v183.f32).u32[0];
                    v184 = v207;
                    v184.i32[3] = vdupq_laneq_s32(v176, 2).i32[3];
                    v185 = *a7;
                    v186 = (float32x4_t *)(v82 + (v185 << 6));
                    *v186 = v181;
                    v186[1] = v178;
                    v186[2] = v184;
                    v186[3].i32[0] = v208;
                    v187 = v185 + 1;
                    *a7 = v187;
                    if ((v187 - v209) >= 0x10)
                    {
                      physx::Gu::SinglePersistentContactManifold::reduceContacts(v198, v187 - v209);
                      v152 = v200;
                      v151 = v201;
                      v150 = v202;
                      v149 = v203;
                      v145.i64[0] = -1;
                      v145.i64[1] = -1;
                      v142 = (float32x4_t)v199;
                      v25 = v204;
                      v26 = v205;
                      v27 = v206;
                      *a7 = v197;
                    }
                  }
                }
              }
            }
            v148 = v153 + 1;
            v102 = *(unsigned __int8 *)(a2 + 18);
          }
          while (v153 + 1 < v102);
          v146 = *(unsigned __int8 *)(a2 + 18);
        }
        v143 = v144 + 1;
      }
      while (v144 != 2);
    }
  }
}

BOOL physx::Gu::PCMConvexVsMeshContactGeneration::generateTriangleFullContactManifold(uint64_t a1, __int32 a2, unsigned int a3, uint64_t a4, uint64_t a5, _QWORD *a6, uint64_t a7, _DWORD *a8, float32x2_t *a9, float32x4_t *a10)
{
  double v18;
  double v19;
  double v20;
  double v21;
  __n128 v22;
  float32x4_t v23;
  int8x16_t v24;
  int8x16_t v25;
  int8x8_t v26;
  float32x4_t v27;
  float32x2_t v28;
  float32x2_t v29;
  int v30;
  float32x2_t v36;
  float32x2_t v37;
  int v38;
  float32x4_t v39;
  _OWORD *v40;
  float32x4_t *v41;
  float32x4_t v42;
  float32x4_t v43;
  float32x4_t v44;
  float32x4_t v45;
  float32x4_t v46;
  float32x4_t v47;
  float32x2_t v48;
  uint64_t v49;
  _OWORD *v50;
  uint64_t i;
  float32x4_t v52;
  float32x4_t v53;
  float32x4_t v54;
  float32x2_t v55;
  unsigned int v56;
  uint64_t v57;
  uint64_t v58;
  float32x4_t v59;
  uint64_t v60;
  float32x2_t v61;
  int v62;
  unsigned __int8 *v63;
  float32x4_t v64;
  float32x4_t v65;
  float32x4_t v66;
  float32x4_t v67;
  float32x2_t v68;
  float32x4_t v69;
  float32x2_t v70;
  float32x2_t v71;
  float32x2_t v72;
  int v73;
  unsigned __int8 *v74;
  int v75;
  float32x4_t v76;
  float32x4_t v77;
  float32x4_t v78;
  float32x4_t v79;
  int v80;
  int32x4_t v82;
  int v83;
  int v84;
  float32x4_t v85;
  int32x2_t v86;
  int v87;

  v86 = vdup_n_s32(0x7F7FFFFFu);
  v85 = 0uLL;
  if (physx::testTriangleFaceNormal((float32x4_t *)a1, (uint64_t)a6, a9, (float32x2_t *)&v86, &v84, &v85, &v87)
    && physx::testPolyFaceNormal(a4, a5, (uint64_t)a6, a9, &v86, &v83, (int8x16_t *)&v85, &v87, v18, v19, v20, v21, v22)&& physx::testPolyEdgeNormal((float32x4_t *)a1, a3, a4, a5, a6, a9, (float32x2_t *)&v86, &v85, &v87))
  {
    v23 = *(float32x4_t *)(a1 + 48);
    v24 = (int8x16_t)vsubq_f32(*(float32x4_t *)(a1 + 64), v23);
    v25 = (int8x16_t)vsubq_f32(*(float32x4_t *)(a1 + 80), v23);
    v26 = (int8x8_t)vmls_f32(vmul_f32(*(float32x2_t *)v24.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v25, v25, 4uLL)), (float32x2_t)*(_OWORD *)&vextq_s8(v24, v24, 4uLL), *(float32x2_t *)v25.i8);
    *(int8x8_t *)v27.f32 = vext_s8(v26, (int8x8_t)vmls_f32(vmul_f32((float32x2_t)*(_OWORD *)&vextq_s8(v24, v24, 8uLL), *(float32x2_t *)v25.i8), *(float32x2_t *)v24.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v25, v25, 8uLL)), 4uLL);
    v27.i64[1] = v26.u32[0];
    *(float32x2_t *)v25.i8 = vpadd_f32(vmul_f32(*(float32x2_t *)v27.f32, *(float32x2_t *)v27.f32), vmul_f32((float32x2_t)v26.u32[0], (float32x2_t)v26.u32[0]));
    v28 = vpadd_f32(*(float32x2_t *)v25.i8, *(float32x2_t *)v25.i8);
    v29 = vrsqrte_f32(v28);
    v30 = 4;
    do
    {
      v29 = vmul_f32(v29, vrsqrts_f32(vmul_f32(v29, v29), v28));
      --v30;
    }
    while (v30);
    __asm { FMOV            V4.2S, #1.0 }
    v36 = vmul_f32(v28, (float32x2_t)vbsl_s8((int8x8_t)vdup_lane_s32(vceqz_f32(v28), 0), _D4, (int8x8_t)v29));
    v37 = vrecpe_f32(v36);
    v38 = 4;
    do
    {
      v37 = vmul_f32(v37, vrecps_f32(v36, v37));
      --v38;
    }
    while (v38);
    v39 = vmulq_n_f32(v27, v37.f32[0]);
    v39.i32[3] = 0;
    *a10 = v39;
    v40 = *(_OWORD **)(a4 + 24);
    v41 = (float32x4_t *)a6[5];
    v42 = vmulq_f32(v39, *v41);
    v42.i64[0] = vpaddq_f32(v42, v42).u64[0];
    v43 = vmulq_f32(v39, v41[1]);
    v43.i64[0] = vpaddq_f32(v43, v43).u64[0];
    v44 = vmulq_f32(v39, v41[2]);
    v44.i64[0] = vpaddq_f32(v44, v44).u64[0];
    *(int8x8_t *)v45.f32 = vext_s8((int8x8_t)vpadd_f32(*(float32x2_t *)v42.f32, *(float32x2_t *)v42.f32), (int8x8_t)vpadd_f32(*(float32x2_t *)v43.f32, *(float32x2_t *)v43.f32), 4uLL);
    v45.i64[1] = vpadd_f32(*(float32x2_t *)v44.f32, *(float32x2_t *)v44.f32).u32[0];
    v46 = *(float32x4_t *)v40;
    v46.i32[3] = 0;
    v82 = (int32x4_t)v39;
    v47 = vmulq_f32(v46, v45);
    v47.i64[0] = vpaddq_f32(v47, v47).u64[0];
    v48 = vpadd_f32(*(float32x2_t *)v47.f32, *(float32x2_t *)v47.f32);
    v49 = *(unsigned int *)(a4 + 16);
    if (v49 >= 2)
    {
      v38 = 0;
      v50 = (_OWORD *)((char *)v40 + 20);
      for (i = 1; i != v49; ++i)
      {
        v52 = *(float32x4_t *)v50;
        v50 = (_OWORD *)((char *)v50 + 20);
        v53 = v52;
        v53.i32[3] = 0;
        v54 = vmulq_f32(v53, v45);
        v54.i64[0] = vpaddq_f32(v54, v54).u64[0];
        v55 = vpadd_f32(*(float32x2_t *)v54.f32, *(float32x2_t *)v54.f32);
        if ((vcgt_f32(v48, v55).u8[0] & 1) != 0)
        {
          v38 = i;
          v56 = -1;
        }
        else
        {
          v56 = 0;
        }
        v48 = (float32x2_t)vbsl_s8((int8x8_t)vdup_n_s32(v56), (int8x8_t)v55, (int8x8_t)v48);
      }
    }
    v57 = *(unsigned int *)(a4 + 20);
    if ((_DWORD)v57)
    {
      v58 = 0;
      v59 = vnegq_f32(v45);
      v59.i32[3] = 0;
      v60 = *(_QWORD *)(a4 + 48);
      v61 = vmul_f32(v48, v48);
      v62 = -1;
      do
      {
        v63 = (unsigned __int8 *)(v60 + (2 * v58));
        v64 = *(float32x4_t *)((char *)v40 + 20 * *v63);
        v64.i32[3] = 0;
        v65 = *(float32x4_t *)((char *)v40 + 20 * v63[1]);
        v65.i32[3] = 0;
        v66 = vaddq_f32(v64, v65);
        v67 = vmulq_f32(v66, v66);
        v67.i64[0] = vpaddq_f32(v67, v67).u64[0];
        v68 = vpadd_f32(*(float32x2_t *)v67.f32, *(float32x2_t *)v67.f32);
        v69 = vmulq_f32(v59, v66);
        v69.i64[0] = vpaddq_f32(v69, v69).u64[0];
        v70 = vpadd_f32(*(float32x2_t *)v69.f32, *(float32x2_t *)v69.f32);
        v71 = vmul_f32(v70, v70);
        if (vuzp1_s8((int8x8_t)vdup_lane_s16((int16x4_t)vand_s8((int8x8_t)vcgt_f32(v71, vmul_f32(v61, v68)), (int8x8_t)vcgez_f32(v70)), 0), *(int8x8_t *)v59.f32).u32[0] == -1)
        {
          v72 = vrecpe_f32(v68);
          v73 = 4;
          do
          {
            v72 = vmul_f32(v72, vrecps_f32(v68, v72));
            --v73;
          }
          while (v73);
          v61 = vmul_f32(v71, v72);
          v62 = v58;
        }
        ++v58;
      }
      while (v58 != v57);
      if (v62 != -1)
      {
        v74 = (unsigned __int8 *)(v60 + (2 * v62));
        v75 = *v74;
        v76 = *(float32x4_t *)((char *)v40 + 20 * *v74);
        v38 = v74[1];
        v76.i32[3] = 0;
        v77 = *(float32x4_t *)((char *)v40 + 20 * v38);
        v77.i32[3] = 0;
        v78 = vmulq_f32(v59, v76);
        v78.i64[0] = vpaddq_f32(v78, v78).u64[0];
        v79 = vmulq_f32(v59, v77);
        v79.i64[0] = vpaddq_f32(v79, v79).u64[0];
        if ((vcgt_f32(vpadd_f32(*(float32x2_t *)v78.f32, *(float32x2_t *)v78.f32), vpadd_f32(*(float32x2_t *)v79.f32, *(float32x2_t *)v79.f32)).u8[0] & 1) != 0)v38 = v75;
      }
    }
    physx::generatedTriangleContacts(a1, a2, a4, (float32x4_t *)((char *)v40 + 20 * v38), (uint64_t)a6, a7, a8, a9, &v82);
    v80 = 0;
  }
  else
  {
    v80 = 1;
  }
  return v80 == 0;
}

uint64_t physx::Gu::PCMConvexVsMeshContactGeneration::generatePolyDataContactManifold(uint64_t a1, uint64_t a2, unsigned int a3, __int32 a4, uint64_t a5, uint64_t a6, _DWORD *a7, _QWORD *a8, float32x4_t *a9)
{
  uint64_t v10;
  float32x4_t v11;
  float32x4_t *v12;
  float32x4_t v13;
  float32x4_t v14;
  float32x4_t v15;
  unsigned __int32 v16;
  float32x4_t v17;
  float32x4_t v18;
  float32x2_t v19;
  float32x2_t v20;
  int v21;
  float32x2_t v27;
  float32x2_t v28;
  int v29;
  float32x4_t v30;
  float32x4_t v31;
  int32x4_t v33;

  v10 = *(_QWORD *)(*(_QWORD *)(a1 + 4544) + 24) + 20 * a3;
  v11.i64[0] = *(_QWORD *)v10;
  v11.i64[1] = *(unsigned int *)(v10 + 8);
  v12 = *(float32x4_t **)(*(_QWORD *)(a1 + 4552) + 48);
  v13 = vmulq_f32(*v12, v11);
  v13.i64[0] = vpaddq_f32(v13, v13).u64[0];
  v14 = vmulq_f32(v11, v12[1]);
  v14.i64[0] = vpaddq_f32(v14, v14).u64[0];
  v15 = vmulq_f32(v11, v12[2]);
  v15.i64[0] = vpaddq_f32(v15, v15).u64[0];
  v16 = vpadd_f32(*(float32x2_t *)v15.f32, *(float32x2_t *)v15.f32).u32[0];
  *(int8x8_t *)v17.f32 = vext_s8((int8x8_t)vpadd_f32(*(float32x2_t *)v13.f32, *(float32x2_t *)v13.f32), (int8x8_t)vpadd_f32(*(float32x2_t *)v14.f32, *(float32x2_t *)v14.f32), 4uLL);
  v17.i64[1] = v16;
  v18 = vmulq_f32(v17, v17);
  v18.i64[0] = vpaddq_f32(v18, v18).u64[0];
  v19 = vpadd_f32(*(float32x2_t *)v18.f32, *(float32x2_t *)v18.f32);
  v20 = vrsqrte_f32(v19);
  v21 = 4;
  do
  {
    v20 = vmul_f32(v20, vrsqrts_f32(vmul_f32(v20, v20), v19));
    --v21;
  }
  while (v21);
  __asm { FMOV            V4.2S, #1.0 }
  v27 = vmul_f32(v19, (float32x2_t)vbsl_s8((int8x8_t)vdup_lane_s32(vceqz_f32(v19), 0), _D4, (int8x8_t)v20));
  v28 = vrecpe_f32(v27);
  v29 = 4;
  do
  {
    v28 = vmul_f32(v28, vrecps_f32(v27, v28));
    --v29;
  }
  while (v29);
  v30 = vmulq_n_f32(v17, v28.f32[0]);
  v30.i32[3] = 0;
  v33 = (int32x4_t)v30;
  v31 = vnegq_f32(v30);
  v31.i32[3] = 0;
  *a9 = v31;
  physx::generatedPolyContacts(*(_QWORD *)(a1 + 4544), v10, a2, a4, *(_QWORD *)(a1 + 4552), a6, a7, a8, &v33);
  return 1;
}

int8x8_t physx::Gu::findRotationMatrixFromZAxis(int32x4_t *a1)
{
  float32x4_t v1;
  float32x2_t v2;
  float32x4_t v3;
  float32x2_t v4;
  float32x2_t v5;
  int8x16_t v6;
  float32x2_t v7;
  int8x16_t v8;
  float32x2_t v9;
  float32x2_t v10;
  int v11;
  float32x2_t v12;
  float32x2_t v13;
  float32x2_t v14;
  int v15;
  float32x2_t v16;
  float32x2_t v17;
  float32x2_t v18;
  float v19;
  float32x4_t v20;
  float32x4_t v21;
  int8x8_t result;
  float32x2_t v28;
  float32x2_t v30;
  float32x2_t v31;
  int v32;
  float32x2_t v33;

  v1 = *(float32x4_t *)a1;
  v2 = (float32x2_t)vdup_laneq_s32(*a1, 2);
  if (vabs_f32(v2).f32[0] < 0.9999)
  {
    v28 = (float32x2_t)vdup_lane_s32(*(int32x2_t *)v1.f32, 1);
    __asm { FMOV            V0.2S, #1.0 }
    v30 = vadd_f32(v2, _D0);
    v31 = vrecpe_f32(v30);
    v32 = 4;
    do
    {
      v31 = vmul_f32(v31, vrecps_f32(v30, v31));
      --v32;
    }
    while (v32);
    v33 = vmul_f32(v31, vneg_f32(v28));
    return vext_s8((int8x8_t)vmls_f32(v2, v33, v28), (int8x8_t)vmul_n_f32(v33, v1.f32[0]), 4uLL);
  }
  else
  {
    v3 = vsubq_f32((float32x4_t)xmmword_2260E5F20, v1);
    v4 = vpadd_f32((float32x2_t)0x3F80000000000000, (float32x2_t)1065353216);
    v5 = vpadd_f32(v4, v4);
    v6 = (int8x16_t)vmulq_f32(v3, v3);
    v7 = (float32x2_t)vextq_s8(v6, v6, 8uLL).u64[0];
    v8 = (int8x16_t)vmulq_f32(v3, (float32x4_t)xmmword_2261AA720);
    v9 = (float32x2_t)vextq_s8(v8, v8, 8uLL).u64[0];
    v10 = vrecpe_f32(v5);
    v11 = 4;
    do
    {
      v10 = vmul_f32(v10, vrecps_f32(v5, v10));
      --v11;
    }
    while (v11);
    v12 = vpadd_f32(*(float32x2_t *)v6.i8, v7);
    v13 = vpadd_f32(v12, v12);
    v14 = vrecpe_f32(v13);
    v15 = 4;
    do
    {
      v14 = vmul_f32(v14, vrecps_f32(v13, v14));
      --v15;
    }
    while (v15);
    v16 = vpadd_f32(*(float32x2_t *)v8.i8, v9);
    v17 = vmul_f32(v10, (float32x2_t)0xC0000000C0000000);
    v18 = vmul_f32(v14, (float32x2_t)0xC0000000C0000000);
    LODWORD(v19) = vmulq_n_f32((float32x4_t)xmmword_2261AA720, v17.f32[0]).u32[0];
    v20 = vmulq_n_f32((float32x4_t)xmmword_2261AA720, vmulq_n_f32(v3, vmul_f32(v17, vmul_f32(vpadd_f32(v16, v16), v18)).f32[0]).f32[0]);
    v20.i32[3] = 0;
    v21 = vmlaq_n_f32(v20, v3, vmulq_n_f32(v3, v18.f32[0]).f32[0]);
    v21.i64[1] = vextq_s8((int8x16_t)v21, (int8x16_t)v21, 8uLL).u32[0];
    v21.i64[0] = vmlaq_n_f32(v21, (float32x4_t)xmmword_2261AA720, v19).u64[0];
    result.i32[1] = v21.i32[1];
    __asm { FMOV            V16.2S, #1.0 }
    result.i32[0] = vadd_f32(*(float32x2_t *)v21.f32, _D16).u32[0];
  }
  return result;
}

BOOL physx::Gu::PersistentContactManifold::replaceManifoldPoint(uint64_t a1, float32x4_t *a2, float32x4_t *a3, _OWORD *a4, float32x2_t *a5)
{
  unint64_t v5;
  uint64_t v6;
  float32x2_t v7;
  uint64_t v8;
  float32x4_t v9;
  unint64_t v10;
  BOOL v11;
  float32x4_t v12;
  float32x4_t v13;
  float32x4_t v14;
  float32x4_t v15;

  v5 = *(unsigned __int8 *)(a1 + 64);
  if (*(_BYTE *)(a1 + 64))
  {
    v6 = 0;
    v7 = vmul_f32(*a5, *a5);
    v8 = *(_QWORD *)(a1 + 80);
    v9 = *a2;
    v10 = 1;
    v11 = 1;
    while (1)
    {
      v12 = vsubq_f32(*(float32x4_t *)(v8 + v6 + 16), *a3);
      v13 = vmulq_f32(v12, v12);
      v13.i64[0] = vpaddq_f32(v13, v13).u64[0];
      v14 = vsubq_f32(*(float32x4_t *)(v8 + v6), v9);
      v15 = vmulq_f32(v14, v14);
      v15.i64[0] = vpaddq_f32(v15, v15).u64[0];
      if ((vcgt_f32(v7, vmin_f32(vpadd_f32(*(float32x2_t *)v13.f32, *(float32x2_t *)v13.f32), vpadd_f32(*(float32x2_t *)v15.f32, *(float32x2_t *)v15.f32))).u8[0] & 1) != 0)break;
      v11 = v10 < v5;
      v6 += 48;
      ++v10;
      if (48 * v5 == v6)
        return 0;
    }
    *(float32x4_t *)(v8 + v6) = v9;
    *(float32x4_t *)(*(_QWORD *)(a1 + 80) + v6 + 16) = *a3;
    *(_OWORD *)(*(_QWORD *)(a1 + 80) + v6 + 32) = *a4;
  }
  else
  {
    return 0;
  }
  return v11;
}

uint64_t physx::Gu::PersistentContactManifold::reduceContactsForPCM(uint64_t a1, _OWORD *a2, __int128 *a3, int32x4_t *a4)
{
  uint64_t v4;
  float32x4_t *v5;
  float32x4_t v6;
  float32x4_t v7;
  float32x4_t v8;
  float32x4_t v9;
  float32x4_t v10;
  float32x4_t v11;
  int32x2_t *v12;
  __int128 v13;
  int v14;
  float32x2_t v15;
  float32x2_t v16;
  unsigned __int8 v17;
  unsigned int v18;
  int v19;
  uint64_t v20;
  float32x4_t *v21;
  float32x4_t v22;
  float32x4_t *v23;
  float32x4_t v24;
  float32x4_t v25;
  float32x4_t v26;
  float32x2_t v27;
  uint64_t v28;
  float32x4_t v29;
  float32x4_t v30;
  float32x2_t v31;
  unsigned __int8 v32;
  unsigned int v33;
  uint64_t v34;
  float32x4_t *v35;
  float32x4_t v36;
  float32x4_t v37;
  float32x2_t v38;
  float32x4_t *v44;
  float32x4_t v45;
  float32x4_t v46;
  float32x4_t v47;
  float32x2_t v48;
  float32x2_t v49;
  int v50;
  float32x4_t v51;
  float32x4_t v52;
  int8x16_t v53;
  unsigned __int32 v54;
  float32x2_t v55;
  float32x2_t v56;
  unsigned __int8 v57;
  unsigned int v58;
  uint64_t v59;
  __int128 *v60;
  _OWORD *v61;
  __int128 v62;
  __int128 v63;
  float32x2_t v64;
  float32x4_t *v65;
  float32x4_t v66;
  float32x4_t v67;
  float32x4_t v68;
  float32x4_t v69;
  float32x4_t v70;
  float32x4_t v71;
  float32x4_t v72;
  float32x4_t v73;
  float32x2_t v74;
  float32x4_t v75;
  float32x2_t v76;
  float32x4_t v77;
  float32x4_t v78;
  float32x2_t v79;
  float32x4_t v80;
  float32x2_t v81;
  float32x4_t v82;
  float32x4_t v83;
  float32x2_t v84;
  float32x4_t v85;
  float32x2_t v86;
  int8x8_t v87;
  float32x4_t v88;
  float32x2_t v89;
  float32x2_t v90;
  float32x4_t v91;
  float32x2_t v92;
  int v93;
  float32x2_t v94;
  float32x4_t v95;
  float32x4_t v96;
  float32x4_t v97;
  float32x2_t v98;
  float32x2_t v99;
  int v100;
  float32x4_t v101;
  float32x2_t v102;
  float32x2_t v103;
  float32x2_t v104;
  int v105;
  float32x4_t v106;
  float32x4_t v107;
  float32x2_t v108;
  float32x2_t v109;
  int v110;
  float32x2_t v111;
  float32x2_t v112;
  unsigned __int8 v113;
  unsigned int v114;
  uint64_t v115;
  __int128 *v116;
  _OWORD *v117;
  __int128 v118;
  __int128 v119;
  uint64_t v120;
  int v121;
  float32x4_t *v122;
  unsigned int v123;
  float32x4_t *v124;
  float32x2_t v125;
  float32x4_t *v126;
  float32x4_t v127;
  float32x4_t v128;
  float32x4_t v129;
  float32x2_t v130;
  unsigned int v131;
  float32x4_t *v132;
  float32x4_t v133;
  int v135;
  char v136;
  float32x4_t v137;
  float32x4_t v138;
  _OWORD v139[12];
  int32x4_t v140;
  uint64_t v141;

  v4 = 0;
  v141 = *MEMORY[0x24BDAC8D0];
  v136 = 0;
  v135 = 0;
  v5 = *(float32x4_t **)(a1 + 80);
  v6 = v5[9];
  v139[6] = v5[8];
  v139[7] = v6;
  v7 = v5[11];
  v139[8] = v5[10];
  v139[9] = v7;
  v8 = v5[5];
  v139[2] = v5[4];
  v139[3] = v8;
  v9 = v5[7];
  v139[4] = v5[6];
  v139[5] = v9;
  v10 = v5[1];
  v137 = *v5;
  v138 = v10;
  v11 = v5[3];
  v139[0] = v5[2];
  v139[1] = v11;
  v12 = (int32x2_t *)v139;
  v13 = *a3;
  v139[10] = *a2;
  v139[11] = v13;
  v140 = *a4;
  v14 = 4;
  v15 = (float32x2_t)vdup_laneq_s32(v140, 3);
  do
  {
    v16 = (float32x2_t)vdup_lane_s32(v12[1], 1);
    v17 = vcgt_f32(v15, v16).u8[0];
    if ((v17 & 1) != 0)
      v18 = -1;
    else
      v18 = 0;
    v15 = (float32x2_t)vbsl_s8((int8x8_t)vdup_n_s32(v18), (int8x8_t)v16, (int8x8_t)v15);
    if ((v17 & 1) != 0)
      v14 = v4;
    ++v4;
    v12 += 6;
  }
  while (v4 != 4);
  v19 = 0;
  v20 = 1;
  *((_BYTE *)&v135 + v14) = 1;
  v21 = &v137 + 3 * v14;
  v22 = v21[1];
  *v5 = *v21;
  v5[1] = v22;
  v5[2] = v21[2];
  v23 = *(float32x4_t **)(a1 + 80);
  v24 = v23[1];
  v25 = vsubq_f32(v138, v24);
  v26 = vmulq_f32(v25, v25);
  v26.i64[0] = vpaddq_f32(v26, v26).u64[0];
  v27 = vpadd_f32(*(float32x2_t *)v26.f32, *(float32x2_t *)v26.f32);
  v28 = 64;
  do
  {
    if (!*((_BYTE *)&v135 + v20))
    {
      v29 = vsubq_f32(*(float32x4_t *)((char *)&v137 + v28), v24);
      v30 = vmulq_f32(v29, v29);
      v30.i64[0] = vpaddq_f32(v30, v30).u64[0];
      v31 = vpadd_f32(*(float32x2_t *)v30.f32, *(float32x2_t *)v30.f32);
      v32 = vcgt_f32(v31, v27).u8[0];
      v33 = (v32 & 1) != 0 ? -1 : 0;
      v27 = (float32x2_t)vbsl_s8((int8x8_t)vdup_n_s32(v33), (int8x8_t)v31, (int8x8_t)v27);
      if ((v32 & 1) != 0)
        v19 = v20;
    }
    ++v20;
    v28 += 48;
  }
  while (v20 != 5);
  v34 = 0;
  *((_BYTE *)&v135 + v19) = 1;
  v35 = &v137 + 3 * v19;
  v36 = v35[1];
  v37 = v35[2];
  v23[3] = *v35;
  v23[4] = v36;
  v23[5] = v37;
  v38 = (float32x2_t)0x80000000800000;
  __asm { FMOV            V1.2S, #1.0 }
  do
  {
    if (!*((_BYTE *)&v135 + v34))
    {
      v44 = *(float32x4_t **)(a1 + 80);
      v45 = v44[1];
      v46 = vsubq_f32(v44[4], v45);
      v47 = vmulq_f32(v46, v46);
      v47.i64[0] = vpaddq_f32(v47, v47).u64[0];
      v48 = vpadd_f32(*(float32x2_t *)v47.f32, *(float32x2_t *)v47.f32);
      v49 = vrecpe_f32(v48);
      v50 = 4;
      do
      {
        v49 = vmul_f32(v49, vrecps_f32(v48, v49));
        --v50;
      }
      while (v50);
      v51 = vsubq_f32(*(&v137 + 3 * v34 + 1), v45);
      v52 = vmulq_f32(v51, v46);
      v52.i64[0] = vpaddq_f32(v52, v52).u64[0];
      v53 = (int8x16_t)vmlsq_lane_f32(v51, v46, (float32x2_t)vbic_s8((int8x8_t)vmax_f32(vmin_f32(vmul_f32(v49, vpadd_f32(*(float32x2_t *)v52.f32, *(float32x2_t *)v52.f32)), _D1), 0), (int8x8_t)vceqz_f32(v48)), 0);
      v54 = vextq_s8(v53, v53, 8uLL).u32[0];
      v55 = vpadd_f32(vmul_f32(*(float32x2_t *)v53.i8, *(float32x2_t *)v53.i8), vmul_f32((float32x2_t)v54, (float32x2_t)v54));
      v56 = vpadd_f32(v55, v55);
      v57 = vcgt_f32(v56, v38).u8[0];
      v58 = (v57 & 1) != 0 ? -1 : 0;
      v38 = (float32x2_t)vbsl_s8((int8x8_t)vdup_n_s32(v58), (int8x8_t)v56, (int8x8_t)v38);
      if ((v57 & 1) != 0)
        v19 = v34;
    }
    ++v34;
  }
  while (v34 != 5);
  v59 = 0;
  *((_BYTE *)&v135 + v19) = 1;
  v60 = (__int128 *)(&v137 + 3 * v19);
  v61 = *(_OWORD **)(a1 + 80);
  v62 = v60[2];
  v63 = *v60;
  v61[7] = v60[1];
  v61[8] = v62;
  v61[6] = v63;
  v64 = (float32x2_t)0x80000000800000;
  do
  {
    if (*((_BYTE *)&v135 + v59))
      goto LABEL_57;
    v65 = *(float32x4_t **)(a1 + 80);
    v66 = v65[4];
    v67 = v65[1];
    v68 = vsubq_f32(v66, v67);
    v69 = v65[7];
    v70 = vsubq_f32(v69, v67);
    v71 = *(&v137 + 3 * v59 + 1);
    v72 = vsubq_f32(v71, v67);
    v73 = vmulq_f32(v68, v72);
    v73.i64[0] = vpaddq_f32(v73, v73).u64[0];
    v74 = vpadd_f32(*(float32x2_t *)v73.f32, *(float32x2_t *)v73.f32);
    v75 = vmulq_f32(v70, v72);
    v75.i64[0] = vpaddq_f32(v75, v75).u64[0];
    v76 = vpadd_f32(*(float32x2_t *)v75.f32, *(float32x2_t *)v75.f32);
    if (vuzp1_s8((int8x8_t)vdup_lane_s16((int16x4_t)vand_s8((int8x8_t)vcltz_f32(v76), (int8x8_t)vcltz_f32(v74)), 0), (int8x8_t)v64).u32[0] == -1)
    {
      v97 = vmulq_f32(v72, v72);
      goto LABEL_52;
    }
    v77 = vsubq_f32(v71, v66);
    v78 = vmulq_f32(v68, v77);
    v78.i64[0] = vpaddq_f32(v78, v78).u64[0];
    v79 = vpadd_f32(*(float32x2_t *)v78.f32, *(float32x2_t *)v78.f32);
    v80 = vmulq_f32(v70, v77);
    v80.i64[0] = vpaddq_f32(v80, v80).u64[0];
    v81 = vpadd_f32(*(float32x2_t *)v80.f32, *(float32x2_t *)v80.f32);
    if (vuzp1_s8((int8x8_t)vdup_lane_s16((int16x4_t)vand_s8((int8x8_t)vcge_f32(v79, v81), (int8x8_t)vcgez_f32(v79)), 0), (int8x8_t)v64).u32[0] == -1)
    {
      v97 = vmulq_f32(v77, v77);
      goto LABEL_52;
    }
    v82 = vsubq_f32(v71, v69);
    v83 = vmulq_f32(v68, v82);
    v83.i64[0] = vpaddq_f32(v83, v83).u64[0];
    v84 = vpadd_f32(*(float32x2_t *)v83.f32, *(float32x2_t *)v83.f32);
    v85 = vmulq_f32(v70, v82);
    v85.i64[0] = vpaddq_f32(v85, v85).u64[0];
    v86 = vpadd_f32(*(float32x2_t *)v85.f32, *(float32x2_t *)v85.f32);
    if (vuzp1_s8((int8x8_t)vdup_lane_s16((int16x4_t)vand_s8((int8x8_t)vcgez_f32(v86), (int8x8_t)vcge_f32(v86, v84)), 0), (int8x8_t)v64).u32[0] == -1)
    {
      v97 = vmulq_f32(v82, v82);
      goto LABEL_52;
    }
    if (vuzp1_s8((int8x8_t)vdup_lane_s16((int16x4_t)vand_s8(vand_s8((int8x8_t)vcltz_f32(v79), (int8x8_t)vcgez_f32(v74)), (int8x8_t)vcltz_f32(vsub_f32(vmul_f32(v74, v81), vmul_f32(v76, v79)))), 0), (int8x8_t)v64).u32[0] == -1)
    {
      v98 = vsub_f32(v74, v79);
      v99 = vrecpe_f32(v98);
      v100 = 4;
      do
      {
        v99 = vmul_f32(v99, vrecps_f32(v98, v99));
        --v100;
      }
      while (v100);
      v96 = vmlaq_n_f32(v67, v68, vmul_f32(v74, v99).f32[0]);
    }
    else
    {
      if (vuzp1_s8((int8x8_t)vdup_lane_s16((int16x4_t)vand_s8(vand_s8((int8x8_t)vcge_f32(v84, v86), (int8x8_t)vcge_f32(v81, v79)), (int8x8_t)vcltz_f32(vsub_f32(vmul_f32(v79, v86), vmul_f32(v81, v84)))), 0), (int8x8_t)v64).u32[0] == -1)
      {
        v101 = vsubq_f32(v69, v66);
        v102 = vsub_f32(v81, v79);
        v103 = vadd_f32(v102, vsub_f32(v84, v86));
        v104 = vrecpe_f32(v103);
        v105 = 4;
        do
        {
          v104 = vmul_f32(v104, vrecps_f32(v103, v104));
          --v105;
        }
        while (v105);
        v106 = vmlaq_n_f32(v66, v101, vmul_f32(v102, v104).f32[0]);
        v106.i64[1] = vextq_s8((int8x16_t)v106, (int8x16_t)v106, 8uLL).u32[0];
        v107 = vsubq_f32(v71, v106);
        goto LABEL_51;
      }
      if (vuzp1_s8((int8x8_t)vdup_lane_s16((int16x4_t)vand_s8(vand_s8((int8x8_t)vcltz_f32(v86), (int8x8_t)vcgez_f32(v76)), (int8x8_t)vcltz_f32(vsub_f32(vmul_f32(v76, v84), vmul_f32(v74, v86)))), 0), (int8x8_t)v64).u32[0] != -1)
      {
        v87 = (int8x8_t)vmls_f32(vmul_f32(*(float32x2_t *)v68.f32, (float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v70, (int8x16_t)v70, 4uLL)), (float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v68, (int8x16_t)v68, 4uLL), *(float32x2_t *)v70.f32);
        *(int8x8_t *)v88.f32 = vext_s8(v87, (int8x8_t)vmls_f32(vmul_f32((float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v68, (int8x16_t)v68, 8uLL), *(float32x2_t *)v70.f32), *(float32x2_t *)v68.f32, (float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v70, (int8x16_t)v70, 8uLL)), 4uLL);
        v88.i64[1] = v87.u32[0];
        v89 = vpadd_f32(vmul_f32(*(float32x2_t *)v88.f32, *(float32x2_t *)v88.f32), vmul_f32((float32x2_t)v87.u32[0], (float32x2_t)v87.u32[0]));
        v90 = vpadd_f32(v89, v89);
        v91 = vmulq_f32(vsubq_f32(v67, v71), v88);
        v92 = vrecpe_f32(v90);
        v93 = 4;
        do
        {
          v92 = vmul_f32(v92, vrecps_f32(v90, v92));
          --v93;
        }
        while (v93);
        v94 = (float32x2_t)vpaddq_f32(v91, v91).u64[0];
        v95 = vmulq_n_f32(v88, *(float *)vand_s8((int8x8_t)vmul_f32(v92, vpadd_f32(v94, v94)), (int8x8_t)vcgtz_f32(v90)).i32);
        v95.i32[3] = 0;
        v96 = vaddq_f32(v71, v95);
        goto LABEL_50;
      }
      v108 = vsub_f32(v76, v86);
      v109 = vrecpe_f32(v108);
      v110 = 4;
      do
      {
        v109 = vmul_f32(v109, vrecps_f32(v108, v109));
        --v110;
      }
      while (v110);
      v96 = vmlaq_n_f32(v67, v70, vmul_f32(v76, v109).f32[0]);
    }
    v96.i64[1] = vextq_s8((int8x16_t)v96, (int8x16_t)v96, 8uLL).u32[0];
LABEL_50:
    v107 = vsubq_f32(v71, v96);
LABEL_51:
    v97 = vmulq_f32(v107, v107);
LABEL_52:
    v111 = (float32x2_t)vpaddq_f32(v97, v97).u64[0];
    v112 = vpadd_f32(v111, v111);
    v113 = vcgt_f32(v112, v64).u8[0];
    if ((v113 & 1) != 0)
      v114 = -1;
    else
      v114 = 0;
    v64 = (float32x2_t)vbsl_s8((int8x8_t)vdup_n_s32(v114), (int8x8_t)v112, (int8x8_t)v64);
    if ((v113 & 1) != 0)
      v19 = v59;
LABEL_57:
    ++v59;
  }
  while (v59 != 5);
  if (*((_BYTE *)&v135 + v19))
  {
    *(_BYTE *)(a1 + 64) = 3;
  }
  else
  {
    v115 = 0;
    *((_BYTE *)&v135 + v19) = 1;
    v116 = (__int128 *)(&v137 + 3 * v19);
    v117 = *(_OWORD **)(a1 + 80);
    v118 = v116[2];
    v119 = *v116;
    v117[10] = v116[1];
    v117[11] = v118;
    v117[9] = v119;
    while (*((_BYTE *)&v135 + v115))
    {
      if (++v115 == 5)
      {
        LODWORD(v115) = 0;
        break;
      }
    }
    v120 = 0;
    v121 = 0;
    v122 = *(float32x4_t **)(a1 + 80);
    v123 = v115;
    v124 = &v137 + 3 * v115;
    v125 = (float32x2_t)vdup_n_s32(0x7F7FFFFFu);
    v126 = v122;
    do
    {
      v127 = *v126;
      v126 += 3;
      v128 = vsubq_f32(v127, *v124);
      v129 = vmulq_f32(v128, v128);
      v129.i64[0] = vpaddq_f32(v129, v129).u64[0];
      v130 = vpadd_f32(*(float32x2_t *)v129.f32, *(float32x2_t *)v129.f32);
      if ((vcgt_f32(v125, v130).u8[0] & 1) != 0)
      {
        v121 = v120;
        v131 = -1;
      }
      else
      {
        v131 = 0;
      }
      v125 = (float32x2_t)vbsl_s8((int8x8_t)vdup_n_s32(v131), (int8x8_t)v130, (int8x8_t)v125);
      ++v120;
    }
    while (v120 != 4);
    if (v122[3 * v121 + 2].f32[3] > *((float *)&v139[3 * v123] + 3))
    {
      v132 = &v122[3 * v121];
      v133 = v124[1];
      *v132 = *v124;
      v132[1] = v133;
      v132[2] = v124[2];
    }
  }
  return 0;
}

uint64_t physx::Gu::PersistentContactManifold::addManifoldContactsToContactBuffer(uint64_t result, uint64_t a2, _OWORD *a3, float32x4_t *a4, uint64_t *a5)
{
  unsigned int v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  float32x4_t v10;
  float32x4_t *v11;
  float v12;
  float32x4_t v13;
  float32x4_t v14;
  float32x2_t v15;
  float32x4_t v16;
  float32x2_t v17;
  float32x2_t v18;
  int8x8_t v19;
  float32x4_t v20;
  float32x4_t v21;
  float32x4_t v22;
  float32x4_t v23;
  int8x16_t v24;
  uint64_t v25;

  v5 = *(unsigned __int8 *)(result + 64);
  if (*(_BYTE *)(result + 64))
  {
    v6 = 0;
    v7 = 0;
    v8 = *a5;
    v9 = 1;
    v10.i64[0] = 0x4000000040000000;
    v10.i64[1] = 0x4000000040000000;
    do
    {
      v11 = (float32x4_t *)(*(_QWORD *)(result + 80) + v6);
      v12 = v11[2].f32[3];
      if (*(float *)&v8 >= v12)
      {
        v13 = v11[1];
        v14 = *a4;
        v14.i32[3] = 0;
        v15 = (float32x2_t)vdupq_laneq_s32(*(int32x4_t *)a4, 3).u64[0];
        v16 = vmulq_n_f32(v13, vmla_f32((float32x2_t)0xBF000000BF000000, v15, v15).f32[0]);
        v16.i32[3] = 0;
        v17 = (float32x2_t)vextq_s8((int8x16_t)v14, (int8x16_t)v14, 8uLL).u64[0];
        v18 = (float32x2_t)vextq_s8((int8x16_t)v13, (int8x16_t)v13, 8uLL).u64[0];
        v19 = (int8x8_t)vmls_f32(vmul_f32(*(float32x2_t *)a4->f32, (float32x2_t)vext_s8(*(int8x8_t *)v13.f32, (int8x8_t)v18, 4uLL)), (float32x2_t)vext_s8(*(int8x8_t *)a4->f32, (int8x8_t)v17, 4uLL), *(float32x2_t *)v13.f32);
        *(int8x8_t *)v20.f32 = vext_s8(v19, (int8x8_t)vmls_f32(vmul_f32(v17, *(float32x2_t *)v13.f32), *(float32x2_t *)a4->f32, v18), 4uLL);
        v20.i64[1] = v19.u32[0];
        v21 = vmlaq_laneq_f32(v16, v20, *a4, 3);
        v21.i64[1] = vextq_s8((int8x16_t)v21, (int8x16_t)v21, 8uLL).u32[0];
        v22 = vmulq_f32(v14, v13);
        v22.i64[0] = vpaddq_f32(v22, v22).u64[0];
        v23 = vmlaq_n_f32(v21, v14, vpadd_f32(*(float32x2_t *)v22.f32, *(float32x2_t *)v22.f32).f32[0]);
        v23.i64[1] = vextq_s8((int8x16_t)v23, (int8x16_t)v23, 8uLL).u32[0];
        v24 = (int8x16_t)vmlaq_f32(a4[1], v10, v23);
        v24.i64[1] = vextq_s8(v24, v24, 8uLL).u32[0];
        v25 = a2 + (v7++ << 6);
        *(_OWORD *)v25 = *a3;
        *(int8x16_t *)(v25 + 16) = v24;
        *(float *)(v25 + 12) = v12;
        *(_DWORD *)(v25 + 52) = -1;
        v5 = *(unsigned __int8 *)(result + 64);
        v8 = *a5;
      }
      if (v7 > 0x3F)
        break;
      v6 += 48;
    }
    while (v9++ < v5);
  }
  else
  {
    LODWORD(v7) = 0;
  }
  *(_DWORD *)(a2 + 4096) = v7;
  return result;
}

uint64_t physx::Gu::PersistentContactManifold::addManifoldContactsToContactBuffer(uint64_t result, uint64_t a2, _OWORD *a3, float32x4_t *a4)
{
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  float32x4_t *v7;
  float32x4_t v8;
  float32x4_t v9;
  float32x4_t v10;
  float32x4_t v11;
  unint64_t v12;
  float32x4_t v13;

  LODWORD(v4) = *(unsigned __int8 *)(result + 64);
  if (*(_BYTE *)(result + 64))
  {
    v5 = 0;
    v4 = 0;
    v6 = a2;
    do
    {
      v7 = (float32x4_t *)(*(_QWORD *)(result + 80) + v5);
      v8 = v7[1];
      v9 = vmulq_n_f32(*a4, v8.f32[0]);
      v9.i32[3] = 0;
      v10 = vmulq_lane_f32(a4[1], *(float32x2_t *)v8.f32, 1);
      v10.i32[3] = 0;
      v11 = vmulq_laneq_f32(a4[2], v8, 2);
      v11.i32[3] = 0;
      v12 = v4;
      v13 = vaddq_f32(a4[3], vaddq_f32(vaddq_f32(v9, v10), v11));
      ++v4;
      v10.i32[0] = v7[2].i32[3];
      *(_OWORD *)v6 = *a3;
      *(float32x4_t *)(v6 + 16) = v13;
      *(_DWORD *)(v6 + 12) = v10.i32[0];
      *(_DWORD *)(v6 + 52) = -1;
      if (v12 > 0x3E)
        break;
      v6 += 64;
      v5 += 48;
    }
    while (v4 < *(unsigned __int8 *)(result + 64));
  }
  *(_DWORD *)(a2 + 4096) = v4;
  return result;
}

uint64_t physx::Gu::PersistentContactManifold::addManifoldContactsToContactBuffer(uint64_t result, uint64_t a2, _OWORD *a3, float32x4_t *a4, float32x4_t *a5, float32x2_t *a6, float32x2_t *a7)
{
  unsigned int v7;
  uint64_t v8;
  unint64_t v9;
  float32x2_t v10;
  float32x2_t v11;
  unint64_t v12;
  float32x4_t v13;
  uint64_t v14;
  float32x2_t v15;
  float32x4_t v16;
  float32x4_t v17;
  float32x2_t v18;
  float32x4_t v19;
  float32x2_t v20;
  float32x2_t v21;
  int8x8_t v22;
  float32x4_t v23;
  float32x4_t v24;
  float32x4_t v25;
  float32x4_t v26;
  float32x4_t v27;
  int8x16_t v28;
  uint64_t v29;

  v7 = *(unsigned __int8 *)(result + 64);
  if (*(_BYTE *)(result + 64))
  {
    v8 = 0;
    v9 = 0;
    v10 = *a6;
    v11 = *a7;
    v12 = 1;
    v13.i64[0] = 0x4000000040000000;
    v13.i64[1] = 0x4000000040000000;
    do
    {
      v14 = *(_QWORD *)(result + 80);
      v15 = vsub_f32((float32x2_t)vdup_lane_s32(*(int32x2_t *)(v14 + v8 + 40), 1), v10);
      if ((vmvn_s8((int8x8_t)vcge_f32(v11, v15)).u8[0] & 1) == 0)
      {
        v16 = *(float32x4_t *)(v14 + v8);
        v17 = *a5;
        v17.i32[3] = 0;
        v18 = (float32x2_t)vdupq_laneq_s32(*(int32x4_t *)a5, 3).u64[0];
        v19 = vmulq_n_f32(v16, vmla_f32((float32x2_t)0xBF000000BF000000, v18, v18).f32[0]);
        v19.i32[3] = 0;
        v20 = (float32x2_t)vextq_s8((int8x16_t)v17, (int8x16_t)v17, 8uLL).u64[0];
        v21 = (float32x2_t)vextq_s8((int8x16_t)v16, (int8x16_t)v16, 8uLL).u64[0];
        v22 = (int8x8_t)vmls_f32(vmul_f32(*(float32x2_t *)a5->f32, (float32x2_t)vext_s8(*(int8x8_t *)v16.f32, (int8x8_t)v21, 4uLL)), (float32x2_t)vext_s8(*(int8x8_t *)a5->f32, (int8x8_t)v20, 4uLL), *(float32x2_t *)v16.f32);
        *(int8x8_t *)v23.f32 = vext_s8(v22, (int8x8_t)vmls_f32(vmul_f32(v20, *(float32x2_t *)v16.f32), *(float32x2_t *)a5->f32, v21), 4uLL);
        v23.i64[1] = v22.u32[0];
        v24 = vmlaq_laneq_f32(v19, v23, *a5, 3);
        v24.i64[1] = vextq_s8((int8x16_t)v24, (int8x16_t)v24, 8uLL).u32[0];
        v25 = vmulq_f32(v17, v16);
        v25.i64[0] = vpaddq_f32(v25, v25).u64[0];
        v26 = vmlaq_n_f32(v24, v17, vpadd_f32(*(float32x2_t *)v25.f32, *(float32x2_t *)v25.f32).f32[0]);
        v26.i64[1] = vextq_s8((int8x16_t)v26, (int8x16_t)v26, 8uLL).u32[0];
        v27 = vmlaq_f32(a5[1], v13, v26);
        v27.i64[1] = vextq_s8((int8x16_t)v27, (int8x16_t)v27, 8uLL).u32[0];
        v28 = (int8x16_t)vmlsq_lane_f32(v27, *a4, v10, 0);
        v28.i64[1] = vextq_s8(v28, v28, 8uLL).u32[0];
        v29 = a2 + (v9++ << 6);
        *(_OWORD *)v29 = *a3;
        *(int8x16_t *)(v29 + 16) = v28;
        *(_DWORD *)(v29 + 12) = v15.i32[0];
        *(_DWORD *)(v29 + 52) = -1;
        v7 = *(unsigned __int8 *)(result + 64);
        v10 = *a6;
        v11 = *a7;
      }
      if (v9 > 0x3F)
        break;
      v8 += 48;
    }
    while (v12++ < v7);
  }
  else
  {
    LODWORD(v9) = 0;
  }
  *(_DWORD *)(a2 + 4096) = v9;
  return result;
}

uint64_t physx::Gu::PersistentContactManifold::addBatchManifoldContacts(uint64_t result, int32x4_t *a2, unsigned int a3, double a4)
{
  uint64_t v4;
  uint64_t v5;

  v4 = result;
  if (a3 > 4)
  {
    result = physx::Gu::PersistentContactManifold::reduceBatchContacts(result, a2, a3, a4);
    LOBYTE(a3) = 4;
  }
  else if (a3)
  {
    v5 = 0;
    do
    {
      *(int32x4_t *)(*(_QWORD *)(result + 80) + v5 * 16) = a2[v5];
      *(int32x4_t *)(*(_QWORD *)(result + 80) + v5 * 16 + 16) = a2[v5 + 1];
      *(int32x4_t *)(*(_QWORD *)(result + 80) + v5 * 16 + 32) = a2[v5 + 2];
      v5 += 3;
    }
    while (3 * a3 != v5);
  }
  *(_BYTE *)(v4 + 64) = a3;
  return result;
}

uint64_t physx::Gu::PersistentContactManifold::reduceBatchContacts(uint64_t result, int32x4_t *a2, unsigned int a3, double a4)
{
  uint64_t v4;
  float32x2_t v5;
  uint64_t v6;
  uint64_t v7;
  unsigned __int8 v8;
  int32x2_t *v9;
  float32x2_t v10;
  uint64_t i;
  float32x2_t v12;
  unsigned __int8 v13;
  unsigned int v14;
  uint64_t v15;
  unsigned __int8 v16;
  float32x4_t v17;
  uint64_t v18;
  float32x4_t v19;
  float32x4_t v20;
  float32x2_t v21;
  uint64_t j;
  float32x4_t v23;
  float32x4_t v24;
  float32x2_t v25;
  unsigned __int8 v26;
  unsigned int v27;
  int8x16_t v28;
  int8x16_t v29;
  int8x16_t v30;
  float32x2_t v31;
  int8x8_t v32;
  float32x4_t v33;
  float32x2_t v34;
  int32x2_t v35;
  float32x2_t v36;
  int v37;
  float32x2_t v43;
  float32x2_t v44;
  int v45;
  int8x16_t v46;
  float32x4_t v47;
  uint64_t v48;
  float32x2_t v49;
  int v50;
  float32x2_t v51;
  char v52;
  int v53;
  char v54;
  float32x4_t v55;
  float32x2_t v56;
  unsigned int v57;
  int8x8_t v58;
  unsigned __int8 v59;
  unsigned int v60;
  unsigned __int32 v61;
  uint64_t v62;
  uint64_t v63;
  float32x2_t v64;
  float32x4_t v65;
  float32x2_t v66;
  unsigned __int8 v67;
  unsigned int v68;
  uint64_t v69;
  float32x2_t v70;
  uint64_t v71;
  unsigned __int8 *v72;
  unsigned int v73;
  int32x4_t *v74;
  int32x4_t *v75;
  int32x4_t v76;
  int32x4_t v77;
  uint64_t k;
  unsigned int v79;
  float32x2_t v80;
  uint64_t v81;
  unsigned int v82;
  float32x2_t v83;
  unsigned int v84;
  unsigned int v85;
  int32x4_t *v86;
  int32x4_t *v87;
  int32x4_t v88;
  int32x4_t v89;
  _BYTE v90[4];
  _BYTE v91[64];
  uint64_t v92;

  v92 = *MEMORY[0x24BDAC8D0];
  if (a3 >= 0x40)
    v4 = 64;
  else
    v4 = a3;
  v5 = (float32x2_t)vdup_laneq_s32(a2[2], 3);
  v91[0] = 0;
  v6 = (v4 - 2);
  if (v4 < 2)
  {
    v8 = 0;
    v7 = 0;
    v10 = (float32x2_t)0x80000000800000;
  }
  else
  {
    LODWORD(v7) = 0;
    v8 = 0;
    v9 = (int32x2_t *)&a2[5];
    v10 = (float32x2_t)0x80000000800000;
    for (i = 1; i != v4; ++i)
    {
      v91[i] = i;
      v12 = (float32x2_t)vdup_lane_s32(v9[1], 1);
      v10 = vmax_f32(v10, v12);
      v13 = vcgt_f32(v5, v12).u8[0];
      if ((v13 & 1) != 0)
      {
        v8 = i;
        v7 = i;
      }
      else
      {
        v7 = v7;
      }
      if ((v13 & 1) != 0)
        v14 = -1;
      else
        v14 = 0;
      v5 = (float32x2_t)vbsl_s8((int8x8_t)vdup_n_s32(v14), (int8x8_t)v12, (int8x8_t)v5);
      v9 += 6;
    }
  }
  v90[0] = v8;
  v15 = (v4 - 1);
  v91[v7] = v91[v15];
  v16 = v91[0];
  v17 = (float32x4_t)a2[3 * v8 + 1];
  if (v15 < 2)
  {
    v18 = 0;
  }
  else
  {
    LODWORD(v18) = 0;
    v19 = vsubq_f32((float32x4_t)a2[3 * v91[0] + 1], v17);
    v20 = vmulq_f32(v19, v19);
    v20.i64[0] = vpaddq_f32(v20, v20).u64[0];
    v21 = vpadd_f32(*(float32x2_t *)v20.f32, *(float32x2_t *)v20.f32);
    for (j = 1; j != v15; ++j)
    {
      v23 = vsubq_f32((float32x4_t)a2[3 * v91[j] + 1], v17);
      v24 = vmulq_f32(v23, v23);
      v24.i64[0] = vpaddq_f32(v24, v24).u64[0];
      v25 = vpadd_f32(*(float32x2_t *)v24.f32, *(float32x2_t *)v24.f32);
      v26 = vcgt_f32(v25, v21).u8[0];
      if ((v26 & 1) != 0)
      {
        v16 = v91[j];
        v18 = j;
      }
      else
      {
        v18 = v18;
      }
      if ((v26 & 1) != 0)
        v27 = -1;
      else
        v27 = 0;
      v21 = (float32x2_t)vbsl_s8((int8x8_t)vdup_n_s32(v27), (int8x8_t)v25, (int8x8_t)v21);
    }
  }
  v90[1] = v16;
  v91[v18] = v91[v6];
  v28 = (int8x16_t)a2[3 * v8 + 2];
  v29 = v28;
  v29.i32[3] = 0;
  v30 = (int8x16_t)vsubq_f32((float32x4_t)a2[3 * v16 + 1], v17);
  v31 = (float32x2_t)vextq_s8(v29, v29, 8uLL).u64[0];
  v32 = (int8x8_t)vmls_f32(vmul_f32(*(float32x2_t *)v30.i8, (float32x2_t)vext_s8(*(int8x8_t *)v28.i8, (int8x8_t)v31, 4uLL)), (float32x2_t)*(_OWORD *)&vextq_s8(v30, v30, 4uLL), *(float32x2_t *)v28.i8);
  *(int8x8_t *)v33.f32 = vext_s8(v32, (int8x8_t)vmls_f32(vmul_f32((float32x2_t)*(_OWORD *)&vextq_s8(v30, v30, 8uLL), *(float32x2_t *)v28.i8), *(float32x2_t *)v30.i8, v31), 4uLL);
  v33.i64[1] = v32.u32[0];
  *(float32x2_t *)v28.i8 = vpadd_f32(vmul_f32(*(float32x2_t *)v33.f32, *(float32x2_t *)v33.f32), vmul_f32((float32x2_t)v32.u32[0], (float32x2_t)v32.u32[0]));
  v34 = vpadd_f32(*(float32x2_t *)v28.i8, *(float32x2_t *)v28.i8);
  v35 = (int32x2_t)vand_s8((int8x8_t)vcgtz_f32(v34), (int8x8_t)0x100000001);
  v36 = vrsqrte_f32(v34);
  v37 = 4;
  do
  {
    v36 = vmul_f32(v36, vrsqrts_f32(vmul_f32(v36, v36), v34));
    --v37;
  }
  while (v37);
  __asm { FMOV            V18.2S, #1.0 }
  v43 = vmul_f32(v34, (float32x2_t)vbsl_s8((int8x8_t)vdup_lane_s32(vceqz_f32(v34), 0), _D18, (int8x8_t)v36));
  v44 = vrecpe_f32(v43);
  v45 = 4;
  do
  {
    v44 = vmul_f32(v44, vrecps_f32(v43, v44));
    --v45;
  }
  while (v45);
  v46 = (int8x16_t)vmulq_n_f32(v33, v44.f32[0]);
  v46.i32[3] = 0;
  v47 = (float32x4_t)vbslq_s8((int8x16_t)vcltzq_s32(vshlq_n_s32(vdupq_lane_s32(v35, 0), 0x1FuLL)), v46, v29);
  if ((_DWORD)v4 == 2)
  {
    v61 = 127;
    v53 = -1;
    v54 = -1;
    v52 = -1;
    v50 = -1;
  }
  else
  {
    v48 = 0;
    v49 = (float32x2_t)vdup_n_s32(0x7F7FFFFFu);
    v50 = -1;
    v51 = (float32x2_t)0x80000000800000;
    v52 = -1;
    v53 = -1;
    v54 = -1;
    do
    {
      v55 = vmulq_f32(v47, vsubq_f32((float32x4_t)a2[3 * v91[v48] + 1], v17));
      v55.i64[0] = vpaddq_f32(v55, v55).u64[0];
      v56 = vpadd_f32(*(float32x2_t *)v55.f32, *(float32x2_t *)v55.f32);
      if ((vcgt_f32(v56, v51).u8[0] & 1) != 0)
      {
        v54 = v91[v48];
        v53 = v48;
        v57 = -1;
      }
      else
      {
        v57 = 0;
      }
      v58 = (int8x8_t)vdup_n_s32(v57);
      v59 = vcgt_f32(v49, v56).u8[0];
      if ((v59 & 1) != 0)
        v60 = -1;
      else
        v60 = 0;
      v51 = (float32x2_t)vbsl_s8(v58, (int8x8_t)v56, (int8x8_t)v51);
      v49 = (float32x2_t)vbsl_s8((int8x8_t)vdup_n_s32(v60), (int8x8_t)v56, (int8x8_t)v49);
      if ((v59 & 1) != 0)
      {
        v52 = v91[v48];
        v50 = v48;
      }
      ++v48;
    }
    while (v6 != v48);
    v61 = vmul_f32(v51, v49).u32[0];
  }
  v90[2] = v54;
  v62 = (v4 - 3);
  v91[v53] = v91[v62];
  if ((_DWORD)v62 == v50)
    v50 = v53;
  if ((_DWORD)v4 != 3 && *(float *)&v61 > 0.0)
  {
    v63 = 0;
    v64 = (float32x2_t)0x80000000800000;
    do
    {
      v65 = vmulq_f32(v47, vsubq_f32((float32x4_t)a2[3 * v91[v63] + 1], v17));
      v65.i64[0] = vpaddq_f32(v65, v65).u64[0];
      v66 = vpadd_f32(*(float32x2_t *)v65.f32, *(float32x2_t *)v65.f32);
      v67 = vcgt_f32(v66, v64).u8[0];
      if ((v67 & 1) != 0)
        v68 = -1;
      else
        v68 = 0;
      v64 = (float32x2_t)vbsl_s8((int8x8_t)vdup_n_s32(v68), (int8x8_t)v66, (int8x8_t)v64);
      if ((v67 & 1) != 0)
      {
        v52 = v91[v63];
        v50 = v63;
      }
      ++v63;
    }
    while (v62 != v63);
  }
  v90[3] = v52;
  v69 = (v4 - 4);
  v91[v50] = v91[v69];
  *(float *)&a4 = *(float *)&a4 * 0.02;
  v70 = (float32x2_t)vdup_lane_s32(*(int32x2_t *)&a4, 0);
  if (vuzp1_s8((int8x8_t)vdup_lane_s16((int16x4_t)vand_s8((int8x8_t)vcgt_f32(v70, v5), (int8x8_t)vcgt_f32(v10, v70)), 0), (int8x8_t)v70).u32[0] == -1)
  {
    for (k = 0; k != 4; ++k)
    {
      v79 = v90[k];
      if ((_DWORD)v69)
      {
        v80 = (float32x2_t)vdup_lane_s32((int32x2_t)a2[3 * v90[k] + 2].u64[1], 1);
        if ((vcgt_f32(v80, v70).u8[0] & 1) != 0)
        {
          v81 = 0;
          v82 = -1;
          do
          {
            v83 = (float32x2_t)vdup_lane_s32((int32x2_t)a2[3 * v91[v81] + 2].u64[1], 1);
            if ((vcgt_f32(v80, v83).u8[0] & 1) != 0)
            {
              if ((vcgt_f32(v70, v83).u8[0] & 1) != 0)
              {
                v82 = v81;
                v84 = -1;
              }
              else
              {
                v84 = 0;
              }
              v80 = (float32x2_t)vbsl_s8((int8x8_t)vdup_n_s32(v84), (int8x8_t)v83, (int8x8_t)v80);
            }
            ++v81;
          }
          while (v69 != v81);
          if (v82 < v69)
          {
            v85 = v91[v82];
            v90[k] = v85;
            v91[v82] = v79;
            v79 = v85;
          }
        }
      }
      v86 = &a2[3 * v79];
      v87 = (int32x4_t *)(*(_QWORD *)(result + 80) + 48 * k);
      v88 = *v86;
      v89 = v86[2];
      v87[1] = v86[1];
      v87[2] = v89;
      *v87 = v88;
    }
  }
  else
  {
    v71 = 0;
    v72 = v90;
    do
    {
      v73 = *v72++;
      v74 = &a2[3 * v73];
      v75 = (int32x4_t *)(*(_QWORD *)(result + 80) + v71);
      v77 = v74[1];
      v76 = v74[2];
      *v75 = *v74;
      v75[1] = v77;
      v75[2] = v76;
      v71 += 48;
    }
    while (v71 != 192);
  }
  return result;
}

void physx::Gu::PersistentContactManifold::addBatchManifoldContactsCluster(uint64_t a1, float32x4_t *a2, unsigned int a3)
{
  uint64_t v4;

  if (a3 > 4)
  {
    physx::Gu::PersistentContactManifold::reduceBatchContactsCluster(a1, a2, a3);
    LOBYTE(a3) = 4;
  }
  else if (a3)
  {
    v4 = 0;
    do
    {
      *(float32x4_t *)(*(_QWORD *)(a1 + 80) + v4 * 16) = a2[v4];
      *(float32x4_t *)(*(_QWORD *)(a1 + 80) + v4 * 16 + 16) = a2[v4 + 1];
      *(float32x4_t *)(*(_QWORD *)(a1 + 80) + v4 * 16 + 32) = a2[v4 + 2];
      v4 += 3;
    }
    while (3 * a3 != v4);
  }
  *(_BYTE *)(a1 + 64) = a3;
}

__n128 physx::Gu::PersistentContactManifold::reduceBatchContactsCluster(uint64_t a1, float32x4_t *a2, unsigned int a3)
{
  size_t v5;
  uint64_t v6;
  unsigned int v7;
  float32x4_t *v8;
  float32x2_t v9;
  float32x4_t v10;
  float32x4_t v11;
  float32x2_t v12;
  unsigned int v13;
  unsigned int v14;
  __int128 *v15;
  _OWORD *v16;
  __int128 v17;
  __int128 v18;
  float32x4_t *v19;
  unsigned int v20;
  float32x4_t v21;
  float32x4_t v22;
  float32x4_t v23;
  float32x2_t v24;
  float32x4_t *v25;
  uint64_t i;
  float32x4_t v27;
  float32x4_t v28;
  float32x4_t v29;
  float32x2_t v30;
  unsigned int v31;
  unsigned int v32;
  float32x4_t *v33;
  float32x4_t v34;
  float32x4_t v35;
  uint64_t v36;
  float32x4_t v37;
  int8x16_t v38;
  int8x16_t v39;
  int8x16_t v40;
  float32x2_t v41;
  int8x8_t v42;
  float32x4_t v43;
  float32x2_t v44;
  int32x2_t v45;
  float32x2_t v46;
  int v47;
  float32x2_t v53;
  float32x2_t v54;
  int v55;
  int8x16_t v56;
  float32x4_t v57;
  uint64_t v58;
  float32x2_t v59;
  float32x4_t *v60;
  float32x2_t v61;
  unsigned int v62;
  unsigned int v63;
  float32x4_t v64;
  float32x2_t v65;
  unsigned int v66;
  unsigned __int8 v67;
  unsigned int v68;
  unsigned __int32 v69;
  __int128 *v70;
  __int128 v71;
  __int128 v72;
  uint64_t v73;
  float32x4_t *v74;
  float32x2_t v75;
  float32x4_t v76;
  float32x2_t v77;
  unsigned __int8 v78;
  unsigned int v79;
  __int128 *v80;
  _OWORD *v81;
  __int128 v82;
  __int128 v83;
  uint64_t v84;
  int32x2_t v85;
  uint64_t v86;
  uint64_t v87;
  float32x4_t *v88;
  float32x4_t v89;
  float32x4_t v90;
  float32x4_t *v91;
  float32x2_t v92;
  float32x4_t v93;
  float32x4_t v94;
  float32x4_t v95;
  float32x2_t v96;
  unsigned __int8 v97;
  unsigned int v98;
  unsigned int v99;
  __int128 *v100;
  _OWORD *v101;
  __int128 v102;
  __int128 v103;
  __int128 *v104;
  _OWORD *v105;
  __int128 v106;
  __int128 v107;
  __int128 *v108;
  _OWORD *v109;
  __int128 v110;
  __int128 v111;
  float32x4_t *v112;
  uint64_t v113;
  __n128 result;
  float32x4_t v115;
  unsigned int v116;
  unsigned int v117;
  unsigned int v118;
  unsigned int v119;
  _BYTE v120[64];
  uint64_t v121;

  v121 = *MEMORY[0x24BDAC8D0];
  if (a3 >= 0x40)
    v5 = 64;
  else
    v5 = a3;
  bzero(v120, v5);
  if ((_DWORD)v5)
  {
    v6 = 0;
    v7 = 0;
    v8 = a2 + 1;
    v9 = (float32x2_t)0x80000000800000;
    do
    {
      v10 = *v8;
      v8 += 3;
      v11 = vmulq_f32(v10, v10);
      v11.i64[0] = vpaddq_f32(v11, v11).u64[0];
      v12 = vpadd_f32(*(float32x2_t *)v11.f32, *(float32x2_t *)v11.f32);
      if ((vcgt_f32(v12, v9).u8[0] & 1) != 0)
      {
        v7 = v6;
        v13 = -1;
      }
      else
      {
        v13 = 0;
      }
      v9 = (float32x2_t)vbsl_s8((int8x8_t)vdup_n_s32(v13), (int8x8_t)v12, (int8x8_t)v9);
      ++v6;
    }
    while (v5 != v6);
  }
  else
  {
    v7 = 0;
  }
  v14 = v7;
  v15 = (__int128 *)&a2[3 * v7];
  v16 = *(_OWORD **)(a1 + 80);
  v17 = *v15;
  v18 = v15[2];
  v16[1] = v15[1];
  v16[2] = v18;
  *v16 = v17;
  v120[v7] = 1;
  v116 = v7;
  v19 = *(float32x4_t **)(a1 + 80);
  if (v5 < 2)
  {
    v20 = 0;
  }
  else
  {
    v20 = 0;
    v21 = v19[1];
    v22 = vsubq_f32(a2[1], v21);
    v23 = vmulq_f32(v22, v22);
    v23.i64[0] = vpaddq_f32(v23, v23).u64[0];
    v24 = vpadd_f32(*(float32x2_t *)v23.f32, *(float32x2_t *)v23.f32);
    v25 = a2 + 4;
    for (i = 1; i != v5; ++i)
    {
      v27 = *v25;
      v25 += 3;
      v28 = vsubq_f32(v27, v21);
      v29 = vmulq_f32(v28, v28);
      v29.i64[0] = vpaddq_f32(v29, v29).u64[0];
      v30 = vpadd_f32(*(float32x2_t *)v29.f32, *(float32x2_t *)v29.f32);
      if ((vcgt_f32(v30, v24).u8[0] & 1) != 0)
      {
        v20 = i;
        v31 = -1;
      }
      else
      {
        v31 = 0;
      }
      v24 = (float32x2_t)vbsl_s8((int8x8_t)vdup_n_s32(v31), (int8x8_t)v30, (int8x8_t)v24);
    }
  }
  v32 = v20;
  v33 = &a2[3 * v20];
  v34 = *v33;
  v35 = v33[2];
  v19[4] = v33[1];
  v19[5] = v35;
  v19[3] = v34;
  v120[v20] = 1;
  v117 = v20;
  v36 = *(_QWORD *)(a1 + 80);
  v37 = *(float32x4_t *)(v36 + 16);
  v38 = *(int8x16_t *)(v36 + 32);
  v39 = v38;
  v39.i32[3] = 0;
  v40 = (int8x16_t)vsubq_f32(*(float32x4_t *)(v36 + 64), v37);
  v41 = (float32x2_t)vextq_s8(v39, v39, 8uLL).u64[0];
  v42 = (int8x8_t)vmls_f32(vmul_f32(*(float32x2_t *)v40.i8, (float32x2_t)vext_s8(*(int8x8_t *)v38.i8, (int8x8_t)v41, 4uLL)), (float32x2_t)*(_OWORD *)&vextq_s8(v40, v40, 4uLL), *(float32x2_t *)v38.i8);
  *(int8x8_t *)v43.f32 = vext_s8(v42, (int8x8_t)vmls_f32(vmul_f32((float32x2_t)*(_OWORD *)&vextq_s8(v40, v40, 8uLL), *(float32x2_t *)v38.i8), *(float32x2_t *)v40.i8, v41), 4uLL);
  v43.i64[1] = v42.u32[0];
  *(float32x2_t *)v38.i8 = vpadd_f32(vmul_f32(*(float32x2_t *)v43.f32, *(float32x2_t *)v43.f32), vmul_f32((float32x2_t)v42.u32[0], (float32x2_t)v42.u32[0]));
  v44 = vpadd_f32(*(float32x2_t *)v38.i8, *(float32x2_t *)v38.i8);
  v45 = (int32x2_t)vand_s8((int8x8_t)vcgtz_f32(v44), (int8x8_t)0x100000001);
  v46 = vrsqrte_f32(v44);
  v47 = 4;
  do
  {
    v46 = vmul_f32(v46, vrsqrts_f32(vmul_f32(v46, v46), v44));
    --v47;
  }
  while (v47);
  __asm { FMOV            V7.2S, #1.0 }
  v53 = vmul_f32(v44, (float32x2_t)vbsl_s8((int8x8_t)vdup_lane_s32(vceqz_f32(v44), 0), _D7, (int8x8_t)v46));
  v54 = vrecpe_f32(v53);
  v55 = 4;
  do
  {
    v54 = vmul_f32(v54, vrecps_f32(v53, v54));
    --v55;
  }
  while (v55);
  v56 = (int8x16_t)vmulq_n_f32(v43, v54.f32[0]);
  v56.i32[3] = 0;
  v57 = (float32x4_t)vbslq_s8((int8x16_t)vcltzq_s32(vshlq_n_s32(vdupq_lane_s32(v45, 0), 0x1FuLL)), v56, v39);
  if ((_DWORD)v5)
  {
    v58 = 0;
    v59 = (float32x2_t)vdup_n_s32(0x7F7FFFFFu);
    v60 = a2 + 1;
    v61 = (float32x2_t)0x80000000800000;
    v62 = -1;
    v63 = -1;
    do
    {
      if (!v120[v58])
      {
        v64 = vmulq_f32(v57, vsubq_f32(*v60, v37));
        v64.i64[0] = vpaddq_f32(v64, v64).u64[0];
        v65 = vpadd_f32(*(float32x2_t *)v64.f32, *(float32x2_t *)v64.f32);
        if ((vcgt_f32(v65, v61).u8[0] & 1) != 0)
        {
          v63 = v58;
          v66 = -1;
        }
        else
        {
          v66 = 0;
        }
        v61 = (float32x2_t)vbsl_s8((int8x8_t)vdup_n_s32(v66), (int8x8_t)v65, (int8x8_t)v61);
        v67 = vcgt_f32(v59, v65).u8[0];
        v68 = (v67 & 1) != 0 ? -1 : 0;
        v59 = (float32x2_t)vbsl_s8((int8x8_t)vdup_n_s32(v68), (int8x8_t)v65, (int8x8_t)v59);
        if ((v67 & 1) != 0)
          v62 = v58;
      }
      ++v58;
      v60 += 3;
    }
    while (v5 != v58);
    v69 = vmul_f32(v61, v59).u32[0];
  }
  else
  {
    v69 = 127;
    v63 = -1;
    v62 = -1;
  }
  v70 = (__int128 *)&a2[3 * v63];
  v71 = *v70;
  v72 = v70[2];
  *(_OWORD *)(v36 + 112) = v70[1];
  *(_OWORD *)(v36 + 128) = v72;
  *(_OWORD *)(v36 + 96) = v71;
  v120[v63] = 1;
  v118 = v63;
  if ((_DWORD)v5 && *(float *)&v69 > 0.0)
  {
    v73 = 0;
    v74 = a2 + 1;
    v75 = (float32x2_t)0x80000000800000;
    do
    {
      if (!v120[v73])
      {
        v76 = vmulq_f32(v57, vsubq_f32(*v74, *(float32x4_t *)(*(_QWORD *)(a1 + 80) + 16)));
        v76.i64[0] = vpaddq_f32(v76, v76).u64[0];
        v77 = vpadd_f32(*(float32x2_t *)v76.f32, *(float32x2_t *)v76.f32);
        v78 = vcgt_f32(v77, v75).u8[0];
        v79 = (v78 & 1) != 0 ? -1 : 0;
        v75 = (float32x2_t)vbsl_s8((int8x8_t)vdup_n_s32(v79), (int8x8_t)v77, (int8x8_t)v75);
        if ((v78 & 1) != 0)
          v62 = v73;
      }
      ++v73;
      v74 += 3;
    }
    while (v5 != v73);
  }
  v80 = (__int128 *)&a2[3 * v62];
  v81 = *(_OWORD **)(a1 + 80);
  v82 = *v80;
  v83 = v80[2];
  v81[10] = v80[1];
  v81[11] = v83;
  v81[9] = v82;
  v120[v62] = 1;
  v119 = v62;
  if ((_DWORD)v5)
  {
    v84 = 0;
    v85 = vdup_n_s32(0x7F7FFFFFu);
    do
    {
      LODWORD(v86) = v120[v84];
      if (!v120[v84])
      {
        v87 = 0;
        v88 = &a2[3 * v84];
        v90 = v88[1];
        v89 = v88[2];
        v91 = (float32x4_t *)(*(_QWORD *)(a1 + 80) + 16);
        v92 = (float32x2_t)v85;
        do
        {
          v93 = *v91;
          v91 += 3;
          v94 = vsubq_f32(v90, v93);
          v95 = vmulq_f32(v94, v94);
          v95.i64[0] = vpaddq_f32(v95, v95).u64[0];
          v96 = vpadd_f32(*(float32x2_t *)v95.f32, *(float32x2_t *)v95.f32);
          v97 = vcgt_f32(v92, v96).u8[0];
          if ((v97 & 1) != 0)
            v86 = v87;
          else
            v86 = v86;
          if ((v97 & 1) != 0)
            v98 = -1;
          else
            v98 = 0;
          v92 = (float32x2_t)vbsl_s8((int8x8_t)vdup_n_s32(v98), (int8x8_t)v96, (int8x8_t)v92);
          ++v87;
        }
        while (v87 != 4);
        if (a2[3 * *(&v116 + v86) + 2].f32[3] > v89.f32[3])
          *(&v116 + v86) = v84;
      }
      ++v84;
    }
    while (v84 != v5);
    v14 = v116;
    v32 = v117;
    v63 = v118;
    v99 = v119;
  }
  else
  {
    v99 = v62;
  }
  v100 = (__int128 *)&a2[3 * v14];
  v101 = *(_OWORD **)(a1 + 80);
  v102 = *v100;
  v103 = v100[2];
  v101[1] = v100[1];
  v101[2] = v103;
  *v101 = v102;
  v104 = (__int128 *)&a2[3 * v32];
  v105 = *(_OWORD **)(a1 + 80);
  v106 = *v104;
  v107 = v104[2];
  v105[4] = v104[1];
  v105[5] = v107;
  v105[3] = v106;
  v108 = (__int128 *)&a2[3 * v63];
  v109 = *(_OWORD **)(a1 + 80);
  v110 = *v108;
  v111 = v108[2];
  v109[7] = v108[1];
  v109[8] = v111;
  v109[6] = v110;
  v112 = &a2[3 * v99];
  v113 = *(_QWORD *)(a1 + 80);
  result = *(__n128 *)v112;
  v115 = v112[2];
  *(float32x4_t *)(v113 + 160) = v112[1];
  *(float32x4_t *)(v113 + 176) = v115;
  *(__n128 *)(v113 + 144) = result;
  return result;
}

__n128 physx::Gu::PersistentContactManifold::reduceBatchContacts2(uint64_t a1, uint64_t a2, unsigned int a3)
{
  size_t v5;
  uint64_t v6;
  float32x2_t v7;
  int32x2_t *v8;
  uint64_t i;
  float32x2_t v10;
  unsigned int v11;
  __int128 *v12;
  _OWORD *v13;
  __int128 v14;
  __int128 v15;
  uint64_t v16;
  int v17;
  float32x4_t v18;
  float32x4_t v19;
  float32x4_t v20;
  float32x2_t v21;
  float32x4_t *v22;
  uint64_t j;
  float32x4_t v24;
  float32x4_t v25;
  float32x4_t v26;
  float32x2_t v27;
  unsigned int v28;
  uint64_t v29;
  __n128 result;
  __int128 v31;
  uint64_t v32;
  float *v33;
  int v34;
  float32x4_t *v35;
  float32x4_t v36;
  float32x4_t v37;
  float32x4_t v38;
  float32x4_t v39;
  float32x4_t v40;
  uint64_t v41;
  uint64_t v42;
  __int128 v43;
  _BYTE v44[64];
  uint64_t v45;

  v45 = *MEMORY[0x24BDAC8D0];
  if (a3 >= 0x40)
    v5 = 64;
  else
    v5 = a3;
  bzero(v44, v5);
  if (v5 < 2)
  {
    v6 = 0;
  }
  else
  {
    LODWORD(v6) = 0;
    v7 = (float32x2_t)vdup_lane_s32(*(int32x2_t *)(a2 + 40), 1);
    v8 = (int32x2_t *)(a2 + 80);
    for (i = 1; i != v5; ++i)
    {
      v10 = (float32x2_t)vdup_lane_s32(v8[1], 1);
      if ((vcgt_f32(v7, v10).u8[0] & 1) != 0)
      {
        LODWORD(v6) = i;
        v11 = -1;
      }
      else
      {
        v11 = 0;
      }
      v7 = (float32x2_t)vbsl_s8((int8x8_t)vdup_n_s32(v11), (int8x8_t)v10, (int8x8_t)v7);
      v8 += 6;
    }
    v6 = (int)v6;
  }
  v12 = (__int128 *)(a2 + 48 * (int)v6);
  v13 = *(_OWORD **)(a1 + 80);
  v14 = *v12;
  v15 = v12[2];
  v13[1] = v12[1];
  v13[2] = v15;
  *v13 = v14;
  v44[v6] = 1;
  v16 = *(_QWORD *)(a1 + 80);
  if (v5 < 2)
  {
    v17 = 0;
  }
  else
  {
    v17 = 0;
    v18 = *(float32x4_t *)(v16 + 16);
    v19 = vsubq_f32(*(float32x4_t *)(a2 + 16), v18);
    v20 = vmulq_f32(v19, v19);
    v20.i64[0] = vpaddq_f32(v20, v20).u64[0];
    v21 = vpadd_f32(*(float32x2_t *)v20.f32, *(float32x2_t *)v20.f32);
    v22 = (float32x4_t *)(a2 + 64);
    for (j = 1; j != v5; ++j)
    {
      v24 = *v22;
      v22 += 3;
      v25 = vsubq_f32(v24, v18);
      v26 = vmulq_f32(v25, v25);
      v26.i64[0] = vpaddq_f32(v26, v26).u64[0];
      v27 = vpadd_f32(*(float32x2_t *)v26.f32, *(float32x2_t *)v26.f32);
      if ((vcgt_f32(v27, v21).u8[0] & 1) != 0)
      {
        v17 = j;
        v28 = -1;
      }
      else
      {
        v28 = 0;
      }
      v21 = (float32x2_t)vbsl_s8((int8x8_t)vdup_n_s32(v28), (int8x8_t)v27, (int8x8_t)v21);
    }
  }
  v29 = a2 + 48 * v17;
  result = *(__n128 *)v29;
  v31 = *(_OWORD *)(v29 + 32);
  *(_OWORD *)(v16 + 64) = *(_OWORD *)(v29 + 16);
  *(_OWORD *)(v16 + 80) = v31;
  *(__n128 *)(v16 + 48) = result;
  v44[v17] = 1;
  if ((_DWORD)v5)
  {
    v32 = 0;
    result.n128_u32[0] = *(_DWORD *)(a2 + 48 * v17 + 44);
    v33 = (float *)(a2 + 44);
    v34 = v17;
    do
    {
      if (!v44[v32])
      {
        v35 = *(float32x4_t **)(a1 + 80);
        v36 = *(float32x4_t *)(v33 - 7);
        v37 = vsubq_f32(v35[1], v36);
        v38 = vsubq_f32(v35[4], v36);
        v39 = vmulq_f32(v37, v37);
        v39.i64[0] = vpaddq_f32(v39, v39).u64[0];
        v40 = vmulq_f32(v38, v38);
        v40.i64[0] = vpaddq_f32(v40, v40).u64[0];
        if ((vcgt_f32(vpadd_f32(*(float32x2_t *)v39.f32, *(float32x2_t *)v39.f32), vpadd_f32(*(float32x2_t *)v40.f32, *(float32x2_t *)v40.f32)).u8[0] & 1) != 0&& result.n128_f32[0] > *v33)
        {
          v34 = v32;
        }
      }
      ++v32;
      v33 += 12;
    }
    while (v5 != v32);
    if (v34 != v17)
    {
      v41 = a2 + 48 * v34;
      v42 = *(_QWORD *)(a1 + 80);
      result = *(__n128 *)v41;
      v43 = *(_OWORD *)(v41 + 32);
      *(_OWORD *)(v42 + 64) = *(_OWORD *)(v41 + 16);
      *(_OWORD *)(v42 + 80) = v43;
      *(__n128 *)(v42 + 48) = result;
    }
  }
  return result;
}

uint64_t physx::Gu::PersistentContactManifold::addManifoldPoint(uint64_t a1, float32x4_t *a2, __int128 *a3, int32x4_t *a4, float32x2_t *a5)
{
  int32x4_t v9;
  uint64_t v10;
  unsigned int v11;

  if (!physx::Gu::PersistentContactManifold::replaceManifoldPoint(a1, a2, (float32x4_t *)a3, a4, a5))
  {
    if (*(unsigned __int8 *)(a1 + 64) <= 3uLL)
    {
      *(float32x4_t *)(*(_QWORD *)(a1 + 80) + 48 * *(unsigned __int8 *)(a1 + 64)) = *a2;
      *(_OWORD *)(*(_QWORD *)(a1 + 80) + 48 * *(unsigned __int8 *)(a1 + 64) + 16) = *a3;
      v9 = *a4;
      v10 = *(_QWORD *)(a1 + 80);
      v11 = *(unsigned __int8 *)(a1 + 64);
      *(_BYTE *)(a1 + 64) = v11 + 1;
      *(int32x4_t *)(v10 + 48 * v11 + 32) = v9;
      return 1;
    }
    physx::Gu::PersistentContactManifold::reduceContactsForPCM(a1, a2, a3, a4);
  }
  return 0;
}

uint64_t physx::Gu::PersistentContactManifold::addManifoldPoint2(uint64_t a1, float32x4_t *a2, float32x4_t *a3, __int128 *a4, float32x2_t *a5)
{
  unsigned int v9;
  __int128 v10;
  uint64_t v11;
  unsigned int v12;
  uint64_t result;
  float32x4_t *v14;
  float32x4_t v15;
  float32x4_t v16;
  float32x4_t v17;
  float32x4_t v18;
  uint64_t v19;

  if (physx::Gu::PersistentContactManifold::replaceManifoldPoint(a1, a2, a3, a4, a5))
    return 0;
  v9 = *(unsigned __int8 *)(a1 + 64);
  if (v9 < 2)
  {
    *(float32x4_t *)(*(_QWORD *)(a1 + 80) + 48 * *(unsigned __int8 *)(a1 + 64)) = *a2;
    *(float32x4_t *)(*(_QWORD *)(a1 + 80) + 48 * *(unsigned __int8 *)(a1 + 64) + 16) = *a3;
    v10 = *a4;
    v11 = *(_QWORD *)(a1 + 80);
    v12 = *(unsigned __int8 *)(a1 + 64);
    *(_BYTE *)(a1 + 64) = v12 + 1;
    *(_OWORD *)(v11 + 48 * v12 + 32) = v10;
    return 1;
  }
  if (v9 != 2)
    return 0;
  result = 0;
  v14 = *(float32x4_t **)(a1 + 80);
  v15 = vsubq_f32(v14[1], *a3);
  v16 = vsubq_f32(v14[4], *a3);
  v17 = vmulq_f32(v15, v15);
  v17.i64[0] = vpaddq_f32(v17, v17).u64[0];
  v18 = vmulq_f32(v16, v16);
  v18.i64[0] = vpaddq_f32(v18, v18).u64[0];
  v18.i8[0] = vcgt_f32(vpadd_f32(*(float32x2_t *)v17.f32, *(float32x2_t *)v17.f32), vpadd_f32(*(float32x2_t *)v18.f32, *(float32x2_t *)v18.f32)).u8[0];
  v19 = (16 * (v18.i8[0] & 1)) & 0xDF | (32 * (v18.i8[0] & 1));
  *(float32x4_t *)((char *)v14 + v19) = *a2;
  *(float32x4_t *)(*(_QWORD *)(a1 + 80) + v19 + 16) = *a3;
  *(_OWORD *)(*(_QWORD *)(a1 + 80) + v19 + 32) = *a4;
  return result;
}

void physx::Gu::PersistentContactManifold::addBatchManifoldContacts2(uint64_t a1, uint64_t a2, unsigned int a3)
{
  uint64_t v4;

  if (a3 > 2)
  {
    physx::Gu::PersistentContactManifold::reduceBatchContacts2(a1, a2, a3);
    LOBYTE(a3) = 2;
  }
  else if (a3)
  {
    v4 = 0;
    do
    {
      *(_OWORD *)(*(_QWORD *)(a1 + 80) + v4) = *(_OWORD *)(a2 + v4);
      *(_OWORD *)(*(_QWORD *)(a1 + 80) + v4 + 16) = *(_OWORD *)(a2 + v4 + 16);
      *(_OWORD *)(*(_QWORD *)(a1 + 80) + v4 + 32) = *(_OWORD *)(a2 + v4 + 32);
      v4 += 48;
    }
    while (48 * a3 != v4);
  }
  *(_BYTE *)(a1 + 64) = a3;
}

void physx::Gu::SinglePersistentContactManifold::reduceBatchContactsConvex(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  size_t v7;
  __int8 *v8;
  unsigned int v9;
  float32x2_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  float32x4_t *v14;
  float32x4_t v15;
  float32x4_t v16;
  float32x2_t v17;
  unsigned int v18;
  uint64_t v19;
  int v20;
  __int128 v21;
  float32x4_t v22;
  float32x4_t v23;
  int32x4_t v24;
  uint64_t v25;
  float32x4_t v26;
  float32x4_t v27;
  float32x2_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  float32x4_t *v32;
  float32x4_t v33;
  float32x4_t v34;
  float32x4_t v35;
  float32x2_t v36;
  unsigned int v37;
  uint64_t v38;
  int v39;
  __int128 v40;
  float32x4_t v41;
  float32x4_t v42;
  int32x4_t v43;
  int8x16_t v44;
  int8x16_t v45;
  int8x16_t v46;
  float32x2_t v47;
  int8x8_t v48;
  float32x4_t v49;
  float32x2_t v50;
  int32x2_t v51;
  float32x2_t v52;
  int v53;
  int32x4_t v54;
  float32x2_t v60;
  float32x2_t v61;
  int v62;
  float32x2_t v63;
  int8x16_t v64;
  float32x2_t v65;
  float32x4_t v66;
  float32x2_t v67;
  unsigned int v68;
  unsigned int v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  float32x4_t *v73;
  float32x4_t v74;
  float32x2_t v75;
  unsigned int v76;
  unsigned __int8 v77;
  unsigned int v78;
  float32x2_t v79;
  __int128 *v80;
  __int128 v81;
  __int128 v82;
  __int128 v83;
  float32x2_t v84;
  float32x2_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  float32x4_t *v89;
  float32x4_t v90;
  float32x2_t v91;
  unsigned __int8 v92;
  unsigned int v93;
  float32x2_t v94;
  __int128 *v95;
  __int128 v96;
  __int128 v97;
  __int128 v98;
  uint64_t v99;
  uint64_t v100;
  int32x4_t *v101;
  int32x4_t v102;
  float v103;
  uint64_t v104;
  int32x2_t *p_b;
  uint64_t v106;
  float32x2_t v107;
  char v108;
  char v109;
  __int128 *v110;
  uint64_t v111;
  __int128 v112;
  __int128 v113;
  __int128 v114;
  int32x4_t v115;
  uint64_t v116;
  uint64_t __b;
  _QWORD v118[2];

  v118[1] = *MEMORY[0x24BDAC8D0];
  MEMORY[0x24BDAC7A8](a1);
  v8 = &v115.i8[-((v7 + 15) & 0x1FFFFFFF0)];
  bzero(v8, v7);
  v9 = -1;
  v10 = (float32x2_t)0x80000000800000;
  v11 = a4;
  do
  {
    v12 = *(unsigned int *)(v11 + 48);
    v13 = *(unsigned int *)(v11 + 52);
    if (v12 < v13)
    {
      v14 = (float32x4_t *)(a2 + 16 + (v12 << 6));
      do
      {
        v15 = *v14;
        v14 += 4;
        v16 = vmulq_f32(v15, v15);
        v16.i64[0] = vpaddq_f32(v16, v16).u64[0];
        v17 = vpadd_f32(*(float32x2_t *)v16.f32, *(float32x2_t *)v16.f32);
        if ((vcgt_f32(v17, v10).u8[0] & 1) != 0)
        {
          v9 = v12;
          v18 = -1;
        }
        else
        {
          v18 = 0;
        }
        v10 = (float32x2_t)vbsl_s8((int8x8_t)vdup_n_s32(v18), (int8x8_t)v17, (int8x8_t)v10);
        ++v12;
      }
      while (v13 != v12);
    }
    v11 = *(_QWORD *)(v11 + 16);
  }
  while (v11);
  v8[v9] = 1;
  v19 = a2 + ((unint64_t)v9 << 6);
  v20 = *(_DWORD *)(v19 + 48);
  v22 = *(float32x4_t *)(v19 + 16);
  v21 = *(_OWORD *)(v19 + 32);
  v23 = v22;
  *(_OWORD *)a1 = *(_OWORD *)v19;
  *(float32x4_t *)(a1 + 16) = v22;
  *(_OWORD *)(a1 + 32) = v21;
  *(_DWORD *)(a1 + 48) = v20;
  v24 = *(int32x4_t *)(v19 + 32);
  v25 = *(unsigned int *)(a4 + 48);
  v26 = vsubq_f32(*(float32x4_t *)(a2 + (v25 << 6) + 16), v22);
  v27 = vmulq_f32(v26, v26);
  v27.i64[0] = vpaddq_f32(v27, v27).u64[0];
  v28 = vpadd_f32(*(float32x2_t *)v27.f32, *(float32x2_t *)v27.f32);
  v29 = a4;
  do
  {
    v30 = *(unsigned int *)(v29 + 48);
    v31 = *(unsigned int *)(v29 + 52);
    if (v30 < v31)
    {
      v32 = (float32x4_t *)(a2 + 16 + (v30 << 6));
      do
      {
        v33 = *v32;
        v32 += 4;
        v34 = vsubq_f32(v33, v23);
        v35 = vmulq_f32(v34, v34);
        v35.i64[0] = vpaddq_f32(v35, v35).u64[0];
        v36 = vpadd_f32(*(float32x2_t *)v35.f32, *(float32x2_t *)v35.f32);
        if ((vcgt_f32(v36, v28).u8[0] & 1) != 0)
        {
          LODWORD(v25) = v30;
          v37 = -1;
        }
        else
        {
          v37 = 0;
        }
        v28 = (float32x2_t)vbsl_s8((int8x8_t)vdup_n_s32(v37), (int8x8_t)v36, (int8x8_t)v28);
        ++v30;
      }
      while (v31 != v30);
    }
    v29 = *(_QWORD *)(v29 + 16);
  }
  while (v29);
  v8[v25] = 1;
  v38 = a2 + ((unint64_t)v25 << 6);
  v39 = *(_DWORD *)(v38 + 48);
  v41 = *(float32x4_t *)(v38 + 16);
  v40 = *(_OWORD *)(v38 + 32);
  v42 = v41;
  *(_OWORD *)(a1 + 64) = *(_OWORD *)v38;
  *(float32x4_t *)(a1 + 80) = v41;
  *(_OWORD *)(a1 + 96) = v40;
  *(_DWORD *)(a1 + 112) = v39;
  v43 = *(int32x4_t *)(v38 + 32);
  v44 = *(int8x16_t *)(a1 + 32);
  v45 = v44;
  v45.i32[3] = 0;
  v46 = (int8x16_t)vsubq_f32(v42, v23);
  v47 = (float32x2_t)vextq_s8(v45, v45, 8uLL).u64[0];
  v48 = (int8x8_t)vmls_f32(vmul_f32(*(float32x2_t *)v46.i8, (float32x2_t)vext_s8(*(int8x8_t *)v44.i8, (int8x8_t)v47, 4uLL)), (float32x2_t)*(_OWORD *)&vextq_s8(v46, v46, 4uLL), *(float32x2_t *)v44.i8);
  *(int8x8_t *)v49.f32 = vext_s8(v48, (int8x8_t)vmls_f32(vmul_f32((float32x2_t)*(_OWORD *)&vextq_s8(v46, v46, 8uLL), *(float32x2_t *)v44.i8), *(float32x2_t *)v46.i8, v47), 4uLL);
  v49.i64[1] = v48.u32[0];
  *(float32x2_t *)v44.i8 = vpadd_f32(vmul_f32(*(float32x2_t *)v49.f32, *(float32x2_t *)v49.f32), vmul_f32((float32x2_t)v48.u32[0], (float32x2_t)v48.u32[0]));
  v50 = vpadd_f32(*(float32x2_t *)v44.i8, *(float32x2_t *)v44.i8);
  v51 = (int32x2_t)vand_s8((int8x8_t)vcgtz_f32(v50), (int8x8_t)0x100000001);
  v52 = vrsqrte_f32(v50);
  v53 = 4;
  do
  {
    v52 = vmul_f32(v52, vrsqrts_f32(vmul_f32(v52, v52), v50));
    --v53;
  }
  while (v53);
  v54 = vdupq_lane_s32(v51, 0);
  __asm { FMOV            V17.2S, #1.0 }
  v60 = vmul_f32(v50, (float32x2_t)vbsl_s8((int8x8_t)vdup_lane_s32(vceqz_f32(v50), 0), _D17, (int8x8_t)v52));
  v61 = vrecpe_f32(v60);
  v62 = 4;
  do
  {
    v61 = vmul_f32(v61, vrecps_f32(v60, v61));
    --v62;
  }
  while (v62);
  v63 = (float32x2_t)vdup_laneq_s32(v43, 3);
  v64 = (int8x16_t)vmulq_n_f32(v49, v61.f32[0]);
  v64.i32[3] = 0;
  v65 = (float32x2_t)vdup_n_s32(0x7F7FFFFFu);
  v66 = (float32x4_t)vbslq_s8((int8x16_t)vcltzq_s32(vshlq_n_s32(v54, 0x1FuLL)), v64, v45);
  v67 = (float32x2_t)0x80000000800000;
  v68 = -1;
  v69 = -1;
  v70 = a4;
  do
  {
    v71 = *(unsigned int *)(v70 + 48);
    v72 = *(unsigned int *)(v70 + 52);
    if (v71 < v72)
    {
      v73 = (float32x4_t *)(a2 + 16 + (v71 << 6));
      do
      {
        if (!v8[v71])
        {
          v74 = vmulq_f32(v66, vsubq_f32(*v73, v23));
          v74.i64[0] = vpaddq_f32(v74, v74).u64[0];
          v75 = vpadd_f32(*(float32x2_t *)v74.f32, *(float32x2_t *)v74.f32);
          if ((vcgt_f32(v75, v67).u8[0] & 1) != 0)
          {
            v69 = v71;
            v76 = -1;
          }
          else
          {
            v76 = 0;
          }
          v67 = (float32x2_t)vbsl_s8((int8x8_t)vdup_n_s32(v76), (int8x8_t)v75, (int8x8_t)v67);
          v77 = vcgt_f32(v65, v75).u8[0];
          v78 = (v77 & 1) != 0 ? -1 : 0;
          v65 = (float32x2_t)vbsl_s8((int8x8_t)vdup_n_s32(v78), (int8x8_t)v75, (int8x8_t)v65);
          if ((v77 & 1) != 0)
            v68 = v71;
        }
        ++v71;
        v73 += 4;
      }
      while (v72 != v71);
    }
    v70 = *(_QWORD *)(v70 + 16);
  }
  while (v70);
  v79 = vmin_f32((float32x2_t)vdup_laneq_s32(v24, 3), v63);
  v8[v69] = 1;
  v80 = (__int128 *)(a2 + ((unint64_t)v69 << 6));
  v82 = v80[1];
  v81 = v80[2];
  v83 = *v80;
  *(_DWORD *)(a1 + 176) = *((_DWORD *)v80 + 12);
  *(_OWORD *)(a1 + 144) = v82;
  *(_OWORD *)(a1 + 160) = v81;
  *(_OWORD *)(a1 + 128) = v83;
  v84 = (float32x2_t)vdup_lane_s32(*(int32x2_t *)((char *)v80 + 40), 1);
  if (vmul_f32(v67, v65).f32[0] > 0.0)
  {
    v85 = (float32x2_t)0x80000000800000;
    v86 = a4;
    do
    {
      v87 = *(unsigned int *)(v86 + 48);
      v88 = *(unsigned int *)(v86 + 52);
      if (v87 < v88)
      {
        v89 = (float32x4_t *)(a2 + 16 + (v87 << 6));
        do
        {
          if (!v8[v87])
          {
            v90 = vmulq_f32(v66, vsubq_f32(*v89, v23));
            v90.i64[0] = vpaddq_f32(v90, v90).u64[0];
            v91 = vpadd_f32(*(float32x2_t *)v90.f32, *(float32x2_t *)v90.f32);
            v92 = vcgt_f32(v91, v85).u8[0];
            if ((v92 & 1) != 0)
              v93 = -1;
            else
              v93 = 0;
            v85 = (float32x2_t)vbsl_s8((int8x8_t)vdup_n_s32(v93), (int8x8_t)v91, (int8x8_t)v85);
            if ((v92 & 1) != 0)
              v68 = v87;
          }
          ++v87;
          v89 += 4;
        }
        while (v88 != v87);
      }
      v86 = *(_QWORD *)(v86 + 16);
    }
    while (v86);
  }
  v94 = vmin_f32(v79, v84);
  v8[v68] = 1;
  v95 = (__int128 *)(a2 + ((unint64_t)v68 << 6));
  v97 = v95[1];
  v96 = v95[2];
  v98 = *v95;
  *(_DWORD *)(a1 + 240) = *((_DWORD *)v95 + 12);
  *(_OWORD *)(a1 + 208) = v97;
  *(_OWORD *)(a1 + 224) = v96;
  *(_OWORD *)(a1 + 192) = v98;
  v115 = (int32x4_t)v95[2];
  v116 = 0;
  memset_pattern16(&__b, &unk_2261A7270, 0x10uLL);
  do
  {
    v99 = *(unsigned int *)(a4 + 48);
    v100 = *(unsigned int *)(a4 + 52);
    if (v99 < v100)
    {
      v101 = (int32x4_t *)(a2 + 32 + (v99 << 6));
      do
      {
        if (!v8[v99])
        {
          v102 = *v101;
          LODWORD(v103) = HIDWORD(*(unsigned __int128 *)v101);
          if (*(float *)&__b > v103)
          {
            v104 = 0;
            v118[0] = __b;
            HIDWORD(v116) = v116;
            p_b = (int32x2_t *)&__b;
LABEL_55:
            *p_b = vdup_laneq_s32(v102, 3);
            *(_DWORD *)((unint64_t)&v116 | (4 * v104)) = v99;
            goto LABEL_56;
          }
          if (*(float *)v118 > v103)
          {
            p_b = (int32x2_t *)v118;
            v104 = 1;
            goto LABEL_55;
          }
        }
LABEL_56:
        ++v99;
        v101 += 4;
      }
      while (v100 != v99);
    }
    a4 = *(_QWORD *)(a4 + 16);
  }
  while (a4);
  v106 = 0;
  v107 = vmin_f32(v94, (float32x2_t)vdup_laneq_s32(v115, 3));
  v108 = 1;
  do
  {
    v109 = v108;
    v110 = (__int128 *)(a2 + ((unint64_t)*((unsigned int *)&v116 + v106) << 6));
    v111 = a1 + ((v106 << 6) | 0x100);
    v113 = v110[1];
    v112 = v110[2];
    v114 = *v110;
    *(_DWORD *)(v111 + 48) = *((_DWORD *)v110 + 12);
    *(_OWORD *)(v111 + 16) = v113;
    *(_OWORD *)(v111 + 32) = v112;
    *(_OWORD *)v111 = v114;
    v107 = vmin_f32(v107, (float32x2_t)v118[v106 - 1]);
    v106 = 1;
    v108 = 0;
  }
  while ((v109 & 1) != 0);
}

float32x2_t physx::Gu::SinglePersistentContactManifold::reduceBatchContactsCapsule(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  size_t v7;
  char *v8;
  float32x2_t v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int32x2_t *v14;
  float32x2_t v15;
  unsigned __int8 v16;
  unsigned int v17;
  __int128 *v18;
  __int128 v19;
  int v20;
  __int128 v21;
  int32x4_t v22;
  uint64_t v23;
  float32x4_t v24;
  float32x4_t v25;
  float32x4_t v26;
  float32x2_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  float32x4_t *v31;
  float32x4_t v32;
  float32x4_t v33;
  float32x4_t v34;
  float32x2_t v35;
  unsigned __int8 v36;
  unsigned int v37;
  __int128 *v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  int32x4_t v42;
  float32x2_t v43;
  uint64_t v44;
  uint64_t v45;
  int32x2_t *v46;
  float32x2_t v47;
  unsigned __int8 v48;
  unsigned int v49;
  __int128 *v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  _QWORD v55[2];

  v55[1] = *MEMORY[0x24BDAC8D0];
  MEMORY[0x24BDAC7A8](a1);
  v8 = (char *)v55 - ((v7 + 15) & 0x1FFFFFFF0);
  bzero(v8, v7);
  v9 = (float32x2_t)vdup_n_s32(0x7F7FFFFFu);
  v10 = -1;
  v11 = a4;
  do
  {
    v12 = *(unsigned int *)(v11 + 48);
    v13 = *(unsigned int *)(v11 + 52);
    if (v12 < v13)
    {
      v14 = (int32x2_t *)(a2 + 32 + (v12 << 6));
      do
      {
        v15 = (float32x2_t)vdup_lane_s32(v14[1], 1);
        v16 = vcgt_f32(v9, v15).u8[0];
        if ((v16 & 1) != 0)
          v17 = -1;
        else
          v17 = 0;
        v9 = (float32x2_t)vbsl_s8((int8x8_t)vdup_n_s32(v17), (int8x8_t)v15, (int8x8_t)v9);
        if ((v16 & 1) != 0)
          v10 = v12;
        ++v12;
        v14 += 8;
      }
      while (v13 != v12);
    }
    v11 = *(_QWORD *)(v11 + 16);
  }
  while (v11);
  v8[v10] = 1;
  v18 = (__int128 *)(a2 + ((uint64_t)v10 << 6));
  v19 = *v18;
  v20 = *((_DWORD *)v18 + 12);
  v21 = v18[2];
  *(_OWORD *)(a1 + 16) = v18[1];
  *(_OWORD *)(a1 + 32) = v21;
  *(_DWORD *)(a1 + 48) = v20;
  *(_OWORD *)a1 = v19;
  v22 = (int32x4_t)v18[2];
  v23 = *(unsigned int *)(a4 + 48);
  v24 = *(float32x4_t *)(a1 + 16);
  v25 = vsubq_f32(*(float32x4_t *)(a2 + (v23 << 6) + 16), v24);
  v26 = vmulq_f32(v25, v25);
  v26.i64[0] = vpaddq_f32(v26, v26).u64[0];
  v27 = vpadd_f32(*(float32x2_t *)v26.f32, *(float32x2_t *)v26.f32);
  v28 = a4;
  do
  {
    v29 = *(unsigned int *)(v28 + 48);
    v30 = *(unsigned int *)(v28 + 52);
    if (v29 < v30)
    {
      v31 = (float32x4_t *)(a2 + 16 + (v29 << 6));
      do
      {
        v32 = *v31;
        v31 += 4;
        v33 = vsubq_f32(v32, v24);
        v34 = vmulq_f32(v33, v33);
        v34.i64[0] = vpaddq_f32(v34, v34).u64[0];
        v35 = vpadd_f32(*(float32x2_t *)v34.f32, *(float32x2_t *)v34.f32);
        v36 = vcgt_f32(v35, v27).u8[0];
        if ((v36 & 1) != 0)
          v37 = -1;
        else
          v37 = 0;
        v27 = (float32x2_t)vbsl_s8((int8x8_t)vdup_n_s32(v37), (int8x8_t)v35, (int8x8_t)v27);
        if ((v36 & 1) != 0)
          LODWORD(v23) = v29;
        ++v29;
      }
      while (v30 != v29);
    }
    v28 = *(_QWORD *)(v28 + 16);
  }
  while (v28);
  v8[(int)v23] = 1;
  v38 = (__int128 *)(a2 + ((uint64_t)(int)v23 << 6));
  v40 = v38[1];
  v39 = v38[2];
  v41 = *v38;
  *(_DWORD *)(a1 + 112) = *((_DWORD *)v38 + 12);
  *(_OWORD *)(a1 + 80) = v40;
  *(_OWORD *)(a1 + 96) = v39;
  *(_OWORD *)(a1 + 64) = v41;
  v42 = (int32x4_t)v38[2];
  v43 = (float32x2_t)vdup_n_s32(0x7F7FFFFFu);
  do
  {
    v44 = *(unsigned int *)(a4 + 48);
    v45 = *(unsigned int *)(a4 + 52);
    if (v44 < v45)
    {
      v46 = (int32x2_t *)(a2 + 32 + (v44 << 6));
      do
      {
        if (!v8[v44])
        {
          v47 = (float32x2_t)vdup_lane_s32(v46[1], 1);
          v48 = vcgt_f32(v43, v47).u8[0];
          if ((v48 & 1) != 0)
            v49 = -1;
          else
            v49 = 0;
          v43 = (float32x2_t)vbsl_s8((int8x8_t)vdup_n_s32(v49), (int8x8_t)v47, (int8x8_t)v43);
          if ((v48 & 1) != 0)
            LODWORD(v23) = v44;
        }
        ++v44;
        v46 += 8;
      }
      while (v45 != v44);
    }
    a4 = *(_QWORD *)(a4 + 16);
  }
  while (a4);
  v50 = (__int128 *)(a2 + ((uint64_t)(int)v23 << 6));
  v51 = *v50;
  v52 = v50[1];
  v53 = v50[2];
  *(_DWORD *)(a1 + 176) = *((_DWORD *)v50 + 12);
  *(_OWORD *)(a1 + 144) = v52;
  *(_OWORD *)(a1 + 160) = v53;
  *(_OWORD *)(a1 + 128) = v51;
  return vmin_f32(vmin_f32(vmin_f32((float32x2_t)vdup_laneq_s32(v22, 3), (float32x2_t)vdup_n_s32(0x7F7FFFFFu)), (float32x2_t)vdup_laneq_s32(v42, 3)), (float32x2_t)vdup_lane_s32(*(int32x2_t *)((char *)v50 + 40), 1));
}

uint64_t physx::Gu::SinglePersistentContactManifold::reduceContacts(uint64_t a1, unsigned int a2)
{
  size_t v4;
  _BYTE *v5;
  int32x4_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  float32x2_t v10;
  int32x2_t *v11;
  uint64_t v12;
  float32x2_t v13;
  unsigned __int8 v14;
  unsigned int v15;
  uint64_t v16;
  uint64_t v17;
  float32x4_t v18;
  uint64_t v19;
  uint64_t v20;
  float32x4_t v21;
  float32x4_t v22;
  float32x2_t v23;
  float32x4_t v24;
  uint64_t i;
  float32x4_t v26;
  float32x4_t v27;
  float32x2_t v28;
  unsigned __int8 v29;
  unsigned int v30;
  uint64_t v31;
  __int128 *v32;
  float32x4_t v33;
  int8x16_t v34;
  int8x16_t v35;
  float32x2_t v36;
  int8x8_t v37;
  float32x4_t v38;
  float32x2_t v39;
  float32x2_t v40;
  int32x2_t v41;
  float32x2_t v42;
  int v43;
  float32x2_t v49;
  float32x2_t v50;
  int v51;
  int8x16_t v52;
  float32x4_t v53;
  uint64_t v54;
  float32x2_t v55;
  float32x2_t v56;
  int v57;
  unsigned __int8 v58;
  unsigned __int8 v59;
  float32x4_t v60;
  float32x2_t v61;
  unsigned __int8 v62;
  unsigned int v63;
  int8x8_t v64;
  unsigned __int8 v65;
  unsigned int v66;
  uint64_t v67;
  unsigned __int32 v68;
  __int128 *v69;
  __int128 v70;
  uint64_t v71;
  int v72;
  uint64_t v73;
  float32x2_t v74;
  float32x4_t v75;
  float32x2_t v76;
  unsigned __int8 v77;
  unsigned int v78;
  __int128 *v79;
  __int128 v80;
  uint64_t v81;
  float32x2_t v82;
  unsigned __int8 v83;
  unsigned __int8 v84;
  unsigned int v85;
  float32x2_t v86;
  unsigned int v87;
  uint64_t v88;
  unint64_t v89;
  __int128 *v90;
  __int128 v91;
  uint64_t v92;
  __int128 v93;
  _OWORD v95[2];
  int8x16_t v96;
  _DWORD v97[4];
  __int128 v98;
  float32x4_t v99;
  __int128 v100;
  int v101;
  __int128 v102;
  __int128 v103;
  __int128 v104;
  int v105;
  __int128 v106;
  __int128 v107;
  __int128 v108;
  int v109;
  __int128 v110;
  __int128 v111;
  __int128 v112;
  int v113;
  uint64_t v114;

  v114 = *MEMORY[0x24BDAC8D0];
  v4 = a2;
  MEMORY[0x24BDAC7A8](a1);
  v5 = (char *)v95 - ((v4 + 15) & 0x1FFFFFFF0);
  bzero(v5, v4);
  v6 = *(int32x4_t *)(a1 + 32);
  *v5 = 0;
  v7 = a2 - 2;
  if (a2 < 2)
  {
    v9 = 0;
    v8 = 0;
  }
  else
  {
    LODWORD(v8) = 0;
    LOBYTE(v9) = 0;
    v10 = (float32x2_t)vdup_laneq_s32(v6, 3);
    v11 = (int32x2_t *)(a1 + 96);
    v12 = 1;
    do
    {
      v5[v12] = v12;
      v13 = (float32x2_t)vdup_lane_s32(v11[1], 1);
      v14 = vcgt_f32(v10, v13).u8[0];
      if ((v14 & 1) != 0)
        v15 = -1;
      else
        v15 = 0;
      v10 = (float32x2_t)vbsl_s8((int8x8_t)vdup_n_s32(v15), (int8x8_t)v13, (int8x8_t)v10);
      if ((v14 & 1) != 0)
      {
        LOBYTE(v9) = v12;
        v8 = v12;
      }
      else
      {
        v8 = v8;
      }
      ++v12;
      v11 += 8;
    }
    while (v4 != v12);
    v9 = v9;
  }
  v16 = a2 - 1;
  v5[v8] = v5[v16];
  v17 = a1 + (v9 << 6);
  v18 = *(float32x4_t *)(v17 + 16);
  v95[0] = *(_OWORD *)v17;
  v95[1] = v18;
  v96 = *(int8x16_t *)(v17 + 32);
  v97[0] = *(_DWORD *)(v17 + 48);
  v19 = *v5;
  if (v16 < 2)
  {
    LODWORD(v20) = 0;
  }
  else
  {
    LODWORD(v20) = 0;
    v21 = vsubq_f32(*(float32x4_t *)(a1 + (v19 << 6) + 16), v18);
    v22 = vmulq_f32(v21, v21);
    v22.i64[0] = vpaddq_f32(v22, v22).u64[0];
    v23 = vpadd_f32(*(float32x2_t *)v22.f32, *(float32x2_t *)v22.f32);
    v24 = *(float32x4_t *)(v17 + 16);
    for (i = 1; i != v16; ++i)
    {
      v26 = vsubq_f32(*(float32x4_t *)(a1 + ((unint64_t)v5[i] << 6) + 16), v24);
      v27 = vmulq_f32(v26, v26);
      v27.i64[0] = vpaddq_f32(v27, v27).u64[0];
      v28 = vpadd_f32(*(float32x2_t *)v27.f32, *(float32x2_t *)v27.f32);
      v29 = vcgt_f32(v28, v23).u8[0];
      if ((v29 & 1) != 0)
        v30 = -1;
      else
        v30 = 0;
      v23 = (float32x2_t)vbsl_s8((int8x8_t)vdup_n_s32(v30), (int8x8_t)v28, (int8x8_t)v23);
      if ((v29 & 1) != 0)
      {
        LOBYTE(v19) = v5[i];
        LODWORD(v20) = i;
      }
    }
  }
  v31 = v20;
  v5[v20] = v5[v7];
  v32 = (__int128 *)(a1 + ((unint64_t)v19 << 6));
  v33 = (float32x4_t)v32[1];
  v98 = *v32;
  v99 = v33;
  v100 = v32[2];
  v101 = *((_DWORD *)v32 + 12);
  v34 = v96;
  v34.i32[3] = 0;
  v35 = (int8x16_t)vsubq_f32(v99, v18);
  v36 = (float32x2_t)vextq_s8(v34, v34, 8uLL).u64[0];
  v37 = (int8x8_t)vmls_f32(vmul_f32(*(float32x2_t *)v35.i8, (float32x2_t)vext_s8(*(int8x8_t *)v96.i8, (int8x8_t)v36, 4uLL)), (float32x2_t)*(_OWORD *)&vextq_s8(v35, v35, 4uLL), *(float32x2_t *)v96.i8);
  *(int8x8_t *)v38.f32 = vext_s8(v37, (int8x8_t)vmls_f32(vmul_f32((float32x2_t)*(_OWORD *)&vextq_s8(v35, v35, 8uLL), *(float32x2_t *)v96.i8), *(float32x2_t *)v35.i8, v36), 4uLL);
  v38.i64[1] = v37.u32[0];
  v39 = vpadd_f32(vmul_f32(*(float32x2_t *)v38.f32, *(float32x2_t *)v38.f32), vmul_f32((float32x2_t)v37.u32[0], (float32x2_t)v37.u32[0]));
  v40 = vpadd_f32(v39, v39);
  v41 = (int32x2_t)vand_s8((int8x8_t)vcgtz_f32(v40), (int8x8_t)0x100000001);
  v42 = vrsqrte_f32(v40);
  v43 = 4;
  do
  {
    v42 = vmul_f32(v42, vrsqrts_f32(vmul_f32(v42, v42), v40));
    --v43;
  }
  while (v43);
  __asm { FMOV            V7.2S, #1.0 }
  v49 = vmul_f32(v40, (float32x2_t)vbsl_s8((int8x8_t)vdup_lane_s32(vceqz_f32(v40), 0), _D7, (int8x8_t)v42));
  v50 = vrecpe_f32(v49);
  v51 = 4;
  do
  {
    v50 = vmul_f32(v50, vrecps_f32(v49, v50));
    --v51;
  }
  while (v51);
  v52 = (int8x16_t)vmulq_n_f32(v38, v50.f32[0]);
  v52.i32[3] = 0;
  v53 = (float32x4_t)vbslq_s8((int8x16_t)vcltzq_s32(vshlq_n_s32(vdupq_lane_s32(v41, 0), 0x1FuLL)), v52, v34);
  if (a2 == 2)
  {
    v68 = 127;
    v58 = -1;
    v67 = 255;
    v57 = -1;
  }
  else
  {
    v54 = 0;
    v55 = (float32x2_t)vdup_n_s32(0x7F7FFFFFu);
    v56 = (float32x2_t)0x80000000800000;
    v57 = -1;
    v58 = -1;
    v59 = -1;
    do
    {
      v60 = vmulq_f32(v53, vsubq_f32(*(float32x4_t *)(a1 + ((unint64_t)v5[v54] << 6) + 16), v18));
      v60.i64[0] = vpaddq_f32(v60, v60).u64[0];
      v61 = vpadd_f32(*(float32x2_t *)v60.f32, *(float32x2_t *)v60.f32);
      v62 = vcgt_f32(v61, v56).u8[0];
      if ((v62 & 1) != 0)
      {
        v59 = v5[v54];
        v20 = v54;
      }
      else
      {
        v20 = v20;
      }
      if ((v62 & 1) != 0)
        v63 = -1;
      else
        v63 = 0;
      v64 = (int8x8_t)vdup_n_s32(v63);
      v65 = vcgt_f32(v55, v61).u8[0];
      if ((v65 & 1) != 0)
        v66 = -1;
      else
        v66 = 0;
      v56 = (float32x2_t)vbsl_s8(v64, (int8x8_t)v61, (int8x8_t)v56);
      v55 = (float32x2_t)vbsl_s8((int8x8_t)vdup_n_s32(v66), (int8x8_t)v61, (int8x8_t)v55);
      if ((v65 & 1) != 0)
      {
        v58 = v5[v54];
        v57 = v54;
      }
      ++v54;
    }
    while (v7 != v54);
    v67 = v59;
    v68 = vmul_f32(v56, v55).u32[0];
    v31 = v20;
  }
  v69 = (__int128 *)(a1 + (v67 << 6));
  v70 = v69[1];
  v102 = *v69;
  v103 = v70;
  v104 = v69[2];
  v105 = *((_DWORD *)v69 + 12);
  v71 = a2 - 3;
  v5[v31] = v5[v71];
  if ((_DWORD)v71 == v57)
    v72 = v20;
  else
    v72 = v57;
  if (a2 != 3 && *(float *)&v68 > 0.0)
  {
    v73 = 0;
    v74 = (float32x2_t)0x80000000800000;
    do
    {
      v75 = vmulq_f32(v53, vsubq_f32(*(float32x4_t *)(a1 + ((unint64_t)v5[v73] << 6) + 16), v18));
      v75.i64[0] = vpaddq_f32(v75, v75).u64[0];
      v76 = vpadd_f32(*(float32x2_t *)v75.f32, *(float32x2_t *)v75.f32);
      v77 = vcgt_f32(v76, v74).u8[0];
      if ((v77 & 1) != 0)
        v78 = -1;
      else
        v78 = 0;
      v74 = (float32x2_t)vbsl_s8((int8x8_t)vdup_n_s32(v78), (int8x8_t)v76, (int8x8_t)v74);
      if ((v77 & 1) != 0)
      {
        v58 = v5[v73];
        v72 = v73;
      }
      ++v73;
    }
    while (v71 != v73);
  }
  v79 = (__int128 *)(a1 + ((unint64_t)v58 << 6));
  v80 = v79[1];
  v106 = *v79;
  v107 = v80;
  v108 = v79[2];
  v109 = *((_DWORD *)v79 + 12);
  v81 = a2 - 4;
  v5[v72] = v5[v81];
  if (a2 == 4)
  {
    v88 = 255;
  }
  else
  {
    v82 = (float32x2_t)vdup_n_s32(0x7F7FFFFFu);
    v83 = -1;
    do
    {
      v85 = *v5++;
      v84 = v85;
      v86 = (float32x2_t)vdup_lane_s32(*(int32x2_t *)(a1 + ((unint64_t)v85 << 6) + 40), 1);
      if ((vcgt_f32(v82, v86).u8[0] & 1) != 0)
      {
        v83 = v84;
        v87 = -1;
      }
      else
      {
        v87 = 0;
      }
      v82 = (float32x2_t)vbsl_s8((int8x8_t)vdup_n_s32(v87), (int8x8_t)v86, (int8x8_t)v82);
      --v81;
    }
    while (v81);
    v88 = v83;
  }
  v89 = 0;
  v90 = (__int128 *)(a1 + (v88 << 6));
  v91 = v90[1];
  v110 = *v90;
  v111 = v91;
  v112 = v90[2];
  v113 = *((_DWORD *)v90 + 12);
  do
  {
    v92 = a1 + v89 * 4;
    v93 = v95[v89 / 4 + 1];
    *(_OWORD *)v92 = v95[v89 / 4];
    *(_OWORD *)(v92 + 16) = v93;
    *(_OWORD *)(v92 + 32) = v95[v89 / 4 + 2];
    *(_DWORD *)(v92 + 48) = v97[v89];
    v89 += 16;
  }
  while (v89 != 80);
  return 5;
}

float32x2_t physx::Gu::SinglePersistentContactManifold::refreshContactPoints(uint64_t a1, float32x4_t *a2, float32x2_t *a3)
{
  int v3;
  float32x2_t v4;
  unsigned int v5;
  float32x2_t result;
  uint64_t v7;
  float32x4_t *v8;
  float32x4_t v9;
  float32x4_t v10;
  float32x4_t v11;
  float32x4_t v12;
  float32x4_t v13;
  float32x4_t v14;
  float32x4_t v15;
  float32x4_t v16;
  float32x2_t v17;
  float32x4_t v18;
  float32x4_t v19;
  float32x4_t v20;
  uint64_t v21;
  float32x4_t *v22;
  float32x4_t v23;
  float32x4_t v24;
  float32x4_t v25;

  v3 = *(_DWORD *)(a1 + 384);
  if (v3)
  {
    v4 = vmul_f32(*a3, *a3);
    v5 = v3 - 1;
    result = 0;
    do
    {
      v7 = v5;
      v8 = (float32x4_t *)(a1 + ((unint64_t)v5 << 6));
      v9 = v8[1];
      v10 = vmulq_n_f32(*a2, COERCE_FLOAT(*v8));
      v10.i32[3] = 0;
      v11 = vmulq_lane_f32(a2[1], *(float32x2_t *)v8->f32, 1);
      v11.i32[3] = 0;
      v12 = vmulq_laneq_f32(a2[2], *v8, 2);
      v12.i32[3] = 0;
      v13 = vaddq_f32(a2[3], vaddq_f32(vaddq_f32(v10, v11), v12));
      v14 = v8[2];
      v15 = v14;
      v15.i32[3] = 0;
      v16 = vmulq_f32(v15, vsubq_f32(v13, v9));
      v16.i64[0] = vpaddq_f32(v16, v16).u64[0];
      v17 = vpadd_f32(*(float32x2_t *)v16.f32, *(float32x2_t *)v16.f32);
      v18 = vmlsq_lane_f32(v13, v15, v17, 0);
      v18.i64[1] = vextq_s8((int8x16_t)v18, (int8x16_t)v18, 8uLL).u32[0];
      v19 = vsubq_f32(v9, v18);
      v20 = vmulq_f32(v19, v19);
      v20.i64[0] = vpaddq_f32(v20, v20).u64[0];
      if (vuzp1_s8((int8x8_t)vdup_lane_s16((int16x4_t)vcgt_f32(vpadd_f32(*(float32x2_t *)v20.f32, *(float32x2_t *)v20.f32), v4), 0), (int8x8_t)result).u32[0] == -1)
      {
        v21 = (*(_DWORD *)(a1 + 384) - 1);
        *(_DWORD *)(a1 + 384) = v21;
        v22 = (float32x4_t *)(a1 + (v21 << 6));
        v23 = *v22;
        v24 = v22[1];
        v25 = v22[2];
        v8[3].i32[0] = v22[3].i32[0];
        v8[1] = v24;
        v8[2] = v25;
        *v8 = v23;
      }
      else
      {
        v14.i32[3] = v17.i32[1];
        v8[2] = v14;
        result = vmin_f32(result, v17);
      }
      --v5;
    }
    while (v7);
  }
  else
  {
    return 0;
  }
  return result;
}

void physx::Gu::MultiplePersistentContactManifold::addManifoldContactPoints(uint64_t a1, uint64_t a2, unsigned int a3, uint64_t *a4, unsigned int a5, uint64_t a6, _QWORD *a7, int a8)
{
  int v8;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unsigned __int8 *v23;
  float32x4_t *v24;
  float32x4_t v25;
  uint64_t v26;
  uint64_t v27;
  float32x4_t *v28;
  float32x4_t v29;
  uint64_t v30;
  float32x4_t *v31;
  float32x4_t v32;
  float32x2_t v33;
  float32x2_t v34;
  int v35;
  float32x2_t v36;
  float32x2_t v37;
  int v38;
  float32x4_t v39;
  float32x4_t v40;
  uint64_t v41;
  int v42;
  unint64_t v43;
  __int128 *v44;
  unint64_t v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  unint64_t v49;
  const float *v50;
  float32x2_t v51;
  int v52;
  unsigned __int8 v53;
  uint64_t v54;
  uint64_t v55;
  int v56;
  uint64_t v57;
  unsigned int v58;
  uint64_t v59;
  float v60;
  uint64_t v61;
  unsigned int v62;
  unsigned __int8 *v63;
  unsigned int v64;
  uint64_t v65;
  int v66;
  uint64_t v67;
  uint64_t v70;
  float32x4_t v72;
  uint64_t v73;
  uint64_t v74;
  _OWORD *v75;
  int32x2_t v76;
  unsigned int v77;
  int v78;

  v8 = a8;
  if (*(_BYTE *)(a1 + 62))
  {
    v73 = 0;
    v74 = 0;
    v75 = &v72;
    v76 = vdup_n_s32(0x7F7FFFFFu);
    if (!a5)
      return;
    v12 = a7;
    v13 = 0;
    v67 = a1 + 64;
    __asm { FMOV            V8.2S, #1.0 }
    v19 = a5;
    v70 = a5;
    while (1)
    {
      v20 = a4[v13];
      if (*(_QWORD *)(v20 + 32) == v20)
      {
        v21 = *(unsigned __int8 *)(a1 + 62);
        if (*(_BYTE *)(a1 + 62))
        {
          v22 = 0;
          do
          {
            v23 = (unsigned __int8 *)(a1 + v22 + 56);
            v24 = (float32x4_t *)(a1 + 400 * *v23);
            v25 = v24[6];
            v26 = v24[28].u32[0];
            if (v26 >= 2)
            {
              v27 = v26 - 1;
              v28 = (float32x4_t *)(a1 + 160 + 400 * *(unsigned __int8 *)(a1 + v22 + 56));
              do
              {
                v29 = *v28;
                v28 += 4;
                v25 = vaddq_f32(v25, v29);
                --v27;
              }
              while (v27);
            }
            v30 = (uint64_t)&v24[4];
            v25.i32[3] = 0;
            v31 = v24 + 28;
            v32 = vmulq_f32(v25, v25);
            v32.i64[0] = vpaddq_f32(v32, v32).u64[0];
            v33 = vpadd_f32(*(float32x2_t *)v32.f32, *(float32x2_t *)v32.f32);
            v34 = vrsqrte_f32(v33);
            v35 = 4;
            do
            {
              v34 = vmul_f32(v34, vrsqrts_f32(vmul_f32(v34, v34), v33));
              --v35;
            }
            while (v35);
            v36 = vmul_f32(v33, (float32x2_t)vbsl_s8((int8x8_t)vdup_lane_s32(vceqz_f32(v33), 0), _D8, (int8x8_t)v34));
            v37 = vrecpe_f32(v36);
            v38 = 4;
            do
            {
              v37 = vmul_f32(v37, vrecps_f32(v36, v37));
              --v38;
            }
            while (v38);
            v39 = vmulq_n_f32(v25, v37.f32[0]);
            v39.i32[3] = 0;
            v40 = vmulq_f32(*(float32x4_t *)v20, v39);
            v40.i64[0] = vpaddq_f32(v40, v40).u64[0];
            if (vpadd_f32(*(float32x2_t *)v40.f32, *(float32x2_t *)v40.f32).f32[0] >= COERCE_FLOAT(*v12))
            {
              if ((_DWORD)v26)
              {
                v43 = 0;
                v44 = (__int128 *)(v67 + 400 * *(unsigned __int8 *)(a1 + v22 + 56));
                do
                {
                  v45 = a2 + ((unint64_t)(a3 + v43) << 6);
                  v46 = *v44;
                  v47 = v44[1];
                  v48 = v44[2];
                  *(_DWORD *)(v45 + 48) = *((_DWORD *)v44 + 12);
                  *(_OWORD *)(v45 + 16) = v47;
                  *(_OWORD *)(v45 + 32) = v48;
                  *(_OWORD *)v45 = v46;
                  ++v43;
                  v49 = v31->u32[0];
                  v44 += 4;
                }
                while (v43 < v49);
              }
              else
              {
                LODWORD(v49) = 0;
              }
              v77 = a3;
              v78 = v49 + a3;
              v72 = v39;
              v75 = (_OWORD *)v20;
              v73 = 0;
              *(_QWORD *)(*(_QWORD *)(v20 + 24) + 16) = &v72;
              *(_DWORD *)(v20 + 56) += v49;
              v50 = (const float *)(a1 + 32 + 4 * *v23);
              v51 = vld1_dup_f32(v50);
              *(float32x2_t *)(v20 + 40) = vmin_f32(*(float32x2_t *)(v20 + 40), v51);
              v8 = a8;
              addBatchManifoldContactsToSingleManifold(v30, a2, v31->i32[0] + a3, v20, a8);
              *(_DWORD *)(a1 + 32 + 4 * *v23) = v52;
              v12 = a7;
              v19 = v70;
              goto LABEL_26;
            }
            ++v22;
          }
          while (v22 != v21);
          if (v21 < 6)
            goto LABEL_19;
          v57 = 0;
          v58 = 0;
          v59 = v21 - 1;
          do
          {
            v60 = *(float *)(a1 + 32 + 4 * *(unsigned __int8 *)(a1 + 57 + v57++));
            if (v60 > *(float *)(a1 + 32 + 4 * *(unsigned __int8 *)(a1 + v58 + 56)))
              v58 = v57;
          }
          while (v59 != v57);
          v61 = a1 + v58;
          v64 = *(unsigned __int8 *)(v61 + 56);
          v63 = (unsigned __int8 *)(v61 + 56);
          v62 = v64;
          if (*(float *)(a1 + 4 * v64 + 32) > COERCE_FLOAT(*(_QWORD *)(v20 + 40)))
          {
            v65 = a1 + 400 * v62;
            *(_DWORD *)(v65 + 448) = 0;
            addBatchManifoldContactsToSingleManifold(v65 + 64, a2, a3, v20, v8);
            *(_DWORD *)(a1 + 4 * *v63 + 32) = v66;
          }
          return;
        }
        v21 = 0;
LABEL_19:
        addBatchManifoldContactsToSingleManifold(a1 + 400 * *(unsigned __int8 *)(a1 + 56 + v21) + 64, a2, a3, v20, v8);
        v19 = v70;
        v41 = *(unsigned __int8 *)(a1 + 62);
        *(_DWORD *)(a1 + 4 * *(unsigned __int8 *)(a1 + 56 + v41) + 32) = v42;
        *(_BYTE *)(a1 + 62) = v41 + 1;
      }
LABEL_26:
      if (++v13 == v19)
        return;
    }
  }
  if (!a5)
    return;
  v53 = 0;
  v54 = a5;
  do
  {
    if (*(_QWORD *)(*a4 + 32) == *a4)
    {
      if (v53 > 5u)
        return;
      addBatchManifoldContactsToSingleManifold(a1 + 400 * *(unsigned __int8 *)(a1 + 56 + v53) + 64, a2, a3, *a4, v8);
      v55 = *(unsigned __int8 *)(a1 + 62);
      *(_DWORD *)(a1 + 4 * *(unsigned __int8 *)(a1 + 56 + v55) + 32) = v56;
      v53 = v55 + 1;
      *(_BYTE *)(a1 + 62) = v53;
    }
    ++a4;
    --v54;
  }
  while (v54);
}

void addBatchManifoldContactsToSingleManifold(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5)
{
  float32x2_t v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  int32x2_t *v10;
  float32x2_t v11;
  unsigned __int8 v12;
  unsigned int v13;
  uint64_t v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  int v18;
  unsigned int v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unsigned int v23;
  unint64_t v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  uint64_t v28;
  unint64_t v29;
  unint64_t v30;
  unsigned int v31;
  unint64_t v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;

  if (a5 == 3)
  {
    if (*(_DWORD *)(a4 + 56) <= 3u)
    {
      v19 = 0;
      v20 = a4;
      do
      {
        v21 = *(unsigned int *)(v20 + 48);
        if (v21 < *(_DWORD *)(v20 + 52))
        {
          v22 = a2 + (v21 << 6);
          v23 = v19;
          do
          {
            v19 = v23 + 1;
            v24 = a1 + ((unint64_t)v23 << 6);
            v25 = *(_OWORD *)v22;
            v26 = *(_OWORD *)(v22 + 16);
            v27 = *(_OWORD *)(v22 + 32);
            *(_DWORD *)(v24 + 48) = *(_DWORD *)(v22 + 48);
            *(_OWORD *)(v24 + 16) = v26;
            *(_OWORD *)(v24 + 32) = v27;
            *(_OWORD *)v24 = v25;
            ++v21;
            v22 += 64;
            v23 = v19;
          }
          while (v21 < *(unsigned int *)(v20 + 52));
        }
        v20 = *(_QWORD *)(v20 + 16);
      }
      while (v20);
      goto LABEL_27;
    }
    physx::Gu::SinglePersistentContactManifold::reduceBatchContactsCapsule(a1, a2, a3, a4);
    v18 = 3;
  }
  else
  {
    if (a5 == 1)
    {
      v6 = (float32x2_t)vdup_n_s32(0x7F7FFFFFu);
      v7 = -1;
      do
      {
        v8 = *(unsigned int *)(a4 + 48);
        v9 = *(unsigned int *)(a4 + 52);
        if (v8 < v9)
        {
          v10 = (int32x2_t *)(a2 + 32 + (v8 << 6));
          do
          {
            v11 = (float32x2_t)vdup_lane_s32(v10[1], 1);
            v12 = vcgt_f32(v6, v11).u8[0];
            if ((v12 & 1) != 0)
              v13 = -1;
            else
              v13 = 0;
            v6 = (float32x2_t)vbsl_s8((int8x8_t)vdup_n_s32(v13), (int8x8_t)v11, (int8x8_t)v6);
            if ((v12 & 1) != 0)
              v7 = v8;
            ++v8;
            v10 += 8;
          }
          while (v9 != v8);
        }
        a4 = *(_QWORD *)(a4 + 16);
      }
      while (a4);
      v14 = a2 + ((uint64_t)v7 << 6);
      v15 = *(_OWORD *)v14;
      v16 = *(_OWORD *)(v14 + 16);
      v17 = *(_OWORD *)(v14 + 32);
      *(_DWORD *)(a1 + 48) = *(_DWORD *)(v14 + 48);
      *(_OWORD *)(a1 + 16) = v16;
      *(_OWORD *)(a1 + 32) = v17;
      *(_OWORD *)a1 = v15;
      v18 = 1;
      goto LABEL_30;
    }
    if (*(_DWORD *)(a4 + 56) <= 6u)
    {
      v19 = 0;
      v28 = a4;
      do
      {
        v29 = *(unsigned int *)(v28 + 48);
        if (v29 < *(_DWORD *)(v28 + 52))
        {
          v30 = a2 + (v29 << 6);
          v31 = v19;
          do
          {
            v19 = v31 + 1;
            v32 = a1 + ((unint64_t)v31 << 6);
            v33 = *(_OWORD *)v30;
            v34 = *(_OWORD *)(v30 + 16);
            v35 = *(_OWORD *)(v30 + 32);
            *(_DWORD *)(v32 + 48) = *(_DWORD *)(v30 + 48);
            *(_OWORD *)(v32 + 16) = v34;
            *(_OWORD *)(v32 + 32) = v35;
            *(_OWORD *)v32 = v33;
            ++v29;
            v30 += 64;
            v31 = v19;
          }
          while (v29 < *(unsigned int *)(v28 + 52));
        }
        v28 = *(_QWORD *)(v28 + 16);
      }
      while (v28);
LABEL_27:
      *(_DWORD *)(a1 + 384) = v19;
      return;
    }
    physx::Gu::SinglePersistentContactManifold::reduceBatchContactsConvex(a1, a2, a3, a4);
    v18 = 6;
  }
LABEL_30:
  *(_DWORD *)(a1 + 384) = v18;
}

BOOL physx::Gu::MultiplePersistentContactManifold::addManifoldContactsToContactBuffer(uint64_t a1, uint64_t a2, float32x4_t *a3)
{
  unsigned int v3;
  unint64_t v4;
  unint64_t v5;
  float32x4_t v11;
  unsigned int v12;
  float32x4_t *v13;
  unint64_t v14;
  float32x4_t v15;
  unint64_t v16;
  float32x4_t *v17;
  float32x4_t v18;
  float32x4_t v19;
  float32x4_t v20;
  float32x2_t v21;
  float32x4_t v22;
  float32x2_t v23;
  float32x2_t v24;
  int8x8_t v25;
  float32x4_t v26;
  float32x4_t v27;
  float32x4_t v28;
  float32x4_t v29;
  float32x4_t v30;
  float32x4_t v31;
  float32x2_t v32;
  float32x2_t v33;
  int v34;
  float32x2_t v35;
  float32x2_t v36;
  int v37;
  uint64_t v38;
  uint64_t v39;
  float32x4_t v40;
  uint64_t v41;
  float32x4_t v42;
  float32x4_t v43;
  float32x2_t v44;
  float32x4_t v45;
  float32x2_t v46;
  float32x2_t v47;
  int8x8_t v48;
  float32x4_t v49;
  float32x4_t v50;
  float32x4_t v51;
  float32x4_t v52;
  int8x16_t v53;
  uint64_t v54;
  int v55;
  unint64_t v56;

  *(_BYTE *)(a1 + 63) = 0;
  v3 = *(unsigned __int8 *)(a1 + 62);
  if (*(_BYTE *)(a1 + 62))
  {
    v4 = 0;
    v5 = 0;
    __asm { FMOV            V0.2S, #1.0 }
    v11.i64[0] = 0x4000000040000000;
    v11.i64[1] = 0x4000000040000000;
    do
    {
      v12 = *(unsigned __int8 *)(a1 + v4 + 56);
      v13 = (float32x4_t *)(a1 + 400 * *(unsigned __int8 *)(a1 + v4 + 56));
      v14 = v13[28].u32[0];
      *(_BYTE *)(a1 + 63) += v14;
      v15 = v13[6];
      if (v14 >= 2)
      {
        v16 = v14 - 1;
        v17 = (float32x4_t *)(a1 + 160 + 400 * v12);
        do
        {
          v18 = *v17;
          v17 += 4;
          v15 = vaddq_f32(v15, v18);
          --v16;
        }
        while (v16);
      }
      v19 = v15;
      v19.i32[3] = 0;
      v20 = *a3;
      v20.i32[3] = 0;
      v21 = (float32x2_t)vdupq_laneq_s32(*(int32x4_t *)a3, 3).u64[0];
      v22 = vmulq_n_f32(v19, vmla_f32((float32x2_t)0xBF000000BF000000, v21, v21).f32[0]);
      v22.i32[3] = 0;
      v23 = (float32x2_t)vextq_s8((int8x16_t)v20, (int8x16_t)v20, 8uLL).u64[0];
      v24 = (float32x2_t)vextq_s8((int8x16_t)v19, (int8x16_t)v19, 8uLL).u64[0];
      v25 = (int8x8_t)vmls_f32(vmul_f32(*(float32x2_t *)a3->f32, (float32x2_t)vext_s8(*(int8x8_t *)v15.f32, (int8x8_t)v24, 4uLL)), (float32x2_t)vext_s8(*(int8x8_t *)a3->f32, (int8x8_t)v23, 4uLL), *(float32x2_t *)v15.f32);
      *(int8x8_t *)v26.f32 = vext_s8(v25, (int8x8_t)vmls_f32(vmul_f32(*(float32x2_t *)v15.f32, v23), *(float32x2_t *)a3->f32, v24), 4uLL);
      v26.i64[1] = v25.u32[0];
      v27 = vmlaq_laneq_f32(v22, v26, *a3, 3);
      v27.i64[1] = vextq_s8((int8x16_t)v27, (int8x16_t)v27, 8uLL).u32[0];
      v28 = vmulq_f32(v19, v20);
      v28.i64[0] = vpaddq_f32(v28, v28).u64[0];
      v29 = vmlaq_n_f32(v27, v20, vpadd_f32(*(float32x2_t *)v28.f32, *(float32x2_t *)v28.f32).f32[0]);
      v30 = vaddq_f32(v29, v29);
      v30.i32[3] = 0;
      v31 = vmulq_f32(v30, v30);
      v31.i64[0] = vpaddq_f32(v31, v31).u64[0];
      v32 = vpadd_f32(*(float32x2_t *)v31.f32, *(float32x2_t *)v31.f32);
      v33 = vrsqrte_f32(v32);
      v34 = 4;
      do
      {
        v33 = vmul_f32(v33, vrsqrts_f32(vmul_f32(v33, v33), v32));
        --v34;
      }
      while (v34);
      v35 = vmul_f32(v32, (float32x2_t)vbsl_s8((int8x8_t)vdup_lane_s32(vceqz_f32(v32), 0), _D0, (int8x8_t)v33));
      v36 = vrecpe_f32(v35);
      v37 = 4;
      do
      {
        v36 = vmul_f32(v36, vrecps_f32(v35, v36));
        --v37;
      }
      while (v37);
      if (v5 <= 0x3F && (_DWORD)v14)
      {
        v38 = 0;
        v39 = 0;
        v40 = vmulq_n_f32(v30, v36.f32[0]);
        v40.i32[3] = 0;
        v41 = a1 + 400 * v12;
        do
        {
          v42 = *(float32x4_t *)(v41 + v38 + 80);
          v43 = *a3;
          v43.i32[3] = 0;
          v44 = (float32x2_t)vdupq_laneq_s32(*(int32x4_t *)a3, 3).u64[0];
          v45 = vmulq_n_f32(v42, vmla_f32((float32x2_t)0xBF000000BF000000, v44, v44).f32[0]);
          v45.i32[3] = 0;
          v46 = (float32x2_t)vextq_s8((int8x16_t)v43, (int8x16_t)v43, 8uLL).u64[0];
          v47 = (float32x2_t)vextq_s8((int8x16_t)v42, (int8x16_t)v42, 8uLL).u64[0];
          v48 = (int8x8_t)vmls_f32(vmul_f32(*(float32x2_t *)a3->f32, (float32x2_t)vext_s8(*(int8x8_t *)v42.f32, (int8x8_t)v47, 4uLL)), (float32x2_t)vext_s8(*(int8x8_t *)a3->f32, (int8x8_t)v46, 4uLL), *(float32x2_t *)v42.f32);
          *(int8x8_t *)v49.f32 = vext_s8(v48, (int8x8_t)vmls_f32(vmul_f32(v46, *(float32x2_t *)v42.f32), *(float32x2_t *)a3->f32, v47), 4uLL);
          v49.i64[1] = v48.u32[0];
          v50 = vmlaq_laneq_f32(v45, v49, *a3, 3);
          v50.i64[1] = vextq_s8((int8x16_t)v50, (int8x16_t)v50, 8uLL).u32[0];
          v51 = vmulq_f32(v43, v42);
          v51.i64[0] = vpaddq_f32(v51, v51).u64[0];
          v52 = vmlaq_n_f32(v50, v43, vpadd_f32(*(float32x2_t *)v51.f32, *(float32x2_t *)v51.f32).f32[0]);
          v52.i64[1] = vextq_s8((int8x16_t)v52, (int8x16_t)v52, 8uLL).u32[0];
          v53 = (int8x16_t)vmlaq_f32(a3[1], v11, v52);
          v53.i64[1] = vextq_s8(v53, v53, 8uLL).u32[0];
          v54 = a2 + (v5 << 6) + v38;
          v51.i32[0] = *(_DWORD *)(v41 + v38 + 108);
          *(float32x4_t *)v54 = v40;
          *(int8x16_t *)(v54 + 16) = v53;
          *(_DWORD *)(v54 + 12) = v51.i32[0];
          *(_DWORD *)(v54 + 52) = *(_DWORD *)(v41 + v38 + 112);
          v55 = v39 + 1;
          if (v39 + 1 >= v14)
            break;
          v56 = v5 + v39;
          v38 += 64;
          ++v39;
        }
        while (v56 < 0x3F);
        v5 = (v5 + v55);
        v3 = *(unsigned __int8 *)(a1 + 62);
      }
      ++v4;
    }
    while (v4 < v3);
  }
  else
  {
    v5 = 0;
  }
  *(_DWORD *)(a2 + 4096) = v5;
  return v5 != 0;
}

uint64_t physx::Gu::MultiplePersistentContactManifold::fromBuffer(uint64_t this, unsigned __int8 *a2)
{
  uint64_t v2;
  __int128 v3;
  uint64_t v4;
  unsigned __int8 *v5;
  _DWORD *v6;
  unsigned __int8 *v7;
  int v8;
  uint64_t v9;
  unint64_t v10;
  unsigned int *v11;
  unsigned __int8 *v12;
  _DWORD *v13;
  __int128 v14;
  __int128 v15;
  int v16;

  if (!a2)
  {
    *(_OWORD *)this = xmmword_2260E5D70;
    *(_OWORD *)(this + 16) = xmmword_2261A69F0;
    goto LABEL_11;
  }
  v2 = *((unsigned int *)a2 + 8);
  v3 = *((_OWORD *)a2 + 1);
  *(_OWORD *)this = *(_OWORD *)a2;
  *(_OWORD *)(this + 16) = v3;
  if (!(_DWORD)v2)
  {
LABEL_11:
    LODWORD(v2) = 0;
    *(_BYTE *)(this + 62) = 0;
LABEL_12:
    v2 = v2;
    do
    {
      *(_BYTE *)(this + 56 + v2) = v2;
      ++v2;
    }
    while ((_DWORD)v2 != 6);
    return this;
  }
  v4 = 0;
  v5 = a2 + 48;
  v6 = (_DWORD *)(this + 112);
  do
  {
    *(_BYTE *)(this + v4 + 56) = v4;
    v7 = v5 + 16;
    v8 = *(_DWORD *)v5;
    v9 = this + 400 * v4;
    *(_DWORD *)(v9 + 448) = *(_DWORD *)v5;
    if (v8)
    {
      v10 = 0;
      v11 = (unsigned int *)(v9 + 448);
      v12 = v5 + 28;
      v13 = v6;
      do
      {
        v14 = *(_OWORD *)(v12 - 12);
        HIDWORD(v14) = 0;
        *((_OWORD *)v13 - 3) = v14;
        v15 = *(_OWORD *)(v12 + 4);
        HIDWORD(v15) = 0;
        *((_OWORD *)v13 - 2) = v15;
        *((_OWORD *)v13 - 1) = *(_OWORD *)(v12 + 20);
        v16 = *(_DWORD *)v12;
        v12 += 48;
        *v13 = v16;
        v13 += 16;
        ++v10;
      }
      while (v10 < *v11);
    }
    v5 = &v7[48 * v8];
    ++v4;
    v6 += 100;
  }
  while (v4 != v2);
  *(_BYTE *)(this + 62) = v2;
  if (v2 <= 5)
    goto LABEL_12;
  return this;
}

uint64_t physx::Gu::addManifoldPoint(float32x4_t *a1, uint64_t a2, uint64_t a3, float32x4_t *a4, float32x2_t a5)
{
  float32x4_t v5;
  float32x4_t v6;
  float32x4_t v7;
  float32x4_t v8;
  float32x2_t v9;
  int32x4_t v10;
  int32x4_t v12;
  float32x4_t v13;
  float32x2_t v14;

  v5 = vsubq_f32(*(float32x4_t *)a3, a4[3]);
  v6 = vmulq_f32(*a4, v5);
  v7 = vmulq_f32(v5, a4[1]);
  v8 = vmulq_f32(v5, a4[2]);
  v6.i64[0] = vpaddq_f32(v6, v6).u64[0];
  v9 = (float32x2_t)vpaddq_f32(v7, v7).u64[0];
  v8.i64[0] = vpaddq_f32(v8, v8).u64[0];
  *(int8x8_t *)v6.f32 = vext_s8((int8x8_t)vpadd_f32(*(float32x2_t *)v6.f32, *(float32x2_t *)v6.f32), (int8x8_t)vpadd_f32(v9, v9), 4uLL);
  v6.i64[1] = vpadd_f32(*(float32x2_t *)v8.f32, *(float32x2_t *)v8.f32).u32[0];
  v14 = a5;
  v10 = *(int32x4_t *)(a3 + 32);
  v10.i32[3] = HIDWORD(*(_QWORD *)(a3 + 64));
  v12 = v10;
  v13 = v6;
  *a1 = v6;
  a1[1] = *(float32x4_t *)(a3 + 16);
  a1[2] = (float32x4_t)v10;
  return physx::Gu::PersistentContactManifold::addManifoldPoint(a2, &v13, (__int128 *)(a3 + 16), &v12, &v14);
}

uint64_t physx::Gu::PCMHeightfieldContactGenerationCallback<physx::PCMSphereVsHeightfieldContactGenerationCallback>::onEvent(uint64_t a1, unsigned int a2, unsigned int *a3)
{
  unsigned int v4;
  int v6;
  int v7;
  int v8;
  float v9;
  float v10;
  float v11;
  float v12;
  float v13;
  uint64_t v14;
  int v15;
  unsigned int v16;
  float v17;
  float v18;
  float v19;
  float *v20;
  float v21;
  float v22;
  int v23;
  int v24;
  uint64_t v26;
  unsigned int v27;
  int v28;
  int v29;
  unsigned int v30;
  unsigned int *v31;
  int v32;
  float v33;
  float v34;
  float v35;
  float v36;
  float v37;
  float v38;
  float v39;
  float v40;
  float v41;
  float v42;
  float v43;
  float v44;
  float v45;
  float v46;
  float v47;
  float v48;
  float v49;
  float v50;
  char v51[12];
  _DWORD v52[3];
  _DWORD v53[3];
  _BYTE v54[848];
  int v55;
  uint64_t v56;

  v56 = *MEMORY[0x24BDAC8D0];
  if (a2 + 15 >= 0x10)
  {
    v4 = a2;
    v6 = 0;
    v27 = (a2 + 15) >> 4;
    v26 = a1 + 32;
    do
    {
      v55 = 0;
      v29 = v6;
      v30 = v4;
      if (v4 >= 0x10)
        v7 = 16;
      else
        v7 = v4;
      v28 = v7;
      if (v7)
      {
        v32 = v7;
        do
        {
          v8 = *a3;
          physx::Gu::HeightFieldUtil::getTriangle(*(_QWORD *)(a1 + 8), *(float **)(a1 + 16), (uint64_t)&v42, (uint64_t)v53, (uint64_t)v52, *a3, 0, 0);
          v9 = (float)((float)(v46 - v43) * (float)(v50 - v44)) - (float)((float)(v47 - v44) * (float)(v49 - v43));
          v10 = (float)((float)(v47 - v44) * (float)(v48 - v42)) - (float)((float)(v45 - v42) * (float)(v50 - v44));
          v11 = (float)((float)(v45 - v42) * (float)(v49 - v43)) - (float)((float)(v46 - v43) * (float)(v48 - v42));
          v12 = sqrtf((float)((float)(v10 * v10) + (float)(v9 * v9)) + (float)(v11 * v11));
          v31 = a3 + 1;
          if (v12 > 0.0)
          {
            v13 = 1.0 / v12;
            v9 = v9 * v13;
            v10 = v10 * v13;
            v11 = v11 * v13;
          }
          v14 = 0;
          v15 = 0;
          --v32;
          do
          {
            v16 = v52[v14];
            if (v16 == -1)
            {
              if (*(_BYTE *)(a1 + 24))
                v24 = 8 << v14;
              else
                v24 = 1 << v14;
              v15 |= v24;
            }
            else
            {
              physx::Gu::HeightFieldUtil::getTriangle(*(_QWORD *)(a1 + 8), *(float **)(a1 + 16), (uint64_t)&v33, (uint64_t)v51, 0, v16, 0, 0);
              v17 = (float)((float)(v37 - v34) * (float)(v41 - v35)) - (float)((float)(v38 - v35) * (float)(v40 - v34));
              v18 = (float)((float)(v38 - v35) * (float)(v39 - v33)) - (float)((float)(v36 - v33) * (float)(v41 - v35));
              v19 = (float)((float)(v36 - v33) * (float)(v40 - v34)) - (float)((float)(v37 - v34) * (float)(v39 - v33));
              v20 = &v42 + 3 * byte_2261AA836[v14];
              if ((float)((float)((float)(v18 * (float)(v20[1] - v34)) + (float)(v17 * (float)(*v20 - v33)))
                         + (float)(v19 * (float)(v20[2] - v35))) < 0.0)
              {
                v21 = sqrtf((float)((float)(v18 * v18) + (float)(v17 * v17)) + (float)(v19 * v19));
                if (v21 > 0.0)
                {
                  v22 = 1.0 / v21;
                  v17 = v17 * v22;
                  v18 = v18 * v22;
                  v19 = v19 * v22;
                }
                v23 = 8 << v14;
                if ((float)((float)((float)(v10 * v18) + (float)(v17 * v9)) + (float)(v19 * v11)) >= 0.997)
                  v23 = 0;
                v15 |= v23;
              }
            }
            ++v14;
          }
          while (v14 != 3);
          physx::Gu::TriangleCache<16u>::addTriangle((uint64_t)v54, (uint64_t)&v42, v53, v8, v15);
          a3 = v31;
        }
        while (v32);
      }
      v4 = v30 - v28;
      physx::Gu::PCMMeshContactGeneration::processTriangleCache<16u,physx::Gu::PCMSphereVsMeshContactGeneration>(v26, (uint64_t)v54);
      v6 = v29 + 1;
    }
    while (v29 + 1 != v27);
  }
  return 1;
}

BOOL physx::Gu::PCMMeshContactGeneration::processTriangleCache<16u,physx::Gu::PCMSphereVsMeshContactGeneration>(_BOOL8 result, uint64_t a2)
{
  int v2;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v2 = *(_DWORD *)(a2 + 848);
  if (v2)
  {
    v4 = result;
    v5 = 0;
    v6 = 0;
    v7 = 576;
    do
    {
      result = physx::Gu::PCMSphereVsMeshContactGeneration::processTriangle(v4, a2 + v5, *(_DWORD *)(a2 + 4 * v6 + 768), *(unsigned __int8 *)(a2 + v6 + 832), (unsigned int *)(a2 + v7));
      ++v6;
      v7 += 12;
      v5 += 36;
    }
    while (v2 != (_DWORD)v6);
  }
  return result;
}

uint64_t physx::Gu::PCMMeshContactGenerationCallback<physx::PCMSphereVsMeshContactGenerationCallback>::processHit(uint64_t a1, uint64_t a2, float32x2_t *a3, float *a4, float *a5, uint64_t a6, _DWORD *a7)
{
  float v9;
  __int128 v10;
  float v11;
  uint64_t v12;
  uint64_t v13;
  float v14;
  float v15;
  float v16;
  float v17;
  float v18;
  float v19;
  float v20;
  float v21;
  float v22;
  BOOL v23;
  uint64_t v24;
  float32x2_t *v25;
  float v26;
  float v27;
  float v28;
  float v29;
  float32x2_t v30;
  float32x2_t v31;
  float32x2_t v32;
  uint64_t v33;
  uint64_t v34;
  char v35;
  float32x2_t v37;
  float v38;
  float v39;
  __int128 v40;
  uint64_t v41;

  v41 = *MEMORY[0x24BDAC8D0];
  if (*(_BYTE *)(a1 + 32))
  {
    v37 = *a3;
    v9 = a3[1].f32[0];
    v39 = *a4;
    *(_QWORD *)&v10 = *(_QWORD *)(a4 + 1);
    *((_QWORD *)&v10 + 1) = *(_QWORD *)a5;
    v40 = v10;
    v11 = a5[2];
    v12 = 2;
  }
  else
  {
    v13 = *(_QWORD *)(a1 + 16);
    v14 = *(float *)(v13 + 8);
    v15 = a3->f32[0];
    v16 = a3->f32[1];
    v17 = *(float *)(v13 + 20);
    v18 = a3[1].f32[0];
    v19 = *(float *)(v13 + 32);
    v9 = (float)((float)(a3->f32[0] * v14) + (float)(v16 * v17)) + (float)(v18 * v19);
    v20 = *a4;
    v21 = a4[1];
    v22 = a4[2];
    v23 = *(_BYTE *)(v13 + 72) == 0;
    v24 = 24;
    if (!*(_BYTE *)(v13 + 72))
      v24 = 12;
    v25 = (float32x2_t *)((char *)&v37 + v24);
    *(float *)((char *)&v37 + v24 + 8) = (float)((float)(v14 * *a4) + (float)(v17 * v21)) + (float)(v19 * v22);
    v26 = *a5;
    v27 = a5[1];
    v28 = (float)(v14 * *a5) + (float)(v17 * v27);
    v29 = a5[2];
    v11 = v28 + (float)(v19 * v29);
    v12 = 1;
    if (v23)
      v12 = 2;
    v30 = *(float32x2_t *)v13;
    v31 = *(float32x2_t *)(v13 + 12);
    v32 = *(float32x2_t *)(v13 + 24);
    v37 = vadd_f32(vadd_f32(vmul_n_f32(*(float32x2_t *)v13, v15), vmul_n_f32(v31, v16)), vmul_n_f32(v32, v18));
    *v25 = vadd_f32(vadd_f32(vmul_n_f32(v30, v20), vmul_n_f32(v31, v21)), vmul_n_f32(v32, v22));
    *(float32x2_t *)((char *)&v37 + 12 * v12) = vadd_f32(vadd_f32(vmul_n_f32(v30, v26), vmul_n_f32(v31, v27)), vmul_n_f32(v32, v29));
  }
  v38 = v9;
  *((float *)&v37 + 3 * v12 + 2) = v11;
  v33 = *(unsigned int *)(a2 + 16);
  v34 = *(_QWORD *)(a1 + 24);
  if (v34)
    v35 = *(_BYTE *)(v34 + v33);
  else
    v35 = 56;
  if (*(_DWORD *)(a1 + 884) == 16)
  {
    physx::Gu::PCMMeshContactGeneration::processTriangleCache<16u,physx::Gu::PCMSphereVsMeshContactGeneration>(a1 + 896, a1 + 36);
    *(_DWORD *)(a1 + 884) = 0;
  }
  physx::Gu::TriangleCache<16u>::addTriangle(a1 + 36, (uint64_t)&v37, a7, v33, v35);
  return 1;
}

BOOL physx::Gu::sweepBoxTriangle(uint64_t a1, uint64_t a2, float32x2_t *a3, float *a4, float32x2_t *a5, float32x2_t *a6, unsigned __int32 *a7, char a8, double a9, double a10, double a11, __n128 a12, double a13, double a14, double a15, __n128 a16)
{
  int32x4_t v16;
  __n128 v17;
  float v19;
  float v20;
  float32x2_t v21;
  float32x2_t v22;
  float32x2_t v24;
  float v25;
  float v30;
  float v31;
  uint64_t v32;
  __int128 v33;
  unsigned int v34;
  __int32 v35;
  int32x2_t v36;
  int32x4_t v37;
  int32x4_t v38;
  float v39;
  float32x2_t v40;
  float v41;
  float32x2_t v42;
  float32x2_t *v43;
  float v44;
  float v45;
  float v46;
  float v47;
  float v48;
  float v49;
  float v51;
  float v52;
  float v55;
  float v56;
  float v57;
  float v58;
  float v59;
  float v60;
  uint64_t v61;
  unsigned int v62;
  float *v63;
  int v64;
  float v65;
  float v66;
  float v67;
  float v68;
  float v70;
  float v71;
  float v72;
  float v73;
  float v74;
  uint64_t v77;
  float *v78;
  float *v79;
  float v80;
  float v81;
  float v82;
  float v83;
  float v85;
  float v86;
  float v87;
  float v88;
  float v89;
  uint64_t v92;
  float v93;
  float v94;
  float v95;
  float v96;
  float v97;
  float v98;
  int v99;
  BOOL v100;
  BOOL v101;
  float v102;
  float v103;
  float v105;
  float v106;
  float v107;
  float v108;
  float v109;
  int v110;
  float v111;
  BOOL v112;
  float v113;
  unsigned int v114;
  float v115;
  float v116;
  float v117;
  float v118;
  float v119;
  int v120;
  float v121;
  char *v125;
  uint64_t v126;
  unsigned int v127;
  char *v128;
  unsigned int v129;
  float *v130;
  float v131;
  float v132;
  float v133;
  float *v134;
  float v135;
  float v136;
  float v137;
  float v138;
  float v139;
  float v140;
  float v141;
  float v142;
  float v143;
  float v144;
  float v145;
  float v146;
  float v147;
  float v148;
  float v149;
  float v150;
  float v151;
  float v152;
  float v153;
  float v154;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  float v159;
  float v160;
  float v161;
  float v162;
  float v163;
  float *v164;
  float *v165;
  float v166;
  float v167;
  float v168;
  float v169;
  float v170;
  float v171;
  float v172;
  float v173;
  float v174;
  float v175;
  float v176;
  float v177;
  float v178;
  float v179;
  float v180;
  float v181;
  float v182;
  float v183;
  float v184;
  float v185;
  float v186;
  float v187;
  float v188;
  float v189;
  __n128 v190;
  _BOOL8 v192;
  float32x2_t *v193;
  float32x2_t *v194;
  float v195;
  float32x2_t *v197;
  float32_t v198;
  float v199;
  __n128 v200;
  float32x2_t v201;
  float v202;
  unint64_t v203;
  float v204;
  unint64_t v205;
  unsigned __int32 v206;
  float32x2_t v207;
  float v208;
  float32x2_t v209;
  float v210;
  unint64_t v211;
  float v212;
  uint64_t v213;
  unsigned int v214;
  __int128 v215;
  __int32 v216;
  unsigned int v217;
  int32x2_t v218;
  unsigned int v219;
  uint64_t v220;
  __int32 v221;
  __int32 v222;
  int v223;
  int32x4_t v224;
  int v225;
  uint64_t v226;
  uint64_t v227;

  v227 = *MEMORY[0x24BDAC8D0];
  v19 = *(float *)(a1 + 20);
  v20 = *(float *)(a1 + 8);
  v21 = *(float32x2_t *)(a1 + 12);
  v22 = *(float32x2_t *)a1;
  _D17 = vsub_f32(v21, *(float32x2_t *)a1);
  a16.n128_u64[0] = *(_QWORD *)(a1 + 24);
  v24 = vsub_f32((float32x2_t)a16.n128_u64[0], *(float32x2_t *)a1);
  v25 = *(float *)(a1 + 32);
  _S1 = v25 - v20;
  __asm { FMLA            S0, S1, V17.S[1] }
  v30 = vmlas_n_f32(-(float)(_D17.f32[0] * (float)(v25 - v20)), v19 - v20, v24.f32[0]);
  v31 = vmlas_n_f32((float)-_D17.f32[1] * v24.f32[0], v24.f32[1], _D17.f32[0]);
  if ((a8 & 1) == 0
    && (float)((float)((float)(v30 * a3->f32[1]) + (float)(_S0 * a3->f32[0])) + (float)(v31 * a3[1].f32[0])) >= 0.0)
  {
    return 0;
  }
  v32 = 0;
  *(_QWORD *)&v33 = *(_QWORD *)a2;
  v223 = HIDWORD(*(_QWORD *)a2);
  v213 = v33;
  v34 = *(_DWORD *)(a2 + 8);
  v35 = *(_DWORD *)(a2 + 12);
  v16.i64[0] = *(_QWORD *)(a2 + 16);
  v36 = vzip1_s32(*(int32x2_t *)&v33, *(int32x2_t *)v16.i8);
  v220 = v33;
  v225 = v33;
  LODWORD(v33) = v35;
  *((_QWORD *)&v33 + 1) = __PAIR64__(v35, v34);
  v214 = v34;
  v215 = v33;
  v218 = v36;
  v219 = v34;
  v222 = v35;
  v216 = v16.i32[0];
  v217 = v34;
  v221 = v16.i32[1];
  v37 = vuzp2q_s32(v16, vzip1q_s32(v16, v16));
  v38 = v37;
  v38.i32[1] = v35;
  v38.i32[3] = v37.i32[0];
  v224 = v38;
  v226 = v16.i64[0];
  v207 = v22;
  v208 = v20;
  v209 = v21;
  v210 = v19;
  v211 = a16.n128_u64[0];
  v212 = v25;
  v39 = v19 + v20;
  v40 = vadd_f32(vadd_f32(v21, v22), (float32x2_t)a16.n128_u64[0]);
  v41 = v39 + v25;
  a12.n128_u64[0] = (unint64_t)vmul_f32(v40, (float32x2_t)vdup_n_s32(0x3EAAAAABu));
  v42 = (float32x2_t)vdup_n_s32(0x3CA3D70Au);
  do
  {
    v43 = (float32x2_t *)((char *)&v207 + v32);
    v44 = *(float *)((char *)&v207 + v32 + 8);
    *v43 = vadd_f32(*(float32x2_t *)((char *)&v207 + v32), vmul_f32(vsub_f32(*(float32x2_t *)((char *)&v207 + v32), (float32x2_t)a12.n128_u64[0]), v42));
    v43[1].f32[0] = v44 + (float)((float)(v44 - (float)(v41 * 0.33333)) * 0.02);
    v32 += 12;
  }
  while (v32 != 36);
  a12.n128_u32[0] = *a7;
  v200 = a12;
  v45 = v209.f32[0] - v207.f32[0];
  v46 = v209.f32[1] - v207.f32[1];
  v47 = v210 - v208;
  v48 = *(float *)&v211 - v207.f32[0];
  v49 = *((float *)&v211 + 1) - v207.f32[1];
  _S24 = v212 - v208;
  v51 = a3[1].f32[0];
  v52 = -v51;
  _D19 = *a3;
  __asm { FMLA            S25, S24, V19.S[1] }
  v55 = -COERCE_FLOAT(*a3);
  v56 = (float)(v51 * (float)(*(float *)&v211 - v207.f32[0])) - (float)(COERCE_FLOAT(*a3) * (float)(v212 - v208));
  v57 = -COERCE_FLOAT(HIDWORD(*(unint64_t *)a3));
  v58 = vmlas_n_f32(-(float)(COERCE_FLOAT(HIDWORD(*(unint64_t *)a3)) * (float)(*(float *)&v211 - v207.f32[0])), *((float *)&v211 + 1) - v207.f32[1], COERCE_FLOAT(*a3));
  v59 = (float)((float)((float)(v209.f32[1] - v207.f32[1]) * v56) + (float)((float)(v209.f32[0] - v207.f32[0]) * _S25))
      + (float)((float)(v210 - v208) * v58);
  v60 = 1.0 / v59;
  if (v59 == 0.0)
    v60 = 0.0;
  if ((a8 & 1) != 0)
  {
    if (v59 > -0.00001 && v59 < 0.00001)
      goto LABEL_50;
    v61 = 0;
    v62 = 0;
    v63 = (float *)&v214;
    v64 = -1;
    do
    {
      v65 = *(v63 - 2) - v207.f32[0];
      v66 = *(v63 - 1) - v207.f32[1];
      v67 = *v63 - v208;
      v68 = v60 * (float)((float)((float)(v56 * v66) + (float)(v65 * _S25)) + (float)(v67 * v58));
      if (v68 >= 0.0 && v68 <= 1.0)
      {
        v70 = (float)(v66 * v47) - (float)(v67 * v46);
        v71 = (float)(v67 * v45) - (float)(v65 * v47);
        v72 = (float)(v65 * v46) - (float)(v66 * v45);
        v73 = v60 * (float)((float)((float)(_D19.f32[1] * v71) + (float)(_D19.f32[0] * v70)) + (float)(v51 * v72));
        v74 = v68 + v73;
        if (v73 >= 0.0 && v74 <= 1.0)
        {
          v17.n128_f32[0] = v60 * (float)((float)((float)(v49 * v71) + (float)(v48 * v70)) + (float)(_S24 * v72));
          if (v17.n128_f32[0] >= 0.0 && v17.n128_f32[0] <= v200.n128_f32[0])
          {
            v64 = 0;
            v62 = v61;
            v200 = v17;
          }
        }
      }
      ++v61;
      v63 += 3;
    }
    while (v61 != 8);
  }
  else
  {
    if (v59 < 0.00001)
      goto LABEL_50;
    v77 = 0;
    v62 = 0;
    v78 = (float *)&v214;
    v64 = -1;
    v79 = (float *)&dword_2261AA91C;
    do
    {
      if ((float)((float)((float)(v30 * *(v79 - 1)) + (float)(*(v79 - 2) * _S0)) + (float)(*v79 * v31)) < 0.0)
      {
        v80 = *(v78 - 2) - v207.f32[0];
        v81 = *(v78 - 1) - v207.f32[1];
        v82 = *v78 - v208;
        v83 = (float)((float)(v56 * v81) + (float)(v80 * _S25)) + (float)(v82 * v58);
        if (v83 >= 0.0 && v83 <= v59)
        {
          v85 = (float)(v81 * v47) - (float)(v82 * v46);
          v86 = (float)(v82 * v45) - (float)(v80 * v47);
          v87 = (float)(v80 * v46) - (float)(v81 * v45);
          v88 = (float)((float)(_D19.f32[1] * v86) + (float)(_D19.f32[0] * v85)) + (float)(v51 * v87);
          v89 = v83 + v88;
          if (v88 >= 0.0 && v89 <= v59)
          {
            v17.n128_f32[0] = v60 * (float)((float)((float)(v49 * v86) + (float)(v48 * v85)) + (float)(_S24 * v87));
            if (v17.n128_f32[0] >= 0.0 && v17.n128_f32[0] <= v200.n128_f32[0])
            {
              v64 = 0;
              v62 = v77;
              v200 = v17;
            }
          }
        }
      }
      ++v77;
      v79 += 3;
      v78 += 3;
    }
    while (v77 != 8);
  }
  if (!v64)
  {
    v197 = (float32x2_t *)((char *)&v213 + 12 * v62);
    v198 = (float)(v51 * v200.n128_f32[0]) + v197[1].f32[0];
    *a5 = vadd_f32(vmul_n_f32(_D19, v200.n128_f32[0]), *v197);
    a5[1].f32[0] = v198;
    a6->f32[0] = _S0;
    a6->f32[1] = v30;
    a6[1].f32[0] = v31;
    v55 = -a3->f32[0];
    v57 = -a3->f32[1];
    v52 = -a3[1].f32[0];
    goto LABEL_51;
  }
LABEL_50:
  v64 = -1;
LABEL_51:
  v92 = 0;
  v93 = -*a4;
  v94 = -a4[1];
  v95 = -a4[2];
  v96 = fabsf(v55);
  v97 = fabsf(v57);
  v98 = fabsf(v52);
  v99 = 872415232;
  do
  {
    if (v96 >= 0.00000011921
      || ((a16.n128_u32[0] = *(_DWORD *)(a1 + v92), a16.n128_f32[0] >= *(float *)a2)
        ? (v100 = a16.n128_f32[0] <= *(float *)(a2 + 12))
        : (v100 = 0),
          v100))
    {
      if (v97 >= 0.00000011921
        || ((a16.n128_u32[0] = *(_DWORD *)(a1 + v92 + 4), a16.n128_f32[0] >= *(float *)(a2 + 4))
          ? (v101 = a16.n128_f32[0] <= *(float *)(a2 + 16))
          : (v101 = 0),
            v101))
      {
        a16.n128_u32[0] = *(_DWORD *)(a2 + 8);
        v102 = *(float *)(a1 + v92 + 8);
        if (v98 >= 0.00000011921)
        {
          v103 = *(float *)(a2 + 20);
        }
        else
        {
          v103 = *(float *)(a2 + 20);
          if (v102 < a16.n128_f32[0] || v102 > v103)
            goto LABEL_128;
        }
        v105 = *(float *)(a1 + v92);
        v106 = (float)(*(float *)a2 - v105) * v93;
        v107 = (float)(*(float *)(a2 + 12) - v105) * v93;
        v108 = (float)(a16.n128_f32[0] - v102) * v95;
        v109 = (float)(v103 - v102) * v95;
        if (v106 <= v107)
          v110 = 0;
        else
          v110 = 3;
        if (v106 <= v107)
          v111 = v107;
        else
          v111 = v106;
        if (v106 > v107)
          v106 = v107;
        v112 = v108 <= v109;
        if (v108 <= v109)
          v113 = v108;
        else
          v113 = v109;
        if (v108 <= v109)
          v108 = v109;
        if (v112)
          v114 = 2;
        else
          v114 = 5;
        v115 = -3.4028e38;
        if (v96 >= 0.00000011921)
          v115 = v106;
        v116 = 3.4028e38;
        if (v96 < 0.00000011921)
          v110 = -1;
        else
          v116 = v111;
        if (v97 >= 0.00000011921)
        {
          v117 = *(float *)(a1 + v92 + 4);
          v118 = (float)(*(float *)(a2 + 4) - v117) * v94;
          v119 = (float)(*(float *)(a2 + 16) - v117) * v94;
          if (v118 <= v119)
            v120 = 1;
          else
            v120 = 4;
          if (v118 <= v119)
            v121 = v119;
          else
            v121 = v118;
          if (v118 > v119)
            v118 = v119;
          if (v118 > v115)
          {
            v115 = v118;
            v110 = v120;
          }
          if (v116 >= v121)
            v116 = v121;
        }
        if (v113 <= v115)
        {
          v113 = v115;
          v114 = v110;
        }
        if (v116 < v108)
          v108 = v116;
        if (v98 < 0.00000011921)
        {
          a16.n128_f32[0] = v115;
        }
        else
        {
          v116 = v108;
          a16.n128_f32[0] = v113;
        }
        if (v98 < 0.00000011921)
          v114 = v110;
        if (a16.n128_f32[0] > v116 || v116 < 0.00000011921)
          v114 = -1;
        if (a16.n128_f32[0] >= 0.0 && v114 != -1 && a16.n128_f32[0] <= v200.n128_f32[0])
        {
          *a6 = *(float32x2_t *)v125;
          a6[1].i32[0] = *((_DWORD *)v125 + 2);
          *a5 = *(float32x2_t *)(a1 + v92);
          a5[1].i32[0] = *(_DWORD *)(a1 + v92 + 8);
          v64 = 1;
          v200 = a16;
        }
      }
    }
LABEL_128:
    v92 += 12;
  }
  while (v92 != 36);
  v126 = 0;
  v127 = -1;
  v128 = physx::Gu::getBoxEdges(void)::Indices;
  v129 = -1;
  do
  {
    v130 = (float *)&v213 + 3 * *v128;
    v131 = *v130;
    v132 = v130[1];
    v205 = __PAIR64__(LODWORD(v132), LODWORD(v131));
    v133 = v130[2];
    v206 = LODWORD(v133);
    v134 = (float *)&v213 + 3 * v128[1];
    v135 = *v134;
    v136 = v134[1];
    v137 = v134[2];
    v138 = *v134 - v131;
    v139 = v136 - v132;
    v140 = v137 - v133;
    v141 = sqrtf((float)((float)(v139 * v139) + (float)(v138 * v138)) + (float)(v140 * v140));
    if (v141 > 0.0)
    {
      v142 = 0.01 / v141;
      v143 = v138 * v142;
      v144 = v139 * v142;
      v145 = v140 * v142;
      v131 = v131 - v143;
      v132 = v132 - v144;
      v205 = __PAIR64__(LODWORD(v132), LODWORD(v131));
      v133 = v133 - v145;
      v206 = LODWORD(v133);
      v135 = v135 + v143;
      v136 = v136 + v144;
      v137 = v137 + v145;
    }
    v147 = a3->f32[0];
    v146 = a3->f32[1];
    v148 = a3[1].f32[0];
    {
      *(float *)&v203 = v135 - v131;
      *((float *)&v203 + 1) = v136 - v132;
      v204 = v137 - v133;
      v149 = (float)((float)(v136 - v132) * v148) - (float)((float)(v137 - v133) * v146);
      v150 = (float)((float)(v137 - v133) * v147) - (float)((float)(v135 - v131) * v148);
      v151 = (float)((float)(v135 - v131) * v146) - (float)((float)(v136 - v132) * v147);
      v152 = fabsf(v149);
      v153 = fabsf(v150);
      v154 = fabsf(v151);
      if (v153 <= v152 || v153 <= v154)
      {
        v157 = v154 <= v152;
        if (v154 > v152)
          v156 = 1;
        else
          v156 = 2;
      }
      else
      {
        v156 = 0;
        v157 = 2;
      }
      v158 = 0;
      v159 = *((float *)&v203 + v157);
      v160 = *((float *)&v203 + v156);
      v161 = (float)((float)(v132 * v150) + (float)(v149 * v131)) + (float)(v151 * v133);
      v162 = -v160;
      v163 = 1.0 / (float)((float)(v159 * a3->f32[v156]) - (float)(v160 * a3->f32[v157]));
      v164 = (float *)(a1 + 8);
      do
      {
        v165 = (float *)(a1 + 12 * (((_BYTE)v158 + (v158 >> 1) + 1) & 3));
        v166 = *(v164 - 2);
        v167 = *(v164 - 1);
        v168 = *v164;
        v169 = (float)((float)((float)(v150 * v167) + (float)(v166 * v149)) + (float)(*v164 * v151)) - v161;
        v170 = v165[1];
        v171 = v165[2];
        if ((float)(v169
                   * (float)((float)((float)((float)(v150 * v170) + (float)(*v165 * v149)) + (float)(v171 * v151)) - v161)) <= 0.0)
        {
          v172 = *v165 - v166;
          v173 = v170 - v167;
          v174 = v171 - v168;
          v175 = (float)((float)(v150 * v173) + (float)(v149 * v172)) + (float)(v151 * v174);
          if (v175 != 0.0)
          {
            v176 = v169 / v175;
            v177 = v172 * v176;
            v178 = v173 * v176;
            v179 = v174 * v176;
            v180 = v166 - v177;
            v181 = v167 - v178;
            v182 = v168 - v179;
            v201.f32[0] = v166 - v177;
            v201.f32[1] = v167 - v178;
            v202 = v182;
            v183 = v163
                 * (float)((float)((float)(v201.f32[v157] - *((float *)&v205 + v157)) * v162)
                         + (float)(v159 * (float)(v201.f32[v156] - *((float *)&v205 + v156))));
            if (v183 >= 0.0)
            {
              v184 = v183 * a3->f32[0];
              v185 = v183 * a3->f32[1];
              v186 = v183 * a3[1].f32[0];
              v187 = v180 - v184;
              v188 = v181 - v185;
              v189 = v182 - v186;
              v190 = v200;
              if ((float)((float)((float)((float)(v132 - v188) * (float)(v136 - v188))
                                 + (float)((float)(v131 - v187) * (float)(v135 - v187)))
                         + (float)((float)(v133 - v189) * (float)(v137 - v189))) < 0.0
                && v183 <= v200.n128_f32[0])
              {
                v64 = 2;
                v199 = v137 - v133;
                a5->f32[0] = v184 + v187;
                a5->f32[1] = v185 + v188;
                v96 = v136 - v132;
                a16.n128_f32[0] = v133;
                v99 = LODWORD(v132);
                v98 = v135 - v131;
                a5[1].f32[0] = v186 + v189;
                v97 = v131;
                v190.n128_f32[0] = v183;
                v200 = v190;
                v129 = v158;
                v127 = ((_BYTE)v158 + (v158 >> 1) + 1) & 3;
              }
            }
          }
        }
        ++v158;
        v164 += 3;
      }
      while (v158 != 3);
    }
    v128 += 2;
    ++v126;
  }
  while (v126 != 12);
  v206 = a16.n128_u32[0];
  v204 = v199;
  v205 = __PAIR64__(v99, LODWORD(v97));
  v203 = __PAIR64__(LODWORD(v96), LODWORD(v98));
  v192 = v64 != -1;
  if (v64 != -1)
  {
    if (v64 == 2)
    {
      v193 = (float32x2_t *)(a1 + 12 * v129);
      v194 = (float32x2_t *)(a1 + 12 * v127);
      v195 = v194[1].f32[0] - v193[1].f32[0];
      v201 = vsub_f32(*v194, *v193);
      v202 = v195;
      physx::Gu::computeEdgeEdgeNormal(a6, (float32x2_t *)&v205, (float32x2_t *)&v203, v193, &v201, a3, v200.n128_f32[0]);
    }
    *a7 = v200.n128_u32[0];
  }
  return v192;
}

uint64_t physx::Gu::sweepBoxBox(uint64_t a1, uint64_t a2, float32x2_t *a3, _WORD *a4, uint64_t a5, float a6)
{
  float32x2_t v6;
  float32x2_t v7;
  float v13;
  _BOOL8 v14;
  uint64_t v15;
  float v16;
  float v17;
  float v18;
  float v19;
  float v20;
  float v21;
  float v22;
  float v23;
  float v24;
  float v25;
  float v26;
  float v27;
  float v28;
  float v29;
  float v30;
  float v31;
  float v32;
  float v33;
  float v34;
  float v35;
  float v36;
  float v37;
  float v38;
  int v39;
  float v40;
  float v41;
  float v42;
  int v43;
  float v44;
  float *v46;
  float v47;
  float v48;
  float v49;
  uint64_t v50;
  float v51;
  float v52;
  float v53;
  float v54;
  float v55;
  float v56;
  float v57;
  float v58;
  float v59;
  float v60;
  float v61;
  float v62;
  float v63;
  float v64;
  float v65;
  float v66;
  float v67;
  float v68;
  float v69;
  float v70;
  float v71;
  float v72;
  float v73;
  float v74;
  int v75;
  float v76;
  float *v78;
  float v79;
  float v80;
  float v81;
  float v82;
  float v83;
  uint64_t v84;
  float32x2_t *v85;
  uint64_t v86;
  float32x2_t *v87;
  uint64_t i;
  float *v89;
  float v90;
  float v91;
  float v92;
  char *v93;
  float *v94;
  float v95;
  float v96;
  float v97;
  float *v98;
  float v99;
  float v100;
  float v101;
  float v102;
  float v103;
  float v104;
  float v105;
  float v106;
  float v107;
  float v108;
  float v109;
  uint64_t v110;
  float *v111;
  float v112;
  float v113;
  float *v114;
  float v115;
  float v116;
  float v117;
  float *v118;
  float v119;
  float v120;
  float v121;
  float v122;
  float v123;
  float v124;
  float v125;
  float v126;
  float v127;
  float v128;
  float v129;
  float v130;
  float v131;
  float v132;
  float v133;
  float v134;
  float v135;
  float v136;
  float v138;
  float v139;
  float v140;
  float v141;
  float v142;
  float v143;
  float v144;
  float v145;
  float v146;
  float v147;
  float32x2_t v148;
  float v149;
  float v150;
  float v151;
  float32x2_t v152;
  float v153;
  float v154;
  float32x2_t v155;
  float32x2_t v156;
  float v157;
  float v158;
  unint64_t v159;
  float v160;
  unint64_t v161;
  float v162;
  unint64_t v163;
  float v164;
  unint64_t v165;
  float v166;
  unint64_t v167;
  float v168;
  unint64_t v169;
  float v170;
  unint64_t v171;
  float v172;
  float32x2_t v173;
  float v174;
  float v175[24];
  float v176[24];
  uint64_t v177;

  v177 = *MEMORY[0x24BDAC8D0];
  if ((*a4 & 0x10) != 0
    || !physx::Gu::intersectOBBOBB((float *)(a1 + 48), (float *)(a1 + 36), (float *)a1, (float *)(a2 + 48), (float *)(a2 + 36), a2, 1))
  {
    physx::Gu::computeOBBPoints(v176, (float *)(a1 + 36), (float *)(a1 + 48), (float *)a1, (float *)(a1 + 12), (float *)(a1 + 24));
    physx::Gu::computeOBBPoints(v175, (float *)(a2 + 36), (float *)(a2 + 48), (float *)a2, (float *)(a2 + 12), (float *)(a2 + 24));
    v15 = 0;
    v16 = *(float *)(a1 + 48);
    v17 = *(float *)(a1 + 52);
    v18 = *(float *)(a1 + 56);
    v173.f32[0] = -v16;
    v173.f32[1] = -v17;
    v174 = -v18;
    v171 = __PAIR64__(LODWORD(v17), LODWORD(v16));
    v172 = v18;
    v19 = *(float *)(a1 + 4);
    v20 = *(float *)(a1 + 8);
    v21 = *(float *)(a1 + 12);
    v22 = *(float *)(a1 + 16);
    v23 = *(float *)(a1 + 20);
    v24 = *(float *)(a1 + 24);
    v25 = *(float *)(a1 + 28);
    v27 = *(float *)(a1 + 32);
    v26 = *(float *)(a1 + 36);
    v28 = *(float *)(a1 + 40);
    v29 = *(float *)(a1 + 44);
    v140 = (float)((float)-(float)(v28 * v19) - (float)(*(float *)a1 * v26)) - (float)(v20 * v29);
    v138 = (float)((float)-(float)(v28 * v25) - (float)(v24 * v26)) - (float)(v27 * v29);
    v139 = (float)((float)-(float)(v28 * v22) - (float)(v21 * v26)) - (float)(v23 * v29);
    v30 = a3->f32[1];
    v154 = *(float *)a1;
    v150 = v21;
    v153 = v19;
    v142 = v25;
    v144 = v24;
    v149 = v22;
    v31 = (float)(*(float *)a1 * a3->f32[0]) + (float)(v19 * v30);
    v32 = (float)(v21 * a3->f32[0]) + (float)(v22 * v30);
    v33 = (float)(v24 * a3->f32[0]) + (float)(v25 * v30);
    v34 = a3[1].f32[0];
    v146 = v20;
    v141 = v23;
    v35 = v27;
    v36 = -(float)(v31 + (float)(v20 * v34));
    v37 = -(float)(v32 + (float)(v23 * v34));
    v38 = -(float)(v33 + (float)(v27 * v34));
    v39 = -1;
    do
    {
      LODWORD(v165) = 0;
      LODWORD(v163) = 0;
      v41 = v175[v15];
      v40 = v175[v15 + 1];
      v42 = v175[v15 + 2];
      *(float *)&v169 = v140 + (float)((float)((float)(v154 * v41) + (float)(v153 * v40)) + (float)(v146 * v42));
      *((float *)&v169 + 1) = v139 + (float)((float)((float)(v150 * v41) + (float)(v149 * v40)) + (float)(v141 * v42));
      v170 = v138 + (float)((float)((float)(v144 * v41) + (float)(v142 * v40)) + (float)(v35 * v42));
      v167 = __PAIR64__(LODWORD(v37), LODWORD(v36));
      v168 = v38;
      v43 = physx::Gu::intersectRayAABB((uint64_t)&v173, (uint64_t)&v171, (uint64_t)&v169, (uint64_t)&v167, (float *)&v165, (float *)&v163);
      if (v43 != -1)
      {
        v44 = *(float *)&v165;
        if (*(float *)&v165 >= 0.0 && *(float *)&v165 <= a6)
        {
          v39 = 0;
          v47 = v46[1];
          v48 = v46[2];
          v49 = (float)((float)(*v46 * *(float *)(a1 + 8)) + (float)(v47 * *(float *)(a1 + 20)))
              + (float)(v48 * *(float *)(a1 + 32));
          *(float32x2_t *)(a5 + 36) = vadd_f32(vadd_f32(vmul_n_f32(*(float32x2_t *)a1, *v46), vmul_n_f32(*(float32x2_t *)(a1 + 12), v47)), vmul_n_f32(*(float32x2_t *)(a1 + 24), v48));
          *(float *)(a5 + 44) = v49;
          *(float *)(a5 + 24) = v41;
          *(float *)(a5 + 28) = v40;
          *(float *)(a5 + 32) = v42;
          a6 = v44;
        }
      }
      v15 += 3;
    }
    while (v15 != 24);
    v50 = 0;
    v51 = *(float *)(a2 + 48);
    v52 = *(float *)(a2 + 52);
    v53 = *(float *)(a2 + 56);
    v173.f32[0] = -v51;
    v173.f32[1] = -v52;
    v174 = -v53;
    v171 = __PAIR64__(LODWORD(v52), LODWORD(v51));
    v172 = v53;
    v54 = *(float *)(a2 + 4);
    v55 = *(float *)(a2 + 8);
    v56 = *(float *)(a2 + 12);
    v57 = *(float *)(a2 + 16);
    v58 = *(float *)(a2 + 20);
    v59 = *(float *)(a2 + 24);
    v60 = *(float *)(a2 + 28);
    v62 = *(float *)(a2 + 32);
    v61 = *(float *)(a2 + 36);
    v63 = *(float *)(a2 + 40);
    v64 = *(float *)(a2 + 44);
    v147 = (float)((float)-(float)(v63 * v54) - (float)(*(float *)a2 * v61)) - (float)(v55 * v64);
    v143 = (float)((float)-(float)(v63 * v60) - (float)(v59 * v61)) - (float)(v62 * v64);
    v145 = (float)((float)-(float)(v63 * v57) - (float)(v56 * v61)) - (float)(v58 * v64);
    v65 = a3->f32[1];
    v151 = v56;
    v152.i32[0] = *(_DWORD *)a2;
    v148.f32[0] = v59;
    v7.f32[0] = v54;
    v66 = v57;
    v67 = v60;
    v68 = (float)(*(float *)a2 * a3->f32[0]) + (float)(v54 * v65);
    v69 = (float)(v56 * a3->f32[0]) + (float)(v57 * v65);
    v70 = (float)(v59 * a3->f32[0]) + (float)(v60 * v65);
    v71 = a3[1].f32[0];
    v6.f32[0] = v55;
    v72 = v58;
    v73 = v62;
    *(float *)&v169 = v68 + (float)(v55 * v71);
    *((float *)&v169 + 1) = v69 + (float)(v58 * v71);
    v170 = v70 + (float)(v62 * v71);
    do
    {
      LODWORD(v165) = 0;
      LODWORD(v163) = 0;
      v155 = *(float32x2_t *)&v176[v50];
      v74 = v176[v50 + 2];
      *(float *)&v167 = v147
                      + (float)((float)((float)(v152.f32[0] * v155.f32[0]) + vmuls_lane_f32(v7.f32[0], v155, 1))
                              + (float)(v6.f32[0] * v74));
      *((float *)&v167 + 1) = v145
                            + (float)((float)((float)(v151 * v155.f32[0]) + vmuls_lane_f32(v66, v155, 1))
                                    + (float)(v72 * v74));
      v168 = v143
           + (float)((float)((float)(v148.f32[0] * v155.f32[0]) + vmuls_lane_f32(v67, v155, 1)) + (float)(v73 * v74));
      v75 = physx::Gu::intersectRayAABB((uint64_t)&v173, (uint64_t)&v171, (uint64_t)&v167, (uint64_t)&v169, (float *)&v165, (float *)&v163);
      if (v75 != -1)
      {
        v76 = *(float *)&v165;
        if (*(float *)&v165 >= 0.0 && *(float *)&v165 <= a6)
        {
          v79 = v78[1];
          v80 = -v79;
          v81 = v78[2];
          v82 = (float)((float)-(float)(v79 * *(float *)(a2 + 20)) - (float)(*v78 * *(float *)(a2 + 8)))
              - (float)(v81 * *(float *)(a2 + 32));
          *(float32x2_t *)(a5 + 36) = vsub_f32(vsub_f32(vmul_n_f32(*(float32x2_t *)(a2 + 12), v80), vmul_n_f32(*(float32x2_t *)a2, *v78)), vmul_n_f32(*(float32x2_t *)(a2 + 24), v81));
          *(float *)(a5 + 44) = v82;
          v83 = v74 + (float)(v76 * a3[1].f32[0]);
          *(float32x2_t *)(a5 + 24) = vadd_f32(v155, vmul_n_f32(*a3, v76));
          *(float *)(a5 + 32) = v83;
          v39 = 1;
          a6 = v76;
        }
      }
      v50 += 3;
    }
    while (v50 != 24);
    v84 = 0;
    v85 = &v173;
    do
    {
      v85 = (float32x2_t *)((char *)v85 + 12);
    }
    while (v84 != 12);
    v86 = 0;
    v87 = (float32x2_t *)&v171;
    do
    {
      v87 = (float32x2_t *)((char *)v87 + 12);
    }
    while (v86 != 12);
    for (i = 0; i != 12; ++i)
    {
      v89 = (float *)&v173 + 3 * i;
      v90 = *v89;
      v91 = v89[1];
      v92 = v89[2];
      if ((float)((float)((float)(v91 * a3->f32[1]) + (float)(*v89 * a3->f32[0])) + (float)(v92 * a3[1].f32[0])) >= 0.0)
      {
        v93 = &physx::Gu::getBoxEdges(void)::Indices[2 * i];
        v94 = &v176[3 * *v93];
        v95 = *v94;
        v96 = v94[1];
        v165 = __PAIR64__(LODWORD(v96), LODWORD(v95));
        v97 = v94[2];
        v166 = v97;
        v98 = &v176[3 * v93[1]];
        v99 = *v98;
        v100 = v98[1];
        v163 = __PAIR64__(LODWORD(v100), LODWORD(v99));
        v101 = v98[2];
        v164 = v101;
        v102 = v99 - v95;
        v103 = v100 - v96;
        v104 = v101 - v97;
        v105 = sqrtf((float)((float)(v103 * v103) + (float)(v102 * v102)) + (float)(v104 * v104));
        if (v105 > 0.0)
        {
          v106 = 0.01 / v105;
          v107 = v102 * v106;
          v108 = v103 * v106;
          v109 = v104 * v106;
          *(float *)&v165 = v95 - v107;
          *((float *)&v165 + 1) = v96 - v108;
          v166 = v97 - v109;
          *(float *)&v163 = v99 + v107;
          *((float *)&v163 + 1) = v100 + v108;
          v164 = v101 + v109;
        }
        v110 = 0;
        v111 = &v172;
        do
        {
          v112 = *(v111 - 2);
          v113 = *(v111 - 1);
          if ((float)((float)((float)(v113 * a3->f32[1]) + (float)(v112 * a3->f32[0])) + (float)(*v111 * a3[1].f32[0])) < 0.0
            && (float)((float)((float)(v91 * v113) + (float)(v90 * v112)) + (float)(v92 * *v111)) < 0.0)
          {
            v114 = &v175[3 * physx::Gu::getBoxEdges(void)::Indices[v110]];
            v115 = *v114;
            v116 = v114[1];
            v161 = __PAIR64__(LODWORD(v116), LODWORD(v115));
            v117 = v114[2];
            v162 = v117;
            v118 = &v175[3 * physx::Gu::getBoxEdges(void)::Indices[v110 + 1]];
            v119 = *v118;
            v120 = v118[1];
            v159 = __PAIR64__(LODWORD(v120), LODWORD(v119));
            v121 = v118[2];
            v160 = v121;
            v122 = v119 - v115;
            v123 = v120 - v116;
            v124 = v121 - v117;
            v125 = sqrtf((float)((float)(v123 * v123) + (float)(v122 * v122)) + (float)(v124 * v124));
            if (v125 > 0.0)
            {
              v126 = 0.01 / v125;
              v127 = v122 * v126;
              v128 = v123 * v126;
              v129 = v124 * v126;
              *(float *)&v161 = v115 - v127;
              *((float *)&v161 + 1) = v116 - v128;
              v162 = v117 - v129;
              *(float *)&v159 = v119 + v127;
              *((float *)&v159 + 1) = v120 + v128;
              v160 = v121 + v129;
            }
            v158 = 0.0;
            if (physx::Gu::intersectEdgeEdge((float *)&v165, (float *)&v163, a3, (float *)&v161, (float *)&v159, &v158, &v156))
            {
              v130 = v158;
              if (v158 <= a6)
              {
                v67 = v166;
                v170 = v166;
                v6 = (float32x2_t)v165;
                v169 = v165;
                v152 = (float32x2_t)v163;
                v155.f32[0] = v164;
                v66 = v162;
                v168 = v162;
                v7 = (float32x2_t)v161;
                v167 = v161;
                v148 = (float32x2_t)v159;
                v151 = v160;
                v131 = (float)(v158 * a3[1].f32[0]) + v157;
                *(float32x2_t *)(a5 + 24) = vadd_f32(vmul_n_f32(*a3, v158), v156);
                *(float *)(a5 + 32) = v131;
                v39 = 2;
                a6 = v130;
              }
            }
          }
          v110 += 2;
          v111 += 3;
        }
        while (v110 != 24);
      }
    }
    v14 = v39 != -1;
    if (v39 != -1)
    {
      if (v39 == 2)
      {
        v173 = vsub_f32(v152, v6);
        v174 = v155.f32[0] - v67;
        v171 = (unint64_t)vsub_f32(v148, v7);
        v172 = v151 - v66;
        physx::Gu::computeEdgeEdgeNormal((float32x2_t *)(a5 + 36), (float32x2_t *)&v169, &v173, (float32x2_t *)&v167, (float32x2_t *)&v171, a3, a6);
        v133 = *(float *)(a5 + 36);
        v132 = *(float *)(a5 + 40);
        v134 = *(float *)(a5 + 44);
        v135 = sqrtf((float)((float)(v132 * v132) + (float)(v133 * v133)) + (float)(v134 * v134));
        if (v135 > 0.0)
        {
          v136 = 1.0 / v135;
          *(float *)(a5 + 36) = v133 * v136;
          *(float *)(a5 + 40) = v132 * v136;
          *(float *)(a5 + 44) = v134 * v136;
        }
      }
      *(_WORD *)(a5 + 20) = 3;
      *(float *)(a5 + 48) = a6;
    }
  }
  else
  {
    *(_WORD *)(a5 + 20) = 2;
    *(_DWORD *)(a5 + 48) = 0;
    v13 = -a3[1].f32[0];
    *(float32x2_t *)(a5 + 36) = vneg_f32(*a3);
    *(float *)(a5 + 44) = v13;
    return 1;
  }
  return v14;
}

float32_t `anonymous namespace'::computeBoxWorldEdgeNormal(uint64_t a1, unsigned int a2, float32x2_t *a3)
{
  float *v3;
  float v4;
  float v5;
  float32_t result;

  v4 = v3[1];
  v5 = v3[2];
  result = (float)((float)(*v3 * *(float *)(a1 + 8)) + (float)(v4 * *(float *)(a1 + 20)))
         + (float)(v5 * *(float *)(a1 + 32));
  *a3 = vadd_f32(vadd_f32(vmul_n_f32(*(float32x2_t *)a1, *v3), vmul_n_f32(*(float32x2_t *)(a1 + 12), v4)), vmul_n_f32(*(float32x2_t *)(a1 + 24), v5));
  a3[1].f32[0] = result;
  return result;
}

uint64_t physx::Gu::sweepBoxSphere(Sphere *a1, _QWORD *a2, float32x2_t *a3, float *a4, float *a5, _WORD *a6, float a7, float a8)
{
  float v15;
  char v16;
  uint64_t v17;
  char *v18;
  float *v19;
  __int128 v20;
  float v21;
  float v22;
  float v23;
  float32x2_t v24;
  float v25;
  float v26;
  float v27;
  float v28;
  float v29;
  float v30;
  float v31;
  float v32;
  float v33;
  float v34;
  int v35;
  _BOOL4 v36;
  float v37;
  float v39;
  float v40;
  float v41;
  float v42;
  float v43;
  float v44;
  float v45;
  float v46;
  float v47;
  float v48;
  float v49;
  float v50;
  float v51;
  float v52;
  float v53;
  float v54;
  float v55;
  float v56;
  float v57;
  float v58;
  float v59;
  float v60;
  float v61;
  float v62;
  float v63;
  float v64;
  float v65;
  float v66;
  float v67;
  float v68;
  float v69;
  float v70;
  float v71;
  int v72;
  float *v73;
  float v74;
  float v75;
  float v76;
  float v77;
  float v78;
  float v79;
  int v80;
  float *v81;
  float v82;
  float v83;
  float v84;
  int v85;
  float *v86;
  float *v87;
  float v88;
  float v89;
  float v90;
  float v92;
  float v93;
  float v94;
  float v95;
  float v96;
  float v97;
  float v98;
  float v99;
  float v100;
  float v101;
  float v102;
  int v103;
  float v104;
  float v105;
  __int128 v106;
  float v107;
  float v108;
  float32x2_t v109;
  float v110;
  float v111;
  float v112;
  float v113;
  int32x2_t v114;
  int v115;
  float v116;
  uint64_t v117;

  v117 = *MEMORY[0x24BDAC8D0];
  if ((*a6 & 0x10) != 0
    || (v114 = *(int32x2_t *)a2,
        v115 = *((_DWORD *)a2 + 2),
        v116 = a7,
        !physx::Gu::intersectSphereBox((physx::Gu *)&v114, a1, (const physx::Gu::Box *)a3)))
  {
    physx::Gu::computeOBBPoints((float *)&v114, (float *)a1 + 9, (float *)a1 + 12, (float *)a1, (float *)a1 + 3, (float *)a1 + 6);
    v17 = 0;
    v16 = 0;
    do
    {
      v18 = (char *)&v114 + 12 * physx::Gu::getBoxEdges(void)::Indices[v17];
      v19 = (float *)&v114 + 3 * physx::Gu::getBoxEdges(void)::Indices[v17 + 1];
      *(_QWORD *)&v20 = *(_QWORD *)(v18 + 4);
      *((_QWORD *)&v20 + 1) = *(_QWORD *)v19;
      v105 = *(float *)v18;
      v106 = v20;
      v107 = v19[2];
      v108 = a7;
      v21 = *((float *)&v20 + 2) - v105;
      v22 = v107 - *((float *)&v20 + 1);
      v23 = COERCE_FLOAT(*a2) - v105;
      v24 = vsub_f32((float32x2_t)vzip2_s32(*(int32x2_t *)((char *)&v20 + 8), *(int32x2_t *)a2), (float32x2_t)vdup_lane_s32(*(int32x2_t *)&v20, 0));
      v25 = *((float *)a2 + 2);
      v26 = v25 - *((float *)&v20 + 1);
      v27 = v24.f32[1];
      v28 = (float)(vmuls_lane_f32(v24.f32[0], v24, 1) + (float)(v23 * (float)(*((float *)&v20 + 2) - v105)))
          + (float)((float)(v25 - *((float *)&v20 + 1)) * (float)(v107 - *((float *)&v20 + 1)));
      if (v28 > 0.0)
      {
        v29 = (float)(vmul_f32(v24, v24).f32[0] + (float)(v21 * v21)) + (float)(v22 * v22);
        if (v28 >= v29)
        {
          v23 = v23 - v21;
          v27 = v24.f32[1] - v24.f32[0];
        }
        else
        {
          v30 = v28 / v29;
          v22 = v22 * v30;
          v23 = v23 - (float)(v21 * v30);
          v27 = v24.f32[1] - (float)(v24.f32[0] * v30);
        }
        v26 = v26 - v22;
      }
      v31 = sqrtf((float)((float)(v27 * v27) + (float)(v23 * v23)) + (float)(v26 * v26)) - a7;
      if (v31 <= 0.0)
      {
        v36 = 1;
        v33 = 0.0;
      }
      else
      {
        v32 = v31 + -10.0;
        v33 = 0.0;
        if (v31 <= 10.0)
          v32 = 0.0;
        v34 = v25 + (float)(v32 * a3[1].f32[0]);
        v98 = v32;
        v109 = vadd_f32(*(float32x2_t *)a2, vmul_n_f32(*a3, v32));
        v110 = v34;
        physx::Gu::intersectRayCapsuleInternal(&v109, a3, &v105, (float *)&v106 + 2, &v111, a7);
        v36 = v35 != 0;
        if (v35)
        {
          v37 = v111;
          if (v111 >= v112 && v35 != 1)
            v37 = v112;
          v33 = v98 + v37;
        }
      }
      if (v36 && v33 >= 0.0 && v33 <= a8)
      {
        v39 = (float)(v33 * a3->f32[0]) + *(float *)a2;
        v40 = (float)(v33 * a3->f32[1]) + *((float *)a2 + 1);
        v41 = (float)(v33 * a3[1].f32[0]) + *((float *)a2 + 2);
        v42 = *((float *)&v106 + 2) - v105;
        v43 = *((float *)&v106 + 3) - *(float *)&v106;
        v44 = v107 - *((float *)&v106 + 1);
        v45 = (float)((float)((float)(*((float *)&v106 + 3) - *(float *)&v106) * (float)(v40 - *(float *)&v106))
                    + (float)((float)(v39 - v105) * (float)(*((float *)&v106 + 2) - v105)))
            + (float)((float)(v41 - *((float *)&v106 + 1)) * (float)(v107 - *((float *)&v106 + 1)));
        v46 = 0.0;
        if (v45 > 0.0)
        {
          v47 = (float)((float)(v43 * v43) + (float)(v42 * v42)) + (float)(v44 * v44);
          v46 = 1.0;
          if (v45 < v47)
            v46 = v45 / v47;
        }
        v48 = (float)(v105 + (float)(v42 * v46)) - v39;
        v49 = (float)(*(float *)&v106 + (float)(v43 * v46)) - v40;
        v50 = (float)(*((float *)&v106 + 1) + (float)(v44 * v46)) - v41;
        *a5 = v48;
        a5[1] = v49;
        a5[2] = v50;
        v51 = sqrtf((float)((float)(v49 * v49) + (float)(v48 * v48)) + (float)(v50 * v50));
        if (v51 > 0.0)
        {
          v52 = 1.0 / v51;
          *a5 = v48 * v52;
          a5[1] = v49 * v52;
          a5[2] = v50 * v52;
        }
        v16 = 1;
        a8 = v33;
      }
      v17 += 2;
    }
    while ((_DWORD)v17 != 24);
    v53 = *(float *)a1;
    v54 = *((float *)a1 + 1);
    v55 = *((float *)a1 + 2);
    v56 = *((float *)a1 + 3);
    v57 = *((float *)a1 + 4);
    v58 = *((float *)a1 + 5);
    v59 = *((float *)a1 + 6);
    v60 = *((float *)a1 + 7);
    v61 = *((float *)a1 + 8);
    v62 = *(float *)a2 - *((float *)a1 + 9);
    v63 = *((float *)a2 + 1) - *((float *)a1 + 10);
    v64 = *((float *)a2 + 2) - *((float *)a1 + 11);
    v105 = (float)((float)(v54 * v63) + (float)(*(float *)a1 * v62)) + (float)(v55 * v64);
    *(float *)&v106 = (float)((float)(v57 * v63) + (float)(v56 * v62)) + (float)(v58 * v64);
    *((float *)&v106 + 1) = (float)((float)(v60 * v63) + (float)(v59 * v62)) + (float)(v61 * v64);
    v65 = a3->f32[0];
    v66 = a3->f32[1];
    v94 = v54;
    v95 = v53;
    v67 = a3[1].f32[0];
    v92 = v56;
    v93 = v55;
    v96 = v61;
    v97 = v60;
    v99 = v59;
    v109.f32[0] = (float)((float)(v54 * v66) + (float)(v53 * a3->f32[0])) + (float)(v55 * v67);
    v109.f32[1] = (float)((float)(v57 * v66) + (float)(v56 * v65)) + (float)(v58 * v67);
    v103 = 0;
    v104 = 0.0;
    v69 = *((float *)a1 + 12);
    v68 = *((float *)a1 + 13);
    v70 = *((float *)a1 + 14);
    v112 = v68;
    v113 = v70;
    v110 = (float)((float)(v60 * v66) + (float)(v59 * v65)) + (float)(v61 * v67);
    v111 = v69 + a7;
    v71 = -v70;
    v100 = -(float)(v69 + a7);
    v101 = -v68;
    v102 = -v70;
    v72 = physx::Gu::intersectRayAABB((uint64_t)&v100, (uint64_t)&v111, (uint64_t)&v105, (uint64_t)&v109, &v104, (float *)&v103);
    if (v72 != -1 && v104 >= -0.00001 && v104 <= a8)
    {
      a8 = fmaxf(v104, 0.0);
      v74 = v73[1];
      v75 = (float)(v95 * *v73) + (float)(v92 * v74);
      v76 = (float)(v94 * *v73) + (float)(v57 * v74);
      v77 = (float)(v93 * *v73) + (float)(v58 * v74);
      v78 = v73[2];
      *a5 = v75 + (float)(v99 * v78);
      a5[1] = v76 + (float)(v97 * v78);
      a5[2] = v77 + (float)(v96 * v78);
      v69 = *((float *)a1 + 12);
      v68 = *((float *)a1 + 13);
      v70 = *((float *)a1 + 14);
      v71 = -v70;
      v16 = 1;
    }
    v111 = v69;
    v112 = v68 + a7;
    v113 = v70;
    v79 = -v69;
    v100 = -v69;
    v101 = -(float)(v68 + a7);
    v102 = v71;
    v80 = physx::Gu::intersectRayAABB((uint64_t)&v100, (uint64_t)&v111, (uint64_t)&v105, (uint64_t)&v109, &v104, (float *)&v103);
    if (v80 != -1 && v104 >= -0.00001 && v104 <= a8)
    {
      a8 = fmaxf(v104, 0.0);
      v82 = v81[1];
      v83 = v81[2];
      v84 = (float)((float)(*v81 * *((float *)a1 + 2)) + (float)(v82 * *((float *)a1 + 5)))
          + (float)(v83 * *((float *)a1 + 8));
      *(float32x2_t *)a5 = vadd_f32(vadd_f32(vmul_n_f32(*(float32x2_t *)a1, *v81), vmul_n_f32(*(float32x2_t *)((char *)a1 + 12), v82)), vmul_n_f32(*(float32x2_t *)((char *)a1 + 24), v83));
      a5[2] = v84;
      v69 = *((float *)a1 + 12);
      v68 = *((float *)a1 + 13);
      v70 = *((float *)a1 + 14);
      v79 = -v69;
      v16 = 1;
    }
    v111 = v69;
    v112 = v68;
    v113 = v70 + a7;
    v100 = v79;
    v101 = -v68;
    v102 = -(float)(v70 + a7);
    v85 = physx::Gu::intersectRayAABB((uint64_t)&v100, (uint64_t)&v111, (uint64_t)&v105, (uint64_t)&v109, &v104, (float *)&v103);
    if (v85 == -1 || v104 < -0.00001)
    {
      v86 = a4;
    }
    else
    {
      v86 = a4;
      if (v104 <= a8)
      {
        a8 = fmaxf(v104, 0.0);
        v88 = v87[1];
        v89 = v87[2];
        v90 = (float)((float)(*v87 * *((float *)a1 + 2)) + (float)(v88 * *((float *)a1 + 5)))
            + (float)(v89 * *((float *)a1 + 8));
        *(float32x2_t *)a5 = vadd_f32(vadd_f32(vmul_n_f32(*(float32x2_t *)a1, *v87), vmul_n_f32(*(float32x2_t *)((char *)a1 + 12), v88)), vmul_n_f32(*(float32x2_t *)((char *)a1 + 24), v89));
        a5[2] = v90;
        v16 = 1;
      }
    }
    *v86 = a8;
  }
  else
  {
    *a4 = 0.0;
    v15 = -a3[1].f32[0];
    *(float32x2_t *)a5 = vneg_f32(*a3);
    a5[2] = v15;
    v16 = 1;
  }
  return v16 & 1;
}

uint64_t physx::Gu::triBoxSweepTestBoxSpace(float *a1, float *a2, float *a3, float *a4, float *a5, char a6, float a7)
{
  float v7;
  float v8;
  float v9;
  float v10;
  float v11;
  float v12;
  float v13;
  float v14;
  float v15;
  float v16;
  float v17;
  float v18;
  float v19;
  float v20;
  float v21;
  float v22;
  float v23;
  float v24;
  float v25;
  float v26;
  float v27;
  float v28;
  float v29;
  float v30;
  float v31;
  float v32;
  float v33;
  float v34;
  float v35;
  float v36;
  float v37;
  _BOOL4 v38;
  float v39;
  float v40;
  float v41;
  float v42;
  float v43;
  float v44;
  float v46;
  float v47;
  float v48;
  float v49;
  float v50;
  _BOOL4 v51;
  float v52;
  float v53;
  float v54;
  float v56;
  float v57;
  float v58;
  float v59;
  float v60;
  float v61;
  _BOOL4 v62;
  float v63;
  float v64;
  float v65;
  float v66;
  float v68;
  float v69;
  float v70;
  float v71;
  float v72;
  float v73;
  _BOOL4 v74;
  float v75;
  float v76;
  float v77;
  float v78;
  uint64_t result;
  int v81;
  float v82;
  float *v83;
  uint64_t v84;
  uint64_t v85;
  float *v86;
  float v87;
  float v88;
  float v89;
  float v90;
  float v91;
  float v92;
  float v93;
  float v94;
  float v95;
  float v96;
  _BOOL4 v97;
  float v98;
  float v99;
  float v100;
  float v101;
  float v102;
  float v104;
  float v105;
  float v106;
  float v107;
  float v108;
  float v109;
  float v110;
  float v111;
  float v112;
  _BOOL4 v113;
  float v114;
  float v115;
  float v116;
  float v117;
  float v118;
  float v120;
  float v121;
  float v122;
  float v123;
  float v124;
  float v125;
  float v126;
  float v127;
  _BOOL4 v128;
  float v129;
  float v130;
  float v131;
  float v132;
  float v133;
  float v136;
  float v137;

  v7 = *a1;
  v8 = a1[1];
  v10 = a1[2];
  v9 = a1[3];
  v11 = v9 - *a1;
  v12 = a1[4];
  v13 = a1[5];
  v14 = a1[6];
  v15 = a1[7];
  v16 = v14 - *a1;
  v17 = a1[8];
  v18 = (float)((float)(v12 - v8) * (float)(v17 - v10)) - (float)((float)(v13 - v10) * (float)(v15 - v8));
  v19 = (float)((float)(v13 - v10) * v16) - (float)(v11 * (float)(v17 - v10));
  v20 = (float)(v11 * (float)(v15 - v8)) - (float)((float)(v12 - v8) * v16);
  v21 = *a3;
  v22 = a3[1];
  if ((a6 & 1) != 0)
  {
    v23 = a3[2];
    v24 = (float)((float)(v22 * v19) + (float)(v18 * v21)) + (float)(v20 * v23);
    if (v24 >= 0.0)
      return 0;
  }
  else
  {
    v23 = a3[2];
    v24 = (float)((float)(v22 * v19) + (float)(v21 * v18)) + (float)(v23 * v20);
  }
  v25 = (float)((float)(v8 * v19) + (float)(v7 * v18)) + (float)(v10 * v20);
  v26 = (float)((float)(v12 * v19) + (float)(v9 * v18)) + (float)(v13 * v20);
  v27 = (float)((float)(v15 * v19) + (float)(v14 * v18)) + (float)(v17 * v20);
  if (v25 >= v26)
    v28 = (float)((float)(v12 * v19) + (float)(v9 * v18)) + (float)(v13 * v20);
  else
    v28 = (float)((float)(v8 * v19) + (float)(v7 * v18)) + (float)(v10 * v20);
  if (v25 <= v26)
    v25 = (float)((float)(v12 * v19) + (float)(v9 * v18)) + (float)(v13 * v20);
  if (v28 >= v27)
    v28 = (float)((float)(v15 * v19) + (float)(v14 * v18)) + (float)(v17 * v20);
  if (v25 <= v27)
    v25 = (float)((float)(v15 * v19) + (float)(v14 * v18)) + (float)(v17 * v20);
  v29 = fabsf(v18);
  v30 = fabsf(v19);
  v31 = *a2;
  v32 = a2[1];
  v33 = (float)(v30 * v32) + (float)(v29 * *a2);
  v34 = fabsf(v20);
  v35 = a2[2];
  v36 = v33 + (float)(v34 * v35);
  v37 = (float)-v36 - v25;
  v38 = v37 <= 0.0;
  if ((float)(v36 - v28) < 0.0)
    v38 = 0;
  if (fabsf(v24) >= 0.000001)
  {
    v41 = -1.0 / v24;
    v42 = v41 * v37;
    v43 = v41 * (float)(v36 - v28);
    if (v42 >= v43)
      v44 = v41 * (float)(v36 - v28);
    else
      v44 = v42;
    if (v42 <= v43)
      v42 = v43;
    if (v44 > 3.4028e38 || v42 < -3.4028e38)
      return 0;
    v39 = fminf(v42, 3.4028e38);
    v40 = fmaxf(v44, -3.4028e38);
  }
  else
  {
    if (!v38)
      return 0;
    v39 = 3.4028e38;
    v40 = -3.4028e38;
  }
  if (v7 >= v9)
    v46 = a1[3];
  else
    v46 = *a1;
  if (v7 <= v9)
    v47 = a1[3];
  else
    v47 = *a1;
  if (v46 >= v14)
    v48 = a1[6];
  else
    v48 = v46;
  if (v47 <= v14)
    v49 = a1[6];
  else
    v49 = v47;
  v50 = (float)-v31 - v49;
  v51 = v50 <= 0.0;
  if ((float)(v31 - v48) < 0.0)
    v51 = 0;
  if (fabsf(v21) >= 0.000001)
  {
    v52 = -(float)(*a4 * v50);
    v53 = -(float)(*a4 * (float)(v31 - v48));
    if (v52 >= v53)
      v54 = -(float)(*a4 * (float)(v31 - v48));
    else
      v54 = -(float)(*a4 * v50);
    if (v52 > v53)
      v53 = v52;
    if (v54 > v39 || v53 < v40)
      return 0;
    if (v53 < v39)
      v39 = v53;
    if (v54 > v40)
      v40 = v54;
  }
  else if (!v51)
  {
    return 0;
  }
  if (v8 >= v12)
    v56 = a1[4];
  else
    v56 = a1[1];
  if (v8 <= v12)
    v57 = a1[4];
  else
    v57 = a1[1];
  if (v56 >= v15)
    v58 = a1[7];
  else
    v58 = v56;
  if (v57 <= v15)
    v59 = a1[7];
  else
    v59 = v57;
  v60 = (float)-v32 - v59;
  v61 = v32 - v58;
  v62 = v60 <= 0.0;
  if ((float)(v32 - v58) < 0.0)
    v62 = 0;
  if (fabsf(v22) >= 0.000001)
  {
    v63 = a4[1];
    v64 = -(float)(v63 * v60);
    v65 = -(float)(v63 * v61);
    if (v64 >= v65)
      v66 = v65;
    else
      v66 = -(float)(v63 * v60);
    if (v64 > v65)
      v65 = v64;
    if (v66 > v39 || v65 < v40)
      return 0;
    if (v65 < v39)
      v39 = v65;
    if (v66 > v40)
      v40 = v66;
  }
  else if (!v62)
  {
    return 0;
  }
  if (v10 >= v13)
    v68 = a1[5];
  else
    v68 = a1[2];
  if (v10 <= v13)
    v69 = a1[5];
  else
    v69 = a1[2];
  if (v68 >= v17)
    v70 = a1[8];
  else
    v70 = v68;
  if (v69 <= v17)
    v71 = a1[8];
  else
    v71 = v69;
  v72 = (float)-v35 - v71;
  v73 = v35 - v70;
  v74 = v72 <= 0.0;
  if ((float)(v35 - v70) < 0.0)
    v74 = 0;
  if (fabsf(v23) < 0.000001)
  {
    if (v74)
      goto LABEL_122;
    return 0;
  }
  v75 = a4[2];
  v76 = -(float)(v75 * v72);
  v77 = -(float)(v75 * v73);
  if (v76 >= v77)
    v78 = v77;
  else
    v78 = -(float)(v75 * v72);
  if (v76 > v77)
    v77 = v76;
  if (v78 > v39 || v77 < v40)
    return 0;
  if (v77 < v39)
    v39 = v77;
  if (v78 > v40)
    v40 = v78;
LABEL_122:
  v81 = v74 && v62 && v51 && v38;
  v136 = v12 * 0.0;
  v137 = v8 * 0.0;
  v83 = a1 + 2;
  v84 = -3;
  do
  {
    v85 = v84 + 4;
    if (v84 == -1)
      v85 = 0;
    v86 = &a1[3 * v85];
    v87 = *v86;
    v88 = v86[1] - *(v83 - 1);
    v89 = v86[2] - *v83;
    if ((float)((float)(v89 * v89) + (float)(v88 * v88)) >= 0.000001)
    {
      v90 = (float)((float)(v7 * 0.0) - (float)(v89 * v8)) + (float)(v10 * v88);
      v91 = (float)((float)(v9 * 0.0) - (float)(v89 * v12)) + (float)(v13 * v88);
      v92 = (float)((float)(v14 * 0.0) - (float)(v89 * v15)) + (float)(v17 * v88);
      if (v90 >= v91)
        v93 = (float)((float)(v9 * 0.0) - (float)(v89 * v12)) + (float)(v13 * v88);
      else
        v93 = (float)((float)(v7 * 0.0) - (float)(v89 * v8)) + (float)(v10 * v88);
      if (v90 <= v91)
        v90 = (float)((float)(v9 * 0.0) - (float)(v89 * v12)) + (float)(v13 * v88);
      if (v93 >= v92)
        v93 = (float)((float)(v14 * 0.0) - (float)(v89 * v15)) + (float)(v17 * v88);
      if (v90 <= v92)
        v90 = (float)((float)(v14 * 0.0) - (float)(v89 * v15)) + (float)(v17 * v88);
      v94 = (float)((float)(v32 * fabsf(v89)) + (float)(v31 * 0.0)) + (float)(fabsf(v88) * v35);
      v95 = (float)-v94 - v90;
      v96 = v94 - v93;
      v97 = v95 <= 0.0;
      if ((float)(v94 - v93) < 0.0)
        v97 = 0;
      v81 &= v97;
      v98 = (float)((float)(v21 * 0.0) - (float)(v89 * v22)) + (float)(v23 * v88);
      if (fabsf(v98) >= 0.000001)
      {
        v99 = (float)(-1.0 / v98) * v95;
        v100 = (float)(-1.0 / v98) * v96;
        if (v99 >= v100)
          v101 = (float)(-1.0 / v98) * v96;
        else
          v101 = (float)(-1.0 / v98) * v95;
        if (v99 <= v100)
          v102 = (float)(-1.0 / v98) * v96;
        else
          v102 = v99;
        if (v101 > v39 || v102 < v40)
          return 0;
        if (v102 < v39)
          v39 = v102;
        if (v101 > v40)
          v40 = v101;
      }
      else if (!v97)
      {
        return 0;
      }
    }
    v104 = v87 - *(v83 - 2);
    if ((float)((float)((float)(v89 * v89) + 0.0) + (float)(v104 * v104)) >= 0.000001)
    {
      v105 = (float)(v137 + (float)(v7 * v89)) - (float)(v10 * v104);
      v106 = (float)(v136 + (float)(v9 * v89)) - (float)(v13 * v104);
      v82 = v15 * 0.0;
      v107 = (float)((float)(v15 * 0.0) + (float)(v14 * v89)) - (float)(v17 * v104);
      if (v105 >= v106)
        v108 = (float)(v136 + (float)(v9 * v89)) - (float)(v13 * v104);
      else
        v108 = (float)(v137 + (float)(v7 * v89)) - (float)(v10 * v104);
      if (v105 <= v106)
        v105 = (float)(v136 + (float)(v9 * v89)) - (float)(v13 * v104);
      if (v108 >= v107)
        v109 = (float)(v82 + (float)(v14 * v89)) - (float)(v17 * v104);
      else
        v109 = v108;
      if (v105 <= v107)
        v105 = (float)(v82 + (float)(v14 * v89)) - (float)(v17 * v104);
      v110 = (float)((float)(v32 * 0.0) + (float)(fabsf(v89) * v31)) + (float)(fabsf(v104) * v35);
      v111 = (float)-v110 - v105;
      v112 = v110 - v109;
      v113 = v111 <= 0.0;
      if (v112 < 0.0)
        v113 = 0;
      v81 &= v113;
      v114 = (float)((float)(v22 * 0.0) + (float)(v21 * v89)) - (float)(v23 * v104);
      if (fabsf(v114) >= 0.000001)
      {
        v115 = (float)(-1.0 / v114) * v111;
        v116 = (float)(-1.0 / v114) * v112;
        if (v115 >= v116)
          v117 = (float)(-1.0 / v114) * v112;
        else
          v117 = (float)(-1.0 / v114) * v111;
        if (v115 <= v116)
          v118 = (float)(-1.0 / v114) * v112;
        else
          v118 = (float)(-1.0 / v114) * v111;
        if (v117 > v39 || v118 < v40)
          return 0;
        if (v118 < v39)
          v39 = v118;
        if (v117 > v40)
          v40 = v117;
      }
      else if (!v113)
      {
        return 0;
      }
    }
    if ((float)((float)(v104 * v104) + (float)(v88 * v88)) >= 0.000001)
    {
      v120 = (float)((float)(v8 * v104) - (float)(v7 * v88)) + (float)(v10 * 0.0);
      v121 = (float)((float)(v12 * v104) - (float)(v9 * v88)) + (float)(v13 * 0.0);
      v122 = (float)((float)(v15 * v104) - (float)(v14 * v88)) + (float)(v17 * 0.0);
      if (v120 >= v121)
        v123 = (float)((float)(v12 * v104) - (float)(v9 * v88)) + (float)(v13 * 0.0);
      else
        v123 = (float)((float)(v8 * v104) - (float)(v7 * v88)) + (float)(v10 * 0.0);
      if (v120 <= v121)
        v120 = (float)((float)(v12 * v104) - (float)(v9 * v88)) + (float)(v13 * 0.0);
      if (v123 >= v122)
        v124 = (float)((float)(v15 * v104) - (float)(v14 * v88)) + (float)(v17 * 0.0);
      else
        v124 = v123;
      if (v120 <= v122)
        v120 = (float)((float)(v15 * v104) - (float)(v14 * v88)) + (float)(v17 * 0.0);
      v125 = (float)((float)(v32 * fabsf(v104)) + (float)(fabsf(v88) * v31)) + (float)(v35 * 0.0);
      v126 = (float)-v125 - v120;
      v127 = v125 - v124;
      v128 = v126 <= 0.0;
      if (v127 < 0.0)
        v128 = 0;
      v81 &= v128;
      v129 = (float)((float)(v22 * v104) - (float)(v21 * v88)) + (float)(v23 * 0.0);
      if (fabsf(v129) >= 0.000001)
      {
        v130 = (float)(-1.0 / v129) * v126;
        v131 = (float)(-1.0 / v129) * v127;
        if (v130 >= v131)
          v132 = (float)(-1.0 / v129) * v127;
        else
          v132 = (float)(-1.0 / v129) * v126;
        if (v130 <= v131)
          v133 = (float)(-1.0 / v129) * v127;
        else
          v133 = (float)(-1.0 / v129) * v126;
        if (v132 > v39 || v133 < v40)
          return 0;
        if (v133 < v39)
          v39 = v133;
        if (v132 > v40)
          v40 = v132;
      }
      else if (!v128)
      {
        return 0;
      }
    }
    v83 += 3;
  }
  while (!__CFADD__(v84++, 1));
  result = 0;
  if (v40 <= a7 && v39 >= 0.0)
  {
    if (v40 > 0.0 || (v40 = 0.0, (_BYTE)v81))
    {
      *a5 = v40;
      return 1;
    }
    return 0;
  }
  return result;
}

uint64_t physx::Gu::sweepCapsuleBox(uint64_t a1, uint64_t a2, uint64_t a3, float32x2_t *a4, uint64_t a5, float *a6, uint64_t a7, _WORD *a8, int32x4_t a9)
{
  unsigned __int32 v12;
  float32x2_t v17;
  float32x2_t v18;
  float32x2_t v19;
  float32x2_t v21;
  float32x2_t v22;
  float32x2_t v23;
  float32x2_t v24;
  float32x2_t v25;
  float32x2_t v26;
  float32x2_t v27;
  float32x2_t v28;
  float32x2_t v29;
  float32x2_t v34;
  uint64_t v35;
  int32x2_t v36;
  __int128 v37;
  float v38;
  uint64_t v39;
  float v40;
  float v41;
  float v42;
  float v43;
  float v44;
  unsigned int v45;
  unsigned int v46;
  float v47;
  float *v48;
  int32x4_t v49;
  int32x4_t v50;
  float v51;
  float v52;
  float v53;
  float v54;
  float v55;
  float v56;
  float v57;
  float v58;
  float v59;
  float v60;
  float v61;
  float *v62;
  uint64_t v63;
  float *v64;
  float v65;
  float v66;
  float v67;
  float *v68;
  float *v69;
  float v70;
  float v71;
  float v72;
  float v73;
  float v74;
  float v75;
  float v76;
  float v77;
  float v78;
  float v79;
  float v80;
  float v81;
  float v82;
  float v83;
  float v84;
  float v85;
  float v86;
  float v87;
  float v88;
  float v89;
  float v90;
  float v91;
  uint64_t v92;
  float v93;
  float v94;
  float v95;
  float *v96;
  float *v97;
  float v98;
  float v99;
  float v100;
  float v101;
  float v102;
  float v103;
  float v104;
  float v105;
  float v106;
  float v107;
  float v108;
  float v109;
  float v110;
  float v111;
  float v112;
  float v113;
  float v114;
  float v115;
  float v116;
  float v117;
  float v118;
  float v119;
  float v120;
  float v121;
  float v122;
  float v123;
  float v124;
  float v125;
  float v126;
  float v127;
  float v128;
  float v129;
  float v130;
  BOOL v131;
  float v132;
  float v133;
  float v134;
  float v135;
  float v136;
  float v137;
  float v138;
  float v139;
  float v140;
  float v141;
  float v142;
  float32x2_t v143;
  char *v144;
  int v145;
  int32x4_t v147;
  __int32 v148;
  float v149;
  float *v150;
  char v151;
  float v152[84];
  unint64_t v153;
  float v154;
  __int32 v155;
  unsigned int v156;
  float v157;
  __int32 v158;
  __int32 v159;
  float v160;
  unsigned int v161;
  __int32 v162;
  float v163;
  unsigned int v164;
  unsigned int v165;
  __int32 v166;
  __int32 v167;
  unsigned int v168;
  int32x4_t v169;
  unsigned int v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  _QWORD v174[4];
  int v175;
  uint64_t v176;

  v12 = a9.u32[0];
  v176 = *MEMORY[0x24BDAC8D0];
  if ((*a8 & 0x10) != 0)
    goto LABEL_4;
  v17 = (float32x2_t)vdup_lane_s32(*(int32x2_t *)a2, 1);
  v18 = (float32x2_t)vdup_laneq_s32(*(int32x4_t *)a2, 2);
  v19 = (float32x2_t)vdup_laneq_s32(*(int32x4_t *)a2, 3);
  _Q4 = vaddq_f32(*(float32x4_t *)a2, *(float32x4_t *)a2);
  v21 = (float32x2_t)vdup_lane_s32((int32x2_t)vmul_f32(*(float32x2_t *)a2, *(float32x2_t *)_Q4.f32), 0);
  v22 = vmul_lane_f32(v17, *(float32x2_t *)_Q4.f32, 1);
  v23 = vmul_laneq_f32(v18, _Q4, 2);
  v24 = vmul_n_f32(v17, _Q4.f32[0]);
  v25 = vmul_n_f32(v18, _Q4.f32[0]);
  v26 = vmul_n_f32(v19, _Q4.f32[0]);
  v27 = vmul_lane_f32(v18, *(float32x2_t *)_Q4.f32, 1);
  v28 = vmul_lane_f32(v19, *(float32x2_t *)_Q4.f32, 1);
  v29 = vmul_laneq_f32(v19, _Q4, 2);
  __asm { FMOV            V4.2S, #1.0 }
  v34 = vsub_f32(*(float32x2_t *)_Q4.f32, v21);
  LODWORD(v35) = vsub_f32(v25, v28).u32[0];
  v36 = (int32x2_t)vadd_f32(v27, v26);
  *(int8x8_t *)&v37 = vext_s8((int8x8_t)vadd_f32(v25, v28), (int8x8_t)vsub_f32(v27, v26), 4uLL);
  *((_QWORD *)&v37 + 1) = vsub_f32(v34, v22).u32[0];
  *(float *)&v172 = (float)(1.0 - v22.f32[1]) - v23.f32[1];
  HIDWORD(v172) = vadd_f32(v24, v29).u32[0];
  HIDWORD(v35) = vsub_f32(v24, v29).i32[1];
  v173 = v35;
  v174[0] = vzip1_s32((int32x2_t)vsub_f32(v34, v23), v36);
  *(_OWORD *)&v174[1] = v37;
  physx::Gu::distanceSegmentBoxSquared((float *)a1, (float *)(a1 + 12), (float *)(a2 + 16), (float32x2_t *)a3, (float *)&v172, 0, 0);
  if (*(float *)a9.i32 >= (float)(*(float *)(a1 + 24) * *(float *)(a1 + 24)))
  {
LABEL_4:
    v149 = *(float *)&v12;
    v40 = *(float *)a1;
    v41 = *(float *)(a1 + 4);
    v42 = *(float *)(a1 + 16);
    v43 = *(float *)(a1 + 12);
    v44 = *(float *)(a1 + 20) - *(float *)(a1 + 8);
    v148 = *(_DWORD *)a3;
    *(float *)&v45 = -*(float *)a3;
    v151 = 1;
    a9.i64[0] = *(_QWORD *)(a3 + 4);
    v147 = a9;
    *(float *)&v46 = -*(float *)a9.i32;
    v47 = -*(float *)&a9.i32[1];
    v48 = (float *)physx::shdfnd::TempAllocator::allocate((physx::shdfnd::TempAllocator *)&v172, 3024, "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/common/src/../../geomutils/src/sweep/GuSweepCapsuleBox.cpp", 198);
    v150 = v48;
    v153 = __PAIR64__(v46, v45);
    v154 = v47;
    v155 = v148;
    v156 = v46;
    v157 = v47;
    v158 = v148;
    v159 = v147.i32[0];
    v160 = v47;
    v161 = v45;
    v162 = v147.i32[0];
    v163 = v47;
    v166 = v147.i32[1];
    v164 = v45;
    v165 = v46;
    v167 = v148;
    v168 = v46;
    v49 = vuzp2q_s32(v147, vzip1q_s32(v147, v147));
    v50 = v49;
    v50.i32[1] = v148;
    v50.i32[3] = v49.i32[0];
    v169 = v50;
    v170 = v45;
    v171 = v147.i64[0];
    v52 = *(float *)(a2 + 8);
    v51 = *(float *)(a2 + 12);
    v53 = (float)(v51 * v51) + -0.5;
    v54 = *(float *)a2;
    v55 = *(float *)(a2 + 4);
    v56 = -v52;
    v57 = -*(float *)a2;
    v58 = -v55;
    v59 = *(float *)(a2 + 16);
    v60 = *(float *)(a2 + 20);
    v61 = *(float *)(a2 + 24);
    v62 = (float *)v174;
    v63 = 2u;
    do
    {
      v65 = *v64;
      v66 = v64[1];
      v67 = v64[2];
      v70 = v65 + v65;
      v71 = v66 + v66;
      v72 = v67 + v67;
      v73 = (float)((float)(v55 * v71) + (float)(v54 * v70)) + (float)(v52 * v72);
      v74 = (float)(v51 * (float)((float)(v71 * v56) + (float)(v55 * v72))) + (float)(v70 * v53);
      v75 = (float)(v51 * (float)((float)(v72 * v57) + (float)(v52 * v70))) + (float)(v71 * v53);
      v76 = v51 * (float)((float)(v70 * v58) + (float)(v54 * v71));
      v77 = v74 + (float)(v54 * v73);
      v78 = v76 + (float)(v72 * v53);
      v79 = *v68 + *v68;
      v80 = v68[1] + v68[1];
      v81 = v68[2] + v68[2];
      v82 = v75 + (float)(v55 * v73);
      v83 = (float)((float)(v55 * v80) + (float)(v54 * v79)) + (float)(v52 * v81);
      v84 = v78 + (float)(v52 * v73);
      v85 = (float)((float)(v51 * (float)((float)(v80 * v56) + (float)(v55 * v81))) + (float)(v79 * v53))
          + (float)(v54 * v83);
      v86 = (float)((float)(v51 * (float)((float)(v81 * v57) + (float)(v52 * v79))) + (float)(v80 * v53))
          + (float)(v55 * v83);
      v87 = (float)((float)(v51 * (float)((float)(v79 * v58) + (float)(v54 * v80))) + (float)(v81 * v53))
          + (float)(v52 * v83);
      v88 = *v69 + *v69;
      v89 = v69[1] + v69[1];
      v90 = v69[2] + v69[2];
      v91 = (float)((float)(v55 * v89) + (float)(v54 * v88)) + (float)(v52 * v90);
      *(v62 - 4) = v59 + v77;
      *(v62 - 3) = v60 + v82;
      *(v62 - 2) = v61 + v84;
      *(v62 - 1) = v59 + v85;
      *v62 = v60 + v86;
      v62[1] = v61 + v87;
      v62[2] = v59
             + (float)((float)((float)(v51 * (float)((float)(v89 * v56) + (float)(v55 * v90))) + (float)(v88 * v53))
                     + (float)(v54 * v91));
      v62[3] = v60
             + (float)((float)((float)(v51 * (float)((float)(v90 * v57) + (float)(v52 * v88))) + (float)(v89 * v53))
                     + (float)(v55 * v91));
      v62[4] = v61
             + (float)((float)((float)(v51 * (float)((float)(v88 * v58) + (float)(v54 * v89))) + (float)(v90 * v53))
                     + (float)(v52 * v91));
      v63 += 3;
      v62 += 9;
    }
    while (v63 != 38);
    v92 = 0;
    v93 = (float)(v42 - v41) * 0.5;
    v94 = (float)(v43 - v40) * 0.5;
    v95 = v44 * 0.5;
    v96 = (float *)v174;
    v97 = v152;
    v98 = v149;
    do
    {
      v99 = *(v96 - 4);
      v100 = *(v96 - 3);
      v101 = *(v96 - 2);
      v102 = *(v96 - 1);
      v103 = *v96;
      v104 = v96[1];
      v105 = *v96 - v100;
      v106 = v96[2];
      v107 = v96[3];
      v108 = v96[4];
      v109 = (float)(v105 * (float)(v108 - v101)) - (float)((float)(v104 - v101) * (float)(v107 - v100));
      v110 = (float)((float)(v104 - v101) * (float)(v106 - v99)) - (float)((float)(v102 - v99) * (float)(v108 - v101));
      v111 = (float)((float)(v102 - v99) * (float)(v107 - v100)) - (float)(v105 * (float)(v106 - v99));
      if ((float)((float)((float)(a4->f32[1] * v110) + (float)(v109 * a4->f32[0])) + (float)(v111 * a4[1].f32[0])) <= 0.0)
      {
        v112 = v94 + v99;
        v113 = v93 + v100;
        v114 = v95 + v101;
        v115 = v94 + v102;
        v116 = v93 + v103;
        v117 = v95 + v104;
        v118 = v94 + v106;
        v119 = v93 + v107;
        v120 = v95 + v108;
        v121 = v99 - v94;
        v122 = v100 - v93;
        v123 = v101 - v95;
        v124 = v102 - v94;
        v125 = v103 - v93;
        v126 = v104 - v95;
        v127 = v106 - v94;
        v128 = v107 - v93;
        v129 = v108 - v95;
        v130 = (float)((float)(v93 * v110) + (float)(v109 * v94)) + (float)(v111 * v95);
        v131 = v130 < 0.0;
        if (v130 < 0.0)
          v132 = v121;
        else
          v132 = v112;
        if (v131)
          v133 = v122;
        else
          v133 = v113;
        if (v131)
          v134 = v123;
        else
          v134 = v114;
        if (v131)
          v135 = v124;
        else
          v135 = v115;
        if (v131)
          v136 = v125;
        else
          v136 = v116;
        if (v131)
          v137 = v126;
        else
          v137 = v117;
        if (v131)
          v138 = v127;
        else
          v138 = v118;
        if (v131)
          v139 = v128;
        else
          v139 = v119;
        if (v131)
          v140 = v129;
        else
          v140 = v120;
        *v48 = v132;
        v48[1] = v133;
        v48[2] = v134;
        v48[3] = v135;
        v48[4] = v136;
        v48[5] = v137;
        v48[6] = v138;
        v48[7] = v139;
        v48[8] = v140;
        *(_DWORD *)v97 = v92;
        v48[9] = v124;
        v48[10] = v125;
        v48[11] = v126;
        v48[12] = v115;
        v48[13] = v116;
        v48[14] = v117;
        v48[15] = v118;
        v48[16] = v119;
        v48[17] = v120;
        if ((float)((float)((float)((float)((float)((float)(v117 - v126) * (float)(v118 - v124))
                                           - (float)((float)(v115 - v124) * (float)(v120 - v126)))
                                   * a4->f32[1])
                           + (float)((float)((float)((float)(v116 - v125) * (float)(v120 - v126))
                                           - (float)((float)(v117 - v126) * (float)(v119 - v125)))
                                   * a4->f32[0]))
                   + (float)((float)((float)((float)(v115 - v124) * (float)(v119 - v125))
                                   - (float)((float)(v116 - v125) * (float)(v118 - v124)))
                           * a4[1].f32[0])) > 0.0)
        {
          v48[12] = v118;
          v48[13] = v119;
          v48[14] = v120;
          v48[15] = v115;
          v48[16] = v116;
          v48[17] = v117;
        }
        *((_DWORD *)v97 + 1) = v92;
        v48[18] = v124;
        v48[19] = v125;
        v48[20] = v126;
        v48[21] = v118;
        v48[22] = v119;
        v48[23] = v120;
        v48[24] = v127;
        v48[25] = v128;
        v48[26] = v129;
        if ((float)((float)((float)((float)((float)((float)(v120 - v126) * (float)(v127 - v124))
                                           - (float)((float)(v118 - v124) * (float)(v129 - v126)))
                                   * a4->f32[1])
                           + (float)((float)((float)((float)(v119 - v125) * (float)(v129 - v126))
                                           - (float)((float)(v120 - v126) * (float)(v128 - v125)))
                                   * a4->f32[0]))
                   + (float)((float)((float)((float)(v118 - v124) * (float)(v128 - v125))
                                   - (float)((float)(v119 - v125) * (float)(v127 - v124)))
                           * a4[1].f32[0])) > 0.0)
        {
          v48[21] = v127;
          v48[22] = v128;
          v48[23] = v129;
          v48[24] = v118;
          v48[25] = v119;
          v48[26] = v120;
        }
        *((_DWORD *)v97 + 2) = v92;
        v48[27] = v121;
        v48[28] = v122;
        v48[29] = v123;
        v48[30] = v127;
        v48[31] = v128;
        v48[32] = v129;
        v48[33] = v118;
        v48[34] = v119;
        v48[35] = v120;
        if ((float)((float)((float)((float)((float)((float)(v129 - v123) * (float)(v118 - v121))
                                           - (float)((float)(v127 - v121) * (float)(v120 - v123)))
                                   * a4->f32[1])
                           + (float)((float)((float)((float)(v128 - v122) * (float)(v120 - v123))
                                           - (float)((float)(v129 - v123) * (float)(v119 - v122)))
                                   * a4->f32[0]))
                   + (float)((float)((float)((float)(v127 - v121) * (float)(v119 - v122))
                                   - (float)((float)(v128 - v122) * (float)(v118 - v121)))
                           * a4[1].f32[0])) > 0.0)
        {
          v48[30] = v118;
          v48[31] = v119;
          v48[32] = v120;
          v48[33] = v127;
          v48[34] = v128;
          v48[35] = v129;
        }
        *((_DWORD *)v97 + 3) = v92;
        v48[36] = v121;
        v48[37] = v122;
        v48[38] = v123;
        v48[39] = v118;
        v48[40] = v119;
        v48[41] = v120;
        v48[42] = v112;
        v48[43] = v113;
        v48[44] = v114;
        if ((float)((float)((float)((float)((float)((float)(v120 - v123) * (float)(v112 - v121))
                                           - (float)((float)(v118 - v121) * (float)(v114 - v123)))
                                   * a4->f32[1])
                           + (float)((float)((float)((float)(v119 - v122) * (float)(v114 - v123))
                                           - (float)((float)(v120 - v123) * (float)(v113 - v122)))
                                   * a4->f32[0]))
                   + (float)((float)((float)((float)(v118 - v121) * (float)(v113 - v122))
                                   - (float)((float)(v119 - v122) * (float)(v112 - v121)))
                           * a4[1].f32[0])) > 0.0)
        {
          v48[39] = v112;
          v48[40] = v113;
          v48[41] = v114;
          v48[42] = v118;
          v48[43] = v119;
          v48[44] = v120;
        }
        *((_DWORD *)v97 + 4) = v92;
        v48[45] = v112;
        v48[46] = v113;
        v48[47] = v114;
        v48[48] = v115;
        v48[49] = v116;
        v48[50] = v117;
        v48[51] = v124;
        v48[52] = v125;
        v48[53] = v126;
        if ((float)((float)((float)((float)((float)((float)(v117 - v114) * (float)(v124 - v112))
                                           - (float)((float)(v115 - v112) * (float)(v126 - v114)))
                                   * a4->f32[1])
                           + (float)((float)((float)((float)(v116 - v113) * (float)(v126 - v114))
                                           - (float)((float)(v117 - v114) * (float)(v125 - v113)))
                                   * a4->f32[0]))
                   + (float)((float)((float)((float)(v115 - v112) * (float)(v125 - v113))
                                   - (float)((float)(v116 - v113) * (float)(v124 - v112)))
                           * a4[1].f32[0])) > 0.0)
        {
          v48[48] = v124;
          v48[49] = v125;
          v48[50] = v126;
          v48[51] = v115;
          v48[52] = v116;
          v48[53] = v117;
        }
        *((_DWORD *)v97 + 5) = v92;
        v48[54] = v112;
        v48[55] = v113;
        v48[56] = v114;
        v48[57] = v124;
        v48[58] = v125;
        v48[59] = v126;
        v48[60] = v121;
        v48[61] = v122;
        v48[62] = v123;
        if ((float)((float)((float)((float)((float)((float)(v126 - v114) * (float)(v121 - v112))
                                           - (float)((float)(v124 - v112) * (float)(v123 - v114)))
                                   * a4->f32[1])
                           + (float)((float)((float)((float)(v125 - v113) * (float)(v123 - v114))
                                           - (float)((float)(v126 - v114) * (float)(v122 - v113)))
                                   * a4->f32[0]))
                   + (float)((float)((float)((float)(v124 - v112) * (float)(v122 - v113))
                                   - (float)((float)(v125 - v113) * (float)(v121 - v112)))
                           * a4[1].f32[0])) > 0.0)
        {
          v48[57] = v121;
          v48[58] = v122;
          v48[59] = v123;
          v48[60] = v124;
          v48[61] = v125;
          v48[62] = v126;
        }
        v48 += 63;
        *((_DWORD *)v97 + 6) = v92;
        v97 += 7;
      }
      ++v92;
      v96 += 9;
    }
    while (v92 != 12);
    v141 = *(float *)(a1 + 24);
    v142 = (float)(*(float *)(a1 + 8) + *(float *)(a1 + 20)) * 0.5;
    v143 = vmul_f32(vadd_f32(*(float32x2_t *)a1, *(float32x2_t *)(a1 + 12)), (float32x2_t)0x3F0000003F000000);
    v172 = 0;
    v173 = 0;
    LODWORD(v174[0]) = -1;
    WORD2(v174[0]) = 0;
    memset(&v174[1], 0, 24);
    v175 = 2139095039;
    v144 = (char *)v150;
    v153 = (unint64_t)v143;
    v154 = v142;
    v39 = physx::Gu::sweepSphereTriangles((unint64_t)((char *)v97 - (char *)v152) >> 2, (uint64_t)v150, (float32x2_t *)&v153, a4, 0, (uint64_t)&v172, v152, 0, v141, v149, 0, 0, 0);
    if ((_DWORD)v39)
    {
      *(_QWORD *)a5 = v174[1];
      v145 = HIDWORD(v174[3]);
      *(_DWORD *)(a5 + 8) = v174[2];
      v98 = *(float *)&v175;
      *(_QWORD *)a7 = *(_QWORD *)((char *)&v174[2] + 4);
      *(_DWORD *)(a7 + 8) = v145;
    }
    if (v151)
      physx::shdfnd::TempAllocator::deallocate((physx::shdfnd::TempAllocator *)&v150, v144);
    *a6 = v98;
  }
  else
  {
    *a6 = 0.0;
    v38 = -a4[1].f32[0];
    *(float32x2_t *)a7 = vneg_f32(*a4);
    *(float *)(a7 + 8) = v38;
    return 1;
  }
  return v39;
}

uint64_t physx::Gu::sweepCapsuleCapsule(uint64_t a1, float32x2_t *a2, float32x2_t *a3, float *a4, float32x2_t *a5, float32x2_t *a6, char a7, __int16 *a8, float a9)
{
  float v18;
  float v19;
  float v20;
  float v21;
  float v22;
  float v23;
  float v24;
  float v25;
  float v26;
  float v27;
  float v28;
  float v29;
  float v30;
  float v31;
  float v32;
  float v33;
  float v34;
  float v35;
  float v36;
  float v37;
  float v38;
  float v39;
  float v40;
  float v41;
  float v42;
  float v43;
  float v44;
  float v45;
  float v46;
  float v47;
  float32_t v48;
  float v49;
  float32_t v50;
  float v51;
  float v52;
  float v53;
  float v54;
  float v55;
  float v56;
  float v57;
  float v58;
  float v59;
  float v60;
  float v61;
  float v62;
  float v63;
  float v64;
  float v65;
  float v66;
  float v67;
  float v68;
  float v69;
  float v70;
  float v71;
  float v72;
  float v73;
  float v74;
  float v75;
  float v76;
  float v77;
  float v78;
  float v79;
  float v80;
  float v81;
  float v82;
  float v83;
  float v84;
  float v85;
  float v86;
  float v87;
  float v88;
  float v89;
  float v90;
  float v91;
  float v92;
  float v93;
  float v94;
  float v95;
  float v96;
  float v97;
  float v98;
  float v99;
  float v100;
  float v101;
  float v102;
  float v103;
  float v104;
  float v105;
  float v106;
  float v107;
  float v108;
  float v109;
  float v110;
  float v111;
  float v112;
  float v113;
  BOOL v114;
  float v115;
  float v116;
  float v117;
  float v118;
  BOOL v119;
  float v120;
  unint64_t v122;
  char v123;
  float *v124;
  float v125;
  float v126;
  float v127;
  float v128;
  float v129;
  float v130;
  float v131;
  float v132;
  float v133;
  float v134;
  float v135;
  float v136;
  float v137;
  float v138;
  float v139;
  float v140;
  float32_t v141;
  float v142;
  int v143;
  _BOOL4 v144;
  float v145;
  int v147;
  float v148;
  float v149;
  float32x2_t v150;
  __int16 v152;
  float32x2_t v154;
  float v155;
  float v156;
  float v158;
  float v159;
  float v163;
  float v164;
  float32x2_t v165;
  float v166;
  float v167;
  float v168;
  float v169;
  float v170;
  float v171;
  float v172;
  float v173;
  float v174;
  float v175;
  float v176;
  float v177;
  float v178;
  float32x2_t v179;
  float v180;
  float32x2_t v181;
  float v182;
  float32x2_t v183;
  float v184;
  float32x2_t v185;
  float v186;
  float32x2_t v187;
  float v188;
  unint64_t v189;
  float v190;
  _BYTE v191[12];
  float v192;
  float v193;
  _DWORD v194[23];
  uint64_t v195;

  v195 = *MEMORY[0x24BDAC8D0];
  v18 = *(float *)(a1 + 24) + a2[3].f32[0];
  v19 = *(float *)a1;
  if ((a7 & 0x10) != 0)
    goto LABEL_22;
  v20 = *(float *)(a1 + 12);
  if (v19 == v20)
  {
    v21 = *(float *)(a1 + 4);
    if (v21 == *(float *)(a1 + 16))
    {
      v22 = *(float *)(a1 + 8);
      if (v22 == *(float *)(a1 + 20))
      {
        v23 = a2->f32[1];
        v24 = a2[1].f32[0];
        v25 = a2[1].f32[1] - a2->f32[0];
        v26 = a2[2].f32[1];
        v27 = a2[2].f32[0] - v23;
        v28 = v26 - v24;
        v29 = v19 - a2->f32[0];
        v30 = v21 - v23;
        v31 = v22 - v24;
        v32 = (float)((float)(v27 * v30) + (float)(v29 * v25)) + (float)((float)(v22 - v24) * (float)(v26 - v24));
        if (v32 > 0.0)
        {
          v33 = (float)((float)(v27 * v27) + (float)(v25 * v25)) + (float)(v28 * v28);
          if (v32 < v33)
          {
            v34 = v32 / v33;
            v25 = v25 * v34;
            v27 = v27 * v34;
            v28 = v28 * v34;
          }
          v29 = v29 - v25;
          v30 = v30 - v27;
          v31 = v31 - v28;
        }
        goto LABEL_16;
      }
    }
  }
  v35 = a2->f32[0];
  v36 = a2[1].f32[1];
  if (a2->f32[0] == v36)
  {
    v37 = a2->f32[1];
    v38 = a2[2].f32[0];
    if (v37 == v38)
    {
      v39 = a2[1].f32[0];
      if (v39 == a2[2].f32[1])
      {
        v40 = v20 - v19;
        v41 = *(float *)(a1 + 4);
        v42 = *(float *)(a1 + 8);
        v43 = *(float *)(a1 + 16) - v41;
        v44 = *(float *)(a1 + 20) - v42;
        v29 = v35 - v19;
        v30 = v37 - v41;
        v31 = v39 - v42;
        v45 = (float)((float)(v43 * v30) + (float)(v29 * v40)) + (float)((float)(v39 - v42) * v44);
        if (v45 > 0.0)
        {
          v46 = (float)((float)(v43 * v43) + (float)(v40 * v40)) + (float)(v44 * v44);
          if (v45 < v46)
          {
            v47 = v45 / v46;
            v40 = v40 * v47;
            v43 = v43 * v47;
            v44 = v44 * v47;
          }
          v29 = v29 - v40;
          v30 = v30 - v43;
          v31 = v31 - v44;
        }
LABEL_16:
        if ((float)((float)((float)(v30 * v30) + (float)(v29 * v29)) + (float)(v31 * v31)) >= (float)(v18 * v18))
          goto LABEL_22;
LABEL_20:
        *a4 = 0.0;
        v50 = -a3[1].f32[0];
        *a6 = vneg_f32(*a3);
        a6[1].f32[0] = v50;
        *a8 = 2;
        return 1;
      }
    }
  }
  else
  {
    v38 = a2[2].f32[0];
    v37 = a2->f32[1];
  }
  *(float *)v191 = v20 - v19;
  *(float32x2_t *)&v191[4] = vsub_f32(*(float32x2_t *)(a1 + 16), *(float32x2_t *)(a1 + 4));
  v48 = v36 - v35;
  v49 = a2[2].f32[1] - a2[1].f32[0];
  v187.f32[0] = v48;
  v187.f32[1] = v38 - v37;
  v188 = v49;
  if (physx::Gu::distanceSegmentSegmentSquared((float *)a1, (float *)v191, (float *)a2, (float *)&v187, 0, 0) < (float)(v18 * v18))
    goto LABEL_20;
  v19 = *(float *)a1;
LABEL_22:
  v52 = a2[1].f32[0];
  v51 = a2[1].f32[1];
  v54 = a2[2].f32[0];
  v53 = a2[2].f32[1];
  v178 = a2->f32[1];
  v174 = v54 - v178;
  v175 = v51 - a2->f32[0];
  v55 = (float)(v54 - v178) * 0.5;
  v56 = (float)(v53 - v52) * 0.5;
  v57 = *(float *)(a1 + 4);
  v58 = *(float *)(a1 + 8);
  v60 = *(float *)(a1 + 12);
  v59 = *(float *)(a1 + 16);
  v61 = *(float *)(a1 + 20);
  v62 = v19 + (float)(v175 * 0.5);
  v63 = v55 + v59;
  v64 = v60 - (float)(v175 * 0.5);
  v65 = v59 - v55;
  v66 = v61 - v56;
  v67 = v55 + v57;
  v68 = (float)(v175 * 0.5) + v60;
  v69 = v56 + v61;
  v70 = v63 - (float)(v55 + v57);
  v71 = (float)(v56 + v61) - (float)(v56 + v58);
  v72 = v65 - (float)(v55 + v57);
  v176 = v56 + v58;
  v73 = (float)(v61 - v56) - (float)(v56 + v58);
  v74 = (float)(v70 * v73) - (float)(v71 * v72);
  v75 = (float)(v71 * (float)(v64 - v62)) - (float)((float)(v68 - v62) * v73);
  v76 = (float)((float)(v68 - v62) * v72) - (float)(v70 * (float)(v64 - v62));
  v77 = sqrtf((float)((float)(v75 * v75) + (float)(v74 * v74)) + (float)(v76 * v76));
  if (v77 > 0.0)
  {
    v78 = 1.0 / v77;
    v74 = v74 * v78;
    v75 = v75 * v78;
    v76 = v76 * v78;
  }
  v173 = v53 - v52;
  v79 = v19 - (float)(v175 * 0.5);
  v80 = v57 - v55;
  v81 = v58 - v56;
  v82 = a3->f32[0];
  v83 = a3->f32[1];
  v84 = a3[1].f32[0];
  v85 = v18 * v74;
  v86 = v18 * v75;
  v177 = v18;
  v87 = v18 * v76;
  if ((float)((float)((float)(v75 * v83) + (float)(v74 * a3->f32[0])) + (float)(v76 * v84)) >= 0.0)
  {
    v94 = v79 - v85;
    v95 = v80 - v86;
    v96 = v81 - v87;
    v91 = v64 - v85;
    v92 = v65 - v86;
    v93 = v66 - v87;
    v88 = v68 - v85;
    v89 = v63 - v86;
    v90 = v69 - v87;
  }
  else
  {
    v88 = v79 + v85;
    v89 = v80 + v86;
    v90 = v81 + v87;
    v91 = v64 + v85;
    v92 = v65 + v86;
    v93 = v66 + v87;
    v94 = v68 + v85;
    v95 = v63 + v86;
    v96 = v69 + v87;
  }
  v97 = (float)(v51 + a2->f32[0]) * 0.5;
  v98 = (float)(v54 + v178) * 0.5;
  v99 = (float)(v53 + v52) * 0.5;
  v100 = v88 - v91;
  v101 = v89 - v92;
  v102 = v90 - v93;
  v103 = v94 - v91;
  v104 = v95 - v92;
  v105 = v96 - v93;
  v106 = (float)(v83 * (float)(v96 - v93)) - (float)(v84 * (float)(v95 - v92));
  v107 = (float)(v84 * v103) - (float)(v82 * (float)(v96 - v93));
  v108 = (float)(v82 * v104) - (float)(v83 * v103);
  v109 = (float)((float)(v101 * v107) + (float)(v100 * v106)) + (float)(v102 * v108);
  if (v109 < 0.00001)
    goto LABEL_86;
  v110 = v97 - v91;
  v111 = v98 - v92;
  v112 = v99 - v93;
  v113 = (float)((float)(v111 * v107) + (float)(v110 * v106)) + (float)(v112 * v108);
  v114 = v113 >= 0.0 && v113 <= v109;
  if (!v114
    || ((v115 = (float)(v111 * v102) - (float)(v112 * v101),
         v116 = (float)(v112 * v100) - (float)(v110 * v102),
         v117 = (float)(v110 * v101) - (float)(v111 * v100),
         v118 = (float)((float)(v83 * v116) + (float)(v82 * v115)) + (float)(v84 * v117),
         v118 >= 0.0)
      ? (v119 = v118 <= v109)
      : (v119 = 0),
        !v119
     || ((v120 = (float)((float)((float)(v104 * v116) + (float)(v103 * v115)) + (float)(v105 * v117))
               * (float)(1.0 / v109),
          v120 >= 0.0)
       ? (_NF = v120 < a9)
       : (_NF = 0),
         !_NF)))
  {
LABEL_86:
    v122 = 0;
    v123 = 0;
    *(float *)v191 = v79;
    *(float *)&v191[4] = v80;
    *(float *)&v191[8] = v81;
    v192 = v64;
    v193 = v65;
    *(float *)v194 = v66;
    *(float *)&v194[1] = v177;
    *(float *)&v194[2] = v64;
    *(float *)&v194[3] = v65;
    *(float *)&v194[4] = v66;
    *(float *)&v194[5] = v68;
    *(float *)&v194[6] = v63;
    *(float *)&v194[7] = v69;
    *(float *)&v194[8] = v177;
    *(float *)&v194[9] = v68;
    *(float *)&v194[10] = v63;
    *(float *)&v194[11] = v69;
    *(float *)&v194[12] = v62;
    *(float *)&v194[13] = v67;
    *(float *)&v194[14] = v176;
    *(float *)&v194[15] = v177;
    *(float *)&v194[16] = v79;
    *(float *)&v194[17] = v80;
    *(float *)&v194[18] = v81;
    *(float *)&v194[19] = v62;
    *(float *)&v194[20] = v67;
    *(float *)&v194[21] = v176;
    *(float *)&v194[22] = v177;
    do
    {
      v124 = (float *)&v191[v122];
      v125 = *(float *)&v191[v122];
      v126 = *(float *)&v191[v122 + 4];
      v127 = *(float *)&v191[v122 + 12] - v125;
      v128 = *(float *)&v194[v122 / 4 - 1] - v126;
      v129 = *(float *)&v191[v122 + 8];
      v130 = *(float *)&v194[v122 / 4] - v129;
      v131 = v97 - v125;
      v132 = v98 - v126;
      v133 = v99 - v129;
      v134 = (float)((float)(v132 * v128) + (float)(v131 * v127)) + (float)((float)(v99 - v129) * v130);
      if (v134 > 0.0)
      {
        v135 = (float)((float)(v128 * v128) + (float)(v127 * v127)) + (float)(v130 * v130);
        if (v134 < v135)
        {
          v136 = v134 / v135;
          v127 = v127 * v136;
          v128 = v128 * v136;
          v130 = v130 * v136;
        }
        v131 = v131 - v127;
        v132 = v132 - v128;
        v133 = v133 - v130;
      }
      v137 = v124[6];
      v138 = sqrtf((float)((float)(v132 * v132) + (float)(v131 * v131)) + (float)(v133 * v133)) - v137;
      if (v138 <= 0.0)
      {
        v144 = 1;
        v139 = 0.0;
      }
      else
      {
        v139 = 0.0;
        if (v138 <= 10.0)
          v140 = 0.0;
        else
          v140 = v138 + -10.0;
        v141 = v98 + (float)(v140 * a3->f32[1]);
        v142 = v99 + (float)(v140 * a3[1].f32[0]);
        v187.f32[0] = v97 + (float)(v140 * a3->f32[0]);
        v187.f32[1] = v141;
        v188 = v142;
        physx::Gu::intersectRayCapsuleInternal(&v187, a3, v124, (float *)&v191[v122 + 12], (float *)&v189, v137);
        v144 = v143 != 0;
        if (v143)
        {
          v145 = *(float *)&v189;
          if (*(float *)&v189 >= *((float *)&v189 + 1) && v143 != 1)
            v145 = *((float *)&v189 + 1);
          v139 = v140 + v145;
        }
      }
      v147 = !v144;
      if (v139 < 0.0)
        v147 = 1;
      if (v139 > a9)
        v147 = 1;
      if (!v147)
        a9 = v139;
      v123 |= v147 ^ 1;
      v122 += 28;
    }
    while (v122 != 112);
    v120 = a9;
    if ((v123 & 1) == 0)
      return 0;
  }
  *a8 = 0;
  if ((a7 & 3) != 0)
  {
    v148 = v120 * a3[1].f32[0];
    *(float *)&v191[8] = *(float *)(a1 + 8) - v148;
    v149 = (float)(*(float *)(a1 + 20) - v148) - *(float *)&v191[8];
    v150 = vmul_n_f32(*a3, v120);
    *(float32x2_t *)v191 = vsub_f32(*(float32x2_t *)a1, v150);
    v179 = vsub_f32(vsub_f32(*(float32x2_t *)(a1 + 12), v150), *(float32x2_t *)v191);
    v180 = v120;
    v187 = v179;
    _S9 = v175;
    v188 = v149;
    v189 = __PAIR64__(LODWORD(v174), LODWORD(v175));
    v190 = v173;
    edgeEdgeDist((float *)&v185, &v183, (float *)v191, (float *)&v187, a2, (float32x2_t *)&v189);
    if ((a7 & 2) != 0)
    {
      v154 = vsub_f32(v185, v183);
      v155 = v186 - v184;
      *a6 = v154;
      a6[1].f32[0] = v155;
      v156 = sqrtf(vmlas_n_f32(COERCE_FLOAT(vmul_f32(v154, v154).i32[1]), v154.f32[0], v154.f32[0]) + (float)(v155 * v155));
      if (v156 > 0.0)
      {
        *a6 = vmul_n_f32(v154, 1.0 / v156);
        a6[1].f32[0] = v155 * (float)(1.0 / v156);
      }
      if (v156 < 0.001)
      {
        _V4.S[1] = v179.i32[1];
        v158 = vmuls_lane_f32(-v173, v179, 1) + (float)(v174 * v149);
        v159 = vmlas_n_f32(-(float)(v175 * v149), v173, v179.f32[0]);
        __asm { FMLA            S3, S9, V4.S[1] }
        a6->f32[0] = v158;
        a6->f32[1] = v159;
        a6[1].f32[0] = _S3;
        v163 = sqrtf((float)((float)(v159 * v159) + (float)(v158 * v158)) + (float)(_S3 * _S3));
        if (v163 > 0.0)
        {
          a6->f32[0] = v158 * (float)(1.0 / v163);
          a6->f32[1] = v159 * (float)(1.0 / v163);
          a6[1].f32[0] = _S3 * (float)(1.0 / v163);
        }
        if (v163 < 0.001)
        {
          v164 = *(float *)(a1 + 20) - *(float *)(a1 + 8);
          v181 = vsub_f32(*(float32x2_t *)(a1 + 12), *(float32x2_t *)a1);
          v182 = v164;
          edgeEdgeDist((float *)&v185, &v183, (float *)a1, (float *)&v181, a2, (float32x2_t *)&v189);
          v165 = vsub_f32(v185, v183);
          v166 = v186 - v184;
          *a6 = v165;
          a6[1].f32[0] = v166;
          v167 = sqrtf(vmlas_n_f32(COERCE_FLOAT(vmul_f32(v165, v165).i32[1]), v165.f32[0], v165.f32[0])+ (float)(v166 * v166));
          if (v167 > 0.0)
          {
            v168 = 1.0 / v167;
            *a6 = vmul_n_f32(v165, v168);
            a6[1].f32[0] = v166 * v168;
          }
        }
      }
      *a8 = 2;
      v152 = 3;
    }
    else
    {
      v152 = 1;
    }
    v120 = v180;
    if ((a7 & 1) != 0)
    {
      v169 = a2[3].f32[0];
      v170 = *(float *)(a1 + 24);
      v171 = (float)(v169 * v186) + (float)(v170 * v184);
      v172 = 1.0 / (float)(v169 + v170);
      *a5 = vmul_n_f32(vadd_f32(vmul_n_f32(v185, v169), vmul_n_f32(v183, v170)), v172);
      a5[1].f32[0] = v172 * v171;
      *a8 = v152;
    }
  }
  *a4 = v120;
  return 1;
}

float32_t edgeEdgeDist(float *a1, float32x2_t *a2, float *a3, float *a4, float32x2_t *a5, float32x2_t *a6)
{
  float v6;
  float v7;
  float v8;
  float v9;
  float v10;
  float v11;
  float v12;
  float v13;
  float v14;
  float v15;
  float v16;
  float v17;
  float v18;
  float v19;
  float v20;
  float v21;
  float v22;
  float v23;
  float v24;
  float v25;
  float v26;
  float32_t result;

  v6 = a3[1];
  v7 = a5->f32[0] - *a3;
  v8 = a5->f32[1] - v6;
  v9 = a3[2];
  v10 = a5[1].f32[0] - v9;
  v11 = *a4;
  v12 = a4[1];
  v13 = a4[2];
  v14 = (float)((float)(v12 * v12) + (float)(v11 * v11)) + (float)(v13 * v13);
  v15 = a6->f32[1];
  v16 = a6[1].f32[0];
  v17 = (float)((float)(v15 * v15) + (float)(a6->f32[0] * a6->f32[0])) + (float)(v16 * v16);
  v18 = (float)((float)(v12 * v15) + (float)(*a4 * a6->f32[0])) + (float)(v13 * v16);
  v19 = (float)((float)(v8 * v12) + (float)(*a4 * v7)) + (float)(v13 * v10);
  v20 = (float)((float)(v8 * v15) + (float)(a6->f32[0] * v7)) + (float)(v16 * v10);
  v21 = (float)(v14 * v17) - (float)(v18 * v18);
  v22 = 0.0;
  if (v21 != 0.0)
  {
    v23 = (float)((float)(v19 * v17) - (float)(v20 * v18)) / v21;
    if (v23 >= 0.0)
    {
      v22 = v23;
      if (v23 > 1.0)
        v22 = 1.0;
    }
  }
  if (v17 != 0.0)
  {
    v24 = (float)-(float)(v20 - (float)(v22 * v18)) / v17;
    if (v24 >= 0.0)
    {
      if (v24 <= 1.0)
        goto LABEL_18;
      v22 = 0.0;
      if (v14 != 0.0)
      {
        v26 = (float)(v19 + v18) / v14;
        v24 = 1.0;
        if (v26 < 0.0)
          goto LABEL_18;
        v24 = 1.0;
        v22 = v26;
        if (v26 <= 1.0)
          goto LABEL_18;
        v22 = 1.0;
      }
      v24 = 1.0;
      goto LABEL_18;
    }
  }
  v24 = 0.0;
  if (v14 == 0.0 || (v25 = v19 / v14, v25 < 0.0))
  {
    v22 = 0.0;
  }
  else
  {
    v22 = 1.0;
    if (v25 <= 1.0)
      v22 = v25;
  }
LABEL_18:
  *a1 = *a3 + (float)(v11 * v22);
  a1[1] = v6 + (float)(v12 * v22);
  a1[2] = v9 + (float)(v13 * v22);
  result = (float)(v24 * a6[1].f32[0]) + a5[1].f32[0];
  *a2 = vadd_f32(vmul_n_f32(*a6, v24), *a5);
  a2[1].f32[0] = result;
  return result;
}

uint64_t physx::Gu::sweepCapsuleTriangles_Precise(uint64_t result, uint64_t a2, uint64_t a3, float32x2_t *a4, unsigned int *a5, uint64_t a6, float *a7, __int16 *a8, double a9, float32x4_t a10, float32x4_t a11, unsigned __int8 a12, float32x4_t *a13)
{
  __int16 v14;
  float v15;
  float v16;
  float v17;
  float v18;
  float v19;
  float v20;
  float v21;
  float v22;
  float v23;
  float v24;
  int v25;
  float v26;
  float v27;
  float v28;
  float v29;
  float v30;
  float v31;
  float v32;
  float v33;
  unsigned int v35;
  int v36;
  float v37;
  float v38;
  float v39;
  float v40;
  float v41;
  unsigned int v42;
  unsigned int v43;
  float *v44;
  float *v45;
  float v46;
  float v47;
  float v48;
  float *v49;
  float v50;
  float v51;
  float v52;
  float v53;
  float v54;
  float v55;
  float v56;
  float v57;
  float v58;
  float v59;
  float v60;
  float v61;
  float v62;
  float v63;
  float v64;
  float v65;
  float v66;
  float v67;
  float v68;
  float v69;
  float v70;
  float v71;
  float v72;
  float v73;
  float v74;
  float v75;
  float v76;
  float v77;
  float v78;
  float v79;
  float v80;
  float v81;
  float v82;
  float v83;
  float v84;
  float v85;
  float v86;
  float v87;
  float v88;
  float v89;
  float v90;
  float v91;
  float v92;
  float v93;
  float v94;
  float v95;
  float v96;
  float v97;
  float v98;
  float v99;
  float v100;
  float v101;
  float v102;
  float v103;
  float v104;
  float v105;
  float v106;
  float v107;
  float v108;
  float v109;
  float v110;
  float v111;
  float v112;
  float v113;
  float v114;
  float v115;
  float v116;
  float v117;
  float v118;
  float v119;
  float v120;
  float v121;
  float v122;
  float v123;
  float v124;
  float v125;
  float v126;
  float v127;
  float v128;
  float v129;
  float v130;
  float v131;
  float v132;
  uint64_t v133;
  float *v134;
  float *v135;
  float v136;
  float v137;
  float v138;
  float v139;
  float v140;
  float v141;
  float v142;
  float v143;
  float v144;
  float v145;
  float v146;
  float v147;
  float v148;
  float v149;
  float v150;
  float v151;
  float v152;
  float v153;
  BOOL v154;
  BOOL v155;
  float v156;
  float v158;
  float v159;
  float v160;
  float v161;
  BOOL v162;
  float *v164;
  float v165;
  float v166;
  float v167;
  float v168;
  float v169;
  float v170;
  float v171;
  float v172;
  float v173;
  char v174;
  _BOOL4 v175;
  uint64_t v176;
  unsigned int v177;
  float v178;
  unsigned int v179;
  float v180;
  float v181;
  float v182;
  float v183;
  unsigned int v184;
  unsigned int v185;
  float *v186;
  float v187;
  float v188;
  float v189;
  float v190;
  float v191;
  float v192;
  float v193;
  float v194;
  float v195;
  float v196;
  float v197;
  float v198;
  float v199;
  float v200;
  float v201;
  float v202;
  float v203;
  float v204;
  float v205;
  BOOL v207;
  float v208;
  float v210;
  float v211;
  float v212;
  float v213;
  float v214;
  float v215;
  BOOL v216;
  float v218;
  float v219;
  float v220;
  float v221;
  float v222;
  float v223;
  float v224;
  float v225;
  float v226;
  float v227;
  float v228;
  float v229;
  float v230;
  _BOOL4 v231;
  char v232;
  float v233;
  uint64_t v234;
  float *v235;
  float v236;
  float v237;
  char v238;
  float v239;
  unsigned int v240;
  uint64_t v241;
  float v242;
  float v243;
  float32x2_t v244;
  float32x4_t v245;
  float32x4_t v246;
  float32x4_t v247;
  __int32 v248;
  float v249;
  float v250;
  __int32 v252;
  float v253;
  float v254;
  float v257;
  float v258;
  float v259;
  float v260;
  float v261;
  float v262;
  unsigned int v263;
  float v264;
  char v265;
  float v266;
  float v267;
  float v268;
  int v269;
  float32x4_t v271;
  float32x4_t v272;
  float32x4_t v273;
  float32x4_t v274;
  float32x4_t v275;
  float32x4_t v276;
  float32x4_t v277;
  float32x2_t v278;
  float v279;
  float v280;
  float v281;
  _OWORD v282[2];
  int v283;
  float32x2_t v284;
  float v285;
  unint64_t v286;
  float v287;
  float v288;
  float v289;
  float v290;
  float v291;
  float v292;
  float v293;
  float v294;
  float v295;
  float v296;
  float v297;
  float v298;
  float v299;
  float v300;
  float v301;
  float v302;
  float v303;
  float v304;
  float v305;
  float v306;
  float v307;
  float v308;
  float v309;
  float v310;
  float v311;
  float v312;
  float v313;
  float v314;
  float v315;
  float v316;
  float v317;
  float v318;
  float v319;
  float v320;
  float v321;
  float v322;
  float v323;
  float v324;
  float v325;
  float v326;
  float v327;
  float v328;
  float v329;
  float v330;
  float v331;
  float v332;
  float v333;
  float v334;
  float v335;
  float v336;
  float v337;
  float v338;
  float v339;
  float v340;
  float v341;
  float v342;
  float v343;
  float v344;
  float v345;
  float v346;
  float v347;
  float v348;
  float v349;
  float v350;
  float v351;
  float v352;
  float v353;
  float v354;
  float v355;
  float v356;
  float v357;
  float v358;
  float v359;
  float v360;
  float v361;
  float v362;
  float v363;
  float v364;
  float v365;
  float v366;
  float v367;
  float v368;
  uint64_t v369;

  v262 = *(float *)&a9;
  v369 = *MEMORY[0x24BDAC8D0];
  v269 = result;
  if (!(_DWORD)result)
    return result;
  v14 = *a8;
  v15 = *(float *)a3;
  v16 = *(float *)(a3 + 4);
  v17 = *(float *)(a3 + 8);
  v18 = *(float *)(a3 + 12);
  v20 = *(float *)(a3 + 16);
  v19 = *(float *)(a3 + 20);
  v21 = (float)(*(float *)a3 - v18) * 0.5;
  v22 = (float)(v16 - v20) * 0.5;
  v23 = (float)(v17 - v19) * 0.5;
  v24 = sqrtf((float)((float)(v22 * v22) + (float)(v21 * v21)) + (float)(v23 * v23));
  if (v24 == 0.0)
    return physx::Gu::sweepSphereTriangles(result, a2, (float32x2_t *)a3, a4, a5, a6, a7, a12, *(float *)(a3 + 24), *(float *)&a9, (v14 & 0x80) != 0, (v14 & 0x40) != 0, (v14 & 0x10) == 0);
  v25 = a12 | ((v14 & 0x80) >> 7);
  v26 = a4->f32[0];
  v27 = a4->f32[1];
  v28 = a4[1].f32[0];
  v29 = fabsf((float)((float)((float)(v22 * (float)(1.0 / v24)) * v27)+ (float)((float)(v21 * (float)(1.0 / v24)) * a4->f32[0]))+ (float)((float)(v23 * (float)(1.0 / v24)) * v28));
  v30 = (float)(v15 + v18) * 0.5;
  v31 = (float)(v16 + v20) * 0.5;
  v32 = (float)(v17 + v19) * 0.5;
  v284.f32[0] = v30;
  v284.f32[1] = v31;
  v285 = v32;
  v265 = v14;
  if (v29 >= 0.99999)
  {
    v306 = v18 - v15;
    v307 = v20 - v16;
    v308 = v19 - v17;
    v309 = (float)((float)(v307 * v307) + (float)(v306 * v306)) + (float)(v308 * v308);
    v33 = 1.0 / v309;
    if (v309 == 0.0)
      v33 = 0.0;
    v310 = v33;
    v278.f32[0] = v30 + (float)(v24 * v26);
    v278.f32[1] = v31 + (float)(v24 * v27);
    v279 = v32 + (float)(v24 * v28);
    if (a5)
      v35 = *a5;
    else
      v35 = 0;
    v177 = 0;
    v178 = (float)((float)(v27 * (float)(v31 + (float)(v24 * v27))) + (float)((float)(v30 + (float)(v24 * v26)) * v26))
         + (float)((float)(v32 + (float)(v24 * v28)) * v28);
    v268 = 2.0;
    v179 = -1;
    v180 = v262;
    v181 = 0.0;
    v182 = 0.0;
    v183 = 0.0;
    while (1)
    {
      if (v35 == v177)
        v184 = 0;
      else
        v184 = v177;
      if (v177)
        v185 = v184;
      else
        v185 = v35;
      v186 = (float *)(a2 + 36 * v185);
      v187 = *(float *)(a3 + 24);
      v188 = v186[3];
      v189 = *v186;
      v190 = v186[1];
      v191 = v186[4];
      v192 = v186[5];
      v193 = v186[2];
      v194 = v186[6];
      v195 = v186[7];
      v196 = v186[8];
      v197 = (float)((float)(*v186 + v188) + v194) * 0.33333;
      v198 = (float)((float)(v190 + v191) + v195) * 0.33333;
      v199 = (float)((float)(v193 + v192) + v196) * 0.33333;
      v200 = a4->f32[0];
      v201 = a4->f32[1];
      v202 = a4[1].f32[0];
      v203 = fmaxf((float)((float)((float)(v198 - v278.f32[1]) * v201) + (float)((float)(v197 - v278.f32[0]) * a4->f32[0]))+ (float)((float)(v199 - v279) * v202), 0.0);
      if (v203 >= v180)
        v203 = v180;
      v204 = (float)(sqrtf((float)((float)((float)((float)(v198 - v278.f32[1]) - (float)(v201 * v203))* (float)((float)(v198 - v278.f32[1]) - (float)(v201 * v203)))+ (float)((float)((float)(v197 - v278.f32[0]) - (float)(v200 * v203))* (float)((float)(v197 - v278.f32[0]) - (float)(v200 * v203))))+ (float)((float)((float)(v199 - v279) - (float)(v202 * v203))* (float)((float)(v199 - v279) - (float)(v202 * v203))))- v187)+ -0.0001;
      v162 = v204 < 0.0;
      v205 = v204 * v204;
      v207 = !v162
          && v205 > (float)((float)((float)((float)(v198 - v190) * (float)(v198 - v190))
                                  + (float)((float)(v197 - v189) * (float)(v197 - v189)))
                          + (float)((float)(v199 - v193) * (float)(v199 - v193)))
          && v205 > (float)((float)((float)((float)(v198 - v191) * (float)(v198 - v191))
                                  + (float)((float)(v197 - v188) * (float)(v197 - v188)))
                          + (float)((float)(v199 - v192) * (float)(v199 - v192)));
      v208 = (float)((float)((float)(v198 - v195) * (float)(v198 - v195))
                   + (float)((float)(v197 - v194) * (float)(v197 - v194)))
           + (float)((float)(v199 - v196) * (float)(v199 - v196));
      if (!v207 || v205 <= v208)
      {
        v210 = (float)((float)(v190 * v201) + (float)(v189 * v200)) + (float)(v193 * v202);
        v211 = (float)((float)(v191 * v201) + (float)(v188 * v200)) + (float)(v192 * v202);
        v212 = (float)((float)(v195 * v201) + (float)(v194 * v200)) + (float)(v196 * v202);
        if (v210 >= v211)
          v213 = (float)((float)(v191 * v201) + (float)(v188 * v200)) + (float)(v192 * v202);
        else
          v213 = (float)((float)(v190 * v201) + (float)(v189 * v200)) + (float)(v193 * v202);
        if (v213 >= v212)
          v213 = (float)((float)(v195 * v201) + (float)(v194 * v200)) + (float)(v196 * v202);
        v214 = v187 + 0.002;
        if (v213 <= (float)((float)(v178 + v180) + v214))
        {
          v215 = v178 - v214;
          v216 = v211 < v215 && v210 < v215;
          if (!v216 || v212 >= v215)
          {
            v218 = v188 - v189;
            v219 = v191 - v190;
            v220 = v192 - v193;
            v221 = v194 - v189;
            v222 = v195 - v190;
            v223 = (float)(v219 * (float)(v196 - v193)) - (float)(v220 * v222);
            v224 = (float)(v220 * v221) - (float)(v218 * (float)(v196 - v193));
            v225 = (float)(v218 * v222) - (float)(v219 * v221);
            *(float *)&v286 = v223;
            *((float *)&v286 + 1) = v224;
            v287 = v225;
            if ((v25 & 1) != 0
              || (float)((float)((float)(v224 * v201) + (float)(v223 * v200)) + (float)(v225 * v202)) <= 0.0)
            {
              if ((v14 & 0x10) == 0)
              {
                if (physx::Gu::intersectCapsuleTriangle((float *)&v286, (float *)(a2 + 36 * v185), v186 + 3, v186 + 6, (float *)a3, &v306))
                {
                  v249 = -a4[1].f32[0];
                  *(float32x2_t *)a7 = vneg_f32(*a4);
                  a7[2] = v249;
                  *(_DWORD *)(a6 + 16) = v185;
                  *(_WORD *)(a6 + 20) = 1026;
                  v250 = -a4[1].f32[0];
                  *(float32x2_t *)(a6 + 36) = vneg_f32(*a4);
                  *(float *)(a6 + 44) = v250;
                  *(_DWORD *)(a6 + 48) = 0;
                  return 1;
                }
                v224 = *((float *)&v286 + 1);
                v223 = *(float *)&v286;
                v225 = v287;
                LOBYTE(v14) = v265;
              }
              v226 = sqrtf((float)((float)(v224 * v224) + (float)(v223 * v223)) + (float)(v225 * v225));
              if (v226 != 0.0)
              {
                v227 = 1.0 / v226;
                *(float *)&v286 = v223 * v227;
                *((float *)&v286 + 1) = v224 * v227;
                v287 = v225 * v227;
                LODWORD(v282[0]) = 0;
                v277.i8[0] = 0;
                if (physx::Gu::sweepSphereVSTri(v186, (float *)&v286, &v278, a4, (float *)v282, &v277, 0, *(float *)(a3 + 24))&& *(float *)v282 <= v262)
                {
                  v228 = -fabsf((float)((float)(*((float *)&v286 + 1) * a4->f32[1]) + (float)(*(float *)&v286 * a4->f32[0]))+ (float)(v287 * a4[1].f32[0]));
                  if (*(float *)v282 <= v180)
                    v229 = v180;
                  else
                    v229 = *(float *)v282;
                  if (v229 >= 1.0)
                    v230 = v229 * 0.001;
                  else
                    v230 = 0.001;
                  LOBYTE(v14) = v265;
                  if ((float)(v180 - v230) > *(float *)v282 || v268 > v228 && (float)(v180 + v230) > *(float *)v282)
                    goto LABEL_151;
                  v231 = *(float *)v282 < v180;
                  if (v268 != v228)
                    v231 = 0;
                  if (*(float *)v282 == 0.0 || v231)
                  {
LABEL_151:
                    v182 = *((float *)&v286 + 1);
                    v183 = *(float *)&v286;
                    v181 = v287;
                    if ((v265 & 0x40) != 0)
                    {
                      v180 = *(float *)v282;
                      v179 = v185;
LABEL_154:
                      if (v179 != -1)
                      {
                        v232 = v14;
                        physx::Gu::computeSphereTriImpactData((float *)&v286, (float *)v282, &v278, a4, a2 + 36 * v179, v180);
                        if ((v232 & 0x80) == 0 || a12)
                        {
                          v233 = *(float *)v282;
                          v234 = a6;
                          v235 = a7;
                        }
                        else
                        {
                          v233 = *(float *)v282;
                          v234 = a6;
                          v235 = a7;
                          if ((float)((float)((float)(v182 * a4->f32[1]) + (float)(v183 * a4->f32[0]))
                                     + (float)(v181 * a4[1].f32[0])) > 0.0)
                          {
                            v233 = -*(float *)v282;
                            *(float32x2_t *)((char *)v282 + 4) = vneg_f32(*(float32x2_t *)((char *)v282 + 4));
                          }
                        }
                        *(_QWORD *)(v234 + 24) = v286;
                        *(float *)(v234 + 32) = v287;
                        *(float *)(v234 + 36) = v233;
                        *(_QWORD *)(v234 + 40) = *(_QWORD *)((char *)v282 + 4);
                        *(float *)(v234 + 48) = v180;
                        *(_DWORD *)(v234 + 16) = v179;
                        *(_WORD *)(v234 + 20) = 3;
                        *v235 = v183;
                        v235[1] = v182;
                        result = 1;
                        v235[2] = v181;
                        return result;
                      }
                      return 0;
                    }
                    v268 = v228;
                    v180 = *(float *)v282;
                    v179 = v185;
                  }
                }
                else
                {
                  LOBYTE(v14) = v265;
                }
              }
            }
          }
        }
      }
      if (v269 == ++v177)
        goto LABEL_154;
    }
  }
  *(_DWORD *)(a6 + 16) = -1;
  v261 = (float)(v17 - v19) * 0.5;
  if (a5)
    v263 = *a5;
  else
    v263 = 0;
  v36 = 0;
  v37 = *(float *)(a3 + 24);
  v38 = (float)((float)(v31 * v27) + (float)(v30 * v26)) + (float)(v32 * v28);
  v278.f32[0] = v18 - v15;
  v278.f32[1] = v20 - v16;
  v279 = v19 - v17;
  v280 = (float)((float)((float)(v20 - v16) * (float)(v20 - v16)) + (float)(v278.f32[0] * v278.f32[0]))
       + (float)((float)(v19 - v17) * (float)(v19 - v17));
  v39 = 1.0 / v280;
  if (v280 == 0.0)
    v39 = 0.0;
  v281 = v39;
  v40 = v38 - (float)(v37 + 0.002);
  v257 = 2.0;
  v258 = (float)(v16 - v20) * 0.5;
  v41 = v262;
  *(float *)&v252 = 0.0;
  v253 = 0.0;
  v254 = 0.0;
  v259 = v21;
  v260 = v38;
  while (1)
  {
    v42 = v36 == v263 ? 0 : v36;
    v43 = v36 ? v42 : v263;
    v44 = (float *)(a2 + 36 * v43);
    v45 = v44 + 3;
    v46 = v44[1];
    v47 = v44[3] - *v44;
    v48 = v44[4] - v46;
    v49 = v44 + 6;
    v50 = v44[6] - *v44;
    v51 = v44[7] - v46;
    v52 = v44[2];
    v53 = v44[5] - v52;
    v54 = v44[8] - v52;
    *(float *)&a9 = (float)(v48 * v54) - (float)(v53 * v51);
    a11.f32[0] = (float)(v53 * v50) - (float)(v47 * v54);
    a10.f32[0] = (float)(v47 * v51) - (float)(v48 * v50);
    v277.i64[0] = __PAIR64__(a11.u32[0], LODWORD(a9));
    v277.i32[2] = a10.i32[0];
    if ((v25 & 1) != 0
      || (v55 = (float)(a11.f32[0] * a4->f32[1]) + (float)(*(float *)&a9 * a4->f32[0]),
          a11.i32[0] = a4[1].i32[0],
          *(float *)&a9 = v55 + (float)(a10.f32[0] * a11.f32[0]),
          *(float *)&a9 <= 0.0))
    {
      if (!a13 || physx::Gu::intersectTriangleBox(a13, (float *)(a2 + 36 * v43), v45, v49, a9, a10, a11))
        break;
    }
LABEL_94:
    if (++v36 == v269)
    {
      v176 = a6;
      v43 = *(_DWORD *)(a6 + 16);
      v170 = v41;
      v174 = v265;
      v173 = *(float *)&v252;
      goto LABEL_163;
    }
  }
  if ((v265 & 0x10) == 0 && physx::Gu::intersectCapsuleTriangle(v277.f32, v44, v45, v49, (float *)a3, (float *)&v278))
  {
    v236 = -a4[1].f32[0];
    *(float32x2_t *)a7 = vneg_f32(*a4);
    a7[2] = v236;
    *(_DWORD *)(a6 + 16) = v43;
    *(_WORD *)(a6 + 20) = 1026;
    v237 = -a4[1].f32[0];
    *(float32x2_t *)(a6 + 36) = vneg_f32(*a4);
    *(float *)(a6 + 44) = v237;
    *(_DWORD *)(a6 + 48) = 0;
    return 1;
  }
  v56 = v44[1];
  v57 = *v44 - v21;
  v58 = v56 - v22;
  v59 = v44[2];
  v60 = v44[3];
  v61 = v59 - v261;
  v62 = v60 - v21;
  v63 = v44[4];
  v64 = v44[5];
  v65 = v63 - v22;
  v66 = v64 - v261;
  v67 = v44[6];
  v68 = v44[7];
  v69 = v67 - v21;
  v70 = v68 - v22;
  v71 = v44[8];
  v72 = v71 - v261;
  v73 = v21 + *v44;
  v74 = v22 + v56;
  v75 = v261 + v59;
  v76 = v21 + v60;
  v77 = v22 + v63;
  v78 = v261 + v64;
  v79 = v21 + v67;
  v80 = v22 + v68;
  v81 = v261 + v71;
  v82 = (float)(v67 - v21) - v57;
  v266 = v57;
  v264 = v82;
  if ((float)((float)((float)(v22 * v277.f32[1]) + (float)(v277.f32[0] * v21)) + (float)(v277.f32[2] * v261)) >= 0.0)
  {
    v83 = (float)((float)(v77 - v74) * (float)(v81 - v75)) - (float)((float)(v78 - v75) * (float)(v80 - v74));
    v84 = (float)((float)(v78 - v75) * (float)(v79 - v73)) - (float)((float)(v76 - v73) * (float)(v81 - v75));
    v86 = v21 + *v44;
    v87 = v74;
    v88 = v261 + v59;
    v89 = v76;
    v90 = v22 + v63;
    v91 = (float)((float)(v76 - v73) * (float)(v80 - v74)) - (float)((float)(v77 - v74) * (float)(v79 - v73));
    v92 = v78;
    v93 = v79;
    v94 = v80;
    v95 = v81;
  }
  else
  {
    v83 = (float)((float)(v65 - v58) * (float)(v72 - v61)) - (float)((float)(v66 - v61) * (float)(v70 - v58));
    v84 = (float)((float)(v66 - v61) * v82) - (float)((float)(v62 - v57) * (float)(v72 - v61));
    v85 = -(float)((float)(v65 - v58) * v82);
    v86 = *v44 - v21;
    v87 = v58;
    v88 = v59 - v261;
    v89 = v62;
    v90 = v63 - v22;
    v91 = v85 + (float)((float)(v62 - v57) * (float)(v70 - v58));
    v92 = v66;
    v93 = v69;
    v94 = v70;
    v95 = v72;
  }
  v306 = v86;
  v307 = v87;
  v308 = v88;
  v309 = v89;
  v310 = v90;
  v311 = v92;
  v312 = v93;
  v313 = v94;
  v286 = __PAIR64__(LODWORD(v84), LODWORD(v83));
  v287 = v91;
  v314 = v95;
  v315 = v62;
  v316 = v65;
  v317 = v66;
  v318 = v76;
  v319 = v77;
  v320 = v78;
  v321 = v79;
  v322 = v80;
  v323 = v81;
  v96 = v79 - v62;
  v97 = v80 - v65;
  v98 = v81 - v66;
  v99 = (float)((float)(v77 - v65) * (float)(v81 - v66)) - (float)((float)(v78 - v66) * (float)(v80 - v65));
  v100 = (float)((float)(v78 - v66) * (float)(v79 - v62)) - (float)((float)(v76 - v62) * (float)(v81 - v66));
  v101 = (float)((float)(v76 - v62) * (float)(v80 - v65)) - (float)((float)(v77 - v65) * (float)(v79 - v62));
  v102 = a4->f32[0];
  v103 = a4->f32[1];
  v104 = a4[1].f32[0];
  if ((float)((float)((float)(v100 * v103) + (float)(v99 * a4->f32[0])) + (float)(v101 * v104)) > 0.0)
  {
    v318 = v79;
    v319 = v80;
    v320 = v81;
    v321 = v76;
    v99 = -v99;
    v100 = -v100;
    v101 = -v101;
    v322 = v77;
    v323 = v78;
  }
  v288 = v99;
  v289 = v100;
  v290 = v101;
  v324 = v62;
  v325 = v65;
  v326 = v66;
  v327 = v79;
  v328 = v80;
  v329 = v81;
  v330 = v69;
  v331 = v70;
  v332 = v72;
  v105 = (float)(v97 * (float)(v72 - v66)) - (float)(v98 * (float)(v70 - v65));
  v106 = (float)(v98 * (float)(v69 - v62)) - (float)(v96 * (float)(v72 - v66));
  v107 = (float)(v96 * (float)(v70 - v65)) - (float)(v97 * (float)(v69 - v62));
  if ((float)((float)((float)(v106 * v103) + (float)(v105 * v102)) + (float)(v107 * v104)) > 0.0)
  {
    v327 = v69;
    v328 = v70;
    v329 = v72;
    v330 = v79;
    v105 = -v105;
    v106 = -v106;
    v107 = -v107;
    v331 = v80;
    v332 = v81;
  }
  v291 = v105;
  v292 = v106;
  v293 = v107;
  v333 = v266;
  v334 = v58;
  v335 = v61;
  v336 = v69;
  v337 = v70;
  v338 = v72;
  v339 = v79;
  v340 = v80;
  v341 = v81;
  v108 = v79 - v266;
  v109 = v80 - v58;
  v110 = v81 - v61;
  v111 = (float)((float)(v70 - v58) * (float)(v81 - v61)) - (float)((float)(v72 - v61) * (float)(v80 - v58));
  v112 = (float)((float)(v72 - v61) * (float)(v79 - v266)) - (float)(v264 * (float)(v81 - v61));
  v113 = (float)(v264 * (float)(v80 - v58)) - (float)((float)(v70 - v58) * (float)(v79 - v266));
  if ((float)((float)((float)(v112 * v103) + (float)(v111 * v102)) + (float)(v113 * v104)) > 0.0)
  {
    v336 = v79;
    v337 = v80;
    v338 = v81;
    v339 = v69;
    v111 = -v111;
    v112 = -v112;
    v113 = -v113;
    v340 = v70;
    v341 = v72;
  }
  v294 = v111;
  v295 = v112;
  v296 = v113;
  v342 = v266;
  v343 = v58;
  v344 = v61;
  v345 = v79;
  v346 = v80;
  v347 = v81;
  v348 = v73;
  v349 = v74;
  v350 = v75;
  v114 = (float)(v109 * (float)(v75 - v61)) - (float)(v110 * (float)(v74 - v58));
  v115 = (float)(v110 * (float)(v73 - v266)) - (float)(v108 * (float)(v75 - v61));
  v116 = (float)(v108 * (float)(v74 - v58)) - (float)(v109 * (float)(v73 - v266));
  v22 = v258;
  if ((float)((float)((float)(v115 * v103) + (float)(v114 * v102)) + (float)(v116 * v104)) > 0.0)
  {
    v345 = v73;
    v346 = v74;
    v347 = v75;
    v348 = v79;
    v114 = -v114;
    v115 = -v115;
    v116 = -v116;
    v349 = v80;
    v350 = v81;
  }
  v21 = v259;
  v297 = v114;
  v298 = v115;
  v299 = v116;
  v351 = v73;
  v352 = v74;
  v353 = v75;
  v354 = v76;
  v355 = v77;
  v356 = v78;
  v357 = v62;
  v358 = v65;
  v359 = v66;
  v117 = v62 - v73;
  v118 = v65 - v74;
  v119 = v66 - v75;
  v120 = (float)((float)(v77 - v74) * (float)(v66 - v75)) - (float)((float)(v78 - v75) * (float)(v65 - v74));
  v121 = (float)((float)(v78 - v75) * (float)(v62 - v73)) - (float)((float)(v76 - v73) * (float)(v66 - v75));
  v122 = (float)((float)(v76 - v73) * (float)(v65 - v74)) - (float)((float)(v77 - v74) * (float)(v62 - v73));
  if ((float)((float)((float)(v121 * v103) + (float)(v120 * v102)) + (float)(v122 * v104)) > 0.0)
  {
    v354 = v62;
    v355 = v65;
    v356 = v66;
    v357 = v76;
    v120 = -v120;
    v121 = -v121;
    v122 = -v122;
    v358 = v77;
    v359 = v78;
  }
  v300 = v120;
  v301 = v121;
  v302 = v122;
  v360 = v73;
  v361 = v74;
  v362 = v75;
  v363 = v62;
  v364 = v65;
  v365 = v66;
  v366 = v266;
  v367 = v58;
  v368 = v61;
  v123 = v266 - v73;
  v124 = v58 - v74;
  v125 = (float)(v118 * (float)(v61 - v75)) - (float)(v119 * v124);
  v126 = (float)(v119 * v123) - (float)(v117 * (float)(v61 - v75));
  v127 = (float)(v117 * v124) - (float)(v118 * v123);
  if ((float)((float)((float)(v126 * v103) + (float)(v125 * v102)) + (float)(v127 * v104)) > 0.0)
  {
    v363 = v266;
    v364 = v58;
    v365 = v61;
    v366 = v62;
    v125 = -v125;
    v126 = -v126;
    v127 = -v127;
    v367 = v65;
    v368 = v66;
  }
  v129 = v277.f32[1];
  v128 = v277.f32[0];
  v130 = v277.f32[2];
  v303 = v125;
  v304 = v126;
  v305 = v127;
  v131 = sqrtf((float)((float)(v129 * v129) + (float)(v128 * v128)) + (float)(v130 * v130));
  if (v131 > 0.0)
  {
    v132 = 1.0 / v131;
    v128 = v277.f32[0] * v132;
    v129 = v277.f32[1] * v132;
    v277.f32[0] = v277.f32[0] * v132;
    v277.f32[1] = v277.f32[1] * v132;
    v130 = v277.f32[2] * v132;
    v277.f32[2] = v277.f32[2] * v132;
  }
  v133 = 0;
  v267 = -fabsf((float)((float)(v103 * v129) + (float)(v128 * v102)) + (float)(v130 * v104));
  v134 = &v306;
  while (1)
  {
    v135 = (float *)((char *)&v286 + v133);
    v136 = a4->f32[0];
    v137 = a4->f32[1];
    v138 = a4[1].f32[0];
    if ((v25 & 1) == 0
      && (float)((float)((float)(v137 * v135[1]) + (float)(*v135 * v136)) + (float)(v135[2] * v138)) > 0.0)
    {
      goto LABEL_87;
    }
    v139 = *v134;
    v140 = v134[1];
    v142 = v134[2];
    v141 = v134[3];
    v144 = v134[4];
    v143 = v134[5];
    v145 = v134[6];
    v146 = v134[7];
    v147 = v134[8];
    v148 = (float)((float)(*v134 + v141) + v145) * 0.33333;
    v149 = (float)((float)(v140 + v144) + v146) * 0.33333;
    v150 = (float)((float)(v142 + v143) + v147) * 0.33333;
    v151 = fmaxf((float)((float)(v137 * (float)(v149 - v284.f32[1])) + (float)((float)(v148 - v284.f32[0]) * v136))+ (float)((float)(v150 - v285) * v138), 0.0);
    if (v151 >= v41)
      v151 = v41;
    v152 = (float)(sqrtf((float)((float)((float)((float)(v149 - v284.f32[1]) - (float)(v137 * v151))* (float)((float)(v149 - v284.f32[1]) - (float)(v137 * v151)))+ (float)((float)((float)(v148 - v284.f32[0]) - (float)(v136 * v151))* (float)((float)(v148 - v284.f32[0]) - (float)(v136 * v151))))+ (float)((float)((float)(v150 - v285) - (float)(v138 * v151))* (float)((float)(v150 - v285) - (float)(v138 * v151))))- v37)+ -0.0001;
    v162 = v152 < 0.0;
    v153 = v152 * v152;
    v154 = !v162
        && v153 > (float)((float)((float)((float)(v149 - v140) * (float)(v149 - v140))
                                + (float)((float)(v148 - v139) * (float)(v148 - v139)))
                        + (float)((float)(v150 - v142) * (float)(v150 - v142)));
    v155 = v154
        && v153 > (float)((float)((float)((float)(v149 - v144) * (float)(v149 - v144))
                                + (float)((float)(v148 - v141) * (float)(v148 - v141)))
                        + (float)((float)(v150 - v143) * (float)(v150 - v143)));
    v156 = (float)((float)((float)(v149 - v146) * (float)(v149 - v146))
                 + (float)((float)(v148 - v145) * (float)(v148 - v145)))
         + (float)((float)(v150 - v147) * (float)(v150 - v147));
    if (v155 && v153 > v156)
      goto LABEL_87;
    v158 = (float)((float)(v137 * v140) + (float)(v139 * v136)) + (float)(v142 * v138);
    v159 = (float)((float)(v137 * v144) + (float)(v141 * v136)) + (float)(v143 * v138);
    v160 = (float)((float)(v137 * v146) + (float)(v145 * v136)) + (float)(v147 * v138);
    if (v158 >= v159)
      v161 = v159;
    else
      v161 = v158;
    if (v161 >= v160)
      v161 = v160;
    if (v161 > (float)((float)(v37 + 0.002) + (float)(v260 + v41)))
      goto LABEL_87;
    v162 = v160 < v40 && v159 < v40;
    if (v162 && v158 < v40)
      goto LABEL_87;
    v164 = (float *)((char *)&v286 + v133);
    v166 = *(float *)((char *)&v286 + v133);
    v165 = *(float *)((char *)&v286 + v133 + 4);
    v167 = *(float *)((char *)&v286 + v133 + 8);
    v168 = sqrtf((float)((float)(v165 * v165) + (float)(v166 * v166)) + (float)(v167 * v167));
    if (v168 == 0.0)
      goto LABEL_87;
    v169 = 1.0 / v168;
    *v135 = v166 * v169;
    v164[1] = v165 * v169;
    v164[2] = v167 * v169;
    v276.i32[0] = 0;
    v275.i8[0] = 0;
    if (!physx::Gu::sweepSphereVSTri(v134, v135, &v284, a4, v276.f32, &v275, 0, v37))
      goto LABEL_87;
    v170 = v276.f32[0];
    if (v276.f32[0] > v262)
      goto LABEL_87;
    v171 = v276.f32[0] <= v41 ? v41 : v276.f32[0];
    v172 = v171 >= 1.0 ? v171 * 0.001 : 0.001;
    if ((float)(v41 - v172) <= v276.f32[0] && (v257 <= v267 || (float)(v41 + v172) <= v276.f32[0]))
    {
      v175 = v257 == v267;
      if (v276.f32[0] >= v41)
        v175 = 0;
      if (v276.f32[0] != 0.0 && !v175)
        goto LABEL_87;
    }
    *(_DWORD *)(a6 + 16) = v43;
    a10 = *(float32x4_t *)v134;
    a11 = *(float32x4_t *)(v134 + 4);
    v282[0] = *(_OWORD *)v134;
    v282[1] = a11;
    v283 = *((_DWORD *)v134 + 8);
    v173 = v277.f32[2];
    v253 = v277.f32[1];
    v254 = v277.f32[0];
    v174 = v265;
    if ((v265 & 0x40) != 0)
      break;
    v252 = v277.i32[2];
    v41 = v170;
    v257 = v267;
LABEL_87:
    v133 += 12;
    v134 += 9;
    if (v133 == 84)
      goto LABEL_94;
  }
  v176 = a6;
LABEL_163:
  if (v43 == -1)
    return 0;
  *(float *)(v176 + 48) = v170;
  *a7 = v254;
  a7[1] = v253;
  v238 = v174;
  a7[2] = v173;
  physx::Gu::computeSphereTriImpactData((float *)(v176 + 24), (float *)(v176 + 36), &v284, a4, (uint64_t)v282, v170);
  if (v238 < 0
    && (a12 & 1) == 0
    && (float)((float)((float)(v253 * a4->f32[1]) + (float)(v254 * a4->f32[0])) + (float)(v173 * a4[1].f32[0])) > 0.0)
  {
    v239 = -*(float *)(v176 + 44);
    *(float32x2_t *)(v176 + 36) = vneg_f32(*(float32x2_t *)(v176 + 36));
    *(float *)(v176 + 44) = v239;
  }
  v240 = *(_DWORD *)(v176 + 16);
  if (v240 != -1)
  {
    v241 = a2 + 36 * v240;
    v242 = *(float *)(v176 + 48);
    v243 = v242 * a4[1].f32[0];
    v276 = 0u;
    v277 = 0u;
    v244 = vmul_n_f32(*a4, v242);
    *(float32x2_t *)v245.f32 = vadd_f32(v244, *(float32x2_t *)a3);
    v245.f32[2] = v243 + *(float *)(a3 + 8);
    v245.i32[3] = 0;
    v275 = v245;
    *(float32x2_t *)v246.f32 = vadd_f32(v244, *(float32x2_t *)(a3 + 12));
    v246.f32[2] = v243 + *(float *)(a3 + 20);
    v246.i32[3] = 0;
    v247.i64[0] = *(_QWORD *)v241;
    v247.i64[1] = *(unsigned int *)(v241 + 8);
    v273 = v247;
    v274 = v246;
    v246.i64[0] = *(_QWORD *)(v241 + 12);
    v246.i64[1] = *(unsigned int *)(v241 + 20);
    v272 = v246;
    v246.i64[0] = *(_QWORD *)(v241 + 24);
    v246.i64[1] = *(unsigned int *)(v241 + 32);
    v271 = v246;
    physx::Gu::distanceSegmentTriangleSquared(&v275, &v274, &v273, &v272, &v271, &v277, &v276);
    v248 = v276.i32[2];
    *(_QWORD *)(v176 + 24) = v276.i64[0];
    *(_DWORD *)(v176 + 32) = v248;
    *(_WORD *)(v176 + 20) = 3;
  }
  return 1;
}

uint64_t physx::Gu::sweepSphereCapsule(float32x2_t *a1, float32x2_t *a2, float32x2_t *a3, float *a4, float32x2_t *a5, float32x2_t *a6, _WORD *a7, float a8)
{
  float v15;
  float v16;
  float v17;
  float v18;
  float v19;
  float v20;
  float v21;
  float v22;
  float v23;
  float v24;
  float v25;
  float v26;
  float v27;
  float v28;
  float v29;
  float v30;
  float v31;
  float32_t v32;
  float v33;
  float v34;
  float v37;
  float v38;
  float v39;
  float v40;
  float v41;
  float v42;
  float v43;
  float v44;
  float v45;
  float v46;
  float v47;
  float v48;
  float v49;
  int v50;
  float v51;
  _BOOL4 v52;
  float v53;
  float v55;
  uint64_t result;
  float v57;
  float32_t v58;
  float v59;
  float v60;
  float v61;
  float32x2_t v62;
  float32x2_t v63;
  float32x2_t v64;
  float v65;
  float v66;
  float v67;
  float v68;
  float32_t v69;
  float32x2_t v70;
  float32x2_t v71;
  float v72;
  float v73;
  float v74;
  float v75;
  float v76;
  float v77;
  float v78;
  float32x2_t v79;
  float v80;
  float32x2_t v81;
  float v82;
  float v83;
  float32x2_t v84;
  float v85;
  float v86;
  float v87;
  uint64_t v88;

  v88 = *MEMORY[0x24BDAC8D0];
  v15 = a2[3].f32[0];
  v16 = a1[1].f32[1];
  v17 = v15 + v16;
  v18 = a2->f32[0];
  v19 = a2[1].f32[1];
  if ((*a7 & 0x10) != 0)
  {
    v22 = a2->f32[1];
    v21 = a2[2].f32[0];
  }
  else
  {
    v20 = v19 - v18;
    v21 = a2[2].f32[0];
    v22 = a2->f32[1];
    v23 = a2[1].f32[0];
    v24 = v21 - v22;
    v25 = a2[2].f32[1] - v23;
    v26 = a1->f32[0] - v18;
    v27 = a1->f32[1] - v22;
    v28 = a1[1].f32[0] - v23;
    v29 = (float)((float)((float)(v21 - v22) * v27) + (float)(v26 * (float)(v19 - v18))) + (float)(v28 * v25);
    if (v29 > 0.0)
    {
      v30 = (float)((float)(v24 * v24) + (float)(v20 * v20)) + (float)(v25 * v25);
      if (v29 < v30)
      {
        v31 = v29 / v30;
        v20 = v20 * v31;
        v24 = v24 * v31;
        v25 = v25 * v31;
      }
      v26 = v26 - v20;
      v27 = v27 - v24;
      v28 = v28 - v25;
    }
    if ((float)((float)((float)(v27 * v27) + (float)(v26 * v26)) + (float)(v28 * v28)) < (float)(v17 * v17))
    {
      *a4 = 0.0;
      v32 = -a3[1].f32[0];
      *a6 = vneg_f32(*a3);
      a6[1].f32[0] = v32;
      return 1;
    }
  }
  v33 = a2[1].f32[0];
  v34 = a2[2].f32[1];
  if (v18 == v19 && v22 == v21 && v33 == v34)
  {
    v55 = -(float)(a3[1].f32[0] * a8);
    v79 = vmul_n_f32(vneg_f32(*a3), a8);
    v80 = v55;
    v78 = a8;
    result = physx::Gu::sweepSphereSphere(a1, a2, &v79, a4, a6, v16, v15);
    if (!(_DWORD)result)
      return result;
    *a4 = *a4 * v78;
    v57 = a1[1].f32[1];
    v58 = (float)(v57 * a6[1].f32[0]) + a1[1].f32[0];
    *a5 = vadd_f32(vmul_n_f32(*a6, v57), *a1);
    a5[1].f32[0] = v58;
    return 1;
  }
  v79.i32[0] = a2->i32[0];
  v79.f32[1] = v22;
  v80 = v33;
  v81 = (float32x2_t)__PAIR64__(LODWORD(v21), LODWORD(v19));
  v82 = v34;
  v83 = v15 + v16;
  v37 = v19 - v18;
  v38 = v21 - v22;
  v39 = v34 - v33;
  v40 = COERCE_FLOAT(*a1) - v18;
  v41 = COERCE_FLOAT(HIDWORD(*(unint64_t *)a1)) - v22;
  v42 = a1[1].f32[0];
  v43 = v42 - v33;
  v44 = (float)((float)(v38 * v41) + (float)(v40 * v37)) + (float)((float)(v42 - v33) * (float)(v34 - v33));
  if (v44 > 0.0)
  {
    v45 = (float)((float)(v38 * v38) + (float)(v37 * v37)) + (float)(v39 * v39);
    if (v44 < v45)
    {
      v46 = v44 / v45;
      v37 = v37 * v46;
      v38 = v38 * v46;
      v39 = v39 * v46;
    }
    v40 = v40 - v37;
    v41 = v41 - v38;
    v43 = v43 - v39;
  }
  v47 = sqrtf((float)((float)(v41 * v41) + (float)(v40 * v40)) + (float)(v43 * v43)) - v17;
  if (v47 <= 0.0)
  {
    v52 = 0;
    v51 = 0.0;
  }
  else
  {
    v48 = v47 + -10.0;
    if (v47 <= 10.0)
      v48 = 0.0;
    v49 = v42 + (float)(v48 * a3[1].f32[0]);
    v76 = v48;
    v77 = a8;
    v84 = vadd_f32(*a1, vmul_n_f32(*a3, v48));
    v85 = v49;
    physx::Gu::intersectRayCapsuleInternal(&v84, a3, (float *)&v79, (float *)&v81, &v86, v17);
    v51 = 0.0;
    v52 = v50 == 0;
    if (v50)
    {
      v53 = v86;
      if (v86 >= v87 && v50 != 1)
        v53 = v87;
      v51 = v76 + v53;
    }
    a8 = v77;
  }
  if (v51 < 0.0)
    v52 = 1;
  if (v51 > a8)
    v52 = 1;
  if (!v52)
  {
    *a4 = v51;
    v59 = v51 * a3[1].f32[0];
    v60 = v80 - v59;
    v61 = v82 - v59;
    v62 = vmul_n_f32(*a3, v51);
    v63 = vsub_f32(v79, v62);
    v64 = vsub_f32(vsub_f32(v81, v62), v63);
    v65 = v61 - v60;
    v66 = vmlas_n_f32(vmuls_lane_f32(a1->f32[1] - v63.f32[1], v64, 1), a1->f32[0] - v63.f32[0], v64.f32[0])
        + (float)((float)(a1[1].f32[0] - v60) * v65);
    v67 = 0.0;
    if (v66 > 0.0)
    {
      v68 = (float)((float)(v64.f32[1] * v64.f32[1]) + (float)(v64.f32[0] * v64.f32[0])) + (float)(v65 * v65);
      v67 = 1.0;
      if (v66 < v68)
        v67 = v66 / v68;
    }
    v69 = v60 + (float)(v65 * v67);
    a5[1].f32[0] = v69;
    v70 = vadd_f32(v63, vmul_n_f32(v64, v67));
    *a5 = v70;
    v71 = vsub_f32(v70, *a1);
    v72 = v69 - a1[1].f32[0];
    *a6 = v71;
    a6[1].f32[0] = v72;
    v73 = sqrtf(vmlas_n_f32(COERCE_FLOAT(vmul_f32(v71, v71).i32[1]), v71.f32[0], v71.f32[0]) + (float)(v72 * v72));
    if (v73 > 0.0)
    {
      v74 = 1.0 / v73;
      v71 = vmul_n_f32(v71, v74);
      *a6 = v71;
      v72 = v72 * v74;
      a6[1].f32[0] = v72;
    }
    v75 = a2[3].f32[0];
    *a5 = vsub_f32(*a5, vmul_n_f32(v71, v75));
    a5[1].f32[0] = a5[1].f32[0] - (float)(v72 * v75);
  }
  return !v52;
}

uint64_t physx::Adjacencies::ComputeNbBoundaryEdges(physx::Adjacencies *this)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t result;
  int *v4;
  _BOOL4 v5;
  int v6;
  int v7;
  unsigned int v8;

  v1 = *((_QWORD *)this + 1);
  if (!v1)
    return 0;
  v2 = *(unsigned int *)this;
  if (!(_DWORD)v2)
    return 0;
  LODWORD(result) = 0;
  v4 = (int *)(v1 + 8);
  do
  {
    v5 = (*(v4 - 2) & 0x1FFFFFFF) == 0x1FFFFFFF;
    if ((*(v4 - 2) & 0x1FFFFFFF) == 0x1FFFFFFF)
      v6 = 2;
    else
      v6 = 1;
    if ((~*(v4 - 1) & 0x1FFFFFFF) == 0)
      v5 = v6;
    v7 = *v4;
    v4 += 3;
    v8 = v5 + result;
    if ((~v7 & 0x1FFFFFFF) != 0)
      result = v8;
    else
      result = v8 + 1;
    --v2;
  }
  while (v2);
  return result;
}

uint64_t physx::AdjacenciesBuilder::Init(unsigned int *a1, unsigned int *a2)
{
  uint64_t v2;
  unsigned int *v3;
  unsigned int *v4;
  uint64_t v5;
  const char *v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  const char *v10;
  _QWORD *v11;
  _QWORD *v12;
  uint64_t v13;
  unint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  unsigned int v20;
  unsigned int v21;
  unsigned int v22;
  unsigned int *v23;
  unsigned int v24;
  unsigned int v25;
  unsigned int v26;
  unsigned int *v27;
  unsigned int v28;
  unsigned int *v29;
  uint64_t v30;
  const char *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  int *v43;
  int v44;
  int v45;
  int v46;
  uint64_t v47;
  uint64_t v48;
  int v49;
  int *v50;
  unsigned int v51;
  int v52;
  int v53;
  int v55;
  uint64_t result;
  char updated;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  unint64_t v65;
  unsigned int *v66;
  unsigned int *v67;
  int v68;
  unsigned int v69;
  char v70;
  unsigned int *v71;
  unsigned int *v72;
  void (**v73)(physx::Cm::RadixSortBuffered *__hidden);
  _BYTE v74[24];
  __int128 v75;
  uint64_t v76;
  char v77;
  unsigned int v78;
  unsigned int v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;

  v84 = *MEMORY[0x24BDAC8D0];
  v2 = *a2;
  if (!(_DWORD)v2)
    return 0;
  v3 = a2;
  v4 = a1;
  *a1 = v2;
  v5 = physx::shdfnd::Foundation::mInstance;
  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)physx::shdfnd::Foundation::mInstance + 40))(physx::shdfnd::Foundation::mInstance))
    v6 = "static const char *physx::shdfnd::ReflectionAllocator<physx::AdjTriangle>::getName() [T = physx::AdjTriangle]";
  else
    v6 = "<allocation names disabled>";
  v7 = (_QWORD *)(*(uint64_t (**)(uint64_t, uint64_t, const char *, const char *, uint64_t))(*(_QWORD *)(v5 + 24)
                                                                                                  + 16))(v5 + 24, 12 * v2 + 16, v6, "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/physxcooking/src/Adjacencies.cpp", 625);
  *v7 = 12;
  v7[1] = v2;
  *((_QWORD *)v4 + 1) = v7 + 2;
  v8 = 3 * *v4;
  v9 = physx::shdfnd::Foundation::mInstance;
  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)physx::shdfnd::Foundation::mInstance + 40))(physx::shdfnd::Foundation::mInstance))
    v10 = "static const char *physx::shdfnd::ReflectionAllocator<AdjEdge>::getName() [T = AdjEdge]";
  else
    v10 = "<allocation names disabled>";
  v11 = (_QWORD *)(*(uint64_t (**)(uint64_t, uint64_t, const char *, const char *, uint64_t))(*(_QWORD *)(v9 + 24) + 16))(v9 + 24, 12 * v8 + 16, v10, "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/physxcooking/src/Adjacencies.cpp", 627);
  v12 = v11;
  *v11 = 12;
  v11[1] = v8;
  if (!*v4)
  {
    v76 = 0;
    v75 = 0u;
    *(_OWORD *)&v74[8] = 0u;
    v77 = 1;
    *(_DWORD *)v74 = 0x80000000;
    goto LABEL_61;
  }
  v13 = 0;
  v14 = 0;
  v15 = v11 + 2;
  v16 = *((_QWORD *)v4 + 1);
  v17 = *((_QWORD *)v3 + 1);
  v18 = *((_QWORD *)v3 + 2);
  v19 = (_QWORD *)v16;
  do
  {
    if (v17)
    {
      v20 = *(_DWORD *)(v17 + 4 * v13);
      v21 = *(_DWORD *)(v17 + 4 * (v13 + 1));
      v22 = *(_DWORD *)(v17 + 4 * (v13 + 2));
    }
    else if (v18)
    {
      v20 = *(unsigned __int16 *)(v18 + 2 * v13);
      v21 = *(unsigned __int16 *)(v18 + 2 * (v13 + 1));
      v22 = *(unsigned __int16 *)(v18 + 2 * (v13 + 2));
    }
    else
    {
      v20 = 0;
      v22 = 2;
      v21 = 1;
    }
    *v19 = -1;
    v19 = (_QWORD *)((char *)v19 + 12);
    *(_DWORD *)(v16 + 4 * v13 + 8) = -1;
    v23 = (unsigned int *)v15 + 3 * v13;
    if (v20 >= v21)
      v24 = v21;
    else
      v24 = v20;
    if (v20 <= v21)
      v25 = v21;
    else
      v25 = v20;
    *v23 = v24;
    v23[1] = v25;
    v23[2] = v14;
    if (v20 >= v22)
      v26 = v22;
    else
      v26 = v20;
    if (v20 <= v22)
      v20 = v22;
    v27 = (unsigned int *)v15 + 3 * (v13 + 1);
    *v27 = v26;
    v27[1] = v20;
    v27[2] = v14;
    if (v21 >= v22)
      v28 = v22;
    else
      v28 = v21;
    if (v21 <= v22)
      v21 = v22;
    v29 = (unsigned int *)v15 + 3 * (v13 + 2);
    *v29 = v28;
    v29[1] = v21;
    v29[2] = v14++;
    v13 += 3;
  }
  while (v14 < *v4);
  v76 = 0;
  v75 = 0u;
  *(_OWORD *)&v74[8] = 0u;
  v77 = 1;
  *(_DWORD *)v74 = 0x80000000;
  v73 = &off_24ED90D50;
  if (!(_DWORD)v13)
  {
LABEL_61:
    v73 = &off_24ED90D50;
    physx::Cm::RadixSortBuffered::reset((uint64_t)&v73);
    (*(void (**)(uint64_t, _QWORD *))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24, v12);
LABEL_62:
    v64 = *((_QWORD *)v3 + 3);
    result = 1;
    if (v64)
    {
      *(_WORD *)&v74[16] = 1;
      LODWORD(v73) = *v3;
      *(_OWORD *)v74 = *(_OWORD *)(v3 + 2);
      *(_QWORD *)&v75 = v64;
      DWORD2(v75) = v3[8];
      v78 = 0;
      v80 = 0;
      v81 = 0;
      v82 = 0;
      v83 = 0;
      if (physx::Gu::EdgeListBuilder::init((physx::Gu::EdgeListBuilder *)&v78, (uint64_t)&v73, v58, v59, v60, v61, v62, v63)&& *v4)
      {
        v65 = 0;
        v66 = (unsigned int *)(*((_QWORD *)v4 + 1) + 8);
        v67 = (unsigned int *)(v81 + 4);
        do
        {
          v68 = *(v66 - 1);
          *(v66 - 2) = *(v66 - 2) & 0xDFFFFFFF | (*(v67 - 1) >> 31 << 29);
          *(v66 - 1) = v68 & 0xDFFFFFFF | (v67[1] >> 31 << 29);
          v69 = *v67;
          v67 += 3;
          *v66 = *v66 & 0xDFFFFFFF | (v69 >> 31 << 29);
          v66 += 3;
          ++v65;
        }
        while (v65 < *v4);
      }
      physx::Gu::EdgeList::~EdgeList((physx::Gu::EdgeList *)&v78);
      return 1;
    }
    return result;
  }
  v30 = physx::shdfnd::Foundation::mInstance;
  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)physx::shdfnd::Foundation::mInstance + 40))(physx::shdfnd::Foundation::mInstance))
    v31 = "static const char *physx::shdfnd::ReflectionAllocator<unsigned int>::getName() [T = unsigned int]";
  else
    v31 = "<allocation names disabled>";
  v32 = (*(uint64_t (**)(uint64_t, uint64_t, const char *, const char *, uint64_t))(*(_QWORD *)(v30 + 24) + 16))(v30 + 24, 4 * v13, v31, "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/physxcooking/src/Adjacencies.cpp", 536);
  v33 = v32;
  v34 = 0;
  v35 = 16;
  do
  {
    *(_DWORD *)(v32 + v34) = *(_DWORD *)((char *)v12 + v35);
    v34 += 4;
    v35 += 12;
  }
  while (4 * v13 != v34);
  physx::Cm::RadixSortBuffered::Sort((uint64_t)&v73);
  v36 = 0;
  v37 = 20;
  do
  {
    *(_DWORD *)(v33 + v36) = *(_DWORD *)((char *)v12 + v37);
    v36 += 4;
    v37 += 12;
  }
  while (4 * v13 != v36);
  physx::Cm::RadixSortBuffered::Sort((uint64_t)&v73);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24, v33);
  v41 = 0;
  v42 = *(_QWORD *)&v74[8];
  v43 = (int *)v15 + 3 * **(_DWORD **)&v74[8];
  v44 = *v43;
  v45 = v43[1];
  v46 = v13;
  v71 = v4;
  v72 = v3;
LABEL_41:
  v47 = 0;
  v48 = -4;
  v49 = v46;
  do
  {
    v50 = (int *)v15 + 3 * *(unsigned int *)(v42 + 4 * v47);
    v52 = v50[1];
    v51 = v50[2];
    v53 = *v50;
    if (*v50 != v44 || v52 != v45)
    {
      if (2 - v41 != v47 || (UpdateLink(v78, v79, v44, v45, v16, *((_QWORD *)v72 + 1), *((_QWORD *)v72 + 2)) & 1) != 0)
      {
        v55 = v49 - 1;
        v46 = v49 - 1 - v47;
        v42 -= v48;
        v78 = v51;
        v41 = 1;
        v45 = v52;
        v44 = v53;
        v4 = v71;
        v3 = v72;
        if (v55 != (_DWORD)v47)
          goto LABEL_41;
        goto LABEL_61;
      }
LABEL_56:
      v73 = &off_24ED90D50;
      physx::Cm::RadixSortBuffered::reset((uint64_t)&v73);
      (*(void (**)(uint64_t, _QWORD *))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24, v12);
      return 0;
    }
    *(&v78 + v41 + v47) = v51;
    if (2 - v41 == v47)
    {
      physx::shdfnd::Foundation::error(physx::shdfnd::Foundation::mInstance, 8, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/physxcooking/src/Adjacencies.cpp", 570, "Adjacencies::CreateDatabase: can't work on non-manifold meshes.", v38, v39, v40, v70);
      goto LABEL_56;
    }
    ++v47;
    v48 -= 4;
  }
  while (v49 != (_DWORD)v47);
  v4 = v71;
  v3 = v72;
  if (2 - v41 != v47)
    goto LABEL_61;
  updated = UpdateLink(v78, v79, v44, v45, v16, *((_QWORD *)v72 + 1), *((_QWORD *)v72 + 2));
  v73 = &off_24ED90D50;
  physx::Cm::RadixSortBuffered::reset((uint64_t)&v73);
  (*(void (**)(uint64_t, _QWORD *))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24, v12);
  if ((updated & 1) != 0)
    goto LABEL_62;
  return 0;
}

uint64_t physx::Gu::EdgeListBuilder::init(physx::Gu::EdgeListBuilder *this, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v10;
  BOOL v11;
  int v12;
  BOOL v13;
  uint64_t result;
  uint64_t v15;

  v10 = *(_QWORD *)(a2 + 32);
  if (v10)
    v11 = 0;
  else
    v11 = *(_BYTE *)(a2 + 25) == 0;
  v12 = !v11;
  if (v10)
    v13 = 0;
  else
    v13 = *(_BYTE *)(a2 + 24) == 0;
  if (v13
    || (result = physx::Gu::EdgeListBuilder::createFacesToEdges(this, *(_DWORD *)a2, *(_QWORD *)(a2 + 8), *(_QWORD *)(a2 + 16), a5, a6, a7, a8), (_DWORD)result))
  {
    if (!v12
      || (result = physx::Gu::EdgeListBuilder::createEdgesToFaces(this, *(_DWORD *)a2, *(const unsigned int **)(a2 + 8), *(const unsigned __int16 **)(a2 + 16), a5, a6, a7, a8), (_DWORD)result))
    {
      v15 = *(_QWORD *)(a2 + 32);
      if (!v15
        || (result = physx::Gu::EdgeListBuilder::computeActiveEdges((unsigned int *)this, *(_DWORD *)a2, *(_QWORD *)(a2 + 8), *(_QWORD *)(a2 + 16), v15, a6, a7, a8, *(float *)(a2 + 40)), (_DWORD)result))
      {
        if (!*(_BYTE *)(a2 + 24))
        {
          if (*((_QWORD *)this + 3))
            (*(void (**)(uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
          *((_QWORD *)this + 3) = 0;
        }
        if (!*(_BYTE *)(a2 + 25))
        {
          if (*((_QWORD *)this + 4))
            (*(void (**)(uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
          *((_QWORD *)this + 4) = 0;
          if (*((_QWORD *)this + 5))
            (*(void (**)(uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
          *((_QWORD *)this + 5) = 0;
        }
        return 1;
      }
    }
  }
  return result;
}

__n128 physx::Cooking::setParams(uint64_t a1, __int128 *a2)
{
  __int128 v2;
  __n128 result;

  v2 = *a2;
  *(_QWORD *)(a1 + 24) = *((_QWORD *)a2 + 2);
  *(_OWORD *)(a1 + 8) = v2;
  *(_DWORD *)(a1 + 32) = *((_DWORD *)a2 + 6);
  result = *(__n128 *)((char *)a2 + 28);
  *(_DWORD *)(a1 + 52) = *((_DWORD *)a2 + 11);
  *(__n128 *)(a1 + 36) = result;
  return result;
}

uint64_t physx::Cooking::getParams(physx::Cooking *this)
{
  return (uint64_t)this + 8;
}

uint64_t physx::Cooking::platformMismatch(physx::Cooking *this)
{
  return 0;
}

uint64_t physx::Cooking::release(physx::Cooking *this, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, char a9)
{
  if (this)
    this = (physx::Cooking *)(*(uint64_t (**)(physx::Cooking *))(*(_QWORD *)this + 128))(this);
  return physx::shdfnd::Foundation::decRefCount(this, a2, a3, a4, a5, a6, a7, a8, a9);
}

uint64_t physx::Cooking::validateTriangleMesh(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unsigned int v8;
  uint64_t v9;
  BOOL v10;
  unsigned int v11;
  uint64_t v12;
  physx::Gu::EdgeList *v14;
  char v15;
  void (**v16)(physx::TriangleMeshBuilder *__hidden);
  physx::Gu::EdgeList *v17;
  uint64_t v18;
  void (***v19)(physx::Gu::BV4TriangleData *__hidden);
  void (**v20)(physx::Gu::BV4TriangleData *__hidden);
  int v21;
  char v22;
  int v23;
  uint64_t v24;
  __int128 v25;
  int32x2_t v26;
  int v27;
  __int128 v28;
  _BYTE v29[64];
  int v30;
  uint64_t v31;
  uint64_t v32;
  int v33;
  __int128 v34;
  _BYTE v35[28];
  __int128 v36;
  _BYTE v37[22];
  fenv_t v38;

  fegetenv(&v38);
  fesetenv(MEMORY[0x24BDAC750]);
  v8 = *(_DWORD *)(a2 + 16);
  if (v8 < 3
    || ((v9 = *(_QWORD *)(a2 + 32), -1431655765 * v8 >= 0x55555556) ? (v10 = v9 == 0) : (v10 = 0),
        v10
     || *(_QWORD *)(a2 + 64) && *(_DWORD *)(a2 + 56) < 2u
     || v8 >= 0x10000 && (*(_WORD *)(a2 + 48) & 2) != 0
     || !*(_QWORD *)(a2 + 8)
     || *(_DWORD *)a2 < 0xCu
     || v9 && ((*(_WORD *)(a2 + 48) & 2) != 0 ? (v11 = 6) : (v11 = 12), *(_DWORD *)(a2 + 24) < v11)))
  {
    physx::shdfnd::Foundation::error(physx::shdfnd::Foundation::mInstance, 4, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/physxcooking/src/Cooking.cpp", 102, "Cooking::validateTriangleMesh: user-provided triangle mesh descriptor is invalid!", v5, v6, v7, v15);
    v12 = 0;
  }
  else
  {
    v18 = a1 + 8;
    v19 = &v20;
    v16 = (void (**)(physx::TriangleMeshBuilder *__hidden))&off_24ED92A98;
    v17 = 0;
    v22 = 0;
    v23 = 0;
    v25 = xmmword_2261A6E10;
    v24 = 0;
    v26 = vdup_n_s32(0xFE7FFFFF);
    v27 = 0;
    memset(&v29[32], 0, 32);
    v28 = 0u;
    memset(v29, 0, 28);
    v20 = off_24ED90FA8;
    v30 = 0;
    v31 = 0;
    v32 = 0;
    v33 = 0;
    memset(v37, 0, sizeof(v37));
    v36 = 0u;
    v34 = 0u;
    memset(v35, 0, sizeof(v35));
    v21 = 1;
    v12 = physx::TriangleMeshBuilder::loadFromDesc((uint64_t)&v16, (__int128 *)a2, 0, 1, v4, v5, v6, v7);
    v16 = (void (**)(physx::TriangleMeshBuilder *__hidden))&off_24ED92A98;
    physx::Gu::BV4TriangleData::~BV4TriangleData((physx::Gu::BV4TriangleData *)&v20);
    v16 = off_24ED92A58;
    v14 = v17;
    if (v17)
    {
      physx::Gu::EdgeList::~EdgeList(v17);
      (*(void (**)(uint64_t, physx::Gu::EdgeList *))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24)
                                                             + 24))(physx::shdfnd::Foundation::mInstance + 24, v14);
    }
  }
  fesetenv(&v38);
  return v12;
}

uint64_t physx::Cooking::cookTriangleMesh(uint64_t a1, _QWORD *a2, __int128 *a3, void (***a4)(_QWORD, _BYTE *, uint64_t), _DWORD *a5)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  fenv_t v17[2];

  fegetenv(v17);
  fesetenv(MEMORY[0x24BDAC750]);
  if (a5)
    *a5 = 0;
  v14 = physx::TriangleMeshBuilder::loadFromDesc((uint64_t)a2, a3, a5, 0, v10, v11, v12, v13);
  if ((_DWORD)v14)
  {
    v15 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 24))(a1);
    physx::TriangleMeshBuilder::save(a2, a4, v15, a1 + 8);
  }
  fesetenv(v17);
  return v14;
}

uint64_t physx::Cooking::cookTriangleMesh(uint64_t a1, __int128 *a2, void (***a3)(_QWORD, _BYTE *, uint64_t), _DWORD *a4)
{
  uint64_t v4;
  physx::Gu::EdgeList *v5;
  void (**v7)(physx::BV4TriangleMeshBuilder *__hidden);
  physx::Gu::EdgeList *v8;
  uint64_t v9;
  void (***v10)(physx::Gu::BV4TriangleData *__hidden);
  void (**v11)(physx::Gu::BV4TriangleData *__hidden);
  int v12;
  char v13;
  int v14;
  uint64_t v15;
  __int128 v16;
  int32x2_t v17;
  int v18;
  __int128 v19;
  _BYTE v20[28];
  __int128 v21;
  __int128 v22;
  int v23;
  uint64_t v24;
  uint64_t v25;
  int v26;
  __int128 v27;
  _BYTE v28[32];
  __int128 v29;
  _BYTE v30[22];

  if (*(_DWORD *)(a1 + 48))
  {
    v9 = a1 + 8;
    v10 = &v11;
    v7 = &off_24ED92A98;
    v8 = 0;
    v13 = 0;
    v14 = 0;
    v16 = xmmword_2261A6E10;
    v15 = 0;
    v17 = vdup_n_s32(0xFE7FFFFF);
    v18 = 0;
    v21 = 0u;
    v22 = 0u;
    v19 = 0u;
    memset(v20, 0, sizeof(v20));
    v11 = off_24ED90FA8;
    v23 = 0;
    v24 = 0;
    v25 = 0;
    v26 = 0;
    v29 = 0u;
    memset(v30, 0, sizeof(v30));
    v27 = 0u;
    memset(v28, 0, 28);
    v12 = 1;
    v4 = physx::Cooking::cookTriangleMesh(a1, &v7, a2, a3, a4);
    v7 = &off_24ED92A98;
    physx::Gu::BV4TriangleData::~BV4TriangleData((physx::Gu::BV4TriangleData *)&v11);
    v7 = (void (**)(physx::BV4TriangleMeshBuilder *__hidden))off_24ED92A58;
    v5 = v8;
    if (v8)
    {
      physx::Gu::EdgeList::~EdgeList(v8);
      (*(void (**)(uint64_t, physx::Gu::EdgeList *))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24)
                                                             + 24))(physx::shdfnd::Foundation::mInstance + 24, v5);
    }
  }
  else
  {
    v9 = a1 + 8;
    v10 = &v11;
    v7 = &off_24ED92AD8;
    v8 = 0;
    v13 = 0;
    v14 = 0;
    v15 = 0;
    v16 = xmmword_2261A6E10;
    v17 = vdup_n_s32(0xFE7FFFFF);
    v18 = 0;
    v21 = 0u;
    v22 = 0u;
    v19 = 0u;
    memset(v20, 0, sizeof(v20));
    v11 = off_24ED90F00;
    *((_QWORD *)&v29 + 1) = 0;
    DWORD1(v29) = 0;
    *(_QWORD *)&v28[24] = 0;
    *(_DWORD *)&v28[16] = 4;
    v12 = 0;
    v4 = physx::Cooking::cookTriangleMesh(a1, &v7, a2, a3, a4);
    physx::RTreeTriangleMeshBuilder::~RTreeTriangleMeshBuilder((physx::RTreeTriangleMeshBuilder *)&v7);
  }
  return v4;
}

uint64_t physx::Cooking::createTriangleMesh(uint64_t a1, _QWORD *a2, __int128 *a3, uint64_t (***a4)(_QWORD, uint64_t, _QWORD), _DWORD *a5)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  fenv_t v17[2];

  fegetenv(v17);
  fesetenv(MEMORY[0x24BDAC750]);
  if (a5)
    *a5 = 0;
  if (physx::TriangleMeshBuilder::loadFromDesc((uint64_t)a2, a3, a5, 0, v10, v11, v12, v13))
  {
    if ((*(_BYTE *)(a1 + 32) & 8) == 0)
      physx::TriangleMeshBuilder::checkMeshIndicesSize((uint64_t)a2);
    if ((*(unsigned int (**)(_QWORD *))(*a2 + 16))(a2))
      v14 = 4;
    else
      v14 = 3;
    v15 = (**a4)(a4, v14, a2[3]);
  }
  else
  {
    v15 = 0;
  }
  fesetenv(v17);
  return v15;
}

uint64_t physx::Cooking::createTriangleMesh(uint64_t a1, __int128 *a2, uint64_t (***a3)(_QWORD, uint64_t, _QWORD), _DWORD *a4)
{
  uint64_t v4;
  physx::Gu::EdgeList *v5;
  void (**v7)(physx::BV4TriangleMeshBuilder *__hidden);
  physx::Gu::EdgeList *v8;
  uint64_t v9;
  void (***v10)(physx::Gu::BV4TriangleData *__hidden);
  void (**v11)(physx::Gu::BV4TriangleData *__hidden);
  int v12;
  char v13;
  int v14;
  uint64_t v15;
  __int128 v16;
  int32x2_t v17;
  int v18;
  __int128 v19;
  _BYTE v20[28];
  __int128 v21;
  __int128 v22;
  int v23;
  uint64_t v24;
  uint64_t v25;
  int v26;
  __int128 v27;
  _BYTE v28[32];
  __int128 v29;
  _BYTE v30[22];

  if (*(_DWORD *)(a1 + 48))
  {
    v9 = a1 + 8;
    v10 = &v11;
    v7 = &off_24ED92A98;
    v8 = 0;
    v13 = 0;
    v14 = 0;
    v16 = xmmword_2261A6E10;
    v15 = 0;
    v17 = vdup_n_s32(0xFE7FFFFF);
    v18 = 0;
    v21 = 0u;
    v22 = 0u;
    v19 = 0u;
    memset(v20, 0, sizeof(v20));
    v11 = off_24ED90FA8;
    v23 = 0;
    v24 = 0;
    v25 = 0;
    v26 = 0;
    v29 = 0u;
    memset(v30, 0, sizeof(v30));
    v27 = 0u;
    memset(v28, 0, 28);
    v12 = 1;
    v4 = physx::Cooking::createTriangleMesh(a1, &v7, a2, a3, a4);
    v7 = &off_24ED92A98;
    physx::Gu::BV4TriangleData::~BV4TriangleData((physx::Gu::BV4TriangleData *)&v11);
    v7 = (void (**)(physx::BV4TriangleMeshBuilder *__hidden))off_24ED92A58;
    v5 = v8;
    if (v8)
    {
      physx::Gu::EdgeList::~EdgeList(v8);
      (*(void (**)(uint64_t, physx::Gu::EdgeList *))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24)
                                                             + 24))(physx::shdfnd::Foundation::mInstance + 24, v5);
    }
  }
  else
  {
    v9 = a1 + 8;
    v10 = &v11;
    v7 = &off_24ED92AD8;
    v8 = 0;
    v13 = 0;
    v14 = 0;
    v15 = 0;
    v16 = xmmword_2261A6E10;
    v17 = vdup_n_s32(0xFE7FFFFF);
    v18 = 0;
    v21 = 0u;
    v22 = 0u;
    v19 = 0u;
    memset(v20, 0, sizeof(v20));
    v11 = off_24ED90F00;
    *((_QWORD *)&v29 + 1) = 0;
    DWORD1(v29) = 0;
    *(_QWORD *)&v28[24] = 0;
    *(_DWORD *)&v28[16] = 4;
    v12 = 0;
    v4 = physx::Cooking::createTriangleMesh(a1, &v7, a2, a3, a4);
    physx::RTreeTriangleMeshBuilder::~RTreeTriangleMeshBuilder((physx::RTreeTriangleMeshBuilder *)&v7);
  }
  return v4;
}

uint64_t physx::Cooking::cookConvexMeshInternal(uint64_t a1, __int128 *a2, float32x4_t *a3, uint64_t a4, int *a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int v12;
  __int16 v13;
  unsigned int v14;
  int v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t result;
  __int128 v21;
  __int128 v22;
  _BOOL4 v23;
  int v24;
  int v25;
  int v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  int v31;
  __int16 v32;
  int v33;

  if (a5)
    *a5 = 3;
  v12 = *((_DWORD *)a2 + 4);
  if (v12 < 3
    || v12 >= 0x10000 && (*((_WORD *)a2 + 36) & 1) != 0
    || !*((_QWORD *)a2 + 1)
    || *(_DWORD *)a2 < 0xCu
    || *((unsigned __int16 *)a2 + 38) < 4u)
  {
    goto LABEL_21;
  }
  if (*((_QWORD *)a2 + 4))
  {
    if (*((_DWORD *)a2 + 10) < 4u || !*((_QWORD *)a2 + 7))
      goto LABEL_21;
    v13 = *((_WORD *)a2 + 36);
    v14 = (v13 & 1) != 0 ? 2 : 4;
    if (*((_DWORD *)a2 + 12) < v14 || *((_DWORD *)a2 + 6) <= 0x13u)
      goto LABEL_21;
  }
  else
  {
    v13 = *((_WORD *)a2 + 36);
    if ((v13 & 2) == 0)
    {
LABEL_21:
      v16 = physx::shdfnd::Foundation::mInstance;
      v17 = "Cooking::cookConvexMesh: user-provided convex mesh descriptor is invalid!";
      v18 = 4;
      v19 = 193;
LABEL_22:
      physx::shdfnd::Foundation::error(v16, v18, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/physxcooking/src/Cooking.cpp", v19, v17, a6, a7, a8, v27);
      return 0;
    }
  }
  v15 = *((unsigned __int16 *)a2 + 37);
  if ((v13 & 0x20) != 0)
  {
    if ((v15 - 4) >= 0xFD)
      goto LABEL_21;
  }
  else if ((v15 - 8) >= 0xF9)
  {
    goto LABEL_21;
  }
  if (*(float *)(a1 + 8) <= 0.0)
  {
    v16 = physx::shdfnd::Foundation::mInstance;
    v17 = "Cooking::cookConvexMesh: provided cooking parameter areaTestEpsilon is invalid!";
    v18 = 4;
    v19 = 199;
    goto LABEL_22;
  }
  if (*(float *)(a1 + 12) < 0.0)
  {
    v16 = physx::shdfnd::Foundation::mInstance;
    v17 = "Cooking::cookConvexMesh: provided cooking parameter planeTolerance is invalid!";
    v18 = 4;
    v19 = 205;
    goto LABEL_22;
  }
  v21 = a2[3];
  v29 = a2[2];
  v30 = v21;
  v31 = *((_DWORD *)a2 + 16);
  v22 = a2[1];
  v27 = *a2;
  v28 = v22;
  v32 = v13;
  v33 = *(_DWORD *)((char *)a2 + 74);
  if ((v13 & 2) != 0)
  {
    v32 = v13 & 0xFFFE;
    v31 = 0;
    *((_QWORD *)&v30 + 1) = 0;
    LODWORD(v30) = 0;
    DWORD2(v29) = 0;
    *(_QWORD *)&v29 = 0;
    DWORD2(v28) = 0;
    v24 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a4 + 16))(a4);
    v25 = v24;
    if (v24 == 2)
      goto LABEL_35;
    if (v24 == 1)
    {
      result = 0;
      *a5 = 1;
      return result;
    }
    v23 = 0;
    if (!v24)
    {
LABEL_35:
      v23 = v24 == 2;
      (*(void (**)(uint64_t, __int128 *))(*(_QWORD *)a4 + 24))(a4, &v27);
    }
    if ((v25 | 2) != 2)
      return 0;
  }
  else
  {
    v23 = 0;
  }
  if (v28 >= 0x100)
  {
    v16 = physx::shdfnd::Foundation::mInstance;
    v17 = "Cooking::cookConvexMesh: user-provided hull must have less than 256 vertices!";
    v18 = 32;
    v19 = 247;
    goto LABEL_22;
  }
  result = physx::ConvexMeshBuilder::build(a3, (uint64_t)&v27, *(_DWORD *)(a1 + 52), 0, a4, a6, a7, a8);
  if (a5 && (_DWORD)result)
  {
    if (v23)
      v26 = 2;
    else
      v26 = 0;
    *a5 = v26;
    return 1;
  }
  return result;
}

uint64_t physx::Cooking::cookConvexMesh(_BYTE *a1, uint64_t a2, void (***a3)(_QWORD, unsigned int *, uint64_t), int *a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  __int128 v11;
  __int128 v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  const char *v16;
  char v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  float32x4_t v22[3];
  uint64_t v23;
  _WORD *v24;
  char v25;
  int v26;
  uint64_t v27;
  _WORD v28[36];
  uint64_t v29;
  __int128 v30;
  __int128 v31;
  uint64_t v32;
  __int128 v33[4];
  int v34;
  __int16 v35;
  int v36;
  fenv_t v37;

  fegetenv(&v37);
  fesetenv(MEMORY[0x24BDAC750]);
  v11 = *(_OWORD *)(a2 + 48);
  v33[2] = *(_OWORD *)(a2 + 32);
  v33[3] = v11;
  v34 = *(_DWORD *)(a2 + 64);
  v12 = *(_OWORD *)(a2 + 16);
  v33[0] = *(_OWORD *)a2;
  v33[1] = v12;
  v35 = *(_WORD *)(a2 + 72);
  v13 = *(_DWORD *)(a2 + 74);
  v36 = v13;
  if ((v35 & 2) != 0)
  {
    if ((v35 & 0x80) != 0)
    {
      if ((v13 & 0xFFC0) != 0)
        LOWORD(v13) = 64;
      LOWORD(v36) = v13;
    }
    v15 = physx::shdfnd::Foundation::mInstance;
    if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)physx::shdfnd::Foundation::mInstance + 40))(physx::shdfnd::Foundation::mInstance))
      v16 = "static const char *physx::shdfnd::ReflectionAllocator<physx::QuickHullConvexHullLib>::getName() [T = physx::"
            "QuickHullConvexHullLib]";
    else
      v16 = "<allocation names disabled>";
    v14 = (*(uint64_t (**)(uint64_t, uint64_t, const char *, const char *, uint64_t))(*(_QWORD *)(v15 + 24) + 16))(v15 + 24, 88, v16, "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/physxcooking/src/Cooking.cpp", 283);
    physx::QuickHullConvexHullLib::QuickHullConvexHullLib(v14, (uint64_t)v33, (uint64_t)(a1 + 8));
  }
  else
  {
    v14 = 0;
  }
  v17 = a1[22];
  memset(v22, 0, sizeof(v22));
  v23 = 0;
  v24 = v28;
  v25 = v17;
  v26 = 0;
  v27 = 0;
  v28[18] = 0;
  v29 = 0;
  v30 = xmmword_2260E5F20;
  v31 = xmmword_2260E5F20;
  v32 = 0x3F80000000000000;
  if ((physx::Cooking::cookConvexMeshInternal((uint64_t)a1, v33, v22, v14, a4, v8, v9, v10) & 1) != 0)
  {
    v18 = (*(uint64_t (**)(_BYTE *))(*(_QWORD *)a1 + 24))(a1);
    if ((physx::ConvexMeshBuilder::save((uint64_t)v22, a3, v18) & 1) != 0)
    {
      v19 = 1;
      v20 = 1;
      if (!v14)
        goto LABEL_19;
      goto LABEL_18;
    }
    if (a4)
      *a4 = 3;
  }
  v19 = 0;
  v20 = 0;
  if (v14)
  {
LABEL_18:
    (*(void (**)(uint64_t))(*(_QWORD *)v14 + 8))(v14);
    v20 = v19;
  }
LABEL_19:
  physx::ConvexMeshBuilder::~ConvexMeshBuilder((physx::ConvexMeshBuilder *)v22);
  fesetenv(&v37);
  return v20;
}

uint64_t physx::Cooking::createConvexMesh(uint64_t a1, uint64_t a2, uint64_t (***a3)(_QWORD, uint64_t, _WORD *), int *a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  __int128 v11;
  __int128 v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  const char *v16;
  char v17;
  uint64_t v18;
  _WORD v20[64];
  float32x4_t v21[3];
  uint64_t v22;
  _WORD *v23;
  char v24;
  int v25;
  uint64_t v26;
  _WORD v27[36];
  uint64_t v28;
  __int128 v29;
  __int128 v30;
  uint64_t v31;
  __int128 v32[4];
  int v33;
  __int16 v34;
  int v35;
  fenv_t v36;

  fegetenv(&v36);
  fesetenv(MEMORY[0x24BDAC750]);
  v11 = *(_OWORD *)(a2 + 48);
  v32[2] = *(_OWORD *)(a2 + 32);
  v32[3] = v11;
  v33 = *(_DWORD *)(a2 + 64);
  v12 = *(_OWORD *)(a2 + 16);
  v32[0] = *(_OWORD *)a2;
  v32[1] = v12;
  v34 = *(_WORD *)(a2 + 72);
  v13 = *(_DWORD *)(a2 + 74);
  v35 = v13;
  if ((v34 & 2) != 0)
  {
    if ((v34 & 0x80) != 0)
    {
      if ((v13 & 0xFFC0) != 0)
        LOWORD(v13) = 64;
      LOWORD(v35) = v13;
    }
    v15 = physx::shdfnd::Foundation::mInstance;
    if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)physx::shdfnd::Foundation::mInstance + 40))(physx::shdfnd::Foundation::mInstance))
      v16 = "static const char *physx::shdfnd::ReflectionAllocator<physx::QuickHullConvexHullLib>::getName() [T = physx::"
            "QuickHullConvexHullLib]";
    else
      v16 = "<allocation names disabled>";
    v14 = (*(uint64_t (**)(uint64_t, uint64_t, const char *, const char *, uint64_t))(*(_QWORD *)(v15 + 24) + 16))(v15 + 24, 88, v16, "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/physxcooking/src/Cooking.cpp", 331);
    physx::QuickHullConvexHullLib::QuickHullConvexHullLib(v14, (uint64_t)v32, a1 + 8);
  }
  else
  {
    v14 = 0;
  }
  v17 = *(_BYTE *)(a1 + 22);
  memset(v21, 0, sizeof(v21));
  v22 = 0;
  v23 = v27;
  v24 = v17;
  v25 = 0;
  v26 = 0;
  v27[18] = 0;
  v28 = 0;
  v29 = xmmword_2260E5F20;
  v30 = xmmword_2260E5F20;
  v31 = 0x3F80000000000000;
  if ((physx::Cooking::cookConvexMeshInternal(a1, v32, v21, v14, a4, v8, v9, v10) & 1) != 0)
  {
    v20[18] = 0;
    physx::ConvexMeshBuilder::copy((uint64_t)v21, (uint64_t)v20);
    v18 = (**a3)(a3, 2, v20);
    if (!v18 && a4)
      *a4 = 3;
    if (v14)
      (*(void (**)(uint64_t))(*(_QWORD *)v14 + 8))(v14);
  }
  else
  {
    if (v14)
      (*(void (**)(uint64_t))(*(_QWORD *)v14 + 8))(v14);
    v18 = 0;
  }
  physx::ConvexMeshBuilder::~ConvexMeshBuilder((physx::ConvexMeshBuilder *)v21);
  fesetenv(&v36);
  return v18;
}

uint64_t physx::Cooking::validateConvexMesh(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  char v8;
  uint64_t v9;
  float32x4_t v11[3];
  uint64_t v12;
  _WORD *v13;
  char v14;
  int v15;
  uint64_t v16;
  _WORD v17[36];
  uint64_t v18;
  __int128 v19;
  __int128 v20;
  uint64_t v21;

  v8 = *(_BYTE *)(a1 + 22);
  memset(v11, 0, sizeof(v11));
  v12 = 0;
  v13 = v17;
  v14 = v8;
  v15 = 0;
  v16 = 0;
  v17[18] = 0;
  v18 = 0;
  v19 = xmmword_2260E5F20;
  v20 = xmmword_2260E5F20;
  v21 = 0x3F80000000000000;
  v9 = physx::ConvexMeshBuilder::build(v11, a2, *(_DWORD *)(a1 + 52), 1, 0, a6, a7, a8);
  physx::ConvexMeshBuilder::~ConvexMeshBuilder((physx::ConvexMeshBuilder *)v11);
  return v9;
}

uint64_t physx::Cooking::computeHullPolygons(uint64_t a1, unsigned int *a2, uint64_t a3, _DWORD *a4, _QWORD *a5, unsigned int *a6, uint64_t *a7, _DWORD *a8, uint64_t *a9)
{
  unsigned int v13;
  _DWORD *v14;
  size_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t *v19;
  char *v20;
  uint64_t v21;
  unsigned int v22;
  size_t v23;
  char *v24;
  uint64_t v25;
  uint64_t *v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  unsigned __int16 *v30;
  char *v31;
  char v32;
  uint64_t v33;
  uint64_t *v35;
  uint64_t v36;
  _DWORD *v37;
  _QWORD *v38;
  _BYTE v39[48];
  uint64_t v40;
  _WORD *v41;
  char v42;
  int v43;
  uint64_t v44;
  _WORD v45[36];
  uint64_t v46;
  __int128 v47;
  __int128 v48;
  uint64_t v49;
  uint64_t v50;

  v35 = a7;
  v38 = a5;
  v37 = a4;
  v36 = a3;
  v50 = *MEMORY[0x24BDAC8D0];
  v14 = a2 + 4;
  v13 = a2[4];
  MEMORY[0x24BDAC7A8](a1);
  v16 = (char *)&v35 - ((v15 + 15) & 0x1FFFFFFFF0);
  bzero(v16, v15);
  if (v13)
  {
    v18 = *a2;
    v19 = (uint64_t *)*((_QWORD *)a2 + 1);
    v20 = v16;
    do
    {
      v21 = *v19;
      *((_DWORD *)v20 + 2) = *((_DWORD *)v19 + 2);
      *(_QWORD *)v20 = v21;
      v20 += 12;
      v19 = (uint64_t *)((char *)v19 + v18);
      --v13;
    }
    while (v13);
  }
  v22 = a2[10];
  MEMORY[0x24BDAC7A8](v17);
  v24 = (char *)&v35 - ((v23 + 15) & 0x1FFFFFFFF0);
  bzero(v24, v23);
  if ((a2[12] & 2) != 0)
  {
    if (v22)
    {
      v29 = a2[6];
      v30 = (unsigned __int16 *)(*((_QWORD *)a2 + 4) + 4);
      v31 = v24;
      do
      {
        *(_DWORD *)v31 = *(v30 - 2);
        *((_DWORD *)v31 + 1) = *(v30 - 1);
        *((_DWORD *)v31 + 2) = *v30;
        v30 = (unsigned __int16 *)((char *)v30 + v29);
        v31 += 12;
      }
      while (v31 < &v24[12 * v22]);
    }
  }
  else if (v22)
  {
    v25 = a2[6];
    v26 = (uint64_t *)*((_QWORD *)a2 + 4);
    v27 = v24;
    do
    {
      v28 = *v26;
      *((_DWORD *)v27 + 2) = *((_DWORD *)v26 + 2);
      *(_QWORD *)v27 = v28;
      v27 += 12;
      v26 = (uint64_t *)((char *)v26 + v25);
      --v22;
    }
    while (v22);
  }
  v32 = *(_BYTE *)(a1 + 22);
  memset(v39, 0, sizeof(v39));
  v40 = 0;
  v41 = v45;
  v42 = v32;
  v43 = 0;
  v44 = 0;
  v45[18] = 0;
  v46 = 0;
  v47 = xmmword_2260E5F20;
  v48 = xmmword_2260E5F20;
  v49 = 0x3F80000000000000;
  v33 = physx::ConvexMeshBuilder::computeHullPolygons((uint64_t)v39, v14, v16, a2 + 10, (uint64_t)v24, v36, v37, v38, a6, v35, a8, a9);
  physx::ConvexMeshBuilder::~ConvexMeshBuilder((physx::ConvexMeshBuilder *)v39);
  return v33;
}

uint64_t physx::Cooking::cookHeightField(uint64_t a1, uint64_t a2, void (***a3)(_QWORD, float *, uint64_t))
{
  uint64_t v6;
  int v11;
  uint64_t (**v13)(physx::Gu::HeightField *__hidden);
  int v14;
  void *v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  __int16 v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  int v24;
  uint64_t v25;
  fenv_t v26;

  fegetenv(&v26);
  fesetenv(MEMORY[0x24BDAC750]);
  v6 = 0;
  if (*(_DWORD *)(a2 + 4) >= 2u
    && *(_DWORD *)a2 >= 2u
    && *(_DWORD *)(a2 + 8) == 1
    && *(_DWORD *)(a2 + 16) >= 4u
    && *(float *)(a2 + 32) >= 0.0
    && *(unsigned __int16 *)(a2 + 36) <= 1u)
  {
    v14 = 196609;
    v16 = 1;
    v13 = off_24ED91948;
    v15 = &unk_24ED91A18;
    v22 = 0;
    v23 = 0;
    v24 = 0;
    v25 = 0;
    v21 = 1;
    v17 = 0;
    v19 = 0;
    v20 = 0;
    v18 = 0;
    if ((physx::Gu::HeightField::loadFromDesc((physx::Gu::HeightField *)&v13, (int32x2_t *)a2) & 1) != 0)
    {
      v11 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 24))(a1);
      v6 = physx::saveHeightField((uint64_t)&v13, a3, v11);
      if ((v14 & 0x10000) != 0)
      {
        if (v18)
          (*(void (**)(uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
LABEL_25:
        v18 = 0;
      }
    }
    else
    {
      if ((v14 & 0x10000) != 0)
      {
        if (v18)
          (*(void (**)(uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
        v6 = 0;
        goto LABEL_25;
      }
      v6 = 0;
    }
    v13 = off_24ED91948;
    v15 = &unk_24ED91A18;
    if ((v14 & 0x10000) != 0 && v18)
      (*(void (**)(uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
  }
  fesetenv(&v26);
  return v6;
}

uint64_t physx::Cooking::createHeightField(uint64_t a1, uint64_t a2, uint64_t (***a3)(_QWORD, uint64_t, uint64_t))
{
  uint64_t v5;
  uint64_t v10;
  const char *v11;
  uint64_t v12;
  uint64_t v13;
  fenv_t v15[2];

  fegetenv(v15);
  fesetenv(MEMORY[0x24BDAC750]);
  v5 = 0;
  if (*(_DWORD *)(a2 + 4) >= 2u
    && *(_DWORD *)a2 >= 2u
    && *(_DWORD *)(a2 + 8) == 1
    && *(_DWORD *)(a2 + 16) >= 4u
    && *(float *)(a2 + 32) >= 0.0
    && *(unsigned __int16 *)(a2 + 36) <= 1u)
  {
    v10 = physx::shdfnd::Foundation::mInstance;
    if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)physx::shdfnd::Foundation::mInstance + 40))(physx::shdfnd::Foundation::mInstance))
      v11 = "static const char *physx::shdfnd::ReflectionAllocator<physx::Gu::HeightField>::getName() [T = physx::Gu::HeightField]";
    else
      v11 = "<allocation names disabled>";
    v12 = (*(uint64_t (**)(uint64_t, uint64_t, const char *, const char *, uint64_t))(*(_QWORD *)(v10 + 24) + 16))(v10 + 24, 136, v11, "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/physxcooking/src/Cooking.cpp", 456);
    *(_DWORD *)(v12 + 8) = 196609;
    *(_DWORD *)(v12 + 24) = 1;
    *(_QWORD *)v12 = off_24ED91948;
    *(_QWORD *)(v12 + 16) = &unk_24ED91A18;
    *(_QWORD *)(v12 + 104) = 0;
    *(_QWORD *)(v12 + 112) = 0;
    *(_DWORD *)(v12 + 120) = 0;
    *(_QWORD *)(v12 + 128) = 0;
    *(_DWORD *)(v12 + 96) = 1;
    *(_QWORD *)(v12 + 56) = 0;
    *(_DWORD *)(v12 + 88) = 0;
    *(_WORD *)(v12 + 92) = 0;
    *(_QWORD *)(v12 + 80) = 0;
    v5 = 0;
    if (physx::Gu::HeightField::loadFromDesc((physx::Gu::HeightField *)v12, (int32x2_t *)a2))
    {
      v13 = (**a3)(a3, 1, v12 + 32);
      v5 = v13;
      if (v13)
      {
        *(_QWORD *)(v13 + 104) = *(_QWORD *)(v12 + 104);
        *(_QWORD *)(v13 + 112) = *(_QWORD *)(v12 + 112);
        *(_DWORD *)(v13 + 120) = *(_DWORD *)(v12 + 120);
      }
    }
    (*(void (**)(uint64_t))(*(_QWORD *)v12 + 32))(v12);
  }
  fesetenv(v15);
  return v5;
}

uint64_t physx::Cooking::cookBVHStructure(uint64_t a1, uint64_t a2, uint64_t (***a3)(_QWORD, unsigned int *, uint64_t))
{
  BOOL v6;
  BOOL v7;
  uint64_t v8;
  int v9;
  unint64_t v10;
  int v11;
  unint64_t v12;
  uint64_t v13;
  unsigned int v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unsigned int v22;
  __int128 v24;
  __int128 v25;
  fenv_t v26;
  unsigned int v27;

  fegetenv(&v26);
  fesetenv(MEMORY[0x24BDAC750]);
  if (*(_QWORD *)(a2 + 8))
    v6 = *(_DWORD *)a2 > 0x17u;
  else
    v6 = 0;
  v7 = !v6 || *(_DWORD *)(a2 + 16) == 0;
  v8 = !v7;
  if (!v7)
  {
    v24 = 0u;
    v25 = 0u;
    physx::BVHStructureBuilder::loadFromDesc((uint64_t)&v24, (unsigned int *)a2);
    v9 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 24))(a1);
    if (physx::writeHeader(66, 86, 72, 83, 1u, v9, (void (***)(_QWORD, _QWORD, _QWORD))a3))
    {
      v10 = DWORD2(v24);
      v27 = DWORD2(v24);
      if (v9)
        v27 = bswap32(DWORD2(v24));
      (**a3)(a3, &v27, 4);
      v11 = HIDWORD(v24);
      v27 = HIDWORD(v24);
      if (v9)
        v27 = bswap32(HIDWORD(v24));
      (**a3)(a3, &v27, 4);
      if ((_DWORD)v10)
      {
        v12 = 0;
        v13 = *((_QWORD *)&v25 + 1);
        do
        {
          v14 = *(_DWORD *)(v13 + 4 * v12);
          v27 = v14;
          if (v9)
            v27 = bswap32(v14);
          (**a3)(a3, &v27, 4);
          ++v12;
        }
        while (v12 < v10);
        v15 = 0;
        v16 = v24;
        v17 = 12;
        do
        {
          physx::writeFloatBuffer(v16 + v17 - 12, 3, v9, (uint64_t (***)(_QWORD, _QWORD, _QWORD))a3);
          v16 = v24;
          physx::writeFloatBuffer(v24 + v17, 3, v9, (uint64_t (***)(_QWORD, _QWORD, _QWORD))a3);
          ++v15;
          v17 += 24;
        }
        while (v15 < DWORD2(v24));
        v11 = HIDWORD(v24);
      }
      if (v11)
      {
        v18 = 0;
        v19 = 0;
        v20 = v25;
        do
        {
          v21 = v20 + v18;
          v22 = *(_DWORD *)(v21 + 24);
          v27 = v22;
          if (v9)
            v27 = bswap32(v22);
          (**a3)(a3, &v27, 4);
          physx::writeFloatBuffer(v21, 3, v9, (uint64_t (***)(_QWORD, _QWORD, _QWORD))a3);
          v20 = v25;
          physx::writeFloatBuffer(v25 + v18 + 12, 3, v9, (uint64_t (***)(_QWORD, _QWORD, _QWORD))a3);
          ++v19;
          v18 += 28;
        }
        while (v19 < HIDWORD(v24));
      }
    }
    physx::BVHStructureBuilder::~BVHStructureBuilder((physx::BVHStructureBuilder *)&v24);
  }
  fesetenv(&v26);
  return v8;
}

void physx::BVHStructureBuilder::loadFromDesc(uint64_t a1, unsigned int *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  float32x4_t v9;
  float32x4_t *v10;
  float32x4_t v11;
  float32x4_t v12;
  float32x4_t v13;
  int8x16_t v14;
  unsigned int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unsigned int v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  _QWORD *v28;
  unint64_t v29;
  int v30;
  unsigned int *v31;
  uint64_t v32;
  unint64_t v33;
  int v34;
  unint64_t v35;
  unint64_t v36;
  BOOL v37;
  int v38;
  int v39;
  __int128 v40;
  __int128 v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;

  v4 = a2[4];
  if ((_DWORD)v4 == -1)
  {
    v5 = 0;
    *(_QWORD *)a1 = 0;
    goto LABEL_4;
  }
  v5 = (*(uint64_t (**)(uint64_t, uint64_t, const char *, const char *, uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24)
                                                                                        + 16))(physx::shdfnd::Foundation::mInstance + 24, 24 * (v4 + 1), "NonTrackedAlloc", "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/physxcooking/src/BVHStructureBuilder.cpp", 128);
  *(_QWORD *)a1 = v5;
  if ((_DWORD)v4)
  {
LABEL_4:
    v6 = 0;
    v7 = *((_QWORD *)a2 + 1);
    v8 = *a2;
    v9 = (float32x4_t)vdupq_n_s32(0x3BA3D70Au);
    do
    {
      v10 = (float32x4_t *)(v5 + v6);
      v11 = *(float32x4_t *)(v7 + 12);
      v12 = vmulq_f32(vsubq_f32(v11, *(float32x4_t *)v7), v9);
      v13 = vsubq_f32(*(float32x4_t *)v7, v12);
      v14 = (int8x16_t)vaddq_f32(v11, v12);
      v13.i32[3] = v14.i32[0];
      *v10 = v13;
      v10[1].i64[0] = vextq_s8(v14, v14, 4uLL).u64[0];
      v7 += v8;
      v6 += 24;
    }
    while (24 * v4 != v6);
  }
  *(_DWORD *)(a1 + 8) = v4;
  v15 = a2[4];
  v44 = v5;
  v45 = 0;
  LODWORD(v43) = 4;
  HIDWORD(v43) = v15;
  v42 = 0;
  v40 = 0u;
  v41 = 0u;
  physx::Gu::buildAABBTree((uint64_t)&v43, (physx::Gu::NodeAllocator *)&v40, &v42, (uint64_t *)(a1 + 24));
  v16 = v42;
  *(_DWORD *)(a1 + 12) = v42;
  if ((_DWORD)v16)
    v17 = (*(uint64_t (**)(uint64_t, uint64_t, const char *, const char *, uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24)
                                                                                           + 16))(physx::shdfnd::Foundation::mInstance + 24, 28 * v16, "NonTrackedAlloc", "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/physxcooking/src/BVHStructureBuilder.cpp", 154);
  else
    v17 = 0;
  *(_QWORD *)(a1 + 16) = v17;
  v18 = v41;
  if ((_DWORD)v41)
  {
    v19 = 0;
    v20 = 0;
    v21 = *((_QWORD *)&v40 + 1);
    v22 = *((_QWORD *)&v40 + 1) + 8;
    do
    {
      v23 = (uint64_t *)(v21 + 16 * v19);
      v24 = *((unsigned int *)v23 + 2);
      if ((_DWORD)v24)
      {
        v25 = 0;
        v26 = *v23;
        do
        {
          v27 = (_QWORD *)(v26 + 40 * v25);
          v28 = (_QWORD *)(v17 + 28 * v20);
          *v28 = *v27;
          v28[1] = v27[1];
          v28[2] = v27[2];
          v29 = v27[3];
          if (v29)
          {
            v30 = 0;
            v31 = (unsigned int *)v22;
            v32 = v18;
            do
            {
              v33 = *((_QWORD *)v31 - 1);
              v34 = *v31;
              v35 = v33 + 40 * *v31;
              v37 = v29 >= v33;
              v36 = v29 - v33;
              v37 = !v37 || v29 >= v35;
              if (!v37)
              {
                v39 = -858993459 * (v36 >> 3);
                goto LABEL_23;
              }
              v31 += 4;
              v30 += v34;
              --v32;
            }
            while (v32);
            v39 = -1;
LABEL_23:
            v38 = 2 * (v39 + v30);
          }
          else
          {
            v38 = (32 * *(_DWORD *)(v26 + 40 * v25 + 32)) | (2 * (*(_DWORD *)(v26 + 40 * v25 + 36) & 0xF)) | 1;
          }
          *(_DWORD *)(v17 + 28 * v20++ + 24) = v38;
          ++v25;
        }
        while (v25 != v24);
      }
      ++v19;
    }
    while (v19 != v18);
  }
  physx::Gu::NodeAllocator::release((physx::Gu::NodeAllocator *)&v40);
  physx::Gu::NodeAllocator::~NodeAllocator((physx::Gu::NodeAllocator *)&v40);
  v43 = 0;
  v44 = 0;
  if (v45)
    (*(void (**)(uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
}

uint64_t physx::Cooking::createBVHStructure(uint64_t a1, uint64_t a2, uint64_t (***a3)(_QWORD, uint64_t, _QWORD *))
{
  BOOL v5;
  uint64_t v7;
  _QWORD v9[2];
  int8x16_t v10;
  __int128 v11;
  int8x16_t v12;
  fenv_t v13;

  fegetenv(&v13);
  fesetenv(MEMORY[0x24BDAC750]);
  if (*(_QWORD *)(a2 + 8))
    v5 = *(_DWORD *)a2 >= 0x18u;
  else
    v5 = 0;
  if (!v5 || *(_DWORD *)(a2 + 16) == 0)
  {
    v7 = 0;
  }
  else
  {
    v11 = 0u;
    v12 = 0u;
    physx::BVHStructureBuilder::loadFromDesc((uint64_t)&v11, (unsigned int *)a2);
    v9[0] = *((_QWORD *)&v11 + 1);
    v9[1] = v11;
    v10 = vextq_s8(v12, v12, 8uLL);
    v11 = 0u;
    v12 = 0u;
    v7 = (**a3)(a3, 17, v9);
    physx::BVHStructureBuilder::~BVHStructureBuilder((physx::BVHStructureBuilder *)&v11);
  }
  fesetenv(&v13);
  return v7;
}

__n128 PxCreateCooking(physx::shdfnd::Foundation *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  const char *v10;
  uint64_t v11;
  __int128 v12;
  __n128 result;
  char v14;

  physx::shdfnd::Foundation::incRefCount(a1, a2, a3, a4, a5, a6, a7, a8, v14);
  v9 = physx::shdfnd::Foundation::mInstance;
  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)physx::shdfnd::Foundation::mInstance + 40))(physx::shdfnd::Foundation::mInstance))
    v10 = "static const char *physx::shdfnd::ReflectionAllocator<physx::Cooking>::getName() [T = physx::Cooking]";
  else
    v10 = "<allocation names disabled>";
  v11 = (*(uint64_t (**)(uint64_t, uint64_t, const char *, const char *, uint64_t))(*(_QWORD *)(v9 + 24) + 16))(v9 + 24, 56, v10, "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/physxcooking/src/Cooking.cpp", 543);
  *(_QWORD *)v11 = &off_24ED928F0;
  v12 = *(_OWORD *)a3;
  *(_QWORD *)(v11 + 24) = *(_QWORD *)(a3 + 16);
  *(_OWORD *)(v11 + 8) = v12;
  *(_DWORD *)(v11 + 32) = *(_DWORD *)(a3 + 24);
  result = *(__n128 *)(a3 + 28);
  *(_DWORD *)(v11 + 52) = *(_DWORD *)(a3 + 44);
  *(__n128 *)(v11 + 36) = result;
  return result;
}

physx::ReducedVertexCloud *physx::ReducedVertexCloud::Clean(physx::ReducedVertexCloud *this)
{
  if (*((_QWORD *)this + 4))
    (*(void (**)(uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
  *((_QWORD *)this + 4) = 0;
  if (*((_QWORD *)this + 3))
    (*(void (**)(uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
  *((_QWORD *)this + 3) = 0;
  return this;
}

uint64_t physx::ReducedVertexCloud::Reduce(unsigned int *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  const char *v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  const char *v13;
  uint64_t v14;
  _DWORD *v15;
  uint64_t v16;
  uint64_t v17;
  int *v18;
  int v19;
  int *v20;
  _DWORD *v21;
  uint64_t v22;
  int v23;
  uint64_t v24;
  uint64_t v25;
  int *v26;
  int v27;
  unsigned int *v28;
  uint64_t v29;
  int *v30;
  uint64_t v31;
  int v32;
  uint64_t v33;
  uint64_t v34;
  int *v35;
  uint64_t v36;
  unsigned int v37;
  int *v38;
  int v39;
  int v40;
  int v41;
  unsigned int v42;
  int *v43;
  void (**v45)(physx::Cm::RadixSortBuffered *__hidden);
  unsigned int v46;
  __int128 v47;
  __int128 v48;
  uint64_t v49;
  char v50;

  v4 = *(unsigned int *)physx::ReducedVertexCloud::Clean((physx::ReducedVertexCloud *)a1);
  if ((_DWORD)v4)
  {
    v5 = 4 * v4;
    v6 = physx::shdfnd::Foundation::mInstance;
    if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)physx::shdfnd::Foundation::mInstance + 40))(physx::shdfnd::Foundation::mInstance))
      v7 = "static const char *physx::shdfnd::ReflectionAllocator<unsigned int>::getName() [T = unsigned int]";
    else
      v7 = "<allocation names disabled>";
    v8 = (*(uint64_t (**)(uint64_t, uint64_t, const char *, const char *, uint64_t))(*(_QWORD *)(v6 + 24) + 16))(v6 + 24, v5, v7, "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/physxcooking/src/CookingUtils.cpp", 75);
    v9 = *a1;
    *((_QWORD *)a1 + 4) = v8;
    v10 = a1 + 8;
    if ((_DWORD)v9)
    {
      v11 = 4 * v9;
      v12 = physx::shdfnd::Foundation::mInstance;
      if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)physx::shdfnd::Foundation::mInstance + 40))(physx::shdfnd::Foundation::mInstance))
        v13 = "static const char *physx::shdfnd::ReflectionAllocator<float>::getName() [T = float]";
      else
        v13 = "<allocation names disabled>";
      v14 = (*(uint64_t (**)(uint64_t, uint64_t, const char *, const char *, uint64_t))(*(_QWORD *)(v12 + 24)
                                                                                             + 16))(v12 + 24, v11, v13, "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/physxcooking/src/CookingUtils.cpp", 77);
      v15 = (_DWORD *)v14;
      v16 = *a1;
      if ((_DWORD)v16)
      {
        v17 = 0;
        v18 = (int *)*((_QWORD *)a1 + 1);
        do
        {
          v19 = *v18;
          v18 += 3;
          *(_DWORD *)(v14 + v17) = v19;
          v17 += 4;
        }
        while (4 * v16 != v17);
      }
    }
    else
    {
      v15 = 0;
    }
  }
  else
  {
    v15 = 0;
    *((_QWORD *)a1 + 4) = 0;
    v10 = a1 + 8;
  }
  v49 = 0;
  v47 = 0u;
  v48 = 0u;
  v50 = 1;
  v46 = 0x80000000;
  v45 = &off_24ED90D50;
  physx::Cm::RadixSortBuffered::Sort((uint64_t)&v45);
  if (*a1)
  {
    v20 = (int *)(*((_QWORD *)a1 + 1) + 4);
    v21 = v15;
    v22 = *a1;
    do
    {
      v23 = *v20;
      v20 += 3;
      *v21++ = v23;
      --v22;
    }
    while (v22);
  }
  physx::Cm::RadixSortBuffered::Sort((uint64_t)&v45);
  v24 = *a1;
  if ((_DWORD)v24)
  {
    v25 = 0;
    v26 = (int *)(*((_QWORD *)a1 + 1) + 8);
    do
    {
      v27 = *v26;
      v26 += 3;
      v15[v25++] = v27;
    }
    while (v24 != v25);
    physx::Cm::RadixSortBuffered::Sort((uint64_t)&v45);
  }
  else if (!v15)
  {
    a1[4] = 0;
    v30 = (int *)(a1 + 4);
LABEL_37:
    v31 = 0;
    *((_QWORD *)a1 + 3) = 0;
    if (!a2)
      goto LABEL_35;
    goto LABEL_34;
  }
  v28 = (unsigned int *)v47;
  (*(void (**)(uint64_t, _DWORD *))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24, v15);
  v29 = *a1;
  a1[4] = 0;
  v30 = (int *)(a1 + 4);
  if (!(_DWORD)v29)
    goto LABEL_37;
  v31 = (*(uint64_t (**)(uint64_t, uint64_t, const char *, const char *, uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24)
                                                                                         + 16))(physx::shdfnd::Foundation::mInstance + 24, 12 * v29, "NonTrackedAlloc", "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/physxcooking/src/CookingUtils.cpp", 98);
  v32 = *a1;
  *((_QWORD *)a1 + 3) = v31;
  if (v32)
  {
    v33 = *((_QWORD *)a1 + 1);
    v34 = *((_QWORD *)a1 + 4);
    v35 = &dword_2261AAA30;
    while (1)
    {
      v37 = *v28++;
      v36 = v37;
      v38 = (int *)(v33 + 12 * v37);
      v39 = *v38;
      if (*v38 != *v35)
        break;
      v40 = v38[1];
      if (v40 != v35[1] || v38[2] != v35[2])
        goto LABEL_31;
      v41 = *v30;
LABEL_32:
      *(_DWORD *)(v34 + 4 * v36) = v41 - 1;
      v35 = v38;
      if (!--v32)
        goto LABEL_33;
    }
    v40 = *(_DWORD *)(v33 + 12 * v36 + 4);
LABEL_31:
    v42 = *v30;
    v41 = *v30 + 1;
    *v30 = v41;
    v43 = (int *)(v31 + 12 * v42);
    *v43 = v39;
    v43[1] = v40;
    v43[2] = *(_DWORD *)(v33 + 12 * v36 + 8);
    goto LABEL_32;
  }
LABEL_33:
  if (a2)
  {
LABEL_34:
    *(_QWORD *)(a2 + 16) = *v10;
    *(_DWORD *)(a2 + 8) = *v30;
    *(_QWORD *)a2 = v31;
  }
LABEL_35:
  v45 = &off_24ED90D50;
  physx::Cm::RadixSortBuffered::reset((uint64_t)&v45);
  return 1;
}

void physx::Gu::EdgeList::~EdgeList(physx::Gu::EdgeList *this)
{
  if (*((_QWORD *)this + 5))
    (*(void (**)(uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
  *((_QWORD *)this + 5) = 0;
  if (*((_QWORD *)this + 4))
    (*(void (**)(uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
  *((_QWORD *)this + 4) = 0;
  if (*((_QWORD *)this + 1))
    (*(void (**)(uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
  *((_QWORD *)this + 1) = 0;
  if (*((_QWORD *)this + 3))
    (*(void (**)(uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
  *((_QWORD *)this + 3) = 0;
}

uint64_t physx::Gu::EdgeListBuilder::createFacesToEdges(physx::Gu::EdgeListBuilder *this, unsigned int a2, unint64_t a3, unint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v12;
  uint64_t v13;
  const char *v14;
  uint64_t v15;
  const char *v16;
  uint64_t v17;
  uint64_t v18;
  const char *v19;
  uint64_t v20;
  uint64_t v21;
  const char *v22;
  char *v23;
  uint64_t v24;
  unsigned int v25;
  unsigned int v26;
  unsigned int v27;
  unsigned int v28;
  int v29;
  uint64_t v30;
  unsigned int v31;
  unsigned int v32;
  unsigned int v33;
  unsigned int v34;
  unsigned int *v36;
  uint64_t v37;
  uint64_t v38;
  int v39;
  int v40;
  int v41;
  unsigned int v42;
  unsigned int v43;
  int v44;
  uint64_t v45;
  int *v47;
  uint64_t v48;
  void *v49;
  size_t v50;
  char v51;
  unsigned int v52;
  void (**v53)(physx::Cm::RadixSortBuffered *__hidden);
  unsigned int v54;
  __int128 v55;
  __int128 v56;
  uint64_t v57;
  char v58;

  if (!a2 || !(a3 | a4))
  {
    physx::shdfnd::Foundation::error(physx::shdfnd::Foundation::mInstance, 8, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/physxcooking/src/EdgeList.cpp", 147, "EdgeList::CreateFacesToEdges: NULL parameter!", a6, a7, a8, v51);
    return 0;
  }
  if (*((_QWORD *)this + 3))
    return 1;
  v12 = 3 * a2;
  v13 = physx::shdfnd::Foundation::mInstance;
  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)physx::shdfnd::Foundation::mInstance + 40))(physx::shdfnd::Foundation::mInstance))
    v14 = "static const char *physx::shdfnd::ReflectionAllocator<physx::Gu::EdgeTriangleData>::getName() [T = physx::Gu::"
          "EdgeTriangleData]";
  else
    v14 = "<allocation names disabled>";
  *((_QWORD *)this + 3) = (*(uint64_t (**)(uint64_t, uint64_t, const char *, const char *, uint64_t))(*(_QWORD *)(v13 + 24) + 16))(v13 + 24, 4 * v12, v14, "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/physxcooking/src/EdgeList.cpp", 155);
  v15 = physx::shdfnd::Foundation::mInstance;
  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)physx::shdfnd::Foundation::mInstance + 40))(physx::shdfnd::Foundation::mInstance))
    v16 = "static const char *physx::shdfnd::ReflectionAllocator<unsigned int>::getName() [T = unsigned int]";
  else
    v16 = "<allocation names disabled>";
  v17 = (*(uint64_t (**)(uint64_t, uint64_t, const char *, const char *, uint64_t))(*(_QWORD *)(v15 + 24) + 16))(v15 + 24, 12 * a2, v16, "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/physxcooking/src/EdgeList.cpp", 156);
  v18 = physx::shdfnd::Foundation::mInstance;
  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)physx::shdfnd::Foundation::mInstance + 40))(physx::shdfnd::Foundation::mInstance))
    v19 = "static const char *physx::shdfnd::ReflectionAllocator<unsigned int>::getName() [T = unsigned int]";
  else
    v19 = "<allocation names disabled>";
  v20 = (*(uint64_t (**)(uint64_t, uint64_t, const char *, const char *, uint64_t))(*(_QWORD *)(v18 + 24) + 16))(v18 + 24, 12 * a2, v19, "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/physxcooking/src/EdgeList.cpp", 157);
  v52 = 3 * a2;
  v21 = physx::shdfnd::Foundation::mInstance;
  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)physx::shdfnd::Foundation::mInstance + 40))(physx::shdfnd::Foundation::mInstance))
    v22 = "static const char *physx::shdfnd::ReflectionAllocator<physx::Gu::EdgeData>::getName() [T = physx::Gu::EdgeData]";
  else
    v22 = "<allocation names disabled>";
  v23 = (char *)(*(uint64_t (**)(uint64_t, uint64_t, const char *, const char *, uint64_t))(*(_QWORD *)(v21 + 24)
                                                                                                 + 16))(v21 + 24, 24 * a2, v22, "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/physxcooking/src/EdgeList.cpp", 158);
  v24 = 0;
  do
  {
    if (a3)
    {
      v25 = *(_DWORD *)(a3 + 4 * v24);
      v26 = *(_DWORD *)(a3 + 4 * (v24 + 1));
      v27 = *(_DWORD *)(a3 + 4 * (v24 + 2));
    }
    else
    {
      if (!a4)
      {
        v28 = 0;
        v25 = 0;
        v27 = 2;
        v29 = 1;
        v26 = 1;
        goto LABEL_27;
      }
      v25 = *(unsigned __int16 *)(a4 + 2 * v24);
      v26 = *(unsigned __int16 *)(a4 + 2 * (v24 + 1));
      v27 = *(unsigned __int16 *)(a4 + 2 * (v24 + 2));
    }
    if (v25 >= v26)
      v28 = v26;
    else
      v28 = v25;
    if (v25 <= v26)
      v29 = v26;
    else
      v29 = v25;
LABEL_27:
    v30 = 4 * v24;
    *(_DWORD *)(v17 + v30) = v28;
    *(_DWORD *)(v20 + v30) = v29;
    if (v26 >= v27)
      v31 = v27;
    else
      v31 = v26;
    if (v26 <= v27)
      v26 = v27;
    v32 = v24 + 1;
    *(_DWORD *)(v17 + 4 * v32) = v31;
    *(_DWORD *)(v20 + 4 * v32) = v26;
    if (v27 >= v25)
      v33 = v25;
    else
      v33 = v27;
    if (v27 > v25)
      v25 = v27;
    v34 = v24 + 2;
    *(_DWORD *)(v17 + 4 * v34) = v33;
    *(_DWORD *)(v20 + 4 * v34) = v25;
    v24 += 3;
  }
  while (v12 != v24);
  v57 = 0;
  v55 = 0u;
  v56 = 0u;
  v58 = 1;
  v54 = 0x80000000;
  v53 = &off_24ED90D50;
  physx::Cm::RadixSortBuffered::Sort((uint64_t)&v53);
  physx::Cm::RadixSortBuffered::Sort((uint64_t)&v53);
  v36 = (unsigned int *)v55;
  *(_DWORD *)this = 0;
  *((_DWORD *)this + 4) = a2;
  if (v52 <= 1)
    v37 = 1;
  else
    v37 = v52;
  v38 = *((_QWORD *)this + 3);
  v39 = -1;
  v40 = -1;
  do
  {
    v41 = v40;
    v43 = *v36++;
    v42 = v43;
    v40 = *(_DWORD *)(v17 + 4 * v43);
    v44 = v39;
    v39 = *(_DWORD *)(v20 + 4 * v43);
    v45 = *(unsigned int *)this;
    if (v40 != v41 || v39 != v44)
    {
      v47 = (int *)&v23[8 * v45];
      *v47 = v40;
      v47[1] = v39;
      LODWORD(v45) = v45 + 1;
      *(_DWORD *)this = v45;
    }
    *(_DWORD *)(v38 + 12 * (v42 / 3) + 4 * (v42 % 3)) = v45 - 1;
    --v37;
  }
  while (v37);
  v48 = *(unsigned int *)this;
  if ((_DWORD)v48)
  {
    v49 = (void *)(*(uint64_t (**)(uint64_t, uint64_t, const char *, const char *, uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 16))(physx::shdfnd::Foundation::mInstance + 24, 8 * v48, "NonTrackedAlloc", "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/physxcooking/src/EdgeList.cpp", 212);
    v50 = (8 * *(_DWORD *)this);
  }
  else
  {
    v50 = 0;
    v49 = 0;
  }
  *((_QWORD *)this + 1) = v49;
  memcpy(v49, v23, v50);
  if (v23)
    (*(void (**)(uint64_t, char *))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24, v23);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24, v20);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24, v17);
  v53 = &off_24ED90D50;
  physx::Cm::RadixSortBuffered::reset((uint64_t)&v53);
  return 1;
}

uint64_t physx::Gu::EdgeListBuilder::createEdgesToFaces(physx::Gu::EdgeListBuilder *this, unsigned int a2, const unsigned int *a3, const unsigned __int16 *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t FacesToEdges;
  uint64_t v11;
  void *v12;
  size_t v13;
  uint64_t v14;
  uint64_t v15;
  unsigned int *v16;
  uint64_t v17;
  uint64_t v18;
  unsigned int v19;
  uint64_t v20;
  int v21;
  uint64_t v22;
  _DWORD *v23;
  unsigned int v24;
  uint64_t v25;
  uint64_t v26;
  unsigned int *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unsigned int v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  int v36;
  uint64_t v37;
  _DWORD *v38;

  FacesToEdges = physx::Gu::EdgeListBuilder::createFacesToEdges(this, a2, (unint64_t)a3, (unint64_t)a4, a5, a6, a7, a8);
  if ((_DWORD)FacesToEdges)
  {
    v11 = *(unsigned int *)this;
    if ((_DWORD)v11)
    {
      v12 = (void *)(*(uint64_t (**)(uint64_t, uint64_t, const char *, const char *, uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 16))(physx::shdfnd::Foundation::mInstance + 24, 8 * v11, "NonTrackedAlloc", "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/physxcooking/src/EdgeList.cpp", 246);
      v13 = (8 * *(_DWORD *)this);
    }
    else
    {
      v13 = 0;
      v12 = 0;
    }
    *((_QWORD *)this + 4) = v12;
    bzero(v12, v13);
    v14 = *((_QWORD *)this + 4);
    if (a2)
    {
      v15 = a2;
      v16 = (unsigned int *)(*((_QWORD *)this + 3) + 8);
      do
      {
        v17 = *(v16 - 1);
        v18 = v14 + 8 * *(v16 - 2);
        ++*(_WORD *)(v18 + 2);
        ++*(_WORD *)(v14 + 8 * v17 + 2);
        v19 = *v16;
        v16 += 3;
        ++*(_WORD *)(v14 + 8 * v19 + 2);
        --v15;
      }
      while (v15);
    }
    *(_DWORD *)(v14 + 4) = 0;
    v20 = *(unsigned int *)this;
    if (v20 >= 2)
    {
      v21 = 0;
      v22 = v20 - 1;
      v23 = (_DWORD *)(v14 + 12);
      do
      {
        v21 += *((unsigned __int16 *)v23 - 5);
        *v23 = v21;
        v23 += 2;
        --v22;
      }
      while (v22);
    }
    v24 = *(_DWORD *)(v14 + 8 * (v20 - 1) + 4)
        + *(unsigned __int16 *)(v14 + 8 * (v20 - 1) + 2);
    if (v24)
    {
      v25 = (*(uint64_t (**)(uint64_t, uint64_t, const char *, const char *, uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24)
                                                                                             + 16))(physx::shdfnd::Foundation::mInstance + 24, 4 * v24, "NonTrackedAlloc", "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/physxcooking/src/EdgeList.cpp", 265);
      v14 = *((_QWORD *)this + 4);
    }
    else
    {
      v25 = 0;
    }
    *((_QWORD *)this + 5) = v25;
    if (a2)
    {
      v26 = 0;
      v27 = (unsigned int *)(*((_QWORD *)this + 3) + 8);
      do
      {
        v28 = v14 + 8 * *(v27 - 2);
        v29 = *(unsigned int *)(v28 + 4);
        *(_DWORD *)(v28 + 4) = v29 + 1;
        *(_DWORD *)(v25 + 4 * v29) = v26;
        v30 = v14 + 8 * *(v27 - 1);
        v31 = *(unsigned int *)(v30 + 4);
        *(_DWORD *)(v30 + 4) = v31 + 1;
        *(_DWORD *)(v25 + 4 * v31) = v26;
        v32 = *v27;
        v27 += 3;
        v33 = v14 + 8 * v32;
        v34 = *(unsigned int *)(v33 + 4);
        *(_DWORD *)(v33 + 4) = v34 + 1;
        *(_DWORD *)(v25 + 4 * v34) = v26++;
      }
      while (a2 != v26);
    }
    *(_DWORD *)(v14 + 4) = 0;
    v35 = *(unsigned int *)this;
    if (v35 >= 2)
    {
      v36 = 0;
      v37 = v35 - 1;
      v38 = (_DWORD *)(v14 + 12);
      do
      {
        v36 += *((unsigned __int16 *)v38 - 5);
        *v38 = v36;
        v38 += 2;
        --v37;
      }
      while (v37);
    }
  }
  return FacesToEdges;
}

uint64_t physx::Gu::EdgeListBuilder::computeActiveEdges(unsigned int *a1, unsigned int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, float a9)
{
  uint64_t v11;
  unsigned int *v12;
  uint64_t v13;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  BOOL *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unsigned int v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unsigned int v27;
  unsigned int v28;
  unsigned int v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unsigned int v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  float *v41;
  float *v42;
  float *v43;
  float *v44;
  uint64_t v45;
  unsigned int v46;
  int v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  BOOL v53;
  BOOL v54;
  BOOL v55;
  BOOL v56;
  BOOL v57;
  float v58;
  float v59;
  float v60;
  float v61;
  float v62;
  float v63;
  float v64;
  float v65;
  float v66;
  float v67;
  float v68;
  float *v69;
  float *v70;
  float *v71;
  float v72;
  float v73;
  float v74;
  float v75;
  float v76;
  float v77;
  float v78;
  float v79;
  float v80;
  float v81;
  float v82;
  float v83;
  float v84;
  BOOL v87;
  BOOL v89;
  float *v91;
  float *v92;
  float *v93;
  float v94;
  float v95;
  float v96;
  float v97;
  float v98;
  float v99;
  float v100;
  float v101;
  float v102;
  float v103;
  float v104;
  float v105;
  float v106;
  float *v107;
  float *v108;
  float *v109;
  float v110;
  float v111;
  float v112;
  float v113;
  float v114;
  float v115;
  float v116;
  float v117;
  float v118;
  float v119;
  float v120;
  float v121;
  float v122;
  BOOL v123;
  float v124;
  float v125;
  float v126;
  float v127;
  float v128;
  float v129;
  float v130;
  float v131;
  float v132;
  float v133;
  float v134;
  float *v135;
  float *v136;
  float *v137;
  float v138;
  float v139;
  float v140;
  float v141;
  float v142;
  float v143;
  float v144;
  float v145;
  float v146;
  float v147;
  float v148;
  float v149;
  float v150;
  float v151;
  float v152;
  float v153;
  float v154;
  float *v155;
  float *v156;
  float *v157;
  float v158;
  float v159;
  float v160;
  float v161;
  float v162;
  float v163;
  float v164;
  float v165;
  float v166;
  float v167;
  float v168;
  float v169;
  float v170;
  BOOL v171;
  float v172;
  float v173;
  float v174;
  float v175;
  float *v176;
  float *v177;
  float *v178;
  float v179;
  float v180;
  float v181;
  float v182;
  float v183;
  float v184;
  float v185;
  float v186;
  float v187;
  float v188;
  float v189;
  float v190;
  float v191;
  float v192;
  float v193;
  float v194;
  uint64_t v195;
  uint64_t v196;
  float *v197;
  float *v198;
  float *v199;
  float v200;
  float v201;
  float v202;
  float v203;
  float v204;
  float v205;
  float v206;
  float v207;
  float v208;
  float v209;
  float v210;
  float v211;
  float v212;
  float v213;
  float v214;
  float v215;
  float v216;
  float v217;
  float v218;
  float v219;
  float v220;
  float v221;
  float v222;
  float v223;
  float v224;
  float v225;
  float v226;
  float v227;
  uint64_t v228;
  char *v229;
  uint64_t v230;
  unint64_t v232;
  uint64_t v233;
  uint64_t i;
  int v235;
  uint64_t v236;
  uint64_t v237;
  uint64_t v238;
  unsigned __int8 *v239;
  uint64_t v241;
  unsigned int v242;
  unsigned int v243;
  unsigned int v244;
  unsigned int v245;
  size_t v246;
  void *v247;
  uint64_t v248;
  uint64_t v249;
  uint64_t v250;
  uint64_t v251;
  int v252;
  int v253;
  int v254;
  uint64_t j;
  uint64_t v256;
  uint64_t v257;
  unint64_t v258;
  int v259;
  int v260;
  int v261;
  uint64_t k;
  int v263;
  char v264;
  float *v267;
  float *v268;
  float *v269;
  float *v270;
  float *v271;
  uint64_t v272;
  int v273;
  int v274;
  int v275;
  uint64_t v276;

  v276 = *MEMORY[0x24BDAC8D0];
  if (!a5 || !(a3 | a4))
  {
    v228 = physx::shdfnd::Foundation::mInstance;
    v229 = "EdgeList::ComputeActiveEdges: NULL parameter!";
    v230 = 310;
LABEL_141:
    physx::shdfnd::Foundation::error(v228, 8, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/physxcooking/src/EdgeList.cpp", v230, v229, a6, a7, a8, v264);
    return 0;
  }
  v11 = *a1;
  if (!(_DWORD)v11)
  {
    v228 = physx::shdfnd::Foundation::mInstance;
    v229 = "ActiveEdges::ComputeConvexEdges: no edges in edge list!";
    v230 = 317;
    goto LABEL_141;
  }
  v12 = (unsigned int *)*((_QWORD *)a1 + 1);
  if (!v12)
  {
    v228 = physx::shdfnd::Foundation::mInstance;
    v229 = "ActiveEdges::ComputeConvexEdges: no edge data in edge list!";
    v230 = 324;
    goto LABEL_141;
  }
  v13 = *((_QWORD *)a1 + 4);
  if (!v13)
  {
    v228 = physx::shdfnd::Foundation::mInstance;
    v229 = "ActiveEdges::ComputeConvexEdges: no edge-to-triangle in edge list!";
    v230 = 331;
    goto LABEL_141;
  }
  v272 = *((_QWORD *)a1 + 5);
  if (!v272)
  {
    v228 = physx::shdfnd::Foundation::mInstance;
    v229 = "ActiveEdges::ComputeConvexEdges: no faces-by-edges in edge list!";
    v230 = 338;
    goto LABEL_141;
  }
  v18 = (*(uint64_t (**)(uint64_t, uint64_t, const char *, const char *, uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24)
                                                                                         + 16))(physx::shdfnd::Foundation::mInstance + 24, v11, "NonTrackedAlloc", "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/physxcooking/src/EdgeList.cpp", 343);
  v19 = (BOOL *)v18;
  do
  {
    v20 = *(unsigned __int16 *)(v13 + 2);
    if ((_DWORD)v20 == 1)
    {
LABEL_97:
      v123 = 1;
      goto LABEL_115;
    }
    if ((_DWORD)v20 == 2)
    {
      v21 = *(unsigned int *)(v13 + 4);
      v22 = (3 * *(_DWORD *)(v272 + 4 * v21));
      v23 = 3 * *(_DWORD *)(v272 + 4 * (v21 + 1));
      if (a3)
      {
        v24 = *(unsigned int *)(a3 + 4 * v22);
        v25 = *(unsigned int *)(a3 + 4 * (v22 + 1));
        v26 = *(unsigned int *)(a3 + 4 * (v22 + 2));
        v27 = *(_DWORD *)(a3 + 4 * v23);
        v28 = *(_DWORD *)(a3 + 4 * (v23 + 1));
        v29 = *(_DWORD *)(a3 + 4 * (v23 + 2));
      }
      else
      {
        v24 = *(unsigned __int16 *)(a4 + 2 * v22);
        v25 = *(unsigned __int16 *)(a4 + 2 * (v22 + 1));
        v26 = *(unsigned __int16 *)(a4 + 2 * (v22 + 2));
        v27 = *(unsigned __int16 *)(a4 + 2 * v23);
        v28 = *(unsigned __int16 *)(a4 + 2 * (v23 + 1));
        v29 = *(unsigned __int16 *)(a4 + 2 * (v23 + 2));
      }
      v35 = *v12;
      v36 = v12[1];
      if (v35 == v24)
      {
        v37 = v26;
        if (v36 != v25)
        {
          v37 = v25;
          goto LABEL_21;
        }
      }
      else
      {
        if (v35 != v25)
        {
          if (v35 == v26)
          {
            v37 = v24;
            if (v36 == v25)
              goto LABEL_102;
            v37 = v25;
            if (v36 == v24)
              goto LABEL_102;
          }
LABEL_101:
          v37 = -1;
          goto LABEL_102;
        }
        v37 = v26;
        if (v36 != v24)
        {
          v37 = v24;
LABEL_21:
          if (v36 == v26)
            goto LABEL_102;
          goto LABEL_101;
        }
      }
LABEL_102:
      v155 = (float *)(a5 + 12 * v27);
      v156 = (float *)(a5 + 12 * v28);
      v157 = (float *)(a5 + 12 * v29);
      v158 = v155[1];
      v159 = *v156 - *v155;
      v160 = v156[1] - v158;
      v161 = v155[2];
      v162 = v156[2] - v161;
      v163 = *v157 - *v155;
      v164 = v157[1] - v158;
      v165 = v157[2] - v161;
      v166 = (float)(v160 * v165) - (float)(v162 * v164);
      v167 = (float)(v162 * v163) - (float)(v159 * v165);
      v168 = (float)(v159 * v164) - (float)(v160 * v163);
      v169 = (float)((float)(v167 * v167) + (float)(v166 * v166)) + (float)(v168 * v168);
      v170 = 0.0;
      v171 = v169 <= 0.0;
      v172 = sqrtf(v169);
      v173 = 0.0;
      v174 = 0.0;
      if (!v171)
      {
        v170 = v166 * (float)(1.0 / v172);
        v173 = v167 * (float)(1.0 / v172);
        v174 = v168 * (float)(1.0 / v172);
      }
      v175 = (float)((float)((float)(v173 * *(float *)(a5 + 12 * v37 + 4))
                           + (float)(*(float *)(a5 + 12 * v37) * v170))
                   + (float)(*(float *)(a5 + 12 * v37 + 8) * v174))
           - (float)((float)((float)(v158 * v173) + (float)(*v155 * v170)) + (float)(v161 * v174));
      v176 = (float *)(a5 + 12 * v24);
      v177 = (float *)(a5 + 12 * v25);
      v178 = (float *)(a5 + 12 * v26);
      v179 = v176[1];
      v180 = v176[2];
      v181 = v178[2];
      v182 = *v177 - *v176;
      v183 = v177[1] - v179;
      v184 = v177[2] - v180;
      v185 = *v178 - *v176;
      v186 = v178[1] - v179;
      v187 = (float)(v183 * (float)(v181 - v180)) - (float)(v184 * v186);
      v188 = (float)(v184 * v185) - (float)(v182 * (float)(v181 - v180));
      v189 = (float)(v182 * v186) - (float)(v183 * v185);
      v190 = sqrtf((float)((float)(v188 * v188) + (float)(v187 * v187)) + (float)(v189 * v189));
      if (v175 >= 0.0)
      {
        if (v190 > 0.0)
        {
          v193 = 1.0 / v190;
          v187 = v187 * v193;
          v188 = v188 * v193;
          v189 = v189 * v193;
        }
        if (v172 > 0.0)
        {
          v194 = 1.0 / v172;
          v166 = v166 * v194;
          v167 = v167 * v194;
          v168 = v168 * v194;
        }
        v123 = (float)((float)((float)(v188 * v167) + (float)(v187 * v166)) + (float)(v189 * v168)) < -0.999;
      }
      else
      {
        if (v190 > 0.0)
        {
          v191 = 1.0 / v190;
          v187 = v187 * v191;
          v188 = v188 * v191;
          v189 = v189 * v191;
        }
        if (v172 > 0.0)
        {
          v192 = 1.0 / v172;
          v166 = v166 * v192;
          v167 = v167 * v192;
          v168 = v168 * v192;
        }
        v123 = fabsf(atan2f(sqrtf((float)((float)((float)((float)(v189 * v166) - (float)(v187 * v168))* (float)((float)(v189 * v166) - (float)(v187 * v168)))+ (float)((float)((float)(v188 * v168) - (float)(v189 * v167))* (float)((float)(v188 * v168) - (float)(v189 * v167))))+ (float)((float)((float)(v187 * v167) - (float)(v188 * v166))* (float)((float)(v187 * v167) - (float)(v188 * v166)))), (float)((float)(v188 * v167) + (float)(v187 * v166)) + (float)(v189 * v168))) > a9;
      }
      goto LABEL_115;
    }
    v30 = *(unsigned int *)(v13 + 4);
    v31 = (3 * *(_DWORD *)(v272 + 4 * v30));
    if (a3)
    {
      v32 = *(unsigned int *)(a3 + 4 * v31);
      v33 = *(unsigned int *)(a3 + 4 * (v31 + 1));
      v34 = *(unsigned int *)(a3 + 4 * (v31 + 2));
    }
    else
    {
      v32 = *(unsigned __int16 *)(a4 + 2 * v31);
      v33 = *(unsigned __int16 *)(a4 + 2 * (v31 + 1));
      v34 = *(unsigned __int16 *)(a4 + 2 * (v31 + 2));
    }
    if (v20 < 2)
      goto LABEL_97;
    v16 = 0;
    v17 = 0;
    v38 = 0;
    v39 = 0;
    v40 = 0;
    v41 = (float *)(a5 + 12 * v32);
    v42 = (float *)(a5 + 12 * v33);
    v43 = (float *)(a5 + 12 * v34);
    v267 = v41 + 1;
    v44 = v41 + 2;
    v269 = v42 + 1;
    v268 = v42 + 2;
    v271 = v43 + 1;
    v270 = v43 + 2;
    v45 = v20 - 1;
    v46 = v30 + 1;
    v47 = 1;
    do
    {
      v48 = (3 * *(_DWORD *)(v272 + 4 * v46));
      if (a3)
      {
        v49 = *(unsigned int *)(a3 + 4 * v48);
        v50 = *(unsigned int *)(a3 + 4 * (v48 + 1));
        v51 = *(unsigned int *)(a3 + 4 * (v48 + 2));
      }
      else
      {
        v49 = *(unsigned __int16 *)(a4 + 2 * v48);
        v50 = *(unsigned __int16 *)(a4 + 2 * (v48 + 1));
        v51 = *(unsigned __int16 *)(a4 + 2 * (v48 + 2));
      }
      v53 = v49 == v32 || v49 == v33 || v49 == v34;
      if (v53
        && (v50 != v32 ? (v54 = v50 == v33) : (v54 = 1),
            !v54 ? (v55 = v50 == v34) : (v55 = 1),
            v55 && (v51 != v32 ? (v56 = v51 == v33) : (v56 = 1), !v56 ? (v57 = v51 == v34) : (v57 = 1), v57)))
      {
        v58 = *v42 - *v41;
        v59 = *v269 - *v267;
        v60 = *v268 - *v44;
        v61 = *v43 - *v41;
        v62 = *v271 - *v267;
        v63 = *v270 - *v44;
        v64 = (float)(v59 * v63) - (float)(v60 * v62);
        v65 = (float)(v60 * v61) - (float)(v58 * v63);
        v66 = (float)(v58 * v62) - (float)(v59 * v61);
        v67 = sqrtf((float)((float)(v65 * v65) + (float)(v64 * v64)) + (float)(v66 * v66));
        if (v67 > 0.0)
        {
          v68 = 1.0 / v67;
          v64 = v64 * v68;
          v65 = v65 * v68;
          v66 = v66 * v68;
        }
        v69 = (float *)(a5 + 12 * v49);
        v70 = (float *)(a5 + 12 * v50);
        v71 = (float *)(a5 + 12 * v51);
        v72 = v69[1];
        v73 = v69[2];
        v74 = v71[2];
        v75 = *v70 - *v69;
        v76 = v70[1] - v72;
        v77 = v70[2] - v73;
        v78 = *v71 - *v69;
        v79 = v71[1] - v72;
        v80 = (float)(v76 * (float)(v74 - v73)) - (float)(v77 * v79);
        v81 = (float)(v77 * v78) - (float)(v75 * (float)(v74 - v73));
        v82 = (float)(v75 * v79) - (float)(v76 * v78);
        v83 = sqrtf((float)((float)(v81 * v81) + (float)(v80 * v80)) + (float)(v82 * v82));
        if (v83 > 0.0)
        {
          v84 = 1.0 / v83;
          v80 = v80 * v84;
          v81 = v81 * v84;
          v82 = v82 * v84;
        }
        v17 = ((float)((float)((float)(v65 * v81) + (float)(v64 * v80)) + (float)(v66 * v82)) < -0.999) | v17;
      }
      else if (v47 == 2)
      {
        if (v49 != v40 && v49 != v39 && v49 != v38)
          goto LABEL_97;
        v87 = v50 == v40 || v50 == v39;
        if (!v87 && v50 != v38)
          goto LABEL_97;
        v89 = v51 == v40 || v51 == v39;
        if (!v89 && v51 != v38)
          goto LABEL_97;
        v91 = (float *)(a5 + 12 * v40);
        v92 = (float *)(a5 + 12 * v39);
        v93 = (float *)(a5 + 12 * v38);
        v94 = v91[1];
        v95 = v91[2];
        v96 = v93[2];
        v97 = *v92 - *v91;
        v98 = v92[1] - v94;
        v99 = v92[2] - v95;
        v100 = *v93 - *v91;
        v101 = v93[1] - v94;
        v102 = (float)(v98 * (float)(v96 - v95)) - (float)(v99 * v101);
        v103 = (float)(v99 * v100) - (float)(v97 * (float)(v96 - v95));
        v104 = (float)(v97 * v101) - (float)(v98 * v100);
        v105 = sqrtf((float)((float)(v103 * v103) + (float)(v102 * v102)) + (float)(v104 * v104));
        if (v105 > 0.0)
        {
          v106 = 1.0 / v105;
          v102 = v102 * v106;
          v103 = v103 * v106;
          v104 = v104 * v106;
        }
        v107 = (float *)(a5 + 12 * v49);
        v108 = (float *)(a5 + 12 * v50);
        v109 = (float *)(a5 + 12 * v51);
        v110 = v107[1];
        v111 = v107[2];
        v112 = v109[2];
        v113 = *v108 - *v107;
        v114 = v108[1] - v110;
        v115 = v108[2] - v111;
        v116 = *v109 - *v107;
        v117 = v109[1] - v110;
        v118 = (float)(v114 * (float)(v112 - v111)) - (float)(v115 * v117);
        v119 = (float)(v115 * v116) - (float)(v113 * (float)(v112 - v111));
        v120 = (float)(v113 * v117) - (float)(v114 * v116);
        v121 = sqrtf((float)((float)(v119 * v119) + (float)(v118 * v118)) + (float)(v120 * v120));
        if (v121 > 0.0)
        {
          v122 = 1.0 / v121;
          v118 = v118 * v122;
          v119 = v119 * v122;
          v120 = v120 * v122;
        }
        v16 = ((float)((float)((float)(v103 * v119) + (float)(v102 * v118)) + (float)(v104 * v120)) < -0.999) | v16;
        v47 = 2;
      }
      else
      {
        v47 = 2;
        v40 = v49;
        v39 = v50;
        v38 = v51;
      }
      ++v46;
      --v45;
    }
    while (v45);
    v123 = v47 == 1;
    if (v47 != 2)
      goto LABEL_97;
    if (((v17 | v16) & 1) != 0)
    {
      v124 = *v42 - *v41;
      v125 = *v269 - *v267;
      v126 = *v268 - *v44;
      v127 = *v43 - *v41;
      v128 = *v271 - *v267;
      v129 = *v270 - *v44;
      v130 = (float)(v125 * v129) - (float)(v126 * v128);
      v131 = (float)(v126 * v127) - (float)(v124 * v129);
      v132 = (float)(v124 * v128) - (float)(v125 * v127);
      v133 = sqrtf((float)((float)(v131 * v131) + (float)(v130 * v130)) + (float)(v132 * v132));
      if (v133 > 0.0)
      {
        v134 = 1.0 / v133;
        v130 = v130 * v134;
        v131 = v131 * v134;
        v132 = v132 * v134;
      }
      v135 = (float *)(a5 + 12 * v40);
      v136 = (float *)(a5 + 12 * v39);
      v137 = (float *)(a5 + 12 * v38);
      v138 = v135[1];
      v139 = *v136 - *v135;
      v140 = v136[1] - v138;
      v141 = *v137 - *v135;
      v142 = v135[2];
      v143 = v136[2] - v142;
      v144 = v137[1] - v138;
      v145 = v137[2] - v142;
      v146 = (float)(v140 * v145) - (float)(v143 * v144);
      v147 = (float)(v143 * v141) - (float)(v139 * v145);
      v148 = (float)(v139 * v144) - (float)(v140 * v141);
      v149 = sqrtf((float)((float)(v147 * v147) + (float)(v146 * v146)) + (float)(v148 * v148));
      if (v149 > 0.0)
      {
        v150 = 1.0 / v149;
        v146 = v146 * v150;
        v147 = v147 * v150;
        v148 = v148 * v150;
      }
      v151 = (float)((float)(v131 * v147) + (float)(v130 * v146)) + (float)(v132 * v148);
      v152 = (float)(v131 * v148) - (float)(v132 * v147);
      v153 = (float)(v132 * v146) - (float)(v130 * v148);
      v154 = (float)(v130 * v147) - (float)(v131 * v146);
LABEL_137:
      v123 = fabsf(atan2f(sqrtf((float)((float)(v153 * v153) + (float)(v152 * v152)) + (float)(v154 * v154)), v151)) > a9;
      goto LABEL_115;
    }
    v196 = *v12;
    v195 = v12[1];
    if (v196 == v32)
    {
      if (v195 == v33)
        goto LABEL_122;
      goto LABEL_127;
    }
    if (v196 == v33)
    {
      if (v195 == v32)
      {
LABEL_122:
        LODWORD(v33) = v34;
        goto LABEL_129;
      }
      LODWORD(v33) = v32;
LABEL_127:
      if (v195 == v34)
        goto LABEL_129;
LABEL_128:
      LODWORD(v33) = -1;
      goto LABEL_129;
    }
    if (v196 != v34)
      goto LABEL_128;
    if (v195 == v33)
    {
      LODWORD(v33) = v32;
      goto LABEL_129;
    }
    if (v195 != v32)
      goto LABEL_128;
LABEL_129:
    v197 = (float *)(a5 + 12 * v40);
    v198 = (float *)(a5 + 12 * v39);
    v199 = (float *)(a5 + 12 * v38);
    v200 = v197[1];
    v201 = *v198 - *v197;
    v202 = v198[1] - v200;
    v203 = v197[2];
    v204 = v198[2] - v203;
    v205 = *v199 - *v197;
    v206 = v199[1] - v200;
    v207 = v199[2] - v203;
    v208 = (float)(v202 * v207) - (float)(v204 * v206);
    v209 = (float)(v204 * v205) - (float)(v201 * v207);
    v210 = (float)(v201 * v206) - (float)(v202 * v205);
    v211 = (float)((float)(v209 * v209) + (float)(v208 * v208)) + (float)(v210 * v210);
    v212 = 0.0;
    v171 = v211 <= 0.0;
    v213 = sqrtf(v211);
    v214 = 0.0;
    v215 = 0.0;
    if (!v171)
    {
      v212 = v208 * (float)(1.0 / v213);
      v214 = v209 * (float)(1.0 / v213);
      v215 = v210 * (float)(1.0 / v213);
    }
    if ((float)((float)((float)((float)(v214 * *(float *)(a5 + 12 * v33 + 4))
                               + (float)(*(float *)(a5 + 12 * v33) * v212))
                       + (float)(*(float *)(a5 + 12 * v33 + 8) * v215))
               - (float)((float)((float)(v200 * v214) + (float)(*v197 * v212)) + (float)(v203 * v215))) < 0.0)
    {
      v216 = *v42 - *v41;
      v217 = *v269 - *v267;
      v218 = *v268 - *v44;
      v219 = *v43 - *v41;
      v220 = *v271 - *v267;
      v221 = *v270 - *v44;
      v222 = (float)(v217 * v221) - (float)(v218 * v220);
      v223 = (float)(v218 * v219) - (float)(v216 * v221);
      v224 = (float)(v216 * v220) - (float)(v217 * v219);
      v225 = sqrtf((float)((float)(v223 * v223) + (float)(v222 * v222)) + (float)(v224 * v224));
      if (v225 > 0.0)
      {
        v226 = 1.0 / v225;
        v222 = v222 * v226;
        v223 = v223 * v226;
        v224 = v224 * v226;
      }
      if (v213 > 0.0)
      {
        v227 = 1.0 / v213;
        v208 = v208 * v227;
        v209 = v209 * v227;
        v210 = v210 * v227;
      }
      v151 = (float)((float)(v223 * v209) + (float)(v222 * v208)) + (float)(v224 * v210);
      v152 = (float)(v223 * v210) - (float)(v224 * v209);
      v153 = (float)(v224 * v208) - (float)(v222 * v210);
      v154 = (float)(v222 * v209) - (float)(v223 * v208);
      goto LABEL_137;
    }
LABEL_115:
    *v19++ = v123;
    v13 += 8;
    v12 += 2;
    LODWORD(v11) = v11 - 1;
  }
  while ((_DWORD)v11);
  if (a1[4])
  {
    v232 = 0;
    v233 = *((_QWORD *)a1 + 3);
    do
    {
      for (i = 0; i != 12; i += 4)
      {
        v235 = *(_DWORD *)(v233 + i);
        if ((v235 & 0x80000000) == 0 && *(_BYTE *)(v18 + (v235 & 0xFFFFFFF)))
          *(_DWORD *)(v233 + i) = v235 | 0x80000000;
      }
      ++v232;
      v233 += 12;
    }
    while (v232 < a1[4]);
  }
  v236 = *a1;
  if ((_DWORD)v236)
  {
    v237 = 0;
    v238 = 8 * v236;
    v239 = (unsigned __int8 *)v18;
    do
    {
      if (*v239++)
        *(_WORD *)(*((_QWORD *)a1 + 4) + v237) |= 1u;
      v237 += 8;
    }
    while (v238 != v237);
LABEL_161:
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24, v18);
  }
  else if (v18)
  {
    goto LABEL_161;
  }
  if (a2)
  {
    v241 = 0;
    v242 = 0;
    do
    {
      if (a3)
      {
        v243 = *(_DWORD *)(a3 + 4 * v241);
        v244 = *(_DWORD *)(a3 + 4 * (v241 + 1));
        v245 = *(_DWORD *)(a3 + 4 * (v241 + 2));
      }
      else
      {
        v243 = *(unsigned __int16 *)(a4 + 2 * v241);
        v244 = *(unsigned __int16 *)(a4 + 2 * (v241 + 1));
        v245 = *(unsigned __int16 *)(a4 + 2 * (v241 + 2));
      }
      if (v243 > v242)
        v242 = v243;
      if (v244 > v242)
        v242 = v244;
      if (v245 > v242)
        v242 = v245;
      v241 += 3;
    }
    while (3 * a2 != v241);
    v246 = v242 + 1;
    if (v242 == -1)
    {
      v246 = 0;
      v247 = 0;
      goto LABEL_178;
    }
  }
  else
  {
    v246 = 1;
  }
  v247 = (void *)(*(uint64_t (**)(uint64_t, size_t, const char *, const char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 16))(physx::shdfnd::Foundation::mInstance + 24, v246, "NonTrackedAlloc", "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/physxcooking/src/EdgeList.cpp", 643, v16, v17);
LABEL_178:
  bzero(v247, v246);
  v248 = a1[4];
  if ((_DWORD)v248)
  {
    v249 = 0;
    v250 = *((_QWORD *)a1 + 3);
    v251 = v250;
    while (1)
    {
      if (a3)
      {
        v252 = *(_DWORD *)(a3 + 4 * (3 * v249 + 1));
        v273 = *(_DWORD *)(a3 + 4 * (3 * v249));
        v274 = v252;
        v253 = *(_DWORD *)(a3 + 4 * (3 * v249 + 2));
      }
      else
      {
        if (!a4)
          goto LABEL_185;
        v254 = *(unsigned __int16 *)(a4 + 2 * (3 * v249 + 1));
        v273 = *(unsigned __int16 *)(a4 + 2 * (3 * v249));
        v274 = v254;
        v253 = *(unsigned __int16 *)(a4 + 2 * (3 * v249 + 2));
      }
      v275 = v253;
LABEL_185:
      for (j = 0; j != 3; ++j)
      {
        if ((*(_DWORD *)(v251 + 4 * j) & 0x80000000) != 0)
        {
          v256 = j;
          if ((_DWORD)j)
          {
            v256 = (_DWORD)j == 1;
            v257 = 2;
          }
          else
          {
            v257 = 1;
          }
          *((_BYTE *)v247 + *(&v273 + v257)) = 1;
          *((_BYTE *)v247 + *(&v273 + v256)) = 1;
        }
      }
      ++v249;
      v251 += 12;
      if (v249 == v248)
      {
        v258 = 0;
        while (1)
        {
          if (a3)
          {
            v259 = *(_DWORD *)(a3 + 4 * (3 * v258 + 1));
            v273 = *(_DWORD *)(a3 + 4 * (3 * v258));
            v274 = v259;
            v260 = *(_DWORD *)(a3 + 4 * (3 * v258 + 2));
          }
          else
          {
            if (!a4)
              goto LABEL_199;
            v261 = *(unsigned __int16 *)(a4 + 2 * (3 * v258 + 1));
            v273 = *(unsigned __int16 *)(a4 + 2 * (3 * v258));
            v274 = v261;
            v260 = *(unsigned __int16 *)(a4 + 2 * (3 * v258 + 2));
          }
          v275 = v260;
LABEL_199:
          for (k = 0; k != 12; k += 4)
          {
            v263 = *(_DWORD *)(v250 + k);
            if ((v263 & 0x40000000) == 0 && *((_BYTE *)v247 + *(unsigned int *)((char *)&v273 + k)))
              *(_DWORD *)(v250 + k) = v263 | 0x40000000;
          }
          ++v258;
          v250 += 12;
          if (v258 >= a1[4])
            goto LABEL_205;
        }
      }
    }
  }
LABEL_205:
  if (v247)
    (*(void (**)(uint64_t, void *))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24, v247);
  return 1;
}

uint64_t physx::MeshCleaner::MeshCleaner(uint64_t a1, unsigned int a2, float *a3, unsigned int a4, unsigned int *a5, float a6)
{
  uint64_t v10;
  int v11;
  uint64_t v12;
  float *v13;
  uint64_t v14;
  uint64_t v15;
  int *v16;
  uint64_t v17;
  __n128 v18;
  float32x2_t v19;
  float *v20;
  float *v21;
  float v22;
  unsigned int v23;
  unsigned int v24;
  unsigned int v25;
  int v26;
  unsigned int v27;
  char *v28;
  size_t v29;
  void *v30;
  uint64_t v31;
  unsigned int *v32;
  uint64_t v33;
  unsigned int v34;
  char *v35;
  uint64_t v36;
  unsigned int v37;
  float *v38;
  float v39;
  float v40;
  float v41;
  uint64_t v42;
  uint64_t v43;
  float *v44;
  int v45;
  unsigned int v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  float *v52;
  float *v53;
  float *v54;
  float v55;
  float v56;
  float v57;
  float v58;
  float v59;
  float v60;
  float v61;
  float v62;
  int v63;
  int v64;
  int v65;
  BOOL v66;
  unsigned int v68;
  uint64_t v69;
  uint64_t v70;
  unsigned int v71;
  char v72;
  _DWORD *v73;
  int v74;
  unsigned int v75;
  int v76;
  unsigned int v77;
  unsigned int v78;
  int v79;
  unsigned int v80;
  unsigned int v81;
  int v82;
  uint64_t v83;
  uint64_t i;
  _DWORD *v85;
  int v86;
  uint64_t v87;
  uint64_t v88;
  unsigned int v89;
  _DWORD *v90;
  int *v91;
  uint64_t v92;
  int v93;
  float *v94;
  uint64_t v96;
  uint64_t v97;
  int *v99;
  unsigned int v100;
  uint64_t v101;

  v10 = a2;
  v11 = 12 * a2;
  v100 = a4;
  if (a2)
  {
    v12 = (*(uint64_t (**)(uint64_t, uint64_t, const char *, const char *, uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24)
                                                                                           + 16))(physx::shdfnd::Foundation::mInstance + 24, 12 * a2, "NonTrackedAlloc", "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/physxcooking/src/MeshCleaner.cpp", 79);
    a4 = v100;
    v13 = (float *)v12;
  }
  else
  {
    v13 = 0;
  }
  v96 = a1;
  if (a4)
  {
    v14 = 4 * a4;
    v15 = (*(uint64_t (**)(uint64_t, uint64_t, const char *, const char *, uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24)
                                                                                           + 16))(physx::shdfnd::Foundation::mInstance + 24, 12 * a4, "NonTrackedAlloc", "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/physxcooking/src/MeshCleaner.cpp", 82);
    v101 = (*(uint64_t (**)(uint64_t, uint64_t, const char *, const char *, uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24)
                                                                                            + 16))(physx::shdfnd::Foundation::mInstance + 24, v14, "NonTrackedAlloc", "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/physxcooking/src/MeshCleaner.cpp", 84);
  }
  else
  {
    v15 = 0;
    v101 = 0;
  }
  v97 = 4 * v10;
  if (a6 == 0.0)
  {
    memcpy(v13, a3, v11 & 0xFFFFFFFC);
  }
  else if (a2)
  {
    v18 = ((__n128 (*)(uint64_t, uint64_t, const char *, const char *, uint64_t))*(_QWORD *)(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 16))(physx::shdfnd::Foundation::mInstance + 24, v97, "NonTrackedAlloc", "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/physxcooking/src/MeshCleaner.cpp", 89);
    v17 = 0;
    v18.n128_f32[0] = 1.0 / a6;
    v19 = (float32x2_t)vdup_lane_s32((int32x2_t)v18.n128_u64[0], 0);
    v20 = v13 + 2;
    v21 = a3 + 2;
    do
    {
      v16[v17] = v17;
      v22 = floorf((float)(*v21 * v18.n128_f32[0]) + 0.5);
      *((float32x2_t *)v20 - 1) = vrndm_f32(vmla_f32((float32x2_t)0x3F0000003F000000, v19, *(float32x2_t *)(v21 - 2)));
      *v20 = v22;
      v20 += 3;
      ++v17;
      v21 += 3;
    }
    while (v10 != v17);
    goto LABEL_14;
  }
  v16 = 0;
LABEL_14:
  v99 = v16;
  if (v100 <= a2)
    v23 = a2;
  else
    v23 = v100;
  v24 = v23 | (v23 >> 1) | ((v23 | (v23 >> 1)) >> 2);
  v25 = v24 | (v24 >> 4) | ((v24 | (v24 >> 4)) >> 8);
  v26 = v25 | HIWORD(v25);
  v27 = v26 + 1 + v23;
  if (v27)
    v28 = (char *)(*(uint64_t (**)(uint64_t, uint64_t, const char *, const char *, uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 16))(physx::shdfnd::Foundation::mInstance + 24, 4 * v27, "NonTrackedAlloc", "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/physxcooking/src/MeshCleaner.cpp", 108);
  else
    v28 = 0;
  memset(v28, 255, 4 * (v26 + 1));
  if (a2)
  {
    v29 = 4 * v10;
    v30 = (void *)(*(uint64_t (**)(uint64_t, uint64_t, const char *, const char *, uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 16))(physx::shdfnd::Foundation::mInstance + 24, v97, "NonTrackedAlloc", "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/physxcooking/src/MeshCleaner.cpp", 113);
  }
  else
  {
    v30 = 0;
    v29 = 4 * v10;
  }
  memset(v30, 255, v29);
  if (v100)
  {
    LODWORD(v31) = 3 * v100;
    if (3 * v100 <= 1)
      v31 = 1;
    else
      v31 = v31;
    v32 = a5;
    do
    {
      v34 = *v32++;
      v33 = v34;
      if (v34 < a2)
        *((_DWORD *)v30 + v33) = 0;
      --v31;
    }
    while (v31);
  }
  v35 = &v28[4 * (v26 + 1)];
  if (a2)
  {
    v36 = 0;
    v37 = 0;
    do
    {
      if (*((_DWORD *)v30 + v36) != -1)
      {
        v38 = &v13[3 * v36];
        v39 = *v38;
        v40 = v38[1];
        v41 = v38[2];
        v42 = (((LODWORD(v39) + 11 * LODWORD(v40) + 2147483631 * LODWORD(v41)) >> 22) & 0x1FF ^ (((LODWORD(v39) + 11 * LODWORD(v40) + 2147483631 * LODWORD(v41)) & 0x7FFFFFFFu) >> 12) ^ (LODWORD(v39) + 11 * LODWORD(v40) + 2147483631 * LODWORD(v41)) & 0x7FFFFFFF) & v26;
        v43 = *(unsigned int *)&v28[4 * v42];
        if ((_DWORD)v43 == -1)
        {
LABEL_39:
          *((_DWORD *)v30 + v36) = v37;
          v44 = &v13[3 * v37];
          *v44 = v39;
          v44[1] = v40;
          v44[2] = v41;
          if (v99)
            v99[v37] = v36;
          *(_DWORD *)&v35[4 * v37] = *(_DWORD *)&v28[4 * v42];
          *(_DWORD *)&v28[4 * v42] = v37++;
        }
        else
        {
          while (v13[3 * v43] != v39 || v13[3 * v43 + 1] != v40 || v13[3 * v43 + 2] != v41)
          {
            v43 = *(unsigned int *)&v35[4 * v43];
            if ((_DWORD)v43 == -1)
              goto LABEL_39;
          }
          *((_DWORD *)v30 + v36) = v43;
        }
      }
      ++v36;
    }
    while (v36 != v10);
  }
  else
  {
    v37 = 0;
  }
  if (v100)
  {
    v45 = 0;
    v46 = 0;
    do
    {
      v47 = *a5;
      v48 = a5[1];
      v49 = a5[2];
      if (v47 < a2 && v48 < a2 && v49 < a2)
      {
        v52 = &a3[3 * v47];
        v53 = &a3[3 * v48];
        v54 = &a3[3 * v49];
        v55 = v52[1];
        v56 = *v52 - *v53;
        v57 = v55 - v53[1];
        v58 = v52[2];
        v59 = *v52 - *v54;
        v60 = v58 - v53[2];
        v61 = v55 - v54[1];
        v62 = v58 - v54[2];
        if ((float)((float)((float)((float)((float)(v60 * v59) - (float)(v56 * v62))
                                   * (float)((float)(v60 * v59) - (float)(v56 * v62)))
                           + (float)((float)((float)(v57 * v62) - (float)(v60 * v61))
                                   * (float)((float)(v57 * v62) - (float)(v60 * v61))))
                   + (float)((float)((float)(v56 * v61) - (float)(v57 * v59))
                           * (float)((float)(v56 * v61) - (float)(v57 * v59)))) != 0.0)
        {
          v63 = *((_DWORD *)v30 + v47);
          v64 = *((_DWORD *)v30 + v48);
          v65 = *((_DWORD *)v30 + v49);
          v66 = v63 == v64 || v64 == v65;
          if (!v66 && v65 != v63)
          {
            v68 = 3 * v46;
            *(_DWORD *)(v15 + 4 * v68) = v63;
            *(_DWORD *)(v15 + 4 * (v68 + 1)) = v64;
            *(_DWORD *)(v15 + 4 * (v68 + 2)) = v65;
            *(_DWORD *)(v101 + 4 * v46++) = v45;
          }
        }
      }
      ++v45;
      a5 += 3;
    }
    while (v100 != v45);
    if (v30)
      goto LABEL_66;
  }
  else
  {
    v46 = 0;
    if (v30)
LABEL_66:
      (*(void (**)(uint64_t, void *))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24, v30);
  }
  memset(v28, 255, 4 * (v26 + 1));
  v69 = v101;
  if (v46)
  {
    v70 = 0;
    v71 = v46;
    v46 = 0;
    v72 = 1;
    do
    {
      v73 = (_DWORD *)(v15 + 12 * v70);
      v74 = v73[1];
      v75 = v73[2];
      v76 = (*v73 - (v74 + v75)) ^ (v75 >> 13);
      v77 = (v74 - v75 - v76) ^ (v76 << 8);
      v78 = (v75 - v76 - v77) ^ (v77 >> 13);
      v79 = (v76 - v77 - v78) ^ (v78 >> 12);
      v80 = (v77 - v78 - v79) ^ (v79 << 16);
      v81 = (v78 - v79 - v80) ^ (v80 >> 5);
      v82 = (v79 - v80 - v81) ^ (v81 >> 3);
      v83 = ((v81 - v82 - ((v80 - v81 - v82) ^ (v82 << 10))) ^ (((v80 - v81 - v82) ^ (v82 << 10)) >> 15)) & v26;
      for (i = *(unsigned int *)&v28[4 * v83]; (_DWORD)i != -1; i = *(unsigned int *)&v35[4 * i])
      {
        v85 = (_DWORD *)(v15 + 12 * i);
        if (*v85 == *v73 && v85[1] == v74 && v85[2] == v75)
          goto LABEL_76;
      }
      v86 = *(_DWORD *)(v101 + 4 * v70);
      *(_DWORD *)(v101 + 4 * v46) = v86;
      v72 &= v86 == v46;
      v87 = v15 + 12 * v46;
      v88 = *(_QWORD *)v73;
      *(_DWORD *)(v87 + 8) = v73[2];
      *(_QWORD *)v87 = v88;
      *(_DWORD *)&v35[4 * v46] = *(_DWORD *)&v28[4 * v83];
      *(_DWORD *)&v28[4 * v83] = v46++;
LABEL_76:
      ++v70;
    }
    while (v70 != v71);
  }
  else
  {
    v89 = 0;
    v72 = 1;
    if (!v28)
      goto LABEL_82;
  }
  (*(void (**)(uint64_t, char *))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24, v28);
  v89 = v46;
LABEL_82:
  if (v99)
  {
    if (v37)
    {
      v90 = v13 + 2;
      v91 = v99;
      v92 = v37;
      do
      {
        v93 = *v91++;
        v94 = &a3[3 * v93];
        *((_QWORD *)v90 - 1) = *(_QWORD *)v94;
        *v90 = *((_DWORD *)v94 + 2);
        v90 += 3;
        --v92;
      }
      while (v92);
    }
    (*(void (**)(uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
  }
  *(_DWORD *)v96 = v37;
  *(_DWORD *)(v96 + 4) = v89;
  *(_QWORD *)(v96 + 8) = v13;
  *(_QWORD *)(v96 + 16) = v15;
  if ((v72 & 1) != 0 && v101)
  {
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24, v101);
    v69 = 0;
  }
  *(_QWORD *)(v96 + 24) = v69;
  return v96;
}

void physx::MeshCleaner::~MeshCleaner(physx::MeshCleaner *this)
{
  if (*((_QWORD *)this + 3))
    (*(void (**)(uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
  *((_QWORD *)this + 3) = 0;
  if (*((_QWORD *)this + 2))
    (*(void (**)(uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
  *((_QWORD *)this + 2) = 0;
  if (*((_QWORD *)this + 1))
    (*(void (**)(uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
  *((_QWORD *)this + 1) = 0;
}

double physx::createQuantizer(physx *this)
{
  uint64_t v1;
  const char *v2;
  uint64_t v3;
  double result;

  v1 = physx::shdfnd::Foundation::mInstance;
  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)physx::shdfnd::Foundation::mInstance + 40))(physx::shdfnd::Foundation::mInstance))
    v2 = "static const char *physx::shdfnd::ReflectionAllocator<QuantizerImpl>::getName() [T = QuantizerImpl]";
  else
    v2 = "<allocation names disabled>";
  v3 = (*(uint64_t (**)(uint64_t, uint64_t, const char *, const char *, uint64_t))(*(_QWORD *)(v1 + 24) + 16))(v1 + 24, 64, v2, "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/physxcooking/src/Quantizer.cpp", 336);
  *(_QWORD *)v3 = &off_24ED929D0;
  *(_OWORD *)(v3 + 32) = 0u;
  *(_OWORD *)(v3 + 48) = 0u;
  result = 0.00781250185;
  *(_OWORD *)(v3 + 8) = xmmword_2260EDC60;
  *(_QWORD *)(v3 + 24) = 0;
  return result;
}

void physx::BVHStructureBuilder::~BVHStructureBuilder(physx::BVHStructureBuilder *this)
{
  if (*(_QWORD *)this)
    (*(void (**)(uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
  *(_QWORD *)this = 0;
  if (*((_QWORD *)this + 2))
    (*(void (**)(uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
  *((_QWORD *)this + 2) = 0;
  if (*((_QWORD *)this + 3))
    (*(void (**)(uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
  *((_QWORD *)this + 3) = 0;
}

uint64_t physx::BigConvexDataBuilder::save(uint64_t a1, void (***a2)(_QWORD, unsigned int *, uint64_t), int a3)
{
  unsigned __int16 v6;
  unsigned __int16 v7;
  int v9;
  int v10;

  if (!physx::Gu::WriteHeader(83, 85, 80, 77, 0, a3, (void (***)(_QWORD, _QWORD, _QWORD))a2)
    || !physx::Gu::WriteHeader(71, 65, 85, 83, 0, a3, (void (***)(_QWORD, _QWORD, _QWORD))a2))
  {
    return 0;
  }
  v6 = **(_WORD **)(a1 + 8);
  v9 = v6;
  if (a3)
  {
    LOWORD(v9) = 0;
    BYTE2(v9) = HIBYTE(v6);
    HIBYTE(v9) = v6;
  }
  (**a2)(a2, (unsigned int *)&v9, 4);
  v7 = *(_WORD *)(*(_QWORD *)(a1 + 8) + 2);
  v10 = v7;
  if (a3)
  {
    LOWORD(v10) = 0;
    BYTE2(v10) = HIBYTE(v7);
    HIBYTE(v10) = v7;
  }
  (**a2)(a2, (unsigned int *)&v10, 4);
  (**a2)(a2, *(unsigned int **)(*(_QWORD *)(a1 + 8) + 8), 2 * *(unsigned __int16 *)(*(_QWORD *)(a1 + 8) + 2));
  return physx::BigConvexDataBuilder::saveValencies(a1, a2, a3);
}

uint64_t physx::BigConvexDataBuilder::saveValencies(uint64_t a1, void (***a2)(_QWORD, unsigned int *, uint64_t), int a3)
{
  uint64_t v6;
  unsigned int v7;
  unsigned int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  const char *v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unsigned int v22;
  unsigned int v23;
  int v24;

  v6 = physx::Gu::WriteHeader(86, 65, 76, 69, 2u, a3, (void (***)(_QWORD, _QWORD, _QWORD))a2);
  if (!(_DWORD)v6)
    return v6;
  v7 = *(_DWORD *)(*(_QWORD *)(a1 + 8) + 16);
  v22 = v7;
  if (a3)
    v22 = bswap32(v7);
  (**a2)(a2, &v22, 4);
  v8 = *(_DWORD *)(*(_QWORD *)(a1 + 8) + 20);
  v23 = v8;
  if (a3)
    v23 = bswap32(v8);
  (**a2)(a2, &v23, 4);
  v9 = *(unsigned int *)(*(_QWORD *)(a1 + 8) + 16);
  if ((_DWORD)v9)
  {
    v10 = 2 * v9;
    v11 = physx::shdfnd::Foundation::mInstance;
    if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)physx::shdfnd::Foundation::mInstance + 40))(physx::shdfnd::Foundation::mInstance))
      v12 = "static const char *physx::shdfnd::ReflectionAllocator<unsigned short>::getName() [T = unsigned short]";
    else
      v12 = "<allocation names disabled>";
    v13 = (*(uint64_t (**)(uint64_t, uint64_t, const char *, const char *, uint64_t))(*(_QWORD *)(v11 + 24) + 16))(v11 + 24, v10, v12, "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/physxcooking/src/convex/BigConvexDataBuilder.cpp", 345);
    v14 = (char *)v13;
    v15 = *(_QWORD *)(a1 + 8);
    v16 = *(unsigned int *)(v15 + 16);
    if ((_DWORD)v16)
    {
      v17 = 0;
      v18 = *(_QWORD *)(v15 + 24);
      do
      {
        *(_WORD *)(v13 + v17) = *(_WORD *)(v18 + 2 * v17);
        v17 += 2;
      }
      while (2 * v16 != v17);
      v19 = 0;
      LOWORD(v20) = 0;
      do
      {
        if (*(unsigned __int16 *)(v13 + 2 * v19) <= (unsigned __int16)v20)
          v20 = (unsigned __int16)v20;
        else
          v20 = *(unsigned __int16 *)(v13 + 2 * v19);
        ++v19;
      }
      while ((_DWORD)v16 != (_DWORD)v19);
      goto LABEL_21;
    }
  }
  else
  {
    v14 = 0;
  }
  v20 = 0;
LABEL_21:
  v24 = v20;
  if (a3)
  {
    LOWORD(v24) = 0;
    BYTE2(v24) = BYTE1(v20);
    HIBYTE(v24) = v20;
  }
  (**a2)(a2, (unsigned int *)&v24, 4);
  physx::Gu::StoreIndices(v20, *(_DWORD *)(*(_QWORD *)(a1 + 8) + 16), v14, (uint64_t (***)(_QWORD, __int16 *, uint64_t))a2, a3);
  if (v14)
    (*(void (**)(uint64_t, char *))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24, v14);
  (**a2)(a2, *(unsigned int **)(*(_QWORD *)(a1 + 8) + 32), *(unsigned int *)(*(_QWORD *)(a1 + 8) + 20));
  return v6;
}

uint64_t physx::BigConvexDataBuilder::computeValencies(physx::BigConvexDataBuilder *this, const physx::ConvexHullBuilder *a2)
{
  uint64_t v4;
  size_t v5;
  uint64_t v6;
  __int16 v7;
  uint64_t v8;
  int v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unsigned __int8 *v18;
  uint64_t v19;
  unsigned int v20;
  uint64_t v21;
  unsigned __int16 *v22;
  uint64_t v23;
  int v24;
  uint64_t v25;
  unsigned __int16 *v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unsigned __int8 v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  unsigned __int8 *v42;
  uint64_t v43;
  unsigned __int8 v44;
  char v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  int v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  unsigned __int8 *v55;
  int v56;
  unsigned __int8 v57;
  uint64_t v58;
  int v59;
  uint64_t v60;
  _BYTE v62[256];
  uint64_t v63;

  v63 = *MEMORY[0x24BDAC8D0];
  v4 = *((_QWORD *)a2 + 7);
  v5 = *(unsigned __int8 *)(v4 + 38);
  v6 = *((_QWORD *)this + 1);
  *(_DWORD *)(v6 + 16) = v5;
  v7 = 4 * v5 + 12;
  v8 = v7 & 0x7F0;
  v9 = 2 * (*(_WORD *)(v4 + 36) & 0x7FFF);
  if ((v7 & 0x7F0) + v9)
  {
    v10 = (char *)(*(uint64_t (**)(uint64_t, _QWORD, const char *, const char *, uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24)
                                                                                                  + 16))(physx::shdfnd::Foundation::mInstance + 24, (v7 & 0x7F0u) + v9, "NonTrackedAlloc", "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/physxcooking/src/convex/BigConvexDataBuilder.cpp", 118);
    v6 = *((_QWORD *)this + 1);
  }
  else
  {
    v10 = 0;
  }
  *(_QWORD *)(v6 + 24) = v10;
  *(_QWORD *)(v6 + 32) = &v10[v8];
  *(_QWORD *)(v6 + 40) = v10;
  bzero(v10, (4 * v5));
  bzero(v62, v5);
  v11 = *((_QWORD *)a2 + 7);
  v12 = *(unsigned __int8 *)(v11 + 39);
  if (*(_BYTE *)(v11 + 39))
  {
    v13 = 0;
    v14 = *((_QWORD *)a2 + 1);
    v15 = *((_QWORD *)a2 + 2);
    do
    {
      v16 = v14 + 20 * v13;
      v17 = *(unsigned __int8 *)(v16 + 18);
      if (*(_BYTE *)(v16 + 18))
      {
        v18 = (unsigned __int8 *)(v15 + *(unsigned __int16 *)(v16 + 16));
        v19 = *(_QWORD *)(*((_QWORD *)this + 1) + 24);
        do
        {
          v20 = *v18++;
          ++*(_WORD *)(v19 + 4 * v20);
          --v17;
        }
        while (v17);
      }
      ++v13;
    }
    while (v13 != v12);
  }
  v21 = *((_QWORD *)this + 1);
  v22 = *(unsigned __int16 **)(v21 + 24);
  v22[1] = 0;
  v23 = *(unsigned int *)(v21 + 16);
  if (v23 >= 2)
  {
    v24 = 0;
    v25 = v23 - 1;
    v26 = v22;
    do
    {
      v24 += *v26;
      v26[3] = v24;
      v26 += 2;
      --v25;
    }
    while (v25);
  }
  *(_DWORD *)(v21 + 20) = v22[2 * (v23 - 1)] + v22[2 * (v23 - 1) + 1];
  if ((_DWORD)v12)
  {
    v27 = 0;
    v28 = *((_QWORD *)a2 + 1);
    do
    {
      v29 = v28 + 20 * v27;
      v30 = *(unsigned __int8 *)(v29 + 18);
      if (*(_BYTE *)(v29 + 18))
      {
        v31 = 0;
        v32 = *((_QWORD *)a2 + 2) + *(unsigned __int16 *)(v29 + 16);
        do
        {
          v33 = *(unsigned __int8 *)(v32 + v31);
          v34 = v31 + 1;
          if (!v62[v33])
          {
            if (v34 == v30)
              v35 = 0;
            else
              v35 = v31 + 1;
            v36 = *(_BYTE *)(v32 + v35);
            v37 = *(_QWORD *)(*((_QWORD *)this + 1) + 32);
            v38 = *(_QWORD *)(*((_QWORD *)this + 1) + 24) + 4 * v33;
            v39 = *(unsigned __int16 *)(v38 + 2);
            *(_WORD *)(v38 + 2) = v39 + 1;
            *(_BYTE *)(v37 + v39) = v36;
            v40 = *((_QWORD *)a2 + 5);
            v28 = *((_QWORD *)a2 + 1);
            v41 = *((_QWORD *)a2 + 3);
            v42 = (unsigned __int8 *)(v41
                                    + 2
                                    * (*(_WORD *)(v40 + 2 * (v31 + *(unsigned __int16 *)(v28 + 20 * v27 + 16))) & 0x7FFF));
            v43 = *v42;
            v44 = v42[1];
            if (v27 == v43)
              LOBYTE(v43) = v44;
            v45 = 1;
            while (v27 != v43)
            {
              v46 = v28 + 20 * v43;
              v47 = *(unsigned __int8 *)(v46 + 18);
              v48 = *(unsigned __int16 *)(v46 + 16);
              if (*(_BYTE *)(v46 + 18))
              {
                v49 = 0;
                v50 = *((_QWORD *)a2 + 2) + v48;
                while (*(unsigned __int8 *)(v50 + v49) != (_DWORD)v33)
                {
                  if (v47 == ++v49)
                    goto LABEL_28;
                }
                if (*(unsigned __int8 *)(v50 + ((int)v49 + 1) % v47) == v36)
                {
                  if ((_DWORD)v49)
                    v51 = v49;
                  else
                    v51 = v47;
                  LODWORD(v49) = v51 - 1;
                  v36 = *(_BYTE *)(v50 + (v51 - 1));
                }
                else
                {
                  v36 = *(_BYTE *)(v50 + ((int)v49 + 1) % v47);
                }
                v52 = *(_QWORD *)(*((_QWORD *)this + 1) + 32);
                v53 = *(_QWORD *)(*((_QWORD *)this + 1) + 24) + 4 * v33;
                v54 = *(unsigned __int16 *)(v53 + 2);
                *(_WORD *)(v53 + 2) = v54 + 1;
                *(_BYTE *)(v52 + v54) = v36;
                ++v45;
                v40 = *((_QWORD *)a2 + 5);
                v28 = *((_QWORD *)a2 + 1);
                v41 = *((_QWORD *)a2 + 3);
                LODWORD(v48) = *(unsigned __int16 *)(v28 + 20 * v43 + 16);
              }
              else
              {
LABEL_28:
                LODWORD(v49) = 0;
              }
              v55 = (unsigned __int8 *)(v41 + 2 * (*(_WORD *)(v40 + 2 * (v49 + v48)) & 0x7FFF));
              v56 = *v55;
              v57 = v55[1];
              if (v56 == v43)
                LOBYTE(v43) = v57;
              else
                LOBYTE(v43) = v56;
            }
            v62[v33] = v45;
          }
          v31 = v34;
        }
        while (v34 != v30);
        v11 = *((_QWORD *)a2 + 7);
      }
      ++v27;
    }
    while (v27 < *(unsigned __int8 *)(v11 + 39));
    v58 = *((_QWORD *)this + 1);
    v22 = *(unsigned __int16 **)(v58 + 24);
    LODWORD(v23) = *(_DWORD *)(v58 + 16);
  }
  v22[1] = 0;
  if (v23 >= 2)
  {
    v59 = 0;
    v60 = v23 - 1;
    do
    {
      v59 += *v22;
      v22[3] = v59;
      v22 += 2;
      --v60;
    }
    while (v60);
  }
  return 1;
}

uint64_t physx::BigConvexDataBuilder::precompute(physx::BigConvexDataBuilder *this, unsigned int a2)
{
  uint64_t v4;
  int v5;
  uint64_t v6;
  const char *v7;
  uint64_t v8;
  int v9;
  unsigned int v10;
  float v11;
  float v12;
  int v13;
  int v14;
  unsigned int v15;
  float v16;
  float v17;
  float v18;
  float v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  float *v25;
  uint64_t v26;
  float v27;
  float v28;
  float v29;
  float v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unsigned __int8 *v34;
  uint64_t v35;
  unsigned int v36;
  float v37;
  int v38;
  uint64_t v39;
  float v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  unsigned __int8 *v44;
  uint64_t v45;
  unsigned int v46;
  float v47;
  int v48;
  int v49;
  uint64_t i;
  unsigned int v51;
  float v53[36];
  uint64_t v54;
  int v55;
  uint64_t v56;
  int v57;
  __int128 v58;
  __int128 v59;
  uint64_t v60;

  v60 = *MEMORY[0x24BDAC8D0];
  v4 = *((_QWORD *)this + 1);
  *(_WORD *)v4 = a2;
  v5 = a2 * a2;
  *(_WORD *)(v4 + 2) = 6 * a2 * a2;
  if (4 * ((3 * a2 * a2) & 0x7FFF))
  {
    v6 = physx::shdfnd::Foundation::mInstance;
    if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)physx::shdfnd::Foundation::mInstance + 40))(physx::shdfnd::Foundation::mInstance))
      v7 = "static const char *physx::shdfnd::ReflectionAllocator<unsigned char>::getName() [T = unsigned char]";
    else
      v7 = "<allocation names disabled>";
    v8 = (*(uint64_t (**)(uint64_t, _QWORD, const char *, const char *, uint64_t))(*(_QWORD *)(v6 + 24) + 16))(v6 + 24, 4 * ((3 * v5) & 0x7FFFu), v7, "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/physxcooking/src/convex/BigConvexDataBuilder.cpp", 69);
    v4 = *((_QWORD *)this + 1);
  }
  else
  {
    v8 = 0;
  }
  *(_QWORD *)(v4 + 8) = v8;
  v57 = 0;
  v56 = 0;
  v55 = 0;
  v54 = 0;
  if (a2)
  {
    v9 = 0;
    v10 = 0;
    v11 = (float)(a2 - 1) * 0.5;
    do
    {
      v12 = 1.0 - (float)((float)v10 / v11);
      v13 = v9;
      v14 = v9;
      v15 = v10;
      do
      {
        v16 = 1.0;
        v17 = 1.0 - (float)((float)v15 / v11);
        v18 = sqrtf((float)((float)(v17 * v17) + 1.0) + (float)(v12 * v12));
        if (v18 <= 0.0)
        {
          v19 = 1.0 - (float)((float)v10 / v11);
        }
        else
        {
          v16 = 1.0 / v18;
          v17 = v17 * (float)(1.0 / v18);
          v19 = v12 * (float)(1.0 / v18);
        }
        v20 = 0;
        v53[0] = -v16;
        v53[1] = v17;
        v53[2] = v19;
        v53[3] = v16;
        v53[4] = v17;
        v53[5] = v19;
        v53[6] = v19;
        v53[7] = -v16;
        v53[8] = v17;
        v53[9] = v19;
        v53[10] = v16;
        v53[11] = v17;
        v53[12] = v17;
        v53[13] = v19;
        v53[14] = -v16;
        v53[15] = v17;
        v53[16] = v19;
        v53[17] = v16;
        v53[18] = -v16;
        v53[19] = v19;
        v53[20] = v17;
        v53[21] = v16;
        v53[22] = v19;
        v53[23] = v17;
        v53[24] = v17;
        v53[25] = -v16;
        v53[26] = v19;
        v53[27] = v17;
        v53[28] = v16;
        v53[29] = v19;
        v53[30] = v19;
        v53[31] = v17;
        v53[32] = -v16;
        v53[33] = v19;
        v53[34] = v17;
        v53[35] = v16;
        v22 = *((_QWORD *)this + 1);
        v21 = *((_QWORD *)this + 2);
        v23 = *(_QWORD *)(v22 + 24);
        v24 = *(_QWORD *)(v22 + 32);
        do
        {
          v25 = &v53[3 * v20];
          v26 = *((unsigned __int8 *)&v56 + v20);
          v58 = 0uLL;
          v59 = 0uLL;
          v27 = *v25;
          v28 = v25[1];
          v29 = v25[2];
          v30 = (float)((float)(*(float *)(v21 + 12 * v26 + 4) * v28)
                      + (float)(*(float *)(v21 + 12 * v26) * *v25))
              + (float)(*(float *)(v21 + 12 * v26 + 8) * v29);
          do
          {
            v31 = v26;
            v32 = 4 * v26;
            v33 = *(unsigned __int16 *)(v23 + v32);
            if (!*(_WORD *)(v23 + v32))
              break;
            v34 = (unsigned __int8 *)(v24 + *(unsigned __int16 *)(v23 + 4 * v31 + 2));
            v26 = v31;
            do
            {
              v36 = *v34++;
              v35 = v36;
              v37 = (float)((float)(v28 * *(float *)(v21 + 12 * v36 + 4)) + (float)(*(float *)(v21 + 12 * v36) * v27))
                  + (float)(*(float *)(v21 + 12 * v36 + 8) * v29);
              if (v37 < v30)
              {
                v38 = *((_DWORD *)&v58 + (v35 >> 5));
                if ((v38 & (1 << v35)) == 0)
                {
                  *((_DWORD *)&v58 + (v35 >> 5)) = v38 | (1 << v35);
                  v26 = v35;
                  v30 = v37;
                }
              }
              --v33;
            }
            while (v33);
          }
          while (v26 != v31);
          *((_BYTE *)&v56 + v20) = v31;
          v39 = *((unsigned __int8 *)&v54 + v20);
          v58 = 0uLL;
          v59 = 0uLL;
          v40 = -(float)((float)((float)(v28 * *(float *)(v21 + 12 * v39 + 4))
                               + (float)(*(float *)(v21 + 12 * v39) * v27))
                       + (float)(*(float *)(v21 + 12 * v39 + 8) * v29));
          do
          {
            v41 = v39;
            v42 = 4 * v39;
            v43 = *(unsigned __int16 *)(v23 + v42);
            if (!*(_WORD *)(v23 + v42))
              break;
            v44 = (unsigned __int8 *)(v24 + *(unsigned __int16 *)(v23 + 4 * v41 + 2));
            v39 = v41;
            do
            {
              v46 = *v44++;
              v45 = v46;
              v47 = -(float)((float)((float)(v28 * *(float *)(v21 + 12 * v46 + 4))
                                   + (float)(*(float *)(v21 + 12 * v46) * v27))
                           + (float)(*(float *)(v21 + 12 * v46 + 8) * v29));
              if (v40 > v47)
              {
                v48 = *((_DWORD *)&v58 + (v45 >> 5));
                if ((v48 & (1 << v45)) == 0)
                {
                  *((_DWORD *)&v58 + (v45 >> 5)) = v48 | (1 << v45);
                  v39 = v45;
                  v40 = v47;
                }
              }
              --v43;
            }
            while (v43);
          }
          while (v39 != v41);
          *((_BYTE *)&v54 + v20++) = v41;
        }
        while (v20 != 12);
        v49 = 0;
        for (i = 0; i != 6; ++i)
        {
          *(_BYTE *)(*(_QWORD *)(*((_QWORD *)this + 1) + 8) + (v13 + v49)) = *((_BYTE *)&v56 + i);
          *(_BYTE *)(*(_QWORD *)(*((_QWORD *)this + 1) + 8)
                   + v13
                   + v49
                   + *(unsigned __int16 *)(*((_QWORD *)this + 1) + 2)) = *((_BYTE *)&v54 + i);
          v51 = v14 + v49;
          *(_BYTE *)(*(_QWORD *)(*((_QWORD *)this + 1) + 8) + v51) = *((_BYTE *)&v56 + i + 6);
          *(_BYTE *)(*(_QWORD *)(*((_QWORD *)this + 1) + 8) + v51 + *(unsigned __int16 *)(*((_QWORD *)this + 1) + 2)) = *((_BYTE *)&v54 + i + 6);
          v49 += v5;
        }
        ++v15;
        ++v14;
        v13 += a2;
      }
      while (v15 < a2);
      ++v10;
      v9 += a2 + 1;
    }
    while (v10 != a2);
  }
  return 1;
}

void physx::Cooking::~Cooking(physx::Cooking *this)
{
  if (this)
    (*(void (**)(uint64_t, physx::Cooking *))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24, this);
}

uint64_t UpdateLink(unsigned int a1, unsigned int a2, int a3, int a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  int v12;
  int v13;
  int v14;
  int v15;
  unsigned int Edge;
  unsigned int v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  BOOL v21;
  uint64_t v22;
  char v24;
  int v25;
  int v26;
  int v27;
  int v28;
  int v29;
  int v30;

  if (a6)
  {
    v12 = *(_DWORD *)(a6 + 4 * (3 * a1 + 1));
    v28 = *(_DWORD *)(a6 + 12 * a1);
    v29 = v12;
    v30 = *(_DWORD *)(a6 + 4 * (3 * a1 + 2));
    v13 = *(_DWORD *)(a6 + 4 * (3 * a2 + 1));
    v25 = *(_DWORD *)(a6 + 12 * a2);
    v26 = v13;
    v27 = *(_DWORD *)(a6 + 4 * (3 * a2 + 2));
  }
  if (a7)
  {
    v14 = *(unsigned __int16 *)(a7 + 2 * (3 * a1 + 1));
    v28 = *(unsigned __int16 *)(a7 + 6 * a1);
    v29 = v14;
    v30 = *(unsigned __int16 *)(a7 + 2 * (3 * a1 + 2));
    v15 = *(unsigned __int16 *)(a7 + 2 * (3 * a2 + 1));
    v25 = *(unsigned __int16 *)(a7 + 6 * a2);
    v26 = v15;
    v27 = *(unsigned __int16 *)(a7 + 2 * (3 * a2 + 2));
  }
  Edge = physx::Gu::TriangleT<unsigned int>::findEdge(&v28, a3, a4);
  v17 = physx::Gu::TriangleT<unsigned int>::findEdge(&v25, a3, a4);
  v21 = Edge == 255 || v17 == 255;
  v22 = !v21;
  if (v21)
  {
    physx::shdfnd::Foundation::error(physx::shdfnd::Foundation::mInstance, 8, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/physxcooking/src/Adjacencies.cpp", 509, "Adjacencies::UpdateLink: invalid edge reference", v18, v19, v20, v24);
  }
  else
  {
    *(_DWORD *)(a5 + 12 * a1 + 4 * Edge) = a2 | (v17 << 30);
    *(_DWORD *)(a5 + 12 * a2 + 4 * v17) = a1 | (Edge << 30);
  }
  return v22;
}

uint64_t physx::Gu::TriangleT<unsigned int>::findEdge(int *a1, int a2, int a3)
{
  int v3;
  int v5;

  v3 = *a1;
  if (*a1 == a2 && a1[1] == a3 || v3 == a3 && a1[1] == a2)
    return 0;
  if (v3 == a2 && a1[2] == a3 || v3 == a3 && a1[2] == a2)
    return 1;
  v5 = a1[1];
  if (v5 == a2 && a1[2] == a3 || v5 == a3 && a1[2] == a2)
    return 2;
  else
    return 255;
}

uint64_t QuantizerImpl::kmeansQuantize3D(uint64_t a1, unsigned int a2, uint64_t a3, unsigned int a4, char a5, unsigned int a6, unsigned int *a7)
{
  float32x2_t v11;
  float32x2_t v12;
  float *v13;
  float v14;
  float v15;
  unsigned int v16;
  uint64_t v17;
  float32x2_t v18;
  uint64_t v19;
  float32x2_t v20;
  float32x2_t v21;
  float32x2_t v22;
  float32x2_t v23;
  float32x2_t v24;
  float32x2_t v25;
  float32x2_t v26;
  float32x2_t v32;
  float *v33;
  unsigned int v34;
  float v35;
  float32x2_t v36;
  float v37;
  unsigned int v38;
  uint64_t v39;
  float *v40;
  uint64_t v41;
  __n128 v42;
  __n128 v43;
  __n128 v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  unsigned int v48;
  _DWORD *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  int v54;
  _DWORD *v55;
  _DWORD *v56;
  uint64_t v57;
  uint64_t v58;
  float v59;
  float32x2_t *v60;
  float32x2_t v61;
  float v62;
  uint64_t v63;
  float v64;
  float *v65;
  float v66;
  uint64_t v67;
  float32x2_t *v68;
  float *v69;
  unsigned int *v70;
  float *v71;
  uint64_t v72;
  unsigned int v73;
  unsigned int v74;
  float v75;
  float v76;
  float32x2_t v77;
  BOOL v78;
  uint64_t v79;
  uint64_t v80;
  unsigned int v81;
  float *v82;
  float v83;
  uint64_t v84;
  unint64_t v85;
  float *v86;
  float v87;
  float v88;
  float v89;
  _BOOL4 v90;
  int v91;
  _DWORD *v92;
  uint64_t v93;
  float *v94;
  float *v95;
  uint64_t v96;
  uint64_t v97;
  float *v98;
  unint64_t v99;
  float *v100;
  uint64_t *v101;
  unsigned int v102;
  uint64_t v103;
  unint64_t v104;
  uint64_t v105;
  unsigned int v106;
  uint64_t v107;
  uint64_t *v109;
  float32x2_t v111;
  float v112;
  float32x2_t v113;
  __int32 v114;

  *a7 = 0;
  *(_DWORD *)(a1 + 40) = 0;
  *(_DWORD *)(a1 + 56) = 0;
  if (!a2)
    return 0;
  v11 = (float32x2_t)vdup_n_s32(0x7E7FFFFFu);
  v12 = (float32x2_t)vdup_n_s32(0xFE7FFFFF);
  v13 = (float *)(a3 + 8);
  v14 = 8.5071e37;
  v15 = -8.5071e37;
  v16 = a2;
  v17 = a4;
  do
  {
    if (v14 >= *v13)
      v14 = *v13;
    v18 = *(float32x2_t *)(v13 - 2);
    v11 = (float32x2_t)vbsl_s8((int8x8_t)vcgt_f32(v18, v11), (int8x8_t)v11, (int8x8_t)v18);
    v12 = (float32x2_t)vbsl_s8((int8x8_t)vcgt_f32(v12, v18), (int8x8_t)v12, (int8x8_t)v18);
    if (v15 <= *v13)
      v15 = *v13;
    v13 = (float *)((char *)v13 + a4);
    --v16;
  }
  while (v16);
  v19 = 0;
  v20 = (float32x2_t)vrev64_s32((int32x2_t)v11);
  v21.i32[1] = v20.i32[1];
  v22.i32[0] = 1065361605;
  v22.i32[1] = v12.i32[0];
  v23 = vadd_f32(v20, v22);
  v20.f32[1] = v14;
  v24.i32[0] = vdup_lane_s32((int32x2_t)v12, 1).u32[0];
  v24.f32[1] = v15;
  *(float32x2_t *)(a1 + 24) = vmul_f32(vadd_f32(v20, v24), (float32x2_t)0x3F0000003F000000);
  v25 = vmul_f32(vsub_f32(v12, v11), (float32x2_t)vdup_n_s32(0x3F8020C5u));
  v26 = vmul_f32(v25, (float32x2_t)0x3F0000003F000000);
  v113 = v25;
  v21.f32[0] = v15 - v14;
  v25.i32[0] = vmul_f32(v21, v22).u32[0];
  v114 = v25.i32[0];
  v25.i32[1] = v23.i32[1];
  *(float32x2_t *)(a1 + 8) = v26;
  *(float32x2_t *)(a1 + 16) = vmul_f32(v25, (float32x2_t)0x3F0000003F000000);
  do
  {
    if (v113.f32[v19] == 0.0)
      *(_DWORD *)(a1 + 8 + v19 * 4) = 1065353216;
    ++v19;
  }
  while (v19 != 3);
  v109 = (uint64_t *)(a1 + 48);
  __asm { FMOV            V1.2S, #1.0 }
  v32 = vdiv_f32(_D1, *(float32x2_t *)(a1 + 8));
  v33 = (float *)(a3 + 8);
  v34 = a2;
  v35 = 1.0 / *(float *)(a1 + 16);
  do
  {
    v36 = vmul_f32(v32, vsub_f32(*(float32x2_t *)(v33 - 2), *(float32x2_t *)(a1 + 20)));
    v37 = v35 * (float)(*v33 - *(float *)(a1 + 28));
    v111 = v36;
    v112 = v37;
    v38 = *(_DWORD *)(a1 + 40);
    if ((*(_DWORD *)(a1 + 44) & 0x7FFFFFFFu) <= v38)
    {
      physx::shdfnd::Array<physx::PxVec3,physx::shdfnd::ReflectionAllocator<physx::PxVec3>>::growAndPushBack((uint64_t *)(a1 + 32), (uint64_t)&v111);
    }
    else
    {
      v39 = *(_QWORD *)(a1 + 32) + 12 * v38;
      *(float32x2_t *)v39 = v36;
      *(float *)(v39 + 8) = v37;
      *(_DWORD *)(a1 + 40) = v38 + 1;
    }
    v33 = (float *)((char *)v33 + v17);
    --v34;
  }
  while (v34);
  v40 = (float *)(*(uint64_t (**)(uint64_t, uint64_t, const char *, const char *, uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24)
                                                                                                  + 16))(physx::shdfnd::Foundation::mInstance + 24, 12 * a2, "NonTrackedAlloc", "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/physxcooking/src/Quantizer.cpp", 229);
  v41 = (*(uint64_t (**)(uint64_t, uint64_t, const char *, const char *, uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24)
                                                                                         + 16))(physx::shdfnd::Foundation::mInstance + 24, 4 * a2, "NonTrackedAlloc", "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/physxcooking/src/Quantizer.cpp", 230);
  v45 = *(_QWORD *)(a1 + 32);
  if (a6)
  {
    v46 = (*(uint64_t (**)(uint64_t, uint64_t, const char *, const char *, uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24)
                                                                                           + 16))(physx::shdfnd::Foundation::mInstance + 24, 4 * a6, "NonTrackedAlloc", "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/physxcooking/src/Quantizer.cpp", 61);
    if (a2 <= a6)
    {
      v96 = 0;
      v97 = 0;
      v79 = a2;
      do
      {
        if (v41)
          *(_DWORD *)(v41 + 4 * v97) = v97;
        v98 = &v40[v96];
        v42.n128_u64[0] = *(_QWORD *)(v45 + v96 * 4);
        *(_QWORD *)v98 = v42.n128_u64[0];
        v42.n128_u32[0] = *(_DWORD *)(v45 + v96 * 4 + 8);
        v98[2] = v42.n128_f32[0];
        *(_DWORD *)(v46 + 4 * v97++) = 1;
        v96 += 3;
      }
      while (3 * a2 != v96);
      a6 = a2;
      goto LABEL_50;
    }
    v47 = (*(uint64_t (**)(uint64_t, uint64_t, const char *, const char *, uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24)
                                                                                           + 16))(physx::shdfnd::Foundation::mInstance + 24, 12 * a6, "NonTrackedAlloc", "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/physxcooking/src/Quantizer.cpp", 78);
    v48 = 0;
    v49 = v40 + 2;
    v50 = a6;
    do
    {
      v51 = v45 + 12 * (v48 / a6);
      v42.n128_u64[0] = *(_QWORD *)v51;
      *((_QWORD *)v49 - 1) = *(_QWORD *)v51;
      *v49 = *(_DWORD *)(v51 + 8);
      v49 += 3;
      v48 += a2;
      --v50;
    }
    while (v50);
  }
  else
  {
    v47 = 0;
    v46 = 0;
  }
  if (a2 <= 1)
    v53 = 1;
  else
    v53 = a2;
  v54 = 64;
  v42.n128_u32[0] = 2139095039;
  v43.n128_u32[0] = 1008981770;
  v44.n128_u32[0] = 1.0;
  do
  {
    v55 = (_DWORD *)v46;
    v56 = (_DWORD *)(v47 + 8);
    v57 = a6;
    if (a6)
    {
      do
      {
        *v55++ = 0;
        *((_QWORD *)v56 - 1) = 0;
        *v56 = 0;
        v56 += 3;
        --v57;
      }
      while (v57);
    }
    v58 = 0;
    v59 = 0.0;
    do
    {
      v60 = (float32x2_t *)(v45 + 12 * v58);
      v61 = *v60;
      v62 = v60[1].f32[0];
      if (a6)
      {
        v63 = 0;
        v64 = 3.4028e38;
        v65 = v40 + 2;
        do
        {
          v66 = (float)((float)((float)(v61.f32[1] - *(v65 - 1)) * (float)(v61.f32[1] - *(v65 - 1)))
                      + (float)((float)(v61.f32[0] - *(v65 - 2)) * (float)(v61.f32[0] - *(v65 - 2))))
              + (float)((float)(v62 - *v65) * (float)(v62 - *v65));
          if (v66 < v64)
          {
            *(_DWORD *)(v41 + 4 * v58) = v63;
            v64 = v66;
          }
          ++v63;
          v65 += 3;
        }
        while (a6 != v63);
      }
      else
      {
        v64 = 3.4028e38;
      }
      v67 = *(unsigned int *)(v41 + 4 * v58);
      v68 = (float32x2_t *)(v47 + 12 * v67);
      *v68 = vadd_f32(v61, *v68);
      v68[1].f32[0] = v62 + v68[1].f32[0];
      ++*(_DWORD *)(v46 + 4 * v67);
      v59 = v59 + v64;
      ++v58;
    }
    while (v58 != v53);
    v69 = (float *)(v47 + 8);
    v70 = (unsigned int *)v46;
    v71 = v40 + 2;
    v72 = a6;
    if (a6)
    {
      do
      {
        v74 = *v70++;
        v73 = v74;
        if (v74)
        {
          v75 = 1.0 / (float)v73;
          v76 = v75 * *v69;
          *v69 = v76;
          v77 = vmul_n_f32(*(float32x2_t *)(v69 - 2), v75);
          *((float32x2_t *)v69 - 1) = v77;
          *((float32x2_t *)v71 - 1) = v77;
          *v71 = v76;
        }
        v71 += 3;
        v69 += 3;
        --v72;
      }
      while (v72);
    }
    if (!--v54)
      break;
    if (v59 < 0.01)
      break;
    v78 = vabds_f32(v59, v42.n128_f32[0]) <= 0.01;
    v42.n128_f32[0] = v59;
  }
  while (!v78);
  if (v47)
    (*(void (**)(uint64_t, __n128, __n128, __n128))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24)
                                                            + 24))(physx::shdfnd::Foundation::mInstance + 24, v42, v43, v44);
  v79 = a2;
  if (!a6)
  {
    v81 = 0;
LABEL_81:
    (*(void (**)(uint64_t, uint64_t, __n128, __n128, __n128))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance
                                                                                 + 24)
                                                                     + 24))(physx::shdfnd::Foundation::mInstance + 24, v46, v42, v43, v44);
    goto LABEL_82;
  }
LABEL_50:
  v80 = 0;
  v81 = 0;
  v42.n128_u32[0] = 841731190;
  do
  {
    if (*(_DWORD *)(v46 + 4 * v80))
    {
      if (v81)
      {
        v82 = &v40[3 * v80];
        v43.n128_f32[0] = *v82;
        v44.n128_f32[0] = v82[1];
        v83 = v82[2];
        v84 = v81;
        v85 = 0;
        if ((float)((float)((float)((float)(v44.n128_f32[0] - v40[1]) * (float)(v44.n128_f32[0] - v40[1]))
                           + (float)((float)(v43.n128_f32[0] - *v40) * (float)(v43.n128_f32[0] - *v40)))
                   + (float)((float)(v83 - v40[2]) * (float)(v83 - v40[2]))) < 0.00000001)
        {
          v90 = 1;
        }
        else
        {
          v86 = v40 + 5;
          while (v81 - 1 != v85)
          {
            v87 = v43.n128_f32[0] - *(v86 - 2);
            v88 = v44.n128_f32[0] - *(v86 - 1);
            v89 = *v86;
            v86 += 3;
            ++v85;
            if ((float)((float)((float)(v88 * v88) + (float)(v87 * v87))
                       + (float)((float)(v83 - v89) * (float)(v83 - v89))) < 0.00000001)
            {
              v90 = v85 < v81;
              goto LABEL_61;
            }
          }
          v90 = 0;
          LODWORD(v85) = v81;
        }
      }
      else
      {
        v84 = 0;
        v90 = 0;
        LODWORD(v85) = 0;
      }
LABEL_61:
      v91 = v84 != v80 || v90;
      if (v41 && v91)
      {
        v92 = (_DWORD *)v41;
        v93 = v79;
        do
        {
          if (v80 == *v92)
            *v92 = v85;
          ++v92;
          --v93;
        }
        while (v93);
      }
      if (!v90)
      {
        v94 = &v40[3 * v80];
        v95 = &v40[3 * v84];
        v43.n128_u64[0] = *(_QWORD *)v94;
        *(_QWORD *)v95 = *(_QWORD *)v94;
        v43.n128_f32[0] = v94[2];
        v95[2] = v43.n128_f32[0];
        ++v81;
      }
    }
    ++v80;
  }
  while (v80 != a6);
  if (v46)
    goto LABEL_81;
LABEL_82:
  *a7 = v81;
  if (v81)
  {
    if ((a5 & 1) != 0)
    {
      v99 = 0;
      v100 = v40 + 2;
      v101 = v109;
      do
      {
        v44.n128_u64[0] = *(_QWORD *)(a1 + 20);
        v42.n128_u64[0] = (unint64_t)vadd_f32(vmul_f32(*(float32x2_t *)(v100 - 2), *(float32x2_t *)(a1 + 8)), (float32x2_t)v44.n128_u64[0]);
        v44.n128_u32[0] = *(_DWORD *)(a1 + 28);
        v43.n128_f32[0] = (float)(*v100 * *(float *)(a1 + 16)) + v44.n128_f32[0];
        v113 = (float32x2_t)v42.n128_u64[0];
        v114 = v43.n128_u32[0];
        v102 = *(_DWORD *)(a1 + 56);
        if ((*(_DWORD *)(a1 + 60) & 0x7FFFFFFFu) <= v102)
        {
          physx::shdfnd::Array<physx::PxVec3,physx::shdfnd::ReflectionAllocator<physx::PxVec3>>::growAndPushBack(v109, (uint64_t)&v113);
        }
        else
        {
          v103 = *(_QWORD *)(a1 + 48) + 12 * v102;
          *(_QWORD *)v103 = v42.n128_u64[0];
          *(_DWORD *)(v103 + 8) = v43.n128_u32[0];
          *(_DWORD *)(a1 + 56) = v102 + 1;
        }
        ++v99;
        v100 += 3;
      }
      while (v99 < *a7);
    }
    else
    {
      v104 = 0;
      v105 = (uint64_t)v40;
      v101 = v109;
      do
      {
        v106 = *(_DWORD *)(a1 + 56);
        if ((*(_DWORD *)(a1 + 60) & 0x7FFFFFFFu) <= v106)
        {
          physx::shdfnd::Array<physx::PxVec3,physx::shdfnd::ReflectionAllocator<physx::PxVec3>>::growAndPushBack(v109, v105);
        }
        else
        {
          v107 = *(_QWORD *)(a1 + 48) + 12 * v106;
          v42.n128_u64[0] = *(_QWORD *)v105;
          *(_QWORD *)v107 = *(_QWORD *)v105;
          v42.n128_u32[0] = *(_DWORD *)(v105 + 8);
          *(_DWORD *)(v107 + 8) = v42.n128_u32[0];
          *(_DWORD *)(a1 + 56) = v106 + 1;
        }
        ++v104;
        v105 += 12;
      }
      while (v104 < *a7);
    }
    v52 = *v101;
    if (!v40)
      goto LABEL_99;
    goto LABEL_98;
  }
  v52 = 0;
  if (v40)
LABEL_98:
    (*(void (**)(uint64_t, float *, __n128, __n128, __n128))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance
                                                                                 + 24)
                                                                     + 24))(physx::shdfnd::Foundation::mInstance + 24, v40, v42, v43, v44);
LABEL_99:
  if (v41)
    (*(void (**)(uint64_t, uint64_t, __n128, __n128, __n128))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance
                                                                                 + 24)
                                                                     + 24))(physx::shdfnd::Foundation::mInstance + 24, v41, v42, v43, v44);
  return v52;
}

uint64_t QuantizerImpl::getDenormalizeScale(QuantizerImpl *this)
{
  return (uint64_t)this + 8;
}

uint64_t QuantizerImpl::getDenormalizeCenter(QuantizerImpl *this)
{
  return (uint64_t)this + 20;
}

uint64_t QuantizerImpl::release(uint64_t this)
{
  if (this)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)this + 40))(this);
  return this;
}

void QuantizerImpl::~QuantizerImpl(QuantizerImpl *this)
{
  uint64_t v2;

  QuantizerImpl::~QuantizerImpl(this);
  if (v2)
    (*(void (**)(uint64_t, QuantizerImpl *))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24, this);
}

{
  int v2;
  int v4;

  *(_QWORD *)this = &off_24ED929D0;
  v2 = *((_DWORD *)this + 15);
  if ((v2 & 0x80000000) == 0 && (v2 & 0x7FFFFFFF) != 0 && *((_QWORD *)this + 6) != 0)
    (*(void (**)(uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
  v4 = *((_DWORD *)this + 11);
  if ((v4 & 0x80000000) == 0 && (v4 & 0x7FFFFFFF) != 0 && *((_QWORD *)this + 4) != 0)
    (*(void (**)(uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
}

uint64_t physx::shdfnd::Array<physx::PxVec3,physx::shdfnd::ReflectionAllocator<physx::PxVec3>>::growAndPushBack(uint64_t *a1, uint64_t a2)
{
  int v4;
  unsigned int v5;
  uint64_t v6;
  const char *v7;
  uint64_t v8;
  unsigned int v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;

  v4 = *((_DWORD *)a1 + 3);
  if ((v4 & 0x7FFFFFFF) != 0)
    v5 = 2 * v4;
  else
    v5 = 1;
  if (v5)
  {
    v6 = physx::shdfnd::Foundation::mInstance;
    if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)physx::shdfnd::Foundation::mInstance + 40))(physx::shdfnd::Foundation::mInstance))
      v7 = "static const char *physx::shdfnd::ReflectionAllocator<physx::PxVec3>::getName() [T = physx::PxVec3]";
    else
      v7 = "<allocation names disabled>";
    v8 = (*(uint64_t (**)(uint64_t, uint64_t, const char *, const char *, uint64_t))(*(_QWORD *)(v6 + 24) + 16))(v6 + 24, 12 * v5, v7, "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/foundation/include/PsArray.h", 553);
  }
  else
  {
    v8 = 0;
  }
  v9 = *((_DWORD *)a1 + 2);
  v10 = (_QWORD *)(v8 + 12 * v9);
  v11 = *a1;
  if (v9)
  {
    v12 = *a1;
    v13 = v8;
    do
    {
      *(_QWORD *)v13 = *(_QWORD *)v12;
      *(_DWORD *)(v13 + 8) = *(_DWORD *)(v12 + 8);
      v13 += 12;
      v12 += 12;
    }
    while (v13 < (unint64_t)v10);
  }
  *v10 = *(_QWORD *)a2;
  *(_DWORD *)(v8 + 12 * v9 + 8) = *(_DWORD *)(a2 + 8);
  if ((*((_DWORD *)a1 + 3) & 0x80000000) == 0 && v11)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
    v9 = *((_DWORD *)a1 + 2);
  }
  *a1 = v8;
  *((_DWORD *)a1 + 2) = v9 + 1;
  *((_DWORD *)a1 + 3) = v5;
  return v8 + 12 * v9;
}

uint64_t physx::saveHeightField(uint64_t a1, void (***a2)(_QWORD, float *, uint64_t), int a3)
{
  uint64_t v6;
  unsigned int v7;
  unsigned int v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int v11;
  unsigned int v12;
  unsigned int v13;
  unsigned int v14;
  float v15;
  float v16;
  float v17;
  float v18;
  float v19;
  float v20;
  unsigned int v21;
  unsigned int v22;
  unsigned int v23;
  unsigned int v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  unsigned int v28;
  uint64_t v29;
  float v31;

  v6 = physx::writeHeader(72, 70, 72, 70, 1u, a3, (void (***)(_QWORD, _QWORD, _QWORD))a2);
  if ((_DWORD)v6)
  {
    v7 = *(_DWORD *)(a1 + 56);
    v31 = *(float *)&v7;
    if (a3)
      v31 = COERCE_FLOAT(bswap32(v7));
    (**a2)(a2, &v31, 4);
    v8 = *(_DWORD *)(a1 + 60);
    v31 = *(float *)&v8;
    if (a3)
      v31 = COERCE_FLOAT(bswap32(v8));
    (**a2)(a2, &v31, 4);
    v9 = *(_DWORD *)(a1 + 64);
    v31 = *(float *)&v9;
    if (a3)
      v31 = COERCE_FLOAT(bswap32(v9));
    (**a2)(a2, &v31, 4);
    v10 = *(_DWORD *)(a1 + 68);
    v31 = *(float *)&v10;
    if (a3)
      v31 = COERCE_FLOAT(bswap32(v10));
    (**a2)(a2, &v31, 4);
    v11 = *(_DWORD *)(a1 + 72);
    v31 = *(float *)&v11;
    if (a3)
      v31 = COERCE_FLOAT(bswap32(v11));
    (**a2)(a2, &v31, 4);
    v31 = 0.0;
    (**a2)(a2, &v31, 4);
    v12 = *(_DWORD *)(a1 + 88);
    v31 = *(float *)&v12;
    if (a3)
      v31 = COERCE_FLOAT(bswap32(v12));
    (**a2)(a2, &v31, 4);
    v13 = *(unsigned __int16 *)(a1 + 92);
    LOWORD(v31) = *(_WORD *)(a1 + 92);
    if (a3)
      LOWORD(v31) = __rev16(v13);
    (**a2)(a2, &v31, 2);
    v14 = *(_DWORD *)(a1 + 96);
    v31 = *(float *)&v14;
    if (a3)
      v31 = COERCE_FLOAT(bswap32(v14));
    (**a2)(a2, &v31, 4);
    v15 = *(float *)(a1 + 32) - *(float *)(a1 + 44);
    v31 = v15;
    if (a3)
      v31 = COERCE_FLOAT(bswap32(LODWORD(v15)));
    (**a2)(a2, &v31, 4);
    v16 = *(float *)(a1 + 36) - *(float *)(a1 + 48);
    v31 = v16;
    if (a3)
      v31 = COERCE_FLOAT(bswap32(LODWORD(v16)));
    (**a2)(a2, &v31, 4);
    v17 = *(float *)(a1 + 40) - *(float *)(a1 + 52);
    v31 = v17;
    if (a3)
      v31 = COERCE_FLOAT(bswap32(LODWORD(v17)));
    (**a2)(a2, &v31, 4);
    v18 = *(float *)(a1 + 32) + *(float *)(a1 + 44);
    v31 = v18;
    if (a3)
      v31 = COERCE_FLOAT(bswap32(LODWORD(v18)));
    (**a2)(a2, &v31, 4);
    v19 = *(float *)(a1 + 36) + *(float *)(a1 + 48);
    v31 = v19;
    if (a3)
      v31 = COERCE_FLOAT(bswap32(LODWORD(v19)));
    (**a2)(a2, &v31, 4);
    v20 = *(float *)(a1 + 40) + *(float *)(a1 + 52);
    v31 = v20;
    if (a3)
      v31 = COERCE_FLOAT(bswap32(LODWORD(v20)));
    (**a2)(a2, &v31, 4);
    v21 = *(_DWORD *)(a1 + 104);
    v31 = *(float *)&v21;
    if (a3)
      v31 = COERCE_FLOAT(bswap32(v21));
    (**a2)(a2, &v31, 4);
    v22 = *(_DWORD *)(a1 + 108);
    v31 = *(float *)&v22;
    if (a3)
      v31 = COERCE_FLOAT(bswap32(v22));
    (**a2)(a2, &v31, 4);
    v23 = *(_DWORD *)(a1 + 112);
    v31 = *(float *)&v23;
    if (a3)
      v31 = COERCE_FLOAT(bswap32(v23));
    (**a2)(a2, &v31, 4);
    v24 = *(_DWORD *)(a1 + 116);
    v31 = *(float *)&v24;
    if (a3)
      v31 = COERCE_FLOAT(bswap32(v24));
    (**a2)(a2, &v31, 4);
    if (*(_DWORD *)(a1 + 108))
    {
      v25 = 0;
      v26 = 0;
      do
      {
        v27 = *(_QWORD *)(a1 + 80);
        v28 = *(unsigned __int16 *)(v27 + v25);
        LOWORD(v31) = *(_WORD *)(v27 + v25);
        if (a3)
          LOWORD(v31) = __rev16(v28);
        (**a2)(a2, &v31, 2);
        v29 = v27 + v25;
        (**a2)(a2, (float *)(v29 + 2), 1);
        (**a2)(a2, (float *)(v29 + 3), 1);
        ++v26;
        v25 += 4;
      }
      while (v26 < *(unsigned int *)(a1 + 108));
    }
  }
  return v6;
}

float physx::MeshBulider::computeLocalBounds(physx::MeshBulider *this, physx::Gu::MeshDataBase *a2)
{
  uint64_t v3;
  float v4;
  float v5;
  float v6;
  float result;

  physx::Gu::computeBoundsAroundVertices((uint64_t)this + 32, *((_DWORD *)this + 4), *((_OWORD **)this + 3));
  v3 = 0;
  v4 = 0.0;
  do
  {
    v5 = fabsf(*(float *)((char *)this + v3 + 44));
    v6 = fabsf(*(float *)((char *)this + v3 + 32));
    if (v5 <= v6)
      v5 = v6;
    if (v4 <= v5)
      v4 = v5;
    v3 += 4;
  }
  while (v3 != 12);
  result = v4 * 0.00000023842;
  *((float *)this + 14) = result;
  return result;
}

uint64_t physx::TriangleMeshBuilder::releaseEdgeList(uint64_t this)
{
  uint64_t v1;
  uint64_t v2;

  v1 = this;
  v2 = *(_QWORD *)(this + 8);
  if (v2)
  {
    physx::Gu::EdgeList::~EdgeList(*(physx::Gu::EdgeList **)(this + 8));
    this = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24, v2);
  }
  *(_QWORD *)(v1 + 8) = 0;
  return this;
}

uint64_t physx::TriangleMeshBuilder::createSharedEdgeData(uint64_t this, int a2, int a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, char a9)
{
  uint64_t v10;
  size_t v11;
  uint64_t v12;
  const char *v13;
  void *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  const char *v22;
  physx::Gu::EdgeListBuilder *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  int v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  char *v37;
  void *v38;
  int *v39;
  int v40;
  uint64_t v41;
  unsigned int *v42;
  int *v43;
  uint64_t v44;
  unsigned int v45;
  unsigned int v46;
  int v47;
  int v48;
  int EdgeCCW;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  int v53;
  uint64_t v54;
  uint64_t v55;
  __int16 v56;
  uint64_t v57;
  int v58;

  v52 = this;
  if ((a2 & 1) != 0 || a3)
  {
    v10 = *(_QWORD *)(this + 24);
    v11 = *(unsigned int *)(v10 + 104);
    if ((_DWORD)v11)
    {
      v12 = physx::shdfnd::Foundation::mInstance;
      if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)physx::shdfnd::Foundation::mInstance + 40))(physx::shdfnd::Foundation::mInstance))
        v13 = "static const char *physx::shdfnd::ReflectionAllocator<unsigned char>::getName() [T = unsigned char]";
      else
        v13 = "<allocation names disabled>";
      v14 = (void *)(*(uint64_t (**)(uint64_t, size_t, const char *, const char *, uint64_t))(*(_QWORD *)(v12 + 24) + 16))(v12 + 24, v11, v13, "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/physxcooking/src/mesh/TriangleMeshBuilder.cpp", 254);
      *(_QWORD *)(*(_QWORD *)(v52 + 24) + 120) = v14;
      bzero(v14, v11);
      if (v11 >> 30)
        return physx::shdfnd::Foundation::error(physx::shdfnd::Foundation::mInstance, 4, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/physxcooking/src/mesh/TriangleMeshBuilder.cpp", 261, "TriangleMesh: mesh is too big for this algo!", v15, v16, v17, a9);
    }
    else
    {
      *(_QWORD *)(v10 + 120) = 0;
      bzero(0, v11);
    }
    v18 = *(_QWORD *)(v52 + 24);
    v19 = *(_QWORD *)(v18 + 112);
    v58 = 1036831949;
    v53 = *(_DWORD *)(v18 + 104);
    if ((*(_BYTE *)(v18 + 12) & 2) != 0)
      v20 = 0;
    else
      v20 = v19;
    v51 = v19;
    if ((*(_BYTE *)(v18 + 12) & 2) == 0)
      v19 = 0;
    v54 = v20;
    v55 = v19;
    v56 = 257;
    v57 = *(_QWORD *)(v18 + 24);
    v21 = physx::shdfnd::Foundation::mInstance;
    if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)physx::shdfnd::Foundation::mInstance + 40))(physx::shdfnd::Foundation::mInstance))
      v22 = "static const char *physx::shdfnd::ReflectionAllocator<physx::Gu::EdgeListBuilder>::getName() [T = physx::Gu:"
            ":EdgeListBuilder]";
    else
      v22 = "<allocation names disabled>";
    v23 = (physx::Gu::EdgeListBuilder *)(*(uint64_t (**)(uint64_t, uint64_t, const char *, const char *, uint64_t))(*(_QWORD *)(v21 + 24) + 16))(v21 + 24, 48, v22, "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/physxcooking/src/mesh/TriangleMeshBuilder.cpp", 752);
    *(_DWORD *)v23 = 0;
    *((_QWORD *)v23 + 1) = 0;
    *((_QWORD *)v23 + 4) = 0;
    *((_QWORD *)v23 + 5) = 0;
    *((_QWORD *)v23 + 3) = 0;
    *(_QWORD *)(v52 + 8) = v23;
    this = physx::Gu::EdgeListBuilder::init(v23, (uint64_t)&v53, v24, v25, v26, v27, v28, v29);
    v30 = *(_QWORD *)(v52 + 8);
    if ((this & 1) != 0)
    {
      if (v30)
      {
        v31 = *(_DWORD *)(v30 + 16);
        if (v31)
        {
          if (v31 == *(_DWORD *)(*(_QWORD *)(v52 + 24) + 104))
          {
            v32 = 0;
            v33 = 0;
            do
            {
              v34 = *(_QWORD *)(v30 + 24);
              if ((*(_DWORD *)(v34 + v32) & 0x80000000) != 0)
                *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v52 + 24) + 120) + v33) |= 8u;
              v35 = v34 + v32;
              if ((*(_DWORD *)(v35 + 4) & 0x80000000) != 0)
                *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v52 + 24) + 120) + v33) |= 0x10u;
              if ((*(_DWORD *)(v35 + 8) & 0x80000000) != 0)
                *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v52 + 24) + 120) + v33) |= 0x20u;
              ++v33;
              v30 = *(_QWORD *)(v52 + 8);
              v32 += 12;
            }
            while (v33 < *(unsigned int *)(v30 + 16));
          }
        }
      }
    }
    else
    {
      if (v30)
      {
        physx::Gu::EdgeList::~EdgeList(*(physx::Gu::EdgeList **)(v52 + 8));
        this = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24)
                                                           + 24))(physx::shdfnd::Foundation::mInstance + 24, v30);
      }
      *(_QWORD *)(v52 + 8) = 0;
    }
    if (a2)
    {
      if ((_DWORD)v11)
      {
        v36 = physx::shdfnd::Foundation::mInstance;
        v37 = (*(unsigned int (**)(uint64_t))(*(_QWORD *)physx::shdfnd::Foundation::mInstance + 40))(physx::shdfnd::Foundation::mInstance)
            ? "static const char *physx::shdfnd::ReflectionAllocator<unsigned int>::getName() [T = unsigned int]"
            : "<allocation names disabled>";
        v38 = (void *)(*(uint64_t (**)(uint64_t, uint64_t, char *, const char *, uint64_t))(*(_QWORD *)(v36 + 24)
                                                                                                 + 16))(v36 + 24, 4 * (3 * v11), v37, "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/physxcooking/src/mesh/TriangleMeshBuilder.cpp", 285);
      }
      else
      {
        v38 = 0;
      }
      *(_QWORD *)(*(_QWORD *)(v52 + 24) + 72) = v38;
      this = (uint64_t)memset(v38, 255, 12 * v11);
      v39 = *(int **)(v52 + 8);
      v40 = *v39;
      if (*v39)
      {
        v41 = *((_QWORD *)v39 + 5);
        v42 = (unsigned int *)(*((_QWORD *)v39 + 4) + 4);
        v43 = (int *)(*((_QWORD *)v39 + 1) + 4);
        do
        {
          if (*((unsigned __int16 *)v42 - 1) >= 2u)
          {
            v44 = *v42;
            v45 = *(_DWORD *)(v41 + 4 * v44);
            v46 = *(_DWORD *)(v41 + 4 * (v44 + 1));
            v47 = *(v43 - 1);
            v48 = *v43;
            EdgeCCW = physx::Gu::TriangleT<unsigned int>::findEdgeCCW((int *)(v51 + 12 * v45), v47, *v43);
            this = physx::Gu::TriangleT<unsigned int>::findEdgeCCW((int *)(v51 + 12 * v46), v47, v48);
            v50 = *(_QWORD *)(*(_QWORD *)(v52 + 24) + 72);
            *(_DWORD *)(v50 + 4 * (3 * v45 + EdgeCCW)) = v46;
            *(_DWORD *)(v50 + 4 * (3 * v46 + this)) = v45;
          }
          v42 += 2;
          v43 += 2;
          --v40;
        }
        while (v40);
      }
    }
  }
  return this;
}

uint64_t physx::Gu::TriangleT<unsigned int>::findEdgeCCW(int *a1, int a2, int a3)
{
  int v3;
  int v5;

  v3 = *a1;
  if (*a1 == a2 && a1[1] == a3 || v3 == a3 && a1[1] == a2)
    return 0;
  if (v3 == a2 && a1[2] == a3 || v3 == a3 && a1[2] == a2)
    return 2;
  v5 = a1[1];
  if (v5 == a2 && a1[2] == a3 || v5 == a3 && a1[2] == a2)
    return 1;
  else
    return 255;
}

_QWORD *physx::TriangleMeshBuilder::recordTriangleIndices(_QWORD *this)
{
  _QWORD *v1;
  uint64_t v2;
  const void *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  const char *v7;
  void *v8;
  size_t v9;

  if (*(_BYTE *)(this[2] + 14))
  {
    v1 = this;
    this = memcpy(*(void **)(this[3] + 80), *(const void **)(this[3] + 112), (12 * *(_DWORD *)(this[3] + 104)));
    v2 = v1[3];
    v3 = *(const void **)(v2 + 64);
    if (v3)
    {
      v4 = *(unsigned int *)(v2 + 104);
      if ((_DWORD)v4)
      {
        v5 = 4 * v4;
        v6 = physx::shdfnd::Foundation::mInstance;
        if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)physx::shdfnd::Foundation::mInstance + 40))(physx::shdfnd::Foundation::mInstance))
          v7 = "static const char *physx::shdfnd::ReflectionAllocator<unsigned int>::getName() [T = unsigned int]";
        else
          v7 = "<allocation names disabled>";
        v8 = (void *)(*(uint64_t (**)(uint64_t, uint64_t, const char *, const char *, uint64_t))(*(_QWORD *)(v6 + 24) + 16))(v6 + 24, v5, v7, "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/physxcooking/src/mesh/TriangleMeshBuilder.cpp", 643);
        v2 = v1[3];
        v3 = *(const void **)(v2 + 64);
        v9 = (4 * *(_DWORD *)(v2 + 104));
      }
      else
      {
        v9 = 0;
        v8 = 0;
      }
      *(_QWORD *)(v2 + 96) = v8;
      return memcpy(v8, v3, v9);
    }
  }
  return this;
}

uint64_t physx::TriangleMeshBuilder::createGRBMidPhaseAndData(uint64_t this, unsigned int a2)
{
  uint64_t v3;
  uint64_t v4;
  const char *v5;
  float32x2_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unsigned int *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  const char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t *v20;
  unint64_t v21;
  unsigned int *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  _QWORD *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unsigned int v35;
  unsigned int v36;
  unsigned int v37;
  unsigned int v38;
  float *v39;
  float *v40;
  float v41;
  float v42;
  float v43;
  float v44;
  float *v45;
  float v46;
  float v47;
  float v48;
  float v49;
  float v50;
  float v51;
  float v52;
  float v53;
  float v54;
  float v55;
  float v56;
  float v57;
  float v58;
  float *v59;
  unsigned int v60;
  unsigned int *v61;
  unsigned int v62;
  unsigned int v63;
  unsigned int *v64;
  unsigned int v65;
  unsigned int *v66;
  int v67;
  unsigned int v68;
  int v69;
  __int128 *v70;
  uint64_t v71;
  unsigned int *v72;
  unsigned int v73;
  unsigned int v74;
  uint64_t v75;
  unsigned int v76;
  unsigned int *v77;
  unsigned int v78;
  unsigned int v79;
  uint64_t v80;
  unsigned int v81;
  unsigned int v82;
  uint64_t v83;
  unsigned int v84;
  uint64_t v85;
  int v86;
  uint64_t v87;
  int v88;
  _DWORD *v89;
  int v90;
  int v91;
  unsigned int v92;
  unsigned int *v93;
  int v94;
  unsigned int *i;
  unsigned int v96;
  uint64_t v97;
  unsigned int v98;
  unsigned int v99;
  uint64_t v100;
  unsigned int v101;
  unsigned int v102;
  unsigned int v103;
  unsigned int v104;
  uint64_t v105;
  int v106;
  _DWORD *v107;
  uint64_t v108;
  uint64_t v109;
  _DWORD *v110;
  int v111;
  unsigned int v112;
  unsigned int v113;
  uint64_t v114;
  uint64_t v115;
  int v116;
  uint64_t v117;
  int v118;
  uint64_t v119;
  const char *v120;
  uint64_t v121;
  uint64_t v122;
  unsigned int *v123;
  BOOL v124;
  uint64_t v125;
  uint64_t v126;
  _DWORD *v127;
  unsigned int v128;
  unsigned int v129;
  float *v130;
  unsigned int v131;
  int v132;
  int v133;
  unint64_t v134;
  uint64_t v135;
  unint64_t v136;
  unint64_t v137;
  uint64_t v138;
  char v139;
  unsigned int v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  unsigned int v144;
  uint64_t v145;
  int Adjacent;
  _BYTE v147[4];
  uint64_t v148;
  __int128 *v149;
  char v150;
  void *v151;
  char v152;
  __int128 v153;
  __int128 v154;
  __int128 v155;
  __int128 v156;
  __int128 v157;
  __int128 v158;
  __int128 v159;
  __int128 v160;
  uint64_t v161;

  v161 = *MEMORY[0x24BDAC8D0];
  if (*(_BYTE *)(*(_QWORD *)(this + 16) + 14))
  {
    v3 = this;
    v4 = physx::shdfnd::Foundation::mInstance;
    if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)physx::shdfnd::Foundation::mInstance + 40))(physx::shdfnd::Foundation::mInstance))
      v5 = "static const char *physx::shdfnd::ReflectionAllocator<physx::Gu::BV32Tree>::getName() [T = physx::Gu::BV32Tree]";
    else
      v5 = "<allocation names disabled>";
    v6 = (float32x2_t *)(*(uint64_t (**)(uint64_t, uint64_t, const char *, const char *, uint64_t))(*(_QWORD *)(v4 + 24) + 16))(v4 + 24, 64, v5, "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/physxcooking/src/mesh/TriangleMeshBuilder.cpp", 687);
    v6[5] = 0;
    v6[6] = 0;
    v6[4] = 0;
    v6[7].i8[0] = 0;
    v6[1] = 0;
    v6[2] = 0;
    *v6 = 0;
    v6[3].i32[0] = 0;
    v7 = *(_QWORD *)(v3 + 24);
    *(_QWORD *)(v7 + 136) = v6;
    v8 = *(_QWORD *)(v3 + 16);
    *(_QWORD *)&v154 = 0;
    LODWORD(v153) = *(_DWORD *)(v7 + 16);
    DWORD2(v154) = *(_DWORD *)(v7 + 104);
    v9 = *(_QWORD *)(v7 + 24);
    v155 = *(unint64_t *)(v7 + 80);
    *((_QWORD *)&v153 + 1) = v9;
    this = physx::Gu::BuildBV32Ex(v6, (physx::Gu::BV32Tree *)&v153, (physx::Gu::SourceMesh *)0x20, 0.0002);
    if (!(_DWORD)this)
    {
      this = physx::shdfnd::Foundation::error(physx::shdfnd::Foundation::mInstance, 32, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/physxcooking/src/mesh/TriangleMeshBuilder.cpp", 1249, "BV32 tree failed to build.", v10, v11, v12, v139);
      if ((_QWORD)v154)
        this = (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24, v154);
LABEL_24:
      v23 = *(_QWORD *)(v3 + 24);
      v24 = *(unsigned int *)(v23 + 104);
      if ((_DWORD)v24)
      {
        this = (*(uint64_t (**)(uint64_t, uint64_t, const char *, const char *, uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24)
                                                                                                + 16))(physx::shdfnd::Foundation::mInstance + 24, 12 * v24, "NonTrackedAlloc", "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/physxcooking/src/mesh/TriangleMeshBuilder.cpp", 662);
        v25 = this;
        v26 = *(unsigned int *)(v23 + 104);
        if ((_DWORD)v26)
        {
          this = (*(uint64_t (**)(uint64_t, uint64_t, const char *, const char *, uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24)
                                                                                                  + 16))(physx::shdfnd::Foundation::mInstance + 24, 16 * v26, "NonTrackedAlloc", "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/physxcooking/src/mesh/TriangleMeshBuilder.cpp", 664);
          v27 = *(unsigned int *)(v23 + 104);
          v28 = *(_QWORD **)(v3 + 24);
          v28[11] = this;
          if ((_DWORD)v27)
          {
            v143 = this;
            v141 = v3;
            v29 = v28[3];
            v30 = v28[10];
            v31 = (*(uint64_t (**)(uint64_t, uint64_t, const char *, const char *, uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 16))(physx::shdfnd::Foundation::mInstance + 24, 36 * v27, "NonTrackedAlloc", "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/physxcooking/src/mesh/GrbTriangleMeshCooking.h", 147);
            v32 = v31;
            v33 = 0;
            v34 = 0;
            v35 = 2;
            do
            {
              v36 = *(_DWORD *)(v30 + v33);
              v37 = *(_DWORD *)(v30 + v33 + 4);
              v38 = *(_DWORD *)(v30 + v33 + 8);
              v39 = (float *)(v29 + 12 * v37);
              v40 = (float *)(v29 + 12 * v36);
              v41 = v40[1];
              v42 = *v39 - *v40;
              v43 = v39[1] - v41;
              v44 = v39[2];
              v45 = (float *)(v29 + 12 * v38);
              v46 = *v45 - *v40;
              v47 = v40[2];
              v48 = v44 - v47;
              v49 = v45[1] - v41;
              v50 = v45[2] - v47;
              v51 = (float)(v43 * v50) - (float)(v48 * v49);
              v52 = (float)(v48 * v46) - (float)(v42 * v50);
              v53 = (float)(v42 * v49) - (float)(v43 * v46);
              v54 = (float)((float)(v52 * v52) + (float)(v51 * v51)) + (float)(v53 * v53);
              v55 = 0.0;
              v56 = 0.0;
              v57 = 0.0;
              if (v54 > 0.0)
              {
                v58 = 1.0 / sqrtf(v54);
                v55 = v51 * v58;
                v56 = v52 * v58;
                v57 = v53 * v58;
              }
              v59 = (float *)(v25 + v33);
              *v59 = v55;
              v59[1] = v56;
              v59[2] = v57;
              if (v36 >= v37)
                v60 = v37;
              else
                v60 = v36;
              v61 = (unsigned int *)(v31 + 12 * (v35 - 2));
              if (v36 <= v37)
                v62 = v37;
              else
                v62 = v36;
              *v61 = v60;
              v61[1] = v62;
              v61[2] = v34;
              if (v37 >= v38)
                v63 = v38;
              else
                v63 = v37;
              v64 = (unsigned int *)(v31 + 12 * (v35 - 1));
              if (v37 <= v38)
                v37 = v38;
              *v64 = v63;
              v64[1] = v37;
              v64[2] = v34;
              if (v36 >= v38)
                v65 = v38;
              else
                v65 = v36;
              v66 = (unsigned int *)(v31 + 12 * v35);
              if (v36 <= v38)
                v36 = v38;
              *v66 = v65;
              v66[1] = v36;
              v66[2] = v34++;
              v35 += 3;
              v33 += 12;
            }
            while (v27 != v34);
            v142 = v30;
            v140 = a2;
            v152 = 0;
            v151 = &v153;
            v148 = 0x2000000000;
            v149 = &v153;
            v150 = 0;
            v67 = 3 * v27 - 1;
            if (v67 >= 1)
            {
              v68 = 0;
              v69 = 0;
              v159 = 0u;
              v160 = 0u;
              v157 = 0u;
              v158 = 0u;
              v155 = 0u;
              v156 = 0u;
              v145 = v31 + 16;
              v70 = &v153;
              v153 = 0u;
              v154 = 0u;
              while (1)
              {
                if (v67 > v69)
                {
                  if ((v67 - v69) < 5)
                  {
LABEL_85:
                    v105 = v69;
                    v106 = v69 + 1;
                    v107 = (_DWORD *)(v145 + 12 * v69);
                    do
                    {
                      v108 = 0;
                      v109 = v105++;
                      v110 = v107;
                      v111 = v109;
                      do
                      {
                        v112 = *(v110 - 1);
                        v113 = *(_DWORD *)(v32 + 12 * v111);
                        if (v112 < v113 || v112 == v113 && *v110 < *(_DWORD *)(v32 + 12 * v111 + 4))
                          v111 = v106 + v108;
                        v110 += 3;
                        ++v108;
                      }
                      while (v109 + v108 < v67);
                      if (v111 != (_DWORD)v109)
                      {
                        v114 = v32 + 12 * v111;
                        v115 = v32 + 12 * v109;
                        v116 = *(_DWORD *)(v114 + 8);
                        v117 = *(_QWORD *)v114;
                        v118 = *(_DWORD *)(v115 + 8);
                        *(_QWORD *)v114 = *(_QWORD *)v115;
                        *(_DWORD *)(v114 + 8) = v118;
                        *(_QWORD *)v115 = v117;
                        *(_DWORD *)(v115 + 8) = v116;
                      }
                      ++v106;
                      v107 += 3;
                    }
                    while (v105 != v67);
                  }
                  else
                  {
                    while (1)
                    {
                      v71 = v32 + 12 * ((v67 + v69) / 2);
                      v72 = (unsigned int *)(v32 + 12 * v69);
                      v73 = *v72;
                      if (*(_DWORD *)v71 < *v72
                        || *(_DWORD *)v71 == v73
                        && (v73 = *(_DWORD *)v71,
                            *(_DWORD *)(v32 + 12 * ((v67 + v69) / 2) + 4) < *(_DWORD *)(v32 + 12 * v69 + 4)))
                      {
                        v74 = v72[2];
                        v75 = *(_QWORD *)v72;
                        v76 = *(_DWORD *)(v71 + 8);
                        *(_QWORD *)v72 = *(_QWORD *)v71;
                        v72[2] = v76;
                        *(_QWORD *)v71 = v75;
                        *(_DWORD *)(v71 + 8) = v74;
                        v73 = *v72;
                      }
                      v77 = (unsigned int *)(v32 + 12 * v67);
                      v78 = *v77;
                      if (*v77 < v73
                        || v78 == v73
                        && (v78 = v73, *(_DWORD *)(v32 + 12 * v67 + 4) < *(_DWORD *)(v32 + 12 * v69 + 4)))
                      {
                        v79 = v72[2];
                        v80 = *(_QWORD *)v72;
                        v81 = v77[2];
                        *(_QWORD *)v72 = *(_QWORD *)v77;
                        v72[2] = v81;
                        *(_QWORD *)v77 = v80;
                        v77[2] = v79;
                        v78 = v80;
                      }
                      if (v78 < *(_DWORD *)v71
                        || v78 == *(_DWORD *)v71
                        && *(_DWORD *)(v32 + 12 * v67 + 4) < *(_DWORD *)(v32 + 12 * ((v67 + v69) / 2) + 4))
                      {
                        v82 = *(_DWORD *)(v71 + 8);
                        v83 = *(_QWORD *)v71;
                        v84 = v77[2];
                        *(_QWORD *)v71 = *(_QWORD *)v77;
                        *(_DWORD *)(v71 + 8) = v84;
                        *(_QWORD *)v77 = v83;
                        v77[2] = v82;
                      }
                      v85 = v32 + 12 * (v67 - 1);
                      v86 = *(_DWORD *)(v71 + 8);
                      v87 = *(_QWORD *)v71;
                      v88 = *(_DWORD *)(v85 + 8);
                      *(_QWORD *)v71 = *(_QWORD *)v85;
                      *(_DWORD *)(v71 + 8) = v88;
                      *(_QWORD *)v85 = v87;
                      *(_DWORD *)(v85 + 8) = v86;
                      v89 = (_DWORD *)(v85 + 4);
                      v90 = v69;
                      v91 = v67 - 1;
                      while (1)
                      {
                        v92 = *(_DWORD *)v85;
                        v93 = (unsigned int *)(v32 + 12 + 12 * v90);
                        v94 = v90;
                        while (*v93 < v92 || *v93 == v92 && v93[1] < *v89)
                        {
                          ++v94;
                          v93 += 3;
                        }
                        v90 = v94 + 1;
                        for (i = (unsigned int *)(v32 - 12 + 12 * v91--); v92 < *i || v92 == *i && *v89 < i[1]; i -= 3)
                          --v91;
                        if (v90 >= v91)
                          break;
                        v96 = v93[2];
                        v97 = *(_QWORD *)v93;
                        v98 = i[2];
                        *(_QWORD *)v93 = *(_QWORD *)i;
                        v93[2] = v98;
                        *(_QWORD *)i = v97;
                        i[2] = v96;
                      }
                      v99 = v93[2];
                      v100 = *(_QWORD *)v93;
                      v101 = *(_DWORD *)(v85 + 8);
                      *(_QWORD *)v93 = *(_QWORD *)v85;
                      v93[2] = v101;
                      *(_QWORD *)v85 = v100;
                      *(_DWORD *)(v85 + 8) = v99;
                      v102 = HIDWORD(v148) - 1;
                      if (v94 - v69 + 1 >= v67 - 1 - v94)
                      {
                        if (v68 >= v102)
                        {
                          physx::shdfnd::internal::Stack<physx::shdfnd::ReflectionAllocator<physx::EdgeTriLookup>>::grow((uint64_t)v147);
                          v68 = v148;
                          v70 = v149;
                        }
                        *((_DWORD *)v70 + v68) = v94 + 2;
                        v104 = v68 + 1;
                        v68 += 2;
                        LODWORD(v148) = v68;
                        *((_DWORD *)v70 + v104) = v67;
                        v67 = v94;
                      }
                      else
                      {
                        if (v68 >= v102)
                        {
                          physx::shdfnd::internal::Stack<physx::shdfnd::ReflectionAllocator<physx::EdgeTriLookup>>::grow((uint64_t)v147);
                          v68 = v148;
                          v70 = v149;
                        }
                        *((_DWORD *)v70 + v68) = v69;
                        v103 = v68 + 1;
                        v68 += 2;
                        LODWORD(v148) = v68;
                        *((_DWORD *)v70 + v103) = v94;
                        v69 = v94 + 2;
                      }
                      if (v67 <= v69)
                        break;
                      if ((v67 - v69) <= 4)
                        goto LABEL_85;
                    }
                  }
                }
                if (!v68)
                  break;
                LODWORD(v148) = v68 - 1;
                v67 = *((_DWORD *)v70 + v68 - 1);
                v68 -= 2;
                LODWORD(v148) = v68;
                v69 = *((_DWORD *)v70 + v68);
              }
              if (v150)
                v124 = v70 == 0;
              else
                v124 = 1;
              if (!v124)
              {
                (*(void (**)(uint64_t, __int128 *))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24)
                                                            + 24))(physx::shdfnd::Foundation::mInstance + 24, v70);
                if (v152)
                  physx::shdfnd::TempAllocator::deallocate((physx::shdfnd::TempAllocator *)&v151, (char *)v151);
              }
            }
            v125 = 0;
            v126 = 0;
            v127 = (_DWORD *)(v143 + 8);
            do
            {
              v128 = *(_DWORD *)(v142 + v125 + 4);
              v129 = *(_DWORD *)(v142 + v125 + 8);
              v130 = (float *)(v29 + 12 * *(unsigned int *)(v142 + v125));
              v131 = *(_DWORD *)(v142 + v125);
              v144 = v131;
              *(_QWORD *)&v153 = *(_QWORD *)(v25 + v125);
              DWORD2(v153) = *(_DWORD *)(v25 + v125 + 8);
              *((float *)&v153 + 3) = -(float)((float)((float)(*((float *)&v153 + 1) * v130[1])
                                                     + (float)(*v130 * *(float *)&v153))
                                             + (float)(v130[2] * *((float *)&v153 + 2)));
              Adjacent = physx::findAdjacent(v29, v25, v142, v27, v131, v128, (float *)&v153, v32, v126);
              v132 = physx::findAdjacent(v29, v25, v142, v27, v128, v129, (float *)&v153, v32, v126);
              v133 = physx::findAdjacent(v29, v25, v142, v27, v129, v144, (float *)&v153, v32, v126);
              *(v127 - 2) = Adjacent;
              *(v127 - 1) = v132;
              *v127 = v133;
              v127[1] = 0;
              v127 += 4;
              ++v126;
              v125 += 12;
            }
            while (v27 != v126);
            if (v32)
              (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24, v32);
            a2 = v140;
            v3 = v141;
            goto LABEL_119;
          }
LABEL_100:
          if (!v25)
          {
            if (!a2)
            {
LABEL_120:
              v122 = *(_QWORD *)(v3 + 24);
              v123 = (unsigned int *)(v122 + 104);
              if (!*(_DWORD *)(v122 + 104))
                return this;
              v121 = 0;
              goto LABEL_122;
            }
LABEL_102:
            v119 = physx::shdfnd::Foundation::mInstance;
            if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)physx::shdfnd::Foundation::mInstance + 40))(physx::shdfnd::Foundation::mInstance))
              v120 = "static const char *physx::shdfnd::ReflectionAllocator<unsigned int>::getName() [T = unsigned int]";
            else
              v120 = "<allocation names disabled>";
            this = (*(uint64_t (**)(uint64_t, uint64_t, const char *, const char *, uint64_t))(*(_QWORD *)(v119 + 24) + 16))(v119 + 24, 4 * a2, v120, "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/physxcooking/src/mesh/TriangleMeshBuilder.cpp", 695);
            v121 = this;
            v122 = *(_QWORD *)(v3 + 24);
            v123 = (unsigned int *)(v122 + 104);
            if (!*(_DWORD *)(v122 + 104))
            {
              if (!this)
                return this;
              return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24)
                                                                 + 24))(physx::shdfnd::Foundation::mInstance + 24, v121);
            }
LABEL_122:
            v134 = 0;
            v135 = *(_QWORD *)(v122 + 64);
            do
            {
              *(_DWORD *)(v121 + 4 * *(unsigned int *)(v135 + 4 * v134)) = v134;
              ++v134;
              v136 = *v123;
            }
            while (v134 < v136);
            if ((_DWORD)v136)
            {
              v137 = 0;
              v138 = *(_QWORD *)(v122 + 96);
              do
              {
                *(_DWORD *)(v138 + 4 * v137) = *(_DWORD *)(v121 + 4 * *(unsigned int *)(v138 + 4 * v137));
                ++v137;
              }
              while (v137 < *v123);
            }
            return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24)
                                                               + 24))(physx::shdfnd::Foundation::mInstance + 24, v121);
          }
LABEL_119:
          this = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24)
                                                             + 24))(physx::shdfnd::Foundation::mInstance + 24, v25);
          if (!a2)
            goto LABEL_120;
          goto LABEL_102;
        }
        v23 = *(_QWORD *)(v3 + 24);
      }
      else
      {
        v25 = 0;
      }
      *(_QWORD *)(v23 + 88) = 0;
      goto LABEL_100;
    }
    v13 = (unsigned int *)v154;
    if (*(_BYTE *)(v8 + 12) && !*(_BYTE *)(v8 + 14))
    {
LABEL_20:
      if (v13)
        this = (*(uint64_t (**)(uint64_t, unsigned int *))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24)
                                                                  + 24))(physx::shdfnd::Foundation::mInstance + 24, v13);
      goto LABEL_24;
    }
    v14 = *(unsigned int *)(v7 + 104);
    if ((_DWORD)v14)
    {
      v15 = 4 * v14;
      v16 = physx::shdfnd::Foundation::mInstance;
      if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)physx::shdfnd::Foundation::mInstance + 40))(physx::shdfnd::Foundation::mInstance))
        v17 = "static const char *physx::shdfnd::ReflectionAllocator<unsigned int>::getName() [T = unsigned int]";
      else
        v17 = "<allocation names disabled>";
      this = (*(uint64_t (**)(uint64_t, uint64_t, const char *, const char *, uint64_t))(*(_QWORD *)(v16 + 24)
                                                                                              + 16))(v16 + 24, v15, v17, "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/physxcooking/src/mesh/TriangleMeshBuilder.cpp", 1257);
      v18 = this;
      v20 = (uint64_t *)(v7 + 96);
      v19 = *(_QWORD *)(v7 + 96);
      if (*(_DWORD *)(v7 + 104))
      {
        v21 = 0;
        do
        {
          v22 = v13;
          if (v19)
            v22 = (unsigned int *)(v19 + 4 * *v13);
          *(_DWORD *)(this + 4 * v21++) = *v22;
          ++v13;
        }
        while (v21 < *(unsigned int *)(v7 + 104));
      }
      if (!v19)
        goto LABEL_19;
    }
    else
    {
      v18 = 0;
      v20 = (uint64_t *)(v7 + 96);
      if (!*(_QWORD *)(v7 + 96))
        goto LABEL_19;
    }
    this = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
LABEL_19:
    *v20 = v18;
    v13 = (unsigned int *)v154;
    goto LABEL_20;
  }
  return this;
}

uint64_t physx::TriangleMeshBuilder::loadFromDesc(uint64_t a1, __int128 *a2, _DWORD *a3, int a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int v8;
  uint64_t v9;
  unsigned int v15;
  unsigned int v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v21;
  int v22;
  float v23;
  __int128 v25;
  __int16 v26;
  uint64_t v27;
  uint64_t v28;
  const char *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  physx::Gu::MeshDataBase *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  __int128 v39;
  _BYTE v40[28];
  __int16 v41;
  __int128 v42;

  v8 = *((_DWORD *)a2 + 4);
  if (v8 >= 3)
  {
    v9 = *((_QWORD *)a2 + 4);
    if ((-1431655765 * v8 < 0x55555556 || v9 != 0) && (!*((_QWORD *)a2 + 8) || *((_DWORD *)a2 + 14) >= 2u))
    {
      v15 = *((_DWORD *)a2 + 10);
      if ((v8 < 0x10000 || (a2[3] & 2) == 0) && *((_QWORD *)a2 + 1) && *(_DWORD *)a2 >= 0xCu)
      {
        if (!v9 || ((a2[3] & 2) != 0 ? (v16 = 6) : (v16 = 12), *((_DWORD *)a2 + 6) >= v16))
        {
          v21 = *(_QWORD *)(a1 + 16);
          v22 = *(_DWORD *)(v21 + 40);
          if (v22 == 1)
          {
            if ((*(_DWORD *)(v21 + 32) - 4) >= 0xC)
            {
LABEL_35:
              v17 = physx::shdfnd::Foundation::mInstance;
              v18 = "TriangleMesh::loadFromDesc: mParams.midphaseDesc.isValid() failed!";
              v19 = 783;
              goto LABEL_21;
            }
          }
          else
          {
            if (v22)
              goto LABEL_35;
            v23 = *(float *)(v21 + 32);
            if (v23 < 0.0 || v23 > 1.0)
              goto LABEL_35;
          }
          *(_OWORD *)&v40[12] = *(__int128 *)((char *)a2 + 28);
          v25 = a2[1];
          v39 = *a2;
          *(_OWORD *)v40 = v25;
          v26 = *((_WORD *)a2 + 24);
          v41 = v26;
          v42 = *(__int128 *)((char *)a2 + 56);
          if (*(_QWORD *)&v40[16])
          {
            if ((physx::TriangleMeshBuilder::importMesh(a1, (unsigned int *)&v39, (_BYTE *)v21, a3, a4) & 1) == 0)
              return 0;
          }
          else
          {
            v41 = v26 & 0xFFFD;
            v27 = *(unsigned int *)v40;
            *(_DWORD *)&v40[8] = 12;
            *(_DWORD *)&v40[24] = *(_DWORD *)v40 / 3u;
            if (*(_DWORD *)v40)
            {
              v28 = physx::shdfnd::Foundation::mInstance;
              if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)physx::shdfnd::Foundation::mInstance + 40))(physx::shdfnd::Foundation::mInstance))
                v29 = "static const char *physx::shdfnd::ReflectionAllocator<unsigned int>::getName() [T = unsigned int]";
              else
                v29 = "<allocation names disabled>";
              v30 = (*(uint64_t (**)(uint64_t, uint64_t, const char *, const char *, uint64_t))(*(_QWORD *)(v28 + 24) + 16))(v28 + 24, 4 * *(unsigned int *)v40, v29, "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/physxcooking/src/mesh/TriangleMeshBuilder.cpp", 804);
              v31 = v30;
              v32 = 0;
              do
              {
                *(_DWORD *)(v30 + 4 * v32) = v32;
                ++v32;
              }
              while (v27 != v32);
            }
            else
            {
              v31 = 0;
            }
            *(_QWORD *)&v40[16] = v31;
            if ((physx::TriangleMeshBuilder::importMesh(a1, (unsigned int *)&v39, *(_BYTE **)(a1 + 16), a3, a4) & 1) == 0)
              return 0;
            if (v31)
              (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24, v31);
          }
          physx::TriangleMeshBuilder::recordTriangleIndices((_QWORD *)a1);
          (*(void (**)(uint64_t))(*(_QWORD *)a1 + 24))(a1);
          physx::MeshBulider::computeLocalBounds(*(physx::MeshBulider **)(a1 + 24), v33);
          physx::TriangleMeshBuilder::createSharedEdgeData(a1, *(unsigned __int8 *)(*(_QWORD *)(a1 + 16) + 13), (*(_DWORD *)(*(_QWORD *)(a1 + 16) + 24) & 4) == 0, v34, v35, v36, v37, v38, v39);
          physx::TriangleMeshBuilder::createGRBMidPhaseAndData(a1, v15);
          return 1;
        }
      }
    }
  }
  v17 = physx::shdfnd::Foundation::mInstance;
  v18 = "TriangleMesh::loadFromDesc: desc.isValid() failed!";
  v19 = 776;
LABEL_21:
  physx::shdfnd::Foundation::error(v17, 4, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/physxcooking/src/mesh/TriangleMeshBuilder.cpp", v19, v18, a6, a7, a8, v39);
  return 0;
}

uint64_t physx::TriangleMeshBuilder::importMesh(uint64_t a1, unsigned int *a2, _BYTE *a3, _DWORD *a4, int a5)
{
  uint64_t v10;
  unsigned int v11;
  uint64_t v12;
  physx::Gu::TriangleMeshData *v13;
  _DWORD *Triangles;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  uint64_t *v21;
  uint64_t v22;
  int v23;
  _DWORD *v24;
  _DWORD *v25;
  __int16 v26;
  BOOL v27;
  uint64_t v28;
  uint64_t v29;
  BOOL v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  const char *v36;
  _WORD *v37;
  int v38;
  uint64_t v39;
  _WORD *v40;
  uint64_t v41;
  uint64_t v42;
  float v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  const char *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  unsigned int *v52;
  uint64_t v53;
  uint64_t v54;
  const char *v55;
  void *v56;
  int v57;
  int v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  int v65;
  unsigned int v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  const char *v73;
  uint64_t v74;
  uint64_t v75;
  int v76;
  unint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  unint64_t v81;
  char v82;
  float v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  unsigned int v87;
  unsigned int *v88;
  unsigned int v89;
  unsigned int v90;
  unsigned int v91;
  float *v92;
  float *v93;
  float v94;
  float v95;
  float v96;
  float v97;
  float *v98;
  float v99;
  float v100;
  BOOL v101;
  int v103;
  unsigned int v104;
  void *v105;
  uint64_t v106;
  void *__src;

  v10 = *(_QWORD *)(a1 + 24);
  v11 = a2[4];
  if (v11 == -1)
  {
    v12 = 0;
    v13 = *(physx::Gu::TriangleMeshData **)(a1 + 24);
  }
  else
  {
    v12 = (*(uint64_t (**)(uint64_t, uint64_t, const char *, const char *, uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24)
                                                                                           + 16))(physx::shdfnd::Foundation::mInstance + 24, 12 * (v11 + 1), "NonTrackedAlloc", "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/geomutils/src/mesh/GuMeshData.h", 148);
    v13 = *(physx::Gu::TriangleMeshData **)(a1 + 24);
  }
  *(_QWORD *)(v10 + 24) = v12;
  *(_DWORD *)(v10 + 16) = v11;
  Triangles = (_DWORD *)physx::Gu::TriangleMeshData::allocateTriangles(v13, a2[10], 1, a3[14]);
  v18 = *(_QWORD *)(a1 + 24);
  v19 = *(_DWORD *)(v18 + 16);
  if (v19)
  {
    v20 = *a2;
    v21 = (uint64_t *)*((_QWORD *)a2 + 1);
    do
    {
      v22 = *v21;
      *(_DWORD *)(v12 + 8) = *((_DWORD *)v21 + 2);
      *(_QWORD *)v12 = v22;
      v12 += 12;
      v21 = (uint64_t *)((char *)v21 + v20);
      --v19;
    }
    while (v19);
    v18 = *(_QWORD *)(a1 + 24);
  }
  v23 = *(_DWORD *)(v18 + 104);
  v24 = &Triangles[3 * v23];
  v25 = (_DWORD *)*((_QWORD *)a2 + 4);
  v26 = *((_WORD *)a2 + 24);
  if ((v26 & 2) != 0)
  {
    if (v23)
    {
      v30 = (v26 & 1) == 0;
      v31 = 1;
      if (v30)
        v32 = 1;
      else
        v32 = 2;
      if (v30)
        v31 = 2;
      do
      {
        *Triangles = *(unsigned __int16 *)v25;
        Triangles[1] = *((unsigned __int16 *)v25 + v32);
        Triangles[2] = *((unsigned __int16 *)v25 + v31);
        v25 = (_DWORD *)((char *)v25 + a2[6]);
        Triangles += 3;
      }
      while (Triangles < v24);
    }
  }
  else if (v23)
  {
    v27 = (v26 & 1) == 0;
    v28 = 1;
    if (v27)
      v29 = 1;
    else
      v29 = 2;
    if (v27)
      v28 = 2;
    do
    {
      *Triangles = *v25;
      Triangles[1] = v25[v29];
      Triangles[2] = v25[v28];
      v25 = (_DWORD *)((char *)v25 + a2[6]);
      Triangles += 3;
    }
    while (Triangles < v24);
  }
  if (*((_QWORD *)a2 + 8))
  {
    v33 = *(unsigned int *)(v18 + 104);
    if ((_DWORD)v33)
    {
      v34 = 2 * v33;
      v35 = physx::shdfnd::Foundation::mInstance;
      if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)physx::shdfnd::Foundation::mInstance + 40))(physx::shdfnd::Foundation::mInstance))
        v36 = "static const char *physx::shdfnd::ReflectionAllocator<unsigned short>::getName() [T = unsigned short]";
      else
        v36 = "<allocation names disabled>";
      v37 = (_WORD *)(*(uint64_t (**)(uint64_t, uint64_t, const char *, const char *, uint64_t))(*(_QWORD *)(v35 + 24) + 16))(v35 + 24, v34, v36, "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/geomutils/src/mesh/GuMeshData.h", 239);
      v38 = *(_DWORD *)(*(_QWORD *)(a1 + 24) + 104);
      *(_QWORD *)(v18 + 128) = v37;
      if (v38)
      {
        v39 = a2[14];
        v40 = (_WORD *)*((_QWORD *)a2 + 8);
        do
        {
          *v37++ = *v40;
          v40 = (_WORD *)((char *)v40 + v39);
          --v38;
        }
        while (v38);
      }
    }
    else
    {
      *(_QWORD *)(v18 + 128) = 0;
    }
  }
  if ((a3[24] & 2) == 0 || a5)
  {
    v42 = *(_QWORD *)(a1 + 16);
    v43 = 0.0;
    if ((*(_BYTE *)(v42 + 24) & 1) != 0)
    {
      v43 = *(float *)(v42 + 28);
      if (v43 == 0.0)
      {
        physx::shdfnd::Foundation::error(physx::shdfnd::Foundation::mInstance, 2, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/physxcooking/src/mesh/TriangleMeshBuilder.cpp", 144, "TriangleMesh: Enable mesh welding with 0 weld tolerance!", v15, v16, v17, v103);
        v43 = 0.0;
      }
    }
    physx::MeshCleaner::MeshCleaner((uint64_t)&v103, *(_DWORD *)(*(_QWORD *)(a1 + 24) + 16), *(float **)(*(_QWORD *)(a1 + 24) + 24), *(_DWORD *)(*(_QWORD *)(a1 + 24) + 104), *(unsigned int **)(*(_QWORD *)(a1 + 24) + 112), v43);
    v44 = v104;
    if (v104)
    {
      v45 = *(_QWORD *)(a1 + 24);
      if (!a5 || v103 == *(_DWORD *)(v45 + 16) && v104 == *(_DWORD *)(v45 + 104))
      {
        if (__src)
        {
          if (*(_QWORD *)(v45 + 128))
          {
            v46 = physx::shdfnd::Foundation::mInstance;
            if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)physx::shdfnd::Foundation::mInstance + 40))(physx::shdfnd::Foundation::mInstance))
              v47 = "static const char *physx::shdfnd::ReflectionAllocator<unsigned short>::getName() [T = unsigned short]";
            else
              v47 = "<allocation names disabled>";
            v48 = (*(uint64_t (**)(uint64_t, uint64_t, const char *, const char *, uint64_t))(*(_QWORD *)(v46 + 24) + 16))(v46 + 24, 2 * v44, v47, "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/physxcooking/src/mesh/TriangleMeshBuilder.cpp", 175);
            v49 = v48;
            v50 = 0;
            v51 = *(_QWORD *)(*(_QWORD *)(a1 + 24) + 128);
            v52 = (unsigned int *)__src;
            do
            {
              *(_WORD *)(v48 + 2 * v50) = *(_WORD *)(v51 + 2 * v52[v50]);
              ++v50;
            }
            while (v44 != v50);
            (*(void (**)(uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
            v45 = *(_QWORD *)(a1 + 24);
            *(_QWORD *)(v45 + 128) = v49;
          }
          v53 = *(_QWORD *)(a1 + 16);
          if (!*(_BYTE *)(v53 + 12) || *(_BYTE *)(v53 + 14))
          {
            v54 = physx::shdfnd::Foundation::mInstance;
            if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)physx::shdfnd::Foundation::mInstance + 40))(physx::shdfnd::Foundation::mInstance))
              v55 = "static const char *physx::shdfnd::ReflectionAllocator<unsigned int>::getName() [T = unsigned int]";
            else
              v55 = "<allocation names disabled>";
            v56 = (void *)(*(uint64_t (**)(uint64_t, uint64_t, const char *, const char *, uint64_t))(*(_QWORD *)(v54 + 24) + 16))(v54 + 24, 4 * v44, v55, "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/physxcooking/src/mesh/TriangleMeshBuilder.cpp", 185);
            *(_QWORD *)(*(_QWORD *)(a1 + 24) + 64) = v56;
            memcpy(v56, __src, (4 * v44));
            v45 = *(_QWORD *)(a1 + 24);
          }
        }
        v57 = *(_DWORD *)(v45 + 16);
        v58 = v103;
        if (v57 != v103)
        {
          if (*(_QWORD *)(v45 + 24))
          {
            (*(void (**)(uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
            v45 = *(_QWORD *)(a1 + 24);
            v58 = v103;
          }
          v59 = 0;
          *(_QWORD *)(v45 + 24) = 0;
          v60 = v45;
          if (v58 != -1)
          {
            v59 = (*(uint64_t (**)(uint64_t, uint64_t, const char *, const char *, uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 16))(physx::shdfnd::Foundation::mInstance + 24, 12 * (v58 + 1), "NonTrackedAlloc", "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/geomutils/src/mesh/GuMeshData.h", 148);
            v60 = *(_QWORD *)(a1 + 24);
          }
          *(_QWORD *)(v45 + 24) = v59;
          *(_DWORD *)(v45 + 16) = v58;
          v57 = *(_DWORD *)(v60 + 16);
          v45 = v60;
        }
        memcpy(*(void **)(v45 + 24), v105, (12 * v57));
        v64 = *(_QWORD *)(a1 + 24);
        v65 = *(_DWORD *)(v64 + 104);
        v66 = v104;
        if (v65 != v104)
        {
          if (*(_QWORD *)(v64 + 112))
          {
            (*(void (**)(uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
            v64 = *(_QWORD *)(a1 + 24);
            v66 = v104;
          }
          *(_QWORD *)(v64 + 112) = 0;
          if (v66)
          {
            v67 = (*(uint64_t (**)(uint64_t, uint64_t, const char *, const char *, uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 16))(physx::shdfnd::Foundation::mInstance + 24, 12 * v66, "NonTrackedAlloc", "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/geomutils/src/mesh/GuMeshData.h", 228);
            v68 = *(_QWORD *)(a1 + 24);
          }
          else
          {
            v67 = 0;
            v68 = v64;
          }
          *(_QWORD *)(v64 + 112) = v67;
          *(_DWORD *)(v64 + 104) = v66;
          v65 = *(_DWORD *)(v68 + 104);
          v64 = v68;
        }
        if (v65)
        {
          v81 = 0;
          v82 = 0;
          v83 = *(float *)(*(_QWORD *)(a1 + 16) + 16) * (float)(*(float *)(*(_QWORD *)(a1 + 16) + 16) * 250000.0);
          v84 = *(_QWORD *)(v64 + 24);
          v85 = v106;
          v86 = *(_QWORD *)(v64 + 112) + 4;
LABEL_87:
          v87 = 3 * v81;
          v88 = (unsigned int *)(v86 + 12 * v81);
          do
          {
            v89 = *(_DWORD *)(v85 + 4 * v87);
            v90 = *(_DWORD *)(v85 + 4 * (v87 + 1));
            v91 = *(_DWORD *)(v85 + 4 * (v87 + 2));
            *(v88 - 1) = v89;
            *v88 = v90;
            v88[1] = v91;
            v92 = (float *)(v84 + 12 * v89);
            v93 = (float *)(v84 + 12 * v90);
            v94 = v92[1];
            v95 = v93[1];
            v96 = v92[2];
            v97 = v93[2];
            if ((float)((float)((float)((float)(v94 - v95) * (float)(v94 - v95))
                               + (float)((float)(*v92 - *v93) * (float)(*v92 - *v93)))
                       + (float)((float)(v96 - v97) * (float)(v96 - v97))) >= v83
              || ((v98 = (float *)(v84 + 12 * v91),
                   v99 = v98[1],
                   v100 = v98[2],
                   (float)((float)((float)((float)(v95 - v99) * (float)(v95 - v99))
                                 + (float)((float)(*v93 - *v98) * (float)(*v93 - *v98)))
                         + (float)((float)(v97 - v100) * (float)(v97 - v100))) < v83)
                ? (v101 = (float)((float)((float)((float)(v99 - v94) * (float)(v99 - v94))
                                        + (float)((float)(*v98 - *v92) * (float)(*v98 - *v92)))
                                + (float)((float)(v100 - v96) * (float)(v100 - v96))) < v83)
                : (v101 = 0),
                  !v101))
            {
              ++v81;
              v82 = 1;
              if (v81 < *(unsigned int *)(v64 + 104))
                goto LABEL_87;
              goto LABEL_99;
            }
            ++v81;
            v87 += 3;
            v88 += 3;
          }
          while (v81 < *(unsigned int *)(v64 + 104));
          if ((v82 & 1) == 0)
            goto LABEL_102;
LABEL_99:
          if (a4)
            *a4 = 1;
          physx::shdfnd::Foundation::error(physx::shdfnd::Foundation::mInstance, 2, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/physxcooking/src/mesh/TriangleMeshBuilder.cpp", 234, "TriangleMesh: triangles are too big, reduce their size to increase simulation stability!", v61, v62, v63, v103);
        }
LABEL_102:
        v41 = 1;
      }
      else
      {
        v41 = 0;
      }
      physx::MeshCleaner::~MeshCleaner((physx::MeshCleaner *)&v103);
    }
    else
    {
      physx::MeshCleaner::~MeshCleaner((physx::MeshCleaner *)&v103);
      if ((a5 & 1) == 0)
        physx::shdfnd::Foundation::error(physx::shdfnd::Foundation::mInstance, 32, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/physxcooking/src/mesh/TriangleMeshBuilder.cpp", 1048, "cleaning the mesh failed", v78, v79, v80, v103);
      return 0;
    }
  }
  else
  {
    if (!a3[12])
    {
      v69 = *(_QWORD *)(a1 + 24);
      v70 = *(unsigned int *)(v69 + 104);
      if ((_DWORD)v70)
      {
        v71 = 4 * v70;
        v72 = physx::shdfnd::Foundation::mInstance;
        if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)physx::shdfnd::Foundation::mInstance + 40))(physx::shdfnd::Foundation::mInstance))
          v73 = "static const char *physx::shdfnd::ReflectionAllocator<unsigned int>::getName() [T = unsigned int]";
        else
          v73 = "<allocation names disabled>";
        v74 = (*(uint64_t (**)(uint64_t, uint64_t, const char *, const char *, uint64_t))(*(_QWORD *)(v72 + 24)
                                                                                               + 16))(v72 + 24, v71, v73, "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/physxcooking/src/mesh/TriangleMeshBuilder.cpp", 1058);
        v75 = *(_QWORD *)(a1 + 24);
        v76 = *(_DWORD *)(v75 + 104);
        *(_QWORD *)(v75 + 64) = v74;
        if (v76)
        {
          v77 = 0;
          do
          {
            *(_DWORD *)(v74 + 4 * v77) = v77;
            ++v77;
          }
          while (v77 < *(unsigned int *)(v75 + 104));
        }
      }
      else
      {
        *(_QWORD *)(v69 + 64) = 0;
      }
    }
    return 1;
  }
  return v41;
}

uint64_t physx::TriangleMeshBuilder::save(_QWORD *a1, void (***a2)(_QWORD, _BYTE *, uint64_t), uint64_t a3, uint64_t a4)
{
  uint64_t v8;
  unsigned int v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  unsigned int v14;
  unsigned int *v15;
  unsigned int v16;
  unsigned int v17;
  int v18;
  int v19;
  int v20;
  char v21;
  unsigned int v22;
  unsigned int v23;
  uint64_t v24;
  int v25;
  unint64_t v26;
  unint64_t v27;
  unsigned int v28;
  uint64_t v29;
  unsigned int *v30;
  int v31;
  uint64_t v32;
  unsigned int v33;
  unsigned int v34;
  uint64_t v35;
  unsigned int v36;
  unsigned int v37;
  unsigned int v38;
  unsigned int v39;
  unsigned int v40;
  unsigned int v41;
  unsigned int v42;
  uint64_t v43;
  unsigned int v44;
  uint64_t v45;
  uint64_t v46;
  int v47;
  unint64_t v48;
  unint64_t v49;
  unsigned int v50;
  uint64_t v51;
  int16x8_t v52;
  unsigned int v53;
  unsigned int v54;
  unsigned int v55;
  unsigned int v56;
  unsigned int v57;
  unsigned int v58;
  unsigned int v59;
  uint64_t v60;
  unint64_t v61;
  uint64_t v62;
  unsigned int v63;
  int v64;
  _BYTE v66[7];

  v8 = physx::writeHeader(77, 69, 83, 72, 0xFu, a3, (void (***)(_QWORD, _QWORD, _QWORD))a2);
  if (!(_DWORD)v8)
    return v8;
  v9 = (*(uint64_t (**)(_QWORD *))(*a1 + 16))(a1);
  *(_DWORD *)&v66[3] = v9;
  if ((_DWORD)a3)
    *(_DWORD *)&v66[3] = bswap32(v9);
  (**a2)(a2, &v66[3], 4);
  v10 = a1[3];
  v11 = *(_QWORD *)(v10 + 128) != 0;
  if (*(_QWORD *)(v10 + 64))
    v11 |= 2u;
  if (*(_QWORD *)(v10 + 72))
    v11 |= 0x10u;
  if (*(_BYTE *)(a4 + 14))
    v11 |= 0x20u;
  v12 = *(_QWORD *)(v10 + 112);
  v13 = *(unsigned int *)(v10 + 104);
  if (!(_DWORD)v13)
  {
    v18 = (*(unsigned __int8 *)(a4 + 24) >> 3) & 1;
LABEL_22:
    v19 = 4;
    goto LABEL_23;
  }
  v14 = 0;
  v15 = (unsigned int *)(v12 + 8);
  do
  {
    if (*(v15 - 2) > v14)
      v14 = *(v15 - 2);
    if (*(v15 - 1) > v14)
      v14 = *(v15 - 1);
    v17 = *v15;
    v15 += 3;
    v16 = v17;
    if (v17 > v14)
      v14 = v16;
    --v13;
  }
  while (v13);
  v18 = (*(_DWORD *)(a4 + 24) & 8 | HIWORD(v14)) != 0;
  if (v14 <= 0xFF)
    goto LABEL_22;
  v19 = 8;
LABEL_23:
  if (v18)
    v20 = 0;
  else
    v20 = v19;
  v21 = v20 | v11;
  *(_DWORD *)&v66[3] = v20 | v11;
  if ((_DWORD)a3)
  {
    *(_WORD *)&v66[3] = 0;
    v66[6] = v20 | v11;
    v66[5] = 0;
  }
  (**a2)(a2, &v66[3], 4);
  v22 = *(_DWORD *)(a1[3] + 16);
  *(_DWORD *)&v66[3] = v22;
  if ((_DWORD)a3)
    *(_DWORD *)&v66[3] = bswap32(v22);
  (**a2)(a2, &v66[3], 4);
  v23 = *(_DWORD *)(a1[3] + 104);
  *(_DWORD *)&v66[3] = v23;
  if ((_DWORD)a3)
    *(_DWORD *)&v66[3] = bswap32(v23);
  (**a2)(a2, &v66[3], 4);
  physx::writeFloatBuffer(*(_QWORD *)(a1[3] + 24), 3 * *(_DWORD *)(a1[3] + 16), a3, (uint64_t (***)(_QWORD, _QWORD, _QWORD))a2);
  if ((v21 & 4) != 0)
  {
    v24 = a1[3];
    if (*(_DWORD *)(v24 + 104))
    {
      v26 = 0;
      do
      {
        v66[3] = *(_DWORD *)(v12 + 4 * v26);
        (**a2)(a2, &v66[3], 1);
        ++v26;
        v24 = a1[3];
      }
      while (v26 < (3 * *(_DWORD *)(v24 + 104)));
    }
  }
  else
  {
    v24 = a1[3];
    v25 = *(_DWORD *)(v24 + 104);
    if ((v21 & 8) != 0)
    {
      if (v25)
      {
        v27 = 0;
        do
        {
          v28 = *(_DWORD *)(v12 + 4 * v27);
          *(_WORD *)&v66[3] = v28;
          if ((_DWORD)a3)
            *(_WORD *)&v66[3] = bswap32(v28) >> 16;
          (**a2)(a2, &v66[3], 2);
          ++v27;
          v24 = a1[3];
        }
        while (v27 < (3 * *(_DWORD *)(v24 + 104)));
      }
    }
    else
    {
      physx::writeFloatBuffer(v12, 3 * v25, a3, (uint64_t (***)(_QWORD, _QWORD, _QWORD))a2);
      v24 = a1[3];
    }
  }
  v29 = *(_QWORD *)(v24 + 128);
  if (v29)
  {
    physx::writeWordBuffer(v29, *(_DWORD *)(v24 + 104), a3, (uint64_t (***)(_QWORD, _QWORD, _QWORD))a2);
    v24 = a1[3];
  }
  v30 = *(unsigned int **)(v24 + 64);
  if (v30)
  {
    v31 = *(_DWORD *)(v24 + 104);
    if (v31)
    {
      LODWORD(v32) = 0;
      do
      {
        v34 = *v30++;
        v33 = v34;
        if (v34 <= v32)
          v32 = v32;
        else
          v32 = v33;
        --v31;
      }
      while (v31);
    }
    else
    {
      v32 = 0;
    }
    *(_DWORD *)&v66[3] = v32;
    if ((_DWORD)a3)
      *(_DWORD *)&v66[3] = bswap32(v32);
    (**a2)(a2, &v66[3], 4);
    physx::storeIndices(v32, *(_DWORD *)(a1[3] + 104), *(_QWORD *)(a1[3] + 64), (uint64_t (***)(_QWORD, __int16 *, uint64_t))a2, a3);
    v24 = a1[3];
  }
  v35 = *(_QWORD *)(v24 + 72);
  if (v35)
    physx::writeFloatBuffer(v35, 3 * *(_DWORD *)(v24 + 104), a3, (uint64_t (***)(_QWORD, _QWORD, _QWORD))a2);
  (*(void (**)(_QWORD *, _QWORD, uint64_t))(*a1 + 32))(a1, a2, a3);
  v36 = *(_DWORD *)(a1[3] + 56);
  *(_DWORD *)&v66[3] = v36;
  if ((_DWORD)a3)
    *(_DWORD *)&v66[3] = bswap32(v36);
  (**a2)(a2, &v66[3], 4);
  v37 = *(_DWORD *)(a1[3] + 32);
  *(_DWORD *)&v66[3] = v37;
  if ((_DWORD)a3)
    *(_DWORD *)&v66[3] = bswap32(v37);
  (**a2)(a2, &v66[3], 4);
  v38 = *(_DWORD *)(a1[3] + 36);
  *(_DWORD *)&v66[3] = v38;
  if ((_DWORD)a3)
    *(_DWORD *)&v66[3] = bswap32(v38);
  (**a2)(a2, &v66[3], 4);
  v39 = *(_DWORD *)(a1[3] + 40);
  *(_DWORD *)&v66[3] = v39;
  if ((_DWORD)a3)
    *(_DWORD *)&v66[3] = bswap32(v39);
  (**a2)(a2, &v66[3], 4);
  v40 = *(_DWORD *)(a1[3] + 44);
  *(_DWORD *)&v66[3] = v40;
  if ((_DWORD)a3)
    *(_DWORD *)&v66[3] = bswap32(v40);
  (**a2)(a2, &v66[3], 4);
  v41 = *(_DWORD *)(a1[3] + 48);
  *(_DWORD *)&v66[3] = v41;
  if ((_DWORD)a3)
    *(_DWORD *)&v66[3] = bswap32(v41);
  (**a2)(a2, &v66[3], 4);
  v42 = *(_DWORD *)(a1[3] + 52);
  *(_DWORD *)&v66[3] = v42;
  if ((_DWORD)a3)
    *(_DWORD *)&v66[3] = bswap32(v42);
  (**a2)(a2, &v66[3], 4);
  v43 = a1[3];
  if (*(_QWORD *)(v43 + 120))
  {
    v44 = *(_DWORD *)(v43 + 104);
    *(_DWORD *)&v66[3] = v44;
    if ((_DWORD)a3)
      *(_DWORD *)&v66[3] = bswap32(v44);
    (**a2)(a2, &v66[3], 4);
    (**a2)(a2, *(_BYTE **)(a1[3] + 120), *(unsigned int *)(a1[3] + 104));
  }
  else
  {
    *(_DWORD *)&v66[3] = 0;
    (**a2)(a2, &v66[3], 4);
  }
  if (*(_BYTE *)(a4 + 14))
  {
    v45 = a1[3];
    v46 = *(_QWORD *)(v45 + 80);
    if ((v21 & 4) != 0)
    {
      v47 = *(_DWORD *)(v45 + 104);
      if (v47)
      {
        v48 = 0;
        do
        {
          v66[3] = *(_DWORD *)(v46 + 4 * v48);
          (**a2)(a2, &v66[3], 1);
          ++v48;
          v45 = a1[3];
          v47 = *(_DWORD *)(v45 + 104);
        }
        while (v48 < (3 * v47));
      }
    }
    else
    {
      v47 = *(_DWORD *)(v45 + 104);
      if ((v21 & 8) != 0)
      {
        if (v47)
        {
          v49 = 0;
          do
          {
            v50 = *(_DWORD *)(v46 + 4 * v49);
            *(_WORD *)&v66[3] = v50;
            if ((_DWORD)a3)
              *(_WORD *)&v66[3] = bswap32(v50) >> 16;
            (**a2)(a2, &v66[3], 2);
            ++v49;
            v45 = a1[3];
            v47 = *(_DWORD *)(v45 + 104);
          }
          while (v49 < (3 * v47));
        }
      }
      else
      {
        physx::writeFloatBuffer(*(_QWORD *)(v45 + 80), 3 * v47, a3, (uint64_t (***)(_QWORD, _QWORD, _QWORD))a2);
        v45 = a1[3];
        v47 = *(_DWORD *)(v45 + 104);
      }
    }
    physx::writeFloatBuffer(*(_QWORD *)(v45 + 88), 4 * v47, a3, (uint64_t (***)(_QWORD, _QWORD, _QWORD))a2);
    physx::writeFloatBuffer(*(_QWORD *)(a1[3] + 96), *(_DWORD *)(a1[3] + 104), a3, (uint64_t (***)(_QWORD, _QWORD, _QWORD))a2);
    v51 = *(_QWORD *)(a1[3] + 136);
    qmemcpy(v66, "23VB", 4);
    (**a2)(a2, &v66[3], 1);
    (**a2)(a2, &v66[2], 1);
    (**a2)(a2, &v66[1], 1);
    (**a2)(a2, v66, 1);
    if ((_DWORD)a3)
      v53 = -1;
    else
      v53 = 0;
    *(int8x8_t *)v52.i8 = vbsl_s8((int8x8_t)vdup_n_s16(v53), (int8x8_t)0x2000000000000, (int8x8_t)2);
    *(_DWORD *)&v66[3] = vmovn_s16(v52).u32[0];
    (**a2)(a2, &v66[3], 4);
    v54 = *(_DWORD *)(v51 + 8);
    *(_DWORD *)&v66[3] = v54;
    if ((_DWORD)a3)
      *(_DWORD *)&v66[3] = bswap32(v54);
    (**a2)(a2, &v66[3], 4);
    v55 = *(_DWORD *)(v51 + 12);
    *(_DWORD *)&v66[3] = v55;
    if ((_DWORD)a3)
      *(_DWORD *)&v66[3] = bswap32(v55);
    (**a2)(a2, &v66[3], 4);
    v56 = *(_DWORD *)(v51 + 16);
    *(_DWORD *)&v66[3] = v56;
    if ((_DWORD)a3)
      *(_DWORD *)&v66[3] = bswap32(v56);
    (**a2)(a2, &v66[3], 4);
    v57 = *(_DWORD *)(v51 + 20);
    *(_DWORD *)&v66[3] = v57;
    if ((_DWORD)a3)
      *(_DWORD *)&v66[3] = bswap32(v57);
    (**a2)(a2, &v66[3], 4);
    v58 = *(_DWORD *)(v51 + 52);
    *(_DWORD *)&v66[3] = v58;
    if ((_DWORD)a3)
      *(_DWORD *)&v66[3] = bswap32(v58);
    (**a2)(a2, &v66[3], 4);
    v59 = *(_DWORD *)(v51 + 48);
    *(_DWORD *)&v66[3] = v59;
    if ((_DWORD)a3)
      *(_DWORD *)&v66[3] = bswap32(v59);
    (**a2)(a2, &v66[3], 4);
    if (*(_DWORD *)(v51 + 48))
    {
      v60 = 0;
      v61 = 0;
      do
      {
        v62 = *(_QWORD *)(v51 + 40) + v60;
        v63 = *(_DWORD *)(v62 + 1152);
        *(_DWORD *)&v66[3] = v63;
        if ((_DWORD)a3)
          *(_DWORD *)&v66[3] = bswap32(v63);
        v64 = 4 * v63;
        (**a2)(a2, &v66[3], 4);
        physx::writeFloatBuffer(v62 + 1024, *(_DWORD *)(v62 + 1152), a3, (uint64_t (***)(_QWORD, _QWORD, _QWORD))a2);
        physx::writeFloatBuffer(v62, v64, a3, (uint64_t (***)(_QWORD, _QWORD, _QWORD))a2);
        physx::writeFloatBuffer(v62 + 512, v64, a3, (uint64_t (***)(_QWORD, _QWORD, _QWORD))a2);
        ++v61;
        v60 += 1168;
      }
      while (v61 < *(unsigned int *)(v51 + 48));
    }
  }
  return v8;
}

uint64_t physx::TriangleMeshBuilder::checkMeshIndicesSize(uint64_t this)
{
  uint64_t v1;
  uint64_t v2;
  unsigned int v3;
  int *v4;
  int *v5;
  unsigned int v6;
  _WORD *v7;
  uint64_t v8;
  int *v9;
  int v10;
  _WORD *v11;
  uint64_t v12;
  int *v13;
  int v14;

  v1 = *(_QWORD *)(this + 24);
  if (!*(_WORD *)(v1 + 18) && (*(_BYTE *)(v1 + 12) & 2) == 0)
  {
    v2 = this;
    v3 = *(_DWORD *)(v1 + 104);
    v4 = *(int **)(v1 + 112);
    v5 = *(int **)(v1 + 80);
    *(_QWORD *)(v1 + 112) = 0;
    physx::Gu::TriangleMeshData::allocateTriangles((physx::Gu::TriangleMeshData *)v1, v3, 0, v5 != 0);
    v6 = 3 * v3;
    if (v3)
    {
      v7 = *(_WORD **)(v1 + 112);
      if (v6 <= 1)
        v8 = 1;
      else
        v8 = v6;
      v9 = v4;
      do
      {
        v10 = *v9++;
        *v7++ = v10;
        --v8;
      }
      while (v8);
    }
    else if (!v4)
    {
      if (v5)
LABEL_21:
        (*(void (**)(uint64_t, int *))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24, v5);
      return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v2 + 40))(v2);
    }
    (*(void (**)(uint64_t, int *))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24, v4);
    if (v5)
    {
      if (v3)
      {
        v11 = *(_WORD **)(v1 + 80);
        if (v6 <= 1)
          v12 = 1;
        else
          v12 = v6;
        v13 = v5;
        do
        {
          v14 = *v13++;
          *v11++ = v14;
          --v12;
        }
        while (v12);
      }
      goto LABEL_21;
    }
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v2 + 40))(v2);
  }
  return this;
}

void physx::BV4TriangleMeshBuilder::~BV4TriangleMeshBuilder(physx::BV4TriangleMeshBuilder *this)
{
  *(_QWORD *)this = &off_24ED92A98;
  physx::Gu::BV4TriangleData::~BV4TriangleData((physx::BV4TriangleMeshBuilder *)((char *)this + 32));
  *(_QWORD *)this = off_24ED92A58;
  physx::TriangleMeshBuilder::releaseEdgeList((uint64_t)this);
}

{
  *(_QWORD *)this = &off_24ED92A98;
  physx::Gu::BV4TriangleData::~BV4TriangleData((physx::BV4TriangleMeshBuilder *)((char *)this + 32));
  *(_QWORD *)this = off_24ED92A58;
  physx::TriangleMeshBuilder::releaseEdgeList((uint64_t)this);
  JUMPOUT(0x2276933B8);
}

_QWORD *physx::BV4TriangleMeshBuilder::onMeshIndexFormatChange(_QWORD *this)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v1 = this[3];
  v2 = *(_QWORD *)(v1 + 112);
  if ((*(_BYTE *)(v1 + 12) & 2) != 0)
    v3 = 0;
  else
    v3 = *(_QWORD *)(v1 + 112);
  if ((*(_BYTE *)(v1 + 12) & 2) == 0)
    v2 = 0;
  v4 = *(_QWORD *)(v1 + 24);
  this[26] = v3;
  this[27] = v2;
  this[23] = v4;
  return this;
}

uint64_t physx::BV4TriangleMeshBuilder::createMidPhaseStructure(physx::BV4TriangleMeshBuilder *this, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, char a9)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t result;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unsigned int *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  const char *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t i;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  const char *v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  _DWORD *v38;

  v10 = *((_QWORD *)this + 3);
  *((_DWORD *)this + 44) = *(_DWORD *)(v10 + 16);
  *((_DWORD *)this + 50) = *(_DWORD *)(v10 + 104);
  v11 = *(_QWORD *)(v10 + 112);
  if ((*(_BYTE *)(v10 + 12) & 2) != 0)
    v12 = 0;
  else
    v12 = *(_QWORD *)(v10 + 112);
  if ((*(_BYTE *)(v10 + 12) & 2) == 0)
    v11 = 0;
  v13 = *(_QWORD *)(v10 + 24);
  *((_QWORD *)this + 26) = v12;
  *((_QWORD *)this + 27) = v11;
  *((_QWORD *)this + 23) = v13;
  *((_QWORD *)this + 24) = 0;
  v14 = *((_QWORD *)this + 2);
  if (*(_DWORD *)(v14 + 40) == 1)
    v15 = *(unsigned int *)(v14 + 32);
  else
    v15 = 4;
  result = physx::Gu::BuildBV4Ex((uint64_t)this + 224, (unsigned int *)this + 44, v15, 0.0002);
  if ((result & 1) == 0)
    return physx::shdfnd::Foundation::error(physx::shdfnd::Foundation::mInstance, 32, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/physxcooking/src/mesh/TriangleMeshBuilder.cpp", 1155, "BV4 tree failed to build.", v17, v18, v19, a9);
  v20 = (unsigned int *)*((_QWORD *)this + 24);
  v21 = *((_QWORD *)this + 3);
  if (*(_QWORD *)(v21 + 128))
  {
    v22 = *(unsigned int *)(v21 + 104);
    if ((_DWORD)v22)
    {
      v23 = 2 * v22;
      v24 = physx::shdfnd::Foundation::mInstance;
      if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)physx::shdfnd::Foundation::mInstance + 40))(physx::shdfnd::Foundation::mInstance))
        v25 = "static const char *physx::shdfnd::ReflectionAllocator<unsigned short>::getName() [T = unsigned short]";
      else
        v25 = "<allocation names disabled>";
      result = (*(uint64_t (**)(uint64_t, uint64_t, const char *, const char *, uint64_t))(*(_QWORD *)(v24 + 24)
                                                                                                + 16))(v24 + 24, v23, v25, "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/physxcooking/src/mesh/TriangleMeshBuilder.cpp", 1164);
      v26 = result;
      v21 = *((_QWORD *)this + 3);
      v27 = *(unsigned int *)(v21 + 104);
      v28 = *(_QWORD *)(v21 + 128);
      if ((_DWORD)v27)
      {
        for (i = 0; i != v27; ++i)
          *(_WORD *)(result + 2 * i) = *(_WORD *)(v28 + 2 * v20[i]);
      }
      else if (!v28)
      {
LABEL_23:
        *(_QWORD *)(v21 + 128) = v26;
        goto LABEL_24;
      }
    }
    else
    {
      v26 = 0;
    }
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
    v21 = *((_QWORD *)this + 3);
    goto LABEL_23;
  }
LABEL_24:
  v30 = *((_QWORD *)this + 2);
  if (!*(_BYTE *)(v30 + 12) || *(_BYTE *)(v30 + 14))
  {
    v31 = *(unsigned int *)(v21 + 104);
    if ((_DWORD)v31)
    {
      v32 = 4 * v31;
      v33 = physx::shdfnd::Foundation::mInstance;
      if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)physx::shdfnd::Foundation::mInstance + 40))(physx::shdfnd::Foundation::mInstance))
        v34 = "static const char *physx::shdfnd::ReflectionAllocator<unsigned int>::getName() [T = unsigned int]";
      else
        v34 = "<allocation names disabled>";
      result = (*(uint64_t (**)(uint64_t, uint64_t, const char *, const char *, uint64_t))(*(_QWORD *)(v33 + 24)
                                                                                                + 16))(v33 + 24, v32, v34, "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/physxcooking/src/mesh/TriangleMeshBuilder.cpp", 1173);
      v35 = result;
      v21 = *((_QWORD *)this + 3);
      v36 = *(_QWORD *)(v21 + 64);
      if (*(_DWORD *)(v21 + 104))
      {
        v37 = 0;
        do
        {
          v38 = v20;
          if (v36)
            v38 = (_DWORD *)(v36 + 4 * *v20);
          *(_DWORD *)(result + 4 * v37++) = *v38;
          ++v20;
        }
        while (v37 < *(unsigned int *)(v21 + 104));
      }
      if (!v36)
        goto LABEL_37;
    }
    else
    {
      v35 = 0;
      if (!*(_QWORD *)(v21 + 64))
        goto LABEL_37;
    }
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
    v21 = *((_QWORD *)this + 3);
LABEL_37:
    *(_QWORD *)(v21 + 64) = v35;
  }
  if (*((_QWORD *)this + 24))
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
  *((_QWORD *)this + 24) = 0;
  return result;
}

uint64_t physx::BV4TriangleMeshBuilder::saveMidPhaseStructure(uint64_t a1, void (***a2)(_QWORD, _BYTE *, uint64_t), int a3)
{
  int16x8_t v6;
  unsigned int v7;
  unsigned int v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int v11;
  unsigned int v12;
  unsigned int v13;
  unsigned int v14;
  unsigned int v15;
  unsigned int v16;
  unsigned int v17;
  unsigned int v18;
  unsigned __int8 v19;
  unsigned int v20;
  _BYTE v22[7];

  qmemcpy(v22, " 4VB", 4);
  (**a2)(a2, &v22[3], 1);
  (**a2)(a2, &v22[2], 1);
  (**a2)(a2, &v22[1], 1);
  (**a2)(a2, v22, 1);
  if (a3)
    v7 = -1;
  else
    v7 = 0;
  *(int8x8_t *)v6.i8 = vbsl_s8((int8x8_t)vdup_n_s16(v7), (int8x8_t)0x3000000000000, (int8x8_t)3);
  *(_DWORD *)&v22[3] = vmovn_s16(v6).u32[0];
  (**a2)(a2, &v22[3], 4);
  v8 = *(_DWORD *)(a1 + 232);
  *(_DWORD *)&v22[3] = v8;
  if (a3)
    *(_DWORD *)&v22[3] = bswap32(v8);
  (**a2)(a2, &v22[3], 4);
  v9 = *(_DWORD *)(a1 + 236);
  *(_DWORD *)&v22[3] = v9;
  if (a3)
    *(_DWORD *)&v22[3] = bswap32(v9);
  (**a2)(a2, &v22[3], 4);
  v10 = *(_DWORD *)(a1 + 240);
  *(_DWORD *)&v22[3] = v10;
  if (a3)
    *(_DWORD *)&v22[3] = bswap32(v10);
  (**a2)(a2, &v22[3], 4);
  v11 = *(_DWORD *)(a1 + 244);
  *(_DWORD *)&v22[3] = v11;
  if (a3)
    *(_DWORD *)&v22[3] = bswap32(v11);
  (**a2)(a2, &v22[3], 4);
  v12 = *(_DWORD *)(a1 + 264);
  *(_DWORD *)&v22[3] = v12;
  if (a3)
    *(_DWORD *)&v22[3] = bswap32(v12);
  (**a2)(a2, &v22[3], 4);
  v13 = *(_DWORD *)(a1 + 268);
  *(_DWORD *)&v22[3] = v13;
  if (a3)
    *(_DWORD *)&v22[3] = bswap32(v13);
  (**a2)(a2, &v22[3], 4);
  v14 = *(_DWORD *)(a1 + 272);
  *(_DWORD *)&v22[3] = v14;
  if (a3)
    *(_DWORD *)&v22[3] = bswap32(v14);
  (**a2)(a2, &v22[3], 4);
  v15 = *(_DWORD *)(a1 + 276);
  *(_DWORD *)&v22[3] = v15;
  if (a3)
    *(_DWORD *)&v22[3] = bswap32(v15);
  (**a2)(a2, &v22[3], 4);
  v16 = *(_DWORD *)(a1 + 280);
  *(_DWORD *)&v22[3] = v16;
  if (a3)
    *(_DWORD *)&v22[3] = bswap32(v16);
  (**a2)(a2, &v22[3], 4);
  v17 = *(_DWORD *)(a1 + 284);
  *(_DWORD *)&v22[3] = v17;
  if (a3)
    *(_DWORD *)&v22[3] = bswap32(v17);
  (**a2)(a2, &v22[3], 4);
  v18 = *(_DWORD *)(a1 + 288);
  *(_DWORD *)&v22[3] = v18;
  if (a3)
    *(_DWORD *)&v22[3] = bswap32(v18);
  (**a2)(a2, &v22[3], 4);
  v19 = *(_BYTE *)(a1 + 293);
  *(_DWORD *)&v22[3] = v19;
  if (a3)
  {
    *(_WORD *)&v22[3] = 0;
    v22[6] = v19;
    v22[5] = 0;
  }
  (**a2)(a2, &v22[3], 4);
  v20 = *(_DWORD *)(a1 + 248);
  *(_DWORD *)&v22[3] = v20;
  if (a3)
    *(_DWORD *)&v22[3] = bswap32(v20);
  (**a2)(a2, &v22[3], 4);
  return ((uint64_t (*)(_QWORD, _QWORD, _QWORD))**a2)(a2, *(_QWORD *)(a1 + 256), (16 * *(_DWORD *)(a1 + 248)));
}

void physx::RTreeTriangleMeshBuilder::~RTreeTriangleMeshBuilder(physx::RTreeTriangleMeshBuilder *this)
{
  physx::Gu::TriangleMeshData *v2;
  uint64_t v3;

  *(_QWORD *)this = &off_24ED92AD8;
  *((_QWORD *)this + 4) = off_24ED90F00;
  v2 = (physx::RTreeTriangleMeshBuilder *)((char *)this + 32);
  if ((*((_BYTE *)this + 260) & 1) == 0)
  {
    v3 = *((_QWORD *)this + 33);
    if (v3)
    {
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24, v3 - *(_QWORD *)(v3 - 8));
      *((_QWORD *)this + 33) = 0;
    }
  }
  physx::Gu::TriangleMeshData::~TriangleMeshData(v2);
  *(_QWORD *)this = off_24ED92A58;
  physx::TriangleMeshBuilder::releaseEdgeList((uint64_t)this);
}

{
  physx::RTreeTriangleMeshBuilder::~RTreeTriangleMeshBuilder(this);
  JUMPOUT(0x2276933B8);
}

uint64_t physx::RTreeTriangleMeshBuilder::createMidPhaseStructure(float32x2_t *this)
{
  float32x2_t v2;
  float32x2_t v3;
  float v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  char v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  float32x4_t v13;
  float32x4_t v14;
  float32x4_t v15;
  float32x4_t v16;
  unsigned int v17;
  unsigned int v18;
  unsigned int v19;
  int8x8_t *v20;
  int8x8_t *v21;
  float32x4_t v22;
  int8x8_t *v23;
  float32x4_t v24;
  float32x4_t v25;
  float32x4_t v26;
  float32x4_t v27;
  int v28;
  _OWORD *v29;
  unint64_t v30;
  unsigned int v31;
  unsigned int *v32;
  uint64_t v33;
  uint64_t v34;
  float32x2_t v35;
  float v36;
  int v37;
  uint64_t v38;
  float v39;
  unsigned int v40;
  uint64_t v41;
  unsigned int *v42;
  uint64_t v43;
  uint64_t v44;
  unsigned int *v45;
  uint64_t v46;
  unsigned int *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  float v55;
  unsigned int v56;
  uint64_t v57;
  int *v58;
  __int32 v59;
  int v60;
  int v61;
  int v62;
  __int32 v63;
  _OWORD *v64;
  __int128 v65;
  unsigned __int32 v66;
  uint64_t result;
  unint64_t v73;
  uint64_t v74;
  unint64_t v75;
  uint64_t v76;
  _DWORD *v77;
  _DWORD *v78;
  uint64_t v79;
  unsigned int *v80;
  uint64_t v81;
  float32x2_t v82;
  unint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  const char *v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t i;
  float32x2_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  const char *v99;
  uint64_t v100;
  uint64_t v101;
  unint64_t v102;
  _DWORD *v103;
  float32x4_t v104;
  float32x4_t v105;
  float32x4_t v106;
  __int128 v107;
  float32x4_t v108;
  __int128 v109;
  void (**v110)(physx::RTreeCookerRemap *__hidden);
  int v111;
  void *__src;
  uint64_t v113;
  unint64_t v114;
  uint64_t v115;
  float32x4_t v116[2];
  _BYTE v117[32];
  uint64_t v118;
  void *v119;
  void *v120;
  unsigned int *v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  int v126;
  unsigned int v127;
  unsigned int *v128;
  uint64_t v129;
  unsigned int *v130;
  uint64_t v131;
  unsigned int *v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  int v138;
  uint64_t v139;
  uint64_t v140;
  int v141;

  v2 = this[2];
  v3 = this[3];
  v4 = *(float *)(*(_QWORD *)&v2 + 32);
  v5 = *(_DWORD *)(*(_QWORD *)&v2 + 36);
  __src = 0;
  v113 = 0;
  v6 = *(unsigned int *)(*(_QWORD *)&v3 + 104);
  v110 = &off_24ED92B70;
  v111 = v6;
  v7 = *(_QWORD *)(*(_QWORD *)&v3 + 24);
  v8 = *(_BYTE *)(*(_QWORD *)&v3 + 12);
  v9 = *(_QWORD *)(*(_QWORD *)&v3 + 112);
  if ((v8 & 2) != 0)
    v10 = v9;
  else
    v10 = 0;
  if ((v8 & 2) != 0)
    v11 = 0;
  else
    v11 = v9;
  v114 = 0;
  v115 = 0;
  if ((_DWORD)v6)
  {
    physx::shdfnd::Array<physx::PxBounds3V,physx::shdfnd::ReflectionAllocator<physx::PxBounds3V>>::recreate((uint64_t)&v114, v6);
    v12 = 0;
    v13 = (float32x4_t)xmmword_2261AA230;
    v14 = (float32x4_t)xmmword_2261A69F0;
    v15 = (float32x4_t)xmmword_2261AAAA0;
    v16 = (float32x4_t)xmmword_2261AAAB0;
    do
    {
      if (v10)
      {
        v17 = *(unsigned __int16 *)(v10 + 2 * v12);
        v18 = *(unsigned __int16 *)(v10 + 2 * (v12 + 1));
        v19 = *(unsigned __int16 *)(v10 + 2 * (v12 + 2));
      }
      else
      {
        v17 = *(_DWORD *)(v11 + 4 * v12);
        v18 = *(_DWORD *)(v11 + 4 * (v12 + 1));
        v19 = *(_DWORD *)(v11 + 4 * (v12 + 2));
      }
      v20 = (int8x8_t *)(v7 + 12 * v17);
      v21 = (int8x8_t *)(v7 + 12 * v18);
      *(int8x8_t *)v22.f32 = vand_s8(*v20, vorr_s8((int8x8_t)vcltz_f32((float32x2_t)*v20), (int8x8_t)vcgez_f32((float32x2_t)*v20)));
      v22.i64[1] = v20[1].u32[0];
      v23 = (int8x8_t *)(v7 + 12 * v19);
      *(int8x8_t *)v24.f32 = vand_s8(*v21, vorr_s8((int8x8_t)vcltz_f32((float32x2_t)*v21), (int8x8_t)vcgez_f32((float32x2_t)*v21)));
      v24.i64[1] = v21[1].u32[0];
      *(int8x8_t *)v25.f32 = vand_s8(*v23, vorr_s8((int8x8_t)vcltz_f32((float32x2_t)*v23), (int8x8_t)vcgez_f32((float32x2_t)*v23)));
      v25.i64[1] = v23[1].u32[0];
      v26 = vaddq_f32(vminq_f32(vminq_f32(v22, v24), v25), v15);
      v27 = vaddq_f32(vmaxq_f32(vmaxq_f32(v22, v24), v25), v16);
      *(float32x4_t *)v117 = v26;
      *(float32x4_t *)&v117[16] = v27;
      v28 = v115;
      if ((HIDWORD(v115) & 0x7FFFFFFFu) <= v115)
      {
        v106 = v14;
        v108 = v13;
        v104 = v27;
        v105 = v26;
        physx::shdfnd::Array<physx::PxBounds3V,physx::shdfnd::ReflectionAllocator<physx::PxBounds3V>>::growAndPushBack((uint64_t)&v114, v117);
        v27 = v104;
        v26 = v105;
        v16 = (float32x4_t)xmmword_2261AAAB0;
        v15 = (float32x4_t)xmmword_2261AAAA0;
        v14 = v106;
        v13 = v108;
      }
      else
      {
        v29 = (_OWORD *)(v114 + 32 * v115);
        *v29 = *(_OWORD *)v117;
        v29[1] = *(_OWORD *)&v117[16];
        LODWORD(v115) = v28 + 1;
      }
      v14 = vminq_f32(v14, v26);
      v13 = vmaxq_f32(v13, v27);
      v12 += 3;
    }
    while (3 * v6 != v12);
    v107 = (__int128)v14;
    v109 = (__int128)v13;
    v30 = v114;
  }
  else
  {
    v30 = 0;
    v107 = xmmword_2261A69F0;
    v109 = xmmword_2261AA230;
  }
  *(_DWORD *)v117 = 0;
  physx::shdfnd::Array<unsigned int,physx::shdfnd::ReflectionAllocator<unsigned int>>::resize((uint64_t)&__src, 0, v117);
  if ((HIDWORD(v113) & 0x7FFFFFFFu) < (int)v6 + 1)
    physx::shdfnd::Array<unsigned int,physx::shdfnd::ReflectionAllocator<unsigned int>>::recreate((uint64_t)&__src, v6 + 1);
  *(_DWORD *)v117 = 0;
  if ((_DWORD)v6)
  {
    v31 = 0;
    do
    {
      if ((HIDWORD(v113) & 0x7FFFFFFFu) <= v113)
      {
        physx::shdfnd::Array<unsigned int,physx::shdfnd::ReflectionAllocator<unsigned int>>::growAndPushBack((uint64_t)&__src, v117);
      }
      else
      {
        *((_DWORD *)__src + v113) = v31;
        LODWORD(v113) = v113 + 1;
      }
      v31 = *(_DWORD *)v117 + 1;
      *(_DWORD *)v117 = v31;
    }
    while (v31 < v6);
  }
  v141 = -1412567295;
  if ((HIDWORD(v113) & 0x7FFFFFFFu) <= v113)
  {
    physx::shdfnd::Array<unsigned int,physx::shdfnd::ReflectionAllocator<unsigned int>>::growAndPushBack((uint64_t)&__src, &v141);
  }
  else
  {
    *((_DWORD *)__src + v113) = -1412567295;
    LODWORD(v113) = v113 + 1;
  }
  v139 = 0;
  v140 = 0;
  if (2 * (_DWORD)v6)
    physx::shdfnd::Array<physx::RTreeNodeNQ,physx::shdfnd::ReflectionAllocator<physx::RTreeNodeNQ>>::recreate((uint64_t)&v139, 2 * v6);
  v138 = 0;
  if (v5)
  {
    v32 = (unsigned int *)__src;
    v118 = 0;
    *(_QWORD *)&v117[8] = __src;
    *(_OWORD *)&v117[16] = v30;
    *(_QWORD *)v117 = (char *)__src + 4 * v6;
    if ((_DWORD)v6)
    {
      physx::shdfnd::Array<physx::PxVec3,physx::shdfnd::ReflectionAllocator<physx::PxVec3>>::recreate((uint64_t)&v117[24], v6);
      v33 = 0;
      v34 = 32 * v6;
      do
      {
        v35 = vadd_f32(*(float32x2_t *)(*(_QWORD *)&v117[16] + v33), *(float32x2_t *)(*(_QWORD *)&v117[16] + v33 + 16));
        v36 = *(float *)(*(_QWORD *)&v117[16] + v33 + 8) + *(float *)(*(_QWORD *)&v117[16] + v33 + 24);
        *(float32x2_t *)v116[0].f32 = v35;
        v116[0].f32[2] = v36;
        v37 = v118;
        if ((HIDWORD(v118) & 0x7FFFFFFFu) <= v118)
        {
          physx::shdfnd::Array<physx::PxVec3,physx::shdfnd::ReflectionAllocator<physx::PxVec3>>::growAndPushBack((uint64_t *)&v117[24], (uint64_t)v116);
        }
        else
        {
          v38 = *(_QWORD *)&v117[24] + 12 * v118;
          *(float32x2_t *)v38 = v35;
          *(float *)(v38 + 8) = v36;
          LODWORD(v118) = v37 + 1;
        }
        v33 += 32;
      }
      while (v34 != v33);
      v32 = (unsigned int *)__src;
    }
    v39 = v4 * 9.0;
    if (v4 < 0.0)
      v39 = 0.0;
    v40 = v39;
    if (v39 >= 8)
      v40 = 8;
    LODWORD(v119) = physx::SubSortQuick::stopAtTrisPerLeaf1[v40];
    physx::SubSortQuick::sort4((uint64_t)v117, v32, v113 - 1, (uint64_t)&v139, &v138, v116, 0);
    if (v118 < 0 || (v118 & 0x7FFFFFFF00000000) == 0 || !*(_QWORD *)&v117[24])
      goto LABEL_99;
LABEL_98:
    (*(void (**)(uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
    goto LABEL_99;
  }
  *(_DWORD *)v117 = 0;
  v116[0] = 0uLL;
  physx::shdfnd::Array<unsigned int,physx::shdfnd::ReflectionAllocator<unsigned int>>::resize((uint64_t)v116, v6, v117);
  *(_DWORD *)v117 = 0;
  v136 = 0;
  v137 = 0;
  physx::shdfnd::Array<unsigned int,physx::shdfnd::ReflectionAllocator<unsigned int>>::resize((uint64_t)&v136, v6, v117);
  *(_DWORD *)v117 = 0;
  v134 = 0;
  v135 = 0;
  physx::shdfnd::Array<unsigned int,physx::shdfnd::ReflectionAllocator<unsigned int>>::resize((uint64_t)&v134, v6, v117);
  *(_DWORD *)v117 = 0;
  v132 = 0;
  v133 = 0;
  physx::shdfnd::Array<unsigned int,physx::shdfnd::ReflectionAllocator<unsigned int>>::resize((uint64_t)&v132, v6, v117);
  *(_DWORD *)v117 = 0;
  v130 = 0;
  v131 = 0;
  physx::shdfnd::Array<unsigned int,physx::shdfnd::ReflectionAllocator<unsigned int>>::resize((uint64_t)&v130, v6, v117);
  *(_DWORD *)v117 = 0;
  v128 = 0;
  v129 = 0;
  physx::shdfnd::Array<unsigned int,physx::shdfnd::ReflectionAllocator<unsigned int>>::resize((uint64_t)&v128, v6, v117);
  memcpy(v132, __src, (4 * v6));
  memcpy(v130, __src, (4 * v6));
  memcpy(v128, __src, (4 * v6));
  *(_DWORD *)v117 = 0;
  *(_QWORD *)&v117[8] = v30;
  physx::shdfnd::sort<unsigned int,physx::SortBoundsPredicate,physx::shdfnd::ReflectionAllocator<unsigned int>>((char *)v132, v133, (unsigned int *)v117);
  if ((_DWORD)v6)
  {
    v41 = 0;
    v42 = v132;
    v43 = v116[0].i64[0];
    do
    {
      *(_DWORD *)(v43 + 4 * v42[v41]) = v41;
      ++v41;
    }
    while (v6 != v41);
    *(_DWORD *)v117 = 1;
    *(_QWORD *)&v117[8] = v30;
    physx::shdfnd::sort<unsigned int,physx::SortBoundsPredicate,physx::shdfnd::ReflectionAllocator<unsigned int>>((char *)v130, v131, (unsigned int *)v117);
    v44 = 0;
    v45 = v130;
    v46 = v136;
    do
    {
      *(_DWORD *)(v46 + 4 * v45[v44]) = v44;
      ++v44;
    }
    while (v6 != v44);
  }
  else
  {
    *(_DWORD *)v117 = 1;
    *(_QWORD *)&v117[8] = v30;
    physx::shdfnd::sort<unsigned int,physx::SortBoundsPredicate,physx::shdfnd::ReflectionAllocator<unsigned int>>((char *)v130, v131, (unsigned int *)v117);
  }
  *(_DWORD *)v117 = 2;
  *(_QWORD *)&v117[8] = v30;
  physx::shdfnd::sort<unsigned int,physx::SortBoundsPredicate,physx::shdfnd::ReflectionAllocator<unsigned int>>((char *)v128, v129, (unsigned int *)v117);
  v47 = v128;
  v48 = v134;
  v49 = 0;
  if ((_DWORD)v6)
  {
    do
    {
      *(_DWORD *)(v48 + 4 * v47[v49]) = v49;
      ++v49;
    }
    while (v6 != v49);
    v49 = v6;
  }
  *(_QWORD *)v117 = __src;
  *(_QWORD *)&v117[16] = v30;
  v119 = v132;
  v120 = v130;
  v121 = v47;
  v122 = v116[0].i64[0];
  v123 = v136;
  v124 = v48;
  v50 = 4 * v49;
  v126 = v6;
  if ((_DWORD)v6)
  {
    v51 = (*(uint64_t (**)(uint64_t, uint64_t, const char *, const char *, uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24)
                                                                                           + 16))(physx::shdfnd::Foundation::mInstance + 24, 4 * v49, "NonTrackedAlloc", "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/physxcooking/src/mesh/RTreeCooking.cpp", 378);
    v52 = (*(uint64_t (**)(uint64_t, uint64_t, const char *, const char *, uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24)
                                                                                           + 16))(physx::shdfnd::Foundation::mInstance + 24, v50, "NonTrackedAlloc", "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/physxcooking/src/mesh/RTreeCooking.cpp", 379);
  }
  else
  {
    v51 = 0;
    v52 = 0;
  }
  *(_QWORD *)&v117[24] = v51;
  v118 = v52;
  v53 = (*(uint64_t (**)(uint64_t, uint64_t, const char *, const char *, uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24)
                                                                                         + 16))(physx::shdfnd::Foundation::mInstance + 24, 4 * ((2 * (_DWORD)v6) | 1u), "NonTrackedAlloc", "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/physxcooking/src/mesh/RTreeCooking.cpp", 380);
  *(_QWORD *)&v117[8] = v53;
  if ((_DWORD)v6)
    v54 = (*(uint64_t (**)(uint64_t, uint64_t, const char *, const char *, uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24)
                                                                                           + 16))(physx::shdfnd::Foundation::mInstance + 24, v50, "NonTrackedAlloc", "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/physxcooking/src/mesh/RTreeCooking.cpp", 381);
  else
    v54 = 0;
  v55 = v4 * 15.0;
  if (v4 < 0.0)
    v55 = 0.0;
  v56 = v55;
  v125 = v54;
  if (v55 >= 0xE)
    v56 = 14;
  v127 = v56;
  physx::SubSortSAH::sort4((uint64_t)v117);
  if (v51)
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24, v51);
  if (v52)
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24, v52);
  if (v53)
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24, v53);
  if (v54)
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24, v54);
  if ((v129 & 0x8000000000000000) == 0 && (v129 & 0x7FFFFFFF00000000) != 0 && v128)
    (*(void (**)(uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
  if ((v131 & 0x8000000000000000) == 0 && (v131 & 0x7FFFFFFF00000000) != 0 && v130)
    (*(void (**)(uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
  if ((v133 & 0x8000000000000000) == 0 && (v133 & 0x7FFFFFFF00000000) != 0 && v132)
    (*(void (**)(uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
  if ((v135 & 0x8000000000000000) == 0 && (v135 & 0x7FFFFFFF00000000) != 0 && v134)
    (*(void (**)(uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
  if ((v137 & 0x8000000000000000) == 0 && (v137 & 0x7FFFFFFF00000000) != 0 && v136)
    (*(void (**)(uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
  if ((v116[0].i32[3] & 0x80000000) == 0 && (v116[0].i32[3] & 0x7FFFFFFF) != 0 && v116[0].i64[0])
    goto LABEL_98;
LABEL_99:
  LODWORD(v113) = v113 - 1;
  v116[0] = 0uLL;
  v57 = v140;
  if ((_DWORD)v140)
  {
    physx::shdfnd::Array<physx::Gu::RTreeNodeQ,physx::shdfnd::ReflectionAllocator<physx::Gu::RTreeNodeQ>>::recreate((uint64_t)v116, v140);
    v58 = (int *)(v139 + 28);
    v59 = -1;
    while (1)
    {
      v60 = *(v58 - 1);
      if (v60 == -1)
        break;
      v61 = *v58;
      *(_OWORD *)v117 = *(_OWORD *)(v58 - 7);
      *(_QWORD *)&v117[16] = *(_QWORD *)(v58 - 3);
      if (v61 <= 0)
      {
        v62 = 28 * v60;
LABEL_108:
        *(_DWORD *)&v117[24] = v62;
        goto LABEL_109;
      }
      *(_DWORD *)&v117[24] = v60;
      ((void (*)(physx::RTreeCookerRemap *, unsigned int *, int, char))v110[2])((physx::RTreeCookerRemap *)&v110, (unsigned int *)&v117[24], v60, v61);
LABEL_109:
      v63 = v116[0].i32[2];
      if ((v116[0].i32[3] & 0x7FFFFFFFu) <= v116[0].i32[2])
      {
        physx::shdfnd::Array<physx::Gu::RTreeNodeQ,physx::shdfnd::ReflectionAllocator<physx::Gu::RTreeNodeQ>>::growAndPushBack((uint64_t)v116, (__int128 *)v117);
      }
      else
      {
        v64 = (_OWORD *)(v116[0].i64[0] + 28 * v116[0].u32[2]);
        v65 = *(_OWORD *)&v117[12];
        *v64 = *(_OWORD *)v117;
        *(_OWORD *)((char *)v64 + 12) = v65;
        v116[0].i32[2] = v63 + 1;
      }
      v58 += 8;
      if (!--v57)
      {
        v66 = v116[0].u32[2];
        goto LABEL_115;
      }
    }
    if (v59 == -1)
      v59 = v116[0].i32[2];
    *(_QWORD *)&v117[16] = 0x80000000800000;
    *(_OWORD *)v117 = xmmword_2261AAAC0;
    v62 = (28 * v59) | 1;
    goto LABEL_108;
  }
  v66 = 0;
LABEL_115:
  __asm { FMOV            V0.4S, #1.0 }
  *(_OWORD *)this[26].f32 = _Q0;
  this[31].i32[1] = v66;
  this[32].i32[0] = v66 >> 2;
  result = (*(uint64_t (**)(uint64_t, uint64_t, const char *, const char *, uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24)
                                                                                            + 16))(physx::shdfnd::Foundation::mInstance + 24, 112 * (v66 >> 2) + 135, "NonTrackedAlloc", "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/physxcooking/src/mesh/RTreeCooking.cpp", 879);
  if (result)
  {
    v73 = (result + 135) & 0xFFFFFFFFFFFFFF80;
    *(_QWORD *)(v73 - 8) = v73 - result;
  }
  else
  {
    v73 = 0;
  }
  this[33] = (float32x2_t)v73;
  this[22] = (float32x2_t)v107;
  this[23].i32[0] = DWORD2(v107);
  this[23].i32[1] = 0;
  this[24] = (float32x2_t)v109;
  this[25].i32[0] = DWORD2(v109);
  this[25].i32[1] = 0;
  this[28] = vmul_f32(vsub_f32(*(float32x2_t *)&v109, *(float32x2_t *)&v107), (float32x2_t)vdup_n_s32(0x37800080u));
  this[29].f32[0] = (float)(*((float *)&v109 + 2) - *((float *)&v107 + 2)) * 0.000015259;
  this[29].i32[1] = 0;
  this[31].i32[0] = v138;
  this[30] = (float32x2_t)0x100000004;
  v74 = v116[0].i64[0];
  if (this[32].i32[0])
  {
    v75 = 0;
    do
    {
      v76 = 0;
      v77 = (_DWORD *)(v74 + 12 + 112 * (v75 & 0x3FFFFFFF));
      do
      {
        v78 = (_DWORD *)(v73 + v76);
        v78[12] = *v77;
        v78[16] = v77[1];
        v78[20] = v77[2];
        *v78 = *(v77 - 3);
        v78[4] = *(v77 - 2);
        v78[8] = *(v77 - 1);
        v78[24] = v77[3];
        v76 += 4;
        v77 += 7;
      }
      while (v76 != 16);
      ++v75;
      v73 += 112;
    }
    while (v75 < this[32].u32[0]);
  }
  if ((v116[0].i32[3] & 0x80000000) == 0 && (v116[0].i32[3] & 0x7FFFFFFF) != 0 && v74)
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
  if ((v140 & 0x8000000000000000) == 0 && (v140 & 0x7FFFFFFF00000000) != 0 && v139)
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
  if ((v115 & 0x8000000000000000) == 0 && (v115 & 0x7FFFFFFF00000000) != 0 && v30)
    result = (*(uint64_t (**)(uint64_t, unint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24)
                                                                  + 24))(physx::shdfnd::Foundation::mInstance + 24, v30);
  v79 = *(unsigned int *)(*(_QWORD *)&this[3] + 104);
  if (!(_DWORD)v79)
    goto LABEL_168;
  v80 = (unsigned int *)__src;
  result = (*(uint64_t (**)(uint64_t, uint64_t, const char *, const char *, uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24)
                                                                                            + 16))(physx::shdfnd::Foundation::mInstance + 24, 12 * v79, "NonTrackedAlloc", "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/physxcooking/src/mesh/TriangleMeshBuilder.cpp", 108);
  v81 = result;
  v82 = this[3];
  if (*(_DWORD *)(*(_QWORD *)&v82 + 104))
  {
    v83 = 0;
    v84 = result;
    do
    {
      v85 = *(_QWORD *)(*(_QWORD *)&v82 + 112) + 12 * v80[v83];
      v86 = *(_QWORD *)v85;
      *(_DWORD *)(v84 + 8) = *(_DWORD *)(v85 + 8);
      *(_QWORD *)v84 = v86;
      v84 += 12;
      ++v83;
      v82 = this[3];
    }
    while (v83 < *(unsigned int *)(*(_QWORD *)&v82 + 104));
  }
  if (*(_QWORD *)(*(_QWORD *)&v82 + 112))
  {
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
    v82 = this[3];
  }
  *(_QWORD *)(*(_QWORD *)&v82 + 112) = v81;
  if (*(_QWORD *)(*(_QWORD *)&v82 + 128))
  {
    v87 = *(unsigned int *)(*(_QWORD *)&v82 + 104);
    if ((_DWORD)v87)
    {
      v88 = 2 * v87;
      v89 = physx::shdfnd::Foundation::mInstance;
      if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)physx::shdfnd::Foundation::mInstance + 40))(physx::shdfnd::Foundation::mInstance))
        v90 = "static const char *physx::shdfnd::ReflectionAllocator<unsigned short>::getName() [T = unsigned short]";
      else
        v90 = "<allocation names disabled>";
      result = (*(uint64_t (**)(uint64_t, uint64_t, const char *, const char *, uint64_t))(*(_QWORD *)(v89 + 24)
                                                                                                + 16))(v89 + 24, v88, v90, "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/physxcooking/src/mesh/TriangleMeshBuilder.cpp", 116);
      v91 = result;
      v82 = this[3];
      v92 = *(unsigned int *)(*(_QWORD *)&v82 + 104);
      v93 = *(_QWORD *)(*(_QWORD *)&v82 + 128);
      if ((_DWORD)v92)
      {
        for (i = 0; i != v92; ++i)
          *(_WORD *)(result + 2 * i) = *(_WORD *)(v93 + 2 * v80[i]);
      }
      else if (!v93)
      {
LABEL_153:
        *(_QWORD *)(*(_QWORD *)&v82 + 128) = v91;
        goto LABEL_154;
      }
    }
    else
    {
      v91 = 0;
    }
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
    v82 = this[3];
    goto LABEL_153;
  }
LABEL_154:
  v95 = this[2];
  if (!*(_BYTE *)(*(_QWORD *)&v95 + 12) || *(_BYTE *)(*(_QWORD *)&v95 + 14))
  {
    v96 = *(unsigned int *)(*(_QWORD *)&v82 + 104);
    if ((_DWORD)v96)
    {
      v97 = 4 * v96;
      v98 = physx::shdfnd::Foundation::mInstance;
      if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)physx::shdfnd::Foundation::mInstance + 40))(physx::shdfnd::Foundation::mInstance))
        v99 = "static const char *physx::shdfnd::ReflectionAllocator<unsigned int>::getName() [T = unsigned int]";
      else
        v99 = "<allocation names disabled>";
      result = (*(uint64_t (**)(uint64_t, uint64_t, const char *, const char *, uint64_t))(*(_QWORD *)(v98 + 24)
                                                                                                + 16))(v98 + 24, v97, v99, "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/physxcooking/src/mesh/TriangleMeshBuilder.cpp", 125);
      v100 = result;
      v82 = this[3];
      v101 = *(_QWORD *)(*(_QWORD *)&v82 + 64);
      if (*(_DWORD *)(*(_QWORD *)&v82 + 104))
      {
        v102 = 0;
        do
        {
          v103 = v80;
          if (v101)
            v103 = (_DWORD *)(v101 + 4 * *v80);
          *(_DWORD *)(result + 4 * v102++) = *v103;
          ++v80;
        }
        while (v102 < *(unsigned int *)(*(_QWORD *)&v82 + 104));
      }
      if (!v101)
        goto LABEL_167;
    }
    else
    {
      v100 = 0;
      if (!*(_QWORD *)(*(_QWORD *)&v82 + 64))
        goto LABEL_167;
    }
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
    v82 = this[3];
LABEL_167:
    *(_QWORD *)(*(_QWORD *)&v82 + 64) = v100;
  }
LABEL_168:
  if ((v113 & 0x8000000000000000) == 0 && (v113 & 0x7FFFFFFF00000000) != 0)
  {
    if (__src)
      return (*(uint64_t (**)(uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
  }
  return result;
}

uint64_t physx::RTreeTriangleMeshBuilder::saveMidPhaseStructure(uint64_t a1, uint64_t (***a2)(_QWORD, _BYTE *, uint64_t), int a3)
{
  int16x8_t v6;
  unsigned int v7;
  unsigned int v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int v11;
  unsigned int v12;
  uint64_t result;
  unint64_t v14;
  uint64_t v15;
  _BYTE v16[7];

  qmemcpy(v16, "ERTR", 4);
  (**a2)(a2, &v16[3], 1);
  (**a2)(a2, &v16[2], 1);
  (**a2)(a2, &v16[1], 1);
  (**a2)(a2, v16, 1);
  if (a3)
    v7 = -1;
  else
    v7 = 0;
  *(int8x8_t *)v6.i8 = vbsl_s8((int8x8_t)vdup_n_s16(v7), (int8x8_t)0x2000000000000, (int8x8_t)2);
  *(_DWORD *)&v16[3] = vmovn_s16(v6).u32[0];
  (**a2)(a2, &v16[3], 4);
  physx::writeFloatBuffer(a1 + 176, 4, a3, (uint64_t (***)(_QWORD, _QWORD, _QWORD))a2);
  physx::writeFloatBuffer(a1 + 192, 4, a3, (uint64_t (***)(_QWORD, _QWORD, _QWORD))a2);
  physx::writeFloatBuffer(a1 + 208, 4, a3, (uint64_t (***)(_QWORD, _QWORD, _QWORD))a2);
  physx::writeFloatBuffer(a1 + 224, 4, a3, (uint64_t (***)(_QWORD, _QWORD, _QWORD))a2);
  v8 = *(_DWORD *)(a1 + 240);
  *(_DWORD *)&v16[3] = v8;
  if (a3)
    *(_DWORD *)&v16[3] = bswap32(v8);
  (**a2)(a2, &v16[3], 4);
  v9 = *(_DWORD *)(a1 + 244);
  *(_DWORD *)&v16[3] = v9;
  if (a3)
    *(_DWORD *)&v16[3] = bswap32(v9);
  (**a2)(a2, &v16[3], 4);
  v10 = *(_DWORD *)(a1 + 248);
  *(_DWORD *)&v16[3] = v10;
  if (a3)
    *(_DWORD *)&v16[3] = bswap32(v10);
  (**a2)(a2, &v16[3], 4);
  v11 = *(_DWORD *)(a1 + 252);
  *(_DWORD *)&v16[3] = v11;
  if (a3)
    *(_DWORD *)&v16[3] = bswap32(v11);
  (**a2)(a2, &v16[3], 4);
  v12 = *(_DWORD *)(a1 + 256);
  *(_DWORD *)&v16[3] = v12;
  if (a3)
    *(_DWORD *)&v16[3] = bswap32(v12);
  (**a2)(a2, &v16[3], 4);
  *(_DWORD *)&v16[3] = 0;
  result = (**a2)(a2, &v16[3], 4);
  if (*(_DWORD *)(a1 + 256))
  {
    v14 = 0;
    v15 = 96;
    do
    {
      physx::writeFloatBuffer(*(_QWORD *)(a1 + 264) + v15 - 96, 4, a3, (uint64_t (***)(_QWORD, _QWORD, _QWORD))a2);
      physx::writeFloatBuffer(*(_QWORD *)(a1 + 264) + v15 - 80, 4, a3, (uint64_t (***)(_QWORD, _QWORD, _QWORD))a2);
      physx::writeFloatBuffer(*(_QWORD *)(a1 + 264) + v15 - 64, 4, a3, (uint64_t (***)(_QWORD, _QWORD, _QWORD))a2);
      physx::writeFloatBuffer(*(_QWORD *)(a1 + 264) + v15 - 48, 4, a3, (uint64_t (***)(_QWORD, _QWORD, _QWORD))a2);
      physx::writeFloatBuffer(*(_QWORD *)(a1 + 264) + v15 - 32, 4, a3, (uint64_t (***)(_QWORD, _QWORD, _QWORD))a2);
      physx::writeFloatBuffer(*(_QWORD *)(a1 + 264) + v15 - 16, 4, a3, (uint64_t (***)(_QWORD, _QWORD, _QWORD))a2);
      result = physx::writeFloatBuffer(*(_QWORD *)(a1 + 264) + v15, 4, a3, (uint64_t (***)(_QWORD, _QWORD, _QWORD))a2);
      ++v14;
      v15 += 112;
    }
    while (v14 < *(unsigned int *)(a1 + 256));
  }
  return result;
}

uint64_t physx::BV4TriangleMeshBuilder::getMidphaseID(physx::BV4TriangleMeshBuilder *this)
{
  return 1;
}

uint64_t physx::RTreeTriangleMeshBuilder::getMidphaseID(physx::RTreeTriangleMeshBuilder *this)
{
  return 0;
}

void physx::SubSortSAH::sort4(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  int *v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  __n128 v10;
  uint64_t v11;
  _BYTE *v12;
  unint64_t v13;
  unint64_t v14;
  unsigned int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  float32x4_t *v19;
  float32x4_t v20;
  float32x4_t v21;
  uint64_t v22;
  unsigned int v23;
  float32x4_t *v24;
  float32x4_t v25;
  int8x8_t v26;
  float32x4_t v27;
  float32x4_t v28;
  float v29;
  unsigned int *v30;
  uint64_t v31;
  uint64_t v32;
  int v33;
  uint64_t v34;
  _DWORD *v35;
  int v36;
  int v37;
  int v38;
  unsigned int v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  int v43;
  uint64_t v44;
  unsigned int v45;
  uint64_t v46;
  unint64_t v47;
  unsigned int *v48;
  unint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  unint64_t v53;
  uint64_t v54;
  uint64_t v55;
  float32x4_t *v56;
  float32x4_t v57;
  float32x4_t v58;
  float32x4_t *v59;
  _DWORD *v60;
  unsigned int *v61;
  uint64_t v62;
  unsigned int v63;
  float32x4_t *v64;
  float32x4_t v65;
  int8x8_t v66;
  float32x4_t v67;
  float32x4_t v68;
  _OWORD *v69;
  float32x4_t v70;
  uint64_t v71;
  float32x4_t *v72;
  _DWORD *v73;
  unsigned int *v74;
  uint64_t v75;
  unsigned int v76;
  float32x4_t *v77;
  float32x4_t v78;
  int8x8_t v79;
  float32x4_t v80;
  float32x4_t v81;
  int v82;
  float v83;
  float *v84;
  int v85;
  int v86;
  int v87;
  uint64_t v88;
  float v89;
  float v90;
  unsigned int v91;
  unsigned int v92;
  uint64_t v94;
  int *v95;
  uint64_t v96;
  int v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  int v102;
  int *v103;
  int v104;
  BOOL v105;
  unsigned int v106;
  int v107;
  int v108;
  int v109;
  uint64_t v110;
  int v111;
  uint64_t i;
  int v113;
  uint64_t v114;
  uint64_t v115;
  unsigned int v116;
  uint32x4_t v117;
  char v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  float32x4_t *v122;
  float32x4_t v123;
  float32x4_t v124;
  float32x4_t v125;
  int8x8_t v126;
  float32x4_t v127;
  float32x4_t v128;
  float v129;
  float v130;
  int v131;
  int v132;
  int v133;
  uint64_t v134;
  unsigned int v135;
  float32x4_t *v136;
  float32x4_t v137;
  float32x4_t v138;
  int8x8_t v139;
  float32x4_t v140;
  float32x4_t v141;
  float v142;
  float v143;
  BOOL v144;
  BOOL v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  int v149;
  uint64_t v150;
  unsigned int v151;
  uint64_t v152;
  unsigned int v153;
  int *v154;
  int v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  int v159;
  uint64_t v160;
  uint64_t v161;
  unsigned int v162;
  uint64_t v163;
  char v164;
  char v165;
  _BYTE v166[24];
  unint64_t v167;
  char v168;
  _BYTE *v169;
  uint64_t v170;
  __int128 v171;
  uint32x4_t v172;
  uint64_t v173;
  __int128 v174;
  uint64_t v175;
  _DWORD v176[3];
  float v177;
  float v178;
  float v179;
  uint64_t v180;

  MEMORY[0x24BDAC7A8](a1);
  v6 = v3;
  v8 = v7;
  v180 = *MEMORY[0x24BDAC8D0];
  v9 = *v4;
  v153 = v5 + 1;
  if (*v4 <= (v5 + 1))
    v9 = v5 + 1;
  if (!v5)
    v9 = 1;
  v154 = v4;
  *v4 = v9;
  v10 = (__n128)xmmword_2261AAAD0;
  v171 = xmmword_2261AAAD0;
  v163 = v1;
  v151 = v2;
  if (v2 <= 3)
  {
    if ((_DWORD)v2 != 3)
    {
      v110 = v2;
      do
        *((_DWORD *)&v171 + v110++) = v2;
      while ((_DWORD)v110 != 3);
    }
  }
  else
  {
    v11 = 0;
    v168 = 1;
    v170 = 0x40000000001;
    v169 = v166;
    *(_QWORD *)v166 = v2 << 32;
    v12 = v166;
    v13 = 1;
    v152 = v3;
LABEL_7:
    v14 = 0;
    v15 = -1;
    v10.n128_u32[0] = -8388609;
    do
    {
      v16 = *(unsigned int *)&v12[8 * v14 + 4];
      if ((_DWORD)v16 != 1)
      {
        v17 = *(unsigned int *)&v12[8 * v14];
        v18 = *(_QWORD *)(v1 + 16);
        v19 = (float32x4_t *)(v18 + 32 * *(unsigned int *)(v8 + 4 * v17));
        v20 = *v19;
        v21 = v19[1];
        if ((_DWORD)v16)
        {
          v22 = v16 - 1;
          v23 = v17 + 1;
          do
          {
            v24 = (float32x4_t *)(v18 + 32 * *(unsigned int *)(v8 + 4 * v23));
            v20 = vminq_f32(v20, *v24);
            v21 = vmaxq_f32(v21, v24[1]);
            ++v23;
            --v22;
          }
          while (v22);
        }
        v25 = vsubq_f32(v21, v20);
        v26 = (int8x8_t)vrev64_s32((int32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v25, (int8x16_t)v25, 8uLL));
        *(int8x8_t *)v27.f32 = vext_s8(v26, *(int8x8_t *)v25.f32, 4uLL);
        *(int8x8_t *)&v27.u32[2] = vext_s8(*(int8x8_t *)v25.f32, v26, 4uLL);
        v28 = vmulq_f32(v25, v27);
        v28.i64[0] = vpaddq_f32(v28, v28).u64[0];
        v29 = (float)v16 * vpadd_f32(*(float32x2_t *)v28.f32, *(float32x2_t *)v28.f32).f32[0];
        if (v29 > v10.n128_f32[0])
        {
          v15 = v14;
          v10.n128_f32[0] = v29;
        }
      }
      ++v14;
    }
    while (v14 < v13);
    while (1)
    {
      v30 = (unsigned int *)&v12[8 * v15];
      v32 = *v30;
      v31 = v30[1];
      if (v31 >= 2)
      {
        if ((_DWORD)v31 == 2)
        {
          v33 = 1;
        }
        else
        {
          v156 = v11;
          v34 = 0;
          v155 = *v30;
          v35 = (_DWORD *)(v8 + 4 * v32);
          v36 = v31 <= 3 ? -2 : -4;
          v37 = v31 <= 3 ? 1 : 2;
          v38 = v31 - v37;
          v174 = *(_OWORD *)(v1 + 64);
          v175 = *(_QWORD *)(v1 + 80);
          v172 = *(uint32x4_t *)(v1 + 40);
          v39 = v31 >> 1;
          v40 = (int)v31 - 2;
          v41 = 4 * v31;
          v173 = *(_QWORD *)(v1 + 56);
          v42 = (v31 - 1);
          v43 = v31 - v37 - v37;
          v44 = (v31 + v36 + 1);
          v157 = (v31 - v37);
          v45 = -(v31 >> 1);
          v162 = v31 >> 1;
          v160 = v42;
          v161 = v40;
          v159 = v43;
          v158 = v44;
          do
          {
            v46 = v172.i64[v34];
            if (*(_DWORD *)(v1 + 96) == (_DWORD)v31)
            {
              v47 = 0;
              v48 = *(unsigned int **)(v1 + 8);
              do
              {
                v48[v47 / 4] = *(_DWORD *)(v46 + v47);
                v47 += 4;
              }
              while (v41 != v47);
            }
            else
            {
              v49 = 0;
              v50 = *((_QWORD *)&v174 + v34);
              v51 = *(_QWORD *)(v1 + 88);
              do
              {
                *(_DWORD *)(v51 + v49) = *(_DWORD *)(v50 + 4 * v35[v49 / 4]);
                v49 += 4;
              }
              while (v41 != v49);
              v52 = v31;
              physx::shdfnd::sort<unsigned int,physx::shdfnd::Less<unsigned int>,physx::shdfnd::ReflectionAllocator<unsigned int>>(v51, v31, (uint64_t)&v165, (uint64_t)&v164, 32);
              v53 = 0;
              v1 = v163;
              v54 = *(_QWORD *)(v163 + 88);
              v48 = *(unsigned int **)(v163 + 8);
              do
              {
                v48[v53 / 4] = *(_DWORD *)(v46 + 4 * *(unsigned int *)(v54 + v53));
                v53 += 4;
              }
              while (v41 != v53);
              v31 = v52;
              v39 = v162;
              v42 = v160;
              v40 = v161;
              v43 = v159;
              v44 = v158;
            }
            v55 = *(_QWORD *)(v1 + 16);
            v56 = (float32x4_t *)(v55 + 32 * *v48);
            v57 = *v56;
            v58 = v56[1];
            if (v31 >= 4)
            {
              v59 = (float32x4_t *)(v55 + 32 * v48[1]);
              v57 = vminq_f32(v57, *v59);
              v58 = vmaxq_f32(v58, v59[1]);
            }
            if (v38 >= v37)
            {
              v60 = *(_DWORD **)(v1 + 24);
              v61 = &v48[v37];
              v62 = v44;
              do
              {
                v63 = *v61++;
                v64 = (float32x4_t *)(v55 + 32 * v63);
                v57 = vminq_f32(v57, *v64);
                v58 = vmaxq_f32(v58, v64[1]);
                v65 = vsubq_f32(v58, v57);
                v66 = (int8x8_t)vrev64_s32((int32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v65, (int8x16_t)v65, 8uLL));
                *(int8x8_t *)v67.f32 = vext_s8(v66, *(int8x8_t *)v65.f32, 4uLL);
                *(int8x8_t *)&v67.u32[2] = vext_s8(*(int8x8_t *)v65.f32, v66, 4uLL);
                v68 = vmulq_f32(v65, v67);
                v68.i64[0] = vpaddq_f32(v68, v68).u64[0];
                *v60++ = vpadd_f32(*(float32x2_t *)v68.f32, *(float32x2_t *)v68.f32).u32[0];
                --v62;
              }
              while (v62);
            }
            v69 = (_OWORD *)(v55 + 32 * v48[v42]);
            v10 = *(__n128 *)v69;
            v70 = *((float32x4_t *)v69 + 1);
            v71 = v40;
            if ((int)v40 > v38)
            {
              do
              {
                v72 = (float32x4_t *)(v55 + 32 * v48[v71]);
                v10 = (__n128)vminq_f32((float32x4_t)v10, *v72);
                v70 = vmaxq_f32(v70, v72[1]);
                --v71;
              }
              while (v71 > v38);
            }
            if (v38 >= v37)
            {
              v73 = *(_DWORD **)(v1 + 32);
              v74 = &v48[v157];
              v75 = v44;
              do
              {
                v76 = *v74--;
                v77 = (float32x4_t *)(v55 + 32 * v76);
                v10 = (__n128)vminq_f32((float32x4_t)v10, *v77);
                v70 = vmaxq_f32(v70, v77[1]);
                v78 = vsubq_f32(v70, (float32x4_t)v10);
                v79 = (int8x8_t)vrev64_s32((int32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v78, (int8x16_t)v78, 8uLL));
                *(int8x8_t *)v80.f32 = vext_s8(v79, *(int8x8_t *)v78.f32, 4uLL);
                *(int8x8_t *)&v80.u32[2] = vext_s8(*(int8x8_t *)v78.f32, v79, 4uLL);
                v81 = vmulq_f32(v78, v80);
                v81.i64[0] = vpaddq_f32(v81, v81).u64[0];
                *v73++ = vpadd_f32(*(float32x2_t *)v81.f32, *(float32x2_t *)v81.f32).u32[0];
                --v75;
              }
              while (v75);
            }
            v82 = 0;
            v83 = 3.4028e38;
            if ((v43 & 0x80000000) == 0)
            {
              v84 = *(float **)(v1 + 24);
              v85 = v37;
              v86 = v38;
              v87 = v43;
              v88 = v44;
              do
              {
                v89 = *(float *)(*(_QWORD *)(v1 + 32) + 4 * v87) * (float)v86;
                v90 = v89 + (float)((float)v85 * *v84);
                if (v90 < v83)
                  goto LABEL_48;
                if (v90 <= v83)
                {
                  v91 = v45 + v85;
                  if ((int)(v45 + v85) < 0)
                    v91 = -v91;
                  v92 = v82 - v39;
                  if ((int)(v82 - v39) < 0)
                    v92 = v39 - v82;
                  if (v91 < v92)
                  {
LABEL_48:
                    v82 = v85;
                    v83 = v89 + (float)((float)v85 * *v84);
                  }
                }
                ++v84;
                --v87;
                --v86;
                ++v85;
                --v88;
              }
              while (v88);
            }
            *(&v177 + v34) = v83;
            v176[v34++] = v82;
          }
          while (v34 != 3);
          v10.n128_f32[0] = v178;
          if (v177 > v178 || v177 > v179)
          {
            v6 = v152;
            v11 = v156;
            v94 = v178 <= v179 ? 1 : 2;
          }
          else
          {
            v94 = 0;
            v6 = v152;
            v11 = v156;
          }
          v95 = (int *)v172.i64[v94];
          if (*(_DWORD *)(v1 + 96) == (_DWORD)v31)
          {
            v96 = v31;
            do
            {
              v97 = *v95++;
              *v35++ = v97;
              --v96;
            }
            while (v96);
          }
          else
          {
            v98 = 0;
            v99 = *((_QWORD *)&v174 + v94);
            v100 = *(_QWORD *)(v1 + 88);
            v101 = v31;
            do
            {
              *(_DWORD *)(v100 + v98 * 4) = *(_DWORD *)(v99 + 4 * v35[v98]);
              ++v98;
            }
            while (v31 != v98);
            v102 = v31;
            physx::shdfnd::sort<unsigned int,physx::shdfnd::Less<unsigned int>,physx::shdfnd::ReflectionAllocator<unsigned int>>(v100, v31, (uint64_t)&v165, (uint64_t)&v164, 32);
            LODWORD(v31) = v102;
            v103 = *(int **)(v163 + 88);
            do
            {
              v104 = *v103++;
              *v35++ = v95[v104];
              --v101;
            }
            while (v101);
          }
          v105 = !v176[v94] && (_DWORD)v31 == 3;
          v33 = v105 ? 1 : v176[v94];
          v13 = v170;
          LODWORD(v32) = v155;
        }
      }
      else
      {
        v33 = 0;
      }
      *(_QWORD *)&v174 = __PAIR64__(v33, v32);
      if ((HIDWORD(v170) & 0x7FFFFFFFu) <= v13)
      {
        v107 = v31;
        physx::shdfnd::Array<physx::Interval,physx::shdfnd::InlineAllocator<8192u,physx::shdfnd::ReflectionAllocator<physx::Interval>>>::growAndPushBack((uint64_t)v166, &v174);
        LODWORD(v31) = v107;
        v106 = v170;
      }
      else
      {
        *(_QWORD *)&v169[8 * v13] = v174;
        v106 = v170 + 1;
        LODWORD(v170) = v170 + 1;
      }
      v108 = v33 + v32;
      LODWORD(v174) = v108;
      DWORD1(v174) = v31 - v33;
      if ((HIDWORD(v170) & 0x7FFFFFFFu) <= v106)
      {
        physx::shdfnd::Array<physx::Interval,physx::shdfnd::InlineAllocator<8192u,physx::shdfnd::ReflectionAllocator<physx::Interval>>>::growAndPushBack((uint64_t)v166, &v174);
        v109 = v170;
      }
      else
      {
        *(_QWORD *)&v169[8 * v106] = v174;
        v109 = v170 + 1;
      }
      v1 = v163;
      LODWORD(v170) = v109 - 1;
      *(_QWORD *)&v169[8 * v15] = *(_QWORD *)&v169[8 * (v109 - 1)];
      *((_DWORD *)&v171 + v11++) = v108;
      if (v11 == 3)
        break;
      v13 = v170;
      v12 = v169;
      if ((_DWORD)v170)
        goto LABEL_7;
      v15 = -1;
    }
    if ((v170 & 0x8000000000000000) == 0 && (v170 & 0x7FFFFFFF00000000) != 0 && v169 != v166 && v169)
      (*(void (**)(uint64_t, __n128))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24, v10);
  }
  physx::shdfnd::sort<unsigned int,physx::shdfnd::Less<unsigned int>,physx::shdfnd::ReflectionAllocator<unsigned int>>((uint64_t)&v171, 3, (uint64_t)v166, (uint64_t)&v174, 32);
  HIDWORD(v171) = v151;
  LODWORD(v174) = 0;
  v111 = v171;
  v172.i32[0] = v171;
  *(_QWORD *)((char *)&v174 + 4) = v171;
  HIDWORD(v174) = DWORD2(v171);
  for (i = 1; i != 4; ++i)
  {
    v113 = *(_DWORD *)((char *)&v171 + i * 4);
    v172.i32[i] = v113 - v111;
    v111 = v113;
  }
  v114 = 0;
  v115 = v163;
  v116 = *(_DWORD *)&physx::stopAtTrisPerPage[4 * *(unsigned int *)(v163 + 100)] >= v151;
  v117.i64[0] = 0x1100000011;
  v117.i64[1] = 0x1100000011;
  v118 = v116 & ~vmaxv_u16((uint16x4_t)vcltz_s16(vshl_n_s16((int16x4_t)vand_s8((int8x8_t)vmovn_s32((int32x4_t)vcgeq_u32(v172, v117)), (int8x8_t)vdup_n_s16(v116)), 0xFuLL)));
  do
  {
    *(_DWORD *)v166 = 2122317823;
    v119 = v172.u32[v114];
    if ((_DWORD)v119)
    {
      v120 = *(_QWORD *)(v115 + 16);
      v121 = *((unsigned int *)&v174 + v114);
      v122 = (float32x4_t *)(v120 + 32 * *(unsigned int *)(v8 + 4 * v121));
      v123 = *v122;
      v124 = v122[1];
      v125 = vsubq_f32(v124, *v122);
      v126 = (int8x8_t)vrev64_s32((int32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v125, (int8x16_t)v125, 8uLL));
      *(int8x8_t *)v127.f32 = vext_s8(v126, *(int8x8_t *)v125.f32, 4uLL);
      *(int8x8_t *)&v127.u32[2] = vext_s8(*(int8x8_t *)v125.f32, v126, 4uLL);
      v128 = vmulq_f32(v125, v127);
      v128.i64[0] = vpaddq_f32(v128, v128).u64[0];
      LODWORD(v129) = vpadd_f32(*(float32x2_t *)v128.f32, *(float32x2_t *)v128.f32).u32[0];
      if ((_DWORD)v119 == 1)
      {
        v130 = v129;
      }
      else
      {
        v134 = v119 - 1;
        v135 = v121 + 1;
        v130 = v129;
        do
        {
          v136 = (float32x4_t *)(v120 + 32 * *(unsigned int *)(v8 + 4 * v135));
          v137 = v136[1];
          v138 = vsubq_f32(v137, *v136);
          v139 = (int8x8_t)vrev64_s32((int32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v138, (int8x16_t)v138, 8uLL));
          *(int8x8_t *)v140.f32 = vext_s8(v139, *(int8x8_t *)v138.f32, 4uLL);
          *(int8x8_t *)&v140.u32[2] = vext_s8(*(int8x8_t *)v138.f32, v139, 4uLL);
          v141 = vmulq_f32(v138, v140);
          v141.i64[0] = vpaddq_f32(v141, v141).u64[0];
          v142 = vpadd_f32(*(float32x2_t *)v141.f32, *(float32x2_t *)v141.f32).f32[0];
          if (v130 >= v142)
            v130 = v142;
          if (v129 <= v142)
            v129 = v142;
          v123 = vminq_f32(v123, *v136);
          v124 = vmaxq_f32(v124, v137);
          ++v135;
          --v134;
        }
        while (v134);
      }
      v143 = v129 / v130;
      v144 = (_DWORD)v119 == 3;
      v145 = v143 < 40.0;
      if (v143 >= 40.0)
        v144 = 0;
      v123.i32[3] = v124.i32[0];
      *(float32x4_t *)v166 = v123;
      v133 = v124.i32[1];
      *(_QWORD *)&v166[16] = vextq_s8((int8x16_t)v124, (int8x16_t)v124, 4uLL).u64[0];
      v132 = v124.i32[2];
      v118 &= v145;
      if (v119 < 3
        || v144
        || (v118 & 1) != 0
        || v119 <= physx::stopAtTrisPerLeaf[*(unsigned int *)(v115 + 100)])
      {
        v131 = v121 + ((unint64_t)(v8 - *(_QWORD *)v115) >> 2);
      }
      else
      {
        LODWORD(v119) = 0;
        v118 = 0;
        v131 = -1;
      }
    }
    else
    {
      *(_OWORD *)&v166[4] = xmmword_2261AAAE0;
      *(_DWORD *)&v166[20] = -25165825;
      v131 = -1;
      v132 = -25165825;
      v133 = -25165825;
      LODWORD(v119) = -1;
      v123 = (float32x4_t)xmmword_2261A6E10;
    }
    v167 = __PAIR64__(v119, v131);
    v146 = *(unsigned int *)(v6 + 8);
    if ((*(_DWORD *)(v6 + 12) & 0x7FFFFFFFu) <= v146)
    {
      physx::shdfnd::Array<physx::RTreeNodeNQ,physx::shdfnd::ReflectionAllocator<physx::RTreeNodeNQ>>::growAndPushBack(v6, v166);
      v115 = v163;
    }
    else
    {
      v147 = *(_QWORD *)v6 + 32 * v146;
      *(float32x4_t *)v147 = v123;
      *(_DWORD *)(v147 + 16) = v133;
      *(_DWORD *)(v147 + 20) = v132;
      *(_QWORD *)(v147 + 24) = v167;
      ++*(_DWORD *)(v6 + 8);
    }
    ++v114;
  }
  while (v114 != 4);
  if ((v118 & 1) == 0)
  {
    v148 = 0;
    v149 = *(_DWORD *)(v6 + 8) - 4;
    do
    {
      v150 = *(_QWORD *)v6 + 32 * (v149 + v148);
      if (!*(_DWORD *)(v150 + 28))
      {
        *(_DWORD *)(v150 + 24) = *(_DWORD *)(v6 + 8);
        physx::SubSortSAH::sort4(v163, v8 + 4 * *((unsigned int *)&v174 + v148), v172.u32[v148], v6, v154, v153);
      }
      ++v148;
    }
    while (v148 != 4);
  }
}

uint64_t physx::SubSortQuick::sort4(uint64_t a1, unsigned int *a2, unsigned int a3, uint64_t a4, int *a5, float32x4_t *a6, int a7)
{
  int v11;
  uint64_t v12;
  uint64_t v13;
  float32x4_t *v14;
  float32x4_t v15;
  float32x4_t v16;
  uint64_t v17;
  unsigned int *v18;
  unsigned int v19;
  float32x4_t *v20;
  float32x4_t v21;
  int v22;
  uint64_t result;
  uint64_t v25;
  unsigned int v26;
  uint64_t v27;
  int32x2_t v28;
  unint64_t v29;
  unsigned int v30;
  unsigned int v31;
  unsigned int v32;
  unsigned int v33;
  uint64_t v34;
  unsigned int v35;
  unsigned int v36;
  uint64_t v37;
  unsigned int v38;
  unsigned int v39;
  float v40;
  unint64_t v41;
  unsigned int *v42;
  unsigned int v43;
  unsigned int v44;
  unsigned int v45;
  BOOL v46;
  int v47;
  int v48;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  float32x4_t *v55;
  float32x4_t v56;
  float32x4_t v57;
  uint64_t v58;
  uint64_t v59;
  float32x4_t *v60;
  float32x4_t v61;
  float32x4_t v62;
  int8x8_t v63;
  uint64_t v64;
  uint64_t v65;
  unsigned int v66;
  int v68;
  float32x4_t v69;
  float32x4_t v70;
  uint64_t v71;
  float v72;
  uint64_t v73;

  v73 = *MEMORY[0x24BDAC8D0];
  v11 = *a5;
  if (*a5 <= (a7 + 1))
    v11 = a7 + 1;
  if (!a7)
    v11 = 1;
  *a5 = v11;
  if (a3 >> 2 <= 1)
    v12 = 1;
  else
    v12 = a3 >> 2;
  v13 = *(_QWORD *)(a1 + 16);
  v14 = (float32x4_t *)(v13 + 32 * *a2);
  v16 = *v14;
  v15 = v14[1];
  if (a3 >= 2)
  {
    v17 = a3 - 1;
    v18 = a2 + 1;
    do
    {
      v19 = *v18++;
      v20 = (float32x4_t *)(v13 + 32 * v19);
      v15 = vmaxq_f32(v15, v20[1]);
      v16 = vminq_f32(v16, *v20);
      --v17;
    }
    while (v17);
  }
  v21 = vsubq_f32(v15, v16);
  v71 = v21.i64[0];
  v72 = v21.f32[2];
  if (v21.f32[1] > v21.f32[2])
    v22 = 1;
  else
    v22 = 2;
  if (v21.f32[0] > v21.f32[2] && v21.f32[0] > v21.f32[1])
    v22 = 0;
  v66 = v22;
  v65 = *(_QWORD *)(a1 + 24);
  v68 = *(_DWORD *)(a4 + 8);
  physx::shdfnd::Array<physx::RTreeNodeNQ,physx::shdfnd::ReflectionAllocator<physx::RTreeNodeNQ>>::resizeUninitialized(a4, v68 + 4);
  result = a1;
  v25 = 0;
  v26 = 0;
  v27 = 1;
  v28 = vdup_n_s32(0xFE7FFFFF);
  do
  {
    v29 = v25 * v12;
    if (v25 == 3)
    {
      v30 = (-3 * v12 + a3) & ~((int)(-3 * v12 + a3) >> 31);
    }
    else
    {
      if (v29 <= a3 - 1)
      {
        v31 = v12;
        v32 = a3 - 1;
        v33 = v25 * v12;
        v34 = v65 + 4 * v66;
        while (1)
        {
          v35 = (v33 + v32) >> 1;
          v36 = a2[v35];
          v37 = v32;
          v38 = a2[v32];
          a2[v32] = v36;
          a2[v35] = v38;
          v39 = v33;
          if (v33 < v32)
          {
            v40 = *(float *)(v34 + 12 * v36);
            v41 = v32 - (unint64_t)v33;
            v42 = &a2[v33];
            v39 = v33;
            do
            {
              if (*(float *)(v34 + 12 * *v42) <= v40)
              {
                v43 = a2[v39];
                a2[v39] = *v42;
                *v42 = v43;
                ++v39;
              }
              ++v42;
              --v41;
            }
            while (v41);
          }
          v44 = a2[v37];
          a2[v37] = a2[v39];
          a2[v39] = v44;
          v45 = v39 - v33 + 1;
          if (v45 == v31)
            break;
          v46 = v31 >= v45;
          if (v31 >= v45)
            v47 = v39 - v33 + 1;
          else
            v47 = 0;
          if (v31 >= v45)
            v32 = v37;
          else
            v32 = v39 - 1;
          if (v46)
            v33 = v39 + 1;
          v31 -= v47;
        }
        *((float *)&v71 + v66) = physx::SubSortQuick::reductionFactors[v25] * *((float *)&v71 + v66);
        if (*((float *)&v71 + 1) > v72)
          v48 = 1;
        else
          v48 = 2;
        if (*(float *)&v71 > v72 && *(float *)&v71 > *((float *)&v71 + 1))
          v48 = 0;
        v66 = v48;
      }
      v30 = v12;
    }
    v50 = (v68 + v25);
    v51 = *(_QWORD *)a4;
    v52 = *(_QWORD *)a4 + 32 * v50;
    v26 += v30;
    if (v30 <= *(_DWORD *)(result + 40))
    {
      if (v30 && v26 <= a3)
      {
        v53 = v51 + 32 * v50;
        *(_DWORD *)(v53 + 28) = v30;
        *(_DWORD *)(v53 + 24) = (((unint64_t)a2 - *(_QWORD *)(result + 8)) >> 2) + v29;
        v54 = *(_QWORD *)(result + 16);
        v55 = (float32x4_t *)(v54 + 32 * a2[v29]);
        v69 = *v55;
        v70 = v55[1];
        if (v30 >= 2)
        {
          v57 = *v55;
          v56 = v55[1];
          v58 = v30 - 1;
          v59 = v27;
          do
          {
            v60 = (float32x4_t *)(v54 + 32 * a2[v59]);
            v57 = vminq_f32(v57, *v60);
            v56 = vmaxq_f32(v56, v60[1]);
            ++v59;
            --v58;
          }
          while (v58);
          v69 = v57;
          v70 = v56;
        }
        if (v25)
        {
LABEL_60:
          v62 = v69;
          v61 = vmaxq_f32(a6[1], v70);
          *a6 = vminq_f32(*a6, v69);
          a6[1] = v61;
          v62.i32[3] = v70.i32[0];
          v63 = vext_s8(*(int8x8_t *)v70.f32, (int8x8_t)*(_OWORD *)&vextq_s8((int8x16_t)v70, (int8x16_t)v70, 8uLL), 4uLL);
          goto LABEL_63;
        }
      }
      else
      {
        v69 = 0u;
        v70 = 0u;
        *(_OWORD *)v52 = xmmword_2261A6E10;
        *(int32x2_t *)(v52 + 16) = v28;
        *(_QWORD *)(v51 + 32 * v50 + 24) = -1;
        if (v25)
          goto LABEL_60;
      }
    }
    else
    {
      *(_QWORD *)(v52 + 24) = *(unsigned int *)(a4 + 8);
      physx::SubSortQuick::sort4();
      result = a1;
      if (v25)
        goto LABEL_60;
    }
    v62.i64[0] = v69.i64[0];
    *a6 = v69;
    a6[1] = v70;
    v63 = *(int8x8_t *)&v70.i32[1];
    v62.i64[1] = __PAIR64__(v70.u32[0], v69.u32[2]);
LABEL_63:
    v64 = *(_QWORD *)a4 + 32 * v50;
    *(float32x4_t *)v64 = v62;
    *(int8x8_t *)(v64 + 16) = v63;
    ++v25;
    v27 += v12;
  }
  while (v25 != 4);
  return result;
}

uint64_t physx::shdfnd::Array<physx::RTreeNodeNQ,physx::shdfnd::ReflectionAllocator<physx::RTreeNodeNQ>>::recreate(uint64_t a1, unsigned int a2)
{
  uint64_t v4;
  uint64_t v5;
  const char *v6;
  uint64_t result;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  unint64_t v11;
  _QWORD *v12;

  v4 = 32 * a2;
  v5 = physx::shdfnd::Foundation::mInstance;
  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)physx::shdfnd::Foundation::mInstance + 40))(physx::shdfnd::Foundation::mInstance))
    v6 = "static const char *physx::shdfnd::ReflectionAllocator<physx::RTreeNodeNQ>::getName() [T = physx::RTreeNodeNQ]";
  else
    v6 = "<allocation names disabled>";
  result = (*(uint64_t (**)(uint64_t, uint64_t, const char *, const char *, uint64_t))(*(_QWORD *)(v5 + 24) + 16))(v5 + 24, v4, v6, "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/foundation/include/PsArray.h", 553);
  v8 = result;
  v9 = *(unsigned int *)(a1 + 8);
  v10 = *(_QWORD **)a1;
  if ((_DWORD)v9)
  {
    v11 = result + 32 * v9;
    v12 = (_QWORD *)result;
    do
    {
      *v12 = *v10;
      v12[1] = v10[1];
      v12[2] = v10[2];
      v12[3] = v10[3];
      v12 += 4;
      v10 += 4;
    }
    while ((unint64_t)v12 < v11);
    v10 = *(_QWORD **)a1;
  }
  if ((*(_DWORD *)(a1 + 12) & 0x80000000) == 0 && v10)
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
  *(_QWORD *)a1 = v8;
  *(_DWORD *)(a1 + 12) = a2;
  return result;
}

char *physx::shdfnd::sort<unsigned int,physx::SortBoundsPredicate,physx::shdfnd::ReflectionAllocator<unsigned int>>(char *result, int a2, unsigned int *a3)
{
  int v3;
  char *v5;
  int v6;
  char *v7;
  _OWORD *v8;
  int v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  float v16;
  uint64_t v17;
  uint64_t v18;
  float v19;
  float *v20;
  float v21;
  float v22;
  uint64_t v23;
  int v24;
  int v25;
  uint64_t v26;
  float v27;
  char *v28;
  unsigned int v29;
  unsigned int v30;
  char *v31;
  unsigned int v32;
  unsigned int v33;
  unsigned int v34;
  unsigned int v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  int v40;
  char *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  int v45;
  float *v46;
  float v47;
  float *v48;
  int v49;
  int v50;
  BOOL v51;
  _BYTE v52[4];
  uint64_t v53;
  _OWORD *v54;
  char v55;
  void *v56;
  char v57;
  _OWORD v58[8];
  uint64_t v59;

  v59 = *MEMORY[0x24BDAC8D0];
  v57 = 0;
  v56 = v58;
  v53 = 0x2000000000;
  v54 = v58;
  v55 = 0;
  v3 = a2 - 1;
  if (a2 - 1 >= 1)
  {
    v5 = result;
    v6 = 0;
    v7 = result + 4;
    v8 = v58;
    memset(v58, 0, sizeof(v58));
    while (1)
    {
      if (v3 > v6)
      {
        if ((v3 - v6) < 5)
        {
LABEL_31:
          v38 = *((_QWORD *)a3 + 1);
          v39 = v6;
          v40 = v6 + 1;
          v41 = &v7[4 * v6];
          do
          {
            v42 = 0;
            v43 = v39++;
            v44 = v38 + 4 * *a3;
            v45 = v43;
            do
            {
              v46 = (float *)(v44 + 32 * *(unsigned int *)&v41[4 * v42]);
              v47 = *v46 + v46[4];
              v48 = (float *)(v44 + 32 * *(unsigned int *)&v5[4 * v45]);
              if (v47 < (float)(*v48 + v48[4]))
                v45 = v40 + v42;
              ++v42;
            }
            while (v43 + v42 < v3);
            if (v45 != (_DWORD)v43)
            {
              v49 = *(_DWORD *)&v5[4 * v45];
              *(_DWORD *)&v5[4 * v45] = *(_DWORD *)&v5[4 * v43];
              *(_DWORD *)&v5[4 * v43] = v49;
            }
            ++v40;
            v41 += 4;
          }
          while (v39 != v3);
        }
        else
        {
          while (1)
          {
            v9 = v6 + v3;
            if (v6 + v3 < 0 != __OFADD__(v6, v3))
              ++v9;
            v10 = v9 >> 1;
            v11 = (uint64_t)v9 >> 1;
            v12 = *((_QWORD *)a3 + 1);
            v13 = *(unsigned int *)&v5[4 * v10];
            v14 = *a3;
            v15 = *(unsigned int *)&v5[4 * v6];
            v16 = *(float *)(v12 + 32 * v15 + 4 * v14) + *(float *)(v12 + 32 * v15 + 4 * v14 + 16);
            if ((float)(*(float *)(v12 + 32 * v13 + 4 * v14) + *(float *)(v12 + 32 * v13 + 4 * v14 + 16)) >= v16)
            {
              v17 = *(unsigned int *)&v5[4 * v6];
            }
            else
            {
              *(_DWORD *)&v5[4 * v6] = v13;
              *(_DWORD *)&v5[4 * v11] = v15;
              v14 = *a3;
              v17 = *(unsigned int *)&v5[4 * v6];
              v16 = *(float *)(v12 + 32 * v17 + 4 * v14) + *(float *)(v12 + 32 * v17 + 4 * v14 + 16);
              v13 = v15;
              LODWORD(v15) = *(_DWORD *)&v5[4 * v6];
            }
            v18 = *(unsigned int *)&v5[4 * v3];
            v19 = *(float *)(v12 + 32 * v18 + 4 * v14) + *(float *)(v12 + 32 * v18 + 4 * v14 + 16);
            if (v19 >= v16)
            {
              LODWORD(v15) = *(_DWORD *)&v5[4 * v3];
            }
            else
            {
              *(_DWORD *)&v5[4 * v6] = v18;
              *(_DWORD *)&v5[4 * v3] = v15;
              v14 = *a3;
              v20 = (float *)(v12 + 32 * v17 + 4 * v14);
              v21 = *v20;
              v22 = v20[4];
              v13 = *(unsigned int *)&v5[4 * v11];
              v19 = v21 + v22;
            }
            if (v19 < (float)(*(float *)(v12 + 32 * v13 + 4 * v14) + *(float *)(v12 + 32 * v13 + 4 * v14 + 16)))
            {
              *(_DWORD *)&v5[4 * v11] = v15;
              *(_DWORD *)&v5[4 * v3] = v13;
              v13 = *(unsigned int *)&v5[4 * v11];
            }
            v23 = v3 - 1;
            *(_DWORD *)&v5[4 * v11] = *(_DWORD *)&v5[4 * v23];
            *(_DWORD *)&v5[4 * v23] = v13;
            v24 = v6;
            v25 = v3 - 1;
            while (1)
            {
              v26 = v12 + 4 * *a3;
              v27 = *(float *)(v26 + 32 * v13) + *(float *)(v26 + 32 * v13 + 16);
              v28 = &v5[4 * v24];
              do
              {
                v30 = *((_DWORD *)v28 + 1);
                v28 += 4;
                v29 = v30;
                ++v24;
              }
              while ((float)(*(float *)(v26 + 32 * v30) + *(float *)(v26 + 32 * v30 + 16)) < v27);
              v31 = &v5[4 * v25];
              do
              {
                v33 = *((_DWORD *)v31 - 1);
                v31 -= 4;
                v32 = v33;
                --v25;
              }
              while (v27 < (float)(*(float *)(v26 + 32 * v33) + *(float *)(v26 + 32 * v33 + 16)));
              if (v24 >= v25)
                break;
              *(_DWORD *)v28 = v32;
              *(_DWORD *)v31 = v29;
              v13 = *(unsigned int *)&v5[4 * v23];
            }
            *(_DWORD *)v28 = v13;
            *(_DWORD *)&v5[4 * v23] = v29;
            v34 = v53;
            v35 = HIDWORD(v53) - 1;
            if (v24 - v6 >= v3 - v24)
            {
              if (v53 >= v35)
              {
                result = (char *)physx::shdfnd::internal::Stack<physx::shdfnd::ReflectionAllocator<unsigned int>>::grow((uint64_t)v52);
                v34 = v53;
                v8 = v54;
              }
              LODWORD(v53) = v34 + 1;
              *((_DWORD *)v8 + v34) = v24 + 1;
              v37 = v53;
              LODWORD(v53) = v53 + 1;
              *((_DWORD *)v8 + v37) = v3;
              v3 = v24 - 1;
            }
            else
            {
              if (v53 >= v35)
              {
                result = (char *)physx::shdfnd::internal::Stack<physx::shdfnd::ReflectionAllocator<unsigned int>>::grow((uint64_t)v52);
                v34 = v53;
                v8 = v54;
              }
              LODWORD(v53) = v34 + 1;
              *((_DWORD *)v8 + v34) = v6;
              v36 = v53;
              LODWORD(v53) = v53 + 1;
              *((_DWORD *)v8 + v36) = v24 - 1;
              v6 = v24 + 1;
            }
            if (v3 <= v6)
              break;
            if ((v3 - v6) <= 4)
              goto LABEL_31;
          }
        }
      }
      v50 = v53;
      if (!(_DWORD)v53)
        break;
      LODWORD(v53) = v53 - 1;
      v3 = *((_DWORD *)v8 + (v50 - 1));
      LODWORD(v53) = v50 - 2;
      v6 = *((_DWORD *)v8 + (v50 - 2));
    }
    if (v55)
      v51 = v8 == 0;
    else
      v51 = 1;
    if (!v51)
    {
      result = (char *)(*(uint64_t (**)(uint64_t, _OWORD *))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance
                                                                                + 24)
                                                                    + 24))(physx::shdfnd::Foundation::mInstance + 24, v8);
      if (v57)
        return (char *)physx::shdfnd::TempAllocator::deallocate((physx::shdfnd::TempAllocator *)&v56, (char *)v56);
    }
  }
  return result;
}

uint64_t physx::shdfnd::Array<physx::Interval,physx::shdfnd::InlineAllocator<8192u,physx::shdfnd::ReflectionAllocator<physx::Interval>>>::growAndPushBack(uint64_t result, _QWORD *a2)
{
  uint64_t v3;
  int v4;
  int v5;
  uint64_t v7;
  const char *v8;
  _QWORD *v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t *v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  v3 = result;
  v4 = *(_DWORD *)(result + 8212);
  if ((v4 & 0x7FFFFFFF) != 0)
    v5 = 2 * v4;
  else
    v5 = 1;
  if (!v5)
    goto LABEL_14;
  if ((8 * v5) <= 0x2000 && *(_BYTE *)(result + 0x2000) == 0)
  {
    *(_BYTE *)(result + 0x2000) = 1;
    v9 = (_QWORD *)result;
    goto LABEL_16;
  }
  if (!(8 * v5))
  {
LABEL_14:
    v9 = 0;
    goto LABEL_16;
  }
  v7 = physx::shdfnd::Foundation::mInstance;
  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)physx::shdfnd::Foundation::mInstance + 40))(physx::shdfnd::Foundation::mInstance))
    v8 = "static const char *physx::shdfnd::ReflectionAllocator<physx::Interval>::getName() [T = physx::Interval]";
  else
    v8 = "<allocation names disabled>";
  result = (*(uint64_t (**)(uint64_t, _QWORD, const char *, const char *, uint64_t))(*(_QWORD *)(v7 + 24) + 16))(v7 + 24, (8 * v5), v8, "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/foundation/include/PsArray.h", 553);
  v9 = (_QWORD *)result;
LABEL_16:
  v10 = *(unsigned int *)(v3 + 8208);
  if ((_DWORD)v10)
  {
    v11 = (unint64_t)&v9[v10];
    v12 = *(uint64_t **)(v3 + 8200);
    v13 = v9;
    do
    {
      v14 = *v12++;
      *v13++ = v14;
    }
    while ((unint64_t)v13 < v11);
    v15 = *(unsigned int *)(v3 + 8208);
  }
  else
  {
    v15 = 0;
  }
  v9[v15] = *a2;
  if ((*(_DWORD *)(v3 + 8212) & 0x80000000) == 0)
  {
    v16 = *(_QWORD *)(v3 + 8200);
    if (v16 == v3)
    {
      *(_BYTE *)(v3 + 0x2000) = 0;
    }
    else if (v16)
    {
      result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
    }
  }
  *(_QWORD *)(v3 + 8200) = v9;
  *(_DWORD *)(v3 + 8212) = v5;
  ++*(_DWORD *)(v3 + 8208);
  return result;
}

uint64_t physx::shdfnd::Array<physx::RTreeNodeNQ,physx::shdfnd::ReflectionAllocator<physx::RTreeNodeNQ>>::growAndPushBack(uint64_t result, _QWORD *a2)
{
  uint64_t v3;
  int v4;
  unsigned int v5;
  uint64_t v6;
  const char *v7;
  _QWORD *v8;
  uint64_t v9;
  unint64_t v10;
  _QWORD *v11;
  _QWORD *v12;
  uint64_t v13;
  _QWORD *v14;

  v3 = result;
  v4 = *(_DWORD *)(result + 12);
  if ((v4 & 0x7FFFFFFF) != 0)
    v5 = 2 * v4;
  else
    v5 = 1;
  if (v5)
  {
    v6 = physx::shdfnd::Foundation::mInstance;
    if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)physx::shdfnd::Foundation::mInstance + 40))(physx::shdfnd::Foundation::mInstance))
      v7 = "static const char *physx::shdfnd::ReflectionAllocator<physx::RTreeNodeNQ>::getName() [T = physx::RTreeNodeNQ]";
    else
      v7 = "<allocation names disabled>";
    result = (*(uint64_t (**)(uint64_t, uint64_t, const char *, const char *, uint64_t))(*(_QWORD *)(v6 + 24)
                                                                                              + 16))(v6 + 24, 32 * v5, v7, "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/foundation/include/PsArray.h", 553);
    v8 = (_QWORD *)result;
  }
  else
  {
    v8 = 0;
  }
  v9 = *(unsigned int *)(v3 + 8);
  if ((_DWORD)v9)
  {
    v10 = (unint64_t)&v8[4 * v9];
    v11 = *(_QWORD **)v3;
    v12 = v8;
    do
    {
      *v12 = *v11;
      v12[1] = v11[1];
      v12[2] = v11[2];
      v12[3] = v11[3];
      v12 += 4;
      v11 += 4;
    }
    while ((unint64_t)v12 < v10);
    v13 = *(unsigned int *)(v3 + 8);
  }
  else
  {
    v13 = 0;
  }
  v14 = &v8[4 * v13];
  *v14 = *a2;
  v14[1] = a2[1];
  v14[2] = a2[2];
  v14[3] = a2[3];
  if ((*(_DWORD *)(v3 + 12) & 0x80000000) == 0 && *(_QWORD *)v3)
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
  *(_QWORD *)v3 = v8;
  ++*(_DWORD *)(v3 + 8);
  *(_DWORD *)(v3 + 12) = v5;
  return result;
}

uint64_t physx::shdfnd::Array<physx::PxVec3,physx::shdfnd::ReflectionAllocator<physx::PxVec3>>::recreate(uint64_t result, unsigned int a2)
{
  uint64_t v3;
  uint64_t v4;
  const char *v5;
  uint64_t v6;
  unsigned int v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;

  v3 = result;
  if (a2)
  {
    v4 = physx::shdfnd::Foundation::mInstance;
    if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)physx::shdfnd::Foundation::mInstance + 40))(physx::shdfnd::Foundation::mInstance))
      v5 = "static const char *physx::shdfnd::ReflectionAllocator<physx::PxVec3>::getName() [T = physx::PxVec3]";
    else
      v5 = "<allocation names disabled>";
    result = (*(uint64_t (**)(uint64_t, uint64_t, const char *, const char *, uint64_t))(*(_QWORD *)(v4 + 24)
                                                                                              + 16))(v4 + 24, 12 * a2, v5, "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/foundation/include/PsArray.h", 553);
    v6 = result;
  }
  else
  {
    v6 = 0;
  }
  v7 = *(_DWORD *)(v3 + 8);
  v8 = *(_QWORD *)v3;
  if (v7)
  {
    v9 = v6 + 12 * v7;
    v10 = *(_QWORD *)v3;
    v11 = v6;
    do
    {
      *(_QWORD *)v11 = *(_QWORD *)v10;
      *(_DWORD *)(v11 + 8) = *(_DWORD *)(v10 + 8);
      v11 += 12;
      v10 += 12;
    }
    while (v11 < v9);
  }
  if ((*(_DWORD *)(v3 + 12) & 0x80000000) == 0 && v8)
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
  *(_QWORD *)v3 = v6;
  *(_DWORD *)(v3 + 12) = a2;
  return result;
}

uint64_t physx::shdfnd::Array<physx::RTreeNodeNQ,physx::shdfnd::ReflectionAllocator<physx::RTreeNodeNQ>>::resizeUninitialized(uint64_t result, unsigned int a2)
{
  uint64_t v3;

  v3 = result;
  if ((*(_DWORD *)(result + 12) & 0x7FFFFFFFu) < a2)
    result = physx::shdfnd::Array<physx::RTreeNodeNQ,physx::shdfnd::ReflectionAllocator<physx::RTreeNodeNQ>>::recreate(result, a2);
  *(_DWORD *)(v3 + 8) = a2;
  return result;
}

uint64_t physx::shdfnd::Array<physx::Gu::RTreeNodeQ,physx::shdfnd::ReflectionAllocator<physx::Gu::RTreeNodeQ>>::recreate(uint64_t a1, uint64_t a2)
{
  int v2;
  uint64_t v4;
  uint64_t v5;
  const char *v6;
  uint64_t result;
  uint64_t v8;
  unsigned int v9;
  __int128 *v10;
  unint64_t v11;
  _OWORD *v12;
  __int128 v13;

  v2 = a2;
  v4 = 28 * a2;
  v5 = physx::shdfnd::Foundation::mInstance;
  if ((*(unsigned int (**)(uint64_t, uint64_t))(*(_QWORD *)physx::shdfnd::Foundation::mInstance + 40))(physx::shdfnd::Foundation::mInstance, a2))
  {
    v6 = "static const char *physx::shdfnd::ReflectionAllocator<physx::Gu::RTreeNodeQ>::getName() [T = physx::Gu::RTreeNodeQ]";
  }
  else
  {
    v6 = "<allocation names disabled>";
  }
  result = (*(uint64_t (**)(uint64_t, uint64_t, const char *, const char *, uint64_t))(*(_QWORD *)(v5 + 24) + 16))(v5 + 24, v4, v6, "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/foundation/include/PsArray.h", 553);
  v8 = result;
  v9 = *(_DWORD *)(a1 + 8);
  v10 = *(__int128 **)a1;
  if (v9)
  {
    v11 = result + 28 * v9;
    v12 = (_OWORD *)result;
    do
    {
      v13 = *v10;
      *(_OWORD *)((char *)v12 + 12) = *(__int128 *)((char *)v10 + 12);
      *v12 = v13;
      v12 = (_OWORD *)((char *)v12 + 28);
      v10 = (__int128 *)((char *)v10 + 28);
    }
    while ((unint64_t)v12 < v11);
    v10 = *(__int128 **)a1;
  }
  if ((*(_DWORD *)(a1 + 12) & 0x80000000) == 0 && v10)
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
  *(_QWORD *)a1 = v8;
  *(_DWORD *)(a1 + 12) = v2;
  return result;
}

uint64_t physx::shdfnd::Array<physx::Gu::RTreeNodeQ,physx::shdfnd::ReflectionAllocator<physx::Gu::RTreeNodeQ>>::growAndPushBack(uint64_t result, __int128 *a2)
{
  uint64_t v3;
  int v4;
  unsigned int v5;
  uint64_t v6;
  const char *v7;
  _OWORD *v8;
  unsigned int v9;
  unint64_t v10;
  __int128 *v11;
  _OWORD *v12;
  __int128 v13;
  unsigned int v14;
  _OWORD *v15;
  __int128 v16;

  v3 = result;
  v4 = *(_DWORD *)(result + 12);
  if ((v4 & 0x7FFFFFFF) != 0)
    v5 = 2 * v4;
  else
    v5 = 1;
  if (v5)
  {
    v6 = physx::shdfnd::Foundation::mInstance;
    if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)physx::shdfnd::Foundation::mInstance + 40))(physx::shdfnd::Foundation::mInstance))
      v7 = "static const char *physx::shdfnd::ReflectionAllocator<physx::Gu::RTreeNodeQ>::getName() [T = physx::Gu::RTreeNodeQ]";
    else
      v7 = "<allocation names disabled>";
    result = (*(uint64_t (**)(uint64_t, uint64_t, const char *, const char *, uint64_t))(*(_QWORD *)(v6 + 24)
                                                                                              + 16))(v6 + 24, 28 * v5, v7, "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/foundation/include/PsArray.h", 553);
    v8 = (_OWORD *)result;
  }
  else
  {
    v8 = 0;
  }
  v9 = *(_DWORD *)(v3 + 8);
  if (v9)
  {
    v10 = (unint64_t)v8 + 28 * v9;
    v11 = *(__int128 **)v3;
    v12 = v8;
    do
    {
      v13 = *v11;
      *(_OWORD *)((char *)v12 + 12) = *(__int128 *)((char *)v11 + 12);
      *v12 = v13;
      v12 = (_OWORD *)((char *)v12 + 28);
      v11 = (__int128 *)((char *)v11 + 28);
    }
    while ((unint64_t)v12 < v10);
    v14 = *(_DWORD *)(v3 + 8);
  }
  else
  {
    v14 = 0;
  }
  v15 = (_OWORD *)((char *)v8 + 28 * v14);
  v16 = *a2;
  *(_OWORD *)((char *)v15 + 12) = *(__int128 *)((char *)a2 + 12);
  *v15 = v16;
  if ((*(_DWORD *)(v3 + 12) & 0x80000000) == 0 && *(_QWORD *)v3)
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
  *(_QWORD *)v3 = v8;
  ++*(_DWORD *)(v3 + 8);
  *(_DWORD *)(v3 + 12) = v5;
  return result;
}

uint64_t physx::findAdjacent(uint64_t a1, uint64_t a2, uint64_t a3, int a4, unsigned int a5, unsigned int a6, float *a7, uint64_t a8, int a9)
{
  unsigned int v9;
  unsigned int v10;
  uint64_t v11;
  unsigned int v12;
  uint64_t v13;
  unsigned int v14;
  uint64_t v15;
  _DWORD *v16;
  unsigned int v17;
  int v18;
  unsigned int v19;
  float v20;
  float v21;
  float v22;
  unsigned int *v23;
  uint64_t v24;
  float v25;
  unsigned int v26;
  float *v27;

  if (a5 >= a6)
    v9 = a6;
  else
    v9 = a5;
  if (a5 <= a6)
    v10 = a6;
  else
    v10 = a5;
  if ((3 * a4) < 2)
  {
    LODWORD(v13) = 0;
  }
  else
  {
    v11 = 0;
    v12 = 3 * a4;
    do
    {
      v13 = (v12 + v11) >> 1;
      v14 = *(_DWORD *)(a8 + 12 * v13);
      if (v14 >= v9 && (v14 != v9 || *(_DWORD *)(a8 + 12 * v13 + 4) > v10))
      {
        v12 = (v12 + v11) >> 1;
        v13 = v11;
      }
      v11 = v13;
    }
    while (v12 - v13 > 1);
  }
  v15 = v13;
  v16 = (_DWORD *)(a8 + 12 * v13 - 12);
  do
  {
    v17 = v15;
    if (!v15)
      break;
    if (*v16 != v9)
      break;
    v18 = v16[1];
    v16 -= 3;
    --v15;
  }
  while (v18 == v10);
  if (3 * a4 <= v17)
    return 0xFFFFFFFFLL;
  v19 = -3 * a4 + v17;
  v20 = *a7;
  v21 = a7[1];
  v22 = a7[2];
  v23 = (unsigned int *)(a8 + 12 * v17 + 8);
  v24 = 0xFFFFFFFFLL;
  v25 = -3.4028e38;
  while (*(v23 - 2) == v9 && *(v23 - 1) == v10)
  {
    v26 = *v23;
    if (*v23 != a9)
    {
      v27 = (float *)(a1
                    + 12
                    * (*(_DWORD *)(a3 + 12 * v26)
                     - (a6
                      + a5)
                     + *(_DWORD *)(a3 + 12 * v26 + 4)
                     + *(_DWORD *)(a3 + 12 * v26 + 8)));
      if ((float)(a7[3] + (float)((float)((float)(v21 * v27[1]) + (float)(*v27 * v20)) + (float)(v27[2] * v22))) >= 0.0)
        return v26 | 0x80000000;
      if ((float)((float)((float)(v21 * *(float *)(a2 + 12 * v26 + 4)) + (float)(v20 * *(float *)(a2 + 12 * v26)))
                 + (float)(v22 * *(float *)(a2 + 12 * v26 + 8))) > v25)
      {
        v25 = (float)((float)(v21 * *(float *)(a2 + 12 * v26 + 4)) + (float)(v20 * *(float *)(a2 + 12 * v26)))
            + (float)(v22 * *(float *)(a2 + 12 * v26 + 8));
        v24 = *v23;
      }
    }
    v23 += 3;
    if (__CFADD__(v19++, 1))
      return v24;
  }
  return v24;
}

void *physx::shdfnd::internal::Stack<physx::shdfnd::ReflectionAllocator<physx::EdgeTriLookup>>::grow(uint64_t a1)
{
  unsigned int v2;
  uint64_t v3;
  uint64_t v4;
  const char *v5;
  void *v6;
  void *result;

  v2 = 2 * *(_DWORD *)(a1 + 8);
  *(_DWORD *)(a1 + 8) = v2;
  if (v2)
  {
    v3 = 4 * v2;
    v4 = physx::shdfnd::Foundation::mInstance;
    if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)physx::shdfnd::Foundation::mInstance + 40))(physx::shdfnd::Foundation::mInstance))
      v5 = "static const char *physx::shdfnd::ReflectionAllocator<physx::EdgeTriLookup>::getName() [T = physx::EdgeTriLookup]";
    else
      v5 = "<allocation names disabled>";
    v6 = (void *)(*(uint64_t (**)(uint64_t, uint64_t, const char *, const char *, uint64_t))(*(_QWORD *)(v4 + 24)
                                                                                                  + 16))(v4 + 24, v3, v5, "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/foundation/include/PsSortInternals.h", 155);
  }
  else
  {
    v6 = 0;
  }
  result = memcpy(v6, *(const void **)(a1 + 16), (4 * *(_DWORD *)(a1 + 4)));
  if (*(_BYTE *)(a1 + 24) && *(_QWORD *)(a1 + 16))
    result = (void *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
  *(_BYTE *)(a1 + 24) = 1;
  *(_QWORD *)(a1 + 16) = v6;
  return result;
}

void physx::RTreeCookerRemap::~RTreeCookerRemap(physx::RTreeCookerRemap *this)
{
  JUMPOUT(0x2276933B8);
}

void physx::RTreeCookerRemap::remap(physx::RTreeCookerRemap *this, unsigned int *a2, int a3, char a4)
{
  *a2 = (2 * a4 + 30) & 0x1E | (32 * a3) | 1;
}

uint64_t physx::shdfnd::Array<physx::PxBounds3V,physx::shdfnd::ReflectionAllocator<physx::PxBounds3V>>::recreate(uint64_t a1, unsigned int a2)
{
  uint64_t v4;
  uint64_t v5;
  const char *v6;
  uint64_t result;
  uint64_t v8;
  uint64_t v9;
  __int128 *v10;
  unint64_t v11;
  _OWORD *v12;
  __int128 v13;
  __int128 v14;

  v4 = 32 * a2;
  v5 = physx::shdfnd::Foundation::mInstance;
  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)physx::shdfnd::Foundation::mInstance + 40))(physx::shdfnd::Foundation::mInstance))
    v6 = "static const char *physx::shdfnd::ReflectionAllocator<physx::PxBounds3V>::getName() [T = physx::PxBounds3V]";
  else
    v6 = "<allocation names disabled>";
  result = (*(uint64_t (**)(uint64_t, uint64_t, const char *, const char *, uint64_t))(*(_QWORD *)(v5 + 24) + 16))(v5 + 24, v4, v6, "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/foundation/include/PsArray.h", 553);
  v8 = result;
  v9 = *(unsigned int *)(a1 + 8);
  v10 = *(__int128 **)a1;
  if ((_DWORD)v9)
  {
    v11 = result + 32 * v9;
    v12 = (_OWORD *)result;
    do
    {
      v13 = *v10;
      v14 = v10[1];
      v10 += 2;
      *v12 = v13;
      v12[1] = v14;
      v12 += 2;
    }
    while ((unint64_t)v12 < v11);
    v10 = *(__int128 **)a1;
  }
  if ((*(_DWORD *)(a1 + 12) & 0x80000000) == 0 && v10)
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
  *(_QWORD *)a1 = v8;
  *(_DWORD *)(a1 + 12) = a2;
  return result;
}

uint64_t physx::shdfnd::Array<physx::PxBounds3V,physx::shdfnd::ReflectionAllocator<physx::PxBounds3V>>::growAndPushBack(uint64_t result, _OWORD *a2)
{
  uint64_t v3;
  int v4;
  unsigned int v5;
  uint64_t v6;
  const char *v7;
  _OWORD *v8;
  uint64_t v9;
  unint64_t v10;
  __int128 *v11;
  _OWORD *v12;
  __int128 v13;
  __int128 v14;
  uint64_t v15;
  _OWORD *v16;
  __int128 v17;

  v3 = result;
  v4 = *(_DWORD *)(result + 12);
  if ((v4 & 0x7FFFFFFF) != 0)
    v5 = 2 * v4;
  else
    v5 = 1;
  if (v5)
  {
    v6 = physx::shdfnd::Foundation::mInstance;
    if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)physx::shdfnd::Foundation::mInstance + 40))(physx::shdfnd::Foundation::mInstance))
      v7 = "static const char *physx::shdfnd::ReflectionAllocator<physx::PxBounds3V>::getName() [T = physx::PxBounds3V]";
    else
      v7 = "<allocation names disabled>";
    result = (*(uint64_t (**)(uint64_t, uint64_t, const char *, const char *, uint64_t))(*(_QWORD *)(v6 + 24)
                                                                                              + 16))(v6 + 24, 32 * v5, v7, "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/foundation/include/PsArray.h", 553);
    v8 = (_OWORD *)result;
  }
  else
  {
    v8 = 0;
  }
  v9 = *(unsigned int *)(v3 + 8);
  if ((_DWORD)v9)
  {
    v10 = (unint64_t)&v8[2 * v9];
    v11 = *(__int128 **)v3;
    v12 = v8;
    do
    {
      v13 = *v11;
      v14 = v11[1];
      v11 += 2;
      *v12 = v13;
      v12[1] = v14;
      v12 += 2;
    }
    while ((unint64_t)v12 < v10);
    v15 = *(unsigned int *)(v3 + 8);
  }
  else
  {
    v15 = 0;
  }
  v16 = &v8[2 * v15];
  v17 = a2[1];
  *v16 = *a2;
  v16[1] = v17;
  if ((*(_DWORD *)(v3 + 12) & 0x80000000) == 0 && *(_QWORD *)v3)
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
  *(_QWORD *)v3 = v8;
  ++*(_DWORD *)(v3 + 8);
  *(_DWORD *)(v3 + 12) = v5;
  return result;
}

void physx::ConvexHullBuilder::~ConvexHullBuilder(physx::ConvexHullBuilder *this)
{
  if (*((_QWORD *)this + 5))
    (*(void (**)(uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
  *((_QWORD *)this + 5) = 0;
  if (*((_QWORD *)this + 6))
    (*(void (**)(uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
  *((_QWORD *)this + 6) = 0;
  if (*(_QWORD *)this)
    (*(void (**)(uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
  *(_QWORD *)this = 0;
  if (*((_QWORD *)this + 1))
    (*(void (**)(uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
  *((_QWORD *)this + 1) = 0;
  if (*((_QWORD *)this + 2))
    (*(void (**)(uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
  *((_QWORD *)this + 2) = 0;
  if (*((_QWORD *)this + 3))
    (*(void (**)(uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
  *((_QWORD *)this + 3) = 0;
  if (*((_QWORD *)this + 4))
    (*(void (**)(uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
  *((_QWORD *)this + 4) = 0;
}

uint64_t physx::ConvexHullBuilder::calculateVertexMapTable(physx::ConvexHullBuilder *this, int a2, char a3)
{
  uint64_t v6;
  uint64_t v7;
  const char *v8;
  uint64_t v9;
  unsigned int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unsigned __int8 *v17;
  unsigned __int8 v18;
  int v19;
  uint64_t v20;
  unsigned __int16 *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char v25;
  uint64_t v26;
  unsigned __int8 *v27;
  int v28;
  char *v29;
  uint64_t v30;
  uint64_t v32;
  unint64_t v33;
  char v34;
  _BYTE v35[256];
  uint64_t v36;

  v36 = *MEMORY[0x24BDAC8D0];
  if (*(_BYTE *)(*((_QWORD *)this + 7) + 38))
  {
    v6 = 3 * *(unsigned __int8 *)(*((_QWORD *)this + 7) + 38);
    v7 = physx::shdfnd::Foundation::mInstance;
    if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)physx::shdfnd::Foundation::mInstance + 40))(physx::shdfnd::Foundation::mInstance))
      v8 = "static const char *physx::shdfnd::ReflectionAllocator<unsigned char>::getName() [T = unsigned char]";
    else
      v8 = "<allocation names disabled>";
    v9 = (*(uint64_t (**)(uint64_t, uint64_t, const char *, const char *, uint64_t))(*(_QWORD *)(v7 + 24) + 16))(v7 + 24, v6, v8, "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/physxcooking/src/convex/ConvexHullBuilder.cpp", 486);
    v10 = *(unsigned __int8 *)(*((_QWORD *)this + 7) + 38);
  }
  else
  {
    v10 = 0;
    v9 = 0;
  }
  *((_QWORD *)this + 4) = v9;
  bzero(v35, v10);
  if (a2)
  {
    v14 = 0;
    do
    {
      v15 = *((_QWORD *)this + 1);
      v16 = v15 + 20 * v14;
      v19 = *(unsigned __int8 *)(v16 + 18);
      v17 = (unsigned __int8 *)(v16 + 18);
      v18 = v19;
      if (v19)
      {
        v20 = 0;
        v21 = (unsigned __int16 *)(v15 + 20 * v14 + 16);
        do
        {
          v22 = *(unsigned __int8 *)(*((_QWORD *)this + 2) + *v21 + v20);
          v23 = v35[v22];
          if (v23 <= 2)
          {
            v24 = *((_QWORD *)this + 4);
            v35[v22] = v23 + 1;
            *(_BYTE *)(v24 + 3 * v22 + v23) = v14;
            v18 = *v17;
          }
          ++v20;
        }
        while (v20 < v18);
      }
      ++v14;
    }
    while (v14 != a2);
    v10 = *(unsigned __int8 *)(*((_QWORD *)this + 7) + 38);
  }
  if (!v10)
    return 1;
  v25 = 0;
  v26 = v10;
  v27 = v35;
  do
  {
    v28 = *v27++;
    v25 |= v28 != 3;
    --v26;
  }
  while (v26);
  if ((v25 & 1) == 0)
    return 1;
  if ((a3 & 1) != 0)
  {
    v29 = "ConvexHullBuilder: convex hull does not have vertex-to-face info! Some of the vertices have less than 3 neighb"
          "or polygons. The vertex is most likely inside a polygon or on an edge between 2 polygons, please remove those vertices.";
    v30 = 517;
  }
  else
  {
    v29 = "ConvexHullBuilder: convex hull does not have vertex-to-face info! Try to use different convex mesh cooking settings.";
    v30 = 515;
  }
  physx::shdfnd::Foundation::error(physx::shdfnd::Foundation::mInstance, 32, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/physxcooking/src/convex/ConvexHullBuilder.cpp", v30, v29, v11, v12, v13, v34);
  if (*(_BYTE *)(*((_QWORD *)this + 7) + 38))
  {
    v32 = 0;
    v33 = 0;
    do
    {
      *(_BYTE *)(*((_QWORD *)this + 4) + v32) = -1;
      *(_BYTE *)(*((_QWORD *)this + 4) + v32 + 1) = -1;
      *(_BYTE *)(*((_QWORD *)this + 4) + v32 + 2) = -1;
      ++v33;
      v32 += 3;
    }
    while (v33 < *(unsigned __int8 *)(*((_QWORD *)this + 7) + 38));
  }
  return 0;
}

uint64_t physx::ConvexHullBuilder::checkHullPolygons(float **this, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, float *a7, uint64_t a8)
{
  float *v8;
  float *v9;
  BOOL v10;
  float *v11;
  unint64_t v12;
  float v13;
  float v14;
  float v15;
  uint64_t v16;
  float *v17;
  float32x2_t v18;
  float v19;
  uint64_t v20;
  float v21;
  float v22;
  float v23;
  float32x2_t v24;
  float32x2_t v25;
  float v26;
  float v27;
  float v28;
  float v29;
  float v30;
  float v31;
  float32x2_t v32;
  float v33;
  uint64_t v34;
  uint64_t v35;
  float *v36;
  float v37;
  float v38;
  float v39;
  float v40;
  float v41;
  float v42;
  float v43;
  float v44;
  uint64_t v45;
  float *v46;
  float *v47;
  uint64_t v48;
  uint64_t v49;
  float *v50;
  uint64_t v51;
  int v52;
  uint64_t v53;
  uint64_t v55;
  char *v56;
  uint64_t v57;
  _QWORD v58[2];
  _DWORD v59[4];
  float32x2_t v60;
  float v61;
  __int32 v62;
  float v63;
  float v64;
  float v65;
  __int32 v66;
  float v67;
  float v68;
  float v69;
  float v70;
  float v71;
  __int32 v72;
  float v73;
  float v74;
  float v75;
  float v76;
  uint64_t v77;

  v77 = *MEMORY[0x24BDAC8D0];
  v8 = *this;
  v9 = this[1];
  if (*this)
    v10 = v9 == 0;
  else
    v10 = 1;
  if (!v10)
  {
    v11 = this[7];
    v12 = *((unsigned __int8 *)v11 + 39);
    if (v12 >= 4)
    {
      v14 = *v8;
      v13 = v8[1];
      v15 = v8[2];
      v16 = *((unsigned __int8 *)v11 + 38);
      if (v16)
      {
        v17 = v8 + 2;
        v18 = (float32x2_t)0x80000000800000;
        v19 = -3.4028e38;
        v20 = v16;
        v21 = v8[2];
        v22 = v8[1];
        v23 = *v8;
        do
        {
          v24 = *(float32x2_t *)(v17 - 2);
          v25 = vabs_f32(v24);
          v18 = (float32x2_t)vbsl_s8((int8x8_t)vcgt_f32(v25, v18), (int8x8_t)v25, (int8x8_t)v18);
          v26 = *v17;
          v17 += 3;
          v27 = v26;
          v28 = fabsf(v26);
          if (v28 > v19)
            v19 = v28;
          if (v24.f32[0] < v14)
            v29 = v24.f32[0];
          else
            v29 = v14;
          if (v24.f32[0] > v23)
            v23 = v24.f32[0];
          else
            v14 = v29;
          if (v24.f32[1] < v13)
            v30 = v24.f32[1];
          else
            v30 = v13;
          if (v24.f32[1] > v22)
            v22 = v24.f32[1];
          else
            v13 = v30;
          if (v27 < v15)
            v31 = v27;
          else
            v31 = v15;
          if (v27 > v21)
            v21 = v27;
          else
            v15 = v31;
          --v20;
        }
        while (v20);
        v32 = vadd_f32(v18, (float32x2_t)vdup_n_s32(0x3CA3D70Au));
        v33 = v19 + 0.02;
        v34 = v16;
      }
      else
      {
        v34 = 0;
        v32 = (float32x2_t)0x80000000800000;
        v33 = -3.4028e38;
        v23 = *v8;
        v22 = v8[1];
        v21 = v8[2];
      }
      v35 = 0;
      v36 = this[2];
      v58[0] = 0;
      v58[1] = v32;
      *(float *)v59 = v33;
      v59[1] = v32.i32[0];
      *(float *)&v59[2] = -v32.f32[1];
      *(float *)&v59[3] = -v33;
      v60 = v32;
      v61 = -v33;
      v62 = v32.i32[0];
      v63 = -v32.f32[1];
      v64 = v33;
      v66 = v32.i32[1];
      v65 = -v32.f32[0];
      v67 = v33;
      v68 = -v32.f32[0];
      v69 = -v32.f32[1];
      v70 = v33;
      v71 = -v32.f32[0];
      v72 = v32.i32[1];
      v73 = -v33;
      v74 = -v32.f32[0];
      v75 = -v32.f32[1];
      v76 = -v33;
      v37 = fabsf(v23);
      v38 = fabsf(v14);
      if (v37 > v38)
        v38 = v37;
      v39 = fabsf(v22);
      v40 = fabsf(v13);
      if (v39 > v40)
        v40 = v39;
      v41 = v38 + v40;
      v42 = fabsf(v21);
      v43 = fabsf(v15);
      if (v42 > v43)
        v43 = v42;
      v44 = fmaxf((float)(v41 + v43) * 0.02, 0.02);
      do
      {
        v45 = 0;
        v46 = &v9[5 * v35];
        v47 = (float *)v59;
        do
        {
          v48 = *((unsigned __int8 *)v58 + v45);
          if (!*((_BYTE *)v58 + v45)
            && (float)((float)((float)((float)(*(v47 - 1) * v46[1]) + (float)(*(v47 - 2) * *v46))
                             + (float)(*v47 * v46[2]))
                     + v46[3]) >= 0.0)
          {
            *((_BYTE *)v58 + v45) = 1;
          }
          ++v45;
          v47 += 3;
        }
        while (v45 != 8);
        if ((_DWORD)v16)
        {
          v49 = 0;
          v50 = &v9[5 * v35];
          v51 = *((unsigned __int8 *)v50 + 18);
          v48 = (uint64_t)(v50 + 4);
          do
          {
            if ((_DWORD)v51)
            {
              a7 = (float *)((char *)v36 + *(unsigned __int16 *)v48);
              a8 = v51;
              while (1)
              {
                v52 = *(unsigned __int8 *)a7;
                a7 = (float *)((char *)a7 + 1);
                if (v52 == v49)
                  break;
                if (!--a8)
                  goto LABEL_49;
              }
            }
            else
            {
LABEL_49:
              a7 = &v8[3 * v49];
              if ((float)((float)((float)((float)(a7[1] * v46[1]) + (float)(*a7 * *v46)) + (float)(a7[2] * v46[2]))
                         + v46[3]) > v44)
              {
                v55 = physx::shdfnd::Foundation::mInstance;
                v56 = "Gu::ConvexMesh::checkHullPolygons: Some hull vertices seems to be too far from hull planes.";
                v57 = 328;
                goto LABEL_57;
              }
            }
            ++v49;
          }
          while (v49 != v34);
        }
        ++v35;
      }
      while (v35 != v12);
      v53 = 0;
      while (*((_BYTE *)v58 + v53))
      {
        if (++v53 == 8)
          return 1;
      }
      v55 = physx::shdfnd::Foundation::mInstance;
      v56 = "Gu::ConvexMesh::checkHullPolygons: Hull seems to have opened volume or do (some) faces have reversed winding?";
      v57 = 339;
LABEL_57:
      physx::shdfnd::Foundation::error(v55, 32, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/physxcooking/src/convex/ConvexHullBuilder.cpp", v57, v56, v48, (uint64_t)a7, a8, v58[0]);
    }
  }
  return 0;
}

float physx::ConvexHullBuilder::computeGeomCenter(uint64_t a1, char a2, uint64_t a3, unsigned int a4, uint64_t a5, float result)
{
  float32x2_t v6;
  unsigned int *v7;
  float v8;
  uint64_t v9;
  float32x2_t v10;
  float v11;
  unsigned int v12;
  unsigned int v13;
  unsigned int v14;
  float32x2_t *v15;
  float32x2_t *v16;
  float32x2_t *v17;
  float v18;
  float v19;
  float v20;
  float v21;
  float v23;
  float32x2_t v25;
  float v31;
  float v32;
  float v33;

  if (a2 && a1)
  {
    v6 = 0;
    *(_QWORD *)a3 = 0;
    *(_DWORD *)(a3 + 8) = 0;
    if (a4)
    {
      v7 = (unsigned int *)(a5 + 8);
      v8 = 0.0;
      v9 = a4;
      v10 = (float32x2_t)vdup_n_s32(0x3EAAAAABu);
      v11 = 0.0;
      do
      {
        v12 = *(v7 - 2);
        v13 = *(v7 - 1);
        v14 = *v7;
        v7 += 3;
        v15 = (float32x2_t *)(a1 + 12 * v12);
        v16 = (float32x2_t *)(a1 + 12 * v13);
        v17 = (float32x2_t *)(a1 + 12 * v14);
        v18 = v15[1].f32[0];
        v19 = v16[1].f32[0];
        v20 = v17[1].f32[0];
        v21 = v18 - v19;
        _S18 = v18 - v20;
        v23 = (float)(v18 + v19) + v20;
        _D16 = vsub_f32(*v15, *v16);
        v25 = vsub_f32(*v15, *v17);
        __asm { FMLA            S19, S18, V16.S[1] }
        v31 = vmlas_n_f32(-(float)(_D16.f32[0] * _S18), v21, v25.f32[0]);
        v32 = vmlas_n_f32((float)-_D16.f32[1] * v25.f32[0], v25.f32[1], _D16.f32[0]);
        _D16.f32[0] = sqrtf((float)((float)(v31 * v31) + (float)(_S19 * _S19)) + (float)(v32 * v32)) * 0.5;
        v6 = vadd_f32(v6, vmul_n_f32(vmul_f32(vadd_f32(vadd_f32(*v15, *v16), *v17), v10), _D16.f32[0]));
        *(float32x2_t *)a3 = v6;
        v8 = v8 + (float)((float)(v23 * 0.33333) * _D16.f32[0]);
        *(float *)(a3 + 8) = v8;
        v11 = v11 + _D16.f32[0];
        --v9;
      }
      while (v9);
    }
    else
    {
      v8 = 0.0;
      v11 = 0.0;
    }
    v33 = 1.0 / v11;
    *(float32x2_t *)a3 = vmul_n_f32(v6, v33);
    result = v8 * v33;
    *(float *)(a3 + 8) = v8 * v33;
  }
  return result;
}

uint64_t physx::ConvexHullBuilder::save(uint64_t a1, void (***a2)(_QWORD, unsigned int *, uint64_t), int a3)
{
  uint64_t v6;
  uint64_t v7;
  __int16 v8;
  int v9;
  unsigned __int8 v10;
  unsigned __int8 v11;
  uint64_t v12;
  unsigned int v13;
  unsigned __int8 *v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unsigned int *v19;
  unsigned int v20;
  unsigned int v21;
  unsigned int v22;
  unsigned int v23;
  unsigned int v24;
  uint64_t i;
  unsigned int v27;
  unsigned int v28;
  unsigned int v29;
  unsigned int v30;
  unsigned int v31;

  v6 = physx::Gu::WriteHeader(67, 76, 72, 76, 9u, a3, (void (***)(_QWORD, _QWORD, _QWORD))a2);
  if ((_DWORD)v6)
  {
    v7 = *(_QWORD *)(a1 + 56);
    v8 = *(_WORD *)(v7 + 36);
    v9 = v8 & 0x7FFF | (*(unsigned __int8 *)(a1 + 64) << 15);
    v10 = *(_BYTE *)(v7 + 38);
    v27 = v10;
    if (a3)
    {
      LOWORD(v27) = 0;
      HIBYTE(v27) = v10;
      BYTE2(v27) = 0;
      (**a2)(a2, &v27, 4);
      LOWORD(v27) = 0;
      HIBYTE(v27) = v8;
      BYTE2(v27) = BYTE1(v9);
    }
    else
    {
      (**a2)(a2, &v27, 4);
      v27 = v9;
    }
    (**a2)(a2, &v27, 4);
    v11 = *(_BYTE *)(*(_QWORD *)(a1 + 56) + 39);
    v27 = v11;
    if (a3)
    {
      LOWORD(v27) = 0;
      HIBYTE(v27) = v11;
      BYTE2(v27) = 0;
    }
    (**a2)(a2, &v27, 4);
    v12 = *(unsigned __int8 *)(*(_QWORD *)(a1 + 56) + 39);
    if (*(_BYTE *)(*(_QWORD *)(a1 + 56) + 39))
    {
      v13 = 0;
      v14 = (unsigned __int8 *)(*(_QWORD *)(a1 + 8) + 18);
      do
      {
        v15 = *v14;
        v14 += 20;
        v13 += v15;
        --v12;
      }
      while (v12);
    }
    else
    {
      v13 = 0;
    }
    v27 = v13;
    if (a3)
      v27 = bswap32(v13);
    (**a2)(a2, &v27, 4);
    physx::writeFloatBuffer(*(_QWORD *)a1, 3 * *(unsigned __int8 *)(*(_QWORD *)(a1 + 56) + 38), a3, (uint64_t (***)(_QWORD, _QWORD, _QWORD))a2);
    v16 = *(_QWORD *)(a1 + 56);
    if (*(_BYTE *)(v16 + 39))
    {
      v17 = 0;
      v18 = 0;
      do
      {
        v19 = (unsigned int *)(*(_QWORD *)(a1 + 8) + v17);
        v20 = *v19;
        v27 = *v19;
        v21 = v19[1];
        v28 = v21;
        v22 = v19[2];
        v29 = v22;
        v23 = v19[3];
        v30 = v23;
        v24 = v19[4];
        v31 = v24;
        if (a3)
        {
          LOBYTE(v27) = HIBYTE(v20);
          HIBYTE(v27) = v20;
          BYTE1(v27) = BYTE2(v20);
          BYTE2(v27) = BYTE1(v20);
          LOBYTE(v28) = HIBYTE(v21);
          HIBYTE(v28) = v21;
          BYTE1(v28) = BYTE2(v21);
          BYTE2(v28) = BYTE1(v21);
          LOBYTE(v29) = HIBYTE(v22);
          HIBYTE(v29) = v22;
          BYTE1(v29) = BYTE2(v22);
          BYTE2(v29) = BYTE1(v22);
          LOBYTE(v30) = HIBYTE(v23);
          HIBYTE(v30) = v23;
          BYTE1(v30) = BYTE2(v23);
          BYTE2(v30) = BYTE1(v23);
          LOBYTE(v31) = BYTE1(v24);
          BYTE1(v31) = v24;
        }
        (**a2)(a2, &v27, 20);
        ++v18;
        v16 = *(_QWORD *)(a1 + 56);
        v17 += 20;
      }
      while (v18 < *(unsigned __int8 *)(v16 + 39));
    }
    if (v13)
    {
      for (i = 0; i != v13; (**a2)(a2, (unsigned int *)(*(_QWORD *)(a1 + 16) + i++), 1))
        ;
      v16 = *(_QWORD *)(a1 + 56);
    }
    (**a2)(a2, *(unsigned int **)(a1 + 24), 2 * (*(_WORD *)(v16 + 36) & 0x7FFFu));
    (**a2)(a2, *(unsigned int **)(a1 + 32), 3 * *(unsigned __int8 *)(*(_QWORD *)(a1 + 56) + 38));
    if (*(_BYTE *)(a1 + 64))
      physx::writeWordBuffer(*(_QWORD *)(a1 + 48), 2 * (*(_WORD *)(*(_QWORD *)(a1 + 56) + 36) & 0x7FFF), a3, (uint64_t (***)(_QWORD, _QWORD, _QWORD))a2);
  }
  return v6;
}

uint64_t physx::ConvexHullLib::cleanupVertices(physx *a1, uint64_t a2, float32x2_t *a3, uint64_t a4, unsigned int *a5, uint64_t a6, float32x2_t *a7, float32x2_t *a8)
{
  uint64_t v14;
  uint64_t (***v16)(_QWORD, _QWORD, float32x2_t *, _QWORD, uint64_t, _QWORD, _DWORD *, double);
  double Quantizer;
  uint64_t (***v18)(_QWORD, uint64_t, float32x2_t *, uint64_t, uint64_t, _QWORD, int *, double);
  uint64_t v19;
  float v20;
  float v21;
  float v22;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  float32x2_t v32;
  float v33;
  float32_t v34;
  unsigned int v35;
  int v36;
  float32x2_t v37;
  float v38;
  uint64_t v39;
  unsigned int v40;
  float *v41;
  float v42;
  float v43;
  float v44;
  float v45;
  float32x2_t *v46;
  uint64_t v47;
  float32x2_t *v48;
  float32_t v49;
  char v51;
  int v52;

  if (!(_DWORD)a2)
    return 0;
  v14 = a2;
  if ((*(_WORD *)(*((_QWORD *)a1 + 1) + 72) & 8) != 0)
  {
    Quantizer = physx::createQuantizer(a1);
    v16 = v18;
    v52 = 0;
    v19 = (**v18)(v18, v14, a3, a4, 1, *(unsigned __int16 *)(*((_QWORD *)a1 + 1) + 76), &v52, Quantizer);
    if (v19)
    {
      LODWORD(v14) = v52;
      a3 = (float32x2_t *)v19;
    }
  }
  else
  {
    v16 = 0;
  }
  v20 = *(float *)(*((_QWORD *)a1 + 2) + 16);
  v21 = v20 * 0.000001;
  v22 = v20 * 0.01;
  *a5 = 0;
  __asm { FMOV            V10.2S, #1.0 }
  *a7 = _D10;
  a7[1].i32[0] = 1065353216;
  if (local::checkPointsAABBValidity(v14, (uint64_t)a3, a4, (float *)a8, (float *)a7, a5, a6, 0, v20 * 0.000001, v20 * 0.01))
  {
    if (v16)
      ((void (*)(uint64_t (***)(_QWORD, _QWORD, float32x2_t *, _QWORD, uint64_t, _QWORD, _DWORD *, double)))(*v16)[3])(v16);
    return 1;
  }
  v32 = vdiv_f32(_D10, *a7);
  v33 = 1.0 / a7[1].f32[0];
  v34 = v33 * a8[1].f32[0];
  *a8 = vmul_f32(v32, *a8);
  a8[1].f32[0] = v34;
  v35 = *a5;
  if ((_DWORD)v14)
  {
    v36 = 0;
    do
    {
      v37 = vmul_f32(v32, *a3);
      v38 = v33 * a3[1].f32[0];
      if (v35)
      {
        v39 = 0;
        v40 = v35;
        v41 = (float *)(a6 + 8);
        while (1)
        {
          v42 = *(v41 - 2);
          if (vabds_f32(v37.f32[0], v42) < 0.0001)
          {
            v43 = *(v41 - 1);
            if (vabds_f32(v37.f32[1], v43) < 0.0001 && vabds_f32(v38, *v41) < 0.0001)
              break;
          }
          ++v39;
          v41 += 3;
          if (v35 == v39)
            goto LABEL_24;
        }
        v44 = a8->f32[1];
        v45 = a8[1].f32[0];
        if ((float)((float)((float)((float)(v37.f32[1] - v44) * (float)(v37.f32[1] - v44))
                           + (float)((float)(v37.f32[0] - a8->f32[0]) * (float)(v37.f32[0] - a8->f32[0])))
                   + (float)((float)(v38 - v45) * (float)(v38 - v45))) > (float)((float)((float)((float)(v43 - v44)
                                                                                               * (float)(v43 - v44))
                                                                                       + (float)((float)(v42 - a8->f32[0])
                                                                                               * (float)(v42 - a8->f32[0])))
                                                                               + (float)((float)(*v41 - v45)
                                                                                       * (float)(*v41 - v45))))
        {
          *((float32x2_t *)v41 - 1) = v37;
          *v41 = v38;
        }
      }
      else
      {
        LODWORD(v39) = 0;
      }
      if ((_DWORD)v39 == v35)
      {
        v40 = v35;
LABEL_24:
        v46 = (float32x2_t *)(a6 + 12 * v40);
        *v46 = v37;
        v46[1].f32[0] = v38;
        *a5 = ++v35;
      }
      a3 = (float32x2_t *)((char *)a3 + a4);
      ++v36;
    }
    while (v36 != (_DWORD)v14);
  }
  if (v35 < 4)
  {
    physx::shdfnd::Foundation::error(physx::shdfnd::Foundation::mInstance, 32, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/physxcooking/src/convex/ConvexHullLib.cpp", 277, "ConvexHullLib::cleanupVertices: Less than four valid vertices were found. Provide at least four valid (e.g. each at a different position) vertices.", v28, v29, v30, v51);
    return 0;
  }
  v47 = 0;
  do
  {
    v48 = (float32x2_t *)(a6 + v47);
    v49 = *(float *)(a6 + v47 + 8) * a7[1].f32[0];
    *v48 = vmul_f32(*(float32x2_t *)(a6 + v47), *a7);
    v48[1].f32[0] = v49;
    v47 += 12;
  }
  while (12 * v35 != v47);
  v31 = 1;
  local::checkPointsAABBValidity(v35, a6, 0xCu, (float *)a8, (float *)a7, a5, a6, 1, v21, v22);
  if (v16)
    ((void (*)(uint64_t (***)(_QWORD, _QWORD, float32x2_t *, _QWORD, uint64_t, _QWORD, _DWORD *, double)))(*v16)[3])(v16);
  return v31;
}

uint64_t local::checkPointsAABBValidity(unsigned int a1, uint64_t a2, unsigned int a3, float *a4, float *a5, unsigned int *a6, uint64_t a7, int a8, float a9, float a10)
{
  float *v10;
  float v11;
  float v12;
  unsigned int v13;
  float v14;
  float v15;
  float v16;
  float v17;
  float v18;
  float v19;
  float v20;
  float v21;
  float v22;
  float v23;
  float v24;
  float v25;
  float v26;
  float v31;
  float v34;
  float v35;
  float v36;
  float v37;
  unsigned int v38;
  float v39;
  float *v40;
  float v41;
  float v42;
  float *v43;
  float v44;
  float *v45;
  float *v46;
  float *v47;
  float *v48;
  float *v49;
  float *v50;
  uint64_t result;

  if (a1)
  {
    v10 = (float *)(a2 + 8);
    v11 = 8.5071e37;
    v12 = -8.5071e37;
    v13 = a1;
    v14 = -8.5071e37;
    v15 = -8.5071e37;
    v16 = 8.5071e37;
    v17 = 8.5071e37;
    do
    {
      v18 = *(v10 - 2);
      v19 = *(v10 - 1);
      if (v17 >= v18)
        v17 = *(v10 - 2);
      if (v16 >= v19)
        v16 = *(v10 - 1);
      if (v11 >= *v10)
        v11 = *v10;
      if (v15 <= v18)
        v15 = *(v10 - 2);
      if (v14 <= v19)
        v14 = *(v10 - 1);
      if (v12 <= *v10)
        v12 = *v10;
      v10 = (float *)((char *)v10 + a3);
      --v13;
    }
    while (v13);
  }
  else
  {
    v15 = -8.5071e37;
    v17 = 8.5071e37;
    v16 = 8.5071e37;
    v11 = 8.5071e37;
    v14 = -8.5071e37;
    v12 = -8.5071e37;
  }
  v20 = v15 - v17;
  v21 = v14 - v16;
  v22 = v12 - v11;
  v23 = v11 + v12;
  v24 = (float)(v17 + v15) * 0.5;
  v25 = (float)(v16 + v14) * 0.5;
  v26 = v23 * 0.5;
  *a4 = v24;
  a4[1] = v25;
  a4[2] = v26;
  if (v20 < a9 || v21 < a9 || a1 < 3 || v22 < a9)
  {
    if (v20 >= 3.4028e38 || v20 <= a9)
      v31 = 3.4028e38;
    else
      v31 = v20;
    if (v21 < v31 && v21 > a9)
      v31 = v21;
    if (v22 >= v31 || v22 <= a9)
      v34 = v31;
    else
      v34 = v22;
    v35 = a10;
    v36 = a10;
    if (v34 != 3.4028e38)
    {
      a10 = v20 * 0.5;
      v36 = v34 * 0.05;
      if (v20 < a9)
        a10 = v34 * 0.05;
      v35 = v21 * 0.5;
      if (v21 < a9)
        v35 = v34 * 0.05;
      if (v22 >= a9)
        v36 = v22 * 0.5;
    }
    v37 = v24 - a10;
    v38 = *a6;
    v39 = v25 - v35;
    if (a8)
      v38 = 0;
    v40 = (float *)(a7 + 12 * v38);
    *v40 = v37;
    v40[1] = v39;
    v41 = v26 - v36;
    v40[2] = v26 - v36;
    v42 = v24 + a10;
    v43 = (float *)(a7 + 12 * (v38 + 1));
    *v43 = v42;
    v43[1] = v39;
    v44 = v26 + v36;
    v43[2] = v41;
    v45 = (float *)(a7 + 12 * (v38 + 2));
    *v45 = v42;
    v45[1] = v25 + v35;
    v45[2] = v41;
    v46 = (float *)(a7 + 12 * (v38 + 3));
    *v46 = v37;
    v46[1] = v25 + v35;
    v46[2] = v41;
    v47 = (float *)(a7 + 12 * (v38 + 4));
    *v47 = v37;
    v47[1] = v39;
    v47[2] = v44;
    v48 = (float *)(a7 + 12 * (v38 + 5));
    *v48 = v42;
    v48[1] = v39;
    v48[2] = v44;
    v49 = (float *)(a7 + 12 * (v38 + 6));
    *v49 = v42;
    v49[1] = v25 + v35;
    v49[2] = v44;
    *a6 = v38 + 8;
    v50 = (float *)(a7 + 12 * (v38 + 7));
    *v50 = v37;
    v50[1] = v25 + v35;
    result = 1;
    v50[2] = v44;
  }
  else
  {
    result = 0;
    *a5 = v20;
    a5[1] = v21;
    a5[2] = v22;
  }
  return result;
}

uint64_t physx::shdfnd::Array<physx::ConvexHull::HalfEdge,physx::shdfnd::ReflectionAllocator<physx::ConvexHull::HalfEdge>>::resize(uint64_t result, unsigned int a2, _DWORD *a3)
{
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  _DWORD *v8;

  v5 = result;
  if ((*(_DWORD *)(result + 12) & 0x7FFFFFFFu) < a2)
    result = physx::shdfnd::Array<physx::ConvexHull::HalfEdge,physx::shdfnd::ReflectionAllocator<physx::ConvexHull::HalfEdge>>::recreate(result, a2);
  v6 = *(unsigned int *)(v5 + 8);
  if (v6 < a2)
  {
    v7 = *(_QWORD *)v5 + 4 * a2;
    v8 = (_DWORD *)(*(_QWORD *)v5 + 4 * v6);
    do
      *v8++ = *a3;
    while ((unint64_t)v8 < v7);
  }
  *(_DWORD *)(v5 + 8) = a2;
  return result;
}

uint64_t physx::shdfnd::Array<physx::PxPlane,physx::shdfnd::ReflectionAllocator<physx::PxPlane>>::resize(uint64_t result, unsigned int a2, _OWORD *a3)
{
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  _OWORD *v8;

  v5 = result;
  if ((*(_DWORD *)(result + 12) & 0x7FFFFFFFu) < a2)
    result = physx::shdfnd::Array<physx::PxPlane,physx::shdfnd::ReflectionAllocator<physx::PxPlane>>::recreate(result, a2);
  v6 = *(unsigned int *)(v5 + 8);
  if (v6 < a2)
  {
    v7 = *(_QWORD *)v5 + 16 * a2;
    v8 = (_OWORD *)(*(_QWORD *)v5 + 16 * v6);
    do
      *v8++ = *a3;
    while ((unint64_t)v8 < v7);
  }
  *(_DWORD *)(v5 + 8) = a2;
  return result;
}

double physx::computeVolumeIntegralsEberlySIMD(uint64_t a1, uint64_t a2, uint64_t a3, double a4, double a5, double a6, double a7, double a8, float32x4_t a9)
{
  uint64_t v9;
  uint64_t v10;
  float32x4_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  float32x4_t v15;
  float32x2_t v16;
  float32x4_t v17;
  float32x4_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  float32x4_t v24;
  int8x8_t v25;
  float32x4_t v26;
  float32x4_t v27;
  float32x4_t v28;
  float32x4_t v29;
  uint64_t v30;
  float32x4_t v31;
  float32x4_t v32;
  int8x8_t v33;
  float32x4_t v34;
  float32x4_t v35;
  int8x16_t v36;
  int8x8_t v37;
  float32x4_t v38;
  float32x4_t v39;
  float32x4_t v40;
  int8x16_t v41;
  float32x4_t v42;
  float32x4_t v43;
  float32x4_t v44;
  float32x4_t v45;
  float32x4_t v46;
  float32x4_t v47;
  float32x4_t v48;
  float32x4_t v49;
  float32x4_t v50;
  float32x2_t v51;
  float32x2_t v52;
  int v53;
  float32x4_t v54;
  int8x16_t v55;
  double v57;
  double v58;
  double v59;
  double v60;
  float v69;
  double v70;
  float64x2_t v71;
  float64x2_t v72;
  float v73;
  float v74;
  float v75;
  float v76;
  float v77;
  float64_t v78;
  double v79;

  v9 = *(unsigned int *)(a1 + 40);
  if ((_DWORD)v9)
  {
    v10 = 0;
    v11.i64[0] = *(_QWORD *)a3;
    v11.i64[1] = *(unsigned int *)(a3 + 8);
    v12 = *(_QWORD *)(a1 + 8);
    v13 = *(_QWORD *)(a1 + 32);
    v14 = *(_QWORD *)(a1 + 56);
    v15 = 0uLL;
    v16 = 0;
    a9.i32[0] = 0;
    v17 = 0uLL;
    v18 = 0uLL;
    do
    {
      v19 = v13 + 20 * v10;
      v20 = *(unsigned __int8 *)(v19 + 18) - 2;
      if (*(_BYTE *)(v19 + 18) != 2)
      {
        v21 = 0;
        v22 = *(unsigned __int16 *)(v19 + 16);
        v23 = v14 + v22;
        v27 = *(float32x4_t *)(v13 + 20 * v10);
        v24 = vsubq_f32(*(float32x4_t *)(v12 + 12 * *(unsigned __int8 *)(v14 + v22)), v11);
        v25 = (int8x8_t)vextq_s8((int8x16_t)v24, (int8x16_t)v24, 8uLL).u64[0];
        *(int8x8_t *)v26.f32 = vext_s8(*(int8x8_t *)v24.f32, v25, 4uLL);
        v26.i64[1] = __PAIR64__(v25.u32[1], v24.u32[0]);
        v27.i32[3] = 0;
        v28 = vmulq_f32(v24, v24);
        v29 = vmulq_f32(v24, v28);
        v30 = v14 + 1 + v22;
        do
        {
          v31 = vsubq_f32(*(float32x4_t *)(v12 + 12 * *(unsigned __int8 *)(v30 + v21)), v11);
          v32 = vsubq_f32(*(float32x4_t *)(v12 + 12 * *(unsigned __int8 *)(v23 + (v21 + 2))), v11);
          v33 = (int8x8_t)vextq_s8((int8x16_t)v31, (int8x16_t)v31, 8uLL).u64[0];
          *(int8x8_t *)v34.f32 = vext_s8(*(int8x8_t *)v31.f32, v33, 4uLL);
          v35 = vsubq_f32(v31, v24);
          v36 = (int8x16_t)vsubq_f32(v32, v24);
          v37 = (int8x8_t)vmls_f32(vmul_f32(*(float32x2_t *)v35.f32, (float32x2_t)*(_OWORD *)&vextq_s8(v36, v36, 4uLL)), (float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v35, (int8x16_t)v35, 4uLL), *(float32x2_t *)v36.i8);
          *(int8x8_t *)v35.f32 = vext_s8(v37, (int8x8_t)vmls_f32(vmul_f32((float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v35, (int8x16_t)v35, 8uLL), *(float32x2_t *)v36.i8), *(float32x2_t *)v35.f32, (float32x2_t)*(_OWORD *)&vextq_s8(v36, v36, 8uLL)), 4uLL);
          v35.i64[1] = v37.u32[0];
          v38 = v35;
          v38.i32[3] = 0;
          v39 = vmulq_f32(v27, v38);
          v40 = vpaddq_f32(v39, v39);
          *(float32x2_t *)v40.f32 = vpadd_f32(*(float32x2_t *)v40.f32, *(float32x2_t *)v40.f32);
          v41 = (int8x16_t)vdupq_lane_s32((int32x2_t)*(_OWORD *)&vmvnq_s8((int8x16_t)vcgtq_f32(a9, v40)), 0);
          v42 = (float32x4_t)vbslq_s8(v41, (int8x16_t)v32, (int8x16_t)v31);
          v43 = (float32x4_t)vbslq_s8(v41, (int8x16_t)v31, (int8x16_t)v32);
          v31.i32[1] = v33.i32[1];
          v34.i64[1] = v31.i64[0];
          v31.i64[0] = vextq_s8((int8x16_t)v32, (int8x16_t)v32, 8uLL).u64[0];
          *(int8x8_t *)v44.f32 = vext_s8(*(int8x8_t *)v32.f32, *(int8x8_t *)v31.f32, 4uLL);
          v32.i32[1] = v31.i32[1];
          v44.i64[1] = v32.i64[0];
          v45 = (float32x4_t)vbslq_s8(v41, (int8x16_t)v35, (int8x16_t)vnegq_f32(v35));
          v46 = vaddq_f32(v24, v43);
          v47 = vaddq_f32(v42, v46);
          v48 = vmlaq_f32(v28, v46, v43);
          v49 = vmlaq_f32(v29, v48, v43);
          v50 = vmlaq_f32(v48, v47, v42);
          v16 = vmla_n_f32(v16, (float32x2_t)vdup_lane_s32(*(int32x2_t *)v47.f32, 0), v45.f32[0]);
          v15 = vmlaq_f32(v15, v50, v45);
          v17 = vmlaq_f32(v17, vmlaq_f32(v49, v50, v42), v45);
          v18 = vmlaq_f32(v18, vmlaq_f32(vmlaq_f32(vmulq_f32(vmlaq_f32(v50, vaddq_f32(v24, v47), v24), v26), vmlaq_f32(v50, vaddq_f32(v43, v47), v43), v34), vmlaq_f32(v50, vaddq_f32(v42, v47), v42), v44), v45);
          ++v21;
        }
        while (v20 != v21);
      }
      ++v10;
    }
    while (v10 != v9);
  }
  else
  {
    v16 = 0;
    v18 = 0uLL;
    v17 = 0uLL;
    v15 = 0uLL;
  }
  v51 = vmul_f32(v16, (float32x2_t)vdup_n_s32(0x3E2AAAABu));
  v52 = vrecpe_f32(v51);
  v53 = 4;
  do
  {
    v52 = vmul_f32(v52, vrecps_f32(v51, v52));
    --v53;
  }
  while (v53);
  v54 = vmulq_f32(v17, (float32x4_t)vdupq_n_s32(0x3C888889u));
  v55 = (int8x16_t)vmulq_f32(v18, (float32x4_t)vdupq_n_s32(0x3C088889u));
  _Q0 = vmulq_n_f32(vmulq_f32(v15, (float32x4_t)vdupq_n_s32(0x3D2AAAABu)), v52.f32[0]);
  *(float32x4_t *)a2 = _Q0;
  v57 = (float)(v54.f32[1] + v54.f32[2]);
  *(double *)(a2 + 16) = v51.f32[0];
  *(double *)(a2 + 24) = v57;
  v58 = (float)(v54.f32[0] + v54.f32[2]);
  v59 = vaddv_f32(*(float32x2_t *)v54.f32);
  v60 = (float)-*(float *)&v55.i32[1];
  *(double *)(a2 + 80) = v60;
  *(double *)(a2 + 88) = v59;
  *(double *)(a2 + 64) = v60;
  _S1 = _Q0.i32[2];
  _S4 = _Q0.i32[1];
  __asm { FMLA            S16, S4, V0.S[1] }
  *(double *)(a2 + 96) = v57 - (float)(_S16 * v51.f32[0]);
  __asm { FMLA            S17, S1, V0.S[2] }
  v69 = vmlas_n_f32(vmuls_lane_f32(_Q0.f32[1], *(float32x2_t *)_Q0.f32, 1), _Q0.f32[0], _Q0.f32[0]);
  v70 = v60 + vmuls_lane_f32(vmuls_lane_f32(v51.f32[0], *(float32x2_t *)_Q0.f32, 1), _Q0, 2);
  *(double *)(a2 + 152) = v70;
  *(double *)(a2 + 160) = v59 - (float)(v69 * v51.f32[0]);
  *(double *)(a2 + 128) = v58 - (float)(_S17 * v51.f32[0]);
  *(double *)(a2 + 136) = v70;
  v71 = vcvtq_f64_f32(vneg_f32((float32x2_t)vzip1_s32(*(int32x2_t *)v55.i8, (int32x2_t)*(_OWORD *)&vextq_s8(v55, v55, 8uLL))));
  *(float64_t *)(a2 + 48) = v71.f64[0];
  *(double *)(a2 + 56) = v58;
  *(float64x2_t *)(a2 + 32) = v71;
  *(float64_t *)(a2 + 72) = v71.f64[1];
  v72 = vaddq_f64(v71, vcvtq_f64_f32(vmul_f32((float32x2_t)vrev64_s32(*(int32x2_t *)_Q0.f32), vmul_n_f32((float32x2_t)vzip1_s32(*(int32x2_t *)_Q0.f32, (int32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)_Q0, (int8x16_t)_Q0, 8uLL)), v51.f32[0]))));
  *(float64_t *)(a2 + 144) = v72.f64[1];
  *(float64_t *)(a2 + 120) = v72.f64[0];
  *(float64x2_t *)(a2 + 104) = v72;
  v73 = *(float *)(a3 + 4);
  v74 = *(float *)(a3 + 8);
  if (*(float *)a3 != 0.0 || v73 != 0.0 || v74 != 0.0)
  {
    v75 = _Q0.f32[0] + *(float *)a3;
    v76 = _Q0.f32[1] + v73;
    v77 = _Q0.f32[2] + v74;
    *(double *)(a2 + 88) = v59 - (float)(v51.f32[0] * (float)(v69 - (float)((float)(v76 * v76) + (float)(v75 * v75))));
    v78 = v71.f64[0] + (float)(v51.f32[0] * (float)((float)(_Q0.f32[0] * _Q0.f32[1]) - (float)(v75 * v76)));
    *(double *)(a2 + 24) = v57 - (float)(v51.f32[0] * (float)(_S16 - (float)((float)(v77 * v77) + (float)(v76 * v76))));
    *(float64_t *)(a2 + 32) = v78;
    v79 = v60 + (float)(v51.f32[0] * (float)((float)(_Q0.f32[1] * _Q0.f32[2]) - (float)(v76 * v77)));
    *(double *)(a2 + 56) = v58 - (float)(v51.f32[0] * (float)(_S17 - (float)((float)(v75 * v75) + (float)(v77 * v77))));
    *(double *)(a2 + 64) = v79;
    *(double *)_Q0.i64 = v71.f64[1]
                       + (float)(v51.f32[0] * (float)((float)(_Q0.f32[2] * _Q0.f32[0]) - (float)(v77 * v75)));
    *(_QWORD *)(a2 + 72) = _Q0.i64[0];
    *(double *)(a2 + 80) = v79;
    *(_QWORD *)(a2 + 40) = _Q0.i64[0];
    *(float64_t *)(a2 + 48) = v78;
    *(float *)a2 = v75;
    *(float *)(a2 + 4) = v76;
    *(float *)(a2 + 8) = v77;
  }
  return *(double *)_Q0.i64;
}

uint64_t physx::computeVolumeIntegralsEberly(uint64_t result, uint64_t a2, float *a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  double v7;
  double v8;
  uint64_t v9;
  double v10;
  double v11;
  double v12;
  double v13;
  double v14;
  double v15;
  double v16;
  double v17;
  uint64_t v18;
  unsigned int v19;
  unsigned __int8 *v20;
  float *v21;
  float *v22;
  float v23;
  float v24;
  double v25;
  double v26;
  double v27;
  double v28;
  double v29;
  double v30;
  unsigned int i;
  float *v32;
  float v33;
  float v34;
  float v35;
  float v36;
  float v37;
  float v38;
  float v39;
  float v40;
  float v41;
  float v42;
  float v43;
  float v44;
  double v45;
  double v46;
  double v47;
  double v48;
  double v49;
  double v50;
  double v51;
  double v52;
  double v53;
  double v54;
  double v55;
  double v56;
  double v57;
  double v58;
  double v59;
  double v60;
  double v61;
  double v62;
  double v63;
  double v64;
  uint64_t v65;
  double v66;
  double v68;
  float v69;
  __int128 v70;
  double v71;
  double v72;
  double v73;
  __int128 v74;
  double v75;
  double v76;
  double v77;
  float v84;
  float v85;
  double v86;
  double v87;
  double v88;
  float v89;
  float v90;
  float v91;
  float v92;
  float v93;
  double v94;
  double v95;
  double v96;
  float v97;
  float v98;
  float v99;
  float v100;
  float v101;
  float v102;
  float v103;
  double v104;
  float64x2_t v105;
  __int128 v106;
  __int128 v107;
  __int128 v108;
  double v109;
  uint64_t v110;

  v110 = *MEMORY[0x24BDAC8D0];
  v109 = 0.0;
  v107 = 0u;
  v108 = 0u;
  v105 = 0u;
  v106 = 0u;
  v3 = *(unsigned int *)(result + 40);
  if ((_DWORD)v3)
  {
    v4 = 0;
    v5 = *(_QWORD *)(result + 8);
    v6 = *(_QWORD *)(result + 32);
    v7 = 0.0;
    v8 = 0.0;
    v9 = *(_QWORD *)(result + 56);
    v10 = 0.0;
    v11 = 0.0;
    v12 = 0.0;
    v13 = 0.0;
    v102 = a3[1];
    v103 = *a3;
    v14 = 0.0;
    v15 = 0.0;
    v101 = a3[2];
    v16 = 0.0;
    v17 = 0.0;
    do
    {
      v18 = v6 + 20 * v4;
      v19 = *(unsigned __int8 *)(v18 + 18);
      if (v19 != 2)
      {
        v20 = (unsigned __int8 *)(v9 + *(unsigned __int16 *)(v18 + 16));
        v21 = (float *)(v6 + 20 * v4);
        v22 = (float *)(v5 + 12 * *v20);
        v23 = v22[1] - v102;
        v24 = v22[2] - v101;
        v98 = v21[1];
        v99 = *v21;
        v97 = v21[2];
        v100 = *v22 - v103;
        v25 = v100;
        v26 = v23;
        v27 = v24;
        v28 = v25 * v25;
        v29 = v26 * v26;
        v30 = v27 * v27;
        for (i = 2; i != v19; ++i)
        {
          v32 = (float *)(v5 + 12 * v20[(i - 1) % v19]);
          v33 = *v32 - v103;
          v34 = v32[1] - v102;
          v35 = v32[2] - v101;
          result = v5 + 12 * v20[i % v19];
          v36 = *(float *)result - v103;
          v37 = *(float *)(result + 4) - v102;
          v38 = *(float *)(result + 8) - v101;
          v39 = (float)((float)(v34 - v23) * (float)(v38 - v24)) - (float)((float)(v35 - v24) * (float)(v37 - v23));
          v40 = (float)((float)(v35 - v24) * (float)(v36 - v100)) - (float)((float)(v33 - v100) * (float)(v38 - v24));
          v41 = (float)((float)(v33 - v100) * (float)(v37 - v23)) - (float)((float)(v34 - v23) * (float)(v36 - v100));
          if ((float)((float)((float)(v98 * v40) + (float)(v39 * v99)) + (float)(v41 * v97)) >= 0.0)
          {
            v42 = *(float *)result - v103;
            v43 = *(float *)(result + 4) - v102;
            v44 = *(float *)(result + 8) - v101;
            v36 = v33;
            v37 = v34;
            v38 = v35;
          }
          else
          {
            v39 = -v39;
            v40 = -v40;
            v41 = -v41;
            v42 = v33;
            v43 = v34;
            v44 = v35;
          }
          v45 = v36;
          v46 = v42;
          v47 = v39;
          v48 = v25 + v45 + v46;
          v49 = v28 + v45 * (v25 + v45);
          v50 = v49 + v46 * v48;
          v17 = v17 + v47 * v48;
          v16 = v16 + v47 * v50;
          v13 = v13 + v47 * (v49 * v45 + v25 * v28 + v46 * v50);
          v51 = v37;
          v52 = (v50 + v45 * (v48 + v45)) * v37 + v26 * (v50 + v25 * (v48 + v25));
          v53 = v26 + v37;
          v54 = v52 + v43 * (v50 + v46 * (v48 + v46));
          v55 = v53 + v43;
          v56 = v29 + v51 * v53;
          v10 = v10 + v47 * v54;
          v57 = v56 + v43 * v55;
          v58 = v40;
          v15 = v15 + v58 * v57;
          v12 = v12 + v58 * (v56 * v51 + v26 * v29 + v43 * v57);
          v59 = v44;
          v60 = v27 + v38;
          v61 = (v57 + v51 * (v55 + v51)) * v38 + v27 * (v57 + v26 * (v55 + v26)) + v59 * (v57 + v43 * (v55 + v43));
          v62 = v60 + v59;
          v63 = v30 + v38 * v60;
          v8 = v8 + v58 * v61;
          v64 = v63 + v59 * v62;
          v14 = v14 + v41 * v64;
          v11 = v11 + v41 * (v63 * v38 + v27 * v30 + v59 * v64);
          v7 = v7
             + v41
             * ((v64 + v38 * (v62 + v38)) * v45 + v25 * (v64 + v27 * (v62 + v27)) + v46 * (v64 + v59 * (v62 + v59)));
        }
      }
      ++v4;
    }
    while (v4 != v3);
    v105.f64[0] = v16;
    v105.f64[1] = v15;
    *(double *)&v106 = v14;
    *((double *)&v106 + 1) = v13;
    *(double *)&v107 = v12;
    *((double *)&v107 + 1) = v11;
    *(double *)&v108 = v10;
    *((double *)&v108 + 1) = v8;
    v109 = v7;
  }
  else
  {
    v17 = 0.0;
  }
  v65 = 0;
  v104 = v17;
  do
  {
    *(float64x2_t *)((char *)&v104 + v65 * 16) = vmulq_f64((float64x2_t)xmmword_2261AACC8[v65], *(float64x2_t *)((char *)&v104 + v65 * 16));
    ++v65;
  }
  while (v65 != 5);
  v66 = v104;
  _D1 = vcvt_f32_f64(vdivq_f64(v105, (float64x2_t)vdupq_lane_s64(*(uint64_t *)&v104, 0)));
  *(float32x2_t *)a2 = _D1;
  v68 = *((double *)&v106 + 1);
  v69 = *(double *)&v106 / v66;
  *(float *)(a2 + 8) = v69;
  v70 = v107;
  v71 = *(double *)&v107 + *((double *)&v107 + 1);
  *(double *)(a2 + 16) = v66;
  *(double *)(a2 + 24) = v71;
  v72 = *((double *)&v70 + 1) + v68;
  v73 = *(double *)&v70 + v68;
  v74 = v108;
  v75 = -*(double *)&v108;
  *(double *)(a2 + 48) = -*(double *)&v108;
  *(double *)(a2 + 56) = *((double *)&v70 + 1) + v68;
  *(double *)(a2 + 80) = -*((double *)&v74 + 1);
  *(double *)(a2 + 88) = *(double *)&v70 + v68;
  v76 = v109;
  v77 = -v109;
  *(double *)(a2 + 64) = -*((double *)&v74 + 1);
  *(double *)(a2 + 72) = v77;
  *(double *)(a2 + 32) = v75;
  *(double *)(a2 + 40) = v77;
  _S7 = _D1.i32[1];
  __asm { FMLA            S18, S7, V1.S[1] }
  v84 = vmul_f32(_D1, _D1).f32[0] + (float)(v69 * v69);
  v85 = vmlas_n_f32(vmuls_lane_f32(_D1.f32[1], _D1, 1), _D1.f32[0], _D1.f32[0]);
  v86 = -(*(double *)&v74 - v66 * vmuls_lane_f32(_D1.f32[0], _D1, 1));
  v87 = -(*((double *)&v74 + 1) - v66 * vmuls_lane_f32(v69, _D1, 1));
  *(double *)(a2 + 96) = v71 - v66 * _S18;
  *(double *)(a2 + 104) = v86;
  *(double *)(a2 + 128) = v72 - v66 * v84;
  *(double *)(a2 + 136) = v87;
  v88 = -(v76 - v66 * (float)(v69 * _D1.f32[0]));
  *(double *)(a2 + 152) = v87;
  *(double *)(a2 + 160) = v73 - v66 * v85;
  *(double *)(a2 + 144) = v88;
  *(double *)(a2 + 112) = v88;
  *(double *)(a2 + 120) = v86;
  v89 = a3[1];
  v90 = a3[2];
  if (*a3 != 0.0 || v89 != 0.0 || v90 != 0.0)
  {
    v91 = *a3 + _D1.f32[0];
    v92 = v89 + _D1.f32[1];
    v93 = v90 + v69;
    *(double *)(a2 + 88) = v73 + -v66 * (float)(v85 - (float)((float)(v92 * v92) + (float)(v91 * v91)));
    v94 = v75 + v66 * (float)((float)(_D1.f32[0] * _D1.f32[1]) - (float)(v91 * v92));
    *(double *)(a2 + 24) = v71 + -v66 * (float)(_S18 - (float)((float)(v93 * v93) + (float)(v92 * v92)));
    *(double *)(a2 + 32) = v94;
    v95 = v66 * (float)((float)(_D1.f32[1] * v69) - (float)(v92 * v93)) - *((double *)&v74 + 1);
    *(double *)(a2 + 56) = v72 + -v66 * (float)(v84 - (float)((float)(v91 * v91) + (float)(v93 * v93)));
    *(double *)(a2 + 64) = v95;
    v96 = v77 + v66 * (float)((float)(v69 * _D1.f32[0]) - (float)(v93 * v91));
    *(double *)(a2 + 72) = v96;
    *(double *)(a2 + 80) = v95;
    *(double *)(a2 + 40) = v96;
    *(double *)(a2 + 48) = v94;
    *(float *)a2 = v91;
    *(float *)(a2 + 4) = v92;
    *(float *)(a2 + 8) = v93;
  }
  return result;
}

void physx::ConvexMeshBuilder::~ConvexMeshBuilder(physx::ConvexMeshBuilder *this)
{
  uint64_t v2;

  v2 = *((_QWORD *)this + 19);
  if (v2)
  {
    physx::BigConvexData::~BigConvexData(*((physx::BigConvexData **)this + 19));
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24, v2);
  }
  *((_QWORD *)this + 19) = 0;
  physx::ConvexPolygonsBuilder::~ConvexPolygonsBuilder(this);
}

uint64_t physx::ConvexMeshBuilder::build(float32x4_t *a1, uint64_t a2, unsigned int a3, char a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int v8;
  uint64_t result;
  __int16 v14;
  unsigned int v15;
  int v16;
  unsigned int v17;
  float32x4_t v18;
  float32x4_t v19;
  float32x4_t v20;
  float32x4_t v21;
  float32x2_t v22;
  int8x16_t v23;
  float32x2_t v24;

  v8 = *(_DWORD *)(a2 + 16);
  if (v8 < 3 || v8 >= 0x10000 && (*(_WORD *)(a2 + 72) & 1) != 0)
    goto LABEL_9;
  if (!*(_QWORD *)(a2 + 8))
    goto LABEL_9;
  if (*(_DWORD *)a2 < 0xCu || *(unsigned __int16 *)(a2 + 76) < 4u)
    goto LABEL_9;
  if (*(_QWORD *)(a2 + 32))
  {
    if (*(_DWORD *)(a2 + 40) < 4u || !*(_QWORD *)(a2 + 56))
      goto LABEL_9;
    v14 = *(_WORD *)(a2 + 72);
    v15 = (v14 & 1) != 0 ? 2 : 4;
    if (*(_DWORD *)(a2 + 48) < v15 || *(_DWORD *)(a2 + 24) <= 0x13u)
      goto LABEL_9;
  }
  else
  {
    v14 = *(_WORD *)(a2 + 72);
    if ((v14 & 2) == 0)
      goto LABEL_9;
  }
  v16 = *(unsigned __int16 *)(a2 + 74);
  if ((v14 & 0x20) != 0)
  {
    if ((v16 - 4) < 0xFD)
      goto LABEL_25;
LABEL_9:
    physx::shdfnd::Foundation::error(physx::shdfnd::Foundation::mInstance, 4, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/physxcooking/src/convex/ConvexMeshBuilder.cpp", 73, "Gu::ConvexMesh::loadFromDesc: desc.isValid() failed!", a6, a7, a8, v23.i8[0]);
    return 0;
  }
  if ((v16 - 8) >= 0xF9)
    goto LABEL_9;
LABEL_25:
  result = physx::ConvexMeshBuilder::loadConvexHull((uint64_t *)a1, (unsigned int *)a2, a5);
  if ((_DWORD)result)
  {
    v17 = a1[7].u8[6];
    physx::Gu::computeBoundsAroundVertices((uint64_t)&v23, v17, a1->i64[0]);
    v18 = (float32x4_t)vextq_s8(v23, v23, 8uLL);
    v19 = (float32x4_t)vextq_s8(v23, (int8x16_t)v18, 0xCuLL);
    v20 = vsubq_f32((float32x4_t)v23, v19);
    *(float32x2_t *)&v19.i32[1] = v24;
    v21 = vaddq_f32((float32x4_t)v23, v19);
    v21.i32[3] = v20.i32[3];
    v22 = vsub_f32(v24, (float32x2_t)vext_s8(*(int8x8_t *)v23.i8, *(int8x8_t *)v18.f32, 4uLL));
    v18.i64[0] = 0x3F0000003F000000;
    v18.i64[1] = 0x3F0000003F000000;
    a1[5] = vmulq_f32(v21, v18);
    *(float32x2_t *)a1[6].f32 = vmul_f32(v22, (float32x2_t)0x3F0000003F000000);
    if (v17 > a3)
      physx::ConvexMeshBuilder::computeGaussMaps((physx::ConvexMeshBuilder *)a1);
    if ((a4 & 1) == 0)
      physx::ConvexMeshBuilder::computeInternalObjects((physx::ConvexMeshBuilder *)a1);
    return 1;
  }
  return result;
}

uint64_t physx::ConvexMeshBuilder::loadConvexHull(uint64_t *a1, unsigned int *a2, uint64_t a3)
{
  unsigned int v6;
  uint64_t v7;
  char *v8;
  size_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  unsigned int v14;
  _DWORD *v15;
  uint64_t v16;
  size_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  size_t v25;
  char *v26;
  uint64_t v27;
  char *v28;
  int v29;
  int v30;
  uint64_t v31;
  uint64_t v32;
  int v33;
  __int128 v34;
  char *v35;
  uint64_t v36;
  uint64_t *v37;
  void *v38;
  uint64_t v39;
  float *v40;
  uint64_t v41;
  uint64_t v42;
  char *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  const char *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  char *v51;
  uint64_t v52;
  uint64_t v53;
  char *v54;
  _BYTE *v55;
  uint64_t v56;
  int v57;
  uint64_t v58;
  _QWORD *v59;
  char v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  double v64;
  double v65;
  double v66;
  double v67;
  float32x4_t v68;
  char v69;
  uint64_t v70;
  _QWORD *v71;
  _QWORD *v72;
  uint64_t v73;
  const char *v74;
  uint64_t v75;
  const char *v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  const char *v80;
  uint64_t v81;
  int *v82;
  uint64_t v83;
  int v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  unsigned int v97;
  uint64_t v98;
  unsigned int v99;
  BOOL v100;
  unsigned int v101;
  int v102;
  uint64_t v103;
  uint64_t v104;
  const char *v105;
  uint64_t v106;
  uint64_t *v107;
  uint64_t v108;
  const char *v109;
  uint64_t v110;
  unint64_t v111;
  unsigned __int16 v112;
  int v113;
  _WORD *v114;
  char v115;
  int v116;
  int v117;
  uint64_t v118;
  _QWORD *v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  unsigned int v124;
  int v125;
  int v126;
  int v127;
  __int16 v129;
  __int16 v130;
  int v131;
  uint64_t v132;
  unsigned int *v133;
  _DWORD *v134;
  uint64_t v135;
  unsigned int v136;
  uint64_t v137;
  uint64_t v138;
  const char *v139;
  uint64_t (*v140)(uint64_t, uint64_t, const char *, const char *, uint64_t);
  uint64_t v141;
  unsigned __int16 *v142;
  size_t v143;
  uint64_t v144;
  int v145;
  uint64_t v146;
  unsigned __int16 *v147;
  int v148;
  uint64_t v149;
  unsigned int v150;
  uint64_t v151;
  uint64_t v152;
  unsigned __int8 v153;
  float *v154;
  float v155;
  float v156;
  float v157;
  char v158;
  float v159;
  uint64_t v160;
  __int16 v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  float *v165;
  float32x2_t v166;
  float v167;
  uint64_t v168;
  float v169;
  double v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  float v179;
  void (**v180)(physx::Cm::RadixSortBuffered *__hidden);
  unsigned int v181;
  float v183;
  float32x4_t v184;
  char v185[8];
  _QWORD *v186;
  uint64_t v187;
  uint64_t v188;
  uint64_t v189;
  uint64_t v190;
  uint64_t v191;
  uint64_t *v192;
  uint64_t v193;
  int v194;
  uint64_t v195;
  uint64_t v196;
  float32x4_t v197[2];
  int v198;
  double v199;
  int v200;
  int v201;
  uint64_t v202;
  int v203;
  int v204;
  uint64_t v205;
  int v206;
  int v207;
  uint64_t v208;
  int v209;
  int v210;
  __int16 v211;
  void (**v212)(physx::Cm::RadixSortBuffered *__hidden);
  unsigned int v213;
  __int128 v214;
  __int128 v215;
  uint64_t v216;
  char v217;
  uint64_t v218;

  v218 = *MEMORY[0x24BDAC8D0];
  v6 = a2[4];
  MEMORY[0x24BDAC7A8](a1);
  v8 = &v185[-v7];
  bzero(&v185[-v7], v9);
  if (v6)
  {
    v11 = *a2;
    v12 = *((_QWORD *)a2 + 1);
    v13 = v8;
    v14 = v6;
    do
    {
      *(_QWORD *)v13 = *(_QWORD *)v12;
      *((_DWORD *)v13 + 2) = *(_DWORD *)(v12 + 8);
      v13 += 12;
      v12 += v11;
      --v14;
    }
    while (v14);
  }
  v196 = a3;
  v15 = (_DWORD *)*((_QWORD *)a2 + 7);
  if (v15)
  {
    v16 = a2[16];
    MEMORY[0x24BDAC7A8](v10);
    v18 = &v185[-((v17 + 15) & 0x7FFFFFFF0)];
    bzero(v18, v17);
    if ((a2[18] & 1) != 0)
    {
      if ((_DWORD)v16)
      {
        v21 = a2[12];
        v22 = v18;
        do
        {
          *(_DWORD *)v22 = *(unsigned __int16 *)v15;
          v22 += 4;
          v15 = (_DWORD *)((char *)v15 + v21);
        }
        while (v22 < &v18[4 * v16]);
      }
    }
    else if ((_DWORD)v16)
    {
      v19 = 0;
      v20 = a2[12];
      do
      {
        *(_DWORD *)&v18[4 * v19] = *v15;
        v15 = (_DWORD *)((char *)v15 + v20);
        ++v19;
      }
      while ((_DWORD)v16 != (_DWORD)v19);
    }
  }
  else
  {
    v18 = 0;
  }
  v23 = *((_QWORD *)a2 + 4);
  v24 = a2[10];
  if (v23)
  {
    MEMORY[0x24BDAC7A8](v10);
    v26 = &v185[-((v25 + 15) & 0x3FFFFFFFF0)];
    bzero(v26, v25);
    if ((_DWORD)v24)
    {
      v27 = a2[6];
      v28 = v26;
      v29 = v24;
      do
      {
        *(_OWORD *)v28 = *(_OWORD *)v23;
        *((_DWORD *)v28 + 4) = *(_DWORD *)(v23 + 16);
        v28 += 20;
        v23 += v27;
        --v29;
      }
      while (v29);
      if (!v196 && v24 > 1)
      {
        v30 = 0;
        v31 = 1;
        v32 = 36;
        do
        {
          if (*(unsigned __int16 *)&v26[v32] > *(unsigned __int16 *)&v26[20 * v30 + 16])
            v30 = v31;
          ++v31;
          v32 += 20;
        }
        while (v24 != v31);
        if (v30)
        {
          v33 = *((_DWORD *)v26 + 4);
          v34 = *(_OWORD *)v26;
          v35 = &v26[20 * v30];
          *(_OWORD *)v26 = *(_OWORD *)v35;
          *((_DWORD *)v26 + 4) = *((_DWORD *)v35 + 4);
          *(_OWORD *)v35 = v34;
          *((_DWORD *)v35 + 4) = v33;
        }
      }
    }
  }
  else
  {
    v26 = 0;
  }
  v194 = *((unsigned __int16 *)a2 + 36);
  v36 = a2[16];
  a1[6] = 0;
  v37 = a1 + 6;
  *((_OWORD *)a1 + 1) = 0u;
  *((_OWORD *)a1 + 2) = 0u;
  *(_OWORD *)a1 = 0u;
  *(_BYTE *)(a1[7] + 38) = v6;
  v38 = (void *)(*(uint64_t (**)(uint64_t, uint64_t, const char *, const char *, uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24)
                                                                                                 + 16))(physx::shdfnd::Foundation::mInstance + 24, 12 * v6 + 12, "NonTrackedAlloc", "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/physxcooking/src/convex/ConvexHullBuilder.cpp", 119);
  *a1 = (uint64_t)v38;
  memcpy(v38, v8, 12 * *(unsigned __int8 *)(a1[7] + 38));
  *(_BYTE *)(a1[7] + 39) = 0;
  if (a1[2])
    (*(void (**)(uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
  a1[2] = 0;
  if (a1[1])
    (*(void (**)(uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
  a1[1] = 0;
  if (v24 >= 0x100)
  {
    v42 = physx::shdfnd::Foundation::mInstance;
    v43 = "ConvexHullBuilder::init: convex hull has more than 255 polygons!";
    v44 = 129;
LABEL_33:
    physx::shdfnd::Foundation::error(v42, 32, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/physxcooking/src/convex/ConvexHullBuilder.cpp", v44, v43, v39, (uint64_t)v40, v41, v185[0]);
LABEL_183:
    physx::shdfnd::Foundation::error(physx::shdfnd::Foundation::mInstance, 32, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/physxcooking/src/convex/ConvexMeshBuilder.cpp", 312, "Gu::ConvexMesh::loadConvexHull: convex hull init failed!", v39, (uint64_t)v40, v41, v185[0]);
    return 0;
  }
  *(_BYTE *)(a1[7] + 39) = v24;
  if ((_DWORD)v24)
    v45 = (*(uint64_t (**)(uint64_t, _QWORD, const char *, const char *, uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24)
                                                                                          + 16))(physx::shdfnd::Foundation::mInstance + 24, (20 * v24), "NonTrackedAlloc", "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/physxcooking/src/convex/ConvexHullBuilder.cpp", 135);
  else
    v45 = 0;
  a1[1] = v45;
  if ((_DWORD)v36)
  {
    v46 = physx::shdfnd::Foundation::mInstance;
    if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)physx::shdfnd::Foundation::mInstance + 40))(physx::shdfnd::Foundation::mInstance))
      v47 = "static const char *physx::shdfnd::ReflectionAllocator<unsigned char>::getName() [T = unsigned char]";
    else
      v47 = "<allocation names disabled>";
    v48 = (*(uint64_t (**)(uint64_t, uint64_t, const char *, const char *, uint64_t))(*(_QWORD *)(v46 + 24) + 16))(v46 + 24, v36, v47, "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/physxcooking/src/convex/ConvexHullBuilder.cpp", 137);
  }
  else
  {
    v48 = 0;
  }
  a1[2] = v48;
  if ((_DWORD)v24)
  {
    v49 = 0;
    v50 = a1[1];
    do
    {
      v51 = &v26[20 * v49];
      v52 = v50 + 20 * v49;
      *(_WORD *)(v52 + 16) = v48 - *((_WORD *)a1 + 8);
      v53 = *((unsigned __int16 *)v51 + 8);
      *(_BYTE *)(v52 + 18) = v53;
      if ((_DWORD)v53)
      {
        v54 = &v18[4 * *(unsigned __int16 *)&v26[20 * v49 + 18]];
        v55 = (_BYTE *)v48;
        v56 = v53;
        do
        {
          v57 = *(_DWORD *)v54;
          v54 += 4;
          *v55++ = v57;
          --v56;
        }
        while (v56);
        v50 = a1[1];
      }
      else
      {
        v53 = 0;
      }
      *(_OWORD *)(v50 + 20 * v49) = *(_OWORD *)v51;
      v48 += v53;
      ++v49;
    }
    while (v49 != v24);
  }
  v58 = v196;
  if ((physx::ConvexHullBuilder::calculateVertexMapTable((physx::ConvexHullBuilder *)a1, v24, v196 == 0) & 1) == 0)
    goto LABEL_183;
  v59 = a1 + 3;
  if (v58)
  {
    v60 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v58 + 32))(v58, v36, a1[2]);
    v59 = a1 + 3;
    if ((v60 & 1) != 0)
    {
      *(_WORD *)(a1[7] + 36) = v36 >> 1;
      v69 = v194;
      if (!(_DWORD)v24)
        goto LABEL_156;
      goto LABEL_147;
    }
  }
  v192 = a1 + 5;
  if ((v36 & 1) != 0)
  {
    v42 = physx::shdfnd::Foundation::mInstance;
    v43 = "Cooking::cookConvexMesh: non-manifold mesh cannot be used, invalid mesh!";
    v44 = 567;
    goto LABEL_33;
  }
  v70 = *(unsigned __int8 *)(a1[7] + 39);
  if (*v59)
  {
    v71 = v59;
    (*(void (**)(uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
    v59 = v71;
  }
  *v59 = 0;
  v186 = v59;
  if ((_DWORD)v36)
  {
    v72 = v59;
    v73 = physx::shdfnd::Foundation::mInstance;
    if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)physx::shdfnd::Foundation::mInstance + 40))(physx::shdfnd::Foundation::mInstance))
      v74 = "static const char *physx::shdfnd::ReflectionAllocator<unsigned char>::getName() [T = unsigned char]";
    else
      v74 = "<allocation names disabled>";
    *v72 = (*(uint64_t (**)(uint64_t, uint64_t, const char *, const char *, uint64_t))(*(_QWORD *)(v73 + 24)
                                                                                            + 16))(v73 + 24, v36, v74, "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/physxcooking/src/convex/ConvexHullBuilder.cpp", 575);
    if (8 * (_DWORD)v36)
    {
      v75 = physx::shdfnd::Foundation::mInstance;
      if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)physx::shdfnd::Foundation::mInstance + 40))(physx::shdfnd::Foundation::mInstance))
        v76 = "static const char *physx::shdfnd::ReflectionAllocator<unsigned int>::getName() [T = unsigned int]";
      else
        v76 = "<allocation names disabled>";
      v77 = (*(uint64_t (**)(uint64_t, uint64_t, const char *, const char *, uint64_t))(*(_QWORD *)(v75 + 24)
                                                                                             + 16))(v75 + 24, 4 * (8 * v36), v76, "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/physxcooking/src/convex/ConvexHullBuilder.cpp", 577);
    }
    else
    {
      v77 = 0;
    }
    v79 = physx::shdfnd::Foundation::mInstance;
    if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)physx::shdfnd::Foundation::mInstance + 40))(physx::shdfnd::Foundation::mInstance))
      v80 = "static const char *physx::shdfnd::ReflectionAllocator<BOOL>::getName() [T = BOOL]";
    else
      v80 = "<allocation names disabled>";
    v191 = (*(uint64_t (**)(uint64_t, uint64_t, const char *, const char *, uint64_t))(*(_QWORD *)(v79 + 24)
                                                                                            + 16))(v79 + 24, v36, v80, "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/physxcooking/src/convex/ConvexHullBuilder.cpp", 589);
    v78 = v77;
  }
  else
  {
    v78 = 0;
    v191 = 0;
  }
  v193 = v78 + 4 * v36;
  v196 = v193 + 4 * v36;
  v195 = v196 + 4 * v36;
  v188 = v195 + 4 * v36;
  v187 = v188 + 4 * v36;
  v81 = v187 + 4 * v36;
  v82 = (int *)(v81 + 4 * v36);
  if ((_DWORD)v70)
  {
    v83 = 0;
    v84 = 0;
    v85 = v191;
    v86 = a1[1];
    v87 = a1[2];
    v88 = v195;
    v89 = v196;
    v90 = v193;
    v91 = v78;
    do
    {
      v92 = v86 + 20 * v83;
      v93 = *(unsigned __int8 *)(v92 + 18);
      if (*(_BYTE *)(v92 + 18))
      {
        v94 = 0;
        v95 = 0;
        v96 = v87 + *(unsigned __int16 *)(v92 + 16);
        do
        {
          v97 = *(unsigned __int8 *)(v96 + v95);
          if (v93 - 1 == v95)
            v98 = 0;
          else
            v98 = v95 + 1;
          v99 = *(unsigned __int8 *)(v96 + v98);
          v100 = v97 > v99;
          if (v97 <= v99)
            v101 = v99;
          else
            v101 = *(unsigned __int8 *)(v96 + v95);
          if (v97 >= v99)
            v97 = v99;
          *(_DWORD *)(v91 + 4 * v95) = v97;
          *(_DWORD *)(v90 + 4 * v95) = v101;
          *(_DWORD *)(v89 + 4 * v95) = v83;
          *(_DWORD *)(v88 + 4 * v95) = v95;
          *(_BYTE *)(v85 + v95) = v100;
          v102 = v84 + v95++;
          v82[v102] = v102;
          v94 -= 4;
        }
        while (v93 != v95);
        v84 += v95;
        v85 += v95;
        v88 -= v94;
        v89 -= v94;
        v90 -= v94;
        v91 -= v94;
      }
      ++v83;
    }
    while (v83 != v70);
  }
  v216 = 0;
  v215 = 0u;
  v214 = 0u;
  v217 = 1;
  v213 = 0x80000000;
  v212 = &off_24ED90D50;
  physx::Cm::RadixSortBuffered::Sort((uint64_t)&v212);
  v190 = v78;
  physx::Cm::RadixSortBuffered::Sort((uint64_t)&v212);
  v103 = v214;
  if (*v37)
    (*(void (**)(uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
  *v37 = 0;
  v189 = 2 * v36;
  if ((_DWORD)v36)
  {
    v104 = physx::shdfnd::Foundation::mInstance;
    if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)physx::shdfnd::Foundation::mInstance + 40))(physx::shdfnd::Foundation::mInstance))
      v105 = "static const char *physx::shdfnd::ReflectionAllocator<unsigned short>::getName() [T = unsigned short]";
    else
      v105 = "<allocation names disabled>";
    v106 = (*(uint64_t (**)(uint64_t, uint64_t, const char *, const char *, uint64_t))(*(_QWORD *)(v104 + 24)
                                                                                            + 16))(v104 + 24, v189, v105, "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/physxcooking/src/convex/ConvexHullBuilder.cpp", 635);
  }
  else
  {
    v106 = 0;
  }
  *v37 = v106;
  v107 = v192;
  if (*v192)
    (*(void (**)(uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
  *v107 = 0;
  if ((_DWORD)v36)
  {
    v108 = physx::shdfnd::Foundation::mInstance;
    if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)physx::shdfnd::Foundation::mInstance + 40))(physx::shdfnd::Foundation::mInstance))
      v109 = "static const char *physx::shdfnd::ReflectionAllocator<unsigned short>::getName() [T = unsigned short]";
    else
      v109 = "<allocation names disabled>";
    v110 = (*(uint64_t (**)(uint64_t, uint64_t, const char *, const char *, uint64_t))(*(_QWORD *)(v108 + 24)
                                                                                            + 16))(v108 + 24, v189, v109, "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/physxcooking/src/convex/ConvexHullBuilder.cpp", 639);
    v111 = 0;
    v112 = 0;
    v113 = 0;
    a1[5] = v110;
    *(_WORD *)(a1[7] + 36) = 0;
    v114 = (_WORD *)a1[6];
    v115 = -1;
    v116 = -1;
    v117 = -1;
    v118 = v191;
    v119 = v186;
    v120 = v187;
    v121 = v188;
    v122 = v193;
    while (1)
    {
      v123 = *(unsigned int *)(v103 + 4 * v111);
      v124 = *(_DWORD *)(v196 + 4 * v123);
      v125 = *(_DWORD *)(v195 + 4 * v123);
      v126 = *(_DWORD *)(v190 + 4 * v123);
      v127 = *(_DWORD *)(v122 + 4 * v123);
      if (v126 == v117 && v127 == v116)
      {
        v131 = v112;
        *(_BYTE *)(*v119 + 2 * v112 - 2) = v115;
        *(_BYTE *)(*v119 + 2 * v112 - 1) = v124;
        ++v113;
        v110 = *v107;
      }
      else
      {
        if (v111 && v113 != 1)
        {
          v144 = 675;
          goto LABEL_182;
        }
        v113 = 0;
        if (*(_BYTE *)(v118 + v123))
          v129 = *(_DWORD *)(v190 + 4 * v123);
        else
          v129 = *(_DWORD *)(v122 + 4 * v123);
        if (*(_BYTE *)(v118 + v123))
          v130 = *(_DWORD *)(v122 + 4 * v123);
        else
          v130 = *(_DWORD *)(v190 + 4 * v123);
        *v114 = v130;
        v114[1] = v129;
        v114 += 2;
        v131 = ++v112;
        v117 = v126;
        v116 = v127;
        v115 = v124;
      }
      *(_WORD *)(v110 + 2 * (v125 + *(unsigned __int16 *)(a1[1] + 20 * v124 + 16))) = v111 >> 1;
      *(_DWORD *)(v121 + 4 * v111) = v124;
      *(_DWORD *)(v120 + 4 * v111) = v125;
      *(_DWORD *)(v81 + 4 * v111++) = v131 - 1;
      if (v36 == v111)
      {
        v132 = a1[7];
        goto LABEL_122;
      }
    }
  }
  v112 = 0;
  v132 = a1[7];
  *(_WORD *)(v132 + 36) = 0;
  v118 = v191;
LABEL_122:
  *(_WORD *)(v132 + 36) = v112;
  v69 = v194;
  if ((v194 & 0x10) == 0)
  {
    physx::Cm::RadixSortBuffered::Sort((uint64_t)&v212);
    physx::Cm::RadixSortBuffered::Sort((uint64_t)&v212);
    if ((_DWORD)v36)
    {
      v133 = (unsigned int *)v214;
      v134 = (_DWORD *)(v81 + 4 * v36);
      v135 = v36;
      do
      {
        v136 = *v133++;
        *v134++ = *(_DWORD *)(v81 + 4 * v136);
        --v135;
      }
      while (v135);
    }
    if ((*(_WORD *)(a1[7] + 36) & 0x7FFF) != 0)
    {
      v137 = 8 * (*(_WORD *)(a1[7] + 36) & 0x7FFF);
      v138 = physx::shdfnd::Foundation::mInstance;
      if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)physx::shdfnd::Foundation::mInstance + 40))(physx::shdfnd::Foundation::mInstance))
        v139 = "static const char *physx::shdfnd::ReflectionAllocator<physx::Gu::EdgeDescData>::getName() [T = physx::Gu::EdgeDescData]";
      else
        v139 = "<allocation names disabled>";
      v140 = *(uint64_t (**)(uint64_t, uint64_t, const char *, const char *, uint64_t))(*(_QWORD *)(v138 + 24)
                                                                                             + 16);
      v141 = v138 + 24;
      v118 = v191;
      v142 = (unsigned __int16 *)v140(v141, v137, v139, "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/physxcooking/src/convex/ConvexHullBuilder.cpp", 725);
      v143 = 8 * (*(_WORD *)(a1[7] + 36) & 0x7FFF);
    }
    else
    {
      v143 = 0;
      v142 = 0;
    }
    bzero(v142, v143);
    for (; (_DWORD)v36; LODWORD(v36) = v36 - 1)
    {
      v145 = *v82++;
      ++v142[4 * v145 + 1];
    }
    v146 = *(_WORD *)(a1[7] + 36) & 0x7FFF;
    if ((*(_WORD *)(a1[7] + 36) & 0x7FFF) != 0)
    {
      v147 = v142 + 1;
      while (1)
      {
        v148 = *v147;
        v147 += 4;
        if (v148 != 2)
          break;
        if (!--v146)
          goto LABEL_141;
      }
      v144 = 739;
LABEL_182:
      physx::shdfnd::Foundation::error(physx::shdfnd::Foundation::mInstance, 32, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/physxcooking/src/convex/ConvexHullBuilder.cpp", v144, "Cooking::cookConvexMesh: non-manifold mesh cannot be used, invalid mesh!", (uint64_t)v119, v121, v120, v185[0]);
      v212 = &off_24ED90D50;
      physx::Cm::RadixSortBuffered::reset((uint64_t)&v212);
      goto LABEL_183;
    }
    if (v142)
LABEL_141:
      (*(void (**)(uint64_t, unsigned __int16 *))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24, v142);
  }
  if (v190)
    (*(void (**)(uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
  if (v118)
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24, v118);
  v212 = &off_24ED90D50;
  physx::Cm::RadixSortBuffered::reset((uint64_t)&v212);
  if ((_DWORD)v24)
  {
LABEL_147:
    v149 = 0;
    v150 = *(unsigned __int8 *)(a1[7] + 38);
    v151 = *a1;
    v152 = a1[1];
    do
    {
      if (v150)
      {
        v153 = 0;
        v154 = (float *)(v152 + 20 * v149);
        v155 = *v154;
        v156 = v154[1];
        v157 = v154[2];
        v158 = -1;
        v159 = 3.4028e38;
        v160 = v151;
        do
        {
          v68.i32[0] = *(_DWORD *)(v160 + 8);
          *(float *)&v67 = (float)((float)(v156 * *(float *)(v160 + 4)) + (float)(*(float *)v160 * v155))
                         + (float)(v68.f32[0] * v157);
          if (*(float *)&v67 < v159)
          {
            v159 = (float)((float)(v156 * *(float *)(v160 + 4)) + (float)(*(float *)v160 * v155))
                 + (float)(v68.f32[0] * v157);
            v158 = v153;
          }
          ++v153;
          v160 += 12;
        }
        while (v150 > v153);
      }
      else
      {
        v158 = -1;
      }
      *(_BYTE *)(v152 + 20 * v149++ + 19) = v158;
    }
    while (v149 != v24);
  }
LABEL_156:
  if ((v69 & 0x10) == 0
    && (physx::ConvexHullBuilder::checkHullPolygons((float **)a1, v61, v62, (uint64_t)v59, v63, v39, v40, v41) & 1) == 0)
  {
    goto LABEL_183;
  }
  if (*((float *)a1 + 40) <= 0.0)
  {
    v161 = *((_WORD *)a2 + 36);
    v209 = 0;
    v210 = 16711680;
    v211 = 255;
    v162 = *((unsigned __int8 *)a1 + 118);
    v201 = 12;
    v163 = *a1;
    v164 = a1[1];
    v202 = *a1;
    v205 = v164;
    v203 = v162;
    v204 = 20;
    LODWORD(v164) = *(unsigned __int8 *)(a1[7] + 39);
    v207 = 0;
    v206 = v164;
    v208 = a1[2];
    if ((_DWORD)v162)
    {
      v165 = (float *)(v163 + 8);
      v166 = 0;
      v167 = 0.0;
      v168 = v162;
      do
      {
        v65 = *((double *)v165 - 1);
        v166 = vadd_f32(v166, *(float32x2_t *)&v65);
        v169 = *v165;
        v165 += 3;
        v167 = v167 + v169;
        --v168;
      }
      while (v168);
    }
    else
    {
      v166 = 0;
      v167 = 0.0;
    }
    LODWORD(v66) = 1.0;
    *(float *)&v65 = 1.0 / (float)v162;
    v170 = COERCE_DOUBLE(vmul_n_f32(v166, *(float *)&v65));
    v199 = v170;
    *(float *)&v64 = *(float *)&v65 * v167;
    v200 = LODWORD(v64);
    if ((v161 & 0x40) != 0)
      physx::computeVolumeIntegralsEberlySIMD((uint64_t)&v201, (uint64_t)&v212, (uint64_t)&v199, v64, v170, v65, v66, v67, v68);
    else
      physx::computeVolumeIntegralsEberly((uint64_t)&v201, (uint64_t)&v212, (float *)&v199);
    v174 = 0;
    v175 = 24;
    v176 = (uint64_t)a1 + 164;
    do
    {
      v177 = 0;
      v178 = v175;
      do
      {
        v179 = *(double *)((char *)&v212 + v178);
        *(float *)(v176 + v177) = v179;
        v177 += 4;
        v178 += 24;
      }
      while (v177 != 12);
      ++v174;
      v176 += 12;
      v175 += 8;
    }
    while (v174 != 3);
    v180 = v212;
    a1[13] = (uint64_t)v212;
    v181 = v213;
    *((_DWORD *)a1 + 28) = v213;
    if ((~*((_DWORD *)a1 + 41) & 0x7F800000) != 0
      && (~*((_DWORD *)a1 + 42) & 0x7F800000) != 0
      && (~*((_DWORD *)a1 + 43) & 0x7F800000) != 0
      && (~*((_DWORD *)a1 + 44) & 0x7F800000) != 0
      && (~*((_DWORD *)a1 + 45) & 0x7F800000) != 0
      && (~*((_DWORD *)a1 + 46) & 0x7F800000) != 0
      && (~*((_DWORD *)a1 + 47) & 0x7F800000) != 0
      && (~*((_DWORD *)a1 + 48) & 0x7F800000) != 0
      && (~*((_DWORD *)a1 + 49) & 0x7F800000) != 0
      && (v180 & 0x7F800000) != 0x7F800000
      && (HIDWORD(v180) & 0x7F800000) != 0x7F800000
      && (v181 & 0x7F800000) != 0x7F800000
      && (v183 = *(double *)&v214, (~LODWORD(v183) & 0x7F800000) != 0))
    {
      if (*(double *)&v214 < 0.0)
      {
        physx::shdfnd::Foundation::error(physx::shdfnd::Foundation::mInstance, 2, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/physxcooking/src/convex/ConvexMeshBuilder.cpp", 233, "Gu::ConvexMesh: Mesh has a negative volume! Is it open or do (some) faces have reversed winding? (Taking absolute value.)", v171, v172, v173, v185[0]);
        physx::PxMat33::operator-(v197, (float32x4_t *)((char *)a1 + 164));
        v184 = v197[1];
        *(float32x4_t *)((char *)a1 + 164) = v197[0];
        *(float32x4_t *)((char *)a1 + 180) = v184;
        *((_DWORD *)a1 + 49) = v198;
        v183 = -v183;
      }
      *((float *)a1 + 40) = v183;
    }
    else
    {
      physx::shdfnd::Foundation::error(physx::shdfnd::Foundation::mInstance, 32, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/physxcooking/src/convex/ConvexMeshBuilder.cpp", 242, "Gu::ConvexMesh: Error computing mesh mass properties!\n", v171, v172, v173, v185[0]);
    }
  }
  return 1;
}

uint64_t physx::ConvexMeshBuilder::computeGaussMaps(physx::ConvexMeshBuilder *this)
{
  uint64_t v2;
  uint64_t v3;
  const char *v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD v8[3];

  v2 = *((_QWORD *)this + 19);
  if (v2)
  {
    physx::BigConvexData::~BigConvexData(*((physx::BigConvexData **)this + 19));
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24, v2);
  }
  v3 = physx::shdfnd::Foundation::mInstance;
  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)physx::shdfnd::Foundation::mInstance + 40))(physx::shdfnd::Foundation::mInstance))
    v4 = "static const char *physx::shdfnd::ReflectionAllocator<physx::BigConvexData>::getName() [T = physx::BigConvexData]";
  else
    v4 = "<allocation names disabled>";
  v5 = (*(uint64_t (**)(uint64_t, uint64_t, const char *, const char *, uint64_t))(*(_QWORD *)(v3 + 24) + 16))(v3 + 24, 48, v4, "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/physxcooking/src/convex/ConvexMeshBuilder.cpp", 388);
  *(_DWORD *)v5 = 0;
  *(_OWORD *)(v5 + 8) = 0u;
  *(_OWORD *)(v5 + 24) = 0u;
  *(_QWORD *)(v5 + 40) = 0;
  *((_QWORD *)this + 19) = v5;
  v6 = *(_QWORD *)this;
  v8[1] = v5;
  v8[2] = v6;
  v8[0] = (char *)this + 80;
  physx::BigConvexDataBuilder::computeValencies((physx::BigConvexDataBuilder *)v8, this);
  return physx::BigConvexDataBuilder::precompute((physx::BigConvexDataBuilder *)v8, 0x10u);
}

float physx::ConvexMeshBuilder::computeInternalObjects(physx::ConvexMeshBuilder *this)
{
  float *v1;
  uint64_t v2;
  float v3;
  float v4;
  float v5;
  float *v6;
  float v7;
  uint64_t v8;
  float v9;
  float v10;
  uint64_t v11;
  uint64_t v12;
  float v13;
  float v14;
  int32x2_t v15;
  uint64_t v16;
  uint64_t v17;
  float v18;
  float v19;
  float v20;
  float *v21;
  float v22;
  float *v23;
  uint64_t v24;
  float v25;
  float v26;
  float v27;
  float v28;
  float v29;
  float v30;
  float v31;
  float v32;
  float v33;
  float v34;
  float v35;
  float v36;
  float v37;
  float v38;
  float *v42;
  float v43;
  float v44;
  float v45;
  float v46;
  float v47;
  float v48;
  float v49;
  float v50;
  BOOL v51;
  float v52;
  float v53;
  float v54;
  float v55;
  float v56;
  float result;
  float32x2_t v59;
  float v60;

  v1 = (float *)*((_QWORD *)this + 1);
  *((_DWORD *)this + 34) = 2139095039;
  v2 = *((unsigned __int8 *)this + 119);
  if (*((_BYTE *)this + 119))
  {
    v3 = *((float *)this + 26);
    v4 = *((float *)this + 27);
    v5 = *((float *)this + 28);
    v6 = v1 + 2;
    v7 = 3.4028e38;
    v8 = *((unsigned __int8 *)this + 119);
    do
    {
      v9 = fabsf(v6[1] + (float)((float)((float)(v4 * *(v6 - 1)) + (float)(v3 * *(v6 - 2))) + (float)(v5 * *v6)));
      if (v9 < v7)
      {
        *((float *)this + 34) = v9;
        v7 = v9;
      }
      v6 += 5;
      --v8;
    }
    while (v8);
  }
  else
  {
    v7 = 3.4028e38;
  }
  v10 = (float)(*((float *)this + 22) + *((float *)this + 25)) - (float)(*((float *)this + 22) - *((float *)this + 25));
  v59 = vsub_f32(vadd_f32(*(float32x2_t *)((char *)this + 80), *(float32x2_t *)((char *)this + 92)), vsub_f32(*(float32x2_t *)((char *)this + 80), *(float32x2_t *)((char *)this + 92)));
  v60 = v10;
  v11 = *(_QWORD *)&vcgt_f32((float32x2_t)vdup_lane_s32((int32x2_t)v59, 1), v59) & 1;
  if (v10 <= *(float *)((unint64_t)&v59 & 0xFFFFFFFFFFFFFFFBLL | (4 * v11)))
    v12 = v11;
  else
    v12 = 2;
  v13 = v59.f32[((_BYTE)v12 + (v12 >> 1) + 1) & 3];
  v14 = v59.f32[((_BYTE)v12
               + (v12 >> 1)
               + 1
               + (((v12 + (v12 >> 1) + 1) & 3) >> 1)
               + 1) & 3];
  v15 = vdup_n_s32(0x7F7FFFFFu);
  if (v13 >= v14)
    v16 = ((_BYTE)v12 + (v12 >> 1) + 1) & 3;
  else
    v16 = ((_BYTE)v12
         + (v12 >> 1)
         + 1
         + (((v12 + (v12 >> 1) + 1) & 3) >> 1)
         + 1) & 3;
  if (v13 >= v14)
    v17 = ((_BYTE)v12
         + (v12 >> 1)
         + 1
         + (((v12 + (v12 >> 1) + 1) & 3) >> 1)
         + 1) & 3;
  else
    v17 = ((_BYTE)v12 + (v12 >> 1) + 1) & 3;
  *(int32x2_t *)((char *)this + 140) = v15;
  *((_DWORD *)this + 37) = 2139095039;
  if ((_DWORD)v2)
  {
    v18 = *((float *)this + 26);
    v19 = *((float *)this + 27);
    v20 = *((float *)this + 28);
    v21 = (float *)((char *)this + 4 * v12 + 140);
    v22 = v7 / 1.7321;
    v23 = v1;
    v24 = v2;
    do
    {
      v25 = v23[v12];
      if (v25 <= -0.0000001 || v25 >= 0.0000001)
      {
        v26 = (float)-v23[3] - (float)((float)((float)(v19 * v23[1]) + (float)(*v23 * v18)) + (float)(v23[2] * v20));
        v27 = 1.0 / v25;
        v28 = v22 * v23[v16];
        v29 = v22 * v23[v17];
        v30 = fabsf(v27 * (float)((float)(v26 - v28) - v29));
        if (v30 <= v22)
          v30 = v22;
        if (v30 >= *v21)
          v31 = *v21;
        else
          v31 = v30;
        v32 = fabsf(v27 * (float)(v29 + (float)(v26 - v28)));
        if (v32 <= v22)
          v32 = v22;
        if (v32 >= v31)
          v33 = v31;
        else
          v33 = v32;
        v34 = v28 + v26;
        v35 = fabsf(v27 * (float)(v29 + v34));
        if (v35 <= v22)
          v36 = v22;
        else
          v36 = v35;
        if (v36 >= v33)
          v37 = v33;
        else
          v37 = v36;
        v38 = fabsf(v27 * (float)(v34 - v29));
        if (v38 <= v22)
          v38 = v22;
        if (v30 < *v21 || v32 < v31 || v36 < v33 || v38 < v37)
        {
          if (v38 < v37)
            v37 = v38;
          *v21 = v37;
        }
      }
      v23 += 5;
      --v24;
    }
    while (v24);
    v42 = (float *)((char *)this + 4 * v16 + 140);
    do
    {
      v43 = v1[v16];
      v44 = v1[v17];
      v45 = v43 + v44;
      v46 = (float)-v1[3] - (float)((float)((float)(v19 * v1[1]) + (float)(*v1 * v18)) + (float)(v1[2] * v20));
      v47 = *v21 * v1[v12];
      if ((float)(v43 + v44) <= -0.0000001 || v45 >= 0.0000001)
      {
        v48 = fabsf((float)(v46 - v47) / v45);
        if (v48 <= v22)
          v48 = v22;
        v49 = *v42;
        v50 = fabsf((float)(v46 + v47) / v45);
        if (v50 <= v22)
          v50 = v22;
        if (v48 < v49)
        {
          v51 = 1;
        }
        else
        {
          v48 = *v42;
          v51 = v50 < v49;
        }
        if (v51)
        {
          if (v50 >= v48)
            v50 = v48;
          *v42 = v50;
        }
      }
      v52 = v43 - v44;
      if (v52 <= -0.0000001 || v52 >= 0.0000001)
      {
        v53 = fabsf((float)(v46 - v47) / v52);
        if (v53 <= v22)
          v53 = v22;
        v54 = *v42;
        v55 = fabsf((float)(v46 + v47) / v52);
        if (v55 <= v22)
          v55 = v22;
        if (v53 >= v54)
          v56 = *v42;
        else
          v56 = v53;
        if (v53 < v54 || v55 < v56)
        {
          if (v55 >= v56)
            v55 = v56;
          *v42 = v55;
        }
      }
      v1 += 5;
      --v2;
    }
    while (v2);
  }
  result = *((float *)this + v16 + 35);
  *((float *)this + v17 + 35) = result;
  return result;
}

uint64_t physx::ConvexMeshBuilder::save(uint64_t a1, void (***a2)(_QWORD, unsigned int *, uint64_t), int a3)
{
  uint64_t result;
  int v7;
  float v8;
  float v9;
  float v10;
  float v11;
  float v12;
  float v13;
  unsigned int v14;
  int16x8_t v15;
  unsigned int v16;
  uint64_t v17;
  unsigned int v18;
  unsigned int v19;
  unsigned int v20;
  unsigned int v21;
  unsigned int v22;
  _QWORD v23[3];

  result = physx::writeHeader(67, 86, 88, 77, 0xDu, a3, (void (***)(_QWORD, _QWORD, _QWORD))a2);
  if ((_DWORD)result)
  {
    LODWORD(v23[0]) = 0;
    (**a2)(a2, (unsigned int *)v23, 4);
    v7 = physx::ConvexHullBuilder::save(a1, a2, a3);
    result = 0;
    if (v7)
    {
      LODWORD(v23[0]) = 0;
      (**a2)(a2, (unsigned int *)v23, 4);
      v8 = *(float *)(a1 + 80) - *(float *)(a1 + 92);
      *(float *)v23 = v8;
      if (a3)
        LODWORD(v23[0]) = bswap32(LODWORD(v8));
      (**a2)(a2, (unsigned int *)v23, 4);
      v9 = *(float *)(a1 + 84) - *(float *)(a1 + 96);
      *(float *)v23 = v9;
      if (a3)
        LODWORD(v23[0]) = bswap32(LODWORD(v9));
      (**a2)(a2, (unsigned int *)v23, 4);
      v10 = *(float *)(a1 + 88) - *(float *)(a1 + 100);
      *(float *)v23 = v10;
      if (a3)
        LODWORD(v23[0]) = bswap32(LODWORD(v10));
      (**a2)(a2, (unsigned int *)v23, 4);
      v11 = *(float *)(a1 + 80) + *(float *)(a1 + 92);
      *(float *)v23 = v11;
      if (a3)
        LODWORD(v23[0]) = bswap32(LODWORD(v11));
      (**a2)(a2, (unsigned int *)v23, 4);
      v12 = *(float *)(a1 + 84) + *(float *)(a1 + 96);
      *(float *)v23 = v12;
      if (a3)
        LODWORD(v23[0]) = bswap32(LODWORD(v12));
      (**a2)(a2, (unsigned int *)v23, 4);
      v13 = *(float *)(a1 + 88) + *(float *)(a1 + 100);
      *(float *)v23 = v13;
      if (a3)
        LODWORD(v23[0]) = bswap32(LODWORD(v13));
      (**a2)(a2, (unsigned int *)v23, 4);
      v14 = *(_DWORD *)(a1 + 160);
      LODWORD(v23[0]) = v14;
      if (a3)
        LODWORD(v23[0]) = bswap32(v14);
      (**a2)(a2, (unsigned int *)v23, 4);
      physx::writeFloatBuffer(a1 + 164, 9, a3, (uint64_t (***)(_QWORD, _QWORD, _QWORD))a2);
      physx::writeFloatBuffer(a1 + 104, 3, a3, (uint64_t (***)(_QWORD, _QWORD, _QWORD))a2);
      if (*(_QWORD *)(a1 + 152))
      {
        if (a3)
          v16 = -1;
        else
          v16 = 0;
        *(int8x8_t *)v15.i8 = vbsl_s8((int8x8_t)vdup_n_s16(v16), (int8x8_t)8388671, (int8x8_t)0x3F008000000000);
        LODWORD(v23[0]) = vmovn_s16(v15).u32[0];
        (**a2)(a2, (unsigned int *)v23, 4);
        v17 = *(_QWORD *)a1;
        v23[1] = *(_QWORD *)(a1 + 152);
        v23[2] = v17;
        v23[0] = a1 + 80;
        physx::BigConvexDataBuilder::save((uint64_t)v23, a2, a3);
      }
      else
      {
        if (a3)
          v18 = -1;
        else
          v18 = 0;
        *(int8x8_t *)v15.i8 = vbsl_s8((int8x8_t)vdup_n_s16(v18), (int8x8_t)8388799, (int8x8_t)0xBF008000000000);
        LODWORD(v23[0]) = vmovn_s16(v15).u32[0];
        (**a2)(a2, (unsigned int *)v23, 4);
      }
      v19 = *(_DWORD *)(a1 + 136);
      LODWORD(v23[0]) = v19;
      if (a3)
        LODWORD(v23[0]) = bswap32(v19);
      (**a2)(a2, (unsigned int *)v23, 4);
      v20 = *(_DWORD *)(a1 + 140);
      LODWORD(v23[0]) = v20;
      if (a3)
        LODWORD(v23[0]) = bswap32(v20);
      (**a2)(a2, (unsigned int *)v23, 4);
      v21 = *(_DWORD *)(a1 + 144);
      LODWORD(v23[0]) = v21;
      if (a3)
        LODWORD(v23[0]) = bswap32(v21);
      (**a2)(a2, (unsigned int *)v23, 4);
      v22 = *(_DWORD *)(a1 + 148);
      LODWORD(v23[0]) = v22;
      if (a3)
        LODWORD(v23[0]) = bswap32(v22);
      (**a2)(a2, (unsigned int *)v23, 4);
      return 1;
    }
  }
  return result;
}

uint64_t physx::ConvexMeshBuilder::copy(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  int v5;
  int v6;
  __int16 v7;
  int v8;
  unsigned int v9;
  uint64_t v10;
  unsigned int v11;
  unsigned __int8 *v12;
  int v13;
  int v14;
  int v15;
  uint64_t v16;
  char *v17;
  char *v18;
  int v19;
  uint64_t v20;
  char *v21;
  char *v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;

  v4 = *(_QWORD *)(a1 + 56);
  v5 = *(unsigned __int8 *)(v4 + 38);
  *(_BYTE *)(a2 + 38) = v5;
  v6 = *(_WORD *)(v4 + 36) & 0x7FFF;
  v7 = *(_WORD *)(v4 + 36) & 0x7FFF | (*(unsigned __int8 *)(a1 + 64) << 15);
  v8 = v7;
  *(_WORD *)(a2 + 36) = v7;
  v9 = *(unsigned __int8 *)(v4 + 39);
  *(_BYTE *)(a2 + 39) = v9;
  v10 = *(unsigned __int8 *)(v4 + 39);
  if (*(_BYTE *)(v4 + 39))
  {
    v11 = 0;
    v12 = (unsigned __int8 *)(*(_QWORD *)(a1 + 8) + 18);
    do
    {
      v13 = *v12;
      v12 += 20;
      v11 += v13;
      --v10;
    }
    while (v10);
  }
  else
  {
    v11 = 0;
  }
  v14 = 4 * v6;
  if (v8 >= 0)
    v14 = 0;
  v15 = 15 * v5 + 2 * v6 + 20 * v9 + v14 + v11 + 3;
  if ((v15 & 0xFFFFFFFC) != 0)
  {
    v16 = (*(uint64_t (**)(uint64_t, _QWORD, const char *, const char *, uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24)
                                                                                          + 16))(physx::shdfnd::Foundation::mInstance + 24, v15 & 0xFFFFFFFC, "NonTrackedAlloc", "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/physxcooking/src/convex/ConvexHullBuilder.cpp", 449);
    v9 = *(unsigned __int8 *)(a2 + 39);
    v5 = *(unsigned __int8 *)(a2 + 38);
    LOWORD(v8) = *(_WORD *)(a2 + 36);
    v4 = *(_QWORD *)(a1 + 56);
  }
  else
  {
    v16 = 0;
  }
  *(_QWORD *)(a2 + 40) = v16;
  v17 = (char *)(v16 + 20 * v9);
  v18 = &v17[12 * v5];
  v19 = (__int16)v8;
  v20 = v8 & 0x7FFF;
  v21 = &v18[2 * v20];
  v22 = &v21[3 * v5];
  v23 = 4 * v20;
  if (v19 >= 0)
    v23 = 0;
  v24 = &v22[v23];
  memcpy(v17, *(const void **)a1, 12 * *(unsigned __int8 *)(v4 + 38));
  memcpy(*(void **)(a2 + 40), *(const void **)(a1 + 8), 20 * *(unsigned __int8 *)(a2 + 39));
  memcpy(v24, *(const void **)(a1 + 16), v11);
  memcpy(v18, *(const void **)(a1 + 24), 2 * (*(_WORD *)(*(_QWORD *)(a1 + 56) + 36) & 0x7FFF));
  if (*(_BYTE *)(a1 + 64))
    memcpy(v22, *(const void **)(a1 + 48), 4 * (*(_WORD *)(*(_QWORD *)(a1 + 56) + 36) & 0x7FFF));
  memcpy(v21, *(const void **)(a1 + 32), 3 * *(unsigned __int8 *)(*(_QWORD *)(a1 + 56) + 38));
  *(_DWORD *)(a2 + 72) = v11;
  *(_OWORD *)(a2 + 76) = *(_OWORD *)(a1 + 160);
  *(_QWORD *)(a2 + 92) = *(_QWORD *)(a1 + 176);
  *(_QWORD *)(a2 + 100) = *(_QWORD *)(a1 + 184);
  *(_QWORD *)(a2 + 108) = *(_QWORD *)(a1 + 192);
  *(_QWORD *)a2 = *(_QWORD *)(a1 + 80);
  *(_QWORD *)(a2 + 8) = *(_QWORD *)(a1 + 88);
  *(_QWORD *)(a2 + 16) = *(_QWORD *)(a1 + 96);
  *(_QWORD *)(a2 + 24) = *(_QWORD *)(a1 + 104);
  *(_DWORD *)(a2 + 32) = *(_DWORD *)(a1 + 112);
  v25 = *(_QWORD *)(a1 + 152);
  if (v25)
    *(_QWORD *)(a1 + 152) = 0;
  *(_QWORD *)(a2 + 48) = v25;
  *(_QWORD *)(a2 + 120) = v25;
  *(_DWORD *)(a2 + 56) = *(_DWORD *)(a1 + 136);
  *(_DWORD *)(a2 + 60) = *(_DWORD *)(a1 + 140);
  *(_DWORD *)(a2 + 64) = *(_DWORD *)(a1 + 144);
  *(_DWORD *)(a2 + 68) = *(_DWORD *)(a1 + 148);
  return 1;
}

float32_t physx::PxMat33::operator-(float32x4_t *a1, float32x4_t *a2)
{
  float32_t result;
  float32x4_t v3;

  result = -a2[2].f32[0];
  v3 = vnegq_f32(a2[1]);
  *a1 = vnegq_f32(*a2);
  a1[1] = v3;
  a1[2].f32[0] = result;
  return result;
}

uint64_t physx::ConvexMeshBuilder::computeHullPolygons(uint64_t a1, _DWORD *a2, const void *a3, _DWORD *a4, uint64_t a5, uint64_t a6, _DWORD *a7, _QWORD *a8, unsigned int *a9, uint64_t *a10, _DWORD *a11, uint64_t *a12)
{
  unsigned int *v17;
  unsigned int v18;
  void *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  const char *v23;
  uint64_t v24;
  unsigned int *v25;
  uint64_t *v26;
  unsigned int v27;
  unint64_t v28;
  _DWORD *v29;
  unint64_t v30;
  int v31;
  void *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  _DWORD *v36;
  float *v37;
  uint64_t v38;
  float *v39;
  uint64_t v40;
  uint64_t v41;
  float *v42;
  uint64_t v43;
  uint64_t v44;
  int v45;
  uint64_t v46;
  unsigned int v47;
  char v48;
  float *v49;
  uint64_t v50;
  uint64_t v51;
  const char *v52;
  uint64_t v53;
  unsigned int v54;
  unint64_t v55;
  int v56;
  uint64_t v57;
  uint64_t v58;
  float *v59;
  char v60;
  int v61;
  unsigned int *v62;
  _DWORD *v63;
  uint64_t v64;
  unsigned int v65;
  _DWORD *v66;
  uint64_t v67;
  uint64_t v68;
  char *v69;
  uint64_t v70;
  void *v71;
  unsigned int v72;
  float v73;
  float v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  const char *v78;
  uint64_t v79;
  int *v80;
  unsigned int *v81;
  float v82;
  uint64_t v83;
  uint64_t v84;
  int *v85;
  uint64_t v86;
  unsigned int v87;
  unsigned int v88;
  int *v89;
  uint64_t v90;
  char v91;
  int v92;
  float32x2_t *v93;
  uint64_t v94;
  BOOL v95;
  uint64_t v96;
  unsigned int v97;
  float v98;
  float v99;
  float v100;
  float v101;
  float v102;
  float v103;
  float *v104;
  float *v105;
  float v106;
  float v107;
  float v108;
  float v109;
  float v110;
  float v111;
  unsigned int v112;
  _DWORD *v113;
  int v114;
  int v115;
  float *v116;
  uint64_t v117;
  int v118;
  unsigned int *v119;
  float *v120;
  float *v121;
  float *v122;
  float v123;
  float v124;
  float v125;
  float v126;
  float v127;
  float v128;
  float v129;
  float v130;
  float v131;
  float v132;
  float v133;
  float v134;
  float v135;
  float v136;
  float v137;
  float v138;
  float32x2_t v139;
  float v140;
  float v141;
  float32_t v142;
  char v143;
  uint64_t v144;
  unsigned int v145;
  char *v146;
  char v147;
  uint64_t v148;
  float *v149;
  float v150;
  float v151;
  float v152;
  uint64_t v153;
  float *v154;
  float v155;
  float v156;
  float *v157;
  float v158;
  unint64_t v159;
  char v160;
  unint64_t v161;
  unsigned int v162;
  char *v163;
  char v164;
  float *v165;
  float *v166;
  float v167;
  uint64_t v168;
  uint64_t v169;
  unsigned int v170;
  float *v171;
  uint64_t v172;
  unsigned __int8 v173;
  float *v174;
  float v175;
  float v176;
  char v177;
  float v178;
  float *v179;
  float v180;
  uint64_t v181;
  uint64_t v182;
  unsigned int v183;
  unsigned __int8 *v184;
  uint64_t v185;
  unsigned int v186;
  unsigned int v187;
  uint64_t v188;
  const char *v189;
  _DWORD *v190;
  float *v191;
  uint64_t v192;
  unsigned int v193;
  uint64_t v194;
  uint64_t v195;
  _DWORD *v196;
  uint64_t v197;
  unsigned int v198;
  unsigned __int8 *v199;
  unsigned int i;
  int v201;
  int v202;
  int v203;
  float *v204;
  float *v205;
  float v206;
  float v207;
  float v208;
  float v209;
  float v210;
  float v211;
  float v212;
  float v213;
  uint64_t v214;
  uint64_t v215;
  char *v216;
  void *v217;
  unint64_t v218;
  float v219;
  float v220;
  _DWORD *v221;
  float v222;
  int v223;
  float *v224;
  float *v225;
  float *v226;
  float v227;
  float v228;
  float v229;
  float v230;
  float v231;
  float v232;
  float v233;
  float v234;
  float v235;
  float v236;
  float v237;
  float v238;
  float v239;
  float v240;
  float v241;
  float v242;
  uint64_t v243;
  void *v244;
  unsigned int v245;
  unint64_t v246;
  unsigned __int8 *v247;
  int v248;
  uint64_t v249;
  uint64_t v251;
  unint64_t v252;
  uint64_t v253;
  uint64_t v254;
  uint64_t v255;
  uint64_t v256;
  uint64_t v257;
  unsigned __int8 v258;
  _QWORD *v259;
  _DWORD *v260;
  unsigned int *v262;
  void *__src;
  uint64_t v264;
  _DWORD v265[3];
  unsigned int v266;
  uint64_t v267;
  uint64_t v268;
  int *v269;
  uint64_t v270;
  _DWORD v271[3];

  *(_QWORD *)(a1 + 32) = 0;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)(a1 + 68) = *a4;
  v17 = (unsigned int *)(a1 + 68);
  v18 = *a2;
  *(_BYTE *)(*(_QWORD *)(a1 + 56) + 38) = *a2;
  v19 = (void *)(*(uint64_t (**)(uint64_t, uint64_t, const char *, const char *, uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24)
                                                                                                 + 16))(physx::shdfnd::Foundation::mInstance + 24, 12 * v18 + 12, "NonTrackedAlloc", "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/physxcooking/src/convex/ConvexPolygonsBuilder.cpp", 996);
  *(_QWORD *)a1 = v19;
  memcpy(v19, a3, 12 * *(unsigned __int8 *)(*(_QWORD *)(a1 + 56) + 38));
  v20 = *v17;
  v259 = a8;
  v260 = a7;
  if ((_DWORD)v20)
  {
    v21 = 12 * v20;
    v22 = physx::shdfnd::Foundation::mInstance;
    if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)physx::shdfnd::Foundation::mInstance + 40))(physx::shdfnd::Foundation::mInstance))
      v23 = "static const char *physx::shdfnd::ReflectionAllocator<physx::HullTriangleData>::getName() [T = physx::HullTriangleData]";
    else
      v23 = "<allocation names disabled>";
    v24 = (*(uint64_t (**)(uint64_t, uint64_t, const char *, const char *, uint64_t))(*(_QWORD *)(v22 + 24) + 16))(v22 + 24, v21, v23, "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/physxcooking/src/convex/ConvexPolygonsBuilder.cpp", 999);
    v25 = (unsigned int *)v24;
    *(_QWORD *)(a1 + 72) = v24;
    v26 = (uint64_t *)(a1 + 72);
    if (*(_DWORD *)(a1 + 68))
    {
      v27 = 0;
      v28 = 0;
      v29 = (_DWORD *)(v24 + 4);
      do
      {
        *(v29 - 1) = *(_DWORD *)(a5 + 4 * v27);
        *v29 = *(_DWORD *)(a5 + 4 * (v27 + 1));
        v29[1] = *(_DWORD *)(a5 + 4 * (v27 + 2));
        ++v28;
        v30 = *v17;
        v27 += 3;
        v29 += 3;
      }
      while (v28 < v30);
    }
    else
    {
      LODWORD(v30) = 0;
    }
  }
  else
  {
    v25 = 0;
    LODWORD(v30) = 0;
    *(_QWORD *)(a1 + 72) = 0;
    v26 = (uint64_t *)(a1 + 72);
  }
  LOBYTE(v31) = *(_BYTE *)(*(_QWORD *)(a1 + 56) + 38);
  v32 = *(void **)a1;
  physx::MeshCleaner::MeshCleaner((uint64_t)&v262, v31, *(float **)a1, v30, v25, 0.0);
  v33 = HIDWORD(v262);
  if (HIDWORD(v262))
  {
    v31 = (int)v262;
    *v17 = HIDWORD(v262);
    memcpy(v32, __src, (12 * v31));
    v34 = 0;
    v35 = v264;
    v36 = v25 + 1;
    do
    {
      *(v36 - 1) = *(_DWORD *)(v35 + 4 * v34);
      *v36 = *(_DWORD *)(v35 + 4 * (v34 + 1));
      v36[1] = *(_DWORD *)(v35 + 4 * (v34 + 2));
      v34 += 3;
      v36 += 3;
    }
    while (3 * v33 != v34);
    TestDuplicateTriangles(v17, (uint64_t)v25, 1);
    TestUnifiedNormals(v31, (uint64_t)v32, *v17, (uint64_t)v25, 1);
    TestUnifiedNormals(v31, (uint64_t)v32, *v17, (uint64_t)v25, 1);
    TestDuplicateTriangles(v17, (uint64_t)v25, 1);
  }
  physx::MeshCleaner::~MeshCleaner((physx::MeshCleaner *)&v262);
  *(_BYTE *)(*(_QWORD *)(a1 + 56) + 38) = v31;
  v37 = *(float **)a1;
  LODWORD(v262) = *(_DWORD *)(a1 + 68);
  if (!TestDuplicateTriangles((unsigned int *)&v262, (uint64_t)v25, 0)
    || (TestUnifiedNormals(v31, (uint64_t)v37, v262, (uint64_t)v25, 0) & 1) == 0)
  {
    goto LABEL_197;
  }
  *(_BYTE *)(*(_QWORD *)(a1 + 56) + 39) = 0;
  if (*(_QWORD *)(a1 + 16))
    (*(void (**)(uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
  *(_QWORD *)(a1 + 16) = 0;
  if (*(_QWORD *)(a1 + 32))
    (*(void (**)(uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
  *(_QWORD *)(a1 + 32) = 0;
  if (*(_QWORD *)(a1 + 8))
    (*(void (**)(uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
  *(_QWORD *)(a1 + 8) = 0;
  v262 = 0;
  __src = 0;
  v269 = 0;
  v270 = 0;
  v267 = 0;
  v268 = 0;
  v266 = 0;
  v45 = 0;
  if (!extractHullPolygons(&v266, (uint64_t)&v262, (uint64_t *)a1, (uint64_t)&v269, (uint64_t)&v267))
    goto LABEL_179;
  v46 = *(_QWORD *)(a1 + 56);
  v47 = *(unsigned __int8 *)(v46 + 38);
  if (!(_DWORD)v268)
  {
    v49 = *(float **)a1;
    v54 = v266;
    goto LABEL_56;
  }
  v48 = v47 - v268;
  if ((_BYTE)v47 == (_BYTE)v268)
  {
    v49 = 0;
    if (*(_BYTE *)(v46 + 38))
      goto LABEL_27;
  }
  else
  {
    v49 = (float *)(*(uint64_t (**)(uint64_t, uint64_t, const char *, const char *, uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 16))(physx::shdfnd::Foundation::mInstance + 24, 12 * (v47 - v268), "NonTrackedAlloc", "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/physxcooking/src/convex/ConvexPolygonsBuilder.cpp", 1057);
    v46 = *(_QWORD *)(a1 + 56);
    v47 = *(unsigned __int8 *)(v46 + 38);
    if (*(_BYTE *)(v46 + 38))
    {
LABEL_27:
      v50 = v47;
      v51 = physx::shdfnd::Foundation::mInstance;
      if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)physx::shdfnd::Foundation::mInstance + 40))(physx::shdfnd::Foundation::mInstance))
        v52 = "static const char *physx::shdfnd::ReflectionAllocator<unsigned char>::getName() [T = unsigned char]";
      else
        v52 = "<allocation names disabled>";
      v53 = (*(uint64_t (**)(uint64_t, uint64_t, const char *, const char *, uint64_t))(*(_QWORD *)(v51 + 24)
                                                                                             + 16))(v51 + 24, v50, v52, "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/physxcooking/src/convex/ConvexPolygonsBuilder.cpp", 1058);
      v46 = *(_QWORD *)(a1 + 56);
      goto LABEL_34;
    }
  }
  v53 = 0;
LABEL_34:
  if (*(_BYTE *)(v46 + 38))
  {
    v55 = 0;
    v56 = 0;
    do
    {
      if ((_DWORD)v268)
      {
        v57 = 0;
        while (*(_DWORD *)(v267 + 4 * v57) != (_DWORD)v55)
        {
          if (v268 == ++v57)
            goto LABEL_43;
        }
      }
      else
      {
        LODWORD(v57) = 0;
      }
      if ((_DWORD)v57 == (_DWORD)v268)
      {
LABEL_43:
        v58 = *(_QWORD *)a1 + 12 * v55;
        v59 = &v49[3 * v56];
        *(_QWORD *)v59 = *(_QWORD *)v58;
        v59[2] = *(float *)(v58 + 8);
        v60 = v56++;
      }
      else
      {
        v60 = -1;
      }
      *(_BYTE *)(v53 + v55++) = v60;
    }
    while (v55 < *(unsigned __int8 *)(*(_QWORD *)(a1 + 56) + 38));
  }
  v54 = v266;
  if (v266)
  {
    v61 = 0;
    v62 = v262;
    do
    {
      v65 = *v62;
      v63 = v62 + 1;
      v64 = v65;
      v66 = v63;
      v67 = v65;
      if (v65)
      {
        do
        {
          *v66 = *(unsigned __int8 *)(v53 + *v66);
          ++v66;
          --v67;
        }
        while (v67);
      }
      else
      {
        v64 = 0;
      }
      v62 = &v63[v64];
      ++v61;
    }
    while (v61 != v54);
  }
  if (v53)
    (*(void (**)(uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
  LOBYTE(v47) = v48;
LABEL_56:
  if (v54 >= 0x100)
  {
    v68 = physx::shdfnd::Foundation::mInstance;
    v69 = "ConvexHullBuilder: convex hull has more than 255 polygons!";
    v70 = 1096;
LABEL_58:
    physx::shdfnd::Foundation::error(v68, 32, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/physxcooking/src/convex/ConvexPolygonsBuilder.cpp", v70, v69, v38, (uint64_t)v39, v40, v258);
    goto LABEL_59;
  }
  v258 = v47;
  *(_BYTE *)(*(_QWORD *)(a1 + 56) + 39) = v54;
  if (v54)
  {
    v71 = (void *)(*(uint64_t (**)(uint64_t, _QWORD, const char *, const char *, uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24)
                                                                                                  + 16))(physx::shdfnd::Foundation::mInstance + 24, 20 * v54, "NonTrackedAlloc", "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/physxcooking/src/convex/ConvexPolygonsBuilder.cpp", 1102);
    v72 = *(unsigned __int8 *)(*(_QWORD *)(a1 + 56) + 39);
  }
  else
  {
    v72 = 0;
    v71 = 0;
  }
  *(_QWORD *)(a1 + 8) = v71;
  bzero(v71, 20 * v72);
  v74 = physx::ConvexHullBuilder::computeGeomCenter(*(_QWORD *)a1, *(_BYTE *)(*(_QWORD *)(a1 + 56) + 38), (uint64_t)v265, *(_DWORD *)(a1 + 68), *(_QWORD *)(a1 + 72), v73);
  v75 = __src - v54;
  if ((_DWORD)__src == v54)
  {
    v76 = 0;
  }
  else
  {
    v77 = physx::shdfnd::Foundation::mInstance;
    if ((*(unsigned int (**)(uint64_t, float))(*(_QWORD *)physx::shdfnd::Foundation::mInstance + 40))(physx::shdfnd::Foundation::mInstance, v74))
    {
      v78 = "static const char *physx::shdfnd::ReflectionAllocator<unsigned char>::getName() [T = unsigned char]";
    }
    else
    {
      v78 = "<allocation names disabled>";
    }
    v76 = (*(uint64_t (**)(uint64_t, uint64_t, const char *, const char *, uint64_t))(*(_QWORD *)(v77 + 24) + 16))(v77 + 24, v75, v78, "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/physxcooking/src/convex/ConvexPolygonsBuilder.cpp", 1113);
  }
  *(_QWORD *)(a1 + 16) = v76;
  if (v54)
  {
    v79 = 0;
    v80 = v269;
    v81 = v262;
    v82 = *(float *)v265;
    v83 = *(_QWORD *)(a1 + 8);
    do
    {
      v84 = v83 + 20 * v79;
      *(_WORD *)(v84 + 16) = v76 - *(_DWORD *)(a1 + 16);
      v87 = *v81;
      v85 = (int *)(v81 + 1);
      v86 = v87;
      *(_BYTE *)(v84 + 18) = v87;
      if (v87)
      {
        v88 = 0;
        v89 = v85;
        v90 = v86;
        do
        {
          v92 = *v89++;
          v91 = v92;
          if (v92 == 255)
            --*(_BYTE *)(*(_QWORD *)(a1 + 8) + 20 * v79 + 18);
          else
            *(_BYTE *)(v76 + v88++) = v91;
          --v90;
        }
        while (v90);
        v83 = *(_QWORD *)(a1 + 8);
        v93 = (float32x2_t *)(v83 + 20 * v79);
        v94 = v93[2].u8[2];
        v95 = v76 != 0;
        if (v76 && v49 && v93[2].i8[2])
        {
          v96 = 0;
          v97 = v94 - 1;
          v98 = 0.0;
          v99 = 0.0;
          v100 = 0.0;
          v101 = 0.0;
          v102 = 0.0;
          v103 = 0.0;
          do
          {
            v104 = &v49[3 * *(unsigned __int8 *)(v76 + v97)];
            v105 = &v49[3 * *(unsigned __int8 *)(v76 + v96)];
            v106 = v104[1];
            v107 = v105[1];
            v108 = v104[2];
            v109 = v105[2];
            v98 = v98 + (float)((float)(v106 - v107) * (float)(v108 + v109));
            v99 = v99 + (float)((float)(v108 - v109) * (float)(*v104 + *v105));
            v100 = v100 + (float)((float)(*v104 - *v105) * (float)(v106 + v107));
            v101 = v101 + *v105;
            v102 = v102 + v107;
            v103 = v103 + v109;
            v97 = v96++;
          }
          while (v94 != v96);
          v93->f32[0] = v98;
          v93->f32[1] = v99;
          v93[1].f32[0] = v100;
          v110 = sqrtf((float)((float)(v99 * v99) + (float)(v98 * v98)) + (float)(v100 * v100));
          if (v110 > 0.0)
          {
            v111 = 1.0 / v110;
            v98 = v98 * v111;
            v99 = v99 * v111;
            v93->f32[0] = v98;
            v93->f32[1] = v99;
            v100 = v100 * v111;
            v93[1].f32[0] = v100;
          }
          v93[1].f32[1] = (float)-(float)((float)((float)(v102 * v99) + (float)(v101 * v98)) + (float)(v103 * v100))
                        / (float)v94;
          v95 = 1;
        }
        v112 = v94;
      }
      else
      {
        LODWORD(v94) = 0;
        v112 = 0;
        v93 = (float32x2_t *)(v83 + 20 * v79);
        v95 = v76 != 0;
      }
      v113 = v80 + 1;
      v114 = *v80;
      if (*v80)
      {
        v115 = 0;
        v116 = *(float **)a1;
        v117 = 4 * (v114 - 1);
LABEL_89:
        ++v113;
        v118 = v115;
        do
        {
          v119 = (unsigned int *)(*(_QWORD *)(a1 + 72) + 12 * *(v113 - 1));
          v120 = &v116[3 * *v119];
          v121 = &v116[3 * v119[1]];
          v122 = &v116[3 * v119[2]];
          v123 = v120[1];
          v124 = *v121 - *v120;
          v125 = v121[1] - v123;
          v126 = *v122 - *v120;
          v127 = v120[2];
          v128 = v121[2] - v127;
          v129 = v122[1] - v123;
          v130 = v122[2] - v127;
          v131 = (float)(v125 * v130) - (float)(v128 * v129);
          v132 = (float)(v128 * v126) - (float)(v124 * v130);
          v133 = (float)(v124 * v129) - (float)(v125 * v126);
          v134 = (float)((float)(v132 * v132) + (float)(v131 * v131)) + (float)(v133 * v133);
          v135 = 0.0;
          v136 = 0.0;
          v137 = 0.0;
          if (v134 > 0.0)
          {
            v138 = 1.0 / sqrtf(v134);
            v135 = v131 * v138;
            v136 = v132 * v138;
            v137 = v133 * v138;
          }
          if (!v118)
          {
            v139 = *v93;
            v140 = vmlas_n_f32(vmuls_lane_f32(v136, *v93, 1), v135, COERCE_FLOAT(*v93));
            v141 = v93[1].f32[0];
            if ((float)(v140 + (float)(v137 * v141)) < 0.0)
            {
              v115 = 1;
              if (v114 != 1)
                goto LABEL_89;
              v80 = (int *)((char *)v80 + v117 + 8);
              goto LABEL_100;
            }
          }
          ++v118;
          ++v113;
        }
        while (v114 != v118);
        v80 = (int *)((char *)v80 + v117 + 8);
        if ((v115 & 1) == 0)
          goto LABEL_107;
        v139 = *v93;
        v141 = v93[1].f32[0];
LABEL_100:
        *v93 = vneg_f32(v139);
        v142 = -v93[1].f32[1];
        v93[1].f32[0] = -v141;
        v93[1].f32[1] = v142;
        v143 = !v95;
        if (v112 < 2)
          v143 = 1;
        if ((v143 & 1) == 0)
        {
          v144 = v94 >> 1;
          v145 = v94 - 1;
          v146 = (char *)v76;
          do
          {
            v147 = *v146;
            *v146++ = *(_BYTE *)(v76 + v145);
            *(_BYTE *)(v76 + v145--) = v147;
            --v144;
          }
          while (v144);
          v83 = *(_QWORD *)(a1 + 8);
        }
      }
      else
      {
        ++v80;
      }
LABEL_107:
      v148 = *(unsigned __int8 *)(*(_QWORD *)(a1 + 56) + 38);
      v149 = (float *)(v83 + 20 * v79);
      if (*(_BYTE *)(*(_QWORD *)(a1 + 56) + 38))
      {
        v150 = *v149;
        v151 = v149[1];
        v152 = v149[2];
        v153 = v83 + 20 * v79;
        v155 = *(float *)(v153 + 12);
        v154 = (float *)(v153 + 12);
        v156 = v155;
        v157 = (float *)(*(_QWORD *)a1 + 8);
        do
        {
          v158 = -(float)((float)((float)(v151 * *(v157 - 1)) + (float)(v150 * *(v157 - 2))) + (float)(v152 * *v157));
          if (v156 > v158)
          {
            *v154 = v158;
            v156 = v158;
          }
          v157 += 3;
          --v148;
        }
        while (v148);
      }
      else
      {
        v150 = *v149;
        v151 = v149[1];
        v152 = v149[2];
        v156 = v149[3];
      }
      if ((float)(v156
                 + (float)((float)((float)(v151 * *(float *)&v265[1]) + (float)(v82 * v150))
                         + (float)(*(float *)&v265[2] * v152))) > 0.0)
      {
        v159 = *(unsigned __int8 *)(v83 + 20 * v79 + 18);
        v160 = !v95;
        if (v159 < 2)
          v160 = 1;
        if ((v160 & 1) == 0)
        {
          v161 = v159 >> 1;
          v162 = v159 - 1;
          v163 = (char *)v76;
          do
          {
            v164 = *v163;
            *v163++ = *(_BYTE *)(v76 + v162);
            *(_BYTE *)(v76 + v162--) = v164;
            --v161;
          }
          while (v161);
          v83 = *(_QWORD *)(a1 + 8);
          v165 = (float *)(v83 + 20 * v79);
          v150 = *v165;
          v151 = v165[1];
          v152 = v165[2];
          v156 = v165[3];
        }
        v166 = (float *)(v83 + 20 * v79);
        *v166 = -v150;
        v166[1] = -v151;
        v166[2] = -v152;
        v166[3] = -v156;
      }
      v81 = (unsigned int *)&v85[v86];
      v76 += *(unsigned __int8 *)(v83 + 20 * v79++ + 18);
    }
    while (v79 != v54);
  }
  if (v49 != *(float **)a1)
  {
    memcpy(*(void **)a1, v49, 12 * v258);
    if (v49)
    {
      (*(void (**)(uint64_t, float *))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24, v49);
      v54 = v266;
    }
    *(_BYTE *)(*(_QWORD *)(a1 + 56) + 38) = v258;
  }
  v45 = 0;
  if (physx::ConvexHullBuilder::calculateVertexMapTable((physx::ConvexHullBuilder *)a1, v54, 0))
  {
    v168 = *(_QWORD *)(a1 + 56);
    if (v54)
    {
      v169 = 0;
      v170 = *(unsigned __int8 *)(v168 + 38);
      v171 = *(float **)a1;
      v172 = *(_QWORD *)(a1 + 8);
      do
      {
        if (v170)
        {
          v173 = 0;
          v174 = (float *)(v172 + 20 * v169);
          v167 = *v174;
          v175 = v174[1];
          v176 = v174[2];
          v177 = -1;
          v178 = 3.4028e38;
          v179 = v171;
          do
          {
            v180 = v179[2];
            if ((float)((float)((float)(v175 * v179[1]) + (float)(*v179 * v167)) + (float)(v180 * v176)) < v178)
            {
              v178 = (float)((float)(v175 * v179[1]) + (float)(*v179 * v167)) + (float)(v180 * v176);
              v177 = v173;
            }
            ++v173;
            v179 += 3;
          }
          while (v170 > v173);
        }
        else
        {
          v177 = -1;
        }
        *(_BYTE *)(v172 + 20 * v169++ + 19) = v177;
      }
      while (v169 != v54);
    }
    v181 = *(unsigned __int8 *)(v168 + 39);
    if (*(_BYTE *)(v168 + 39))
    {
      v182 = *(_QWORD *)(a1 + 8);
      if (v182)
      {
        v183 = 0;
        v184 = (unsigned __int8 *)(v182 + 18);
        v185 = v181;
        do
        {
          v187 = *v184;
          v184 += 20;
          v186 = v187;
          if (v187 <= 2)
          {
            v68 = physx::shdfnd::Foundation::mInstance;
            v69 = "ConvexHullBuilder::CreateTrianglesFromPolygons: convex hull has a polygon with less than 3 vertices!";
            v70 = 1232;
            goto LABEL_58;
          }
          v183 = v183 + v186 - 2;
          --v185;
        }
        while (v185);
        if (v183)
        {
          v188 = physx::shdfnd::Foundation::mInstance;
          if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)physx::shdfnd::Foundation::mInstance + 40))(physx::shdfnd::Foundation::mInstance))
            v189 = "static const char *physx::shdfnd::ReflectionAllocator<physx::HullTriangleData>::getName() [T = physx:"
                   ":HullTriangleData]";
          else
            v189 = "<allocation names disabled>";
          v190 = (_DWORD *)(*(uint64_t (**)(uint64_t, uint64_t, const char *, const char *, uint64_t))(*(_QWORD *)(v188 + 24) + 16))(v188 + 24, 12 * v183, v189, "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/physxcooking/src/convex/ConvexPolygonsBuilder.cpp", 1238);
          LODWORD(v181) = *(unsigned __int8 *)(*(_QWORD *)(a1 + 56) + 39);
        }
        else
        {
          v190 = 0;
        }
        v191 = *(float **)a1;
        if ((_DWORD)v181)
        {
          v192 = 0;
          v193 = 0;
          v195 = *(_QWORD *)(a1 + 8);
          v194 = *(_QWORD *)(a1 + 16);
          v196 = v190;
          do
          {
            v197 = v195 + 20 * v192;
            v198 = *(unsigned __int8 *)(v197 + 18);
            if (v198 != 2)
            {
              v199 = (unsigned __int8 *)(v194 + *(unsigned __int16 *)(v197 + 16));
              for (i = 2; i != v198; ++i)
              {
                v201 = *v199;
                *v196 = v201;
                v202 = v199[(i - 1) % v198];
                v196[1] = v202;
                v203 = v199[i % v198];
                v196[2] = v203;
                v204 = &v191[3 * v201];
                v205 = &v191[3 * v202];
                v42 = &v191[3 * v203];
                v206 = v204[1];
                v207 = *v205 - *v204;
                v208 = v205[1] - v206;
                v209 = *v42 - *v204;
                v210 = v204[2];
                v211 = v205[2] - v210;
                v212 = v42[1] - v206;
                v213 = v42[2] - v210;
                v167 = (float)((float)((float)((float)(v211 * v209) - (float)(v207 * v213))
                                     * (float)((float)(v211 * v209) - (float)(v207 * v213)))
                             + (float)((float)((float)(v208 * v213) - (float)(v211 * v212))
                                     * (float)((float)(v208 * v213) - (float)(v211 * v212))))
                     + (float)((float)((float)(v207 * v212) - (float)(v208 * v209))
                             * (float)((float)(v207 * v212) - (float)(v208 * v209)));
                v196 += 3 * (v167 != 0.0);
                if (v167 != 0.0)
                  ++v193;
              }
            }
            ++v192;
          }
          while (v192 != v181);
        }
        else
        {
          v193 = 0;
        }
        v41 = *v26;
        if (*v26)
          (*(void (**)(uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
        *v26 = 0;
        if (v183 == v193)
        {
          v214 = (uint64_t)v190;
LABEL_171:
          *(_QWORD *)(a1 + 72) = v214;
          *(_DWORD *)(a1 + 68) = v193;
          physx::ConvexHullBuilder::computeGeomCenter(*(_QWORD *)a1, *(_BYTE *)(*(_QWORD *)(a1 + 56) + 38), (uint64_t)v271, v193, v214, v167);
          if (v193)
          {
            v218 = 0;
            v219 = *(float *)v271;
            v220 = *(float *)&v271[1];
            v221 = (_DWORD *)(v214 + 8);
            v222 = *(float *)&v271[2];
            do
            {
              v223 = *(v221 - 1);
              v224 = &v191[3 * *(v221 - 2)];
              v225 = &v191[3 * v223];
              v226 = &v191[3 * *v221];
              v227 = v224[1];
              v228 = *v225 - *v224;
              v229 = v225[1] - v227;
              v230 = v224[2];
              v231 = v225[2] - v230;
              v232 = *v226 - *v224;
              v233 = v226[1] - v227;
              v234 = v226[2] - v230;
              v235 = (float)(v229 * v234) - (float)(v231 * v233);
              v236 = (float)(v231 * v232) - (float)(v228 * v234);
              v237 = (float)(v228 * v233) - (float)(v229 * v232);
              v238 = (float)((float)(v236 * v236) + (float)(v235 * v235)) + (float)(v237 * v237);
              v239 = 0.0;
              v240 = 0.0;
              v241 = 0.0;
              if (v238 > 0.0)
              {
                v242 = 1.0 / sqrtf(v238);
                v239 = v235 * v242;
                v240 = v236 * v242;
                v241 = v237 * v242;
              }
              if ((float)((float)((float)((float)(v220 * v240) + (float)(v219 * v239)) + (float)(v222 * v241))
                         - (float)((float)((float)(v227 * v240) + (float)(*v224 * v239)) + (float)(v230 * v241))) > 0.0)
              {
                *(v221 - 1) = *v221;
                *v221 = v223;
                v193 = *v17;
              }
              ++v218;
              v221 += 3;
            }
            while (v218 < v193);
          }
          v45 = 1;
          goto LABEL_179;
        }
        if (v193)
        {
          v215 = physx::shdfnd::Foundation::mInstance;
          v216 = (*(unsigned int (**)(uint64_t))(*(_QWORD *)physx::shdfnd::Foundation::mInstance + 40))(physx::shdfnd::Foundation::mInstance)
               ? "static const char *physx::shdfnd::ReflectionAllocator<physx::HullTriangleData>::getName() [T = physx::H"
                 "ullTriangleData]"
               : "<allocation names disabled>";
          v217 = (void *)(*(uint64_t (**)(uint64_t, uint64_t, char *, const char *, uint64_t))(*(_QWORD *)(v215 + 24) + 16))(v215 + 24, 12 * v193, v216, "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/physxcooking/src/convex/ConvexPolygonsBuilder.cpp", 1299);
          if (v217)
          {
            v214 = (uint64_t)v217;
            memcpy(v217, v190, 12 * v193);
            if (v190)
              v167 = (*(float (**)(uint64_t, _DWORD *))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24)
                                                                + 24))(physx::shdfnd::Foundation::mInstance + 24, v190);
            goto LABEL_171;
          }
        }
        if (v190)
          (*(void (**)(uint64_t, _DWORD *))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24, v190);
      }
    }
LABEL_59:
    v45 = 0;
  }
LABEL_179:
  if ((v268 & 0x8000000000000000) == 0 && (v268 & 0x7FFFFFFF00000000) != 0)
  {
    v41 = v267;
    if (v267)
      (*(void (**)(uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
  }
  if ((v270 & 0x8000000000000000) == 0 && (v270 & 0x7FFFFFFF00000000) != 0)
  {
    v41 = (uint64_t)v269;
    if (v269)
      (*(void (**)(uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
  }
  if ((HIDWORD(__src) & 0x80000000) == 0 && (HIDWORD(__src) & 0x7FFFFFFF) != 0)
  {
    v41 = (uint64_t)v262;
    if (v262)
      (*(void (**)(uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
  }
  if (!v45
    || (physx::ConvexHullBuilder::checkHullPolygons((float **)a1, v41, (uint64_t)v42, v43, v44, v38, v39, v40) & 1) == 0)
  {
LABEL_197:
    physx::shdfnd::Foundation::error(physx::shdfnd::Foundation::mInstance, 32, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/physxcooking/src/convex/ConvexMeshBuilder.cpp", 331, "ConvexMeshBuilder::computeHullPolygons: compute convex hull polygons failed. Provided triangles dont form a convex hull.", v38, (uint64_t)v39, v40, v258);
    return 0;
  }
  v243 = *(_QWORD *)(a1 + 56);
  *v260 = *(unsigned __int8 *)(v243 + 38);
  *a11 = *(unsigned __int8 *)(v243 + 39);
  v244 = (void *)(*(uint64_t (**)(uint64_t, uint64_t, const char *, const char *, uint64_t))(*(_QWORD *)a6 + 16))(a6, 12 * *v260, "PxVec3", "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/physxcooking/src/convex/ConvexMeshBuilder.cpp", 338);
  *v259 = v244;
  memcpy(v244, *(const void **)a1, (12 * *v260));
  *a9 = 0;
  if (*a11)
  {
    v245 = 0;
    v246 = 0;
    v247 = (unsigned __int8 *)(*(_QWORD *)(a1 + 8) + 18);
    do
    {
      v248 = *v247;
      v247 += 20;
      v245 += v248;
      *a9 = v245;
      ++v246;
    }
    while (v246 < *a11);
    v249 = 4 * v245;
  }
  else
  {
    v249 = 0;
  }
  v251 = (*(uint64_t (**)(uint64_t, uint64_t, const char *, const char *, uint64_t))(*(_QWORD *)a6 + 16))(a6, v249, "PxU32", "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/physxcooking/src/convex/ConvexMeshBuilder.cpp", 347);
  *a10 = v251;
  if (*a9)
  {
    v252 = 0;
    v253 = *(_QWORD *)(a1 + 16);
    do
    {
      *(_DWORD *)(v251 + 4 * v252) = *(unsigned __int8 *)(v253 + v252);
      ++v252;
    }
    while (v252 < *a9);
  }
  v254 = (*(uint64_t (**)(uint64_t, uint64_t, const char *, const char *, uint64_t))(*(_QWORD *)a6 + 16))(a6, 20 * *a11, "PxHullPolygon", "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/physxcooking/src/convex/ConvexMeshBuilder.cpp", 353);
  *a12 = v254;
  v255 = *a11;
  if ((_DWORD)v255)
  {
    v256 = v254 + 12;
    v257 = *(_QWORD *)(a1 + 8) + 12;
    do
    {
      *(_DWORD *)(v256 - 12) = *(_DWORD *)(v257 - 12);
      *(_DWORD *)(v256 - 8) = *(_DWORD *)(v257 - 8);
      *(_DWORD *)(v256 - 4) = *(_DWORD *)(v257 - 4);
      *(_DWORD *)v256 = *(_DWORD *)v257;
      *(_WORD *)(v256 + 4) = *(unsigned __int8 *)(v257 + 6);
      *(_WORD *)(v256 + 6) = *(_WORD *)(v257 + 4);
      v256 += 20;
      v257 += 20;
      --v255;
    }
    while (v255);
  }
  return 1;
}

void physx::ConvexPolygonsBuilder::~ConvexPolygonsBuilder(physx::ConvexPolygonsBuilder *this)
{
  if (*((_QWORD *)this + 9))
    (*(void (**)(uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
  *((_QWORD *)this + 9) = 0;
  physx::ConvexHullBuilder::~ConvexHullBuilder(this);
}

uint64_t extractHullPolygons(_DWORD *a1, uint64_t a2, uint64_t *a3, uint64_t a4, uint64_t a5)
{
  size_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  size_t v13;
  uint64_t v14;
  uint64_t v15;
  size_t v16;
  uint64_t v17;
  unsigned int v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  unsigned int v22;
  uint64_t v23;
  unsigned int v24;
  uint64_t v25;
  _BOOL4 v26;
  int v27;
  _DWORD *v28;
  int v29;
  _BOOL4 v31;
  int v32;
  _BOOL4 v33;
  int v34;
  uint64_t v35;
  uint64_t v36;
  int v37;
  int v38;
  uint64_t v39;
  uint64_t v40;
  int v41;
  int v42;
  int v43;
  uint64_t v44;
  unsigned int v45;
  uint64_t v46;
  int NeighborFace;
  int v48;
  unsigned int v49;
  uint64_t v50;
  int v51;
  int v52;
  unint64_t v53;
  char *v54;
  uint64_t v55;
  unint64_t v56;
  unsigned int v57;
  unsigned int v58;
  unsigned int v59;
  unsigned int v60;
  uint64_t v61;
  int v62;
  int v63;
  int v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  unsigned int v68;
  unsigned int *v69;
  unint64_t v70;
  int v71;
  _QWORD *v72;
  unsigned int *v73;
  uint64_t v74;
  unint64_t v75;
  unint64_t v76;
  unsigned int *v77;
  unsigned int v78;
  unsigned int v79;
  unsigned int *v80;
  unsigned int v81;
  unsigned int v82;
  BOOL v83;
  BOOL v84;
  uint64_t v85;
  unsigned int *v86;
  uint64_t v87;
  int v88;
  uint64_t v91;
  BOOL v92;
  unint64_t v93;
  uint64_t v94;
  unint64_t v95;
  _QWORD *v96;
  unsigned int v97;
  unsigned int v98;
  unsigned int v99;
  unsigned int v100;
  uint64_t v101;
  unsigned int v102;
  unsigned int *v103;
  uint64_t v104;
  unsigned int v105;
  unsigned int v106;
  uint64_t v107;
  uint64_t v108;
  char v109;
  _DWORD *v111;
  unint64_t v112;
  uint64_t v113;
  _DWORD *v114;
  unint64_t v115;
  uint64_t v116;
  uint64_t v117;
  int v118;
  unint64_t i;
  unsigned int v120;
  int v121;
  unsigned int v122;
  int v123;
  unint64_t v124;
  int v125;
  int v126;
  int v127;
  int v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  unsigned int v133;
  uint64_t v134;
  uint64_t v135;
  unsigned int v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  unint64_t v141;
  uint64_t v142;
  unsigned int j;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  size_t v152;
  uint64_t *v153;
  _DWORD *v154;
  uint64_t v155;
  uint64_t v156;
  char *v157;
  char *v158;
  unint64_t v159;
  uint64_t v160;
  _BOOL4 v161;
  uint64_t v162;
  unsigned int v163;
  int v164;
  int v165;
  int v166;
  uint64_t v167;
  _DWORD *v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  unsigned int v174;
  uint64_t v175;
  unsigned int v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  int v180;
  unsigned int v181;
  unsigned int v182;
  int v183;
  unsigned int v184;
  unint64_t v185;
  unsigned int v186;
  int v187;
  uint64_t v188;

  v154 = a1;
  v188 = *MEMORY[0x24BDAC8D0];
  v8 = *((unsigned int *)a3 + 17);
  v9 = *a3;
  v156 = *(unsigned __int8 *)(a3[7] + 38);
  v153 = a3;
  v10 = a3[9];
  v176 = v8;
  v167 = v10;
  v177 = v10;
  v178 = 0;
  v179 = v9;
  v180 = 1000593162;
  v174 = 0;
  v175 = 0;
  v11 = 0;
  if (!physx::AdjacenciesBuilder::Init(&v174, &v176))
    goto LABEL_261;
  v152 = v8;
  v12 = physx::Adjacencies::ComputeNbBoundaryEdges((physx::Adjacencies *)&v174);
  if ((_DWORD)v12)
  {
    v11 = 0;
    goto LABEL_261;
  }
  v13 = v152;
  MEMORY[0x24BDAC7A8](v12);
  v157 = (char *)&v149 - ((v152 + 15) & 0x1FFFFFFF0);
  bzero(v157, v152);
  MEMORY[0x24BDAC7A8](v14);
  v158 = (char *)&v149 - v15;
  bzero((char *)&v149 - v15, v16);
  *v154 = 0;
  v151 = a5;
  v150 = a4;
  v149 = a2;
  while (1)
  {
    if ((_DWORD)v13)
    {
      v17 = 0;
      v18 = v156;
      while (v157[v17])
      {
        if (v13 == ++v17)
          goto LABEL_243;
      }
    }
    else
    {
      v17 = 0;
      v18 = v156;
    }
    if ((_DWORD)v17 == (_DWORD)v13)
      break;
    v172 = 0;
    v173 = 0;
    v19 = v175;
    v155 = v17;
LABEL_13:
    extractHullPolygons(unsigned int &,physx::shdfnd::Array<unsigned int,physx::shdfnd::ReflectionAllocator<unsigned int>> &,physx::ConvexPolygonsBuilder const&,physx::shdfnd::Array<unsigned int,physx::shdfnd::ReflectionAllocator<unsigned int>>*,physx::shdfnd::Array<unsigned int,physx::shdfnd::ReflectionAllocator<unsigned int>> &)::Local::FloodFill((uint64_t)&v172, v19, v17, (uint64_t)v157);
    v20 = 0;
    v19 = v175;
    v21 = v173;
    v22 = 1;
    v23 = v172;
    v160 = v172;
    v159 = v173;
    while (v20 != v21)
    {
      v24 = *(_DWORD *)(v23 + 4 * v20);
      v162 = v20 + 1;
      if (v20 + 1 < v21)
      {
        v25 = v22;
        v26 = 1;
        v27 = v21;
        while (1)
        {
          v28 = (_DWORD *)(v19 + 12 * *(unsigned int *)(v23 + 4 * v25));
          v29 = v28[1];
          v31 = (*v28 & 0x20000000) == 0 || (*v28 & 0x1FFFFFFF) != v24;
          v32 = v29 & 0x1FFFFFFF;
          v33 = (v29 & 0x20000000) == 0 && v31;
          if (v32 == v24)
            v31 = v33;
          v34 = v28[2];
          if ((v34 & 0x1FFFFFFF) == v24)
          {
            if ((v34 & 0x20000000) != 0)
              LOBYTE(v31) = 0;
            if (!v31)
              goto LABEL_37;
          }
          else if (!v31)
          {
            goto LABEL_37;
          }
          v26 = ++v25 < v21;
          if (v22 == --v27)
            goto LABEL_37;
        }
      }
      v26 = 0;
LABEL_37:
      v161 = v26;
      v163 = v22;
      if (v167)
      {
        v35 = 0;
        v36 = v19 + 12 * v24;
        v37 = *(_DWORD *)(v167 + 12 * v24);
        v165 = *(_DWORD *)(v167 + 4 * (3 * v24 + 1));
        v166 = v37;
        v164 = *(_DWORD *)(v167 + 4 * (3 * v24 + 2));
        while (1)
        {
          if ((*(_DWORD *)(v36 + 4 * v35) & 0x20000000) == 0)
          {
            if ((_DWORD)v35 == 1)
              v38 = v166;
            else
              v38 = v165;
            v39 = 0;
            if ((_DWORD)v35 == 1)
              v40 = 2;
            else
              v40 = 1;
            if (!(_DWORD)v35)
              v39 = 1;
            v41 = *(_DWORD *)(v36 + 4 * v39);
            v42 = (_DWORD)v35 ? v38 : v166;
            v43 = (_DWORD)v35 ? v164 : v165;
            v44 = (_DWORD)v35 ? v40 : 2;
            v45 = v41 & 0x1FFFFFFF;
            LODWORD(v185) = 0;
            LODWORD(v170) = 0;
            v46 = v167;
            NeighborFace = extractHullPolygons(unsigned int &,physx::shdfnd::Array<unsigned int,physx::shdfnd::ReflectionAllocator<unsigned int>> &,physx::ConvexPolygonsBuilder const&,physx::shdfnd::Array<unsigned int,physx::shdfnd::ReflectionAllocator<unsigned int>>*,physx::shdfnd::Array<unsigned int,physx::shdfnd::ReflectionAllocator<unsigned int>> &)::Local::GetNeighborFace(v24, v42, v19, v167, (int *)&v185, (unsigned int *)&v170);
            LODWORD(v168) = 0;
            v184 = 0;
            v48 = extractHullPolygons(unsigned int &,physx::shdfnd::Array<unsigned int,physx::shdfnd::ReflectionAllocator<unsigned int>> &,physx::ConvexPolygonsBuilder const&,physx::shdfnd::Array<unsigned int,physx::shdfnd::ReflectionAllocator<unsigned int>>*,physx::shdfnd::Array<unsigned int,physx::shdfnd::ReflectionAllocator<unsigned int>> &)::Local::GetNeighborFace(v45, v42, v19, v46, (int *)&v168, &v184);
            if (NeighborFace)
            {
              if (v48 && (_DWORD)v185 == v184 && (_DWORD)v170 == (_DWORD)v168)
                break;
            }
            v49 = *(_DWORD *)(v36 + 4 * v44) & 0x1FFFFFFF;
            v50 = v167;
            v51 = extractHullPolygons(unsigned int &,physx::shdfnd::Array<unsigned int,physx::shdfnd::ReflectionAllocator<unsigned int>> &,physx::ConvexPolygonsBuilder const&,physx::shdfnd::Array<unsigned int,physx::shdfnd::ReflectionAllocator<unsigned int>>*,physx::shdfnd::Array<unsigned int,physx::shdfnd::ReflectionAllocator<unsigned int>> &)::Local::GetNeighborFace(v24, v43, v19, v167, (int *)&v185, (unsigned int *)&v170);
            v52 = extractHullPolygons(unsigned int &,physx::shdfnd::Array<unsigned int,physx::shdfnd::ReflectionAllocator<unsigned int>> &,physx::ConvexPolygonsBuilder const&,physx::shdfnd::Array<unsigned int,physx::shdfnd::ReflectionAllocator<unsigned int>>*,physx::shdfnd::Array<unsigned int,physx::shdfnd::ReflectionAllocator<unsigned int>> &)::Local::GetNeighborFace(v49, v43, v19, v50, (int *)&v168, &v184);
            if (v51)
            {
              if (v52 && (_DWORD)v185 == v184 && (_DWORD)v170 == (_DWORD)v168)
                break;
            }
          }
          if (++v35 == 3)
            goto LABEL_66;
        }
        v23 = v160;
LABEL_69:
        v53 = 0;
        v54 = v157;
        do
        {
          v55 = v19 + 12 * *(unsigned int *)(v23 + 4 * v53);
          *(_QWORD *)v55 |= 0x2000000020000000uLL;
          *(_DWORD *)(v55 + 8) |= 0x20000000u;
          v54[*(unsigned int *)(v23 + 4 * v53++)] = 0;
        }
        while (v53 < v173);
        LODWORD(v173) = 0;
        LODWORD(v17) = v155;
        goto LABEL_13;
      }
LABEL_66:
      v22 = v163 + 1;
      v20 = v162;
      v23 = v160;
      v21 = v159;
      if (v161)
        goto LABEL_69;
    }
    v170 = 0;
    v171 = 0;
    a2 = v149;
    if ((_DWORD)v21)
    {
      v56 = 0;
      do
      {
        v57 = *(_DWORD *)(v172 + 4 * v56);
        v58 = *(_DWORD *)(v167 + 12 * v57);
        v59 = *(_DWORD *)(v167 + 4 * (3 * v57 + 1));
        v60 = *(_DWORD *)(v167 + 4 * (3 * v57 + 2));
        v61 = v175;
        if ((*(_BYTE *)(v175 + 12 * v57 + 3) & 0x20) != 0)
        {
          LODWORD(v185) = *(_DWORD *)(v167 + 12 * v57);
          HIDWORD(v185) = v59;
          v62 = v171;
          if ((HIDWORD(v171) & 0x7FFFFFFFu) <= v171)
          {
            physx::shdfnd::Array<Pair,physx::shdfnd::ReflectionAllocator<Pair>>::growAndPushBack((uint64_t)&v170, &v185);
          }
          else
          {
            *(_QWORD *)(v170 + 8 * v171) = v185;
            LODWORD(v171) = v62 + 1;
          }
          v61 = v175;
        }
        if ((*(_BYTE *)(v61 + 12 * v57 + 7) & 0x20) != 0)
        {
          v185 = __PAIR64__(v60, v58);
          v63 = v171;
          if ((HIDWORD(v171) & 0x7FFFFFFFu) <= v171)
          {
            physx::shdfnd::Array<Pair,physx::shdfnd::ReflectionAllocator<Pair>>::growAndPushBack((uint64_t)&v170, &v185);
          }
          else
          {
            *(_QWORD *)(v170 + 8 * v171) = v185;
            LODWORD(v171) = v63 + 1;
          }
          v61 = v175;
        }
        if ((*(_BYTE *)(v61 + 12 * v57 + 11) & 0x20) != 0)
        {
          v185 = __PAIR64__(v60, v59);
          v64 = v171;
          if ((HIDWORD(v171) & 0x7FFFFFFFu) <= v171)
          {
            physx::shdfnd::Array<Pair,physx::shdfnd::ReflectionAllocator<Pair>>::growAndPushBack((uint64_t)&v170, &v185);
          }
          else
          {
            *(_QWORD *)(v170 + 8 * v171) = v185;
            LODWORD(v171) = v64 + 1;
          }
        }
        ++v56;
      }
      while (v56 < v173);
    }
    v168 = 0;
    v169 = 0;
    physx::shdfnd::Array<Pair,physx::shdfnd::ReflectionAllocator<Pair>>::copy<physx::shdfnd::ReflectionAllocator<Pair>>((unint64_t)&v185, (uint64_t)&v170);
    v68 = v186;
    v69 = (unsigned int *)v185;
    a5 = v151;
    a4 = v150;
    if (v186)
    {
LABEL_90:
      v70 = 0;
      v71 = -v68;
      v72 = v69 + 2;
      v73 = v69 + 5;
      v74 = 1;
      v75 = v68;
      do
      {
        v76 = v70 + 1;
        if (v70 + 1 < v75)
        {
          v77 = &v69[2 * v70];
          v79 = *v77;
          v78 = v77[1];
          v80 = &v69[2 * v74];
          v81 = *v80;
          v82 = v80[1];
          v83 = v81 == v79 && v82 == v78;
          if (v83 || (v82 == v79 ? (v84 = v81 == v78) : (v84 = 0), v84))
          {
            v92 = 1;
            v91 = v74;
LABEL_113:
            v93 = (v91 + 1);
            if (v93 < v68)
            {
              v94 = 2 * v91;
              do
              {
                *(_QWORD *)&v69[v94] = *(_QWORD *)&v69[2 * v93++];
                v94 += 2;
              }
              while (v93 < v68);
            }
            v95 = v68 - 1;
            if (v76 < v95)
            {
              v96 = v72;
              do
              {
                *(v96 - 1) = *v96;
                --v95;
                ++v96;
              }
              while (v74 != v95);
            }
            v68 -= 2;
            if (v92)
            {
              if (v68)
                goto LABEL_90;
              v186 = 0;
              goto LABEL_154;
            }
          }
          else
          {
            v85 = -2;
            v86 = v73;
            while (1)
            {
              v87 = v85;
              if (v71 == (_DWORD)v85)
                break;
              v88 = *(v86 - 1);
              v65 = *v86;
              if (v88 != v79 || (_DWORD)v65 != v78)
              {
                --v85;
                v86 += 2;
                if ((_DWORD)v65 != v79 || v88 != v78)
                  continue;
              }
              v91 = v70 - v87;
              v92 = v70 - v87 < v75;
              goto LABEL_113;
            }
          }
        }
        ++v74;
        ++v71;
        v73 += 2;
        ++v72;
        v70 = v76;
      }
      while (v76 != v75);
      v183 = -1;
      v184 = -1;
      if (!v68)
        goto LABEL_154;
      v97 = *v69;
      v183 = v69[1];
      v184 = v97;
      if ((HIDWORD(v169) & 0x7FFFFFFFu) <= v169)
      {
        physx::shdfnd::Array<unsigned int,physx::shdfnd::ReflectionAllocator<unsigned int>>::growAndPushBack((uint64_t)&v168, &v184);
        v98 = v169;
      }
      else
      {
        v168[v169] = v97;
        v98 = v169 + 1;
        LODWORD(v169) = v169 + 1;
      }
      if ((HIDWORD(v169) & 0x7FFFFFFFu) <= v98)
      {
        physx::shdfnd::Array<unsigned int,physx::shdfnd::ReflectionAllocator<unsigned int>>::growAndPushBack((uint64_t)&v168, &v183);
      }
      else
      {
        v168[v98] = v183;
        LODWORD(v169) = v169 + 1;
      }
      if (v68 < 2)
      {
        v186 = v68 - 1;
        goto LABEL_154;
      }
      memmove(v69, v69 + 2, 8 * v68 - 8);
      v99 = v68 - 1;
      v186 = v68 - 1;
      v100 = v183;
      do
      {
        v101 = 0;
        v102 = 1;
        v103 = v69;
        v104 = v99;
        while (1)
        {
          v182 = 0;
          v105 = *v103;
          v181 = 0;
          v182 = v105;
          v106 = v103[1];
          v181 = v106;
          if (v105 == v100)
            break;
          if (v106 == v100)
          {
            if ((HIDWORD(v169) & 0x7FFFFFFFu) <= v169)
            {
              physx::shdfnd::Array<unsigned int,physx::shdfnd::ReflectionAllocator<unsigned int>>::growAndPushBack((uint64_t)&v168, &v182);
            }
            else
            {
              v168[v169] = v105;
              LODWORD(v169) = v169 + 1;
            }
            v100 = v182;
            v183 = v182;
            v184 = v181;
            if ((int)v101 + 1 < v104)
            {
              v108 = 0;
              do
              {
                *(_QWORD *)&v103[2 * v108] = *(_QWORD *)&v69[2 * v102 + 2 * v108];
                ++v108;
              }
              while (v104 - v102 != v108);
            }
            goto LABEL_152;
          }
          ++v101;
          v103 += 2;
          ++v102;
          if (v104 == v101)
          {
            v109 = 0;
            goto LABEL_155;
          }
        }
        if ((HIDWORD(v169) & 0x7FFFFFFFu) <= v169)
        {
          physx::shdfnd::Array<unsigned int,physx::shdfnd::ReflectionAllocator<unsigned int>>::growAndPushBack((uint64_t)&v168, &v181);
        }
        else
        {
          v168[v169] = v106;
          LODWORD(v169) = v169 + 1;
        }
        v100 = v181;
        v183 = v181;
        v184 = v182;
        if ((int)v101 + 1 < v104)
        {
          v107 = 0;
          do
          {
            *(_QWORD *)&v103[2 * v107] = *(_QWORD *)&v69[2 * v102 + 2 * v107];
            ++v107;
          }
          while (v104 - v102 != v107);
        }
LABEL_152:
        v109 = 1;
        v99 = v104 - 1;
      }
      while ((_DWORD)v104 != 1);
    }
    else
    {
LABEL_154:
      v109 = 1;
    }
LABEL_155:
    if ((v187 & 0x80000000) == 0 && (v187 & 0x7FFFFFFF) != 0 && v69 != 0)
      (*(void (**)(uint64_t, unsigned int *))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24, v69);
    if ((v109 & 1) == 0)
    {
      physx::shdfnd::Foundation::error(physx::shdfnd::Foundation::mInstance, 8, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/physxcooking/src/convex/ConvexPolygonsBuilder.cpp", 943, "Meshmerizer::extractHullPolygons: line strip extraction failed", v65, v66, v67, v149);
      goto LABEL_167;
    }
    if (!(_DWORD)v169)
      goto LABEL_167;
    v111 = v168;
    v112 = (v169 - 1);
    LODWORD(v185) = v169 - 1;
    v113 = *(unsigned int *)(a2 + 8);
    if ((*(_DWORD *)(a2 + 12) & 0x7FFFFFFFu) <= v113)
    {
      physx::shdfnd::Array<unsigned int,physx::shdfnd::ReflectionAllocator<unsigned int>>::growAndPushBack(a2, &v185);
      if ((_DWORD)v112)
      {
LABEL_182:
        v114 = v111;
        v115 = v112;
        do
        {
          v116 = *v114;
          ++v158[v116];
          v117 = *(unsigned int *)(a2 + 8);
          if ((*(_DWORD *)(a2 + 12) & 0x7FFFFFFFu) <= v117)
          {
            physx::shdfnd::Array<unsigned int,physx::shdfnd::ReflectionAllocator<unsigned int>>::growAndPushBack(a2, v114);
          }
          else
          {
            *(_DWORD *)(*(_QWORD *)a2 + 4 * v117) = v116;
            ++*(_DWORD *)(a2 + 8);
          }
          ++v114;
          --v115;
        }
        while (v115);
      }
    }
    else
    {
      *(_DWORD *)(*(_QWORD *)a2 + 4 * v113) = v112;
      ++*(_DWORD *)(a2 + 8);
      if ((_DWORD)v112)
        goto LABEL_182;
    }
    ++*v154;
    v118 = v173;
    if ((_DWORD)v173)
    {
      for (i = 0; i < v173; ++i)
      {
        v120 = 3 * *(_DWORD *)(v172 + 4 * i);
        v121 = *(_DWORD *)(v167 + 4 * v120);
        LODWORD(v185) = v121;
        v122 = *(_DWORD *)(v167 + 4 * (v120 + 1));
        v184 = v122;
        v123 = *(_DWORD *)(v167 + 4 * (v120 + 2));
        v183 = v123;
        if ((_DWORD)v112)
        {
          v124 = 0;
          v125 = 0;
          v126 = 0;
          v127 = 0;
          do
          {
            v128 = v111[v124];
            v127 |= v121 == v128;
            v126 |= v122 == v128;
            v125 |= v123 == v128;
            if ((v127 & v126 & v125 & 1) != 0)
              break;
            ++v124;
          }
          while (v124 < v112);
          if ((v127 & 1) != 0)
            goto LABEL_212;
        }
        else
        {
          LOBYTE(v125) = 0;
          LOBYTE(v126) = 0;
        }
        v129 = *(unsigned int *)(a5 + 8);
        v130 = *(_QWORD *)a5;
        if ((_DWORD)v129)
        {
          v131 = 0;
          while (*(_DWORD *)(v130 + 4 * v131) != v121)
          {
            if (v129 == ++v131)
            {
              v132 = *(unsigned int *)(a5 + 8);
              goto LABEL_204;
            }
          }
          v132 = *(unsigned int *)(a5 + 8);
        }
        else
        {
          v132 = 0;
          LODWORD(v131) = 0;
        }
        if ((_DWORD)v131 == (_DWORD)v129)
        {
LABEL_204:
          if ((*(_DWORD *)(a5 + 12) & 0x7FFFFFFFu) > v129)
          {
            *(_DWORD *)(v130 + 4 * v132) = v121;
            v133 = *(_DWORD *)(a5 + 8) + 1;
            *(_DWORD *)(a5 + 8) = v133;
            if ((v126 & 1) != 0)
              goto LABEL_224;
            if (!v133)
              goto LABEL_214;
            goto LABEL_207;
          }
          physx::shdfnd::Array<unsigned int,physx::shdfnd::ReflectionAllocator<unsigned int>>::growAndPushBack(a5, &v185);
        }
LABEL_212:
        if ((v126 & 1) != 0)
          goto LABEL_224;
        v133 = *(_DWORD *)(a5 + 8);
        v130 = *(_QWORD *)a5;
        if (!v133)
        {
LABEL_214:
          v135 = 0;
          LODWORD(v134) = 0;
          goto LABEL_215;
        }
LABEL_207:
        v134 = 0;
        v135 = v133;
        while (*(_DWORD *)(v130 + 4 * v134) != v184)
        {
          if (v133 == ++v134)
            goto LABEL_216;
        }
LABEL_215:
        if ((_DWORD)v134 == v133)
        {
LABEL_216:
          if ((*(_DWORD *)(a5 + 12) & 0x7FFFFFFFu) > v133)
          {
            *(_DWORD *)(v130 + 4 * v135) = v184;
            v136 = *(_DWORD *)(a5 + 8) + 1;
            *(_DWORD *)(a5 + 8) = v136;
            if ((v125 & 1) == 0)
            {
              if (!v136)
                goto LABEL_226;
              goto LABEL_219;
            }
            goto LABEL_231;
          }
          physx::shdfnd::Array<unsigned int,physx::shdfnd::ReflectionAllocator<unsigned int>>::growAndPushBack(a5, &v184);
        }
LABEL_224:
        if ((v125 & 1) == 0)
        {
          v136 = *(_DWORD *)(a5 + 8);
          v130 = *(_QWORD *)a5;
          if (!v136)
          {
LABEL_226:
            v138 = 0;
            LODWORD(v137) = 0;
LABEL_227:
            if ((_DWORD)v137 == v136)
            {
LABEL_228:
              if ((*(_DWORD *)(a5 + 12) & 0x7FFFFFFFu) <= v136)
              {
                physx::shdfnd::Array<unsigned int,physx::shdfnd::ReflectionAllocator<unsigned int>>::growAndPushBack(a5, &v183);
              }
              else
              {
                *(_DWORD *)(v130 + 4 * v138) = v183;
                ++*(_DWORD *)(a5 + 8);
              }
            }
            goto LABEL_231;
          }
LABEL_219:
          v137 = 0;
          v138 = v136;
          while (*(_DWORD *)(v130 + 4 * v137) != v183)
          {
            if (v136 == ++v137)
              goto LABEL_228;
          }
          goto LABEL_227;
        }
LABEL_231:
        v118 = v173;
      }
    }
    if (a4)
    {
      LODWORD(v185) = v118;
      v139 = *(unsigned int *)(a4 + 8);
      if ((*(_DWORD *)(a4 + 12) & 0x7FFFFFFFu) <= v139)
      {
        physx::shdfnd::Array<unsigned int,physx::shdfnd::ReflectionAllocator<unsigned int>>::growAndPushBack(a4, &v185);
      }
      else
      {
        *(_DWORD *)(*(_QWORD *)a4 + 4 * v139) = v118;
        ++*(_DWORD *)(a4 + 8);
      }
      if ((_DWORD)v173)
      {
        v140 = 0;
        v141 = 0;
        do
        {
          v142 = *(unsigned int *)(a4 + 8);
          if ((*(_DWORD *)(a4 + 12) & 0x7FFFFFFFu) <= v142)
          {
            physx::shdfnd::Array<unsigned int,physx::shdfnd::ReflectionAllocator<unsigned int>>::growAndPushBack(a4, (_DWORD *)(v172 + v140));
          }
          else
          {
            *(_DWORD *)(*(_QWORD *)a4 + 4 * v142) = *(_DWORD *)(v172 + 4 * v141);
            ++*(_DWORD *)(a4 + 8);
          }
          ++v141;
          v140 += 4;
        }
        while (v141 < v173);
      }
    }
LABEL_167:
    if ((v169 & 0x8000000000000000) == 0 && (v169 & 0x7FFFFFFF00000000) != 0 && v168)
      (*(void (**)(uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
    if ((v171 & 0x8000000000000000) == 0 && (v171 & 0x7FFFFFFF00000000) != 0 && v170)
      (*(void (**)(uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
    if ((v173 & 0x8000000000000000) == 0 && (v173 & 0x7FFFFFFF00000000) != 0 && v172)
      (*(void (**)(uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
    v11 = 0;
    v13 = v152;
    if ((v109 & 1) == 0)
      goto LABEL_261;
  }
LABEL_243:
  LODWORD(v185) = 0;
  if (v18)
  {
    for (j = 0; j < v18; LODWORD(v185) = j)
    {
      if (v158[j] <= 2u)
      {
        v144 = *(unsigned int *)(a5 + 8);
        v145 = *(_QWORD *)a5;
        if ((_DWORD)v144)
        {
          v146 = 0;
          while (*(_DWORD *)(v145 + 4 * v146) != j)
          {
            if (v144 == ++v146)
            {
              v147 = *(unsigned int *)(a5 + 8);
              goto LABEL_254;
            }
          }
          v147 = *(unsigned int *)(a5 + 8);
        }
        else
        {
          v147 = 0;
          LODWORD(v146) = 0;
        }
        if ((_DWORD)v146 == (_DWORD)v144)
        {
LABEL_254:
          if ((*(_DWORD *)(a5 + 12) & 0x7FFFFFFFu) <= v144)
          {
            physx::shdfnd::Array<unsigned int,physx::shdfnd::ReflectionAllocator<unsigned int>>::growAndPushBack(a5, &v185);
            v18 = v156;
          }
          else
          {
            *(_DWORD *)(v145 + 4 * v147) = j;
            ++*(_DWORD *)(a5 + 8);
          }
        }
      }
      j = v185 + 1;
    }
  }
  v11 = 1;
  if (a4 && *(_DWORD *)(a5 + 8))
    checkRedundantVertices(v154, a2, v153[9], a4, (uint64_t *)a5);
LABEL_261:
  if (v175)
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24, v175 - 16);
  return v11;
}

uint64_t local::QuickHullFace::mergeAdjacentFace(uint64_t *a1, _QWORD *a2, uint64_t a3, float a4)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  float v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  float v23;
  float v24;
  float v25;
  float v26;
  int v27;
  float *v28;
  float v29;
  uint64_t v30;
  float v31;
  float v32;
  float v33;
  float v34;
  float v35;
  float v36;
  unsigned __int16 v37;
  float v38;
  float v39;
  float v40;
  float v41;
  float v42;
  float v43;
  float v44;
  float v45;
  float v46;
  float v47;
  float v48;
  uint64_t v49;
  uint64_t v50;

  v7 = *(_QWORD *)(a2[6] + 56);
  v50 = v7;
  v8 = *(unsigned int *)(a3 + 8);
  if ((*(_DWORD *)(a3 + 12) & 0x7FFFFFFFu) <= v8)
  {
    physx::shdfnd::Array<local::QuickHullFace *,physx::shdfnd::ReflectionAllocator<local::QuickHullFace *>>::growAndPushBack(a3, &v50);
  }
  else
  {
    *(_QWORD *)(*(_QWORD *)a3 + 8 * v8) = v7;
    *(_DWORD *)(a3 + 8) = v8 + 1;
  }
  *(_DWORD *)(v7 + 60) = 1;
  v9 = a2[6];
  v10 = *(_QWORD **)(v9 + 32);
  v11 = (_QWORD *)a2[4];
  while (1)
  {
    v9 = *(_QWORD *)(v9 + 40);
    if (*(_QWORD *)(v11[6] + 56) != v7)
      break;
    v11 = (_QWORD *)v11[4];
    if (v11 == (_QWORD *)a2[4])
      return 0;
  }
  v12 = a2[5];
  while (*(_QWORD *)(*(_QWORD *)(v12 + 48) + 56) == v7)
  {
    v10 = (_QWORD *)v10[4];
    v12 = *(_QWORD *)(v12 + 40);
    if (v12 == a2[5])
      return 0;
  }
  v14 = v10[5];
  if (v9 != v14)
  {
    v15 = v9;
    do
    {
      *(_QWORD *)(v15 + 56) = a1;
      v15 = *(_QWORD *)(v15 + 40);
    }
    while (v15 != v14);
  }
  if ((_QWORD *)*a1 == a2)
    *a1 = v12;
  v17 = local::QuickHullFace::connectHalfEdges(a1, v10, v12, a4);
  v49 = v16;
  if (v16)
  {
    v18 = *(unsigned int *)(a3 + 8);
    if ((*(_DWORD *)(a3 + 12) & 0x7FFFFFFFu) <= v18)
    {
      physx::shdfnd::Array<local::QuickHullFace *,physx::shdfnd::ReflectionAllocator<local::QuickHullFace *>>::growAndPushBack(a3, &v49);
    }
    else
    {
      *(_QWORD *)(*(_QWORD *)a3 + 8 * v18) = v16;
      *(_DWORD *)(a3 + 8) = v18 + 1;
    }
  }
  local::QuickHullFace::connectHalfEdges(a1, v11, v9, v17);
  v49 = v19;
  if (v19)
  {
    v20 = *(unsigned int *)(a3 + 8);
    if ((*(_DWORD *)(a3 + 12) & 0x7FFFFFFFu) <= v20)
    {
      physx::shdfnd::Array<local::QuickHullFace *,physx::shdfnd::ReflectionAllocator<local::QuickHullFace *>>::growAndPushBack(a3, &v49);
    }
    else
    {
      *(_QWORD *)(*(_QWORD *)a3 + 8 * v20) = v19;
      *(_DWORD *)(a3 + 8) = v20 + 1;
    }
  }
  v21 = 0;
  a1[3] = 0;
  *((_DWORD *)a1 + 8) = 0;
  v22 = *a1;
  v24 = *(float *)*a1;
  v23 = *(float *)(*a1 + 4);
  v25 = *(float *)(*a1 + 8);
  v26 = 0.0;
  v27 = 3;
  do
  {
    v28 = *(float **)(v22 + 40);
    v29 = (float)((float)((float)(v23 - v28[1]) * (float)(v23 - v28[1]))
                + (float)((float)(v24 - *v28) * (float)(v24 - *v28)))
        + (float)((float)(v25 - v28[2]) * (float)(v25 - v28[2]));
    if (v29 > v26)
      v21 = v22;
    v25 = v28[2];
    if (v29 > v26)
      v26 = v29;
    v23 = v28[1];
    v24 = *v28;
    v22 = *(_QWORD *)(v22 + 40);
    --v27;
  }
  while (v27);
  v30 = *(_QWORD *)(v21 + 40);
  v32 = *(float *)v21;
  v31 = *(float *)(v21 + 4);
  v33 = *(float *)v30 - *(float *)v21;
  v34 = *(float *)(v30 + 4) - v31;
  v35 = *(float *)(v21 + 8);
  v36 = *(float *)(v30 + 8) - v35;
  *((_DWORD *)a1 + 10) = *(_DWORD *)v21;
  *((float *)a1 + 11) = v31;
  *((float *)a1 + 12) = v35;
  v37 = 1;
  v38 = 0.0;
  v39 = 0.0;
  v40 = 0.0;
  do
  {
    ++v37;
    v32 = v32 + *(float *)v30;
    *((float *)a1 + 10) = v32;
    v31 = v31 + *(float *)(v30 + 4);
    *((float *)a1 + 11) = v31;
    v35 = v35 + *(float *)(v30 + 8);
    *((float *)a1 + 12) = v35;
    v30 = *(_QWORD *)(v30 + 40);
    v41 = *(float *)v30 - *(float *)v21;
    v42 = *(float *)(v30 + 4) - *(float *)(v21 + 4);
    v43 = *(float *)(v30 + 8) - *(float *)(v21 + 8);
    v40 = v40 + (float)((float)(v42 * (float)-v36) + (float)(v34 * v43));
    v39 = v39 + (float)((float)(v43 * (float)-v33) + (float)(v36 * v41));
    *((float *)a1 + 6) = v40;
    *((float *)a1 + 7) = v39;
    v38 = v38 + (float)((float)(v41 * (float)-v34) + (float)(v33 * v42));
    *((float *)a1 + 8) = v38;
  }
  while (v30 != v21);
  *((_WORD *)a1 + 4) = v37;
  v44 = sqrtf((float)((float)(v39 * v39) + (float)(v40 * v40)) + (float)(v38 * v38));
  if (v44 > 0.0)
  {
    v40 = v40 * (float)(1.0 / v44);
    v39 = v39 * (float)(1.0 / v44);
    *((float *)a1 + 6) = v40;
    *((float *)a1 + 7) = v39;
    v38 = v38 * (float)(1.0 / v44);
    *((float *)a1 + 8) = v38;
  }
  v45 = 1.0 / (float)v37;
  v46 = v45 * v32;
  *((float *)a1 + 9) = v44;
  *((float *)a1 + 10) = v46;
  v47 = v45 * v31;
  v48 = v45 * v35;
  *((float *)a1 + 11) = v47;
  *((float *)a1 + 12) = v48;
  *((float *)a1 + 13) = (float)((float)(v47 * v39) + (float)(v40 * v46)) + (float)(v38 * v48);
  return 1;
}

float local::QuickHullFace::connectHalfEdges(_QWORD *a1, _QWORD *a2, uint64_t a3, float result)
{
  uint64_t *v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  float v12;
  float v13;
  float v14;
  float v15;
  int v16;
  float *v17;
  float v18;
  uint64_t v19;
  float v20;
  float v21;
  float v22;
  float v23;
  float v24;
  float v25;
  unsigned __int16 v26;
  float v27;
  float v28;
  float v29;
  float v30;
  float v31;
  float v32;
  float v33;
  float v34;
  float v35;
  float v36;
  float v37;

  v4 = *(uint64_t **)(a2[6] + 56);
  v5 = *(_QWORD **)(a3 + 48);
  if (v4 == (uint64_t *)v5[7])
  {
    if ((_QWORD *)*a1 == a2)
      *a1 = a3;
    if (*((_WORD *)v4 + 4) == 3)
    {
      v6 = *(_QWORD *)(v5[4] + 48);
      *((_DWORD *)v4 + 15) = 1;
    }
    else
    {
      v6 = v5[5];
      v7 = *(_QWORD *)(v6 + 32);
      if (*v4 == v7)
        *v4 = v6;
      v8 = *(_QWORD *)(v7 + 32);
      *(_QWORD *)(v6 + 32) = v8;
      *(_QWORD *)(v8 + 40) = v6;
    }
    v9 = 0;
    v10 = a2[4];
    *(_QWORD *)(a3 + 32) = v10;
    *(_QWORD *)(v10 + 40) = a3;
    *(_QWORD *)(a3 + 48) = v6;
    *(_QWORD *)(v6 + 48) = a3;
    v4[3] = 0;
    *((_DWORD *)v4 + 8) = 0;
    v11 = *v4;
    v13 = *(float *)*v4;
    v12 = *(float *)(*v4 + 4);
    v14 = *(float *)(*v4 + 8);
    v15 = 0.0;
    v16 = 3;
    do
    {
      v17 = *(float **)(v11 + 40);
      v18 = (float)((float)((float)(v12 - v17[1]) * (float)(v12 - v17[1]))
                  + (float)((float)(v13 - *v17) * (float)(v13 - *v17)))
          + (float)((float)(v14 - v17[2]) * (float)(v14 - v17[2]));
      if (v18 > v15)
        v9 = v11;
      v14 = v17[2];
      if (v18 > v15)
        v15 = v18;
      v12 = v17[1];
      v13 = *v17;
      v11 = *(_QWORD *)(v11 + 40);
      --v16;
    }
    while (v16);
    v19 = *(_QWORD *)(v9 + 40);
    v21 = *(float *)v9;
    v20 = *(float *)(v9 + 4);
    v22 = *(float *)v19 - *(float *)v9;
    v23 = *(float *)(v19 + 4) - v20;
    v24 = *(float *)(v9 + 8);
    v25 = *(float *)(v19 + 8) - v24;
    *((_DWORD *)v4 + 10) = *(_DWORD *)v9;
    *((float *)v4 + 11) = v20;
    *((float *)v4 + 12) = v24;
    v26 = 1;
    v27 = 0.0;
    v28 = 0.0;
    v29 = 0.0;
    do
    {
      ++v26;
      v21 = v21 + *(float *)v19;
      v20 = v20 + *(float *)(v19 + 4);
      v24 = v24 + *(float *)(v19 + 8);
      *((float *)v4 + 10) = v21;
      *((float *)v4 + 11) = v20;
      *((float *)v4 + 12) = v24;
      v19 = *(_QWORD *)(v19 + 40);
      v30 = *(float *)v19 - *(float *)v9;
      v31 = *(float *)(v19 + 4) - *(float *)(v9 + 4);
      v32 = *(float *)(v19 + 8) - *(float *)(v9 + 8);
      v29 = v29 + (float)((float)(v31 * (float)-v25) + (float)(v23 * v32));
      v28 = v28 + (float)((float)(v32 * (float)-v22) + (float)(v25 * v30));
      *((float *)v4 + 6) = v29;
      *((float *)v4 + 7) = v28;
      v27 = v27 + (float)((float)(v30 * (float)-v23) + (float)(v22 * v31));
      *((float *)v4 + 8) = v27;
    }
    while (v19 != v9);
    *((_WORD *)v4 + 4) = v26;
    v33 = sqrtf((float)((float)(v28 * v28) + (float)(v29 * v29)) + (float)(v27 * v27));
    if (v33 > 0.0)
    {
      v29 = v29 * (float)(1.0 / v33);
      v28 = v28 * (float)(1.0 / v33);
      *((float *)v4 + 6) = v29;
      *((float *)v4 + 7) = v28;
      v27 = v27 * (float)(1.0 / v33);
      *((float *)v4 + 8) = v27;
    }
    v34 = 1.0 / (float)v26;
    v35 = v34 * v21;
    *((float *)v4 + 9) = v33;
    *((float *)v4 + 10) = v35;
    v36 = v34 * v20;
    v37 = v34 * v24;
    *((float *)v4 + 11) = v36;
    *((float *)v4 + 12) = v37;
    result = (float)((float)(v36 * v28) + (float)(v29 * v35)) + (float)(v27 * v37);
    *((float *)v4 + 13) = result;
  }
  else
  {
    a2[5] = a3;
    *(_QWORD *)(a3 + 32) = a2;
  }
  return result;
}

void local::QuickHull::~QuickHull(local::QuickHull *this)
{
  int v2;
  int v4;
  int v6;
  int v8;
  int v9;
  int v10;
  unint64_t v11;
  unint64_t i;
  int v13;
  unint64_t v15;
  unint64_t j;
  int v17;

  v2 = *((_DWORD *)this + 105);
  if ((v2 & 0x80000000) == 0 && (v2 & 0x7FFFFFFF) != 0 && *((_QWORD *)this + 51) != 0)
    (*(void (**)(uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
  v4 = *((_DWORD *)this + 101);
  if ((v4 & 0x80000000) == 0 && (v4 & 0x7FFFFFFF) != 0 && *((_QWORD *)this + 49) != 0)
    (*(void (**)(uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
  v6 = *((_DWORD *)this + 97);
  if ((v6 & 0x80000000) == 0 && (v6 & 0x7FFFFFFF) != 0 && *((_QWORD *)this + 47) != 0)
    (*(void (**)(uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
  v8 = *((_DWORD *)this + 93);
  if ((v8 & 0x80000000) == 0 && (v8 & 0x7FFFFFFF) != 0 && *((_QWORD *)this + 45))
    (*(void (**)(uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
  v9 = *((_DWORD *)this + 89);
  if ((v9 & 0x80000000) == 0 && (v9 & 0x7FFFFFFF) != 0 && *((_QWORD *)this + 43))
    (*(void (**)(uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
  v10 = *((_DWORD *)this + 33);
  if ((v10 & 0x80000000) == 0 && (v10 & 0x7FFFFFFF) != 0 && *((_QWORD *)this + 15))
    (*(void (**)(uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
  v11 = *((unsigned int *)this + 28);
  if ((_DWORD)v11)
  {
    for (i = 0; i < v11; ++i)
    {
      if (*(_QWORD *)(*((_QWORD *)this + 13) + 8 * i))
      {
        (*(void (**)(uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
        v11 = *((unsigned int *)this + 28);
      }
    }
  }
  *((_DWORD *)this + 28) = 0;
  v13 = *((_DWORD *)this + 29);
  if ((v13 & 0x80000000) == 0 && (v13 & 0x7FFFFFFF) != 0 && *((_QWORD *)this + 13) != 0)
    (*(void (**)(uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
  v15 = *((unsigned int *)this + 20);
  if ((_DWORD)v15)
  {
    for (j = 0; j < v15; ++j)
    {
      if (*(_QWORD *)(*((_QWORD *)this + 9) + 8 * j))
      {
        (*(void (**)(uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
        v15 = *((unsigned int *)this + 20);
      }
    }
  }
  *((_DWORD *)this + 20) = 0;
  v17 = *((_DWORD *)this + 21);
  if ((v17 & 0x80000000) == 0 && (v17 & 0x7FFFFFFF) != 0 && *((_QWORD *)this + 9) != 0)
    (*(void (**)(uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
}

uint64_t local::QuickHull::preallocate(local::QuickHull *this, unsigned int a2)
{
  unsigned int v4;
  unsigned int v5;
  uint64_t result;
  unsigned int v7;

  if (a2 <= 8)
    v4 = 8;
  else
    v4 = a2;
  *((_DWORD *)this + 7) = v4;
  *((_QWORD *)this + 6) = (*(uint64_t (**)(uint64_t, uint64_t, const char *, const char *, uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 16))(physx::shdfnd::Foundation::mInstance + 24, 32 * v4, "NonTrackedAlloc", "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/physxcooking/src/convex/QuickHullConvexHullLib.cpp", 734);
  local::MemBlock<local::QuickHullHalfEdge,false>::init((uint64_t)this + 56, 9 * *((_DWORD *)this + 7) - 18);
  v5 = 2 * *((_DWORD *)this + 7) - 4;
  result = local::MemBlock<local::QuickHullFace,true>::init((unsigned int *)this + 22, 2 * v5);
  if ((*((_DWORD *)this + 33) & 0x7FFFFFFFu) < v5)
    result = physx::shdfnd::Array<local::QuickHullFace *,physx::shdfnd::ReflectionAllocator<local::QuickHullFace *>>::recreate((uint64_t)this + 120, v5);
  if ((*((_DWORD *)this + 89) & 0x7FFFFFFFu) < a2)
    result = physx::shdfnd::Array<local::QuickHullVertex *,physx::shdfnd::ReflectionAllocator<local::QuickHullVertex *>>::recreate((uint64_t)this + 344, a2);
  if ((*((_DWORD *)this + 97) & 0x7FFFFFE0) == 0)
    result = physx::shdfnd::Array<local::QuickHullFace *,physx::shdfnd::ReflectionAllocator<local::QuickHullFace *>>::recreate((uint64_t)this + 376, 0x20u);
  if ((*((_DWORD *)this + 101) & 0x7FFFFFE0) == 0)
    result = physx::shdfnd::Array<local::QuickHullFace *,physx::shdfnd::ReflectionAllocator<local::QuickHullFace *>>::recreate((uint64_t)this + 392, 0x20u);
  if ((*((_DWORD *)this + 105) & 0x7FFFFFE0) == 0)
    result = physx::shdfnd::Array<local::QuickHullFace *,physx::shdfnd::ReflectionAllocator<local::QuickHullFace *>>::recreate((uint64_t)this + 408, 0x20u);
  if (a2 >= 0x80)
    v7 = 128;
  else
    v7 = a2;
  if ((*((_DWORD *)this + 93) & 0x7FFFFFFFu) < v7)
    return physx::shdfnd::Array<local::QuickHullHalfEdge *,physx::shdfnd::ReflectionAllocator<local::QuickHullHalfEdge *>>::recreate((uint64_t)this + 360, v7);
  return result;
}

uint64_t local::MemBlock<local::QuickHullHalfEdge,false>::init(uint64_t a1, unsigned int a2)
{
  uint64_t result;
  uint64_t v4;
  uint64_t v5;

  *(_DWORD *)a1 = a2;
  if (a2)
    result = (*(uint64_t (**)(uint64_t, uint64_t, const char *, const char *, uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24)
                                                                                              + 16))(physx::shdfnd::Foundation::mInstance + 24, 72 * a2, "NonTrackedAlloc", "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/physxcooking/src/convex/QuickHullConvexHullLib.cpp", 84);
  else
    result = 0;
  v5 = result;
  v4 = *(unsigned int *)(a1 + 24);
  if ((*(_DWORD *)(a1 + 28) & 0x7FFFFFFFu) <= v4)
    return physx::shdfnd::Array<local::QuickHullHalfEdge *,physx::shdfnd::ReflectionAllocator<local::QuickHullHalfEdge *>>::growAndPushBack(a1 + 16, &v5);
  *(_QWORD *)(*(_QWORD *)(a1 + 16) + 8 * v4) = result;
  *(_DWORD *)(a1 + 24) = v4 + 1;
  return result;
}

uint64_t local::MemBlock<local::QuickHullFace,true>::init(unsigned int *a1, unsigned int a2)
{
  uint64_t result;
  uint64_t v4;
  uint64_t v5;
  uint64_t i;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  *a1 = a2;
  if (a2)
  {
    result = (*(uint64_t (**)(uint64_t, uint64_t, const char *, const char *, uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24)
                                                                                              + 16))(physx::shdfnd::Foundation::mInstance + 24, 80 * a2, "NonTrackedAlloc", "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/physxcooking/src/convex/QuickHullConvexHullLib.cpp", 84);
    v4 = *a1;
    v9 = result;
    if ((_DWORD)v4)
    {
      v5 = 0;
      for (i = 0; i != v4; ++i)
      {
        v7 = result + v5;
        *(_QWORD *)v7 = 0;
        *(_WORD *)(v7 + 8) = 0;
        *(_QWORD *)(v7 + 16) = 0;
        *(_DWORD *)(v7 + 36) = 0;
        *(_QWORD *)(v7 + 52) = 0xFF7FFFFF00000000;
        *(_DWORD *)(v7 + 60) = 0;
        *(_QWORD *)(v7 + 64) = 0;
        *(_DWORD *)(v7 + 72) = i;
        v5 += 80;
        *(_BYTE *)(v7 + 76) = 0;
      }
    }
  }
  else
  {
    result = 0;
    v9 = 0;
  }
  v8 = a1[6];
  if ((a1[7] & 0x7FFFFFFF) <= v8)
    return physx::shdfnd::Array<local::QuickHullFace *,physx::shdfnd::ReflectionAllocator<local::QuickHullFace *>>::growAndPushBack((uint64_t)(a1 + 4), &v9);
  *(_QWORD *)(*((_QWORD *)a1 + 2) + 8 * v8) = result;
  a1[6] = v8 + 1;
  return result;
}

uint64_t local::QuickHull::createTriangle(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unsigned int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  unsigned int *v14;
  uint64_t v15;
  unsigned int v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unsigned int *v22;
  uint64_t FreeItem;
  int v24;
  uint64_t v25;
  int v26;
  uint64_t v27;
  uint64_t v28;
  __int128 v29;
  float v30;
  float v31;
  float v32;
  float v33;
  int v34;
  float *v35;
  float v36;
  uint64_t v37;
  float v38;
  float v39;
  float v40;
  float v41;
  float v42;
  float v43;
  unsigned __int16 v44;
  float v45;
  float v46;
  float v47;
  float v48;
  float v49;
  float v50;
  float v51;
  float v52;
  float v53;
  float v54;
  float v55;
  uint64_t v57;

  v8 = *(_DWORD *)(a1 + 96);
  v9 = *(unsigned int *)(a1 + 88);
  if (v8 >= v9)
  {
    if ((_DWORD)v9)
    {
      v12 = (*(uint64_t (**)(uint64_t, uint64_t, const char *, const char *, uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24)
                                                                                             + 16))(physx::shdfnd::Foundation::mInstance + 24, 80 * v9, "NonTrackedAlloc", "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/physxcooking/src/convex/QuickHullConvexHullLib.cpp", 138);
      v14 = (unsigned int *)(a1 + 92);
      v13 = *(_DWORD *)(a1 + 92);
      v15 = *(unsigned int *)(a1 + 88);
      v57 = v12;
      v16 = v13 + 1;
      *(_DWORD *)(a1 + 92) = v16;
      if ((_DWORD)v15)
      {
        v17 = 0;
        v18 = v16 * v15;
        v19 = 80 * v15;
        do
        {
          v20 = v12 + v17;
          *(_QWORD *)v20 = 0;
          *(_WORD *)(v20 + 8) = 0;
          *(_QWORD *)(v20 + 16) = 0;
          *(_DWORD *)(v20 + 36) = 0;
          *(_QWORD *)(v20 + 52) = 0xFF7FFFFF00000000;
          *(_DWORD *)(v20 + 60) = 0;
          *(_QWORD *)(v20 + 64) = 0;
          *(_DWORD *)(v20 + 72) = v18;
          v17 += 80;
          ++v18;
          *(_BYTE *)(v20 + 76) = 0;
        }
        while (v19 != v17);
      }
    }
    else
    {
      v12 = 0;
      v57 = 0;
      v14 = (unsigned int *)(a1 + 92);
      v16 = *(_DWORD *)(a1 + 92) + 1;
      *(_DWORD *)(a1 + 92) = v16;
    }
    v21 = *(unsigned int *)(a1 + 112);
    if ((*(_DWORD *)(a1 + 116) & 0x7FFFFFFFu) <= v21)
    {
      physx::shdfnd::Array<local::QuickHullFace *,physx::shdfnd::ReflectionAllocator<local::QuickHullFace *>>::growAndPushBack(a1 + 104, &v57);
      v16 = *v14;
    }
    else
    {
      *(_QWORD *)(*(_QWORD *)(a1 + 104) + 8 * v21) = v12;
      *(_DWORD *)(a1 + 112) = v21 + 1;
    }
    v11 = *(_QWORD *)(*(_QWORD *)(a1 + 104) + 8 * v16);
    *(_DWORD *)(a1 + 96) = 1;
  }
  else
  {
    v10 = *(_QWORD *)(*(_QWORD *)(a1 + 104) + 8 * *(unsigned int *)(a1 + 92));
    *(_DWORD *)(a1 + 96) = v8 + 1;
    v11 = v10 + 80 * v8;
  }
  v22 = (unsigned int *)(a1 + 56);
  FreeItem = local::MemBlock<local::QuickHullHalfEdge,false>::getFreeItem((unsigned int *)(a1 + 56));
  *(_QWORD *)(FreeItem + 56) = v11;
  *(_QWORD *)FreeItem = *(_QWORD *)a2;
  *(_DWORD *)(FreeItem + 8) = *(_DWORD *)(a2 + 8);
  v24 = *(_DWORD *)(a2 + 28);
  *(_OWORD *)(FreeItem + 12) = *(_OWORD *)(a2 + 12);
  *(_DWORD *)(FreeItem + 28) = v24;
  v25 = local::MemBlock<local::QuickHullHalfEdge,false>::getFreeItem(v22);
  *(_QWORD *)(v25 + 56) = v11;
  *(_QWORD *)v25 = *(_QWORD *)a3;
  *(_DWORD *)(v25 + 8) = *(_DWORD *)(a3 + 8);
  v26 = *(_DWORD *)(a3 + 28);
  *(_OWORD *)(v25 + 12) = *(_OWORD *)(a3 + 12);
  *(_DWORD *)(v25 + 28) = v26;
  v27 = local::MemBlock<local::QuickHullHalfEdge,false>::getFreeItem(v22);
  v28 = 0;
  *(_QWORD *)(v27 + 56) = v11;
  *(_QWORD *)v27 = *(_QWORD *)a4;
  *(_DWORD *)(v27 + 8) = *(_DWORD *)(a4 + 8);
  v29 = *(_OWORD *)(a4 + 12);
  *(_DWORD *)(v27 + 28) = *(_DWORD *)(a4 + 28);
  *(_OWORD *)(v27 + 12) = v29;
  *(_QWORD *)(FreeItem + 32) = v27;
  *(_QWORD *)(FreeItem + 40) = v25;
  *(_QWORD *)(v25 + 32) = FreeItem;
  *(_QWORD *)(v25 + 40) = v27;
  *(_QWORD *)(v27 + 32) = v25;
  *(_QWORD *)(v27 + 40) = FreeItem;
  *(_QWORD *)v11 = FreeItem;
  *(_QWORD *)(v11 + 64) = 0;
  *(_QWORD *)(v11 + 24) = 0;
  *(_DWORD *)(v11 + 32) = 0;
  v31 = *(float *)FreeItem;
  v30 = *(float *)(FreeItem + 4);
  v32 = *(float *)(FreeItem + 8);
  v33 = 0.0;
  v34 = 3;
  do
  {
    v35 = *(float **)(FreeItem + 40);
    v36 = (float)((float)((float)(v30 - v35[1]) * (float)(v30 - v35[1]))
                + (float)((float)(v31 - *v35) * (float)(v31 - *v35)))
        + (float)((float)(v32 - v35[2]) * (float)(v32 - v35[2]));
    if (v36 > v33)
      v28 = FreeItem;
    v32 = v35[2];
    if (v36 > v33)
      v33 = v36;
    v30 = v35[1];
    v31 = *v35;
    FreeItem = *(_QWORD *)(FreeItem + 40);
    --v34;
  }
  while (v34);
  v37 = *(_QWORD *)(v28 + 40);
  v39 = *(float *)v28;
  v38 = *(float *)(v28 + 4);
  v40 = *(float *)v37 - *(float *)v28;
  v41 = *(float *)(v37 + 4) - v38;
  v42 = *(float *)(v28 + 8);
  v43 = *(float *)(v37 + 8) - v42;
  *(_DWORD *)(v11 + 40) = *(_DWORD *)v28;
  *(float *)(v11 + 44) = v38;
  *(float *)(v11 + 48) = v42;
  v44 = 1;
  v45 = 0.0;
  v46 = 0.0;
  v47 = 0.0;
  do
  {
    ++v44;
    v39 = v39 + *(float *)v37;
    v38 = v38 + *(float *)(v37 + 4);
    v42 = v42 + *(float *)(v37 + 8);
    *(float *)(v11 + 40) = v39;
    *(float *)(v11 + 44) = v38;
    *(float *)(v11 + 48) = v42;
    v37 = *(_QWORD *)(v37 + 40);
    v48 = *(float *)v37 - *(float *)v28;
    v49 = *(float *)(v37 + 4) - *(float *)(v28 + 4);
    v50 = *(float *)(v37 + 8) - *(float *)(v28 + 8);
    v47 = v47 + (float)((float)(v49 * (float)-v43) + (float)(v41 * v50));
    v46 = v46 + (float)((float)(v50 * (float)-v40) + (float)(v43 * v48));
    *(float *)(v11 + 24) = v47;
    *(float *)(v11 + 28) = v46;
    v45 = v45 + (float)((float)(v48 * (float)-v41) + (float)(v40 * v49));
    *(float *)(v11 + 32) = v45;
  }
  while (v37 != v28);
  *(_WORD *)(v11 + 8) = v44;
  v51 = sqrtf((float)((float)(v46 * v46) + (float)(v47 * v47)) + (float)(v45 * v45));
  if (v51 > 0.0)
  {
    v47 = v47 * (float)(1.0 / v51);
    v46 = v46 * (float)(1.0 / v51);
    *(float *)(v11 + 24) = v47;
    *(float *)(v11 + 28) = v46;
    v45 = v45 * (float)(1.0 / v51);
    *(float *)(v11 + 32) = v45;
  }
  v52 = 1.0 / (float)v44;
  v53 = v52 * v39;
  *(float *)(v11 + 36) = v51;
  *(float *)(v11 + 40) = v53;
  v54 = v52 * v38;
  v55 = v52 * v42;
  *(float *)(v11 + 44) = v54;
  *(float *)(v11 + 48) = v55;
  *(float *)(v11 + 52) = (float)((float)(v54 * v46) + (float)(v47 * v53)) + (float)(v45 * v55);
  return v11;
}

