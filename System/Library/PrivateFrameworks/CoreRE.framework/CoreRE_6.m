uint64_t re::AnimationBlendTreeBuilder<float>::weightPathFromName(re::StringID *a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v4;
  char v5;

  re::DynamicString::format((re::DynamicString *)"KeyValue.keyValueStore[%s]", (re::DynamicString *)&v4, a2);
  re::StringID::StringID(a1, (const re::DynamicString *)&v4);
  result = v4;
  if (v4)
  {
    if ((v5 & 1) != 0)
      return (*(uint64_t (**)(void))(*(_QWORD *)v4 + 40))();
  }
  return result;
}

uint64_t re::AnimationBlendTreeBuilder<float>::~AnimationBlendTreeBuilder(uint64_t a1)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a1 + 456);
  if (v2)
  {
    if (*(_QWORD *)(a1 + 488))
      (*(void (**)(uint64_t))(*(_QWORD *)v2 + 40))(v2);
    *(_QWORD *)(a1 + 488) = 0;
    *(_QWORD *)(a1 + 464) = 0;
    *(_QWORD *)(a1 + 472) = 0;
    *(_QWORD *)(a1 + 456) = 0;
    ++*(_DWORD *)(a1 + 480);
  }
  re::HashTable<re::StringID,re::DataArrayHandle<re::RigGraphOperatorDefinition>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::deinit((uint64_t *)(a1 + 408));
  re::HashTable<re::StringID,re::DataArrayHandle<re::RigGraphOperatorDefinition>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::deinit((uint64_t *)(a1 + 336));
  re::DynamicArray<re::RigGraphInputValue>::deinit(a1 + 272);
  re::DynamicArray<re::RigGraphConnection>::deinit((_QWORD *)(a1 + 232));
  re::DynamicArray<re::RigDataTypeClass::RigDataTypeAttribute>::deinit(a1 + 192);
  re::DynamicArray<re::RigGraphParameterProxy>::deinit(a1 + 152);
  re::DynamicArray<re::RigGraphParameterProxy>::deinit(a1 + 112);
  re::StringID::destroyString((re::StringID *)(a1 + 96));
  re::HashTable<re::StringID,re::DataArrayHandle<re::RigGraphOperatorDefinition>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::deinit((uint64_t *)(a1 + 48));
  re::DynamicArray<re::AnimationBlendTreeBuilder<float>::BlendTreeBuilderNode>::deinit(a1 + 8);
  return a1;
}

uint64_t re::DynamicArray<re::AnimationBlendTreeBuilder<float>::BlendTreeBuilderNode>::deinit(uint64_t a1)
{
  uint64_t result;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  re::StringID *v6;
  uint64_t v7;

  result = *(_QWORD *)a1;
  if (result)
  {
    v3 = *(_QWORD *)(a1 + 32);
    if (v3)
    {
      v4 = *(_QWORD *)(a1 + 16);
      if (v4)
      {
        v5 = 80 * v4;
        v6 = (re::StringID *)(v3 + 64);
        do
        {
          re::StringID::destroyString(v6);
          re::StringID::destroyString((re::StringID *)((char *)v6 - 16));
          v7 = *((_QWORD *)v6 - 7);
          if (v7)
          {
            if (*((_QWORD *)v6 - 3))
              (*(void (**)(uint64_t))(*(_QWORD *)v7 + 40))(v7);
            *((_QWORD *)v6 - 3) = 0;
            *((_QWORD *)v6 - 6) = 0;
            *((_QWORD *)v6 - 5) = 0;
            *((_QWORD *)v6 - 7) = 0;
            ++*((_DWORD *)v6 - 8);
          }
          v6 = (re::StringID *)((char *)v6 + 80);
          v5 -= 80;
        }
        while (v5);
        result = *(_QWORD *)a1;
        v3 = *(_QWORD *)(a1 + 32);
      }
      result = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)result + 40))(result, v3);
    }
    *(_QWORD *)(a1 + 32) = 0;
    *(_QWORD *)(a1 + 8) = 0;
    *(_QWORD *)(a1 + 16) = 0;
    *(_QWORD *)a1 = 0;
    ++*(_DWORD *)(a1 + 24);
  }
  return result;
}

uint64_t re::AnimationBlendTreeBuilder<double>::buildRig(uint64_t a1, _QWORD *a2, uint64_t a3, unint64_t a4, _QWORD *a5)
{
  char *v5;
  NSObject *v6;
  uint64_t v8;
  uint64_t v11;
  char *v12;
  const char *v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  NSObject *v18;
  _QWORD *v19;
  char *v20;
  unint64_t v21;
  uint64_t v22;
  NSObject *v23;
  _QWORD *v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  _QWORD *v28;
  char *v29;
  const char *v30;
  uint64_t v31;
  unint64_t v32;
  const char *v33;
  const char *v34;
  char *v35;
  const StringID *v36;
  unint64_t v37;
  _BYTE *v38;
  const char *v39;
  const char *v40;
  _QWORD *v41;
  NSObject *v42;
  const char *v43;
  const char *v44;
  const char *v45;
  const char *v46;
  re *v47;
  uint64_t result;
  NSObject *v49;
  char *v50;
  __int128 v51;
  uint64_t v52;
  uint64_t v53;
  char *v54;
  unint64_t v55;
  unint64_t v56;
  _anonymous_namespace_ *v58;
  _QWORD *v59;
  _QWORD *v60;
  const char **v61;
  char *v62;
  char v64[24];
  __int128 v65;
  __int128 v66;
  char v67[24];
  __int128 v68;
  __int128 v69;
  char v70[24];
  __int128 v71;
  __int128 v72;
  char v73[24];
  __int128 v74;
  __int128 v75;
  char v76[24];
  __int128 v77;
  __int128 v78;
  uint64_t v79;
  char v80;
  _BYTE v81[7];
  const char *v82;
  uint64_t v83;
  char __str[4];
  const char *v85;
  __int16 v86;
  int v87;
  __int16 v88;
  NSObject *v89;
  __int16 v90;
  char *v91;
  StringID v92;
  __int128 v93;
  __int128 v94;
  __int128 v95;
  __int128 v96;
  uint64_t v97;

  v5 = __str;
  v97 = *MEMORY[0x24BDAC8D0];
  v6 = a2[3];
  if ((unint64_t)v6 <= a4)
    goto LABEL_111;
  v8 = a2[50];
  v6 = *(NSObject **)(v8 + 16);
  if ((unint64_t)v6 <= a4)
  {
LABEL_112:
    v79 = 0;
    v95 = 0u;
    v96 = 0u;
    v93 = 0u;
    v94 = 0u;
    v92 = (StringID)0;
    v56 = a4;
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    *(_DWORD *)__str = 136315906;
    *(_QWORD *)(v5 + 4) = "operator[]";
    v86 = 1024;
    *(_DWORD *)(v5 + 14) = 797;
    v88 = 2048;
    *(_QWORD *)(v5 + 20) = v56;
    v90 = 2048;
    *(_QWORD *)(v5 + 30) = v6;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_113:
    re::internal::assertLog((re::internal *)4, v14, "assertion failure: '%s' (%s:line %i) Unknown blend node type", "!\"Unreachable code\"", "blendNodeType", 347);
    _os_crash();
    __break(1u);
  }
  v11 = a2[5];
  v5 = *(char **)(v8 + 32);
  v12 = &v5[88 * a4];
  v13 = (const char *)*((_QWORD *)v12 + 1);
  if (re::AnimationBlendTreeNodeDescription::isBlend((re::AnimationBlendTreeNodeDescription *)v12))
    goto LABEL_113;
  if (!re::StringID::operator==((_QWORD *)v12 + 2, re::AnimationBlendTreeNodeDescription::kClip)
    && !re::StringID::operator==((_QWORD *)v12 + 2, re::AnimationBlendTreeNodeDescription::kInput))
  {
    re::RigGraphDefinitionBuilder::addNode((re::RigGraphDefinitionBuilder *)(a2 + 39), *(_anonymous_namespace_ **)&v5[88 * a4 + 24], *((const char **)v12 + 1), (uint64_t)v76);
    if (!v76[0])
    {
      if ((_QWORD)v77)
      {
        if ((BYTE8(v77) & 1) != 0)
          (*(void (**)(void))(*(_QWORD *)v77 + 40))();
        v77 = 0u;
        v78 = 0u;
      }
    }
  }
  v15 = v11 + 80 * a4;
  v17 = *(_QWORD *)(v15 + 24);
  v16 = (_QWORD *)(v15 + 24);
  if (v17)
  {
    v18 = 0;
    v19 = (_QWORD *)(v11 + 80 * a4 + 40);
    v61 = (const char **)(a2 + 39);
    v58 = (_anonymous_namespace_ *)(a3 + 416);
    v59 = v19;
    v60 = v16;
    while (1)
    {
      re::AnimationBlendTreeBuilder<double>::buildRig(v73, a2, a3, *(_QWORD *)(*v19 + 8 * (_QWORD)v18), a5);
      if (!v73[0] && (_QWORD)v74)
      {
        if ((BYTE8(v74) & 1) != 0)
          (*(void (**)(void))(*(_QWORD *)v74 + 40))();
        v74 = 0u;
        v75 = 0u;
      }
      v20 = (char *)*v16;
      if (*v16 <= (unint64_t)v18)
        break;
      v21 = *(_QWORD *)(*v19 + 8 * (_QWORD)v18);
      v5 = (char *)a2[3];
      if ((unint64_t)v5 <= v21)
        goto LABEL_102;
      v22 = a2[50];
      v5 = *(char **)(v22 + 16);
      if ((unint64_t)v5 <= v21)
        goto LABEL_103;
      v23 = a4;
      if ((unint64_t)v5 <= a4)
        goto LABEL_104;
      v24 = a5;
      v25 = a2[5];
      v5 = *(char **)(v22 + 32);
      v26 = &v5[88 * v21];
      v27 = v25 + 80 * v21;
      v29 = *(char **)(v27 + 72);
      v28 = (_QWORD *)(v27 + 72);
      v62 = v29;
      v30 = *(const char **)(v25 + 80 * v21 + 56);
      if (re::AnimationBlendTreeNodeDescription::isBlend((re::AnimationBlendTreeNodeDescription *)&v5[88 * a4]))
      {
        if (v18)
        {
          v31 = a2[50];
          a5 = *(_QWORD **)(v31 + 16);
          v32 = a4;
          if ((unint64_t)a5 <= a4)
            goto LABEL_110;
          v30 = "input2";
          if (!re::StringID::operator==((_QWORD *)(*(_QWORD *)(v31 + 32) + 88 * a4 + 16), re::AnimationBlendTreeNodeDescription::kBlendAdditive))
          {
            snprintf(__str, 0x18uLL, "%f", *(float *)&v5[88 * v21 + 80]);
            if ((v80 & 1) != 0)
              v33 = v82;
            else
              v33 = v81;
            re::DynamicString::operator+((re::DynamicString *)&v79, "input3", (re::DynamicString *)&v92);
            if (((uint64_t)v92.var1 & 1) != 0)
              v34 = (const char *)v93;
            else
              v34 = (char *)&v92.var1 + 1;
            re::RigGraphDefinitionBuilder::promoteParameter(v61, v33, "input3", v34, __str, 1, (uint64_t)v70);
            if (!v70[0] && (_QWORD)v71)
            {
              if ((BYTE8(v71) & 1) != 0)
                (*(void (**)(void))(*(_QWORD *)v71 + 40))();
              v71 = 0u;
              v72 = 0u;
            }
            if (*(_QWORD *)&v92.var0 && ((uint64_t)v92.var1 & 1) != 0)
              (*(void (**)(void))(**(_QWORD **)&v92.var0 + 40))();
            v35 = &v5[88 * v21];
            v37 = *((_QWORD *)v35 + 8);
            v36 = (const StringID *)(v35 + 64);
            if (v37 <= 1 && (v38 = *(_BYTE **)&v5[88 * v21 + 72]) != 0 && !*v38)
              re::AnimationBlendTreeBuilder<float>::weightPathFromName((re::StringID *)&v92, *((_QWORD *)v26 + 1));
            else
              re::StringID::StringID((re::StringID *)&v92, v36);
            re::DynamicArray<re::StringID>::add(v58, &v92);
            re::StringID::destroyString((re::StringID *)&v92);
            v30 = "input2";
          }
        }
        else
        {
          v30 = "input1";
        }
      }
      if (re::StringID::operator==(&v5[88 * v21 + 16], re::AnimationBlendTreeNodeDescription::kClip))
      {
        if ((v80 & 1) != 0)
          v39 = v82;
        else
          v39 = v81;
        re::DynamicString::operator+((re::DynamicString *)&v79, v30, (re::DynamicString *)&v92);
        if (((uint64_t)v92.var1 & 1) != 0)
          v40 = (const char *)v93;
        else
          v40 = (char *)&v92.var1 + 1;
        re::RigGraphDefinitionBuilder::promoteParameter(v61, v39, v30, v40, "", 1, (uint64_t)v67);
        a5 = v24;
        v19 = v59;
        v16 = v60;
        if (!v67[0] && (_QWORD)v68)
        {
          if ((BYTE8(v68) & 1) != 0)
            (*(void (**)(void))(*(_QWORD *)v68 + 40))();
          v68 = 0u;
          v69 = 0u;
        }
        if (*(_QWORD *)&v92.var0 && ((uint64_t)v92.var1 & 1) != 0)
          (*(void (**)(void))(**(_QWORD **)&v92.var0 + 40))();
        *(_QWORD *)&v92.var0 = 0;
        v92.var1 = "";
        re::DynamicArray<re::StringID>::add(v58, (uint64_t *)&v92);
        re::StringID::destroyString((re::StringID *)&v92);
        v41 = (_QWORD *)re::HashTable<re::StringID,re::StateParameterInt *,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::tryGet((uint64_t)(a2 + 51), &v5[88 * v21 + 32]);
        v42 = *v24;
        v5 = *(char **)(a3 + 360);
        if ((unint64_t)v5 <= *v24)
        {
          v83 = 0;
          v95 = 0u;
          v96 = 0u;
          v93 = 0u;
          v94 = 0u;
          v92 = (StringID)0;
          os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
          *(_DWORD *)__str = 136315906;
          v85 = "operator[]";
          v86 = 1024;
          v87 = 468;
          v88 = 2048;
          v89 = v42;
          v90 = 2048;
          v91 = v5;
          _os_log_send_and_compose_impl();
          _os_crash_msg();
          __break(1u);
LABEL_110:
          v83 = 0;
          v95 = 0u;
          v96 = 0u;
          v93 = 0u;
          v94 = 0u;
          v92 = (StringID)0;
          v6 = v32;
          os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
          *(_DWORD *)__str = 136315906;
          v85 = "operator[]";
          v86 = 1024;
          v87 = 797;
          v88 = 2048;
          v89 = v6;
          v90 = 2048;
          v91 = (char *)a5;
          _os_log_send_and_compose_impl();
          _os_crash_msg();
          __break(1u);
LABEL_111:
          v79 = 0;
          v95 = 0u;
          v96 = 0u;
          v93 = 0u;
          v94 = 0u;
          v92 = (StringID)0;
          v55 = a4;
          os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
          *(_DWORD *)__str = 136315906;
          *(_QWORD *)(v5 + 4) = "operator[]";
          v86 = 1024;
          *(_DWORD *)(v5 + 14) = 789;
          v88 = 2048;
          *(_QWORD *)(v5 + 20) = v55;
          v90 = 2048;
          *(_QWORD *)(v5 + 30) = v6;
          _os_log_send_and_compose_impl();
          _os_crash_msg();
          __break(1u);
          goto LABEL_112;
        }
        *(_QWORD *)(*(_QWORD *)(a3 + 368) + 8 * (_QWORD)v42) = *v41;
        ++*v24;
      }
      else if (re::StringID::operator==(&v5[88 * v21 + 16], re::AnimationBlendTreeNodeDescription::kInput))
      {
        if ((v80 & 1) != 0)
          v43 = v82;
        else
          v43 = v81;
        re::DynamicString::operator+((re::DynamicString *)&v79, v30, (re::DynamicString *)&v92);
        if (((uint64_t)v92.var1 & 1) != 0)
          v44 = (const char *)v93;
        else
          v44 = (char *)&v92.var1 + 1;
        re::RigGraphDefinitionBuilder::promoteParameter(v61, v43, v30, v44, *(const char **)&v5[88 * v21 + 56], 1, (uint64_t)v64);
        a5 = v24;
        v19 = v59;
        v16 = v60;
        if (!v64[0] && (_QWORD)v65)
        {
          if ((BYTE8(v65) & 1) != 0)
            (*(void (**)(void))(*(_QWORD *)v65 + 40))();
          v65 = 0u;
          v66 = 0u;
        }
        if (*(_QWORD *)&v92.var0 && ((uint64_t)v92.var1 & 1) != 0)
          (*(void (**)(void))(**(_QWORD **)&v92.var0 + 40))();
        re::DynamicArray<re::StringID>::add(v58, (StringID *)&v5[88 * v21 + 32]);
      }
      else
      {
        if (re::AnimationBlendTreeNodeDescription::isBlend((re::AnimationBlendTreeNodeDescription *)&v5[88 * v21])
          && *(v28 - 1) <= 1uLL)
        {
          v45 = v62;
          if (*v28 && !*(_BYTE *)*v28)
            v45 = "output";
        }
        else
        {
          v45 = v62;
        }
        if ((v80 & 1) != 0)
          v46 = v82;
        else
          v46 = v81;
        v47 = (re *)re::RigGraphDefinitionBuilder::addConnection((re::RigGraphDefinitionBuilder *)v61, *((const char **)v26 + 1), v45, v46, v30, 0, 0, (uint64_t)&v92);
        if (!*(_BYTE *)&v92.var0)
        {
          v49 = *re::animationLogObjects(v47);
          v50 = __str;
          if (!os_log_type_enabled(v49, OS_LOG_TYPE_ERROR))
            goto LABEL_100;
          goto LABEL_105;
        }
        a5 = v24;
        v19 = v59;
        v16 = v60;
      }
      v18 = ((char *)v18 + 1);
      if (*v16 <= (unint64_t)v18)
        goto LABEL_94;
    }
    v83 = 0;
    v95 = 0u;
    v96 = 0u;
    v93 = 0u;
    v94 = 0u;
    v92 = (StringID)0;
    v21 = MEMORY[0x24BDACB70];
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    *(_DWORD *)__str = 136315906;
    v85 = "operator[]";
    v86 = 1024;
    v87 = 797;
    v88 = 2048;
    v89 = v18;
    v90 = 2048;
    v91 = v20;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_102:
    v83 = 0;
    v95 = 0u;
    v96 = 0u;
    v93 = 0u;
    v94 = 0u;
    v92 = (StringID)0;
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    *(_DWORD *)__str = 136315906;
    v85 = "operator[]";
    v86 = 1024;
    v87 = 789;
    v88 = 2048;
    v89 = v21;
    v90 = 2048;
    v91 = v5;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_103:
    v83 = 0;
    v95 = 0u;
    v96 = 0u;
    v93 = 0u;
    v94 = 0u;
    v92 = (StringID)0;
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    *(_DWORD *)__str = 136315906;
    v85 = "operator[]";
    v86 = 1024;
    v87 = 797;
    v88 = 2048;
    v89 = v21;
    v90 = 2048;
    v91 = v5;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_104:
    v83 = 0;
    v95 = 0u;
    v96 = 0u;
    v93 = 0u;
    v94 = 0u;
    v92 = (StringID)0;
    v50 = (char *)MEMORY[0x24BDACB70];
    v49 = v23;
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    *(_DWORD *)__str = 136315906;
    v85 = "operator[]";
    v86 = 1024;
    v87 = 797;
    v88 = 2048;
    v89 = v49;
    v90 = 2048;
    v91 = v5;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_105:
    if ((v94 & 1) != 0)
      v54 = (char *)*((_QWORD *)&v94 + 1);
    else
      v54 = (char *)&v94 + 1;
    *(_DWORD *)__str = 136315138;
    *(_QWORD *)(v50 + 4) = v54;
    _os_log_error_impl(&dword_224FE9000, v49, OS_LOG_TYPE_ERROR, "Add connection failed - %s", (uint8_t *)__str, 0xCu);
LABEL_100:
    v51 = *(_OWORD *)(v50 + 72);
    v52 = *((_QWORD *)&v94 + 1);
    v53 = v95;
    *(_BYTE *)a1 = 0;
    *(_OWORD *)(a1 + 8) = *(_OWORD *)(v50 + 56);
    *(_OWORD *)(a1 + 24) = v51;
    *(_QWORD *)(a1 + 40) = v52;
    *(_QWORD *)(a1 + 48) = v53;
  }
  else
  {
LABEL_94:
    *(_BYTE *)a1 = 1;
  }
  result = v79;
  if (v79)
  {
    if ((v80 & 1) != 0)
      return (*(uint64_t (**)(uint64_t, const char *))(*(_QWORD *)v79 + 40))(v79, v82);
  }
  return result;
}

void re::DoubleAnimationBlendTree::~DoubleAnimationBlendTree(re::DoubleAnimationBlendTree *this)
{
  re::AnimationBlendTree<double>::~AnimationBlendTree((uint64_t)this);
  JUMPOUT(0x2276933B8);
}

uint64_t re::AnimationBlendTree<double>::childCount(uint64_t a1)
{
  return *(_QWORD *)(a1 + 312);
}

uint64_t re::AnimationBlendTree<double>::child(uint64_t a1, unint64_t a2)
{
  if (*(_QWORD *)(a1 + 312) <= a2)
  {
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  return *(_QWORD *)(*(_QWORD *)(a1 + 320) + 8 * a2);
}

double re::AnimationBlendTree<double>::totalDuration(uint64_t a1)
{
  unint64_t v1;
  unint64_t v3;
  float v4;
  uint64_t v5;
  double v6;
  uint64_t v7;

  v1 = *(_QWORD *)(a1 + 312);
  if (v1)
  {
    v3 = 0;
    v4 = 0.0;
    do
    {
      v5 = *(_QWORD *)(*(_QWORD *)(a1 + 320) + 8 * v3);
      if (v5)
      {
        v6 = (*(double (**)(uint64_t))(*(_QWORD *)v5 + 40))(v5);
        v1 = *(_QWORD *)(a1 + 312);
        if (v6 > v4)
        {
          if (v1 <= v3)
          {
            os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
            _os_log_send_and_compose_impl();
            _os_crash_msg();
            __break(1u);
          }
          v7 = *(_QWORD *)(*(_QWORD *)(a1 + 320) + 8 * v3);
          v4 = (*(double (**)(uint64_t))(*(_QWORD *)v7 + 40))(v7);
          v1 = *(_QWORD *)(a1 + 312);
        }
      }
      ++v3;
    }
    while (v3 < v1);
  }
  else
  {
    return 0.0;
  }
  return v4;
}

void re::AnimationBlendTree<double>::evaluateCore(uint64_t a1, uint64_t a2)
{
  re::internal::assertLog((re::internal *)4, a2, "assertion failure: '%s' (%s:line %i) Requires AnimationBlendTreeInstance", "!\"Unreachable code\"", "evaluateCore", 109);
  _os_crash();
  __break(1u);
}

void re::AnimationBlendTree<double>::~AnimationBlendTree(uint64_t a1)
{
  re::AnimationBlendTree<double>::~AnimationBlendTree(a1);
  JUMPOUT(0x2276933B8);
}

uint64_t re::AnimationBlendTree<double>::~AnimationBlendTree(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  *(_QWORD *)a1 = &off_24ED35978;
  v2 = a1 + 456;
  re::DynamicArray<re::BlendSpaceSampleDefinition>::deinit(a1 + 584);
  re::DynamicArray<re::BlendSpaceAxisDefinition>::deinit(a1 + 544);
  re::DynamicArray<re::RigGraphConnection>::deinit((_QWORD *)(a1 + 496));
  re::DynamicArray<re::AnimationBlendTreeNodeDescription>::deinit(v2);
  re::DynamicArray<re::StringID>::deinit(a1 + 416);
  re::DynamicArray<re::StringID>::deinit(a1 + 376);
  v3 = *(_QWORD *)(a1 + 352);
  if (v3)
  {
    if (*(_QWORD *)(a1 + 360))
    {
      (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v3 + 40))(v3, *(_QWORD *)(a1 + 368));
      *(_QWORD *)(a1 + 360) = 0;
      *(_QWORD *)(a1 + 368) = 0;
    }
    *(_QWORD *)(a1 + 352) = 0;
  }
  v4 = *(_QWORD *)(a1 + 328);
  if (v4)
  {
    if (*(_QWORD *)(a1 + 336))
    {
      (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v4 + 40))(v4, *(_QWORD *)(a1 + 344));
      *(_QWORD *)(a1 + 336) = 0;
      *(_QWORD *)(a1 + 344) = 0;
    }
    *(_QWORD *)(a1 + 328) = 0;
  }
  v5 = *(_QWORD *)(a1 + 304);
  if (v5)
  {
    if (*(_QWORD *)(a1 + 312))
    {
      (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v5 + 40))(v5, *(_QWORD *)(a1 + 320));
      *(_QWORD *)(a1 + 312) = 0;
      *(_QWORD *)(a1 + 320) = 0;
    }
    *(_QWORD *)(a1 + 304) = 0;
  }
  v6 = *(_QWORD *)(a1 + 280);
  if (v6)
  {
    if (*(_QWORD *)(a1 + 288))
    {
      (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v6 + 40))(v6, *(_QWORD *)(a1 + 296));
      *(_QWORD *)(a1 + 288) = 0;
      *(_QWORD *)(a1 + 296) = 0;
    }
    *(_QWORD *)(a1 + 280) = 0;
  }
  re::DynamicArray<re::Pair<unsigned long,re::StringID,true>>::deinit(a1 + 240);
  re::DynamicArray<re::StringID>::deinit(a1 + 200);
  re::DynamicArray<re::RigGraphNodeChild>::deinit(a1 + 160);
  re::DynamicArray<re::RigGraphNodeInputParameter>::deinit(a1 + 120);
  re::DynamicArray<re::RigGraphNodeInputParameter>::deinit(a1 + 80);
  *(_QWORD *)a1 = off_24ED1F350;
  v7 = *(_QWORD *)(a1 + 40);
  if (v7)
  {
    if ((*(_BYTE *)(a1 + 48) & 1) != 0)
      (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v7 + 40))(v7, *(_QWORD *)(a1 + 56));
    *(_OWORD *)(a1 + 40) = 0u;
    *(_OWORD *)(a1 + 56) = 0u;
  }
  re::StringID::destroyString((re::StringID *)(a1 + 24));
  return a1;
}

uint64_t re::AnimationBlendTreeBuilder<re::Vector2<float>>::buildRig(uint64_t a1, _QWORD *a2, _QWORD *a3, unint64_t a4, unint64_t *a5)
{
  char *v5;
  char *v6;
  uint64_t v8;
  uint64_t v11;
  uint64_t v12;
  const char **v13;
  const char *v14;
  unint64_t v15;
  _BOOL4 v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  char *v22;
  _QWORD *v23;
  _QWORD *v24;
  char *v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t *v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  _QWORD *v32;
  char *v33;
  const char *v34;
  uint64_t v35;
  char *v36;
  const char *v37;
  const char *v38;
  unint64_t v39;
  const StringID *v40;
  unint64_t v41;
  _BYTE *v42;
  const char *v43;
  const char *v44;
  _QWORD *v45;
  char *v46;
  const char *v47;
  const char *v48;
  const char *v49;
  const char *v50;
  re *v51;
  uint64_t result;
  NSObject *v53;
  char *v54;
  __int128 v55;
  uint64_t v56;
  uint64_t v57;
  char *v58;
  char *v59;
  unint64_t v60;
  unint64_t v61;
  _anonymous_namespace_ *v63;
  _QWORD *v64;
  _QWORD *v65;
  const char **v66;
  char *v67;
  unint64_t v68;
  char v69[24];
  __int128 v70;
  __int128 v71;
  char v72[24];
  __int128 v73;
  __int128 v74;
  char v75[24];
  __int128 v76;
  __int128 v77;
  char v78[24];
  __int128 v79;
  __int128 v80;
  char v81[24];
  __int128 v82;
  __int128 v83;
  char v84[24];
  __int128 v85;
  __int128 v86;
  uint64_t v87;
  char v88;
  _BYTE v89[7];
  const char *v90;
  uint64_t v91;
  char __str[4];
  const char *v93;
  __int16 v94;
  int v95;
  __int16 v96;
  char *v97;
  __int16 v98;
  _QWORD *v99;
  StringID v100;
  __int128 v101;
  __int128 v102;
  __int128 v103;
  __int128 v104;
  uint64_t v105;

  v5 = __str;
  v105 = *MEMORY[0x24BDAC8D0];
  v6 = (char *)a2[3];
  if ((unint64_t)v6 <= a4)
    goto LABEL_120;
  v8 = a2[50];
  v6 = *(char **)(v8 + 16);
  if ((unint64_t)v6 <= a4)
  {
LABEL_121:
    v87 = 0;
    *((_OWORD *)v5 + 6) = 0u;
    *((_OWORD *)v5 + 7) = 0u;
    *((_OWORD *)v5 + 4) = 0u;
    *((_OWORD *)v5 + 5) = 0u;
    *((_OWORD *)v5 + 3) = 0u;
    v61 = a4;
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    *(_DWORD *)__str = 136315906;
    *(_QWORD *)(v5 + 4) = "operator[]";
    v94 = 1024;
    *(_DWORD *)(v5 + 14) = 797;
    v96 = 2048;
    *(_QWORD *)(v5 + 20) = v61;
    v98 = 2048;
    *(_QWORD *)(v5 + 30) = v6;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  v11 = a2[5];
  v12 = *(_QWORD *)(v8 + 32);
  v13 = (const char **)(v12 + 88 * a4);
  v14 = v13[1];
  v15 = a4;
  v68 = v15;
  if (re::AnimationBlendTreeNodeDescription::isBlend((re::AnimationBlendTreeNodeDescription *)v13))
  {
    v16 = re::StringID::operator==((_QWORD *)(v12 + 88 * v15 + 16), re::AnimationBlendTreeNodeDescription::kBlendAdditive);
    v17 = 0x1CE4C130A6D4370;
    if (v16)
    {
      v17 = 0xCD65BF962F71CLL;
      v18 = "AddVector2";
    }
    else
    {
      v18 = "LerpVector2";
    }
    *(_QWORD *)&v100.var0 = v17;
    v100.var1 = v18;
    re::RigGraphDefinitionBuilder::addNode((re::RigGraphDefinitionBuilder *)(a2 + 39), (_anonymous_namespace_ *)v18, v13[1], (uint64_t)v84);
    if (!v84[0] && (_QWORD)v85)
    {
      if ((BYTE8(v85) & 1) != 0)
        (*(void (**)(void))(*(_QWORD *)v85 + 40))();
      v85 = 0u;
      v86 = 0u;
    }
    re::StringID::destroyString((re::StringID *)&v100);
  }
  else if (!re::StringID::operator==((_QWORD *)(v12 + 88 * v15 + 16), re::AnimationBlendTreeNodeDescription::kClip)
         && !re::StringID::operator==((_QWORD *)(v12 + 88 * v15 + 16), re::AnimationBlendTreeNodeDescription::kInput))
  {
    re::RigGraphDefinitionBuilder::addNode((re::RigGraphDefinitionBuilder *)(a2 + 39), *(_anonymous_namespace_ **)(v12 + 88 * v15 + 24), v13[1], (uint64_t)v81);
    if (!v81[0])
    {
      if ((_QWORD)v82)
      {
        if ((BYTE8(v82) & 1) != 0)
          (*(void (**)(void))(*(_QWORD *)v82 + 40))();
        v82 = 0u;
        v83 = 0u;
      }
    }
  }
  v19 = v11 + 80 * v15;
  v21 = *(_QWORD *)(v19 + 24);
  v20 = (_QWORD *)(v19 + 24);
  if (v21)
  {
    v22 = 0;
    v23 = (_QWORD *)(v11 + 80 * v15 + 40);
    v66 = (const char **)(a2 + 39);
    v63 = (_anonymous_namespace_ *)(a3 + 52);
    v64 = v23;
    v65 = v20;
    while (1)
    {
      re::AnimationBlendTreeBuilder<re::Vector2<float>>::buildRig(v78, a2, a3, *(_QWORD *)(*v23 + 8 * (_QWORD)v22), a5);
      if (!v78[0] && (_QWORD)v79)
      {
        if ((BYTE8(v79) & 1) != 0)
          (*(void (**)(void))(*(_QWORD *)v79 + 40))();
        v79 = 0u;
        v80 = 0u;
      }
      v24 = (_QWORD *)*v20;
      if (*v20 <= (unint64_t)v22)
        break;
      v25 = *(char **)(*v23 + 8 * (_QWORD)v22);
      v15 = a2[3];
      if (v15 <= (unint64_t)v25)
        goto LABEL_111;
      v26 = a2[50];
      v15 = *(_QWORD *)(v26 + 16);
      if (v15 <= (unint64_t)v25)
        goto LABEL_112;
      v27 = v68;
      if (v15 <= v68)
        goto LABEL_113;
      v28 = a5;
      v29 = a2[5];
      v15 = *(_QWORD *)(v26 + 32);
      v30 = v15 + 88 * (_QWORD)v25;
      v31 = v29 + 80 * (_QWORD)v25;
      v33 = *(char **)(v31 + 72);
      v32 = (_QWORD *)(v31 + 72);
      v67 = v33;
      v34 = *(const char **)(v29 + 80 * (_QWORD)v25 + 56);
      if (re::AnimationBlendTreeNodeDescription::isBlend((re::AnimationBlendTreeNodeDescription *)(v15 + 88 * v68)))
      {
        if (v22)
        {
          v35 = a2[50];
          a5 = *(unint64_t **)(v35 + 16);
          v36 = (char *)v68;
          if ((unint64_t)a5 <= v68)
            goto LABEL_119;
          v34 = "input2";
          if (!re::StringID::operator==((_QWORD *)(*(_QWORD *)(v35 + 32) + 88 * v68 + 16), re::AnimationBlendTreeNodeDescription::kBlendAdditive))
          {
            snprintf(__str, 0x18uLL, "%f", *(float *)(v15 + 88 * (_QWORD)v25 + 80));
            if ((v88 & 1) != 0)
              v37 = v90;
            else
              v37 = v89;
            re::DynamicString::operator+((re::DynamicString *)&v87, "input3", (re::DynamicString *)&v100);
            if (((uint64_t)v100.var1 & 1) != 0)
              v38 = (const char *)v101;
            else
              v38 = (char *)&v100.var1 + 1;
            re::RigGraphDefinitionBuilder::promoteParameter(v66, v37, "input3", v38, __str, 1, (uint64_t)v75);
            if (!v75[0] && (_QWORD)v76)
            {
              if ((BYTE8(v76) & 1) != 0)
                (*(void (**)(void))(*(_QWORD *)v76 + 40))();
              v76 = 0u;
              v77 = 0u;
            }
            if (*(_QWORD *)&v100.var0 && ((uint64_t)v100.var1 & 1) != 0)
              (*(void (**)(void))(**(_QWORD **)&v100.var0 + 40))();
            v39 = v15 + 88 * (_QWORD)v25;
            v41 = *(_QWORD *)(v39 + 64);
            v40 = (const StringID *)(v39 + 64);
            if (v41 <= 1 && (v42 = *(_BYTE **)(v15 + 88 * (_QWORD)v25 + 72)) != 0 && !*v42)
              re::AnimationBlendTreeBuilder<float>::weightPathFromName((re::StringID *)&v100, *(_QWORD *)(v30 + 8));
            else
              re::StringID::StringID((re::StringID *)&v100, v40);
            re::DynamicArray<re::StringID>::add(v63, &v100);
            re::StringID::destroyString((re::StringID *)&v100);
            v34 = "input2";
          }
        }
        else
        {
          v34 = "input1";
        }
      }
      if (re::StringID::operator==((_QWORD *)(v15 + 88 * (_QWORD)v25 + 16), re::AnimationBlendTreeNodeDescription::kClip))
      {
        if ((v88 & 1) != 0)
          v43 = v90;
        else
          v43 = v89;
        re::DynamicString::operator+((re::DynamicString *)&v87, v34, (re::DynamicString *)&v100);
        if (((uint64_t)v100.var1 & 1) != 0)
          v44 = (const char *)v101;
        else
          v44 = (char *)&v100.var1 + 1;
        re::RigGraphDefinitionBuilder::promoteParameter(v66, v43, v34, v44, "", 1, (uint64_t)v72);
        a5 = v28;
        v23 = v64;
        v20 = v65;
        if (!v72[0] && (_QWORD)v73)
        {
          if ((BYTE8(v73) & 1) != 0)
            (*(void (**)(void))(*(_QWORD *)v73 + 40))();
          v73 = 0u;
          v74 = 0u;
        }
        if (*(_QWORD *)&v100.var0 && ((uint64_t)v100.var1 & 1) != 0)
          (*(void (**)(void))(**(_QWORD **)&v100.var0 + 40))();
        *(_QWORD *)&v100.var0 = 0;
        v100.var1 = "";
        re::DynamicArray<re::StringID>::add(v63, (uint64_t *)&v100);
        re::StringID::destroyString((re::StringID *)&v100);
        v45 = (_QWORD *)re::HashTable<re::StringID,re::StateParameterInt *,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::tryGet((uint64_t)(a2 + 51), (_QWORD *)(v15 + 88 * (_QWORD)v25 + 32));
        v46 = (char *)*a5;
        v15 = a3[45];
        if (v15 <= *a5)
        {
          v91 = 0;
          v103 = 0u;
          v104 = 0u;
          v101 = 0u;
          v102 = 0u;
          v100 = (StringID)0;
          os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
          *(_DWORD *)__str = 136315906;
          v93 = "operator[]";
          v94 = 1024;
          v95 = 468;
          v96 = 2048;
          v97 = v46;
          v98 = 2048;
          v99 = (_QWORD *)v15;
          _os_log_send_and_compose_impl();
          _os_crash_msg();
          __break(1u);
LABEL_119:
          v91 = 0;
          v6 = __str;
          v103 = 0u;
          v104 = 0u;
          v101 = 0u;
          v102 = 0u;
          v100 = (StringID)0;
          v5 = v36;
          os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
          *(_DWORD *)__str = 136315906;
          v93 = "operator[]";
          v94 = 1024;
          v95 = 797;
          v96 = 2048;
          v97 = v5;
          v98 = 2048;
          v99 = a5;
          _os_log_send_and_compose_impl();
          _os_crash_msg();
          __break(1u);
LABEL_120:
          v87 = 0;
          *((_OWORD *)v5 + 6) = 0u;
          *((_OWORD *)v5 + 7) = 0u;
          *((_OWORD *)v5 + 4) = 0u;
          *((_OWORD *)v5 + 5) = 0u;
          *((_OWORD *)v5 + 3) = 0u;
          v60 = a4;
          os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
          *(_DWORD *)__str = 136315906;
          *(_QWORD *)(v5 + 4) = "operator[]";
          v94 = 1024;
          *(_DWORD *)(v5 + 14) = 789;
          v96 = 2048;
          *(_QWORD *)(v5 + 20) = v60;
          v98 = 2048;
          *(_QWORD *)(v5 + 30) = v6;
          _os_log_send_and_compose_impl();
          _os_crash_msg();
          __break(1u);
          goto LABEL_121;
        }
        *(_QWORD *)(a3[46] + 8 * (_QWORD)v46) = *v45;
        ++*a5;
      }
      else if (re::StringID::operator==((_QWORD *)(v15 + 88 * (_QWORD)v25 + 16), re::AnimationBlendTreeNodeDescription::kInput))
      {
        if ((v88 & 1) != 0)
          v47 = v90;
        else
          v47 = v89;
        re::DynamicString::operator+((re::DynamicString *)&v87, v34, (re::DynamicString *)&v100);
        if (((uint64_t)v100.var1 & 1) != 0)
          v48 = (const char *)v101;
        else
          v48 = (char *)&v100.var1 + 1;
        re::RigGraphDefinitionBuilder::promoteParameter(v66, v47, v34, v48, *(const char **)(v15 + 88 * (_QWORD)v25 + 56), 1, (uint64_t)v69);
        a5 = v28;
        v23 = v64;
        v20 = v65;
        if (!v69[0] && (_QWORD)v70)
        {
          if ((BYTE8(v70) & 1) != 0)
            (*(void (**)(void))(*(_QWORD *)v70 + 40))();
          v70 = 0u;
          v71 = 0u;
        }
        if (*(_QWORD *)&v100.var0 && ((uint64_t)v100.var1 & 1) != 0)
          (*(void (**)(void))(**(_QWORD **)&v100.var0 + 40))();
        re::DynamicArray<re::StringID>::add(v63, (StringID *)(v15 + 88 * (_QWORD)v25 + 32));
      }
      else
      {
        if (re::AnimationBlendTreeNodeDescription::isBlend((re::AnimationBlendTreeNodeDescription *)(v15 + 88 * (_QWORD)v25))
          && *(v32 - 1) <= 1uLL)
        {
          v49 = v67;
          if (*v32 && !*(_BYTE *)*v32)
            v49 = "output";
        }
        else
        {
          v49 = v67;
        }
        if ((v88 & 1) != 0)
          v50 = v90;
        else
          v50 = v89;
        v51 = (re *)re::RigGraphDefinitionBuilder::addConnection((re::RigGraphDefinitionBuilder *)v66, *(const char **)(v30 + 8), v49, v50, v34, 0, 0, (uint64_t)&v100);
        if (!*(_BYTE *)&v100.var0)
        {
          v53 = *re::animationLogObjects(v51);
          v54 = __str;
          if (!os_log_type_enabled(v53, OS_LOG_TYPE_ERROR))
            goto LABEL_109;
          goto LABEL_114;
        }
        a5 = v28;
        v23 = v64;
        v20 = v65;
      }
      if (*v20 <= (unint64_t)++v22)
        goto LABEL_103;
    }
    v91 = 0;
    v103 = 0u;
    v104 = 0u;
    v101 = 0u;
    v102 = 0u;
    v100 = (StringID)0;
    v25 = (char *)MEMORY[0x24BDACB70];
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    *(_DWORD *)__str = 136315906;
    v93 = "operator[]";
    v94 = 1024;
    v95 = 797;
    v96 = 2048;
    v97 = v22;
    v98 = 2048;
    v99 = v24;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_111:
    v91 = 0;
    v103 = 0u;
    v104 = 0u;
    v101 = 0u;
    v102 = 0u;
    v100 = (StringID)0;
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    *(_DWORD *)__str = 136315906;
    v93 = "operator[]";
    v94 = 1024;
    v95 = 789;
    v96 = 2048;
    v97 = v25;
    v98 = 2048;
    v99 = (_QWORD *)v15;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_112:
    v91 = 0;
    v103 = 0u;
    v104 = 0u;
    v101 = 0u;
    v102 = 0u;
    v100 = (StringID)0;
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    *(_DWORD *)__str = 136315906;
    v93 = "operator[]";
    v94 = 1024;
    v95 = 797;
    v96 = 2048;
    v97 = v25;
    v98 = 2048;
    v99 = (_QWORD *)v15;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_113:
    v91 = 0;
    v53 = __str;
    v103 = 0u;
    v104 = 0u;
    v101 = 0u;
    v102 = 0u;
    v100 = (StringID)0;
    v54 = (char *)MEMORY[0x24BDACB70];
    v58 = (char *)v27;
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    *(_DWORD *)__str = 136315906;
    v93 = "operator[]";
    v94 = 1024;
    v95 = 797;
    v96 = 2048;
    v97 = v58;
    v98 = 2048;
    v99 = (_QWORD *)v15;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_114:
    if ((v102 & 1) != 0)
      v59 = (char *)*((_QWORD *)&v102 + 1);
    else
      v59 = (char *)&v102 + 1;
    *(_DWORD *)__str = 136315138;
    *(_QWORD *)(v54 + 4) = v59;
    _os_log_error_impl(&dword_224FE9000, v53, OS_LOG_TYPE_ERROR, "Add connection failed - %s", (uint8_t *)__str, 0xCu);
LABEL_109:
    v55 = *(_OWORD *)(v54 + 72);
    v56 = *((_QWORD *)&v102 + 1);
    v57 = v103;
    *(_BYTE *)a1 = 0;
    *(_OWORD *)(a1 + 8) = *(_OWORD *)(v54 + 56);
    *(_OWORD *)(a1 + 24) = v55;
    *(_QWORD *)(a1 + 40) = v56;
    *(_QWORD *)(a1 + 48) = v57;
  }
  else
  {
LABEL_103:
    *(_BYTE *)a1 = 1;
  }
  result = v87;
  if (v87)
  {
    if ((v88 & 1) != 0)
      return (*(uint64_t (**)(uint64_t, const char *))(*(_QWORD *)v87 + 40))(v87, v90);
  }
  return result;
}

void re::Vector2FAnimationBlendTree::~Vector2FAnimationBlendTree(re::Vector2FAnimationBlendTree *this)
{
  re::AnimationBlendTree<re::Vector2<float>>::~AnimationBlendTree((uint64_t)this);
  JUMPOUT(0x2276933B8);
}

uint64_t re::AnimationBlendTree<re::Vector2<float>>::childCount(uint64_t a1)
{
  return *(_QWORD *)(a1 + 312);
}

uint64_t re::AnimationBlendTree<re::Vector2<float>>::child(uint64_t a1, unint64_t a2)
{
  if (*(_QWORD *)(a1 + 312) <= a2)
  {
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  return *(_QWORD *)(*(_QWORD *)(a1 + 320) + 8 * a2);
}

double re::AnimationBlendTree<re::Vector2<float>>::totalDuration(uint64_t a1)
{
  unint64_t v1;
  unint64_t v3;
  float v4;
  uint64_t v5;
  double v6;
  uint64_t v7;

  v1 = *(_QWORD *)(a1 + 312);
  if (v1)
  {
    v3 = 0;
    v4 = 0.0;
    do
    {
      v5 = *(_QWORD *)(*(_QWORD *)(a1 + 320) + 8 * v3);
      if (v5)
      {
        v6 = (*(double (**)(uint64_t))(*(_QWORD *)v5 + 40))(v5);
        v1 = *(_QWORD *)(a1 + 312);
        if (v6 > v4)
        {
          if (v1 <= v3)
          {
            os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
            _os_log_send_and_compose_impl();
            _os_crash_msg();
            __break(1u);
          }
          v7 = *(_QWORD *)(*(_QWORD *)(a1 + 320) + 8 * v3);
          v4 = (*(double (**)(uint64_t))(*(_QWORD *)v7 + 40))(v7);
          v1 = *(_QWORD *)(a1 + 312);
        }
      }
      ++v3;
    }
    while (v3 < v1);
  }
  else
  {
    return 0.0;
  }
  return v4;
}

void re::AnimationBlendTree<re::Vector2<float>>::evaluateCore(uint64_t a1, uint64_t a2)
{
  re::internal::assertLog((re::internal *)4, a2, "assertion failure: '%s' (%s:line %i) Requires AnimationBlendTreeInstance", "!\"Unreachable code\"", "evaluateCore", 109);
  _os_crash();
  __break(1u);
}

void re::AnimationBlendTree<re::Vector2<float>>::~AnimationBlendTree(uint64_t a1)
{
  re::AnimationBlendTree<re::Vector2<float>>::~AnimationBlendTree(a1);
  JUMPOUT(0x2276933B8);
}

uint64_t re::AnimationBlendTree<re::Vector2<float>>::~AnimationBlendTree(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  *(_QWORD *)a1 = &off_24ED35AB8;
  v2 = a1 + 456;
  re::DynamicArray<re::BlendSpaceSampleDefinition>::deinit(a1 + 584);
  re::DynamicArray<re::BlendSpaceAxisDefinition>::deinit(a1 + 544);
  re::DynamicArray<re::RigGraphConnection>::deinit((_QWORD *)(a1 + 496));
  re::DynamicArray<re::AnimationBlendTreeNodeDescription>::deinit(v2);
  re::DynamicArray<re::StringID>::deinit(a1 + 416);
  re::DynamicArray<re::StringID>::deinit(a1 + 376);
  v3 = *(_QWORD *)(a1 + 352);
  if (v3)
  {
    if (*(_QWORD *)(a1 + 360))
    {
      (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v3 + 40))(v3, *(_QWORD *)(a1 + 368));
      *(_QWORD *)(a1 + 360) = 0;
      *(_QWORD *)(a1 + 368) = 0;
    }
    *(_QWORD *)(a1 + 352) = 0;
  }
  v4 = *(_QWORD *)(a1 + 328);
  if (v4)
  {
    if (*(_QWORD *)(a1 + 336))
    {
      (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v4 + 40))(v4, *(_QWORD *)(a1 + 344));
      *(_QWORD *)(a1 + 336) = 0;
      *(_QWORD *)(a1 + 344) = 0;
    }
    *(_QWORD *)(a1 + 328) = 0;
  }
  v5 = *(_QWORD *)(a1 + 304);
  if (v5)
  {
    if (*(_QWORD *)(a1 + 312))
    {
      (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v5 + 40))(v5, *(_QWORD *)(a1 + 320));
      *(_QWORD *)(a1 + 312) = 0;
      *(_QWORD *)(a1 + 320) = 0;
    }
    *(_QWORD *)(a1 + 304) = 0;
  }
  v6 = *(_QWORD *)(a1 + 280);
  if (v6)
  {
    if (*(_QWORD *)(a1 + 288))
    {
      (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v6 + 40))(v6, *(_QWORD *)(a1 + 296));
      *(_QWORD *)(a1 + 288) = 0;
      *(_QWORD *)(a1 + 296) = 0;
    }
    *(_QWORD *)(a1 + 280) = 0;
  }
  re::DynamicArray<re::Pair<unsigned long,re::StringID,true>>::deinit(a1 + 240);
  re::DynamicArray<re::StringID>::deinit(a1 + 200);
  re::DynamicArray<re::RigGraphNodeChild>::deinit(a1 + 160);
  re::DynamicArray<re::RigGraphNodeInputParameter>::deinit(a1 + 120);
  re::DynamicArray<re::RigGraphNodeInputParameter>::deinit(a1 + 80);
  *(_QWORD *)a1 = off_24ED1F350;
  v7 = *(_QWORD *)(a1 + 40);
  if (v7)
  {
    if ((*(_BYTE *)(a1 + 48) & 1) != 0)
      (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v7 + 40))(v7, *(_QWORD *)(a1 + 56));
    *(_OWORD *)(a1 + 40) = 0u;
    *(_OWORD *)(a1 + 56) = 0u;
  }
  re::StringID::destroyString((re::StringID *)(a1 + 24));
  return a1;
}

uint64_t re::AnimationBlendTreeBuilder<re::Vector3<float>>::buildRig(uint64_t a1, _QWORD *a2, _QWORD *a3, unint64_t a4, unint64_t *a5)
{
  char *v5;
  char *v6;
  uint64_t v8;
  uint64_t v11;
  uint64_t v12;
  const char **v13;
  const char *v14;
  unint64_t v15;
  _BOOL4 v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  char *v22;
  _QWORD *v23;
  _QWORD *v24;
  char *v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t *v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  _QWORD *v32;
  char *v33;
  const char *v34;
  uint64_t v35;
  char *v36;
  const char *v37;
  const char *v38;
  unint64_t v39;
  const StringID *v40;
  unint64_t v41;
  _BYTE *v42;
  const char *v43;
  const char *v44;
  _QWORD *v45;
  char *v46;
  const char *v47;
  const char *v48;
  const char *v49;
  const char *v50;
  re *v51;
  uint64_t result;
  NSObject *v53;
  char *v54;
  __int128 v55;
  uint64_t v56;
  uint64_t v57;
  char *v58;
  char *v59;
  unint64_t v60;
  unint64_t v61;
  _anonymous_namespace_ *v63;
  _QWORD *v64;
  _QWORD *v65;
  const char **v66;
  char *v67;
  unint64_t v68;
  char v69[24];
  __int128 v70;
  __int128 v71;
  char v72[24];
  __int128 v73;
  __int128 v74;
  char v75[24];
  __int128 v76;
  __int128 v77;
  char v78[24];
  __int128 v79;
  __int128 v80;
  char v81[24];
  __int128 v82;
  __int128 v83;
  char v84[24];
  __int128 v85;
  __int128 v86;
  uint64_t v87;
  char v88;
  _BYTE v89[7];
  const char *v90;
  uint64_t v91;
  char __str[4];
  const char *v93;
  __int16 v94;
  int v95;
  __int16 v96;
  char *v97;
  __int16 v98;
  _QWORD *v99;
  StringID v100;
  __int128 v101;
  __int128 v102;
  __int128 v103;
  __int128 v104;
  uint64_t v105;

  v5 = __str;
  v105 = *MEMORY[0x24BDAC8D0];
  v6 = (char *)a2[3];
  if ((unint64_t)v6 <= a4)
    goto LABEL_120;
  v8 = a2[50];
  v6 = *(char **)(v8 + 16);
  if ((unint64_t)v6 <= a4)
  {
LABEL_121:
    v87 = 0;
    *((_OWORD *)v5 + 6) = 0u;
    *((_OWORD *)v5 + 7) = 0u;
    *((_OWORD *)v5 + 4) = 0u;
    *((_OWORD *)v5 + 5) = 0u;
    *((_OWORD *)v5 + 3) = 0u;
    v61 = a4;
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    *(_DWORD *)__str = 136315906;
    *(_QWORD *)(v5 + 4) = "operator[]";
    v94 = 1024;
    *(_DWORD *)(v5 + 14) = 797;
    v96 = 2048;
    *(_QWORD *)(v5 + 20) = v61;
    v98 = 2048;
    *(_QWORD *)(v5 + 30) = v6;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  v11 = a2[5];
  v12 = *(_QWORD *)(v8 + 32);
  v13 = (const char **)(v12 + 88 * a4);
  v14 = v13[1];
  v15 = a4;
  v68 = v15;
  if (re::AnimationBlendTreeNodeDescription::isBlend((re::AnimationBlendTreeNodeDescription *)v13))
  {
    v16 = re::StringID::operator==((_QWORD *)(v12 + 88 * v15 + 16), re::AnimationBlendTreeNodeDescription::kBlendAdditive);
    v17 = 0x1CE4C130A6D4372;
    if (v16)
    {
      v17 = 0xCD65BF962F71ELL;
      v18 = "AddVector3";
    }
    else
    {
      v18 = "LerpVector3";
    }
    *(_QWORD *)&v100.var0 = v17;
    v100.var1 = v18;
    re::RigGraphDefinitionBuilder::addNode((re::RigGraphDefinitionBuilder *)(a2 + 39), (_anonymous_namespace_ *)v18, v13[1], (uint64_t)v84);
    if (!v84[0] && (_QWORD)v85)
    {
      if ((BYTE8(v85) & 1) != 0)
        (*(void (**)(void))(*(_QWORD *)v85 + 40))();
      v85 = 0u;
      v86 = 0u;
    }
    re::StringID::destroyString((re::StringID *)&v100);
  }
  else if (!re::StringID::operator==((_QWORD *)(v12 + 88 * v15 + 16), re::AnimationBlendTreeNodeDescription::kClip)
         && !re::StringID::operator==((_QWORD *)(v12 + 88 * v15 + 16), re::AnimationBlendTreeNodeDescription::kInput))
  {
    re::RigGraphDefinitionBuilder::addNode((re::RigGraphDefinitionBuilder *)(a2 + 39), *(_anonymous_namespace_ **)(v12 + 88 * v15 + 24), v13[1], (uint64_t)v81);
    if (!v81[0])
    {
      if ((_QWORD)v82)
      {
        if ((BYTE8(v82) & 1) != 0)
          (*(void (**)(void))(*(_QWORD *)v82 + 40))();
        v82 = 0u;
        v83 = 0u;
      }
    }
  }
  v19 = v11 + 80 * v15;
  v21 = *(_QWORD *)(v19 + 24);
  v20 = (_QWORD *)(v19 + 24);
  if (v21)
  {
    v22 = 0;
    v23 = (_QWORD *)(v11 + 80 * v15 + 40);
    v66 = (const char **)(a2 + 39);
    v63 = (_anonymous_namespace_ *)(a3 + 52);
    v64 = v23;
    v65 = v20;
    while (1)
    {
      re::AnimationBlendTreeBuilder<re::Vector3<float>>::buildRig(v78, a2, a3, *(_QWORD *)(*v23 + 8 * (_QWORD)v22), a5);
      if (!v78[0] && (_QWORD)v79)
      {
        if ((BYTE8(v79) & 1) != 0)
          (*(void (**)(void))(*(_QWORD *)v79 + 40))();
        v79 = 0u;
        v80 = 0u;
      }
      v24 = (_QWORD *)*v20;
      if (*v20 <= (unint64_t)v22)
        break;
      v25 = *(char **)(*v23 + 8 * (_QWORD)v22);
      v15 = a2[3];
      if (v15 <= (unint64_t)v25)
        goto LABEL_111;
      v26 = a2[50];
      v15 = *(_QWORD *)(v26 + 16);
      if (v15 <= (unint64_t)v25)
        goto LABEL_112;
      v27 = v68;
      if (v15 <= v68)
        goto LABEL_113;
      v28 = a5;
      v29 = a2[5];
      v15 = *(_QWORD *)(v26 + 32);
      v30 = v15 + 88 * (_QWORD)v25;
      v31 = v29 + 80 * (_QWORD)v25;
      v33 = *(char **)(v31 + 72);
      v32 = (_QWORD *)(v31 + 72);
      v67 = v33;
      v34 = *(const char **)(v29 + 80 * (_QWORD)v25 + 56);
      if (re::AnimationBlendTreeNodeDescription::isBlend((re::AnimationBlendTreeNodeDescription *)(v15 + 88 * v68)))
      {
        if (v22)
        {
          v35 = a2[50];
          a5 = *(unint64_t **)(v35 + 16);
          v36 = (char *)v68;
          if ((unint64_t)a5 <= v68)
            goto LABEL_119;
          v34 = "input2";
          if (!re::StringID::operator==((_QWORD *)(*(_QWORD *)(v35 + 32) + 88 * v68 + 16), re::AnimationBlendTreeNodeDescription::kBlendAdditive))
          {
            snprintf(__str, 0x18uLL, "%f", *(float *)(v15 + 88 * (_QWORD)v25 + 80));
            if ((v88 & 1) != 0)
              v37 = v90;
            else
              v37 = v89;
            re::DynamicString::operator+((re::DynamicString *)&v87, "input3", (re::DynamicString *)&v100);
            if (((uint64_t)v100.var1 & 1) != 0)
              v38 = (const char *)v101;
            else
              v38 = (char *)&v100.var1 + 1;
            re::RigGraphDefinitionBuilder::promoteParameter(v66, v37, "input3", v38, __str, 1, (uint64_t)v75);
            if (!v75[0] && (_QWORD)v76)
            {
              if ((BYTE8(v76) & 1) != 0)
                (*(void (**)(void))(*(_QWORD *)v76 + 40))();
              v76 = 0u;
              v77 = 0u;
            }
            if (*(_QWORD *)&v100.var0 && ((uint64_t)v100.var1 & 1) != 0)
              (*(void (**)(void))(**(_QWORD **)&v100.var0 + 40))();
            v39 = v15 + 88 * (_QWORD)v25;
            v41 = *(_QWORD *)(v39 + 64);
            v40 = (const StringID *)(v39 + 64);
            if (v41 <= 1 && (v42 = *(_BYTE **)(v15 + 88 * (_QWORD)v25 + 72)) != 0 && !*v42)
              re::AnimationBlendTreeBuilder<float>::weightPathFromName((re::StringID *)&v100, *(_QWORD *)(v30 + 8));
            else
              re::StringID::StringID((re::StringID *)&v100, v40);
            re::DynamicArray<re::StringID>::add(v63, &v100);
            re::StringID::destroyString((re::StringID *)&v100);
            v34 = "input2";
          }
        }
        else
        {
          v34 = "input1";
        }
      }
      if (re::StringID::operator==((_QWORD *)(v15 + 88 * (_QWORD)v25 + 16), re::AnimationBlendTreeNodeDescription::kClip))
      {
        if ((v88 & 1) != 0)
          v43 = v90;
        else
          v43 = v89;
        re::DynamicString::operator+((re::DynamicString *)&v87, v34, (re::DynamicString *)&v100);
        if (((uint64_t)v100.var1 & 1) != 0)
          v44 = (const char *)v101;
        else
          v44 = (char *)&v100.var1 + 1;
        re::RigGraphDefinitionBuilder::promoteParameter(v66, v43, v34, v44, "", 1, (uint64_t)v72);
        a5 = v28;
        v23 = v64;
        v20 = v65;
        if (!v72[0] && (_QWORD)v73)
        {
          if ((BYTE8(v73) & 1) != 0)
            (*(void (**)(void))(*(_QWORD *)v73 + 40))();
          v73 = 0u;
          v74 = 0u;
        }
        if (*(_QWORD *)&v100.var0 && ((uint64_t)v100.var1 & 1) != 0)
          (*(void (**)(void))(**(_QWORD **)&v100.var0 + 40))();
        *(_QWORD *)&v100.var0 = 0;
        v100.var1 = "";
        re::DynamicArray<re::StringID>::add(v63, (uint64_t *)&v100);
        re::StringID::destroyString((re::StringID *)&v100);
        v45 = (_QWORD *)re::HashTable<re::StringID,re::StateParameterInt *,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::tryGet((uint64_t)(a2 + 51), (_QWORD *)(v15 + 88 * (_QWORD)v25 + 32));
        v46 = (char *)*a5;
        v15 = a3[45];
        if (v15 <= *a5)
        {
          v91 = 0;
          v103 = 0u;
          v104 = 0u;
          v101 = 0u;
          v102 = 0u;
          v100 = (StringID)0;
          os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
          *(_DWORD *)__str = 136315906;
          v93 = "operator[]";
          v94 = 1024;
          v95 = 468;
          v96 = 2048;
          v97 = v46;
          v98 = 2048;
          v99 = (_QWORD *)v15;
          _os_log_send_and_compose_impl();
          _os_crash_msg();
          __break(1u);
LABEL_119:
          v91 = 0;
          v6 = __str;
          v103 = 0u;
          v104 = 0u;
          v101 = 0u;
          v102 = 0u;
          v100 = (StringID)0;
          v5 = v36;
          os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
          *(_DWORD *)__str = 136315906;
          v93 = "operator[]";
          v94 = 1024;
          v95 = 797;
          v96 = 2048;
          v97 = v5;
          v98 = 2048;
          v99 = a5;
          _os_log_send_and_compose_impl();
          _os_crash_msg();
          __break(1u);
LABEL_120:
          v87 = 0;
          *((_OWORD *)v5 + 6) = 0u;
          *((_OWORD *)v5 + 7) = 0u;
          *((_OWORD *)v5 + 4) = 0u;
          *((_OWORD *)v5 + 5) = 0u;
          *((_OWORD *)v5 + 3) = 0u;
          v60 = a4;
          os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
          *(_DWORD *)__str = 136315906;
          *(_QWORD *)(v5 + 4) = "operator[]";
          v94 = 1024;
          *(_DWORD *)(v5 + 14) = 789;
          v96 = 2048;
          *(_QWORD *)(v5 + 20) = v60;
          v98 = 2048;
          *(_QWORD *)(v5 + 30) = v6;
          _os_log_send_and_compose_impl();
          _os_crash_msg();
          __break(1u);
          goto LABEL_121;
        }
        *(_QWORD *)(a3[46] + 8 * (_QWORD)v46) = *v45;
        ++*a5;
      }
      else if (re::StringID::operator==((_QWORD *)(v15 + 88 * (_QWORD)v25 + 16), re::AnimationBlendTreeNodeDescription::kInput))
      {
        if ((v88 & 1) != 0)
          v47 = v90;
        else
          v47 = v89;
        re::DynamicString::operator+((re::DynamicString *)&v87, v34, (re::DynamicString *)&v100);
        if (((uint64_t)v100.var1 & 1) != 0)
          v48 = (const char *)v101;
        else
          v48 = (char *)&v100.var1 + 1;
        re::RigGraphDefinitionBuilder::promoteParameter(v66, v47, v34, v48, *(const char **)(v15 + 88 * (_QWORD)v25 + 56), 1, (uint64_t)v69);
        a5 = v28;
        v23 = v64;
        v20 = v65;
        if (!v69[0] && (_QWORD)v70)
        {
          if ((BYTE8(v70) & 1) != 0)
            (*(void (**)(void))(*(_QWORD *)v70 + 40))();
          v70 = 0u;
          v71 = 0u;
        }
        if (*(_QWORD *)&v100.var0 && ((uint64_t)v100.var1 & 1) != 0)
          (*(void (**)(void))(**(_QWORD **)&v100.var0 + 40))();
        re::DynamicArray<re::StringID>::add(v63, (StringID *)(v15 + 88 * (_QWORD)v25 + 32));
      }
      else
      {
        if (re::AnimationBlendTreeNodeDescription::isBlend((re::AnimationBlendTreeNodeDescription *)(v15 + 88 * (_QWORD)v25))
          && *(v32 - 1) <= 1uLL)
        {
          v49 = v67;
          if (*v32 && !*(_BYTE *)*v32)
            v49 = "output";
        }
        else
        {
          v49 = v67;
        }
        if ((v88 & 1) != 0)
          v50 = v90;
        else
          v50 = v89;
        v51 = (re *)re::RigGraphDefinitionBuilder::addConnection((re::RigGraphDefinitionBuilder *)v66, *(const char **)(v30 + 8), v49, v50, v34, 0, 0, (uint64_t)&v100);
        if (!*(_BYTE *)&v100.var0)
        {
          v53 = *re::animationLogObjects(v51);
          v54 = __str;
          if (!os_log_type_enabled(v53, OS_LOG_TYPE_ERROR))
            goto LABEL_109;
          goto LABEL_114;
        }
        a5 = v28;
        v23 = v64;
        v20 = v65;
      }
      if (*v20 <= (unint64_t)++v22)
        goto LABEL_103;
    }
    v91 = 0;
    v103 = 0u;
    v104 = 0u;
    v101 = 0u;
    v102 = 0u;
    v100 = (StringID)0;
    v25 = (char *)MEMORY[0x24BDACB70];
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    *(_DWORD *)__str = 136315906;
    v93 = "operator[]";
    v94 = 1024;
    v95 = 797;
    v96 = 2048;
    v97 = v22;
    v98 = 2048;
    v99 = v24;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_111:
    v91 = 0;
    v103 = 0u;
    v104 = 0u;
    v101 = 0u;
    v102 = 0u;
    v100 = (StringID)0;
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    *(_DWORD *)__str = 136315906;
    v93 = "operator[]";
    v94 = 1024;
    v95 = 789;
    v96 = 2048;
    v97 = v25;
    v98 = 2048;
    v99 = (_QWORD *)v15;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_112:
    v91 = 0;
    v103 = 0u;
    v104 = 0u;
    v101 = 0u;
    v102 = 0u;
    v100 = (StringID)0;
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    *(_DWORD *)__str = 136315906;
    v93 = "operator[]";
    v94 = 1024;
    v95 = 797;
    v96 = 2048;
    v97 = v25;
    v98 = 2048;
    v99 = (_QWORD *)v15;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_113:
    v91 = 0;
    v53 = __str;
    v103 = 0u;
    v104 = 0u;
    v101 = 0u;
    v102 = 0u;
    v100 = (StringID)0;
    v54 = (char *)MEMORY[0x24BDACB70];
    v58 = (char *)v27;
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    *(_DWORD *)__str = 136315906;
    v93 = "operator[]";
    v94 = 1024;
    v95 = 797;
    v96 = 2048;
    v97 = v58;
    v98 = 2048;
    v99 = (_QWORD *)v15;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_114:
    if ((v102 & 1) != 0)
      v59 = (char *)*((_QWORD *)&v102 + 1);
    else
      v59 = (char *)&v102 + 1;
    *(_DWORD *)__str = 136315138;
    *(_QWORD *)(v54 + 4) = v59;
    _os_log_error_impl(&dword_224FE9000, v53, OS_LOG_TYPE_ERROR, "Add connection failed - %s", (uint8_t *)__str, 0xCu);
LABEL_109:
    v55 = *(_OWORD *)(v54 + 72);
    v56 = *((_QWORD *)&v102 + 1);
    v57 = v103;
    *(_BYTE *)a1 = 0;
    *(_OWORD *)(a1 + 8) = *(_OWORD *)(v54 + 56);
    *(_OWORD *)(a1 + 24) = v55;
    *(_QWORD *)(a1 + 40) = v56;
    *(_QWORD *)(a1 + 48) = v57;
  }
  else
  {
LABEL_103:
    *(_BYTE *)a1 = 1;
  }
  result = v87;
  if (v87)
  {
    if ((v88 & 1) != 0)
      return (*(uint64_t (**)(uint64_t, const char *))(*(_QWORD *)v87 + 40))(v87, v90);
  }
  return result;
}

void re::Vector3FAnimationBlendTree::~Vector3FAnimationBlendTree(re::Vector3FAnimationBlendTree *this)
{
  re::AnimationBlendTree<re::Vector3<float>>::~AnimationBlendTree((uint64_t)this);
  JUMPOUT(0x2276933B8);
}

uint64_t re::AnimationBlendTree<re::Vector3<float>>::childCount(uint64_t a1)
{
  return *(_QWORD *)(a1 + 312);
}

uint64_t re::AnimationBlendTree<re::Vector3<float>>::child(uint64_t a1, unint64_t a2)
{
  if (*(_QWORD *)(a1 + 312) <= a2)
  {
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  return *(_QWORD *)(*(_QWORD *)(a1 + 320) + 8 * a2);
}

double re::AnimationBlendTree<re::Vector3<float>>::totalDuration(uint64_t a1)
{
  unint64_t v1;
  unint64_t v3;
  float v4;
  uint64_t v5;
  double v6;
  uint64_t v7;

  v1 = *(_QWORD *)(a1 + 312);
  if (v1)
  {
    v3 = 0;
    v4 = 0.0;
    do
    {
      v5 = *(_QWORD *)(*(_QWORD *)(a1 + 320) + 8 * v3);
      if (v5)
      {
        v6 = (*(double (**)(uint64_t))(*(_QWORD *)v5 + 40))(v5);
        v1 = *(_QWORD *)(a1 + 312);
        if (v6 > v4)
        {
          if (v1 <= v3)
          {
            os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
            _os_log_send_and_compose_impl();
            _os_crash_msg();
            __break(1u);
          }
          v7 = *(_QWORD *)(*(_QWORD *)(a1 + 320) + 8 * v3);
          v4 = (*(double (**)(uint64_t))(*(_QWORD *)v7 + 40))(v7);
          v1 = *(_QWORD *)(a1 + 312);
        }
      }
      ++v3;
    }
    while (v3 < v1);
  }
  else
  {
    return 0.0;
  }
  return v4;
}

void re::AnimationBlendTree<re::Vector3<float>>::evaluateCore(uint64_t a1, uint64_t a2)
{
  re::internal::assertLog((re::internal *)4, a2, "assertion failure: '%s' (%s:line %i) Requires AnimationBlendTreeInstance", "!\"Unreachable code\"", "evaluateCore", 109);
  _os_crash();
  __break(1u);
}

void re::AnimationBlendTree<re::Vector3<float>>::~AnimationBlendTree(uint64_t a1)
{
  re::AnimationBlendTree<re::Vector3<float>>::~AnimationBlendTree(a1);
  JUMPOUT(0x2276933B8);
}

uint64_t re::AnimationBlendTree<re::Vector3<float>>::~AnimationBlendTree(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  *(_QWORD *)a1 = &off_24ED35BF8;
  v2 = a1 + 456;
  re::DynamicArray<re::BlendSpaceSampleDefinition>::deinit(a1 + 584);
  re::DynamicArray<re::BlendSpaceAxisDefinition>::deinit(a1 + 544);
  re::DynamicArray<re::RigGraphConnection>::deinit((_QWORD *)(a1 + 496));
  re::DynamicArray<re::AnimationBlendTreeNodeDescription>::deinit(v2);
  re::DynamicArray<re::StringID>::deinit(a1 + 416);
  re::DynamicArray<re::StringID>::deinit(a1 + 376);
  v3 = *(_QWORD *)(a1 + 352);
  if (v3)
  {
    if (*(_QWORD *)(a1 + 360))
    {
      (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v3 + 40))(v3, *(_QWORD *)(a1 + 368));
      *(_QWORD *)(a1 + 360) = 0;
      *(_QWORD *)(a1 + 368) = 0;
    }
    *(_QWORD *)(a1 + 352) = 0;
  }
  v4 = *(_QWORD *)(a1 + 328);
  if (v4)
  {
    if (*(_QWORD *)(a1 + 336))
    {
      (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v4 + 40))(v4, *(_QWORD *)(a1 + 344));
      *(_QWORD *)(a1 + 336) = 0;
      *(_QWORD *)(a1 + 344) = 0;
    }
    *(_QWORD *)(a1 + 328) = 0;
  }
  v5 = *(_QWORD *)(a1 + 304);
  if (v5)
  {
    if (*(_QWORD *)(a1 + 312))
    {
      (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v5 + 40))(v5, *(_QWORD *)(a1 + 320));
      *(_QWORD *)(a1 + 312) = 0;
      *(_QWORD *)(a1 + 320) = 0;
    }
    *(_QWORD *)(a1 + 304) = 0;
  }
  v6 = *(_QWORD *)(a1 + 280);
  if (v6)
  {
    if (*(_QWORD *)(a1 + 288))
    {
      (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v6 + 40))(v6, *(_QWORD *)(a1 + 296));
      *(_QWORD *)(a1 + 288) = 0;
      *(_QWORD *)(a1 + 296) = 0;
    }
    *(_QWORD *)(a1 + 280) = 0;
  }
  re::DynamicArray<re::Pair<unsigned long,re::StringID,true>>::deinit(a1 + 240);
  re::DynamicArray<re::StringID>::deinit(a1 + 200);
  re::DynamicArray<re::RigGraphNodeChild>::deinit(a1 + 160);
  re::DynamicArray<re::RigGraphNodeInputParameter>::deinit(a1 + 120);
  re::DynamicArray<re::RigGraphNodeInputParameter>::deinit(a1 + 80);
  *(_QWORD *)a1 = off_24ED1F350;
  v7 = *(_QWORD *)(a1 + 40);
  if (v7)
  {
    if ((*(_BYTE *)(a1 + 48) & 1) != 0)
      (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v7 + 40))(v7, *(_QWORD *)(a1 + 56));
    *(_OWORD *)(a1 + 40) = 0u;
    *(_OWORD *)(a1 + 56) = 0u;
  }
  re::StringID::destroyString((re::StringID *)(a1 + 24));
  return a1;
}

void re::Vector4FAnimationBlendTree::~Vector4FAnimationBlendTree(re::Vector4FAnimationBlendTree *this)
{
  re::AnimationBlendTree<re::Vector4<float>>::~AnimationBlendTree((uint64_t)this);
  JUMPOUT(0x2276933B8);
}

uint64_t re::AnimationBlendTree<re::Vector4<float>>::childCount(uint64_t a1)
{
  return *(_QWORD *)(a1 + 312);
}

uint64_t re::AnimationBlendTree<re::Vector4<float>>::child(uint64_t a1, unint64_t a2)
{
  if (*(_QWORD *)(a1 + 312) <= a2)
  {
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  return *(_QWORD *)(*(_QWORD *)(a1 + 320) + 8 * a2);
}

double re::AnimationBlendTree<re::Vector4<float>>::totalDuration(uint64_t a1)
{
  unint64_t v1;
  unint64_t v3;
  float v4;
  uint64_t v5;
  double v6;
  uint64_t v7;

  v1 = *(_QWORD *)(a1 + 312);
  if (v1)
  {
    v3 = 0;
    v4 = 0.0;
    do
    {
      v5 = *(_QWORD *)(*(_QWORD *)(a1 + 320) + 8 * v3);
      if (v5)
      {
        v6 = (*(double (**)(uint64_t))(*(_QWORD *)v5 + 40))(v5);
        v1 = *(_QWORD *)(a1 + 312);
        if (v6 > v4)
        {
          if (v1 <= v3)
          {
            os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
            _os_log_send_and_compose_impl();
            _os_crash_msg();
            __break(1u);
          }
          v7 = *(_QWORD *)(*(_QWORD *)(a1 + 320) + 8 * v3);
          v4 = (*(double (**)(uint64_t))(*(_QWORD *)v7 + 40))(v7);
          v1 = *(_QWORD *)(a1 + 312);
        }
      }
      ++v3;
    }
    while (v3 < v1);
  }
  else
  {
    return 0.0;
  }
  return v4;
}

void re::AnimationBlendTree<re::Vector4<float>>::evaluateCore(uint64_t a1, uint64_t a2)
{
  re::internal::assertLog((re::internal *)4, a2, "assertion failure: '%s' (%s:line %i) Requires AnimationBlendTreeInstance", "!\"Unreachable code\"", "evaluateCore", 109);
  _os_crash();
  __break(1u);
}

void re::AnimationBlendTree<re::Vector4<float>>::~AnimationBlendTree(uint64_t a1)
{
  re::AnimationBlendTree<re::Vector4<float>>::~AnimationBlendTree(a1);
  JUMPOUT(0x2276933B8);
}

uint64_t re::AnimationBlendTree<re::Vector4<float>>::~AnimationBlendTree(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  *(_QWORD *)a1 = &off_24ED35D38;
  v2 = a1 + 456;
  re::DynamicArray<re::BlendSpaceSampleDefinition>::deinit(a1 + 584);
  re::DynamicArray<re::BlendSpaceAxisDefinition>::deinit(a1 + 544);
  re::DynamicArray<re::RigGraphConnection>::deinit((_QWORD *)(a1 + 496));
  re::DynamicArray<re::AnimationBlendTreeNodeDescription>::deinit(v2);
  re::DynamicArray<re::StringID>::deinit(a1 + 416);
  re::DynamicArray<re::StringID>::deinit(a1 + 376);
  v3 = *(_QWORD *)(a1 + 352);
  if (v3)
  {
    if (*(_QWORD *)(a1 + 360))
    {
      (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v3 + 40))(v3, *(_QWORD *)(a1 + 368));
      *(_QWORD *)(a1 + 360) = 0;
      *(_QWORD *)(a1 + 368) = 0;
    }
    *(_QWORD *)(a1 + 352) = 0;
  }
  v4 = *(_QWORD *)(a1 + 328);
  if (v4)
  {
    if (*(_QWORD *)(a1 + 336))
    {
      (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v4 + 40))(v4, *(_QWORD *)(a1 + 344));
      *(_QWORD *)(a1 + 336) = 0;
      *(_QWORD *)(a1 + 344) = 0;
    }
    *(_QWORD *)(a1 + 328) = 0;
  }
  v5 = *(_QWORD *)(a1 + 304);
  if (v5)
  {
    if (*(_QWORD *)(a1 + 312))
    {
      (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v5 + 40))(v5, *(_QWORD *)(a1 + 320));
      *(_QWORD *)(a1 + 312) = 0;
      *(_QWORD *)(a1 + 320) = 0;
    }
    *(_QWORD *)(a1 + 304) = 0;
  }
  v6 = *(_QWORD *)(a1 + 280);
  if (v6)
  {
    if (*(_QWORD *)(a1 + 288))
    {
      (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v6 + 40))(v6, *(_QWORD *)(a1 + 296));
      *(_QWORD *)(a1 + 288) = 0;
      *(_QWORD *)(a1 + 296) = 0;
    }
    *(_QWORD *)(a1 + 280) = 0;
  }
  re::DynamicArray<re::Pair<unsigned long,re::StringID,true>>::deinit(a1 + 240);
  re::DynamicArray<re::StringID>::deinit(a1 + 200);
  re::DynamicArray<re::RigGraphNodeChild>::deinit(a1 + 160);
  re::DynamicArray<re::RigGraphNodeInputParameter>::deinit(a1 + 120);
  re::DynamicArray<re::RigGraphNodeInputParameter>::deinit(a1 + 80);
  *(_QWORD *)a1 = off_24ED1F350;
  v7 = *(_QWORD *)(a1 + 40);
  if (v7)
  {
    if ((*(_BYTE *)(a1 + 48) & 1) != 0)
      (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v7 + 40))(v7, *(_QWORD *)(a1 + 56));
    *(_OWORD *)(a1 + 40) = 0u;
    *(_OWORD *)(a1 + 56) = 0u;
  }
  re::StringID::destroyString((re::StringID *)(a1 + 24));
  return a1;
}

uint64_t re::AnimationBlendTreeBuilder<re::Quaternion<float>>::buildRig(uint64_t a1, _QWORD *a2, _QWORD *a3, unint64_t a4, unint64_t *a5)
{
  char *v5;
  char *v6;
  uint64_t v8;
  uint64_t v11;
  uint64_t v12;
  const char **v13;
  const char *v14;
  unint64_t v15;
  _BOOL4 v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  char *v22;
  _QWORD *v23;
  _QWORD *v24;
  char *v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t *v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  _QWORD *v32;
  char *v33;
  const char *v34;
  uint64_t v35;
  char *v36;
  const char *v37;
  const char *v38;
  unint64_t v39;
  const StringID *v40;
  unint64_t v41;
  _BYTE *v42;
  const char *v43;
  const char *v44;
  _QWORD *v45;
  char *v46;
  const char *v47;
  const char *v48;
  const char *v49;
  const char *v50;
  re *v51;
  uint64_t result;
  NSObject *v53;
  char *v54;
  __int128 v55;
  uint64_t v56;
  uint64_t v57;
  char *v58;
  char *v59;
  unint64_t v60;
  unint64_t v61;
  _anonymous_namespace_ *v63;
  _QWORD *v64;
  _QWORD *v65;
  const char **v66;
  char *v67;
  unint64_t v68;
  char v69[24];
  __int128 v70;
  __int128 v71;
  char v72[24];
  __int128 v73;
  __int128 v74;
  char v75[24];
  __int128 v76;
  __int128 v77;
  char v78[24];
  __int128 v79;
  __int128 v80;
  char v81[24];
  __int128 v82;
  __int128 v83;
  char v84[24];
  __int128 v85;
  __int128 v86;
  uint64_t v87;
  char v88;
  _BYTE v89[7];
  const char *v90;
  uint64_t v91;
  char __str[4];
  const char *v93;
  __int16 v94;
  int v95;
  __int16 v96;
  char *v97;
  __int16 v98;
  _QWORD *v99;
  StringID v100;
  __int128 v101;
  __int128 v102;
  __int128 v103;
  __int128 v104;
  uint64_t v105;

  v5 = __str;
  v105 = *MEMORY[0x24BDAC8D0];
  v6 = (char *)a2[3];
  if ((unint64_t)v6 <= a4)
    goto LABEL_120;
  v8 = a2[50];
  v6 = *(char **)(v8 + 16);
  if ((unint64_t)v6 <= a4)
  {
LABEL_121:
    v87 = 0;
    *((_OWORD *)v5 + 6) = 0u;
    *((_OWORD *)v5 + 7) = 0u;
    *((_OWORD *)v5 + 4) = 0u;
    *((_OWORD *)v5 + 5) = 0u;
    *((_OWORD *)v5 + 3) = 0u;
    v61 = a4;
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    *(_DWORD *)__str = 136315906;
    *(_QWORD *)(v5 + 4) = "operator[]";
    v94 = 1024;
    *(_DWORD *)(v5 + 14) = 797;
    v96 = 2048;
    *(_QWORD *)(v5 + 20) = v61;
    v98 = 2048;
    *(_QWORD *)(v5 + 30) = v6;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  v11 = a2[5];
  v12 = *(_QWORD *)(v8 + 32);
  v13 = (const char **)(v12 + 88 * a4);
  v14 = v13[1];
  v15 = a4;
  v68 = v15;
  if (re::AnimationBlendTreeNodeDescription::isBlend((re::AnimationBlendTreeNodeDescription *)v13))
  {
    v16 = re::StringID::operator==((_QWORD *)(v12 + 88 * v15 + 16), re::AnimationBlendTreeNodeDescription::kBlendAdditive);
    v17 = 159940756;
    if (v16)
    {
      v17 = 0x3518CB532193D904;
      v18 = "MultiplyQuaternion";
    }
    else
    {
      v18 = "Slerp";
    }
    *(_QWORD *)&v100.var0 = v17;
    v100.var1 = v18;
    re::RigGraphDefinitionBuilder::addNode((re::RigGraphDefinitionBuilder *)(a2 + 39), (_anonymous_namespace_ *)v18, v13[1], (uint64_t)v84);
    if (!v84[0] && (_QWORD)v85)
    {
      if ((BYTE8(v85) & 1) != 0)
        (*(void (**)(void))(*(_QWORD *)v85 + 40))();
      v85 = 0u;
      v86 = 0u;
    }
    re::StringID::destroyString((re::StringID *)&v100);
  }
  else if (!re::StringID::operator==((_QWORD *)(v12 + 88 * v15 + 16), re::AnimationBlendTreeNodeDescription::kClip)
         && !re::StringID::operator==((_QWORD *)(v12 + 88 * v15 + 16), re::AnimationBlendTreeNodeDescription::kInput))
  {
    re::RigGraphDefinitionBuilder::addNode((re::RigGraphDefinitionBuilder *)(a2 + 39), *(_anonymous_namespace_ **)(v12 + 88 * v15 + 24), v13[1], (uint64_t)v81);
    if (!v81[0])
    {
      if ((_QWORD)v82)
      {
        if ((BYTE8(v82) & 1) != 0)
          (*(void (**)(void))(*(_QWORD *)v82 + 40))();
        v82 = 0u;
        v83 = 0u;
      }
    }
  }
  v19 = v11 + 80 * v15;
  v21 = *(_QWORD *)(v19 + 24);
  v20 = (_QWORD *)(v19 + 24);
  if (v21)
  {
    v22 = 0;
    v23 = (_QWORD *)(v11 + 80 * v15 + 40);
    v66 = (const char **)(a2 + 39);
    v63 = (_anonymous_namespace_ *)(a3 + 52);
    v64 = v23;
    v65 = v20;
    while (1)
    {
      re::AnimationBlendTreeBuilder<re::Quaternion<float>>::buildRig(v78, a2, a3, *(_QWORD *)(*v23 + 8 * (_QWORD)v22), a5);
      if (!v78[0] && (_QWORD)v79)
      {
        if ((BYTE8(v79) & 1) != 0)
          (*(void (**)(void))(*(_QWORD *)v79 + 40))();
        v79 = 0u;
        v80 = 0u;
      }
      v24 = (_QWORD *)*v20;
      if (*v20 <= (unint64_t)v22)
        break;
      v25 = *(char **)(*v23 + 8 * (_QWORD)v22);
      v15 = a2[3];
      if (v15 <= (unint64_t)v25)
        goto LABEL_111;
      v26 = a2[50];
      v15 = *(_QWORD *)(v26 + 16);
      if (v15 <= (unint64_t)v25)
        goto LABEL_112;
      v27 = v68;
      if (v15 <= v68)
        goto LABEL_113;
      v28 = a5;
      v29 = a2[5];
      v15 = *(_QWORD *)(v26 + 32);
      v30 = v15 + 88 * (_QWORD)v25;
      v31 = v29 + 80 * (_QWORD)v25;
      v33 = *(char **)(v31 + 72);
      v32 = (_QWORD *)(v31 + 72);
      v67 = v33;
      v34 = *(const char **)(v29 + 80 * (_QWORD)v25 + 56);
      if (re::AnimationBlendTreeNodeDescription::isBlend((re::AnimationBlendTreeNodeDescription *)(v15 + 88 * v68)))
      {
        if (v22)
        {
          v35 = a2[50];
          a5 = *(unint64_t **)(v35 + 16);
          v36 = (char *)v68;
          if ((unint64_t)a5 <= v68)
            goto LABEL_119;
          v34 = "input2";
          if (!re::StringID::operator==((_QWORD *)(*(_QWORD *)(v35 + 32) + 88 * v68 + 16), re::AnimationBlendTreeNodeDescription::kBlendAdditive))
          {
            snprintf(__str, 0x18uLL, "%f", *(float *)(v15 + 88 * (_QWORD)v25 + 80));
            if ((v88 & 1) != 0)
              v37 = v90;
            else
              v37 = v89;
            re::DynamicString::operator+((re::DynamicString *)&v87, "input3", (re::DynamicString *)&v100);
            if (((uint64_t)v100.var1 & 1) != 0)
              v38 = (const char *)v101;
            else
              v38 = (char *)&v100.var1 + 1;
            re::RigGraphDefinitionBuilder::promoteParameter(v66, v37, "input3", v38, __str, 1, (uint64_t)v75);
            if (!v75[0] && (_QWORD)v76)
            {
              if ((BYTE8(v76) & 1) != 0)
                (*(void (**)(void))(*(_QWORD *)v76 + 40))();
              v76 = 0u;
              v77 = 0u;
            }
            if (*(_QWORD *)&v100.var0 && ((uint64_t)v100.var1 & 1) != 0)
              (*(void (**)(void))(**(_QWORD **)&v100.var0 + 40))();
            v39 = v15 + 88 * (_QWORD)v25;
            v41 = *(_QWORD *)(v39 + 64);
            v40 = (const StringID *)(v39 + 64);
            if (v41 <= 1 && (v42 = *(_BYTE **)(v15 + 88 * (_QWORD)v25 + 72)) != 0 && !*v42)
              re::AnimationBlendTreeBuilder<float>::weightPathFromName((re::StringID *)&v100, *(_QWORD *)(v30 + 8));
            else
              re::StringID::StringID((re::StringID *)&v100, v40);
            re::DynamicArray<re::StringID>::add(v63, &v100);
            re::StringID::destroyString((re::StringID *)&v100);
            v34 = "input2";
          }
        }
        else
        {
          v34 = "input1";
        }
      }
      if (re::StringID::operator==((_QWORD *)(v15 + 88 * (_QWORD)v25 + 16), re::AnimationBlendTreeNodeDescription::kClip))
      {
        if ((v88 & 1) != 0)
          v43 = v90;
        else
          v43 = v89;
        re::DynamicString::operator+((re::DynamicString *)&v87, v34, (re::DynamicString *)&v100);
        if (((uint64_t)v100.var1 & 1) != 0)
          v44 = (const char *)v101;
        else
          v44 = (char *)&v100.var1 + 1;
        re::RigGraphDefinitionBuilder::promoteParameter(v66, v43, v34, v44, "", 1, (uint64_t)v72);
        a5 = v28;
        v23 = v64;
        v20 = v65;
        if (!v72[0] && (_QWORD)v73)
        {
          if ((BYTE8(v73) & 1) != 0)
            (*(void (**)(void))(*(_QWORD *)v73 + 40))();
          v73 = 0u;
          v74 = 0u;
        }
        if (*(_QWORD *)&v100.var0 && ((uint64_t)v100.var1 & 1) != 0)
          (*(void (**)(void))(**(_QWORD **)&v100.var0 + 40))();
        *(_QWORD *)&v100.var0 = 0;
        v100.var1 = "";
        re::DynamicArray<re::StringID>::add(v63, (uint64_t *)&v100);
        re::StringID::destroyString((re::StringID *)&v100);
        v45 = (_QWORD *)re::HashTable<re::StringID,re::StateParameterInt *,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::tryGet((uint64_t)(a2 + 51), (_QWORD *)(v15 + 88 * (_QWORD)v25 + 32));
        v46 = (char *)*a5;
        v15 = a3[45];
        if (v15 <= *a5)
        {
          v91 = 0;
          v103 = 0u;
          v104 = 0u;
          v101 = 0u;
          v102 = 0u;
          v100 = (StringID)0;
          os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
          *(_DWORD *)__str = 136315906;
          v93 = "operator[]";
          v94 = 1024;
          v95 = 468;
          v96 = 2048;
          v97 = v46;
          v98 = 2048;
          v99 = (_QWORD *)v15;
          _os_log_send_and_compose_impl();
          _os_crash_msg();
          __break(1u);
LABEL_119:
          v91 = 0;
          v6 = __str;
          v103 = 0u;
          v104 = 0u;
          v101 = 0u;
          v102 = 0u;
          v100 = (StringID)0;
          v5 = v36;
          os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
          *(_DWORD *)__str = 136315906;
          v93 = "operator[]";
          v94 = 1024;
          v95 = 797;
          v96 = 2048;
          v97 = v5;
          v98 = 2048;
          v99 = a5;
          _os_log_send_and_compose_impl();
          _os_crash_msg();
          __break(1u);
LABEL_120:
          v87 = 0;
          *((_OWORD *)v5 + 6) = 0u;
          *((_OWORD *)v5 + 7) = 0u;
          *((_OWORD *)v5 + 4) = 0u;
          *((_OWORD *)v5 + 5) = 0u;
          *((_OWORD *)v5 + 3) = 0u;
          v60 = a4;
          os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
          *(_DWORD *)__str = 136315906;
          *(_QWORD *)(v5 + 4) = "operator[]";
          v94 = 1024;
          *(_DWORD *)(v5 + 14) = 789;
          v96 = 2048;
          *(_QWORD *)(v5 + 20) = v60;
          v98 = 2048;
          *(_QWORD *)(v5 + 30) = v6;
          _os_log_send_and_compose_impl();
          _os_crash_msg();
          __break(1u);
          goto LABEL_121;
        }
        *(_QWORD *)(a3[46] + 8 * (_QWORD)v46) = *v45;
        ++*a5;
      }
      else if (re::StringID::operator==((_QWORD *)(v15 + 88 * (_QWORD)v25 + 16), re::AnimationBlendTreeNodeDescription::kInput))
      {
        if ((v88 & 1) != 0)
          v47 = v90;
        else
          v47 = v89;
        re::DynamicString::operator+((re::DynamicString *)&v87, v34, (re::DynamicString *)&v100);
        if (((uint64_t)v100.var1 & 1) != 0)
          v48 = (const char *)v101;
        else
          v48 = (char *)&v100.var1 + 1;
        re::RigGraphDefinitionBuilder::promoteParameter(v66, v47, v34, v48, *(const char **)(v15 + 88 * (_QWORD)v25 + 56), 1, (uint64_t)v69);
        a5 = v28;
        v23 = v64;
        v20 = v65;
        if (!v69[0] && (_QWORD)v70)
        {
          if ((BYTE8(v70) & 1) != 0)
            (*(void (**)(void))(*(_QWORD *)v70 + 40))();
          v70 = 0u;
          v71 = 0u;
        }
        if (*(_QWORD *)&v100.var0 && ((uint64_t)v100.var1 & 1) != 0)
          (*(void (**)(void))(**(_QWORD **)&v100.var0 + 40))();
        re::DynamicArray<re::StringID>::add(v63, (StringID *)(v15 + 88 * (_QWORD)v25 + 32));
      }
      else
      {
        if (re::AnimationBlendTreeNodeDescription::isBlend((re::AnimationBlendTreeNodeDescription *)(v15 + 88 * (_QWORD)v25))
          && *(v32 - 1) <= 1uLL)
        {
          v49 = v67;
          if (*v32 && !*(_BYTE *)*v32)
            v49 = "output";
        }
        else
        {
          v49 = v67;
        }
        if ((v88 & 1) != 0)
          v50 = v90;
        else
          v50 = v89;
        v51 = (re *)re::RigGraphDefinitionBuilder::addConnection((re::RigGraphDefinitionBuilder *)v66, *(const char **)(v30 + 8), v49, v50, v34, 0, 0, (uint64_t)&v100);
        if (!*(_BYTE *)&v100.var0)
        {
          v53 = *re::animationLogObjects(v51);
          v54 = __str;
          if (!os_log_type_enabled(v53, OS_LOG_TYPE_ERROR))
            goto LABEL_109;
          goto LABEL_114;
        }
        a5 = v28;
        v23 = v64;
        v20 = v65;
      }
      if (*v20 <= (unint64_t)++v22)
        goto LABEL_103;
    }
    v91 = 0;
    v103 = 0u;
    v104 = 0u;
    v101 = 0u;
    v102 = 0u;
    v100 = (StringID)0;
    v25 = (char *)MEMORY[0x24BDACB70];
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    *(_DWORD *)__str = 136315906;
    v93 = "operator[]";
    v94 = 1024;
    v95 = 797;
    v96 = 2048;
    v97 = v22;
    v98 = 2048;
    v99 = v24;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_111:
    v91 = 0;
    v103 = 0u;
    v104 = 0u;
    v101 = 0u;
    v102 = 0u;
    v100 = (StringID)0;
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    *(_DWORD *)__str = 136315906;
    v93 = "operator[]";
    v94 = 1024;
    v95 = 789;
    v96 = 2048;
    v97 = v25;
    v98 = 2048;
    v99 = (_QWORD *)v15;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_112:
    v91 = 0;
    v103 = 0u;
    v104 = 0u;
    v101 = 0u;
    v102 = 0u;
    v100 = (StringID)0;
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    *(_DWORD *)__str = 136315906;
    v93 = "operator[]";
    v94 = 1024;
    v95 = 797;
    v96 = 2048;
    v97 = v25;
    v98 = 2048;
    v99 = (_QWORD *)v15;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_113:
    v91 = 0;
    v53 = __str;
    v103 = 0u;
    v104 = 0u;
    v101 = 0u;
    v102 = 0u;
    v100 = (StringID)0;
    v54 = (char *)MEMORY[0x24BDACB70];
    v58 = (char *)v27;
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    *(_DWORD *)__str = 136315906;
    v93 = "operator[]";
    v94 = 1024;
    v95 = 797;
    v96 = 2048;
    v97 = v58;
    v98 = 2048;
    v99 = (_QWORD *)v15;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_114:
    if ((v102 & 1) != 0)
      v59 = (char *)*((_QWORD *)&v102 + 1);
    else
      v59 = (char *)&v102 + 1;
    *(_DWORD *)__str = 136315138;
    *(_QWORD *)(v54 + 4) = v59;
    _os_log_error_impl(&dword_224FE9000, v53, OS_LOG_TYPE_ERROR, "Add connection failed - %s", (uint8_t *)__str, 0xCu);
LABEL_109:
    v55 = *(_OWORD *)(v54 + 72);
    v56 = *((_QWORD *)&v102 + 1);
    v57 = v103;
    *(_BYTE *)a1 = 0;
    *(_OWORD *)(a1 + 8) = *(_OWORD *)(v54 + 56);
    *(_OWORD *)(a1 + 24) = v55;
    *(_QWORD *)(a1 + 40) = v56;
    *(_QWORD *)(a1 + 48) = v57;
  }
  else
  {
LABEL_103:
    *(_BYTE *)a1 = 1;
  }
  result = v87;
  if (v87)
  {
    if ((v88 & 1) != 0)
      return (*(uint64_t (**)(uint64_t, const char *))(*(_QWORD *)v87 + 40))(v87, v90);
  }
  return result;
}

void re::QuaternionFAnimationBlendTree::~QuaternionFAnimationBlendTree(re::QuaternionFAnimationBlendTree *this)
{
  re::AnimationBlendTree<re::Quaternion<float>>::~AnimationBlendTree((uint64_t)this);
  JUMPOUT(0x2276933B8);
}

uint64_t re::AnimationBlendTree<re::Quaternion<float>>::childCount(uint64_t a1)
{
  return *(_QWORD *)(a1 + 312);
}

uint64_t re::AnimationBlendTree<re::Quaternion<float>>::child(uint64_t a1, unint64_t a2)
{
  if (*(_QWORD *)(a1 + 312) <= a2)
  {
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  return *(_QWORD *)(*(_QWORD *)(a1 + 320) + 8 * a2);
}

double re::AnimationBlendTree<re::Quaternion<float>>::totalDuration(uint64_t a1)
{
  unint64_t v1;
  unint64_t v3;
  float v4;
  uint64_t v5;
  double v6;
  uint64_t v7;

  v1 = *(_QWORD *)(a1 + 312);
  if (v1)
  {
    v3 = 0;
    v4 = 0.0;
    do
    {
      v5 = *(_QWORD *)(*(_QWORD *)(a1 + 320) + 8 * v3);
      if (v5)
      {
        v6 = (*(double (**)(uint64_t))(*(_QWORD *)v5 + 40))(v5);
        v1 = *(_QWORD *)(a1 + 312);
        if (v6 > v4)
        {
          if (v1 <= v3)
          {
            os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
            _os_log_send_and_compose_impl();
            _os_crash_msg();
            __break(1u);
          }
          v7 = *(_QWORD *)(*(_QWORD *)(a1 + 320) + 8 * v3);
          v4 = (*(double (**)(uint64_t))(*(_QWORD *)v7 + 40))(v7);
          v1 = *(_QWORD *)(a1 + 312);
        }
      }
      ++v3;
    }
    while (v3 < v1);
  }
  else
  {
    return 0.0;
  }
  return v4;
}

void re::AnimationBlendTree<re::Quaternion<float>>::evaluateCore(uint64_t a1, uint64_t a2)
{
  re::internal::assertLog((re::internal *)4, a2, "assertion failure: '%s' (%s:line %i) Requires AnimationBlendTreeInstance", "!\"Unreachable code\"", "evaluateCore", 109);
  _os_crash();
  __break(1u);
}

void re::AnimationBlendTree<re::Quaternion<float>>::~AnimationBlendTree(uint64_t a1)
{
  re::AnimationBlendTree<re::Quaternion<float>>::~AnimationBlendTree(a1);
  JUMPOUT(0x2276933B8);
}

uint64_t re::AnimationBlendTree<re::Quaternion<float>>::~AnimationBlendTree(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  *(_QWORD *)a1 = &off_24ED35E78;
  v2 = a1 + 456;
  re::DynamicArray<re::BlendSpaceSampleDefinition>::deinit(a1 + 584);
  re::DynamicArray<re::BlendSpaceAxisDefinition>::deinit(a1 + 544);
  re::DynamicArray<re::RigGraphConnection>::deinit((_QWORD *)(a1 + 496));
  re::DynamicArray<re::AnimationBlendTreeNodeDescription>::deinit(v2);
  re::DynamicArray<re::StringID>::deinit(a1 + 416);
  re::DynamicArray<re::StringID>::deinit(a1 + 376);
  v3 = *(_QWORD *)(a1 + 352);
  if (v3)
  {
    if (*(_QWORD *)(a1 + 360))
    {
      (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v3 + 40))(v3, *(_QWORD *)(a1 + 368));
      *(_QWORD *)(a1 + 360) = 0;
      *(_QWORD *)(a1 + 368) = 0;
    }
    *(_QWORD *)(a1 + 352) = 0;
  }
  v4 = *(_QWORD *)(a1 + 328);
  if (v4)
  {
    if (*(_QWORD *)(a1 + 336))
    {
      (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v4 + 40))(v4, *(_QWORD *)(a1 + 344));
      *(_QWORD *)(a1 + 336) = 0;
      *(_QWORD *)(a1 + 344) = 0;
    }
    *(_QWORD *)(a1 + 328) = 0;
  }
  v5 = *(_QWORD *)(a1 + 304);
  if (v5)
  {
    if (*(_QWORD *)(a1 + 312))
    {
      (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v5 + 40))(v5, *(_QWORD *)(a1 + 320));
      *(_QWORD *)(a1 + 312) = 0;
      *(_QWORD *)(a1 + 320) = 0;
    }
    *(_QWORD *)(a1 + 304) = 0;
  }
  v6 = *(_QWORD *)(a1 + 280);
  if (v6)
  {
    if (*(_QWORD *)(a1 + 288))
    {
      (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v6 + 40))(v6, *(_QWORD *)(a1 + 296));
      *(_QWORD *)(a1 + 288) = 0;
      *(_QWORD *)(a1 + 296) = 0;
    }
    *(_QWORD *)(a1 + 280) = 0;
  }
  re::DynamicArray<re::Pair<unsigned long,re::StringID,true>>::deinit(a1 + 240);
  re::DynamicArray<re::StringID>::deinit(a1 + 200);
  re::DynamicArray<re::RigGraphNodeChild>::deinit(a1 + 160);
  re::DynamicArray<re::RigGraphNodeInputParameter>::deinit(a1 + 120);
  re::DynamicArray<re::RigGraphNodeInputParameter>::deinit(a1 + 80);
  *(_QWORD *)a1 = off_24ED1F350;
  v7 = *(_QWORD *)(a1 + 40);
  if (v7)
  {
    if ((*(_BYTE *)(a1 + 48) & 1) != 0)
      (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v7 + 40))(v7, *(_QWORD *)(a1 + 56));
    *(_OWORD *)(a1 + 40) = 0u;
    *(_OWORD *)(a1 + 56) = 0u;
  }
  re::StringID::destroyString((re::StringID *)(a1 + 24));
  return a1;
}

uint64_t re::AnimationBlendTreeBuilder<re::GenericSRT<float>>::buildRig(uint64_t a1, _QWORD *a2, _QWORD *a3, unint64_t a4, unint64_t *a5)
{
  char *v5;
  char *v6;
  uint64_t v8;
  uint64_t v11;
  uint64_t v12;
  const char **v13;
  const char *v14;
  unint64_t v15;
  _BOOL4 v16;
  unint64_t v17;
  char *v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  char *v22;
  _QWORD *v23;
  _QWORD *v24;
  char *v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t *v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  _QWORD *v32;
  char *v33;
  const char *v34;
  uint64_t v35;
  char *v36;
  const char *v37;
  const char *v38;
  unint64_t v39;
  const StringID *v40;
  unint64_t v41;
  _BYTE *v42;
  const char *v43;
  const char *v44;
  _QWORD *v45;
  char *v46;
  const char *v47;
  const char *v48;
  const char *v49;
  const char *v50;
  re *v51;
  uint64_t result;
  NSObject *v53;
  char *v54;
  __int128 v55;
  uint64_t v56;
  uint64_t v57;
  char *v58;
  char *v59;
  unint64_t v60;
  unint64_t v61;
  _anonymous_namespace_ *v63;
  _QWORD *v64;
  _QWORD *v65;
  const char **v66;
  char *v67;
  unint64_t v68;
  char v69[24];
  __int128 v70;
  __int128 v71;
  char v72[24];
  __int128 v73;
  __int128 v74;
  char v75[24];
  __int128 v76;
  __int128 v77;
  char v78[24];
  __int128 v79;
  __int128 v80;
  char v81[24];
  __int128 v82;
  __int128 v83;
  char v84[24];
  __int128 v85;
  __int128 v86;
  uint64_t v87;
  char v88;
  _BYTE v89[7];
  const char *v90;
  uint64_t v91;
  char __str[4];
  const char *v93;
  __int16 v94;
  int v95;
  __int16 v96;
  char *v97;
  __int16 v98;
  _QWORD *v99;
  StringID v100;
  __int128 v101;
  __int128 v102;
  __int128 v103;
  __int128 v104;
  uint64_t v105;

  v5 = __str;
  v105 = *MEMORY[0x24BDAC8D0];
  v6 = (char *)a2[3];
  if ((unint64_t)v6 <= a4)
    goto LABEL_120;
  v8 = a2[50];
  v6 = *(char **)(v8 + 16);
  if ((unint64_t)v6 <= a4)
  {
LABEL_121:
    v87 = 0;
    *((_OWORD *)v5 + 6) = 0u;
    *((_OWORD *)v5 + 7) = 0u;
    *((_OWORD *)v5 + 4) = 0u;
    *((_OWORD *)v5 + 5) = 0u;
    *((_OWORD *)v5 + 3) = 0u;
    v61 = a4;
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    *(_DWORD *)__str = 136315906;
    *(_QWORD *)(v5 + 4) = "operator[]";
    v94 = 1024;
    *(_DWORD *)(v5 + 14) = 797;
    v96 = 2048;
    *(_QWORD *)(v5 + 20) = v61;
    v98 = 2048;
    *(_QWORD *)(v5 + 30) = v6;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  v11 = a2[5];
  v12 = *(_QWORD *)(v8 + 32);
  v13 = (const char **)(v12 + 88 * a4);
  v14 = v13[1];
  v15 = a4;
  v68 = v15;
  if (re::AnimationBlendTreeNodeDescription::isBlend((re::AnimationBlendTreeNodeDescription *)v13))
  {
    v16 = re::StringID::operator==((_QWORD *)(v12 + 88 * v15 + 16), re::AnimationBlendTreeNodeDescription::kBlendAdditive);
    v17 = 0x20CE5B61BCLL;
    if (v16)
    {
      v17 = 0xE80C09D1C21497E0;
      v18 = "AdditiveBlendSRT";
    }
    else
    {
      v18 = "LerpSRT";
    }
    *(_QWORD *)&v100.var0 = v17;
    v100.var1 = v18;
    re::RigGraphDefinitionBuilder::addNode((re::RigGraphDefinitionBuilder *)(a2 + 39), (_anonymous_namespace_ *)v18, v13[1], (uint64_t)v84);
    if (!v84[0] && (_QWORD)v85)
    {
      if ((BYTE8(v85) & 1) != 0)
        (*(void (**)(void))(*(_QWORD *)v85 + 40))();
      v85 = 0u;
      v86 = 0u;
    }
    re::StringID::destroyString((re::StringID *)&v100);
  }
  else if (!re::StringID::operator==((_QWORD *)(v12 + 88 * v15 + 16), re::AnimationBlendTreeNodeDescription::kClip)
         && !re::StringID::operator==((_QWORD *)(v12 + 88 * v15 + 16), re::AnimationBlendTreeNodeDescription::kInput))
  {
    re::RigGraphDefinitionBuilder::addNode((re::RigGraphDefinitionBuilder *)(a2 + 39), *(_anonymous_namespace_ **)(v12 + 88 * v15 + 24), v13[1], (uint64_t)v81);
    if (!v81[0])
    {
      if ((_QWORD)v82)
      {
        if ((BYTE8(v82) & 1) != 0)
          (*(void (**)(void))(*(_QWORD *)v82 + 40))();
        v82 = 0u;
        v83 = 0u;
      }
    }
  }
  v19 = v11 + 80 * v15;
  v21 = *(_QWORD *)(v19 + 24);
  v20 = (_QWORD *)(v19 + 24);
  if (v21)
  {
    v22 = 0;
    v23 = (_QWORD *)(v11 + 80 * v15 + 40);
    v66 = (const char **)(a2 + 39);
    v63 = (_anonymous_namespace_ *)(a3 + 52);
    v64 = v23;
    v65 = v20;
    while (1)
    {
      re::AnimationBlendTreeBuilder<re::GenericSRT<float>>::buildRig(v78, a2, a3, *(_QWORD *)(*v23 + 8 * (_QWORD)v22), a5);
      if (!v78[0] && (_QWORD)v79)
      {
        if ((BYTE8(v79) & 1) != 0)
          (*(void (**)(void))(*(_QWORD *)v79 + 40))();
        v79 = 0u;
        v80 = 0u;
      }
      v24 = (_QWORD *)*v20;
      if (*v20 <= (unint64_t)v22)
        break;
      v25 = *(char **)(*v23 + 8 * (_QWORD)v22);
      v15 = a2[3];
      if (v15 <= (unint64_t)v25)
        goto LABEL_111;
      v26 = a2[50];
      v15 = *(_QWORD *)(v26 + 16);
      if (v15 <= (unint64_t)v25)
        goto LABEL_112;
      v27 = v68;
      if (v15 <= v68)
        goto LABEL_113;
      v28 = a5;
      v29 = a2[5];
      v15 = *(_QWORD *)(v26 + 32);
      v30 = v15 + 88 * (_QWORD)v25;
      v31 = v29 + 80 * (_QWORD)v25;
      v33 = *(char **)(v31 + 72);
      v32 = (_QWORD *)(v31 + 72);
      v67 = v33;
      v34 = *(const char **)(v29 + 80 * (_QWORD)v25 + 56);
      if (re::AnimationBlendTreeNodeDescription::isBlend((re::AnimationBlendTreeNodeDescription *)(v15 + 88 * v68)))
      {
        if (v22)
        {
          v35 = a2[50];
          a5 = *(unint64_t **)(v35 + 16);
          v36 = (char *)v68;
          if ((unint64_t)a5 <= v68)
            goto LABEL_119;
          v34 = "input2";
          if (!re::StringID::operator==((_QWORD *)(*(_QWORD *)(v35 + 32) + 88 * v68 + 16), re::AnimationBlendTreeNodeDescription::kBlendAdditive))
          {
            snprintf(__str, 0x18uLL, "%f", *(float *)(v15 + 88 * (_QWORD)v25 + 80));
            if ((v88 & 1) != 0)
              v37 = v90;
            else
              v37 = v89;
            re::DynamicString::operator+((re::DynamicString *)&v87, "input3", (re::DynamicString *)&v100);
            if (((uint64_t)v100.var1 & 1) != 0)
              v38 = (const char *)v101;
            else
              v38 = (char *)&v100.var1 + 1;
            re::RigGraphDefinitionBuilder::promoteParameter(v66, v37, "input3", v38, __str, 1, (uint64_t)v75);
            if (!v75[0] && (_QWORD)v76)
            {
              if ((BYTE8(v76) & 1) != 0)
                (*(void (**)(void))(*(_QWORD *)v76 + 40))();
              v76 = 0u;
              v77 = 0u;
            }
            if (*(_QWORD *)&v100.var0 && ((uint64_t)v100.var1 & 1) != 0)
              (*(void (**)(void))(**(_QWORD **)&v100.var0 + 40))();
            v39 = v15 + 88 * (_QWORD)v25;
            v41 = *(_QWORD *)(v39 + 64);
            v40 = (const StringID *)(v39 + 64);
            if (v41 <= 1 && (v42 = *(_BYTE **)(v15 + 88 * (_QWORD)v25 + 72)) != 0 && !*v42)
              re::AnimationBlendTreeBuilder<float>::weightPathFromName((re::StringID *)&v100, *(_QWORD *)(v30 + 8));
            else
              re::StringID::StringID((re::StringID *)&v100, v40);
            re::DynamicArray<re::StringID>::add(v63, &v100);
            re::StringID::destroyString((re::StringID *)&v100);
            v34 = "input2";
          }
        }
        else
        {
          v34 = "input1";
        }
      }
      if (re::StringID::operator==((_QWORD *)(v15 + 88 * (_QWORD)v25 + 16), re::AnimationBlendTreeNodeDescription::kClip))
      {
        if ((v88 & 1) != 0)
          v43 = v90;
        else
          v43 = v89;
        re::DynamicString::operator+((re::DynamicString *)&v87, v34, (re::DynamicString *)&v100);
        if (((uint64_t)v100.var1 & 1) != 0)
          v44 = (const char *)v101;
        else
          v44 = (char *)&v100.var1 + 1;
        re::RigGraphDefinitionBuilder::promoteParameter(v66, v43, v34, v44, "", 1, (uint64_t)v72);
        a5 = v28;
        v23 = v64;
        v20 = v65;
        if (!v72[0] && (_QWORD)v73)
        {
          if ((BYTE8(v73) & 1) != 0)
            (*(void (**)(void))(*(_QWORD *)v73 + 40))();
          v73 = 0u;
          v74 = 0u;
        }
        if (*(_QWORD *)&v100.var0 && ((uint64_t)v100.var1 & 1) != 0)
          (*(void (**)(void))(**(_QWORD **)&v100.var0 + 40))();
        *(_QWORD *)&v100.var0 = 0;
        v100.var1 = "";
        re::DynamicArray<re::StringID>::add(v63, (uint64_t *)&v100);
        re::StringID::destroyString((re::StringID *)&v100);
        v45 = (_QWORD *)re::HashTable<re::StringID,re::StateParameterInt *,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::tryGet((uint64_t)(a2 + 51), (_QWORD *)(v15 + 88 * (_QWORD)v25 + 32));
        v46 = (char *)*a5;
        v15 = a3[45];
        if (v15 <= *a5)
        {
          v91 = 0;
          v103 = 0u;
          v104 = 0u;
          v101 = 0u;
          v102 = 0u;
          v100 = (StringID)0;
          os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
          *(_DWORD *)__str = 136315906;
          v93 = "operator[]";
          v94 = 1024;
          v95 = 468;
          v96 = 2048;
          v97 = v46;
          v98 = 2048;
          v99 = (_QWORD *)v15;
          _os_log_send_and_compose_impl();
          _os_crash_msg();
          __break(1u);
LABEL_119:
          v91 = 0;
          v6 = __str;
          v103 = 0u;
          v104 = 0u;
          v101 = 0u;
          v102 = 0u;
          v100 = (StringID)0;
          v5 = v36;
          os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
          *(_DWORD *)__str = 136315906;
          v93 = "operator[]";
          v94 = 1024;
          v95 = 797;
          v96 = 2048;
          v97 = v5;
          v98 = 2048;
          v99 = a5;
          _os_log_send_and_compose_impl();
          _os_crash_msg();
          __break(1u);
LABEL_120:
          v87 = 0;
          *((_OWORD *)v5 + 6) = 0u;
          *((_OWORD *)v5 + 7) = 0u;
          *((_OWORD *)v5 + 4) = 0u;
          *((_OWORD *)v5 + 5) = 0u;
          *((_OWORD *)v5 + 3) = 0u;
          v60 = a4;
          os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
          *(_DWORD *)__str = 136315906;
          *(_QWORD *)(v5 + 4) = "operator[]";
          v94 = 1024;
          *(_DWORD *)(v5 + 14) = 789;
          v96 = 2048;
          *(_QWORD *)(v5 + 20) = v60;
          v98 = 2048;
          *(_QWORD *)(v5 + 30) = v6;
          _os_log_send_and_compose_impl();
          _os_crash_msg();
          __break(1u);
          goto LABEL_121;
        }
        *(_QWORD *)(a3[46] + 8 * (_QWORD)v46) = *v45;
        ++*a5;
      }
      else if (re::StringID::operator==((_QWORD *)(v15 + 88 * (_QWORD)v25 + 16), re::AnimationBlendTreeNodeDescription::kInput))
      {
        if ((v88 & 1) != 0)
          v47 = v90;
        else
          v47 = v89;
        re::DynamicString::operator+((re::DynamicString *)&v87, v34, (re::DynamicString *)&v100);
        if (((uint64_t)v100.var1 & 1) != 0)
          v48 = (const char *)v101;
        else
          v48 = (char *)&v100.var1 + 1;
        re::RigGraphDefinitionBuilder::promoteParameter(v66, v47, v34, v48, *(const char **)(v15 + 88 * (_QWORD)v25 + 56), 1, (uint64_t)v69);
        a5 = v28;
        v23 = v64;
        v20 = v65;
        if (!v69[0] && (_QWORD)v70)
        {
          if ((BYTE8(v70) & 1) != 0)
            (*(void (**)(void))(*(_QWORD *)v70 + 40))();
          v70 = 0u;
          v71 = 0u;
        }
        if (*(_QWORD *)&v100.var0 && ((uint64_t)v100.var1 & 1) != 0)
          (*(void (**)(void))(**(_QWORD **)&v100.var0 + 40))();
        re::DynamicArray<re::StringID>::add(v63, (StringID *)(v15 + 88 * (_QWORD)v25 + 32));
      }
      else
      {
        if (re::AnimationBlendTreeNodeDescription::isBlend((re::AnimationBlendTreeNodeDescription *)(v15 + 88 * (_QWORD)v25))
          && *(v32 - 1) <= 1uLL)
        {
          v49 = v67;
          if (*v32 && !*(_BYTE *)*v32)
            v49 = "output";
        }
        else
        {
          v49 = v67;
        }
        if ((v88 & 1) != 0)
          v50 = v90;
        else
          v50 = v89;
        v51 = (re *)re::RigGraphDefinitionBuilder::addConnection((re::RigGraphDefinitionBuilder *)v66, *(const char **)(v30 + 8), v49, v50, v34, 0, 0, (uint64_t)&v100);
        if (!*(_BYTE *)&v100.var0)
        {
          v53 = *re::animationLogObjects(v51);
          v54 = __str;
          if (!os_log_type_enabled(v53, OS_LOG_TYPE_ERROR))
            goto LABEL_109;
          goto LABEL_114;
        }
        a5 = v28;
        v23 = v64;
        v20 = v65;
      }
      if (*v20 <= (unint64_t)++v22)
        goto LABEL_103;
    }
    v91 = 0;
    v103 = 0u;
    v104 = 0u;
    v101 = 0u;
    v102 = 0u;
    v100 = (StringID)0;
    v25 = (char *)MEMORY[0x24BDACB70];
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    *(_DWORD *)__str = 136315906;
    v93 = "operator[]";
    v94 = 1024;
    v95 = 797;
    v96 = 2048;
    v97 = v22;
    v98 = 2048;
    v99 = v24;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_111:
    v91 = 0;
    v103 = 0u;
    v104 = 0u;
    v101 = 0u;
    v102 = 0u;
    v100 = (StringID)0;
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    *(_DWORD *)__str = 136315906;
    v93 = "operator[]";
    v94 = 1024;
    v95 = 789;
    v96 = 2048;
    v97 = v25;
    v98 = 2048;
    v99 = (_QWORD *)v15;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_112:
    v91 = 0;
    v103 = 0u;
    v104 = 0u;
    v101 = 0u;
    v102 = 0u;
    v100 = (StringID)0;
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    *(_DWORD *)__str = 136315906;
    v93 = "operator[]";
    v94 = 1024;
    v95 = 797;
    v96 = 2048;
    v97 = v25;
    v98 = 2048;
    v99 = (_QWORD *)v15;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_113:
    v91 = 0;
    v53 = __str;
    v103 = 0u;
    v104 = 0u;
    v101 = 0u;
    v102 = 0u;
    v100 = (StringID)0;
    v54 = (char *)MEMORY[0x24BDACB70];
    v58 = (char *)v27;
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    *(_DWORD *)__str = 136315906;
    v93 = "operator[]";
    v94 = 1024;
    v95 = 797;
    v96 = 2048;
    v97 = v58;
    v98 = 2048;
    v99 = (_QWORD *)v15;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_114:
    if ((v102 & 1) != 0)
      v59 = (char *)*((_QWORD *)&v102 + 1);
    else
      v59 = (char *)&v102 + 1;
    *(_DWORD *)__str = 136315138;
    *(_QWORD *)(v54 + 4) = v59;
    _os_log_error_impl(&dword_224FE9000, v53, OS_LOG_TYPE_ERROR, "Add connection failed - %s", (uint8_t *)__str, 0xCu);
LABEL_109:
    v55 = *(_OWORD *)(v54 + 72);
    v56 = *((_QWORD *)&v102 + 1);
    v57 = v103;
    *(_BYTE *)a1 = 0;
    *(_OWORD *)(a1 + 8) = *(_OWORD *)(v54 + 56);
    *(_OWORD *)(a1 + 24) = v55;
    *(_QWORD *)(a1 + 40) = v56;
    *(_QWORD *)(a1 + 48) = v57;
  }
  else
  {
LABEL_103:
    *(_BYTE *)a1 = 1;
  }
  result = v87;
  if (v87)
  {
    if ((v88 & 1) != 0)
      return (*(uint64_t (**)(uint64_t, const char *))(*(_QWORD *)v87 + 40))(v87, v90);
  }
  return result;
}

void re::SRTAnimationBlendTree::~SRTAnimationBlendTree(re::SRTAnimationBlendTree *this)
{
  re::AnimationBlendTree<re::GenericSRT<float>>::~AnimationBlendTree((uint64_t)this);
  JUMPOUT(0x2276933B8);
}

uint64_t re::AnimationBlendTree<re::GenericSRT<float>>::childCount(uint64_t a1)
{
  return *(_QWORD *)(a1 + 312);
}

uint64_t re::AnimationBlendTree<re::GenericSRT<float>>::child(uint64_t a1, unint64_t a2)
{
  if (*(_QWORD *)(a1 + 312) <= a2)
  {
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  return *(_QWORD *)(*(_QWORD *)(a1 + 320) + 8 * a2);
}

double re::AnimationBlendTree<re::GenericSRT<float>>::totalDuration(uint64_t a1)
{
  unint64_t v1;
  unint64_t v3;
  float v4;
  uint64_t v5;
  double v6;
  uint64_t v7;

  v1 = *(_QWORD *)(a1 + 312);
  if (v1)
  {
    v3 = 0;
    v4 = 0.0;
    do
    {
      v5 = *(_QWORD *)(*(_QWORD *)(a1 + 320) + 8 * v3);
      if (v5)
      {
        v6 = (*(double (**)(uint64_t))(*(_QWORD *)v5 + 40))(v5);
        v1 = *(_QWORD *)(a1 + 312);
        if (v6 > v4)
        {
          if (v1 <= v3)
          {
            os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
            _os_log_send_and_compose_impl();
            _os_crash_msg();
            __break(1u);
          }
          v7 = *(_QWORD *)(*(_QWORD *)(a1 + 320) + 8 * v3);
          v4 = (*(double (**)(uint64_t))(*(_QWORD *)v7 + 40))(v7);
          v1 = *(_QWORD *)(a1 + 312);
        }
      }
      ++v3;
    }
    while (v3 < v1);
  }
  else
  {
    return 0.0;
  }
  return v4;
}

void re::AnimationBlendTree<re::GenericSRT<float>>::evaluateCore(uint64_t a1, uint64_t a2)
{
  re::internal::assertLog((re::internal *)4, a2, "assertion failure: '%s' (%s:line %i) Requires AnimationBlendTreeInstance", "!\"Unreachable code\"", "evaluateCore", 109);
  _os_crash();
  __break(1u);
}

void re::AnimationBlendTree<re::GenericSRT<float>>::~AnimationBlendTree(uint64_t a1)
{
  re::AnimationBlendTree<re::GenericSRT<float>>::~AnimationBlendTree(a1);
  JUMPOUT(0x2276933B8);
}

uint64_t re::AnimationBlendTree<re::GenericSRT<float>>::~AnimationBlendTree(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  *(_QWORD *)a1 = &off_24ED35FB8;
  v2 = a1 + 456;
  re::DynamicArray<re::BlendSpaceSampleDefinition>::deinit(a1 + 584);
  re::DynamicArray<re::BlendSpaceAxisDefinition>::deinit(a1 + 544);
  re::DynamicArray<re::RigGraphConnection>::deinit((_QWORD *)(a1 + 496));
  re::DynamicArray<re::AnimationBlendTreeNodeDescription>::deinit(v2);
  re::DynamicArray<re::StringID>::deinit(a1 + 416);
  re::DynamicArray<re::StringID>::deinit(a1 + 376);
  v3 = *(_QWORD *)(a1 + 352);
  if (v3)
  {
    if (*(_QWORD *)(a1 + 360))
    {
      (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v3 + 40))(v3, *(_QWORD *)(a1 + 368));
      *(_QWORD *)(a1 + 360) = 0;
      *(_QWORD *)(a1 + 368) = 0;
    }
    *(_QWORD *)(a1 + 352) = 0;
  }
  v4 = *(_QWORD *)(a1 + 328);
  if (v4)
  {
    if (*(_QWORD *)(a1 + 336))
    {
      (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v4 + 40))(v4, *(_QWORD *)(a1 + 344));
      *(_QWORD *)(a1 + 336) = 0;
      *(_QWORD *)(a1 + 344) = 0;
    }
    *(_QWORD *)(a1 + 328) = 0;
  }
  v5 = *(_QWORD *)(a1 + 304);
  if (v5)
  {
    if (*(_QWORD *)(a1 + 312))
    {
      (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v5 + 40))(v5, *(_QWORD *)(a1 + 320));
      *(_QWORD *)(a1 + 312) = 0;
      *(_QWORD *)(a1 + 320) = 0;
    }
    *(_QWORD *)(a1 + 304) = 0;
  }
  v6 = *(_QWORD *)(a1 + 280);
  if (v6)
  {
    if (*(_QWORD *)(a1 + 288))
    {
      (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v6 + 40))(v6, *(_QWORD *)(a1 + 296));
      *(_QWORD *)(a1 + 288) = 0;
      *(_QWORD *)(a1 + 296) = 0;
    }
    *(_QWORD *)(a1 + 280) = 0;
  }
  re::DynamicArray<re::Pair<unsigned long,re::StringID,true>>::deinit(a1 + 240);
  re::DynamicArray<re::StringID>::deinit(a1 + 200);
  re::DynamicArray<re::RigGraphNodeChild>::deinit(a1 + 160);
  re::DynamicArray<re::RigGraphNodeInputParameter>::deinit(a1 + 120);
  re::DynamicArray<re::RigGraphNodeInputParameter>::deinit(a1 + 80);
  *(_QWORD *)a1 = off_24ED1F350;
  v7 = *(_QWORD *)(a1 + 40);
  if (v7)
  {
    if ((*(_BYTE *)(a1 + 48) & 1) != 0)
      (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v7 + 40))(v7, *(_QWORD *)(a1 + 56));
    *(_OWORD *)(a1 + 40) = 0u;
    *(_OWORD *)(a1 + 56) = 0u;
  }
  re::StringID::destroyString((re::StringID *)(a1 + 24));
  return a1;
}

uint64_t re::AnimationBlendTreeBuilder<re::SkeletalPose>::buildRig(uint64_t a1, _QWORD *a2, _QWORD *a3, unint64_t a4, unint64_t *a5)
{
  char *v5;
  char *v6;
  uint64_t v8;
  uint64_t v11;
  uint64_t v12;
  const char **v13;
  const char *v14;
  unint64_t v15;
  _BOOL4 v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  char *v22;
  _QWORD *v23;
  _QWORD *v24;
  char *v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t *v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  _QWORD *v32;
  char *v33;
  const char *v34;
  uint64_t v35;
  char *v36;
  const char *v37;
  const char *v38;
  unint64_t v39;
  const StringID *v40;
  unint64_t v41;
  _BYTE *v42;
  const char *v43;
  const char *v44;
  _QWORD *v45;
  char *v46;
  const char *v47;
  const char *v48;
  const char *v49;
  const char *v50;
  re *v51;
  uint64_t result;
  NSObject *v53;
  char *v54;
  __int128 v55;
  uint64_t v56;
  uint64_t v57;
  char *v58;
  char *v59;
  unint64_t v60;
  unint64_t v61;
  _anonymous_namespace_ *v63;
  _QWORD *v64;
  _QWORD *v65;
  const char **v66;
  char *v67;
  unint64_t v68;
  char v69[24];
  __int128 v70;
  __int128 v71;
  char v72[24];
  __int128 v73;
  __int128 v74;
  char v75[24];
  __int128 v76;
  __int128 v77;
  char v78[24];
  __int128 v79;
  __int128 v80;
  char v81[24];
  __int128 v82;
  __int128 v83;
  char v84[24];
  __int128 v85;
  __int128 v86;
  uint64_t v87;
  char v88;
  _BYTE v89[7];
  const char *v90;
  uint64_t v91;
  char __str[4];
  const char *v93;
  __int16 v94;
  int v95;
  __int16 v96;
  char *v97;
  __int16 v98;
  _QWORD *v99;
  StringID v100;
  __int128 v101;
  __int128 v102;
  __int128 v103;
  __int128 v104;
  uint64_t v105;

  v5 = __str;
  v105 = *MEMORY[0x24BDAC8D0];
  v6 = (char *)a2[3];
  if ((unint64_t)v6 <= a4)
    goto LABEL_120;
  v8 = a2[50];
  v6 = *(char **)(v8 + 16);
  if ((unint64_t)v6 <= a4)
  {
LABEL_121:
    v87 = 0;
    *((_OWORD *)v5 + 6) = 0u;
    *((_OWORD *)v5 + 7) = 0u;
    *((_OWORD *)v5 + 4) = 0u;
    *((_OWORD *)v5 + 5) = 0u;
    *((_OWORD *)v5 + 3) = 0u;
    v61 = a4;
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    *(_DWORD *)__str = 136315906;
    *(_QWORD *)(v5 + 4) = "operator[]";
    v94 = 1024;
    *(_DWORD *)(v5 + 14) = 797;
    v96 = 2048;
    *(_QWORD *)(v5 + 20) = v61;
    v98 = 2048;
    *(_QWORD *)(v5 + 30) = v6;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  v11 = a2[5];
  v12 = *(_QWORD *)(v8 + 32);
  v13 = (const char **)(v12 + 88 * a4);
  v14 = v13[1];
  v15 = a4;
  v68 = v15;
  if (re::AnimationBlendTreeNodeDescription::isBlend((re::AnimationBlendTreeNodeDescription *)v13))
  {
    v16 = re::StringID::operator==((_QWORD *)(v12 + 88 * v15 + 16), re::AnimationBlendTreeNodeDescription::kBlendAdditive);
    v17 = 0x37782BFAD24CDBACLL;
    if (v16)
    {
      v17 = 0x1AD1CC0AEFF59584;
      v18 = "BlendAdditiveRigHierarchy";
    }
    else
    {
      v18 = "BlendRigHierarchy";
    }
    *(_QWORD *)&v100.var0 = v17;
    v100.var1 = v18;
    re::RigGraphDefinitionBuilder::addNode((re::RigGraphDefinitionBuilder *)(a2 + 39), (_anonymous_namespace_ *)v18, v13[1], (uint64_t)v84);
    if (!v84[0] && (_QWORD)v85)
    {
      if ((BYTE8(v85) & 1) != 0)
        (*(void (**)(void))(*(_QWORD *)v85 + 40))();
      v85 = 0u;
      v86 = 0u;
    }
    re::StringID::destroyString((re::StringID *)&v100);
  }
  else if (!re::StringID::operator==((_QWORD *)(v12 + 88 * v15 + 16), re::AnimationBlendTreeNodeDescription::kClip)
         && !re::StringID::operator==((_QWORD *)(v12 + 88 * v15 + 16), re::AnimationBlendTreeNodeDescription::kInput))
  {
    re::RigGraphDefinitionBuilder::addNode((re::RigGraphDefinitionBuilder *)(a2 + 39), *(_anonymous_namespace_ **)(v12 + 88 * v15 + 24), v13[1], (uint64_t)v81);
    if (!v81[0])
    {
      if ((_QWORD)v82)
      {
        if ((BYTE8(v82) & 1) != 0)
          (*(void (**)(void))(*(_QWORD *)v82 + 40))();
        v82 = 0u;
        v83 = 0u;
      }
    }
  }
  v19 = v11 + 80 * v15;
  v21 = *(_QWORD *)(v19 + 24);
  v20 = (_QWORD *)(v19 + 24);
  if (v21)
  {
    v22 = 0;
    v23 = (_QWORD *)(v11 + 80 * v15 + 40);
    v66 = (const char **)(a2 + 39);
    v63 = (_anonymous_namespace_ *)(a3 + 52);
    v64 = v23;
    v65 = v20;
    while (1)
    {
      re::AnimationBlendTreeBuilder<re::SkeletalPose>::buildRig(v78, a2, a3, *(_QWORD *)(*v23 + 8 * (_QWORD)v22), a5);
      if (!v78[0] && (_QWORD)v79)
      {
        if ((BYTE8(v79) & 1) != 0)
          (*(void (**)(void))(*(_QWORD *)v79 + 40))();
        v79 = 0u;
        v80 = 0u;
      }
      v24 = (_QWORD *)*v20;
      if (*v20 <= (unint64_t)v22)
        break;
      v25 = *(char **)(*v23 + 8 * (_QWORD)v22);
      v15 = a2[3];
      if (v15 <= (unint64_t)v25)
        goto LABEL_111;
      v26 = a2[50];
      v15 = *(_QWORD *)(v26 + 16);
      if (v15 <= (unint64_t)v25)
        goto LABEL_112;
      v27 = v68;
      if (v15 <= v68)
        goto LABEL_113;
      v28 = a5;
      v29 = a2[5];
      v15 = *(_QWORD *)(v26 + 32);
      v30 = v15 + 88 * (_QWORD)v25;
      v31 = v29 + 80 * (_QWORD)v25;
      v33 = *(char **)(v31 + 72);
      v32 = (_QWORD *)(v31 + 72);
      v67 = v33;
      v34 = *(const char **)(v29 + 80 * (_QWORD)v25 + 56);
      if (re::AnimationBlendTreeNodeDescription::isBlend((re::AnimationBlendTreeNodeDescription *)(v15 + 88 * v68)))
      {
        if (v22)
        {
          v35 = a2[50];
          a5 = *(unint64_t **)(v35 + 16);
          v36 = (char *)v68;
          if ((unint64_t)a5 <= v68)
            goto LABEL_119;
          v34 = "input2";
          if (!re::StringID::operator==((_QWORD *)(*(_QWORD *)(v35 + 32) + 88 * v68 + 16), re::AnimationBlendTreeNodeDescription::kBlendAdditive))
          {
            snprintf(__str, 0x18uLL, "%f", *(float *)(v15 + 88 * (_QWORD)v25 + 80));
            if ((v88 & 1) != 0)
              v37 = v90;
            else
              v37 = v89;
            re::DynamicString::operator+((re::DynamicString *)&v87, "input3", (re::DynamicString *)&v100);
            if (((uint64_t)v100.var1 & 1) != 0)
              v38 = (const char *)v101;
            else
              v38 = (char *)&v100.var1 + 1;
            re::RigGraphDefinitionBuilder::promoteParameter(v66, v37, "input3", v38, __str, 1, (uint64_t)v75);
            if (!v75[0] && (_QWORD)v76)
            {
              if ((BYTE8(v76) & 1) != 0)
                (*(void (**)(void))(*(_QWORD *)v76 + 40))();
              v76 = 0u;
              v77 = 0u;
            }
            if (*(_QWORD *)&v100.var0 && ((uint64_t)v100.var1 & 1) != 0)
              (*(void (**)(void))(**(_QWORD **)&v100.var0 + 40))();
            v39 = v15 + 88 * (_QWORD)v25;
            v41 = *(_QWORD *)(v39 + 64);
            v40 = (const StringID *)(v39 + 64);
            if (v41 <= 1 && (v42 = *(_BYTE **)(v15 + 88 * (_QWORD)v25 + 72)) != 0 && !*v42)
              re::AnimationBlendTreeBuilder<float>::weightPathFromName((re::StringID *)&v100, *(_QWORD *)(v30 + 8));
            else
              re::StringID::StringID((re::StringID *)&v100, v40);
            re::DynamicArray<re::StringID>::add(v63, &v100);
            re::StringID::destroyString((re::StringID *)&v100);
            v34 = "input2";
          }
        }
        else
        {
          v34 = "input1";
        }
      }
      if (re::StringID::operator==((_QWORD *)(v15 + 88 * (_QWORD)v25 + 16), re::AnimationBlendTreeNodeDescription::kClip))
      {
        if ((v88 & 1) != 0)
          v43 = v90;
        else
          v43 = v89;
        re::DynamicString::operator+((re::DynamicString *)&v87, v34, (re::DynamicString *)&v100);
        if (((uint64_t)v100.var1 & 1) != 0)
          v44 = (const char *)v101;
        else
          v44 = (char *)&v100.var1 + 1;
        re::RigGraphDefinitionBuilder::promoteParameter(v66, v43, v34, v44, "", 1, (uint64_t)v72);
        a5 = v28;
        v23 = v64;
        v20 = v65;
        if (!v72[0] && (_QWORD)v73)
        {
          if ((BYTE8(v73) & 1) != 0)
            (*(void (**)(void))(*(_QWORD *)v73 + 40))();
          v73 = 0u;
          v74 = 0u;
        }
        if (*(_QWORD *)&v100.var0 && ((uint64_t)v100.var1 & 1) != 0)
          (*(void (**)(void))(**(_QWORD **)&v100.var0 + 40))();
        *(_QWORD *)&v100.var0 = 0;
        v100.var1 = "";
        re::DynamicArray<re::StringID>::add(v63, (uint64_t *)&v100);
        re::StringID::destroyString((re::StringID *)&v100);
        v45 = (_QWORD *)re::HashTable<re::StringID,re::StateParameterInt *,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::tryGet((uint64_t)(a2 + 51), (_QWORD *)(v15 + 88 * (_QWORD)v25 + 32));
        v46 = (char *)*a5;
        v15 = a3[45];
        if (v15 <= *a5)
        {
          v91 = 0;
          v103 = 0u;
          v104 = 0u;
          v101 = 0u;
          v102 = 0u;
          v100 = (StringID)0;
          os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
          *(_DWORD *)__str = 136315906;
          v93 = "operator[]";
          v94 = 1024;
          v95 = 468;
          v96 = 2048;
          v97 = v46;
          v98 = 2048;
          v99 = (_QWORD *)v15;
          _os_log_send_and_compose_impl();
          _os_crash_msg();
          __break(1u);
LABEL_119:
          v91 = 0;
          v6 = __str;
          v103 = 0u;
          v104 = 0u;
          v101 = 0u;
          v102 = 0u;
          v100 = (StringID)0;
          v5 = v36;
          os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
          *(_DWORD *)__str = 136315906;
          v93 = "operator[]";
          v94 = 1024;
          v95 = 797;
          v96 = 2048;
          v97 = v5;
          v98 = 2048;
          v99 = a5;
          _os_log_send_and_compose_impl();
          _os_crash_msg();
          __break(1u);
LABEL_120:
          v87 = 0;
          *((_OWORD *)v5 + 6) = 0u;
          *((_OWORD *)v5 + 7) = 0u;
          *((_OWORD *)v5 + 4) = 0u;
          *((_OWORD *)v5 + 5) = 0u;
          *((_OWORD *)v5 + 3) = 0u;
          v60 = a4;
          os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
          *(_DWORD *)__str = 136315906;
          *(_QWORD *)(v5 + 4) = "operator[]";
          v94 = 1024;
          *(_DWORD *)(v5 + 14) = 789;
          v96 = 2048;
          *(_QWORD *)(v5 + 20) = v60;
          v98 = 2048;
          *(_QWORD *)(v5 + 30) = v6;
          _os_log_send_and_compose_impl();
          _os_crash_msg();
          __break(1u);
          goto LABEL_121;
        }
        *(_QWORD *)(a3[46] + 8 * (_QWORD)v46) = *v45;
        ++*a5;
      }
      else if (re::StringID::operator==((_QWORD *)(v15 + 88 * (_QWORD)v25 + 16), re::AnimationBlendTreeNodeDescription::kInput))
      {
        if ((v88 & 1) != 0)
          v47 = v90;
        else
          v47 = v89;
        re::DynamicString::operator+((re::DynamicString *)&v87, v34, (re::DynamicString *)&v100);
        if (((uint64_t)v100.var1 & 1) != 0)
          v48 = (const char *)v101;
        else
          v48 = (char *)&v100.var1 + 1;
        re::RigGraphDefinitionBuilder::promoteParameter(v66, v47, v34, v48, *(const char **)(v15 + 88 * (_QWORD)v25 + 56), 1, (uint64_t)v69);
        a5 = v28;
        v23 = v64;
        v20 = v65;
        if (!v69[0] && (_QWORD)v70)
        {
          if ((BYTE8(v70) & 1) != 0)
            (*(void (**)(void))(*(_QWORD *)v70 + 40))();
          v70 = 0u;
          v71 = 0u;
        }
        if (*(_QWORD *)&v100.var0 && ((uint64_t)v100.var1 & 1) != 0)
          (*(void (**)(void))(**(_QWORD **)&v100.var0 + 40))();
        re::DynamicArray<re::StringID>::add(v63, (StringID *)(v15 + 88 * (_QWORD)v25 + 32));
      }
      else
      {
        if (re::AnimationBlendTreeNodeDescription::isBlend((re::AnimationBlendTreeNodeDescription *)(v15 + 88 * (_QWORD)v25))
          && *(v32 - 1) <= 1uLL)
        {
          v49 = v67;
          if (*v32 && !*(_BYTE *)*v32)
            v49 = "output";
        }
        else
        {
          v49 = v67;
        }
        if ((v88 & 1) != 0)
          v50 = v90;
        else
          v50 = v89;
        v51 = (re *)re::RigGraphDefinitionBuilder::addConnection((re::RigGraphDefinitionBuilder *)v66, *(const char **)(v30 + 8), v49, v50, v34, 0, 0, (uint64_t)&v100);
        if (!*(_BYTE *)&v100.var0)
        {
          v53 = *re::animationLogObjects(v51);
          v54 = __str;
          if (!os_log_type_enabled(v53, OS_LOG_TYPE_ERROR))
            goto LABEL_109;
          goto LABEL_114;
        }
        a5 = v28;
        v23 = v64;
        v20 = v65;
      }
      if (*v20 <= (unint64_t)++v22)
        goto LABEL_103;
    }
    v91 = 0;
    v103 = 0u;
    v104 = 0u;
    v101 = 0u;
    v102 = 0u;
    v100 = (StringID)0;
    v25 = (char *)MEMORY[0x24BDACB70];
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    *(_DWORD *)__str = 136315906;
    v93 = "operator[]";
    v94 = 1024;
    v95 = 797;
    v96 = 2048;
    v97 = v22;
    v98 = 2048;
    v99 = v24;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_111:
    v91 = 0;
    v103 = 0u;
    v104 = 0u;
    v101 = 0u;
    v102 = 0u;
    v100 = (StringID)0;
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    *(_DWORD *)__str = 136315906;
    v93 = "operator[]";
    v94 = 1024;
    v95 = 789;
    v96 = 2048;
    v97 = v25;
    v98 = 2048;
    v99 = (_QWORD *)v15;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_112:
    v91 = 0;
    v103 = 0u;
    v104 = 0u;
    v101 = 0u;
    v102 = 0u;
    v100 = (StringID)0;
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    *(_DWORD *)__str = 136315906;
    v93 = "operator[]";
    v94 = 1024;
    v95 = 797;
    v96 = 2048;
    v97 = v25;
    v98 = 2048;
    v99 = (_QWORD *)v15;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_113:
    v91 = 0;
    v53 = __str;
    v103 = 0u;
    v104 = 0u;
    v101 = 0u;
    v102 = 0u;
    v100 = (StringID)0;
    v54 = (char *)MEMORY[0x24BDACB70];
    v58 = (char *)v27;
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    *(_DWORD *)__str = 136315906;
    v93 = "operator[]";
    v94 = 1024;
    v95 = 797;
    v96 = 2048;
    v97 = v58;
    v98 = 2048;
    v99 = (_QWORD *)v15;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_114:
    if ((v102 & 1) != 0)
      v59 = (char *)*((_QWORD *)&v102 + 1);
    else
      v59 = (char *)&v102 + 1;
    *(_DWORD *)__str = 136315138;
    *(_QWORD *)(v54 + 4) = v59;
    _os_log_error_impl(&dword_224FE9000, v53, OS_LOG_TYPE_ERROR, "Add connection failed - %s", (uint8_t *)__str, 0xCu);
LABEL_109:
    v55 = *(_OWORD *)(v54 + 72);
    v56 = *((_QWORD *)&v102 + 1);
    v57 = v103;
    *(_BYTE *)a1 = 0;
    *(_OWORD *)(a1 + 8) = *(_OWORD *)(v54 + 56);
    *(_OWORD *)(a1 + 24) = v55;
    *(_QWORD *)(a1 + 40) = v56;
    *(_QWORD *)(a1 + 48) = v57;
  }
  else
  {
LABEL_103:
    *(_BYTE *)a1 = 1;
  }
  result = v87;
  if (v87)
  {
    if ((v88 & 1) != 0)
      return (*(uint64_t (**)(uint64_t, const char *))(*(_QWORD *)v87 + 40))(v87, v90);
  }
  return result;
}

void re::SkeletalPoseAnimationBlendTree::~SkeletalPoseAnimationBlendTree(re::SkeletalPoseAnimationBlendTree *this)
{
  re::AnimationBlendTree<re::SkeletalPose>::~AnimationBlendTree((uint64_t)this);
  JUMPOUT(0x2276933B8);
}

uint64_t re::AnimationBlendTree<re::SkeletalPose>::childCount(uint64_t a1)
{
  return *(_QWORD *)(a1 + 312);
}

uint64_t re::AnimationBlendTree<re::SkeletalPose>::child(uint64_t a1, unint64_t a2)
{
  if (*(_QWORD *)(a1 + 312) <= a2)
  {
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  return *(_QWORD *)(*(_QWORD *)(a1 + 320) + 8 * a2);
}

double re::AnimationBlendTree<re::SkeletalPose>::totalDuration(uint64_t a1)
{
  unint64_t v1;
  unint64_t v3;
  float v4;
  uint64_t v5;
  double v6;
  uint64_t v7;

  v1 = *(_QWORD *)(a1 + 312);
  if (v1)
  {
    v3 = 0;
    v4 = 0.0;
    do
    {
      v5 = *(_QWORD *)(*(_QWORD *)(a1 + 320) + 8 * v3);
      if (v5)
      {
        v6 = (*(double (**)(uint64_t))(*(_QWORD *)v5 + 40))(v5);
        v1 = *(_QWORD *)(a1 + 312);
        if (v6 > v4)
        {
          if (v1 <= v3)
          {
            os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
            _os_log_send_and_compose_impl();
            _os_crash_msg();
            __break(1u);
          }
          v7 = *(_QWORD *)(*(_QWORD *)(a1 + 320) + 8 * v3);
          v4 = (*(double (**)(uint64_t))(*(_QWORD *)v7 + 40))(v7);
          v1 = *(_QWORD *)(a1 + 312);
        }
      }
      ++v3;
    }
    while (v3 < v1);
  }
  else
  {
    return 0.0;
  }
  return v4;
}

void re::AnimationBlendTree<re::SkeletalPose>::evaluateCore(uint64_t a1, uint64_t a2)
{
  re::internal::assertLog((re::internal *)4, a2, "assertion failure: '%s' (%s:line %i) Requires AnimationBlendTreeInstance", "!\"Unreachable code\"", "evaluateCore", 109);
  _os_crash();
  __break(1u);
}

void re::AnimationBlendTree<re::SkeletalPose>::~AnimationBlendTree(uint64_t a1)
{
  re::AnimationBlendTree<re::SkeletalPose>::~AnimationBlendTree(a1);
  JUMPOUT(0x2276933B8);
}

uint64_t re::AnimationBlendTree<re::SkeletalPose>::~AnimationBlendTree(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  *(_QWORD *)a1 = &off_24ED360F8;
  v2 = a1 + 456;
  re::DynamicArray<re::BlendSpaceSampleDefinition>::deinit(a1 + 584);
  re::DynamicArray<re::BlendSpaceAxisDefinition>::deinit(a1 + 544);
  re::DynamicArray<re::RigGraphConnection>::deinit((_QWORD *)(a1 + 496));
  re::DynamicArray<re::AnimationBlendTreeNodeDescription>::deinit(v2);
  re::DynamicArray<re::StringID>::deinit(a1 + 416);
  re::DynamicArray<re::StringID>::deinit(a1 + 376);
  v3 = *(_QWORD *)(a1 + 352);
  if (v3)
  {
    if (*(_QWORD *)(a1 + 360))
    {
      (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v3 + 40))(v3, *(_QWORD *)(a1 + 368));
      *(_QWORD *)(a1 + 360) = 0;
      *(_QWORD *)(a1 + 368) = 0;
    }
    *(_QWORD *)(a1 + 352) = 0;
  }
  v4 = *(_QWORD *)(a1 + 328);
  if (v4)
  {
    if (*(_QWORD *)(a1 + 336))
    {
      (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v4 + 40))(v4, *(_QWORD *)(a1 + 344));
      *(_QWORD *)(a1 + 336) = 0;
      *(_QWORD *)(a1 + 344) = 0;
    }
    *(_QWORD *)(a1 + 328) = 0;
  }
  v5 = *(_QWORD *)(a1 + 304);
  if (v5)
  {
    if (*(_QWORD *)(a1 + 312))
    {
      (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v5 + 40))(v5, *(_QWORD *)(a1 + 320));
      *(_QWORD *)(a1 + 312) = 0;
      *(_QWORD *)(a1 + 320) = 0;
    }
    *(_QWORD *)(a1 + 304) = 0;
  }
  v6 = *(_QWORD *)(a1 + 280);
  if (v6)
  {
    if (*(_QWORD *)(a1 + 288))
    {
      (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v6 + 40))(v6, *(_QWORD *)(a1 + 296));
      *(_QWORD *)(a1 + 288) = 0;
      *(_QWORD *)(a1 + 296) = 0;
    }
    *(_QWORD *)(a1 + 280) = 0;
  }
  re::DynamicArray<re::Pair<unsigned long,re::StringID,true>>::deinit(a1 + 240);
  re::DynamicArray<re::StringID>::deinit(a1 + 200);
  re::DynamicArray<re::RigGraphNodeChild>::deinit(a1 + 160);
  re::DynamicArray<re::RigGraphNodeInputParameter>::deinit(a1 + 120);
  re::DynamicArray<re::RigGraphNodeInputParameter>::deinit(a1 + 80);
  *(_QWORD *)a1 = off_24ED1F350;
  v7 = *(_QWORD *)(a1 + 40);
  if (v7)
  {
    if ((*(_BYTE *)(a1 + 48) & 1) != 0)
      (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v7 + 40))(v7, *(_QWORD *)(a1 + 56));
    *(_OWORD *)(a1 + 40) = 0u;
    *(_OWORD *)(a1 + 56) = 0u;
  }
  re::StringID::destroyString((re::StringID *)(a1 + 24));
  return a1;
}

void re::BlendShapeWeightsAnimation::~BlendShapeWeightsAnimation(re::BlendShapeWeightsAnimation *this)
{
  uint64_t v2;

  *(_QWORD *)this = off_24ED25560;
  if (*((_BYTE *)this + 168))
    re::BlendShapeWeights::~BlendShapeWeights((re::BlendShapeWeightsAnimation *)((char *)this + 176));
  if (*((_BYTE *)this + 128))
    re::BlendShapeWeights::~BlendShapeWeights((re::BlendShapeWeightsAnimation *)((char *)this + 136));
  if (*((_BYTE *)this + 88))
    re::BlendShapeWeights::~BlendShapeWeights((re::BlendShapeWeightsAnimation *)((char *)this + 96));
  *(_QWORD *)this = off_24ED1F350;
  v2 = *((_QWORD *)this + 5);
  if (v2)
  {
    if ((*((_BYTE *)this + 48) & 1) != 0)
      (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v2 + 40))(v2, *((_QWORD *)this + 7));
    *(_OWORD *)((char *)this + 40) = 0u;
    *(_OWORD *)((char *)this + 56) = 0u;
  }
  re::StringID::destroyString((re::BlendShapeWeightsAnimation *)((char *)this + 24));
}

{
  uint64_t v2;

  *(_QWORD *)this = off_24ED25560;
  if (*((_BYTE *)this + 168))
    re::BlendShapeWeights::~BlendShapeWeights((re::BlendShapeWeightsAnimation *)((char *)this + 176));
  if (*((_BYTE *)this + 128))
    re::BlendShapeWeights::~BlendShapeWeights((re::BlendShapeWeightsAnimation *)((char *)this + 136));
  if (*((_BYTE *)this + 88))
    re::BlendShapeWeights::~BlendShapeWeights((re::BlendShapeWeightsAnimation *)((char *)this + 96));
  *(_QWORD *)this = off_24ED1F350;
  v2 = *((_QWORD *)this + 5);
  if (v2)
  {
    if ((*((_BYTE *)this + 48) & 1) != 0)
      (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v2 + 40))(v2, *((_QWORD *)this + 7));
    *(_OWORD *)((char *)this + 40) = 0u;
    *(_OWORD *)((char *)this + 56) = 0u;
  }
  re::StringID::destroyString((re::BlendShapeWeightsAnimation *)((char *)this + 24));
  JUMPOUT(0x2276933B8);
}

void re::AnimationImpl<re::BlendShapeWeights>::evaluateCore(uint64_t a1, uint64_t a2)
{
  re::internal::assertLog((re::internal *)4, a2, "assertion failure: '%s' (%s:line %i) At least one overloaded version of evaluteCore must be overridden.", "!\"Unreachable code\"", "evaluateCore", 91);
  _os_crash();
  __break(1u);
}

ArcSharedObject *re::make::shared::object<re::BlendShapeWeightsDefinition,re::DynamicArray<re::StringID> const&>(re *a1, uint64_t a2)
{
  uint64_t *v4;
  _anonymous_namespace_ *v5;
  const StringID *v6;
  ArcSharedObject *result;
  const StringID *v8[2];

  v4 = re::globalAllocators(a1);
  v5 = (_anonymous_namespace_ *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v4[2] + 32))(v4[2], 104, 8);
  v6 = *(const StringID **)(a2 + 16);
  v8[0] = *(const StringID **)(a2 + 32);
  v8[1] = v6;
  *(_QWORD *)a1 = v5;
  return result;
}

void re::BlendShapeWeightsSampledAnimation::~BlendShapeWeightsSampledAnimation(re::BlendShapeWeightsSampledAnimation *this)
{
  uint64_t v2;

  *(_QWORD *)this = off_24ED22188;
  re::FixedArray<re::BlendShapeWeights>::deinit((_QWORD *)this + 11);
  *(_QWORD *)this = off_24ED1F350;
  v2 = *((_QWORD *)this + 5);
  if (v2)
  {
    if ((*((_BYTE *)this + 48) & 1) != 0)
      (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v2 + 40))(v2, *((_QWORD *)this + 7));
    *(_OWORD *)((char *)this + 40) = 0u;
    *(_OWORD *)((char *)this + 56) = 0u;
  }
  re::StringID::destroyString((re::BlendShapeWeightsSampledAnimation *)((char *)this + 24));
}

{
  uint64_t v2;

  *(_QWORD *)this = off_24ED22188;
  re::FixedArray<re::BlendShapeWeights>::deinit((_QWORD *)this + 11);
  *(_QWORD *)this = off_24ED1F350;
  v2 = *((_QWORD *)this + 5);
  if (v2)
  {
    if ((*((_BYTE *)this + 48) & 1) != 0)
      (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v2 + 40))(v2, *((_QWORD *)this + 7));
    *(_OWORD *)((char *)this + 40) = 0u;
    *(_OWORD *)((char *)this + 56) = 0u;
  }
  re::StringID::destroyString((re::BlendShapeWeightsSampledAnimation *)((char *)this + 24));
  JUMPOUT(0x2276933B8);
}

void re::FixedArray<re::BlendShapeWeights>::init<>(uint64_t *a1, uint64_t a2, unint64_t a3)
{
  uint64_t v5;
  _OWORD *v6;
  uint64_t v7;
  _OWORD *v8;

  *a1 = a2;
  a1[1] = a3;
  if (!a3)
    return;
  if (a3 >> 59)
  {
    re::internal::assertLog((re::internal *)6, a2, "assertion failure: '%s' (%s:line %i) Size overflow in FixedArray<T>::init(). Element size = %zu, count = %zu", "!overflow", "init", 324, 32, a3);
    _os_crash();
    __break(1u);
    goto LABEL_9;
  }
  v5 = 32 * a3;
  v6 = (_OWORD *)(*(uint64_t (**)(uint64_t, unint64_t, uint64_t))(*(_QWORD *)a2 + 32))(a2, 32 * a3, 8);
  a1[2] = (uint64_t)v6;
  if (!v6)
  {
LABEL_9:
    re::internal::assertLog((re::internal *)4, v7, "assertion failure: '%s' (%s:line %i) Out of memory.", "m_data", "init", 327);
    _os_crash();
    __break(1u);
    return;
  }
  v8 = v6;
  if (a3 != 1)
  {
    bzero(v6, v5 - 32);
    v8 = (_OWORD *)((char *)v8 + v5 - 32);
  }
  *v8 = 0u;
  v8[1] = 0u;
}

void re::BlendShapeWeightsAnimationClip::~BlendShapeWeightsAnimationClip(re::BlendShapeWeightsAnimationClip *this)
{
  uint64_t v2;
  _OWORD *v3;

  *(_QWORD *)this = off_24ED1F350;
  v3 = (_OWORD *)((char *)this + 40);
  v2 = *((_QWORD *)this + 5);
  if (v2)
  {
    if ((*((_BYTE *)this + 48) & 1) != 0)
      (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v2 + 40))(v2, *((_QWORD *)this + 7));
    *v3 = 0u;
    v3[1] = 0u;
  }
  re::StringID::destroyString((re::BlendShapeWeightsAnimationClip *)((char *)this + 24));
}

{
  uint64_t v2;
  _OWORD *v3;

  *(_QWORD *)this = off_24ED1F350;
  v3 = (_OWORD *)((char *)this + 40);
  v2 = *((_QWORD *)this + 5);
  if (v2)
  {
    if ((*((_BYTE *)this + 48) & 1) != 0)
      (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v2 + 40))(v2, *((_QWORD *)this + 7));
    *v3 = 0u;
    v3[1] = 0u;
  }
  re::StringID::destroyString((re::BlendShapeWeightsAnimationClip *)((char *)this + 24));
  JUMPOUT(0x2276933B8);
}

BOOL re::AnimationClip<re::BlendShapeWeights>::childCount(uint64_t a1)
{
  return *(_QWORD *)(a1 + 80) != 0;
}

uint64_t re::AnimationClip<re::BlendShapeWeights>::child(uint64_t a1)
{
  return *(_QWORD *)(a1 + 80);
}

double re::AnimationClip<re::BlendShapeWeights>::totalDuration(uint64_t a1)
{
  uint64_t v2;
  double v3;
  double v4;
  double v5;

  v2 = *(_QWORD *)(a1 + 80);
  if (v2)
  {
    if (*(_BYTE *)(a1 + 88))
      v3 = *(double *)(a1 + 96);
    else
      v3 = 0.0;
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 40))(v2);
    if (*(_BYTE *)(a1 + 104))
      v5 = *(double *)(a1 + 112);
    v4 = v5 - v3;
  }
  else
  {
    v4 = 0.0;
  }
  if (*(_BYTE *)(a1 + 144))
    v4 = *(double *)(a1 + 152);
  return *(double *)(a1 + 136) + v4 / fabsf(*(float *)(a1 + 160));
}

uint64_t re::AnimationClip<re::BlendShapeWeights>::timelineDesc@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  double v5;
  float v6;
  double v7;
  double v8;
  char v9;
  float v10;
  float v11;
  float v12;
  float v13;
  float v14;
  uint64_t result;

  v4 = *(_QWORD *)(a1 + 80);
  if (v4)
  {
    if (*(_BYTE *)(a1 + 88))
      v5 = *(double *)(a1 + 96);
    else
      v5 = 0.0;
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 40))(v4);
    if (*(_BYTE *)(a1 + 104))
      v7 = *(double *)(a1 + 112);
    v6 = v7 - v5;
  }
  else
  {
    v6 = 0.0;
    v5 = 0.0;
    v7 = 0.0;
  }
  if (!*(_BYTE *)(a1 + 144) || (v8 = *(double *)(a1 + 152), v8 == 0.0))
  {
    v9 = *(_BYTE *)(a1 + 164);
    if (v9)
      v6 = INFINITY;
  }
  else
  {
    v6 = v8;
    v9 = *(_BYTE *)(a1 + 164);
  }
  v10 = *(double *)(a1 + 136);
  *(float *)a2 = v10;
  *(float *)(a2 + 4) = v6;
  v11 = *(float *)(a1 + 160);
  if (*(_BYTE *)(a1 + 128))
    v11 = -v11;
  v12 = v5;
  *(float *)(a2 + 8) = v11;
  *(float *)(a2 + 12) = v12;
  v13 = v7;
  v14 = *(double *)(a1 + 120);
  *(float *)(a2 + 16) = v13;
  *(float *)(a2 + 20) = v14;
  *(_BYTE *)(a2 + 24) = v9;
  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 56))(a1);
  *(_BYTE *)(a2 + 25) = result;
  return result;
}

uint64_t re::AnimationClip<re::BlendShapeWeights>::derivedFillMode(uint64_t a1)
{
  char v1;
  uint64_t v3;

  v1 = *(_BYTE *)(a1 + 16);
  if (v1)
    return v1;
  v3 = *(_QWORD *)(a1 + 80);
  if (!v3)
    return 0;
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v3 + 56))(v3);
}

uint64_t re::AnimationClip<re::BlendShapeWeights>::createInstance(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  int v13;
  int v14;
  __int128 v15;
  int v16;
  int v17;

  if ((*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 24))(a1) != 1)
    return a1;
  v9 = a5 + 1;
  if (*(_QWORD *)(a4 + 128) <= v9)
  {
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
    goto LABEL_15;
  }
  v10 = *(_QWORD *)(*(_QWORD *)(a4 + 136) + 8 * v9);
  if (!(*(unsigned int (**)(uint64_t))(*(_QWORD *)v10 + 88))(v10))
    return a1;
  v11 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 32))(a2, 168, 8);
  *(_QWORD *)v11 = off_24ED1F350;
  v12 = *(_BYTE *)(a1 + 16);
  *(_QWORD *)(v11 + 8) = *(_QWORD *)(a1 + 8);
  *(_BYTE *)(v11 + 16) = v12;
  re::StringID::StringID((re::StringID *)(v11 + 24), (const StringID *)(a1 + 24));
  re::DynamicString::DynamicString((re::DynamicString *)(v11 + 40), (const re::DynamicString *)(a1 + 40));
  *(_BYTE *)(v11 + 72) = *(_BYTE *)(a1 + 72);
  *(_QWORD *)v11 = off_24ED36378;
  *(_QWORD *)(v11 + 80) = *(_QWORD *)(a1 + 80);
  v13 = *(unsigned __int8 *)(a1 + 88);
  *(_BYTE *)(v11 + 88) = v13;
  if (v13)
    *(_QWORD *)(v11 + 96) = *(_QWORD *)(a1 + 96);
  v14 = *(unsigned __int8 *)(a1 + 104);
  *(_BYTE *)(v11 + 104) = v14;
  if (v14)
    *(_QWORD *)(v11 + 112) = *(_QWORD *)(a1 + 112);
  v15 = *(_OWORD *)(a1 + 120);
  *(_QWORD *)(v11 + 136) = *(_QWORD *)(a1 + 136);
  *(_OWORD *)(v11 + 120) = v15;
  v16 = *(unsigned __int8 *)(a1 + 144);
  *(_BYTE *)(v11 + 144) = v16;
  if (v16)
    *(_QWORD *)(v11 + 152) = *(_QWORD *)(a1 + 152);
  v17 = *(_DWORD *)(a1 + 160);
  *(_WORD *)(v11 + 164) = *(_WORD *)(a1 + 164);
  *(_DWORD *)(v11 + 160) = v17;
  if (*(_QWORD *)(a4 + 128) <= v9)
  {
LABEL_15:
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  *(_QWORD *)(v11 + 80) = *(_QWORD *)(*(_QWORD *)(a4 + 136) + 8 * v9);
  *(_BYTE *)(v11 + 165) = 1;
  return v11;
}

uint64_t re::AnimationClip<re::BlendShapeWeights>::isInstanced(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 165);
}

uint64_t *re::AnimationClip<re::BlendShapeWeights>::evaluateCore(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t *a4, uint64_t a5, uint64_t *a6)
{
  uint64_t v6;
  uint64_t *v7;
  uint64_t *v8;
  uint64_t v10;
  uint64_t v11;
  uint64_t *result;
  uint64_t v13;
  __n128 v14;
  uint64_t v15;
  uint64_t v16;
  _OWORD *v17;
  _OWORD *v18;
  double v19;
  uint64_t v20;
  uint64_t v21;
  char v22[8];
  uint64_t v23;
  char v24;
  unint64_t v25;
  char v26;
  int v27;
  uint64_t v28;
  uint64_t v29;
  char v30;
  uint64_t v31;
  _BYTE v32[4];
  int v33;
  uint64_t v34;
  char v35;
  uint64_t v36;
  char v37;
  int v38;
  uint64_t v39;
  uint64_t v40;
  char v41;
  uint64_t v42;
  _OWORD v43[2];
  _OWORD v44[2];
  _QWORD v45[2];

  v45[0] = a2;
  v45[1] = a3;
  if (a3)
  {
    v7 = a4;
    v8 = *(uint64_t **)(a1 + 80);
    if (!v8)
      return re::AnimationValueTraits<re::BlendShapeWeights>::copy(a4, a6);
    v6 = a5;
    if (*(_BYTE *)(a1 + 164) != 2 || !vcvtms_s32_f32(*(float *)(a2 + 60)))
    {
      v10 = re::Slice<re::AnimationClock>::range(v45, 1uLL, a3);
      return (uint64_t *)(*(uint64_t (**)(uint64_t *, uint64_t, uint64_t, uint64_t *, uint64_t, uint64_t *))(*v8 + 96))(v8, v10, v11, v7, v6, a6);
    }
  }
  else
  {
    re::internal::assertLog((re::internal *)6, a2, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 251, 0, 0);
    a1 = _os_crash();
    __break(1u);
  }
  v21 = a1;
  memset(v44, 0, sizeof(v44));
  memset(v43, 0, sizeof(v43));
  re::BlendShapeWeights::init((uint64_t *)v44, v7 + 3);
  re::BlendShapeWeights::init((uint64_t *)v43, v7 + 3);
  if (v32[0] && v33 == 1)
  {
    v15 = *(_QWORD *)(v21 + 80);
    v14.n128_u64[0] = 0;
    v16 = 0;
    if (v15)
    {
      if (*(_BYTE *)(v21 + 88))
        v16 = *(_QWORD *)(v21 + 96);
      (*(void (**)(uint64_t, __n128))(*(_QWORD *)v15 + 40))(v15, v14);
      if (*(_BYTE *)(v21 + 104))
        v14.n128_u64[0] = *(_QWORD *)(v21 + 112);
    }
    v34 = 0;
    v37 = 0;
    v39 = 0;
    v40 = 0;
    v41 = 0;
    v32[0] = 3;
    v35 = 1;
    v36 = v16;
    v42 = 0x200000000;
    v38 = 1065353216;
    v23 = 0;
    v26 = 0;
    v28 = 0;
    v29 = 0;
    v30 = 0;
    v22[0] = 3;
    v24 = 1;
    v25 = v14.n128_u64[0];
    v31 = 0x200000000;
    v27 = 1065353216;
    if (*(_BYTE *)(v21 + 128))
      v17 = v43;
    else
      v17 = v44;
    if (*(_BYTE *)(v21 + 128))
      v18 = v44;
    else
      v18 = v43;
    (*(void (**)(uint64_t *, _BYTE *, uint64_t, uint64_t *, uint64_t, _OWORD *))(*v8 + 96))(v8, v32, 1, v7, v6, v17);
    (*(void (**)(uint64_t *, char *, uint64_t, uint64_t *, uint64_t, _OWORD *))(*v8 + 96))(v8, v22, 1, v7, v6, v18);
    re::AnimationValueTraits<re::BlendShapeWeights>::invert(v44, v44);
    *(float *)&v19 = re::AnimationValueTraits<re::BlendShapeWeights>::combine(v44, v43, v44);
    re::internal::assertLog((re::internal *)4, v20, v19, "assertion failure: '%s' (%s:line %i) Not yet implemented.", "!\"Unreachable code\"", "repeat", 160);
    _os_crash();
    __break(1u);
  }
  re::internal::assertLog((re::internal *)4, v13, "assertion failure: '%s' (%s:line %i) Not yet implemented. Cycle-offset computation currently does not yet support nested animations.", "internal::countTimelines(*source) == 1", "evaluateCore", 299);
  result = (uint64_t *)_os_crash();
  __break(1u);
  return result;
}

uint64_t re::AnimationClip<re::BlendShapeWeights>::~AnimationClip(uint64_t a1)
{
  uint64_t v2;
  _OWORD *v3;

  *(_QWORD *)a1 = off_24ED1F350;
  v3 = (_OWORD *)(a1 + 40);
  v2 = *(_QWORD *)(a1 + 40);
  if (v2)
  {
    if ((*(_BYTE *)(a1 + 48) & 1) != 0)
      (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v2 + 40))(v2, *(_QWORD *)(a1 + 56));
    *v3 = 0u;
    v3[1] = 0u;
  }
  re::StringID::destroyString((re::StringID *)(a1 + 24));
  return a1;
}

void re::AnimationClip<re::BlendShapeWeights>::~AnimationClip(uint64_t a1)
{
  uint64_t v2;
  _OWORD *v3;

  *(_QWORD *)a1 = off_24ED1F350;
  v3 = (_OWORD *)(a1 + 40);
  v2 = *(_QWORD *)(a1 + 40);
  if (v2)
  {
    if ((*(_BYTE *)(a1 + 48) & 1) != 0)
      (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v2 + 40))(v2, *(_QWORD *)(a1 + 56));
    *v3 = 0u;
    v3[1] = 0u;
  }
  re::StringID::destroyString((re::StringID *)(a1 + 24));
  JUMPOUT(0x2276933B8);
}

void re::BlendShapeWeightsKeyframeAnimation::~BlendShapeWeightsKeyframeAnimation(re::BlendShapeWeightsKeyframeAnimation *this)
{
  uint64_t v2;
  uint64_t v3;

  *(_QWORD *)this = off_24ED24D90;
  re::FixedArray<re::BlendShapeWeights>::deinit((_QWORD *)this + 13);
  v2 = *((_QWORD *)this + 10);
  if (v2)
  {
    if (*((_QWORD *)this + 11))
    {
      (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v2 + 40))(v2, *((_QWORD *)this + 12));
      *((_QWORD *)this + 11) = 0;
      *((_QWORD *)this + 12) = 0;
    }
    *((_QWORD *)this + 10) = 0;
  }
  *(_QWORD *)this = off_24ED1F350;
  v3 = *((_QWORD *)this + 5);
  if (v3)
  {
    if ((*((_BYTE *)this + 48) & 1) != 0)
      (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v3 + 40))(v3, *((_QWORD *)this + 7));
    *(_OWORD *)((char *)this + 40) = 0u;
    *(_OWORD *)((char *)this + 56) = 0u;
  }
  re::StringID::destroyString((re::BlendShapeWeightsKeyframeAnimation *)((char *)this + 24));
}

{
  uint64_t v2;
  uint64_t v3;

  *(_QWORD *)this = off_24ED24D90;
  re::FixedArray<re::BlendShapeWeights>::deinit((_QWORD *)this + 13);
  v2 = *((_QWORD *)this + 10);
  if (v2)
  {
    if (*((_QWORD *)this + 11))
    {
      (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v2 + 40))(v2, *((_QWORD *)this + 12));
      *((_QWORD *)this + 11) = 0;
      *((_QWORD *)this + 12) = 0;
    }
    *((_QWORD *)this + 10) = 0;
  }
  *(_QWORD *)this = off_24ED1F350;
  v3 = *((_QWORD *)this + 5);
  if (v3)
  {
    if ((*((_BYTE *)this + 48) & 1) != 0)
      (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v3 + 40))(v3, *((_QWORD *)this + 7));
    *(_OWORD *)((char *)this + 40) = 0u;
    *(_OWORD *)((char *)this + 56) = 0u;
  }
  re::StringID::destroyString((re::BlendShapeWeightsKeyframeAnimation *)((char *)this + 24));
  JUMPOUT(0x2276933B8);
}

uint64_t *re::MaterialAsset::assetType(re::MaterialAsset *this)
{
  unsigned __int8 v1;

  {
    re::MaterialAsset::assetType(void)::type = (uint64_t)"Material";
    qword_2558275C0 = 0;
    re::AssetType::generateCompiledExtension((re::AssetType *)&re::MaterialAsset::assetType(void)::type);
  }
  return &re::MaterialAsset::assetType(void)::type;
}

uint64_t re::AssetHandle::loadedAsset<re::MaterialAsset>(re::MaterialAsset *a1)
{
  if (!*((_QWORD *)a1 + 1))
    return 0;
  re::MaterialAsset::assetType(a1);
  return re::AssetHandle::assetWithType(a1, (const re::AssetType *)&re::MaterialAsset::assetType(void)::type, 1);
}

uint64_t re::MaterialAsset::getOriginalConstantParameterType(re::MaterialAsset *this, const char *a2)
{
  char *v2;
  uint64_t v3;
  char v4;
  const char *v5;
  int v6;
  uint64_t result;
  uint64_t v8;

  v2 = (char *)this + 1680;
  if (a2)
  {
    v3 = *a2;
    if (*a2)
    {
      v4 = a2[1];
      if (v4)
      {
        v5 = a2 + 2;
        do
        {
          v3 = 31 * v3 + v4;
          v6 = *(unsigned __int8 *)v5++;
          v4 = v6;
        }
        while (v6);
      }
      v3 &= ~0x8000000000000000;
    }
  }
  else
  {
    v3 = 0x7FFFFFFFFFFFFFFFLL;
  }
  v8 = v3;
  result = re::HashTable<re::WeakStringID,re::ColorConstantTable::ColorValue,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,false,false>::tryGet((uint64_t)v2, &v8);
  if (result)
    return *(unsigned __int8 *)(result + 20);
  return result;
}

uint64_t re::HashTable<re::WeakStringID,re::ColorConstantTable::ColorValue,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,false,false>::tryGet(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v6;

  if (!*(_QWORD *)a1)
    return 0;
  v2 = *a2;
  v3 = 0xBF58476D1CE4E5B9 * (*a2 ^ ((unint64_t)*a2 >> 30));
  v4 = *(unsigned int *)(*(_QWORD *)(a1 + 8)
                       + 4
                       * (((0x94D049BB133111EBLL * (v3 ^ (v3 >> 27))) ^ ((0x94D049BB133111EBLL * (v3 ^ (v3 >> 27))) >> 31))
                        % *(unsigned int *)(a1 + 24)));
  if ((_DWORD)v4 == 0x7FFFFFFF)
    return 0;
  v6 = *(_QWORD *)(a1 + 16);
  if (*(_QWORD *)(v6 + 40 * v4 + 8) != v2)
  {
    while (1)
    {
      LODWORD(v4) = *(_DWORD *)(v6 + 40 * v4) & 0x7FFFFFFF;
      if ((_DWORD)v4 == 0x7FFFFFFF)
        break;
      if (*(_QWORD *)(v6 + 40 * v4 + 8) == v2)
        return v6 + 40 * v4 + 16;
    }
    return 0;
  }
  return v6 + 40 * v4 + 16;
}

uint64_t *re::MaterialAsset::tryGetOriginalColorGamut3FParameterValue@<X0>(re::MaterialAsset *this@<X0>, const char *a2@<X1>, uint64_t a3@<X8>)
{
  char *v4;
  uint64_t v5;
  char v6;
  const char *v7;
  int v8;
  uint64_t *result;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;

  v4 = (char *)this + 1680;
  if (a2)
  {
    v5 = *a2;
    if (*a2)
    {
      v6 = a2[1];
      if (v6)
      {
        v7 = a2 + 2;
        do
        {
          v5 = 31 * v5 + v6;
          v8 = *(unsigned __int8 *)v7++;
          v6 = v8;
        }
        while (v8);
      }
      v5 &= ~0x8000000000000000;
    }
  }
  else
  {
    v5 = 0x7FFFFFFFFFFFFFFFLL;
  }
  v12 = v5;
  result = (uint64_t *)re::HashTable<re::WeakStringID,re::ColorConstantTable::ColorValue,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,false,false>::tryGet((uint64_t)v4, &v12);
  if (result && *((_BYTE *)result + 20) == 20)
  {
    v10 = *result;
    v11 = *((unsigned int *)result + 2) | ((unint64_t)*((unsigned __int8 *)result + 16) << 32);
    *(_BYTE *)a3 = 1;
    *(_QWORD *)(a3 + 4) = v10;
    *(_QWORD *)(a3 + 12) = v11;
  }
  else
  {
    *(_BYTE *)a3 = 0;
  }
  return result;
}

uint64_t re::MaterialAsset::tryGetOriginalColorGamut4FParameterValue@<X0>(re::MaterialAsset *this@<X0>, const char *a2@<X1>, uint64_t a3@<X8>)
{
  char *v4;
  uint64_t v5;
  char v6;
  const char *v7;
  int v8;
  uint64_t result;
  uint64_t v10;

  v4 = (char *)this + 1680;
  if (a2)
  {
    v5 = *a2;
    if (*a2)
    {
      v6 = a2[1];
      if (v6)
      {
        v7 = a2 + 2;
        do
        {
          v5 = 31 * v5 + v6;
          v8 = *(unsigned __int8 *)v7++;
          v6 = v8;
        }
        while (v8);
      }
      v5 &= ~0x8000000000000000;
    }
  }
  else
  {
    v5 = 0x7FFFFFFFFFFFFFFFLL;
  }
  v10 = v5;
  result = re::HashTable<re::WeakStringID,re::ColorConstantTable::ColorValue,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,false,false>::tryGet((uint64_t)v4, &v10);
  if (result && *(_BYTE *)(result + 20) == 21)
  {
    *(_BYTE *)a3 = 1;
    *(_OWORD *)(a3 + 4) = *(_OWORD *)result;
    *(_DWORD *)(a3 + 20) = *(_DWORD *)(result + 16);
  }
  else
  {
    *(_BYTE *)a3 = 0;
  }
  return result;
}

BOOL re::MaterialAsset::isColorTextureParameter(re::MaterialAsset *this, const re::StringID *a2)
{
  return re::StringID::operator==(this, re::MaterialAsset::isColorTextureParameter(re::StringID const&)::textureBaseColor)|| re::StringID::operator==(this, re::MaterialAsset::isColorTextureParameter(re::StringID const&)::textureBaseColorDetail)|| re::StringID::operator==(this, re::MaterialAsset::isColorTextureParameter(re::StringID const&)::textureSheenColor)|| re::StringID::operator==(this, re::MaterialAsset::isColorTextureParameter(re::StringID const&)::textureEmissive);
}

uint64_t re::MaterialAsset::tryGetParameterBinding(re::MaterialAsset *this, const char *a2)
{
  char *v3;
  uint64_t v4;
  uint64_t v6;
  char v7;

  v3 = (char *)this + 1808;
  v4 = re::HashTable<re::DynamicString,re::DynamicArray<re::ResourceFetchManager::Request *>,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::tryGet((uint64_t)v3, (uint64_t)&v6);
  if (v6 && (v7 & 1) != 0)
    (*(void (**)(void))(*(_QWORD *)v6 + 40))();
  return v4;
}

void re::MaterialAsset::makeMaterialMemoryAsset(uint64_t a1, re::RenderManager *a2, re::AssetHandle *a3, const char *a4, uint64_t a5)
{
  _OWORD v9[2];
  __int128 v10;
  _BYTE v11[30];
  unsigned __int8 v12[18];

  v12[0] = 0;
  v12[2] = 0;
  v12[4] = 0;
  v12[6] = 0;
  v12[8] = 0;
  v12[10] = 0;
  v12[12] = 0;
  v12[14] = 0;
  v12[16] = 0;
  re::AssetHandle::AssetHandle((re::AssetHandle *)v11, a3);
  v10 = 0u;
  memset(v9, 0, sizeof(v9));
  DWORD1(v10) = 0x7FFFFFFF;
  re::MaterialAsset::makeMaterialMemoryAssetWithFunctionConstants(a1, a2, (re::AssetHandle *)v11, (uint64_t *)v9, v12, a4, a5);
  re::HashTable<re::DynamicString,re::TechniqueFunctionConstant,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::deinit((uint64_t *)v9);
  re::AssetHandle::~AssetHandle((re::AssetHandle *)v11);
}

uint64_t re::MaterialAsset::makeMaterialMemoryAssetWithFunctionConstants(uint64_t a1, re::RenderManager *a2, re::AssetHandle *a3, uint64_t *a4, unsigned __int8 *a5, const char *a6, uint64_t a7)
{
  re *v13;
  uint64_t *MaterialAssetWithFunctionConstants;
  re::MaterialAsset *v15;
  uint64_t v17[3];

  v13 = re::AssetHandle::AssetHandle((re::AssetHandle *)v17, a3);
  MaterialAssetWithFunctionConstants = re::MaterialAsset::makeMaterialAssetWithFunctionConstants(v13, a2, v17, a4, a5, a6);
  re::AssetHandle::~AssetHandle((re::AssetHandle *)v17);
  if (a6 && *a6)
  {
    re::MaterialAsset::assetType(v15);
    return (*(uint64_t (**)(uint64_t, uint64_t *, uint64_t *, const char *, _QWORD, uint64_t, _QWORD))(*(_QWORD *)a1 + 424))(a1, MaterialAssetWithFunctionConstants, &re::MaterialAsset::assetType(void)::type, a6, 0, a7, 0);
  }
  else
  {
    re::MaterialAsset::assetType(v15);
    return (*(uint64_t (**)(uint64_t, uint64_t *, uint64_t *, _QWORD, uint64_t, _QWORD))(*(_QWORD *)a1 + 416))(a1, MaterialAssetWithFunctionConstants, &re::MaterialAsset::assetType(void)::type, 0, a7, 0);
  }
}

void re::MaterialAsset::makeMutableMaterialMemoryAsset(uint64_t a1, re::RenderManager *a2, re::AssetHandle *a3, const char *a4, uint64_t a5)
{
  _OWORD v9[2];
  __int128 v10;
  _BYTE v11[30];
  unsigned __int8 v12[18];

  v12[0] = 0;
  v12[2] = 0;
  v12[4] = 0;
  v12[6] = 0;
  v12[8] = 0;
  v12[10] = 0;
  v12[12] = 0;
  v12[14] = 0;
  v12[16] = 0;
  re::AssetHandle::AssetHandle((re::AssetHandle *)v11, a3);
  v10 = 0u;
  memset(v9, 0, sizeof(v9));
  DWORD1(v10) = 0x7FFFFFFF;
  re::MaterialAsset::makeMutableMaterialMemoryAssetWithFunctionConstants(a1, a2, (re::AssetHandle *)v11, (uint64_t *)v9, v12, a4, a5);
  re::HashTable<re::DynamicString,re::TechniqueFunctionConstant,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::deinit((uint64_t *)v9);
  re::AssetHandle::~AssetHandle((re::AssetHandle *)v11);
}

uint64_t re::MaterialAsset::makeMutableMaterialMemoryAssetWithFunctionConstants(uint64_t a1, re::RenderManager *a2, re::AssetHandle *a3, uint64_t *a4, unsigned __int8 *a5, const char *a6, uint64_t a7)
{
  re *v13;
  uint64_t *MaterialAssetWithFunctionConstants;
  re::MaterialAsset *v15;
  uint64_t v17[3];

  v13 = re::AssetHandle::AssetHandle((re::AssetHandle *)v17, a3);
  MaterialAssetWithFunctionConstants = re::MaterialAsset::makeMaterialAssetWithFunctionConstants(v13, a2, v17, a4, a5, a6);
  re::AssetHandle::~AssetHandle((re::AssetHandle *)v17);
  if (a6 && *a6)
  {
    re::MaterialAsset::assetType(v15);
    return (*(uint64_t (**)(uint64_t, uint64_t *, uint64_t *, const char *, uint64_t, uint64_t, _QWORD))(*(_QWORD *)a1 + 424))(a1, MaterialAssetWithFunctionConstants, &re::MaterialAsset::assetType(void)::type, a6, 1, a7, 0);
  }
  else
  {
    re::MaterialAsset::assetType(v15);
    return (*(uint64_t (**)(uint64_t, uint64_t *, uint64_t *, uint64_t, uint64_t, _QWORD))(*(_QWORD *)a1 + 416))(a1, MaterialAssetWithFunctionConstants, &re::MaterialAsset::assetType(void)::type, 1, a7, 0);
  }
}

uint64_t *re::MaterialAsset::makeMaterialAssetWithFunctionConstants(re *a1, re::RenderManager *a2, uint64_t *a3, uint64_t *a4, unsigned __int8 *a5, const char *a6)
{
  uint64_t *v11;
  uint64_t *v12;
  uint64_t v13;
  id v14;
  _anonymous_namespace_ *v15;
  uint64_t v16;
  re *v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  id v21;
  uint64_t v22;
  id v23;
  uint64_t v24;
  _BYTE v26[1240];
  uint64_t v27;
  char v28;
  uint64_t v29[7];
  unsigned __int8 v30[2];
  unsigned __int8 v32;
  unsigned __int8 v34;
  unsigned __int8 v36;
  unsigned __int8 v38;
  unsigned __int8 v40;
  unsigned __int8 v42;
  unsigned __int8 v44;
  unsigned __int8 v46;
  uint64_t v47[20];
  int v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  int v59;
  __int128 v60;
  __int128 v61;
  int v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  int v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  int v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  int v74;
  __int128 v75;
  __int128 v76;
  int v77;
  uint64_t v78;
  _QWORD v79[143];
  int v80;

  v11 = re::globalAllocators(a1);
  v12 = (uint64_t *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v11[2] + 32))(v11[2], 1896, 8);
  bzero(v12, 0x768uLL);
  re::MaterialAsset::MaterialAsset((re::MaterialAsset *)v12);
  v79[0] = re::AssetHandle::operator=(v12 + 5, a3);
  re::DynamicArray<re::TransitionCondition *>::add(v12 + 232, v79);
  v13 = *(_QWORD *)(re::AssetHandle::asset<re::MaterialDefinitionAsset>((re::MaterialDefinitionAsset *)a3) + 744);
  v78 = v13;
  if (v13)
    v14 = (id)(v13 + 8);
  bzero(v47, 0x210uLL);
  v47[16] = (uint64_t)&off_24ED36808;
  memset(&v47[17], 0, 24);
  v60 = 0u;
  v61 = 0u;
  v62 = 0;
  v65 = 0;
  v63 = 0;
  v64 = 0;
  v55 = 0u;
  v56 = 0u;
  v57 = 0u;
  v58 = 0u;
  v49 = 0u;
  v50 = 0u;
  v51 = 0u;
  v52 = 0u;
  v53 = 0u;
  v54 = 0u;
  v48 = 0;
  v59 = 0;
  v66 = 1;
  v69 = 0;
  v70 = 0;
  v67 = 0;
  v68 = 0;
  v73 = 0;
  v74 = 0;
  v71 = 0;
  v72 = 0;
  v75 = 0u;
  v76 = 0u;
  v77 = 0;
  v30[0] = *a5;
  if (v30[0])
    v30[1] = a5[1];
  if (a5[2])
    v32 = a5[3];
  if (a5[4])
    v34 = a5[5];
  if (a5[6])
    v36 = a5[7];
  if (a5[8])
    v38 = a5[9];
  if (a5[10])
    v40 = a5[11];
  if (a5[12])
    v42 = a5[13];
  if (a5[14])
    v44 = a5[15];
  if (a5[16])
    v46 = a5[17];
  memset(v29, 0, 48);
  if (!a6)
    a6 = "";
  re::MaterialBuilder::MaterialBuilder((uint64_t)v79, &v78, v47, a4, v30, v29, (uint64_t)&v27, 0);
  if (v27 && (v28 & 1) != 0)
    (*(void (**)(void))(*(_QWORD *)v27 + 40))();
  re::FixedArray<re::LinkedFunction>::deinit(&v29[3]);
  re::FixedArray<re::LinkedFunction>::deinit(v29);
  re::ShaderParameterTable::~ShaderParameterTable((re::ShaderParameterTable *)v47);
  if (v13)

  v80 = 7;
  v16 = *((_QWORD *)a2 + 3);
  re::MaterialBuilder::MaterialBuilder((uint64_t)v26, (uint64_t)v79);
  re::MaterialManager::createMaterial(v16, (re::MaterialBuilder *)v26, v47);
  re::MaterialBuilder::~MaterialBuilder((re::MaterialBuilder *)v26);
  v18 = re::globalAllocators(v17);
  v19 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v18[2] + 32))(v18[2], 1008, 8);
  re::MaterialParameterBlock::MaterialParameterBlock((re::MaterialParameterBlock *)v19, a2);
  v20 = v47[0];
  if (v47[0])
  {
    v21 = (id)(v47[0] + 8);
    re::SharedPtr<re::SkeletalPoseJointDefinition>::reset(v12 + 208, v20);

  }
  else
  {
    v22 = v12[208];
    if (v22)
    {

      v12[208] = 0;
    }
  }
  if (v19)
  {
    v23 = (id)(v19 + 8);
    re::SharedPtr<re::SkeletalPoseJointDefinition>::reset(v12 + 209, v19);

  }
  else
  {
    v24 = v12[209];
    if (v24)
    {

      v12[209] = 0;
    }
  }
  if (v47[0])

  re::MaterialBuilder::~MaterialBuilder((re::MaterialBuilder *)v79);
  return v12;
}

uint64_t re::AssetHandle::asset<re::MaterialDefinitionAsset>(re::MaterialDefinitionAsset *a1)
{
  uint64_t *v2;
  uint64_t v3;
  NSObject *v4;
  _QWORD *v6;
  char *v7;
  int v8;
  char *v9;
  uint64_t v10;

  v10 = *MEMORY[0x24BDAC8D0];
  v2 = re::MaterialDefinitionAsset::assetType(a1);
  v3 = re::AssetHandle::assetWithType(a1, (const re::AssetType *)v2, 0);
  if (!v3)
  {
    v4 = *re::assetsLogObjects(0);
    if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
    {
      v6 = re::AssetHandle::assetInfo(a1);
      if ((v6[17] & 1) != 0)
        v7 = (char *)v6[18];
      else
        v7 = (char *)v6 + 137;
      v8 = 136315138;
      v9 = v7;
      _os_log_error_impl(&dword_224FE9000, v4, OS_LOG_TYPE_ERROR, "Invalid asset: '%s'", (uint8_t *)&v8, 0xCu);
    }
  }
  return v3;
}

uint64_t re::MaterialAssetLoader::preloadAssets(re::MaterialAssetLoader *this)
{
  __int128 v2;
  char *v3;
  __int128 v4;
  char *v5;
  uint64_t v6;
  const char *v7;
  uint64_t v8;
  re::RenderManager *v9;
  __int128 v10;
  uint64_t v11;
  uint64_t result;
  _BYTE v13[24];
  __int128 v14;
  uint64_t v15;
  id v16[3];
  __int128 v17;
  char *v18;

  (*(void (**)(__int128 *__return_ptr, _QWORD, const char *))(**((_QWORD **)this + 2) + 8))(&v17, *((_QWORD *)this + 2), "engine:missingMaterial.rematerial");
  v2 = *((_OWORD *)this + 2);
  *((_OWORD *)this + 2) = v17;
  v17 = v2;
  v3 = (char *)*((_QWORD *)this + 6);
  *((_QWORD *)this + 6) = v18;
  v18 = v3;
  re::AssetHandle::~AssetHandle((re::AssetHandle *)&v17);
  (*(void (**)(__int128 *__return_ptr, _QWORD, const char *))(**((_QWORD **)this + 2) + 8))(&v17, *((_QWORD *)this + 2), "engine:emptyMaterial.rematerial");
  v4 = *(_OWORD *)((char *)this + 56);
  *(_OWORD *)((char *)this + 56) = v17;
  v17 = v4;
  v5 = (char *)*((_QWORD *)this + 9);
  *((_QWORD *)this + 9) = v18;
  v18 = v5;
  re::AssetHandle::~AssetHandle((re::AssetHandle *)&v17);
  if ((*(unsigned int (**)(_QWORD))(**((_QWORD **)this + 2) + 352))(*((_QWORD *)this + 2)))
  {
    re::AssetHandle::loadAsync((re::MaterialAssetLoader *)((char *)this + 32));
    re::AssetHandle::loadAsync((re::MaterialAssetLoader *)((char *)this + 56));
  }
  re::Bundle::application(v16);
  re::Bundle::ID(v16, (re::DynamicString *)&v17);

  v6 = *((_QWORD *)this + 2);
  if (v6 && *((_QWORD *)this + 3))
  {
    v7 = (BYTE8(v17) & 1) != 0 ? v18 : (char *)&v17 + 9;
    if (!strcmp(v7, "com.disney.whatif"))
    {
      (*(void (**)(id *__return_ptr, uint64_t, const char *))(*(_QWORD *)v6 + 8))(v16, v6, "engine:videoMaterial.rematerialdefinition");
      v8 = *((_QWORD *)this + 2);
      v9 = (re::RenderManager *)*((_QWORD *)this + 3);
      re::AssetHandle::AssetHandle((re::AssetHandle *)v13, (const re::AssetHandle *)v16);
      re::MaterialAsset::makeMaterialMemoryAsset(v8, v9, (re::AssetHandle *)v13, 0, 0);
      v10 = *((_OWORD *)this + 5);
      *((_OWORD *)this + 5) = v14;
      v14 = v10;
      v11 = *((_QWORD *)this + 12);
      *((_QWORD *)this + 12) = v15;
      v15 = v11;
      re::AssetHandle::~AssetHandle((re::AssetHandle *)&v14);
      re::AssetHandle::~AssetHandle((re::AssetHandle *)v13);
      re::AssetHandle::~AssetHandle((re::AssetHandle *)v16);
    }
  }
  result = v17;
  if ((_QWORD)v17)
  {
    if ((BYTE8(v17) & 1) != 0)
      return (*(uint64_t (**)(void))(*(_QWORD *)v17 + 40))();
  }
  return result;
}

__guard re::MaterialAssetLoader::introspectionType(re::MaterialAssetLoader *this)
{
  unsigned __int8 v1;
  __guard *v2;
  int v4;

  if ((v1 & 1) == 0)
  {
    if (v4)
    {
      re::introspect<re::MaterialAsset>(void)::info = re::internal::getOrCreateInfo((re::internal *)"MaterialAsset", (uint64_t (*)(re::internal *))re::allocInfo_MaterialAsset, (re::IntrospectionBase *(*)(void))re::initInfo_MaterialAsset, (void (*)(re::IntrospectionBase *))&re::internal::introspectionInfoStorage<re::MaterialAsset>, 0);
    }
  }
  return v2[434];
}

uint64_t re::MaterialAssetLoader::allocateSampleAsset(re::MaterialAssetLoader *this)
{
  uint64_t *v2;
  uint64_t v3;
  __int128 v4;
  uint64_t v5;
  __int128 v7;
  uint64_t v8;

  v2 = re::globalAllocators(this);
  v3 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v2[2] + 32))(v2[2], 1896, 8);
  bzero((void *)v3, 0x768uLL);
  re::MaterialAsset::MaterialAsset((re::MaterialAsset *)v3);
  (*(void (**)(__int128 *__return_ptr, _QWORD, const char *))(**((_QWORD **)this + 2) + 8))(&v7, *((_QWORD *)this + 2), "engine:pbr.rematerialdefinition");
  v4 = *(_OWORD *)(v3 + 40);
  *(_OWORD *)(v3 + 40) = v7;
  v7 = v4;
  v5 = *(_QWORD *)(v3 + 56);
  *(_QWORD *)(v3 + 56) = v8;
  v8 = v5;
  re::AssetHandle::~AssetHandle((re::AssetHandle *)&v7);
  *(_QWORD *)&v7 = v3 + 40;
  re::DynamicArray<re::TransitionCondition *>::add((_QWORD *)(v3 + 1856), &v7);
  return v3;
}

uint64_t re::MaterialAssetLoader::registerAsset(re::MaterialAssetLoader *this, uint64_t a2, const re::ExistingAssetInformation *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  unsigned __int8 v14[8];
  _QWORD v15[4];
  uint64_t v16;
  uint64_t v17;
  char v18;
  unsigned __int8 v19[8];
  uint64_t v20;
  char v21;
  _BYTE v22[8];
  uint64_t v23;
  uint64_t v24;
  _BYTE v25[8];
  uint64_t v26;

  if (!*((_QWORD *)this + 3)
    || ((*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 2) + 408))(*((_QWORD *)this + 2)) & 1) != 0)
  {
    return 0;
  }
  if (*((_QWORD *)a3 + 10) == -1)
    v7 = 0;
  else
    v7 = *((_QWORD *)a3 + 10);
  re::AssetManager::fromPeerID(*((os_unfair_lock_s **)this + 2), v7, (uint64_t)v25);
  v8 = *((_QWORD *)this + 2);
  if (*((_QWORD *)a3 + 10) == -1)
    v9 = 0;
  else
    v9 = *((_QWORD *)a3 + 10);
  os_unfair_lock_lock((os_unfair_lock_t)(v8 + 64));
  re::AssetManager::lookupExistingAsset_assetTablesLocked((re::internal::AssetTypeRegistry **)v8, v9, v22);
  os_unfair_lock_unlock((os_unfair_lock_t)(v8 + 64));
  v19[0] = 0;
  if (v22[0])
  {
    if (v24 && (v10 = *(_QWORD *)(v24 + 24)) != 0)
      re::AssetManager::deviceAssetPath(v10, (uint64_t)&v23, 0, 12, &v16);
    else
      LOBYTE(v16) = 0;
    re::Optional<re::DynamicString>::operator=(v19, &v16);
    if ((_BYTE)v16 && v17 && (v18 & 1) != 0)
      (*(void (**)(void))(*(_QWORD *)v17 + 40))();
    if (v25[0])
      v11 = v26;
    else
      v11 = 0;
    v14[0] = v19[0];
    if (v19[0])
      re::DynamicString::DynamicString((re::DynamicString *)v15, (const re::DynamicString *)&v20);
  }
  else
  {
    if (v25[0])
      v11 = v26;
    else
      v11 = 0;
    v14[0] = 0;
  }
  if ((*((_QWORD *)a3 + 17) & 1) != 0)
    v12 = (char *)*((_QWORD *)a3 + 18);
  else
    v12 = (char *)a3 + 137;
  v6 = re::MaterialAssetLoader::doRegisterAsset(this, a2, v11, v14, (uint64_t)v12);
  if (v14[0] && v15[0])
  {
    if ((v15[1] & 1) != 0)
      (*(void (**)(void))(*(_QWORD *)v15[0] + 40))();
    memset(v15, 0, sizeof(v15));
  }
  if (v19[0] && v20 && (v21 & 1) != 0)
    (*(void (**)(void))(*(_QWORD *)v20 + 40))();
  if (v22[0])
    re::AssetHandle::~AssetHandle((re::AssetHandle *)&v23);
  return v6;
}

uint64_t re::MaterialAssetLoader::doRegisterAsset(_QWORD *a1, uint64_t a2, uint64_t a3, _BYTE *a4, uint64_t a5)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v11;
  uint64_t v12;
  re::AssetHandle **v13;
  re::AssetHandle **v14;
  uint64_t v15;
  int v16;
  int v17;
  uint64_t v18;
  re::AssetHandle *v19;
  uint64_t v20;
  unsigned int v21;
  re::TextureAsset *v22;
  uint64_t v23;
  uint64_t *v24;
  re *MaterialBuilder;
  int v26;
  NSObject *v27;
  re *v28;
  uint64_t v29;
  re *v30;
  uint64_t v31;
  unsigned int v32;
  uint64_t v33;
  int *v34;
  int v35;
  NSObject *v36;
  NSObject *v37;
  uint64_t v38;
  uint64_t v39;
  unsigned int v40;
  int v41;
  uint64_t v42;
  id v43;
  uint64_t *v44;
  uint64_t v45;
  int v46;
  _BYTE *v48;
  _BYTE *v49;
  _BYTE v50[1240];
  uint64_t v51;
  _BYTE v52[8];
  _QWORD v53[4];
  uint64_t v54;
  uint64_t v55;
  char v56;
  _BYTE v57[511];
  uint64_t v58[6];
  uint64_t v59[6];
  _QWORD v60[3];
  int v61;
  uint64_t v62;
  uint8_t buf[4];
  uint64_t v64;
  __int16 v65;
  _BYTE *v66;
  uint8_t v67[4];
  _BYTE v68[18];
  _BYTE *v69;
  uint64_t v70;
  uint64_t v71;
  unsigned int v72;
  uint64_t v73;

  v73 = *MEMORY[0x24BDAC8D0];
  v6 = *(_QWORD *)(a2 + 1664);
  if (v6)
  {
    v7 = 0;
    *(_QWORD *)(v6 + 1360) = a3;
    return v7;
  }
  v11 = a1[3];
  v12 = *(_QWORD *)(a2 + 1872);
  if (v12)
    goto LABEL_9;
  (*(void (**)(_QWORD *__return_ptr, _QWORD *, uint64_t))(*a1 + 160))(v60, a1, a2);
  if (v60[0])
  {
    if (v62)
      (*(void (**)(void))(*(_QWORD *)v60[0] + 40))();
    v62 = 0;
    memset(v60, 0, sizeof(v60));
    ++v61;
  }
  v12 = *(_QWORD *)(a2 + 1872);
  if (v12)
  {
LABEL_9:
    v13 = *(re::AssetHandle ***)(a2 + 1888);
    v14 = v13;
    while (*((_QWORD *)*v14 + 1))
    {
      if (++v14 == &v13[v12])
      {
        v15 = v11;
        v16 = 0;
        v17 = 0;
        v18 = 8 * v12;
        do
        {
          v19 = *v13;
          v20 = *((_QWORD *)*v13 + 1);
          if (v20)
          {
            v21 = atomic_load((unsigned int *)(v20 + 704));
            if (v21 != 2)
            {
              if (v21 == 3)
                return 2;
              re::AssetHandle::loadAsync(*v13);
              v23 = *((_QWORD *)v19 + 1);
              if (v23)
                v24 = *(uint64_t **)(v23 + 264);
              else
                v24 = 0;
              if (v24 == re::TextureAsset::assetType(v22))
                v17 = 1;
              else
                v16 = 1;
            }
          }
          ++v13;
          v18 -= 8;
        }
        while (v18);
        v11 = v15;
        if (v16)
          return 1;
        goto LABEL_26;
      }
    }
    return 2;
  }
  v17 = 0;
LABEL_26:
  if (*(_DWORD *)(a2 + 1560) == 8)
  {
    re::parseShaderParameterData(v11, a5, a2 + 64, (uint64_t)&v54);
    v52[0] = *a4;
    if (v52[0])
      re::DynamicString::DynamicString((re::DynamicString *)v53, (const re::DynamicString *)(a4 + 8));
    MaterialBuilder = re::makeMaterialBuilder((uint64_t **)v11, a2 + 8, v52, a3, &v54, (_DWORD *)(a2 + 1728), (uint64_t)v67);
    if (v52[0])
    {
      MaterialBuilder = (re *)v53[0];
      if (v53[0])
      {
        if ((v53[1] & 1) != 0)
          MaterialBuilder = (re *)(*(uint64_t (**)(void))(*(_QWORD *)v53[0] + 40))();
        memset(v53, 0, sizeof(v53));
      }
    }
    v26 = v67[0];
    if (v67[0])
    {
      re::MaterialBuilder::operator=(a2 + 416, (uint64_t)&v68[4]);
      re::HashTable<re::WeakStringID,re::ColorConstantTable::ColorValue,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,false,false>::operator=(a2 + 1680, v58);
      re::HashTable<re::DynamicString,re::ParameterBinding,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::operator=(a2 + 1808, v59);
    }
    else
    {
      v27 = *re::assetTypesLogObjects(MaterialBuilder);
      if (os_log_type_enabled(v27, OS_LOG_TYPE_ERROR))
      {
        if ((v68[12] & 1) != 0)
          v49 = v69;
        else
          v49 = &v68[13];
        *(_DWORD *)buf = 136315394;
        v64 = a5;
        v65 = 2080;
        v66 = v49;
        _os_log_error_impl(&dword_224FE9000, v27, OS_LOG_TYPE_ERROR, "Failed to prepare material builder '%s': %s.", buf, 0x16u);
      }
    }
    if (v67[0])
    {
      re::MaterialBuilder::~MaterialBuilder((re::MaterialBuilder *)&v68[4]);
    }
    else if (*(_QWORD *)&v68[4] && (v68[12] & 1) != 0)
    {
      (*(void (**)(void))(**(_QWORD **)&v68[4] + 40))();
    }
    re::HashTable<re::DynamicString,re::ParameterBinding,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::deinit(v59);
    re::HashTable<re::WeakStringID,re::ColorConstantTable::ColorValue,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,false,false>::deinit(v58);
    re::ShaderParameterTable::~ShaderParameterTable((re::ShaderParameterTable *)&v54);
    if (!v26)
      return 2;
  }
  re::MaterialBuilder::tickBuilder((re::MaterialBuilder *)(a2 + 416), (re::RenderManager *)v11, (uint64_t)&v54);
  if ((_BYTE)v54)
  {
    v7 = 1;
    if ((_DWORD)v55 && !v17)
    {
      re::parseTextureParameterData((_anonymous_namespace_ *)v11, a2 + 64, (uint64_t)v67);
      re::TextureParameterTable::operator=(a2 + 1032, (uint64_t *)v67);
      v29 = *(_QWORD *)(v11 + 24);
      re::MaterialBuilder::MaterialBuilder((uint64_t)v50, a2 + 416);
      re::MaterialManager::createMaterial(v29, (re::MaterialBuilder *)v50, &v51);
      re::MaterialBuilder::~MaterialBuilder((re::MaterialBuilder *)v50);
      v31 = v51;
      if (v51)
      {
        v32 = v72;
        if (v72)
        {
          v33 = 0;
          v34 = (int *)(v71 + 8);
          while (1)
          {
            v35 = *v34;
            v34 += 22;
            if (v35 < 0)
              break;
            if (v72 == ++v33)
            {
              LODWORD(v33) = v72;
              break;
            }
          }
        }
        else
        {
          LODWORD(v33) = 0;
        }
        if (v72 != (_DWORD)v33)
        {
          v38 = v33;
          v39 = v71;
          do
          {
            v30 = (re *)re::HashTable<re::DynamicString,re::ParameterBinding,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::add<re::ParameterBinding&>(a2 + 1808, (re::DynamicString *)(v39 + 88 * v38 + 16), v39 + 88 * v38 + 48);
            v39 = v71;
            if (v72 <= (int)v33 + 1)
              v40 = v33 + 1;
            else
              v40 = v72;
            v41 = v33;
            while (1)
            {
              v38 = (v41 + 1);
              if (v40 - 1 == v41)
                break;
              ++v41;
              LODWORD(v33) = v38;
              if ((*(_DWORD *)(v71 + 88 * v38 + 8) & 0x80000000) != 0)
                goto LABEL_69;
            }
            LODWORD(v33) = v40;
LABEL_69:
            ;
          }
          while (v32 != (_DWORD)v33);
          v31 = v51;
        }
        v42 = a2 + 1664;
        if (v31)
        {
          v43 = (id)(v31 + 8);
          re::SharedPtr<re::SkeletalPoseJointDefinition>::reset((uint64_t *)(a2 + 1664), v31);

        }
        else if (*(_QWORD *)v42)
        {

          *(_QWORD *)v42 = 0;
        }
        v44 = re::globalAllocators(v30);
        v45 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v44[2] + 32))(v44[2], 1008, 8);
        re::MaterialParameterBlock::MaterialParameterBlock((re::MaterialParameterBlock *)v45, (re::RenderManager *)v11);
        re::SharedPtr<re::SkeletalPoseJointDefinition>::reset((uint64_t *)(a2 + 1672), v45);
        if (v45)

        v46 = *(unsigned __int8 *)(a2 + 1730);
        if (v46 == 6)
        {
          re::copyCustomParamFlattenedNames((_QWORD *)(v51 + 168), (void **)(a2 + 1776), (void **)(a2 + 1784), (void **)(a2 + 1792), (void **)(a2 + 1800));
        }
        else if (v46 == 7)
        {
          re::copyShaderGraphParamNames((id *)(v51 + 168), (uint64_t)buf);
          re::DynamicArray<re::DataArray<re::RigGraphNode>::ElementBlock>::operator=(a2 + 1736, (uint64_t)buf);
          re::DynamicArray<NS::SharedPtr<MTL::SamplerState>>::deinit((uint64_t)buf);
        }
        v7 = 0;
      }
      else
      {
        v37 = *re::assetTypesLogObjects(v30);
        if (os_log_type_enabled(v37, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)buf = 136315138;
          v64 = a5;
          _os_log_impl(&dword_224FE9000, v37, OS_LOG_TYPE_DEFAULT, "failed to create material '%s'.", buf, 0xCu);
        }
        v7 = 2;
      }
      if (v51)

      re::HashTable<re::DynamicString,re::ParameterBinding,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::deinit(&v70);
      re::TextureParameterTable::~TextureParameterTable((re::TextureParameterTable *)v67);
    }
  }
  else
  {
    v36 = *re::graphicsLogObjects(v28);
    if (os_log_type_enabled(v36, OS_LOG_TYPE_ERROR))
    {
      if ((v56 & 1) != 0)
        v48 = *(_BYTE **)&v57[7];
      else
        v48 = v57;
      *(_DWORD *)v67 = 136315394;
      *(_QWORD *)v68 = a5;
      *(_WORD *)&v68[8] = 2080;
      *(_QWORD *)&v68[10] = v48;
      _os_log_error_impl(&dword_224FE9000, v36, OS_LOG_TYPE_ERROR, "Failed to create material '%s': %s", v67, 0x16u);
    }
    v7 = 2;
  }
  if (!(_BYTE)v54 && v55 && (v56 & 1) != 0)
    (*(void (**)(void))(*(_QWORD *)v55 + 40))();
  return v7;
}

uint64_t re::HashTable<re::DynamicString,re::ParameterBinding,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::operator=(uint64_t a1, uint64_t *a2)
{
  if ((uint64_t *)a1 != a2)
  {
    if (!*(_QWORD *)a1 || *(_QWORD *)a1 == *a2)
    {
      re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::swap((uint64_t *)a1, a2);
    }
    else if (*a2)
    {
      re::HashTable<re::DynamicString,re::ParameterBinding,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::copy(a1, (uint64_t)a2);
      ++*(_DWORD *)(a1 + 40);
    }
    else
    {
      re::HashTable<re::DynamicString,re::ParameterBinding,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::clear(a1);
    }
  }
  return a1;
}

uint64_t re::HashTable<re::DynamicString,re::ParameterBinding,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::add<re::ParameterBinding&>(uint64_t a1, re::DynamicString *a2, uint64_t a3)
{
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int v11;
  uint64_t v12;
  char v14;

  v6 = re::Hash<re::DynamicString>::operator()((uint64_t)&v14, (uint64_t)a2);
  v7 = v6;
  if (!*(_QWORD *)a1)
  {
    LODWORD(v8) = 0;
    goto LABEL_8;
  }
  v8 = v6 % *(unsigned int *)(a1 + 24);
  v9 = *(unsigned int *)(*(_QWORD *)(a1 + 8) + 4 * v8);
  if ((_DWORD)v9 == 0x7FFFFFFF)
  {
LABEL_8:
    v11 = re::HashTable<re::DynamicString,re::ParameterBinding,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::addAsCopy(a1, v8, v7, a2, a3);
    ++*(_DWORD *)(a1 + 40);
    v12 = *(_QWORD *)(a1 + 16) + 88 * v11;
    return v12 + 48;
  }
  v10 = *(_QWORD *)(a1 + 16);
  while (!re::DynamicString::operator==(v10 + 88 * v9 + 16, (uint64_t)a2))
  {
    v9 = *(_DWORD *)(v10 + 88 * v9 + 8) & 0x7FFFFFFF;
    if (v9 == 0x7FFFFFFF)
      goto LABEL_8;
  }
  v12 = v10 + 88 * v9;
  return v12 + 48;
}

void re::MaterialAssetLoader::unregisterAsset(re::MaterialAssetLoader *this, _QWORD *a2, const re::ExistingAssetInformation *a3)
{
  uint64_t v4;

  v4 = a2[208];
  if (v4)
  {

    a2[208] = 0;
  }
  re::MaterialBuilder::destroy((re::MaterialBuilder *)(a2 + 52));
  a2[234] = 0;
  ++*((_DWORD *)a2 + 470);
}

re *re::MaterialAssetLoader::unloadAsset(re *this, void (***a2)(_QWORD))
{
  uint64_t v3;

  if (a2)
  {
    v3 = re::globalAllocators(this)[2];
    (**a2)(a2);
    return (re *)(*(uint64_t (**)(uint64_t, void (***)(_QWORD)))(*(_QWORD *)v3 + 40))(v3, a2);
  }
  return this;
}

BOOL re::MaterialAssetLoader::isSupportedSourceExtension(re::MaterialAssetLoader *this, const char *a2)
{
  return !strcasecmp(a2, "rematerial") || strcasecmp(a2, "hmmaterial") == 0;
}

void *re::MaterialAssetLoader::findDependencies@<X0>(re::MaterialAssetLoader *this@<X0>, _QWORD *a2@<X1>, uint64_t a3@<X8>)
{
  unint64_t v5;
  void *result;
  uint64_t v7;
  re::AssetHandle **v8;
  uint64_t v9;
  re::AssetHandle *v10;
  _QWORD v11[3];
  int v12;
  uint64_t v13;

  if (!a2[234])
  {
    (*(void (**)(_QWORD *__return_ptr, re::MaterialAssetLoader *, _QWORD *))(*(_QWORD *)this + 160))(v11, this, a2);
    this = (re::MaterialAssetLoader *)v11[0];
    if (v11[0])
    {
      if (v13)
        this = (re::MaterialAssetLoader *)(*(uint64_t (**)(void))(*(_QWORD *)v11[0] + 40))();
      v13 = 0;
      memset(v11, 0, sizeof(v11));
      ++v12;
    }
  }
  v5 = a2[234];
  *(_QWORD *)(a3 + 32) = 0;
  *(_QWORD *)(a3 + 8) = 0;
  *(_QWORD *)(a3 + 16) = 0;
  *(_DWORD *)(a3 + 24) = 0;
  result = re::DynamicArray<re::AssetHandle>::setCapacity((_QWORD *)a3, v5);
  ++*(_DWORD *)(a3 + 24);
  v7 = a2[234];
  if (v7)
  {
    v8 = (re::AssetHandle **)a2[236];
    v9 = 8 * v7;
    do
    {
      v10 = *v8++;
      result = re::DynamicArray<re::AssetHandle>::add((_anonymous_namespace_ *)a3, v10);
      v9 -= 8;
    }
    while (v9);
  }
  return result;
}

_QWORD *re::MaterialAssetLoader::internalFindAssetHandleFields@<X0>(re::MaterialAssetLoader *this@<X0>, const re::IntrospectionBase **a2@<X1>, uint64_t a3@<X8>)
{
  unint64_t v5;
  _QWORD *result;
  uint64_t v7;
  unint64_t v8;
  _QWORD v9[5];

  v5 = (unint64_t)a2[234];
  if (!v5)
  {
    re::AssetLoader::internalFindAssetHandleFields(this, a2, (uint64_t)v9);
    re::DynamicArray<re::DataArray<re::RigGraphNode>::ElementBlock>::operator=((uint64_t)(a2 + 232), (uint64_t)v9);
    this = (re::MaterialAssetLoader *)v9[0];
    if (v9[0] && v9[4])
      this = (re::MaterialAssetLoader *)(*(uint64_t (**)(void))(*(_QWORD *)v9[0] + 40))();
    v5 = (unint64_t)a2[234];
  }
  *(_QWORD *)(a3 + 32) = 0;
  *(_QWORD *)(a3 + 8) = 0;
  *(_QWORD *)(a3 + 16) = 0;
  *(_DWORD *)(a3 + 24) = 0;
  result = re::DynamicArray<float *>::setCapacity((_QWORD *)a3, v5);
  ++*(_DWORD *)(a3 + 24);
  if (a2[234])
  {
    v7 = 0;
    v8 = 0;
    do
    {
      result = re::DynamicArray<re::TransitionCondition *>::add((_QWORD *)a3, (const re::IntrospectionBase *)((char *)a2[236] + v7));
      ++v8;
      v7 += 8;
    }
    while ((unint64_t)a2[234] > v8);
  }
  return result;
}

void re::MaterialAssetHelper::extractMaterialDataFromMaterialParameterBlocks(_QWORD *a1, _QWORD *a2, _QWORD *a3, uint64_t *a4, uint64_t *a5)
{
  unint64_t v10;
  unsigned int v11;
  uint64_t v12;
  re::MaterialParameterBlock *v13;
  uint64_t v14;

  re::FixedArray<unsigned long>::init<>(a4, (uint64_t)a1, a2[1]);
  re::FixedArray<unsigned long>::init<>(a5, (uint64_t)a1, a2[1]);
  if (a2[1])
  {
    v10 = 0;
    v11 = 1;
    do
    {
      v12 = re::AssetHandle::asset<re::MaterialAsset>((re::MaterialAsset *)(*a2 + 24 * v10));
      if (a4[1] <= v10)
      {
        os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_15:
        os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
      }
      *(_QWORD *)(a4[2] + 8 * v10) = *(_QWORD *)(v12 + 1664);
      if (a3[1] > v10
        && (v13 = *(re::MaterialParameterBlock **)(*a3 + 8 * v10)) != 0
        && !re::MaterialParameterBlock::isEmpty(*(re::MaterialParameterBlock **)(*a3 + 8 * v10)))
      {
        v14 = re::MaterialParameterBlock::deltaSynchronizedMaterialParameterTable(v13, a1);
        if (a5[1] <= v10)
        {
          os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
          _os_log_send_and_compose_impl();
          _os_crash_msg();
          __break(1u);
          return;
        }
      }
      else
      {
        if (a5[1] <= v10)
          goto LABEL_15;
        v14 = 0;
      }
      *(_QWORD *)(a5[2] + 8 * v10) = v14;
      v10 = v11;
    }
    while (a2[1] > (unint64_t)v11++);
  }
}

uint64_t re::AssetHandle::asset<re::MaterialAsset>(re::MaterialAsset *a1)
{
  uint64_t v2;
  NSObject *v3;
  _QWORD *v5;
  char *v6;
  int v7;
  char *v8;
  uint64_t v9;

  v9 = *MEMORY[0x24BDAC8D0];
  re::MaterialAsset::assetType(a1);
  v2 = re::AssetHandle::assetWithType(a1, (const re::AssetType *)&re::MaterialAsset::assetType(void)::type, 0);
  if (!v2)
  {
    v3 = *re::assetsLogObjects(0);
    if (os_log_type_enabled(v3, OS_LOG_TYPE_ERROR))
    {
      v5 = re::AssetHandle::assetInfo(a1);
      if ((v5[17] & 1) != 0)
        v6 = (char *)v5[18];
      else
        v6 = (char *)v5 + 137;
      v7 = 136315138;
      v8 = v6;
      _os_log_error_impl(&dword_224FE9000, v3, OS_LOG_TYPE_ERROR, "Invalid asset: '%s'", (uint8_t *)&v7, 0xCu);
    }
  }
  return v2;
}

void re::MaterialAssetHelper::extractMaterialDataFromMaterialParameterBlocks(_anonymous_namespace_ *a1, _QWORD *a2, uint64_t *a3, uint64_t *a4, uint64_t a5)
{
  unint64_t v10;
  unint64_t v11;
  _anonymous_namespace_ *v12;
  unint64_t v13;
  unsigned int v14;
  uint64_t v15;
  unint64_t v16;
  re::MaterialParameterBlock *v17;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  const char *v23;
  __int16 v24;
  int v25;
  __int16 v26;
  unint64_t v27;
  __int16 v28;
  unint64_t v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  uint64_t v35;

  v35 = *MEMORY[0x24BDAC8D0];
  v10 = *((_QWORD *)a1 + 1);
  v11 = *((_QWORD *)a1 + 1);
  if (*((_QWORD *)a1 + 1))
  {
    v13 = 0;
    v14 = 1;
    while (1)
    {
      v15 = re::AssetHandle::loadedAsset<re::MaterialAsset>((re::MaterialAsset *)(*(_QWORD *)a1 + 24 * v13));
      v16 = a3[1];
      if (v16 <= v13)
        break;
      *(_QWORD *)(a3[2] + 8 * v13) = *(_QWORD *)(v15 + 1664);
      if (a2[1] > v13
        && (v17 = *(re::MaterialParameterBlock **)(*a2 + 8 * v13)) != 0
        && !re::MaterialParameterBlock::isEmpty(*(re::MaterialParameterBlock **)(*a2 + 8 * v13)))
      {
        re::MaterialParameterBlock::createMaterialParameterTableIfNeeded(v17, &v20);
        v16 = a4[1];
        if (v16 <= v13)
          goto LABEL_16;
        v19 = v20;
        *(_QWORD *)(a4[2] + 8 * v13) = v20;
        *(_QWORD *)re::BucketArray<re::SharedPtr<re::MaterialParameterTable>,8ul>::addUninitialized(a5) = v19;
      }
      else
      {
        v16 = a4[1];
        if (v16 <= v13)
          goto LABEL_15;
        *(_QWORD *)(a4[2] + 8 * v13) = 0;
      }
      v13 = v14;
      if (*((_QWORD *)a1 + 1) <= (unint64_t)v14++)
        return;
    }
    v21 = 0;
    v33 = 0u;
    v34 = 0u;
    v31 = 0u;
    v32 = 0u;
    v30 = 0u;
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    v22 = 136315906;
    v23 = "operator[]";
    v24 = 1024;
    v25 = 468;
    v26 = 2048;
    v27 = v13;
    v28 = 2048;
    v29 = v16;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_15:
    v21 = 0;
    v33 = 0u;
    v34 = 0u;
    v31 = 0u;
    v32 = 0u;
    v30 = 0u;
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    v22 = 136315906;
    v23 = "operator[]";
    v24 = 1024;
    v25 = 468;
    v26 = 2048;
    v27 = v13;
    v28 = 2048;
    v29 = v16;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_16:
    v21 = 0;
    v33 = 0u;
    v34 = 0u;
    v31 = 0u;
    v32 = 0u;
    v30 = 0u;
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    v22 = 136315906;
    v23 = "operator[]";
    v24 = 1024;
    v25 = 468;
    v26 = 2048;
    v27 = v13;
    v28 = 2048;
    v29 = v16;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
}

void re::MaterialAssetHelper::extractMaterialDataFromMaterialAssetHandles(_QWORD *a1, _QWORD *a2, char a3, uint64_t *a4, uint64_t *a5)
{
  unint64_t v10;
  unsigned int v11;
  uint64_t v12;
  re::MaterialParameterBlock *v13;
  uint64_t v14;

  if (!*a4)
    re::FixedArray<unsigned long>::init<>(a4, (uint64_t)a1, a2[1]);
  if (!*a5)
    re::FixedArray<unsigned long>::init<>(a5, (uint64_t)a1, a2[1]);
  if (a2[1])
  {
    v10 = 0;
    v11 = 1;
    do
    {
      v12 = re::AssetHandle::loadedAsset<re::MaterialAsset>((re::MaterialAsset *)(*a2 + 24 * v10));
      if (a4[1] <= v10)
      {
        os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_16:
        os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_17:
        os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
      }
      *(_QWORD *)(a4[2] + 8 * v10) = *(_QWORD *)(v12 + 1664);
      if ((a3 & 1) != 0
        || (v13 = *(re::MaterialParameterBlock **)(v12 + 1672), re::MaterialParameterBlock::isEmpty(v13)))
      {
        if (a5[1] <= v10)
          goto LABEL_16;
        v14 = 0;
      }
      else
      {
        v14 = re::MaterialParameterBlock::deltaSynchronizedMaterialParameterTable(v13, a1);
        if (a5[1] <= v10)
          goto LABEL_17;
      }
      *(_QWORD *)(a5[2] + 8 * v10) = v14;
      v10 = v11;
    }
    while (a2[1] > (unint64_t)v11++);
  }
}

void re::MaterialAssetHelper::extractMaterialDataFromMaterialAssetHandles(_anonymous_namespace_ *a1, char a2, uint64_t *a3, uint64_t *a4, uint64_t a5)
{
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unsigned int v13;
  uint64_t v14;
  unint64_t v15;
  re::MaterialParameterBlock *v16;
  uint64_t v17;
  uint64_t v19;
  uint64_t v20;
  int v21;
  const char *v22;
  __int16 v23;
  int v24;
  __int16 v25;
  unint64_t v26;
  __int16 v27;
  unint64_t v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  uint64_t v34;

  v34 = *MEMORY[0x24BDAC8D0];
  if (!*a3)
  {
    v10 = *((_QWORD *)a1 + 1);
  }
  if (!*a4)
  {
    v11 = *((_QWORD *)a1 + 1);
  }
  if (*((_QWORD *)a1 + 1))
  {
    v12 = 0;
    v13 = 1;
    do
    {
      v14 = re::AssetHandle::loadedAsset<re::MaterialAsset>((re::MaterialAsset *)(*(_QWORD *)a1 + 24 * v12));
      v15 = a3[1];
      if (v15 <= v12)
      {
        v20 = 0;
        v32 = 0u;
        v33 = 0u;
        v30 = 0u;
        v31 = 0u;
        v29 = 0u;
        os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        v21 = 136315906;
        v22 = "operator[]";
        v23 = 1024;
        v24 = 468;
        v25 = 2048;
        v26 = v12;
        v27 = 2048;
        v28 = v15;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_17:
        v20 = 0;
        v32 = 0u;
        v33 = 0u;
        v30 = 0u;
        v31 = 0u;
        v29 = 0u;
        os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        v21 = 136315906;
        v22 = "operator[]";
        v23 = 1024;
        v24 = 468;
        v25 = 2048;
        v26 = v12;
        v27 = 2048;
        v28 = v15;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_18:
        v20 = 0;
        v32 = 0u;
        v33 = 0u;
        v30 = 0u;
        v31 = 0u;
        v29 = 0u;
        os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        v21 = 136315906;
        v22 = "operator[]";
        v23 = 1024;
        v24 = 468;
        v25 = 2048;
        v26 = v12;
        v27 = 2048;
        v28 = v15;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
      }
      *(_QWORD *)(a3[2] + 8 * v12) = *(_QWORD *)(v14 + 1664);
      if ((a2 & 1) != 0
        || (v16 = *(re::MaterialParameterBlock **)(v14 + 1672), re::MaterialParameterBlock::isEmpty(v16)))
      {
        v15 = a4[1];
        if (v15 <= v12)
          goto LABEL_17;
        *(_QWORD *)(a4[2] + 8 * v12) = 0;
      }
      else
      {
        re::MaterialParameterBlock::createMaterialParameterTableIfNeeded(v16, &v19);
        v15 = a4[1];
        if (v15 <= v12)
          goto LABEL_18;
        v17 = v19;
        *(_QWORD *)(a4[2] + 8 * v12) = v19;
        *(_QWORD *)re::BucketArray<re::SharedPtr<re::MaterialParameterTable>,8ul>::addUninitialized(a5) = v17;
      }
      v12 = v13;
    }
    while (*((_QWORD *)a1 + 1) > (unint64_t)v13++);
  }
}

void re::MaterialAssetHelper::extractMaterialDataFromMeshInstanceParameterBlocks(_anonymous_namespace_ *a1, _QWORD *a2, uint64_t *a3, uint64_t a4)
{
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unsigned int v11;
  re::MaterialParameterBlock *v12;
  unint64_t v13;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  const char *v19;
  __int16 v20;
  int v21;
  __int16 v22;
  unint64_t v23;
  __int16 v24;
  unint64_t v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  uint64_t v31;

  v31 = *MEMORY[0x24BDAC8D0];
  v8 = *((_QWORD *)a1 + 1);
  v9 = *((_QWORD *)a1 + 1);
  if (v9)
  {
    v10 = 0;
    v11 = 1;
    do
    {
      if (a2[1] > v10
        && (v12 = *(re::MaterialParameterBlock **)(*a2 + 8 * v10)) != 0
        && !re::MaterialParameterBlock::isEmpty(*(re::MaterialParameterBlock **)(*a2 + 8 * v10)))
      {
        re::MaterialParameterBlock::createMaterialParameterTableIfNeeded(v12, &v16);
        v13 = a3[1];
        if (v13 <= v10)
          goto LABEL_14;
        v15 = v16;
        *(_QWORD *)(a3[2] + 8 * v10) = v16;
        *(_QWORD *)re::BucketArray<re::SharedPtr<re::MaterialParameterTable>,8ul>::addUninitialized(a4) = v15;
        v9 = *((_QWORD *)a1 + 1);
      }
      else
      {
        v13 = a3[1];
        if (v13 <= v10)
        {
          v17 = 0;
          v29 = 0u;
          v30 = 0u;
          v27 = 0u;
          v28 = 0u;
          v26 = 0u;
          os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
          v18 = 136315906;
          v19 = "operator[]";
          v20 = 1024;
          v21 = 468;
          v22 = 2048;
          v23 = v10;
          v24 = 2048;
          v25 = v13;
          _os_log_send_and_compose_impl();
          _os_crash_msg();
          __break(1u);
LABEL_14:
          v17 = 0;
          v29 = 0u;
          v30 = 0u;
          v27 = 0u;
          v28 = 0u;
          v26 = 0u;
          os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
          v18 = 136315906;
          v19 = "operator[]";
          v20 = 1024;
          v21 = 468;
          v22 = 2048;
          v23 = v10;
          v24 = 2048;
          v25 = v13;
          _os_log_send_and_compose_impl();
          _os_crash_msg();
          __break(1u);
        }
        *(_QWORD *)(a3[2] + 8 * v10) = 0;
      }
      v10 = v11;
    }
    while (v9 > v11++);
  }
}

double re::downgradeMaterialAssetFromFall2023@<D0>(re *this@<X0>, _BYTE *a2@<X8>)
{
  return re::downgradeShaderParameterDataFromSpring2023((uint64_t)this + 64, a2);
}

uint64_t *re::allocInfo_MaterialAsset(re *this)
{
  unsigned __int8 v1;

  v1 = atomic_load((unsigned __int8 *)&_MergedGlobals_74);
  if ((v1 & 1) == 0 && __cxa_guard_acquire(&_MergedGlobals_74))
  {
    ArcSharedObject::ArcSharedObject((ArcSharedObject *)&qword_2540FF138, 0);
    *(uint64_t *)((char *)&qword_2540FF148 + 6) = 0;
    qword_2540FF148 = 0;
    qword_2540FF158 = 0;
    qword_2540FF160 = 0xFFFFFFFFLL;
    qword_2540FF138 = (uint64_t)&off_24ED7DAA8;
    qword_2540FF168 = (uint64_t)"MaterialAsset";
    dword_2540FF170 = 0;
    xmmword_2540FF178 = 0u;
    unk_2540FF188 = 0u;
    xmmword_2540FF198 = 0u;
    qword_2540FF1A8 = 0;
    __cxa_guard_release(&_MergedGlobals_74);
  }
  return &qword_2540FF138;
}

void re::initInfo_MaterialAsset(re *this, re::IntrospectionBase *a2)
{
  const re::IntrospectionBase *v3;
  unsigned __int8 v4;
  re *v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  __int128 v11;
  _QWORD v12[2];
  __int128 v13;

  v12[0] = 0xDA7FDB21D2F3CBD2;
  v12[1] = "MaterialAsset";
  re::StringID::destroyString((re::StringID *)v12);
  *((_OWORD *)this + 2) = v13;
  v4 = atomic_load((unsigned __int8 *)&qword_2540FF120);
  if ((v4 & 1) == 0)
  {
    v5 = (re *)__cxa_guard_acquire(&qword_2540FF120);
    if ((_DWORD)v5)
    {
      v6 = re::introspectionAllocator(v5);
      v7 = re::introspect_MaterialFile((re::IntrospectionBase **)1);
      v8 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v6 + 32))(v6, 72, 8);
      *(_DWORD *)v8 = 1;
      *(_QWORD *)(v8 + 8) = "materialFile";
      *(_QWORD *)(v8 + 16) = v7;
      *(_QWORD *)(v8 + 24) = 0;
      *(_QWORD *)(v8 + 32) = 0x800000001;
      *(_DWORD *)(v8 + 40) = 0;
      *(_QWORD *)(v8 + 48) = 0;
      *(_QWORD *)(v8 + 56) = 0;
      *(_DWORD *)(v8 + 64) = 0;
      qword_2540FF128 = v8;
      v9 = re::introspectionAllocator((re *)v8);
      v10 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v9 + 32))(v9, 64, 8);
      *(_DWORD *)v10 = 6;
      *(_QWORD *)(v10 + 8) = 1;
      *(_QWORD *)(v10 + 16) = 0;
      *(_QWORD *)(v10 + 24) = 0;
      *(_QWORD *)(v10 + 32) = 0;
      *(_BYTE *)(v10 + 40) = 1;
      *(_QWORD *)(v10 + 48) = re::downgradeMaterialAssetFromFall2023;
      *(_DWORD *)(v10 + 56) = 2;
      qword_2540FF130 = v10;
      __cxa_guard_release(&qword_2540FF120);
    }
  }
  *((_QWORD *)this + 2) = 0x76800000008;
  *((_DWORD *)this + 6) = 8;
  *((_WORD *)this + 14) = 0;
  *((_DWORD *)this + 14) = 2;
  *((_QWORD *)this + 8) = &qword_2540FF128;
  *((_QWORD *)this + 9) = re::internal::defaultConstruct<re::MaterialAsset>;
  *((_QWORD *)this + 10) = re::internal::defaultDestruct<re::MaterialAsset>;
  *((_QWORD *)this + 11) = 0;
  *((_QWORD *)this + 12) = 0;
  *((_QWORD *)this + 13) = re::internal::defaultConstructV2<re::MaterialAsset>;
  *((_QWORD *)this + 14) = re::internal::defaultDestructV2<re::MaterialAsset>;
  re::IntrospectionRegistry::add(this, v3);
  v11 = v13;
}

re::MaterialAsset *re::internal::defaultConstruct<re::MaterialAsset>(int a1, int a2, re::MaterialAsset *this)
{
  return re::MaterialAsset::MaterialAsset(this);
}

uint64_t re::internal::defaultDestruct<re::MaterialAsset>(uint64_t a1, uint64_t a2, uint64_t (***a3)(_QWORD))
{
  return (**a3)(a3);
}

uint64_t re::internal::defaultDestructV2<re::MaterialAsset>(uint64_t (***a1)(_QWORD))
{
  return (**a1)(a1);
}

uint64_t re::introspect_MaterialAsset(re::IntrospectionBase **this)
{
  return re::internal::getOrCreateInfo((re::internal *)"MaterialAsset", (uint64_t (*)(re::internal *))re::allocInfo_MaterialAsset, (re::IntrospectionBase *(*)(void))re::initInfo_MaterialAsset, (void (*)(re::IntrospectionBase *))&re::internal::introspectionInfoStorage<re::MaterialAsset>, this);
}

void re::MaterialAssetLoader::~MaterialAssetLoader(re::MaterialAssetLoader *this)
{
  re::AssetHandle *v2;

  *(_QWORD *)this = &off_24ED36608;
  v2 = (re::MaterialAssetLoader *)((char *)this + 32);
  re::AssetHandle::~AssetHandle((re::MaterialAssetLoader *)((char *)this + 80));
  re::AssetHandle::~AssetHandle((re::MaterialAssetLoader *)((char *)this + 56));
  re::AssetHandle::~AssetHandle(v2);
}

{
  re::AssetHandle *v2;

  *(_QWORD *)this = &off_24ED36608;
  v2 = (re::MaterialAssetLoader *)((char *)this + 32);
  re::AssetHandle::~AssetHandle((re::MaterialAssetLoader *)((char *)this + 80));
  re::AssetHandle::~AssetHandle((re::MaterialAssetLoader *)((char *)this + 56));
  re::AssetHandle::~AssetHandle(v2);
  JUMPOUT(0x2276933B8);
}

re::MaterialAsset *re::MaterialAsset::MaterialAsset(re::MaterialAsset *this)
{
  char *v2;

  *(_QWORD *)this = &off_24ED36770;
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 8) = 0u;
  v2 = (char *)this + 8;
  re::DynamicString::setCapacity(v2, 0);
  *(_OWORD *)((char *)this + 84) = 0u;
  *(_OWORD *)((char *)this + 72) = 0u;
  *(_OWORD *)((char *)this + 56) = 0u;
  *(_OWORD *)((char *)this + 40) = 0u;
  *(_QWORD *)((char *)this + 100) = 0x7FFFFFFFLL;
  *((_OWORD *)this + 7) = 0u;
  *((_OWORD *)this + 8) = 0u;
  *((_DWORD *)this + 36) = 0;
  *(_QWORD *)((char *)this + 148) = 0x7FFFFFFFLL;
  *((_OWORD *)this + 10) = 0u;
  *((_OWORD *)this + 11) = 0u;
  *((_DWORD *)this + 48) = 0;
  *(_QWORD *)((char *)this + 196) = 0x7FFFFFFFLL;
  *((_OWORD *)this + 13) = 0u;
  *((_OWORD *)this + 14) = 0u;
  *((_DWORD *)this + 60) = 0;
  *(_QWORD *)((char *)this + 244) = 0x7FFFFFFFLL;
  *((_OWORD *)this + 16) = 0u;
  *((_OWORD *)this + 17) = 0u;
  *((_DWORD *)this + 72) = 0;
  *(_QWORD *)((char *)this + 292) = 0x7FFFFFFFLL;
  *((_OWORD *)this + 19) = 0u;
  *((_OWORD *)this + 20) = 0u;
  *((_DWORD *)this + 84) = 0;
  *(_QWORD *)((char *)this + 340) = 0x7FFFFFFFLL;
  *((_BYTE *)this + 352) = 0;
  *((_BYTE *)this + 354) = 0;
  *((_BYTE *)this + 356) = 0;
  *((_BYTE *)this + 358) = 0;
  *((_BYTE *)this + 360) = 0;
  *((_BYTE *)this + 362) = 0;
  *((_BYTE *)this + 364) = 0;
  *((_BYTE *)this + 366) = 0;
  *((_BYTE *)this + 368) = 0;
  *((_QWORD *)this + 51) = 0;
  *((_QWORD *)this + 49) = 0;
  *((_DWORD *)this + 100) = 0;
  *((_OWORD *)v2 + 23) = 0u;
  re::MaterialBuilder::MaterialBuilder((re::MaterialAsset *)((char *)this + 416));
  *((_BYTE *)this + 1656) = 0;
  *((_OWORD *)this + 104) = 0u;
  *((_OWORD *)this + 105) = 0u;
  *((_OWORD *)this + 106) = 0u;
  *((_DWORD *)this + 428) = 0;
  *(_QWORD *)((char *)this + 1716) = 0x7FFFFFFFLL;
  *((_QWORD *)this + 217) = 0;
  *((_OWORD *)this + 109) = 0u;
  *((_DWORD *)this + 440) = 0;
  *(_OWORD *)((char *)this + 1768) = 0u;
  *(_OWORD *)((char *)this + 1784) = 0u;
  *(_OWORD *)((char *)this + 1800) = 0u;
  *(_OWORD *)((char *)this + 1816) = 0u;
  *(_OWORD *)((char *)this + 1828) = 0u;
  *(_QWORD *)((char *)this + 1844) = 0x7FFFFFFFLL;
  *((_QWORD *)this + 236) = 0;
  *((_QWORD *)this + 234) = 0;
  *((_DWORD *)this + 470) = 0;
  *((_OWORD *)this + 116) = 0u;
  return this;
}

void re::MaterialAsset::~MaterialAsset(re::MaterialAsset *this)
{
  re::MaterialAsset::~MaterialAsset(this);
  JUMPOUT(0x2276933B8);
}

{
  uint64_t v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  double v9;
  double v10;
  uint64_t v11;

  *(_QWORD *)this = &off_24ED36770;
  v2 = *((_QWORD *)this + 232);
  if (v2)
  {
    if (*((_QWORD *)this + 236))
      (*(void (**)(uint64_t))(*(_QWORD *)v2 + 40))(v2);
    *((_QWORD *)this + 236) = 0;
    *((_QWORD *)this + 233) = 0;
    *((_QWORD *)this + 234) = 0;
    *((_QWORD *)this + 232) = 0;
    ++*((_DWORD *)this + 470);
  }
  re::HashTable<re::DynamicString,re::ParameterBinding,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::deinit((uint64_t *)this + 226);
  v3 = (void *)*((_QWORD *)this + 225);
  if (v3)
  {

    *((_QWORD *)this + 225) = 0;
  }
  v4 = (void *)*((_QWORD *)this + 224);
  if (v4)
  {

    *((_QWORD *)this + 224) = 0;
  }
  v5 = (void *)*((_QWORD *)this + 223);
  if (v5)
  {

    *((_QWORD *)this + 223) = 0;
  }
  v6 = (void *)*((_QWORD *)this + 222);
  if (v6)
  {

    *((_QWORD *)this + 222) = 0;
  }
  re::DynamicArray<NS::SharedPtr<MTL::SamplerState>>::deinit((uint64_t)this + 1736);
  re::HashTable<re::WeakStringID,re::ColorConstantTable::ColorValue,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,false,false>::deinit((uint64_t *)this + 210);
  v7 = *((_QWORD *)this + 209);
  if (v7)
  {

    *((_QWORD *)this + 209) = 0;
  }
  v8 = *((_QWORD *)this + 208);
  if (v8)
  {

    *((_QWORD *)this + 208) = 0;
  }
  re::MaterialBuilder::~MaterialBuilder((re::MaterialAsset *)((char *)this + 416));
  re::DynamicArray<re::FunctionLink>::deinit((uint64_t)this + 376, v9);
  v10 = re::HashTable<re::DynamicString,re::DynamicString,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::deinit((uint64_t *)this + 38);
  re::HashTable<re::DynamicString,re::OptionalMaterialSamplerData,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::deinit((uint64_t *)this + 32, v10);
  re::HashTable<re::DynamicString,re::MaterialTextureBlockData,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::deinit((uint64_t *)this + 26);
  re::HashTable<re::DynamicString,re::MaterialTextureParam,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::deinit((uint64_t *)this + 20);
  re::HashTable<re::DynamicString,re::DynamicString,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::deinit((uint64_t *)this + 14);
  re::HashTable<re::DynamicString,re::DynamicString,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::deinit((uint64_t *)this + 8);
  re::AssetHandle::~AssetHandle((re::MaterialAsset *)((char *)this + 40));
  v11 = *((_QWORD *)this + 1);
  if (v11)
  {
    if ((*((_BYTE *)this + 16) & 1) != 0)
      (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v11 + 40))(v11, *((_QWORD *)this + 3));
    *(_OWORD *)((char *)this + 8) = 0u;
    *(_OWORD *)((char *)this + 24) = 0u;
  }
}

double re::HashTable<re::DynamicString,re::ParameterBinding,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::deinit(uint64_t *a1)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  double result;

  v2 = *a1;
  if (v2)
  {
    if (*((_DWORD *)a1 + 8))
    {
      v3 = 0;
      v4 = 0;
      do
      {
        re::HashTable<re::DynamicString,re::ParameterBinding,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::EntryWithHash::free(a1[2] + v3);
        ++v4;
        v3 += 88;
      }
      while (v4 < *((unsigned int *)a1 + 8));
      v2 = *a1;
    }
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v2 + 40))(v2, a1[1]);
    *((_DWORD *)a1 + 8) = 0;
    *(_OWORD *)a1 = 0u;
    *((_OWORD *)a1 + 1) = 0u;
    *(_QWORD *)&result = 0x7FFFFFFFLL;
    *(uint64_t *)((char *)a1 + 36) = 0x7FFFFFFFLL;
  }
  return result;
}

void re::HashTable<re::DynamicString,re::ParameterBinding,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::EntryWithHash::free(uint64_t a1)
{
  int v1;
  uint64_t v3;
  _OWORD *v4;

  v1 = *(_DWORD *)(a1 + 8);
  if (v1 < 0)
  {
    v4 = (_OWORD *)(a1 + 16);
    v3 = *(_QWORD *)(a1 + 16);
    *((_DWORD *)v4 - 2) = v1 & 0x7FFFFFFF;
    if (v3)
    {
      if ((*(_BYTE *)(a1 + 24) & 1) != 0)
        (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v3 + 40))(v3, *(_QWORD *)(a1 + 32));
      *v4 = 0u;
      v4[1] = 0u;
    }
    re::StringID::destroyString((re::StringID *)(a1 + 72));
    *(_QWORD *)(a1 + 56) = 0;
  }
}

double re::HashTable<re::WeakStringID,re::ColorConstantTable::ColorValue,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,false,false>::deinit(uint64_t *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  uint64_t v8;
  double result;

  v2 = *a1;
  if (v2)
  {
    v3 = *((unsigned int *)a1 + 8);
    if ((_DWORD)v3)
    {
      v4 = 0;
      v5 = 40 * v3;
      do
      {
        v6 = a1[2];
        v7 = *(_DWORD *)(v6 + v4);
        if (v7 < 0)
        {
          v8 = v6 + v4;
          *(_DWORD *)v8 = v7 & 0x7FFFFFFF;
          *(_QWORD *)(v8 + 8) = 0;
        }
        v4 += 40;
      }
      while (v5 != v4);
    }
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v2 + 40))(v2, a1[1]);
    *((_DWORD *)a1 + 8) = 0;
    *(_OWORD *)a1 = 0u;
    *((_OWORD *)a1 + 1) = 0u;
    *(_QWORD *)&result = 0x7FFFFFFFLL;
    *(uint64_t *)((char *)a1 + 36) = 0x7FFFFFFFLL;
  }
  return result;
}

uint64_t re::DynamicArray<re::FunctionLink>::deinit(uint64_t a1, double a2)
{
  uint64_t result;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  double v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _OWORD *v18;
  uint64_t v19;

  result = *(_QWORD *)a1;
  if (result)
  {
    v4 = *(_QWORD *)(a1 + 32);
    if (v4)
    {
      v5 = *(_QWORD *)(a1 + 16);
      if (v5)
      {
        v6 = 0;
        v7 = 272 * v5;
        do
        {
          v8 = (_QWORD *)(v4 + v6);
          v9 = *(_QWORD *)(v4 + v6 + 232);
          if (v9)
          {
            if (v8[33])
              (*(void (**)(uint64_t))(*(_QWORD *)v9 + 40))(v9);
            v8[33] = 0;
            *(_QWORD *)(v4 + v6 + 240) = 0;
            *(_QWORD *)(v4 + v6 + 248) = 0;
            *(_QWORD *)(v4 + v6 + 232) = 0;
            ++*(_DWORD *)(v4 + v6 + 256);
          }
          re::HashTable<re::DynamicString,re::ConstantDataEntry,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::deinit(v8 + 23, a2);
          v10 = re::HashTable<re::DynamicString,re::DynamicString,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::deinit(v8 + 17);
          v13 = v8[12];
          v12 = v8 + 12;
          v11 = v13;
          if (v13)
          {
            v14 = v4 + v6;
            if (*(_QWORD *)(v4 + v6 + 128))
              (*(void (**)(uint64_t, double))(*(_QWORD *)v11 + 40))(v11, v10);
            *(_QWORD *)(v14 + 128) = 0;
            v12[1] = 0;
            v12[2] = 0;
            *v12 = 0;
            ++*(_DWORD *)(v14 + 120);
          }
          v15 = v4 + v6;
          re::AssetHandle::~AssetHandle((re::AssetHandle *)(v4 + v6 + 72));
          v16 = *(_QWORD *)(v4 + v6 + 40);
          if (v16)
          {
            if ((*(_BYTE *)(v15 + 48) & 1) != 0)
              (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v16 + 40))(v16, *(_QWORD *)(v4 + v6 + 56));
            a2 = 0.0;
            *(_OWORD *)(v15 + 40) = 0u;
            *(_OWORD *)(v15 + 56) = 0u;
          }
          v19 = *(_QWORD *)(v15 + 8);
          v18 = (_OWORD *)(v15 + 8);
          v17 = v19;
          if (v19)
          {
            if ((*(_BYTE *)(v4 + v6 + 16) & 1) != 0)
              (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v17 + 40))(v17, *(_QWORD *)(v4 + v6 + 24));
            a2 = 0.0;
            *v18 = 0u;
            v18[1] = 0u;
          }
          v6 += 272;
        }
        while (v7 != v6);
        result = *(_QWORD *)a1;
        v4 = *(_QWORD *)(a1 + 32);
      }
      result = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)result + 40))(result, v4);
    }
    *(_QWORD *)(a1 + 32) = 0;
    *(_QWORD *)(a1 + 8) = 0;
    *(_QWORD *)(a1 + 16) = 0;
    *(_QWORD *)a1 = 0;
    ++*(_DWORD *)(a1 + 24);
  }
  return result;
}

double re::HashTable<re::DynamicString,re::ConstantDataEntry,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::deinit(uint64_t *a1, double result)
{
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  __n128 v7;
  uint64_t v8;
  __n128 *v9;
  int v10;
  uint64_t v11;
  __n128 *v12;
  uint64_t v13;

  v3 = *a1;
  if (v3)
  {
    v4 = *((unsigned int *)a1 + 8);
    if ((_DWORD)v4)
    {
      v5 = 0;
      v6 = 0;
      v7 = 0uLL;
      do
      {
        v8 = a1[2];
        v9 = (__n128 *)(v8 + v5);
        v10 = *(_DWORD *)(v8 + v5 + 8);
        if (v10 < 0)
        {
          v9->n128_u32[2] = v10 & 0x7FFFFFFF;
          v13 = v9[1].n128_i64[0];
          v12 = v9 + 1;
          v11 = v13;
          if (v13)
          {
            if ((*(_BYTE *)(v8 + v5 + 24) & 1) != 0)
            {
              (*(void (**)(uint64_t, _QWORD, __n128))(*(_QWORD *)v11 + 40))(v11, *(_QWORD *)(v8 + v5 + 32), v7);
              v7 = 0uLL;
            }
            *v12 = v7;
            v12[1] = v7;
            v4 = *((unsigned int *)a1 + 8);
          }
        }
        ++v6;
        v5 += 64;
      }
      while (v6 < v4);
      v3 = *a1;
    }
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v3 + 40))(v3, a1[1]);
    *((_DWORD *)a1 + 8) = 0;
    *(_OWORD *)a1 = 0u;
    *((_OWORD *)a1 + 1) = 0u;
    *(_QWORD *)&result = 0x7FFFFFFFLL;
    *(uint64_t *)((char *)a1 + 36) = 0x7FFFFFFFLL;
  }
  return result;
}

double re::HashTable<re::DynamicString,re::OptionalMaterialSamplerData,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::deinit(uint64_t *a1, double result)
{
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  __n128 v7;
  uint64_t v8;
  __n128 *v9;
  int v10;
  uint64_t v11;
  __n128 *v12;
  uint64_t v13;

  v3 = *a1;
  if (v3)
  {
    v4 = *((unsigned int *)a1 + 8);
    if ((_DWORD)v4)
    {
      v5 = 0;
      v6 = 0;
      v7 = 0uLL;
      do
      {
        v8 = a1[2];
        v9 = (__n128 *)(v8 + v5);
        v10 = *(_DWORD *)(v8 + v5 + 8);
        if (v10 < 0)
        {
          v9->n128_u32[2] = v10 & 0x7FFFFFFF;
          v13 = v9[1].n128_i64[0];
          v12 = v9 + 1;
          v11 = v13;
          if (v13)
          {
            if ((*(_BYTE *)(v8 + v5 + 24) & 1) != 0)
            {
              (*(void (**)(uint64_t, _QWORD, __n128))(*(_QWORD *)v11 + 40))(v11, *(_QWORD *)(v8 + v5 + 32), v7);
              v7 = 0uLL;
            }
            *v12 = v7;
            v12[1] = v7;
            v4 = *((unsigned int *)a1 + 8);
          }
        }
        ++v6;
        v5 += 152;
      }
      while (v6 < v4);
      v3 = *a1;
    }
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v3 + 40))(v3, a1[1]);
    *((_DWORD *)a1 + 8) = 0;
    *(_OWORD *)a1 = 0u;
    *((_OWORD *)a1 + 1) = 0u;
    *(_QWORD *)&result = 0x7FFFFFFFLL;
    *(uint64_t *)((char *)a1 + 36) = 0x7FFFFFFFLL;
  }
  return result;
}

double re::HashTable<re::DynamicString,re::MaterialTextureBlockData,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::deinit(uint64_t *a1)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  double result;

  v2 = *a1;
  if (v2)
  {
    if (*((_DWORD *)a1 + 8))
    {
      v3 = 0;
      v4 = 0;
      do
      {
        re::HashTable<re::DynamicString,re::MaterialTextureBlockData,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::EntryWithHash::free(a1[2] + v3);
        ++v4;
        v3 += 160;
      }
      while (v4 < *((unsigned int *)a1 + 8));
      v2 = *a1;
    }
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v2 + 40))(v2, a1[1]);
    *((_DWORD *)a1 + 8) = 0;
    *(_OWORD *)a1 = 0u;
    *((_OWORD *)a1 + 1) = 0u;
    *(_QWORD *)&result = 0x7FFFFFFFLL;
    *(uint64_t *)((char *)a1 + 36) = 0x7FFFFFFFLL;
  }
  return result;
}

uint64_t re::HashTable<re::DynamicString,re::MaterialTextureBlockData,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::EntryWithHash::free(uint64_t result)
{
  int v1;
  uint64_t v2;
  uint64_t v3;
  _OWORD *v4;
  uint64_t v5;
  uint64_t v6;
  char v7;

  v1 = *(_DWORD *)(result + 8);
  if (v1 < 0)
  {
    v2 = result;
    v4 = (_OWORD *)(result + 16);
    v3 = *(_QWORD *)(result + 16);
    *((_DWORD *)v4 - 2) = v1 & 0x7FFFFFFF;
    if (v3)
    {
      if ((*(_BYTE *)(v2 + 24) & 1) != 0)
        (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v3 + 40))(v3, *(_QWORD *)(v2 + 32));
      *v4 = 0u;
      v4[1] = 0u;
    }
    v5 = *(_QWORD *)(v2 + 120);
    if (v5)
    {
      if ((*(_BYTE *)(v2 + 128) & 1) != 0)
        (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v5 + 40))(v5, *(_QWORD *)(v2 + 136));
      *(_OWORD *)(v2 + 120) = 0u;
      *(_OWORD *)(v2 + 136) = 0u;
    }
    result = *(_QWORD *)(v2 + 88);
    if (result)
    {
      if ((*(_BYTE *)(v2 + 96) & 1) != 0)
        result = (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)result + 40))(result, *(_QWORD *)(v2 + 104));
      *(_OWORD *)(v2 + 88) = 0u;
      *(_OWORD *)(v2 + 104) = 0u;
    }
    v6 = *(unsigned int *)(v2 + 80);
    if ((_DWORD)v6 != -1)
      result = ((uint64_t (*)(char *, uint64_t))*(&off_24ED36750 + v6))(&v7, v2 + 48);
    *(_DWORD *)(v2 + 80) = -1;
  }
  return result;
}

double _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8nn180100IOZNS0_6__dtorINS0_8__traitsIJN2re13DynamicStringENS8_11AssetHandleEEEELNS0_6_TraitE1EE9__destroyB8nn180100EvEUlRT_E_JRNS0_6__baseILSC_1EJS9_SA_EEEEEEDcSE_DpT0_(uint64_t a1, _QWORD *a2)
{
  double result;

  if (*a2)
  {
    if ((a2[1] & 1) != 0)
      (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)*a2 + 40))(*a2, a2[2]);
    result = 0.0;
    *(_OWORD *)a2 = 0u;
    *((_OWORD *)a2 + 1) = 0u;
  }
  return result;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1EEE10__dispatchB8nn180100IOZNS0_6__dtorINS0_8__traitsIJN2re13DynamicStringENS8_11AssetHandleEEEELNS0_6_TraitE1EE9__destroyB8nn180100EvEUlRT_E_JRNS0_6__baseILSC_1EJS9_SA_EEEEEEDcSE_DpT0_(int a1, re::AssetHandle *this)
{
  re::AssetHandle::~AssetHandle(this);
}

double re::HashTable<re::DynamicString,re::MaterialTextureParam,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::deinit(uint64_t *a1)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  double result;

  v2 = *a1;
  if (v2)
  {
    if (*((_DWORD *)a1 + 8))
    {
      v3 = 0;
      v4 = 0;
      do
      {
        re::HashTable<re::DynamicString,re::MaterialTextureParam,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::EntryWithHash::free(a1[2] + v3);
        ++v4;
        v3 += 88;
      }
      while (v4 < *((unsigned int *)a1 + 8));
      v2 = *a1;
    }
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v2 + 40))(v2, a1[1]);
    *((_DWORD *)a1 + 8) = 0;
    *(_OWORD *)a1 = 0u;
    *((_OWORD *)a1 + 1) = 0u;
    *(_QWORD *)&result = 0x7FFFFFFFLL;
    *(uint64_t *)((char *)a1 + 36) = 0x7FFFFFFFLL;
  }
  return result;
}

uint64_t re::HashTable<re::DynamicString,re::MaterialTextureParam,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::EntryWithHash::free(uint64_t result)
{
  int v1;
  uint64_t v2;
  _OWORD *v3;
  uint64_t v4;
  char v5;

  v1 = *(_DWORD *)(result + 8);
  if (v1 < 0)
  {
    v2 = result;
    v3 = (_OWORD *)(result + 16);
    result = *(_QWORD *)(result + 16);
    *((_DWORD *)v3 - 2) = v1 & 0x7FFFFFFF;
    if (result)
    {
      if ((*(_BYTE *)(v2 + 24) & 1) != 0)
        result = (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)result + 40))(result, *(_QWORD *)(v2 + 32));
      *v3 = 0u;
      v3[1] = 0u;
    }
    v4 = *(unsigned int *)(v2 + 80);
    if ((_DWORD)v4 != -1)
      result = ((uint64_t (*)(char *, uint64_t))*(&off_24ED36750 + v4))(&v5, v2 + 48);
    *(_DWORD *)(v2 + 80) = -1;
  }
  return result;
}

uint64_t re::ConstantTable::lookup(uint64_t a1, _QWORD *a2)
{
  uint64_t v3;

  v3 = re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::find((_QWORD *)(a1 + 48), a2);
  if (v3 == -1)
    return 0;
  else
    return *(_QWORD *)(a1 + 56) + 16 * v3 + 8;
}

uint64_t re::ConstantTable::layoutHash(re::ConstantTable *this)
{
  return *((_QWORD *)this + 12);
}

uint64_t re::ConstantTable::data(re::ConstantTable *this)
{
  return *((_QWORD *)this + 5);
}

_QWORD *re::FixedArray<re::LinkedFunction>::deinit(_QWORD *result)
{
  _QWORD *v1;
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;

  if (*result)
  {
    v1 = result;
    v3 = result + 1;
    v2 = result[1];
    if (v2)
    {
      v4 = 0;
      v5 = result[2];
      v6 = 144 * v2;
      do
      {
        v7 = (_QWORD *)(v5 + v4);
        v8 = *(_QWORD *)(v5 + v4 + 120);
        if (v8)
        {
          if (v7[16])
          {
            (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v8 + 40))(v8, *(_QWORD *)(v5 + v4 + 136));
            v7[16] = 0;
            v7[17] = 0;
          }
          v7[15] = 0;
        }
        re::FixedArray<re::TypedArgument>::deinit(v7 + 12);
        re::FixedArray<re::TechniqueFunctionConstant>::deinit(v7 + 8);
        v9 = v7[6];
        if (v9)
        {

          v7[6] = 0;
        }
        re::StringID::destroyString((re::StringID *)(v5 + v4 + 24));
        re::StringID::destroyString((re::StringID *)(v5 + v4 + 8));
        v4 += 144;
      }
      while (v6 != v4);
      result = (_QWORD *)(*(uint64_t (**)(_QWORD, _QWORD))(*(_QWORD *)*v1 + 40))(*v1, v1[2]);
      *v3 = 0;
      v3[1] = 0;
    }
    *v1 = 0;
  }
  return result;
}

_QWORD *re::FixedArray<re::TypedArgument>::deinit(_QWORD *result)
{
  _QWORD *v1;
  uint64_t v2;
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v5;

  if (*result)
  {
    v1 = result;
    v3 = result + 1;
    v2 = result[1];
    if (v2)
    {
      v4 = (_QWORD *)result[2];
      v5 = 112 * v2;
      do
      {
        re::FixedArray<re::MetalTypeInfo>::deinit(v4 + 8);
        re::StringID::destroyString((re::StringID *)(v4 + 5));
        re::StringID::destroyString((re::StringID *)v4);
        v4 += 14;
        v5 -= 112;
      }
      while (v5);
      result = (_QWORD *)(*(uint64_t (**)(_QWORD, _QWORD))(*(_QWORD *)*v1 + 40))(*v1, v1[2]);
      *v3 = 0;
      v3[1] = 0;
    }
    *v1 = 0;
  }
  return result;
}

_QWORD *re::FixedArray<re::MetalTypeInfo>::deinit(_QWORD *result)
{
  _QWORD *v1;
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;

  if (*result)
  {
    v1 = result;
    v3 = result + 1;
    v2 = result[1];
    if (v2)
    {
      v4 = 80 * v2;
      v5 = result[2] + 40;
      do
      {
        re::FixedArray<re::MetalTypeInfo>::deinit(v5);
        re::StringID::destroyString((re::StringID *)(v5 - 24));
        v5 += 80;
        v4 -= 80;
      }
      while (v4);
      result = (_QWORD *)(*(uint64_t (**)(_QWORD, _QWORD))(*(_QWORD *)*v1 + 40))(*v1, v1[2]);
      *v3 = 0;
      v3[1] = 0;
    }
    *v1 = 0;
  }
  return result;
}

_QWORD *re::FixedArray<re::TechniqueFunctionConstant>::deinit(_QWORD *result)
{
  _QWORD *v1;
  uint64_t v2;
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v5;
  _QWORD *v6;

  if (*result)
  {
    v1 = result;
    v3 = result + 1;
    v2 = result[1];
    if (v2)
    {
      v4 = (_QWORD *)(result[2] + 40);
      v5 = v2 << 6;
      do
      {
        v6 = v4 - 5;
        if (*v4)
        {
          if (v4[1])
          {
            (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)*v4 + 40))(*v4, v4[2]);
            v4[1] = 0;
            v4[2] = 0;
          }
          *v4 = 0;
        }
        if (*v6)
        {
          if ((*(_BYTE *)(v4 - 4) & 1) != 0)
            (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)*v6 + 40))(*v6, *(v4 - 3));
          *(_OWORD *)v6 = 0u;
          *(_OWORD *)(v4 - 3) = 0u;
        }
        v4 += 8;
        v5 -= 64;
      }
      while (v5);
      result = (_QWORD *)(*(uint64_t (**)(_QWORD, _QWORD))(*(_QWORD *)*v1 + 40))(*v1, v1[2]);
      *v3 = 0;
      v3[1] = 0;
    }
    *v1 = 0;
  }
  return result;
}

void re::ShaderParameterTable::~ShaderParameterTable(re::ShaderParameterTable *this)
{
  re::ShaderParameterTable::deinit(this);
  re::BufferTable::~BufferTable((re::ShaderParameterTable *)((char *)this + 240));
  re::ConstantTable::~ConstantTable((re::ShaderParameterTable *)((char *)this + 128));
  re::HashBrown<re::WeakStringID,re::WeakParameterBinding,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::WeakParameterBinding>,false>::deinit((uint64_t)this + 64);
  re::HashBrown<re::WeakStringID,re::WeakParameterBinding,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::WeakParameterBinding>,false>::deinit((uint64_t)this);
}

void re::BufferTable::~BufferTable(re::BufferTable *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  re::BufferTable::deinit(this);
  v2 = *((_QWORD *)this + 30);
  if (v2)
  {
    if (*((_QWORD *)this + 34))
      (*(void (**)(uint64_t))(*(_QWORD *)v2 + 40))(v2);
    *((_QWORD *)this + 34) = 0;
    *((_QWORD *)this + 31) = 0;
    *((_QWORD *)this + 32) = 0;
    *((_QWORD *)this + 30) = 0;
    ++*((_DWORD *)this + 66);
  }
  re::DynamicArray<re::EvaluationSkeletalPoseInputHandle>::deinit((uint64_t)this + 200);
  re::BucketArray<NS::SharedPtr<MTL::Buffer>,8ul>::deinit((uint64_t)this + 144);
  re::DynamicOverflowArray<re::CollisionCastHit *,2ul>::deinit((uint64_t)this + 144);
  v3 = *((_QWORD *)this + 13);
  if (v3)
  {
    if (*((_QWORD *)this + 17))
      (*(void (**)(uint64_t))(*(_QWORD *)v3 + 40))(v3);
    *((_QWORD *)this + 17) = 0;
    *((_QWORD *)this + 14) = 0;
    *((_QWORD *)this + 15) = 0;
    *((_QWORD *)this + 13) = 0;
    ++*((_DWORD *)this + 32);
  }
  v4 = *((_QWORD *)this + 8);
  if (v4)
  {
    if (*((_QWORD *)this + 12))
      (*(void (**)(uint64_t))(*(_QWORD *)v4 + 40))(v4);
    *((_QWORD *)this + 12) = 0;
    *((_QWORD *)this + 9) = 0;
    *((_QWORD *)this + 10) = 0;
    *((_QWORD *)this + 8) = 0;
    ++*((_DWORD *)this + 22);
  }
  re::HashBrown<re::WeakStringID,unsigned char,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<unsigned char>,false>::deinit((uint64_t)this);
}

uint64_t re::BufferTable::deinit(re::BufferTable *this)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t result;

  v3 = (_QWORD *)((char *)this + 64);
  v2 = *((_QWORD *)this + 8);
  if (v2)
  {
    if (*((_QWORD *)this + 12))
      (*(void (**)(uint64_t))(*(_QWORD *)v2 + 40))(v2);
    *((_QWORD *)this + 12) = 0;
    v3[1] = 0;
    v3[2] = 0;
    *v3 = 0;
    ++*((_DWORD *)this + 22);
  }
  re::BucketArray<NS::SharedPtr<MTL::Buffer>,8ul>::deinit((uint64_t)this + 144);
  re::HashBrown<re::WeakStringID,unsigned char,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<unsigned char>,false>::deinit((uint64_t)this);
  re::DynamicArray<re::EvaluationSkeletalPoseInputHandle>::deinit((uint64_t)this + 200);
  result = *((_QWORD *)this + 30);
  if (result)
  {
    if (*((_QWORD *)this + 34))
      result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 40))(result);
    *((_QWORD *)this + 34) = 0;
    *((_QWORD *)this + 31) = 0;
    *((_QWORD *)this + 32) = 0;
    *((_QWORD *)this + 30) = 0;
    ++*((_DWORD *)this + 66);
  }
  *((_DWORD *)this + 70) = 0;
  return result;
}

uint64_t re::BucketArray<NS::SharedPtr<MTL::Buffer>,8ul>::deinit(uint64_t a1)
{
  uint64_t v2;
  unint64_t i;
  id *v4;
  uint64_t result;

  v2 = *(_QWORD *)(a1 + 40);
  if (v2)
  {
    for (i = 0; i != v2; ++i)
    {
      v4 = (id *)re::BucketArray<NS::SharedPtr<MTL::Buffer>,8ul>::operator[](a1, i);
      if (*v4)
      {

        *v4 = 0;
      }
    }
  }
  while (*(_QWORD *)(a1 + 8))
    re::BucketArray<re::CollisionCastHit,10ul>::freeElementBucket((uint64_t *)a1);
  result = re::DynamicOverflowArray<re::CollisionCastHit *,2ul>::deinit(a1);
  *(_QWORD *)(a1 + 40) = 0;
  ++*(_DWORD *)(a1 + 48);
  return result;
}

double re::HashBrown<re::WeakStringID,unsigned char,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<unsigned char>,false>::deinit(uint64_t a1)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  double result;

  v2 = *(_QWORD *)(a1 + 56);
  if (v2)
  {
    v3 = *(_QWORD **)(a1 + 8);
    if (v3)
    {
      v4 = *(_QWORD *)(a1 + 16);
      if (v4)
      {
        v5 = 16 * v4;
        do
        {
          *v3 = 0;
          v3 += 2;
          v5 -= 16;
        }
        while (v5);
      }
      *(_QWORD *)(a1 + 8) = 0;
    }
    if (*(_QWORD *)a1)
    {
      (*(void (**)(uint64_t))(*(_QWORD *)v2 + 40))(v2);
      *(_QWORD *)a1 = 0;
    }
    result = 0.0;
    *(_OWORD *)(a1 + 32) = 0u;
    *(_OWORD *)(a1 + 48) = 0u;
    *(_OWORD *)(a1 + 16) = 0u;
  }
  return result;
}

uint64_t re::BucketArray<NS::SharedPtr<MTL::Buffer>,8ul>::operator[](uint64_t a1, unint64_t a2)
{
  unint64_t v2;
  uint64_t v3;

  v2 = *(_QWORD *)(a1 + 40);
  if (v2 <= a2)
  {
    re::internal::assertLog((re::internal *)6, a2, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < m_size", "operator[]", 1011, a2, v2);
    _os_crash();
    __break(1u);
LABEL_8:
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  if (*(_QWORD *)(a1 + 8) <= a2 >> 3)
    goto LABEL_8;
  if ((*(_BYTE *)(a1 + 16) & 1) != 0)
    v3 = a1 + 24;
  else
    v3 = *(_QWORD *)(a1 + 32);
  return *(_QWORD *)(v3 + 8 * (a2 >> 3)) + 8 * (a2 & 7);
}

void re::ConstantTable::~ConstantTable(re::ConstantTable *this)
{
  double v2;
  uint64_t v3;

  re::ConstantTable::deinit(this);
  v2 = re::HashBrown<re::WeakStringID,unsigned char,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<unsigned char>,false>::deinit((uint64_t)this + 48);
  v3 = *((_QWORD *)this + 1);
  if (v3)
  {
    if (*((_QWORD *)this + 5))
      (*(void (**)(uint64_t, double))(*(_QWORD *)v3 + 40))(v3, v2);
    *((_QWORD *)this + 5) = 0;
    *((_QWORD *)this + 2) = 0;
    *((_QWORD *)this + 3) = 0;
    *((_QWORD *)this + 1) = 0;
    ++*((_DWORD *)this + 8);
  }
}

double re::ConstantTable::deinit(re::ConstantTable *this)
{
  uint64_t v2;
  _QWORD *v3;

  v3 = (_QWORD *)((char *)this + 8);
  v2 = *((_QWORD *)this + 1);
  if (v2)
  {
    if (*((_QWORD *)this + 5))
      (*(void (**)(uint64_t))(*(_QWORD *)v2 + 40))(v2);
    *((_QWORD *)this + 5) = 0;
    v3[1] = 0;
    v3[2] = 0;
    *v3 = 0;
    ++*((_DWORD *)this + 8);
  }
  return re::HashBrown<re::WeakStringID,unsigned char,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<unsigned char>,false>::deinit((uint64_t)this + 48);
}

double re::HashBrown<re::WeakStringID,re::WeakParameterBinding,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::WeakParameterBinding>,false>::deinit(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  double result;

  v2 = *(_QWORD *)(a1 + 56);
  if (v2)
  {
    v3 = *(_QWORD *)(a1 + 8);
    if (v3)
    {
      v4 = *(_QWORD *)(a1 + 16);
      if (v4)
      {
        v5 = 40 * v4;
        v6 = (_QWORD *)(v3 + 32);
        do
        {
          *v6 = 0;
          *(v6 - 2) = 0;
          *(v6 - 4) = 0;
          v6 += 5;
          v5 -= 40;
        }
        while (v5);
      }
      *(_QWORD *)(a1 + 8) = 0;
    }
    if (*(_QWORD *)a1)
    {
      (*(void (**)(uint64_t))(*(_QWORD *)v2 + 40))(v2);
      *(_QWORD *)a1 = 0;
    }
    result = 0.0;
    *(_OWORD *)(a1 + 32) = 0u;
    *(_OWORD *)(a1 + 48) = 0u;
    *(_OWORD *)(a1 + 16) = 0u;
  }
  return result;
}

uint64_t re::HashTable<re::WeakStringID,re::ColorConstantTable::ColorValue,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,false,false>::operator=(uint64_t a1, uint64_t *a2)
{
  if ((uint64_t *)a1 != a2)
  {
    if (!*(_QWORD *)a1 || *(_QWORD *)a1 == *a2)
    {
      re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::swap((uint64_t *)a1, a2);
    }
    else if (*a2)
    {
      re::HashTable<re::WeakStringID,re::ColorConstantTable::ColorValue,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,false,false>::copy(a1, (uint64_t)a2);
      ++*(_DWORD *)(a1 + 40);
    }
    else
    {
      re::HashTable<re::WeakStringID,re::ColorConstantTable::ColorValue,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,false,false>::clear(a1);
    }
  }
  return a1;
}

void re::HashTable<re::WeakStringID,re::ColorConstantTable::ColorValue,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,false,false>::clear(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  uint64_t v8;
  int v9;

  if (*(_DWORD *)(a1 + 28))
  {
    v2 = *(unsigned int *)(a1 + 24);
    if ((_DWORD)v2)
      memset_pattern16(*(void **)(a1 + 8), &unk_2260EB7B0, 4 * v2);
    v3 = *(unsigned int *)(a1 + 32);
    if ((_DWORD)v3)
    {
      v4 = 0;
      v5 = 40 * v3;
      do
      {
        v6 = *(_QWORD *)(a1 + 16);
        v7 = *(_DWORD *)(v6 + v4);
        if (v7 < 0)
        {
          v8 = v6 + v4;
          *(_DWORD *)v8 = v7 & 0x7FFFFFFF;
          *(_QWORD *)(v8 + 8) = 0;
        }
        v4 += 40;
      }
      while (v5 != v4);
    }
    *(_DWORD *)(a1 + 28) = 0;
    *(_DWORD *)(a1 + 32) = 0;
    v9 = *(_DWORD *)(a1 + 40) + 1;
    *(_DWORD *)(a1 + 36) = 0x7FFFFFFF;
    *(_DWORD *)(a1 + 40) = v9;
  }
}

void re::HashTable<re::WeakStringID,re::ColorConstantTable::ColorValue,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,false,false>::copy(uint64_t a1, uint64_t a2)
{
  unsigned int v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t i;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;

  re::HashTable<re::WeakStringID,re::ColorConstantTable::ColorValue,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,false,false>::clear(a1);
  v4 = *(_DWORD *)(a2 + 28);
  if (*(_DWORD *)(a1 + 24) < v4)
    re::HashTable<re::WeakStringID,re::ColorConstantTable::ColorValue,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,false,false>::setCapacity(a1, v4);
  v5 = *(unsigned int *)(a2 + 32);
  if ((_DWORD)v5)
  {
    v6 = 0;
    for (i = 0; i < v5; ++i)
    {
      v8 = *(_QWORD *)(a2 + 16);
      if ((*(_DWORD *)(v8 + v6) & 0x80000000) != 0)
      {
        v9 = 0xBF58476D1CE4E5B9 * (*(_QWORD *)(v8 + v6 + 8) ^ (*(_QWORD *)(v8 + v6 + 8) >> 30));
        v10 = (0x94D049BB133111EBLL * (v9 ^ (v9 >> 27))) ^ ((0x94D049BB133111EBLL * (v9 ^ (v9 >> 27))) >> 31);
        re::HashTable<re::WeakStringID,re::ColorConstantTable::ColorValue,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,false,false>::addAsCopy(a1, v10 % *(unsigned int *)(a1 + 24), v10, (_QWORD *)(v8 + v6 + 8), (__int128 *)(v8 + v6 + 16));
        v5 = *(unsigned int *)(a2 + 32);
      }
      v6 += 40;
    }
  }
}

void re::HashTable<re::WeakStringID,re::ColorConstantTable::ColorValue,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,false,false>::setCapacity(uint64_t a1, unsigned int a2)
{
  uint64_t v4;
  __int128 v5;
  uint64_t v6;
  unsigned int v7;
  __int128 v8;
  unsigned int v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  signed int v14;
  _BYTE v15[44];

  v4 = *(_QWORD *)a1;
  if (*(_QWORD *)a1)
  {
    if (a2 && *(_DWORD *)(a1 + 24) != a2 && *(_DWORD *)(a1 + 28) <= a2)
    {
      memset(v15, 0, 36);
      *(_QWORD *)&v15[36] = 0x7FFFFFFFLL;
      re::HashTable<re::StringID,re::TimelineEventParameterDescription,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::init((uint64_t)v15, v4, a2);
      v5 = *(_OWORD *)v15;
      *(_OWORD *)v15 = *(_OWORD *)a1;
      *(_OWORD *)a1 = v5;
      v6 = *(_QWORD *)&v15[16];
      *(_QWORD *)&v15[16] = *(_QWORD *)(a1 + 16);
      *(_QWORD *)(a1 + 16) = v6;
      v8 = *(_OWORD *)&v15[24];
      *(_OWORD *)&v15[24] = *(_OWORD *)(a1 + 24);
      v7 = *(_DWORD *)&v15[32];
      *(_OWORD *)(a1 + 24) = v8;
      v9 = v7;
      if (v7)
      {
        v10 = 0;
        v11 = 0;
        do
        {
          if ((*(_DWORD *)(*(_QWORD *)&v15[16] + v10) & 0x80000000) != 0)
          {
            v12 = 0xBF58476D1CE4E5B9
                * (*(_QWORD *)(*(_QWORD *)&v15[16] + v10 + 8) ^ (*(_QWORD *)(*(_QWORD *)&v15[16] + v10 + 8) >> 30));
            v13 = (0x94D049BB133111EBLL * (v12 ^ (v12 >> 27))) ^ ((0x94D049BB133111EBLL * (v12 ^ (v12 >> 27))) >> 31);
            re::HashTable<re::WeakStringID,re::ColorConstantTable::ColorValue,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,false,false>::addAsCopy(a1, v13 % *(unsigned int *)(a1 + 24), v13, *(_QWORD *)&v15[16] + v10 + 8, *(_QWORD *)&v15[16] + v10 + 16);
            v9 = *(_DWORD *)&v15[32];
          }
          ++v11;
          v10 += 40;
        }
        while (v11 < v9);
      }
      re::HashTable<re::WeakStringID,re::ColorConstantTable::ColorValue,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,false,false>::deinit((uint64_t *)v15);
    }
  }
  else
  {
    if (a2)
      v14 = a2;
    else
      v14 = 3;
  }
}

uint64_t re::HashTable<re::WeakStringID,re::ColorConstantTable::ColorValue,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,false,false>::addAsCopy(uint64_t a1, unsigned int a2, unint64_t a3, _QWORD *a4, __int128 *a5)
{
  uint64_t v8;
  int v9;
  uint64_t v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  __int128 v15;

  v8 = *(unsigned int *)(a1 + 36);
  if ((_DWORD)v8 == 0x7FFFFFFF)
  {
    v8 = *(unsigned int *)(a1 + 32);
    v9 = v8;
    if ((_DWORD)v8 == *(_DWORD *)(a1 + 24))
    {
      re::HashTable<re::WeakStringID,re::ColorConstantTable::ColorValue,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,false,false>::setCapacity(a1, 2 * *(_DWORD *)(a1 + 28));
      a2 = a3 % *(unsigned int *)(a1 + 24);
      v9 = *(_DWORD *)(a1 + 32);
    }
    *(_DWORD *)(a1 + 32) = v9 + 1;
    v11 = *(_QWORD *)(a1 + 16);
    v12 = *(_DWORD *)(v11 + 40 * v8);
  }
  else
  {
    v11 = *(_QWORD *)(a1 + 16);
    v12 = *(_DWORD *)(v11 + 40 * v8);
    *(_DWORD *)(a1 + 36) = v12 & 0x7FFFFFFF;
  }
  v13 = 40 * v8;
  *(_DWORD *)(v11 + v13) = v12 | 0x80000000;
  *(_DWORD *)(*(_QWORD *)(a1 + 16) + v13) = *(_DWORD *)(*(_QWORD *)(a1 + 16) + 40 * v8) & 0x80000000 | *(_DWORD *)(*(_QWORD *)(a1 + 8) + 4 * a2);
  *(_QWORD *)(*(_QWORD *)(a1 + 16) + 40 * v8 + 8) = *a4;
  v14 = *(_QWORD *)(a1 + 16) + 40 * v8;
  v15 = *a5;
  *(_QWORD *)(v14 + 32) = *((_QWORD *)a5 + 2);
  *(_OWORD *)(v14 + 16) = v15;
  *(_DWORD *)(*(_QWORD *)(a1 + 8) + 4 * a2) = v8;
  ++*(_DWORD *)(a1 + 28);
  return v8;
}

void re::TextureParameterTable::~TextureParameterTable(re::TextureParameterTable *this)
{
  re::TextureParameterTable::deinit(this);
  re::HashBrown<re::WeakStringID,unsigned char,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<unsigned char>,false>::deinit((uint64_t)this + 416);
  re::HashBrown<re::WeakStringID,re::WeakStringID,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::WeakStringID>,false>::deinit((uint64_t)this + 352);
  re::SamplerTable::~SamplerTable((re::TextureParameterTable *)((char *)this + 240));
  re::TextureTableImpl<re::TextureHandle>::~TextureTableImpl((_QWORD *)this + 16);
  re::HashBrown<re::WeakStringID,re::WeakParameterBinding,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::WeakParameterBinding>,false>::deinit((uint64_t)this + 64);
  re::HashBrown<re::WeakStringID,re::WeakParameterBinding,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::WeakParameterBinding>,false>::deinit((uint64_t)this);
}

double re::HashBrown<re::WeakStringID,re::WeakStringID,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::WeakStringID>,false>::deinit(uint64_t a1)
{
  void *v2;
  uint64_t v3;
  double result;

  if (*(_QWORD *)(a1 + 56))
  {
    v2 = *(void **)(a1 + 8);
    if (v2)
    {
      v3 = *(_QWORD *)(a1 + 16);
      if (v3)
        bzero(v2, 16 * v3);
      *(_QWORD *)(a1 + 8) = 0;
    }
    if (*(_QWORD *)a1)
    {
      (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 56) + 40))(*(_QWORD *)(a1 + 56));
      *(_QWORD *)a1 = 0;
    }
    result = 0.0;
    *(_OWORD *)(a1 + 32) = 0u;
    *(_OWORD *)(a1 + 48) = 0u;
    *(_OWORD *)(a1 + 16) = 0u;
  }
  return result;
}

void re::SamplerTable::~SamplerTable(re::SamplerTable *this)
{
  char *v2;

  v2 = (char *)this + 64;
  re::DynamicArray<NS::SharedPtr<MTL::SamplerState>>::deinit((uint64_t)this + 64);
  re::HashBrown<re::WeakStringID,unsigned char,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<unsigned char>,false>::deinit((uint64_t)this);
  *((_QWORD *)this + 13) = 0;
  re::DynamicArray<NS::SharedPtr<MTL::SamplerState>>::deinit((uint64_t)v2);
  re::HashBrown<re::WeakStringID,unsigned char,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<unsigned char>,false>::deinit((uint64_t)this);
}

uint64_t re::DynamicArray<NS::SharedPtr<MTL::SamplerState>>::deinit(uint64_t a1)
{
  uint64_t result;
  id *v3;
  uint64_t v4;
  uint64_t v5;

  result = *(_QWORD *)a1;
  if (result)
  {
    v3 = *(id **)(a1 + 32);
    if (v3)
    {
      v4 = *(_QWORD *)(a1 + 16);
      if (v4)
      {
        v5 = 8 * v4;
        do
        {
          if (*v3)
          {

            *v3 = 0;
          }
          ++v3;
          v5 -= 8;
        }
        while (v5);
        result = *(_QWORD *)a1;
        v3 = *(id **)(a1 + 32);
      }
      result = (*(uint64_t (**)(uint64_t, id *))(*(_QWORD *)result + 40))(result, v3);
    }
    *(_QWORD *)(a1 + 32) = 0;
    *(_QWORD *)(a1 + 8) = 0;
    *(_QWORD *)(a1 + 16) = 0;
    *(_QWORD *)a1 = 0;
    ++*(_DWORD *)(a1 + 24);
  }
  return result;
}

_QWORD *re::TextureTableImpl<re::TextureHandle>::~TextureTableImpl(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;

  *a1 = off_24ED367C8;
  v2 = (uint64_t)(a1 + 1);
  v3 = (uint64_t)(a1 + 9);
  re::DynamicArray<re::TextureViews<re::TextureHandle>>::deinit((uint64_t)(a1 + 9));
  re::HashBrown<re::WeakStringID,unsigned char,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<unsigned char>,false>::deinit(v2);
  re::DynamicArray<re::TextureViews<re::TextureHandle>>::deinit(v3);
  re::HashBrown<re::WeakStringID,unsigned char,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<unsigned char>,false>::deinit(v2);
  return a1;
}

uint64_t re::TextureTableImpl<re::TextureHandle>::lookup@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t result;
  char v6;

  result = re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::find((_QWORD *)(a1 + 8), a2);
  if (result == -1)
  {
    v6 = 0;
  }
  else
  {
    *(_WORD *)(a3 + 1) = *(_WORD *)(*(_QWORD *)(a1 + 16) + 16 * result + 8);
    v6 = 1;
  }
  *(_BYTE *)a3 = v6;
  return result;
}

uint64_t re::TextureTableImpl<re::TextureHandle>::layoutHash(uint64_t a1)
{
  return *(_QWORD *)(a1 + 56);
}

uint64_t re::TextureTableImpl<re::TextureHandle>::size(uint64_t a1)
{
  return *(_QWORD *)(a1 + 88);
}

_QWORD *re::TextureSource::lookupIndex@<X0>(_QWORD *(***a1)(uint64_t *__return_ptr)@<X0>, char *a2@<X8>)
{
  _QWORD *result;
  char v4;
  uint64_t v5;

  result = (**a1)(&v5);
  v4 = v5;
  if ((_BYTE)v5)
  {
    a2[1] = BYTE2(v5);
    v4 = 1;
  }
  *a2 = v4;
  return result;
}

_QWORD *re::TextureSource::lookupProtectionOptions@<X0>(_QWORD *(***a1)(uint64_t *__return_ptr)@<X0>, char *a2@<X8>)
{
  _QWORD *result;
  char v4;
  uint64_t v5;

  result = (**a1)(&v5);
  v4 = v5;
  if ((_BYTE)v5)
  {
    a2[1] = BYTE1(v5);
    v4 = 1;
  }
  *a2 = v4;
  return result;
}

uint64_t re::DynamicArray<re::TextureViews<re::TextureHandle>>::deinit(uint64_t a1)
{
  uint64_t result;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;

  result = *(_QWORD *)a1;
  if (result)
  {
    v3 = *(_QWORD *)(a1 + 32);
    if (v3)
    {
      v4 = *(_QWORD *)(a1 + 16);
      if (v4)
      {
        v5 = 40 * v4;
        do
        {
          if (*(_BYTE *)(v3 + 16))
          {
            v6 = *(void **)(v3 + 24);
            if (v6)
            {

              *(_QWORD *)(v3 + 24) = 0;
            }
          }
          re::TextureHandle::invalidate((re::TextureHandle *)v3);
          v3 += 40;
          v5 -= 40;
        }
        while (v5);
        result = *(_QWORD *)a1;
        v3 = *(_QWORD *)(a1 + 32);
      }
      result = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)result + 40))(result, v3);
    }
    *(_QWORD *)(a1 + 32) = 0;
    *(_QWORD *)(a1 + 8) = 0;
    *(_QWORD *)(a1 + 16) = 0;
    *(_QWORD *)a1 = 0;
    ++*(_DWORD *)(a1 + 24);
  }
  return result;
}

double re::HashTable<re::DynamicString,re::TechniqueFunctionConstant,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::deinit(uint64_t *a1)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  double result;

  v2 = *a1;
  if (v2)
  {
    if (*((_DWORD *)a1 + 8))
    {
      v3 = 0;
      v4 = 0;
      do
      {
        re::HashTable<re::DynamicString,re::TechniqueFunctionConstant,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::EntryWithHash::free(a1[2] + v3);
        ++v4;
        v3 += 112;
      }
      while (v4 < *((unsigned int *)a1 + 8));
      v2 = *a1;
    }
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v2 + 40))(v2, a1[1]);
    *((_DWORD *)a1 + 8) = 0;
    *(_OWORD *)a1 = 0u;
    *((_OWORD *)a1 + 1) = 0u;
    *(_QWORD *)&result = 0x7FFFFFFFLL;
    *(uint64_t *)((char *)a1 + 36) = 0x7FFFFFFFLL;
  }
  return result;
}

double re::HashTable<re::DynamicString,re::TechniqueFunctionConstant,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::EntryWithHash::free(uint64_t a1)
{
  int v1;
  uint64_t v3;
  _OWORD *v4;
  double result;
  _QWORD *v6;
  uint64_t v7;

  v1 = *(_DWORD *)(a1 + 8);
  if (v1 < 0)
  {
    v4 = (_OWORD *)(a1 + 16);
    v3 = *(_QWORD *)(a1 + 16);
    *((_DWORD *)v4 - 2) = v1 & 0x7FFFFFFF;
    if (v3)
    {
      if ((*(_BYTE *)(a1 + 24) & 1) != 0)
        (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v3 + 40))(v3, *(_QWORD *)(a1 + 32));
      result = 0.0;
      *v4 = 0u;
      v4[1] = 0u;
    }
    v6 = (_QWORD *)(a1 + 48);
    v7 = *(_QWORD *)(a1 + 88);
    if (v7)
    {
      if (*(_QWORD *)(a1 + 96))
      {
        (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v7 + 40))(v7, *(_QWORD *)(a1 + 104));
        *(_QWORD *)(a1 + 96) = 0;
        *(_QWORD *)(a1 + 104) = 0;
      }
      *(_QWORD *)(a1 + 88) = 0;
    }
    if (*v6)
    {
      if ((*(_BYTE *)(a1 + 56) & 1) != 0)
        (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)*v6 + 40))(*v6, *(_QWORD *)(a1 + 64));
      result = 0.0;
      *(_OWORD *)v6 = 0u;
      *(_OWORD *)(a1 + 64) = 0u;
    }
  }
  return result;
}

void re::HashTable<re::DynamicString,re::ParameterBinding,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::clear(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  int v5;

  if (*(_DWORD *)(a1 + 28))
  {
    v2 = *(unsigned int *)(a1 + 24);
    if ((_DWORD)v2)
      memset_pattern16(*(void **)(a1 + 8), &unk_2260EB7B0, 4 * v2);
    if (*(_DWORD *)(a1 + 32))
    {
      v3 = 0;
      v4 = 0;
      do
      {
        re::HashTable<re::DynamicString,re::ParameterBinding,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::EntryWithHash::free(*(_QWORD *)(a1 + 16) + v3);
        ++v4;
        v3 += 88;
      }
      while (v4 < *(unsigned int *)(a1 + 32));
    }
    *(_DWORD *)(a1 + 28) = 0;
    *(_DWORD *)(a1 + 32) = 0;
    v5 = *(_DWORD *)(a1 + 40) + 1;
    *(_DWORD *)(a1 + 36) = 0x7FFFFFFF;
    *(_DWORD *)(a1 + 40) = v5;
  }
}

void re::HashTable<re::DynamicString,re::ParameterBinding,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::copy(uint64_t a1, uint64_t a2)
{
  unsigned int v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t i;
  uint64_t v8;

  re::HashTable<re::DynamicString,re::ParameterBinding,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::clear(a1);
  v4 = *(_DWORD *)(a2 + 28);
  if (*(_DWORD *)(a1 + 24) < v4)
    re::HashTable<re::DynamicString,re::ParameterBinding,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::setCapacity(a1, v4);
  v5 = *(unsigned int *)(a2 + 32);
  if ((_DWORD)v5)
  {
    v6 = 0;
    for (i = 0; i < v5; ++i)
    {
      v8 = *(_QWORD *)(a2 + 16) + v6;
      if ((*(_DWORD *)(v8 + 8) & 0x80000000) != 0)
      {
        re::HashTable<re::DynamicString,re::ParameterBinding,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::addAsCopy(a1, *(_QWORD *)v8 % (unint64_t)*(unsigned int *)(a1 + 24), *(_QWORD *)v8, (re::DynamicString *)(v8 + 16), v8 + 48);
        v5 = *(unsigned int *)(a2 + 32);
      }
      v6 += 88;
    }
  }
}

void re::HashTable<re::DynamicString,re::ParameterBinding,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::setCapacity(uint64_t a1, unsigned int a2)
{
  uint64_t v4;
  __int128 v5;
  uint64_t v6;
  unsigned int v7;
  __int128 v8;
  unsigned int v9;
  uint64_t v10;
  unint64_t v11;
  signed int v12;
  _BYTE v13[44];

  v4 = *(_QWORD *)a1;
  if (*(_QWORD *)a1)
  {
    if (a2 && *(_DWORD *)(a1 + 24) != a2 && *(_DWORD *)(a1 + 28) <= a2)
    {
      memset(v13, 0, 36);
      *(_QWORD *)&v13[36] = 0x7FFFFFFFLL;
      re::HashTable<re::StringID,re::RigDataTypeClass,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::init((uint64_t)v13, v4, a2);
      v5 = *(_OWORD *)v13;
      *(_OWORD *)v13 = *(_OWORD *)a1;
      *(_OWORD *)a1 = v5;
      v6 = *(_QWORD *)&v13[16];
      *(_QWORD *)&v13[16] = *(_QWORD *)(a1 + 16);
      *(_QWORD *)(a1 + 16) = v6;
      v8 = *(_OWORD *)&v13[24];
      *(_OWORD *)&v13[24] = *(_OWORD *)(a1 + 24);
      v7 = *(_DWORD *)&v13[32];
      *(_OWORD *)(a1 + 24) = v8;
      v9 = v7;
      if (v7)
      {
        v10 = 0;
        v11 = 0;
        do
        {
          if ((*(_DWORD *)(*(_QWORD *)&v13[16] + v10 + 8) & 0x80000000) != 0)
          {
            re::HashTable<re::DynamicString,re::ParameterBinding,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::addAsMove(a1, *(_QWORD *)(*(_QWORD *)&v13[16] + v10) % (unint64_t)*(unsigned int *)(a1 + 24), *(_QWORD *)(*(_QWORD *)&v13[16] + v10), (re::DynamicString *)(*(_QWORD *)&v13[16] + v10 + 16), *(_QWORD *)&v13[16] + v10 + 48);
            v9 = *(_DWORD *)&v13[32];
          }
          ++v11;
          v10 += 88;
        }
        while (v11 < v9);
      }
      re::HashTable<re::DynamicString,re::ParameterBinding,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::deinit((uint64_t *)v13);
    }
  }
  else
  {
    if (a2)
      v12 = a2;
    else
      v12 = 3;
  }
}

uint64_t re::HashTable<re::DynamicString,re::ParameterBinding,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::addAsCopy(uint64_t a1, unsigned int a2, unint64_t a3, re::DynamicString *a4, uint64_t a5)
{
  uint64_t v10;
  int v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  uint64_t v15;

  v10 = *(unsigned int *)(a1 + 36);
  if ((_DWORD)v10 == 0x7FFFFFFF)
  {
    v10 = *(unsigned int *)(a1 + 32);
    v11 = v10;
    if ((_DWORD)v10 == *(_DWORD *)(a1 + 24))
    {
      re::HashTable<re::DynamicString,re::ParameterBinding,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::setCapacity(a1, 2 * *(_DWORD *)(a1 + 28));
      a2 = a3 % *(unsigned int *)(a1 + 24);
      v11 = *(_DWORD *)(a1 + 32);
    }
    *(_DWORD *)(a1 + 32) = v11 + 1;
    v12 = *(_QWORD *)(a1 + 16);
    v13 = *(_DWORD *)(v12 + 88 * v10 + 8);
  }
  else
  {
    v12 = *(_QWORD *)(a1 + 16);
    v13 = *(_DWORD *)(v12 + 88 * v10 + 8);
    *(_DWORD *)(a1 + 36) = v13 & 0x7FFFFFFF;
  }
  *(_DWORD *)(v12 + 88 * v10 + 8) = v13 | 0x80000000;
  v14 = 88 * v10;
  *(_DWORD *)(*(_QWORD *)(a1 + 16) + v14 + 8) = *(_DWORD *)(*(_QWORD *)(a1 + 16) + v14 + 8) & 0x80000000 | *(_DWORD *)(*(_QWORD *)(a1 + 8) + 4 * a2);
  *(_QWORD *)(*(_QWORD *)(a1 + 16) + v14) = a3;
  re::DynamicString::DynamicString((re::DynamicString *)(*(_QWORD *)(a1 + 16) + v14 + 16), a4);
  v15 = *(_QWORD *)(a1 + 16) + 88 * v10;
  *(_DWORD *)(v15 + 48) = *(_DWORD *)a5;
  *(_QWORD *)(v15 + 56) = *(_QWORD *)(a5 + 8);
  *(_BYTE *)(v15 + 64) = *(_BYTE *)(a5 + 16);
  re::StringID::StringID((re::StringID *)(v15 + 72), (const StringID *)(a5 + 24));
  *(_DWORD *)(*(_QWORD *)(a1 + 8) + 4 * a2) = v10;
  ++*(_DWORD *)(a1 + 28);
  return v10;
}

uint64_t re::HashTable<re::DynamicString,re::ParameterBinding,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::addAsMove(uint64_t a1, unsigned int a2, unint64_t a3, re::DynamicString *a4, uint64_t a5)
{
  uint64_t v10;
  int v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  v10 = *(unsigned int *)(a1 + 36);
  if ((_DWORD)v10 == 0x7FFFFFFF)
  {
    v10 = *(unsigned int *)(a1 + 32);
    v11 = v10;
    if ((_DWORD)v10 == *(_DWORD *)(a1 + 24))
    {
      re::HashTable<re::DynamicString,re::ParameterBinding,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::setCapacity(a1, (2 * *(_DWORD *)(a1 + 28)));
      a2 = a3 % *(unsigned int *)(a1 + 24);
      v11 = *(_DWORD *)(a1 + 32);
    }
    *(_DWORD *)(a1 + 32) = v11 + 1;
    v12 = *(_QWORD *)(a1 + 16);
    v13 = *(_DWORD *)(v12 + 88 * v10 + 8);
  }
  else
  {
    v12 = *(_QWORD *)(a1 + 16);
    v13 = *(_DWORD *)(v12 + 88 * v10 + 8);
    *(_DWORD *)(a1 + 36) = v13 & 0x7FFFFFFF;
  }
  *(_DWORD *)(v12 + 88 * v10 + 8) = v13 | 0x80000000;
  v14 = 88 * v10;
  *(_DWORD *)(*(_QWORD *)(a1 + 16) + v14 + 8) = *(_DWORD *)(*(_QWORD *)(a1 + 16) + v14 + 8) & 0x80000000 | *(_DWORD *)(*(_QWORD *)(a1 + 8) + 4 * a2);
  *(_QWORD *)(*(_QWORD *)(a1 + 16) + v14) = a3;
  re::DynamicString::DynamicString((re::DynamicString *)(*(_QWORD *)(a1 + 16) + v14 + 16), a4);
  v15 = *(_QWORD *)(a1 + 16) + 88 * v10;
  *(_DWORD *)(v15 + 48) = *(_DWORD *)a5;
  *(_QWORD *)(v15 + 56) = *(_QWORD *)(a5 + 8);
  *(_BYTE *)(v15 + 64) = *(_BYTE *)(a5 + 16);
  v16 = *(_QWORD *)(a5 + 24);
  *(_QWORD *)(v15 + 72) = *(_QWORD *)(v15 + 72) & 0xFFFFFFFFFFFFFFFELL | v16 & 1;
  *(_QWORD *)(v15 + 72) = *(_QWORD *)(a5 + 24) & 0xFFFFFFFFFFFFFFFELL | v16 & 1;
  *(_QWORD *)(v15 + 80) = *(_QWORD *)(a5 + 32);
  *(_QWORD *)(a5 + 24) = 0;
  *(_QWORD *)(a5 + 32) = &str_110;
  *(_DWORD *)(*(_QWORD *)(a1 + 8) + 4 * a2) = v10;
  ++*(_DWORD *)(a1 + 28);
  return v10;
}

uint64_t re::BucketArray<re::SharedPtr<re::MaterialParameterTable>,8ul>::addUninitialized(uint64_t a1)
{
  unint64_t v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v2 = *(_QWORD *)(a1 + 40);
  v3 = *(_QWORD *)(a1 + 8);
  if (v2 + 1 > 8 * v3)
  {
    re::BucketArray<re::SharedPtr<re::MaterialParameterTable>,8ul>::setBucketsCapacity((uint64_t *)a1, (v2 + 8) >> 3);
    v3 = *(_QWORD *)(a1 + 8);
  }
  if (v3 <= v2 >> 3)
  {
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  if ((*(_BYTE *)(a1 + 16) & 1) != 0)
    v4 = a1 + 24;
  else
    v4 = *(_QWORD *)(a1 + 32);
  v5 = *(_QWORD *)(v4 + 8 * (v2 >> 3));
  ++*(_QWORD *)(a1 + 40);
  ++*(_DWORD *)(a1 + 48);
  return v5 + 8 * (v2 & 7);
}

uint64_t *re::BucketArray<re::SharedPtr<re::MaterialParameterTable>,8ul>::setBucketsCapacity(uint64_t *result, unint64_t a2)
{
  uint64_t *v3;
  unint64_t v4;
  uint64_t v5;

  v3 = result;
  if (*result)
  {
    if (result[5] < 8 * a2)
    {
      while (1)
      {
        v4 = v3[1];
        if (v4 <= a2)
          break;
        result = (uint64_t *)re::BucketArray<re::CollisionCastHit,10ul>::freeElementBucket(v3);
      }
      while (v4 < a2)
      {
        v5 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)*v3 + 32))(*v3, 64, 0);
        result = (uint64_t *)re::DynamicOverflowArray<RESubscriptionHandle *,2ul>::add((uint64_t)v3, &v5);
        v4 = v3[1];
      }
    }
  }
  else
  {
  }
  return result;
}

uint64_t re::BucketArray<re::SharedPtr<re::MaterialParameterTable>,8ul>::init(uint64_t a1, uint64_t a2, unint64_t a3)
{
  uint64_t result;

  *(_QWORD *)a1 = a2;
  re::DynamicOverflowArray<std::unique_ptr<void,std::function<void ()(void *)>> *,2ul>::setCapacity((_QWORD *)a1, a3);
  *(_DWORD *)(a1 + 16) += 2;
  *(_QWORD *)(a1 + 40) = 0;
  result = re::BucketArray<re::SharedPtr<re::MaterialParameterTable>,8ul>::setBucketsCapacity(a1, a3);
  ++*(_DWORD *)(a1 + 48);
  return result;
}

uint64_t *re::BlendShapeWeightsDefinitionAsset::assetType(re::BlendShapeWeightsDefinitionAsset *this)
{
  unsigned __int8 v1;

  if ((v1 & 1) == 0
  {
    re::BlendShapeWeightsDefinitionAsset::assetType(void)::type = (uint64_t)"BlendFactor";
    qword_2558275E0 = 0;
    re::AssetType::generateCompiledExtension((re::AssetType *)&re::BlendShapeWeightsDefinitionAsset::assetType(void)::type);
  }
  return &re::BlendShapeWeightsDefinitionAsset::assetType(void)::type;
}

_QWORD *re::BlendShapeWeightsDefinitionAsset::init(re::BlendShapeWeightsDefinitionAsset *this, re::Allocator *a2)
{
  uint64_t *v2;
  char *v4;
  _QWORD *result;

  v2 = (uint64_t *)a2;
  if (!a2)
  {
  }
  *(_QWORD *)this = v2;
  re::DynamicArray<re::FixedArray<re::StringID>>::setCapacity(this, 0);
  *((_QWORD *)this + 5) = v2;
  v4 = (char *)this + 40;
  ++*((_DWORD *)v4 - 4);
  result = re::DynamicArray<re::BlendShapeWeightsMeshMap>::setCapacity(v4, 0);
  ++*((_DWORD *)v4 + 6);
  return result;
}

void re::BlendShapeWeightsDefinitionAsset::init(uint64_t a1, _QWORD *a2, _QWORD *a3, uint64_t *a4)
{
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t *v7;
  uint64_t v10;
  unint64_t v11;
  signed int v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unsigned int v21;
  uint64_t v22;
  int v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  unint64_t v33;
  uint64_t v34;
  unint64_t v35;
  _anonymous_namespace_ *v36;
  unsigned int v37;
  uint64_t v38;
  _anonymous_namespace_ *v40;
  _anonymous_namespace_ *v41;
  _QWORD *v42;
  uint64_t v43;
  unint64_t v44;
  _BOOL8 v45;
  uint64_t v46;
  unint64_t v47;
  unint64_t v48;
  uint64_t v49;
  uint64_t v50;
  _QWORD *v51;
  uint64_t v52;
  void *v53;
  uint64_t v54;
  unint64_t v55;
  _anonymous_namespace_ *v56;
  int v57;
  unint64_t v58;
  unint64_t v59;
  unint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  _QWORD *v65;
  uint64_t v66;
  uint64_t v67;
  int v68;
  uint64_t v69;
  unint64_t v70;
  uint64_t v71;
  _QWORD *v72;
  _BYTE *v73;
  _anonymous_namespace_ *v74;
  BOOL v75;
  uint64_t *v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  _QWORD *v80;
  uint64_t v81;
  unint64_t v82;
  _QWORD *v84;
  StringID *v85;
  uint64_t v86;
  unint64_t v87;
  re::BlendShapeModelUtil *v88;
  unint64_t v89;
  int v90;
  unsigned int v91;
  DeformationModelData *v92;
  unint64_t v93;
  uint64_t v94;
  int v95;
  unint64_t v96;
  __int128 v97;
  __int128 v98;
  unsigned int v99;
  uint64_t v100;
  uint64_t v101;
  unint64_t v102;
  uint64_t v103;
  uint64_t *v104;
  unint64_t v105;
  unint64_t v106;
  int v107;
  unint64_t v108;
  _QWORD v109[2];
  unint64_t v110;
  int v111;
  uint64_t v112;
  uint64_t v113;
  unint64_t v114;
  uint64_t v115;
  uint64_t v116;
  void *v117;
  uint64_t v118;
  unint64_t v119;
  uint64_t v120;
  uint64_t v121;
  _BYTE v122[44];
  int v123;
  _BYTE v124[12];
  __int16 v125;
  int v126;
  __int16 v127;
  unint64_t v128;
  __int16 v129;
  unint64_t v130;
  __int128 v131;
  __int128 v132;
  __int128 v133;
  __int128 v134;
  __int128 v135;
  uint64_t v136;

  v7 = a4;
  v136 = *MEMORY[0x24BDAC8D0];
  if (!a4)
  {
  }
  v10 = a2[55];
  if (v10)
  {
    v80 = a3;
    v11 = a2[52];
    if (v11)
      v12 = 2 * v11;
    else
      v12 = 1;
    v99 = 0;
    v97 = 0u;
    v98 = 0u;
    v100 = 0x7FFFFFFFLL;
    if (v11)
    {
      v14 = 0;
      v15 = 0;
      v4 = 0x7FFFFFFFLL;
      do
      {
        v5 = a2[52];
        if (v5 <= v15)
          goto LABEL_148;
        v16 = *(_QWORD *)(a2[54] + 8 * v15);
        v17 = 0x94D049BB133111EBLL
            * ((0xBF58476D1CE4E5B9 * (v16 ^ (v16 >> 30))) ^ ((0xBF58476D1CE4E5B9 * (v16 ^ (v16 >> 30))) >> 27));
        v5 = v17 ^ (v17 >> 31);
        v18 = v97;
        if (!(_QWORD)v97
          || (v18 = v5 % DWORD2(v98), v19 = *(unsigned int *)(*((_QWORD *)&v97 + 1) + 4 * v18),
                                      (_DWORD)v19 == 0x7FFFFFFF))
        {
LABEL_14:
          v20 = v100;
          if ((_DWORD)v100 == 0x7FFFFFFF)
          {
            v20 = v99;
            v21 = v99;
            if (v99 == DWORD2(v98))
            {
              re::HashTable<unsigned long long,unsigned int,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::setCapacity((uint64_t)&v97, 2 * HIDWORD(v98));
              v21 = v99;
              v18 = v5 % DWORD2(v98);
            }
            v99 = v21 + 1;
            v22 = v98;
            v23 = *(_DWORD *)(v98 + 32 * v20 + 8);
          }
          else
          {
            v22 = v98;
            v23 = *(_DWORD *)(v98 + 32 * v100 + 8);
            LODWORD(v100) = v23 & 0x7FFFFFFF;
          }
          *(_DWORD *)(v22 + 32 * v20 + 8) = v23 | 0x80000000;
          v24 = *((_QWORD *)&v97 + 1);
          *(_DWORD *)(v98 + 32 * v20 + 8) = *(_DWORD *)(v98 + 32 * v20 + 8) & 0x80000000 | *(_DWORD *)(*((_QWORD *)&v97 + 1) + 4 * v18);
          *(_QWORD *)(v98 + 32 * v20) = v5;
          *(_QWORD *)(v98 + 32 * v20 + 16) = v16;
          *(_DWORD *)(v98 + 32 * v20 + 24) = v14;
          *(_DWORD *)(v24 + 4 * v18) = v20;
          ++HIDWORD(v98);
          ++HIDWORD(v100);
        }
        else
        {
          while (*(_QWORD *)(v98 + 32 * v19 + 16) != v16)
          {
            v19 = *(_DWORD *)(v98 + 32 * v19 + 8) & 0x7FFFFFFF;
            if ((_DWORD)v19 == 0x7FFFFFFF)
              goto LABEL_14;
          }
        }
        v14 = (v14 + 1);
        v15 = v14;
      }
      while (v11 > v14);
    }
    v14 = (unint64_t)v80;
    v86 = v80[1];
    if (v86)
    {
      v15 = 0;
      v11 = 0;
      v5 = v10 + 72;
      while (1)
      {
        v25 = v80[1];
        if (v25 <= v11)
          break;
        v26 = re::DataArray<re::MeshInstance>::get(v10 + 72, *(_QWORD *)(*v80 + 8 * v11));
        v27 = *(_QWORD *)(re::DataArray<re::MeshModel>::get(v10 + 8, *(_QWORD *)(v26 + 16)) + 96);
        if (v27)
          v27 = *(_QWORD *)(v27 + 64);
        v15 = (v15 + v27);
        if (v86 == ++v11)
          goto LABEL_29;
      }
LABEL_149:
      re::internal::assertLog((re::internal *)6, v13, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 251, v11, v25);
      _os_crash();
      __break(1u);
LABEL_150:
      *(_QWORD *)v124 = 0;
      v134 = 0u;
      v135 = 0u;
      v132 = 0u;
      v133 = 0u;
      v131 = 0u;
      os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      *(_DWORD *)v122 = 136315906;
      *(_QWORD *)&v122[4] = "operator[]";
      *(_WORD *)&v122[12] = 1024;
      *(_DWORD *)&v122[14] = 476;
      *(_WORD *)&v122[18] = 2048;
      *(_QWORD *)&v122[20] = v4;
      *(_WORD *)&v122[28] = 2048;
      *(_QWORD *)&v122[30] = v15;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
LABEL_151:
      *(_QWORD *)v124 = 0;
      v134 = 0u;
      v135 = 0u;
      v132 = 0u;
      v133 = 0u;
      v131 = 0u;
      os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      *(_DWORD *)v122 = 136315906;
      *(_QWORD *)&v122[4] = "operator[]";
      *(_WORD *)&v122[12] = 1024;
      *(_DWORD *)&v122[14] = 468;
      *(_WORD *)&v122[18] = 2048;
      *(_QWORD *)&v122[20] = v15;
      *(_WORD *)&v122[28] = 2048;
      *(_QWORD *)&v122[30] = v4;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
LABEL_152:
      v116 = 0;
      v134 = 0u;
      v135 = 0u;
      v132 = 0u;
      v133 = 0u;
      v131 = 0u;
      os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      *(_DWORD *)v124 = 136315906;
      *(_QWORD *)&v124[4] = "operator[]";
      v125 = 1024;
      v126 = 476;
      v127 = 2048;
      v128 = v14;
      v129 = 2048;
      v130 = v4;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
LABEL_153:
      *(_QWORD *)v124 = 0;
      v134 = 0u;
      v135 = 0u;
      v132 = 0u;
      v133 = 0u;
      v131 = 0u;
      os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      *(_DWORD *)v122 = 136315906;
      *(_QWORD *)&v122[4] = "operator[]";
      *(_WORD *)&v122[12] = 1024;
      *(_DWORD *)&v122[14] = 476;
      *(_WORD *)&v122[18] = 2048;
      *(_QWORD *)&v122[20] = v14;
      *(_WORD *)&v122[28] = 2048;
      *(_QWORD *)&v122[30] = v4;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
LABEL_154:
      *(_QWORD *)v124 = 0;
      v134 = 0u;
      v135 = 0u;
      v132 = 0u;
      v133 = 0u;
      v131 = 0u;
      os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      *(_DWORD *)v122 = 136315906;
      *(_QWORD *)&v122[4] = "operator[]";
      *(_WORD *)&v122[12] = 1024;
      *(_DWORD *)&v122[14] = 797;
      *(_WORD *)&v122[18] = 2048;
      *(_QWORD *)&v122[20] = v15;
      *(_WORD *)&v122[28] = 2048;
      *(_QWORD *)&v122[30] = v4;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
LABEL_155:
      *(_QWORD *)v124 = 0;
      v134 = 0u;
      v135 = 0u;
      v132 = 0u;
      v133 = 0u;
      v131 = 0u;
      os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      *(_DWORD *)v122 = 136315906;
      *(_QWORD *)&v122[4] = "operator[]";
      *(_WORD *)&v122[12] = 1024;
      *(_DWORD *)&v122[14] = 468;
      *(_WORD *)&v122[18] = 2048;
      *(_QWORD *)&v122[20] = v15;
      *(_WORD *)&v122[28] = 2048;
      *(_QWORD *)&v122[30] = v4;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
LABEL_156:
      re::internal::assertLog((re::internal *)6, v28, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 251, v4, v29);
      _os_crash();
      __break(1u);
LABEL_157:
      re::internal::assertLog((re::internal *)6, v31, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 251, v4, v35);
      _os_crash();
      __break(1u);
LABEL_158:
      v109[0] = 0;
      v134 = 0u;
      v135 = 0u;
      v132 = 0u;
      v133 = 0u;
      v131 = 0u;
      os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      *(_DWORD *)v122 = 136315906;
      *(_QWORD *)&v122[4] = "operator[]";
      *(_WORD *)&v122[12] = 1024;
      *(_DWORD *)&v122[14] = 468;
      *(_WORD *)&v122[18] = 2048;
      *(_QWORD *)&v122[20] = v14;
      *(_WORD *)&v122[28] = 2048;
      *(_QWORD *)&v122[30] = v15;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
LABEL_159:
      *(_QWORD *)v124 = 0;
      v134 = 0u;
      v135 = 0u;
      v132 = 0u;
      v133 = 0u;
      v131 = 0u;
      os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      *(_DWORD *)v122 = 136315906;
      *(_QWORD *)&v122[4] = "operator[]";
      *(_WORD *)&v122[12] = 1024;
      *(_DWORD *)&v122[14] = 797;
      *(_WORD *)&v122[18] = 2048;
      *(_QWORD *)&v122[20] = v6;
      *(_WORD *)&v122[28] = 2048;
      *(_QWORD *)&v122[30] = v14;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
LABEL_160:
      *(_QWORD *)v124 = 0;
      v134 = 0u;
      v135 = 0u;
      v132 = 0u;
      v133 = 0u;
      v131 = 0u;
      os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      *(_DWORD *)v122 = 136315906;
      *(_QWORD *)&v122[4] = "operator[]";
      *(_WORD *)&v122[12] = 1024;
      *(_DWORD *)&v122[14] = 468;
      *(_WORD *)&v122[18] = 2048;
      *(_QWORD *)&v122[20] = v6;
      *(_WORD *)&v122[28] = 2048;
      *(_QWORD *)&v122[30] = v11;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
LABEL_161:
      re::internal::assertLog((re::internal *)4, v31, "assertion failure: '%s' (%s:line %i) ", "modelIndex != nullptr", "init", 231);
      _os_crash();
      __break(1u);
    }
    v15 = 0;
LABEL_29:
    *(_QWORD *)a1 = v7;
    re::DynamicArray<re::FixedArray<re::StringID>>::setCapacity((_QWORD *)a1, v15);
    ++*(_DWORD *)(a1 + 24);
    *(_QWORD *)(a1 + 40) = v7;
    re::DynamicArray<re::BlendShapeWeightsMeshMap>::setCapacity((_QWORD *)(a1 + 40), v15);
    *(_QWORD *)(a1 + 80) = v7;
    v11 = a1 + 80;
    ++*(_DWORD *)(a1 + 64);
    re::DynamicArray<re::StringID>::setCapacity((_QWORD *)(a1 + 80), v15);
    ++*(_DWORD *)(a1 + 104);
    if (v86)
    {
      v4 = 0;
      v79 = v10 + 72;
      v84 = a2;
      while (1)
      {
        v29 = *(_QWORD *)(v14 + 8);
        if (v29 <= v4)
          goto LABEL_156;
        v30 = re::DataArray<re::MeshInstance>::get(v79, *(_QWORD *)(*(_QWORD *)v14 + 8 * v4));
        if (!(_QWORD)v97)
          goto LABEL_161;
        v32 = *(_QWORD *)(v30 + 16);
        v33 = 0x94D049BB133111EBLL
            * ((0xBF58476D1CE4E5B9 * (v32 ^ (v32 >> 30))) ^ ((0xBF58476D1CE4E5B9 * (v32 ^ (v32 >> 30))) >> 27));
        v34 = *(unsigned int *)(*((_QWORD *)&v97 + 1) + 4 * ((v33 ^ (v33 >> 31)) % DWORD2(v98)));
        if ((_DWORD)v34 == 0x7FFFFFFF)
          goto LABEL_161;
        while (*(_QWORD *)(v98 + 32 * v34 + 16) != v32)
        {
          v34 = *(_DWORD *)(v98 + 32 * v34 + 8) & 0x7FFFFFFF;
          if ((_DWORD)v34 == 0x7FFFFFFF)
            goto LABEL_161;
        }
        v35 = *(_QWORD *)(v14 + 8);
        if (v35 <= v4)
          goto LABEL_157;
        v6 = *(unsigned int *)(v98 + 32 * v34 + 24);
        v11 = a2[55];
        v82 = v4;
        v85 = (StringID *)re::DataArray<re::MeshInstance>::get(v11 + 72, *(_QWORD *)(*(_QWORD *)v14 + 8 * v4));
        v14 = a2[52];
        v113 = 0;
        v114 = 0;
        v115 = 0;
        if (v14)
        {
          v5 = 0;
          v4 = 0;
          v37 = 1;
          while (1)
          {
            v15 = a2[52];
            if (v15 <= v5)
              break;
            v36 = (_anonymous_namespace_ *)re::DataArray<re::MeshModel>::get(v11 + 8, *(_QWORD *)(a2[54] + 8 * v5));
            v15 = v114;
            if (v114 <= v5)
              goto LABEL_145;
            *(_DWORD *)(v115 + 4 * v5) = v4;
            v38 = *((_QWORD *)v36 + 12);
            if (v38)
              v38 = *(_QWORD *)(v38 + 64);
            v4 = (v4 + v38);
            v5 = v37;
            if (v14 <= v37++)
              goto LABEL_47;
          }
LABEL_144:
          v109[0] = 0;
          v134 = 0u;
          v135 = 0u;
          v132 = 0u;
          v133 = 0u;
          v131 = 0u;
          os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
          *(_DWORD *)v122 = 136315906;
          *(_QWORD *)&v122[4] = "operator[]";
          *(_WORD *)&v122[12] = 1024;
          *(_DWORD *)&v122[14] = 797;
          *(_WORD *)&v122[18] = 2048;
          *(_QWORD *)&v122[20] = v5;
          *(_WORD *)&v122[28] = 2048;
          *(_QWORD *)&v122[30] = v15;
          _os_log_send_and_compose_impl();
          _os_crash_msg();
          __break(1u);
LABEL_145:
          v109[0] = 0;
          v134 = 0u;
          v135 = 0u;
          v132 = 0u;
          v133 = 0u;
          v131 = 0u;
          os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
          *(_DWORD *)v122 = 136315906;
          *(_QWORD *)&v122[4] = "operator[]";
          *(_WORD *)&v122[12] = 1024;
          *(_DWORD *)&v122[14] = 468;
          *(_WORD *)&v122[18] = 2048;
          *(_QWORD *)&v122[20] = v5;
          *(_WORD *)&v122[28] = 2048;
          *(_QWORD *)&v122[30] = v15;
          _os_log_send_and_compose_impl();
          _os_crash_msg();
          __break(1u);
LABEL_146:
          v118 = 0;
          v134 = 0u;
          v135 = 0u;
          v132 = 0u;
          v133 = 0u;
          v131 = 0u;
          os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
          *(_DWORD *)v124 = 136315906;
          *(_QWORD *)&v124[4] = "operator[]";
          v125 = 1024;
          v126 = 468;
          v127 = 2048;
          v128 = v6;
          v129 = 2048;
          v130 = v11;
          _os_log_send_and_compose_impl();
          _os_crash_msg();
          __break(1u);
LABEL_147:
          v118 = 0;
          v134 = 0u;
          v135 = 0u;
          v132 = 0u;
          v133 = 0u;
          v131 = 0u;
          os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
          *(_DWORD *)v124 = 136315906;
          *(_QWORD *)&v124[4] = "operator[]";
          v125 = 1024;
          v126 = 468;
          v127 = 2048;
          v128 = v11;
          v129 = 2048;
          v130 = v14;
          _os_log_send_and_compose_impl();
          _os_crash_msg();
          __break(1u);
LABEL_148:
          v109[0] = 0;
          v134 = 0u;
          v135 = 0u;
          v132 = 0u;
          v133 = 0u;
          v131 = 0u;
          os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
          *(_DWORD *)v122 = 136315906;
          *(_QWORD *)&v122[4] = "operator[]";
          *(_WORD *)&v122[12] = 1024;
          *(_DWORD *)&v122[14] = 797;
          *(_WORD *)&v122[18] = 2048;
          *(_QWORD *)&v122[20] = v15;
          *(_WORD *)&v122[28] = 2048;
          *(_QWORD *)&v122[30] = v5;
          _os_log_send_and_compose_impl();
          _os_crash_msg();
          __break(1u);
          goto LABEL_149;
        }
        LODWORD(v4) = 0;
        v15 = v114;
LABEL_47:
        if (v15 <= v14)
          goto LABEL_158;
        *(_DWORD *)(v115 + 4 * v14) = v4;
        v109[1] = 0;
        v110 = 0;
        v111 = 0;
        v112 = 0;
        v40 = (_anonymous_namespace_ *)re::DynamicArray<re::FixedArray<re::StringID>>::setCapacity(v109, v4);
        ++v111;
        v105 = 0;
        v106 = 0;
        v107 = 0;
        v108 = 0;
        v41 = (_anonymous_namespace_ *)re::DynamicArray<re::HashSet<re::StringID,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>>::setCapacity(&v104, v4);
        v90 = ++v107;
        v101 = 0;
        v102 = 0;
        v103 = 0;
        v14 = a2[52];
        if (v14 <= v6)
          goto LABEL_159;
        v81 = v11 + 8;
        v42 = (_QWORD *)re::DataArray<re::MeshModel>::get(v11 + 8, *(_QWORD *)(a2[54] + 8 * v6));
        v4 = (unint64_t)(v42 + 12);
        v43 = v42[12];
        if (v43)
        {
          v89 = *(_QWORD *)(v43 + 64);
          if (v89)
          {
            v44 = 0;
            v87 = v6;
            v88 = (re::BlendShapeModelUtil *)(v42 + 12);
            while (1)
            {
              v14 = re::BlendShapeModelUtil::blendShapeTargetCountForGroup((re::BlendShapeModelUtil *)v4, (const DeformationModelData *)v44);
              memset(v122, 0, 36);
              *(_QWORD *)&v122[36] = 0x7FFFFFFFLL;
              if ((_DWORD)v14)
              {
                v6 = 0;
                v11 = v14;
                do
                {
                  re::BlendShapeModelUtil::blendShapeTargetName((re::BlendShapeModelUtil *)v4, (const DeformationModelData *)v44, v6, (re::StringID *)&v131);
                  re::HashSetBase<re::StringID,re::StringID,re::internal::ValueAsKey<re::StringID>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::add((uint64_t)v122, (uint64_t *)&v131);
                  re::StringID::destroyString((re::StringID *)&v131);
                  ++v6;
                }
                while (v14 != v6);
              }
              v91 = v14;
              v92 = (DeformationModelData *)v44;
              v15 = v106;
              v94 = v106;
              if ((_DWORD)v106)
              {
                v46 = 0;
                v96 = v108;
                v95 = *(_DWORD *)&v122[28];
                v4 = *(unsigned int *)&v122[32];
                v14 = *(_QWORD *)&v122[16];
                v93 = v106;
                do
                {
                  if (v46 == v15)
                    goto LABEL_143;
                  v5 = v96 + 48 * v46;
                  if (*(_DWORD *)(v5 + 28) == v95)
                  {
                    if (!(_DWORD)v4)
                    {
LABEL_78:
                      v6 = v87;
                      v4 = (unint64_t)v88;
                      goto LABEL_90;
                    }
                    v11 = 0;
                    while (1)
                    {
                      if ((*(_DWORD *)(v14 + 24 * v11) & 0x80000000) != 0)
                      {
                        v47 = *(unsigned int *)(v5 + 24);
                        if (!(_DWORD)v47)
                          break;
                        v6 = v14 + 24 * v11 + 8;
                        v48 = 0xBF58476D1CE4E5B9 * ((*(_QWORD *)v6 >> 31) ^ (*(_QWORD *)v6 >> 1));
                        v49 = *(unsigned int *)(*(_QWORD *)(v5 + 8)
                                              + 4
                                              * (((0x94D049BB133111EBLL * (v48 ^ (v48 >> 27))) ^ ((0x94D049BB133111EBLL
                                                                                                 * (v48 ^ (v48 >> 27))) >> 31))
                                               % v47));
                        if ((_DWORD)v49 == 0x7FFFFFFF)
                          break;
                        v50 = *(_QWORD *)(v5 + 16);
                        while (1)
                        {
                          v15 = 24;
                          v45 = re::StringID::operator==((_QWORD *)(v50 + 24 * v49 + 8), (_QWORD *)(v14 + 24 * v11 + 8));
                          if (v45)
                            break;
                          v49 = *(_DWORD *)(v50 + 24 * v49) & 0x7FFFFFFF;
                          if (v49 == 0x7FFFFFFF)
                            goto LABEL_71;
                        }
                        v45 = re::StringID::operator==((_QWORD *)(v50 + 24 * v49 + 8), (_QWORD *)(v14 + 24 * v11 + 8));
                        if (!v45)
                          break;
                      }
                      if (++v11 == v4)
                        goto LABEL_78;
                    }
                  }
LABEL_71:
                  ++v46;
                  v15 = v93;
                }
                while (v46 != v94);
              }
              v6 = v91;
              v118 = 0;
              v119 = 0;
              v120 = 0;
              v4 = (unint64_t)v88;
              if (v91)
                break;
LABEL_76:
              v56 = (_anonymous_namespace_ *)re::DynamicArray<re::FixedArray<re::StringID>>::add(v109, &v118);
              v6 = v87;
              if (v15 >= v105)
              {
                v5 = v15 + 1;
                v57 = v90;
                if (v105 < v15 + 1)
                {
                  if (v104)
                  {
                    v58 = 8;
                    if (v105)
                      v58 = 2 * v105;
                    if (v58 <= v5)
                      v59 = v15 + 1;
                    else
                      v59 = v58;
                    re::DynamicArray<re::HashSet<re::StringID,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>>::setCapacity(&v104, v59);
                    v57 = v107;
                  }
                  else
                  {
                    re::DynamicArray<re::HashSet<re::StringID,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>>::setCapacity(&v104, v15 + 1);
                    v57 = ++v107;
                  }
                }
                v15 = v106;
              }
              else
              {
                v57 = v90;
              }
              v60 = v108 + 48 * v15;
              *(_OWORD *)v60 = 0u;
              *(_OWORD *)(v60 + 16) = 0u;
              *(_DWORD *)(v60 + 32) = 0;
              *(_QWORD *)(v60 + 36) = 0x7FFFFFFFLL;
              *(_QWORD *)v60 = *(_QWORD *)v122;
              *(_QWORD *)v122 = 0;
              v61 = *(_QWORD *)(v60 + 8);
              *(_QWORD *)(v60 + 8) = *(_QWORD *)&v122[8];
              *(_QWORD *)&v122[8] = v61;
              v62 = *(_QWORD *)(v60 + 16);
              *(_QWORD *)(v60 + 16) = *(_QWORD *)&v122[16];
              *(_QWORD *)&v122[16] = v62;
              LODWORD(v62) = *(_DWORD *)(v60 + 24);
              *(_DWORD *)(v60 + 24) = *(_DWORD *)&v122[24];
              *(_DWORD *)&v122[24] = v62;
              LODWORD(v62) = *(_DWORD *)(v60 + 28);
              *(_DWORD *)(v60 + 28) = *(_DWORD *)&v122[28];
              *(_DWORD *)&v122[28] = v62;
              LODWORD(v62) = *(_DWORD *)(v60 + 32);
              *(_DWORD *)(v60 + 32) = *(_DWORD *)&v122[32];
              *(_DWORD *)&v122[32] = v62;
              LODWORD(v62) = *(_DWORD *)(v60 + 36);
              *(_DWORD *)(v60 + 36) = *(_DWORD *)&v122[36];
              *(_DWORD *)&v122[36] = v62;
              v106 = v15 + 1;
              v90 = v57 + 1;
              v107 = v57 + 1;
              LODWORD(v46) = v110 - 1;
              re::FixedArray<re::StringID>::deinit(&v118);
LABEL_90:
              v11 = v114;
              if (v114 <= v6)
                goto LABEL_146;
              v11 = (*(_DWORD *)(v115 + 4 * v6) + (_DWORD)v92);
              v14 = v102;
              if (v102 <= v11)
                goto LABEL_147;
              *(_DWORD *)(v103 + 4 * v11) = v46;
              re::HashSetBase<re::StringID,re::StringID,re::internal::ValueAsKey<re::StringID>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::deinit((uint64_t *)v122);
              v44 = ((_DWORD)v92 + 1);
              if (v89 <= v44)
                goto LABEL_93;
            }
            v11 = 0;
            v5 = 0;
            while (1)
            {
              re::BlendShapeModelUtil::blendShapeTargetName(v88, v92, v5, (re::StringID *)&v116);
              v14 = v119;
              if (v119 <= v5)
                break;
              v51 = (_QWORD *)(v120 + v11);
              v52 = v116;
              v53 = v117;
              v116 = 0;
              v117 = &str_110;
              v54 = *(_QWORD *)(v120 + v11 + 8);
              v55 = v52 & 0xFFFFFFFFFFFFFFFELL | *(_QWORD *)(v120 + v11) & 1;
              v51[1] = v53;
              *(_QWORD *)&v131 = v55;
              *((_QWORD *)&v131 + 1) = v54;
              *v51 = v52;
              re::StringID::destroyString((re::StringID *)&v131);
              re::StringID::destroyString((re::StringID *)&v116);
              ++v5;
              v11 += 16;
              if (v91 == v5)
                goto LABEL_76;
            }
            v121 = 0;
            v134 = 0u;
            v135 = 0u;
            v132 = 0u;
            v133 = 0u;
            v131 = 0u;
            os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
            *(_DWORD *)v124 = 136315906;
            *(_QWORD *)&v124[4] = "operator[]";
            v125 = 1024;
            v126 = 468;
            v127 = 2048;
            v128 = v5;
            v129 = 2048;
            v130 = v14;
            _os_log_send_and_compose_impl();
            _os_crash_msg();
            __break(1u);
LABEL_143:
            v118 = 0;
            v134 = 0u;
            v135 = 0u;
            v132 = 0u;
            v133 = 0u;
            v131 = 0u;
            os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
            *(_DWORD *)v124 = 136315906;
            *(_QWORD *)&v124[4] = "operator[]";
            v125 = 1024;
            v126 = 789;
            v127 = 2048;
            v128 = v15;
            v129 = 2048;
            v130 = v15;
            _os_log_send_and_compose_impl();
            _os_crash_msg();
            __break(1u);
            goto LABEL_144;
          }
        }
LABEL_93:
        v119 = 0;
        v120 = 0;
        v118 = 0;
        v11 = v114;
        if (v114 <= v6)
          goto LABEL_160;
        v5 = *(unsigned int *)(v115 + 4 * v6);
        v63 = re::DataArray<re::MeshModel>::get(v81, *(_QWORD *)&v85[1].var0);
        v64 = *(_QWORD *)(v63 + 56);
        a2 = v84;
        if (v64)
          break;
LABEL_122:
        if (v118)
          v75 = v119 == 0;
        else
          v75 = 1;
        if (!v75)
          (*(void (**)(void))(*(_QWORD *)v118 + 40))();
        v14 = (unint64_t)v80;
        if (v101 && v102)
          (*(void (**)(void))(*(_QWORD *)v101 + 40))();
        v76 = v104;
        if (v104)
        {
          v15 = v108;
          if (v108)
          {
            if (v106)
            {
              v77 = 48 * v106;
              v5 = v108;
              do
              {
                re::HashSetBase<re::StringID,re::StringID,re::internal::ValueAsKey<re::StringID>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::deinit((uint64_t *)v5);
                v5 += 48;
                v77 -= 48;
              }
              while (v77);
            }
            (*(void (**)(uint64_t *, unint64_t))(*v76 + 40))(v76, v15);
          }
        }
        re::DynamicArray<re::FixedArray<re::StringID>>::deinit((uint64_t)v109);
        if (v113)
        {
          if (v114)
            (*(void (**)(void))(*(_QWORD *)v113 + 40))();
        }
        v4 = v82 + 1;
        if (v82 + 1 == v86)
          goto LABEL_140;
      }
      v65 = (_QWORD *)v63;
      v14 = 0;
      v11 = 504;
      while (1)
      {
        v66 = v65[12];
        if (v66)
        {
          if (*(_QWORD *)(v66 + 40) > v14)
          {
            v67 = *(unsigned int *)(*(_QWORD *)(v66 + 48) + 4 * v14);
            if ((_DWORD)v67 != -1)
              break;
          }
        }
LABEL_121:
        ++v14;
        v11 += 560;
        if (v64 == v14)
          goto LABEL_122;
      }
      v4 = v67 + v5;
      v15 = v102;
      if (v102 <= v67 + v5)
        goto LABEL_150;
      v15 = *(unsigned int *)(v103 + 4 * v4);
      v4 = v119;
      if (v119 <= v15)
        goto LABEL_151;
      v68 = *(_DWORD *)(v120 + 4 * v15);
      if (v68 == -1)
      {
        v4 = v110;
        if (v110 <= v15)
          goto LABEL_154;
        v69 = v112;
        v70 = *(_QWORD *)(a1 + 16);
        if (v70 >= *(_QWORD *)(a1 + 8))
        {
          re::DynamicArray<re::FixedArray<re::StringID>>::growCapacity((_QWORD *)a1, v70 + 1);
          v70 = *(_QWORD *)(a1 + 16);
        }
        re::FixedArray<re::StringID>::FixedArray((unint64_t *)(*(_QWORD *)(a1 + 32) + 24 * v70), v69 + 24 * v15);
        v71 = *(_QWORD *)(a1 + 16) + 1;
        *(_QWORD *)(a1 + 16) = v71;
        ++*(_DWORD *)(a1 + 24);
        v4 = v119;
        if (v119 <= v15)
          goto LABEL_155;
        v68 = v71 - 1;
        *(_DWORD *)(v120 + 4 * v15) = v71 - 1;
      }
      v122[0] = 1;
      re::StringID::StringID((re::StringID *)&v122[8], v85);
      v4 = v65[7];
      if (v4 <= v14)
        goto LABEL_152;
      re::StringID::StringID((re::StringID *)&v122[24], (const StringID *)(v65[8] + v11));
      *(_DWORD *)&v122[40] = v68;
      v123 = 0;
      re::DynamicArray<re::BlendShapeWeightsMeshMap>::add((_QWORD *)(a1 + 40), (uint64_t)v122);
      re::StringID::destroyString((re::StringID *)&v122[24]);
      re::StringID::destroyString((re::StringID *)&v122[8]);
      v4 = v65[7];
      if (v4 <= v14)
        goto LABEL_153;
      v72 = (_QWORD *)(v65[8] + v11);
      v73 = (_BYTE *)v72[1];
      if (*v72 > 1uLL)
      {
        a2 = v84;
      }
      else
      {
        a2 = v84;
        if (v73 && !*v73)
        {
          v74 = (_anonymous_namespace_ *)re::DynamicString::format((re::DynamicString *)"%s/%lu", (re::DynamicString *)&v131, v65[1], v14, v78);
          goto LABEL_115;
        }
      }
      v74 = (_anonymous_namespace_ *)re::DynamicString::format((re::DynamicString *)"%s/%s-%lu", (re::DynamicString *)&v131, v65[1], v73, v14);
LABEL_115:
      if ((BYTE8(v131) & 1) != 0)
        v15 = v132;
      else
        v15 = (unint64_t)&v131 + 9;
      *(_QWORD *)v122 = 0;
      *(_QWORD *)&v122[8] = &str_110;
      re::DynamicArray<re::StringID>::add((_QWORD *)(a1 + 80), (uint64_t *)v122);
      re::StringID::destroyString((re::StringID *)v122);
      if ((_QWORD)v131 && (BYTE8(v131) & 1) != 0)
        (*(void (**)(void))(*(_QWORD *)v131 + 40))();
      goto LABEL_121;
    }
LABEL_140:
    re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)&v97);
  }
}

uint64_t re::DynamicArray<re::FixedArray<re::StringID>>::deinit(uint64_t a1)
{
  uint64_t result;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;

  result = *(_QWORD *)a1;
  if (result)
  {
    v3 = *(_QWORD **)(a1 + 32);
    if (v3)
    {
      v4 = *(_QWORD *)(a1 + 16);
      if (v4)
      {
        v5 = 24 * v4;
        do
        {
          re::FixedArray<re::StringID>::deinit(v3);
          v3 += 3;
          v5 -= 24;
        }
        while (v5);
        result = *(_QWORD *)a1;
        v3 = *(_QWORD **)(a1 + 32);
      }
      result = (*(uint64_t (**)(uint64_t, _QWORD *))(*(_QWORD *)result + 40))(result, v3);
    }
    *(_QWORD *)(a1 + 32) = 0;
    *(_QWORD *)(a1 + 8) = 0;
    *(_QWORD *)(a1 + 16) = 0;
    *(_QWORD *)a1 = 0;
    ++*(_DWORD *)(a1 + 24);
  }
  return result;
}

_QWORD *re::DynamicArray<re::DynamicArray<float>>::resize(_QWORD *result, unint64_t a2)
{
  _QWORD *v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  _QWORD *v11;

  v3 = result;
  v4 = result[2];
  if (v4 >= a2)
  {
    if (v4 <= a2)
      return result;
    v8 = 40 * a2;
    v9 = a2;
    do
    {
      v10 = v3[4];
      v11 = (_QWORD *)(v10 + v8);
      result = *(_QWORD **)(v10 + v8);
      if (result)
      {
        if (v11[4])
          result = (_QWORD *)(*(uint64_t (**)(_QWORD *))(*result + 40))(result);
        v11[4] = 0;
        v11[1] = 0;
        v11[2] = 0;
        *v11 = 0;
        ++*(_DWORD *)(v10 + v8 + 24);
        v4 = v3[2];
      }
      ++v9;
      v8 += 40;
    }
    while (v9 < v4);
  }
  else
  {
    if (result[1] < a2)
    {
      result = re::DynamicArray<re::DynamicArray<float>>::setCapacity(result, a2);
      v4 = v3[2];
    }
    v5 = a2 - v4;
    if (a2 > v4)
    {
      v6 = 40 * v4;
      do
      {
        v7 = v3[4] + v6;
        *(_QWORD *)(v7 + 32) = 0;
        *(_QWORD *)(v7 + 8) = 0;
        *(_QWORD *)(v7 + 16) = 0;
        *(_QWORD *)v7 = 0;
        *(_DWORD *)(v7 + 24) = 0;
        v6 += 40;
        --v5;
      }
      while (v5);
    }
  }
  v3[2] = a2;
  ++*((_DWORD *)v3 + 6);
  return result;
}

void re::BlendShapeWeightsDefinitionAsset::constructBlendShapeWeights(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  unint64_t v6;
  uint64_t *v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t *v19;
  _anonymous_namespace_ *v20;
  uint64_t v21;
  int v22;
  const char *v23;
  __int16 v24;
  int v25;
  __int16 v26;
  unint64_t v27;
  __int16 v28;
  unint64_t v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  uint64_t v35;

  v35 = *MEMORY[0x24BDAC8D0];
  v5 = *(_QWORD *)(a3 + 16);
  v6 = *(_QWORD *)(a1 + 16);
  if (v5 != v6)
    goto LABEL_8;
  if (v5)
  {
    v7 = (uint64_t *)(*(_QWORD *)(a1 + 32) + 8);
    v8 = (uint64_t *)(*(_QWORD *)(a3 + 32) + 8);
    while (1)
    {
      v10 = *v8;
      v8 += 4;
      v9 = v10;
      v11 = *v7;
      v7 += 3;
      if (v9 != v11)
        break;
      if (!--v5)
        goto LABEL_6;
    }
LABEL_8:
    re::DynamicArray<re::BlendShapeWeights>::resize(a3, v6);
    v12 = 1;
    if (v6)
      goto LABEL_9;
    return;
  }
LABEL_6:
  v12 = 0;
  if (v6)
  {
LABEL_9:
    v13 = 0;
    v14 = 0;
    v15 = 0;
    while (1)
    {
      v16 = *(_QWORD *)(a1 + 16);
      if (v16 <= v15)
        break;
      re::make::shared::object<re::BlendShapeWeightsDefinition,re::FixedArray<re::StringID> const&>((const StringID **)(*(_QWORD *)(a1 + 32) + v13), &v20);
      v16 = *(_QWORD *)(a3 + 16);
      if (v12)
      {
        if (v16 <= v15)
          goto LABEL_27;
        v17 = *(_QWORD *)(a3 + 32);
        v18 = *(_QWORD *)(v17 + v14);
        if (v18)
        {
          if (*(_QWORD *)(v17 + v14 + 8))
          {
            (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v18 + 40))(v18, *(_QWORD *)(v17 + v14 + 16));
            *(_QWORD *)(v17 + v14 + 8) = 0;
            *(_QWORD *)(v17 + v14 + 16) = 0;
            v16 = *(_QWORD *)(a3 + 16);
          }
          *(_QWORD *)(v17 + v14) = 0;
        }
        if (v16 <= v15)
          goto LABEL_29;
        re::BlendShapeWeights::init((uint64_t *)(*(_QWORD *)(a3 + 32) + v14), (uint64_t *)&v20);
      }
      else
      {
        if (v16 <= v15)
          goto LABEL_28;
        v19 = (uint64_t *)(*(_QWORD *)(a3 + 32) + v14);
        if (!v19[3])
          re::BlendShapeWeights::reset(v19, (uint64_t *)&v20);
      }
      if (v20)

      ++v15;
      v14 += 32;
      v13 += 24;
      if (v6 == v15)
        return;
    }
    v21 = 0;
    v33 = 0u;
    v34 = 0u;
    v31 = 0u;
    v32 = 0u;
    v30 = 0u;
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    v22 = 136315906;
    v23 = "operator[]";
    v24 = 1024;
    v25 = 797;
    v26 = 2048;
    v27 = v15;
    v28 = 2048;
    v29 = v16;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_27:
    v21 = 0;
    v33 = 0u;
    v34 = 0u;
    v31 = 0u;
    v32 = 0u;
    v30 = 0u;
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    v22 = 136315906;
    v23 = "operator[]";
    v24 = 1024;
    v25 = 789;
    v26 = 2048;
    v27 = v15;
    v28 = 2048;
    v29 = v16;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_28:
    v21 = 0;
    v33 = 0u;
    v34 = 0u;
    v31 = 0u;
    v32 = 0u;
    v30 = 0u;
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    v22 = 136315906;
    v23 = "operator[]";
    v24 = 1024;
    v25 = 789;
    v26 = 2048;
    v27 = v15;
    v28 = 2048;
    v29 = v16;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_29:
    v21 = 0;
    v33 = 0u;
    v34 = 0u;
    v31 = 0u;
    v32 = 0u;
    v30 = 0u;
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    v22 = 136315906;
    v23 = "operator[]";
    v24 = 1024;
    v25 = 789;
    v26 = 2048;
    v27 = v15;
    v28 = 2048;
    v29 = v16;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
}

void re::DynamicArray<re::BlendShapeWeights>::resize(uint64_t a1, unint64_t a2)
{
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  _OWORD *v7;
  uint64_t v8;
  unint64_t v9;

  v4 = *(_QWORD *)(a1 + 16);
  if (v4 >= a2)
  {
    if (v4 <= a2)
      return;
    v8 = 32 * a2;
    v9 = a2;
    do
    {
      re::BlendShapeWeights::~BlendShapeWeights((re::BlendShapeWeights *)(*(_QWORD *)(a1 + 32) + v8));
      ++v9;
      v8 += 32;
    }
    while (v9 < *(_QWORD *)(a1 + 16));
  }
  else
  {
    if (*(_QWORD *)(a1 + 8) < a2)
    {
      re::DynamicArray<re::BlendShapeWeights>::setCapacity((_QWORD *)a1, a2);
      v4 = *(_QWORD *)(a1 + 16);
    }
    v5 = a2 - v4;
    if (a2 > v4)
    {
      v6 = 32 * v4;
      do
      {
        v7 = (_OWORD *)(*(_QWORD *)(a1 + 32) + v6);
        *v7 = 0uLL;
        v7[1] = 0uLL;
        v6 += 32;
        --v5;
      }
      while (v5);
    }
  }
  *(_QWORD *)(a1 + 16) = a2;
  ++*(_DWORD *)(a1 + 24);
}

re *re::BlendShapeWeightsDefinitionAssetLoader::unloadAsset(re *this, uint64_t a2)
{
  uint64_t v3;

  if (a2)
  {
    v3 = re::globalAllocators(this)[2];
    re::DynamicArray<re::StringID>::deinit(a2 + 80);
    re::DynamicArray<re::MeshDeformationIndex>::deinit(a2 + 40);
    re::DynamicArray<re::FixedArray<re::StringID>>::deinit(a2);
    return (re *)(*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v3 + 40))(v3, a2);
  }
  return this;
}

BOOL re::BlendShapeWeightsDefinitionAssetLoader::isSupportedSourceExtension(re::BlendShapeWeightsDefinitionAssetLoader *this, const char *a2)
{
  return strcasecmp(a2, "reblendshapeweights") == 0;
}

uint64_t re::BlendShapeWeightsDefinitionAssetLoader::introspectionType(re::BlendShapeWeightsDefinitionAssetLoader *this)
{
  unsigned __int8 v1;

  v1 = atomic_load((unsigned __int8 *)&qword_2540FF1F0);
  if ((v1 & 1) == 0 && __cxa_guard_acquire(&qword_2540FF1F0))
  {
    qword_2540FF1E8 = re::internal::getOrCreateInfo((re::internal *)"BlendShapeWeightsDefinitionAsset", (uint64_t (*)(re::internal *))re::allocInfo_BlendShapeWeightsDefinitionAsset, (re::IntrospectionBase *(*)(void))re::initInfo_BlendShapeWeightsDefinitionAsset, (void (*)(re::IntrospectionBase *))&unk_2540FF1E0, 0);
    __cxa_guard_release(&qword_2540FF1F0);
  }
  return qword_2540FF1E8;
}

void re::internal::defaultConstruct<re::BlendShapeWeightsMeshMap>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(_BYTE *)a3 = 0;
  *(_QWORD *)(a3 + 8) = 0;
  *(_QWORD *)(a3 + 16) = &str_110;
  *(_QWORD *)(a3 + 24) = 0;
  *(_QWORD *)(a3 + 32) = &str_110;
  *(_QWORD *)(a3 + 40) = 0;
}

void re::internal::defaultDestruct<re::BlendShapeWeightsMeshMap>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  re::StringID::destroyString((re::StringID *)(a3 + 24));
  re::StringID::destroyString((re::StringID *)(a3 + 8));
}

uint64_t re::internal::defaultConstructV2<re::BlendShapeWeightsMeshMap>(uint64_t result)
{
  *(_BYTE *)result = 0;
  *(_QWORD *)(result + 8) = 0;
  *(_QWORD *)(result + 16) = &str_110;
  *(_QWORD *)(result + 24) = 0;
  *(_QWORD *)(result + 32) = &str_110;
  *(_QWORD *)(result + 40) = 0;
  return result;
}

void re::internal::defaultDestructV2<re::BlendShapeWeightsMeshMap>(uint64_t a1)
{
  re::StringID::destroyString((re::StringID *)(a1 + 24));
  re::StringID::destroyString((re::StringID *)(a1 + 8));
}

uint64_t *re::allocInfo_BlendShapeWeightsDefinitionAsset(re *this)
{
  unsigned __int8 v1;
  uint64_t v3;

  v1 = atomic_load((unsigned __int8 *)&qword_2540FF1D0);
  if ((v1 & 1) == 0 && __cxa_guard_acquire(&qword_2540FF1D0))
  {
    ArcSharedObject::ArcSharedObject((ArcSharedObject *)&qword_2540FF2E0, 0);
    *(_QWORD *)(v3 + 22) = 0;
    qword_2540FF2F0 = 0;
    qword_2540FF300 = 0;
    qword_2540FF308 = 0xFFFFFFFFLL;
    qword_2540FF2E0 = (uint64_t)&off_24ED7DAA8;
    qword_2540FF310 = (uint64_t)"BlendShapeWeightsDefinitionAsset";
    dword_2540FF318 = 0;
    xmmword_2540FF320 = 0u;
    unk_2540FF330 = 0u;
    xmmword_2540FF340 = 0u;
    qword_2540FF350 = 0;
    __cxa_guard_release(&qword_2540FF1D0);
  }
  return &qword_2540FF2E0;
}

void re::initInfo_BlendShapeWeightsDefinitionAsset(re *this, re::IntrospectionBase *a2)
{
  const re::IntrospectionBase *v3;
  unsigned __int8 v4;
  re *v5;
  uint64_t *v6;
  const re::IntrospectionBase *v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t *v12;
  const re::IntrospectionBase *v13;
  uint64_t *v14;
  uint64_t v15;
  __int128 v16;
  _QWORD v17[2];
  __int128 v18;

  v17[0] = 0x4D45F6BDEA9529E4;
  v17[1] = "BlendShapeWeightsDefinitionAsset";
  re::StringID::destroyString((re::StringID *)v17);
  *((_OWORD *)this + 2) = v18;
  v4 = atomic_load((unsigned __int8 *)&qword_2540FF1D8);
  if ((v4 & 1) == 0)
  {
    v5 = (re *)__cxa_guard_acquire(&qword_2540FF1D8);
    if ((_DWORD)v5)
    {
      v6 = re::introspectionAllocator(v5);
      v8 = re::IntrospectionInfo<re::DynamicArray<re::FixedArray<re::StringID>>>::get(1, v7);
      v9 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v6 + 32))(v6, 72, 8);
      *(_DWORD *)v9 = 1;
      *(_QWORD *)(v9 + 8) = "blendShapeWeightNames";
      *(_QWORD *)(v9 + 16) = v8;
      *(_QWORD *)(v9 + 24) = 0;
      *(_QWORD *)(v9 + 32) = 1;
      *(_DWORD *)(v9 + 40) = 0;
      *(_QWORD *)(v9 + 48) = 0;
      *(_QWORD *)(v9 + 56) = 0;
      *(_DWORD *)(v9 + 64) = 0;
      qword_2540FF210 = v9;
      v10 = re::introspectionAllocator((re *)v9);
      re::IntrospectionInfo<re::DynamicArray<re::BlendShapeWeightsMeshMap>>::get();
      v11 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v10 + 32))(v10, 72, 8);
      *(_DWORD *)v11 = 1;
      *(_QWORD *)(v11 + 8) = "blendShapeWeightsMeshMapping";
      *(_QWORD *)(v11 + 16) = &qword_2540FF228;
      *(_QWORD *)(v11 + 24) = 0;
      *(_QWORD *)(v11 + 32) = 0x2800000002;
      *(_DWORD *)(v11 + 40) = 0;
      *(_QWORD *)(v11 + 48) = 0;
      *(_QWORD *)(v11 + 56) = 0;
      *(_DWORD *)(v11 + 64) = 0;
      qword_2540FF218 = v11;
      v12 = re::introspectionAllocator((re *)v11);
      v14 = re::IntrospectionInfo<re::DynamicArray<re::StringID>>::get(1, v13);
      v15 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v12 + 32))(v12, 72, 8);
      *(_DWORD *)v15 = 1;
      *(_QWORD *)(v15 + 8) = "blendShapeNames";
      *(_QWORD *)(v15 + 16) = v14;
      *(_QWORD *)(v15 + 24) = 0;
      *(_QWORD *)(v15 + 32) = 0x5000000003;
      *(_DWORD *)(v15 + 40) = 0;
      *(_QWORD *)(v15 + 48) = 0;
      *(_QWORD *)(v15 + 56) = 0;
      *(_DWORD *)(v15 + 64) = 0;
      qword_2540FF220 = v15;
      __cxa_guard_release(&qword_2540FF1D8);
    }
  }
  *((_QWORD *)this + 2) = 0x8800000008;
  *((_DWORD *)this + 6) = 8;
  *((_WORD *)this + 14) = 0;
  *((_DWORD *)this + 14) = 3;
  *((_QWORD *)this + 8) = &qword_2540FF210;
  *((_QWORD *)this + 9) = re::internal::defaultConstruct<re::BlendShapeWeightsDefinitionAsset>;
  *((_QWORD *)this + 10) = re::internal::defaultDestruct<re::BlendShapeWeightsDefinitionAsset>;
  *((_QWORD *)this + 11) = 0;
  *((_QWORD *)this + 12) = 0;
  *((_QWORD *)this + 13) = re::internal::defaultConstructV2<re::BlendShapeWeightsDefinitionAsset>;
  *((_QWORD *)this + 14) = re::internal::defaultDestructV2<re::BlendShapeWeightsDefinitionAsset>;
  re::IntrospectionRegistry::add(this, v3);
  v16 = v18;
}

uint64_t *re::IntrospectionInfo<re::DynamicArray<re::FixedArray<re::StringID>>>::get(int a1, const re::IntrospectionBase *a2)
{
  unsigned __int8 v3;
  int v4;
  re *v5;
  std::__shared_mutex_base *v6;
  uint64_t *v7;
  std::__shared_mutex_base *v8;
  uint64_t v10;
  int v11;
  re::IntrospectionRegistry *v12;
  const re::IntrospectionBase *v13;
  const char *v14;
  __int128 v15;
  __int128 v16;
  const char *v17;
  uint64_t v18[2];

  if ((v3 & 1) == 0
  {
    re::IntrospectionDynamicArrayBase::IntrospectionDynamicArrayBase((re::IntrospectionDynamicArrayBase *)&re::IntrospectionInfo<re::DynamicArray<re::FixedArray<re::StringID>>>::get(BOOL)::info);
    re::IntrospectionInfo<re::DynamicArray<re::FixedArray<re::StringID>>>::get(BOOL)::info = (uint64_t)&off_24ED369B0;
  }
  if (a1)
  {
    if (re::IntrospectionInfo<re::DynamicArray<re::FixedArray<re::StringID>>>::get(BOOL)::isInitialized)
      return &re::IntrospectionInfo<re::DynamicArray<re::FixedArray<re::StringID>>>::get(BOOL)::info;
  }
  else
  {
    re::IntrospectionSharedLock::IntrospectionSharedLock((re::IntrospectionSharedLock *)&v16);
    v4 = re::IntrospectionInfo<re::DynamicArray<re::FixedArray<re::StringID>>>::get(BOOL)::isInitialized;
    re::IntrospectionSharedLock::~IntrospectionSharedLock((re::IntrospectionSharedLock *)&v16);
    if (v4)
      return &re::IntrospectionInfo<re::DynamicArray<re::FixedArray<re::StringID>>>::get(BOOL)::info;
    v6 = re::introspectionSharedMutex(v5);
    std::__shared_mutex_base::lock(v6);
  }
  v7 = re::IntrospectionInfo<re::FixedArray<re::StringID>>::get(1, a2);
  if (re::IntrospectionInfo<re::DynamicArray<re::FixedArray<re::StringID>>>::get(BOOL)::isInitialized)
  {
    if ((a1 & 1) == 0)
    {
LABEL_9:
      v8 = re::introspectionSharedMutex((re *)v7);
      std::__shared_mutex_base::unlock(v8);
    }
  }
  else
  {
    v10 = (uint64_t)v7;
    re::IntrospectionInfo<re::DynamicArray<re::FixedArray<re::StringID>>>::get(BOOL)::isInitialized = 1;
    v11 = *((_DWORD *)v7 + 6);
    ArcSharedObject::ArcSharedObject((ArcSharedObject *)&re::IntrospectionInfo<re::DynamicArray<re::FixedArray<re::StringID>>>::get(BOOL)::info, 0);
    qword_255800DB0 = 0x2800000003;
    dword_255800DB8 = v11;
    word_255800DBC = 0;
    *(_QWORD *)&xmmword_255800DC0 = 0;
    *((_QWORD *)&xmmword_255800DC0 + 1) = 0xFFFFFFFFLL;
    qword_255800DD0 = v10;
    unk_255800DD8 = 0;
    re::IntrospectionInfo<re::DynamicArray<re::FixedArray<re::StringID>>>::get(BOOL)::info = (uint64_t)&off_24ED369B0;
    re::IntrospectionRegistry::add(v12, v13);
    re::getPrettyTypeName((re *)&re::IntrospectionInfo<re::DynamicArray<re::FixedArray<re::StringID>>>::get(BOOL)::info, (const re::IntrospectionBase *)&v16);
    if ((BYTE8(v16) & 1) != 0)
      v14 = v17;
    else
      v14 = (char *)&v16 + 9;
    if ((_QWORD)v16 && (BYTE8(v16) & 1) != 0)
      (*(void (**)(void))(*(_QWORD *)v16 + 40))();
    v16 = *(_OWORD *)(v10 + 32);
    xmmword_255800DC0 = v15;
    re::StringID::destroyString((re::StringID *)v18);
    if ((a1 & 1) == 0)
      goto LABEL_9;
  }
  return &re::IntrospectionInfo<re::DynamicArray<re::FixedArray<re::StringID>>>::get(BOOL)::info;
}

void re::IntrospectionInfo<re::DynamicArray<re::BlendShapeWeightsMeshMap>>::get()
{
  unsigned __int8 v0;
  uint64_t *v1;
  unsigned __int8 v2;
  const re::IntrospectionBase *v3;
  unsigned __int8 v4;
  int v5;
  re::IntrospectionRegistry *v6;
  const re::IntrospectionBase *v7;
  const char *v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  re *v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t *v16;
  const re::IntrospectionBase *v17;
  void *v18;
  uint64_t v19;
  __int128 v20;
  __int128 v21;
  uint64_t v22[2];
  __int128 v23;
  const char *v24;
  __int128 v25;

  v0 = atomic_load((unsigned __int8 *)&qword_2540FF1F8);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_2540FF1F8))
  {
    re::IntrospectionDynamicArrayBase::IntrospectionDynamicArrayBase((re::IntrospectionDynamicArrayBase *)&qword_2540FF228);
    qword_2540FF228 = (uint64_t)&off_24ED36A48;
    __cxa_guard_release(&qword_2540FF1F8);
  }
  if ((_MergedGlobals_75 & 1) == 0)
  {
    v1 = (uint64_t *)qword_2540FF1C8;
    if (qword_2540FF1C8)
      goto LABEL_7;
    v2 = atomic_load((unsigned __int8 *)&qword_2540FF1B8);
    if ((v2 & 1) == 0 && __cxa_guard_acquire(&qword_2540FF1B8))
    {
      ArcSharedObject::ArcSharedObject((ArcSharedObject *)&qword_2540FF268, 0);
      *(uint64_t *)((char *)&qword_2540FF278 + 6) = 0;
      qword_2540FF278 = 0;
      *(_QWORD *)&xmmword_2540FF288 = 0;
      *((_QWORD *)&xmmword_2540FF288 + 1) = 0xFFFFFFFFLL;
      qword_2540FF268 = (uint64_t)&off_24ED7DAA8;
      qword_2540FF298 = (uint64_t)"BlendShapeWeightsMeshMap";
      dword_2540FF2A0 = 0;
      xmmword_2540FF2A8 = 0u;
      *(_OWORD *)&qword_2540FF2B8 = 0u;
      xmmword_2540FF2C8 = 0u;
      qword_2540FF2D8 = 0;
      __cxa_guard_release(&qword_2540FF1B8);
    }
    qword_2540FF1C8 = (uint64_t)&qword_2540FF268;
    *(_QWORD *)&v25 = 0xF3E33F2C32AF1988;
    *((_QWORD *)&v25 + 1) = "BlendShapeWeightsMeshMap";
    re::StringID::destroyString((re::StringID *)&v25);
    xmmword_2540FF288 = v23;
    v4 = atomic_load((unsigned __int8 *)&qword_2540FF1C0);
    if ((v4 & 1) == 0)
    {
      v12 = (re *)__cxa_guard_acquire(&qword_2540FF1C0);
      if ((_DWORD)v12)
      {
        v13 = re::introspectionAllocator(v12);
        v14 = re::introspect_MeshIdentifierAsset((re::IntrospectionBase **)1);
        v15 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v13 + 32))(v13, 72, 8);
        *(_DWORD *)v15 = 1;
        *(_QWORD *)(v15 + 8) = "meshIdentifier";
        *(_QWORD *)(v15 + 16) = v14;
        *(_QWORD *)(v15 + 24) = 0;
        *(_QWORD *)(v15 + 32) = 1;
        *(_DWORD *)(v15 + 40) = 0;
        *(_QWORD *)(v15 + 48) = 0;
        *(_QWORD *)(v15 + 56) = 0;
        *(_DWORD *)(v15 + 64) = 0;
        qword_2540FF200 = v15;
        v16 = re::introspectionAllocator((re *)v15);
        v18 = re::introspect_uint32_t((re *)1, v17);
        v19 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v16 + 32))(v16, 72, 8);
        *(_DWORD *)v19 = 1;
        *(_QWORD *)(v19 + 8) = "blendShapeWeightsIndex";
        *(_QWORD *)(v19 + 16) = v18;
        *(_QWORD *)(v19 + 24) = 0;
        *(_QWORD *)(v19 + 32) = 0x2800000002;
        *(_DWORD *)(v19 + 40) = 0;
        *(_QWORD *)(v19 + 48) = 0;
        *(_QWORD *)(v19 + 56) = 0;
        *(_DWORD *)(v19 + 64) = 0;
        qword_2540FF208 = v19;
        __cxa_guard_release(&qword_2540FF1C0);
      }
    }
    qword_2540FF278 = 0x3000000008;
    v1 = &qword_2540FF268;
    dword_2540FF280 = 8;
    word_2540FF284 = 0;
    dword_2540FF2A0 = 2;
    *(_QWORD *)&xmmword_2540FF2A8 = &qword_2540FF200;
    *((_QWORD *)&xmmword_2540FF2A8 + 1) = re::internal::defaultConstruct<re::BlendShapeWeightsMeshMap>;
    qword_2540FF2B8 = (uint64_t)re::internal::defaultDestruct<re::BlendShapeWeightsMeshMap>;
    unk_2540FF2C0 = 0;
    *(_QWORD *)&xmmword_2540FF2C8 = 0;
    *((_QWORD *)&xmmword_2540FF2C8 + 1) = re::internal::defaultConstructV2<re::BlendShapeWeightsMeshMap>;
    qword_2540FF2D8 = (uint64_t)re::internal::defaultDestructV2<re::BlendShapeWeightsMeshMap>;
    re::IntrospectionRegistry::add((re::IntrospectionRegistry *)&qword_2540FF268, v3);
    v25 = v23;
    if ((_MergedGlobals_75 & 1) == 0)
    {
LABEL_7:
      _MergedGlobals_75 = 1;
      v5 = *((_DWORD *)v1 + 6);
      ArcSharedObject::ArcSharedObject((ArcSharedObject *)&qword_2540FF228, 0);
      qword_2540FF238 = 0x2800000003;
      dword_2540FF240 = v5;
      word_2540FF244 = 0;
      *(_QWORD *)&xmmword_2540FF248 = 0;
      *((_QWORD *)&xmmword_2540FF248 + 1) = 0xFFFFFFFFLL;
      qword_2540FF258 = (uint64_t)v1;
      unk_2540FF260 = 0;
      qword_2540FF228 = (uint64_t)&off_24ED36A48;
      re::IntrospectionRegistry::add(v6, v7);
      re::getPrettyTypeName((re *)&qword_2540FF228, (const re::IntrospectionBase *)&v23);
      if ((BYTE8(v23) & 1) != 0)
        v8 = v24;
      else
        v8 = (char *)&v23 + 9;
      if ((_QWORD)v23 && (BYTE8(v23) & 1) != 0)
        (*(void (**)(void))(*(_QWORD *)v23 + 40))();
      v21 = *((_OWORD *)v1 + 2);
      v9 = (uint64_t *)re::HashTable<re::StringID,re::StateParameterInt *,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::tryGet((uint64_t)&unk_25582A358, v22);
      if (v9)
      {
        v10 = *v9;
        *((_QWORD *)&v20 + 1) = v10;
      }
      else
      {
        v25 = v21;
        re::TypeBuilder::beginListType((uint64_t)&v23, v22, 1, 0x28uLL, 8uLL, &v25);
        re::TypeBuilder::setConstructor((uint64_t)&v23, (uint64_t)re::TypeBuilderHelper::registerDynamicArray<re::BlendShapeWeightsMeshMap>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,void *)#1}::__invoke);
        re::TypeBuilder::setDestructor((uint64_t)&v23, (uint64_t)re::TypeBuilderHelper::registerDynamicArray<re::BlendShapeWeightsMeshMap>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,void *)#2}::__invoke);
        re::TypeBuilder::setListUsesContiguousStorage((uint64_t)&v23, 1);
        re::TypeBuilder::setListAccessors((uint64_t)&v23, (uint64_t)re::TypeBuilderHelper::registerDynamicArray<re::BlendShapeWeightsMeshMap>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *)#1}::__invoke, (uint64_t)re::TypeBuilderHelper::registerDynamicArray<re::BlendShapeWeightsMeshMap>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,unsigned long)#1}::__invoke);
        re::TypeBuilder::setListIndexer((uint64_t)&v23, (void *(*)(void *, unint64_t))re::TypeBuilderHelper::registerDynamicArray<re::BlendShapeWeightsMeshMap>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,unsigned long)#1}::__invoke);
        re::TypeBuilder::setListIterator((uint64_t)&v23, (void *(*)(void *, re::Allocator *))re::TypeBuilderHelper::registerDynamicArray<re::BlendShapeWeightsMeshMap>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::Allocator *)#1}::__invoke, (void *(*)(void *))re::TypeBuilderHelper::registerDynamicArray<re::BlendShapeWeightsMeshMap>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *)#2}::__invoke, (void (*)(void *, re::Allocator *))re::TypeBuilderHelper::registerDynamicArray<re::BlendShapeWeightsMeshMap>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::Allocator *)#2}::__invoke);
        re::TypeBuilder::~TypeBuilder((re::TypeBuilder *)&v23, v11);
      }
      xmmword_2540FF248 = v20;
      re::StringID::destroyString((re::StringID *)v22);
    }
  }
}

double re::internal::defaultConstruct<re::BlendShapeWeightsDefinitionAsset>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  double result;

  *(_QWORD *)a3 = 0;
  *(_QWORD *)(a3 + 8) = 0;
  *(_DWORD *)(a3 + 24) = 0;
  *(_QWORD *)(a3 + 16) = 0;
  result = 0.0;
  *(_OWORD *)(a3 + 32) = 0u;
  *(_OWORD *)(a3 + 48) = 0u;
  *(_DWORD *)(a3 + 64) = 0;
  *(_OWORD *)(a3 + 72) = 0u;
  *(_OWORD *)(a3 + 88) = 0u;
  *(_DWORD *)(a3 + 104) = 0;
  *(_QWORD *)(a3 + 112) = 0;
  *(_QWORD *)(a3 + 120) = a3;
  *(_QWORD *)(a3 + 128) = a3 + 40;
  return result;
}

uint64_t re::internal::defaultDestruct<re::BlendShapeWeightsDefinitionAsset>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  re::DynamicArray<re::StringID>::deinit(a3 + 80);
  re::DynamicArray<re::MeshDeformationIndex>::deinit(a3 + 40);
  return re::DynamicArray<re::FixedArray<re::StringID>>::deinit(a3);
}

double re::internal::defaultConstructV2<re::BlendShapeWeightsDefinitionAsset>(uint64_t a1)
{
  double result;

  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_DWORD *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  result = 0.0;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_DWORD *)(a1 + 64) = 0;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_DWORD *)(a1 + 104) = 0;
  *(_QWORD *)(a1 + 112) = 0;
  *(_QWORD *)(a1 + 120) = a1;
  *(_QWORD *)(a1 + 128) = a1 + 40;
  return result;
}

uint64_t re::internal::defaultDestructV2<re::BlendShapeWeightsDefinitionAsset>(uint64_t a1)
{
  re::DynamicArray<re::StringID>::deinit(a1 + 80);
  re::DynamicArray<re::MeshDeformationIndex>::deinit(a1 + 40);
  return re::DynamicArray<re::FixedArray<re::StringID>>::deinit(a1);
}

void re::BlendShapeWeightsDefinitionAssetLoader::~BlendShapeWeightsDefinitionAssetLoader(re::BlendShapeWeightsDefinitionAssetLoader *this)
{
  JUMPOUT(0x2276933B8);
}

uint64_t re::HashSetBase<re::StringID,re::StringID,re::internal::ValueAsKey<re::StringID>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::add(uint64_t a1, uint64_t *a2)
{
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  unsigned int v11;

  v4 = 0xBF58476D1CE4E5B9 * (((unint64_t)*a2 >> 31) ^ ((unint64_t)*a2 >> 1));
  v5 = (0x94D049BB133111EBLL * (v4 ^ (v4 >> 27))) ^ ((0x94D049BB133111EBLL * (v4 ^ (v4 >> 27))) >> 31);
  v6 = *(unsigned int *)(a1 + 24);
  if (!(_DWORD)v6)
  {
    LODWORD(v7) = 0;
    goto LABEL_8;
  }
  v7 = v5 % v6;
  v8 = *(unsigned int *)(*(_QWORD *)(a1 + 8) + 4 * (v5 % v6));
  if ((_DWORD)v8 == 0x7FFFFFFF)
  {
LABEL_8:
    v11 = re::HashSetBase<re::StringID,re::StringID,re::internal::ValueAsKey<re::StringID>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::addAsMove(a1, v7, v5, (uint64_t)a2, a2);
    ++*(_DWORD *)(a1 + 40);
    return *(_QWORD *)(a1 + 16) + 24 * v11 + 8;
  }
  v9 = *(_QWORD *)(a1 + 16);
  while (1)
  {
    v10 = (_QWORD *)(v9 + 24 * v8 + 8);
    if (re::StringID::operator==(v10, a2))
      return (uint64_t)v10;
    v8 = *(_DWORD *)(v9 + 24 * v8) & 0x7FFFFFFF;
    if (v8 == 0x7FFFFFFF)
      goto LABEL_8;
  }
}

_QWORD *re::DynamicArray<re::FixedArray<re::StringID>>::add(_QWORD *this, _QWORD *a2)
{
  _QWORD *v3;
  unint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;

  v3 = this;
  v4 = this[2];
  if (v4 >= this[1])
  {
    this = re::DynamicArray<re::FixedArray<re::StringID>>::growCapacity(this, v4 + 1);
    v4 = v3[2];
  }
  v5 = (_QWORD *)(v3[4] + 24 * v4);
  *v5 = 0;
  v5[1] = 0;
  v5[2] = 0;
  v6 = a2[1];
  *v5 = *a2;
  v5[1] = v6;
  *a2 = 0;
  a2[1] = 0;
  v7 = v5[2];
  v5[2] = a2[2];
  a2[2] = v7;
  ++v3[2];
  ++*((_DWORD *)v3 + 6);
  return this;
}

void re::HashSetBase<re::StringID,re::StringID,re::internal::ValueAsKey<re::StringID>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::init(uint64_t a1, uint64_t a2, signed int a3)
{
  unint64_t v4;
  unsigned int *v5;
  unint64_t v6;
  unsigned int *v7;
  unsigned int *v8;
  signed int v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  char *v14;

  v4 = 245;
  v5 = (unsigned int *)&re::internal::PrimeHelper::s_primes;
  do
  {
    v6 = v4 >> 1;
    v7 = &v5[v4 >> 1];
    v9 = *v7;
    v8 = v7 + 1;
    v4 += ~(v4 >> 1);
    if (v9 < a3)
      v5 = v8;
    else
      v4 = v6;
  }
  while (v4);
  v10 = *v5;
  *(_QWORD *)a1 = a2;
  v11 = (4 * v10 + 15) & 0x7FFFFFFF0;
  v12 = (char *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 32))(a2, v11 + 24 * v10, 16);
  if (v12)
  {
    v14 = v12;
    *(_QWORD *)(a1 + 8) = v12;
    if ((_DWORD)v10)
      memset_pattern16(v12, &memset_pattern_8, 4 * v10);
    *(_QWORD *)(a1 + 16) = &v14[v11];
    *(_DWORD *)(a1 + 24) = v10;
    *(_DWORD *)(a1 + 40) = 0;
  }
  else
  {
    re::internal::assertLog((re::internal *)4, v13, "assertion failure: '%s' (%s:line %i) Out of memory.", "temp", "init", 600);
    _os_crash();
    __break(1u);
  }
}

uint64_t re::HashSetBase<re::StringID,re::StringID,re::internal::ValueAsKey<re::StringID>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::addAsMove(uint64_t a1, unsigned int a2, unint64_t a3, uint64_t a4, uint64_t *a5)
{
  uint64_t v7;
  int v8;
  uint64_t v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v7 = *(unsigned int *)(a1 + 36);
  if ((_DWORD)v7 == 0x7FFFFFFF)
  {
    v7 = *(unsigned int *)(a1 + 32);
    v8 = v7;
    if ((_DWORD)v7 == *(_DWORD *)(a1 + 24))
    {
      re::HashSetBase<re::StringID,re::StringID,re::internal::ValueAsKey<re::StringID>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::setCapacity(a1, 2 * *(_DWORD *)(a1 + 28));
      a2 = a3 % *(unsigned int *)(a1 + 24);
      v8 = *(_DWORD *)(a1 + 32);
    }
    *(_DWORD *)(a1 + 32) = v8 + 1;
    v10 = *(_QWORD *)(a1 + 16);
    v11 = *(_DWORD *)(v10 + 24 * v7);
  }
  else
  {
    v10 = *(_QWORD *)(a1 + 16);
    v11 = *(_DWORD *)(v10 + 24 * v7);
    *(_DWORD *)(a1 + 36) = v11 & 0x7FFFFFFF;
  }
  v12 = 24 * v7;
  *(_DWORD *)(v10 + v12) = v11 | 0x80000000;
  *(_DWORD *)(*(_QWORD *)(a1 + 16) + v12) = *(_DWORD *)(*(_QWORD *)(a1 + 16) + 24 * v7) & 0x80000000 | *(_DWORD *)(*(_QWORD *)(a1 + 8) + 4 * a2);
  v13 = *(_QWORD *)(a1 + 16) + 24 * v7;
  v14 = *a5;
  *(_QWORD *)(v13 + 8) = *(_QWORD *)(v13 + 8) & 0xFFFFFFFFFFFFFFFELL | *a5 & 1;
  *(_QWORD *)(v13 + 8) = *a5 & 0xFFFFFFFFFFFFFFFELL | v14 & 1;
  *(_QWORD *)(v13 + 16) = a5[1];
  *a5 = 0;
  a5[1] = (uint64_t)&str_110;
  *(_DWORD *)(*(_QWORD *)(a1 + 8) + 4 * a2) = v7;
  ++*(_DWORD *)(a1 + 28);
  return v7;
}

void re::HashSetBase<re::StringID,re::StringID,re::internal::ValueAsKey<re::StringID>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::setCapacity(uint64_t a1, unsigned int a2)
{
  uint64_t v4;
  __int128 v5;
  uint64_t v6;
  unsigned int v7;
  __int128 v8;
  unsigned int v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  signed int v14;
  _BYTE v15[44];

  v4 = *(_QWORD *)a1;
  if (*(_QWORD *)a1)
  {
    if (a2 && *(_DWORD *)(a1 + 24) != a2 && *(_DWORD *)(a1 + 28) <= a2)
    {
      memset(v15, 0, 36);
      *(_QWORD *)&v15[36] = 0x7FFFFFFFLL;
      re::HashSetBase<re::StringID,re::StringID,re::internal::ValueAsKey<re::StringID>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::init((uint64_t)v15, v4, a2);
      v5 = *(_OWORD *)v15;
      *(_OWORD *)v15 = *(_OWORD *)a1;
      *(_OWORD *)a1 = v5;
      v6 = *(_QWORD *)&v15[16];
      *(_QWORD *)&v15[16] = *(_QWORD *)(a1 + 16);
      *(_QWORD *)(a1 + 16) = v6;
      v8 = *(_OWORD *)&v15[24];
      *(_OWORD *)&v15[24] = *(_OWORD *)(a1 + 24);
      v7 = *(_DWORD *)&v15[32];
      *(_OWORD *)(a1 + 24) = v8;
      v9 = v7;
      if (v7)
      {
        v10 = 0;
        v11 = 0;
        do
        {
          if ((*(_DWORD *)(*(_QWORD *)&v15[16] + v10) & 0x80000000) != 0)
          {
            v12 = 0xBF58476D1CE4E5B9
                * ((*(_QWORD *)(*(_QWORD *)&v15[16] + v10 + 8) >> 31) ^ (*(_QWORD *)(*(_QWORD *)&v15[16] + v10 + 8) >> 1));
            v13 = (0x94D049BB133111EBLL * (v12 ^ (v12 >> 27))) ^ ((0x94D049BB133111EBLL * (v12 ^ (v12 >> 27))) >> 31);
            re::HashSetBase<re::StringID,re::StringID,re::internal::ValueAsKey<re::StringID>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::addAsMove(a1, v13 % *(unsigned int *)(a1 + 24), v13, *(_QWORD *)&v15[16] + v10 + 8, *(_QWORD *)&v15[16] + v10 + 8);
            v9 = *(_DWORD *)&v15[32];
          }
          ++v11;
          v10 += 24;
        }
        while (v11 < v9);
      }
      re::HashSetBase<re::StringID,re::StringID,re::internal::ValueAsKey<re::StringID>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::deinit((uint64_t *)v15);
    }
  }
  else
  {
    if (a2)
      v14 = a2;
    else
      v14 = 3;
  }
}

double re::HashSetBase<re::StringID,re::StringID,re::internal::ValueAsKey<re::StringID>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::deinit(uint64_t *a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t i;
  uint64_t v6;
  int v7;
  double result;

  v2 = *a1;
  if (v2)
  {
    v3 = *((unsigned int *)a1 + 8);
    if ((_DWORD)v3)
    {
      v4 = 0;
      for (i = 0; i < v3; ++i)
      {
        v6 = a1[2];
        v7 = *(_DWORD *)(v6 + v4);
        if (v7 < 0)
        {
          *(_DWORD *)(v6 + v4) = v7 & 0x7FFFFFFF;
          re::StringID::destroyString((re::StringID *)(v6 + v4 + 8));
          v3 = *((unsigned int *)a1 + 8);
        }
        v4 += 24;
      }
      v2 = *a1;
    }
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v2 + 40))(v2, a1[1]);
    *((_DWORD *)a1 + 8) = 0;
    *(_OWORD *)a1 = 0u;
    *((_OWORD *)a1 + 1) = 0u;
    *(_QWORD *)&result = 0x7FFFFFFFLL;
    *(uint64_t *)((char *)a1 + 36) = 0x7FFFFFFFLL;
  }
  return result;
}

_QWORD *re::DynamicArray<re::FixedArray<re::StringID>>::growCapacity(_QWORD *this, unint64_t a2)
{
  unint64_t v2;
  unint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  BOOL v6;
  unint64_t v7;

  v2 = this[1];
  if (v2 < a2)
  {
    v3 = a2;
    v4 = this;
    if (*this)
    {
      v5 = 2 * v2;
      v6 = v2 == 0;
      v7 = 8;
      if (!v6)
        v7 = v5;
      if (v7 > a2)
        a2 = v7;
      return re::DynamicArray<re::FixedArray<re::StringID>>::setCapacity(this, a2);
    }
    else
    {
      this = re::DynamicArray<re::FixedArray<re::StringID>>::setCapacity(v4, v3);
      ++*((_DWORD *)v4 + 6);
    }
  }
  return this;
}

_QWORD *re::DynamicArray<re::FixedArray<re::StringID>>::setCapacity(_QWORD *result, unint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v5;
  uint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  uint64_t v9;
  _QWORD *v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;

  v3 = result[1];
  if (v3 != a2)
  {
    v5 = result;
    if (result[2] <= a2)
    {
      result = (_QWORD *)*result;
      if (!*v5)
      {
        result = (_QWORD *)re::DynamicArray<re::FixedArray<re::StringID>>::setCapacity(v5, a2);
        ++*((_DWORD *)v5 + 6);
        return result;
      }
      if (a2)
      {
        if (is_mul_ok(a2, 0x18uLL))
        {
          v2 = 24 * a2;
          result = (_QWORD *)(*(uint64_t (**)(_QWORD *, unint64_t, uint64_t))(*result + 32))(result, 24 * a2, 8);
          if (result)
          {
            v7 = result;
            if (!v5[1])
              goto LABEL_16;
            goto LABEL_11;
          }
        }
        else
        {
          re::internal::assertLog((re::internal *)6, a2, "assertion failure: '%s' (%s:line %i) Size overflow in DynamicArray<T>::setCapacity(). Element size = %zu, capacity = %zu", "!overflow", "setCapacity", 615, 24, a2);
          _os_crash();
          __break(1u);
        }
        re::internal::assertLog((re::internal *)6, v6, "assertion failure: '%s' (%s:line %i) DynamicArray<T> is out of memory (tried to allocate %zu bytes from allocator '%s').", "newData", "setCapacity", 619, v2, *(_QWORD *)(*v5 + 8));
        result = (_QWORD *)_os_crash();
        __break(1u);
        return result;
      }
      v7 = 0;
      if (!v3)
      {
LABEL_16:
        v5[4] = v7;
        v5[1] = a2;
        return result;
      }
LABEL_11:
      v8 = (_QWORD *)v5[4];
      v9 = v5[2];
      if (v9)
      {
        v10 = &v8[3 * v9];
        v11 = v7;
        do
        {
          *v11 = 0;
          v11[1] = 0;
          v11[2] = 0;
          v12 = v8[1];
          *v11 = *v8;
          v11[1] = v12;
          *v8 = 0;
          v8[1] = 0;
          v13 = v11[2];
          v11[2] = v8[2];
          v8[2] = v13;
          re::FixedArray<re::StringID>::deinit(v8);
          v8 += 3;
          v11 += 3;
        }
        while (v8 != v10);
        v8 = (_QWORD *)v5[4];
      }
      result = (_QWORD *)(*(uint64_t (**)(_QWORD, _QWORD *))(*(_QWORD *)*v5 + 40))(*v5, v8);
      goto LABEL_16;
    }
  }
  return result;
}

_QWORD *re::DynamicArray<re::HashSet<re::StringID,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>>::setCapacity(_QWORD *result, unint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;

  v3 = result[1];
  if (v3 != a2)
  {
    v5 = result;
    if (result[2] <= a2)
    {
      result = (_QWORD *)*result;
      if (!*v5)
      {
        result = (_QWORD *)re::DynamicArray<re::HashSet<re::StringID,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>>::setCapacity(v5, a2);
        ++*((_DWORD *)v5 + 6);
        return result;
      }
      if (a2)
      {
        if (is_mul_ok(a2, 0x30uLL))
        {
          v2 = 48 * a2;
          result = (_QWORD *)(*(uint64_t (**)(_QWORD *, unint64_t, uint64_t))(*result + 32))(result, 48 * a2, 8);
          if (result)
          {
            v7 = result;
            if (!v5[1])
              goto LABEL_16;
            goto LABEL_11;
          }
        }
        else
        {
          re::internal::assertLog((re::internal *)6, a2, "assertion failure: '%s' (%s:line %i) Size overflow in DynamicArray<T>::setCapacity(). Element size = %zu, capacity = %zu", "!overflow", "setCapacity", 615, 48, a2);
          _os_crash();
          __break(1u);
        }
        re::internal::assertLog((re::internal *)6, v6, "assertion failure: '%s' (%s:line %i) DynamicArray<T> is out of memory (tried to allocate %zu bytes from allocator '%s').", "newData", "setCapacity", 619, v2, *(_QWORD *)(*v5 + 8));
        result = (_QWORD *)_os_crash();
        __break(1u);
        return result;
      }
      v7 = 0;
      if (!v3)
      {
LABEL_16:
        v5[4] = v7;
        v5[1] = a2;
        return result;
      }
LABEL_11:
      v8 = (uint64_t *)v5[4];
      v9 = v5[2];
      if (v9)
      {
        v10 = 48 * v9;
        v11 = v7;
        do
        {
          *((_DWORD *)v11 + 8) = 0;
          *(_OWORD *)v11 = 0u;
          *((_OWORD *)v11 + 1) = 0u;
          *(_QWORD *)((char *)v11 + 36) = 0x7FFFFFFFLL;
          re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::swap(v11, v8);
          re::HashSetBase<re::StringID,re::StringID,re::internal::ValueAsKey<re::StringID>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::deinit(v8);
          v8 += 6;
          v11 += 6;
          v10 -= 48;
        }
        while (v10);
        v8 = (uint64_t *)v5[4];
      }
      result = (_QWORD *)(*(uint64_t (**)(_QWORD, uint64_t *))(*(_QWORD *)*v5 + 40))(*v5, v8);
      goto LABEL_16;
    }
  }
  return result;
}

_QWORD *re::DynamicArray<re::BlendShapeWeightsMeshMap>::add(_QWORD *this, uint64_t a2)
{
  _QWORD *v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v3 = this;
  v4 = this[2];
  if (v4 >= this[1])
  {
    this = re::DynamicArray<re::BlendShapeWeightsMeshMap>::growCapacity(this, v4 + 1);
    v4 = v3[2];
  }
  v5 = v3[4] + 48 * v4;
  *(_BYTE *)v5 = *(_BYTE *)a2;
  v6 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(v5 + 8) = *(_QWORD *)(v5 + 8) & 0xFFFFFFFFFFFFFFFELL | v6 & 1;
  *(_QWORD *)(v5 + 8) = *(_QWORD *)(a2 + 8) & 0xFFFFFFFFFFFFFFFELL | v6 & 1;
  *(_QWORD *)(v5 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = &str_110;
  v7 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(v5 + 24) = *(_QWORD *)(v5 + 24) & 0xFFFFFFFFFFFFFFFELL | v7 & 1;
  *(_QWORD *)(v5 + 24) = *(_QWORD *)(a2 + 24) & 0xFFFFFFFFFFFFFFFELL | v7 & 1;
  *(_QWORD *)(v5 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a2 + 24) = 0;
  *(_QWORD *)(a2 + 32) = &str_110;
  *(_QWORD *)(v5 + 40) = *(_QWORD *)(a2 + 40);
  ++v3[2];
  ++*((_DWORD *)v3 + 6);
  return this;
}

_QWORD *re::DynamicArray<re::BlendShapeWeightsMeshMap>::growCapacity(_QWORD *this, unint64_t a2)
{
  unint64_t v2;
  unint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  BOOL v6;
  unint64_t v7;

  v2 = this[1];
  if (v2 < a2)
  {
    v3 = a2;
    v4 = this;
    if (*this)
    {
      v5 = 2 * v2;
      v6 = v2 == 0;
      v7 = 8;
      if (!v6)
        v7 = v5;
      if (v7 > a2)
        a2 = v7;
      return re::DynamicArray<re::BlendShapeWeightsMeshMap>::setCapacity(this, a2);
    }
    else
    {
      this = re::DynamicArray<re::BlendShapeWeightsMeshMap>::setCapacity(v4, v3);
      ++*((_DWORD *)v4 + 6);
    }
  }
  return this;
}

_QWORD *re::DynamicArray<re::BlendShapeWeightsMeshMap>::setCapacity(_QWORD *result, unint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v5;
  uint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  uint64_t v9;
  _QWORD *v10;
  _QWORD *v11;
  char v12;
  re::StringID *v13;
  re::StringID *v14;
  uint64_t v15;

  v3 = result[1];
  if (v3 != a2)
  {
    v5 = result;
    if (result[2] <= a2)
    {
      result = (_QWORD *)*result;
      if (!*v5)
      {
        result = (_QWORD *)re::DynamicArray<re::BlendShapeWeightsMeshMap>::setCapacity(v5, a2);
        ++*((_DWORD *)v5 + 6);
        return result;
      }
      if (a2)
      {
        if (is_mul_ok(a2, 0x30uLL))
        {
          v2 = 48 * a2;
          result = (_QWORD *)(*(uint64_t (**)(_QWORD *, unint64_t, uint64_t))(*result + 32))(result, 48 * a2, 8);
          if (result)
          {
            v7 = result;
            if (!v5[1])
              goto LABEL_16;
            goto LABEL_11;
          }
        }
        else
        {
          re::internal::assertLog((re::internal *)6, a2, "assertion failure: '%s' (%s:line %i) Size overflow in DynamicArray<T>::setCapacity(). Element size = %zu, capacity = %zu", "!overflow", "setCapacity", 615, 48, a2);
          _os_crash();
          __break(1u);
        }
        re::internal::assertLog((re::internal *)6, v6, "assertion failure: '%s' (%s:line %i) DynamicArray<T> is out of memory (tried to allocate %zu bytes from allocator '%s').", "newData", "setCapacity", 619, v2, *(_QWORD *)(*v5 + 8));
        result = (_QWORD *)_os_crash();
        __break(1u);
        return result;
      }
      v7 = 0;
      if (!v3)
      {
LABEL_16:
        v5[4] = v7;
        v5[1] = a2;
        return result;
      }
LABEL_11:
      v8 = (_QWORD *)v5[4];
      v9 = v5[2];
      if (v9)
      {
        v10 = &v8[6 * v9];
        v11 = v7;
        do
        {
          *(_BYTE *)v11 = *(_BYTE *)v8;
          v13 = (re::StringID *)(v8 + 1);
          v12 = v8[1];
          v11[1] = v11[1] & 0xFFFFFFFFFFFFFFFELL | v8[1] & 1;
          v11[1] = v8[1] & 0xFFFFFFFFFFFFFFFELL | v12 & 1;
          v11[2] = v8[2];
          v8[2] = &str_110;
          v8[1] = 0;
          v15 = v8[3];
          v14 = (re::StringID *)(v8 + 3);
          v11[3] = v11[3] & 0xFFFFFFFFFFFFFFFELL | v15 & 1;
          v11[3] = *(_QWORD *)v14 & 0xFFFFFFFFFFFFFFFELL | v15 & 1;
          v11[4] = *((_QWORD *)v14 + 1);
          *(_QWORD *)v14 = 0;
          *((_QWORD *)v14 + 1) = &str_110;
          v11[5] = *((_QWORD *)v14 + 2);
          re::StringID::destroyString(v14);
          re::StringID::destroyString(v13);
          v8 = (_QWORD *)((char *)v14 + 24);
          v11 += 6;
        }
        while (v8 != v10);
        v8 = (_QWORD *)v5[4];
      }
      result = (_QWORD *)(*(uint64_t (**)(_QWORD, _QWORD *))(*(_QWORD *)*v5 + 40))(*v5, v8);
      goto LABEL_16;
    }
  }
  return result;
}

_QWORD *re::FixedArray<unsigned int>::init<unsigned int const&>(_QWORD *result, uint64_t a2, unint64_t a3, _DWORD *a4)
{
  _QWORD *v6;
  uint64_t v7;
  unint64_t v8;

  *result = a2;
  result[1] = a3;
  if (!a3)
    return result;
  if (a3 >> 62)
  {
    re::internal::assertLog((re::internal *)6, a2, "assertion failure: '%s' (%s:line %i) Size overflow in FixedArray<T>::init(). Element size = %zu, count = %zu", "!overflow", "init", 324, 4, a3);
    _os_crash();
    __break(1u);
    goto LABEL_9;
  }
  v6 = result;
  result = (_QWORD *)(*(uint64_t (**)(uint64_t, unint64_t, uint64_t))(*(_QWORD *)a2 + 32))(a2, 4 * a3, 4);
  v6[2] = result;
  if (!result)
  {
LABEL_9:
    re::internal::assertLog((re::internal *)4, v7, "assertion failure: '%s' (%s:line %i) Out of memory.", "m_data", "init", 327);
    result = (_QWORD *)_os_crash();
    __break(1u);
    return result;
  }
  v8 = a3 - 1;
  if (a3 != 1)
  {
    do
    {
      *(_DWORD *)result = *a4;
      result = (_QWORD *)((char *)result + 4);
      --v8;
    }
    while (v8);
  }
  *(_DWORD *)result = *a4;
  return result;
}

void re::HashTable<unsigned long long,unsigned int,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::init(uint64_t a1, uint64_t a2, signed int a3)
{
  unint64_t v4;
  unsigned int *v5;
  unint64_t v6;
  unsigned int *v7;
  unsigned int *v8;
  signed int v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  char *v14;

  v4 = 245;
  v5 = (unsigned int *)&re::internal::PrimeHelper::s_primes;
  do
  {
    v6 = v4 >> 1;
    v7 = &v5[v4 >> 1];
    v9 = *v7;
    v8 = v7 + 1;
    v4 += ~(v4 >> 1);
    if (v9 < a3)
      v5 = v8;
    else
      v4 = v6;
  }
  while (v4);
  v10 = *v5;
  *(_QWORD *)a1 = a2;
  v11 = (4 * v10 + 15) & 0x7FFFFFFF0;
  v12 = (char *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 32))(a2, v11 + 32 * v10, 16);
  if (v12)
  {
    v14 = v12;
    *(_QWORD *)(a1 + 8) = v12;
    if ((_DWORD)v10)
      memset_pattern16(v12, &memset_pattern_8, 4 * v10);
    *(_QWORD *)(a1 + 16) = &v14[v11];
    *(_DWORD *)(a1 + 24) = v10;
    *(_DWORD *)(a1 + 40) = 0;
  }
  else
  {
    re::internal::assertLog((re::internal *)4, v13, "assertion failure: '%s' (%s:line %i) Out of memory.", "temp", "init", 575);
    _os_crash();
    __break(1u);
  }
}

void re::HashTable<unsigned long long,unsigned int,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::setCapacity(uint64_t a1, unsigned int a2)
{
  uint64_t v4;
  __int128 v5;
  uint64_t v6;
  unsigned int v7;
  __int128 v8;
  unsigned int v9;
  uint64_t v10;
  unint64_t v11;
  signed int v12;
  _BYTE v13[44];

  v4 = *(_QWORD *)a1;
  if (*(_QWORD *)a1)
  {
    if (a2 && *(_DWORD *)(a1 + 24) != a2 && *(_DWORD *)(a1 + 28) <= a2)
    {
      memset(v13, 0, 36);
      *(_QWORD *)&v13[36] = 0x7FFFFFFFLL;
      re::HashTable<unsigned long long,unsigned int,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::init((uint64_t)v13, v4, a2);
      v5 = *(_OWORD *)v13;
      *(_OWORD *)v13 = *(_OWORD *)a1;
      *(_OWORD *)a1 = v5;
      v6 = *(_QWORD *)&v13[16];
      *(_QWORD *)&v13[16] = *(_QWORD *)(a1 + 16);
      *(_QWORD *)(a1 + 16) = v6;
      v8 = *(_OWORD *)&v13[24];
      *(_OWORD *)&v13[24] = *(_OWORD *)(a1 + 24);
      v7 = *(_DWORD *)&v13[32];
      *(_OWORD *)(a1 + 24) = v8;
      v9 = v7;
      if (v7)
      {
        v10 = 0;
        v11 = 0;
        do
        {
          if ((*(_DWORD *)(*(_QWORD *)&v13[16] + v10 + 8) & 0x80000000) != 0)
          {
            re::HashTable<unsigned long long,unsigned int,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::addAsMove(a1, *(_QWORD *)(*(_QWORD *)&v13[16] + v10) % (unint64_t)*(unsigned int *)(a1 + 24), *(_QWORD *)(*(_QWORD *)&v13[16] + v10), (_QWORD *)(*(_QWORD *)&v13[16] + v10 + 16), (_DWORD *)(*(_QWORD *)&v13[16] + v10 + 24));
            v9 = *(_DWORD *)&v13[32];
          }
          ++v11;
          v10 += 32;
        }
        while (v11 < v9);
      }
      re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)v13);
    }
  }
  else
  {
    if (a2)
      v12 = a2;
    else
      v12 = 3;
  }
}

uint64_t re::HashTable<unsigned long long,unsigned int,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::addAsMove(uint64_t a1, unsigned int a2, unint64_t a3, _QWORD *a4, _DWORD *a5)
{
  uint64_t v9;
  int v10;
  uint64_t v11;
  int v12;
  uint64_t v13;

  v9 = *(unsigned int *)(a1 + 36);
  if ((_DWORD)v9 == 0x7FFFFFFF)
  {
    v9 = *(unsigned int *)(a1 + 32);
    v10 = v9;
    if ((_DWORD)v9 == *(_DWORD *)(a1 + 24))
    {
      re::HashTable<unsigned long long,unsigned int,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::setCapacity(a1, (2 * *(_DWORD *)(a1 + 28)));
      a2 = a3 % *(unsigned int *)(a1 + 24);
      v10 = *(_DWORD *)(a1 + 32);
    }
    *(_DWORD *)(a1 + 32) = v10 + 1;
    v11 = *(_QWORD *)(a1 + 16);
    v12 = *(_DWORD *)(v11 + 32 * v9 + 8);
  }
  else
  {
    v11 = *(_QWORD *)(a1 + 16);
    v12 = *(_DWORD *)(v11 + 32 * v9 + 8);
    *(_DWORD *)(a1 + 36) = v12 & 0x7FFFFFFF;
  }
  *(_DWORD *)(v11 + 32 * v9 + 8) = v12 | 0x80000000;
  v13 = *(_QWORD *)(a1 + 8);
  *(_DWORD *)(*(_QWORD *)(a1 + 16) + 32 * v9 + 8) = *(_DWORD *)(*(_QWORD *)(a1 + 16) + 32 * v9 + 8) & 0x80000000 | *(_DWORD *)(v13 + 4 * a2);
  *(_QWORD *)(*(_QWORD *)(a1 + 16) + 32 * v9) = a3;
  *(_QWORD *)(*(_QWORD *)(a1 + 16) + 32 * v9 + 16) = *a4;
  *(_DWORD *)(*(_QWORD *)(a1 + 16) + 32 * v9 + 24) = *a5;
  *(_DWORD *)(v13 + 4 * a2) = v9;
  ++*(_DWORD *)(a1 + 28);
  return v9;
}

_QWORD *re::DynamicArray<re::DynamicArray<float>>::setCapacity(_QWORD *result, unint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  v3 = result[1];
  if (v3 != a2)
  {
    v5 = result;
    if (result[2] <= a2)
    {
      result = (_QWORD *)*result;
      if (!*v5)
      {
        result = (_QWORD *)re::DynamicArray<re::DynamicArray<float>>::setCapacity(v5, a2);
        ++*((_DWORD *)v5 + 6);
        return result;
      }
      if (a2)
      {
        if (is_mul_ok(a2, 0x28uLL))
        {
          v2 = 40 * a2;
          result = (_QWORD *)(*(uint64_t (**)(_QWORD *, unint64_t, uint64_t))(*result + 32))(result, 40 * a2, 8);
          if (result)
          {
            v7 = result;
            if (!v5[1])
              goto LABEL_20;
            goto LABEL_11;
          }
        }
        else
        {
          re::internal::assertLog((re::internal *)6, a2, "assertion failure: '%s' (%s:line %i) Size overflow in DynamicArray<T>::setCapacity(). Element size = %zu, capacity = %zu", "!overflow", "setCapacity", 615, 40, a2);
          _os_crash();
          __break(1u);
        }
        re::internal::assertLog((re::internal *)6, v6, "assertion failure: '%s' (%s:line %i) DynamicArray<T> is out of memory (tried to allocate %zu bytes from allocator '%s').", "newData", "setCapacity", 619, v2, *(_QWORD *)(*v5 + 8));
        result = (_QWORD *)_os_crash();
        __break(1u);
        return result;
      }
      v7 = 0;
      if (!v3)
      {
LABEL_20:
        v5[4] = v7;
        v5[1] = a2;
        return result;
      }
LABEL_11:
      v8 = v5[4];
      v9 = v5[2];
      if (v9)
      {
        v10 = 0;
        v11 = 40 * v9;
        do
        {
          v12 = &v7[v10 / 8];
          v13 = v8 + v10;
          v12[4] = 0;
          v12[1] = 0;
          v12[2] = 0;
          *v12 = 0;
          *((_DWORD *)v12 + 6) = 0;
          v14 = *(_QWORD *)(v8 + v10 + 8);
          *v12 = *(_QWORD *)(v8 + v10);
          v12[1] = v14;
          *(_QWORD *)v13 = 0;
          *(_QWORD *)(v13 + 8) = 0;
          v15 = v7[v10 / 8 + 2];
          v12[2] = *(_QWORD *)(v8 + v10 + 16);
          *(_QWORD *)(v13 + 16) = v15;
          v16 = v7[v10 / 8 + 4];
          v12[4] = *(_QWORD *)(v8 + v10 + 32);
          *(_QWORD *)(v13 + 32) = v16;
          *(_DWORD *)(v13 + 24) = *(_DWORD *)(v8 + v10 + 24) + 1;
          *((_DWORD *)v12 + 6) = LODWORD(v7[v10 / 8 + 3]) + 1;
          v17 = *(_QWORD *)(v8 + v10);
          if (v17)
          {
            if (v16)
              (*(void (**)(uint64_t))(*(_QWORD *)v17 + 40))(v17);
            *(_QWORD *)(v13 + 32) = 0;
            *(_QWORD *)(v13 + 8) = 0;
            *(_QWORD *)(v13 + 16) = 0;
            *(_QWORD *)v13 = 0;
            ++*(_DWORD *)(v13 + 24);
          }
          v10 += 40;
        }
        while (v11 != v10);
        v8 = v5[4];
      }
      result = (_QWORD *)(*(uint64_t (**)(_QWORD, uint64_t))(*(_QWORD *)*v5 + 40))(*v5, v8);
      goto LABEL_20;
    }
  }
  return result;
}

_QWORD *re::DynamicArray<re::BlendShapeWeights>::setCapacity(_QWORD *result, unint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v5;
  uint64_t v6;
  uint64_t *v7;
  re::BlendShapeWeights *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  id v13;

  v3 = result[1];
  if (v3 != a2)
  {
    v5 = result;
    if (result[2] <= a2)
    {
      result = (_QWORD *)*result;
      if (!*v5)
      {
        result = (_QWORD *)re::DynamicArray<re::BlendShapeWeights>::setCapacity(v5, a2);
        ++*((_DWORD *)v5 + 6);
        return result;
      }
      if (a2)
      {
        if (a2 >> 59)
        {
          re::internal::assertLog((re::internal *)6, a2, "assertion failure: '%s' (%s:line %i) Size overflow in DynamicArray<T>::setCapacity(). Element size = %zu, capacity = %zu", "!overflow", "setCapacity", 615, 32, a2);
          _os_crash();
          __break(1u);
        }
        else
        {
          v2 = 32 * a2;
          result = (_QWORD *)(*(uint64_t (**)(_QWORD *, unint64_t, uint64_t))(*result + 32))(result, 32 * a2, 8);
          if (result)
          {
            v7 = result;
            if (!v5[1])
              goto LABEL_18;
            goto LABEL_11;
          }
        }
        re::internal::assertLog((re::internal *)6, v6, "assertion failure: '%s' (%s:line %i) DynamicArray<T> is out of memory (tried to allocate %zu bytes from allocator '%s').", "newData", "setCapacity", 619, v2, *(_QWORD *)(*v5 + 8));
        result = (_QWORD *)_os_crash();
        __break(1u);
        return result;
      }
      v7 = 0;
      if (!v3)
      {
LABEL_18:
        v5[4] = v7;
        v5[1] = a2;
        return result;
      }
LABEL_11:
      v8 = (re::BlendShapeWeights *)v5[4];
      v9 = v5[2];
      if (v9)
      {
        v10 = 32 * v9;
        v11 = v7;
        do
        {
          re::FixedArray<float>::FixedArray(v11, (uint64_t)v8);
          v12 = *((_QWORD *)v8 + 3);
          v11[3] = v12;
          if (v12)
            v13 = (id)(v12 + 8);
          re::BlendShapeWeights::~BlendShapeWeights(v8);
          v8 = (re::BlendShapeWeights *)((char *)v8 + 32);
          v11 += 4;
          v10 -= 32;
        }
        while (v10);
        v8 = (re::BlendShapeWeights *)v5[4];
      }
      result = (_QWORD *)(*(uint64_t (**)(_QWORD, re::BlendShapeWeights *))(*(_QWORD *)*v5 + 40))(*v5, v8);
      goto LABEL_18;
    }
  }
  return result;
}

ArcSharedObject *re::make::shared::object<re::BlendShapeWeightsDefinition,re::FixedArray<re::StringID> const&>@<X0>(const StringID **a1@<X0>, _anonymous_namespace_ **a2@<X8>)
{
  uint64_t *v4;
  _anonymous_namespace_ *v5;
  const StringID *v6;
  ArcSharedObject *result;
  const StringID *v8[2];

  v4 = re::globalAllocators((re *)a1);
  v5 = (_anonymous_namespace_ *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v4[2] + 32))(v4[2], 104, 8);
  v6 = a1[1];
  v8[0] = a1[2];
  v8[1] = v6;
  *a2 = v5;
  return result;
}

void re::TypeBuilderHelper::registerDynamicArray<re::FixedArray<re::StringID>>(re::TypeRegistry *a1@<X0>, uint64_t *a2@<X1>, __int128 *a3@<X2>, re::TypeRegistry **a4@<X8>)
{
  _anonymous_namespace_ *v8;
  re::TypeRegistry *v9;
  uint64_t v10;
  __int128 v11;
  _BYTE v12[488];

  v8 = (_anonymous_namespace_ *)re::HashTable<re::StringID,re::StateParameterInt *,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::tryGet((uint64_t)a1 + 200, a2);
  if (a1 && v8)
  {
    v9 = *(re::TypeRegistry **)v8;
    *a4 = a1;
    a4[1] = v9;
  }
  else
  {
    v11 = *a3;
    re::TypeBuilder::beginListType((uint64_t)v12, a2, 1, 0x28uLL, 8uLL, &v11);
    re::TypeBuilder::setConstructor((uint64_t)v12, (uint64_t)re::TypeBuilderHelper::registerDynamicArray<re::FixedArray<re::StringID>>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,void *)#1}::__invoke);
    re::TypeBuilder::setDestructor((uint64_t)v12, (uint64_t)re::TypeBuilderHelper::registerDynamicArray<re::FixedArray<re::StringID>>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,void *)#2}::__invoke);
    re::TypeBuilder::setListUsesContiguousStorage((uint64_t)v12, 1);
    re::TypeBuilder::setListAccessors((uint64_t)v12, (uint64_t)re::TypeBuilderHelper::registerDynamicArray<re::FixedArray<re::StringID>>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *)#1}::__invoke, (uint64_t)re::TypeBuilderHelper::registerDynamicArray<re::FixedArray<re::StringID>>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,unsigned long)#1}::__invoke);
    re::TypeBuilder::setListIndexer((uint64_t)v12, (void *(*)(void *, unint64_t))re::TypeBuilderHelper::registerDynamicArray<re::FixedArray<re::StringID>>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,unsigned long)#1}::__invoke);
    re::TypeBuilder::setListIterator((uint64_t)v12, (void *(*)(void *, re::Allocator *))re::TypeBuilderHelper::registerDynamicArray<re::FixedArray<re::StringID>>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::Allocator *)#1}::__invoke, (void *(*)(void *))re::TypeBuilderHelper::registerDynamicArray<re::FixedArray<re::StringID>>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *)#2}::__invoke, (void (*)(void *, re::Allocator *))re::TypeBuilderHelper::registerDynamicArray<re::FixedArray<re::StringID>>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::Allocator *)#2}::__invoke);
    re::TypeBuilder::commitTo((re::TypeBuilder *)v12, a1, a4);
    re::TypeBuilder::~TypeBuilder((re::TypeBuilder *)v12, v10);
  }
}

_QWORD *re::IntrospectionDynamicArray<re::FixedArray<re::StringID>>::~IntrospectionDynamicArray(_QWORD *a1)
{
  *a1 = &off_24ED1FA08;
  re::SerializedReference<re::IntrospectionBase const*>::reset(a1 + 6);
  *a1 = &off_24ED426B8;
  objc_destructInstance(a1 + 1);
  return a1;
}

void re::IntrospectionDynamicArray<re::FixedArray<re::StringID>>::~IntrospectionDynamicArray(_QWORD *a1)
{
  *a1 = &off_24ED1FA08;
  re::SerializedReference<re::IntrospectionBase const*>::reset(a1 + 6);
  *a1 = &off_24ED426B8;
  objc_destructInstance(a1 + 1);
  JUMPOUT(0x2276933B8);
}

void re::IntrospectionDynamicArray<re::FixedArray<re::StringID>>::construct(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)(a2 + 32) = 0;
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)a2 = 0;
  *(_DWORD *)(a2 + 24) = 0;
}

uint64_t re::IntrospectionDynamicArray<re::FixedArray<re::StringID>>::destroy(uint64_t a1, uint64_t a2)
{
  return re::DynamicArray<re::FixedArray<re::StringID>>::deinit(a2);
}

_QWORD *re::IntrospectionDynamicArray<re::FixedArray<re::StringID>>::init(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *result;

  re::DynamicArray<re::FixedArray<re::StringID>>::deinit(a2);
  *(_QWORD *)a2 = a3;
  result = re::DynamicArray<re::FixedArray<re::StringID>>::setCapacity((_QWORD *)a2, 0);
  ++*(_DWORD *)(a2 + 24);
  return result;
}

_QWORD *re::IntrospectionDynamicArray<re::FixedArray<re::StringID>>::resize(_QWORD *result, uint64_t a2, uint64_t a3, uint64_t a4, unint64_t a5)
{
  _QWORD *v9;
  unint64_t v10;
  unint64_t i;

  v9 = result;
  if (!*(_QWORD *)a4)
  {
    *(_QWORD *)a4 = a2;
    result = re::DynamicArray<re::FixedArray<re::StringID>>::setCapacity((_QWORD *)a4, a5);
    ++*(_DWORD *)(a4 + 24);
  }
  v10 = *(_QWORD *)(a4 + 16);
  if (v10 >= a5)
  {
    if (v10 > a5)
      return re::DynamicArray<re::FixedArray<re::StringID>>::resize((_QWORD *)a4, a5);
  }
  else
  {
    result = re::DynamicArray<re::FixedArray<re::StringID>>::setCapacity((_QWORD *)a4, a5);
    for (i = a5 - *(_QWORD *)(a4 + 16); i; --i)
      result = (_QWORD *)(*(uint64_t (**)(_QWORD *, uint64_t, uint64_t, uint64_t))(*v9 + 80))(v9, a2, a3, a4);
  }
  return result;
}

re::IntrospectionBase *re::IntrospectionDynamicArray<re::FixedArray<re::StringID>>::addElement(uint64_t a1, re *a2, int a3, _anonymous_namespace_ *this)
{
  re::IntrospectionBase *v8;
  _QWORD v10[3];

  memset(v10, 0, sizeof(v10));
  re::DynamicArray<re::FixedArray<re::StringID>>::add(this, v10);
  re::FixedArray<re::StringID>::deinit(v10);
  v8 = (re::IntrospectionBase *)(*((_QWORD *)this + 4) + 24 * *((_QWORD *)this + 2) - 24);
  re::introspectionInitElement(a2, a3, *(re::Allocator **)(a1 + 48), v8);
  return v8;
}

uint64_t re::IntrospectionDynamicArray<re::FixedArray<re::StringID>>::size(uint64_t a1, uint64_t a2)
{
  return *(_QWORD *)(a2 + 16);
}

uint64_t re::IntrospectionDynamicArray<re::FixedArray<re::StringID>>::elementAt(uint64_t a1, uint64_t a2, unint64_t a3)
{
  if (*(_QWORD *)(a2 + 16) <= a3)
  {
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  return *(_QWORD *)(a2 + 32) + 24 * a3;
}

{
  if (*(_QWORD *)(a2 + 16) <= a3)
  {
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  return *(_QWORD *)(a2 + 32) + 24 * a3;
}

_QWORD *re::DynamicArray<re::FixedArray<re::StringID>>::resize(_QWORD *result, unint64_t a2)
{
  _QWORD *v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  unint64_t v9;

  v3 = result;
  v4 = result[2];
  if (v4 >= a2)
  {
    if (v4 <= a2)
      return result;
    v8 = 24 * a2;
    v9 = a2;
    do
    {
      result = re::FixedArray<re::StringID>::deinit((_QWORD *)(v3[4] + v8));
      ++v9;
      v8 += 24;
    }
    while (v9 < v3[2]);
  }
  else
  {
    if (result[1] < a2)
    {
      result = re::DynamicArray<re::FixedArray<re::StringID>>::setCapacity(result, a2);
      v4 = v3[2];
    }
    v5 = a2 - v4;
    if (a2 > v4)
    {
      v6 = 24 * v4;
      do
      {
        v7 = (_QWORD *)(v3[4] + v6);
        *v7 = 0;
        v7[1] = 0;
        v7[2] = 0;
        v6 += 24;
        --v5;
      }
      while (v5);
    }
  }
  v3[2] = a2;
  ++*((_DWORD *)v3 + 6);
  return result;
}

_QWORD *re::TypeBuilderHelper::registerDynamicArray<re::FixedArray<re::StringID>>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,void *)#1}::__invoke(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *result;

  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_DWORD *)(a1 + 24) = 0;
  *(_QWORD *)a1 = a3;
  result = re::DynamicArray<re::FixedArray<re::StringID>>::setCapacity((_QWORD *)a1, 0);
  ++*(_DWORD *)(a1 + 24);
  return result;
}

uint64_t re::TypeBuilderHelper::registerDynamicArray<re::FixedArray<re::StringID>>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *)#1}::__invoke(uint64_t a1)
{
  return *(_QWORD *)(a1 + 16);
}

void re::TypeBuilderHelper::registerDynamicArray<re::FixedArray<re::StringID>>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,unsigned long)#1}::__invoke(uint64_t a1, uint64_t a2, re::Allocator *a3, unint64_t a4)
{
  char v4;

  re::TypeBuilderHelper::registerDynamicArray<re::FixedArray<re::StringID>>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,unsigned long)#1}::operator()((uint64_t)&v4, a1, a2, a3, a4);
}

void re::TypeBuilderHelper::registerDynamicArray<re::FixedArray<re::StringID>>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,unsigned long)#1}::operator()(uint64_t a1, uint64_t a2, uint64_t a3, re::Allocator *a4, unint64_t a5)
{
  _anonymous_namespace_ *v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  _BYTE v13[32];
  _BYTE v14[8];
  uint64_t v15;

  if (*(re::Allocator **)a2 == a4)
  {
    re::DynamicArray<re::FixedArray<re::StringID>>::clear((_QWORD *)a2);
  }
  else
  {
    re::DynamicArray<re::FixedArray<re::StringID>>::deinit(a2);
    *(_QWORD *)a2 = a4;
    re::DynamicArray<re::FixedArray<re::StringID>>::setCapacity((_QWORD *)a2, a5);
    ++*(_DWORD *)(a2 + 24);
  }
  v9 = (_anonymous_namespace_ *)re::DynamicArray<re::FixedArray<re::StringID>>::resize((_QWORD *)a2, a5);
  {
    re::TypeRegistry::typeInfo(*(_QWORD **)a3, *(_QWORD *)(*(_QWORD *)(a3 + 16) + 72), v14);
    re::TypeInfo::TypeInfo((uint64_t)v13, (uint64_t)&v15);
    v10 = *(_QWORD *)(a2 + 16);
    if (v10)
    {
      v11 = *(char **)(a2 + 32);
      v12 = 24 * v10;
      do
      {
        re::TypeInfo::destruct((re::TypeInfo *)v13, v11, a4, 0);
        re::TypeInfo::construct((re::TypeInfo *)v13, (void **)v11, a4, 0);
        v11 += 24;
        v12 -= 24;
      }
      while (v12);
    }
  }
}

_QWORD *re::DynamicArray<re::FixedArray<re::StringID>>::clear(_QWORD *result)
{
  _QWORD *v1;
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;

  v1 = result;
  v2 = result[2];
  result[2] = 0;
  if (v2)
  {
    v3 = (_QWORD *)result[4];
    v4 = 24 * v2;
    do
    {
      result = re::FixedArray<re::StringID>::deinit(v3);
      v3 += 3;
      v4 -= 24;
    }
    while (v4);
  }
  ++*((_DWORD *)v1 + 6);
  return result;
}

uint64_t re::TypeBuilderHelper::registerDynamicArray<re::FixedArray<re::StringID>>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,unsigned long)#1}::__invoke(uint64_t a1, unint64_t a2)
{
  if (*(_QWORD *)(a1 + 16) <= a2)
  {
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  return *(_QWORD *)(a1 + 32) + 24 * a2;
}

uint64_t re::TypeBuilderHelper::registerDynamicArray<re::FixedArray<re::StringID>>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::Allocator *)#1}::__invoke(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 32))(a2, 16, 8);
  *(_QWORD *)result = a1;
  *(_DWORD *)(result + 8) = *(_DWORD *)(a1 + 24);
  *(_DWORD *)(result + 12) = -1;
  return result;
}

uint64_t re::TypeBuilderHelper::registerDynamicArray<re::FixedArray<re::StringID>>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *)#2}::__invoke(_DWORD *a1, uint64_t a2)
{
  uint64_t v2;
  int v3;
  unint64_t v4;
  uint64_t result;

  v2 = *(_QWORD *)a1;
  if (a1[2] == *(_DWORD *)(*(_QWORD *)a1 + 24))
  {
    v3 = a1[3];
    v4 = *(_QWORD *)(v2 + 16);
    if (v3 < (int)v4)
      a1[3] = ++v3;
    if (v4 <= v3)
      return 0;
    else
      return *(_QWORD *)(v2 + 32) + 24 * v3;
  }
  else
  {
    re::internal::assertLog((re::internal *)4, a2, "assertion failure: '%s' (%s:line %i) DynamicArray elements may not be added or removed during iteration.", "iter->originalVersion == iter->array->version()", "operator()", 313);
    result = _os_crash();
    __break(1u);
  }
  return result;
}

uint64_t re::TypeBuilderHelper::registerDynamicArray<re::FixedArray<re::StringID>>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::Allocator *)#2}::__invoke(uint64_t result, uint64_t a2)
{
  if (result)
    return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 40))(a2, result);
  return result;
}

_QWORD *re::IntrospectionDynamicArray<re::BlendShapeWeightsMeshMap>::~IntrospectionDynamicArray(_QWORD *a1)
{
  *a1 = &off_24ED1FA08;
  re::SerializedReference<re::IntrospectionBase const*>::reset(a1 + 6);
  *a1 = &off_24ED426B8;
  objc_destructInstance(a1 + 1);
  return a1;
}

void re::IntrospectionDynamicArray<re::BlendShapeWeightsMeshMap>::~IntrospectionDynamicArray(_QWORD *a1)
{
  *a1 = &off_24ED1FA08;
  re::SerializedReference<re::IntrospectionBase const*>::reset(a1 + 6);
  *a1 = &off_24ED426B8;
  objc_destructInstance(a1 + 1);
  JUMPOUT(0x2276933B8);
}

void re::IntrospectionDynamicArray<re::BlendShapeWeightsMeshMap>::construct(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)(a2 + 32) = 0;
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)a2 = 0;
  *(_DWORD *)(a2 + 24) = 0;
}

uint64_t re::IntrospectionDynamicArray<re::BlendShapeWeightsMeshMap>::destroy(uint64_t a1, uint64_t a2)
{
  return re::DynamicArray<re::MeshDeformationIndex>::deinit(a2);
}

_QWORD *re::IntrospectionDynamicArray<re::BlendShapeWeightsMeshMap>::init(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *result;

  re::DynamicArray<re::MeshDeformationIndex>::deinit(a2);
  *(_QWORD *)a2 = a3;
  result = re::DynamicArray<re::BlendShapeWeightsMeshMap>::setCapacity((_QWORD *)a2, 0);
  ++*(_DWORD *)(a2 + 24);
  return result;
}

void re::IntrospectionDynamicArray<re::BlendShapeWeightsMeshMap>::resize(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unint64_t a5)
{
  unint64_t v10;
  unint64_t i;

  if (!*(_QWORD *)a4)
  {
    *(_QWORD *)a4 = a2;
    re::DynamicArray<re::BlendShapeWeightsMeshMap>::setCapacity((_QWORD *)a4, a5);
    ++*(_DWORD *)(a4 + 24);
  }
  v10 = *(_QWORD *)(a4 + 16);
  if (v10 >= a5)
  {
    if (v10 > a5)
      re::DynamicArray<re::BlendShapeWeightsMeshMap>::resize(a4, a5);
  }
  else
  {
    re::DynamicArray<re::BlendShapeWeightsMeshMap>::setCapacity((_QWORD *)a4, a5);
    for (i = a5 - *(_QWORD *)(a4 + 16); i; --i)
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a1 + 80))(a1, a2, a3, a4);
  }
}

re::IntrospectionBase *re::IntrospectionDynamicArray<re::BlendShapeWeightsMeshMap>::addElement(uint64_t a1, re *a2, int a3, _anonymous_namespace_ *this)
{
  re::IntrospectionBase *v8;
  uint64_t v10;
  _QWORD v11[2];
  _QWORD v12[3];

  v10 = 0;
  v11[0] = 0;
  v11[1] = &str_110;
  v12[0] = 0;
  v12[1] = &str_110;
  v12[2] = 0;
  re::DynamicArray<re::BlendShapeWeightsMeshMap>::add(this, (uint64_t)&v10);
  re::StringID::destroyString((re::StringID *)v12);
  re::StringID::destroyString((re::StringID *)v11);
  v8 = (re::IntrospectionBase *)(*((_QWORD *)this + 4) + 48 * *((_QWORD *)this + 2) - 48);
  re::introspectionInitElement(a2, a3, *(re::Allocator **)(a1 + 48), v8);
  return v8;
}

uint64_t re::IntrospectionDynamicArray<re::BlendShapeWeightsMeshMap>::size(uint64_t a1, uint64_t a2)
{
  return *(_QWORD *)(a2 + 16);
}

uint64_t re::IntrospectionDynamicArray<re::BlendShapeWeightsMeshMap>::elementAt(uint64_t a1, uint64_t a2, unint64_t a3)
{
  if (*(_QWORD *)(a2 + 16) <= a3)
  {
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  return *(_QWORD *)(a2 + 32) + 48 * a3;
}

{
  if (*(_QWORD *)(a2 + 16) <= a3)
  {
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  return *(_QWORD *)(a2 + 32) + 48 * a3;
}

void re::DynamicArray<re::BlendShapeWeightsMeshMap>::resize(uint64_t a1, unint64_t a2)
{
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  re::StringID *v10;

  v4 = *(_QWORD *)(a1 + 16);
  if (v4 >= a2)
  {
    if (v4 <= a2)
      return;
    v8 = 48 * a2 + 24;
    v9 = a2;
    do
    {
      v10 = (re::StringID *)(*(_QWORD *)(a1 + 32) + v8);
      re::StringID::destroyString(v10);
      re::StringID::destroyString((re::StringID *)((char *)v10 - 16));
      ++v9;
      v8 += 48;
    }
    while (v9 < *(_QWORD *)(a1 + 16));
  }
  else
  {
    if (*(_QWORD *)(a1 + 8) < a2)
    {
      re::DynamicArray<re::BlendShapeWeightsMeshMap>::setCapacity((_QWORD *)a1, a2);
      v4 = *(_QWORD *)(a1 + 16);
    }
    v5 = a2 - v4;
    if (a2 > v4)
    {
      v6 = 48 * v4;
      do
      {
        v7 = *(_QWORD *)(a1 + 32) + v6;
        *(_BYTE *)v7 = 0;
        *(_QWORD *)(v7 + 8) = 0;
        *(_QWORD *)(v7 + 16) = &str_110;
        *(_QWORD *)(v7 + 24) = 0;
        *(_QWORD *)(v7 + 32) = &str_110;
        *(_QWORD *)(v7 + 40) = 0;
        v6 += 48;
        --v5;
      }
      while (v5);
    }
  }
  *(_QWORD *)(a1 + 16) = a2;
  ++*(_DWORD *)(a1 + 24);
}

_QWORD *re::TypeBuilderHelper::registerDynamicArray<re::BlendShapeWeightsMeshMap>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,void *)#1}::__invoke(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *result;

  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_DWORD *)(a1 + 24) = 0;
  *(_QWORD *)a1 = a3;
  result = re::DynamicArray<re::BlendShapeWeightsMeshMap>::setCapacity((_QWORD *)a1, 0);
  ++*(_DWORD *)(a1 + 24);
  return result;
}

uint64_t re::TypeBuilderHelper::registerDynamicArray<re::BlendShapeWeightsMeshMap>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *)#1}::__invoke(uint64_t a1)
{
  return *(_QWORD *)(a1 + 16);
}

void re::TypeBuilderHelper::registerDynamicArray<re::BlendShapeWeightsMeshMap>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,unsigned long)#1}::__invoke(uint64_t a1, uint64_t a2, re::Allocator *a3, unint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  re::StringID *v10;
  _anonymous_namespace_ *v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  _BYTE v15[32];
  _BYTE v16[8];
  uint64_t v17;

  if (*(re::Allocator **)a1 == a3)
  {
    v8 = *(_QWORD *)(a1 + 16);
    *(_QWORD *)(a1 + 16) = 0;
    if (v8)
    {
      v9 = 48 * v8;
      v10 = (re::StringID *)(*(_QWORD *)(a1 + 32) + 24);
      do
      {
        re::StringID::destroyString(v10);
        re::StringID::destroyString((re::StringID *)((char *)v10 - 16));
        v10 = (re::StringID *)((char *)v10 + 48);
        v9 -= 48;
      }
      while (v9);
    }
  }
  else
  {
    re::DynamicArray<re::MeshDeformationIndex>::deinit(a1);
    *(_QWORD *)a1 = a3;
    re::DynamicArray<re::BlendShapeWeightsMeshMap>::setCapacity((_QWORD *)a1, a4);
  }
  ++*(_DWORD *)(a1 + 24);
  re::DynamicArray<re::BlendShapeWeightsMeshMap>::resize(a1, a4);
  {
    re::TypeRegistry::typeInfo(*(_QWORD **)a2, *(_QWORD *)(*(_QWORD *)(a2 + 16) + 72), v16);
    re::TypeInfo::TypeInfo((uint64_t)v15, (uint64_t)&v17);
    v12 = *(_QWORD *)(a1 + 16);
    if (v12)
    {
      v13 = *(char **)(a1 + 32);
      v14 = 48 * v12;
      do
      {
        re::TypeInfo::destruct((re::TypeInfo *)v15, v13, a3, 0);
        re::TypeInfo::construct((re::TypeInfo *)v15, (void **)v13, a3, 0);
        v13 += 48;
        v14 -= 48;
      }
      while (v14);
    }
  }
}

uint64_t re::TypeBuilderHelper::registerDynamicArray<re::BlendShapeWeightsMeshMap>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,unsigned long)#1}::__invoke(uint64_t a1, unint64_t a2)
{
  if (*(_QWORD *)(a1 + 16) <= a2)
  {
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  return *(_QWORD *)(a1 + 32) + 48 * a2;
}

uint64_t re::TypeBuilderHelper::registerDynamicArray<re::BlendShapeWeightsMeshMap>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::Allocator *)#1}::__invoke(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 32))(a2, 16, 8);
  *(_QWORD *)result = a1;
  *(_DWORD *)(result + 8) = *(_DWORD *)(a1 + 24);
  *(_DWORD *)(result + 12) = -1;
  return result;
}

uint64_t re::TypeBuilderHelper::registerDynamicArray<re::BlendShapeWeightsMeshMap>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *)#2}::__invoke(_DWORD *a1, uint64_t a2)
{
  uint64_t v2;
  int v3;
  unint64_t v4;
  uint64_t result;

  v2 = *(_QWORD *)a1;
  if (a1[2] == *(_DWORD *)(*(_QWORD *)a1 + 24))
  {
    v3 = a1[3];
    v4 = *(_QWORD *)(v2 + 16);
    if (v3 < (int)v4)
      a1[3] = ++v3;
    if (v4 <= v3)
      return 0;
    else
      return *(_QWORD *)(v2 + 32) + 48 * v3;
  }
  else
  {
    re::internal::assertLog((re::internal *)4, a2, "assertion failure: '%s' (%s:line %i) DynamicArray elements may not be added or removed during iteration.", "iter->originalVersion == iter->array->version()", "operator()", 313);
    result = _os_crash();
    __break(1u);
  }
  return result;
}

uint64_t re::TypeBuilderHelper::registerDynamicArray<re::BlendShapeWeightsMeshMap>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::Allocator *)#2}::__invoke(uint64_t result, uint64_t a2)
{
  if (result)
    return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 40))(a2, result);
  return result;
}

uint64_t *re::TextureAsset::assetType(re::TextureAsset *this)
{
  unsigned __int8 v1;

  {
    re::TextureAsset::assetType(void)::type = (uint64_t)"Texture";
    qword_255827600 = 0;
    re::AssetType::generateCompiledExtension((re::AssetType *)&re::TextureAsset::assetType(void)::type);
  }
  return &re::TextureAsset::assetType(void)::type;
}

uint64_t re::TextureAsset::makeTextureAsset(uint64_t a1, int a2, __int128 *a3)
{
  __int128 v3;
  uint64_t TextureAsset;
  __int128 v6[2];
  __int128 v7;
  __int128 v8;

  v7 = 0u;
  v8 = 0u;
  LOWORD(v8) = 257;
  BYTE2(v8) = 1;
  v3 = a3[1];
  v6[0] = *a3;
  v6[1] = v3;
  TextureAsset = re::TextureAsset::makeTextureAsset((re *)&v7, a1, a2, v6);

  return TextureAsset;
}

uint64_t re::TextureAsset::makeTextureAsset(re *a1, uint64_t a2, int a3, __int128 *a4)
{
  uint64_t *v8;
  uint64_t v9;
  re::TextureAsset *v10;
  __int128 v11;

  v8 = re::globalAllocators(a1);
  v9 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v8[2] + 32))(v8[2], 424, 8);
  *(_OWORD *)v9 = 0u;
  *(_OWORD *)(v9 + 16) = 0u;
  *(_OWORD *)(v9 + 32) = 0u;
  *(_OWORD *)(v9 + 48) = 0u;
  *(_OWORD *)(v9 + 64) = 0u;
  *(_OWORD *)(v9 + 80) = 0u;
  *(_OWORD *)(v9 + 96) = 0u;
  *(_OWORD *)(v9 + 112) = 0u;
  *(_OWORD *)(v9 + 128) = 0u;
  *(_OWORD *)(v9 + 144) = 0u;
  *(_OWORD *)(v9 + 160) = 0u;
  *(_OWORD *)(v9 + 176) = 0u;
  *(_OWORD *)(v9 + 192) = 0u;
  *(_OWORD *)(v9 + 208) = 0u;
  *(_OWORD *)(v9 + 224) = 0u;
  *(_OWORD *)(v9 + 240) = 0u;
  *(_OWORD *)(v9 + 256) = 0u;
  *(_OWORD *)(v9 + 272) = 0u;
  *(_OWORD *)(v9 + 288) = 0u;
  *(_OWORD *)(v9 + 304) = 0u;
  *(_OWORD *)(v9 + 320) = 0u;
  *(_OWORD *)(v9 + 336) = 0u;
  *(_OWORD *)(v9 + 352) = 0u;
  *(_OWORD *)(v9 + 368) = 0u;
  *(_OWORD *)(v9 + 384) = 0u;
  *(_OWORD *)(v9 + 400) = 0u;
  *(_QWORD *)(v9 + 416) = 0;
  v10 = re::TextureAsset::TextureAsset((re::TextureAsset *)v9);
  re::TextureAsset::setTextureAndSemantic((uint64_t)v10, a1, a2, a3);
  v11 = *a4;
  *(_OWORD *)(v9 + 24) = a4[1];
  *(_OWORD *)(v9 + 8) = v11;
  return v9;
}

void re::TextureAsset::setTextureAndSemantic(uint64_t a1, const re::ImportGraphicsContext *a2, uint64_t a3, int a4)
{
  id *v8;
  id *v9;
  void **v10;
  void *v11;
  unsigned int v12;
  id v13;
  void *v14;
  int v15;
  uint64_t v16;

  v8 = (id *)(a3 + 96);
  *(_BYTE *)(a1 + 152) = *(_BYTE *)a3;
  v9 = (id *)(a1 + 160);
  v10 = (void **)(a3 + 8);
  std::__variant_detail::__assignment<std::__variant_detail::__traits<NS::SharedPtr<MTL::Texture>,re::CPUTexture>>::__generic_assign[abi:nn180100]<std::__variant_detail::__copy_assignment<std::__variant_detail::__traits<NS::SharedPtr<MTL::Texture>,re::CPUTexture>,(std::__variant_detail::_Trait)1> const&>(a1 + 160, a3 + 8);
  re::ObjCObject::operator=((id *)(a1 + 248), v8);
  if (*(_BYTE *)(a1 + 122)
    && *(_BYTE *)(a1 + 124)
    && re::TextureData::isValid((re::TextureData *)(a1 + 256)))
  {
    *(_BYTE *)(a1 + 256) = *(_BYTE *)a3;
    std::__variant_detail::__assignment<std::__variant_detail::__traits<NS::SharedPtr<MTL::Texture>,re::CPUTexture>>::__generic_assign[abi:nn180100]<std::__variant_detail::__copy_assignment<std::__variant_detail::__traits<NS::SharedPtr<MTL::Texture>,re::CPUTexture>,(std::__variant_detail::_Trait)1> const&>(a1 + 264, (uint64_t)v10);
    re::ObjCObject::operator=((id *)(a1 + 352), v8);
  }
  *(_DWORD *)(a1 + 388) = a4;
  if (*(_DWORD *)(a1 + 240) >= 2u)
    goto LABEL_25;
  *(_DWORD *)(a1 + 360) = objc_msgSend(*(id *)(a1 + 160), sel_width);
  if (*(_DWORD *)(a1 + 240) >= 2u)
    goto LABEL_25;
  *(_DWORD *)(a1 + 364) = objc_msgSend(*(id *)(a1 + 160), sel_height);
  if (*(_DWORD *)(a1 + 240) >= 2u)
    goto LABEL_25;
  *(_DWORD *)(a1 + 368) = objc_msgSend(*(id *)(a1 + 160), sel_depth);
  if (*(_DWORD *)(a1 + 240) >= 2u)
    goto LABEL_25;
  *(_DWORD *)(a1 + 372) = objc_msgSend(*(id *)(a1 + 160), sel_arrayLength);
  if (*(_DWORD *)(a1 + 240) >= 2u)
    goto LABEL_25;
  *(_DWORD *)(a1 + 376) = objc_msgSend(*(id *)(a1 + 160), sel_pixelFormat);
  if (*(_DWORD *)(a1 + 240) >= 2u)
    goto LABEL_25;
  *(_DWORD *)(a1 + 380) = objc_msgSend(*(id *)(a1 + 160), sel_textureType);
  v11 = *(void **)(a1 + 112);
  *(_QWORD *)(a1 + 112) = 0;

  v12 = *(_DWORD *)(a1 + 240);
  if (!v12)
  {
    v13 = objc_msgSend(*v9, sel_device);
    if (v13)
    {
      v14 = v13;
      v15 = objc_msgSend(v13, "supportsTextureSwizzle");

      if (!v15)
      {
        *(_DWORD *)(a1 + 384) = 84148994;
        goto LABEL_18;
      }
    }
    v12 = *(_DWORD *)(a1 + 240);
  }
  if (v12 >= 2)
  {
LABEL_25:
    v16 = std::__throw_bad_variant_access[abi:nn180100]();
    re::TextureAsset::makeTextureAssetWithIOSurface(v16);
    return;
  }
  *(_DWORD *)(a1 + 384) = objc_msgSend(*(id *)(a1 + 160), sel_swizzle);
LABEL_18:
  if ((*(_DWORD *)(a1 + 388) - 3) <= 1)
    re::TextureAsset::updateColorSpaceFromTexture((re::TextureAsset *)a1, a2, 0);
  if (*(_QWORD *)(a1 + 56) && *(_QWORD *)(a1 + 48))
  {
    if (!*(_DWORD *)(a3 + 88))
    {
      re::TextureHandle::setMetalTexture((const re::TextureHandle *)(a1 + 48), v10);
      re::TextureAsset::updateLegacyLinearFormatWithSRGBDataTexture((re::TextureAsset *)a1, (id *)a2);
      return;
    }
    goto LABEL_25;
  }
}

uint64_t re::TextureAsset::makeTextureAssetWithIOSurface(id *a1, id *a2, uint64_t a3, uint64_t a4)
{
  uint64_t TextureAsset;
  id v6;
  _BYTE v7[8];
  id v8[10];
  unsigned int v9;
  id v10;
  _BYTE v11[25];
  int v12;

  re::mtl::Device::makeTextureWithIOSurface(*a2, a1, a3, a4, &v6);
  v7[0] = 0;
  v8[0] = v6;
  v9 = 0;
  v10 = 0;
  memset(&v11[12], 0, 13);
  *(_DWORD *)v11 = 16777473;
  v11[4] = 1;
  *(_DWORD *)&v11[8] = 1;
  v12 = 0;
  TextureAsset = re::TextureAsset::makeTextureAsset((uint64_t)v7, 6, (__int128 *)v11);

  if (v9 != -1)
    ((void (*)(_BYTE *, id *))*(&__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8nn180100IZNS0_6__dtorINS0_8__traitsIJN2NS9SharedPtrIN3MTL7TextureEEEN2re10CPUTextureEEEELNS0_6_TraitE1EE9__destroyB8nn180100EvEUlRT_E_JRSF_EEEDcOSG_DpOT0____fmatrix
                                         + v9))(v11, v8);
  v9 = -1;
  if (v6)

  return TextureAsset;
}

uint64_t re::TextureAsset::makeTextureAssetWithDirectTexture(re *a1)
{
  uint64_t *v2;
  uint64_t v3;
  void **v4;
  REDirectTexturePayload *v5;
  void *v6;
  REDirectTexturePayload *v8;

  v2 = re::globalAllocators(a1);
  v3 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v2[2] + 32))(v2[2], 424, 8);
  *(_OWORD *)v3 = 0u;
  *(_OWORD *)(v3 + 16) = 0u;
  *(_OWORD *)(v3 + 32) = 0u;
  *(_OWORD *)(v3 + 48) = 0u;
  *(_OWORD *)(v3 + 64) = 0u;
  *(_OWORD *)(v3 + 80) = 0u;
  *(_OWORD *)(v3 + 96) = 0u;
  *(_OWORD *)(v3 + 128) = 0u;
  *(_OWORD *)(v3 + 144) = 0u;
  *(_OWORD *)(v3 + 160) = 0u;
  *(_OWORD *)(v3 + 176) = 0u;
  *(_OWORD *)(v3 + 192) = 0u;
  *(_OWORD *)(v3 + 208) = 0u;
  *(_OWORD *)(v3 + 224) = 0u;
  *(_OWORD *)(v3 + 240) = 0u;
  *(_OWORD *)(v3 + 256) = 0u;
  *(_OWORD *)(v3 + 272) = 0u;
  *(_OWORD *)(v3 + 288) = 0u;
  *(_OWORD *)(v3 + 304) = 0u;
  *(_OWORD *)(v3 + 320) = 0u;
  *(_OWORD *)(v3 + 336) = 0u;
  *(_OWORD *)(v3 + 352) = 0u;
  *(_OWORD *)(v3 + 368) = 0u;
  *(_OWORD *)(v3 + 384) = 0u;
  *(_OWORD *)(v3 + 400) = 0u;
  *(_QWORD *)(v3 + 416) = 0;
  *(_OWORD *)(v3 + 112) = 0u;
  v4 = (void **)(v3 + 112);
  re::TextureAsset::TextureAsset((re::TextureAsset *)v3);
  re::DirectTexturePayload::make((uint64_t)a1, &v8);
  if ((REDirectTexturePayload **)(v3 + 112) != &v8)
  {
    v5 = v8;
    v8 = 0;
    v6 = *v4;
    *v4 = v5;

  }
  return v3;
}

id re::TextureData::mipmapLevelCount(re::TextureData *this)
{
  int v1;
  uint64_t v3;

  v1 = *((_DWORD *)this + 22);
  if (v1 == 1)
    return (id)*((_QWORD *)this + 4);
  if (!v1)
    return objc_msgSend(*((id *)this + 1), sel_mipmapLevelCount);
  v3 = std::__throw_bad_variant_access[abi:nn180100]();
  return (id)re::TextureAsset::updateMips(v3);
}

void re::TextureAsset::updateMips(uint64_t a1, const re::ImportGraphicsContext *a2, id *a3)
{
  id v5;
  void *v6;
  id v7;
  re::TextureAsset *v8;
  _BYTE v9[8];
  id v10[10];
  unsigned int v11;
  id v12;
  id v13;
  id v14;
  id v15;
  id v16;
  char v17;

  v5 = *a3;
  if (*(_DWORD *)(a1 + 344))
  {
    v8 = (re::TextureAsset *)std::__throw_bad_variant_access[abi:nn180100]();
    re::TextureAsset::isLegacyLinearFormatWithSRGBData(v8);
  }
  else
  {
    v6 = v5;
    v7 = *(id *)(a1 + 264);
    v16 = v6;
    v15 = v7;
    re::copyTextureMips((uint64_t)a2, &v16, &v15, (unsigned __int16 *)(a1 + 120));
    if (v15)
    {

      v15 = 0;
    }
    if (v16)
    {

      v16 = 0;
    }
    v13 = v7;
    re::makeLoadedTextureView(&v13, (_WORD *)(a1 + 120), &v14);
    if (v13)
    {

      v13 = 0;
    }
    if (v14)
    {
      v9[0] = 0;
      v10[0] = v14;
      v11 = 0;
      v12 = 0;
      re::TextureAsset::setTextureAndSemantic(a1, a2, (uint64_t)v9, *(_DWORD *)(a1 + 388));

      if (v11 != -1)
        ((void (*)(char *, id *))*(&__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8nn180100IZNS0_6__dtorINS0_8__traitsIJN2NS9SharedPtrIN3MTL7TextureEEEN2re10CPUTextureEEEELNS0_6_TraitE1EE9__destroyB8nn180100EvEUlRT_E_JRSF_EEEDcOSG_DpOT0____fmatrix
                                            + v11))(&v17, v10);
      if (v14)

    }
    if (v7)

    if (v6)
  }
}

BOOL re::TextureAsset::isLegacyLinearFormatWithSRGBData(re::TextureAsset *this)
{
  uint64_t v2;
  int v3;
  uint64_t v5;

  v2 = *((_QWORD *)this + 12);
  if (v2 && !*(_BYTE *)(v2 + 296))
    return 0;
  v3 = *((_DWORD *)this + 97);
  if (v3 != 6 && v3 != 0)
    return 0;
  MTLPixelFormatGetInfoForDevice();
  v5 = *((unsigned int *)this + 94);
  return (_DWORD)v5 != re::translateLinearPixelFormatToSRGB(v5);
}

void re::TextureAsset::createTextureSRGBAdaptor(id *a1@<X0>, id *a2@<X1>, char a3@<W2>, void **a4@<X8>)
{
  int v8;
  int isSupportedPixelFormat;
  void *v10;
  id v11;
  id v12;
  id v13;
  void *v14;
  uint64_t v15;
  uint64_t v16;
  id v17;
  id v18;
  id v19;

  v8 = re::translateLinearPixelFormatToSRGB((uint64_t)objc_msgSend(*a2, sel_pixelFormat));
  if (objc_msgSend(*a2, sel_pixelFormat) == (id)v8)
  {
    *a4 = 0;
    return;
  }
  if (a1)
  {
    if ((a3 & 1) != 0)
    {
LABEL_5:
      *a4 = 0;
      goto LABEL_9;
    }
  }
  else
  {
    objc_msgSend(*a2, sel_device);
    if ((a3 & 1) != 0)
      goto LABEL_5;
  }
  objc_msgSend(*a2, sel_textureType);
  isSupportedPixelFormat = re::isSupportedPixelFormat();
  *a4 = 0;
  if (isSupportedPixelFormat)
  {
    v19 = objc_msgSend(*a2, sel_newTextureViewWithPixelFormat_, v8);
    NS::SharedPtr<MTL::Texture>::operator=(a4, &v19);
    goto LABEL_25;
  }
LABEL_9:
  if (!a1)
    return;
  re::createDescriptorFromTexture(a1, a2, &v19);
  objc_msgSend(v19, sel_setUsage_, (int)objc_msgSend(*a2, sel_usage) | 2);
  objc_msgSend(v19, sel_setSwizzle_, 84148994);
  if (v8 == 11)
  {
    objc_msgSend(v19, sel_setPixelFormat_, 25);
    re::mtl::Device::makeTexture(v19, a1, &v18);
    NS::SharedPtr<MTL::Texture>::operator=(a4, &v18);
    if (v18)

    if (!*a4)
      goto LABEL_25;
    re::copyTexture(a1, a2, a4, 0x5040302uLL, 1);
    if (objc_msgSend(*a2, sel_swizzle) == 84148994)
      goto LABEL_25;
    v10 = *a4;
    v11 = objc_msgSend(*a4, sel_pixelFormat);
    v12 = objc_msgSend(*a4, sel_textureType);
    v13 = objc_msgSend(*a4, sel_mipmapLevelCount);
    v14 = *a4;
    v15 = (uint64_t)objc_msgSend(*a4, sel_arrayLength);
    if ((char *)objc_msgSend(v14, sel_textureType) - 5 >= (char *)2)
      v16 = v15;
    else
      v16 = 6 * v15;
    v17 = objc_msgSend(v10, sel_newTextureViewWithPixelFormat_textureType_levels_slices_swizzle_, v11, v12, 0, v13, 0, v16, objc_msgSend(*a2, sel_swizzle));
  }
  else
  {
    objc_msgSend(v19, sel_setPixelFormat_, 70);
    re::mtl::Device::makeTexture(v19, a1, &v18);
    NS::SharedPtr<MTL::Texture>::operator=(a4, &v18);
    if (v18)

    if (!*a4)
      goto LABEL_25;
    re::copyTexture(a1, a2, a4, 0x5040302uLL, 0);
    v17 = objc_msgSend(*a4, sel_newTextureViewWithPixelFormat_, 71);
  }
  v18 = v17;
  NS::SharedPtr<MTL::Texture>::operator=(a4, &v18);
  if (v18)

LABEL_25:
  if (v19)

}

void re::TextureAsset::addLegacyLinearFormatWithSRGBDataTexture(os_unfair_lock_s **this, os_unfair_lock_s **a2)
{
  id v4[2];
  id v5;
  id v6[4];

  re::ImportGraphicsContext::createFromRenderManager((re::ImportGraphicsContext *)a2, (re::ImportGraphicsContext *)v6);
  re::TextureHandle::unsynchronizedMetalTexture(this + 6, v4);
  re::TextureAsset::createTextureSRGBAdaptor(v6, v4, 0, &v5);
  if (v4[0])

  if (v5)
  {
    re::TextureManager::registerTexture(a2[8], &v5, (os_unfair_lock_s **)v4);
    re::TextureHandle::operator=((re::TextureHandle *)(this + 17), (re::TextureHandle *)v4);
    re::TextureHandle::invalidate((re::TextureHandle *)v4);
    if (v5)

  }
}

void re::TextureAsset::updateLegacyLinearFormatWithSRGBDataTexture(re::TextureAsset *this, id *a2)
{
  const re::TextureHandle *v3;
  id v5;
  os_unfair_lock_s **v6;
  re::TextureData *v7;
  id v8;
  id v9;

  if (*((_QWORD *)this + 18))
  {
    v3 = (re::TextureAsset *)((char *)this + 136);
    if (*((_QWORD *)this + 17))
    {
      if (*((_DWORD *)this + 60))
      {
        v7 = (re::TextureData *)std::__throw_bad_variant_access[abi:nn180100]();
        re::TextureData::isValid(v7);
        return;
      }
      v5 = objc_msgSend(*((id *)this + 20), sel_pixelFormat);
      if (v5 == (id)(int)re::translateLinearPixelFormatToSRGB((uint64_t)v5))
      {
        re::TextureHandle::unsynchronizedMetalTexture((os_unfair_lock_s **)this + 6, &v9);
      }
      else
      {
        if (!*a2)
          a2 = 0;
        v6 = (os_unfair_lock_s **)((char *)this + 48);
        re::TextureHandle::unsynchronizedMetalTexture(v6, &v8);
        re::TextureAsset::createTextureSRGBAdaptor(a2, &v8, 0, &v9);
        if (v8)

        if (!v9)
        {
          re::TextureHandle::unsynchronizedMetalTexture(v6, &v8);
          re::TextureHandle::setMetalTexture(v3, &v8);
          if (v8)

          goto LABEL_12;
        }
      }
      re::TextureHandle::setMetalTexture(v3, &v9);
LABEL_12:
      if (v9)

    }
  }
}

uint64_t re::TextureData::isValid(re::TextureData *this)
{
  int v1;
  re::TextureAsset *v3;
  const re::ImportGraphicsContext *v4;
  CFStringRef v5;

  v1 = *((_DWORD *)this + 22);
  if (v1)
  {
    if (v1 != 1)
    {
      v3 = (re::TextureAsset *)std::__throw_bad_variant_access[abi:nn180100]();
      return re::TextureAsset::updateColorSpaceFromTexture(v3, v4, v5);
    }
    if (!*((_QWORD *)this + 4))
      return 0;
  }
  return *((_QWORD *)this + 1) != 0;
}

void re::TextureAsset::updateColorSpaceFromTexture(re::TextureAsset *this, const re::ImportGraphicsContext *a2, __CFString *theString)
{
  __CFString *CGColorSpaceNameForPixelFormat;
  _anonymous_namespace_ *CStringPtr;
  uint64_t v7;
  char v8;

  CGColorSpaceNameForPixelFormat = theString;
  if (theString
    || (CGColorSpaceNameForPixelFormat = (__CFString *)*((id *)this + 31)) != 0
    || *((_BYTE *)a2 + 19)
    && (CGColorSpaceNameForPixelFormat = (__CFString *)re::ColorHelpers::getCGColorSpaceNameForPixelFormat(*((_DWORD *)this + 94), *((unsigned __int8 *)a2 + 20))) != 0)
  {
    CStringPtr = (_anonymous_namespace_ *)CFStringGetCStringPtr(CGColorSpaceNameForPixelFormat, 0x8000100u);
    re::DynamicString::operator=((re::TextureAsset *)((char *)this + 392), (re::DynamicString *)&v7);
    if (v7)
    {
      if ((v8 & 1) != 0)
        (*(void (**)(void))(*(_QWORD *)v7 + 40))();
    }
    re::TextureData::setColorSpace((id *)this + 19, CGColorSpaceNameForPixelFormat);
  }
}

void re::TextureAsset::setTextureAndSemantic(const re::ImportGraphicsContext *a1, uint64_t *a2, uint64_t a3, int a4, __int128 *a5)
{
  uint64_t v10;
  unsigned int v11;
  uint64_t v12;
  uint64_t v13;
  __int128 v14;
  uint64_t v15;

  re::AssetHandle::loadNow(a2[1], 0);
  v10 = a2[1];
  if (v10)
  {
    v11 = atomic_load((unsigned int *)(v10 + 704));
    if (v11 == 2)
    {
      re::AssetHandle::mutateAssetCommon((re::AssetHandle *)a2);
      ++*(_DWORD *)(a2[1] + 260);
      v12 = re::AssetHandle::loadedAsset<re::TextureAsset>((re::TextureAsset *)a2);
      if (v12)
      {
        v13 = v12;
        re::TextureAsset::setTextureAndSemantic(v12, a1, a3, a4);
        v14 = *a5;
        *(_OWORD *)(v13 + 24) = a5[1];
        *(_OWORD *)(v13 + 8) = v14;
        v15 = a2[1];
        *(_BYTE *)(v15 + 256) = 1;
        re::internal::AssetEntry::updateMutatedRuntimeAssetSize((os_unfair_lock_s *)v15);
        re::internal::AssetEntry::updateMutatedAssetNonSharedDataSize((re::internal::AssetEntry *)a2[1]);
      }
    }
  }
  re::AssetHandle::payloadDidChangeIfPossible((re::AssetHandle *)a2);
}

uint64_t re::TextureAsset::setTextureAndSemantic_makeMutable(const re::ImportGraphicsContext *a1, uint64_t *a2, uint64_t a3, int a4, __int128 *a5)
{
  uint64_t v10;
  os_unfair_lock_s *v11;
  int v12;
  uint64_t v13;
  unsigned int v14;
  uint64_t v15;
  uint64_t v16;
  __int128 v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  __int128 v21;

  re::AssetHandle::loadNow(a2[1], 0);
  v10 = a2[1];
  if (!v10)
    goto LABEL_13;
  v11 = *(os_unfair_lock_s **)(v10 + 24);
  if (v11)
  {
    v12 = re::AssetManager::convertToMutable(v11, (const re::AssetHandle *)a2, 0);
    v13 = a2[1];
    if (!v13)
      goto LABEL_13;
    v14 = atomic_load((unsigned int *)(v13 + 704));
    if (v12)
    {
      if (v14 == 2)
      {
        re::AssetHandle::mutateAssetCommon((re::AssetHandle *)a2);
        ++*(_DWORD *)(a2[1] + 260);
        v15 = re::AssetHandle::loadedAsset<re::TextureAsset>((re::TextureAsset *)a2);
        if (v15)
        {
          v16 = v15;
          re::TextureAsset::setTextureAndSemantic(v15, a1, a3, a4);
          v17 = *a5;
          *(_OWORD *)(v16 + 24) = a5[1];
          *(_OWORD *)(v16 + 8) = v17;
          v18 = a2[1];
          *(_BYTE *)(v18 + 256) = 1;
LABEL_12:
          re::internal::AssetEntry::updateMutatedRuntimeAssetSize((os_unfair_lock_s *)v18);
          re::internal::AssetEntry::updateMutatedAssetNonSharedDataSize((re::internal::AssetEntry *)a2[1]);
          goto LABEL_13;
        }
      }
      goto LABEL_13;
    }
  }
  else
  {
    v14 = atomic_load((unsigned int *)(v10 + 704));
  }
  if (v14 == 2)
  {
    ++*(_DWORD *)(a2[1] + 260);
    v19 = re::AssetHandle::loadedAsset<re::TextureAsset>((re::TextureAsset *)a2);
    if (v19)
    {
      v20 = v19;
      re::TextureAsset::setTextureAndSemantic(v19, a1, a3, a4);
      v21 = *a5;
      *(_OWORD *)(v20 + 24) = a5[1];
      *(_OWORD *)(v20 + 8) = v21;
      v18 = a2[1];
      goto LABEL_12;
    }
  }
LABEL_13:
  re::AssetHandle::payloadDidChangeIfPossible((re::AssetHandle *)a2);
  return 1;
}

void re::TextureAsset::setMetalTexture_fromDrawableQueue(uint64_t a1, re::ImportGraphicsContext *a2, void **a3, int a4)
{
  id v7[4];

  re::TextureHandle::setMetalTexture((const re::TextureHandle *)(a1 + 48), a3);
  if (a4)
  {
    re::ImportGraphicsContext::createFromRenderManager(a2, (re::ImportGraphicsContext *)v7);
    re::TextureAsset::updateLegacyLinearFormatWithSRGBDataTexture((re::TextureAsset *)a1, v7);

  }
}

void re::TextureData::setColorSpace(id *this, __CFString *a2)
{
  objc_storeStrong(this + 12, a2);

}

void re::TextureAssetLoader::init(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, char a8, char a9)
{
  const char *v15;
  __int16 v16;
  char v17;
  re::TextureAsset *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t *v22;

  a1[1] = a2;
  a1[2] = a3;
  re::ObjCObject::operator=((id *)a1 + 5, (id *)a4);
  re::ObjCObject::operator=((id *)a1 + 6, (id *)(a4 + 8));
  v16 = *(_WORD *)(a4 + 16);
  *((_BYTE *)a1 + 58) = *(_BYTE *)(a4 + 18);
  *((_WORD *)a1 + 28) = v16;
  if (*((_BYTE *)a1 + 59) || *(_BYTE *)(a4 + 19))
  {
    if (!*((_BYTE *)a1 + 59) || *(_BYTE *)(a4 + 19))
    {
      if (!*((_BYTE *)a1 + 59) && *(_BYTE *)(a4 + 19))
        *((_BYTE *)a1 + 59) = 1;
      *((_BYTE *)a1 + 60) = *(_BYTE *)(a4 + 20);
    }
    else
    {
      *((_BYTE *)a1 + 59) = 0;
    }
  }
  a1[8] = *(_QWORD *)(a4 + 24);
  a1[9] = a6;
  a1[3] = a5;
  a1[4] = a7;
  *((_BYTE *)a1 + 88) = a8;
  re::Defaults::BOOLValue((re::Defaults *)"preloadEngineTextureAssets", v15, (char *)&v22);
  if ((_BYTE)v22)
    v17 = BYTE1(v22);
  else
    v17 = 1;
  *((_BYTE *)a1 + 89) = v17;
  if (a9)
  {
    v22 = a1;
    re::make::shared::object<re::TextureAssetRealityFileProviderCallbacks,re::TextureAssetLoader *>((re *)&v22, &v20);
    re::SharedPtr<re::SkeletalPoseJointDefinition>::reset(a1 + 10, v20);
    v19 = *(_QWORD *)(a1[1] + 1248);
    if (v19)
    {
      re::TextureAsset::assetType(v18);
      v21 = v20;
      v22 = &re::TextureAsset::assetType(void)::type;
      re::HashTable<re::AssetType const*,re::SharedPtr<re::RealityFileAssetProvider::PerTypeLoadCallbacks>,re::Hash<re::AssetType const*>,re::EqualTo<re::AssetType const*>,true,false>::add<re::RealityFileAssetProvider::PerTypeLoadCallbacks*&>(v19 + 232, (uint64_t *)&v22, &v21);
    }
    if (v20)

  }
}

__n128 re::TextureAssetLoader::initSpecializedTemporaryLoader(uint64_t a1, uint64_t a2)
{
  __int16 v4;
  int v5;
  BOOL v6;
  BOOL v7;
  __n128 result;

  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  re::ObjCObject::operator=((id *)(a1 + 40), (id *)(a2 + 40));
  re::ObjCObject::operator=((id *)(a1 + 48), (id *)(a2 + 48));
  v4 = *(_WORD *)(a2 + 56);
  *(_BYTE *)(a1 + 58) = *(_BYTE *)(a2 + 58);
  *(_WORD *)(a1 + 56) = v4;
  v5 = *(unsigned __int8 *)(a2 + 59);
  if (*(_BYTE *)(a1 + 59))
    v6 = 0;
  else
    v6 = v5 == 0;
  if (!v6)
  {
    if (*(_BYTE *)(a1 + 59))
      v7 = v5 == 0;
    else
      v7 = 0;
    if (v7)
    {
      *(_BYTE *)(a1 + 59) = 0;
    }
    else
    {
      if (!*(_BYTE *)(a1 + 59) && *(_BYTE *)(a2 + 59))
        *(_BYTE *)(a1 + 59) = 1;
      *(_BYTE *)(a1 + 60) = *(_BYTE *)(a2 + 60);
    }
  }
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  result = *(__n128 *)(a2 + 24);
  *(__n128 *)(a1 + 24) = result;
  *(_WORD *)(a1 + 88) = *(_WORD *)(a2 + 88);
  return result;
}

void re::TextureAssetLoader::~TextureAssetLoader(re::TextureAssetLoader *this)
{
  uint64_t v2;
  uint64_t v3;

  *(_QWORD *)this = &off_24ED36AE0;
  v2 = *((_QWORD *)this + 10);
  if (v2)
    *(_QWORD *)(v2 + 24) = 0;
  re::DynamicArray<re::AssetHandle>::deinit((uint64_t)this + 96);
  v3 = *((_QWORD *)this + 10);
  if (v3)
  {

    *((_QWORD *)this + 10) = 0;
  }

}

{
  re::TextureAssetLoader::~TextureAssetLoader(this);
  JUMPOUT(0x2276933B8);
}

void re::TextureAssetLoader::preloadAssets(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t ProviderForScheme;
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9[3];
  uint64_t v10;
  char v11;
  _QWORD v12[3];
  int v13;
  uint64_t v14;
  _QWORD v15[3];
  int v16;
  uint64_t v17;
  _QWORD v18[4];
  _BYTE v19[16];
  uint64_t v20;
  uint64_t *v21;

  if (re::ServiceLocator::serviceOrNull<re::RenderManager>(a2))
  {
    v4 = re::ServiceLocator::service<re::AssetService>(a2);
    ProviderForScheme = re::AssetProviderRegistry::tryGetProviderForScheme(*(os_unfair_lock_s **)(v4 + 1192), "BuiltinTexture");
    if (ProviderForScheme)
    {
      re::BuiltinTextureAssetProvider::buildFallbackTextureDescriptors(ProviderForScheme, v6, (uint64_t)v19);
      if (v20)
      {
        v7 = v21;
        v8 = 144 * v20;
        do
        {
          re::DynamicString::DynamicString((re::DynamicString *)&v10, (const re::DynamicString *)v7);
          re::DynamicArray<BOOL>::DynamicArray((uint64_t)v12, v7 + 4);
          re::DynamicArray<BOOL>::DynamicArray((uint64_t)v15, v7 + 9);
          re::DynamicString::DynamicString((re::DynamicString *)v18, (const re::DynamicString *)(v7 + 14));
          os_unfair_lock_lock((os_unfair_lock_t)(v4 + 64));
          re::AssetManager::assetHandle_assetTablesLocked((re::AssetManager *)v4, (const re::AssetLoadDescriptor *)&v10, v9);
          os_unfair_lock_unlock((os_unfair_lock_t)(v4 + 64));
          if ((*(unsigned int (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 352))(*(_QWORD *)(a1 + 8)))
            re::AssetHandle::loadAsync((re::AssetHandle *)v9);
          re::DynamicArray<re::AssetHandle>::add((_anonymous_namespace_ *)(a1 + 96), (re::AssetHandle *)v9);
          re::AssetHandle::~AssetHandle((re::AssetHandle *)v9);
          if (v18[0])
          {
            if ((v18[1] & 1) != 0)
              (*(void (**)(void))(*(_QWORD *)v18[0] + 40))();
            memset(v18, 0, sizeof(v18));
          }
          if (v15[0])
          {
            if (v17)
              (*(void (**)(void))(*(_QWORD *)v15[0] + 40))();
            v17 = 0;
            memset(v15, 0, sizeof(v15));
            ++v16;
          }
          if (v12[0])
          {
            if (v14)
              (*(void (**)(void))(*(_QWORD *)v12[0] + 40))();
            v14 = 0;
            memset(v12, 0, sizeof(v12));
            ++v13;
          }
          if (v10 && (v11 & 1) != 0)
            (*(void (**)(void))(*(_QWORD *)v10 + 40))();
          v7 += 18;
          v8 -= 144;
        }
        while (v8);
      }
      re::DynamicArray<re::AssetLoadDescriptor>::deinit((uint64_t)v19);
    }
    re::AssetManager::assetHandle((re::AssetManager *)v4, "engine:blueNoise64RGBA8.ktx", 1, 0, &v10);
    if (*(_BYTE *)(a1 + 89)
      || (*(unsigned int (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 352))(*(_QWORD *)(a1 + 8)))
    {
      re::AssetHandle::loadAsync((re::AssetHandle *)&v10);
    }
    re::DynamicArray<re::AssetHandle>::add((_anonymous_namespace_ *)(a1 + 96), (re::AssetHandle *)&v10);
    re::AssetHandle::~AssetHandle((re::AssetHandle *)&v10);
  }
}

uint64_t re::TextureAssetLoader::defaultAssetCompileOptions(re::TextureAssetLoader *this, int a2)
{
  uint64_t *v2;
  uint64_t result;

  if (!a2)
    return 0;
  v2 = re::globalAllocators(this);
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v2[2] + 32))(v2[2], 32, 4);
  *(_QWORD *)(result + 4) = 0;
  *(_QWORD *)(result + 20) = 0;
  *(_QWORD *)(result + 12) = 0;
  *(_DWORD *)result = 16777473;
  *(_BYTE *)(result + 4) = 1;
  *(_DWORD *)(result + 28) = 0;
  *(_QWORD *)(result + 16) = 0;
  *(_BYTE *)(result + 24) = 0;
  *(_QWORD *)(result + 8) = 0x100000001;
  return result;
}

void re::reinterpretAsLinear(re *this, const re::TextureData *a2)
{
  char *v4;
  int v5;
  int v6;
  int v7;
  id v8;
  __CFString *v9;
  id v10;
  _anonymous_namespace_ *v11;
  uint64_t v12;
  id v13;
  uint64_t v14;
  _OWORD v15[2];

  if (*((_DWORD *)a2 + 22) >= 2u)
    goto LABEL_13;
  v4 = (char *)a2 + 8;
  v5 = re::translateSRGBPixelFormatToLinear((uint64_t)objc_msgSend(*((id *)a2 + 1), sel_pixelFormat));
  if (*((_DWORD *)v4 + 20) >= 2u)
    goto LABEL_13;
  v6 = v5;
  if (v5 == objc_msgSend(*(id *)v4, sel_pixelFormat))
  {
    *(_BYTE *)this = *(_BYTE *)a2;
    *((_BYTE *)this + 8) = 0;
    *((_DWORD *)this + 22) = -1;
    std::__variant_detail::__ctor<std::__variant_detail::__traits<NS::SharedPtr<MTL::Texture>,re::CPUTexture>>::__generic_construct[abi:nn180100]<std::__variant_detail::__copy_constructor<std::__variant_detail::__traits<NS::SharedPtr<MTL::Texture>,re::CPUTexture>,(std::__variant_detail::_Trait)1> const&>((uint64_t)this + 8, (uint64_t)v4);
    *((_QWORD *)this + 12) = *((id *)a2 + 12);
    return;
  }
  v7 = *((_DWORD *)a2 + 22);
  if (v7 != 1)
  {
    if (!v7)
    {
      v8 = objc_msgSend(*((id *)a2 + 1), sel_newTextureViewWithPixelFormat_, v6);
      v9 = (__CFString *)*((id *)a2 + 12);
      *(_BYTE *)this &= 0x80u;
      *((_QWORD *)this + 1) = v8;
      *((_DWORD *)this + 22) = 0;
      *((_QWORD *)this + 12) = 0;
      re::TextureData::setColorSpace((id *)this, v9);
      if (v8)

      return;
    }
LABEL_13:
    v12 = std::__throw_bad_variant_access[abi:nn180100]();
    re::TextureAssetLoader::serializeAssetBlob(v12);
    return;
  }
  v10 = objc_msgSend(*((id *)a2 + 1), sel_copy);
  objc_msgSend(v10, sel_setPixelFormat_, v6);
  if (*((_DWORD *)a2 + 22) != 1)
    goto LABEL_13;
  v13 = v10;
  v11 = (_anonymous_namespace_ *)re::DynamicArray<re::DynamicArray<unsigned char>>::DynamicArray((uint64_t)&v14, (uint64_t *)a2 + 2);
  memset(v15, 0, sizeof(v15));
  re::DynamicString::setCapacity(v15, 0);
  re::TextureData::TextureData((uint64_t)this, (uint64_t)&v13, (__CFString *)*((id *)a2 + 12));
  re::CPUTexture::~CPUTexture((re::CPUTexture *)&v13);
  if (v10)

}

BOOL re::TextureAssetLoader::serializeAssetBlob(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  id *v7;
  id v8;
  uint64_t v9;
  _anonymous_namespace_ *v10;
  id v11;
  uint64_t v12;
  _BOOL8 v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  id v18;
  id v19;
  re *v20;
  NSObject *v21;
  _anonymous_namespace_ *shouldForceToLinearPixelFormat;
  id v23;
  void *v24;
  void *v25;
  id v26;
  uint64_t v27;
  uint64_t v28;
  unsigned int v29;
  int v30;
  re::TextureData *v31;
  uint64_t v32;
  uint64_t v33;
  _BYTE *v35;
  _BYTE v36[8];
  _BYTE v37[80];
  unsigned int v38;
  id v39;
  _BYTE v40[8];
  _BYTE v41[80];
  unsigned int v42;
  id v43;
  _anonymous_namespace_ *v44;
  uint64_t v45;
  char v46;
  _BYTE v47[71];
  unsigned int v48;
  id v49;
  id v50;
  char v51;
  uint8_t buf[4];
  _BYTE *v53;
  _BYTE v54[80];
  int v55;
  id v56;
  uint64_t v57;

  v57 = *MEMORY[0x24BDAC8D0];
  v7 = (id *)(a3 + 152);
  v36[0] = *(_BYTE *)(a3 + 152);
  v37[0] = 0;
  v38 = -1;
  std::__variant_detail::__ctor<std::__variant_detail::__traits<NS::SharedPtr<MTL::Texture>,re::CPUTexture>>::__generic_construct[abi:nn180100]<std::__variant_detail::__copy_constructor<std::__variant_detail::__traits<NS::SharedPtr<MTL::Texture>,re::CPUTexture>,(std::__variant_detail::_Trait)1> const&>((uint64_t)v37, a3 + 160);
  v8 = v7[12];
  v39 = v8;
  if (!a4)
    goto LABEL_62;
  v9 = re::HashTable<re::DynamicString,re::DynamicArray<re::ResourceFetchManager::Request *>,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::tryGet(a4, (uint64_t)&v44);
  v10 = v44;
  if (v44 && (v45 & 1) != 0)
    v10 = (_anonymous_namespace_ *)(*(uint64_t (**)(void))(*(_QWORD *)v44 + 40))();
  if (v9 && *(_DWORD *)(v9 + 32) == 1)
  {
    v11 = objc_retainAutorelease(*(id *)v9);
    v12 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 16))(a2, objc_msgSend(v11, "bytes"), objc_msgSend(v11, "length"));
    v13 = v12 == objc_msgSend(v11, "length");

    goto LABEL_53;
  }
  v14 = re::Hash<re::DynamicString>::operator()((uint64_t)buf, (uint64_t)&v44);
  v15 = 0x7FFFFFFFLL;
  if (*(_QWORD *)a4)
  {
    v16 = *(unsigned int *)(*(_QWORD *)(a4 + 8) + 4 * (v14 % *(unsigned int *)(a4 + 24)));
    if ((_DWORD)v16 != 0x7FFFFFFF)
    {
      v17 = *(_QWORD *)(a4 + 16);
      v15 = 0x7FFFFFFFLL;
      while (!re::DynamicString::operator==(v17 + 88 * v16 + 16, (uint64_t)&v44))
      {
        v16 = *(_DWORD *)(v17 + 88 * v16 + 8) & 0x7FFFFFFF;
        if (v16 == 0x7FFFFFFF)
          goto LABEL_15;
      }
      v15 = v16;
    }
  }
LABEL_15:
  if (v44 && (v45 & 1) != 0)
    (*(void (**)(void))(*(_QWORD *)v44 + 40))();
  if (v15 != 0x7FFFFFFF)
  {
    LOBYTE(v44) = 0;
    if ((_DWORD)shouldForceToLinearPixelFormat)
    {
      re::reinterpretAsLinear((re *)v40, (const re::TextureData *)v7);
      buf[0] = 1;
      BYTE4(v53) = v40[0];
      v54[0] = 0;
      v55 = -1;
      std::__variant_detail::__ctor<std::__variant_detail::__traits<NS::SharedPtr<MTL::Texture>,re::CPUTexture>>::__generic_construct[abi:nn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<NS::SharedPtr<MTL::Texture>,re::CPUTexture>,(std::__variant_detail::_Trait)1>>((uint64_t)v54, (uint64_t)v41);
      v23 = v43;
      v43 = 0;
      v56 = v23;
      if ((_BYTE)v44 || buf[0])
      {
        if (!(_BYTE)v44 || buf[0])
        {
          if ((_BYTE)v44 || !buf[0])
          {
            LOBYTE(v45) = BYTE4(v53);
            std::__variant_detail::__assignment<std::__variant_detail::__traits<NS::SharedPtr<MTL::Texture>,re::CPUTexture>>::__generic_assign[abi:nn180100]<std::__variant_detail::__move_assignment<std::__variant_detail::__traits<NS::SharedPtr<MTL::Texture>,re::CPUTexture>,(std::__variant_detail::_Trait)1>>((uint64_t)&v46, (uint64_t)v54);
            v25 = v56;
            v56 = 0;
            v26 = v50;
            v50 = v25;

          }
          else
          {
            LOBYTE(v44) = 1;
            LOBYTE(v45) = BYTE4(v53);
            v46 = 0;
            LODWORD(v49) = -1;
            std::__variant_detail::__ctor<std::__variant_detail::__traits<NS::SharedPtr<MTL::Texture>,re::CPUTexture>>::__generic_construct[abi:nn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<NS::SharedPtr<MTL::Texture>,re::CPUTexture>,(std::__variant_detail::_Trait)1>>((uint64_t)&v46, (uint64_t)v54);
            v24 = v56;
            v56 = 0;
            v50 = v24;
          }
        }
        else
        {

          if ((_DWORD)v49 != -1)
            ((void (*)(char *, char *))*(&__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8nn180100IZNS0_6__dtorINS0_8__traitsIJN2NS9SharedPtrIN3MTL7TextureEEEN2re10CPUTextureEEEELNS0_6_TraitE1EE9__destroyB8nn180100EvEUlRT_E_JRSF_EEEDcOSG_DpOT0____fmatrix
                                                  + v49))(&v51, &v46);
          LODWORD(v49) = -1;
          LOBYTE(v44) = 0;
        }
      }
      re::Optional<re::TextureData>::~Optional((uint64_t)buf);

      if (v42 != -1)
        shouldForceToLinearPixelFormat = (_anonymous_namespace_ *)((uint64_t (*)(char *, _BYTE *))*(&__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8nn180100IZNS0_6__dtorINS0_8__traitsIJN2NS9SharedPtrIN3MTL7TextureEEEN2re10CPUTextureEEEELNS0_6_TraitE1EE9__destroyB8nn180100EvEUlRT_E_JRSF_EEEDcOSG_DpOT0____fmatrix + v42))(&v51, v41);
    }
    v27 = *(_QWORD *)(a3 + 24);
    v28 = *(unsigned int *)(a3 + 32);
    v29 = *(_DWORD *)(a3 + 36);
    v30 = *(_DWORD *)(a3 + 20);
    if ((_BYTE)v44)
      v31 = (re::TextureData *)&v45;
    else
      v31 = (re::TextureData *)v7;
    if (v30 == 4)
      v32 = v29;
    else
      v32 = 1056964608;
    v33 = v27;
    if (v30 != 4)
      v33 = 1;
    v13 = re::exportToKtxWithRGBA8ToASTCCompression(a2, v31, v33 | v27 & 0xFFFFFFFF00000000, v28 | (v32 << 32), *(_DWORD *)(a3 + 388));
    re::Optional<re::TextureData>::~Optional((uint64_t)&v44);
  }
  else
  {
LABEL_62:
    {
      re::reinterpretAsLinear((re *)&v44, (const re::TextureData *)v36);
      v36[0] = (_BYTE)v44;
      std::__variant_detail::__assignment<std::__variant_detail::__traits<NS::SharedPtr<MTL::Texture>,re::CPUTexture>>::__generic_assign[abi:nn180100]<std::__variant_detail::__move_assignment<std::__variant_detail::__traits<NS::SharedPtr<MTL::Texture>,re::CPUTexture>,(std::__variant_detail::_Trait)1>>((uint64_t)v37, (uint64_t)&v45);
      v18 = v49;
      v49 = 0;
      v19 = v39;
      v39 = v18;

      if (v48 != -1)
        ((void (*)(uint8_t *, uint64_t *))*(&__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8nn180100IZNS0_6__dtorINS0_8__traitsIJN2NS9SharedPtrIN3MTL7TextureEEEN2re10CPUTextureEEEELNS0_6_TraitE1EE9__destroyB8nn180100EvEUlRT_E_JRSF_EEEDcOSG_DpOT0____fmatrix
                                                    + v48))(buf, &v45);
    }
    re::exportToKtx(a2, (uint64_t)v36, 0, 0, (uint64_t)&v44);
    if ((_BYTE)v44)
    {
      v13 = 1;
    }
    else
    {
      v21 = *re::assetTypesLogObjects(v20);
      if (os_log_type_enabled(v21, OS_LOG_TYPE_ERROR))
      {
        if ((v46 & 1) != 0)
          v35 = *(_BYTE **)&v47[7];
        else
          v35 = v47;
        *(_DWORD *)buf = 136315138;
        v53 = v35;
        _os_log_error_impl(&dword_224FE9000, v21, OS_LOG_TYPE_ERROR, "%s", buf, 0xCu);
      }
      v13 = (_BYTE)v44 != 0;
      if (!(_BYTE)v44)
      {
        if (v45 && (v46 & 1) != 0)
          (*(void (**)(void))(*(_QWORD *)v45 + 40))();
        v13 = 0;
      }
    }
  }
LABEL_53:

  if (v38 != -1)
    ((void (*)(_anonymous_namespace_ **, _BYTE *))*(&__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8nn180100IZNS0_6__dtorINS0_8__traitsIJN2NS9SharedPtrIN3MTL7TextureEEEN2re10CPUTextureEEEELNS0_6_TraitE1EE9__destroyB8nn180100EvEUlRT_E_JRSF_EEEDcOSG_DpOT0____fmatrix
                                                             + v38))(&v44, v37);
  return v13;
}

uint64_t re::`anonymous namespace'::shouldForceToLinearPixelFormat(_anonymous_namespace_ *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  const char *v7;
  re::TextureAsset *v9;
  _OWORD v10[3];
  uint64_t v11;

  if (a3)
  {
    v6 = re::HashTable<re::DynamicString,re::DynamicArray<re::ResourceFetchManager::Request *>,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::tryGet(a3, (uint64_t)v10);
    if (*(_QWORD *)&v10[0] && (BYTE8(v10[0]) & 1) != 0)
      (*(void (**)(void))(**(_QWORD **)&v10[0] + 40))();
    if (v6 && !*(_DWORD *)(v6 + 32))
    {
      v7 = (*(_BYTE *)(v6 + 8) & 1) != 0 ? *(const char **)(v6 + 16) : (const char *)(v6 + 9);
      if (atoi(v7) > 4)
        return 0;
    }
  }
  if (*(_DWORD *)(a2 + 88) >= 2u)
  {
    v9 = (re::TextureAsset *)std::__throw_bad_variant_access[abi:nn180100]();
    return re::TextureAsset::copyColorSpaceToCFStringPtr(v9);
  }
  else
  {
    objc_msgSend(*(id *)(a2 + 8), sel_pixelFormat);
    v11 = 0;
    memset(v10, 0, sizeof(v10));
    MTLPixelFormatGetInfoForDevice();
    if ((WORD4(v10[0]) & 0x800) == 0)
      return 0;
    return *((_DWORD *)a1 + 97) == 3;
  }
}

void re::TextureAsset::copyColorSpaceToCFStringPtr(re::TextureAsset *this@<X0>, const __CFString **a2@<X8>)
{
  unint64_t v3;
  unint64_t v4;
  const char *v5;
  const __CFString *v6;

  *a2 = 0;
  v3 = *((_QWORD *)this + 50);
  v4 = v3 >> 1;
  if ((v3 & 1) == 0)
    v4 = v3 >> 1;
  if (v4)
  {
    if ((v3 & 1) != 0)
      v5 = (const char *)*((_QWORD *)this + 51);
    else
      v5 = (char *)this + 401;
    v6 = (id)CFStringCreateWithCString((CFAllocatorRef)*MEMORY[0x24BDBD240], v5, 0x8000100u);
    *a2 = v6;
    CFRelease(v6);
  }
}

void re::TextureAssetLoader::createRuntimeData(uint64_t a1, uint64_t a2, uint64_t a3, int a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, char a9, unsigned __int8 a10, int a11, uint64_t a12)
{
  uint8_t *v13;
  id v14;
  void *v15;
  id v16;
  void *v17;
  uint64_t v22;
  uint64_t v23;
  _BOOL8 Next;
  const __CFString *v25;
  __CFString *v26;
  int v27;
  NSObject *v28;
  uint64_t isHDR;
  unsigned __int8 v30;
  uint64_t v31;
  int v32;
  BOOL v33;
  int v35;
  re *v36;
  int8x16_t v37;
  int v38;
  int v39;
  int v40;
  int v41;
  int v42;
  int v43;
  BOOL v44;
  unint64_t v45;
  re *isValid;
  NSObject *v47;
  const char *v48;
  uint64_t v49;
  unsigned int v50;
  unsigned int v51;
  unsigned int v52;
  uint64_t v53;
  uint64_t v54;
  int v55;
  unsigned int v56;
  unsigned int v57;
  BOOL v58;
  uint64_t v59;
  unsigned int v60;
  uint64_t v61;
  int64_t v62;
  uint64x2_t v63;
  uint64_t v64;
  int64x2_t v65;
  int64x2_t v66;
  int64x2_t v67;
  int64x2_t v68;
  int64x2_t v69;
  uint64x2_t v70;
  int64x2_t v71;
  uint64x2_t v72;
  uint64x2_t v73;
  uint64x2_t v74;
  uint64x2_t v75;
  int8x16_t v76;
  int8x16_t v77;
  _QWORD *v78;
  uint64_t v79;
  uint64_t v80;
  __n128 *v81;
  unint64_t v82;
  unsigned int *v83;
  int *v84;
  int v85;
  id *v86;
  int v87;
  uint64_t v88;
  uint8_t buf[4];
  unsigned int v90;
  __CFString *v91;
  uint64_t v92;
  __n128 *v93;
  unint64_t v94;
  int v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  int v99;
  uint64_t v100;
  uint64_t v101;
  uint8_t v102[8];
  uint64_t v103;
  unsigned int v104;
  unsigned int v105;
  unsigned int v106;
  unsigned int v107;
  __int16 v108;
  uint64_t v109;
  unint64_t v110;
  uint64_t v111;
  id v112;
  char v113;
  __int16 v114;
  uint64_t v115;
  _QWORD v116[10];
  unsigned int v117;
  id v118;
  _QWORD v119[3];
  _QWORD *v120;
  uint64_t v121;

  v121 = *MEMORY[0x24BDAC8D0];
  if (!*(_QWORD *)(a2 + 112))
  {
    if ((re::TextureData::isValid((re::TextureData *)(a2 + 152)) & 1) != 0 || !a3)
      return;
    *(_DWORD *)(a2 + 40) = *(_DWORD *)(a2 + 384);
    v101 = 0;
    if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)a3 + 88))(a3))
    {
      v22 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a3 + 72))(a3);
      a3 = 0;
      v101 = v22;
    }
    else
    {
      v22 = 0;
    }
    v100 = 0;
    if (v22)
      v23 = v22;
    else
      v23 = a3;
    v97 = 0;
    v98 = 0;
    v96 = 0;
    v99 = 0;
    v93 = 0;
    v94 = 0;
    v92 = v23;
    v95 = 0;
    Next = re::SeekableInputStreamBufferedReader::readNext((re::SeekableInputStreamBufferedReader *)&v92, 0xFFFFFFFFFFFFFFFFLL);
    if (!Next)
    {
      v28 = *re::assetTypesLogObjects((re *)Next);
      if (os_log_type_enabled(v28, OS_LOG_TYPE_ERROR))
      {
        *(_WORD *)v102 = 0;
        _os_log_error_impl(&dword_224FE9000, v28, OS_LOG_TYPE_ERROR, "Missing blob to create texture", v102, 2u);
      }
      goto LABEL_133;
    }
    re::TextureAsset::copyColorSpaceToCFStringPtr((re::TextureAsset *)a2, (const __CFString **)&v91);
    v25 = v91;
    v26 = v91;
    if (!v91)
    {
      if ((*(_DWORD *)(a2 + 388) - 3) > 1)
      {
        v26 = 0;
      }
      else
      {
        v27 = re::translateLinearPixelFormatToSRGB(*(unsigned int *)(a2 + 376));
        v26 = (__CFString *)(id)re::ColorHelpers::getCGColorSpaceNameForPixelFormat(v27, 0);
        v91 = v26;
      }
    }
    v90 = *(_DWORD *)(a2 + 384);
    isHDR = *(unsigned int *)(a2 + 376);
    if ((_DWORD)isHDR)
    {
      isHDR = re::isHDR(isHDR);
      if ((_DWORD)isHDR)
        v30 = 1;
      else
        v30 = 2;
      if (a5)
        goto LABEL_35;
    }
    else
    {
      v30 = 0;
      if (a5)
      {
LABEL_35:
        v31 = re::HashTable<re::DynamicString,re::DynamicArray<re::ResourceFetchManager::Request *>,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::tryGet(a5, (uint64_t)v102);
        if (*(_QWORD *)v102 && (v103 & 1) != 0)
          (*(void (**)(void))(**(_QWORD **)v102 + 40))();
        v32 = *(_DWORD *)(a2 + 388);
        if (v31)
          v33 = (v32 - 3) >= 2;
        else
          v33 = 1;
        v35 = !v33 && v25 == 0;
        goto LABEL_49;
      }
    }
    v35 = 0;
    v32 = *(_DWORD *)(a2 + 388);
LABEL_49:
    v119[0] = &off_24ED36D30;
    v119[1] = &v101;
    v120 = v119;
    re::TextureAssetLoader::parseKTXData(a1, v93, v94, &v90, (int *)(a2 + 376), v32, (id *)&v91, v35, (uint64_t)v102, *(_DWORD *)(a2 + 20) != 1, v30, a4, (uint64_t)v119);
    v38 = *(_DWORD *)(a2 + 364);
    if (v38 <= 1)
      v38 = 1;
    v39 = v105;
    if (v105 <= 1)
      v39 = 1;
    if (v38 != v39)
      goto LABEL_64;
    v40 = *(_DWORD *)(a2 + 360);
    if (v40 <= 1)
      v40 = 1;
    v41 = v104;
    if (v104 <= 1)
      v41 = 1;
    if (v40 == v41)
    {
      v42 = *(_DWORD *)(a2 + 368);
      if (v42 <= 1)
        v42 = 1;
      v43 = v106;
      if (v106 <= 1)
        v43 = 1;
      v44 = v42 == v43;
    }
    else
    {
LABEL_64:
      v44 = 0;
    }
    *(_BYTE *)(a2 + 124) = v44;
    *(_WORD *)(a2 + 122) = v108;
    if (*(_BYTE *)(a2 + 126) || v113)
    {
      if (!*(_BYTE *)(a2 + 126) || v113)
      {
        if (!*(_BYTE *)(a2 + 126) && v113)
          *(_BYTE *)(a2 + 126) = 1;
        *(_WORD *)(a2 + 128) = v114;
      }
      else
      {
        *(_BYTE *)(a2 + 126) = 0;
      }
    }
    if ((v110 & 1) != 0)
      v45 = v110 >> 1;
    else
      v45 = v110 >> 1;
    if (v45)
      v36 = re::DynamicString::operator=((re::DynamicString *)(a2 + 64), (re::DynamicString *)&v109);
    if (!v117)
      goto LABEL_82;
    if (v117 != 1)
    {
      v80 = std::__throw_bad_variant_access[abi:nn180100]();
      re::TextureAssetLoader::parseKTXData(v80, v81, v82, v83, v84, v85, v86, v87, v88, a9, a10, a11, a12);
      return;
    }
    if (v116[3])
    {
LABEL_82:
      if (v116[0])
        re::TextureAsset::setTextureAndSemantic(a2, (const re::ImportGraphicsContext *)(a1 + 40), (uint64_t)&v115, *(_DWORD *)(a2 + 388));
    }
    if ((_BYTE)v108)
    {
      *(_BYTE *)(a2 + 256) = *(_BYTE *)(a2 + 152);
      std::__variant_detail::__assignment<std::__variant_detail::__traits<NS::SharedPtr<MTL::Texture>,re::CPUTexture>>::__generic_assign[abi:nn180100]<std::__variant_detail::__copy_assignment<std::__variant_detail::__traits<NS::SharedPtr<MTL::Texture>,re::CPUTexture>,(std::__variant_detail::_Trait)1> const&>(a2 + 264, a2 + 160);
      objc_storeStrong((id *)(a2 + 352), *(id *)(a2 + 248));
    }
    if (!*(_BYTE *)(a2 + 124))
    {
      LODWORD(v49) = v105;
      if (v105 <= v104)
        LODWORD(v49) = v104;
      if (v49 <= v106)
        v49 = v106;
      else
        v49 = v49;
      if (*(_DWORD *)(a2 + 360) <= *(_DWORD *)(a2 + 364))
        v50 = *(_DWORD *)(a2 + 364);
      else
        v50 = *(_DWORD *)(a2 + 360);
      if (v50 <= *(_DWORD *)(a2 + 368))
        v50 = *(_DWORD *)(a2 + 368);
      v51 = 32 - __clz(v49);
      v52 = v51 - 1;
      v53 = ~(-1 << (v51 - 1));
      if (!(_DWORD)v49)
      {
        v53 = 0;
        v52 = 0;
      }
      if ((v53 & v49) != 0)
        v54 = v51;
      else
        v54 = v52;
      v55 = __clz((int)v50);
      v56 = 64 - v55;
      v57 = 63 - v55;
      v58 = v55 == 64;
      if (v55 == 64)
        v59 = 0;
      else
        v59 = ~(-1 << (63 - v55));
      if (v58)
        v60 = 0;
      else
        v60 = v57;
      if ((v59 & (int)v50) != 0)
        v61 = v56;
      else
        v61 = v60;
      v62 = v61 - v54;
      if (v62 < 0)
      {
        v47 = *re::assetTypesLogObjects(v36);
        if (!os_log_type_enabled(v47, OS_LOG_TYPE_ERROR))
          goto LABEL_122;
        *(_WORD *)buf = 0;
        v48 = "Failed copyTextureMips: unexpected mipmapOffset";
        goto LABEL_121;
      }
      if (v107)
      {
        v63 = (uint64x2_t)vdupq_n_s64((unint64_t)v107 - 1);
        v64 = (v107 + 7) & 0x1FFFFFFF8;
        v37.i16[0] = *(_WORD *)(a2 + 120);
        v65 = (int64x2_t)xmmword_2260FBDD0;
        v66 = (int64x2_t)xmmword_2260E7F20;
        v67 = (int64x2_t)xmmword_2260E7F00;
        v68 = (int64x2_t)xmmword_2260E7EE0;
        v69 = vdupq_n_s64(v62);
        v70 = (uint64x2_t)vdupq_n_s64(1uLL);
        v71 = vdupq_n_s64(8uLL);
        do
        {
          v72 = (uint64x2_t)v65;
          v73 = (uint64x2_t)v66;
          v74 = (uint64x2_t)v67;
          v75 = (uint64x2_t)v68;
          v76 = v37;
          v37 = vorrq_s8(v37, (int8x16_t)vuzp1q_s16((int16x8_t)vuzp1q_s32((int32x4_t)vshlq_u64(v70, (uint64x2_t)vaddq_s64(v68, v69)), (int32x4_t)vshlq_u64(v70, (uint64x2_t)vaddq_s64(v67, v69))), (int16x8_t)vuzp1q_s32((int32x4_t)vshlq_u64(v70, (uint64x2_t)vaddq_s64(v66, v69)), (int32x4_t)vshlq_u64(v70, (uint64x2_t)vaddq_s64(v65, v69)))));
          v66 = vaddq_s64(v66, v71);
          v67 = vaddq_s64(v67, v71);
          v68 = vaddq_s64(v68, v71);
          v65 = vaddq_s64(v65, v71);
          v64 -= 8;
        }
        while (v64);
        v77 = vbslq_s8((int8x16_t)vuzp1q_s16((int16x8_t)vuzp1q_s32((int32x4_t)vcgtq_u64(v75, v63), (int32x4_t)vcgtq_u64(v74, v63)), (int16x8_t)vuzp1q_s32((int32x4_t)vcgtq_u64(v73, v63), (int32x4_t)vcgtq_u64(v72, v63))), v76, v37);
        *(int8x8_t *)v77.i8 = vorr_s8(*(int8x8_t *)v77.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v77, v77, 8uLL));
        *(_WORD *)(a2 + 120) = v77.i16[0] | v77.i16[2] | ((v77.i32[0] | v77.i32[1]) >> 16);
      }
    }
    isValid = (re *)re::TextureData::isValid((re::TextureData *)(a2 + 152));
    if ((isValid & 1) != 0
      || (v47 = *re::assetTypesLogObjects(isValid), !os_log_type_enabled(v47, OS_LOG_TYPE_ERROR)))
    {
LABEL_122:

      if (v117 != -1)
        ((void (*)(uint8_t *, _QWORD *))*(&__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8nn180100IZNS0_6__dtorINS0_8__traitsIJN2NS9SharedPtrIN3MTL7TextureEEEN2re10CPUTextureEEEELNS0_6_TraitE1EE9__destroyB8nn180100EvEUlRT_E_JRSF_EEEDcOSG_DpOT0____fmatrix
                                                   + v117))(buf, v116);
      v117 = -1;
      if (v109 && (v110 & 1) != 0)
        (*(void (**)(void))(*(_QWORD *)v109 + 40))();
      v78 = v120;
      if (v120 == v119)
      {
        v79 = 4;
        v78 = v119;
      }
      else
      {
        if (!v120)
        {
LABEL_132:

LABEL_133:
          re::SeekableInputStreamBufferedReader::~SeekableInputStreamBufferedReader((re::SeekableInputStreamBufferedReader *)&v92);
          return;
        }
        v79 = 5;
      }
      (*(void (**)(void))(*v78 + 8 * v79))();
      goto LABEL_132;
    }
    *(_WORD *)buf = 0;
    v48 = "Failed to load compiled texture blob";
LABEL_121:
    _os_log_error_impl(&dword_224FE9000, v47, OS_LOG_TYPE_ERROR, v48, buf, 2u);
    goto LABEL_122;
  }
  v102[0] = 0;
  v103 = 0;
  LODWORD(v111) = 0;
  v112 = 0;
  *(_BYTE *)(a2 + 152) = 0;
  v13 = (uint8_t *)(a2 + 152);
  std::__variant_detail::__assignment<std::__variant_detail::__traits<NS::SharedPtr<MTL::Texture>,re::CPUTexture>>::__generic_assign[abi:nn180100]<std::__variant_detail::__move_assignment<std::__variant_detail::__traits<NS::SharedPtr<MTL::Texture>,re::CPUTexture>,(std::__variant_detail::_Trait)1>>(a2 + 160, (uint64_t)&v103);
  if (v13 != v102)
  {
    v14 = v112;
    v112 = 0;
    v15 = *(void **)(a2 + 248);
    *(_QWORD *)(a2 + 248) = v14;

  }
  if ((_DWORD)v111 != -1)
    ((void (*)(uint64_t *, uint64_t *))*(&__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8nn180100IZNS0_6__dtorINS0_8__traitsIJN2NS9SharedPtrIN3MTL7TextureEEEN2re10CPUTextureEEEELNS0_6_TraitE1EE9__destroyB8nn180100EvEUlRT_E_JRSF_EEEDcOSG_DpOT0____fmatrix
                                                + v111))(&v92, &v103);
  v102[0] = 0;
  v103 = 0;
  LODWORD(v111) = 0;
  v112 = 0;
  *(_BYTE *)(a2 + 256) = 0;
  std::__variant_detail::__assignment<std::__variant_detail::__traits<NS::SharedPtr<MTL::Texture>,re::CPUTexture>>::__generic_assign[abi:nn180100]<std::__variant_detail::__move_assignment<std::__variant_detail::__traits<NS::SharedPtr<MTL::Texture>,re::CPUTexture>,(std::__variant_detail::_Trait)1>>(a2 + 264, (uint64_t)&v103);
  if ((uint8_t *)(a2 + 256) != v102)
  {
    v16 = v112;
    v112 = 0;
    v17 = *(void **)(a2 + 352);
    *(_QWORD *)(a2 + 352) = v16;

  }
  if ((_DWORD)v111 != -1)
    ((void (*)(uint64_t *, uint64_t *))*(&__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8nn180100IZNS0_6__dtorINS0_8__traitsIJN2NS9SharedPtrIN3MTL7TextureEEEN2re10CPUTextureEEEELNS0_6_TraitE1EE9__destroyB8nn180100EvEUlRT_E_JRSF_EEEDcOSG_DpOT0____fmatrix
                                                + v111))(&v92, &v103);
  *(_QWORD *)(a2 + 376) = 0x200000000;
  *(_DWORD *)(a2 + 384) = 84148994;
  *(_DWORD *)(a2 + 388) = 6;
  *(_QWORD *)v102 = "";
  v103 = 0;
  re::DynamicString::operator=((re::DynamicString *)(a2 + 392), (uint64_t)v102);
  *(_DWORD *)(a2 + 368) = 1;
  *(_QWORD *)(a2 + 360) = 0x100000001;
  *(_DWORD *)(a2 + 122) = 0;
  if (*(_BYTE *)(a2 + 126))
    *(_BYTE *)(a2 + 126) = 0;
  *(_WORD *)(a2 + 120) = 0;
  *(_DWORD *)(a2 + 8) = 16777473;
  *(_BYTE *)(a2 + 12) = 1;
  *(_WORD *)(a2 + 13) = 0;
  *(_BYTE *)(a2 + 15) = 0;
  *(_DWORD *)(a2 + 16) = 1;
  *(_QWORD *)(a2 + 28) = 0;
  *(_QWORD *)(a2 + 20) = 0;
  *(_DWORD *)(a2 + 36) = 0;
}

void re::TextureAssetLoader::parseKTXData(uint64_t a1@<X0>, __n128 *a2@<X1>, unint64_t a3@<X2>, unsigned int *a4@<X3>, int *a5@<X4>, int a6@<W5>, id *a7@<X6>, int a8@<W7>, uint64_t a9@<X8>, char a10, unsigned __int8 a11, int a12, uint64_t a13)
{
  id v20;
  uint64_t isHDR;
  __int16 v22;
  int v23;
  int v24;
  __CFString **v25;
  BOOL v26;
  uint64_t MetadataFromKTXData;
  unint64_t v28;
  unint64_t v29;
  unint64_t v30;
  char v31;
  unint64_t v32;
  unint64_t v33;
  unint64_t v34;
  unint64_t v35;
  unint64_t v36;
  unint64_t v37;
  const char *v38;
  unint64_t v39;
  unint64_t v40;
  unint64_t v41;
  BOOL v46;
  size_t v47;
  BOOL v48;
  NSObject *v49;
  unint64_t v50;
  uint64_t v51;
  char v52;
  unint64_t v53;
  _QWORD *v54;
  unint64_t v55;
  unint64_t v56;
  unint64_t v57;
  const char *v58;
  NSObject *v59;
  unsigned int v61;
  id v62;
  id v63;
  id *v64;
  unint64_t v66;
  _OWORD v68[2];
  _OWORD v69[2];
  id v70;
  __int128 v71;
  _BYTE v72[8];
  __int128 v73;
  __int128 v74;
  _QWORD v75[2];
  unint64_t v76;
  int v77;
  uint64_t v78;
  _QWORD v79[2];
  unint64_t v80;
  int v81;
  uint64_t v82;
  char v83;
  id v84;
  id v85;
  _BYTE v86[3];
  char v88;
  uint64_t v89;
  __int128 v90;
  _BYTE v91[44];
  id v92;
  __int128 v93;
  uint64_t v94;
  uint8_t buf[32];
  __int128 v96;
  __int128 v97;
  __int128 v98;
  unsigned int v99;
  id v100;
  int v101;
  const char *v102;
  __int16 v103;
  int v104;
  __int16 v105;
  unint64_t v106;
  __int16 v107;
  unint64_t v108;
  uint64_t v109;

  v109 = *MEMORY[0x24BDAC8D0];
  v90 = 0uLL;
  *(_DWORD *)v91 = a12;
  *(_DWORD *)&v91[24] = 0;
  v91[28] = 0;
  *(_DWORD *)&v91[32] = 0;
  memset(&v91[4], 0, 17);
  v91[36] = *(_BYTE *)(a1 + 88);
  *(_DWORD *)&v91[40] = a6;
  v20 = *a7;
  v93 = 0uLL;
  v92 = v20;
  if ((a10 & 1) == 0)
    *(_DWORD *)&v91[8] = 1;
  v84 = *(id *)(a1 + 40);
  isHDR = (uint64_t)*(id *)(a1 + 48);
  v85 = (id)isHDR;
  *(_WORD *)v86 = *(_WORD *)(a1 + 56);
  v86[2] = *(_BYTE *)(a1 + 58);
  if (*(_BYTE *)(a1 + 59))
    v88 = *(_BYTE *)(a1 + 60);
  v89 = *(_QWORD *)(a1 + 64);
  if (a8)
  {
    v22 = *(_WORD *)(a1 + 57);
    v86[0] = 0;
    *(_WORD *)&v86[1] = v22;
  }
  if ((a6 - 3) <= 1)
  {
    v23 = *a5;
    isHDR = re::translateLinearPixelFormatToSRGB(*a5);
    if ((_DWORD)isHDR == v23)
    {
      isHDR = re::isHDR(v23);
      if ((isHDR & 1) == 0)
        *(_DWORD *)&v91[32] = 2;
    }
  }
  v83 = 1;
  if (v20)
  {
    isHDR = re::ColorHelpers::getColorGamutFromCGColorSpaceName(v20, &v83);
    if ((_DWORD)isHDR)
    {
      if (v83 == 1)
      {
        v24 = re::isHDR(*a5);
        if ((v24 & 1) != 0)
        {
          if ((unint64_t)re::getComponentCount() >= 3)
          {
            v25 = (__CFString **)MEMORY[0x24BDBF258];
LABEL_29:
            re::TextureFromImageOptions::setColorSpace((re::TextureFromImageOptions *)&v90, *v25);
            goto LABEL_30;
          }
        }
        else
        {
          *(_QWORD *)&v97 = 0;
          v96 = 0u;
          memset(buf, 0, sizeof(buf));
          MTLPixelFormatGetInfoForDevice();
          v26 = *(_DWORD *)&v91[32] == 2 || (*(_WORD *)&buf[8] & 0x800) != 0;
          if ((unint64_t)re::getComponentCount() >= 3)
          {
            if (v26)
              v25 = (__CFString **)MEMORY[0x24BDBF228];
            else
              v25 = (__CFString **)MEMORY[0x24BDBF2F0];
            goto LABEL_29;
          }
          if (v26)
          {
            v25 = (__CFString **)MEMORY[0x24BDBF290];
            goto LABEL_29;
          }
        }
        v25 = (__CFString **)MEMORY[0x24BDBF260];
        if (!v24)
          v25 = (__CFString **)MEMORY[0x24BDBF2F8];
        goto LABEL_29;
      }
    }
  }
LABEL_30:
  if (a12 >= 2)
    DWORD2(v90) = 1;
  *(_WORD *)(a9 + 64) = 0;
  *(_OWORD *)(a9 + 32) = 0u;
  *(_OWORD *)(a9 + 48) = 0u;
  *(_OWORD *)a9 = 0u;
  *(_OWORD *)(a9 + 16) = 0u;
  *(_QWORD *)(a9 + 88) = 0;
  *(_QWORD *)(a9 + 96) = 0;
  *(_QWORD *)(a9 + 80) = 0;
  re::DynamicString::setCapacity((_QWORD *)(a9 + 72), 0);
  *(_BYTE *)(a9 + 104) = 0;
  *(_BYTE *)(a9 + 112) &= 0x80u;
  *(_QWORD *)(a9 + 120) = 0;
  *(_DWORD *)(a9 + 200) = 0;
  *(_QWORD *)(a9 + 208) = 0;
  v64 = (id *)(a9 + 208);
  v82 = 0;
  v79[1] = 0;
  v80 = 0;
  v78 = 0;
  v79[0] = 0;
  v81 = 0;
  v75[1] = 0;
  v76 = 0;
  v75[0] = 0;
  v77 = 0;
  if (!v72[0])
  {
    MetadataFromKTXData = v73;
    if ((_QWORD)v73)
    {
      if ((BYTE8(v73) & 1) != 0)
        MetadataFromKTXData = (*(uint64_t (**)(void))(*(_QWORD *)v73 + 40))();
      v73 = 0u;
      v74 = 0u;
    }
  }
  v66 = a3;
  v28 = v80;
  if (v80)
  {
    v29 = 0;
    v30 = 0;
    v31 = 0;
    while (1)
    {
      v32 = *(_QWORD *)(v82 + v29 + 8);
      if ((v32 & 1) != 0)
        MetadataFromKTXData = *(_QWORD *)(v82 + v29 + 16);
      else
        MetadataFromKTXData = v82 + v29 + 9;
      v33 = v32 >> 1;
      v34 = v32 >> 1;
      if ((*(_QWORD *)(v82 + v29 + 8) & 1) != 0)
        v35 = v33;
      else
        v35 = v34;
      v36 = v76;
      if (v76 <= v30)
      {
        v94 = 0;
        v97 = 0u;
        v98 = 0u;
        v96 = 0u;
        memset(buf, 0, sizeof(buf));
        os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        v101 = 136315906;
        v102 = "operator[]";
        v103 = 1024;
        v104 = 789;
        v105 = 2048;
        v106 = v30;
        v107 = 2048;
        v108 = v36;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_135:
        v94 = 0;
        v97 = 0u;
        v98 = 0u;
        v96 = 0u;
        memset(buf, 0, sizeof(buf));
        os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        v101 = 136315906;
        v102 = "operator[]";
        v103 = 1024;
        v104 = 789;
        v105 = 2048;
        v106 = v29;
        v107 = 2048;
        v108 = v30;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
      }
      v37 = *(_QWORD *)(v78 + v29 + 8);
      if ((v37 & 1) != 0)
        v38 = *(const char **)(v78 + v29 + 16);
      else
        v38 = (const char *)(v78 + v29 + 9);
      v39 = v37 >> 1;
      v40 = v37 >> 1;
      if ((*(_QWORD *)(v78 + v29 + 8) & 1) != 0)
        v41 = v39;
      else
        v41 = v40;
      switch(v35)
      {
        case 0xBuLL:
          MetadataFromKTXData = memcmp((const void *)MetadataFromKTXData, "ToolVersion", 0xBuLL);
          if (!(_DWORD)MetadataFromKTXData)
          {
            if (v41 < 3)
            {
              MetadataFromKTXData = atoi(v38);
              if (!*(_BYTE *)(a9 + 104))
                *(_BYTE *)(a9 + 104) = 1;
              *(_WORD *)(a9 + 106) = MetadataFromKTXData;
            }
            else
            {
              if (!*(_BYTE *)(a9 + 104))
                *(_BYTE *)(a9 + 104) = 1;
              *(_WORD *)(a9 + 106) = 0;
            }
          }
          break;
        case 0x16uLL:
          MetadataFromKTXData = memcmp((const void *)MetadataFromKTXData, "__primary_texture_path", 0x16uLL);
          if (!(_DWORD)MetadataFromKTXData)
          {
            v47 = strlen(v38);
            *(_QWORD *)buf = v38;
            *(_QWORD *)&buf[8] = v47;
            MetadataFromKTXData = (uint64_t)re::DynamicString::operator=((re::DynamicString *)(a9 + 72), (uint64_t)buf);
            v31 = 1;
            v28 = v80;
          }
          break;
        case 0x14uLL:
          if (*(_QWORD *)MetadataFromKTXData == 0x6972705F73695F5FLL
            && *(_QWORD *)(MetadataFromKTXData + 8) == 0x7865745F7972616DLL
            && *(_DWORD *)(MetadataFromKTXData + 16) == 1701999988)
          {
            v48 = v41 == 4 && *(_DWORD *)v38 == 1702195828;
            *(_BYTE *)(a9 + 64) = v48;
          }
          else
          {
            if (*(_QWORD *)MetadataFromKTXData != 0x6469735F73695F5FLL
              || *(_QWORD *)(MetadataFromKTXData + 8) != 0x7865745F72616365
              || *(_DWORD *)(MetadataFromKTXData + 16) != 1701999988)
            {
              break;
            }
            v46 = v41 == 4 && *(_DWORD *)v38 == 1702195828;
            *(_BYTE *)(a9 + 65) = v46;
          }
          v31 = 1;
          break;
      }
      ++v30;
      v29 += 32;
      if (v28 <= v30)
        goto LABEL_92;
    }
  }
  v31 = 0;
LABEL_92:
  if (*(_BYTE *)(a9 + 64))
  {
    v49 = *re::assetTypesLogObjects((re *)MetadataFromKTXData);
    v50 = os_log_type_enabled(v49, OS_LOG_TYPE_DEBUG);
    if ((_DWORD)v50)
    {
      *(_WORD *)buf = 0;
      _os_log_debug_impl(&dword_224FE9000, v49, OS_LOG_TYPE_DEBUG, "KTX Metadata:", buf, 2u);
    }
    if (v80)
    {
      v51 = 0;
      v29 = 0;
      v52 = 0;
      while (1)
      {
        v53 = *(_QWORD *)(v82 + v51 + 8);
        if ((v53 & 1) != 0)
          v54 = *(_QWORD **)(v82 + v51 + 16);
        else
          v54 = (_QWORD *)(v82 + v51 + 9);
        v55 = v53 >> 1;
        v56 = v53 >> 1;
        if ((*(_QWORD *)(v82 + v51 + 8) & 1) != 0)
          v57 = v55;
        else
          v57 = v56;
        v30 = v76;
        if (v76 <= v29)
          goto LABEL_135;
        if ((*(_QWORD *)(v78 + v51 + 8) & 1) != 0)
          v58 = *(const char **)(v78 + v51 + 16);
        else
          v58 = (const char *)(v78 + v51 + 9);
        v59 = *re::assetTypesLogObjects((re *)v50);
        v50 = os_log_type_enabled(v59, OS_LOG_TYPE_DEBUG);
        if ((_DWORD)v50)
        {
          *(_DWORD *)buf = 136315394;
          *(_QWORD *)&buf[4] = v54;
          *(_WORD *)&buf[12] = 2080;
          *(_QWORD *)&buf[14] = v58;
          _os_log_debug_impl(&dword_224FE9000, v59, OS_LOG_TYPE_DEBUG, "\t key:%s, value:%s", buf, 0x16u);
        }
        switch(v57)
        {
          case 0x1DuLL:
            v50 = memcmp(v54, "__mipmap_level_count_override", 0x1DuLL);
            if (!(_DWORD)v50)
            {
              v50 = strtoul(v58, 0, 0);
              HIDWORD(v93) = v50;
              goto LABEL_123;
            }
            break;
          case 0x11uLL:
            v50 = memcmp(v54, "__height_override", 0x11uLL);
            if (!(_DWORD)v50)
            {
              v50 = strtoul(v58, 0, 0);
              DWORD1(v93) = v50;
              goto LABEL_123;
            }
            break;
          case 0x10uLL:
            if (*v54 == 0x5F68746469775F5FLL && v54[1] == 0x656469727265766FLL)
            {
              v50 = strtoul(v58, 0, 0);
              LODWORD(v93) = v50;
              goto LABEL_123;
            }
            v50 = memcmp(v54, "__depth_override", 0x10uLL);
            if (!(_DWORD)v50)
            {
              v50 = strtoul(v58, 0, 0);
              DWORD2(v93) = v50;
LABEL_123:
              v52 = 1;
            }
            break;
        }
        ++v29;
        v51 += 32;
        if (v80 <= v29)
        {
          if ((v52 & 1) != 0)
            DWORD2(v90) = 2;
          break;
        }
      }
    }
  }
  if ((v31 & 1) == 0)
    *(_BYTE *)(a9 + 64) = 1;
  v61 = *a4;
  v68[0] = v90;
  v68[1] = *(_OWORD *)v91;
  v69[0] = *(_OWORD *)&v91[16];
  *(_OWORD *)((char *)v69 + 12) = *(_OWORD *)&v91[28];
  v70 = v92;
  v71 = v93;
  *(_BYTE *)(a9 + 112) = buf[0];
  std::__variant_detail::__assignment<std::__variant_detail::__traits<NS::SharedPtr<MTL::Texture>,re::CPUTexture>>::__generic_assign[abi:nn180100]<std::__variant_detail::__move_assignment<std::__variant_detail::__traits<NS::SharedPtr<MTL::Texture>,re::CPUTexture>,(std::__variant_detail::_Trait)1>>(a9 + 120, (uint64_t)&buf[8]);
  if (v64 != &v100)
  {
    v62 = v100;
    v100 = 0;
    v63 = *v64;
    *v64 = v62;

  }
  if (v99 != -1)
    ((void (*)(int *, uint8_t *))*(&__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8nn180100IZNS0_6__dtorINS0_8__traitsIJN2NS9SharedPtrIN3MTL7TextureEEEN2re10CPUTextureEEEELNS0_6_TraitE1EE9__destroyB8nn180100EvEUlRT_E_JRSF_EEEDcOSG_DpOT0____fmatrix
                                            + v99))(&v101, &buf[8]);
  v99 = -1;

  re::DynamicArray<re::DynamicString>::deinit((uint64_t)v75);
  re::DynamicArray<re::DynamicString>::deinit((uint64_t)v79);

}

uint64_t re::TextureAssetLoader::assetByteSize(re::TextureAssetLoader *this, id *a2)
{
  uint64_t v4;
  unint64_t v5;
  id *v6;
  double v7;
  uint64_t v8;
  id v9;
  uint64_t v10;
  uint64_t v11;
  re::TextureAssetLoader *v13;
  re::DirectMeshPayload *v14;
  const re::ExistingAssetInformation *v15;
  _OWORD v16[6];
  uint64_t v17;

  v4 = (*(uint64_t (**)(re::TextureAssetLoader *))(*(_QWORD *)this + 40))(this);
  if (!*((_QWORD *)this + 2))
    return v4;
  if (!*((_DWORD *)a2 + 60))
  {
    if (objc_msgSend(a2[20], sel_mipmapLevelCount))
    {
      v5 = 0;
      do
      {
        v17 = 0;
        memset(v16, 0, sizeof(v16));
        v6 = (id *)(*((_QWORD *)this + 2) + 184);
        objc_msgSend(a2[20], sel_pixelFormat, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
        objc_msgSend(a2[20], sel_width);
        objc_msgSend(a2[20], sel_height);
        objc_msgSend(a2[20], sel_depth);
        objc_msgSend(a2[20], sel_sampleCount);
        *(_QWORD *)&v7 = re::mtl::getTextureLevelInfo(v6, (uint64_t)v16).n128_u64[0];
        v8 = v17;
        v9 = a2[20];
        v10 = (uint64_t)objc_msgSend(v9, sel_arrayLength, v7);
        if ((char *)objc_msgSend(v9, sel_textureType) - 5 >= (char *)2)
          v11 = v10;
        else
          v11 = 6 * v10;
        v4 += v11 * v8;
        ++v5;
      }
      while (v5 < (unint64_t)objc_msgSend(a2[20], sel_mipmapLevelCount));
    }
    return v4;
  }
  v13 = (re::TextureAssetLoader *)std::__throw_bad_variant_access[abi:nn180100]();
  return re::TextureAssetLoader::registerAsset(v13, v14, v15);
}

uint64_t re::TextureAssetLoader::registerAsset(re::TextureAssetLoader *this, re::DirectMeshPayload *a2, const re::ExistingAssetInformation *a3)
{
  os_unfair_lock_s *v6;
  const unsigned __int8 *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  os_unfair_lock_s *v11;
  uint64_t Resource;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  id v16;
  unint64_t v17;
  unint64_t v18;
  char *v19;
  uint64_t v20;
  NSObject *v21;
  _DWORD *v22;
  unsigned int v24;
  uint64_t v25;
  os_unfair_lock_s *v26;
  void (***v27)(_QWORD, re::DirectMeshPayload *);
  _Unwind_Exception *v29;
  id v30;
  id v31;
  _BYTE v32[22];
  os_unfair_lock_s *v33;
  unsigned __int8 v34[80];
  unsigned int v35;
  id v36;
  uuid_t dst;
  os_unfair_lock_s *v38;
  unsigned __int8 v39[16];
  uint64_t v40;

  v40 = *MEMORY[0x24BDAC8D0];
  if (*((_QWORD *)this + 2)
    && (!*((_QWORD *)a2 + 7) || !*((_QWORD *)a2 + 6))
    && re::TextureData::isValid((re::DirectMeshPayload *)((char *)a2 + 152))
    && !*((_DWORD *)a2 + 60))
  {
    re::TextureManager::registerTexture(*(os_unfair_lock_s **)(*((_QWORD *)this + 2) + 64), (void **)a2 + 20, &v33);
    re::TextureHandle::operator=((re::DirectMeshPayload *)((char *)a2 + 48), (re::TextureHandle *)&v33);
    re::TextureHandle::invalidate((re::TextureHandle *)&v33);
  }
  if (!*((_QWORD *)this + 9) || !*((_QWORD *)a2 + 14))
  {
    v15 = *((_QWORD *)this + 1);
    if (!v15)
      goto LABEL_53;
    if (*((_BYTE *)a2 + 122))
    {
      if (*((_BYTE *)a2 + 124))
        goto LABEL_53;
      if (!*((_DWORD *)a2 + 86))
      {
        v30 = *((id *)a2 + 33);
        re::makeLoadedTextureView(&v30, (_WORD *)a2 + 60, (id *)v32);
        if (v30)
        {

          v30 = 0;
        }
        LOBYTE(v33) = 0;
        *(_QWORD *)v34 = *(id *)v32;
        v35 = 0;
        v36 = 0;
        re::TextureAsset::setTextureAndSemantic((uint64_t)a2, (re::TextureAssetLoader *)((char *)this + 40), (uint64_t)&v33, *((_DWORD *)a2 + 97));

        if (v35 != -1)
          ((void (*)(id *, unsigned __int8 *))*(&__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8nn180100IZNS0_6__dtorINS0_8__traitsIJN2NS9SharedPtrIN3MTL7TextureEEEN2re10CPUTextureEEEELNS0_6_TraitE1EE9__destroyB8nn180100EvEUlRT_E_JRSF_EEEDcOSG_DpOT0____fmatrix
                                                         + v35))(&v31, v34);
        v16 = *(id *)v32;
        if (*(_QWORD *)v32)
          goto LABEL_35;
        goto LABEL_53;
      }
LABEL_57:
      v29 = (_Unwind_Exception *)std::__throw_bad_variant_access[abi:nn180100]();
      _Unwind_Resume(v29);
    }
    v17 = *((_QWORD *)a2 + 9);
    v18 = v17 >> 1;
    if ((v17 & 1) == 0)
      v18 = v17 >> 1;
    if (v18 > 6)
    {
      v22 = (_DWORD *)((char *)a2 + 73);
      v19 = (char *)*((_QWORD *)a2 + 10);
      if ((v17 & 1) != 0)
        v22 = (_DWORD *)*((_QWORD *)a2 + 10);
      if (*v22 == 1702064993 && *(_DWORD *)((char *)v22 + 3) == 796095589)
      {
        v19 = (char *)v22 + 7;
        goto LABEL_47;
      }
      if ((v17 & 1) != 0)
      {
LABEL_47:
        (*(void (**)(os_unfair_lock_s **__return_ptr))(*(_QWORD *)v15 + 8))(&v33);
        (*(void (**)(_BYTE *__return_ptr, _QWORD, char *, os_unfair_lock_s **))(**((_QWORD **)this + 1) + 24))(v32, *((_QWORD *)this + 1), v19, &v33);
        re::AssetHandle::loadNow(*(uint64_t *)&v32[8], 0);
        if (*(_QWORD *)&v32[8])
        {
          v24 = atomic_load((unsigned int *)(*(_QWORD *)&v32[8] + 704));
          if (v24 == 2)
          {
            re::AssetHandle::mutateAssetCommon((re::AssetHandle *)v32);
            ++*(_DWORD *)(*(_QWORD *)&v32[8] + 260);
            v25 = re::AssetHandle::loadedAsset<re::TextureAsset>((re::TextureAsset *)v32);
            if (v25)
            {
              if (*((_DWORD *)a2 + 60))
                goto LABEL_57;
              re::TextureAsset::updateMips(v25, (re::TextureAssetLoader *)((char *)this + 40), (id *)a2 + 20);
              v26 = *(os_unfair_lock_s **)&v32[8];
              *(_BYTE *)(*(_QWORD *)&v32[8] + 256) = 1;
              re::internal::AssetEntry::updateMutatedRuntimeAssetSize(v26);
              re::internal::AssetEntry::updateMutatedAssetNonSharedDataSize(*(re::internal::AssetEntry **)&v32[8]);
            }
          }
        }
        re::AssetHandle::~AssetHandle((re::AssetHandle *)v32);
        re::AssetHandle::~AssetHandle((re::AssetHandle *)&v33);
        goto LABEL_53;
      }
    }
    else if ((v17 & 1) != 0)
    {
      v19 = (char *)*((_QWORD *)a2 + 10);
      goto LABEL_47;
    }
    v19 = (char *)a2 + 73;
    goto LABEL_47;
  }
  v6 = (os_unfair_lock_s *)re::DirectMeshPayload::connectionId((id *)a2 + 14);
  v7 = (const unsigned __int8 *)objc_msgSend(*((id *)a2 + 14), "identifier");
  v33 = v6;
  uuid_copy(v34, v7);
  v8 = *((_QWORD *)this + 9);
  v38 = v33;
  uuid_copy(v39, v34);
  if (*((_QWORD *)a3 + 10) == -1)
    v9 = 0;
  else
    v9 = *((_QWORD *)a3 + 10);
  re::DirectResourceAssetTracker::registerDirectResourceBackedAsset(v8, (uint64_t)&v38, v9);
  v10 = *((_QWORD *)this + 9);
  v11 = v33;
  uuid_copy(dst, v34);
  Resource = re::DirectResourceAssetTracker::findResource(v10, (uint64_t)v11, dst);
  if (!Resource)
    goto LABEL_53;
  v13 = Resource;
  v14 = DRResourceAsTexture();
  if (v14)
  {
    objc_msgSend(*((id *)a2 + 14), "setDirectTexture:", v14);
    v31 = (id)DRTextureReadTexture();
    if (*((_QWORD *)a2 + 7) && *((_QWORD *)a2 + 6))
    {
      re::TextureHandle::setMetalTexture((re::DirectMeshPayload *)((char *)a2 + 48), &v31);
    }
    else
    {
      v20 = *((_QWORD *)this + 2);
      if (v20)
      {
        re::TextureManager::registerTexture(*(os_unfair_lock_s **)(v20 + 64), &v31, (os_unfair_lock_s **)v32);
        re::TextureHandle::operator=((re::DirectMeshPayload *)((char *)a2 + 48), (re::TextureHandle *)v32);
        re::TextureHandle::invalidate((re::TextureHandle *)v32);
      }
    }
    re::TextureHandle::setMetalTexture((re::DirectMeshPayload *)((char *)a2 + 136), &v31);
    v16 = v31;
    if (v31)
LABEL_35:

  }
  else
  {
    v21 = *re::assetsLogObjects(0);
    if (os_log_type_enabled(v21, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)v32 = 134218240;
      *(_QWORD *)&v32[4] = re::DirectMeshPayload::connectionId((id *)a2 + 14);
      *(_WORD *)&v32[12] = 2048;
      *(_QWORD *)&v32[14] = v13;
      _os_log_impl(&dword_224FE9000, v21, OS_LOG_TYPE_DEFAULT, "TexturePayload resourceDidUpdate received a non-texture DirectResource for connectionId: %llu resource: %p", v32, 0x16u);
    }
  }
LABEL_53:
  v27 = (void (***)(_QWORD, re::DirectMeshPayload *))*((_QWORD *)this + 3);
  if (v27 && *((_QWORD *)a2 + 12))
    (**v27)(v27, a2);
  return 0;
}

void re::TextureAssetLoader::unregisterAsset(uint64_t a1, re::DirectMeshPayload *this, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  const unsigned __int8 *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unsigned __int8 v12[16];
  uint64_t v13;
  unsigned __int8 v14[16];
  uint64_t v15;

  v15 = *MEMORY[0x24BDAC8D0];
  v6 = *(_QWORD *)(a1 + 24);
  if (v6 && *((_QWORD *)this + 12))
    (*(void (**)(uint64_t, re::DirectMeshPayload *))(*(_QWORD *)v6 + 8))(v6, this);
  if (*(_QWORD *)(a1 + 72) && *((_QWORD *)this + 14))
  {
    v7 = re::DirectMeshPayload::connectionId((id *)this + 14);
    v8 = (const unsigned __int8 *)objc_msgSend(*((id *)this + 14), "identifier");
    v13 = v7;
    uuid_copy(v14, v8);
    v9 = *(_QWORD *)(a1 + 72);
    v11 = v7;
    uuid_copy(v12, v14);
    if (*(_QWORD *)(a3 + 80) == -1)
      v10 = 0;
    else
      v10 = *(_QWORD *)(a3 + 80);
    re::DirectResourceAssetTracker::unregisterDirectResourceBackedAsset(v9, (uint64_t)&v11, v10);
  }
  if (*((_QWORD *)this + 7) && *((_QWORD *)this + 6))
    re::TextureHandle::invalidate((re::DirectMeshPayload *)((char *)this + 48));
  if (*((_QWORD *)this + 18))
  {
    if (*((_QWORD *)this + 17))
      re::TextureHandle::invalidate((re::DirectMeshPayload *)((char *)this + 136));
  }
}

void re::TextureAssetLoader::createRuntimeData(_anonymous_namespace_ *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v12;
  int v13;
  const char *v14;
  uint64_t v15;
  uint64_t v16;

  if (!a4)
    goto LABEL_7;
  v12 = re::HashTable<re::DynamicString,re::DynamicArray<re::ResourceFetchManager::Request *>,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::tryGet(a4, (uint64_t)&v15);
  if (v15 && (v16 & 1) != 0)
    (*(void (**)(void))(*(_QWORD *)v15 + 40))();
  if (v12 && !*(_DWORD *)(v12 + 32))
  {
    if ((*(_BYTE *)(v12 + 8) & 1) != 0)
      v14 = *(const char **)(v12 + 16);
    else
      v14 = (const char *)(v12 + 9);
    v13 = atoi(v14);
  }
  else
  {
LABEL_7:
    v13 = 1;
  }
  re::TextureAssetLoader::createRuntimeData((uint64_t)a1, a2, a3, v13, a4, a6, a7, a8, v15, BYTE1(v15), SHIDWORD(v15), v16);
}

re *re::TextureAssetLoader::unloadAsset(re *this, void (***a2)(_QWORD))
{
  uint64_t v3;

  if (a2)
  {
    v3 = re::globalAllocators(this)[2];
    (**a2)(a2);
    return (re *)(*(uint64_t (**)(uint64_t, void (***)(_QWORD)))(*(_QWORD *)v3 + 40))(v3, a2);
  }
  return this;
}

BOOL re::TextureAssetLoader::isSupportedSourceExtension(re::TextureAssetLoader *this, re *a2)
{
  return re::canLoadTextureFileWithExtension(a2, (const char *)a2);
}

__guard re::TextureAssetLoader::introspectionType(re::TextureAssetLoader *this)
{
  unsigned __int8 v1;
  __guard *v2;
  int v4;

  if ((v1 & 1) == 0)
  {
    if (v4)
    {
      re::introspect<re::TextureAsset>(void)::info = re::internal::getOrCreateInfo((re::internal *)"TextureAsset", (uint64_t (*)(re::internal *))re::allocInfo_TextureAsset, (re::IntrospectionBase *(*)(void))re::initInfo_TextureAsset, (void (*)(re::IntrospectionBase *))&re::internal::introspectionInfoStorage<re::TextureAsset>, 0);
    }
  }
  return v2[449];
}

void re::TextureAssetLoader::cloneAsset(id *this, char *a2, re::AssetSerializationScheme *a3)
{
  int v5;
  void *v6;
  char *v7;
  id v8;
  id v9;
  id v10;
  id v11;
  id v12;
  id v13;
  int v14;
  __int128 v15;
  uint64_t TextureAsset;
  id *v17;
  id *v18;
  id *v19;
  int v20;
  __int128 v21[2];
  id v22;
  id v23;
  _BYTE v24[8];
  _QWORD v25[10];
  unsigned int v26;
  id v27;
  _BYTE v28[8];
  _QWORD v29[10];
  unsigned int v30;
  id v31;
  char v32;

  v5 = *((_DWORD *)a2 + 60);
  if (v5)
  {
    if (v5 != 1)
    {
      v17 = (id *)std::__throw_bad_variant_access[abi:nn180100]();
      return;
    }
    if (!*((_QWORD *)a2 + 23))
      goto LABEL_8;
  }
  v7 = a2 + 160;
  v6 = (void *)*((_QWORD *)a2 + 20);
  if (!v6)
  {
LABEL_8:
    re::AssetLoader::cloneAsset((re::AssetLoader *)this, (const re::IntrospectionBase **)a2, a3);
    return;
  }
  v28[0] = 0;
  v29[0] = 0;
  v30 = 0;
  v31 = 0;
  if (v5)
  {
    v24[0] = 0;
    std::__variant_detail::__alt<1ul,re::CPUTexture>::__alt[abi:nn180100]<re::CPUTexture const&>(v25, (uint64_t)v7);
    v26 = 1;
    v27 = 0;
    v28[0] = 0;
    std::__variant_detail::__assignment<std::__variant_detail::__traits<NS::SharedPtr<MTL::Texture>,re::CPUTexture>>::__generic_assign[abi:nn180100]<std::__variant_detail::__move_assignment<std::__variant_detail::__traits<NS::SharedPtr<MTL::Texture>,re::CPUTexture>,(std::__variant_detail::_Trait)1>>((uint64_t)v29, (uint64_t)v25);
    v8 = v27;
    v27 = 0;
    v9 = v31;
    v31 = v8;

    if (v26 != -1)
      ((void (*)(id *, _QWORD *))*(&__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8nn180100IZNS0_6__dtorINS0_8__traitsIJN2NS9SharedPtrIN3MTL7TextureEEEN2re10CPUTextureEEEELNS0_6_TraitE1EE9__destroyB8nn180100EvEUlRT_E_JRSF_EEEDcOSG_DpOT0____fmatrix
                                            + v26))(&v23, v25);
  }
  else
  {
    v10 = v6;
    v23 = v10;
    v11 = v22;
    if (!v22)
    {
      if (v10)

      goto LABEL_15;
    }
    v24[0] = 0;
    v25[0] = v22;
    v26 = 0;
    v27 = 0;
    v28[0] = 0;
    std::__variant_detail::__assignment<std::__variant_detail::__traits<NS::SharedPtr<MTL::Texture>,re::CPUTexture>>::__generic_assign[abi:nn180100]<std::__variant_detail::__move_assignment<std::__variant_detail::__traits<NS::SharedPtr<MTL::Texture>,re::CPUTexture>,(std::__variant_detail::_Trait)1>>((uint64_t)v29, (uint64_t)v25);
    v12 = v27;
    v27 = 0;
    v13 = v31;
    v31 = v12;

    if (v26 != -1)
      ((void (*)(char *, _QWORD *))*(&__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8nn180100IZNS0_6__dtorINS0_8__traitsIJN2NS9SharedPtrIN3MTL7TextureEEEN2re10CPUTextureEEEELNS0_6_TraitE1EE9__destroyB8nn180100EvEUlRT_E_JRSF_EEEDcOSG_DpOT0____fmatrix
                                              + v26))(&v32, v25);

    if (v10)
  }
  v14 = *((_DWORD *)a2 + 97);
  v15 = *(_OWORD *)(a2 + 24);
  v21[0] = *(_OWORD *)(a2 + 8);
  v21[1] = v15;
  TextureAsset = re::TextureAsset::makeTextureAsset((uint64_t)v28, v14, v21);
  *(_DWORD *)(TextureAsset + 40) = *((_DWORD *)a2 + 10);
  *(_BYTE *)(TextureAsset + 124) = a2[124];
  *(_DWORD *)(TextureAsset + 120) = *((_DWORD *)a2 + 30);
  re::DynamicString::operator=((re::DynamicString *)(TextureAsset + 64), (re::DynamicString *)(a2 + 64));
LABEL_15:

  if (v30 != -1)
    ((void (*)(_BYTE *, _QWORD *))*(&__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8nn180100IZNS0_6__dtorINS0_8__traitsIJN2NS9SharedPtrIN3MTL7TextureEEEN2re10CPUTextureEEEELNS0_6_TraitE1EE9__destroyB8nn180100EvEUlRT_E_JRSF_EEEDcOSG_DpOT0____fmatrix
                                             + v30))(v24, v29);
}

void re::`anonymous namespace'::makeCopyOfTextureCommitAndWaitForGPU(id *a1, id *a2, id *a3, int a4)
{
  re *v8;
  id v9;
  NSObject *v10;
  id v11;
  _BYTE *v12;
  _BYTE v13[8];
  uint64_t v14;
  char v15;
  _BYTE v16[23];
  id v17;
  id v18;
  id v19;
  id v20;
  id v21;
  uint8_t buf[4];
  id v23;
  __int16 v24;
  _BYTE *v25;
  uint64_t v26;

  v26 = *MEMORY[0x24BDAC8D0];
  re::createDescriptorFromTexture(a2, a3, &v21);
  if (a4)
  {
    objc_msgSend(v21, sel_setStorageMode_, 2);
    re::mtl::Device::makeSharedTexture(v21, a2, &v20);
  }
  else
  {
    re::mtl::Device::makeTexture(v21, a2, &v20);
  }
  if (v20)
  {
    objc_msgSend(v20, sel_setLabel_, objc_msgSend(*a3, sel_label));
    re::ImportGraphicsContext::getOrCreateCommandQueue((uint64_t)a2, (uint64_t)&re::internal::copyTextureQueueName(void)::queueName, (const char *)1, &v19);
    re::mtl::CommandQueue::makeCommandBuffer(&v19, &v18);
    re::mtl::CommandBuffer::makeBlitCommandEncoder(&v18, &v17);
    objc_msgSend(v17, "copyFromTexture:toTexture:", *a3, v20);
    objc_msgSend(v17, "endEncoding");
    objc_msgSend(v18, "commit");
    objc_msgSend(v18, "waitUntilCompleted");
    re::internal::getCommandBufferError(&v18, (uint64_t)v13);
    if (v13[0])
    {
      v9 = objc_msgSend(*a3, sel_label);
      if (v9)
        objc_msgSend(v20, sel_setLabel_, objc_msgSend(v9, sel_stringByAppendingString_, objc_msgSend(MEMORY[0x24BDD17C8], sel_stringWithCString_encoding_, "_copy", 4)));
      *a1 = v20;
      v20 = 0;
    }
    else
    {
      v10 = *re::assetsLogObjects(v8);
      if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
      {
        v11 = objc_msgSend(objc_msgSend(*a3, sel_label), sel_UTF8String);
        if ((v15 & 1) != 0)
          v12 = *(_BYTE **)&v16[7];
        else
          v12 = v16;
        *(_DWORD *)buf = 136315394;
        v23 = v11;
        v24 = 2080;
        v25 = v12;
      }
      *a1 = 0;
    }
    if (!v13[0] && v14 && (v15 & 1) != 0)
      (*(void (**)(void))(*(_QWORD *)v14 + 40))();

    if (v20)
  }
  else
  {
    *a1 = 0;
  }
  if (v21)

}

uint64_t re::TextureAssetLoader::allocateSampleAsset(id *this)
{
  uint64_t TextureCompressionType;
  id v3;
  id Texture;
  uint64_t TextureAsset;
  _QWORD v7[4];
  int v8;
  uint64_t v9;
  __int128 v10;
  int v11;
  uint64_t v12;
  _QWORD v13[2];
  int64x2_t v14;
  uint64_t v15;
  unsigned int v16;
  id v17;
  id v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  id v22;
  char v23;
  uint64_t v24;

  v24 = *MEMORY[0x24BDAC8D0];
  re::mtl::makeDefaultDevice(&v22);
  v21 = 4;
  v19 = 0;
  v20 = 80;
  TextureCompressionType = re::mtl::getTextureCompressionType(&v22, &v19, &v20, &v21);
  v3 = objc_msgSend(objc_msgSend(MEMORY[0x24BDDD740], sel_alloc), sel_init);
  if ((objc_msgSend(v3, sel_respondsToSelector_, sel_setCompressionType_) & 1) != 0
    || objc_msgSend(v3, sel_methodSignatureForSelector_, sel_setCompressionType_))
  {
    objc_msgSend(v3, sel_setCompressionType_, TextureCompressionType);
  }
  objc_msgSend(v3, sel_setPixelFormat_, 80);
  objc_msgSend(v3, sel_setWidth_, 4);
  objc_msgSend(v3, sel_setHeight_, 4);
  objc_msgSend(v3, sel_setUsage_, 4);
  objc_msgSend(v3, sel_setStorageMode_, 0);
  Texture = re::mtl::Device::makeTexture(v3, this + 5, &v18);
  MEMORY[0x24BDAC7A8](Texture);
  qmemcpy(v7, " !\"#$%&'()*+,-./0123456789:;<=>?", sizeof(v7));
  v12 = 0;
  v13[0] = 0;
  v13[1] = 0;
  v14 = vdupq_n_s64(4uLL);
  v15 = 1;
  objc_msgSend(v18, sel_replaceRegion_mipmapLevel_withBytes_bytesPerRow_, &v12, 0, 0x706050403020100, 0xF0E0D0C0B0A0908, 0x1716151413121110, 0x1F1E1D1C1B1A1918, v7[0], v7[1], v7[2], v7[3]);
  LOBYTE(v12) = 0;
  v13[0] = v18;
  v16 = 0;
  v17 = 0;
  v9 = 0x100000001;
  HIDWORD(v10) = 0;
  v8 = 16777473;
  v11 = 0;
  *(_QWORD *)&v10 = 0;
  *(_QWORD *)((char *)&v10 + 5) = 0;
  TextureAsset = re::TextureAsset::makeTextureAsset((uint64_t)&v12, 6, (__int128 *)&v8);

  if (v16 != -1)
    ((void (*)(char *, _QWORD *))*(&__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8nn180100IZNS0_6__dtorINS0_8__traitsIJN2NS9SharedPtrIN3MTL7TextureEEEN2re10CPUTextureEEEELNS0_6_TraitE1EE9__destroyB8nn180100EvEUlRT_E_JRSF_EEEDcOSG_DpOT0____fmatrix
                                            + v16))(&v23, v13);
  if (v18)

  if (v3)
  return TextureAsset;
}

void re::TextureAssetLoader::makeSharedResourcePayload(id *this@<X0>, char *a2@<X1>, re::AssetSerializationScheme *a3@<X2>, RESerializedPayload **a4@<X8>)
{
  void *v5;
  int v9;
  re *v10;
  NSObject *v11;
  void *v12;
  id v13;
  id v14;
  re *v15;
  BOOL v16;
  int v17;
  NSObject *v18;
  id v19;
  id v20;
  unsigned __int8 v21;
  uint64_t v22;
  unsigned int v23;
  RESerializedPayload *v24;
  re::DrawableQueue *v25;
  REDrawableQueueTexturePayload *v26;
  void *v27;
  uint64_t v28;
  REDrawableQueueTexturePayload *v29;
  _OWORD v30[2];
  id v31;
  uint8_t buf[8];
  _QWORD v33[10];
  unsigned int v34;
  id v35;
  void *v36[2];

  v5 = (void *)*((_QWORD *)a2 + 14);
  if (v5)
  {
    *a4 = (RESerializedPayload *)v5;
    return;
  }
  if (re::TextureData::isValid((re::TextureData *)(a2 + 256)))
  {
    v9 = *((_DWORD *)a2 + 86);
    if (v9)
    {
      if (v9 != 1)
        goto LABEL_57;
    }
    else if (objc_msgSend(*((id *)a2 + 33), sel_isShareable))
    {
      if (*((_DWORD *)a2 + 60))
      {
LABEL_57:
        v28 = std::__throw_bad_variant_access[abi:nn180100]();
        re::TextureAssetLoader::postInitializeAssetFromPayload(v28);
        return;
      }
      v10 = (re *)objc_msgSend(*((id *)a2 + 20), sel_isShareable);
      if ((v10 & 1) == 0)
      {
        v11 = *re::assetTypesLogObjects(v10);
        if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)buf = 0;
          _os_log_impl(&dword_224FE9000, v11, OS_LOG_TYPE_DEFAULT, "Copying a texture to create a shared version.", buf, 2u);
        }
        if (*((_DWORD *)a2 + 60))
          goto LABEL_57;
        v12 = v36[0];
        if (v36[0])
        {
          buf[0] = 0;
          v33[0] = v36[0];
          v34 = 0;
          v35 = 0;
          re::TextureAsset::setTextureAndSemantic((uint64_t)a2, (const re::ImportGraphicsContext *)(this + 5), (uint64_t)buf, *((_DWORD *)a2 + 97));

          if (v34 != -1)
            ((void (*)(id *, _QWORD *))*(&__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8nn180100IZNS0_6__dtorINS0_8__traitsIJN2NS9SharedPtrIN3MTL7TextureEEEN2re10CPUTextureEEEELNS0_6_TraitE1EE9__destroyB8nn180100EvEUlRT_E_JRSF_EEEDcOSG_DpOT0____fmatrix
                                                  + v34))(&v31, v33);

        }
      }
    }
  }
  if (*((_DWORD *)a2 + 60))
    goto LABEL_57;
  v13 = *((id *)a2 + 20);
  v36[0] = v13;
  v14 = objc_msgSend(v13, sel_iosurface);
  v15 = (re *)objc_msgSend(v13, sel_isShareable);
  if (*((_BYTE *)this + 88))
    v16 = v14 == 0;
  else
    v16 = 0;
  v17 = !v16;
  if (!v16 || (v15 & 1) != 0)
  {
    if (v17)
      v20 = v14;
    else
      v20 = 0;
    *(_QWORD *)buf = 0;
    if (!(_DWORD)v15)
      goto LABEL_34;
LABEL_40:
    v22 = a2[125];
    v23 = *((_DWORD *)a2 + 97);
    re::DynamicString::DynamicString((re::DynamicString *)v30, (const re::DynamicString *)(a2 + 392));
    re::SharedTexturePayload::make(v36, v22, v23, (uint64_t)v30, (RESharedTexturePayload **)&v31);
    v24 = (RESerializedPayload *)v31;
    v31 = 0;
    *(_QWORD *)buf = v24;

    if (*(_QWORD *)&v30[0])
    {
      if ((BYTE8(v30[0]) & 1) != 0)
        (*(void (**)(void))(**(_QWORD **)&v30[0] + 40))();
      memset(v30, 0, sizeof(v30));
    }
    if (v24)
      goto LABEL_50;
    goto LABEL_52;
  }
  v18 = *re::assetTypesLogObjects(v15);
  if (os_log_type_enabled(v18, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl(&dword_224FE9000, v18, OS_LOG_TYPE_DEFAULT, "Last attempt to copying a texture to create a shared version", buf, 2u);
  }
  v19 = v31;
  if (!v31)
  {
    *(_QWORD *)buf = 0;
    goto LABEL_47;
  }
  buf[0] = 0;
  v33[0] = v31;
  v34 = 0;
  v35 = 0;
  re::TextureAsset::setTextureAndSemantic((uint64_t)a2, (const re::ImportGraphicsContext *)(this + 5), (uint64_t)buf, *((_DWORD *)a2 + 97));

  if (v34 != -1)
    ((void (*)(REDrawableQueueTexturePayload **, _QWORD *))*(&__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8nn180100IZNS0_6__dtorINS0_8__traitsIJN2NS9SharedPtrIN3MTL7TextureEEEN2re10CPUTextureEEEELNS0_6_TraitE1EE9__destroyB8nn180100EvEUlRT_E_JRSF_EEEDcOSG_DpOT0____fmatrix
                                                                      + v34))(&v29, v33);
  if (*((_DWORD *)a2 + 60))
    goto LABEL_57;
  NS::SharedPtr<MTL::Texture>::operator=(v36, (void **)a2 + 20);
  v20 = objc_msgSend(v36[0], sel_iosurface);
  v21 = objc_msgSend(v36[0], sel_isShareable);

  *(_QWORD *)buf = 0;
  if ((v21 & 1) != 0)
    goto LABEL_40;
LABEL_34:
  if (!v20)
  {
LABEL_47:
    if (!*((_QWORD *)a2 + 12))
      goto LABEL_52;
    re::AssetLoader::makeSharedResourcePayload((re::AssetLoader *)this, (const re::IntrospectionBase **)a2, a3, (RESerializedPayload **)&v31);
    goto LABEL_49;
  }
  re::IOSurfaceTexturePayload::make(v36, (REIOSurfaceTexturePayload **)&v31);
LABEL_49:
  v24 = (RESerializedPayload *)v31;
  v31 = 0;
  *(_QWORD *)buf = v24;

  if (v24)
  {
LABEL_50:
    v25 = (re::DrawableQueue *)*((_QWORD *)a2 + 12);
    if (v25)
    {
      re::DrawableQueue::makeSharedResourcePayload(v25, (REDrawableQueuePayload **)&v31);
      re::DrawableQueueTexturePayload::make(&v31, &v29);
      v26 = v29;
      v29 = 0;
      *a4 = (RESerializedPayload *)v26;

      v27 = *(void **)buf;
    }
    else
    {
      v27 = 0;
      *(_QWORD *)buf = 0;
      *a4 = v24;
    }
    goto LABEL_54;
  }
LABEL_52:
  re::AssetLoader::makeSharedResourcePayload((re::AssetLoader *)this, (const re::IntrospectionBase **)a2, a3, a4);
  v27 = 0;
LABEL_54:

  if (v36[0])
}

uint64_t re::TextureAssetLoader::postInitializeAssetFromPayload(uint64_t a1, id *a2, uint64_t a3)
{
  uint64_t v6;
  re *v7;
  NSObject *v8;
  uint8_t v10[16];
  id v11;
  id v12;

  v12 = *a2;
  (*(void (**)(uint64_t, uint64_t, id *, _UNKNOWN **))(*(_QWORD *)a1 + 232))(a1, a3, &v12, &re::PassthroughAssetSerialization::instance(void)::instance);

  v11 = *a2;
  v6 = re::AssetLoader::createRuntimeDataWithPayload(a1, a3, &v11, 0);

  if ((v6 & 1) == 0)
  {
    v8 = *re::assetsLogObjects(v7);
    if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)v10 = 0;
      _os_log_error_impl(&dword_224FE9000, v8, OS_LOG_TYPE_ERROR, "createRuntimeData returned false for asset created from a payload", v10, 2u);
    }
  }
  return v6;
}

void re::TextureAssetLoader::resourceDidUpdate(uint64_t a1, uint64_t a2, id *a3, uint64_t a4)
{
  id *v8;
  re *v9;
  uint64_t *v10;
  uint64_t v11;
  re *v12;
  void *v13;
  const re::ImportGraphicsContext *v14;
  void *v15;
  id v16;
  id v17;
  id v18;
  id v19;
  id v20;
  id *v21;
  NSObject *v22;
  const re::ImportGraphicsContext *v23;
  re *v24;
  NSObject *v25;
  id v26;
  void *v27;
  char v28;
  re *v29;
  NSObject *v30;
  id v31;
  id v32;
  uint8_t buf[8];
  id v34;
  unsigned int v35;
  id v36;
  id v37;
  id v38;
  id v39;
  id v40;
  uint64_t v41;
  id v42;
  char v43;

  re::DrawableQueueTexturePayload::dynamicCast(a3, &v42);
  if (!v42)
  {
LABEL_6:
    *(_BYTE *)(a2 + 125) = 0;
    re::DirectTexturePayload::dynamicCast(a3, &v40);
    re::SharedTexturePayload::dynamicCast(a3, &v39);
    re::IOSurfaceTexturePayload::dynamicCast(a3, &v38);
    if (*(_QWORD *)(a1 + 72) && v40)
    {
      re::ObjCObject::operator=((id *)(a2 + 112), &v40);
      goto LABEL_23;
    }
    if (v39)
    {
      v13 = re::SharedTexturePayload::handle(&v39);
      v15 = *(void **)(a1 + 40);
      v14 = (const re::ImportGraphicsContext *)(a1 + 40);
      v16 = objc_msgSend(v15, sel_newSharedTextureWithHandle_, v13);
      re::SharedTexturePayload::colorSpace(&v39, (re::DynamicString *)buf);
      re::DynamicString::operator=((re::DynamicString *)(a2 + 392), (re::DynamicString *)buf);
      if (*(_QWORD *)buf && (v34 & 1) != 0)
        (*(void (**)(void))(**(_QWORD **)buf + 40))();
      re::TextureAsset::copyColorSpaceToCFStringPtr((re::TextureAsset *)a2, (const __CFString **)&v37);
      v17 = v37;
      buf[0] = 0;
      v34 = v16;
      v35 = 0;
      v18 = v17;
      v36 = v18;
      re::TextureAsset::setTextureAndSemantic(a2, v14, (uint64_t)buf, objc_msgSend(v39, "semantic"));
      *(_BYTE *)(a2 + 125) = objc_msgSend(v39, "isLimitedRenderAsset");

      if (v35 != -1)
        ((void (*)(char *, id *))*(&__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8nn180100IZNS0_6__dtorINS0_8__traitsIJN2NS9SharedPtrIN3MTL7TextureEEEN2re10CPUTextureEEEELNS0_6_TraitE1EE9__destroyB8nn180100EvEUlRT_E_JRSF_EEEDcOSG_DpOT0____fmatrix
                                            + v35))(&v43, &v34);

      if (!v16)
        goto LABEL_23;
      v19 = v16;
    }
    else
    {
      if (!v38)
      {
        v22 = *re::assetsLogObjects(v12);
        if (os_log_type_enabled(v22, OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)buf = 0;
          _os_log_impl(&dword_224FE9000, v22, OS_LOG_TYPE_DEFAULT, "Using fallback Texture resourceDidUpdate, no shared texture or iosurface found.", buf, 2u);
        }
        v32 = *a3;
        re::AssetLoader::resourceDidUpdate(a1, (uint64_t **)a2, &v32, a4);

        v23 = (const re::ImportGraphicsContext *)(a1 + 40);
        v24 = (re *)objc_msgSend(*(id *)(a1 + 40), "supportsSharedTextureHandles");
        if ((_DWORD)v24)
        {
          v25 = *re::assetTypesLogObjects(v24);
          if (os_log_type_enabled(v25, OS_LOG_TYPE_DEFAULT))
          {
            *(_WORD *)buf = 0;
            _os_log_impl(&dword_224FE9000, v25, OS_LOG_TYPE_DEFAULT, "TextureAssetLoader::resourceDidUpdate: unexpected to get here if shared texture handles are supported", buf, 2u);
          }
        }
        buf[0] = 0;
        v34 = 0;
        v35 = 0;
        v36 = 0;
        *(_BYTE *)(a2 + 152) = 0;
        std::__variant_detail::__assignment<std::__variant_detail::__traits<NS::SharedPtr<MTL::Texture>,re::CPUTexture>>::__generic_assign[abi:nn180100]<std::__variant_detail::__move_assignment<std::__variant_detail::__traits<NS::SharedPtr<MTL::Texture>,re::CPUTexture>,(std::__variant_detail::_Trait)1>>(a2 + 160, (uint64_t)&v34);
        if ((uint8_t *)(a2 + 152) != buf)
        {
          v26 = v36;
          v36 = 0;
          v27 = *(void **)(a2 + 248);
          *(_QWORD *)(a2 + 248) = v26;

        }
        if (v35 != -1)
          ((void (*)(id *, id *))*(&__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8nn180100IZNS0_6__dtorINS0_8__traitsIJN2NS9SharedPtrIN3MTL7TextureEEEN2re10CPUTextureEEEELNS0_6_TraitE1EE9__destroyB8nn180100EvEUlRT_E_JRSF_EEEDcOSG_DpOT0____fmatrix
                                            + v35))(&v37, &v34);
        v31 = *a3;
        v28 = re::AssetLoader::createRuntimeDataWithPayload(a1, a2, &v31, 0);

        if ((v28 & 1) != 0)
        {
          re::TextureAsset::setTextureAndSemantic(a2, v23, a2 + 152, *(_DWORD *)(a2 + 388));
        }
        else
        {
          v30 = *re::assetsLogObjects(v29);
          if (os_log_type_enabled(v30, OS_LOG_TYPE_ERROR))
          {
            *(_WORD *)buf = 0;
            _os_log_error_impl(&dword_224FE9000, v30, OS_LOG_TYPE_ERROR, "createRuntimeData returned false for asset created from a payload", buf, 2u);
          }
        }
        goto LABEL_23;
      }
      v21 = (id *)(a1 + 40);
      re::IOSurfaceTexturePayload::makeTextureWithDevice(&v38, v21, &v37);
      buf[0] = 0;
      v34 = v37;
      v35 = 0;
      v36 = 0;
      re::TextureAsset::setTextureAndSemantic(a2, (const re::ImportGraphicsContext *)v21, (uint64_t)buf, *(_DWORD *)(a2 + 388));

      if (v35 != -1)
        ((void (*)(char *, id *))*(&__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8nn180100IZNS0_6__dtorINS0_8__traitsIJN2NS9SharedPtrIN3MTL7TextureEEEN2re10CPUTextureEEEELNS0_6_TraitE1EE9__destroyB8nn180100EvEUlRT_E_JRSF_EEEDcOSG_DpOT0____fmatrix
                                            + v35))(&v43, &v34);
      v19 = v37;
      if (!v37)
      {
LABEL_23:

        v20 = v40;
        goto LABEL_24;
      }
    }

    goto LABEL_23;
  }
  re::DrawableQueueTexturePayload::drawableQueue(&v42, buf);
  v8 = *(id **)(a1 + 16);
  v10 = re::globalAllocators(v9);
  v11 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v10[2] + 32))(v10[2], 376, 8);
  v41 = v11;
  re::TextureAssetLoader::setDrawableQueueForTextureAsset(a1, (_QWORD *)a2, &v41);
  if (v11)
  {

    v41 = 0;
  }
  re::DrawableQueueTexturePayload::placeholderTexture(&v42, &v40);
  if (v40)
  {
    re::ObjCObject::operator=(a3, &v40);

    goto LABEL_6;
  }
  v20 = *(id *)buf;
LABEL_24:

}

void re::TextureAssetLoader::setDrawableQueueForTextureAsset(uint64_t a1, _QWORD *a2, uint64_t *a3)
{
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  BOOL v7;
  BOOL v8;
  uint64_t v10;
  uint64_t v12;
  uint64_t v13;

  v4 = a2 + 12;
  v3 = a2[12];
  v5 = *a3;
  if (v3 != *a3)
  {
    if (v5)
      v7 = a2[14] == 0;
    else
      v7 = 1;
    if (v7)
    {
      if (a2[7])
        v8 = a2[6] == 0;
      else
        v8 = 1;
      if (!v8)
      {
        v10 = *(_QWORD *)(a1 + 24);
        if (v10)
        {
          v12 = *a3;
          if (v3)
          {
            (*(void (**)(uint64_t, _QWORD *))(*(_QWORD *)v10 + 8))(v10, a2);
            v12 = *a3;
          }
          if (v5)
          {
            re::SharedPtr<re::SkeletalPoseJointDefinition>::reset(v4, v12);
            (***(void (****)(_QWORD, _QWORD *))(a1 + 24))(*(_QWORD *)(a1 + 24), a2);
            v5 = *a3;
          }
          else
          {
            v5 = v12;
          }
        }
      }
      re::SharedPtr<re::SkeletalPoseJointDefinition>::reset(v4, v5);
      if (*v4)
      {
        v13 = a2[13];
        if (v13)
          re::DrawableQueue::setActiveRealityRendererScene((re::DrawableQueue *)*v4, v13);
      }
    }
    else
    {
      re::internal::assertLog((re::internal *)4, (uint64_t)a2, "assertion failure: '%s' (%s:line %i) It is ill-formed for a texture asset to be backed by both a DrawableQueue and a DirectTexture.", "!drawableQueue || !textureAsset.directTexturePayload.isValid()", "setDrawableQueueForTextureAsset", 1817);
      _os_crash();
      __break(1u);
    }
  }
}

_QWORD *re::TextureAssetLoader::checkCredentialsOfNetworkAsset@<X0>(_QWORD *result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X3>, _WORD *a4@<X8>)
{
  if (a2)
  {
    result = (_QWORD *)result[4];
    if (result)
      result = (_QWORD *)(*(uint64_t (**)(_QWORD *, uint64_t))(*result + 64))(result, a3);
    *a4 = 257;
  }
  else
  {
    *(_BYTE *)a4 = 0;
  }
  return result;
}

uint64_t re::TextureAssetLoader::needsCustomSerializationCopy(re::TextureAssetLoader *this, void *a2, int a3)
{
  re::LocklessRingBuffer **v4;
  const re::TextureData *v5;
  char canExportToKtx;
  id v8;
  id v9[10];
  unsigned int v10;
  id v11;
  void *v12;
  char v13;

  if (!a3)
    return 0;
  if (!*((_QWORD *)a2 + 12) && !*((_QWORD *)a2 + 14))
    return 0;
  re::TextureHandle::unsynchronizedMetalTexture((os_unfair_lock_s **)a2 + 6, &v12);
  v4 = (re::LocklessRingBuffer **)*((_QWORD *)a2 + 12);
  if (v4)
  {
    re::DrawableQueue::getLatestReadableUnSynchronizedMetalTexture(v4, (uint64_t)&v8);
    if ((_BYTE)v8)
    {
      NS::SharedPtr<MTL::Texture>::operator=(&v12, v9);
      if ((_BYTE)v8)
      {
        if (v9[0])

      }
    }
  }
  if (!v12)
    return 0;
  LOBYTE(v8) = 0;
  v9[0] = v12;
  v10 = 0;
  v11 = 0;
  canExportToKtx = re::canExportToKtx(&v8, v5);

  if (v10 != -1)
    ((void (*)(char *, id *))*(&__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8nn180100IZNS0_6__dtorINS0_8__traitsIJN2NS9SharedPtrIN3MTL7TextureEEEN2re10CPUTextureEEEELNS0_6_TraitE1EE9__destroyB8nn180100EvEUlRT_E_JRSF_EEEDcOSG_DpOT0____fmatrix
                                        + v10))(&v13, v9);
  if ((canExportToKtx & 1) == 0)
  {
    if (v12)

    return 0;
  }
  if (v12)

  return 1;
}

id *re::TextureAssetLoader::tryMakeCustomSerializationCopy(re::TextureAssetLoader *this, char *a2, int a3)
{
  id *TextureAsset;
  re::LocklessRingBuffer **v5;
  const re::TextureData *v6;
  int canExportToKtx;
  char v8;
  int v9;
  __int128 v10;
  int v11;
  __int128 v13[2];
  id v14;
  id v15[10];
  unsigned int v16;
  id v17;
  void *v18;
  char v19;

  if (!a3 || !*((_QWORD *)a2 + 12) && !*((_QWORD *)a2 + 14))
    return 0;
  re::TextureHandle::unsynchronizedMetalTexture((os_unfair_lock_s **)a2 + 6, &v18);
  v5 = (re::LocklessRingBuffer **)*((_QWORD *)a2 + 12);
  if (v5)
  {
    TextureAsset = &v14;
    re::DrawableQueue::getLatestReadableUnSynchronizedMetalTexture(v5, (uint64_t)&v14);
    if ((_BYTE)v14)
    {
      NS::SharedPtr<MTL::Texture>::operator=(&v18, v15);
      if ((_BYTE)v14)
      {
        if (v15[0])

      }
    }
  }
  if (!v18)
    goto LABEL_16;
  LOBYTE(v14) = 0;
  v15[0] = v18;
  v16 = 0;
  v17 = 0;
  canExportToKtx = re::canExportToKtx(&v14, v6);
  v8 = canExportToKtx;
  if (canExportToKtx)
  {
    v9 = *((_DWORD *)a2 + 97);
    v10 = *(_OWORD *)(a2 + 24);
    v13[0] = *(_OWORD *)(a2 + 8);
    v13[1] = v10;
    TextureAsset = (id *)re::TextureAsset::makeTextureAsset((uint64_t)&v14, v9, v13);
  }

  if (v16 != -1)
    ((void (*)(char *, id *))*(&__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8nn180100IZNS0_6__dtorINS0_8__traitsIJN2NS9SharedPtrIN3MTL7TextureEEEN2re10CPUTextureEEEELNS0_6_TraitE1EE9__destroyB8nn180100EvEUlRT_E_JRSF_EEEDcOSG_DpOT0____fmatrix
                                        + v16))(&v19, v15);
  if ((v8 & 1) != 0)
    v11 = 0;
  else
LABEL_16:
    v11 = 1;
  if (v18)

  if (v11)
    return 0;
  return TextureAsset;
}

_anonymous_namespace_ *re::TextureAssetLoader::editRealityFileSerializationParameters(uint64_t a1, _DWORD *a2, uint64_t a3)
{
  _anonymous_namespace_ *result;
  _anonymous_namespace_ *v5;
  uint64_t v6;
  char v7;
  _anonymous_namespace_ *v8;
  char v9;

  result = (_anonymous_namespace_ *)re::shouldASTCCompress((uint64_t)(a2 + 38), a2[97], a2[5], a2 + 6);
  if ((_DWORD)result)
  {
    re::HashTable<re::DynamicString,std::variant<re::DynamicString,re::Data>,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::addInternal<re::DynamicString>(a3, (re::DynamicString *)&v8, 2, &v6);
    if (v6 && (v7 & 1) != 0)
      (*(void (**)(void))(*(_QWORD *)v6 + 40))();
    result = v8;
    if (v8)
    {
      if ((v9 & 1) != 0)
        return (_anonymous_namespace_ *)(*(uint64_t (**)(void))(*(_QWORD *)v8 + 40))();
    }
  }
  return result;
}

void re::TextureAssetLoader::injectMipsFromKTX(re::TextureAssetLoader *this, re::TextureAsset *a2, id *a3)
{
  int v6;
  unsigned __int8 v7;
  __CFString *v8;
  char v9;
  _BYTE v10[72];
  uint64_t v11;
  char v12;
  id v13[10];
  unsigned int v14;
  id v15;
  uint64_t v16;

  v16 = *MEMORY[0x24BDAC8D0];
  re::TextureAsset::copyColorSpaceToCFStringPtr(a2, (const __CFString **)&v8);
  v6 = *((_DWORD *)a2 + 94);
  if (v6)
  {
    if (re::isHDR(v6))
      v7 = 1;
    else
      v7 = 2;
  }
  else
  {
    v7 = 0;
  }
  re::TextureAssetLoader::parseKTXData((uint64_t)this, (__n128 *)objc_msgSend(objc_retainAutorelease(*a3), "bytes"), objc_msgSend(*a3, "length"), (unsigned int *)a2 + 10, (int *)a2 + 94, *((_DWORD *)a2 + 97), (id *)&v8, 0, (uint64_t)v10, *((_DWORD *)a2 + 5) != 1, v7, 1, 0);
  if (v14)
    std::__throw_bad_variant_access[abi:nn180100]();
  re::TextureAsset::updateMips((uint64_t)a2, (re::TextureAssetLoader *)((char *)this + 40), v13);

  if (v14 != -1)
    ((void (*)(char *, id *))*(&__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8nn180100IZNS0_6__dtorINS0_8__traitsIJN2NS9SharedPtrIN3MTL7TextureEEEN2re10CPUTextureEEEELNS0_6_TraitE1EE9__destroyB8nn180100EvEUlRT_E_JRSF_EEEDcOSG_DpOT0____fmatrix
                                        + v14))(&v9, v13);
  v14 = -1;
  if (v11 && (v12 & 1) != 0)
    (*(void (**)(void))(*(_QWORD *)v11 + 40))();

}

void re::TextureAssetLoader::setDirectTextureForTextureAsset(uint64_t a1, id *this, uint64_t a3, uint64_t a4)
{
  id *v8;
  void *v9;
  REDirectTexturePayload *v10;
  const unsigned __int8 *v11;
  uint64_t v12;
  uint64_t v13;
  id v14;
  REDirectTexturePayload *v15;
  id v16;
  REDirectTexturePayload *v17;
  const unsigned __int8 *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  os_unfair_lock_s *v22[2];
  id v23;
  id v24;
  REDirectTexturePayload *v25;
  unsigned __int8 v26[16];
  REDirectTexturePayload *v27;
  unsigned __int8 v28[16];
  REDirectTexturePayload *v29;
  unsigned __int8 v30[16];
  uint64_t v31;

  v31 = *MEMORY[0x24BDAC8D0];
  v8 = this + 14;
  if (this[14])
    v9 = re::DirectTexturePayload::directTexture(this + 14);
  else
    v9 = 0;
  if (v9 != (void *)a3)
  {
    if (a3 && this[12])
    {
      re::internal::assertLog((re::internal *)4, (uint64_t)this, "assertion failure: '%s' (%s:line %i) It is ill-formed for a texture asset to be backed by both a DrawableQueue and a DirectTexture.", "!directTexture || !textureAsset.drawableQueue", "setDirectTextureForTextureAsset", 1856);
      _os_crash();
      __break(1u);
    }
    if (*(_QWORD *)(a1 + 72))
    {
      if (*v8)
      {
        v10 = (REDirectTexturePayload *)re::DirectMeshPayload::connectionId(v8);
        v11 = (const unsigned __int8 *)objc_msgSend(*v8, "identifier");
        v29 = v10;
        uuid_copy(v30, v11);
        v12 = *(_QWORD *)(a1 + 72);
        v27 = v10;
        uuid_copy(v28, v30);
        if (*(_QWORD *)(a4 + 80) == -1)
          v13 = 0;
        else
          v13 = *(_QWORD *)(a4 + 80);
        re::DirectResourceAssetTracker::unregisterDirectResourceBackedAsset(v12, (uint64_t)&v27, v13);
        v14 = *v8;
        *v8 = 0;

      }
      if (a3)
      {
        re::DirectTexturePayload::make(a3, &v29);
        if (v8 != (id *)&v29)
        {
          v15 = v29;
          v29 = 0;
          v16 = *v8;
          *v8 = v15;

        }
        v17 = (REDirectTexturePayload *)re::DirectMeshPayload::connectionId(v8);
        v18 = (const unsigned __int8 *)objc_msgSend(this[14], "identifier");
        v29 = v17;
        uuid_copy(v30, v18);
        v19 = *(_QWORD *)(a1 + 72);
        v25 = v29;
        uuid_copy(v26, v30);
        if (*(_QWORD *)(a4 + 80) == -1)
          v20 = 0;
        else
          v20 = *(_QWORD *)(a4 + 80);
        re::DirectResourceAssetTracker::registerDirectResourceBackedAsset(v19, (uint64_t)&v25, v20);
        v24 = this[14];
        re::AssetLoader::createRuntimeDataWithPayload(a1, (uint64_t)this, &v24, 0);

        v23 = (id)DRTextureReadTexture();
        if (this[7] && this[6])
        {
          re::TextureHandle::setMetalTexture((const re::TextureHandle *)(this + 6), &v23);
        }
        else
        {
          v21 = *(_QWORD *)(a1 + 16);
          if (v21)
          {
            re::TextureManager::registerTexture(*(os_unfair_lock_s **)(v21 + 64), &v23, v22);
            re::TextureHandle::operator=((re::TextureHandle *)(this + 6), (re::TextureHandle *)v22);
            re::TextureHandle::invalidate((re::TextureHandle *)v22);
          }
        }
        re::TextureHandle::setMetalTexture((const re::TextureHandle *)(this + 17), &v23);
        if (v23)

      }
    }
  }
}

uint64_t re::TextureAssetLoader::setBlobOverrideSerializationParameter(_anonymous_namespace_ *a1, id *a2)
{
  uint64_t result;
  uint64_t v5;
  char v6;

  re::HashTable<re::DynamicString,std::variant<re::DynamicString,re::Data>,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::addInternal<re::Data&>((uint64_t)a1, (const re::DynamicString *)&v5, 2, a2);
  result = v5;
  if (v5)
  {
    if ((v6 & 1) != 0)
      return (*(uint64_t (**)(void))(*(_QWORD *)v5 + 40))();
  }
  return result;
}

uint64_t re::TextureAssetLoader::fetchSourceImageTextureDescriptor@<X0>(re::TextureAssetLoader *this@<X0>, re::RealityFile *a2@<X1>, re::RealityFile *a3@<X2>, const char *a4@<X3>, char *a5@<X4>, uint64_t a6@<X8>)
{
  const re::TextureProvider *v7;
  id v8;
  uint64_t result;
  uint64_t v10;
  __int128 v11;
  uint64_t v12;
  _BYTE v13[8];
  uint64_t v14;
  char v15;
  id v16;

  re::TextureAssetRealityFileProviderCallbacks::tryCreateSourceImageTextureProvider(this, a2, a3, a4, (const char *)1, (unint64_t *)a5, 0, (uint64_t)v13);
  if (v13[0])
  {
    re::TextureProvider::lazyFetchProperties((id *)&v14, v7);
    v8 = v16;
    *(_BYTE *)a6 = 1;
    *(_QWORD *)(a6 + 8) = v8;
  }
  else
  {
    re::DynamicString::DynamicString((re::DynamicString *)&v10, (const re::DynamicString *)&v14);
    *(_BYTE *)a6 = 0;
    *(_QWORD *)(a6 + 8) = v10;
    *(_QWORD *)(a6 + 32) = v12;
    *(_OWORD *)(a6 + 16) = v11;
  }
  result = v14;
  if (v13[0])
    return (*(uint64_t (**)(uint64_t *))v14)(&v14);
  if (v14)
  {
    if ((v15 & 1) != 0)
      return (*(uint64_t (**)(void))(*(_QWORD *)v14 + 40))();
  }
  return result;
}

void re::TextureAssetRealityFileProviderCallbacks::tryCreateSourceImageTextureProvider(re::TextureAssetRealityFileProviderCallbacks *this@<X0>, const re::TextureAssetLoader *a2@<X1>, re::RealityFile *a3@<X2>, const char *a4@<X3>, const char *a5@<X4>, unint64_t *a6@<X6>, uint64_t *a7@<X5>, uint64_t a8@<X8>)
{
  _BYTE *v17;
  _BYTE *v18;
  char *v19;
  _QWORD *v20;
  _BYTE *v21;
  char *v22;
  char *v23;
  re *InputStream;
  char *v25;
  _QWORD *v26;
  _BYTE *v27;
  NSObject *v28;
  uint64_t v29;
  const __CFAllocator *v30;
  CFDataRef v31;
  _BYTE *v32;
  __int128 v33;
  uint64_t v34;
  uint64_t v35;
  _BYTE *v36;
  _BYTE *v37;
  _BYTE *v38;
  __int128 v39;
  uint64_t v40;
  uint64_t v41;
  __int128 v42;
  uint64_t v43;
  uint64_t v44;
  size_t v45;
  uint64_t v46;
  __int128 v47;
  uint64_t v48;
  uint64_t v49;
  __int128 v50;
  uint64_t v51;
  uint64_t v52;
  re::TextureAssetLoader *v53;
  _QWORD *v54;
  _BYTE *v55;
  re::TextureAssetRealityFileProviderCallbacks *v56;
  const char *v57;
  const char *v58;
  re::RealityFile *v59;
  __int128 v60;
  uint64_t v61;
  uint64_t v62;
  CFDataRef v63;
  char v64[8];
  __int128 v65;
  int v66;
  CFTypeRef cf;
  char *v68;
  const UInt8 *v69;
  CFIndex v70;
  int v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  int v75;
  uint64_t v76;
  uint64_t v77;
  char v78;
  _BYTE v79[7];
  _QWORD v80[2];
  uint64_t v81;
  char v82;
  _BYTE v83[7];
  _QWORD v84[2];
  char v85[8];
  unint64_t v86;
  uint64_t v87;
  char v88;
  _BYTE v89[7];
  _BYTE *v90;
  _BYTE buf[24];
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  int v96;
  uint64_t v97;
  char v98[8];
  _DWORD v99[56];
  __int128 v100;
  uint64_t v101;
  uint64_t v102;
  unsigned int v103;
  uint64_t v104;

  v104 = *MEMORY[0x24BDAC8D0];
  re::DynamicString::rfind((uint64_t)&v87, 46, v85);
  if (v85[0])
  {
    v57 = a4;
    v58 = a5;
    v59 = a3;
    v56 = this;
    re::DynamicString::resize(&v87, v86, 42);
    if ((v88 & 1) != 0)
      v17 = v90;
    else
      v17 = v89;
    re::DynamicString::format((re::DynamicString *)"%s%s.json", (re::DynamicString *)&v81, "assets/", v17);
    if ((v88 & 1) != 0)
      v18 = v90;
    else
      v18 = v89;
    re::DynamicString::format((re::DynamicString *)"%s%s.sourceimage", (re::DynamicString *)&v77, "assets/", v18);
    v19 = &v82;
    v20 = v84;
    v21 = v83;
    if ((v82 & 1) != 0)
      v22 = (char *)v84[0];
    else
      v22 = v83;
    re::RealityFile::getInputStream(a2, v22, (uint64_t)&v100);
    if ((v78 & 1) != 0)
      v23 = (char *)v80[0];
    else
      v23 = v79;
    InputStream = (re *)re::RealityFile::getInputStream(a2, v23, (uint64_t)v98);
    if ((_BYTE)v100)
    {
      v25 = &v78;
      v26 = v80;
      v27 = v79;
      if (v98[0])
      {
        if (a7)
        {
          v28 = *re::assetsLogObjects(InputStream);
          if (os_log_type_enabled(v28, OS_LOG_TYPE_INFO))
          {
            v29 = *a7;
            *(_DWORD *)buf = 136315650;
            *(_QWORD *)&buf[4] = a3;
            *(_WORD *)&buf[12] = 2080;
            *(_QWORD *)&buf[14] = v57;
            *(_WORD *)&buf[22] = 2048;
            v92 = v29;
          }
        }
        if (v103 < 2)
        {
          v76 = 0;
          v73 = 0;
          v74 = 0;
          v72 = 0;
          v75 = 0;
          v69 = 0;
          v70 = 0;
          v68 = (char *)&v100 + 8;
          v71 = 0;
          if (!re::SeekableInputStreamBufferedReader::readNext((re::SeekableInputStreamBufferedReader *)&v68, 0xFFFFFFFFFFFFFFFFLL))
          {
            re::DynamicString::format((re::DynamicString *)"Unexpected error reading source image options for asset path: '%s'.", (re::DynamicString *)buf, a3);
            v42 = *(_OWORD *)buf;
            v43 = *(_QWORD *)&buf[16];
            v44 = v92;
            *(_BYTE *)a8 = 0;
            *(_OWORD *)(a8 + 8) = v42;
            *(_QWORD *)(a8 + 24) = v43;
            *(_QWORD *)(a8 + 32) = v44;
LABEL_49:
            re::SeekableInputStreamBufferedReader::~SeekableInputStreamBufferedReader((re::SeekableInputStreamBufferedReader *)&v68);
LABEL_50:
            re::Result<re::RealityFileEntryStream,re::WrappedError>::~Result((uint64_t)v98);
            re::Result<re::RealityFileEntryStream,re::WrappedError>::~Result((uint64_t)&v100);
            if (v77 && (v78 & 1) != 0)
              (*(void (**)(void))(*(_QWORD *)v77 + 40))();
            if (v81 && (v82 & 1) != 0)
              (*(void (**)(void))(*(_QWORD *)v81 + 40))();
            goto LABEL_56;
          }
          v30 = (const __CFAllocator *)*MEMORY[0x24BDBD240];
          cf = CFDataCreateWithBytesNoCopy((CFAllocatorRef)*MEMORY[0x24BDBD240], v69, v70, (CFAllocatorRef)*MEMORY[0x24BDBD258]);
          re::parseTextureFromImageOptions((re *)&cf, (uint64_t)v64);
          if (!v64[0])
          {
            re::DynamicString::DynamicString((re::DynamicString *)buf, (const re::DynamicString *)&v65);
            *(_BYTE *)a8 = 0;
            v46 = v92;
            *(_QWORD *)(a8 + 8) = *(_QWORD *)buf;
            *(_QWORD *)(a8 + 32) = v46;
            *(_OWORD *)(a8 + 16) = *(_OWORD *)&buf[8];
LABEL_48:
            re::Result<re::TextureFromImageOptions,re::DynamicString>::~Result((uint64_t)v64);
            goto LABEL_49;
          }
          CFRelease(cf);
          if (v58)
          {
            DWORD2(v65) = 1;
            v66 = (int)v58;
          }
          if (v99[54] < 2u)
          {
            v97 = 0;
            v95 = 0;
            v93 = 0;
            v94 = 0;
            v96 = 0;
            *(_QWORD *)&buf[16] = 0;
            *(_QWORD *)buf = v99;
            *(_QWORD *)&buf[8] = 0;
            LODWORD(v92) = 0;
            if (re::SeekableInputStreamBufferedReader::readNext((re::SeekableInputStreamBufferedReader *)buf, 0xFFFFFFFFFFFFFFFFLL))
            {
              v31 = CFDataCreate(v30, *(const UInt8 **)&buf[8], *(CFIndex *)&buf[16]);
              v63 = v31;
              re::SeekableInputStreamBufferedReader::~SeekableInputStreamBufferedReader((re::SeekableInputStreamBufferedReader *)buf);
              if (v31)
              {
                re::DataTextureProvider::DataTextureProvider((uint64_t)buf, (id *)v56 + 5, *((unsigned __int8 *)v56 + 88), &v63, 0);
                CFRelease(v31);
                re::TextureProvider::setOptions((uint64_t)buf, &v65);
                re::DataTextureProvider::DataTextureProvider((uint64_t)&v60, (uint64_t)buf);
                *(_BYTE *)a8 = 1;
                re::DataTextureProvider::DataTextureProvider(a8 + 8, (uint64_t)&v60);
                re::DataTextureProvider::~DataTextureProvider((re::DataTextureProvider *)&v60);
                re::DataTextureProvider::~DataTextureProvider((re::DataTextureProvider *)buf);
              }
              else
              {
                re::DynamicString::format((re::DynamicString *)"Cound not allocate source image for asset path: '%s'.", (re::DynamicString *)buf, v59);
                v50 = *(_OWORD *)buf;
                v51 = *(_QWORD *)&buf[16];
                v52 = v92;
                *(_BYTE *)a8 = 0;
                *(_OWORD *)(a8 + 8) = v50;
                *(_QWORD *)(a8 + 24) = v51;
                *(_QWORD *)(a8 + 32) = v52;
              }
            }
            else
            {
              re::DynamicString::format((re::DynamicString *)"Unexpected error reading source image for asset path: '%s'.", (re::DynamicString *)&v60, a3);
              v47 = v60;
              v48 = v61;
              v49 = v62;
              *(_BYTE *)a8 = 0;
              *(_OWORD *)(a8 + 8) = v47;
              *(_QWORD *)(a8 + 24) = v48;
              *(_QWORD *)(a8 + 32) = v49;
              re::SeekableInputStreamBufferedReader::~SeekableInputStreamBufferedReader((re::SeekableInputStreamBufferedReader *)buf);
            }
            goto LABEL_48;
          }
        }
        v53 = (re::TextureAssetLoader *)std::__throw_bad_variant_access[abi:nn180100]();
        re::TextureAssetLoader::downgradeTextureAssetToSpring2023(v53, v54, v55);
        return;
      }
    }
    else
    {
      v25 = &v82;
      v26 = v84;
      v27 = v83;
      v19 = &v78;
      v20 = v80;
      v21 = v79;
      if (!v98[0])
      {
        if (a6)
        {
          v45 = *(char *)a6;
          *(_QWORD *)&buf[16] = 0;
          v92 = 0;
          *(_QWORD *)&buf[8] = 0;
          re::DynamicString::setCapacity(buf, v45);
        }
        else
        {
        }
LABEL_40:
        v39 = *(_OWORD *)buf;
        v40 = *(_QWORD *)&buf[16];
        v41 = v92;
        *(_BYTE *)a8 = 0;
        *(_OWORD *)(a8 + 8) = v39;
        *(_QWORD *)(a8 + 24) = v40;
        *(_QWORD *)(a8 + 32) = v41;
        goto LABEL_50;
      }
    }
    v36 = (_BYTE *)*v26;
    if ((*(_QWORD *)v25 & 1) != 0)
      v37 = v36;
    else
      v37 = v27;
    if ((*(_QWORD *)v19 & 1) != 0)
      v38 = (_BYTE *)*v20;
    else
      v38 = v21;
    re::DynamicString::format((re::DynamicString *)"Unexpected: could open texture source image's '%s' but not '%s'.", (re::DynamicString *)buf, v38, v37);
    goto LABEL_40;
  }
  if ((v88 & 1) != 0)
    v32 = v90;
  else
    v32 = v89;
  re::DynamicString::format((re::DynamicString *)"Unexpected: asset entry has no extension: '%s'.", (re::DynamicString *)&v100, v32);
  v33 = v100;
  v34 = v101;
  v35 = v102;
  *(_BYTE *)a8 = 0;
  *(_OWORD *)(a8 + 8) = v33;
  *(_QWORD *)(a8 + 24) = v34;
  *(_QWORD *)(a8 + 32) = v35;
LABEL_56:
  if (v87)
  {
    if ((v88 & 1) != 0)
      (*(void (**)(void))(*(_QWORD *)v87 + 40))();
  }
}

void re::TextureAssetLoader::downgradeTextureAssetToSpring2023(re::TextureAssetLoader *this@<X0>, _QWORD *a2@<X1>, _BYTE *a3@<X8>)
{
  id v7;
  re::TextureAsset *ColorGamutFromCGColorSpaceName;
  BOOL v9;
  const re::ImportGraphicsContext *v10;
  re *v11;
  NSObject *v12;
  re::TextureAssetLoader *v13;
  void *v14;
  void *v15;
  uint8_t v16[16];
  _BYTE v17[8];
  _QWORD v18[10];
  unsigned int v19;
  id v20;
  char v21;

  if ((*((_DWORD *)this + 97) - 3) >= 2
    || ((v7 = *((id *)this + 31),
         v21 = 0,
         ColorGamutFromCGColorSpaceName = (re::TextureAsset *)re::ColorHelpers::getColorGamutFromCGColorSpaceName(v7, &v21), (_DWORD)ColorGamutFromCGColorSpaceName)? (v9 = v21 == 0): (v9 = 1), v9))
  {
    *a3 = 1;
  }
  else
  {
    re::TextureAsset::assetType(ColorGamutFromCGColorSpaceName);
    v10 = (const re::ImportGraphicsContext *)(re::internal::AssetTypeRegistry::assetLoaderWithAssetType(a2[138], (unint64_t)&re::TextureAsset::assetType(void)::type)+ 40);
    re::convertTextureColorSpace(0, (uint64_t)this + 152, (uint64_t)v17);
    if (v19)
    {
      if (v19 != 1)
      {
        v13 = (re::TextureAssetLoader *)std::__throw_bad_variant_access[abi:nn180100]();
        re::TextureAssetLoader::downgradeTextureAssetToSpring2024(v13, v14, v15);
        return;
      }
      if (!v18[3])
        goto LABEL_14;
    }
    if (v18[0])
    {
      re::TextureAsset::setTextureAndSemantic((uint64_t)this, v10, (uint64_t)v17, *((_DWORD *)this + 97));
    }
    else
    {
LABEL_14:
      v12 = *re::assetTypesLogObjects(v11);
      if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR))
      {
        *(_WORD *)v16 = 0;
        _os_log_error_impl(&dword_224FE9000, v12, OS_LOG_TYPE_ERROR, "Failed to convert texture asset's color space before writing", v16, 2u);
      }
    }
    *a3 = 1;

    if (v19 != -1)
      ((void (*)(uint8_t *, _QWORD *))*(&__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8nn180100IZNS0_6__dtorINS0_8__traitsIJN2NS9SharedPtrIN3MTL7TextureEEEN2re10CPUTextureEEEELNS0_6_TraitE1EE9__destroyB8nn180100EvEUlRT_E_JRSF_EEEDcOSG_DpOT0____fmatrix
                                                 + v19))(v16, v18);
  }
}

uint64_t re::TextureAssetLoader::downgradeTextureAssetToSpring2024@<X0>(uint64_t this@<X0>, uint64_t a2@<X8>)
{
  __int128 v5;
  uint64_t v6;
  uint64_t v7;
  __int128 v8;
  uint64_t v9;
  uint64_t v10;

  if ((*(_DWORD *)(this + 380) | 4) == 7)
  {
    this = re::DynamicString::format((re::DynamicString *)"2D array and 3D texture types are not supported in versions of REKit before Fall 2024.", (re::DynamicString *)&v8);
    v5 = v8;
    v6 = v9;
    v7 = v10;
    *(_BYTE *)a2 = 0;
    *(_OWORD *)(a2 + 8) = v5;
    *(_QWORD *)(a2 + 24) = v6;
    *(_QWORD *)(a2 + 32) = v7;
  }
  else
  {
    *(_BYTE *)a2 = 1;
  }
  return this;
}

uint64_t *re::introspect_TextureSemantic(re *this, const re::IntrospectionBase *a2)
{
  int v2;
  unsigned __int8 v3;
  unsigned __int8 v4;
  char v5;
  re *v6;
  std::__shared_mutex_base *v7;
  re *v8;
  uint64_t *v9;
  uint64_t v10;
  unsigned int *v11;
  _anonymous_namespace_ *v12;
  unint64_t v13;
  unint64_t i;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  char v18;
  unsigned __int8 *v19;
  int v20;
  uint64_t v21;
  unint64_t j;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  char v26;
  unsigned __int8 *v27;
  int v28;
  uint64_t v29;
  uint64_t v30;
  std::__shared_mutex_base *v31;
  uint64_t *result;
  re *v33;
  uint64_t *v34;
  re *v35;
  uint64_t *v36;
  re *v37;
  uint64_t *v38;
  re *v39;
  uint64_t *v40;
  re *v41;
  uint64_t *v42;
  re *v43;
  uint64_t *v44;
  re *v45;
  uint64_t *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  const char *v50;
  StringID v51;
  _QWORD v52[2];
  _QWORD v53[61];

  v2 = (int)this;
  v3 = atomic_load((unsigned __int8 *)&qword_2540FF360);
  if ((v3 & 1) == 0)
  {
    v33 = (re *)__cxa_guard_acquire(&qword_2540FF360);
    if ((_DWORD)v33)
    {
      v34 = re::introspectionAllocator(v33);
      v35 = (re *)(*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v34 + 32))(v34, 24, 8);
      *(_DWORD *)v35 = 1;
      *((_QWORD *)v35 + 1) = 0;
      *((_QWORD *)v35 + 2) = "Unspecified";
      qword_2540FF380 = (uint64_t)v35;
      v36 = re::introspectionAllocator(v35);
      v37 = (re *)(*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v36 + 32))(v36, 24, 8);
      *(_DWORD *)v37 = 1;
      *((_QWORD *)v37 + 1) = 1;
      *((_QWORD *)v37 + 2) = "Raw";
      qword_2540FF388 = (uint64_t)v37;
      v38 = re::introspectionAllocator(v37);
      v39 = (re *)(*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v38 + 32))(v38, 24, 8);
      *(_DWORD *)v39 = 1;
      *((_QWORD *)v39 + 1) = 2;
      *((_QWORD *)v39 + 2) = "Scalar";
      qword_2540FF390 = (uint64_t)v39;
      v40 = re::introspectionAllocator(v39);
      v41 = (re *)(*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v40 + 32))(v40, 24, 8);
      *(_DWORD *)v41 = 1;
      *((_QWORD *)v41 + 1) = 3;
      *((_QWORD *)v41 + 2) = "Color";
      qword_2540FF398 = (uint64_t)v41;
      v42 = re::introspectionAllocator(v41);
      v43 = (re *)(*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v42 + 32))(v42, 24, 8);
      *(_DWORD *)v43 = 1;
      *((_QWORD *)v43 + 1) = 4;
      *((_QWORD *)v43 + 2) = "HDRColor";
      qword_2540FF3A0 = (uint64_t)v43;
      v44 = re::introspectionAllocator(v43);
      v45 = (re *)(*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v44 + 32))(v44, 24, 8);
      *(_DWORD *)v45 = 1;
      *((_QWORD *)v45 + 1) = 5;
      *((_QWORD *)v45 + 2) = "Normal";
      qword_2540FF3A8 = (uint64_t)v45;
      v46 = re::introspectionAllocator(v45);
      v47 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v46 + 32))(v46, 24, 8);
      *(_DWORD *)v47 = 1;
      *(_QWORD *)(v47 + 8) = 6;
      *(_QWORD *)(v47 + 16) = "None";
      qword_2540FF3B0 = v47;
      __cxa_guard_release(&qword_2540FF360);
    }
  }
  v4 = atomic_load((unsigned __int8 *)&qword_2540FF368);
  if ((v4 & 1) == 0 && __cxa_guard_acquire(&qword_2540FF368))
  {
    re::IntrospectionBasic::IntrospectionBasic((re::IntrospectionBasic *)&qword_2540FF3B8, "TextureSemantic", 4, 4, 1, 1);
    qword_2540FF3B8 = (uint64_t)&off_24ED7D9E8;
    qword_2540FF3F8 = (uint64_t)&re::introspect_TextureSemantic(BOOL)::enumTable;
    dword_2540FF3C8 = 9;
    __cxa_guard_release(&qword_2540FF368);
  }
  if (v2)
  {
    if ((_MergedGlobals_76 & 1) != 0)
      return &qword_2540FF3B8;
  }
  else
  {
    re::IntrospectionSharedLock::IntrospectionSharedLock((re::IntrospectionSharedLock *)v53);
    v5 = _MergedGlobals_76;
    re::IntrospectionSharedLock::~IntrospectionSharedLock((re::IntrospectionSharedLock *)v53);
    if ((v5 & 1) != 0)
      return &qword_2540FF3B8;
    v7 = re::introspectionSharedMutex(v6);
    std::__shared_mutex_base::lock(v7);
    if ((_MergedGlobals_76 & 1) != 0)
    {
LABEL_34:
      v31 = re::introspectionSharedMutex(v8);
      std::__shared_mutex_base::unlock(v31);
      return &qword_2540FF3B8;
    }
  }
  _MergedGlobals_76 = 1;
  re::IntrospectionRegistry::add((re::IntrospectionRegistry *)&qword_2540FF3B8, a2);
  v49 = 0xACDB0069060A27C2;
  v50 = "TextureSemantic";
  v53[0] = 0x607DD0F01DCLL;
  v53[1] = "uint32_t";
  v9 = (uint64_t *)re::HashTable<re::StringID,re::StateParameterInt *,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::tryGet((uint64_t)&unk_25582A358, v53);
  if (v9)
  {
    v10 = *v9;
    re::StringID::destroyString((re::StringID *)v53);
    v11 = (unsigned int *)qword_2540FF3F8;
    v52[1] = v10;
    re::TypeBuilder::beginEnumType((uint64_t)v53, &v49, 1, 1, (uint64_t)v52);
    v13 = *v11;
    if ((_DWORD)v13)
    {
      for (i = 0; i < v13; ++i)
      {
        v15 = *(_QWORD *)(*((_QWORD *)v11 + 1) + 8 * i);
        if (*(_DWORD *)v15 == 1)
        {
          v16 = *(char **)(v15 + 16);
          if (v16)
          {
            v17 = *v16;
            if (*v16)
            {
              v18 = v16[1];
              if (v18)
              {
                v19 = (unsigned __int8 *)(v16 + 2);
                do
                {
                  v17 = 31 * v17 + v18;
                  v20 = *v19++;
                  v18 = v20;
                }
                while (v20);
              }
            }
          }
          else
          {
            v17 = 0;
          }
          v21 = *(_QWORD *)(v15 + 8);
          *(_QWORD *)&v51.var0 = 2 * v17;
          v51.var1 = v16;
          re::TypeBuilder::addEnumConstant((re::TypeBuilder *)v53, v21, &v51);
          re::StringID::destroyString((re::StringID *)&v51);
          v13 = *v11;
        }
      }
      if (v13)
      {
        for (j = 0; j < v13; ++j)
        {
          v23 = *(_QWORD *)(*((_QWORD *)v11 + 1) + 8 * j);
          if (*(_DWORD *)v23 == 2)
          {
            v24 = *(char **)(v23 + 16);
            if (v24)
            {
              v25 = *v24;
              if (*v24)
              {
                v26 = v24[1];
                if (v26)
                {
                  v27 = (unsigned __int8 *)(v24 + 2);
                  do
                  {
                    v25 = 31 * v25 + v26;
                    v28 = *v27++;
                    v26 = v28;
                  }
                  while (v28);
                }
              }
            }
            else
            {
              v25 = 0;
            }
            v29 = *(_QWORD *)(v23 + 8);
            *(_QWORD *)&v51.var0 = 2 * v25;
            v51.var1 = v24;
            re::TypeBuilder::addEnumConstantRenaming((re::TypeBuilder *)v53, v29, &v51);
            re::StringID::destroyString((re::StringID *)&v51);
            v13 = *v11;
          }
        }
      }
    }
    re::TypeBuilder::~TypeBuilder((re::TypeBuilder *)v53, v30);
    xmmword_2540FF3D8 = (__int128)v51;
    re::StringID::destroyString((re::StringID *)&v49);
    if ((v2 & 1) != 0)
      return &qword_2540FF3B8;
    goto LABEL_34;
  }
  re::StringID::destroyString((re::StringID *)v53);
  re::internal::assertLog((re::internal *)5, v48, "assertion failure: '%s' (%s:line %i) Failed to determine underlying type of enum %s.", "valueID.isValid()", "registerEnumType", 2796, "TextureSemantic", v49, v50);
  result = (uint64_t *)_os_crash();
  __break(1u);
  return result;
}

uint64_t *re::allocInfo_TextureAsset(re *this)
{
  unsigned __int8 v1;
  _OWORD *v3;

  v1 = atomic_load((unsigned __int8 *)&qword_2540FF378);
  if ((v1 & 1) == 0 && __cxa_guard_acquire(&qword_2540FF378))
  {
    ArcSharedObject::ArcSharedObject((ArcSharedObject *)&qword_2540FF460, 0);
    *(uint64_t *)((char *)&qword_2540FF470 + 6) = 0;
    qword_2540FF470 = 0;
    qword_2540FF480 = 0;
    qword_2540FF488 = 0xFFFFFFFFLL;
    qword_2540FF460 = (uint64_t)&off_24ED7DAA8;
    qword_2540FF490 = (uint64_t)"TextureAsset";
    dword_2540FF498 = 0;
    v3[4] = 0u;
    v3[5] = 0u;
    v3[6] = 0u;
    qword_2540FF4D0 = 0;
    __cxa_guard_release(&qword_2540FF378);
  }
  return &qword_2540FF460;
}

void re::initInfo_TextureAsset(re *this, re::IntrospectionBase *a2)
{
  const re::IntrospectionBase *v3;
  unsigned __int8 v4;
  re *v5;
  uint64_t *v6;
  const re::IntrospectionBase *v7;
  void *v8;
  uint64_t v9;
  uint64_t *v10;
  const re::IntrospectionBase *v11;
  void *v12;
  uint64_t v13;
  uint64_t *v14;
  const re::IntrospectionBase *v15;
  void *v16;
  uint64_t v17;
  uint64_t *v18;
  const re::IntrospectionBase *v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t *v22;
  const re::IntrospectionBase *v23;
  uint64_t *v24;
  uint64_t v25;
  uint64_t *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t *v32;
  const re::IntrospectionBase *v33;
  uint64_t v34;
  uint64_t *v35;
  const re::IntrospectionBase *v36;
  void *v37;
  uint64_t v38;
  uint64_t *v39;
  const re::IntrospectionBase *v40;
  void *v41;
  uint64_t v42;
  uint64_t *v43;
  uint64_t v44;
  uint64_t *v45;
  uint64_t v46;
  __int128 v47;
  _QWORD v48[2];
  __int128 v49;

  v48[0] = 0x3DA0ACA55D0EE56ALL;
  v48[1] = "TextureAsset";
  re::StringID::destroyString((re::StringID *)v48);
  *((_OWORD *)this + 2) = v49;
  v4 = atomic_load((unsigned __int8 *)&qword_2540FF370);
  if ((v4 & 1) == 0)
  {
    v5 = (re *)__cxa_guard_acquire(&qword_2540FF370);
    if ((_DWORD)v5)
    {
      v6 = re::introspectionAllocator(v5);
      v8 = re::introspect_int((re *)1, v7);
      v9 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v6 + 32))(v6, 72, 8);
      *(_DWORD *)v9 = 1;
      *(_QWORD *)(v9 + 8) = "width";
      *(_QWORD *)(v9 + 16) = v8;
      *(_QWORD *)(v9 + 24) = 0;
      *(_QWORD *)(v9 + 32) = 0x16800000001;
      *(_DWORD *)(v9 + 40) = 0;
      *(_QWORD *)(v9 + 48) = 0;
      *(_QWORD *)(v9 + 56) = 0;
      *(_DWORD *)(v9 + 64) = 0;
      qword_2540FF400 = v9;
      v10 = re::introspectionAllocator((re *)v9);
      v12 = re::introspect_int((re *)1, v11);
      v13 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v10 + 32))(v10, 72, 8);
      *(_DWORD *)v13 = 1;
      *(_QWORD *)(v13 + 8) = "height";
      *(_QWORD *)(v13 + 16) = v12;
      *(_QWORD *)(v13 + 24) = 0;
      *(_QWORD *)(v13 + 32) = 0x16C00000002;
      *(_DWORD *)(v13 + 40) = 0;
      *(_QWORD *)(v13 + 48) = 0;
      *(_QWORD *)(v13 + 56) = 0;
      *(_DWORD *)(v13 + 64) = 0;
      qword_2540FF408 = v13;
      v14 = re::introspectionAllocator((re *)v13);
      v16 = re::introspect_int((re *)1, v15);
      v17 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v14 + 32))(v14, 72, 8);
      *(_DWORD *)v17 = 1;
      *(_QWORD *)(v17 + 8) = "depth";
      *(_QWORD *)(v17 + 16) = v16;
      *(_QWORD *)(v17 + 24) = 0;
      *(_QWORD *)(v17 + 32) = 0x17000000003;
      *(_DWORD *)(v17 + 40) = 0;
      *(_QWORD *)(v17 + 48) = 0;
      *(_QWORD *)(v17 + 56) = 0;
      *(_DWORD *)(v17 + 64) = 0;
      qword_2540FF410 = v17;
      v18 = re::introspectionAllocator((re *)v17);
      v20 = re::mtl::introspect_PixelFormat((re::mtl *)1, v19);
      v21 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v18 + 32))(v18, 72, 8);
      *(_DWORD *)v21 = 1;
      *(_QWORD *)(v21 + 8) = "pixelFormat";
      *(_QWORD *)(v21 + 16) = v20;
      *(_QWORD *)(v21 + 24) = 0;
      *(_QWORD *)(v21 + 32) = 0x17800000004;
      *(_DWORD *)(v21 + 40) = 0;
      *(_QWORD *)(v21 + 48) = 0;
      *(_QWORD *)(v21 + 56) = 0;
      *(_DWORD *)(v21 + 64) = 0;
      qword_2540FF418 = v21;
      v22 = re::introspectionAllocator((re *)v21);
      v24 = re::mtl::introspect_TextureType((re::mtl *)1, v23);
      v25 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v22 + 32))(v22, 72, 8);
      *(_DWORD *)v25 = 1;
      *(_QWORD *)(v25 + 8) = "textureType";
      *(_QWORD *)(v25 + 16) = v24;
      *(_QWORD *)(v25 + 24) = 0;
      *(_QWORD *)(v25 + 32) = 0x17C00000005;
      *(_DWORD *)(v25 + 40) = 0;
      *(_QWORD *)(v25 + 48) = 0;
      *(_QWORD *)(v25 + 56) = 0;
      *(_DWORD *)(v25 + 64) = 0;
      qword_2540FF420 = v25;
      v26 = re::introspectionAllocator((re *)v25);
      v27 = re::mtl::introspect_TextureSwizzleChannels((re::IntrospectionBase **)1);
      v28 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v26 + 32))(v26, 72, 8);
      *(_DWORD *)v28 = 1;
      *(_QWORD *)(v28 + 8) = "swizzle";
      *(_QWORD *)(v28 + 16) = v27;
      *(_QWORD *)(v28 + 24) = 0;
      *(_QWORD *)(v28 + 32) = 0x18000000006;
      *(_DWORD *)(v28 + 40) = 0;
      *(_QWORD *)(v28 + 48) = 0;
      *(_QWORD *)(v28 + 56) = 0;
      *(_DWORD *)(v28 + 64) = 0;
      qword_2540FF428 = v28;
      v29 = re::introspectionAllocator((re *)v28);
      v30 = re::introspect_TextureCompileOptions((re::IntrospectionBase **)1);
      v31 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v29 + 32))(v29, 72, 8);
      *(_DWORD *)v31 = 1;
      *(_QWORD *)(v31 + 8) = "compileOptions";
      *(_QWORD *)(v31 + 16) = v30;
      *(_QWORD *)(v31 + 24) = 0;
      *(_QWORD *)(v31 + 32) = 0x800000007;
      *(_DWORD *)(v31 + 40) = 0;
      *(_QWORD *)(v31 + 48) = 0;
      *(_QWORD *)(v31 + 56) = 0;
      *(_DWORD *)(v31 + 64) = 0;
      qword_2540FF430 = v31;
      v32 = re::introspectionAllocator((re *)v31);
      re::introspect_TextureSemantic((re *)1, v33);
      v34 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v32 + 32))(v32, 72, 8);
      *(_DWORD *)v34 = 1;
      *(_QWORD *)(v34 + 8) = "semantic";
      *(_QWORD *)(v34 + 16) = &qword_2540FF3B8;
      *(_QWORD *)(v34 + 24) = 0;
      *(_QWORD *)(v34 + 32) = 0x18400000008;
      *(_DWORD *)(v34 + 40) = 0;
      *(_QWORD *)(v34 + 48) = 0;
      *(_QWORD *)(v34 + 56) = 0;
      *(_DWORD *)(v34 + 64) = 0;
      qword_2540FF438 = v34;
      v35 = re::introspectionAllocator((re *)v34);
      v37 = re::IntrospectionInfo<re::DynamicString>::get(1, v36);
      v38 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v35 + 32))(v35, 72, 8);
      *(_DWORD *)v38 = 1;
      *(_QWORD *)(v38 + 8) = "colorSpace";
      *(_QWORD *)(v38 + 16) = v37;
      *(_QWORD *)(v38 + 24) = 0;
      *(_QWORD *)(v38 + 32) = 0x18800000009;
      *(_DWORD *)(v38 + 40) = 0;
      *(_QWORD *)(v38 + 48) = 0;
      *(_QWORD *)(v38 + 56) = 0;
      *(_DWORD *)(v38 + 64) = 0;
      qword_2540FF440 = v38;
      v39 = re::introspectionAllocator((re *)v38);
      v41 = re::introspect_int((re *)1, v40);
      v42 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v39 + 32))(v39, 72, 8);
      *(_DWORD *)v42 = 1;
      *(_QWORD *)(v42 + 8) = "arrayLength";
      *(_QWORD *)(v42 + 16) = v41;
      *(_QWORD *)(v42 + 24) = 0;
      *(_QWORD *)(v42 + 32) = 0x1740000000ALL;
      *(_DWORD *)(v42 + 40) = 0;
      *(_QWORD *)(v42 + 48) = 0;
      *(_QWORD *)(v42 + 56) = 0;
      *(_DWORD *)(v42 + 64) = 0;
      qword_2540FF448 = v42;
      v43 = re::introspectionAllocator((re *)v42);
      v44 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v43 + 32))(v43, 64, 8);
      *(_DWORD *)v44 = 6;
      *(_QWORD *)(v44 + 8) = 1;
      *(_QWORD *)(v44 + 16) = 0;
      *(_QWORD *)(v44 + 24) = 0;
      *(_QWORD *)(v44 + 32) = 0;
      *(_BYTE *)(v44 + 40) = 1;
      *(_QWORD *)(v44 + 48) = re::TextureAssetLoader::downgradeTextureAssetToSpring2023;
      *(_DWORD *)(v44 + 56) = 2;
      qword_2540FF450 = v44;
      v45 = re::introspectionAllocator((re *)v44);
      v46 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v45 + 32))(v45, 64, 8);
      *(_DWORD *)v46 = 6;
      *(_QWORD *)(v46 + 8) = 1;
      *(_QWORD *)(v46 + 16) = 0;
      *(_QWORD *)(v46 + 24) = 0;
      *(_QWORD *)(v46 + 32) = 0;
      *(_BYTE *)(v46 + 40) = 1;
      *(_QWORD *)(v46 + 48) = re::TextureAssetLoader::downgradeTextureAssetToSpring2024;
      *(_DWORD *)(v46 + 56) = 3;
      qword_2540FF458 = v46;
      __cxa_guard_release(&qword_2540FF370);
    }
  }
  *((_QWORD *)this + 2) = 0x1A800000008;
  *((_DWORD *)this + 6) = 8;
  *((_WORD *)this + 14) = 0;
  *((_DWORD *)this + 14) = 12;
  *((_QWORD *)this + 8) = &qword_2540FF400;
  *((_QWORD *)this + 9) = re::internal::defaultConstruct<re::TextureAsset>;
  *((_QWORD *)this + 10) = re::internal::defaultDestruct<re::TextureAsset>;
  *((_QWORD *)this + 11) = 0;
  *((_QWORD *)this + 12) = 0;
  *((_QWORD *)this + 13) = re::internal::defaultConstructV2<re::TextureAsset>;
  *((_QWORD *)this + 14) = re::internal::defaultDestructV2<re::TextureAsset>;
  re::IntrospectionRegistry::add(this, v3);
  v47 = v49;
}

re::TextureAsset *re::internal::defaultConstruct<re::TextureAsset>(int a1, int a2, re::TextureAsset *this)
{
  return re::TextureAsset::TextureAsset(this);
}

uint64_t re::internal::defaultDestruct<re::TextureAsset>(uint64_t a1, uint64_t a2, uint64_t (***a3)(_QWORD))
{
  return (**a3)(a3);
}

uint64_t re::internal::defaultDestructV2<re::TextureAsset>(uint64_t (***a1)(_QWORD))
{
  return (**a1)(a1);
}

uint64_t re::introspect_TextureAsset(re::IntrospectionBase **this)
{
  return re::internal::getOrCreateInfo((re::internal *)"TextureAsset", (uint64_t (*)(re::internal *))re::allocInfo_TextureAsset, (re::IntrospectionBase *(*)(void))re::initInfo_TextureAsset, (void (*)(re::IntrospectionBase *))&re::internal::introspectionInfoStorage<re::TextureAsset>, this);
}

re::TextureAsset *re::TextureAsset::TextureAsset(re::TextureAsset *this)
{
  _QWORD *v2;
  _anonymous_namespace_ *v3;

  *(_QWORD *)this = &off_24ED36C38;
  *((_DWORD *)this + 2) = 16777473;
  *((_BYTE *)this + 12) = 1;
  *((_DWORD *)this + 4) = 1;
  *((_DWORD *)this + 9) = 0;
  *(_QWORD *)((char *)this + 20) = 0;
  *(_QWORD *)((char *)this + 25) = 0;
  *((_DWORD *)this + 10) = 84148994;
  *((_OWORD *)this + 3) = 0uLL;
  *((_OWORD *)this + 5) = 0uLL;
  *((_OWORD *)this + 4) = 0uLL;
  v2 = (_QWORD *)((char *)this + 64);
  v3 = (_anonymous_namespace_ *)re::DynamicString::setCapacity(v2, 0);
  *((_QWORD *)this + 12) = 0;
  *((_QWORD *)this + 13) = 0;
  *((_WORD *)this + 60) = 0;
  *((_QWORD *)this + 14) = 0;
  *(_DWORD *)((char *)this + 122) = 65537;
  *((_BYTE *)this + 126) = 0;
  *((_QWORD *)this + 17) = 0;
  *((_QWORD *)this + 18) = 0;
  *((_BYTE *)this + 152) &= 0x80u;
  *((_QWORD *)this + 20) = 0;
  *((_DWORD *)this + 60) = 0;
  *((_QWORD *)this + 31) = 0;
  *((_BYTE *)this + 256) &= 0x80u;
  *((_QWORD *)this + 33) = 0;
  *((_DWORD *)this + 86) = 0;
  *((_QWORD *)this + 44) = 0;
  *(_OWORD *)((char *)this + 360) = xmmword_2260FBE20;
  *((_QWORD *)this + 47) = 0x200000073;
  *((_DWORD *)this + 96) = 84148994;
  *((_DWORD *)this + 97) = 6;
  *(_OWORD *)((char *)this + 392) = 0u;
  *(_OWORD *)((char *)this + 408) = 0u;
  re::DynamicString::setCapacity((_QWORD *)this + 49, 0);
  return this;
}

void re::TextureAsset::~TextureAsset(re::TextureAsset *this)
{
  re::TextureAsset::~TextureAsset(this);
  JUMPOUT(0x2276933B8);
}

{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char v7;
  char v8;

  *(_QWORD *)this = &off_24ED36C38;
  v2 = *((_QWORD *)this + 49);
  if (v2)
  {
    if ((*((_BYTE *)this + 400) & 1) != 0)
      (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v2 + 40))(v2, *((_QWORD *)this + 51));
    *(_OWORD *)((char *)this + 392) = 0u;
    *(_OWORD *)((char *)this + 408) = 0u;
  }

  v3 = *((unsigned int *)this + 86);
  if ((_DWORD)v3 != -1)
    ((void (*)(char *, char *))*(&__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8nn180100IZNS0_6__dtorINS0_8__traitsIJN2NS9SharedPtrIN3MTL7TextureEEEN2re10CPUTextureEEEELNS0_6_TraitE1EE9__destroyB8nn180100EvEUlRT_E_JRSF_EEEDcOSG_DpOT0____fmatrix
                                          + v3))(&v7, (char *)this + 264);
  *((_DWORD *)this + 86) = -1;

  v4 = *((unsigned int *)this + 60);
  if ((_DWORD)v4 != -1)
    ((void (*)(char *, char *))*(&__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8nn180100IZNS0_6__dtorINS0_8__traitsIJN2NS9SharedPtrIN3MTL7TextureEEEN2re10CPUTextureEEEELNS0_6_TraitE1EE9__destroyB8nn180100EvEUlRT_E_JRSF_EEEDcOSG_DpOT0____fmatrix
                                          + v4))(&v8, (char *)this + 160);
  *((_DWORD *)this + 60) = -1;
  re::TextureHandle::invalidate((re::TextureAsset *)((char *)this + 136));

  v5 = *((_QWORD *)this + 12);
  if (v5)
  {

    *((_QWORD *)this + 12) = 0;
  }
  v6 = *((_QWORD *)this + 8);
  if (v6)
  {
    if ((*((_BYTE *)this + 72) & 1) != 0)
      (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v6 + 40))(v6, *((_QWORD *)this + 10));
    *((_OWORD *)this + 4) = 0u;
    *((_OWORD *)this + 5) = 0u;
  }
  re::TextureHandle::invalidate((re::TextureAsset *)((char *)this + 48));
}

uint64_t std::__variant_detail::__assignment<std::__variant_detail::__traits<NS::SharedPtr<MTL::Texture>,re::CPUTexture>>::__generic_assign[abi:nn180100]<std::__variant_detail::__copy_assignment<std::__variant_detail::__traits<NS::SharedPtr<MTL::Texture>,re::CPUTexture>,(std::__variant_detail::_Trait)1> const&>(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char v6;

  v2 = result;
  v3 = *(unsigned int *)(result + 80);
  v4 = *(unsigned int *)(a2 + 80);
  if ((_DWORD)v3 == -1)
  {
    if ((_DWORD)v4 == -1)
      return result;
  }
  else if ((_DWORD)v4 == -1)
  {
    result = ((uint64_t (*)(char *, uint64_t, uint64_t))*(&__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8nn180100IZNS0_6__dtorINS0_8__traitsIJN2NS9SharedPtrIN3MTL7TextureEEEN2re10CPUTextureEEEELNS0_6_TraitE1EE9__destroyB8nn180100EvEUlRT_E_JRSF_EEEDcOSG_DpOT0____fmatrix
                                                                + v3))(&v6, result, a2);
    *(_DWORD *)(v2 + 80) = -1;
    return result;
  }
  v5 = result;
  return ((uint64_t (*)(uint64_t *, uint64_t, uint64_t))off_24ED36C68[v4])(&v5, result, a2);
}

void **_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0ELm0EEE10__dispatchB8nn180100IOZNS0_12__assignmentINS0_8__traitsIJN2NS9SharedPtrIN3MTL7TextureEEEN2re10CPUTextureEEEEE16__generic_assignB8nn180100IRKNS0_17__copy_assignmentISF_LNS0_6_TraitE1EEEEEvOT_EUlRSN_OT0_E_JRNS0_6__baseILSJ_1EJSC_SE_EEERKSV_EEEDcSN_DpT0_(uint64_t *a1, void **a2, id *a3)
{
  return std::__variant_detail::__assignment<std::__variant_detail::__traits<NS::SharedPtr<MTL::Texture>,re::CPUTexture>>::__assign_alt[abi:nn180100]<0ul,NS::SharedPtr<MTL::Texture>,NS::SharedPtr<MTL::Texture> const&>(*a1, a2, a3);
}

re::DynamicString *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1ELm1EEE10__dispatchB8nn180100IOZNS0_12__assignmentINS0_8__traitsIJN2NS9SharedPtrIN3MTL7TextureEEEN2re10CPUTextureEEEEE16__generic_assignB8nn180100IRKNS0_17__copy_assignmentISF_LNS0_6_TraitE1EEEEEvOT_EUlRSN_OT0_E_JRNS0_6__baseILSJ_1EJSC_SE_EEERKSV_EEEDcSN_DpT0_(uint64_t *a1, void **a2, uint64_t a3)
{
  return std::__variant_detail::__assignment<std::__variant_detail::__traits<NS::SharedPtr<MTL::Texture>,re::CPUTexture>>::__assign_alt[abi:nn180100]<1ul,re::CPUTexture,re::CPUTexture const&>(*a1, a2, a3);
}

void **std::__variant_detail::__assignment<std::__variant_detail::__traits<NS::SharedPtr<MTL::Texture>,re::CPUTexture>>::__assign_alt[abi:nn180100]<0ul,NS::SharedPtr<MTL::Texture>,NS::SharedPtr<MTL::Texture> const&>(uint64_t a1, void **a2, id *a3)
{
  if (*(_DWORD *)(a1 + 80))
    return (void **)std::__variant_detail::__assignment<std::__variant_detail::__traits<NS::SharedPtr<MTL::Texture>,re::CPUTexture>>::__emplace[abi:nn180100]<0ul,NS::SharedPtr<MTL::Texture> const&>(a1, a3);
  else
    return NS::SharedPtr<MTL::Texture>::operator=(a2, a3);
}

uint64_t std::__variant_detail::__assignment<std::__variant_detail::__traits<NS::SharedPtr<MTL::Texture>,re::CPUTexture>>::__emplace[abi:nn180100]<0ul,NS::SharedPtr<MTL::Texture> const&>(uint64_t a1, id *a2)
{
  uint64_t v4;
  char v6;

  v4 = *(unsigned int *)(a1 + 80);
  if ((_DWORD)v4 != -1)
    ((void (*)(char *, uint64_t))*(&__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8nn180100IZNS0_6__dtorINS0_8__traitsIJN2NS9SharedPtrIN3MTL7TextureEEEN2re10CPUTextureEEEELNS0_6_TraitE1EE9__destroyB8nn180100EvEUlRT_E_JRSF_EEEDcOSG_DpOT0____fmatrix
                                           + v4))(&v6, a1);
  *(_DWORD *)(a1 + 80) = -1;
  *(_QWORD *)a1 = *a2;
  *(_DWORD *)(a1 + 80) = 0;
  return a1;
}

re::DynamicString *std::__variant_detail::__assignment<std::__variant_detail::__traits<NS::SharedPtr<MTL::Texture>,re::CPUTexture>>::__assign_alt[abi:nn180100]<1ul,re::CPUTexture,re::CPUTexture const&>(uint64_t a1, void **a2, uint64_t a3)
{
  if (*(_DWORD *)(a1 + 80) != 1)
    return (re::DynamicString *)std::__variant_detail::__assignment<std::__variant_detail::__traits<NS::SharedPtr<MTL::Texture>,re::CPUTexture>>::__emplace[abi:nn180100]<1ul,re::CPUTexture const&>(a1, a3);
  NS::SharedPtr<MTL::Texture>::operator=(a2, (void **)a3);
  re::DynamicArray<re::DynamicArray<unsigned char>>::operator=((uint64_t)(a2 + 1), (uint64_t *)(a3 + 8));
  return re::DynamicString::operator=((re::DynamicString *)(a2 + 6), (re::DynamicString *)(a3 + 48));
}

uint64_t re::DynamicArray<re::DynamicArray<unsigned char>>::operator=(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  unint64_t v5;

  if ((uint64_t *)a1 != a2)
  {
    v4 = *a2;
    if (*(_QWORD *)a1)
    {
      if (v4)
      {
        re::DynamicArray<re::DynamicArray<unsigned char>>::copy((_QWORD *)a1, (uint64_t)a2);
        ++*(_DWORD *)(a1 + 24);
      }
      else
      {
        re::DynamicArray<re::DynamicArray<unsigned char>>::clear((_QWORD *)a1);
      }
    }
    else if (v4)
    {
      v5 = a2[2];
      *(_QWORD *)a1 = v4;
      re::DynamicArray<re::DynamicArray<unsigned char>>::setCapacity((_QWORD *)a1, v5);
      ++*(_DWORD *)(a1 + 24);
      re::DynamicArray<re::DynamicArray<unsigned char>>::copy((_QWORD *)a1, (uint64_t)a2);
    }
  }
  return a1;
}

uint64_t *re::DynamicArray<re::DynamicArray<unsigned char>>::copy(_QWORD *a1, uint64_t a2)
{
  unint64_t v4;
  uint64_t *result;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;

  v4 = *(_QWORD *)(a2 + 16);
  if (v4 >= a1[2])
  {
    re::DynamicArray<re::DynamicArray<unsigned char>>::setCapacity(a1, *(_QWORD *)(a2 + 16));
    result = std::__unwrap_and_dispatch[abi:nn180100]<std::__overload<std::__copy_loop<std::_ClassicAlgPolicy>,std::__copy_trivial>,re::DynamicArray<unsigned char> *,re::DynamicArray<unsigned char> *,re::DynamicArray<unsigned char> *,0>(*(uint64_t **)(a2 + 32), (uint64_t *)(*(_QWORD *)(a2 + 32) + 40 * a1[2]), a1[4]);
    v9 = a1[2];
    if (v9 != v4)
    {
      v10 = 5 * v9;
      v11 = (uint64_t *)(*(_QWORD *)(a2 + 32) + 8 * v10);
      result = (uint64_t *)(a1[4] + 8 * v10);
      v12 = 40 * v4 - 8 * v10;
      do
      {
        v13 = re::DynamicArray<BOOL>::DynamicArray((uint64_t)result, v11);
        v11 += 5;
        result = (uint64_t *)(v13 + 40);
        v12 -= 40;
      }
      while (v12);
    }
  }
  else
  {
    result = std::__unwrap_and_dispatch[abi:nn180100]<std::__overload<std::__copy_loop<std::_ClassicAlgPolicy>,std::__copy_trivial>,re::DynamicArray<unsigned char> *,re::DynamicArray<unsigned char> *,re::DynamicArray<unsigned char> *,0>(*(uint64_t **)(a2 + 32), (uint64_t *)(*(_QWORD *)(a2 + 32) + 40 * v4), a1[4]);
    v6 = a1[2];
    if (v4 != v6)
    {
      v7 = 40 * v6 - 40 * v4;
      v8 = (_QWORD *)(a1[4] + 40 * v4 + 32);
      do
      {
        result = (uint64_t *)*(v8 - 4);
        if (result)
        {
          if (*v8)
            result = (uint64_t *)(*(uint64_t (**)(uint64_t *))(*result + 40))(result);
          *v8 = 0;
          *(v8 - 3) = 0;
          *(v8 - 2) = 0;
          *(v8 - 4) = 0;
          ++*((_DWORD *)v8 - 2);
        }
        v8 += 5;
        v7 -= 40;
      }
      while (v7);
    }
  }
  a1[2] = v4;
  return result;
}

_QWORD *re::DynamicArray<re::DynamicArray<unsigned char>>::clear(_QWORD *result)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;

  v1 = result;
  v2 = result[2];
  result[2] = 0;
  if (v2)
  {
    v3 = 40 * v2;
    v4 = (_QWORD *)(result[4] + 32);
    do
    {
      result = (_QWORD *)*(v4 - 4);
      if (result)
      {
        if (*v4)
          result = (_QWORD *)(*(uint64_t (**)(_QWORD *))(*result + 40))(result);
        *v4 = 0;
        *(v4 - 3) = 0;
        *(v4 - 2) = 0;
        *(v4 - 4) = 0;
        ++*((_DWORD *)v4 - 2);
      }
      v4 += 5;
      v3 -= 40;
    }
    while (v3);
  }
  ++*((_DWORD *)v1 + 6);
  return result;
}

_QWORD *re::DynamicArray<re::DynamicArray<unsigned char>>::setCapacity(_QWORD *result, unint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  v3 = result[1];
  if (v3 != a2)
  {
    v5 = result;
    if (result[2] <= a2)
    {
      result = (_QWORD *)*result;
      if (!*v5)
      {
        result = (_QWORD *)re::DynamicArray<re::DynamicArray<unsigned char>>::setCapacity(v5, a2);
        ++*((_DWORD *)v5 + 6);
        return result;
      }
      if (a2)
      {
        if (is_mul_ok(a2, 0x28uLL))
        {
          v2 = 40 * a2;
          result = (_QWORD *)(*(uint64_t (**)(_QWORD *, unint64_t, uint64_t))(*result + 32))(result, 40 * a2, 8);
          if (result)
          {
            v7 = result;
            if (!v5[1])
              goto LABEL_20;
            goto LABEL_11;
          }
        }
        else
        {
          re::internal::assertLog((re::internal *)6, a2, "assertion failure: '%s' (%s:line %i) Size overflow in DynamicArray<T>::setCapacity(). Element size = %zu, capacity = %zu", "!overflow", "setCapacity", 615, 40, a2);
          _os_crash();
          __break(1u);
        }
        re::internal::assertLog((re::internal *)6, v6, "assertion failure: '%s' (%s:line %i) DynamicArray<T> is out of memory (tried to allocate %zu bytes from allocator '%s').", "newData", "setCapacity", 619, v2, *(_QWORD *)(*v5 + 8));
        result = (_QWORD *)_os_crash();
        __break(1u);
        return result;
      }
      v7 = 0;
      if (!v3)
      {
LABEL_20:
        v5[4] = v7;
        v5[1] = a2;
        return result;
      }
LABEL_11:
      v8 = v5[4];
      v9 = v5[2];
      if (v9)
      {
        v10 = 0;
        v11 = 40 * v9;
        do
        {
          v12 = &v7[v10 / 8];
          v13 = v8 + v10;
          v12[4] = 0;
          v12[1] = 0;
          v12[2] = 0;
          *v12 = 0;
          *((_DWORD *)v12 + 6) = 0;
          v14 = *(_QWORD *)(v8 + v10 + 8);
          *v12 = *(_QWORD *)(v8 + v10);
          v12[1] = v14;
          *(_QWORD *)v13 = 0;
          *(_QWORD *)(v13 + 8) = 0;
          v15 = v7[v10 / 8 + 2];
          v12[2] = *(_QWORD *)(v8 + v10 + 16);
          *(_QWORD *)(v13 + 16) = v15;
          v16 = v7[v10 / 8 + 4];
          v12[4] = *(_QWORD *)(v8 + v10 + 32);
          *(_QWORD *)(v13 + 32) = v16;
          *(_DWORD *)(v13 + 24) = *(_DWORD *)(v8 + v10 + 24) + 1;
          *((_DWORD *)v12 + 6) = LODWORD(v7[v10 / 8 + 3]) + 1;
          v17 = *(_QWORD *)(v8 + v10);
          if (v17)
          {
            if (v16)
              (*(void (**)(uint64_t))(*(_QWORD *)v17 + 40))(v17);
            *(_QWORD *)(v13 + 32) = 0;
            *(_QWORD *)(v13 + 8) = 0;
            *(_QWORD *)(v13 + 16) = 0;
            *(_QWORD *)v13 = 0;
            ++*(_DWORD *)(v13 + 24);
          }
          v10 += 40;
        }
        while (v11 != v10);
        v8 = v5[4];
      }
      result = (_QWORD *)(*(uint64_t (**)(_QWORD, uint64_t))(*(_QWORD *)*v5 + 40))(*v5, v8);
      goto LABEL_20;
    }
  }
  return result;
}

uint64_t *std::__unwrap_and_dispatch[abi:nn180100]<std::__overload<std::__copy_loop<std::_ClassicAlgPolicy>,std::__copy_trivial>,re::DynamicArray<unsigned char> *,re::DynamicArray<unsigned char> *,re::DynamicArray<unsigned char> *,0>(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t *v4;

  v4 = a1;
  if (a1 != a2)
  {
    do
    {
      re::DynamicArray<BOOL>::operator=(a3, v4);
      v4 += 5;
      a3 += 40;
    }
    while (v4 != a2);
    return a2;
  }
  return v4;
}

_QWORD *std::__variant_detail::__assignment<std::__variant_detail::__traits<NS::SharedPtr<MTL::Texture>,re::CPUTexture>>::__emplace[abi:nn180100]<1ul,re::CPUTexture const&>(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  _QWORD *result;
  char v6;

  v4 = *(unsigned int *)(a1 + 80);
  if ((_DWORD)v4 != -1)
    ((void (*)(char *, uint64_t))*(&__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8nn180100IZNS0_6__dtorINS0_8__traitsIJN2NS9SharedPtrIN3MTL7TextureEEEN2re10CPUTextureEEEELNS0_6_TraitE1EE9__destroyB8nn180100EvEUlRT_E_JRSF_EEEDcOSG_DpOT0____fmatrix
                                           + v4))(&v6, a1);
  *(_DWORD *)(a1 + 80) = -1;
  result = std::__variant_detail::__alt<1ul,re::CPUTexture>::__alt[abi:nn180100]<re::CPUTexture const&>((_QWORD *)a1, a2);
  *(_DWORD *)(a1 + 80) = 1;
  return result;
}

_QWORD *std::__variant_detail::__alt<1ul,re::CPUTexture>::__alt[abi:nn180100]<re::CPUTexture const&>(_QWORD *a1, uint64_t a2)
{
  const re::DynamicString *v4;

  v4 = (const re::DynamicString *)(a2 + 48);
  *a1 = *(id *)a2;
  re::DynamicArray<re::DynamicArray<unsigned char>>::DynamicArray((uint64_t)(a1 + 1), (uint64_t *)(a2 + 8));
  re::DynamicString::DynamicString((re::DynamicString *)(a1 + 6), v4);
  return a1;
}

uint64_t re::DynamicArray<re::DynamicArray<unsigned char>>::DynamicArray(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  unint64_t v5;

  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)a1 = 0;
  *(_DWORD *)(a1 + 24) = 0;
  v3 = *a2;
  if (*a2)
  {
    v5 = a2[2];
    *(_QWORD *)a1 = v3;
    re::DynamicArray<re::DynamicArray<unsigned char>>::setCapacity((_QWORD *)a1, v5);
    ++*(_DWORD *)(a1 + 24);
    re::DynamicArray<re::DynamicArray<unsigned char>>::copy((_QWORD *)a1, (uint64_t)a2);
  }
  return a1;
}

uint64_t std::__variant_detail::__ctor<std::__variant_detail::__traits<NS::SharedPtr<MTL::Texture>,re::CPUTexture>>::__generic_construct[abi:nn180100]<std::__variant_detail::__copy_constructor<std::__variant_detail::__traits<NS::SharedPtr<MTL::Texture>,re::CPUTexture>,(std::__variant_detail::_Trait)1> const&>(uint64_t result, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char v6;
  char v7;

  v3 = result;
  v4 = *(unsigned int *)(result + 80);
  if ((_DWORD)v4 != -1)
    result = ((uint64_t (*)(char *, uint64_t))*(&__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8nn180100IZNS0_6__dtorINS0_8__traitsIJN2NS9SharedPtrIN3MTL7TextureEEEN2re10CPUTextureEEEELNS0_6_TraitE1EE9__destroyB8nn180100EvEUlRT_E_JRSF_EEEDcOSG_DpOT0____fmatrix
                                                       + v4))(&v7, result);
  *(_DWORD *)(v3 + 80) = -1;
  v5 = *(unsigned int *)(a2 + 80);
  if ((_DWORD)v5 != -1)
  {
    result = ((uint64_t (*)(char *, uint64_t, uint64_t))off_24ED36C78[v5])(&v6, v3, a2);
    *(_DWORD *)(v3 + 80) = v5;
  }
  return result;
}

id _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0ELm0EEE10__dispatchB8nn180100IOZNS0_6__ctorINS0_8__traitsIJN2NS9SharedPtrIN3MTL7TextureEEEN2re10CPUTextureEEEEE19__generic_constructB8nn180100IRKNS0_18__copy_constructorISF_LNS0_6_TraitE1EEEEEvRSG_OT_EUlRSO_OT0_E_JRNS0_6__baseILSJ_1EJSC_SE_EEERKSW_EEEDcSO_DpT0_(uint64_t a1, _QWORD *a2, id *a3)
{
  id result;

  result = *a3;
  *a2 = result;
  return result;
}

_QWORD *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1ELm1EEE10__dispatchB8nn180100IOZNS0_6__ctorINS0_8__traitsIJN2NS9SharedPtrIN3MTL7TextureEEEN2re10CPUTextureEEEEE19__generic_constructB8nn180100IRKNS0_18__copy_constructorISF_LNS0_6_TraitE1EEEEEvRSG_OT_EUlRSO_OT0_E_JRNS0_6__baseILSJ_1EJSC_SE_EEERKSW_EEEDcSO_DpT0_(uint64_t a1, _QWORD *a2, uint64_t a3)
{
  return std::__variant_detail::__alt<1ul,re::CPUTexture>::__alt[abi:nn180100]<re::CPUTexture const&>(a2, a3);
}

uint64_t re::TextureData::TextureData(uint64_t a1, uint64_t a2, __CFString *a3)
{
  *(_BYTE *)a1 &= 0x80u;
  std::__variant_detail::__alt<1ul,re::CPUTexture>::__alt[abi:nn180100]<re::CPUTexture const&>((_QWORD *)(a1 + 8), a2);
  *(_DWORD *)(a1 + 88) = 1;
  *(_QWORD *)(a1 + 96) = 0;
  if (a3)
    re::TextureData::setColorSpace((id *)a1, a3);
  return a1;
}

uint64_t std::__variant_detail::__assignment<std::__variant_detail::__traits<NS::SharedPtr<MTL::Texture>,re::CPUTexture>>::__generic_assign[abi:nn180100]<std::__variant_detail::__move_assignment<std::__variant_detail::__traits<NS::SharedPtr<MTL::Texture>,re::CPUTexture>,(std::__variant_detail::_Trait)1>>(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char v6;

  v2 = result;
  v3 = *(unsigned int *)(result + 80);
  v4 = *(unsigned int *)(a2 + 80);
  if ((_DWORD)v3 == -1)
  {
    if ((_DWORD)v4 == -1)
      return result;
  }
  else if ((_DWORD)v4 == -1)
  {
    result = ((uint64_t (*)(char *, uint64_t, uint64_t))*(&__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8nn180100IZNS0_6__dtorINS0_8__traitsIJN2NS9SharedPtrIN3MTL7TextureEEEN2re10CPUTextureEEEELNS0_6_TraitE1EE9__destroyB8nn180100EvEUlRT_E_JRSF_EEEDcOSG_DpOT0____fmatrix
                                                                + v3))(&v6, result, a2);
    *(_DWORD *)(v2 + 80) = -1;
    return result;
  }
  v5 = result;
  return ((uint64_t (*)(uint64_t *, uint64_t, uint64_t))off_24ED36C88[v4])(&v5, result, a2);
}

void **_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0ELm0EEE10__dispatchB8nn180100IOZNS0_12__assignmentINS0_8__traitsIJN2NS9SharedPtrIN3MTL7TextureEEEN2re10CPUTextureEEEEE16__generic_assignB8nn180100INS0_17__move_assignmentISF_LNS0_6_TraitE1EEEEEvOT_EUlRSL_OT0_E_JRNS0_6__baseILSJ_1EJSC_SE_EEEOST_EEEDcSL_DpT0_(void ***a1, void **a2, void **a3)
{
  return std::__variant_detail::__assignment<std::__variant_detail::__traits<NS::SharedPtr<MTL::Texture>,re::CPUTexture>>::__assign_alt[abi:nn180100]<0ul,NS::SharedPtr<MTL::Texture>,NS::SharedPtr<MTL::Texture>>(*a1, a2, a3);
}

re::DynamicString *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1ELm1EEE10__dispatchB8nn180100IOZNS0_12__assignmentINS0_8__traitsIJN2NS9SharedPtrIN3MTL7TextureEEEN2re10CPUTextureEEEEE16__generic_assignB8nn180100INS0_17__move_assignmentISF_LNS0_6_TraitE1EEEEEvOT_EUlRSL_OT0_E_JRNS0_6__baseILSJ_1EJSC_SE_EEEOST_EEEDcSL_DpT0_(uint64_t *a1, void **a2, uint64_t a3)
{
  return std::__variant_detail::__assignment<std::__variant_detail::__traits<NS::SharedPtr<MTL::Texture>,re::CPUTexture>>::__assign_alt[abi:nn180100]<1ul,re::CPUTexture,re::CPUTexture const&>(*a1, a2, a3);
}

void **std::__variant_detail::__assignment<std::__variant_detail::__traits<NS::SharedPtr<MTL::Texture>,re::CPUTexture>>::__assign_alt[abi:nn180100]<0ul,NS::SharedPtr<MTL::Texture>,NS::SharedPtr<MTL::Texture>>(void **result, void **a2, void **a3)
{
  void **v4;
  uint64_t v5;
  char v6;

  v4 = result;
  v5 = *((unsigned int *)result + 20);
  if ((_DWORD)v5 != -1)
  {
    if (!(_DWORD)v5)
      return NS::SharedPtr<MTL::Texture>::operator=(a2, a3);
    result = (void **)((uint64_t (*)(char *, void **))*(&__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8nn180100IZNS0_6__dtorINS0_8__traitsIJN2NS9SharedPtrIN3MTL7TextureEEEN2re10CPUTextureEEEELNS0_6_TraitE1EE9__destroyB8nn180100EvEUlRT_E_JRSF_EEEDcOSG_DpOT0____fmatrix
                                                                + v5))(&v6, result);
  }
  *v4 = *a3;
  *a3 = 0;
  *((_DWORD *)v4 + 20) = 0;
  return result;
}

uint64_t std::__variant_detail::__ctor<std::__variant_detail::__traits<NS::SharedPtr<MTL::Texture>,re::CPUTexture>>::__generic_construct[abi:nn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<NS::SharedPtr<MTL::Texture>,re::CPUTexture>,(std::__variant_detail::_Trait)1>>(uint64_t result, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char v6;
  char v7;

  v3 = result;
  v4 = *(unsigned int *)(result + 80);
  if ((_DWORD)v4 != -1)
    result = ((uint64_t (*)(char *, uint64_t))*(&__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8nn180100IZNS0_6__dtorINS0_8__traitsIJN2NS9SharedPtrIN3MTL7TextureEEEN2re10CPUTextureEEEELNS0_6_TraitE1EE9__destroyB8nn180100EvEUlRT_E_JRSF_EEEDcOSG_DpOT0____fmatrix
                                                       + v4))(&v7, result);
  *(_DWORD *)(v3 + 80) = -1;
  v5 = *(unsigned int *)(a2 + 80);
  if ((_DWORD)v5 != -1)
  {
    result = ((uint64_t (*)(char *, uint64_t, uint64_t))off_24ED36C98[v5])(&v6, v3, a2);
    *(_DWORD *)(v3 + 80) = v5;
  }
  return result;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0ELm0EEE10__dispatchB8nn180100IOZNS0_6__ctorINS0_8__traitsIJN2NS9SharedPtrIN3MTL7TextureEEEN2re10CPUTextureEEEEE19__generic_constructB8nn180100INS0_18__move_constructorISF_LNS0_6_TraitE1EEEEEvRSG_OT_EUlRSM_OT0_E_JRNS0_6__baseILSJ_1EJSC_SE_EEEOSU_EEEDcSM_DpT0_(uint64_t a1, _QWORD *a2, _QWORD *a3)
{
  *a2 = *a3;
  *a3 = 0;
}

_QWORD *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1ELm1EEE10__dispatchB8nn180100IOZNS0_6__ctorINS0_8__traitsIJN2NS9SharedPtrIN3MTL7TextureEEEN2re10CPUTextureEEEEE19__generic_constructB8nn180100INS0_18__move_constructorISF_LNS0_6_TraitE1EEEEEvRSG_OT_EUlRSM_OT0_E_JRNS0_6__baseILSJ_1EJSC_SE_EEEOSU_EEEDcSM_DpT0_(uint64_t a1, _QWORD *a2, uint64_t a3)
{
  return std::__variant_detail::__alt<1ul,re::CPUTexture>::__alt[abi:nn180100]<re::CPUTexture const&>(a2, a3);
}

uint64_t re::Result<re::TextureFromImageOptions,re::DynamicString>::~Result(uint64_t a1)
{
  uint64_t v2;
  _OWORD *v3;

  if (*(_BYTE *)a1)
  {

  }
  else
  {
    v3 = (_OWORD *)(a1 + 8);
    v2 = *(_QWORD *)(a1 + 8);
    if (v2)
    {
      if ((*(_BYTE *)(a1 + 16) & 1) != 0)
        (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v2 + 40))(v2, *(_QWORD *)(a1 + 24));
      *v3 = 0u;
      *(_OWORD *)(a1 + 24) = 0u;
    }
  }
  return a1;
}

uint64_t re::AssetHandle::loadedAsset<re::TextureAsset>(re::TextureAsset *a1)
{
  if (!*((_QWORD *)a1 + 1))
    return 0;
  re::TextureAsset::assetType(a1);
  return re::AssetHandle::assetWithType(a1, (const re::AssetType *)&re::TextureAsset::assetType(void)::type, 1);
}

void re::make::shared::object<re::TextureAssetRealityFileProviderCallbacks,re::TextureAssetLoader *>(re *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;

  v4 = re::globalAllocators(a1);
  v5 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v4[2] + 32))(v4[2], 40, 8);
  v6 = *(_QWORD *)a1;
  ArcSharedObject::ArcSharedObject((ArcSharedObject *)v5, 0);
  *(_QWORD *)v5 = &off_24ED36CB8;
  *(_QWORD *)(v5 + 24) = v6;
  *(_BYTE *)(v5 + 32) = *(_QWORD *)(v6 + 16) != 0;
  *a2 = v5;
}

void re::TextureAssetRealityFileProviderCallbacks::~TextureAssetRealityFileProviderCallbacks(re::TextureAssetRealityFileProviderCallbacks *this)
{
  *(_QWORD *)this = &off_24ED426B8;
  objc_destructInstance((char *)this + 8);
}

{
  *(_QWORD *)this = &off_24ED426B8;
  objc_destructInstance((char *)this + 8);
  JUMPOUT(0x2276933B8);
}

uint64_t re::TextureAssetRealityFileProviderCallbacks::tryCreateMissingAsset@<X0>(uint64_t a1@<X0>, const re::TextureAssetLoader *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  re::TextureAssetRealityFileProviderCallbacks *v8;
  re::RealityFile *v9;
  const char *v10;
  unint64_t *v11;
  re *v12;
  uint64_t *v13;
  re::Allocator *v14;
  re *v15;
  NSObject *v16;
  uint64_t v17;
  uint64_t v18;
  re::TextureAsset *TextureAsset;
  re::TextureAsset *v20;
  uint64_t *v21;
  const char *v22;
  __int128 v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t result;
  _BYTE v29[32];
  __int128 v30;
  uint64_t v31;
  __int128 v32;
  uint64_t v33;
  id v34;
  _BYTE v35[8];
  uint64_t v36;
  char v37;
  int v38;
  uint64_t v39;
  _BYTE buf[24];
  uint64_t v41;
  unsigned int v42;
  id v43;
  uint64_t v44;

  v44 = *MEMORY[0x24BDAC8D0];
  v39 = a4;
  v8 = *(re::TextureAssetRealityFileProviderCallbacks **)(a1 + 24);
  if ((*(_BYTE *)(a3 + 80) & 1) != 0)
    v9 = *(re::RealityFile **)(a3 + 88);
  else
    v9 = (re::RealityFile *)(a3 + 81);
  if ((*(_BYTE *)(a3 + 16) & 1) != 0)
    v10 = *(const char **)(a3 + 24);
  else
    v10 = (const char *)(a3 + 17);
  if ((*(_QWORD *)(a5 + 8) & 1) != 0)
    v11 = *(unint64_t **)(a5 + 16);
  else
    v11 = (unint64_t *)(a5 + 9);
  re::TextureAssetRealityFileProviderCallbacks::tryCreateSourceImageTextureProvider(v8, a2, v9, v10, *(const char **)(a3 + 112), v11, &v39, (uint64_t)v35);
  if (v35[0])
  {
    v13 = re::globalAllocators(v12);
    re::loadTextureDataWithProvider((re *)&v36, (re::TextureProvider *)v13[2], v14, (uint64_t)&v31);
    v16 = *re::assetsLogObjects(v15);
    if (os_log_type_enabled(v16, OS_LOG_TYPE_INFO))
    {
      if ((*(_BYTE *)(a3 + 80) & 1) != 0)
        v17 = *(_QWORD *)(a3 + 88);
      else
        v17 = a3 + 81;
      if ((*(_BYTE *)(a3 + 16) & 1) != 0)
        v18 = *(_QWORD *)(a3 + 24);
      else
        v18 = a3 + 17;
      *(_DWORD *)buf = 136315650;
      *(_QWORD *)&buf[4] = v17;
      *(_WORD *)&buf[12] = 2080;
      *(_QWORD *)&buf[14] = v18;
      *(_WORD *)&buf[22] = 2048;
      v41 = v39;
    }
    if ((_BYTE)v31)
    {
      buf[0] = v32;
      buf[8] = 0;
      v42 = -1;
      std::__variant_detail::__ctor<std::__variant_detail::__traits<NS::SharedPtr<MTL::Texture>,re::CPUTexture>>::__generic_construct[abi:nn180100]<std::__variant_detail::__copy_constructor<std::__variant_detail::__traits<NS::SharedPtr<MTL::Texture>,re::CPUTexture>,(std::__variant_detail::_Trait)1> const&>((uint64_t)&buf[8], (uint64_t)&v32 + 8);
      v43 = v34;
      *(_QWORD *)&v29[17] = 0;
      *(_QWORD *)&v29[12] = 0;
      *(_DWORD *)v29 = 16777473;
      v29[4] = 1;
      *(_DWORD *)&v29[8] = 1;
      *(_DWORD *)&v29[28] = 0;
      TextureAsset = (re::TextureAsset *)re::TextureAsset::makeTextureAsset((uint64_t)buf, v38, (__int128 *)v29);
      if (TextureAsset)
      {
        v20 = TextureAsset;
        v21 = re::TextureAsset::assetType(TextureAsset);
        v22 = (const char *)re::TextureAsset::assetType(void)::type;
        *(_QWORD *)&v30 = v20;
        BYTE8(v30) = 0;
        v23 = *(_OWORD *)v29;
        v25 = *(_QWORD *)&v29[24];
        v24 = *(_QWORD *)&v29[16];
        *(_BYTE *)(a6 + 56) = 0;
        *(_OWORD *)(a6 + 40) = v30;
        *(_BYTE *)a6 = 1;
      }
      else
      {
        if ((*(_BYTE *)(a3 + 80) & 1) != 0)
          v27 = *(_QWORD *)(a3 + 88);
        else
          v27 = a3 + 81;
        re::DynamicString::format((re::DynamicString *)"Failed to create texture asset for asset path: '%s'.", (re::DynamicString *)v29, v27);
        v23 = *(_OWORD *)v29;
        v25 = *(_QWORD *)&v29[24];
        v24 = *(_QWORD *)&v29[16];
        *(_BYTE *)a6 = 0;
      }
      *(_OWORD *)(a6 + 8) = v23;
      *(_QWORD *)(a6 + 24) = v24;
      *(_QWORD *)(a6 + 32) = v25;

      if (v42 != -1)
        ((void (*)(_BYTE *, _BYTE *))*(&__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8nn180100IZNS0_6__dtorINS0_8__traitsIJN2NS9SharedPtrIN3MTL7TextureEEEN2re10CPUTextureEEEELNS0_6_TraitE1EE9__destroyB8nn180100EvEUlRT_E_JRSF_EEEDcOSG_DpOT0____fmatrix
                                                + v42))(v29, &buf[8]);
    }
    else
    {
      re::DynamicString::DynamicString((re::DynamicString *)buf, (const re::DynamicString *)&v32);
      *(_BYTE *)a6 = 0;
      v26 = v41;
      *(_QWORD *)(a6 + 8) = *(_QWORD *)buf;
      *(_QWORD *)(a6 + 32) = v26;
      *(_OWORD *)(a6 + 16) = *(_OWORD *)&buf[8];
    }
    re::Result<re::TextureData,re::DynamicString>::~Result((uint64_t)&v31);
  }
  else
  {
    re::DynamicString::DynamicString((re::DynamicString *)&v31, (const re::DynamicString *)&v36);
    *(_BYTE *)a6 = 0;
    *(_QWORD *)(a6 + 8) = v31;
    *(_QWORD *)(a6 + 32) = v33;
    *(_OWORD *)(a6 + 16) = v32;
  }
  result = v36;
  if (v35[0])
    return (*(uint64_t (**)(uint64_t *))v36)(&v36);
  if (v36)
  {
    if ((v37 & 1) != 0)
      return (*(uint64_t (**)(void))(*(_QWORD *)v36 + 40))();
  }
  return result;
}

_anonymous_namespace_ *re::TextureAssetRealityFileProviderCallbacks::prepareDeserializationContext(_anonymous_namespace_ *result, uint64_t a2, uint64_t a3)
{
  _anonymous_namespace_ *v5;
  __n128 v6;
  __n128 v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _anonymous_namespace_ *v12;
  char v13;

  if (*((_BYTE *)result + 32) && *(_BYTE *)(a2 + 104))
  {
    v9 = 0;
    v10 = 0;
    v11 = 0;
    re::DynamicString::setCapacity(&v8, 0);
    v6.n128_f64[0] = re::HashTable<re::DynamicString,std::variant<re::DynamicString,re::Data,unsigned long>,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::add<re::DynamicString>(a3, (const re::DynamicString *)&v12, &v8);
    if (v8 && (v9 & 1) != 0)
      (*(void (**)(double))(*v8 + 40))(v6.n128_f64[0]);
    result = v12;
    if (v12 && (v13 & 1) != 0)
      result = (_anonymous_namespace_ *)(*(uint64_t (**)(__n128))(*(_QWORD *)v12 + 40))(v6);
  }
  if (*(_QWORD *)(a2 + 112) != 1)
  {
    re::DynamicString::format((re::DynamicString *)"%d", (re::DynamicString *)&v8, *(_QWORD *)(a2 + 112));
    v7.n128_f64[0] = re::HashTable<re::DynamicString,std::variant<re::DynamicString,re::Data,unsigned long>,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::add<re::DynamicString>(a3, (const re::DynamicString *)&v12, &v8);
    if (v8 && (v9 & 1) != 0)
      (*(void (**)(double))(*v8 + 40))(v7.n128_f64[0]);
    result = v12;
    if (v12)
    {
      if ((v13 & 1) != 0)
        return (_anonymous_namespace_ *)(*(uint64_t (**)(__n128))(*(_QWORD *)v12 + 40))(v7);
    }
  }
  return result;
}

uint64_t re::TextureAssetRealityFileProviderCallbacks::postLoadProcessing@<X0>(re::RealityFile *this@<X2>, uint64_t a2@<X0>, re::TextureAsset *a3@<X1>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  const char *v7;
  char *v8;
  char *v9;
  re::DynamicString *v10;
  uint64_t v11;
  re::DynamicString *v12;
  unint64_t v13;
  uint64_t v14;
  const char *v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  int v21;
  id v22;
  _anonymous_namespace_ *v23;
  __int128 v24;
  uint64_t v25;
  uint64_t v26;
  id v29;
  __int128 v30;
  uint64_t v31;
  _BYTE v32[8];
  id v33;
  char v34;
  _BYTE v35[8];
  uint64_t v36;
  _BYTE v37[8];
  unint64_t v38;
  __int128 v39;
  uint64_t v40;
  uint64_t v41;
  re::DynamicString *v42;
  _BYTE v43[8];
  char *v44;

  if ((*(_BYTE *)(a4 + 80) & 1) != 0)
    v7 = *(const char **)(a4 + 88);
  else
    v7 = (const char *)(a4 + 81);
  re::RealityFile::makeArchiveReader(this, (uint64_t)v43);
  if (!v43[0])
  {
    v23 = (_anonymous_namespace_ *)re::WrappedError::localizedDescription((id *)&v44);
    v24 = v39;
    v25 = v40;
    v26 = v41;
    *(_BYTE *)a5 = 0;
    *(_OWORD *)(a5 + 8) = v24;
    *(_QWORD *)(a5 + 24) = v25;
    *(_QWORD *)(a5 + 32) = v26;
    return re::Result<re::SharedPtr<re::RealityFileWriter::AssetInfo>,re::WrappedError>::~Result((uint64_t)v43);
  }
  v8 = v44;
  if (v44)
    v9 = v44 + 8;
  re::RealityArchive::entryNames((re::RealityArchive *)v8, (uint64_t)&v39);
  if (!v40)
  {
LABEL_37:
    re::DynamicArray<re::DynamicString>::deinit((uint64_t)&v39);
    *(_BYTE *)a5 = 1;
    if (!v8)
      return re::Result<re::SharedPtr<re::RealityFileWriter::AssetInfo>,re::WrappedError>::~Result((uint64_t)v43);
LABEL_38:

    return re::Result<re::SharedPtr<re::RealityFileWriter::AssetInfo>,re::WrappedError>::~Result((uint64_t)v43);
  }
  v10 = v42;
  v11 = 32 * v40;
  while (1)
  {
    re::DynamicString::rfind((uint64_t)v10, 46, v37);
    if (v37[0])
    {
      v12 = (*((_BYTE *)v10 + 8) & 1) != 0
          ? (re::DynamicString *)*((_QWORD *)v10 + 2)
          : (re::DynamicString *)((char *)v10 + 9);
      v13 = v38;
      if (!strcmp((const char *)v12 + v38, ".ktx"))
      {
        re::DynamicString::rfind((uint64_t)v10, 46, v13, (uint64_t)v35);
        if (v35[0])
        {
          v14 = *((_QWORD *)v10 + 1);
          if ((v14 & 1) != 0)
            v15 = (const char *)*((_QWORD *)v10 + 2);
          else
            v15 = (char *)v10 + 9;
          v16 = v36;
          v17 = strncmp(v15, "assets/", 7uLL);
          v18 = v16 - 7;
          if (v17)
            v18 = v16;
          v19 = 7;
          if (v17)
            v19 = 0;
          if (!strncmp(&v15[v19], v7, v18 - 1))
          {
            v20 = (v14 & 1) != 0 ? (char *)*((_QWORD *)v10 + 2) : (char *)v10 + 9;
            re::RealityArchive::newDataByLoadingEntryWithName((re::RealityArchive *)v8, v20, (uint64_t)v32);
            v21 = v32[0];
            if (v32[0])
            {
              v22 = v33;
              v29 = v22;
              re::TextureAssetLoader::injectMipsFromKTX(*(re::TextureAssetLoader **)(a2 + 24), a3, &v29);

            }
            else
            {
              re::DynamicString::DynamicString((re::DynamicString *)&v29, (const re::DynamicString *)&v33);
              *(_BYTE *)a5 = 0;
              *(_QWORD *)(a5 + 8) = v29;
              *(_QWORD *)(a5 + 32) = v31;
              *(_OWORD *)(a5 + 16) = v30;
            }
            if (!v32[0] && v33 && (v34 & 1) != 0)
              (*(void (**)(void))(*(_QWORD *)v33 + 40))();
            if (!v21)
              break;
          }
        }
      }
    }
    v10 = (re::DynamicString *)((char *)v10 + 32);
    v11 -= 32;
    if (!v11)
      goto LABEL_37;
  }
  re::DynamicArray<re::DynamicString>::deinit((uint64_t)&v39);
  if (v8)
    goto LABEL_38;
  return re::Result<re::SharedPtr<re::RealityFileWriter::AssetInfo>,re::WrappedError>::~Result((uint64_t)v43);
}

uint64_t re::Result<re::TextureData,re::DynamicString>::~Result(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  _OWORD *v4;
  char v6;

  if (*(_BYTE *)a1)
  {

    v2 = *(unsigned int *)(a1 + 96);
    if ((_DWORD)v2 != -1)
      ((void (*)(char *, uint64_t))*(&__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8nn180100IZNS0_6__dtorINS0_8__traitsIJN2NS9SharedPtrIN3MTL7TextureEEEN2re10CPUTextureEEEELNS0_6_TraitE1EE9__destroyB8nn180100EvEUlRT_E_JRSF_EEEDcOSG_DpOT0____fmatrix
                                             + v2))(&v6, a1 + 16);
    *(_DWORD *)(a1 + 96) = -1;
  }
  else
  {
    v4 = (_OWORD *)(a1 + 8);
    v3 = *(_QWORD *)(a1 + 8);
    if (v3)
    {
      if ((*(_BYTE *)(a1 + 16) & 1) != 0)
        (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v3 + 40))(v3, *(_QWORD *)(a1 + 24));
      *v4 = 0u;
      *(_OWORD *)(a1 + 24) = 0u;
    }
  }
  return a1;
}

double re::HashTable<re::DynamicString,std::variant<re::DynamicString,re::Data,unsigned long>,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::add<re::DynamicString>(uint64_t a1, const re::DynamicString *a2, _QWORD *a3)
{
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  double result;
  unsigned int v12;
  unsigned int v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char v22;

  v6 = re::Hash<re::DynamicString>::operator()((uint64_t)&v22, (uint64_t)a2);
  v7 = v6;
  if (!*(_QWORD *)a1)
  {
    LODWORD(v8) = 0;
    goto LABEL_8;
  }
  v8 = v6 % *(unsigned int *)(a1 + 24);
  v9 = *(unsigned int *)(*(_QWORD *)(a1 + 8) + 4 * v8);
  if ((_DWORD)v9 == 0x7FFFFFFF)
  {
LABEL_8:
    v12 = *(_DWORD *)(a1 + 36);
    if (v12 == 0x7FFFFFFF)
    {
      v12 = *(_DWORD *)(a1 + 32);
      v13 = v12;
      if (v12 == *(_DWORD *)(a1 + 24))
      {
        re::HashTable<re::DynamicString,std::variant<re::DynamicString,re::Data,unsigned long>,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::setCapacity(a1, 2 * *(_DWORD *)(a1 + 28));
        LODWORD(v8) = v7 % *(unsigned int *)(a1 + 24);
        v13 = *(_DWORD *)(a1 + 32);
      }
      *(_DWORD *)(a1 + 32) = v13 + 1;
      v14 = *(_QWORD *)(a1 + 16);
      v15 = *(_DWORD *)(v14 + 88 * v12 + 8);
    }
    else
    {
      v14 = *(_QWORD *)(a1 + 16);
      v15 = *(_DWORD *)(v14 + 88 * v12 + 8);
      *(_DWORD *)(a1 + 36) = v15 & 0x7FFFFFFF;
    }
    *(_DWORD *)(v14 + 88 * v12 + 8) = v15 | 0x80000000;
    v16 = 88 * v12;
    *(_DWORD *)(*(_QWORD *)(a1 + 16) + v16 + 8) = *(_DWORD *)(*(_QWORD *)(a1 + 16) + v16 + 8) & 0x80000000 | *(_DWORD *)(*(_QWORD *)(a1 + 8) + 4 * v8);
    *(_QWORD *)(*(_QWORD *)(a1 + 16) + v16) = v7;
    re::DynamicString::DynamicString((re::DynamicString *)(*(_QWORD *)(a1 + 16) + v16 + 16), a2);
    v17 = *(_QWORD *)(a1 + 16) + 88 * v12;
    result = 0.0;
    *(_OWORD *)(v17 + 48) = 0u;
    *(_OWORD *)(v17 + 64) = 0u;
    *(_QWORD *)(v17 + 72) = a3[3];
    v18 = a3[1];
    *(_QWORD *)(v17 + 48) = *a3;
    *a3 = 0;
    v19 = a3[2];
    a3[3] = 0;
    v21 = *(_QWORD *)(v17 + 56);
    v20 = *(_QWORD *)(v17 + 64);
    *(_QWORD *)(v17 + 56) = v18;
    *(_QWORD *)(v17 + 64) = v19;
    a3[1] = v21;
    a3[2] = v20;
    *(_DWORD *)(v17 + 80) = 0;
    *(_DWORD *)(*(_QWORD *)(a1 + 8) + 4 * v8) = v12;
    ++*(_DWORD *)(a1 + 28);
    ++*(_DWORD *)(a1 + 40);
    return result;
  }
  v10 = *(_QWORD *)(a1 + 16);
  while (!re::DynamicString::operator==(v10 + 88 * v9 + 16, (uint64_t)a2))
  {
    v9 = *(_DWORD *)(v10 + 88 * v9 + 8) & 0x7FFFFFFF;
    if (v9 == 0x7FFFFFFF)
      goto LABEL_8;
  }
  return result;
}

void std::__function::__func<re::TextureAssetLoader::createRuntimeData(void *,re::SeekableInputStream *,int,re::HashTable<re::DynamicString,std::variant<re::DynamicString,re::Data,unsigned long>,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false> const*)::$_0,std::allocator<re::TextureAssetLoader::createRuntimeData(void *,re::SeekableInputStream *,int,re::HashTable<re::DynamicString,std::variant<re::DynamicString,re::Data,unsigned long>,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false> const*)::$_0>,void ()(void)>::~__func()
{
  JUMPOUT(0x2276933B8);
}

_QWORD *std::__function::__func<re::TextureAssetLoader::createRuntimeData(void *,re::SeekableInputStream *,int,re::HashTable<re::DynamicString,std::variant<re::DynamicString,re::Data,unsigned long>,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false> const*)::$_0,std::allocator<re::TextureAssetLoader::createRuntimeData(void *,re::SeekableInputStream *,int,re::HashTable<re::DynamicString,std::variant<re::DynamicString,re::Data,unsigned long>,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false> const*)::$_0>,void ()(void)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_24ED36D30;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<re::TextureAssetLoader::createRuntimeData(void *,re::SeekableInputStream *,int,re::HashTable<re::DynamicString,std::variant<re::DynamicString,re::Data,unsigned long>,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false> const*)::$_0,std::allocator<re::TextureAssetLoader::createRuntimeData(void *,re::SeekableInputStream *,int,re::HashTable<re::DynamicString,std::variant<re::DynamicString,re::Data,unsigned long>,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false> const*)::$_0>,void ()(void)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_24ED36D30;
  a2[1] = v2;
  return result;
}

re *std::__function::__func<re::TextureAssetLoader::createRuntimeData(void *,re::SeekableInputStream *,int,re::HashTable<re::DynamicString,std::variant<re::DynamicString,re::Data,unsigned long>,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false> const*)::$_0,std::allocator<re::TextureAssetLoader::createRuntimeData(void *,re::SeekableInputStream *,int,re::HashTable<re::DynamicString,std::variant<re::DynamicString,re::Data,unsigned long>,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false> const*)::$_0>,void ()(void)>::operator()(re *result)
{
  void (***v1)(_QWORD);
  re *v2;
  uint64_t v3;

  v1 = (void (***)(_QWORD))**((_QWORD **)result + 1);
  if (v1)
  {
    v2 = result;
    v3 = re::globalAllocators(result)[2];
    (**v1)(v1);
    result = (re *)(*(uint64_t (**)(uint64_t, void (***)(_QWORD)))(*(_QWORD *)v3 + 40))(v3, v1);
    **((_QWORD **)v2 + 1) = 0;
  }
  return result;
}

uint64_t std::__function::__func<re::TextureAssetLoader::createRuntimeData(void *,re::SeekableInputStream *,int,re::HashTable<re::DynamicString,std::variant<re::DynamicString,re::Data,unsigned long>,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false> const*)::$_0,std::allocator<re::TextureAssetLoader::createRuntimeData(void *,re::SeekableInputStream *,int,re::HashTable<re::DynamicString,std::variant<re::DynamicString,re::Data,unsigned long>,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false> const*)::$_0>,void ()(void)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<re::TextureAssetLoader::createRuntimeData(void *,re::SeekableInputStream *,int,re::HashTable<re::DynamicString,std::variant<re::DynamicString,re::Data,unsigned long>,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false> const*)::$_0,std::allocator<re::TextureAssetLoader::createRuntimeData(void *,re::SeekableInputStream *,int,re::HashTable<re::DynamicString,std::variant<re::DynamicString,re::Data,unsigned long>,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false> const*)::$_0>,void ()(void)>::target_type()
{
}

uint64_t re::HashTable<re::DynamicString,std::variant<re::DynamicString,re::Data>,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::addInternal<re::Data&>(uint64_t a1, const re::DynamicString *a2, int a3, id *a4)
{
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unsigned int v13;
  unsigned int v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char v27;
  char v28;
  char v29;

  v8 = re::Hash<re::DynamicString>::operator()((uint64_t)&v27, (uint64_t)a2);
  v9 = v8;
  if (!*(_QWORD *)a1)
  {
    LODWORD(v10) = 0;
    goto LABEL_8;
  }
  v10 = v8 % *(unsigned int *)(a1 + 24);
  v11 = *(unsigned int *)(*(_QWORD *)(a1 + 8) + 4 * v10);
  if ((_DWORD)v11 == 0x7FFFFFFF)
  {
LABEL_8:
    v13 = *(_DWORD *)(a1 + 36);
    if (v13 == 0x7FFFFFFF)
    {
      v13 = *(_DWORD *)(a1 + 32);
      v14 = v13;
      if (v13 == *(_DWORD *)(a1 + 24))
      {
        re::HashTable<re::DynamicString,std::variant<re::DynamicString,re::Data>,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::setCapacity(a1, 2 * *(_DWORD *)(a1 + 28));
        LODWORD(v10) = v9 % *(unsigned int *)(a1 + 24);
        v14 = *(_DWORD *)(a1 + 32);
      }
      *(_DWORD *)(a1 + 32) = v14 + 1;
      v15 = *(_QWORD *)(a1 + 16);
      v16 = *(_DWORD *)(v15 + 88 * v13 + 8);
    }
    else
    {
      v15 = *(_QWORD *)(a1 + 16);
      v16 = *(_DWORD *)(v15 + 88 * v13 + 8);
      *(_DWORD *)(a1 + 36) = v16 & 0x7FFFFFFF;
    }
    *(_DWORD *)(v15 + 88 * v13 + 8) = v16 | 0x80000000;
    v17 = 88 * v13;
    *(_DWORD *)(*(_QWORD *)(a1 + 16) + v17 + 8) = *(_DWORD *)(*(_QWORD *)(a1 + 16) + v17 + 8) & 0x80000000 | *(_DWORD *)(*(_QWORD *)(a1 + 8) + 4 * v10);
    *(_QWORD *)(*(_QWORD *)(a1 + 16) + v17) = v9;
    re::DynamicString::DynamicString((re::DynamicString *)(*(_QWORD *)(a1 + 16) + v17 + 16), a2);
    v18 = *(_QWORD *)(a1 + 16) + 88 * v13;
    *(_QWORD *)(v18 + 48) = *a4;
    *(_DWORD *)(v18 + 80) = 1;
    *(_DWORD *)(*(_QWORD *)(a1 + 8) + 4 * v10) = v13;
    ++*(_DWORD *)(a1 + 28);
    ++*(_DWORD *)(a1 + 40);
    v19 = *(_QWORD *)(a1 + 16) + 88 * v13;
    return v19 + 48;
  }
  v12 = *(_QWORD *)(a1 + 16);
  while (!re::DynamicString::operator==(v12 + 88 * v11 + 16, (uint64_t)a2))
  {
    v11 = *(_DWORD *)(v12 + 88 * v11 + 8) & 0x7FFFFFFF;
    if (v11 == 0x7FFFFFFF)
      goto LABEL_8;
  }
  switch(a3)
  {
    case 0:
    case 1:
      v19 = v12 + 88 * v11;
      return v19 + 48;
    case 2:
      v21 = v12 + 88 * v11;
      v22 = v21 + 48;
      v23 = *(unsigned int *)(v21 + 80);
      if ((_DWORD)v23 != -1)
        ((void (*)(char *, uint64_t))off_24ED36DA0[v23])(&v28, v22);
      goto LABEL_21;
    case 3:
      v24 = v12 + 88 * v11;
      v22 = v24 + 48;
      v25 = *(unsigned int *)(v24 + 80);
      if ((_DWORD)v25 != -1)
        ((void (*)(char *, uint64_t))off_24ED36DA0[v25])(&v29, v22);
LABEL_21:
      *(_DWORD *)(v22 + 32) = -1;
      v26 = *(_QWORD *)(a1 + 16) + 88 * v11;
      *(_QWORD *)(v26 + 48) = *a4;
      *(_DWORD *)(v26 + 80) = 1;
      ++*(_DWORD *)(a1 + 40);
      v19 = *(_QWORD *)(a1 + 16) + 88 * v11;
      break;
    default:
      goto LABEL_8;
  }
  return v19 + 48;
}

uint64_t re::Optional<re::TextureData>::~Optional(uint64_t a1)
{
  uint64_t v2;
  char v4;

  if (*(_BYTE *)a1)
  {

    v2 = *(unsigned int *)(a1 + 96);
    if ((_DWORD)v2 != -1)
      ((void (*)(char *, uint64_t))*(&__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8nn180100IZNS0_6__dtorINS0_8__traitsIJN2NS9SharedPtrIN3MTL7TextureEEEN2re10CPUTextureEEEELNS0_6_TraitE1EE9__destroyB8nn180100EvEUlRT_E_JRSF_EEEDcOSG_DpOT0____fmatrix
                                             + v2))(&v4, a1 + 16);
    *(_DWORD *)(a1 + 96) = -1;
  }
  return a1;
}

void sub_22530CDCC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, objc_super a9)
{
  void *v9;

  a9.super_class = (Class)REAudioPayload;
  -[_Unwind_Exception dealloc](&a9, sel_dealloc);
  _Unwind_Resume(a1);
}

void sub_22530CFEC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

void sub_22530D21C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

void sub_22530D3C4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_22530D9C0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

void sub_22530DE38(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  v4 = v3;

  _Unwind_Resume(a1);
}

void sub_22530E0C8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_22530E36C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_22530E4D0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  v4 = v3;

  _Unwind_Resume(a1);
}

void re::AudioPayload::makeBufferPayloadWithProperties(void *a1@<X0>, void *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, unsigned int a5@<W4>, void *a6@<X5>, char a7@<W6>, int a8@<W7>, REAudioPayload **a9@<X8>, float a10@<S0>, double a11@<D1>, uint64_t a12, int a13, uint64_t a14)
{
  id v22;
  id v23;
  REAudioPayload *v24;
  double v25;
  REAudioPayload *v26;
  uint64_t v27;
  uint64_t v28;
  id v31;

  v31 = a1;
  v22 = a2;
  v23 = a6;
  v24 = [REAudioPayload alloc];
  LODWORD(v28) = a13;
  HIDWORD(v27) = a8;
  LOBYTE(v27) = a7;
  *(float *)&v25 = a10;
  v26 = -[REAudioPayload initWithBuffer:format:length:inputMode:referenceLevel:loopCount:mixGroupName:streaming:normalizationMode:calibrationMode:calibrationLevel:layoutTag:taskToken:audioAssetID:](v24, "initWithBuffer:format:length:inputMode:referenceLevel:loopCount:mixGroupName:streaming:normalizationMode:calibrationMode:calibrationLevel:layoutTag:taskToken:audioAssetID:", v31, v22, a3, a4, a5, v23, v25, a11, v27, a12, v28, a14);
  *a9 = v26;

}

void sub_22530E644(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, id a16)
{
  void *v16;
  void *v17;

  _Unwind_Resume(a1);
}

void re::AudioPayload::makeFilePayloadWithProperties(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, void *a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, unsigned int a7@<W6>, unsigned int a8@<W7>, REAudioPayload **a9@<X8>, float a10@<S0>, double a11@<D1>, double a12@<D2>, int a13, uint64_t a14)
{
  REAudioPayload *v25;
  double v26;
  REAudioPayload *v27;
  uint64_t v28;
  id v29;

  v29 = a4;
  v25 = [REAudioPayload alloc];
  LODWORD(v28) = a13;
  *(float *)&v26 = a10;
  v27 = -[REAudioPayload initWithFilePath:inputMode:referenceLevel:loopCount:mixGroupName:streaming:normalizationMode:calibrationMode:calibrationLevel:layoutTag:taskToken:targetLUFS:audioAssetID:](v25, "initWithFilePath:inputMode:referenceLevel:loopCount:mixGroupName:streaming:normalizationMode:calibrationMode:calibrationLevel:layoutTag:taskToken:targetLUFS:audioAssetID:", a1, a2, a3, v29, a5, a6, v26, a11, a12, __PAIR64__(a8, a7), v28, a14);
  *a9 = v27;

}

void sub_22530E73C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, id a12)
{

  _Unwind_Resume(a1);
}

void re::AudioPayload::makeFileBufferPayloadWithProperties(void *a1@<X0>, void *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, unsigned int a5@<W4>, unsigned int a6@<W5>, void *a7@<X6>, char a8@<W7>, REAudioPayload **a9@<X8>, float a10@<S0>, double a11@<D1>, int a12, unsigned int a13, unsigned int a14, int a15, uint64_t a16)
{
  id v23;
  id v24;
  REAudioPayload *v25;
  double v26;
  REAudioPayload *v27;
  uint64_t v28;
  uint64_t v29;
  id v33;

  v33 = a1;
  v23 = a2;
  v24 = a7;
  v25 = [REAudioPayload alloc];
  LODWORD(v29) = a15;
  HIDWORD(v28) = a12;
  LOBYTE(v28) = a8;
  *(float *)&v26 = a10;
  v27 = -[REAudioPayload initWithFileBuffer:format:length:bufferSize:inputMode:referenceLevel:loopCount:mixGroupName:streaming:normalizationMode:calibrationMode:calibrationLevel:layoutTag:taskToken:audioAssetID:](v25, "initWithFileBuffer:format:length:bufferSize:inputMode:referenceLevel:loopCount:mixGroupName:streaming:normalizationMode:calibrationMode:calibrationLevel:layoutTag:taskToken:audioAssetID:", v33, v23, a3, a4, a5, a6, v26, a11, v24, v28, __PAIR64__(a14, a13), v29, a16);
  *a9 = v27;

}

void sub_22530E83C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, id a16)
{
  void *v16;
  void *v17;

  _Unwind_Resume(a1);
}

void re::AudioPayload::dynamicCast(id *this@<X0>, _QWORD *a2@<X8>)
{
  char isKindOfClass;
  void *v5;
  id v6;
  id v7;

  v7 = *this;
  objc_opt_class();
  isKindOfClass = objc_opt_isKindOfClass();
  v5 = v7;
  if ((isKindOfClass & 1) != 0)
  {
    v6 = v7;
    v5 = v7;
  }
  else
  {
    v6 = 0;
  }
  *a2 = v6;

}

void sub_22530E8C0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

BOOL re::AssetCompatibilityManager::isScene(re::AssetCompatibilityManager *this, const re::AssetHandle *a2)
{
  uint64_t v2;
  uint64_t *v3;

  v2 = *((_QWORD *)a2 + 1);
  if (v2)
    v3 = *(uint64_t **)(v2 + 264);
  else
    v3 = 0;
  return v3 == re::SceneAsset::assetType(this);
}

BOOL re::AssetCompatibilityManager::sceneAssetNeedsCopyForWriting(re::AssetCompatibilityManager *this, const re::AssetHandle *a2, uint64_t a3)
{
  return re::AssetCompatibility::sceneAssetNeedsCopyForWriting(a2, a3);
}

uint64_t *re::AssetCompatibilityManager::sceneAssetCopyForWriting@<X0>(const re::AssetHandle *a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X8>)
{
  return re::AssetCompatibility::sceneAssetCopyForWriting(a1, a2, a3);
}

uint64_t *re::AssetCompatibilityManager::createModifiedAssetPointerForWritingIfNecessary@<X0>(const re::internal::AssetEntry *a1@<X1>, const re::AssetManager *a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X4>, uint64_t a5@<X8>)
{
  return re::AssetCompatibility::createModifiedAssetPointerForWritingIfNecessary(a1, a2, a3, a4, a5);
}

uint64_t *re::AssetCompatibilityManager::createModifiedAssetPointerForWritingIfNecessaryFromAssetHandle@<X0>(const re::AssetHandle *a1@<X1>, const re::AssetHandle *a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X8>)
{
  return re::AssetCompatibility::createModifiedAssetPointerForWritingIfNecessaryFromAssetHandle(a1, a2, a3, a4);
}

BOOL re::AssetCompatibilityManager::isSceneAssetCompatibleWithVersion(re::AssetCompatibilityManager *this, const re::AssetHandle *a2, const re::AssetHandle *a3)
{
  return re::AssetCompatibility::isSceneAssetCompatibleWithVersion(a2, a3);
}

uint64_t *re::AssetCompatibilityManager::sceneAssetCopyCompatibilityVariant(re::AssetCompatibilityManager *this, const re::AssetHandle *a2, uint64_t a3)
{
  return re::AssetCompatibility::sceneAssetCopyCompatibilityVariant(a2, a3);
}

uint64_t re::AssetCompatibilityManager::isAssetAvailableForVersion(re::SkeletonAsset *a1, re::SceneAsset *a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t *v6;

  v5 = *((_QWORD *)a2 + 1);
  if (v5)
  {
    v6 = *(uint64_t **)(v5 + 264);
    if (v6 == re::SkeletonAsset::assetType(a1))
      return 1;
  }
  else
  {
    re::SkeletonAsset::assetType(a1);
  }
  return re::TypeAvailabilityUtilities::checkAssetIsAvailableForMajorVersion(a2, a3, 0);
}

void re::AssetCompatibilityManager::isAssetAllowedInRealityFile(const re::AssetHandle *a1@<X1>, uint64_t a2@<X8>)
{
  uint64_t v3;
  re::TypeAvailabilityUtilities *v4;

  v3 = *((_QWORD *)a1 + 1);
  if (v3)
    v4 = *(re::TypeAvailabilityUtilities **)(v3 + 264);
  else
    v4 = 0;
  re::TypeAvailabilityUtilities::isAssetAllowedInRealityFile(v4, a2);
}

uint64_t re::AssetCompatibilityManager::convertToRealityKitRelease(uint64_t a1, uint64_t a2)
{
  return re::TypeAvailabilityUtilities::convertToRealityKitRelease(a2);
}

uint64_t re::AssetCompatibilityManager::emitAssetTypeBeginSignpost(re::AssetCompatibilityManager *this, const re::AssetType *a2)
{
  uint64_t *v3;
  uint64_t *v4;
  uint64_t result;

  v3 = re::MeshAsset::assetType(this);
  if (v3 == (uint64_t *)a2)
  {
    result = re::internal::enableSignposts(0, 0);
    if ((result & 1) == 0)
      return result;
    return kdebug_trace();
  }
  v4 = re::MaterialAsset::assetType((re::MaterialAsset *)v3);
  if (v4 == (uint64_t *)a2)
  {
    result = re::internal::enableSignposts(0, 0);
    if ((result & 1) == 0)
      return result;
    return kdebug_trace();
  }
  result = (uint64_t)re::TextureAsset::assetType((re::TextureAsset *)v4);
  if ((const re::AssetType *)result == a2)
  {
    result = re::internal::enableSignposts(0, 0);
    if ((_DWORD)result)
      return kdebug_trace();
  }
  return result;
}

uint64_t re::AssetCompatibilityManager::emitAssetTypeEndSignpost(re::AssetCompatibilityManager *this, const re::AssetType *a2)
{
  uint64_t *v3;
  uint64_t *v4;
  uint64_t result;

  v3 = re::MeshAsset::assetType(this);
  if (v3 == (uint64_t *)a2)
  {
    result = re::internal::enableSignposts(0, 0);
    if ((result & 1) == 0)
      return result;
    return kdebug_trace();
  }
  v4 = re::MaterialAsset::assetType((re::MaterialAsset *)v3);
  if (v4 == (uint64_t *)a2)
  {
    result = re::internal::enableSignposts(0, 0);
    if ((result & 1) == 0)
      return result;
    return kdebug_trace();
  }
  result = (uint64_t)re::TextureAsset::assetType((re::TextureAsset *)v4);
  if ((const re::AssetType *)result == a2)
  {
    result = re::internal::enableSignposts(0, 0);
    if ((_DWORD)result)
      return kdebug_trace();
  }
  return result;
}

void re::SceneAssetRemapperImplementation::remapSceneAsset(re::SceneAssetRemapperImplementation *this@<X0>, const re::AssetHandle *a2@<X1>, const re::DynamicString *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v8;
  AssetService *v9;
  re *v10;
  uint64_t *v11;
  uint64_t v12;
  const re::AssetHandle *v13;
  uint64_t v14;
  char v15;
  uint64_t v16;
  uint64_t v17;
  BOOL v18;
  re *v19;
  uint64_t *v20;
  uint64_t v21;
  re::SceneAsset *v22;
  uint64_t *v23;
  unsigned __int128 v24;
  uint64_t v25;
  id v26;
  uint64_t v27;
  id v28;
  unsigned __int128 v29;
  uint64_t v30;
  uint64_t v31;
  unsigned __int128 v32;
  uint64_t v33;
  uint64_t v34;
  StringID *v35;
  uint64_t v36;

  v36 = *MEMORY[0x24BDAC8D0];
  re::AssetHandle::AssetHandle((re::AssetHandle *)&v29, a2);
  if (!*((_QWORD *)this + 5))
  {
LABEL_16:
    re::AssetHandle::AssetHandle((re::AssetHandle *)&v32, (const re::AssetHandle *)&v29);
    *(_BYTE *)a4 = 1;
    *(_OWORD *)(a4 + 8) = v32;
    v32 = 0uLL;
    *(_QWORD *)(a4 + 24) = v33;
    v33 = 0;
    re::AssetHandle::~AssetHandle((re::AssetHandle *)&v32);
    goto LABEL_17;
  }
  v8 = *((_QWORD *)a2 + 1);
  if (v8)
    v9 = *(AssetService **)(v8 + 24);
  else
    v9 = 0;
  v10 = re::StringID::StringID((re::StringID *)&v32, a3);
  v11 = re::globalAllocators(v10);
  v12 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v11[2] + 32))(v11[2], 384, 8);
  re::ecs2::Scene::Scene((re::ecs2::Scene *)v12, (const StringID *)&v32);
  re::StringID::destroyString((re::StringID *)&v32);
  re::ecs2::ECSSerialization::loadFromAsset((re::ecs2::ECSSerialization *)v12, v9, (AssetService *)a2, v13);
  v14 = *((_QWORD *)this + 5);
  if (!v14)
  {
LABEL_14:
    if (v12)

    goto LABEL_16;
  }
  v15 = 0;
  v16 = *((_QWORD *)this + 7);
  v17 = 40 * v14;
  while (1)
  {
    v34 = *(_QWORD *)(v16 + 24);
    v35 = 0;
    re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Scene *,RESceneDidAddEvent const&)>::operator=<24ul>((uint64_t)&v32, v16);
    v31 = v12;
    (*(void (**)(uint64_t *__return_ptr, StringID *, uint64_t *))(*(_QWORD *)&v35->var0 + 16))(&v27, v35, &v31);
    v18 = (_BYTE)v27 != 0;
    if (v28)
      break;
    v19 = (re *)v35;
    if (v35)
    {
      v19 = (re *)(**(uint64_t (***)(StringID *))&v35->var0)(v35);
      if (v35 != (StringID *)&v32)
        v19 = (re *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v34 + 40))(v34);
    }
    v15 |= v18;
    v16 += 40;
    v17 -= 40;
    if (!v17)
    {
      if ((v15 & 1) != 0)
      {
        v20 = re::globalAllocators(v19);
        v21 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v20[2] + 32))(v20[2], 40, 8);
        *(_OWORD *)v21 = 0u;
        *(_OWORD *)(v21 + 16) = 0u;
        *(_QWORD *)(v21 + 32) = 0;
        re::ecs2::ECSSerialization::saveIntoSceneAssetData((re *)v12, v21, 1);
        v23 = re::SceneAsset::assetType(v22);
        (*((void (**)(unsigned __int128 *__return_ptr, AssetService *, uint64_t, uint64_t *, _QWORD, _QWORD, _QWORD))v9->var0
         + 52))(&v32, v9, v21, v23, 0, 0, 0);
        v24 = v29;
        v29 = v32;
        v32 = v24;
        v25 = v30;
        v30 = v33;
        v33 = v25;
        re::AssetHandle::~AssetHandle((re::AssetHandle *)&v32);
      }
      goto LABEL_14;
    }
  }
  v26 = v28;
  *(_BYTE *)a4 = 0;
  *(_QWORD *)(a4 + 8) = v26;

  if (v35)
  {
    (**(void (***)(StringID *))&v35->var0)(v35);
    if (v35 != (StringID *)&v32)
      (*(void (**)(uint64_t))(*(_QWORD *)v34 + 40))(v34);
  }
  if (v12)

LABEL_17:
  re::AssetHandle::~AssetHandle((re::AssetHandle *)&v29);
}

void re::SceneAssetRemapperImplementation::~SceneAssetRemapperImplementation(re::SceneAssetRemapperImplementation *this)
{
  *(_QWORD *)this = &off_24ED36E58;
  re::DynamicArray<re::Function<re::SceneAssetRemapperImplementation::SceneRemappingResult ()(re::ecs2::Scene *)>>::deinit((uint64_t)this + 24);
  *(_QWORD *)this = &off_24ED426B8;
  objc_destructInstance((char *)this + 8);
}

{
  *(_QWORD *)this = &off_24ED36E58;
  re::DynamicArray<re::Function<re::SceneAssetRemapperImplementation::SceneRemappingResult ()(re::ecs2::Scene *)>>::deinit((uint64_t)this + 24);
  *(_QWORD *)this = &off_24ED426B8;
  objc_destructInstance((char *)this + 8);
  JUMPOUT(0x2276933B8);
}

uint64_t re::DynamicArray<re::Function<re::SceneAssetRemapperImplementation::SceneRemappingResult ()(re::ecs2::Scene *)>>::deinit(uint64_t a1)
{
  uint64_t result;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  result = *(_QWORD *)a1;
  if (result)
  {
    v3 = *(_QWORD *)(a1 + 32);
    if (v3)
    {
      v4 = *(_QWORD *)(a1 + 16);
      if (v4)
      {
        v5 = 40 * v4;
        do
        {
          re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Scene *,RESceneDidAddEvent const&)>::destroyCallable(v3);
          v3 += 40;
          v5 -= 40;
        }
        while (v5);
        result = *(_QWORD *)a1;
        v3 = *(_QWORD *)(a1 + 32);
      }
      result = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)result + 40))(result, v3);
    }
    *(_QWORD *)(a1 + 32) = 0;
    *(_QWORD *)(a1 + 8) = 0;
    *(_QWORD *)(a1 + 16) = 0;
    *(_QWORD *)a1 = 0;
    ++*(_DWORD *)(a1 + 24);
  }
  return result;
}

uint64_t re::AudioAssetLoadStrategy_Host::createRuntimeData(re::AudioAssetLoadStrategy_Base *a1, re::AudioFileAsset *a2, uint64_t a3, uint64_t a4, AudioSceneService *a5)
{
  id v9;
  uint64_t result;
  id v11;

  v9 = *(id *)(*((_QWORD *)a2 + 1) + 16);
  if (v9 || (v9 = *(id *)(*((_QWORD *)a2 + 1) + 176)) != 0)
  {

LABEL_4:
    re::AudioFileAsset::completeLoad(a2, a5);
    return 1;
  }
  v11 = *(id *)(*((_QWORD *)a2 + 1) + 184);

  if (v11)
    goto LABEL_4;
  if (!a3)
  {
    if (!(*(uint64_t (**)(uint64_t))(*(_QWORD *)(*((_QWORD *)a2 + 1) + 48) + 64))(*((_QWORD *)a2 + 1) + 48))
    {
      result = re::AudioAssetLoadStrategy_Base::createRuntimeDataWithAudioFile(a1, a2);
      if ((_DWORD)result)
        goto LABEL_4;
      return result;
    }
    a3 = *((_QWORD *)a2 + 1) + 48;
  }
  if (((*(uint64_t (**)(re::AudioAssetLoadStrategy_Base *, uint64_t, re::AudioFileAsset *))(*(_QWORD *)a1 + 40))(a1, a3, a2) & 1) != 0)goto LABEL_4;
  return 0;
}

void re::AudioAssetLoadStrategy_Host::unregisterAsset(re::AudioAssetLoadStrategy_Host *this, re::AudioFileAsset *a2, AudioSceneService *a3)
{
  NSObject *v5;
  uint64_t v6;
  int v7;
  uint64_t v8;
  uint64_t v9;

  v9 = *MEMORY[0x24BDAC8D0];
  v5 = (id)*re::audioLogObjects(this);
  if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
  {
    v6 = *(_QWORD *)(*((_QWORD *)a2 + 1) + 24);
    v7 = 134217984;
    v8 = v6;
    _os_log_impl(&dword_224FE9000, v5, OS_LOG_TYPE_DEFAULT, "[CoreRE] [AudioFileAssetLoader/Host] Unregistered audio asset: %llu", (uint8_t *)&v7, 0xCu);

  }
  else
  {

    if (!a2)
      return;
  }
  (*((void (**)(AudioSceneService *, _QWORD))a3->var0 + 23))(a3, *(_QWORD *)(*((_QWORD *)a2 + 1) + 24));
}

void re::AudioAssetLoadStrategy_Host::resourceDidUpdate(int a1, uint64_t a2, id *a3, uint64_t a4, uint64_t a5)
{
  _QWORD *v9;
  uint64_t v10;
  id v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD v14[3];
  _QWORD *v15;
  char v16;
  uint64_t v17;

  v17 = *MEMORY[0x24BDAC8D0];
  v12 = a5;
  v13 = a2;
  v11 = *a3;
  v14[0] = &off_24ED36F18;
  v14[1] = &v13;
  v14[2] = &v12;
  v15 = v14;
  v16 = 1;
  re::AudioAssetLoadStrategy_Base::resourceDidUpdate(a1, a2, &v11, a4, a5, (uint64_t)v14);
  if (v16)
  {
    v9 = v15;
    if (v15 == v14)
    {
      v10 = 4;
      v9 = v14;
      goto LABEL_6;
    }
    if (v15)
    {
      v10 = 5;
LABEL_6:
      (*(void (**)(void))(*v9 + 8 * v10))();
    }
  }

}

void sub_22530F1DC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, char *a16, char a17)
{
  char *v18;
  uint64_t v19;

  if (a17)
  {
    v18 = a16;
    if (a16 == &a13)
    {
      v19 = 4;
      v18 = &a13;
    }
    else
    {
      if (!a16)
        goto LABEL_7;
      v19 = 5;
    }
    (*(void (**)(void))(*(_QWORD *)v18 + 8 * v19))();
  }
LABEL_7:

  _Unwind_Resume(a1);
}

BOOL re::AudioAssetLoadStrategy_Host::createRuntimeDataWithSeekableInputStream(re::AudioAssetLoadStrategy_Host *this, re::SeekableInputStream *a2, re::AudioFileAsset *a3)
{
  int v6;
  unint64_t v7;
  re::SeekableInputStream *v8;
  uint64_t v9;
  void *v10;
  void *v11;
  re::audio *v12;
  AVAudioFormat *v13;
  re *v14;
  NSObject *v15;
  _BOOL8 v16;
  NSObject *v17;
  void *v18;
  double v19;
  double v20;
  void *v21;
  id v22;
  void *v23;
  uint64_t v24;
  unint64_t v25;
  uint8_t v27[16];
  uint8_t buf[16];

  if ((*(uint64_t (**)(uint64_t))(*(_QWORD *)(*((_QWORD *)a3 + 1) + 48) + 64))(*((_QWORD *)a3 + 1) + 48))
    *(_QWORD *)(*((_QWORD *)a3 + 1) + 160) = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(*((_QWORD *)a3 + 1)
                                                                                              + 48)
                                                                                  + 40))(*((_QWORD *)a3 + 1) + 48);
  v6 = *((unsigned __int8 *)a3 + 100);
  v7 = (*(uint64_t (**)(re::SeekableInputStream *))(*(_QWORD *)a2 + 64))(a2);
  if (v6)
  {
    v8 = (re::SeekableInputStream *)(*(uint64_t (**)(re::SeekableInputStream *))(*(_QWORD *)a2 + 72))(a2);
    v9 = 1;
  }
  else
  {
    v8 = a2;
    v9 = 0;
  }
  +[_REAudioFile audioFileWithStream:ownsStream:](_REAudioFile, "audioFileWithStream:ownsStream:", v8, v9);
  v10 = (void *)objc_claimAutoreleasedReturnValue();
  v11 = v10;
  if (v10)
  {
    objc_msgSend(v10, "processingFormat");
    v12 = (re::audio *)objc_claimAutoreleasedReturnValue();
    v14 = (re *)re::audio::layoutTagFromFormat(v12, v13);
    *((_DWORD *)a3 + 32) = (_DWORD)v14;
    if ((_DWORD)v14 == -65536)
    {
      v15 = *re::audioLogObjects(v14);
      if (os_log_type_enabled(v15, OS_LOG_TYPE_ERROR))
      {
        *(_WORD *)v27 = 0;
        _os_log_error_impl(&dword_224FE9000, v15, OS_LOG_TYPE_ERROR, "[CoreRE] [AudioFileAssetLoader/Host] Failed to load embedded audio due to missing channel layout.", v27, 2u);
      }
      v16 = 0;
    }
    else
    {
      objc_msgSend(v11, "fileFormat");
      v18 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v18, "sampleRate");
      v20 = v19;

      if (v20 != 48000.0)
      {
        v21 = (void *)objc_msgSend(objc_alloc(MEMORY[0x24BDB17E8]), "initWithLayoutTag:", *((unsigned int *)a3 + 32));
        v22 = objc_alloc(MEMORY[0x24BDB1818]);
        objc_msgSend(v11, "fileFormat");
        v23 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v23, "sampleRate");
        v24 = objc_msgSend(v22, "initStandardFormatWithSampleRate:channelLayout:", v21);

        v12 = (re::audio *)v24;
      }
      if (v6)
      {
        objc_storeStrong((id *)(*((_QWORD *)a3 + 1) + 8), v12);
        *((_QWORD *)a3 + 17) = objc_msgSend(v11, "getReaderFileLength");
        v25 = v7 / 0x64;
        if (v7 / 0x64 <= 0xC350)
          v25 = 50000;
        if ((*((_DWORD *)a3 + 33) + 1) <= 1)
          v25 += v7;
        *((_QWORD *)a3 + 20) = v25;
        objc_storeStrong(*((id **)a3 + 1), v11);
        v16 = 1;
      }
      else
      {
        v16 = re::AudioAssetLoadStrategy_Base::decodeSeekableStreamIntoPCMBuffer(this, a2, a3);
      }
    }

  }
  else
  {
    v17 = *re::audioLogObjects(0);
    if (os_log_type_enabled(v17, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      _os_log_error_impl(&dword_224FE9000, v17, OS_LOG_TYPE_ERROR, "[CoreRE] [AudioFileAssetLoader/Host] Failed to load embedded audio due to nil audio file.", buf, 2u);
    }
    v16 = 0;
  }

  return v16;
}

void sub_22530F4E4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void re::AudioAssetLoadStrategy_Host::~AudioAssetLoadStrategy_Host(re::AudioAssetLoadStrategy_Host *this)
{
  JUMPOUT(0x2276933B8);
}

void std::__function::__func<re::AudioAssetLoadStrategy_Host::resourceDidUpdate(re::AudioFileAsset *,re::SharedResourcePayload,re::AssetSerializationScheme *,re::AudioSceneService *)::$_0,std::allocator<re::AudioAssetLoadStrategy_Host::resourceDidUpdate(re::AudioFileAsset *,re::SharedResourcePayload,re::AssetSerializationScheme *,re::AudioSceneService *)::$_0>,void ()(void)>::~__func()
{
  JUMPOUT(0x2276933B8);
}

__n128 std::__function::__func<re::AudioAssetLoadStrategy_Host::resourceDidUpdate(re::AudioFileAsset *,re::SharedResourcePayload,re::AssetSerializationScheme *,re::AudioSceneService *)::$_0,std::allocator<re::AudioAssetLoadStrategy_Host::resourceDidUpdate(re::AudioFileAsset *,re::SharedResourcePayload,re::AssetSerializationScheme *,re::AudioSceneService *)::$_0>,void ()(void)>::__clone(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = &off_24ED36F18;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 std::__function::__func<re::AudioAssetLoadStrategy_Host::resourceDidUpdate(re::AudioFileAsset *,re::SharedResourcePayload,re::AssetSerializationScheme *,re::AudioSceneService *)::$_0,std::allocator<re::AudioAssetLoadStrategy_Host::resourceDidUpdate(re::AudioFileAsset *,re::SharedResourcePayload,re::AssetSerializationScheme *,re::AudioSceneService *)::$_0>,void ()(void)>::__clone(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_24ED36F18;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t std::__function::__func<re::AudioAssetLoadStrategy_Host::resourceDidUpdate(re::AudioFileAsset *,re::SharedResourcePayload,re::AssetSerializationScheme *,re::AudioSceneService *)::$_0,std::allocator<re::AudioAssetLoadStrategy_Host::resourceDidUpdate(re::AudioFileAsset *,re::SharedResourcePayload,re::AssetSerializationScheme *,re::AudioSceneService *)::$_0>,void ()(void)>::operator()(uint64_t result)
{
  if (*(_QWORD *)(*(_QWORD *)(**(_QWORD **)(result + 8) + 8) + 24))
    return (*(uint64_t (**)(_QWORD))(***(_QWORD ***)(result + 16) + 184))(**(_QWORD **)(result + 16));
  return result;
}

uint64_t std::__function::__func<re::AudioAssetLoadStrategy_Host::resourceDidUpdate(re::AudioFileAsset *,re::SharedResourcePayload,re::AssetSerializationScheme *,re::AudioSceneService *)::$_0,std::allocator<re::AudioAssetLoadStrategy_Host::resourceDidUpdate(re::AudioFileAsset *,re::SharedResourcePayload,re::AssetSerializationScheme *,re::AudioSceneService *)::$_0>,void ()(void)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<re::AudioAssetLoadStrategy_Host::resourceDidUpdate(re::AudioFileAsset *,re::SharedResourcePayload,re::AssetSerializationScheme *,re::AudioSceneService *)::$_0,std::allocator<re::AudioAssetLoadStrategy_Host::resourceDidUpdate(re::AudioFileAsset *,re::SharedResourcePayload,re::AssetSerializationScheme *,re::AudioSceneService *)::$_0>,void ()(void)>::target_type()
{
}

uint64_t *re::CGPerspectiveContextAsset::assetType(re::CGPerspectiveContextAsset *this)
{
  unsigned __int8 v1;

  {
    re::CGPerspectiveContextAsset::assetType(void)::type = (uint64_t)"CGPerspectiveContext";
    qword_255827620 = 0;
    re::AssetType::generateCompiledExtension((re::AssetType *)&re::CGPerspectiveContextAsset::assetType(void)::type);
  }
  return &re::CGPerspectiveContextAsset::assetType(void)::type;
}

void re::CGPerspectiveContextAsset::~CGPerspectiveContextAsset(re::CGPerspectiveContextAsset *this)
{
  const void *v2;
  int v3;
  uint64_t v4;

  v2 = (const void *)*((_QWORD *)this + 1);
  if (v2)
    CFRelease(v2);
  *((_QWORD *)this + 1) = 0;
  *(_DWORD *)this = -1;
  *((_QWORD *)this + 4) = 0;
  v3 = *((_DWORD *)this + 10) + 1;
  *((_DWORD *)this + 10) = v3;
  v4 = *((_QWORD *)this + 2);
  if (v4)
  {
    if (*((_QWORD *)this + 6))
    {
      (*(void (**)(uint64_t))(*(_QWORD *)v4 + 40))(v4);
      v3 = *((_DWORD *)this + 10);
    }
    *((_QWORD *)this + 6) = 0;
    *((_QWORD *)this + 3) = 0;
    *((_QWORD *)this + 4) = 0;
    *((_QWORD *)this + 2) = 0;
    *((_DWORD *)this + 10) = v3 + 1;
  }
}

uint64_t re::CGPerspectiveContextAssetLoader::unloadAsset(re::CGPerspectiveContextAssetLoader *this, _QWORD *a2)
{
  void *v3;
  uint64_t v4;

  v3 = (void *)a2[1];
  if (v3)
    CFRelease(v3);
  a2[1] = 0;
  *(_DWORD *)a2 = -1;
  a2[4] = 0;
  ++*((_DWORD *)a2 + 10);
  v4 = re::globalAllocators((re *)v3)[2];
  re::CGPerspectiveContextAsset::~CGPerspectiveContextAsset((re::CGPerspectiveContextAsset *)a2);
  return (*(uint64_t (**)(uint64_t, _QWORD *))(*(_QWORD *)v4 + 40))(v4, a2);
}

uint64_t re::CGPerspectiveContextAssetLoader::createRuntimeData(uint64_t a1, uint64_t a2)
{
  const __CFData *v3;

  v3 = CFDataCreateWithBytesNoCopy((CFAllocatorRef)*MEMORY[0x24BDBD240], *(const UInt8 **)(a2 + 48), *(_QWORD *)(a2 + 24), (CFAllocatorRef)*MEMORY[0x24BDBD258]);
  *(_QWORD *)(a2 + 8) = CGPerspectiveCommandsDecode(v3);
  CFRelease(v3);
  return 1;
}

BOOL re::CGPerspectiveContextAssetLoader::isSupportedSourceExtension(re::CGPerspectiveContextAssetLoader *this, const char *a2)
{
  return strcasecmp(a2, "cgp") == 0;
}

uint64_t re::CGPerspectiveContextAssetLoader::introspectionType(re::CGPerspectiveContextAssetLoader *this)
{
  unsigned __int8 v1;

  v1 = atomic_load((unsigned __int8 *)&qword_2540FF4F8);
  if ((v1 & 1) == 0 && __cxa_guard_acquire(&qword_2540FF4F8))
  {
    qword_2540FF4F0 = re::internal::getOrCreateInfo((re::internal *)"CGPerspectiveContextAsset", (uint64_t (*)(re::internal *))re::allocInfo_CGPerspectiveContextAsset, (re::IntrospectionBase *(*)(void))re::initInfo_CGPerspectiveContextAsset, (void (*)(re::IntrospectionBase *))&unk_2540FF4E8, 0);
    __cxa_guard_release(&qword_2540FF4F8);
  }
  return qword_2540FF4F0;
}

uint64_t *re::allocInfo_CGPerspectiveContextAsset(re *this)
{
  unsigned __int8 v1;

  v1 = atomic_load((unsigned __int8 *)&_MergedGlobals_77);
  if ((v1 & 1) == 0 && __cxa_guard_acquire(&_MergedGlobals_77))
  {
    ArcSharedObject::ArcSharedObject((ArcSharedObject *)&qword_2540FF510, 0);
    *(uint64_t *)((char *)&qword_2540FF520 + 6) = 0;
    qword_2540FF520 = 0;
    qword_2540FF530 = 0;
    qword_2540FF538 = 0xFFFFFFFFLL;
    qword_2540FF510 = (uint64_t)&off_24ED7DAA8;
    qword_2540FF540 = (uint64_t)"CGPerspectiveContextAsset";
    dword_2540FF548 = 0;
    *(_OWORD *)&algn_2540FF54C[4] = 0u;
    *(_OWORD *)&algn_2540FF54C[20] = 0u;
    *(_OWORD *)&algn_2540FF54C[36] = 0u;
    qword_2540FF580 = 0;
    __cxa_guard_release(&_MergedGlobals_77);
  }
  return &qword_2540FF510;
}

void re::initInfo_CGPerspectiveContextAsset(re *this, re::IntrospectionBase *a2)
{
  const re::IntrospectionBase *v3;
  unsigned __int8 v4;
  re *v5;
  uint64_t *v6;
  const re::IntrospectionBase *v7;
  void *v8;
  uint64_t v9;
  uint64_t *v10;
  const re::IntrospectionBase *v11;
  uint64_t *v12;
  uint64_t v13;
  __int128 v14;
  _QWORD v15[2];
  __int128 v16;

  v15[0] = 0xC5C5E34969555BB2;
  v15[1] = "CGPerspectiveContextAsset";
  re::StringID::destroyString((re::StringID *)v15);
  *((_OWORD *)this + 2) = v16;
  v4 = atomic_load((unsigned __int8 *)&qword_2540FF4E0);
  if ((v4 & 1) == 0)
  {
    v5 = (re *)__cxa_guard_acquire(&qword_2540FF4E0);
    if ((_DWORD)v5)
    {
      v6 = re::introspectionAllocator(v5);
      v8 = re::introspect_uint32_t((re *)1, v7);
      v9 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v6 + 32))(v6, 72, 8);
      *(_DWORD *)v9 = 1;
      *(_QWORD *)(v9 + 8) = "networkVersion";
      *(_QWORD *)(v9 + 16) = v8;
      *(_QWORD *)(v9 + 24) = 0;
      *(_QWORD *)(v9 + 32) = 1;
      *(_DWORD *)(v9 + 40) = 0;
      *(_QWORD *)(v9 + 48) = 0;
      *(_QWORD *)(v9 + 56) = 0;
      *(_DWORD *)(v9 + 64) = 0;
      qword_2540FF500 = v9;
      v10 = re::introspectionAllocator((re *)v9);
      v12 = re::IntrospectionInfo<re::DynamicArray<unsigned char>>::get(1, v11);
      v13 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v10 + 32))(v10, 72, 8);
      *(_DWORD *)v13 = 1;
      *(_QWORD *)(v13 + 8) = "commandsBuffer";
      *(_QWORD *)(v13 + 16) = v12;
      *(_QWORD *)(v13 + 24) = 0;
      *(_QWORD *)(v13 + 32) = 0x1000000002;
      *(_DWORD *)(v13 + 40) = 0;
      *(_QWORD *)(v13 + 48) = 0;
      *(_QWORD *)(v13 + 56) = 0;
      *(_DWORD *)(v13 + 64) = 0;
      qword_2540FF508 = v13;
      __cxa_guard_release(&qword_2540FF4E0);
    }
  }
  *((_QWORD *)this + 2) = 0x3800000008;
  *((_DWORD *)this + 6) = 8;
  *((_WORD *)this + 14) = 0;
  *((_DWORD *)this + 14) = 2;
  *((_QWORD *)this + 8) = &qword_2540FF500;
  *((_QWORD *)this + 9) = re::internal::defaultConstruct<re::CGPerspectiveContextAsset>;
  *((_QWORD *)this + 10) = re::internal::defaultDestruct<re::CGPerspectiveContextAsset>;
  *((_QWORD *)this + 11) = 0;
  *((_QWORD *)this + 12) = 0;
  *((_QWORD *)this + 13) = re::internal::defaultConstructV2<re::CGPerspectiveContextAsset>;
  *((_QWORD *)this + 14) = re::internal::defaultDestructV2<re::CGPerspectiveContextAsset>;
  re::IntrospectionRegistry::add(this, v3);
  v14 = v16;
}

double re::internal::defaultConstruct<re::CGPerspectiveContextAsset>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  double result;

  *(_DWORD *)a3 = 0;
  *(_QWORD *)(a3 + 48) = 0;
  result = 0.0;
  *(_OWORD *)(a3 + 8) = 0u;
  *(_OWORD *)(a3 + 24) = 0u;
  *(_DWORD *)(a3 + 40) = 0;
  return result;
}

void re::internal::defaultDestruct<re::CGPerspectiveContextAsset>(int a1, int a2, re::CGPerspectiveContextAsset *this)
{
  re::CGPerspectiveContextAsset::~CGPerspectiveContextAsset(this);
}

double re::internal::defaultConstructV2<re::CGPerspectiveContextAsset>(uint64_t a1)
{
  double result;

  *(_DWORD *)a1 = 0;
  *(_QWORD *)(a1 + 48) = 0;
  result = 0.0;
  *(_OWORD *)(a1 + 8) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_DWORD *)(a1 + 40) = 0;
  return result;
}

void re::CGPerspectiveContextAssetLoader::~CGPerspectiveContextAssetLoader(re::CGPerspectiveContextAssetLoader *this)
{
  JUMPOUT(0x2276933B8);
}

BOOL re::ecs2::ECSSerialization::saveToStream(re::ecs2::ECSSerialization *this, re::ecs2::Scene *a2, AssetService *a3, google::protobuf::io::ZeroCopyOutputStream *a4)
{
  unsigned __int8 v5;
  unsigned __int8 v6;
  _anonymous_namespace_ *v7;
  int v8;
  NSObject *v9;
  _BYTE *v10;
  _BYTE v12[24];
  uint64_t v13;
  char v14;
  _BYTE v15[23];
  uint64_t (**v16)();
  _QWORD v17[33];
  _DWORD *v18;
  int v19;
  uint64_t v20;
  uint64_t v21[6];
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  int v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  int v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  int v35;
  uint64_t v36;
  _QWORD v37[3];
  void (**v38)(re::DefaultAssetSerialize *__hidden);
  uint64_t v39;
  _BYTE v40[39];
  char v41;
  _QWORD v42[3];
  int v43;
  uint64_t v44;
  uint8_t buf[4];
  _BYTE *v46;
  uint64_t v47;

  v47 = *MEMORY[0x24BDAC8D0];
  v44 = 0;
  memset(v42, 0, sizeof(v42));
  v43 = 0;
  re::ecs2::ECSSerialization::saveIntoSceneAssetData(this, (uint64_t)v42, 0);
  if ((v5 & 1) == 0
  {
    re::introspect<re::ecs2::SceneAssetData>(void)::info = re::ecs2::introspect_SceneAssetData(0);
  }
  re::IntrospectionSharedLock::IntrospectionSharedLock((re::IntrospectionSharedLock *)&v41);
  if ((v6 & 1) == 0
  {
    re::introspect<re::ecs2::SceneAssetData>(void)::info = re::ecs2::introspect_SceneAssetData(0);
  }
  re::TypeInfo::TypeInfo((uint64_t)v40, (uint64_t)v17);
  re::DefaultAssetSerialize::DefaultAssetSerialize((re::DefaultAssetSerialize *)&v38, 0);
  v37[2] = 0;
  v37[1] = 0;
  v37[0] = &v38;
  re::ecs2::ECSJSONSerializer::ECSJSONSerializer((re::ecs2::ECSJSONSerializer *)&v16);
  re::HashTable<re::internal::SerializeFuncKey,BOOL (*)(re::Serializer<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL),re::internal::HashSerializeFuncKey,re::EqualTo<re::internal::SerializeFuncKey>,false,true>::clear((uint64_t)&v20);
  re::Serializer<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>::registerSerializeFuncs(&v16);
  ((void (*)(uint64_t (***)()))v16[4])(&v16);
  v19 = v18[6];
  v17[32] = v37;
  v7 = re::ecs2::serializeObject<re::ecs2::ECSJSONSerializer>((uint64_t)&v16, (uint64_t)v42, (uint64_t)v40, (uint64_t)a3, (uint64_t)v12);
  v8 = v12[0];
  if (!v12[0])
  {
    v9 = *re::assetTypesLogObjects(v7);
    if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
    {
      if ((v14 & 1) != 0)
        v10 = *(_BYTE **)&v15[7];
      else
        v10 = v15;
      *(_DWORD *)buf = 136315138;
      v46 = v10;
      _os_log_impl(&dword_224FE9000, v9, OS_LOG_TYPE_DEFAULT, "Failed to save scene to stream. Message: %s", buf, 0xCu);
    }
    if (!v12[0] && v13 && (v14 & 1) != 0)
      (*(void (**)(void))(*(_QWORD *)v13 + 40))();
  }
  v16 = &off_24ED37338;
  if (v32)
  {
    if (v36)
      (*(void (**)(void))(*(_QWORD *)v32 + 40))();
    v36 = 0;
    v33 = 0;
    v34 = 0;
    v32 = 0;
    ++v35;
  }
  if (v27)
  {
    if (v31)
      (*(void (**)(void))(*(_QWORD *)v27 + 40))();
    v31 = 0;
    v28 = 0;
    v29 = 0;
    v27 = 0;
    ++v30;
  }
  if (v22)
  {
    if (v26)
      (*(void (**)(void))(*(_QWORD *)v22 + 40))();
    v26 = 0;
    v23 = 0;
    v24 = 0;
    v22 = 0;
    ++v25;
  }
  re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit(v21);
  re::Serializer<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>::~Serializer((uint64_t)&v16);
  v38 = &off_24ED2D3D0;
  re::Optional<re::AssetPath>::~Optional((uint64_t)&v39);
  re::IntrospectionSharedLock::~IntrospectionSharedLock((re::IntrospectionSharedLock *)&v41);
  re::DynamicArray<re::ecs2::EntityAssetData>::deinit((uint64_t)v42);
  return v8 != 0;
}

double re::ecs2::ECSSerialization::saveIntoSceneAssetData(re *a1, uint64_t a2, uint64_t a3)
{
  uint64_t *v6;
  unint64_t v7;
  uint64_t v8;
  char v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  _BYTE v19[112];
  _QWORD v20[4];
  _QWORD v21[3];
  uint64_t v22[4];
  int v23;
  uint64_t v24;
  char v25[8];
  uint64_t v26;

  v6 = re::globalAllocators(a1);
  v7 = v6[2];
  v8 = re::globalAllocators((re *)v6)[2];
  if ((_DWORD)a3)
  {
    v26 = 0;
    v9 = 1;
  }
  else
  {
    v9 = 0;
  }
  v25[0] = v9;
  v23 = 0;
  memset(v22, 0, sizeof(v22));
  v24 = 0x7FFFFFFFLL;
  re::HashTable<re::ecs2::Entity const*,unsigned long long,re::Hash<re::ecs2::Entity const*>,re::EqualTo<re::ecs2::Entity const*>,true,false>::init((uint64_t)v22, v8, 3);
  v10 = *((_QWORD *)a1 + 13);
  v11 = *(uint64_t **)(v10 + 344);
  v12 = *(_QWORD *)(v10 + 328);
  if (v12)
  {
    v13 = 8 * v12;
    do
    {
      v14 = *v11++;
      v13 -= 8;
    }
    while (v13);
    v15 = *((_QWORD *)a1 + 13);
    v11 = *(uint64_t **)(v15 + 344);
    v12 = *(_QWORD *)(v15 + 328);
  }
  v21[0] = 0;
  v20[0] = 0;
  v20[1] = 0;
  v20[2] = a1;
  v20[3] = v22;
  v21[1] = v20;
  v21[2] = 0;
  if (v12)
  {
    v16 = 8 * v12;
    do
    {
      v17 = *v11;
      if (!(_DWORD)a3 || (*(_BYTE *)(v17 + 289) & 0x10) == 0)
      {
        re::DynamicArray<re::ecs2::EntityAssetData>::add(a2, (uint64_t)v19);
        re::ecs2::EntityAssetData::~EntityAssetData((re::ecs2::EntityAssetData *)v19);
      }
      ++v11;
      v16 -= 8;
    }
    while (v16);
  }
  return re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit(v22);
}

_anonymous_namespace_ *re::ecs2::serializeObject<re::ecs2::ECSJSONSerializer>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  _anonymous_namespace_ *result;
  NSObject *v11;
  _BYTE *v12;
  char v13;
  char v14;
  __int128 v15;
  _anonymous_namespace_ *v16;
  char v17;
  _BYTE v18[23];
  uint8_t buf[16];
  uint64_t v20;
  __int128 v21;
  uint64_t v22;
  uint64_t v23;

  v23 = *MEMORY[0x24BDAC8D0];
  if (!*(_BYTE *)(a1 + 64))
    (*(void (**)(uint64_t, const char *, uint64_t, uint64_t, uint64_t, uint64_t, _QWORD))(*(_QWORD *)a1 + 72))(a1, "object", 1, a2, a3, a3, 0);
  (*(void (**)(uint64_t))(*(_QWORD *)a1 + 56))(a1);
  result = re::Encoder<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,google::protobuf::io::ZeroCopyOutputStream>::close((_anonymous_namespace_ *)(a1 + 24));
  if (*(_BYTE *)(a1 + 64))
  {
    v11 = *re::assetTypesLogObjects(result);
    if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
    {
      v13 = *(_BYTE *)(a1 + 64);
      if (v13)
      {
        v15 = *(_OWORD *)(a1 + 72);
        re::DynamicString::DynamicString((re::DynamicString *)&v16, (const re::DynamicString *)(a1 + 88));
        v12 = (v17 & 1) != 0 ? *(_BYTE **)&v18[7] : v18;
      }
      else
      {
        v12 = v18;
      }
      *(_DWORD *)buf = 136315138;
      *(_QWORD *)&buf[4] = v12;
      _os_log_impl(&dword_224FE9000, v11, OS_LOG_TYPE_DEFAULT, "Serialization failed. Message: %s", buf, 0xCu);
      if (v13)
      {
        if (v16 && (v17 & 1) != 0)
          (*(void (**)(void))(*(_QWORD *)v16 + 40))();
      }
    }
    v14 = *(_BYTE *)(a1 + 64);
    if (v14)
    {
      v15 = *(_OWORD *)(a1 + 72);
      re::DynamicString::DynamicString((re::DynamicString *)&v16, (const re::DynamicString *)(a1 + 88));
    }
    *(_OWORD *)buf = v15;
    result = re::DynamicString::DynamicString((re::DynamicString *)&v20, (const re::DynamicString *)&v16);
    *(_BYTE *)a5 = 0;
    *(_OWORD *)(a5 + 8) = *(_OWORD *)buf;
    *(_QWORD *)(a5 + 24) = v20;
    *(_QWORD *)(a5 + 48) = v22;
    *(_OWORD *)(a5 + 32) = v21;
    v22 = 0;
    v20 = 0;
    v21 = 0uLL;
    if (v14)
    {
      result = v16;
      if (v16)
      {
        if ((v17 & 1) != 0)
          return (_anonymous_namespace_ *)(*(uint64_t (**)(void))(*(_QWORD *)v16 + 40))();
      }
    }
  }
  else
  {
    *(_BYTE *)a5 = 1;
  }
  return result;
}

uint64_t re::ecs2::ECSSerialization::loadFromAsset(re::ecs2::ECSSerialization *this, AssetService *a2, AssetService *a3, const re::AssetHandle *a4)
{
  void **var0;
  unsigned int v8;
  uint64_t v9;

  re::AssetHandle::loadNow((uint64_t)a3[1].var0, 0);
  var0 = a3[1].var0;
  if (!var0)
    return 0;
  v8 = atomic_load((unsigned int *)var0 + 176);
  if (v8 != 2)
    return 0;
  v9 = re::AssetHandle::loadedAsset<re::SceneAsset>((re::SceneAsset *)a3);
  re::ecs2::ECSSerialization::loadFromAssetData(this, a2, v9);
  return 1;
}

{
  void **var0;
  unsigned int v8;
  uint64_t v9;

  re::AssetHandle::loadNow((uint64_t)a3[1].var0, 0);
  var0 = a3[1].var0;
  if (!var0)
    return 0;
  v8 = atomic_load((unsigned int *)var0 + 176);
  if (v8 != 2)
    return 0;
  v9 = re::AssetHandle::loadedAsset<re::SceneAsset>((re::SceneAsset *)a3);
  re::ecs2::ECSSerialization::loadFromAssetData(this, a2, v9);
  return 1;
}

uint64_t re::AssetHandle::loadedAsset<re::SceneAsset>(re::SceneAsset *a1)
{
  uint64_t *v2;

  if (!*((_QWORD *)a1 + 1))
    return 0;
  v2 = re::SceneAsset::assetType(a1);
  return re::AssetHandle::assetWithType(a1, (const re::AssetType *)v2, 1);
}

uint64_t re::ecs2::ECSSerialization::loadFromAssetData(re *a1, AssetService *a2, uint64_t a3)
{
  uint64_t *v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  re::ecs2::Entity *v15;
  uint64_t *v16;
  _QWORD v17[4];
  re::internal::EntityHandleHookupTable *v18;
  _QWORD v19[5];

  v19[4] = *MEMORY[0x24BDAC8D0];
  if (re::ecs2::dispatchOnceInitECSComponents(void)::onceToken != -1)
    dispatch_once(&re::ecs2::dispatchOnceInitECSComponents(void)::onceToken, &__block_literal_global_13);
  v6 = re::globalAllocators(a1);
  v7 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v6[2] + 32))(v6[2], 136, 8);
  *(_OWORD *)(v7 + 96) = 0u;
  *(_OWORD *)(v7 + 112) = 0u;
  *(_OWORD *)(v7 + 64) = 0u;
  *(_OWORD *)(v7 + 80) = 0u;
  *(_OWORD *)v7 = 0u;
  *(_OWORD *)(v7 + 16) = 0u;
  *(_OWORD *)(v7 + 32) = 0u;
  *(_OWORD *)(v7 + 48) = 0u;
  *(_DWORD *)(v7 + 76) = 0x7FFFFFFF;
  *(_OWORD *)(v7 + 104) = 0u;
  *(_QWORD *)(v7 + 120) = 0x7FFFFFFF00000000;
  *(_QWORD *)(v7 + 128) = 0;
  *(_OWORD *)(v7 + 88) = 0u;
  v19[3] = v19;
  v18 = (re::internal::EntityHandleHookupTable *)v7;
  v19[0] = &off_24ED37180;
  v8 = re::globalAllocators((re *)v7);
  v9 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v8[2] + 32))(v8[2], 48, 8);
  *(_OWORD *)(v9 + 16) = 0u;
  *(_OWORD *)(v9 + 32) = 0u;
  *(_OWORD *)v9 = 0u;
  *(_DWORD *)(v9 + 36) = 0x7FFFFFFF;
  v17[3] = v17;
  v16 = (uint64_t *)v9;
  v17[0] = &off_24ED37210;
  v10 = *(_QWORD *)(a3 + 16);
  if (v10)
  {
    v11 = *(_QWORD *)(a3 + 32);
    v12 = 112 * v10;
    do
    {
      v13 = (_QWORD *)(*((_QWORD *)a1 + 13) + 304);
      re::Collection<re::SharedPtr<re::ecs2::Scene>>::add(v13, (uint64_t *)&v15);
      if (v15)

      v11 += 112;
      v12 -= 112;
    }
    while (v12);
  }
  re::internal::EntityHandleHookupTable::hookupHandlesForAllEntitiesInTable(v18);
  std::unique_ptr<re::RigHierarchy,std::function<void ()(re::RigHierarchy*)>>::~unique_ptr[abi:nn180100]((uint64_t *)&v16);
  std::unique_ptr<re::RigHierarchy,std::function<void ()(re::RigHierarchy*)>>::~unique_ptr[abi:nn180100]((uint64_t *)&v18);
  return 1;
}

{
  uint64_t *v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  re::ecs2::Entity *v13;
  re::ecs2::Entity *v15;
  uint64_t *v16;
  _QWORD v17[5];

  v17[4] = *MEMORY[0x24BDAC8D0];
  if (re::ecs2::dispatchOnceInitECSComponents(void)::onceToken != -1)
    dispatch_once(&re::ecs2::dispatchOnceInitECSComponents(void)::onceToken, &__block_literal_global_13);
  v6 = re::globalAllocators(a1);
  v7 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v6[2] + 32))(v6[2], 136, 8);
  *(_OWORD *)(v7 + 96) = 0u;
  *(_OWORD *)(v7 + 112) = 0u;
  *(_OWORD *)(v7 + 64) = 0u;
  *(_OWORD *)(v7 + 80) = 0u;
  *(_OWORD *)v7 = 0u;
  *(_OWORD *)(v7 + 16) = 0u;
  *(_OWORD *)(v7 + 32) = 0u;
  *(_OWORD *)(v7 + 48) = 0u;
  *(_DWORD *)(v7 + 76) = 0x7FFFFFFF;
  *(_OWORD *)(v7 + 104) = 0u;
  *(_QWORD *)(v7 + 120) = 0x7FFFFFFF00000000;
  *(_QWORD *)(v7 + 128) = 0;
  *(_OWORD *)(v7 + 88) = 0u;
  v8 = re::globalAllocators((re *)v7);
  v9 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v8[2] + 32))(v8[2], 48, 8);
  *(_OWORD *)(v9 + 16) = 0u;
  *(_OWORD *)(v9 + 32) = 0u;
  *(_OWORD *)v9 = 0u;
  *(_DWORD *)(v9 + 36) = 0x7FFFFFFF;
  v17[3] = v17;
  v16 = (uint64_t *)v9;
  v17[0] = &off_24ED370F0;
  v10 = *(_QWORD *)(a3 + 16);
  if (v10)
  {
    v11 = *(_QWORD *)(a3 + 32);
    v12 = 112 * v10;
    do
    {
      v13 = v15;
      re::ecs2::Entity::setParentInternal(v15, a1, 0xFFFFFFFFFFFFFFFFLL);
      if (v13)

      v11 += 112;
      v12 -= 112;
    }
    while (v12);
  }
  re::internal::EntityHandleHookupTable::hookupHandlesForAllEntitiesInTable((re::internal::EntityHandleHookupTable *)v7);
  re::internal::destroyPersistent<re::internal::EntityHandleHookupTable>((re *)"loadFromAssetData", 434, v7);
  std::unique_ptr<re::RigHierarchy,std::function<void ()(re::RigHierarchy*)>>::~unique_ptr[abi:nn180100]((uint64_t *)&v16);
  return 1;
}

void re::ecs2::ECSSerialization::createSerializedJsonData(re::ecs2::ECSSerialization *this@<X0>, uint64_t a2@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  CFMutableDataRef v7;
  _BYTE *v8;
  __int128 v9;
  uint64_t v10;
  uint64_t v11;
  __int128 v12;
  uint64_t v13;
  uint64_t v14;
  _BYTE v15[24];
  uint64_t v16;
  char v17;
  _BYTE v18[23];
  _QWORD v19[34];
  uint64_t v20;
  int v21;
  uint64_t v22;
  uint64_t v23[6];
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  int v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  int v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  int v37;
  uint64_t v38;
  char v39;
  void (**v40)(re::CFDataBufferedOutputStream *__hidden);
  __int16 v41;
  CFMutableDataRef *p_Mutable;
  _QWORD v43[4];
  __int16 v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  CFMutableDataRef Mutable;

  Mutable = CFDataCreateMutable(0, 0);
  v41 = 0;
  v40 = &off_24ED7C210;
  p_Mutable = &Mutable;
  v43[0] = &unk_24ED7C268;
  v43[1] = 0;
  v43[2] = &off_24ED1E8F0;
  v43[3] = v43;
  v44 = 0;
  v45 = 0;
  v46 = 0;
  v47 = 0x2000;
  v48 = 0;
  CFRetain(Mutable);
  v5 = (*(uint64_t (**)(re::ecs2::ECSSerialization *))(*(_QWORD *)this + 40))(this);
  v6 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 48))(v5);
  re::IntrospectionSharedLock::IntrospectionSharedLock((re::IntrospectionSharedLock *)&v39);
  re::ecs2::ECSJSONSerializer::ECSJSONSerializer((re::ecs2::ECSJSONSerializer *)v19);
  v20 = *(_QWORD *)(v6 + 32);
  re::HashTable<re::internal::SerializeFuncKey,BOOL (*)(re::Serializer<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL),re::internal::HashSerializeFuncKey,re::EqualTo<re::internal::SerializeFuncKey>,false,true>::clear((uint64_t)&v22);
  re::Serializer<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>::registerSerializeFuncs(v19);
  (*(void (**)(_QWORD *))(v19[0] + 32))(v19);
  v21 = *(_DWORD *)(v20 + 24);
  re::ecs2::serializeComponent<re::ecs2::ECSJSONSerializer>((uint64_t)v19, (uint64_t)this, (uint64_t)&v40, (uint64_t)v15);
  if (v15[0])
  {
    v19[0] = &off_24ED37338;
    if (v34)
    {
      if (v38)
        (*(void (**)(void))(*(_QWORD *)v34 + 40))();
      v38 = 0;
      v35 = 0;
      v36 = 0;
      v34 = 0;
      ++v37;
    }
    if (v29)
    {
      if (v33)
        (*(void (**)(void))(*(_QWORD *)v29 + 40))();
      v33 = 0;
      v30 = 0;
      v31 = 0;
      v29 = 0;
      ++v32;
    }
    if (v24)
    {
      if (v28)
        (*(void (**)(void))(*(_QWORD *)v24 + 40))();
      v28 = 0;
      v25 = 0;
      v26 = 0;
      v24 = 0;
      ++v27;
    }
    re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit(v23);
    re::Serializer<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>::~Serializer((uint64_t)v19);
    re::IntrospectionSharedLock::~IntrospectionSharedLock((re::IntrospectionSharedLock *)&v39);
    v7 = Mutable;
    *(_BYTE *)a2 = 1;
    *(_QWORD *)(a2 + 8) = v7;
  }
  else
  {
    CFRelease(Mutable);
    if ((v17 & 1) != 0)
      v8 = *(_BYTE **)&v18[7];
    else
      v8 = v18;
    re::DynamicString::format((re::DynamicString *)"Serialization failed. Message: %s", (re::DynamicString *)&v12, v8);
    v9 = v12;
    v10 = v13;
    v11 = v14;
    *(_BYTE *)a2 = 0;
    *(_OWORD *)(a2 + 8) = v9;
    *(_QWORD *)(a2 + 24) = v10;
    *(_QWORD *)(a2 + 32) = v11;
    if (!v15[0] && v16 && (v17 & 1) != 0)
      (*(void (**)(void))(*(_QWORD *)v16 + 40))();
    v19[0] = &off_24ED37338;
    if (v34)
    {
      if (v38)
        (*(void (**)(void))(*(_QWORD *)v34 + 40))();
      v38 = 0;
      v35 = 0;
      v36 = 0;
      v34 = 0;
      ++v37;
    }
    if (v29)
    {
      if (v33)
        (*(void (**)(void))(*(_QWORD *)v29 + 40))();
      v33 = 0;
      v30 = 0;
      v31 = 0;
      v29 = 0;
      ++v32;
    }
    if (v24)
    {
      if (v28)
        (*(void (**)(void))(*(_QWORD *)v24 + 40))();
      v28 = 0;
      v25 = 0;
      v26 = 0;
      v24 = 0;
      ++v27;
    }
    re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit(v23);
    re::Serializer<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>::~Serializer((uint64_t)v19);
    re::IntrospectionSharedLock::~IntrospectionSharedLock((re::IntrospectionSharedLock *)&v39);
  }
  re::CFDataBufferedOutputStream::~CFDataBufferedOutputStream((re::CFDataBufferedOutputStream *)&v40);
}

void re::ecs2::serializeComponent<re::ecs2::ECSJSONSerializer>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  re *v8;
  uint64_t v9;
  _anonymous_namespace_ *v10;
  _anonymous_namespace_ *v11;
  NSObject *v12;
  _BYTE *v13;
  uint64_t v14;
  re *v15;
  re *PrettyTypeName;
  NSObject *v17;
  char *v18;
  char *v19;
  __int128 v20;
  uint64_t v21;
  uint64_t v22;
  re *v23;
  _BYTE *v24;
  re *v25;
  __int128 v26;
  re *v27;
  char v28;
  _BYTE v29[7];
  _BYTE *v30;
  _BYTE v31[8];
  _BYTE v32[39];
  char v33;
  uint8_t buf[16];
  uint64_t v35;
  __int128 v36;
  uint64_t v37;
  uint64_t v38;

  v38 = *MEMORY[0x24BDAC8D0];
  v8 = *(re **)(a1 + 272);
  re::IntrospectionSharedLock::IntrospectionSharedLock((re::IntrospectionSharedLock *)&v33);
  v9 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 40))(a2);
  (*(void (**)(re **__return_ptr))(*(_QWORD *)v9 + 56))(&v25);
  re::TypeRegistry::typeInfo(v8, &v25, v31);
  if (v31[0])
  {
    if (!*(_BYTE *)(a1 + 64))
      (*(void (**)(uint64_t, const char *, uint64_t, uint64_t, _BYTE *, _BYTE *, _QWORD))(*(_QWORD *)a1 + 72))(a1, "component", 1, a2, v32, v32, 0);
    (*(void (**)(uint64_t))(*(_QWORD *)a1 + 56))(a1);
    v11 = re::Encoder<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,google::protobuf::io::ZeroCopyOutputStream>::close((_anonymous_namespace_ *)(a1 + 24));
    if (*(_BYTE *)(a1 + 64))
    {
      v12 = *re::assetTypesLogObjects(v11);
      if (os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT))
      {
        LOBYTE(v25) = *(_BYTE *)(a1 + 64);
        if ((_BYTE)v25)
        {
          v26 = *(_OWORD *)(a1 + 72);
          re::DynamicString::DynamicString((re::DynamicString *)&v27, (const re::DynamicString *)(a1 + 88));
          v13 = (v28 & 1) != 0 ? v30 : v29;
        }
        else
        {
          v13 = v29;
        }
        *(_DWORD *)buf = 136315138;
        *(_QWORD *)&buf[4] = v13;
        _os_log_impl(&dword_224FE9000, v12, OS_LOG_TYPE_DEFAULT, "Serialization failed. Message: %s", buf, 0xCu);
        if ((_BYTE)v25)
        {
          if (v27 && (v28 & 1) != 0)
            (*(void (**)(void))(*(_QWORD *)v27 + 40))();
        }
      }
      LOBYTE(v25) = *(_BYTE *)(a1 + 64);
      if ((_BYTE)v25)
      {
        v26 = *(_OWORD *)(a1 + 72);
        re::DynamicString::DynamicString((re::DynamicString *)&v27, (const re::DynamicString *)(a1 + 88));
      }
      *(_OWORD *)buf = v26;
      re::DynamicString::DynamicString((re::DynamicString *)&v35, (const re::DynamicString *)&v27);
      *(_BYTE *)a4 = 0;
      *(_OWORD *)(a4 + 8) = *(_OWORD *)buf;
      *(_QWORD *)(a4 + 24) = v35;
      *(_QWORD *)(a4 + 48) = v37;
      *(_OWORD *)(a4 + 32) = v36;
      v37 = 0;
      v35 = 0;
      v36 = 0uLL;
      if ((_BYTE)v25)
      {
        v23 = v27;
        if (v27)
        {
          if ((v28 & 1) != 0)
          {
            v24 = v30;
            goto LABEL_33;
          }
        }
      }
    }
    else
    {
      *(_BYTE *)a4 = 1;
    }
  }
  else
  {
    v14 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 40))(a2);
    v15 = (re *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v14 + 48))(v14);
    PrettyTypeName = (re *)re::getPrettyTypeName(v15, (const re::IntrospectionBase *)&v25);
    v17 = *re::assetTypesLogObjects(PrettyTypeName);
    if (os_log_type_enabled(v17, OS_LOG_TYPE_DEFAULT))
    {
      if ((v26 & 1) != 0)
        v18 = (char *)*((_QWORD *)&v26 + 1);
      else
        v18 = (char *)&v26 + 1;
      *(_DWORD *)buf = 136315138;
      *(_QWORD *)&buf[4] = v18;
      _os_log_impl(&dword_224FE9000, v17, OS_LOG_TYPE_DEFAULT, "Serialization failed. Type info (\"%s\") not found.", buf, 0xCu);
    }
    if ((v26 & 1) != 0)
      v19 = (char *)*((_QWORD *)&v26 + 1);
    else
      v19 = (char *)&v26 + 1;
    re::DynamicString::format((re::DynamicString *)"Serialization failed. Type info (\"%s\") not found.", (re::DynamicString *)buf, v19);
    v20 = *(_OWORD *)buf;
    v21 = v35;
    v22 = v36;
    *(_BYTE *)a4 = 0;
    *(_QWORD *)(a4 + 8) = 400;
    *(_QWORD *)(a4 + 16) = &re::FoundationErrorCategory(void)::instance;
    *(_OWORD *)(a4 + 24) = v20;
    *(_QWORD *)(a4 + 40) = v21;
    *(_QWORD *)(a4 + 48) = v22;
    v23 = v25;
    if (v25 && (v26 & 1) != 0)
    {
      v24 = (_BYTE *)*((_QWORD *)&v26 + 1);
LABEL_33:
      (*(void (**)(re *, _BYTE *))(*(_QWORD *)v23 + 40))(v23, v24);
    }
  }
  re::IntrospectionSharedLock::~IntrospectionSharedLock((re::IntrospectionSharedLock *)&v33);
}

_QWORD *re::ecs2::ECSSerialization::addOrUpdateComponentFromJsonStream(uint64_t a1, AssetService *a2, uint64_t a3, const re::ecs2::ComponentTypeBase *a4)
{
  _QWORD *v6;
  uint64_t v7;
  re *v8;
  NSObject *v9;
  _BYTE *v10;
  _BYTE v12[24];
  uint64_t v13;
  char v14;
  _BYTE v15[23];
  _QWORD v16[34];
  uint64_t v17;
  int v18;
  uint64_t v19;
  uint64_t v20[6];
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  int v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  int v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  int v34;
  uint64_t v35;
  void (**v36)(re::DirectAssetDeserialize *__hidden);
  uint64_t v37;
  char v38;
  uint8_t buf[4];
  _BYTE *v40;
  uint64_t v41;

  v41 = *MEMORY[0x24BDAC8D0];
  v6 = (_QWORD *)re::ecs2::EntityComponentCollection::getOrAdd((re::ecs2::EntityComponentCollection *)(a1 + 32), a4);
  if (v6)
  {
    re::IntrospectionSharedLock::IntrospectionSharedLock((re::IntrospectionSharedLock *)&v38);
    re::ecs2::ECSJSONDeserializer::ECSJSONDeserializer((re::ecs2::ECSJSONDeserializer *)v16, a2);
    v7 = (*(uint64_t (**)(_QWORD *))(*v6 + 40))(v6);
    v17 = *(_QWORD *)((*(uint64_t (**)(uint64_t))(*(_QWORD *)v7 + 48))(v7) + 32);
    re::HashTable<re::internal::SerializeFuncKey,BOOL (*)(re::Serializer<re::EncoderBinary<re::SeekableInputStream>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL),re::internal::HashSerializeFuncKey,re::EqualTo<re::internal::SerializeFuncKey>,false,true>::clear((uint64_t)&v19);
    re::Serializer<re::EncoderRapidJSON<re::SeekableInputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>::registerSerializeFuncs(v16);
    (*(void (**)(_QWORD *))(v16[0] + 32))(v16);
    v18 = *(_DWORD *)(v17 + 24);
    re::ecs2::deserializeComponent<re::ecs2::ECSJSONDeserializer>((uint64_t)v16, v6, a3, (uint64_t)v12);
    if (!v12[0])
    {
      v9 = *re::assetTypesLogObjects(v8);
      if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
      {
        if ((v14 & 1) != 0)
          v10 = *(_BYTE **)&v15[7];
        else
          v10 = v15;
        *(_DWORD *)buf = 136315138;
        v40 = v10;
        _os_log_impl(&dword_224FE9000, v9, OS_LOG_TYPE_DEFAULT, "Deserialization failed. Message: %s", buf, 0xCu);
      }
      if (!v12[0] && v13 && (v14 & 1) != 0)
        (*(void (**)(void))(*(_QWORD *)v13 + 40))();
      v6 = 0;
    }
    v16[0] = &off_24ED37290;
    v36 = &off_24ED2D0D0;
    re::Optional<re::AssetPath>::~Optional((uint64_t)&v37);
    v16[0] = &off_24ED2E8A8;
    if (v31)
    {
      if (v35)
        (*(void (**)(void))(*(_QWORD *)v31 + 40))();
      v35 = 0;
      v32 = 0;
      v33 = 0;
      v31 = 0;
      ++v34;
    }
    if (v26)
    {
      if (v30)
        (*(void (**)(void))(*(_QWORD *)v26 + 40))();
      v30 = 0;
      v27 = 0;
      v28 = 0;
      v26 = 0;
      ++v29;
    }
    if (v21)
    {
      if (v25)
        (*(void (**)(void))(*(_QWORD *)v21 + 40))();
      v25 = 0;
      v22 = 0;
      v23 = 0;
      v21 = 0;
      ++v24;
    }
    re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit(v20);
    re::Serializer<re::EncoderRapidJSON<re::SeekableInputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>::~Serializer((uint64_t)v16);
    re::IntrospectionSharedLock::~IntrospectionSharedLock((re::IntrospectionSharedLock *)&v38);
  }
  return v6;
}

void re::ecs2::deserializeComponent<re::ecs2::ECSJSONDeserializer>(uint64_t a1@<X0>, _QWORD *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  re *v8;
  uint64_t v9;
  _anonymous_namespace_ *v10;
  _anonymous_namespace_ *v11;
  re *v12;
  NSObject *v13;
  uint64_t v14;
  _BYTE *v15;
  uint64_t v16;
  re *v17;
  re *PrettyTypeName;
  NSObject *v19;
  char *v20;
  char *v21;
  __int128 v22;
  uint64_t v23;
  uint64_t v24;
  re *v25;
  _BYTE *v26;
  re *v27;
  __int128 v28;
  re *v29;
  char v30;
  _BYTE v31[7];
  _BYTE *v32;
  _BYTE v33[8];
  _BYTE v34[39];
  char v35;
  _BYTE buf[24];
  __int128 v37;
  uint64_t v38;
  uint64_t v39;

  v39 = *MEMORY[0x24BDAC8D0];
  v8 = *(re **)(a1 + 272);
  re::IntrospectionSharedLock::IntrospectionSharedLock((re::IntrospectionSharedLock *)&v35);
  v9 = (*(uint64_t (**)(_QWORD *))(*a2 + 40))(a2);
  (*(void (**)(re **__return_ptr))(*(_QWORD *)v9 + 56))(&v27);
  re::TypeRegistry::typeInfo(v8, &v27, v33);
  if (v33[0])
  {
    if (!*(_BYTE *)(a1 + 64))
      (*(void (**)(uint64_t, const char *, uint64_t, _QWORD *, _BYTE *, _BYTE *, _QWORD))(*(_QWORD *)a1 + 72))(a1, "component", 1, a2, v34, v34, 0);
    (*(void (**)(uint64_t))(*(_QWORD *)a1 + 56))(a1);
    v12 = (re *)re::Encoder<re::EncoderRapidJSON<re::SeekableInputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,re::SeekableInputStream>::close(a1 + 24);
    if (*(_BYTE *)(a1 + 64))
    {
      v13 = *re::assetTypesLogObjects(v12);
      if (os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT))
      {
        v14 = re::TypeInfo::name((re::TypeInfo *)v34)[1];
        LOBYTE(v27) = *(_BYTE *)(a1 + 64);
        if ((_BYTE)v27)
        {
          v28 = *(_OWORD *)(a1 + 72);
          re::DynamicString::DynamicString((re::DynamicString *)&v29, (const re::DynamicString *)(a1 + 88));
          v15 = (v30 & 1) != 0 ? v32 : v31;
        }
        else
        {
          v15 = v31;
        }
        *(_DWORD *)buf = 136315394;
        *(_QWORD *)&buf[4] = v14;
        *(_WORD *)&buf[12] = 2080;
        *(_QWORD *)&buf[14] = v15;
        _os_log_impl(&dword_224FE9000, v13, OS_LOG_TYPE_DEFAULT, "Deserialization failed. Type \"%s\". Message: %s", buf, 0x16u);
        if ((_BYTE)v27)
        {
          if (v29 && (v30 & 1) != 0)
            (*(void (**)(void))(*(_QWORD *)v29 + 40))();
        }
      }
      LOBYTE(v27) = *(_BYTE *)(a1 + 64);
      if ((_BYTE)v27)
      {
        v28 = *(_OWORD *)(a1 + 72);
        re::DynamicString::DynamicString((re::DynamicString *)&v29, (const re::DynamicString *)(a1 + 88));
      }
      *(_OWORD *)buf = v28;
      re::DynamicString::DynamicString((re::DynamicString *)&buf[16], (const re::DynamicString *)&v29);
      *(_BYTE *)a4 = 0;
      *(_OWORD *)(a4 + 8) = *(_OWORD *)buf;
      *(_QWORD *)(a4 + 24) = *(_QWORD *)&buf[16];
      *(_QWORD *)(a4 + 48) = v38;
      *(_OWORD *)(a4 + 32) = v37;
      v38 = 0;
      *(_QWORD *)&buf[16] = 0;
      v37 = 0uLL;
      if ((_BYTE)v27)
      {
        v25 = v29;
        if (v29)
        {
          if ((v30 & 1) != 0)
          {
            v26 = v32;
            goto LABEL_33;
          }
        }
      }
    }
    else
    {
      re::ecs2::Component::markDirty(a2);
      *(_BYTE *)a4 = 1;
    }
  }
  else
  {
    v16 = (*(uint64_t (**)(_QWORD *))(*a2 + 40))(a2);
    v17 = (re *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v16 + 48))(v16);
    PrettyTypeName = (re *)re::getPrettyTypeName(v17, (const re::IntrospectionBase *)&v27);
    v19 = *re::assetTypesLogObjects(PrettyTypeName);
    if (os_log_type_enabled(v19, OS_LOG_TYPE_DEFAULT))
    {
      if ((v28 & 1) != 0)
        v20 = (char *)*((_QWORD *)&v28 + 1);
      else
        v20 = (char *)&v28 + 1;
      *(_DWORD *)buf = 136315138;
      *(_QWORD *)&buf[4] = v20;
      _os_log_impl(&dword_224FE9000, v19, OS_LOG_TYPE_DEFAULT, "Deserialization failed. Type info (\"%s\") not found.", buf, 0xCu);
    }
    if ((v28 & 1) != 0)
      v21 = (char *)*((_QWORD *)&v28 + 1);
    else
      v21 = (char *)&v28 + 1;
    re::DynamicString::format((re::DynamicString *)"Deserialization failed. Type info (\"%s\") not found.", (re::DynamicString *)buf, v21);
    v22 = *(_OWORD *)buf;
    v23 = *(_QWORD *)&buf[16];
    v24 = v37;
    *(_BYTE *)a4 = 0;
    *(_QWORD *)(a4 + 8) = 400;
    *(_QWORD *)(a4 + 16) = &re::FoundationErrorCategory(void)::instance;
    *(_OWORD *)(a4 + 24) = v22;
    *(_QWORD *)(a4 + 40) = v23;
    *(_QWORD *)(a4 + 48) = v24;
    v25 = v27;
    if (v27 && (v28 & 1) != 0)
    {
      v26 = (_BYTE *)*((_QWORD *)&v28 + 1);
LABEL_33:
      (*(void (**)(re *, _BYTE *))(*(_QWORD *)v25 + 40))(v25, v26);
    }
  }
  re::IntrospectionSharedLock::~IntrospectionSharedLock((re::IntrospectionSharedLock *)&v35);
}

void re::ecs2::ECSJSONDeserializer::~ECSJSONDeserializer(re::ecs2::ECSJSONDeserializer *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  *(_QWORD *)this = &off_24ED37290;
  *((_QWORD *)this + 64) = &off_24ED2D0D0;
  re::Optional<re::AssetPath>::~Optional((uint64_t)this + 520);
  *(_QWORD *)this = &off_24ED2E8A8;
  v2 = *((_QWORD *)this + 59);
  if (v2)
  {
    if (*((_QWORD *)this + 63))
      (*(void (**)(uint64_t))(*(_QWORD *)v2 + 40))(v2);
    *((_QWORD *)this + 63) = 0;
    *((_QWORD *)this + 60) = 0;
    *((_QWORD *)this + 61) = 0;
    *((_QWORD *)this + 59) = 0;
    ++*((_DWORD *)this + 124);
  }
  v3 = *((_QWORD *)this + 54);
  if (v3)
  {
    if (*((_QWORD *)this + 58))
      (*(void (**)(uint64_t))(*(_QWORD *)v3 + 40))(v3);
    *((_QWORD *)this + 58) = 0;
    *((_QWORD *)this + 55) = 0;
    *((_QWORD *)this + 56) = 0;
    *((_QWORD *)this + 54) = 0;
    ++*((_DWORD *)this + 114);
  }
  v4 = *((_QWORD *)this + 49);
  if (v4)
  {
    if (*((_QWORD *)this + 53))
      (*(void (**)(uint64_t))(*(_QWORD *)v4 + 40))(v4);
    *((_QWORD *)this + 53) = 0;
    *((_QWORD *)this + 50) = 0;
    *((_QWORD *)this + 51) = 0;
    *((_QWORD *)this + 49) = 0;
    ++*((_DWORD *)this + 104);
  }
  re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 43);
  re::Serializer<re::EncoderRapidJSON<re::SeekableInputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>::~Serializer((uint64_t)this);
}

{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  *(_QWORD *)this = &off_24ED37290;
  *((_QWORD *)this + 64) = &off_24ED2D0D0;
  re::Optional<re::AssetPath>::~Optional((uint64_t)this + 520);
  *(_QWORD *)this = &off_24ED2E8A8;
  v2 = *((_QWORD *)this + 59);
  if (v2)
  {
    if (*((_QWORD *)this + 63))
      (*(void (**)(uint64_t))(*(_QWORD *)v2 + 40))(v2);
    *((_QWORD *)this + 63) = 0;
    *((_QWORD *)this + 60) = 0;
    *((_QWORD *)this + 61) = 0;
    *((_QWORD *)this + 59) = 0;
    ++*((_DWORD *)this + 124);
  }
  v3 = *((_QWORD *)this + 54);
  if (v3)
  {
    if (*((_QWORD *)this + 58))
      (*(void (**)(uint64_t))(*(_QWORD *)v3 + 40))(v3);
    *((_QWORD *)this + 58) = 0;
    *((_QWORD *)this + 55) = 0;
    *((_QWORD *)this + 56) = 0;
    *((_QWORD *)this + 54) = 0;
    ++*((_DWORD *)this + 114);
  }
  v4 = *((_QWORD *)this + 49);
  if (v4)
  {
    if (*((_QWORD *)this + 53))
      (*(void (**)(uint64_t))(*(_QWORD *)v4 + 40))(v4);
    *((_QWORD *)this + 53) = 0;
    *((_QWORD *)this + 50) = 0;
    *((_QWORD *)this + 51) = 0;
    *((_QWORD *)this + 49) = 0;
    ++*((_DWORD *)this + 104);
  }
  re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 43);
  re::Serializer<re::EncoderRapidJSON<re::SeekableInputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>::~Serializer((uint64_t)this);
  JUMPOUT(0x2276933B8);
}

BOOL re::ecs2::ECSSerialization::loadFromStream(re *a1, AssetService *a2, uint64_t a3)
{
  unsigned __int8 v6;
  unsigned __int8 v7;
  _anonymous_namespace_ *v8;
  _anonymous_namespace_ *v9;
  re *v10;
  int v11;
  NSObject *v12;
  uint64_t v13;
  _BYTE *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  re *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  char v23;
  NSObject *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  _QWORD v34[3];
  int v35;
  uint64_t v36;
  uint64_t (**v37)();
  uint64_t v38;
  uint64_t v39;
  uint8_t v40;
  __int128 v41;
  _BYTE v42[184];
  _DWORD *v43;
  int v44;
  uint64_t v45;
  uint64_t v46[6];
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  int v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  int v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  int v60;
  uint64_t v61;
  void (**v62)(re::DirectAssetDeserialize *__hidden);
  uint64_t v63;
  _BYTE v64[39];
  char v65;
  __int128 v66;
  uint64_t v67;
  uint64_t v68;
  char *v69;
  uint64_t v70;
  uint8_t buf[4];
  _BYTE v72[20];
  uint64_t v73;
  uint64_t v74;
  char *v75;
  uint64_t v76;
  uint8_t v77[4];
  _BYTE v78[20];
  re *v79;
  char v80;
  _BYTE v81[7];
  _BYTE *v82;
  uint64_t v83;

  v83 = *MEMORY[0x24BDAC8D0];
  if ((v6 & 1) == 0
  {
    re::introspect<re::ecs2::SceneAssetData>(void)::info = re::ecs2::introspect_SceneAssetData(0);
  }
  re::IntrospectionSharedLock::IntrospectionSharedLock((re::IntrospectionSharedLock *)&v65);
  if ((v7 & 1) == 0
  {
    re::introspect<re::ecs2::SceneAssetData>(void)::info = re::ecs2::introspect_SceneAssetData(0);
  }
  re::TypeInfo::TypeInfo((uint64_t)v64, (uint64_t)&v38);
  re::ecs2::ECSJSONDeserializer::ECSJSONDeserializer((re::ecs2::ECSJSONDeserializer *)&v37, a2);
  re::HashTable<re::internal::SerializeFuncKey,BOOL (*)(re::Serializer<re::EncoderBinary<re::SeekableInputStream>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL),re::internal::HashSerializeFuncKey,re::EqualTo<re::internal::SerializeFuncKey>,false,true>::clear((uint64_t)&v45);
  re::Serializer<re::EncoderRapidJSON<re::SeekableInputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>::registerSerializeFuncs(&v37);
  v8 = (_anonymous_namespace_ *)((uint64_t (*)(uint64_t (***)()))v37[4])(&v37);
  v44 = v43[6];
  v36 = 0;
  memset(v34, 0, sizeof(v34));
  v35 = 0;
  if (!v40)
    ((void (*)(uint64_t (***)(), const char *, uint64_t, _QWORD *, _BYTE *, _BYTE *, _QWORD))v37[9])(&v37, "object", 1, v34, v64, v64, 0);
  ((void (*)(uint64_t (***)()))v37[7])(&v37);
  v10 = (re *)re::Encoder<re::EncoderRapidJSON<re::SeekableInputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,re::SeekableInputStream>::close((uint64_t)&v39);
  v11 = v40;
  if (v40)
  {
    v12 = *re::assetTypesLogObjects(v10);
    if (os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT))
    {
      v13 = re::TypeInfo::name((re::TypeInfo *)v64)[1];
      v77[0] = v40;
      if (v40)
      {
        *(_OWORD *)&v78[4] = v41;
        re::DynamicString::DynamicString((re::DynamicString *)&v79, (const re::DynamicString *)v42);
        v14 = (v80 & 1) != 0 ? v82 : v81;
      }
      else
      {
        v14 = v81;
      }
      *(_DWORD *)buf = 136315394;
      *(_QWORD *)v72 = v13;
      *(_WORD *)&v72[8] = 2080;
      *(_QWORD *)&v72[10] = v14;
      _os_log_impl(&dword_224FE9000, v12, OS_LOG_TYPE_DEFAULT, "Deserialization failed. Type \"%s\". Message: %s", buf, 0x16u);
      if (v77[0])
      {
        if (v79 && (v80 & 1) != 0)
          (*(void (**)(re *, _BYTE *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)v79 + 40))(v79, v82, v15, v16, v17);
      }
    }
    v77[0] = v40;
    if (v40)
    {
      *(_OWORD *)&v78[4] = v41;
      re::DynamicString::DynamicString((re::DynamicString *)&v79, (const re::DynamicString *)v42);
    }
    v66 = *(_OWORD *)&v78[4];
    v18 = re::DynamicString::DynamicString((re::DynamicString *)&v67, (const re::DynamicString *)&v79);
    buf[0] = 0;
    *(_OWORD *)&v72[4] = v66;
    v22 = v69;
    v75 = v69;
    v76 = v70;
    v23 = v68;
    v73 = v67;
    v74 = v68;
    v69 = 0;
    v70 = 0;
    v67 = 0;
    v68 = 0;
    if (v77[0])
    {
      v18 = v79;
      if (v79)
      {
        if ((v80 & 1) != 0)
          v18 = (re *)(*(uint64_t (**)(re *, _BYTE *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)v79 + 40))(v79, v82, v19, v20, v21);
      }
    }
    v24 = *re::assetTypesLogObjects(v18);
    if (!os_log_type_enabled(v24, OS_LOG_TYPE_DEFAULT))
      goto LABEL_28;
    v28 = (char *)&v74 + 1;
    if ((v23 & 1) != 0)
      v28 = v22;
    *(_DWORD *)v77 = 136315138;
    *(_QWORD *)v78 = v28;
    _os_log_impl(&dword_224FE9000, v24, OS_LOG_TYPE_DEFAULT, "Failed to load scene from stream. Message: %s", v77, 0xCu);
    if (!buf[0])
    {
LABEL_28:
      if (v73 && (v74 & 1) != 0)
        (*(void (**)(uint64_t, char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)v73 + 40))(v73, v75, v25, v26, v27);
    }
  }
  else
  {
    re::ecs2::ECSSerialization::loadFromAssetData(a1, a2, (uint64_t)v34);
  }
  re::DynamicArray<re::ecs2::EntityAssetData>::deinit((uint64_t)v34);
  v37 = (uint64_t (**)())&off_24ED37290;
  v62 = &off_24ED2D0D0;
  re::Optional<re::AssetPath>::~Optional((uint64_t)&v63);
  v37 = &off_24ED2E8A8;
  if (v57)
  {
    if (v61)
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)v57 + 40))(v57, v61, v29, v30, v31, v32);
    v61 = 0;
    v58 = 0;
    v59 = 0;
    v57 = 0;
    ++v60;
  }
  if (v52)
  {
    if (v56)
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)v52 + 40))(v52, v56, v29, v30, v31, v32);
    v56 = 0;
    v53 = 0;
    v54 = 0;
    v52 = 0;
    ++v55;
  }
  if (v47)
  {
    if (v51)
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)v47 + 40))(v47, v51, v29, v30, v31, v32);
    v51 = 0;
    v48 = 0;
    v49 = 0;
    v47 = 0;
    ++v50;
  }
  re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit(v46);
  re::Serializer<re::EncoderRapidJSON<re::SeekableInputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>::~Serializer((uint64_t)&v37);
  re::IntrospectionSharedLock::~IntrospectionSharedLock((re::IntrospectionSharedLock *)&v65);
  return v11 == 0;
}

uint64_t `anonymous namespace'::generateEntityIDLookupTable(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t result;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v12 = a1;
  if (*(_BYTE *)a3)
  {
    v5 = *(_QWORD *)(a3 + 8) + 1;
    *(_QWORD *)(a3 + 8) = v5;
  }
  else
  {
    v5 = *(_QWORD *)(a1 + 296);
  }
  v11 = v5;
  result = re::HashTable<re::ecs2::Entity const*,unsigned long long,re::Hash<re::ecs2::Entity const*>,re::EqualTo<re::ecs2::Entity const*>,true,false>::addNew<unsigned long long &>(a2, &v12, &v11);
  v7 = *(_QWORD *)(v12 + 328);
  if (v7)
  {
    v8 = *(uint64_t **)(v12 + 344);
    v9 = 8 * v7;
    do
    {
      v10 = *v8++;
      v9 -= 8;
    }
    while (v9);
  }
  return result;
}

void `anonymous namespace'::convertToEntityAssetData(unint64_t a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v10;
  _anonymous_namespace_ *v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  char **v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  _QWORD *v22;
  unint64_t v23;
  uint64_t (*v24)(char *);
  uint64_t v25;
  uint64_t v26;
  const re::IntrospectionBase *v27;
  const re::IntrospectionBase **v28;
  unint64_t v29;
  _QWORD *v30;
  uint64_t v31;
  uint64_t v32;
  __n128 v33;
  uint64_t v34;
  const re::IntrospectionBase **v35;

  v10 = *(_QWORD *)(*(_QWORD *)(a3 + 8) + 24);
  *(_QWORD *)(a5 + 8) = 0;
  *(_QWORD *)(a5 + 16) = &str_110;
  *(_BYTE *)(a5 + 24) = 1;
  *(_QWORD *)(a5 + 32) = 0;
  v11 = (_anonymous_namespace_ *)(a5 + 32);
  *(_DWORD *)(a5 + 56) = 0;
  *(_QWORD *)(a5 + 40) = 0;
  *(_QWORD *)(a5 + 48) = 0;
  *(_QWORD *)(a5 + 104) = 0;
  *(_OWORD *)(a5 + 64) = 0u;
  *(_OWORD *)(a5 + 80) = 0u;
  *(_DWORD *)(a5 + 96) = 0;
  LODWORD(v12) = 0x7FFFFFFF;
  if (*(_QWORD *)v10)
  {
    v13 = 0x94D049BB133111EBLL
        * ((0xBF58476D1CE4E5B9 * (a1 ^ (a1 >> 30))) ^ ((0xBF58476D1CE4E5B9 * (a1 ^ (a1 >> 30))) >> 27));
    v14 = *(unsigned int *)(*(_QWORD *)(v10 + 8) + 4 * ((v13 ^ (v13 >> 31)) % *(unsigned int *)(v10 + 24)));
    if ((_DWORD)v14 != 0x7FFFFFFF)
    {
      v15 = *(_QWORD *)(v10 + 16);
      if (*(_QWORD *)(v15 + 32 * v14 + 16) == a1)
      {
        LODWORD(v12) = v14;
      }
      else
      {
        v12 = v14;
        while (1)
        {
          v12 = *(_DWORD *)(v15 + 32 * v12 + 8) & 0x7FFFFFFF;
          if ((_DWORD)v12 == 0x7FFFFFFF)
            break;
          if (*(_QWORD *)(v15 + 32 * v12 + 16) == a1)
            goto LABEL_10;
        }
        LODWORD(v12) = 0x7FFFFFFF;
      }
    }
  }
LABEL_10:
  *(_QWORD *)a5 = *(_QWORD *)(*(_QWORD *)(v10 + 16) + 32 * v12 + 24);
  re::StringID::operator=((unint64_t *)(a5 + 8), (uint64_t *)(a1 + 272));
  *(_BYTE *)(a5 + 24) = (*(_BYTE *)(a1 + 288) & 8) != 0;
  v16 = *(_QWORD *)(a1 + 56);
  *(_QWORD *)(a5 + 32) = a2;
  re::DynamicArray<re::internal::AnimationCompositionChainEntry>::setCapacity((_QWORD *)(a5 + 32), 0);
  ++*(_DWORD *)(a5 + 56);
  v32 = a5;
  if (*(_QWORD *)(a5 + 40) < v16)
    re::DynamicArray<re::internal::AnimationCompositionChainEntry>::setCapacity((_QWORD *)(a5 + 32), v16);
  v17 = *(_QWORD *)(a1 + 56);
  if (v17)
  {
    v18 = *(char ***)(a1 + 72);
    v19 = 8 * v17;
    do
    {
      v20 = *v18;
      v21 = (*(uint64_t (**)(char *))(*(_QWORD *)*v18 + 40))(*v18);
      if ((*(_BYTE *)(v21 + 40) & 1) == 0)
      {
        v22 = (_QWORD *)v21;
        v23 = *(_QWORD *)((*(uint64_t (**)(char *))(*(_QWORD *)v20 + 40))(v20) + 24) >> 1;
        v24 = (uint64_t (*)(char *))v22[1];
        if (v24)
        {
          v25 = v24(v20);
          v33.n128_u64[0] = v23;
          v33.n128_u64[1] = v25;
          LOBYTE(v34) = 1;
          re::DynamicArray<re::ecs2::ComponentHandleAssetData>::add(v11, &v33);
        }
        else
        {
          (*(void (**)(const re::IntrospectionBase ***__return_ptr, _QWORD *))(*v22 + 32))(&v35, v22);
          v26 = (*(uint64_t (**)(char *))(*(_QWORD *)v20 + 40))(v20);
          v27 = (const re::IntrospectionBase *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v26 + 48))(v26);
          v33 = (__n128)a2;
          v34 = a3;
          v28 = v35;
          v35 = 0;
          v33.n128_u64[0] = v23;
          v33.n128_u64[1] = (unint64_t)v28;
          LOBYTE(v34) = 1;
          re::DynamicArray<re::ecs2::ComponentHandleAssetData>::add(v11, &v33);
          if (v35)

        }
      }
      ++v18;
      v19 -= 8;
    }
    while (v19);
  }
  v29 = *(_QWORD *)(a1 + 328);
  if (*(_QWORD *)(v32 + 80) < v29)
  {
    re::DynamicArray<re::ecs2::EntityAssetData>::setCapacity((_QWORD *)(v32 + 72), v29);
    v29 = *(_QWORD *)(a1 + 328);
  }
  if (v29)
  {
    v30 = *(_QWORD **)(a1 + 344);
    v31 = 8 * v29;
    do
    {
      if (!(_DWORD)a4 || (*(_BYTE *)(a1 + 289) & 0x10) == 0)
      {
        re::DynamicArray<re::ecs2::EntityAssetData>::add(v32 + 72, (uint64_t)&v33);
        re::ecs2::EntityAssetData::~EntityAssetData((re::ecs2::EntityAssetData *)&v33);
      }
      ++v30;
      v31 -= 8;
    }
    while (v31);
  }
}

uint64_t re::DynamicArray<re::ecs2::EntityAssetData>::add(uint64_t a1, uint64_t a2)
{
  unint64_t v4;
  uint64_t result;

  v4 = *(_QWORD *)(a1 + 16);
  if (v4 >= *(_QWORD *)(a1 + 8))
  {
    re::DynamicArray<re::ecs2::EntityAssetData>::growCapacity((_QWORD *)a1, v4 + 1);
    v4 = *(_QWORD *)(a1 + 16);
  }
  result = re::ecs2::EntityAssetData::EntityAssetData(*(_QWORD *)(a1 + 32) + 112 * v4, a2);
  ++*(_QWORD *)(a1 + 16);
  ++*(_DWORD *)(a1 + 24);
  return result;
}

double re::ecs2::ECSSerialization::saveEntityHierarchyIntoSceneAssetData(re *a1, uint64_t a2, uint64_t a3)
{
  uint64_t *v6;
  unint64_t v7;
  uint64_t v8;
  char v9;
  re *v10;
  re *v11;
  uint64_t v12;
  double result;
  _BYTE v14[112];
  _QWORD v15[4];
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19[4];
  int v20;
  uint64_t v21;
  char v22[8];
  uint64_t v23;

  if (!(_DWORD)a3 || (*((_BYTE *)a1 + 289) & 0x10) == 0)
  {
    v6 = re::globalAllocators(a1);
    v7 = v6[2];
    v8 = re::globalAllocators((re *)v6)[2];
    if ((_DWORD)a3)
    {
      v23 = 0;
      v9 = 1;
    }
    else
    {
      v9 = 0;
    }
    v22[0] = v9;
    v20 = 0;
    memset(v19, 0, sizeof(v19));
    v21 = 0x7FFFFFFFLL;
    re::HashTable<re::ecs2::Entity const*,unsigned long long,re::Hash<re::ecs2::Entity const*>,re::EqualTo<re::ecs2::Entity const*>,true,false>::init((uint64_t)v19, v8, 3);
    v16 = 0;
    v17 = 0;
    v10 = a1;
    v18 = 0;
    do
    {
      v11 = v10;
      v10 = (re *)*((_QWORD *)v10 + 3);
    }
    while (v10);
    v12 = *((_QWORD *)v11 + 2);
    v15[0] = 0;
    v15[1] = 0;
    v15[2] = v12;
    v15[3] = v19;
    v17 = v15;
    re::DynamicArray<re::ecs2::EntityAssetData>::add(a2, (uint64_t)v14);
    re::ecs2::EntityAssetData::~EntityAssetData((re::ecs2::EntityAssetData *)v14);
    return re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit(v19);
  }
  return result;
}

uint64_t `anonymous namespace'::convertFromEntityAssetData@<X0>(uint64_t a1@<X0>, AssetService *a2@<X1>, _anonymous_namespace_ *a3@<X2>, uint64_t *a4@<X3>, re::ecs2::Entity **a5@<X8>)
{
  unint64_t v10;
  uint64_t *v11;
  unint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char **v16;
  char *v17;
  const re::ecs2::ComponentTypeBase *v18;
  uint64_t (*v19)(char *, const re::ecs2::ComponentTypeBase *);
  uint64_t v20;
  uint64_t v21;
  id v22;
  NSObject *v23;
  re *v24;
  uint64_t v25;
  uint64_t v26;
  const re::IntrospectionBase *v27;
  char *v28;
  re::ecs2::MeshSortingComponent *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  re::ecs2::Entity *v33;
  uint64_t v35;
  uint64_t v36;
  _QWORD v37[3];
  void (**v38)(re::DirectAssetDeserialize *__hidden);
  uint64_t v39;
  uint8_t buf[8];
  uint64_t v41;
  _QWORD *v42;

  v35 = *(_QWORD *)a1;
  v10 = *(_QWORD *)(a1 + 48);
  v11 = re::ecs2::EntityFactory::instance((re::ecs2::EntityFactory *)a1);
  re::ecs2::EntityFactory::make((re::ecs2::EntityFactory *)v11, v10, a5);
  v12 = (unint64_t *)*a5;
  re::StringID::operator=(v12 + 34, (uint64_t *)(a1 + 8));
  re::ecs2::Entity::setSelfEnabled((re::ecs2::Entity *)v12, *(unsigned __int8 *)(a1 + 24));
  v13 = (uint64_t)re::DirectAssetDeserialize::DirectAssetDeserialize((re::DirectAssetDeserialize *)&v38, a2, 0);
  v37[1] = 0;
  v37[2] = 0;
  v37[0] = &v38;
  v14 = *(_QWORD *)(a1 + 48);
  if (v14)
  {
    v15 = 24 * v14;
    v16 = (char **)(*(_QWORD *)(a1 + 64) + 8);
    do
    {
      v17 = re::ecs2::ComponentTypeRegistry::instance((re::ecs2::ComponentTypeRegistry *)v13);
      v18 = (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentTypeRegistry::componentTypeWithHash((os_unfair_lock_s *)v17, (uint64_t)*(v16 - 1));
      if (v18)
      {
        v19 = (uint64_t (*)(char *, const re::ecs2::ComponentTypeBase *))*((_QWORD *)v18 + 1);
        if (v19)
        {
          v20 = v19(*v16, v18);
          v21 = v20;
          v36 = v20;
          if (v20)
            v22 = (id)(v20 + 8);
          re::ecs2::EntityComponentCollection::add((uint64_t)(v12 + 4), &v36, 1);
          if (v36)
          {

            v36 = 0;
          }
          if (v21)

        }
        else
        {
          v24 = (re *)re::ecs2::EntityComponentCollection::add((re::ecs2::EntityComponentCollection *)(v12 + 4), v18);
          v25 = re::globalAllocators(v24)[2];
          v26 = (*(uint64_t (**)(re *))(*(_QWORD *)v24 + 40))(v24);
          v27 = (const re::IntrospectionBase *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v26 + 48))(v26);
          v28 = *v16;
          *(_QWORD *)buf = v25;
          v41 = 0;
          v42 = v37;
        }
      }
      else
      {
        v23 = *re::assetTypesLogObjects(0);
        v13 = os_log_type_enabled(v23, OS_LOG_TYPE_DEFAULT);
        if ((_DWORD)v13)
        {
          *(_WORD *)buf = 0;
          _os_log_impl(&dword_224FE9000, v23, OS_LOG_TYPE_DEFAULT, "Unknown component type hash", buf, 2u);
        }
      }
      v16 += 3;
      v15 -= 24;
    }
    while (v15);
  }
  v29 = (re::ecs2::MeshSortingComponent *)re::ecs2::EntityComponentCollection::get((re::ecs2::EntityComponentCollection *)(v12 + 4), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::MeshSortingComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType);
  if (v29)
    re::internal::MeshSortGroupFixupTable::fixupMeshSortGroup(a4, v29);
  re::internal::EntityHandleHookupTable::registerEntity(a3, (StringID *)v12, v35, 0);
  v30 = *(_QWORD *)(a1 + 88);
  if (v30)
  {
    v31 = *(_QWORD *)(a1 + 104);
    v32 = 112 * v30;
    do
    {
      v33 = *(re::ecs2::Entity **)buf;
      re::ecs2::Entity::setParentInternal(*(re::ecs2::Entity **)buf, (re::ecs2::Entity *)v12, 0xFFFFFFFFFFFFFFFFLL);
      if (v33)

      v31 += 112;
      v32 -= 112;
    }
    while (v32);
  }
  v38 = &off_24ED2D0D0;
  return re::Optional<re::AssetPath>::~Optional((uint64_t)&v39);
}

re *re::internal::destroyPersistent<re::internal::EntityHandleHookupTable>(re *result, uint64_t a2, uint64_t a3)
{
  uint64_t v4;

  if (a3)
  {
    v4 = re::globalAllocators(result)[2];
    re::HashTable<re::StringID,re::DataArrayHandle<re::RigGraphOperatorDefinition>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::deinit((uint64_t *)(a3 + 88));
    re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)(a3 + 40));
    re::DynamicArray<re::internal::EntityHandleHookupData>::deinit(a3);
    return (re *)(*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v4 + 40))(v4, a3);
  }
  return result;
}

uint64_t re::Serializer<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>::open(_anonymous_namespace_ *a1, uint64_t a2, uint64_t *a3, uint64_t *a4)
{
  _anonymous_namespace_ *v7;
  uint64_t v8;
  _anonymous_namespace_ *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unsigned __int8 v14[4];
  __int128 v15;
  _DWORD v16[7];

  v7 = a1;
  v8 = *((_QWORD *)a1 + 34);
  if (*(_DWORD *)(v8 + 24) != *((_DWORD *)a1 + 70))
  {
    (*(void (**)(_anonymous_namespace_ *))(*(_QWORD *)a1 + 40))(a1);
    re::HashTable<re::internal::SerializeFuncKey,BOOL (*)(re::Serializer<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL),re::internal::HashSerializeFuncKey,re::EqualTo<re::internal::SerializeFuncKey>,false,true>::clear((uint64_t)v7 + 288);
    *((_QWORD *)v7 + 34) = v8;
    re::HashTable<re::internal::SerializeFuncKey,BOOL (*)(re::Serializer<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL),re::internal::HashSerializeFuncKey,re::EqualTo<re::internal::SerializeFuncKey>,false,true>::clear((uint64_t)v7 + 288);
    re::Serializer<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>::registerSerializeFuncs(v7);
    a1 = (_anonymous_namespace_ *)(*(uint64_t (**)(_anonymous_namespace_ *))(*(_QWORD *)v7 + 32))(v7);
    *((_DWORD *)v7 + 70) = *(_DWORD *)(*((_QWORD *)v7 + 34) + 24);
  }
  *((_QWORD *)v7 + 3) = a2;
  *((_QWORD *)v7 + 4) = 0;
  *((_DWORD *)v7 + 10) = 0;
  if (!a3)
  {
  }
  *((_QWORD *)v7 + 6) = a3;
  if (!a4)
  {
  }
  *((_QWORD *)v7 + 7) = a4;
  v14[0] = 0;
  re::Optional<re::DetailedError>::operator=((uint64_t)v7 + 64, v14);
  if (v14[0] && *(_QWORD *)&v16[1] && (v16[3] & 1) != 0)
    (*(void (**)(void))(**(_QWORD **)&v16[1] + 40))();
  *((_QWORD *)v7 + 15) = *((_QWORD *)v7 + 6);
  re::DynamicArray<re::Encoder<re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>,re::DynamicArrayBufferedOutputStream>::State>::setCapacity((_QWORD *)v7 + 15, 0x40uLL);
  ++*((_DWORD *)v7 + 36);
  v14[0] = 0;
  v15 = 0u;
  memset(v16, 0, sizeof(v16));
  re::DynamicArray<re::Encoder<re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>,re::DynamicArrayBufferedOutputStream>::State>::add((_anonymous_namespace_ *)((char *)v7 + 120), (uint64_t)v14);
  if (!re::internal::RapidJSONAllocator::InstanceData::instance(void)::s_instance)
  {
  }
  *((_QWORD *)v7 + 27) = *((_QWORD *)v7 + 7);
  re::DynamicArray<char>::setCapacity((_QWORD *)v7 + 27, 0);
  ++*((_DWORD *)v7 + 60);
  v10 = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(**((_QWORD **)v7 + 6) + 32))(*((_QWORD *)v7 + 6), 64, 8);
  *(_OWORD *)v10 = 0u;
  *(_OWORD *)(v10 + 16) = 0u;
  *(_OWORD *)(v10 + 32) = 0u;
  *(_QWORD *)(v10 + 48) = 512;
  *(_DWORD *)(v10 + 56) = 324;
  *(_BYTE *)(v10 + 60) = 0;
  *((_QWORD *)v7 + 24) = v10;
  v11 = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(**((_QWORD **)v7 + 6) + 32))(*((_QWORD *)v7 + 6), 48, 8);
  *(_OWORD *)v11 = 0u;
  *(_OWORD *)(v11 + 16) = 0u;
  *(_QWORD *)(v11 + 32) = 0;
  *(_QWORD *)(v11 + 40) = 256;
  *((_QWORD *)v7 + 23) = v11;
  v12 = *((_QWORD *)v7 + 24);
  *(_QWORD *)v12 = v11;
  *(_BYTE *)(v12 + 60) = 0;
  *(_QWORD *)(v12 + 32) = *(_QWORD *)(v12 + 24);
  return (*(uint64_t (**)(_anonymous_namespace_ *))(*(_QWORD *)v7 + 48))(v7);
}

uint64_t re::ecs2::deserializeComponent<re::ecs2::ECSJSONDeserializer>@<X0>(_anonymous_namespace_ *a1@<X0>, _QWORD *a2@<X1>, uint64_t a3@<X2>, int a4@<W3>, uint64_t a5@<X8>)
{
  _QWORD *v10;
  void (**v12)(re::FixedArrayInputStream *__hidden);
  __int16 v13;
  _QWORD *v14;
  void *v15;
  uint64_t v16;
  int v17;
  int v18;
  uint64_t v19;
  uint64_t v20;

  v10[1] = 0;
  v10[2] = 0;
  *v10 = 0;
  v13 = 256;
  v12 = &off_24ED7C2E0;
  v14 = v10;
  v15 = &unk_24ED1E828;
  v16 = a3;
  v17 = a4;
  v18 = a4;
  v19 = 0;
  v20 = a4;
  re::ecs2::deserializeComponent<re::ecs2::ECSJSONDeserializer>((uint64_t)a1, a2, (uint64_t)&v12, a5);
  return re::internal::MemoryInputStream<re::FixedArray<char>>::~MemoryInputStream((uint64_t)&v12);
}

_anonymous_namespace_ *re::ecs2::serializeEntity<re::ecs2::ECSJSONSerializer>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  _anonymous_namespace_ *result;
  NSObject *v11;
  _BYTE *v12;
  char v13;
  char v14;
  __int128 v15;
  _anonymous_namespace_ *v16;
  char v17;
  _BYTE v18[23];
  uint8_t buf[16];
  uint64_t v20;
  __int128 v21;
  uint64_t v22;
  uint64_t v23;

  v23 = *MEMORY[0x24BDAC8D0];
  re::ecs2::serializeEntity<re::ecs2::ECSJSONSerializer>(a1, a2, a3);
  (*(void (**)(uint64_t))(*(_QWORD *)a1 + 56))(a1);
  result = re::Encoder<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,google::protobuf::io::ZeroCopyOutputStream>::close((_anonymous_namespace_ *)(a1 + 24));
  if (*(_BYTE *)(a1 + 64))
  {
    v11 = *re::assetTypesLogObjects(result);
    if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
    {
      v13 = *(_BYTE *)(a1 + 64);
      if (v13)
      {
        v15 = *(_OWORD *)(a1 + 72);
        re::DynamicString::DynamicString((re::DynamicString *)&v16, (const re::DynamicString *)(a1 + 88));
        v12 = (v17 & 1) != 0 ? *(_BYTE **)&v18[7] : v18;
      }
      else
      {
        v12 = v18;
      }
      *(_DWORD *)buf = 136315138;
      *(_QWORD *)&buf[4] = v12;
      _os_log_impl(&dword_224FE9000, v11, OS_LOG_TYPE_DEFAULT, "Serialization failed. Message: %s", buf, 0xCu);
      if (v13)
      {
        if (v16 && (v17 & 1) != 0)
          (*(void (**)(void))(*(_QWORD *)v16 + 40))();
      }
    }
    v14 = *(_BYTE *)(a1 + 64);
    if (v14)
    {
      v15 = *(_OWORD *)(a1 + 72);
      re::DynamicString::DynamicString((re::DynamicString *)&v16, (const re::DynamicString *)(a1 + 88));
    }
    *(_OWORD *)buf = v15;
    result = re::DynamicString::DynamicString((re::DynamicString *)&v20, (const re::DynamicString *)&v16);
    *(_BYTE *)a5 = 0;
    *(_OWORD *)(a5 + 8) = *(_OWORD *)buf;
    *(_QWORD *)(a5 + 24) = v20;
    *(_QWORD *)(a5 + 48) = v22;
    *(_OWORD *)(a5 + 32) = v21;
    v22 = 0;
    v20 = 0;
    v21 = 0uLL;
    if (v14)
    {
      result = v16;
      if (v16)
      {
        if ((v17 & 1) != 0)
          return (_anonymous_namespace_ *)(*(uint64_t (**)(void))(*(_QWORD *)v16 + 40))();
      }
    }
  }
  else
  {
    *(_BYTE *)a5 = 1;
  }
  return result;
}

void re::ecs2::serializeEntity<re::ecs2::ECSJSONSerializer>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  re::TypeRegistry *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void (*v13)(uint64_t, const char *, unint64_t, unint64_t *, _BYTE *, _BYTE *, _QWORD);
  uint64_t v14;
  size_t v15;
  const char *v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  int v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  char v28;
  unint64_t v29;
  unint64_t v30;
  unsigned __int8 v31;
  BOOL v32;
  BOOL v33;
  unsigned __int8 v34;
  BOOL v35;
  BOOL v36;
  size_t v37;
  rapidjson::internal *v38[2];
  _BYTE v39[8];
  _BYTE v40[39];
  char v41;

  if (!*(_BYTE *)(a1 + 64))
  {
    re::IntrospectionSharedLock::IntrospectionSharedLock((re::IntrospectionSharedLock *)&v41);
    v6 = *(re::TypeRegistry **)(a1 + 272);
    v38[0] = (rapidjson::internal *)0xD481AB84CBDDALL;
    v38[1] = (rapidjson::internal *)"Component*";
    re::TypeRegistry::typeInfo(v6, (const re::StringID *)v38, v39);
    re::StringID::destroyString((re::StringID *)v38);
    if (v39[0])
    {
      v12 = (*(uint64_t (**)(uint64_t, _BYTE *))(*(_QWORD *)a1 + 80))(a1, v40);
      if (v12)
      {
        v13 = (void (*)(uint64_t, const char *, unint64_t, unint64_t *, _BYTE *, _BYTE *, _QWORD))v12;
        if (re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>::beginObject(a1 + 24, "entity", 1, 0))
        {
          v38[0] = *(rapidjson::internal **)(a2 + 296);
          re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>::serializeInt<unsigned long long>(a1 + 24, "id", 1, v38, 0);
          v14 = *(_QWORD *)(a2 + 280);
          if (v14)
            v15 = strlen(*(const char **)(a2 + 280));
          else
            v15 = 0;
          v37 = v15;
          if (re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>::beginString(a1 + 24, "name", 2, (uint64_t *)&v37, 0))
          {
            if (v37)
              re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>::serializeString(a1 + 24, v14, 0);
            re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>::endString((_anonymous_namespace_ *)(a1 + 24));
          }
          v36 = (*(_BYTE *)(a2 + 288) & 8) != 0;
          re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>::serializeBool(a1 + 24, "isSelfActive", 10, (unsigned __int8 *)&v36, 0);
          if ((a3 & 2) != 0)
          {
            v23 = *(_DWORD *)(a2 + 288);
            LOBYTE(v30) = (v23 & 2) != 0;
            LOBYTE(v29) = (v23 & 0x20) != 0;
            v35 = (v23 & 4) != 0;
            v34 = BYTE1(v23) & 1;
            v33 = (v23 & 0x40) != 0;
            v32 = (v23 & 0x80) != 0;
            v31 = v23 & 1;
            re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>::serializeBool(a1 + 24, "isEnabledInHierarchy", 20, (unsigned __int8 *)&v30, 0);
            re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>::serializeBool(a1 + 24, "isSelfAnchored", 21, (unsigned __int8 *)&v29, 0);
            re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>::serializeBool(a1 + 24, "isAnchoredInHierarchy", 22, (unsigned __int8 *)&v35, 0);
            re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>::serializeBool(a1 + 24, "selfRequiresAnchoring", 23, &v34, 0);
            re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>::serializeBool(a1 + 24, "isGhosted", 24, (unsigned __int8 *)&v33, 0);
            re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>::serializeBool(a1 + 24, "isSceneEntity", 25, (unsigned __int8 *)&v32, 0);
            re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>::serializeBool(a1 + 24, "isActive", 26, &v31, 0);
          }
          v30 = *(_QWORD *)(a2 + 56);
          if (re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>::beginArray(a1 + 24, "components", 40, (uint64_t *)&v30, 0))
          {
            if (v30)
            {
              v24 = 0;
              while (!*(_BYTE *)(a1 + 64))
              {
                v29 = 0;
                v29 = *(_QWORD *)re::ecs2::EntityComponentCollection::operator[](a2 + 32, v24);
                v13(a1, "component", v24++, &v29, v40, v40, 0);
                if (v30 <= v24)
                  goto LABEL_22;
              }
              goto LABEL_31;
            }
LABEL_22:
            re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>::endArray((_anonymous_namespace_ *)(a1 + 24));
          }
          if ((a3 & 1) != 0)
          {
            v29 = *(_QWORD *)(a2 + 328);
            if (re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>::beginArray(a1 + 24, "children", 50, (uint64_t *)&v29, 0))
            {
              if (v29)
              {
                v25 = 0;
                v26 = a2 + 304;
                while (!*(_BYTE *)(a1 + 64))
                {
                  v27 = (_QWORD *)re::ecs2::EntityComponentCollection::operator[](v26, v25);
                  re::ecs2::serializeEntity<re::ecs2::ECSJSONSerializer>(a1, *v27, a3);
                  if (++v25 >= v29)
                    goto LABEL_29;
                }
                goto LABEL_31;
              }
LABEL_29:
              re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>::endArray((_anonymous_namespace_ *)(a1 + 24));
            }
          }
          re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>::endObject((_anonymous_namespace_ *)(a1 + 24));
        }
LABEL_31:
        re::IntrospectionSharedLock::~IntrospectionSharedLock((re::IntrospectionSharedLock *)&v41);
        return;
      }
      v17 = re::TypeInfo::name((re::TypeInfo *)v40);
      re::Serializer<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>::setError(a1, 0, "Failed to resolve serialize function for type \"%s\"", v18, v19, v20, v21, v22, v17[1]);
      v16 = "Failed to get serialization function for type \"Component*\".";
    }
    else
    {
      v16 = "Type \"Component*\" not found in type registry.";
    }
    re::Serializer<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>::setError(a1, "entity", v16, v7, v8, v9, v10, v11, v28);
    goto LABEL_31;
  }
}

void re::ecs2::serializeComponent<re::ecs2::ECSOPACKSerializer>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  re *v8;
  uint64_t v9;
  _anonymous_namespace_ *v10;
  re *v11;
  NSObject *v12;
  _BYTE *v13;
  uint64_t v14;
  re *v15;
  re *PrettyTypeName;
  NSObject *v17;
  char *v18;
  char *v19;
  __int128 v20;
  uint64_t v21;
  uint64_t v22;
  re *v23;
  _BYTE *v24;
  re *v25;
  __int128 v26;
  re *v27;
  char v28;
  _BYTE v29[7];
  _BYTE *v30;
  _BYTE v31[8];
  _BYTE v32[39];
  char v33;
  uint8_t buf[16];
  uint64_t v35;
  __int128 v36;
  uint64_t v37;
  uint64_t v38;

  v38 = *MEMORY[0x24BDAC8D0];
  v8 = *(re **)(a1 + 208);
  re::IntrospectionSharedLock::IntrospectionSharedLock((re::IntrospectionSharedLock *)&v33);
  v9 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 40))(a2);
  (*(void (**)(re **__return_ptr))(*(_QWORD *)v9 + 56))(&v25);
  re::TypeRegistry::typeInfo(v8, &v25, v31);
  if (v31[0])
  {
    if (!*(_BYTE *)(a1 + 64))
      (*(void (**)(uint64_t, const char *, uint64_t, uint64_t, _BYTE *, _BYTE *, _QWORD))(*(_QWORD *)a1 + 72))(a1, "component", 1, a2, v32, v32, 0);
    (*(void (**)(uint64_t))(*(_QWORD *)a1 + 56))(a1);
    v11 = (re *)re::Encoder<re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>,re::DynamicArrayBufferedOutputStream>::close((_BYTE *)(a1 + 24));
    if (*(_BYTE *)(a1 + 64))
    {
      v12 = *re::assetTypesLogObjects(v11);
      if (os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT))
      {
        LOBYTE(v25) = *(_BYTE *)(a1 + 64);
        if ((_BYTE)v25)
        {
          v26 = *(_OWORD *)(a1 + 72);
          re::DynamicString::DynamicString((re::DynamicString *)&v27, (const re::DynamicString *)(a1 + 88));
          v13 = (v28 & 1) != 0 ? v30 : v29;
        }
        else
        {
          v13 = v29;
        }
        *(_DWORD *)buf = 136315138;
        *(_QWORD *)&buf[4] = v13;
        _os_log_impl(&dword_224FE9000, v12, OS_LOG_TYPE_DEFAULT, "Serialization failed. Message: %s", buf, 0xCu);
        if ((_BYTE)v25)
        {
          if (v27 && (v28 & 1) != 0)
            (*(void (**)(void))(*(_QWORD *)v27 + 40))();
        }
      }
      LOBYTE(v25) = *(_BYTE *)(a1 + 64);
      if ((_BYTE)v25)
      {
        v26 = *(_OWORD *)(a1 + 72);
        re::DynamicString::DynamicString((re::DynamicString *)&v27, (const re::DynamicString *)(a1 + 88));
      }
      *(_OWORD *)buf = v26;
      re::DynamicString::DynamicString((re::DynamicString *)&v35, (const re::DynamicString *)&v27);
      *(_BYTE *)a4 = 0;
      *(_OWORD *)(a4 + 8) = *(_OWORD *)buf;
      *(_QWORD *)(a4 + 24) = v35;
      *(_QWORD *)(a4 + 48) = v37;
      *(_OWORD *)(a4 + 32) = v36;
      v37 = 0;
      v35 = 0;
      v36 = 0uLL;
      if ((_BYTE)v25)
      {
        v23 = v27;
        if (v27)
        {
          if ((v28 & 1) != 0)
          {
            v24 = v30;
            goto LABEL_33;
          }
        }
      }
    }
    else
    {
      *(_BYTE *)a4 = 1;
    }
  }
  else
  {
    v14 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 40))(a2);
    v15 = (re *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v14 + 48))(v14);
    PrettyTypeName = (re *)re::getPrettyTypeName(v15, (const re::IntrospectionBase *)&v25);
    v17 = *re::assetTypesLogObjects(PrettyTypeName);
    if (os_log_type_enabled(v17, OS_LOG_TYPE_DEFAULT))
    {
      if ((v26 & 1) != 0)
        v18 = (char *)*((_QWORD *)&v26 + 1);
      else
        v18 = (char *)&v26 + 1;
      *(_DWORD *)buf = 136315138;
      *(_QWORD *)&buf[4] = v18;
      _os_log_impl(&dword_224FE9000, v17, OS_LOG_TYPE_DEFAULT, "Serialization failed. Type info (\"%s\") not found.", buf, 0xCu);
    }
    if ((v26 & 1) != 0)
      v19 = (char *)*((_QWORD *)&v26 + 1);
    else
      v19 = (char *)&v26 + 1;
    re::DynamicString::format((re::DynamicString *)"Serialization failed. Type info (\"%s\") not found.", (re::DynamicString *)buf, v19);
    v20 = *(_OWORD *)buf;
    v21 = v35;
    v22 = v36;
    *(_BYTE *)a4 = 0;
    *(_QWORD *)(a4 + 8) = 400;
    *(_QWORD *)(a4 + 16) = &re::FoundationErrorCategory(void)::instance;
    *(_OWORD *)(a4 + 24) = v20;
    *(_QWORD *)(a4 + 40) = v21;
    *(_QWORD *)(a4 + 48) = v22;
    v23 = v25;
    if (v25 && (v26 & 1) != 0)
    {
      v24 = (_BYTE *)*((_QWORD *)&v26 + 1);
LABEL_33:
      (*(void (**)(re *, _BYTE *))(*(_QWORD *)v23 + 40))(v23, v24);
    }
  }
  re::IntrospectionSharedLock::~IntrospectionSharedLock((re::IntrospectionSharedLock *)&v33);
}

uint64_t re::ecs2::deserializeComponent<re::ecs2::ECSOPACKDeserializer>@<X0>(_anonymous_namespace_ *a1@<X0>, _QWORD *a2@<X1>, uint64_t a3@<X2>, int a4@<W3>, uint64_t a5@<X8>)
{
  _QWORD *v10;
  void (**v12)(re::FixedArrayInputStream *__hidden);
  __int16 v13;
  _QWORD *v14;
  void *v15;
  uint64_t v16;
  int v17;
  int v18;
  uint64_t v19;
  uint64_t v20;

  v10[1] = 0;
  v10[2] = 0;
  *v10 = 0;
  v13 = 256;
  v12 = &off_24ED7C2E0;
  v14 = v10;
  v15 = &unk_24ED1E828;
  v16 = a3;
  v17 = a4;
  v18 = a4;
  v19 = 0;
  v20 = a4;
  re::ecs2::deserializeComponent<re::ecs2::ECSOPACKDeserializer>((uint64_t)a1, a2, (uint64_t)&v12, a5);
  return re::internal::MemoryInputStream<re::FixedArray<char>>::~MemoryInputStream((uint64_t)&v12);
}

void re::ecs2::deserializeComponent<re::ecs2::ECSOPACKDeserializer>(uint64_t a1@<X0>, _QWORD *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  re *v8;
  uint64_t v9;
  _anonymous_namespace_ *v10;
  _anonymous_namespace_ *v11;
  re *v12;
  NSObject *v13;
  uint64_t v14;
  _BYTE *v15;
  uint64_t v16;
  re *v17;
  re *PrettyTypeName;
  NSObject *v19;
  char *v20;
  char *v21;
  __int128 v22;
  uint64_t v23;
  uint64_t v24;
  re *v25;
  _BYTE *v26;
  re *v27;
  __int128 v28;
  re *v29;
  char v30;
  _BYTE v31[7];
  _BYTE *v32;
  _BYTE v33[8];
  _BYTE v34[39];
  char v35;
  _BYTE buf[24];
  __int128 v37;
  uint64_t v38;
  uint64_t v39;

  v39 = *MEMORY[0x24BDAC8D0];
  v8 = *(re **)(a1 + 208);
  re::IntrospectionSharedLock::IntrospectionSharedLock((re::IntrospectionSharedLock *)&v35);
  v9 = (*(uint64_t (**)(_QWORD *))(*a2 + 40))(a2);
  (*(void (**)(re **__return_ptr))(*(_QWORD *)v9 + 56))(&v27);
  re::TypeRegistry::typeInfo(v8, &v27, v33);
  if (v33[0])
  {
    if (!*(_BYTE *)(a1 + 64))
      (*(void (**)(uint64_t, const char *, uint64_t, _QWORD *, _BYTE *, _BYTE *, _QWORD))(*(_QWORD *)a1 + 72))(a1, "component", 1, a2, v34, v34, 0);
    (*(void (**)(uint64_t))(*(_QWORD *)a1 + 56))(a1);
    v12 = (re *)re::Encoder<re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>,re::DynamicArrayBufferedOutputStream>::close((_BYTE *)(a1 + 24));
    if (*(_BYTE *)(a1 + 64))
    {
      v13 = *re::assetTypesLogObjects(v12);
      if (os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT))
      {
        v14 = re::TypeInfo::name((re::TypeInfo *)v34)[1];
        LOBYTE(v27) = *(_BYTE *)(a1 + 64);
        if ((_BYTE)v27)
        {
          v28 = *(_OWORD *)(a1 + 72);
          re::DynamicString::DynamicString((re::DynamicString *)&v29, (const re::DynamicString *)(a1 + 88));
          v15 = (v30 & 1) != 0 ? v32 : v31;
        }
        else
        {
          v15 = v31;
        }
        *(_DWORD *)buf = 136315394;
        *(_QWORD *)&buf[4] = v14;
        *(_WORD *)&buf[12] = 2080;
        *(_QWORD *)&buf[14] = v15;
        _os_log_impl(&dword_224FE9000, v13, OS_LOG_TYPE_DEFAULT, "Deserialization failed. Type \"%s\". Message: %s", buf, 0x16u);
        if ((_BYTE)v27)
        {
          if (v29 && (v30 & 1) != 0)
            (*(void (**)(void))(*(_QWORD *)v29 + 40))();
        }
      }
      LOBYTE(v27) = *(_BYTE *)(a1 + 64);
      if ((_BYTE)v27)
      {
        v28 = *(_OWORD *)(a1 + 72);
        re::DynamicString::DynamicString((re::DynamicString *)&v29, (const re::DynamicString *)(a1 + 88));
      }
      *(_OWORD *)buf = v28;
      re::DynamicString::DynamicString((re::DynamicString *)&buf[16], (const re::DynamicString *)&v29);
      *(_BYTE *)a4 = 0;
      *(_OWORD *)(a4 + 8) = *(_OWORD *)buf;
      *(_QWORD *)(a4 + 24) = *(_QWORD *)&buf[16];
      *(_QWORD *)(a4 + 48) = v38;
      *(_OWORD *)(a4 + 32) = v37;
      v38 = 0;
      *(_QWORD *)&buf[16] = 0;
      v37 = 0uLL;
      if ((_BYTE)v27)
      {
        v25 = v29;
        if (v29)
        {
          if ((v30 & 1) != 0)
          {
            v26 = v32;
            goto LABEL_33;
          }
        }
      }
    }
    else
    {
      re::ecs2::Component::markDirty(a2);
      *(_BYTE *)a4 = 1;
    }
  }
  else
  {
    v16 = (*(uint64_t (**)(_QWORD *))(*a2 + 40))(a2);
    v17 = (re *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v16 + 48))(v16);
    PrettyTypeName = (re *)re::getPrettyTypeName(v17, (const re::IntrospectionBase *)&v27);
    v19 = *re::assetTypesLogObjects(PrettyTypeName);
    if (os_log_type_enabled(v19, OS_LOG_TYPE_DEFAULT))
    {
      if ((v28 & 1) != 0)
        v20 = (char *)*((_QWORD *)&v28 + 1);
      else
        v20 = (char *)&v28 + 1;
      *(_DWORD *)buf = 136315138;
      *(_QWORD *)&buf[4] = v20;
      _os_log_impl(&dword_224FE9000, v19, OS_LOG_TYPE_DEFAULT, "Deserialization failed. Type info (\"%s\") not found.", buf, 0xCu);
    }
    if ((v28 & 1) != 0)
      v21 = (char *)*((_QWORD *)&v28 + 1);
    else
      v21 = (char *)&v28 + 1;
    re::DynamicString::format((re::DynamicString *)"Deserialization failed. Type info (\"%s\") not found.", (re::DynamicString *)buf, v21);
    v22 = *(_OWORD *)buf;
    v23 = *(_QWORD *)&buf[16];
    v24 = v37;
    *(_BYTE *)a4 = 0;
    *(_QWORD *)(a4 + 8) = 400;
    *(_QWORD *)(a4 + 16) = &re::FoundationErrorCategory(void)::instance;
    *(_OWORD *)(a4 + 24) = v22;
    *(_QWORD *)(a4 + 40) = v23;
    *(_QWORD *)(a4 + 48) = v24;
    v25 = v27;
    if (v27 && (v28 & 1) != 0)
    {
      v26 = (_BYTE *)*((_QWORD *)&v28 + 1);
LABEL_33:
      (*(void (**)(re *, _BYTE *))(*(_QWORD *)v25 + 40))(v25, v26);
    }
  }
  re::IntrospectionSharedLock::~IntrospectionSharedLock((re::IntrospectionSharedLock *)&v35);
}

re *re::ecs2::serializeEntity<re::ecs2::ECSOPACKSerializer>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  re *result;
  NSObject *v11;
  _BYTE *v12;
  char v13;
  char v14;
  __int128 v15;
  re *v16;
  char v17;
  _BYTE v18[23];
  uint8_t buf[16];
  uint64_t v20;
  __int128 v21;
  uint64_t v22;
  uint64_t v23;

  v23 = *MEMORY[0x24BDAC8D0];
  re::ecs2::serializeEntity<re::ecs2::ECSOPACKSerializer>(a1, a2, a3);
  (*(void (**)(uint64_t))(*(_QWORD *)a1 + 56))(a1);
  result = (re *)re::Encoder<re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>,re::DynamicArrayBufferedOutputStream>::close((_BYTE *)(a1 + 24));
  if (*(_BYTE *)(a1 + 64))
  {
    v11 = *re::assetTypesLogObjects(result);
    if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
    {
      v13 = *(_BYTE *)(a1 + 64);
      if (v13)
      {
        v15 = *(_OWORD *)(a1 + 72);
        re::DynamicString::DynamicString((re::DynamicString *)&v16, (const re::DynamicString *)(a1 + 88));
        v12 = (v17 & 1) != 0 ? *(_BYTE **)&v18[7] : v18;
      }
      else
      {
        v12 = v18;
      }
      *(_DWORD *)buf = 136315138;
      *(_QWORD *)&buf[4] = v12;
      _os_log_impl(&dword_224FE9000, v11, OS_LOG_TYPE_DEFAULT, "Serialization failed. Message: %s", buf, 0xCu);
      if (v13)
      {
        if (v16 && (v17 & 1) != 0)
          (*(void (**)(void))(*(_QWORD *)v16 + 40))();
      }
    }
    v14 = *(_BYTE *)(a1 + 64);
    if (v14)
    {
      v15 = *(_OWORD *)(a1 + 72);
      re::DynamicString::DynamicString((re::DynamicString *)&v16, (const re::DynamicString *)(a1 + 88));
    }
    *(_OWORD *)buf = v15;
    result = re::DynamicString::DynamicString((re::DynamicString *)&v20, (const re::DynamicString *)&v16);
    *(_BYTE *)a5 = 0;
    *(_OWORD *)(a5 + 8) = *(_OWORD *)buf;
    *(_QWORD *)(a5 + 24) = v20;
    *(_QWORD *)(a5 + 48) = v22;
    *(_OWORD *)(a5 + 32) = v21;
    v22 = 0;
    v20 = 0;
    v21 = 0uLL;
    if (v14)
    {
      result = v16;
      if (v16)
      {
        if ((v17 & 1) != 0)
          return (re *)(*(uint64_t (**)(void))(*(_QWORD *)v16 + 40))();
      }
    }
  }
  else
  {
    *(_BYTE *)a5 = 1;
  }
  return result;
}

void re::ecs2::serializeEntity<re::ecs2::ECSOPACKSerializer>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  re::TypeRegistry *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void (*v13)(uint64_t, const char *, unint64_t, unint64_t *, _BYTE *, _BYTE *, _QWORD);
  char *v14;
  size_t v15;
  const char *v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  int v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  char v28;
  unint64_t v29;
  unint64_t v30;
  char v31;
  BOOL v32;
  BOOL v33;
  char v34;
  BOOL v35;
  BOOL v36;
  size_t v37;
  uint64_t v38[2];
  _BYTE v39[8];
  _BYTE v40[39];
  char v41;

  if (!*(_BYTE *)(a1 + 64))
  {
    re::IntrospectionSharedLock::IntrospectionSharedLock((re::IntrospectionSharedLock *)&v41);
    v6 = *(re::TypeRegistry **)(a1 + 208);
    v38[0] = 0xD481AB84CBDDALL;
    v38[1] = (uint64_t)"Component*";
    re::TypeRegistry::typeInfo(v6, (const re::StringID *)v38, v39);
    re::StringID::destroyString((re::StringID *)v38);
    if (v39[0])
    {
      v12 = (*(uint64_t (**)(uint64_t, _BYTE *))(*(_QWORD *)a1 + 80))(a1, v40);
      if (v12)
      {
        v13 = (void (*)(uint64_t, const char *, unint64_t, unint64_t *, _BYTE *, _BYTE *, _QWORD))v12;
        if (re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>::beginObject(a1 + 24, "entity", 1, 0))
        {
          v38[0] = *(_QWORD *)(a2 + 296);
          re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>::serializeUnsignedInteger<unsigned long long>(a1 + 24, "id", 1, v38, 0);
          v14 = *(char **)(a2 + 280);
          if (v14)
            v15 = strlen(*(const char **)(a2 + 280));
          else
            v15 = 0;
          v37 = v15;
          if (re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>::beginString(a1 + 24, "name", 2, &v37, 0))
          {
            if (v37)
              re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>::serializeString(a1 + 24, v14, 0);
            re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>::endString((_anonymous_namespace_ *)(a1 + 24));
          }
          v36 = (*(_BYTE *)(a2 + 288) & 8) != 0;
          re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>::serializeBool(a1 + 24, "isSelfActive", 10, &v36, 0);
          if ((a3 & 2) != 0)
          {
            v23 = *(_DWORD *)(a2 + 288);
            LOBYTE(v30) = (v23 & 2) != 0;
            LOBYTE(v29) = (v23 & 0x20) != 0;
            v35 = (v23 & 4) != 0;
            v34 = BYTE1(v23) & 1;
            v33 = (v23 & 0x40) != 0;
            v32 = (v23 & 0x80) != 0;
            v31 = v23 & 1;
            re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>::serializeBool(a1 + 24, "isEnabledInHierarchy", 20, &v30, 0);
            re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>::serializeBool(a1 + 24, "isSelfAnchored", 21, &v29, 0);
            re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>::serializeBool(a1 + 24, "isAnchoredInHierarchy", 22, &v35, 0);
            re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>::serializeBool(a1 + 24, "selfRequiresAnchoring", 23, &v34, 0);
            re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>::serializeBool(a1 + 24, "isGhosted", 24, &v33, 0);
            re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>::serializeBool(a1 + 24, "isSceneEntity", 25, &v32, 0);
            re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>::serializeBool(a1 + 24, "isActive", 26, &v31, 0);
          }
          v30 = *(_QWORD *)(a2 + 56);
          if (re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>::beginArray(a1 + 24, "components", 40, &v30, 0))
          {
            if (v30)
            {
              v24 = 0;
              while (!*(_BYTE *)(a1 + 64))
              {
                v29 = 0;
                v29 = *(_QWORD *)re::ecs2::EntityComponentCollection::operator[](a2 + 32, v24);
                v13(a1, "component", v24++, &v29, v40, v40, 0);
                if (v30 <= v24)
                  goto LABEL_22;
              }
              goto LABEL_31;
            }
LABEL_22:
            re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>::endArray((_anonymous_namespace_ *)(a1 + 24));
          }
          if ((a3 & 1) != 0)
          {
            v29 = *(_QWORD *)(a2 + 328);
            if (re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>::beginArray(a1 + 24, "children", 50, &v29, 0))
            {
              if (v29)
              {
                v25 = 0;
                v26 = a2 + 304;
                while (!*(_BYTE *)(a1 + 64))
                {
                  v27 = (_QWORD *)re::ecs2::EntityComponentCollection::operator[](v26, v25);
                  re::ecs2::serializeEntity<re::ecs2::ECSOPACKSerializer>(a1, *v27, a3);
                  if (++v25 >= v29)
                    goto LABEL_29;
                }
                goto LABEL_31;
              }
LABEL_29:
              re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>::endArray((_anonymous_namespace_ *)(a1 + 24));
            }
          }
          re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>::endObject((_anonymous_namespace_ *)(a1 + 24));
        }
LABEL_31:
        re::IntrospectionSharedLock::~IntrospectionSharedLock((re::IntrospectionSharedLock *)&v41);
        return;
      }
      v17 = re::TypeInfo::name((re::TypeInfo *)v40);
      re::Serializer<re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>>::setError(a1, 0, "Failed to resolve serialize function for type \"%s\"", v18, v19, v20, v21, v22, v17[1]);
      v16 = "Failed to get serialization function for type \"Component*\".";
    }
    else
    {
      v16 = "Type \"Component*\" not found in type registry.";
    }
    re::Serializer<re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>>::setError(a1, "entity", v16, v7, v8, v9, v10, v11, v28);
    goto LABEL_31;
  }
}

uint64_t re::Serializer<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>::~Serializer(uint64_t a1)
{
  double v2;
  uint64_t v3;

  *(_QWORD *)a1 = &off_24ED373A0;
  if (*(_QWORD *)(a1 + 272))
  {
    re::HashTable<re::internal::SerializeFuncKey,BOOL (*)(re::Serializer<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL),re::internal::HashSerializeFuncKey,re::EqualTo<re::internal::SerializeFuncKey>,false,true>::clear(a1 + 288);
    *(_QWORD *)(a1 + 272) = 0;
  }
  v2 = re::HashTable<re::internal::SerializeFuncKey,BOOL (*)(re::Serializer<re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL),re::internal::HashSerializeFuncKey,re::EqualTo<re::internal::SerializeFuncKey>,false,true>::deinit((uint64_t *)(a1 + 288));
  v3 = *(_QWORD *)(a1 + 216);
  if (v3)
  {
    if (*(_QWORD *)(a1 + 248))
      (*(void (**)(uint64_t, double))(*(_QWORD *)v3 + 40))(v3, v2);
    *(_QWORD *)(a1 + 248) = 0;
    *(_QWORD *)(a1 + 224) = 0;
    *(_QWORD *)(a1 + 232) = 0;
    *(_QWORD *)(a1 + 216) = 0;
    ++*(_DWORD *)(a1 + 240);
  }
  re::Encoder<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,google::protobuf::io::ZeroCopyOutputStream>::~Encoder(a1 + 24);
  re::StringID::destroyString((re::StringID *)(a1 + 8));
  return a1;
}

uint64_t re::SerializerV1<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>::~SerializerV1(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  *(_QWORD *)a1 = &off_24ED37338;
  v2 = *(_QWORD *)(a1 + 472);
  if (v2)
  {
    if (*(_QWORD *)(a1 + 504))
      (*(void (**)(uint64_t))(*(_QWORD *)v2 + 40))(v2);
    *(_QWORD *)(a1 + 504) = 0;
    *(_QWORD *)(a1 + 480) = 0;
    *(_QWORD *)(a1 + 488) = 0;
    *(_QWORD *)(a1 + 472) = 0;
    ++*(_DWORD *)(a1 + 496);
  }
  v3 = *(_QWORD *)(a1 + 432);
  if (v3)
  {
    if (*(_QWORD *)(a1 + 464))
      (*(void (**)(uint64_t))(*(_QWORD *)v3 + 40))(v3);
    *(_QWORD *)(a1 + 464) = 0;
    *(_QWORD *)(a1 + 440) = 0;
    *(_QWORD *)(a1 + 448) = 0;
    *(_QWORD *)(a1 + 432) = 0;
    ++*(_DWORD *)(a1 + 456);
  }
  v4 = *(_QWORD *)(a1 + 392);
  if (v4)
  {
    if (*(_QWORD *)(a1 + 424))
      (*(void (**)(uint64_t))(*(_QWORD *)v4 + 40))(v4);
    *(_QWORD *)(a1 + 424) = 0;
    *(_QWORD *)(a1 + 400) = 0;
    *(_QWORD *)(a1 + 408) = 0;
    *(_QWORD *)(a1 + 392) = 0;
    ++*(_DWORD *)(a1 + 416);
  }
  re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)(a1 + 344));
  return re::Serializer<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>::~Serializer(a1);
}

void re::SerializerV1<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>::~SerializerV1(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  *(_QWORD *)a1 = &off_24ED37338;
  v2 = *(_QWORD *)(a1 + 472);
  if (v2)
  {
    if (*(_QWORD *)(a1 + 504))
      (*(void (**)(uint64_t))(*(_QWORD *)v2 + 40))(v2);
    *(_QWORD *)(a1 + 504) = 0;
    *(_QWORD *)(a1 + 480) = 0;
    *(_QWORD *)(a1 + 488) = 0;
    *(_QWORD *)(a1 + 472) = 0;
    ++*(_DWORD *)(a1 + 496);
  }
  v3 = *(_QWORD *)(a1 + 432);
  if (v3)
  {
    if (*(_QWORD *)(a1 + 464))
      (*(void (**)(uint64_t))(*(_QWORD *)v3 + 40))(v3);
    *(_QWORD *)(a1 + 464) = 0;
    *(_QWORD *)(a1 + 440) = 0;
    *(_QWORD *)(a1 + 448) = 0;
    *(_QWORD *)(a1 + 432) = 0;
    ++*(_DWORD *)(a1 + 456);
  }
  v4 = *(_QWORD *)(a1 + 392);
  if (v4)
  {
    if (*(_QWORD *)(a1 + 424))
      (*(void (**)(uint64_t))(*(_QWORD *)v4 + 40))(v4);
    *(_QWORD *)(a1 + 424) = 0;
    *(_QWORD *)(a1 + 400) = 0;
    *(_QWORD *)(a1 + 408) = 0;
    *(_QWORD *)(a1 + 392) = 0;
    ++*(_DWORD *)(a1 + 416);
  }
  re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)(a1 + 344));
  re::Serializer<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>::~Serializer(a1);
  JUMPOUT(0x2276933B8);
}

_QWORD *re::SerializerV1<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>::trackObject(uint64_t a1, uint64_t a2, __int128 *a3)
{
  __int128 v4;

  v4 = *a3;
  return re::internal::SharedObjectGraph::beginObject((_QWORD *)(a1 + 336), a2, &v4);
}

uint64_t re::SerializerV1<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>::untrackObject(uint64_t result)
{
  if (*(_BYTE *)(result + 336))
  {
    --*(_QWORD *)(result + 488);
    ++*(_DWORD *)(result + 496);
  }
  return result;
}

void re::SerializerV1<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>::doOpen(uint64_t a1)
{
  *(_BYTE *)(a1 + 337) = 0;
  re::HashTable<void const*,unsigned int,re::Hash<void const*>,re::EqualTo<void const*>,true,false>::clear(a1 + 344);
  *(_QWORD *)(a1 + 408) = 0;
  ++*(_DWORD *)(a1 + 416);
  *(_QWORD *)(a1 + 448) = 0;
  ++*(_DWORD *)(a1 + 456);
  *(_QWORD *)(a1 + 488) = 0;
  ++*(_DWORD *)(a1 + 496);
}

void re::SerializerV1<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>::doClose(uint64_t a1)
{
  re::HashTable<void const*,unsigned int,re::Hash<void const*>,re::EqualTo<void const*>,true,false>::clear(a1 + 344);
  *(_QWORD *)(a1 + 408) = 0;
  ++*(_DWORD *)(a1 + 416);
  *(_QWORD *)(a1 + 448) = 0;
  ++*(_DWORD *)(a1 + 456);
  *(_QWORD *)(a1 + 488) = 0;
  ++*(_DWORD *)(a1 + 496);
}

void re::Serializer<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>::doRegisterSerializeFuncs(uint64_t a1)
{
  uint64_t v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD v10[2];
  uint64_t v11;
  const char *v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  BOOL (*v16)(uint64_t, const char *, const re::TypeInfo *, uint64_t, re *, const re::TypeInfo *, int);

  v11 = 6059476;
  v12 = "BOOL";
  re::Serializer<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>::registerSerializeFunc(a1, &v11, (uint64_t)re::serializeBool<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>);
  re::StringID::destroyString((re::StringID *)&v11);
  v11 = 6104748;
  v12 = "char";
  re::Serializer<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>::registerSerializeFunc(a1, &v11, (uint64_t)re::serializeChar<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>);
  re::StringID::destroyString((re::StringID *)&v11);
  v11 = 0x172E117BCLL;
  v12 = "int8_t";
  re::Serializer<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>::registerSerializeFunc(a1, &v11, (uint64_t)re::serializeI8<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>);
  re::StringID::destroyString((re::StringID *)&v11);
  v11 = 0x2CE93A4A92;
  v12 = "int16_t";
  re::Serializer<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>::registerSerializeFunc(a1, &v11, (uint64_t)re::serializeI16<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>);
  re::StringID::destroyString((re::StringID *)&v11);
  v11 = 0x2CE93BFE06;
  v12 = "int32_t";
  re::Serializer<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>::registerSerializeFunc(a1, &v11, (uint64_t)re::serializeI32<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>);
  re::StringID::destroyString((re::StringID *)&v11);
  v11 = 0x2CE93EC744;
  v12 = "int64_t";
  re::Serializer<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>::registerSerializeFunc(a1, &v11, (uint64_t)re::serializeI64<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>);
  re::StringID::destroyString((re::StringID *)&v11);
  v11 = 6655224;
  v12 = "long";
  re::Serializer<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>::registerSerializeFunc(a1, &v11, (uint64_t)re::serializeI64<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>);
  re::StringID::destroyString((re::StringID *)&v11);
  v11 = 0x31CD534126;
  v12 = "uint8_t";
  re::Serializer<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>::registerSerializeFunc(a1, &v11, (uint64_t)re::serializeU8<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>);
  re::StringID::destroyString((re::StringID *)&v11);
  v11 = 0x607DD0D4E68;
  v12 = "uint16_t";
  re::Serializer<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>::registerSerializeFunc(a1, &v11, (uint64_t)re::serializeU16<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>);
  re::StringID::destroyString((re::StringID *)&v11);
  v11 = 0x607DD0F01DCLL;
  v12 = "uint32_t";
  re::Serializer<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>::registerSerializeFunc(a1, &v11, (uint64_t)re::serializeU32<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>);
  re::StringID::destroyString((re::StringID *)&v11);
  v11 = 0x607DD11CB1ALL;
  v12 = "uint64_t";
  re::Serializer<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>::registerSerializeFunc(a1, &v11, (uint64_t)re::serializeU64<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>);
  re::StringID::destroyString((re::StringID *)&v11);
  v11 = 0x1947BDF6CLL;
  v12 = "size_t";
  re::Serializer<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>::registerSerializeFunc(a1, &v11, (uint64_t)re::serializeU64<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>);
  re::StringID::destroyString((re::StringID *)&v11);
  v11 = 195052728;
  v12 = "float";
  re::Serializer<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>::registerSerializeFunc(a1, &v11, (uint64_t)re::serializeFloat<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>);
  re::StringID::destroyString((re::StringID *)&v11);
  v11 = 0x161EEF7A2;
  v12 = "double";
  re::Serializer<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>::registerSerializeFunc(a1, &v11, (uint64_t)re::serializeDouble<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>);
  re::StringID::destroyString((re::StringID *)&v11);
  v11 = 189247272;
  v12 = "char*";
  re::Serializer<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>::registerSerializeFunc(a1, &v11, (uint64_t)re::serializeCString<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>);
  re::StringID::destroyString((re::StringID *)&v11);
  v11 = 0x2686EB529B3EE220;
  v12 = "DynamicString";
  re::Serializer<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>::registerSerializeFunc(a1, &v11, (uint64_t)re::serializeDynamicString<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>);
  re::StringID::destroyString((re::StringID *)&v11);
  v11 = 0x458DDB01A18;
  v12 = "StringID";
  re::Serializer<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>::registerSerializeFunc(a1, &v11, (uint64_t)re::serializeStringID<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>);
  re::StringID::destroyString((re::StringID *)&v11);
  v2 = *(_QWORD *)(a1 + 272);
  v11 = 0x258C98EAAF29A10ALL;
  v12 = "CallbackSerializerAttribute";
  v3 = (uint64_t *)re::HashTable<re::StringID,re::StateParameterInt *,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::tryGet(v2 + 200, &v11);
  if (v3)
  {
    v4 = *v3;
    re::StringID::destroyString((re::StringID *)&v11);
    if (v2)
    {
      v5 = *(_QWORD *)(a1 + 272);
      v10[0] = v2;
      v10[1] = v4;
      re::TypeRegistry::attributesByAttributeType(v5, (uint64_t)v10, (uint64_t)&v11);
      if (v13)
      {
        v6 = a1 + 288;
        v7 = (uint64_t *)(v14 + 24);
        v8 = 48 * v13;
        do
        {
          v9 = *v7;
          v7 += 6;
          v16 = re::serializeIntrospectionCallbackSerializer<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>;
          v15 = v9 | 0xFFFFFFFF00000000;
          re::HashTable<re::internal::SerializeFuncKey,BOOL (*)(re::Serializer<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL),re::internal::HashSerializeFuncKey,re::EqualTo<re::internal::SerializeFuncKey>,false,true>::addOrReplace<BOOL (*&)(re::Serializer<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)>(v6, &v15, &v16);
          v8 -= 48;
        }
        while (v8);
      }
      if (v11)
      {
        if (v14)
          (*(void (**)(void))(*(_QWORD *)v11 + 40))();
      }
    }
  }
  else
  {
    re::StringID::destroyString((re::StringID *)&v11);
  }
}

uint64_t re::SerializerV1<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>::doSerialize(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, re::TypeInfo *a5, uint64_t a6, uint64_t a7)
{
  _BYTE *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t (*v18)(uint64_t, uint64_t, uint64_t, uint64_t, re::TypeInfo *, uint64_t, uint64_t);
  uint64_t result;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  __int128 v26;

  v14 = (_BYTE *)(a1 + 336);
  v15 = *(_QWORD *)(a1 + 488);
  if (!v15)
  {
    if ((_DWORD)a7)
      v16 = 0;
    else
      v16 = a4;
    v17 = **((_QWORD **)a5 + 2);
    *(_QWORD *)&v26 = *(_QWORD *)a5;
    *((_QWORD *)&v26 + 1) = v17;
    re::internal::SharedObjectGraph::beginObject((_QWORD *)(a1 + 336), v16, &v26);
  }
  v18 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, re::TypeInfo *, uint64_t, uint64_t))(*(uint64_t (**)(uint64_t, re::TypeInfo *))(*(_QWORD *)a1 + 80))(a1, a5);
  if (v18)
  {
    result = v18(a1, a2, a3, a4, a5, a6, a7);
    if (!v15)
    {
      if (*v14)
      {
        --*(_QWORD *)(a1 + 488);
        ++*(_DWORD *)(a1 + 496);
      }
    }
  }
  else
  {
    v20 = re::TypeInfo::name(a5);
    re::Serializer<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>::setError(a1, 0, "Failed to resolve serialize function for type \"%s\"", v21, v22, v23, v24, v25, v20[1]);
    return 0;
  }
  return result;
}

uint64_t (*re::SerializerV1<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>::doResolveSerializeFunc(uint64_t a1, re::TypeInfo *this))(uint64_t a1, const char *a2, uint64_t a3, char **a4, re::TypeInfo *this, const re::TypeInfo *a6, char a7)
{
  uint64_t *v4;
  uint64_t v5;
  char *v6;
  unsigned int v7;
  uint64_t (*result)(uint64_t, const char *, uint64_t, char **, re::TypeInfo *, const re::TypeInfo *, char);
  uint64_t v9;
  uint64_t v10;

  v4 = re::TypeInfo::name(this);
  if ((unint64_t)*v4 >> 1 == 94623636)
  {
    v6 = (char *)v4[1];
    if (v6 == "char*" || !strcmp(v6, "char*"))
      return (uint64_t (*)(uint64_t, const char *, uint64_t, char **, re::TypeInfo *, const re::TypeInfo *, char))re::SerializerV1<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>::serializeCString;
  }
  if (*((_BYTE *)this + 12) == 9)
  {
    v7 = *(unsigned __int8 *)(*((_QWORD *)this + 2) + 80);
    if (v7 >= 2)
    {
      if (v7 == 2)
      {
        re::internal::assertLog((re::internal *)4, v5, "assertion failure: '%s' (%s:line %i) External references are not supported by the SerializerV1.", "!\"Unreachable code\"", "doResolveSerializeFunc", 82);
        _os_crash();
        __break(1u);
      }
      re::internal::assertLog((re::internal *)4, v5, "assertion failure: '%s' (%s:line %i) Invalid PointerSharing type.", "!\"Unreachable code\"", "doResolveSerializeFunc", 84);
      result = (uint64_t (*)(uint64_t, const char *, uint64_t, char **, re::TypeInfo *, const re::TypeInfo *, char))_os_crash();
      __break(1u);
    }
    else
    {
      return re::SerializerV1<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>::serializePointer;
    }
  }
  else if (*(_QWORD *)this == *(_QWORD *)(a1 + 272)
         && (LODWORD(v10) = **((_QWORD **)this + 2),
             HIDWORD(v10) = -1,
             (v9 = re::HashTable<re::internal::SerializeFuncKey,BOOL (*)(re::Serializer<re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL),re::internal::HashSerializeFuncKey,re::EqualTo<re::internal::SerializeFuncKey>,false,true>::tryGet(a1 + 288, &v10)) != 0))
  {
    return *(uint64_t (**)(uint64_t, const char *, uint64_t, char **, re::TypeInfo *, const re::TypeInfo *, char))v9;
  }
  else
  {
    return (uint64_t (*)(uint64_t, const char *, uint64_t, char **, re::TypeInfo *, const re::TypeInfo *, char))re::serializeType<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>;
  }
  return result;
}

void re::Serializer<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>::~Serializer(uint64_t a1)
{
  re::Serializer<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>::~Serializer(a1);
  JUMPOUT(0x2276933B8);
}

uint64_t re::Serializer<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>::doSerialize(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, re::TypeInfo *a5, uint64_t a6, uint64_t a7)
{
  uint64_t (*v14)(uint64_t, uint64_t, uint64_t, uint64_t, re::TypeInfo *, uint64_t, uint64_t);
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;

  v14 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, re::TypeInfo *, uint64_t, uint64_t))(*(uint64_t (**)(uint64_t, re::TypeInfo *))(*(_QWORD *)a1 + 80))(a1, a5);
  if (v14)
    return v14(a1, a2, a3, a4, a5, a6, a7);
  v16 = re::TypeInfo::name(a5);
  re::Serializer<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>::setError(a1, 0, "Failed to resolve serialize function for type \"%s\"", v17, v18, v19, v20, v21, v16[1]);
  return 0;
}

uint64_t (*re::Serializer<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>::doResolveSerializeFunc(uint64_t a1, uint64_t a2))(_BYTE *a1, const char *a2, const re::TypeInfo *a3, unsigned __int16 *a4, re::TypeInfo *this, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v3;
  uint64_t v4;

  if (*(_QWORD *)a2 == *(_QWORD *)(a1 + 272)
    && (LODWORD(v4) = **(_QWORD **)(a2 + 16),
        HIDWORD(v4) = -1,
        (v3 = re::HashTable<re::internal::SerializeFuncKey,BOOL (*)(re::Serializer<re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL),re::internal::HashSerializeFuncKey,re::EqualTo<re::internal::SerializeFuncKey>,false,true>::tryGet(a1 + 288, &v4)) != 0))
  {
    return *(uint64_t (**)(_BYTE *, const char *, const re::TypeInfo *, unsigned __int16 *, re::TypeInfo *, uint64_t, uint64_t, uint64_t))v3;
  }
  else
  {
    return re::serializeType<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>;
  }
}

void re::HashTable<re::internal::SerializeFuncKey,BOOL (*)(re::Serializer<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL),re::internal::HashSerializeFuncKey,re::EqualTo<re::internal::SerializeFuncKey>,false,true>::clear(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  int v8;

  if (*(_DWORD *)(a1 + 28))
  {
    v2 = *(unsigned int *)(a1 + 24);
    if ((_DWORD)v2)
      memset_pattern16(*(void **)(a1 + 8), &memset_pattern_9, 4 * v2);
    v3 = *(unsigned int *)(a1 + 32);
    if ((_DWORD)v3)
    {
      v4 = 0;
      v5 = 24 * v3;
      do
      {
        v6 = *(_QWORD *)(a1 + 16);
        v7 = *(_DWORD *)(v6 + v4);
        if (v7 < 0)
          *(_DWORD *)(v6 + v4) = v7 & 0x7FFFFFFF;
        v4 += 24;
      }
      while (v5 != v4);
    }
    *(_DWORD *)(a1 + 28) = 0;
    *(_DWORD *)(a1 + 32) = 0;
    v8 = *(_DWORD *)(a1 + 40) + 1;
    *(_DWORD *)(a1 + 36) = 0x7FFFFFFF;
    *(_DWORD *)(a1 + 40) = v8;
  }
}

uint64_t re::Encoder<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,google::protobuf::io::ZeroCopyOutputStream>::~Encoder(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  re::Encoder<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,google::protobuf::io::ZeroCopyOutputStream>::close((_anonymous_namespace_ *)a1);
  v2 = *(_QWORD *)(a1 + 96);
  if (v2)
  {
    if (*(_QWORD *)(a1 + 128))
      (*(void (**)(uint64_t))(*(_QWORD *)v2 + 40))(v2);
    *(_QWORD *)(a1 + 128) = 0;
    *(_QWORD *)(a1 + 104) = 0;
    *(_QWORD *)(a1 + 112) = 0;
    *(_QWORD *)(a1 + 96) = 0;
    ++*(_DWORD *)(a1 + 120);
  }
  if (*(_BYTE *)(a1 + 40))
  {
    v3 = *(_QWORD *)(a1 + 64);
    if (v3)
    {
      if ((*(_BYTE *)(a1 + 72) & 1) != 0)
        (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v3 + 40))(v3, *(_QWORD *)(a1 + 80));
      *(_OWORD *)(a1 + 64) = 0u;
      *(_OWORD *)(a1 + 80) = 0u;
    }
  }
  return a1;
}

_anonymous_namespace_ *re::Encoder<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,google::protobuf::io::ZeroCopyOutputStream>::close(_anonymous_namespace_ *result)
{
  _anonymous_namespace_ *v1;

  if (*(_QWORD *)result)
  {
    v1 = result;
    re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>::doClose(result);
    if (!*((_BYTE *)v1 + 40))
      re::Encoder<re::EncoderBinary<re::SeekableInputStream>,re::SeekableInputStream>::popState(v1, 0);
    result = (_anonymous_namespace_ *)*((_QWORD *)v1 + 12);
    if (result)
    {
      if (*((_QWORD *)v1 + 16))
        result = (_anonymous_namespace_ *)(*(uint64_t (**)(_anonymous_namespace_ *))(*(_QWORD *)result + 40))(result);
      *((_QWORD *)v1 + 16) = 0;
      *((_QWORD *)v1 + 13) = 0;
      *((_QWORD *)v1 + 14) = 0;
      *((_QWORD *)v1 + 12) = 0;
      ++*((_DWORD *)v1 + 30);
    }
    if (*((int *)v1 + 4) >= 1)
    {
      result = (_anonymous_namespace_ *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)v1 + 24))(*(_QWORD *)v1);
      *((_QWORD *)v1 + 1) = 0;
      *((_DWORD *)v1 + 4) = 0;
    }
    *(_QWORD *)v1 = 0;
    *((_QWORD *)v1 + 3) = 0;
    *((_QWORD *)v1 + 4) = 0;
  }
  return result;
}

_QWORD *re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>::doClose(_QWORD *result)
{
  uint64_t v1;
  char *String;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char v9;

  if (result[21])
  {
    v1 = (uint64_t)result;
    result = (_QWORD *)result[20];
    if (result)
    {
      String = (char *)rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>::GetString(result);
      v3 = re::Encoder<re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>,re::DynamicArrayBufferedOutputStream>::process<re::DynamicArrayBufferedOutputStream,0>((_QWORD *)v1, String, *(_QWORD *)(*(_QWORD *)(v1 + 160) + 24) - *(_QWORD *)(*(_QWORD *)(v1 + 160) + 16));
      if ((v3 & 1) == 0)
      {
        re::Encoder<re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>,re::DynamicArrayBufferedOutputStream>::setError(v1, (uint64_t)&v8);
        if (v8)
        {
          if ((v9 & 1) != 0)
            (*(void (**)(void))(*(_QWORD *)v8 + 40))();
        }
      }
      v4 = *(_QWORD *)(v1 + 160);
      if (v4)
      {
        v5 = *(_QWORD *)(v1 + 24);
        rapidjson::internal::Stack<re::internal::RapidJSONAllocator>::Destroy(*(_QWORD *)(v1 + 160));
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v5 + 40))(v5, v4);
      }
      *(_QWORD *)(v1 + 160) = 0;
      v6 = *(_QWORD *)(v1 + 168);
      if (v6)
      {
        v7 = *(_QWORD *)(v1 + 24);
        rapidjson::internal::Stack<re::internal::RapidJSONAllocator>::Destroy(v6 + 8);
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v7 + 40))(v7, v6);
      }
      result = *(_QWORD **)(v1 + 192);
      *(_QWORD *)(v1 + 168) = 0;
      if (result)
      {
        if (*(_QWORD *)(v1 + 224))
          result = (_QWORD *)(*(uint64_t (**)(_QWORD *))(*result + 40))(result);
        *(_QWORD *)(v1 + 224) = 0;
        *(_QWORD *)(v1 + 200) = 0;
        *(_QWORD *)(v1 + 208) = 0;
        *(_QWORD *)(v1 + 192) = 0;
        ++*(_DWORD *)(v1 + 216);
      }
    }
  }
  return result;
}

uint64_t re::serializeType<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>(_BYTE *a1, const char *a2, const re::TypeInfo *a3, unsigned __int16 *a4, re::TypeInfo *this, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  BOOL v18;
  uint64_t v19;
  int v20;
  uint64_t v21;
  int v22;
  uint64_t result;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;

  if (this != (re::TypeInfo *)a6)
  {
    if (*(_QWORD *)this == *(_QWORD *)a6)
    {
      v15 = **((_QWORD **)this + 2);
      v16 = **(_QWORD **)(a6 + 16);
      if ((unsigned __int16)v15 == (unsigned __int16)v16)
      {
        v18 = WORD1(v15) == WORD1(v16);
        v17 = (v16 ^ v15) & 0xFFFFFF00000000;
        v18 = v18 && v17 == 0;
        if (v18)
          goto LABEL_19;
      }
    }
    else if (re::areSameTranslatedVersion(this, (const re::TypeInfo *)a6, a3))
    {
      goto LABEL_19;
    }
    if (*((unsigned __int8 *)this + 12) == *(unsigned __int8 *)(a6 + 12))
    {
      v19 = re::DataArray<re::TextureAtlasTile>::tryGet(*(_QWORD *)this + 96, **((_QWORD **)this + 2));
      if (v19)
        v20 = *(_DWORD *)(v19 + 16);
      else
        v20 = -1;
      v21 = re::DataArray<re::TextureAtlasTile>::tryGet(*(_QWORD *)a6 + 96, **(_QWORD **)(a6 + 16));
      if (v21)
        v22 = *(_DWORD *)(v21 + 16);
      else
        v22 = -1;
      if (v20 == v22)
        goto LABEL_19;
      v24 = re::TypeInfo::name(this)[1];
      re::DataArray<re::TextureAtlasTile>::tryGet(*(_QWORD *)this + 96, **((_QWORD **)this + 2));
      re::DataArray<re::TextureAtlasTile>::tryGet(*(_QWORD *)a6 + 96, **(_QWORD **)(a6 + 16));
      re::Serializer<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>::setError((uint64_t)a1, a2, "Cannot serialize type \"%s\" version %u as version %u. Downgrading versions is not supported.", v30, v31, v32, v33, v34, v24);
    }
    else
    {
      re::internal::setTypeMismatchError<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>((uint64_t)a1, a2, this, (re::TypeInfo *)a6);
    }
    return 0;
  }
LABEL_19:
  switch(*((_BYTE *)this + 12))
  {
    case 1:
      result = re::serializeBasic<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>((uint64_t)a1, a2, a3, a4, this, (const re::TypeInfo *)a6, a7);
      break;
    case 2:
      result = re::serializeEnum<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>((uint64_t)a1, a2, a3, (re::TypeInfo *)a4, (uint64_t)this, a6, a7);
      break;
    case 3:
      result = re::serializeOptional<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>((uint64_t)a1, a2, a3, (uint64_t)a4, this, (const re::TypeInfo *)a6, a7);
      break;
    case 4:
      result = re::serializeArray<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>(a1, a2, a3, (char *)a4, this, (const re::TypeInfo *)a6, a7);
      break;
    case 5:
      result = re::serializeList<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>((uint64_t)a1, a2, a3, (uint64_t)a4, this, (const re::TypeInfo *)a6, a7);
      break;
    case 6:
      result = re::serializeDictionary<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>((uint64_t)a1, a2, a3, (uint64_t)a4, (unsigned __int8 *)this, (unsigned __int8 *)a6, a7);
      break;
    case 7:
      result = re::serializeUnion<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>(a1, a2, a3, (char *)a4, this, (re::TypeInfo *)a6, a7);
      break;
    case 8:
      result = re::serializeObject<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>((uint64_t)a1, a2, (uint64_t)a3, (uint64_t)a4, this, a6, a7);
      break;
    case 9:
      v35 = re::TypeInfo::name(this)[1];
      re::Serializer<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>::setError((uint64_t)a1, a2, "Pointer type (\"%s\") needs to be handled explicitly by the serializer.", v25, v26, v27, v28, v29, v35);
      return 0;
    default:
      re::Serializer<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>::setError((uint64_t)a1, a2, "Invalid type category. Value = %d", (uint64_t)a4, (uint64_t)this, a6, a7, a8, *((_BYTE *)this + 12));
      return 0;
  }
  return result;
}

BOOL re::serializeBasic<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>(uint64_t a1, const char *a2, const re::TypeInfo *a3, unsigned __int16 *a4, re::TypeInfo *this, const re::TypeInfo *a6, char a7)
{
  uint64_t *v14;
  unint64_t v15;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  BOOL v21;
  uint64_t v22;
  uint64_t *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;

  if (this != a6)
  {
    if (*(_QWORD *)this != *(_QWORD *)a6)
    {
      if (re::areSameTranslatedVersion(this, a6, a3))
        goto LABEL_4;
LABEL_19:
      re::internal::setTypeMismatchError<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>(a1, a2, this, a6);
      return 0;
    }
    v18 = **((_QWORD **)this + 2);
    v19 = **((_QWORD **)a6 + 2);
    if ((unsigned __int16)v18 != (unsigned __int16)v19)
      goto LABEL_19;
    v21 = WORD1(v18) == WORD1(v19);
    v20 = (v19 ^ v18) & 0xFFFFFF00000000;
    v21 = v21 && v20 == 0;
    if (!v21)
      goto LABEL_19;
  }
LABEL_4:
  v14 = re::TypeInfo::name(this);
  v15 = (unint64_t)*v14 >> 1;
  if (v15 > 0xCA3DEFB5)
  {
    if ((unint64_t)*v14 >> 1 > 0x18E6A9A092)
    {
      if ((unint64_t)*v14 >> 1 <= 0x303EE8780EDLL)
      {
        if (v15 != 0x18E6A9A093)
        {
          if (v15 == 0x303EE86A734)
            return re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>::serializeInt<unsigned short>(a1 + 24, a2, (uint64_t)a3, a4, a7);
          goto LABEL_48;
        }
        return re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>::serializeInt<unsigned char>(a1 + 24, a2, (uint64_t)a3, (unsigned __int8 *)a4, a7);
      }
      if (v15 == 0x303EE8780EELL)
        return re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>::serializeInt<unsigned int>(a1 + 24, a2, (uint64_t)a3, (unsigned int *)a4, a7);
      if (v15 != 0x303EE88E58DLL)
        goto LABEL_48;
    }
    else
    {
      if ((unint64_t)*v14 >> 1 > 0x16749DFF02)
      {
        if (v15 == 0x16749DFF03)
          return re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>::serializeInt<int>(a1 + 24, a2, (uint64_t)a3, (unsigned int *)a4, a7);
        v22 = 0x16749F63A2;
        goto LABEL_34;
      }
      if (v15 != 3393056694)
      {
        v17 = 0x16749D2549;
        goto LABEL_24;
      }
    }
    return re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>::serializeInt<unsigned long long>(a1 + 24, a2, (uint64_t)a3, (rapidjson::internal **)a4, a7);
  }
  if ((unint64_t)*v14 >> 1 > 0x5D0225B)
  {
    if ((unint64_t)*v14 >> 1 > 0xB0F77BD0)
    {
      if (v15 != 2969009105)
      {
        if (v15 == 3111160798)
          return re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>::serializeInt<signed char>(a1 + 24, a2, (uint64_t)a3, (char *)a4, a7);
LABEL_48:
        v23 = re::TypeInfo::name(this);
        re::Serializer<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>::setError(a1, a2, "Unsupported basic type \"%s\".", v24, v25, v26, v27, v28, v23[1]);
        return 0;
      }
      return re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>::serializeReal<double>(a1 + 24, a2, (uint64_t)a3, (double *)a4, a7);
    }
    if (v15 == 97526364)
      return re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>::serializeReal<float>(a1 + 24, a2, (uint64_t)a3, (float *)a4, a7);
    v17 = 109413500;
LABEL_24:
    if (v15 == v17)
      return re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>::serializeInt<short>(a1 + 24, a2, (uint64_t)a3, (__int16 *)a4, a7);
    goto LABEL_48;
  }
  if ((unint64_t)*v14 >> 1 <= 0x2E9355)
  {
    if (v15 != 104431)
    {
      if (v15 == 3029738)
        return re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>::serializeBool(a1 + 24, a2, (uint64_t)a3, (unsigned __int8 *)a4, a7);
      goto LABEL_48;
    }
    return re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>::serializeInt<int>(a1 + 24, a2, (uint64_t)a3, (unsigned int *)a4, a7);
  }
  if (v15 != 3052374)
  {
    v22 = 3327612;
LABEL_34:
    if (v15 == v22)
      return re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>::serializeInt<long long>(a1 + 24, a2, (uint64_t)a3, (unint64_t *)a4, a7);
    goto LABEL_48;
  }
  return re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>::serializeChar(a1 + 24, a2, (uint64_t)a3, (uint64_t)a4, a7);
}

BOOL re::serializeOptional<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>(uint64_t a1, const char *a2, const re::TypeInfo *a3, uint64_t a4, re *a5, const re::TypeInfo *a6, int a7)
{
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  BOOL v17;
  re::internal *v18;
  _anonymous_namespace_ *v19;
  double v20;
  uint64_t v21;
  BOOL v23;
  _BYTE v24[32];
  _BYTE v25[32];
  _BYTE v26[8];
  uint64_t v27;
  uint64_t v28;

  if (a5 == a6)
    goto LABEL_11;
  if (*(_QWORD *)a5 == *(_QWORD *)a6)
  {
    v14 = **((_QWORD **)a5 + 2);
    v15 = **((_QWORD **)a6 + 2);
    if ((unsigned __int16)v14 == (unsigned __int16)v15)
    {
      v17 = WORD1(v14) == WORD1(v15);
      v16 = (v15 ^ v14) & 0xFFFFFF00000000;
      v17 = v17 && v16 == 0;
      if (v17)
        goto LABEL_11;
    }
  }
  else if (re::areSameTranslatedVersion(a5, a6, a3))
  {
    goto LABEL_11;
  }
  if (*((unsigned __int8 *)a5 + 12) != *((unsigned __int8 *)a6 + 12))
  {
    re::internal::setTypeMismatchError<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>(a1, a2, a5, a6);
    return 0;
  }
LABEL_11:
  if (a7)
  {
    v24[0] = 0;
    re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>::beginOptional(a1 + 24, a2, (uint64_t)a3, v24, 0);
    if (v24[0])
    {
      v18 = *(re::internal **)(a1 + 272);
      re::TypeRegistry::typeInfo(*(_QWORD **)a6, *(_QWORD *)(*((_QWORD *)a6 + 2) + 72), v26);
      re::TypeInfo::TypeInfo((uint64_t)v25, (uint64_t)&v27);
      re::internal::translateType(v18, (const re::TypeRegistry *)v25, (uint64_t)v26);
      if (!*(_BYTE *)(a1 + 64))
        (*(void (**)(uint64_t, const char *, _QWORD, _QWORD, _BYTE *, _BYTE *, uint64_t))(*(_QWORD *)a1 + 72))(a1, a2, 0, 0, v26, v26, 1);
    }
    v19 = (_anonymous_namespace_ *)(a1 + 24);
  }
  else
  {
    re::TypeRegistry::typeInfo(*(_QWORD **)a5, *(_QWORD *)(*((_QWORD *)a5 + 2) + 72), v26);
    re::TypeInfo::TypeInfo((uint64_t)v25, (uint64_t)&v27);
    re::TypeRegistry::typeInfo(*(_QWORD **)a6, *(_QWORD *)(*((_QWORD *)a6 + 2) + 72), v26);
    re::TypeInfo::TypeInfo((uint64_t)v24, (uint64_t)&v27);
    re::TypeInfo::TypeInfo((uint64_t)v26, (uint64_t)a5);
    v23 = (*(uint64_t (**)(uint64_t))(v28 + 80))(a4) != 0;
    v20 = re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>::beginOptional(a1 + 24, a2, (uint64_t)a3, &v23, 0);
    if (v23)
    {
      v21 = (*(uint64_t (**)(uint64_t, double))(v28 + 80))(a4, v20);
      if (!*(_BYTE *)(a1 + 64))
        (*(void (**)(uint64_t, const char *, _QWORD, uint64_t, _BYTE *, _BYTE *, _QWORD))(*(_QWORD *)a1 + 72))(a1, a2, 0, v21, v25, v24, 0);
    }
    v19 = (_anonymous_namespace_ *)(a1 + 24);
  }
  re::EncoderBinary<re::SeekableInputStream>::endOptional(v19);
  return *(_BYTE *)(a1 + 64) == 0;
}

BOOL re::serializeArray<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>(_BYTE *a1, const char *a2, const re::TypeInfo *a3, char *a4, re *a5, const re::TypeInfo *a6, int a7)
{
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  BOOL v17;
  _QWORD *v18;
  _QWORD *v19;
  int v20;
  re::internal *v21;
  uint64_t v22;
  void (*v23)(_BYTE *, _QWORD, _QWORD, _QWORD, _BYTE *, _BYTE *, uint64_t);
  _QWORD *v24;
  int v25;
  unint64_t v26;
  int v27;
  uint64_t v28;
  void (*v29)(_BYTE *, _QWORD, _QWORD, uint64_t, _BYTE *, _BYTE *, _QWORD);
  int v30;
  int v31;
  _BOOL8 result;
  unint64_t v33;
  BOOL v34;
  char v35;
  uint64_t v36;
  unint64_t v37;
  uint64_t v38;
  _anonymous_namespace_ *v39;
  uint64_t *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  unint64_t v46;
  BOOL v47;
  char v48;
  unint64_t v49;
  _QWORD v50[2];
  unint64_t v51;
  _QWORD v52[2];
  _BYTE v53[32];
  _BYTE v54[32];
  unint64_t v55;
  _BYTE v56[32];

  if (a5 == a6)
    goto LABEL_13;
  if (*(_QWORD *)a5 == *(_QWORD *)a6)
  {
    v14 = **((_QWORD **)a5 + 2);
    v15 = **((_QWORD **)a6 + 2);
    if ((unsigned __int16)v14 == (unsigned __int16)v15)
    {
      v17 = WORD1(v14) == WORD1(v15);
      v16 = (v15 ^ v14) & 0xFFFFFF00000000;
      v17 = v17 && v16 == 0;
      if (v17)
        goto LABEL_13;
    }
  }
  else if (re::areSameTranslatedVersion(a5, a6, a3))
  {
    goto LABEL_13;
  }
  if (*((_BYTE *)a6 + 12) != 4)
    goto LABEL_56;
  v18 = (_QWORD *)*((_QWORD *)a5 + 2);
  v19 = (_QWORD *)*((_QWORD *)a6 + 2);
  v20 = *((_DWORD *)v19 + 21) & 0xFFFFFF;
  if ((*((_DWORD *)v18 + 21) & 0xFFFFFF) != 0)
  {
    if (v20)
      goto LABEL_13;
LABEL_56:
    re::internal::setTypeMismatchError<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>((uint64_t)a1, a2, a5, a6);
    return 0;
  }
  if (v20 || *((_DWORD *)v18 + 22) != *((_DWORD *)v19 + 22))
    goto LABEL_56;
LABEL_13:
  if (a7)
  {
    v21 = (re::internal *)*((_QWORD *)a1 + 34);
    re::TypeRegistry::typeInfo(*(_QWORD **)a6, *(_QWORD *)(*((_QWORD *)a6 + 2) + 72), &v55);
    re::TypeInfo::TypeInfo((uint64_t)v53, (uint64_t)v56);
    re::internal::translateType(v21, (const re::TypeRegistry *)v53, (uint64_t)v54);
    v22 = (*(uint64_t (**)(_BYTE *, _BYTE *))(*(_QWORD *)a1 + 80))(a1, v54);
    if (v22)
    {
      v23 = (void (*)(_BYTE *, _QWORD, _QWORD, _QWORD, _BYTE *, _BYTE *, uint64_t))v22;
      v24 = (_QWORD *)*((_QWORD *)a6 + 2);
      v25 = *((_DWORD *)v24 + 21) & 0xFFFFFF;
      if (v25)
      {
        v26 = 0;
        v27 = 8;
      }
      else
      {
        v26 = *((int *)v24 + 22);
        v27 = 4;
      }
      v55 = v26;
      result = re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>::beginArray((uint64_t)(a1 + 24), a2, (uint64_t)a3, (uint64_t *)&v55, v27);
      if (result)
      {
        v46 = v55;
        if (v25)
          v47 = v55 == 0;
        else
          v47 = 1;
        v48 = v47;
        if (!v47)
        {
          v52[0] = 0;
          v52[1] = 0xFFFFFFFFLL;
          (*(void (**)(_BYTE *, _QWORD, _QWORD *))(*(_QWORD *)a1 + 16))(a1, 0, v52);
          v46 = v55;
        }
        if (v46)
        {
          v49 = 0;
          do
          {
            v23(a1, 0, 0, 0, v54, v54, 1);
            ++v49;
          }
          while (v49 < v55);
        }
        if ((v48 & 1) == 0)
          (*(void (**)(_BYTE *))(*(_QWORD *)a1 + 24))(a1);
        v39 = (_anonymous_namespace_ *)(a1 + 24);
LABEL_53:
        re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>::endArray(v39);
        return a1[64] == 0;
      }
      return result;
    }
    goto LABEL_36;
  }
  re::TypeRegistry::typeInfo(*(_QWORD **)a5, *(_QWORD *)(*((_QWORD *)a5 + 2) + 72), &v55);
  re::TypeInfo::TypeInfo((uint64_t)v54, (uint64_t)v56);
  re::TypeRegistry::typeInfo(*(_QWORD **)a6, *(_QWORD *)(*((_QWORD *)a6 + 2) + 72), &v55);
  re::TypeInfo::TypeInfo((uint64_t)v53, (uint64_t)v56);
  re::TypeInfo::TypeInfo((uint64_t)&v55, (uint64_t)a5);
  v28 = (*(uint64_t (**)(_BYTE *, _BYTE *))(*(_QWORD *)a1 + 80))(a1, v54);
  if (!v28)
  {
LABEL_36:
    v40 = re::TypeInfo::name((re::TypeInfo *)v54);
    re::Serializer<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>::setError((uint64_t)a1, 0, "Failed to resolve serialize function for type \"%s\"", v41, v42, v43, v44, v45, v40[1]);
    return 0;
  }
  v29 = (void (*)(_BYTE *, _QWORD, _QWORD, uint64_t, _BYTE *, _BYTE *, _QWORD))v28;
  v51 = re::ArrayAccessor::size((re::ArrayAccessor *)&v55, a4);
  v30 = *(_DWORD *)(*((_QWORD *)a5 + 2) + 84) & 0xFFFFFF;
  if (v30)
    v31 = 8;
  else
    v31 = 4;
  result = re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>::beginArray((uint64_t)(a1 + 24), a2, (uint64_t)a3, (uint64_t *)&v51, v31);
  if (result)
  {
    v33 = v51;
    if (v30)
      v34 = v51 == 0;
    else
      v34 = 1;
    v35 = v34;
    if (!v34)
    {
      v36 = *(_QWORD *)a4;
      v50[0] = 0;
      v50[1] = 0xFFFFFFFFLL;
      (*(void (**)(_BYTE *, uint64_t, _QWORD *))(*(_QWORD *)a1 + 16))(a1, v36, v50);
      v33 = v51;
    }
    if (v33)
    {
      v37 = 0;
      do
      {
        v38 = re::ArrayAccessor::elementAt((re::ArrayAccessor *)&v55, a4, v37);
        v29(a1, 0, 0, v38, v54, v53, 0);
        ++v37;
      }
      while (v37 < v51);
    }
    if ((v35 & 1) == 0)
      (*(void (**)(_BYTE *))(*(_QWORD *)a1 + 24))(a1);
    v39 = (_anonymous_namespace_ *)(a1 + 24);
    goto LABEL_53;
  }
  return result;
}

BOOL re::serializeList<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>(uint64_t a1, const char *a2, const re::TypeInfo *a3, uint64_t a4, re *a5, const re::TypeInfo *a6, int a7)
{
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  BOOL v17;
  re::internal *v18;
  uint64_t v19;
  void (*v20)(uint64_t, _QWORD, _QWORD, _QWORD, _BYTE *, _BYTE *, uint64_t);
  _anonymous_namespace_ *v21;
  _BOOL4 v22;
  _BOOL8 result;
  unint64_t j;
  uint64_t v25;
  void (*v26)(uint64_t, _QWORD, _QWORD, uint64_t, _BYTE *, _BYTE *, _QWORD);
  _BOOL4 v27;
  unint64_t i;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t (*v35)(uint64_t, _QWORD);
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  _BYTE v46[32];
  unint64_t v47;
  _BYTE v48[32];
  _BYTE v49[32];
  unint64_t v50;
  uint64_t v51;
  uint64_t v52;

  if (a5 == a6)
    goto LABEL_11;
  if (*(_QWORD *)a5 == *(_QWORD *)a6)
  {
    v14 = **((_QWORD **)a5 + 2);
    v15 = **((_QWORD **)a6 + 2);
    if ((unsigned __int16)v14 == (unsigned __int16)v15)
    {
      v17 = WORD1(v14) == WORD1(v15);
      v16 = (v15 ^ v14) & 0xFFFFFF00000000;
      v17 = v17 && v16 == 0;
      if (v17)
        goto LABEL_11;
    }
  }
  else if (re::areSameTranslatedVersion(a5, a6, a3))
  {
    goto LABEL_11;
  }
  if (*((unsigned __int8 *)a5 + 12) != *((unsigned __int8 *)a6 + 12))
  {
    re::internal::setTypeMismatchError<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>(a1, a2, a5, a6);
    return 0;
  }
LABEL_11:
  if (!a7)
  {
    re::TypeRegistry::typeInfo(*(_QWORD **)a5, *(_QWORD *)(*((_QWORD *)a5 + 2) + 72), &v50);
    re::TypeInfo::TypeInfo((uint64_t)v49, (uint64_t)&v51);
    re::TypeRegistry::typeInfo(*(_QWORD **)a6, *(_QWORD *)(*((_QWORD *)a6 + 2) + 72), &v50);
    re::TypeInfo::TypeInfo((uint64_t)v48, (uint64_t)&v51);
    re::TypeInfo::TypeInfo((uint64_t)&v50, (uint64_t)a5);
    v25 = (*(uint64_t (**)(uint64_t, _BYTE *))(*(_QWORD *)a1 + 80))(a1, v49);
    if (v25)
    {
      v26 = (void (*)(uint64_t, _QWORD, _QWORD, uint64_t, _BYTE *, _BYTE *, _QWORD))v25;
      v47 = (*(uint64_t (**)(uint64_t))(v52 + 80))(a4);
      v21 = (_anonymous_namespace_ *)(a1 + 24);
      v27 = re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>::beginArray(a1 + 24, a2, (uint64_t)a3, (uint64_t *)&v47, 0);
      result = 0;
      if (!v27)
        return result;
      if (*(_QWORD *)(v52 + 96))
      {
        if (v47)
        {
          for (i = 0; i < v47; ++i)
          {
            v29 = (*(uint64_t (**)(uint64_t, unint64_t))(v52 + 96))(a4, i);
            v26(a1, 0, 0, v29, v49, v48, 0);
          }
        }
        goto LABEL_24;
      }
      v35 = *(uint64_t (**)(uint64_t, _QWORD))(v52 + 104);
      if (v35 && *(_QWORD *)(v52 + 112) && *(_QWORD *)(v52 + 120))
      {
        v36 = v35(a4, *(_QWORD *)(a1 + 56));
        v37 = (*(uint64_t (**)(void))(v52 + 112))();
        if (v37)
        {
          v38 = v37;
          do
          {
            v26(a1, 0, 0, v38, v49, v48, 0);
            v38 = (*(uint64_t (**)(uint64_t))(v52 + 112))(v36);
          }
          while (v38);
        }
        (*(void (**)(uint64_t, _QWORD))(v52 + 120))(v36, *(_QWORD *)(a1 + 56));
        goto LABEL_24;
      }
      re::TypeInfo::TypeInfo((uint64_t)v46, (uint64_t)&v50);
      v45 = re::TypeInfo::name((re::TypeInfo *)v46)[1];
      re::Serializer<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>::setError(a1, a2, "List type \"%s\" does not provide an indexer or iterator.", v39, v40, v41, v42, v43, v45);
      return 0;
    }
    goto LABEL_25;
  }
  v18 = *(re::internal **)(a1 + 272);
  re::TypeRegistry::typeInfo(*(_QWORD **)a6, *(_QWORD *)(*((_QWORD *)a6 + 2) + 72), &v50);
  re::TypeInfo::TypeInfo((uint64_t)v48, (uint64_t)&v51);
  re::internal::translateType(v18, (const re::TypeRegistry *)v48, (uint64_t)v49);
  v19 = (*(uint64_t (**)(uint64_t, _BYTE *))(*(_QWORD *)a1 + 80))(a1, v49);
  if (!v19)
  {
LABEL_25:
    v44 = re::TypeInfo::name((re::TypeInfo *)v49)[1];
    re::Serializer<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>::setError(a1, 0, "Failed to resolve serialize function for type \"%s\"", v30, v31, v32, v33, v34, v44);
    return 0;
  }
  v20 = (void (*)(uint64_t, _QWORD, _QWORD, _QWORD, _BYTE *, _BYTE *, uint64_t))v19;
  v50 = 0;
  v21 = (_anonymous_namespace_ *)(a1 + 24);
  v22 = re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>::beginArray(a1 + 24, a2, (uint64_t)a3, (uint64_t *)&v50, 0);
  result = 0;
  if (v22)
  {
    if (v50)
    {
      for (j = 0; j < v50; ++j)
        v20(a1, 0, 0, 0, v49, v49, 1);
    }
LABEL_24:
    re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>::endArray(v21);
    return *(_BYTE *)(a1 + 64) == 0;
  }
  return result;
}

BOOL re::serializeDictionary<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>(uint64_t a1, const char *a2, const re::TypeInfo *a3, uint64_t a4, unsigned __int8 *a5, unsigned __int8 *a6, int a7)
{
  const re::TypeInfo *v14;
  uint64_t *v15;
  int v16;
  unint64_t v17;
  char *v18;
  _BOOL8 result;
  unint64_t v20;
  char *v21;
  char *v22;
  const char *v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  BOOL v28;
  re::internal *v29;
  re::internal *v30;
  uint64_t v31;
  void (*v32)(uint64_t, const char *, _QWORD, _QWORD, uint64_t *, uint64_t *, uint64_t, double);
  uint64_t v33;
  void (*v34)(uint64_t, const char *, _QWORD, _QWORD, _BYTE *, _BYTE *, uint64_t);
  _anonymous_namespace_ *v35;
  _BOOL4 v36;
  unint64_t v37;
  double v38;
  uint64_t v39;
  void (*v40)(uint64_t, const char *, _QWORD, uint64_t, _QWORD *, _BYTE *, _QWORD, double);
  uint64_t v41;
  void (*v42)(uint64_t, const char *, _QWORD, uint64_t, _BYTE *, _BYTE *, _QWORD);
  _BOOL4 v43;
  uint64_t v44;
  unint64_t *v45;
  unint64_t v46;
  unint64_t v47;
  uint64_t (**v48)(uint64_t, uint64_t);
  uint64_t (*v49)(uint64_t, uint64_t);
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  __n128 v53;
  __n128 v54;
  uint64_t v55;
  unint64_t i;
  double v57;
  unint64_t v58;
  void (*v59)(void);
  re::TypeInfo *v60;
  uint64_t *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  char *v67;
  uint64_t v68;
  unint64_t j;
  double v70;
  uint64_t v71;
  uint64_t v72;
  unint64_t v73;
  unint64_t v74;
  uint64_t v75;
  uint64_t v76;
  unint64_t v77;
  int v78;
  uint64_t *v79;
  unint64_t v80;
  char v81[16];
  uint64_t v82;
  _BYTE v83[32];
  _BYTE v84[32];
  _BYTE v85[32];
  _QWORD v86[4];
  uint64_t v87;
  _BYTE v88[18];
  __int16 v89;
  unint64_t v90;
  __int16 v91;
  unint64_t v92;
  __n128 v93;
  __int128 v94;
  __int128 v95;
  __int128 v96;
  __int128 v97;
  uint64_t v98;

  v98 = *MEMORY[0x24BDAC8D0];
  re::TypeRegistry::typeInfo(*(_QWORD **)a5, *(_QWORD *)(*((_QWORD *)a5 + 2) + 72), &v93);
  re::TypeInfo::TypeInfo((uint64_t)&v75, (uint64_t)&v93.n128_i64[1]);
  v15 = re::TypeInfo::name((re::TypeInfo *)&v75);
  v16 = BYTE4(v76);
  if (BYTE4(v76) != 1)
  {
LABEL_10:
    if (v16 == 8)
    {
      v20 = (unint64_t)*v15 >> 1;
      if (v20 == 0x22C6ED80D0CLL)
      {
        v24 = (char *)v15[1];
        if (v24 == "StringID" || !strcmp(v24, "StringID"))
          return re::internal::serializeDictionaryWithStringID<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>(a1, a2, a3, a4, (re *)a5, (const re::TypeInfo *)a6, a7);
      }
      else if (v20 == 0x134375A94D9F7110)
      {
        v21 = (char *)v15[1];
        if (v21 == "DynamicString" || !strcmp(v21, "DynamicString"))
          return re::internal::serializeDictionaryWithDynamicString<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>(a1, a2, a3, a4, (re *)a5, (const re::TypeInfo *)a6, a7);
      }
    }
    goto LABEL_22;
  }
  if (!re::TypeInfo::isInteger((re::TypeInfo *)&v75))
  {
    v16 = BYTE4(v76);
    goto LABEL_10;
  }
  v17 = (unint64_t)*v15 >> 1;
  if (v17 <= 0x303EE8780EDLL)
  {
    if (v17 != 3393056694)
    {
      if (v17 == 0x303EE86A734)
      {
        v18 = (char *)v15[1];
        if (v18 == "uint16_t" || !strcmp(v18, "uint16_t"))
          return re::internal::serializeDictionaryWithInteger<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,unsigned short>(a1, a2, a3, a4, (re *)a5, (const re::TypeInfo *)a6, a7);
      }
      goto LABEL_72;
    }
    v22 = (char *)v15[1];
    if (v22 == "size_t")
      return re::internal::serializeDictionaryWithInteger<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,unsigned long long>(a1, a2, a3, a4, (re *)a5, (const re::TypeInfo *)a6, a7);
    v23 = "size_t";
LABEL_68:
    if (strcmp(v22, v23))
      goto LABEL_72;
    return re::internal::serializeDictionaryWithInteger<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,unsigned long long>(a1, a2, a3, a4, (re *)a5, (const re::TypeInfo *)a6, a7);
  }
  if (v17 != 0x303EE8780EELL)
  {
    if (v17 != 0x303EE88E58DLL)
      goto LABEL_72;
    v22 = (char *)v15[1];
    if (v22 == "uint64_t")
      return re::internal::serializeDictionaryWithInteger<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,unsigned long long>(a1, a2, a3, a4, (re *)a5, (const re::TypeInfo *)a6, a7);
    v23 = "uint64_t";
    goto LABEL_68;
  }
  v67 = (char *)v15[1];
  if (v67 == "uint32_t" || !strcmp(v67, "uint32_t"))
    return re::internal::serializeDictionaryWithInteger<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,unsigned int>(a1, a2, a3, a4, (re *)a5, (const re::TypeInfo *)a6, a7);
LABEL_72:
  v93.n128_u64[0] = 0x18E6A9A093;
  v93.n128_u64[1] = (unint64_t)"uint8_t";
  if (re::StringID::operator==(v15, &v93))
    return re::internal::serializeDictionaryWithInteger<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,unsigned char>(a1, a2, a3, a4, (re *)a5, (const re::TypeInfo *)a6, a7);
  v93.n128_u64[0] = 0x16749F63A2;
  v93.n128_u64[1] = (unint64_t)"int64_t";
  if (re::StringID::operator==(v15, &v93))
    return re::internal::serializeDictionaryWithInteger<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,long long>(a1, a2, a3, a4, (re *)a5, (const re::TypeInfo *)a6, a7);
  *(_QWORD *)v88 = 3327612;
  *(_QWORD *)&v88[8] = "long";
  if (re::StringID::operator==(v15, v88))
    return re::internal::serializeDictionaryWithInteger<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,long long>(a1, a2, a3, a4, (re *)a5, (const re::TypeInfo *)a6, a7);
  v93.n128_u64[0] = 104431;
  v93.n128_u64[1] = (unint64_t)"int";
  if (re::StringID::operator==(v15, &v93))
    return re::internal::serializeDictionaryWithInteger<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,int>(a1, a2, a3, a4, (re *)a5, (const re::TypeInfo *)a6, a7);
  v93.n128_u64[0] = 109413500;
  v93.n128_u64[1] = (unint64_t)"short";
  if (!re::StringID::operator==(v15, &v93))
  {
LABEL_22:
    if (a5 == a6)
      goto LABEL_32;
    if (*(_QWORD *)a5 == *(_QWORD *)a6)
    {
      v25 = **((_QWORD **)a5 + 2);
      v26 = **((_QWORD **)a6 + 2);
      if ((unsigned __int16)v25 == (unsigned __int16)v26)
      {
        v28 = WORD1(v25) == WORD1(v26);
        v27 = (v26 ^ v25) & 0xFFFFFF00000000;
        v28 = v28 && v27 == 0;
        if (v28)
          goto LABEL_32;
      }
    }
    else if (re::areSameTranslatedVersion((re *)a5, (const re::TypeInfo *)a6, v14))
    {
      goto LABEL_32;
    }
    if (a5[12] != a6[12])
    {
      re::internal::setTypeMismatchError<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>(a1, a2, (re::TypeInfo *)a5, (re::TypeInfo *)a6);
      return 0;
    }
LABEL_32:
    if (a7)
    {
      v29 = *(re::internal **)(a1 + 272);
      re::TypeRegistry::typeInfo(*(_QWORD **)a6, *(_QWORD *)(*((_QWORD *)a6 + 2) + 72), &v93);
      re::TypeInfo::TypeInfo((uint64_t)v88, (uint64_t)&v93.n128_i64[1]);
      re::internal::translateType(v29, (const re::TypeRegistry *)v88, (uint64_t)&v75);
      v30 = *(re::internal **)(a1 + 272);
      re::TypeRegistry::typeInfo(*(_QWORD **)a6, *(_QWORD *)(*((_QWORD *)a6 + 2) + 80), &v93);
      re::TypeInfo::TypeInfo((uint64_t)v86, (uint64_t)&v93.n128_i64[1]);
      re::internal::translateType(v30, (const re::TypeRegistry *)v86, (uint64_t)v88);
      v31 = (*(uint64_t (**)(uint64_t, uint64_t *))(*(_QWORD *)a1 + 80))(a1, &v75);
      if (v31)
      {
        v32 = (void (*)(uint64_t, const char *, _QWORD, _QWORD, uint64_t *, uint64_t *, uint64_t, double))v31;
        v33 = (*(uint64_t (**)(uint64_t, _BYTE *))(*(_QWORD *)a1 + 80))(a1, v88);
        if (v33)
        {
          v34 = (void (*)(uint64_t, const char *, _QWORD, _QWORD, _BYTE *, _BYTE *, uint64_t))v33;
          v93.n128_u64[0] = 0;
          v35 = (_anonymous_namespace_ *)(a1 + 24);
          v36 = re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>::beginDictionary(a1 + 24, a2, (uint64_t)a3, (uint64_t *)&v93, 0);
          result = 0;
          if (!v36)
            return result;
          if (v93.n128_u64[0])
          {
            v37 = 0;
            do
            {
              v38 = re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>::beginDictionaryEntry(a1 + 24, 1);
              v32(a1, "key", 0, 0, &v75, &v75, 1, v38);
              v34(a1, "value", 0, 0, v88, v88, 1);
              re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>::endDictionaryEntry((_anonymous_namespace_ *)(a1 + 24));
              ++v37;
            }
            while (v37 < v93.n128_u64[0]);
          }
          goto LABEL_86;
        }
        v60 = (re::TypeInfo *)v88;
      }
      else
      {
        v60 = (re::TypeInfo *)&v75;
      }
      goto LABEL_64;
    }
    re::TypeRegistry::typeInfo(*(_QWORD **)a5, *(_QWORD *)(*((_QWORD *)a5 + 2) + 72), &v93);
    re::TypeInfo::TypeInfo((uint64_t)v86, (uint64_t)&v93.n128_i64[1]);
    re::TypeRegistry::typeInfo(*(_QWORD **)a5, *(_QWORD *)(*((_QWORD *)a5 + 2) + 80), &v93);
    re::TypeInfo::TypeInfo((uint64_t)v85, (uint64_t)&v93.n128_i64[1]);
    re::TypeRegistry::typeInfo(*(_QWORD **)a6, *(_QWORD *)(*((_QWORD *)a6 + 2) + 72), &v93);
    re::TypeInfo::TypeInfo((uint64_t)v84, (uint64_t)&v93.n128_i64[1]);
    re::TypeRegistry::typeInfo(*(_QWORD **)a6, *(_QWORD *)(*((_QWORD *)a6 + 2) + 80), &v93);
    re::TypeInfo::TypeInfo((uint64_t)v83, (uint64_t)&v93.n128_i64[1]);
    re::TypeInfo::TypeInfo((uint64_t)v81, (uint64_t)a5);
    v39 = (*(uint64_t (**)(uint64_t, _QWORD *))(*(_QWORD *)a1 + 80))(a1, v86);
    if (v39)
    {
      v40 = (void (*)(uint64_t, const char *, _QWORD, uint64_t, _QWORD *, _BYTE *, _QWORD, double))v39;
      v41 = (*(uint64_t (**)(uint64_t, _BYTE *))(*(_QWORD *)a1 + 80))(a1, v85);
      if (v41)
      {
        v42 = (void (*)(uint64_t, const char *, _QWORD, uint64_t, _BYTE *, _BYTE *, _QWORD))v41;
        v80 = (*(uint64_t (**)(uint64_t))(v82 + 88))(a4);
        v35 = (_anonymous_namespace_ *)(a1 + 24);
        v43 = re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>::beginDictionary(a1 + 24, a2, (uint64_t)a3, (uint64_t *)&v80, 0);
        result = 0;
        if (!v43)
          return result;
        if (!v80)
        {
LABEL_86:
          re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>::endDictionary(v35);
          return *(_BYTE *)(a1 + 64) == 0;
        }
        v44 = *(_QWORD *)a5;
        v93.n128_u64[0] = 0x449AD97C4B77BED4;
        v93.n128_u64[1] = (unint64_t)"_CompareFunc";
        v45 = (unint64_t *)re::HashTable<re::StringID,re::StateParameterInt *,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::tryGet(v44 + 200, &v93);
        if (v45)
        {
          v46 = *v45;
          re::StringID::destroyString((re::StringID *)&v93);
          if (v44)
          {
            v47 = *(_QWORD *)v86[2];
            v93.n128_u64[0] = v46;
            v93.n128_u64[1] = v47;
            LODWORD(v94) = -1;
            v48 = (uint64_t (**)(uint64_t, uint64_t))re::HashTable<re::internal::TypeAttributeKey,re::internal::TypeAttributeData,re::Hash<re::internal::TypeAttributeKey>,re::EqualTo<re::internal::TypeAttributeKey>,true,false>::tryGet(v86[0] + 768, (uint64_t *)&v93);
            if (v48)
            {
              v49 = *v48;
              if (*v48)
              {
                v79 = 0;
                v76 = 0;
                v77 = 0;
                v78 = 0;
                v75 = *(_QWORD *)(a1 + 56);
                re::DynamicArray<re::RigNodeConstraint>::setCapacity(&v75, v80);
                ++v78;
                v50 = (*(uint64_t (**)(uint64_t, _QWORD))(v82 + 112))(a4, *(_QWORD *)(a1 + 56));
                if ((*(unsigned int (**)(void))(v82 + 120))())
                {
                  do
                  {
                    v51 = (*(uint64_t (**)(uint64_t))(v82 + 128))(v50);
                    v52 = (*(uint64_t (**)(uint64_t))(v82 + 136))(v50);
                    v93.n128_u64[0] = v51;
                    v93.n128_u64[1] = v52;
                    v53 = re::DynamicArray<re::RigNodeConstraint>::add((_anonymous_namespace_ *)&v75, &v93);
                  }
                  while (((*(uint64_t (**)(uint64_t, __n128))(v82 + 120))(v50, v53) & 1) != 0);
                }
                v54.n128_f64[0] = (*(double (**)(uint64_t, _QWORD))(v82 + 144))(v50, *(_QWORD *)(a1 + 56));
                std::sort[abi:nn180100]<re::Pair<void const*,void *,true> *,BOOL re::serializeDictionary<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>(re::Serializer<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<void const*,void *,true> const&,re::Pair<void const*,void *,true> const&)#1}>(v79, &v79[2 * v77], v49, v54);
                if (v80)
                {
                  v55 = 0;
                  for (i = 0; i < v80; ++i)
                  {
                    v57 = re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>::beginDictionaryEntry(a1 + 24, 0);
                    if (v77 <= i)
                    {
                      v87 = 0;
                      v96 = 0u;
                      v97 = 0u;
                      v94 = 0u;
                      v95 = 0u;
                      v93 = 0u;
                      v73 = v77;
                      os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
                      *(_DWORD *)v88 = 136315906;
                      *(_QWORD *)&v88[4] = "operator[]";
                      *(_WORD *)&v88[12] = 1024;
                      *(_DWORD *)&v88[14] = 789;
                      v89 = 2048;
                      v90 = i;
                      v91 = 2048;
                      v92 = v73;
                      _os_log_send_and_compose_impl();
                      _os_crash_msg();
                      __break(1u);
LABEL_91:
                      v87 = 0;
                      v96 = 0u;
                      v97 = 0u;
                      v94 = 0u;
                      v95 = 0u;
                      v93 = 0u;
                      v74 = v58;
                      os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
                      *(_DWORD *)v88 = 136315906;
                      *(_QWORD *)&v88[4] = "operator[]";
                      *(_WORD *)&v88[12] = 1024;
                      *(_DWORD *)&v88[14] = 789;
                      v89 = 2048;
                      v90 = i;
                      v91 = 2048;
                      v92 = v74;
                      _os_log_send_and_compose_impl();
                      _os_crash_msg();
                      __break(1u);
                    }
                    v40(a1, "key", 0, v79[v55], v86, v84, 0, v57);
                    v58 = v77;
                    if (v77 <= i)
                      goto LABEL_91;
                    v42(a1, "value", 0, v79[v55 + 1], v85, v83, 0);
                    re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>::endDictionaryEntry((_anonymous_namespace_ *)(a1 + 24));
                    v55 += 2;
                  }
                }
                if (!v75 || !v79)
                  goto LABEL_86;
                v59 = *(void (**)(void))(*(_QWORD *)v75 + 40);
                goto LABEL_85;
              }
            }
          }
        }
        else
        {
          re::StringID::destroyString((re::StringID *)&v93);
        }
        v68 = (*(uint64_t (**)(uint64_t, _QWORD))(v82 + 112))(a4, *(_QWORD *)(a1 + 56));
        (*(void (**)(void))(v82 + 120))();
        if (v80)
        {
          for (j = 0; j < v80; ++j)
          {
            v70 = re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>::beginDictionaryEntry(a1 + 24, 0);
            v71 = (*(uint64_t (**)(uint64_t, double))(v82 + 128))(v68, v70);
            ((void (*)(uint64_t, const char *, _QWORD, uint64_t, _QWORD *, _BYTE *, _QWORD))v40)(a1, "key", 0, v71, v86, v84, 0);
            v72 = (*(uint64_t (**)(uint64_t))(v82 + 136))(v68);
            v42(a1, "value", 0, v72, v85, v83, 0);
            re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>::endDictionaryEntry((_anonymous_namespace_ *)(a1 + 24));
            (*(void (**)(uint64_t))(v82 + 120))(v68);
          }
        }
        v59 = *(void (**)(void))(v82 + 144);
LABEL_85:
        v59();
        goto LABEL_86;
      }
      v60 = (re::TypeInfo *)v85;
    }
    else
    {
      v60 = (re::TypeInfo *)v86;
    }
LABEL_64:
    v61 = re::TypeInfo::name(v60);
    re::Serializer<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>::setError(a1, 0, "Failed to resolve serialize function for type \"%s\"", v62, v63, v64, v65, v66, v61[1]);
    return 0;
  }
  return re::internal::serializeDictionaryWithInteger<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,short>(a1, a2, a3, a4, (re *)a5, (const re::TypeInfo *)a6, a7);
}

BOOL re::serializeUnion<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>(_BYTE *a1, const char *a2, const re::TypeInfo *a3, char *a4, re::TypeInfo *a5, re::TypeInfo *a6, int a7)
{
  _BOOL8 result;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  BOOL v18;
  unint64_t v19[4];
  unint64_t Tag;
  _BYTE v21[32];

  if (a5 == a6)
    goto LABEL_4;
  if (*(_QWORD *)a5 == *(_QWORD *)a6)
  {
    v15 = **((_QWORD **)a5 + 2);
    v16 = **((_QWORD **)a6 + 2);
    if ((unsigned __int16)v15 == (unsigned __int16)v16)
    {
      v18 = WORD1(v15) == WORD1(v16);
      v17 = (v16 ^ v15) & 0xFFFFFF00000000;
      v18 = v18 && v17 == 0;
      if (v18)
        goto LABEL_4;
    }
LABEL_19:
    re::internal::setTypeMismatchError<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>((uint64_t)a1, a2, a5, a6);
    return 0;
  }
  if (!re::areSameTranslatedVersion(a5, a6, a3))
    goto LABEL_19;
LABEL_4:
  result = re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>::beginObject((uint64_t)(a1 + 24), a2, (uint64_t)a3, 16);
  if (a7)
  {
    if (!result)
      return result;
    v19[0] = 0;
    re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>::serializeInt<unsigned long long>((uint64_t)(a1 + 24), "tag", 0, (rapidjson::internal **)v19, 0);
    if (v19[0] < *(unsigned int *)(*((_QWORD *)a6 + 2) + 88))
    {
      re::TypeInfo::unionMember(a6, v19[0], (uint64_t)v21);
      if (!a1[64])
        (*(void (**)(_BYTE *, const char *, _QWORD, _QWORD, _BYTE *, _BYTE *, uint64_t))(*(_QWORD *)a1 + 72))(a1, "value", 0, 0, v21, v21, 1);
    }
  }
  else
  {
    if (!result)
      return result;
    re::TypeInfo::TypeInfo((uint64_t)v21, (uint64_t)a5);
    Tag = re::UnionAccessor::readTag((re::UnionAccessor *)v21, a4);
    re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>::serializeInt<unsigned long long>((uint64_t)(a1 + 24), "tag", 0, (rapidjson::internal **)&Tag, 0);
    if (Tag < *(unsigned int *)(*((_QWORD *)a5 + 2) + 88))
    {
      re::TypeInfo::unionMember(a5, Tag, (uint64_t)v19);
      if (!a1[64])
        (*(void (**)(_BYTE *, const char *, _QWORD, char *, unint64_t *, unint64_t *, _QWORD))(*(_QWORD *)a1 + 72))(a1, "value", 0, a4, v19, v19, 0);
    }
  }
  re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>::endObject((_anonymous_namespace_ *)(a1 + 24));
  return a1[64] == 0;
}

uint64_t re::serializeObject<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4, re::TypeInfo *this, uint64_t a6, uint64_t a7)
{
  uint64_t *v14;
  const char *v15;
  _BOOL4 v16;
  uint64_t result;
  uint64_t v18;
  const re::TypeInfo *v19;
  uint64_t v20;
  unsigned int v21;
  re::TypeRegistry *v22;
  re *v23;
  const re::TypeInfo *v24;
  uint64_t v25;
  const char *v26;
  const re::TypeInfo *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  _QWORD v36[2];
  unsigned int v37;
  uint64_t v38;
  _BYTE v39[32];

  if (!(_DWORD)a7)
  {
LABEL_6:
    if ((*(_BYTE *)(*((_QWORD *)this + 2) + 48) & 4) != 0)
      return re::internal::serializeObjectWithOneMember<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>((_BYTE *)a1, a2, a3, a4, (uint64_t *)this, (uint64_t *)a6, a7);
    v16 = re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>::beginObject(a1 + 24, a2, a3, 0);
    result = 0;
    if (!v16)
      return result;
    v18 = re::DataArray<re::TextureAtlasTile>::tryGet(*(_QWORD *)this + 96, **((_QWORD **)this + 2));
    if (!v18 || *(_DWORD *)(v18 + 16) >= 2u)
    {
      v20 = re::DataArray<re::TextureAtlasTile>::tryGet(*(_QWORD *)this + 96, **((_QWORD **)this + 2));
      if (v20)
        v21 = *(_DWORD *)(v20 + 16);
      else
        v21 = -1;
      v37 = v21;
      re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>::serializeInt<unsigned int>(a1 + 24, "@version", 0, &v37, 0);
    }
    if (this == (re::TypeInfo *)a6)
      goto LABEL_21;
    if (*(_QWORD *)this == *(_QWORD *)a6)
    {
      v28 = **((_QWORD **)this + 2);
      v29 = **(_QWORD **)(a6 + 16);
      if ((unsigned __int16)v28 == (unsigned __int16)v29
        && WORD1(v28) == WORD1(v29)
        && ((v29 ^ v28) & 0xFFFFFF00000000) == 0)
      {
        goto LABEL_21;
      }
    }
    else if (re::areSameTranslatedVersion(this, (const re::TypeInfo *)a6, v19))
    {
LABEL_21:
      re::internal::serializeMembersWithoutVersioning<re::EncoderBinary<re::DynamicArrayBufferedOutputStream>>((_BYTE *)a1, a4, (uint64_t *)this, a7);
LABEL_28:
      re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>::endObject((_anonymous_namespace_ *)(a1 + 24));
      return *(_BYTE *)(a1 + 64) == 0;
    }
    if (*((unsigned __int8 *)this + 12) == *(unsigned __int8 *)(a6 + 12))
    {
      re::internal::serializeMembersWithVersioning<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>(a1, a4, (uint64_t *)this, (uint64_t *)a6, a7);
    }
    else
    {
      v30 = re::TypeInfo::name(this)[1];
      re::TypeInfo::name((re::TypeInfo *)a6);
      re::Serializer<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>::setError(a1, 0, "Type categories of types \"%s\" (runtime) and \"%s\" (stream) don't match.", v31, v32, v33, v34, v35, v30);
    }
    goto LABEL_28;
  }
  if ((*(_BYTE *)(*((_QWORD *)this + 2) + 49) & 1) != 0)
  {
    v22 = *(re::TypeRegistry **)(a1 + 272);
    v36[0] = 0x2686EB529B3EE220;
    v36[1] = "DynamicString";
    re::TypeRegistry::typeInfo(v22, (const re::StringID *)v36, &v37);
    re::TypeInfo::TypeInfo((uint64_t)v39, (uint64_t)&v38);
    re::StringID::destroyString((re::StringID *)v36);
    v23 = (re *)v39;
    v24 = (const re::TypeInfo *)v39;
    v25 = a1;
    v26 = a2;
    v27 = (const re::TypeInfo *)a3;
  }
  else
  {
    v14 = re::TypeInfo::name(this);
    if ((unint64_t)*v14 >> 1 != 0x134375A94D9F7110)
      goto LABEL_6;
    v15 = (const char *)v14[1];
    if (v15 != "DynamicString")
    {
      if (strcmp(v15, "DynamicString"))
        goto LABEL_6;
    }
    v25 = a1;
    v26 = a2;
    v27 = (const re::TypeInfo *)a3;
    v23 = this;
    v24 = this;
  }
  re::serializeDynamicString<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>(v25, v26, v27, 0, v23, v24, 1);
  return *(_BYTE *)(a1 + 64) == 0;
}

BOOL re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>::serializeBool(uint64_t a1, const char *a2, uint64_t a3, unsigned __int8 *a4, char a5)
{
  int v5;
  char *v9;
  int v10;
  uint64_t v11;
  const char *v13;

  v13 = a2;
  v5 = *(unsigned __int8 *)(a1 + 40);
  if (!*(_BYTE *)(a1 + 40))
  {
    if ((*(_BYTE *)(*(_QWORD *)(a1 + 128) + 48 * *(_QWORD *)(a1 + 112) - 44) & 0x20) != 0)
      rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>::Key(*(char **)(a1 + 168), &v13);
    v9 = *(char **)(a1 + 168);
    v10 = *a4;
    rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>::Prefix(v9);
    rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>::WriteBool((uint64_t *)v9, v10);
    if ((a5 & 2) == 0)
    {
      v11 = *(_QWORD *)(a1 + 128) + 48 * *(_QWORD *)(a1 + 112);
      ++*(_QWORD *)(v11 - 16);
    }
  }
  return v5 == 0;
}

BOOL re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>::serializeChar(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4, char a5)
{
  int v5;
  char *v9;
  uint64_t v10;
  const char *v12;

  v12 = a2;
  v5 = *(unsigned __int8 *)(a1 + 40);
  if (!*(_BYTE *)(a1 + 40))
  {
    if ((*(_BYTE *)(*(_QWORD *)(a1 + 128) + 48 * *(_QWORD *)(a1 + 112) - 44) & 0x20) != 0)
      rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>::Key(*(char **)(a1 + 168), &v12);
    v9 = *(char **)(a1 + 168);
    rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>::Prefix(v9);
    rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>::WriteString((uint64_t *)v9, a4, 1u);
    if ((a5 & 2) == 0)
    {
      v10 = *(_QWORD *)(a1 + 128) + 48 * *(_QWORD *)(a1 + 112);
      ++*(_QWORD *)(v10 - 16);
    }
  }
  return v5 == 0;
}

BOOL re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>::serializeInt<signed char>(uint64_t a1, const char *a2, uint64_t a3, char *a4, char a5)
{
  int v5;
  char *v9;
  rapidjson::internal *v10;
  char *v11;
  uint64_t v12;
  const char *v14;

  v14 = a2;
  v5 = *(unsigned __int8 *)(a1 + 40);
  if (!*(_BYTE *)(a1 + 40))
  {
    if ((*(_BYTE *)(*(_QWORD *)(a1 + 128) + 48 * *(_QWORD *)(a1 + 112) - 44) & 0x20) != 0)
      rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>::Key(*(char **)(a1 + 168), &v14);
    v9 = *(char **)(a1 + 168);
    v10 = (rapidjson::internal *)*a4;
    rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>::Prefix(v9);
    rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>::WriteInt((uint64_t *)v9, v10, v11);
    if ((a5 & 2) == 0)
    {
      v12 = *(_QWORD *)(a1 + 128) + 48 * *(_QWORD *)(a1 + 112);
      ++*(_QWORD *)(v12 - 16);
    }
  }
  return v5 == 0;
}

BOOL re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>::serializeInt<short>(uint64_t a1, const char *a2, uint64_t a3, __int16 *a4, char a5)
{
  int v5;
  char *v9;
  rapidjson::internal *v10;
  char *v11;
  uint64_t v12;
  const char *v14;

  v14 = a2;
  v5 = *(unsigned __int8 *)(a1 + 40);
  if (!*(_BYTE *)(a1 + 40))
  {
    if ((*(_BYTE *)(*(_QWORD *)(a1 + 128) + 48 * *(_QWORD *)(a1 + 112) - 44) & 0x20) != 0)
      rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>::Key(*(char **)(a1 + 168), &v14);
    v9 = *(char **)(a1 + 168);
    v10 = (rapidjson::internal *)*a4;
    rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>::Prefix(v9);
    rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>::WriteInt((uint64_t *)v9, v10, v11);
    if ((a5 & 2) == 0)
    {
      v12 = *(_QWORD *)(a1 + 128) + 48 * *(_QWORD *)(a1 + 112);
      ++*(_QWORD *)(v12 - 16);
    }
  }
  return v5 == 0;
}

BOOL re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>::serializeInt<int>(uint64_t a1, const char *a2, uint64_t a3, unsigned int *a4, char a5)
{
  int v5;
  char *v9;
  rapidjson::internal *v10;
  char *v11;
  uint64_t v12;
  const char *v14;

  v14 = a2;
  v5 = *(unsigned __int8 *)(a1 + 40);
  if (!*(_BYTE *)(a1 + 40))
  {
    if ((*(_BYTE *)(*(_QWORD *)(a1 + 128) + 48 * *(_QWORD *)(a1 + 112) - 44) & 0x20) != 0)
      rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>::Key(*(char **)(a1 + 168), &v14);
    v9 = *(char **)(a1 + 168);
    v10 = (rapidjson::internal *)*a4;
    rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>::Prefix(v9);
    rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>::WriteInt((uint64_t *)v9, v10, v11);
    if ((a5 & 2) == 0)
    {
      v12 = *(_QWORD *)(a1 + 128) + 48 * *(_QWORD *)(a1 + 112);
      ++*(_QWORD *)(v12 - 16);
    }
  }
  return v5 == 0;
}

BOOL re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>::serializeInt<long long>(uint64_t a1, const char *a2, uint64_t a3, unint64_t *a4, char a5)
{
  int v5;
  char *v9;
  unint64_t v10;
  char *v11;
  uint64_t v12;
  const char *v14;

  v14 = a2;
  v5 = *(unsigned __int8 *)(a1 + 40);
  if (!*(_BYTE *)(a1 + 40))
  {
    if ((*(_BYTE *)(*(_QWORD *)(a1 + 128) + 48 * *(_QWORD *)(a1 + 112) - 44) & 0x20) != 0)
      rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>::Key(*(char **)(a1 + 168), &v14);
    v9 = *(char **)(a1 + 168);
    v10 = *a4;
    rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>::Prefix(v9);
    rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>::WriteInt64((uint64_t *)v9, v10, v11);
    if ((a5 & 2) == 0)
    {
      v12 = *(_QWORD *)(a1 + 128) + 48 * *(_QWORD *)(a1 + 112);
      ++*(_QWORD *)(v12 - 16);
    }
  }
  return v5 == 0;
}

BOOL re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>::serializeInt<unsigned char>(uint64_t a1, const char *a2, uint64_t a3, unsigned __int8 *a4, char a5)
{
  int v5;
  char *v9;
  rapidjson::internal *v10;
  char *v11;
  uint64_t v12;
  const char *v14;

  v14 = a2;
  v5 = *(unsigned __int8 *)(a1 + 40);
  if (!*(_BYTE *)(a1 + 40))
  {
    if ((*(_BYTE *)(*(_QWORD *)(a1 + 128) + 48 * *(_QWORD *)(a1 + 112) - 44) & 0x20) != 0)
      rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>::Key(*(char **)(a1 + 168), &v14);
    v9 = *(char **)(a1 + 168);
    v10 = (rapidjson::internal *)*a4;
    rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>::Prefix(v9);
    rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>::WriteUint((uint64_t *)v9, v10, v11);
    if ((a5 & 2) == 0)
    {
      v12 = *(_QWORD *)(a1 + 128) + 48 * *(_QWORD *)(a1 + 112);
      ++*(_QWORD *)(v12 - 16);
    }
  }
  return v5 == 0;
}

BOOL re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>::serializeInt<unsigned short>(uint64_t a1, const char *a2, uint64_t a3, unsigned __int16 *a4, char a5)
{
  int v5;
  char *v9;
  rapidjson::internal *v10;
  char *v11;
  uint64_t v12;
  const char *v14;

  v14 = a2;
  v5 = *(unsigned __int8 *)(a1 + 40);
  if (!*(_BYTE *)(a1 + 40))
  {
    if ((*(_BYTE *)(*(_QWORD *)(a1 + 128) + 48 * *(_QWORD *)(a1 + 112) - 44) & 0x20) != 0)
      rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>::Key(*(char **)(a1 + 168), &v14);
    v9 = *(char **)(a1 + 168);
    v10 = (rapidjson::internal *)*a4;
    rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>::Prefix(v9);
    rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>::WriteUint((uint64_t *)v9, v10, v11);
    if ((a5 & 2) == 0)
    {
      v12 = *(_QWORD *)(a1 + 128) + 48 * *(_QWORD *)(a1 + 112);
      ++*(_QWORD *)(v12 - 16);
    }
  }
  return v5 == 0;
}

BOOL re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>::serializeInt<unsigned long long>(uint64_t a1, const char *a2, uint64_t a3, rapidjson::internal **a4, char a5)
{
  int v5;
  char *v9;
  rapidjson::internal *v10;
  char *v11;
  uint64_t v12;
  const char *v14;

  v14 = a2;
  v5 = *(unsigned __int8 *)(a1 + 40);
  if (!*(_BYTE *)(a1 + 40))
  {
    if ((*(_BYTE *)(*(_QWORD *)(a1 + 128) + 48 * *(_QWORD *)(a1 + 112) - 44) & 0x20) != 0)
      rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>::Key(*(char **)(a1 + 168), &v14);
    v9 = *(char **)(a1 + 168);
    v10 = *a4;
    rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>::Prefix(v9);
    rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>::WriteUint64((uint64_t *)v9, v10, v11);
    if ((a5 & 2) == 0)
    {
      v12 = *(_QWORD *)(a1 + 128) + 48 * *(_QWORD *)(a1 + 112);
      ++*(_QWORD *)(v12 - 16);
    }
  }
  return v5 == 0;
}

BOOL re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>::serializeReal<float>(uint64_t a1, const char *a2, uint64_t a3, float *a4, char a5)
{
  int v5;
  float v9;
  char *v10;
  const char *v11;
  uint64_t v12;
  double v14;
  const char *v15;
  const char *v16;

  v16 = a2;
  v5 = *(unsigned __int8 *)(a1 + 40);
  if (!*(_BYTE *)(a1 + 40))
  {
    if ((*(_BYTE *)(*(_QWORD *)(a1 + 128) + 48 * *(_QWORD *)(a1 + 112) - 44) & 0x20) != 0)
      rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>::Key(*(char **)(a1 + 168), &v16);
    v9 = *a4;
    v10 = *(char **)(a1 + 168);
    if (fabsf(v9) != INFINITY)
    {
      v14 = v9;
      rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>::Prefix(*(char **)(a1 + 168));
      rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>::WriteDouble((uint64_t)v10, v14);
      if ((a5 & 2) != 0)
        return v5 == 0;
      goto LABEL_8;
    }
    v11 = "-Infinity";
    if (v9 > 0.0)
      v11 = "Infinity";
    v15 = v11;
    rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>::Key(v10, &v15);
    if ((a5 & 2) == 0)
    {
LABEL_8:
      v12 = *(_QWORD *)(a1 + 128) + 48 * *(_QWORD *)(a1 + 112);
      ++*(_QWORD *)(v12 - 16);
    }
  }
  return v5 == 0;
}

BOOL re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>::serializeReal<double>(uint64_t a1, const char *a2, uint64_t a3, double *a4, char a5)
{
  int v5;
  double v9;
  char *v10;
  const char *v11;
  uint64_t v12;
  const char *v14;
  const char *v15;

  v15 = a2;
  v5 = *(unsigned __int8 *)(a1 + 40);
  if (!*(_BYTE *)(a1 + 40))
  {
    if ((*(_BYTE *)(*(_QWORD *)(a1 + 128) + 48 * *(_QWORD *)(a1 + 112) - 44) & 0x20) != 0)
      rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>::Key(*(char **)(a1 + 168), &v15);
    v9 = *a4;
    v10 = *(char **)(a1 + 168);
    if (fabs(v9) != INFINITY)
    {
      rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>::Prefix(*(char **)(a1 + 168));
      rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>::WriteDouble((uint64_t)v10, v9);
      if ((a5 & 2) != 0)
        return v5 == 0;
      goto LABEL_8;
    }
    v11 = "-Infinity";
    if (v9 > 0.0)
      v11 = "Infinity";
    v14 = v11;
    rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>::Key(v10, &v14);
    if ((a5 & 2) == 0)
    {
LABEL_8:
      v12 = *(_QWORD *)(a1 + 128) + 48 * *(_QWORD *)(a1 + 112);
      ++*(_QWORD *)(v12 - 16);
    }
  }
  return v5 == 0;
}

double re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>::beginOptional(uint64_t a1, const char *a2, uint64_t a3, _BYTE *a4, int a5)
{
  uint64_t v8;
  char *v9;
  double result;
  __int128 v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  const char *v16;

  v16 = a2;
  if (!*(_BYTE *)(a1 + 40))
  {
    if ((*(_BYTE *)(*(_QWORD *)(a1 + 128) + 48 * *(_QWORD *)(a1 + 112) - 44) & 0x20) != 0)
      rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>::Key(*(char **)(a1 + 168), &v16);
    if (*a4)
    {
      v8 = 1;
    }
    else
    {
      v9 = *(char **)(a1 + 168);
      rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>::Prefix(v9);
      rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>::WriteNull((uint64_t *)v9);
      v8 = *a4;
    }
    LOBYTE(v11) = 3;
    DWORD1(v11) = a5 & 0xFFFFFFDF;
    *((_QWORD *)&v11 + 1) = v16;
    v12 = 0;
    v14 = 0;
    v15 = 0;
    v13 = v8;
    return re::Encoder<re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>,re::DynamicArrayBufferedOutputStream>::pushState((_QWORD *)a1, &v11);
  }
  return result;
}

BOOL re::internal::serializeDictionaryWithInteger<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,unsigned long long>(uint64_t a1, const char *a2, const re::TypeInfo *a3, uint64_t a4, re *a5, const re::TypeInfo *a6, int a7)
{
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  BOOL v17;
  uint64_t v18;
  uint64_t v19;
  void (*v20)(uint64_t, __n128 *, _QWORD, unint64_t *, _BYTE *, _BYTE *, _QWORD);
  _BOOL4 v21;
  _BOOL8 result;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  __n128 v27;
  unint64_t v28;
  uint64_t v29;
  unint64_t **v30;
  unint64_t **v31;
  unint64_t *v32;
  unint64_t *v33;
  uint64_t *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  _BYTE v40[16];
  uint64_t v41;
  _BYTE v42[32];
  _BYTE v43[32];
  uint64_t v44;
  uint64_t v45;
  unint64_t v46;
  int v47;
  unint64_t **v48;
  __n128 v49[2];
  uint64_t v50;

  v50 = *MEMORY[0x24BDAC8D0];
  if (a5 == a6)
    goto LABEL_13;
  if (*(_QWORD *)a5 == *(_QWORD *)a6)
  {
    v14 = **((_QWORD **)a5 + 2);
    v15 = **((_QWORD **)a6 + 2);
    if ((unsigned __int16)v14 == (unsigned __int16)v15)
    {
      v17 = WORD1(v14) == WORD1(v15);
      v16 = (v15 ^ v14) & 0xFFFFFF00000000;
      v17 = v17 && v16 == 0;
      if (v17)
        goto LABEL_13;
    }
  }
  else if (re::areSameTranslatedVersion(a5, a6, a3))
  {
    goto LABEL_13;
  }
  if (*((unsigned __int8 *)a5 + 12) != *((unsigned __int8 *)a6 + 12)
    || (re::TypeRegistry::typeInfo(*(_QWORD **)a6, *(_QWORD *)(*((_QWORD *)a6 + 2) + 72), &v44),
        re::TypeInfo::TypeInfo((uint64_t)v43, (uint64_t)&v45),
        v43[12] != 1)
    || !re::TypeInfo::isInteger((re::TypeInfo *)v43))
  {
    re::internal::setTypeMismatchError<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>(a1, a2, a5, a6);
    return 0;
  }
LABEL_13:
  if (a7)
    return *(_BYTE *)(a1 + 64) == 0;
  v18 = *(_QWORD *)(a1 + 56);
  re::TypeRegistry::typeInfo(*(_QWORD **)a5, *(_QWORD *)(*((_QWORD *)a5 + 2) + 80), &v44);
  re::TypeInfo::TypeInfo((uint64_t)v43, (uint64_t)&v45);
  re::TypeRegistry::typeInfo(*(_QWORD **)a6, *(_QWORD *)(*((_QWORD *)a6 + 2) + 80), &v44);
  re::TypeInfo::TypeInfo((uint64_t)v42, (uint64_t)&v45);
  re::TypeInfo::TypeInfo((uint64_t)v40, (uint64_t)a5);
  v19 = (*(uint64_t (**)(uint64_t, _BYTE *))(*(_QWORD *)a1 + 80))(a1, v43);
  if (v19)
  {
    v20 = (void (*)(uint64_t, __n128 *, _QWORD, unint64_t *, _BYTE *, _BYTE *, _QWORD))v19;
    v21 = re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>::beginObject(a1 + 24, a2, (uint64_t)a3, 0);
    result = 0;
    if (!v21)
      return result;
    v23 = (*(uint64_t (**)(uint64_t))(v41 + 88))(a4);
    if (v23)
    {
      v48 = 0;
      v45 = 0;
      v46 = 0;
      v47 = 0;
      v44 = v18;
      re::DynamicArray<re::RigNodeConstraint>::setCapacity(&v44, v23);
      ++v47;
      v24 = (*(uint64_t (**)(uint64_t, uint64_t))(v41 + 112))(a4, v18);
      if ((*(unsigned int (**)(void))(v41 + 120))())
      {
        do
        {
          v25 = (*(uint64_t (**)(uint64_t))(v41 + 128))(v24);
          v26 = (*(uint64_t (**)(uint64_t))(v41 + 136))(v24);
          v49[0].n128_u64[0] = v25;
          v49[0].n128_u64[1] = v26;
          v27 = re::DynamicArray<re::RigNodeConstraint>::add((_anonymous_namespace_ *)&v44, v49);
        }
        while (((*(uint64_t (**)(uint64_t, __n128))(v41 + 120))(v24, v27) & 1) != 0);
      }
      (*(void (**)(uint64_t, uint64_t))(v41 + 144))(v24, v18);
      v28 = 126 - 2 * __clz(v46);
      if (v46)
        v29 = v28;
      else
        v29 = 0;
      std::__introsort<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithInteger<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,unsigned long long>(re::Serializer<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<unsigned long long const*,void *,true> const&,re::Pair<unsigned long long const*,void *,true> const&)#1} &,re::Pair<unsigned long long const*,void *,true>*,false>(v48, &v48[2 * v46], (uint64_t)v49, v29, 1);
      if (v46)
      {
        v30 = v48;
        v31 = &v48[2 * v46];
        do
        {
          v32 = *v30;
          v33 = v30[1];
          v30 += 2;
          *(_BYTE *)std::__itoa::__traits_base<unsigned long long,void>::__convert[abi:nn180100](v49, *v32) = 0;
          v20(a1, v49, 0, v33, v43, v42, 0);
        }
        while (v30 != v31);
      }
      if (v44)
      {
        if (v48)
          (*(void (**)(void))(*(_QWORD *)v44 + 40))();
      }
    }
    re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>::endObject((_anonymous_namespace_ *)(a1 + 24));
    return *(_BYTE *)(a1 + 64) == 0;
  }
  v34 = re::TypeInfo::name((re::TypeInfo *)v43);
  re::Serializer<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>::setError(a1, 0, "Failed to resolve serialize function for type \"%s\"", v35, v36, v37, v38, v39, v34[1]);
  return 0;
}

BOOL re::internal::serializeDictionaryWithInteger<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,unsigned int>(uint64_t a1, const char *a2, const re::TypeInfo *a3, uint64_t a4, re *a5, const re::TypeInfo *a6, int a7)
{
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  BOOL v17;
  uint64_t v18;
  uint64_t v19;
  void (*v20)(uint64_t, __n128 *, _QWORD, unsigned int *, _BYTE *, _BYTE *, _QWORD);
  _BOOL4 v21;
  _BOOL8 result;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  __n128 v27;
  unint64_t v28;
  uint64_t v29;
  unsigned int **v30;
  unsigned int **v31;
  unsigned int *v32;
  unsigned int *v33;
  uint64_t *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  _BYTE v40[16];
  uint64_t v41;
  _BYTE v42[32];
  _BYTE v43[32];
  uint64_t v44;
  uint64_t v45;
  unint64_t v46;
  int v47;
  unsigned int **v48;
  __n128 v49[2];
  uint64_t v50;

  v50 = *MEMORY[0x24BDAC8D0];
  if (a5 == a6)
    goto LABEL_13;
  if (*(_QWORD *)a5 == *(_QWORD *)a6)
  {
    v14 = **((_QWORD **)a5 + 2);
    v15 = **((_QWORD **)a6 + 2);
    if ((unsigned __int16)v14 == (unsigned __int16)v15)
    {
      v17 = WORD1(v14) == WORD1(v15);
      v16 = (v15 ^ v14) & 0xFFFFFF00000000;
      v17 = v17 && v16 == 0;
      if (v17)
        goto LABEL_13;
    }
  }
  else if (re::areSameTranslatedVersion(a5, a6, a3))
  {
    goto LABEL_13;
  }
  if (*((unsigned __int8 *)a5 + 12) != *((unsigned __int8 *)a6 + 12)
    || (re::TypeRegistry::typeInfo(*(_QWORD **)a6, *(_QWORD *)(*((_QWORD *)a6 + 2) + 72), &v44),
        re::TypeInfo::TypeInfo((uint64_t)v43, (uint64_t)&v45),
        v43[12] != 1)
    || !re::TypeInfo::isInteger((re::TypeInfo *)v43))
  {
    re::internal::setTypeMismatchError<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>(a1, a2, a5, a6);
    return 0;
  }
LABEL_13:
  if (a7)
    return *(_BYTE *)(a1 + 64) == 0;
  v18 = *(_QWORD *)(a1 + 56);
  re::TypeRegistry::typeInfo(*(_QWORD **)a5, *(_QWORD *)(*((_QWORD *)a5 + 2) + 80), &v44);
  re::TypeInfo::TypeInfo((uint64_t)v43, (uint64_t)&v45);
  re::TypeRegistry::typeInfo(*(_QWORD **)a6, *(_QWORD *)(*((_QWORD *)a6 + 2) + 80), &v44);
  re::TypeInfo::TypeInfo((uint64_t)v42, (uint64_t)&v45);
  re::TypeInfo::TypeInfo((uint64_t)v40, (uint64_t)a5);
  v19 = (*(uint64_t (**)(uint64_t, _BYTE *))(*(_QWORD *)a1 + 80))(a1, v43);
  if (v19)
  {
    v20 = (void (*)(uint64_t, __n128 *, _QWORD, unsigned int *, _BYTE *, _BYTE *, _QWORD))v19;
    v21 = re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>::beginObject(a1 + 24, a2, (uint64_t)a3, 0);
    result = 0;
    if (!v21)
      return result;
    v23 = (*(uint64_t (**)(uint64_t))(v41 + 88))(a4);
    if (v23)
    {
      v48 = 0;
      v45 = 0;
      v46 = 0;
      v47 = 0;
      v44 = v18;
      re::DynamicArray<re::RigNodeConstraint>::setCapacity(&v44, v23);
      ++v47;
      v24 = (*(uint64_t (**)(uint64_t, uint64_t))(v41 + 112))(a4, v18);
      if ((*(unsigned int (**)(void))(v41 + 120))())
      {
        do
        {
          v25 = (*(uint64_t (**)(uint64_t))(v41 + 128))(v24);
          v26 = (*(uint64_t (**)(uint64_t))(v41 + 136))(v24);
          v49[0].n128_u64[0] = v25;
          v49[0].n128_u64[1] = v26;
          v27 = re::DynamicArray<re::RigNodeConstraint>::add((_anonymous_namespace_ *)&v44, v49);
        }
        while (((*(uint64_t (**)(uint64_t, __n128))(v41 + 120))(v24, v27) & 1) != 0);
      }
      (*(void (**)(uint64_t, uint64_t))(v41 + 144))(v24, v18);
      v28 = 126 - 2 * __clz(v46);
      if (v46)
        v29 = v28;
      else
        v29 = 0;
      std::__introsort<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithInteger<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,unsigned int>(re::Serializer<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<unsigned int const*,void *,true> const&,re::Pair<unsigned int const*,void *,true> const&)#1} &,re::Pair<unsigned int const*,void *,true>*,false>(v48, &v48[2 * v46], (uint64_t)v49, v29, 1);
      if (v46)
      {
        v30 = v48;
        v31 = &v48[2 * v46];
        do
        {
          v32 = *v30;
          v33 = v30[1];
          v30 += 2;
          *(_BYTE *)std::__itoa::__base_10_u32[abi:nn180100](v49, *v32) = 0;
          v20(a1, v49, 0, v33, v43, v42, 0);
        }
        while (v30 != v31);
      }
      if (v44)
      {
        if (v48)
          (*(void (**)(void))(*(_QWORD *)v44 + 40))();
      }
    }
    re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>::endObject((_anonymous_namespace_ *)(a1 + 24));
    return *(_BYTE *)(a1 + 64) == 0;
  }
  v34 = re::TypeInfo::name((re::TypeInfo *)v43);
  re::Serializer<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>::setError(a1, 0, "Failed to resolve serialize function for type \"%s\"", v35, v36, v37, v38, v39, v34[1]);
  return 0;
}

BOOL re::internal::serializeDictionaryWithInteger<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,unsigned short>(uint64_t a1, const char *a2, const re::TypeInfo *a3, uint64_t a4, re *a5, const re::TypeInfo *a6, int a7)
{
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  BOOL v17;
  uint64_t v18;
  uint64_t v19;
  void (*v20)(uint64_t, __n128 *, _QWORD, unsigned __int16 *, _BYTE *, _BYTE *, _QWORD);
  _BOOL4 v21;
  _BOOL8 result;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  __n128 v27;
  unint64_t v28;
  uint64_t v29;
  unsigned __int16 **v30;
  unsigned __int16 **v31;
  unsigned __int16 *v32;
  unsigned __int16 *v33;
  uint64_t *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  _BYTE v40[16];
  uint64_t v41;
  _BYTE v42[32];
  _BYTE v43[32];
  uint64_t v44;
  uint64_t v45;
  unint64_t v46;
  int v47;
  unsigned __int16 **v48;
  __n128 v49[2];
  uint64_t v50;

  v50 = *MEMORY[0x24BDAC8D0];
  if (a5 == a6)
    goto LABEL_13;
  if (*(_QWORD *)a5 == *(_QWORD *)a6)
  {
    v14 = **((_QWORD **)a5 + 2);
    v15 = **((_QWORD **)a6 + 2);
    if ((unsigned __int16)v14 == (unsigned __int16)v15)
    {
      v17 = WORD1(v14) == WORD1(v15);
      v16 = (v15 ^ v14) & 0xFFFFFF00000000;
      v17 = v17 && v16 == 0;
      if (v17)
        goto LABEL_13;
    }
  }
  else if (re::areSameTranslatedVersion(a5, a6, a3))
  {
    goto LABEL_13;
  }
  if (*((unsigned __int8 *)a5 + 12) != *((unsigned __int8 *)a6 + 12)
    || (re::TypeRegistry::typeInfo(*(_QWORD **)a6, *(_QWORD *)(*((_QWORD *)a6 + 2) + 72), &v44),
        re::TypeInfo::TypeInfo((uint64_t)v43, (uint64_t)&v45),
        v43[12] != 1)
    || !re::TypeInfo::isInteger((re::TypeInfo *)v43))
  {
    re::internal::setTypeMismatchError<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>(a1, a2, a5, a6);
    return 0;
  }
LABEL_13:
  if (a7)
    return *(_BYTE *)(a1 + 64) == 0;
  v18 = *(_QWORD *)(a1 + 56);
  re::TypeRegistry::typeInfo(*(_QWORD **)a5, *(_QWORD *)(*((_QWORD *)a5 + 2) + 80), &v44);
  re::TypeInfo::TypeInfo((uint64_t)v43, (uint64_t)&v45);
  re::TypeRegistry::typeInfo(*(_QWORD **)a6, *(_QWORD *)(*((_QWORD *)a6 + 2) + 80), &v44);
  re::TypeInfo::TypeInfo((uint64_t)v42, (uint64_t)&v45);
  re::TypeInfo::TypeInfo((uint64_t)v40, (uint64_t)a5);
  v19 = (*(uint64_t (**)(uint64_t, _BYTE *))(*(_QWORD *)a1 + 80))(a1, v43);
  if (v19)
  {
    v20 = (void (*)(uint64_t, __n128 *, _QWORD, unsigned __int16 *, _BYTE *, _BYTE *, _QWORD))v19;
    v21 = re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>::beginObject(a1 + 24, a2, (uint64_t)a3, 0);
    result = 0;
    if (!v21)
      return result;
    v23 = (*(uint64_t (**)(uint64_t))(v41 + 88))(a4);
    if (v23)
    {
      v48 = 0;
      v45 = 0;
      v46 = 0;
      v47 = 0;
      v44 = v18;
      re::DynamicArray<re::RigNodeConstraint>::setCapacity(&v44, v23);
      ++v47;
      v24 = (*(uint64_t (**)(uint64_t, uint64_t))(v41 + 112))(a4, v18);
      if ((*(unsigned int (**)(void))(v41 + 120))())
      {
        do
        {
          v25 = (*(uint64_t (**)(uint64_t))(v41 + 128))(v24);
          v26 = (*(uint64_t (**)(uint64_t))(v41 + 136))(v24);
          v49[0].n128_u64[0] = v25;
          v49[0].n128_u64[1] = v26;
          v27 = re::DynamicArray<re::RigNodeConstraint>::add((_anonymous_namespace_ *)&v44, v49);
        }
        while (((*(uint64_t (**)(uint64_t, __n128))(v41 + 120))(v24, v27) & 1) != 0);
      }
      (*(void (**)(uint64_t, uint64_t))(v41 + 144))(v24, v18);
      v28 = 126 - 2 * __clz(v46);
      if (v46)
        v29 = v28;
      else
        v29 = 0;
      std::__introsort<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithInteger<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,unsigned short>(re::Serializer<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<unsigned short const*,void *,true> const&,re::Pair<unsigned short const*,void *,true> const&)#1} &,re::Pair<unsigned short const*,void *,true>*,false>(v48, &v48[2 * v46], (uint64_t)v49, v29, 1);
      if (v46)
      {
        v30 = v48;
        v31 = &v48[2 * v46];
        do
        {
          v32 = *v30;
          v33 = v30[1];
          v30 += 2;
          *(_BYTE *)std::__itoa::__base_10_u32[abi:nn180100](v49, *v32) = 0;
          v20(a1, v49, 0, v33, v43, v42, 0);
        }
        while (v30 != v31);
      }
      if (v44)
      {
        if (v48)
          (*(void (**)(void))(*(_QWORD *)v44 + 40))();
      }
    }
    re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>::endObject((_anonymous_namespace_ *)(a1 + 24));
    return *(_BYTE *)(a1 + 64) == 0;
  }
  v34 = re::TypeInfo::name((re::TypeInfo *)v43);
  re::Serializer<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>::setError(a1, 0, "Failed to resolve serialize function for type \"%s\"", v35, v36, v37, v38, v39, v34[1]);
  return 0;
}

BOOL re::internal::serializeDictionaryWithInteger<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,unsigned char>(uint64_t a1, const char *a2, const re::TypeInfo *a3, uint64_t a4, re *a5, const re::TypeInfo *a6, int a7)
{
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  BOOL v17;
  uint64_t v18;
  uint64_t v19;
  void (*v20)(uint64_t, __n128 *, _QWORD, unsigned __int8 *, _BYTE *, _BYTE *, _QWORD);
  _BOOL4 v21;
  _BOOL8 result;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  __n128 v27;
  unint64_t v28;
  uint64_t v29;
  unsigned __int8 **v30;
  unsigned __int8 **v31;
  unsigned __int8 *v32;
  unsigned __int8 *v33;
  uint64_t *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  _BYTE v40[16];
  uint64_t v41;
  _BYTE v42[32];
  _BYTE v43[32];
  uint64_t v44;
  uint64_t v45;
  unint64_t v46;
  int v47;
  unsigned __int8 **v48;
  __n128 v49[2];
  uint64_t v50;

  v50 = *MEMORY[0x24BDAC8D0];
  if (a5 == a6)
    goto LABEL_13;
  if (*(_QWORD *)a5 == *(_QWORD *)a6)
  {
    v14 = **((_QWORD **)a5 + 2);
    v15 = **((_QWORD **)a6 + 2);
    if ((unsigned __int16)v14 == (unsigned __int16)v15)
    {
      v17 = WORD1(v14) == WORD1(v15);
      v16 = (v15 ^ v14) & 0xFFFFFF00000000;
      v17 = v17 && v16 == 0;
      if (v17)
        goto LABEL_13;
    }
  }
  else if (re::areSameTranslatedVersion(a5, a6, a3))
  {
    goto LABEL_13;
  }
  if (*((unsigned __int8 *)a5 + 12) != *((unsigned __int8 *)a6 + 12)
    || (re::TypeRegistry::typeInfo(*(_QWORD **)a6, *(_QWORD *)(*((_QWORD *)a6 + 2) + 72), &v44),
        re::TypeInfo::TypeInfo((uint64_t)v43, (uint64_t)&v45),
        v43[12] != 1)
    || !re::TypeInfo::isInteger((re::TypeInfo *)v43))
  {
    re::internal::setTypeMismatchError<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>(a1, a2, a5, a6);
    return 0;
  }
LABEL_13:
  if (a7)
    return *(_BYTE *)(a1 + 64) == 0;
  v18 = *(_QWORD *)(a1 + 56);
  re::TypeRegistry::typeInfo(*(_QWORD **)a5, *(_QWORD *)(*((_QWORD *)a5 + 2) + 80), &v44);
  re::TypeInfo::TypeInfo((uint64_t)v43, (uint64_t)&v45);
  re::TypeRegistry::typeInfo(*(_QWORD **)a6, *(_QWORD *)(*((_QWORD *)a6 + 2) + 80), &v44);
  re::TypeInfo::TypeInfo((uint64_t)v42, (uint64_t)&v45);
  re::TypeInfo::TypeInfo((uint64_t)v40, (uint64_t)a5);
  v19 = (*(uint64_t (**)(uint64_t, _BYTE *))(*(_QWORD *)a1 + 80))(a1, v43);
  if (v19)
  {
    v20 = (void (*)(uint64_t, __n128 *, _QWORD, unsigned __int8 *, _BYTE *, _BYTE *, _QWORD))v19;
    v21 = re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>::beginObject(a1 + 24, a2, (uint64_t)a3, 0);
    result = 0;
    if (!v21)
      return result;
    v23 = (*(uint64_t (**)(uint64_t))(v41 + 88))(a4);
    if (v23)
    {
      v48 = 0;
      v45 = 0;
      v46 = 0;
      v47 = 0;
      v44 = v18;
      re::DynamicArray<re::RigNodeConstraint>::setCapacity(&v44, v23);
      ++v47;
      v24 = (*(uint64_t (**)(uint64_t, uint64_t))(v41 + 112))(a4, v18);
      if ((*(unsigned int (**)(void))(v41 + 120))())
      {
        do
        {
          v25 = (*(uint64_t (**)(uint64_t))(v41 + 128))(v24);
          v26 = (*(uint64_t (**)(uint64_t))(v41 + 136))(v24);
          v49[0].n128_u64[0] = v25;
          v49[0].n128_u64[1] = v26;
          v27 = re::DynamicArray<re::RigNodeConstraint>::add((_anonymous_namespace_ *)&v44, v49);
        }
        while (((*(uint64_t (**)(uint64_t, __n128))(v41 + 120))(v24, v27) & 1) != 0);
      }
      (*(void (**)(uint64_t, uint64_t))(v41 + 144))(v24, v18);
      v28 = 126 - 2 * __clz(v46);
      if (v46)
        v29 = v28;
      else
        v29 = 0;
      std::__introsort<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithInteger<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,unsigned char>(re::Serializer<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<unsigned char const*,void *,true> const&,re::Pair<unsigned char const*,void *,true> const&)#1} &,re::Pair<unsigned char const*,void *,true>*,false>(v48, &v48[2 * v46], (uint64_t)v49, v29, 1);
      if (v46)
      {
        v30 = v48;
        v31 = &v48[2 * v46];
        do
        {
          v32 = *v30;
          v33 = v30[1];
          v30 += 2;
          *(_BYTE *)std::__itoa::__base_10_u32[abi:nn180100](v49, *v32) = 0;
          v20(a1, v49, 0, v33, v43, v42, 0);
        }
        while (v30 != v31);
      }
      if (v44)
      {
        if (v48)
          (*(void (**)(void))(*(_QWORD *)v44 + 40))();
      }
    }
    re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>::endObject((_anonymous_namespace_ *)(a1 + 24));
    return *(_BYTE *)(a1 + 64) == 0;
  }
  v34 = re::TypeInfo::name((re::TypeInfo *)v43);
  re::Serializer<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>::setError(a1, 0, "Failed to resolve serialize function for type \"%s\"", v35, v36, v37, v38, v39, v34[1]);
  return 0;
}

BOOL re::internal::serializeDictionaryWithInteger<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,long long>(uint64_t a1, const char *a2, const re::TypeInfo *a3, uint64_t a4, re *a5, const re::TypeInfo *a6, int a7)
{
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  BOOL v17;
  uint64_t v18;
  uint64_t v19;
  void (*v20)(uint64_t, __n128 *, _QWORD, uint64_t *, _BYTE *, _BYTE *, _QWORD);
  _anonymous_namespace_ *v21;
  _BOOL4 v22;
  _BOOL8 result;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  __n128 v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t **v31;
  uint64_t **v32;
  unint64_t v33;
  __n128 *v34;
  uint64_t *v35;
  unsigned int v36;
  int64_t v37;
  _WORD *v38;
  uint64_t *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  _BYTE v45[16];
  uint64_t v46;
  _BYTE v47[32];
  _BYTE v48[32];
  uint64_t v49;
  uint64_t v50;
  unint64_t v51;
  int v52;
  uint64_t **v53;
  __n128 v54[2];
  _QWORD v55[2];

  v55[0] = *MEMORY[0x24BDAC8D0];
  if (a5 == a6)
    goto LABEL_13;
  if (*(_QWORD *)a5 == *(_QWORD *)a6)
  {
    v14 = **((_QWORD **)a5 + 2);
    v15 = **((_QWORD **)a6 + 2);
    if ((unsigned __int16)v14 == (unsigned __int16)v15)
    {
      v17 = WORD1(v14) == WORD1(v15);
      v16 = (v15 ^ v14) & 0xFFFFFF00000000;
      v17 = v17 && v16 == 0;
      if (v17)
        goto LABEL_13;
    }
  }
  else if (re::areSameTranslatedVersion(a5, a6, a3))
  {
    goto LABEL_13;
  }
  if (*((unsigned __int8 *)a5 + 12) != *((unsigned __int8 *)a6 + 12)
    || (re::TypeRegistry::typeInfo(*(_QWORD **)a6, *(_QWORD *)(*((_QWORD *)a6 + 2) + 72), &v49),
        re::TypeInfo::TypeInfo((uint64_t)v48, (uint64_t)&v50),
        v48[12] != 1)
    || !re::TypeInfo::isInteger((re::TypeInfo *)v48))
  {
    re::internal::setTypeMismatchError<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>(a1, a2, a5, a6);
    return 0;
  }
LABEL_13:
  if (a7)
    return *(_BYTE *)(a1 + 64) == 0;
  v18 = *(_QWORD *)(a1 + 56);
  re::TypeRegistry::typeInfo(*(_QWORD **)a5, *(_QWORD *)(*((_QWORD *)a5 + 2) + 80), &v49);
  re::TypeInfo::TypeInfo((uint64_t)v48, (uint64_t)&v50);
  re::TypeRegistry::typeInfo(*(_QWORD **)a6, *(_QWORD *)(*((_QWORD *)a6 + 2) + 80), &v49);
  re::TypeInfo::TypeInfo((uint64_t)v47, (uint64_t)&v50);
  re::TypeInfo::TypeInfo((uint64_t)v45, (uint64_t)a5);
  v19 = (*(uint64_t (**)(uint64_t, _BYTE *))(*(_QWORD *)a1 + 80))(a1, v48);
  if (v19)
  {
    v20 = (void (*)(uint64_t, __n128 *, _QWORD, uint64_t *, _BYTE *, _BYTE *, _QWORD))v19;
    v21 = (_anonymous_namespace_ *)(a1 + 24);
    v22 = re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>::beginObject(a1 + 24, a2, (uint64_t)a3, 0);
    result = 0;
    if (!v22)
      return result;
    v24 = (*(uint64_t (**)(uint64_t))(v46 + 88))(a4);
    if (v24)
    {
      v53 = 0;
      v50 = 0;
      v51 = 0;
      v52 = 0;
      v49 = v18;
      re::DynamicArray<re::RigNodeConstraint>::setCapacity(&v49, v24);
      ++v52;
      v25 = (*(uint64_t (**)(uint64_t, uint64_t))(v46 + 112))(a4, v18);
      if ((*(unsigned int (**)(void))(v46 + 120))())
      {
        do
        {
          v26 = (*(uint64_t (**)(uint64_t))(v46 + 128))(v25);
          v27 = (*(uint64_t (**)(uint64_t))(v46 + 136))(v25);
          v54[0].n128_u64[0] = v26;
          v54[0].n128_u64[1] = v27;
          v28 = re::DynamicArray<re::RigNodeConstraint>::add((_anonymous_namespace_ *)&v49, v54);
        }
        while (((*(uint64_t (**)(uint64_t, __n128))(v46 + 120))(v25, v28) & 1) != 0);
      }
      (*(void (**)(uint64_t, uint64_t))(v46 + 144))(v25, v18);
      v29 = 126 - 2 * __clz(v51);
      if (v51)
        v30 = v29;
      else
        v30 = 0;
      std::__introsort<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithInteger<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,long long>(re::Serializer<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<long long const*,void *,true> const&,re::Pair<long long const*,void *,true> const&)#1} &,re::Pair<long long const*,void *,true>*,false>(v53, &v53[2 * v51], (uint64_t)v54, v30, 1);
      if (v51)
      {
        v31 = v53;
        v32 = &v53[2 * v51];
        do
        {
          v33 = **v31;
          if ((v33 & 0x8000000000000000) != 0)
          {
            v54[0].n128_u8[0] = 45;
            v33 = -(uint64_t)v33;
            v34 = (__n128 *)((char *)v54[0].n128_u64 + 1);
          }
          else
          {
            v34 = v54;
          }
          v35 = v31[1];
          if ((char *)v55 - (char *)v34 > 19
            || (v36 = (1233 * (64 - __clz(v33 | 1))) >> 12,
                v37 = v36 - (std::__itoa::__pow10_64[v36] > v33) + 1,
                v38 = v55,
                (char *)v55 - (char *)v34 >= v37))
          {
            v38 = std::__itoa::__traits_base<unsigned long long,void>::__convert[abi:nn180100](v34, v33);
          }
          *(_BYTE *)v38 = 0;
          v20(a1, v54, 0, v35, v48, v47, 0);
          v31 += 2;
        }
        while (v31 != v32);
      }
      v21 = (_anonymous_namespace_ *)(a1 + 24);
      if (v49)
      {
        if (v53)
          (*(void (**)(void))(*(_QWORD *)v49 + 40))();
      }
    }
    re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>::endObject(v21);
    return *(_BYTE *)(a1 + 64) == 0;
  }
  v39 = re::TypeInfo::name((re::TypeInfo *)v48);
  re::Serializer<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>::setError(a1, 0, "Failed to resolve serialize function for type \"%s\"", v40, v41, v42, v43, v44, v39[1]);
  return 0;
}

BOOL re::internal::serializeDictionaryWithInteger<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,int>(uint64_t a1, const char *a2, const re::TypeInfo *a3, uint64_t a4, re *a5, const re::TypeInfo *a6, int a7)
{
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  BOOL v17;
  uint64_t v18;
  uint64_t v19;
  void (*v20)(uint64_t, __n128 *, _QWORD, int *, _BYTE *, _BYTE *, _QWORD);
  _anonymous_namespace_ *v21;
  _BOOL4 v22;
  _BOOL8 result;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  __n128 v28;
  unint64_t v29;
  uint64_t v30;
  int **v31;
  int **v32;
  unsigned int v33;
  __n128 *v34;
  int *v35;
  unsigned int v36;
  int64_t v37;
  _WORD *v38;
  uint64_t *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  _BYTE v45[16];
  uint64_t v46;
  _BYTE v47[32];
  _BYTE v48[32];
  uint64_t v49;
  uint64_t v50;
  unint64_t v51;
  int v52;
  int **v53;
  __n128 v54[2];
  _QWORD v55[2];

  v55[0] = *MEMORY[0x24BDAC8D0];
  if (a5 == a6)
    goto LABEL_13;
  if (*(_QWORD *)a5 == *(_QWORD *)a6)
  {
    v14 = **((_QWORD **)a5 + 2);
    v15 = **((_QWORD **)a6 + 2);
    if ((unsigned __int16)v14 == (unsigned __int16)v15)
    {
      v17 = WORD1(v14) == WORD1(v15);
      v16 = (v15 ^ v14) & 0xFFFFFF00000000;
      v17 = v17 && v16 == 0;
      if (v17)
        goto LABEL_13;
    }
  }
  else if (re::areSameTranslatedVersion(a5, a6, a3))
  {
    goto LABEL_13;
  }
  if (*((unsigned __int8 *)a5 + 12) != *((unsigned __int8 *)a6 + 12)
    || (re::TypeRegistry::typeInfo(*(_QWORD **)a6, *(_QWORD *)(*((_QWORD *)a6 + 2) + 72), &v49),
        re::TypeInfo::TypeInfo((uint64_t)v48, (uint64_t)&v50),
        v48[12] != 1)
    || !re::TypeInfo::isInteger((re::TypeInfo *)v48))
  {
    re::internal::setTypeMismatchError<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>(a1, a2, a5, a6);
    return 0;
  }
LABEL_13:
  if (a7)
    return *(_BYTE *)(a1 + 64) == 0;
  v18 = *(_QWORD *)(a1 + 56);
  re::TypeRegistry::typeInfo(*(_QWORD **)a5, *(_QWORD *)(*((_QWORD *)a5 + 2) + 80), &v49);
  re::TypeInfo::TypeInfo((uint64_t)v48, (uint64_t)&v50);
  re::TypeRegistry::typeInfo(*(_QWORD **)a6, *(_QWORD *)(*((_QWORD *)a6 + 2) + 80), &v49);
  re::TypeInfo::TypeInfo((uint64_t)v47, (uint64_t)&v50);
  re::TypeInfo::TypeInfo((uint64_t)v45, (uint64_t)a5);
  v19 = (*(uint64_t (**)(uint64_t, _BYTE *))(*(_QWORD *)a1 + 80))(a1, v48);
  if (v19)
  {
    v20 = (void (*)(uint64_t, __n128 *, _QWORD, int *, _BYTE *, _BYTE *, _QWORD))v19;
    v21 = (_anonymous_namespace_ *)(a1 + 24);
    v22 = re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>::beginObject(a1 + 24, a2, (uint64_t)a3, 0);
    result = 0;
    if (!v22)
      return result;
    v24 = (*(uint64_t (**)(uint64_t))(v46 + 88))(a4);
    if (v24)
    {
      v53 = 0;
      v50 = 0;
      v51 = 0;
      v52 = 0;
      v49 = v18;
      re::DynamicArray<re::RigNodeConstraint>::setCapacity(&v49, v24);
      ++v52;
      v25 = (*(uint64_t (**)(uint64_t, uint64_t))(v46 + 112))(a4, v18);
      if ((*(unsigned int (**)(void))(v46 + 120))())
      {
        do
        {
          v26 = (*(uint64_t (**)(uint64_t))(v46 + 128))(v25);
          v27 = (*(uint64_t (**)(uint64_t))(v46 + 136))(v25);
          v54[0].n128_u64[0] = v26;
          v54[0].n128_u64[1] = v27;
          v28 = re::DynamicArray<re::RigNodeConstraint>::add((_anonymous_namespace_ *)&v49, v54);
        }
        while (((*(uint64_t (**)(uint64_t, __n128))(v46 + 120))(v25, v28) & 1) != 0);
      }
      (*(void (**)(uint64_t, uint64_t))(v46 + 144))(v25, v18);
      v29 = 126 - 2 * __clz(v51);
      if (v51)
        v30 = v29;
      else
        v30 = 0;
      std::__introsort<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithInteger<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,int>(re::Serializer<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<int const*,void *,true> const&,re::Pair<int const*,void *,true> const&)#1} &,re::Pair<int const*,void *,true>*,false>(v53, &v53[2 * v51], (uint64_t)v54, v30, 1);
      if (v51)
      {
        v31 = v53;
        v32 = &v53[2 * v51];
        do
        {
          v33 = **v31;
          if ((v33 & 0x80000000) != 0)
          {
            v54[0].n128_u8[0] = 45;
            v33 = -v33;
            v34 = (__n128 *)((char *)v54[0].n128_u64 + 1);
          }
          else
          {
            v34 = v54;
          }
          v35 = v31[1];
          if ((char *)v55 - (char *)v34 > 9
            || (v36 = (1233 * (32 - __clz(v33 | 1))) >> 12,
                v37 = (((__PAIR64__(v36, v33) - std::__itoa::__pow10_32[v36]) >> 32) + 1),
                v38 = v55,
                (char *)v55 - (char *)v34 >= v37))
          {
            v38 = std::__itoa::__base_10_u32[abi:nn180100](v34, v33);
          }
          *(_BYTE *)v38 = 0;
          v20(a1, v54, 0, v35, v48, v47, 0);
          v31 += 2;
        }
        while (v31 != v32);
      }
      v21 = (_anonymous_namespace_ *)(a1 + 24);
      if (v49)
      {
        if (v53)
          (*(void (**)(void))(*(_QWORD *)v49 + 40))();
      }
    }
    re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>::endObject(v21);
    return *(_BYTE *)(a1 + 64) == 0;
  }
  v39 = re::TypeInfo::name((re::TypeInfo *)v48);
  re::Serializer<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>::setError(a1, 0, "Failed to resolve serialize function for type \"%s\"", v40, v41, v42, v43, v44, v39[1]);
  return 0;
}

BOOL re::internal::serializeDictionaryWithInteger<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,short>(uint64_t a1, const char *a2, const re::TypeInfo *a3, uint64_t a4, re *a5, const re::TypeInfo *a6, int a7)
{
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  BOOL v17;
  uint64_t v18;
  uint64_t v19;
  void (*v20)(uint64_t, __n128 *, _QWORD, __int16 *, _BYTE *, _BYTE *, _QWORD);
  _anonymous_namespace_ *v21;
  _BOOL4 v22;
  _BOOL8 result;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  __n128 v28;
  unint64_t v29;
  uint64_t v30;
  __int16 **v31;
  __int16 **v32;
  unsigned int v33;
  __n128 *v34;
  __int16 *v35;
  unsigned int v36;
  int64_t v37;
  _WORD *v38;
  uint64_t *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  _BYTE v45[16];
  uint64_t v46;
  _BYTE v47[32];
  _BYTE v48[32];
  uint64_t v49;
  uint64_t v50;
  unint64_t v51;
  int v52;
  __int16 **v53;
  __n128 v54[2];
  _QWORD v55[2];

  v55[0] = *MEMORY[0x24BDAC8D0];
  if (a5 == a6)
    goto LABEL_13;
  if (*(_QWORD *)a5 == *(_QWORD *)a6)
  {
    v14 = **((_QWORD **)a5 + 2);
    v15 = **((_QWORD **)a6 + 2);
    if ((unsigned __int16)v14 == (unsigned __int16)v15)
    {
      v17 = WORD1(v14) == WORD1(v15);
      v16 = (v15 ^ v14) & 0xFFFFFF00000000;
      v17 = v17 && v16 == 0;
      if (v17)
        goto LABEL_13;
    }
  }
  else if (re::areSameTranslatedVersion(a5, a6, a3))
  {
    goto LABEL_13;
  }
  if (*((unsigned __int8 *)a5 + 12) != *((unsigned __int8 *)a6 + 12)
    || (re::TypeRegistry::typeInfo(*(_QWORD **)a6, *(_QWORD *)(*((_QWORD *)a6 + 2) + 72), &v49),
        re::TypeInfo::TypeInfo((uint64_t)v48, (uint64_t)&v50),
        v48[12] != 1)
    || !re::TypeInfo::isInteger((re::TypeInfo *)v48))
  {
    re::internal::setTypeMismatchError<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>(a1, a2, a5, a6);
    return 0;
  }
LABEL_13:
  if (a7)
    return *(_BYTE *)(a1 + 64) == 0;
  v18 = *(_QWORD *)(a1 + 56);
  re::TypeRegistry::typeInfo(*(_QWORD **)a5, *(_QWORD *)(*((_QWORD *)a5 + 2) + 80), &v49);
  re::TypeInfo::TypeInfo((uint64_t)v48, (uint64_t)&v50);
  re::TypeRegistry::typeInfo(*(_QWORD **)a6, *(_QWORD *)(*((_QWORD *)a6 + 2) + 80), &v49);
  re::TypeInfo::TypeInfo((uint64_t)v47, (uint64_t)&v50);
  re::TypeInfo::TypeInfo((uint64_t)v45, (uint64_t)a5);
  v19 = (*(uint64_t (**)(uint64_t, _BYTE *))(*(_QWORD *)a1 + 80))(a1, v48);
  if (v19)
  {
    v20 = (void (*)(uint64_t, __n128 *, _QWORD, __int16 *, _BYTE *, _BYTE *, _QWORD))v19;
    v21 = (_anonymous_namespace_ *)(a1 + 24);
    v22 = re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>::beginObject(a1 + 24, a2, (uint64_t)a3, 0);
    result = 0;
    if (!v22)
      return result;
    v24 = (*(uint64_t (**)(uint64_t))(v46 + 88))(a4);
    if (v24)
    {
      v53 = 0;
      v50 = 0;
      v51 = 0;
      v52 = 0;
      v49 = v18;
      re::DynamicArray<re::RigNodeConstraint>::setCapacity(&v49, v24);
      ++v52;
      v25 = (*(uint64_t (**)(uint64_t, uint64_t))(v46 + 112))(a4, v18);
      if ((*(unsigned int (**)(void))(v46 + 120))())
      {
        do
        {
          v26 = (*(uint64_t (**)(uint64_t))(v46 + 128))(v25);
          v27 = (*(uint64_t (**)(uint64_t))(v46 + 136))(v25);
          v54[0].n128_u64[0] = v26;
          v54[0].n128_u64[1] = v27;
          v28 = re::DynamicArray<re::RigNodeConstraint>::add((_anonymous_namespace_ *)&v49, v54);
        }
        while (((*(uint64_t (**)(uint64_t, __n128))(v46 + 120))(v25, v28) & 1) != 0);
      }
      (*(void (**)(uint64_t, uint64_t))(v46 + 144))(v25, v18);
      v29 = 126 - 2 * __clz(v51);
      if (v51)
        v30 = v29;
      else
        v30 = 0;
      std::__introsort<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithInteger<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,short>(re::Serializer<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<short const*,void *,true> const&,re::Pair<short const*,void *,true> const&)#1} &,re::Pair<short const*,void *,true>*,false>(v53, &v53[2 * v51], (uint64_t)v54, v30, 1);
      if (v51)
      {
        v31 = v53;
        v32 = &v53[2 * v51];
        do
        {
          v33 = **v31;
          if ((v33 & 0x80000000) != 0)
          {
            v54[0].n128_u8[0] = 45;
            v33 = -v33;
            v34 = (__n128 *)((char *)v54[0].n128_u64 + 1);
          }
          else
          {
            v34 = v54;
          }
          v35 = v31[1];
          if ((char *)v55 - (char *)v34 > 9
            || (v36 = (1233 * (32 - __clz(v33 | 1))) >> 12,
                v37 = (((__PAIR64__(v36, v33) - std::__itoa::__pow10_32[v36]) >> 32) + 1),
                v38 = v55,
                (char *)v55 - (char *)v34 >= v37))
          {
            v38 = std::__itoa::__base_10_u32[abi:nn180100](v34, v33);
          }
          *(_BYTE *)v38 = 0;
          v20(a1, v54, 0, v35, v48, v47, 0);
          v31 += 2;
        }
        while (v31 != v32);
      }
      v21 = (_anonymous_namespace_ *)(a1 + 24);
      if (v49)
      {
        if (v53)
          (*(void (**)(void))(*(_QWORD *)v49 + 40))();
      }
    }
    re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>::endObject(v21);
    return *(_BYTE *)(a1 + 64) == 0;
  }
  v39 = re::TypeInfo::name((re::TypeInfo *)v48);
  re::Serializer<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>::setError(a1, 0, "Failed to resolve serialize function for type \"%s\"", v40, v41, v42, v43, v44, v39[1]);
  return 0;
}

BOOL re::internal::serializeDictionaryWithDynamicString<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>(uint64_t a1, const char *a2, const re::TypeInfo *a3, uint64_t a4, re *a5, re *a6, int a7)
{
  _QWORD *v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  BOOL v19;
  uint64_t *v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  void (*v24)(uint64_t, uint64_t, _QWORD, uint64_t, _BYTE *, _BYTE *, _QWORD);
  _BOOL4 v25;
  _BOOL8 result;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  __n128 v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t *v34;
  uint64_t *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  __n128 v44;
  char v45[16];
  uint64_t v46;
  _BYTE v47[32];
  _BYTE v48[32];
  uint64_t v49;
  uint64_t v50;
  unint64_t v51;
  int v52;
  uint64_t *v53;

  if (a5 == a6)
    goto LABEL_14;
  v14 = *(_QWORD **)a5;
  if (*(_QWORD *)a5 == *(_QWORD *)a6)
  {
    v16 = **((_QWORD **)a5 + 2);
    v15 = (uint64_t *)*((_QWORD *)a6 + 2);
    v17 = *v15;
    if ((unsigned __int16)v16 != (unsigned __int16)*v15)
      goto LABEL_10;
    v19 = WORD1(v16) == WORD1(v17);
    v18 = (v17 ^ v16) & 0xFFFFFF00000000;
    v19 = v19 && v18 == 0;
    if (!v19)
      goto LABEL_10;
LABEL_14:
    if (!a7)
    {
      v22 = *(_QWORD *)(a1 + 56);
      re::TypeRegistry::typeInfo(*(_QWORD **)a5, *(_QWORD *)(*((_QWORD *)a5 + 2) + 80), &v49);
      re::TypeInfo::TypeInfo((uint64_t)v48, (uint64_t)&v50);
      re::TypeRegistry::typeInfo(*(_QWORD **)a6, *(_QWORD *)(*((_QWORD *)a6 + 2) + 80), &v49);
      re::TypeInfo::TypeInfo((uint64_t)v47, (uint64_t)&v50);
      re::TypeInfo::TypeInfo((uint64_t)v45, (uint64_t)a5);
      v23 = (*(uint64_t (**)(uint64_t, _BYTE *))(*(_QWORD *)a1 + 80))(a1, v48);
      if (!v23)
      {
        v38 = re::TypeInfo::name((re::TypeInfo *)v48);
        re::Serializer<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>::setError(a1, 0, "Failed to resolve serialize function for type \"%s\"", v39, v40, v41, v42, v43, v38[1]);
        return 0;
      }
      v24 = (void (*)(uint64_t, uint64_t, _QWORD, uint64_t, _BYTE *, _BYTE *, _QWORD))v23;
      v25 = re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>::beginObject(a1 + 24, a2, (uint64_t)a3, 0);
      result = 0;
      if (!v25)
        return result;
      v27 = (*(uint64_t (**)(uint64_t))(v46 + 88))(a4);
      if (v27)
      {
        v53 = 0;
        v50 = 0;
        v51 = 0;
        v52 = 0;
        v49 = v22;
        re::DynamicArray<re::RigNodeConstraint>::setCapacity(&v49, v27);
        ++v52;
        v28 = (*(uint64_t (**)(uint64_t, uint64_t))(v46 + 112))(a4, v22);
        if ((*(unsigned int (**)(void))(v46 + 120))())
        {
          do
          {
            v29 = (*(uint64_t (**)(uint64_t))(v46 + 128))(v28);
            v30 = (*(uint64_t (**)(uint64_t))(v46 + 136))(v28);
            v44.n128_u64[0] = v29;
            v44.n128_u64[1] = v30;
            v31 = re::DynamicArray<re::RigNodeConstraint>::add((_anonymous_namespace_ *)&v49, &v44);
          }
          while (((*(uint64_t (**)(uint64_t, __n128))(v46 + 120))(v28, v31) & 1) != 0);
        }
        (*(void (**)(uint64_t, uint64_t))(v46 + 144))(v28, v22);
        v32 = 126 - 2 * __clz(v51);
        if (v51)
          v33 = v32;
        else
          v33 = 0;
        std::__introsort<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithDynamicString<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>(re::Serializer<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<re::DynamicString const*,void *,true> const&,re::Pair<re::DynamicString const*,void *,true> const&)#1} &,re::Pair<re::DynamicString const*,void *,true>*,false>(v53, &v53[2 * v51], (uint64_t)&v44, v33, 1);
        if (v51)
        {
          v34 = v53;
          v35 = &v53[2 * v51];
          do
          {
            v36 = *v34;
            if ((*(_BYTE *)(*v34 + 8) & 1) != 0)
              v37 = *(_QWORD *)(v36 + 16);
            else
              v37 = v36 + 9;
            v24(a1, v37, 0, v34[1], v48, v47, 0);
            v34 += 2;
          }
          while (v34 != v35);
        }
        if (v49)
        {
          if (v53)
            (*(void (**)(void))(*(_QWORD *)v49 + 40))();
        }
      }
      re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>::endObject((_anonymous_namespace_ *)(a1 + 24));
    }
    return *(_BYTE *)(a1 + 64) == 0;
  }
  if (re::areSameTranslatedVersion(a5, a6, a3))
    goto LABEL_14;
  v14 = *(_QWORD **)a6;
  v15 = (uint64_t *)*((_QWORD *)a6 + 2);
LABEL_10:
  re::TypeRegistry::typeInfo(v14, v15[9], &v49);
  re::TypeInfo::TypeInfo((uint64_t)v48, (uint64_t)&v50);
  v20 = re::TypeInfo::name((re::TypeInfo *)v48);
  if ((unint64_t)*v20 >> 1 == 0x22C6ED80D0CLL)
  {
    v21 = (char *)v20[1];
    if (v21 == "StringID" || !strcmp(v21, "StringID"))
      goto LABEL_14;
  }
  re::internal::setTypeMismatchError<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>(a1, a2, a5, a6);
  return 0;
}

BOOL re::internal::serializeDictionaryWithStringID<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>(uint64_t a1, const char *a2, const re::TypeInfo *a3, uint64_t a4, re *a5, re *a6, int a7)
{
  _QWORD *v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  BOOL v19;
  uint64_t *v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  void (*v24)(uint64_t, _QWORD, _QWORD, unint64_t, _BYTE *, _BYTE *, _QWORD);
  _BOOL4 v25;
  _BOOL8 result;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  __n128 v31;
  unint64_t v32;
  uint64_t v33;
  __n128 *v34;
  __n128 *v35;
  unint64_t v36;
  unint64_t v37;
  uint64_t *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  __n128 v44;
  _BYTE v45[16];
  uint64_t v46;
  _BYTE v47[32];
  _BYTE v48[32];
  uint64_t v49;
  uint64_t v50;
  unint64_t v51;
  int v52;
  __n128 *v53;

  if (a5 == a6)
    goto LABEL_14;
  v14 = *(_QWORD **)a5;
  if (*(_QWORD *)a5 == *(_QWORD *)a6)
  {
    v16 = **((_QWORD **)a5 + 2);
    v15 = (uint64_t *)*((_QWORD *)a6 + 2);
    v17 = *v15;
    if ((unsigned __int16)v16 != (unsigned __int16)*v15)
      goto LABEL_10;
    v19 = WORD1(v16) == WORD1(v17);
    v18 = (v17 ^ v16) & 0xFFFFFF00000000;
    v19 = v19 && v18 == 0;
    if (!v19)
      goto LABEL_10;
LABEL_14:
    if (!a7)
    {
      v22 = *(_QWORD *)(a1 + 56);
      re::TypeRegistry::typeInfo(*(_QWORD **)a5, *(_QWORD *)(*((_QWORD *)a5 + 2) + 80), &v49);
      re::TypeInfo::TypeInfo((uint64_t)v48, (uint64_t)&v50);
      re::TypeRegistry::typeInfo(*(_QWORD **)a6, *(_QWORD *)(*((_QWORD *)a6 + 2) + 80), &v49);
      re::TypeInfo::TypeInfo((uint64_t)v47, (uint64_t)&v50);
      re::TypeInfo::TypeInfo((uint64_t)v45, (uint64_t)a5);
      v23 = (*(uint64_t (**)(uint64_t, _BYTE *))(*(_QWORD *)a1 + 80))(a1, v48);
      if (!v23)
      {
        v38 = re::TypeInfo::name((re::TypeInfo *)v48);
        re::Serializer<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>::setError(a1, 0, "Failed to resolve serialize function for type \"%s\"", v39, v40, v41, v42, v43, v38[1]);
        return 0;
      }
      v24 = (void (*)(uint64_t, _QWORD, _QWORD, unint64_t, _BYTE *, _BYTE *, _QWORD))v23;
      v25 = re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>::beginObject(a1 + 24, a2, (uint64_t)a3, 0);
      result = 0;
      if (!v25)
        return result;
      v27 = (*(uint64_t (**)(uint64_t))(v46 + 88))(a4);
      if (v27)
      {
        v53 = 0;
        v50 = 0;
        v51 = 0;
        v52 = 0;
        v49 = v22;
        re::DynamicArray<re::RigNodeConstraint>::setCapacity(&v49, v27);
        ++v52;
        v28 = (*(uint64_t (**)(uint64_t, uint64_t))(v46 + 112))(a4, v22);
        if ((*(unsigned int (**)(void))(v46 + 120))())
        {
          do
          {
            v29 = (*(uint64_t (**)(uint64_t))(v46 + 128))(v28);
            v30 = (*(uint64_t (**)(uint64_t))(v46 + 136))(v28);
            v44.n128_u64[0] = v29;
            v44.n128_u64[1] = v30;
            v31 = re::DynamicArray<re::RigNodeConstraint>::add((_anonymous_namespace_ *)&v49, &v44);
          }
          while (((*(uint64_t (**)(uint64_t, __n128))(v46 + 120))(v28, v31) & 1) != 0);
        }
        (*(void (**)(uint64_t, uint64_t))(v46 + 144))(v28, v22);
        v32 = 126 - 2 * __clz(v51);
        if (v51)
          v33 = v32;
        else
          v33 = 0;
        std::__introsort<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithStringID<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>(re::Serializer<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<re::StringID const*,void *,true> const&,re::Pair<re::StringID const*,void *,true> const&)#1} &,re::Pair<re::StringID const*,void *,true>*,false>(v53, &v53[v51], (uint64_t)&v44, v33, 1);
        if (v51)
        {
          v34 = v53;
          v35 = &v53[v51];
          do
          {
            v37 = v34->n128_u64[0];
            v36 = v34->n128_u64[1];
            ++v34;
            v24(a1, *(_QWORD *)(v37 + 8), 0, v36, v48, v47, 0);
          }
          while (v34 != v35);
        }
        if (v49)
        {
          if (v53)
            (*(void (**)(void))(*(_QWORD *)v49 + 40))();
        }
      }
      re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>::endObject((_anonymous_namespace_ *)(a1 + 24));
    }
    return *(_BYTE *)(a1 + 64) == 0;
  }
  if (re::areSameTranslatedVersion(a5, a6, a3))
    goto LABEL_14;
  v14 = *(_QWORD **)a6;
  v15 = (uint64_t *)*((_QWORD *)a6 + 2);
LABEL_10:
  re::TypeRegistry::typeInfo(v14, v15[9], &v49);
  re::TypeInfo::TypeInfo((uint64_t)v48, (uint64_t)&v50);
  v20 = re::TypeInfo::name((re::TypeInfo *)v48);
  if ((unint64_t)*v20 >> 1 == 0x134375A94D9F7110)
  {
    v21 = (char *)v20[1];
    if (v21 == "DynamicString" || !strcmp(v21, "DynamicString"))
      goto LABEL_14;
  }
  re::internal::setTypeMismatchError<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>(a1, a2, a5, a6);
  return 0;
}

BOOL re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>::beginDictionary(uint64_t a1, const char *a2, uint64_t a3, uint64_t *a4, int a5)
{
  int v5;
  uint64_t v9;
  __int128 v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  const char *v16;

  v16 = a2;
  v5 = *(unsigned __int8 *)(a1 + 40);
  if (!*(_BYTE *)(a1 + 40))
  {
    if ((*(_BYTE *)(*(_QWORD *)(a1 + 128) + 48 * *(_QWORD *)(a1 + 112) - 44) & 0x20) != 0)
      rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>::Key(*(char **)(a1 + 168), &v16);
    rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>::StartArray(*(_QWORD *)(a1 + 168));
    v9 = *a4;
    LOBYTE(v11) = 6;
    DWORD1(v11) = a5 & 0xFFFFFFDF;
    *((_QWORD *)&v11 + 1) = v16;
    v12 = 0;
    v14 = 0;
    v15 = 0;
    v13 = v9;
    re::Encoder<re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>,re::DynamicArrayBufferedOutputStream>::pushState((_QWORD *)a1, &v11);
  }
  return v5 == 0;
}

void std::sort[abi:nn180100]<re::Pair<void const*,void *,true> *,BOOL re::serializeDictionary<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>(re::Serializer<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<void const*,void *,true> const&,re::Pair<void const*,void *,true> const&)#1}>(uint64_t *a1, uint64_t *a2, uint64_t (*a3)(uint64_t, uint64_t), __n128 a4)
{
  unint64_t v4;
  uint64_t v5;
  uint64_t (*v6)(uint64_t, uint64_t);

  v4 = 126 - 2 * __clz(((char *)a2 - (char *)a1) >> 4);
  v6 = a3;
  if (a2 == a1)
    v5 = 0;
  else
    v5 = v4;
  std::__introsort<std::_ClassicAlgPolicy,BOOL re::serializeDictionary<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>(re::Serializer<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<void const*,void *,true> const&,re::Pair<void const*,void *,true> const&)#1} &,re::Pair<void const*,void *,true>*,false>(a1, a2, &v6, v5, 1, a4);
}

void std::__introsort<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithInteger<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,unsigned long long>(re::Serializer<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<unsigned long long const*,void *,true> const&,re::Pair<unsigned long long const*,void *,true> const&)#1} &,re::Pair<unsigned long long const*,void *,true>*,false>(unint64_t **a1, unint64_t **a2, uint64_t a3, uint64_t a4, char a5)
{
  unint64_t **v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t **v15;
  unint64_t **v16;
  char v17;
  BOOL v18;
  __int128 *v19;
  unint64_t *v20;
  __int128 v21;
  __int128 v22;

_QWORD *std::__insertion_sort[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithInteger<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,unsigned long long>(re::Serializer<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<unsigned long long const*,void *,true> const&,re::Pair<unsigned long long const*,void *,true> const&)#1} &,re::Pair<unsigned long long const*,void *,true>*>(_QWORD *result, _QWORD *a2)
{
  _QWORD *v2;
  uint64_t v3;
  _QWORD *v4;
  _QWORD *v5;
  unint64_t *v6;
  unint64_t *v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t **v10;

  if (result != a2)
  {
    v2 = result + 2;
    if (result + 2 != a2)
    {
      v3 = 0;
      v4 = result;
      do
      {
        v5 = v2;
        v6 = (unint64_t *)v4[2];
        if (*v6 < *(_QWORD *)*v4)
        {
          v7 = (unint64_t *)v4[3];
          v8 = v3;
          while (1)
          {
            *(_OWORD *)((char *)result + v8 + 16) = *(_OWORD *)((char *)result + v8);
            if (!v8)
              break;
            v9 = **(_QWORD **)((char *)result + v8 - 16);
            v8 -= 16;
            if (*v6 >= v9)
            {
              v10 = (unint64_t **)((char *)result + v8 + 16);
              goto LABEL_10;
            }
          }
          v10 = (unint64_t **)result;
LABEL_10:
          *v10 = v6;
          v10[1] = v7;
        }
        v2 = v5 + 2;
        v3 += 16;
        v4 = v5;
      }
      while (v5 + 2 != a2);
    }
  }
  return result;
}

uint64_t std::__insertion_sort_unguarded[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithInteger<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,unsigned long long>(re::Serializer<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<unsigned long long const*,void *,true> const&,re::Pair<unsigned long long const*,void *,true> const&)#1} &,re::Pair<unsigned long long const*,void *,true>*>(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;

  if (result != a2)
  {
    v2 = result + 16;
    while (v2 != a2)
    {
      v3 = v2;
      v4 = *(_QWORD **)(result + 16);
      if (*v4 < **(_QWORD **)result)
      {
        v5 = *(_QWORD *)(result + 24);
        v6 = v3;
        do
        {
          *(_OWORD *)v6 = *(_OWORD *)(v6 - 16);
          v7 = *(_QWORD **)(v6 - 32);
          v6 -= 16;
        }
        while (*v4 < *v7);
        *(_QWORD *)v6 = v4;
        *(_QWORD *)(v6 + 8) = v5;
      }
      v2 = v3 + 16;
      result = v3;
    }
  }
  return result;
}

uint64_t std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithInteger<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,unsigned long long>(re::Serializer<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<unsigned long long const*,void *,true> const&,re::Pair<unsigned long long const*,void *,true> const&)#1} &,re::Pair<unsigned long long const*,void *,true>*>(__int128 *a1, unint64_t **a2, unint64_t **a3)
{
  unint64_t v3;
  unint64_t v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;

  v3 = **a2;
  v4 = **a3;
  if (v3 < **(_QWORD **)a1)
  {
    if (v4 < v3)
    {
      v5 = *a1;
      *a1 = *(_OWORD *)a3;
      *(_OWORD *)a3 = v5;
      return 1;
    }
    v8 = *a1;
    *a1 = *(_OWORD *)a2;
    *(_OWORD *)a2 = v8;
    if (**a3 >= **a2)
      return 1;
    v9 = *(_OWORD *)a2;
    *(_OWORD *)a2 = *(_OWORD *)a3;
    *(_OWORD *)a3 = v9;
    return 2;
  }
  if (v4 < v3)
  {
    v6 = *(_OWORD *)a2;
    *(_OWORD *)a2 = *(_OWORD *)a3;
    *(_OWORD *)a3 = v6;
    if (**a2 >= **(_QWORD **)a1)
      return 1;
    v7 = *a1;
    *a1 = *(_OWORD *)a2;
    *(_OWORD *)a2 = v7;
    return 2;
  }
  return 0;
}

unint64_t **std::__partition_with_equals_on_left[abi:nn180100]<std::_ClassicAlgPolicy,re::Pair<unsigned long long const*,void *,true> *,BOOL re::internal::serializeDictionaryWithInteger<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,unsigned long long>(re::Serializer<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<unsigned long long const*,void *,true> const&,re::Pair<unsigned long long const*,void *,true> const&)#1} &>(unint64_t **a1, unint64_t **a2)
{
  __int128 v2;
  unint64_t *v3;
  unint64_t v4;
  unint64_t **v5;
  unint64_t *v6;
  unint64_t **v7;
  unint64_t *v8;
  unint64_t v9;
  unint64_t *v10;
  unint64_t *v11;
  __int128 v13;

  v2 = *(_OWORD *)a1;
  v3 = *a1;
  v4 = **a1;
  if (v4 >= **(a2 - 2))
  {
    v7 = a1 + 2;
    do
    {
      v5 = v7;
      if (v7 >= a2)
        break;
      v7 += 2;
    }
    while (v4 >= **v5);
  }
  else
  {
    v5 = a1;
    do
    {
      v6 = v5[2];
      v5 += 2;
    }
    while (v4 >= *v6);
  }
  if (v5 < a2)
  {
    do
    {
      v8 = *(a2 - 2);
      a2 -= 2;
    }
    while (v4 < *v8);
  }
  while (v5 < a2)
  {
    v13 = *(_OWORD *)v5;
    *(_OWORD *)v5 = *(_OWORD *)a2;
    *(_OWORD *)a2 = v13;
    v9 = *v3;
    do
    {
      v10 = v5[2];
      v5 += 2;
    }
    while (v9 >= *v10);
    do
    {
      v11 = *(a2 - 2);
      a2 -= 2;
    }
    while (v9 < *v11);
  }
  if (v5 - 2 != a1)
    *(_OWORD *)a1 = *((_OWORD *)v5 - 1);
  *((_OWORD *)v5 - 1) = v2;
  return v5;
}

unint64_t **std::__partition_with_equals_on_right[abi:nn180100]<std::_ClassicAlgPolicy,re::Pair<unsigned long long const*,void *,true> *,BOOL re::internal::serializeDictionaryWithInteger<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,unsigned long long>(re::Serializer<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<unsigned long long const*,void *,true> const&,re::Pair<unsigned long long const*,void *,true> const&)#1} &>(unint64_t **a1, unint64_t **a2)
{
  uint64_t v2;
  __int128 v3;
  unint64_t *v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t **v7;
  unint64_t **v8;
  unint64_t *v9;
  unint64_t *v10;
  unint64_t **v11;
  unint64_t **v12;
  __int128 v13;
  unint64_t v14;
  unint64_t *v15;
  unint64_t *v16;

  v2 = 0;
  v3 = *(_OWORD *)a1;
  v4 = *a1;
  v5 = **a1;
  do
  {
    v6 = *a1[v2 + 2];
    v2 += 2;
  }
  while (v6 < v5);
  v7 = &a1[v2];
  v8 = &a1[v2 - 2];
  if (v2 == 2)
  {
    do
    {
      if (v7 >= a2)
        break;
      v10 = *(a2 - 2);
      a2 -= 2;
    }
    while (*v10 >= v5);
  }
  else
  {
    do
    {
      v9 = *(a2 - 2);
      a2 -= 2;
    }
    while (*v9 >= v5);
  }
  if (v7 < a2)
  {
    v11 = &a1[v2];
    v12 = a2;
    do
    {
      v13 = *(_OWORD *)v11;
      *(_OWORD *)v11 = *(_OWORD *)v12;
      *(_OWORD *)v12 = v13;
      v14 = *v4;
      do
      {
        v15 = v11[2];
        v11 += 2;
      }
      while (*v15 < v14);
      do
      {
        v16 = *(v12 - 2);
        v12 -= 2;
      }
      while (*v16 >= v14);
    }
    while (v11 < v12);
    v8 = v11 - 2;
  }
  if (v8 != a1)
    *(_OWORD *)a1 = *(_OWORD *)v8;
  *(_OWORD *)v8 = v3;
  return v8;
}

BOOL std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithInteger<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,unsigned long long>(re::Serializer<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<unsigned long long const*,void *,true> const&,re::Pair<unsigned long long const*,void *,true> const&)#1} &,re::Pair<unsigned long long const*,void *,true>*>(uint64_t a1, unint64_t **a2)
{
  uint64_t v4;
  _BOOL8 result;
  __int128 *v6;
  __int128 v7;
  unint64_t **v8;
  unint64_t **v9;
  uint64_t v10;
  int v11;
  unint64_t *v12;
  unint64_t *v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t **v16;

  v4 = ((uint64_t)a2 - a1) >> 4;
  result = 1;
  switch(v4)
  {
    case 0:
    case 1:
      return result;
    case 2:
      v6 = (__int128 *)(a2 - 2);
      if (**(a2 - 2) < **(_QWORD **)a1)
      {
        v7 = *(_OWORD *)a1;
        *(_OWORD *)a1 = *v6;
        *v6 = v7;
      }
      return result;
    case 3:
      std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithInteger<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,unsigned long long>(re::Serializer<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<unsigned long long const*,void *,true> const&,re::Pair<unsigned long long const*,void *,true> const&)#1} &,re::Pair<unsigned long long const*,void *,true>*>((__int128 *)a1, (unint64_t **)(a1 + 16), a2 - 2);
      return 1;
    case 4:
      std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithInteger<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,unsigned long long>(re::Serializer<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<unsigned long long const*,void *,true> const&,re::Pair<unsigned long long const*,void *,true> const&)#1} &,re::Pair<unsigned long long const*,void *,true>*>((__int128 *)a1, (unint64_t **)(a1 + 16), (unint64_t **)(a1 + 32), (_OWORD *)a2 - 1);
      return 1;
    case 5:
      std::__sort5[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithInteger<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,unsigned long long>(re::Serializer<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<unsigned long long const*,void *,true> const&,re::Pair<unsigned long long const*,void *,true> const&)#1} &,re::Pair<unsigned long long const*,void *,true>*>((__int128 *)a1, (unint64_t **)(a1 + 16), (unint64_t **)(a1 + 32), (__n128 *)(a1 + 48), (__n128 *)a2 - 1);
      return 1;
    default:
      v8 = (unint64_t **)(a1 + 32);
      std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithInteger<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,unsigned long long>(re::Serializer<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<unsigned long long const*,void *,true> const&,re::Pair<unsigned long long const*,void *,true> const&)#1} &,re::Pair<unsigned long long const*,void *,true>*>((__int128 *)a1, (unint64_t **)(a1 + 16), (unint64_t **)(a1 + 32));
      v9 = (unint64_t **)(a1 + 48);
      if ((unint64_t **)(a1 + 48) == a2)
        return 1;
      v10 = 0;
      v11 = 0;
      break;
  }
  while (1)
  {
    v12 = *v9;
    if (**v9 < **v8)
    {
      v13 = v9[1];
      v14 = v10;
      while (1)
      {
        *(_OWORD *)(a1 + v14 + 48) = *(_OWORD *)(a1 + v14 + 32);
        if (v14 == -32)
          break;
        v15 = **(_QWORD **)(a1 + v14 + 16);
        v14 -= 16;
        if (*v12 >= v15)
        {
          v16 = (unint64_t **)(a1 + v14 + 48);
          goto LABEL_12;
        }
      }
      v16 = (unint64_t **)a1;
LABEL_12:
      *v16 = v12;
      v16[1] = v13;
      if (++v11 == 8)
        return v9 + 2 == a2;
    }
    v8 = v9;
    v10 += 16;
    v9 += 2;
    if (v9 == a2)
      return 1;
  }
}

__n128 std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithInteger<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,unsigned long long>(re::Serializer<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<unsigned long long const*,void *,true> const&,re::Pair<unsigned long long const*,void *,true> const&)#1} &,re::Pair<unsigned long long const*,void *,true>*>(__int128 *a1, unint64_t **a2, unint64_t **a3, _OWORD *a4)
{
  __n128 result;

  std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithInteger<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,unsigned long long>(re::Serializer<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<unsigned long long const*,void *,true> const&,re::Pair<unsigned long long const*,void *,true> const&)#1} &,re::Pair<unsigned long long const*,void *,true>*>(a1, a2, a3);
  if (**(_QWORD **)a4 < **a3)
  {
    result = *(__n128 *)a3;
    *(_OWORD *)a3 = *a4;
    *a4 = result;
    if (**a3 < **a2)
    {
      result = *(__n128 *)a2;
      *(_OWORD *)a2 = *(_OWORD *)a3;
      *(__n128 *)a3 = result;
      if (**a2 < **(_QWORD **)a1)
      {
        result = (__n128)*a1;
        *a1 = *(_OWORD *)a2;
        *(__n128 *)a2 = result;
      }
    }
  }
  return result;
}

__n128 std::__sort5[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithInteger<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,unsigned long long>(re::Serializer<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<unsigned long long const*,void *,true> const&,re::Pair<unsigned long long const*,void *,true> const&)#1} &,re::Pair<unsigned long long const*,void *,true>*>(__int128 *a1, unint64_t **a2, unint64_t **a3, __n128 *a4, __n128 *a5)
{
  __n128 result;

  result.n128_u64[0] = std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithInteger<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,unsigned long long>(re::Serializer<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<unsigned long long const*,void *,true> const&,re::Pair<unsigned long long const*,void *,true> const&)#1} &,re::Pair<unsigned long long const*,void *,true>*>(a1, a2, a3, a4).n128_u64[0];
  if (*(_QWORD *)a5->n128_u64[0] < *(_QWORD *)a4->n128_u64[0])
  {
    result = *a4;
    *a4 = *a5;
    *a5 = result;
    if (*(_QWORD *)a4->n128_u64[0] < **a3)
    {
      result = *(__n128 *)a3;
      *(__n128 *)a3 = *a4;
      *a4 = result;
      if (**a3 < **a2)
      {
        result = *(__n128 *)a2;
        *(_OWORD *)a2 = *(_OWORD *)a3;
        *(__n128 *)a3 = result;
        if (**a2 < **(_QWORD **)a1)
        {
          result = (__n128)*a1;
          *a1 = *(_OWORD *)a2;
          *(__n128 *)a2 = result;
        }
      }
    }
  }
  return result;
}

unint64_t **std::__partial_sort_impl[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithInteger<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,unsigned long long>(re::Serializer<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<unsigned long long const*,void *,true> const&,re::Pair<unsigned long long const*,void *,true> const&)#1} &,re::Pair<unsigned long long const*,void *,true>*,re::Pair<unsigned long long const*,void *,true>*>(unint64_t **a1, unint64_t **a2, unint64_t **a3, uint64_t a4)
{
  unint64_t **v6;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t **v12;
  unint64_t **v13;
  unint64_t **v14;
  __int128 v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t **v18;
  unint64_t **v19;
  uint64_t v20;
  uint64_t v21;
  __int128 v24;

  if (a1 != a2)
  {
    v6 = a2;
    v8 = (char *)a2 - (char *)a1;
    v9 = ((char *)a2 - (char *)a1) >> 4;
    if ((char *)a2 - (char *)a1 >= 17)
    {
      v10 = (unint64_t)(v9 - 2) >> 1;
      v11 = v10 + 1;
      v12 = &a1[2 * v10];
      do
      {
        std::__sift_down[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithInteger<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,unsigned long long>(re::Serializer<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<unsigned long long const*,void *,true> const&,re::Pair<unsigned long long const*,void *,true> const&)#1} &,re::Pair<unsigned long long const*,void *,true>*>((uint64_t)a1, a4, v9, v12);
        v12 -= 2;
        --v11;
      }
      while (v11);
    }
    v13 = v6;
    if (v6 != a3)
    {
      v14 = v6;
      do
      {
        if (**v14 < **a1)
        {
          v15 = *(_OWORD *)v14;
          *(_OWORD *)v14 = *(_OWORD *)a1;
          *(_OWORD *)a1 = v15;
          std::__sift_down[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithInteger<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,unsigned long long>(re::Serializer<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<unsigned long long const*,void *,true> const&,re::Pair<unsigned long long const*,void *,true> const&)#1} &,re::Pair<unsigned long long const*,void *,true>*>((uint64_t)a1, a4, v9, a1);
        }
        v14 += 2;
      }
      while (v14 != a3);
      v13 = a3;
    }
    if (v8 >= 17)
    {
      v16 = (unint64_t)v8 >> 4;
      do
      {
        v17 = 0;
        v24 = *(_OWORD *)a1;
        v18 = a1;
        do
        {
          v19 = &v18[2 * v17 + 2];
          v20 = (2 * v17) | 1;
          v21 = 2 * v17 + 2;
          if (v21 < v16 && **v19 < *v19[2])
          {
            v19 += 2;
            v20 = v21;
          }
          *(_OWORD *)v18 = *(_OWORD *)v19;
          v18 = v19;
          v17 = v20;
        }
        while (v20 <= (uint64_t)((unint64_t)(v16 - 2) >> 1));
        v6 -= 2;
        if (v19 == v6)
        {
          *(_OWORD *)v19 = v24;
        }
        else
        {
          *(_OWORD *)v19 = *(_OWORD *)v6;
          *(_OWORD *)v6 = v24;
          std::__sift_up[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithInteger<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,unsigned long long>(re::Serializer<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<unsigned long long const*,void *,true> const&,re::Pair<unsigned long long const*,void *,true> const&)#1} &,re::Pair<unsigned long long const*,void *,true>*>((uint64_t)a1, (uint64_t)(v19 + 2), a4, ((char *)(v19 + 2) - (char *)a1) >> 4);
        }
      }
      while (v16-- > 2);
    }
    return v13;
  }
  return a3;
}

uint64_t std::__sift_down[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithInteger<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,unsigned long long>(re::Serializer<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<unsigned long long const*,void *,true> const&,re::Pair<unsigned long long const*,void *,true> const&)#1} &,re::Pair<unsigned long long const*,void *,true>*>(uint64_t result, uint64_t a2, uint64_t a3, unint64_t **a4)
{
  uint64_t v4;
  int64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t **v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  BOOL v12;
  unint64_t *v13;
  unint64_t *v14;
  unint64_t **v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  BOOL v19;

  if (a3 >= 2)
  {
    v4 = (uint64_t)a4 - result;
    v5 = (unint64_t)(a3 - 2) >> 1;
    if (v5 >= ((uint64_t)a4 - result) >> 4)
    {
      v6 = v4 >> 3;
      v7 = (v4 >> 3) + 1;
      v8 = (unint64_t **)(result + 16 * v7);
      v9 = v6 + 2;
      if (v9 >= a3)
      {
        v10 = **v8;
      }
      else
      {
        v10 = **v8;
        v11 = *v8[2];
        v12 = v10 >= v11;
        if (v10 <= v11)
          v10 = *v8[2];
        if (!v12)
        {
          v8 += 2;
          v7 = v9;
        }
      }
      v13 = *a4;
      if (v10 >= **a4)
      {
        v14 = a4[1];
        do
        {
          v15 = a4;
          a4 = v8;
          *(_OWORD *)v15 = *(_OWORD *)v8;
          if (v5 < v7)
            break;
          v16 = (2 * v7) | 1;
          v8 = (unint64_t **)(result + 16 * v16);
          v7 = 2 * v7 + 2;
          if (v7 >= a3)
          {
            v17 = **v8;
            v7 = v16;
          }
          else
          {
            v17 = **v8;
            v18 = *v8[2];
            v19 = v17 >= v18;
            if (v17 <= v18)
              v17 = *v8[2];
            if (v19)
              v7 = v16;
            else
              v8 += 2;
          }
        }
        while (v17 >= *v13);
        *a4 = v13;
        a4[1] = v14;
      }
    }
  }
  return result;
}

uint64_t std::__sift_up[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithInteger<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,unsigned long long>(re::Serializer<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<unsigned long long const*,void *,true> const&,re::Pair<unsigned long long const*,void *,true> const&)#1} &,re::Pair<unsigned long long const*,void *,true>*>(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unint64_t v4;
  unint64_t v5;
  _OWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  uint64_t v9;
  _OWORD *v10;

  v4 = a4 - 2;
  if (a4 >= 2)
  {
    v5 = v4 >> 1;
    v6 = (_OWORD *)(result + 16 * (v4 >> 1));
    v7 = (_QWORD *)(a2 - 16);
    v8 = *(_QWORD **)(a2 - 16);
    if (**(_QWORD **)v6 < *v8)
    {
      v9 = *(_QWORD *)(a2 - 8);
      do
      {
        v10 = v7;
        v7 = v6;
        *v10 = *v6;
        if (!v5)
          break;
        v5 = (v5 - 1) >> 1;
        v6 = (_OWORD *)(result + 16 * v5);
      }
      while (**(_QWORD **)v6 < *v8);
      *v7 = v8;
      v7[1] = v9;
    }
  }
  return result;
}

void std::__introsort<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithInteger<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,unsigned int>(re::Serializer<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<unsigned int const*,void *,true> const&,re::Pair<unsigned int const*,void *,true> const&)#1} &,re::Pair<unsigned int const*,void *,true>*,false>(unsigned int **a1, unsigned int **a2, uint64_t a3, uint64_t a4, char a5)
{
  unsigned int **v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unsigned int **v15;
  unsigned int **v16;
  char v17;
  BOOL v18;
  __int128 *v19;
  unsigned int *v20;
  __int128 v21;
  __int128 v22;

_QWORD *std::__insertion_sort[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithInteger<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,unsigned int>(re::Serializer<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<unsigned int const*,void *,true> const&,re::Pair<unsigned int const*,void *,true> const&)#1} &,re::Pair<unsigned int const*,void *,true>*>(_QWORD *result, _QWORD *a2)
{
  _QWORD *v2;
  uint64_t v3;
  _QWORD *v4;
  _QWORD *v5;
  unsigned int *v6;
  unsigned int *v7;
  uint64_t v8;
  unsigned int v9;
  unsigned int **v10;

  if (result != a2)
  {
    v2 = result + 2;
    if (result + 2 != a2)
    {
      v3 = 0;
      v4 = result;
      do
      {
        v5 = v2;
        v6 = (unsigned int *)v4[2];
        if (*v6 < *(_DWORD *)*v4)
        {
          v7 = (unsigned int *)v4[3];
          v8 = v3;
          while (1)
          {
            *(_OWORD *)((char *)result + v8 + 16) = *(_OWORD *)((char *)result + v8);
            if (!v8)
              break;
            v9 = **(_DWORD **)((char *)result + v8 - 16);
            v8 -= 16;
            if (*v6 >= v9)
            {
              v10 = (unsigned int **)((char *)result + v8 + 16);
              goto LABEL_10;
            }
          }
          v10 = (unsigned int **)result;
LABEL_10:
          *v10 = v6;
          v10[1] = v7;
        }
        v2 = v5 + 2;
        v3 += 16;
        v4 = v5;
      }
      while (v5 + 2 != a2);
    }
  }
  return result;
}

uint64_t std::__insertion_sort_unguarded[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithInteger<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,unsigned int>(re::Serializer<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<unsigned int const*,void *,true> const&,re::Pair<unsigned int const*,void *,true> const&)#1} &,re::Pair<unsigned int const*,void *,true>*>(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  _DWORD *v4;
  uint64_t v5;
  uint64_t v6;
  _DWORD *v7;

  if (result != a2)
  {
    v2 = result + 16;
    while (v2 != a2)
    {
      v3 = v2;
      v4 = *(_DWORD **)(result + 16);
      if (*v4 < **(_DWORD **)result)
      {
        v5 = *(_QWORD *)(result + 24);
        v6 = v3;
        do
        {
          *(_OWORD *)v6 = *(_OWORD *)(v6 - 16);
          v7 = *(_DWORD **)(v6 - 32);
          v6 -= 16;
        }
        while (*v4 < *v7);
        *(_QWORD *)v6 = v4;
        *(_QWORD *)(v6 + 8) = v5;
      }
      v2 = v3 + 16;
      result = v3;
    }
  }
  return result;
}

uint64_t std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithInteger<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,unsigned int>(re::Serializer<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<unsigned int const*,void *,true> const&,re::Pair<unsigned int const*,void *,true> const&)#1} &,re::Pair<unsigned int const*,void *,true>*>(__int128 *a1, unsigned int **a2, unsigned int **a3)
{
  unsigned int v3;
  unsigned int v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;

  v3 = **a2;
  v4 = **a3;
  if (v3 < **(_DWORD **)a1)
  {
    if (v4 < v3)
    {
      v5 = *a1;
      *a1 = *(_OWORD *)a3;
      *(_OWORD *)a3 = v5;
      return 1;
    }
    v8 = *a1;
    *a1 = *(_OWORD *)a2;
    *(_OWORD *)a2 = v8;
    if (**a3 >= **a2)
      return 1;
    v9 = *(_OWORD *)a2;
    *(_OWORD *)a2 = *(_OWORD *)a3;
    *(_OWORD *)a3 = v9;
    return 2;
  }
  if (v4 < v3)
  {
    v6 = *(_OWORD *)a2;
    *(_OWORD *)a2 = *(_OWORD *)a3;
    *(_OWORD *)a3 = v6;
    if (**a2 >= **(_DWORD **)a1)
      return 1;
    v7 = *a1;
    *a1 = *(_OWORD *)a2;
    *(_OWORD *)a2 = v7;
    return 2;
  }
  return 0;
}

unsigned int **std::__partition_with_equals_on_left[abi:nn180100]<std::_ClassicAlgPolicy,re::Pair<unsigned int const*,void *,true> *,BOOL re::internal::serializeDictionaryWithInteger<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,unsigned int>(re::Serializer<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<unsigned int const*,void *,true> const&,re::Pair<unsigned int const*,void *,true> const&)#1} &>(unsigned int **a1, unsigned int **a2)
{
  __int128 v2;
  unsigned int *v3;
  unsigned int v4;
  unsigned int **v5;
  unsigned int *v6;
  unsigned int **v7;
  unsigned int *v8;
  unsigned int v9;
  unsigned int *v10;
  unsigned int *v11;
  __int128 v13;

  v2 = *(_OWORD *)a1;
  v3 = *a1;
  v4 = **a1;
  if (v4 >= **(a2 - 2))
  {
    v7 = a1 + 2;
    do
    {
      v5 = v7;
      if (v7 >= a2)
        break;
      v7 += 2;
    }
    while (v4 >= **v5);
  }
  else
  {
    v5 = a1;
    do
    {
      v6 = v5[2];
      v5 += 2;
    }
    while (v4 >= *v6);
  }
  if (v5 < a2)
  {
    do
    {
      v8 = *(a2 - 2);
      a2 -= 2;
    }
    while (v4 < *v8);
  }
  while (v5 < a2)
  {
    v13 = *(_OWORD *)v5;
    *(_OWORD *)v5 = *(_OWORD *)a2;
    *(_OWORD *)a2 = v13;
    v9 = *v3;
    do
    {
      v10 = v5[2];
      v5 += 2;
    }
    while (v9 >= *v10);
    do
    {
      v11 = *(a2 - 2);
      a2 -= 2;
    }
    while (v9 < *v11);
  }
  if (v5 - 2 != a1)
    *(_OWORD *)a1 = *((_OWORD *)v5 - 1);
  *((_OWORD *)v5 - 1) = v2;
  return v5;
}

unsigned int **std::__partition_with_equals_on_right[abi:nn180100]<std::_ClassicAlgPolicy,re::Pair<unsigned int const*,void *,true> *,BOOL re::internal::serializeDictionaryWithInteger<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,unsigned int>(re::Serializer<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<unsigned int const*,void *,true> const&,re::Pair<unsigned int const*,void *,true> const&)#1} &>(unsigned int **a1, unsigned int **a2)
{
  uint64_t v2;
  __int128 v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;
  unsigned int **v7;
  unsigned int **v8;
  unsigned int *v9;
  unsigned int *v10;
  unsigned int **v11;
  unsigned int **v12;
  __int128 v13;
  unsigned int v14;
  unsigned int *v15;
  unsigned int *v16;

  v2 = 0;
  v3 = *(_OWORD *)a1;
  v4 = *a1;
  v5 = **a1;
  do
  {
    v6 = *a1[v2 + 2];
    v2 += 2;
  }
  while (v6 < v5);
  v7 = &a1[v2];
  v8 = &a1[v2 - 2];
  if (v2 == 2)
  {
    do
    {
      if (v7 >= a2)
        break;
      v10 = *(a2 - 2);
      a2 -= 2;
    }
    while (*v10 >= v5);
  }
  else
  {
    do
    {
      v9 = *(a2 - 2);
      a2 -= 2;
    }
    while (*v9 >= v5);
  }
  if (v7 < a2)
  {
    v11 = &a1[v2];
    v12 = a2;
    do
    {
      v13 = *(_OWORD *)v11;
      *(_OWORD *)v11 = *(_OWORD *)v12;
      *(_OWORD *)v12 = v13;
      v14 = *v4;
      do
      {
        v15 = v11[2];
        v11 += 2;
      }
      while (*v15 < v14);
      do
      {
        v16 = *(v12 - 2);
        v12 -= 2;
      }
      while (*v16 >= v14);
    }
    while (v11 < v12);
    v8 = v11 - 2;
  }
  if (v8 != a1)
    *(_OWORD *)a1 = *(_OWORD *)v8;
  *(_OWORD *)v8 = v3;
  return v8;
}

BOOL std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithInteger<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,unsigned int>(re::Serializer<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<unsigned int const*,void *,true> const&,re::Pair<unsigned int const*,void *,true> const&)#1} &,re::Pair<unsigned int const*,void *,true>*>(uint64_t a1, unsigned int **a2)
{
  uint64_t v4;
  _BOOL8 result;
  __int128 *v6;
  __int128 v7;
  unsigned int **v8;
  unsigned int **v9;
  uint64_t v10;
  int v11;
  unsigned int *v12;
  unsigned int *v13;
  uint64_t v14;
  unsigned int v15;
  unsigned int **v16;

  v4 = ((uint64_t)a2 - a1) >> 4;
  result = 1;
  switch(v4)
  {
    case 0:
    case 1:
      return result;
    case 2:
      v6 = (__int128 *)(a2 - 2);
      if (**(a2 - 2) < **(_DWORD **)a1)
      {
        v7 = *(_OWORD *)a1;
        *(_OWORD *)a1 = *v6;
        *v6 = v7;
      }
      return result;
    case 3:
      std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithInteger<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,unsigned int>(re::Serializer<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<unsigned int const*,void *,true> const&,re::Pair<unsigned int const*,void *,true> const&)#1} &,re::Pair<unsigned int const*,void *,true>*>((__int128 *)a1, (unsigned int **)(a1 + 16), a2 - 2);
      return 1;
    case 4:
      std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithInteger<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,unsigned int>(re::Serializer<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<unsigned int const*,void *,true> const&,re::Pair<unsigned int const*,void *,true> const&)#1} &,re::Pair<unsigned int const*,void *,true>*>((__int128 *)a1, (unsigned int **)(a1 + 16), (unsigned int **)(a1 + 32), (_OWORD *)a2 - 1);
      return 1;
    case 5:
      std::__sort5[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithInteger<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,unsigned int>(re::Serializer<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<unsigned int const*,void *,true> const&,re::Pair<unsigned int const*,void *,true> const&)#1} &,re::Pair<unsigned int const*,void *,true>*>((__int128 *)a1, (unsigned int **)(a1 + 16), (unsigned int **)(a1 + 32), (__n128 *)(a1 + 48), (__n128 *)a2 - 1);
      return 1;
    default:
      v8 = (unsigned int **)(a1 + 32);
      std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithInteger<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,unsigned int>(re::Serializer<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<unsigned int const*,void *,true> const&,re::Pair<unsigned int const*,void *,true> const&)#1} &,re::Pair<unsigned int const*,void *,true>*>((__int128 *)a1, (unsigned int **)(a1 + 16), (unsigned int **)(a1 + 32));
      v9 = (unsigned int **)(a1 + 48);
      if ((unsigned int **)(a1 + 48) == a2)
        return 1;
      v10 = 0;
      v11 = 0;
      break;
  }
  while (1)
  {
    v12 = *v9;
    if (**v9 < **v8)
    {
      v13 = v9[1];
      v14 = v10;
      while (1)
      {
        *(_OWORD *)(a1 + v14 + 48) = *(_OWORD *)(a1 + v14 + 32);
        if (v14 == -32)
          break;
        v15 = **(_DWORD **)(a1 + v14 + 16);
        v14 -= 16;
        if (*v12 >= v15)
        {
          v16 = (unsigned int **)(a1 + v14 + 48);
          goto LABEL_12;
        }
      }
      v16 = (unsigned int **)a1;
LABEL_12:
      *v16 = v12;
      v16[1] = v13;
      if (++v11 == 8)
        return v9 + 2 == a2;
    }
    v8 = v9;
    v10 += 16;
    v9 += 2;
    if (v9 == a2)
      return 1;
  }
}

__n128 std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithInteger<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,unsigned int>(re::Serializer<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<unsigned int const*,void *,true> const&,re::Pair<unsigned int const*,void *,true> const&)#1} &,re::Pair<unsigned int const*,void *,true>*>(__int128 *a1, unsigned int **a2, unsigned int **a3, _OWORD *a4)
{
  __n128 result;

  std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithInteger<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,unsigned int>(re::Serializer<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<unsigned int const*,void *,true> const&,re::Pair<unsigned int const*,void *,true> const&)#1} &,re::Pair<unsigned int const*,void *,true>*>(a1, a2, a3);
  if (**(_DWORD **)a4 < **a3)
  {
    result = *(__n128 *)a3;
    *(_OWORD *)a3 = *a4;
    *a4 = result;
    if (**a3 < **a2)
    {
      result = *(__n128 *)a2;
      *(_OWORD *)a2 = *(_OWORD *)a3;
      *(__n128 *)a3 = result;
      if (**a2 < **(_DWORD **)a1)
      {
        result = (__n128)*a1;
        *a1 = *(_OWORD *)a2;
        *(__n128 *)a2 = result;
      }
    }
  }
  return result;
}

__n128 std::__sort5[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithInteger<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,unsigned int>(re::Serializer<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<unsigned int const*,void *,true> const&,re::Pair<unsigned int const*,void *,true> const&)#1} &,re::Pair<unsigned int const*,void *,true>*>(__int128 *a1, unsigned int **a2, unsigned int **a3, __n128 *a4, __n128 *a5)
{
  __n128 result;

  result.n128_u64[0] = std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithInteger<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,unsigned int>(re::Serializer<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<unsigned int const*,void *,true> const&,re::Pair<unsigned int const*,void *,true> const&)#1} &,re::Pair<unsigned int const*,void *,true>*>(a1, a2, a3, a4).n128_u64[0];
  if (*(_DWORD *)a5->n128_u64[0] < *(_DWORD *)a4->n128_u64[0])
  {
    result = *a4;
    *a4 = *a5;
    *a5 = result;
    if (*(_DWORD *)a4->n128_u64[0] < **a3)
    {
      result = *(__n128 *)a3;
      *(__n128 *)a3 = *a4;
      *a4 = result;
      if (**a3 < **a2)
      {
        result = *(__n128 *)a2;
        *(_OWORD *)a2 = *(_OWORD *)a3;
        *(__n128 *)a3 = result;
        if (**a2 < **(_DWORD **)a1)
        {
          result = (__n128)*a1;
          *a1 = *(_OWORD *)a2;
          *(__n128 *)a2 = result;
        }
      }
    }
  }
  return result;
}

unsigned int **std::__partial_sort_impl[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithInteger<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,unsigned int>(re::Serializer<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<unsigned int const*,void *,true> const&,re::Pair<unsigned int const*,void *,true> const&)#1} &,re::Pair<unsigned int const*,void *,true>*,re::Pair<unsigned int const*,void *,true>*>(unsigned int **a1, unsigned int **a2, unsigned int **a3, uint64_t a4)
{
  unsigned int **v6;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unsigned int **v12;
  unsigned int **v13;
  unsigned int **v14;
  __int128 v15;
  uint64_t v16;
  uint64_t v17;
  unsigned int **v18;
  unsigned int **v19;
  uint64_t v20;
  uint64_t v21;
  __int128 v24;

  if (a1 != a2)
  {
    v6 = a2;
    v8 = (char *)a2 - (char *)a1;
    v9 = ((char *)a2 - (char *)a1) >> 4;
    if ((char *)a2 - (char *)a1 >= 17)
    {
      v10 = (unint64_t)(v9 - 2) >> 1;
      v11 = v10 + 1;
      v12 = &a1[2 * v10];
      do
      {
        std::__sift_down[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithInteger<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,unsigned int>(re::Serializer<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<unsigned int const*,void *,true> const&,re::Pair<unsigned int const*,void *,true> const&)#1} &,re::Pair<unsigned int const*,void *,true>*>((uint64_t)a1, a4, v9, v12);
        v12 -= 2;
        --v11;
      }
      while (v11);
    }
    v13 = v6;
    if (v6 != a3)
    {
      v14 = v6;
      do
      {
        if (**v14 < **a1)
        {
          v15 = *(_OWORD *)v14;
          *(_OWORD *)v14 = *(_OWORD *)a1;
          *(_OWORD *)a1 = v15;
          std::__sift_down[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithInteger<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,unsigned int>(re::Serializer<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<unsigned int const*,void *,true> const&,re::Pair<unsigned int const*,void *,true> const&)#1} &,re::Pair<unsigned int const*,void *,true>*>((uint64_t)a1, a4, v9, a1);
        }
        v14 += 2;
      }
      while (v14 != a3);
      v13 = a3;
    }
    if (v8 >= 17)
    {
      v16 = (unint64_t)v8 >> 4;
      do
      {
        v17 = 0;
        v24 = *(_OWORD *)a1;
        v18 = a1;
        do
        {
          v19 = &v18[2 * v17 + 2];
          v20 = (2 * v17) | 1;
          v21 = 2 * v17 + 2;
          if (v21 < v16 && **v19 < *v19[2])
          {
            v19 += 2;
            v20 = v21;
          }
          *(_OWORD *)v18 = *(_OWORD *)v19;
          v18 = v19;
          v17 = v20;
        }
        while (v20 <= (uint64_t)((unint64_t)(v16 - 2) >> 1));
        v6 -= 2;
        if (v19 == v6)
        {
          *(_OWORD *)v19 = v24;
        }
        else
        {
          *(_OWORD *)v19 = *(_OWORD *)v6;
          *(_OWORD *)v6 = v24;
          std::__sift_up[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithInteger<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,unsigned int>(re::Serializer<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<unsigned int const*,void *,true> const&,re::Pair<unsigned int const*,void *,true> const&)#1} &,re::Pair<unsigned int const*,void *,true>*>((uint64_t)a1, (uint64_t)(v19 + 2), a4, ((char *)(v19 + 2) - (char *)a1) >> 4);
        }
      }
      while (v16-- > 2);
    }
    return v13;
  }
  return a3;
}

uint64_t std::__sift_down[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithInteger<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,unsigned int>(re::Serializer<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<unsigned int const*,void *,true> const&,re::Pair<unsigned int const*,void *,true> const&)#1} &,re::Pair<unsigned int const*,void *,true>*>(uint64_t result, uint64_t a2, uint64_t a3, unsigned int **a4)
{
  uint64_t v4;
  int64_t v5;
  uint64_t v6;
  uint64_t v7;
  unsigned int **v8;
  uint64_t v9;
  unsigned int v10;
  unsigned int v11;
  BOOL v12;
  unsigned int *v13;
  unsigned int *v14;
  unsigned int **v15;
  uint64_t v16;
  unsigned int v17;
  unsigned int v18;
  BOOL v19;

  if (a3 >= 2)
  {
    v4 = (uint64_t)a4 - result;
    v5 = (unint64_t)(a3 - 2) >> 1;
    if (v5 >= ((uint64_t)a4 - result) >> 4)
    {
      v6 = v4 >> 3;
      v7 = (v4 >> 3) + 1;
      v8 = (unsigned int **)(result + 16 * v7);
      v9 = v6 + 2;
      if (v9 >= a3)
      {
        v10 = **v8;
      }
      else
      {
        v10 = **v8;
        v11 = *v8[2];
        v12 = v10 >= v11;
        if (v10 <= v11)
          v10 = *v8[2];
        if (!v12)
        {
          v8 += 2;
          v7 = v9;
        }
      }
      v13 = *a4;
      if (v10 >= **a4)
      {
        v14 = a4[1];
        do
        {
          v15 = a4;
          a4 = v8;
          *(_OWORD *)v15 = *(_OWORD *)v8;
          if (v5 < v7)
            break;
          v16 = (2 * v7) | 1;
          v8 = (unsigned int **)(result + 16 * v16);
          v7 = 2 * v7 + 2;
          if (v7 >= a3)
          {
            v17 = **v8;
            v7 = v16;
          }
          else
          {
            v17 = **v8;
            v18 = *v8[2];
            v19 = v17 >= v18;
            if (v17 <= v18)
              v17 = *v8[2];
            if (v19)
              v7 = v16;
            else
              v8 += 2;
          }
        }
        while (v17 >= *v13);
        *a4 = v13;
        a4[1] = v14;
      }
    }
  }
  return result;
}

uint64_t std::__sift_up[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithInteger<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,unsigned int>(re::Serializer<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<unsigned int const*,void *,true> const&,re::Pair<unsigned int const*,void *,true> const&)#1} &,re::Pair<unsigned int const*,void *,true>*>(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unint64_t v4;
  unint64_t v5;
  _OWORD *v6;
  _QWORD *v7;
  _DWORD *v8;
  uint64_t v9;
  _OWORD *v10;

  v4 = a4 - 2;
  if (a4 >= 2)
  {
    v5 = v4 >> 1;
    v6 = (_OWORD *)(result + 16 * (v4 >> 1));
    v7 = (_QWORD *)(a2 - 16);
    v8 = *(_DWORD **)(a2 - 16);
    if (**(_DWORD **)v6 < *v8)
    {
      v9 = *(_QWORD *)(a2 - 8);
      do
      {
        v10 = v7;
        v7 = v6;
        *v10 = *v6;
        if (!v5)
          break;
        v5 = (v5 - 1) >> 1;
        v6 = (_OWORD *)(result + 16 * v5);
      }
      while (**(_DWORD **)v6 < *v8);
      *v7 = v8;
      v7[1] = v9;
    }
  }
  return result;
}

void std::__introsort<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithInteger<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,unsigned short>(re::Serializer<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<unsigned short const*,void *,true> const&,re::Pair<unsigned short const*,void *,true> const&)#1} &,re::Pair<unsigned short const*,void *,true>*,false>(unsigned __int16 **a1, unsigned __int16 **a2, uint64_t a3, uint64_t a4, char a5)
{
  unsigned __int16 **v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unsigned __int16 **v15;
  unsigned __int16 **v16;
  char v17;
  BOOL v18;
  unsigned __int16 **v19;
  unsigned __int16 *v20;
  __int128 v21;
  __int128 v22;

unsigned __int16 **std::__insertion_sort[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithInteger<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,unsigned short>(re::Serializer<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<unsigned short const*,void *,true> const&,re::Pair<unsigned short const*,void *,true> const&)#1} &,re::Pair<unsigned short const*,void *,true>*>(unsigned __int16 **result, unsigned __int16 **a2)
{
  unsigned __int16 **v2;
  uint64_t v3;
  unsigned __int16 **v4;
  unsigned __int16 **v5;
  unsigned __int16 *v6;
  unsigned __int16 *v7;
  uint64_t v8;
  unsigned int v9;
  unsigned __int16 **v10;

  if (result != a2)
  {
    v2 = result + 2;
    if (result + 2 != a2)
    {
      v3 = 0;
      v4 = result;
      do
      {
        v5 = v2;
        v6 = v4[2];
        if (*v6 < **v4)
        {
          v7 = v4[3];
          v8 = v3;
          while (1)
          {
            *(_OWORD *)((char *)result + v8 + 16) = *(_OWORD *)((char *)result + v8);
            if (!v8)
              break;
            v9 = **(unsigned __int16 **)((char *)result + v8 - 16);
            v8 -= 16;
            if (*v6 >= v9)
            {
              v10 = (unsigned __int16 **)((char *)result + v8 + 16);
              goto LABEL_10;
            }
          }
          v10 = result;
LABEL_10:
          *v10 = v6;
          v10[1] = v7;
        }
        v2 = v5 + 2;
        v3 += 16;
        v4 = v5;
      }
      while (v5 + 2 != a2);
    }
  }
  return result;
}

unsigned __int16 **std::__insertion_sort_unguarded[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithInteger<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,unsigned short>(re::Serializer<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<unsigned short const*,void *,true> const&,re::Pair<unsigned short const*,void *,true> const&)#1} &,re::Pair<unsigned short const*,void *,true>*>(unsigned __int16 **result, unsigned __int16 **a2)
{
  unsigned __int16 **v2;
  unsigned __int16 **v3;
  unsigned __int16 *v4;
  unsigned __int16 *v5;
  unsigned __int16 **v6;
  unsigned __int16 *v7;

  if (result != a2)
  {
    v2 = result + 2;
    while (v2 != a2)
    {
      v3 = v2;
      v4 = result[2];
      if (*v4 < **result)
      {
        v5 = result[3];
        v6 = v3;
        do
        {
          *(_OWORD *)v6 = *((_OWORD *)v6 - 1);
          v7 = *(v6 - 4);
          v6 -= 2;
        }
        while (*v4 < *v7);
        *v6 = v4;
        v6[1] = v5;
      }
      v2 = v3 + 2;
      result = v3;
    }
  }
  return result;
}

uint64_t std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithInteger<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,unsigned short>(re::Serializer<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<unsigned short const*,void *,true> const&,re::Pair<unsigned short const*,void *,true> const&)#1} &,re::Pair<unsigned short const*,void *,true>*>(unsigned __int16 **a1, _OWORD *a2, _OWORD *a3)
{
  unsigned int v3;
  unsigned int v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;

  v3 = **(unsigned __int16 **)a2;
  v4 = **(unsigned __int16 **)a3;
  if (v3 < **a1)
  {
    if (v4 < v3)
    {
      v5 = *(_OWORD *)a1;
      *(_OWORD *)a1 = *a3;
      *a3 = v5;
      return 1;
    }
    v8 = *(_OWORD *)a1;
    *(_OWORD *)a1 = *a2;
    *a2 = v8;
    if (**(unsigned __int16 **)a3 >= **(unsigned __int16 **)a2)
      return 1;
    v9 = *a2;
    *a2 = *a3;
    *a3 = v9;
    return 2;
  }
  if (v4 < v3)
  {
    v6 = *a2;
    *a2 = *a3;
    *a3 = v6;
    if (**(unsigned __int16 **)a2 >= **a1)
      return 1;
    v7 = *(_OWORD *)a1;
    *(_OWORD *)a1 = *a2;
    *a2 = v7;
    return 2;
  }
  return 0;
}

unsigned __int16 **std::__partition_with_equals_on_left[abi:nn180100]<std::_ClassicAlgPolicy,re::Pair<unsigned short const*,void *,true> *,BOOL re::internal::serializeDictionaryWithInteger<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,unsigned short>(re::Serializer<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<unsigned short const*,void *,true> const&,re::Pair<unsigned short const*,void *,true> const&)#1} &>(unsigned __int16 **a1, unsigned __int16 **a2)
{
  __int128 v2;
  unsigned __int16 *v3;
  unsigned int v4;
  unsigned __int16 **v5;
  unsigned __int16 *v6;
  unsigned __int16 **v7;
  unsigned __int16 *v8;
  unsigned int v9;
  unsigned __int16 *v10;
  unsigned __int16 *v11;
  __int128 v13;

  v2 = *(_OWORD *)a1;
  v3 = *a1;
  v4 = **a1;
  if (v4 >= **(a2 - 2))
  {
    v7 = a1 + 2;
    do
    {
      v5 = v7;
      if (v7 >= a2)
        break;
      v7 += 2;
    }
    while (v4 >= **v5);
  }
  else
  {
    v5 = a1;
    do
    {
      v6 = v5[2];
      v5 += 2;
    }
    while (v4 >= *v6);
  }
  if (v5 < a2)
  {
    do
    {
      v8 = *(a2 - 2);
      a2 -= 2;
    }
    while (v4 < *v8);
  }
  while (v5 < a2)
  {
    v13 = *(_OWORD *)v5;
    *(_OWORD *)v5 = *(_OWORD *)a2;
    *(_OWORD *)a2 = v13;
    v9 = *v3;
    do
    {
      v10 = v5[2];
      v5 += 2;
    }
    while (v9 >= *v10);
    do
    {
      v11 = *(a2 - 2);
      a2 -= 2;
    }
    while (v9 < *v11);
  }
  if (v5 - 2 != a1)
    *(_OWORD *)a1 = *((_OWORD *)v5 - 1);
  *((_OWORD *)v5 - 1) = v2;
  return v5;
}

unsigned __int16 **std::__partition_with_equals_on_right[abi:nn180100]<std::_ClassicAlgPolicy,re::Pair<unsigned short const*,void *,true> *,BOOL re::internal::serializeDictionaryWithInteger<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,unsigned short>(re::Serializer<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<unsigned short const*,void *,true> const&,re::Pair<unsigned short const*,void *,true> const&)#1} &>(unsigned __int16 **a1, unsigned __int16 **a2)
{
  uint64_t v2;
  __int128 v3;
  unsigned __int16 *v4;
  unsigned int v5;
  unsigned int v6;
  unsigned __int16 **v7;
  unsigned __int16 **v8;
  unsigned __int16 *v9;
  unsigned __int16 *v10;
  unsigned __int16 **v11;
  unsigned __int16 **v12;
  __int128 v13;
  unsigned int v14;
  unsigned __int16 *v15;
  unsigned __int16 *v16;

  v2 = 0;
  v3 = *(_OWORD *)a1;
  v4 = *a1;
  v5 = **a1;
  do
  {
    v6 = *a1[v2 + 2];
    v2 += 2;
  }
  while (v6 < v5);
  v7 = &a1[v2];
  v8 = &a1[v2 - 2];
  if (v2 == 2)
  {
    do
    {
      if (v7 >= a2)
        break;
      v10 = *(a2 - 2);
      a2 -= 2;
    }
    while (*v10 >= v5);
  }
  else
  {
    do
    {
      v9 = *(a2 - 2);
      a2 -= 2;
    }
    while (*v9 >= v5);
  }
  if (v7 < a2)
  {
    v11 = &a1[v2];
    v12 = a2;
    do
    {
      v13 = *(_OWORD *)v11;
      *(_OWORD *)v11 = *(_OWORD *)v12;
      *(_OWORD *)v12 = v13;
      v14 = *v4;
      do
      {
        v15 = v11[2];
        v11 += 2;
      }
      while (*v15 < v14);
      do
      {
        v16 = *(v12 - 2);
        v12 -= 2;
      }
      while (*v16 >= v14);
    }
    while (v11 < v12);
    v8 = v11 - 2;
  }
  if (v8 != a1)
    *(_OWORD *)a1 = *(_OWORD *)v8;
  *(_OWORD *)v8 = v3;
  return v8;
}

BOOL std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithInteger<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,unsigned short>(re::Serializer<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<unsigned short const*,void *,true> const&,re::Pair<unsigned short const*,void *,true> const&)#1} &,re::Pair<unsigned short const*,void *,true>*>(__n128 *a1, unsigned __int16 **a2)
{
  uint64_t v4;
  _BOOL8 result;
  unsigned __int16 **v6;
  __n128 v7;
  unsigned __int16 **v8;
  unsigned __int16 **v9;
  uint64_t v10;
  int v11;
  unsigned __int16 *v12;
  unsigned __int16 *v13;
  uint64_t v14;
  unsigned int v15;
  _QWORD *n128_u64;

  v4 = ((char *)a2 - (char *)a1) >> 4;
  result = 1;
  switch(v4)
  {
    case 0:
    case 1:
      return result;
    case 2:
      v6 = a2 - 2;
      if (**(a2 - 2) < *(unsigned __int16 *)a1->n128_u64[0])
      {
        v7 = *a1;
        *a1 = *(__n128 *)v6;
        *(__n128 *)v6 = v7;
      }
      return result;
    case 3:
      std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithInteger<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,unsigned short>(re::Serializer<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<unsigned short const*,void *,true> const&,re::Pair<unsigned short const*,void *,true> const&)#1} &,re::Pair<unsigned short const*,void *,true>*>((unsigned __int16 **)a1, (__n128 *)a1[1].n128_u64, (_OWORD *)a2 - 1);
      return 1;
    case 4:
      std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithInteger<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,unsigned short>(re::Serializer<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<unsigned short const*,void *,true> const&,re::Pair<unsigned short const*,void *,true> const&)#1} &,re::Pair<unsigned short const*,void *,true>*>((unsigned __int16 **)a1, a1 + 1, a1 + 2, (__n128 *)a2 - 1);
      return 1;
    case 5:
      std::__sort5[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithInteger<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,unsigned short>(re::Serializer<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<unsigned short const*,void *,true> const&,re::Pair<unsigned short const*,void *,true> const&)#1} &,re::Pair<unsigned short const*,void *,true>*>((unsigned __int16 **)a1, a1 + 1, a1 + 2, a1 + 3, (__n128 *)a2 - 1);
      return 1;
    default:
      v8 = (unsigned __int16 **)&a1[2];
      std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithInteger<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,unsigned short>(re::Serializer<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<unsigned short const*,void *,true> const&,re::Pair<unsigned short const*,void *,true> const&)#1} &,re::Pair<unsigned short const*,void *,true>*>((unsigned __int16 **)a1, (__n128 *)a1[1].n128_u64, (__n128 *)a1[2].n128_u64);
      v9 = (unsigned __int16 **)&a1[3];
      if (&a1[3] == (__n128 *)a2)
        return 1;
      v10 = 0;
      v11 = 0;
      break;
  }
  while (1)
  {
    v12 = *v9;
    if (**v9 < **v8)
    {
      v13 = v9[1];
      v14 = v10;
      while (1)
      {
        *(__n128 *)((char *)a1 + v14 + 48) = *(__n128 *)((char *)a1 + v14 + 32);
        if (v14 == -32)
          break;
        v15 = **(unsigned __int16 **)((char *)a1[1].n128_u64 + v14);
        v14 -= 16;
        if (*v12 >= v15)
        {
          n128_u64 = (unint64_t *)((char *)a1[3].n128_u64 + v14);
          goto LABEL_12;
        }
      }
      n128_u64 = a1->n128_u64;
LABEL_12:
      *n128_u64 = v12;
      n128_u64[1] = v13;
      if (++v11 == 8)
        return v9 + 2 == a2;
    }
    v8 = v9;
    v10 += 16;
    v9 += 2;
    if (v9 == a2)
      return 1;
  }
}

__n128 std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithInteger<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,unsigned short>(re::Serializer<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<unsigned short const*,void *,true> const&,re::Pair<unsigned short const*,void *,true> const&)#1} &,re::Pair<unsigned short const*,void *,true>*>(unsigned __int16 **a1, __n128 *a2, __n128 *a3, __n128 *a4)
{
  __n128 result;

  std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithInteger<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,unsigned short>(re::Serializer<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<unsigned short const*,void *,true> const&,re::Pair<unsigned short const*,void *,true> const&)#1} &,re::Pair<unsigned short const*,void *,true>*>(a1, a2, a3);
  if (*(unsigned __int16 *)a4->n128_u64[0] < *(unsigned __int16 *)a3->n128_u64[0])
  {
    result = *a3;
    *a3 = *a4;
    *a4 = result;
    if (*(unsigned __int16 *)a3->n128_u64[0] < *(unsigned __int16 *)a2->n128_u64[0])
    {
      result = *a2;
      *a2 = *a3;
      *a3 = result;
      if (*(unsigned __int16 *)a2->n128_u64[0] < **a1)
      {
        result = *(__n128 *)a1;
        *(__n128 *)a1 = *a2;
        *a2 = result;
      }
    }
  }
  return result;
}

__n128 std::__sort5[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithInteger<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,unsigned short>(re::Serializer<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<unsigned short const*,void *,true> const&,re::Pair<unsigned short const*,void *,true> const&)#1} &,re::Pair<unsigned short const*,void *,true>*>(unsigned __int16 **a1, __n128 *a2, __n128 *a3, __n128 *a4, __n128 *a5)
{
  __n128 result;

  result.n128_u64[0] = std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithInteger<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,unsigned short>(re::Serializer<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<unsigned short const*,void *,true> const&,re::Pair<unsigned short const*,void *,true> const&)#1} &,re::Pair<unsigned short const*,void *,true>*>(a1, a2, a3, a4).n128_u64[0];
  if (*(unsigned __int16 *)a5->n128_u64[0] < *(unsigned __int16 *)a4->n128_u64[0])
  {
    result = *a4;
    *a4 = *a5;
    *a5 = result;
    if (*(unsigned __int16 *)a4->n128_u64[0] < *(unsigned __int16 *)a3->n128_u64[0])
    {
      result = *a3;
      *a3 = *a4;
      *a4 = result;
      if (*(unsigned __int16 *)a3->n128_u64[0] < *(unsigned __int16 *)a2->n128_u64[0])
      {
        result = *a2;
        *a2 = *a3;
        *a3 = result;
        if (*(unsigned __int16 *)a2->n128_u64[0] < **a1)
        {
          result = *(__n128 *)a1;
          *(__n128 *)a1 = *a2;
          *a2 = result;
        }
      }
    }
  }
  return result;
}

unsigned __int16 **std::__partial_sort_impl[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithInteger<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,unsigned short>(re::Serializer<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<unsigned short const*,void *,true> const&,re::Pair<unsigned short const*,void *,true> const&)#1} &,re::Pair<unsigned short const*,void *,true>*,re::Pair<unsigned short const*,void *,true>*>(unsigned __int16 **a1, unsigned __int16 **a2, unsigned __int16 **a3, uint64_t a4)
{
  unsigned __int16 **v6;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unsigned __int16 **v12;
  unsigned __int16 **v13;
  unsigned __int16 **v14;
  __int128 v15;
  uint64_t v16;
  uint64_t v17;
  unsigned __int16 **v18;
  unsigned __int16 **v19;
  uint64_t v20;
  uint64_t v21;
  __int128 v24;

  if (a1 != a2)
  {
    v6 = a2;
    v8 = (char *)a2 - (char *)a1;
    v9 = ((char *)a2 - (char *)a1) >> 4;
    if ((char *)a2 - (char *)a1 >= 17)
    {
      v10 = (unint64_t)(v9 - 2) >> 1;
      v11 = v10 + 1;
      v12 = &a1[2 * v10];
      do
      {
        std::__sift_down[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithInteger<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,unsigned short>(re::Serializer<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<unsigned short const*,void *,true> const&,re::Pair<unsigned short const*,void *,true> const&)#1} &,re::Pair<unsigned short const*,void *,true>*>((uint64_t)a1, a4, v9, v12);
        v12 -= 2;
        --v11;
      }
      while (v11);
    }
    v13 = v6;
    if (v6 != a3)
    {
      v14 = v6;
      do
      {
        if (**v14 < **a1)
        {
          v15 = *(_OWORD *)v14;
          *(_OWORD *)v14 = *(_OWORD *)a1;
          *(_OWORD *)a1 = v15;
          std::__sift_down[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithInteger<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,unsigned short>(re::Serializer<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<unsigned short const*,void *,true> const&,re::Pair<unsigned short const*,void *,true> const&)#1} &,re::Pair<unsigned short const*,void *,true>*>((uint64_t)a1, a4, v9, a1);
        }
        v14 += 2;
      }
      while (v14 != a3);
      v13 = a3;
    }
    if (v8 >= 17)
    {
      v16 = (unint64_t)v8 >> 4;
      do
      {
        v17 = 0;
        v24 = *(_OWORD *)a1;
        v18 = a1;
        do
        {
          v19 = &v18[2 * v17 + 2];
          v20 = (2 * v17) | 1;
          v21 = 2 * v17 + 2;
          if (v21 < v16 && **v19 < *v19[2])
          {
            v19 += 2;
            v20 = v21;
          }
          *(_OWORD *)v18 = *(_OWORD *)v19;
          v18 = v19;
          v17 = v20;
        }
        while (v20 <= (uint64_t)((unint64_t)(v16 - 2) >> 1));
        v6 -= 2;
        if (v19 == v6)
        {
          *(_OWORD *)v19 = v24;
        }
        else
        {
          *(_OWORD *)v19 = *(_OWORD *)v6;
          *(_OWORD *)v6 = v24;
          std::__sift_up[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithInteger<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,unsigned short>(re::Serializer<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<unsigned short const*,void *,true> const&,re::Pair<unsigned short const*,void *,true> const&)#1} &,re::Pair<unsigned short const*,void *,true>*>((uint64_t)a1, (uint64_t)(v19 + 2), a4, ((char *)(v19 + 2) - (char *)a1) >> 4);
        }
      }
      while (v16-- > 2);
    }
    return v13;
  }
  return a3;
}

uint64_t std::__sift_down[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithInteger<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,unsigned short>(re::Serializer<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<unsigned short const*,void *,true> const&,re::Pair<unsigned short const*,void *,true> const&)#1} &,re::Pair<unsigned short const*,void *,true>*>(uint64_t result, uint64_t a2, uint64_t a3, unsigned __int16 **a4)
{
  uint64_t v4;
  int64_t v5;
  uint64_t v6;
  uint64_t v7;
  unsigned __int16 **v8;
  uint64_t v9;
  unsigned int v10;
  unsigned int v11;
  BOOL v12;
  unsigned __int16 *v13;
  unsigned __int16 *v14;
  _OWORD *v15;
  uint64_t v16;
  unsigned int v17;
  unsigned int v18;
  BOOL v19;

  if (a3 >= 2)
  {
    v4 = (uint64_t)a4 - result;
    v5 = (unint64_t)(a3 - 2) >> 1;
    if (v5 >= ((uint64_t)a4 - result) >> 4)
    {
      v6 = v4 >> 3;
      v7 = (v4 >> 3) + 1;
      v8 = (unsigned __int16 **)(result + 16 * v7);
      v9 = v6 + 2;
      if (v9 >= a3)
      {
        v10 = **v8;
      }
      else
      {
        v10 = **v8;
        v11 = *v8[2];
        v12 = v10 >= v11;
        if (v10 <= v11)
          v10 = *v8[2];
        if (!v12)
        {
          v8 += 2;
          v7 = v9;
        }
      }
      v13 = *a4;
      if (v10 >= **a4)
      {
        v14 = a4[1];
        do
        {
          v15 = a4;
          a4 = v8;
          *v15 = *(_OWORD *)v8;
          if (v5 < v7)
            break;
          v16 = (2 * v7) | 1;
          v8 = (unsigned __int16 **)(result + 16 * v16);
          v7 = 2 * v7 + 2;
          if (v7 >= a3)
          {
            v17 = **v8;
            v7 = v16;
          }
          else
          {
            v17 = **v8;
            v18 = *v8[2];
            v19 = v17 >= v18;
            if (v17 <= v18)
              v17 = *v8[2];
            if (v19)
              v7 = v16;
            else
              v8 += 2;
          }
        }
        while (v17 >= *v13);
        *a4 = v13;
        a4[1] = v14;
      }
    }
  }
  return result;
}

uint64_t std::__sift_up[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithInteger<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,unsigned short>(re::Serializer<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<unsigned short const*,void *,true> const&,re::Pair<unsigned short const*,void *,true> const&)#1} &,re::Pair<unsigned short const*,void *,true>*>(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unint64_t v4;
  unint64_t v5;
  _OWORD *v6;
  _QWORD *v7;
  unsigned __int16 *v8;
  uint64_t v9;
  _OWORD *v10;

  v4 = a4 - 2;
  if (a4 >= 2)
  {
    v5 = v4 >> 1;
    v6 = (_OWORD *)(result + 16 * (v4 >> 1));
    v7 = (_QWORD *)(a2 - 16);
    v8 = *(unsigned __int16 **)(a2 - 16);
    if (**(unsigned __int16 **)v6 < *v8)
    {
      v9 = *(_QWORD *)(a2 - 8);
      do
      {
        v10 = v7;
        v7 = v6;
        *v10 = *v6;
        if (!v5)
          break;
        v5 = (v5 - 1) >> 1;
        v6 = (_OWORD *)(result + 16 * v5);
      }
      while (**(unsigned __int16 **)v6 < *v8);
      *v7 = v8;
      v7[1] = v9;
    }
  }
  return result;
}

void std::__introsort<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithInteger<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,unsigned char>(re::Serializer<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<unsigned char const*,void *,true> const&,re::Pair<unsigned char const*,void *,true> const&)#1} &,re::Pair<unsigned char const*,void *,true>*,false>(unsigned __int8 **a1, unsigned __int8 **a2, uint64_t a3, uint64_t a4, char a5)
{
  unsigned __int8 **v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unsigned __int8 **v15;
  unsigned __int8 **v16;
  char v17;
  BOOL v18;
  unsigned __int8 **v19;
  unsigned __int8 *v20;
  __int128 v21;
  __int128 v22;

unsigned __int8 **std::__insertion_sort[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithInteger<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,unsigned char>(re::Serializer<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<unsigned char const*,void *,true> const&,re::Pair<unsigned char const*,void *,true> const&)#1} &,re::Pair<unsigned char const*,void *,true>*>(unsigned __int8 **result, unsigned __int8 **a2)
{
  unsigned __int8 **v2;
  uint64_t v3;
  unsigned __int8 **v4;
  unsigned __int8 **v5;
  unsigned __int8 *v6;
  unsigned __int8 *v7;
  uint64_t v8;
  unsigned int v9;
  unsigned __int8 **v10;

  if (result != a2)
  {
    v2 = result + 2;
    if (result + 2 != a2)
    {
      v3 = 0;
      v4 = result;
      do
      {
        v5 = v2;
        v6 = v4[2];
        if (*v6 < **v4)
        {
          v7 = v4[3];
          v8 = v3;
          while (1)
          {
            *(_OWORD *)((char *)result + v8 + 16) = *(_OWORD *)((char *)result + v8);
            if (!v8)
              break;
            v9 = **(unsigned __int8 **)((char *)result + v8 - 16);
            v8 -= 16;
            if (*v6 >= v9)
            {
              v10 = (unsigned __int8 **)((char *)result + v8 + 16);
              goto LABEL_10;
            }
          }
          v10 = result;
LABEL_10:
          *v10 = v6;
          v10[1] = v7;
        }
        v2 = v5 + 2;
        v3 += 16;
        v4 = v5;
      }
      while (v5 + 2 != a2);
    }
  }
  return result;
}

unsigned __int8 **std::__insertion_sort_unguarded[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithInteger<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,unsigned char>(re::Serializer<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<unsigned char const*,void *,true> const&,re::Pair<unsigned char const*,void *,true> const&)#1} &,re::Pair<unsigned char const*,void *,true>*>(unsigned __int8 **result, unsigned __int8 **a2)
{
  unsigned __int8 **v2;
  unsigned __int8 **v3;
  unsigned __int8 *v4;
  unsigned __int8 *v5;
  unsigned __int8 **v6;
  unsigned __int8 *v7;

  if (result != a2)
  {
    v2 = result + 2;
    while (v2 != a2)
    {
      v3 = v2;
      v4 = result[2];
      if (*v4 < **result)
      {
        v5 = result[3];
        v6 = v3;
        do
        {
          *(_OWORD *)v6 = *((_OWORD *)v6 - 1);
          v7 = *(v6 - 4);
          v6 -= 2;
        }
        while (*v4 < *v7);
        *v6 = v4;
        v6[1] = v5;
      }
      v2 = v3 + 2;
      result = v3;
    }
  }
  return result;
}

uint64_t std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithInteger<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,unsigned char>(re::Serializer<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<unsigned char const*,void *,true> const&,re::Pair<unsigned char const*,void *,true> const&)#1} &,re::Pair<unsigned char const*,void *,true>*>(unsigned __int8 **a1, _OWORD *a2, _OWORD *a3)
{
  unsigned int v3;
  unsigned int v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;

  v3 = **(unsigned __int8 **)a2;
  v4 = **(unsigned __int8 **)a3;
  if (v3 < **a1)
  {
    if (v4 < v3)
    {
      v5 = *(_OWORD *)a1;
      *(_OWORD *)a1 = *a3;
      *a3 = v5;
      return 1;
    }
    v8 = *(_OWORD *)a1;
    *(_OWORD *)a1 = *a2;
    *a2 = v8;
    if (**(unsigned __int8 **)a3 >= **(unsigned __int8 **)a2)
      return 1;
    v9 = *a2;
    *a2 = *a3;
    *a3 = v9;
    return 2;
  }
  if (v4 < v3)
  {
    v6 = *a2;
    *a2 = *a3;
    *a3 = v6;
    if (**(unsigned __int8 **)a2 >= **a1)
      return 1;
    v7 = *(_OWORD *)a1;
    *(_OWORD *)a1 = *a2;
    *a2 = v7;
    return 2;
  }
  return 0;
}

unsigned __int8 **std::__partition_with_equals_on_left[abi:nn180100]<std::_ClassicAlgPolicy,re::Pair<unsigned char const*,void *,true> *,BOOL re::internal::serializeDictionaryWithInteger<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,unsigned char>(re::Serializer<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<unsigned char const*,void *,true> const&,re::Pair<unsigned char const*,void *,true> const&)#1} &>(unsigned __int8 **a1, unsigned __int8 **a2)
{
  __int128 v2;
  unsigned __int8 *v3;
  unsigned int v4;
  unsigned __int8 **v5;
  unsigned __int8 *v6;
  unsigned __int8 **v7;
  unsigned __int8 *v8;
  unsigned int v9;
  unsigned __int8 *v10;
  unsigned __int8 *v11;
  __int128 v13;

  v2 = *(_OWORD *)a1;
  v3 = *a1;
  v4 = **a1;
  if (v4 >= **(a2 - 2))
  {
    v7 = a1 + 2;
    do
    {
      v5 = v7;
      if (v7 >= a2)
        break;
      v7 += 2;
    }
    while (v4 >= **v5);
  }
  else
  {
    v5 = a1;
    do
    {
      v6 = v5[2];
      v5 += 2;
    }
    while (v4 >= *v6);
  }
  if (v5 < a2)
  {
    do
    {
      v8 = *(a2 - 2);
      a2 -= 2;
    }
    while (v4 < *v8);
  }
  while (v5 < a2)
  {
    v13 = *(_OWORD *)v5;
    *(_OWORD *)v5 = *(_OWORD *)a2;
    *(_OWORD *)a2 = v13;
    v9 = *v3;
    do
    {
      v10 = v5[2];
      v5 += 2;
    }
    while (v9 >= *v10);
    do
    {
      v11 = *(a2 - 2);
      a2 -= 2;
    }
    while (v9 < *v11);
  }
  if (v5 - 2 != a1)
    *(_OWORD *)a1 = *((_OWORD *)v5 - 1);
  *((_OWORD *)v5 - 1) = v2;
  return v5;
}

unsigned __int8 **std::__partition_with_equals_on_right[abi:nn180100]<std::_ClassicAlgPolicy,re::Pair<unsigned char const*,void *,true> *,BOOL re::internal::serializeDictionaryWithInteger<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,unsigned char>(re::Serializer<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<unsigned char const*,void *,true> const&,re::Pair<unsigned char const*,void *,true> const&)#1} &>(unsigned __int8 **a1, unsigned __int8 **a2)
{
  uint64_t v2;
  __int128 v3;
  unsigned __int8 *v4;
  unsigned int v5;
  unsigned int v6;
  unsigned __int8 **v7;
  unsigned __int8 **v8;
  unsigned __int8 *v9;
  unsigned __int8 *v10;
  unsigned __int8 **v11;
  unsigned __int8 **v12;
  __int128 v13;
  unsigned int v14;
  unsigned __int8 *v15;
  unsigned __int8 *v16;

  v2 = 0;
  v3 = *(_OWORD *)a1;
  v4 = *a1;
  v5 = **a1;
  do
  {
    v6 = *a1[v2 + 2];
    v2 += 2;
  }
  while (v6 < v5);
  v7 = &a1[v2];
  v8 = &a1[v2 - 2];
  if (v2 == 2)
  {
    do
    {
      if (v7 >= a2)
        break;
      v10 = *(a2 - 2);
      a2 -= 2;
    }
    while (*v10 >= v5);
  }
  else
  {
    do
    {
      v9 = *(a2 - 2);
      a2 -= 2;
    }
    while (*v9 >= v5);
  }
  if (v7 < a2)
  {
    v11 = &a1[v2];
    v12 = a2;
    do
    {
      v13 = *(_OWORD *)v11;
      *(_OWORD *)v11 = *(_OWORD *)v12;
      *(_OWORD *)v12 = v13;
      v14 = *v4;
      do
      {
        v15 = v11[2];
        v11 += 2;
      }
      while (*v15 < v14);
      do
      {
        v16 = *(v12 - 2);
        v12 -= 2;
      }
      while (*v16 >= v14);
    }
    while (v11 < v12);
    v8 = v11 - 2;
  }
  if (v8 != a1)
    *(_OWORD *)a1 = *(_OWORD *)v8;
  *(_OWORD *)v8 = v3;
  return v8;
}

BOOL std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithInteger<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,unsigned char>(re::Serializer<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<unsigned char const*,void *,true> const&,re::Pair<unsigned char const*,void *,true> const&)#1} &,re::Pair<unsigned char const*,void *,true>*>(__n128 *a1, unsigned __int8 **a2)
{
  uint64_t v4;
  _BOOL8 result;
  unsigned __int8 **v6;
  __n128 v7;
  unsigned __int8 **v8;
  unsigned __int8 **v9;
  uint64_t v10;
  int v11;
  unsigned __int8 *v12;
  unsigned __int8 *v13;
  uint64_t v14;
  unsigned int v15;
  _QWORD *n128_u64;

  v4 = ((char *)a2 - (char *)a1) >> 4;
  result = 1;
  switch(v4)
  {
    case 0:
    case 1:
      return result;
    case 2:
      v6 = a2 - 2;
      if (**(a2 - 2) < *(unsigned __int8 *)a1->n128_u64[0])
      {
        v7 = *a1;
        *a1 = *(__n128 *)v6;
        *(__n128 *)v6 = v7;
      }
      return result;
    case 3:
      std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithInteger<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,unsigned char>(re::Serializer<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<unsigned char const*,void *,true> const&,re::Pair<unsigned char const*,void *,true> const&)#1} &,re::Pair<unsigned char const*,void *,true>*>((unsigned __int8 **)a1, (__n128 *)a1[1].n128_u64, (_OWORD *)a2 - 1);
      return 1;
    case 4:
      std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithInteger<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,unsigned char>(re::Serializer<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<unsigned char const*,void *,true> const&,re::Pair<unsigned char const*,void *,true> const&)#1} &,re::Pair<unsigned char const*,void *,true>*>((unsigned __int8 **)a1, a1 + 1, a1 + 2, (__n128 *)a2 - 1);
      return 1;
    case 5:
      std::__sort5[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithInteger<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,unsigned char>(re::Serializer<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<unsigned char const*,void *,true> const&,re::Pair<unsigned char const*,void *,true> const&)#1} &,re::Pair<unsigned char const*,void *,true>*>((unsigned __int8 **)a1, a1 + 1, a1 + 2, a1 + 3, (__n128 *)a2 - 1);
      return 1;
    default:
      v8 = (unsigned __int8 **)&a1[2];
      std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithInteger<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,unsigned char>(re::Serializer<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<unsigned char const*,void *,true> const&,re::Pair<unsigned char const*,void *,true> const&)#1} &,re::Pair<unsigned char const*,void *,true>*>((unsigned __int8 **)a1, (__n128 *)a1[1].n128_u64, (__n128 *)a1[2].n128_u64);
      v9 = (unsigned __int8 **)&a1[3];
      if (&a1[3] == (__n128 *)a2)
        return 1;
      v10 = 0;
      v11 = 0;
      break;
  }
  while (1)
  {
    v12 = *v9;
    if (**v9 < **v8)
    {
      v13 = v9[1];
      v14 = v10;
      while (1)
      {
        *(__n128 *)((char *)a1 + v14 + 48) = *(__n128 *)((char *)a1 + v14 + 32);
        if (v14 == -32)
          break;
        v15 = **(unsigned __int8 **)((char *)a1[1].n128_u64 + v14);
        v14 -= 16;
        if (*v12 >= v15)
        {
          n128_u64 = (unint64_t *)((char *)a1[3].n128_u64 + v14);
          goto LABEL_12;
        }
      }
      n128_u64 = a1->n128_u64;
LABEL_12:
      *n128_u64 = v12;
      n128_u64[1] = v13;
      if (++v11 == 8)
        return v9 + 2 == a2;
    }
    v8 = v9;
    v10 += 16;
    v9 += 2;
    if (v9 == a2)
      return 1;
  }
}

__n128 std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithInteger<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,unsigned char>(re::Serializer<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<unsigned char const*,void *,true> const&,re::Pair<unsigned char const*,void *,true> const&)#1} &,re::Pair<unsigned char const*,void *,true>*>(unsigned __int8 **a1, __n128 *a2, __n128 *a3, __n128 *a4)
{
  __n128 result;

  std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithInteger<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,unsigned char>(re::Serializer<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<unsigned char const*,void *,true> const&,re::Pair<unsigned char const*,void *,true> const&)#1} &,re::Pair<unsigned char const*,void *,true>*>(a1, a2, a3);
  if (*(unsigned __int8 *)a4->n128_u64[0] < *(unsigned __int8 *)a3->n128_u64[0])
  {
    result = *a3;
    *a3 = *a4;
    *a4 = result;
    if (*(unsigned __int8 *)a3->n128_u64[0] < *(unsigned __int8 *)a2->n128_u64[0])
    {
      result = *a2;
      *a2 = *a3;
      *a3 = result;
      if (*(unsigned __int8 *)a2->n128_u64[0] < **a1)
      {
        result = *(__n128 *)a1;
        *(__n128 *)a1 = *a2;
        *a2 = result;
      }
    }
  }
  return result;
}

__n128 std::__sort5[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithInteger<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,unsigned char>(re::Serializer<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<unsigned char const*,void *,true> const&,re::Pair<unsigned char const*,void *,true> const&)#1} &,re::Pair<unsigned char const*,void *,true>*>(unsigned __int8 **a1, __n128 *a2, __n128 *a3, __n128 *a4, __n128 *a5)
{
  __n128 result;

  result.n128_u64[0] = std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithInteger<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,unsigned char>(re::Serializer<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<unsigned char const*,void *,true> const&,re::Pair<unsigned char const*,void *,true> const&)#1} &,re::Pair<unsigned char const*,void *,true>*>(a1, a2, a3, a4).n128_u64[0];
  if (*(unsigned __int8 *)a5->n128_u64[0] < *(unsigned __int8 *)a4->n128_u64[0])
  {
    result = *a4;
    *a4 = *a5;
    *a5 = result;
    if (*(unsigned __int8 *)a4->n128_u64[0] < *(unsigned __int8 *)a3->n128_u64[0])
    {
      result = *a3;
      *a3 = *a4;
      *a4 = result;
      if (*(unsigned __int8 *)a3->n128_u64[0] < *(unsigned __int8 *)a2->n128_u64[0])
      {
        result = *a2;
        *a2 = *a3;
        *a3 = result;
        if (*(unsigned __int8 *)a2->n128_u64[0] < **a1)
        {
          result = *(__n128 *)a1;
          *(__n128 *)a1 = *a2;
          *a2 = result;
        }
      }
    }
  }
  return result;
}

unsigned __int8 **std::__partial_sort_impl[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithInteger<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,unsigned char>(re::Serializer<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<unsigned char const*,void *,true> const&,re::Pair<unsigned char const*,void *,true> const&)#1} &,re::Pair<unsigned char const*,void *,true>*,re::Pair<unsigned char const*,void *,true>*>(unsigned __int8 **a1, unsigned __int8 **a2, unsigned __int8 **a3, uint64_t a4)
{
  unsigned __int8 **v6;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unsigned __int8 **v12;
  unsigned __int8 **v13;
  unsigned __int8 **v14;
  __int128 v15;
  uint64_t v16;
  uint64_t v17;
  unsigned __int8 **v18;
  unsigned __int8 **v19;
  uint64_t v20;
  uint64_t v21;
  __int128 v24;

  if (a1 != a2)
  {
    v6 = a2;
    v8 = (char *)a2 - (char *)a1;
    v9 = ((char *)a2 - (char *)a1) >> 4;
    if ((char *)a2 - (char *)a1 >= 17)
    {
      v10 = (unint64_t)(v9 - 2) >> 1;
      v11 = v10 + 1;
      v12 = &a1[2 * v10];
      do
      {
        std::__sift_down[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithInteger<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,unsigned char>(re::Serializer<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<unsigned char const*,void *,true> const&,re::Pair<unsigned char const*,void *,true> const&)#1} &,re::Pair<unsigned char const*,void *,true>*>((uint64_t)a1, a4, v9, v12);
        v12 -= 2;
        --v11;
      }
      while (v11);
    }
    v13 = v6;
    if (v6 != a3)
    {
      v14 = v6;
      do
      {
        if (**v14 < **a1)
        {
          v15 = *(_OWORD *)v14;
          *(_OWORD *)v14 = *(_OWORD *)a1;
          *(_OWORD *)a1 = v15;
          std::__sift_down[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithInteger<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,unsigned char>(re::Serializer<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<unsigned char const*,void *,true> const&,re::Pair<unsigned char const*,void *,true> const&)#1} &,re::Pair<unsigned char const*,void *,true>*>((uint64_t)a1, a4, v9, a1);
        }
        v14 += 2;
      }
      while (v14 != a3);
      v13 = a3;
    }
    if (v8 >= 17)
    {
      v16 = (unint64_t)v8 >> 4;
      do
      {
        v17 = 0;
        v24 = *(_OWORD *)a1;
        v18 = a1;
        do
        {
          v19 = &v18[2 * v17 + 2];
          v20 = (2 * v17) | 1;
          v21 = 2 * v17 + 2;
          if (v21 < v16 && **v19 < *v19[2])
          {
            v19 += 2;
            v20 = v21;
          }
          *(_OWORD *)v18 = *(_OWORD *)v19;
          v18 = v19;
          v17 = v20;
        }
        while (v20 <= (uint64_t)((unint64_t)(v16 - 2) >> 1));
        v6 -= 2;
        if (v19 == v6)
        {
          *(_OWORD *)v19 = v24;
        }
        else
        {
          *(_OWORD *)v19 = *(_OWORD *)v6;
          *(_OWORD *)v6 = v24;
          std::__sift_up[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithInteger<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,unsigned char>(re::Serializer<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<unsigned char const*,void *,true> const&,re::Pair<unsigned char const*,void *,true> const&)#1} &,re::Pair<unsigned char const*,void *,true>*>((uint64_t)a1, (uint64_t)(v19 + 2), a4, ((char *)(v19 + 2) - (char *)a1) >> 4);
        }
      }
      while (v16-- > 2);
    }
    return v13;
  }
  return a3;
}

uint64_t std::__sift_down[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithInteger<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,unsigned char>(re::Serializer<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<unsigned char const*,void *,true> const&,re::Pair<unsigned char const*,void *,true> const&)#1} &,re::Pair<unsigned char const*,void *,true>*>(uint64_t result, uint64_t a2, uint64_t a3, unsigned __int8 **a4)
{
  uint64_t v4;
  int64_t v5;
  uint64_t v6;
  uint64_t v7;
  unsigned __int8 **v8;
  uint64_t v9;
  unsigned int v10;
  unsigned int v11;
  BOOL v12;
  unsigned __int8 *v13;
  unsigned __int8 *v14;
  _OWORD *v15;
  uint64_t v16;
  unsigned int v17;
  unsigned int v18;
  BOOL v19;

  if (a3 >= 2)
  {
    v4 = (uint64_t)a4 - result;
    v5 = (unint64_t)(a3 - 2) >> 1;
    if (v5 >= ((uint64_t)a4 - result) >> 4)
    {
      v6 = v4 >> 3;
      v7 = (v4 >> 3) + 1;
      v8 = (unsigned __int8 **)(result + 16 * v7);
      v9 = v6 + 2;
      if (v9 >= a3)
      {
        v10 = **v8;
      }
      else
      {
        v10 = **v8;
        v11 = *v8[2];
        v12 = v10 >= v11;
        if (v10 <= v11)
          v10 = *v8[2];
        if (!v12)
        {
          v8 += 2;
          v7 = v9;
        }
      }
      v13 = *a4;
      if (v10 >= **a4)
      {
        v14 = a4[1];
        do
        {
          v15 = a4;
          a4 = v8;
          *v15 = *(_OWORD *)v8;
          if (v5 < v7)
            break;
          v16 = (2 * v7) | 1;
          v8 = (unsigned __int8 **)(result + 16 * v16);
          v7 = 2 * v7 + 2;
          if (v7 >= a3)
          {
            v17 = **v8;
            v7 = v16;
          }
          else
          {
            v17 = **v8;
            v18 = *v8[2];
            v19 = v17 >= v18;
            if (v17 <= v18)
              v17 = *v8[2];
            if (v19)
              v7 = v16;
            else
              v8 += 2;
          }
        }
        while (v17 >= *v13);
        *a4 = v13;
        a4[1] = v14;
      }
    }
  }
  return result;
}

uint64_t std::__sift_up[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithInteger<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,unsigned char>(re::Serializer<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<unsigned char const*,void *,true> const&,re::Pair<unsigned char const*,void *,true> const&)#1} &,re::Pair<unsigned char const*,void *,true>*>(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unint64_t v4;
  unint64_t v5;
  _OWORD *v6;
  _QWORD *v7;
  unsigned __int8 *v8;
  uint64_t v9;
  _OWORD *v10;

  v4 = a4 - 2;
  if (a4 >= 2)
  {
    v5 = v4 >> 1;
    v6 = (_OWORD *)(result + 16 * (v4 >> 1));
    v7 = (_QWORD *)(a2 - 16);
    v8 = *(unsigned __int8 **)(a2 - 16);
    if (**(unsigned __int8 **)v6 < *v8)
    {
      v9 = *(_QWORD *)(a2 - 8);
      do
      {
        v10 = v7;
        v7 = v6;
        *v10 = *v6;
        if (!v5)
          break;
        v5 = (v5 - 1) >> 1;
        v6 = (_OWORD *)(result + 16 * v5);
      }
      while (**(unsigned __int8 **)v6 < *v8);
      *v7 = v8;
      v7[1] = v9;
    }
  }
  return result;
}

void std::__introsort<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithInteger<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,long long>(re::Serializer<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<long long const*,void *,true> const&,re::Pair<long long const*,void *,true> const&)#1} &,re::Pair<long long const*,void *,true>*,false>(uint64_t **a1, uint64_t **a2, uint64_t a3, uint64_t a4, char a5)
{
  uint64_t **v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t **v15;
  uint64_t **v16;
  char v17;
  BOOL v18;
  __int128 *v19;
  uint64_t *v20;
  __int128 v21;
  __int128 v22;

_QWORD *std::__insertion_sort[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithInteger<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,long long>(re::Serializer<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<long long const*,void *,true> const&,re::Pair<long long const*,void *,true> const&)#1} &,re::Pair<long long const*,void *,true>*>(_QWORD *result, _QWORD *a2)
{
  _QWORD *v2;
  uint64_t v3;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;

  if (result != a2)
  {
    v2 = result + 2;
    if (result + 2 != a2)
    {
      v3 = 0;
      v4 = result;
      do
      {
        v5 = v2;
        v6 = (_QWORD *)v4[2];
        if (*v6 < *(_QWORD *)*v4)
        {
          v7 = v4[3];
          v8 = v3;
          while (1)
          {
            *(_OWORD *)((char *)result + v8 + 16) = *(_OWORD *)((char *)result + v8);
            if (!v8)
              break;
            v9 = **(_QWORD **)((char *)result + v8 - 16);
            v8 -= 16;
            if (*v6 >= v9)
            {
              v10 = (_QWORD *)((char *)result + v8 + 16);
              goto LABEL_10;
            }
          }
          v10 = result;
LABEL_10:
          *v10 = v6;
          v10[1] = v7;
        }
        v2 = v5 + 2;
        v3 += 16;
        v4 = v5;
      }
      while (v5 + 2 != a2);
    }
  }
  return result;
}

uint64_t std::__insertion_sort_unguarded[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithInteger<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,long long>(re::Serializer<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<long long const*,void *,true> const&,re::Pair<long long const*,void *,true> const&)#1} &,re::Pair<long long const*,void *,true>*>(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;

  if (result != a2)
  {
    v2 = result + 16;
    while (v2 != a2)
    {
      v3 = v2;
      v4 = *(_QWORD **)(result + 16);
      if (*v4 < **(_QWORD **)result)
      {
        v5 = *(_QWORD *)(result + 24);
        v6 = v3;
        do
        {
          *(_OWORD *)v6 = *(_OWORD *)(v6 - 16);
          v7 = *(_QWORD **)(v6 - 32);
          v6 -= 16;
        }
        while (*v4 < *v7);
        *(_QWORD *)v6 = v4;
        *(_QWORD *)(v6 + 8) = v5;
      }
      v2 = v3 + 16;
      result = v3;
    }
  }
  return result;
}

uint64_t std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithInteger<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,long long>(re::Serializer<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<long long const*,void *,true> const&,re::Pair<long long const*,void *,true> const&)#1} &,re::Pair<long long const*,void *,true>*>(__int128 *a1, uint64_t **a2, uint64_t **a3)
{
  uint64_t v3;
  uint64_t v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;

  v3 = **a2;
  v4 = **a3;
  if (v3 < **(_QWORD **)a1)
  {
    if (v4 < v3)
    {
      v5 = *a1;
      *a1 = *(_OWORD *)a3;
      *(_OWORD *)a3 = v5;
      return 1;
    }
    v8 = *a1;
    *a1 = *(_OWORD *)a2;
    *(_OWORD *)a2 = v8;
    if (**a3 >= **a2)
      return 1;
    v9 = *(_OWORD *)a2;
    *(_OWORD *)a2 = *(_OWORD *)a3;
    *(_OWORD *)a3 = v9;
    return 2;
  }
  if (v4 < v3)
  {
    v6 = *(_OWORD *)a2;
    *(_OWORD *)a2 = *(_OWORD *)a3;
    *(_OWORD *)a3 = v6;
    if (**a2 >= **(_QWORD **)a1)
      return 1;
    v7 = *a1;
    *a1 = *(_OWORD *)a2;
    *(_OWORD *)a2 = v7;
    return 2;
  }
  return 0;
}

uint64_t **std::__partition_with_equals_on_left[abi:nn180100]<std::_ClassicAlgPolicy,re::Pair<long long const*,void *,true> *,BOOL re::internal::serializeDictionaryWithInteger<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,long long>(re::Serializer<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<long long const*,void *,true> const&,re::Pair<long long const*,void *,true> const&)#1} &>(uint64_t **a1, uint64_t **a2)
{
  __int128 v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t **v5;
  uint64_t *v6;
  uint64_t **v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t *v10;
  _QWORD *v11;
  __int128 v13;

  v2 = *(_OWORD *)a1;
  v3 = *a1;
  v4 = **a1;
  if (v4 >= **(a2 - 2))
  {
    v7 = a1 + 2;
    do
    {
      v5 = v7;
      if (v7 >= a2)
        break;
      v7 += 2;
    }
    while (v4 >= **v5);
  }
  else
  {
    v5 = a1;
    do
    {
      v6 = v5[2];
      v5 += 2;
    }
    while (v4 >= *v6);
  }
  if (v5 < a2)
  {
    do
    {
      v8 = *(a2 - 2);
      a2 -= 2;
    }
    while (v4 < *v8);
  }
  while (v5 < a2)
  {
    v13 = *(_OWORD *)v5;
    *(_OWORD *)v5 = *(_OWORD *)a2;
    *(_OWORD *)a2 = v13;
    v9 = *v3;
    do
    {
      v10 = v5[2];
      v5 += 2;
    }
    while (v9 >= *v10);
    do
    {
      v11 = *(a2 - 2);
      a2 -= 2;
    }
    while (v9 < *v11);
  }
  if (v5 - 2 != a1)
    *(_OWORD *)a1 = *((_OWORD *)v5 - 1);
  *((_OWORD *)v5 - 1) = v2;
  return v5;
}

uint64_t **std::__partition_with_equals_on_right[abi:nn180100]<std::_ClassicAlgPolicy,re::Pair<long long const*,void *,true> *,BOOL re::internal::serializeDictionaryWithInteger<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,long long>(re::Serializer<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<long long const*,void *,true> const&,re::Pair<long long const*,void *,true> const&)#1} &>(uint64_t **a1, uint64_t **a2)
{
  uint64_t v2;
  __int128 v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t **v7;
  uint64_t **v8;
  _QWORD *v9;
  _QWORD *v10;
  uint64_t **v11;
  uint64_t **v12;
  __int128 v13;
  uint64_t v14;
  uint64_t *v15;
  _QWORD *v16;

  v2 = 0;
  v3 = *(_OWORD *)a1;
  v4 = *a1;
  v5 = **a1;
  do
  {
    v6 = *a1[v2 + 2];
    v2 += 2;
  }
  while (v6 < v5);
  v7 = &a1[v2];
  v8 = &a1[v2 - 2];
  if (v2 == 2)
  {
    do
    {
      if (v7 >= a2)
        break;
      v10 = *(a2 - 2);
      a2 -= 2;
    }
    while (*v10 >= v5);
  }
  else
  {
    do
    {
      v9 = *(a2 - 2);
      a2 -= 2;
    }
    while (*v9 >= v5);
  }
  if (v7 < a2)
  {
    v11 = &a1[v2];
    v12 = a2;
    do
    {
      v13 = *(_OWORD *)v11;
      *(_OWORD *)v11 = *(_OWORD *)v12;
      *(_OWORD *)v12 = v13;
      v14 = *v4;
      do
      {
        v15 = v11[2];
        v11 += 2;
      }
      while (*v15 < v14);
      do
      {
        v16 = *(v12 - 2);
        v12 -= 2;
      }
      while (*v16 >= v14);
    }
    while (v11 < v12);
    v8 = v11 - 2;
  }
  if (v8 != a1)
    *(_OWORD *)a1 = *(_OWORD *)v8;
  *(_OWORD *)v8 = v3;
  return v8;
}

BOOL std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithInteger<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,long long>(re::Serializer<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<long long const*,void *,true> const&,re::Pair<long long const*,void *,true> const&)#1} &,re::Pair<long long const*,void *,true>*>(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  _BOOL8 result;
  __int128 *v6;
  __int128 v7;
  _QWORD **v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;

  v4 = (a2 - a1) >> 4;
  result = 1;
  switch(v4)
  {
    case 0:
    case 1:
      return result;
    case 2:
      v6 = (__int128 *)(a2 - 16);
      if (**(_QWORD **)(a2 - 16) < **(_QWORD **)a1)
      {
        v7 = *(_OWORD *)a1;
        *(_OWORD *)a1 = *v6;
        *v6 = v7;
      }
      return result;
    case 3:
      std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithInteger<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,long long>(re::Serializer<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<long long const*,void *,true> const&,re::Pair<long long const*,void *,true> const&)#1} &,re::Pair<long long const*,void *,true>*>((__int128 *)a1, (uint64_t **)(a1 + 16), (uint64_t **)(a2 - 16));
      return 1;
    case 4:
      std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithInteger<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,long long>(re::Serializer<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<long long const*,void *,true> const&,re::Pair<long long const*,void *,true> const&)#1} &,re::Pair<long long const*,void *,true>*>((__int128 *)a1, (uint64_t **)(a1 + 16), (uint64_t **)(a1 + 32), (_OWORD *)(a2 - 16));
      return 1;
    case 5:
      std::__sort5[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithInteger<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,long long>(re::Serializer<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<long long const*,void *,true> const&,re::Pair<long long const*,void *,true> const&)#1} &,re::Pair<long long const*,void *,true>*>((__int128 *)a1, (uint64_t **)(a1 + 16), (uint64_t **)(a1 + 32), (__n128 *)(a1 + 48), (__n128 *)(a2 - 16));
      return 1;
    default:
      v8 = (_QWORD **)(a1 + 32);
      std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithInteger<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,long long>(re::Serializer<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<long long const*,void *,true> const&,re::Pair<long long const*,void *,true> const&)#1} &,re::Pair<long long const*,void *,true>*>((__int128 *)a1, (uint64_t **)(a1 + 16), (uint64_t **)(a1 + 32));
      v9 = a1 + 48;
      if (a1 + 48 == a2)
        return 1;
      v10 = 0;
      v11 = 0;
      break;
  }
  while (1)
  {
    v12 = *(_QWORD **)v9;
    if (**(_QWORD **)v9 < **v8)
    {
      v13 = *(_QWORD *)(v9 + 8);
      v14 = v10;
      while (1)
      {
        *(_OWORD *)(a1 + v14 + 48) = *(_OWORD *)(a1 + v14 + 32);
        if (v14 == -32)
          break;
        v15 = **(_QWORD **)(a1 + v14 + 16);
        v14 -= 16;
        if (*v12 >= v15)
        {
          v16 = (_QWORD *)(a1 + v14 + 48);
          goto LABEL_12;
        }
      }
      v16 = (_QWORD *)a1;
LABEL_12:
      *v16 = v12;
      v16[1] = v13;
      if (++v11 == 8)
        return v9 + 16 == a2;
    }
    v8 = (_QWORD **)v9;
    v10 += 16;
    v9 += 16;
    if (v9 == a2)
      return 1;
  }
}

__n128 std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithInteger<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,long long>(re::Serializer<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<long long const*,void *,true> const&,re::Pair<long long const*,void *,true> const&)#1} &,re::Pair<long long const*,void *,true>*>(__int128 *a1, uint64_t **a2, uint64_t **a3, _OWORD *a4)
{
  __n128 result;

  std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithInteger<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,long long>(re::Serializer<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<long long const*,void *,true> const&,re::Pair<long long const*,void *,true> const&)#1} &,re::Pair<long long const*,void *,true>*>(a1, a2, a3);
  if (**(_QWORD **)a4 < **a3)
  {
    result = *(__n128 *)a3;
    *(_OWORD *)a3 = *a4;
    *a4 = result;
    if (**a3 < **a2)
    {
      result = *(__n128 *)a2;
      *(_OWORD *)a2 = *(_OWORD *)a3;
      *(__n128 *)a3 = result;
      if (**a2 < **(_QWORD **)a1)
      {
        result = (__n128)*a1;
        *a1 = *(_OWORD *)a2;
        *(__n128 *)a2 = result;
      }
    }
  }
  return result;
}

__n128 std::__sort5[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithInteger<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,long long>(re::Serializer<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<long long const*,void *,true> const&,re::Pair<long long const*,void *,true> const&)#1} &,re::Pair<long long const*,void *,true>*>(__int128 *a1, uint64_t **a2, uint64_t **a3, __n128 *a4, __n128 *a5)
{
  __n128 result;

  result.n128_u64[0] = std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithInteger<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,long long>(re::Serializer<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<long long const*,void *,true> const&,re::Pair<long long const*,void *,true> const&)#1} &,re::Pair<long long const*,void *,true>*>(a1, a2, a3, a4).n128_u64[0];
  if (*(_QWORD *)a5->n128_u64[0] < *(_QWORD *)a4->n128_u64[0])
  {
    result = *a4;
    *a4 = *a5;
    *a5 = result;
    if (*(_QWORD *)a4->n128_u64[0] < **a3)
    {
      result = *(__n128 *)a3;
      *(__n128 *)a3 = *a4;
      *a4 = result;
      if (**a3 < **a2)
      {
        result = *(__n128 *)a2;
        *(_OWORD *)a2 = *(_OWORD *)a3;
        *(__n128 *)a3 = result;
        if (**a2 < **(_QWORD **)a1)
        {
          result = (__n128)*a1;
          *a1 = *(_OWORD *)a2;
          *(__n128 *)a2 = result;
        }
      }
    }
  }
  return result;
}

uint64_t **std::__partial_sort_impl[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithInteger<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,long long>(re::Serializer<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<long long const*,void *,true> const&,re::Pair<long long const*,void *,true> const&)#1} &,re::Pair<long long const*,void *,true>*,re::Pair<long long const*,void *,true>*>(uint64_t **a1, uint64_t **a2, uint64_t **a3, uint64_t a4)
{
  uint64_t **v6;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t **v12;
  uint64_t **v13;
  uint64_t **v14;
  __int128 v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t **v18;
  uint64_t **v19;
  uint64_t v20;
  uint64_t v21;
  __int128 v24;

  if (a1 != a2)
  {
    v6 = a2;
    v8 = (char *)a2 - (char *)a1;
    v9 = ((char *)a2 - (char *)a1) >> 4;
    if ((char *)a2 - (char *)a1 >= 17)
    {
      v10 = (unint64_t)(v9 - 2) >> 1;
      v11 = v10 + 1;
      v12 = &a1[2 * v10];
      do
      {
        std::__sift_down[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithInteger<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,long long>(re::Serializer<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<long long const*,void *,true> const&,re::Pair<long long const*,void *,true> const&)#1} &,re::Pair<long long const*,void *,true>*>((uint64_t)a1, a4, v9, v12);
        v12 -= 2;
        --v11;
      }
      while (v11);
    }
    v13 = v6;
    if (v6 != a3)
    {
      v14 = v6;
      do
      {
        if (**v14 < **a1)
        {
          v15 = *(_OWORD *)v14;
          *(_OWORD *)v14 = *(_OWORD *)a1;
          *(_OWORD *)a1 = v15;
          std::__sift_down[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithInteger<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,long long>(re::Serializer<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<long long const*,void *,true> const&,re::Pair<long long const*,void *,true> const&)#1} &,re::Pair<long long const*,void *,true>*>((uint64_t)a1, a4, v9, a1);
        }
        v14 += 2;
      }
      while (v14 != a3);
      v13 = a3;
    }
    if (v8 >= 17)
    {
      v16 = (unint64_t)v8 >> 4;
      do
      {
        v17 = 0;
        v24 = *(_OWORD *)a1;
        v18 = a1;
        do
        {
          v19 = &v18[2 * v17 + 2];
          v20 = (2 * v17) | 1;
          v21 = 2 * v17 + 2;
          if (v21 < v16 && **v19 < *v19[2])
          {
            v19 += 2;
            v20 = v21;
          }
          *(_OWORD *)v18 = *(_OWORD *)v19;
          v18 = v19;
          v17 = v20;
        }
        while (v20 <= (uint64_t)((unint64_t)(v16 - 2) >> 1));
        v6 -= 2;
        if (v19 == v6)
        {
          *(_OWORD *)v19 = v24;
        }
        else
        {
          *(_OWORD *)v19 = *(_OWORD *)v6;
          *(_OWORD *)v6 = v24;
          std::__sift_up[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithInteger<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,long long>(re::Serializer<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<long long const*,void *,true> const&,re::Pair<long long const*,void *,true> const&)#1} &,re::Pair<long long const*,void *,true>*>((uint64_t)a1, (uint64_t)(v19 + 2), a4, ((char *)(v19 + 2) - (char *)a1) >> 4);
        }
      }
      while (v16-- > 2);
    }
    return v13;
  }
  return a3;
}

uint64_t std::__sift_down[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithInteger<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,long long>(re::Serializer<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<long long const*,void *,true> const&,re::Pair<long long const*,void *,true> const&)#1} &,re::Pair<long long const*,void *,true>*>(uint64_t result, uint64_t a2, uint64_t a3, uint64_t **a4)
{
  uint64_t v4;
  int64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t **v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  BOOL v12;
  uint64_t *v13;
  uint64_t *v14;
  uint64_t **v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  BOOL v19;

  if (a3 >= 2)
  {
    v4 = (uint64_t)a4 - result;
    v5 = (unint64_t)(a3 - 2) >> 1;
    if (v5 >= ((uint64_t)a4 - result) >> 4)
    {
      v6 = v4 >> 3;
      v7 = (v4 >> 3) + 1;
      v8 = (uint64_t **)(result + 16 * v7);
      v9 = v6 + 2;
      if (v9 >= a3)
      {
        v10 = **v8;
      }
      else
      {
        v10 = **v8;
        v11 = *v8[2];
        v12 = v10 < v11;
        if (v10 <= v11)
          v10 = *v8[2];
        if (v12)
        {
          v8 += 2;
          v7 = v9;
        }
      }
      v13 = *a4;
      if (v10 >= **a4)
      {
        v14 = a4[1];
        do
        {
          v15 = a4;
          a4 = v8;
          *(_OWORD *)v15 = *(_OWORD *)v8;
          if (v5 < v7)
            break;
          v16 = (2 * v7) | 1;
          v8 = (uint64_t **)(result + 16 * v16);
          v7 = 2 * v7 + 2;
          if (v7 >= a3)
          {
            v17 = **v8;
            v7 = v16;
          }
          else
          {
            v17 = **v8;
            v18 = *v8[2];
            v19 = v17 < v18;
            if (v17 <= v18)
              v17 = *v8[2];
            if (v19)
              v8 += 2;
            else
              v7 = v16;
          }
        }
        while (v17 >= *v13);
        *a4 = v13;
        a4[1] = v14;
      }
    }
  }
  return result;
}

uint64_t std::__sift_up[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithInteger<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,long long>(re::Serializer<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<long long const*,void *,true> const&,re::Pair<long long const*,void *,true> const&)#1} &,re::Pair<long long const*,void *,true>*>(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unint64_t v4;
  unint64_t v5;
  _OWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  uint64_t v9;
  _OWORD *v10;

  v4 = a4 - 2;
  if (a4 >= 2)
  {
    v5 = v4 >> 1;
    v6 = (_OWORD *)(result + 16 * (v4 >> 1));
    v7 = (_QWORD *)(a2 - 16);
    v8 = *(_QWORD **)(a2 - 16);
    if (**(_QWORD **)v6 < *v8)
    {
      v9 = *(_QWORD *)(a2 - 8);
      do
      {
        v10 = v7;
        v7 = v6;
        *v10 = *v6;
        if (!v5)
          break;
        v5 = (v5 - 1) >> 1;
        v6 = (_OWORD *)(result + 16 * v5);
      }
      while (**(_QWORD **)v6 < *v8);
      *v7 = v8;
      v7[1] = v9;
    }
  }
  return result;
}

void std::__introsort<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithInteger<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,int>(re::Serializer<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<int const*,void *,true> const&,re::Pair<int const*,void *,true> const&)#1} &,re::Pair<int const*,void *,true>*,false>(int **a1, int **a2, uint64_t a3, uint64_t a4, char a5)
{
  int **v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  int **v15;
  int **v16;
  char v17;
  BOOL v18;
  __int128 *v19;
  int *v20;
  __int128 v21;
  __int128 v22;

_QWORD *std::__insertion_sort[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithInteger<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,int>(re::Serializer<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<int const*,void *,true> const&,re::Pair<int const*,void *,true> const&)#1} &,re::Pair<int const*,void *,true>*>(_QWORD *result, _QWORD *a2)
{
  _QWORD *v2;
  uint64_t v3;
  _QWORD *v4;
  _QWORD *v5;
  _DWORD *v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  _QWORD *v10;

  if (result != a2)
  {
    v2 = result + 2;
    if (result + 2 != a2)
    {
      v3 = 0;
      v4 = result;
      do
      {
        v5 = v2;
        v6 = (_DWORD *)v4[2];
        if (*v6 < *(_DWORD *)*v4)
        {
          v7 = v4[3];
          v8 = v3;
          while (1)
          {
            *(_OWORD *)((char *)result + v8 + 16) = *(_OWORD *)((char *)result + v8);
            if (!v8)
              break;
            v9 = **(_DWORD **)((char *)result + v8 - 16);
            v8 -= 16;
            if (*v6 >= v9)
            {
              v10 = (_QWORD *)((char *)result + v8 + 16);
              goto LABEL_10;
            }
          }
          v10 = result;
LABEL_10:
          *v10 = v6;
          v10[1] = v7;
        }
        v2 = v5 + 2;
        v3 += 16;
        v4 = v5;
      }
      while (v5 + 2 != a2);
    }
  }
  return result;
}

uint64_t std::__insertion_sort_unguarded[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithInteger<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,int>(re::Serializer<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<int const*,void *,true> const&,re::Pair<int const*,void *,true> const&)#1} &,re::Pair<int const*,void *,true>*>(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  _DWORD *v4;
  uint64_t v5;
  uint64_t v6;
  _DWORD *v7;

  if (result != a2)
  {
    v2 = result + 16;
    while (v2 != a2)
    {
      v3 = v2;
      v4 = *(_DWORD **)(result + 16);
      if (*v4 < **(_DWORD **)result)
      {
        v5 = *(_QWORD *)(result + 24);
        v6 = v3;
        do
        {
          *(_OWORD *)v6 = *(_OWORD *)(v6 - 16);
          v7 = *(_DWORD **)(v6 - 32);
          v6 -= 16;
        }
        while (*v4 < *v7);
        *(_QWORD *)v6 = v4;
        *(_QWORD *)(v6 + 8) = v5;
      }
      v2 = v3 + 16;
      result = v3;
    }
  }
  return result;
}

uint64_t std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithInteger<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,int>(re::Serializer<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<int const*,void *,true> const&,re::Pair<int const*,void *,true> const&)#1} &,re::Pair<int const*,void *,true>*>(__int128 *a1, int **a2, int **a3)
{
  int v3;
  int v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;

  v3 = **a2;
  v4 = **a3;
  if (v3 < **(_DWORD **)a1)
  {
    if (v4 < v3)
    {
      v5 = *a1;
      *a1 = *(_OWORD *)a3;
      *(_OWORD *)a3 = v5;
      return 1;
    }
    v8 = *a1;
    *a1 = *(_OWORD *)a2;
    *(_OWORD *)a2 = v8;
    if (**a3 >= **a2)
      return 1;
    v9 = *(_OWORD *)a2;
    *(_OWORD *)a2 = *(_OWORD *)a3;
    *(_OWORD *)a3 = v9;
    return 2;
  }
  if (v4 < v3)
  {
    v6 = *(_OWORD *)a2;
    *(_OWORD *)a2 = *(_OWORD *)a3;
    *(_OWORD *)a3 = v6;
    if (**a2 >= **(_DWORD **)a1)
      return 1;
    v7 = *a1;
    *a1 = *(_OWORD *)a2;
    *(_OWORD *)a2 = v7;
    return 2;
  }
  return 0;
}

int **std::__partition_with_equals_on_left[abi:nn180100]<std::_ClassicAlgPolicy,re::Pair<int const*,void *,true> *,BOOL re::internal::serializeDictionaryWithInteger<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,int>(re::Serializer<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<int const*,void *,true> const&,re::Pair<int const*,void *,true> const&)#1} &>(int **a1, int **a2)
{
  __int128 v2;
  int *v3;
  int v4;
  int **v5;
  int *v6;
  int **v7;
  _DWORD *v8;
  int v9;
  int *v10;
  _DWORD *v11;
  __int128 v13;

  v2 = *(_OWORD *)a1;
  v3 = *a1;
  v4 = **a1;
  if (v4 >= **(a2 - 2))
  {
    v7 = a1 + 2;
    do
    {
      v5 = v7;
      if (v7 >= a2)
        break;
      v7 += 2;
    }
    while (v4 >= **v5);
  }
  else
  {
    v5 = a1;
    do
    {
      v6 = v5[2];
      v5 += 2;
    }
    while (v4 >= *v6);
  }
  if (v5 < a2)
  {
    do
    {
      v8 = *(a2 - 2);
      a2 -= 2;
    }
    while (v4 < *v8);
  }
  while (v5 < a2)
  {
    v13 = *(_OWORD *)v5;
    *(_OWORD *)v5 = *(_OWORD *)a2;
    *(_OWORD *)a2 = v13;
    v9 = *v3;
    do
    {
      v10 = v5[2];
      v5 += 2;
    }
    while (v9 >= *v10);
    do
    {
      v11 = *(a2 - 2);
      a2 -= 2;
    }
    while (v9 < *v11);
  }
  if (v5 - 2 != a1)
    *(_OWORD *)a1 = *((_OWORD *)v5 - 1);
  *((_OWORD *)v5 - 1) = v2;
  return v5;
}

int **std::__partition_with_equals_on_right[abi:nn180100]<std::_ClassicAlgPolicy,re::Pair<int const*,void *,true> *,BOOL re::internal::serializeDictionaryWithInteger<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,int>(re::Serializer<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<int const*,void *,true> const&,re::Pair<int const*,void *,true> const&)#1} &>(int **a1, int **a2)
{
  uint64_t v2;
  __int128 v3;
  int *v4;
  int v5;
  int v6;
  int **v7;
  int **v8;
  _DWORD *v9;
  _DWORD *v10;
  int **v11;
  int **v12;
  __int128 v13;
  int v14;
  int *v15;
  _DWORD *v16;

  v2 = 0;
  v3 = *(_OWORD *)a1;
  v4 = *a1;
  v5 = **a1;
  do
  {
    v6 = *a1[v2 + 2];
    v2 += 2;
  }
  while (v6 < v5);
  v7 = &a1[v2];
  v8 = &a1[v2 - 2];
  if (v2 == 2)
  {
    do
    {
      if (v7 >= a2)
        break;
      v10 = *(a2 - 2);
      a2 -= 2;
    }
    while (*v10 >= v5);
  }
  else
  {
    do
    {
      v9 = *(a2 - 2);
      a2 -= 2;
    }
    while (*v9 >= v5);
  }
  if (v7 < a2)
  {
    v11 = &a1[v2];
    v12 = a2;
    do
    {
      v13 = *(_OWORD *)v11;
      *(_OWORD *)v11 = *(_OWORD *)v12;
      *(_OWORD *)v12 = v13;
      v14 = *v4;
      do
      {
        v15 = v11[2];
        v11 += 2;
      }
      while (*v15 < v14);
      do
      {
        v16 = *(v12 - 2);
        v12 -= 2;
      }
      while (*v16 >= v14);
    }
    while (v11 < v12);
    v8 = v11 - 2;
  }
  if (v8 != a1)
    *(_OWORD *)a1 = *(_OWORD *)v8;
  *(_OWORD *)v8 = v3;
  return v8;
}

BOOL std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithInteger<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,int>(re::Serializer<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<int const*,void *,true> const&,re::Pair<int const*,void *,true> const&)#1} &,re::Pair<int const*,void *,true>*>(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  _BOOL8 result;
  __int128 *v6;
  __int128 v7;
  _DWORD **v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  _DWORD *v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  _QWORD *v16;

  v4 = (a2 - a1) >> 4;
  result = 1;
  switch(v4)
  {
    case 0:
    case 1:
      return result;
    case 2:
      v6 = (__int128 *)(a2 - 16);
      if (**(_DWORD **)(a2 - 16) < **(_DWORD **)a1)
      {
        v7 = *(_OWORD *)a1;
        *(_OWORD *)a1 = *v6;
        *v6 = v7;
      }
      return result;
    case 3:
      std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithInteger<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,int>(re::Serializer<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<int const*,void *,true> const&,re::Pair<int const*,void *,true> const&)#1} &,re::Pair<int const*,void *,true>*>((__int128 *)a1, (int **)(a1 + 16), (int **)(a2 - 16));
      return 1;
    case 4:
      std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithInteger<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,int>(re::Serializer<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<int const*,void *,true> const&,re::Pair<int const*,void *,true> const&)#1} &,re::Pair<int const*,void *,true>*>((__int128 *)a1, (int **)(a1 + 16), (int **)(a1 + 32), (_OWORD *)(a2 - 16));
      return 1;
    case 5:
      std::__sort5[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithInteger<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,int>(re::Serializer<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<int const*,void *,true> const&,re::Pair<int const*,void *,true> const&)#1} &,re::Pair<int const*,void *,true>*>((__int128 *)a1, (int **)(a1 + 16), (int **)(a1 + 32), (__n128 *)(a1 + 48), (__n128 *)(a2 - 16));
      return 1;
    default:
      v8 = (_DWORD **)(a1 + 32);
      std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithInteger<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,int>(re::Serializer<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<int const*,void *,true> const&,re::Pair<int const*,void *,true> const&)#1} &,re::Pair<int const*,void *,true>*>((__int128 *)a1, (int **)(a1 + 16), (int **)(a1 + 32));
      v9 = a1 + 48;
      if (a1 + 48 == a2)
        return 1;
      v10 = 0;
      v11 = 0;
      break;
  }
  while (1)
  {
    v12 = *(_DWORD **)v9;
    if (**(_DWORD **)v9 < **v8)
    {
      v13 = *(_QWORD *)(v9 + 8);
      v14 = v10;
      while (1)
      {
        *(_OWORD *)(a1 + v14 + 48) = *(_OWORD *)(a1 + v14 + 32);
        if (v14 == -32)
          break;
        v15 = **(_DWORD **)(a1 + v14 + 16);
        v14 -= 16;
        if (*v12 >= v15)
        {
          v16 = (_QWORD *)(a1 + v14 + 48);
          goto LABEL_12;
        }
      }
      v16 = (_QWORD *)a1;
LABEL_12:
      *v16 = v12;
      v16[1] = v13;
      if (++v11 == 8)
        return v9 + 16 == a2;
    }
    v8 = (_DWORD **)v9;
    v10 += 16;
    v9 += 16;
    if (v9 == a2)
      return 1;
  }
}

__n128 std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithInteger<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,int>(re::Serializer<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<int const*,void *,true> const&,re::Pair<int const*,void *,true> const&)#1} &,re::Pair<int const*,void *,true>*>(__int128 *a1, int **a2, int **a3, _OWORD *a4)
{
  __n128 result;

  std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithInteger<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,int>(re::Serializer<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<int const*,void *,true> const&,re::Pair<int const*,void *,true> const&)#1} &,re::Pair<int const*,void *,true>*>(a1, a2, a3);
  if (**(_DWORD **)a4 < **a3)
  {
    result = *(__n128 *)a3;
    *(_OWORD *)a3 = *a4;
    *a4 = result;
    if (**a3 < **a2)
    {
      result = *(__n128 *)a2;
      *(_OWORD *)a2 = *(_OWORD *)a3;
      *(__n128 *)a3 = result;
      if (**a2 < **(_DWORD **)a1)
      {
        result = (__n128)*a1;
        *a1 = *(_OWORD *)a2;
        *(__n128 *)a2 = result;
      }
    }
  }
  return result;
}

__n128 std::__sort5[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithInteger<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,int>(re::Serializer<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<int const*,void *,true> const&,re::Pair<int const*,void *,true> const&)#1} &,re::Pair<int const*,void *,true>*>(__int128 *a1, int **a2, int **a3, __n128 *a4, __n128 *a5)
{
  __n128 result;

  result.n128_u64[0] = std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithInteger<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,int>(re::Serializer<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<int const*,void *,true> const&,re::Pair<int const*,void *,true> const&)#1} &,re::Pair<int const*,void *,true>*>(a1, a2, a3, a4).n128_u64[0];
  if (*(_DWORD *)a5->n128_u64[0] < *(_DWORD *)a4->n128_u64[0])
  {
    result = *a4;
    *a4 = *a5;
    *a5 = result;
    if (*(_DWORD *)a4->n128_u64[0] < **a3)
    {
      result = *(__n128 *)a3;
      *(__n128 *)a3 = *a4;
      *a4 = result;
      if (**a3 < **a2)
      {
        result = *(__n128 *)a2;
        *(_OWORD *)a2 = *(_OWORD *)a3;
        *(__n128 *)a3 = result;
        if (**a2 < **(_DWORD **)a1)
        {
          result = (__n128)*a1;
          *a1 = *(_OWORD *)a2;
          *(__n128 *)a2 = result;
        }
      }
    }
  }
  return result;
}

int **std::__partial_sort_impl[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithInteger<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,int>(re::Serializer<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<int const*,void *,true> const&,re::Pair<int const*,void *,true> const&)#1} &,re::Pair<int const*,void *,true>*,re::Pair<int const*,void *,true>*>(int **a1, int **a2, int **a3, uint64_t a4)
{
  int **v6;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  int **v12;
  int **v13;
  int **v14;
  __int128 v15;
  uint64_t v16;
  uint64_t v17;
  int **v18;
  int **v19;
  uint64_t v20;
  uint64_t v21;
  __int128 v24;

  if (a1 != a2)
  {
    v6 = a2;
    v8 = (char *)a2 - (char *)a1;
    v9 = ((char *)a2 - (char *)a1) >> 4;
    if ((char *)a2 - (char *)a1 >= 17)
    {
      v10 = (unint64_t)(v9 - 2) >> 1;
      v11 = v10 + 1;
      v12 = &a1[2 * v10];
      do
      {
        std::__sift_down[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithInteger<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,int>(re::Serializer<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<int const*,void *,true> const&,re::Pair<int const*,void *,true> const&)#1} &,re::Pair<int const*,void *,true>*>((uint64_t)a1, a4, v9, v12);
        v12 -= 2;
        --v11;
      }
      while (v11);
    }
    v13 = v6;
    if (v6 != a3)
    {
      v14 = v6;
      do
      {
        if (**v14 < **a1)
        {
          v15 = *(_OWORD *)v14;
          *(_OWORD *)v14 = *(_OWORD *)a1;
          *(_OWORD *)a1 = v15;
          std::__sift_down[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithInteger<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,int>(re::Serializer<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<int const*,void *,true> const&,re::Pair<int const*,void *,true> const&)#1} &,re::Pair<int const*,void *,true>*>((uint64_t)a1, a4, v9, a1);
        }
        v14 += 2;
      }
      while (v14 != a3);
      v13 = a3;
    }
    if (v8 >= 17)
    {
      v16 = (unint64_t)v8 >> 4;
      do
      {
        v17 = 0;
        v24 = *(_OWORD *)a1;
        v18 = a1;
        do
        {
          v19 = &v18[2 * v17 + 2];
          v20 = (2 * v17) | 1;
          v21 = 2 * v17 + 2;
          if (v21 < v16 && **v19 < *v19[2])
          {
            v19 += 2;
            v20 = v21;
          }
          *(_OWORD *)v18 = *(_OWORD *)v19;
          v18 = v19;
          v17 = v20;
        }
        while (v20 <= (uint64_t)((unint64_t)(v16 - 2) >> 1));
        v6 -= 2;
        if (v19 == v6)
        {
          *(_OWORD *)v19 = v24;
        }
        else
        {
          *(_OWORD *)v19 = *(_OWORD *)v6;
          *(_OWORD *)v6 = v24;
          std::__sift_up[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithInteger<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,int>(re::Serializer<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<int const*,void *,true> const&,re::Pair<int const*,void *,true> const&)#1} &,re::Pair<int const*,void *,true>*>((uint64_t)a1, (uint64_t)(v19 + 2), a4, ((char *)(v19 + 2) - (char *)a1) >> 4);
        }
      }
      while (v16-- > 2);
    }
    return v13;
  }
  return a3;
}

uint64_t std::__sift_down[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithInteger<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,int>(re::Serializer<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<int const*,void *,true> const&,re::Pair<int const*,void *,true> const&)#1} &,re::Pair<int const*,void *,true>*>(uint64_t result, uint64_t a2, uint64_t a3, int **a4)
{
  uint64_t v4;
  int64_t v5;
  uint64_t v6;
  uint64_t v7;
  int **v8;
  uint64_t v9;
  int v10;
  int v11;
  BOOL v12;
  int *v13;
  int *v14;
  int **v15;
  uint64_t v16;
  int v17;
  int v18;
  BOOL v19;

  if (a3 >= 2)
  {
    v4 = (uint64_t)a4 - result;
    v5 = (unint64_t)(a3 - 2) >> 1;
    if (v5 >= ((uint64_t)a4 - result) >> 4)
    {
      v6 = v4 >> 3;
      v7 = (v4 >> 3) + 1;
      v8 = (int **)(result + 16 * v7);
      v9 = v6 + 2;
      if (v9 >= a3)
      {
        v10 = **v8;
      }
      else
      {
        v10 = **v8;
        v11 = *v8[2];
        v12 = v10 < v11;
        if (v10 <= v11)
          v10 = *v8[2];
        if (v12)
        {
          v8 += 2;
          v7 = v9;
        }
      }
      v13 = *a4;
      if (v10 >= **a4)
      {
        v14 = a4[1];
        do
        {
          v15 = a4;
          a4 = v8;
          *(_OWORD *)v15 = *(_OWORD *)v8;
          if (v5 < v7)
            break;
          v16 = (2 * v7) | 1;
          v8 = (int **)(result + 16 * v16);
          v7 = 2 * v7 + 2;
          if (v7 >= a3)
          {
            v17 = **v8;
            v7 = v16;
          }
          else
          {
            v17 = **v8;
            v18 = *v8[2];
            v19 = v17 < v18;
            if (v17 <= v18)
              v17 = *v8[2];
            if (v19)
              v8 += 2;
            else
              v7 = v16;
          }
        }
        while (v17 >= *v13);
        *a4 = v13;
        a4[1] = v14;
      }
    }
  }
  return result;
}

uint64_t std::__sift_up[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithInteger<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,int>(re::Serializer<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<int const*,void *,true> const&,re::Pair<int const*,void *,true> const&)#1} &,re::Pair<int const*,void *,true>*>(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unint64_t v4;
  unint64_t v5;
  _OWORD *v6;
  _QWORD *v7;
  _DWORD *v8;
  uint64_t v9;
  _OWORD *v10;

  v4 = a4 - 2;
  if (a4 >= 2)
  {
    v5 = v4 >> 1;
    v6 = (_OWORD *)(result + 16 * (v4 >> 1));
    v7 = (_QWORD *)(a2 - 16);
    v8 = *(_DWORD **)(a2 - 16);
    if (**(_DWORD **)v6 < *v8)
    {
      v9 = *(_QWORD *)(a2 - 8);
      do
      {
        v10 = v7;
        v7 = v6;
        *v10 = *v6;
        if (!v5)
          break;
        v5 = (v5 - 1) >> 1;
        v6 = (_OWORD *)(result + 16 * v5);
      }
      while (**(_DWORD **)v6 < *v8);
      *v7 = v8;
      v7[1] = v9;
    }
  }
  return result;
}

void std::__introsort<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithInteger<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,short>(re::Serializer<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<short const*,void *,true> const&,re::Pair<short const*,void *,true> const&)#1} &,re::Pair<short const*,void *,true>*,false>(__int16 **a1, __int16 **a2, uint64_t a3, uint64_t a4, char a5)
{
  __int16 **v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  __int16 **v15;
  __int16 **v16;
  char v17;
  BOOL v18;
  __int16 **v19;
  __int16 *v20;
  __int128 v21;
  __int128 v22;

__int16 **std::__insertion_sort[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithInteger<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,short>(re::Serializer<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<short const*,void *,true> const&,re::Pair<short const*,void *,true> const&)#1} &,re::Pair<short const*,void *,true>*>(__int16 **result, __int16 **a2)
{
  __int16 **v2;
  uint64_t v3;
  __int16 **v4;
  __int16 **v5;
  __int16 *v6;
  __int16 *v7;
  uint64_t v8;
  int v9;
  __int16 **v10;

  if (result != a2)
  {
    v2 = result + 2;
    if (result + 2 != a2)
    {
      v3 = 0;
      v4 = result;
      do
      {
        v5 = v2;
        v6 = v4[2];
        if (*v6 < **v4)
        {
          v7 = v4[3];
          v8 = v3;
          while (1)
          {
            *(_OWORD *)((char *)result + v8 + 16) = *(_OWORD *)((char *)result + v8);
            if (!v8)
              break;
            v9 = **(__int16 **)((char *)result + v8 - 16);
            v8 -= 16;
            if (*v6 >= v9)
            {
              v10 = (__int16 **)((char *)result + v8 + 16);
              goto LABEL_10;
            }
          }
          v10 = result;
LABEL_10:
          *v10 = v6;
          v10[1] = v7;
        }
        v2 = v5 + 2;
        v3 += 16;
        v4 = v5;
      }
      while (v5 + 2 != a2);
    }
  }
  return result;
}

__int16 **std::__insertion_sort_unguarded[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithInteger<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,short>(re::Serializer<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<short const*,void *,true> const&,re::Pair<short const*,void *,true> const&)#1} &,re::Pair<short const*,void *,true>*>(__int16 **result, __int16 **a2)
{
  __int16 **v2;
  __int16 **v3;
  __int16 *v4;
  __int16 *v5;
  __int16 **v6;
  __int16 *v7;

  if (result != a2)
  {
    v2 = result + 2;
    while (v2 != a2)
    {
      v3 = v2;
      v4 = result[2];
      if (*v4 < **result)
      {
        v5 = result[3];
        v6 = v3;
        do
        {
          *(_OWORD *)v6 = *((_OWORD *)v6 - 1);
          v7 = *(v6 - 4);
          v6 -= 2;
        }
        while (*v4 < *v7);
        *v6 = v4;
        v6[1] = v5;
      }
      v2 = v3 + 2;
      result = v3;
    }
  }
  return result;
}

uint64_t std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithInteger<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,short>(re::Serializer<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<short const*,void *,true> const&,re::Pair<short const*,void *,true> const&)#1} &,re::Pair<short const*,void *,true>*>(__int16 **a1, _OWORD *a2, _OWORD *a3)
{
  int v3;
  int v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;

  v3 = **(__int16 **)a2;
  v4 = **(__int16 **)a3;
  if (v3 < **a1)
  {
    if (v4 < v3)
    {
      v5 = *(_OWORD *)a1;
      *(_OWORD *)a1 = *a3;
      *a3 = v5;
      return 1;
    }
    v8 = *(_OWORD *)a1;
    *(_OWORD *)a1 = *a2;
    *a2 = v8;
    if (**(__int16 **)a3 >= **(__int16 **)a2)
      return 1;
    v9 = *a2;
    *a2 = *a3;
    *a3 = v9;
    return 2;
  }
  if (v4 < v3)
  {
    v6 = *a2;
    *a2 = *a3;
    *a3 = v6;
    if (**(__int16 **)a2 >= **a1)
      return 1;
    v7 = *(_OWORD *)a1;
    *(_OWORD *)a1 = *a2;
    *a2 = v7;
    return 2;
  }
  return 0;
}

__int16 **std::__partition_with_equals_on_left[abi:nn180100]<std::_ClassicAlgPolicy,re::Pair<short const*,void *,true> *,BOOL re::internal::serializeDictionaryWithInteger<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,short>(re::Serializer<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<short const*,void *,true> const&,re::Pair<short const*,void *,true> const&)#1} &>(__int16 **a1, __int16 **a2)
{
  __int128 v2;
  __int16 *v3;
  int v4;
  __int16 **v5;
  __int16 *v6;
  __int16 **v7;
  __int16 *v8;
  int v9;
  __int16 *v10;
  __int16 *v11;
  __int128 v13;

  v2 = *(_OWORD *)a1;
  v3 = *a1;
  v4 = **a1;
  if (v4 >= **(a2 - 2))
  {
    v7 = a1 + 2;
    do
    {
      v5 = v7;
      if (v7 >= a2)
        break;
      v7 += 2;
    }
    while (v4 >= **v5);
  }
  else
  {
    v5 = a1;
    do
    {
      v6 = v5[2];
      v5 += 2;
    }
    while (v4 >= *v6);
  }
  if (v5 < a2)
  {
    do
    {
      v8 = *(a2 - 2);
      a2 -= 2;
    }
    while (v4 < *v8);
  }
  while (v5 < a2)
  {
    v13 = *(_OWORD *)v5;
    *(_OWORD *)v5 = *(_OWORD *)a2;
    *(_OWORD *)a2 = v13;
    v9 = *v3;
    do
    {
      v10 = v5[2];
      v5 += 2;
    }
    while (v9 >= *v10);
    do
    {
      v11 = *(a2 - 2);
      a2 -= 2;
    }
    while (v9 < *v11);
  }
  if (v5 - 2 != a1)
    *(_OWORD *)a1 = *((_OWORD *)v5 - 1);
  *((_OWORD *)v5 - 1) = v2;
  return v5;
}

__int16 **std::__partition_with_equals_on_right[abi:nn180100]<std::_ClassicAlgPolicy,re::Pair<short const*,void *,true> *,BOOL re::internal::serializeDictionaryWithInteger<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,short>(re::Serializer<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<short const*,void *,true> const&,re::Pair<short const*,void *,true> const&)#1} &>(__int16 **a1, __int16 **a2)
{
  uint64_t v2;
  __int128 v3;
  __int16 *v4;
  int v5;
  int v6;
  __int16 **v7;
  __int16 **v8;
  __int16 *v9;
  __int16 *v10;
  __int16 **v11;
  __int16 **v12;
  __int128 v13;
  int v14;
  __int16 *v15;
  __int16 *v16;

  v2 = 0;
  v3 = *(_OWORD *)a1;
  v4 = *a1;
  v5 = **a1;
  do
  {
    v6 = *a1[v2 + 2];
    v2 += 2;
  }
  while (v6 < v5);
  v7 = &a1[v2];
  v8 = &a1[v2 - 2];
  if (v2 == 2)
  {
    do
    {
      if (v7 >= a2)
        break;
      v10 = *(a2 - 2);
      a2 -= 2;
    }
    while (*v10 >= v5);
  }
  else
  {
    do
    {
      v9 = *(a2 - 2);
      a2 -= 2;
    }
    while (*v9 >= v5);
  }
  if (v7 < a2)
  {
    v11 = &a1[v2];
    v12 = a2;
    do
    {
      v13 = *(_OWORD *)v11;
      *(_OWORD *)v11 = *(_OWORD *)v12;
      *(_OWORD *)v12 = v13;
      v14 = *v4;
      do
      {
        v15 = v11[2];
        v11 += 2;
      }
      while (*v15 < v14);
      do
      {
        v16 = *(v12 - 2);
        v12 -= 2;
      }
      while (*v16 >= v14);
    }
    while (v11 < v12);
    v8 = v11 - 2;
  }
  if (v8 != a1)
    *(_OWORD *)a1 = *(_OWORD *)v8;
  *(_OWORD *)v8 = v3;
  return v8;
}

BOOL std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithInteger<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,short>(re::Serializer<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<short const*,void *,true> const&,re::Pair<short const*,void *,true> const&)#1} &,re::Pair<short const*,void *,true>*>(__n128 *a1, __int16 **a2)
{
  uint64_t v4;
  _BOOL8 result;
  __int16 **v6;
  __n128 v7;
  __int16 **v8;
  __int16 **v9;
  uint64_t v10;
  int v11;
  __int16 *v12;
  __int16 *v13;
  uint64_t v14;
  int v15;
  _QWORD *n128_u64;

  v4 = ((char *)a2 - (char *)a1) >> 4;
  result = 1;
  switch(v4)
  {
    case 0:
    case 1:
      return result;
    case 2:
      v6 = a2 - 2;
      if (**(a2 - 2) < *(__int16 *)a1->n128_u64[0])
      {
        v7 = *a1;
        *a1 = *(__n128 *)v6;
        *(__n128 *)v6 = v7;
      }
      return result;
    case 3:
      std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithInteger<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,short>(re::Serializer<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<short const*,void *,true> const&,re::Pair<short const*,void *,true> const&)#1} &,re::Pair<short const*,void *,true>*>((__int16 **)a1, (__n128 *)a1[1].n128_u64, (_OWORD *)a2 - 1);
      return 1;
    case 4:
      std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithInteger<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,short>(re::Serializer<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<short const*,void *,true> const&,re::Pair<short const*,void *,true> const&)#1} &,re::Pair<short const*,void *,true>*>((__int16 **)a1, a1 + 1, a1 + 2, (__n128 *)a2 - 1);
      return 1;
    case 5:
      std::__sort5[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithInteger<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,short>(re::Serializer<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<short const*,void *,true> const&,re::Pair<short const*,void *,true> const&)#1} &,re::Pair<short const*,void *,true>*>((__int16 **)a1, a1 + 1, a1 + 2, a1 + 3, (__n128 *)a2 - 1);
      return 1;
    default:
      v8 = (__int16 **)&a1[2];
      std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithInteger<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,short>(re::Serializer<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<short const*,void *,true> const&,re::Pair<short const*,void *,true> const&)#1} &,re::Pair<short const*,void *,true>*>((__int16 **)a1, (__n128 *)a1[1].n128_u64, (__n128 *)a1[2].n128_u64);
      v9 = (__int16 **)&a1[3];
      if (&a1[3] == (__n128 *)a2)
        return 1;
      v10 = 0;
      v11 = 0;
      break;
  }
  while (1)
  {
    v12 = *v9;
    if (**v9 < **v8)
    {
      v13 = v9[1];
      v14 = v10;
      while (1)
      {
        *(__n128 *)((char *)a1 + v14 + 48) = *(__n128 *)((char *)a1 + v14 + 32);
        if (v14 == -32)
          break;
        v15 = **(__int16 **)((char *)a1[1].n128_u64 + v14);
        v14 -= 16;
        if (*v12 >= v15)
        {
          n128_u64 = (unint64_t *)((char *)a1[3].n128_u64 + v14);
          goto LABEL_12;
        }
      }
      n128_u64 = a1->n128_u64;
LABEL_12:
      *n128_u64 = v12;
      n128_u64[1] = v13;
      if (++v11 == 8)
        return v9 + 2 == a2;
    }
    v8 = v9;
    v10 += 16;
    v9 += 2;
    if (v9 == a2)
      return 1;
  }
}

__n128 std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithInteger<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,short>(re::Serializer<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<short const*,void *,true> const&,re::Pair<short const*,void *,true> const&)#1} &,re::Pair<short const*,void *,true>*>(__int16 **a1, __n128 *a2, __n128 *a3, __n128 *a4)
{
  __n128 result;

  std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithInteger<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,short>(re::Serializer<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<short const*,void *,true> const&,re::Pair<short const*,void *,true> const&)#1} &,re::Pair<short const*,void *,true>*>(a1, a2, a3);
  if (*(__int16 *)a4->n128_u64[0] < *(__int16 *)a3->n128_u64[0])
  {
    result = *a3;
    *a3 = *a4;
    *a4 = result;
    if (*(__int16 *)a3->n128_u64[0] < *(__int16 *)a2->n128_u64[0])
    {
      result = *a2;
      *a2 = *a3;
      *a3 = result;
      if (*(__int16 *)a2->n128_u64[0] < **a1)
      {
        result = *(__n128 *)a1;
        *(__n128 *)a1 = *a2;
        *a2 = result;
      }
    }
  }
  return result;
}

__n128 std::__sort5[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithInteger<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,short>(re::Serializer<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<short const*,void *,true> const&,re::Pair<short const*,void *,true> const&)#1} &,re::Pair<short const*,void *,true>*>(__int16 **a1, __n128 *a2, __n128 *a3, __n128 *a4, __n128 *a5)
{
  __n128 result;

  result.n128_u64[0] = std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithInteger<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,short>(re::Serializer<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<short const*,void *,true> const&,re::Pair<short const*,void *,true> const&)#1} &,re::Pair<short const*,void *,true>*>(a1, a2, a3, a4).n128_u64[0];
  if (*(__int16 *)a5->n128_u64[0] < *(__int16 *)a4->n128_u64[0])
  {
    result = *a4;
    *a4 = *a5;
    *a5 = result;
    if (*(__int16 *)a4->n128_u64[0] < *(__int16 *)a3->n128_u64[0])
    {
      result = *a3;
      *a3 = *a4;
      *a4 = result;
      if (*(__int16 *)a3->n128_u64[0] < *(__int16 *)a2->n128_u64[0])
      {
        result = *a2;
        *a2 = *a3;
        *a3 = result;
        if (*(__int16 *)a2->n128_u64[0] < **a1)
        {
          result = *(__n128 *)a1;
          *(__n128 *)a1 = *a2;
          *a2 = result;
        }
      }
    }
  }
  return result;
}

__int16 **std::__partial_sort_impl[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithInteger<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,short>(re::Serializer<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<short const*,void *,true> const&,re::Pair<short const*,void *,true> const&)#1} &,re::Pair<short const*,void *,true>*,re::Pair<short const*,void *,true>*>(__int16 **a1, __int16 **a2, __int16 **a3, uint64_t a4)
{
  __int16 **v6;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  __int16 **v12;
  __int16 **v13;
  __int16 **v14;
  __int128 v15;
  uint64_t v16;
  uint64_t v17;
  __int16 **v18;
  __int16 **v19;
  uint64_t v20;
  uint64_t v21;
  __int128 v24;

  if (a1 != a2)
  {
    v6 = a2;
    v8 = (char *)a2 - (char *)a1;
    v9 = ((char *)a2 - (char *)a1) >> 4;
    if ((char *)a2 - (char *)a1 >= 17)
    {
      v10 = (unint64_t)(v9 - 2) >> 1;
      v11 = v10 + 1;
      v12 = &a1[2 * v10];
      do
      {
        std::__sift_down[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithInteger<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,short>(re::Serializer<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<short const*,void *,true> const&,re::Pair<short const*,void *,true> const&)#1} &,re::Pair<short const*,void *,true>*>((uint64_t)a1, a4, v9, v12);
        v12 -= 2;
        --v11;
      }
      while (v11);
    }
    v13 = v6;
    if (v6 != a3)
    {
      v14 = v6;
      do
      {
        if (**v14 < **a1)
        {
          v15 = *(_OWORD *)v14;
          *(_OWORD *)v14 = *(_OWORD *)a1;
          *(_OWORD *)a1 = v15;
          std::__sift_down[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithInteger<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,short>(re::Serializer<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<short const*,void *,true> const&,re::Pair<short const*,void *,true> const&)#1} &,re::Pair<short const*,void *,true>*>((uint64_t)a1, a4, v9, a1);
        }
        v14 += 2;
      }
      while (v14 != a3);
      v13 = a3;
    }
    if (v8 >= 17)
    {
      v16 = (unint64_t)v8 >> 4;
      do
      {
        v17 = 0;
        v24 = *(_OWORD *)a1;
        v18 = a1;
        do
        {
          v19 = &v18[2 * v17 + 2];
          v20 = (2 * v17) | 1;
          v21 = 2 * v17 + 2;
          if (v21 < v16 && **v19 < *v19[2])
          {
            v19 += 2;
            v20 = v21;
          }
          *(_OWORD *)v18 = *(_OWORD *)v19;
          v18 = v19;
          v17 = v20;
        }
        while (v20 <= (uint64_t)((unint64_t)(v16 - 2) >> 1));
        v6 -= 2;
        if (v19 == v6)
        {
          *(_OWORD *)v19 = v24;
        }
        else
        {
          *(_OWORD *)v19 = *(_OWORD *)v6;
          *(_OWORD *)v6 = v24;
          std::__sift_up[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithInteger<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,short>(re::Serializer<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<short const*,void *,true> const&,re::Pair<short const*,void *,true> const&)#1} &,re::Pair<short const*,void *,true>*>((uint64_t)a1, (uint64_t)(v19 + 2), a4, ((char *)(v19 + 2) - (char *)a1) >> 4);
        }
      }
      while (v16-- > 2);
    }
    return v13;
  }
  return a3;
}

uint64_t std::__sift_down[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithInteger<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,short>(re::Serializer<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<short const*,void *,true> const&,re::Pair<short const*,void *,true> const&)#1} &,re::Pair<short const*,void *,true>*>(uint64_t result, uint64_t a2, uint64_t a3, __int16 **a4)
{
  uint64_t v4;
  int64_t v5;
  uint64_t v6;
  uint64_t v7;
  __int16 **v8;
  uint64_t v9;
  int v10;
  int v11;
  BOOL v12;
  __int16 *v13;
  __int16 *v14;
  _OWORD *v15;
  uint64_t v16;
  int v17;
  int v18;
  BOOL v19;

  if (a3 >= 2)
  {
    v4 = (uint64_t)a4 - result;
    v5 = (unint64_t)(a3 - 2) >> 1;
    if (v5 >= ((uint64_t)a4 - result) >> 4)
    {
      v6 = v4 >> 3;
      v7 = (v4 >> 3) + 1;
      v8 = (__int16 **)(result + 16 * v7);
      v9 = v6 + 2;
      if (v9 >= a3)
      {
        LOWORD(v10) = **v8;
      }
      else
      {
        v10 = **v8;
        v11 = *v8[2];
        v12 = v10 < v11;
        if (v10 <= v11)
          LOWORD(v10) = *v8[2];
        if (v12)
        {
          v8 += 2;
          v7 = v9;
        }
      }
      v13 = *a4;
      if (**a4 <= (__int16)v10)
      {
        v14 = a4[1];
        do
        {
          v15 = a4;
          a4 = v8;
          *v15 = *(_OWORD *)v8;
          if (v5 < v7)
            break;
          v16 = (2 * v7) | 1;
          v8 = (__int16 **)(result + 16 * v16);
          v7 = 2 * v7 + 2;
          if (v7 >= a3)
          {
            LOWORD(v17) = **v8;
            v7 = v16;
          }
          else
          {
            v17 = **v8;
            v18 = *v8[2];
            v19 = v17 < v18;
            if (v17 <= v18)
              LOWORD(v17) = *v8[2];
            if (v19)
              v8 += 2;
            else
              v7 = v16;
          }
        }
        while (*v13 <= (__int16)v17);
        *a4 = v13;
        a4[1] = v14;
      }
    }
  }
  return result;
}

uint64_t std::__sift_up[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithInteger<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,short>(re::Serializer<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<short const*,void *,true> const&,re::Pair<short const*,void *,true> const&)#1} &,re::Pair<short const*,void *,true>*>(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unint64_t v4;
  unint64_t v5;
  _OWORD *v6;
  _QWORD *v7;
  __int16 *v8;
  uint64_t v9;
  _OWORD *v10;

  v4 = a4 - 2;
  if (a4 >= 2)
  {
    v5 = v4 >> 1;
    v6 = (_OWORD *)(result + 16 * (v4 >> 1));
    v7 = (_QWORD *)(a2 - 16);
    v8 = *(__int16 **)(a2 - 16);
    if (**(__int16 **)v6 < *v8)
    {
      v9 = *(_QWORD *)(a2 - 8);
      do
      {
        v10 = v7;
        v7 = v6;
        *v10 = *v6;
        if (!v5)
          break;
        v5 = (v5 - 1) >> 1;
        v6 = (_OWORD *)(result + 16 * v5);
      }
      while (**(__int16 **)v6 < *v8);
      *v7 = v8;
      v7[1] = v9;
    }
  }
  return result;
}

void std::__introsort<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithDynamicString<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>(re::Serializer<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<re::DynamicString const*,void *,true> const&,re::Pair<re::DynamicString const*,void *,true> const&)#1} &,re::Pair<re::DynamicString const*,void *,true>*,false>(uint64_t *a1, uint64_t *a2, uint64_t a3, uint64_t a4, char a5)
{
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t *v15;
  uint64_t *v16;
  char v17;
  BOOL v18;
  uint64_t *v19;
  uint64_t v20;
  __int128 v21;
  __int128 v22;

uint64_t std::__insertion_sort[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithDynamicString<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>(re::Serializer<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<re::DynamicString const*,void *,true> const&,re::Pair<re::DynamicString const*,void *,true> const&)#1} &,re::Pair<re::DynamicString const*,void *,true>*>(uint64_t result, uint64_t *a2)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t *v11;

  if ((uint64_t *)result != a2)
  {
    v3 = (uint64_t *)result;
    v4 = result + 16;
    if ((uint64_t *)(result + 16) != a2)
    {
      v5 = 0;
      v6 = (uint64_t *)result;
      do
      {
        v7 = (uint64_t *)v4;
        v8 = v6[2];
        result = re::DynamicString::operator<(v8, *v6);
        if ((_DWORD)result)
        {
          v9 = v6[3];
          v10 = v5;
          while (1)
          {
            *(_OWORD *)((char *)v3 + v10 + 16) = *(_OWORD *)((char *)v3 + v10);
            if (!v10)
              break;
            result = re::DynamicString::operator<(v8, *(uint64_t *)((char *)v3 + v10 - 16));
            v10 -= 16;
            if ((result & 1) == 0)
            {
              v11 = (uint64_t *)((char *)v3 + v10 + 16);
              goto LABEL_10;
            }
          }
          v11 = v3;
LABEL_10:
          *v11 = v8;
          v11[1] = v9;
        }
        v4 = (uint64_t)(v7 + 2);
        v5 += 16;
        v6 = v7;
      }
      while (v7 + 2 != a2);
    }
  }
  return result;
}

uint64_t std::__insertion_sort_unguarded[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithDynamicString<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>(re::Serializer<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<re::DynamicString const*,void *,true> const&,re::Pair<re::DynamicString const*,void *,true> const&)#1} &,re::Pair<re::DynamicString const*,void *,true>*>(uint64_t result, uint64_t a2)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t *v9;

  if (result != a2)
  {
    v3 = (uint64_t *)result;
    v4 = result + 16;
    while (v4 != a2)
    {
      v5 = (uint64_t *)v4;
      v6 = v3[2];
      result = re::DynamicString::operator<(v6, *v3);
      if ((_DWORD)result)
      {
        v7 = v3[3];
        v8 = v5;
        do
        {
          v9 = v8 - 2;
          *(_OWORD *)v8 = *((_OWORD *)v8 - 1);
          result = re::DynamicString::operator<(v6, *(v8 - 4));
          v8 = v9;
        }
        while ((result & 1) != 0);
        *v9 = v6;
        v9[1] = v7;
      }
      v4 = (uint64_t)(v5 + 2);
      v3 = v5;
    }
  }
  return result;
}

uint64_t std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithDynamicString<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>(re::Serializer<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<re::DynamicString const*,void *,true> const&,re::Pair<re::DynamicString const*,void *,true> const&)#1} &,re::Pair<re::DynamicString const*,void *,true>*>(uint64_t *a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t v6;
  char v7;
  uint64_t result;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;

  v6 = *a2;
  v7 = re::DynamicString::operator<(*a2, *a1);
  result = re::DynamicString::operator<(*a3, v6);
  if ((v7 & 1) == 0)
  {
    if (!(_DWORD)result)
      return result;
    v10 = *(_OWORD *)a2;
    *(_OWORD *)a2 = *(_OWORD *)a3;
    *(_OWORD *)a3 = v10;
    if (!re::DynamicString::operator<(*a2, *a1))
      return 1;
    v11 = *(_OWORD *)a1;
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(_OWORD *)a2 = v11;
    return 2;
  }
  if (!(_DWORD)result)
  {
    v12 = *(_OWORD *)a1;
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(_OWORD *)a2 = v12;
    if (!re::DynamicString::operator<(*a3, *a2))
      return 1;
    v13 = *(_OWORD *)a2;
    *(_OWORD *)a2 = *(_OWORD *)a3;
    *(_OWORD *)a3 = v13;
    return 2;
  }
  v9 = *(_OWORD *)a1;
  *(_OWORD *)a1 = *(_OWORD *)a3;
  *(_OWORD *)a3 = v9;
  return 1;
}

uint64_t *std::__partition_with_equals_on_left[abi:nn180100]<std::_ClassicAlgPolicy,re::Pair<re::DynamicString const*,void *,true> *,BOOL re::internal::serializeDictionaryWithDynamicString<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>(re::Serializer<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<re::DynamicString const*,void *,true> const&,re::Pair<re::DynamicString const*,void *,true> const&)#1} &>(uint64_t *a1, uint64_t *a2)
{
  uint64_t *v2;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  __int128 v12;
  __int128 v13;

  v2 = a2;
  v12 = *(_OWORD *)a1;
  v4 = *a1;
  if ((re::DynamicString::operator<(*a1, *(a2 - 2)) & 1) != 0)
  {
    v5 = a1;
    do
    {
      v6 = v5[2];
      v5 += 2;
    }
    while ((re::DynamicString::operator<(v4, v6) & 1) == 0);
  }
  else
  {
    v7 = a1 + 2;
    do
    {
      v5 = v7;
      if (v7 >= v2)
        break;
      v7 += 2;
    }
    while (!re::DynamicString::operator<(v4, *v5));
  }
  if (v5 < v2)
  {
    do
    {
      v8 = *(v2 - 2);
      v2 -= 2;
    }
    while ((re::DynamicString::operator<(v4, v8) & 1) != 0);
  }
  while (v5 < v2)
  {
    v13 = *(_OWORD *)v5;
    *(_OWORD *)v5 = *(_OWORD *)v2;
    *(_OWORD *)v2 = v13;
    do
    {
      v9 = v5[2];
      v5 += 2;
    }
    while (!re::DynamicString::operator<(v4, v9));
    do
    {
      v10 = *(v2 - 2);
      v2 -= 2;
    }
    while ((re::DynamicString::operator<(v4, v10) & 1) != 0);
  }
  if (v5 - 2 != a1)
    *(_OWORD *)a1 = *((_OWORD *)v5 - 1);
  *((_OWORD *)v5 - 1) = v12;
  return v5;
}

__int128 *std::__partition_with_equals_on_right[abi:nn180100]<std::_ClassicAlgPolicy,re::Pair<re::DynamicString const*,void *,true> *,BOOL re::internal::serializeDictionaryWithDynamicString<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>(re::Serializer<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<re::DynamicString const*,void *,true> const&,re::Pair<re::DynamicString const*,void *,true> const&)#1} &>(__int128 *a1, __int128 *a2)
{
  uint64_t v4;
  uint64_t v5;
  char v6;
  __int128 *v7;
  __int128 *v8;
  uint64_t v9;
  uint64_t v10;
  __int128 *v11;
  __int128 *v12;
  __int128 v13;
  uint64_t v14;
  uint64_t v15;
  __int128 v17;

  v4 = 0;
  v17 = *a1;
  v5 = *(_QWORD *)a1;
  do
    v6 = re::DynamicString::operator<(*(_QWORD *)&a1[++v4], v5);
  while ((v6 & 1) != 0);
  v7 = &a1[v4];
  v8 = &a1[v4 - 1];
  if (v4 == 1)
  {
    do
    {
      if (v7 >= a2)
        break;
      v10 = *((_QWORD *)a2-- - 2);
    }
    while ((re::DynamicString::operator<(v10, v5) & 1) == 0);
  }
  else
  {
    do
      v9 = *((_QWORD *)a2-- - 2);
    while (!re::DynamicString::operator<(v9, v5));
  }
  if (v7 < a2)
  {
    v11 = &a1[v4];
    v12 = a2;
    do
    {
      v13 = *v11;
      *v11 = *v12;
      *v12 = v13;
      do
        v14 = *((_QWORD *)v11++ + 2);
      while ((re::DynamicString::operator<(v14, v5) & 1) != 0);
      do
        v15 = *((_QWORD *)v12-- - 2);
      while (!re::DynamicString::operator<(v15, v5));
    }
    while (v11 < v12);
    v8 = v11 - 1;
  }
  if (v8 != a1)
    *a1 = *v8;
  *v8 = v17;
  return v8;
}

BOOL std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithDynamicString<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>(re::Serializer<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<re::DynamicString const*,void *,true> const&,re::Pair<re::DynamicString const*,void *,true> const&)#1} &,re::Pair<re::DynamicString const*,void *,true>*>(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;
  _BOOL8 result;
  uint64_t *v6;
  __int128 v7;
  uint64_t *v8;
  uint64_t *v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t *v16;

  v4 = ((char *)a2 - (char *)a1) >> 4;
  result = 1;
  switch(v4)
  {
    case 0:
    case 1:
      return result;
    case 2:
      v6 = a2 - 2;
      if (re::DynamicString::operator<(*(a2 - 2), *a1))
      {
        v7 = *(_OWORD *)a1;
        *(_OWORD *)a1 = *(_OWORD *)v6;
        *(_OWORD *)v6 = v7;
      }
      return 1;
    case 3:
      std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithDynamicString<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>(re::Serializer<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<re::DynamicString const*,void *,true> const&,re::Pair<re::DynamicString const*,void *,true> const&)#1} &,re::Pair<re::DynamicString const*,void *,true>*>(a1, a1 + 2, a2 - 2);
      return 1;
    case 4:
      std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithDynamicString<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>(re::Serializer<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<re::DynamicString const*,void *,true> const&,re::Pair<re::DynamicString const*,void *,true> const&)#1} &,re::Pair<re::DynamicString const*,void *,true>*>(a1, a1 + 2, a1 + 4, a2 - 2);
      return 1;
    case 5:
      std::__sort5[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithDynamicString<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>(re::Serializer<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<re::DynamicString const*,void *,true> const&,re::Pair<re::DynamicString const*,void *,true> const&)#1} &,re::Pair<re::DynamicString const*,void *,true>*>(a1, a1 + 2, a1 + 4, a1 + 6, a2 - 2);
      return 1;
    default:
      v8 = a1 + 4;
      std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithDynamicString<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>(re::Serializer<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<re::DynamicString const*,void *,true> const&,re::Pair<re::DynamicString const*,void *,true> const&)#1} &,re::Pair<re::DynamicString const*,void *,true>*>(a1, a1 + 2, a1 + 4);
      v9 = a1 + 6;
      if (a1 + 6 == a2)
        return 1;
      v10 = 0;
      v11 = 0;
      break;
  }
  while (1)
  {
    v12 = *v9;
    if (re::DynamicString::operator<(*v9, *v8))
    {
      v13 = v9[1];
      v14 = v10;
      while (1)
      {
        v15 = (char *)a1 + v14;
        *(_OWORD *)((char *)a1 + v14 + 48) = *(_OWORD *)((char *)a1 + v14 + 32);
        if (v14 == -32)
          break;
        v14 -= 16;
        if ((re::DynamicString::operator<(v12, *((_QWORD *)v15 + 2)) & 1) == 0)
        {
          v16 = (uint64_t *)((char *)a1 + v14 + 48);
          goto LABEL_12;
        }
      }
      v16 = a1;
LABEL_12:
      *v16 = v12;
      v16[1] = v13;
      if (++v11 == 8)
        return v9 + 2 == a2;
    }
    v8 = v9;
    v10 += 16;
    v9 += 2;
    if (v9 == a2)
      return 1;
  }
}

__n128 std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithDynamicString<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>(re::Serializer<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<re::DynamicString const*,void *,true> const&,re::Pair<re::DynamicString const*,void *,true> const&)#1} &,re::Pair<re::DynamicString const*,void *,true>*>(uint64_t *a1, uint64_t *a2, uint64_t *a3, uint64_t *a4)
{
  __n128 result;
  __int128 v9;
  __int128 v10;

  std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithDynamicString<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>(re::Serializer<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<re::DynamicString const*,void *,true> const&,re::Pair<re::DynamicString const*,void *,true> const&)#1} &,re::Pair<re::DynamicString const*,void *,true>*>(a1, a2, a3);
  if (re::DynamicString::operator<(*a4, *a3))
  {
    v9 = *(_OWORD *)a3;
    *(_OWORD *)a3 = *(_OWORD *)a4;
    *(_OWORD *)a4 = v9;
    if (re::DynamicString::operator<(*a3, *a2))
    {
      v10 = *(_OWORD *)a2;
      *(_OWORD *)a2 = *(_OWORD *)a3;
      *(_OWORD *)a3 = v10;
      if (re::DynamicString::operator<(*a2, *a1))
      {
        result = *(__n128 *)a1;
        *(_OWORD *)a1 = *(_OWORD *)a2;
        *(__n128 *)a2 = result;
      }
    }
  }
  return result;
}

__n128 std::__sort5[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithDynamicString<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>(re::Serializer<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<re::DynamicString const*,void *,true> const&,re::Pair<re::DynamicString const*,void *,true> const&)#1} &,re::Pair<re::DynamicString const*,void *,true>*>(uint64_t *a1, uint64_t *a2, uint64_t *a3, uint64_t *a4, uint64_t *a5)
{
  __n128 result;
  __int128 v11;
  __int128 v12;
  __int128 v13;

  std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithDynamicString<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>(re::Serializer<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<re::DynamicString const*,void *,true> const&,re::Pair<re::DynamicString const*,void *,true> const&)#1} &,re::Pair<re::DynamicString const*,void *,true>*>(a1, a2, a3, a4);
  if (re::DynamicString::operator<(*a5, *a4))
  {
    v11 = *(_OWORD *)a4;
    *(_OWORD *)a4 = *(_OWORD *)a5;
    *(_OWORD *)a5 = v11;
    if (re::DynamicString::operator<(*a4, *a3))
    {
      v12 = *(_OWORD *)a3;
      *(_OWORD *)a3 = *(_OWORD *)a4;
      *(_OWORD *)a4 = v12;
      if (re::DynamicString::operator<(*a3, *a2))
      {
        v13 = *(_OWORD *)a2;
        *(_OWORD *)a2 = *(_OWORD *)a3;
        *(_OWORD *)a3 = v13;
        if (re::DynamicString::operator<(*a2, *a1))
        {
          result = *(__n128 *)a1;
          *(_OWORD *)a1 = *(_OWORD *)a2;
          *(__n128 *)a2 = result;
        }
      }
    }
  }
  return result;
}

uint64_t *std::__partial_sort_impl[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithDynamicString<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>(re::Serializer<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<re::DynamicString const*,void *,true> const&,re::Pair<re::DynamicString const*,void *,true> const&)#1} &,re::Pair<re::DynamicString const*,void *,true>*,re::Pair<re::DynamicString const*,void *,true>*>(uint64_t *a1, uint64_t *a2, uint64_t *a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t *v12;
  uint64_t *v13;
  uint64_t *v14;
  __int128 v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t *v18;
  __int128 v21;

  if (a1 != a2)
  {
    v8 = (char *)a2 - (char *)a1;
    v9 = ((char *)a2 - (char *)a1) >> 4;
    if ((char *)a2 - (char *)a1 >= 17)
    {
      v10 = (unint64_t)(v9 - 2) >> 1;
      v11 = v10 + 1;
      v12 = &a1[2 * v10];
      do
      {
        std::__sift_down[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithDynamicString<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>(re::Serializer<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<re::DynamicString const*,void *,true> const&,re::Pair<re::DynamicString const*,void *,true> const&)#1} &,re::Pair<re::DynamicString const*,void *,true>*>((uint64_t)a1, a4, v9, v12);
        v12 -= 2;
        --v11;
      }
      while (v11);
    }
    v13 = a2;
    if (a2 != a3)
    {
      v14 = a2;
      do
      {
        if (re::DynamicString::operator<(*v14, *a1))
        {
          v15 = *(_OWORD *)v14;
          *(_OWORD *)v14 = *(_OWORD *)a1;
          *(_OWORD *)a1 = v15;
          std::__sift_down[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithDynamicString<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>(re::Serializer<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<re::DynamicString const*,void *,true> const&,re::Pair<re::DynamicString const*,void *,true> const&)#1} &,re::Pair<re::DynamicString const*,void *,true>*>((uint64_t)a1, a4, v9, a1);
        }
        v14 += 2;
      }
      while (v14 != a3);
      v13 = a3;
    }
    if (v8 >= 17)
    {
      v16 = (unint64_t)v8 >> 4;
      v17 = a2 - 2;
      do
      {
        v21 = *(_OWORD *)a1;
        v18 = std::__floyd_sift_down[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithDynamicString<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>(re::Serializer<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<re::DynamicString const*,void *,true> const&,re::Pair<re::DynamicString const*,void *,true> const&)#1} &,re::Pair<re::DynamicString const*,void *,true>*>(a1, a4, v16);
        if (v17 == v18)
        {
          *(_OWORD *)v18 = v21;
        }
        else
        {
          *(_OWORD *)v18 = *(_OWORD *)v17;
          *(_OWORD *)v17 = v21;
          std::__sift_up[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithDynamicString<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>(re::Serializer<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<re::DynamicString const*,void *,true> const&,re::Pair<re::DynamicString const*,void *,true> const&)#1} &,re::Pair<re::DynamicString const*,void *,true>*>((uint64_t)a1, (uint64_t)(v18 + 2), a4, ((char *)(v18 + 2) - (char *)a1) >> 4);
        }
        v17 -= 2;
      }
      while (v16-- > 2);
    }
    return v13;
  }
  return a3;
}

uint64_t std::__sift_down[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithDynamicString<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>(re::Serializer<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<re::DynamicString const*,void *,true> const&,re::Pair<re::DynamicString const*,void *,true> const&)#1} &,re::Pair<re::DynamicString const*,void *,true>*>(uint64_t result, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  unint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  BOOL v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  int v24;
  BOOL v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;

  v4 = a3 - 2;
  if (a3 >= 2)
  {
    v5 = a4;
    v6 = result;
    v7 = v4 >> 1;
    if ((uint64_t)(v4 >> 1) >= ((uint64_t)a4 - result) >> 4)
    {
      v8 = a3;
      v9 = ((uint64_t)a4 - result) >> 3;
      v10 = v9 + 1;
      v11 = (uint64_t *)(result + 16 * (v9 + 1));
      v12 = v9 + 2;
      if (v9 + 2 >= a3)
      {
        v17 = *v11;
      }
      else
      {
        v13 = *v11;
        v14 = v11[2];
        v15 = re::DynamicString::operator<(*v11, v14);
        v16 = v15 == 0;
        if (v15)
          v17 = v14;
        else
          v17 = v13;
        if (!v16)
        {
          v11 += 2;
          v10 = v12;
        }
      }
      v18 = *v5;
      result = re::DynamicString::operator<(v17, *v5);
      if ((result & 1) == 0)
      {
        v27 = v5[1];
        v28 = v8;
        do
        {
          v19 = v5;
          v5 = v11;
          *(_OWORD *)v19 = *(_OWORD *)v11;
          if (v7 < v10)
            break;
          v20 = (2 * v10) | 1;
          v11 = (uint64_t *)(v6 + 16 * v20);
          v21 = 2 * v10 + 2;
          if (v21 >= v8)
          {
            v26 = *v11;
            v10 = (2 * v10) | 1;
          }
          else
          {
            v22 = *v11;
            v23 = v11[2];
            v24 = re::DynamicString::operator<(*v11, v23);
            v25 = v24 == 0;
            v26 = v24 ? v23 : v22;
            if (!v25)
              v11 += 2;
            v8 = v28;
            v10 = v25 ? v20 : v21;
          }
          result = re::DynamicString::operator<(v26, v18);
        }
        while (!(_DWORD)result);
        *v5 = v18;
        v5[1] = v27;
      }
    }
  }
  return result;
}

uint64_t *std::__floyd_sift_down[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithDynamicString<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>(re::Serializer<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<re::DynamicString const*,void *,true> const&,re::Pair<re::DynamicString const*,void *,true> const&)#1} &,re::Pair<re::DynamicString const*,void *,true>*>(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;

  v5 = 0;
  v6 = a3 - 2;
  if (a3 < 2)
    v6 = a3 - 1;
  v7 = v6 >> 1;
  do
  {
    v8 = &a1[2 * v5 + 2];
    v9 = (2 * v5) | 1;
    v10 = 2 * v5 + 2;
    if (v10 < a3 && re::DynamicString::operator<(*v8, a1[2 * v5 + 4]))
    {
      v8 += 2;
      v9 = v10;
    }
    *(_OWORD *)a1 = *(_OWORD *)v8;
    a1 = v8;
    v5 = v9;
  }
  while (v9 <= v7);
  return v8;
}

uint64_t std::__sift_up[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithDynamicString<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>(re::Serializer<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<re::DynamicString const*,void *,true> const&,re::Pair<re::DynamicString const*,void *,true> const&)#1} &,re::Pair<re::DynamicString const*,void *,true>*>(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unint64_t v4;
  uint64_t v6;
  unint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t *v12;

  v4 = a4 - 2;
  if (a4 >= 2)
  {
    v6 = result;
    v7 = v4 >> 1;
    v8 = (uint64_t *)(result + 16 * (v4 >> 1));
    v10 = (uint64_t *)(a2 - 16);
    v9 = *(_QWORD *)(a2 - 16);
    result = re::DynamicString::operator<(*v8, v9);
    if ((_DWORD)result)
    {
      v11 = *(_QWORD *)(a2 - 8);
      do
      {
        v12 = v10;
        v10 = v8;
        *(_OWORD *)v12 = *(_OWORD *)v8;
        if (!v7)
          break;
        v7 = (v7 - 1) >> 1;
        v8 = (uint64_t *)(v6 + 16 * v7);
        result = re::DynamicString::operator<(*v8, v9);
      }
      while ((result & 1) != 0);
      *v10 = v9;
      v10[1] = v11;
    }
  }
  return result;
}

void std::__introsort<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithStringID<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>(re::Serializer<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<re::StringID const*,void *,true> const&,re::Pair<re::StringID const*,void *,true> const&)#1} &,re::Pair<re::StringID const*,void *,true>*,false>(__n128 *a1, __n128 *a2, uint64_t a3, uint64_t a4, char a5)
{
  __n128 *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  __int128 *v15;
  __int128 *v16;
  char v17;
  BOOL v18;
  __int128 *v19;
  _QWORD *v20;
  __int128 v21;
  __int128 v22;

_QWORD *std::__insertion_sort[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithStringID<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>(re::Serializer<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<re::StringID const*,void *,true> const&,re::Pair<re::StringID const*,void *,true> const&)#1} &,re::Pair<re::StringID const*,void *,true>*>(_QWORD *result, _QWORD *a2)
{
  _QWORD *v2;
  uint64_t v3;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  _QWORD *v10;

  if (result != a2)
  {
    v2 = result + 2;
    if (result + 2 != a2)
    {
      v3 = 0;
      v4 = result;
      do
      {
        v5 = v2;
        v6 = (_QWORD *)v4[2];
        if (*v6 >> 1 < *(_QWORD *)*v4 >> 1)
        {
          v7 = v4[3];
          v8 = v3;
          while (1)
          {
            *(_OWORD *)((char *)result + v8 + 16) = *(_OWORD *)((char *)result + v8);
            if (!v8)
              break;
            v9 = **(_QWORD **)((char *)result + v8 - 16);
            v8 -= 16;
            if (*v6 >> 1 >= v9 >> 1)
            {
              v10 = (_QWORD *)((char *)result + v8 + 16);
              goto LABEL_10;
            }
          }
          v10 = result;
LABEL_10:
          *v10 = v6;
          v10[1] = v7;
        }
        v2 = v5 + 2;
        v3 += 16;
        v4 = v5;
      }
      while (v5 + 2 != a2);
    }
  }
  return result;
}

uint64_t std::__insertion_sort_unguarded[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithStringID<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>(re::Serializer<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<re::StringID const*,void *,true> const&,re::Pair<re::StringID const*,void *,true> const&)#1} &,re::Pair<re::StringID const*,void *,true>*>(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;

  if (result != a2)
  {
    v2 = result + 16;
    while (v2 != a2)
    {
      v3 = v2;
      v4 = *(_QWORD **)(result + 16);
      if (*v4 >> 1 < **(_QWORD **)result >> 1)
      {
        v5 = *(_QWORD *)(result + 24);
        v6 = v3;
        do
        {
          *(_OWORD *)v6 = *(_OWORD *)(v6 - 16);
          v7 = *(_QWORD **)(v6 - 32);
          v6 -= 16;
        }
        while (*v4 >> 1 < *v7 >> 1);
        *(_QWORD *)v6 = v4;
        *(_QWORD *)(v6 + 8) = v5;
      }
      v2 = v3 + 16;
      result = v3;
    }
  }
  return result;
}

uint64_t std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithStringID<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>(re::Serializer<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<re::StringID const*,void *,true> const&,re::Pair<re::StringID const*,void *,true> const&)#1} &,re::Pair<re::StringID const*,void *,true>*>(__int128 *a1, _QWORD **a2, _QWORD **a3)
{
  unint64_t v3;
  unint64_t v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;

  v3 = **a2 >> 1;
  v4 = **a3 >> 1;
  if (v3 < **(_QWORD **)a1 >> 1)
  {
    if (v4 < v3)
    {
      v5 = *a1;
      *a1 = *(_OWORD *)a3;
      *(_OWORD *)a3 = v5;
      return 1;
    }
    v8 = *a1;
    *a1 = *(_OWORD *)a2;
    *(_OWORD *)a2 = v8;
    if (**a3 >> 1 >= **a2 >> 1)
      return 1;
    v9 = *(_OWORD *)a2;
    *(_OWORD *)a2 = *(_OWORD *)a3;
    *(_OWORD *)a3 = v9;
    return 2;
  }
  if (v4 < v3)
  {
    v6 = *(_OWORD *)a2;
    *(_OWORD *)a2 = *(_OWORD *)a3;
    *(_OWORD *)a3 = v6;
    if (**a2 >> 1 >= **(_QWORD **)a1 >> 1)
      return 1;
    v7 = *a1;
    *a1 = *(_OWORD *)a2;
    *(_OWORD *)a2 = v7;
    return 2;
  }
  return 0;
}

_OWORD *std::__partition_with_equals_on_left[abi:nn180100]<std::_ClassicAlgPolicy,re::Pair<re::StringID const*,void *,true> *,BOOL re::internal::serializeDictionaryWithStringID<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>(re::Serializer<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<re::StringID const*,void *,true> const&,re::Pair<re::StringID const*,void *,true> const&)#1} &>(_OWORD *a1, _OWORD *a2)
{
  __int128 v2;
  _QWORD *v3;
  unint64_t v4;
  _OWORD *v5;
  _QWORD *v6;
  _OWORD *v7;
  _QWORD *v8;
  unint64_t v9;
  _QWORD *v10;
  _QWORD *v11;
  __int128 v13;

  v2 = *a1;
  v3 = *(_QWORD **)a1;
  v4 = **(_QWORD **)a1 >> 1;
  if (v4 >= **((_QWORD **)a2 - 2) >> 1)
  {
    v7 = a1 + 1;
    do
    {
      v5 = v7;
      if (v7 >= a2)
        break;
      ++v7;
    }
    while (v4 >= **(_QWORD **)v5 >> 1);
  }
  else
  {
    v5 = a1;
    do
      v6 = (_QWORD *)*((_QWORD *)v5++ + 2);
    while (v4 >= *v6 >> 1);
  }
  if (v5 < a2)
  {
    do
      v8 = (_QWORD *)*((_QWORD *)a2-- - 2);
    while (v4 < *v8 >> 1);
  }
  while (v5 < a2)
  {
    v13 = *v5;
    *v5 = *a2;
    *a2 = v13;
    v9 = *v3 >> 1;
    do
      v10 = (_QWORD *)*((_QWORD *)v5++ + 2);
    while (v9 >= *v10 >> 1);
    do
      v11 = (_QWORD *)*((_QWORD *)a2-- - 2);
    while (v9 < *v11 >> 1);
  }
  if (v5 - 1 != a1)
    *a1 = *(v5 - 1);
  *(v5 - 1) = v2;
  return v5;
}

__int128 *std::__partition_with_equals_on_right[abi:nn180100]<std::_ClassicAlgPolicy,re::Pair<re::StringID const*,void *,true> *,BOOL re::internal::serializeDictionaryWithStringID<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>(re::Serializer<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<re::StringID const*,void *,true> const&,re::Pair<re::StringID const*,void *,true> const&)#1} &>(__int128 *a1, __int128 *a2)
{
  uint64_t v2;
  __int128 v3;
  _QWORD *v4;
  unint64_t v5;
  unint64_t v6;
  __int128 *v7;
  __int128 *v8;
  _QWORD *v9;
  _QWORD *v10;
  __int128 *v11;
  __int128 *v12;
  __int128 v13;
  unint64_t v14;
  _QWORD *v15;
  _QWORD *v16;

  v2 = 0;
  v3 = *a1;
  v4 = *(_QWORD **)a1;
  v5 = **(_QWORD **)a1 >> 1;
  do
    v6 = **(_QWORD **)&a1[++v2];
  while (v5 > v6 >> 1);
  v7 = &a1[v2];
  v8 = &a1[v2 - 1];
  if (v2 == 1)
  {
    do
    {
      if (v7 >= a2)
        break;
      v10 = (_QWORD *)*((_QWORD *)a2-- - 2);
    }
    while (v5 <= *v10 >> 1);
  }
  else
  {
    do
      v9 = (_QWORD *)*((_QWORD *)a2-- - 2);
    while (v5 <= *v9 >> 1);
  }
  if (v7 < a2)
  {
    v11 = &a1[v2];
    v12 = a2;
    do
    {
      v13 = *v11;
      *v11 = *v12;
      *v12 = v13;
      v14 = *v4 >> 1;
      do
        v15 = (_QWORD *)*((_QWORD *)v11++ + 2);
      while (v14 > *v15 >> 1);
      do
        v16 = (_QWORD *)*((_QWORD *)v12-- - 2);
      while (v14 <= *v16 >> 1);
    }
    while (v11 < v12);
    v8 = v11 - 1;
  }
  if (v8 != a1)
    *a1 = *v8;
  *v8 = v3;
  return v8;
}

BOOL std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithStringID<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>(re::Serializer<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<re::StringID const*,void *,true> const&,re::Pair<re::StringID const*,void *,true> const&)#1} &,re::Pair<re::StringID const*,void *,true>*>(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  _BOOL8 result;
  __int128 *v6;
  __int128 v7;
  _QWORD **v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  _QWORD *v16;

  v4 = (a2 - a1) >> 4;
  result = 1;
  switch(v4)
  {
    case 0:
    case 1:
      return result;
    case 2:
      v6 = (__int128 *)(a2 - 16);
      if (**(_QWORD **)(a2 - 16) >> 1 < **(_QWORD **)a1 >> 1)
      {
        v7 = *(_OWORD *)a1;
        *(_OWORD *)a1 = *v6;
        *v6 = v7;
      }
      return result;
    case 3:
      std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithStringID<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>(re::Serializer<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<re::StringID const*,void *,true> const&,re::Pair<re::StringID const*,void *,true> const&)#1} &,re::Pair<re::StringID const*,void *,true>*>((__int128 *)a1, (_QWORD **)(a1 + 16), (_QWORD **)(a2 - 16));
      return 1;
    case 4:
      std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithStringID<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>(re::Serializer<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<re::StringID const*,void *,true> const&,re::Pair<re::StringID const*,void *,true> const&)#1} &,re::Pair<re::StringID const*,void *,true>*>((__int128 *)a1, (__n128 *)(a1 + 16), (__n128 *)(a1 + 32), (__n128 *)(a2 - 16));
      return 1;
    case 5:
      std::__sort5[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithStringID<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>(re::Serializer<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<re::StringID const*,void *,true> const&,re::Pair<re::StringID const*,void *,true> const&)#1} &,re::Pair<re::StringID const*,void *,true>*>((__int128 *)a1, (__n128 *)(a1 + 16), (__n128 *)(a1 + 32), (__n128 *)(a1 + 48), (__n128 *)(a2 - 16));
      return 1;
    default:
      v8 = (_QWORD **)(a1 + 32);
      std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithStringID<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>(re::Serializer<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<re::StringID const*,void *,true> const&,re::Pair<re::StringID const*,void *,true> const&)#1} &,re::Pair<re::StringID const*,void *,true>*>((__int128 *)a1, (_QWORD **)(a1 + 16), (_QWORD **)(a1 + 32));
      v9 = a1 + 48;
      if (a1 + 48 == a2)
        return 1;
      v10 = 0;
      v11 = 0;
      break;
  }
  while (1)
  {
    v12 = *(_QWORD **)v9;
    if (**(_QWORD **)v9 >> 1 < **v8 >> 1)
    {
      v13 = *(_QWORD *)(v9 + 8);
      v14 = v10;
      while (1)
      {
        *(_OWORD *)(a1 + v14 + 48) = *(_OWORD *)(a1 + v14 + 32);
        if (v14 == -32)
          break;
        v15 = **(_QWORD **)(a1 + v14 + 16);
        v14 -= 16;
        if (*v12 >> 1 >= v15 >> 1)
        {
          v16 = (_QWORD *)(a1 + v14 + 48);
          goto LABEL_12;
        }
      }
      v16 = (_QWORD *)a1;
LABEL_12:
      *v16 = v12;
      v16[1] = v13;
      if (++v11 == 8)
        return v9 + 16 == a2;
    }
    v8 = (_QWORD **)v9;
    v10 += 16;
    v9 += 16;
    if (v9 == a2)
      return 1;
  }
}

__n128 std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithStringID<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>(re::Serializer<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<re::StringID const*,void *,true> const&,re::Pair<re::StringID const*,void *,true> const&)#1} &,re::Pair<re::StringID const*,void *,true>*>(__int128 *a1, __n128 *a2, __n128 *a3, __n128 *a4)
{
  __n128 result;

  std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithStringID<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>(re::Serializer<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<re::StringID const*,void *,true> const&,re::Pair<re::StringID const*,void *,true> const&)#1} &,re::Pair<re::StringID const*,void *,true>*>(a1, a2, a3);
  if (*(_QWORD *)a4->n128_u64[0] >> 1 < *(_QWORD *)a3->n128_u64[0] >> 1)
  {
    result = *a3;
    *a3 = *a4;
    *a4 = result;
    if (*(_QWORD *)a3->n128_u64[0] >> 1 < *(_QWORD *)a2->n128_u64[0] >> 1)
    {
      result = *a2;
      *a2 = *a3;
      *a3 = result;
      if (*(_QWORD *)a2->n128_u64[0] >> 1 < **(_QWORD **)a1 >> 1)
      {
        result = (__n128)*a1;
        *a1 = (__int128)*a2;
        *a2 = result;
      }
    }
  }
  return result;
}

__n128 std::__sort5[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithStringID<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>(re::Serializer<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<re::StringID const*,void *,true> const&,re::Pair<re::StringID const*,void *,true> const&)#1} &,re::Pair<re::StringID const*,void *,true>*>(__int128 *a1, __n128 *a2, __n128 *a3, __n128 *a4, __n128 *a5)
{
  __n128 result;

  result.n128_u64[0] = std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithStringID<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>(re::Serializer<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<re::StringID const*,void *,true> const&,re::Pair<re::StringID const*,void *,true> const&)#1} &,re::Pair<re::StringID const*,void *,true>*>(a1, a2, a3, a4).n128_u64[0];
  if (*(_QWORD *)a5->n128_u64[0] >> 1 < *(_QWORD *)a4->n128_u64[0] >> 1)
  {
    result = *a4;
    *a4 = *a5;
    *a5 = result;
    if (*(_QWORD *)a4->n128_u64[0] >> 1 < *(_QWORD *)a3->n128_u64[0] >> 1)
    {
      result = *a3;
      *a3 = *a4;
      *a4 = result;
      if (*(_QWORD *)a3->n128_u64[0] >> 1 < *(_QWORD *)a2->n128_u64[0] >> 1)
      {
        result = *a2;
        *a2 = *a3;
        *a3 = result;
        if (*(_QWORD *)a2->n128_u64[0] >> 1 < **(_QWORD **)a1 >> 1)
        {
          result = (__n128)*a1;
          *a1 = (__int128)*a2;
          *a2 = result;
        }
      }
    }
  }
  return result;
}

char *std::__partial_sort_impl[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithStringID<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>(re::Serializer<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<re::StringID const*,void *,true> const&,re::Pair<re::StringID const*,void *,true> const&)#1} &,re::Pair<re::StringID const*,void *,true>*,re::Pair<re::StringID const*,void *,true>*>(unint64_t **a1, char *a2, char *a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t **v12;
  char *v13;
  char *v14;
  __int128 v15;
  uint64_t v16;
  char *v17;
  char *v18;
  __int128 v21;

  if (a1 != (unint64_t **)a2)
  {
    v8 = a2 - (char *)a1;
    v9 = (a2 - (char *)a1) >> 4;
    if (a2 - (char *)a1 >= 17)
    {
      v10 = (unint64_t)(v9 - 2) >> 1;
      v11 = v10 + 1;
      v12 = &a1[2 * v10];
      do
      {
        std::__sift_down[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithStringID<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>(re::Serializer<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<re::StringID const*,void *,true> const&,re::Pair<re::StringID const*,void *,true> const&)#1} &,re::Pair<re::StringID const*,void *,true>*>((uint64_t)a1, a4, v9, v12);
        v12 -= 2;
        --v11;
      }
      while (v11);
    }
    v13 = a2;
    if (a2 != a3)
    {
      v14 = a2;
      do
      {
        if (**(_QWORD **)v14 >> 1 < **a1 >> 1)
        {
          v15 = *(_OWORD *)v14;
          *(_OWORD *)v14 = *(_OWORD *)a1;
          *(_OWORD *)a1 = v15;
          std::__sift_down[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithStringID<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>(re::Serializer<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<re::StringID const*,void *,true> const&,re::Pair<re::StringID const*,void *,true> const&)#1} &,re::Pair<re::StringID const*,void *,true>*>((uint64_t)a1, a4, v9, a1);
        }
        v14 += 16;
      }
      while (v14 != a3);
      v13 = a3;
    }
    if (v8 >= 17)
    {
      v16 = (unint64_t)v8 >> 4;
      v17 = a2 - 16;
      do
      {
        v21 = *(_OWORD *)a1;
        v18 = (char *)std::__floyd_sift_down[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithStringID<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>(re::Serializer<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<re::StringID const*,void *,true> const&,re::Pair<re::StringID const*,void *,true> const&)#1} &,re::Pair<re::StringID const*,void *,true>*>(a1, a4, v16);
        if (v17 == v18)
        {
          *(_OWORD *)v18 = v21;
        }
        else
        {
          *(_OWORD *)v18 = *(_OWORD *)v17;
          *(_OWORD *)v17 = v21;
          std::__sift_up[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithStringID<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>(re::Serializer<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<re::StringID const*,void *,true> const&,re::Pair<re::StringID const*,void *,true> const&)#1} &,re::Pair<re::StringID const*,void *,true>*>((uint64_t)a1, (uint64_t)(v18 + 16), a4, (v18 + 16 - (char *)a1) >> 4);
        }
        v17 -= 16;
      }
      while (v16-- > 2);
    }
    return v13;
  }
  return a3;
}

uint64_t std::__sift_down[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithStringID<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>(re::Serializer<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<re::StringID const*,void *,true> const&,re::Pair<re::StringID const*,void *,true> const&)#1} &,re::Pair<re::StringID const*,void *,true>*>(uint64_t result, uint64_t a2, uint64_t a3, unint64_t **a4)
{
  uint64_t v4;
  int64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t **v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t *v11;
  unint64_t *v12;
  unint64_t **v13;
  uint64_t v14;
  unint64_t v15;

  if (a3 >= 2)
  {
    v4 = (uint64_t)a4 - result;
    v5 = (unint64_t)(a3 - 2) >> 1;
    if (v5 >= ((uint64_t)a4 - result) >> 4)
    {
      v6 = v4 >> 3;
      v7 = (v4 >> 3) + 1;
      v8 = (unint64_t **)(result + 16 * v7);
      v9 = v6 + 2;
      if (v9 >= a3)
      {
        v10 = **v8;
      }
      else
      {
        v10 = **v8;
        if (v10 >> 1 < *v8[2] >> 1)
        {
          v10 = *v8[2];
          v8 += 2;
          v7 = v9;
        }
      }
      v11 = *a4;
      if (v10 >> 1 >= **a4 >> 1)
      {
        v12 = a4[1];
        do
        {
          v13 = a4;
          a4 = v8;
          *(_OWORD *)v13 = *(_OWORD *)v8;
          if (v5 < v7)
            break;
          v14 = (2 * v7) | 1;
          v8 = (unint64_t **)(result + 16 * v14);
          v7 = 2 * v7 + 2;
          if (v7 >= a3)
          {
            v15 = **v8;
            v7 = v14;
          }
          else
          {
            v15 = **v8;
            if (v15 >> 1 >= *v8[2] >> 1)
            {
              v7 = v14;
            }
            else
            {
              v15 = *v8[2];
              v8 += 2;
            }
          }
        }
        while (v15 >> 1 >= *v11 >> 1);
        *a4 = v11;
        a4[1] = v12;
      }
    }
  }
  return result;
}

_QWORD **std::__floyd_sift_down[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithStringID<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>(re::Serializer<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<re::StringID const*,void *,true> const&,re::Pair<re::StringID const*,void *,true> const&)#1} &,re::Pair<re::StringID const*,void *,true>*>(_OWORD *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD **v6;
  uint64_t v7;
  uint64_t v8;

  v3 = 0;
  v4 = a3 - 2;
  if (a3 < 2)
    v4 = a3 - 1;
  v5 = v4 >> 1;
  do
  {
    v6 = (_QWORD **)&a1[v3 + 1];
    v7 = (2 * v3) | 1;
    v8 = 2 * v3 + 2;
    if (v8 < a3 && **v6 >> 1 < *v6[2] >> 1)
    {
      v6 += 2;
      v7 = v8;
    }
    *a1 = *(_OWORD *)v6;
    a1 = v6;
    v3 = v7;
  }
  while (v7 <= v5);
  return v6;
}

uint64_t std::__sift_up[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithStringID<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>(re::Serializer<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<re::StringID const*,void *,true> const&,re::Pair<re::StringID const*,void *,true> const&)#1} &,re::Pair<re::StringID const*,void *,true>*>(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unint64_t v4;
  _QWORD *v5;
  _QWORD *v6;
  _OWORD *v7;
  uint64_t v8;
  _OWORD *v9;

  if (a4 >= 2)
  {
    v4 = (unint64_t)(a4 - 2) >> 1;
    v5 = (_QWORD *)(a2 - 16);
    v6 = *(_QWORD **)(a2 - 16);
    v7 = (_OWORD *)(result + 16 * v4);
    if (**(_QWORD **)v7 >> 1 < *v6 >> 1)
    {
      v8 = *(_QWORD *)(a2 - 8);
      do
      {
        v9 = v5;
        v5 = v7;
        *v9 = *v7;
        if (!v4)
          break;
        v4 = (v4 - 1) >> 1;
        v7 = (_OWORD *)(result + 16 * v4);
      }
      while (**(_QWORD **)v7 >> 1 < *v6 >> 1);
      *v5 = v6;
      v5[1] = v8;
    }
  }
  return result;
}

void std::__introsort<std::_ClassicAlgPolicy,BOOL re::serializeDictionary<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>(re::Serializer<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<void const*,void *,true> const&,re::Pair<void const*,void *,true> const&)#1} &,re::Pair<void const*,void *,true>*,false>(uint64_t *a1, uint64_t *a2, uint64_t (**a3)(uint64_t, uint64_t), uint64_t a4, char a5, __n128 a6)
{
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t *v16;
  char *v17;
  char v18;
  BOOL v19;
  uint64_t *v20;
  uint64_t v21;
  __int128 v22;
  __int128 v23;

BOOL std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::serializeDictionary<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>(re::Serializer<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<void const*,void *,true> const&,re::Pair<void const*,void *,true> const&)#1} &,re::Pair<void const*,void *,true>*>(char *a1, char *a2, uint64_t (**a3)(uint64_t, _QWORD))
{
  uint64_t v6;
  _BOOL8 result;
  char *v8;
  __int128 v9;
  char *v10;
  char *v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  char v16;
  char *v17;
  __int128 v18;

  v6 = (a2 - a1) >> 4;
  result = 1;
  switch(v6)
  {
    case 0:
    case 1:
      return result;
    case 2:
      v8 = a2 - 16;
      if ((*a3)(*((_QWORD *)a2 - 2), *(_QWORD *)a1))
      {
        v9 = *(_OWORD *)a1;
        *(_OWORD *)a1 = *(_OWORD *)v8;
        *(_OWORD *)v8 = v9;
      }
      return 1;
    case 3:
      std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::serializeDictionary<re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>>(re::Serializer<re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<void const*,void *,true> const&,re::Pair<void const*,void *,true> const&)#1} &,re::Pair<void const*,void *,true>*>(a1, (_QWORD *)a1 + 2, (_QWORD *)a2 - 2, a3);
      return 1;
    case 4:
      std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::serializeDictionary<re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>>(re::Serializer<re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<void const*,void *,true> const&,re::Pair<void const*,void *,true> const&)#1} &,re::Pair<void const*,void *,true>*>(a1, (_QWORD *)a1 + 2, (_QWORD *)a1 + 4, (_QWORD *)a2 - 2, a3);
      return 1;
    case 5:
      std::__sort5[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::serializeDictionary<re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>>(re::Serializer<re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<void const*,void *,true> const&,re::Pair<void const*,void *,true> const&)#1} &,re::Pair<void const*,void *,true>*>(a1, (_QWORD *)a1 + 2, (_QWORD *)a1 + 4, (_QWORD *)a1 + 6, (_QWORD *)a2 - 2, a3);
      return 1;
    default:
      v10 = a1 + 32;
      std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::serializeDictionary<re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>>(re::Serializer<re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<void const*,void *,true> const&,re::Pair<void const*,void *,true> const&)#1} &,re::Pair<void const*,void *,true>*>(a1, (_QWORD *)a1 + 2, (_QWORD *)a1 + 4, a3);
      v11 = a1 + 48;
      if (a1 + 48 == a2)
        return 1;
      v12 = 0;
      v13 = 0;
      break;
  }
  while (1)
  {
    if ((*a3)(*(_QWORD *)v11, *(_QWORD *)v10))
    {
      v18 = *(_OWORD *)v11;
      v14 = *(_QWORD *)v11;
      v15 = v12;
      while (1)
      {
        *(_OWORD *)&a1[v15 + 48] = *(_OWORD *)&a1[v15 + 32];
        if (v15 == -32)
          break;
        v16 = (*a3)(v14, *(_QWORD *)&a1[v15 + 16]);
        v15 -= 16;
        if ((v16 & 1) == 0)
        {
          v17 = &a1[v15 + 48];
          goto LABEL_12;
        }
      }
      v17 = a1;
LABEL_12:
      *(_OWORD *)v17 = v18;
      if (++v13 == 8)
        return v11 + 16 == a2;
    }
    v10 = v11;
    v12 += 16;
    v11 += 16;
    if (v11 == a2)
      return 1;
  }
}

BOOL re::serializeDynamicString<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>(uint64_t a1, const char *a2, const re::TypeInfo *a3, uint64_t a4, re *a5, const re::TypeInfo *a6, int a7)
{
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  BOOL v17;
  uint64_t *v18;
  char *v19;
  _BOOL8 result;
  _BOOL4 v21;
  _anonymous_namespace_ *v22;
  unint64_t v23;
  uint64_t v24;
  _BOOL4 v25;
  uint64_t v26;
  uint64_t v27;

  if (a5 == a6)
    goto LABEL_14;
  if (*(_QWORD *)a5 == *(_QWORD *)a6)
  {
    v14 = **((_QWORD **)a5 + 2);
    v15 = **((_QWORD **)a6 + 2);
    if ((unsigned __int16)v14 == (unsigned __int16)v15)
    {
      v17 = WORD1(v14) == WORD1(v15);
      v16 = (v15 ^ v14) & 0xFFFFFF00000000;
      v17 = v17 && v16 == 0;
      if (v17)
        goto LABEL_14;
    }
  }
  else if (re::areSameTranslatedVersion(a5, a6, a3))
  {
    goto LABEL_14;
  }
  v18 = re::TypeInfo::name(a6);
  if ((unint64_t)*v18 >> 1 != 0x22C6ED80D0CLL
    || (v19 = (char *)v18[1], v19 != "StringID") && strcmp(v19, "StringID"))
  {
    re::internal::setTypeMismatchError<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>(a1, a2, a5, a6);
    return 0;
  }
LABEL_14:
  if (a7)
  {
    v27 = 0;
    v21 = re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>::beginString(a1 + 24, a2, (uint64_t)a3, &v27, 0);
    result = 0;
    if (!v21)
      return result;
    if (v27)
      re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>::serializeString(a1 + 24, 0, 1);
    v22 = (_anonymous_namespace_ *)(a1 + 24);
    goto LABEL_29;
  }
  v23 = *(_QWORD *)(a4 + 8);
  if ((v23 & 1) != 0)
    v24 = v23 >> 1;
  else
    v24 = v23 >> 1;
  v27 = v24;
  v25 = re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>::beginString(a1 + 24, a2, (uint64_t)a3, &v27, 0);
  result = 0;
  if (v25)
  {
    if (v27)
    {
      if ((*(_BYTE *)(a4 + 8) & 1) != 0)
        v26 = *(_QWORD *)(a4 + 16);
      else
        v26 = a4 + 9;
      re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>::serializeString(a1 + 24, v26, 0);
    }
    v22 = (_anonymous_namespace_ *)(a1 + 24);
LABEL_29:
    re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>::endString(v22);
    return *(_BYTE *)(a1 + 64) == 0;
  }
  return result;
}

uint64_t *re::Serializer<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>::registerSerializeFunc(uint64_t a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t *result;
  BOOL v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;

  v5 = *(_QWORD *)(a1 + 272);
  result = (uint64_t *)re::HashTable<re::StringID,re::StateParameterInt *,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::tryGet(v5 + 200, a2);
  if (v5)
    v7 = result == 0;
  else
    v7 = 1;
  if (!v7)
  {
    v8 = *result;
    v10 = a3;
    v9 = v8 | 0xFFFFFFFF00000000;
    return (uint64_t *)re::HashTable<re::internal::SerializeFuncKey,BOOL (*)(re::Serializer<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL),re::internal::HashSerializeFuncKey,re::EqualTo<re::internal::SerializeFuncKey>,false,true>::addOrReplace<BOOL (*&)(re::Serializer<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)>(a1 + 288, &v9, &v10);
  }
  return result;
}

BOOL re::serializeBool<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>(uint64_t a1, const char *a2, const re::TypeInfo *a3, unsigned __int8 *a4, re *a5, const re::TypeInfo *a6, int a7)
{
  unsigned __int8 *v14;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  BOOL v19;
  char v20;

  v20 = 0;
  if (a5 != a6)
  {
    if (*(_QWORD *)a5 == *(_QWORD *)a6)
    {
      v16 = **((_QWORD **)a5 + 2);
      v17 = **((_QWORD **)a6 + 2);
      if ((unsigned __int16)v16 == (unsigned __int16)v17)
      {
        v19 = WORD1(v16) == WORD1(v17);
        v18 = (v17 ^ v16) & 0xFFFFFF00000000;
        v19 = v19 && v18 == 0;
        if (v19)
          goto LABEL_4;
      }
    }
    else if (re::areSameTranslatedVersion(a5, a6, a3))
    {
      goto LABEL_4;
    }
    re::internal::setTypeMismatchError<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>(a1, a2, a5, a6);
    return 0;
  }
LABEL_4:
  if (a7)
    v14 = (unsigned __int8 *)&v20;
  else
    v14 = a4;
  return re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>::serializeBool(a1 + 24, a2, (uint64_t)a3, v14, a7);
}

BOOL re::serializeChar<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>(uint64_t a1, const char *a2, const re::TypeInfo *a3, char *a4, re *a5, const re::TypeInfo *a6, int a7)
{
  char *v14;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  BOOL v19;
  char v20;

  v20 = 0;
  if (a5 != a6)
  {
    if (*(_QWORD *)a5 == *(_QWORD *)a6)
    {
      v16 = **((_QWORD **)a5 + 2);
      v17 = **((_QWORD **)a6 + 2);
      if ((unsigned __int16)v16 == (unsigned __int16)v17)
      {
        v19 = WORD1(v16) == WORD1(v17);
        v18 = (v17 ^ v16) & 0xFFFFFF00000000;
        v19 = v19 && v18 == 0;
        if (v19)
          goto LABEL_4;
      }
    }
    else if (re::areSameTranslatedVersion(a5, a6, a3))
    {
      goto LABEL_4;
    }
    re::internal::setTypeMismatchError<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>(a1, a2, a5, a6);
    return 0;
  }
LABEL_4:
  if (a7)
    v14 = &v20;
  else
    v14 = a4;
  return re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>::serializeChar(a1 + 24, a2, (uint64_t)a3, (uint64_t)v14, a7);
}

BOOL re::serializeI8<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>(uint64_t a1, const char *a2, const re::TypeInfo *a3, char *a4, re *a5, const re::TypeInfo *a6, int a7)
{
  char *v14;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  BOOL v19;
  char v20;

  v20 = 0;
  if (a5 != a6)
  {
    if (*(_QWORD *)a5 == *(_QWORD *)a6)
    {
      v16 = **((_QWORD **)a5 + 2);
      v17 = **((_QWORD **)a6 + 2);
      if ((unsigned __int16)v16 == (unsigned __int16)v17)
      {
        v19 = WORD1(v16) == WORD1(v17);
        v18 = (v17 ^ v16) & 0xFFFFFF00000000;
        v19 = v19 && v18 == 0;
        if (v19)
          goto LABEL_4;
      }
    }
    else if (re::areSameTranslatedVersion(a5, a6, a3))
    {
      goto LABEL_4;
    }
    re::internal::setTypeMismatchError<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>(a1, a2, a5, a6);
    return 0;
  }
LABEL_4:
  if (a7)
    v14 = &v20;
  else
    v14 = a4;
  return re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>::serializeInt<signed char>(a1 + 24, a2, (uint64_t)a3, v14, a7);
}

BOOL re::serializeI16<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>(uint64_t a1, const char *a2, const re::TypeInfo *a3, __int16 *a4, re *a5, const re::TypeInfo *a6, int a7)
{
  __int16 *v14;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  BOOL v19;
  __int16 v20;

  v20 = 0;
  if (a5 != a6)
  {
    if (*(_QWORD *)a5 == *(_QWORD *)a6)
    {
      v16 = **((_QWORD **)a5 + 2);
      v17 = **((_QWORD **)a6 + 2);
      if ((unsigned __int16)v16 == (unsigned __int16)v17)
      {
        v19 = WORD1(v16) == WORD1(v17);
        v18 = (v17 ^ v16) & 0xFFFFFF00000000;
        v19 = v19 && v18 == 0;
        if (v19)
          goto LABEL_4;
      }
    }
    else if (re::areSameTranslatedVersion(a5, a6, a3))
    {
      goto LABEL_4;
    }
    re::internal::setTypeMismatchError<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>(a1, a2, a5, a6);
    return 0;
  }
LABEL_4:
  if (a7)
    v14 = &v20;
  else
    v14 = a4;
  return re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>::serializeInt<short>(a1 + 24, a2, (uint64_t)a3, v14, a7);
}

BOOL re::serializeI32<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>(uint64_t a1, const char *a2, const re::TypeInfo *a3, unsigned int *a4, re *a5, const re::TypeInfo *a6, int a7)
{
  unsigned int *v14;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  BOOL v19;
  int v20;

  v20 = 0;
  if (a5 != a6)
  {
    if (*(_QWORD *)a5 == *(_QWORD *)a6)
    {
      v16 = **((_QWORD **)a5 + 2);
      v17 = **((_QWORD **)a6 + 2);
      if ((unsigned __int16)v16 == (unsigned __int16)v17)
      {
        v19 = WORD1(v16) == WORD1(v17);
        v18 = (v17 ^ v16) & 0xFFFFFF00000000;
        v19 = v19 && v18 == 0;
        if (v19)
          goto LABEL_4;
      }
    }
    else if (re::areSameTranslatedVersion(a5, a6, a3))
    {
      goto LABEL_4;
    }
    re::internal::setTypeMismatchError<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>(a1, a2, a5, a6);
    return 0;
  }
LABEL_4:
  if (a7)
    v14 = (unsigned int *)&v20;
  else
    v14 = a4;
  return re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>::serializeInt<int>(a1 + 24, a2, (uint64_t)a3, v14, a7);
}

BOOL re::serializeI64<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>(uint64_t a1, const char *a2, const re::TypeInfo *a3, unint64_t *a4, re *a5, const re::TypeInfo *a6, int a7)
{
  unint64_t *v14;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  BOOL v19;
  uint64_t v20;

  v20 = 0;
  if (a5 != a6)
  {
    if (*(_QWORD *)a5 == *(_QWORD *)a6)
    {
      v16 = **((_QWORD **)a5 + 2);
      v17 = **((_QWORD **)a6 + 2);
      if ((unsigned __int16)v16 == (unsigned __int16)v17)
      {
        v19 = WORD1(v16) == WORD1(v17);
        v18 = (v17 ^ v16) & 0xFFFFFF00000000;
        v19 = v19 && v18 == 0;
        if (v19)
          goto LABEL_4;
      }
    }
    else if (re::areSameTranslatedVersion(a5, a6, a3))
    {
      goto LABEL_4;
    }
    re::internal::setTypeMismatchError<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>(a1, a2, a5, a6);
    return 0;
  }
LABEL_4:
  if (a7)
    v14 = (unint64_t *)&v20;
  else
    v14 = a4;
  return re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>::serializeInt<long long>(a1 + 24, a2, (uint64_t)a3, v14, a7);
}

BOOL re::serializeU8<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>(uint64_t a1, const char *a2, const re::TypeInfo *a3, unsigned __int8 *a4, re *a5, const re::TypeInfo *a6, int a7)
{
  unsigned __int8 *v14;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  BOOL v19;
  char v20;

  v20 = 0;
  if (a5 != a6)
  {
    if (*(_QWORD *)a5 == *(_QWORD *)a6)
    {
      v16 = **((_QWORD **)a5 + 2);
      v17 = **((_QWORD **)a6 + 2);
      if ((unsigned __int16)v16 == (unsigned __int16)v17)
      {
        v19 = WORD1(v16) == WORD1(v17);
        v18 = (v17 ^ v16) & 0xFFFFFF00000000;
        v19 = v19 && v18 == 0;
        if (v19)
          goto LABEL_4;
      }
    }
    else if (re::areSameTranslatedVersion(a5, a6, a3))
    {
      goto LABEL_4;
    }
    re::internal::setTypeMismatchError<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>(a1, a2, a5, a6);
    return 0;
  }
LABEL_4:
  if (a7)
    v14 = (unsigned __int8 *)&v20;
  else
    v14 = a4;
  return re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>::serializeInt<unsigned char>(a1 + 24, a2, (uint64_t)a3, v14, a7);
}

BOOL re::serializeU16<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>(uint64_t a1, const char *a2, const re::TypeInfo *a3, unsigned __int16 *a4, re *a5, const re::TypeInfo *a6, int a7)
{
  unsigned __int16 *v14;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  BOOL v19;
  __int16 v20;

  v20 = 0;
  if (a5 != a6)
  {
    if (*(_QWORD *)a5 == *(_QWORD *)a6)
    {
      v16 = **((_QWORD **)a5 + 2);
      v17 = **((_QWORD **)a6 + 2);
      if ((unsigned __int16)v16 == (unsigned __int16)v17)
      {
        v19 = WORD1(v16) == WORD1(v17);
        v18 = (v17 ^ v16) & 0xFFFFFF00000000;
        v19 = v19 && v18 == 0;
        if (v19)
          goto LABEL_4;
      }
    }
    else if (re::areSameTranslatedVersion(a5, a6, a3))
    {
      goto LABEL_4;
    }
    re::internal::setTypeMismatchError<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>(a1, a2, a5, a6);
    return 0;
  }
LABEL_4:
  if (a7)
    v14 = (unsigned __int16 *)&v20;
  else
    v14 = a4;
  return re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>::serializeInt<unsigned short>(a1 + 24, a2, (uint64_t)a3, v14, a7);
}

BOOL re::serializeU32<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>(uint64_t a1, const char *a2, const re::TypeInfo *a3, unsigned int *a4, re *a5, const re::TypeInfo *a6, int a7)
{
  unsigned int *v14;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  BOOL v19;
  int v20;

  v20 = 0;
  if (a5 != a6)
  {
    if (*(_QWORD *)a5 == *(_QWORD *)a6)
    {
      v16 = **((_QWORD **)a5 + 2);
      v17 = **((_QWORD **)a6 + 2);
      if ((unsigned __int16)v16 == (unsigned __int16)v17)
      {
        v19 = WORD1(v16) == WORD1(v17);
        v18 = (v17 ^ v16) & 0xFFFFFF00000000;
        v19 = v19 && v18 == 0;
        if (v19)
          goto LABEL_4;
      }
    }
    else if (re::areSameTranslatedVersion(a5, a6, a3))
    {
      goto LABEL_4;
    }
    re::internal::setTypeMismatchError<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>(a1, a2, a5, a6);
    return 0;
  }
LABEL_4:
  if (a7)
    v14 = (unsigned int *)&v20;
  else
    v14 = a4;
  return re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>::serializeInt<unsigned int>(a1 + 24, a2, (uint64_t)a3, v14, a7);
}

BOOL re::serializeU64<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>(uint64_t a1, const char *a2, const re::TypeInfo *a3, rapidjson::internal **a4, re *a5, const re::TypeInfo *a6, int a7)
{
  rapidjson::internal **v14;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  BOOL v19;
  uint64_t v20;

  v20 = 0;
  if (a5 != a6)
  {
    if (*(_QWORD *)a5 == *(_QWORD *)a6)
    {
      v16 = **((_QWORD **)a5 + 2);
      v17 = **((_QWORD **)a6 + 2);
      if ((unsigned __int16)v16 == (unsigned __int16)v17)
      {
        v19 = WORD1(v16) == WORD1(v17);
        v18 = (v17 ^ v16) & 0xFFFFFF00000000;
        v19 = v19 && v18 == 0;
        if (v19)
          goto LABEL_4;
      }
    }
    else if (re::areSameTranslatedVersion(a5, a6, a3))
    {
      goto LABEL_4;
    }
    re::internal::setTypeMismatchError<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>(a1, a2, a5, a6);
    return 0;
  }
LABEL_4:
  if (a7)
    v14 = (rapidjson::internal **)&v20;
  else
    v14 = a4;
  return re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>::serializeInt<unsigned long long>(a1 + 24, a2, (uint64_t)a3, v14, a7);
}

BOOL re::serializeFloat<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>(uint64_t a1, const char *a2, const re::TypeInfo *a3, float *a4, re *a5, const re::TypeInfo *a6, int a7)
{
  float *v14;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  BOOL v19;
  int v20;

  v20 = 0;
  if (a5 != a6)
  {
    if (*(_QWORD *)a5 == *(_QWORD *)a6)
    {
      v16 = **((_QWORD **)a5 + 2);
      v17 = **((_QWORD **)a6 + 2);
      if ((unsigned __int16)v16 == (unsigned __int16)v17)
      {
        v19 = WORD1(v16) == WORD1(v17);
        v18 = (v17 ^ v16) & 0xFFFFFF00000000;
        v19 = v19 && v18 == 0;
        if (v19)
          goto LABEL_4;
      }
    }
    else if (re::areSameTranslatedVersion(a5, a6, a3))
    {
      goto LABEL_4;
    }
    re::internal::setTypeMismatchError<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>(a1, a2, a5, a6);
    return 0;
  }
LABEL_4:
  if (a7)
    v14 = (float *)&v20;
  else
    v14 = a4;
  return re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>::serializeReal<float>(a1 + 24, a2, (uint64_t)a3, v14, a7);
}

BOOL re::serializeDouble<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>(uint64_t a1, const char *a2, const re::TypeInfo *a3, double *a4, re *a5, const re::TypeInfo *a6, int a7)
{
  double *v14;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  BOOL v19;
  uint64_t v20;

  v20 = 0;
  if (a5 != a6)
  {
    if (*(_QWORD *)a5 == *(_QWORD *)a6)
    {
      v16 = **((_QWORD **)a5 + 2);
      v17 = **((_QWORD **)a6 + 2);
      if ((unsigned __int16)v16 == (unsigned __int16)v17)
      {
        v19 = WORD1(v16) == WORD1(v17);
        v18 = (v17 ^ v16) & 0xFFFFFF00000000;
        v19 = v19 && v18 == 0;
        if (v19)
          goto LABEL_4;
      }
    }
    else if (re::areSameTranslatedVersion(a5, a6, a3))
    {
      goto LABEL_4;
    }
    re::internal::setTypeMismatchError<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>(a1, a2, a5, a6);
    return 0;
  }
LABEL_4:
  if (a7)
    v14 = (double *)&v20;
  else
    v14 = a4;
  return re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>::serializeReal<double>(a1 + 24, a2, (uint64_t)a3, v14, a7);
}

BOOL re::serializeCString<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>(uint64_t a1, const char *a2, const re::TypeInfo *a3, uint64_t *a4, re *a5, const re::TypeInfo *a6, int a7)
{
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  _BOOL8 result;
  int v21;
  const char *v22;
  _anonymous_namespace_ *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  BOOL v27;
  const char *v28;
  int v29;

  if (a5 != a6)
  {
    if (*(_QWORD *)a5 != *(_QWORD *)a6)
    {
      if (re::areSameTranslatedVersion(a5, a6, a3))
        goto LABEL_4;
LABEL_23:
      re::internal::setTypeMismatchError<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>(a1, a2, a5, a6);
      return 0;
    }
    v24 = **((_QWORD **)a5 + 2);
    v25 = **((_QWORD **)a6 + 2);
    if ((unsigned __int16)v24 != (unsigned __int16)v25)
      goto LABEL_23;
    v27 = WORD1(v24) == WORD1(v25);
    v26 = (v25 ^ v24) & 0xFFFFFF00000000;
    v27 = v27 && v26 == 0;
    if (!v27)
      goto LABEL_23;
  }
LABEL_4:
  if (a7)
  {
    v29 = 0;
    v19 = re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>::beginPointer(a1 + 24, a2, (uint64_t)a3, &v29, 0);
    result = 0;
    if (!v19)
      return result;
    if (v29)
    {
      if (v29 == 1)
      {
        re::Serializer<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>::setError(a1, a2, "Found pointer reference instead of C string.", v14, v15, v16, v17, v18, (char)v28);
        return 0;
      }
      v28 = 0;
      if (re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>::beginString(a1 + 24, a2, 0, (uint64_t *)&v28, 0))
      {
        if (v28)
          re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>::serializeString(a1 + 24, 0, 1);
        re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>::endString((_anonymous_namespace_ *)(a1 + 24));
      }
    }
    v23 = (_anonymous_namespace_ *)(a1 + 24);
  }
  else
  {
    v29 = 2 * (*a4 != 0);
    v21 = re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>::beginPointer(a1 + 24, a2, (uint64_t)a3, &v29, 0);
    result = 0;
    if (!v21)
      return result;
    if (v29 == 2)
    {
      v22 = (const char *)*a4;
      if (*a4)
        v22 = (const char *)strlen(v22);
      v28 = v22;
      if (re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>::beginString(a1 + 24, a2, 0, (uint64_t *)&v28, 0))
      {
        if (v28)
          re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>::serializeString(a1 + 24, *a4, 0);
        re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>::endString((_anonymous_namespace_ *)(a1 + 24));
      }
    }
    v23 = (_anonymous_namespace_ *)(a1 + 24);
  }
  re::EncoderBinary<re::SeekableInputStream>::endPointer(v23);
  return *(_BYTE *)(a1 + 64) == 0;
}

BOOL re::serializeStringID<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>(uint64_t a1, const char *a2, const re::TypeInfo *a3, uint64_t a4, re *a5, const re::TypeInfo *a6, int a7)
{
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  BOOL v17;
  uint64_t *v18;
  char *v19;
  _BOOL8 result;
  _BOOL4 v21;
  _anonymous_namespace_ *v22;
  size_t v23;

  if (a5 == a6)
    goto LABEL_14;
  if (*(_QWORD *)a5 == *(_QWORD *)a6)
  {
    v14 = **((_QWORD **)a5 + 2);
    v15 = **((_QWORD **)a6 + 2);
    if ((unsigned __int16)v14 == (unsigned __int16)v15)
    {
      v17 = WORD1(v14) == WORD1(v15);
      v16 = (v15 ^ v14) & 0xFFFFFF00000000;
      v17 = v17 && v16 == 0;
      if (v17)
        goto LABEL_14;
    }
  }
  else if (re::areSameTranslatedVersion(a5, a6, a3))
  {
    goto LABEL_14;
  }
  v18 = re::TypeInfo::name(a6);
  if ((unint64_t)*v18 >> 1 != 0x134375A94D9F7110
    || (v19 = (char *)v18[1], v19 != "DynamicString") && strcmp(v19, "DynamicString"))
  {
    re::internal::setTypeMismatchError<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>(a1, a2, a5, a6);
    return 0;
  }
LABEL_14:
  if (a7)
  {
    v23 = 0;
    v21 = re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>::beginString(a1 + 24, a2, (uint64_t)a3, (uint64_t *)&v23, 0);
    result = 0;
    if (!v21)
      return result;
    if (v23)
      re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>::serializeString(a1 + 24, 0, 1);
    v22 = (_anonymous_namespace_ *)(a1 + 24);
  }
  else
  {
    v23 = strlen(*(const char **)(a4 + 8));
    result = re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>::beginString(a1 + 24, a2, (uint64_t)a3, (uint64_t *)&v23, 0);
    if (!result)
      return result;
    if (v23)
      re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>::serializeString(a1 + 24, *(_QWORD *)(a4 + 8), 0);
    v22 = (_anonymous_namespace_ *)(a1 + 24);
  }
  re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>::endString(v22);
  return *(_BYTE *)(a1 + 64) == 0;
}

BOOL re::serializeIntrospectionCallbackSerializer<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>(uint64_t a1, const char *a2, const re::TypeInfo *a3, uint64_t a4, re *a5, const re::TypeInfo *a6, int a7)
{
  _BOOL4 v14;
  _BOOL8 result;
  unint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  BOOL v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  char *v34;
  uint64_t v35;
  uint64_t v36[2];

  if (a5 != a6)
  {
    if (*(_QWORD *)a5 != *(_QWORD *)a6)
    {
      if (re::areSameTranslatedVersion(a5, a6, a3))
        goto LABEL_4;
LABEL_28:
      re::internal::setTypeMismatchError<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>(a1, a2, a5, a6);
      return 0;
    }
    v23 = **((_QWORD **)a5 + 2);
    v24 = **((_QWORD **)a6 + 2);
    if ((unsigned __int16)v23 != (unsigned __int16)v24)
      goto LABEL_28;
    v26 = WORD1(v23) == WORD1(v24);
    v25 = (v24 ^ v23) & 0xFFFFFF00000000;
    v26 = v26 && v25 == 0;
    if (!v26)
      goto LABEL_28;
  }
LABEL_4:
  if (!a7)
  {
    v16 = **((_QWORD **)a5 + 2);
    v32 = *(_QWORD *)a5;
    v33 = v16;
    LODWORD(v34) = -1;
    v36[0] = 0x258C98EAAF29A10ALL;
    v36[1] = (uint64_t)"CallbackSerializerAttribute";
    v17 = (uint64_t *)re::TypeAttributeCollection::operator[](&v32, v36);
    re::StringID::destroyString((re::StringID *)v36);
    v18 = *v17;
    v19 = *(_QWORD *)(a1 + 264);
    v20 = *(_QWORD *)(a1 + 56);
    v34 = 0;
    v35 = 0;
    v32 = v20;
    v33 = 0;
    re::DynamicString::setCapacity(&v32, 0);
    if (((*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t *))(v18 + 72))(v19, v18, a4, &v32) & 1) != 0)
    {
      if ((v33 & 1) != 0)
        v21 = v33 >> 1;
      else
        v21 = v33 >> 1;
      v36[0] = v21;
      if (re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>::beginString(a1 + 24, a2, (uint64_t)a3, v36, 0))
      {
        if (v36[0])
        {
          if ((v33 & 1) != 0)
            v22 = v34;
          else
            v22 = (char *)&v33 + 1;
          re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>::serializeString(a1 + 24, (uint64_t)v22, 0);
        }
        re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>::endString((_anonymous_namespace_ *)(a1 + 24));
        if (v32 && (v33 & 1) != 0)
          (*(void (**)(void))(*(_QWORD *)v32 + 40))();
        return *(_BYTE *)(a1 + 64) == 0;
      }
    }
    else
    {
      re::TypeInfo::name(a5);
      re::Serializer<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>::setError(a1, a2, "Failed to write string for \"%s\" (type %s) using serialization callback.", v27, v28, v29, v30, v31, (char)a2);
    }
    if (v32 && (v33 & 1) != 0)
      (*(void (**)(void))(*(_QWORD *)v32 + 40))();
    return 0;
  }
  v32 = 0;
  v14 = re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>::beginString(a1 + 24, a2, (uint64_t)a3, &v32, 0);
  result = 0;
  if (v14)
  {
    if (v32)
      re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>::serializeString(a1 + 24, 0, 1);
    re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>::endString((_anonymous_namespace_ *)(a1 + 24));
    return *(_BYTE *)(a1 + 64) == 0;
  }
  return result;
}

uint64_t re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>::beginPointer(uint64_t a1, const char *a2, uint64_t a3, int *a4, int a5)
{
  int v5;
  int v9;
  char *v10;
  uint64_t result;
  __int128 v12;
  uint64_t v13;
  _BOOL8 v14;
  uint64_t v15;
  uint64_t v16;
  const char *v17;

  v17 = a2;
  v5 = *(unsigned __int8 *)(a1 + 40);
  if (*(_BYTE *)(a1 + 40))
    return v5 == 0;
  if ((*(_BYTE *)(*(_QWORD *)(a1 + 128) + 48 * *(_QWORD *)(a1 + 112) - 44) & 0x20) != 0)
    rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>::Key(*(char **)(a1 + 168), &v17);
  v9 = *a4;
  if ((*a4 - 1) < 2)
  {
LABEL_7:
    LOBYTE(v12) = 9;
    DWORD1(v12) = a5 & 0xFFFFFFDF;
    *((_QWORD *)&v12 + 1) = v17;
    v13 = 0;
    v15 = 0;
    v16 = 0;
    v14 = v9 != 0;
    re::Encoder<re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>,re::DynamicArrayBufferedOutputStream>::pushState((_QWORD *)a1, &v12);
    return v5 == 0;
  }
  if (!v9)
  {
    v10 = *(char **)(a1 + 168);
    rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>::Prefix(v10);
    rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>::WriteNull((uint64_t *)v10);
    v9 = *a4;
    goto LABEL_7;
  }
  re::internal::assertLog((re::internal *)4, (uint64_t)a2, "assertion failure: '%s' (%s:line %i) Unexpected PointerEncoding.", "!\"Unreachable code\"", "beginPointer", 1054);
  result = _os_crash();
  __break(1u);
  return result;
}

uint64_t re::HashTable<re::internal::SerializeFuncKey,BOOL (*)(re::Serializer<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL),re::internal::HashSerializeFuncKey,re::EqualTo<re::internal::SerializeFuncKey>,false,true>::addOrReplace<BOOL (*&)(re::Serializer<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)>(uint64_t a1, unint64_t *a2, _QWORD *a3)
{
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unsigned int v12;

  v6 = *a2;
  if (!*(_QWORD *)a1)
  {
    LODWORD(v7) = 0;
    goto LABEL_8;
  }
  v7 = v6 % *(unsigned int *)(a1 + 24);
  v8 = *(unsigned int *)(*(_QWORD *)(a1 + 8) + 4 * v7);
  if ((_DWORD)v8 == 0x7FFFFFFF)
  {
LABEL_8:
    v12 = re::HashTable<re::internal::SerializeFuncKey,BOOL (*)(re::Serializer<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL),re::internal::HashSerializeFuncKey,re::EqualTo<re::internal::SerializeFuncKey>,false,true>::addEmplace<BOOL (*&)(re::Serializer<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)>(a1, v7, v6, a2, a3);
    ++*(_DWORD *)(a1 + 40);
    v11 = *(_QWORD *)(a1 + 16) + 24 * v12;
    return v11 + 16;
  }
  v9 = *(_QWORD *)(a1 + 16);
  while (*(_QWORD *)(v9 + 24 * v8 + 4) != v6)
  {
    v8 = *(_DWORD *)(v9 + 24 * v8) & 0x7FFFFFFF;
    if ((_DWORD)v8 == 0x7FFFFFFF)
      goto LABEL_8;
  }
  v10 = 3 * v8;
  *(_QWORD *)(v9 + 8 * v10 + 16) = *a3;
  ++*(_DWORD *)(a1 + 40);
  v11 = *(_QWORD *)(a1 + 16) + 8 * v10;
  return v11 + 16;
}

uint64_t re::HashTable<re::internal::SerializeFuncKey,BOOL (*)(re::Serializer<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL),re::internal::HashSerializeFuncKey,re::EqualTo<re::internal::SerializeFuncKey>,false,true>::addEmplace<BOOL (*&)(re::Serializer<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)>(uint64_t a1, unsigned int a2, unint64_t a3, _QWORD *a4, _QWORD *a5)
{
  uint64_t v8;
  int v9;
  uint64_t v11;
  int v12;
  uint64_t v13;

  v8 = *(unsigned int *)(a1 + 36);
  if ((_DWORD)v8 == 0x7FFFFFFF)
  {
    v8 = *(unsigned int *)(a1 + 32);
    v9 = v8;
    if ((_DWORD)v8 == *(_DWORD *)(a1 + 24))
    {
      re::HashTable<re::internal::SerializeFuncKey,BOOL (*)(re::Serializer<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL),re::internal::HashSerializeFuncKey,re::EqualTo<re::internal::SerializeFuncKey>,false,true>::setCapacity(a1, 2 * *(_DWORD *)(a1 + 28));
      a2 = a3 % *(unsigned int *)(a1 + 24);
      v9 = *(_DWORD *)(a1 + 32);
    }
    *(_DWORD *)(a1 + 32) = v9 + 1;
    v11 = *(_QWORD *)(a1 + 16);
    v12 = *(_DWORD *)(v11 + 24 * v8);
  }
  else
  {
    v11 = *(_QWORD *)(a1 + 16);
    v12 = *(_DWORD *)(v11 + 24 * v8);
    *(_DWORD *)(a1 + 36) = v12 & 0x7FFFFFFF;
  }
  v13 = 24 * v8;
  *(_DWORD *)(v11 + v13) = v12 | 0x80000000;
  *(_DWORD *)(*(_QWORD *)(a1 + 16) + v13) = *(_DWORD *)(*(_QWORD *)(a1 + 16) + 24 * v8) & 0x80000000 | *(_DWORD *)(*(_QWORD *)(a1 + 8) + 4 * a2);
  *(_QWORD *)(*(_QWORD *)(a1 + 16) + 24 * v8 + 4) = *a4;
  *(_QWORD *)(*(_QWORD *)(a1 + 16) + 24 * v8 + 16) = *a5;
  *(_DWORD *)(*(_QWORD *)(a1 + 8) + 4 * a2) = v8;
  ++*(_DWORD *)(a1 + 28);
  return v8;
}

void re::HashTable<re::internal::SerializeFuncKey,BOOL (*)(re::Serializer<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL),re::internal::HashSerializeFuncKey,re::EqualTo<re::internal::SerializeFuncKey>,false,true>::setCapacity(uint64_t a1, unsigned int a2)
{
  uint64_t v4;
  __int128 v5;
  uint64_t v6;
  unsigned int v7;
  __int128 v8;
  unsigned int v9;
  uint64_t v10;
  unint64_t v11;
  signed int v12;
  _BYTE v13[44];

  v4 = *(_QWORD *)a1;
  if (*(_QWORD *)a1)
  {
    if (a2 && *(_DWORD *)(a1 + 24) != a2 && *(_DWORD *)(a1 + 28) <= a2)
    {
      memset(v13, 0, 36);
      *(_QWORD *)&v13[36] = 0x7FFFFFFFLL;
      re::HashTable<re::internal::SerializeFuncKey,BOOL (*)(re::Serializer<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL),re::internal::HashSerializeFuncKey,re::EqualTo<re::internal::SerializeFuncKey>,false,true>::init((uint64_t)v13, v4, a2);
      v5 = *(_OWORD *)v13;
      *(_OWORD *)v13 = *(_OWORD *)a1;
      *(_OWORD *)a1 = v5;
      v6 = *(_QWORD *)&v13[16];
      *(_QWORD *)&v13[16] = *(_QWORD *)(a1 + 16);
      *(_QWORD *)(a1 + 16) = v6;
      v8 = *(_OWORD *)&v13[24];
      *(_OWORD *)&v13[24] = *(_OWORD *)(a1 + 24);
      v7 = *(_DWORD *)&v13[32];
      *(_OWORD *)(a1 + 24) = v8;
      v9 = v7;
      if (v7)
      {
        v10 = 0;
        v11 = 0;
        do
        {
          if ((*(_DWORD *)(*(_QWORD *)&v13[16] + v10) & 0x80000000) != 0)
          {
            re::HashTable<re::internal::SerializeFuncKey,BOOL (*)(re::Serializer<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL),re::internal::HashSerializeFuncKey,re::EqualTo<re::internal::SerializeFuncKey>,false,true>::addEmplace<BOOL (*&)(re::Serializer<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)>(a1, *(_QWORD *)(*(_QWORD *)&v13[16] + v10 + 4) % (unint64_t)*(unsigned int *)(a1 + 24), *(_QWORD *)(*(_QWORD *)&v13[16] + v10 + 4), *(_QWORD *)&v13[16] + v10 + 4, *(_QWORD *)&v13[16] + v10 + 16);
            v9 = *(_DWORD *)&v13[32];
          }
          ++v11;
          v10 += 24;
        }
        while (v11 < v9);
      }
      re::HashTable<re::internal::SerializeFuncKey,BOOL (*)(re::Serializer<re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL),re::internal::HashSerializeFuncKey,re::EqualTo<re::internal::SerializeFuncKey>,false,true>::deinit((uint64_t *)v13);
    }
  }
  else
  {
    if (a2)
      v12 = a2;
    else
      v12 = 3;
  }
}

void re::HashTable<re::internal::SerializeFuncKey,BOOL (*)(re::Serializer<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL),re::internal::HashSerializeFuncKey,re::EqualTo<re::internal::SerializeFuncKey>,false,true>::init(uint64_t a1, uint64_t a2, signed int a3)
{
  unint64_t v4;
  unsigned int *v5;
  unint64_t v6;
  unsigned int *v7;
  unsigned int *v8;
  signed int v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  char *v14;

  v4 = 245;
  v5 = (unsigned int *)&re::internal::PrimeHelper::s_primes;
  do
  {
    v6 = v4 >> 1;
    v7 = &v5[v4 >> 1];
    v9 = *v7;
    v8 = v7 + 1;
    v4 += ~(v4 >> 1);
    if (v9 < a3)
      v5 = v8;
    else
      v4 = v6;
  }
  while (v4);
  v10 = *v5;
  *(_QWORD *)a1 = a2;
  v11 = (4 * v10 + 15) & 0x7FFFFFFF0;
  v12 = (char *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 32))(a2, v11 + 24 * v10, 16);
  if (v12)
  {
    v14 = v12;
    *(_QWORD *)(a1 + 8) = v12;
    if ((_DWORD)v10)
      memset_pattern16(v12, &memset_pattern_9, 4 * v10);
    *(_QWORD *)(a1 + 16) = &v14[v11];
    *(_DWORD *)(a1 + 24) = v10;
    *(_DWORD *)(a1 + 40) = 0;
  }
  else
  {
    re::internal::assertLog((re::internal *)4, v13, "assertion failure: '%s' (%s:line %i) Out of memory.", "temp", "init", 575);
    _os_crash();
    __break(1u);
  }
}

BOOL re::SerializerV1<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>::serializeCString(_BYTE *a1, const char *a2, const re::TypeInfo *a3, const char **a4, re *a5, const re::TypeInfo *a6)
{
  int *v12;
  int v13;
  _anonymous_namespace_ *v14;
  int v15;
  _BOOL8 result;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  BOOL v20;
  const char *v21;
  uint64_t v22;
  int v23;
  __int128 v24;
  int v25;
  const char *v26;

  if (a5 != a6)
  {
    if (*(_QWORD *)a5 != *(_QWORD *)a6)
    {
      if (re::areSameTranslatedVersion(a5, a6, a3))
        goto LABEL_4;
LABEL_14:
      re::internal::setTypeMismatchError<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>((uint64_t)a1, a2, a5, a6);
      return 0;
    }
    v17 = **((_QWORD **)a5 + 2);
    v18 = **((_QWORD **)a6 + 2);
    if ((unsigned __int16)v17 != (unsigned __int16)v18)
      goto LABEL_14;
    v20 = WORD1(v17) == WORD1(v18);
    v19 = (v18 ^ v17) & 0xFFFFFF00000000;
    v20 = v20 && v19 == 0;
    if (!v20)
      goto LABEL_14;
  }
LABEL_4:
  if (!*a4)
  {
    LODWORD(v26) = 0;
    v14 = (_anonymous_namespace_ *)(a1 + 24);
    v23 = re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>::beginPointer((uint64_t)(a1 + 24), a2, (uint64_t)a3, (int *)&v26, 0);
    result = 0;
    if (!v23)
      return result;
    goto LABEL_22;
  }
  if (!a1[336]
    || (v26 = *a4,
        (v12 = (int *)re::HashTable<unsigned long long,re::PeerAttributionContext *,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::tryGet((uint64_t)(a1 + 344), (uint64_t *)&v26)) == 0))
  {
    v25 = 2;
    if ((re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>::beginPointer((uint64_t)(a1 + 24), a2, (uint64_t)a3, &v25, 0) & 1) != 0)
    {
      v26 = (const char *)strlen(*a4);
      result = re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>::beginString((uint64_t)(a1 + 24), a2, 0, (uint64_t *)&v26, 0);
      if (!result)
        return result;
      if (v26)
        re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>::serializeString((uint64_t)(a1 + 24), (uint64_t)*a4, 0);
      re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>::endString((_anonymous_namespace_ *)(a1 + 24));
      re::EncoderBinary<re::SeekableInputStream>::endPointer((_anonymous_namespace_ *)(a1 + 24));
      v21 = *a4;
      v22 = **((_QWORD **)a5 + 2);
      *(_QWORD *)&v24 = *(_QWORD *)a5;
      *((_QWORD *)&v24 + 1) = v22;
      re::internal::SharedObjectGraph::addObject((uint64_t)(a1 + 336), (uint64_t)v21, &v24);
      return a1[64] == 0;
    }
    return 0;
  }
  v13 = *v12;
  v25 = 1;
  LODWORD(v26) = v13;
  v14 = (_anonymous_namespace_ *)(a1 + 24);
  v15 = re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>::beginPointer((uint64_t)(a1 + 24), a2, (uint64_t)a3, &v25, 0);
  result = 0;
  if (!v15)
    return result;
  re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>::serializeReference((uint64_t)(a1 + 24), (unsigned int *)&v26, 0);
LABEL_22:
  re::EncoderBinary<re::SeekableInputStream>::endPointer(v14);
  return a1[64] == 0;
}

uint64_t re::SerializerV1<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>::serializePointer(uint64_t a1, const char *a2, uint64_t a3, char **a4, re::TypeInfo *this, const re::TypeInfo *a6, char a7)
{
  const re::TypeInfo *v14;
  _BOOL4 isPointerToPolymorphicType;
  int v16;
  char *v17;
  _DWORD *v18;
  _anonymous_namespace_ *v19;
  int v20;
  uint64_t result;
  uint64_t v22;
  uint64_t *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  int v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  BOOL v33;
  uint64_t *v34;
  uint64_t *v35;
  __int128 v36;
  int v37;
  _BYTE v38[32];
  __int128 v39;
  re::TypeRegistry *v40[4];
  _QWORD v41[4];
  char *v42;
  _BYTE v43[40];

  isPointerToPolymorphicType = re::TypeInfo::isPointerToPolymorphicType(this);
  if (this == a6)
    goto LABEL_4;
  if (*(_QWORD *)this == *(_QWORD *)a6)
  {
    v30 = **((_QWORD **)this + 2);
    v31 = **((_QWORD **)a6 + 2);
    if ((unsigned __int16)v30 == (unsigned __int16)v31)
    {
      v33 = WORD1(v30) == WORD1(v31);
      v32 = (v31 ^ v30) & 0xFFFFFF00000000;
      v33 = v33 && v32 == 0;
      if (v33)
        goto LABEL_4;
    }
  }
  else if (re::areSameTranslatedVersion(this, a6, v14))
  {
LABEL_4:
    v16 = 0;
    goto LABEL_5;
  }
  if (*((_BYTE *)a6 + 12) != 9
    || isPointerToPolymorphicType
    && (!re::TypeInfo::isPointerToPolymorphicType(a6)
     || (v34 = re::TypeInfo::name(this), v35 = re::TypeInfo::name(a6), !re::StringID::operator==(v34, v35))))
  {
    re::internal::setTypeMismatchError<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>(a1, a2, this, a6);
    return 0;
  }
  v16 = 1;
LABEL_5:
  re::TypeRegistry::typeInfo(*(_QWORD **)this, *(_QWORD *)(*((_QWORD *)this + 2) + 72), &v42);
  re::TypeInfo::TypeInfo((uint64_t)v41, (uint64_t)v43);
  re::TypeRegistry::typeInfo(*(_QWORD **)a6, *(_QWORD *)(*((_QWORD *)a6 + 2) + 72), &v42);
  re::TypeInfo::TypeInfo((uint64_t)v40, (uint64_t)v43);
  if (!isPointerToPolymorphicType || (a7 & 1) != 0)
  {
    v22 = *(_QWORD *)v41[2];
    *(_QWORD *)&v39 = v41[0];
    *((_QWORD *)&v39 + 1) = v22;
    if (v41[0])
      goto LABEL_8;
    goto LABEL_15;
  }
  re::internal::actualType(a4, (void **)this, &v39);
  if (!(_QWORD)v39)
  {
LABEL_15:
    v23 = re::TypeInfo::name(this);
    re::Serializer<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>::setError(a1, a2, "Failed to get actual type of polymorphic object. Type \"%s\".", v24, v25, v26, v27, v28, v23[1]);
    return 0;
  }
LABEL_8:
  re::TypeRegistry::typeInfo(*(re **)this, (re **)&v39, &v42);
  re::TypeInfo::TypeInfo((uint64_t)v38, (uint64_t)v43);
  if ((a7 & 1) != 0 || (v17 = *a4) == 0)
  {
    LODWORD(v42) = 0;
    v19 = (_anonymous_namespace_ *)(a1 + 24);
    v29 = re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>::beginPointer(a1 + 24, a2, a3, (int *)&v42, 0);
    result = 0;
    if (v29)
      goto LABEL_17;
    return result;
  }
  if (!*(_BYTE *)(a1 + 336))
  {
LABEL_33:
    v36 = v39;
    re::internal::SharedObjectGraph::beginObject((_QWORD *)(a1 + 336), (uint64_t)v17, &v36);
    LODWORD(v42) = 2;
    result = re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>::beginPointer(a1 + 24, a2, a3, (int *)&v42, 0);
    if ((_DWORD)result)
    {
      if (isPointerToPolymorphicType)
      {
        re::internal::serializePolymorphicObject<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>((_BYTE *)a1, a2, a3, (uint64_t)*a4, (re::TypeInfo *)v38, v40, v16);
      }
      else if (!*(_BYTE *)(a1 + 64))
      {
        (*(void (**)(uint64_t, const char *, _QWORD, char *, _QWORD *, re::TypeRegistry **, _QWORD))(*(_QWORD *)a1 + 72))(a1, a2, 0, *a4, v41, v40, 0);
      }
      re::EncoderBinary<re::SeekableInputStream>::endPointer((_anonymous_namespace_ *)(a1 + 24));
      if (*(_BYTE *)(a1 + 336))
      {
        --*(_QWORD *)(a1 + 488);
        ++*(_DWORD *)(a1 + 496);
      }
      return *(_BYTE *)(a1 + 64) == 0;
    }
    return result;
  }
  v42 = *a4;
  v18 = (_DWORD *)re::HashTable<unsigned long long,re::PeerAttributionContext *,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::tryGet(a1 + 344, (uint64_t *)&v42);
  if (!v18)
  {
    v17 = *a4;
    goto LABEL_33;
  }
  LODWORD(v42) = *v18;
  v37 = 1;
  v19 = (_anonymous_namespace_ *)(a1 + 24);
  v20 = re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>::beginPointer(a1 + 24, a2, a3, &v37, 0);
  result = 0;
  if (v20)
  {
    re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>::serializeReference(a1 + 24, (unsigned int *)&v42, 0);
LABEL_17:
    re::EncoderBinary<re::SeekableInputStream>::endPointer(v19);
    return *(_BYTE *)(a1 + 64) == 0;
  }
  return result;
}

uint64_t re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>::serializeReference(uint64_t result, unsigned int *a2, int a3)
{
  char v3;
  _anonymous_namespace_ *v5;

  if (!*(_BYTE *)(result + 40))
  {
    v3 = a3;
    v5 = (_anonymous_namespace_ *)result;
    result = re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>::beginObject(result, 0, 0, a3);
    if ((_DWORD)result)
    {
      re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>::serializeInt<unsigned int>((uint64_t)v5, "@ref", 0, a2, v3);
      return (uint64_t)re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>::endObject(v5);
    }
  }
  return result;
}

BOOL re::internal::serializePolymorphicObject<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>(_BYTE *a1, const char *a2, uint64_t a3, uint64_t a4, re::TypeInfo *a5, re::TypeRegistry **a6, int a7)
{
  re::TypeRegistry *v14;
  uint64_t *v15;
  _BOOL4 v16;
  _BOOL8 result;
  uint64_t *v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  _BYTE v25[8];
  uint64_t v26;
  _BYTE v27[32];

  re::TypeInfo::TypeInfo((uint64_t)v27, (uint64_t)a5);
  if (a7)
  {
    v14 = *a6;
    v15 = re::TypeInfo::name(a5);
    re::TypeRegistry::typeInfo(v14, (const re::StringID *)v15, v25);
    if (!v25[0])
    {
      v19 = re::TypeInfo::name(a5);
      re::Serializer<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>::setError((uint64_t)a1, a2, "No matching type found for polymorphic type \"%s\" to serialize.", v20, v21, v22, v23, v24, v19[1]);
      return 0;
    }
    re::TypeInfo::operator=((uint64_t)v27, (uint64_t)&v26);
  }
  v16 = re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>::beginObject((uint64_t)(a1 + 24), a2, a3, 0);
  result = 0;
  if (v16)
  {
    v18 = re::TypeInfo::polymorphicObjectName((re::TypeInfo *)v27);
    if (!a1[64])
      (*(void (**)(_BYTE *, uint64_t, _QWORD, uint64_t, re::TypeInfo *, _BYTE *, _QWORD))(*(_QWORD *)a1 + 72))(a1, v18[1], 0, a4, a5, v27, 0);
    re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>::endObject((_anonymous_namespace_ *)(a1 + 24));
    return a1[64] == 0;
  }
  return result;
}

uint64_t re::DynamicArray<re::ecs2::EntityAssetData>::deinit(uint64_t a1)
{
  uint64_t result;
  re::ecs2::EntityAssetData *v3;
  uint64_t v4;
  uint64_t v5;

  result = *(_QWORD *)a1;
  if (result)
  {
    v3 = *(re::ecs2::EntityAssetData **)(a1 + 32);
    if (v3)
    {
      v4 = *(_QWORD *)(a1 + 16);
      if (v4)
      {
        v5 = 112 * v4;
        do
        {
          re::ecs2::EntityAssetData::~EntityAssetData(v3);
          v3 = (re::ecs2::EntityAssetData *)((char *)v3 + 112);
          v5 -= 112;
        }
        while (v5);
        result = *(_QWORD *)a1;
        v3 = *(re::ecs2::EntityAssetData **)(a1 + 32);
      }
      result = (*(uint64_t (**)(uint64_t, re::ecs2::EntityAssetData *))(*(_QWORD *)result + 40))(result, v3);
    }
    *(_QWORD *)(a1 + 32) = 0;
    *(_QWORD *)(a1 + 8) = 0;
    *(_QWORD *)(a1 + 16) = 0;
    *(_QWORD *)a1 = 0;
    ++*(_DWORD *)(a1 + 24);
  }
  return result;
}

uint64_t re::HashTable<re::ecs2::Entity const*,unsigned long long,re::Hash<re::ecs2::Entity const*>,re::EqualTo<re::ecs2::Entity const*>,true,false>::addNew<unsigned long long &>(uint64_t a1, uint64_t *a2, _QWORD *a3)
{
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unsigned int v13;

  v6 = *a2;
  v7 = 0xBF58476D1CE4E5B9 * (*a2 ^ ((unint64_t)*a2 >> 30));
  v8 = (0x94D049BB133111EBLL * (v7 ^ (v7 >> 27))) ^ ((0x94D049BB133111EBLL * (v7 ^ (v7 >> 27))) >> 31);
  if (!*(_QWORD *)a1)
  {
    LODWORD(v9) = 0;
    goto LABEL_8;
  }
  v9 = v8 % *(unsigned int *)(a1 + 24);
  v10 = *(unsigned int *)(*(_QWORD *)(a1 + 8) + 4 * v9);
  if ((_DWORD)v10 == 0x7FFFFFFF)
  {
LABEL_8:
    v13 = re::HashTable<re::ecs2::Entity const*,unsigned long long,re::Hash<re::ecs2::Entity const*>,re::EqualTo<re::ecs2::Entity const*>,true,false>::addEmplace<unsigned long long &>(a1, v9, v8, a2, a3);
    ++*(_DWORD *)(a1 + 40);
    v12 = *(_QWORD *)(a1 + 16) + 32 * v13;
    return v12 + 24;
  }
  v11 = *(_QWORD *)(a1 + 16);
  while (*(_QWORD *)(v11 + 32 * v10 + 16) != v6)
  {
    v10 = *(_DWORD *)(v11 + 32 * v10 + 8) & 0x7FFFFFFF;
    if ((_DWORD)v10 == 0x7FFFFFFF)
      goto LABEL_8;
  }
  v12 = v11 + 32 * v10;
  return v12 + 24;
}

uint64_t re::HashTable<re::ecs2::Entity const*,unsigned long long,re::Hash<re::ecs2::Entity const*>,re::EqualTo<re::ecs2::Entity const*>,true,false>::addEmplace<unsigned long long &>(uint64_t a1, unsigned int a2, unint64_t a3, _QWORD *a4, _QWORD *a5)
{
  uint64_t v9;
  int v10;
  uint64_t v11;
  int v12;
  uint64_t v13;

  v9 = *(unsigned int *)(a1 + 36);
  if ((_DWORD)v9 == 0x7FFFFFFF)
  {
    v9 = *(unsigned int *)(a1 + 32);
    v10 = v9;
    if ((_DWORD)v9 == *(_DWORD *)(a1 + 24))
    {
      re::HashTable<re::ecs2::Entity const*,unsigned long long,re::Hash<re::ecs2::Entity const*>,re::EqualTo<re::ecs2::Entity const*>,true,false>::setCapacity(a1, 2 * *(_DWORD *)(a1 + 28));
      a2 = a3 % *(unsigned int *)(a1 + 24);
      v10 = *(_DWORD *)(a1 + 32);
    }
    *(_DWORD *)(a1 + 32) = v10 + 1;
    v11 = *(_QWORD *)(a1 + 16);
    v12 = *(_DWORD *)(v11 + 32 * v9 + 8);
  }
  else
  {
    v11 = *(_QWORD *)(a1 + 16);
    v12 = *(_DWORD *)(v11 + 32 * v9 + 8);
    *(_DWORD *)(a1 + 36) = v12 & 0x7FFFFFFF;
  }
  *(_DWORD *)(v11 + 32 * v9 + 8) = v12 | 0x80000000;
  *(_DWORD *)(*(_QWORD *)(a1 + 16) + 32 * v9 + 8) = *(_DWORD *)(*(_QWORD *)(a1 + 16) + 32 * v9 + 8) & 0x80000000 | *(_DWORD *)(*(_QWORD *)(a1 + 8) + 4 * a2);
  *(_QWORD *)(*(_QWORD *)(a1 + 16) + 32 * v9) = a3;
  *(_QWORD *)(*(_QWORD *)(a1 + 16) + 32 * v9 + 16) = *a4;
  v13 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(*(_QWORD *)(a1 + 16) + 32 * v9 + 24) = *a5;
  *(_DWORD *)(v13 + 4 * a2) = v9;
  ++*(_DWORD *)(a1 + 28);
  return v9;
}

void re::HashTable<re::ecs2::Entity const*,unsigned long long,re::Hash<re::ecs2::Entity const*>,re::EqualTo<re::ecs2::Entity const*>,true,false>::setCapacity(uint64_t a1, unsigned int a2)
{
  uint64_t v4;
  __int128 v5;
  uint64_t v6;
  unsigned int v7;
  __int128 v8;
  unsigned int v9;
  uint64_t v10;
  unint64_t v11;
  signed int v12;
  _BYTE v13[44];

  v4 = *(_QWORD *)a1;
  if (*(_QWORD *)a1)
  {
    if (a2 && *(_DWORD *)(a1 + 24) != a2 && *(_DWORD *)(a1 + 28) <= a2)
    {
      memset(v13, 0, 36);
      *(_QWORD *)&v13[36] = 0x7FFFFFFFLL;
      re::HashTable<re::ecs2::Entity const*,unsigned long long,re::Hash<re::ecs2::Entity const*>,re::EqualTo<re::ecs2::Entity const*>,true,false>::init((uint64_t)v13, v4, a2);
      v5 = *(_OWORD *)v13;
      *(_OWORD *)v13 = *(_OWORD *)a1;
      *(_OWORD *)a1 = v5;
      v6 = *(_QWORD *)&v13[16];
      *(_QWORD *)&v13[16] = *(_QWORD *)(a1 + 16);
      *(_QWORD *)(a1 + 16) = v6;
      v8 = *(_OWORD *)&v13[24];
      *(_OWORD *)&v13[24] = *(_OWORD *)(a1 + 24);
      v7 = *(_DWORD *)&v13[32];
      *(_OWORD *)(a1 + 24) = v8;
      v9 = v7;
      if (v7)
      {
        v10 = 0;
        v11 = 0;
        do
        {
          if ((*(_DWORD *)(*(_QWORD *)&v13[16] + v10 + 8) & 0x80000000) != 0)
          {
            re::HashTable<re::ecs2::Entity const*,unsigned long long,re::Hash<re::ecs2::Entity const*>,re::EqualTo<re::ecs2::Entity const*>,true,false>::addEmplace<unsigned long long &>(a1, *(_QWORD *)(*(_QWORD *)&v13[16] + v10) % (unint64_t)*(unsigned int *)(a1 + 24), *(_QWORD *)(*(_QWORD *)&v13[16] + v10), *(_QWORD *)&v13[16] + v10 + 16, *(_QWORD *)&v13[16] + v10 + 24);
            v9 = *(_DWORD *)&v13[32];
          }
          ++v11;
          v10 += 32;
        }
        while (v11 < v9);
      }
      re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)v13);
    }
  }
  else
  {
    if (a2)
      v12 = a2;
    else
      v12 = 3;
  }
}

void re::HashTable<re::ecs2::Entity const*,unsigned long long,re::Hash<re::ecs2::Entity const*>,re::EqualTo<re::ecs2::Entity const*>,true,false>::init(uint64_t a1, uint64_t a2, signed int a3)
{
  unint64_t v4;
  unsigned int *v5;
  unint64_t v6;
  unsigned int *v7;
  unsigned int *v8;
  signed int v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  char *v14;

  v4 = 245;
  v5 = (unsigned int *)&re::internal::PrimeHelper::s_primes;
  do
  {
    v6 = v4 >> 1;
    v7 = &v5[v4 >> 1];
    v9 = *v7;
    v8 = v7 + 1;
    v4 += ~(v4 >> 1);
    if (v9 < a3)
      v5 = v8;
    else
      v4 = v6;
  }
  while (v4);
  v10 = *v5;
  *(_QWORD *)a1 = a2;
  v11 = (4 * v10 + 15) & 0x7FFFFFFF0;
  v12 = (char *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 32))(a2, v11 + 32 * v10, 16);
  if (v12)
  {
    v14 = v12;
    *(_QWORD *)(a1 + 8) = v12;
    if ((_DWORD)v10)
      memset_pattern16(v12, &memset_pattern_9, 4 * v10);
    *(_QWORD *)(a1 + 16) = &v14[v11];
    *(_DWORD *)(a1 + 24) = v10;
    *(_DWORD *)(a1 + 40) = 0;
  }
  else
  {
    re::internal::assertLog((re::internal *)4, v13, "assertion failure: '%s' (%s:line %i) Out of memory.", "temp", "init", 575);
    _os_crash();
    __break(1u);
  }
}

__n128 re::DynamicArray<re::ecs2::ComponentHandleAssetData>::add(_anonymous_namespace_ *this, __n128 *a2)
{
  unint64_t v4;
  __n128 *v5;
  __n128 result;

  v4 = *((_QWORD *)this + 2);
  if (v4 >= *((_QWORD *)this + 1))
  {
    re::DynamicArray<re::ecs2::ComponentHandleAssetData>::growCapacity(this, v4 + 1);
    v4 = *((_QWORD *)this + 2);
  }
  v5 = (__n128 *)(*((_QWORD *)this + 4) + 24 * v4);
  result = *a2;
  v5[1].n128_u64[0] = a2[1].n128_u64[0];
  *v5 = result;
  ++*((_QWORD *)this + 2);
  ++*((_DWORD *)this + 6);
  return result;
}

_QWORD *re::DynamicArray<re::ecs2::ComponentHandleAssetData>::growCapacity(_QWORD *this, unint64_t a2)
{
  unint64_t v2;
  unint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  BOOL v6;
  unint64_t v7;

  v2 = this[1];
  if (v2 < a2)
  {
    v3 = a2;
    v4 = this;
    if (*this)
    {
      v5 = 2 * v2;
      v6 = v2 == 0;
      v7 = 8;
      if (!v6)
        v7 = v5;
      if (v7 > a2)
        a2 = v7;
      return re::DynamicArray<re::internal::AnimationCompositionChainEntry>::setCapacity(this, a2);
    }
    else
    {
      this = re::DynamicArray<re::internal::AnimationCompositionChainEntry>::setCapacity(v4, v3);
      ++*((_DWORD *)v4 + 6);
    }
  }
  return this;
}

_QWORD *re::DynamicArray<re::ecs2::EntityAssetData>::setCapacity(_QWORD *result, unint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v5;
  uint64_t v6;
  _QWORD *v7;
  re::ecs2::EntityAssetData *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v3 = result[1];
  if (v3 != a2)
  {
    v5 = result;
    if (result[2] <= a2)
    {
      result = (_QWORD *)*result;
      if (!*v5)
      {
        result = (_QWORD *)re::DynamicArray<re::ecs2::EntityAssetData>::setCapacity(v5, a2);
        ++*((_DWORD *)v5 + 6);
        return result;
      }
      if (a2)
      {
        if (is_mul_ok(a2, 0x70uLL))
        {
          v2 = 112 * a2;
          result = (_QWORD *)(*(uint64_t (**)(_QWORD *, unint64_t, uint64_t))(*result + 32))(result, 112 * a2, 8);
          if (result)
          {
            v7 = result;
            if (!v5[1])
              goto LABEL_16;
            goto LABEL_11;
          }
        }
        else
        {
          re::internal::assertLog((re::internal *)6, a2, "assertion failure: '%s' (%s:line %i) Size overflow in DynamicArray<T>::setCapacity(). Element size = %zu, capacity = %zu", "!overflow", "setCapacity", 615, 112, a2);
          _os_crash();
          __break(1u);
        }
        re::internal::assertLog((re::internal *)6, v6, "assertion failure: '%s' (%s:line %i) DynamicArray<T> is out of memory (tried to allocate %zu bytes from allocator '%s').", "newData", "setCapacity", 619, v2, *(_QWORD *)(*v5 + 8));
        result = (_QWORD *)_os_crash();
        __break(1u);
        return result;
      }
      v7 = 0;
      if (!v3)
      {
LABEL_16:
        v5[4] = v7;
        v5[1] = a2;
        return result;
      }
LABEL_11:
      v8 = (re::ecs2::EntityAssetData *)v5[4];
      v9 = v5[2];
      if (v9)
      {
        v10 = 112 * v9;
        v11 = (uint64_t)v7;
        do
        {
          re::ecs2::EntityAssetData::EntityAssetData(v11, (uint64_t)v8);
          re::ecs2::EntityAssetData::~EntityAssetData(v8);
          v8 = (re::ecs2::EntityAssetData *)((char *)v8 + 112);
          v11 += 112;
          v10 -= 112;
        }
        while (v10);
        v8 = (re::ecs2::EntityAssetData *)v5[4];
      }
      result = (_QWORD *)(*(uint64_t (**)(_QWORD, re::ecs2::EntityAssetData *))(*(_QWORD *)*v5 + 40))(*v5, v8);
      goto LABEL_16;
    }
  }
  return result;
}

uint64_t re::ecs2::EntityAssetData::EntityAssetData(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  *(_QWORD *)result = *(_QWORD *)a2;
  v2 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(result + 8) = *(_QWORD *)(result + 8) & 0xFFFFFFFFFFFFFFFELL | v2 & 1;
  *(_QWORD *)(result + 8) = *(_QWORD *)(a2 + 8) & 0xFFFFFFFFFFFFFFFELL | v2 & 1;
  *(_QWORD *)(result + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = &str_110;
  *(_BYTE *)(result + 24) = *(_BYTE *)(a2 + 24);
  *(_QWORD *)(result + 64) = 0;
  *(_DWORD *)(result + 56) = 0;
  *(_QWORD *)(result + 40) = 0;
  *(_QWORD *)(result + 48) = 0;
  *(_QWORD *)(result + 32) = 0;
  v3 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(result + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(result + 40) = v3;
  *(_QWORD *)(a2 + 32) = 0;
  *(_QWORD *)(a2 + 40) = 0;
  v4 = *(_QWORD *)(result + 48);
  *(_QWORD *)(result + 48) = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a2 + 48) = v4;
  v5 = *(_QWORD *)(result + 64);
  *(_QWORD *)(result + 64) = *(_QWORD *)(a2 + 64);
  *(_QWORD *)(a2 + 64) = v5;
  ++*(_DWORD *)(a2 + 56);
  ++*(_DWORD *)(result + 56);
  *(_QWORD *)(result + 104) = 0;
  *(_QWORD *)(result + 80) = 0;
  *(_QWORD *)(result + 88) = 0;
  *(_QWORD *)(result + 72) = 0;
  *(_DWORD *)(result + 96) = 0;
  v6 = *(_QWORD *)(a2 + 80);
  *(_QWORD *)(result + 72) = *(_QWORD *)(a2 + 72);
  *(_QWORD *)(result + 80) = v6;
  *(_QWORD *)(a2 + 72) = 0;
  *(_QWORD *)(a2 + 80) = 0;
  v7 = *(_QWORD *)(result + 88);
  *(_QWORD *)(result + 88) = *(_QWORD *)(a2 + 88);
  *(_QWORD *)(a2 + 88) = v7;
  v8 = *(_QWORD *)(result + 104);
  *(_QWORD *)(result + 104) = *(_QWORD *)(a2 + 104);
  *(_QWORD *)(a2 + 104) = v8;
  ++*(_DWORD *)(a2 + 96);
  ++*(_DWORD *)(result + 96);
  return result;
}

_QWORD *re::DynamicArray<re::ecs2::EntityAssetData>::growCapacity(_QWORD *this, unint64_t a2)
{
  unint64_t v2;
  unint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  BOOL v6;
  unint64_t v7;

  v2 = this[1];
  if (v2 < a2)
  {
    v3 = a2;
    v4 = this;
    if (*this)
    {
      v5 = 2 * v2;
      v6 = v2 == 0;
      v7 = 8;
      if (!v6)
        v7 = v5;
      if (v7 > a2)
        a2 = v7;
      return re::DynamicArray<re::ecs2::EntityAssetData>::setCapacity(this, a2);
    }
    else
    {
      this = re::DynamicArray<re::ecs2::EntityAssetData>::setCapacity(v4, v3);
      ++*((_DWORD *)v4 + 6);
    }
  }
  return this;
}

uint64_t *re::Serializer<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>::registerSerializeFuncs(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t *result;
  BOOL v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD v12[2];
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;

  v2 = (uint64_t)(a1 + 36);
  re::HashTable<re::internal::SerializeFuncKey,BOOL (*)(re::Serializer<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL),re::internal::HashSerializeFuncKey,re::EqualTo<re::internal::SerializeFuncKey>,false,true>::clear((uint64_t)(a1 + 36));
  (*(void (**)(_QWORD *))(*a1 + 64))(a1);
  v3 = a1[34];
  result = (uint64_t *)re::HashTable<re::StringID,re::StateParameterInt *,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::tryGet(v3 + 200, a1 + 1);
  if (v3)
    v5 = result == 0;
  else
    v5 = 1;
  if (!v5)
  {
    v6 = *result;
    v7 = a1[34];
    v12[0] = v3;
    v12[1] = v6;
    re::TypeRegistry::attributesByAttributeType(v7, (uint64_t)v12, (uint64_t)&v13);
    if (v14)
    {
      v8 = (uint64_t *)(v15 + 40);
      v9 = 48 * v14;
      do
      {
        v10 = *(v8 - 2);
        v11 = *v8;
        v8 += 6;
        v17 = v11;
        v16 = v10 | 0xFFFFFFFF00000000;
        re::HashTable<re::internal::SerializeFuncKey,BOOL (*)(re::Serializer<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL),re::internal::HashSerializeFuncKey,re::EqualTo<re::internal::SerializeFuncKey>,false,true>::addOrReplace<BOOL (*&)(re::Serializer<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)>(v2, &v16, &v17);
        v9 -= 48;
      }
      while (v9);
    }
    result = v13;
    if (v13)
    {
      if (v15)
        return (uint64_t *)(*(uint64_t (**)(void))(*v13 + 40))();
    }
  }
  return result;
}

void std::__function::__func<re::ecs2::ECSSerialization::loadFromAssetData(re::ecs2::Entity *,re::AssetService *,re::ecs2::SceneAssetData const&)::$_0,std::allocator<re::ecs2::ECSSerialization::loadFromAssetData(re::ecs2::Entity *,re::AssetService *,re::ecs2::SceneAssetData const&)::$_0>,void ()(re::internal::MeshSortGroupFixupTable *)>::~__func()
{
  JUMPOUT(0x2276933B8);
}

_QWORD *std::__function::__func<re::ecs2::ECSSerialization::loadFromAssetData(re::ecs2::Entity *,re::AssetService *,re::ecs2::SceneAssetData const&)::$_0,std::allocator<re::ecs2::ECSSerialization::loadFromAssetData(re::ecs2::Entity *,re::AssetService *,re::ecs2::SceneAssetData const&)::$_0>,void ()(re::internal::MeshSortGroupFixupTable *)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_24ED370F0;
  return result;
}

void std::__function::__func<re::ecs2::ECSSerialization::loadFromAssetData(re::ecs2::Entity *,re::AssetService *,re::ecs2::SceneAssetData const&)::$_0,std::allocator<re::ecs2::ECSSerialization::loadFromAssetData(re::ecs2::Entity *,re::AssetService *,re::ecs2::SceneAssetData const&)::$_0>,void ()(re::internal::MeshSortGroupFixupTable *)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_24ED370F0;
}

re *std::__function::__func<re::ecs2::ECSSerialization::loadFromAssetData(re::ecs2::Entity *,re::AssetService *,re::ecs2::SceneAssetData const&)::$_0,std::allocator<re::ecs2::ECSSerialization::loadFromAssetData(re::ecs2::Entity *,re::AssetService *,re::ecs2::SceneAssetData const&)::$_0>,void ()(re::internal::MeshSortGroupFixupTable *)>::operator()(uint64_t a1, re **a2)
{
  return re::internal::destroyPersistent<re::internal::MeshSortGroupFixupTable>(*a2);
}

uint64_t std::__function::__func<re::ecs2::ECSSerialization::loadFromAssetData(re::ecs2::Entity *,re::AssetService *,re::ecs2::SceneAssetData const&)::$_0,std::allocator<re::ecs2::ECSSerialization::loadFromAssetData(re::ecs2::Entity *,re::AssetService *,re::ecs2::SceneAssetData const&)::$_0>,void ()(re::internal::MeshSortGroupFixupTable *)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<re::ecs2::ECSSerialization::loadFromAssetData(re::ecs2::Entity *,re::AssetService *,re::ecs2::SceneAssetData const&)::$_0,std::allocator<re::ecs2::ECSSerialization::loadFromAssetData(re::ecs2::Entity *,re::AssetService *,re::ecs2::SceneAssetData const&)::$_0>,void ()(re::internal::MeshSortGroupFixupTable *)>::target_type()
{
}

re *re::internal::destroyPersistent<re::internal::MeshSortGroupFixupTable>(re *result)
{
  uint64_t *v1;
  uint64_t v2;
  double v3;

  if (result)
  {
    v1 = (uint64_t *)result;
    v2 = re::globalAllocators(result)[2];
    v3 = re::HashTable<unsigned long long,re::ecs2::MeshSortGroupToken,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::deinit(v1);
    return (re *)(*(uint64_t (**)(uint64_t, uint64_t *, double))(*(_QWORD *)v2 + 40))(v2, v1, v3);
  }
  return result;
}

double re::HashTable<unsigned long long,re::ecs2::MeshSortGroupToken,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::deinit(uint64_t *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  double result;

  v2 = *a1;
  if (v2)
  {
    v3 = *((unsigned int *)a1 + 8);
    if ((_DWORD)v3)
    {
      v4 = 0;
      v5 = 160 * v3;
      do
      {
        v6 = a1[2] + v4;
        v7 = *(_DWORD *)(v6 + 8);
        if (v7 < 0)
          *(_DWORD *)(v6 + 8) = v7 & 0x7FFFFFFF;
        v4 += 160;
      }
      while (v5 != v4);
    }
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v2 + 40))(v2, a1[1]);
    *((_DWORD *)a1 + 8) = 0;
    *(_OWORD *)a1 = 0u;
    *((_OWORD *)a1 + 1) = 0u;
    *(_QWORD *)&result = 0x7FFFFFFFLL;
    *(uint64_t *)((char *)a1 + 36) = 0x7FFFFFFFLL;
  }
  return result;
}

uint64_t re::DynamicArray<re::internal::EntityHandleHookupData>::deinit(uint64_t a1)
{
  uint64_t result;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;

  result = *(_QWORD *)a1;
  if (result)
  {
    v3 = *(_QWORD *)(a1 + 32);
    if (v3)
    {
      v4 = *(_QWORD *)(a1 + 16);
      if (v4)
      {
        v5 = 48 * v4;
        v6 = (uint64_t *)(v3 + 8);
        do
        {
          v6 = std::unique_ptr<re::RigHierarchy,std::function<void ()(re::RigHierarchy*)>>::~unique_ptr[abi:nn180100](v6)
             + 6;
          v5 -= 48;
        }
        while (v5);
        result = *(_QWORD *)a1;
        v3 = *(_QWORD *)(a1 + 32);
      }
      result = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)result + 40))(result, v3);
    }
    *(_QWORD *)(a1 + 32) = 0;
    *(_QWORD *)(a1 + 8) = 0;
    *(_QWORD *)(a1 + 16) = 0;
    *(_QWORD *)a1 = 0;
    ++*(_DWORD *)(a1 + 24);
  }
  return result;
}

void std::__function::__func<re::ecs2::ECSSerialization::loadFromAssetData(re::ecs2::Scene *,re::AssetService *,re::ecs2::SceneAssetData const&)::$_0,std::allocator<re::ecs2::ECSSerialization::loadFromAssetData(re::ecs2::Scene *,re::AssetService *,re::ecs2::SceneAssetData const&)::$_0>,void ()(re::internal::EntityHandleHookupTable *)>::~__func()
{
  JUMPOUT(0x2276933B8);
}

_QWORD *std::__function::__func<re::ecs2::ECSSerialization::loadFromAssetData(re::ecs2::Scene *,re::AssetService *,re::ecs2::SceneAssetData const&)::$_0,std::allocator<re::ecs2::ECSSerialization::loadFromAssetData(re::ecs2::Scene *,re::AssetService *,re::ecs2::SceneAssetData const&)::$_0>,void ()(re::internal::EntityHandleHookupTable *)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_24ED37180;
  return result;
}

void std::__function::__func<re::ecs2::ECSSerialization::loadFromAssetData(re::ecs2::Scene *,re::AssetService *,re::ecs2::SceneAssetData const&)::$_0,std::allocator<re::ecs2::ECSSerialization::loadFromAssetData(re::ecs2::Scene *,re::AssetService *,re::ecs2::SceneAssetData const&)::$_0>,void ()(re::internal::EntityHandleHookupTable *)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_24ED37180;
}

re *std::__function::__func<re::ecs2::ECSSerialization::loadFromAssetData(re::ecs2::Scene *,re::AssetService *,re::ecs2::SceneAssetData const&)::$_0,std::allocator<re::ecs2::ECSSerialization::loadFromAssetData(re::ecs2::Scene *,re::AssetService *,re::ecs2::SceneAssetData const&)::$_0>,void ()(re::internal::EntityHandleHookupTable *)>::operator()(uint64_t a1, uint64_t *a2)
{
  return re::internal::destroyPersistent<re::internal::EntityHandleHookupTable>((re *)"operator()", 470, *a2);
}

uint64_t std::__function::__func<re::ecs2::ECSSerialization::loadFromAssetData(re::ecs2::Scene *,re::AssetService *,re::ecs2::SceneAssetData const&)::$_0,std::allocator<re::ecs2::ECSSerialization::loadFromAssetData(re::ecs2::Scene *,re::AssetService *,re::ecs2::SceneAssetData const&)::$_0>,void ()(re::internal::EntityHandleHookupTable *)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<re::ecs2::ECSSerialization::loadFromAssetData(re::ecs2::Scene *,re::AssetService *,re::ecs2::SceneAssetData const&)::$_0,std::allocator<re::ecs2::ECSSerialization::loadFromAssetData(re::ecs2::Scene *,re::AssetService *,re::ecs2::SceneAssetData const&)::$_0>,void ()(re::internal::EntityHandleHookupTable *)>::target_type()
{
}

void std::__function::__func<re::ecs2::ECSSerialization::loadFromAssetData(re::ecs2::Scene *,re::AssetService *,re::ecs2::SceneAssetData const&)::$_1,std::allocator<re::ecs2::ECSSerialization::loadFromAssetData(re::ecs2::Scene *,re::AssetService *,re::ecs2::SceneAssetData const&)::$_1>,void ()(re::internal::MeshSortGroupFixupTable *)>::~__func()
{
  JUMPOUT(0x2276933B8);
}

_QWORD *std::__function::__func<re::ecs2::ECSSerialization::loadFromAssetData(re::ecs2::Scene *,re::AssetService *,re::ecs2::SceneAssetData const&)::$_1,std::allocator<re::ecs2::ECSSerialization::loadFromAssetData(re::ecs2::Scene *,re::AssetService *,re::ecs2::SceneAssetData const&)::$_1>,void ()(re::internal::MeshSortGroupFixupTable *)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_24ED37210;
  return result;
}

void std::__function::__func<re::ecs2::ECSSerialization::loadFromAssetData(re::ecs2::Scene *,re::AssetService *,re::ecs2::SceneAssetData const&)::$_1,std::allocator<re::ecs2::ECSSerialization::loadFromAssetData(re::ecs2::Scene *,re::AssetService *,re::ecs2::SceneAssetData const&)::$_1>,void ()(re::internal::MeshSortGroupFixupTable *)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_24ED37210;
}

re *std::__function::__func<re::ecs2::ECSSerialization::loadFromAssetData(re::ecs2::Scene *,re::AssetService *,re::ecs2::SceneAssetData const&)::$_1,std::allocator<re::ecs2::ECSSerialization::loadFromAssetData(re::ecs2::Scene *,re::AssetService *,re::ecs2::SceneAssetData const&)::$_1>,void ()(re::internal::MeshSortGroupFixupTable *)>::operator()(uint64_t a1, re **a2)
{
  return re::internal::destroyPersistent<re::internal::MeshSortGroupFixupTable>(*a2);
}

uint64_t std::__function::__func<re::ecs2::ECSSerialization::loadFromAssetData(re::ecs2::Scene *,re::AssetService *,re::ecs2::SceneAssetData const&)::$_1,std::allocator<re::ecs2::ECSSerialization::loadFromAssetData(re::ecs2::Scene *,re::AssetService *,re::ecs2::SceneAssetData const&)::$_1>,void ()(re::internal::MeshSortGroupFixupTable *)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<re::ecs2::ECSSerialization::loadFromAssetData(re::ecs2::Scene *,re::AssetService *,re::ecs2::SceneAssetData const&)::$_1,std::allocator<re::ecs2::ECSSerialization::loadFromAssetData(re::ecs2::Scene *,re::AssetService *,re::ecs2::SceneAssetData const&)::$_1>,void ()(re::internal::MeshSortGroupFixupTable *)>::target_type()
{
}

uint64_t re::ecs2::EntityComponentCollection::operator[](uint64_t a1, unint64_t a2)
{
  if (*(_QWORD *)(a1 + 24) <= a2)
  {
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  return *(_QWORD *)(a1 + 40) + 8 * a2;
}

uint64_t re::Serializer<re::EncoderOPACK<re::FixedArrayInputStream>>::open(_QWORD *a1, uint64_t a2, uint64_t *a3, uint64_t *a4)
{
  uint64_t v8;
  double v9;

  v8 = a1[26];
  if (*(_DWORD *)(v8 + 24) != *((_DWORD *)a1 + 54))
  {
    (*(void (**)(_QWORD *))(*a1 + 40))(a1);
    re::HashTable<re::internal::SerializeFuncKey,BOOL (*)(re::Serializer<re::EncoderOPACK<re::FixedArrayInputStream>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL),re::internal::HashSerializeFuncKey,re::EqualTo<re::internal::SerializeFuncKey>,false,true>::clear((uint64_t)(a1 + 28));
    a1[26] = v8;
    re::HashTable<re::internal::SerializeFuncKey,BOOL (*)(re::Serializer<re::EncoderOPACK<re::FixedArrayInputStream>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL),re::internal::HashSerializeFuncKey,re::EqualTo<re::internal::SerializeFuncKey>,false,true>::clear((uint64_t)(a1 + 28));
    re::Serializer<re::EncoderOPACK<re::FixedArrayInputStream>>::registerSerializeFuncs(a1);
    (*(void (**)(_QWORD *))(*a1 + 32))(a1);
    *((_DWORD *)a1 + 54) = *(_DWORD *)(a1[26] + 24);
  }
  v9 = re::Encoder<re::EncoderBinary<re::DynamicArrayBufferedOutputStream>,re::DynamicArrayBufferedOutputStream>::open((uint64_t)(a1 + 3), a2, 0, 0xFFFFFFFFLL, a3, a4);
  return (*(uint64_t (**)(_QWORD *, double))(*a1 + 48))(a1, v9);
}

uint64_t *allocInfo_AudioComponentDescription(void)
{
  unsigned __int8 v0;

  v0 = atomic_load((unsigned __int8 *)&_MergedGlobals_78);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&_MergedGlobals_78))
  {
    ArcSharedObject::ArcSharedObject((ArcSharedObject *)&qword_2540FF618, 0);
    *(uint64_t *)((char *)&qword_2540FF628 + 6) = 0;
    qword_2540FF628 = 0;
    qword_2540FF638 = 0;
    qword_2540FF640 = 0xFFFFFFFFLL;
    qword_2540FF618 = (uint64_t)&off_24ED7DAA8;
    qword_2540FF648 = (uint64_t)"AudioComponentDescription";
    dword_2540FF650 = 0;
    xmmword_2540FF658 = 0u;
    unk_2540FF668 = 0u;
    xmmword_2540FF678 = 0u;
    qword_2540FF688 = 0;
    __cxa_guard_release(&_MergedGlobals_78);
  }
  return &qword_2540FF618;
}

void initInfo_AudioComponentDescription(re::IntrospectionBase *a1)
{
  const re::IntrospectionBase *v2;
  unsigned __int8 v3;
  re *v4;
  uint64_t *v5;
  const re::IntrospectionBase *v6;
  void *v7;
  uint64_t v8;
  uint64_t *v9;
  const re::IntrospectionBase *v10;
  void *v11;
  uint64_t v12;
  uint64_t *v13;
  const re::IntrospectionBase *v14;
  void *v15;
  uint64_t v16;
  uint64_t *v17;
  const re::IntrospectionBase *v18;
  void *v19;
  uint64_t v20;
  uint64_t *v21;
  const re::IntrospectionBase *v22;
  void *v23;
  uint64_t v24;
  __int128 v25;
  _QWORD v26[2];
  __int128 v27;

  v26[0] = 0x671391F4143CF2ALL;
  v26[1] = "AudioComponentDescription";
  re::StringID::destroyString((re::StringID *)v26);
  *((_OWORD *)a1 + 2) = v27;
  v3 = atomic_load((unsigned __int8 *)&qword_2540FF590);
  if ((v3 & 1) == 0)
  {
    v4 = (re *)__cxa_guard_acquire(&qword_2540FF590);
    if ((_DWORD)v4)
    {
      v5 = re::introspectionAllocator(v4);
      v7 = re::introspect_uint32_t((re *)1, v6);
      v8 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v5 + 32))(v5, 72, 8);
      *(_DWORD *)v8 = 1;
      *(_QWORD *)(v8 + 8) = "componentType";
      *(_QWORD *)(v8 + 16) = v7;
      *(_QWORD *)(v8 + 24) = 0;
      *(_QWORD *)(v8 + 32) = 1;
      *(_DWORD *)(v8 + 40) = 0;
      *(_QWORD *)(v8 + 48) = 0;
      *(_QWORD *)(v8 + 56) = 0;
      *(_DWORD *)(v8 + 64) = 0;
      qword_2540FF5C8 = v8;
      v9 = re::introspectionAllocator((re *)v8);
      v11 = re::introspect_uint32_t((re *)1, v10);
      v12 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v9 + 32))(v9, 72, 8);
      *(_DWORD *)v12 = 1;
      *(_QWORD *)(v12 + 8) = "componentSubType";
      *(_QWORD *)(v12 + 16) = v11;
      *(_QWORD *)(v12 + 24) = 0;
      *(_QWORD *)(v12 + 32) = 0x400000002;
      *(_DWORD *)(v12 + 40) = 0;
      *(_QWORD *)(v12 + 48) = 0;
      *(_QWORD *)(v12 + 56) = 0;
      *(_DWORD *)(v12 + 64) = 0;
      qword_2540FF5D0 = v12;
      v13 = re::introspectionAllocator((re *)v12);
      v15 = re::introspect_uint32_t((re *)1, v14);
      v16 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v13 + 32))(v13, 72, 8);
      *(_DWORD *)v16 = 1;
      *(_QWORD *)(v16 + 8) = "componentManufacturer";
      *(_QWORD *)(v16 + 16) = v15;
      *(_QWORD *)(v16 + 24) = 0;
      *(_QWORD *)(v16 + 32) = 0x800000003;
      *(_DWORD *)(v16 + 40) = 0;
      *(_QWORD *)(v16 + 48) = 0;
      *(_QWORD *)(v16 + 56) = 0;
      *(_DWORD *)(v16 + 64) = 0;
      qword_2540FF5D8 = v16;
      v17 = re::introspectionAllocator((re *)v16);
      v19 = re::introspect_uint32_t((re *)1, v18);
      v20 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v17 + 32))(v17, 72, 8);
      *(_DWORD *)v20 = 1;
      *(_QWORD *)(v20 + 8) = "componentFlags";
      *(_QWORD *)(v20 + 16) = v19;
      *(_QWORD *)(v20 + 24) = 0;
      *(_QWORD *)(v20 + 32) = 0xC00000004;
      *(_DWORD *)(v20 + 40) = 0;
      *(_QWORD *)(v20 + 48) = 0;
      *(_QWORD *)(v20 + 56) = 0;
      *(_DWORD *)(v20 + 64) = 0;
      qword_2540FF5E0 = v20;
      v21 = re::introspectionAllocator((re *)v20);
      v23 = re::introspect_uint32_t((re *)1, v22);
      v24 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v21 + 32))(v21, 72, 8);
      *(_DWORD *)v24 = 1;
      *(_QWORD *)(v24 + 8) = "componentFlagsMask";
      *(_QWORD *)(v24 + 16) = v23;
      *(_QWORD *)(v24 + 24) = 0;
      *(_QWORD *)(v24 + 32) = 0x1000000005;
      *(_DWORD *)(v24 + 40) = 0;
      *(_QWORD *)(v24 + 48) = 0;
      *(_QWORD *)(v24 + 56) = 0;
      *(_DWORD *)(v24 + 64) = 0;
      qword_2540FF5E8 = v24;
      __cxa_guard_release(&qword_2540FF590);
    }
  }
  *((_QWORD *)a1 + 2) = 0x1400000008;
  *((_DWORD *)a1 + 6) = 4;
  *((_WORD *)a1 + 14) = 1;
  *((_DWORD *)a1 + 14) = 5;
  *((_QWORD *)a1 + 8) = &qword_2540FF5C8;
  *((_QWORD *)a1 + 9) = re::internal::defaultConstruct<AudioComponentDescription>;
  *((_QWORD *)a1 + 10) = re::internal::defaultDestruct<AudioComponentDescription>;
  *((_QWORD *)a1 + 11) = 0;
  *((_QWORD *)a1 + 12) = 0;
  *((_QWORD *)a1 + 13) = re::internal::defaultConstructV2<AudioComponentDescription>;
  *((_QWORD *)a1 + 14) = re::internal::defaultDestructV2<AudioComponentDescription>;
  re::IntrospectionRegistry::add(a1, v2);
  v25 = v27;
}

void sub_22532477C(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_2540FF590);
  _Unwind_Resume(a1);
}

uint64_t *re::allocInfo_AudioGeneratorAsset(re *this)
{
  unsigned __int8 v1;
  uint64_t v3;

  v1 = atomic_load((unsigned __int8 *)&qword_2540FF5A0);
  if ((v1 & 1) == 0 && __cxa_guard_acquire(&qword_2540FF5A0))
  {
    ArcSharedObject::ArcSharedObject((ArcSharedObject *)&qword_2540FF690, 0);
    *(_QWORD *)(v3 + 22) = 0;
    qword_2540FF6A0 = 0;
    qword_2540FF6B0 = 0;
    qword_2540FF6B8 = 0xFFFFFFFFLL;
    qword_2540FF690 = (uint64_t)&off_24ED7DAA8;
    qword_2540FF6C0 = (uint64_t)"AudioGeneratorAsset";
    dword_2540FF6C8 = 0;
    xmmword_2540FF6D0 = 0u;
    unk_2540FF6E0 = 0u;
    xmmword_2540FF6F0 = 0u;
    qword_2540FF700 = 0;
    __cxa_guard_release(&qword_2540FF5A0);
  }
  return &qword_2540FF690;
}

void re::initInfo_AudioGeneratorAsset(re *this, re::IntrospectionBase *a2)
{
  const re::IntrospectionBase *v3;
  unsigned __int8 v4;
  re *v5;
  uint64_t *v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t *v9;
  const re::IntrospectionBase *v10;
  void *v11;
  uint64_t v12;
  uint64_t *v13;
  const re::IntrospectionBase *v14;
  void *v15;
  uint64_t v16;
  uint64_t *v17;
  const re::IntrospectionBase *v18;
  void *v19;
  uint64_t v20;
  uint64_t *v21;
  const re::IntrospectionBase *v22;
  uint64_t *v23;
  uint64_t v24;
  __int128 v25;
  _QWORD v26[2];
  __int128 v27;

  v26[0] = 0x4E48AFB12BABDA66;
  v26[1] = "AudioGeneratorAsset";
  re::StringID::destroyString((re::StringID *)v26);
  *((_OWORD *)this + 2) = v27;
  v4 = atomic_load((unsigned __int8 *)&qword_2540FF5A8);
  if ((v4 & 1) == 0)
  {
    v5 = (re *)__cxa_guard_acquire(&qword_2540FF5A8);
    if ((_DWORD)v5)
    {
      v6 = re::introspectionAllocator(v5);
      v7 = (uint64_t *)qword_2540FF598;
      if (!qword_2540FF598)
      {
        v7 = allocInfo_AudioComponentDescription();
        qword_2540FF598 = (uint64_t)v7;
        initInfo_AudioComponentDescription((re::IntrospectionBase *)v7);
      }
      v8 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v6 + 32))(v6, 72, 8);
      *(_DWORD *)v8 = 1;
      *(_QWORD *)(v8 + 8) = "componentDescription";
      *(_QWORD *)(v8 + 16) = v7;
      *(_QWORD *)(v8 + 24) = 0;
      *(_QWORD *)(v8 + 32) = 0x4400000001;
      *(_DWORD *)(v8 + 40) = 0;
      *(_QWORD *)(v8 + 48) = 0;
      *(_QWORD *)(v8 + 56) = 0;
      *(_DWORD *)(v8 + 64) = 0;
      qword_2540FF5F0 = v8;
      v9 = re::introspectionAllocator((re *)v8);
      v11 = re::introspect_uint32_t((re *)1, v10);
      v12 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v9 + 32))(v9, 72, 8);
      *(_DWORD *)v12 = 1;
      *(_QWORD *)(v12 + 8) = "layoutTag";
      *(_QWORD *)(v12 + 16) = v11;
      *(_QWORD *)(v12 + 24) = 0;
      *(_QWORD *)(v12 + 32) = 2;
      *(_DWORD *)(v12 + 40) = 0;
      *(_QWORD *)(v12 + 48) = 0;
      *(_QWORD *)(v12 + 56) = 0;
      *(_DWORD *)(v12 + 64) = 0;
      qword_2540FF5F8 = v12;
      v13 = re::introspectionAllocator((re *)v12);
      v15 = re::introspect_float((re *)1, v14);
      v16 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v13 + 32))(v13, 72, 8);
      *(_DWORD *)v16 = 1;
      *(_QWORD *)(v16 + 8) = "referenceLevel";
      *(_QWORD *)(v16 + 16) = v15;
      *(_QWORD *)(v16 + 24) = 0;
      *(_QWORD *)(v16 + 32) = 0x4000000003;
      *(_DWORD *)(v16 + 40) = 0;
      *(_QWORD *)(v16 + 48) = 0;
      *(_QWORD *)(v16 + 56) = 0;
      *(_DWORD *)(v16 + 64) = 0;
      qword_2540FF600 = v16;
      v17 = re::introspectionAllocator((re *)v16);
      v19 = re::introspect_double((re *)1, v18);
      v20 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v17 + 32))(v17, 72, 8);
      *(_DWORD *)v20 = 1;
      *(_QWORD *)(v20 + 8) = "maximumAlignmentLatency";
      *(_QWORD *)(v20 + 16) = v19;
      *(_QWORD *)(v20 + 24) = 0;
      *(_QWORD *)(v20 + 32) = 0x6000000005;
      *(_DWORD *)(v20 + 40) = 0;
      *(_QWORD *)(v20 + 48) = 0;
      *(_QWORD *)(v20 + 56) = 0;
      *(_DWORD *)(v20 + 64) = 0;
      qword_2540FF608 = v20;
      v21 = re::introspectionAllocator((re *)v20);
      v23 = re::IntrospectionInfo<re::Optional<re::DynamicString>>::get(1, v22);
      v24 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v21 + 32))(v21, 72, 8);
      *(_DWORD *)v24 = 1;
      *(_QWORD *)(v24 + 8) = "mixGroupName";
      *(_QWORD *)(v24 + 16) = v23;
      *(_QWORD *)(v24 + 24) = 0;
      *(_QWORD *)(v24 + 32) = 0x800000006;
      *(_DWORD *)(v24 + 40) = 0;
      *(_QWORD *)(v24 + 48) = 0;
      *(_QWORD *)(v24 + 56) = 0;
      *(_DWORD *)(v24 + 64) = 0;
      qword_2540FF610 = v24;
      __cxa_guard_release(&qword_2540FF5A8);
    }
  }
  *((_QWORD *)this + 2) = 0x6800000008;
  *((_DWORD *)this + 6) = 8;
  *((_WORD *)this + 14) = 0;
  *((_DWORD *)this + 14) = 5;
  *((_QWORD *)this + 8) = &qword_2540FF5F0;
  *((_QWORD *)this + 9) = re::internal::defaultConstruct<re::AudioGeneratorAsset>;
  *((_QWORD *)this + 10) = re::internal::defaultDestruct<re::AudioGeneratorAsset>;
  *((_QWORD *)this + 11) = 0;
  *((_QWORD *)this + 12) = 0;
  *((_QWORD *)this + 13) = re::internal::defaultConstructV2<re::AudioGeneratorAsset>;
  *((_QWORD *)this + 14) = re::internal::defaultDestructV2<re::AudioGeneratorAsset>;
  re::IntrospectionRegistry::add(this, v3);
  v25 = v27;
}

void sub_225324B94(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_2540FF5A8);
  _Unwind_Resume(a1);
}

int32x2_t re::internal::defaultConstruct<re::AudioGeneratorAsset>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int32x2_t result;

  *(_DWORD *)a3 = 6553601;
  *(_BYTE *)(a3 + 8) = 0;
  *(_BYTE *)(a3 + 48) = 0;
  *(_DWORD *)(a3 + 64) = 1117126656;
  result = vdup_n_s32(0x62616464u);
  *(_BYTE *)(a3 + 56) = 0;
  *(int32x2_t *)(a3 + 68) = result;
  *(_DWORD *)(a3 + 76) = 1650549860;
  *(_QWORD *)(a3 + 96) = 0;
  *(_QWORD *)(a3 + 80) = 0;
  *(_BYTE *)(a3 + 88) = 0;
  return result;
}

void re::internal::defaultDestruct<re::AudioGeneratorAsset>(int a1, int a2, id *this)
{
  re::AudioGeneratorAsset::~AudioGeneratorAsset(this);
}

int32x2_t re::internal::defaultConstructV2<re::AudioGeneratorAsset>(uint64_t a1)
{
  int32x2_t result;

  *(_DWORD *)a1 = 6553601;
  *(_BYTE *)(a1 + 8) = 0;
  *(_BYTE *)(a1 + 48) = 0;
  *(_DWORD *)(a1 + 64) = 1117126656;
  result = vdup_n_s32(0x62616464u);
  *(_BYTE *)(a1 + 56) = 0;
  *(int32x2_t *)(a1 + 68) = result;
  *(_DWORD *)(a1 + 76) = 1650549860;
  *(_QWORD *)(a1 + 96) = 0;
  *(_QWORD *)(a1 + 80) = 0;
  *(_BYTE *)(a1 + 88) = 0;
  return result;
}

void re::AudioGeneratorAsset::~AudioGeneratorAsset(id *this)
{
  id v2;

  if (*((_BYTE *)this + 56))

  if (*((_BYTE *)this + 8))
  {
    v2 = this[2];
    if (v2)
    {
      if (((_BYTE)this[3] & 1) != 0)
        (*(void (**)(id, id))(*(_QWORD *)v2 + 40))(v2, this[4]);
      *((_OWORD *)this + 1) = 0u;
      *((_OWORD *)this + 2) = 0u;
    }
  }
}

uint64_t *re::AudioGeneratorAsset::assetType(re::AudioGeneratorAsset *this)
{
  unsigned __int8 v1;

  {
    re::AudioGeneratorAsset::assetType(void)::type = (uint64_t)"AudioGenerator";
    qword_255827650 = 0;
    re::AssetType::generateCompiledExtension((re::AssetType *)&re::AudioGeneratorAsset::assetType(void)::type);
  }
  return &re::AudioGeneratorAsset::assetType(void)::type;
}

uint64_t re::AudioGeneratorAsset::instantiateAudioUnit(uint64_t a1, uint64_t a2)
{
  void *v2;
  _QWORD *v3;
  uint64_t result;
  uint64_t v5;
  __int128 v6;
  int v7;
  _QWORD v8[4];
  _BYTE v9[24];
  _BYTE *v10;
  uint64_t v11;

  v11 = *MEMORY[0x24BDAC8D0];
  v2 = (void *)MEMORY[0x24BDB6BD8];
  v6 = *(_OWORD *)(a1 + 68);
  v7 = *(_DWORD *)(a1 + 84);
  v8[0] = MEMORY[0x24BDAC760];
  v8[1] = 3321888768;
  v8[2] = ___ZNK2re19AudioGeneratorAsset20instantiateAudioUnitENSt3__18functionIFvP11AUAudioUnitP7NSErrorEEE_block_invoke;
  v8[3] = &__block_descriptor_64_ea8_32c49_ZTSNSt3__18functionIFvP11AUAudioUnitP7NSErrorEEE_e33_v24__0__AUAudioUnit_8__NSError_16l;
  v3 = v9;
  std::__function::__value_func<void ()(void)>::__value_func[abi:nn180100]((uint64_t)v9, a2);
  result = objc_msgSend(v2, "instantiateWithComponentDescription:options:completionHandler:", &v6, 0, v8);
  if (v10 == v9)
  {
    v5 = 4;
  }
  else
  {
    if (!v10)
      return result;
    v5 = 5;
    v3 = v10;
  }
  return (*(uint64_t (**)(_QWORD *))(*v3 + 8 * v5))(v3);
}

void sub_225324E08(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, _QWORD *a19)
{
  uint64_t v19;
  _QWORD *v20;
  _QWORD *v21;
  uint64_t v24;
  _QWORD *v25;
  void *v26;

  v21 = v20;
  if (a19 == v21)
  {
    v25 = v21;
    v24 = 4;
  }
  else
  {
    if (!a19)
      goto LABEL_6;
    v24 = 5;
    v25 = a19;
  }
  (*(void (**)(void))(*v25 + 8 * v24))();
LABEL_6:
  if (a2 == 1)
  {
    objc_begin_catch(exception_object);
    objc_msgSend(MEMORY[0x24BDD1540], "errorWithDomain:code:userInfo:", CFSTR("REKit"), 0, 0);
    v26 = (void *)objc_claimAutoreleasedReturnValue();
    std::function<void ()(AUAudioUnit *,NSError *)>::operator()(v19, 0, v26);

    objc_end_catch();
    JUMPOUT(0x225324DD8);
  }
  _Unwind_Resume(exception_object);
}

void ___ZNK2re19AudioGeneratorAsset20instantiateAudioUnitENSt3__18functionIFvP11AUAudioUnitP7NSErrorEEE_block_invoke(uint64_t a1, void *a2, void *a3)
{
  std::function<void ()(AUAudioUnit *,NSError *)>::operator()(a1 + 32, a2, a3);
}

void std::function<void ()(AUAudioUnit *,NSError *)>::operator()(uint64_t a1, void *a2, void *a3)
{
  uint64_t v5;
  id v6;
  id v7;

  v7 = a2;
  v6 = a3;
  v5 = *(_QWORD *)(a1 + 24);
  if (v5)
  {
    (*(void (**)(uint64_t, id *, id *))(*(_QWORD *)v5 + 48))(v5, &v7, &v6);

  }
  else
  {
    std::__throw_bad_function_call[abi:nn180100]();
    __break(1u);
  }
}

void sub_225324F3C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, void *a10)
{

  _Unwind_Resume(a1);
}

uint64_t __copy_helper_block_ea8_32c49_ZTSNSt3__18functionIFvP11AUAudioUnitP7NSErrorEEE(uint64_t a1, uint64_t a2)
{
  return std::__function::__value_func<void ()(void)>::__value_func[abi:nn180100](a1 + 32, a2 + 32);
}

_QWORD *__destroy_helper_block_ea8_32c49_ZTSNSt3__18functionIFvP11AUAudioUnitP7NSErrorEEE(uint64_t a1)
{
  _QWORD *v1;
  _QWORD *result;
  uint64_t v3;

  v1 = (_QWORD *)(a1 + 32);
  result = *(_QWORD **)(a1 + 56);
  if (result == v1)
  {
    v3 = 4;
    result = v1;
  }
  else
  {
    if (!result)
      return result;
    v3 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v3))();
}

void re::AudioGeneratorAssetLoader::~AudioGeneratorAssetLoader(re::AudioGeneratorAssetLoader *this)
{
  JUMPOUT(0x2276933B8);
}

re *re::AudioGeneratorAssetLoader::unloadAsset(re *this, id *a2)
{
  uint64_t v3;

  if (a2)
  {
    v3 = re::globalAllocators(this)[2];
    re::AudioGeneratorAsset::~AudioGeneratorAsset(a2);
    return (re *)(*(uint64_t (**)(uint64_t, id *))(*(_QWORD *)v3 + 40))(v3, a2);
  }
  return this;
}

uint64_t re::AudioGeneratorAssetLoader::registerAsset()
{
  return 0;
}

BOOL re::AudioGeneratorAssetLoader::isSupportedSourceExtension(re::AudioGeneratorAssetLoader *this, const char *a2)
{
  return strcasecmp(a2, "reaudiogenerator") == 0;
}

uint64_t re::AudioGeneratorAssetLoader::introspectionType(re::AudioGeneratorAssetLoader *this)
{
  unsigned __int8 v1;

  v1 = atomic_load((unsigned __int8 *)&qword_2540FF5C0);
  if ((v1 & 1) == 0 && __cxa_guard_acquire(&qword_2540FF5C0))
  {
    qword_2540FF5B8 = re::internal::getOrCreateInfo((re::internal *)"AudioGeneratorAsset", (uint64_t (*)(re::internal *))re::allocInfo_AudioGeneratorAsset, (re::IntrospectionBase *(*)(void))re::initInfo_AudioGeneratorAsset, (void (*)(re::IntrospectionBase *))&unk_2540FF5B0, 0);
    __cxa_guard_release(&qword_2540FF5C0);
  }
  return qword_2540FF5B8;
}

re::DynamicString *re::AudioGeneratorAssetCompiler::getCurrentCompiledAssetInfo@<X0>(re::AudioGeneratorAssetCompiler *this@<X0>, uint64_t a2@<X8>)
{
  re::AudioGeneratorAsset *v3;
  _QWORD v5[2];

  *(_QWORD *)(a2 + 32) = 0;
  *(_OWORD *)a2 = 0u;
  *(_OWORD *)(a2 + 16) = 0u;
  v3 = (re::AudioGeneratorAsset *)re::DynamicString::setCapacity((_QWORD *)(a2 + 8), 0);
  *(_QWORD *)a2 = 0x100000001;
  re::AudioGeneratorAsset::assetType(v3);
  v5[0] = re::AudioGeneratorAsset::assetType(void)::type;
  v5[1] = strlen((const char *)re::AudioGeneratorAsset::assetType(void)::type);
  return re::DynamicString::operator=((re::DynamicString *)(a2 + 8), (uint64_t)v5);
}

uint64_t re::AudioGeneratorAssetCompiler::assetIntrospectionType(re::AudioGeneratorAssetCompiler *this)
{
  unsigned __int8 v1;

  v1 = atomic_load((unsigned __int8 *)&qword_2540FF5C0);
  if ((v1 & 1) == 0 && __cxa_guard_acquire(&qword_2540FF5C0))
  {
    qword_2540FF5B8 = re::internal::getOrCreateInfo((re::internal *)"AudioGeneratorAsset", (uint64_t (*)(re::internal *))re::allocInfo_AudioGeneratorAsset, (re::IntrospectionBase *(*)(void))re::initInfo_AudioGeneratorAsset, (void (*)(re::IntrospectionBase *))&unk_2540FF5B0, 0);
    __cxa_guard_release(&qword_2540FF5C0);
  }
  return qword_2540FF5B8;
}

_QWORD *re::AudioGeneratorAssetCompiler::getSupportedExtensions@<X0>(uint64_t a1@<X8>)
{
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)a1 = 0;
  *(_DWORD *)(a1 + 24) = 0;
  return re::DynamicArray<re::TransitionCondition *>::add((_QWORD *)a1, &re::kGeneratorAssetFileExtension);
}

void sub_2253251D8(_Unwind_Exception *a1)
{
  uint64_t *v1;

  re::DynamicArray<char const*>::~DynamicArray(v1);
  _Unwind_Resume(a1);
}

uint64_t *re::DynamicArray<char const*>::~DynamicArray(uint64_t *a1)
{
  uint64_t v2;

  v2 = *a1;
  if (v2)
  {
    if (a1[4])
      (*(void (**)(uint64_t))(*(_QWORD *)v2 + 40))(v2);
    a1[4] = 0;
    a1[1] = 0;
    a1[2] = 0;
    *a1 = 0;
    ++*((_DWORD *)a1 + 6);
  }
  return a1;
}

re *re::AudioGeneratorAssetCompiler::compile@<X0>(re::AudioGeneratorAssetCompiler *this@<X0>, re::AssetUtilities *a2@<X1>, re::AssetSerializationScheme *a3@<X3>, uint64_t a4@<X8>)
{
  uint64_t *v8;
  uint64_t v9;
  unsigned __int8 v10;
  re *result;
  uint64_t v12;
  __int128 v13;
  uint64_t v14;
  uint64_t v15;
  __int128 v16;
  __int128 v17;
  uint64_t v18;
  uint64_t v19;
  _BYTE v20[8];
  re *v21;
  char v22;

  v8 = re::globalAllocators(this);
  v9 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v8[2] + 32))(v8[2], 104, 8);
  *(_DWORD *)v9 = 6553601;
  *(_BYTE *)(v9 + 8) = 0;
  *(_BYTE *)(v9 + 48) = 0;
  *(_BYTE *)(v9 + 56) = 0;
  *(_DWORD *)(v9 + 64) = 1117126656;
  *(int32x2_t *)(v9 + 68) = vdup_n_s32(0x62616464u);
  *(_DWORD *)(v9 + 76) = 1650549860;
  *(_QWORD *)(v9 + 96) = 0;
  *(_QWORD *)(v9 + 80) = 0;
  *(_BYTE *)(v9 + 88) = 0;
  v10 = atomic_load((unsigned __int8 *)&qword_2540FF5C0);
  if ((v10 & 1) == 0 && __cxa_guard_acquire(&qword_2540FF5C0))
  {
    qword_2540FF5B8 = re::internal::getOrCreateInfo((re::internal *)"AudioGeneratorAsset", (uint64_t (*)(re::internal *))re::allocInfo_AudioGeneratorAsset, (re::IntrospectionBase *(*)(void))re::initInfo_AudioGeneratorAsset, (void (*)(re::IntrospectionBase *))&unk_2540FF5B0, 0);
    __cxa_guard_release(&qword_2540FF5C0);
  }
  result = (re *)re::AssetUtilities::readSourceJson(a2, (const char *)v9, qword_2540FF5B8, a3, (uint64_t)v20);
  if (v20[0])
  {
    *(_BYTE *)a4 = 1;
    *(_QWORD *)(a4 + 8) = v9;
  }
  else
  {
    v12 = re::globalAllocators(result)[2];
    re::AudioGeneratorAsset::~AudioGeneratorAsset((id *)v9);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v12 + 40))(v12, v9);
    *(_QWORD *)&v16 = 100;
    *((_QWORD *)&v16 + 1) = &re::AssetErrorCategory(void)::instance;
    result = re::DynamicString::DynamicString((re::DynamicString *)&v17, (const re::DynamicString *)&v21);
    v13 = v17;
    *(_OWORD *)(a4 + 8) = v16;
    v14 = v18;
    v15 = v19;
    *(_BYTE *)a4 = 0;
    *(_OWORD *)(a4 + 24) = v13;
    *(_QWORD *)(a4 + 40) = v14;
    *(_QWORD *)(a4 + 48) = v15;
    if (!v20[0])
    {
      result = v21;
      if (v21)
      {
        if ((v22 & 1) != 0)
          return (re *)(*(uint64_t (**)(void))(*(_QWORD *)v21 + 40))();
      }
    }
  }
  return result;
}

void sub_2253253FC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16, uint64_t a17, char a18, uint64_t a19)
{
  if (!a16 && a17 && (a18 & 1) != 0)
    (*(void (**)(void))(*(_QWORD *)a17 + 40))();
  _Unwind_Resume(exception_object);
}

re *re::AudioGeneratorAssetCompiler::deleteAsset(re *this, id *a2)
{
  uint64_t v3;

  if (a2)
  {
    v3 = re::globalAllocators(this)[2];
    re::AudioGeneratorAsset::~AudioGeneratorAsset(a2);
    return (re *)(*(uint64_t (**)(uint64_t, id *))(*(_QWORD *)v3 + 40))(v3, a2);
  }
  return this;
}

void re::AudioGeneratorAssetCompiler::~AudioGeneratorAssetCompiler(re::AudioGeneratorAssetCompiler *this)
{
  JUMPOUT(0x2276933B8);
}

uint64_t re::SkeletalPoseRuntimeData::update<re::MeshAsset>(re::SkeletalPoseRuntimeData *this, _QWORD *a2, uint64_t a3, re::MeshAsset *a4, uint64_t a5, re::SkeletalPoseRigMappingData *a6, uint64_t a7, _QWORD *a8, uint64_t a9, unint64_t a10, uint64_t a11, re::BindNode **a12)
{
  if (*((_QWORD *)this + 2) != a7)
  {
    re::SkeletalPoseRuntimeData::rebuildRuntimeData<re::MeshAsset>((uint64_t)this, a2, a3, a4, a5, a6, a8, (uint64_t)a8, a9, a10, a11, a12);
    ++*((_DWORD *)this + 2);
    *((_QWORD *)this + 2) = a7;
  }
  return re::SkeletalPoseRuntimeData::executeEvaluationTree((uint64_t)this);
}

void re::SkeletalPoseRuntimeData::rebuildRuntimeData<re::MeshAsset>(uint64_t a1, _QWORD *a2, uint64_t a3, re::MeshAsset *a4, uint64_t a5, re::SkeletalPoseRigMappingData *a6, _QWORD *a7, uint64_t a8, uint64_t a9, unint64_t a10, uint64_t a11, re::BindNode **a12)
{
  uint64_t v15;
  uint64_t v16;
  uint64_t i;
  uint64_t j;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t k;
  uint64_t m;
  _QWORD *v24;
  uint64_t v25;
  _anonymous_namespace_ *v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  unint64_t v32;
  unint64_t v33;
  unsigned int v34;
  unint64_t v35;
  unint64_t v36;
  re *v37;
  re *v38;
  unint64_t v39;
  NSObject *v40;
  NSObject *v41;
  const char *v42;
  uint64_t v43;
  uint64_t v44;
  NSObject *v45;
  __int128 v46;
  __int128 v47;
  uint64_t v48;
  uint64_t v49;
  re *v50;
  uint64_t *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  unint64_t v55;
  uint64_t v56;
  unint64_t *v57;
  uint64_t *v58;
  unint64_t v59;
  const re::IntrospectionBase *v60;
  unint64_t v61;
  uint64_t v62;
  uint64_t v63;
  NSObject *v64;
  uint64_t v65;
  char *v66;
  re *v67;
  uint64_t *v68;
  uint64_t v69;
  _QWORD *v70;
  uint64_t v71;
  uint8_t *v72;
  uint64_t v73;
  re::Allocator *v74;
  uint64_t v75;
  re *v76;
  uint8_t *v77;
  unint64_t v78;
  re::MeshAsset *v79;
  re::SkeletalPoseRigMappingData *v80;
  unint64_t v84;
  re::EvaluationContextManager *v85;
  _QWORD v86[2];
  __int128 v87;
  _QWORD v88[226];
  uint8_t buf[16];
  __int128 v90;
  __int128 v91;
  __int128 v92;
  __int128 v93;
  uint64_t v94[24];
  _BYTE v95[18];
  __int16 v96;
  unint64_t v97;
  __int16 v98;
  unint64_t v99;
  uint8_t v100[48];
  __int128 v101;
  __int128 v102;
  uint64_t v103;

  v103 = *MEMORY[0x24BDAC8D0];
  ++*(_DWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 16) = -1;
  re::FixedArray<re::EvaluationRigState>::deinit((_QWORD *)(a1 + 24));
  std::unique_ptr<re::RigHierarchy,std::function<void ()(re::RigHierarchy*)>>::reset[abi:nn180100]((uint64_t *)(a1 + 48), 0);
  *(_QWORD *)(a1 + 88) = 0;
  re::DynamicRegisterIdTable::deinit((re::DynamicRegisterIdTable *)(a1 + 96));
  v85 = (re::EvaluationContextManager *)(a1 + 88);
  v15 = *(_QWORD *)(a1 + 416);
  if (v15)
  {
    if (*(_QWORD *)(a1 + 448))
      (*(void (**)(uint64_t))(*(_QWORD *)v15 + 40))(v15);
    *(_QWORD *)(a1 + 448) = 0;
    *(_QWORD *)(a1 + 424) = 0;
    *(_QWORD *)(a1 + 432) = 0;
    *(_QWORD *)(a1 + 416) = 0;
    ++*(_DWORD *)(a1 + 440);
  }
  re::DynamicRegisterIdTable::deinit((re::DynamicRegisterIdTable *)(a1 + 456));
  v16 = *(_QWORD *)(a1 + 776);
  if (v16)
  {
    if (*(_QWORD *)(a1 + 808))
      (*(void (**)(uint64_t))(*(_QWORD *)v16 + 40))(v16);
    *(_QWORD *)(a1 + 808) = 0;
    *(_QWORD *)(a1 + 784) = 0;
    *(_QWORD *)(a1 + 792) = 0;
    *(_QWORD *)(a1 + 776) = 0;
    ++*(_DWORD *)(a1 + 800);
  }
  for (i = 816; i != 1176; i += 40)
    re::DynamicArray<re::EvaluationContextManager::BindPointReference>::deinit(a1 + i);
  for (j = 0; j != 360; j += 40)
  {
    v19 = (_QWORD *)(a1 + j);
    v20 = *(_QWORD *)(a1 + j + 1176);
    if (v20)
    {
      if (v19[151])
        (*(void (**)(uint64_t))(*(_QWORD *)v20 + 40))(v20);
      v19[151] = 0;
      v19[148] = 0;
      v19[149] = 0;
      v19[147] = 0;
      ++*(_DWORD *)(a1 + j + 1200);
    }
  }
  re::DynamicRegisterIdTable::deinit((re::DynamicRegisterIdTable *)(a1 + 1536));
  v21 = *(_QWORD *)(a1 + 1856);
  if (v21)
  {
    if (*(_QWORD *)(a1 + 1888))
      (*(void (**)(uint64_t))(*(_QWORD *)v21 + 40))(v21);
    *(_QWORD *)(a1 + 1888) = 0;
    *(_QWORD *)(a1 + 1864) = 0;
    *(_QWORD *)(a1 + 1872) = 0;
    *(_QWORD *)(a1 + 1856) = 0;
    ++*(_DWORD *)(a1 + 1880);
  }
  for (k = 1896; k != 2256; k += 40)
    re::DynamicArray<re::EvaluationContextManager::BindPointReference>::deinit(a1 + k);
  for (m = 0; m != 360; m += 40)
  {
    v24 = (_QWORD *)(a1 + m);
    v25 = *(_QWORD *)(a1 + m + 2256);
    if (v25)
    {
      if (v24[286])
        (*(void (**)(uint64_t))(*(_QWORD *)v25 + 40))(v25);
      v24[286] = 0;
      v24[283] = 0;
      v24[284] = 0;
      v24[282] = 0;
      ++*(_DWORD *)(a1 + m + 2280);
    }
  }
  *(_BYTE *)(a1 + 2616) = 0;
  v26 = (_anonymous_namespace_ *)re::EvaluationContext::deinit((re::EvaluationContext *)(a1 + 2624));
  if (!*(_QWORD *)a1)
  {
    *(_DWORD *)(a1 + 8) = 0;
    *(_QWORD *)(a1 + 16) = -1;
  }
  v27 = *((_QWORD *)a6 + 12);
  *(_QWORD *)(a1 + 32) = v27;
  if (v27)
  {
    if (v27 >= 0x124924924924925)
      goto LABEL_109;
    *(_QWORD *)(a1 + 40) = v29;
    if (!v29)
    {
LABEL_110:
      re::internal::assertLog((re::internal *)4, v30, "assertion failure: '%s' (%s:line %i) Out of memory.", "m_data", "init", 327);
      _os_crash();
      __break(1u);
    }
    v31 = v27 - 1;
    v32 = v27;
    if (v27 != 1)
    {
      do
      {
        *(_QWORD *)v29 = 0;
        *(_OWORD *)(v29 + 96) = 0uLL;
        *(_OWORD *)(v29 + 112) = 0uLL;
        *(_OWORD *)(v29 + 128) = 0uLL;
        *(_OWORD *)(v29 + 144) = 0uLL;
        *(_OWORD *)(v29 + 32) = 0uLL;
        *(_OWORD *)(v29 + 48) = 0uLL;
        *(_OWORD *)(v29 + 64) = 0uLL;
        *(_OWORD *)(v29 + 80) = 0uLL;
        *(_OWORD *)(v29 + 160) = 0uLL;
        *(_OWORD *)(v29 + 176) = 0uLL;
        *(_DWORD *)(v29 + 104) = 1;
        *(_QWORD *)(v29 + 112) = 0;
        *(_QWORD *)(v29 + 120) = 0;
        *(_DWORD *)(v29 + 136) = 0;
        *(_QWORD *)(v29 + 128) = 0;
        *(_QWORD *)(v29 + 144) = 0;
        *(_QWORD *)(v29 + 152) = 0;
        *(_DWORD *)(v29 + 168) = 0;
        *(_QWORD *)(v29 + 160) = 0;
        *(_QWORD *)(v29 + 208) = 0;
        *(_QWORD *)(v29 + 216) = 0;
        *(_DWORD *)(v29 + 208) = 0;
        *(_OWORD *)(v29 + 176) = 0uLL;
        *(_OWORD *)(v29 + 192) = 0uLL;
        *(_OWORD *)(v29 + 192) = 0uLL;
        v29 += 224;
        --v31;
      }
      while (v31);
    }
    *(_QWORD *)v29 = 0;
    *(_OWORD *)(v29 + 96) = 0u;
    *(_OWORD *)(v29 + 112) = 0u;
    *(_OWORD *)(v29 + 128) = 0u;
    *(_OWORD *)(v29 + 144) = 0u;
    *(_OWORD *)(v29 + 32) = 0u;
    *(_OWORD *)(v29 + 48) = 0u;
    *(_OWORD *)(v29 + 64) = 0u;
    *(_OWORD *)(v29 + 80) = 0u;
    *(_OWORD *)(v29 + 160) = 0u;
    *(_OWORD *)(v29 + 176) = 0u;
    *(_DWORD *)(v29 + 104) = 1;
    *(_QWORD *)(v29 + 112) = 0;
    *(_QWORD *)(v29 + 120) = 0;
    *(_DWORD *)(v29 + 136) = 0;
    *(_QWORD *)(v29 + 128) = 0;
    *(_QWORD *)(v29 + 144) = 0;
    *(_QWORD *)(v29 + 152) = 0;
    *(_DWORD *)(v29 + 168) = 0;
    *(_QWORD *)(v29 + 160) = 0;
    *(_QWORD *)(v29 + 208) = 0;
    *(_QWORD *)(v29 + 216) = 0;
    *(_DWORD *)(v29 + 208) = 0;
    *(_OWORD *)(v29 + 176) = 0u;
    *(_OWORD *)(v29 + 192) = 0u;
    *(_OWORD *)(v29 + 192) = 0u;
    re::EvaluationContextManager::init(v85, *(re::Allocator **)a1);
    re::EvaluationTree::EvaluationTree((re::EvaluationTree *)v88);
    v33 = 0;
    v84 = 0;
    v34 = 0;
    v79 = a4;
    v80 = a6;
    v78 = v27;
    while (1)
    {
      v35 = v34;
      if (*((_QWORD *)a6 + 24) <= (unint64_t)v34)
        v27 = 0xFFFFFFFFLL;
      else
        v27 = *(unsigned int *)(*((_QWORD *)a6 + 25) + 4 * v34);
      v36 = *((_QWORD *)a4 + 52);
      if (v36 <= v27)
      {
        *(_QWORD *)v95 = 0;
        v93 = 0u;
        v92 = 0u;
        v91 = 0u;
        v90 = 0u;
        *(_OWORD *)buf = 0u;
        os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        *(_DWORD *)v100 = 136315906;
        *(_QWORD *)&v100[4] = "operator[]";
        *(_WORD *)&v100[12] = 1024;
        *(_DWORD *)&v100[14] = 797;
        *(_WORD *)&v100[18] = 2048;
        *(_QWORD *)&v100[20] = v27;
        *(_WORD *)&v100[28] = 2048;
        *(_QWORD *)&v100[30] = v36;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_107:
        *(_QWORD *)&v87 = 0;
        v101 = 0u;
        v102 = 0u;
        memset(v100, 0, sizeof(v100));
        os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        *(_DWORD *)v95 = 136315906;
        *(_QWORD *)&v95[4] = "operator[]";
        *(_WORD *)&v95[12] = 1024;
        *(_DWORD *)&v95[14] = 468;
        v96 = 2048;
        v97 = v33;
        v98 = 2048;
        v99 = v27;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_108:
        *(_QWORD *)&v87 = 0;
        v101 = 0u;
        v102 = 0u;
        memset(v100, 0, sizeof(v100));
        os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        *(_DWORD *)v95 = 136315906;
        *(_QWORD *)&v95[4] = "operator[]";
        *(_WORD *)&v95[12] = 1024;
        *(_DWORD *)&v95[14] = 468;
        v96 = 2048;
        v97 = v33;
        v98 = 2048;
        v99 = v27;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_109:
        re::internal::assertLog((re::internal *)6, v28, "assertion failure: '%s' (%s:line %i) Size overflow in FixedArray<T>::init(). Element size = %zu, count = %zu", "!overflow", "init", 324, 224, v27);
        _os_crash();
        __break(1u);
        goto LABEL_110;
      }
      v37 = (re *)re::DataArray<re::MeshModel>::tryGet(*((_QWORD *)a4 + 55) + 8, *(_QWORD *)(*((_QWORD *)a4 + 54) + 8 * v27));
      if (v37)
      {
        v38 = v37;
        if (*((_QWORD *)a6 + 21) <= v35)
          v39 = 0xFFFFFFFFLL;
        else
          v39 = *(unsigned int *)(*((_QWORD *)a6 + 22) + 4 * v35);
        if (*((_QWORD *)a4 + 117) <= v39)
        {
          v45 = *re::assetsLogObjects(v37);
          if (os_log_type_enabled(v45, OS_LOG_TYPE_ERROR))
          {
            *(_WORD *)buf = 0;
            v41 = v45;
            v42 = "Skeleton index is out of bounds.";
            goto LABEL_52;
          }
        }
        else
        {
          v43 = re::MeshAsset::skeletonAtIndex(a4, v39);
          if (*((_QWORD *)a6 + 12) <= v35)
            v44 = 0xFFFFFFFFLL;
          else
            v44 = *(unsigned int *)(*((_QWORD *)a6 + 13) + 4 * v35);
          v46 = 0uLL;
          v47 = 0uLL;
          if (*((_QWORD *)a6 + 15) > v35)
            v47 = *(_OWORD *)(*((_QWORD *)a6 + 16) + 16 * v35);
          *(_OWORD *)v100 = v47;
          v48 = *(_QWORD *)(a11 + 16);
          *(_QWORD *)v95 = *(_QWORD *)(a11 + 32);
          *(_QWORD *)&v95[8] = v48;
          if (*((_QWORD *)a6 + 18) > v35)
            v46 = *(_OWORD *)(*((_QWORD *)a6 + 19) + 16 * v35);
          v87 = v46;
          v49 = *(_QWORD *)(v43 + 24);
          v86[0] = *(_QWORD *)(v43 + 32);
          v86[1] = v49;
          re::RigRuntimeData::constructRigCommands(a3, v44, a2, a7, (_anonymous_namespace_ **)v100, v95, (_anonymous_namespace_ *)&v87, (uint64_t)v86, (unint64_t)buf, v88, v85, a12);
          if (buf[0])
          {
            v27 = *(_QWORD *)(a1 + 32);
            if (v27 <= v33)
              goto LABEL_107;
            v51 = (uint64_t *)(*(_QWORD *)(a1 + 40) + 224 * v33);
            v52 = *(_QWORD *)&buf[8];
            *(_QWORD *)&buf[8] = 0;
            std::unique_ptr<re::RigHierarchy,std::function<void ()(re::RigHierarchy*)>>::reset[abi:nn180100](v51, v52);
            std::__function::__value_func<void ()(re::RigHierarchy *)>::operator=[abi:nn180100](v51 + 1, (uint64_t)&v90);
            re::FixedArray<float>::operator=(v51 + 5, (uint64_t *)&v92);
            re::FixedArray<float>::operator=(v51 + 8, (uint64_t *)&v93 + 1);
            re::RigGraphCompilation::operator=(v51 + 11, v94);
            v27 = *(_QWORD *)(a1 + 32);
            if (v27 <= v33)
              goto LABEL_108;
            v53 = *(_QWORD *)(a1 + 40);
            v54 = re::SkeletalPoseRigMappingData::poseRigMapJointTransformCount(a6, v35);
            if (v54)
            {
              v55 = 0;
              v56 = v53 + 224 * v33;
              v57 = (unint64_t *)(v56 + 48);
              v58 = (uint64_t *)(v56 + 56);
              if (a10 >= v84)
                v59 = a10 - v84;
              else
                v59 = 0;
              v60 = (const re::IntrospectionBase *)(a9 + (v84 << 6));
              while (1)
              {
                v61 = *v57;
                if (*v57 <= v55)
                  break;
                *(_QWORD *)v100 = *(_QWORD *)(*v58 + 8 * v55);
                re::DynamicArray<unsigned long>::add((_QWORD *)(a1 + 1696), v100);
                v63 = *(_QWORD *)(a1 + 1712) - 1;
                *(_QWORD *)v100 = a1 + 88;
                *(_QWORD *)&v100[8] = v63;
                if (v59 == v55)
                  goto LABEL_101;
                re::EvaluationOutputHandle<re::Matrix4x4<float>>::bindEvaluationOutput<re::Matrix4x4<float>>(v100, v60, 0);
                ++v55;
                v60 = (const re::IntrospectionBase *)((char *)v60 + 64);
                if (v54 == v55)
                  goto LABEL_69;
              }
              *(_QWORD *)&v87 = 0;
              v101 = 0u;
              v102 = 0u;
              memset(v100, 0, sizeof(v100));
              os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
              *(_DWORD *)v95 = 136315906;
              *(_QWORD *)&v95[4] = "operator[]";
              *(_WORD *)&v95[12] = 1024;
              *(_DWORD *)&v95[14] = 468;
              v96 = 2048;
              v97 = v55;
              v98 = 2048;
              v99 = v61;
              _os_log_send_and_compose_impl();
              _os_crash_msg();
              __break(1u);
LABEL_101:
              re::internal::assertLog((re::internal *)6, v62, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 658, v84 + v55, a10);
              _os_crash();
              __break(1u);
LABEL_102:
              if ((v100[32] & 1) != 0)
                v77 = *(uint8_t **)&v100[40];
              else
                v77 = &v100[33];
              *(_DWORD *)buf = 136315138;
              *(_QWORD *)&buf[4] = v77;
              _os_log_error_impl(&dword_224FE9000, (os_log_t)v55, OS_LOG_TYPE_ERROR, "Could not setup evaluation model: %s.", buf, 0xCu);
LABEL_95:
              std::unique_ptr<re::RigHierarchy,std::function<void ()(re::RigHierarchy*)>>::reset[abi:nn180100](v58, 0);
              if (!v100[0] && *(_QWORD *)&v100[24] && (v100[32] & 1) != 0)
                (*(void (**)(void))(**(_QWORD **)&v100[24] + 40))();
              goto LABEL_96;
            }
LABEL_69:
            v84 += v54;
            a4 = v79;
            a6 = v80;
            v32 = v78;
          }
          else
          {
            v64 = *re::assetsLogObjects(v50);
            if (os_log_type_enabled(v64, OS_LOG_TYPE_ERROR))
            {
              v65 = *((_QWORD *)v38 + 1);
              v66 = (char *)&v91 + 1;
              if ((v91 & 1) != 0)
                v66 = (char *)*((_QWORD *)&v91 + 1);
              *(_DWORD *)v100 = 136315394;
              *(_QWORD *)&v100[4] = v65;
              *(_WORD *)&v100[12] = 2080;
              *(_QWORD *)&v100[14] = v66;
              _os_log_error_impl(&dword_224FE9000, v64, OS_LOG_TYPE_ERROR, "Could not evaluate rig for model \"%s\": %s.", v100, 0x16u);
            }
          }
          re::Result<re::EvaluationRigState,re::DetailedError>::~Result((uint64_t)buf);
        }
      }
      else
      {
        v40 = *re::assetsLogObjects(0);
        if (os_log_type_enabled(v40, OS_LOG_TYPE_ERROR))
        {
          *(_WORD *)buf = 0;
          v41 = v40;
          v42 = "Mesh model not not registered.";
LABEL_52:
          _os_log_error_impl(&dword_224FE9000, v41, OS_LOG_TYPE_ERROR, v42, buf, 2u);
        }
      }
      v33 = (v35 + 1);
      v34 = v35 + 1;
      if (v32 <= v33)
        goto LABEL_78;
    }
  }
  re::EvaluationContextManager::init(v85, *(re::Allocator **)a1);
  re::EvaluationTree::EvaluationTree((re::EvaluationTree *)v88);
LABEL_78:
  v67 = (re *)re::EvaluationContextManager::buildEvaluationContext(v85);
  v68 = re::globalAllocators(v67);
  v69 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v68[2] + 32))(v68[2], 784, 8);
  *(_QWORD *)v69 = &off_24ED26FC0;
  *(_DWORD *)(v69 + 8) = -1;
  bzero((void *)(v69 + 16), 0x300uLL);
  *(_QWORD *)v100 = &off_24ED37600;
  *(_QWORD *)&v100[24] = v100;
  *(_QWORD *)&v91 = &buf[8];
  *(_QWORD *)&buf[8] = &off_24ED37600;
  *(_QWORD *)buf = 0;
  v58 = (uint64_t *)(a1 + 48);
  std::unique_ptr<re::RigHierarchy,std::function<void ()(re::RigHierarchy*)>>::reset[abi:nn180100]((uint64_t *)(a1 + 48), v69);
  v70 = *(_QWORD **)(a1 + 80);
  *(_QWORD *)(a1 + 80) = 0;
  if (v70 == (_QWORD *)(a1 + 56))
  {
    v71 = 4;
    v70 = (_QWORD *)(a1 + 56);
  }
  else
  {
    if (!v70)
      goto LABEL_83;
    v71 = 5;
  }
  (*(void (**)(void))(*v70 + 8 * v71))();
LABEL_83:
  if ((_QWORD)v91)
  {
    if ((uint8_t *)v91 == &buf[8])
    {
      *(_QWORD *)(a1 + 80) = a1 + 56;
      (*(void (**)(uint64_t, _QWORD *))(*(_QWORD *)&buf[8] + 24))((uint64_t)&buf[8], (_QWORD *)(a1 + 56));
    }
    else
    {
      *(_QWORD *)(a1 + 80) = v91;
      *(_QWORD *)&v91 = 0;
    }
  }
  else
  {
    *(_QWORD *)(a1 + 80) = 0;
  }
  std::unique_ptr<re::RigHierarchy,std::function<void ()(re::RigHierarchy*)>>::~unique_ptr[abi:nn180100]((uint64_t *)buf);
  v72 = *(uint8_t **)&v100[24];
  if (*(uint8_t **)&v100[24] == v100)
  {
    v73 = 4;
    v72 = v100;
  }
  else
  {
    if (!*(_QWORD *)&v100[24])
      goto LABEL_93;
    v73 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v72 + 8 * v73))();
LABEL_93:
  v74 = *(re::Allocator **)a1;
  v75 = *(_QWORD *)(a1 + 48);
  re::EvaluationContextManager::evaluationContextDescription<re::EvaluationContextDescription>(v85, (uint64_t)buf);
  v76 = (re *)(*(_QWORD *(**)(uint8_t *__return_ptr, uint64_t, re::Allocator *, _QWORD *, uint8_t *))(*(_QWORD *)v75 + 32))(v100, v75, v74, v88, buf);
  if (!v100[0])
  {
    v55 = *re::assetsLogObjects(v76);
    if (os_log_type_enabled((os_log_t)v55, OS_LOG_TYPE_ERROR))
      goto LABEL_102;
    goto LABEL_95;
  }
LABEL_96:
  re::EvaluationTree::~EvaluationTree((re::EvaluationTree *)v88);
}

_QWORD *re::FixedArray<re::EvaluationRigState>::deinit(_QWORD *result)
{
  _QWORD *v1;
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;

  if (*result)
  {
    v1 = result;
    v3 = result + 1;
    v2 = result[1];
    if (v2)
    {
      v4 = 0;
      v5 = result[2];
      v6 = 224 * v2;
      do
      {
        v7 = (_QWORD *)(v5 + v4);
        re::RigGraphCompilation::~RigGraphCompilation((re::RigGraphCompilation *)(v5 + v4 + 88));
        v8 = *(_QWORD *)(v5 + v4 + 64);
        if (v8)
        {
          if (v7[9])
          {
            (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v8 + 40))(v8, *(_QWORD *)(v5 + v4 + 80));
            v7[9] = 0;
            v7[10] = 0;
          }
          v7[8] = 0;
        }
        v9 = v7[5];
        if (v9)
        {
          if (*(_QWORD *)(v5 + v4 + 48))
          {
            (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v9 + 40))(v9, *(_QWORD *)(v5 + v4 + 56));
            *(_QWORD *)(v5 + v4 + 48) = 0;
            *(_QWORD *)(v5 + v4 + 56) = 0;
          }
          v7[5] = 0;
        }
        std::unique_ptr<re::RigHierarchy,std::function<void ()(re::RigHierarchy*)>>::~unique_ptr[abi:nn180100]((uint64_t *)(v5 + v4));
        v4 += 224;
      }
      while (v6 != v4);
      result = (_QWORD *)(*(uint64_t (**)(_QWORD, _QWORD))(*(_QWORD *)*v1 + 40))(*v1, v1[2]);
      *v3 = 0;
      v3[1] = 0;
    }
    *v1 = 0;
  }
  return result;
}

uint64_t re::SkeletalPoseRuntimeData::executeEvaluationTree(uint64_t this)
{
  uint64_t v1;
  re::EvaluationContextManager *v2;
  uint64_t v3;
  _OWORD v4[18];

  if (*(_QWORD *)(this + 48))
  {
    v1 = this;
    v2 = (re::EvaluationContextManager *)(this + 88);
    re::EvaluationContextManager::updateBoundInputs((re::EvaluationContextManager *)(this + 88));
    v3 = *(_QWORD *)(v1 + 48);
    if (!*(_BYTE *)(v1 + 2616))
      re::EvaluationContextManager::buildEvaluationContext(v2);
    memset(v4, 0, sizeof(v4));
    re::EvaluationContextSlices::init((re::EvaluationContextSlices *)v4, (re::EvaluationContext *)(v1 + 2624));
    (*(void (**)(uint64_t, _OWORD *))(*(_QWORD *)v3 + 16))(v3, v4);
    return re::EvaluationContextManager::updateBoundOutputs(v2);
  }
  return this;
}

uint64_t re::EvaluationContextManager::updateBoundInputs(re::EvaluationContextManager *this)
{
  re::EvaluationContextManager::updateBoundInputDataForType<int>((uint64_t)this);
  re::EvaluationContextManager::updateBoundInputDataForType<unsigned int>((uint64_t)this);
  re::EvaluationContextManager::updateBoundInputDataForType<float>((uint64_t)this);
  re::EvaluationContextManager::updateBoundInputDataForType<re::Matrix3x3<float>>((uint64_t)this);
  re::EvaluationContextManager::updateBoundInputDataForType<re::Matrix4x4<float>>((uint64_t)this);
  re::EvaluationContextManager::updateBoundInputDataForType<re::Quaternion<float>>((uint64_t)this);
  re::EvaluationContextManager::updateBoundInputDataForType<re::Vector2<float>>(this);
  re::EvaluationContextManager::updateBoundInputDataForType<re::Vector3<float>>((uint64_t)this);
  return re::EvaluationContextManager::updateBoundInputDataForType<re::GenericSRT<float>>((uint64_t)this);
}

uint64_t re::EvaluationContextManager::updateBoundOutputs(re::EvaluationContextManager *this)
{
  re::EvaluationContextManager::updateBoundOutputDataForType<int>((uint64_t)this);
  re::EvaluationContextManager::updateBoundOutputDataForType<unsigned int>((uint64_t)this);
  re::EvaluationContextManager::updateBoundOutputDataForType<float>((uint64_t)this);
  re::EvaluationContextManager::updateBoundOutputDataForType<re::Matrix3x3<float>>((uint64_t)this);
  re::EvaluationContextManager::updateBoundOutputDataForType<re::Matrix4x4<float>>((uint64_t)this);
  re::EvaluationContextManager::updateBoundOutputDataForType<re::Quaternion<float>>((uint64_t)this);
  re::EvaluationContextManager::updateBoundOutputDataForType<re::Vector2<float>>((uint64_t)this);
  re::EvaluationContextManager::updateBoundOutputDataForType<re::Vector3<float>>((uint64_t)this);
  return re::EvaluationContextManager::updateBoundOutputDataForType<re::GenericSRT<float>>((uint64_t)this);
}

uint64_t re::EvaluationContextManager::updateBoundInputDataForType<int>(uint64_t result)
{
  _QWORD *v1;
  unint64_t i;
  unint64_t v3;
  re::BindPoint *v4;

  if (*(_QWORD *)(result + 1104))
  {
    v1 = (_QWORD *)result;
    for (i = 0; i < v1[138]; ++i)
    {
      v3 = *(_QWORD *)(v1[140] + 8 * i);
      if (v1[93] <= v3)
      {
        os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_13:
        os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
      }
      v4 = (re::BindPoint *)(v1[95] + 56 * v3);
      if (*((_BYTE *)v4 + 48))
      {
        result = re::BindPoint::baseValueUntyped(v4);
        if (result)
          goto LABEL_8;
      }
      else
      {
        result = re::BindPoint::valueUntyped(v4);
        if (result)
        {
LABEL_8:
          if (v1[318] <= v3)
            goto LABEL_13;
          *(_DWORD *)(v1[319] + 4 * v3) = *(_DWORD *)result;
        }
      }
    }
  }
  return result;
}

uint64_t re::EvaluationContextManager::updateBoundInputDataForType<unsigned int>(uint64_t result)
{
  _QWORD *v1;
  unint64_t i;
  unint64_t v3;
  re::BindPoint *v4;

  if (*(_QWORD *)(result + 1144))
  {
    v1 = (_QWORD *)result;
    for (i = 0; i < v1[143]; ++i)
    {
      v3 = *(_QWORD *)(v1[145] + 8 * i);
      if (v1[98] <= v3)
      {
        os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_13:
        os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
      }
      v4 = (re::BindPoint *)(v1[100] + 56 * v3);
      if (*((_BYTE *)v4 + 48))
      {
        result = re::BindPoint::baseValueUntyped(v4);
        if (result)
          goto LABEL_8;
      }
      else
      {
        result = re::BindPoint::valueUntyped(v4);
        if (result)
        {
LABEL_8:
          if (v1[321] <= v3)
            goto LABEL_13;
          *(_DWORD *)(v1[322] + 4 * v3) = *(_DWORD *)result;
        }
      }
    }
  }
  return result;
}

uint64_t re::EvaluationContextManager::updateBoundInputDataForType<float>(uint64_t result)
{
  _QWORD *v1;
  unint64_t i;
  unint64_t v3;
  re::BindPoint *v4;

  if (*(_QWORD *)(result + 1184))
  {
    v1 = (_QWORD *)result;
    for (i = 0; i < v1[148]; ++i)
    {
      v3 = *(_QWORD *)(v1[150] + 8 * i);
      if (v1[103] <= v3)
      {
        os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_13:
        os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
      }
      v4 = (re::BindPoint *)(v1[105] + 56 * v3);
      if (*((_BYTE *)v4 + 48))
      {
        result = re::BindPoint::baseValueUntyped(v4);
        if (result)
          goto LABEL_8;
      }
      else
      {
        result = re::BindPoint::valueUntyped(v4);
        if (result)
        {
LABEL_8:
          if (v1[324] <= v3)
            goto LABEL_13;
          *(_DWORD *)(v1[325] + 4 * v3) = *(_DWORD *)result;
        }
      }
    }
  }
  return result;
}

uint64_t re::EvaluationContextManager::updateBoundInputDataForType<re::Matrix3x3<float>>(uint64_t result)
{
  _QWORD *v1;
  unint64_t i;
  unint64_t v3;
  re::BindPoint *v4;
  _OWORD *v5;
  __int128 v6;
  __int128 v7;

  if (*(_QWORD *)(result + 1224))
  {
    v1 = (_QWORD *)result;
    for (i = 0; i < v1[153]; ++i)
    {
      v3 = *(_QWORD *)(v1[155] + 8 * i);
      if (v1[108] <= v3)
      {
        os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_13:
        os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
      }
      v4 = (re::BindPoint *)(v1[110] + 56 * v3);
      if (*((_BYTE *)v4 + 48))
      {
        result = re::BindPoint::baseValueUntyped(v4);
        if (result)
          goto LABEL_8;
      }
      else
      {
        result = re::BindPoint::valueUntyped(v4);
        if (result)
        {
LABEL_8:
          if (v1[327] <= v3)
            goto LABEL_13;
          v5 = (_OWORD *)(v1[328] + 48 * v3);
          v6 = *(_OWORD *)result;
          v7 = *(_OWORD *)(result + 32);
          v5[1] = *(_OWORD *)(result + 16);
          v5[2] = v7;
          *v5 = v6;
        }
      }
    }
  }
  return result;
}

uint64_t re::EvaluationContextManager::updateBoundInputDataForType<re::Matrix4x4<float>>(uint64_t result)
{
  _QWORD *v1;
  unint64_t i;
  unint64_t v3;
  re::BindPoint *v4;
  _OWORD *v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;

  if (*(_QWORD *)(result + 1264))
  {
    v1 = (_QWORD *)result;
    for (i = 0; i < v1[158]; ++i)
    {
      v3 = *(_QWORD *)(v1[160] + 8 * i);
      if (v1[113] <= v3)
      {
        os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_13:
        os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
      }
      v4 = (re::BindPoint *)(v1[115] + 56 * v3);
      if (*((_BYTE *)v4 + 48))
      {
        result = re::BindPoint::baseValueUntyped(v4);
        if (result)
          goto LABEL_8;
      }
      else
      {
        result = re::BindPoint::valueUntyped(v4);
        if (result)
        {
LABEL_8:
          if (v1[330] <= v3)
            goto LABEL_13;
          v5 = (_OWORD *)(v1[331] + (v3 << 6));
          v6 = *(_OWORD *)result;
          v7 = *(_OWORD *)(result + 16);
          v8 = *(_OWORD *)(result + 48);
          v5[2] = *(_OWORD *)(result + 32);
          v5[3] = v8;
          *v5 = v6;
          v5[1] = v7;
        }
      }
    }
  }
  return result;
}

uint64_t re::EvaluationContextManager::updateBoundInputDataForType<re::Quaternion<float>>(uint64_t result)
{
  _QWORD *v1;
  unint64_t i;
  unint64_t v3;
  re::BindPoint *v4;

  if (*(_QWORD *)(result + 1304))
  {
    v1 = (_QWORD *)result;
    for (i = 0; i < v1[163]; ++i)
    {
      v3 = *(_QWORD *)(v1[165] + 8 * i);
      if (v1[118] <= v3)
      {
        os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_13:
        os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
      }
      v4 = (re::BindPoint *)(v1[120] + 56 * v3);
      if (*((_BYTE *)v4 + 48))
      {
        result = re::BindPoint::baseValueUntyped(v4);
        if (result)
          goto LABEL_8;
      }
      else
      {
        result = re::BindPoint::valueUntyped(v4);
        if (result)
        {
LABEL_8:
          if (v1[333] <= v3)
            goto LABEL_13;
          *(_OWORD *)(v1[334] + 16 * v3) = *(_OWORD *)result;
        }
      }
    }
  }
  return result;
}

_QWORD *re::EvaluationContextManager::updateBoundInputDataForType<re::Vector2<float>>(_QWORD *result)
{
  _QWORD *v1;
  unint64_t i;
  unint64_t v3;
  re::BindPoint *v4;

  if (result[168])
  {
    v1 = result;
    for (i = 0; i < v1[168]; ++i)
    {
      v3 = *(_QWORD *)(v1[170] + 8 * i);
      if (v1[123] <= v3)
      {
        os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_13:
        os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
      }
      v4 = (re::BindPoint *)(v1[125] + 56 * v3);
      if (*((_BYTE *)v4 + 48))
      {
        result = (_QWORD *)re::BindPoint::baseValueUntyped(v4);
        if (result)
          goto LABEL_8;
      }
      else
      {
        result = (_QWORD *)re::BindPoint::valueUntyped(v4);
        if (result)
        {
LABEL_8:
          if (v1[336] <= v3)
            goto LABEL_13;
          *(_QWORD *)(v1[337] + 8 * v3) = *result;
        }
      }
    }
  }
  return result;
}

uint64_t re::EvaluationContextManager::updateBoundInputDataForType<re::Vector3<float>>(uint64_t result)
{
  _QWORD *v1;
  unint64_t i;
  unint64_t v3;
  re::BindPoint *v4;

  if (*(_QWORD *)(result + 1384))
  {
    v1 = (_QWORD *)result;
    for (i = 0; i < v1[173]; ++i)
    {
      v3 = *(_QWORD *)(v1[175] + 8 * i);
      if (v1[128] <= v3)
      {
        os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_13:
        os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
      }
      v4 = (re::BindPoint *)(v1[130] + 56 * v3);
      if (*((_BYTE *)v4 + 48))
      {
        result = re::BindPoint::baseValueUntyped(v4);
        if (result)
          goto LABEL_8;
      }
      else
      {
        result = re::BindPoint::valueUntyped(v4);
        if (result)
        {
LABEL_8:
          if (v1[339] <= v3)
            goto LABEL_13;
          *(_OWORD *)(v1[340] + 16 * v3) = *(_OWORD *)result;
        }
      }
    }
  }
  return result;
}

uint64_t re::EvaluationContextManager::updateBoundInputDataForType<re::GenericSRT<float>>(uint64_t result)
{
  _QWORD *v1;
  unint64_t i;
  unint64_t v3;
  re::BindPoint *v4;
  _OWORD *v5;
  __int128 v6;
  __int128 v7;

  if (*(_QWORD *)(result + 1424))
  {
    v1 = (_QWORD *)result;
    for (i = 0; i < v1[178]; ++i)
    {
      v3 = *(_QWORD *)(v1[180] + 8 * i);
      if (v1[133] <= v3)
      {
        os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_13:
        os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
      }
      v4 = (re::BindPoint *)(v1[135] + 56 * v3);
      if (*((_BYTE *)v4 + 48))
      {
        result = re::BindPoint::baseValueUntyped(v4);
        if (result)
          goto LABEL_8;
      }
      else
      {
        result = re::BindPoint::valueUntyped(v4);
        if (result)
        {
LABEL_8:
          if (v1[342] <= v3)
            goto LABEL_13;
          v5 = (_OWORD *)(v1[343] + 48 * v3);
          v6 = *(_OWORD *)result;
          v7 = *(_OWORD *)(result + 32);
          v5[1] = *(_OWORD *)(result + 16);
          v5[2] = v7;
          *v5 = v6;
        }
      }
    }
  }
  return result;
}

uint64_t re::EvaluationContextManager::updateBoundOutputDataForType<int>(uint64_t result)
{
  _QWORD *v1;
  unint64_t v2;
  unint64_t v3;
  unint64_t v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  _DWORD *v8;
  _BYTE v9[12];
  __int16 v10;
  int v11;
  __int16 v12;
  unint64_t v13;
  __int16 v14;
  unint64_t v15;
  _BYTE v16[12];
  __int16 v17;
  int v18;
  __int16 v19;
  unint64_t v20;
  __int16 v21;
  unint64_t v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  uint64_t v28;

  v28 = *MEMORY[0x24BDAC8D0];
  if (*(_QWORD *)(result + 2184))
  {
    v1 = (_QWORD *)result;
    v2 = 0;
    do
    {
      v3 = *(_QWORD *)(v1[275] + 8 * v2);
      v4 = v1[228];
      if (v4 <= v3)
      {
        *(_QWORD *)v16 = 0;
        v26 = 0u;
        v27 = 0u;
        v25 = 0u;
        v23 = 0u;
        v24 = 0u;
        os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        *(_DWORD *)v9 = 136315906;
        *(_QWORD *)&v9[4] = "operator[]";
        v10 = 1024;
        v11 = 797;
        v12 = 2048;
        v13 = v3;
        v14 = 2048;
        v15 = v4;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_13:
        v26 = 0u;
        v27 = 0u;
        v25 = 0u;
        v23 = 0u;
        v24 = 0u;
        os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        *(_DWORD *)v16 = 136315906;
        *(_QWORD *)&v16[4] = "operator[]";
        v17 = 1024;
        v18 = 476;
        v19 = 2048;
        v20 = v3;
        v21 = 2048;
        v22 = v4;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_14:
        v26 = 0u;
        v27 = 0u;
        v25 = 0u;
        v23 = 0u;
        v24 = 0u;
        os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        *(_DWORD *)v16 = 136315906;
        *(_QWORD *)&v16[4] = "operator[]";
        v17 = 1024;
        v18 = 476;
        v19 = 2048;
        v20 = v3;
        v21 = 2048;
        v22 = v4;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
      }
      v5 = v1[230] + 56 * v3;
      *(_QWORD *)v9 = *(_QWORD *)v5;
      re::DynamicArray<re::BindPoint::BindPointData>::DynamicArray((uint64_t)&v9[8], (uint64_t *)(v5 + 8));
      v6 = *(unsigned __int8 *)(v5 + 48);
      v4 = v1[345];
      if (v6)
      {
        if (v4 <= v3)
          goto LABEL_13;
        v7 = v1[346];
        v8 = (_DWORD *)re::BindPoint::baseValueUntyped((re::BindPoint *)v9);
        if (v8)
        {
          *v8 = *(_DWORD *)(v7 + 4 * v3);
          re::BindPoint::markAsWritten((uint64_t)v9);
        }
      }
      else
      {
        if (v4 <= v3)
          goto LABEL_14;
        re::BindPoint::setValue<int>((uint64_t)v9, (int *)(v1[346] + 4 * v3));
      }
      re::DynamicArray<re::BindPoint::BindPointData>::deinit((uint64_t)&v9[8]);
      result = re::DynamicArray<re::BindPoint::BindPointData>::deinit((uint64_t)&v9[8]);
      ++v2;
    }
    while (v2 < v1[273]);
  }
  return result;
}

uint64_t re::EvaluationContextManager::updateBoundOutputDataForType<unsigned int>(uint64_t result)
{
  _QWORD *v1;
  unint64_t v2;
  unint64_t v3;
  unint64_t v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  _DWORD *v8;
  _BYTE v9[12];
  __int16 v10;
  int v11;
  __int16 v12;
  unint64_t v13;
  __int16 v14;
  unint64_t v15;
  _BYTE v16[12];
  __int16 v17;
  int v18;
  __int16 v19;
  unint64_t v20;
  __int16 v21;
  unint64_t v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  uint64_t v28;

  v28 = *MEMORY[0x24BDAC8D0];
  if (*(_QWORD *)(result + 2224))
  {
    v1 = (_QWORD *)result;
    v2 = 0;
    do
    {
      v3 = *(_QWORD *)(v1[280] + 8 * v2);
      v4 = v1[233];
      if (v4 <= v3)
      {
        *(_QWORD *)v16 = 0;
        v26 = 0u;
        v27 = 0u;
        v25 = 0u;
        v23 = 0u;
        v24 = 0u;
        os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        *(_DWORD *)v9 = 136315906;
        *(_QWORD *)&v9[4] = "operator[]";
        v10 = 1024;
        v11 = 797;
        v12 = 2048;
        v13 = v3;
        v14 = 2048;
        v15 = v4;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_13:
        v26 = 0u;
        v27 = 0u;
        v25 = 0u;
        v23 = 0u;
        v24 = 0u;
        os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        *(_DWORD *)v16 = 136315906;
        *(_QWORD *)&v16[4] = "operator[]";
        v17 = 1024;
        v18 = 476;
        v19 = 2048;
        v20 = v3;
        v21 = 2048;
        v22 = v4;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_14:
        v26 = 0u;
        v27 = 0u;
        v25 = 0u;
        v23 = 0u;
        v24 = 0u;
        os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        *(_DWORD *)v16 = 136315906;
        *(_QWORD *)&v16[4] = "operator[]";
        v17 = 1024;
        v18 = 476;
        v19 = 2048;
        v20 = v3;
        v21 = 2048;
        v22 = v4;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
      }
      v5 = v1[235] + 56 * v3;
      *(_QWORD *)v9 = *(_QWORD *)v5;
      re::DynamicArray<re::BindPoint::BindPointData>::DynamicArray((uint64_t)&v9[8], (uint64_t *)(v5 + 8));
      v6 = *(unsigned __int8 *)(v5 + 48);
      v4 = v1[348];
      if (v6)
      {
        if (v4 <= v3)
          goto LABEL_13;
        v7 = v1[349];
        v8 = (_DWORD *)re::BindPoint::baseValueUntyped((re::BindPoint *)v9);
        if (v8)
        {
          *v8 = *(_DWORD *)(v7 + 4 * v3);
          re::BindPoint::markAsWritten((uint64_t)v9);
        }
      }
      else
      {
        if (v4 <= v3)
          goto LABEL_14;
        re::BindPoint::setValue<int>((uint64_t)v9, (int *)(v1[349] + 4 * v3));
      }
      re::DynamicArray<re::BindPoint::BindPointData>::deinit((uint64_t)&v9[8]);
      result = re::DynamicArray<re::BindPoint::BindPointData>::deinit((uint64_t)&v9[8]);
      ++v2;
    }
    while (v2 < v1[278]);
  }
  return result;
}

uint64_t re::EvaluationContextManager::updateBoundOutputDataForType<float>(uint64_t result)
{
  _QWORD *v1;
  unint64_t v2;
  unint64_t v3;
  unint64_t v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  _DWORD *v8;
  _BYTE v9[12];
  __int16 v10;
  int v11;
  __int16 v12;
  unint64_t v13;
  __int16 v14;
  unint64_t v15;
  _BYTE v16[12];
  __int16 v17;
  int v18;
  __int16 v19;
  unint64_t v20;
  __int16 v21;
  unint64_t v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  uint64_t v28;

  v28 = *MEMORY[0x24BDAC8D0];
  if (*(_QWORD *)(result + 2264))
  {
    v1 = (_QWORD *)result;
    v2 = 0;
    do
    {
      v3 = *(_QWORD *)(v1[285] + 8 * v2);
      v4 = v1[238];
      if (v4 <= v3)
      {
        *(_QWORD *)v16 = 0;
        v26 = 0u;
        v27 = 0u;
        v25 = 0u;
        v23 = 0u;
        v24 = 0u;
        os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        *(_DWORD *)v9 = 136315906;
        *(_QWORD *)&v9[4] = "operator[]";
        v10 = 1024;
        v11 = 797;
        v12 = 2048;
        v13 = v3;
        v14 = 2048;
        v15 = v4;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_13:
        v26 = 0u;
        v27 = 0u;
        v25 = 0u;
        v23 = 0u;
        v24 = 0u;
        os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        *(_DWORD *)v16 = 136315906;
        *(_QWORD *)&v16[4] = "operator[]";
        v17 = 1024;
        v18 = 476;
        v19 = 2048;
        v20 = v3;
        v21 = 2048;
        v22 = v4;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_14:
        v26 = 0u;
        v27 = 0u;
        v25 = 0u;
        v23 = 0u;
        v24 = 0u;
        os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        *(_DWORD *)v16 = 136315906;
        *(_QWORD *)&v16[4] = "operator[]";
        v17 = 1024;
        v18 = 476;
        v19 = 2048;
        v20 = v3;
        v21 = 2048;
        v22 = v4;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
      }
      v5 = v1[240] + 56 * v3;
      *(_QWORD *)v9 = *(_QWORD *)v5;
      re::DynamicArray<re::BindPoint::BindPointData>::DynamicArray((uint64_t)&v9[8], (uint64_t *)(v5 + 8));
      v6 = *(unsigned __int8 *)(v5 + 48);
      v4 = v1[351];
      if (v6)
      {
        if (v4 <= v3)
          goto LABEL_13;
        v7 = v1[352];
        v8 = (_DWORD *)re::BindPoint::baseValueUntyped((re::BindPoint *)v9);
        if (v8)
        {
          *v8 = *(_DWORD *)(v7 + 4 * v3);
          re::BindPoint::markAsWritten((uint64_t)v9);
        }
      }
      else
      {
        if (v4 <= v3)
          goto LABEL_14;
        re::BindPoint::setValue<float>((uint64_t)v9, (float *)(v1[352] + 4 * v3));
      }
      re::DynamicArray<re::BindPoint::BindPointData>::deinit((uint64_t)&v9[8]);
      result = re::DynamicArray<re::BindPoint::BindPointData>::deinit((uint64_t)&v9[8]);
      ++v2;
    }
    while (v2 < v1[283]);
  }
  return result;
}

uint64_t re::EvaluationContextManager::updateBoundOutputDataForType<re::Matrix3x3<float>>(uint64_t result)
{
  _QWORD *v1;
  unint64_t v2;
  unint64_t v3;
  unint64_t v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  _OWORD *v8;
  __int128 *v9;
  __int128 v10;
  __int128 v11;
  _BYTE v12[12];
  __int16 v13;
  int v14;
  __int16 v15;
  unint64_t v16;
  __int16 v17;
  unint64_t v18;
  _BYTE v19[12];
  __int16 v20;
  int v21;
  __int16 v22;
  unint64_t v23;
  __int16 v24;
  unint64_t v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  uint64_t v31;

  v31 = *MEMORY[0x24BDAC8D0];
  if (*(_QWORD *)(result + 2304))
  {
    v1 = (_QWORD *)result;
    v2 = 0;
    do
    {
      v3 = *(_QWORD *)(v1[290] + 8 * v2);
      v4 = v1[243];
      if (v4 <= v3)
      {
        *(_QWORD *)v19 = 0;
        v29 = 0u;
        v30 = 0u;
        v28 = 0u;
        v26 = 0u;
        v27 = 0u;
        os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        *(_DWORD *)v12 = 136315906;
        *(_QWORD *)&v12[4] = "operator[]";
        v13 = 1024;
        v14 = 797;
        v15 = 2048;
        v16 = v3;
        v17 = 2048;
        v18 = v4;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_13:
        v29 = 0u;
        v30 = 0u;
        v28 = 0u;
        v26 = 0u;
        v27 = 0u;
        os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        *(_DWORD *)v19 = 136315906;
        *(_QWORD *)&v19[4] = "operator[]";
        v20 = 1024;
        v21 = 476;
        v22 = 2048;
        v23 = v3;
        v24 = 2048;
        v25 = v4;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_14:
        v29 = 0u;
        v30 = 0u;
        v28 = 0u;
        v26 = 0u;
        v27 = 0u;
        os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        *(_DWORD *)v19 = 136315906;
        *(_QWORD *)&v19[4] = "operator[]";
        v20 = 1024;
        v21 = 476;
        v22 = 2048;
        v23 = v3;
        v24 = 2048;
        v25 = v4;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
      }
      v5 = v1[245] + 56 * v3;
      *(_QWORD *)v12 = *(_QWORD *)v5;
      re::DynamicArray<re::BindPoint::BindPointData>::DynamicArray((uint64_t)&v12[8], (uint64_t *)(v5 + 8));
      v6 = *(unsigned __int8 *)(v5 + 48);
      v4 = v1[354];
      if (v6)
      {
        if (v4 <= v3)
          goto LABEL_13;
        v7 = v1[355];
        v8 = (_OWORD *)re::BindPoint::baseValueUntyped((re::BindPoint *)v12);
        if (v8)
        {
          v9 = (__int128 *)(v7 + 48 * v3);
          v10 = *v9;
          v11 = v9[2];
          v8[1] = v9[1];
          v8[2] = v11;
          *v8 = v10;
          re::BindPoint::markAsWritten((uint64_t)v12);
        }
      }
      else
      {
        if (v4 <= v3)
          goto LABEL_14;
        re::BindPoint::setValue<re::Matrix3x3<float>>((float32x4_t *)v12, (float32x4_t *)(v1[355] + 48 * v3));
      }
      re::DynamicArray<re::BindPoint::BindPointData>::deinit((uint64_t)&v12[8]);
      result = re::DynamicArray<re::BindPoint::BindPointData>::deinit((uint64_t)&v12[8]);
      ++v2;
    }
    while (v2 < v1[288]);
  }
  return result;
}

uint64_t re::EvaluationContextManager::updateBoundOutputDataForType<re::Matrix4x4<float>>(uint64_t result)
{
  _QWORD *v1;
  unint64_t v2;
  unint64_t v3;
  unint64_t v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  _OWORD *v8;
  __int128 *v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  _BYTE v13[12];
  __int16 v14;
  int v15;
  __int16 v16;
  unint64_t v17;
  __int16 v18;
  unint64_t v19;
  _BYTE v20[12];
  __int16 v21;
  int v22;
  __int16 v23;
  unint64_t v24;
  __int16 v25;
  unint64_t v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  uint64_t v32;

  v32 = *MEMORY[0x24BDAC8D0];
  if (*(_QWORD *)(result + 2344))
  {
    v1 = (_QWORD *)result;
    v2 = 0;
    do
    {
      v3 = *(_QWORD *)(v1[295] + 8 * v2);
      v4 = v1[248];
      if (v4 <= v3)
      {
        *(_QWORD *)v20 = 0;
        v30 = 0u;
        v31 = 0u;
        v29 = 0u;
        v27 = 0u;
        v28 = 0u;
        os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        *(_DWORD *)v13 = 136315906;
        *(_QWORD *)&v13[4] = "operator[]";
        v14 = 1024;
        v15 = 797;
        v16 = 2048;
        v17 = v3;
        v18 = 2048;
        v19 = v4;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_13:
        v30 = 0u;
        v31 = 0u;
        v29 = 0u;
        v27 = 0u;
        v28 = 0u;
        os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        *(_DWORD *)v20 = 136315906;
        *(_QWORD *)&v20[4] = "operator[]";
        v21 = 1024;
        v22 = 476;
        v23 = 2048;
        v24 = v3;
        v25 = 2048;
        v26 = v4;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_14:
        v30 = 0u;
        v31 = 0u;
        v29 = 0u;
        v27 = 0u;
        v28 = 0u;
        os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        *(_DWORD *)v20 = 136315906;
        *(_QWORD *)&v20[4] = "operator[]";
        v21 = 1024;
        v22 = 476;
        v23 = 2048;
        v24 = v3;
        v25 = 2048;
        v26 = v4;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
      }
      v5 = v1[250] + 56 * v3;
      *(_QWORD *)v13 = *(_QWORD *)v5;
      re::DynamicArray<re::BindPoint::BindPointData>::DynamicArray((uint64_t)&v13[8], (uint64_t *)(v5 + 8));
      v6 = *(unsigned __int8 *)(v5 + 48);
      v4 = v1[357];
      if (v6)
      {
        if (v4 <= v3)
          goto LABEL_13;
        v7 = v1[358];
        v8 = (_OWORD *)re::BindPoint::baseValueUntyped((re::BindPoint *)v13);
        if (v8)
        {
          v9 = (__int128 *)(v7 + (v3 << 6));
          v10 = *v9;
          v11 = v9[1];
          v12 = v9[3];
          v8[2] = v9[2];
          v8[3] = v12;
          *v8 = v10;
          v8[1] = v11;
          re::BindPoint::markAsWritten((uint64_t)v13);
        }
      }
      else
      {
        if (v4 <= v3)
          goto LABEL_14;
        re::BindPoint::setValue<re::Matrix4x4<float>>((float32x4_t *)v13, (float32x4_t *)(v1[358] + (v3 << 6)));
      }
      re::DynamicArray<re::BindPoint::BindPointData>::deinit((uint64_t)&v13[8]);
      result = re::DynamicArray<re::BindPoint::BindPointData>::deinit((uint64_t)&v13[8]);
      ++v2;
    }
    while (v2 < v1[293]);
  }
  return result;
}

uint64_t re::EvaluationContextManager::updateBoundOutputDataForType<re::Quaternion<float>>(uint64_t result)
{
  _QWORD *v1;
  unint64_t v2;
  unint64_t v3;
  unint64_t v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  _OWORD *v8;
  _BYTE v9[12];
  __int16 v10;
  int v11;
  __int16 v12;
  unint64_t v13;
  __int16 v14;
  unint64_t v15;
  _BYTE v16[12];
  __int16 v17;
  int v18;
  __int16 v19;
  unint64_t v20;
  __int16 v21;
  unint64_t v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  uint64_t v28;

  v28 = *MEMORY[0x24BDAC8D0];
  if (*(_QWORD *)(result + 2384))
  {
    v1 = (_QWORD *)result;
    v2 = 0;
    do
    {
      v3 = *(_QWORD *)(v1[300] + 8 * v2);
      v4 = v1[253];
      if (v4 <= v3)
      {
        *(_QWORD *)v16 = 0;
        v26 = 0u;
        v27 = 0u;
        v25 = 0u;
        v23 = 0u;
        v24 = 0u;
        os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        *(_DWORD *)v9 = 136315906;
        *(_QWORD *)&v9[4] = "operator[]";
        v10 = 1024;
        v11 = 797;
        v12 = 2048;
        v13 = v3;
        v14 = 2048;
        v15 = v4;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_13:
        v26 = 0u;
        v27 = 0u;
        v25 = 0u;
        v23 = 0u;
        v24 = 0u;
        os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        *(_DWORD *)v16 = 136315906;
        *(_QWORD *)&v16[4] = "operator[]";
        v17 = 1024;
        v18 = 476;
        v19 = 2048;
        v20 = v3;
        v21 = 2048;
        v22 = v4;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_14:
        v26 = 0u;
        v27 = 0u;
        v25 = 0u;
        v23 = 0u;
        v24 = 0u;
        os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        *(_DWORD *)v16 = 136315906;
        *(_QWORD *)&v16[4] = "operator[]";
        v17 = 1024;
        v18 = 476;
        v19 = 2048;
        v20 = v3;
        v21 = 2048;
        v22 = v4;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
      }
      v5 = v1[255] + 56 * v3;
      *(_QWORD *)v9 = *(_QWORD *)v5;
      re::DynamicArray<re::BindPoint::BindPointData>::DynamicArray((uint64_t)&v9[8], (uint64_t *)(v5 + 8));
      v6 = *(unsigned __int8 *)(v5 + 48);
      v4 = v1[360];
      if (v6)
      {
        if (v4 <= v3)
          goto LABEL_13;
        v7 = v1[361];
        v8 = (_OWORD *)re::BindPoint::baseValueUntyped((re::BindPoint *)v9);
        if (v8)
        {
          *v8 = *(_OWORD *)(v7 + 16 * v3);
          re::BindPoint::markAsWritten((uint64_t)v9);
        }
      }
      else
      {
        if (v4 <= v3)
          goto LABEL_14;
        re::BindPoint::setValue<re::Vector4<float>>((re::BindPoint *)v9, (float32x4_t *)(v1[361] + 16 * v3));
      }
      re::DynamicArray<re::BindPoint::BindPointData>::deinit((uint64_t)&v9[8]);
      result = re::DynamicArray<re::BindPoint::BindPointData>::deinit((uint64_t)&v9[8]);
      ++v2;
    }
    while (v2 < v1[298]);
  }
  return result;
}

uint64_t re::EvaluationContextManager::updateBoundOutputDataForType<re::Vector2<float>>(uint64_t result)
{
  _QWORD *v1;
  unint64_t v2;
  unint64_t v3;
  unint64_t v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  _QWORD *v8;
  _BYTE v9[12];
  __int16 v10;
  int v11;
  __int16 v12;
  unint64_t v13;
  __int16 v14;
  unint64_t v15;
  _BYTE v16[12];
  __int16 v17;
  int v18;
  __int16 v19;
  unint64_t v20;
  __int16 v21;
  unint64_t v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  uint64_t v28;

  v28 = *MEMORY[0x24BDAC8D0];
  if (*(_QWORD *)(result + 2424))
  {
    v1 = (_QWORD *)result;
    v2 = 0;
    do
    {
      v3 = *(_QWORD *)(v1[305] + 8 * v2);
      v4 = v1[258];
      if (v4 <= v3)
      {
        *(_QWORD *)v16 = 0;
        v26 = 0u;
        v27 = 0u;
        v25 = 0u;
        v23 = 0u;
        v24 = 0u;
        os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        *(_DWORD *)v9 = 136315906;
        *(_QWORD *)&v9[4] = "operator[]";
        v10 = 1024;
        v11 = 797;
        v12 = 2048;
        v13 = v3;
        v14 = 2048;
        v15 = v4;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_13:
        v26 = 0u;
        v27 = 0u;
        v25 = 0u;
        v23 = 0u;
        v24 = 0u;
        os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        *(_DWORD *)v16 = 136315906;
        *(_QWORD *)&v16[4] = "operator[]";
        v17 = 1024;
        v18 = 476;
        v19 = 2048;
        v20 = v3;
        v21 = 2048;
        v22 = v4;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_14:
        v26 = 0u;
        v27 = 0u;
        v25 = 0u;
        v23 = 0u;
        v24 = 0u;
        os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        *(_DWORD *)v16 = 136315906;
        *(_QWORD *)&v16[4] = "operator[]";
        v17 = 1024;
        v18 = 476;
        v19 = 2048;
        v20 = v3;
        v21 = 2048;
        v22 = v4;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
      }
      v5 = v1[260] + 56 * v3;
      *(_QWORD *)v9 = *(_QWORD *)v5;
      re::DynamicArray<re::BindPoint::BindPointData>::DynamicArray((uint64_t)&v9[8], (uint64_t *)(v5 + 8));
      v6 = *(unsigned __int8 *)(v5 + 48);
      v4 = v1[363];
      if (v6)
      {
        if (v4 <= v3)
          goto LABEL_13;
        v7 = v1[364];
        v8 = (_QWORD *)re::BindPoint::baseValueUntyped((re::BindPoint *)v9);
        if (v8)
        {
          *v8 = *(_QWORD *)(v7 + 8 * v3);
          re::BindPoint::markAsWritten((uint64_t)v9);
        }
      }
      else
      {
        if (v4 <= v3)
          goto LABEL_14;
        re::BindPoint::setValue<re::Vector2<float>>((uint64_t)v9, (float32x2_t *)(v1[364] + 8 * v3));
      }
      re::DynamicArray<re::BindPoint::BindPointData>::deinit((uint64_t)&v9[8]);
      result = re::DynamicArray<re::BindPoint::BindPointData>::deinit((uint64_t)&v9[8]);
      ++v2;
    }
    while (v2 < v1[303]);
  }
  return result;
}

uint64_t re::EvaluationContextManager::updateBoundOutputDataForType<re::Vector3<float>>(uint64_t result)
{
  _QWORD *v1;
  unint64_t v2;
  unint64_t v3;
  unint64_t v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  _OWORD *v8;
  _BYTE v9[12];
  __int16 v10;
  int v11;
  __int16 v12;
  unint64_t v13;
  __int16 v14;
  unint64_t v15;
  _BYTE v16[12];
  __int16 v17;
  int v18;
  __int16 v19;
  unint64_t v20;
  __int16 v21;
  unint64_t v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  uint64_t v28;

  v28 = *MEMORY[0x24BDAC8D0];
  if (*(_QWORD *)(result + 2464))
  {
    v1 = (_QWORD *)result;
    v2 = 0;
    do
    {
      v3 = *(_QWORD *)(v1[310] + 8 * v2);
      v4 = v1[263];
      if (v4 <= v3)
      {
        *(_QWORD *)v16 = 0;
        v26 = 0u;
        v27 = 0u;
        v25 = 0u;
        v23 = 0u;
        v24 = 0u;
        os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        *(_DWORD *)v9 = 136315906;
        *(_QWORD *)&v9[4] = "operator[]";
        v10 = 1024;
        v11 = 797;
        v12 = 2048;
        v13 = v3;
        v14 = 2048;
        v15 = v4;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_13:
        v26 = 0u;
        v27 = 0u;
        v25 = 0u;
        v23 = 0u;
        v24 = 0u;
        os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        *(_DWORD *)v16 = 136315906;
        *(_QWORD *)&v16[4] = "operator[]";
        v17 = 1024;
        v18 = 476;
        v19 = 2048;
        v20 = v3;
        v21 = 2048;
        v22 = v4;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_14:
        v26 = 0u;
        v27 = 0u;
        v25 = 0u;
        v23 = 0u;
        v24 = 0u;
        os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        *(_DWORD *)v16 = 136315906;
        *(_QWORD *)&v16[4] = "operator[]";
        v17 = 1024;
        v18 = 476;
        v19 = 2048;
        v20 = v3;
        v21 = 2048;
        v22 = v4;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
      }
      v5 = v1[265] + 56 * v3;
      *(_QWORD *)v9 = *(_QWORD *)v5;
      re::DynamicArray<re::BindPoint::BindPointData>::DynamicArray((uint64_t)&v9[8], (uint64_t *)(v5 + 8));
      v6 = *(unsigned __int8 *)(v5 + 48);
      v4 = v1[366];
      if (v6)
      {
        if (v4 <= v3)
          goto LABEL_13;
        v7 = v1[367];
        v8 = (_OWORD *)re::BindPoint::baseValueUntyped((re::BindPoint *)v9);
        if (v8)
        {
          *v8 = *(_OWORD *)(v7 + 16 * v3);
          re::BindPoint::markAsWritten((uint64_t)v9);
        }
      }
      else
      {
        if (v4 <= v3)
          goto LABEL_14;
        re::BindPoint::setValue<re::Vector3<float>>((re::BindPoint *)v9, (float32x4_t *)(v1[367] + 16 * v3));
      }
      re::DynamicArray<re::BindPoint::BindPointData>::deinit((uint64_t)&v9[8]);
      result = re::DynamicArray<re::BindPoint::BindPointData>::deinit((uint64_t)&v9[8]);
      ++v2;
    }
    while (v2 < v1[308]);
  }
  return result;
}

uint64_t re::EvaluationContextManager::updateBoundOutputDataForType<re::GenericSRT<float>>(uint64_t result)
{
  _QWORD *v1;
  unint64_t v2;
  unint64_t v3;
  unint64_t v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  _OWORD *v8;
  __int128 *v9;
  __int128 v10;
  __int128 v11;
  _BYTE v12[12];
  __int16 v13;
  int v14;
  __int16 v15;
  unint64_t v16;
  __int16 v17;
  unint64_t v18;
  _BYTE v19[12];
  __int16 v20;
  int v21;
  __int16 v22;
  unint64_t v23;
  __int16 v24;
  unint64_t v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  uint64_t v31;

  v31 = *MEMORY[0x24BDAC8D0];
  if (*(_QWORD *)(result + 2504))
  {
    v1 = (_QWORD *)result;
    v2 = 0;
    do
    {
      v3 = *(_QWORD *)(v1[315] + 8 * v2);
      v4 = v1[268];
      if (v4 <= v3)
      {
        *(_QWORD *)v19 = 0;
        v29 = 0u;
        v30 = 0u;
        v28 = 0u;
        v26 = 0u;
        v27 = 0u;
        os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        *(_DWORD *)v12 = 136315906;
        *(_QWORD *)&v12[4] = "operator[]";
        v13 = 1024;
        v14 = 797;
        v15 = 2048;
        v16 = v3;
        v17 = 2048;
        v18 = v4;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_13:
        v29 = 0u;
        v30 = 0u;
        v28 = 0u;
        v26 = 0u;
        v27 = 0u;
        os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        *(_DWORD *)v19 = 136315906;
        *(_QWORD *)&v19[4] = "operator[]";
        v20 = 1024;
        v21 = 476;
        v22 = 2048;
        v23 = v3;
        v24 = 2048;
        v25 = v4;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_14:
        v29 = 0u;
        v30 = 0u;
        v28 = 0u;
        v26 = 0u;
        v27 = 0u;
        os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        *(_DWORD *)v19 = 136315906;
        *(_QWORD *)&v19[4] = "operator[]";
        v20 = 1024;
        v21 = 476;
        v22 = 2048;
        v23 = v3;
        v24 = 2048;
        v25 = v4;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
      }
      v5 = v1[270] + 56 * v3;
      *(_QWORD *)v12 = *(_QWORD *)v5;
      re::DynamicArray<re::BindPoint::BindPointData>::DynamicArray((uint64_t)&v12[8], (uint64_t *)(v5 + 8));
      v6 = *(unsigned __int8 *)(v5 + 48);
      v4 = v1[369];
      if (v6)
      {
        if (v4 <= v3)
          goto LABEL_13;
        v7 = v1[370];
        v8 = (_OWORD *)re::BindPoint::baseValueUntyped((re::BindPoint *)v12);
        if (v8)
        {
          v9 = (__int128 *)(v7 + 48 * v3);
          v10 = *v9;
          v11 = v9[2];
          v8[1] = v9[1];
          v8[2] = v11;
          *v8 = v10;
          re::BindPoint::markAsWritten((uint64_t)v12);
        }
      }
      else
      {
        if (v4 <= v3)
          goto LABEL_14;
        re::BindPoint::setValue<re::GenericSRT<float>>((float32x4_t *)v12, (float32x4_t *)(v1[370] + 48 * v3));
      }
      re::DynamicArray<re::BindPoint::BindPointData>::deinit((uint64_t)&v12[8]);
      result = re::DynamicArray<re::BindPoint::BindPointData>::deinit((uint64_t)&v12[8]);
      ++v2;
    }
    while (v2 < v1[313]);
  }
  return result;
}

uint64_t re::BindPoint::setValue<int>(uint64_t result, int *a2)
{
  uint64_t v2;
  re::BindPoint *v4;
  unint64_t v5;
  _QWORD *v6;
  size_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  _DWORD *v14;
  int v15;
  _QWORD v16[2];
  int v17;
  const char *v18;
  __int16 v19;
  int v20;
  __int16 v21;
  uint64_t v22;
  __int16 v23;
  uint64_t v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  uint64_t v30;

  v30 = *MEMORY[0x24BDAC8D0];
  v2 = *(_QWORD *)(result + 24);
  if (v2)
  {
    v4 = (re::BindPoint *)result;
    MEMORY[0x24BDAC7A8](result);
    v6 = (_QWORD *)((char *)v16 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0));
    if (v5 >= 0x200)
      v7 = 512;
    else
      v7 = v5;
    bzero((char *)v16 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0), v7);
    v8 = 0;
    v9 = 0;
    v10 = *((_QWORD *)v4 + 3);
    do
    {
      if (v10 == v9)
      {
        v16[1] = 0;
        v28 = 0u;
        v29 = 0u;
        v26 = 0u;
        v27 = 0u;
        v25 = 0u;
        os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        v17 = 136315906;
        v18 = "operator[]";
        v19 = 1024;
        v20 = 797;
        v21 = 2048;
        v22 = v10;
        v23 = 2048;
        v24 = v10;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
      }
      v11 = (_QWORD *)(*((_QWORD *)v4 + 5) + v8);
      if (!*v11)
        v11 = (_QWORD *)v11[2];
      v6[v9++] = v11;
      v8 += 32;
    }
    while (v2 != v9);
    v12 = v2 - 1;
    v13 = (*(uint64_t (**)(_QWORD, _QWORD, _QWORD *, uint64_t))(*(_QWORD *)*v6 + 120))(*v6, 0, v6 + 1, v12);
    if (v13)
    {
      v14 = (_DWORD *)v13;
      result = re::BindPoint::isOverridden(v4);
      v15 = *a2;
      if (!(_DWORD)result || *v14 != v15)
      {
        *v14 = v15;
        re::BindPoint::setIsOverridden((uint64_t)v4, 1);
        return re::BindPoint::markAsWritten((uint64_t)v4);
      }
    }
    else
    {
      result = (*(uint64_t (**)(_QWORD, _QWORD, _QWORD *, uint64_t))(*(_QWORD *)*v6 + 88))(*v6, 0, v6 + 1, v12);
      if (result && *(_DWORD *)result != *a2)
      {
        *(_DWORD *)result = *a2;
        return re::BindPoint::markAsWritten((uint64_t)v4);
      }
    }
  }
  return result;
}

float32x4_t *re::BindPoint::setValue<re::Matrix3x3<float>>(float32x4_t *result, float32x4_t *a2)
{
  uint64_t v2;
  uint64_t *v4;
  unint64_t v5;
  _QWORD *v6;
  size_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  float32x4_t *v14;
  uint32x4_t v15;
  float32x4_t v16;
  float32x4_t v17;
  uint32x4_t v18;
  float32x4_t v19;
  float32x4_t v20;
  _QWORD v21[2];
  int v22;
  const char *v23;
  __int16 v24;
  int v25;
  __int16 v26;
  uint64_t v27;
  __int16 v28;
  uint64_t v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  uint64_t v35;

  v35 = *MEMORY[0x24BDAC8D0];
  v2 = result[1].i64[1];
  if (v2)
  {
    v4 = (uint64_t *)result;
    MEMORY[0x24BDAC7A8](result);
    v6 = (_QWORD *)((char *)v21 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0));
    if (v5 >= 0x200)
      v7 = 512;
    else
      v7 = v5;
    bzero((char *)v21 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0), v7);
    v8 = 0;
    v9 = 0;
    v10 = v4[3];
    do
    {
      if (v10 == v9)
      {
        v21[1] = 0;
        v33 = 0u;
        v34 = 0u;
        v31 = 0u;
        v32 = 0u;
        v30 = 0u;
        os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        v22 = 136315906;
        v23 = "operator[]";
        v24 = 1024;
        v25 = 797;
        v26 = 2048;
        v27 = v10;
        v28 = 2048;
        v29 = v10;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
      }
      v11 = (_QWORD *)(v4[5] + v8);
      if (!*v11)
        v11 = (_QWORD *)v11[2];
      v6[v9++] = v11;
      v8 += 32;
    }
    while (v2 != v9);
    v12 = v2 - 1;
    v13 = (*(uint64_t (**)(_QWORD, _QWORD, _QWORD *, uint64_t))(*(_QWORD *)*v6 + 120))(*v6, 0, v6 + 1, v12);
    if (v13)
    {
      v14 = (float32x4_t *)v13;
      result = (float32x4_t *)re::BindPoint::isOverridden((re::BindPoint *)v4);
      if (!(_DWORD)result
        || (v15 = (uint32x4_t)vandq_s8(vandq_s8((int8x16_t)vceqq_f32(v14[1], a2[1]), (int8x16_t)vceqq_f32(*v14, *a2)), (int8x16_t)vceqq_f32(v14[2], a2[2])), v15.i32[3] = v15.i32[2], (vminvq_u32(v15) & 0x80000000) == 0))
      {
        v16 = *a2;
        v17 = a2[2];
        v14[1] = a2[1];
        v14[2] = v17;
        *v14 = v16;
        re::BindPoint::setIsOverridden((uint64_t)v4, 1);
        return (float32x4_t *)re::BindPoint::markAsWritten((uint64_t)v4);
      }
    }
    else
    {
      result = (float32x4_t *)(*(uint64_t (**)(_QWORD, _QWORD, _QWORD *, uint64_t))(*(_QWORD *)*v6 + 88))(*v6, 0, v6 + 1, v12);
      if (result)
      {
        v18 = (uint32x4_t)vandq_s8(vandq_s8((int8x16_t)vceqq_f32(result[1], a2[1]), (int8x16_t)vceqq_f32(*result, *a2)), (int8x16_t)vceqq_f32(result[2], a2[2]));
        v18.i32[3] = v18.i32[2];
        if ((vminvq_u32(v18) & 0x80000000) == 0)
        {
          v19 = *a2;
          v20 = a2[2];
          result[1] = a2[1];
          result[2] = v20;
          *result = v19;
          return (float32x4_t *)re::BindPoint::markAsWritten((uint64_t)v4);
        }
      }
    }
  }
  return result;
}

float32x4_t *re::BindPoint::setValue<re::Matrix4x4<float>>(float32x4_t *result, float32x4_t *a2)
{
  uint64_t v2;
  uint64_t *v4;
  unint64_t v5;
  _QWORD *v6;
  size_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  float32x4_t *v14;
  float32x4_t v15;
  float32x4_t v16;
  float32x4_t v17;
  float32x4_t v18;
  float32x4_t v19;
  float32x4_t v20;
  _QWORD v21[2];
  int v22;
  const char *v23;
  __int16 v24;
  int v25;
  __int16 v26;
  uint64_t v27;
  __int16 v28;
  uint64_t v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  uint64_t v35;

  v35 = *MEMORY[0x24BDAC8D0];
  v2 = result[1].i64[1];
  if (v2)
  {
    v4 = (uint64_t *)result;
    MEMORY[0x24BDAC7A8](result);
    v6 = (_QWORD *)((char *)v21 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0));
    if (v5 >= 0x200)
      v7 = 512;
    else
      v7 = v5;
    bzero((char *)v21 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0), v7);
    v8 = 0;
    v9 = 0;
    v10 = v4[3];
    do
    {
      if (v10 == v9)
      {
        v21[1] = 0;
        v33 = 0u;
        v34 = 0u;
        v31 = 0u;
        v32 = 0u;
        v30 = 0u;
        os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        v22 = 136315906;
        v23 = "operator[]";
        v24 = 1024;
        v25 = 797;
        v26 = 2048;
        v27 = v10;
        v28 = 2048;
        v29 = v10;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
      }
      v11 = (_QWORD *)(v4[5] + v8);
      if (!*v11)
        v11 = (_QWORD *)v11[2];
      v6[v9++] = v11;
      v8 += 32;
    }
    while (v2 != v9);
    v12 = v2 - 1;
    v13 = (*(uint64_t (**)(_QWORD, _QWORD, _QWORD *, uint64_t))(*(_QWORD *)*v6 + 120))(*v6, 0, v6 + 1, v12);
    if (v13)
    {
      v14 = (float32x4_t *)v13;
      result = (float32x4_t *)re::BindPoint::isOverridden((re::BindPoint *)v4);
      if (!(_DWORD)result
        || (vminvq_u32((uint32x4_t)vandq_s8(vandq_s8((int8x16_t)vceqq_f32(v14[1], a2[1]), (int8x16_t)vceqq_f32(*v14, *a2)), vandq_s8((int8x16_t)vceqq_f32(v14[2], a2[2]), (int8x16_t)vceqq_f32(v14[3], a2[3])))) & 0x80000000) == 0)
      {
        v15 = *a2;
        v16 = a2[1];
        v17 = a2[3];
        v14[2] = a2[2];
        v14[3] = v17;
        *v14 = v15;
        v14[1] = v16;
        re::BindPoint::setIsOverridden((uint64_t)v4, 1);
        return (float32x4_t *)re::BindPoint::markAsWritten((uint64_t)v4);
      }
    }
    else
    {
      result = (float32x4_t *)(*(uint64_t (**)(_QWORD, _QWORD, _QWORD *, uint64_t))(*(_QWORD *)*v6 + 88))(*v6, 0, v6 + 1, v12);
      if (result
        && (vminvq_u32((uint32x4_t)vandq_s8(vandq_s8((int8x16_t)vceqq_f32(result[1], a2[1]), (int8x16_t)vceqq_f32(*result, *a2)), vandq_s8((int8x16_t)vceqq_f32(result[2], a2[2]), (int8x16_t)vceqq_f32(result[3], a2[3])))) & 0x80000000) == 0)
      {
        v18 = *a2;
        v19 = a2[1];
        v20 = a2[3];
        result[2] = a2[2];
        result[3] = v20;
        *result = v18;
        result[1] = v19;
        return (float32x4_t *)re::BindPoint::markAsWritten((uint64_t)v4);
      }
    }
  }
  return result;
}

uint64_t re::Result<re::EvaluationRigState,re::DetailedError>::~Result(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _OWORD *v5;

  if (*(_BYTE *)a1)
  {
    re::RigGraphCompilation::~RigGraphCompilation((re::RigGraphCompilation *)(a1 + 96));
    v2 = *(_QWORD *)(a1 + 72);
    if (v2)
    {
      if (*(_QWORD *)(a1 + 80))
      {
        (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v2 + 40))(v2, *(_QWORD *)(a1 + 88));
        *(_QWORD *)(a1 + 80) = 0;
        *(_QWORD *)(a1 + 88) = 0;
      }
      *(_QWORD *)(a1 + 72) = 0;
    }
    v3 = *(_QWORD *)(a1 + 48);
    if (v3)
    {
      if (*(_QWORD *)(a1 + 56))
      {
        (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v3 + 40))(v3, *(_QWORD *)(a1 + 64));
        *(_QWORD *)(a1 + 56) = 0;
        *(_QWORD *)(a1 + 64) = 0;
      }
      *(_QWORD *)(a1 + 48) = 0;
    }
    std::unique_ptr<re::RigHierarchy,std::function<void ()(re::RigHierarchy*)>>::~unique_ptr[abi:nn180100]((uint64_t *)(a1 + 8));
  }
  else
  {
    v5 = (_OWORD *)(a1 + 24);
    v4 = *(_QWORD *)(a1 + 24);
    if (v4)
    {
      if ((*(_BYTE *)(a1 + 32) & 1) != 0)
        (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v4 + 40))(v4, *(_QWORD *)(a1 + 40));
      *v5 = 0u;
      *(_OWORD *)(a1 + 40) = 0u;
    }
  }
  return a1;
}

void std::__function::__func<void re::SkeletalPoseRuntimeData::rebuildRuntimeData<re::MeshAsset>(re::SkeletalPoseDefinitionAsset const&,re::RigRuntimeData const&,re::MeshAsset const&,re::MeshNameMap const&,re::SkeletalPoseRigMappingData const&,re::Slice<re::BindPoint> const&,re::MutableSlice<re::Matrix4x4<float>>,re::DynamicArray<re::DynamicArray<re::Matrix4x4<float>>> &,re::BindNode &)::{lambda(re::EvaluationModelBase *)#1},std::allocator<void re::SkeletalPoseRuntimeData::rebuildRuntimeData<re::MeshAsset>(re::SkeletalPoseDefinitionAsset const&,re::RigRuntimeData const&,re::MeshAsset const&,re::MeshNameMap const&,re::SkeletalPoseRigMappingData const&,re::Slice<re::BindPoint> const&,re::MutableSlice<re::Matrix4x4<float>>,re::DynamicArray<re::DynamicArray<re::Matrix4x4<float>>> &,re::BindNode &)::{lambda(re::EvaluationModelBase *)#1}>,void ()(re::EvaluationModelBase *)>::~__func()
{
  JUMPOUT(0x2276933B8);
}

_QWORD *std::__function::__func<void re::SkeletalPoseRuntimeData::rebuildRuntimeData<re::MeshAsset>(re::SkeletalPoseDefinitionAsset const&,re::RigRuntimeData const&,re::MeshAsset const&,re::MeshNameMap const&,re::SkeletalPoseRigMappingData const&,re::Slice<re::BindPoint> const&,re::MutableSlice<re::Matrix4x4<float>>,re::DynamicArray<re::DynamicArray<re::Matrix4x4<float>>> &,re::BindNode &)::{lambda(re::EvaluationModelBase *)#1},std::allocator<void re::SkeletalPoseRuntimeData::rebuildRuntimeData<re::MeshAsset>(re::SkeletalPoseDefinitionAsset const&,re::RigRuntimeData const&,re::MeshAsset const&,re::MeshNameMap const&,re::SkeletalPoseRigMappingData const&,re::Slice<re::BindPoint> const&,re::MutableSlice<re::Matrix4x4<float>>,re::DynamicArray<re::DynamicArray<re::Matrix4x4<float>>> &,re::BindNode &)::{lambda(re::EvaluationModelBase *)#1}>,void ()(re::EvaluationModelBase *)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_24ED37600;
  return result;
}

void std::__function::__func<void re::SkeletalPoseRuntimeData::rebuildRuntimeData<re::MeshAsset>(re::SkeletalPoseDefinitionAsset const&,re::RigRuntimeData const&,re::MeshAsset const&,re::MeshNameMap const&,re::SkeletalPoseRigMappingData const&,re::Slice<re::BindPoint> const&,re::MutableSlice<re::Matrix4x4<float>>,re::DynamicArray<re::DynamicArray<re::Matrix4x4<float>>> &,re::BindNode &)::{lambda(re::EvaluationModelBase *)#1},std::allocator<void re::SkeletalPoseRuntimeData::rebuildRuntimeData<re::MeshAsset>(re::SkeletalPoseDefinitionAsset const&,re::RigRuntimeData const&,re::MeshAsset const&,re::MeshNameMap const&,re::SkeletalPoseRigMappingData const&,re::Slice<re::BindPoint> const&,re::MutableSlice<re::Matrix4x4<float>>,re::DynamicArray<re::DynamicArray<re::Matrix4x4<float>>> &,re::BindNode &)::{lambda(re::EvaluationModelBase *)#1}>,void ()(re::EvaluationModelBase *)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_24ED37600;
}

re *std::__function::__func<void re::SkeletalPoseRuntimeData::rebuildRuntimeData<re::MeshAsset>(re::SkeletalPoseDefinitionAsset const&,re::RigRuntimeData const&,re::MeshAsset const&,re::MeshNameMap const&,re::SkeletalPoseRigMappingData const&,re::Slice<re::BindPoint> const&,re::MutableSlice<re::Matrix4x4<float>>,re::DynamicArray<re::DynamicArray<re::Matrix4x4<float>>> &,re::BindNode &)::{lambda(re::EvaluationModelBase *)#1},std::allocator<void re::SkeletalPoseRuntimeData::rebuildRuntimeData<re::MeshAsset>(re::SkeletalPoseDefinitionAsset const&,re::RigRuntimeData const&,re::MeshAsset const&,re::MeshNameMap const&,re::SkeletalPoseRigMappingData const&,re::Slice<re::BindPoint> const&,re::MutableSlice<re::Matrix4x4<float>>,re::DynamicArray<re::DynamicArray<re::Matrix4x4<float>>> &,re::BindNode &)::{lambda(re::EvaluationModelBase *)#1}>,void ()(re::EvaluationModelBase *)>::operator()(re *result, void (****a2)(_QWORD))
{
  void (***v2)(_QWORD);
  uint64_t v3;

  v2 = *a2;
  if (*a2)
  {
    v3 = re::globalAllocators(result)[2];
    (**v2)(v2);
    return (re *)(*(uint64_t (**)(uint64_t, void (***)(_QWORD)))(*(_QWORD *)v3 + 40))(v3, v2);
  }
  return result;
}

uint64_t std::__function::__func<void re::SkeletalPoseRuntimeData::rebuildRuntimeData<re::MeshAsset>(re::SkeletalPoseDefinitionAsset const&,re::RigRuntimeData const&,re::MeshAsset const&,re::MeshNameMap const&,re::SkeletalPoseRigMappingData const&,re::Slice<re::BindPoint> const&,re::MutableSlice<re::Matrix4x4<float>>,re::DynamicArray<re::DynamicArray<re::Matrix4x4<float>>> &,re::BindNode &)::{lambda(re::EvaluationModelBase *)#1},std::allocator<void re::SkeletalPoseRuntimeData::rebuildRuntimeData<re::MeshAsset>(re::SkeletalPoseDefinitionAsset const&,re::RigRuntimeData const&,re::MeshAsset const&,re::MeshNameMap const&,re::SkeletalPoseRigMappingData const&,re::Slice<re::BindPoint> const&,re::MutableSlice<re::Matrix4x4<float>>,re::DynamicArray<re::DynamicArray<re::Matrix4x4<float>>> &,re::BindNode &)::{lambda(re::EvaluationModelBase *)#1}>,void ()(re::EvaluationModelBase *)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<void re::SkeletalPoseRuntimeData::rebuildRuntimeData<re::MeshAsset>(re::SkeletalPoseDefinitionAsset const&,re::RigRuntimeData const&,re::MeshAsset const&,re::MeshNameMap const&,re::SkeletalPoseRigMappingData const&,re::Slice<re::BindPoint> const&,re::MutableSlice<re::Matrix4x4<float>>,re::DynamicArray<re::DynamicArray<re::Matrix4x4<float>>> &,re::BindNode &)::{lambda(re::EvaluationModelBase *)#1},std::allocator<void re::SkeletalPoseRuntimeData::rebuildRuntimeData<re::MeshAsset>(re::SkeletalPoseDefinitionAsset const&,re::RigRuntimeData const&,re::MeshAsset const&,re::MeshNameMap const&,re::SkeletalPoseRigMappingData const&,re::Slice<re::BindPoint> const&,re::MutableSlice<re::Matrix4x4<float>>,re::DynamicArray<re::DynamicArray<re::Matrix4x4<float>>> &,re::BindNode &)::{lambda(re::EvaluationModelBase *)#1}>,void ()(re::EvaluationModelBase *)>::target_type()
{
}

void re::IOSurfaceWrapper::SharedEvent::createSharedEvent(_QWORD *a1@<X8>)
{
  id v3;

  v3 = objc_alloc_init(MEMORY[0x24BDD8DF8]);
  *a1 = v3;

}

void re::IOSurfaceWrapper::SharedEventListener::createSharedEventListenerWithQueue(_QWORD *a1@<X0>, _QWORD *a2@<X8>)
{
  id v3;

  v3 = (id)objc_msgSend(objc_alloc(MEMORY[0x24BDD8E00]), "initWithDispatchQueue:", *a1);
  *a2 = v3;

}

const __CFString *re::figAlternateGetPackingLoggingStringForFigTagCollection(re *this, const OpaqueCMTagCollection *a2)
{
  int TagsWithCategory;
  const __CFString *result;

  if (!this)
    return CFSTR("UNKNOWN");
  if (!MEMORY[0x24BDC0A28])
  {
    if (!MEMORY[0x24BDC0A30])
      return 0;
    goto LABEL_11;
  }
  TagsWithCategory = FigTagCollectionGetTagsWithCategory();
  if (TagsWithCategory)
    result = CFSTR("UNKNOWN");
  else
    result = 0;
  if (!TagsWithCategory && MEMORY[0x24BDC0A30])
  {
LABEL_11:
    if (FigTagEqualToTag())
    {
      return CFSTR("SIDE");
    }
    else if (FigTagEqualToTag())
    {
      return CFSTR("OVER");
    }
    else if (FigTagEqualToTag())
    {
      return CFSTR("NONE");
    }
    else
    {
      return CFSTR("UNKNOWN");
    }
  }
  return result;
}

const __CFString *re::figAlternateGetChannelsLoggingStringForFigTagCollection(re *this, const OpaqueCMTagCollection *a2)
{
  int TagsWithCategory;
  const __CFString *result;

  if (!this)
    return CFSTR("UNKNOWN");
  if (!MEMORY[0x24BDC0A28])
  {
    if (!MEMORY[0x24BDC0A30])
      return 0;
    goto LABEL_11;
  }
  TagsWithCategory = FigTagCollectionGetTagsWithCategory();
  if (TagsWithCategory)
    result = CFSTR("UNKNOWN");
  else
    result = 0;
  if (!TagsWithCategory && MEMORY[0x24BDC0A30])
  {
LABEL_11:
    if (FigTagEqualToTag())
    {
      return CFSTR("LEFT");
    }
    else if (FigTagEqualToTag())
    {
      return CFSTR("RIGHT");
    }
    else if (FigTagEqualToTag())
    {
      return CFSTR("STEREO");
    }
    else if (FigTagEqualToTag())
    {
      return CFSTR("MONO");
    }
    else
    {
      return CFSTR("UNKNOWN");
    }
  }
  return result;
}

const __CFString *re::figAlternateProjectionLoggingStringForFigTagCollection(re *this, const OpaqueCMTagCollection *a2)
{
  int TagsWithCategory;
  const __CFString *result;

  if (!this)
    return CFSTR("UNKNOWN");
  if (!MEMORY[0x24BDC0A28])
  {
    if (!MEMORY[0x24BDC0A30])
      return 0;
    goto LABEL_11;
  }
  TagsWithCategory = FigTagCollectionGetTagsWithCategory();
  if (TagsWithCategory)
    result = CFSTR("UNKNOWN");
  else
    result = 0;
  if (!TagsWithCategory && MEMORY[0x24BDC0A30])
  {
LABEL_11:
    if (FigTagEqualToTag())
    {
      return CFSTR("RECT");
    }
    else if (FigTagEqualToTag())
    {
      return CFSTR("FISH");
    }
    else
    {
      return CFSTR("UNKNOWN");
    }
  }
  return result;
}

void re::getDataPreferenceArray(_anonymous_namespace_ *a1, int a2)
{
  if (a2 == 1)
  {
  }
  else
  {
  }
}

void `anonymous namespace'::addImmersiveDataChannelGroups(_anonymous_namespace_ *a1, int a2)
{
  if (a2)
  {
  }
  if ((a2 & 1) == 0)
  {
  }
}

void `anonymous namespace'::addMonoscopicDataChannelGroups(_anonymous_namespace_ *a1)
{
}

void `anonymous namespace'::addStereoscopicDataChannelGroups(_anonymous_namespace_ *a1)
{
}

uint64_t re::setVideoDataPreferences(re *a1, int a2)
{
  NSObject *v4;
  uint64_t v5;
  const char *v6;
  char v7;
  _OWORD *v8;
  _OWORD *v9;
  char v10;
  re *v11;
  int v12;
  re *v13;
  int v14;
  re *v15;
  int v16;
  _anonymous_namespace_ *v17;
  NSObject *v18;
  re *v19;
  uint64_t v20;
  unint64_t v21;
  NSObject *v22;
  CFTypeRef *v23;
  unint64_t v24;
  uint64_t v25;
  CFTypeRef v26;
  NSObject *v27;
  unint64_t v28;
  uint64_t v29;
  CFTypeRef v30;
  NSObject *v31;
  uint64_t v32;
  CFTypeRef *v33;
  unint64_t v34;
  char *v35;
  char *v36;
  NSObject *v37;
  char *v38;
  uint64_t i;
  re *DataChannelByIndex;
  const OpaqueCMTagCollection *v41;
  const __CFString *PackingLoggingStringForFigTagCollection;
  const OpaqueCMTagCollection *v43;
  const __CFString *ChannelsLoggingStringForFigTagCollection;
  const OpaqueCMTagCollection *v45;
  re *v46;
  NSObject *v47;
  uint64_t v48;
  CFArrayRef v49;
  uint64_t v50;
  uint64_t (*v51)(uint64_t, CFArrayRef, _QWORD);
  int v52;
  uint64_t v53;
  CFTypeRef *v54;
  re *v55;
  NSObject *v56;
  uint64_t v57;
  void *v59;
  re *v60;
  char *v61;
  const __CFAllocator *allocator;
  uint64_t v63;
  uint64_t v64;
  unint64_t v65;
  int v66;
  void *__dst;
  uint64_t v68;
  uint8_t v69[4];
  int v70;
  uint64_t v71;
  uint8_t buf[24];
  int v73;
  void *__src;
  _BYTE v75[32];
  uint64_t v76;

  v76 = *MEMORY[0x24BDAC8D0];
  v4 = *re::videoLogObjects(a1);
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    v5 = *(_QWORD *)a1;
    v6 = "Unknown";
    if (a2 == 1)
      v6 = "Mono";
    if (a2 == 2)
      v6 = "Stereo";
    *(_DWORD *)buf = 134218242;
    *(_QWORD *)&buf[4] = v5;
    *(_WORD *)&buf[12] = 2082;
    *(_QWORD *)&buf[14] = v6;
    _os_log_impl(&dword_224FE9000, v4, OS_LOG_TYPE_DEFAULT, "Setting Fig Receiver preferences with FVR pointer %p: %{public}s", buf, 0x16u);
  }
  v60 = a1;
  __src = 0;
  memset(buf, 0, sizeof(buf));
  v73 = 0;
  re::DynamicArray<float *>::setCapacity(buf, 0x10uLL);
  re::getDataPreferenceArray((_anonymous_namespace_ *)buf, a2);
  v7 = 1;
  v71 = 1;
  v8 = (_OWORD *)MEMORY[0x24BDC1298];
  v9 = (_OWORD *)MEMORY[0x24BDC1290];
  allocator = (const __CFAllocator *)*MEMORY[0x24BDBD240];
  do
  {
    v10 = v7;
    v68 = 0;
    v11 = (re *)FigDataChannelGroupCreateForUseCase();
    v12 = (int)v11;
    if ((_DWORD)v11)
    {
      v22 = *re::videoLogObjects(v11);
      if (os_log_type_enabled(v22, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)v75 = 67109120;
        *(_DWORD *)&v75[4] = v12;
        _os_log_error_impl(&dword_224FE9000, v22, OS_LOG_TYPE_ERROR, "Failed to create video data channel group (error: %d)", v75, 8u);
      }
      v23 = (CFTypeRef *)__src;
      if (*(_QWORD *)&buf[16])
      {
        v24 = 0;
        v25 = 8 * *(_QWORD *)&buf[16];
        do
        {
          v26 = v23[v24 / 8];
          if (v26)
            CFRelease(v26);
          v24 += 8;
        }
        while (v25 != v24);
      }
      goto LABEL_72;
    }
    *(_OWORD *)v75 = *v8;
    *(_OWORD *)&v75[16] = *v9;
    v13 = (re *)FigDataChannelGroupAddDataChannelWithFigTags();
    v14 = (int)v13;
    if ((_DWORD)v13)
    {
      v27 = *re::videoLogObjects(v13);
      if (os_log_type_enabled(v27, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)v75 = 67109120;
        *(_DWORD *)&v75[4] = v14;
        _os_log_error_impl(&dword_224FE9000, v27, OS_LOG_TYPE_ERROR, "Failed to add a FigTag collection to channel group (error: %d).", v75, 8u);
      }
      v23 = (CFTypeRef *)__src;
      if (*(_QWORD *)&buf[16])
      {
        v28 = 0;
        v29 = 8 * *(_QWORD *)&buf[16];
        do
        {
          v30 = v23[v28 / 8];
          if (v30)
            CFRelease(v30);
          v28 += 8;
        }
        while (v29 != v28);
      }
      goto LABEL_72;
    }
    re::DynamicArray<re::RigDataValue *>::add((_anonymous_namespace_ *)buf, &v68);
    *(_QWORD *)v75 = 0;
    v15 = (re *)FigDataChannelGroupCreateForUseCase();
    v16 = (int)v15;
    if ((_DWORD)v15)
    {
      v31 = *re::videoLogObjects(v15);
      if (os_log_type_enabled(v31, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)v69 = 67109120;
        v70 = v16;
        _os_log_error_impl(&dword_224FE9000, v31, OS_LOG_TYPE_ERROR, "Failed to create video data channel group (error: %d)", v69, 8u);
      }
      v23 = (CFTypeRef *)__src;
      if (*(_QWORD *)&buf[16])
      {
        v32 = 8 * *(_QWORD *)&buf[16];
        v33 = (CFTypeRef *)__src;
        do
        {
          if (*v33)
            CFRelease(*v33);
          ++v33;
          v32 -= 8;
        }
        while (v32);
      }
      goto LABEL_72;
    }
    v17 = re::DynamicArray<re::RigDataValue *>::add((_anonymous_namespace_ *)buf, v75);
    v7 = 0;
  }
  while ((v10 & 1) != 0);
  v18 = *re::videoLogObjects(v17);
  v19 = (re *)os_log_type_enabled(v18, OS_LOG_TYPE_DEFAULT);
  if ((_DWORD)v19)
  {
    v20 = *(_QWORD *)a1;
    *(_DWORD *)v75 = 134217984;
    *(_QWORD *)&v75[4] = v20;
    _os_log_impl(&dword_224FE9000, v18, OS_LOG_TYPE_DEFAULT, "Setting Fig Receiver Preferences Groups Final List with FVR pointer %p:", v75, 0xCu);
  }
  __dst = 0;
  v64 = 0;
  v65 = 0;
  v63 = 0;
  v66 = 0;
  if (*(_QWORD *)buf)
  {
    v21 = *(_QWORD *)&buf[16];
    v63 = *(_QWORD *)buf;
    v19 = (re *)re::DynamicArray<float *>::setCapacity(&v63, *(unint64_t *)&buf[16]);
    ++v66;
    if (v21 >= v65)
    {
      re::DynamicArray<float *>::setCapacity(&v63, v21);
      v34 = v65;
      v35 = (char *)__dst;
      v36 = (char *)__src;
      if (v65)
        memmove(__dst, __src, 8 * v65);
      v19 = (re *)memcpy(&v35[8 * v34], &v36[8 * v34], 8 * v21 - 8 * v34);
    }
    else if (v21)
    {
      v19 = (re *)memmove(__dst, __src, 8 * v21);
    }
    v65 = v21;
  }
  else
  {
    v21 = 0;
  }
  v37 = *re::videoLogObjects(v19);
  if (os_log_type_enabled(v37, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)v75 = 0;
    _os_log_impl(&dword_224FE9000, v37, OS_LOG_TYPE_DEFAULT, "Setting the FigVideoPreferences Tag Collection Currently:", v75, 2u);
  }
  v59 = __dst;
  if (v21)
  {
    v38 = (char *)__dst;
    v61 = (char *)__dst + 8 * v21;
    do
    {
      for (i = 0; FigDataChannelGroupGetCountOfDataChannels() > i; ++i)
      {
        DataChannelByIndex = (re *)FigDataChannelGroupGetDataChannelByIndex();
        PackingLoggingStringForFigTagCollection = re::figAlternateGetPackingLoggingStringForFigTagCollection(DataChannelByIndex, v41);
        ChannelsLoggingStringForFigTagCollection = re::figAlternateGetChannelsLoggingStringForFigTagCollection(DataChannelByIndex, v43);
        v46 = (re *)re::figAlternateProjectionLoggingStringForFigTagCollection(DataChannelByIndex, v45);
        v47 = *re::videoLogObjects(v46);
        if (os_log_type_enabled(v47, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)v75 = 138412802;
          *(_QWORD *)&v75[4] = PackingLoggingStringForFigTagCollection;
          *(_WORD *)&v75[12] = 2112;
          *(_QWORD *)&v75[14] = ChannelsLoggingStringForFigTagCollection;
          *(_WORD *)&v75[22] = 2112;
          *(_QWORD *)&v75[24] = v46;
          _os_log_impl(&dword_224FE9000, v47, OS_LOG_TYPE_DEFAULT, "                                         Tag Collection :%@/%@/%@", v75, 0x20u);
        }
      }
      v38 += 8;
    }
    while (v38 != v61);
  }
  if (v63)
  {
    if (v59)
      (*(void (**)(void))(*(_QWORD *)v63 + 40))();
    __dst = 0;
    v64 = 0;
    v65 = 0;
    v63 = 0;
    ++v66;
  }
  v23 = (CFTypeRef *)__src;
  v48 = *(_QWORD *)&buf[16];
  v49 = CFArrayCreate(allocator, (const void **)__src, *(CFIndex *)&buf[16], MEMORY[0x24BDBD690]);
  v50 = *(_QWORD *)v60;
  v51 = *(uint64_t (**)(uint64_t, CFArrayRef, _QWORD))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 72);
  if (v51)
  {
    v52 = v51(v50, v49, 0);
    if (!v48)
      goto LABEL_69;
  }
  else
  {
    v52 = -12782;
    if (!v48)
      goto LABEL_69;
  }
  v53 = 8 * v48;
  v54 = v23;
  do
  {
    if (*v54)
      CFRelease(*v54);
    ++v54;
    v53 -= 8;
  }
  while (v53);
LABEL_69:
  CFRelease(v49);
  if (v52)
  {
    v56 = *re::videoLogObjects(v55);
    if (os_log_type_enabled(v56, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)v75 = 67109120;
      *(_DWORD *)&v75[4] = v52;
      _os_log_error_impl(&dword_224FE9000, v56, OS_LOG_TYPE_ERROR, "Failed to set preferred video data channels (error: %d)", v75, 8u);
    }
LABEL_72:
    v57 = 0;
    goto LABEL_73;
  }
  v57 = 1;
LABEL_73:
  if (*(_QWORD *)buf && v23)
    (*(void (**)(void))(**(_QWORD **)buf + 40))();
  return v57;
}

void sub_22532B044(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27)
{
  if (a23)
  {
    if (a27)
      (*(void (**)(void))(*(_QWORD *)a23 + 40))();
  }
  _Unwind_Resume(exception_object);
}

BOOL re::createVideoReceiver(const void **a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  re *v8;
  int v9;
  NSObject *v10;
  _BOOL8 result;
  const char *v12;
  NSObject *v13;
  uint32_t v14;
  CFTypeRef v15;
  re *v16;
  NSObject *v17;
  const void *v18;
  const void *v19;
  _QWORD *v20;
  uint64_t (*v21)(const void *, _QWORD *);
  int v22;
  re *v23;
  const void *v24;
  _QWORD *v25;
  uint64_t (*v26)(const void *, _QWORD *);
  int v27;
  re *v28;
  NSObject *v29;
  NSObject *v30;
  NSObject *v31;
  _QWORD v32[7];
  _QWORD v33[7];
  CFTypeRef v34;
  uint8_t buf[4];
  const void *v36;
  uint64_t v37;

  v37 = *MEMORY[0x24BDAC8D0];
  v34 = 0;
  v8 = (re *)MEMORY[0x227691AD4](*MEMORY[0x24BDBD240], 0, &v34);
  v9 = (int)v8;
  if ((_DWORD)v8)
  {
    v10 = *re::videoLogObjects(v8);
    result = os_log_type_enabled(v10, OS_LOG_TYPE_ERROR);
    if (!result)
      return result;
    *(_DWORD *)buf = 67109120;
    LODWORD(v36) = v9;
    v12 = "Failed to create video receiver (error: %d)";
    v13 = v10;
    v14 = 8;
    goto LABEL_4;
  }
  v15 = v34;
  if (v34)
  {
    if (*a1)
      re::VideoObjectBase<re::VideoColorTransformBase,__CFArray const*>::release(a1);
    *a1 = v15;
    CFRetain(v15);
    CFRelease(v34);
    v17 = *re::videoLogObjects(v16);
    if (os_log_type_enabled(v17, OS_LOG_TYPE_DEFAULT))
    {
      v18 = *a1;
      *(_DWORD *)buf = 134217984;
      v36 = v18;
      _os_log_impl(&dword_224FE9000, v17, OS_LOG_TYPE_DEFAULT, "Creating Fig Receiver %p", buf, 0xCu);
    }
    if (!a2)
      goto LABEL_13;
    v19 = *a1;
    v33[0] = MEMORY[0x24BDAC760];
    v33[1] = 3221225472;
    v33[2] = ___ZN2re19createVideoReceiverERNS_11VideoObjectINS_17VideoReceiverBaseEEEPFvP22OpaqueFigVideoReceiver6CMTimejPK9__CFArrayPK14__CFDictionaryS9_PvEPFvS5_P28OpaqueFigDataChannelResourceSD_38FigVideoReceiverResourceLifeCycleEventESD__block_invoke;
    v33[3] = &__block_descriptor_56_e96_v68__0__OpaqueFigVideoReceiver__8___qiIq_16I40____CFArray__44____CFDictionary__52____CFArray__60l;
    v33[4] = a4;
    v33[5] = a1;
    v33[6] = a2;
    v20 = v33;
    v21 = *(uint64_t (**)(const void *, _QWORD *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 184);
    if (v21)
    {
      v22 = v21(v19, v20);

      if (!v22)
      {
LABEL_13:
        if (!a3)
          return 1;
        v24 = *a1;
        v32[0] = MEMORY[0x24BDAC760];
        v32[1] = 3221225472;
        v32[2] = ___ZN2re19createVideoReceiverERNS_11VideoObjectINS_17VideoReceiverBaseEEEPFvP22OpaqueFigVideoReceiver6CMTimejPK9__CFArrayPK14__CFDictionaryS9_PvEPFvS5_P28OpaqueFigDataChannelResourceSD_38FigVideoReceiverResourceLifeCycleEventESD__block_invoke_41;
        v32[3] = &__block_descriptor_56_e70_v28__0__OpaqueFigVideoReceiver__8__OpaqueFigDataChannelResource__16i24l;
        v32[4] = a4;
        v32[5] = a1;
        v32[6] = a3;
        v25 = v32;
        v26 = *(uint64_t (**)(const void *, _QWORD *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 176);
        if (v26)
        {
          v27 = v26(v24, v25);

          if (!v27)
            return 1;
        }
        else
        {

          v27 = -12782;
        }
        v31 = *re::videoLogObjects(v28);
        if (os_log_type_enabled(v31, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)buf = 67109120;
          LODWORD(v36) = v27;
          _os_log_error_impl(&dword_224FE9000, v31, OS_LOG_TYPE_ERROR, "Failed to register change callback handler for resources (error: %d)", buf, 8u);
        }
        if (*a1)
          re::VideoObjectBase<re::VideoColorTransformBase,__CFArray const*>::release(a1);
        goto LABEL_29;
      }
    }
    else
    {

      v22 = -12782;
    }
    v30 = *re::videoLogObjects(v23);
    if (os_log_type_enabled(v30, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 67109120;
      LODWORD(v36) = v22;
      _os_log_error_impl(&dword_224FE9000, v30, OS_LOG_TYPE_ERROR, "Failed to register change callback handler for video data channels and dependent resources (error: %d)", buf, 8u);
    }
    if (*a1)
      re::VideoObjectBase<re::VideoColorTransformBase,__CFArray const*>::release(a1);
LABEL_29:
    result = 0;
    *a1 = 0;
    return result;
  }
  v29 = *re::videoLogObjects(v8);
  result = os_log_type_enabled(v29, OS_LOG_TYPE_ERROR);
  if (result)
  {
    *(_WORD *)buf = 0;
    v12 = "Failed to create video receiver";
    v13 = v29;
    v14 = 2;
LABEL_4:
    _os_log_error_impl(&dword_224FE9000, v13, OS_LOG_TYPE_ERROR, v12, buf, v14);
    return 0;
  }
  return result;
}

void sub_22532B420(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t ___ZN2re19createVideoReceiverERNS_11VideoObjectINS_17VideoReceiverBaseEEEPFvP22OpaqueFigVideoReceiver6CMTimejPK9__CFArrayPK14__CFDictionaryS9_PvEPFvS5_P28OpaqueFigDataChannelResourceSD_38FigVideoReceiverResourceLifeCycleEventESD__block_invoke(uint64_t result, uint64_t a2, __int128 *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  uint64_t (*v8)(uint64_t, __int128 *, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);
  __int128 v9;
  uint64_t v10;

  v7 = *(_QWORD *)(result + 32);
  if (v7)
  {
    if (**(_QWORD **)(result + 40) == a2)
    {
      v8 = *(uint64_t (**)(uint64_t, __int128 *, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(result + 48);
      v9 = *a3;
      v10 = *((_QWORD *)a3 + 2);
      return v8(a2, &v9, a4, a5, a6, a7, v7);
    }
  }
  return result;
}

uint64_t ___ZN2re19createVideoReceiverERNS_11VideoObjectINS_17VideoReceiverBaseEEEPFvP22OpaqueFigVideoReceiver6CMTimejPK9__CFArrayPK14__CFDictionaryS9_PvEPFvS5_P28OpaqueFigDataChannelResourceSD_38FigVideoReceiverResourceLifeCycleEventESD__block_invoke_41(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v3;

  v3 = *(_QWORD *)(result + 32);
  if (v3)
  {
    if (**(_QWORD **)(result + 40) == a2)
      return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(result + 48))(a2, a3, v3);
  }
  return result;
}

void re::destroyVideoReceiver(const void **a1)
{
  const void *v1;
  void (*v3)(const void *, _QWORD);
  const void *v4;
  void (*v5)(const void *, _QWORD);

  v1 = *a1;
  if (*a1)
  {
    v3 = *(void (**)(const void *, _QWORD))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 176);
    if (v3)
      v3(v1, 0);
    v4 = *a1;
    v5 = *(void (**)(const void *, _QWORD))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 184);
    if (v5)
      v5(v4, 0);
    if (*a1)
      re::VideoObjectBase<re::VideoColorTransformBase,__CFArray const*>::release(a1);
    *a1 = 0;
  }
}

__n128 re::retrievePixelBuffersWithVideoReceiver(uint64_t *a1, uint64_t *a2, CMTime *a3, uint64_t a4)
{
  __n128 *v5;
  __int128 v8;
  uint64_t v9;
  re *VTable;
  uint64_t (*v11)(uint64_t, uint8_t *, _QWORD, uint64_t *, uint64_t);
  uint64_t v12;
  int v13;
  re::VideoDefaults *v14;
  uint64_t v15;
  re *v16;
  __n128 result;
  NSObject *v18;
  _BOOL8 v19;
  NSObject *v20;
  Float64 Seconds;
  re *v22;
  NSObject *v23;
  Float64 v24;
  re *v25;
  NSObject *v26;
  _BOOL8 v27;
  NSObject *v28;
  NSObject *v29;
  CMTime v30;
  CMTime time;
  __int128 v32;
  CMTimeEpoch epoch;
  uint64_t v34;
  uint8_t buf[16];
  CMTimeEpoch v36;
  uint64_t v37;

  v37 = *MEMORY[0x24BDAC8D0];
  v5 = (__n128 *)MEMORY[0x24BDC0D40];
  if (!*a2)
    goto LABEL_21;
  v8 = *MEMORY[0x24BDC0D40];
  *(_QWORD *)(a4 + 16) = *(_QWORD *)(MEMORY[0x24BDC0D40] + 16);
  *(_OWORD *)a4 = v8;
  v9 = *a2;
  v32 = *(_OWORD *)&a3->value;
  epoch = a3->epoch;
  v34 = 0;
  VTable = (re *)CMBaseObjectGetVTable();
  v11 = *(uint64_t (**)(uint64_t, uint8_t *, _QWORD, uint64_t *, uint64_t))(*((_QWORD *)VTable + 2) + 16);
  if (!v11)
  {
    v13 = -12782;
LABEL_19:
    v29 = *re::videoLogObjects(VTable);
    if (os_log_type_enabled(v29, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 67109120;
      *(_DWORD *)&buf[4] = v13;
      _os_log_error_impl(&dword_224FE9000, v29, OS_LOG_TYPE_ERROR, "Failed to sample image from video receiver (error: %d)", buf, 8u);
    }
    goto LABEL_21;
  }
  *(_OWORD *)buf = v32;
  v36 = epoch;
  VTable = (re *)v11(v9, buf, 0, &v34, a4);
  v13 = (int)VTable;
  if ((_DWORD)VTable == -15575)
  {
LABEL_21:
    *a1 = 0;
    *((_DWORD *)a1 + 2) = 0;
    a1[4] = 0;
    *((_DWORD *)a1 + 10) = -1;
    result = *v5;
    *(__n128 *)((char *)a1 + 44) = *v5;
    *(uint64_t *)((char *)a1 + 60) = v5[1].n128_i64[0];
    return result;
  }
  if ((_DWORD)VTable)
    goto LABEL_19;
  *a1 = 0;
  *((_DWORD *)a1 + 2) = 0;
  a1[4] = 0;
  *((_DWORD *)a1 + 10) = -1;
  *(__n128 *)((char *)a1 + 44) = *v5;
  *(uint64_t *)((char *)a1 + 60) = v5[1].n128_i64[0];
  v14 = (re::VideoDefaults *)re::DynamicInlineArray<__CVBuffer *,2ul>::ensureCapacity(a1, v12);
  if ((_DWORD)v14)
  {
    v15 = *a1;
    a1[*a1 + 2] = v34;
    *a1 = v15 + 1;
    ++*((_DWORD *)a1 + 2);
  }
  *(_OWORD *)((char *)a1 + 44) = *(_OWORD *)a4;
  *(uint64_t *)((char *)a1 + 60) = *(_QWORD *)(a4 + 16);
  v16 = (re *)re::VideoDefaults::logEnabled(v14);
  if ((_DWORD)v16)
  {
    v18 = *re::videoLogObjects(v16);
    v19 = os_log_type_enabled(v18, OS_LOG_TYPE_DEFAULT);
    if (v19)
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_224FE9000, v18, OS_LOG_TYPE_DEFAULT, "------------------------------------------", buf, 2u);
    }
    v20 = (id)*re::videoLogObjects((re *)v19);
    if (os_log_type_enabled(v20, OS_LOG_TYPE_DEFAULT))
    {
      time = *a3;
      Seconds = CMTimeGetSeconds(&time);
      *(_DWORD *)buf = 134217984;
      *(Float64 *)&buf[4] = Seconds;
      _os_log_impl(&dword_224FE9000, v20, OS_LOG_TYPE_DEFAULT, "Sample Host Time: %f", buf, 0xCu);
    }

    v23 = (id)*re::videoLogObjects(v22);
    if (os_log_type_enabled(v23, OS_LOG_TYPE_DEFAULT))
    {
      v30 = *(CMTime *)a4;
      v24 = CMTimeGetSeconds(&v30);
      *(_DWORD *)buf = 134217984;
      *(Float64 *)&buf[4] = v24;
      _os_log_impl(&dword_224FE9000, v23, OS_LOG_TYPE_DEFAULT, "Sample Presentation Time: %f", buf, 0xCu);
    }

    v26 = *re::videoLogObjects(v25);
    v27 = os_log_type_enabled(v26, OS_LOG_TYPE_DEFAULT);
    if (v27)
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_224FE9000, v26, OS_LOG_TYPE_DEFAULT, "Sample Format: Single-channel legacy", buf, 2u);
    }
    v28 = *re::videoLogObjects((re *)v27);
    if (os_log_type_enabled(v28, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_224FE9000, v28, OS_LOG_TYPE_DEFAULT, "------------------------------------------", buf, 2u);
    }
  }
  return result;
}

void sub_22532B8C0(_Unwind_Exception *a1)
{
  uint64_t v1;
  void *v2;

  *(_QWORD *)v1 = 0;
  ++*(_DWORD *)(v1 + 8);
  _Unwind_Resume(a1);
}

uint64_t populatePresentationGroup(__int128 *a1, NSObject *a2, uint64_t a3, unint64_t a4, unint64_t a5, _QWORD *a6, unsigned __int8 *a7, uint64_t a8, uint64_t a9, void *a10, BOOL a11)
{
  unint64_t PixelFormatType;
  size_t v12;
  re *v19;
  __int128 v20;
  Class v21;
  __IOSurface *IOSurface;
  IOSurfaceID ID;
  uint64_t v24;
  unint64_t v25;
  Class isa;
  objc_class *v27;
  NSObject *v28;
  __CVBuffer *v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  size_t Width;
  uint64_t v34;
  size_t v35;
  Class v36;
  size_t Height;
  size_t v38;
  unint64_t v39;
  uint64_t v40;
  unint64_t *v41;
  unint64_t v42;
  NSObject *v43;
  unint64_t v44;
  unint64_t v45;
  __CVBuffer **v46;
  __CVBuffer *v47;
  unint64_t IsHDR;
  uint64_t v49;
  CMTime *v50;
  CMTime *v51;
  _anonymous_namespace_ *v52;
  size_t v53;
  re::VideoHistogram *v54;
  uint64_t v55;
  double v56;
  unint64_t v57;
  uint64_t v58;
  id v59;
  uint64_t v60;
  void *v61;
  __int128 v62;
  NSObject *v63;
  unint64_t v64;
  uint64_t v65;
  unint64_t v66;
  unint64_t v67;
  unint64_t v68;
  __CVBuffer **v69;
  unint64_t v70;
  unint64_t v71;
  uint64_t v72;
  uint64_t v73;
  __CVBuffer *v74;
  size_t v75;
  uint64_t v76;
  char v77;
  uint64_t v78;
  unint64_t v79;
  unint64_t v80;
  uint64_t v81;
  double v82;
  double v83;
  double v84;
  double v85;
  unint64_t v86;
  double v87;
  double v88;
  double v89;
  double v90;
  unint64_t v91;
  uint64_t v92;
  unint64_t v93;
  float v94;
  unint64_t v95;
  unint64_t v96;
  unint64_t v97;
  unint64_t v98;
  __CVBuffer *v99;
  IOSurfaceRef v100;
  size_t v101;
  IOSurfaceRef v102;
  unint64_t *v103;
  unsigned __int8 v104;
  unint64_t v105;
  _BYTE *v106;
  unint64_t v107;
  __CVBuffer *v108;
  IOSurfaceRef v109;
  uint64_t v110;
  unint64_t v111;
  id *v112;
  re::VideoSurfaceBase *v113;
  re::VideoHistogram *v114;
  uint64_t v115;
  unint64_t v116;
  uint64_t v117;
  _DWORD *v118;
  unint64_t v119;
  __IOSurface *PixelFormat;
  char isFullRange;
  uint64_t v122;
  _BYTE *v123;
  id v124;
  __int128 v125;
  unint64_t *v126;
  unint64_t *v127;
  unint64_t v128;
  uint64_t v129;
  uint64_t v130;
  const char *v131;
  _QWORD *v132;
  uint64_t v133;
  unint64_t v134;
  unint64_t v135;
  uint64_t v136;
  uint64_t v137;
  __CVBuffer *v138;
  __CVBuffer *v139;
  unsigned int v140;
  unint64_t v141;
  uint64_t v142;
  id v143;
  unint64_t v144;
  re::VideoDefaults *v145;
  int v146;
  unint64_t v147;
  uint64_t v148;
  uint64_t v149;
  __CVBuffer *v150;
  __CVBuffer *v151;
  unint64_t v152;
  unint64_t v153;
  size_t *v154;
  uint64_t v155;
  size_t v156;
  size_t v157;
  unint64_t v158;
  unint64_t *v159;
  unint64_t v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  double v164;
  unint64_t v165;
  double v166;
  double v167;
  uint64_t v168;
  float64x2_t v169;
  float64_t v170;
  float64_t v171;
  float64x2_t v172;
  int8x16_t v173;
  unint64_t v174;
  float v175;
  size_t v176;
  re::VideoPSEProcessor *v177;
  uint64_t v178;
  uint64_t v179;
  re::VideoPSEProcessor **v180;
  _QWORD *v181;
  std::__shared_weak_count *v182;
  unint64_t *p_shared_owners;
  unint64_t v184;
  double Seconds;
  re *PSEConfigs;
  __CVBuffer **v187;
  re *v188;
  NSObject *v189;
  unint64_t v190;
  __CVBuffer **v191;
  unint64_t v192;
  re::VideoTextureCache *v193;
  re *TexturesFromPixelBuffer;
  int v195;
  NSObject *v196;
  uint64_t i;
  re *v198;
  int v199;
  NSObject *v200;
  uint64_t m;
  unint64_t v202;
  const __CFString *v203;
  __CVBuffer *v204;
  OSType v205;
  uint64_t v206;
  BOOL v207;
  unint64_t v208;
  unint64_t v209;
  uint64_t *v210;
  uint64_t v211;
  uint64_t v212;
  uint64_t v213;
  uint64_t v214;
  int v215;
  _BOOL4 v216;
  re::VideoDefaults *v217;
  re::VideoDefaults *v218;
  int v220;
  uint64_t v221;
  unint64_t v222;
  _QWORD *v223;
  __CVBuffer *v224;
  uint64_t v225;
  uint64_t v226;
  void *v227;
  int v228;
  _QWORD *v229;
  id *v230;
  id v231;
  unint64_t v232;
  re::VideoDefaults *v233;
  unint64_t v234;
  re *v235;
  uint64_t v236;
  uint64_t v237;
  NSObject *v238;
  _BYTE *v239;
  uint64_t v240;
  unint64_t v241;
  _QWORD *v242;
  uint64_t v243;
  char *v244;
  BOOL v245;
  id v247;
  int HasHardwareTransferFunction;
  uint64_t v249;
  unint64_t v250;
  size_t v251;
  uint64_t v252;
  size_t v253;
  unint64_t v254;
  uint64_t v255;
  size_t v256;
  uint64_t v257;
  uint64_t j;
  unint64_t v259;
  size_t *v260;
  unint64_t v261;
  uint64_t v262;
  unint64_t v263;
  _BYTE *v264;
  uint64_t *v265;
  _OWORD *v266;
  __int128 v267;
  _OWORD *v268;
  __int128 v269;
  uint64_t *v270;
  unint64_t *v271;
  uint64_t v272;
  unint64_t *v273;
  unint64_t v274;
  _OWORD *v275;
  uint64_t v276;
  uint64_t k;
  uint64_t v278;
  size_t v279;
  size_t v280;
  __int128 v281;
  std::__shared_weak_count *v282;
  unint64_t *v283;
  unint64_t v284;
  std::__shared_weak_count *v285;
  unint64_t *v286;
  unint64_t v287;
  uint64_t result;
  re *v289;
  id v290;
  re *v291;
  id *location;
  id *v293;
  uint64_t v294;
  unint64_t v295;
  int v296;
  re::VideoPixelBufferPool *v297;
  _BYTE *v299;
  uint64_t *v300;
  re::VideoSimplePixelBufferAllocator *v301;
  unint64_t *v302;
  _BYTE *v303;
  unint64_t v304;
  unint64_t v305;
  re::VideoPixelBufferBase *v306;
  unint64_t *v308;
  uint64_t v309;
  id v310;
  id v311;
  id v312;
  CMTime time;
  uint64_t v314;
  __int128 v315[2];
  _QWORD v316[4];
  CMTime v317;
  CMTime v318;
  __int128 v319[2];
  _QWORD v320[4];
  CMTime v321;
  CMTime v322;
  CMTime v323;
  CMTime v324;
  size_t v325;
  int v326;
  uint64_t v327;
  _BYTE v328[72];
  id v329;
  int v330;
  _QWORD v331[2];
  size_t v332;
  int v333;
  _OWORD v334[6];
  size_t v335;
  int v336;
  uint64_t v337;
  uint64_t v338;
  _BYTE v339[32];
  size_t v340;
  int v341;
  _OWORD v342[10];
  unint64_t v343;
  int v344;
  _OWORD v345[4];
  unint64_t v346;
  int v347;
  re::CoreVideoUtils *v348[2];
  uint8_t v349[16];
  unint64_t *v350;
  const void *v351;
  const void *v352;
  __int128 v353;
  _OWORD v354[2];
  uint8_t buf[24];
  _BYTE v356[18];
  __int16 v357;
  re::VideoPixelBufferBase *v358;
  __int16 v359;
  __CVBuffer *v360;
  _BYTE v361[32];
  _BYTE v362[56];
  _BYTE v363[56];
  unsigned __int8 v364[8];
  id v365[5];

  v365[2] = *(id *)MEMORY[0x24BDAC8D0];
  v19 = a10;
  v291 = v19;
  if (!a2->isa)
  {
    v43 = *re::videoLogObjects(v19);
    if (!os_log_type_enabled(v43, OS_LOG_TYPE_ERROR))
    {
LABEL_20:
      v44 = 1;
      goto LABEL_450;
    }
    *(_WORD *)buf = 0;
    v131 = "Could no populate presentation group. Legacy buffer group has no pixel buffers.";
LABEL_171:
    _os_log_error_impl(&dword_224FE9000, v43, OS_LOG_TYPE_ERROR, v131, buf, 2u);
    goto LABEL_20;
  }
  re::deinitVideoPresentationGroup(a8);
  v295 = a4;
  v20 = *a1;
  *(_QWORD *)(a8 + 16) = *((_QWORD *)a1 + 2);
  *(_OWORD *)a8 = v20;
  *(_DWORD *)(a8 + 660) = a2[5].isa;
  *(_OWORD *)(a8 + 592) = 0u;
  v299 = (_BYTE *)(a3 + 7016);
  *(_BYTE *)(a8 + 464) = *(_BYTE *)(a3 + 7016);
  if (!a2->isa)
  {
    v346 = 0;
    v347 = 0;
    goto LABEL_22;
  }
  v21 = 0;
  a4 = a8 + 592;
  do
  {
    IOSurface = CVPixelBufferGetIOSurface(a2[(_QWORD)v21 + 2].isa);
    if (!IOSurface)
    {
      v43 = *re::videoLogObjects(0);
      if (!os_log_type_enabled(v43, OS_LOG_TYPE_ERROR))
        goto LABEL_20;
      *(_WORD *)buf = 0;
      v131 = "Sampled pixel buffer does not contain a surface.";
      goto LABEL_171;
    }
    ID = IOSurfaceGetID(IOSurface);
    v25 = *(_QWORD *)(a8 + 24);
    if (v25 >= 2)
    {
      re::internal::assertLog((re::internal *)4, v24, "assertion failure: '%s' (%s:line %i) Capacity limit reached. DynamicInlineArray<T,N> cannot be resized.", "false", "ensureCapacity", 277);
      _os_crash();
      __break(1u);
      goto LABEL_516;
    }
    *(_DWORD *)(a8 + 36 + 4 * v25) = ID;
    *(_QWORD *)(a8 + 24) = v25 + 1;
    ++*(_DWORD *)(a8 + 32);
    v21 = (Class)((char *)v21 + 1);
    isa = a2->isa;
  }
  while (v21 < a2->isa);
  v346 = 0;
  v347 = 0;
  if (!isa)
  {
LABEL_22:
    v293 = (id *)(a5 + 184);
    v290 = *(id *)(a5 + 184);
    v39 = 0;
    v41 = (unint64_t *)(a8 + 672);
    v42 = *(_QWORD *)(a8 + 672);
    goto LABEL_23;
  }
  v27 = 0;
  PixelFormatType = (unint64_t)v348;
  do
  {
    v28 = &a2[(_QWORD)v27];
    v29 = v28[2].isa;
    *(_QWORD *)buf = v29;
    CVPixelBufferRetain(v29);
    re::DynamicInlineArray<REFrameAnalysisBottleneck,2ul>::ensureCapacity(v346, v30);
    v32 = v346;
    v348[v346] = v29;
    v346 = v32 + 1;
    ++v347;
    if (a2->isa <= v27)
    {
      re::internal::assertLog((re::internal *)6, v31, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < m_size", "operator[]", 389, v27, a2->isa);
      _os_crash();
      __break(1u);
LABEL_454:
      re::internal::assertLog((re::internal *)6, v34, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < m_size", "operator[]", 389, v27, v36);
      _os_crash();
      __break(1u);
LABEL_455:
      re::internal::assertLog((re::internal *)6, v49, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < m_size", "operator[]", 381, PixelFormatType, v66, v290, v291);
      _os_crash();
      __break(1u);
LABEL_456:
      re::internal::assertLog((re::internal *)6, v49, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < m_size", "operator[]", 381, PixelFormatType, v64);
      _os_crash();
      __break(1u);
LABEL_457:
      re::internal::assertLog((re::internal *)6, v49, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < m_size", "operator[]", 381, PixelFormatType, v67);
      _os_crash();
      __break(1u);
      goto LABEL_458;
    }
    Width = CVPixelBufferGetWidth(v28[2].isa);
    v35 = *(_QWORD *)a4;
    if (*(_QWORD *)a4 <= Width)
      v35 = Width;
    *(_QWORD *)a4 = v35;
    v36 = a2->isa;
    if (a2->isa <= v27)
      goto LABEL_454;
    Height = CVPixelBufferGetHeight(v28[2].isa);
    v38 = *(_QWORD *)(a8 + 600);
    if (v38 <= Height)
      v38 = Height;
    *(_QWORD *)(a8 + 600) = v38;
    v27 = (objc_class *)((char *)v27 + 1);
  }
  while (v27 < a2->isa);
  v39 = v346;
  v293 = (id *)(a5 + 184);
  v290 = *(id *)(a5 + 184);
  v41 = (unint64_t *)(a8 + 672);
  v42 = *(_QWORD *)(a8 + 672);
  if (v346 > v42)
  {
    if (v346 < 3)
    {
      bzero(&v41[v42 + 2], 8 * (v346 - v42));
      goto LABEL_28;
    }
LABEL_518:
    re::internal::assertLog((re::internal *)4, v40, "assertion failure: '%s' (%s:line %i) Capacity limit reached. DynamicInlineArray<T,N> cannot be resized.", "false", "resize", 571);
    _os_crash();
    __break(1u);
LABEL_519:
    re::internal::assertLog((re::internal *)4, v221, "assertion failure: '%s' (%s:line %i) Capacity limit reached. DynamicInlineArray<T,N> cannot be resized.", "false", "resize", 571);
    _os_crash();
    __break(1u);
LABEL_520:
    re::internal::assertLog((re::internal *)4, v49, "assertion failure: '%s' (%s:line %i) Capacity limit reached. DynamicInlineArray<T,N> cannot be resized.", "false", "resize", 571);
    _os_crash();
    __break(1u);
LABEL_521:
    re::internal::assertLog((re::internal *)4, v49, "assertion failure: '%s' (%s:line %i) Capacity limit reached. DynamicInlineArray<T,N> cannot be resized.", "false", "resize", 571);
    result = _os_crash();
    __break(1u);
    return result;
  }
LABEL_23:
  if (v42 > v39)
  {
    a4 = a8 + 688;
    PixelFormatType = 8 * v39;
    v45 = v39;
    do
    {
      if (*(_QWORD *)(a4 + 8 * v45))
      {
        re::VideoObjectBase<re::VideoColorTransformBase,__CFArray const*>::release((const void **)(a4 + PixelFormatType));
        v42 = *v41;
      }
      *(_QWORD *)(a4 + 8 * v45++) = 0;
      PixelFormatType += 8;
    }
    while (v45 < v42);
LABEL_28:
    *(_QWORD *)(a8 + 672) = v39;
    ++*(_DWORD *)(a8 + 680);
  }
  v308 = (unint64_t *)(a8 + 752);
  re::DynamicInlineArray<re::SharedPtr<re::VideoHistogram>,2ul>::clear(a8 + 752);
  v296 = 0;
  *(_BYTE *)(a8 + 658) = 0;
  if (v346 >= 2)
  {
    a4 = 0;
    v46 = v348;
    PixelFormatType = 855041;
    do
    {
      if ((re::VideoPixelBufferBase::colorTags(v46) & 0xFFFFFF) == 0xD0C01)
        *(_BYTE *)(a8 + 658) = 2;
      ++a4;
      ++v46;
    }
    while (a4 < v346);
    v296 = *(unsigned __int8 *)(a8 + 658);
  }
  v343 = 0;
  v344 = 0;
  v340 = 0;
  v341 = 0;
  v335 = 0;
  v336 = 0;
  v332 = 0;
  v333 = 0;
  v329 = 0;
  v330 = 0;
  v325 = 0;
  v326 = 0;
  *(_QWORD *)(a8 + 864) = 1;
  memset(&v324, 0, sizeof(v324));
  CMTimeMakeWithSeconds(&v324, *(Float64 *)(a9 + 8), 1000);
  memset(&v323, 0, sizeof(v323));
  CMTimeMakeWithSeconds(&v323, *(Float64 *)(a9 + 24), 1000);
  if (!v346)
  {
LABEL_504:
    re::internal::assertLog((re::internal *)6, (uint64_t)v47, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < m_size", "operator[]", 381, 0, 0);
    _os_crash();
    __break(1u);
LABEL_505:
    re::internal::assertLog((re::internal *)6, v49, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < m_size", "operator[]", 381, a5, v135);
    _os_crash();
    __break(1u);
    goto LABEL_506;
  }
  IsHDR = re::CoreVideoUtils::pixelBufferIsHDR(v348[0], v47);
  if ((IsHDR & 1) == 0)
  {
    v64 = v346;
    if (v346)
    {
      PixelFormatType = 0;
      v29 = (__CVBuffer *)(a3 + 2096);
      v65 = 688;
      v12 = (size_t)&v346;
      do
      {
        v66 = *v41;
        if (*v41 <= PixelFormatType)
          goto LABEL_455;
        a4 = a8 + v65;
        if (*(_QWORD *)(a8 + v65))
        {
          re::VideoObjectBase<re::VideoColorTransformBase,__CFArray const*>::release((const void **)(a8 + v65));
          v64 = v346;
        }
        *(_QWORD *)a4 = 0;
        if (v64 <= PixelFormatType)
          goto LABEL_456;
        v67 = *v41;
        if (*v41 <= PixelFormatType)
          goto LABEL_457;
        IsHDR = re::VideoColorManager::computeTransform((uint64_t)v29, (__CVBuffer **)((char *)&v321.epoch + v65), *a7, (const void **)(a8 + v65));
        ++PixelFormatType;
        v64 = v346;
        v65 += 8;
      }
      while (PixelFormatType < v346);
      if (*(_QWORD *)(a8 + 864) > 1uLL)
      {
        if (v346)
        {
          v68 = 0;
          a4 = 0;
          v69 = v348;
          do
          {
            v68 |= (unint64_t)re::VideoPixelBufferBase::protectionOptions(v69);
            ++a4;
            v70 = v346;
            ++v69;
          }
          while (a4 < v346);
          v304 = v68;
          goto LABEL_73;
        }
LABEL_72:
        v304 = 0;
        v70 = 0;
LABEL_73:
        location = (id *)a7;
        v12 = a8 + 48;
        re::DynamicInlineArray<re::VideoObject<re::VideoPixelBufferBase>,2ul>::resize(a8 + 48, v70);
        re::DynamicInlineArray<re::VideoTransformSurfaceConfig,2ul>::resize((uint64_t)&v335, v346);
        v71 = v346;
        if (v346)
        {
          v72 = 0;
          v302 = (unint64_t *)(a8 + 48);
          v73 = 8;
          while (1)
          {
            a2 = &v348[v72];
            v74 = v348[v72];
            if (v74)
            {
              v53 = CVPixelBufferGetWidth(v74);
              v71 = v346;
            }
            else
            {
              v53 = 0;
            }
            a5 = v73 - 8;
            if (v71 <= v73 - 8)
              break;
            v12 = *(_QWORD *)(a8 + 864);
            if (a2->isa)
            {
              v75 = CVPixelBufferGetHeight(a2->isa);
              a4 = *(_QWORD *)(a8 + 864);
              v71 = v346;
            }
            else
            {
              v75 = 0;
              a4 = *(_QWORD *)(a8 + 864);
            }
            if (v71 <= a5)
              goto LABEL_474;
            if (a2->isa)
            {
              PixelFormatType = CVPixelBufferGetPixelFormatType(a2->isa);
              v71 = v346;
            }
            else
            {
              PixelFormatType = 0;
            }
            if (v71 <= a5)
              goto LABEL_475;
            v53 *= v12;
            v76 = a4 * v75;
            a4 = re::VideoPixelBufferBase::colorTags(&a2->isa);
            v77 = re::VideoDefaults::compressionAllowed((re::VideoDefaults *)a4);
            *(_QWORD *)buf = 0;
            if (re::VideoSimplePixelBufferAllocator::configurePoolIfNeeded((re::VideoSimplePixelBufferAllocator *)(a3 + 88), v53, v76, PixelFormatType, (re::CoreVideoUtils *)BYTE1(a4), BYTE2(a4), a4, 0, 0x1000000400, v77, v304))
            {
              re::VideoPixelBufferPool::createPixelBuffer((re::VideoPixelBufferPool *)(a3 + 128), buf);
            }
            v12 = a8 + 48;
            v79 = *v302;
            if (*v302 <= a5)
              goto LABEL_476;
            *(_QWORD *)(a8 + 8 * v73) = *(_QWORD *)buf;
            v80 = v346;
            if (v346 <= a5)
              goto LABEL_477;
            v82 = re::VideoPixelBufferBase::cleanRect(&a2->isa);
            v86 = v346;
            if (v346 <= a5)
              goto LABEL_478;
            v87 = v82;
            v88 = v83;
            v89 = v84;
            v90 = v85;
            if (a2->isa)
            {
              CVImageBufferGetDisplaySize(a2->isa);
              v86 = v346;
            }
            if (v86 <= a5)
              goto LABEL_479;
            if (a2->isa)
              CVImageBufferGetDisplaySize(a2->isa);
            v91 = *v302;
            if (*v302 <= a5)
              goto LABEL_480;
            v53 = a8 + v72 * 8 + 64;
            re::VideoPixelBufferBase::setCleanRect((CVPixelBufferRef *)v53, v87 * (double)*(unint64_t *)(a8 + 864), v88 * (double)*(unint64_t *)(a8 + 864), v89 * (double)*(unint64_t *)(a8 + 864), v90 * (double)*(unint64_t *)(a8 + 864));
            v93 = *(_QWORD *)(a8 + 48);
            if (v93 <= a5)
              goto LABEL_481;
            if (*(_QWORD *)(a8 + 8 * v73))
            {
              CVImageBufferSetDisplayDimensions();
              v93 = *(_QWORD *)(a8 + 48);
            }
            if (v93 <= a5)
              goto LABEL_483;
            v94 = re::VideoPixelBufferBase::horizontalDisparityAdjustment((__CVBuffer **)(a8 + v72 * 8 + 64));
            if (v94 > 0.0)
            {
              v95 = *v302;
              if (*v302 <= a5)
                goto LABEL_498;
              re::VideoPixelBufferBase::setHorizontalDisparityAdjustment((CVBufferRef *)(a8 + v72 * 8 + 64), v94);
            }
            v71 = v346;
            v96 = v73 - 7;
            ++v73;
            ++v72;
            if (v96 >= v346)
              goto LABEL_106;
          }
LABEL_473:
          re::internal::assertLog((re::internal *)6, v49, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < m_size", "operator[]", 381, a5, v71);
          _os_crash();
          __break(1u);
LABEL_474:
          re::internal::assertLog((re::internal *)6, v49, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < m_size", "operator[]", 381, a5, v71);
          _os_crash();
          __break(1u);
LABEL_475:
          re::internal::assertLog((re::internal *)6, v49, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < m_size", "operator[]", 381, a5, v71);
          _os_crash();
          __break(1u);
LABEL_476:
          re::internal::assertLog((re::internal *)6, v78, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < m_size", "operator[]", 381, a5, v79);
          _os_crash();
          __break(1u);
LABEL_477:
          re::internal::assertLog((re::internal *)6, v78, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < m_size", "operator[]", 381, a5, v80);
          _os_crash();
          __break(1u);
LABEL_478:
          re::internal::assertLog((re::internal *)6, v81, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < m_size", "operator[]", 381, a5, v86);
          _os_crash();
          __break(1u);
LABEL_479:
          re::internal::assertLog((re::internal *)6, v81, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < m_size", "operator[]", 381, a5, v86);
          _os_crash();
          __break(1u);
LABEL_480:
          re::internal::assertLog((re::internal *)6, v81, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < m_size", "operator[]", 381, a5, v91);
          _os_crash();
          __break(1u);
LABEL_481:
          re::internal::assertLog((re::internal *)6, v92, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < m_size", "operator[]", 381, a5, v93);
          _os_crash();
          __break(1u);
          goto LABEL_482;
        }
LABEL_106:
        v97 = v335;
        a7 = (unsigned __int8 *)location;
        if (v335)
        {
          a4 = 0;
          v53 = a8 + 64;
          PixelFormatType = (unint64_t)v339;
          while (1)
          {
            v98 = v346;
            if (v346 <= a4)
              break;
            v99 = v348[a4];
            if (v99)
            {
              v100 = CVPixelBufferGetIOSurface(v99);
              CFRetain(v100);
              v97 = v335;
            }
            else
            {
              v100 = 0;
            }
            *(_QWORD *)buf = v100;
            if (v97 <= a4)
              goto LABEL_484;
            *(_QWORD *)(PixelFormatType - 16) = v100;
            v101 = *(_QWORD *)v12;
            if (*(_QWORD *)v12 <= a4)
              goto LABEL_485;
            IsHDR = *(_QWORD *)(v53 + 8 * a4);
            if (IsHDR)
            {
              v102 = CVPixelBufferGetIOSurface((CVPixelBufferRef)IsHDR);
              IsHDR = (unint64_t)CFRetain(v102);
              v97 = v335;
            }
            else
            {
              v102 = 0;
            }
            *(_QWORD *)buf = v102;
            if (v97 <= a4)
              goto LABEL_486;
            *(_QWORD *)(PixelFormatType - 8) = v102;
            *(_BYTE *)PixelFormatType = 0;
            PixelFormatType += 24;
            if (++a4 >= v97)
              goto LABEL_135;
          }
LABEL_482:
          re::internal::assertLog((re::internal *)6, v49, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < m_size", "operator[]", 381, a4, v98);
          _os_crash();
          __break(1u);
LABEL_483:
          re::internal::assertLog((re::internal *)6, v92, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < m_size", "operator[]", 381, a5, v93);
          _os_crash();
          __break(1u);
LABEL_484:
          re::internal::assertLog((re::internal *)6, v49, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < m_size", "operator[]", 381, a4, v97);
          _os_crash();
          __break(1u);
LABEL_485:
          re::internal::assertLog((re::internal *)6, v49, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < m_size", "operator[]", 381, a4, v101);
          _os_crash();
          __break(1u);
LABEL_486:
          re::internal::assertLog((re::internal *)6, v49, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < m_size", "operator[]", 381, a4, v97);
          _os_crash();
          __break(1u);
LABEL_487:
          re::internal::assertLog((re::internal *)6, v49, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < m_size", "operator[]", 381, a5, v160);
          _os_crash();
          __break(1u);
LABEL_488:
          re::internal::assertLog((re::internal *)6, v249, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < m_size", "operator[]", 381, a2, v250);
          _os_crash();
          __break(1u);
LABEL_489:
          re::internal::assertLog((re::internal *)6, v115, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < m_size", "operator[]", 381, PixelFormatType, v116);
          _os_crash();
          __break(1u);
LABEL_490:
          re::internal::assertLog((re::internal *)6, v115, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < m_size", "operator[]", 381, PixelFormatType, v116);
          _os_crash();
          __break(1u);
LABEL_491:
          re::internal::assertLog((re::internal *)6, v115, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < m_size", "operator[]", 381, PixelFormatType, v119);
          _os_crash();
          __break(1u);
LABEL_492:
          re::internal::assertLog((re::internal *)6, v115, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < m_size", "operator[]", 381, PixelFormatType, v116);
          _os_crash();
          __break(1u);
LABEL_493:
          re::internal::assertLog((re::internal *)6, v122, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < m_size", "operator[]", 381, PixelFormatType, v124);
          _os_crash();
          __break(1u);
LABEL_494:
          re::internal::assertLog((re::internal *)6, v49, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < m_size", "operator[]", 381, v53, v107);
          _os_crash();
          __break(1u);
LABEL_495:
          re::internal::assertLog((re::internal *)6, v49, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < m_size", "operator[]", 381, v53, v105);
          _os_crash();
          __break(1u);
LABEL_496:
          re::internal::assertLog((re::internal *)6, v110, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < m_size", "operator[]", 381, v53, v111);
          _os_crash();
          __break(1u);
LABEL_497:
          re::internal::assertLog((re::internal *)6, v49, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < m_size", "operator[]", 381, v53, v105);
          _os_crash();
          __break(1u);
LABEL_498:
          re::internal::assertLog((re::internal *)6, v49, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < m_size", "operator[]", 381, a5, v95);
          _os_crash();
          __break(1u);
LABEL_499:
          re::internal::assertLog((re::internal *)6, v49, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < m_size", "operator[]", 381, a5, v134);
          _os_crash();
          __break(1u);
LABEL_500:
          re::internal::assertLog((re::internal *)6, v49, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < m_size", "operator[]", 381, a5, PixelFormatType);
          _os_crash();
          __break(1u);
LABEL_501:
          re::internal::assertLog((re::internal *)6, v49, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < m_size", "operator[]", 381, a5, PixelFormatType);
          _os_crash();
          __break(1u);
LABEL_502:
          re::internal::assertLog((re::internal *)6, v49, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < m_size", "operator[]", 381, a5, v141);
          _os_crash();
          __break(1u);
LABEL_503:
          re::internal::assertLog((re::internal *)6, v49, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < m_size", "operator[]", 381, a5, v144);
          _os_crash();
          __break(1u);
          goto LABEL_504;
        }
LABEL_135:
        if ((*v299 & 1) == 0)
          goto LABEL_149;
        v49 = v335;
        if (!v335)
          goto LABEL_149;
        re::DynamicInlineArray<re::SharedPtr<re::VideoHistogram>,2ul>::resize((uint64_t)v308, v335);
        re::DynamicInlineArray<re::VideoHistogramConfig,2ul>::resize((uint64_t)&v329, v335);
        if (!v335)
          goto LABEL_149;
        PixelFormatType = 0;
        v12 = a8 + 768;
        v112 = (id *)v331;
        v113 = (re::VideoSurfaceBase *)&v338;
        while (1)
        {
          v53 = re::VideoSurfaceBase::colorTags(v113);
          re::VideoHistogram::VideoHistogram(v114);
          v116 = *v308;
          if (*v308 <= PixelFormatType)
            goto LABEL_489;
          v117 = *(_QWORD *)(v12 + 8 * PixelFormatType);
          *(_QWORD *)(v12 + 8 * PixelFormatType) = v114;
          if (v117)
          {

            v116 = *v308;
          }
          if (v116 <= PixelFormatType)
            goto LABEL_490;
          v118 = *(_DWORD **)(v12 + 8 * PixelFormatType);
          v118[6] = BYTE1(v53);
          v118[7] = BYTE2(v53);
          v118[8] = v53;
          v119 = v335;
          if (v335 <= PixelFormatType)
            goto LABEL_491;
          PixelFormat = *(__IOSurface **)v113;
          if (*(_QWORD *)v113)
          {
            PixelFormat = (__IOSurface *)IOSurfaceGetPixelFormat(PixelFormat);
            v116 = *v308;
          }
          if (v116 <= PixelFormatType)
            goto LABEL_492;
          isFullRange = re::CoreVideoUtils::isFullRange(PixelFormat);
          v123 = *(_BYTE **)(v12 + 8 * PixelFormatType);
          v123[36] = isFullRange;
          v123[37] = 0;
          v124 = v329;
          if ((unint64_t)v329 <= PixelFormatType)
            goto LABEL_493;
          IsHDR = (unint64_t)objc_storeWeak(v112, v123 + 8);
          ++PixelFormatType;
          ++v112;
          v113 = (re::VideoSurfaceBase *)((char *)v113 + 24);
          if (PixelFormatType >= v335)
            goto LABEL_149;
        }
      }
    }
    else if (*(_QWORD *)(a8 + 864) > 1uLL)
    {
      goto LABEL_72;
    }
    v103 = (unint64_t *)(a8 + 48);
    if ((unint64_t *)(a8 + 48) != &v346)
    {
      re::DynamicInlineArray<re::VideoObject<re::VideoPixelBufferBase>,2ul>::copy((_QWORD *)(a8 + 48), &v346);
      ++*(_DWORD *)(a8 + 56);
    }
    if ((*v299 & 1) != 0)
    {
      re::DynamicInlineArray<re::VideoTransformSurfaceConfig,2ul>::resize((uint64_t)&v335, *v103);
      v104 = *a7;
      if (!a7[64])
        v104 = 0;
      v105 = v335;
      if (v335)
      {
        v53 = 0;
        PixelFormatType = a8 + 64;
        v106 = v339;
        a5 = v104;
        v12 = 1;
        while (1)
        {
          v107 = *v103;
          if (*v103 <= v53)
            goto LABEL_494;
          v108 = *(__CVBuffer **)(PixelFormatType + 8 * v53);
          if (v108)
          {
            a2 = CVPixelBufferGetIOSurface(v108);
            CFRetain(a2);
            v105 = v335;
          }
          else
          {
            a2 = 0;
          }
          *(_QWORD *)buf = a2;
          if (v105 <= v53)
            goto LABEL_495;
          *((_QWORD *)v106 - 2) = a2;
          v109 = re::VideoHistogramManager::selectDummySurface(a3 + 4672, (IOSurfaceRef)a2, a5);
          v111 = v335;
          if (v335 <= v53)
            goto LABEL_496;
          re::VideoObject<re::VideoColorTransformBase>::setRef((_DWORD)v106 - 8, (const void **)v106 - 1, v109);
          v105 = v335;
          if (v335 <= v53)
            goto LABEL_497;
          *v106 = 1;
          v106 += 24;
          if (++v53 >= v105)
            goto LABEL_135;
        }
      }
    }
    goto LABEL_135;
  }
  *(_BYTE *)(a8 + 656) = 1;
  re::DynamicInlineArray<re::VideoObject<re::VideoPixelBufferBase>,2ul>::clear(a8 + 48);
  *(_QWORD *)(a8 + 480) = 0;
  ++*(_DWORD *)(a8 + 488);
  if ((*v299 & 1) != 0)
  {
    re::DynamicInlineArray<re::SharedPtr<re::VideoHistogram>,2ul>::resize((uint64_t)v308, (unint64_t)a2->isa);
    re::DynamicInlineArray<re::VideoHistogramConfig,2ul>::resize((uint64_t)&v329, *v308);
    if (a2->isa)
    {
      PixelFormatType = 0;
      v12 = a8 + 768;
      a4 = (unint64_t)v331;
      while (1)
      {
        v56 = re::VideoHistogram::VideoHistogram(v54);
        v57 = *v308;
        if (*v308 <= PixelFormatType)
          break;
        v58 = *(_QWORD *)(v12 + 8 * PixelFormatType);
        *(_QWORD *)(v12 + 8 * PixelFormatType) = v54;
        if (v58)
        {

          v57 = *v308;
        }
        if (v57 <= PixelFormatType)
          goto LABEL_471;
        v59 = v329;
        if ((unint64_t)v329 <= PixelFormatType)
          goto LABEL_472;
        v60 = *(_QWORD *)(v12 + 8 * PixelFormatType);
        if (v60)
          v61 = (void *)(v60 + 8);
        else
          v61 = 0;
        v52 = (_anonymous_namespace_ *)objc_storeWeak((id *)a4, v61);
        ++PixelFormatType;
        a4 += 8;
        if ((Class)PixelFormatType >= a2->isa)
          goto LABEL_49;
      }
      re::internal::assertLog((re::internal *)6, v55, v56, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < m_size", "operator[]", 381, PixelFormatType, v57, v290, v291);
      _os_crash();
      __break(1u);
LABEL_471:
      re::internal::assertLog((re::internal *)6, v55, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < m_size", "operator[]", 381, PixelFormatType, v57);
      _os_crash();
      __break(1u);
LABEL_472:
      re::internal::assertLog((re::internal *)6, v55, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < m_size", "operator[]", 381, PixelFormatType, v59);
      _os_crash();
      __break(1u);
      goto LABEL_473;
    }
  }
LABEL_49:
  if (*(_BYTE *)a9)
  {
    v322 = v323;
    v321 = v324;
    if (re::CMTimeCompareWithThreshold(&v322, &v321, v51, *(double *)&v324.value))
    {
      v62 = *(_OWORD *)(a9 + 16);
      v319[0] = *(_OWORD *)a9;
      v319[1] = v62;
      re::DynamicString::DynamicString((re::DynamicString *)v320, (const re::DynamicString *)(a9 + 32));
      re::dumpHDRFrameToFile(&v346, (_QWORD *)(a8 + 480), a7, v319, 0, v291, *(double *)(a9 + 24));
      if (v320[0])
      {
        if ((v320[1] & 1) != 0)
          (*(void (**)(void))(*(_QWORD *)v320[0] + 40))();
        memset(v320, 0, sizeof(v320));
      }
    }
  }
  IsHDR = re::videoPlaybackCreateHDRConfigs((uint64_t)&v346, *(unsigned int *)(a8 + 660), a5, a6, (unint64_t)a7, (re *)(a3 + 80), a3 + 88, (unint64_t *)(a8 + 480), *(_QWORD *)(a8 + 864), (unint64_t *)(a8 + 48), &v340);
  v44 = IsHDR;
  if ((_DWORD)IsHDR)
  {
    v63 = *re::videoLogObjects((re *)IsHDR);
    if (os_log_type_enabled(v63, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      _os_log_error_impl(&dword_224FE9000, v63, OS_LOG_TYPE_ERROR, "Unable to process HDR content.", buf, 2u);
    }
    goto LABEL_449;
  }
LABEL_149:
  if (*(_BYTE *)a9)
  {
    v318 = v323;
    v317 = v324;
    IsHDR = re::CMTimeCompareWithThreshold(&v318, &v317, v50, *(double *)&v324.value);
    if ((_DWORD)IsHDR)
    {
      v125 = *(_OWORD *)(a9 + 16);
      v315[0] = *(_OWORD *)a9;
      v315[1] = v125;
      re::DynamicString::DynamicString((re::DynamicString *)v316, (const re::DynamicString *)(a9 + 32));
      re::dumpHDRFrameToFile((_QWORD *)(a8 + 48), (_QWORD *)(a8 + 480), a7, v315, 1, v291, *(double *)(a9 + 24));
      IsHDR = v316[0];
      if (v316[0])
      {
        if ((v316[1] & 1) != 0)
          IsHDR = (*(uint64_t (**)(void))(*(_QWORD *)v316[0] + 40))();
        memset(v316, 0, sizeof(v316));
      }
      *(double *)(a9 + 8) = *(double *)(a9 + 16) + *(double *)(a9 + 8);
    }
  }
  if ((v296 - 3) <= 0xFFFFFFFD)
  {
    IsHDR = re::VideoDefaults::aseAllowed((re::VideoDefaults *)IsHDR);
    if ((_DWORD)IsHDR)
    {
      if (*(_QWORD *)(a8 + 864) >= 2uLL)
      {
        v126 = (unint64_t *)(a3 + 48);
        PixelFormatType = *(_QWORD *)(a3 + 48);
        v127 = (unint64_t *)(a8 + 48);
        v128 = *(_QWORD *)(a8 + 48);
        if (v128 != PixelFormatType)
        {
          if (v128 <= PixelFormatType)
          {
            if (v128 < PixelFormatType)
            {
              v129 = a3 + 64;
              v12 = *(_QWORD *)(a8 + 48);
              do
              {
                v130 = *(_QWORD *)(v129 + 8 * v12);
                if (v130)
                {

                  *(_QWORD *)(v129 + 8 * v12) = 0;
                  PixelFormatType = *v126;
                }
                ++v12;
              }
              while (v12 < PixelFormatType);
              PixelFormatType = *v127;
              goto LABEL_169;
            }
            PixelFormatType = *(_QWORD *)(a8 + 48);
          }
          else
          {
            if (v128 >= 3)
              goto LABEL_521;
            bzero(&v126[PixelFormatType + 2], 8 * (v128 - PixelFormatType));
            PixelFormatType = v128;
LABEL_169:
            *(_QWORD *)(a3 + 48) = v128;
            ++*(_DWORD *)(a3 + 56);
          }
        }
        if (PixelFormatType <= v343)
        {
          if (PixelFormatType < v343)
            goto LABEL_177;
        }
        else
        {
          if (PixelFormatType >= 3)
            goto LABEL_520;
          bzero(&v345[2 * v343], 32 * (PixelFormatType - v343));
LABEL_177:
          v343 = PixelFormatType;
          ++v344;
        }
        if (PixelFormatType)
        {
          v132 = v345;
          v133 = 8;
          while (1)
          {
            a5 = v133 - 8;
            v134 = *v126;
            if (*v126 <= v133 - 8)
              goto LABEL_499;
            if (!*(_QWORD *)(a3 + 8 * v133))
            {
              re::VideoASEFrameMeasurement::create((re::VideoASEFrameMeasurement *)IsHDR, (uint64_t *)buf);
              v135 = *v126;
              if (*v126 <= a5)
                goto LABEL_505;
              v136 = *(_QWORD *)(a3 + 8 * v133);
              *(_QWORD *)(a3 + 8 * v133) = *(_QWORD *)buf;
              if (v136)

              PixelFormatType = *v127;
            }
            if (PixelFormatType <= a5)
              goto LABEL_500;
            v137 = *(_QWORD *)(a8 + 592);
            a2 = *(NSObject **)(a8 + 600);
            v138 = *(__CVBuffer **)(a8 + 8 * v133);
            if (v138)
            {
              v12 = CVPixelBufferGetWidth(v138);
              PixelFormatType = *v127;
            }
            else
            {
              v12 = 0;
            }
            if (PixelFormatType <= a5)
              goto LABEL_501;
            v139 = *(__CVBuffer **)(a8 + 8 * v133);
            if (v139)
              v140 = CVPixelBufferGetHeight(v139);
            else
              v140 = 0;
            v141 = *v126;
            if (*v126 <= a5)
              goto LABEL_502;
            v142 = *(_QWORD *)(a3 + 8 * v133);
            v314 = v142;
            if (v142)
              v143 = (id)(v142 + 8);
            v144 = v343;
            if (v343 <= a5)
              goto LABEL_503;
            v145 = (re::VideoDefaults *)re::VideoASEProcessor::createConfig(a3, v137, a2, v12, v140, &v314, v132);
            v146 = (int)v145;
            if (v314)
            {

              v314 = 0;
            }
            if (v146)
              break;
            IsHDR = re::VideoDefaults::logEnabled(v145);
            if ((_DWORD)IsHDR)
            {
              a2 = (id)*re::videoLogObjects((re *)IsHDR);
              if (os_log_type_enabled(a2, OS_LOG_TYPE_DEFAULT))
              {
                v148 = *(_QWORD *)(a8 + 48);
                v12 = *(_QWORD *)(a8 + 592);
                v149 = *(_QWORD *)(a8 + 600);
                v150 = *(__CVBuffer **)re::DynamicInlineArray<re::VideoObject<re::VideoPixelBufferBase>,2ul>::operator[]((unint64_t *)(a8 + 48), v133 - 8);
                if (v150)
                  v306 = (re::VideoPixelBufferBase *)CVPixelBufferGetWidth(v150);
                else
                  v306 = 0;
                v151 = *(__CVBuffer **)re::DynamicInlineArray<re::VideoObject<re::VideoPixelBufferBase>,2ul>::operator[]((unint64_t *)(a8 + 48), v133 - 8);
                if (v151)
                  v151 = (__CVBuffer *)CVPixelBufferGetHeight(v151);
                *(_DWORD *)buf = 134219264;
                *(_QWORD *)&buf[4] = v133 - 7;
                *(_WORD *)&buf[12] = 2048;
                *(_QWORD *)&buf[14] = v148;
                *(_WORD *)&buf[22] = 2048;
                *(_QWORD *)v356 = v12;
                *(_WORD *)&v356[8] = 2048;
                *(_QWORD *)&v356[10] = v149;
                v357 = 2048;
                v358 = v306;
                v359 = 2048;
                v360 = v151;
                _os_log_impl(&dword_224FE9000, a2, OS_LOG_TYPE_DEFAULT, "Upscaling %zu of %zu from %zux%zu to %zux%zu", buf, 0x3Eu);
              }

            }
            PixelFormatType = *v127;
            v147 = v133 - 7;
            ++v133;
            v132 += 4;
            if (v147 >= *v127)
              goto LABEL_212;
          }
          v153 = *re::videoLogObjects(v145);
          if (!os_log_type_enabled((os_log_t)v153, OS_LOG_TYPE_ERROR))
            goto LABEL_448;
LABEL_469:
          *(_WORD *)buf = 0;
          _os_log_error_impl(&dword_224FE9000, (os_log_t)v153, OS_LOG_TYPE_ERROR, "Unable to create ASE configuration.", buf, 2u);
          goto LABEL_448;
        }
      }
    }
  }
LABEL_212:
  v12 = a8 + 48;
  v53 = *(_QWORD *)(a8 + 48);
  *(_OWORD *)(a8 + 576) = 0u;
  v152 = 0;
  if (v53)
  {
    v153 = 0;
    v154 = (size_t *)(a8 + 576);
    v155 = a8 + 64;
    do
    {
      IsHDR = *(_QWORD *)(v155 + 8 * v153);
      if (IsHDR)
      {
        v156 = CVPixelBufferGetWidth((CVPixelBufferRef)IsHDR);
        v157 = *v154;
        if (*v154 <= v156)
          v157 = v156;
        *v154 = v157;
        v53 = *(_QWORD *)v12;
        if (*(_QWORD *)v12 <= v153)
          goto LABEL_464;
        IsHDR = *(_QWORD *)(v155 + 8 * v153);
        if (IsHDR)
        {
          IsHDR = CVPixelBufferGetHeight((CVPixelBufferRef)IsHDR);
          v53 = *(_QWORD *)v12;
        }
        v152 = *(_QWORD *)(a8 + 584);
        if (v152 <= IsHDR)
          v152 = IsHDR;
        *(_QWORD *)(a8 + 584) = v152;
      }
      ++v153;
    }
    while (v153 < v53);
    v158 = *v154;
  }
  else
  {
    v158 = 0;
  }
  *(_OWORD *)(a8 + 608) = 0u;
  *(_OWORD *)(a8 + 624) = 0u;
  *(double *)(a8 + 640) = (double)v158;
  *(double *)(a8 + 648) = (double)v152;
  v159 = (unint64_t *)(a8 + 832);
  v160 = *(_QWORD *)(a8 + 832);
  if (v53 <= v160)
  {
    if (v53 < v160)
      goto LABEL_230;
  }
  else
  {
    if (v53 >= 3)
    {
      re::internal::assertLog((re::internal *)4, v49, "assertion failure: '%s' (%s:line %i) Capacity limit reached. DynamicInlineArray<T,N> cannot be resized.", "false", "resize", 571);
      _os_crash();
      __break(1u);
      goto LABEL_518;
    }
    bzero((char *)v159 + 4 * v160 + 12, 4 * (v53 - v160));
LABEL_230:
    *(_QWORD *)(a8 + 832) = v53;
    ++*(_DWORD *)(a8 + 840);
    v160 = v53;
  }
  if (v53)
  {
    PixelFormatType = a8 + 608;
    v161 = 211;
    v162 = 64;
    do
    {
      a5 = v161 - 211;
      v153 = a8 + v162;
      IsHDR = *(_QWORD *)(a8 + v162);
      if (IsHDR)
      {
        v164 = CVImageBufferGetDisplaySize((CVImageBufferRef)IsHDR).width;
        if (*(double *)PixelFormatType >= v164)
          v164 = *(double *)PixelFormatType;
        *(double *)PixelFormatType = v164;
        v165 = *(_QWORD *)v12;
        if (*(_QWORD *)v12 <= a5)
          goto LABEL_465;
        if (*(_QWORD *)v153)
        {
          v166 = CVImageBufferGetDisplaySize((CVImageBufferRef)*(_QWORD *)v153).height;
          v165 = *(_QWORD *)v12;
        }
        else
        {
          v166 = 0.0;
        }
        v167 = *(double *)(a8 + 616);
        if (v167 < v166)
          v167 = v166;
        *(double *)(a8 + 616) = v167;
        if (v165 <= a5)
          goto LABEL_466;
        v169.f64[0] = re::VideoPixelBufferBase::cleanRect((__CVBuffer **)(a8 + v162));
        v169.f64[1] = v170;
        v172.f64[1] = v171;
        v173 = vbslq_s8((int8x16_t)vcgtq_f64(*(float64x2_t *)(a8 + 640), v172), (int8x16_t)v172, *(int8x16_t *)(a8 + 640));
        *(int8x16_t *)(a8 + 624) = vbslq_s8((int8x16_t)vcgtq_f64(v169, *(float64x2_t *)(a8 + 624)), (int8x16_t)v169, *(int8x16_t *)(a8 + 624));
        *(int8x16_t *)(a8 + 640) = v173;
        v174 = *(_QWORD *)(a8 + 48);
        if (v174 <= a5)
          goto LABEL_467;
        v175 = re::VideoPixelBufferBase::horizontalDisparityAdjustment((__CVBuffer **)(a8 + v162));
        v160 = *v159;
        if (*v159 <= a5)
          goto LABEL_468;
        *(float *)(a8 + 4 * v161) = v175;
        v53 = *(_QWORD *)(a8 + 48);
      }
      else
      {
        if (v160 <= a5)
          goto LABEL_487;
        *(_DWORD *)(a8 + 4 * v161) = 0;
      }
      v176 = v161 - 210;
      ++v161;
      v162 += 8;
    }
    while (v176 < v53);
  }
  *(_BYTE *)(a8 + 856) = 0;
  v177 = (re::VideoPSEProcessor *)re::VideoDefaults::pseAllowed((re::VideoDefaults *)IsHDR);
  if ((v177 & 1) == 0)
    goto LABEL_266;
  v179 = re::VideoPSEProcessor::NeedsProcessing(v177);
  if (!re::VideoDefaults::overridePseEnabled(v179))
    goto LABEL_266;
  v180 = (re::VideoPSEProcessor **)(a3 + 4872);
  if (!*(_QWORD *)(a3 + 4872))
  {
    v181 = operator new(0x20uLL);
    v181[1] = 0;
    v181[2] = 0;
    *v181 = &off_24ED37708;
    v181[3] = 0;
    *(_QWORD *)(a3 + 4872) = v181 + 3;
    v182 = *(std::__shared_weak_count **)(a3 + 4880);
    *(_QWORD *)(a3 + 4880) = v181;
    if (v182)
    {
      p_shared_owners = (unint64_t *)&v182->__shared_owners_;
      do
        v184 = __ldaxr(p_shared_owners);
      while (__stlxr(v184 - 1, p_shared_owners));
      if (!v184)
      {
        ((void (*)(std::__shared_weak_count *))v182->__on_zero_shared)(v182);
        std::__shared_weak_count::__release_weak(v182);
      }
    }
    re::VideoPSEProcessor::init(*v180);
  }
  *(_QWORD *)buf = 0;
  *(_DWORD *)&buf[8] = 0;
  time = *(CMTime *)a8;
  Seconds = CMTimeGetSeconds(&time);
  PSEConfigs = (re *)re::videoPlaybackCreatePSEConfigs((re *)(a8 + 48), (uint64_t)a6, (uint64_t)v180, (re::VideoSimplePixelBufferAllocator *)(a3 + 4800), (uint64_t)buf, (uint64_t)&v332, Seconds);
  if ((_DWORD)PSEConfigs)
  {
    if ((_DWORD)PSEConfigs == 2)
      goto LABEL_511;
    v29 = (__CVBuffer *)(id)*re::videoLogObjects(PSEConfigs);
    if (os_log_type_enabled((os_log_t)v29, OS_LOG_TYPE_ERROR))
      goto LABEL_459;
    goto LABEL_264;
  }
  if ((uint8_t *)v12 != buf)
  {
    re::DynamicInlineArray<re::VideoObject<re::VideoPixelBufferBase>,2ul>::copy((_QWORD *)(a8 + 48), buf);
    ++*(_DWORD *)(a8 + 56);
  }
  *(_BYTE *)(a8 + 856) = 1;
  while (2)
  {
    while (2)
    {
      re::DynamicInlineArray<re::VideoObject<re::VideoPixelBufferBase>,2ul>::clear((uint64_t)buf);
LABEL_266:
      if (!*(_QWORD *)v12)
      {
LABEL_506:
        re::internal::assertLog((re::internal *)6, v178, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < m_size", "operator[]", 381, 0, 0);
        _os_crash();
        __break(1u);
LABEL_507:
        re::internal::assertLog((re::internal *)6, v221, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < m_size", "operator[]", 381, a2, v240);
        _os_crash();
        __break(1u);
LABEL_508:
        re::internal::assertLog((re::internal *)6, v221, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < m_size", "operator[]", 381, a2, v241);
        _os_crash();
        __break(1u);
LABEL_509:
        re::internal::assertLog((re::internal *)6, v221, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < m_size", "operator[]", 381, a2, v256);
        _os_crash();
        __break(1u);
LABEL_510:
        re::internal::assertLog((re::internal *)6, v221, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < m_size", "operator[]", 381, a2, v257);
        PSEConfigs = (re *)_os_crash();
        __break(1u);
LABEL_511:
        v289 = (re *)re::VideoDefaults::logEnabled(PSEConfigs);
        if (!(_DWORD)v289)
          continue;
        v29 = (__CVBuffer *)(id)*re::videoLogObjects(v289);
        if (os_log_type_enabled((os_log_t)v29, OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)v349 = 0;
          _os_log_impl(&dword_224FE9000, (os_log_t)v29, OS_LOG_TYPE_DEFAULT, "Unable to PSE process content because surface is not supported.", v349, 2u);
        }
        goto LABEL_264;
      }
      break;
    }
    v187 = (__CVBuffer **)(a8 + 64);
    v188 = re::CoreVideoUtils::pixelBufferColorGamut(*(__CVBuffer **)(a8 + 64), (char *)(a8 + 568));
    if ((v188 & 1) == 0)
    {
      v189 = (id)*re::videoLogObjects(v188);
      if (os_log_type_enabled(v189, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl(&dword_224FE9000, v189, OS_LOG_TYPE_DEFAULT, "Could not determine color gamut of presentation group pixel buffer. Fallback to Rec709", buf, 2u);
      }

    }
    *(_QWORD *)(a8 + 560) = 0;
    if (!*(_QWORD *)(a8 + 48))
      goto LABEL_301;
    v190 = 0;
    v191 = (__CVBuffer **)(a8 + 64);
    do
    {
      *(_QWORD *)(a8 + 560) |= (unint64_t)re::VideoPixelBufferBase::protectionOptions(v191);
      ++v190;
      v192 = *(_QWORD *)(a8 + 48);
      ++v191;
    }
    while (v190 < v192);
    if (!v192)
      goto LABEL_301;
    a2 = 0;
    v193 = (re::VideoTextureCache *)(a3 + 216);
    do
    {
      memset(buf, 0, sizeof(buf));
      TexturesFromPixelBuffer = (re *)re::VideoTextureCache::createTexturesFromPixelBuffer(v193, v187[(_QWORD)a2], (re::VideoPixelBufferTextures *)buf, 0);
      v195 = (int)TexturesFromPixelBuffer;
      if ((_DWORD)TexturesFromPixelBuffer)
      {
        v196 = (id)*re::videoLogObjects(TexturesFromPixelBuffer);
        if (os_log_type_enabled(v196, OS_LOG_TYPE_ERROR))
        {
          *(_WORD *)v349 = 0;
          _os_log_error_impl(&dword_224FE9000, v196, OS_LOG_TYPE_ERROR, "Unable to create texture for presentation group pixel buffer.", v349, 2u);
        }

      }
      else
      {
        re::DynamicInlineArray<re::VideoPixelBufferTextures,2ul>::add(a8 + 80, (uint64_t)buf);
      }
      for (i = 16; i != -8; i -= 8)
      {
        if (*(_QWORD *)&buf[i])
          re::VideoObjectBase<re::VideoTextureBase,__CVBuffer *>::release((__CVBuffer **)&buf[i]);
        *(_QWORD *)&buf[i] = 0;
      }
      if (v195)
        goto LABEL_448;
      a2 = ((char *)a2 + 1);
    }
    while ((unint64_t)a2 < *(_QWORD *)v12);
    if (!*(_QWORD *)v12 || (*v299 & 2) == 0)
    {
LABEL_301:
      *(_QWORD *)(a8 + 664) = 0;
      *(_BYTE *)(a8 + 657) = 0;
      re::DynamicInlineArray<re::VideoObject<re::VideoPixelFormatDescriptionBase>,2ul>::clear(a8 + 528);
      if (*(_QWORD *)v12)
      {
        v202 = 0;
        v203 = (const __CFString *)*MEMORY[0x24BDC5750];
        while (1)
        {
          v204 = v187[v202];
          v205 = v204 ? CVPixelBufferGetPixelFormatType(v204) : 0;
          *(_QWORD *)buf = 0;
          re::VideoPixelFormatDescriptionManager::descriptionForPixelFormat(a3 + 2048, v205, (const void **)buf);
          v207 = *(_BYTE *)(a8 + 657)
              || re::VideoPixelFormatDescriptionBase::BOOLeanValue((const __CFDictionary **)buf, v203, 0);
          *(_BYTE *)(a8 + 657) = v207;
          v208 = *(_QWORD *)(a8 + 528);
          if (v208 >= 2)
            break;
          *(_QWORD *)(a8 + 544 + 8 * v208) = *(_QWORD *)buf;
          *(_QWORD *)(a8 + 528) = v208 + 1;
          ++*(_DWORD *)(a8 + 536);
          ++v202;
          v209 = *(_QWORD *)(a8 + 48);
          if (v202 >= v209)
            goto LABEL_313;
        }
LABEL_516:
        re::internal::assertLog((re::internal *)4, v206, "assertion failure: '%s' (%s:line %i) Capacity limit reached. DynamicInlineArray<T,N> cannot be resized.", "false", "ensureCapacity", 277);
        _os_crash();
        __break(1u);
      }
      v209 = 0;
LABEL_313:
      v210 = (uint64_t *)(a8 + 704);
      re::DynamicInlineArray<re::VideoColorTags,2ul>::resize(a8 + 704, v209);
      if (*(_QWORD *)v12)
      {
        v29 = 0;
        v211 = a8 + 716;
        while (1)
        {
          v212 = re::VideoPixelBufferBase::colorTags(v187);
          v214 = *v210;
          if (*v210 <= (unint64_t)v29)
            break;
          *(_WORD *)v211 = v212;
          *(_BYTE *)(v211 + 2) = BYTE2(v212);
          v29 = (__CVBuffer *)((char *)v29 + 1);
          v211 += 3;
          ++v187;
          if ((unint64_t)v29 >= *(_QWORD *)v12)
            goto LABEL_317;
        }
LABEL_458:
        re::internal::assertLog((re::internal *)6, v213, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < m_size", "operator[]", 381, v29, v214);
        _os_crash();
        __break(1u);
LABEL_459:
        *(_WORD *)v349 = 0;
        _os_log_error_impl(&dword_224FE9000, (os_log_t)v29, OS_LOG_TYPE_ERROR, "Unable to PSE process content.", v349, 2u);
LABEL_264:

        continue;
      }
LABEL_317:
      v301 = (re::VideoSimplePixelBufferAllocator *)(a8 + 208);
      re::DynamicInlineArray<re::VideoMetalTextures,2ul>::clear(a8 + 208);
      *(_QWORD *)(a8 + 728) = 0;
      ++*(_DWORD *)(a8 + 736);
      v215 = *(_BYTE *)(a8 + 658) & 0xFD;
      v216 = v215 == 0;
      v218 = (re::VideoDefaults *)re::VideoDefaults::stereoMipmapEnabled(v217);
      v300 = (uint64_t *)(a8 + 704);
      if ((v218 & 1) == 0)
        v216 = *(_QWORD *)(a8 + 80) < 2uLL && v215 == 0;
      v220 = *(unsigned __int8 *)(a8 + 856);
      if (re::VideoDefaults::mipmapEnabled(v218) && !v220 && v216)
      {
        if (*(_QWORD *)(a8 + 80))
        {
          v222 = 0;
          v223 = (_QWORD *)(a8 + 112);
          while (1)
          {
            v224 = (__CVBuffer *)*(v223 - 2);
            if (v224)
              v225 = 2;
            else
              v225 = 1;
            if (*(v223 - 1))
              v226 = v225;
            else
              v226 = v224 != 0;
            if (*v223)
              ++v226;
            if (v226 != 1)
              break;
            *(_QWORD *)v349 = 0;
            re::VideoObject<re::VideoTextureBase>::setRef((int)v349, (__CVBuffer **)v349, v224);
            re::VideoTextureBase::metalTexture((__CVBuffer **)v349, buf);
            if (*(_QWORD *)v349)
              re::VideoObjectBase<re::VideoTextureBase,__CVBuffer *>::release((__CVBuffer **)v349);
            v227 = *(void **)buf;
            if (!*(_QWORD *)buf)
              break;
            v228 = objc_msgSend(*(id *)buf, sel_pixelFormat);

            ++v222;
            v223 += 3;
            if (v222 >= *(_QWORD *)(a8 + 80))
            {
              if (!re::CoreVideoUtils::isConvertibleToLinearRGBColorModel(v228))
                break;
              goto LABEL_343;
            }
          }
        }
        else
        {
LABEL_343:
          v229 = (_QWORD *)a3;
          v230 = (id *)(a3 + 208);
          if (!*(_QWORD *)(a3 + 208))
          {
            v231 = *v293;
            v312 = v231;
            if (!*v230)
            {
              re::ObjCObject::operator=(v230, &v312);
              v231 = v312;
            }

            v229 = (_QWORD *)a3;
          }
          v232 = v229[876];
          v233 = (re::VideoDefaults *)re::VideoDefaults::mipmapPixelsPerSecondMax(497664000);
          v234 = vcvtpd_u64_f64((double)(unint64_t)v233 * 0.1);
          v235 = (re *)re::VideoDefaults::logEnabled(v233);
          if ((_DWORD)v235)
          {
            v236 = v229[868];
            v237 = v229[867];
            v238 = (id)*re::videoLogObjects(v235);
            if (os_log_type_enabled(v238, OS_LOG_TYPE_DEFAULT))
            {
              *(_DWORD *)buf = 134218752;
              *(_QWORD *)&buf[4] = v232;
              *(_WORD *)&buf[12] = 2048;
              *(_QWORD *)&buf[14] = v233;
              *(_WORD *)&buf[22] = 2048;
              *(_QWORD *)v356 = v234;
              *(_WORD *)&v356[8] = 2048;
              *(_QWORD *)&v356[10] = v236 - v237;
              _os_log_impl(&dword_224FE9000, v238, OS_LOG_TYPE_DEFAULT, "[mipgen] pixelsPerSecond: %lld / %lld (+ %lld) (%zu samples)", buf, 0x2Au);
            }

          }
          if (v232 <= (unint64_t)v233 + v234)
          {
            re::DynamicInlineArray<re::VideoMipGenConfig,2ul>::resize((uint64_t)&v325, *(_QWORD *)(a8 + 80));
            re::DynamicInlineArray<re::VideoMetalTextures,2ul>::resize((uint64_t)v301, *(_QWORD *)(a8 + 80));
            a3 = a8 + 728;
            re::DynamicInlineArray<re::VideoColorTags,2ul>::resize(a8 + 728, *(_QWORD *)(a8 + 80));
            if (*(_QWORD *)(a8 + 80))
            {
              a2 = 0;
              v305 = (unint64_t)(v230 - 6);
              v297 = (re::VideoPixelBufferPool *)(a8 + 740);
              v12 = a8 + 224;
              v239 = v328;
              v299 = (_BYTE *)(a8 + 96);
              v309 = a8 + 96;
              while (1)
              {
                v240 = *v300;
                if (*v300 <= (unint64_t)a2)
                  goto LABEL_507;
                v241 = *(_QWORD *)a3;
                if (*(_QWORD *)a3 <= (unint64_t)a2)
                  goto LABEL_508;
                v242 = &v299[24 * (_QWORD)a2];
                v243 = a8 + 716 + 3 * (_QWORD)a2;
                v244 = (char *)v297 + 3 * (_QWORD)a2;
                *(_WORD *)v244 = *(_WORD *)v243;
                v244[2] = *(_BYTE *)(v243 + 2);
                v303 = v244 + 2;
                v245 = !v242[1] && *v242 == 0;
                if (!v245 || v242[2] != 0)
                  break;
LABEL_385:
                v256 = v325;
                if (v325 <= (unint64_t)a2)
                  goto LABEL_509;
                v257 = *(_QWORD *)v301;
                if (*(_QWORD *)v301 <= (unint64_t)a2)
                  goto LABEL_510;
                for (j = 0; j != 24; j += 8)
                  NS::SharedPtr<MTL::Texture>::operator=((void **)(v12 + j), (void **)&v239[j]);
                a2 = ((char *)a2 + 1);
                v309 += 24;
                v239 += 48;
                v12 += 24;
                if ((unint64_t)a2 >= *(_QWORD *)(a8 + 80))
                  goto LABEL_390;
              }
              v153 = 0;
              PixelFormatType = (unint64_t)v239;
              while (1)
              {
                *(_QWORD *)buf = 0;
                re::VideoObject<re::VideoTextureBase>::setRef((int)buf, (__CVBuffer **)buf, *(CVPixelBufferRef *)(v309 + 8 * v153));
                re::VideoTextureBase::metalTexture((__CVBuffer **)buf, v349);
                v53 = (size_t)objc_msgSend(*(id *)v349, sel_width);
                v247 = objc_msgSend(*(id *)v349, sel_height);
                a5 = re::CoreVideoUtils::convertToLinearRGBColorModel((re *)objc_msgSend(*(id *)v349, sel_pixelFormat));
                v311 = 0;
                re::VideoTextureAllocator::createTextureInternal(v305, v53, (uint64_t)v247, a5, 2, 3u, 1, 1, (unint64_t *)&v310, (uint64_t)objc_msgSend(*(id *)v349, sel_protectionOptions));
                NS::SharedPtr<MTL::Texture>::operator=(&v311, &v310);
                if (v310)

                HasHardwareTransferFunction = re::CoreVideoUtils::metalPixelFormatHasHardwareTransferFunction((int)objc_msgSend(*(id *)v349, sel_pixelFormat));
                v250 = *(_QWORD *)a3;
                if (HasHardwareTransferFunction)
                {
                  if (v250 <= (unint64_t)a2)
                    goto LABEL_488;
                  *v303 = 8;
                }
                if (v250 <= (unint64_t)a2)
                  break;
                *((_BYTE *)v297 + 3 * (_QWORD)a2) = 0;
                v251 = v325;
                if (v325 <= (unint64_t)a2)
                  goto LABEL_461;
                NS::SharedPtr<MTL::Texture>::operator=((void **)(PixelFormatType - 24), (void **)v349);
                v253 = v325;
                if (v325 <= (unint64_t)a2)
                  goto LABEL_462;
                NS::SharedPtr<MTL::Texture>::operator=((void **)PixelFormatType, &v311);
                if (v311)

                if (*(_QWORD *)v349)
                if (*(_QWORD *)buf)
                  re::VideoObjectBase<re::VideoTextureBase,__CVBuffer *>::release((__CVBuffer **)buf);
                ++v153;
                v254 = *v242 != 0;
                v255 = 1;
                if (*v242)
                  v255 = 2;
                if (v242[1])
                  v254 = v255;
                if (v242[2])
                  ++v254;
                PixelFormatType += 8;
                if (v153 >= v254)
                  goto LABEL_385;
              }
              re::internal::assertLog((re::internal *)6, v249, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < m_size", "operator[]", 381, a2, v250);
              _os_crash();
              __break(1u);
LABEL_461:
              re::internal::assertLog((re::internal *)6, v249, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < m_size", "operator[]", 381, a2, v251);
              _os_crash();
              __break(1u);
LABEL_462:
              re::internal::assertLog((re::internal *)6, v252, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < m_size", "operator[]", 381, a2, v253);
              _os_crash();
              __break(1u);
LABEL_463:
              re::internal::assertLog((re::internal *)6, v278, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < m_size", "operator[]", 381, v12, v279);
              _os_crash();
              __break(1u);
LABEL_464:
              re::internal::assertLog((re::internal *)6, v49, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < m_size", "operator[]", 381, v153, v53);
              _os_crash();
              __break(1u);
LABEL_465:
              re::internal::assertLog((re::internal *)6, v163, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < m_size", "operator[]", 381, a5, v165);
              _os_crash();
              __break(1u);
LABEL_466:
              re::internal::assertLog((re::internal *)6, v163, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < m_size", "operator[]", 381, a5, v165);
              _os_crash();
              __break(1u);
LABEL_467:
              re::internal::assertLog((re::internal *)6, v168, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < m_size", "operator[]", 381, a5, v174);
              _os_crash();
              __break(1u);
LABEL_468:
              re::internal::assertLog((re::internal *)6, v49, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < m_size", "operator[]", 381, a5, v160);
              _os_crash();
              __break(1u);
              goto LABEL_469;
            }
          }
        }
      }
LABEL_390:
      v259 = v335;
      if (v335 <= v340)
        v259 = v340;
      if (v259 <= v332)
        v259 = v332;
      if (v259 <= v325)
        v259 = v325;
      if (v259 <= v343)
        v44 = v343;
      else
        v44 = v259;
      if (!v44)
        goto LABEL_449;
      v260 = (size_t *)(a8 + 784);
      v261 = *(_QWORD *)(a8 + 784);
      if (v44 <= v261)
      {
        if (v44 >= v261)
        {
          if (!v261)
          {
LABEL_444:
            v44 = 0;
            goto LABEL_449;
          }
          goto LABEL_407;
        }
        v262 = a8 + 16 * v44 + 800;
        v263 = v44;
        do
        {
          ++v263;
          v262 = std::shared_ptr<re::AssetManager>::~shared_ptr[abi:nn180100](v262) + 16;
        }
        while (v263 < *v260);
      }
      else
      {
        if (v44 >= 3)
          goto LABEL_519;
        bzero(&v260[2 * v261 + 2], 16 * (v44 - v261));
      }
      *(_QWORD *)(a8 + 784) = v44;
      ++*(_DWORD *)(a8 + 792);
LABEL_407:
      v12 = 0;
      a5 = (unint64_t)v334;
      v153 = (unint64_t)&v327;
      v294 = a8 + 800;
      v264 = v328;
      v53 = 80;
      while (1)
      {
        buf[0] = 0;
        BYTE4(v358) = 0;
        v361[0] = 0;
        v362[0] = 0;
        v363[0] = 0;
        v364[0] = 0;
        if (v335 > v12)
        {
          v265 = &v337 + 3 * v12;
          v349[0] = 1;
          *(_QWORD *)&v349[8] = 0;
          re::VideoObject<re::VideoColorTransformBase>::setRef((int)&v349[8], (const void **)&v349[8], (CFTypeRef)*v265);
          v350 = 0;
          re::VideoObject<re::VideoColorTransformBase>::setRef((int)&v350, (const void **)&v350, (CFTypeRef)v265[1]);
          LOBYTE(v351) = *((_BYTE *)v265 + 16);
          re::Optional<re::VideoTransformSurfaceConfig>::operator=((uint64_t)v361, v349);
          re::Optional<re::VideoTransformSurfaceConfig>::~Optional((uint64_t)v349);
          v53 = 80;
        }
        if (v343 > v12)
        {
          if (!buf[0])
            buf[0] = 1;
          v266 = &v345[2 * v12];
          v267 = v266[1];
          *(_OWORD *)&buf[8] = *v266;
          *(_OWORD *)v356 = v267;
        }
        if (v340 > v12)
        {
          v268 = &v342[5 * v12];
          v349[0] = 1;
          v350 = 0;
          re::VideoObject<re::VideoColorTransformBase>::setRef((int)&v350, (const void **)&v350, *(CFTypeRef *)v268);
          v351 = 0;
          re::VideoObject<re::VideoColorTransformBase>::setRef((int)&v351, &v351, *((CFTypeRef *)v268 + 1));
          v352 = 0;
          re::VideoObject<re::VideoColorTransformBase>::setRef((int)&v352, &v352, *((CFTypeRef *)v268 + 2));
          v269 = *(_OWORD *)((char *)v268 + 40);
          v353 = *(_OWORD *)((char *)v268 + 24);
          v354[0] = v269;
          *(_OWORD *)((char *)v354 + 9) = *(_OWORD *)((char *)v268 + 49);
          re::Optional<re::VideoHDRConfig>::operator=((uint64_t)&v358 + 4, v349);
          re::Optional<re::VideoHDRConfig>::~Optional((uint64_t)v349);
          a5 = (unint64_t)v334;
        }
        if ((unint64_t)v329 > v12)
        {
          v349[0] = 1;
          *(_QWORD *)&v349[8] = 0;
          objc_copyWeak((id *)&v349[8], (id *)&v331[v12]);
          re::Optional<re::VideoHistogramConfig>::operator=(v364, (id *)v349);
          if (v349[0])
            objc_destroyWeak((id *)&v349[8]);
        }
        if (v332 > v12)
        {
          v270 = (uint64_t *)&v334[3 * v12];
          v349[0] = 1;
          v272 = *v270;
          v271 = (unint64_t *)v270[1];
          *(_QWORD *)&v349[8] = v272;
          v350 = v271;
          if (v271)
          {
            v273 = v271 + 2;
            do
              v274 = __ldxr(v273);
            while (__stxr(v274 + 1, v273));
          }
          v275 = &v334[3 * v12];
          v351 = (const void *)*((_QWORD *)v275 + 2);
          v352 = 0;
          re::VideoObject<re::VideoColorTransformBase>::setRef((int)&v352, &v352, *((CFTypeRef *)v275 + 3));
          *(_QWORD *)&v353 = 0;
          re::VideoObject<re::VideoColorTransformBase>::setRef((int)&v353, (const void **)&v353, *(CFTypeRef *)&v334[3 * v12 + 2]);
          *((_QWORD *)&v353 + 1) = *((_QWORD *)&v334[3 * v12 + 2] + 1);
          re::Optional<re::VideoPSEConfig>::operator=((uint64_t)v363, v349);
          re::Optional<re::VideoPSEConfig>::~Optional((uint64_t)v349);
        }
        if (v325 > v12)
        {
          v276 = 0;
          v349[0] = 1;
          do
          {
            *(_QWORD *)&v349[v276 + 8] = *(id *)(v153 + v276);
            v276 += 8;
          }
          while (v276 != 24);
          for (k = 0; k != 24; k += 8)
            *(const void **)((char *)&v352 + k) = *(id *)&v264[k];
          re::Optional<re::VideoMipGenConfig>::operator=(v362, v349);
          re::Optional<re::VideoMipGenConfig>::~Optional(v349);
          a5 = (unint64_t)v334;
          v53 = 80;
        }
        re::VideoProcessor::dispatch((unint64_t **)(v295 + 152), (const re::VideoProcessorConfig *)buf, a11, v349);
        v279 = *v260;
        if (*v260 <= v12)
          goto LABEL_463;
        v280 = v294 + 16 * v12;
        v281 = *(_OWORD *)v349;
        memset(v349, 0, sizeof(v349));
        v282 = *(std::__shared_weak_count **)(v280 + 8);
        *(_OWORD *)v280 = v281;
        if (v282)
        {
          v283 = (unint64_t *)&v282->__shared_owners_;
          do
            v284 = __ldaxr(v283);
          while (__stlxr(v284 - 1, v283));
          if (!v284)
          {
            ((void (*)(std::__shared_weak_count *))v282->__on_zero_shared)(v282);
            std::__shared_weak_count::__release_weak(v282);
          }
        }
        v285 = *(std::__shared_weak_count **)&v349[8];
        if (*(_QWORD *)&v349[8])
        {
          v286 = (unint64_t *)(*(_QWORD *)&v349[8] + 8);
          do
            v287 = __ldaxr(v286);
          while (__stlxr(v287 - 1, v286));
          if (!v287)
          {
            ((void (*)(std::__shared_weak_count *))v285->__on_zero_shared)(v285);
            std::__shared_weak_count::__release_weak(v285);
          }
        }
        if (v364[0])
        {
          objc_destroyWeak(v365);
          v365[0] = 0;
        }
        re::Optional<re::VideoPSEConfig>::~Optional((uint64_t)v363);
        re::Optional<re::VideoMipGenConfig>::~Optional(v362);
        re::Optional<re::VideoTransformSurfaceConfig>::~Optional((uint64_t)v361);
        re::Optional<re::VideoHDRConfig>::~Optional((uint64_t)&v358 + 4);
        ++v12;
        v153 += 48;
        v264 += 48;
        if (v12 >= *v260)
          goto LABEL_444;
      }
    }
    break;
  }
  a2 = 0;
  while (1)
  {
    memset(buf, 0, sizeof(buf));
    v198 = (re *)re::VideoTextureCache::createTexturesFromPixelBuffer(v193, v187[(_QWORD)a2], (re::VideoPixelBufferTextures *)buf, 1);
    v199 = (int)v198;
    if ((_DWORD)v198)
    {
      v200 = (id)*re::videoLogObjects(v198);
      if (os_log_type_enabled(v200, OS_LOG_TYPE_ERROR))
      {
        *(_WORD *)v349 = 0;
        _os_log_error_impl(&dword_224FE9000, v200, OS_LOG_TYPE_ERROR, "Unable to create legacy texture for presentation group pixel buffer.", v349, 2u);
      }

    }
    else
    {
      re::DynamicInlineArray<re::VideoPixelBufferTextures,2ul>::add(a8 + 144, (uint64_t)buf);
    }
    for (m = 16; m != -8; m -= 8)
    {
      if (*(_QWORD *)&buf[m])
        re::VideoObjectBase<re::VideoTextureBase,__CVBuffer *>::release((__CVBuffer **)&buf[m]);
      *(_QWORD *)&buf[m] = 0;
    }
    if (v199)
      break;
    a2 = ((char *)a2 + 1);
    if ((unint64_t)a2 >= *(_QWORD *)v12)
      goto LABEL_301;
  }
LABEL_448:
  v44 = 1;
LABEL_449:
  re::DynamicInlineArray<re::VideoMipGenConfig,2ul>::clear((uint64_t)&v325);
  re::DynamicInlineArray<re::VideoHistogramConfig,2ul>::clear(&v329);
  re::DynamicInlineArray<re::VideoPSEConfig,2ul>::clear((uint64_t)&v332);
  re::DynamicInlineArray<re::VideoTransformSurfaceConfig,2ul>::clear((uint64_t)&v335);
  re::DynamicInlineArray<re::VideoHDRConfig,2ul>::clear((uint64_t)&v340);

  re::DynamicInlineArray<re::VideoObject<re::VideoPixelBufferBase>,2ul>::clear((uint64_t)&v346);
LABEL_450:

  return v44;
}

void sub_22532EA68(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, void *a16)
{
  void *v16;

  re::DynamicInlineArray<re::VideoMipGenConfig,2ul>::clear((uint64_t)&STACK[0x250]);
  re::DynamicInlineArray<re::VideoHistogramConfig,2ul>::clear((id *)&STACK[0x2C0]);
  re::DynamicInlineArray<re::VideoPSEConfig,2ul>::clear((uint64_t)&STACK[0x2E0]);
  re::DynamicInlineArray<re::VideoTransformSurfaceConfig,2ul>::clear((uint64_t)&STACK[0x350]);
  re::DynamicInlineArray<re::VideoHDRConfig,2ul>::clear((uint64_t)&STACK[0x390]);

  re::DynamicInlineArray<re::VideoObject<re::VideoPixelBufferBase>,2ul>::clear((uint64_t)&STACK[0x490]);
  _Unwind_Resume(a1);
}

void re::deinitVideoPresentationGroup(uint64_t a1)
{
  uint64_t v2;
  __int128 v3;
  __int128 v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v2 = *(_QWORD *)(MEMORY[0x24BDC0D40] + 16);
  *(_OWORD *)a1 = *MEMORY[0x24BDC0D40];
  *(_QWORD *)(a1 + 16) = v2;
  *(_QWORD *)(a1 + 24) = 0;
  ++*(_DWORD *)(a1 + 32);
  re::DynamicInlineArray<re::VideoObject<re::VideoPixelBufferBase>,2ul>::clear(a1 + 48);
  re::DynamicInlineArray<re::VideoPixelBufferTextures,2ul>::clear(a1 + 80);
  re::DynamicInlineArray<re::VideoPixelBufferTextures,2ul>::clear(a1 + 144);
  re::DynamicInlineArray<re::VideoMetalTextures,2ul>::clear(a1 + 208);
  re::DynamicInlineArray<re::VideoObject<re::VideoPixelBufferBase>,2ul>::clear(a1 + 272);
  re::DynamicInlineArray<re::VideoObject<re::VideoPixelBufferBase>,2ul>::clear(a1 + 304);
  re::DynamicInlineArray<re::VideoPixelBufferTextures,2ul>::clear(a1 + 336);
  re::DynamicInlineArray<NS::SharedPtr<MTL::Texture>,2ul>::clear(a1 + 400);
  re::DynamicInlineArray<NS::SharedPtr<MTL::Texture>,2ul>::clear(a1 + 432);
  *(_QWORD *)(a1 + 480) = 0;
  ++*(_DWORD *)(a1 + 488);
  re::DynamicInlineArray<re::VideoObject<re::VideoPixelFormatDescriptionBase>,2ul>::clear(a1 + 528);
  *(_OWORD *)(a1 + 576) = 0u;
  *(_OWORD *)(a1 + 592) = 0u;
  v3 = *MEMORY[0x24BDBF090];
  v4 = *(_OWORD *)(MEMORY[0x24BDBF090] + 16);
  *(_OWORD *)(a1 + 608) = 0u;
  *(_OWORD *)(a1 + 624) = v3;
  *(_QWORD *)(a1 + 560) = 0;
  *(_BYTE *)(a1 + 568) = 0;
  *(_OWORD *)(a1 + 640) = v4;
  *(_WORD *)(a1 + 656) = 0;
  *(_DWORD *)(a1 + 660) = -1;
  *(_BYTE *)(a1 + 658) = 0;
  re::DynamicInlineArray<re::VideoObject<re::VideoPixelFormatDescriptionBase>,2ul>::clear(a1 + 672);
  *(_QWORD *)(a1 + 704) = 0;
  ++*(_DWORD *)(a1 + 712);
  *(_QWORD *)(a1 + 728) = 0;
  ++*(_DWORD *)(a1 + 736);
  re::DynamicInlineArray<re::SharedPtr<re::VideoHistogram>,2ul>::clear(a1 + 752);
  *(_BYTE *)(a1 + 464) = 0;
  v5 = *(_QWORD *)(a1 + 784);
  if (v5)
  {
    v6 = a1 + 800;
    v7 = 16 * v5;
    do
    {
      v6 = std::shared_ptr<re::AssetManager>::~shared_ptr[abi:nn180100](v6) + 16;
      v7 -= 16;
    }
    while (v7);
  }
  *(_QWORD *)(a1 + 784) = 0;
  ++*(_DWORD *)(a1 + 792);
  *(_QWORD *)(a1 + 832) = 0;
  ++*(_DWORD *)(a1 + 840);
  *(_BYTE *)(a1 + 856) = 0;
  *(_QWORD *)(a1 + 864) = 1;
}

void re::DynamicInlineArray<re::SharedPtr<re::VideoHistogram>,2ul>::clear(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  v2 = a1 + 16;
  if (*(_QWORD *)a1)
  {
    v3 = 8 * *(_QWORD *)a1;
    do
    {
      if (*(_QWORD *)v2)
      {

        *(_QWORD *)v2 = 0;
      }
      v2 += 8;
      v3 -= 8;
    }
    while (v3);
  }
  *(_QWORD *)a1 = 0;
  ++*(_DWORD *)(a1 + 8);
}

uint64_t re::DynamicInlineArray<re::VideoObject<re::VideoPixelBufferBase>,2ul>::operator[](unint64_t *a1, unint64_t a2)
{
  uint64_t result;

  if (*a1 > a2)
    return (uint64_t)&a1[a2 + 2];
  re::internal::assertLog((re::internal *)6, a2, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < m_size", "operator[]", 381, a2, *a1);
  result = _os_crash();
  __break(1u);
  return result;
}

{
  uint64_t result;

  if (*a1 > a2)
    return (uint64_t)&a1[a2 + 2];
  re::internal::assertLog((re::internal *)6, a2, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < m_size", "operator[]", 389, a2, *a1);
  result = _os_crash();
  __break(1u);
  return result;
}

void re::DynamicInlineArray<re::VideoObject<re::VideoPixelBufferBase>,2ul>::clear(uint64_t a1)
{
  __CVBuffer **v2;
  uint64_t v3;

  v2 = (__CVBuffer **)(a1 + 16);
  if (*(_QWORD *)a1)
  {
    v3 = 8 * *(_QWORD *)a1;
    do
    {
      if (*v2)
        re::VideoObjectBase<re::VideoTextureBase,__CVBuffer *>::release(v2);
      *v2++ = 0;
      v3 -= 8;
    }
    while (v3);
  }
  *(_QWORD *)a1 = 0;
  ++*(_DWORD *)(a1 + 8);
}

void re::DynamicInlineArray<re::SharedPtr<re::VideoHistogram>,2ul>::resize(uint64_t a1, unint64_t a2)
{
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v4 = *(_QWORD *)a1;
  if (a2 <= *(_QWORD *)a1)
  {
    if (a2 >= *(_QWORD *)a1)
      return;
    v5 = a2;
    do
    {
      v6 = a1 + 8 * v5;
      v7 = *(_QWORD *)(v6 + 16);
      if (v7)
      {

        *(_QWORD *)(v6 + 16) = 0;
        v4 = *(_QWORD *)a1;
      }
      ++v5;
    }
    while (v5 < v4);
  }
  else
  {
    if (a2 >= 3)
    {
      re::internal::assertLog((re::internal *)4, a2, "assertion failure: '%s' (%s:line %i) Capacity limit reached. DynamicInlineArray<T,N> cannot be resized.", "false", "resize", 571);
      _os_crash();
      __break(1u);
      return;
    }
    bzero((void *)(a1 + 8 * v4 + 16), 8 * (a2 - *(_QWORD *)a1));
  }
  *(_QWORD *)a1 = a2;
  ++*(_DWORD *)(a1 + 8);
}

void re::DynamicInlineArray<re::VideoHistogramConfig,2ul>::resize(uint64_t a1, unint64_t a2)
{
  unint64_t v4;
  id *v5;
  uint64_t v6;
  unint64_t v7;

  v4 = a2 - *(_QWORD *)a1;
  if (a2 <= *(_QWORD *)a1)
  {
    if (a2 >= *(_QWORD *)a1)
      return;
    v6 = 8 * a2 + 16;
    v7 = a2;
    do
    {
      objc_destroyWeak((id *)(a1 + v6));
      *(_QWORD *)(a1 + 8 * v7++ + 16) = 0;
      v6 += 8;
    }
    while (v7 < *(_QWORD *)a1);
  }
  else
  {
    if (a2 > 2)
    {
      re::internal::assertLog((re::internal *)4, a2, "assertion failure: '%s' (%s:line %i) Capacity limit reached. DynamicInlineArray<T,N> cannot be resized.", "false", "resize", 571);
      _os_crash();
      __break(1u);
      return;
    }
    v5 = (id *)(a1 + 8 * *(_QWORD *)a1 + 16);
    do
    {
      objc_initWeak(v5++, 0);
      --v4;
    }
    while (v4);
  }
  *(_QWORD *)a1 = a2;
  ++*(_DWORD *)(a1 + 8);
}

BOOL re::CMTimeCompareWithThreshold(CMTime *this, CMTime *a2, CMTime *a3, double a4)
{
  double Seconds;
  CMTimeFlags flags;
  CMTimeEpoch epoch;
  CMTimeFlags v9;
  CMTimeEpoch v10;
  CMTimeValue v11;
  int32_t v12;
  CMTime v15;
  CMTime rhs;
  CMTime lhs;
  CMTime time;
  CMTime v19;
  CMTime v20;
  CMTime v21;
  CMTime time2;
  CMTime time1;
  CMTime v24;
  CMTime v25;
  CMTime v26;
  CMTime v27;
  CMTimeValue v28;
  CMTimeScale v29;
  CMTimeValue value;
  CMTimeScale timescale;
  uint64_t v32;

  v32 = *MEMORY[0x24BDAC8D0];
  memset(&v19, 0, sizeof(v19));
  lhs = *this;
  rhs = *a2;
  CMTimeSubtract(&time, &lhs, &rhs);
  CMTimeAbsoluteValue(&v19, &time);
  v15 = v19;
  Seconds = CMTimeGetSeconds(&v15);
  value = this->value;
  flags = this->flags;
  timescale = this->timescale;
  epoch = this->epoch;
  v28 = a2->value;
  v9 = a2->flags;
  v29 = a2->timescale;
  v10 = a2->epoch;
  if ((flags & 0x1F) == 3 || (v9 & 0x1F) == 3)
  {
    memset(&v27, 0, sizeof(v27));
    v11 = this->value;
    v24.epoch = v10;
    v25.value = v11;
    v25.timescale = this->timescale;
    v25.flags = flags;
    v25.epoch = epoch;
    v24.value = a2->value;
    v24.timescale = a2->timescale;
    v24.flags = v9;
    CMTimeSubtract(&v26, &v25, &v24);
    CMTimeAbsoluteValue(&v27, &v26);
    time1 = v27;
    CMTimeMake(&time2, 1, 1000000000);
    if (CMTimeCompare(&time1, &time2) <= 0)
      return 1;
  }
  v20.epoch = v10;
  v21.value = value;
  v21.timescale = timescale;
  v21.flags = flags;
  v21.epoch = epoch;
  v20.value = v28;
  v20.timescale = v29;
  v20.flags = v9;
  v12 = CMTimeCompare(&v21, &v20);
  return Seconds < 0.001 || v12 >= 0;
}

void re::dumpHDRFrameToFile(_QWORD *a1, _QWORD *a2, unsigned __int8 *a3, __int128 *a4, char a5, void *a6, double a7)
{
  NSObject *v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  unint64_t *v15;
  unint64_t i;
  unint64_t v17;
  unint64_t v18;
  _QWORD *v19;
  unint64_t v20;
  __CVBuffer *Width;
  __CVBuffer *Height;
  uint64_t v23;
  float *v24;
  float v25;
  unint64_t v26;
  __CVBuffer **v27;
  uint64_t v28;
  __CVBuffer *v29;
  int v30;
  uint64_t v31;
  NSObject *v32;
  __CVBuffer **v33;
  unsigned int v34;
  unsigned int v35;
  unsigned int v36;
  unsigned int v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t v41;
  uint64_t *v42;
  uint64_t v43;
  uint64_t j;
  __int128 v45;
  NSObject *v46;
  NSObject *v47;
  unsigned int v50;
  _QWORD block[5];
  __int128 v52;
  __int128 v53;
  _QWORD v54[5];
  char v55;
  uint64_t v56;
  uint64_t *v57;
  uint64_t v58;
  void (*v59)(uint64_t, uint64_t);
  void (*v60)(uint64_t);
  const char *v61;
  uint64_t v62;
  int v63;
  VTPixelTransferSessionRef pixelTransferSessionOut;
  uint8_t buf[16];
  __int128 v66;
  int v67;
  uint64_t v68;
  uint64_t v69;
  _QWORD v70[4];

  v70[2] = *MEMORY[0x24BDAC8D0];
  v11 = a6;
  v56 = 0;
  v57 = &v56;
  v58 = 0x5012000000;
  v59 = __Block_byref_object_copy__2;
  v60 = __Block_byref_object_dispose__2;
  v61 = "";
  v62 = 0;
  v63 = 0;
  re::DynamicInlineArray<re::VideoObject<re::VideoPixelBufferBase>,2ul>::copy(&v62, a1);
  v13 = v57;
  v15 = (unint64_t *)(v57 + 6);
  v14 = v57[6];
  if (v14)
  {
    i = 0;
    v17 = 0;
    v18 = 0;
    v19 = v57 + 8;
    while (1)
    {
      v20 = *v15;
      if (*v15 <= i)
        break;
      Width = (__CVBuffer *)v19[i];
      if (Width)
      {
        Width = (__CVBuffer *)CVPixelBufferGetWidth(Width);
        v20 = *v15;
      }
      if (v20 <= i)
        goto LABEL_59;
      if (v17 <= (unint64_t)Width)
        v17 = (unint64_t)Width;
      Height = (__CVBuffer *)v19[i];
      if (Height)
        Height = (__CVBuffer *)CVPixelBufferGetHeight(Height);
      if (v18 <= (unint64_t)Height)
        v18 = (unint64_t)Height;
      if (v14 == ++i)
        goto LABEL_16;
    }
    re::internal::assertLog((re::internal *)6, v12, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < m_size", "operator[]", 381, i, v20);
    _os_crash();
    __break(1u);
LABEL_59:
    re::internal::assertLog((re::internal *)6, v12, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < m_size", "operator[]", 381, i, v20);
    _os_crash();
    __break(1u);
LABEL_60:
    re::internal::assertLog((re::internal *)6, v12, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < m_size", "operator[]", 381, i, v28);
    _os_crash();
    __break(1u);
LABEL_61:
    re::internal::assertLog((re::internal *)6, v38, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < m_size", "operator[]", 381, i, v39);
    _os_crash();
    __break(1u);
  }
  v18 = 0;
  v17 = 0;
LABEL_16:
  v23 = *a2;
  if (*a2)
  {
    v24 = (float *)a2 + 7;
    do
    {
      if (v17 >= (unint64_t)*(v24 - 1))
        v17 = (unint64_t)*(v24 - 1);
      v25 = *v24;
      v24 += 4;
      v26 = (unint64_t)v25;
      if (v18 >= (unint64_t)v25)
        v18 = v26;
      --v23;
    }
    while (v23);
  }
  if (v14)
  {
    i = 0;
    v27 = (__CVBuffer **)(v13 + 8);
    while (1)
    {
      v28 = *v15;
      if (*v15 <= i)
        goto LABEL_60;
      v29 = re::VideoPixelBufferBase::protectionOptions(v27);
      if (v29)
        break;
      ++i;
      ++v27;
      if (v14 == i)
        goto LABEL_28;
    }
    v32 = *re::videoLogObjects(v29);
    if (os_log_type_enabled(v32, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      _os_log_error_impl(&dword_224FE9000, v32, OS_LOG_TYPE_ERROR, "Unable to dump protected content", buf, 2u);
    }
    re::DynamicInlineArray<re::VideoObject<re::VideoPixelBufferBase>,2ul>::clear((uint64_t)v15);
  }
  else
  {
LABEL_28:
    v47 = v11;
    if (a3[64])
    {
      v30 = *a3;
      v50 = re::VideoHDRDefaults::overridePixelFormat(1882468912);
      v31 = 1;
      switch(v30)
      {
        case 0:
          break;
        case 1:
          v31 = 12;
          break;
        case 2:
        case 3:
          v31 = 9;
          break;
        default:
          v31 = 2;
          break;
      }
    }
    else
    {
      v50 = re::VideoHDRDefaults::overridePixelFormat(1882468912);
      v31 = 1;
    }
    v34 = re::VideoHDRDefaults::overrideColorPrimaries((re::VideoHDRDefaults *)v31);
    v35 = re::VideoHDRDefaults::overrideTransferFunction((re::VideoHDRDefaults *)0xD);
    v36 = re::VideoHDRDefaults::overrideYCbCrMatrix((re::VideoHDRDefaults *)1);
    v70[0] = 0;
    v70[1] = 0;
    v67 = 0;
    *(_OWORD *)buf = 0u;
    v66 = 0u;
    v68 = 0x7FFFFFFFLL;
    v69 = 0;
    if (v14)
    {
      v37 = v36;
      for (i = 0; i != v14; ++i)
      {
        re::VideoPixelBufferAllocator::createPixelBuffer((re::VideoPixelBufferAllocator *)buf, v17, v18, v50, v34, v35, v37, 1, &pixelTransferSessionOut, 0x400u, 0x10u, 0, 0);
        v70[i] = pixelTransferSessionOut;
        pixelTransferSessionOut = 0;
        VTPixelTransferSessionCreate(0, &pixelTransferSessionOut);
        if (pixelTransferSessionOut)
        {
          v39 = *v15;
          if (*v15 <= i)
            goto LABEL_61;
          VTPixelTransferSessionTransferImage(pixelTransferSessionOut, (CVPixelBufferRef)v13[i + 8], (CVPixelBufferRef)v70[i]);
          CFRelease(pixelTransferSessionOut);
        }
      }
    }
    re::DynamicInlineArray<re::VideoObject<re::VideoPixelBufferBase>,2ul>::clear((uint64_t)v15);
    v11 = v47;
    if (v14)
    {
      v41 = v13[6];
      v42 = v70;
      do
      {
        re::DynamicInlineArray<REFrameAnalysisBottleneck,2ul>::ensureCapacity(v41, v40);
        v43 = v13[6];
        v13[v43 + 8] = *v42;
        *v42++ = 0;
        v41 = v43 + 1;
        v13[6] = v43 + 1;
        ++*((_DWORD *)v13 + 14);
        --v14;
      }
      while (v14);
    }
    re::HashTable<re::VideoPixelBufferPoolConfiguration,std::unique_ptr<re::VideoPixelBufferPool,std::function<void ()(re::VideoPixelBufferPool*)>>,re::Hash<re::VideoPixelBufferPoolConfiguration>,re::EqualTo<re::VideoPixelBufferPoolConfiguration>,true,false>::deinit((uint64_t *)buf);
    for (j = 1; j != -1; --j)
    {
      v33 = (__CVBuffer **)&v70[j];
      if (v70[j])
        re::VideoObjectBase<re::VideoTextureBase,__CVBuffer *>::release(v33);
      v70[j] = 0;
    }
  }
  if (v11)
  {
    block[1] = 3321888768;
    v45 = a4[1];
    v52 = *a4;
    block[0] = MEMORY[0x24BDAC760];
    block[2] = ___ZN2re18dumpHDRFrameToFileERNS_18DynamicInlineArrayINS_11VideoObjectINS_20VideoPixelBufferBaseEEELm2EEERKNS0_INS_7Vector4IfEELm2EEERKNS_12ColorManagerENS_4ecs211HDRDumpInfoEdbPU28objcproto17OS_dispatch_queue8NSObject_block_invoke;
    block[3] = &unk_24ED376C8;
    block[4] = &v56;
    v55 = a5;
    v53 = v45;
    re::DynamicString::DynamicString((re::DynamicString *)v54, (const re::DynamicString *)(a4 + 2));
    *(double *)&v54[4] = a7;
    dispatch_async(v11, block);
    if (v54[0])
    {
      if ((v54[1] & 1) != 0)
        (*(void (**)(void))(*(_QWORD *)v54[0] + 40))();
      memset(v54, 0, 32);
    }
  }
  else
  {
    v46 = *re::videoLogObjects((re *)v33);
    if (os_log_type_enabled(v46, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      _os_log_error_impl(&dword_224FE9000, v46, OS_LOG_TYPE_ERROR, "VideoAsset.backgroundWorkQueue is invalid", buf, 2u);
    }
  }
  _Block_object_dispose(&v56, 8);
  re::DynamicInlineArray<re::VideoObject<re::VideoPixelBufferBase>,2ul>::clear((uint64_t)&v62);

}

void sub_22532FA00(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,char a36)
{
  uint64_t v36;
  uint64_t v38;
  uint64_t v39;

  re::HashTable<re::VideoPixelBufferPoolConfiguration,std::unique_ptr<re::VideoPixelBufferPool,std::function<void ()(re::VideoPixelBufferPool*)>>,re::Hash<re::VideoPixelBufferPoolConfiguration>,re::EqualTo<re::VideoPixelBufferPoolConfiguration>,true,false>::deinit((uint64_t *)(v36 - 192));
  v38 = 8;
  v39 = v36 - 128;
  while (1)
  {
    if (*(_QWORD *)(v39 + v38))
      re::VideoObjectBase<re::VideoTextureBase,__CVBuffer *>::release((__CVBuffer **)(v39 + v38));
    *(_QWORD *)(v39 + v38) = 0;
    v38 -= 8;
    if (v38 == -8)
    {
      _Block_object_dispose(&a36, 8);
      re::DynamicInlineArray<re::VideoObject<re::VideoPixelBufferBase>,2ul>::clear(a18);

      _Unwind_Resume(a1);
    }
  }
}

void re::DynamicInlineArray<re::VideoObject<re::VideoPixelBufferBase>,2ul>::resize(uint64_t a1, unint64_t a2)
{
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;

  v4 = *(_QWORD *)a1;
  if (a2 <= *(_QWORD *)a1)
  {
    if (a2 >= *(_QWORD *)a1)
      return;
    v5 = 8 * a2 + 16;
    v6 = a2;
    do
    {
      v7 = a1 + 8 * v6;
      if (*(_QWORD *)(v7 + 16))
      {
        re::VideoObjectBase<re::VideoTextureBase,__CVBuffer *>::release((__CVBuffer **)(a1 + v5));
        v4 = *(_QWORD *)a1;
      }
      *(_QWORD *)(v7 + 16) = 0;
      ++v6;
      v5 += 8;
    }
    while (v6 < v4);
  }
  else
  {
    if (a2 >= 3)
    {
      re::internal::assertLog((re::internal *)4, a2, "assertion failure: '%s' (%s:line %i) Capacity limit reached. DynamicInlineArray<T,N> cannot be resized.", "false", "resize", 571);
      _os_crash();
      __break(1u);
      return;
    }
    bzero((void *)(a1 + 8 * v4 + 16), 8 * (a2 - *(_QWORD *)a1));
  }
  *(_QWORD *)a1 = a2;
  ++*(_DWORD *)(a1 + 8);
}

void re::DynamicInlineArray<re::VideoTransformSurfaceConfig,2ul>::resize(uint64_t a1, unint64_t a2)
{
  unint64_t v4;
  uint64_t v5;
  const void **v6;
  unint64_t v7;

  v4 = a2 - *(_QWORD *)a1;
  if (a2 <= *(_QWORD *)a1)
  {
    if (a2 >= *(_QWORD *)a1)
      return;
    v6 = (const void **)(a1 + 24 * a2 + 24);
    v7 = a2;
    do
    {
      if (*v6)
        re::VideoObjectBase<re::VideoColorTransformBase,__CFArray const*>::release(v6);
      *v6 = 0;
      if (*(v6 - 1))
        re::VideoObjectBase<re::VideoColorTransformBase,__CFArray const*>::release(v6 - 1);
      *(v6 - 1) = 0;
      ++v7;
      v6 += 3;
    }
    while (v7 < *(_QWORD *)a1);
  }
  else
  {
    if (a2 > 2)
    {
      re::internal::assertLog((re::internal *)4, a2, "assertion failure: '%s' (%s:line %i) Capacity limit reached. DynamicInlineArray<T,N> cannot be resized.", "false", "resize", 571);
      _os_crash();
      __break(1u);
      return;
    }
    v5 = a1 + 24 * *(_QWORD *)a1 + 16;
    do
    {
      *(_QWORD *)v5 = 0;
      *(_QWORD *)(v5 + 8) = 0;
      *(_BYTE *)(v5 + 16) = 0;
      v5 += 24;
      --v4;
    }
    while (v4);
  }
  *(_QWORD *)a1 = a2;
  ++*(_DWORD *)(a1 + 8);
}

void re::DynamicInlineArray<re::VideoPixelBufferTextures,2ul>::add(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;

  if (*(_QWORD *)a1 >= 2uLL)
  {
    re::internal::assertLog((re::internal *)4, a2, "assertion failure: '%s' (%s:line %i) Capacity limit reached. DynamicInlineArray<T,N> cannot be resized.", "false", "ensureCapacity", 277);
    _os_crash();
    __break(1u);
  }
  else
  {
    v4 = 0;
    v5 = a1 + 24 * *(_QWORD *)a1 + 16;
    do
    {
      *(_QWORD *)(v5 + v4) = 0;
      re::VideoObject<re::VideoTextureBase>::setRef(v5 + v4, (__CVBuffer **)(v5 + v4), *(CVPixelBufferRef *)(a2 + v4));
      v4 += 8;
    }
    while (v4 != 24);
    ++*(_QWORD *)a1;
    ++*(_DWORD *)(a1 + 8);
  }
}

void sub_22532FD44(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;

  if (v2)
  {
    v5 = v1 + 24 * v3 + 8;
    do
    {
      if (*(_QWORD *)(v5 + v2))
        re::VideoObjectBase<re::VideoTextureBase,__CVBuffer *>::release((__CVBuffer **)(v5 + v2));
      *(_QWORD *)(v5 + v2) = 0;
      v2 -= 8;
    }
    while (v2);
  }
  _Unwind_Resume(exception_object);
}

void re::DynamicInlineArray<re::VideoObject<re::VideoPixelFormatDescriptionBase>,2ul>::clear(uint64_t a1)
{
  const void **v2;
  uint64_t v3;

  v2 = (const void **)(a1 + 16);
  if (*(_QWORD *)a1)
  {
    v3 = 8 * *(_QWORD *)a1;
    do
    {
      if (*v2)
        re::VideoObjectBase<re::VideoColorTransformBase,__CFArray const*>::release(v2);
      *v2++ = 0;
      v3 -= 8;
    }
    while (v3);
  }
  *(_QWORD *)a1 = 0;
  ++*(_DWORD *)(a1 + 8);
}

void re::DynamicInlineArray<re::VideoColorTags,2ul>::resize(uint64_t a1, unint64_t a2)
{
  if (a2 <= *(_QWORD *)a1)
  {
    if (a2 >= *(_QWORD *)a1)
      return;
  }
  else
  {
    if (a2 >= 3)
    {
      re::internal::assertLog((re::internal *)4, a2, "assertion failure: '%s' (%s:line %i) Capacity limit reached. DynamicInlineArray<T,N> cannot be resized.", "false", "resize", 571);
      _os_crash();
      __break(1u);
      return;
    }
    bzero((void *)(3 * *(_QWORD *)a1 + a1 + 12), 3 * (a2 - *(_QWORD *)a1));
  }
  *(_QWORD *)a1 = a2;
  ++*(_DWORD *)(a1 + 8);
}

void re::DynamicInlineArray<re::VideoMetalTextures,2ul>::clear(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t i;
  void *v6;

  v2 = a1 + 16;
  if (*(_QWORD *)a1)
  {
    v3 = v2 + 24 * *(_QWORD *)a1;
    v4 = a1;
    do
    {
      v2 += 24;
      for (i = 32; i != 8; i -= 8)
      {
        v6 = *(void **)(v4 + i);
        if (v6)
        {

          *(_QWORD *)(v4 + i) = 0;
        }
      }
      v4 += 24;
    }
    while (v2 != v3);
  }
  *(_QWORD *)a1 = 0;
  ++*(_DWORD *)(a1 + 8);
}

void re::DynamicInlineArray<re::VideoMipGenConfig,2ul>::resize(uint64_t a1, unint64_t a2)
{
  uint64_t v4;
  unint64_t v5;
  uint64_t i;
  void *v7;
  void *v8;

  if (a2 <= *(_QWORD *)a1)
  {
    if (a2 >= *(_QWORD *)a1)
      return;
    v4 = a1 + 48 * a2;
    v5 = a2;
    do
    {
      for (i = 56; i != 32; i -= 8)
      {
        v7 = *(void **)(v4 + i);
        if (v7)
        {

          *(_QWORD *)(v4 + i) = 0;
        }
      }
      do
      {
        v8 = *(void **)(v4 + i);
        if (v8)
        {

          *(_QWORD *)(v4 + i) = 0;
        }
        i -= 8;
      }
      while (i != 8);
      ++v5;
      v4 += 48;
    }
    while (v5 < *(_QWORD *)a1);
  }
  else
  {
    if (a2 >= 3)
    {
      re::internal::assertLog((re::internal *)4, a2, "assertion failure: '%s' (%s:line %i) Capacity limit reached. DynamicInlineArray<T,N> cannot be resized.", "false", "resize", 571);
      _os_crash();
      __break(1u);
      return;
    }
    bzero((void *)(a1 + 48 * *(_QWORD *)a1 + 16), 48 * (a2 - *(_QWORD *)a1));
  }
  *(_QWORD *)a1 = a2;
  ++*(_DWORD *)(a1 + 8);
}

void re::DynamicInlineArray<re::VideoMetalTextures,2ul>::resize(uint64_t a1, unint64_t a2)
{
  uint64_t v4;
  unint64_t v5;
  uint64_t i;
  void *v7;

  if (a2 <= *(_QWORD *)a1)
  {
    if (a2 >= *(_QWORD *)a1)
      return;
    v4 = a1 + 24 * a2;
    v5 = a2;
    do
    {
      for (i = 32; i != 8; i -= 8)
      {
        v7 = *(void **)(v4 + i);
        if (v7)
        {

          *(_QWORD *)(v4 + i) = 0;
        }
      }
      ++v5;
      v4 += 24;
    }
    while (v5 < *(_QWORD *)a1);
  }
  else
  {
    if (a2 >= 3)
    {
      re::internal::assertLog((re::internal *)4, a2, "assertion failure: '%s' (%s:line %i) Capacity limit reached. DynamicInlineArray<T,N> cannot be resized.", "false", "resize", 571);
      _os_crash();
      __break(1u);
      return;
    }
    bzero((void *)(a1 + 24 * *(_QWORD *)a1 + 16), 24 * (a2 - *(_QWORD *)a1));
  }
  *(_QWORD *)a1 = a2;
  ++*(_DWORD *)(a1 + 8);
}

uint64_t re::Optional<re::VideoTransformSurfaceConfig>::operator=(uint64_t a1, unsigned __int8 *a2)
{
  int v3;
  BOOL v4;
  BOOL v5;
  BOOL v6;
  _QWORD *v7;
  _QWORD *v8;

  v3 = *a2;
  if (*(_BYTE *)a1)
    v4 = 0;
  else
    v4 = v3 == 0;
  if (!v4)
  {
    if (*(_BYTE *)a1)
      v5 = v3 == 0;
    else
      v5 = 0;
    if (v5)
    {
      v7 = (_QWORD *)(a1 + 16);
      v8 = (_QWORD *)(a1 + 8);
      if (*(_QWORD *)(a1 + 16))
        re::VideoObjectBase<re::VideoColorTransformBase,__CFArray const*>::release((const void **)(a1 + 16));
      *v7 = 0;
      if (*v8)
        re::VideoObjectBase<re::VideoColorTransformBase,__CFArray const*>::release((const void **)(a1 + 8));
      *(_QWORD *)(a1 + 8) = 0;
      *(_BYTE *)a1 = 0;
    }
    else
    {
      if (*(_BYTE *)a1)
        v6 = 1;
      else
        v6 = v3 == 0;
      if (v6)
      {
        *(_QWORD *)(a1 + 8) = *((_QWORD *)a2 + 1);
        *((_QWORD *)a2 + 1) = 0;
      }
      else
      {
        *(_BYTE *)a1 = 1;
        *(_QWORD *)(a1 + 8) = 0;
        *(_QWORD *)(a1 + 8) = *((_QWORD *)a2 + 1);
        *((_QWORD *)a2 + 1) = 0;
        *(_QWORD *)(a1 + 16) = 0;
      }
      *(_QWORD *)(a1 + 16) = *((_QWORD *)a2 + 2);
      *((_QWORD *)a2 + 2) = 0;
      *(_BYTE *)(a1 + 24) = a2[24];
    }
  }
  return a1;
}

uint64_t re::Optional<re::VideoHDRConfig>::operator=(uint64_t a1, unsigned __int8 *a2)
{
  int v3;
  BOOL v4;
  BOOL v5;
  BOOL v6;
  const void **v7;
  uint64_t v8;
  __int128 v9;
  __int128 v10;

  v3 = *a2;
  if (*(_BYTE *)a1)
    v4 = 0;
  else
    v4 = v3 == 0;
  if (!v4)
  {
    if (*(_BYTE *)a1)
      v5 = v3 == 0;
    else
      v5 = 0;
    if (v5)
    {
      v7 = (const void **)(a1 + 32);
      if (*(_QWORD *)(a1 + 32))
        re::VideoObjectBase<re::VideoColorTransformBase,__CFArray const*>::release(v7);
      v8 = *(_QWORD *)(a1 + 24);
      *(_QWORD *)(a1 + 32) = 0;
      if (v8)
        re::VideoObjectBase<re::VideoColorTransformBase,__CFArray const*>::release((const void **)(a1 + 24));
      *(_QWORD *)(a1 + 24) = 0;
      if (*(_QWORD *)(a1 + 16))
        re::VideoObjectBase<re::VideoColorTransformBase,__CFArray const*>::release((const void **)(a1 + 16));
      *(_QWORD *)(a1 + 16) = 0;
      *(_BYTE *)a1 = 0;
    }
    else
    {
      if (*(_BYTE *)a1)
        v6 = 1;
      else
        v6 = v3 == 0;
      if (v6)
      {
        *(_QWORD *)(a1 + 16) = *((_QWORD *)a2 + 2);
        *((_QWORD *)a2 + 2) = 0;
        *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
        *((_QWORD *)a2 + 3) = 0;
        *((_QWORD *)a2 + 4) = 0;
      }
      else
      {
        *(_BYTE *)a1 = 1;
        *(_QWORD *)(a1 + 16) = 0;
        *(_QWORD *)(a1 + 16) = *((_QWORD *)a2 + 2);
        *((_QWORD *)a2 + 2) = 0;
        *(_OWORD *)(a1 + 24) = 0u;
        *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
        *(_OWORD *)(a2 + 24) = 0u;
      }
      v9 = *(_OWORD *)(a2 + 40);
      v10 = *(_OWORD *)(a2 + 56);
      *(_OWORD *)(a1 + 65) = *(_OWORD *)(a2 + 65);
      *(_OWORD *)(a1 + 56) = v10;
      *(_OWORD *)(a1 + 40) = v9;
    }
  }
  return a1;
}

unsigned __int8 *re::Optional<re::VideoHistogramConfig>::operator=(unsigned __int8 *a1, id *a2)
{
  int v3;
  int v4;
  BOOL v5;
  id *v6;
  BOOL v7;
  BOOL v8;

  v3 = *a1;
  v4 = *(unsigned __int8 *)a2;
  if (*a1)
    v5 = 0;
  else
    v5 = v4 == 0;
  if (!v5)
  {
    v6 = (id *)(a1 + 8);
    if (v3)
      v7 = v4 == 0;
    else
      v7 = 0;
    if (v7)
    {
      objc_destroyWeak(v6);
      *((_QWORD *)a1 + 1) = 0;
      *a1 = 0;
    }
    else
    {
      if (v3)
        v8 = 1;
      else
        v8 = v4 == 0;
      if (v8)
      {
        re::ArcWeakPtr<re::VideoHistogram>::operator=(v6, a2 + 1);
      }
      else
      {
        *a1 = 1;
        *((_QWORD *)a1 + 1) = 0;
        objc_moveWeak(v6, a2 + 1);
      }
    }
  }
  return a1;
}

uint64_t re::Optional<re::VideoPSEConfig>::operator=(uint64_t a1, unsigned __int8 *a2)
{
  int v3;
  BOOL v4;
  BOOL v5;
  BOOL v7;
  __int128 v8;
  std::__shared_weak_count *v9;
  const void **v10;
  uint64_t v11;
  std::__shared_weak_count *v12;

  v3 = *a2;
  if (*(_BYTE *)a1)
    v4 = 0;
  else
    v4 = v3 == 0;
  if (!v4)
  {
    if (*(_BYTE *)a1)
      v5 = v3 == 0;
    else
      v5 = 0;
    if (v5)
    {
      v10 = (const void **)(a1 + 40);
      if (*(_QWORD *)(a1 + 40))
        re::VideoObjectBase<re::VideoColorTransformBase,__CFArray const*>::release(v10);
      v11 = *(_QWORD *)(a1 + 32);
      *(_QWORD *)(a1 + 40) = 0;
      if (v11)
        re::VideoObjectBase<re::VideoColorTransformBase,__CFArray const*>::release((const void **)(a1 + 32));
      *(_QWORD *)(a1 + 32) = 0;
      v12 = *(std::__shared_weak_count **)(a1 + 16);
      if (v12)
        std::__shared_weak_count::__release_weak(v12);
      *(_BYTE *)a1 = 0;
    }
    else
    {
      if (*(_BYTE *)a1)
        v7 = 1;
      else
        v7 = v3 == 0;
      if (v7)
      {
        v8 = *(_OWORD *)(a2 + 8);
        *((_QWORD *)a2 + 1) = 0;
        *((_QWORD *)a2 + 2) = 0;
        v9 = *(std::__shared_weak_count **)(a1 + 16);
        *(_OWORD *)(a1 + 8) = v8;
        if (v9)
          std::__shared_weak_count::__release_weak(v9);
        *(_QWORD *)(a1 + 24) = *((_QWORD *)a2 + 3);
        *(_QWORD *)(a1 + 32) = *((_QWORD *)a2 + 4);
        *((_QWORD *)a2 + 4) = 0;
      }
      else
      {
        *(_BYTE *)a1 = 1;
        *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
        *((_QWORD *)a2 + 1) = 0;
        *((_QWORD *)a2 + 2) = 0;
        *(_QWORD *)(a1 + 24) = *((_QWORD *)a2 + 3);
        *(_QWORD *)(a1 + 32) = 0;
        *(_QWORD *)(a1 + 32) = *((_QWORD *)a2 + 4);
        *((_QWORD *)a2 + 4) = 0;
        *(_QWORD *)(a1 + 40) = 0;
      }
      *(_QWORD *)(a1 + 40) = *((_QWORD *)a2 + 5);
      *((_QWORD *)a2 + 5) = 0;
      *(_QWORD *)(a1 + 48) = *((_QWORD *)a2 + 6);
    }
  }
  return a1;
}

{
  int v3;
  BOOL v4;
  BOOL v5;
  BOOL v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t *v10;
  unint64_t v11;
  std::__shared_weak_count *v12;
  const void **v13;
  uint64_t v14;
  std::__shared_weak_count *v15;
  uint64_t v16;
  unint64_t *v17;
  unint64_t v18;

  v3 = *a2;
  if (*(_BYTE *)a1)
    v4 = 0;
  else
    v4 = v3 == 0;
  if (!v4)
  {
    if (*(_BYTE *)a1)
      v5 = v3 == 0;
    else
      v5 = 0;
    if (v5)
    {
      v13 = (const void **)(a1 + 40);
      if (*(_QWORD *)(a1 + 40))
        re::VideoObjectBase<re::VideoColorTransformBase,__CFArray const*>::release(v13);
      v14 = *(_QWORD *)(a1 + 32);
      *(_QWORD *)(a1 + 40) = 0;
      if (v14)
        re::VideoObjectBase<re::VideoColorTransformBase,__CFArray const*>::release((const void **)(a1 + 32));
      *(_QWORD *)(a1 + 32) = 0;
      v15 = *(std::__shared_weak_count **)(a1 + 16);
      if (v15)
        std::__shared_weak_count::__release_weak(v15);
      *(_BYTE *)a1 = 0;
    }
    else
    {
      if (*(_BYTE *)a1)
        v7 = 1;
      else
        v7 = v3 == 0;
      if (v7)
      {
        v9 = *((_QWORD *)a2 + 1);
        v8 = *((_QWORD *)a2 + 2);
        if (v8)
        {
          v10 = (unint64_t *)(v8 + 16);
          do
            v11 = __ldxr(v10);
          while (__stxr(v11 + 1, v10));
        }
        v12 = *(std::__shared_weak_count **)(a1 + 16);
        *(_QWORD *)(a1 + 8) = v9;
        *(_QWORD *)(a1 + 16) = v8;
        if (v12)
          std::__shared_weak_count::__release_weak(v12);
        *(_QWORD *)(a1 + 24) = *((_QWORD *)a2 + 3);
        re::VideoObject<re::VideoColorTransformBase>::setRef(a1 + 32, (const void **)(a1 + 32), *((CFTypeRef *)a2 + 4));
        re::VideoObject<re::VideoColorTransformBase>::setRef(a1 + 40, (const void **)(a1 + 40), *((CFTypeRef *)a2 + 5));
        *(_QWORD *)(a1 + 48) = *((_QWORD *)a2 + 6);
      }
      else
      {
        *(_BYTE *)a1 = 1;
        v16 = *((_QWORD *)a2 + 2);
        *(_QWORD *)(a1 + 8) = *((_QWORD *)a2 + 1);
        *(_QWORD *)(a1 + 16) = v16;
        if (v16)
        {
          v17 = (unint64_t *)(v16 + 16);
          do
            v18 = __ldxr(v17);
          while (__stxr(v18 + 1, v17));
        }
        *(_QWORD *)(a1 + 24) = *((_QWORD *)a2 + 3);
        *(_QWORD *)(a1 + 32) = 0;
        re::VideoObject<re::VideoColorTransformBase>::setRef(a1 + 32, (const void **)(a1 + 32), *((CFTypeRef *)a2 + 4));
        *(_QWORD *)(a1 + 40) = 0;
        re::VideoObject<re::VideoColorTransformBase>::setRef(a1 + 40, (const void **)(a1 + 40), *((CFTypeRef *)a2 + 5));
        *(_QWORD *)(a1 + 48) = *((_QWORD *)a2 + 6);
      }
    }
  }
  return a1;
}

_BYTE *re::Optional<re::VideoMipGenConfig>::operator=(_BYTE *a1, unsigned __int8 *a2)
{
  int v3;
  BOOL v4;
  BOOL v5;
  BOOL v7;
  uint64_t j;
  uint64_t v9;
  unsigned __int8 *v10;
  uint64_t i;
  void *v12;
  void *v13;
  uint64_t k;
  uint64_t v15;
  unsigned __int8 *v16;

  v3 = *a2;
  if (*a1)
    v4 = 0;
  else
    v4 = v3 == 0;
  if (!v4)
  {
    if (*a1)
      v5 = v3 == 0;
    else
      v5 = 0;
    if (v5)
    {
      for (i = 48; i != 24; i -= 8)
      {
        v12 = *(void **)&a1[i];
        if (v12)
        {

          *(_QWORD *)&a1[i] = 0;
        }
      }
      do
      {
        v13 = *(void **)&a1[i];
        if (v13)
        {

          *(_QWORD *)&a1[i] = 0;
        }
        i -= 8;
      }
      while (i);
      *a1 = 0;
    }
    else
    {
      if (*a1)
        v7 = 1;
      else
        v7 = v3 == 0;
      if (v7)
      {
        for (j = 8; j != 32; j += 8)
          NS::SharedPtr<MTL::Texture>::operator=((void **)&a1[j], (void **)&a2[j]);
        v9 = 0;
        v10 = a2 + 32;
        do
        {
          NS::SharedPtr<MTL::Texture>::operator=((void **)&a1[v9 + 32], (void **)&v10[v9]);
          v9 += 8;
        }
        while (v9 != 24);
      }
      else
      {
        *a1 = 1;
        for (k = 8; k != 32; k += 8)
        {
          *(_QWORD *)&a1[k] = *(_QWORD *)&a2[k];
          *(_QWORD *)&a2[k] = 0;
        }
        v15 = 0;
        v16 = a2 + 32;
        do
        {
          *(_QWORD *)&a1[v15 + 32] = *(_QWORD *)&v16[v15];
          *(_QWORD *)&v16[v15] = 0;
          v15 += 8;
        }
        while (v15 != 24);
      }
    }
  }
  return a1;
}

{
  int v3;
  BOOL v4;
  BOOL v5;
  BOOL v7;
  uint64_t j;
  uint64_t v9;
  unsigned __int8 *v10;
  uint64_t i;
  void *v12;
  void *v13;
  uint64_t k;
  uint64_t v15;
  unsigned __int8 *v16;

  v3 = *a2;
  if (*a1)
    v4 = 0;
  else
    v4 = v3 == 0;
  if (!v4)
  {
    if (*a1)
      v5 = v3 == 0;
    else
      v5 = 0;
    if (v5)
    {
      for (i = 48; i != 24; i -= 8)
      {
        v12 = *(void **)&a1[i];
        if (v12)
        {

          *(_QWORD *)&a1[i] = 0;
        }
      }
      do
      {
        v13 = *(void **)&a1[i];
        if (v13)
        {

          *(_QWORD *)&a1[i] = 0;
        }
        i -= 8;
      }
      while (i);
      *a1 = 0;
    }
    else
    {
      if (*a1)
        v7 = 1;
      else
        v7 = v3 == 0;
      if (v7)
      {
        for (j = 8; j != 32; j += 8)
          NS::SharedPtr<MTL::Texture>::operator=((void **)&a1[j], (void **)&a2[j]);
        v9 = 0;
        v10 = a2 + 32;
        do
        {
          NS::SharedPtr<MTL::Texture>::operator=((void **)&a1[v9 + 32], (void **)&v10[v9]);
          v9 += 8;
        }
        while (v9 != 24);
      }
      else
      {
        *a1 = 1;
        for (k = 8; k != 32; k += 8)
          *(_QWORD *)&a1[k] = *(id *)&a2[k];
        v15 = 0;
        v16 = a2 + 32;
        do
        {
          *(_QWORD *)&a1[v15 + 32] = *(id *)&v16[v15];
          v15 += 8;
        }
        while (v15 != 24);
      }
    }
  }
  return a1;
}

void re::VideoProcessorConfig::~VideoProcessorConfig(id *this)
{
  if (*((_BYTE *)this + 288))
  {
    objc_destroyWeak(this + 37);
    this[37] = 0;
  }
  re::Optional<re::VideoPSEConfig>::~Optional((uint64_t)(this + 29));
  re::Optional<re::VideoMipGenConfig>::~Optional((_BYTE *)this + 176);
  re::Optional<re::VideoTransformSurfaceConfig>::~Optional((uint64_t)(this + 18));
  re::Optional<re::VideoHDRConfig>::~Optional((uint64_t)(this + 6));
}

id re::DynamicInlineArray<NS::SharedPtr<MTL::Texture>,2ul>::add(uint64_t a1, id a2)
{
  uint64_t v3;
  id result;

  if (*(_QWORD *)a1 >= 2uLL)
  {
    re::internal::assertLog((re::internal *)4, (uint64_t)a2, "assertion failure: '%s' (%s:line %i) Capacity limit reached. DynamicInlineArray<T,N> cannot be resized.", "false", "ensureCapacity", 277);
    result = (id)_os_crash();
    __break(1u);
  }
  else
  {
    v3 = a1 + 8 * *(_QWORD *)a1;
    result = a2;
    *(_QWORD *)(v3 + 16) = result;
    ++*(_QWORD *)a1;
    ++*(_DWORD *)(a1 + 8);
  }
  return result;
}

uint64_t re::retrievePresentationGroupForTime(uint64_t a1, uint64_t a2, CMTime *a3, unint64_t a4, unint64_t a5, _QWORD *a6, unsigned __int8 *a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13)
{
  id v17;
  re::VideoDefaults *v18;
  __int128 v19;
  CVPixelBufferRef *v20;
  uint64_t v21;
  re *v22;
  unint64_t v23;
  NSObject *v24;
  re::VideoDefaults *v25;
  uint64_t v26;
  re::VideoPresentationQueue *v27;
  uint64_t v28;
  unsigned __int8 *v29;
  uint64_t v30;
  unsigned __int8 *v31;
  unint64_t v32;
  re::VideoDefaults *v33;
  unint64_t v34;
  __IOSurface *IOSurface;
  IOSurfaceID ID;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  NSObject *v40;
  re *v41;
  re *v42;
  _BOOL4 v43;
  objc_class *v44;
  re *v45;
  uint64_t v46;
  NSObject *v47;
  uint64_t v48;
  NSObject *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  unint64_t v53;
  unsigned int **v54;
  unsigned int v55;
  unint64_t v56;
  unint64_t v57;
  __CVBuffer *v58;
  char v59;
  unint64_t v60;
  __CVBuffer *v61;
  re *v62;
  NSObject *v63;
  re *TexturesFromPixelBuffer;
  NSObject *v65;
  CVPixelBufferRef v66;
  uint64_t v67;
  uint64_t v68;
  void *value;
  uint64_t i;
  re *v71;
  re::VideoDefaults *v72;
  re *v73;
  uint64_t v74;
  unsigned __int8 v75;
  uint64_t v76;
  id v77;
  re *v78;
  __int128 v79;
  uint64_t v80;
  CVPixelBufferRef *v81;
  re::VideoDefaults *v82;
  unint64_t v83;
  __CVBuffer *v84;
  re *v85;
  NSObject *v86;
  re *v87;
  NSObject *v88;
  CVPixelBufferRef v89;
  uint64_t v90;
  uint64_t v91;
  id v92;
  re::VideoDefaults *v93;
  id v94;
  size_t Width;
  size_t Height;
  void *v97;
  id v98;
  void *v99;
  uint64_t j;
  NSObject *v101;
  void *v102;
  re::VideoDefaults *v103;
  re *v104;
  objc_class *v105;
  CVPixelBufferRef *v106;
  NSObject *v107;
  unint64_t v108;
  unsigned __int8 *v109;
  unint64_t v110;
  __CVBuffer *v111;
  re::CoreVideoUtils **v112;
  NSMutableString *v113;
  re *v114;
  NSObject *v115;
  CMTimeValue v116;
  BOOL v117;
  NSObject *v118;
  NSObject *v120;
  const char *v121;
  NSObject *v122;
  NSObject *v123;
  NSObject *v124;
  NSObject *v125;
  unint64_t v126;
  unint64_t v127;
  unint64_t v128;
  __CVBuffer *v129;
  re::CoreVideoUtils **v130;
  NSMutableString *v131;
  re *v132;
  NSObject *v133;
  CMTimeValue v134;
  NSObject *v135;
  Float64 Seconds;
  id *location;
  os_unfair_lock_s *v138;
  id *v139;
  unsigned __int8 *v140;
  uint64_t v141;
  int __src;
  int v145;
  CMTime *v147;
  NSObject v148;
  int v149;
  _OWORD v150[3];
  int v151;
  CMTime v152;
  CVPixelBufferRef texture[4];
  uint64_t v154;
  char v155;
  CMTime v156;
  CMTime v157;
  CMTime v158;
  CMTime v159;
  CMTime v160;
  CMTime v161;
  CMTime v162;
  CMTime rhs;
  CMTime lhs;
  uint8_t v165[8];
  int v166;
  _BYTE v167[16];
  _BYTE v168[36];
  CMTime v169;
  CMTime v170;
  CMTime v171;
  CMTime v172;
  NSObject v173;
  int v174;
  _OWORD v175[3];
  int v176;
  CMTime v177;
  CMTime time2;
  CMTime time1;
  CMTime time;
  CMTime v181;
  unint64_t v182;
  int v183;
  _QWORD v184[2];
  _BYTE v185[36];
  CMTime v186;
  id v187[2];
  CMTime buf;
  uint64_t v189;
  __int128 v190;
  __int128 v191;
  int v192;
  uint64_t v193;
  int v194;
  uint64_t v195;
  int v196;
  uint64_t v197;
  int v198;
  uint64_t v199;
  int v200;
  uint64_t v201;
  int v202;
  uint64_t v203;
  int v204;
  uint64_t v205;
  int v206;
  uint64_t v207;
  int v208;
  char v209;
  uint64_t v210;
  int v211;
  uint64_t v212;
  int v213;
  uint64_t v214;
  char v215;
  __int128 v216;
  __int128 v217;
  __int128 v218;
  __int16 v219;
  char v220;
  int v221;
  __int128 v222;
  int v223;
  uint64_t v224;
  int v225;
  uint64_t v226;
  int v227;
  uint64_t v228;
  int v229;
  uint64_t v230;
  int v231;
  uint64_t v232;
  int v233;
  char v234;
  uint64_t v235;
  uint64_t v236;

  v236 = *MEMORY[0x24BDAC8D0];
  v17 = a12;
  if (a13)
  {
    v145 = *(_BYTE *)(a13 + 56) & (*(_QWORD *)a13 != 0);
    __src = *(_BYTE *)(a13 + 128) & (*(_QWORD *)(a13 + 72) != 0);
  }
  else
  {
    v145 = 0;
    __src = 0;
  }
  v186 = *(CMTime *)*(_QWORD *)&MEMORY[0x24BDC0D40];
  v182 = 0;
  v183 = 0;
  *(_QWORD *)v185 = 0;
  *(_DWORD *)&v185[8] = -1;
  *(CMTime *)&v185[12] = v186;
  if (a13 && (*(_BYTE *)(a13 + 56) & 1) != 0 && *(_QWORD *)a13)
  {
    v18 = (re::VideoDefaults *)re::DynamicInlineArray<__CVBuffer *,2ul>::operator=((uint64_t *)&v182, (uint64_t *)a13);
    v19 = *(_OWORD *)(a13 + 48);
    *(_OWORD *)v185 = *(_OWORD *)(a13 + 32);
    *(_OWORD *)&v185[16] = v19;
    *(_DWORD *)&v185[32] = *(_DWORD *)(a13 + 64);
    if (v182)
    {
      v20 = (CVPixelBufferRef *)v184;
      v21 = 8 * v182;
      do
      {
        v18 = CVPixelBufferRetain(*v20++);
        v21 -= 8;
      }
      while (v21);
    }
    v186 = *(CMTime *)&v185[12];
  }
  else
  {
    v181 = *a3;
    re::retrievePixelBuffersWithVideoReceiver(&buf.value, (uint64_t *)a2, &v181, (uint64_t)&v186);
    v18 = (re::VideoDefaults *)re::DynamicInlineArray<__CVBuffer *,2ul>::move(&v182, (unint64_t *)&buf);
    ++v183;
    *(_OWORD *)v185 = v190;
    *(_OWORD *)&v185[16] = v191;
    *(_DWORD *)&v185[32] = v192;
  }
  v147 = a3;
  v22 = (re *)re::VideoDefaults::logEnabled(v18);
  v23 = v182;
  if ((_DWORD)v22)
  {
    if (!v182)
      goto LABEL_171;
    v108 = 0;
    do
    {
      v109 = a7;
      v110 = v108 + 1;
      objc_msgSend(MEMORY[0x24BDD16A8], "stringWithFormat:", CFSTR("Pixel Buffer %zu of %zu"), v108 + 1, v23);
      v111 = (__CVBuffer *)objc_claimAutoreleasedReturnValue();
      v112 = (re::CoreVideoUtils **)re::DynamicInlineArray<re::VideoObject<re::VideoPixelBufferBase>,2ul>::operator[](&v182, v108);
      re::CoreVideoUtils::printPixelBufferInfo(*v112, v111, v113);
      v115 = (id)*re::videoLogObjects(v114);
      if (os_log_type_enabled(v115, OS_LOG_TYPE_DEFAULT))
      {
        v116 = -[__CVBuffer cStringUsingEncoding:](objc_retainAutorelease(v111), "cStringUsingEncoding:", 1);
        LODWORD(buf.value) = 136315138;
        *(CMTimeValue *)((char *)&buf.value + 4) = v116;
        _os_log_impl(&dword_224FE9000, v115, OS_LOG_TYPE_DEFAULT, "%s", (uint8_t *)&buf, 0xCu);
      }

      v23 = v182;
      v108 = v110;
      v117 = v110 >= v182;
      a7 = v109;
    }
    while (!v117);
  }
  if (v23)
  {
    *(_DWORD *)(a2 + 8) = 0;
    if ((v186.flags & 1) == 0)
    {
      v24 = *re::videoLogObjects(v22);
      if (os_log_type_enabled(v24, OS_LOG_TYPE_ERROR))
      {
        LOWORD(buf.value) = 0;
        _os_log_error_impl(&dword_224FE9000, v24, OS_LOG_TYPE_ERROR, "Video receiver sample has an invalid presentation timestamp.", (uint8_t *)&buf, 2u);
      }
      goto LABEL_172;
    }
    time = v186;
    *(Float64 *)(a11 + 24) = CMTimeGetSeconds(&time);
    v27 = (re::VideoPresentationQueue *)(a1 + 256);
    if (*(_QWORD *)(a1 + 2032) == *(_QWORD *)(a1 + 2040))
      goto LABEL_37;
    while (1)
    {
      time1 = v186;
      time2 = *(CMTime *)re::VideoPresentationQueue::front((re::VideoPresentationQueue *)(a1 + 256), v26);
      v25 = (re::VideoDefaults *)CMTimeCompare(&time1, &time2);
      if (!(_DWORD)v25)
        break;
      if ((_DWORD)v25 == -1)
      {
        v41 = (re *)re::VideoDefaults::logEnabled(v25);
        if ((_DWORD)v41)
        {
          v125 = *re::videoLogObjects(v41);
          if (os_log_type_enabled(v125, OS_LOG_TYPE_DEFAULT))
          {
            LOWORD(buf.value) = 0;
            _os_log_impl(&dword_224FE9000, v125, OS_LOG_TYPE_DEFAULT, "Presentation queue is stale. Clearing.", (uint8_t *)&buf, 2u);
          }
        }
        re::VideoPresentationQueue::clear((re::VideoPresentationQueue *)(a1 + 256));
        goto LABEL_37;
      }
      if (*(_QWORD *)(a1 + 2032) != *(_QWORD *)(a1 + 2040))
      {
        re::deinitVideoPresentationGroup(a1 + 272 + 880 * (*(_QWORD *)(a1 + 2032) & 1));
        v28 = *(_QWORD *)(a1 + 2032) + 1;
        *(_QWORD *)(a1 + 2032) = v28;
        if (v28 != *(_QWORD *)(a1 + 2040))
          continue;
      }
      goto LABEL_37;
    }
    v141 = a2;
    v29 = (unsigned __int8 *)re::VideoPresentationQueue::front((re::VideoPresentationQueue *)(a1 + 256), v26);
    if (v29[464] == *(unsigned __int8 *)(a1 + 7016))
    {
      v31 = a7;
      v32 = v182;
      v33 = (re::VideoDefaults *)re::VideoPresentationQueue::front(v27, v30);
      if (v32 == *((_QWORD *)v33 + 3))
      {
        if (!v182)
        {
LABEL_31:
          v25 = (re::VideoDefaults *)re::VideoDefaults::logEnabled(v33);
          a7 = v31;
          a2 = v141;
          if ((_DWORD)v25)
          {
            if (*(_QWORD *)(a1 + 2032) != *(_QWORD *)(a1 + 2040))
            {
              v40 = *re::videoLogObjects(v25);
              v25 = (re::VideoDefaults *)os_log_type_enabled(v40, OS_LOG_TYPE_DEFAULT);
              if ((_DWORD)v25)
              {
                LOWORD(buf.value) = 0;
                _os_log_impl(&dword_224FE9000, v40, OS_LOG_TYPE_DEFAULT, "Presentation group found for presentation time.", (uint8_t *)&buf, 2u);
              }
            }
          }
LABEL_37:
          if (*(_QWORD *)(a1 + 2032) == *(_QWORD *)(a1 + 2040))
          {
            v42 = (re *)re::VideoDefaults::logEnabled(v25);
            if ((_DWORD)v42)
            {
              v122 = *re::videoLogObjects(v42);
              if (os_log_type_enabled(v122, OS_LOG_TYPE_DEFAULT))
              {
                LOWORD(buf.value) = 0;
                _os_log_impl(&dword_224FE9000, v122, OS_LOG_TYPE_DEFAULT, "Presentation group not found for presentation time. Creating a new presentation group.", (uint8_t *)&buf, 2u);
              }
            }
            buf = *(CMTime *)*(_QWORD *)&MEMORY[0x24BDC0D40];
            v189 = 0;
            LODWORD(v190) = 0;
            *(_QWORD *)&v191 = 0;
            DWORD2(v191) = 0;
            v193 = 0;
            v194 = 0;
            v195 = 0;
            v196 = 0;
            v197 = 0;
            v198 = 0;
            v199 = 0;
            v200 = 0;
            v201 = 0;
            v202 = 0;
            v203 = 0;
            v204 = 0;
            v205 = 0;
            v206 = 0;
            v207 = 0;
            v208 = 0;
            v209 = 0;
            v210 = 0;
            v211 = 0;
            v212 = 0;
            v213 = 0;
            v214 = 0;
            v215 = 0;
            v219 = 0;
            v220 = 0;
            v217 = 0u;
            v218 = 0u;
            v216 = 0u;
            v221 = -1;
            v224 = 0;
            v225 = 0;
            v226 = 0;
            v227 = 0;
            v228 = 0;
            v229 = 0;
            v230 = 0;
            v231 = 0;
            v232 = 0;
            v233 = 0;
            v234 = 0;
            v222 = 0u;
            v223 = 0;
            v235 = 1;
            v43 = (*(unsigned __int8 *)(a1 + 7016) >> 3) & 1;
            v177 = v186;
            v44 = (objc_class *)v182;
            v174 = 0;
            memcpy(v175, v184, 8 * v182);
            v173.isa = v44;
            v175[1] = *(_OWORD *)v185;
            v175[2] = *(_OWORD *)&v185[16];
            v176 = *(_DWORD *)&v185[32];
            v45 = (re *)populatePresentationGroup((__int128 *)&v177.value, &v173, a1, a4, a5, a6, a7, (uint64_t)&buf, a11, v17, v43);
            v46 = (uint64_t)v45;
            v173.isa = 0;
            v174 = 1;
            if ((_DWORD)v45)
            {
              v47 = *re::videoLogObjects(v45);
              if (os_log_type_enabled(v47, OS_LOG_TYPE_ERROR))
              {
                *(_WORD *)v165 = 0;
                _os_log_error_impl(&dword_224FE9000, v47, OS_LOG_TYPE_ERROR, "Could not populate current presentation group using buffer group", v165, 2u);
              }
LABEL_47:
              re::VideoPresentationGroup::~VideoPresentationGroup((re::VideoPresentationGroup *)&buf);
              goto LABEL_176;
            }
            v48 = *(_QWORD *)(a1 + 2040);
            if (v48 - *(_QWORD *)(a1 + 2032) == 2)
            {
              v49 = *re::videoLogObjects(v45);
              if (os_log_type_enabled(v49, OS_LOG_TYPE_ERROR))
              {
                *(_WORD *)v165 = 0;
                _os_log_error_impl(&dword_224FE9000, v49, OS_LOG_TYPE_ERROR, "Unable to enqueue new presentation group.", v165, 2u);
              }
              v46 = 1;
              goto LABEL_47;
            }
            v50 = a1 + 880 * (*(_QWORD *)(a1 + 2040) & 1);
            *(_QWORD *)(a1 + 2040) = v48 + 1;
            re::VideoPresentationGroup::operator=(v50 + 272, (__int128 *)&buf.value);
            re::VideoPresentationGroup::~VideoPresentationGroup((re::VideoPresentationGroup *)&buf);
          }
          v140 = a7;
          v51 = re::VideoPresentationQueue::front(v27, v26);
          v52 = v51;
          if (*(_QWORD *)(v51 + 784))
          {
            v53 = 0;
            v54 = (unsigned int **)(v51 + 800);
            do
            {
              v55 = atomic_load(*v54);
              if (v55 != 8)
                goto LABEL_85;
              ++v53;
              v54 += 2;
            }
            while (v53 < *(_QWORD *)(v51 + 784));
          }
          v56 = *(_QWORD *)(v51 + 48);
          if (v56)
          {
            v57 = 0;
            while (1)
            {
              *(_QWORD *)v165 = 0;
              re::VideoObject<re::VideoTextureBase>::setRef((int)v165, (__CVBuffer **)v165, *(CVPixelBufferRef *)(v52 + 64 + 8 * v57));
              v58 = re::VideoLightSpillGenerator::CanGenerateForPixelBuffer((__CVBuffer **)v165);
              v59 = (char)v58;
              if (*(_QWORD *)v165)
                re::VideoObjectBase<re::VideoTextureBase,__CVBuffer *>::release((__CVBuffer **)v165);
              *(_QWORD *)v165 = 0;
              if ((v59 & 1) == 0)
                break;
              ++v57;
              v56 = *(_QWORD *)(v52 + 48);
              if (v57 >= v56)
                goto LABEL_59;
            }
            v71 = (re *)re::VideoDefaults::logEnabled(v58);
            if ((_DWORD)v71)
            {
              v124 = *re::videoLogObjects(v71);
              if (os_log_type_enabled(v124, OS_LOG_TYPE_DEFAULT))
              {
                LOWORD(buf.value) = 0;
                _os_log_impl(&dword_224FE9000, v124, OS_LOG_TYPE_DEFAULT, "Cannot generate light spill for pixel buffer because its pixel format is not supported.", (uint8_t *)&buf, 2u);
              }
            }
            goto LABEL_85;
          }
LABEL_59:
          if (*(_QWORD *)(v52 + 336)
            || !*(_QWORD *)(a1 + 4768)
            || *(int *)(a1 + 4752) < 1
            || *(int *)(a1 + 4756) < 1
            || !v56
            || (*(_DWORD *)(a1 + 4760) & 0x80000000) != 0)
          {
LABEL_60:
            if (!*(_QWORD *)(v52 + 432)
              && (*(_BYTE *)(a1 + 7016) & 4) != 0
              && *(_QWORD *)(a1 + 4792)
              && *(int *)(a1 + 4776) >= 1
              && *(int *)(a1 + 4780) >= 1
              && v56
              && (*(_DWORD *)(a1 + 4784) & 0x80000000) == 0)
            {
              v60 = 0;
              do
              {
                v61 = *(__CVBuffer **)(v52 + 64 + 8 * v60);
                texture[0] = 0;
                v62 = (re *)re::VideoLightSpillGenerator::generate(a1 + 4776, v61, texture);
                if ((_DWORD)v62)
                {
                  v63 = *re::videoLogObjects(v62);
                  if (os_log_type_enabled(v63, OS_LOG_TYPE_ERROR))
                  {
                    LOWORD(buf.value) = 0;
                    _os_log_error_impl(&dword_224FE9000, v63, OS_LOG_TYPE_ERROR, "Unable to generate specular light spill pixel buffer.", (uint8_t *)&buf, 2u);
                  }
                }
                else
                {
                  memset(&buf, 0, sizeof(buf));
                  TexturesFromPixelBuffer = (re *)re::VideoTextureCache::createTexturesFromPixelBuffer((re::VideoTextureCache *)(a1 + 216), texture[0], (re::VideoPixelBufferTextures *)&buf, 1);
                  if ((_DWORD)TexturesFromPixelBuffer)
                  {
                    v65 = *re::videoLogObjects(TexturesFromPixelBuffer);
                    if (os_log_type_enabled(v65, OS_LOG_TYPE_ERROR))
                    {
                      LOWORD(v172.value) = 0;
                      _os_log_error_impl(&dword_224FE9000, v65, OS_LOG_TYPE_ERROR, "Unable to generate specular light spill texture.", (uint8_t *)&v172, 2u);
                    }
                  }
                  else
                  {
                    v66 = texture[0];
                    v172.value = (CMTimeValue)texture[0];
                    CVPixelBufferRetain(texture[0]);
                    re::DynamicInlineArray<REFrameAnalysisBottleneck,2ul>::ensureCapacity(*(_QWORD *)(v52 + 304), v67);
                    v68 = *(_QWORD *)(v52 + 304);
                    *(_QWORD *)(v52 + 320 + 8 * v68) = v66;
                    *(_QWORD *)(v52 + 304) = v68 + 1;
                    ++*(_DWORD *)(v52 + 312);
                    v171.value = 0;
                    re::VideoObject<re::VideoTextureBase>::setRef((int)&v171, (__CVBuffer **)&v171, (CVPixelBufferRef)buf.value);
                    re::VideoTextureBase::metalTexture((__CVBuffer **)&v171, &v172);
                    if (v171.value)
                      re::VideoObjectBase<re::VideoTextureBase,__CVBuffer *>::release((__CVBuffer **)&v171);
                    value = (void *)v172.value;
                    re::DynamicInlineArray<NS::SharedPtr<MTL::Texture>,2ul>::add(v52 + 432, (id)v172.value);
                    if (value)

                  }
                  for (i = 16; i != -8; i -= 8)
                  {
                    if (*(CMTimeValue *)((char *)&buf.value + i))
                      re::VideoObjectBase<re::VideoTextureBase,__CVBuffer *>::release((__CVBuffer **)((char *)&buf + i));
                    *(CMTimeValue *)((char *)&buf.value + i) = 0;
                  }
                }
                CVPixelBufferRelease(texture[0]);
                ++v60;
              }
              while (v60 < *(_QWORD *)(v52 + 48));
            }
LABEL_85:
            if ((v145 ^ 1 | __src) == 1 && *(_QWORD *)(a1 + 2040) - *(_QWORD *)(a1 + 2032) != *(_QWORD *)(a1 + 256))
            {
              v73 = (re *)re::VideoDefaults::logEnabled(v72);
              if ((_DWORD)v73)
              {
                v123 = *re::videoLogObjects(v73);
                if (os_log_type_enabled(v123, OS_LOG_TYPE_DEFAULT))
                {
                  LOWORD(buf.value) = 0;
                  _os_log_impl(&dword_224FE9000, v123, OS_LOG_TYPE_DEFAULT, "Attempting to fill presentation queue with 1 more group.", (uint8_t *)&buf, 2u);
                }
              }
              v172 = *(CMTime *)*(_QWORD *)&MEMORY[0x24BDC0D40];
              v74 = *(_QWORD *)(a1 + 2040);
              if (*(_QWORD *)(a1 + 2032) != v74)
                v172 = *(CMTime *)(a1 + 880 * ((v74 & 1) == 0) + 272);
              memset(&v171, 0, sizeof(v171));
              CMTimeMake(&v171, 0, 1000);
              v170 = v172;
              memset(&v169, 0, sizeof(v169));
              CMTimeMake(&v169, 10, 1000);
              v75 = atomic_load((unsigned __int8 *)&qword_2540FF710);
              if ((v75 & 1) == 0 && __cxa_guard_acquire(&qword_2540FF710))
              {
                _MergedGlobals_79 = (uint64_t)re::retrievePresentationGroupForTime(re::VideoPlaybackContext *,re::VideoObject<re::VideoReceiverBase> &,CMTime,re::VideoManager &,re::RenderManager const&,re::TargetDisplayInfoProvider const&,re::ColorManager const&,re::TextureManager const*,unsigned long long,re::VideoPresentationGroup &,re::ecs2::HDRDumpInfo &,NSObject  {objcproto17OS_dispatch_queue}*,re::FixedInlineArray<re::VideoPixelBuffers,2ul> *,BOOL)::$_0::operator()();
                __cxa_guard_release(&qword_2540FF710);
              }
              v76 = 0;
              *(_QWORD *)v165 = 0;
              v166 = 0;
              *(_QWORD *)v168 = 0;
              *(_DWORD *)&v168[8] = -1;
              *(_OWORD *)&v168[12] = *MEMORY[0x24BDC0D40];
              *(_QWORD *)&v168[28] = *(_QWORD *)(MEMORY[0x24BDC0D40] + 16);
              while (1)
              {
                lhs = v171;
                rhs = v169;
                CMTimeAdd(&buf, &lhs, &rhs);
                v171 = buf;
                memset(&v162, 0, sizeof(v162));
                v161 = *v147;
                v160 = buf;
                CMTimeAdd(&v162, &v161, &v160);
                if (a13 && (*(_BYTE *)(a13 + 128) & 1) != 0 && *(_QWORD *)(a13 + 72))
                {
                  v77 = v17;
                  v78 = (re *)re::DynamicInlineArray<__CVBuffer *,2ul>::operator=((uint64_t *)v165, (uint64_t *)a13);
                  v79 = *(_OWORD *)(a13 + 48);
                  *(_OWORD *)v168 = *(_OWORD *)(a13 + 32);
                  *(_OWORD *)&v168[16] = v79;
                  *(_DWORD *)&v168[32] = *(_DWORD *)(a13 + 64);
                  if (*(_QWORD *)v165)
                  {
                    v80 = 8 * *(_QWORD *)v165;
                    v81 = (CVPixelBufferRef *)v167;
                    do
                    {
                      v78 = CVPixelBufferRetain(*v81++);
                      v80 -= 8;
                    }
                    while (v80);
                  }
                  v186 = *(CMTime *)&v185[12];
                  v17 = v77;
                }
                else
                {
                  v159 = v162;
                  re::retrievePixelBuffersWithVideoReceiver(&buf.value, (uint64_t *)a2, &v159, (uint64_t)&v170);
                  v78 = (re *)re::DynamicInlineArray<__CVBuffer *,2ul>::move((unint64_t *)v165, (unint64_t *)&buf);
                  ++v166;
                  *(_OWORD *)v168 = v190;
                  *(_OWORD *)&v168[16] = v191;
                  *(_DWORD *)&v168[32] = v192;
                }
                if ((v170.flags & 1) == 0)
                {
                  v101 = *re::videoLogObjects(v78);
                  if (os_log_type_enabled(v101, OS_LOG_TYPE_ERROR))
                  {
                    LOWORD(buf.value) = 0;
                    _os_log_error_impl(&dword_224FE9000, v101, OS_LOG_TYPE_ERROR, "Invalid presentation time sampled for future host time.", (uint8_t *)&buf, 2u);
                  }
                  goto LABEL_163;
                }
                v158 = v172;
                v157 = v170;
                v82 = (re::VideoDefaults *)CMTimeCompare(&v158, &v157);
                if ((v82 & 0x80000000) != 0)
                  break;
                if (++v76 == 5)
                  goto LABEL_163;
              }
              v102 = v17;
              v103 = (re::VideoDefaults *)re::VideoDefaults::logEnabled(v82);
              if ((_DWORD)v103)
              {
                v126 = v182;
                if (v182)
                {
                  v127 = 0;
                  do
                  {
                    v128 = v127 + 1;
                    objc_msgSend(MEMORY[0x24BDD16A8], "stringWithFormat:", CFSTR("Pixel Buffer %zu of %zu"), v127 + 1, v126);
                    v129 = (__CVBuffer *)objc_claimAutoreleasedReturnValue();
                    v130 = (re::CoreVideoUtils **)re::DynamicInlineArray<re::VideoObject<re::VideoPixelBufferBase>,2ul>::operator[](&v182, v127);
                    re::CoreVideoUtils::printPixelBufferInfo(*v130, v129, v131);
                    v133 = (id)*re::videoLogObjects(v132);
                    if (os_log_type_enabled(v133, OS_LOG_TYPE_DEFAULT))
                    {
                      v134 = -[__CVBuffer cStringUsingEncoding:](objc_retainAutorelease(v129), "cStringUsingEncoding:", 1);
                      LODWORD(buf.value) = 136315138;
                      *(CMTimeValue *)((char *)&buf.value + 4) = v134;
                      _os_log_impl(&dword_224FE9000, v133, OS_LOG_TYPE_DEFAULT, "%s", (uint8_t *)&buf, 0xCu);
                    }

                    v126 = v182;
                    v127 = v128;
                  }
                  while (v128 < v182);
                }
              }
              v104 = (re *)re::VideoDefaults::logEnabled(v103);
              if ((_DWORD)v104)
              {
                v135 = (id)*re::videoLogObjects(v104);
                if (os_log_type_enabled(v135, OS_LOG_TYPE_DEFAULT))
                {
                  v156 = v170;
                  Seconds = CMTimeGetSeconds(&v156);
                  LODWORD(buf.value) = 134217984;
                  *(Float64 *)((char *)&buf.value + 4) = Seconds;
                  _os_log_impl(&dword_224FE9000, v135, OS_LOG_TYPE_DEFAULT, "Creating presentation queue group for future presentation Time: %.3f", (uint8_t *)&buf, 0xCu);
                }

              }
              buf = *(CMTime *)*(_QWORD *)&MEMORY[0x24BDC0D40];
              v189 = 0;
              LODWORD(v190) = 0;
              *(_QWORD *)&v191 = 0;
              DWORD2(v191) = 0;
              v193 = 0;
              v194 = 0;
              v195 = 0;
              v196 = 0;
              v197 = 0;
              v198 = 0;
              v199 = 0;
              v200 = 0;
              v201 = 0;
              v202 = 0;
              v203 = 0;
              v204 = 0;
              v205 = 0;
              v206 = 0;
              v207 = 0;
              v208 = 0;
              v209 = 0;
              v210 = 0;
              v211 = 0;
              v212 = 0;
              v213 = 0;
              v214 = 0;
              v215 = 0;
              v219 = 0;
              v220 = 0;
              v217 = 0u;
              v218 = 0u;
              v216 = 0u;
              v221 = -1;
              v224 = 0;
              v225 = 0;
              v226 = 0;
              v227 = 0;
              v228 = 0;
              v229 = 0;
              v230 = 0;
              v231 = 0;
              v232 = 0;
              v233 = 0;
              v234 = 0;
              v222 = 0u;
              v223 = 0;
              v235 = 1;
              LOBYTE(texture[0]) = 0;
              memset(&texture[1], 0, 24);
              re::DynamicString::DynamicString((re::DynamicString *)&v154);
              v152 = v170;
              v149 = 0;
              v105 = *(objc_class **)v165;
              memcpy(v150, v167, 8 * *(_QWORD *)v165);
              v148.isa = v105;
              v150[1] = *(_OWORD *)v168;
              v150[2] = *(_OWORD *)&v168[16];
              v151 = *(_DWORD *)&v168[32];
              v106 = (CVPixelBufferRef *)a11;
              if (*(_QWORD *)(a1 + 2032) == *(_QWORD *)(a1 + 2040))
                v106 = texture;
              v17 = v102;
              v46 = populatePresentationGroup((__int128 *)&v152.value, &v148, a1, a4, a5, a6, v140, (uint64_t)&buf, (uint64_t)v106, v102, 0);
              if ((_DWORD)v46)
              {
                v107 = *re::videoLogObjects(v27);
                if (os_log_type_enabled(v107, OS_LOG_TYPE_ERROR))
                {
                  LOWORD(v187[0]) = 0;
                  _os_log_error_impl(&dword_224FE9000, v107, OS_LOG_TYPE_ERROR, "Could not populate future presentation group using future buffer group", (uint8_t *)v187, 2u);
                }
                if (v154 && (v155 & 1) != 0)
                  (*(void (**)(void))(*(_QWORD *)v154 + 40))();
                goto LABEL_47;
              }
              re::VideoPresentationQueue::push(v27, (const re::VideoPresentationGroup *)&buf);
              if (v154 && (v155 & 1) != 0)
                (*(void (**)(void))(*(_QWORD *)v154 + 40))();
              re::VideoPresentationGroup::~VideoPresentationGroup((re::VideoPresentationGroup *)&buf);
            }
LABEL_163:
            re::VideoPresentationGroup::operator=(a10, (__int128 *)v52);
            v46 = 0;
            goto LABEL_176;
          }
          v83 = 0;
          v139 = (id *)(a5 + 184);
          location = (id *)(a1 + 208);
          while (1)
          {
            v84 = *(__CVBuffer **)(v52 + 64 + 8 * v83);
            texture[0] = 0;
            v85 = (re *)re::VideoLightSpillGenerator::generate(a1 + 4752, v84, texture);
            if (!(_DWORD)v85)
              break;
            v86 = *re::videoLogObjects(v85);
            if (os_log_type_enabled(v86, OS_LOG_TYPE_ERROR))
            {
              LOWORD(buf.value) = 0;
              _os_log_error_impl(&dword_224FE9000, v86, OS_LOG_TYPE_ERROR, "Unable to generate diffuse light spill pixel buffer.", (uint8_t *)&buf, 2u);
            }
LABEL_144:
            CVPixelBufferRelease(texture[0]);
            ++v83;
            v56 = *(_QWORD *)(v52 + 48);
            if (v83 >= v56)
              goto LABEL_60;
          }
          memset(&buf, 0, sizeof(buf));
          v87 = (re *)re::VideoTextureCache::createTexturesFromPixelBuffer((re::VideoTextureCache *)(a1 + 216), texture[0], (re::VideoPixelBufferTextures *)&buf, 1);
          if ((_DWORD)v87)
          {
            v88 = *re::videoLogObjects(v87);
            if (os_log_type_enabled(v88, OS_LOG_TYPE_ERROR))
            {
              LOWORD(v172.value) = 0;
              _os_log_error_impl(&dword_224FE9000, v88, OS_LOG_TYPE_ERROR, "Unable to generate diffuse light spill texture.", (uint8_t *)&v172, 2u);
            }
LABEL_140:
            for (j = 16; j != -8; j -= 8)
            {
              if (*(CMTimeValue *)((char *)&buf.value + j))
                re::VideoObjectBase<re::VideoTextureBase,__CVBuffer *>::release((__CVBuffer **)((char *)&buf + j));
              *(CMTimeValue *)((char *)&buf.value + j) = 0;
            }
            goto LABEL_144;
          }
          v89 = texture[0];
          v172.value = (CMTimeValue)texture[0];
          CVPixelBufferRetain(texture[0]);
          re::DynamicInlineArray<REFrameAnalysisBottleneck,2ul>::ensureCapacity(*(_QWORD *)(v52 + 272), v90);
          v91 = *(_QWORD *)(v52 + 272);
          *(_QWORD *)(v52 + 288 + 8 * v91) = v89;
          *(_QWORD *)(v52 + 272) = v91 + 1;
          ++*(_DWORD *)(v52 + 280);
          re::DynamicInlineArray<re::VideoPixelBufferTextures,2ul>::add(v52 + 336, (uint64_t)&buf);
          v92 = *v139;
          v171.value = 0;
          re::VideoObject<re::VideoTextureBase>::setRef((int)&v171, (__CVBuffer **)&v171, (CVPixelBufferRef)buf.value);
          re::VideoTextureBase::metalTexture((__CVBuffer **)&v171, &v172);
          if (v171.value)
            re::VideoObjectBase<re::VideoTextureBase,__CVBuffer *>::release((__CVBuffer **)&v171);
          v171.value = 0;
          if (re::VideoDefaults::lightSpillTextureAllocatorEnabled(v93))
          {
            if (!*location)
            {
              v94 = *v139;
              v170.value = (CMTimeValue)v94;
              if (!*location)
              {
                re::ObjCObject::operator=(location, (id *)&v170);
                v94 = (id)v170.value;
              }

            }
            Width = CVPixelBufferGetWidth(texture[0]);
            Height = CVPixelBufferGetHeight(texture[0]);
            re::VideoTextureAllocator::createTextureInternal(a1 + 160, Width, Height, 115, 2, 3u, 0, 0, (unint64_t *)&v169, *(_QWORD *)(v52 + 560));
            NS::SharedPtr<MTL::Texture>::operator=((void **)&v171, (void **)&v169);
            v97 = (void *)v169.value;
            if (!v169.value)
              goto LABEL_130;
          }
          else
          {
            v98 = objc_msgSend(objc_msgSend(MEMORY[0x24BDDD740], sel_alloc), sel_init);
            objc_msgSend(v98, sel_setStorageMode_, 2);
            objc_msgSend(v98, sel_setPixelFormat_, 115);
            objc_msgSend(v98, sel_setWidth_, CVPixelBufferGetWidth(texture[0]));
            objc_msgSend(v98, sel_setHeight_, CVPixelBufferGetHeight(texture[0]));
            objc_msgSend(v98, sel_setUsage_, 3);
            objc_msgSend(v98, sel_setProtectionOptions_, *(_QWORD *)(v52 + 560));
            re::mtl::Device::makeTexture(v98, v139, &v169);
            NS::SharedPtr<MTL::Texture>::operator=((void **)&v171, (void **)&v169);
            if (v169.value)

            if (!v98)
              goto LABEL_130;
            v97 = v98;
          }

LABEL_130:
          v99 = (void *)v172.value;
          if (v171.value)
          {
            v138 = *(os_unfair_lock_s **)(a5 + 64);
            v162.value = (CMTimeValue)(id)v172.value;
            v187[0] = (id)v171.value;
            re::TextureManager::queueBlurGeneration(v138, (void **)&v162, v187, 1);
            if (v187[0])
            {

              v187[0] = 0;
            }
            if (v162.value)
            {

              v162.value = 0;
            }
            re::DynamicInlineArray<NS::SharedPtr<MTL::Texture>,2ul>::add(v52 + 400, (id)v171.value);
            if (v171.value)

          }
          if (v99)

          goto LABEL_140;
        }
        v34 = 0;
        while (1)
        {
          IOSurface = CVPixelBufferGetIOSurface((CVPixelBufferRef)v184[v34]);
          ID = IOSurfaceGetID(IOSurface);
          v33 = (re::VideoDefaults *)re::VideoPresentationQueue::front(v27, v37);
          v39 = *((_QWORD *)v33 + 3);
          if (v39 <= v34)
            break;
          if (ID != *((_DWORD *)v33 + v34 + 9))
            goto LABEL_178;
          if (++v34 >= v182)
            goto LABEL_31;
        }
        re::internal::assertLog((re::internal *)6, v38, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < m_size", "operator[]", 381, v34, v39);
        v33 = (re::VideoDefaults *)_os_crash();
        __break(1u);
LABEL_178:
        v120 = *re::videoLogObjects(v33);
        if (!os_log_type_enabled(v120, OS_LOG_TYPE_DEFAULT))
        {
LABEL_181:
          re::VideoPresentationQueue::clear(v27);
          goto LABEL_31;
        }
        LOWORD(buf.value) = 0;
        v121 = "Surface IDs changed. Clearing.";
      }
      else
      {
        v120 = *re::videoLogObjects(v33);
        if (!os_log_type_enabled(v120, OS_LOG_TYPE_DEFAULT))
          goto LABEL_181;
        LOWORD(buf.value) = 0;
        v121 = "Mismatched channel count. Clearing.";
      }
    }
    else
    {
      v31 = a7;
      v120 = *re::videoLogObjects((re *)v29);
      if (!os_log_type_enabled(v120, OS_LOG_TYPE_DEFAULT))
        goto LABEL_181;
      LOWORD(buf.value) = 0;
      v121 = "[VideoAssetUtillity]->retrievePresentationGroupForTime : : Options have changed and clearing the presentation queue";
    }
    _os_log_impl(&dword_224FE9000, v120, OS_LOG_TYPE_DEFAULT, v121, (uint8_t *)&buf, 2u);
    goto LABEL_181;
  }
LABEL_171:
  if (*(_DWORD *)(a2 + 8) == 1)
  {
LABEL_172:
    v46 = 1;
    goto LABEL_176;
  }
  v118 = *re::videoLogObjects(v22);
  if (os_log_type_enabled(v118, OS_LOG_TYPE_ERROR))
  {
    LOWORD(buf.value) = 0;
    _os_log_error_impl(&dword_224FE9000, v118, OS_LOG_TYPE_ERROR, "Video receiver sample has no pixel buffers.", (uint8_t *)&buf, 2u);
  }
  v46 = 1;
  *(_DWORD *)(a2 + 8) = 1;
LABEL_176:

  return v46;
}

void sub_225331E1C(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_guard_abort(&qword_2540FF710);

  _Unwind_Resume(a1);
}

void `anonymous namespace'::deinitLegacyBufferGroup(uint64_t a1)
{
  unint64_t v2;
  const void *v3;

  if (*(_QWORD *)a1)
  {
    v2 = 0;
    do
      CVPixelBufferRelease(*(CVPixelBufferRef *)(a1 + 8 * v2++ + 16));
    while (v2 < *(_QWORD *)a1);
  }
  *(_QWORD *)a1 = 0;
  ++*(_DWORD *)(a1 + 8);
  v3 = *(const void **)(a1 + 32);
  if (v3)
    CFRelease(v3);
  *(_QWORD *)(a1 + 32) = 0;
  *(_DWORD *)(a1 + 40) = -1;
}

CFDictionaryRef re::retrievePresentationGroupForTime(re::VideoPlaybackContext *,re::VideoObject<re::VideoReceiverBase> &,CMTime,re::VideoManager &,re::RenderManager const&,re::TargetDisplayInfoProvider const&,re::ColorManager const&,re::TextureManager const*,unsigned long long,re::VideoPresentationGroup &,re::ecs2::HDRDumpInfo &,NSObject  {objcproto17OS_dispatch_queue}*,re::FixedInlineArray<re::VideoPixelBuffers,2ul> *,BOOL)::$_0::operator()()
{
  if (*MEMORY[0x24BDDD038])
    return CFDictionaryCreate((CFAllocatorRef)*MEMORY[0x24BDBD240], MEMORY[0x24BDDD038], MEMORY[0x24BDBD270], 1, MEMORY[0x24BDBD6A0], MEMORY[0x24BDBD6B0]);
  else
    return 0;
}

uint64_t re::VideoPresentationGroup::operator=(uint64_t a1, __int128 *a2)
{
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;

  v4 = *a2;
  *(_QWORD *)(a1 + 16) = *((_QWORD *)a2 + 2);
  *(_OWORD *)a1 = v4;
  re::DynamicInlineArray<unsigned int,2ul>::operator=((unint64_t *)(a1 + 24), (unint64_t *)a2 + 3);
  if ((__int128 *)a1 == a2)
  {
    re::DynamicInlineArray<re::Vector4<float>,2ul>::operator=((uint64_t *)(a1 + 480), (uint64_t *)(a1 + 480));
  }
  else
  {
    re::DynamicInlineArray<re::VideoObject<re::VideoPixelBufferBase>,2ul>::copy((_QWORD *)(a1 + 48), (_QWORD *)a2 + 6);
    ++*(_DWORD *)(a1 + 56);
    re::DynamicInlineArray<re::VideoPixelBufferTextures,2ul>::copy((_QWORD *)(a1 + 80), (uint64_t *)a2 + 10);
    ++*(_DWORD *)(a1 + 88);
    re::DynamicInlineArray<re::VideoPixelBufferTextures,2ul>::copy((_QWORD *)(a1 + 144), (uint64_t *)a2 + 18);
    ++*(_DWORD *)(a1 + 152);
    re::DynamicInlineArray<re::VideoMetalTextures,2ul>::copy((_QWORD *)(a1 + 208), (uint64_t *)a2 + 26);
    ++*(_DWORD *)(a1 + 216);
    re::DynamicInlineArray<re::VideoObject<re::VideoPixelBufferBase>,2ul>::copy((_QWORD *)(a1 + 272), (_QWORD *)a2 + 34);
    ++*(_DWORD *)(a1 + 280);
    re::DynamicInlineArray<re::VideoObject<re::VideoPixelBufferBase>,2ul>::copy((_QWORD *)(a1 + 304), (_QWORD *)a2 + 38);
    ++*(_DWORD *)(a1 + 312);
    re::DynamicInlineArray<re::VideoPixelBufferTextures,2ul>::copy((_QWORD *)(a1 + 336), (uint64_t *)a2 + 42);
    ++*(_DWORD *)(a1 + 344);
    re::DynamicInlineArray<NS::SharedPtr<MTL::Texture>,2ul>::copy((uint64_t *)(a1 + 400), (uint64_t *)a2 + 50);
    ++*(_DWORD *)(a1 + 408);
    re::DynamicInlineArray<NS::SharedPtr<MTL::Texture>,2ul>::copy((uint64_t *)(a1 + 432), (uint64_t *)a2 + 54);
    ++*(_DWORD *)(a1 + 440);
    *(_BYTE *)(a1 + 464) = *((_BYTE *)a2 + 464);
    re::DynamicInlineArray<re::Vector4<float>,2ul>::operator=((uint64_t *)(a1 + 480), (uint64_t *)a2 + 60);
    re::DynamicInlineArray<re::VideoObject<re::VideoPixelFormatDescriptionBase>,2ul>::copy((_QWORD *)(a1 + 528), (_QWORD *)a2 + 66);
    ++*(_DWORD *)(a1 + 536);
    v5 = a2[35];
    v6 = a2[37];
    *(_OWORD *)(a1 + 576) = a2[36];
    *(_OWORD *)(a1 + 592) = v6;
    *(_OWORD *)(a1 + 560) = v5;
    v7 = a2[38];
    v8 = a2[39];
    v9 = a2[41];
    *(_OWORD *)(a1 + 640) = a2[40];
    *(_OWORD *)(a1 + 656) = v9;
    *(_OWORD *)(a1 + 608) = v7;
    *(_OWORD *)(a1 + 624) = v8;
    re::DynamicInlineArray<re::VideoObject<re::VideoPixelFormatDescriptionBase>,2ul>::copy((_QWORD *)(a1 + 672), (_QWORD *)a2 + 84);
    ++*(_DWORD *)(a1 + 680);
    re::DynamicInlineArray<re::VideoColorTags,2ul>::copy((_QWORD *)(a1 + 704), (_QWORD *)a2 + 88);
    ++*(_DWORD *)(a1 + 712);
    re::DynamicInlineArray<re::VideoColorTags,2ul>::copy((_QWORD *)(a1 + 728), (_QWORD *)a2 + 91);
    ++*(_DWORD *)(a1 + 736);
    re::DynamicInlineArray<re::SharedPtr<re::VideoHistogram>,2ul>::copy((uint64_t *)(a1 + 752), (uint64_t *)a2 + 94);
    ++*(_DWORD *)(a1 + 760);
    re::DynamicInlineArray<std::shared_ptr<std::atomic<re::VideoReturn>>,2ul>::copy((uint64_t *)(a1 + 784), (uint64_t *)a2 + 98);
    ++*(_DWORD *)(a1 + 792);
  }
  re::DynamicInlineArray<unsigned int,2ul>::operator=((unint64_t *)(a1 + 832), (unint64_t *)a2 + 104);
  *(_OWORD *)(a1 + 856) = *(__int128 *)((char *)a2 + 856);
  return a1;
}

void re::logVideoInfo(re *this, const __CFArray *a2)
{
  CFIndex Count;
  char v3;
  CFIndex v4;
  int v5;
  int v6;
  char v7;
  char v8;
  char v9;
  char v10;
  _QWORD *v11;
  _anonymous_namespace_ *ValueAtIndex;
  CMTag v13;
  CMTag v14;
  CMTag v15;
  CMTag v16;
  char v17;
  CMTag v18;
  char v19;
  int v20;
  CMTag v21;
  NSObject *v22;
  const char *v23;
  const char *v24;
  const char *v25;
  const char *v26;
  const char *v27;
  const char *v28;
  const char *v29;
  CFIndex v31;
  char v32;
  char v33;
  char Tag;
  int v35;
  int v36;
  uint8_t buf[4];
  CFIndex v38;
  __int16 v39;
  const char *v40;
  __int16 v41;
  const char *v42;
  __int16 v43;
  const char *v44;
  __int16 v45;
  const char *v46;
  __int16 v47;
  const char *v48;
  __int16 v49;
  const char *v50;
  __int16 v51;
  const char *v52;
  uint64_t v53;
  CMTag v54;

  v53 = *MEMORY[0x24BDAC8D0];
  Count = CFArrayGetCount(this);
  v31 = Count;
  if (Count < 1)
  {
    v10 = 0;
    v9 = 0;
    v8 = 0;
    v7 = 0;
    LOBYTE(v6) = 0;
    LOBYTE(v5) = 0;
    v3 = 0;
  }
  else
  {
    v3 = 0;
    v4 = 0;
    v5 = 0;
    v6 = 0;
    v7 = 0;
    v8 = 0;
    v9 = 0;
    v10 = 0;
    v11 = (_QWORD *)MEMORY[0x24BDC12A0];
    do
    {
      v36 = v5;
      ValueAtIndex = (_anonymous_namespace_ *)CFArrayGetValueAtIndex(this, v4);
      *(_QWORD *)&v54.category = v11[1];
      else
        Tag = 0;
      *(_QWORD *)&v13.category = v11[1];
      else
        v33 = 0;
      *(_QWORD *)&v14.category = v11[1];
      {
        *(_QWORD *)&v15.category = *(_QWORD *)(MEMORY[0x24BDC12E0] + 8);
      }
      else
      {
        v32 = 0;
      }
      v35 = v6;
      *(_QWORD *)&v15.category = v11[1];
      {
        *(_QWORD *)&v16.category = *(_QWORD *)(MEMORY[0x24BDC12F0] + 8);
      }
      else
      {
        v17 = 0;
      }
      *(_QWORD *)&v16.category = v11[1];
      else
        v19 = 0;
      *(_QWORD *)&v18.category = v11[1];
      if (v20)
      v3 |= Tag;
      v10 |= v33;
      v9 |= v32;
      v8 |= v17;
      v7 |= v19;
      *(_QWORD *)&v21.category = *(_QWORD *)(MEMORY[0x24BDC1298] + 8);
      v6 = v20 | v35;
      v5 = Count | v36;
      ++v4;
    }
    while (v31 != v4);
  }
  v22 = *re::videoLogObjects((re *)Count);
  if (os_log_type_enabled(v22, OS_LOG_TYPE_DEFAULT))
  {
    v23 = "✘";
    if ((v3 & 1) != 0)
      v24 = "✔";
    else
      v24 = "✘";
    *(_DWORD *)buf = 134219778;
    v38 = v31;
    if ((v10 & 1) != 0)
      v25 = "✔";
    else
      v25 = "✘";
    v39 = 2080;
    v40 = v24;
    if ((v9 & 1) != 0)
      v26 = "✔";
    else
      v26 = "✘";
    v41 = 2080;
    v42 = v25;
    if ((v8 & 1) != 0)
      v27 = "✔";
    else
      v27 = "✘";
    v43 = 2080;
    if ((v7 & 1) != 0)
      v28 = "✔";
    else
      v28 = "✘";
    v44 = v26;
    if ((v6 & 1) != 0)
      v29 = "✔";
    else
      v29 = "✘";
    v45 = 2080;
    if ((v5 & 1) != 0)
      v23 = "✔";
    v46 = v27;
    v47 = 2080;
    v48 = v28;
    v49 = 2080;
    v50 = v29;
    v51 = 2080;
    v52 = v23;
    _os_log_impl(&dword_224FE9000, v22, OS_LOG_TYPE_DEFAULT, "Data channels changed. Number of video channels: %ld. Index 1 %s. Index 2 %s. Left eye channel %s. Right eye channel %s. SBS packed %s. O/U packed %s. Metadata %s", buf, 0x52u);
  }
}

void __Block_byref_object_copy__2(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  _QWORD *v6;
  uint64_t v7;

  *(_QWORD *)(a1 + 48) = 0;
  v4 = *(_QWORD *)(a2 + 48);
  v2 = a2 + 48;
  v3 = v4;
  *(_DWORD *)(a1 + 56) = 0;
  if (v4)
  {
    v5 = (_QWORD *)(v2 + 16);
    v6 = (_QWORD *)(a1 + 64);
    v7 = 8 * v3;
    do
    {
      *v6 = 0;
      *v6++ = *v5;
      *v5++ = 0;
      v7 -= 8;
    }
    while (v7);
  }
  *(_QWORD *)(a1 + 48) = v3;
  re::DynamicInlineArray<re::VideoObject<re::VideoPixelBufferBase>,2ul>::clear(v2);
}

void ___ZN2re18dumpHDRFrameToFileERNS_18DynamicInlineArrayINS_11VideoObjectINS_20VideoPixelBufferBaseEEELm2EEERKNS0_INS_7Vector4IfEELm2EEERKNS_12ColorManagerENS_4ecs211HDRDumpInfoEdbPU28objcproto17OS_dispatch_queue8NSObject_block_invoke(_QWORD *a1)
{
  uint64_t v1;
  _QWORD *v2;
  unint64_t v3;
  __CVBuffer *v4;
  __CFString *v5;
  unint64_t v6;
  unint64_t v7;
  char *v8;
  size_t HeightOfPlane;
  size_t WidthOfPlane;
  size_t PlaneCount;
  size_t BytesPerRowOfPlane;
  void *v13;
  id v14;
  const char *v15;
  FILE *v16;
  size_t DataSize;
  void *BaseAddress;
  re *v19;
  re *v20;
  size_t v21;
  void *v22;
  OSType PixelFormatType;
  unsigned __int8 v24;
  unsigned __int8 v25;
  void *v26;
  id v27;
  const char *v28;
  FILE *v29;
  void *BaseAddressOfPlane;
  re *v31;
  void *v32;
  re *v33;
  re *v34;
  re *v35;
  NSObject *v36;
  re *v37;
  re *v38;
  NSObject *v39;
  NSObject *v40;
  NSObject *v41;
  const char *v42;
  const char *v43;
  NSObject *v44;
  id v46;
  uint64_t v47;
  char *v48;
  unint64_t v49;
  size_t v50;
  size_t v51;
  __CFString *v53;
  void *v54;
  uint8_t buf[4];
  const char *v56;
  __int16 v57;
  uint64_t v58;
  uint64_t v59;

  v59 = *MEMORY[0x24BDAC8D0];
  v1 = *(_QWORD *)(a1[4] + 8);
  if (!*(_QWORD *)(v1 + 48))
  {
LABEL_33:
    re::DynamicInlineArray<re::VideoObject<re::VideoPixelBufferBase>,2ul>::clear(v1 + 48);
    return;
  }
  v2 = a1;
  v3 = 0;
  v48 = (char *)a1 + 81;
  while (1)
  {
    v4 = *(__CVBuffer **)(v1 + 8 * v3 + 64);
    v5 = CFSTR("output");
    if (!*((_BYTE *)v2 + 112))
      v5 = CFSTR("input");
    v53 = v5;
    v6 = v2[10];
    v7 = v6 >> 1;
    if ((v6 & 1) == 0)
      v7 = v6 >> 1;
    if (v7)
    {
      v8 = v48;
      if ((v6 & 1) != 0)
        v8 = (char *)a1[11];
      objc_msgSend(MEMORY[0x24BDD17C8], "stringWithUTF8String:", v8);
      v54 = (void *)objc_claimAutoreleasedReturnValue();
    }
    else
    {
      NSTemporaryDirectory();
      v54 = (void *)objc_claimAutoreleasedReturnValue();
    }
    HeightOfPlane = CVPixelBufferGetHeightOfPlane(v4, 0);
    WidthOfPlane = CVPixelBufferGetWidthOfPlane(v4, 0);
    if (!CVPixelBufferIsPlanar(v4))
    {
      CVPixelBufferLockBaseAddress(v4, 1uLL);
      objc_msgSend(MEMORY[0x24BDD17C8], "stringWithFormat:", CFSTR("%@-width-%u-height-%u-bpr-%lu-time-%f-channel-%lu.raw"), v53, WidthOfPlane, HeightOfPlane, CVPixelBufferGetBytesPerRow(v4), a1[13], v3);
      v13 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(MEMORY[0x24BDD17C8], "stringWithFormat:", CFSTR("%@/%@"), v54, v13);
      v14 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue());
      v15 = (const char *)objc_msgSend(v14, "UTF8String");

      v16 = fopen(v15, "w+");
      if (v16)
      {
        DataSize = CVPixelBufferGetDataSize(v4);
        BaseAddress = CVPixelBufferGetBaseAddress(v4);
        v19 = (re *)fwrite(BaseAddress, DataSize, 1uLL, v16);
        if (v19 != (re *)1)
        {
          v44 = *re::videoLogObjects(v19);
          if (!os_log_type_enabled(v44, OS_LOG_TYPE_ERROR))
            goto LABEL_50;
          *(_DWORD *)buf = 136315138;
          v56 = v15;
          v43 = "[re::dumpHDRFrameToFile] Failed to write pixel buffer data to %s";
          goto LABEL_45;
        }
        v20 = (re *)fclose(v16);
        if ((_DWORD)v20)
        {
          v44 = *re::videoLogObjects(v20);
          if (!os_log_type_enabled(v44, OS_LOG_TYPE_ERROR))
            goto LABEL_50;
          *(_DWORD *)buf = 136315138;
          v56 = v15;
          v43 = "[re::dumpHDRFrameToFile] Failed to close %s";
LABEL_45:
          _os_log_error_impl(&dword_224FE9000, v44, OS_LOG_TYPE_ERROR, v43, buf, 0xCu);
          goto LABEL_50;
        }
      }
      else
      {
        v37 = (re *)re::VideoDefaults::logEnabled(0);
        if ((_DWORD)v37)
        {
          v44 = *re::videoLogObjects(v37);
          if (!os_log_type_enabled(v44, OS_LOG_TYPE_ERROR))
            goto LABEL_50;
          *(_DWORD *)buf = 136315138;
          v56 = v15;
          v43 = "[re::dumpHDRFrameToFile] Failed to open file %s";
          goto LABEL_45;
        }
      }
      v38 = (re *)CVPixelBufferUnlockBaseAddress(v4, 1uLL);
      v39 = *re::videoLogObjects(v38);
      if (os_log_type_enabled(v39, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 136315138;
        v56 = v15;
        _os_log_impl(&dword_224FE9000, v39, OS_LOG_TYPE_DEFAULT, "[re::dumpHDRFrameToFile] Dumped pixel buffer to %s", buf, 0xCu);
      }
      goto LABEL_32;
    }
    CVPixelBufferLockBaseAddress(v4, 1uLL);
    PlaneCount = CVPixelBufferGetPlaneCount(v4);
    BytesPerRowOfPlane = CVPixelBufferGetBytesPerRowOfPlane(v4, 0);
    v51 = PlaneCount < 2 ? 0 : CVPixelBufferGetBytesPerRowOfPlane(v4, 1uLL);
    v50 = CVPixelBufferGetHeightOfPlane(v4, 1uLL);
    v49 = PlaneCount;
    v21 = CVPixelBufferGetWidthOfPlane(v4, 1uLL);
    v22 = (void *)MEMORY[0x24BDD17C8];
    PixelFormatType = CVPixelBufferGetPixelFormatType(v4);
    v24 = CVPixelBufferGetPixelFormatType(v4) >> 16;
    v25 = (unsigned __int16)CVPixelBufferGetPixelFormatType(v4) >> 8;
    objc_msgSend(v22, "stringWithFormat:", CFSTR("%c%c%c%c"), HIBYTE(PixelFormatType), v24, v25, CVPixelBufferGetPixelFormatType(v4));
    v13 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x24BDD17C8], "stringWithFormat:", CFSTR("%@-fmt-%@-width-%u-height-%u-stride-%u-cwidth-%u-cheight-%u-cstride-%u-time-%f-channel-%lu.raw"), v53, v13, WidthOfPlane, HeightOfPlane, BytesPerRowOfPlane, v21, v50, v51, a1[13], v3);
    v26 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x24BDD17C8], "stringWithFormat:", CFSTR("%@/%@"), v54, v26);
    v27 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue());
    v28 = (const char *)objc_msgSend(v27, "UTF8String");

    v29 = fopen(v28, "w+");
    if (!v29)
      break;
    BaseAddressOfPlane = CVPixelBufferGetBaseAddressOfPlane(v4, 0);
    v31 = (re *)fwrite(BaseAddressOfPlane, (BytesPerRowOfPlane * HeightOfPlane), 1uLL, v29);
    if (v31 != (re *)1)
    {
      v41 = *re::videoLogObjects(v31);
      if (!os_log_type_enabled(v41, OS_LOG_TYPE_ERROR))
        goto LABEL_49;
      *(_DWORD *)buf = 136315138;
      v56 = v28;
      v42 = "[re::dumpHDRFrameToFile] Failed to write luma data to %s";
LABEL_48:
      _os_log_error_impl(&dword_224FE9000, v41, OS_LOG_TYPE_ERROR, v42, buf, 0xCu);
      goto LABEL_49;
    }
    if (v49 >= 2)
    {
      v32 = CVPixelBufferGetBaseAddressOfPlane(v4, 1uLL);
      if (v32)
      {
        v33 = (re *)fwrite(v32, (v51 * v50), 1uLL, v29);
        if (v33 != (re *)1)
        {
          v41 = *re::videoLogObjects(v33);
          if (!os_log_type_enabled(v41, OS_LOG_TYPE_ERROR))
            goto LABEL_49;
          *(_DWORD *)buf = 136315138;
          v56 = v28;
          v42 = "[re::dumpHDRFrameToFile] Failed to write chroma data to %s";
          goto LABEL_48;
        }
      }
    }
    v34 = (re *)fclose(v29);
    if ((_DWORD)v34)
    {
      v41 = *re::videoLogObjects(v34);
      if (!os_log_type_enabled(v41, OS_LOG_TYPE_ERROR))
        goto LABEL_49;
      *(_DWORD *)buf = 136315138;
      v56 = v28;
      v42 = "[re::dumpHDRFrameToFile] Failed to close %s";
      goto LABEL_48;
    }
    v35 = (re *)CVPixelBufferUnlockBaseAddress(v4, 1uLL);
    v36 = *re::videoLogObjects(v35);
    if (os_log_type_enabled(v36, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 136315138;
      v56 = v28;
      _os_log_impl(&dword_224FE9000, v36, OS_LOG_TYPE_DEFAULT, "[re::dumpHDRFrameToFile] Dumped pixel buffer to %s", buf, 0xCu);
    }

LABEL_32:
    ++v3;
    v2 = a1;
    v1 = *(_QWORD *)(a1[4] + 8);
    if (v3 >= *(_QWORD *)(v1 + 48))
      goto LABEL_33;
  }
  v40 = (id)*re::videoLogObjects(0);
  if (os_log_type_enabled(v40, OS_LOG_TYPE_ERROR))
  {
    NSTemporaryDirectory();
    v46 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue());
    v47 = objc_msgSend(v46, "UTF8String");
    *(_DWORD *)buf = 136315394;
    v56 = v28;
    v57 = 2080;
    v58 = v47;
    _os_log_error_impl(&dword_224FE9000, v40, OS_LOG_TYPE_ERROR, "[re::dumpHDRFrameToFile] Failed to open file %s, please try with this directory %s", buf, 0x16u);

  }
LABEL_49:

LABEL_50:
}

void sub_225332D9C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,void *a27)
{
  void *v27;
  void *v28;
  void *v29;
  void *v30;
  uint64_t v31;

  _Unwind_Resume(a1);
}

re::DynamicString *__copy_helper_block_ea8_40c27_ZTSN2re4ecs211HDRDumpInfoE(uint64_t a1, uint64_t a2)
{
  __int128 v2;

  v2 = *(_OWORD *)(a2 + 40);
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
  *(_OWORD *)(a1 + 40) = v2;
  return re::DynamicString::DynamicString((re::DynamicString *)(a1 + 72), (const re::DynamicString *)(a2 + 72));
}

double __destroy_helper_block_ea8_40c27_ZTSN2re4ecs211HDRDumpInfoE(uint64_t a1)
{
  uint64_t v2;
  _OWORD *v3;
  double result;

  v3 = (_OWORD *)(a1 + 72);
  v2 = *(_QWORD *)(a1 + 72);
  if (v2)
  {
    if ((*(_BYTE *)(a1 + 80) & 1) != 0)
      (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v2 + 40))(v2, *(_QWORD *)(a1 + 88));
    result = 0.0;
    *v3 = 0u;
    v3[1] = 0u;
  }
  return result;
}

void `anonymous namespace'::addFigTagGroupAndMetadata(_anonymous_namespace_ *a1)
{
  re *v2;
  int v3;
  NSObject *v4;
  re *v5;
  int v6;
  NSObject *v7;
  __int128 v8;
  re *v9;
  int v10;
  CFTypeRef cf;
  uint8_t buf[16];
  __int128 v13;
  uint64_t v14;

  v14 = *MEMORY[0x24BDAC8D0];
  cf = 0;
  v2 = (re *)FigDataChannelGroupCreate();
  if (!(_DWORD)v2)
  {
    v5 = (re *)FigDataChannelGroupAddDataChannelWithFigTags();
    if ((_DWORD)v5)
    {
      v6 = (int)v5;
      v7 = *re::videoLogObjects(v5);
      if (!os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
      {
LABEL_9:
        CFRelease(cf);
        return;
      }
      *(_DWORD *)buf = 67109120;
      *(_DWORD *)&buf[4] = v6;
    }
    else
    {
      v8 = *MEMORY[0x24BDC1290];
      *(_OWORD *)buf = *MEMORY[0x24BDC1298];
      v13 = v8;
      v9 = (re *)FigDataChannelGroupAddDataChannelWithFigTags();
      if (!(_DWORD)v9)
      {
        re::DynamicArray<re::RigDataValue *>::add(a1, &cf);
        return;
      }
      v10 = (int)v9;
      v7 = *re::videoLogObjects(v9);
      if (!os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
        goto LABEL_9;
      *(_DWORD *)buf = 67109120;
      *(_DWORD *)&buf[4] = v10;
    }
    _os_log_error_impl(&dword_224FE9000, v7, OS_LOG_TYPE_ERROR, "Failed to add a FigTag collection to channel group (error: %d).", buf, 8u);
    goto LABEL_9;
  }
  v3 = (int)v2;
  v4 = *re::videoLogObjects(v2);
  if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)buf = 67109120;
    *(_DWORD *)&buf[4] = v3;
    _os_log_error_impl(&dword_224FE9000, v4, OS_LOG_TYPE_ERROR, "Failed to create Fig data channel group (error: %d).", buf, 8u);
  }
}

void `anonymous namespace'::addFigTagGroup(_anonymous_namespace_ *a1)
{
  re *v2;
  int v3;
  NSObject *v4;
  re *v5;
  int v6;
  NSObject *v7;
  CFTypeRef cf;
  uint8_t buf[4];
  int v10;
  uint64_t v11;

  v11 = *MEMORY[0x24BDAC8D0];
  cf = 0;
  v2 = (re *)FigDataChannelGroupCreate();
  if ((_DWORD)v2)
  {
    v3 = (int)v2;
    v4 = *re::videoLogObjects(v2);
    if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 67109120;
      v10 = v3;
      _os_log_error_impl(&dword_224FE9000, v4, OS_LOG_TYPE_ERROR, "Failed to create Fig data channel group (error: %d).", buf, 8u);
    }
  }
  else
  {
    v5 = (re *)FigDataChannelGroupAddDataChannelWithFigTags();
    if ((_DWORD)v5)
    {
      v6 = (int)v5;
      v7 = *re::videoLogObjects(v5);
      if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 67109120;
        v10 = v6;
        _os_log_error_impl(&dword_224FE9000, v7, OS_LOG_TYPE_ERROR, "Failed to add a FigTag collection to channel group (error: %d).", buf, 8u);
      }
      CFRelease(cf);
    }
    else
    {
      re::DynamicArray<re::RigDataValue *>::add(a1, &cf);
    }
  }
}

void re::DynamicInlineArray<re::VideoPixelBufferTextures,2ul>::clear(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t i;

  v2 = a1 + 16;
  if (*(_QWORD *)a1)
  {
    v3 = v2 + 24 * *(_QWORD *)a1;
    v4 = a1;
    do
    {
      v2 += 24;
      for (i = 32; i != 8; i -= 8)
      {
        if (*(_QWORD *)(v4 + i))
          re::VideoObjectBase<re::VideoTextureBase,__CVBuffer *>::release((__CVBuffer **)(v4 + i));
        *(_QWORD *)(v4 + i) = 0;
      }
      v4 += 24;
    }
    while (v2 != v3);
  }
  *(_QWORD *)a1 = 0;
  ++*(_DWORD *)(a1 + 8);
}

void re::DynamicInlineArray<NS::SharedPtr<MTL::Texture>,2ul>::clear(uint64_t a1)
{
  id *v2;
  uint64_t v3;

  v2 = (id *)(a1 + 16);
  if (*(_QWORD *)a1)
  {
    v3 = 8 * *(_QWORD *)a1;
    do
    {
      if (*v2)
      {

        *v2 = 0;
      }
      ++v2;
      v3 -= 8;
    }
    while (v3);
  }
  *(_QWORD *)a1 = 0;
  ++*(_DWORD *)(a1 + 8);
}

uint64_t *re::DynamicInlineArray<__CVBuffer *,2ul>::operator=(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3;
  unint64_t v4;
  _QWORD *v5;
  uint64_t *v6;
  uint64_t *v7;

  if (a1 != a2)
  {
    v3 = *a2;
    v4 = *a1;
    if (*a2 >= (unint64_t)*a1)
    {
      v5 = a2 + 2;
      v6 = &a2[v4 + 2];
      v7 = a1 + 2;
      if (v4)
        memmove(a1 + 2, a2 + 2, 8 * v4);
      memcpy(&v7[v4], v6, (char *)&v5[v3] - (char *)v6);
    }
    else if (v3)
    {
      memmove(a1 + 2, a2 + 2, 8 * v3);
    }
    *a1 = v3;
    ++*((_DWORD *)a1 + 2);
  }
  return a1;
}

unint64_t *re::DynamicInlineArray<__CVBuffer *,2ul>::move(unint64_t *result, unint64_t *a2)
{
  unint64_t *v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  _QWORD *v8;

  v3 = result;
  v4 = *a2;
  v5 = *result;
  if (*a2 >= *result)
  {
    v6 = (uint64_t *)(a2 + 2);
    v7 = (uint64_t)&a2[v5 + 2];
    v8 = result + 2;
    if (v5)
      memmove(result + 2, a2 + 2, 8 * v5);
    result = (unint64_t *)memcpy(&v8[v5], &a2[v5 + 2], (size_t)&v6[v4] - v7);
  }
  else if (v4)
  {
    result = (unint64_t *)memmove(result + 2, a2 + 2, 8 * v4);
  }
  *v3 = v4;
  *a2 = 0;
  ++*((_DWORD *)a2 + 2);
  return result;
}

void re::VideoPresentationGroup::~VideoPresentationGroup(re::VideoPresentationGroup *this)
{
  uint64_t v2;
  char *v3;
  uint64_t v4;

  re::deinitVideoPresentationGroup((uint64_t)this);
  *((_QWORD *)this + 104) = 0;
  ++*((_DWORD *)this + 210);
  v2 = *((_QWORD *)this + 98);
  if (v2)
  {
    v3 = (char *)this + 800;
    v4 = 16 * v2;
    do
    {
      v3 = (char *)(std::shared_ptr<re::AssetManager>::~shared_ptr[abi:nn180100]((uint64_t)v3) + 16);
      v4 -= 16;
    }
    while (v4);
  }
  *((_QWORD *)this + 98) = 0;
  ++*((_DWORD *)this + 198);
  re::DynamicInlineArray<re::SharedPtr<re::VideoHistogram>,2ul>::clear((uint64_t)this + 752);
  *((_QWORD *)this + 91) = 0;
  ++*((_DWORD *)this + 184);
  *((_QWORD *)this + 88) = 0;
  ++*((_DWORD *)this + 178);
  re::DynamicInlineArray<re::VideoObject<re::VideoPixelFormatDescriptionBase>,2ul>::clear((uint64_t)this + 672);
  re::DynamicInlineArray<re::VideoObject<re::VideoPixelFormatDescriptionBase>,2ul>::clear((uint64_t)this + 528);
  *((_QWORD *)this + 60) = 0;
  ++*((_DWORD *)this + 122);
  re::DynamicInlineArray<NS::SharedPtr<MTL::Texture>,2ul>::clear((uint64_t)this + 432);
  re::DynamicInlineArray<NS::SharedPtr<MTL::Texture>,2ul>::clear((uint64_t)this + 400);
  re::DynamicInlineArray<re::VideoPixelBufferTextures,2ul>::clear((uint64_t)this + 336);
  re::DynamicInlineArray<re::VideoObject<re::VideoPixelBufferBase>,2ul>::clear((uint64_t)this + 304);
  re::DynamicInlineArray<re::VideoObject<re::VideoPixelBufferBase>,2ul>::clear((uint64_t)this + 272);
  re::DynamicInlineArray<re::VideoMetalTextures,2ul>::clear((uint64_t)this + 208);
  re::DynamicInlineArray<re::VideoPixelBufferTextures,2ul>::clear((uint64_t)this + 144);
  re::DynamicInlineArray<re::VideoPixelBufferTextures,2ul>::clear((uint64_t)this + 80);
  re::DynamicInlineArray<re::VideoObject<re::VideoPixelBufferBase>,2ul>::clear((uint64_t)this + 48);
  *((_QWORD *)this + 3) = 0;
  ++*((_DWORD *)this + 8);
}

void sub_225333518(_Unwind_Exception *a1)
{
  uint64_t v1;

  *(_QWORD *)(v1 + 832) = 0;
  ++*(_DWORD *)(v1 + 840);
  re::DynamicInlineArray<std::shared_ptr<std::atomic<re::VideoReturn>>,2ul>::~DynamicInlineArray((uint64_t *)(v1 + 784));
  re::DynamicInlineArray<re::SharedPtr<re::VideoHistogram>,2ul>::clear(v1 + 752);
  *(_QWORD *)(v1 + 728) = 0;
  ++*(_DWORD *)(v1 + 736);
  *(_QWORD *)(v1 + 704) = 0;
  ++*(_DWORD *)(v1 + 712);
  re::DynamicInlineArray<re::VideoObject<re::VideoPixelFormatDescriptionBase>,2ul>::clear(v1 + 672);
  re::DynamicInlineArray<re::VideoObject<re::VideoPixelFormatDescriptionBase>,2ul>::clear(v1 + 528);
  *(_QWORD *)(v1 + 480) = 0;
  ++*(_DWORD *)(v1 + 488);
  re::DynamicInlineArray<NS::SharedPtr<MTL::Texture>,2ul>::clear(v1 + 432);
  re::DynamicInlineArray<NS::SharedPtr<MTL::Texture>,2ul>::clear(v1 + 400);
  re::DynamicInlineArray<re::VideoPixelBufferTextures,2ul>::clear(v1 + 336);
  re::DynamicInlineArray<re::VideoObject<re::VideoPixelBufferBase>,2ul>::clear(v1 + 304);
  re::DynamicInlineArray<re::VideoObject<re::VideoPixelBufferBase>,2ul>::clear(v1 + 272);
  re::DynamicInlineArray<re::VideoMetalTextures,2ul>::clear(v1 + 208);
  re::DynamicInlineArray<re::VideoPixelBufferTextures,2ul>::clear(v1 + 144);
  re::DynamicInlineArray<re::VideoPixelBufferTextures,2ul>::clear(v1 + 80);
  re::DynamicInlineArray<re::VideoObject<re::VideoPixelBufferBase>,2ul>::clear(v1 + 48);
  *(_QWORD *)(v1 + 24) = 0;
  ++*(_DWORD *)(v1 + 32);
  _Unwind_Resume(a1);
}

uint64_t *re::DynamicInlineArray<std::shared_ptr<std::atomic<re::VideoReturn>>,2ul>::~DynamicInlineArray(uint64_t *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v4 = *a1;
  v2 = (uint64_t)(a1 + 2);
  v3 = v4;
  if (v4)
  {
    v5 = 16 * v3;
    do
    {
      v2 = std::shared_ptr<re::AssetManager>::~shared_ptr[abi:nn180100](v2) + 16;
      v5 -= 16;
    }
    while (v5);
  }
  *a1 = 0;
  ++*((_DWORD *)a1 + 2);
  return a1;
}

unint64_t *re::DynamicInlineArray<unsigned int,2ul>::operator=(unint64_t *a1, unint64_t *a2)
{
  unint64_t v3;
  unint64_t v4;
  char *v5;
  char *v6;
  uint64_t v7;

  if (a1 != a2)
  {
    v3 = *a2;
    v4 = *a1;
    if (*a2 >= *a1)
    {
      v5 = (char *)a2 + 12;
      v6 = (char *)a2 + 4 * v4 + 12;
      v7 = (uint64_t)a1 + 12;
      if (v4)
        memmove((char *)a1 + 12, (char *)a2 + 12, 4 * v4);
      memcpy((void *)(v7 + 4 * v4), v6, &v5[4 * v3] - v6);
    }
    else if (v3)
    {
      memmove((char *)a1 + 12, (char *)a2 + 12, 4 * v3);
    }
    *a1 = v3;
    ++*((_DWORD *)a1 + 2);
  }
  return a1;
}

uint64_t *re::DynamicInlineArray<re::Vector4<float>,2ul>::operator=(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3;
  unint64_t v4;
  _QWORD *v5;
  uint64_t *v6;
  uint64_t *v7;

  if (a1 != a2)
  {
    v3 = *a2;
    v4 = *a1;
    if (*a2 >= (unint64_t)*a1)
    {
      v5 = a2 + 2;
      v6 = &a2[2 * v4 + 2];
      v7 = a1 + 2;
      if (v4)
        memmove(a1 + 2, a2 + 2, 16 * v4);
      memcpy(&v7[2 * v4], v6, (char *)&v5[2 * v3] - (char *)v6);
    }
    else if (v3)
    {
      memmove(a1 + 2, a2 + 2, 16 * v3);
    }
    *a1 = v3;
    ++*((_DWORD *)a1 + 2);
  }
  return a1;
}

void re::DynamicInlineArray<re::VideoPixelBufferTextures,2ul>::copy(_QWORD *a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t j;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t i;

  v3 = (uint64_t)(a2 + 2);
  v4 = *a2;
  v5 = (uint64_t)(a1 + 2);
  if ((unint64_t)*a2 >= *a1)
  {
    std::__unwrap_and_dispatch[abi:nn180100]<std::__overload<std::__copy_loop<std::_ClassicAlgPolicy>,std::__copy_trivial>,re::VideoPixelBufferTextures const*,re::VideoPixelBufferTextures const*,re::VideoPixelBufferTextures*,0>(v3, v3 + 24 * *a1, v5);
    if (*a1 != v4)
    {
      v10 = v3 + 24 * v4;
      v11 = v3 + 24 * *a1;
      v12 = &a1[3 * *a1];
      do
      {
        for (i = 0; i != 3; ++i)
        {
          v12[i + 2] = 0;
          re::VideoObject<re::VideoTextureBase>::setRef((_DWORD)v12 + i * 8 + 16, (__CVBuffer **)&v12[i + 2], *(CVPixelBufferRef *)(v11 + i * 8));
        }
        v11 += 24;
        v12 += 3;
      }
      while (v11 != v10);
    }
  }
  else
  {
    std::__unwrap_and_dispatch[abi:nn180100]<std::__overload<std::__copy_loop<std::_ClassicAlgPolicy>,std::__copy_trivial>,re::VideoPixelBufferTextures const*,re::VideoPixelBufferTextures const*,re::VideoPixelBufferTextures*,0>(v3, v3 + 24 * v4, v5);
    if (v4 != *a1)
    {
      v6 = v5 + 24 * *a1;
      v7 = v5 + 24 * v4;
      v8 = &a1[3 * v4];
      do
      {
        v7 += 24;
        for (j = 4; j != 1; --j)
        {
          if (v8[j])
            re::VideoObjectBase<re::VideoTextureBase,__CVBuffer *>::release((__CVBuffer **)&v8[j]);
          v8[j] = 0;
        }
        v8 += 3;
      }
      while (v7 != v6);
    }
  }
  *a1 = v4;
}

void sub_225333890(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  uint64_t v2;
  __CVBuffer **v4;
  uint64_t v5;

  if (v1)
  {
    v4 = (__CVBuffer **)(v2 + 8);
    v5 = -v1;
    do
    {
      if (*v4)
        re::VideoObjectBase<re::VideoTextureBase,__CVBuffer *>::release(v4);
      *v4-- = 0;
      v5 += 8;
    }
    while (v5);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::__unwrap_and_dispatch[abi:nn180100]<std::__overload<std::__copy_loop<std::_ClassicAlgPolicy>,std::__copy_trivial>,re::VideoPixelBufferTextures const*,re::VideoPixelBufferTextures const*,re::VideoPixelBufferTextures*,0>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t i;

  v4 = a1;
  if (a1 != a2)
  {
    do
    {
      for (i = 0; i != 24; i += 8)
        re::VideoObject<re::VideoTextureBase>::setRef(a3 + i, (__CVBuffer **)(a3 + i), *(CVPixelBufferRef *)(v4 + i));
      v4 += 24;
      a3 += 24;
    }
    while (v4 != a2);
    return a2;
  }
  return v4;
}

void re::VideoObject<re::VideoTextureBase>::setRef(int a1, __CVBuffer **a2, CVPixelBufferRef texture)
{
  if (*a2)
    re::VideoObjectBase<re::VideoTextureBase,__CVBuffer *>::release(a2);
  *a2 = texture;
  if (texture)
    CVPixelBufferRetain(texture);
}

void re::DynamicInlineArray<re::VideoMetalTextures,2ul>::copy(_QWORD *a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t j;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t i;

  v3 = (uint64_t)(a2 + 2);
  v4 = *a2;
  v5 = (uint64_t)(a1 + 2);
  if ((unint64_t)*a2 >= *a1)
  {
    std::__unwrap_and_dispatch[abi:nn180100]<std::__overload<std::__copy_loop<std::_ClassicAlgPolicy>,std::__copy_trivial>,re::VideoMetalTextures const*,re::VideoMetalTextures const*,re::VideoMetalTextures*,0>(v3, v3 + 24 * *a1, v5);
    if (*a1 != v4)
    {
      v11 = v3 + 24 * v4;
      v12 = v3 + 24 * *a1;
      v13 = v5 + 24 * *a1;
      do
      {
        for (i = 0; i != 24; i += 8)
          *(_QWORD *)(v13 + i) = *(id *)(v12 + i);
        v12 += 24;
        v13 += 24;
      }
      while (v12 != v11);
    }
  }
  else
  {
    std::__unwrap_and_dispatch[abi:nn180100]<std::__overload<std::__copy_loop<std::_ClassicAlgPolicy>,std::__copy_trivial>,re::VideoMetalTextures const*,re::VideoMetalTextures const*,re::VideoMetalTextures*,0>(v3, v3 + 24 * v4, v5);
    if (v4 != *a1)
    {
      v6 = v5 + 24 * *a1;
      v7 = v5 + 24 * v4;
      v8 = &a1[3 * v4];
      do
      {
        v7 += 24;
        for (j = 4; j != 1; --j)
        {
          v10 = (void *)v8[j];
          if (v10)
          {

            v8[j] = 0;
          }
        }
        v8 += 3;
      }
      while (v7 != v6);
    }
  }
  *a1 = v4;
}

uint64_t std::__unwrap_and_dispatch[abi:nn180100]<std::__overload<std::__copy_loop<std::_ClassicAlgPolicy>,std::__copy_trivial>,re::VideoMetalTextures const*,re::VideoMetalTextures const*,re::VideoMetalTextures*,0>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t i;

  v4 = a1;
  if (a1 != a2)
  {
    do
    {
      for (i = 0; i != 24; i += 8)
        NS::SharedPtr<MTL::Texture>::operator=((void **)(a3 + i), (void **)(v4 + i));
      v4 += 24;
      a3 += 24;
    }
    while (v4 != a2);
    return a2;
  }
  return v4;
}

void re::DynamicInlineArray<NS::SharedPtr<MTL::Texture>,2ul>::copy(uint64_t *a1, uint64_t *a2)
{
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t i;
  id *v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  void **v12;
  _QWORD *v13;
  uint64_t v14;
  void *v15;

  v3 = a2 + 2;
  v4 = *a2;
  v6 = a1 + 2;
  v5 = *a1;
  if (*a2 >= (unint64_t)*a1)
  {
    if (v5)
    {
      v10 = 0;
      v11 = 8 * v5;
      do
      {
        NS::SharedPtr<MTL::Texture>::operator=((void **)&a1[v10 / 8 + 2], (void **)&v3[v10 / 8]);
        v10 += 8;
      }
      while (v11 != v10);
      v5 = *a1;
    }
    if (v5 != v4)
    {
      v12 = (void **)&v3[v5];
      v13 = &v6[v5];
      v14 = 8 * v4 - 8 * v5;
      do
      {
        v15 = *v12++;
        *v13++ = v15;
        v14 -= 8;
      }
      while (v14);
    }
  }
  else
  {
    if (v4)
    {
      for (i = 0; i != v4; ++i)
        NS::SharedPtr<MTL::Texture>::operator=((void **)&a1[i + 2], (void **)&v3[i]);
      v5 = *a1;
    }
    if (v4 != v5)
    {
      v8 = (id *)&v6[v4];
      v9 = 8 * v5 - 8 * v4;
      do
      {
        if (*v8)
        {

          *v8 = 0;
        }
        ++v8;
        v9 -= 8;
      }
      while (v9);
    }
  }
  *a1 = v4;
}

void re::DynamicInlineArray<re::VideoObject<re::VideoPixelFormatDescriptionBase>,2ul>::copy(_QWORD *a1, _QWORD *a2)
{
  const void **v3;
  uint64_t v4;
  const void **v5;
  const void **v6;
  uint64_t v7;
  uint64_t v8;
  const void **v9;
  const void **v10;
  const void **v11;
  uint64_t v12;
  const void *v13;

  v3 = (const void **)(a2 + 2);
  v4 = *a2;
  v5 = (const void **)(a1 + 2);
  if (*a2 >= *a1)
  {
    std::__unwrap_and_dispatch[abi:nn180100]<std::__overload<std::__copy_loop<std::_ClassicAlgPolicy>,std::__copy_trivial>,re::VideoObject<re::VideoPixelFormatDescriptionBase> const*,re::VideoObject<re::VideoPixelFormatDescriptionBase> const*,re::VideoObject<re::VideoPixelFormatDescriptionBase>*,0>(v3, &v3[*a1], v5);
    v8 = *a1;
    if (*a1 != v4)
    {
      v9 = &v3[v8];
      v10 = &v5[v8];
      v11 = v10;
      v12 = 8 * v4 - 8 * v8;
      do
      {
        *v11++ = 0;
        v13 = *v9++;
        re::VideoObject<re::VideoColorTransformBase>::setRef((int)v10, v10, v13);
        v10 = v11;
        v12 -= 8;
      }
      while (v12);
    }
  }
  else
  {
    std::__unwrap_and_dispatch[abi:nn180100]<std::__overload<std::__copy_loop<std::_ClassicAlgPolicy>,std::__copy_trivial>,re::VideoObject<re::VideoPixelFormatDescriptionBase> const*,re::VideoObject<re::VideoPixelFormatDescriptionBase> const*,re::VideoObject<re::VideoPixelFormatDescriptionBase>*,0>(v3, &v3[v4], v5);
    if (v4 != *a1)
    {
      v6 = &v5[v4];
      v7 = 8 * *a1 - 8 * v4;
      do
      {
        if (*v6)
          re::VideoObjectBase<re::VideoColorTransformBase,__CFArray const*>::release(v6);
        *v6++ = 0;
        v7 -= 8;
      }
      while (v7);
    }
  }
  *a1 = v4;
}

const void **std::__unwrap_and_dispatch[abi:nn180100]<std::__overload<std::__copy_loop<std::_ClassicAlgPolicy>,std::__copy_trivial>,re::VideoObject<re::VideoPixelFormatDescriptionBase> const*,re::VideoObject<re::VideoPixelFormatDescriptionBase> const*,re::VideoObject<re::VideoPixelFormatDescriptionBase>*,0>(const void **a1, const void **a2, const void **a3)
{
  const void **v4;
  const void *v6;

  v4 = a1;
  if (a1 != a2)
  {
    do
    {
      v6 = *v4++;
      re::VideoObject<re::VideoColorTransformBase>::setRef((int)a3, a3, v6);
      ++a3;
    }
    while (v4 != a2);
    return a2;
  }
  return v4;
}

_QWORD *re::DynamicInlineArray<re::VideoColorTags,2ul>::copy(_QWORD *result, _QWORD *a2)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  char *v7;
  char *v8;

  v2 = result;
  v3 = *a2;
  v4 = *result;
  if (*a2 >= *result)
  {
    v5 = (char *)a2 + 12;
    v6 = 3 * v4;
    v7 = (char *)a2 + 3 * v4 + 12;
    v8 = (char *)result + 12;
    if (v4)
      memmove((char *)result + 12, (char *)a2 + 12, 3 * v4);
    result = memcpy(&v8[v6], v7, &v5[3 * v3] - v7);
  }
  else if (v3)
  {
    result = memmove((char *)result + 12, (char *)a2 + 12, 3 * v3);
  }
  *v2 = v3;
  return result;
}

void re::DynamicInlineArray<re::SharedPtr<re::VideoHistogram>,2ul>::copy(uint64_t *a1, uint64_t *a2)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  id v13;

  v3 = a2 + 2;
  v4 = *a2;
  v5 = a1 + 2;
  if (*a2 >= (unint64_t)*a1)
  {
    std::__unwrap_and_dispatch[abi:nn180100]<std::__overload<std::__copy_loop<std::_ClassicAlgPolicy>,std::__copy_trivial>,re::SharedPtr<re::VideoHistogram> const*,re::SharedPtr<re::VideoHistogram> const*,re::SharedPtr<re::VideoHistogram>*,0>(v3, &v3[*a1], v5);
    v8 = *a1;
    if (*a1 != v4)
    {
      v9 = &v3[v8];
      v10 = &v5[v8];
      v11 = 8 * v4 - 8 * v8;
      do
      {
        v12 = *v9;
        *v10 = *v9;
        if (v12)
          v13 = (id)(v12 + 8);
        ++v9;
        ++v10;
        v11 -= 8;
      }
      while (v11);
    }
  }
  else
  {
    std::__unwrap_and_dispatch[abi:nn180100]<std::__overload<std::__copy_loop<std::_ClassicAlgPolicy>,std::__copy_trivial>,re::SharedPtr<re::VideoHistogram> const*,re::SharedPtr<re::VideoHistogram> const*,re::SharedPtr<re::VideoHistogram>*,0>(v3, &v3[v4], v5);
    if (v4 != *a1)
    {
      v6 = &v5[v4];
      v7 = 8 * *a1 - 8 * v4;
      do
      {
        if (*v6)
        {

          *v6 = 0;
        }
        ++v6;
        v7 -= 8;
      }
      while (v7);
    }
  }
  *a1 = v4;
}

uint64_t *std::__unwrap_and_dispatch[abi:nn180100]<std::__overload<std::__copy_loop<std::_ClassicAlgPolicy>,std::__copy_trivial>,re::SharedPtr<re::VideoHistogram> const*,re::SharedPtr<re::VideoHistogram> const*,re::SharedPtr<re::VideoHistogram>*,0>(uint64_t *a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t *v4;
  uint64_t v6;

  v4 = a1;
  if (a1 != a2)
  {
    do
    {
      v6 = *v4++;
      re::SharedPtr<re::SkeletalPoseJointDefinition>::reset(a3++, v6);
    }
    while (v4 != a2);
    return a2;
  }
  return v4;
}

uint64_t *re::DynamicInlineArray<std::shared_ptr<std::atomic<re::VideoReturn>>,2ul>::copy(uint64_t *result, uint64_t *a2)
{
  uint64_t *v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  _QWORD *v15;
  uint64_t v16;
  unint64_t *v17;
  unint64_t v18;

  v2 = result;
  v3 = a2 + 2;
  v4 = *a2;
  v6 = result + 2;
  v5 = *result;
  if (*a2 >= (unint64_t)*result)
  {
    if (v5)
    {
      v10 = 0;
      v11 = 16 * v5;
      do
      {
        v12 = v10 + 16;
        result = std::shared_ptr<std::atomic<re::VideoReturn>>::operator=[abi:nn180100]((uint64_t *)((char *)v2 + v10 + 16), (_QWORD *)((char *)v3 + v10));
        v10 = v12;
      }
      while (v11 != v12);
      v13 = *v2;
    }
    else
    {
      v13 = 0;
    }
    if (v13 != v4)
    {
      v14 = &v3[2 * v13];
      v15 = &v6[2 * v13];
      do
      {
        v16 = v14[1];
        *v15 = *v14;
        v15[1] = v16;
        if (v16)
        {
          v17 = (unint64_t *)(v16 + 8);
          do
            v18 = __ldxr(v17);
          while (__stxr(v18 + 1, v17));
        }
        v14 += 2;
        v15 += 2;
      }
      while (v14 != &v3[2 * v4]);
    }
  }
  else
  {
    if (v4)
    {
      v7 = 0;
      do
      {
        v8 = v7 + 16;
        result = std::shared_ptr<std::atomic<re::VideoReturn>>::operator=[abi:nn180100]((uint64_t *)((char *)v2 + v7 + 16), (_QWORD *)((char *)v3 + v7));
        v7 = v8;
      }
      while (16 * v4 != v8);
      v5 = *v2;
    }
    if (v4 != v5)
    {
      result = &v6[2 * v4];
      v9 = 16 * v5 - 16 * v4;
      do
      {
        result = (uint64_t *)(std::shared_ptr<re::AssetManager>::~shared_ptr[abi:nn180100]((uint64_t)result) + 16);
        v9 -= 16;
      }
      while (v9);
    }
  }
  *v2 = v4;
  return result;
}

_QWORD *std::shared_ptr<std::atomic<re::VideoReturn>>::operator=[abi:nn180100](_QWORD *a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;

  v4 = *a2;
  v3 = a2[1];
  if (v3)
  {
    v5 = (unint64_t *)(v3 + 8);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  v7 = (std::__shared_weak_count *)a1[1];
  *a1 = v4;
  a1[1] = v3;
  if (v7)
  {
    p_shared_owners = (unint64_t *)&v7->__shared_owners_;
    do
      v9 = __ldaxr(p_shared_owners);
    while (__stlxr(v9 - 1, p_shared_owners));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
  return a1;
}

uint64_t `anonymous namespace'::findTag(_anonymous_namespace_ *this, const OpaqueCMTagCollection *a2)
{
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  uint64_t v19;

  v19 = *MEMORY[0x24BDAC8D0];
  v17 = 0u;
  v18 = 0u;
  v15 = 0u;
  v16 = 0u;
  v13 = 0u;
  v14 = 0u;
  v11 = 0u;
  v12 = 0u;
  v9 = 0u;
  v10 = 0u;
  v7 = 0u;
  v8 = 0u;
  v5 = 0u;
  v6 = 0u;
  v3 = 0u;
  v4 = 0u;
  if (MEMORY[0x24BDC0A28])
    FigTagCollectionGetTagsWithCategory();
  return 0;
}

uint64_t `anonymous namespace'::findTag(_anonymous_namespace_ *this, const OpaqueCMTagCollection *a2, unsigned int a3, CMTag a4)
{
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  uint64_t v21;

  v21 = *MEMORY[0x24BDAC8D0];
  v19 = 0u;
  v20 = 0u;
  v17 = 0u;
  v18 = 0u;
  v15 = 0u;
  v16 = 0u;
  v13 = 0u;
  v14 = 0u;
  v11 = 0u;
  v12 = 0u;
  v9 = 0u;
  v10 = 0u;
  v7 = 0u;
  v8 = 0u;
  v5 = 0u;
  v6 = 0u;
  if (MEMORY[0x24BDC0A28])
    FigTagCollectionGetTagsWithCategory();
  return 0;
}

double re::HashTable<re::VideoPixelBufferPoolConfiguration,std::unique_ptr<re::VideoPixelBufferPool,std::function<void ()(re::VideoPixelBufferPool*)>>,re::Hash<re::VideoPixelBufferPoolConfiguration>,re::EqualTo<re::VideoPixelBufferPoolConfiguration>,true,false>::deinit(uint64_t *a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t i;
  uint64_t v6;
  int v7;
  double result;

  v2 = *a1;
  if (v2)
  {
    v3 = *((unsigned int *)a1 + 8);
    if ((_DWORD)v3)
    {
      v4 = 0;
      for (i = 0; i < v3; ++i)
      {
        v6 = a1[2] + v4;
        v7 = *(_DWORD *)(v6 + 8);
        if (v7 < 0)
        {
          *(_DWORD *)(v6 + 8) = v7 & 0x7FFFFFFF;
          std::unique_ptr<re::RigHierarchy,std::function<void ()(re::RigHierarchy*)>>::~unique_ptr[abi:nn180100]((uint64_t *)(v6 + 56));
          v3 = *((unsigned int *)a1 + 8);
        }
        v4 += 96;
      }
      v2 = *a1;
    }
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v2 + 40))(v2, a1[1]);
    *((_DWORD *)a1 + 8) = 0;
    *(_OWORD *)a1 = 0u;
    *((_OWORD *)a1 + 1) = 0u;
    *(_QWORD *)&result = 0x7FFFFFFFLL;
    *(uint64_t *)((char *)a1 + 36) = 0x7FFFFFFFLL;
  }
  return result;
}

uint64_t re::DynamicInlineArray<__CVBuffer *,2ul>::ensureCapacity(_QWORD *a1, uint64_t a2)
{
  uint64_t result;

  if (*a1 <= 1uLL)
    return 1;
  re::internal::assertLog((re::internal *)4, a2, "assertion failure: '%s' (%s:line %i) Capacity limit reached. DynamicInlineArray<T,N> cannot be resized.", "false", "ensureCapacity", 277);
  result = _os_crash();
  __break(1u);
  return result;
}

void re::DynamicInlineArray<re::VideoHDRConfig,2ul>::clear(uint64_t a1)
{
  uint64_t v2;
  const void **v3;

  if (*(_QWORD *)a1)
  {
    v2 = 80 * *(_QWORD *)a1;
    v3 = (const void **)(a1 + 32);
    do
    {
      if (*v3)
        re::VideoObjectBase<re::VideoColorTransformBase,__CFArray const*>::release(v3);
      *v3 = 0;
      if (*(v3 - 1))
        re::VideoObjectBase<re::VideoColorTransformBase,__CFArray const*>::release(v3 - 1);
      *(v3 - 1) = 0;
      if (*(v3 - 2))
        re::VideoObjectBase<re::VideoColorTransformBase,__CFArray const*>::release(v3 - 2);
      *(v3 - 2) = 0;
      v3 += 10;
      v2 -= 80;
    }
    while (v2);
  }
  *(_QWORD *)a1 = 0;
  ++*(_DWORD *)(a1 + 8);
}

void re::DynamicInlineArray<re::VideoTransformSurfaceConfig,2ul>::clear(uint64_t a1)
{
  uint64_t v2;
  const void **v3;

  if (*(_QWORD *)a1)
  {
    v2 = 24 * *(_QWORD *)a1;
    v3 = (const void **)(a1 + 24);
    do
    {
      if (*v3)
        re::VideoObjectBase<re::VideoColorTransformBase,__CFArray const*>::release(v3);
      *v3 = 0;
      if (*(v3 - 1))
        re::VideoObjectBase<re::VideoColorTransformBase,__CFArray const*>::release(v3 - 1);
      *(v3 - 1) = 0;
      v3 += 3;
      v2 -= 24;
    }
    while (v2);
  }
  *(_QWORD *)a1 = 0;
  ++*(_DWORD *)(a1 + 8);
}

void re::DynamicInlineArray<re::VideoPSEConfig,2ul>::clear(uint64_t a1)
{
  uint64_t v2;
  const void **v3;
  std::__shared_weak_count *v4;

  if (*(_QWORD *)a1)
  {
    v2 = 48 * *(_QWORD *)a1;
    v3 = (const void **)(a1 + 48);
    do
    {
      if (*v3)
        re::VideoObjectBase<re::VideoColorTransformBase,__CFArray const*>::release(v3);
      *v3 = 0;
      if (*(v3 - 1))
        re::VideoObjectBase<re::VideoColorTransformBase,__CFArray const*>::release(v3 - 1);
      *(v3 - 1) = 0;
      v4 = (std::__shared_weak_count *)*(v3 - 3);
      if (v4)
        std::__shared_weak_count::__release_weak(v4);
      v3 += 6;
      v2 -= 48;
    }
    while (v2);
  }
  *(_QWORD *)a1 = 0;
  ++*(_DWORD *)(a1 + 8);
}

void re::DynamicInlineArray<re::VideoHistogramConfig,2ul>::clear(id *location)
{
  id *v2;
  uint64_t v3;

  v2 = location + 2;
  if (*location)
  {
    v3 = 8 * (_QWORD)*location;
    do
    {
      objc_destroyWeak(v2);
      *v2++ = 0;
      v3 -= 8;
    }
    while (v3);
  }
  *location = 0;
  ++*((_DWORD *)location + 2);
}

void re::DynamicInlineArray<re::VideoMipGenConfig,2ul>::clear(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t i;
  void *v6;
  void *v7;

  v2 = a1 + 16;
  if (*(_QWORD *)a1)
  {
    v3 = v2 + 48 * *(_QWORD *)a1;
    v4 = a1;
    do
    {
      v2 += 48;
      for (i = 56; i != 32; i -= 8)
      {
        v6 = *(void **)(v4 + i);
        if (v6)
        {

          *(_QWORD *)(v4 + i) = 0;
        }
      }
      do
      {
        v7 = *(void **)(v4 + i);
        if (v7)
        {

          *(_QWORD *)(v4 + i) = 0;
        }
        i -= 8;
      }
      while (i != 8);
      v4 += 48;
    }
    while (v2 != v3);
  }
  *(_QWORD *)a1 = 0;
  ++*(_DWORD *)(a1 + 8);
}

void re::DynamicInlineArray<re::VideoObject<re::VideoPixelBufferBase>,2ul>::copy(_QWORD *a1, _QWORD *a2)
{
  __CVBuffer **v3;
  uint64_t v4;
  __CVBuffer **v5;
  __CVBuffer **v6;
  uint64_t v7;
  uint64_t v8;
  __CVBuffer **v9;
  __CVBuffer **v10;
  __CVBuffer **v11;
  uint64_t v12;
  __CVBuffer *v13;

  v3 = (__CVBuffer **)(a2 + 2);
  v4 = *a2;
  v5 = (__CVBuffer **)(a1 + 2);
  if (*a2 >= *a1)
  {
    std::__unwrap_and_dispatch[abi:nn180100]<std::__overload<std::__copy_loop<std::_ClassicAlgPolicy>,std::__copy_trivial>,re::VideoObject<re::VideoPixelBufferBase> const*,re::VideoObject<re::VideoPixelBufferBase> const*,re::VideoObject<re::VideoPixelBufferBase>*,0>(v3, &v3[*a1], v5);
    v8 = *a1;
    if (*a1 != v4)
    {
      v9 = &v3[v8];
      v10 = &v5[v8];
      v11 = v10;
      v12 = 8 * v4 - 8 * v8;
      do
      {
        *v11++ = 0;
        v13 = *v9++;
        re::VideoObject<re::VideoTextureBase>::setRef((int)v10, v10, v13);
        v10 = v11;
        v12 -= 8;
      }
      while (v12);
    }
  }
  else
  {
    std::__unwrap_and_dispatch[abi:nn180100]<std::__overload<std::__copy_loop<std::_ClassicAlgPolicy>,std::__copy_trivial>,re::VideoObject<re::VideoPixelBufferBase> const*,re::VideoObject<re::VideoPixelBufferBase> const*,re::VideoObject<re::VideoPixelBufferBase>*,0>(v3, &v3[v4], v5);
    if (v4 != *a1)
    {
      v6 = &v5[v4];
      v7 = 8 * *a1 - 8 * v4;
      do
      {
        if (*v6)
          re::VideoObjectBase<re::VideoTextureBase,__CVBuffer *>::release(v6);
        *v6++ = 0;
        v7 -= 8;
      }
      while (v7);
    }
  }
  *a1 = v4;
}

__CVBuffer **std::__unwrap_and_dispatch[abi:nn180100]<std::__overload<std::__copy_loop<std::_ClassicAlgPolicy>,std::__copy_trivial>,re::VideoObject<re::VideoPixelBufferBase> const*,re::VideoObject<re::VideoPixelBufferBase> const*,re::VideoObject<re::VideoPixelBufferBase>*,0>(__CVBuffer **a1, __CVBuffer **a2, __CVBuffer **a3)
{
  __CVBuffer **v4;
  __CVBuffer *v6;

  v4 = a1;
  if (a1 != a2)
  {
    do
    {
      v6 = *v4++;
      re::VideoObject<re::VideoTextureBase>::setRef((int)a3, a3, v6);
      ++a3;
    }
    while (v4 != a2);
    return a2;
  }
  return v4;
}

void std::__shared_ptr_emplace<re::VideoPSEProcessor>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_24ED37708;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<re::VideoPSEProcessor>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_24ED37708;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x2276933B8);
}

re *std::__shared_ptr_emplace<re::VideoPSEProcessor>::__on_zero_shared(uint64_t a1)
{
  return re::VideoMipProcessor::deinit((re *)(a1 + 24));
}

uint64_t re::Optional<re::VideoHDRConfig>::~Optional(uint64_t a1)
{
  const void **v2;
  _QWORD *v3;
  uint64_t v4;

  if (*(_BYTE *)a1)
  {
    v2 = (const void **)(a1 + 32);
    v3 = (_QWORD *)(a1 + 16);
    if (*(_QWORD *)(a1 + 32))
      re::VideoObjectBase<re::VideoColorTransformBase,__CFArray const*>::release(v2);
    v4 = *(_QWORD *)(a1 + 24);
    *(_QWORD *)(a1 + 32) = 0;
    if (v4)
      re::VideoObjectBase<re::VideoColorTransformBase,__CFArray const*>::release((const void **)(a1 + 24));
    *(_QWORD *)(a1 + 24) = 0;
    if (*v3)
      re::VideoObjectBase<re::VideoColorTransformBase,__CFArray const*>::release((const void **)(a1 + 16));
    *v3 = 0;
  }
  return a1;
}

uint64_t re::Optional<re::VideoTransformSurfaceConfig>::~Optional(uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;

  if (*(_BYTE *)a1)
  {
    v2 = (_QWORD *)(a1 + 16);
    v3 = (_QWORD *)(a1 + 8);
    if (*(_QWORD *)(a1 + 16))
      re::VideoObjectBase<re::VideoColorTransformBase,__CFArray const*>::release((const void **)(a1 + 16));
    *v2 = 0;
    if (*v3)
      re::VideoObjectBase<re::VideoColorTransformBase,__CFArray const*>::release((const void **)(a1 + 8));
    *v3 = 0;
  }
  return a1;
}

_BYTE *re::Optional<re::VideoMipGenConfig>::~Optional(_BYTE *a1)
{
  uint64_t i;
  void *v3;
  void *v4;

  if (*a1)
  {
    for (i = 48; i != 24; i -= 8)
    {
      v3 = *(void **)&a1[i];
      if (v3)
      {

        *(_QWORD *)&a1[i] = 0;
      }
    }
    do
    {
      v4 = *(void **)&a1[i];
      if (v4)
      {

        *(_QWORD *)&a1[i] = 0;
      }
      i -= 8;
    }
    while (i);
  }
  return a1;
}

uint64_t re::Optional<re::VideoPSEConfig>::~Optional(uint64_t a1)
{
  const void **v2;
  uint64_t v3;
  std::__shared_weak_count *v4;

  if (*(_BYTE *)a1)
  {
    v2 = (const void **)(a1 + 40);
    if (*(_QWORD *)(a1 + 40))
      re::VideoObjectBase<re::VideoColorTransformBase,__CFArray const*>::release(v2);
    v3 = *(_QWORD *)(a1 + 32);
    *(_QWORD *)(a1 + 40) = 0;
    if (v3)
      re::VideoObjectBase<re::VideoColorTransformBase,__CFArray const*>::release((const void **)(a1 + 32));
    *(_QWORD *)(a1 + 32) = 0;
    v4 = *(std::__shared_weak_count **)(a1 + 16);
    if (v4)
      std::__shared_weak_count::__release_weak(v4);
  }
  return a1;
}

id *re::ArcWeakPtr<re::VideoHistogram>::operator=(id *location, id *a2)
{
  if (a2 != location)
  {
    objc_destroyWeak(location);
    *location = 0;
    objc_moveWeak(location, a2);
  }
  return location;
}

_QWORD *re::RigRuntimeData::clear(re::RigRuntimeData *this)
{
  uint64_t v2;

  *((_QWORD *)this + 1) = -1;
  re::FixedArray<re::FixedArray<float>>::deinit((_QWORD *)this + 2);
  v2 = *((_QWORD *)this + 5);
  if (v2)
  {
    if (*((_QWORD *)this + 6))
    {
      (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v2 + 40))(v2, *((_QWORD *)this + 7));
      *((_QWORD *)this + 6) = 0;
      *((_QWORD *)this + 7) = 0;
    }
    *((_QWORD *)this + 5) = 0;
  }
  re::FixedArray<re::RigEvaluation>::deinit((_QWORD *)this + 8);
  re::FixedArray<re::DynamicArray<re::RigHierarchyJointDescription>>::deinit((_QWORD *)this + 25);
  re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 28);
  return re::FixedArray<re::DynamicArray<re::RigRuntimeData::RigGraphRunTimeBoundParameter>>::deinit((_QWORD *)this + 34);
}

_QWORD *re::FixedArray<re::RigEvaluation>::deinit(_QWORD *result)
{
  _QWORD *v1;
  uint64_t v2;
  _QWORD *v3;
  re::RigEvaluation *v4;
  uint64_t v5;
  uint64_t v6;

  if (*result)
  {
    v1 = result;
    v3 = result + 1;
    v2 = result[1];
    if (v2)
    {
      v4 = (re::RigEvaluation *)result[2];
      v5 = 1528 * v2;
      do
      {
        re::RigEvaluation::~RigEvaluation(v4);
        v4 = (re::RigEvaluation *)(v6 + 1528);
        v5 -= 1528;
      }
      while (v5);
      result = (_QWORD *)(*(uint64_t (**)(_QWORD, _QWORD))(*(_QWORD *)*v1 + 40))(*v1, v1[2]);
      *v3 = 0;
      v3[1] = 0;
    }
    *v1 = 0;
  }
  return result;
}

_QWORD *re::FixedArray<re::DynamicArray<re::RigHierarchyJointDescription>>::deinit(_QWORD *result)
{
  _QWORD *v1;
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;

  if (*result)
  {
    v1 = result;
    v3 = result + 1;
    v2 = result[1];
    if (v2)
    {
      v4 = 40 * v2;
      v5 = (_QWORD *)(result[2] + 32);
      do
      {
        v6 = *(v5 - 4);
        if (v6)
        {
          if (*v5)
            (*(void (**)(uint64_t))(*(_QWORD *)v6 + 40))(v6);
          *v5 = 0;
          *(v5 - 3) = 0;
          *(v5 - 2) = 0;
          *(v5 - 4) = 0;
          ++*((_DWORD *)v5 - 2);
        }
        v5 += 5;
        v4 -= 40;
      }
      while (v4);
      result = (_QWORD *)(*(uint64_t (**)(_QWORD, _QWORD))(*(_QWORD *)*v1 + 40))(*v1, v1[2]);
      *v3 = 0;
      v3[1] = 0;
    }
    *v1 = 0;
  }
  return result;
}

_QWORD *re::FixedArray<re::DynamicArray<re::RigRuntimeData::RigGraphRunTimeBoundParameter>>::deinit(_QWORD *result)
{
  _QWORD *v1;
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;

  if (*result)
  {
    v1 = result;
    v3 = result + 1;
    v2 = result[1];
    if (v2)
    {
      v4 = result[2];
      v5 = 40 * v2;
      do
      {
        re::DynamicArray<re::Pair<re::StringID,re::RigDataValue *,true>>::deinit(v4);
        v4 += 40;
        v5 -= 40;
      }
      while (v5);
      result = (_QWORD *)(*(uint64_t (**)(_QWORD, _QWORD))(*(_QWORD *)*v1 + 40))(*v1, v1[2]);
      *v3 = 0;
      v3[1] = 0;
    }
    *v1 = 0;
  }
  return result;
}

void re::RigRuntimeData::update(re::RigRuntimeData *this, const re::RigAsset *a2, const re::MeshAsset *a3, const re::MeshNameMap *a4, uint64_t a5)
{
  if (*((_QWORD *)this + 1) != a5)
  {
    if (!*(_QWORD *)this)
      *(_QWORD *)this = *(_QWORD *)a2;
    re::RigRuntimeData::resetRigEvaluations(this, a2);
    re::RigRuntimeData::setRigEntryHandles(this, a2, a3, a4);
    *((_QWORD *)this + 1) = a5;
    *((_BYTE *)this + 296) = 0;
  }
}

void re::RigRuntimeData::resetRigEvaluations(re::RigRuntimeData *this, const re::RigAsset *a2)
{
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  re *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  _QWORD *v21;
  NSObject *v22;
  _BYTE *v23;
  int v24;
  const char *v25;
  __int16 v26;
  int v27;
  __int16 v28;
  _BYTE v29[18];
  _BYTE *v30;
  _BYTE v31[12];
  __int16 v32;
  int v33;
  __int16 v34;
  unint64_t v35;
  __int16 v36;
  unint64_t v37;
  _QWORD buf[4];
  __int128 v39;
  __int128 v40;
  __int128 v41;
  uint64_t v42;

  v42 = *MEMORY[0x24BDAC8D0];
  re::RigRuntimeData::clear(this);
  v4 = *((_QWORD *)a2 + 2);
  v5 = *(_QWORD *)this;
  buf[0] = -1;
  re::FixedArray<unsigned long>::init<unsigned long const&>((_QWORD *)this + 5, v5, v4, buf);
  v7 = *(_QWORD *)this;
  *((_QWORD *)this + 8) = *(_QWORD *)this;
  *((_QWORD *)this + 9) = v4;
  if (v4)
  {
    if (v4 >= 0x2AE3DA78A0D674)
      goto LABEL_32;
    v8 = (*(uint64_t (**)(uint64_t, unint64_t, uint64_t))(*(_QWORD *)v7 + 32))(v7, 1528 * v4, 8);
    *((_QWORD *)this + 10) = v8;
    if (!v8)
    {
LABEL_33:
      re::internal::assertLog((re::internal *)4, v9, "assertion failure: '%s' (%s:line %i) Out of memory.", "m_data", "init", 327);
      _os_crash();
      __break(1u);
    }
    v10 = v8;
    v11 = v4 - 1;
    if (v4 != 1)
    {
      do
      {
        bzero((void *)v10, 0x5F0uLL);
        *(_DWORD *)(v10 + 1212) = 0x7FFFFFFF;
        *(_OWORD *)(v10 + 1224) = 0u;
        *(_OWORD *)(v10 + 1240) = 0u;
        *(_QWORD *)(v10 + 1256) = 0x7FFFFFFF00000000;
        *(_QWORD *)(v10 + 1520) = 0;
        v12 = v10 + 1272;
        *(_OWORD *)(v10 + 1272) = 0u;
        *(_OWORD *)(v10 + 1288) = 0u;
        *(_OWORD *)(v10 + 1304) = 0u;
        *(_OWORD *)(v10 + 1320) = 0u;
        *(_OWORD *)(v10 + 1336) = 0u;
        *(_OWORD *)(v10 + 1352) = 0u;
        *(_OWORD *)(v10 + 1368) = 0u;
        *(_OWORD *)(v10 + 1384) = 0u;
        *(_OWORD *)(v10 + 1400) = 0u;
        *(_OWORD *)(v10 + 1416) = 0u;
        *(_OWORD *)(v10 + 1432) = 0u;
        *(_OWORD *)(v10 + 1448) = 0u;
        *(_OWORD *)(v10 + 1464) = 0u;
        *(_OWORD *)(v10 + 1480) = 0u;
        *(_DWORD *)(v10 + 1512) = 0;
        v10 += 1528;
        *(_OWORD *)(v12 + 224) = 0u;
        --v11;
      }
      while (v11);
    }
    bzero((void *)v10, 0x5F0uLL);
    v13 = 0;
    *(_DWORD *)(v10 + 1212) = 0x7FFFFFFF;
    *(_OWORD *)(v10 + 1224) = 0u;
    *(_OWORD *)(v10 + 1240) = 0u;
    *(_QWORD *)(v10 + 1256) = 0x7FFFFFFF00000000;
    *(_QWORD *)(v10 + 1520) = 0;
    *(_OWORD *)(v10 + 1272) = 0u;
    *(_OWORD *)(v10 + 1288) = 0u;
    *(_OWORD *)(v10 + 1304) = 0u;
    *(_OWORD *)(v10 + 1320) = 0u;
    *(_OWORD *)(v10 + 1336) = 0u;
    *(_OWORD *)(v10 + 1352) = 0u;
    *(_OWORD *)(v10 + 1368) = 0u;
    *(_OWORD *)(v10 + 1384) = 0u;
    *(_OWORD *)(v10 + 1400) = 0u;
    *(_OWORD *)(v10 + 1416) = 0u;
    *(_OWORD *)(v10 + 1432) = 0u;
    *(_OWORD *)(v10 + 1448) = 0u;
    *(_OWORD *)(v10 + 1464) = 0u;
    *(_OWORD *)(v10 + 1480) = 0u;
    *(_OWORD *)(v10 + 1496) = 0u;
    *(_DWORD *)(v10 + 1512) = 0;
    while (1)
    {
      v14 = *((_QWORD *)a2 + 2);
      if (v14 <= v13)
      {
        *(_QWORD *)v31 = 0;
        v40 = 0u;
        v41 = 0u;
        v39 = 0u;
        memset(buf, 0, sizeof(buf));
        os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        v24 = 136315906;
        v25 = "operator[]";
        v26 = 1024;
        v27 = 797;
        v28 = 2048;
        *(_QWORD *)v29 = v13;
        *(_WORD *)&v29[8] = 2048;
        *(_QWORD *)&v29[10] = v14;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_30:
        v40 = 0u;
        v41 = 0u;
        v39 = 0u;
        memset(buf, 0, sizeof(buf));
        os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        *(_DWORD *)v31 = 136315906;
        *(_QWORD *)&v31[4] = "operator[]";
        v32 = 1024;
        v33 = 468;
        v34 = 2048;
        v35 = v13;
        v36 = 2048;
        v37 = v14;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_31:
        v40 = 0u;
        v41 = 0u;
        v39 = 0u;
        memset(buf, 0, sizeof(buf));
        os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        *(_DWORD *)v31 = 136315906;
        *(_QWORD *)&v31[4] = "operator[]";
        v32 = 1024;
        v33 = 468;
        v34 = 2048;
        v35 = v13;
        v36 = 2048;
        v37 = v14;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_32:
        re::internal::assertLog((re::internal *)6, v6, "assertion failure: '%s' (%s:line %i) Size overflow in FixedArray<T>::init(). Element size = %zu, count = %zu", "!overflow", "init", 324, 1528, v4);
        _os_crash();
        __break(1u);
        goto LABEL_33;
      }
      v14 = *((_QWORD *)this + 9);
      if (v14 <= v13)
        goto LABEL_30;
      v15 = *((_QWORD *)a2 + 4);
      v16 = (re *)re::RigEvaluation::init((re::RigEvaluation *)(*((_QWORD *)this + 10) + 1528 * v13), *(re::Allocator **)this, (const re::RigDefinition *)(v15 + 1144 * v13), (uint64_t)&v24);
      if (!(_BYTE)v24)
        break;
      if (v13 < *((_QWORD *)a2 + 7))
      {
        v17 = *(_QWORD *)(v15 + 1144 * v13 + 1120);
        if (v17)
        {
          v18 = 0;
          v19 = v15 + 1144 * v13;
          v20 = (_QWORD *)(*((_QWORD *)a2 + 9) + 16 * v13);
          v21 = *(_QWORD **)(v19 + 1136);
          while (!re::StringID::operator==(v21, v20))
          {
            ++v18;
            v21 += 4;
            if (v17 == v18)
              goto LABEL_22;
          }
          v14 = *((_QWORD *)this + 6);
          if (v14 <= v13)
            goto LABEL_31;
          *(_QWORD *)(*((_QWORD *)this + 7) + 8 * v13) = v18;
        }
        goto LABEL_22;
      }
LABEL_23:
      if (++v13 == v4)
        return;
    }
    v22 = *re::assetsLogObjects(v16);
    if (os_log_type_enabled(v22, OS_LOG_TYPE_ERROR))
    {
      v23 = &v29[13];
      if ((v29[12] & 1) != 0)
        v23 = v30;
      LODWORD(buf[0]) = 134218242;
      *(_QWORD *)((char *)buf + 4) = v13;
      WORD2(buf[1]) = 2080;
      *(_QWORD *)((char *)&buf[1] + 6) = v23;
      _os_log_error_impl(&dword_224FE9000, v22, OS_LOG_TYPE_ERROR, "Rig entry %zu has an invalid rig definition: %s.", (uint8_t *)buf, 0x16u);
    }
LABEL_22:
    if (!(_BYTE)v24 && *(_QWORD *)&v29[4] && (v29[12] & 1) != 0)
      (*(void (**)(void))(**(_QWORD **)&v29[4] + 40))();
    goto LABEL_23;
  }
}

void re::RigRuntimeData::setRigEntryHandles(re::RigRuntimeData *this, const re::RigAsset *a2, const re::MeshAsset *a3, const re::MeshNameMap *a4)
{
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unsigned int v12;
  _DWORD *v13;
  unint64_t v14;
  _QWORD *v15;
  unint64_t v16;
  _QWORD *v17;
  re *v18;
  uint64_t v19;
  NSObject *v20;
  uint64_t v21;
  uint64_t v22;
  unsigned int v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  const re::RigAsset *v31;
  const re::MeshAsset *v32;
  uint64_t *v34;
  uint64_t v35;
  uint64_t v36;
  _BYTE v37[28];
  __int16 v38;
  unint64_t v39;
  uint64_t v40;
  _BYTE *v41;
  _BYTE v42[12];
  __int16 v43;
  int v44;
  __int16 v45;
  unint64_t v46;
  __int16 v47;
  unint64_t v48;
  uint8_t buf[32];
  __int128 v50;
  __int128 v51;
  __int128 v52;
  uint64_t v53;

  v53 = *MEMORY[0x24BDAC8D0];
  re::FixedArray<re::FixedArray<unsigned int>>::init<>((uint64_t *)this + 2, *(_QWORD *)this, *((unsigned int *)a4 + 54));
  v7 = *((_QWORD *)a2 + 12);
  if (v7)
  {
    v8 = 0;
    v31 = a2;
    v32 = a3;
    v30 = *((_QWORD *)a2 + 12);
    do
    {
      v9 = *((_QWORD *)a2 + 12);
      if (v9 <= v8)
        goto LABEL_39;
      v10 = *((_QWORD *)a2 + 14);
      v11 = v10 + (v8 << 6);
      v13 = (_DWORD *)(v11 + 56);
      v12 = *(_DWORD *)(v11 + 56);
      if (*((_QWORD *)this + 9) > (unint64_t)v12 && *(_QWORD *)(*((_QWORD *)this + 10) + 1528 * v12 + 1176))
      {
        v14 = *((_QWORD *)a3 + 117);
        if (v14 < 2)
        {
LABEL_10:
          v16 = 0;
        }
        else
        {
          v15 = (_QWORD *)(v10 + (v8 << 6) + 40);
          v16 = 1;
          while (1)
          {
            v17 = (_QWORD *)re::MeshAsset::skeletonAtIndex(a3, v16);
            if (re::StringID::operator==(v17, v15))
              break;
            if (v14 == ++v16)
              goto LABEL_10;
          }
        }
        re::MeshNameMap::meshInstancePartsForIdentifier((uint64_t)a4, (unsigned __int8 *)v11, buf);
        *(_QWORD *)v37 = a3;
        *(_QWORD *)&v37[8] = a4;
        *(_QWORD *)&v37[16] = *(_QWORD *)buf;
        v40 = v50;
        v41 = 0;
        re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Scene *,RESceneDidAddEvent const&)>::operator=<24ul>((uint64_t)&v37[24], (uint64_t)&buf[8]);
        v18 = (re *)*((_QWORD *)&v50 + 1);
        if (*((_QWORD *)&v50 + 1))
        {
          v18 = (re *)(***((uint64_t (****)(_QWORD))&v50 + 1))(*((_QWORD *)&v50 + 1));
          if (*((uint8_t **)&v50 + 1) != &buf[8])
            v18 = (re *)(*(uint64_t (**)(_QWORD))(*(_QWORD *)v50 + 40))(v50);
        }
        v19 = *(_QWORD *)&v37[16];
        if (*(_QWORD *)&v37[16])
        {
          v34 = (uint64_t *)v37;
          v35 = 0;
          goto LABEL_19;
        }
        v20 = *re::assetsLogObjects(v18);
        if (os_log_type_enabled(v20, OS_LOG_TYPE_DEFAULT))
        {
          v21 = *(_QWORD *)(v11 + 16);
          *(_DWORD *)buf = 134218242;
          *(_QWORD *)&buf[4] = v8;
          *(_WORD *)&buf[12] = 2080;
          *(_QWORD *)&buf[14] = v21;
          _os_log_impl(&dword_224FE9000, v20, OS_LOG_TYPE_DEFAULT, "Mesh rig %zu did not apply to any known mesh: %s.", buf, 0x16u);
        }
        v19 = *(_QWORD *)&v37[16];
        v34 = (uint64_t *)v37;
        v35 = 0;
        if (*(_QWORD *)&v37[16])
        {
          do
          {
LABEL_19:
            v22 = re::MeshIdentifierIteration<re::MeshAsset,re::MeshInstanceAndPartIndex>::MeshIdentifierIterator::meshModel(&v34);
            *(_QWORD *)buf = v35;
            v23 = (*(uint64_t (**)(uint64_t, uint8_t *))(*(_QWORD *)v34[7] + 16))(v34[7], buf);
            *(_QWORD *)buf = v35;
            v24 = (*(uint64_t (**)(uint64_t, uint8_t *))(*(_QWORD *)v34[7] + 16))(v34[7], buf);
            v25 = *(_QWORD *)(v22 + 176);
            if (v25)
            {
              if (*(_QWORD *)(v25 + 8) > (unint64_t)WORD2(v24))
              {
                v9 = WORD2(v24);
                if (v16 == *(_DWORD *)(*(_QWORD *)(v25 + 16) + 72 * WORD2(v24) + 4))
                {
                  v26 = *((_QWORD *)this + 3);
                  if (v26 <= v23)
                  {
                    v36 = 0;
                    v51 = 0u;
                    v52 = 0u;
                    v50 = 0u;
                    memset(buf, 0, sizeof(buf));
                    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
                    *(_DWORD *)v42 = 136315906;
                    *(_QWORD *)&v42[4] = "operator[]";
                    v43 = 1024;
                    v44 = 468;
                    v45 = 2048;
                    v46 = v23;
                    v47 = 2048;
                    v48 = v26;
                    _os_log_send_and_compose_impl();
                    _os_crash_msg();
                    __break(1u);
LABEL_37:
                    v36 = 0;
                    v51 = 0u;
                    v52 = 0u;
                    v50 = 0u;
                    memset(buf, 0, sizeof(buf));
                    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
                    *(_DWORD *)v42 = 136315906;
                    *(_QWORD *)&v42[4] = "operator[]";
                    v43 = 1024;
                    v44 = 468;
                    v45 = 2048;
                    v46 = v23;
                    v47 = 2048;
                    v48 = v26;
                    _os_log_send_and_compose_impl();
                    _os_crash_msg();
                    __break(1u);
LABEL_38:
                    v36 = 0;
                    v51 = 0u;
                    v52 = 0u;
                    v50 = 0u;
                    memset(buf, 0, sizeof(buf));
                    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
                    *(_DWORD *)v42 = 136315906;
                    *(_QWORD *)&v42[4] = "operator[]";
                    v43 = 1024;
                    v44 = 468;
                    v45 = 2048;
                    v46 = v9;
                    v47 = 2048;
                    v48 = v26;
                    _os_log_send_and_compose_impl();
                    _os_crash_msg();
                    __break(1u);
LABEL_39:
                    *(_QWORD *)v42 = 0;
                    v51 = 0u;
                    v52 = 0u;
                    v50 = 0u;
                    memset(buf, 0, sizeof(buf));
                    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
                    *(_DWORD *)v37 = 136315906;
                    *(_QWORD *)&v37[4] = "operator[]";
                    *(_WORD *)&v37[12] = 1024;
                    *(_DWORD *)&v37[14] = 797;
                    *(_WORD *)&v37[18] = 2048;
                    *(_QWORD *)&v37[20] = v8;
                    v38 = 2048;
                    v39 = v9;
                    _os_log_send_and_compose_impl();
                    _os_crash_msg();
                    __break(1u);
                  }
                  v27 = (_QWORD *)(*((_QWORD *)this + 4) + 24 * v23);
                  if (!*v27)
                  {
                    re::FixedArray<unsigned int>::init<unsigned int const&>(v27, *(_QWORD *)this, *(_QWORD *)(v22 + 56), &re::RigRuntimeData::kInvalidRigDefinitionIndex);
                    v26 = *((_QWORD *)this + 3);
                  }
                  if (v26 <= v23)
                    goto LABEL_37;
                  v28 = *((_QWORD *)this + 4);
                  v26 = *(_QWORD *)(v28 + 24 * v23 + 8);
                  if (v26 <= v9)
                    goto LABEL_38;
                  *(_DWORD *)(*(_QWORD *)(v28 + 24 * v23 + 16) + 4 * v9) = *v13;
                }
              }
            }
            v29 = ++v35;
          }
          while (v34 != (uint64_t *)v37 || v29 != v19);
        }
        if (v41)
        {
          (**(void (***)(_BYTE *))v41)(v41);
          if (v41 != &v37[24])
            (*(void (**)(uint64_t))(*(_QWORD *)v40 + 40))(v40);
        }
        a2 = v31;
        a3 = v32;
        v7 = v30;
      }
      ++v8;
    }
    while (v8 != v7);
  }
}

void re::RigRuntimeData::update(re::RigEnvironment *this, uint64_t a2, re::MeshAsset *a3, uint64_t a4, uint64_t a5, unint64_t *a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  re::RigEnvironment *v13;
  re::Allocator *v14;
  uint64_t v15;
  unint64_t *v16;
  unint64_t v17;
  unint64_t v18;
  re *v19;
  _BYTE *v20;
  unint64_t v21;
  _anonymous_namespace_ *v22;
  uint64_t v23;
  uint64_t *v24;
  uint64_t v25;
  unint64_t v26;
  _anonymous_namespace_ *v27;
  unint64_t v28;
  unint64_t *v29;
  unint64_t v30;
  const char **v31;
  unint64_t v32;
  const char *v33;
  size_t v34;
  size_t v35;
  re *v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  unint64_t v40;
  unint64_t v41;
  unint64_t v43;
  _QWORD *v44;
  uint64_t v45;
  uint64_t *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  unint64_t v50;
  size_t v51;
  uint64_t v52;
  unint64_t v53;
  uint64_t v54;
  unint64_t v55;
  __int128 *v56;
  __int128 v57;
  __int128 v58;
  unint64_t *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  unint64_t v63;
  unint64_t v64;
  unint64_t v65;
  unint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  _anonymous_namespace_ *v71;
  unint64_t v72;
  unint64_t *v73;
  unint64_t v74;
  unint64_t v75;
  uint64_t v76;
  BOOL v77;
  unint64_t v78;
  unint64_t v79;
  uint64_t v80;
  unint64_t *v81;
  uint8_t v82;
  uint64_t v83;
  unint64_t v84;
  uint64_t v85;
  unint64_t v87;
  _DWORD *v88;
  unint64_t *v89;
  unint64_t *v90;
  uint64_t *v92;
  uint64_t *v93;
  uint64_t v94;
  uint64_t v95;
  _BYTE v96[32];
  uint8_t buf[48];
  __int128 v98;
  __int128 v99;
  __int128 v100;
  char v101;
  _BYTE v102[38];
  _BYTE *v103;
  uint64_t v104;
  _anonymous_namespace_ *v105;
  _BYTE v106[18];
  __int16 v107;
  _QWORD *v108;
  __int16 v109;
  unint64_t v110;
  uint64_t v111;

  v111 = *MEMORY[0x24BDAC8D0];
  if (*((_QWORD *)this + 1) != a8)
  {
    v13 = this;
    v14 = *(re::Allocator **)this;
    if (!*(_QWORD *)this)
    {
      v14 = *(re::Allocator **)(a2 + 120);
      *(_QWORD *)this = v14;
    }
    if (!*((_QWORD *)this + 12))
    {
      *((_QWORD *)this + 24) = a7;
      re::RigEnvironment::init((re::RigEnvironment *)((char *)this + 96), v14);
    }
    v83 = a8;
    re::BucketArray<re::RigEnvironment::RigEnvironmentScope,8ul>::removeLast((uint64_t)v13 + 96);
    re::RigEnvironment::pushEnvironmentScope((re::RigEnvironment *)((char *)v13 + 96));
    *((_QWORD *)v13 + 19) = a5;
    re::makeBindNode((re *)a6, (uint64_t)v96);
    if ((char *)v13 + 160 != v96)
      re::BindNode::copy((re::RigEnvironment *)((char *)v13 + 160), (const re::BindNode *)v96);
    re::BindNode::deinit((re::BindNode *)v96);
    *((_QWORD *)v13 + 11) = a2 + 120;
    v90 = (unint64_t *)a2;
    if (*(_QWORD *)(a2 + 136))
    {
      v8 = 0;
      v15 = 0;
      v16 = 0;
      v17 = (unint64_t)"Could not insert rig graph node %zu (%s). [%d] %s";
      do
      {
        a6 = v90;
        v18 = v90[2];
        if (v18 <= (unint64_t)v16)
          goto LABEL_121;
        re::StringID::StringID((re::StringID *)&v93, (const StringID *)(v90[4] + v8));
        v18 = v90[17];
        if (v18 <= (unint64_t)v16)
          goto LABEL_122;
        re::RigEnvironment::insertRigGraphNode((re::RigEnvironment *)((char *)v13 + 96), (const re::StringID *)&v93, (const re::RigGraphNode *)(v90[19] + v15), (uint64_t)v102);
        if (!v102[0])
        {
          a6 = (unint64_t *)*re::assetsLogObjects(v19);
          if (os_log_type_enabled((os_log_t)a6, OS_LOG_TYPE_DEFAULT))
          {
            if ((v102[32] & 1) != 0)
              v20 = v103;
            else
              v20 = &v102[33];
            *(_DWORD *)buf = 134218754;
            *(_QWORD *)&buf[4] = v16;
            *(_WORD *)&buf[12] = 2080;
            *(_QWORD *)&buf[14] = v94;
            *(_WORD *)&buf[22] = 1024;
            *(_DWORD *)&buf[24] = *(_DWORD *)&v102[8];
            *(_WORD *)&buf[28] = 2080;
            *(_QWORD *)&buf[30] = v20;
            _os_log_impl(&dword_224FE9000, (os_log_t)a6, OS_LOG_TYPE_DEFAULT, "Could not insert rig graph node %zu (%s). [%d] %s", buf, 0x26u);
          }
          if (!v102[0] && *(_QWORD *)&v102[24] && (v102[32] & 1) != 0)
            (*(void (**)(void))(**(_QWORD **)&v102[24] + 40))();
        }
        re::StringID::destroyString((re::StringID *)&v93);
        v16 = (unint64_t *)((char *)v16 + 1);
        v15 += 200;
        v8 += 216;
      }
      while ((unint64_t)v16 < *(_QWORD *)(*((_QWORD *)v13 + 11) + 16));
    }
    re::RigRuntimeData::clear(v13);
    re::FixedArray<re::FixedArray<unsigned int>>::init<>((uint64_t *)v13 + 2, *(_QWORD *)v13, *(unsigned int *)(a4 + 216));
    v16 = v90;
    v21 = v90[7];
    *((_QWORD *)v13 + 26) = v21;
    if (v21)
    {
      if (v21 > 0x666666666666666)
      {
LABEL_125:
        re::internal::assertLog((re::internal *)6, v23, "assertion failure: '%s' (%s:line %i) Size overflow in FixedArray<T>::init(). Element size = %zu, count = %zu", "!overflow", "init", 324, 40, v21);
        _os_crash();
        __break(1u);
        goto LABEL_126;
      }
      *((_QWORD *)v13 + 27) = v24;
      if (!v24)
      {
LABEL_126:
        re::internal::assertLog((re::internal *)4, v25, "assertion failure: '%s' (%s:line %i) Out of memory.", "m_data", "init", 327);
        _os_crash();
        __break(1u);
        goto LABEL_127;
      }
      v26 = v21 - 1;
      if (v21 != 1)
      {
        do
        {
          v24[4] = 0;
          v24[1] = 0;
          v24[2] = 0;
          *v24 = 0;
          *((_DWORD *)v24 + 6) = 0;
          v24 += 5;
          --v26;
        }
        while (v26);
      }
      v24[4] = 0;
      v24[1] = 0;
      v24[2] = 0;
      *v24 = 0;
      *((_DWORD *)v24 + 6) = 0;
    }
    v85 = (uint64_t)v13 + 224;
    v92 = (uint64_t *)v13;
    if (v21)
    {
      v17 = 0;
      v28 = (unint64_t)&v98;
      v84 = v21;
      while (1)
      {
        v18 = v16[7];
        if (v18 <= v17)
          goto LABEL_124;
        v8 = v16[9] + (v17 << 6);
        *(_DWORD *)buf = v17;
        v88 = (_DWORD *)(v8 + 56);
        v29 = (unint64_t *)*(unsigned int *)re::HashTable<unsigned int,unsigned int,re::Hash<unsigned int>,re::EqualTo<unsigned int>,true,false>::add(v85, (_DWORD *)(v8 + 56), buf);
        v30 = *((_QWORD *)a3 + 117);
        if (v30 < 2)
        {
LABEL_37:
          v32 = 0;
        }
        else
        {
          v31 = (const char **)(v8 + 48);
          v32 = 1;
          while (1)
          {
            v33 = *(const char **)(re::MeshAsset::skeletonAtIndex(a3, v32) + 8);
            v34 = strlen(v33);
            *(_QWORD *)buf = v33;
            *(_QWORD *)&buf[8] = v34;
            v35 = strlen(*v31);
            *(_QWORD *)v106 = *v31;
            *(_QWORD *)&v106[8] = v35;
            re::StringSlice::findFirstOf(buf, (uint64_t)v106, 0, (uint64_t)v102);
            if (v102[0])
              break;
            if (v30 == ++v32)
              goto LABEL_37;
          }
        }
        v18 = a4;
        re::MeshNameMap::meshInstancePartsForIdentifier(a4, (unsigned __int8 *)v8, buf);
        *(_QWORD *)v102 = a3;
        *(_QWORD *)&v102[8] = a4;
        *(_QWORD *)&v102[16] = *(_QWORD *)buf;
        v104 = *(_QWORD *)&buf[32];
        v105 = 0;
        re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Scene *,RESceneDidAddEvent const&)>::operator=<24ul>((uint64_t)&v102[24], (uint64_t)&buf[8]);
        v36 = *(re **)&buf[40];
        if (*(_QWORD *)&buf[40])
        {
          v36 = (re *)(***(uint64_t (****)(_QWORD))&buf[40])(*(_QWORD *)&buf[40]);
          if (*(uint8_t **)&buf[40] != &buf[8])
            v36 = (re *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)&buf[32] + 40))(*(_QWORD *)&buf[32]);
        }
        v16 = *(unint64_t **)&v102[16];
        v89 = v29;
        v87 = v17;
        if (*(_QWORD *)&v102[16])
        {
          v93 = (uint64_t *)v102;
          v94 = 0;
          break;
        }
        a6 = (unint64_t *)*re::assetsLogObjects(v36);
        if (os_log_type_enabled((os_log_t)a6, OS_LOG_TYPE_DEFAULT))
        {
          v37 = *(_QWORD *)(v8 + 16);
          *(_DWORD *)buf = 134218242;
          *(_QWORD *)&buf[4] = v17;
          *(_WORD *)&buf[12] = 2080;
          *(_QWORD *)&buf[14] = v37;
          _os_log_impl(&dword_224FE9000, (os_log_t)a6, OS_LOG_TYPE_DEFAULT, "Mesh rig graph %zu did not apply to any known mesh: %s.", buf, 0x16u);
        }
        v16 = *(unint64_t **)&v102[16];
        v93 = (uint64_t *)v102;
        v94 = 0;
        if (*(_QWORD *)&v102[16])
          break;
LABEL_71:
        v27 = v105;
        if (v105)
        {
          v27 = (_anonymous_namespace_ *)(**(uint64_t (***)(_anonymous_namespace_ *))v105)(v105);
          if (v105 != (_anonymous_namespace_ *)&v102[24])
            v27 = (_anonymous_namespace_ *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v104 + 40))(v104);
        }
        v17 = v87 + 1;
        v13 = (re::RigEnvironment *)v92;
        v16 = v90;
        if (v87 + 1 == v84)
          goto LABEL_75;
      }
      while (1)
      {
        a6 = (unint64_t *)re::MeshIdentifierIteration<re::MeshAsset,re::MeshInstanceAndPartIndex>::MeshIdentifierIterator::meshModel(&v93);
        *(_QWORD *)buf = v94;
        v8 = (*(uint64_t (**)(uint64_t, uint8_t *))(*(_QWORD *)v93[7] + 16))(v93[7], buf);
        *(_QWORD *)buf = v94;
        v38 = (*(uint64_t (**)(uint64_t, uint8_t *))(*(_QWORD *)v93[7] + 16))(v93[7], buf);
        v39 = a6[22];
        if (v39)
        {
          if (*(_QWORD *)(v39 + 8) > (unint64_t)WORD2(v38))
          {
            v40 = WORD2(v38);
            v41 = *(unsigned int *)(*(_QWORD *)(v39 + 16) + 72 * WORD2(v38) + 4);
            if (v32 == v41 && *((_QWORD *)a3 + 117) > v41)
            {
              v17 = v8;
              v43 = v92[3];
              if (v43 <= v8)
                goto LABEL_117;
              v8 = 24;
              v44 = (_QWORD *)(v92[4] + 24 * v17);
              if (!*v44)
              {
                re::FixedArray<unsigned int>::init<unsigned int const&>(v44, *v92, a6[7], &re::RigRuntimeData::kInvalidRigDefinitionIndex);
                v43 = v92[3];
              }
              if (v43 <= v17)
                goto LABEL_118;
              v45 = v92[4];
              v18 = *(_QWORD *)(v45 + 24 * v17 + 8);
              if (v18 <= v40)
                goto LABEL_119;
              a6 = v89;
              *(_DWORD *)(*(_QWORD *)(v45 + 24 * v17 + 16) + 4 * v40) = *v88;
              v18 = v92[26];
              if (v18 <= (unint64_t)v89)
                goto LABEL_120;
              v18 = v92[27];
              v46 = (uint64_t *)(v18 + 40 * v89);
              if (!*v46)
              {
                *v46 = *v92;
                re::DynamicArray<re::RigHierarchyJointDescription>::setCapacity(v46, 0);
                a6 = v89;
                ++*(_DWORD *)(v18 + 40 * v89 + 24);
                v47 = re::MeshAsset::skeletonAtIndex(a3, v32);
                v18 = v92[26];
                if (v18 <= (unint64_t)v89)
                  goto LABEL_123;
                v8 = v47;
                v40 = *(unsigned int *)(v47 + 24);
                if (*(_DWORD *)(v47 + 24))
                  break;
              }
            }
          }
        }
LABEL_69:
        v59 = (unint64_t *)++v94;
        if (v93 == (uint64_t *)v102 && v59 == v16)
          goto LABEL_71;
      }
      v49 = 0;
      v43 = 0;
      a6 = (unint64_t *)(v92[27] + 40 * v89);
      v18 = 8;
      while (1)
      {
        v50 = *(_QWORD *)(v8 + 24);
        if (v50 <= v43)
          break;
        v17 = *(_QWORD *)(*(_QWORD *)(v8 + 32) + v18);
        v51 = strlen((const char *)v17);
        *(_QWORD *)buf = v17;
        *(_QWORD *)&buf[8] = v51;
        v53 = *(_QWORD *)(v8 + 48);
        if (v53 <= v43)
          goto LABEL_113;
        v54 = *(unsigned int *)(*(_QWORD *)(v8 + 56) + 4 * v43);
        if ((_DWORD)v54 == -1)
          v54 = -1;
        *(_QWORD *)&buf[16] = v54;
        v55 = *(_QWORD *)(v8 + 72);
        if (v55 <= v43)
          goto LABEL_114;
        v56 = (__int128 *)(*(_QWORD *)(v8 + 80) + v49);
        buf[32] = 1;
        v58 = v56[1];
        v57 = v56[2];
        v98 = *v56;
        v99 = v58;
        v100 = v57;
        v101 = 0;
        re::DynamicArray<re::RigHierarchyJointDescription>::add(a6, (__int128 *)buf);
        ++v43;
        v49 += 48;
        v18 += 16;
        if (v40 == v43)
          goto LABEL_69;
      }
      re::internal::assertLog((re::internal *)6, v48, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 251, v43, v50);
      _os_crash();
      __break(1u);
LABEL_113:
      re::internal::assertLog((re::internal *)6, v52, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 251, v43, v53);
      _os_crash();
      __break(1u);
LABEL_114:
      re::internal::assertLog((re::internal *)6, v52, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 251, v43, v55);
      _os_crash();
      __break(1u);
LABEL_115:
      *(_QWORD *)v106 = 0;
      v98 = 0u;
      v99 = 0u;
      memset(buf, 0, sizeof(buf));
      os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      *(_DWORD *)v102 = 136315906;
      *(_QWORD *)&v102[4] = "operator[]";
      *(_WORD *)&v102[12] = 1024;
      *(_DWORD *)&v102[14] = 797;
      *(_WORD *)&v102[18] = 2048;
      *(_QWORD *)&v102[20] = v28;
      *(_WORD *)&v102[28] = 2048;
      *(_QWORD *)&v102[30] = v18;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
LABEL_116:
      *(_QWORD *)v106 = 0;
      v98 = 0u;
      v99 = 0u;
      memset(buf, 0, sizeof(buf));
      os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      *(_DWORD *)v102 = 136315906;
      *(_QWORD *)&v102[4] = "operator[]";
      *(_WORD *)&v102[12] = 1024;
      *(_DWORD *)&v102[14] = 468;
      *(_WORD *)&v102[18] = 2048;
      *(_QWORD *)&v102[20] = v28;
      *(_WORD *)&v102[28] = 2048;
      *(_QWORD *)&v102[30] = v18;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
LABEL_117:
      v95 = 0;
      v98 = 0u;
      v99 = 0u;
      memset(buf, 0, sizeof(buf));
      os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      *(_DWORD *)v106 = 136315906;
      *(_QWORD *)&v106[4] = "operator[]";
      *(_WORD *)&v106[12] = 1024;
      *(_DWORD *)&v106[14] = 468;
      v107 = 2048;
      v108 = (_QWORD *)v17;
      v109 = 2048;
      v110 = v43;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
LABEL_118:
      v95 = 0;
      v98 = 0u;
      v99 = 0u;
      memset(buf, 0, sizeof(buf));
      os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      *(_DWORD *)v106 = 136315906;
      *(_QWORD *)&v106[4] = "operator[]";
      *(_WORD *)&v106[12] = 1024;
      *(_DWORD *)&v106[14] = 468;
      v107 = 2048;
      v108 = (_QWORD *)v17;
      v109 = 2048;
      v110 = v43;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
LABEL_119:
      v95 = 0;
      v98 = 0u;
      v99 = 0u;
      memset(buf, 0, sizeof(buf));
      os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      *(_DWORD *)v106 = 136315906;
      *(_QWORD *)&v106[4] = "operator[]";
      *(_WORD *)&v106[12] = 1024;
      *(_DWORD *)&v106[14] = 468;
      v107 = 2048;
      v108 = (_QWORD *)v40;
      v109 = 2048;
      v110 = v18;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
LABEL_120:
      v95 = 0;
      v98 = 0u;
      v99 = 0u;
      memset(buf, 0, sizeof(buf));
      os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      *(_DWORD *)v106 = 136315906;
      *(_QWORD *)&v106[4] = "operator[]";
      *(_WORD *)&v106[12] = 1024;
      *(_DWORD *)&v106[14] = 468;
      v107 = 2048;
      v108 = a6;
      v109 = 2048;
      v110 = v18;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
LABEL_121:
      *(_QWORD *)v106 = 0;
      v98 = 0u;
      v99 = 0u;
      memset(buf, 0, sizeof(buf));
      os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      *(_DWORD *)v102 = 136315906;
      *(_QWORD *)&v102[4] = "operator[]";
      *(_WORD *)&v102[12] = 1024;
      *(_DWORD *)&v102[14] = 797;
      *(_WORD *)&v102[18] = 2048;
      *(_QWORD *)&v102[20] = v16;
      *(_WORD *)&v102[28] = 2048;
      *(_QWORD *)&v102[30] = v18;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
LABEL_122:
      v95 = 0;
      v98 = 0u;
      v99 = 0u;
      memset(buf, 0, sizeof(buf));
      os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      *(_DWORD *)v106 = 136315906;
      *(_QWORD *)&v106[4] = "operator[]";
      *(_WORD *)&v106[12] = 1024;
      *(_DWORD *)&v106[14] = 797;
      v107 = 2048;
      v108 = v16;
      v109 = 2048;
      v110 = v18;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
LABEL_123:
      v95 = 0;
      v98 = 0u;
      v99 = 0u;
      memset(buf, 0, sizeof(buf));
      os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      *(_DWORD *)v106 = 136315906;
      *(_QWORD *)&v106[4] = "operator[]";
      *(_WORD *)&v106[12] = 1024;
      *(_DWORD *)&v106[14] = 468;
      v107 = 2048;
      v108 = a6;
      v109 = 2048;
      v110 = v18;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
LABEL_124:
      *(_QWORD *)v106 = 0;
      v98 = 0u;
      v99 = 0u;
      memset(buf, 0, sizeof(buf));
      v21 = MEMORY[0x24BDACB70];
      os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      *(_DWORD *)v102 = 136315906;
      *(_QWORD *)&v102[4] = "operator[]";
      *(_WORD *)&v102[12] = 1024;
      *(_DWORD *)&v102[14] = 797;
      *(_WORD *)&v102[18] = 2048;
      *(_QWORD *)&v102[20] = v17;
      *(_WORD *)&v102[28] = 2048;
      *(_QWORD *)&v102[30] = v18;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
      goto LABEL_125;
    }
LABEL_75:
    v21 = v16[17];
    *((_QWORD *)v13 + 35) = v21;
    if (v21)
    {
      if (v21 > 0x666666666666666)
      {
LABEL_127:
        re::internal::assertLog((re::internal *)6, v60, "assertion failure: '%s' (%s:line %i) Size overflow in FixedArray<T>::init(). Element size = %zu, count = %zu", "!overflow", "init", 324, 40, v21);
        _os_crash();
        __break(1u);
LABEL_128:
        re::internal::assertLog((re::internal *)4, v62, "assertion failure: '%s' (%s:line %i) Out of memory.", "m_data", "init", 327);
        _os_crash();
        __break(1u);
      }
      *((_QWORD *)v13 + 36) = v61;
      if (!v61)
        goto LABEL_128;
      v63 = v21 - 1;
      if (v21 != 1)
      {
        do
        {
          *(_QWORD *)(v61 + 32) = 0;
          *(_QWORD *)(v61 + 8) = 0;
          *(_QWORD *)(v61 + 16) = 0;
          *(_QWORD *)v61 = 0;
          *(_DWORD *)(v61 + 24) = 0;
          v61 += 40;
          --v63;
        }
        while (v63);
      }
      *(_QWORD *)(v61 + 32) = 0;
      *(_QWORD *)(v61 + 8) = 0;
      *(_QWORD *)(v61 + 16) = 0;
      *(_QWORD *)v61 = 0;
      *(_DWORD *)(v61 + 24) = 0;
    }
    v64 = v16[17];
    if (v64)
    {
      v28 = 0;
      v17 = 40;
      v40 = (unint64_t)&str_110;
      do
      {
        v65 = v16[12];
        if (v65)
        {
          v66 = v16[14];
          v43 = v66 + 40 * v65;
          do
          {
            if (v28 == *(_DWORD *)(v66 + 32))
            {
              v18 = v16[17];
              if (v18 <= v28)
                goto LABEL_115;
              v67 = v16[19] + 200 * v28;
              v68 = *(_QWORD *)(v67 + 16);
              if (v68)
              {
                v69 = 0;
                a6 = *(unint64_t **)(v67 + 32);
                while (!re::StringID::operator==((_QWORD *)v66, a6))
                {
                  ++v69;
                  a6 += 5;
                  if (v68 == v69)
                    goto LABEL_93;
                }
                v8 = v69;
LABEL_93:
                v13 = (re::RigEnvironment *)v92;
              }
              v18 = *((_QWORD *)v13 + 35);
              if (v18 <= v28)
                goto LABEL_116;
              v70 = *((_QWORD *)v13 + 36);
              a6 = (unint64_t *)(v70 + 40 * v28);
              v71 = re::StringID::StringID((re::StringID *)buf, (const StringID *)(v66 + 16));
              *(_QWORD *)&buf[16] = v8;
              v73 = a6 + 2;
              v72 = a6[2];
              v74 = a6[1];
              if (v72 >= v74)
              {
                v75 = v72 + 1;
                if (v74 < v72 + 1)
                {
                  if (*a6)
                  {
                    v76 = 2 * v74;
                    v77 = v74 == 0;
                    v78 = 8;
                    if (!v77)
                      v78 = v76;
                    if (v78 <= v75)
                      v79 = v75;
                    else
                      v79 = v78;
                    re::DynamicArray<re::RigRuntimeData::RigGraphRunTimeBoundParameter>::setCapacity((_QWORD *)(v70 + 40 * v28), v79);
                  }
                  else
                  {
                    re::DynamicArray<re::RigRuntimeData::RigGraphRunTimeBoundParameter>::setCapacity((_QWORD *)(v70 + 40 * v28), v75);
                    ++*(_DWORD *)(v70 + 40 * v28 + 24);
                  }
                }
                v72 = *v73;
                v16 = v90;
              }
              v80 = v70 + 40 * v28;
              v81 = (unint64_t *)(*(_QWORD *)(v80 + 32) + 24 * v72);
              v82 = buf[0];
              *v81 = *v81 & 0xFFFFFFFFFFFFFFFELL | buf[0] & 1;
              *v81 = *(_QWORD *)buf & 0xFFFFFFFFFFFFFFFELL | v82 & 1;
              v81[1] = *(_QWORD *)&buf[8];
              *(_QWORD *)buf = 0;
              *(_QWORD *)&buf[8] = &str_110;
              v81[2] = *(_QWORD *)&buf[16];
              ++*v73;
              ++*(_DWORD *)(v80 + 24);
              re::StringID::destroyString((re::StringID *)buf);
              v13 = (re::RigEnvironment *)v92;
            }
            v66 += 40;
          }
          while (v66 != v43);
          v64 = v16[17];
        }
        ++v28;
      }
      while (v28 < v64);
    }
    *((_QWORD *)v13 + 1) = v83;
    *((_BYTE *)v13 + 296) = 1;
  }
}

double re::RigRuntimeData::constructRigCommands@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X2>, _QWORD *a4@<X3>, _anonymous_namespace_ **a5@<X4>, _QWORD *a6@<X5>, _anonymous_namespace_ *a7@<X6>, uint64_t a8@<X7>, unint64_t a9@<X8>, _QWORD *a10, _QWORD *a11, re::BindNode **a12)
{
  double result;

  if (*(_BYTE *)(a1 + 296))
    re::RigRuntimeData::constructRigCommandsForRigGraph(a1, a2, (uint64_t)a3, (uint64_t)a4, (uint64_t)a5, (uint64_t)a6, (uint64_t)a7, a8, a10, a11, a12);
  else
    *(_QWORD *)&result = re::RigRuntimeData::constructRigCommandsForRig((_QWORD *)a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11).n128_u64[0];
  return result;
}

void re::RigRuntimeData::constructRigCommandsForRigGraph(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, _QWORD *a9, _QWORD *a10, re::BindNode **a11)
{
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  _anonymous_namespace_ **v17;
  unsigned int **v18;
  _QWORD *v19;
  _QWORD *v20;
  _anonymous_namespace_ *v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  _anonymous_namespace_ **v26;
  _QWORD *v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  _anonymous_namespace_ *v32;
  _anonymous_namespace_ *v33;
  unint64_t v34;
  unint64_t v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  const re::BindPoint *v39;
  unint64_t *v40;
  const re::BindPoint *v41;
  const re::BindPoint *v42;
  uint64_t v43;
  unint64_t v44;
  size_t v45;
  unsigned int *v46;
  unsigned int *v47;
  unint64_t v48;
  uint64_t v49;
  uint64_t v50;
  _anonymous_namespace_ *v51;
  uint64_t v52;
  uint64_t v53;
  _QWORD *v54;
  _QWORD *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  unint64_t v59;
  size_t v60;
  uint64_t v61;
  unint64_t v62;
  uint64_t v63;
  re::RigGraphNode *v64;
  uint64_t v65;
  uint64_t v66;
  _QWORD *v67;
  uint64_t v68;
  _OWORD *v69;
  __int128 v70;
  unint64_t *v71;
  uint64_t v72;
  size_t v73;
  re::Allocator *v74;
  _QWORD *v75;
  uint64_t v76;
  uint64_t v77;
  _anonymous_namespace_ *v78;
  _OWORD *v79;
  uint64_t v80;
  size_t v81;
  uint64_t v82;
  unint64_t v83;
  size_t v84;
  uint64_t v85;
  unint64_t v86;
  size_t v87;
  uint64_t v88;
  unint64_t v89;
  size_t v90;
  uint64_t v91;
  int v92;
  uint64_t v93;
  uint64_t v94;
  _QWORD *v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  __n128 v100;
  __int128 v101;
  unint64_t v102;
  __int128 v103;
  uint64_t v104;
  uint64_t v105;
  unint64_t v106;
  uint64_t v107;
  _QWORD *v108;
  re::RigEnvironment *v109;
  uint64_t v110;
  uint64_t v111;
  unsigned int *v112;
  _QWORD *v113;
  _QWORD *v114;
  unsigned int **v115;
  _anonymous_namespace_ *v116;
  _anonymous_namespace_ *v117;
  _anonymous_namespace_ *v118;
  _anonymous_namespace_ *v119;
  char v120[8];
  __int128 v121;
  uint64_t v122;
  char v123;
  uint64_t v124;
  __int128 v125;
  uint64_t v126;
  char v127;
  char v128[8];
  __int128 v129;
  uint64_t v130;
  char v131;
  uint64_t v132;
  __int128 v133;
  __int128 v134;
  uint64_t v135;
  uint64_t v136;
  _QWORD v137[2];
  unint64_t v138;
  int v139;
  _QWORD *v140;
  char v141[24];
  __int128 v142;
  __int128 v143;
  char v144[24];
  __int128 v145;
  __int128 v146;
  _BYTE v147[60];
  uint64_t v148;
  _BYTE v149[32];
  int v150;
  uint64_t v151;
  uint64_t v152[3];
  int v153;
  uint64_t v154[4];
  int v155;
  _OWORD v156[2];
  int v157;
  uint64_t v158[4];
  int v159;
  _OWORD v160[2];
  int v161;
  uint64_t v162[4];
  int v163;
  uint64_t v164;
  uint64_t v165;
  _OWORD v166[3];
  __int128 v167;
  __int128 v168;
  uint64_t v169;
  uint64_t v170;
  int v171;
  _BYTE v172[34];
  __n128 v173[3];
  __int128 v174;
  __int128 v175;
  __int128 v176;
  uint64_t v177;
  int v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  int v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  int v186;
  __int128 v187;
  __int128 v188;
  int v189;
  uint64_t v190;
  _BYTE v191[28];
  __int16 v192;
  _BYTE v193[10];
  uint64_t v194;
  int v195;
  uint64_t v196;
  uint64_t v197;
  uint64_t v198;
  int v199;
  uint64_t v200;
  uint64_t v201;
  uint64_t v202;
  int v203;
  __int128 v204;
  __int128 v205;
  int v206;
  uint64_t v207;
  __n128 v208;
  __int128 v209;
  __int128 v210;
  __int128 v211;
  __int128 v212;
  _BYTE v213[12];
  __int16 v214;
  int v215;
  __int16 v216;
  unint64_t v217;
  __int16 v218;
  unint64_t v219;
  uint64_t v220;
  int v221;
  const char *v222;
  __int16 v223;
  int v224;
  __int16 v225;
  unint64_t v226;
  __int16 v227;
  uint64_t v228;
  uint64_t v229;

  MEMORY[0x24BDAC7A8](a1);
  v114 = v20;
  v118 = v21;
  v23 = v22;
  v229 = *MEMORY[0x24BDAC8D0];
  if (!*(_QWORD *)(v14 + 224))
    goto LABEL_86;
  v24 = 0xBF58476D1CE4E5B9 * (v15 ^ ((unint64_t)v15 >> 30));
  v25 = *(unsigned int *)(*(_QWORD *)(v14 + 232)
                        + 4
                        * (((0x94D049BB133111EBLL * (v24 ^ (v24 >> 27))) ^ ((0x94D049BB133111EBLL * (v24 ^ (v24 >> 27))) >> 31))
                         % *(unsigned int *)(v14 + 248)));
  if ((_DWORD)v25 == 0x7FFFFFFF)
    goto LABEL_86;
  v26 = v17;
  v27 = v16;
  v28 = *(_QWORD *)(v14 + 240);
  while (*(_DWORD *)(v28 + 24 * v25 + 12) != (_DWORD)v15)
  {
    LODWORD(v25) = *(_DWORD *)(v28 + 24 * v25 + 8) & 0x7FFFFFFF;
    if ((_DWORD)v25 == 0x7FFFFFFF)
      goto LABEL_86;
  }
  v29 = *(unsigned int *)(v28 + 24 * v25 + 16);
  if (*(_QWORD *)(v14 + 208) <= v29 || (v30 = *(_QWORD *)(v14 + 216), !*(_QWORD *)(v30 + 40 * v29)))
  {
LABEL_86:
    re::DynamicString::format((re::DynamicString *)"Invalid rig entry handle: %u.", (re::DynamicString *)&v208, v15);
    v100 = v208;
    v101 = v209;
    *(_BYTE *)v23 = 0;
    *(_QWORD *)(v23 + 8) = 100;
    *(_QWORD *)(v23 + 16) = &re::AssetErrorCategory(void)::instance;
    *(__n128 *)(v23 + 24) = v100;
    *(_OWORD *)(v23 + 40) = v101;
    return;
  }
  v115 = v18;
  v106 = v15;
  v107 = v23;
  v108 = v19;
  memset(v147, 0, sizeof(v147));
  v148 = 0x7FFFFFFFLL;
  memset(v149, 0, sizeof(v149));
  v150 = 0;
  v151 = 0x7FFFFFFFLL;
  memset(v152, 0, sizeof(v152));
  v164 = 0;
  memset(v154, 0, sizeof(v154));
  v153 = 0;
  v155 = 0;
  memset(v156, 0, sizeof(v156));
  v157 = 0;
  v159 = 0;
  memset(v158, 0, sizeof(v158));
  v161 = 0;
  memset(v160, 0, sizeof(v160));
  memset(v162, 0, sizeof(v162));
  v163 = 0;
  v110 = v14;
  v109 = (re::RigEnvironment *)(v14 + 96);
  re::RigHierarchy::init((uint64_t)v147, v14 + 96, *(_QWORD *)v14, a9, *(_QWORD *)(v30 + 40 * v29 + 32), *(_QWORD *)(v30 + 40 * v29 + 16));
  v32 = v26[1];
  v113 = v27;
  if (v32)
  {
    v33 = *v26;
    v116 = (_anonymous_namespace_ *)((char *)*v26 + 4 * (_QWORD)v32);
    v12 = 0x3F80000000000000;
    while (1)
    {
      v34 = *(unsigned int *)v33;
      v35 = v27[17];
      if (v35 <= v34)
        goto LABEL_116;
      v36 = *((_QWORD *)v118 + 1);
      if (v36 <= v34)
        goto LABEL_117;
      v117 = v33;
      v37 = v27[19];
      v38 = v37 + 24 * v34;
      v41 = *(const re::BindPoint **)(v38 + 8);
      v40 = (unint64_t *)(v38 + 8);
      v39 = v41;
      if (v41)
        break;
LABEL_21:
      v33 = (_anonymous_namespace_ *)((char *)v117 + 4);
      v27 = v113;
      if ((_anonymous_namespace_ *)((char *)v117 + 4) == v116)
        goto LABEL_22;
    }
    v42 = 0;
    v11 = *(_QWORD *)v118 + 48 * v34;
    v34 = v37 + 24 * v34 + 16;
    v13 = 8;
    while (1)
    {
      v208.n128_u64[1] = 1065353216;
      v208.n128_u64[0] = 0x3F8000003F800000;
      *((_QWORD *)&v209 + 1) = 0x3F80000000000000;
      *(_QWORD *)&v209 = 0;
      v210 = 0uLL;
      re::EvaluationTree::createInputRegister(a9, &v208, v173);
      v208.n128_u64[1] = 1065353216;
      v208.n128_u64[0] = 0x3F8000003F800000;
      *((_QWORD *)&v209 + 1) = 0x3F80000000000000;
      *(_QWORD *)&v209 = 0;
      v210 = 0uLL;
      re::DynamicArray<re::EvaluationSRT>::add((_anonymous_namespace_ *)(a10 + 41), v173);
      re::DynamicArray<re::Matrix3x3<float>>::add((_anonymous_namespace_ *)(a10 + 86), (uint64_t)&v208);
      v43 = a10[43] - 1;
      *(_QWORD *)&v166[0] = a10;
      *((_QWORD *)&v166[0] + 1) = v43;
      re::makeSkeletalPoseJointBindNode((re *)v11, v42, (uint64_t)&v208);
      re::EvaluationContextManager::bindInputHandle<re::GenericSRT<float>>(*(_QWORD **)&v166[0], (uint64_t)v166, &v208, 0);
      re::DynamicArray<re::BindPoint::BindPointData>::deinit((uint64_t)&v208.n128_i64[1]);
      re::DynamicArray<re::BindPoint::BindPointData>::deinit((uint64_t)&v208.n128_i64[1]);
      v44 = *v40;
      if (*v40 <= (unint64_t)v42)
        break;
      v23 = *(_QWORD *)(*(_QWORD *)v34 + v13);
      v45 = strlen((const char *)v23);
      v208.n128_u64[0] = v23;
      v208.n128_u64[1] = v45;
      re::RigHierarchy::setLocalSpaceJointTransform((_anonymous_namespace_ *)v147, (uint64_t)&v208, (uint64_t *)v173, (uint64_t)v144);
      if (!v144[0] && (_QWORD)v145)
      {
        if ((BYTE8(v145) & 1) != 0)
          (*(void (**)(void))(*(_QWORD *)v145 + 40))();
        v145 = 0u;
        v146 = 0u;
      }
      v42 = (const re::BindPoint *)((char *)v42 + 1);
      v13 += 16;
      if (v39 == v42)
        goto LABEL_21;
    }
    *(_QWORD *)v191 = 0;
    v212 = 0u;
    v211 = 0u;
    v210 = 0u;
    v209 = 0u;
    v208 = 0u;
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    *(_DWORD *)v213 = 136315906;
    *(_QWORD *)&v213[4] = "operator[]";
    v214 = 1024;
    v215 = 476;
    v216 = 2048;
    v217 = (unint64_t)v42;
    v218 = 2048;
    v219 = v44;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
    goto LABEL_113;
  }
LABEL_22:
  v46 = v115[1];
  if (v46)
  {
    v47 = *v115;
    v111 = (uint64_t)&(*v115)[(_QWORD)v46];
    while (1)
    {
      v11 = *v47;
      v35 = v27[22];
      if (v35 <= v11)
        goto LABEL_118;
      v48 = v114[1];
      if (v48 <= v11)
        goto LABEL_119;
      v112 = v47;
      v49 = v27[24];
      v50 = v49 + 24 * v11;
      v51 = *(_anonymous_namespace_ **)(v50 + 8);
      v12 = v50 + 8;
      v119 = v51;
      if (v51)
        break;
LABEL_37:
      v47 = v112 + 1;
      v27 = v113;
      if (v112 + 1 == (unsigned int *)v111)
        goto LABEL_38;
    }
    v52 = 0;
    v13 = 0;
    v53 = *v114 + 40 * v11;
    v34 = v53 + 16;
    v54 = (_QWORD *)(v53 + 32);
    v55 = (_QWORD *)(v49 + 24 * v11 + 16);
    v56 = 8;
    while (1)
    {
      v11 = *(_QWORD *)v34;
      if (*(_QWORD *)v34 <= v13)
        break;
      v57 = *v54 + v52;
      v208.n128_u32[0] = 4;
      v209 = 0uLL;
      v208.n128_u64[1] = 0;
      re::DynamicArray<re::EvaluationRegister>::add((_anonymous_namespace_ *)(a9 + 228), (uint64_t)&v208);
      v208.n128_u64[0] = a9[230] - 1;
      re::DynamicArray<unsigned long>::add(a9 + 21, &v208);
      re::DynamicArray<re::Matrix4x4<float>>::add((_anonymous_namespace_ *)(a9 + 61), v57);
      v11 = *(_QWORD *)(a9[25] + 8 * a9[23] - 8);
      v211 = 0u;
      v210 = 0u;
      v209 = 0u;
      v208 = 0u;
      *(_QWORD *)v213 = v11;
      re::DynamicArray<unsigned long>::add(a10 + 21, v213);
      re::DynamicArray<re::Matrix4x4<float>>::add((_anonymous_namespace_ *)(a10 + 66), (uint64_t)&v208);
      v58 = a10[23] - 1;
      v173[0].n128_u64[0] = (unint64_t)a10;
      v173[0].n128_u64[1] = v58;
      v59 = *(_QWORD *)v34;
      if (*(_QWORD *)v34 <= v13)
        goto LABEL_114;
      re::EvaluationInputHandle<re::Matrix4x4<float>>::bindEvaluationInput<re::Matrix4x4<float>>(v173, (const re::IntrospectionBase *)(*v54 + v52));
      v59 = *(_QWORD *)v12;
      if (*(_QWORD *)v12 <= v13)
        goto LABEL_115;
      v23 = *(_QWORD *)(*v55 + v56);
      v60 = strlen((const char *)v23);
      v208.n128_u64[0] = v23;
      v208.n128_u64[1] = v60;
      re::RigHierarchy::setModelSpaceJointTransform((uint64_t)v147, (uint64_t)&v208, v11, (uint64_t)v141);
      if (!v141[0] && (_QWORD)v142)
      {
        if ((BYTE8(v142) & 1) != 0)
          (*(void (**)(void))(*(_QWORD *)v142 + 40))();
        v142 = 0u;
        v143 = 0u;
      }
      ++v13;
      v56 += 16;
      v52 += 64;
      if (v119 == (_anonymous_namespace_ *)v13)
        goto LABEL_37;
    }
LABEL_113:
    v173[0].n128_u64[0] = 0;
    v212 = 0u;
    v211 = 0u;
    v210 = 0u;
    v209 = 0u;
    v208 = 0u;
    v59 = MEMORY[0x24BDACB70];
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    *(_DWORD *)v213 = 136315906;
    *(_QWORD *)&v213[4] = "operator[]";
    v214 = 1024;
    v215 = 797;
    v216 = 2048;
    v217 = v13;
    v218 = 2048;
    v219 = v11;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_114:
    *(_QWORD *)&v166[0] = 0;
    v212 = 0u;
    v211 = 0u;
    v210 = 0u;
    v209 = 0u;
    v208 = 0u;
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    *(_DWORD *)v213 = 136315906;
    *(_QWORD *)&v213[4] = "operator[]";
    v214 = 1024;
    v215 = 797;
    v216 = 2048;
    v217 = v13;
    v218 = 2048;
    v219 = v59;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_115:
    *(_QWORD *)&v166[0] = 0;
    v212 = 0u;
    v211 = 0u;
    v210 = 0u;
    v209 = 0u;
    v208 = 0u;
    v35 = MEMORY[0x24BDACB70];
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    *(_DWORD *)v213 = 136315906;
    *(_QWORD *)&v213[4] = "operator[]";
    v214 = 1024;
    v215 = 476;
    v216 = 2048;
    v217 = v13;
    v218 = 2048;
    v219 = v59;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_116:
    v173[0].n128_u64[0] = 0;
    v212 = 0u;
    v211 = 0u;
    v210 = 0u;
    v209 = 0u;
    v208 = 0u;
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    *(_DWORD *)v213 = 136315906;
    *(_QWORD *)&v213[4] = "operator[]";
    v214 = 1024;
    v215 = 797;
    v216 = 2048;
    v217 = v34;
    v218 = 2048;
    v219 = v35;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_117:
    re::internal::assertLog((re::internal *)6, v31, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 251, v34, v36);
    _os_crash();
    __break(1u);
LABEL_118:
    v173[0].n128_u64[0] = 0;
    v212 = 0u;
    v211 = 0u;
    v210 = 0u;
    v209 = 0u;
    v208 = 0u;
    v23 = MEMORY[0x24BDACB70];
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    *(_DWORD *)v213 = 136315906;
    *(_QWORD *)&v213[4] = "operator[]";
    v214 = 1024;
    v215 = 797;
    v216 = 2048;
    v217 = v11;
    v218 = 2048;
    v219 = v35;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_119:
    re::internal::assertLog((re::internal *)6, v31, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 251, v11, v48);
    _os_crash();
    __break(1u);
LABEL_120:
    v132 = 0;
    v175 = 0u;
    v174 = 0u;
    memset(v173, 0, sizeof(v173));
    v62 = MEMORY[0x24BDACB70];
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    *(_DWORD *)v191 = 136315906;
    *(_QWORD *)&v191[4] = "operator[]";
    *(_WORD *)&v191[12] = 1024;
    *(_DWORD *)&v191[14] = 789;
    *(_WORD *)&v191[18] = 2048;
    *(_QWORD *)&v191[20] = v13;
    v192 = 2048;
    *(_QWORD *)v193 = v23;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_121:
    v124 = 0;
    v168 = 0u;
    v167 = 0u;
    memset(v166, 0, sizeof(v166));
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    v171 = 136315906;
    *(_QWORD *)v172 = "operator[]";
    *(_WORD *)&v172[8] = 1024;
    *(_DWORD *)&v172[10] = 468;
    *(_WORD *)&v172[14] = 2048;
    *(_QWORD *)&v172[16] = v62;
    *(_WORD *)&v172[24] = 2048;
    *(_QWORD *)&v172[26] = v23;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_122:
    re::internal::assertLog((re::internal *)6, v82, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 251, v62, v83);
    _os_crash();
    __break(1u);
LABEL_123:
    re::internal::assertLog((re::internal *)6, v85, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 251, v62, v86);
    _os_crash();
    __break(1u);
LABEL_124:
    re::internal::assertLog((re::internal *)6, v88, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 251, v62, v89);
    _os_crash();
    __break(1u);
    goto LABEL_125;
  }
LABEL_38:
  v61 = *(_QWORD *)(v110 + 88);
  v62 = *(_QWORD *)(v61 + 16);
  v12 = v106;
  if (v62 <= v106)
  {
LABEL_125:
    v173[0].n128_u64[0] = 0;
    v212 = 0u;
    v211 = 0u;
    v210 = 0u;
    v209 = 0u;
    v208 = 0u;
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    *(_DWORD *)v213 = 136315906;
    *(_QWORD *)&v213[4] = "operator[]";
    v214 = 1024;
    v215 = 797;
    v216 = 2048;
    v217 = v12;
    v218 = 2048;
    v219 = v62;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
    goto LABEL_126;
  }
  v63 = *(_QWORD *)(v61 + 32);
  v140 = 0;
  v138 = 0;
  v137[0] = 0;
  v137[1] = 0;
  v139 = 0;
  v62 = *(_QWORD *)(v110 + 280);
  if (v62 <= v106)
  {
LABEL_126:
    v173[0].n128_u64[0] = 0;
    v212 = 0u;
    v211 = 0u;
    v210 = 0u;
    v209 = 0u;
    v208 = 0u;
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    *(_DWORD *)v213 = 136315906;
    *(_QWORD *)&v213[4] = "operator[]";
    v214 = 1024;
    v215 = 476;
    v216 = 2048;
    v217 = v12;
    v218 = 2048;
    v219 = v62;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_127:
    *(_QWORD *)&v166[0] = 0;
    v212 = 0u;
    v211 = 0u;
    v210 = 0u;
    v209 = 0u;
    v208 = 0u;
    v91 = MEMORY[0x24BDACB70];
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    v173[0].n128_u32[0] = 136315906;
    *(unint64_t *)((char *)v173[0].n128_u64 + 4) = (unint64_t)"operator[]";
    v173[0].n128_u16[6] = 1024;
    *(unsigned __int32 *)((char *)&v173[0].n128_u32[3] + 2) = 789;
    v173[1].n128_u16[1] = 2048;
    *(unint64_t *)((char *)v173[1].n128_u64 + 4) = 0;
    v173[1].n128_u16[6] = 2048;
    *(unint64_t *)((char *)&v173[1].n128_u64[1] + 6) = 0;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_128:
    v165 = 0;
    v168 = 0u;
    v167 = 0u;
    memset(v166, 0, sizeof(v166));
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    v221 = 136315906;
    v222 = "operator[]";
    v223 = 1024;
    v224 = 468;
    v225 = 2048;
    v226 = v62;
    v227 = 2048;
    v228 = v91;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_129:
    re::internal::assertLog((re::internal *)6, v76, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 658, 0, 0);
    _os_crash();
    __break(1u);
  }
  v62 = (unint64_t)v152;
  v64 = (re::RigGraphNode *)(v63 + 200 * v106);
  v65 = *(_QWORD *)(v110 + 288);
  v66 = v65 + 40 * v106;
  v68 = *(_QWORD *)(v66 + 16);
  v67 = (_QWORD *)(v66 + 16);
  re::DynamicArray<re::RigDataValue>::resize((uint64_t)v137, v68 + 1);
  re::RigGraphNode::inputValue(v64, v109, (re::EvaluationTree *)a9, *(re::Allocator **)v110, 0, (uint64_t)v213);
  v69 = (_OWORD *)v220;
  v70 = *(_OWORD *)v147;
  *(_QWORD *)(v220 + 16) = *(_QWORD *)&v147[16];
  *v69 = v70;
  re::HashTable<re::DynamicString,unsigned long,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::operator=((uint64_t)v69 + 24, (uint64_t)&v147[24]);
  re::HashTable<re::DynamicString,unsigned long,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::operator=((uint64_t)v69 + 72, (uint64_t)v149);
  re::DynamicArray<re::Pair<re::DynamicString,re::RigDataTypeClass,true>>::operator=((uint64_t)v69 + 120, v152);
  re::DynamicArray<re::DynamicArray<re::RigDataValue>>::operator=((uint64_t)(v69 + 10), &v154[1]);
  re::DynamicArray<re::StringID>::operator=((uint64_t)v69 + 200, (uint64_t *)v156 + 1);
  re::DynamicArray<unsigned long>::operator=((uint64_t)(v69 + 15), &v158[1]);
  re::DynamicArray<re::RigHierarchyJointTransform>::operator=((uint64_t)v69 + 280, (uint64_t *)v160 + 1);
  re::DynamicArray<unsigned long>::operator=((uint64_t)(v69 + 20), &v162[1]);
  if (!v138)
    goto LABEL_127;
  re::RigDataValue::operator=(v140, (uint64_t)v213);
  if (*v67)
  {
    v71 = (unint64_t *)(*(_QWORD *)(v65 + 40 * v106 + 32) + 16);
    v72 = 24 * *v67;
    v12 = 288;
    while (1)
    {
      v13 = *v71;
      re::RigGraphNode::inputValue(v64, v109, (re::EvaluationTree *)a9, *(re::Allocator **)v110, *v71, (uint64_t)&v208);
      v73 = strlen((const char *)*(v71 - 1));
      if (!LOBYTE(v166[0]))
        break;
      v23 = v138;
      if (v138 <= v13)
        goto LABEL_120;
      re::RigDataValue::operator=(&v140[36 * v13], (uint64_t)&v208);
      re::RigDataValue::~RigDataValue((re::RigDataValue *)&v208);
      v71 += 3;
      v72 -= 24;
      if (!v72)
        goto LABEL_46;
    }
    v173[0] = *(__n128 *)((char *)v166 + 8);
    re::DynamicString::DynamicString((re::DynamicString *)&v173[1], (const re::DynamicString *)((char *)&v166[1] + 8));
    *(_BYTE *)v107 = 0;
    *(__n128 *)(v107 + 8) = v173[0];
    v102 = v173[2].n128_u64[1];
    *(_QWORD *)(v107 + 24) = v173[1].n128_u64[0];
    *(_QWORD *)(v107 + 48) = v102;
    *(__n128 *)(v107 + 32) = *(__n128 *)((char *)&v173[1] + 8);
    if (*((_QWORD *)&v166[1] + 1) && (v166[2] & 1) != 0)
      (*(void (**)(void))(**((_QWORD **)&v166[1] + 1) + 40))();
    re::RigDataValue::~RigDataValue((re::RigDataValue *)&v208);
    goto LABEL_111;
  }
LABEL_46:
  re::EvaluationContextManager::EvaluationContextManager((re::EvaluationContextManager *)&v208);
  re::EvaluationContextManager::init((re::EvaluationContextManager *)&v208, *(re::Allocator **)v110);
  v194 = 0;
  *(_QWORD *)&v193[2] = 0;
  v195 = 1;
  v198 = 0;
  v196 = 0;
  v197 = 0;
  v199 = 0;
  v202 = 0;
  v200 = 0;
  v201 = 0;
  v207 = 0;
  v204 = 0u;
  v205 = 0u;
  v203 = 0;
  v206 = 0;
  v74 = *(re::Allocator **)v110;
  *(_QWORD *)&v191[16] = v109;
  v191[24] = 0;
  *(_QWORD *)v191 = v74;
  *(_QWORD *)&v191[8] = 0;
  re::RigGraphCompilation::init((re::RigGraphCompilation *)&v193[2], v74);
  re::RigGraphSystem::compile((uint64_t)v191, v64, (uint64_t)a9, (re::EvaluationContextManager *)&v208, v140, v138, (uint64_t)&v132);
  if ((_BYTE)v132)
  {
    v173[0].n128_u64[0] = 0;
    v173[2] = 0u;
    v174 = 0u;
    v175 = 0u;
    v176 = 0u;
    v177 = 0;
    v178 = 1;
    v181 = 0;
    v179 = 0;
    v180 = 0;
    v182 = 0;
    v185 = 0;
    v183 = 0;
    v184 = 0;
    v186 = 0;
    v190 = 0;
    v187 = 0u;
    v188 = 0u;
    v189 = 0;
    re::RigGraphCompilation::operator=((_QWORD *)&v176 + 1, &v133);
    v75 = v108;
    re::FixedArray<re::EvaluationRegisterId<int>>::init<>(&v173[2].n128_u64[1], *(_QWORD *)v110, v108[1]);
    re::FixedArray<re::EvaluationSRT>::init<>(&v175, *(_QWORD *)v110, v108[1]);
    if (!*((_QWORD *)&v188 + 1))
      goto LABEL_129;
    if (v108[1])
    {
      v77 = 0;
      v62 = 0;
      v12 = (uint64_t)v166;
      v78 = *(_anonymous_namespace_ **)(v190 + 184);
      v79 = (_OWORD *)(v107 + 8);
      v80 = 8;
      do
      {
        v81 = strlen(*(const char **)(*v75 + v80));
        *(_QWORD *)&v166[0] = *(_QWORD *)(*v75 + v80);
        *((_QWORD *)&v166[0] + 1) = v81;
        re::RigHierarchy::getModelSpaceJointTransform(v78, (uint64_t)v166, (uint64_t)v128);
        if (!v128[0])
        {
          v166[0] = v129;
          re::DynamicString::DynamicString((re::DynamicString *)&v166[1], (const re::DynamicString *)&v130);
          *(_BYTE *)v107 = 0;
          *v79 = v166[0];
          v96 = *((_QWORD *)&v166[2] + 1);
          *(_QWORD *)(v107 + 24) = *(_QWORD *)&v166[1];
          *(_QWORD *)(v107 + 48) = v96;
          *(_OWORD *)(v107 + 32) = *(_OWORD *)((char *)&v166[1] + 8);
          v92 = 1;
LABEL_61:
          v75 = v108;
          goto LABEL_70;
        }
        v23 = v174;
        if ((unint64_t)v174 <= v62)
          goto LABEL_121;
        *(_QWORD *)(*((_QWORD *)&v174 + 1) + 8 * v62) = v129;
        v75 = v108;
        v83 = v108[1];
        if (v83 <= v62)
          goto LABEL_122;
        v84 = strlen(*(const char **)(*v108 + v80));
        *(_QWORD *)&v166[0] = *(_QWORD *)(*v108 + v80);
        *((_QWORD *)&v166[0] + 1) = v84;
        re::RigHierarchy::getLocalSpaceJointScale(v78, (uint64_t)v166, (uint64_t)&v171);
        if (!(_BYTE)v171)
        {
          v166[0] = *(_OWORD *)&v172[4];
          re::DynamicString::DynamicString((re::DynamicString *)&v166[1], (const re::DynamicString *)&v172[20]);
          *(_BYTE *)v107 = 0;
          *v79 = v166[0];
          v97 = *((_QWORD *)&v166[2] + 1);
          *(_QWORD *)(v107 + 24) = *(_QWORD *)&v166[1];
          *(_QWORD *)(v107 + 48) = v97;
          *(_OWORD *)(v107 + 32) = *(_OWORD *)((char *)&v166[1] + 8);
          v92 = 1;
          goto LABEL_69;
        }
        v86 = v108[1];
        if (v86 <= v62)
          goto LABEL_123;
        v87 = strlen(*(const char **)(*v108 + v80));
        *(_QWORD *)&v166[0] = *(_QWORD *)(*v108 + v80);
        *((_QWORD *)&v166[0] + 1) = v87;
        re::RigHierarchy::getLocalSpaceJointRotation(v78, (uint64_t)v166, (uint64_t)&v124);
        if ((_BYTE)v124)
        {
          v89 = v108[1];
          if (v89 <= v62)
            goto LABEL_124;
          v90 = strlen(*(const char **)(*v108 + v80));
          *(_QWORD *)&v166[0] = *(_QWORD *)(*v108 + v80);
          *((_QWORD *)&v166[0] + 1) = v90;
          re::RigHierarchy::getLocalSpaceJointTranslation(v78, (uint64_t)v166, (uint64_t)v120);
          if (v120[0])
          {
            v91 = *((_QWORD *)&v175 + 1);
            if (*((_QWORD *)&v175 + 1) <= v62)
              goto LABEL_128;
            v92 = 0;
            v93 = v121;
            v94 = v125;
            v95 = (_QWORD *)(v176 + v77);
            *v95 = *(_QWORD *)&v172[4];
            v95[1] = v94;
            v95[2] = v93;
            goto LABEL_67;
          }
          v166[0] = v121;
          re::DynamicString::DynamicString((re::DynamicString *)&v166[1], (const re::DynamicString *)&v122);
          *(_BYTE *)v107 = 0;
          *v79 = v166[0];
          v99 = *((_QWORD *)&v166[2] + 1);
          *(_QWORD *)(v107 + 24) = *(_QWORD *)&v166[1];
          *(_QWORD *)(v107 + 48) = v99;
          *(_OWORD *)(v107 + 32) = *(_OWORD *)((char *)&v166[1] + 8);
          if (v120[0])
          {
            v92 = 1;
LABEL_67:
            v75 = v108;
            goto LABEL_68;
          }
          v75 = v108;
          if (v122 && (v123 & 1) != 0)
          {
            (*(void (**)(void))(*(_QWORD *)v122 + 40))();
            v75 = v108;
          }
        }
        else
        {
          v166[0] = v125;
          re::DynamicString::DynamicString((re::DynamicString *)&v166[1], (const re::DynamicString *)&v126);
          *(_BYTE *)v107 = 0;
          *v79 = v166[0];
          v98 = *((_QWORD *)&v166[2] + 1);
          *(_QWORD *)(v107 + 24) = *(_QWORD *)&v166[1];
          *(_QWORD *)(v107 + 48) = v98;
          *(_OWORD *)(v107 + 32) = *(_OWORD *)((char *)&v166[1] + 8);
        }
        v92 = 1;
LABEL_68:
        if (!(_BYTE)v124 && v126 && (v127 & 1) != 0)
        {
          (*(void (**)(void))(*(_QWORD *)v126 + 40))();
          v75 = v108;
        }
LABEL_69:
        if (!(_BYTE)v171 && *(_QWORD *)&v172[20] && (v172[28] & 1) != 0)
        {
          (*(void (**)(void))(**(_QWORD **)&v172[20] + 40))();
          goto LABEL_61;
        }
LABEL_70:
        if (!v128[0] && v130 && (v131 & 1) != 0)
        {
          (*(void (**)(void))(*(_QWORD *)v130 + 40))();
          v75 = v108;
        }
        if (v92)
          goto LABEL_100;
        ++v62;
        v80 += 16;
        v77 += 24;
      }
      while (v62 < v75[1]);
    }
    re::types::Ok<re::EvaluationRigState>::Ok(v166, (uint64_t *)v173);
    re::Result<re::EvaluationRigState,re::DetailedError>::Result(v107, (uint64_t *)v166);
    re::RigGraphCompilation::~RigGraphCompilation((re::RigGraphCompilation *)&v170);
    if ((_QWORD)v168)
    {
      if (*((_QWORD *)&v168 + 1))
      {
        (*(void (**)(void))(*(_QWORD *)v168 + 40))();
        *((_QWORD *)&v168 + 1) = 0;
        v169 = 0;
      }
      *(_QWORD *)&v168 = 0;
    }
    if (*((_QWORD *)&v166[2] + 1))
    {
      if ((_QWORD)v167)
      {
        (*(void (**)(void))(**((_QWORD **)&v166[2] + 1) + 40))();
        v167 = 0uLL;
      }
      *((_QWORD *)&v166[2] + 1) = 0;
    }
    std::unique_ptr<re::RigHierarchy,std::function<void ()(re::RigHierarchy*)>>::~unique_ptr[abi:nn180100]((uint64_t *)v166);
LABEL_100:
    re::RigGraphCompilation::~RigGraphCompilation((re::RigGraphCompilation *)((char *)&v176 + 8));
    if ((_QWORD)v175)
    {
      if (*((_QWORD *)&v175 + 1))
      {
        (*(void (**)(void))(*(_QWORD *)v175 + 40))();
        *((_QWORD *)&v175 + 1) = 0;
        *(_QWORD *)&v176 = 0;
      }
      *(_QWORD *)&v175 = 0;
    }
    if (v173[2].n128_u64[1])
    {
      if ((_QWORD)v174)
      {
        (*(void (**)(void))(*(_QWORD *)v173[2].n128_u64[1] + 40))();
        v174 = 0uLL;
      }
      v173[2].n128_u64[1] = 0;
    }
    std::unique_ptr<re::RigHierarchy,std::function<void ()(re::RigHierarchy*)>>::~unique_ptr[abi:nn180100]((uint64_t *)v173);
  }
  else
  {
    *(_OWORD *)(v107 + 8) = v133;
    v103 = v134;
    v104 = v135;
    v105 = v136;
    v135 = 0;
    v136 = 0;
    v134 = 0uLL;
    *(_BYTE *)v107 = 0;
    *(_OWORD *)(v107 + 24) = v103;
    *(_QWORD *)(v107 + 40) = v104;
    *(_QWORD *)(v107 + 48) = v105;
  }
  re::Result<re::RigGraphCompilation,re::DetailedError>::~Result((uint64_t)&v132);
  re::RigGraphCompilation::~RigGraphCompilation((re::RigGraphCompilation *)&v193[2]);
  re::EvaluationContextManager::~EvaluationContextManager((re::EvaluationContextManager *)&v208);
LABEL_111:
  re::RigDataValue::~RigDataValue((re::RigDataValue *)v213);
  re::DynamicArray<re::RigDataValue>::deinit((uint64_t)v137);
  re::RigHierarchy::~RigHierarchy((re::RigHierarchy *)v147);
}

__n128 re::RigRuntimeData::constructRigCommandsForRig@<Q0>(_QWORD *a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X2>, _QWORD *a4@<X3>, _anonymous_namespace_ **a5@<X4>, _QWORD *a6@<X5>, _anonymous_namespace_ *a7@<X6>, uint64_t a8@<X7>, unint64_t a9@<X8>, _QWORD *a10, _QWORD *a11)
{
  unint64_t v13;
  re::RigEvaluation *v14;
  unint64_t v19;
  uint64_t v20;
  _anonymous_namespace_ *v21;
  _anonymous_namespace_ *v22;
  _QWORD *v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t *v27;
  const re::BindPoint *v28;
  const re::BindPoint *v29;
  const re::BindPoint *v30;
  re *v31;
  _QWORD *v32;
  uint64_t v33;
  unsigned int *v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t v37;
  _anonymous_namespace_ *v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t *v41;
  _QWORD *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  __n128 result;
  __int128 v47;
  uint64_t v48;
  unsigned int *v49;
  _QWORD *v51;
  _anonymous_namespace_ *v52;
  _anonymous_namespace_ *v53;
  _anonymous_namespace_ *v55;
  _anonymous_namespace_ *v56;
  _anonymous_namespace_ *v57;
  uint64_t v58;
  _QWORD *v59[2];
  __n128 v60;
  uint64_t v61;
  _BYTE v62[12];
  __int16 v63;
  int v64;
  __int16 v65;
  unint64_t v66;
  __int16 v67;
  _QWORD *v68;
  __n128 v69;
  __int128 v70;
  __int128 v71;
  __int128 v72;
  __int128 v73;
  uint64_t v74;

  v74 = *MEMORY[0x24BDAC8D0];
  if (a1[9] > (unint64_t)a2
    && (v13 = a2, v14 = (re::RigEvaluation *)(a1[10] + 1528 * a2), *((_QWORD *)v14 + 147)))
  {
    re::RigEvaluation::reset((re::RigEvaluation *)(a1[10] + 1528 * a2));
    v19 = a1[6];
    if (v19 <= v13)
      goto LABEL_35;
    v52 = a7;
    v58 = (uint64_t)v14;
    re::RigEvaluation::setDefaultPose(v14, *(_QWORD *)(a1[7] + 8 * v13));
    v21 = a5[1];
    v51 = a3;
    if (v21)
    {
      v22 = *a5;
      v53 = (_anonymous_namespace_ *)((char *)*a5 + 4 * (_QWORD)v21);
      v19 = 0x3F80000000000000;
      while (1)
      {
        v13 = *(unsigned int *)v22;
        v23 = (_QWORD *)a3[17];
        if ((unint64_t)v23 <= v13)
          goto LABEL_31;
        v24 = a4[1];
        if (v24 <= v13)
          goto LABEL_32;
        v55 = v22;
        v25 = a3[19];
        v26 = v25 + 24 * v13;
        v29 = *(const re::BindPoint **)(v26 + 8);
        v27 = (unint64_t *)(v26 + 8);
        v28 = v29;
        if (v29)
          break;
LABEL_12:
        v22 = (_anonymous_namespace_ *)((char *)v55 + 4);
        a3 = v51;
        if ((_anonymous_namespace_ *)((char *)v55 + 4) == v53)
          goto LABEL_13;
      }
      v30 = 0;
      v31 = (re *)(*a4 + 48 * v13);
      a3 = (_QWORD *)(v25 + 24 * v13 + 16);
      v13 = 8;
      while (1)
      {
        v69.n128_u64[0] = 0x3F8000003F800000;
        v69.n128_u64[1] = 1065353216;
        *(_QWORD *)&v70 = 0;
        *((_QWORD *)&v70 + 1) = 0x3F80000000000000;
        v71 = 0uLL;
        re::EvaluationTree::createInputRegister(a10, &v69, &v60);
        v69.n128_u64[0] = 0x3F8000003F800000;
        v69.n128_u64[1] = 1065353216;
        *(_QWORD *)&v70 = 0;
        *((_QWORD *)&v70 + 1) = 0x3F80000000000000;
        v71 = 0uLL;
        re::DynamicArray<re::EvaluationSRT>::add((_anonymous_namespace_ *)(a11 + 41), &v60);
        re::DynamicArray<re::Matrix3x3<float>>::add((_anonymous_namespace_ *)(a11 + 86), (uint64_t)&v69);
        v32 = (_QWORD *)(a11[43] - 1);
        v59[0] = a11;
        v59[1] = v32;
        re::makeSkeletalPoseJointBindNode(v31, v30, (uint64_t)&v69);
        re::EvaluationContextManager::bindInputHandle<re::GenericSRT<float>>(v59[0], (uint64_t)v59, &v69, 0);
        re::DynamicArray<re::BindPoint::BindPointData>::deinit((uint64_t)&v69.n128_i64[1]);
        re::DynamicArray<re::BindPoint::BindPointData>::deinit((uint64_t)&v69.n128_i64[1]);
        a9 = *v27;
        if (*v27 <= (unint64_t)v30)
          break;
        re::RigEvaluation::bindLocalSpaceJointInput(v58, *(char **)(*a3 + v13), (__int128 *)&v60);
        v30 = (const re::BindPoint *)((char *)v30 + 1);
        v13 += 16;
        if (v28 == v30)
          goto LABEL_12;
      }
      v61 = 0;
      v72 = 0u;
      v73 = 0u;
      v70 = 0u;
      v71 = 0u;
      v69 = 0u;
      v42 = (_QWORD *)MEMORY[0x24BDACB70];
      os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      *(_DWORD *)v62 = 136315906;
      *(_QWORD *)&v62[4] = "operator[]";
      v63 = 1024;
      v64 = 476;
      v65 = 2048;
      v66 = (unint64_t)v30;
      v67 = 2048;
      v68 = (_QWORD *)a9;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
      goto LABEL_28;
    }
LABEL_13:
    v33 = *((_QWORD *)v52 + 1);
    if (v33)
    {
      v34 = *(unsigned int **)v52;
      v48 = *(_QWORD *)v52 + 4 * v33;
      while (1)
      {
        a9 = *v34;
        v23 = (_QWORD *)a3[22];
        if ((unint64_t)v23 <= a9)
          goto LABEL_33;
        v35 = a6[1];
        if (v35 <= a9)
          goto LABEL_34;
        v49 = v34;
        v36 = a3[24];
        v37 = v36 + 24 * a9;
        v38 = *(_anonymous_namespace_ **)(v37 + 8);
        v19 = v37 + 8;
        v57 = v38;
        if (v38)
          break;
LABEL_23:
        v34 = v49 + 1;
        a3 = v51;
        if (v49 + 1 == (unsigned int *)v48)
          goto LABEL_24;
      }
      v39 = 0;
      v13 = 0;
      v40 = *a6 + 40 * a9;
      v41 = (unint64_t *)(v40 + 16);
      v23 = (_QWORD *)(v40 + 32);
      v56 = (_anonymous_namespace_ *)(v36 + 24 * a9 + 16);
      a9 = 8;
      while (1)
      {
        v42 = (_QWORD *)*v41;
        if (*v41 <= v13)
          break;
        v43 = *v23 + v39;
        v69.n128_u32[0] = 4;
        v70 = 0uLL;
        v69.n128_u64[1] = 0;
        re::DynamicArray<re::EvaluationRegister>::add((_anonymous_namespace_ *)(a10 + 228), (uint64_t)&v69);
        v69.n128_u64[0] = a10[230] - 1;
        re::DynamicArray<unsigned long>::add(a10 + 21, &v69);
        re::DynamicArray<re::Matrix4x4<float>>::add((_anonymous_namespace_ *)(a10 + 61), v43);
        v44 = *(_QWORD *)(a10[25] + 8 * a10[23] - 8);
        v71 = 0u;
        v72 = 0u;
        v69 = 0u;
        v70 = 0u;
        *(_QWORD *)v62 = v44;
        re::DynamicArray<unsigned long>::add(a11 + 21, v62);
        re::DynamicArray<re::Matrix4x4<float>>::add((_anonymous_namespace_ *)(a11 + 66), (uint64_t)&v69);
        v45 = a11[23] - 1;
        v60.n128_u64[0] = (unint64_t)a11;
        v60.n128_u64[1] = v45;
        a3 = (_QWORD *)*v41;
        if (*v41 <= v13)
          goto LABEL_29;
        re::EvaluationInputHandle<re::Matrix4x4<float>>::bindEvaluationInput<re::Matrix4x4<float>>(&v60, (const re::IntrospectionBase *)(*v23 + v39));
        a3 = *(_QWORD **)v19;
        if (*(_QWORD *)v19 <= v13)
          goto LABEL_30;
        re::RigEvaluation::bindModelSpaceJointInput(v58, *(char **)(*(_QWORD *)v56 + a9), v44);
        ++v13;
        a9 += 16;
        v39 += 64;
        if (v57 == (_anonymous_namespace_ *)v13)
          goto LABEL_23;
      }
LABEL_28:
      v60.n128_u64[0] = 0;
      v72 = 0u;
      v73 = 0u;
      v70 = 0u;
      v71 = 0u;
      v69 = 0u;
      v23 = (_QWORD *)MEMORY[0x24BDACB70];
      os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      *(_DWORD *)v62 = 136315906;
      *(_QWORD *)&v62[4] = "operator[]";
      v63 = 1024;
      v64 = 797;
      v65 = 2048;
      v66 = v13;
      v67 = 2048;
      v68 = v42;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
LABEL_29:
      v59[0] = 0;
      v72 = 0u;
      v73 = 0u;
      v70 = 0u;
      v71 = 0u;
      v69 = 0u;
      os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      *(_DWORD *)v62 = 136315906;
      *(_QWORD *)&v62[4] = "operator[]";
      v63 = 1024;
      v64 = 797;
      v65 = 2048;
      v66 = v13;
      v67 = 2048;
      v68 = a3;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
LABEL_30:
      v59[0] = 0;
      v72 = 0u;
      v73 = 0u;
      v70 = 0u;
      v71 = 0u;
      v69 = 0u;
      os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      *(_DWORD *)v62 = 136315906;
      *(_QWORD *)&v62[4] = "operator[]";
      v63 = 1024;
      v64 = 476;
      v65 = 2048;
      v66 = v13;
      v67 = 2048;
      v68 = a3;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
LABEL_31:
      v60.n128_u64[0] = 0;
      v72 = 0u;
      v73 = 0u;
      v70 = 0u;
      v71 = 0u;
      v69 = 0u;
      os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      *(_DWORD *)v62 = 136315906;
      *(_QWORD *)&v62[4] = "operator[]";
      v63 = 1024;
      v64 = 797;
      v65 = 2048;
      v66 = v13;
      v67 = 2048;
      v68 = v23;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
LABEL_32:
      re::internal::assertLog((re::internal *)6, v20, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 251, v13, v24);
      _os_crash();
      __break(1u);
LABEL_33:
      v60.n128_u64[0] = 0;
      v72 = 0u;
      v73 = 0u;
      v70 = 0u;
      v71 = 0u;
      v69 = 0u;
      os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      *(_DWORD *)v62 = 136315906;
      *(_QWORD *)&v62[4] = "operator[]";
      v63 = 1024;
      v64 = 797;
      v65 = 2048;
      v66 = a9;
      v67 = 2048;
      v68 = v23;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
LABEL_34:
      re::internal::assertLog((re::internal *)6, v20, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 251, a9, v35);
      _os_crash();
      __break(1u);
LABEL_35:
      v60.n128_u64[0] = 0;
      v72 = 0u;
      v73 = 0u;
      v70 = 0u;
      v71 = 0u;
      v69 = 0u;
      os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      *(_DWORD *)v62 = 136315906;
      *(_QWORD *)&v62[4] = "operator[]";
      v63 = 1024;
      v64 = 476;
      v65 = 2048;
      v66 = v13;
      v67 = 2048;
      v68 = (_QWORD *)v19;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
    }
LABEL_24:
    re::RigEvaluation::constructEvaluationCommands(v58, *(_QWORD *)a8, *(_QWORD *)(a8 + 8), (uint64_t)a10);
  }
  else
  {
    re::DynamicString::format((re::DynamicString *)"Invalid rig entry handle: %u.", (re::DynamicString *)&v69, a2);
    result = v69;
    v47 = v70;
    *(_BYTE *)a9 = 0;
    *(_QWORD *)(a9 + 8) = 100;
    *(_QWORD *)(a9 + 16) = &re::AssetErrorCategory(void)::instance;
    *(__n128 *)(a9 + 24) = result;
    *(_OWORD *)(a9 + 40) = v47;
  }
  return result;
}

void re::FixedArray<re::FixedArray<unsigned int>>::init<>(uint64_t *a1, uint64_t a2, unint64_t a3)
{
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  _QWORD *v8;

  *a1 = a2;
  a1[1] = a3;
  if (!a3)
    return;
  if (a3 >= 0xAAAAAAAAAAAAAABLL)
  {
    re::internal::assertLog((re::internal *)6, a2, "assertion failure: '%s' (%s:line %i) Size overflow in FixedArray<T>::init(). Element size = %zu, count = %zu", "!overflow", "init", 324, 24, a3);
    _os_crash();
    __break(1u);
    goto LABEL_9;
  }
  v5 = 24 * a3;
  v6 = (_QWORD *)(*(uint64_t (**)(uint64_t, unint64_t, uint64_t))(*(_QWORD *)a2 + 32))(a2, 24 * a3, 8);
  a1[2] = (uint64_t)v6;
  if (!v6)
  {
LABEL_9:
    re::internal::assertLog((re::internal *)4, v7, "assertion failure: '%s' (%s:line %i) Out of memory.", "m_data", "init", 327);
    _os_crash();
    __break(1u);
    return;
  }
  v8 = v6;
  if (a3 != 1)
  {
    bzero(v6, v5 - 24);
    v8 = (_QWORD *)((char *)v8 + v5 - 24);
  }
  *v8 = 0;
  v8[1] = 0;
  v8[2] = 0;
}

uint64_t re::HashTable<unsigned int,unsigned int,re::Hash<unsigned int>,re::EqualTo<unsigned int>,true,false>::add(uint64_t a1, _DWORD *a2, _DWORD *a3)
{
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unsigned int v13;

  v6 = *a2;
  v7 = 0x94D049BB133111EBLL
     * ((0xBF58476D1CE4E5B9 * (v6 ^ (v6 >> 30))) ^ ((0xBF58476D1CE4E5B9 * (v6 ^ (v6 >> 30))) >> 27));
  v8 = v7 ^ (v7 >> 31);
  if (!*(_QWORD *)a1)
  {
    LODWORD(v9) = 0;
    goto LABEL_8;
  }
  v9 = v8 % *(unsigned int *)(a1 + 24);
  v10 = *(unsigned int *)(*(_QWORD *)(a1 + 8) + 4 * v9);
  if ((_DWORD)v10 == 0x7FFFFFFF)
  {
LABEL_8:
    v13 = re::HashTable<unsigned int,unsigned int,re::Hash<unsigned int>,re::EqualTo<unsigned int>,true,false>::addAsMove(a1, v9, v8, a2, a3);
    ++*(_DWORD *)(a1 + 40);
    v12 = *(_QWORD *)(a1 + 16) + 24 * v13;
    return v12 + 16;
  }
  v11 = *(_QWORD *)(a1 + 16);
  while (*(_DWORD *)(v11 + 24 * v10 + 12) != (_DWORD)v6)
  {
    LODWORD(v10) = *(_DWORD *)(v11 + 24 * v10 + 8) & 0x7FFFFFFF;
    if ((_DWORD)v10 == 0x7FFFFFFF)
      goto LABEL_8;
  }
  v12 = v11 + 24 * v10;
  return v12 + 16;
}

uint64_t re::EvaluationInputHandle<re::Matrix4x4<float>>::bindEvaluationInput<re::Matrix4x4<float>>(_QWORD **a1, const re::IntrospectionBase *a2)
{
  unsigned __int8 v3;
  __objc2_class_ro **p_info;
  int v6;
  BOOL v7[8];
  uint64_t v8;
  _BYTE v9[40];

  p_info = VideoSpillMapMetalSession.info;
  if ((v3 & 1) == 0)
  {
    *(_QWORD *)v7 = a2;
    p_info = (__objc2_class_ro **)(VideoSpillMapMetalSession + 32);
    a2 = *(const re::IntrospectionBase **)v7;
    if (v6)
    {
      re::introspect<re::Matrix4x4<float>>(void)::info = (_UNKNOWN *)re::introspect_Matrix4x4F(0);
      p_info = (__objc2_class_ro **)(VideoSpillMapMetalSession + 32);
      a2 = *(const re::IntrospectionBase **)v7;
    }
  }
  re::makeBindPoint((re *)p_info[187], a2, (uint64_t)&v8);
  re::EvaluationContextManager::bindInputHandle<re::Matrix4x4<float>>(*a1, (uint64_t)a1, &v8);
  re::DynamicArray<re::BindPoint::BindPointData>::deinit((uint64_t)v9);
  return re::DynamicArray<re::BindPoint::BindPointData>::deinit((uint64_t)v9);
}

void re::RigRuntimeData::makeRigHierarchyForPose(re::RigRuntimeData *this, const re::MeshAsset *a2, const re::SkeletalPoseDefinitionAsset *a3, uint64_t a4, const re::BindPoint *a5, const re::RigEnvironment *a6, re::EvaluationTree *a7, re::EvaluationContextManager *a8)
{
  uint64_t v8;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  __int128 v24;
  uint64_t v25;
  uint64_t v26;
  _anonymous_namespace_ *v27;
  const re::Skeleton *v28;
  __n128 v29;
  re::RigRuntimeData *v34;
  re::MeshNameMap *v35;
  unsigned __int8 v37[24];
  __int128 v38;
  __int128 v39;
  uint64_t *v40;
  uint64_t v41;
  _BYTE v42[60];
  uint64_t v43;
  __int128 v44;
  __int128 v45;
  int v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  int v51;
  __int128 v52;
  __int128 v53;
  int v54;
  __int128 v55;
  __int128 v56;
  int v57;
  __int128 v58;
  __int128 v59;
  int v60;
  __int128 v61;
  __int128 v62;
  int v63;
  __int128 v64;
  __int128 v65;
  int v66;
  uint64_t v67;
  __int128 v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  __int128 *v72;
  _QWORD v73[2];
  uint64_t v74;
  _BYTE v75[24];
  uint64_t v76;
  re::RigRuntimeData *v77;
  uint64_t v78;

  v34 = this;
  v78 = *MEMORY[0x24BDAC8D0];
  memset(v42, 0, sizeof(v42));
  v43 = 0x7FFFFFFFLL;
  v44 = 0u;
  v45 = 0u;
  v46 = 0;
  v47 = 0x7FFFFFFFLL;
  v49 = 0;
  v50 = 0;
  v48 = 0;
  v67 = 0;
  v52 = 0u;
  v53 = 0u;
  v51 = 0;
  v54 = 0;
  v55 = 0u;
  v56 = 0u;
  v57 = 0;
  v60 = 0;
  v59 = 0u;
  v58 = 0u;
  v63 = 0;
  v61 = 0u;
  v62 = 0u;
  v64 = 0u;
  v65 = 0u;
  v66 = 0;
  v8 = *((_QWORD *)a3 + 37);
  if (!v8)
  {
LABEL_26:
    v24 = v68;
    v25 = v69;
    v26 = v70;
    *(_BYTE *)v34 = 0;
    *((_QWORD *)v34 + 1) = 6002;
    *((_QWORD *)v34 + 2) = &re::AnimationErrorCategory(void)::instance;
    *(_OWORD *)((char *)v34 + 24) = v24;
    *((_QWORD *)v34 + 5) = v25;
    *((_QWORD *)v34 + 6) = v26;
    goto LABEL_39;
  }
  v11 = *((_QWORD *)a2 + 117);
  v12 = *((_QWORD *)a3 + 39);
  v13 = v12 + (v8 << 6);
  v35 = (const re::MeshAsset *)((char *)a2 + 448);
  while (1)
  {
    v14 = v13 - 64;
    if (*(_DWORD *)(v13 - 4) == a4)
      break;
LABEL_25:
    v13 -= 64;
    if (v14 == v12)
      goto LABEL_26;
  }
  re::MeshNameMap::meshInstancePartsForIdentifier((uint64_t)v35, (unsigned __int8 *)(v13 - 64), &v68);
  v73[0] = a2;
  v73[1] = v35;
  v74 = v68;
  v76 = v71;
  v77 = 0;
  re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Scene *,RESceneDidAddEvent const&)>::operator=<24ul>((uint64_t)v75, (uint64_t)&v68 + 8);
  if (v72)
  {
    (**(void (***)(__int128 *))v72)(v72);
    if (v72 != (__int128 *)((char *)&v68 + 8))
      (*(void (**)(uint64_t))(*(_QWORD *)v71 + 40))(v71);
  }
  v40 = v73;
  v41 = 0;
  v15 = v74;
  if (!v74)
  {
LABEL_21:
    this = v77;
    if (v77)
    {
      this = (re::RigRuntimeData *)(**(uint64_t (***)(re::RigRuntimeData *))v77)(v77);
      if (v77 != (re::RigRuntimeData *)v75)
        this = (re::RigRuntimeData *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v76 + 40))(v76);
    }
    v12 = *((_QWORD *)a3 + 39);
    goto LABEL_25;
  }
  v16 = (_QWORD *)(v13 - 24);
  while (1)
  {
    v17 = re::MeshIdentifierIteration<re::MeshAsset,re::MeshInstanceAndPartIndex>::MeshIdentifierIterator::meshModel(&v40);
    *(_QWORD *)&v68 = v41;
    v18 = (*(uint64_t (**)(uint64_t, __int128 *))(*(_QWORD *)v40[7] + 16))(v40[7], &v68);
    v19 = *(_QWORD *)(v17 + 176);
    if (v19)
    {
      if (*(_QWORD *)(v19 + 8) > (unint64_t)WORD2(v18))
      {
        v20 = *(unsigned int *)(*(_QWORD *)(v19 + 16) + 72 * WORD2(v18) + 4);
        if (v11 > v20)
        {
          if (*v16 >= 0xFFFFFFFFFFFFFFFELL && (*v16 & 1) == 0 && !**(_BYTE **)(v13 - 16))
            break;
          v21 = (_QWORD *)re::MeshAsset::skeletonAtIndex(a2, v20);
          if (re::StringID::operator==((_QWORD *)(v13 - 24), v21))
            break;
        }
      }
    }
    v22 = ++v41;
    if (v40 == v73 && v22 == v15)
      goto LABEL_21;
  }
  if (*((_QWORD *)a2 + 28) > v20
    && (v27 = (_anonymous_namespace_ *)re::AssetHandle::loadedAsset<re::SkeletonAsset>((re::SkeletonAsset *)(*((_QWORD *)a2 + 30) + 24 * v20))) != 0)
  {
    v28 = (_anonymous_namespace_ *)((char *)v27 + 88);
  }
  else
  {
    v27 = (_anonymous_namespace_ *)re::MeshAsset::skeletonAtIndex(a2, v20);
    v28 = v27;
  }
  v29 = re::RigHierarchy::bindRigHierarchyPose((re::RigHierarchy *)v42, a7, a8, a5, v37);
  if (!v37[0] && (_QWORD)v38)
  {
    if ((BYTE8(v38) & 1) != 0)
      (*(void (**)(__n128))(*(_QWORD *)v38 + 40))(v29);
    v38 = 0u;
    v39 = 0u;
  }
  re::RigHierarchy::RigHierarchy((uint64_t)&v68, (__int128 *)v42);
  *(_BYTE *)v34 = 1;
  re::RigHierarchy::RigHierarchy((uint64_t)v34 + 8, &v68);
  re::RigHierarchy::~RigHierarchy((re::RigHierarchy *)&v68);
  if (v77)
  {
    (**(void (***)(re::RigRuntimeData *))v77)(v77);
    if (v77 != (re::RigRuntimeData *)v75)
      (*(void (**)(uint64_t))(*(_QWORD *)v76 + 40))(v76);
  }
LABEL_39:
  re::RigHierarchy::~RigHierarchy((re::RigHierarchy *)v42);
}

uint64_t re::AssetHandle::loadedAsset<re::SkeletonAsset>(re::SkeletonAsset *a1)
{
  uint64_t *v2;

  if (!*((_QWORD *)a1 + 1))
    return 0;
  v2 = re::SkeletonAsset::assetType(a1);
  return re::AssetHandle::assetWithType(a1, (const re::AssetType *)v2, 1);
}

uint64_t re::`anonymous namespace'::setCompilationValueForBoundInput(uint64_t result, uint64_t a2, const re::RigEnvironment *a3, _QWORD *a4, re::EvaluationContextManager *a5, uint64_t a6, unint64_t a7, re::BindNode **a8)
{
  __guard *v8;
  re::RigDataTypeClass *v9;
  _QWORD *v10;
  __guard *v12;
  _QWORD *v13;
  _BYTE *v15;
  _BYTE *v16;
  __n128 *v17;
  unsigned __int8 v18;
  uint64_t v19;
  _BYTE *v20;
  unint64_t v21;
  unsigned __int8 v22;
  BOOL v23;
  __guard *v24;
  unint64_t v25;
  unsigned __int8 v26;
  void *v27;
  unsigned __int8 v28;
  unint64_t v29;
  __guard *v30;
  unint64_t v31;
  uint64_t v32;
  void *v33;
  unsigned __int8 v34;
  __guard *v35;
  unint64_t v36;
  unsigned __int8 v37;
  void *v38;
  unsigned __int8 v39;
  uint64_t v40;
  unint64_t v41;
  uint64_t v42;
  __guard *v43;
  unint64_t v44;
  unsigned __int8 v45;
  unint64_t v46;
  unsigned __int8 v47;
  __guard *v48;
  unint64_t v49;
  unsigned __int8 v50;
  void *v51;
  unsigned __int8 v52;
  __guard *v53;
  unint64_t v54;
  unsigned __int8 v55;
  void *v56;
  unsigned __int8 v57;
  _anonymous_namespace_ *v59;
  uint64_t v60;
  _BYTE *v61;
  const re::Skeleton *v62;
  __n128 v63;
  unint64_t v65;
  unint64_t v66;
  __int8 *v67;
  unint64_t v68;
  char *v69;
  unint64_t v70;
  unint64_t v71;
  unint64_t v72;
  __int8 *v73;
  unint64_t v74;
  _anonymous_namespace_ *LastOf;
  unint64_t v76;
  unint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  unint64_t v83;
  size_t v84;
  const re::MeshAsset *v85;
  _anonymous_namespace_ *v86;
  const char *v87;
  unsigned int v88;
  uint64_t v89;
  const re::SkeletalPoseDefinitionAsset *v90;
  re::RigDataValue *v91;
  uint64_t v92;
  unint64_t v93;
  unint64_t v94;
  unint64_t v95;
  unint64_t v96;
  unint64_t v97;
  uint64_t v98;
  unint64_t *v99;
  unint64_t v100;
  unint64_t v101;
  __guard v102;
  uint64_t v103;
  unint64_t v104;
  uint64_t v105;
  __int128 v106;
  uint64_t v107;
  uint64_t v108;
  __int128 v109;
  const re::IntrospectionBase *v110;
  const re::IntrospectionBase *v111;
  int v112;
  const re::IntrospectionBase *v113;
  int v114;
  const re::IntrospectionBase *v115;
  int v116;
  const re::IntrospectionBase *v117;
  int v118;
  int v119;
  int v120;
  int v121;
  uint64_t v122;
  _BYTE *v123;
  uint64_t v125;
  uint64_t v126;
  unint64_t v127;
  char v128[8];
  unint64_t v129;
  unint64_t v130;
  unint64_t v131;
  _QWORD v132[2];
  __n128 v133;
  unint64_t v134;
  unint64_t v135;
  uint64_t v136;
  _QWORD v137[5];
  __n128 v138;
  _BYTE v139[44];
  uint64_t v140;
  __int128 v141;
  __int128 v142;
  int v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  int v148;
  __int128 v149;
  __int128 v150;
  int v151;
  __int128 v152;
  __int128 v153;
  int v154;
  __int128 v155;
  __int128 v156;
  int v157;
  __int128 v158;
  __int128 v159;
  int v160;
  __int128 v161;
  __int128 v162;
  int v163;
  uint64_t v164;
  __n128 v165[5];
  uint64_t v166;
  uint64_t v167[5];
  uint64_t v168[5];
  uint64_t v169[5];
  uint64_t v170[5];
  uint64_t v171[5];
  uint64_t v172[5];
  _BYTE v173[40];
  __int128 v174;
  uint64_t v175;

  v175 = *MEMORY[0x24BDAC8D0];
  v126 = a6;
  v127 = a7;
  v9 = (re::RigDataTypeClass *)(a2 + 32);
  v10 = (_QWORD *)a7;
  v12 = (__guard *)a5;
  v13 = a4;
  v15 = (_BYTE *)result;
  v16 = v173;
  v17 = &v138;
  v125 = a2;
  switch(*(_BYTE *)(a2 + 32))
  {
    case 1:
      v136 = a6;
      v137[0] = a7;
      v138.n128_u32[0] = 0;
      v165[0].n128_u32[0] = 0;
      memset(&v165[0].n128_i8[8], 0, 24);
      re::DynamicArray<re::EvaluationRegister>::add((_anonymous_namespace_ *)(a4 + 208), (uint64_t)v165);
      v165[0].n128_u64[0] = v13[210] - 1;
      re::DynamicArray<unsigned long>::add(v13 + 1, v165);
      re::DynamicArray<int>::add(v13 + 41, &v138);
      a3 = *(const re::RigEnvironment **)(v13[5] + 8 * v13[3] - 8);
      v138.n128_u32[0] = 0;
      v165[0].n128_u64[0] = (unint64_t)a3;
      re::DynamicArray<unsigned long>::add(v12 + 1, v165);
      re::DynamicArray<int>::add(v12 + 46, &v138);
      v10 = v12;
      v13 = (_QWORD *)v12[3];
      if ((v18 & 1) != 0)
        goto LABEL_3;
      goto LABEL_166;
    case 2:
      v136 = a6;
      v137[0] = a7;
      v138.n128_u32[0] = 0;
      v165[0].n128_u32[0] = 1;
      memset(&v165[0].n128_i8[8], 0, 24);
      re::DynamicArray<re::EvaluationRegister>::add((_anonymous_namespace_ *)(a4 + 213), (uint64_t)v165);
      v165[0].n128_u64[0] = v13[215] - 1;
      re::DynamicArray<unsigned long>::add(v13 + 6, v165);
      re::DynamicArray<int>::add(v13 + 46, &v138);
      a3 = *(const re::RigEnvironment **)(v13[10] + 8 * v13[8] - 8);
      v138.n128_u32[0] = 0;
      v165[0].n128_u64[0] = (unint64_t)a3;
      re::DynamicArray<unsigned long>::add(v12 + 6, v165);
      re::DynamicArray<int>::add(v12 + 51, &v138);
      v24 = v12;
      v25 = v12[8];
      if ((v26 & 1) == 0
      {
        re::introspect<unsigned int>(void)::info = re::introspect_uint32_t(0, v111);
      }
      re::BindNode::bindPointWithOverride(a8, (uint64_t)re::introspect<unsigned int>(void)::info, &v136, (uint64_t)&v133);
      v19 = v125;
      if (!v135)
        goto LABEL_148;
      v20 = v15;
      v27 = (void *)v133.n128_u64[0];
      if ((v28 & 1) == 0)
      {
        v19 = v125;
        if (v114)
        {
          re::introspect<unsigned int>(void)::info = re::introspect_uint32_t(0, v115);
          v19 = v125;
        }
      }
      v23 = v27 == re::introspect<unsigned int>(void)::info;
      v15 = v20;
      if (!v23)
        goto LABEL_148;
      v130 = v25 - 1;
      if (v25 - 1 >= v12[98])
      {
        re::DynamicArray<re::EvaluationContextManager::BindPointReference>::resize(v12 + 96, v25);
        goto LABEL_127;
      }
      if (!*(_QWORD *)(v12[100] + 56 * (v25 - 1) + 24))
      {
LABEL_127:
        re::DynamicArray<unsigned long>::add(v12 + 141, &v130);
        v138.n128_u64[0] = v133.n128_u64[0];
        re::DynamicArray<re::BindPoint::BindPointData>::DynamicArray((uint64_t)&v138.n128_i64[1], &v133.n128_i64[1]);
        v139[32] = 0;
        v100 = v130;
        v101 = v12[98];
        if (v101 > v130)
        {
          v102 = v24[100];
          goto LABEL_146;
        }
LABEL_159:
        v132[0] = 0;
        v17[26] = 0u;
        v17[27] = 0u;
        v17[24] = 0u;
        v17[25] = 0u;
        v17[23] = 0u;
        v17 = (__n128 *)MEMORY[0x24BDACB70];
        os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        *(_DWORD *)v173 = 136315906;
        *(_QWORD *)&v173[4] = "operator[]";
        *(_WORD *)&v173[12] = 1024;
        *(_DWORD *)&v173[14] = 789;
        *(_WORD *)&v173[18] = 2048;
        *(_QWORD *)&v173[20] = v100;
        *(_WORD *)&v173[28] = 2048;
        *(_QWORD *)&v173[30] = v101;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
        goto LABEL_160;
      }
      goto LABEL_147;
    case 3:
      v16 = (_BYTE *)result;
      v136 = a6;
      v137[0] = a7;
      v138.n128_u32[0] = 0;
      v165[0].n128_u32[0] = 2;
      memset(&v165[0].n128_i8[8], 0, 24);
      re::DynamicArray<re::EvaluationRegister>::add((_anonymous_namespace_ *)(a4 + 218), (uint64_t)v165);
      v165[0].n128_u64[0] = v13[220] - 1;
      re::DynamicArray<unsigned long>::add(v13 + 11, v165);
      re::DynamicArray<float>::add((_anonymous_namespace_ *)(v13 + 51), (float *)&v138);
      v29 = *(_QWORD *)(v13[15] + 8 * v13[13] - 8);
      v138.n128_u32[0] = 0;
      v165[0].n128_u64[0] = v29;
      re::DynamicArray<unsigned long>::add(v12 + 11, v165);
      re::DynamicArray<float>::add((_anonymous_namespace_ *)(v12 + 56), (float *)&v138);
      v30 = v12;
      v31 = v12[13];
      re::BindNode::bindPointWithOverride<float>(a8, &v136, (uint64_t)&v133);
      v32 = v125;
      if (!v135)
        goto LABEL_133;
      v33 = (void *)v133.n128_u64[0];
      if ((v34 & 1) == 0)
      {
        v32 = v125;
        if (v116)
        {
          re::introspect<float>(void)::info = re::introspect_float(0, v117);
          v32 = v125;
        }
      }
      if (v33 != re::introspect<float>(void)::info)
        goto LABEL_133;
      v130 = v31 - 1;
      if (v31 - 1 >= v12[103])
      {
        re::DynamicArray<re::EvaluationContextManager::BindPointReference>::resize(v12 + 101, v31);
      }
      else if (*(_QWORD *)(v12[105] + 56 * (v31 - 1) + 24))
      {
LABEL_132:
        v32 = v125;
LABEL_133:
        *(_BYTE *)(v32 + 96) = 2;
        *(_QWORD *)(v32 + 176) = v29;
        re::DynamicArray<re::BindPoint::BindPointData>::deinit((uint64_t)&v133.n128_i64[1]);
        result = re::DynamicArray<re::BindPoint::BindPointData>::deinit((uint64_t)&v133.n128_i64[1]);
        v15 = v16;
        goto LABEL_150;
      }
      re::DynamicArray<unsigned long>::add(v12 + 146, &v130);
      v138.n128_u64[0] = v133.n128_u64[0];
      re::DynamicArray<re::BindPoint::BindPointData>::DynamicArray((uint64_t)&v138.n128_i64[1], &v133.n128_i64[1]);
      v139[32] = 0;
      v100 = v130;
      v101 = v12[103];
      if (v101 <= v130)
      {
LABEL_160:
        v132[0] = 0;
        v17[26] = 0u;
        v17[27] = 0u;
        v17[24] = 0u;
        v17[25] = 0u;
        v17[23] = 0u;
        v17 = (__n128 *)MEMORY[0x24BDACB70];
        os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        *(_DWORD *)v173 = 136315906;
        *(_QWORD *)&v173[4] = "operator[]";
        *(_WORD *)&v173[12] = 1024;
        *(_DWORD *)&v173[14] = 789;
        *(_WORD *)&v173[18] = 2048;
        *(_QWORD *)&v173[20] = v100;
        *(_WORD *)&v173[28] = 2048;
        *(_QWORD *)&v173[30] = v101;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_161:
        v132[0] = 0;
        v17[26] = 0u;
        v17[27] = 0u;
        v17[24] = 0u;
        v17[25] = 0u;
        v17[23] = 0u;
        v17 = (__n128 *)MEMORY[0x24BDACB70];
        os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        *(_DWORD *)v173 = 136315906;
        *(_QWORD *)(v16 + 4) = "operator[]";
        *(_WORD *)&v173[12] = 1024;
        *(_DWORD *)(v16 + 14) = 789;
        *(_WORD *)&v173[18] = 2048;
        *(_QWORD *)(v16 + 20) = v100;
        *(_WORD *)&v173[28] = 2048;
        *(_QWORD *)(v16 + 30) = v101;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_162:
        v132[0] = 0;
        v17[26] = 0u;
        v17[27] = 0u;
        v17[24] = 0u;
        v17[25] = 0u;
        v17[23] = 0u;
        v17 = (__n128 *)MEMORY[0x24BDACB70];
        os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        *(_DWORD *)v173 = 136315906;
        *(_QWORD *)(v16 + 4) = "operator[]";
        *(_WORD *)&v173[12] = 1024;
        *(_DWORD *)(v16 + 14) = 789;
        *(_WORD *)&v173[18] = 2048;
        *(_QWORD *)(v16 + 20) = v100;
        *(_WORD *)&v173[28] = 2048;
        *(_QWORD *)(v16 + 30) = v101;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_163:
        v132[0] = 0;
        v17[26] = 0u;
        v17[27] = 0u;
        v17[24] = 0u;
        v17[25] = 0u;
        v17[23] = 0u;
        v17 = (__n128 *)MEMORY[0x24BDACB70];
        os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        *(_DWORD *)v173 = 136315906;
        *(_QWORD *)(v16 + 4) = "operator[]";
        *(_WORD *)&v173[12] = 1024;
        *(_DWORD *)(v16 + 14) = 789;
        *(_WORD *)&v173[18] = 2048;
        *(_QWORD *)(v16 + 20) = v100;
        *(_WORD *)&v173[28] = 2048;
        *(_QWORD *)(v16 + 30) = v101;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
        goto LABEL_164;
      }
      v103 = v30[105] + 56 * v130;
      *(_QWORD *)v103 = v138.n128_u64[0];
      re::DynamicArray<re::RigDataValue>::operator=(v103 + 8, (uint64_t)&v138.n128_i64[1]);
      *(_BYTE *)(v103 + 48) = v139[32];
      re::DynamicArray<re::BindPoint::BindPointData>::deinit((uint64_t)&v138.n128_i64[1]);
      re::DynamicArray<re::BindPoint::BindPointData>::deinit((uint64_t)&v138.n128_i64[1]);
      goto LABEL_132;
    case 4:
      v136 = a6;
      v137[0] = a7;
      memset(v165, 0, 48);
      v138.n128_u32[0] = 3;
      v138.n128_u64[1] = 0;
      *(_OWORD *)v139 = 0uLL;
      re::DynamicArray<re::EvaluationRegister>::add((_anonymous_namespace_ *)(a4 + 223), (uint64_t)&v138);
      v138.n128_u64[0] = v13[225] - 1;
      re::DynamicArray<unsigned long>::add(v13 + 16, &v138);
      re::DynamicArray<re::Matrix3x3<float>>::add((_anonymous_namespace_ *)(v13 + 56), (uint64_t)v165);
      a3 = *(const re::RigEnvironment **)(v13[20] + 8 * v13[18] - 8);
      memset(v165, 0, 48);
      v138.n128_u64[0] = (unint64_t)a3;
      re::DynamicArray<unsigned long>::add(v12 + 16, &v138);
      re::DynamicArray<re::Matrix3x3<float>>::add((_anonymous_namespace_ *)(v12 + 61), (uint64_t)v165);
      v35 = v12;
      v36 = v12[18];
      if ((v37 & 1) == 0
      {
        re::introspect<re::Matrix3x3<float>>(void)::info = (_UNKNOWN *)re::introspect_Matrix3x3F(0);
      }
      re::BindNode::bindPointWithOverride(a8, (uint64_t)re::introspect<re::Matrix3x3<float>>(void)::info, &v136, (uint64_t)&v133);
      v19 = v125;
      if (!v135)
        goto LABEL_148;
      v20 = v15;
      v38 = (void *)v133.n128_u64[0];
      if ((v39 & 1) == 0)
      {
        v19 = v125;
        if (v118)
        {
          re::introspect<re::Matrix3x3<float>>(void)::info = (_UNKNOWN *)re::introspect_Matrix3x3F(0);
          v19 = v125;
        }
      }
      v23 = v38 == re::introspect<re::Matrix3x3<float>>(void)::info;
      v15 = v20;
      if (!v23)
        goto LABEL_148;
      v130 = v36 - 1;
      if (v36 - 1 >= v12[108])
      {
        re::DynamicArray<re::EvaluationContextManager::BindPointReference>::resize(v12 + 106, v36);
        goto LABEL_135;
      }
      if (!*(_QWORD *)(v12[110] + 56 * (v36 - 1) + 24))
      {
LABEL_135:
        re::DynamicArray<unsigned long>::add(v12 + 151, &v130);
        v138.n128_u64[0] = v133.n128_u64[0];
        re::DynamicArray<re::BindPoint::BindPointData>::DynamicArray((uint64_t)&v138.n128_i64[1], &v133.n128_i64[1]);
        v139[32] = 0;
        v100 = v130;
        v101 = v12[108];
        if (v101 > v130)
        {
          v102 = v35[110];
          goto LABEL_146;
        }
        goto LABEL_161;
      }
      goto LABEL_147;
    case 5:
      v40 = result;
      v133.n128_u64[0] = a6;
      v133.n128_u64[1] = a7;
      memset(v165, 0, 64);
      v138.n128_u32[0] = 4;
      v138.n128_u64[1] = 0;
      *(_OWORD *)v139 = 0uLL;
      re::DynamicArray<re::EvaluationRegister>::add((_anonymous_namespace_ *)(a4 + 228), (uint64_t)&v138);
      v138.n128_u64[0] = v13[230] - 1;
      re::DynamicArray<unsigned long>::add(v13 + 21, &v138);
      re::DynamicArray<re::Matrix4x4<float>>::add((_anonymous_namespace_ *)(v13 + 61), (uint64_t)v165);
      v41 = *(_QWORD *)(v13[25] + 8 * v13[23] - 8);
      memset(v165, 0, 64);
      v138.n128_u64[0] = v41;
      re::DynamicArray<unsigned long>::add(v12 + 21, &v138);
      re::DynamicArray<re::Matrix4x4<float>>::add((_anonymous_namespace_ *)(v12 + 66), (uint64_t)v165);
      v42 = v12[23] - 1;
      v138.n128_u64[0] = (unint64_t)v12;
      v138.n128_u64[1] = v42;
      if ((v42 & 1) == 0
      {
        re::introspect<re::Matrix4x4<float>>(void)::info = (_UNKNOWN *)re::introspect_Matrix4x4F(0);
      }
      re::BindNode::bindPointWithOverride(a8, (uint64_t)re::introspect<re::Matrix4x4<float>>(void)::info, (uint64_t *)&v133, (uint64_t)v165);
      re::EvaluationContextManager::bindInputHandle<re::Matrix4x4<float>>(v12, (uint64_t)&v138, v165);
      *(_BYTE *)(v125 + 96) = 2;
      *(_QWORD *)(v125 + 176) = v41;
      re::DynamicArray<re::BindPoint::BindPointData>::deinit((uint64_t)&v165[0].n128_i64[1]);
      result = re::DynamicArray<re::BindPoint::BindPointData>::deinit((uint64_t)&v165[0].n128_i64[1]);
      v15 = (_BYTE *)v40;
      goto LABEL_150;
    case 6:
      v136 = a6;
      v137[0] = a7;
      v138 = (__n128)xmmword_2260E5D70;
      v165[0].n128_u32[0] = 5;
      memset(&v165[0].n128_i8[8], 0, 24);
      re::DynamicArray<re::EvaluationRegister>::add((_anonymous_namespace_ *)(a4 + 233), (uint64_t)v165);
      v165[0].n128_u64[0] = v13[235] - 1;
      re::DynamicArray<unsigned long>::add(v13 + 26, v165);
      re::DynamicArray<re::Vector3<float>>::add((_anonymous_namespace_ *)(v13 + 66), &v138);
      a3 = *(const re::RigEnvironment **)(v13[30] + 8 * v13[28] - 8);
      v165[0] = (__n128)xmmword_2260E5D70;
      v138.n128_u64[0] = (unint64_t)a3;
      re::DynamicArray<unsigned long>::add(v12 + 26, &v138);
      re::DynamicArray<re::Vector3<float>>::add((_anonymous_namespace_ *)(v12 + 71), v165);
      v43 = v12;
      v44 = v12[28];
      if ((v45 & 1) == 0
      {
        re::introspect<re::Quaternion<float>>(void)::info = re::introspect_QuaternionF(0);
      }
      re::BindNode::bindPointWithOverride(a8, re::introspect<re::Quaternion<float>>(void)::info, &v136, (uint64_t)&v133);
      v19 = v125;
      if (!v135)
        goto LABEL_148;
      v20 = v15;
      v46 = v133.n128_u64[0];
      if ((v47 & 1) == 0)
      {
        v19 = v125;
        if (v119)
        {
          re::introspect<re::Quaternion<float>>(void)::info = re::introspect_QuaternionF(0);
          v19 = v125;
        }
      }
      v23 = v46 == re::introspect<re::Quaternion<float>>(void)::info;
      v15 = v20;
      if (!v23)
        goto LABEL_148;
      v130 = v44 - 1;
      if (v44 - 1 >= v12[118])
      {
        re::DynamicArray<re::EvaluationContextManager::BindPointReference>::resize(v12 + 116, v44);
        goto LABEL_138;
      }
      if (!*(_QWORD *)(v12[120] + 56 * (v44 - 1) + 24))
      {
LABEL_138:
        re::DynamicArray<unsigned long>::add(v12 + 161, &v130);
        v138.n128_u64[0] = v133.n128_u64[0];
        re::DynamicArray<re::BindPoint::BindPointData>::DynamicArray((uint64_t)&v138.n128_i64[1], &v133.n128_i64[1]);
        v139[32] = 0;
        v100 = v130;
        v101 = v12[118];
        if (v101 > v130)
        {
          v102 = v43[120];
          goto LABEL_146;
        }
        goto LABEL_162;
      }
      goto LABEL_147;
    case 7:
      v136 = a6;
      v137[0] = a7;
      v138.n128_u64[0] = 0;
      v165[0].n128_u32[0] = 6;
      memset(&v165[0].n128_i8[8], 0, 24);
      re::DynamicArray<re::EvaluationRegister>::add((_anonymous_namespace_ *)(a4 + 238), (uint64_t)v165);
      v165[0].n128_u64[0] = v13[240] - 1;
      re::DynamicArray<unsigned long>::add(v13 + 31, v165);
      re::DynamicArray<unsigned long>::add(v13 + 71, &v138);
      a3 = *(const re::RigEnvironment **)(v13[35] + 8 * v13[33] - 8);
      v138.n128_u64[0] = 0;
      v165[0].n128_u64[0] = (unint64_t)a3;
      re::DynamicArray<unsigned long>::add(v12 + 31, v165);
      re::DynamicArray<unsigned long>::add(v12 + 76, &v138);
      v48 = v12;
      v49 = v12[33];
      if ((v50 & 1) == 0
      {
        re::introspect<re::Vector2<float>>(void)::info = (_UNKNOWN *)re::introspect_Vector2F(0);
      }
      re::BindNode::bindPointWithOverride(a8, (uint64_t)re::introspect<re::Vector2<float>>(void)::info, &v136, (uint64_t)&v133);
      v19 = v125;
      if (!v135)
        goto LABEL_148;
      v20 = v15;
      v51 = (void *)v133.n128_u64[0];
      if ((v52 & 1) == 0)
      {
        v19 = v125;
        if (v120)
        {
          re::introspect<re::Vector2<float>>(void)::info = (_UNKNOWN *)re::introspect_Vector2F(0);
          v19 = v125;
        }
      }
      v23 = v51 == re::introspect<re::Vector2<float>>(void)::info;
      v15 = v20;
      if (!v23)
        goto LABEL_148;
      v130 = v49 - 1;
      if (v49 - 1 >= v12[123])
      {
        re::DynamicArray<re::EvaluationContextManager::BindPointReference>::resize(v12 + 121, v49);
        goto LABEL_141;
      }
      if (!*(_QWORD *)(v12[125] + 56 * (v49 - 1) + 24))
      {
LABEL_141:
        re::DynamicArray<unsigned long>::add(v12 + 166, &v130);
        v138.n128_u64[0] = v133.n128_u64[0];
        re::DynamicArray<re::BindPoint::BindPointData>::DynamicArray((uint64_t)&v138.n128_i64[1], &v133.n128_i64[1]);
        v139[32] = 0;
        v100 = v130;
        v101 = v12[123];
        if (v101 > v130)
        {
          v102 = v48[125];
          goto LABEL_146;
        }
        goto LABEL_163;
      }
      goto LABEL_147;
    case 8:
      v136 = a6;
      v137[0] = a7;
      v138 = 0u;
      v165[0].n128_u32[0] = 7;
      memset(&v165[0].n128_i8[8], 0, 24);
      re::DynamicArray<re::EvaluationRegister>::add((_anonymous_namespace_ *)(a4 + 243), (uint64_t)v165);
      v165[0].n128_u64[0] = v13[245] - 1;
      re::DynamicArray<unsigned long>::add(v13 + 36, v165);
      re::DynamicArray<re::Vector3<float>>::add((_anonymous_namespace_ *)(v13 + 76), &v138);
      a3 = *(const re::RigEnvironment **)(v13[40] + 8 * v13[38] - 8);
      v165[0] = 0u;
      v138.n128_u64[0] = (unint64_t)a3;
      re::DynamicArray<unsigned long>::add(v12 + 36, &v138);
      re::DynamicArray<re::Vector3<float>>::add((_anonymous_namespace_ *)(v12 + 81), v165);
      v53 = v12;
      v54 = v12[38];
      if ((v55 & 1) == 0
      {
        re::introspect<re::Vector3<float>>(void)::info = (_UNKNOWN *)re::introspect_Vector3F(0);
      }
      re::BindNode::bindPointWithOverride(a8, (uint64_t)re::introspect<re::Vector3<float>>(void)::info, &v136, (uint64_t)&v133);
      v19 = v125;
      if (!v135)
        goto LABEL_148;
      v20 = v15;
      v56 = (void *)v133.n128_u64[0];
      if ((v57 & 1) == 0)
      {
        v19 = v125;
        if (v121)
        {
          re::introspect<re::Vector3<float>>(void)::info = (_UNKNOWN *)re::introspect_Vector3F(0);
          v19 = v125;
        }
      }
      v23 = v56 == re::introspect<re::Vector3<float>>(void)::info;
      v15 = v20;
      if (!v23)
        goto LABEL_148;
      v130 = v54 - 1;
      if (v54 - 1 >= v12[128])
      {
        re::DynamicArray<re::EvaluationContextManager::BindPointReference>::resize(v12 + 126, v54);
        goto LABEL_144;
      }
      if (!*(_QWORD *)(v12[130] + 56 * (v54 - 1) + 24))
      {
LABEL_144:
        re::DynamicArray<unsigned long>::add(v12 + 171, &v130);
        v138.n128_u64[0] = v133.n128_u64[0];
        re::DynamicArray<re::BindPoint::BindPointData>::DynamicArray((uint64_t)&v138.n128_i64[1], &v133.n128_i64[1]);
        v139[32] = 0;
        v100 = v130;
        v101 = v12[128];
        if (v101 > v130)
        {
          v102 = v53[130];
          goto LABEL_146;
        }
LABEL_164:
        v132[0] = 0;
        v17[26] = 0u;
        v17[27] = 0u;
        v17[24] = 0u;
        v17[25] = 0u;
        v17[23] = 0u;
        os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        *(_DWORD *)v173 = 136315906;
        *(_QWORD *)(v16 + 4) = "operator[]";
        *(_WORD *)&v173[12] = 1024;
        *(_DWORD *)(v16 + 14) = 789;
        *(_WORD *)&v173[18] = 2048;
        *(_QWORD *)(v16 + 20) = v100;
        *(_WORD *)&v173[28] = 2048;
        *(_QWORD *)(v16 + 30) = v101;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
      }
      goto LABEL_147;
    case 0xA:
      memset(v139, 0, sizeof(v139));
      v138 = 0u;
      v140 = 0x7FFFFFFFLL;
      v141 = 0u;
      v142 = 0u;
      v143 = 0;
      v144 = 0x7FFFFFFFLL;
      v147 = 0;
      v145 = 0;
      v146 = 0;
      v164 = 0;
      v149 = 0u;
      v150 = 0u;
      v148 = 0;
      v151 = 0;
      v152 = 0u;
      v153 = 0u;
      v154 = 0;
      v157 = 0;
      v156 = 0u;
      v155 = 0u;
      v160 = 0;
      v158 = 0u;
      v159 = 0u;
      v161 = 0u;
      v162 = 0u;
      v163 = 0;
      re::BindNode::bindPointWithOverride<re::SkeletalPose>(a8, &v126, (uint64_t)&v136);
      v59 = (_anonymous_namespace_ *)re::BindPoint::valueUntyped((re::BindPoint *)&v136);
      if (!v59 || (v60 = *((_QWORD *)v59 + 10)) == 0 || !*(_QWORD *)(v60 + 40))
      {
        v133.n128_u64[0] = (unint64_t)".";
        v133.n128_u64[1] = 1;
        re::StringSlice::findLastOf(&v126, (unsigned __int8 **)&v133, 0, (uint64_t)v132);
        v133.n128_u64[0] = (unint64_t)"]";
        v133.n128_u64[1] = 1;
        re::StringSlice::findLastOf(&v126, (unsigned __int8 **)&v133, 0, (uint64_t)&v130);
        v133.n128_u64[0] = (unint64_t)"[";
        v133.n128_u64[1] = 1;
        LastOf = (_anonymous_namespace_ *)re::StringSlice::findLastOf(&v126, (unsigned __int8 **)&v133, 0, (uint64_t)v128);
        if (LOBYTE(v132[0]))
        {
          if ((_BYTE)v130)
          {
            if (v128[0])
            {
              v76 = v131;
              v77 = v129;
              if (v131 > v129)
              {
                v123 = v15;
                *(_QWORD *)v173 = re::Slice<char>::range(&v126, 0, v132[1]);
                *(_QWORD *)&v173[8] = v78;
                re::BindNode::bindPoint<re::ecs2::SkeletalPoseComponent>((uint64_t)&v133, a8, (uint64_t *)v173);
                v79 = re::BindPoint::valueUntyped((re::BindPoint *)&v133);
                if (!v79)
                {
                  v165[0].n128_u8[0] = 0;
                  v165[0].n128_u64[1] = 6002;
                  v165[1].n128_u64[0] = (unint64_t)&re::AnimationErrorCategory(void)::instance;
                  *(__n128 *)((char *)&v165[1] + 8) = *(__n128 *)v173;
                  v165[2].n128_u64[1] = *(_QWORD *)&v173[16];
                  v165[3].n128_u64[0] = *(_QWORD *)&v173[24];
LABEL_157:
                  v15 = v123;
                  re::DynamicArray<re::BindPoint::BindPointData>::deinit((uint64_t)&v133.n128_i64[1]);
                  re::DynamicArray<re::BindPoint::BindPointData>::deinit((uint64_t)&v133.n128_i64[1]);
                  goto LABEL_153;
                }
                v80 = v79;
                v81 = *(_QWORD *)(*(_QWORD *)(v79 + 16) + 176);
                if (v81)
                {
                  v82 = re::AssetHandle::loadedAsset<re::MeshAsset>((re::MeshAsset *)(v81 + 32));
                  if (v82)
                  {
                    v83 = v77 + 1;
                    v84 = v76 - (v77 + 1);
                    v85 = (const re::MeshAsset *)v82;
                    v86 = (_anonymous_namespace_ *)re::Slice<char>::operator[](v126, v127, v83);
                    if ((v173[8] & 1) != 0)
                      v87 = *(const char **)&v173[16];
                    else
                      v87 = &v173[9];
                    v88 = atoi(v87);
                    v89 = re::AssetHandle::loadedAsset<re::SkeletalPoseDefinitionAsset>((re::SkeletalPoseDefinitionAsset *)(v80 + 32));
                    if (v89)
                      v90 = (const re::SkeletalPoseDefinitionAsset *)v89;
                    else
                      v90 = (const re::SkeletalPoseDefinitionAsset *)(v80 + 152);
                    re::RigRuntimeData::makeRigHierarchyForPose((re::RigRuntimeData *)v165, v85, v90, v88, (const re::BindPoint *)&v136, a3, (re::EvaluationTree *)v13, a5);
                    if (*(_QWORD *)v173 && (v173[8] & 1) != 0)
                      (*(void (**)(void))(**(_QWORD **)v173 + 40))();
                    goto LABEL_157;
                  }
                }
                re::DynamicArray<re::BindPoint::BindPointData>::deinit((uint64_t)&v133.n128_i64[1]);
                LastOf = (_anonymous_namespace_ *)re::DynamicArray<re::BindPoint::BindPointData>::deinit((uint64_t)&v133.n128_i64[1]);
                v15 = v123;
              }
            }
          }
        }
        v165[0].n128_u8[0] = 0;
        v165[0].n128_u64[1] = 6002;
        v165[1].n128_u64[0] = (unint64_t)&re::AnimationErrorCategory(void)::instance;
        *(__n128 *)((char *)&v165[1] + 8) = v133;
        v165[2].n128_u64[1] = v134;
        v165[3].n128_u64[0] = v135;
        goto LABEL_153;
      }
      v61 = v15;
      v62 = (const re::Skeleton *)(v60 + 24);
      v63 = re::RigHierarchy::bindRigHierarchyPose((re::RigHierarchy *)&v138, (re::EvaluationTree *)v13, a5, (const re::BindPoint *)&v136, v173);
      if (!v173[0] && *(_QWORD *)&v173[24])
      {
        if ((v173[32] & 1) != 0)
          (*(void (**)(__n128))(**(_QWORD **)&v173[24] + 40))(v63);
        *(_OWORD *)&v173[24] = 0u;
        v174 = 0u;
      }
      re::RigHierarchy::RigHierarchy((uint64_t)&v133, (__int128 *)&v138);
      v165[0].n128_u8[0] = 1;
      re::RigHierarchy::RigHierarchy((uint64_t)&v165[0].n128_i64[1], (__int128 *)&v133);
      re::RigHierarchy::~RigHierarchy((re::RigHierarchy *)&v133);
      v15 = v61;
LABEL_153:
      re::DynamicArray<re::BindPoint::BindPointData>::deinit((uint64_t)v137);
      re::DynamicArray<re::BindPoint::BindPointData>::deinit((uint64_t)v137);
      re::RigHierarchy::~RigHierarchy((re::RigHierarchy *)&v138);
      if (v165[0].n128_u8[0])
      {
        v105 = *(_QWORD *)(v125 + 184);
        v106 = *(__int128 *)((char *)v165 + 8);
        *(_QWORD *)(v105 + 16) = v165[1].n128_u64[1];
        *(_OWORD *)v105 = v106;
        re::HashTable<re::DynamicString,unsigned long,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::operator=(v105 + 24, (uint64_t)&v165[2]);
        re::HashTable<re::DynamicString,unsigned long,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::operator=(v105 + 72, (uint64_t)&v166);
        re::DynamicArray<re::Pair<re::DynamicString,re::RigDataTypeClass,true>>::operator=(v105 + 120, v167);
        re::DynamicArray<re::DynamicArray<re::RigDataValue>>::operator=(v105 + 160, v168);
        re::DynamicArray<re::StringID>::operator=(v105 + 200, v169);
        re::DynamicArray<unsigned long>::operator=(v105 + 240, v170);
        re::DynamicArray<re::RigHierarchyJointTransform>::operator=(v105 + 280, v171);
        re::DynamicArray<unsigned long>::operator=(v105 + 320, v172);
        result = re::Result<re::RigHierarchy,re::DetailedError>::~Result((uint64_t)v165);
LABEL_150:
        *v15 = 1;
        return result;
      }
      v138 = *(__n128 *)((char *)v165 + 8);
      re::DynamicString::DynamicString((re::DynamicString *)v139, (const re::DynamicString *)&v165[1].n128_i8[8]);
      v107 = *(_QWORD *)&v139[16];
      v108 = *(_QWORD *)&v139[24];
      *v15 = 0;
      v109 = *(_OWORD *)v139;
      *(__n128 *)(v15 + 8) = v138;
      *(_OWORD *)(v15 + 24) = v109;
      *((_QWORD *)v15 + 5) = v107;
      *((_QWORD *)v15 + 6) = v108;
      return re::Result<re::RigHierarchy,re::DetailedError>::~Result((uint64_t)v165);
    case 0xB:
      v122 = result;
      if (*(_QWORD *)(a2 + 256))
      {
        v65 = 0;
        do
        {
          v66 = re::RigDataValue::attributeValue((re::RigDataValue *)a2, v65);
          re::DynamicString::format((re::DynamicString *)"%.*s[%zu]", (re::DynamicString *)&v138, v10, a6, v65);
          if ((v138.n128_u8[8] & 1) != 0)
            v67 = *(__int8 **)v139;
          else
            v67 = &v138.n128_i8[9];
          if ((v138.n128_u8[8] & 1) != 0)
            v68 = v138.n128_u64[1] >> 1;
          else
            v68 = v138.n128_u8[8] >> 1;
          if (!v165[0].n128_u8[0] && v165[1].n128_u64[1])
          {
            if ((v165[2].n128_u8[0] & 1) != 0)
              (*(void (**)(void))(*(_QWORD *)v165[1].n128_u64[1] + 40))();
            memset(&v165[1].n128_i8[8], 0, 32);
          }
          result = v138.n128_u64[0];
          if (v138.n128_u64[0] && (v138.n128_u8[8] & 1) != 0)
            result = (*(uint64_t (**)(void))(*(_QWORD *)v138.n128_u64[0] + 40))();
          ++v65;
          a2 = v125;
        }
        while (v65 < *(_QWORD *)(v125 + 256));
      }
      goto LABEL_105;
    case 0xD:
      if (*(_QWORD *)(a2 + 40) >> 1 == 82389)
      {
        v69 = *(char **)(a2 + 48);
        if (v69 == "SRT" || (result = strcmp(v69, "SRT"), a2 = v125, !(_DWORD)result))
        {
          v133.n128_u64[0] = a6;
          v133.n128_u64[1] = (unint64_t)v10;
          v165[0].n128_u64[1] = 1065353216;
          v165[0].n128_u64[0] = 0x3F8000003F800000;
          v165[1].n128_u64[1] = 0x3F80000000000000;
          v165[1].n128_u64[0] = 0;
          v165[2] = 0uLL;
          v91 = (re::RigDataValue *)a2;
          re::EvaluationTree::createInputRegister(v13, v165, &v138);
          v165[0].n128_u64[1] = 1065353216;
          v165[0].n128_u64[0] = 0x3F8000003F800000;
          v165[1].n128_u64[1] = 0x3F80000000000000;
          v165[1].n128_u64[0] = 0;
          v165[2] = 0uLL;
          re::DynamicArray<re::EvaluationSRT>::add((_anonymous_namespace_ *)(v12 + 41), &v138);
          re::DynamicArray<re::Matrix3x3<float>>::add((_anonymous_namespace_ *)(v12 + 86), (uint64_t)v165);
          v92 = v12[43] - 1;
          *(_QWORD *)v173 = v12;
          *(_QWORD *)&v173[8] = v92;
          re::BindNode::bindPointWithOverride<re::GenericSRT<float>>(a8, (uint64_t *)&v133, (uint64_t)v165);
          re::EvaluationContextManager::bindInputHandle<re::GenericSRT<float>>(v12, (uint64_t)v173, v165, 0);
          v93 = re::RigDataValue::attributeValue(v91, 0);
          v94 = v138.n128_u64[0];
          *(_BYTE *)(v93 + 96) = 2;
          *(_QWORD *)(v93 + 176) = v94;
          v95 = re::RigDataValue::attributeValue(v91, 1uLL);
          v96 = v138.n128_u64[1];
          *(_BYTE *)(v95 + 96) = 2;
          *(_QWORD *)(v95 + 176) = v96;
          v97 = re::RigDataValue::attributeValue(v91, 2uLL);
          v98 = *(_QWORD *)v139;
          *(_BYTE *)(v97 + 96) = 2;
          *(_QWORD *)(v97 + 176) = v98;
          v99 = &v165[0].n128_u64[1];
          goto LABEL_149;
        }
      }
      v122 = (uint64_t)v15;
      if (*(_QWORD *)(a2 + 256))
      {
        v70 = 0;
        do
        {
          v71 = re::RigDataValue::attributeValue((re::RigDataValue *)a2, v70);
          v72 = re::RigDataTypeClass::attributeName(v9, v70);
          re::DynamicString::format((re::DynamicString *)"%.*s.%s", (re::DynamicString *)&v138, v10, a6, *(_QWORD *)(v72 + 8));
          if ((v138.n128_u8[8] & 1) != 0)
            v73 = *(__int8 **)v139;
          else
            v73 = &v138.n128_i8[9];
          if ((v138.n128_u8[8] & 1) != 0)
            v74 = v138.n128_u64[1] >> 1;
          else
            v74 = v138.n128_u8[8] >> 1;
          if (!v165[0].n128_u8[0] && v165[1].n128_u64[1])
          {
            if ((v165[2].n128_u8[0] & 1) != 0)
              (*(void (**)(void))(*(_QWORD *)v165[1].n128_u64[1] + 40))();
            memset(&v165[1].n128_i8[8], 0, 32);
          }
          result = v138.n128_u64[0];
          if (v138.n128_u64[0] && (v138.n128_u8[8] & 1) != 0)
            result = (*(uint64_t (**)(void))(*(_QWORD *)v138.n128_u64[0] + 40))();
          ++v70;
          a2 = v125;
        }
        while (v70 < *(_QWORD *)(v125 + 256));
      }
LABEL_105:
      v15 = (_BYTE *)v122;
      goto LABEL_150;
    default:
      re::internal::assertLog((re::internal *)4, a2, "assertion failure: '%s' (%s:line %i) Unsupported type.", "!\"Unreachable code\"", "setCompilationValueForBoundInput", 691);
      _os_crash();
      __break(1u);
LABEL_166:
      {
        v8[454] = (__guard)re::introspect_int(0, v110);
      }
LABEL_3:
      re::BindNode::bindPointWithOverride(a8, v8[454], &v136, (uint64_t)&v133);
      v19 = v125;
      if (!v135)
        goto LABEL_148;
      v20 = v15;
      v21 = v133.n128_u64[0];
      v22 = atomic_load((unsigned __int8 *)v12);
      if ((v22 & 1) == 0)
      {
        v19 = v125;
        if (v112)
        {
          v8[454] = (__guard)re::introspect_int(0, v113);
          v19 = v125;
        }
      }
      v23 = v21 == v8[454];
      v15 = v20;
      if (!v23)
        goto LABEL_148;
      v130 = (unint64_t)v13 - 1;
      if ((unint64_t)v13 - 1 >= v10[93])
      {
        re::DynamicArray<re::EvaluationContextManager::BindPointReference>::resize(v10 + 91, (unint64_t)v13);
      }
      else if (*(_QWORD *)(v10[95] + 56 * ((_QWORD)v13 - 1) + 24))
      {
LABEL_147:
        v19 = v125;
LABEL_148:
        *(_BYTE *)(v19 + 96) = 2;
        *(_QWORD *)(v19 + 176) = a3;
        v99 = &v133.n128_u64[1];
LABEL_149:
        re::DynamicArray<re::BindPoint::BindPointData>::deinit((uint64_t)v99);
        result = re::DynamicArray<re::BindPoint::BindPointData>::deinit((uint64_t)v99);
        goto LABEL_150;
      }
      re::DynamicArray<unsigned long>::add(v10 + 136, &v130);
      v138.n128_u64[0] = v133.n128_u64[0];
      re::DynamicArray<re::BindPoint::BindPointData>::DynamicArray((uint64_t)&v138.n128_i64[1], &v133.n128_i64[1]);
      v139[32] = 0;
      v100 = v130;
      v101 = v10[93];
      if (v101 > v130)
      {
        v102 = v10[95];
LABEL_146:
        v104 = v102 + 56 * v100;
        *(_QWORD *)v104 = v138.n128_u64[0];
        re::DynamicArray<re::RigDataValue>::operator=(v104 + 8, (uint64_t)&v138.n128_i64[1]);
        *(_BYTE *)(v104 + 48) = v139[32];
        re::DynamicArray<re::BindPoint::BindPointData>::deinit((uint64_t)&v138.n128_i64[1]);
        re::DynamicArray<re::BindPoint::BindPointData>::deinit((uint64_t)&v138.n128_i64[1]);
        v15 = v20;
        goto LABEL_147;
      }
      v132[0] = 0;
      memset(v165, 0, sizeof(v165));
      v17 = (__n128 *)MEMORY[0x24BDACB70];
      os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      *(_DWORD *)v173 = 136315906;
      *(_QWORD *)&v173[4] = "operator[]";
      *(_WORD *)&v173[12] = 1024;
      *(_DWORD *)&v173[14] = 789;
      *(_WORD *)&v173[18] = 2048;
      *(_QWORD *)&v173[20] = v100;
      *(_WORD *)&v173[28] = 2048;
      *(_QWORD *)&v173[30] = v101;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
      goto LABEL_159;
  }
}

double re::BindNode::bindPointWithOverride<float>@<D0>(re::BindNode **a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t *v3;
  unsigned __int8 v4;
  __objc2_class_ro **p_info;
  int v7;
  const re::IntrospectionBase *v8;
  int v9;
  uint64_t v10;
  re::BindNode **v12;

  v3 = a2;
  p_info = VideoSpillMapMetalSession.info;
  if ((v4 & 1) == 0)
  {
    v12 = a1;
    v10 = a3;
    p_info = (__objc2_class_ro **)(VideoSpillMapMetalSession + 32);
    a3 = v10;
    v3 = a2;
    v9 = v7;
    a1 = v12;
    if (v9)
    {
      re::introspect<float>(void)::info = re::introspect_float(0, v8);
      p_info = (__objc2_class_ro **)(VideoSpillMapMetalSession + 32);
      a3 = v10;
      v3 = a2;
      a1 = v12;
    }
  }
  return re::BindNode::bindPointWithOverride(a1, (uint64_t)p_info[7], v3, a3);
}

void re::EvaluationContextManager::bindInputHandle<re::Matrix4x4<float>>(_QWORD *a1, uint64_t a2, _QWORD *a3)
{
  __objc2_class_ro *v5;
  unsigned __int8 v6;
  __objc2_class_ro **p_info;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int v13;
  BOOL v14[8];
  __objc2_class_ro *v15;
  _BYTE v16[40];
  char v17;
  _QWORD v18[2];
  int v19;
  const char *v20;
  __int16 v21;
  int v22;
  __int16 v23;
  uint64_t v24;
  __int16 v25;
  unint64_t v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  uint64_t v32;

  v32 = *MEMORY[0x24BDAC8D0];
  if (a3[3])
  {
    v5 = (__objc2_class_ro *)*a3;
    p_info = VideoSpillMapMetalSession.info;
    if ((v6 & 1) == 0)
    {
      *(_QWORD *)v14 = a2;
      p_info = (__objc2_class_ro **)(VideoSpillMapMetalSession + 32);
      a2 = *(_QWORD *)v14;
      if (v13)
      {
        re::introspect<re::Matrix4x4<float>>(void)::info = (_UNKNOWN *)re::introspect_Matrix4x4F(0);
        p_info = (__objc2_class_ro **)(VideoSpillMapMetalSession + 32);
        a2 = *(_QWORD *)v14;
      }
    }
    if (v5 == p_info[187])
    {
      v8 = *(_QWORD *)(a2 + 8);
      v18[0] = v8;
      if (v8 >= a1[113])
      {
        re::DynamicArray<re::EvaluationContextManager::BindPointReference>::resize(a1 + 111, v8 + 1);
      }
      else if (*(_QWORD *)(a1[115] + 56 * v8 + 24))
      {
        return;
      }
      re::DynamicArray<unsigned long>::add(a1 + 156, v18);
      v15 = (__objc2_class_ro *)*a3;
      re::DynamicArray<re::BindPoint::BindPointData>::DynamicArray((uint64_t)v16, a3 + 1);
      v17 = 0;
      v9 = v18[0];
      v10 = a1[113];
      if (v10 <= v18[0])
      {
        v18[1] = 0;
        v30 = 0u;
        v31 = 0u;
        v28 = 0u;
        v29 = 0u;
        v27 = 0u;
        v12 = v10;
        os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        v19 = 136315906;
        v20 = "operator[]";
        v21 = 1024;
        v22 = 789;
        v23 = 2048;
        v24 = v9;
        v25 = 2048;
        v26 = v12;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
      }
      v11 = a1[115] + 56 * v18[0];
      *(_QWORD *)v11 = v15;
      re::DynamicArray<re::RigDataValue>::operator=(v11 + 8, (uint64_t)v16);
      *(_BYTE *)(v11 + 48) = v17;
      re::DynamicArray<re::BindPoint::BindPointData>::deinit((uint64_t)v16);
      re::DynamicArray<re::BindPoint::BindPointData>::deinit((uint64_t)v16);
    }
  }
}

double re::BindNode::bindPointWithOverride<re::SkeletalPose>@<D0>(re::BindNode **a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t *v3;
  unsigned __int8 v4;
  __objc2_class_ro **p_info;
  int v7;
  int v8;
  uint64_t v9;
  re::BindNode **v11;

  v3 = a2;
  p_info = VideoSpillMapMetalSession.info;
  if ((v4 & 1) == 0)
  {
    v11 = a1;
    v9 = a3;
    p_info = (__objc2_class_ro **)(VideoSpillMapMetalSession + 32);
    a3 = v9;
    v3 = a2;
    v8 = v7;
    a1 = v11;
    if (v8)
    {
      re::introspect<re::SkeletalPose>(void)::info = re::introspect_SkeletalPose(0);
      p_info = (__objc2_class_ro **)(VideoSpillMapMetalSession + 32);
      a3 = v9;
      v3 = a2;
      a1 = v11;
    }
  }
  return re::BindNode::bindPointWithOverride(a1, (uint64_t)p_info[37], v3, a3);
}

double re::BindNode::bindPoint<re::ecs2::SkeletalPoseComponent>(uint64_t a1, re::BindNode **a2, uint64_t *a3)
{
  re::BindNode **v3;
  unsigned __int8 v4;
  __guard *v5;
  int v7;
  int v8;
  uint64_t *v10;
  uint64_t v11;

  v3 = a2;
  if ((v4 & 1) == 0)
  {
    v11 = a1;
    v10 = a3;
    v3 = a2;
    a3 = v10;
    v8 = v7;
    a1 = v11;
    if (v8)
    {
      re::introspect<re::ecs2::SkeletalPoseComponent>(void)::info = (_UNKNOWN *)re::ecs2::introspect_SkeletalPoseComponent(0);
      a1 = v11;
      v3 = a2;
      a3 = v10;
    }
  }
  return re::BindNode::bindPoint(v3, v5[460], a3, a1);
}

uint64_t re::Slice<char>::operator[](uint64_t a1, unint64_t a2, unint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t result;

  if (a2 > a3)
    return a1 + a3;
  re::internal::assertLog((re::internal *)6, a2, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 251, a3, a2, v3, v4);
  result = _os_crash();
  __break(1u);
  return result;
}

uint64_t re::Result<re::RigHierarchy,re::DetailedError>::~Result(uint64_t a1)
{
  uint64_t v2;
  _OWORD *v3;

  if (*(_BYTE *)a1)
  {
    re::RigHierarchy::~RigHierarchy((re::RigHierarchy *)(a1 + 8));
  }
  else
  {
    v3 = (_OWORD *)(a1 + 24);
    v2 = *(_QWORD *)(a1 + 24);
    if (v2)
    {
      if ((*(_BYTE *)(a1 + 32) & 1) != 0)
        (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v2 + 40))(v2, *(_QWORD *)(a1 + 40));
      *v3 = 0u;
      *(_OWORD *)(a1 + 40) = 0u;
    }
  }
  return a1;
}

double re::BindNode::bindPointWithOverride<re::GenericSRT<float>>@<D0>(re::BindNode **a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t *v3;
  unsigned __int8 v4;
  __objc2_class_ro **p_info;
  int v7;
  int v8;
  uint64_t v9;
  re::BindNode **v11;

  v3 = a2;
  p_info = VideoSpillMapMetalSession.info;
  if ((v4 & 1) == 0)
  {
    v11 = a1;
    v9 = a3;
    p_info = (__objc2_class_ro **)(VideoSpillMapMetalSession + 32);
    a3 = v9;
    v3 = a2;
    v8 = v7;
    a1 = v11;
    if (v8)
    {
      re::introspect<re::GenericSRT<float>>(void)::info = re::introspect_SRT(0);
      p_info = (__objc2_class_ro **)(VideoSpillMapMetalSession + 32);
      a3 = v9;
      v3 = a2;
      a1 = v11;
    }
  }
  return re::BindNode::bindPointWithOverride(a1, (uint64_t)p_info[39], v3, a3);
}

void re::RigEvaluation::~RigEvaluation(re::RigEvaluation *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  double v8;
  uint64_t v9;

  re::DynamicArray<re::internal::RigIKCall>::deinit((uint64_t)this + 1488);
  v2 = *((_QWORD *)this + 183);
  if (v2)
  {
    if (*((_QWORD *)this + 184))
    {
      (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v2 + 40))(v2, *((_QWORD *)this + 185));
      *((_QWORD *)this + 184) = 0;
      *((_QWORD *)this + 185) = 0;
    }
    *((_QWORD *)this + 183) = 0;
  }
  v3 = *((_QWORD *)this + 180);
  if (v3)
  {
    if (*((_QWORD *)this + 181))
    {
      (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v3 + 40))(v3, *((_QWORD *)this + 182));
      *((_QWORD *)this + 181) = 0;
      *((_QWORD *)this + 182) = 0;
    }
    *((_QWORD *)this + 180) = 0;
  }
  v4 = *((_QWORD *)this + 177);
  if (v4)
  {
    if (*((_QWORD *)this + 178))
    {
      (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v4 + 40))(v4, *((_QWORD *)this + 179));
      *((_QWORD *)this + 178) = 0;
      *((_QWORD *)this + 179) = 0;
    }
    *((_QWORD *)this + 177) = 0;
  }
  v5 = *((_QWORD *)this + 174);
  if (v5)
  {
    if (*((_QWORD *)this + 175))
    {
      (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v5 + 40))(v5, *((_QWORD *)this + 176));
      *((_QWORD *)this + 175) = 0;
      *((_QWORD *)this + 176) = 0;
    }
    *((_QWORD *)this + 174) = 0;
  }
  re::FixedArray<re::FixedArray<float>>::deinit((_QWORD *)this + 171);
  re::FixedArray<re::FixedArray<float>>::deinit((_QWORD *)this + 168);
  re::FixedArray<re::internal::RigIKCall>::deinit((_QWORD *)this + 165);
  v6 = *((_QWORD *)this + 162);
  if (v6)
  {
    if (*((_QWORD *)this + 163))
    {
      (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v6 + 40))(v6, *((_QWORD *)this + 164));
      *((_QWORD *)this + 163) = 0;
      *((_QWORD *)this + 164) = 0;
    }
    *((_QWORD *)this + 162) = 0;
  }
  v7 = *((_QWORD *)this + 159);
  if (v7)
  {
    if (*((_QWORD *)this + 160))
    {
      (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v7 + 40))(v7, *((_QWORD *)this + 161));
      *((_QWORD *)this + 160) = 0;
      *((_QWORD *)this + 161) = 0;
    }
    *((_QWORD *)this + 159) = 0;
  }
  re::HashTable<re::StringID,re::DataArrayHandle<re::RigGraphOperatorDefinition>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::deinit((uint64_t *)this + 153);
  v8 = re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 147);
  v9 = *((_QWORD *)this + 144);
  if (v9)
  {
    if (*((_QWORD *)this + 145))
    {
      (*(void (**)(uint64_t, _QWORD, double))(*(_QWORD *)v9 + 40))(v9, *((_QWORD *)this + 146), v8);
      *((_QWORD *)this + 145) = 0;
      *((_QWORD *)this + 146) = 0;
    }
    *((_QWORD *)this + 144) = 0;
  }
  re::RigDefinition::~RigDefinition((re::RigEvaluation *)((char *)this + 8));
}

_QWORD *re::DynamicArray<re::RigRuntimeData::RigGraphRunTimeBoundParameter>::setCapacity(_QWORD *result, unint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v5;
  uint64_t v6;
  unint64_t *v7;
  re::StringID *v8;
  uint64_t v9;
  re::StringID *v10;
  unint64_t *v11;
  uint64_t v12;
  unint64_t v13;

  v3 = result[1];
  if (v3 != a2)
  {
    v5 = result;
    if (result[2] <= a2)
    {
      result = (_QWORD *)*result;
      if (!*v5)
      {
        result = (_QWORD *)re::DynamicArray<re::RigRuntimeData::RigGraphRunTimeBoundParameter>::setCapacity(v5, a2);
        ++*((_DWORD *)v5 + 6);
        return result;
      }
      if (a2)
      {
        if (is_mul_ok(a2, 0x18uLL))
        {
          v2 = 24 * a2;
          result = (_QWORD *)(*(uint64_t (**)(_QWORD *, unint64_t, uint64_t))(*result + 32))(result, 24 * a2, 8);
          if (result)
          {
            v7 = result;
            if (!v5[1])
              goto LABEL_16;
            goto LABEL_11;
          }
        }
        else
        {
          re::internal::assertLog((re::internal *)6, a2, "assertion failure: '%s' (%s:line %i) Size overflow in DynamicArray<T>::setCapacity(). Element size = %zu, capacity = %zu", "!overflow", "setCapacity", 615, 24, a2);
          _os_crash();
          __break(1u);
        }
        re::internal::assertLog((re::internal *)6, v6, "assertion failure: '%s' (%s:line %i) DynamicArray<T> is out of memory (tried to allocate %zu bytes from allocator '%s').", "newData", "setCapacity", 619, v2, *(_QWORD *)(*v5 + 8));
        result = (_QWORD *)_os_crash();
        __break(1u);
        return result;
      }
      v7 = 0;
      if (!v3)
      {
LABEL_16:
        v5[4] = v7;
        v5[1] = a2;
        return result;
      }
LABEL_11:
      v8 = (re::StringID *)v5[4];
      v9 = v5[2];
      if (v9)
      {
        v10 = (re::StringID *)((char *)v8 + 24 * v9);
        v11 = v7;
        do
        {
          v12 = *(_QWORD *)v8;
          *v11 = *v11 & 0xFFFFFFFFFFFFFFFELL | *(_QWORD *)v8 & 1;
          *v11 = *(_QWORD *)v8 & 0xFFFFFFFFFFFFFFFELL | v12 & 1;
          v13 = *((_QWORD *)v8 + 2);
          v11[1] = *((_QWORD *)v8 + 1);
          *(_QWORD *)v8 = 0;
          *((_QWORD *)v8 + 1) = &str_110;
          v11[2] = v13;
          re::StringID::destroyString(v8);
          v8 = (re::StringID *)((char *)v8 + 24);
          v11 += 3;
        }
        while (v8 != v10);
        v8 = (re::StringID *)v5[4];
      }
      result = (_QWORD *)(*(uint64_t (**)(_QWORD, re::StringID *))(*(_QWORD *)*v5 + 40))(*v5, v8);
      goto LABEL_16;
    }
  }
  return result;
}

uint64_t re::HashTable<unsigned int,unsigned int,re::Hash<unsigned int>,re::EqualTo<unsigned int>,true,false>::addAsMove(uint64_t a1, unsigned int a2, unint64_t a3, _DWORD *a4, _DWORD *a5)
{
  uint64_t v9;
  int v10;
  uint64_t v11;
  int v12;
  uint64_t v13;

  v9 = *(unsigned int *)(a1 + 36);
  if ((_DWORD)v9 == 0x7FFFFFFF)
  {
    v9 = *(unsigned int *)(a1 + 32);
    v10 = v9;
    if ((_DWORD)v9 == *(_DWORD *)(a1 + 24))
    {
      re::HashTable<unsigned int,unsigned int,re::Hash<unsigned int>,re::EqualTo<unsigned int>,true,false>::setCapacity(a1, (2 * *(_DWORD *)(a1 + 28)));
      a2 = a3 % *(unsigned int *)(a1 + 24);
      v10 = *(_DWORD *)(a1 + 32);
    }
    *(_DWORD *)(a1 + 32) = v10 + 1;
    v11 = *(_QWORD *)(a1 + 16);
    v12 = *(_DWORD *)(v11 + 24 * v9 + 8);
  }
  else
  {
    v11 = *(_QWORD *)(a1 + 16);
    v12 = *(_DWORD *)(v11 + 24 * v9 + 8);
    *(_DWORD *)(a1 + 36) = v12 & 0x7FFFFFFF;
  }
  *(_DWORD *)(v11 + 24 * v9 + 8) = v12 | 0x80000000;
  v13 = *(_QWORD *)(a1 + 8);
  *(_DWORD *)(*(_QWORD *)(a1 + 16) + 24 * v9 + 8) = *(_DWORD *)(*(_QWORD *)(a1 + 16) + 24 * v9 + 8) & 0x80000000 | *(_DWORD *)(v13 + 4 * a2);
  *(_QWORD *)(*(_QWORD *)(a1 + 16) + 24 * v9) = a3;
  *(_DWORD *)(*(_QWORD *)(a1 + 16) + 24 * v9 + 12) = *a4;
  *(_DWORD *)(*(_QWORD *)(a1 + 16) + 24 * v9 + 16) = *a5;
  *(_DWORD *)(v13 + 4 * a2) = v9;
  ++*(_DWORD *)(a1 + 28);
  return v9;
}

void re::HashTable<unsigned int,unsigned int,re::Hash<unsigned int>,re::EqualTo<unsigned int>,true,false>::setCapacity(uint64_t a1, unsigned int a2)
{
  uint64_t v4;
  __int128 v5;
  uint64_t v6;
  unsigned int v7;
  __int128 v8;
  unsigned int v9;
  uint64_t v10;
  unint64_t v11;
  signed int v12;
  _BYTE v13[44];

  v4 = *(_QWORD *)a1;
  if (*(_QWORD *)a1)
  {
    if (a2 && *(_DWORD *)(a1 + 24) != a2 && *(_DWORD *)(a1 + 28) <= a2)
    {
      memset(v13, 0, 36);
      *(_QWORD *)&v13[36] = 0x7FFFFFFFLL;
      re::HashTable<re::internal::SerializeFuncKey,BOOL (*)(re::Serializer<re::EncoderBinary<re::SeekableInputStream>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL),re::internal::HashSerializeFuncKey,re::EqualTo<re::internal::SerializeFuncKey>,false,true>::init((uint64_t)v13, v4, a2);
      v5 = *(_OWORD *)v13;
      *(_OWORD *)v13 = *(_OWORD *)a1;
      *(_OWORD *)a1 = v5;
      v6 = *(_QWORD *)&v13[16];
      *(_QWORD *)&v13[16] = *(_QWORD *)(a1 + 16);
      *(_QWORD *)(a1 + 16) = v6;
      v8 = *(_OWORD *)&v13[24];
      *(_OWORD *)&v13[24] = *(_OWORD *)(a1 + 24);
      v7 = *(_DWORD *)&v13[32];
      *(_OWORD *)(a1 + 24) = v8;
      v9 = v7;
      if (v7)
      {
        v10 = 0;
        v11 = 0;
        do
        {
          if ((*(_DWORD *)(*(_QWORD *)&v13[16] + v10 + 8) & 0x80000000) != 0)
          {
            re::HashTable<unsigned int,unsigned int,re::Hash<unsigned int>,re::EqualTo<unsigned int>,true,false>::addAsMove(a1, *(_QWORD *)(*(_QWORD *)&v13[16] + v10) % (unint64_t)*(unsigned int *)(a1 + 24), *(_QWORD *)(*(_QWORD *)&v13[16] + v10), (_DWORD *)(*(_QWORD *)&v13[16] + v10 + 12), (_DWORD *)(*(_QWORD *)&v13[16] + v10 + 16));
            v9 = *(_DWORD *)&v13[32];
          }
          ++v11;
          v10 += 24;
        }
        while (v11 < v9);
      }
      re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)v13);
    }
  }
  else
  {
    if (a2)
      v12 = a2;
    else
      v12 = 3;
  }
}

uint64_t re::RigHierarchy::RigHierarchy(uint64_t a1, __int128 *a2)
{
  __int128 v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;

  v4 = *a2;
  *(_QWORD *)(a1 + 16) = *((_QWORD *)a2 + 2);
  *(_OWORD *)a1 = v4;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_DWORD *)(a1 + 56) = 0;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_QWORD *)(a1 + 60) = 0x7FFFFFFFLL;
  re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::swap((uint64_t *)(a1 + 24), (uint64_t *)a2 + 3);
  *(_DWORD *)(a1 + 104) = 0;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_QWORD *)(a1 + 108) = 0x7FFFFFFFLL;
  re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::swap((uint64_t *)(a1 + 72), (uint64_t *)a2 + 9);
  *(_QWORD *)(a1 + 152) = 0;
  *(_DWORD *)(a1 + 144) = 0;
  *(_QWORD *)(a1 + 128) = 0;
  *(_QWORD *)(a1 + 136) = 0;
  *(_QWORD *)(a1 + 120) = 0;
  v5 = *((_QWORD *)a2 + 16);
  *(_QWORD *)(a1 + 120) = *((_QWORD *)a2 + 15);
  *(_QWORD *)(a1 + 128) = v5;
  *((_QWORD *)a2 + 15) = 0;
  *((_QWORD *)a2 + 16) = 0;
  v6 = *(_QWORD *)(a1 + 136);
  *(_QWORD *)(a1 + 136) = *((_QWORD *)a2 + 17);
  *((_QWORD *)a2 + 17) = v6;
  v7 = *(_QWORD *)(a1 + 152);
  *(_QWORD *)(a1 + 152) = *((_QWORD *)a2 + 19);
  *((_QWORD *)a2 + 19) = v7;
  ++*((_DWORD *)a2 + 36);
  ++*(_DWORD *)(a1 + 144);
  *(_QWORD *)(a1 + 192) = 0;
  *(_QWORD *)(a1 + 168) = 0;
  *(_QWORD *)(a1 + 176) = 0;
  *(_QWORD *)(a1 + 160) = 0;
  *(_DWORD *)(a1 + 184) = 0;
  v8 = *((_QWORD *)a2 + 21);
  *(_QWORD *)(a1 + 160) = *((_QWORD *)a2 + 20);
  *(_QWORD *)(a1 + 168) = v8;
  *((_QWORD *)a2 + 20) = 0;
  *((_QWORD *)a2 + 21) = 0;
  v9 = *(_QWORD *)(a1 + 176);
  *(_QWORD *)(a1 + 176) = *((_QWORD *)a2 + 22);
  *((_QWORD *)a2 + 22) = v9;
  v10 = *(_QWORD *)(a1 + 192);
  *(_QWORD *)(a1 + 192) = *((_QWORD *)a2 + 24);
  *((_QWORD *)a2 + 24) = v10;
  ++*((_DWORD *)a2 + 46);
  ++*(_DWORD *)(a1 + 184);
  *(_QWORD *)(a1 + 232) = 0;
  *(_QWORD *)(a1 + 208) = 0;
  *(_QWORD *)(a1 + 216) = 0;
  *(_QWORD *)(a1 + 200) = 0;
  *(_DWORD *)(a1 + 224) = 0;
  v11 = *((_QWORD *)a2 + 26);
  *(_QWORD *)(a1 + 200) = *((_QWORD *)a2 + 25);
  *(_QWORD *)(a1 + 208) = v11;
  *((_QWORD *)a2 + 25) = 0;
  *((_QWORD *)a2 + 26) = 0;
  v12 = *(_QWORD *)(a1 + 216);
  *(_QWORD *)(a1 + 216) = *((_QWORD *)a2 + 27);
  *((_QWORD *)a2 + 27) = v12;
  v13 = *(_QWORD *)(a1 + 232);
  *(_QWORD *)(a1 + 232) = *((_QWORD *)a2 + 29);
  *((_QWORD *)a2 + 29) = v13;
  ++*((_DWORD *)a2 + 56);
  ++*(_DWORD *)(a1 + 224);
  *(_QWORD *)(a1 + 272) = 0;
  *(_QWORD *)(a1 + 248) = 0;
  *(_QWORD *)(a1 + 256) = 0;
  *(_QWORD *)(a1 + 240) = 0;
  *(_DWORD *)(a1 + 264) = 0;
  v14 = *((_QWORD *)a2 + 31);
  *(_QWORD *)(a1 + 240) = *((_QWORD *)a2 + 30);
  *(_QWORD *)(a1 + 248) = v14;
  *((_QWORD *)a2 + 30) = 0;
  *((_QWORD *)a2 + 31) = 0;
  v15 = *(_QWORD *)(a1 + 256);
  *(_QWORD *)(a1 + 256) = *((_QWORD *)a2 + 32);
  *((_QWORD *)a2 + 32) = v15;
  v16 = *(_QWORD *)(a1 + 272);
  *(_QWORD *)(a1 + 272) = *((_QWORD *)a2 + 34);
  *((_QWORD *)a2 + 34) = v16;
  ++*((_DWORD *)a2 + 66);
  ++*(_DWORD *)(a1 + 264);
  *(_QWORD *)(a1 + 312) = 0;
  *(_QWORD *)(a1 + 288) = 0;
  *(_QWORD *)(a1 + 296) = 0;
  *(_QWORD *)(a1 + 280) = 0;
  *(_DWORD *)(a1 + 304) = 0;
  v17 = *((_QWORD *)a2 + 36);
  *(_QWORD *)(a1 + 280) = *((_QWORD *)a2 + 35);
  *(_QWORD *)(a1 + 288) = v17;
  *((_QWORD *)a2 + 35) = 0;
  *((_QWORD *)a2 + 36) = 0;
  v18 = *(_QWORD *)(a1 + 296);
  *(_QWORD *)(a1 + 296) = *((_QWORD *)a2 + 37);
  *((_QWORD *)a2 + 37) = v18;
  v19 = *(_QWORD *)(a1 + 312);
  *(_QWORD *)(a1 + 312) = *((_QWORD *)a2 + 39);
  *((_QWORD *)a2 + 39) = v19;
  ++*((_DWORD *)a2 + 76);
  ++*(_DWORD *)(a1 + 304);
  *(_QWORD *)(a1 + 352) = 0;
  *(_QWORD *)(a1 + 328) = 0;
  *(_QWORD *)(a1 + 336) = 0;
  *(_QWORD *)(a1 + 320) = 0;
  *(_DWORD *)(a1 + 344) = 0;
  v20 = *((_QWORD *)a2 + 41);
  *(_QWORD *)(a1 + 320) = *((_QWORD *)a2 + 40);
  *(_QWORD *)(a1 + 328) = v20;
  *((_QWORD *)a2 + 40) = 0;
  *((_QWORD *)a2 + 41) = 0;
  v21 = *(_QWORD *)(a1 + 336);
  *(_QWORD *)(a1 + 336) = *((_QWORD *)a2 + 42);
  *((_QWORD *)a2 + 42) = v21;
  v22 = *(_QWORD *)(a1 + 352);
  *(_QWORD *)(a1 + 352) = *((_QWORD *)a2 + 44);
  *((_QWORD *)a2 + 44) = v22;
  ++*((_DWORD *)a2 + 86);
  ++*(_DWORD *)(a1 + 344);
  return a1;
}

void re::introspect_ImageDimensionsMode(re *this, const re::IntrospectionBase *a2)
{
  unsigned __int8 v2;
  unsigned __int8 v3;
  uint64_t *v4;
  uint64_t v5;
  unsigned int *v6;
  _anonymous_namespace_ *v7;
  unint64_t v8;
  unint64_t i;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  char v13;
  unsigned __int8 *v14;
  int v15;
  uint64_t v16;
  unint64_t j;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  char v21;
  unsigned __int8 *v22;
  int v23;
  uint64_t v24;
  uint64_t v25;
  re *v26;
  uint64_t *v27;
  re *v28;
  uint64_t *v29;
  re *v30;
  uint64_t *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  const char *v35;
  StringID v36;
  _QWORD v37[2];
  _QWORD v38[61];

  v2 = atomic_load((unsigned __int8 *)&qword_2540FF720);
  if ((v2 & 1) == 0)
  {
    v26 = (re *)__cxa_guard_acquire(&qword_2540FF720);
    if ((_DWORD)v26)
    {
      v27 = re::introspectionAllocator(v26);
      v28 = (re *)(*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v27 + 32))(v27, 24, 8);
      *(_DWORD *)v28 = 1;
      *((_QWORD *)v28 + 1) = 0;
      *((_QWORD *)v28 + 2) = "UseSource";
      qword_2540FF768 = (uint64_t)v28;
      v29 = re::introspectionAllocator(v28);
      v30 = (re *)(*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v29 + 32))(v29, 24, 8);
      *(_DWORD *)v30 = 1;
      *((_QWORD *)v30 + 1) = 1;
      *((_QWORD *)v30 + 2) = "DownsampleFactor";
      qword_2540FF770 = (uint64_t)v30;
      v31 = re::introspectionAllocator(v30);
      v32 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v31 + 32))(v31, 24, 8);
      *(_DWORD *)v32 = 1;
      *(_QWORD *)(v32 + 8) = 2;
      *(_QWORD *)(v32 + 16) = "UseOverride";
      qword_2540FF778 = v32;
      __cxa_guard_release(&qword_2540FF720);
    }
  }
  v3 = atomic_load((unsigned __int8 *)&qword_2540FF728);
  if ((v3 & 1) == 0 && __cxa_guard_acquire(&qword_2540FF728))
  {
    re::IntrospectionBasic::IntrospectionBasic((re::IntrospectionBasic *)&qword_2540FF7A0, "ImageDimensionsMode", 4, 4, 1, 1);
    qword_2540FF7A0 = (uint64_t)&off_24ED7D9E8;
    qword_2540FF7E0 = (uint64_t)&re::introspect_ImageDimensionsMode(BOOL)::enumTable;
    dword_2540FF7B0 = 9;
    __cxa_guard_release(&qword_2540FF728);
  }
  if ((_MergedGlobals_80 & 1) == 0)
  {
    _MergedGlobals_80 = 1;
    re::IntrospectionRegistry::add((re::IntrospectionRegistry *)&qword_2540FF7A0, a2);
    v34 = 0xFF96F997A9010256;
    v35 = "ImageDimensionsMode";
    v38[0] = 0x607DD0F01DCLL;
    v38[1] = "uint32_t";
    v4 = (uint64_t *)re::HashTable<re::StringID,re::StateParameterInt *,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::tryGet((uint64_t)&unk_25582A358, v38);
    if (v4)
    {
      v5 = *v4;
      re::StringID::destroyString((re::StringID *)v38);
      v6 = (unsigned int *)qword_2540FF7E0;
      v37[1] = v5;
      re::TypeBuilder::beginEnumType((uint64_t)v38, &v34, 1, 1, (uint64_t)v37);
      v8 = *v6;
      if ((_DWORD)v8)
      {
        for (i = 0; i < v8; ++i)
        {
          v10 = *(_QWORD *)(*((_QWORD *)v6 + 1) + 8 * i);
          if (*(_DWORD *)v10 == 1)
          {
            v11 = *(char **)(v10 + 16);
            if (v11)
            {
              v12 = *v11;
              if (*v11)
              {
                v13 = v11[1];
                if (v13)
                {
                  v14 = (unsigned __int8 *)(v11 + 2);
                  do
                  {
                    v12 = 31 * v12 + v13;
                    v15 = *v14++;
                    v13 = v15;
                  }
                  while (v15);
                }
              }
            }
            else
            {
              v12 = 0;
            }
            v16 = *(_QWORD *)(v10 + 8);
            *(_QWORD *)&v36.var0 = 2 * v12;
            v36.var1 = v11;
            re::TypeBuilder::addEnumConstant((re::TypeBuilder *)v38, v16, &v36);
            re::StringID::destroyString((re::StringID *)&v36);
            v8 = *v6;
          }
        }
        if (v8)
        {
          for (j = 0; j < v8; ++j)
          {
            v18 = *(_QWORD *)(*((_QWORD *)v6 + 1) + 8 * j);
            if (*(_DWORD *)v18 == 2)
            {
              v19 = *(char **)(v18 + 16);
              if (v19)
              {
                v20 = *v19;
                if (*v19)
                {
                  v21 = v19[1];
                  if (v21)
                  {
                    v22 = (unsigned __int8 *)(v19 + 2);
                    do
                    {
                      v20 = 31 * v20 + v21;
                      v23 = *v22++;
                      v21 = v23;
                    }
                    while (v23);
                  }
                }
              }
              else
              {
                v20 = 0;
              }
              v24 = *(_QWORD *)(v18 + 8);
              *(_QWORD *)&v36.var0 = 2 * v20;
              v36.var1 = v19;
              re::TypeBuilder::addEnumConstantRenaming((re::TypeBuilder *)v38, v24, &v36);
              re::StringID::destroyString((re::StringID *)&v36);
              v8 = *v6;
            }
          }
        }
      }
      re::TypeBuilder::~TypeBuilder((re::TypeBuilder *)v38, v25);
      xmmword_2540FF7C0 = (__int128)v36;
      re::StringID::destroyString((re::StringID *)&v34);
    }
    else
    {
      re::StringID::destroyString((re::StringID *)v38);
      re::internal::assertLog((re::internal *)5, v33, "assertion failure: '%s' (%s:line %i) Failed to determine underlying type of enum %s.", "valueID.isValid()", "registerEnumType", 2796, "ImageDimensionsMode", v34, v35);
      _os_crash();
      __break(1u);
    }
  }
}

void re::introspect_TextureMipmapMode(re *this, const re::IntrospectionBase *a2)
{
  unsigned __int8 v2;
  unsigned __int8 v3;
  uint64_t *v4;
  uint64_t v5;
  unsigned int *v6;
  _anonymous_namespace_ *v7;
  unint64_t v8;
  unint64_t i;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  char v13;
  unsigned __int8 *v14;
  int v15;
  uint64_t v16;
  unint64_t j;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  char v21;
  unsigned __int8 *v22;
  int v23;
  uint64_t v24;
  uint64_t v25;
  re *v26;
  uint64_t *v27;
  re *v28;
  uint64_t *v29;
  re *v30;
  uint64_t *v31;
  re *v32;
  uint64_t *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  const char *v37;
  StringID v38;
  _QWORD v39[2];
  _QWORD v40[61];

  v2 = atomic_load((unsigned __int8 *)&qword_2540FF730);
  if ((v2 & 1) == 0)
  {
    v26 = (re *)__cxa_guard_acquire(&qword_2540FF730);
    if ((_DWORD)v26)
    {
      v27 = re::introspectionAllocator(v26);
      v28 = (re *)(*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v27 + 32))(v27, 24, 8);
      *(_DWORD *)v28 = 1;
      *((_QWORD *)v28 + 1) = 2;
      *((_QWORD *)v28 + 2) = "None";
      qword_2540FF780 = (uint64_t)v28;
      v29 = re::introspectionAllocator(v28);
      v30 = (re *)(*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v29 + 32))(v29, 24, 8);
      *(_DWORD *)v30 = 1;
      *((_QWORD *)v30 + 1) = 1;
      *((_QWORD *)v30 + 2) = "AllocateOnly";
      qword_2540FF788 = (uint64_t)v30;
      v31 = re::introspectionAllocator(v30);
      v32 = (re *)(*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v31 + 32))(v31, 24, 8);
      *(_DWORD *)v32 = 1;
      *((_QWORD *)v32 + 1) = 0;
      *((_QWORD *)v32 + 2) = "AllocateAndGenerateOnGPU";
      qword_2540FF790 = (uint64_t)v32;
      v33 = re::introspectionAllocator(v32);
      v34 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v33 + 32))(v33, 24, 8);
      *(_DWORD *)v34 = 1;
      *(_QWORD *)(v34 + 8) = 3;
      *(_QWORD *)(v34 + 16) = "AllocateAndGenerateOnCPU";
      qword_2540FF798 = v34;
      __cxa_guard_release(&qword_2540FF730);
    }
  }
  v3 = atomic_load((unsigned __int8 *)&qword_2540FF738);
  if ((v3 & 1) == 0 && __cxa_guard_acquire(&qword_2540FF738))
  {
    re::IntrospectionBasic::IntrospectionBasic((re::IntrospectionBasic *)&qword_2540FF7E8, "TextureMipmapMode", 4, 4, 1, 1);
    qword_2540FF7E8 = (uint64_t)&off_24ED7D9E8;
    qword_2540FF828 = (uint64_t)&re::introspect_TextureMipmapMode(BOOL)::enumTable;
    dword_2540FF7F8 = 9;
    __cxa_guard_release(&qword_2540FF738);
  }
  if ((byte_2540FF719 & 1) == 0)
  {
    byte_2540FF719 = 1;
    re::IntrospectionRegistry::add((re::IntrospectionRegistry *)&qword_2540FF7E8, a2);
    v36 = 0xE21B701012C6474CLL;
    v37 = "TextureMipmapMode";
    v40[0] = 0x607DD0F01DCLL;
    v40[1] = "uint32_t";
    v4 = (uint64_t *)re::HashTable<re::StringID,re::StateParameterInt *,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::tryGet((uint64_t)&unk_25582A358, v40);
    if (v4)
    {
      v5 = *v4;
      re::StringID::destroyString((re::StringID *)v40);
      v6 = (unsigned int *)qword_2540FF828;
      v39[1] = v5;
      re::TypeBuilder::beginEnumType((uint64_t)v40, &v36, 1, 1, (uint64_t)v39);
      v8 = *v6;
      if ((_DWORD)v8)
      {
        for (i = 0; i < v8; ++i)
        {
          v10 = *(_QWORD *)(*((_QWORD *)v6 + 1) + 8 * i);
          if (*(_DWORD *)v10 == 1)
          {
            v11 = *(char **)(v10 + 16);
            if (v11)
            {
              v12 = *v11;
              if (*v11)
              {
                v13 = v11[1];
                if (v13)
                {
                  v14 = (unsigned __int8 *)(v11 + 2);
                  do
                  {
                    v12 = 31 * v12 + v13;
                    v15 = *v14++;
                    v13 = v15;
                  }
                  while (v15);
                }
              }
            }
            else
            {
              v12 = 0;
            }
            v16 = *(_QWORD *)(v10 + 8);
            *(_QWORD *)&v38.var0 = 2 * v12;
            v38.var1 = v11;
            re::TypeBuilder::addEnumConstant((re::TypeBuilder *)v40, v16, &v38);
            re::StringID::destroyString((re::StringID *)&v38);
            v8 = *v6;
          }
        }
        if (v8)
        {
          for (j = 0; j < v8; ++j)
          {
            v18 = *(_QWORD *)(*((_QWORD *)v6 + 1) + 8 * j);
            if (*(_DWORD *)v18 == 2)
            {
              v19 = *(char **)(v18 + 16);
              if (v19)
              {
                v20 = *v19;
                if (*v19)
                {
                  v21 = v19[1];
                  if (v21)
                  {
                    v22 = (unsigned __int8 *)(v19 + 2);
                    do
                    {
                      v20 = 31 * v20 + v21;
                      v23 = *v22++;
                      v21 = v23;
                    }
                    while (v23);
                  }
                }
              }
              else
              {
                v20 = 0;
              }
              v24 = *(_QWORD *)(v18 + 8);
              *(_QWORD *)&v38.var0 = 2 * v20;
              v38.var1 = v19;
              re::TypeBuilder::addEnumConstantRenaming((re::TypeBuilder *)v40, v24, &v38);
              re::StringID::destroyString((re::StringID *)&v38);
              v8 = *v6;
            }
          }
        }
      }
      re::TypeBuilder::~TypeBuilder((re::TypeBuilder *)v40, v25);
      xmmword_2540FF808 = (__int128)v38;
      re::StringID::destroyString((re::StringID *)&v36);
    }
    else
    {
      re::StringID::destroyString((re::StringID *)v40);
      re::internal::assertLog((re::internal *)5, v35, "assertion failure: '%s' (%s:line %i) Failed to determine underlying type of enum %s.", "valueID.isValid()", "registerEnumType", 2796, "TextureMipmapMode", v36, v37);
      _os_crash();
      __break(1u);
    }
  }
}

uint64_t *re::allocInfo_TextureLoadDescriptorParameters(re *this)
{
  unsigned __int8 v1;
  uint64_t v3;

  v1 = atomic_load((unsigned __int8 *)&qword_2540FF740);
  if ((v1 & 1) == 0 && __cxa_guard_acquire(&qword_2540FF740))
  {
    ArcSharedObject::ArcSharedObject((ArcSharedObject *)&qword_2540FF878, 0);
    *(_QWORD *)(v3 + 22) = 0;
    qword_2540FF888 = 0;
    qword_2540FF898 = 0;
    qword_2540FF8A0 = 0xFFFFFFFFLL;
    qword_2540FF878 = (uint64_t)&off_24ED7DAA8;
    qword_2540FF8A8 = (uint64_t)"TextureLoadDescriptorParameters";
    dword_2540FF8B0 = 0;
    xmmword_2540FF8B8 = 0u;
    unk_2540FF8C8 = 0u;
    xmmword_2540FF8D8 = 0u;
    qword_2540FF8E8 = 0;
    __cxa_guard_release(&qword_2540FF740);
  }
  return &qword_2540FF878;
}

void re::initInfo_TextureLoadDescriptorParameters(re *this, re::IntrospectionBase *a2)
{
  const re::IntrospectionBase *v3;
  unsigned __int8 v4;
  re *v5;
  uint64_t *v6;
  const re::IntrospectionBase *v7;
  void *v8;
  uint64_t v9;
  uint64_t *v10;
  const re::IntrospectionBase *v11;
  void *v12;
  uint64_t v13;
  uint64_t *v14;
  const re::IntrospectionBase *v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t *v18;
  const re::IntrospectionBase *v19;
  uint64_t v20;
  uint64_t *v21;
  const re::IntrospectionBase *v22;
  void *v23;
  uint64_t v24;
  uint64_t *v25;
  const re::IntrospectionBase *v26;
  uint64_t v27;
  uint64_t *v28;
  const re::IntrospectionBase *v29;
  void *v30;
  uint64_t v31;
  uint64_t *v32;
  const re::IntrospectionBase *v33;
  void *v34;
  uint64_t v35;
  uint64_t *v36;
  uint64_t v37;
  uint64_t v38;
  __int128 v39;
  _QWORD v40[2];
  __int128 v41;

  v40[0] = 0x3CC0D7AC778599B4;
  v40[1] = "TextureLoadDescriptorParameters";
  re::StringID::destroyString((re::StringID *)v40);
  *((_OWORD *)this + 2) = v41;
  v4 = atomic_load((unsigned __int8 *)&qword_2540FF748);
  if ((v4 & 1) == 0)
  {
    v5 = (re *)__cxa_guard_acquire(&qword_2540FF748);
    if ((_DWORD)v5)
    {
      v6 = re::introspectionAllocator(v5);
      v8 = re::IntrospectionInfo<re::DynamicString>::get(1, v7);
      v9 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v6 + 32))(v6, 72, 8);
      *(_DWORD *)v9 = 1;
      *(_QWORD *)(v9 + 8) = "bundle";
      *(_QWORD *)(v9 + 16) = v8;
      *(_QWORD *)(v9 + 24) = 0;
      *(_QWORD *)(v9 + 32) = 1;
      *(_DWORD *)(v9 + 40) = 0;
      *(_QWORD *)(v9 + 48) = 0;
      *(_QWORD *)(v9 + 56) = 0;
      *(_DWORD *)(v9 + 64) = 0;
      qword_2540FF830 = v9;
      v10 = re::introspectionAllocator((re *)v9);
      v12 = re::IntrospectionInfo<re::DynamicString>::get(1, v11);
      v13 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v10 + 32))(v10, 72, 8);
      *(_DWORD *)v13 = 1;
      *(_QWORD *)(v13 + 8) = "resource";
      *(_QWORD *)(v13 + 16) = v12;
      *(_QWORD *)(v13 + 24) = 0;
      *(_QWORD *)(v13 + 32) = 0x2000000002;
      *(_DWORD *)(v13 + 40) = 0;
      *(_QWORD *)(v13 + 48) = 0;
      *(_QWORD *)(v13 + 56) = 0;
      *(_DWORD *)(v13 + 64) = 0;
      qword_2540FF838 = v13;
      v14 = re::introspectionAllocator((re *)v13);
      v16 = re::introspect_TextureSemantic((re *)1, v15);
      v17 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v14 + 32))(v14, 72, 8);
      *(_DWORD *)v17 = 1;
      *(_QWORD *)(v17 + 8) = "semantic";
      *(_QWORD *)(v17 + 16) = v16;
      *(_QWORD *)(v17 + 24) = 0;
      *(_QWORD *)(v17 + 32) = 0x4000000003;
      *(_DWORD *)(v17 + 40) = 0;
      *(_QWORD *)(v17 + 48) = 0;
      *(_QWORD *)(v17 + 56) = 0;
      *(_DWORD *)(v17 + 64) = 0;
      qword_2540FF840 = v17;
      v18 = re::introspectionAllocator((re *)v17);
      re::introspect_ImageDimensionsMode((re *)v18, v19);
      v20 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v18 + 32))(v18, 72, 8);
      *(_DWORD *)v20 = 1;
      *(_QWORD *)(v20 + 8) = "dimensionsMode";
      *(_QWORD *)(v20 + 16) = &qword_2540FF7A0;
      *(_QWORD *)(v20 + 24) = 0;
      *(_QWORD *)(v20 + 32) = 0x4400000004;
      *(_DWORD *)(v20 + 40) = 0;
      *(_QWORD *)(v20 + 48) = 0;
      *(_QWORD *)(v20 + 56) = 0;
      *(_DWORD *)(v20 + 64) = 0;
      qword_2540FF848 = v20;
      v21 = re::introspectionAllocator((re *)v20);
      v23 = re::introspect_int((re *)1, v22);
      v24 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v21 + 32))(v21, 72, 8);
      *(_DWORD *)v24 = 1;
      *(_QWORD *)(v24 + 8) = "downsampleFactor";
      *(_QWORD *)(v24 + 16) = v23;
      *(_QWORD *)(v24 + 24) = 0;
      *(_QWORD *)(v24 + 32) = 0x4800000005;
      *(_DWORD *)(v24 + 40) = 0;
      *(_QWORD *)(v24 + 48) = 0;
      *(_QWORD *)(v24 + 56) = 0;
      *(_DWORD *)(v24 + 64) = 0;
      qword_2540FF850 = v24;
      v25 = re::introspectionAllocator((re *)v24);
      re::introspect_TextureMipmapMode((re *)v25, v26);
      v27 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v25 + 32))(v25, 72, 8);
      *(_DWORD *)v27 = 1;
      *(_QWORD *)(v27 + 8) = "mipmapMode";
      *(_QWORD *)(v27 + 16) = &qword_2540FF7E8;
      *(_QWORD *)(v27 + 24) = 0;
      *(_QWORD *)(v27 + 32) = 0x4C00000006;
      *(_DWORD *)(v27 + 40) = 0;
      *(_QWORD *)(v27 + 48) = 0;
      *(_QWORD *)(v27 + 56) = 0;
      *(_DWORD *)(v27 + 64) = 0;
      qword_2540FF858 = v27;
      v28 = re::introspectionAllocator((re *)v27);
      v30 = re::IntrospectionInfo<re::DynamicString>::get(1, v29);
      v31 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v28 + 32))(v28, 72, 8);
      *(_DWORD *)v31 = 1;
      *(_QWORD *)(v31 + 8) = "aliasName";
      *(_QWORD *)(v31 + 16) = v30;
      *(_QWORD *)(v31 + 24) = 0;
      *(_QWORD *)(v31 + 32) = 0x5000000007;
      *(_DWORD *)(v31 + 40) = 0;
      *(_QWORD *)(v31 + 48) = 0;
      *(_QWORD *)(v31 + 56) = 0;
      *(_DWORD *)(v31 + 64) = 0;
      qword_2540FF860 = v31;
      v32 = re::introspectionAllocator((re *)v31);
      v34 = re::introspect_TextureCompressionType((re *)1, v33);
      v35 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v32 + 32))(v32, 72, 8);
      *(_DWORD *)v35 = 1;
      *(_QWORD *)(v35 + 8) = "compressionType";
      *(_QWORD *)(v35 + 16) = v34;
      *(_QWORD *)(v35 + 24) = 0;
      *(_QWORD *)(v35 + 32) = 0x7000000008;
      *(_DWORD *)(v35 + 40) = 0;
      *(_QWORD *)(v35 + 48) = 0;
      *(_QWORD *)(v35 + 56) = 0;
      *(_DWORD *)(v35 + 64) = 0;
      qword_2540FF868 = v35;
      v36 = re::introspectionAllocator((re *)v35);
      v37 = re::introspect_ASTCCompressionOptions((re::IntrospectionBase **)1);
      v38 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v36 + 32))(v36, 72, 8);
      *(_DWORD *)v38 = 1;
      *(_QWORD *)(v38 + 8) = "astcCompressionOptions";
      *(_QWORD *)(v38 + 16) = v37;
      *(_QWORD *)(v38 + 24) = 0;
      *(_QWORD *)(v38 + 32) = 0x7400000009;
      *(_DWORD *)(v38 + 40) = 0;
      *(_QWORD *)(v38 + 48) = 0;
      *(_QWORD *)(v38 + 56) = 0;
      *(_DWORD *)(v38 + 64) = 0;
      qword_2540FF870 = v38;
      __cxa_guard_release(&qword_2540FF748);
    }
  }
  *((_QWORD *)this + 2) = 0x8800000008;
  *((_DWORD *)this + 6) = 8;
  *((_WORD *)this + 14) = 0;
  *((_DWORD *)this + 14) = 9;
  *((_QWORD *)this + 8) = &qword_2540FF830;
  *((_QWORD *)this + 9) = re::internal::defaultConstruct<re::TextureLoadDescriptorParameters>;
  *((_QWORD *)this + 10) = re::internal::defaultDestruct<re::TextureLoadDescriptorParameters>;
  *((_QWORD *)this + 11) = 0;
  *((_QWORD *)this + 12) = 0;
  *((_QWORD *)this + 13) = re::internal::defaultConstructV2<re::TextureLoadDescriptorParameters>;
  *((_QWORD *)this + 14) = re::internal::defaultDestructV2<re::TextureLoadDescriptorParameters>;
  re::IntrospectionRegistry::add(this, v3);
  v39 = v41;
}

_QWORD *re::internal::defaultConstruct<re::TextureLoadDescriptorParameters>(_anonymous_namespace_ *a1, uint64_t a2, _OWORD *a3)
{
  _OWORD *v3;
  _anonymous_namespace_ *v4;
  _anonymous_namespace_ *v5;
  _QWORD *result;

  v3 = a3;
  *a3 = 0u;
  a3[1] = 0u;
  v4 = (_anonymous_namespace_ *)re::DynamicString::setCapacity(v3, 0);
  v3[3] = 0u;
  v3[2] = 0u;
  v5 = (_anonymous_namespace_ *)re::DynamicString::setCapacity((_QWORD *)v3 + 4, 0);
  v3[5] = 0u;
  v3[6] = 0u;
  v3 += 5;
  result = re::DynamicString::setCapacity(v3, 0);
  *((_DWORD *)v3 + 12) = 0;
  *(_QWORD *)((char *)v3 + 36) = 0;
  *((_BYTE *)v3 + 44) = 0;
  return result;
}

double re::internal::defaultDestruct<re::TextureLoadDescriptorParameters>(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  uint64_t v4;
  _OWORD *v5;
  double result;
  uint64_t v7;

  v5 = a3 + 10;
  v4 = a3[10];
  if (v4)
  {
    if ((a3[11] & 1) != 0)
      (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v4 + 40))(v4, a3[12]);
    result = 0.0;
    *v5 = 0u;
    v5[1] = 0u;
  }
  v7 = a3[4];
  if (v7)
  {
    if ((a3[5] & 1) != 0)
      (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v7 + 40))(v7, a3[6]);
    result = 0.0;
    *((_OWORD *)a3 + 2) = 0u;
    *((_OWORD *)a3 + 3) = 0u;
  }
  if (*a3)
  {
    if ((a3[1] & 1) != 0)
      (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)*a3 + 40))(*a3, a3[2]);
    result = 0.0;
    *(_OWORD *)a3 = 0u;
    *((_OWORD *)a3 + 1) = 0u;
  }
  return result;
}

_QWORD *re::internal::defaultConstructV2<re::TextureLoadDescriptorParameters>(_anonymous_namespace_ *a1)
{
  _anonymous_namespace_ *v1;
  _anonymous_namespace_ *v2;
  _anonymous_namespace_ *v3;
  _QWORD *result;

  v1 = a1;
  *(_OWORD *)a1 = 0u;
  *((_OWORD *)a1 + 1) = 0u;
  v2 = (_anonymous_namespace_ *)re::DynamicString::setCapacity(v1, 0);
  *((_OWORD *)v1 + 3) = 0u;
  *((_OWORD *)v1 + 2) = 0u;
  v3 = (_anonymous_namespace_ *)re::DynamicString::setCapacity((_QWORD *)v1 + 4, 0);
  *((_OWORD *)v1 + 5) = 0u;
  *((_OWORD *)v1 + 6) = 0u;
  v1 = (_anonymous_namespace_ *)((char *)v1 + 80);
  result = re::DynamicString::setCapacity(v1, 0);
  *((_DWORD *)v1 + 12) = 0;
  *(_QWORD *)((char *)v1 + 36) = 0;
  *((_BYTE *)v1 + 44) = 0;
  return result;
}

double re::internal::defaultDestructV2<re::TextureLoadDescriptorParameters>(_QWORD *a1)
{
  uint64_t v2;
  _OWORD *v3;
  double result;
  uint64_t v5;

  v3 = a1 + 10;
  v2 = a1[10];
  if (v2)
  {
    if ((a1[11] & 1) != 0)
      (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v2 + 40))(v2, a1[12]);
    result = 0.0;
    *v3 = 0u;
    v3[1] = 0u;
  }
  v5 = a1[4];
  if (v5)
  {
    if ((a1[5] & 1) != 0)
      (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v5 + 40))(v5, a1[6]);
    result = 0.0;
    *((_OWORD *)a1 + 2) = 0u;
    *((_OWORD *)a1 + 3) = 0u;
  }
  if (*a1)
  {
    if ((a1[1] & 1) != 0)
      (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)*a1 + 40))(*a1, a1[2]);
    result = 0.0;
    *(_OWORD *)a1 = 0u;
    *((_OWORD *)a1 + 1) = 0u;
  }
  return result;
}

uint64_t re::TextureAssetProvider::TextureAssetProvider(uint64_t a1, uint64_t a2, uint64_t a3)
{
  id *v6;
  void **v7;
  uint64_t v8;
  unsigned __int8 v9;
  id *v10;
  id v11;
  id v12;
  void *v13;
  void *v14;
  void *v15;
  id v17;
  void *v18;
  __int16 v19;
  char v20;
  char v21;
  char v22;
  uint64_t v23;

  ArcSharedObject::ArcSharedObject((ArcSharedObject *)a1, 0);
  *(_QWORD *)a1 = &off_24ED37758;
  *(_QWORD *)(a1 + 40) = 0;
  v6 = (id *)(a1 + 40);
  *(_QWORD *)(a1 + 48) = 0;
  v7 = (void **)(a1 + 48);
  *(_DWORD *)(a1 + 56) = 65793;
  v8 = a1 + 56;
  v9 = atomic_load((unsigned __int8 *)&qword_2540FF760);
  if ((v9 & 1) == 0 && __cxa_guard_acquire(&qword_2540FF760))
  {
    qword_2540FF758 = re::internal::getOrCreateInfo((re::internal *)"TextureLoadDescriptorParameters", (uint64_t (*)(re::internal *))re::allocInfo_TextureLoadDescriptorParameters, (re::IntrospectionBase *(*)(void))re::initInfo_TextureLoadDescriptorParameters, (void (*)(re::IntrospectionBase *))&unk_2540FF750, 0);
    v8 = a1 + 56;
    __cxa_guard_release(&qword_2540FF760);
  }
  re::TextureAssetProvider::s_loadDescriptorParametersIntrospect = qword_2540FF758;
  *(_QWORD *)(a1 + 24) = a3;
  *(_QWORD *)(a1 + 32) = a2;
  v10 = (id *)re::ServiceLocator::serviceOrNull<re::ImportGraphicsResources>(a3);
  if (v10)
  {
    re::ImportGraphicsContext::ImportGraphicsContext((re::ImportGraphicsContext *)&v17, v10);
    if (v6 != &v17)
    {
      v11 = v17;
      v17 = 0;
      v12 = *v6;
      *v6 = v11;

    }
    if (v7 != &v18)
    {
      v13 = v18;
      v18 = 0;
      v14 = *v7;
      *v7 = v13;

    }
    *(_WORD *)v8 = v19;
    *(_BYTE *)(v8 + 2) = v20;
    if (*(_BYTE *)(a1 + 59) || v21)
    {
      if (!*(_BYTE *)(a1 + 59) || v21)
      {
        if (!*(_BYTE *)(a1 + 59) && v21)
          *(_BYTE *)(a1 + 59) = 1;
        *(_BYTE *)(a1 + 60) = v22;
      }
      else
      {
        *(_BYTE *)(a1 + 59) = 0;
      }
    }
    v15 = v18;
    *(_QWORD *)(a1 + 64) = v23;

  }
  *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 1296);
  return a1;
}

uint64_t re::ServiceLocator::serviceOrNull<re::ImportGraphicsResources>(uint64_t a1)
{
  unsigned __int8 v2;
  uint64_t v3;
  uint64_t v4;
  _BYTE v6[16];

  if ((v2 & 1) == 0
  {
    re::introspect<re::ImportGraphicsResources>(void)::info = re::introspect_ImportGraphicsResources(0);
  }
  v3 = re::introspect<re::ImportGraphicsResources>(void)::info;
  re::StringID::invalid((re::StringID *)v6);
  v4 = (*(uint64_t (**)(uint64_t, uint64_t, _BYTE *))(*(_QWORD *)a1 + 16))(a1, v3, v6);
  re::StringID::destroyString((re::StringID *)v6);
  return v4;
}

void re::TextureAssetProvider::~TextureAssetProvider(re::TextureAssetProvider *this)
{
  *(_QWORD *)this = &off_24ED37758;
  *((_QWORD *)this + 9) = 0;
  *((_QWORD *)this + 3) = 0;
  *((_QWORD *)this + 4) = 0;

  *(_QWORD *)this = &off_24ED426B8;
  objc_destructInstance((char *)this + 8);
}

{
  re::TextureAssetProvider::~TextureAssetProvider(this);
  JUMPOUT(0x2276933B8);
}

uint64_t *re::TextureAssetProvider::makeDescriptor@<X0>(re::TextureAssetProvider *this@<X0>, const re::DynamicString *a2@<X1>, const re::DynamicString *a3@<X2>, uint64_t a4@<X8>)
{
  _anonymous_namespace_ *v9;
  re::TextureAsset *v10;
  const char *v11;
  size_t v12;
  _anonymous_namespace_ *v13;
  _anonymous_namespace_ *v14;
  _anonymous_namespace_ *v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t *result;
  _OWORD v24[2];
  _QWORD v25[4];
  __int128 v26;
  _QWORD v27[4];
  __int128 v28;
  int v29;
  uint64_t *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  _BYTE v39[20];

  *(_QWORD *)(a4 + 8) = 0;
  *(_QWORD *)(a4 + 16) = 0;
  *(_QWORD *)(a4 + 24) = 0;
  v9 = (_anonymous_namespace_ *)re::DynamicString::setCapacity((_QWORD *)a4, 0);
  *(_QWORD *)(a4 + 32) = 0;
  *(_QWORD *)(a4 + 40) = 0;
  *(_DWORD *)(a4 + 56) = 0;
  *(_QWORD *)(a4 + 48) = 0;
  *(_OWORD *)(a4 + 64) = 0u;
  *(_OWORD *)(a4 + 80) = 0u;
  *(_DWORD *)(a4 + 96) = 0;
  *(_OWORD *)(a4 + 104) = 0u;
  *(_OWORD *)(a4 + 120) = 0u;
  *(_QWORD *)(a4 + 136) = 0;
  re::DynamicString::setCapacity((_QWORD *)(a4 + 112), 0);
  v30 = (uint64_t *)"TextureImage";
  v31 = 12;
  v10 = re::DynamicString::operator=((re::DynamicString *)a4, (uint64_t)&v30);
  v11 = (const char *)*re::TextureAsset::assetType(v10);
  v12 = strlen(v11);
  v30 = (uint64_t *)v11;
  v31 = v12;
  v13 = re::DynamicString::operator=((re::DynamicString *)(a4 + 112), (uint64_t)&v30);
  v31 = 0;
  v32 = 0;
  v33 = 0;
  v14 = (_anonymous_namespace_ *)re::DynamicString::setCapacity(&v30, 0);
  *((_QWORD *)&v34 + 1) = 0;
  v35 = 0uLL;
  v15 = (_anonymous_namespace_ *)re::DynamicString::setCapacity(&v34, 0);
  *((_QWORD *)&v37 + 1) = 0;
  v38 = 0uLL;
  re::DynamicString::setCapacity(&v37, 0);
  *(_DWORD *)&v39[16] = 0;
  *(_QWORD *)&v39[4] = 0;
  v39[12] = 0;
  re::DynamicString::operator=((re::DynamicString *)&v30, this);
  re::DynamicString::operator=((re::DynamicString *)&v34, a2);
  v16 = *((_DWORD *)a3 + 2);
  LODWORD(v36) = *((_DWORD *)a3 + 14);
  DWORD1(v36) = v16;
  *((_QWORD *)&v36 + 1) = *((_QWORD *)a3 + 2);
  *(_DWORD *)v39 = *((_DWORD *)a3 + 6);
  *(_OWORD *)&v39[4] = *(_OWORD *)((char *)a3 + 28);
  re::DynamicString::DynamicString((re::DynamicString *)v24, (const re::DynamicString *)&v30);
  re::DynamicString::DynamicString((re::DynamicString *)v25, (const re::DynamicString *)&v34);
  v26 = v36;
  re::DynamicString::DynamicString((re::DynamicString *)v27, (const re::DynamicString *)&v37);
  v28 = *(_OWORD *)v39;
  v29 = *(_DWORD *)&v39[16];
  re::AssetLoadDescriptor::setIntrospectableData((char **)a4, (const re::IntrospectionBase *)re::TextureAssetProvider::s_loadDescriptorParametersIntrospect, (const re::IntrospectionBase **)v24, 0);
  if (v27[0])
  {
    if ((v27[1] & 1) != 0)
      (*(void (**)(void))(*(_QWORD *)v27[0] + 40))();
    memset(v27, 0, sizeof(v27));
  }
  if (v25[0])
  {
    if ((v25[1] & 1) != 0)
      (*(void (**)(void))(*(_QWORD *)v25[0] + 40))();
    memset(v25, 0, sizeof(v25));
  }
  if (*(_QWORD *)&v24[0])
  {
    if ((BYTE8(v24[0]) & 1) != 0)
      (*(void (**)(void))(**(_QWORD **)&v24[0] + 40))();
    memset(v24, 0, sizeof(v24));
  }
  if ((_QWORD)v37)
  {
    if ((BYTE8(v37) & 1) != 0)
      (*(void (**)(_QWORD, _QWORD, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)v37 + 40))(v37, v38, v17, v18, v19, v20, v21, v22);
    v37 = 0u;
    v38 = 0u;
  }
  if ((_QWORD)v34)
  {
    if ((BYTE8(v34) & 1) != 0)
      (*(void (**)(_QWORD, _QWORD, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)v34 + 40))(v34, v35, v17, v18, v19, v20, v21, v22);
    v34 = 0u;
    v35 = 0u;
  }
  result = v30;
  if (v30)
  {
    if ((v31 & 1) != 0)
      return (uint64_t *)(*(uint64_t (**)(uint64_t *, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*v30 + 40))(v30, v32, v17, v18, v19, v20, v21, v22);
  }
  return result;
}

re::DynamicString *re::TextureAssetProvider::load@<X0>(re::TextureAssetProvider *this@<X0>, const re::AssetLoadDescriptor *a2@<X1>, uint64_t a3@<X8>)
{
  const char *v8;
  re::TextureAsset *v9;
  int v10;
  const char *v11;
  const char *v12;
  _anonymous_namespace_ *v13;
  _anonymous_namespace_ *v14;
  _anonymous_namespace_ *v15;
  uint64_t Descriptor;
  uint64_t v17;
  os_unfair_lock_s *v18;
  int v19;
  re *v20;
  re::DynamicString *result;
  __int128 v22;
  uint64_t v23;
  uint64_t v24;
  __int128 v25;
  uint64_t v26;
  uint64_t v27;
  os_unfair_lock_s *v28;
  _anonymous_namespace_ *v29;
  const char *v30;
  _BOOL8 v31;
  char *v32;
  __int128 v33;
  uint64_t v34;
  uint64_t v35;
  unsigned __int8 *v36;
  id *v37;
  uint64_t *v38;
  re::FileTextureProvider *v39;
  uint64_t v40;
  const char *v41;
  re *v42;
  uint64_t *v43;
  uint64_t v44;
  __int128 v45;
  re *v46;
  re *v47;
  uint64_t *v48;
  re::Allocator *v49;
  uint64_t TextureAsset;
  uint64_t v51;
  _anonymous_namespace_ *v52;
  char v53;
  __int128 v54;
  uint64_t v55;
  void (*v56)(void);
  uint64_t v57;
  uint64_t v58;
  re::DynamicString *v59;
  __int128 *v60;
  __int128 v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  __int128 v65;
  __int128 v66;
  uint64_t v67;
  _OWORD v68[2];
  _OWORD v69[2];
  __int128 v70;
  __int128 v71;
  __int128 v72;
  uint64_t v73;
  uint64_t v74;
  __int128 v75;
  __int128 v76;
  int v77;
  int v78;
  uint64_t v79;
  __int128 v80;
  __int128 v81;
  uint64_t v82;
  char v83;
  int v84;
  _DWORD v85[3];
  __int128 v86;
  int v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  _BYTE v92[24];
  uint64_t v93;
  __int128 v94;
  char v95;
  id v96;
  _BYTE v97[32];
  _BYTE v98[28];
  id v99;
  __int128 v100;

  if ((*((_BYTE *)a2 + 8) & 1) != 0)
    v8 = (const char *)*((_QWORD *)a2 + 2);
  else
    v8 = (char *)a2 + 9;
  v9 = (re::TextureAsset *)strcmp(v8, "TextureImage");
  v10 = (int)v9;
  v11 = (const char *)*re::TextureAsset::assetType(v9);
  if ((*((_QWORD *)a2 + 15) & 1) != 0)
    v12 = (const char *)*((_QWORD *)a2 + 16);
  else
    v12 = (char *)a2 + 121;
  v13 = (_anonymous_namespace_ *)strcmp(v12, v11);
  if (v10 | v13)
  {
    v22 = v72;
    v23 = v73;
    v24 = v74;
    *(_BYTE *)a3 = 0;
    *(_OWORD *)(a3 + 8) = v22;
    *(_QWORD *)(a3 + 24) = v23;
    *(_QWORD *)(a3 + 32) = v24;
    return result;
  }
  *((_QWORD *)&v72 + 1) = 0;
  v73 = 0;
  v74 = 0;
  v14 = (_anonymous_namespace_ *)re::DynamicString::setCapacity(&v72, 0);
  *((_QWORD *)&v75 + 1) = 0;
  v76 = 0uLL;
  v15 = (_anonymous_namespace_ *)re::DynamicString::setCapacity(&v75, 0);
  *((_QWORD *)&v80 + 1) = 0;
  v81 = 0uLL;
  re::DynamicString::setCapacity(&v80, 0);
  v84 = 0;
  v82 = 0;
  v83 = 0;
  Descriptor = re::AssetLoadDescriptor::getIntrospectableData<re::TextureLoadDescriptorParameters>(a2, (uint64_t **)&v72);
  if ((Descriptor & 1) != 0)
  {
    v70 = 0u;
    v71 = 0u;
    re::DynamicString::setCapacity(&v70, 0);
    if ((BYTE8(v80) & 1) != 0)
      v17 = *((_QWORD *)&v80 + 1) >> 1;
    else
      v17 = BYTE8(v80) >> 1;
    if (v17)
    {
      v18 = (os_unfair_lock_s *)*((_QWORD *)this + 9);
      re::DynamicString::DynamicString((re::DynamicString *)v69, (const re::DynamicString *)&v80);
      re::NamedFileRegistry::tryGetFilePathFor(v18, (uint64_t)v69, v92);
      if (*(_QWORD *)&v69[0])
      {
        if ((BYTE8(v69[0]) & 1) != 0)
          (*(void (**)(void))(**(_QWORD **)&v69[0] + 40))();
        memset(v69, 0, sizeof(v69));
      }
      v19 = v92[0];
      if (v92[0])
      {
        v20 = re::DynamicString::operator=((re::DynamicString *)&v70, (re::DynamicString *)&v92[8]);
      }
      else
      {
        if ((BYTE8(v80) & 1) != 0)
          v32 = (char *)v81;
        else
          v32 = (char *)&v80 + 9;
        v20 = (re *)re::DynamicString::format((re::DynamicString *)"No file found for Alias: '%s'", (re::DynamicString *)v97, v32);
        v33 = *(_OWORD *)v97;
        v34 = *(_QWORD *)&v97[16];
        v35 = *(_QWORD *)&v97[24];
        *(_BYTE *)a3 = 0;
        *(_OWORD *)(a3 + 8) = v33;
        *(_QWORD *)(a3 + 24) = v34;
        *(_QWORD *)(a3 + 32) = v35;
      }
      if (v92[0])
      {
        v20 = *(re **)&v92[8];
        if (*(_QWORD *)&v92[8])
        {
          if ((v92[16] & 1) != 0)
            v20 = (re *)(*(uint64_t (**)(void))(**(_QWORD **)&v92[8] + 40))();
        }
      }
      if (!v19)
        goto LABEL_68;
LABEL_40:
      v36 = (unsigned __int8 *)*((_QWORD *)this + 4);
      v37 = (id *)((char *)this + 40);
      v38 = re::globalAllocators(v20);
      v39 = (re::FileTextureProvider *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v38[2] + 32))(v38[2], 240, 8);
      v40 = (uint64_t)v39;
      if ((BYTE8(v70) & 1) != 0)
        v41 = (const char *)v71;
      else
        v41 = (const char *)((unint64_t)&v70 | 9);
      v42 = re::FileTextureProvider::FileTextureProvider(v39, v37, v36[1408], v41);
      v43 = re::globalAllocators(v42);
      v44 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v43[2] + 32))(v43[2], 512, 8);
      re::TextureImportOperation::TextureImportOperation((re::TextureImportOperation *)v44, (re::TextureProvider *)v40, 1, (re::AssetManager *)v36);
      v45 = *(_OWORD *)(v40 + 64);
      *(_OWORD *)v97 = *(_OWORD *)(v40 + 48);
      *(_OWORD *)&v97[16] = v45;
      *(_OWORD *)v98 = *(_OWORD *)(v40 + 80);
      *(_OWORD *)&v98[12] = *(_OWORD *)(v40 + 92);
      v99 = *(id *)(v40 + 112);
      v100 = *(_OWORD *)(v40 + 120);
      *(_DWORD *)&v97[8] = v78;
      *(_QWORD *)&v97[16] = v79;
      *(_DWORD *)&v98[24] = v77;
      if (v77 == 6)
      {
        if (*(_DWORD *)v97 == 2)
          *(_DWORD *)v97 = 0;
        if (*(_DWORD *)&v97[4] == 3)
          *(_DWORD *)&v97[4] = 0;
      }
      else
      {
        *(_QWORD *)v97 = 0x300000002;
      }
      re::TextureProvider::setOptions(v40, (__int128 *)v97);
      v46 = *(re **)(v44 + 496);
      v48 = re::globalAllocators(v47);
      re::loadTextureDataWithProvider(v46, (re::TextureProvider *)v48[2], v49, (uint64_t)v92);
      if (v92[0])
      {
        *(_BYTE *)(v44 + 216) = v92[8];
        std::__variant_detail::__assignment<std::__variant_detail::__traits<NS::SharedPtr<MTL::Texture>,re::CPUTexture>>::__generic_assign[abi:nn180100]<std::__variant_detail::__copy_assignment<std::__variant_detail::__traits<NS::SharedPtr<MTL::Texture>,re::CPUTexture>,(std::__variant_detail::_Trait)1> const&>(v44 + 224, (uint64_t)&v92[16]);
        re::ObjCObject::operator=((id *)(v44 + 312), &v96);
        *(_DWORD *)(v44 + 112) = 1;
        v85[1] = 1;
        HIDWORD(v86) = 0;
        v85[0] = 16777473;
        v85[2] = 1;
        v87 = 0;
        *(_QWORD *)&v86 = 0;
        *(_QWORD *)((char *)&v86 + 5) = 0;
        TextureAsset = re::TextureAsset::makeTextureAsset(v44 + 216, *(int *)&v98[24], (__int128 *)v85);
        if (TextureAsset)
        {
          v51 = TextureAsset;
          re::createTextureCompileOptionsFromTextureImageOptions((re *)v97, (uint64_t)&v65);
          *(_OWORD *)(v51 + 8) = v65;
          *(_OWORD *)(v51 + 24) = v66;
          re::Result<re::TextureData,re::DynamicString>::~Result((uint64_t)v92);

          *(_QWORD *)&v92[8] = 0;
          *(_QWORD *)&v92[16] = 0;
          v93 = 0;
          re::DynamicString::setCapacity(v92, 0);
          BYTE8(v94) = 0;
          v95 = 0;
          *(_QWORD *)&v94 = v51;
          re::DynamicString::operator=((re::DynamicString *)v92, (const re::AssetLoadDescriptor *)((char *)a2 + 112));
          re::DynamicString::DynamicString((re::DynamicString *)v97, (const re::DynamicString *)v92);
          v53 = v95;
          v54 = v94;
          *(_BYTE *)a3 = 1;
          v55 = *(_QWORD *)&v97[24];
          *(_QWORD *)(a3 + 8) = *(_QWORD *)v97;
          *(_QWORD *)(a3 + 32) = v55;
          *(_OWORD *)(a3 + 16) = *(_OWORD *)&v97[8];
          *(_OWORD *)(a3 + 40) = v54;
          *(_BYTE *)(a3 + 56) = v53;
          if (!*(_QWORD *)v92 || (v92[8] & 1) == 0)
            goto LABEL_67;
          v56 = *(void (**)(void))(**(_QWORD **)v92 + 40);
LABEL_66:
          v56();
LABEL_67:

LABEL_68:
          if ((_QWORD)v70 && (BYTE8(v70) & 1) != 0)
            (*(void (**)(void))(*(_QWORD *)v70 + 40))();
          goto LABEL_71;
        }
        v57 = v88;
        v58 = v89;
        LOBYTE(v65) = 0;
        *((_QWORD *)&v66 + 1) = v90;
        v67 = v91;
      }
      else
      {
        re::DynamicString::DynamicString((re::DynamicString *)&v88, (const re::DynamicString *)&v92[8]);
        LOBYTE(v65) = 0;
        *((_QWORD *)&v66 + 1) = v90;
        v67 = v91;
        v57 = v88;
        v58 = v89;
      }
      *((_QWORD *)&v65 + 1) = v57;
      *(_QWORD *)&v66 = v58;
      re::Result<re::TextureData,re::DynamicString>::~Result((uint64_t)v92);

      re::DynamicString::DynamicString((re::DynamicString *)v92, (const re::DynamicString *)((char *)&v65 + 8));
      *(_BYTE *)a3 = 0;
      v64 = v93;
      *(_QWORD *)(a3 + 8) = *(_QWORD *)v92;
      *(_QWORD *)(a3 + 32) = v64;
      *(_OWORD *)(a3 + 16) = *(_OWORD *)&v92[8];
      if (!v57 || (v58 & 1) == 0)
        goto LABEL_67;
      v56 = *(void (**)(void))(*(_QWORD *)v57 + 40);
      goto LABEL_66;
    }
    v28 = *(os_unfair_lock_s **)(*((_QWORD *)this + 4) + 1304);
    re::DynamicString::DynamicString((re::DynamicString *)v68, (const re::DynamicString *)&v72);
    re::BundleFilePathRegistry::findWithBundleID(v28, (uint64_t)v68, (id *)&v65);
    v29 = *(_anonymous_namespace_ **)&v68[0];
    if (*(_QWORD *)&v68[0])
    {
      if ((BYTE8(v68[0]) & 1) != 0)
        v29 = (_anonymous_namespace_ *)(*(uint64_t (**)(void))(**(_QWORD **)&v68[0] + 40))();
      memset(v68, 0, sizeof(v68));
    }
    if ((_QWORD)v65)
    {
      if ((BYTE8(v75) & 1) != 0)
        v30 = (const char *)v76;
      else
        v30 = (char *)&v75 + 9;
      v31 = re::Bundle::pathForResource((id *)&v65, v30, (re::DynamicString *)&v70);
      if (v31)
      {

        goto LABEL_40;
      }
      v60 = &v75;
    }
    else
    {
      v60 = &v72;
    }
    re::DynamicString::operator+(v59, (uint64_t)v60, (re::DynamicString *)v92);
    v61 = *(_OWORD *)v92;
    memset(v92, 0, sizeof(v92));
    v62 = *(_QWORD *)&v92[16];
    v63 = v93;
    v93 = 0;
    *(_BYTE *)a3 = 0;
    *(_OWORD *)(a3 + 8) = v61;
    *(_QWORD *)(a3 + 24) = v62;
    *(_QWORD *)(a3 + 32) = v63;
    if (*(_QWORD *)v97 && (v97[8] & 1) != 0)
      (*(void (**)(void))(**(_QWORD **)v97 + 40))();

    goto LABEL_68;
  }
  v25 = *(_OWORD *)v92;
  v26 = *(_QWORD *)&v92[16];
  v27 = v93;
  *(_BYTE *)a3 = 0;
  *(_OWORD *)(a3 + 8) = v25;
  *(_QWORD *)(a3 + 24) = v26;
  *(_QWORD *)(a3 + 32) = v27;
LABEL_71:
  if ((_QWORD)v80)
  {
    if ((BYTE8(v80) & 1) != 0)
      (*(void (**)(void))(*(_QWORD *)v80 + 40))();
    v80 = 0u;
    v81 = 0u;
  }
  if ((_QWORD)v75)
  {
    if ((BYTE8(v75) & 1) != 0)
      (*(void (**)(void))(*(_QWORD *)v75 + 40))();
    v75 = 0u;
    v76 = 0u;
  }
  result = (re::DynamicString *)v72;
  if ((_QWORD)v72)
  {
    if ((BYTE8(v72) & 1) != 0)
      return (re::DynamicString *)(*(uint64_t (**)(void))(*(_QWORD *)v72 + 40))();
  }
  return result;
}

uint64_t re::AssetLoadDescriptor::getIntrospectableData<re::TextureLoadDescriptorParameters>(re::AssetLoadDescriptor *a1, uint64_t **a2)
{
  uint64_t **v2;
  unsigned __int8 v3;
  re::AssetLoadDescriptor *v5;
  int v7;
  int v8;

  v2 = a2;
  v3 = atomic_load((unsigned __int8 *)&qword_2540FF760);
  if ((v3 & 1) == 0)
  {
    v5 = a1;
    v7 = __cxa_guard_acquire(&qword_2540FF760);
    v2 = a2;
    v8 = v7;
    a1 = v5;
    if (v8)
    {
      qword_2540FF758 = re::internal::getOrCreateInfo((re::internal *)"TextureLoadDescriptorParameters", (uint64_t (*)(re::internal *))re::allocInfo_TextureLoadDescriptorParameters, (re::IntrospectionBase *(*)(void))re::initInfo_TextureLoadDescriptorParameters, (void (*)(re::IntrospectionBase *))&unk_2540FF750, 0);
      __cxa_guard_release(&qword_2540FF760);
      a1 = v5;
      v2 = a2;
    }
  }
  return re::AssetLoadDescriptor::getIntrospectableData(a1, (re **)qword_2540FF758, v2, 0);
}

__n128 re::TextureAssetProvider::resolveChild@<Q0>(re::TextureAssetProvider *this@<X0>, uint64_t a2@<X8>)
{
  __n128 result;
  uint64_t v7;
  uint64_t v8;
  __n128 v9;
  uint64_t v10;
  uint64_t v11;

  result = v9;
  v7 = v10;
  v8 = v11;
  *(_BYTE *)a2 = 0;
  *(__n128 *)(a2 + 8) = result;
  *(_QWORD *)(a2 + 24) = v7;
  *(_QWORD *)(a2 + 32) = v8;
  return result;
}

uint64_t *re::TextureAssetProvider::getDescription(re::TextureAssetProvider *this, const re::AssetLoadDescriptor *a2, re::DynamicString *a3)
{
  _anonymous_namespace_ *v5;
  _anonymous_namespace_ *v6;
  uint64_t v7;
  __int128 *v8;
  re::DynamicString *v9;
  unint64_t v10;
  const char *v11;
  const char *v12;
  BOOL v13;
  const char *v14;
  size_t v15;
  size_t v16;
  size_t v17;
  size_t v18;
  const char *v19;
  re::DynamicString *v20;
  size_t v21;
  uint64_t v22;
  const char *v23;
  size_t v24;
  const char *v25;
  re::DynamicString *v26;
  size_t v27;
  uint64_t *result;
  const char *v29;
  _QWORD v30[3];
  uint64_t *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  __int128 v35;
  __int128 v36;
  unsigned int v37;
  int v38;
  unsigned int v39;
  int v40;
  __int128 v41;
  __int128 v42;
  uint64_t v43;
  char v44;
  int v45;

  v32 = 0;
  v33 = 0;
  v34 = 0;
  v5 = (_anonymous_namespace_ *)re::DynamicString::setCapacity(&v31, 0);
  *((_QWORD *)&v35 + 1) = 0;
  v36 = 0uLL;
  v6 = (_anonymous_namespace_ *)re::DynamicString::setCapacity(&v35, 0);
  *((_QWORD *)&v41 + 1) = 0;
  v42 = 0uLL;
  re::DynamicString::setCapacity(&v41, 0);
  v45 = 0;
  v43 = 0;
  v44 = 0;
  if (!re::AssetLoadDescriptor::getIntrospectableData<re::TextureLoadDescriptorParameters>(a2, &v31))
  {
    v29 = "mangled";
    v30[0] = 7;
    re::DynamicString::operator=(a3, (uint64_t)&v29);
    goto LABEL_39;
  }
  if ((BYTE8(v41) & 1) != 0)
    v7 = *((_QWORD *)&v41 + 1) >> 1;
  else
    v7 = BYTE8(v41) >> 1;
  if (v7)
  {
    v29 = "AliasName:";
    v30[0] = 10;
    re::DynamicString::operator=(a3, (uint64_t)&v29);
    v8 = &v41;
  }
  else
  {
    v9 = re::DynamicString::operator=(a3, (re::DynamicString *)&v31);
    re::DynamicString::append(v9, "/", 1uLL);
    v8 = &v35;
  }
  v10 = *((_QWORD *)v8 + 1);
  v11 = (const char *)*((_QWORD *)v8 + 2);
  v12 = (char *)v8 + 9;
  v13 = (v10 & 1) == 0;
  if ((v10 & 1) != 0)
    v14 = v11;
  else
    v14 = v12;
  v15 = v10 >> 1;
  v16 = v10 >> 1;
  if (v13)
    v17 = v16;
  else
    v17 = v15;
  re::DynamicString::append(a3, v14, v17);
  if (v37 <= 6)
  {
    v18 = strlen(off_24ED377E8[v37]);
    re::DynamicString::append(a3, off_24ED377E8[v37], v18);
  }
  switch(v38)
  {
    case 2:
      v19 = "/override";
      v20 = a3;
      v21 = 9;
      goto LABEL_31;
    case 1:
      re::DynamicString::format((re::DynamicString *)"/downsample=%d", (re::DynamicString *)&v29, v39);
      v22 = v30[0] & 1;
      if ((v30[0] & 1) != 0)
        v23 = (const char *)v30[1];
      else
        v23 = (char *)v30 + 1;
      if ((v30[0] & 1) != 0)
        v24 = v30[0] >> 1;
      else
        v24 = LOBYTE(v30[0]) >> 1;
      re::DynamicString::append(a3, v23, v24);
      if (v29 && v22)
        (*(void (**)(void))(*(_QWORD *)v29 + 40))();
      break;
    case 0:
      v19 = "/source";
      v20 = a3;
      v21 = 7;
LABEL_31:
      re::DynamicString::append(v20, v19, v21);
      break;
  }
  switch(v40)
  {
    case 0:
      v25 = "/GPU";
      goto LABEL_37;
    case 1:
      v25 = "/allocate";
      v26 = a3;
      v27 = 9;
      goto LABEL_38;
    case 2:
      v25 = "/-";
      v26 = a3;
      v27 = 2;
      goto LABEL_38;
    case 3:
      v25 = "/CPU";
LABEL_37:
      v26 = a3;
      v27 = 4;
LABEL_38:
      re::DynamicString::append(v26, v25, v27);
      break;
    default:
      break;
  }
LABEL_39:
  if ((_QWORD)v41)
  {
    if ((BYTE8(v41) & 1) != 0)
      (*(void (**)(void))(*(_QWORD *)v41 + 40))();
    v41 = 0u;
    v42 = 0u;
  }
  if ((_QWORD)v35)
  {
    if ((BYTE8(v35) & 1) != 0)
      (*(void (**)(void))(*(_QWORD *)v35 + 40))();
    v35 = 0u;
    v36 = 0u;
  }
  result = v31;
  if (v31)
  {
    if ((v32 & 1) != 0)
      return (uint64_t *)(*(uint64_t (**)(void))(*v31 + 40))();
  }
  return result;
}

const char *re::TextureAssetProvider::schemeName(re::TextureAssetProvider *this)
{
  return "TextureImage";
}

uint64_t *re::ARReferenceObjectAsset::assetType(re::ARReferenceObjectAsset *this)
{
  unsigned __int8 v1;

  {
    re::ARReferenceObjectAsset::assetType(void)::type = (uint64_t)"ARReferenceObject";
    qword_255827678 = 0;
    re::AssetType::generateCompiledExtension((re::AssetType *)&re::ARReferenceObjectAsset::assetType(void)::type);
  }
  return &re::ARReferenceObjectAsset::assetType(void)::type;
}

BOOL re::ARReferenceObjectAssetLoader::serializeAssetBlob(uint64_t a1, uint64_t a2, uint64_t a3)
{
  const __CFData *v3;
  const UInt8 *BytePtr;
  CFIndex Length;
  uint64_t v8;

  v3 = *(const __CFData **)(a3 + 8);
  if (!v3)
    return 1;
  BytePtr = CFDataGetBytePtr(v3);
  Length = CFDataGetLength(*(CFDataRef *)(a3 + 8));
  v8 = (*(uint64_t (**)(uint64_t, const UInt8 *, CFIndex))(*(_QWORD *)a2 + 16))(a2, BytePtr, Length);
  return v8 == CFDataGetLength(*(CFDataRef *)(a3 + 8));
}

uint64_t re::ARReferenceObjectAssetLoader::createRuntimeData(uint64_t a1, uint64_t a2, uint64_t a3)
{
  re *v4;
  re *v5;
  NSObject *v6;
  uint8_t v8[4];
  _DWORD length[3];

  if (!a3)
    return 1;
  memset(length, 0, sizeof(length));
  v4 = (re *)(*(uint64_t (**)(uint64_t, _DWORD *, _DWORD *))(*(_QWORD *)a3 + 16))(a3, &length[1], length);
  v5 = v4;
  if ((v4 & 1) != 0)
  {
    *(_QWORD *)(a2 + 8) = CFDataCreate((CFAllocatorRef)*MEMORY[0x24BDBD240], *(const UInt8 **)&length[1], length[0]);
  }
  else
  {
    v6 = *re::assetTypesLogObjects(v4);
    if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)v8 = 0;
      _os_log_error_impl(&dword_224FE9000, v6, OS_LOG_TYPE_ERROR, "ARReferenceObjectAsset: Empty input stream, failed to deserialize", v8, 2u);
    }
  }
  return (uint64_t)v5;
}

CFIndex re::ARReferenceObjectAssetLoader::assetByteSize(re::ARReferenceObjectAssetLoader *this, CFDataRef *a2)
{
  return CFDataGetLength(a2[1]);
}

uint64_t re::ARReferenceObjectAssetLoader::unloadAsset(re::ARReferenceObjectAssetLoader *this, _QWORD *a2)
{
  void *v3;
  uint64_t *v4;

  v3 = (void *)a2[1];
  if (v3)
  {
    CFRelease(v3);
    a2[1] = 0;
  }
  v4 = re::globalAllocators((re *)v3);
  return (*(uint64_t (**)(uint64_t, _QWORD *))(*(_QWORD *)v4[2] + 40))(v4[2], a2);
}

uint64_t re::ARReferenceObjectAssetLoader::isSupportedSourceExtension(re::ARReferenceObjectAssetLoader *this, const char *a2)
{
  return 0;
}

uint64_t re::ARReferenceObjectAssetLoader::introspectionType(re::ARReferenceObjectAssetLoader *this)
{
  unsigned __int8 v1;

  v1 = atomic_load((unsigned __int8 *)&qword_2540FF918);
  if ((v1 & 1) == 0 && __cxa_guard_acquire(&qword_2540FF918))
  {
    qword_2540FF910 = re::internal::getOrCreateInfo((re::internal *)"ARReferenceObjectAsset", (uint64_t (*)(re::internal *))re::allocInfo_ARReferenceObjectAsset, (re::IntrospectionBase *(*)(void))re::initInfo_ARReferenceObjectAsset, (void (*)(re::IntrospectionBase *))&unk_2540FF908, 0);
    __cxa_guard_release(&qword_2540FF918);
  }
  return qword_2540FF910;
}

void re::ARReferenceObjectAssetLoader::makeSharedResourcePayload(REReferenceObjectPayload **a1@<X8>)
{
  REReferenceObjectPayload *v2;

  v2 = objc_alloc_init(REReferenceObjectPayload);

  *a1 = v2;
}

uint64_t re::ARReferenceObjectAssetLoader::postInitializeAssetFromPayload(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(_QWORD *)(a3 + 8) = 0;
  return 1;
}

uint64_t *re::allocInfo_ARReferenceObjectAsset(re *this)
{
  unsigned __int8 v1;

  v1 = atomic_load((unsigned __int8 *)&_MergedGlobals_81);
  if ((v1 & 1) == 0 && __cxa_guard_acquire(&_MergedGlobals_81))
  {
    ArcSharedObject::ArcSharedObject((ArcSharedObject *)&qword_2540FF920, 0);
    *(uint64_t *)((char *)&qword_2540FF930 + 6) = 0;
    qword_2540FF930 = 0;
    qword_2540FF940 = 0;
    qword_2540FF948 = 0xFFFFFFFFLL;
    qword_2540FF920 = (uint64_t)&off_24ED7DAA8;
    qword_2540FF950 = (uint64_t)"ARReferenceObjectAsset";
    dword_2540FF958 = 0;
    xmmword_2540FF960 = 0u;
    unk_2540FF970 = 0u;
    xmmword_2540FF980 = 0u;
    qword_2540FF990 = 0;
    __cxa_guard_release(&_MergedGlobals_81);
  }
  return &qword_2540FF920;
}

void re::initInfo_ARReferenceObjectAsset(re *this, re::IntrospectionBase *a2)
{
  const re::IntrospectionBase *v3;
  unsigned __int8 v4;
  re *v5;
  uint64_t *v6;
  const re::IntrospectionBase *v7;
  void *v8;
  uint64_t v9;
  __int128 v10;
  _QWORD v11[2];
  __int128 v12;

  v11[0] = 0x9C4150F1F6BA78EELL;
  v11[1] = "ARReferenceObjectAsset";
  re::StringID::destroyString((re::StringID *)v11);
  *((_OWORD *)this + 2) = v12;
  v4 = atomic_load((unsigned __int8 *)&qword_2540FF900);
  if ((v4 & 1) == 0)
  {
    v5 = (re *)__cxa_guard_acquire(&qword_2540FF900);
    if ((_DWORD)v5)
    {
      v6 = re::introspectionAllocator(v5);
      v8 = re::introspect_uint8_t((re *)1, v7);
      v9 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v6 + 32))(v6, 72, 8);
      *(_DWORD *)v9 = 1;
      *(_QWORD *)(v9 + 8) = "m_version";
      *(_QWORD *)(v9 + 16) = v8;
      *(_QWORD *)(v9 + 24) = 0;
      *(_QWORD *)(v9 + 32) = 1;
      *(_DWORD *)(v9 + 40) = 0;
      *(_QWORD *)(v9 + 48) = 0;
      *(_QWORD *)(v9 + 56) = 0;
      *(_DWORD *)(v9 + 64) = 0;
      qword_2540FF8F8 = v9;
      __cxa_guard_release(&qword_2540FF900);
    }
  }
  *((_QWORD *)this + 2) = 0x1000000008;
  *((_DWORD *)this + 6) = 8;
  *((_WORD *)this + 14) = 1;
  *((_DWORD *)this + 14) = 1;
  *((_QWORD *)this + 8) = &qword_2540FF8F8;
  *((_QWORD *)this + 9) = re::internal::defaultConstruct<re::ARReferenceObjectAsset>;
  *((_QWORD *)this + 10) = re::internal::defaultDestruct<re::ARReferenceObjectAsset>;
  *((_QWORD *)this + 11) = 0;
  *((_QWORD *)this + 12) = 0;
  *((_QWORD *)this + 13) = re::internal::defaultConstructV2<re::ARReferenceObjectAsset>;
  *((_QWORD *)this + 14) = re::internal::defaultDestructV2<re::ARReferenceObjectAsset>;
  re::IntrospectionRegistry::add(this, v3);
  v10 = v12;
}

void sub_22533E534(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_2540FF900);
  _Unwind_Resume(a1);
}

void re::internal::defaultConstruct<re::ARReferenceObjectAsset>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(_BYTE *)a3 = 0;
  *(_QWORD *)(a3 + 8) = 0;
}

uint64_t re::internal::defaultConstructV2<re::ARReferenceObjectAsset>(uint64_t result)
{
  *(_BYTE *)result = 0;
  *(_QWORD *)(result + 8) = 0;
  return result;
}

void re::ARReferenceObjectAssetLoader::~ARReferenceObjectAssetLoader(re::ARReferenceObjectAssetLoader *this)
{
  JUMPOUT(0x2276933B8);
}

void re::RenderGraphFile::~RenderGraphFile(re::RenderGraphFile *this)
{
  char *v2;
  re *v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  re **v11;
  re **v12;
  unint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  _QWORD *v28;
  _QWORD *v29;
  unint64_t v30;
  uint64_t v31;
  void (****v32)(_QWORD);
  void (***v33)(_QWORD);
  uint64_t v34;
  _QWORD *v35;
  uint64_t v36;
  re *v37;
  uint64_t v38;
  void (****v39)(_QWORD);
  uint64_t v40;
  void (***v41)(_QWORD);
  uint64_t v42;
  _QWORD *v43;
  re *v44;
  uint64_t v45;
  void (****v46)(_QWORD);
  uint64_t v47;
  void (***v48)(_QWORD);
  uint64_t v49;
  double v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;

  v2 = (char *)this + 40;
  v3 = (re *)re::DynamicArray<re::RenderGraphTargetData>::deinit((uint64_t)this + 40);
  v4 = *((_QWORD *)this + 17);
  if (v4)
  {
    v5 = 0;
    v6 = *((_QWORD *)this + 90);
    v7 = v4 - 1;
    v8 = 24;
    do
    {
      v9 = v5 + 1;
      if (v5 + 1 < v4)
      {
        v10 = *((_QWORD *)this + 19);
        v11 = (re **)(v10 + 16 * v5 + 8);
        v12 = (re **)(v10 + v8);
        v13 = v7;
        do
        {
          v3 = *v12;
          if (*v11 == *v12)
            *v12 = 0;
          v12 += 2;
          --v13;
        }
        while (v13);
      }
      if (v6)
      {
        v14 = *(_QWORD *)(*((_QWORD *)this + 19) + 16 * v5 + 8);
        v15 = (_QWORD *)*((_QWORD *)this + 91);
        v16 = v6;
        do
        {
          if (v14 == *v15)
            *v15 = 0;
          v15 += 16;
          --v16;
        }
        while (v16);
      }
      --v7;
      v8 += 16;
      v5 = v9;
    }
    while (v9 != v4);
  }
  v17 = *((_QWORD *)this + 37);
  if (v17)
  {
    v18 = 0;
    do
    {
      v19 = v18++;
      if (v18 < v17)
      {
        v20 = v18;
        do
        {
          v21 = *((_QWORD *)this + 39);
          if (*(_QWORD *)(v21 + 8 * v19) == *(_QWORD *)(v21 + 8 * v20))
            *(_QWORD *)(v21 + 8 * v20) = 0;
          ++v20;
        }
        while (v17 != v20);
      }
    }
    while (v18 != v17);
  }
  v22 = *((_QWORD *)this + 90);
  if (v22)
  {
    v23 = 0;
    v24 = v22 - 1;
    v25 = 128;
    do
    {
      v26 = v23 + 1;
      if (v23 + 1 < v22)
      {
        v27 = *((_QWORD *)this + 91);
        v28 = (_QWORD *)(v27 + (v23 << 7));
        v29 = (_QWORD *)(v27 + v25);
        v30 = v24;
        do
        {
          if (*v28 == *v29)
            *v29 = 0;
          v29 += 16;
          --v30;
        }
        while (v30);
      }
      --v24;
      v25 += 128;
      v23 = v26;
    }
    while (v26 != v22);
  }
  if (v4)
  {
    v31 = 16 * v4;
    v32 = (void (****)(_QWORD))(*((_QWORD *)this + 19) + 8);
    do
    {
      v33 = *v32;
      if (*v32)
      {
        v34 = re::globalAllocators(v3)[2];
        (**v33)(v33);
        v3 = (re *)(*(uint64_t (**)(uint64_t, void (***)(_QWORD)))(*(_QWORD *)v34 + 40))(v34, v33);
      }
      v32 += 2;
      v31 -= 16;
    }
    while (v31);
  }
  v35 = (_QWORD *)((char *)this + 120);
  v36 = *((_QWORD *)this + 15);
  if (v36)
  {
    if (*((_QWORD *)this + 19))
      (*(void (**)(uint64_t))(*(_QWORD *)v36 + 40))(v36);
    *((_QWORD *)this + 19) = 0;
    *((_QWORD *)this + 16) = 0;
    *((_QWORD *)this + 17) = 0;
    *v35 = 0;
    ++*((_DWORD *)this + 36);
  }
  re::DynamicArray<re::RenderGraphInputData>::deinit((uint64_t)this + 160);
  v37 = (re *)re::DynamicArray<re::RenderGraphOutputData>::deinit((uint64_t)this + 240);
  v38 = *((_QWORD *)this + 37);
  if (v38)
  {
    v39 = (void (****)(_QWORD))*((_QWORD *)this + 39);
    v40 = 8 * v38;
    do
    {
      v41 = *v39;
      if (*v39)
      {
        v42 = re::globalAllocators(v37)[2];
        (**v41)(v41);
        v37 = (re *)(*(uint64_t (**)(uint64_t, void (***)(_QWORD)))(*(_QWORD *)v42 + 40))(v42, v41);
      }
      ++v39;
      v40 -= 8;
    }
    while (v40);
  }
  v43 = (_QWORD *)((char *)this + 280);
  v44 = (re *)*((_QWORD *)this + 35);
  if (v44)
  {
    if (*((_QWORD *)this + 39))
      v44 = (re *)(*(uint64_t (**)(re *))(*(_QWORD *)v44 + 40))(v44);
    *((_QWORD *)this + 39) = 0;
    *((_QWORD *)this + 36) = 0;
    *((_QWORD *)this + 37) = 0;
    *v43 = 0;
    ++*((_DWORD *)this + 76);
  }
  v45 = *((_QWORD *)this + 90);
  if (v45)
  {
    v46 = (void (****)(_QWORD))*((_QWORD *)this + 91);
    v47 = v45 << 7;
    do
    {
      v48 = *v46;
      if (*v46)
      {
        v49 = re::globalAllocators(v44)[2];
        (**v48)(v48);
        v44 = (re *)(*(uint64_t (**)(uint64_t, void (***)(_QWORD)))(*(_QWORD *)v49 + 40))(v49, v48);
      }
      v46 += 16;
      v47 -= 128;
    }
    while (v47);
  }
  re::FixedArray<re::RuntimeSettingsNodeCache>::deinit((_QWORD *)this + 89);
  re::DynamicArray<re::RenderGraphDataStoreConnection>::deinit((uint64_t)this + 824);
  re::DynamicArray<re::RenderGraphDataStoreConnection>::deinit((uint64_t)this + 784);
  re::HashTable<re::StringID,re::DataArrayHandle<re::RigGraphOperatorDefinition>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::deinit((uint64_t *)this + 92);
  re::FixedArray<re::RuntimeSettingsNodeCache>::deinit((_QWORD *)this + 89);
  re::HashTable<re::internal::SerializeFuncKey,BOOL (*)(re::Serializer<re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL),re::internal::HashSerializeFuncKey,re::EqualTo<re::internal::SerializeFuncKey>,false,true>::deinit((uint64_t *)this + 81);
  re::HashTable<unsigned long long,re::RenderGraphTargetHandle,re::PrecalculatedHash,re::EqualTo<unsigned long long>,false,false>::deinit((uint64_t *)this + 75);
  re::HashTable<unsigned long long,re::RenderGraphTargetHandle,re::PrecalculatedHash,re::EqualTo<unsigned long long>,false,false>::deinit((uint64_t *)this + 69);
  re::HashTable<re::internal::SerializeFuncKey,BOOL (*)(re::Serializer<re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL),re::internal::HashSerializeFuncKey,re::EqualTo<re::internal::SerializeFuncKey>,false,true>::deinit((uint64_t *)this + 63);
  re::HashTable<unsigned long,re::RenderGraphFile::ConnectionCacheInfo,re::Hash<unsigned long>,re::EqualTo<unsigned long>,true,false>::deinit((uint64_t *)this + 57);
  v50 = re::HashTable<unsigned long,re::RenderGraphFile::ConnectionCacheInfo,re::Hash<unsigned long>,re::EqualTo<unsigned long>,true,false>::deinit((uint64_t *)this + 51);
  v51 = *((_QWORD *)this + 46);
  if (v51)
  {
    if ((*((_BYTE *)this + 376) & 1) != 0)
      (*(void (**)(uint64_t, _QWORD, double))(*(_QWORD *)v51 + 40))(v51, *((_QWORD *)this + 48), v50);
    *((_OWORD *)this + 23) = 0u;
    *((_OWORD *)this + 24) = 0u;
  }
  re::DynamicArray<re::RenderGraphDataNodeConnection>::deinit((uint64_t)this + 320);
  v52 = *((_QWORD *)this + 35);
  if (v52)
  {
    if (*((_QWORD *)this + 39))
      (*(void (**)(uint64_t))(*(_QWORD *)v52 + 40))(v52);
    *((_QWORD *)this + 39) = 0;
    *((_QWORD *)this + 36) = 0;
    *((_QWORD *)this + 37) = 0;
    *v43 = 0;
    ++*((_DWORD *)this + 76);
  }
  re::DynamicArray<re::RenderGraphOutputData>::deinit((uint64_t)this + 240);
  re::DynamicArray<re::RenderGraphOutputData>::deinit((uint64_t)this + 200);
  re::DynamicArray<re::RenderGraphInputData>::deinit((uint64_t)this + 160);
  v53 = *((_QWORD *)this + 15);
  if (v53)
  {
    if (*((_QWORD *)this + 19))
      (*(void (**)(uint64_t))(*(_QWORD *)v53 + 40))(v53);
    *((_QWORD *)this + 19) = 0;
    *((_QWORD *)this + 16) = 0;
    *((_QWORD *)this + 17) = 0;
    *v35 = 0;
    ++*((_DWORD *)this + 36);
  }
  re::DynamicArray<re::RenderGraphBufferData>::deinit((uint64_t)this + 80);
  re::DynamicArray<re::RenderGraphTargetData>::deinit((uint64_t)v2);
  *(_QWORD *)this = off_24ED381E0;
  v54 = *((_QWORD *)this + 1);
  if (v54)
  {
    if ((*((_BYTE *)this + 16) & 1) != 0)
      (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v54 + 40))(v54, *((_QWORD *)this + 3));
    *(_OWORD *)((char *)this + 8) = 0u;
    *(_OWORD *)((char *)this + 24) = 0u;
  }
}

{
  re::RenderGraphFile::~RenderGraphFile(this);
  JUMPOUT(0x2276933B8);
}

void sub_22533E9F0(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;
  double v4;
  uint64_t v5;
  uint64_t v6;

  re::DynamicArray<re::RenderGraphDataStoreConnection>::deinit(v1 + 824);
  re::DynamicArray<re::RenderGraphDataStoreConnection>::deinit(v1 + 784);
  re::HashTable<re::StringID,re::DataArrayHandle<re::RigGraphOperatorDefinition>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::deinit((uint64_t *)(v1 + 736));
  re::FixedArray<re::RuntimeSettingsNodeCache>::deinit((_QWORD *)(v1 + 712));
  re::HashTable<re::internal::SerializeFuncKey,BOOL (*)(re::Serializer<re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL),re::internal::HashSerializeFuncKey,re::EqualTo<re::internal::SerializeFuncKey>,false,true>::deinit((uint64_t *)(v1 + 648));
  re::HashTable<unsigned long long,re::RenderGraphTargetHandle,re::PrecalculatedHash,re::EqualTo<unsigned long long>,false,false>::deinit((uint64_t *)(v1 + 600));
  re::HashTable<unsigned long long,re::RenderGraphTargetHandle,re::PrecalculatedHash,re::EqualTo<unsigned long long>,false,false>::deinit((uint64_t *)(v1 + 552));
  re::HashTable<re::internal::SerializeFuncKey,BOOL (*)(re::Serializer<re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL),re::internal::HashSerializeFuncKey,re::EqualTo<re::internal::SerializeFuncKey>,false,true>::deinit((uint64_t *)(v1 + 504));
  re::HashTable<unsigned long,re::RenderGraphFile::ConnectionCacheInfo,re::Hash<unsigned long>,re::EqualTo<unsigned long>,true,false>::deinit((uint64_t *)(v1 + 456));
  v4 = re::HashTable<unsigned long,re::RenderGraphFile::ConnectionCacheInfo,re::Hash<unsigned long>,re::EqualTo<unsigned long>,true,false>::deinit((uint64_t *)(v1 + 408));
  v5 = *(_QWORD *)(v1 + 368);
  if (v5)
  {
    if ((*(_BYTE *)(v1 + 376) & 1) != 0)
      (*(void (**)(uint64_t, _QWORD, double))(*(_QWORD *)v5 + 40))(v5, *(_QWORD *)(v1 + 384), v4);
    *(_OWORD *)(v1 + 368) = 0u;
    *(_OWORD *)(v1 + 384) = 0u;
  }
  re::DynamicArray<re::RenderGraphDataNodeConnection>::deinit(v1 + 320);
  re::DynamicArray<char const*>::~DynamicArray((uint64_t *)(v1 + 280));
  re::DynamicArray<re::RenderGraphOutputData>::deinit(v1 + 240);
  re::DynamicArray<re::RenderGraphOutputData>::deinit(v1 + 200);
  re::DynamicArray<re::RenderGraphInputData>::deinit(v1 + 160);
  re::DynamicArray<char const*>::~DynamicArray((uint64_t *)(v1 + 120));
  re::DynamicArray<re::RenderGraphBufferData>::deinit(v1 + 80);
  re::DynamicArray<re::RenderGraphTargetData>::deinit(v2);
  *(_QWORD *)v1 = off_24ED381E0;
  v6 = *(_QWORD *)(v1 + 8);
  if (v6)
  {
    if ((*(_BYTE *)(v1 + 16) & 1) != 0)
      (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v6 + 40))(v6, *(_QWORD *)(v1 + 24));
    *(_OWORD *)(v1 + 8) = 0u;
    *(_OWORD *)(v1 + 24) = 0u;
  }
  _Unwind_Resume(a1);
}

uint64_t re::DynamicArray<re::RenderGraphTargetData>::deinit(uint64_t a1)
{
  uint64_t result;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  result = *(_QWORD *)a1;
  if (result)
  {
    v3 = *(_QWORD *)(a1 + 32);
    if (v3)
    {
      v4 = *(_QWORD *)(a1 + 16);
      if (v4)
      {
        v5 = 160 * v4;
        do
        {
          re::DynamicArray<re::RenderGraphDataStoreConnection>::deinit(v3 + 120);
          re::AssetHandle::~AssetHandle((re::AssetHandle *)(v3 + 88));
          re::StringID::destroyString((re::StringID *)v3);
          v3 += 160;
          v5 -= 160;
        }
        while (v5);
        result = *(_QWORD *)a1;
        v3 = *(_QWORD *)(a1 + 32);
      }
      result = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)result + 40))(result, v3);
    }
    *(_QWORD *)(a1 + 32) = 0;
    *(_QWORD *)(a1 + 8) = 0;
    *(_QWORD *)(a1 + 16) = 0;
    *(_QWORD *)a1 = 0;
    ++*(_DWORD *)(a1 + 24);
  }
  return result;
}

uint64_t re::DynamicArray<re::RenderGraphInputData>::deinit(uint64_t a1)
{
  uint64_t result;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  result = *(_QWORD *)a1;
  if (result)
  {
    v3 = *(_QWORD *)(a1 + 32);
    if (v3)
    {
      v4 = *(_QWORD *)(a1 + 16);
      if (v4)
      {
        v5 = 56 * v4;
        do
        {
          re::StringID::destroyString((re::StringID *)(v3 + 40));
          re::StringID::destroyString((re::StringID *)(v3 + 16));
          re::StringID::destroyString((re::StringID *)v3);
          v3 += 56;
          v5 -= 56;
        }
        while (v5);
        result = *(_QWORD *)a1;
        v3 = *(_QWORD *)(a1 + 32);
      }
      result = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)result + 40))(result, v3);
    }
    *(_QWORD *)(a1 + 32) = 0;
    *(_QWORD *)(a1 + 8) = 0;
    *(_QWORD *)(a1 + 16) = 0;
    *(_QWORD *)a1 = 0;
    ++*(_DWORD *)(a1 + 24);
  }
  return result;
}

uint64_t re::DynamicArray<re::RenderGraphOutputData>::deinit(uint64_t a1)
{
  uint64_t result;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  result = *(_QWORD *)a1;
  if (result)
  {
    v3 = *(_QWORD *)(a1 + 32);
    if (v3)
    {
      v4 = *(_QWORD *)(a1 + 16);
      if (v4)
      {
        v5 = 48 * v4;
        do
        {
          re::StringID::destroyString((re::StringID *)(v3 + 32));
          re::StringID::destroyString((re::StringID *)(v3 + 16));
          re::StringID::destroyString((re::StringID *)v3);
          v3 += 48;
          v5 -= 48;
        }
        while (v5);
        result = *(_QWORD *)a1;
        v3 = *(_QWORD *)(a1 + 32);
      }
      result = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)result + 40))(result, v3);
    }
    *(_QWORD *)(a1 + 32) = 0;
    *(_QWORD *)(a1 + 8) = 0;
    *(_QWORD *)(a1 + 16) = 0;
    *(_QWORD *)a1 = 0;
    ++*(_DWORD *)(a1 + 24);
  }
  return result;
}

_QWORD *re::FixedArray<re::RuntimeSettingsNodeCache>::deinit(_QWORD *result)
{
  _QWORD *v1;
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t *v5;
  double v6;

  if (*result)
  {
    v1 = result;
    v3 = result + 1;
    v2 = result[1];
    if (v2)
    {
      v4 = v2 << 7;
      v5 = (uint64_t *)(result[2] + 80);
      do
      {
        re::HashTable<re::StringID,re::DataArrayHandle<re::RigGraphOperatorDefinition>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::deinit(v5);
        re::DynamicArray<re::BindPointAndPath>::deinit((uint64_t)(v5 - 5));
        v6 = re::BindNode::deinit((re::BindNode *)(v5 - 9));
        v5 += 16;
        v4 -= 128;
      }
      while (v4);
      result = (_QWORD *)(*(uint64_t (**)(_QWORD, _QWORD, double))(*(_QWORD *)*v1 + 40))(*v1, v1[2], v6);
      *v3 = 0;
      v3[1] = 0;
    }
    *v1 = 0;
  }
  return result;
}

uint64_t re::RenderGraphSpecifyLaneOperation::apply(uint64_t a1, re::RenderFrame *a2)
{
  const char *v3;
  const char *v4;
  uint64_t v6;
  StringID v7;
  _BYTE v8[112];

  if (*(_BYTE *)(a1 + 32))
  {
    v3 = *(const char **)(a1 + 24);
    *(_QWORD *)&v7.var0 = 0;
    v7.var1 = (char *)&str_110;
    v6 = 0;
    re::RenderFrame::applyPropertiesToScopeLane(a2, v3, (const re::RenderGraphTargetDescription *)v8, 0);
  }
  else
  {
    if (!*(_BYTE *)(a1 + 144))
      return 0;
    v4 = *(const char **)(a1 + 24);
    *(_QWORD *)&v7.var0 = 0;
    v7.var1 = (char *)&str_110;
    v6 = 0;
    re::RenderFrame::applyPropertiesToScopeLane(a2, v4, (const re::RenderGraphBufferDescription *)v8, 0);
  }
  re::StringID::destroyString((re::StringID *)&v7);
  return 1;
}

void sub_22533EE34(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  re::StringID::destroyString((re::StringID *)va);
  _Unwind_Resume(a1);
}

void `anonymous namespace'::targetDescriptionFromData(uint64_t a1, uint64_t a2, StringID *a3, _QWORD *a4)
{
  int v5;
  uint64_t v6;
  __int128 v7;
  _QWORD v9[2];

  *(_DWORD *)a1 = 3;
  v5 = *(_DWORD *)(a2 + 68);
  *(_DWORD *)(a1 + 56) = *(_DWORD *)(a2 + 64);
  *(_DWORD *)(a1 + 60) = 1;
  *(_OWORD *)(a1 + 68) = xmmword_2260FCDC0;
  *(_BYTE *)(a1 + 104) = 0;
  *(_OWORD *)(a1 + 4) = *(_OWORD *)(a2 + 4);
  v6 = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 48) = v6;
  *(_DWORD *)(a1 + 64) = v5;
  *(_QWORD *)&v7 = vrev64q_s32(*(int32x4_t *)(a2 + 20)).u64[0];
  *((_QWORD *)&v7 + 1) = *(_QWORD *)(a2 + 28);
  *(_BYTE *)(a1 + 36) = *(_BYTE *)(a2 + 96);
  *(_OWORD *)(a1 + 20) = v7;
  *(_QWORD *)(a1 + 88) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 96) = 0;
  if (*(_DWORD *)a2)
  {
    if (*(_DWORD *)a2 == 1)
    {
      *(_DWORD *)a1 = 2;
      re::StringID::StringID((re::StringID *)v9, a3);
      *(_QWORD *)(a1 + 96) = (*a4 + (v9[0] >> 3) + (v9[0] >> 1 << 6) - 0x61C8864680B583E9) ^ (v9[0] >> 1);
      re::StringID::destroyString((re::StringID *)v9);
    }
    else
    {
      *(_DWORD *)a1 = 3;
    }
  }
  else
  {
    *(_DWORD *)a1 = 0;
  }
}

void `anonymous namespace'::bufferDescriptionFromData(uint64_t a1, uint64_t a2, StringID *a3, _QWORD *a4)
{
  uint64_t v5;
  _QWORD v7[2];

  v5 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 28);
  *(_QWORD *)(a1 + 24) = 0xFFFFFFFF00000020;
  *(_DWORD *)(a1 + 20) = *(_DWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 32) = v5;
  *(_QWORD *)(a1 + 40) = 0;
  if (*(_DWORD *)a2)
  {
    if (*(_DWORD *)a2 == 1)
    {
      *(_DWORD *)a1 = 2;
      re::StringID::StringID((re::StringID *)v7, a3);
      *(_QWORD *)(a1 + 40) = (*a4 + (v7[0] >> 3) + (v7[0] >> 1 << 6) - 0x61C8864680B583E9) ^ (v7[0] >> 1);
      re::StringID::destroyString((re::StringID *)v7);
    }
    else
    {
      *(_DWORD *)a1 = 3;
    }
  }
  else
  {
    *(_DWORD *)a1 = 0;
  }
}

void re::RenderGraphSpecifyLaneOperation::validateOperation(_BYTE *a1@<X8>)
{
  *a1 = 1;
}

unint64_t re::RenderGraphFile::fillConnectionHashes(re::RenderGraphFile *this, const char *a2, re::RenderGraphDataStoreConnection *a3)
{
  size_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t result;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15[3];

  v15[2] = *MEMORY[0x24BDAC8D0];
  v5 = strlen((const char *)this);
  if (v5)
  {
    MurmurHash3_x64_128((uint64_t)this, v5, 0, v15);
    v6 = (v15[1] - 0x61C8864680B583E9 + (v15[0] << 6) + (v15[0] >> 2)) ^ v15[0];
  }
  else
  {
    v6 = 0;
  }
  v7 = *((_QWORD *)a2 + 2);
  if (v7)
  {
    v8 = *((_QWORD *)a2 + 4);
    v9 = 32 * v7;
    do
    {
      v6 ^= (v6 << 6) - 0x61C8864680B583E9 + (v6 >> 2) + re::Hash<re::DynamicString>::operator()((uint64_t)v15, v8);
      v8 += 32;
      v9 -= 32;
    }
    while (v9);
  }
  *((_QWORD *)a2 + 15) = v6;
  result = re::Hash<re::DynamicString>::operator()((uint64_t)v15, (uint64_t)(a2 + 40));
  v11 = result;
  *((_QWORD *)a2 + 14) = result;
  v12 = *((_QWORD *)a2 + 11);
  if (v12)
  {
    v13 = *((_QWORD *)a2 + 13);
    v14 = 32 * v12;
    do
    {
      result = re::Hash<re::DynamicString>::operator()((uint64_t)v15, v13);
      v11 ^= (v11 << 6) - 0x61C8864680B583E9 + (v11 >> 2) + result;
      v13 += 32;
      v14 -= 32;
    }
    while (v14);
  }
  *((_QWORD *)a2 + 16) = v11;
  return result;
}

unint64_t re::hashString(re *this, const char *a2)
{
  unint64_t v3[3];

  v3[2] = *MEMORY[0x24BDAC8D0];
  MurmurHash3_x64_128((uint64_t)"UpdateMaterialTextureSource", 27, 0, v3);
  return (v3[1] + (v3[0] << 6) + (v3[0] >> 2) - 0x61C8864680B583E9) ^ v3[0];
}

{
  unint64_t v3[3];

  v3[2] = *MEMORY[0x24BDAC8D0];
  MurmurHash3_x64_128((uint64_t)"Occlusion", 9, 0, v3);
  return (v3[1] + (v3[0] << 6) + (v3[0] >> 2) - 0x61C8864680B583E9) ^ v3[0];
}

{
  unint64_t v3[3];

  v3[2] = *MEMORY[0x24BDAC8D0];
  MurmurHash3_x64_128((uint64_t)"PortalClippingMode", 18, 0, v3);
  return (v3[1] + (v3[0] << 6) + (v3[0] >> 2) - 0x61C8864680B583E9) ^ v3[0];
}

{
  unint64_t v3[3];

  v3[2] = *MEMORY[0x24BDAC8D0];
  MurmurHash3_x64_128((uint64_t)"DynamicFunctionConstants", 24, 0, v3);
  return (v3[1] + (v3[0] << 6) + (v3[0] >> 2) - 0x61C8864680B583E9) ^ v3[0];
}

{
  unint64_t v3[3];

  v3[2] = *MEMORY[0x24BDAC8D0];
  MurmurHash3_x64_128((uint64_t)"ProjectiveMeshShadow", 20, 0, v3);
  return (v3[1] + (v3[0] << 6) + (v3[0] >> 2) - 0x61C8864680B583E9) ^ v3[0];
}

{
  unint64_t v3[3];

  v3[2] = *MEMORY[0x24BDAC8D0];
  MurmurHash3_x64_128((uint64_t)"SkyScope", 8, 0, v3);
  return (v3[1] + (v3[0] << 6) + (v3[0] >> 2) - 0x61C8864680B583E9) ^ v3[0];
}

{
  unint64_t v3[3];

  v3[2] = *MEMORY[0x24BDAC8D0];
  MurmurHash3_x64_128((uint64_t)"PostProcess", 11, 0, v3);
  return (v3[1] + (v3[0] << 6) + (v3[0] >> 2) - 0x61C8864680B583E9) ^ v3[0];
}

{
  unint64_t v3[3];

  v3[2] = *MEMORY[0x24BDAC8D0];
  MurmurHash3_x64_128((uint64_t)"Opaque", 6, 0, v3);
  return (v3[1] + (v3[0] << 6) + (v3[0] >> 2) - 0x61C8864680B583E9) ^ v3[0];
}

{
  unint64_t v3[3];

  v3[2] = *MEMORY[0x24BDAC8D0];
  MurmurHash3_x64_128((uint64_t)"Deformer", 8, 0, v3);
  return (v3[1] + (v3[0] << 6) + (v3[0] >> 2) - 0x61C8864680B583E9) ^ v3[0];
}

{
  unint64_t v3[3];

  v3[2] = *MEMORY[0x24BDAC8D0];
  MurmurHash3_x64_128((uint64_t)"RenderGraphDataPipeData", 23, 0, v3);
  return (v3[1] + (v3[0] << 6) + (v3[0] >> 2) - 0x61C8864680B583E9) ^ v3[0];
}

{
  unint64_t v3[3];

  v3[2] = *MEMORY[0x24BDAC8D0];
  MurmurHash3_x64_128((uint64_t)"VisualProxyHighFidelity", 23, 0, v3);
  return (v3[1] + (v3[0] << 6) + (v3[0] >> 2) - 0x61C8864680B583E9) ^ v3[0];
}

uint64_t *re::RenderGraphFile::calculateValidity@<X0>(re::RenderGraphFile *this@<X0>, uint64_t a2@<X8>)
{
  const char *v4;
  re::RenderGraphDataStoreConnection *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  const char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  const char *v16;
  uint64_t v17;
  uint64_t v18;
  const char **v19;
  uint64_t v20;
  unint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  int v25;
  uint64_t v26;
  uint64_t v27;
  unsigned int v28;
  unint64_t v29;
  unint64_t v30;
  unint64_t *v31;
  uint64_t v32;
  _QWORD *v33;
  char *v34;
  uint64_t v35;
  char v36;
  unsigned __int8 *v37;
  int v38;
  char *v39;
  const char *v40;
  char *v41;
  char *v42;
  unint64_t *v43;
  uint64_t v44;
  unint64_t *v45;
  uint64_t v46;
  unint64_t v47;
  unint64_t v48;
  uint64_t i;
  char *v50;
  const char *v51;
  unint64_t v52;
  unint64_t v53;
  unint64_t v54;
  uint64_t j;
  uint64_t v56;
  int v57;
  uint64_t v58;
  int v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  unint64_t *v64;
  unint64_t *v65;
  unint64_t v66;
  char *v67;
  const char *v68;
  size_t v69;
  unint64_t v70;
  unint64_t v71;
  unint64_t v72;
  uint64_t v73;
  unint64_t v74;
  char *v75;
  const char *v76;
  uint64_t v77;
  unsigned int v78;
  unsigned int v79;
  uint64_t v80;
  int v81;
  uint64_t v82;
  uint64_t v83;
  const char **v84;
  uint64_t v85;
  unint64_t v86;
  char *v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  const char *v92;
  uint64_t v93;
  char v94;
  unint64_t *v95;
  double v96;
  uint64_t *result;
  uint64_t v98;
  uint64_t v99;
  re::RenderGraphFile *v100;
  uint64_t v101[2];
  char v102[8];
  uint64_t (***v103)(_QWORD);
  char *v104;
  re::DynamicString *v105;
  __int128 v106;
  __int128 v107;
  unsigned int v108;
  uint64_t v109;
  __int128 v110;
  __int128 v111;
  int v112;
  uint64_t v113;
  _OWORD v114[2];
  int v115;
  uint64_t v116;
  _OWORD v117[2];
  int v118;
  uint64_t v119;
  _OWORD v120[2];
  int v121;
  uint64_t v122;
  uint64_t *v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  char v127;
  unint64_t v128;
  __int128 v129;
  unint64_t *v130;
  uint64_t v131;

  v131 = *MEMORY[0x24BDAC8D0];
  v127 = 1;
  v124 = 0;
  v125 = 0;
  v126 = 0;
  re::DynamicString::setCapacity(&v123, 0);
  if ((*((_BYTE *)this + 16) & 1) != 0)
    v4 = (const char *)*((_QWORD *)this + 3);
  else
    v4 = (char *)this + 17;
  re::DynamicString::appendf((re::DynamicString *)&v123, "RenderGraph (%s) Errors: ", v4);
  v121 = 0;
  memset(v120, 0, sizeof(v120));
  v122 = 0x7FFFFFFFLL;
  v118 = 0;
  memset(v117, 0, sizeof(v117));
  v119 = 0x7FFFFFFFLL;
  v115 = 0;
  memset(v114, 0, sizeof(v114));
  v116 = 0x7FFFFFFFLL;
  v112 = 0;
  v110 = 0u;
  v111 = 0u;
  v113 = 0x7FFFFFFFLL;
  v108 = 0;
  v106 = 0u;
  v107 = 0u;
  v109 = 0x7FFFFFFFLL;
  v6 = *((_QWORD *)this + 7);
  if (v6)
  {
    v7 = *((_QWORD *)this + 9);
    v8 = v7 + 160 * v6;
    do
    {
      v128 = *(_QWORD *)v7 >> 1;
      re::HashSetBase<unsigned long long,unsigned long long,re::internal::ValueAsKey<unsigned long long>,re::PrecalculatedHash,re::EqualTo<unsigned long long>,false,false>::add((uint64_t)v120, &v128);
      v9 = *(_QWORD *)(v7 + 136);
      if (v9)
      {
        v10 = *(const char **)(v7 + 152);
        v11 = 136 * v9;
        do
        {
          re::RenderGraphFile::fillConnectionHashes(*(re::RenderGraphFile **)(v7 + 8), v10, v5);
          v10 += 136;
          v11 -= 136;
        }
        while (v11);
      }
      v7 += 160;
    }
    while (v7 != v8);
  }
  v12 = *((_QWORD *)this + 12);
  if (v12)
  {
    v13 = *((_QWORD *)this + 14);
    v14 = v13 + 88 * v12;
    do
    {
      v128 = *(_QWORD *)v13 >> 1;
      re::HashSetBase<unsigned long long,unsigned long long,re::internal::ValueAsKey<unsigned long long>,re::PrecalculatedHash,re::EqualTo<unsigned long long>,false,false>::add((uint64_t)v117, &v128);
      v15 = *(_QWORD *)(v13 + 64);
      if (v15)
      {
        v16 = *(const char **)(v13 + 80);
        v17 = 136 * v15;
        do
        {
          re::RenderGraphFile::fillConnectionHashes(*(re::RenderGraphFile **)(v13 + 8), v16, v5);
          v16 += 136;
          v17 -= 136;
        }
        while (v17);
      }
      v13 += 88;
    }
    while (v13 != v14);
  }
  v98 = a2;
  v104 = &v127;
  v105 = (re::DynamicString *)&v123;
  v18 = *((_QWORD *)this + 22);
  if (v18)
  {
    v19 = (const char **)(*((_QWORD *)this + 24) + 24);
    v20 = 56 * v18;
    do
    {
      v21 = (unint64_t)*(v19 - 1) >> 1;
      if (!re::HashSetBase<unsigned long long,unsigned long long,re::internal::ValueAsKey<unsigned long long>,re::PrecalculatedHash,re::EqualTo<unsigned long long>,false,false>::containsKey((uint64_t)v120, v21)&& !re::HashSetBase<unsigned long long,unsigned long long,re::internal::ValueAsKey<unsigned long long>,re::PrecalculatedHash,re::EqualTo<unsigned long long>,false,false>::containsKey((uint64_t)v117, v21))
      {
        v22 = v104;
        if (!*v104)
        {
          re::DynamicString::append(v105, "\n", 1uLL);
          v22 = v104;
        }
        *v22 = 0;
        re::DynamicString::appendf((re::DynamicString *)&v123, "Input defined with no matching target or buffer (%s).", *v19);
      }
      v19 += 7;
      v20 -= 56;
    }
    while (v20);
  }
  v100 = this;
  v23 = *((_QWORD *)this + 17);
  if (v23)
  {
    v24 = 0;
    v25 = 0;
    v26 = 0;
    v27 = 0;
    v28 = 0;
    v29 = *((_QWORD *)v100 + 19);
    v30 = v29 + 16 * v23;
    v99 = 0;
    while (1)
    {
      re::RenderGraphNodeRegistry::registryItem((os_unfair_lock_s *)re::RenderGraphNodeRegistry::m_instance, *(_QWORD *)v29, (uint64_t)v102);
      if (!v102[0])
      {
        v39 = v104;
        if (!*v104)
        {
          re::DynamicString::append(v105, "\n", 1uLL);
          v39 = v104;
        }
        *v39 = 0;
        v40 = (char *)v100 + 17;
        if ((*((_BYTE *)v100 + 16) & 1) != 0)
          v40 = (const char *)*((_QWORD *)v100 + 3);
        re::DynamicString::appendf((re::DynamicString *)&v123, "Node found with unregistered type in RenderGraph %s. Check log for error \"Skipping unknown polymorphic type.\" to find type name.", v40);
        goto LABEL_57;
      }
      v31 = (unint64_t *)operator new(0x30uLL);
      *v31 = (unint64_t)&off_24ED37A68;
      v31[1] = (unint64_t)v120;
      v31[2] = (unint64_t)&v104;
      v31[3] = (unint64_t)&v123;
      v31[4] = v29;
      v31[5] = (unint64_t)v117;
      v130 = v31;
      v32 = *(_QWORD *)(v29 + 8);
      if (v32)
      {
        if (*(_QWORD *)(v32 + 16))
        {
          v33 = (_QWORD *)(**v103)(v103);
          re::IntrospectionWalker::walk(v33, *(const re::IntrospectionBase ***)(v29 + 8), (uint64_t)&v128);
          v34 = *(char **)(*(_QWORD *)(v29 + 8) + 16);
          if (v34)
          {
            v35 = *v34;
            if (*v34)
            {
              v36 = v34[1];
              if (v36)
              {
                v37 = (unsigned __int8 *)(v34 + 2);
                do
                {
                  v35 = 31 * v35 + v36;
                  v38 = *v37++;
                  v36 = v38;
                }
                while (v38);
              }
            }
          }
          else
          {
            v35 = 0;
          }
          v101[0] = 2 * v35;
          v101[1] = (uint64_t)v34;
          re::HashSetBase<re::StringID,re::StringID,re::internal::ValueAsKey<re::StringID>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::add((uint64_t)v114, v101);
          re::StringID::destroyString((re::StringID *)v101);
          v45 = v130;
          if (v130 == &v128)
          {
            v45 = &v128;
            v46 = 4;
LABEL_56:
            (*(void (**)(void))(*v45 + 8 * v46))();
          }
          else if (v130)
          {
            v46 = 5;
            goto LABEL_56;
          }
LABEL_57:
          v47 = *(_QWORD *)(v29 + 8);
          if (v28)
          {
            v48 = 0x94D049BB133111EBLL
                * ((0xBF58476D1CE4E5B9 * (v47 ^ (v47 >> 30))) ^ ((0xBF58476D1CE4E5B9 * (v47 ^ (v47 >> 30))) >> 27));
            for (i = *(unsigned int *)(v24 + 4 * ((v48 ^ (v48 >> 31)) % v28));
                  (_DWORD)i != 0x7FFFFFFF;
                  LODWORD(i) = *(_DWORD *)(v27 + 24 * i + 8) & 0x7FFFFFFF)
            {
              if (*(_QWORD *)(v27 + 24 * i + 16) == v47)
              {
                v50 = v104;
                if (!*v104)
                {
                  re::DynamicString::append(v105, "\n", 1uLL);
                  v50 = v104;
                }
                *v50 = 0;
                v51 = (char *)v100 + 17;
                if ((*((_BYTE *)v100 + 16) & 1) != 0)
                  v51 = (const char *)*((_QWORD *)v100 + 3);
                re::DynamicString::appendf((re::DynamicString *)&v123, "Found redundant RenderGraphNode pointer in RenderGraph %s.", v51);
                v47 = *(_QWORD *)(v29 + 8);
                break;
              }
            }
          }
          v52 = 0x94D049BB133111EBLL
              * ((0xBF58476D1CE4E5B9 * (v47 ^ (v47 >> 30))) ^ ((0xBF58476D1CE4E5B9 * (v47 ^ (v47 >> 30))) >> 27));
          v53 = v52 ^ (v52 >> 31);
          if (v28)
          {
            v54 = v53 % v28;
            for (j = *(unsigned int *)(v24 + 4 * v54);
                  (_DWORD)j != 0x7FFFFFFF;
                  LODWORD(j) = *(_DWORD *)(v27 + 24 * j + 8) & 0x7FFFFFFF)
            {
              if (*(_QWORD *)(v27 + 24 * j + 16) == v47)
                goto LABEL_79;
            }
          }
          else
          {
            v54 = 0;
          }
          v56 = v113;
          if ((_DWORD)v113 == 0x7FFFFFFF)
          {
            v57 = v26;
            if ((_DWORD)v26 == v28)
            {
              re::HashSetBase<re::RenderGraphNode *,re::RenderGraphNode *,re::internal::ValueAsKey<re::RenderGraphNode *>,re::Hash<re::RenderGraphNode *>,re::EqualTo<re::RenderGraphNode *>,true,false>::setCapacity((uint64_t)&v110, 2 * v25);
              v28 = DWORD2(v111);
              v57 = v112;
              v54 = v53 % DWORD2(v111);
              v47 = *(_QWORD *)(v29 + 8);
              v27 = v111;
              v99 = *((_QWORD *)&v110 + 1);
            }
            v58 = (v57 + 1);
            v112 = v58;
            v56 = v26;
            v59 = *(_DWORD *)(v27 + 24 * v26 + 8);
            v24 = v99;
          }
          else
          {
            v59 = *(_DWORD *)(v27 + 24 * v113 + 8);
            LODWORD(v113) = v59 & 0x7FFFFFFF;
            v58 = v26;
            LODWORD(v26) = v56;
          }
          v60 = 3 * v56;
          *(_DWORD *)(v27 + 8 * v60 + 8) = v59 | 0x80000000;
          v27 = v111;
          v61 = v111 + 8 * v60;
          *(_DWORD *)(v61 + 8) = *(_DWORD *)(v61 + 8) & 0x80000000 | *(_DWORD *)(v24 + 4 * v54);
          *(_QWORD *)v61 = v53;
          *(_QWORD *)(v61 + 16) = v47;
          *(_DWORD *)(v24 + 4 * v54) = v26;
          v25 = ++HIDWORD(v111);
          ++HIDWORD(v113);
          v26 = v58;
          goto LABEL_79;
        }
        v42 = v104;
        if (!*v104)
        {
          re::DynamicString::append(v105, "\n", 1uLL);
          v42 = v104;
        }
        *v42 = 0;
        re::DynamicString::appendf((re::DynamicString *)&v123, "Rendergraph node in file %s found with no name set - please set a valid name");
      }
      else
      {
        v41 = v104;
        if (!*v104)
        {
          re::DynamicString::append(v105, "\n", 1uLL);
          v41 = v104;
        }
        *v41 = 0;
        re::DynamicString::appendf((re::DynamicString *)&v123, "Rendergraph node found with no data");
      }
      v43 = v130;
      if (v130 == &v128)
        break;
      if (v130)
      {
        v44 = 5;
LABEL_50:
        (*(void (**)(void))(*v43 + 8 * v44))();
      }
LABEL_79:
      v29 += 16;
      if (v29 == v30)
        goto LABEL_80;
    }
    v43 = &v128;
    v44 = 4;
    goto LABEL_50;
  }
LABEL_80:
  v62 = *((_QWORD *)v100 + 37);
  if (v62)
  {
    v63 = 0;
    v64 = (unint64_t *)*((_QWORD *)v100 + 39);
    v65 = &v64[v62];
    do
    {
      v66 = *v64;
      (*(void (**)(unint64_t *__return_ptr, unint64_t, _OWORD *, _OWORD *, _OWORD *))(*(_QWORD *)*v64 + 16))(&v128, *v64, v120, v117, v114);
      if (!(_BYTE)v128)
      {
        v67 = v104;
        if (!*v104)
        {
          re::DynamicString::append(v105, "\n", 1uLL);
          v67 = v104;
        }
        *v67 = 0;
        if ((BYTE8(v129) & 1) != 0)
          v68 = (const char *)v130;
        else
          v68 = (char *)&v129 + 9;
        v69 = strlen(v68);
        re::DynamicString::append((re::DynamicString *)&v123, v68, v69);
      }
      v70 = DWORD2(v107);
      v71 = 0x94D049BB133111EBLL
          * ((0xBF58476D1CE4E5B9 * (v66 ^ (v66 >> 30))) ^ ((0xBF58476D1CE4E5B9 * (v66 ^ (v66 >> 30))) >> 27));
      v72 = v71 ^ (v71 >> 31);
      if (DWORD2(v107))
      {
        v73 = *(unsigned int *)(v63 + 4 * (v72 % DWORD2(v107)));
        if ((_DWORD)v73 != 0x7FFFFFFF)
        {
          while (*(_QWORD *)(v107 + 24 * v73 + 16) != v66)
          {
            LODWORD(v73) = *(_DWORD *)(v107 + 24 * v73 + 8) & 0x7FFFFFFF;
            if ((_DWORD)v73 == 0x7FFFFFFF)
              goto LABEL_100;
          }
          v75 = v104;
          if (!*v104)
          {
            re::DynamicString::append(v105, "\n", 1uLL);
            v75 = v104;
          }
          *v75 = 0;
          v76 = (char *)v100 + 17;
          if ((*((_BYTE *)v100 + 16) & 1) != 0)
            v76 = (const char *)*((_QWORD *)v100 + 3);
          re::DynamicString::appendf((re::DynamicString *)&v123, "Found redundant RenderGraphSpecifyOperationBase pointer in RenderGraph %s.", v76);
        }
LABEL_100:
        v74 = (v72 % v70);
        v63 = *((_QWORD *)&v106 + 1);
        v77 = *(unsigned int *)(*((_QWORD *)&v106 + 1) + 4 * (v72 % v70));
        if ((_DWORD)v77 != 0x7FFFFFFF)
        {
          while (*(_QWORD *)(v107 + 24 * v77 + 16) != v66)
          {
            LODWORD(v77) = *(_DWORD *)(v107 + 24 * v77 + 8) & 0x7FFFFFFF;
            if ((_DWORD)v77 == 0x7FFFFFFF)
              goto LABEL_103;
          }
          goto LABEL_109;
        }
      }
      else
      {
        v74 = 0;
      }
LABEL_103:
      v78 = v109;
      if ((_DWORD)v109 == 0x7FFFFFFF)
      {
        v78 = v108;
        v79 = v108;
        if (v108 == (_DWORD)v70)
        {
          re::HashSetBase<re::RenderGraphSpecifyOperationBase *,re::RenderGraphSpecifyOperationBase *,re::internal::ValueAsKey<re::RenderGraphSpecifyOperationBase *>,re::Hash<re::RenderGraphSpecifyOperationBase *>,re::EqualTo<re::RenderGraphSpecifyOperationBase *>,true,false>::setCapacity((uint64_t)&v106, 2 * HIDWORD(v107));
          v79 = v108;
          v74 = v72 % DWORD2(v107);
        }
        v108 = v79 + 1;
        v80 = v107;
        v81 = *(_DWORD *)(v107 + 24 * v78 + 8);
      }
      else
      {
        v80 = v107;
        v81 = *(_DWORD *)(v107 + 24 * v109 + 8);
        LODWORD(v109) = v81 & 0x7FFFFFFF;
      }
      v82 = v80 + 24 * v78;
      *(_DWORD *)(v82 + 8) = v81 | 0x80000000;
      v63 = *((_QWORD *)&v106 + 1);
      *(_DWORD *)(v82 + 8) = *(_DWORD *)(*((_QWORD *)&v106 + 1) + 4 * v74) | 0x80000000;
      *(_QWORD *)v82 = v72;
      *(_QWORD *)(v82 + 16) = v66;
      *(_DWORD *)(v63 + 4 * v74) = v78;
      ++HIDWORD(v107);
      ++HIDWORD(v109);
LABEL_109:
      if (!(_BYTE)v128 && (_QWORD)v129 && (BYTE8(v129) & 1) != 0)
        (*(void (**)(void))(*(_QWORD *)v129 + 40))();
      ++v64;
    }
    while (v64 != v65);
  }
  v83 = *((_QWORD *)v100 + 32);
  if (v83)
  {
    v84 = (const char **)(*((_QWORD *)v100 + 34) + 24);
    v85 = 48 * v83;
    do
    {
      v86 = (unint64_t)*(v84 - 1) >> 1;
      if (!re::HashSetBase<unsigned long long,unsigned long long,re::internal::ValueAsKey<unsigned long long>,re::PrecalculatedHash,re::EqualTo<unsigned long long>,false,false>::containsKey((uint64_t)v120, v86)&& !re::HashSetBase<unsigned long long,unsigned long long,re::internal::ValueAsKey<unsigned long long>,re::PrecalculatedHash,re::EqualTo<unsigned long long>,false,false>::containsKey((uint64_t)v117, v86))
      {
        v87 = v104;
        if (!*v104)
        {
          re::DynamicString::append(v105, "\n", 1uLL);
          v87 = v104;
        }
        *v87 = 0;
        re::DynamicString::appendf((re::DynamicString *)&v123, "Output defined with no matching target or buffer (%s).", *v84);
      }
      v84 += 6;
      v85 -= 48;
    }
    while (v85);
  }
  v88 = *((_QWORD *)v100 + 42);
  if (v88)
  {
    v89 = *((_QWORD *)v100 + 44);
    v90 = v89 + 56 * v88;
    do
    {
      v91 = *(_QWORD *)(v89 + 32);
      if (v91)
      {
        v92 = *(const char **)(v89 + 48);
        v93 = 136 * v91;
        do
        {
          re::RenderGraphFile::fillConnectionHashes(*(re::RenderGraphFile **)(v89 + 8), v92, v5);
          v92 += 136;
          v93 -= 136;
        }
        while (v93);
      }
      v89 += 56;
    }
    while (v89 != v90);
  }
  if (v127)
  {
    v94 = 1;
  }
  else
  {
    re::DynamicString::DynamicString((re::DynamicString *)&v128, (const re::DynamicString *)&v123);
    v94 = 0;
    v95 = v130;
    *(_QWORD *)(v98 + 8) = v128;
    *(_QWORD *)(v98 + 32) = v95;
    *(_OWORD *)(v98 + 16) = v129;
  }
  *(_BYTE *)v98 = v94;
  re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)&v106);
  re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)&v110);
  re::HashSetBase<re::StringID,re::StringID,re::internal::ValueAsKey<re::StringID>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::deinit((uint64_t *)v114);
  re::HashSetBase<unsigned long long,unsigned long long,re::internal::ValueAsKey<unsigned long long>,re::PrecalculatedHash,re::EqualTo<unsigned long long>,false,false>::deinit((uint64_t *)v117);
  v96 = re::HashSetBase<unsigned long long,unsigned long long,re::internal::ValueAsKey<unsigned long long>,re::PrecalculatedHash,re::EqualTo<unsigned long long>,false,false>::deinit((uint64_t *)v120);
  result = v123;
  if (v123)
  {
    if ((v124 & 1) != 0)
      return (uint64_t *)(*(uint64_t (**)(double))(*v123 + 40))(v96);
  }
  return result;
}

void sub_22533FCB0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39)
{
  uint64_t v39;
  double v41;
  uint64_t v42;

  re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit(&a21);
  re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit(&a27);
  re::HashSetBase<re::StringID,re::StringID,re::internal::ValueAsKey<re::StringID>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::deinit(&a33);
  re::HashSetBase<unsigned long long,unsigned long long,re::internal::ValueAsKey<unsigned long long>,re::PrecalculatedHash,re::EqualTo<unsigned long long>,false,false>::deinit(&a39);
  v41 = re::HashSetBase<unsigned long long,unsigned long long,re::internal::ValueAsKey<unsigned long long>,re::PrecalculatedHash,re::EqualTo<unsigned long long>,false,false>::deinit((uint64_t *)(v39 - 240));
  v42 = *(_QWORD *)(v39 - 184);
  if (v42)
  {
    if ((*(_BYTE *)(v39 - 176) & 1) != 0)
      (*(void (**)(uint64_t, _QWORD, double))(*(_QWORD *)v42 + 40))(v42, *(_QWORD *)(v39 - 168), v41);
  }
  _Unwind_Resume(a1);
}

uint64_t re::HashSetBase<unsigned long long,unsigned long long,re::internal::ValueAsKey<unsigned long long>,re::PrecalculatedHash,re::EqualTo<unsigned long long>,false,false>::add(uint64_t result, unint64_t *a2)
{
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v3 = result;
  v4 = *a2;
  v5 = *(unsigned int *)(result + 24);
  if ((_DWORD)v5)
  {
    v6 = v4 % v5;
    v7 = *(unsigned int *)(*(_QWORD *)(result + 8) + 4 * (v4 % v5));
    if ((_DWORD)v7 != 0x7FFFFFFF)
    {
      v8 = *(_QWORD *)(result + 16);
      if (*(_QWORD *)(v8 + 16 * v7 + 8) == v4)
        return result;
      while (1)
      {
        v7 = *(_DWORD *)(v8 + 16 * v7) & 0x7FFFFFFF;
        if ((_DWORD)v7 == 0x7FFFFFFF)
          break;
        if (*(_QWORD *)(v8 + 16 * v7 + 8) == v4)
          return result;
      }
    }
  }
  else
  {
    LODWORD(v6) = 0;
  }
  result = re::HashSetBase<unsigned long long,unsigned long long,re::internal::ValueAsKey<unsigned long long>,re::PrecalculatedHash,re::EqualTo<unsigned long long>,false,false>::addAsMove(result, v6, v4, a2);
  ++*(_DWORD *)(v3 + 40);
  return result;
}

BOOL re::HashSetBase<unsigned long long,unsigned long long,re::internal::ValueAsKey<unsigned long long>,re::PrecalculatedHash,re::EqualTo<unsigned long long>,false,false>::containsKey(uint64_t a1, unint64_t a2)
{
  unint64_t v2;
  uint64_t v3;
  _BOOL8 result;
  uint64_t v5;

  v2 = *(unsigned int *)(a1 + 24);
  if (!(_DWORD)v2)
    return 0;
  v3 = *(unsigned int *)(*(_QWORD *)(a1 + 8) + 4 * (a2 % v2));
  if ((_DWORD)v3 == 0x7FFFFFFF)
    return 0;
  v5 = *(_QWORD *)(a1 + 16);
  if (*(_QWORD *)(v5 + 16 * v3 + 8) == a2)
    return 1;
  do
  {
    v3 = *(_DWORD *)(v5 + 16 * v3) & 0x7FFFFFFF;
    result = (_DWORD)v3 != 0x7FFFFFFF;
  }
  while ((_DWORD)v3 != 0x7FFFFFFF && *(_QWORD *)(v5 + 16 * v3 + 8) != a2);
  return result;
}

__n128 re::RenderGraphFile::initRuntimeNodeSettings@<Q0>(re::RenderGraphFile *this@<X0>, uint64_t a2@<X8>)
{
  unint64_t v4;
  uint64_t v5;
  __n128 result;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t *v11;
  char **v12;
  _anonymous_namespace_ *v13;
  unint64_t v14;
  re::Allocator *v15;
  re::IntrospectionBase *v16;
  unint64_t v17;
  unint64_t v18;
  const re::IntrospectionBase *v19;
  char *v20;
  const re::IntrospectionBase **v21;
  re *v22;
  re::BindNode *v23;
  char *v24;
  __int128 v25;
  __int128 v26;
  char v27[8];
  uint64_t (***v28)(_QWORD);
  unsigned int v29;
  _QWORD v30[3];
  uint64_t v31;
  _QWORD v32[4];
  int v33;
  const char *v34;
  __int16 v35;
  int v36;
  __int16 v37;
  unint64_t v38;
  __int16 v39;
  unint64_t v40;
  __n128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  uint64_t v46;

  v46 = *MEMORY[0x24BDAC8D0];
  v4 = *((_QWORD *)this + 17);
  *((_QWORD *)this + 90) = v4;
  if (v4)
  {
    if (v4 >> 57)
    {
LABEL_33:
      re::internal::assertLog((re::internal *)6, v5, "assertion failure: '%s' (%s:line %i) Size overflow in FixedArray<T>::init(). Element size = %zu, count = %zu", "!overflow", "init", 324, 128, v4);
      _os_crash();
      __break(1u);
LABEL_34:
      re::internal::assertLog((re::internal *)4, v8, "assertion failure: '%s' (%s:line %i) Out of memory.", "m_data", "init", 327);
      _os_crash();
      __break(1u);
    }
    *((_QWORD *)this + 91) = v7;
    if (!v7)
      goto LABEL_34;
    v9 = v4 - 1;
    if (v4 != 1)
    {
      do
      {
        *(_OWORD *)(v7 + 100) = 0uLL;
        *(_OWORD *)(v7 + 88) = 0uLL;
        *(_OWORD *)(v7 + 72) = 0uLL;
        *(_OWORD *)v7 = 0uLL;
        *(_OWORD *)(v7 + 16) = 0uLL;
        *(_OWORD *)(v7 + 32) = 0uLL;
        *(_OWORD *)(v7 + 48) = 0uLL;
        *(_DWORD *)(v7 + 64) = 0;
        *(_QWORD *)(v7 + 116) = 0x7FFFFFFFLL;
        v7 += 128;
        --v9;
      }
      while (v9);
    }
    *(_OWORD *)(v7 + 100) = 0u;
    *(_OWORD *)(v7 + 88) = 0u;
    *(_OWORD *)(v7 + 72) = 0u;
    *(_OWORD *)v7 = 0u;
    *(_OWORD *)(v7 + 16) = 0u;
    *(_OWORD *)(v7 + 32) = 0u;
    *(_OWORD *)(v7 + 48) = 0u;
    *(_DWORD *)(v7 + 64) = 0;
    result = (__n128)0x7FFFFFFFuLL;
    *(_QWORD *)(v7 + 116) = 0x7FFFFFFFLL;
  }
  v30[1] = 0;
  v30[2] = 0;
  v30[0] = &re::PassthroughAssetSerialization::instance(void)::instance;
  v29 = 0;
  if (!*((_QWORD *)this + 17))
  {
LABEL_20:
    *(_BYTE *)a2 = 1;
    return result;
  }
  v10 = 0;
  while (1)
  {
    v11 = (uint64_t *)(*((_QWORD *)this + 19) + 16 * v10);
    v12 = (char **)(v11 + 1);
    if (!v11[1])
    {
      re::DynamicString::format((re::DynamicString *)"Invalid node data %p", (re::DynamicString *)&v41, v11);
      goto LABEL_25;
    }
    re::RenderGraphNodeRegistry::registryItem((os_unfair_lock_s *)re::RenderGraphNodeRegistry::m_instance, *v11, (uint64_t)v27);
    if (!v27[0])
    {
      if ((*((_BYTE *)this + 16) & 1) != 0)
        v24 = (char *)*((_QWORD *)this + 3);
      else
        v24 = (char *)this + 17;
      re::DynamicString::format((re::DynamicString *)"Node found with unregistered type in RenderGraph %s.", (re::DynamicString *)&v41, v24);
      result = v41;
      v26 = v42;
      *(_BYTE *)a2 = 0;
      *(__n128 *)(a2 + 8) = result;
      *(_OWORD *)(a2 + 24) = v26;
      return result;
    }
    v14 = (unint64_t)v28;
    v15 = (re::Allocator *)(**v28)(v28);
    v17 = v29;
    v18 = *((_QWORD *)this + 90);
    if (v18 <= v29)
    {
      v32[0] = 0;
      v44 = 0u;
      v45 = 0u;
      v42 = 0u;
      v43 = 0u;
      v41 = 0u;
      os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      v33 = 136315906;
      v34 = "operator[]";
      v35 = 1024;
      v36 = 468;
      v37 = 2048;
      v38 = v17;
      v39 = 2048;
      v40 = v18;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
LABEL_29:
      v32[0] = 0;
      v44 = 0u;
      v45 = 0u;
      v42 = 0u;
      v43 = 0u;
      v41 = 0u;
      os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      v33 = 136315906;
      v34 = "operator[]";
      v35 = 1024;
      v36 = 468;
      v37 = 2048;
      v38 = v17;
      v39 = 2048;
      v40 = v18;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
LABEL_30:
      v31 = 0;
      v44 = 0u;
      v45 = 0u;
      v42 = 0u;
      v43 = 0u;
      v41 = 0u;
      os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      v33 = 136315906;
      v34 = "operator[]";
      v35 = 1024;
      v36 = 468;
      v37 = 2048;
      v38 = v14;
      v39 = 2048;
      v40 = v17;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
LABEL_31:
      v31 = 0;
      v44 = 0u;
      v45 = 0u;
      v42 = 0u;
      v43 = 0u;
      v41 = 0u;
      os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      v33 = 136315906;
      v34 = "operator[]";
      v35 = 1024;
      v36 = 468;
      v37 = 2048;
      v38 = v14;
      v39 = 2048;
      v40 = v17;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
LABEL_32:
      v32[0] = 0;
      v44 = 0u;
      v45 = 0u;
      v42 = 0u;
      v43 = 0u;
      v41 = 0u;
      v4 = MEMORY[0x24BDACB70];
      os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      v33 = 136315906;
      v34 = "operator[]";
      v35 = 1024;
      v36 = 789;
      v37 = 2048;
      v38 = v14;
      v39 = 2048;
      v40 = v17;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
      goto LABEL_33;
    }
    *(_QWORD *)(*((_QWORD *)this + 91) + ((unint64_t)v29 << 7)) = v16;
    v19 = (const re::IntrospectionBase *)(**(uint64_t (***)(unint64_t))v14)(v14);
    v17 = v29;
    v18 = *((_QWORD *)this + 90);
    if (v18 <= v29)
      goto LABEL_29;
    v20 = *v12;
    v21 = *(const re::IntrospectionBase ***)(*((_QWORD *)this + 91) + ((unint64_t)v29 << 7));
    v41.n128_u64[1] = 0;
    *(_QWORD *)&v42 = v30;
      break;
    v22 = (re *)(**(uint64_t (***)(unint64_t))v14)(v14);
    v14 = v29;
    v17 = *((_QWORD *)this + 90);
    if (v17 <= v29)
      goto LABEL_30;
    re::makeBindNode(v22, *(const re::IntrospectionBase **)(*((_QWORD *)this + 91) + ((unint64_t)v29 << 7)), (uint64_t)v32);
    v14 = v29;
    v17 = *((_QWORD *)this + 90);
    if (v17 <= v29)
      goto LABEL_31;
    v23 = (re::BindNode *)(*((_QWORD *)this + 91) + ((unint64_t)v29 << 7) + 8);
    if (v23 != (re::BindNode *)v32)
      re::BindNode::move(v23, (re::BindNode *)v32);
    re::BindNode::deinit((re::BindNode *)v32);
    v14 = v29;
    v17 = *((_QWORD *)this + 17);
    if (v17 <= v29)
      goto LABEL_32;
    re::HashTable<re::StringID,unsigned int,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::add<unsigned int &>((uint64_t)this + 736, (StringID *)(*(_QWORD *)(*((_QWORD *)this + 19) + 16 * v29 + 8) + 8), &v29);
    v10 = ++v29;
    if (*((_QWORD *)this + 17) <= (unint64_t)v29)
      goto LABEL_20;
  }
  re::DynamicString::format((re::DynamicString *)"Failed to perform deep copy into the node cache of %s.", (re::DynamicString *)&v41, *((_QWORD *)*v12 + 2));
LABEL_25:
  result = v41;
  v25 = v42;
  *(_BYTE *)a2 = 0;
  *(__n128 *)(a2 + 8) = result;
  *(_OWORD *)(a2 + 24) = v25;
  return result;
}

void sub_225340634(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, ...)
{
  va_list va;

  va_start(va, a15);
  re::BindNode::deinit((re::BindNode *)va);
  _Unwind_Resume(a1);
}

double re::RenderGraphFile::initConnectionSourceDataList(_BOOL8 this)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  __n128 *v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  __n128 *v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unsigned int v22;
  uint64_t v23;
  uint64_t *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  __n128 *v28;
  uint64_t v29;
  unint64_t v30;
  unint64_t v32[2];
  _QWORD *v33;
  _OWORD v34[4];
  _OWORD v35[2];
  int v36;
  uint64_t v37;

  v1 = (_QWORD *)this;
  v36 = 0;
  memset(v35, 0, sizeof(v35));
  v37 = 0x7FFFFFFFLL;
  v2 = *(_QWORD *)(this + 56);
  if (v2)
  {
    v3 = *(_QWORD *)(this + 72);
    v4 = v3 + 160 * v2;
    do
    {
      v5 = *(_QWORD *)(v3 + 136);
      if (v5)
      {
        v6 = *(__n128 **)(v3 + 152);
        v7 = 136 * v5;
        do
        {
          v8 = v6[8].n128_u64[0];
          this = re::HashSetBase<unsigned long long,unsigned long long,re::internal::ValueAsKey<unsigned long long>,re::PrecalculatedHash,re::EqualTo<unsigned long long>,false,false>::containsKey((uint64_t)v35, v8);
          if (!this)
          {
            *(_QWORD *)&v34[0] = v8;
            re::HashSetBase<unsigned long long,unsigned long long,re::internal::ValueAsKey<unsigned long long>,re::PrecalculatedHash,re::EqualTo<unsigned long long>,false,false>::add((uint64_t)v35, (unint64_t *)v34);
            re::DynamicArray<re::RenderGraphDataStoreConnection>::add((_anonymous_namespace_ *)(v1 + 98), v6);
          }
          v6 = (__n128 *)((char *)v6 + 136);
          v7 -= 136;
        }
        while (v7);
      }
      v3 += 160;
    }
    while (v3 != v4);
  }
  v9 = v1[12];
  if (v9)
  {
    v10 = v1[14];
    v11 = v10 + 88 * v9;
    do
    {
      v12 = *(_QWORD *)(v10 + 64);
      if (v12)
      {
        v13 = *(__n128 **)(v10 + 80);
        v14 = 136 * v12;
        do
        {
          v15 = v13[8].n128_u64[0];
          this = re::HashSetBase<unsigned long long,unsigned long long,re::internal::ValueAsKey<unsigned long long>,re::PrecalculatedHash,re::EqualTo<unsigned long long>,false,false>::containsKey((uint64_t)v35, v15);
          if (!this)
          {
            *(_QWORD *)&v34[0] = v15;
            re::HashSetBase<unsigned long long,unsigned long long,re::internal::ValueAsKey<unsigned long long>,re::PrecalculatedHash,re::EqualTo<unsigned long long>,false,false>::add((uint64_t)v35, (unint64_t *)v34);
            re::DynamicArray<re::RenderGraphDataStoreConnection>::add((_anonymous_namespace_ *)(v1 + 98), v13);
          }
          v13 = (__n128 *)((char *)v13 + 136);
          v14 -= 136;
        }
        while (v14);
      }
      v10 += 88;
    }
    while (v10 != v11);
  }
  v16 = v1[42];
  memset(v34, 0, sizeof(v34));
  v17 = v1[42];
  if (v17)
  {
    v18 = (_QWORD *)v1[44];
    v19 = 56 * v17;
    do
    {
      v32[0] = *v18 >> 1;
      v33 = v18;
      v20 = re::HashBrown<void const*,unsigned long,re::Hash<void const*>,re::EqualTo<void const*>,void,false>::find(v34, v32[0]);
      if (v20 == -1)
        re::HashBrown<re::WeakStringID,re::RenderGraphDataNodeConnection const*,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,void,false>::internalAdd((_anonymous_namespace_ *)v34, v32, (uint64_t *)&v33);
      else
        *(_QWORD *)(*((_QWORD *)&v34[0] + 1) + 16 * v20 + 8) = v18;
      v18 += 7;
      v19 -= 56;
    }
    while (v19);
  }
  if (v1[17])
  {
    v21 = 0;
    v22 = 0;
    v23 = *((_QWORD *)&v34[0] + 1);
    do
    {
      v24 = (uint64_t *)(v1[19] + 16 * v21);
      re::RenderGraphNodeRegistry::registryItem((os_unfair_lock_s *)re::RenderGraphNodeRegistry::m_instance, *v24, (uint64_t)v32);
      v25 = re::HashBrown<void const*,unsigned long,re::Hash<void const*>,re::EqualTo<void const*>,void,false>::find(v34, *(_QWORD *)(v24[1] + 8) >> 1);
      if (v25 != -1)
      {
        v26 = *(_QWORD *)(v23 + 16 * v25 + 8);
        v27 = *(_QWORD *)(v26 + 32);
        if (v27)
        {
          v28 = *(__n128 **)(v26 + 48);
          v29 = 136 * v27;
          do
          {
            v30 = v28[8].n128_u64[0];
            if (!re::HashSetBase<unsigned long long,unsigned long long,re::internal::ValueAsKey<unsigned long long>,re::PrecalculatedHash,re::EqualTo<unsigned long long>,false,false>::containsKey((uint64_t)v35, v30))
            {
              v33 = (_QWORD *)v30;
              re::HashSetBase<unsigned long long,unsigned long long,re::internal::ValueAsKey<unsigned long long>,re::PrecalculatedHash,re::EqualTo<unsigned long long>,false,false>::add((uint64_t)v35, (unint64_t *)&v33);
              re::DynamicArray<re::RenderGraphDataStoreConnection>::add((_anonymous_namespace_ *)(v1 + 103), v28);
            }
            v28 = (__n128 *)((char *)v28 + 136);
            v29 -= 136;
          }
          while (v29);
        }
      }
      v21 = ++v22;
    }
    while (v1[17] > (unint64_t)v22);
  }
  re::HashBrown<re::WeakStringID,unsigned char,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<unsigned char>,false>::deinit((uint64_t)v34);
  return re::HashSetBase<unsigned long long,unsigned long long,re::internal::ValueAsKey<unsigned long long>,re::PrecalculatedHash,re::EqualTo<unsigned long long>,false,false>::deinit((uint64_t *)v35);
}

void sub_2253408E0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_list va;

  va_start(va, a13);
  re::HashSetBase<unsigned long long,unsigned long long,re::internal::ValueAsKey<unsigned long long>,re::PrecalculatedHash,re::EqualTo<unsigned long long>,false,false>::deinit((uint64_t *)va);
  _Unwind_Resume(a1);
}

__n128 re::DynamicArray<re::RenderGraphDataStoreConnection>::add(_anonymous_namespace_ *this, __n128 *a2)
{
  unint64_t v4;
  __n128 *v5;
  __n128 result;

  v4 = *((_QWORD *)this + 2);
  if (v4 >= *((_QWORD *)this + 1))
  {
    re::DynamicArray<re::RenderGraphDataStoreConnection>::growCapacity(this, v4 + 1);
    v4 = *((_QWORD *)this + 2);
  }
  v5 = (__n128 *)(*((_QWORD *)this + 4) + 136 * v4);
  re::DynamicArray<re::DynamicString>::DynamicArray((uint64_t)v5, (uint64_t *)a2);
  re::DynamicString::DynamicString((re::DynamicString *)&v5[2].n128_i8[8], (const re::DynamicString *)&a2[2].n128_i8[8]);
  re::DynamicArray<re::DynamicString>::DynamicArray((uint64_t)&v5[4].n128_i64[1], &a2[4].n128_i64[1]);
  result = a2[7];
  v5[8].n128_u64[0] = a2[8].n128_u64[0];
  v5[7] = result;
  ++*((_QWORD *)this + 2);
  ++*((_DWORD *)this + 6);
  return result;
}

BOOL re::RenderGraphFile::fillIndexTable(re *a1, uint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5)
{
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  re *v9;
  unint64_t v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  const char *v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  _BYTE *v19;
  const char **v20;
  uint64_t v21;
  uint64_t v22;
  char v23;
  uint64_t v24;
  uint64_t v25;
  const char *v26;
  int v28;
  uint64_t *v29;
  NSObject *v30;
  re *v35;
  int v36;
  uint64_t v37;
  char v38;
  uint8_t buf[16];
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  uint64_t v44;

  v5 = a5;
  v44 = *MEMORY[0x24BDAC8D0];
  if (a4 && a5)
  {
    v6 = a4;
    v7 = a3;
    v8 = a2;
    v9 = a1;
    v10 = 0;
    v11 = 0;
    v37 = a3 + 9;
    v35 = a1;
    while (2)
    {
      v12 = 0;
      switch(*(_DWORD *)(v5 + 16))
      {
        case 0:
        case 9:
          return v12 != 0;
        case 2:
          v13 = v7 + 32 * v10;
          if ((*(_BYTE *)(v13 + 8) & 1) != 0)
            v14 = *(const char **)(v13 + 16);
          else
            v14 = (const char *)(v37 + 32 * v10);
          if (v10 < (unint64_t)v9)
            goto LABEL_38;
          v42 = 0u;
          v43 = 0u;
          v40 = 0u;
          v41 = 0u;
          *(_OWORD *)buf = 0u;
          os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
          _os_log_send_and_compose_impl();
          _os_crash_msg();
          __break(1u);
LABEL_47:
          v42 = 0u;
          v43 = 0u;
          v40 = 0u;
          v41 = 0u;
          *(_OWORD *)buf = 0u;
          os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
          _os_log_send_and_compose_impl();
          _os_crash_msg();
          __break(1u);
          goto LABEL_48;
        case 3:
          v15 = v7 + 32 * v10;
          if ((*(_BYTE *)(v15 + 8) & 1) != 0)
            v14 = *(const char **)(v15 + 16);
          else
            v14 = (const char *)(v37 + 32 * v10);
          if (v10 >= (unint64_t)v9)
            goto LABEL_47;
          goto LABEL_38;
        case 4:
          v16 = v7 + 32 * v10;
          if ((*(_BYTE *)(v16 + 8) & 1) != 0)
            v14 = *(const char **)(v16 + 16);
          else
            v14 = (const char *)(v37 + 32 * v10);
          if (v10 >= (unint64_t)v9)
          {
LABEL_48:
            v42 = 0u;
            v43 = 0u;
            v40 = 0u;
            v41 = 0u;
            *(_OWORD *)buf = 0u;
            os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
            _os_log_send_and_compose_impl();
            _os_crash_msg();
            __break(1u);
            goto LABEL_49;
          }
LABEL_38:
          a1 = (re *)atoi(v14);
          *(_DWORD *)(v8 + 4 * v10) = (_DWORD)a1;
          v29 = (uint64_t *)(v5 + 48);
LABEL_39:
          v5 = *v29;
          v10 = (v11 + 1);
          if (v6 <= v10)
            goto LABEL_42;
          ++v11;
          v12 = *v29;
          if (!v5)
            return v12 != 0;
          continue;
        case 8:
          v36 = v11;
          v17 = 0;
          v18 = v7 + 32 * v10;
          v19 = (_BYTE *)(v18 + 8);
          v20 = (const char **)(v18 + 16);
          break;
        default:
          v30 = *re::graphicsLogObjects(a1);
          if (os_log_type_enabled(v30, OS_LOG_TYPE_DEFAULT))
          {
            *(_WORD *)buf = 0;
            _os_log_impl(&dword_224FE9000, v30, OS_LOG_TYPE_DEFAULT, "Connection source type isn't supported.", buf, 2u);
          }
          goto LABEL_45;
      }
      break;
    }
    do
    {
      v21 = *(unsigned int *)(v5 + 56);
      if (!(_DWORD)v21)
        break;
      v22 = 0;
      v23 = 0;
      v24 = *(_QWORD *)(v5 + 64);
LABEL_14:
      v38 = v23;
      do
      {
        v25 = *(_QWORD *)(v24 + 8 * v22);
        if (*(_DWORD *)v25 == 1)
        {
          v26 = (const char *)(v37 + 32 * v10);
          if ((*v19 & 1) != 0)
            v26 = *v20;
          a1 = (re *)strcmp(*(const char **)(v25 + 8), v26);
          if (!(_DWORD)a1)
          {
            v9 = v35;
            if (v10 < (unint64_t)v35)
            {
              v28 = v17 + v22;
              v8 = a2;
              v7 = a3;
              *(_DWORD *)(a2 + 4 * v10) = v28;
              v29 = (uint64_t *)(v25 + 16);
              v6 = a4;
              v11 = v36;
              goto LABEL_39;
            }
LABEL_49:
            v42 = 0u;
            v43 = 0u;
            v40 = 0u;
            v41 = 0u;
            *(_OWORD *)buf = 0u;
            os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
            _os_log_send_and_compose_impl();
            _os_crash_msg();
            __break(1u);
          }
          if (*(_DWORD *)(v25 + 40) == 3)
          {
            v5 = *(_QWORD *)(v25 + 16);
            v23 = 1;
            if (v21 - 1 != v22++)
              goto LABEL_14;
            goto LABEL_26;
          }
        }
        ++v22;
      }
      while (v21 != v22);
      if ((v38 & 1) == 0)
        break;
LABEL_26:
      v17 += v21;
    }
    while (v5);
LABEL_45:
    v12 = 0;
  }
  else
  {
LABEL_42:
    v12 = v5;
  }
  return v12 != 0;
}

uint64_t re::RenderGraphFile::getCachedConnection(re::RenderGraphFile *this, const re::IntrospectionBase *a2, const re::RenderGraphDataStoreConnection *a3, const re::RenderGraphData *a4, const re::IntrospectionStructure *a5)
{
  uint64_t *v8;
  uint64_t *v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  _anonymous_namespace_ *v13;
  int v14;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  uint64_t v19;
  char v20;

  v8 = (uint64_t *)((char *)this + 408);
  v9 = (uint64_t *)((char *)a3 + 120);
  v10 = re::HashTable<unsigned long,re::RenderGraphFile::ConnectionCacheInfo,re::Hash<unsigned long>,re::EqualTo<unsigned long>,true,false>::tryGet((uint64_t)this + 408, *((_QWORD *)a3 + 15));
  if (!v10)
  {
    v19 = 0;
    v17 = 0u;
    v18 = 0u;
    v16 = 0u;
    v20 = 1;
    v11 = *((_QWORD *)a3 + 2);
    v12 = *((_QWORD *)a3 + 11);
    *(_QWORD *)&v16 = a3;
    if (re::RenderGraphFile::fillIndexTable(*((re **)&v18 + 1), v19, *((_QWORD *)a3 + 4), *((_QWORD *)a3 + 2), (uint64_t)a2)&& re::RenderGraphFile::fillIndexTable((re *)v17, *((uint64_t *)&v17 + 1), *((_QWORD *)a3 + 13), *((_QWORD *)a3 + 11), (uint64_t)a4))
    {
      re::HashTable<unsigned long,re::RenderGraphFile::ConnectionCacheInfo,re::Hash<unsigned long>,re::EqualTo<unsigned long>,true,false>::add<re::RenderGraphFile::ConnectionCacheInfo&>(v8, v9, (uint64_t)&v16);
      v10 = re::HashTable<unsigned long,re::RenderGraphFile::ConnectionCacheInfo,re::Hash<unsigned long>,re::EqualTo<unsigned long>,true,false>::tryGet((uint64_t)v8, *v9);
      v14 = 1;
    }
    else
    {
      v10 = 0;
      v14 = 0;
    }
    if ((_QWORD)v18)
    {
      if (*((_QWORD *)&v18 + 1))
      {
        (*(void (**)(_QWORD))(*(_QWORD *)v18 + 40))(v18);
        *((_QWORD *)&v18 + 1) = 0;
        v19 = 0;
      }
      *(_QWORD *)&v18 = 0;
    }
    if (*((_QWORD *)&v16 + 1) && (_QWORD)v17)
      (*(void (**)(_QWORD))(**((_QWORD **)&v16 + 1) + 40))(*((_QWORD *)&v16 + 1));
    if (!v14)
      return 0;
  }
  return v10;
}

void sub_2253410E0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  re::RenderGraphFile::ConnectionCacheInfo::~ConnectionCacheInfo((re::RenderGraphFile::ConnectionCacheInfo *)&a9);
  _Unwind_Resume(a1);
}

uint64_t re::HashTable<unsigned long,re::RenderGraphFile::ConnectionCacheInfo,re::Hash<unsigned long>,re::EqualTo<unsigned long>,true,false>::tryGet(uint64_t a1, unint64_t a2)
{
  unint64_t v2;
  uint64_t v3;
  uint64_t v5;

  if (!*(_QWORD *)a1)
    return 0;
  v2 = 0x94D049BB133111EBLL
     * ((0xBF58476D1CE4E5B9 * (a2 ^ (a2 >> 30))) ^ ((0xBF58476D1CE4E5B9 * (a2 ^ (a2 >> 30))) >> 27));
  v3 = *(unsigned int *)(*(_QWORD *)(a1 + 8) + 4 * ((v2 ^ (v2 >> 31)) % *(unsigned int *)(a1 + 24)));
  if ((_DWORD)v3 == 0x7FFFFFFF)
    return 0;
  v5 = *(_QWORD *)(a1 + 16);
  if (*(_QWORD *)(v5 + 88 * v3 + 16) != a2)
  {
    while (1)
    {
      LODWORD(v3) = *(_DWORD *)(v5 + 88 * v3 + 8) & 0x7FFFFFFF;
      if ((_DWORD)v3 == 0x7FFFFFFF)
        break;
      if (*(_QWORD *)(v5 + 88 * v3 + 16) == a2)
        return v5 + 88 * v3 + 24;
    }
    return 0;
  }
  return v5 + 88 * v3 + 24;
}

uint64_t *re::HashTable<unsigned long,re::RenderGraphFile::ConnectionCacheInfo,re::Hash<unsigned long>,re::EqualTo<unsigned long>,true,false>::add<re::RenderGraphFile::ConnectionCacheInfo&>(uint64_t *result, uint64_t *a2, uint64_t a3)
{
  uint64_t *v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unsigned int v12;
  unsigned int v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  uint64_t v17;

  v5 = result;
  v6 = *a2;
  v7 = 0xBF58476D1CE4E5B9 * (*a2 ^ ((unint64_t)*a2 >> 30));
  v8 = (0x94D049BB133111EBLL * (v7 ^ (v7 >> 27))) ^ ((0x94D049BB133111EBLL * (v7 ^ (v7 >> 27))) >> 31);
  if (*result)
  {
    v9 = v8 % *((unsigned int *)result + 6);
    v10 = *(unsigned int *)(result[1] + 4 * v9);
    if ((_DWORD)v10 != 0x7FFFFFFF)
    {
      v11 = result[2];
      if (*(_QWORD *)(v11 + 88 * v10 + 16) == v6)
        return result;
      while (1)
      {
        LODWORD(v10) = *(_DWORD *)(v11 + 88 * v10 + 8) & 0x7FFFFFFF;
        if ((_DWORD)v10 == 0x7FFFFFFF)
          break;
        if (*(_QWORD *)(v11 + 88 * v10 + 16) == v6)
          return result;
      }
    }
  }
  else
  {
    LODWORD(v9) = 0;
  }
  v12 = *((_DWORD *)result + 9);
  if (v12 == 0x7FFFFFFF)
  {
    v12 = *((_DWORD *)result + 8);
    v13 = v12;
    if (v12 == *((_DWORD *)result + 6))
    {
      re::HashTable<unsigned long,re::RenderGraphFile::ConnectionCacheInfo,re::Hash<unsigned long>,re::EqualTo<unsigned long>,true,false>::setCapacity((uint64_t)result, 2 * *((_DWORD *)result + 7));
      LODWORD(v9) = v8 % *((unsigned int *)v5 + 6);
      v13 = *((_DWORD *)v5 + 8);
    }
    *((_DWORD *)v5 + 8) = v13 + 1;
    v14 = v5[2];
    v15 = *(_DWORD *)(v14 + 88 * v12 + 8);
  }
  else
  {
    v14 = result[2];
    v15 = *(_DWORD *)(v14 + 88 * v12 + 8);
    *((_DWORD *)result + 9) = v15 & 0x7FFFFFFF;
  }
  v16 = 88 * v12;
  *(_DWORD *)(v14 + v16 + 8) = v15 | 0x80000000;
  *(_DWORD *)(v5[2] + v16 + 8) = *(_DWORD *)(v5[2] + v16 + 8) & 0x80000000 | *(_DWORD *)(v5[1] + 4 * v9);
  *(_QWORD *)(v5[2] + v16) = v8;
  *(_QWORD *)(v5[2] + v16 + 16) = *a2;
  v17 = v5[2] + v16;
  *(_QWORD *)(v17 + 24) = *(_QWORD *)a3;
  re::FixedArray<unsigned int>::FixedArray((uint64_t *)(v17 + 32), a3 + 8);
  result = re::FixedArray<unsigned int>::FixedArray((uint64_t *)(v17 + 56), a3 + 32);
  *(_BYTE *)(v17 + 80) = *(_BYTE *)(a3 + 56);
  *(_DWORD *)(v5[1] + 4 * v9) = v12;
  ++*((_DWORD *)v5 + 7);
  ++*((_DWORD *)v5 + 10);
  return result;
}

void re::RenderGraphFile::ConnectionCacheInfo::~ConnectionCacheInfo(re::RenderGraphFile::ConnectionCacheInfo *this)
{
  uint64_t v2;
  uint64_t v3;

  v2 = *((_QWORD *)this + 4);
  if (v2)
  {
    if (*((_QWORD *)this + 5))
    {
      (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v2 + 40))(v2, *((_QWORD *)this + 6));
      *((_QWORD *)this + 5) = 0;
      *((_QWORD *)this + 6) = 0;
    }
    *((_QWORD *)this + 4) = 0;
  }
  v3 = *((_QWORD *)this + 1);
  if (v3)
  {
    if (*((_QWORD *)this + 2))
    {
      (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v3 + 40))(v3, *((_QWORD *)this + 3));
      *((_QWORD *)this + 2) = 0;
      *((_QWORD *)this + 3) = 0;
    }
    *((_QWORD *)this + 1) = 0;
  }
}

uint64_t re::RenderGraphFile::hashConnection(re::RenderGraphFile *this, re::RenderFrame *a2, uint64_t a3, const re::RenderGraphDataStoreConnection *a4, uint64_t a5)
{
  _anonymous_namespace_ *v5;
  _anonymous_namespace_ **v11;
  _anonymous_namespace_ **v12;
  uint64_t result;
  uint64_t v14;
  uint64_t *v15;
  uint64_t *v16;
  uint64_t v17;
  unint64_t v18;
  _BOOL4 v19;
  uint64_t v21;
  const re::IntrospectionBase *v22;
  const void *v23;
  char v24;
  _anonymous_namespace_ *v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  uint64_t v29;
  char v30;

  *(_QWORD *)&v26 = *(_QWORD *)(a5 + 112);
  v11 = (_anonymous_namespace_ **)re::HashTable<unsigned long,re::IntrospectionStructure const*,re::PrecalculatedHash,re::EqualTo<unsigned long>,false,false>::tryGet(a3 + 208, (uint64_t *)&v26);
  v12 = v11;
  if (v11)
    v5 = *v11;
  result = re::RenderGraphDataStore::tryGetByTypeNameHash((re::RenderGraphDataStore *)(a3 + 32), (uint64_t)a4, *(_QWORD *)(a5 + 112));
  if (!v12)
    goto LABEL_23;
  v14 = result;
  if (!result)
    goto LABEL_23;
  v15 = (uint64_t *)((char *)a2 + 456);
  v16 = (uint64_t *)(a5 + 128);
  result = re::HashTable<unsigned long,re::RenderGraphFile::ConnectionCacheInfo,re::Hash<unsigned long>,re::EqualTo<unsigned long>,true,false>::tryGet((uint64_t)a2 + 456, *(_QWORD *)(a5 + 128));
  v17 = result;
  if (!result)
  {
    v29 = 0;
    v27 = 0u;
    v28 = 0u;
    v26 = 0u;
    v30 = 1;
    v18 = *(_QWORD *)(a5 + 88);
    *(_QWORD *)&v26 = a5;
    v19 = re::RenderGraphFile::fillIndexTable((re *)v27, *((uint64_t *)&v27 + 1), *(_QWORD *)(a5 + 104), *(_QWORD *)(a5 + 88), (uint64_t)v5);
    if (v19)
    {
      re::HashTable<unsigned long,re::RenderGraphFile::ConnectionCacheInfo,re::Hash<unsigned long>,re::EqualTo<unsigned long>,true,false>::add<re::RenderGraphFile::ConnectionCacheInfo&>(v15, v16, (uint64_t)&v26);
      v17 = re::HashTable<unsigned long,re::RenderGraphFile::ConnectionCacheInfo,re::Hash<unsigned long>,re::EqualTo<unsigned long>,true,false>::tryGet((uint64_t)v15, *v16);
    }
    else
    {
      v17 = 0;
    }
    if ((_QWORD)v28)
    {
      if (*((_QWORD *)&v28 + 1))
      {
        (*(void (**)(void))(*(_QWORD *)v28 + 40))();
        *((_QWORD *)&v28 + 1) = 0;
        v29 = 0;
      }
      *(_QWORD *)&v28 = 0;
    }
    result = *((_QWORD *)&v26 + 1);
    if (*((_QWORD *)&v26 + 1) && (_QWORD)v27)
      result = (*(uint64_t (**)(void))(**((_QWORD **)&v26 + 1) + 40))();
    if (!v17 || !v19)
      goto LABEL_23;
  }
  if (*(_BYTE *)(v17 + 56))
  {
    v21 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v14 + 16))(v14);
    v25 = v5;
    *(_QWORD *)&v26 = v21;
    result = re::scanForCopy(v17 + 8, (uint64_t *)&v26, &v25);
    if ((_DWORD)result)
    {
      *((_QWORD *)this + 1) = result;
      v24 = 1;
    }
    else
    {
      v24 = 0;
    }
    *(_BYTE *)this = v24;
  }
  else
  {
LABEL_23:
    *(_BYTE *)this = 0;
  }
  return result;
}

void sub_2253415F4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  re::RenderGraphFile::ConnectionCacheInfo::~ConnectionCacheInfo((re::RenderGraphFile::ConnectionCacheInfo *)va);
  _Unwind_Resume(a1);
}

unint64_t `anonymous namespace'::hashMembers(_anonymous_namespace_ *this, re::RenderFrame *a2, const re::IntrospectionBase *a3, const void *a4)
{
  _anonymous_namespace_ *v5;
  size_t v6;
  NSObject *v7;
  const char *v8;
  uint8_t *v9;
  uint64_t v10;
  int v11;
  uint64_t v13;
  int v14;
  int v16;
  unint64_t v18;
  char *v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  int v23;
  char *v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  NSObject *v28;
  NSObject *v29;
  const re::IntrospectionBase *v30;
  const void *v31;
  uint64_t v32;
  _OWORD *v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  unint64_t v37;
  _QWORD __dst[2];
  _OWORD buf[3];
  uint64_t v41;
  _QWORD *v42;
  uint64_t v43;

  v43 = *MEMORY[0x24BDAC8D0];
  v5 = this;
  switch(*((_DWORD *)this + 4))
  {
    case 0:
    case 9:
      *(_QWORD *)&buf[0] = 0;
      v6 = *((unsigned int *)this + 5);
      if (v6 >= 9)
      {
        v7 = *re::graphicsLogObjects(this);
        if (!os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
          return 0;
        LOWORD(__dst[0]) = 0;
        v8 = "Connection hashing only supports basic types of up to 64 bits.";
        v9 = (uint8_t *)__dst;
        goto LABEL_7;
      }
      memcpy(buf, a2, v6);
      v36 = 0x94D049BB133111EBLL
          * ((0xBF58476D1CE4E5B9 * (*(_QWORD *)&buf[0] ^ (*(_QWORD *)&buf[0] >> 30))) ^ ((0xBF58476D1CE4E5B9
                                                                                          * (*(_QWORD *)&buf[0] ^ (*(_QWORD *)&buf[0] >> 30))) >> 27));
      return v36 ^ (v36 >> 31);
    case 2:
      v10 = *((_QWORD *)this + 6);
      v11 = *(_DWORD *)(v10 + 16);
      if (v11 != 9 && v11 != 0)
        return 0;
      LODWORD(v13) = *((_DWORD *)this + 16) * *(_DWORD *)(v10 + 20);
      if (!(_DWORD)v13)
        return 0;
      goto LABEL_28;
    case 3:
      v14 = *(_DWORD *)(*((_QWORD *)this + 6) + 16);
      if (v14 == 9 || v14 == 0)
      {
        v13 = (*(uint64_t (**)(_anonymous_namespace_ *, re::RenderFrame *, const re::IntrospectionBase *, const void *))(*(_QWORD *)this + 88))(this, a2, a3, a4)* *(int *)(*((_QWORD *)this + 6) + 20);
        if (v13)
          goto LABEL_28;
      }
      return 0;
    case 4:
      v16 = *(_DWORD *)(*((_QWORD *)this + 6) + 16);
      if (v16 != 9 && v16 != 0)
        return 0;
      v13 = (*(uint64_t (**)(_anonymous_namespace_ *, re::RenderFrame *, const re::IntrospectionBase *, const void *))(*(_QWORD *)this + 80))(this, a2, a3, a4)* *(int *)(*((_QWORD *)this + 6) + 20);
      if (!v13)
        return 0;
LABEL_28:
      MurmurHash3_x64_128((uint64_t)a2, v13, 0, (unint64_t *)buf);
      return (*((_QWORD *)&buf[0] + 1) - 0x61C8864680B583E9 + (*(_QWORD *)&buf[0] << 6) + (*(_QWORD *)&buf[0] >> 2)) ^ *(_QWORD *)&buf[0];
    case 6:
      v18 = *((_QWORD *)a2 + 1);
      if ((v18 & 1) != 0)
        v19 = (char *)*((_QWORD *)a2 + 2);
      else
        v19 = (char *)a2 + 9;
      if ((v18 & 1) != 0)
        v37 = v18 >> 1;
      else
        v37 = v18 >> 1;
      if (!v37)
        return 0;
      MurmurHash3_x64_128((uint64_t)v19, v37, 0, (unint64_t *)buf);
      return (*((_QWORD *)&buf[0] + 1) - 0x61C8864680B583E9 + (*(_QWORD *)&buf[0] << 6) + (*(_QWORD *)&buf[0] >> 2)) ^ *(_QWORD *)&buf[0];
    case 8:
      if (!*((_DWORD *)this + 14))
        return 0;
      v20 = 0;
      v21 = 0;
      break;
    default:
      v7 = *re::graphicsLogObjects(this);
      if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
      {
        LOWORD(buf[0]) = 0;
        v8 = "Connection source type isn't supported for hashing.";
        v9 = (uint8_t *)buf;
LABEL_7:
        _os_log_impl(&dword_224FE9000, v7, OS_LOG_TYPE_DEFAULT, v8, v9, 2u);
      }
      return 0;
  }
  do
  {
    v22 = *(_QWORD *)(*((_QWORD *)v5 + 8) + 8 * v20);
    if (*(_DWORD *)v22 != 1)
      goto LABEL_52;
    v23 = *(_DWORD *)(v22 + 40);
    v24 = (char *)a2 + *(int *)(v22 + 36);
    switch(v23)
    {
      case 3:
LABEL_37:
        v21 ^= (unint64_t)this + 64 * v21 + (v21 >> 2) - 0x61C8864680B583E9;
        break;
      case 1:
        v25 = *(_QWORD *)(v22 + 48);
        if (v25)
        {
          v26 = &v24[*(int *)(v22 + 64)];
          __dst[0] = 0;
          memcpy(__dst, v26, *(int *)(v25 + 20));
          v27 = __dst[0];
        }
        else
        {
          v29 = *re::graphicsLogObjects(this);
          if (os_log_type_enabled(v29, OS_LOG_TYPE_ERROR))
          {
            v35 = *(_QWORD *)(v22 + 8);
            LODWORD(buf[0]) = 136315138;
            *(_QWORD *)((char *)buf + 4) = v35;
            _os_log_error_impl(&dword_224FE9000, v29, OS_LOG_TYPE_ERROR, "Connection hashing failed to get array length for member '%s'.", (uint8_t *)buf, 0xCu);
          }
          v27 = 0;
        }
        re::IntrospectionCStyleArray::IntrospectionCStyleArray((re::IntrospectionCStyleArray *)buf, *(const re::IntrospectionBase **)(*(_QWORD *)(v22 + 16) + 48), v27);
        *(_QWORD *)&buf[0] = &off_24ED23640;
        v41 = 0;
        v33 = v42;
        if (v42)
        {
          v34 = *v42;
          if (*v42)
          {
            if ((v42[1] & 1) != 0)
              (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)v34 + 40))(*v42, v42[2]);
            *v33 = 0u;
            v33[1] = 0u;
          }
          (*(void (**)(uint64_t, _OWORD *))(*(_QWORD *)v34 + 40))(v34, v33);
          v42 = 0;
        }
        v21 ^= (v21 << 6) - 0x61C8864680B583E9 + (v21 >> 2) + v32;
        *(_QWORD *)&buf[0] = &off_24ED426B8;
        this = (_anonymous_namespace_ *)objc_destructInstance((char *)buf + 8);
        break;
      case 0:
        goto LABEL_37;
      default:
        v28 = *re::graphicsLogObjects(this);
        this = (_anonymous_namespace_ *)os_log_type_enabled(v28, OS_LOG_TYPE_DEFAULT);
        if ((_DWORD)this)
        {
          LOWORD(buf[0]) = 0;
          _os_log_impl(&dword_224FE9000, v28, OS_LOG_TYPE_DEFAULT, "Connection source type isn't supported for hashing.", (uint8_t *)buf, 2u);
        }
        break;
    }
LABEL_52:
    ++v20;
  }
  while (v20 < *((unsigned int *)v5 + 14));
  return v21;
}

void sub_225341AA4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  re::IntrospectionCStyleArray::~IntrospectionCStyleArray((re::IntrospectionCStyleArray *)va);
  _Unwind_Resume(a1);
}

uint64_t re::RenderGraphFile::connectionWalker(uint64_t result, uint64_t a2, uint64_t a3, const re::IntrospectionBase *a4, const re::IntrospectionBase **a5, uint64_t a6)
{
  unint64_t v6;
  const re::RenderGraphData *v7;
  unint64_t v10;
  uint64_t v11;
  re::RenderGraphDataStore *v12;
  unsigned int v13;
  const re::RenderGraphData **v14;
  unint64_t v15;
  const re::IntrospectionStructure *v16;
  uint64_t v17;
  char v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  re::RenderGraphFile *v24;
  const re::IntrospectionBase *v26;
  const re::IntrospectionBase **v27;
  const re::RenderGraphData *v28;
  _BYTE v29[12];
  __int16 v30;
  int v31;
  __int16 v32;
  unint64_t v33;
  __int16 v34;
  unint64_t v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  uint64_t v41;

  v24 = (re::RenderGraphFile *)result;
  v41 = *MEMORY[0x24BDAC8D0];
  if (*(_QWORD *)(a6 + 16))
  {
    v10 = 0;
    v11 = a2 + 208;
    v12 = (re::RenderGraphDataStore *)(a2 + 32);
    v13 = 1;
    while (1)
    {
      *(_QWORD *)&v36 = *(_QWORD *)(*(_QWORD *)(a6 + 32) + 136 * v10 + 112);
      v14 = (const re::RenderGraphData **)re::HashTable<unsigned long,re::IntrospectionStructure const*,re::PrecalculatedHash,re::EqualTo<unsigned long>,false,false>::tryGet(v11, (uint64_t *)&v36);
      if (v14)
        v7 = *v14;
      v15 = *(_QWORD *)(a6 + 16);
      if (v15 <= v10)
        break;
      v6 = v14 != 0;
      result = re::RenderGraphDataStore::tryGetByTypeNameHash(v12, a3, *(_QWORD *)(*(_QWORD *)(a6 + 32) + 136 * v10 + 112));
      v17 = result;
      v18 = v6 ^ 1;
      if (!result)
        v18 = 1;
      if ((v18 & 1) == 0)
      {
        v6 = *(_QWORD *)(a6 + 16);
        if (v6 <= v10)
          goto LABEL_18;
        result = re::RenderGraphFile::getCachedConnection(v24, a4, (const re::RenderGraphDataStoreConnection *)(*(_QWORD *)(a6 + 32) + 136 * v10), v7, v16);
        v19 = result;
        if (result)
        {
          if (*(_BYTE *)(result + 56))
          {
            *(_QWORD *)v29 = 0;
            v20 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v17 + 16))(v17);
            v28 = v7;
            *(_QWORD *)v29 = v20;
            v26 = a4;
            v27 = a5;
            result = re::scanForCopy(v19 + 8, (uint64_t *)v29, &v28);
            if ((_DWORD)result)
            {
              result = re::scanForCopy(v19 + 32, (uint64_t *)&v27, &v26);
              if ((_DWORD)result)
              {
                *((_QWORD *)&v36 + 1) = 0;
                *(_QWORD *)&v37 = 0;
                if ((result & 1) == 0)
                  goto LABEL_19;
              }
            }
          }
        }
      }
      v10 = v13;
      if (*(_QWORD *)(a6 + 16) <= (unint64_t)v13++)
        return result;
    }
    v28 = 0;
    v40 = 0u;
    v38 = 0u;
    v39 = 0u;
    v36 = 0u;
    v37 = 0u;
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    *(_DWORD *)v29 = 136315906;
    *(_QWORD *)&v29[4] = "operator[]";
    v30 = 1024;
    v31 = 797;
    v32 = 2048;
    v33 = v10;
    v34 = 2048;
    v35 = v15;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_18:
    v28 = 0;
    v40 = 0u;
    v38 = 0u;
    v39 = 0u;
    v36 = 0u;
    v37 = 0u;
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    *(_DWORD *)v29 = 136315906;
    *(_QWORD *)&v29[4] = "operator[]";
    v30 = 1024;
    v31 = 797;
    v32 = 2048;
    v33 = v10;
    v34 = 2048;
    v35 = v6;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_19:
    re::internal::assertLog((re::internal *)4, v21, "assertion failure: '%s' (%s:line %i) Failed to perform introspection deep copy when setting RenderGraphFile connections.", "copyResult", "connectionWalker", 704);
    _os_crash();
    __break(1u);
  }
  return result;
}

unint64_t re::RenderGraphFile::prepareFrame(re::RenderGraphFile *this, char *__s, char *a3, re::RenderFrame *a4)
{
  uint64_t v8;
  char v9;
  const char *v10;
  int v11;
  uint64_t v12;
  re::TextureAsset *v13;
  uint64_t v14;
  uint64_t v15;
  id v16;
  const re::IntrospectionStructure *v17;
  unint64_t v18;
  unsigned int v19;
  unsigned __int8 v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  _anonymous_namespace_ *v25;
  _anonymous_namespace_ *v26;
  _anonymous_namespace_ *v27;
  uint64_t SourceTable;
  unint64_t v29;
  re *v31;
  const char *v32;
  re::RenderFrame *v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  re::BindPoint *v40;
  re::BindPoint *v41;
  uint64_t v42;
  int v43;
  unint64_t v44;
  size_t v45;
  unint64_t v46;
  size_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  unint64_t v53;
  unint64_t v54;
  unsigned __int8 *v55;
  uint64_t v56;
  unsigned int v57;
  uint64_t v58;
  unint64_t *v59;
  re *v60;
  unsigned __int8 *v61;
  uint64_t v62;
  unsigned int v63;
  uint64_t *v64;
  uint64_t v65;
  unint64_t v66;
  unint64_t v67;
  uint64_t v68;
  uint64_t v69;
  int v70;
  uint64_t v71;
  int v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  re::RenderGraphDataStore *v78;
  const re::RenderGraphDataStoreConnection *v79;
  uint64_t v80;
  uint64_t v81;
  const char *v82;
  __int128 v83;
  size_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  unint64_t v88;
  unint64_t v89;
  unint64_t v90;
  const re::IntrospectionBase *v91;
  re::RenderGraphData **v92;
  re::RenderGraphData **v93;
  uint64_t v94;
  const re::IntrospectionStructure *v95;
  uint64_t v96;
  uint64_t CachedConnection;
  uint64_t v98;
  _BOOL8 v99;
  uint64_t v100;
  const re::IntrospectionBase **v101;
  _anonymous_namespace_ *v102;
  re::RenderGraphData **v103;
  re::RenderGraphData **v104;
  uint64_t v105;
  int v106;
  uint64_t v107;
  size_t v108;
  char *v109;
  _anonymous_namespace_ *v110;
  size_t v111;
  unint64_t v112;
  unint64_t v113;
  unint64_t v114;
  unint64_t v115;
  uint64_t v116;
  uint64_t v117;
  const re::RenderGraphDataStoreConnection *v118;
  uint64_t v119;
  char *__sa;
  char *v121;
  char *v122;
  unint64_t v123;
  _QWORD *v124;
  unint64_t ScopeHash;
  re::RenderGraphData *v126;
  char v127;
  re::RenderGraphData *v128;
  int64_t v129;
  re::IntrospectionBase *v130;
  char v131[8];
  uint64_t (***v132)(_QWORD);
  char v133[8];
  uint64_t v134;
  unint64_t v135[2];
  id v136;
  uint64_t v137;
  _BYTE v138[28];
  __int16 v139;
  _BYTE v140[10];
  char *v141[2];
  _OWORD v142[3];
  __int128 v143;
  __int128 v144;
  uint64_t v145;

  v145 = *MEMORY[0x24BDAC8D0];
  if (a3)
  {
    v8 = *a3;
    if (*a3)
    {
      v9 = a3[1];
      if (v9)
      {
        v10 = a3 + 2;
        do
        {
          v8 = 31 * v8 + v9;
          v11 = *(unsigned __int8 *)v10++;
          v9 = v11;
        }
        while (v11);
      }
      v8 &= ~0x8000000000000000;
    }
  }
  else
  {
    v8 = 0x7FFFFFFFFFFFFFFFLL;
  }
  v137 = v8;
  v12 = *((_QWORD *)this + 7);
  if (v12)
  {
    v13 = (re::TextureAsset *)(*((_QWORD *)this + 9) + 88);
    v14 = 160 * v12;
    do
    {
      if (*((_DWORD *)v13 - 18) == 1)
      {
        v15 = re::AssetHandle::asset<re::TextureAsset>(v13);
        if (*(_DWORD *)(v15 + 240))
          goto LABEL_144;
        v16 = *(id *)(v15 + 160);
        v136 = v16;
        *(_QWORD *)&v142[0] = *((_QWORD *)v13 - 11) >> 1;
        re::RenderFrame::registerExternalTexture((uint64_t)a4, &v136, v142, &v137, 0);
        if (v16)
        {

          v136 = 0;
        }
      }
      v13 = (re::TextureAsset *)((char *)v13 + 160);
      v14 -= 160;
    }
    while (v14);
  }
  v135[0] = 0x51E0F8031ADFD2D4;
  v135[1] = (unint64_t)"RenderGraphFile";
  __sa = __s;
  v121 = a3;
  ScopeHash = re::RenderGraphProviderBase::generateScopeHash(v135, __s, a3);
  v122 = (char *)a4;
  if (!*((_BYTE *)a4 + 425))
  {
    if (*((_BYTE *)this + 704))
    {
      v34 = a4;
      v35 = re::Hash<re::DynamicString>::operator()((uint64_t)v142, (uint64_t)this + 368) - 0x61C8864680B583E9;
      v36 = *((_QWORD *)this + 90);
      if (v36)
      {
        v37 = *((_QWORD *)this + 91);
        v38 = v37 + (v36 << 7);
        do
        {
          v39 = *(_QWORD *)(v37 + 56);
          if (v39)
          {
            v40 = *(re::BindPoint **)(v37 + 72);
            v41 = (re::BindPoint *)((char *)v40 + 64 * v39);
            do
            {
              v42 = re::BindPoint::valueUntyped(v40);
              v43 = *(_DWORD *)(*(_QWORD *)v40 + 20);
              if (v43)
              {
                MurmurHash3_x64_128(v42, v43, 0, (unint64_t *)v142);
                v44 = (*((_QWORD *)&v142[0] + 1)
                     - 0x61C8864680B583E9
                     + (*(_QWORD *)&v142[0] << 6)
                     + (*(_QWORD *)&v142[0] >> 2)) ^ *(_QWORD *)&v142[0];
              }
              else
              {
                v44 = 0;
              }
              v35 ^= (v35 << 6)
                   - 0x61C8864680B583E9
                   + (v35 >> 2)
                   + (((v44 << 6) - 0x61C8864680B583E9 + (v44 >> 2) + (*((_QWORD *)v40 + 6) >> 1)) ^ v44);
              v40 = (re::BindPoint *)((char *)v40 + 64);
            }
            while (v40 != v41);
          }
          v37 += 128;
        }
        while (v37 != v38);
      }
      *((_QWORD *)this + 87) = v35;
      *((_BYTE *)this + 704) = 0;
    }
    else
    {
      v35 = *((_QWORD *)this + 87);
      v34 = a4;
    }
    v45 = strlen(__s);
    if (v45)
    {
      MurmurHash3_x64_128((uint64_t)__s, v45, 0, (unint64_t *)v142);
      v46 = (*((_QWORD *)&v142[0] + 1) - 0x61C8864680B583E9 + (*(_QWORD *)&v142[0] << 6) + (*(_QWORD *)&v142[0] >> 2)) ^ *(_QWORD *)&v142[0];
    }
    else
    {
      v46 = 0;
    }
    v47 = strlen(v121);
    if (v47)
    {
      MurmurHash3_x64_128((uint64_t)v121, v47, 0, (unint64_t *)v142);
      v48 = ((*((_QWORD *)&v142[0] + 1) - 0x61C8864680B583E9 + (*(_QWORD *)&v142[0] << 6) + (*(_QWORD *)&v142[0] >> 2)) ^ *(_QWORD *)&v142[0])
          - 0x61C8864680B583E9;
    }
    else
    {
      v48 = 0x9E3779B97F4A7C17;
    }
    ScopeHash ^= (ScopeHash << 6) - 0x61C8864680B583E9 + (ScopeHash >> 2) + v35;
    v129 = ((v46 >> 2) + (v46 << 6) + v48) ^ v46;
    v49 = *((_QWORD *)this + 100);
    if (v49)
    {
      v50 = *((_QWORD *)this + 102);
      v51 = 136 * v49;
      do
      {
        re::RenderGraphFile::hashConnection((re::RenderGraphFile *)v142, this, (uint64_t)v34, (const re::RenderGraphDataStoreConnection *)v129, v50);
        if (LOBYTE(v142[0]))
          ScopeHash ^= (ScopeHash << 6) - 0x61C8864680B583E9 + (ScopeHash >> 2) + *((_QWORD *)&v142[0] + 1);
        v50 += 136;
        v51 -= 136;
      }
      while (v51);
    }
    v52 = ((v129 << 6) - 0x61C8864680B583E9 + ((unint64_t)v129 >> 2) + *((_QWORD *)this + 50)) ^ v129;
    v53 = (unint64_t)"N2re28RenderGraphNodeExecutionDataE";
    v54 = (unint64_t)"N2re28RenderGraphNodeExecutionDataE";
    if (((unint64_t)"N2re28RenderGraphNodeExecutionDataE" & 0x8000000000000000) != 0)
    {
      v55 = (unsigned __int8 *)((unint64_t)"N2re28RenderGraphNodeExecutionDataE" & 0x7FFFFFFFFFFFFFFFLL);
      v56 = 5381;
      do
      {
        v54 = v56;
        v57 = *v55++;
        v56 = (33 * v56) ^ v57;
      }
      while (v57);
    }
    v58 = v52 - 0x61C8864680B583E9;
    *(_QWORD *)&v142[0] = (v52 - 0x61C8864680B583E9 + (v54 << 6) + (v54 >> 2)) ^ v54;
    v59 = (unint64_t *)((char *)v34 + 48);
    v60 = (re *)re::HashTable<unsigned long,re::IntrospectionStructure const*,re::PrecalculatedHash,re::EqualTo<unsigned long>,false,false>::tryGet((uint64_t)v34 + 48, (uint64_t *)v142);
    if (!v60 || !*(_QWORD *)v60)
    {
      memset((char *)v142 + 8, 0, 32);
      *((_QWORD *)&v142[2] + 1) = 0x7FFFFFFF00000000;
      *(_QWORD *)&v143 = 0;
      if (((unint64_t)"N2re28RenderGraphNodeExecutionDataE" & 0x8000000000000000) != 0)
      {
        v61 = (unsigned __int8 *)((unint64_t)"N2re28RenderGraphNodeExecutionDataE" & 0x7FFFFFFFFFFFFFFFLL);
        v62 = 5381;
        do
        {
          v53 = v62;
          v63 = *v61++;
          v62 = (33 * v62) ^ v63;
        }
        while (v63);
      }
      v64 = re::globalAllocators(v60);
      v65 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v64[2] + 32))(v64[2], 56, 8);
      v66 = (v58 + (v53 << 6) + (v53 >> 2)) ^ v53;
      *(_QWORD *)v65 = &off_24ED37A28;
      *(_DWORD *)(v65 + 48) = 0;
      *(_OWORD *)(v65 + 8) = 0u;
      *(_OWORD *)((char *)v142 + 8) = 0u;
      *(_QWORD *)(v65 + 24) = 0;
      *((_QWORD *)&v142[1] + 1) = 0;
      *(_OWORD *)(v65 + 32) = xmmword_2260F5A80;
      v142[2] = xmmword_2260F5A80;
      v67 = *v59;
      if (*v59)
      {
        v67 = v66 % *((unsigned int *)v34 + 18);
        v68 = *(unsigned int *)(*((_QWORD *)v34 + 7) + 4 * v67);
        if ((_DWORD)v68 != 0x7FFFFFFF)
        {
          v75 = *((_QWORD *)v34 + 8);
          if (*(_QWORD *)(v75 + 24 * v68 + 8) == v66)
          {
LABEL_74:
            v74 = v75 + 24 * v68;
            goto LABEL_75;
          }
          while (1)
          {
            LODWORD(v68) = *(_DWORD *)(v75 + 24 * v68) & 0x7FFFFFFF;
            if ((_DWORD)v68 == 0x7FFFFFFF)
              break;
            if (*(_QWORD *)(v75 + 24 * v68 + 8) == v66)
              goto LABEL_74;
          }
        }
      }
      v69 = *((unsigned int *)v34 + 21);
      if ((_DWORD)v69 == 0x7FFFFFFF)
      {
        v69 = *((unsigned int *)v34 + 20);
        v70 = v69;
        if ((_DWORD)v69 == *((_DWORD *)v34 + 18))
        {
          re::HashTable<unsigned long,re::RenderGraphData *,re::PrecalculatedHash,re::EqualTo<unsigned long>,false,false>::setCapacity((uint64_t)v34 + 48, 2 * *((_DWORD *)v34 + 19));
          LODWORD(v67) = v66 % *((unsigned int *)v34 + 18);
          v70 = *((_DWORD *)v34 + 20);
        }
        *((_DWORD *)v34 + 20) = v70 + 1;
        v71 = *((_QWORD *)v34 + 8);
        v72 = *(_DWORD *)(v71 + 24 * v69);
      }
      else
      {
        v71 = *((_QWORD *)v34 + 8);
        v72 = *(_DWORD *)(v71 + 24 * v69);
        *((_DWORD *)v34 + 21) = v72 & 0x7FFFFFFF;
      }
      v73 = 24 * v69;
      *(_DWORD *)(v71 + v73) = v72 | 0x80000000;
      *(_DWORD *)(*((_QWORD *)v34 + 8) + v73) = *(_DWORD *)(*((_QWORD *)v34 + 8) + 24 * v69) & 0x80000000 | *(_DWORD *)(*((_QWORD *)v34 + 7) + 4 * v67);
      *(_QWORD *)(*((_QWORD *)v34 + 8) + 24 * v69 + 8) = v66;
      *(_QWORD *)(*((_QWORD *)v34 + 8) + 24 * v69 + 16) = v65;
      *(_DWORD *)(*((_QWORD *)v34 + 7) + 4 * v67) = v69;
      ++*((_DWORD *)v34 + 19);
      ++*((_DWORD *)v34 + 22);
      v74 = *((_QWORD *)v34 + 8) + 24 * v69;
LABEL_75:
      v76 = *(_QWORD *)(v74 + 16);
      *(_QWORD *)&v142[0] = &off_24ED37A28;
      re::HashTable<unsigned long long,re::DynamicArray<re::NodePatchData>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::deinit((uint64_t *)v142 + 1);
      v77 = *((_QWORD *)this + 105);
      if (v77)
      {
        v78 = (re::RenderFrame *)((char *)v34 + 32);
        v79 = (const re::RenderGraphDataStoreConnection *)*((_QWORD *)this + 107);
        v118 = (const re::RenderGraphDataStoreConnection *)((char *)v79 + 136 * v77);
        v119 = v76;
        v80 = (uint64_t)v34 + 208;
        v124 = (_QWORD *)(v76 + 8);
        while (1)
        {
          re::RenderGraphFile::hashConnection((re::RenderGraphFile *)v133, this, (uint64_t)v122, (const re::RenderGraphDataStoreConnection *)v129, (uint64_t)v79);
          if (v133[0])
          {
            MurmurHash3_x64_128((uint64_t)"Enabled", 7, 0, (unint64_t *)v142);
            if (*((_QWORD *)v79 + 2) == 1
              && ((v81 = *((_QWORD *)v79 + 4), (*(_BYTE *)(v81 + 8) & 1) != 0)
                ? (v82 = *(const char **)(v81 + 16))
                : (v82 = (const char *)(v81 + 9)),
                  (v83 = v142[0], (v84 = strlen(v82)) == 0)
                ? (v85 = 0)
                : (MurmurHash3_x64_128((uint64_t)v82, v84, 0, (unint64_t *)v142),
                   v85 = (*((_QWORD *)&v142[0] + 1)
                        - 0x61C8864680B583E9
                        + (*(_QWORD *)&v142[0] << 6)
                        + (*(_QWORD *)&v142[0] >> 2)) ^ *(_QWORD *)&v142[0]),
                  v85 == ((*((_QWORD *)&v83 + 1)
                         - 0x61C8864680B583E9
                         + ((_QWORD)v83 << 6)
                         + ((unint64_t)v83 >> 2)) ^ (unint64_t)v83)))
            {
              ScopeHash ^= (ScopeHash << 6) - 0x61C8864680B583E9 + (ScopeHash >> 2) + v134;
            }
            else
            {
              v86 = *((_QWORD *)this + 42);
              if (v86)
              {
                v21 = *((_QWORD *)this + 44);
                v123 = v21 + 56 * v86;
                while (1)
                {
                  v87 = *(_QWORD *)(v21 + 32);
                  if (v87)
                    break;
                  v127 = 0;
LABEL_138:
                  if ((v127 & 1) == 0)
                  {
                    v21 += 56;
                    if (v21 != v123)
                      continue;
                  }
                  goto LABEL_140;
                }
                v127 = 0;
                v18 = *(_QWORD *)(v21 + 48);
                v88 = v18 + 136 * v87;
                while (2)
                {
                  if (*(_QWORD *)(v18 + 120) != *((_QWORD *)v79 + 15))
                    goto LABEL_135;
                  v89 = *(unsigned int *)re::HashTable<re::StringID,re::StateParameterInt *,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::tryGet((uint64_t)this + 736, (_QWORD *)v21);
                  v90 = *((_QWORD *)this + 17);
                  if (v90 <= v89)
                  {
                    v141[0] = 0;
                    v143 = 0u;
                    v144 = 0u;
                    memset(v142, 0, sizeof(v142));
                    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
                    *(_DWORD *)v138 = 136315906;
                    *(_QWORD *)&v138[4] = "operator[]";
                    *(_WORD *)&v138[12] = 1024;
                    *(_DWORD *)&v138[14] = 797;
                    *(_WORD *)&v138[18] = 2048;
                    *(_QWORD *)&v138[20] = v89;
                    v139 = 2048;
                    *(_QWORD *)v140 = v90;
                    _os_log_send_and_compose_impl();
                    _os_crash_msg();
                    __break(1u);
                    goto LABEL_143;
                  }
                  re::RenderGraphNodeRegistry::registryItem((os_unfair_lock_s *)re::RenderGraphNodeRegistry::m_instance, *(_QWORD *)(*((_QWORD *)this + 19) + 16 * v89), (uint64_t)v131);
                  v91 = (const re::IntrospectionBase *)(**v132)(v132);
                  *(_QWORD *)&v143 = 0;
                  memset(v142, 0, sizeof(v142));
                  *(_QWORD *)v138 = *((_QWORD *)v79 + 14);
                  v92 = (re::RenderGraphData **)re::HashTable<unsigned long,re::IntrospectionStructure const*,re::PrecalculatedHash,re::EqualTo<unsigned long>,false,false>::tryGet(v80, (uint64_t *)v138);
                  v93 = v92;
                  if (v92)
                    v128 = *v92;
                  v94 = re::RenderGraphDataStore::tryGetByTypeNameHash(v78, v129, *((_QWORD *)v79 + 14));
                  if (v93)
                  {
                    v96 = v94;
                    if (v94)
                    {
                      CachedConnection = re::RenderGraphFile::getCachedConnection(this, v91, v79, v128, v95);
                      v98 = CachedConnection;
                      if (CachedConnection)
                      {
                        if (*(_BYTE *)(CachedConnection + 56))
                        {
                          v141[0] = 0;
                          v141[0] = (char *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v96 + 16))(v96);
                          v130 = v128;
                          v99 = re::scanForCopy(v98 + 8, (uint64_t *)v141, &v130);
                          if (v99)
                          {
                            v100 = *((int *)v130 + 5);
                            v101 = *(const re::IntrospectionBase ***)&v142[1];
                            *(_QWORD *)&v138[8] = 0;
                            *(_QWORD *)&v138[16] = 0;
                            break;
                          }
                        }
                      }
LABEL_109:
                      v106 = 1;
LABEL_127:
                      if (*((_QWORD *)&v142[1] + 1))
                      {
                        if (*(_QWORD *)&v142[2])
                        {
                          (*(void (**)(_QWORD, _QWORD))(**((_QWORD **)&v142[1] + 1) + 40))(*((_QWORD *)&v142[1] + 1), *((_QWORD *)&v142[2] + 1));
                          v142[2] = 0uLL;
                        }
                        *((_QWORD *)&v142[1] + 1) = 0;
                      }
                      if (*(_QWORD *)&v142[0] && *((_QWORD *)&v142[0] + 1))
                        (*(void (**)(_QWORD, _QWORD))(**(_QWORD **)&v142[0] + 40))(*(_QWORD *)&v142[0], *(_QWORD *)&v142[1]);
                      if (!v106)
                        goto LABEL_138;
LABEL_135:
                      v18 += 136;
                      if (v18 == v88)
                        goto LABEL_138;
                      continue;
                    }
                  }
                  break;
                }
                *(_QWORD *)v138 = *((_QWORD *)v79 + 14);
                v103 = (re::RenderGraphData **)re::HashTable<unsigned long,re::IntrospectionStructure const*,re::PrecalculatedHash,re::EqualTo<unsigned long>,false,false>::tryGet(v80, (uint64_t *)v138);
                v104 = v103;
                if (v103)
                  v126 = *v103;
                v105 = re::RenderGraphDataStore::tryGetByTypeNameHash(v78, v129, *((_QWORD *)v79 + 14));
                v106 = 0;
                if (v104 && v105)
                {
                  v107 = re::RenderGraphFile::getCachedConnection(this, v91, v79, v126, v17);
                  if (!v107 || !*(_BYTE *)(v107 + 56))
                    goto LABEL_109;
                  re::FixedArray<unsigned int>::operator=((uint64_t *)&v142[1] + 1, v107 + 32);
                  *(_QWORD *)&v143 = v91;
                  v108 = strlen(*(const char **)(v21 + 8));
                  if (v108)
                  {
                    MurmurHash3_x64_128(*(_QWORD *)(v21 + 8), v108, 0, (unint64_t *)v138);
                    v109 = (char *)((*(_QWORD *)&v138[8]
                                   - 0x61C8864680B583E9
                                   + (*(_QWORD *)v138 << 6)
                                   + (*(_QWORD *)v138 >> 2)) ^ *(_QWORD *)v138);
                  }
                  else
                  {
                    v109 = 0;
                  }
                  v141[0] = v109;
                  v110 = (_anonymous_namespace_ *)re::HashTable<unsigned long long,re::DynamicArray<re::AssetLoadDescriptor>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::tryGet((uint64_t)v124, (uint64_t *)v141);
                  if (v110)
                  {
                    re::DynamicArray<re::NodePatchData>::add(v110, v142);
                    goto LABEL_125;
                  }
                  *(_QWORD *)&v140[2] = 0;
                  memset(v138, 0, sizeof(v138));
                  re::DynamicArray<re::NodePatchData>::add((_anonymous_namespace_ *)v138, v142);
                  v111 = strlen(*(const char **)(v21 + 8));
                  if (v111)
                  {
                    MurmurHash3_x64_128(*(_QWORD *)(v21 + 8), v111, 0, (unint64_t *)v141);
                    v112 = (uint64_t)&v141[1][64 * (uint64_t)v141[0]
                                           - 0x61C8864680B583E9
                                           + ((unint64_t)v141[0] >> 2)] ^ (uint64_t)v141[0];
                  }
                  else
                  {
                    v112 = 0;
                  }
                  v130 = (re::IntrospectionBase *)v112;
                  v113 = 0x94D049BB133111EBLL
                       * ((0xBF58476D1CE4E5B9 * (v112 ^ (v112 >> 30))) ^ ((0xBF58476D1CE4E5B9 * (v112 ^ (v112 >> 30))) >> 27));
                  v114 = v113 ^ (v113 >> 31);
                  if (*v124)
                  {
                    v115 = v114 % *(unsigned int *)(v119 + 32);
                    v116 = *(unsigned int *)(*(_QWORD *)(v119 + 16) + 4 * v115);
                    if ((_DWORD)v116 != 0x7FFFFFFF)
                    {
                      v117 = *(_QWORD *)(v119 + 24);
                      while (*(_QWORD *)(v117 + (v116 << 6) + 16) != v112)
                      {
                        v116 = *(_DWORD *)(v117 + (v116 << 6) + 8) & 0x7FFFFFFF;
                        if ((_DWORD)v116 == 0x7FFFFFFF)
                          goto LABEL_123;
                      }
                      goto LABEL_124;
                    }
                  }
                  else
                  {
                    LODWORD(v115) = 0;
                  }
LABEL_123:
                  re::HashTable<unsigned long long,re::DynamicArray<re::NodePatchData>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::addAsMove((uint64_t)v124, v115, v114, &v130, (uint64_t)v138);
                  ++*(_DWORD *)(v119 + 48);
LABEL_124:
                  re::DynamicArray<re::NodePatchData>::deinit((uint64_t)v138);
LABEL_125:
                  v106 = 0;
                }
                v127 = 1;
                goto LABEL_127;
              }
            }
          }
LABEL_140:
          v79 = (const re::RenderGraphDataStoreConnection *)((char *)v79 + 136);
          if (v79 == v118)
            break;
        }
      }
    }
  }
  if (*((_QWORD *)this + 17))
  {
    v18 = 0;
    v19 = 1;
    while (1)
    {
      v20 = atomic_load((unsigned __int8 *)&qword_2540FF9B0);
      if ((v20 & 1) == 0)
      {
        v31 = (re *)__cxa_guard_acquire(&qword_2540FF9B0);
        if ((_DWORD)v31)
        {
          qword_2540FF9A8 = re::hashString(v31, v32);
          __cxa_guard_release(&qword_2540FF9B0);
        }
      }
      v21 = *((_QWORD *)this + 17);
      if (v21 <= v18)
        break;
      v22 = *((_QWORD *)this + 19);
      if (*(_QWORD *)(v22 + 16 * v18) == qword_2540FF9A8)
      {
        v23 = *(_QWORD *)(v22 + 16 * v18 + 8);
        v24 = *(_QWORD *)(v23 + 264);
        v25 = *(_anonymous_namespace_ **)(v23 + 272);
        v26 = (_anonymous_namespace_ *)(v23 + 265);
        if ((v24 & 1) != 0)
          v27 = v25;
        else
          v27 = v26;
        v29 = 0xBF58476D1CE4E5B9;
        if (!SourceTable)
          v29 = 0;
        ScopeHash ^= (ScopeHash << 6)
                   - 0x61C8864680B583E9
                   + (ScopeHash >> 2)
                   + ((((0x94D049BB133111EBLL * (v29 ^ (v29 >> 27))) ^ ((0x94D049BB133111EBLL * (v29 ^ (v29 >> 27))) >> 31))
                     + 0x227C153807781E51) ^ 0x7D937EEF0B15A0E8);
        v21 = *((_QWORD *)this + 17);
      }
      v18 = v19;
      if (v21 <= v19++)
        return ScopeHash;
    }
LABEL_143:
    v141[0] = 0;
    v143 = 0u;
    v144 = 0u;
    memset(v142, 0, sizeof(v142));
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    *(_DWORD *)v138 = 136315906;
    *(_QWORD *)&v138[4] = "operator[]";
    *(_WORD *)&v138[12] = 1024;
    *(_DWORD *)&v138[14] = 797;
    *(_WORD *)&v138[18] = 2048;
    *(_QWORD *)&v138[20] = v18;
    v139 = 2048;
    *(_QWORD *)v140 = v21;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_144:
    std::__throw_bad_variant_access[abi:nn180100]();
  }
  return ScopeHash;
}

void sub_225342C60(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_2540FF9B0);
  _Unwind_Resume(a1);
}

unint64_t re::RenderGraphProviderBase::generateScopeHash(unint64_t *a1, char *__s, const char *a3)
{
  unint64_t v5;
  size_t v6;
  unint64_t v7;
  size_t v8;
  unint64_t v9;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v13 = *MEMORY[0x24BDAC8D0];
  v5 = *a1;
  v6 = strlen(__s);
  if (v6)
  {
    MurmurHash3_x64_128((uint64_t)__s, v6, 0, &v11);
    v7 = (v12 - 0x61C8864680B583E9 + (v11 << 6) + (v11 >> 2)) ^ v11;
  }
  else
  {
    v7 = 0;
  }
  v8 = strlen(a3);
  if (v8)
  {
    MurmurHash3_x64_128((uint64_t)a3, v8, 0, &v11);
    v9 = ((v12 - 0x61C8864680B583E9 + (v11 << 6) + (v11 >> 2)) ^ v11) - 0x61C8864680B583E9;
  }
  else
  {
    v9 = 0x9E3779B97F4A7C17;
  }
  return ((v5 << 6) - 0x61C8864680B583E9 + (v5 >> 2) + (((v7 >> 2) + (v7 << 6) + v9) ^ v7)) ^ v5;
}

void re::RenderGraphNodeExecutionData::~RenderGraphNodeExecutionData(re::RenderGraphNodeExecutionData *this)
{
  *(_QWORD *)this = &off_24ED37A28;
  re::HashTable<unsigned long long,re::DynamicArray<re::NodePatchData>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::deinit((uint64_t *)this + 1);
}

{
  *(_QWORD *)this = &off_24ED37A28;
  re::HashTable<unsigned long long,re::DynamicArray<re::NodePatchData>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::deinit((uint64_t *)this + 1);
  JUMPOUT(0x2276933B8);
}

_anonymous_namespace_ *re::DynamicArray<re::NodePatchData>::add(_anonymous_namespace_ *result, _QWORD *a2)
{
  _anonymous_namespace_ *v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  BOOL v8;
  unint64_t v9;
  unint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  v3 = result;
  v4 = *((_QWORD *)result + 1);
  v5 = *((_QWORD *)result + 2);
  if (v5 >= v4)
  {
    v6 = v5 + 1;
    if (v4 < v5 + 1)
    {
      if (*(_QWORD *)result)
      {
        v7 = 2 * v4;
        v8 = v4 == 0;
        v9 = 8;
        if (!v8)
          v9 = v7;
        if (v9 <= v6)
          v10 = v6;
        else
          v10 = v9;
        result = (_anonymous_namespace_ *)re::DynamicArray<re::NodePatchData>::setCapacity(result, v10);
      }
      else
      {
        result = (_anonymous_namespace_ *)re::DynamicArray<re::NodePatchData>::setCapacity(v3, v6);
        ++*((_DWORD *)v3 + 6);
      }
    }
    v5 = *((_QWORD *)v3 + 2);
  }
  v11 = (_QWORD *)(*((_QWORD *)v3 + 4) + 56 * v5);
  *v11 = 0;
  v11[1] = 0;
  v11[2] = 0;
  v12 = a2[1];
  *v11 = *a2;
  v11[1] = v12;
  *a2 = 0;
  a2[1] = 0;
  v13 = v11[2];
  v11[2] = a2[2];
  a2[2] = v13;
  v11[3] = 0;
  v11[4] = 0;
  v11[5] = 0;
  v14 = a2[4];
  v11[3] = a2[3];
  v11[4] = v14;
  a2[3] = 0;
  a2[4] = 0;
  v15 = v11[5];
  v11[5] = a2[5];
  a2[5] = v15;
  v11[6] = a2[6];
  ++*((_QWORD *)v3 + 2);
  ++*((_DWORD *)v3 + 6);
  return result;
}

void re::NodePatchData::~NodePatchData(re::NodePatchData *this)
{
  uint64_t v2;

  v2 = *((_QWORD *)this + 3);
  if (v2)
  {
    if (*((_QWORD *)this + 4))
    {
      (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v2 + 40))(v2, *((_QWORD *)this + 5));
      *((_QWORD *)this + 4) = 0;
      *((_QWORD *)this + 5) = 0;
    }
    *((_QWORD *)this + 3) = 0;
  }
  if (*(_QWORD *)this)
  {
    if (*((_QWORD *)this + 1))
    {
      (*(void (**)(_QWORD, _QWORD))(**(_QWORD **)this + 40))(*(_QWORD *)this, *((_QWORD *)this + 2));
      *((_QWORD *)this + 1) = 0;
      *((_QWORD *)this + 2) = 0;
    }
    *(_QWORD *)this = 0;
  }
}

uint64_t *re::RenderGraphFile::provide(re::RenderGraphFile *this, const char *a2, char *a3, re::RenderFrame *a4)
{
  re::RenderGraphFile *v7;
  uint64_t RenderGraph;
  uint64_t v9;
  char v10;
  const char *v11;
  int v12;
  uint64_t v13;
  size_t v14;
  unint64_t v15;
  size_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  int v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  int v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  int v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  unint64_t v44;
  unint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  __int128 v50;
  unsigned __int8 v51;
  uint64_t v52;
  uint64_t v53;
  const char *v54;
  uint64_t v55;
  int v56;
  int v57;
  int v58;
  int v59;
  unint64_t v60;
  unint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  int v65;
  uint64_t v66;
  int v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  __int128 v74;
  unsigned __int8 v75;
  uint64_t v76;
  uint64_t v77;
  const char *v78;
  uint64_t v79;
  int v80;
  int v81;
  unint64_t v82;
  unint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  int v87;
  uint64_t v88;
  int v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  unsigned __int8 v93;
  uint64_t *v94;
  uint64_t v95;
  uint64_t v96;
  unsigned __int8 v97;
  uint64_t v98;
  uint64_t *v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  char *v103;
  uint64_t v104;
  char v105;
  unsigned __int8 *v106;
  int v107;
  uint64_t v108;
  unint64_t v109;
  unint64_t v110;
  unint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  const char *v115;
  const char **v116;
  unsigned int v117;
  uint64_t *v118;
  uint64_t v119;
  const re::IntrospectionBase *v120;
  unsigned __int8 v121;
  uint64_t *v122;
  re::IntrospectionBase *v123;
  char *v124;
  char *v125;
  uint64_t v126;
  unsigned int v127;
  char v128;
  unsigned __int8 *v129;
  int v130;
  char *v131;
  unint64_t v132;
  unint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  const char *v137;
  re::IntrospectionBase *v138;
  uint64_t v139;
  uint64_t v140;
  const char **v141;
  uint64_t v142;
  size_t v143;
  const re::IntrospectionBase **v144;
  uint64_t v145;
  unint64_t v146;
  unint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  int v151;
  uint64_t v152;
  int v153;
  uint64_t v154;
  uint64_t v155;
  _QWORD *v156;
  uint64_t v157;
  uint64_t v158;
  _QWORD *v159;
  uint64_t v160;
  unint64_t v161;
  double *v162;
  uint64_t *v163;
  char *v164;
  unsigned int v165;
  char *v166;
  double *v167;
  char *v168;
  uint64_t v169;
  _QWORD *v170;
  _QWORD *v171;
  unint64_t v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  char *v179;
  uint64_t v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  unsigned int v185;
  char *v186;
  char *v187;
  uint64_t v188;
  uint64_t v189;
  int *v190;
  int v191;
  uint64_t v192;
  uint64_t v193;
  int v194;
  int v195;
  __n128 v196;
  uint64_t *result;
  uint64_t v198;
  const re::IntrospectionBase *v199;
  const re::IntrospectionBase *v200;
  uint64_t v201;
  re *v202;
  _QWORD *v203;
  uint64_t v204;
  _anonymous_namespace_ *v205;
  unint64_t *v206;
  uint64_t v207;
  char *__s;
  unint64_t *v209;
  unint64_t *v210;
  re::RenderFrame *v211;
  const re::IntrospectionBase *v212;
  re::IntrospectionBase *v213;
  uint64_t v214;
  uint64_t (***v215)(_QWORD);
  _QWORD v216[3];
  uint64_t v217;
  int v218;
  int v219;
  __int128 v220;
  __int128 v221;
  __int128 v222;
  __int128 v223;
  uint64_t v224;
  _BYTE v225[40];
  uint64_t v226;
  uint64_t *v227;
  size_t v228;
  uint64_t v229;
  uint64_t v230;
  int v231;
  uint64_t *v232;
  _BYTE v233[18];
  __int16 v234;
  const char **v235;
  __int16 v236;
  uint64_t *v237;
  unsigned __int128 v238;
  __int128 v239;
  __int128 v240;
  __int128 v241;
  __int128 v242;
  uint64_t v243;

  v7 = this;
  v243 = *MEMORY[0x24BDAC8D0];
  RenderGraph = re::RenderFrame::makeRenderGraph(a4, a3, *((_QWORD *)this + 17));
  __s = a3;
  if (a3)
  {
    v9 = *a3;
    if (*a3)
    {
      v10 = a3[1];
      if (v10)
      {
        v11 = a3 + 2;
        do
        {
          v9 = 31 * v9 + v10;
          v12 = *(unsigned __int8 *)v11++;
          v10 = v12;
        }
        while (v12);
      }
      v9 &= ~0x8000000000000000;
    }
  }
  else
  {
    v9 = 0x7FFFFFFFFFFFFFFFLL;
  }
  v13 = 0x9E3779B97F4A7C17;
  v226 = v9;
  v14 = strlen(a2);
  if (v14)
  {
    MurmurHash3_x64_128((uint64_t)a2, v14, 0, (unint64_t *)&v238);
    v15 = (*((_QWORD *)&v238 + 1) - 0x61C8864680B583E9 + ((_QWORD)v238 << 6) + ((unint64_t)v238 >> 2)) ^ v238;
  }
  else
  {
    v15 = 0;
  }
  v16 = strlen(a3);
  if (v16)
  {
    MurmurHash3_x64_128((uint64_t)a3, v16, 0, (unint64_t *)&v238);
    v13 = ((*((_QWORD *)&v238 + 1) - 0x61C8864680B583E9 + ((_QWORD)v238 << 6) + ((unint64_t)v238 >> 2)) ^ v238)
        - 0x61C8864680B583E9;
  }
  v203 = (_QWORD *)((char *)v7 + 532);
  v206 = (unint64_t *)((char *)v7 + 504);
  if (*((_DWORD *)v7 + 133))
  {
    v17 = *((unsigned int *)v7 + 132);
    if ((_DWORD)v17)
      memset_pattern16(*((void **)v7 + 64), &memset_pattern_181, 4 * v17);
    v18 = *((unsigned int *)v7 + 134);
    if ((_DWORD)v18)
    {
      v19 = 0;
      v20 = 24 * v18;
      do
      {
        v21 = *((_QWORD *)v7 + 65);
        v22 = *(_DWORD *)(v21 + v19);
        if (v22 < 0)
          *(_DWORD *)(v21 + v19) = v22 & 0x7FFFFFFF;
        v19 += 24;
      }
      while (v20 != v19);
    }
    *((_DWORD *)v7 + 135) = 0x7FFFFFFF;
    *v203 = 0;
    ++*((_DWORD *)v7 + 136);
  }
  re::HashTable<unsigned long long,re::RenderGraphNode *,re::PrecalculatedHash,re::EqualTo<unsigned long long>,false,false>::setCapacity((uint64_t)v206, *((_DWORD *)v7 + 34));
  v210 = (unint64_t *)((char *)v7 + 552);
  if (*((_DWORD *)v7 + 145))
  {
    v23 = *((unsigned int *)v7 + 144);
    if ((_DWORD)v23)
      memset_pattern16(*((void **)v7 + 70), &memset_pattern_181, 4 * v23);
    v24 = *((unsigned int *)v7 + 146);
    if ((_DWORD)v24)
    {
      v25 = 0;
      v26 = 32 * v24;
      do
      {
        v27 = *((_QWORD *)v7 + 71);
        v28 = *(_DWORD *)(v27 + v25);
        if (v28 < 0)
          *(_DWORD *)(v27 + v25) = v28 & 0x7FFFFFFF;
        v25 += 32;
      }
      while (v26 != v25);
    }
    *((_DWORD *)v7 + 147) = 0x7FFFFFFF;
    *(_QWORD *)((char *)v7 + 580) = 0;
    ++*((_DWORD *)v7 + 148);
  }
  re::HashTable<unsigned long long,re::RenderGraphTargetHandle,re::PrecalculatedHash,re::EqualTo<unsigned long long>,false,false>::setCapacity((uint64_t)v210, *((_DWORD *)v7 + 14));
  v209 = (unint64_t *)((char *)v7 + 600);
  if (*((_DWORD *)v7 + 157))
  {
    v29 = *((unsigned int *)v7 + 156);
    if ((_DWORD)v29)
      memset_pattern16(*((void **)v7 + 76), &memset_pattern_181, 4 * v29);
    v30 = *((unsigned int *)v7 + 158);
    if ((_DWORD)v30)
    {
      v31 = 0;
      v32 = 32 * v30;
      do
      {
        v33 = *((_QWORD *)v7 + 77);
        v34 = *(_DWORD *)(v33 + v31);
        if (v34 < 0)
          *(_DWORD *)(v33 + v31) = v34 & 0x7FFFFFFF;
        v31 += 32;
      }
      while (v32 != v31);
    }
    *((_DWORD *)v7 + 159) = 0x7FFFFFFF;
    *(_QWORD *)((char *)v7 + 628) = 0;
    ++*((_DWORD *)v7 + 160);
  }
  re::HashTable<unsigned long long,re::RenderGraphBufferHandle,re::PrecalculatedHash,re::EqualTo<unsigned long long>,false,false>::setCapacity((uint64_t)v209, *((_DWORD *)v7 + 24));
  if (*((_DWORD *)v7 + 169))
  {
    v35 = *((unsigned int *)v7 + 168);
    if ((_DWORD)v35)
      memset_pattern16(*((void **)v7 + 82), &memset_pattern_181, 4 * v35);
    v36 = *((unsigned int *)v7 + 170);
    if ((_DWORD)v36)
    {
      v37 = 0;
      v38 = 24 * v36;
      do
      {
        v39 = *((_QWORD *)v7 + 83);
        v40 = *(_DWORD *)(v39 + v37);
        if (v40 < 0)
          *(_DWORD *)(v39 + v37) = v40 & 0x7FFFFFFF;
        v37 += 24;
      }
      while (v38 != v37);
    }
    *((_DWORD *)v7 + 171) = 0x7FFFFFFF;
    *(_QWORD *)((char *)v7 + 676) = 0;
    ++*((_DWORD *)v7 + 172);
  }
  re::HashTable<unsigned long long,re::RenderGraphInputData const*,re::PrecalculatedHash,re::EqualTo<unsigned long long>,false,false>::setCapacity((uint64_t)v7 + 648, *((_DWORD *)v7 + 44));
  v41 = *((_QWORD *)v7 + 22);
  if (v41)
  {
    v42 = *((_QWORD *)v7 + 24);
    v43 = v42 + 56 * v41;
    do
    {
      v44 = *(_QWORD *)(v42 + 16) >> 1;
      *(_QWORD *)&v238 = v44;
      *(_QWORD *)&v220 = v42;
      if (*((_QWORD *)v7 + 81))
      {
        v45 = v44 % *((unsigned int *)v7 + 168);
        v46 = *(unsigned int *)(*((_QWORD *)v7 + 82) + 4 * v45);
        if ((_DWORD)v46 != 0x7FFFFFFF)
        {
          v47 = *((_QWORD *)v7 + 83);
          while (*(_QWORD *)(v47 + 24 * v46 + 8) != v44)
          {
            LODWORD(v46) = *(_DWORD *)(v47 + 24 * v46) & 0x7FFFFFFF;
            if ((_DWORD)v46 == 0x7FFFFFFF)
              goto LABEL_58;
          }
          goto LABEL_59;
        }
      }
      else
      {
        LODWORD(v45) = 0;
      }
LABEL_58:
      re::HashTable<unsigned long long,re::RenderGraphInputData const*,re::PrecalculatedHash,re::EqualTo<unsigned long long>,false,false>::addAsMove((uint64_t)v7 + 648, v45, v44, &v238, &v220);
      ++*((_DWORD *)v7 + 172);
LABEL_59:
      v42 += 56;
    }
    while (v42 != v43);
  }
  v205 = (_anonymous_namespace_ *)RenderGraph;
  v211 = a4;
  v207 = ((v15 >> 2) + (v15 << 6) + v13) ^ v15;
  v48 = *((_QWORD *)v7 + 7);
  if (v48)
  {
    v49 = *((_QWORD *)v7 + 9);
    v204 = v49 + 160 * v48;
    v202 = (re::RenderFrame *)((char *)a4 + 3448);
    do
    {
      v50 = *(_OWORD *)(v49 + 48);
      v221 = *(_OWORD *)(v49 + 32);
      v222 = v50;
      v223 = *(_OWORD *)(v49 + 64);
      v224 = *(_QWORD *)(v49 + 80);
      v220 = *(_OWORD *)(v49 + 16);
      re::AssetHandle::AssetHandle((re::AssetHandle *)v225, (const re::AssetHandle *)(v49 + 88));
      v225[24] = *(_BYTE *)(v49 + 112);
      v51 = atomic_load((unsigned __int8 *)&qword_2540FFB20);
      if ((v51 & 1) == 0 && __cxa_guard_acquire(&qword_2540FFB20))
      {
        qword_2540FFB18 = re::internal::getOrCreateInfo((re::internal *)"RenderGraphTargetDescriptionData", (uint64_t (*)(re::internal *))re::allocInfo_RenderGraphTargetDescriptionData, (re::IntrospectionBase *(*)(void))re::initInfo_RenderGraphTargetDescriptionData, (void (*)(re::IntrospectionBase *))&qword_2540FFA88, 0);
        __cxa_guard_release(&qword_2540FFB20);
      }
      re::RenderGraphFile::connectionWalker((uint64_t)v7, (uint64_t)v211, v207, (const re::IntrospectionBase *)qword_2540FFB18, (const re::IntrospectionBase **)&v220, v49 + 120);
      v52 = re::HashTable<unsigned long long,re::RenderGraphInputData const*,re::PrecalculatedHash,re::EqualTo<unsigned long long>,false,false>::tryGet((uint64_t)v7 + 648, *(_QWORD *)v49 >> 1);
      if (!v52
        || ((v53 = v52, **(_BYTE **)(*(_QWORD *)v52 + 48))
          ? (v54 = *(const char **)(*(_QWORD *)v52 + 48))
          : (v54 = __s),
            (re::RenderFrame::tryGetInputTarget(v211, *(const char **)(*(_QWORD *)v52 + 8), v54, (double *)v233),
             v55 = *(_QWORD *)v233,
             v56 = *(_DWORD *)&v233[8],
             v57 = *(_DWORD *)&v233[12],
             !*(_BYTE *)(*(_QWORD *)v53 + 32))
         && (*(_DWORD *)&v233[8] == -1 || *(_DWORD *)&v233[12] == -1)))
      {
        v58 = DWORD1(v239);
        if ((DWORD1(v239) - 2) > 0xFFFFFFFC)
        {
          re::RenderFrame::createTarget(v211, (const re::RenderGraphTargetDescription *)&v238, *(const char **)(v49 + 8), v233);
          v55 = *(_QWORD *)v233;
          v56 = *(_DWORD *)&v233[8];
          v57 = *(_DWORD *)&v233[12];
        }
        else
        {
          DWORD1(v239) = 1;
          re::RenderFrame::createTarget(v211, (const re::RenderGraphTargetDescription *)&v238, *(const char **)(v49 + 8), v233);
          v55 = *(_QWORD *)v233;
          v56 = *(_DWORD *)&v233[8];
          v57 = *(_DWORD *)&v233[12];
          DWORD1(v239) = v58;
          re::InlineString<64ul>::format((uint64_t)v233, *(_QWORD *)(v49 + 8));
          re::RenderFrame::createTarget(v211, (const re::RenderGraphTargetDescription *)&v238, &v233[8], &v230);
          v217 = v55;
          v218 = v56;
          v219 = v57;
          v59 = v231;
          *(_DWORD *)(re::RenderGraphResourceDescriptions::targetDescription(v202, &v217) + 80) = v59;
        }
      }
      v60 = *(_QWORD *)v49 >> 1;
      v61 = *v210;
      if (!*v210
        || (v61 = v60 % *((unsigned int *)v7 + 144),
            v62 = *(unsigned int *)(*((_QWORD *)v7 + 70) + 4 * v61),
            (_DWORD)v62 == 0x7FFFFFFF))
      {
LABEL_78:
        v64 = *((unsigned int *)v7 + 147);
        if ((_DWORD)v64 == 0x7FFFFFFF)
        {
          v64 = *((unsigned int *)v7 + 146);
          v65 = v64;
          if ((_DWORD)v64 == *((_DWORD *)v7 + 144))
          {
            re::HashTable<unsigned long long,re::RenderGraphTargetHandle,re::PrecalculatedHash,re::EqualTo<unsigned long long>,false,false>::setCapacity((uint64_t)v210, 2 * *((_DWORD *)v7 + 145));
            v61 = v60 % *((unsigned int *)v7 + 144);
            v65 = *((_DWORD *)v7 + 146);
          }
          *((_DWORD *)v7 + 146) = v65 + 1;
          v66 = *((_QWORD *)v7 + 71);
          v67 = *(_DWORD *)(v66 + 32 * v64);
        }
        else
        {
          v66 = *((_QWORD *)v7 + 71);
          v67 = *(_DWORD *)(v66 + 32 * v64);
          *((_DWORD *)v7 + 147) = v67 & 0x7FFFFFFF;
        }
        v68 = 32 * v64;
        *(_DWORD *)(v66 + v68) = v67 | 0x80000000;
        v69 = *((_QWORD *)v7 + 70);
        *(_DWORD *)(*((_QWORD *)v7 + 71) + v68) = *(_DWORD *)(*((_QWORD *)v7 + 71) + 32 * v64) & 0x80000000 | *(_DWORD *)(v69 + 4 * v61);
        *(_QWORD *)(*((_QWORD *)v7 + 71) + 32 * v64 + 8) = v60;
        v70 = *((_QWORD *)v7 + 71) + 32 * v64;
        *(_QWORD *)(v70 + 16) = v55;
        *(_DWORD *)(v70 + 24) = v56;
        *(_DWORD *)(v70 + 28) = v57;
        *(_DWORD *)(v69 + 4 * v61) = v64;
        ++*((_DWORD *)v7 + 145);
        ++*((_DWORD *)v7 + 148);
      }
      else
      {
        v63 = *((_QWORD *)v7 + 71);
        while (*(_QWORD *)(v63 + 32 * v62 + 8) != v60)
        {
          v62 = *(_DWORD *)(v63 + 32 * v62) & 0x7FFFFFFF;
          if ((_DWORD)v62 == 0x7FFFFFFF)
            goto LABEL_78;
        }
      }
      re::AssetHandle::~AssetHandle((re::AssetHandle *)v225);
      v49 += 160;
    }
    while (v49 != v204);
  }
  v71 = *((_QWORD *)v7 + 12);
  if (v71)
  {
    v72 = *((_QWORD *)v7 + 14);
    v73 = v72 + 88 * v71;
    do
    {
      v74 = *(_OWORD *)(v72 + 32);
      v220 = *(_OWORD *)(v72 + 16);
      v221 = v74;
      v75 = atomic_load((unsigned __int8 *)&qword_2540FFB30);
      if ((v75 & 1) == 0 && __cxa_guard_acquire(&qword_2540FFB30))
      {
        qword_2540FFB28 = re::internal::getOrCreateInfo((re::internal *)"RenderGraphBufferDescriptionData", (uint64_t (*)(re::internal *))re::allocInfo_RenderGraphBufferDescriptionData, (re::IntrospectionBase *(*)(void))re::initInfo_RenderGraphBufferDescriptionData, (void (*)(re::IntrospectionBase *))&qword_2540FF9C8, 0);
        __cxa_guard_release(&qword_2540FFB30);
      }
      re::RenderGraphFile::connectionWalker((uint64_t)v7, (uint64_t)v211, v207, (const re::IntrospectionBase *)qword_2540FFB28, (const re::IntrospectionBase **)&v220, v72 + 48);
      v76 = re::HashTable<unsigned long long,re::RenderGraphInputData const*,re::PrecalculatedHash,re::EqualTo<unsigned long long>,false,false>::tryGet((uint64_t)v7 + 648, *(_QWORD *)v72 >> 1);
      if (!v76
        || ((v77 = v76, **(_BYTE **)(*(_QWORD *)v76 + 48))
          ? (v78 = *(const char **)(*(_QWORD *)v76 + 48))
          : (v78 = __s),
            (re::RenderFrame::tryGetInputBuffer(v211, *(const char **)(*(_QWORD *)v76 + 8), v78, (double *)v233),
             v79 = *(_QWORD *)v233,
             v80 = *(_DWORD *)&v233[8],
             v81 = *(_DWORD *)&v233[12],
             !*(_BYTE *)(*(_QWORD *)v77 + 32))
         && (*(_DWORD *)&v233[8] == -1 || *(_DWORD *)&v233[12] == -1)))
      {
        re::RenderFrame::createBuffer(v211, (const re::RenderGraphBufferDescription *)&v238, *(const char **)(v72 + 8), v233);
        v79 = *(_QWORD *)v233;
        v80 = *(_DWORD *)&v233[8];
        v81 = *(_DWORD *)&v233[12];
      }
      v82 = *(_QWORD *)v72 >> 1;
      v83 = *v209;
      if (!*v209
        || (v83 = v82 % *((unsigned int *)v7 + 156),
            v84 = *(unsigned int *)(*((_QWORD *)v7 + 76) + 4 * v83),
            (_DWORD)v84 == 0x7FFFFFFF))
      {
LABEL_104:
        v86 = *((unsigned int *)v7 + 159);
        if ((_DWORD)v86 == 0x7FFFFFFF)
        {
          v86 = *((unsigned int *)v7 + 158);
          v87 = v86;
          if ((_DWORD)v86 == *((_DWORD *)v7 + 156))
          {
            re::HashTable<unsigned long long,re::RenderGraphBufferHandle,re::PrecalculatedHash,re::EqualTo<unsigned long long>,false,false>::setCapacity((uint64_t)v209, 2 * *((_DWORD *)v7 + 157));
            v83 = v82 % *((unsigned int *)v7 + 156);
            v87 = *((_DWORD *)v7 + 158);
          }
          *((_DWORD *)v7 + 158) = v87 + 1;
          v88 = *((_QWORD *)v7 + 77);
          v89 = *(_DWORD *)(v88 + 32 * v86);
        }
        else
        {
          v88 = *((_QWORD *)v7 + 77);
          v89 = *(_DWORD *)(v88 + 32 * v86);
          *((_DWORD *)v7 + 159) = v89 & 0x7FFFFFFF;
        }
        v90 = 32 * v86;
        *(_DWORD *)(v88 + v90) = v89 | 0x80000000;
        v91 = *((_QWORD *)v7 + 76);
        *(_DWORD *)(*((_QWORD *)v7 + 77) + v90) = *(_DWORD *)(*((_QWORD *)v7 + 77) + 32 * v86) & 0x80000000 | *(_DWORD *)(v91 + 4 * v83);
        *(_QWORD *)(*((_QWORD *)v7 + 77) + 32 * v86 + 8) = v82;
        v92 = *((_QWORD *)v7 + 77) + 32 * v86;
        *(_QWORD *)(v92 + 16) = v79;
        *(_DWORD *)(v92 + 24) = v80;
        *(_DWORD *)(v92 + 28) = v81;
        *(_DWORD *)(v91 + 4 * v83) = v86;
        ++*((_DWORD *)v7 + 157);
        ++*((_DWORD *)v7 + 160);
      }
      else
      {
        v85 = *((_QWORD *)v7 + 77);
        while (*(_QWORD *)(v85 + 32 * v84 + 8) != v82)
        {
          v84 = *(_DWORD *)(v85 + 32 * v84) & 0x7FFFFFFF;
          if ((_DWORD)v84 == 0x7FFFFFFF)
            goto LABEL_104;
        }
      }
      v72 += 88;
    }
    while (v72 != v73);
  }
  v93 = atomic_load((unsigned __int8 *)&qword_2540FFB40);
  v94 = &qword_2540FFB38;
  v95 = (uint64_t)v211;
  if ((v93 & 1) == 0)
    goto LABEL_271;
LABEL_115:
  v96 = *v94;
  v97 = atomic_load((unsigned __int8 *)v94 + 24);
  if ((v97 & 1) == 0 && __cxa_guard_acquire(&qword_2540FFB50))
  {
    qword_2540FFB48 = (uint64_t)re::introspect_RenderGraphBufferHandle(0, v200);
    __cxa_guard_release(&qword_2540FFB50);
  }
  v98 = qword_2540FFB48;
  v99 = (uint64_t *)operator new(0x28uLL);
  *v99 = (uint64_t)&off_24ED37AE8;
  v99[1] = v96;
  v99[2] = v98;
  v99[3] = (uint64_t)v7;
  v99[4] = v95;
  v232 = v99;
  LODWORD(v222) = 0;
  v220 = 0u;
  v221 = 0u;
  *(_QWORD *)((char *)&v222 + 4) = 0x7FFFFFFFLL;
  v100 = *((_QWORD *)v7 + 42);
  if (v100)
  {
    v101 = *((_QWORD *)v7 + 44);
    v102 = v101 + 56 * v100;
    do
    {
      v103 = *(char **)(v101 + 8);
      if (v103)
      {
        v104 = *v103;
        if (*v103)
        {
          v105 = v103[1];
          if (v105)
          {
            v106 = (unsigned __int8 *)(v103 + 2);
            do
            {
              v104 = 31 * v104 + v105;
              v107 = *v106++;
              v105 = v107;
            }
            while (v107);
          }
        }
      }
      else
      {
        v104 = 0;
      }
      v108 = 2 * v104;
      *(_QWORD *)&v238 = 2 * v104;
      *((_QWORD *)&v238 + 1) = v103;
      *(_QWORD *)v233 = v101;
      v109 = 0xBF58476D1CE4E5B9 * (v104 & 0x7FFFFFFFFFFFFFFFLL ^ ((unint64_t)(2 * v104) >> 31));
      v110 = (0x94D049BB133111EBLL * (v109 ^ (v109 >> 27))) ^ ((0x94D049BB133111EBLL * (v109 ^ (v109 >> 27))) >> 31);
      if ((_QWORD)v220)
      {
        v111 = v110 % DWORD2(v221);
        v112 = *(unsigned int *)(*((_QWORD *)&v220 + 1) + 4 * v111);
        if ((_DWORD)v112 != 0x7FFFFFFF)
        {
          v113 = v221;
          do
          {
            v114 = v113 + 32 * v112;
            if ((*(_QWORD *)(v114 + 8) ^ (unint64_t)v108) <= 1)
            {
              v115 = *(const char **)(v114 + 16);
              if (v115 == v103 || !strcmp(v115, v103))
                goto LABEL_135;
            }
            v112 = *(_DWORD *)(v113 + 32 * v112) & 0x7FFFFFFF;
          }
          while (v112 != 0x7FFFFFFF);
        }
      }
      else
      {
        LODWORD(v111) = 0;
      }
      re::HashTable<re::StringID,re::RenderGraphDataNodeConnection const*,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::addAsMove((uint64_t)&v220, v111, v110, (const StringID *)&v238, v233);
      ++DWORD2(v222);
LABEL_135:
      re::StringID::destroyString((re::StringID *)&v238);
      v101 += 56;
      v95 = (uint64_t)v211;
    }
    while (v101 != v102);
  }
  v216[1] = 0;
  v216[2] = 0;
  v216[0] = &re::PassthroughAssetSerialization::instance(void)::instance;
  if (*((_QWORD *)v7 + 17))
  {
    v116 = 0;
    v117 = 0;
    do
    {
      v118 = (uint64_t *)(*((_QWORD *)v7 + 19) + 16 * (_QWORD)v116);
      re::RenderGraphNodeRegistry::registryItem((os_unfair_lock_s *)re::RenderGraphNodeRegistry::m_instance, *v118, (uint64_t)&v214);
      if ((_BYTE)v214)
      {
        v119 = (**v215)(v215);
        v120 = (const re::IntrospectionBase *)v119;
        v121 = atomic_load((unsigned __int8 *)&qword_2540FFB60);
        if ((v121 & 1) == 0)
        {
          v119 = __cxa_guard_acquire(&qword_2540FFB60);
          if ((_DWORD)v119)
          {
            qword_2540FFB58 = re::internal::getOrCreateInfo((re::internal *)"RenderGraphNodeDataPointer", (uint64_t (*)(re::internal *))re::allocInfo_RenderGraphNodeDataPointer, (re::IntrospectionBase *(*)(void))re::initInfo_RenderGraphNodeDataPointer, (void (*)(re::IntrospectionBase *))&qword_2540FFAB8, 0);
            __cxa_guard_release(&qword_2540FFB60);
          }
        }
        v95 = qword_2540FFB58;
        v212 = 0;
        v213 = 0;
        v122 = (uint64_t *)*((_QWORD *)v7 + 17);
        if (v122 <= (uint64_t *)v116)
          goto LABEL_269;
        v212 = *(const re::IntrospectionBase **)(*((_QWORD *)v7 + 19) + 16 * (_QWORD)v116);
        *(_QWORD *)&v238 = re::globalAllocators((re *)v119)[2];
        *((_QWORD *)&v238 + 1) = 0;
        *(_QWORD *)&v239 = v216;
        *(_QWORD *)&v238 = v213;
        re::DynamicArray<re::TransitionCondition *>::add(v205, &v238);
        v123 = v213;
        *((_QWORD *)v213 + 3) = *((_QWORD *)v205 + 10);
        *((_QWORD *)v123 + 4) = *((_QWORD *)v205 + 12);
        *((_QWORD *)v123 + 6) = *((_QWORD *)v205 + 13);
        v124 = (char *)v7 + 377;
        if ((*((_BYTE *)v7 + 376) & 1) != 0)
          v124 = (char *)*((_QWORD *)v7 + 48);
        *((_QWORD *)v123 + 5) = v124;
        *((_QWORD *)v123 + 7) = *((_QWORD *)v7 + 50);
        re::IntrospectionWalker::walk(v120, (const re::IntrospectionBase **)v123, (uint64_t)&v230);
        v125 = (char *)*((_QWORD *)v213 + 2);
        if (v125)
        {
          v126 = *v125;
          if (*v125)
          {
            v127 = v117;
            v128 = v125[1];
            if (v128)
            {
              v129 = (unsigned __int8 *)(v125 + 2);
              do
              {
                v126 = 31 * v126 + v128;
                v130 = *v129++;
                v128 = v130;
              }
              while (v130);
            }
          }
          else
          {
            v127 = v117;
          }
        }
        else
        {
          v127 = v117;
          v126 = 0;
        }
        v132 = 2 * v126;
        *(_QWORD *)&v238 = 2 * v126;
        *((_QWORD *)&v238 + 1) = v125;
        if (!(_QWORD)v220
          || (v133 = 0x94D049BB133111EBLL
                   * ((0xBF58476D1CE4E5B9 * (v126 & 0x7FFFFFFFFFFFFFFFLL ^ (v132 >> 31))) ^ ((0xBF58476D1CE4E5B9
                                                                                              * (v126 & 0x7FFFFFFFFFFFFFFFLL ^ (v132 >> 31))) >> 27)),
              v134 = *(unsigned int *)(*((_QWORD *)&v220 + 1) + 4 * ((v133 ^ (v133 >> 31)) % DWORD2(v221))),
              (_DWORD)v134 == 0x7FFFFFFF))
        {
LABEL_163:
          re::StringID::destroyString((re::StringID *)&v238);
          v95 = (uint64_t)v211;
        }
        else
        {
          v135 = v221;
          while (1)
          {
            v136 = v135 + 32 * v134;
            if ((*(_QWORD *)(v136 + 8) ^ v132) <= 1)
            {
              v137 = *(const char **)(v136 + 16);
              if (v137 == v125 || !strcmp(v137, v125))
                break;
            }
            v134 = *(_DWORD *)(v135 + 32 * v134) & 0x7FFFFFFF;
            if (v134 == 0x7FFFFFFF)
              goto LABEL_163;
          }
          re::StringID::destroyString((re::StringID *)&v238);
          v95 = (uint64_t)v211;
          re::RenderGraphFile::connectionWalker((uint64_t)v7, (uint64_t)v211, v207, v120, (const re::IntrospectionBase **)v213, *(_QWORD *)(v135 + 32 * v134 + 24) + 16);
        }
        v122 = (uint64_t *)*((_QWORD *)v7 + 90);
        if (v122 <= (uint64_t *)v116)
          goto LABEL_270;
        v117 = v127;
        v138 = v213;
        v139 = *((_QWORD *)v7 + 91) + ((_QWORD)v116 << 7);
        if (*(_QWORD *)(v139 + 56))
        {
          re::makeBindNode(v120, v213, (uint64_t)v233);
          v140 = *(_QWORD *)(v139 + 56);
          if (v140)
          {
            v141 = *(const char ***)(v139 + 72);
            v116 = &v141[8 * v140];
            while (1)
            {
              v142 = (uint64_t)*v141;
              v143 = strlen(v141[7]);
              v227 = (uint64_t *)v141[7];
              v228 = v143;
              re::BindNode::bindPoint((re::BindNode **)v233, v142, (uint64_t *)&v227, (uint64_t)&v238);
              v144 = (const re::IntrospectionBase **)re::BindPoint::valueUntyped((re::BindPoint *)&v238);
              v95 = re::BindPoint::valueUntyped((re::BindPoint *)v141);
              v228 = 0;
              v229 = 0;
              re::DynamicArray<re::BindPoint::BindPointData>::deinit((uint64_t)&v238 + 8);
              re::DynamicArray<re::BindPoint::BindPointData>::deinit((uint64_t)&v238 + 8);
              v141 += 8;
              if (v141 == v116)
                goto LABEL_170;
            }
            re::internal::assertLog((re::internal *)4, v145, "assertion failure: '%s' (%s:line %i) Failed to perform introspection deep copy when applying RenderGraphFile runtime settings.", "copyResult", "applyRuntimeNodeSetting", 733);
            _os_crash();
            __break(1u);
LABEL_269:
            v227 = 0;
            v241 = 0u;
            v242 = 0u;
            v239 = 0u;
            v240 = 0u;
            v238 = 0u;
            os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
            *(_DWORD *)v233 = 136315906;
            *(_QWORD *)&v233[4] = "operator[]";
            *(_WORD *)&v233[12] = 1024;
            *(_DWORD *)&v233[14] = 797;
            v234 = 2048;
            v235 = v116;
            v236 = 2048;
            v237 = v122;
            _os_log_send_and_compose_impl();
            _os_crash_msg();
            __break(1u);
LABEL_270:
            v227 = 0;
            v94 = (uint64_t *)v233;
            v241 = 0u;
            v242 = 0u;
            v239 = 0u;
            v240 = 0u;
            v238 = 0u;
            v7 = (re::RenderGraphFile *)MEMORY[0x24BDACB70];
            os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
            *(_DWORD *)v233 = 136315906;
            *(_QWORD *)&v233[4] = "operator[]";
            *(_WORD *)&v233[12] = 1024;
            *(_DWORD *)&v233[14] = 476;
            v234 = 2048;
            v235 = v116;
            v236 = 2048;
            v237 = v122;
            LODWORD(v201) = 38;
            _os_log_send_and_compose_impl();
            _os_crash_msg();
            __break(1u);
LABEL_271:
            if (__cxa_guard_acquire(&qword_2540FFB40))
            {
              *v94 = (uint64_t)re::introspect_RenderGraphTargetHandle(0, v199);
              __cxa_guard_release(v94 + 1);
            }
            goto LABEL_115;
          }
LABEL_170:
          re::BindNode::deinit((re::BindNode *)v233);
          v138 = v213;
          v95 = (uint64_t)v211;
        }
        v146 = *((_QWORD *)v138 + 1) >> 1;
        v147 = *v206;
        if (!*v206
          || (v147 = v146 % *((unsigned int *)v7 + 132),
              v148 = *(unsigned int *)(*((_QWORD *)v7 + 64) + 4 * v147),
              (_DWORD)v148 == 0x7FFFFFFF))
        {
LABEL_176:
          v150 = *((unsigned int *)v7 + 135);
          if ((_DWORD)v150 == 0x7FFFFFFF)
          {
            v150 = *((unsigned int *)v7 + 134);
            v151 = v150;
            if ((_DWORD)v150 == *((_DWORD *)v7 + 132))
            {
              re::HashTable<unsigned long long,re::RenderGraphNode *,re::PrecalculatedHash,re::EqualTo<unsigned long long>,false,false>::setCapacity((uint64_t)v206, 2 * *(_DWORD *)v203);
              v147 = v146 % *((unsigned int *)v7 + 132);
              v151 = *((_DWORD *)v7 + 134);
              v138 = v213;
            }
            *((_DWORD *)v7 + 134) = v151 + 1;
            v152 = *((_QWORD *)v7 + 65);
            v153 = *(_DWORD *)(v152 + 24 * v150);
          }
          else
          {
            v152 = *((_QWORD *)v7 + 65);
            v153 = *(_DWORD *)(v152 + 24 * v150);
            *((_DWORD *)v7 + 135) = v153 & 0x7FFFFFFF;
          }
          v154 = 24 * v150;
          *(_DWORD *)(v152 + v154) = v153 | 0x80000000;
          *(_DWORD *)(*((_QWORD *)v7 + 65) + v154) = *(_DWORD *)(*((_QWORD *)v7 + 65) + 24 * v150) & 0x80000000 | *(_DWORD *)(*((_QWORD *)v7 + 64) + 4 * v147);
          *(_QWORD *)(*((_QWORD *)v7 + 65) + 24 * v150 + 8) = v146;
          *(_QWORD *)(*((_QWORD *)v7 + 65) + 24 * v150 + 16) = v138;
          *(_DWORD *)(*((_QWORD *)v7 + 64) + 4 * v147) = v150;
          ++*((_DWORD *)v7 + 133);
          ++*((_DWORD *)v7 + 136);
        }
        else
        {
          v149 = *((_QWORD *)v7 + 65);
          while (*(_QWORD *)(v149 + 24 * v148 + 8) != v146)
          {
            LODWORD(v148) = *(_DWORD *)(v149 + 24 * v148) & 0x7FFFFFFF;
            if ((_DWORD)v148 == 0x7FFFFFFF)
              goto LABEL_176;
          }
        }
      }
      else
      {
        v131 = (char *)v7 + 17;
        if ((*((_BYTE *)v7 + 16) & 1) != 0)
          v131 = (char *)*((_QWORD *)v7 + 3);
        re::DynamicString::format((re::DynamicString *)"Node found with unregistered type in RenderGraph %s", (re::DynamicString *)&v238, v131, v201);
        re::RenderFrame::addError(v95, (uint64_t)&v238);
        if ((_QWORD)v238 && (BYTE8(v238) & 1) != 0)
          (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)v238 + 40))(v238, v239);
      }
      v116 = (const char **)++v117;
    }
    while (*((_QWORD *)v7 + 17) > (unint64_t)v117);
  }
  v155 = *((_QWORD *)v7 + 37);
  if (v155)
  {
    v156 = (_QWORD *)*((_QWORD *)v7 + 39);
    v157 = 8 * v155;
    do
    {
      (*(void (**)(_QWORD, uint64_t, unint64_t *, unint64_t *, unint64_t *))(*(_QWORD *)*v156 + 24))(*v156, v95, v210, v209, v206);
      ++v156;
      v157 -= 8;
    }
    while (v157);
  }
  v158 = *((_QWORD *)v7 + 27);
  if (v158)
  {
    v159 = (_QWORD *)*((_QWORD *)v7 + 29);
    v160 = 48 * v158;
    do
    {
      v161 = v159[2] >> 1;
      v162 = (double *)re::HashTable<unsigned long long,re::RenderGraphTargetHandle,re::PrecalculatedHash,re::EqualTo<unsigned long long>,false,false>::tryGet((uint64_t)v210, v161);
      if (v162)
      {
        v163 = (uint64_t *)v162;
        *(_QWORD *)&v238 = *v159 >> 1;
        if (*(_BYTE *)v159[5])
          v164 = (char *)v159[5];
        else
          v164 = __s;
        re::RenderFrame::inheritLaneProperties((re::RenderFrame *)v95, (uint64_t *)&v238, v162, v164);
        v165 = *(_DWORD *)(re::RenderGraphResourceDescriptions::targetDescription((re *)(v95 + 3448), v163) + 80);
        if (v165 != -1)
        {
          re::RenderGraphResourceDescriptions::resourceFromIndex((re::StringID *)(v95 + 3448), v165, &v238);
          *(_QWORD *)v233 = *((_QWORD *)&v238 + 1) >> 1;
          *(_QWORD *)&v233[8] = *((_QWORD *)&v239 + 1);
          v227 = (uint64_t *)(*v159 >> 1);
          if (*(_BYTE *)v159[5])
            v166 = (char *)v159[5];
          else
            v166 = __s;
          re::RenderFrame::inheritLaneProperties((re::RenderFrame *)v95, (uint64_t *)&v227, (double *)v233, v166);
          re::StringID::destroyString((re::StringID *)((char *)&v238 + 8));
        }
      }
      else
      {
        v167 = (double *)re::HashTable<unsigned long long,re::RenderGraphTargetHandle,re::PrecalculatedHash,re::EqualTo<unsigned long long>,false,false>::tryGet((uint64_t)v209, v161);
        if (v167)
        {
          *(_QWORD *)&v238 = *v159 >> 1;
          if (*(_BYTE *)v159[5])
            v168 = (char *)v159[5];
          else
            v168 = __s;
          re::RenderFrame::inheritLaneProperties((re::RenderFrame *)v95, (uint64_t *)&v238, v167, v168);
        }
      }
      v159 += 6;
      v160 -= 48;
    }
    while (v160);
  }
  v169 = *((_QWORD *)v7 + 32);
  if (v169)
  {
    v170 = (_QWORD *)*((_QWORD *)v7 + 34);
    v171 = &v170[6 * v169];
    do
    {
      v172 = v170[2] >> 1;
      if (*v210)
      {
        v173 = *(unsigned int *)(*((_QWORD *)v7 + 70) + 4 * (v172 % *((unsigned int *)v7 + 144)));
        if ((_DWORD)v173 != 0x7FFFFFFF)
        {
          v180 = *((_QWORD *)v7 + 71);
          v181 = *(_QWORD *)(v180 + 32 * v173 + 8);
          v182 = *(unsigned int *)(*((_QWORD *)v7 + 70) + 4 * (v172 % *((unsigned int *)v7 + 144)));
          if (v181 == v172)
          {
            v183 = *(unsigned int *)(*((_QWORD *)v7 + 70) + 4 * (v172 % *((unsigned int *)v7 + 144)));
LABEL_228:
            v184 = v180 + 32 * v183;
            *(_QWORD *)v233 = 0;
            *(_QWORD *)&v233[8] = -1;
            *(_QWORD *)v233 = *(_QWORD *)(v184 + 16);
            *(_QWORD *)&v233[8] = *(_QWORD *)(v184 + 24);
            v185 = *(_DWORD *)(re::RenderGraphResourceDescriptions::targetDescription((re *)(v95 + 3448), (uint64_t *)v233)+ 80);
            if (v185 != -1)
            {
              re::RenderGraphResourceDescriptions::resourceFromIndex((re::StringID *)(v95 + 3448), v185, &v238);
              v227 = (uint64_t *)(*((_QWORD *)&v238 + 1) >> 1);
              v228 = *((_QWORD *)&v239 + 1);
              v214 = *v170 >> 1;
              if (*(_BYTE *)v170[5])
                v186 = (char *)v170[5];
              else
                v186 = __s;
              re::RenderFrame::inheritLaneProperties((re::RenderFrame *)v95, &v214, (double *)&v227, v186);
              re::StringID::destroyString((re::StringID *)((char *)&v238 + 8));
            }
            *(_QWORD *)&v238 = *v170 >> 1;
            if (*(_BYTE *)v170[5])
              v187 = (char *)v170[5];
            else
              v187 = __s;
            re::RenderFrame::addTargetOutput((re::RenderFrame *)v95, (uint64_t *)&v238, (double *)v233, v187);
            goto LABEL_237;
          }
          while (1)
          {
            v182 = *(_DWORD *)(v180 + 32 * v182) & 0x7FFFFFFF;
            if ((_DWORD)v182 == 0x7FFFFFFF)
              break;
            if (*(_QWORD *)(v180 + 32 * v182 + 8) == v172)
            {
              while (1)
              {
                v183 = v173;
                if (v181 == v172)
                  break;
                v173 = *(_DWORD *)(v180 + 32 * v173) & 0x7FFFFFFF;
                v183 = 0x7FFFFFFFLL;
                if (v173 == 0x7FFFFFFF)
                  break;
                v181 = *(_QWORD *)(v180 + 32 * v173 + 8);
              }
              goto LABEL_228;
            }
          }
        }
      }
      if (*v209)
      {
        v174 = *(unsigned int *)(*((_QWORD *)v7 + 76) + 4 * (v172 % *((unsigned int *)v7 + 156)));
        if ((_DWORD)v174 != 0x7FFFFFFF)
        {
          v175 = *((_QWORD *)v7 + 77);
          v176 = *(_QWORD *)(v175 + 32 * v174 + 8);
          v177 = *(unsigned int *)(*((_QWORD *)v7 + 76) + 4 * (v172 % *((unsigned int *)v7 + 156)));
          if (v176 == v172)
          {
            v178 = *(unsigned int *)(*((_QWORD *)v7 + 76) + 4 * (v172 % *((unsigned int *)v7 + 156)));
LABEL_215:
            *(_QWORD *)&v238 = 0;
            *((_QWORD *)&v238 + 1) = -1;
            v238 = *(_OWORD *)(v175 + 32 * v178 + 16);
            *(_QWORD *)v233 = *v170 >> 1;
            if (*(_BYTE *)v170[5])
              v179 = (char *)v170[5];
            else
              v179 = __s;
            re::RenderFrame::addBufferOutput((re::RenderFrame *)v95, (uint64_t *)v233, (double *)&v238, v179);
          }
          else
          {
            while (1)
            {
              v177 = *(_DWORD *)(v175 + 32 * v177) & 0x7FFFFFFF;
              if ((_DWORD)v177 == 0x7FFFFFFF)
                break;
              if (*(_QWORD *)(v175 + 32 * v177 + 8) == v172)
              {
                while (1)
                {
                  v178 = v174;
                  if (v176 == v172)
                    break;
                  v174 = *(_DWORD *)(v175 + 32 * v174) & 0x7FFFFFFF;
                  v178 = 0x7FFFFFFFLL;
                  if (v174 == 0x7FFFFFFF)
                    break;
                  v176 = *(_QWORD *)(v175 + 32 * v174 + 8);
                }
                goto LABEL_215;
              }
            }
          }
        }
      }
LABEL_237:
      v170 += 6;
    }
    while (v170 != v171);
  }
  v188 = *((unsigned int *)v7 + 134);
  if ((_DWORD)v188)
  {
    v189 = 0;
    v190 = (int *)*((_QWORD *)v7 + 65);
    while (1)
    {
      v191 = *v190;
      v190 += 6;
      if (v191 < 0)
        break;
      if (v188 == ++v189)
      {
        LODWORD(v189) = *((_DWORD *)v7 + 134);
        break;
      }
    }
  }
  else
  {
    LODWORD(v189) = 0;
  }
  if ((_DWORD)v188 != (_DWORD)v189)
  {
    v192 = v189;
    do
    {
      v193 = *((_QWORD *)v7 + 65) + 24 * v192;
      (*(void (**)(_QWORD, _QWORD, _QWORD, uint64_t))(**(_QWORD **)(v193 + 16) + 80))(*(_QWORD *)(v193 + 16), *((_QWORD *)v205 + 10), *((_QWORD *)v205 + 12), v95);
      *(_BYTE *)(*(_QWORD *)(v193 + 16) + 65) = 1;
      if (*((_DWORD *)v7 + 134) <= (v189 + 1))
        v194 = v189 + 1;
      else
        v194 = *((_DWORD *)v7 + 134);
      while (1)
      {
        v192 = (v189 + 1);
        if (v194 - 1 == (_DWORD)v189)
          break;
        LODWORD(v189) = v189 + 1;
        v195 = v192;
        if ((*(_DWORD *)(*((_QWORD *)v7 + 65) + 24 * v192) & 0x80000000) != 0)
          goto LABEL_261;
      }
      v195 = v194;
LABEL_261:
      LODWORD(v189) = v195;
    }
    while ((_DWORD)v188 != v195);
  }
  v196.n128_f64[0] = re::HashTable<re::StringID,re::DataArrayHandle<re::RigGraphOperatorDefinition>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::deinit((uint64_t *)&v220);
  result = v232;
  if (v232 == &v230)
  {
    v198 = 4;
    result = &v230;
  }
  else
  {
    if (!v232)
      return result;
    v198 = 5;
  }
  return (uint64_t *)(*(uint64_t (**)(__n128))(*result + 8 * v198))(v196);
}

void sub_2253447A4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,char a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,char a51,uint64_t a52,uint64_t a53,uint64_t a54,char a55)
{
  _Unwind_Resume(exception_object);
}

void re::HashTable<unsigned long long,re::RenderGraphNode *,re::PrecalculatedHash,re::EqualTo<unsigned long long>,false,false>::setCapacity(uint64_t a1, unsigned int a2)
{
  uint64_t v4;
  __int128 v5;
  uint64_t v6;
  __int128 v7;
  unsigned int v8;
  __int128 v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  unint64_t *v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  int v20;
  uint64_t v21;
  signed int v22;
  _BYTE v23[44];

  v4 = *(_QWORD *)a1;
  if (*(_QWORD *)a1)
  {
    if (a2 && *(_DWORD *)(a1 + 24) != a2 && *(_DWORD *)(a1 + 28) <= a2)
    {
      memset(v23, 0, 36);
      *(_QWORD *)&v23[36] = 0x7FFFFFFFLL;
      re::HashTable<unsigned long,re::RenderGraphData *,re::PrecalculatedHash,re::EqualTo<unsigned long>,false,false>::init((uint64_t)v23, v4, a2);
      v5 = *(_OWORD *)a1;
      *(_QWORD *)a1 = *(_QWORD *)v23;
      v6 = *(_QWORD *)(a1 + 16);
      v7 = *(_OWORD *)&v23[8];
      *(_OWORD *)v23 = v5;
      *(_QWORD *)&v23[16] = v6;
      *(_OWORD *)(a1 + 8) = v7;
      v9 = *(_OWORD *)&v23[24];
      *(_OWORD *)&v23[24] = *(_OWORD *)(a1 + 24);
      v8 = *(_DWORD *)&v23[32];
      *(_OWORD *)(a1 + 24) = v9;
      v10 = v8;
      if (v8)
      {
        v11 = DWORD1(v9);
        v12 = v7;
        v13 = (unint64_t *)(v6 + 8);
        do
        {
          if ((*(_DWORD *)(v13 - 1) & 0x80000000) != 0)
          {
            v14 = *v13;
            v15 = *(unsigned int *)(a1 + 24);
            v16 = *v13 % v15;
            v17 = *(unsigned int *)(a1 + 36);
            if ((_DWORD)v17 == 0x7FFFFFFF)
            {
              v17 = *(unsigned int *)(a1 + 32);
              v18 = v17;
              if ((_DWORD)v17 == (_DWORD)v15)
              {
                re::HashTable<unsigned long long,re::RenderGraphNode *,re::PrecalculatedHash,re::EqualTo<unsigned long long>,false,false>::setCapacity(a1, (2 * v11));
                v16 = v14 % *(unsigned int *)(a1 + 24);
                v18 = *(_DWORD *)(a1 + 32);
                v12 = *(_QWORD *)(a1 + 8);
                v14 = *v13;
              }
              *(_DWORD *)(a1 + 32) = v18 + 1;
              v19 = *(_QWORD *)(a1 + 16);
              v20 = *(_DWORD *)(v19 + 24 * v17);
            }
            else
            {
              v19 = *(_QWORD *)(a1 + 16);
              v20 = *(_DWORD *)(v19 + 24 * v17);
              *(_DWORD *)(a1 + 36) = v20 & 0x7FFFFFFF;
            }
            v21 = 24 * v17;
            *(_DWORD *)(v19 + v21) = v20 | 0x80000000;
            *(_DWORD *)(*(_QWORD *)(a1 + 16) + v21) = *(_DWORD *)(*(_QWORD *)(a1 + 16) + 24 * v17) & 0x80000000 | *(_DWORD *)(v12 + 4 * v16);
            *(_QWORD *)(*(_QWORD *)(a1 + 16) + 24 * v17 + 8) = v14;
            *(_QWORD *)(*(_QWORD *)(a1 + 16) + 24 * v17 + 16) = v13[1];
            v12 = *(_QWORD *)(a1 + 8);
            *(_DWORD *)(v12 + 4 * v16) = v17;
            v11 = *(_DWORD *)(a1 + 28) + 1;
            *(_DWORD *)(a1 + 28) = v11;
          }
          v13 += 3;
          --v10;
        }
        while (v10);
      }
      re::HashTable<re::internal::SerializeFuncKey,BOOL (*)(re::Serializer<re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL),re::internal::HashSerializeFuncKey,re::EqualTo<re::internal::SerializeFuncKey>,false,true>::deinit((uint64_t *)v23);
    }
  }
  else
  {
    if (a2)
      v22 = a2;
    else
      v22 = 3;
  }
}

void sub_225344A90(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  re::HashTable<re::internal::SerializeFuncKey,BOOL (*)(re::Serializer<re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL),re::internal::HashSerializeFuncKey,re::EqualTo<re::internal::SerializeFuncKey>,false,true>::deinit(&a9);
  _Unwind_Resume(a1);
}

void re::HashTable<unsigned long long,re::RenderGraphTargetHandle,re::PrecalculatedHash,re::EqualTo<unsigned long long>,false,false>::setCapacity(uint64_t a1, unsigned int a2)
{
  uint64_t v4;
  __int128 v5;
  uint64_t v6;
  __int128 v7;
  unsigned int v8;
  __int128 v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  _QWORD *v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  signed int v23;
  _BYTE v24[44];

  v4 = *(_QWORD *)a1;
  if (*(_QWORD *)a1)
  {
    if (a2 && *(_DWORD *)(a1 + 24) != a2 && *(_DWORD *)(a1 + 28) <= a2)
    {
      memset(v24, 0, 36);
      *(_QWORD *)&v24[36] = 0x7FFFFFFFLL;
      re::HashTable<unsigned long long,re::RenderGraphTargetHandle,re::PrecalculatedHash,re::EqualTo<unsigned long long>,false,false>::init((uint64_t)v24, v4, a2);
      v5 = *(_OWORD *)a1;
      *(_QWORD *)a1 = *(_QWORD *)v24;
      v6 = *(_QWORD *)(a1 + 16);
      v7 = *(_OWORD *)&v24[8];
      *(_OWORD *)v24 = v5;
      *(_QWORD *)&v24[16] = v6;
      *(_OWORD *)(a1 + 8) = v7;
      v9 = *(_OWORD *)&v24[24];
      *(_OWORD *)&v24[24] = *(_OWORD *)(a1 + 24);
      v8 = *(_DWORD *)&v24[32];
      *(_OWORD *)(a1 + 24) = v9;
      v10 = v8;
      if (v8)
      {
        v11 = DWORD1(v9);
        v12 = v7;
        v13 = (_QWORD *)(v6 + 16);
        do
        {
          if ((*(_DWORD *)(v13 - 2) & 0x80000000) != 0)
          {
            v14 = *(v13 - 1);
            v15 = *(unsigned int *)(a1 + 24);
            v16 = v14 % v15;
            v17 = *(unsigned int *)(a1 + 36);
            if ((_DWORD)v17 == 0x7FFFFFFF)
            {
              v17 = *(unsigned int *)(a1 + 32);
              v18 = v17;
              if ((_DWORD)v17 == (_DWORD)v15)
              {
                re::HashTable<unsigned long long,re::RenderGraphTargetHandle,re::PrecalculatedHash,re::EqualTo<unsigned long long>,false,false>::setCapacity(a1, (2 * v11));
                v16 = v14 % *(unsigned int *)(a1 + 24);
                v18 = *(_DWORD *)(a1 + 32);
                v12 = *(_QWORD *)(a1 + 8);
                v14 = *(v13 - 1);
              }
              *(_DWORD *)(a1 + 32) = v18 + 1;
              v19 = *(_QWORD *)(a1 + 16);
              v20 = *(_DWORD *)(v19 + 32 * v17);
            }
            else
            {
              v19 = *(_QWORD *)(a1 + 16);
              v20 = *(_DWORD *)(v19 + 32 * v17);
              *(_DWORD *)(a1 + 36) = v20 & 0x7FFFFFFF;
            }
            v21 = 32 * v17;
            *(_DWORD *)(v19 + v21) = v20 | 0x80000000;
            *(_DWORD *)(*(_QWORD *)(a1 + 16) + v21) = *(_DWORD *)(*(_QWORD *)(a1 + 16) + 32 * v17) & 0x80000000 | *(_DWORD *)(v12 + 4 * v16);
            *(_QWORD *)(*(_QWORD *)(a1 + 16) + 32 * v17 + 8) = v14;
            v22 = *(_QWORD *)(a1 + 16) + 32 * v17;
            *(_QWORD *)(v22 + 16) = 0;
            *(_QWORD *)(v22 + 24) = -1;
            *(_QWORD *)(v22 + 16) = *v13;
            *(_QWORD *)(v22 + 24) = v13[1];
            *(_DWORD *)(v12 + 4 * v16) = v17;
            v11 = *(_DWORD *)(a1 + 28) + 1;
            *(_DWORD *)(a1 + 28) = v11;
          }
          v13 += 4;
          --v10;
        }
        while (v10);
      }
      re::HashTable<unsigned long long,re::RenderGraphTargetHandle,re::PrecalculatedHash,re::EqualTo<unsigned long long>,false,false>::deinit((uint64_t *)v24);
    }
  }
  else
  {
    if (a2)
      v23 = a2;
    else
      v23 = 3;
  }
}

void sub_225344CA0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  re::HashTable<unsigned long long,re::RenderGraphTargetHandle,re::PrecalculatedHash,re::EqualTo<unsigned long long>,false,false>::deinit(&a9);
  _Unwind_Resume(a1);
}

void re::HashTable<unsigned long long,re::RenderGraphBufferHandle,re::PrecalculatedHash,re::EqualTo<unsigned long long>,false,false>::setCapacity(uint64_t a1, unsigned int a2)
{
  uint64_t v4;
  __int128 v5;
  uint64_t v6;
  __int128 v7;
  unsigned int v8;
  __int128 v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  _QWORD *v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  signed int v23;
  _BYTE v24[44];

  v4 = *(_QWORD *)a1;
  if (*(_QWORD *)a1)
  {
    if (a2 && *(_DWORD *)(a1 + 24) != a2 && *(_DWORD *)(a1 + 28) <= a2)
    {
      memset(v24, 0, 36);
      *(_QWORD *)&v24[36] = 0x7FFFFFFFLL;
      re::HashTable<unsigned long long,re::RenderGraphTargetHandle,re::PrecalculatedHash,re::EqualTo<unsigned long long>,false,false>::init((uint64_t)v24, v4, a2);
      v5 = *(_OWORD *)a1;
      *(_QWORD *)a1 = *(_QWORD *)v24;
      v6 = *(_QWORD *)(a1 + 16);
      v7 = *(_OWORD *)&v24[8];
      *(_OWORD *)v24 = v5;
      *(_QWORD *)&v24[16] = v6;
      *(_OWORD *)(a1 + 8) = v7;
      v9 = *(_OWORD *)&v24[24];
      *(_OWORD *)&v24[24] = *(_OWORD *)(a1 + 24);
      v8 = *(_DWORD *)&v24[32];
      *(_OWORD *)(a1 + 24) = v9;
      v10 = v8;
      if (v8)
      {
        v11 = DWORD1(v9);
        v12 = v7;
        v13 = (_QWORD *)(v6 + 16);
        do
        {
          if ((*(_DWORD *)(v13 - 2) & 0x80000000) != 0)
          {
            v14 = *(v13 - 1);
            v15 = *(unsigned int *)(a1 + 24);
            v16 = v14 % v15;
            v17 = *(unsigned int *)(a1 + 36);
            if ((_DWORD)v17 == 0x7FFFFFFF)
            {
              v17 = *(unsigned int *)(a1 + 32);
              v18 = v17;
              if ((_DWORD)v17 == (_DWORD)v15)
              {
                re::HashTable<unsigned long long,re::RenderGraphBufferHandle,re::PrecalculatedHash,re::EqualTo<unsigned long long>,false,false>::setCapacity(a1, (2 * v11));
                v16 = v14 % *(unsigned int *)(a1 + 24);
                v18 = *(_DWORD *)(a1 + 32);
                v12 = *(_QWORD *)(a1 + 8);
                v14 = *(v13 - 1);
              }
              *(_DWORD *)(a1 + 32) = v18 + 1;
              v19 = *(_QWORD *)(a1 + 16);
              v20 = *(_DWORD *)(v19 + 32 * v17);
            }
            else
            {
              v19 = *(_QWORD *)(a1 + 16);
              v20 = *(_DWORD *)(v19 + 32 * v17);
              *(_DWORD *)(a1 + 36) = v20 & 0x7FFFFFFF;
            }
            v21 = 32 * v17;
            *(_DWORD *)(v19 + v21) = v20 | 0x80000000;
            *(_DWORD *)(*(_QWORD *)(a1 + 16) + v21) = *(_DWORD *)(*(_QWORD *)(a1 + 16) + 32 * v17) & 0x80000000 | *(_DWORD *)(v12 + 4 * v16);
            *(_QWORD *)(*(_QWORD *)(a1 + 16) + 32 * v17 + 8) = v14;
            v22 = *(_QWORD *)(a1 + 16) + 32 * v17;
            *(_QWORD *)(v22 + 16) = 0;
            *(_QWORD *)(v22 + 24) = -1;
            *(_QWORD *)(v22 + 16) = *v13;
            *(_QWORD *)(v22 + 24) = v13[1];
            *(_DWORD *)(v12 + 4 * v16) = v17;
            v11 = *(_DWORD *)(a1 + 28) + 1;
            *(_DWORD *)(a1 + 28) = v11;
          }
          v13 += 4;
          --v10;
        }
        while (v10);
      }
      re::HashTable<unsigned long long,re::RenderGraphTargetHandle,re::PrecalculatedHash,re::EqualTo<unsigned long long>,false,false>::deinit((uint64_t *)v24);
    }
  }
  else
  {
    if (a2)
      v23 = a2;
    else
      v23 = 3;
  }
}

void sub_225344EB0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  re::HashTable<unsigned long long,re::RenderGraphTargetHandle,re::PrecalculatedHash,re::EqualTo<unsigned long long>,false,false>::deinit(&a9);
  _Unwind_Resume(a1);
}

void re::HashTable<unsigned long long,re::RenderGraphInputData const*,re::PrecalculatedHash,re::EqualTo<unsigned long long>,false,false>::setCapacity(uint64_t a1, unsigned int a2)
{
  uint64_t v4;
  __int128 v5;
  uint64_t v6;
  uint64_t v7;
  unsigned int v8;
  __int128 v9;
  uint64_t v10;
  unint64_t *v11;
  signed int v12;
  _BYTE v13[44];

  v4 = *(_QWORD *)a1;
  if (*(_QWORD *)a1)
  {
    if (a2 && *(_DWORD *)(a1 + 24) != a2 && *(_DWORD *)(a1 + 28) <= a2)
    {
      memset(v13, 0, 36);
      *(_QWORD *)&v13[36] = 0x7FFFFFFFLL;
      re::HashTable<unsigned long,re::RenderGraphData *,re::PrecalculatedHash,re::EqualTo<unsigned long>,false,false>::init((uint64_t)v13, v4, a2);
      v5 = *(_OWORD *)v13;
      *(_OWORD *)v13 = *(_OWORD *)a1;
      *(_OWORD *)a1 = v5;
      v6 = *(_QWORD *)&v13[16];
      v7 = *(_QWORD *)(a1 + 16);
      *(_QWORD *)&v13[16] = v7;
      *(_QWORD *)(a1 + 16) = v6;
      v9 = *(_OWORD *)&v13[24];
      *(_OWORD *)&v13[24] = *(_OWORD *)(a1 + 24);
      v8 = *(_DWORD *)&v13[32];
      *(_OWORD *)(a1 + 24) = v9;
      v10 = v8;
      if (v8)
      {
        v11 = (unint64_t *)(v7 + 8);
        do
        {
          if ((*(_DWORD *)(v11 - 1) & 0x80000000) != 0)
            re::HashTable<unsigned long long,re::RenderGraphInputData const*,re::PrecalculatedHash,re::EqualTo<unsigned long long>,false,false>::addAsMove(a1, *v11 % *(unsigned int *)(a1 + 24), *v11, v11, v11 + 1);
          v11 += 3;
          --v10;
        }
        while (v10);
      }
      re::HashTable<re::internal::SerializeFuncKey,BOOL (*)(re::Serializer<re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL),re::internal::HashSerializeFuncKey,re::EqualTo<re::internal::SerializeFuncKey>,false,true>::deinit((uint64_t *)v13);
    }
  }
  else
  {
    if (a2)
      v12 = a2;
    else
      v12 = 3;
  }
}

void sub_225344FE4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  re::HashTable<re::internal::SerializeFuncKey,BOOL (*)(re::Serializer<re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL),re::internal::HashSerializeFuncKey,re::EqualTo<re::internal::SerializeFuncKey>,false,true>::deinit(&a9);
  _Unwind_Resume(a1);
}

uint64_t re::HashTable<unsigned long long,re::RenderGraphInputData const*,re::PrecalculatedHash,re::EqualTo<unsigned long long>,false,false>::tryGet(uint64_t a1, unint64_t a2)
{
  uint64_t v2;
  uint64_t v4;

  if (!*(_QWORD *)a1)
    return 0;
  v2 = *(unsigned int *)(*(_QWORD *)(a1 + 8) + 4 * (a2 % *(unsigned int *)(a1 + 24)));
  if ((_DWORD)v2 == 0x7FFFFFFF)
    return 0;
  v4 = *(_QWORD *)(a1 + 16);
  if (*(_QWORD *)(v4 + 24 * v2 + 8) != a2)
  {
    while (1)
    {
      LODWORD(v2) = *(_DWORD *)(v4 + 24 * v2) & 0x7FFFFFFF;
      if ((_DWORD)v2 == 0x7FFFFFFF)
        break;
      if (*(_QWORD *)(v4 + 24 * v2 + 8) == a2)
        return v4 + 24 * v2 + 16;
    }
    return 0;
  }
  return v4 + 24 * v2 + 16;
}

uint64_t re::InlineString<64ul>::format@<X0>(uint64_t a1@<X8>, char a2)
{
  uint64_t result;
  uint64_t v4;
  unint64_t v5;

  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 8) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_QWORD *)a1 = 0;
  result = vsnprintf((char *)(a1 + 8), 0x40uLL, "%s[MSAA]", &a2);
  if ((result & 0x80000000) != 0)
  {
    *(_BYTE *)(a1 + *(_QWORD *)a1 + 8) = 0;
  }
  else
  {
    v5 = *(_QWORD *)a1 + result;
    if (v5 >= 0x40)
    {
      re::internal::assertLog((re::internal *)4, v4, "assertion failure: '%s' (%s:line %i) ", "m_length + result < m_capacity", "vappendf", 446);
      result = _os_crash();
      __break(1u);
    }
    else
    {
      *(_QWORD *)a1 = v5;
    }
  }
  return result;
}

void sub_225345140(_Unwind_Exception *a1)
{
  _QWORD *v1;

  *v1 = 0;
  _Unwind_Resume(a1);
}

uint64_t re::RenderFrame::addError(uint64_t a1, uint64_t a2)
{
  __n128 v2;
  uint64_t result;
  __n128 v4;
  uint64_t v5;
  __int128 v6;
  uint64_t v7;

  v4.n128_u64[0] = 2000;
  v4.n128_u64[1] = (unint64_t)&re::GraphicsErrorCategory(void)::instance;
  v5 = *(_QWORD *)a2;
  v7 = *(_QWORD *)(a2 + 24);
  v6 = *(_OWORD *)(a2 + 8);
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)(a2 + 24) = 0;
  *(_QWORD *)a2 = 0;
  *(_QWORD *)(a2 + 8) = 0;
  v2 = re::DynamicArray<re::DetailedError>::add((_anonymous_namespace_ *)(a1 + 3152), &v4);
  result = v5;
  if (v5)
  {
    if ((v6 & 1) != 0)
      return (*(uint64_t (**)(__n128))(*(_QWORD *)v5 + 40))(v2);
  }
  return result;
}

void sub_2253451C4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13)
{
  if (a11)
  {
    if ((a12 & 1) != 0)
      (*(void (**)(void))(*(_QWORD *)a11 + 40))();
  }
  _Unwind_Resume(exception_object);
}

uint64_t re::HashTable<unsigned long long,re::RenderGraphTargetHandle,re::PrecalculatedHash,re::EqualTo<unsigned long long>,false,false>::tryGet(uint64_t a1, unint64_t a2)
{
  uint64_t v2;
  uint64_t v4;

  if (!*(_QWORD *)a1)
    return 0;
  v2 = *(unsigned int *)(*(_QWORD *)(a1 + 8) + 4 * (a2 % *(unsigned int *)(a1 + 24)));
  if ((_DWORD)v2 == 0x7FFFFFFF)
    return 0;
  v4 = *(_QWORD *)(a1 + 16);
  if (*(_QWORD *)(v4 + 32 * v2 + 8) != a2)
  {
    while (1)
    {
      v2 = *(_DWORD *)(v4 + 32 * v2) & 0x7FFFFFFF;
      if ((_DWORD)v2 == 0x7FFFFFFF)
        break;
      if (*(_QWORD *)(v4 + 32 * v2 + 8) == a2)
        return v4 + 32 * v2 + 16;
    }
    return 0;
  }
  return v4 + 32 * v2 + 16;
}

uint64_t re::RenderGraphFile::setRuntimeNodeSetting(re::RenderGraphFile *this, const re::StringID *a2, const re::IntrospectionBase *a3, const char *a4, char *a5)
{
  _anonymous_namespace_ *v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  re *v14;
  unsigned int *v15;
  uint64_t v16;
  re *v17;
  uint64_t v18;
  NSObject *v19;
  uint64_t v20;
  NSObject *v21;
  uint64_t v22;
  uint64_t v23;
  re::BindPoint *v24;
  NSObject *v25;
  uint64_t v26;
  const re::IntrospectionBase **v27;
  _anonymous_namespace_ *v28;
  const re::IntrospectionBase *v29;
  uint64_t v30;
  NSObject *v31;
  uint64_t v32;
  char *__s2;
  uint64_t v35[2];
  StringID v36;
  _BYTE v37[28];
  __int16 v38;
  unint64_t v39;
  uint8_t buf[32];
  __int128 v41;
  __int128 v42;
  __int128 v43;
  uint64_t v44;

  v44 = *MEMORY[0x24BDAC8D0];
  v10 = (_anonymous_namespace_ *)re::HashTable<re::StringID,re::StateParameterInt *,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::tryGet((uint64_t)this + 736, a2);
  if (v10)
  {
    v11 = *(unsigned int *)v10;
    v12 = *((_QWORD *)this + 90);
    if (v12 <= v11)
    {
      *(_QWORD *)&v36.var0 = 0;
      v42 = 0u;
      v43 = 0u;
      v41 = 0u;
      memset(buf, 0, sizeof(buf));
      os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      *(_DWORD *)v37 = 136315906;
      *(_QWORD *)&v37[4] = "operator[]";
      *(_WORD *)&v37[12] = 1024;
      *(_DWORD *)&v37[14] = 468;
      *(_WORD *)&v37[18] = 2048;
      *(_QWORD *)&v37[20] = v11;
      v38 = 2048;
      v39 = v12;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
    }
    else
    {
      __s2 = a5;
      v13 = *((_QWORD *)this + 91);
      *(_QWORD *)&v36.var0 = 0;
      v36.var1 = (char *)&str_110;
      v14 = (re *)re::HashTable<re::StringID,re::StateParameterInt *,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::tryGet(v13 + (v11 << 7) + 80, &v36);
      v15 = (unsigned int *)v14;
      if (!v14)
      {
        memset(&buf[8], 0, 24);
        LODWORD(v41) = 0;
        *((_QWORD *)&v41 + 1) = 0;
        *(_QWORD *)&v42 = 0;
        *((_QWORD *)&v42 + 1) = &str_110;
        v35[0] = (uint64_t)a4;
        v35[1] = strlen(a4);
        v16 = v13 + (v11 << 7);
        re::BindNode::bindPoint((re::BindNode **)(v16 + 8), (uint64_t)a3, v35, (uint64_t)v37);
        *(_QWORD *)buf = *(_QWORD *)v37;
        re::DynamicArray<re::RigDataValue>::operator=((uint64_t)&buf[8], (uint64_t)&v37[8]);
        re::DynamicArray<re::BindPoint::BindPointData>::deinit((uint64_t)&v37[8]);
        v17 = (re *)re::DynamicArray<re::BindPoint::BindPointData>::deinit((uint64_t)&v37[8]);
        v18 = *(_QWORD *)&buf[24];
        if (*(_QWORD *)&buf[24])
        {
          re::StringID::operator=((unint64_t *)&v42, (uint64_t *)&v36);
          re::DynamicArray<re::BindPointAndPath>::add((_anonymous_namespace_ *)(v16 + 40), (uint64_t *)buf);
          *(_DWORD *)v37 = *(_DWORD *)(v13 + (v11 << 7) + 56) - 1;
          v15 = (unsigned int *)re::HashTable<re::StringID,unsigned int,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::add<unsigned int &>(v13 + (v11 << 7) + 80, &v36, v37);
        }
        else
        {
          v21 = (id)*re::graphicsLogObjects(v17);
          if (os_log_type_enabled(v21, OS_LOG_TYPE_DEFAULT))
          {
            v22 = *((_QWORD *)a2 + 1);
            *(_DWORD *)v37 = 136315394;
            *(_QWORD *)&v37[4] = v22;
            *(_WORD *)&v37[12] = 2080;
            *(_QWORD *)&v37[14] = a4;
            _os_log_impl(&dword_224FE9000, v21, OS_LOG_TYPE_DEFAULT, "Failed to find binding path [node].[binding path]: [%s].[%s].", v37, 0x16u);
          }

          v15 = 0;
        }
        re::StringID::destroyString((re::StringID *)&v42);
        re::DynamicArray<re::BindPoint::BindPointData>::deinit((uint64_t)&buf[8]);
        v14 = (re *)re::DynamicArray<re::BindPoint::BindPointData>::deinit((uint64_t)&buf[8]);
        if (!v18)
          goto LABEL_25;
      }
      v12 = *v15;
      v23 = v13 + (v11 << 7);
      v11 = *(_QWORD *)(v23 + 56);
      if (v11 > v12)
      {
        v24 = (re::BindPoint *)(*(_QWORD *)(v23 + 72) + (v12 << 6));
        if (*(const re::IntrospectionBase **)v24 == a3)
        {
          v27 = (const re::IntrospectionBase **)re::BindPoint::valueUntyped(v24);
          v28 = (_anonymous_namespace_ *)(*(uint64_t (**)(const re::IntrospectionBase *))(*(_QWORD *)a3 + 32))(a3);
          if (v28 || (v28 = (_anonymous_namespace_ *)memcmp(v27, __s2, *((int *)a3 + 5)), (_DWORD)v28))
          {
            *((_BYTE *)this + 704) = 1;
            *(_OWORD *)&v37[8] = 0uLL;
            *(_QWORD *)v37 = &re::PassthroughAssetSerialization::instance(void)::instance;
            v29 = *(const re::IntrospectionBase **)v24;
            *(_QWORD *)&buf[8] = 0;
            *(_QWORD *)&buf[16] = v37;
            v18 = v30;
            if ((v30 & 1) == 0)
            {
              v31 = (id)*re::graphicsLogObjects((re *)v30);
              if (os_log_type_enabled(v31, OS_LOG_TYPE_DEFAULT))
              {
                v32 = *((_QWORD *)a2 + 1);
                *(_DWORD *)buf = 136315394;
                *(_QWORD *)&buf[4] = v32;
                *(_WORD *)&buf[12] = 2080;
                *(_QWORD *)&buf[14] = a4;
                _os_log_impl(&dword_224FE9000, v31, OS_LOG_TYPE_DEFAULT, "Failed to perform deep copy into [node].[binding path]: [%s].[%s]", buf, 0x16u);
              }

            }
          }
          else
          {
            v18 = 1;
          }
        }
        else
        {
          v25 = (id)*re::graphicsLogObjects(v14);
          if (os_log_type_enabled(v25, OS_LOG_TYPE_DEFAULT))
          {
            v26 = *((_QWORD *)a2 + 1);
            *(_DWORD *)buf = 136315394;
            *(_QWORD *)&buf[4] = v26;
            *(_WORD *)&buf[12] = 2080;
            *(_QWORD *)&buf[14] = a4;
            _os_log_impl(&dword_224FE9000, v25, OS_LOG_TYPE_DEFAULT, "Binding path does not match expected type [node].[binding path]: [%s].[%s].", buf, 0x16u);
          }

          v18 = 0;
        }
LABEL_25:
        re::StringID::destroyString((re::StringID *)&v36);
        return v18;
      }
    }
    v35[0] = 0;
    v42 = 0u;
    v43 = 0u;
    v41 = 0u;
    memset(buf, 0, sizeof(buf));
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    *(_DWORD *)v37 = 136315906;
    *(_QWORD *)&v37[4] = "operator[]";
    *(_WORD *)&v37[12] = 1024;
    *(_DWORD *)&v37[14] = 789;
    *(_WORD *)&v37[18] = 2048;
    *(_QWORD *)&v37[20] = v12;
    v38 = 2048;
    v39 = v11;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  v19 = (id)*re::graphicsLogObjects(0);
  if (os_log_type_enabled(v19, OS_LOG_TYPE_DEFAULT))
  {
    v20 = *((_QWORD *)a2 + 1);
    *(_DWORD *)buf = 136315138;
    *(_QWORD *)&buf[4] = v20;
    _os_log_impl(&dword_224FE9000, v19, OS_LOG_TYPE_DEFAULT, "Failed to find node with name [%s].", buf, 0xCu);
  }

  return 0;
}

void sub_225345808(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17)
{
  re::StringID *v17;
  re::StringID *v18;

  v18 = v17;
  re::StringID::destroyString(v18);
  re::DynamicArray<re::BindPoint::BindPointData>::deinit(a11);
  re::DynamicArray<re::BindPoint::BindPointData>::deinit(a11);
  re::StringID::destroyString((re::StringID *)&a17);
  _Unwind_Resume(a1);
}

uint64_t re::DynamicArray<re::BindPointAndPath>::add(_anonymous_namespace_ *this, uint64_t *a2)
{
  unint64_t v4;
  uint64_t result;
  uint64_t v6;

  v4 = *((_QWORD *)this + 2);
  if (v4 >= *((_QWORD *)this + 1))
  {
    re::DynamicArray<re::BindPointAndPath>::growCapacity(this, v4 + 1);
    v4 = *((_QWORD *)this + 2);
  }
  result = re::BindPoint::BindPoint(*((_QWORD *)this + 4) + (v4 << 6), a2);
  v6 = a2[6];
  *(_QWORD *)(result + 48) = *(_QWORD *)(result + 48) & 0xFFFFFFFFFFFFFFFELL | v6 & 1;
  *(_QWORD *)(result + 48) = a2[6] & 0xFFFFFFFFFFFFFFFELL | v6 & 1;
  *(_QWORD *)(result + 56) = a2[7];
  a2[6] = 0;
  a2[7] = (uint64_t)&str_110;
  ++*((_QWORD *)this + 2);
  ++*((_DWORD *)this + 6);
  return result;
}

uint64_t *re::allocInfo_RenderGraphBufferDescriptionData(re *this)
{
  unsigned __int8 v1;
  uint64_t v3;

  v1 = atomic_load((unsigned __int8 *)&qword_2540FF9B8);
  if ((v1 & 1) == 0 && __cxa_guard_acquire(&qword_2540FF9B8))
  {
    ArcSharedObject::ArcSharedObject((ArcSharedObject *)&qword_254100178, 0);
    *(_QWORD *)(v3 + 22) = 0;
    qword_254100188 = 0;
    qword_254100198 = 0;
    qword_2541001A0 = 0xFFFFFFFFLL;
    qword_254100178 = (uint64_t)&off_24ED7DAA8;
    qword_2541001A8 = (uint64_t)"RenderGraphBufferDescriptionData";
    dword_2541001B0 = 0;
    xmmword_2541001B8 = 0u;
    xmmword_2541001C8 = 0u;
    xmmword_2541001D8 = 0u;
    qword_2541001E8 = 0;
    __cxa_guard_release(&qword_2540FF9B8);
  }
  return &qword_254100178;
}

void re::initInfo_RenderGraphBufferDescriptionData(re *this, re::IntrospectionBase *a2)
{
  const re::IntrospectionBase *v3;
  unsigned __int8 v4;
  re *v5;
  uint64_t *v6;
  const re::IntrospectionBase *v7;
  uint64_t v8;
  uint64_t *v9;
  const re::IntrospectionBase *v10;
  void *v11;
  uint64_t v12;
  uint64_t *v13;
  const re::IntrospectionBase *v14;
  void *v15;
  uint64_t v16;
  uint64_t *v17;
  const re::IntrospectionBase *v18;
  void *v19;
  uint64_t v20;
  uint64_t *v21;
  const re::IntrospectionBase *v22;
  void *v23;
  uint64_t v24;
  __int128 v25;
  _QWORD v26[2];
  __int128 v27;

  v26[0] = 0x761AC20EE8B6461CLL;
  v26[1] = "RenderGraphBufferDescriptionData";
  re::StringID::destroyString((re::StringID *)v26);
  *((_OWORD *)this + 2) = v27;
  v4 = atomic_load((unsigned __int8 *)&qword_2540FF9C0);
  if ((v4 & 1) == 0)
  {
    v5 = (re *)__cxa_guard_acquire(&qword_2540FF9C0);
    if ((_DWORD)v5)
    {
      v6 = re::introspectionAllocator(v5);
      re::introspect_RenderGraphResourceDescriptionType((re *)v6, v7);
      v8 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v6 + 32))(v6, 72, 8);
      *(_DWORD *)v8 = 1;
      *(_QWORD *)(v8 + 8) = "type";
      *(_QWORD *)(v8 + 16) = &qword_2541000E8;
      *(_QWORD *)(v8 + 24) = 0;
      *(_QWORD *)(v8 + 32) = 1;
      *(_DWORD *)(v8 + 40) = 0;
      *(_QWORD *)(v8 + 48) = 0;
      *(_QWORD *)(v8 + 56) = 0;
      *(_DWORD *)(v8 + 64) = 0;
      qword_2540FFC90 = v8;
      v9 = re::introspectionAllocator((re *)v8);
      v11 = re::introspect_size_t((re *)1, v10);
      v12 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v9 + 32))(v9, 72, 8);
      *(_DWORD *)v12 = 1;
      *(_QWORD *)(v12 + 8) = "length";
      *(_QWORD *)(v12 + 16) = v11;
      *(_QWORD *)(v12 + 24) = 0;
      *(_QWORD *)(v12 + 32) = 0x800000002;
      *(_DWORD *)(v12 + 40) = 0;
      *(_QWORD *)(v12 + 48) = 0;
      *(_QWORD *)(v12 + 56) = 0;
      *(_DWORD *)(v12 + 64) = 0;
      qword_2540FFC98 = v12;
      v13 = re::introspectionAllocator((re *)v12);
      v15 = re::introspect_BOOL((re *)1, v14);
      v16 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v13 + 32))(v13, 72, 8);
      *(_DWORD *)v16 = 1;
      *(_QWORD *)(v16 + 8) = "exposeToMaterial";
      *(_QWORD *)(v16 + 16) = v15;
      *(_QWORD *)(v16 + 24) = 0;
      *(_QWORD *)(v16 + 32) = 0x1C00000003;
      *(_DWORD *)(v16 + 40) = 0;
      *(_QWORD *)(v16 + 48) = 0;
      *(_QWORD *)(v16 + 56) = 0;
      *(_DWORD *)(v16 + 64) = 0;
      qword_2540FFCA0 = v16;
      v17 = re::introspectionAllocator((re *)v16);
      v19 = re::introspect_uint64_t((re *)1, v18);
      v20 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v17 + 32))(v17, 72, 8);
      *(_DWORD *)v20 = 1;
      *(_QWORD *)(v20 + 8) = "protectionOptions";
      *(_QWORD *)(v20 + 16) = v19;
      *(_QWORD *)(v20 + 24) = 0;
      *(_QWORD *)(v20 + 32) = 0x1000000004;
      *(_DWORD *)(v20 + 40) = 0;
      *(_QWORD *)(v20 + 48) = 0;
      *(_QWORD *)(v20 + 56) = 0;
      *(_DWORD *)(v20 + 64) = 0;
      qword_2540FFCA8 = v20;
      v21 = re::introspectionAllocator((re *)v20);
      v23 = re::introspect_float((re *)1, v22);
      v24 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v21 + 32))(v21, 72, 8);
      *(_DWORD *)v24 = 1;
      *(_QWORD *)(v24 + 8) = "lengthMultiplier";
      *(_QWORD *)(v24 + 16) = v23;
      *(_QWORD *)(v24 + 24) = 0;
      *(_QWORD *)(v24 + 32) = 0x1800000005;
      *(_DWORD *)(v24 + 40) = 0;
      *(_QWORD *)(v24 + 48) = 0;
      *(_QWORD *)(v24 + 56) = 0;
      *(_DWORD *)(v24 + 64) = 0;
      qword_2540FFCB0 = v24;
      __cxa_guard_release(&qword_2540FF9C0);
    }
  }
  *((_QWORD *)this + 2) = 0x2000000008;
  *((_DWORD *)this + 6) = 8;
  *((_WORD *)this + 14) = 1;
  *((_DWORD *)this + 14) = 5;
  *((_QWORD *)this + 8) = &qword_2540FFC90;
  *((_QWORD *)this + 9) = re::internal::defaultConstruct<re::RenderGraphBufferDescriptionData>;
  *((_QWORD *)this + 10) = re::internal::defaultDestruct<re::RenderGraphBufferDescriptionData>;
  *((_QWORD *)this + 11) = 0;
  *((_QWORD *)this + 12) = 0;
  *((_QWORD *)this + 13) = re::internal::defaultConstructV2<re::RenderGraphBufferDescriptionData>;
  *((_QWORD *)this + 14) = re::internal::defaultDestructV2<re::RenderGraphBufferDescriptionData>;
  re::IntrospectionRegistry::add(this, v3);
  v25 = v27;
}

void sub_225345CD0(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_2540FF9C0);
  _Unwind_Resume(a1);
}

void re::internal::defaultConstruct<re::RenderGraphBufferDescriptionData>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(_DWORD *)a3 = 2;
  *(_QWORD *)(a3 + 8) = -1;
  *(_QWORD *)(a3 + 16) = -1;
  *(_DWORD *)(a3 + 24) = 1065353216;
  *(_BYTE *)(a3 + 28) = 0;
}

uint64_t re::internal::defaultConstructV2<re::RenderGraphBufferDescriptionData>(uint64_t result)
{
  *(_DWORD *)result = 2;
  *(_QWORD *)(result + 8) = -1;
  *(_QWORD *)(result + 16) = -1;
  *(_DWORD *)(result + 24) = 1065353216;
  *(_BYTE *)(result + 28) = 0;
  return result;
}

void re::IntrospectionInfo<re::DynamicArray<re::RenderGraphDataStoreConnection>>::get()
{
  unsigned __int8 v0;
  uint64_t *v1;
  unsigned __int8 v2;
  const re::IntrospectionBase *v3;
  unsigned __int8 v4;
  int v5;
  re::IntrospectionRegistry *v6;
  const re::IntrospectionBase *v7;
  const char *v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  re *v13;
  uint64_t *v14;
  const re::IntrospectionBase *v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t *v18;
  const re::IntrospectionBase *v19;
  void *v20;
  uint64_t v21;
  uint64_t *v22;
  const re::IntrospectionBase *v23;
  uint64_t *v24;
  uint64_t v25;
  __int128 v26;
  __int128 v27;
  uint64_t v28[2];
  __int128 v29;
  const char *v30;
  __int128 v31;

  v0 = atomic_load((unsigned __int8 *)&qword_2540FFB68);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_2540FFB68))
  {
    re::IntrospectionDynamicArrayBase::IntrospectionDynamicArrayBase((re::IntrospectionDynamicArrayBase *)&qword_2540FFD60);
    qword_2540FFD60 = (uint64_t)&off_24ED37B68;
    __cxa_guard_release(&qword_2540FFB68);
  }
  if ((byte_2540FF99B & 1) == 0)
  {
    v1 = (uint64_t *)qword_2540FFA10;
    if (qword_2540FFA10)
      goto LABEL_7;
    v2 = atomic_load((unsigned __int8 *)&qword_2540FFA00);
    if ((v2 & 1) == 0 && __cxa_guard_acquire(&qword_2540FFA00))
    {
      ArcSharedObject::ArcSharedObject((ArcSharedObject *)&qword_2541002E0, 0);
      *(_QWORD *)(v12 + 22) = 0;
      qword_2541002F0 = 0;
      *(_QWORD *)&xmmword_254100300 = 0;
      *((_QWORD *)&xmmword_254100300 + 1) = 0xFFFFFFFFLL;
      qword_2541002E0 = (uint64_t)&off_24ED7DAA8;
      qword_254100310 = (uint64_t)"RenderGraphDataStoreConnection";
      dword_254100318 = 0;
      xmmword_254100320 = 0u;
      xmmword_254100330 = 0u;
      xmmword_254100340 = 0u;
      qword_254100350 = 0;
      __cxa_guard_release(&qword_2540FFA00);
    }
    qword_2540FFA10 = (uint64_t)&qword_2541002E0;
    *(_QWORD *)&v31 = 0xB1F8E4E1F120EA7ALL;
    *((_QWORD *)&v31 + 1) = "RenderGraphDataStoreConnection";
    re::StringID::destroyString((re::StringID *)&v31);
    xmmword_254100300 = v29;
    v4 = atomic_load((unsigned __int8 *)&qword_2540FFA08);
    if ((v4 & 1) == 0)
    {
      v13 = (re *)__cxa_guard_acquire(&qword_2540FFA08);
      if ((_DWORD)v13)
      {
        v14 = re::introspectionAllocator(v13);
        v16 = re::IntrospectionInfo<re::DynamicArray<re::DynamicString>>::get(1, v15);
        v17 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v14 + 32))(v14, 72, 8);
        *(_DWORD *)v17 = 1;
        *(_QWORD *)(v17 + 8) = "toMember";
        *(_QWORD *)(v17 + 16) = v16;
        *(_QWORD *)(v17 + 24) = 0;
        *(_QWORD *)(v17 + 32) = 1;
        *(_DWORD *)(v17 + 40) = 0;
        *(_QWORD *)(v17 + 48) = 0;
        *(_QWORD *)(v17 + 56) = 0;
        *(_DWORD *)(v17 + 64) = 0;
        qword_2540FFC28 = v17;
        v18 = re::introspectionAllocator((re *)v17);
        v20 = re::IntrospectionInfo<re::DynamicString>::get(1, v19);
        v21 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v18 + 32))(v18, 72, 8);
        *(_DWORD *)v21 = 1;
        *(_QWORD *)(v21 + 8) = "fromType";
        *(_QWORD *)(v21 + 16) = v20;
        *(_QWORD *)(v21 + 24) = 0;
        *(_QWORD *)(v21 + 32) = 0x2800000002;
        *(_DWORD *)(v21 + 40) = 0;
        *(_QWORD *)(v21 + 48) = 0;
        *(_QWORD *)(v21 + 56) = 0;
        *(_DWORD *)(v21 + 64) = 0;
        qword_2540FFC30 = v21;
        v22 = re::introspectionAllocator((re *)v21);
        v24 = re::IntrospectionInfo<re::DynamicArray<re::DynamicString>>::get(1, v23);
        v25 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v22 + 32))(v22, 72, 8);
        *(_DWORD *)v25 = 1;
        *(_QWORD *)(v25 + 8) = "fromMember";
        *(_QWORD *)(v25 + 16) = v24;
        *(_QWORD *)(v25 + 24) = 0;
        *(_QWORD *)(v25 + 32) = 0x4800000003;
        *(_DWORD *)(v25 + 40) = 0;
        *(_QWORD *)(v25 + 48) = 0;
        *(_QWORD *)(v25 + 56) = 0;
        *(_DWORD *)(v25 + 64) = 0;
        qword_2540FFC38 = v25;
        __cxa_guard_release(&qword_2540FFA08);
      }
    }
    qword_2541002F0 = 0x8800000008;
    v1 = &qword_2541002E0;
    dword_2541002F8 = 8;
    word_2541002FC = 0;
    dword_254100318 = 3;
    *(_QWORD *)&xmmword_254100320 = &qword_2540FFC28;
    *((_QWORD *)&xmmword_254100320 + 1) = re::internal::defaultConstruct<re::RenderGraphDataStoreConnection>;
    *(_QWORD *)&xmmword_254100330 = re::internal::defaultDestruct<re::RenderGraphDataStoreConnection>;
    *(_QWORD *)&xmmword_254100340 = 0;
    *((_QWORD *)&xmmword_254100330 + 1) = 0;
    *((_QWORD *)&xmmword_254100340 + 1) = re::internal::defaultConstructV2<re::RenderGraphDataStoreConnection>;
    qword_254100350 = (uint64_t)re::internal::defaultDestructV2<re::RenderGraphDataStoreConnection>;
    re::IntrospectionRegistry::add((re::IntrospectionRegistry *)&qword_2541002E0, v3);
    v31 = v29;
    if ((byte_2540FF99B & 1) == 0)
    {
LABEL_7:
      byte_2540FF99B = 1;
      v5 = *((_DWORD *)v1 + 6);
      ArcSharedObject::ArcSharedObject((ArcSharedObject *)&qword_2540FFD60, 0);
      qword_2540FFD70 = 0x2800000003;
      dword_2540FFD78 = v5;
      word_2540FFD7C = 0;
      *(_QWORD *)&xmmword_2540FFD80 = 0;
      *((_QWORD *)&xmmword_2540FFD80 + 1) = 0xFFFFFFFFLL;
      qword_2540FFD90 = (uint64_t)v1;
      qword_2540FFD98 = 0;
      qword_2540FFD60 = (uint64_t)&off_24ED37B68;
      re::IntrospectionRegistry::add(v6, v7);
      re::getPrettyTypeName((re *)&qword_2540FFD60, (const re::IntrospectionBase *)&v29);
      if ((BYTE8(v29) & 1) != 0)
        v8 = v30;
      else
        v8 = (char *)&v29 + 9;
      if ((_QWORD)v29 && (BYTE8(v29) & 1) != 0)
        (*(void (**)(void))(*(_QWORD *)v29 + 40))();
      v27 = *((_OWORD *)v1 + 2);
      v9 = (uint64_t *)re::HashTable<re::StringID,re::StateParameterInt *,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::tryGet((uint64_t)&unk_25582A358, v28);
      if (v9)
      {
        v10 = *v9;
        *((_QWORD *)&v26 + 1) = v10;
      }
      else
      {
        v31 = v27;
        re::TypeBuilder::beginListType((uint64_t)&v29, v28, 1, 0x28uLL, 8uLL, &v31);
        re::TypeBuilder::setConstructor((uint64_t)&v29, (uint64_t)re::TypeBuilderHelper::registerDynamicArray<re::RenderGraphDataStoreConnection>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,void *)#1}::__invoke);
        re::TypeBuilder::setDestructor((uint64_t)&v29, (uint64_t)re::TypeBuilderHelper::registerDynamicArray<re::RenderGraphDataStoreConnection>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,void *)#2}::__invoke);
        re::TypeBuilder::setListUsesContiguousStorage((uint64_t)&v29, 1);
        re::TypeBuilder::setListAccessors((uint64_t)&v29, (uint64_t)re::TypeBuilderHelper::registerDynamicArray<re::RenderGraphDataStoreConnection>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *)#1}::__invoke, (uint64_t)re::TypeBuilderHelper::registerDynamicArray<re::RenderGraphDataStoreConnection>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,unsigned long)#1}::__invoke);
        re::TypeBuilder::setListIndexer((uint64_t)&v29, (void *(*)(void *, unint64_t))re::TypeBuilderHelper::registerDynamicArray<re::RenderGraphDataStoreConnection>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,unsigned long)#1}::__invoke);
        re::TypeBuilder::setListIterator((uint64_t)&v29, (void *(*)(void *, re::Allocator *))re::TypeBuilderHelper::registerDynamicArray<re::RenderGraphDataStoreConnection>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::Allocator *)#1}::__invoke, (void *(*)(void *))re::TypeBuilderHelper::registerDynamicArray<re::RenderGraphDataStoreConnection>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *)#2}::__invoke, (void (*)(void *, re::Allocator *))re::TypeBuilderHelper::registerDynamicArray<re::RenderGraphDataStoreConnection>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::Allocator *)#2}::__invoke);
        re::TypeBuilder::~TypeBuilder((re::TypeBuilder *)&v29, v11);
      }
      xmmword_2540FFD80 = v26;
      re::StringID::destroyString((re::StringID *)v28);
    }
  }
}

void sub_225346278(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_2540FFA08);
  _Unwind_Resume(a1);
}

void re::internal::defaultConstruct<re::RenderGraphBufferData>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(_QWORD *)a3 = 0;
  *(_QWORD *)(a3 + 8) = &str_110;
  *(_DWORD *)(a3 + 16) = 2;
  *(_QWORD *)(a3 + 24) = -1;
  *(_QWORD *)(a3 + 32) = -1;
  *(_DWORD *)(a3 + 40) = 1065353216;
  *(_BYTE *)(a3 + 44) = 0;
  *(_QWORD *)(a3 + 80) = 0;
  *(_QWORD *)(a3 + 56) = 0;
  *(_QWORD *)(a3 + 64) = 0;
  *(_QWORD *)(a3 + 48) = 0;
  *(_DWORD *)(a3 + 72) = 0;
}

void re::internal::defaultDestruct<re::RenderGraphBufferData>(uint64_t a1, uint64_t a2, re::StringID *a3)
{
  re::DynamicArray<re::RenderGraphDataStoreConnection>::deinit((uint64_t)a3 + 48);
  re::StringID::destroyString(a3);
}

uint64_t re::internal::defaultConstructV2<re::RenderGraphBufferData>(uint64_t result)
{
  *(_QWORD *)result = 0;
  *(_QWORD *)(result + 8) = &str_110;
  *(_DWORD *)(result + 16) = 2;
  *(_QWORD *)(result + 24) = -1;
  *(_QWORD *)(result + 32) = -1;
  *(_DWORD *)(result + 40) = 1065353216;
  *(_BYTE *)(result + 44) = 0;
  *(_QWORD *)(result + 80) = 0;
  *(_QWORD *)(result + 56) = 0;
  *(_QWORD *)(result + 64) = 0;
  *(_QWORD *)(result + 48) = 0;
  *(_DWORD *)(result + 72) = 0;
  return result;
}

void re::internal::defaultDestructV2<re::RenderGraphBufferData>(re::StringID *a1)
{
  re::DynamicArray<re::RenderGraphDataStoreConnection>::deinit((uint64_t)a1 + 48);
  re::StringID::destroyString(a1);
}

void re::internal::defaultConstruct<re::RenderGraphDataNodeConnection>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(_QWORD *)a3 = 0;
  *(_QWORD *)(a3 + 8) = &str_110;
  *(_QWORD *)(a3 + 48) = 0;
  *(_QWORD *)(a3 + 24) = 0;
  *(_QWORD *)(a3 + 32) = 0;
  *(_QWORD *)(a3 + 16) = 0;
  *(_DWORD *)(a3 + 40) = 0;
}

void re::internal::defaultDestruct<re::RenderGraphDataNodeConnection>(uint64_t a1, uint64_t a2, re::StringID *a3)
{
  re::DynamicArray<re::RenderGraphDataStoreConnection>::deinit((uint64_t)a3 + 16);
  re::StringID::destroyString(a3);
}

uint64_t re::internal::defaultConstructV2<re::RenderGraphDataNodeConnection>(uint64_t result)
{
  *(_QWORD *)result = 0;
  *(_QWORD *)(result + 8) = &str_110;
  *(_QWORD *)(result + 48) = 0;
  *(_QWORD *)(result + 24) = 0;
  *(_QWORD *)(result + 32) = 0;
  *(_QWORD *)(result + 16) = 0;
  *(_DWORD *)(result + 40) = 0;
  return result;
}

void re::internal::defaultDestructV2<re::RenderGraphDataNodeConnection>(re::StringID *a1)
{
  re::DynamicArray<re::RenderGraphDataStoreConnection>::deinit((uint64_t)a1 + 16);
  re::StringID::destroyString(a1);
}

double re::internal::defaultConstruct<re::RenderGraphDataStoreConnection>(_anonymous_namespace_ *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  double result;

  v3 = a3;
  *(_QWORD *)a3 = 0;
  *(_QWORD *)(a3 + 8) = 0;
  *(_DWORD *)(a3 + 24) = 0;
  *(_QWORD *)(a3 + 16) = 0;
  *(_OWORD *)(a3 + 32) = 0u;
  *(_OWORD *)(a3 + 48) = 0u;
  *(_QWORD *)(a3 + 64) = 0;
  v3 += 40;
  re::DynamicString::setCapacity((_QWORD *)v3, 0);
  *(_QWORD *)(v3 + 32) = 0;
  *(_QWORD *)(v3 + 40) = 0;
  *(_DWORD *)(v3 + 56) = 0;
  *(_QWORD *)(v3 + 48) = 0;
  result = 0.0;
  *(_OWORD *)(v3 + 64) = 0u;
  *(_OWORD *)(v3 + 80) = 0u;
  return result;
}

uint64_t re::internal::defaultDestruct<re::RenderGraphDataStoreConnection>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;

  re::DynamicArray<re::DynamicString>::deinit(a3 + 72);
  v4 = *(_QWORD *)(a3 + 40);
  if (v4)
  {
    if ((*(_BYTE *)(a3 + 48) & 1) != 0)
      (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v4 + 40))(v4, *(_QWORD *)(a3 + 56));
    *(_OWORD *)(a3 + 40) = 0u;
    *(_OWORD *)(a3 + 56) = 0u;
  }
  return re::DynamicArray<re::DynamicString>::deinit(a3);
}

double re::internal::defaultConstructV2<re::RenderGraphDataStoreConnection>(uint64_t a1)
{
  uint64_t v1;
  double result;

  v1 = a1;
  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_DWORD *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_QWORD *)(a1 + 64) = 0;
  v1 += 40;
  re::DynamicString::setCapacity((_QWORD *)v1, 0);
  *(_QWORD *)(v1 + 32) = 0;
  *(_QWORD *)(v1 + 40) = 0;
  *(_DWORD *)(v1 + 56) = 0;
  *(_QWORD *)(v1 + 48) = 0;
  result = 0.0;
  *(_OWORD *)(v1 + 64) = 0u;
  *(_OWORD *)(v1 + 80) = 0u;
  return result;
}

uint64_t re::internal::defaultDestructV2<re::RenderGraphDataStoreConnection>(uint64_t a1)
{
  uint64_t v2;

  re::DynamicArray<re::DynamicString>::deinit(a1 + 72);
  v2 = *(_QWORD *)(a1 + 40);
  if (v2)
  {
    if ((*(_BYTE *)(a1 + 48) & 1) != 0)
      (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v2 + 40))(v2, *(_QWORD *)(a1 + 56));
    *(_OWORD *)(a1 + 40) = 0u;
    *(_OWORD *)(a1 + 56) = 0u;
  }
  return re::DynamicArray<re::DynamicString>::deinit(a1);
}

void re::introspect_RenderGraphSpecifyOperationBaseType(re *this, const re::IntrospectionBase *a2)
{
  unsigned __int8 v2;
  unsigned __int8 v3;
  uint64_t *v4;
  uint64_t v5;
  unsigned int *v6;
  _anonymous_namespace_ *v7;
  unint64_t v8;
  unint64_t i;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  char v13;
  unsigned __int8 *v14;
  int v15;
  uint64_t v16;
  unint64_t j;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  char v21;
  unsigned __int8 *v22;
  int v23;
  uint64_t v24;
  uint64_t v25;
  re *v26;
  uint64_t *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  const char *v31;
  __int128 v32;
  StringID v33;
  _QWORD v34[2];
  _QWORD v35[61];

  v2 = atomic_load((unsigned __int8 *)&qword_2540FFA20);
  if ((v2 & 1) == 0)
  {
    v26 = (re *)__cxa_guard_acquire(&qword_2540FFA20);
    if ((_DWORD)v26)
    {
      v27 = re::introspectionAllocator(v26);
      v28 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v27 + 32))(v27, 24, 8);
      *(_DWORD *)v28 = 1;
      *(_QWORD *)(v28 + 8) = 1;
      *(_QWORD *)(v28 + 16) = "SpecifyLane";
      qword_2540FFA18 = v28;
      __cxa_guard_release(&qword_2540FFA20);
    }
  }
  v3 = atomic_load((unsigned __int8 *)&qword_2540FFA28);
  if ((v3 & 1) == 0 && __cxa_guard_acquire(&qword_2540FFA28))
  {
    re::IntrospectionBasic::IntrospectionBasic((re::IntrospectionBasic *)&qword_2541000A0, "RenderGraphSpecifyOperationBaseType", 4, 4, 1, 1);
    qword_2541000A0 = (uint64_t)&off_24ED7D9E8;
    qword_2541000E0 = (uint64_t)&re::introspect_RenderGraphSpecifyOperationBaseType(BOOL)::enumTable;
    dword_2541000B0 = 9;
    __cxa_guard_release(&qword_2540FFA28);
  }
  if ((_MergedGlobals_82 & 1) == 0)
  {
    _MergedGlobals_82 = 1;
    re::IntrospectionRegistry::add((re::IntrospectionRegistry *)&qword_2541000A0, a2);
    v30 = 0x2209C4ED1E795452;
    v31 = "RenderGraphSpecifyOperationBaseType";
    v35[0] = 208862;
    v35[1] = "int";
    v4 = (uint64_t *)re::HashTable<re::StringID,re::StateParameterInt *,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::tryGet((uint64_t)&unk_25582A358, v35);
    if (v4)
    {
      v5 = *v4;
      re::StringID::destroyString((re::StringID *)v35);
      v6 = (unsigned int *)qword_2541000E0;
      v34[1] = v5;
      re::TypeBuilder::beginEnumType((uint64_t)v35, &v30, 1, 1, (uint64_t)v34);
      v8 = *v6;
      if ((_DWORD)v8)
      {
        for (i = 0; i < v8; ++i)
        {
          v10 = *(_QWORD *)(*((_QWORD *)v6 + 1) + 8 * i);
          if (*(_DWORD *)v10 == 1)
          {
            v11 = *(char **)(v10 + 16);
            if (v11)
            {
              v12 = *v11;
              if (*v11)
              {
                v13 = v11[1];
                if (v13)
                {
                  v14 = (unsigned __int8 *)(v11 + 2);
                  do
                  {
                    v12 = 31 * v12 + v13;
                    v15 = *v14++;
                    v13 = v15;
                  }
                  while (v15);
                }
              }
            }
            else
            {
              v12 = 0;
            }
            v16 = *(_QWORD *)(v10 + 8);
            *(_QWORD *)&v33.var0 = 2 * v12;
            v33.var1 = v11;
            re::TypeBuilder::addEnumConstant((re::TypeBuilder *)v35, v16, &v33);
            re::StringID::destroyString((re::StringID *)&v33);
            v8 = *v6;
          }
        }
        if (v8)
        {
          for (j = 0; j < v8; ++j)
          {
            v18 = *(_QWORD *)(*((_QWORD *)v6 + 1) + 8 * j);
            if (*(_DWORD *)v18 == 2)
            {
              v19 = *(char **)(v18 + 16);
              if (v19)
              {
                v20 = *v19;
                if (*v19)
                {
                  v21 = v19[1];
                  if (v21)
                  {
                    v22 = (unsigned __int8 *)(v19 + 2);
                    do
                    {
                      v20 = 31 * v20 + v21;
                      v23 = *v22++;
                      v21 = v23;
                    }
                    while (v23);
                  }
                }
              }
              else
              {
                v20 = 0;
              }
              v24 = *(_QWORD *)(v18 + 8);
              *(_QWORD *)&v33.var0 = 2 * v20;
              v33.var1 = v19;
              re::TypeBuilder::addEnumConstantRenaming((re::TypeBuilder *)v35, v24, &v33);
              re::StringID::destroyString((re::StringID *)&v33);
              v8 = *v6;
            }
          }
        }
      }
      re::TypeBuilder::~TypeBuilder((re::TypeBuilder *)v35, v25);
      xmmword_2541000C0 = v32;
      re::StringID::destroyString((re::StringID *)&v30);
    }
    else
    {
      re::StringID::destroyString((re::StringID *)v35);
      re::internal::assertLog((re::internal *)5, v29, "assertion failure: '%s' (%s:line %i) Failed to determine underlying type of enum %s.", "valueID.isValid()", "registerEnumType", 2796, "RenderGraphSpecifyOperationBaseType", v30, v31);
      _os_crash();
      __break(1u);
    }
  }
}

void sub_2253468BC(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_2540FFA20);
  _Unwind_Resume(a1);
}

void re::introspectionTable_RenderGraphSpecifyOperationBase(re *this)
{
  unsigned __int8 v1;
  re *v2;
  uint64_t *v3;
  re::IntrospectionBase *v4;

  if ((byte_2540FF999 & 1) == 0)
  {
    byte_2540FF999 = 1;
    v1 = atomic_load((unsigned __int8 *)&qword_2540FFA30);
    if ((v1 & 1) == 0)
    {
      v2 = (re *)__cxa_guard_acquire(&qword_2540FFA30);
      if ((_DWORD)v2)
      {
        qword_2540FFCB8 = (uint64_t)"RenderGraphSpecifyLaneOperation";
        v3 = (uint64_t *)qword_2540FFA48;
        if (!qword_2540FFA48)
        {
          v3 = re::allocInfo_RenderGraphSpecifyLaneOperation(v2);
          qword_2540FFA48 = (uint64_t)v3;
          re::initInfo_RenderGraphSpecifyLaneOperation((re *)v3, v4);
        }
        qword_2540FFCC0 = (uint64_t)v3;
        qword_2540FFCC8 = 0;
        qword_2540FFCD0 = 1;
        dword_2540FFCD8 = 0;
        __cxa_guard_release(&qword_2540FFA30);
      }
    }
    dword_2540FFBE0 = 1;
    qword_2540FFBE8 = (uint64_t)&qword_2540FFCB8;
  }
}

uint64_t *re::allocInfo_RenderGraphSpecifyLaneOperation(re *this)
{
  unsigned __int8 v1;
  uint64_t v3;

  v1 = atomic_load((unsigned __int8 *)&qword_2540FFA38);
  if ((v1 & 1) == 0 && __cxa_guard_acquire(&qword_2540FFA38))
  {
    ArcSharedObject::ArcSharedObject((ArcSharedObject *)&qword_254100358, 0);
    *(_QWORD *)(v3 + 22) = 0;
    qword_254100368 = 0;
    qword_254100378 = 0;
    qword_254100380 = 0xFFFFFFFFLL;
    qword_254100358 = (uint64_t)&off_24ED7DAA8;
    qword_254100388 = (uint64_t)"RenderGraphSpecifyLaneOperation";
    dword_254100390 = 0;
    xmmword_254100398 = 0u;
    xmmword_2541003A8 = 0u;
    xmmword_2541003B8 = 0u;
    qword_2541003C8 = 0;
    __cxa_guard_release(&qword_2540FFA38);
  }
  return &qword_254100358;
}

void re::initInfo_RenderGraphSpecifyLaneOperation(re *this, re::IntrospectionBase *a2)
{
  const re::IntrospectionBase *v3;
  unsigned __int8 v4;
  re *v5;
  uint64_t *v6;
  uint64_t *v7;
  uint64_t *v8;
  re::IntrospectionBase *v9;
  uint64_t v10;
  uint64_t *v11;
  const re::IntrospectionBase *v12;
  void *v13;
  uint64_t v14;
  uint64_t *v15;
  const re::IntrospectionBase *v16;
  void *v17;
  uint64_t v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t *v21;
  uint64_t v22;
  __int128 v23;
  _QWORD v24[2];
  __int128 v25;

  v24[0] = 0xEEB686440C99DCA4;
  v24[1] = "RenderGraphSpecifyLaneOperation";
  re::StringID::destroyString((re::StringID *)v24);
  *((_OWORD *)this + 2) = v25;
  v4 = atomic_load((unsigned __int8 *)&qword_2540FFA40);
  if ((v4 & 1) == 0)
  {
    v5 = (re *)__cxa_guard_acquire(&qword_2540FFA40);
    if ((_DWORD)v5)
    {
      v6 = re::introspectionAllocator(v5);
      v7 = v6;
      v8 = (uint64_t *)qword_2540FFA60;
      if (!qword_2540FFA60)
      {
        v8 = re::allocInfo_RenderGraphSpecifyOperationBase((re *)v6);
        qword_2540FFA60 = (uint64_t)v8;
        re::initInfo_RenderGraphSpecifyOperationBase((re *)v8, v9);
      }
      v10 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v7 + 32))(v7, 72, 8);
      *(_DWORD *)v10 = 1;
      *(_QWORD *)(v10 + 8) = "RenderGraphSpecifyOperationBase";
      *(_QWORD *)(v10 + 16) = v8;
      *(_QWORD *)(v10 + 24) = 0;
      *(_QWORD *)(v10 + 32) = 0;
      *(_DWORD *)(v10 + 40) = 3;
      *(_QWORD *)(v10 + 48) = 0;
      *(_QWORD *)(v10 + 56) = 0;
      *(_DWORD *)(v10 + 64) = 0;
      qword_2540FFCE0 = v10;
      v11 = re::introspectionAllocator((re *)v10);
      v13 = re::IntrospectionInfo<re::StringID>::get(1, v12);
      v14 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v11 + 32))(v11, 72, 8);
      *(_DWORD *)v14 = 1;
      *(_QWORD *)(v14 + 8) = "lane";
      *(_QWORD *)(v14 + 16) = v13;
      *(_QWORD *)(v14 + 24) = 0;
      *(_QWORD *)(v14 + 32) = 0x1000000001;
      *(_DWORD *)(v14 + 40) = 0;
      *(_QWORD *)(v14 + 48) = 0;
      *(_QWORD *)(v14 + 56) = 0;
      *(_DWORD *)(v14 + 64) = 0;
      qword_2540FFCE8 = v14;
      v15 = re::introspectionAllocator((re *)v14);
      v17 = re::IntrospectionInfo<re::StringID>::get(1, v16);
      v18 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v15 + 32))(v15, 72, 8);
      *(_DWORD *)v18 = 1;
      *(_QWORD *)(v18 + 8) = "graphScopeOverride";
      *(_QWORD *)(v18 + 16) = v17;
      *(_QWORD *)(v18 + 24) = 0;
      *(_QWORD *)(v18 + 32) = 0xB800000003;
      *(_DWORD *)(v18 + 40) = 0;
      *(_QWORD *)(v18 + 48) = 0;
      *(_QWORD *)(v18 + 56) = 0;
      *(_DWORD *)(v18 + 64) = 0;
      qword_2540FFCF0 = v18;
      v19 = re::introspectionAllocator((re *)v18);
      re::IntrospectionInfo<re::Optional<re::RenderGraphTargetDescriptionData>>::get((re *)v19);
      v20 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v19 + 32))(v19, 72, 8);
      *(_DWORD *)v20 = 1;
      *(_QWORD *)(v20 + 8) = "targetDescription";
      *(_QWORD *)(v20 + 16) = &qword_2540FFDA0;
      *(_QWORD *)(v20 + 24) = 0;
      *(_QWORD *)(v20 + 32) = 0x2000000004;
      *(_DWORD *)(v20 + 40) = 0;
      *(_QWORD *)(v20 + 48) = 0;
      *(_QWORD *)(v20 + 56) = 0;
      *(_DWORD *)(v20 + 64) = 0;
      qword_2540FFCF8 = v20;
      v21 = re::introspectionAllocator((re *)v20);
      re::IntrospectionInfo<re::Optional<re::RenderGraphBufferDescriptionData>>::get((re *)v21);
      v22 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v21 + 32))(v21, 72, 8);
      *(_DWORD *)v22 = 1;
      *(_QWORD *)(v22 + 8) = "bufferDescription";
      *(_QWORD *)(v22 + 16) = &qword_2540FFDE0;
      *(_QWORD *)(v22 + 24) = 0;
      *(_QWORD *)(v22 + 32) = 0x9000000005;
      *(_DWORD *)(v22 + 40) = 0;
      *(_QWORD *)(v22 + 48) = 0;
      *(_QWORD *)(v22 + 56) = 0;
      *(_DWORD *)(v22 + 64) = 0;
      qword_2540FFD00 = v22;
      __cxa_guard_release(&qword_2540FFA40);
    }
  }
  *((_QWORD *)this + 2) = 0xC800000008;
  *((_DWORD *)this + 6) = 8;
  *((_WORD *)this + 14) = 0;
  *((_DWORD *)this + 14) = 5;
  *((_QWORD *)this + 8) = &qword_2540FFCE0;
  *((_QWORD *)this + 9) = re::internal::defaultConstruct<re::RenderGraphSpecifyLaneOperation>;
  *((_QWORD *)this + 10) = re::internal::defaultDestruct<re::RenderGraphSpecifyLaneOperation>;
  *((_QWORD *)this + 11) = 0;
  *((_QWORD *)this + 12) = 0;
  *((_QWORD *)this + 13) = re::internal::defaultConstructV2<re::RenderGraphSpecifyLaneOperation>;
  *((_QWORD *)this + 14) = re::internal::defaultDestructV2<re::RenderGraphSpecifyLaneOperation>;
  re::IntrospectionRegistry::add(this, v3);
  v23 = v25;
}

void sub_225346D80(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_2540FFA40);
  _Unwind_Resume(a1);
}

void re::IntrospectionInfo<re::Optional<re::RenderGraphTargetDescriptionData>>::get(re *a1)
{
  unsigned __int8 v1;
  uint64_t *v2;
  re::IntrospectionBase *v3;
  int v4;
  re::IntrospectionRegistry *v5;
  const re::IntrospectionBase *v6;
  const char *v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  __int128 v11;
  __int128 v12;
  uint64_t v13[2];
  __int128 v14;
  uint64_t v15;
  char v16;
  _BYTE v17[479];

  v1 = atomic_load((unsigned __int8 *)&qword_2540FFB70);
  if ((v1 & 1) == 0)
  {
    a1 = (re *)__cxa_guard_acquire(&qword_2540FFB70);
    if ((_DWORD)a1)
    {
      re::IntrospectionOptionalBase::IntrospectionOptionalBase((re::IntrospectionOptionalBase *)&qword_2540FFDA0);
      qword_2540FFDA0 = (uint64_t)&off_24ED37C00;
      __cxa_guard_release(&qword_2540FFB70);
    }
  }
  if ((byte_2540FF99C & 1) == 0)
  {
    v2 = (uint64_t *)qword_2540FFA88;
    if (qword_2540FFA88
      || (v2 = re::allocInfo_RenderGraphTargetDescriptionData(a1),
          qword_2540FFA88 = (uint64_t)v2,
          re::initInfo_RenderGraphTargetDescriptionData((re *)v2, v3),
          (byte_2540FF99C & 1) == 0))
    {
      byte_2540FF99C = 1;
      v4 = *((_DWORD *)v2 + 6);
      ArcSharedObject::ArcSharedObject((ArcSharedObject *)&qword_2540FFDA0, 0);
      qword_2540FFDB0 = 0x700000000DLL;
      dword_2540FFDB8 = v4;
      word_2540FFDBC = 0;
      *(_QWORD *)&xmmword_2540FFDC0 = 0;
      *((_QWORD *)&xmmword_2540FFDC0 + 1) = 0xFFFFFFFFLL;
      qword_2540FFDD0 = (uint64_t)v2;
      qword_2540FFDD8 = 0;
      qword_2540FFDA0 = (uint64_t)&off_24ED37C00;
      re::IntrospectionRegistry::add(v5, v6);
      re::getPrettyTypeName((re *)&qword_2540FFDA0, (const re::IntrospectionBase *)&v15);
      if ((v16 & 1) != 0)
        v7 = *(const char **)&v17[7];
      else
        v7 = v17;
      if (v15 && (v16 & 1) != 0)
        (*(void (**)(void))(*(_QWORD *)v15 + 40))();
      v12 = *((_OWORD *)v2 + 2);
      v8 = (uint64_t *)re::HashTable<re::StringID,re::StateParameterInt *,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::tryGet((uint64_t)&unk_25582A358, v13);
      if (v8)
      {
        v9 = *v8;
        *((_QWORD *)&v11 + 1) = v9;
      }
      else
      {
        v14 = v12;
        re::TypeBuilder::beginOptionalType((uint64_t)&v15, v13, 0x70uLL, 8uLL, &v14);
        re::TypeBuilder::setOptionalAccessors((uint64_t)&v15, (void *(*)(void *))re::TypeBuilderHelper::registerOptional<re::RenderGraphTargetDescriptionData>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *)#1}::__invoke, (void (*)(void *, const void *))re::TypeBuilderHelper::registerOptional<re::RenderGraphTargetDescriptionData>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,void const*)#1}::__invoke);
        re::TypeBuilder::~TypeBuilder((re::TypeBuilder *)&v15, v10);
      }
      xmmword_2540FFDC0 = v11;
      re::StringID::destroyString((re::StringID *)v13);
    }
  }
}

void sub_225346FBC(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_2540FFB70);
  _Unwind_Resume(a1);
}

void re::IntrospectionInfo<re::Optional<re::RenderGraphBufferDescriptionData>>::get(re *a1)
{
  unsigned __int8 v1;
  uint64_t *v2;
  re::IntrospectionBase *v3;
  int v4;
  re::IntrospectionRegistry *v5;
  const re::IntrospectionBase *v6;
  const char *v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  __int128 v11;
  __int128 v12;
  uint64_t v13[2];
  __int128 v14;
  uint64_t v15;
  char v16;
  _BYTE v17[479];

  v1 = atomic_load((unsigned __int8 *)&qword_2540FFB78);
  if ((v1 & 1) == 0)
  {
    a1 = (re *)__cxa_guard_acquire(&qword_2540FFB78);
    if ((_DWORD)a1)
    {
      re::IntrospectionOptionalBase::IntrospectionOptionalBase((re::IntrospectionOptionalBase *)&qword_2540FFDE0);
      qword_2540FFDE0 = (uint64_t)&off_24ED37C80;
      __cxa_guard_release(&qword_2540FFB78);
    }
  }
  if ((byte_2540FF99D & 1) == 0)
  {
    v2 = (uint64_t *)qword_2540FF9C8;
    if (qword_2540FF9C8
      || (v2 = re::allocInfo_RenderGraphBufferDescriptionData(a1),
          qword_2540FF9C8 = (uint64_t)v2,
          re::initInfo_RenderGraphBufferDescriptionData((re *)v2, v3),
          (byte_2540FF99D & 1) == 0))
    {
      byte_2540FF99D = 1;
      v4 = *((_DWORD *)v2 + 6);
      ArcSharedObject::ArcSharedObject((ArcSharedObject *)&qword_2540FFDE0, 0);
      qword_2540FFDF0 = 0x280000000DLL;
      dword_2540FFDF8 = v4;
      word_2540FFDFC = 0;
      *(_QWORD *)&xmmword_2540FFE00 = 0;
      *((_QWORD *)&xmmword_2540FFE00 + 1) = 0xFFFFFFFFLL;
      qword_2540FFE10 = (uint64_t)v2;
      qword_2540FFE18 = 0;
      qword_2540FFDE0 = (uint64_t)&off_24ED37C80;
      re::IntrospectionRegistry::add(v5, v6);
      re::getPrettyTypeName((re *)&qword_2540FFDE0, (const re::IntrospectionBase *)&v15);
      if ((v16 & 1) != 0)
        v7 = *(const char **)&v17[7];
      else
        v7 = v17;
      if (v15 && (v16 & 1) != 0)
        (*(void (**)(void))(*(_QWORD *)v15 + 40))();
      v12 = *((_OWORD *)v2 + 2);
      v8 = (uint64_t *)re::HashTable<re::StringID,re::StateParameterInt *,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::tryGet((uint64_t)&unk_25582A358, v13);
      if (v8)
      {
        v9 = *v8;
        *((_QWORD *)&v11 + 1) = v9;
      }
      else
      {
        v14 = v12;
        re::TypeBuilder::beginOptionalType((uint64_t)&v15, v13, 0x28uLL, 8uLL, &v14);
        re::TypeBuilder::setOptionalAccessors((uint64_t)&v15, (void *(*)(void *))re::TypeBuilderHelper::registerOptional<re::RenderGraphBufferDescriptionData>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *)#1}::__invoke, (void (*)(void *, const void *))re::TypeBuilderHelper::registerOptional<re::RenderGraphBufferDescriptionData>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,void const*)#1}::__invoke);
        re::TypeBuilder::~TypeBuilder((re::TypeBuilder *)&v15, v10);
      }
      xmmword_2540FFE00 = v11;
      re::StringID::destroyString((re::StringID *)v13);
    }
  }
}

void sub_2253471E4(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_2540FFB78);
  _Unwind_Resume(a1);
}

void re::internal::defaultConstruct<re::RenderGraphSpecifyLaneOperation>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(_QWORD *)a3 = &off_24ED379D0;
  *(_QWORD *)(a3 + 16) = 0;
  *(_QWORD *)(a3 + 24) = &str_110;
  *(_BYTE *)(a3 + 32) = 0;
  *(_BYTE *)(a3 + 144) = 0;
  *(_QWORD *)(a3 + 184) = 0;
  *(_QWORD *)(a3 + 192) = &str_110;
}

void re::internal::defaultDestruct<re::RenderGraphSpecifyLaneOperation>(uint64_t a1, uint64_t a2, _BYTE *a3)
{
  re::StringID::destroyString((re::StringID *)(a3 + 184));
  if (a3[32])
    re::AssetHandle::~AssetHandle((re::AssetHandle *)(a3 + 112));
  re::StringID::destroyString((re::StringID *)(a3 + 16));
}

uint64_t re::internal::defaultConstructV2<re::RenderGraphSpecifyLaneOperation>(uint64_t result)
{
  *(_QWORD *)result = &off_24ED379D0;
  *(_QWORD *)(result + 16) = 0;
  *(_QWORD *)(result + 24) = &str_110;
  *(_BYTE *)(result + 32) = 0;
  *(_BYTE *)(result + 144) = 0;
  *(_QWORD *)(result + 184) = 0;
  *(_QWORD *)(result + 192) = &str_110;
  return result;
}

void re::internal::defaultDestructV2<re::RenderGraphSpecifyLaneOperation>(_BYTE *a1)
{
  re::StringID::destroyString((re::StringID *)(a1 + 184));
  if (a1[32])
    re::AssetHandle::~AssetHandle((re::AssetHandle *)(a1 + 112));
  re::StringID::destroyString((re::StringID *)(a1 + 16));
}

uint64_t *re::allocInfo_RenderGraphSpecifyOperationBase(re *this)
{
  unsigned __int8 v1;
  uint64_t v3;

  v1 = atomic_load((unsigned __int8 *)&qword_2540FFA50);
  if ((v1 & 1) == 0 && __cxa_guard_acquire(&qword_2540FFA50))
  {
    ArcSharedObject::ArcSharedObject((ArcSharedObject *)&qword_2541003D0, 0);
    *(_QWORD *)(v3 + 22) = 0;
    qword_2541003E0 = 0;
    qword_2541003F0 = 0;
    qword_2541003F8 = 0xFFFFFFFFLL;
    qword_2541003D0 = (uint64_t)&off_24ED7DAA8;
    qword_254100400 = (uint64_t)"RenderGraphSpecifyOperationBase";
    dword_254100408 = 0;
    xmmword_254100410 = 0u;
    xmmword_254100420 = 0u;
    xmmword_254100430 = 0u;
    qword_254100440 = 0;
    __cxa_guard_release(&qword_2540FFA50);
  }
  return &qword_2541003D0;
}

void re::initInfo_RenderGraphSpecifyOperationBase(re *this, re::IntrospectionBase *a2)
{
  const re::IntrospectionBase *v3;
  unsigned __int8 v4;
  re *v5;
  uint64_t *v6;
  const re::IntrospectionBase *v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  __int128 v11;
  _QWORD v12[2];
  __int128 v13;

  v12[0] = 0x3AAEC69498BCCC9ELL;
  v12[1] = "RenderGraphSpecifyOperationBase";
  re::StringID::destroyString((re::StringID *)v12);
  *((_OWORD *)this + 2) = v13;
  v4 = atomic_load((unsigned __int8 *)&qword_2540FFA58);
  if ((v4 & 1) == 0)
  {
    v5 = (re *)__cxa_guard_acquire(&qword_2540FFA58);
    if ((_DWORD)v5)
    {
      v6 = re::introspectionAllocator(v5);
      re::introspect_RenderGraphSpecifyOperationBaseType((re *)v6, v7);
      v8 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v6 + 32))(v6, 32, 8);
      *(_DWORD *)v8 = 3;
      *(_QWORD *)(v8 + 8) = &qword_2541000A0;
      *(_QWORD *)(v8 + 16) = 0;
      *(_DWORD *)(v8 + 24) = 8;
      qword_2540FFBF0 = v8;
      v9 = re::introspectionAllocator((re *)v8);
      re::introspectionTable_RenderGraphSpecifyOperationBase((re *)v9);
      v10 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v9 + 32))(v9, 16, 8);
      *(_DWORD *)v10 = 2;
      *(_QWORD *)(v10 + 8) = &dword_2540FFBE0;
      qword_2540FFBF8 = v10;
      __cxa_guard_release(&qword_2540FFA58);
    }
  }
  *((_QWORD *)this + 2) = 0x1000000008;
  *((_DWORD *)this + 6) = 8;
  *((_WORD *)this + 14) = 0;
  *((_QWORD *)this + 11) = 0;
  *((_QWORD *)this + 12) = 0;
  *((_DWORD *)this + 14) = 2;
  *((_QWORD *)this + 8) = &qword_2540FFBF0;
  re::IntrospectionRegistry::add(this, v3);
  v11 = v13;
}

void sub_22534750C(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_2540FFA58);
  _Unwind_Resume(a1);
}

void re::introspect_RenderGraphResourceDescriptionType(re *this, const re::IntrospectionBase *a2)
{
  unsigned __int8 v2;
  unsigned __int8 v3;
  uint64_t *v4;
  uint64_t v5;
  unsigned int *v6;
  _anonymous_namespace_ *v7;
  unint64_t v8;
  unint64_t i;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  char v13;
  unsigned __int8 *v14;
  int v15;
  uint64_t v16;
  unint64_t j;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  char v21;
  unsigned __int8 *v22;
  int v23;
  uint64_t v24;
  uint64_t v25;
  re *v26;
  uint64_t *v27;
  re *v28;
  uint64_t *v29;
  re *v30;
  uint64_t *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  const char *v35;
  __int128 v36;
  StringID v37;
  _QWORD v38[2];
  _QWORD v39[61];

  v2 = atomic_load((unsigned __int8 *)&qword_2540FFA68);
  if ((v2 & 1) == 0)
  {
    v26 = (re *)__cxa_guard_acquire(&qword_2540FFA68);
    if ((_DWORD)v26)
    {
      v27 = re::introspectionAllocator(v26);
      v28 = (re *)(*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v27 + 32))(v27, 24, 8);
      *(_DWORD *)v28 = 1;
      *((_QWORD *)v28 + 1) = 0;
      *((_QWORD *)v28 + 2) = "MemoryManaged";
      qword_2540FFC40 = (uint64_t)v28;
      v29 = re::introspectionAllocator(v28);
      v30 = (re *)(*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v29 + 32))(v29, 24, 8);
      *(_DWORD *)v30 = 1;
      *((_QWORD *)v30 + 1) = 1;
      *((_QWORD *)v30 + 2) = "External";
      qword_2540FFC48 = (uint64_t)v30;
      v31 = re::introspectionAllocator(v30);
      v32 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v31 + 32))(v31, 24, 8);
      *(_DWORD *)v32 = 1;
      *(_QWORD *)(v32 + 8) = 2;
      *(_QWORD *)(v32 + 16) = "Unspecified";
      qword_2540FFC50 = v32;
      __cxa_guard_release(&qword_2540FFA68);
    }
  }
  v3 = atomic_load((unsigned __int8 *)&qword_2540FFA70);
  if ((v3 & 1) == 0 && __cxa_guard_acquire(&qword_2540FFA70))
  {
    re::IntrospectionBasic::IntrospectionBasic((re::IntrospectionBasic *)&qword_2541000E8, "RenderGraphResourceDescriptionType", 4, 4, 1, 1);
    qword_2541000E8 = (uint64_t)&off_24ED7D9E8;
    qword_254100128 = (uint64_t)&re::introspect_RenderGraphResourceDescriptionType(BOOL)::enumTable;
    dword_2541000F8 = 9;
    __cxa_guard_release(&qword_2540FFA70);
  }
  if ((byte_2540FF99A & 1) == 0)
  {
    byte_2540FF99A = 1;
    re::IntrospectionRegistry::add((re::IntrospectionRegistry *)&qword_2541000E8, a2);
    v34 = 0x56001466E58CE620;
    v35 = "RenderGraphResourceDescriptionType";
    v39[0] = 208862;
    v39[1] = "int";
    v4 = (uint64_t *)re::HashTable<re::StringID,re::StateParameterInt *,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::tryGet((uint64_t)&unk_25582A358, v39);
    if (v4)
    {
      v5 = *v4;
      re::StringID::destroyString((re::StringID *)v39);
      v6 = (unsigned int *)qword_254100128;
      v38[1] = v5;
      re::TypeBuilder::beginEnumType((uint64_t)v39, &v34, 1, 1, (uint64_t)v38);
      v8 = *v6;
      if ((_DWORD)v8)
      {
        for (i = 0; i < v8; ++i)
        {
          v10 = *(_QWORD *)(*((_QWORD *)v6 + 1) + 8 * i);
          if (*(_DWORD *)v10 == 1)
          {
            v11 = *(char **)(v10 + 16);
            if (v11)
            {
              v12 = *v11;
              if (*v11)
              {
                v13 = v11[1];
                if (v13)
                {
                  v14 = (unsigned __int8 *)(v11 + 2);
                  do
                  {
                    v12 = 31 * v12 + v13;
                    v15 = *v14++;
                    v13 = v15;
                  }
                  while (v15);
                }
              }
            }
            else
            {
              v12 = 0;
            }
            v16 = *(_QWORD *)(v10 + 8);
            *(_QWORD *)&v37.var0 = 2 * v12;
            v37.var1 = v11;
            re::TypeBuilder::addEnumConstant((re::TypeBuilder *)v39, v16, &v37);
            re::StringID::destroyString((re::StringID *)&v37);
            v8 = *v6;
          }
        }
        if (v8)
        {
          for (j = 0; j < v8; ++j)
          {
            v18 = *(_QWORD *)(*((_QWORD *)v6 + 1) + 8 * j);
            if (*(_DWORD *)v18 == 2)
            {
              v19 = *(char **)(v18 + 16);
              if (v19)
              {
                v20 = *v19;
                if (*v19)
                {
                  v21 = v19[1];
                  if (v21)
                  {
                    v22 = (unsigned __int8 *)(v19 + 2);
                    do
                    {
                      v20 = 31 * v20 + v21;
                      v23 = *v22++;
                      v21 = v23;
                    }
                    while (v23);
                  }
                }
              }
              else
              {
                v20 = 0;
              }
              v24 = *(_QWORD *)(v18 + 8);
              *(_QWORD *)&v37.var0 = 2 * v20;
              v37.var1 = v19;
              re::TypeBuilder::addEnumConstantRenaming((re::TypeBuilder *)v39, v24, &v37);
              re::StringID::destroyString((re::StringID *)&v37);
              v8 = *v6;
            }
          }
        }
      }
      re::TypeBuilder::~TypeBuilder((re::TypeBuilder *)v39, v25);
      xmmword_254100108 = v36;
      re::StringID::destroyString((re::StringID *)&v34);
    }
    else
    {
      re::StringID::destroyString((re::StringID *)v39);
      re::internal::assertLog((re::internal *)5, v33, "assertion failure: '%s' (%s:line %i) Failed to determine underlying type of enum %s.", "valueID.isValid()", "registerEnumType", 2796, "RenderGraphResourceDescriptionType", v34, v35);
      _os_crash();
      __break(1u);
    }
  }
}

void sub_2253478D8(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_2540FFA68);
  _Unwind_Resume(a1);
}

uint64_t *re::allocInfo_RenderGraphTargetDescriptionData(re *this)
{
  unsigned __int8 v1;
  uint64_t v3;

  v1 = atomic_load((unsigned __int8 *)&qword_2540FFA78);
  if ((v1 & 1) == 0 && __cxa_guard_acquire(&qword_2540FFA78))
  {
    ArcSharedObject::ArcSharedObject((ArcSharedObject *)&qword_254100448, 0);
    *(_QWORD *)(v3 + 22) = 0;
    qword_254100458 = 0;
    qword_254100468 = 0;
    qword_254100470 = 0xFFFFFFFFLL;
    qword_254100448 = (uint64_t)&off_24ED7DAA8;
    qword_254100478 = (uint64_t)"RenderGraphTargetDescriptionData";
    dword_254100480 = 0;
    xmmword_254100488 = 0u;
    xmmword_254100498 = 0u;
    xmmword_2541004A8 = 0u;
    qword_2541004B8 = 0;
    __cxa_guard_release(&qword_2540FFA78);
  }
  return &qword_254100448;
}

void re::initInfo_RenderGraphTargetDescriptionData(re *this, re::IntrospectionBase *a2)
{
  const re::IntrospectionBase *v3;
  unsigned __int8 v4;
  re *v5;
  uint64_t *v6;
  const re::IntrospectionBase *v7;
  uint64_t v8;
  uint64_t *v9;
  const re::IntrospectionBase *v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t *v13;
  const re::IntrospectionBase *v14;
  void *v15;
  uint64_t v16;
  uint64_t *v17;
  const re::IntrospectionBase *v18;
  void *v19;
  uint64_t v20;
  uint64_t *v21;
  const re::IntrospectionBase *v22;
  void *v23;
  uint64_t v24;
  uint64_t *v25;
  const re::IntrospectionBase *v26;
  void *v27;
  uint64_t v28;
  uint64_t *v29;
  const re::IntrospectionBase *v30;
  void *v31;
  uint64_t v32;
  uint64_t *v33;
  const re::IntrospectionBase *v34;
  void *v35;
  uint64_t v36;
  uint64_t *v37;
  const re::IntrospectionBase *v38;
  void *v39;
  uint64_t v40;
  uint64_t *v41;
  const re::IntrospectionBase *v42;
  void *v43;
  uint64_t v44;
  uint64_t *v45;
  const re::IntrospectionBase *v46;
  void *v47;
  uint64_t v48;
  uint64_t *v49;
  const re::IntrospectionBase *v50;
  void *Action;
  uint64_t v52;
  uint64_t *v53;
  const re::IntrospectionBase *v54;
  void *v55;
  uint64_t v56;
  uint64_t *v57;
  const re::IntrospectionBase *v58;
  void *v59;
  uint64_t v60;
  uint64_t *v61;
  const re::IntrospectionBase *v62;
  void *v63;
  uint64_t v64;
  uint64_t *v65;
  const re::IntrospectionBase *v66;
  void *v67;
  uint64_t v68;
  uint64_t *v69;
  const re::IntrospectionBase *v70;
  void *v71;
  uint64_t v72;
  uint64_t *v73;
  const re::IntrospectionBase *v74;
  uint64_t *v75;
  uint64_t v76;
  __int128 v77;
  _QWORD v78[2];
  __int128 v79;

  v78[0] = 0xBE1FA06AD453B33ALL;
  v78[1] = "RenderGraphTargetDescriptionData";
  re::StringID::destroyString((re::StringID *)v78);
  *((_OWORD *)this + 2) = v79;
  v4 = atomic_load((unsigned __int8 *)&qword_2540FFA80);
  if ((v4 & 1) == 0)
  {
    v5 = (re *)__cxa_guard_acquire(&qword_2540FFA80);
    if ((_DWORD)v5)
    {
      v6 = re::introspectionAllocator(v5);
      re::introspect_RenderGraphResourceDescriptionType((re *)v6, v7);
      v8 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v6 + 32))(v6, 72, 8);
      *(_DWORD *)v8 = 1;
      *(_QWORD *)(v8 + 8) = "type";
      *(_QWORD *)(v8 + 16) = &qword_2541000E8;
      *(_QWORD *)(v8 + 24) = 0;
      *(_QWORD *)(v8 + 32) = 1;
      *(_DWORD *)(v8 + 40) = 0;
      *(_QWORD *)(v8 + 48) = 0;
      *(_QWORD *)(v8 + 56) = 0;
      *(_DWORD *)(v8 + 64) = 0;
      qword_254100790 = v8;
      v9 = re::introspectionAllocator((re *)v8);
      v11 = re::mtl::introspect_PixelFormat((re::mtl *)1, v10);
      v12 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v9 + 32))(v9, 72, 8);
      *(_DWORD *)v12 = 1;
      *(_QWORD *)(v12 + 8) = "format";
      *(_QWORD *)(v12 + 16) = v11;
      *(_QWORD *)(v12 + 24) = 0;
      *(_QWORD *)(v12 + 32) = 0x400000002;
      *(_DWORD *)(v12 + 40) = 0;
      *(_QWORD *)(v12 + 48) = 0;
      *(_QWORD *)(v12 + 56) = 0;
      *(_DWORD *)(v12 + 64) = 0;
      qword_254100798 = v12;
      v13 = re::introspectionAllocator((re *)v12);
      v15 = re::introspect_uint32_t((re *)1, v14);
      v16 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v13 + 32))(v13, 72, 8);
      *(_DWORD *)v16 = 1;
      *(_QWORD *)(v16 + 8) = "width";
      *(_QWORD *)(v16 + 16) = v15;
      *(_QWORD *)(v16 + 24) = 0;
      *(_QWORD *)(v16 + 32) = 0xC00000003;
      *(_DWORD *)(v16 + 40) = 0;
      *(_QWORD *)(v16 + 48) = 0;
      *(_QWORD *)(v16 + 56) = 0;
      *(_DWORD *)(v16 + 64) = 0;
      qword_2541007A0 = v16;
      v17 = re::introspectionAllocator((re *)v16);
      v19 = re::introspect_uint32_t((re *)1, v18);
      v20 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v17 + 32))(v17, 72, 8);
      *(_DWORD *)v20 = 1;
      *(_QWORD *)(v20 + 8) = "height";
      *(_QWORD *)(v20 + 16) = v19;
      *(_QWORD *)(v20 + 24) = 0;
      *(_QWORD *)(v20 + 32) = 0x1000000004;
      *(_DWORD *)(v20 + 40) = 0;
      *(_QWORD *)(v20 + 48) = 0;
      *(_QWORD *)(v20 + 56) = 0;
      *(_DWORD *)(v20 + 64) = 0;
      qword_2541007A8 = v20;
      v21 = re::introspectionAllocator((re *)v20);
      v23 = re::introspect_uint32_t((re *)1, v22);
      v24 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v21 + 32))(v21, 72, 8);
      *(_DWORD *)v24 = 1;
      *(_QWORD *)(v24 + 8) = "sampleCount";
      *(_QWORD *)(v24 + 16) = v23;
      *(_QWORD *)(v24 + 24) = 0;
      *(_QWORD *)(v24 + 32) = 0x1800000005;
      *(_DWORD *)(v24 + 40) = 0;
      *(_QWORD *)(v24 + 48) = 0;
      *(_QWORD *)(v24 + 56) = 0;
      *(_DWORD *)(v24 + 64) = 0;
      qword_2541007B0 = v24;
      v25 = re::introspectionAllocator((re *)v24);
      v27 = re::introspect_float((re *)1, v26);
      v28 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v25 + 32))(v25, 72, 8);
      *(_DWORD *)v28 = 1;
      *(_QWORD *)(v28 + 8) = "widthMultiplier";
      *(_QWORD *)(v28 + 16) = v27;
      *(_QWORD *)(v28 + 24) = 0;
      *(_QWORD *)(v28 + 32) = 0x3000000006;
      *(_DWORD *)(v28 + 40) = 0;
      *(_QWORD *)(v28 + 48) = 0;
      *(_QWORD *)(v28 + 56) = 0;
      *(_DWORD *)(v28 + 64) = 0;
      qword_2541007B8 = v28;
      v29 = re::introspectionAllocator((re *)v28);
      v31 = re::introspect_float((re *)1, v30);
      v32 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v29 + 32))(v29, 72, 8);
      *(_DWORD *)v32 = 1;
      *(_QWORD *)(v32 + 8) = "heightMultiplier";
      *(_QWORD *)(v32 + 16) = v31;
      *(_QWORD *)(v32 + 24) = 0;
      *(_QWORD *)(v32 + 32) = 0x3400000007;
      *(_DWORD *)(v32 + 40) = 0;
      *(_QWORD *)(v32 + 48) = 0;
      *(_QWORD *)(v32 + 56) = 0;
      *(_DWORD *)(v32 + 64) = 0;
      qword_2541007C0 = v32;
      v33 = re::introspectionAllocator((re *)v32);
      v35 = re::introspect_RenderGraphTargetDimensionRoundingMode((re *)1, v34);
      v36 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v33 + 32))(v33, 72, 8);
      *(_DWORD *)v36 = 1;
      *(_QWORD *)(v36 + 8) = "widthRoundingMode";
      *(_QWORD *)(v36 + 16) = v35;
      *(_QWORD *)(v36 + 24) = 0;
      *(_QWORD *)(v36 + 32) = 0x3800000008;
      *(_DWORD *)(v36 + 40) = 0;
      *(_QWORD *)(v36 + 48) = 0;
      *(_QWORD *)(v36 + 56) = 0;
      *(_DWORD *)(v36 + 64) = 0;
      qword_2541007C8 = v36;
      v37 = re::introspectionAllocator((re *)v36);
      v39 = re::introspect_RenderGraphTargetDimensionRoundingMode((re *)1, v38);
      v40 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v37 + 32))(v37, 72, 8);
      *(_DWORD *)v40 = 1;
      *(_QWORD *)(v40 + 8) = "heightRoundingMode";
      *(_QWORD *)(v40 + 16) = v39;
      *(_QWORD *)(v40 + 24) = 0;
      *(_QWORD *)(v40 + 32) = 0x3C00000009;
      *(_DWORD *)(v40 + 40) = 0;
      *(_QWORD *)(v40 + 48) = 0;
      *(_QWORD *)(v40 + 56) = 0;
      *(_DWORD *)(v40 + 64) = 0;
      qword_2541007D0 = v40;
      v41 = re::introspectionAllocator((re *)v40);
      v43 = re::introspect_uint32_t((re *)1, v42);
      v44 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v41 + 32))(v41, 72, 8);
      *(_DWORD *)v44 = 1;
      *(_QWORD *)(v44 + 8) = "mipLevelCount";
      *(_QWORD *)(v44 + 16) = v43;
      *(_QWORD *)(v44 + 24) = 0;
      *(_QWORD *)(v44 + 32) = 0x1C0000000ALL;
      *(_DWORD *)(v44 + 40) = 0;
      *(_QWORD *)(v44 + 48) = 0;
      *(_QWORD *)(v44 + 56) = 0;
      *(_DWORD *)(v44 + 64) = 0;
      qword_2541007D8 = v44;
      v45 = re::introspectionAllocator((re *)v44);
      v47 = re::introspect_BOOL((re *)1, v46);
      v48 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v45 + 32))(v45, 72, 8);
      *(_DWORD *)v48 = 1;
      *(_QWORD *)(v48 + 8) = "exposeToMaterial";
      *(_QWORD *)(v48 + 16) = v47;
      *(_QWORD *)(v48 + 24) = 0;
      *(_QWORD *)(v48 + 32) = 0x600000000BLL;
      *(_DWORD *)(v48 + 40) = 0;
      *(_QWORD *)(v48 + 48) = 0;
      *(_QWORD *)(v48 + 56) = 0;
      *(_DWORD *)(v48 + 64) = 0;
      qword_2541007E0 = v48;
      v49 = re::introspectionAllocator((re *)v48);
      Action = re::mtl::introspect_LoadAction((re::mtl *)1, v50);
      v52 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v49 + 32))(v49, 72, 8);
      *(_DWORD *)v52 = 1;
      *(_QWORD *)(v52 + 8) = "initialLoadAction";
      *(_QWORD *)(v52 + 16) = Action;
      *(_QWORD *)(v52 + 24) = 0;
      *(_QWORD *)(v52 + 32) = 0x400000000CLL;
      *(_DWORD *)(v52 + 40) = 0;
      *(_QWORD *)(v52 + 48) = 0;
      *(_QWORD *)(v52 + 56) = 0;
      *(_DWORD *)(v52 + 64) = 0;
      qword_2541007E8 = v52;
      v53 = re::introspectionAllocator((re *)v52);
      v55 = re::mtl::introspect_TextureUsage((re::mtl *)1, v54);
      v56 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v53 + 32))(v53, 72, 8);
      *(_DWORD *)v56 = 1;
      *(_QWORD *)(v56 + 8) = "initialUsageFlags";
      *(_QWORD *)(v56 + 16) = v55;
      *(_QWORD *)(v56 + 24) = 0;
      *(_QWORD *)(v56 + 32) = 0x440000000DLL;
      *(_DWORD *)(v56 + 40) = 0;
      *(_QWORD *)(v56 + 48) = 0;
      *(_QWORD *)(v56 + 56) = 0;
      *(_DWORD *)(v56 + 64) = 0;
      qword_2541007F0 = v56;
      v57 = re::introspectionAllocator((re *)v56);
      v59 = re::introspect_uint32_t((re *)1, v58);
      v60 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v57 + 32))(v57, 72, 8);
      *(_DWORD *)v60 = 1;
      *(_QWORD *)(v60 + 8) = "tonemapInPlace";
      *(_QWORD *)(v60 + 16) = v59;
      *(_QWORD *)(v60 + 24) = 0;
      *(_QWORD *)(v60 + 32) = 0x200000000ELL;
      *(_DWORD *)(v60 + 40) = 0;
      *(_QWORD *)(v60 + 48) = 0;
      *(_QWORD *)(v60 + 56) = 0;
      *(_DWORD *)(v60 + 64) = 0;
      qword_2541007F8 = v60;
      v61 = re::introspectionAllocator((re *)v60);
      v63 = re::introspect_AssetHandle((re *)1, v62);
      v64 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v61 + 32))(v61, 72, 8);
      *(_DWORD *)v64 = 1;
      *(_QWORD *)(v64 + 8) = "externalTarget";
      *(_QWORD *)(v64 + 16) = v63;
      *(_QWORD *)(v64 + 24) = 0;
      *(_QWORD *)(v64 + 32) = 0x480000000FLL;
      *(_DWORD *)(v64 + 40) = 0;
      *(_QWORD *)(v64 + 48) = 0;
      *(_QWORD *)(v64 + 56) = 0;
      *(_DWORD *)(v64 + 64) = 0;
      qword_254100800 = v64;
      v65 = re::introspectionAllocator((re *)v64);
      v67 = re::introspect_uint32_t((re *)1, v66);
      v68 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v65 + 32))(v65, 72, 8);
      *(_DWORD *)v68 = 1;
      *(_QWORD *)(v68 + 8) = "arrayLength";
      *(_QWORD *)(v68 + 16) = v67;
      *(_QWORD *)(v68 + 24) = 0;
      *(_QWORD *)(v68 + 32) = 0x1400000010;
      *(_DWORD *)(v68 + 40) = 0;
      *(_QWORD *)(v68 + 48) = 0;
      *(_QWORD *)(v68 + 56) = 0;
      *(_DWORD *)(v68 + 64) = 0;
      qword_254100808 = v68;
      v69 = re::introspectionAllocator((re *)v68);
      v71 = re::introspect_uint64_t((re *)1, v70);
      v72 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v69 + 32))(v69, 72, 8);
      *(_DWORD *)v72 = 1;
      *(_QWORD *)(v72 + 8) = "protectionOptions";
      *(_QWORD *)(v72 + 16) = v71;
      *(_QWORD *)(v72 + 24) = 0;
      *(_QWORD *)(v72 + 32) = 0x2800000011;
      *(_DWORD *)(v72 + 40) = 0;
      *(_QWORD *)(v72 + 48) = 0;
      *(_QWORD *)(v72 + 56) = 0;
      *(_DWORD *)(v72 + 64) = 0;
      qword_254100810 = v72;
      v73 = re::introspectionAllocator((re *)v72);
      v75 = re::mtl::introspect_TextureType((re::mtl *)1, v74);
      v76 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v73 + 32))(v73, 72, 8);
      *(_DWORD *)v76 = 1;
      *(_QWORD *)(v76 + 8) = "textureType";
      *(_QWORD *)(v76 + 16) = v75;
      *(_QWORD *)(v76 + 24) = 0;
      *(_QWORD *)(v76 + 32) = 0x800000012;
      *(_DWORD *)(v76 + 40) = 0;
      *(_QWORD *)(v76 + 48) = 0;
      *(_QWORD *)(v76 + 56) = 0;
      *(_DWORD *)(v76 + 64) = 0;
      qword_254100818 = v76;
      __cxa_guard_release(&qword_2540FFA80);
    }
  }
  *((_QWORD *)this + 2) = 0x6800000008;
  *((_DWORD *)this + 6) = 8;
  *((_WORD *)this + 14) = 0;
  *((_DWORD *)this + 14) = 18;
  *((_QWORD *)this + 8) = &qword_254100790;
  *((_QWORD *)this + 9) = re::internal::defaultConstruct<re::RenderGraphTargetDescriptionData>;
  *((_QWORD *)this + 10) = re::internal::defaultDestruct<re::RenderGraphTargetDescriptionData>;
  *((_QWORD *)this + 11) = 0;
  *((_QWORD *)this + 12) = 0;
  *((_QWORD *)this + 13) = re::internal::defaultConstructV2<re::RenderGraphTargetDescriptionData>;
  *((_QWORD *)this + 14) = re::internal::defaultDestructV2<re::RenderGraphTargetDescriptionData>;
  re::IntrospectionRegistry::add(this, v3);
  v77 = v79;
}

void sub_2253481BC(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_2540FFA80);
  _Unwind_Resume(a1);
}

double re::internal::defaultConstruct<re::RenderGraphTargetDescriptionData>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  double result;

  *(_QWORD *)a3 = 2;
  *(_DWORD *)(a3 + 8) = 2;
  *(_QWORD *)(a3 + 40) = -1;
  *(_QWORD *)(a3 + 12) = -1;
  *(_QWORD *)(a3 + 20) = -1;
  *(_QWORD *)(a3 + 28) = -1;
  __asm { FMOV            V0.2S, #1.0 }
  *(double *)(a3 + 48) = result;
  *(_QWORD *)(a3 + 56) = 0;
  *(_DWORD *)(a3 + 64) = 2;
  *(_QWORD *)(a3 + 68) = 0;
  *(_QWORD *)(a3 + 84) = 0;
  *(_QWORD *)(a3 + 76) = 0;
  *(_QWORD *)(a3 + 89) = 0;
  return result;
}

void re::internal::defaultDestruct<re::RenderGraphTargetDescriptionData>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  re::AssetHandle::~AssetHandle((re::AssetHandle *)(a3 + 72));
}

double re::internal::defaultConstructV2<re::RenderGraphTargetDescriptionData>(uint64_t a1)
{
  double result;

  *(_QWORD *)a1 = 2;
  *(_DWORD *)(a1 + 8) = 2;
  *(_QWORD *)(a1 + 40) = -1;
  *(_QWORD *)(a1 + 12) = -1;
  *(_QWORD *)(a1 + 20) = -1;
  *(_QWORD *)(a1 + 28) = -1;
  __asm { FMOV            V0.2S, #1.0 }
  *(double *)(a1 + 48) = result;
  *(_QWORD *)(a1 + 56) = 0;
  *(_DWORD *)(a1 + 64) = 2;
  *(_QWORD *)(a1 + 68) = 0;
  *(_QWORD *)(a1 + 84) = 0;
  *(_QWORD *)(a1 + 76) = 0;
  *(_QWORD *)(a1 + 89) = 0;
  return result;
}

void re::internal::defaultDestructV2<re::RenderGraphTargetDescriptionData>(uint64_t a1)
{
  re::AssetHandle::~AssetHandle((re::AssetHandle *)(a1 + 72));
}

double re::internal::defaultConstruct<re::RenderGraphTargetData>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  double result;

  *(_QWORD *)a3 = 0;
  *(_QWORD *)(a3 + 8) = &str_110;
  *(_QWORD *)(a3 + 16) = 2;
  *(_DWORD *)(a3 + 24) = 2;
  *(_QWORD *)(a3 + 56) = -1;
  *(_QWORD *)(a3 + 28) = -1;
  *(_QWORD *)(a3 + 36) = -1;
  *(_QWORD *)(a3 + 44) = -1;
  __asm { FMOV            V0.2S, #1.0 }
  *(double *)(a3 + 64) = result;
  *(_QWORD *)(a3 + 72) = 0;
  *(_DWORD *)(a3 + 80) = 2;
  *(_QWORD *)(a3 + 152) = 0;
  *(_QWORD *)(a3 + 128) = 0;
  *(_QWORD *)(a3 + 136) = 0;
  *(_QWORD *)(a3 + 120) = 0;
  *(_DWORD *)(a3 + 144) = 0;
  *(_QWORD *)(a3 + 84) = 0;
  *(_QWORD *)(a3 + 100) = 0;
  *(_QWORD *)(a3 + 92) = 0;
  *(_QWORD *)(a3 + 105) = 0;
  return result;
}

void re::internal::defaultDestruct<re::RenderGraphTargetData>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  re::DynamicArray<re::RenderGraphDataStoreConnection>::deinit(a3 + 120);
  re::AssetHandle::~AssetHandle((re::AssetHandle *)(a3 + 88));
  re::StringID::destroyString((re::StringID *)a3);
}

double re::internal::defaultConstructV2<re::RenderGraphTargetData>(uint64_t a1)
{
  double result;

  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = &str_110;
  *(_QWORD *)(a1 + 16) = 2;
  *(_DWORD *)(a1 + 24) = 2;
  *(_QWORD *)(a1 + 56) = -1;
  *(_QWORD *)(a1 + 28) = -1;
  *(_QWORD *)(a1 + 36) = -1;
  *(_QWORD *)(a1 + 44) = -1;
  __asm { FMOV            V0.2S, #1.0 }
  *(double *)(a1 + 64) = result;
  *(_QWORD *)(a1 + 72) = 0;
  *(_DWORD *)(a1 + 80) = 2;
  *(_QWORD *)(a1 + 152) = 0;
  *(_QWORD *)(a1 + 128) = 0;
  *(_QWORD *)(a1 + 136) = 0;
  *(_QWORD *)(a1 + 120) = 0;
  *(_DWORD *)(a1 + 144) = 0;
  *(_QWORD *)(a1 + 84) = 0;
  *(_QWORD *)(a1 + 100) = 0;
  *(_QWORD *)(a1 + 92) = 0;
  *(_QWORD *)(a1 + 105) = 0;
  return result;
}

void re::internal::defaultDestructV2<re::RenderGraphTargetData>(uint64_t a1)
{
  re::DynamicArray<re::RenderGraphDataStoreConnection>::deinit(a1 + 120);
  re::AssetHandle::~AssetHandle((re::AssetHandle *)(a1 + 88));
  re::StringID::destroyString((re::StringID *)a1);
}

uint64_t *re::allocInfo_RenderGraphNodeDataPointer(re *this)
{
  unsigned __int8 v1;
  uint64_t v3;

  v1 = atomic_load((unsigned __int8 *)&qword_2540FFAA8);
  if ((v1 & 1) == 0 && __cxa_guard_acquire(&qword_2540FFAA8))
  {
    ArcSharedObject::ArcSharedObject((ArcSharedObject *)&qword_254100538, 0);
    *(_QWORD *)(v3 + 22) = 0;
    qword_254100548 = 0;
    qword_254100558 = 0;
    qword_254100560 = 0xFFFFFFFFLL;
    qword_254100538 = (uint64_t)&off_24ED7DAA8;
    qword_254100568 = (uint64_t)"RenderGraphNodeDataPointer";
    dword_254100570 = 0;
    xmmword_254100578 = 0u;
    xmmword_254100588 = 0u;
    xmmword_254100598 = 0u;
    qword_2541005A8 = 0;
    __cxa_guard_release(&qword_2540FFAA8);
  }
  return &qword_254100538;
}

void re::initInfo_RenderGraphNodeDataPointer(re *this, re::IntrospectionBase *a2)
{
  const re::IntrospectionBase *v3;
  unsigned __int8 v4;
  re *v5;
  uint64_t *v6;
  const re::IntrospectionBase *v7;
  void *v8;
  uint64_t v9;
  uint64_t *v10;
  _QWORD *v11;
  __int128 v12;
  _QWORD v13[2];
  __int128 v14;

  v13[0] = 0xD192579ECB7666F2;
  v13[1] = "RenderGraphNodeDataPointer";
  re::StringID::destroyString((re::StringID *)v13);
  *((_OWORD *)this + 2) = v14;
  v4 = atomic_load((unsigned __int8 *)&qword_2540FFAB0);
  if ((v4 & 1) == 0)
  {
    v5 = (re *)__cxa_guard_acquire(&qword_2540FFAB0);
    if ((_DWORD)v5)
    {
      v6 = re::introspectionAllocator(v5);
      re::IntrospectionInfo<re::RenderGraphNode *>::get();
      v8 = re::introspect_size_t((re *)1, v7);
      v9 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v6 + 32))(v6, 72, 8);
      *(_DWORD *)v9 = 1;
      *(_QWORD *)(v9 + 8) = "data";
      *(_QWORD *)(v9 + 16) = &qword_2540FFE20;
      *(_QWORD *)(v9 + 24) = 0;
      *(_QWORD *)(v9 + 32) = 0x800000001;
      *(_DWORD *)(v9 + 40) = 2;
      *(_QWORD *)(v9 + 48) = v8;
      *(_QWORD *)(v9 + 56) = 0;
      *(_DWORD *)(v9 + 64) = 0;
      qword_2540FFC00 = v9;
      v10 = re::introspectionAllocator((re *)v9);
      v11 = (_QWORD *)(*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v10 + 32))(v10, 8, 4);
      *v11 = 0x100000004;
      qword_2540FFC08 = (uint64_t)v11;
      __cxa_guard_release(&qword_2540FFAB0);
    }
  }
  *((_QWORD *)this + 2) = 0x1000000008;
  *((_DWORD *)this + 6) = 8;
  *((_WORD *)this + 14) = 1;
  *((_DWORD *)this + 14) = 2;
  *((_QWORD *)this + 8) = &qword_2540FFC00;
  *((_QWORD *)this + 9) = re::internal::defaultConstruct<re::RenderGraphNodeDataPointer>;
  *((_QWORD *)this + 10) = re::internal::defaultDestruct<re::RenderGraphNodeDataPointer>;
  *((_QWORD *)this + 11) = 0;
  *((_QWORD *)this + 12) = 0;
  *((_QWORD *)this + 13) = re::internal::defaultConstructV2<re::RenderGraphNodeDataPointer>;
  *((_QWORD *)this + 14) = re::internal::defaultDestructV2<re::RenderGraphNodeDataPointer>;
  re::IntrospectionRegistry::add(this, v3);
  v12 = v14;
}

void sub_225348690(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_2540FFAB0);
  _Unwind_Resume(a1);
}

void re::IntrospectionInfo<re::RenderGraphNode *>::get()
{
  unsigned __int8 v0;
  uint64_t v1;
  re::IntrospectionRegistry *v2;
  const re::IntrospectionBase *v3;
  const char *v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  const char *v8;
  unint64_t v9;
  char *__s1;

  v0 = atomic_load((unsigned __int8 *)&qword_2540FFB80);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_2540FFB80))
  {
    re::IntrospectionPointer::IntrospectionPointer((re::IntrospectionPointer *)&qword_2540FFE20);
    __cxa_guard_release(&qword_2540FFB80);
  }
  if ((byte_2540FF99E & 1) == 0)
  {
    byte_2540FF99E = 1;
    v1 = re::introspect_RenderGraphNode((re::IntrospectionBase **)1);
    ArcSharedObject::ArcSharedObject((ArcSharedObject *)&qword_2540FFE20, 0);
    qword_2540FFE30 = 0x800000001;
    dword_2540FFE38 = 8;
    word_2540FFE3C = 0;
    *(_QWORD *)&xmmword_2540FFE40 = 0;
    *((_QWORD *)&xmmword_2540FFE40 + 1) = 0xFFFFFFFFLL;
    qword_2540FFE20 = (uint64_t)&off_24ED30800;
    qword_2540FFE50 = v1;
    qword_2540FFE58 = 0;
    re::IntrospectionRegistry::add(v2, v3);
    re::getPrettyTypeName((re *)&qword_2540FFE20, (const re::IntrospectionBase *)&v7);
    if ((BYTE8(v7) & 1) != 0)
      v4 = v8;
    else
      v4 = (char *)&v7 + 9;
    if ((_QWORD)v7 && (BYTE8(v7) & 1) != 0)
      (*(void (**)(void))(*(_QWORD *)v7 + 40))();
    if (v9 >> 1 == 94623636 && (__s1 == "char*" || !strcmp(__s1, "char*")))
    {
      v5 = v7;
    }
    else
    {
      v7 = *(_OWORD *)(v1 + 32);
      v5 = v6;
    }
    xmmword_2540FFE40 = v5;
    re::StringID::destroyString((re::StringID *)&v9);
  }
}

void sub_225348880(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_2540FFB80);
  _Unwind_Resume(a1);
}

void re::internal::defaultConstruct<re::RenderGraphNodeDataPointer>(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  *a3 = 0;
  a3[1] = 0;
}

_QWORD *re::internal::defaultConstructV2<re::RenderGraphNodeDataPointer>(_QWORD *result)
{
  *result = 0;
  result[1] = 0;
  return result;
}

void re::internal::defaultConstruct<re::RenderGraphInputData>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(_QWORD *)a3 = 0;
  *(_QWORD *)(a3 + 8) = &str_110;
  *(_QWORD *)(a3 + 16) = 0;
  *(_QWORD *)(a3 + 24) = &str_110;
  *(_BYTE *)(a3 + 32) = 0;
  *(_QWORD *)(a3 + 40) = 0;
  *(_QWORD *)(a3 + 48) = &str_110;
}

void re::internal::defaultDestruct<re::RenderGraphInputData>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  re::StringID::destroyString((re::StringID *)(a3 + 40));
  re::StringID::destroyString((re::StringID *)(a3 + 16));
  re::StringID::destroyString((re::StringID *)a3);
}

uint64_t re::internal::defaultConstructV2<re::RenderGraphInputData>(uint64_t result)
{
  *(_QWORD *)result = 0;
  *(_QWORD *)(result + 8) = &str_110;
  *(_QWORD *)(result + 16) = 0;
  *(_QWORD *)(result + 24) = &str_110;
  *(_BYTE *)(result + 32) = 0;
  *(_QWORD *)(result + 40) = 0;
  *(_QWORD *)(result + 48) = &str_110;
  return result;
}

void re::internal::defaultDestructV2<re::RenderGraphInputData>(uint64_t a1)
{
  re::StringID::destroyString((re::StringID *)(a1 + 40));
  re::StringID::destroyString((re::StringID *)(a1 + 16));
  re::StringID::destroyString((re::StringID *)a1);
}

void re::internal::defaultConstruct<re::RenderGraphOutputData>(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  *a3 = 0;
  a3[1] = &str_110;
  a3[2] = 0;
  a3[3] = &str_110;
  a3[4] = 0;
  a3[5] = &str_110;
}

void re::internal::defaultDestruct<re::RenderGraphOutputData>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  re::StringID::destroyString((re::StringID *)(a3 + 32));
  re::StringID::destroyString((re::StringID *)(a3 + 16));
  re::StringID::destroyString((re::StringID *)a3);
}

_QWORD *re::internal::defaultConstructV2<re::RenderGraphOutputData>(_QWORD *result)
{
  *result = 0;
  result[1] = &str_110;
  result[2] = 0;
  result[3] = &str_110;
  result[4] = 0;
  result[5] = &str_110;
  return result;
}

void re::internal::defaultDestructV2<re::RenderGraphOutputData>(uint64_t a1)
{
  re::StringID::destroyString((re::StringID *)(a1 + 32));
  re::StringID::destroyString((re::StringID *)(a1 + 16));
  re::StringID::destroyString((re::StringID *)a1);
}

void re::internal::defaultConstruct<re::RenderGraphInheritanceData>(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  *a3 = 0;
  a3[1] = &str_110;
  a3[2] = 0;
  a3[3] = &str_110;
  a3[4] = 0;
  a3[5] = &str_110;
}

void re::internal::defaultDestruct<re::RenderGraphInheritanceData>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  re::StringID::destroyString((re::StringID *)(a3 + 32));
  re::StringID::destroyString((re::StringID *)(a3 + 16));
  re::StringID::destroyString((re::StringID *)a3);
}

_QWORD *re::internal::defaultConstructV2<re::RenderGraphInheritanceData>(_QWORD *result)
{
  *result = 0;
  result[1] = &str_110;
  result[2] = 0;
  result[3] = &str_110;
  result[4] = 0;
  result[5] = &str_110;
  return result;
}

void re::internal::defaultDestructV2<re::RenderGraphInheritanceData>(uint64_t a1)
{
  re::StringID::destroyString((re::StringID *)(a1 + 32));
  re::StringID::destroyString((re::StringID *)(a1 + 16));
  re::StringID::destroyString((re::StringID *)a1);
}

uint64_t *re::allocInfo_RenderGraphFile(re *this)
{
  unsigned __int8 v1;
  uint64_t v3;

  v1 = atomic_load((unsigned __int8 *)&qword_2540FFB08);
  if ((v1 & 1) == 0 && __cxa_guard_acquire(&qword_2540FFB08))
  {
    ArcSharedObject::ArcSharedObject((ArcSharedObject *)&qword_254100718, 0);
    *(_QWORD *)(v3 + 22) = 0;
    qword_254100728 = 0;
    qword_254100738 = 0;
    qword_254100740 = 0xFFFFFFFFLL;
    qword_254100718 = (uint64_t)&off_24ED7DAA8;
    qword_254100748 = (uint64_t)"RenderGraphFile";
    dword_254100750 = 0;
    xmmword_254100758 = 0u;
    xmmword_254100768 = 0u;
    xmmword_254100778 = 0u;
    qword_254100788 = 0;
    __cxa_guard_release(&qword_2540FFB08);
  }
  return &qword_254100718;
}

void re::initInfo_RenderGraphFile(re *this, re::IntrospectionBase *a2)
{
  const re::IntrospectionBase *v3;
  unsigned __int8 v4;
  re *v5;
  uint64_t *v6;
  const re::IntrospectionBase *v7;
  void *v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t *v24;
  uint64_t v25;
  __int128 v26;
  _QWORD v27[2];
  __int128 v28;

  v27[0] = 0xA3C1F00635BFA5A8;
  v27[1] = "RenderGraphFile";
  re::StringID::destroyString((re::StringID *)v27);
  *((_OWORD *)this + 2) = v28;
  v4 = atomic_load((unsigned __int8 *)&qword_2540FFB10);
  if ((v4 & 1) == 0)
  {
    v5 = (re *)__cxa_guard_acquire(&qword_2540FFB10);
    if ((_DWORD)v5)
    {
      v6 = re::introspectionAllocator(v5);
      v8 = re::IntrospectionInfo<re::DynamicString>::get(1, v7);
      v9 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v6 + 32))(v6, 72, 8);
      *(_DWORD *)v9 = 1;
      *(_QWORD *)(v9 + 8) = "name";
      *(_QWORD *)(v9 + 16) = v8;
      *(_QWORD *)(v9 + 24) = 0;
      *(_QWORD *)(v9 + 32) = 0x800000001;
      *(_DWORD *)(v9 + 40) = 0;
      *(_QWORD *)(v9 + 48) = 0;
      *(_QWORD *)(v9 + 56) = 0;
      *(_DWORD *)(v9 + 64) = 0;
      qword_254100130 = v9;
      v10 = re::introspectionAllocator((re *)v9);
      re::IntrospectionInfo<re::DynamicArray<re::RenderGraphTargetData>>::get();
      v11 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v10 + 32))(v10, 72, 8);
      *(_DWORD *)v11 = 1;
      *(_QWORD *)(v11 + 8) = "targets";
      *(_QWORD *)(v11 + 16) = &qword_2540FFE60;
      *(_QWORD *)(v11 + 24) = 0;
      *(_QWORD *)(v11 + 32) = 0x2800000002;
      *(_DWORD *)(v11 + 40) = 0;
      *(_QWORD *)(v11 + 48) = 0;
      *(_QWORD *)(v11 + 56) = 0;
      *(_DWORD *)(v11 + 64) = 0;
      qword_254100138 = v11;
      v12 = re::introspectionAllocator((re *)v11);
      re::IntrospectionInfo<re::DynamicArray<re::RenderGraphBufferData>>::get();
      v13 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v12 + 32))(v12, 72, 8);
      *(_DWORD *)v13 = 1;
      *(_QWORD *)(v13 + 8) = "buffers";
      *(_QWORD *)(v13 + 16) = &qword_2540FFEA0;
      *(_QWORD *)(v13 + 24) = 0;
      *(_QWORD *)(v13 + 32) = 0x5000000003;
      *(_DWORD *)(v13 + 40) = 0;
      *(_QWORD *)(v13 + 48) = 0;
      *(_QWORD *)(v13 + 56) = 0;
      *(_DWORD *)(v13 + 64) = 0;
      qword_254100140 = v13;
      v14 = re::introspectionAllocator((re *)v13);
      re::IntrospectionInfo<re::DynamicArray<re::RenderGraphNodeDataPointer>>::get((re *)v14);
      v15 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v14 + 32))(v14, 72, 8);
      *(_DWORD *)v15 = 1;
      *(_QWORD *)(v15 + 8) = "nodes";
      *(_QWORD *)(v15 + 16) = &qword_2540FFEE0;
      *(_QWORD *)(v15 + 24) = 0;
      *(_QWORD *)(v15 + 32) = 0x7800000004;
      *(_DWORD *)(v15 + 40) = 0;
      *(_QWORD *)(v15 + 48) = 0;
      *(_QWORD *)(v15 + 56) = 0;
      *(_DWORD *)(v15 + 64) = 0;
      qword_254100148 = v15;
      v16 = re::introspectionAllocator((re *)v15);
      re::IntrospectionInfo<re::DynamicArray<re::RenderGraphInputData>>::get();
      v17 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v16 + 32))(v16, 72, 8);
      *(_DWORD *)v17 = 1;
      *(_QWORD *)(v17 + 8) = "inputs";
      *(_QWORD *)(v17 + 16) = &qword_2540FFF20;
      *(_QWORD *)(v17 + 24) = 0;
      *(_QWORD *)(v17 + 32) = 0xA000000005;
      *(_DWORD *)(v17 + 40) = 0;
      *(_QWORD *)(v17 + 48) = 0;
      *(_QWORD *)(v17 + 56) = 0;
      *(_DWORD *)(v17 + 64) = 0;
      qword_254100150 = v17;
      v18 = re::introspectionAllocator((re *)v17);
      re::IntrospectionInfo<re::DynamicArray<re::RenderGraphOutputData>>::get();
      v19 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v18 + 32))(v18, 72, 8);
      *(_DWORD *)v19 = 1;
      *(_QWORD *)(v19 + 8) = "outputs";
      *(_QWORD *)(v19 + 16) = &qword_2540FFF60;
      *(_QWORD *)(v19 + 24) = 0;
      *(_QWORD *)(v19 + 32) = 0xF000000006;
      *(_DWORD *)(v19 + 40) = 0;
      *(_QWORD *)(v19 + 48) = 0;
      *(_QWORD *)(v19 + 56) = 0;
      *(_DWORD *)(v19 + 64) = 0;
      qword_254100158 = v19;
      v20 = re::introspectionAllocator((re *)v19);
      re::IntrospectionInfo<re::DynamicArray<re::RenderGraphSpecifyOperationBase *>>::get((re *)v20);
      v21 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v20 + 32))(v20, 72, 8);
      *(_DWORD *)v21 = 1;
      *(_QWORD *)(v21 + 8) = "operations";
      *(_QWORD *)(v21 + 16) = &qword_2540FFFA0;
      *(_QWORD *)(v21 + 24) = 0;
      *(_QWORD *)(v21 + 32) = 0x11800000007;
      *(_DWORD *)(v21 + 40) = 0;
      *(_QWORD *)(v21 + 48) = 0;
      *(_QWORD *)(v21 + 56) = 0;
      *(_DWORD *)(v21 + 64) = 0;
      qword_254100160 = v21;
      v22 = re::introspectionAllocator((re *)v21);
      re::IntrospectionInfo<re::DynamicArray<re::RenderGraphDataNodeConnection>>::get();
      v23 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v22 + 32))(v22, 72, 8);
      *(_DWORD *)v23 = 1;
      *(_QWORD *)(v23 + 8) = "connections";
      *(_QWORD *)(v23 + 16) = &qword_254100020;
      *(_QWORD *)(v23 + 24) = 0;
      *(_QWORD *)(v23 + 32) = 0x14000000008;
      *(_DWORD *)(v23 + 40) = 0;
      *(_QWORD *)(v23 + 48) = 0;
      *(_QWORD *)(v23 + 56) = 0;
      *(_DWORD *)(v23 + 64) = 0;
      qword_254100168 = v23;
      v24 = re::introspectionAllocator((re *)v23);
      re::IntrospectionInfo<re::DynamicArray<re::RenderGraphInheritanceData>>::get();
      v25 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v24 + 32))(v24, 72, 8);
      *(_DWORD *)v25 = 1;
      *(_QWORD *)(v25 + 8) = "propertyInheritance";
      *(_QWORD *)(v25 + 16) = &qword_254100060;
      *(_QWORD *)(v25 + 24) = 0;
      *(_QWORD *)(v25 + 32) = 0xC800000009;
      *(_DWORD *)(v25 + 40) = 0;
      *(_QWORD *)(v25 + 48) = 0;
      *(_QWORD *)(v25 + 56) = 0;
      *(_DWORD *)(v25 + 64) = 0;
      qword_254100170 = v25;
      __cxa_guard_release(&qword_2540FFB10);
    }
  }
  *((_QWORD *)this + 2) = 0x36000000008;
  *((_DWORD *)this + 6) = 8;
  *((_WORD *)this + 14) = 0;
  *((_DWORD *)this + 14) = 9;
  *((_QWORD *)this + 8) = &qword_254100130;
  *((_QWORD *)this + 9) = re::internal::defaultConstruct<re::RenderGraphFile>;
  *((_QWORD *)this + 10) = re::internal::defaultDestruct<re::RenderGraphFile>;
  *((_QWORD *)this + 11) = 0;
  *((_QWORD *)this + 12) = 0;
  *((_QWORD *)this + 13) = re::internal::defaultConstructV2<re::RenderGraphFile>;
  *((_QWORD *)this + 14) = re::internal::defaultDestructV2<re::RenderGraphFile>;
  re::IntrospectionRegistry::add(this, v3);
  v26 = v28;
}

void sub_225348FB0(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_2540FFB10);
  _Unwind_Resume(a1);
}

void re::IntrospectionInfo<re::DynamicArray<re::RenderGraphTargetData>>::get()
{
  unsigned __int8 v0;
  uint64_t *v1;
  unsigned __int8 v2;
  const re::IntrospectionBase *v3;
  unsigned __int8 v4;
  int v5;
  re::IntrospectionRegistry *v6;
  const re::IntrospectionBase *v7;
  const char *v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  re *v13;
  uint64_t *v14;
  const re::IntrospectionBase *v15;
  void *v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t *v19;
  uint64_t *v20;
  re::IntrospectionBase *v21;
  uint64_t v22;
  uint64_t *v23;
  uint64_t v24;
  __int128 v25;
  __int128 v26;
  uint64_t v27[2];
  __int128 v28;
  const char *v29;
  __int128 v30;

  v0 = atomic_load((unsigned __int8 *)&qword_2540FFB88);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_2540FFB88))
  {
    re::IntrospectionDynamicArrayBase::IntrospectionDynamicArrayBase((re::IntrospectionDynamicArrayBase *)&qword_2540FFE60);
    qword_2540FFE60 = (uint64_t)&off_24ED37D00;
    __cxa_guard_release(&qword_2540FFB88);
  }
  if ((byte_2540FF99F & 1) == 0)
  {
    v1 = (uint64_t *)qword_2540FFAA0;
    if (qword_2540FFAA0)
      goto LABEL_7;
    v2 = atomic_load((unsigned __int8 *)&qword_2540FFA90);
    if ((v2 & 1) == 0 && __cxa_guard_acquire(&qword_2540FFA90))
    {
      ArcSharedObject::ArcSharedObject((ArcSharedObject *)&qword_2541004C0, 0);
      *(_QWORD *)(v12 + 22) = 0;
      qword_2541004D0 = 0;
      *(_QWORD *)&xmmword_2541004E0 = 0;
      *((_QWORD *)&xmmword_2541004E0 + 1) = 0xFFFFFFFFLL;
      qword_2541004C0 = (uint64_t)&off_24ED7DAA8;
      qword_2541004F0 = (uint64_t)"RenderGraphTargetData";
      dword_2541004F8 = 0;
      xmmword_254100500 = 0u;
      xmmword_254100510 = 0u;
      xmmword_254100520 = 0u;
      qword_254100530 = 0;
      __cxa_guard_release(&qword_2540FFA90);
    }
    qword_2540FFAA0 = (uint64_t)&qword_2541004C0;
    *(_QWORD *)&v30 = 0x2F112D0051684066;
    *((_QWORD *)&v30 + 1) = "RenderGraphTargetData";
    re::StringID::destroyString((re::StringID *)&v30);
    xmmword_2541004E0 = v28;
    v4 = atomic_load((unsigned __int8 *)&qword_2540FFA98);
    if ((v4 & 1) == 0)
    {
      v13 = (re *)__cxa_guard_acquire(&qword_2540FFA98);
      if ((_DWORD)v13)
      {
        v14 = re::introspectionAllocator(v13);
        v16 = re::IntrospectionInfo<re::StringID>::get(1, v15);
        v17 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v14 + 32))(v14, 72, 8);
        *(_DWORD *)v17 = 1;
        *(_QWORD *)(v17 + 8) = "name";
        *(_QWORD *)(v17 + 16) = v16;
        *(_QWORD *)(v17 + 24) = 0;
        *(_QWORD *)(v17 + 32) = 1;
        *(_DWORD *)(v17 + 40) = 0;
        *(_QWORD *)(v17 + 48) = 0;
        *(_QWORD *)(v17 + 56) = 0;
        *(_DWORD *)(v17 + 64) = 0;
        qword_2540FFC58 = v17;
        v18 = re::introspectionAllocator((re *)v17);
        v19 = v18;
        v20 = (uint64_t *)qword_2540FFA88;
        if (!qword_2540FFA88)
        {
          v20 = re::allocInfo_RenderGraphTargetDescriptionData((re *)v18);
          qword_2540FFA88 = (uint64_t)v20;
          re::initInfo_RenderGraphTargetDescriptionData((re *)v20, v21);
        }
        v22 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v19 + 32))(v19, 72, 8);
        *(_DWORD *)v22 = 1;
        *(_QWORD *)(v22 + 8) = "description";
        *(_QWORD *)(v22 + 16) = v20;
        *(_QWORD *)(v22 + 24) = 0;
        *(_QWORD *)(v22 + 32) = 0x1000000002;
        *(_DWORD *)(v22 + 40) = 0;
        *(_QWORD *)(v22 + 48) = 0;
        *(_QWORD *)(v22 + 56) = 0;
        *(_DWORD *)(v22 + 64) = 0;
        qword_2540FFC60 = v22;
        v23 = re::introspectionAllocator((re *)v22);
        re::IntrospectionInfo<re::DynamicArray<re::RenderGraphDataStoreConnection>>::get();
        v24 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v23 + 32))(v23, 72, 8);
        *(_DWORD *)v24 = 1;
        *(_QWORD *)(v24 + 8) = "connections";
        *(_QWORD *)(v24 + 16) = &qword_2540FFD60;
        *(_QWORD *)(v24 + 24) = 0;
        *(_QWORD *)(v24 + 32) = 0x7800000003;
        *(_DWORD *)(v24 + 40) = 0;
        *(_QWORD *)(v24 + 48) = 0;
        *(_QWORD *)(v24 + 56) = 0;
        *(_DWORD *)(v24 + 64) = 0;
        qword_2540FFC68 = v24;
        __cxa_guard_release(&qword_2540FFA98);
      }
    }
    qword_2541004D0 = 0xA000000008;
    v1 = &qword_2541004C0;
    dword_2541004D8 = 8;
    word_2541004DC = 0;
    dword_2541004F8 = 3;
    *(_QWORD *)&xmmword_254100500 = &qword_2540FFC58;
    *((_QWORD *)&xmmword_254100500 + 1) = re::internal::defaultConstruct<re::RenderGraphTargetData>;
    *(_QWORD *)&xmmword_254100510 = re::internal::defaultDestruct<re::RenderGraphTargetData>;
    *(_QWORD *)&xmmword_254100520 = 0;
    *((_QWORD *)&xmmword_254100510 + 1) = 0;
    *((_QWORD *)&xmmword_254100520 + 1) = re::internal::defaultConstructV2<re::RenderGraphTargetData>;
    qword_254100530 = (uint64_t)re::internal::defaultDestructV2<re::RenderGraphTargetData>;
    re::IntrospectionRegistry::add((re::IntrospectionRegistry *)&qword_2541004C0, v3);
    v30 = v28;
    if ((byte_2540FF99F & 1) == 0)
    {
LABEL_7:
      byte_2540FF99F = 1;
      v5 = *((_DWORD *)v1 + 6);
      ArcSharedObject::ArcSharedObject((ArcSharedObject *)&qword_2540FFE60, 0);
      qword_2540FFE70 = 0x2800000003;
      dword_2540FFE78 = v5;
      word_2540FFE7C = 0;
      *(_QWORD *)&xmmword_2540FFE80 = 0;
      *((_QWORD *)&xmmword_2540FFE80 + 1) = 0xFFFFFFFFLL;
      qword_2540FFE90 = (uint64_t)v1;
      qword_2540FFE98 = 0;
      qword_2540FFE60 = (uint64_t)&off_24ED37D00;
      re::IntrospectionRegistry::add(v6, v7);
      re::getPrettyTypeName((re *)&qword_2540FFE60, (const re::IntrospectionBase *)&v28);
      if ((BYTE8(v28) & 1) != 0)
        v8 = v29;
      else
        v8 = (char *)&v28 + 9;
      if ((_QWORD)v28 && (BYTE8(v28) & 1) != 0)
        (*(void (**)(void))(*(_QWORD *)v28 + 40))();
      v26 = *((_OWORD *)v1 + 2);
      v9 = (uint64_t *)re::HashTable<re::StringID,re::StateParameterInt *,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::tryGet((uint64_t)&unk_25582A358, v27);
      if (v9)
      {
        v10 = *v9;
        *((_QWORD *)&v25 + 1) = v10;
      }
      else
      {
        v30 = v26;
        re::TypeBuilder::beginListType((uint64_t)&v28, v27, 1, 0x28uLL, 8uLL, &v30);
        re::TypeBuilder::setConstructor((uint64_t)&v28, (uint64_t)re::TypeBuilderHelper::registerDynamicArray<re::RenderGraphTargetData>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,void *)#1}::__invoke);
        re::TypeBuilder::setDestructor((uint64_t)&v28, (uint64_t)re::TypeBuilderHelper::registerDynamicArray<re::RenderGraphTargetData>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,void *)#2}::__invoke);
        re::TypeBuilder::setListUsesContiguousStorage((uint64_t)&v28, 1);
        re::TypeBuilder::setListAccessors((uint64_t)&v28, (uint64_t)re::TypeBuilderHelper::registerDynamicArray<re::RenderGraphTargetData>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *)#1}::__invoke, (uint64_t)re::TypeBuilderHelper::registerDynamicArray<re::RenderGraphTargetData>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,unsigned long)#1}::__invoke);
        re::TypeBuilder::setListIndexer((uint64_t)&v28, (void *(*)(void *, unint64_t))re::TypeBuilderHelper::registerDynamicArray<re::RenderGraphTargetData>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,unsigned long)#1}::__invoke);
        re::TypeBuilder::setListIterator((uint64_t)&v28, (void *(*)(void *, re::Allocator *))re::TypeBuilderHelper::registerDynamicArray<re::RenderGraphTargetData>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::Allocator *)#1}::__invoke, (void *(*)(void *))re::TypeBuilderHelper::registerDynamicArray<re::RenderGraphTargetData>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *)#2}::__invoke, (void (*)(void *, re::Allocator *))re::TypeBuilderHelper::registerDynamicArray<re::RenderGraphTargetData>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::Allocator *)#2}::__invoke);
        re::TypeBuilder::~TypeBuilder((re::TypeBuilder *)&v28, v11);
      }
      xmmword_2540FFE80 = v25;
      re::StringID::destroyString((re::StringID *)v27);
    }
  }
}

void sub_225349530(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_2540FFA98);
  _Unwind_Resume(a1);
}

void re::IntrospectionInfo<re::DynamicArray<re::RenderGraphBufferData>>::get()
{
  unsigned __int8 v0;
  uint64_t *v1;
  unsigned __int8 v2;
  const re::IntrospectionBase *v3;
  unsigned __int8 v4;
  int v5;
  re::IntrospectionRegistry *v6;
  const re::IntrospectionBase *v7;
  const char *v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  re *v13;
  uint64_t *v14;
  const re::IntrospectionBase *v15;
  void *v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t *v19;
  uint64_t *v20;
  re::IntrospectionBase *v21;
  uint64_t v22;
  uint64_t *v23;
  uint64_t v24;
  __int128 v25;
  __int128 v26;
  uint64_t v27[2];
  __int128 v28;
  const char *v29;
  __int128 v30;

  v0 = atomic_load((unsigned __int8 *)&qword_2540FFB90);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_2540FFB90))
  {
    re::IntrospectionDynamicArrayBase::IntrospectionDynamicArrayBase((re::IntrospectionDynamicArrayBase *)&qword_2540FFEA0);
    qword_2540FFEA0 = (uint64_t)&off_24ED37D98;
    __cxa_guard_release(&qword_2540FFB90);
  }
  if ((byte_2540FF9A0 & 1) == 0)
  {
    v1 = (uint64_t *)qword_2540FF9E0;
    if (qword_2540FF9E0)
      goto LABEL_7;
    v2 = atomic_load((unsigned __int8 *)&qword_2540FF9D0);
    if ((v2 & 1) == 0 && __cxa_guard_acquire(&qword_2540FF9D0))
    {
      ArcSharedObject::ArcSharedObject((ArcSharedObject *)&qword_2541001F0, 0);
      *(_QWORD *)(v12 + 22) = 0;
      qword_254100200 = 0;
      *(_QWORD *)&xmmword_254100210 = 0;
      *((_QWORD *)&xmmword_254100210 + 1) = 0xFFFFFFFFLL;
      qword_2541001F0 = (uint64_t)&off_24ED7DAA8;
      qword_254100220 = (uint64_t)"RenderGraphBufferData";
      dword_254100228 = 0;
      xmmword_254100230 = 0u;
      xmmword_254100240 = 0u;
      xmmword_254100250 = 0u;
      qword_254100260 = 0;
      __cxa_guard_release(&qword_2540FF9D0);
    }
    qword_2540FF9E0 = (uint64_t)&qword_2541001F0;
    *(_QWORD *)&v30 = 0x2F0DE9BEFAA4A6C4;
    *((_QWORD *)&v30 + 1) = "RenderGraphBufferData";
    re::StringID::destroyString((re::StringID *)&v30);
    xmmword_254100210 = v28;
    v4 = atomic_load((unsigned __int8 *)&qword_2540FF9D8);
    if ((v4 & 1) == 0)
    {
      v13 = (re *)__cxa_guard_acquire(&qword_2540FF9D8);
      if ((_DWORD)v13)
      {
        v14 = re::introspectionAllocator(v13);
        v16 = re::IntrospectionInfo<re::StringID>::get(1, v15);
        v17 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v14 + 32))(v14, 72, 8);
        *(_DWORD *)v17 = 1;
        *(_QWORD *)(v17 + 8) = "name";
        *(_QWORD *)(v17 + 16) = v16;
        *(_QWORD *)(v17 + 24) = 0;
        *(_QWORD *)(v17 + 32) = 1;
        *(_DWORD *)(v17 + 40) = 0;
        *(_QWORD *)(v17 + 48) = 0;
        *(_QWORD *)(v17 + 56) = 0;
        *(_DWORD *)(v17 + 64) = 0;
        qword_2540FFC10 = v17;
        v18 = re::introspectionAllocator((re *)v17);
        v19 = v18;
        v20 = (uint64_t *)qword_2540FF9C8;
        if (!qword_2540FF9C8)
        {
          v20 = re::allocInfo_RenderGraphBufferDescriptionData((re *)v18);
          qword_2540FF9C8 = (uint64_t)v20;
          re::initInfo_RenderGraphBufferDescriptionData((re *)v20, v21);
        }
        v22 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v19 + 32))(v19, 72, 8);
        *(_DWORD *)v22 = 1;
        *(_QWORD *)(v22 + 8) = "description";
        *(_QWORD *)(v22 + 16) = v20;
        *(_QWORD *)(v22 + 24) = 0;
        *(_QWORD *)(v22 + 32) = 0x1000000002;
        *(_DWORD *)(v22 + 40) = 0;
        *(_QWORD *)(v22 + 48) = 0;
        *(_QWORD *)(v22 + 56) = 0;
        *(_DWORD *)(v22 + 64) = 0;
        qword_2540FFC18 = v22;
        v23 = re::introspectionAllocator((re *)v22);
        re::IntrospectionInfo<re::DynamicArray<re::RenderGraphDataStoreConnection>>::get();
        v24 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v23 + 32))(v23, 72, 8);
        *(_DWORD *)v24 = 1;
        *(_QWORD *)(v24 + 8) = "connections";
        *(_QWORD *)(v24 + 16) = &qword_2540FFD60;
        *(_QWORD *)(v24 + 24) = 0;
        *(_QWORD *)(v24 + 32) = 0x3000000003;
        *(_DWORD *)(v24 + 40) = 0;
        *(_QWORD *)(v24 + 48) = 0;
        *(_QWORD *)(v24 + 56) = 0;
        *(_DWORD *)(v24 + 64) = 0;
        qword_2540FFC20 = v24;
        __cxa_guard_release(&qword_2540FF9D8);
      }
    }
    qword_254100200 = 0x5800000008;
    v1 = &qword_2541001F0;
    dword_254100208 = 8;
    word_25410020C = 0;
    dword_254100228 = 3;
    *(_QWORD *)&xmmword_254100230 = &qword_2540FFC10;
    *((_QWORD *)&xmmword_254100230 + 1) = re::internal::defaultConstruct<re::RenderGraphBufferData>;
    *(_QWORD *)&xmmword_254100240 = re::internal::defaultDestruct<re::RenderGraphBufferData>;
    *(_QWORD *)&xmmword_254100250 = 0;
    *((_QWORD *)&xmmword_254100240 + 1) = 0;
    *((_QWORD *)&xmmword_254100250 + 1) = re::internal::defaultConstructV2<re::RenderGraphBufferData>;
    qword_254100260 = (uint64_t)re::internal::defaultDestructV2<re::RenderGraphBufferData>;
    re::IntrospectionRegistry::add((re::IntrospectionRegistry *)&qword_2541001F0, v3);
    v30 = v28;
    if ((byte_2540FF9A0 & 1) == 0)
    {
LABEL_7:
      byte_2540FF9A0 = 1;
      v5 = *((_DWORD *)v1 + 6);
      ArcSharedObject::ArcSharedObject((ArcSharedObject *)&qword_2540FFEA0, 0);
      qword_2540FFEB0 = 0x2800000003;
      dword_2540FFEB8 = v5;
      word_2540FFEBC = 0;
      *(_QWORD *)&xmmword_2540FFEC0 = 0;
      *((_QWORD *)&xmmword_2540FFEC0 + 1) = 0xFFFFFFFFLL;
      qword_2540FFED0 = (uint64_t)v1;
      qword_2540FFED8 = 0;
      qword_2540FFEA0 = (uint64_t)&off_24ED37D98;
      re::IntrospectionRegistry::add(v6, v7);
      re::getPrettyTypeName((re *)&qword_2540FFEA0, (const re::IntrospectionBase *)&v28);
      if ((BYTE8(v28) & 1) != 0)
        v8 = v29;
      else
        v8 = (char *)&v28 + 9;
      if ((_QWORD)v28 && (BYTE8(v28) & 1) != 0)
        (*(void (**)(void))(*(_QWORD *)v28 + 40))();
      v26 = *((_OWORD *)v1 + 2);
      v9 = (uint64_t *)re::HashTable<re::StringID,re::StateParameterInt *,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::tryGet((uint64_t)&unk_25582A358, v27);
      if (v9)
      {
        v10 = *v9;
        *((_QWORD *)&v25 + 1) = v10;
      }
      else
      {
        v30 = v26;
        re::TypeBuilder::beginListType((uint64_t)&v28, v27, 1, 0x28uLL, 8uLL, &v30);
        re::TypeBuilder::setConstructor((uint64_t)&v28, (uint64_t)re::TypeBuilderHelper::registerDynamicArray<re::RenderGraphBufferData>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,void *)#1}::__invoke);
        re::TypeBuilder::setDestructor((uint64_t)&v28, (uint64_t)re::TypeBuilderHelper::registerDynamicArray<re::RenderGraphBufferData>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,void *)#2}::__invoke);
        re::TypeBuilder::setListUsesContiguousStorage((uint64_t)&v28, 1);
        re::TypeBuilder::setListAccessors((uint64_t)&v28, (uint64_t)re::TypeBuilderHelper::registerDynamicArray<re::RenderGraphBufferData>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *)#1}::__invoke, (uint64_t)re::TypeBuilderHelper::registerDynamicArray<re::RenderGraphBufferData>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,unsigned long)#1}::__invoke);
        re::TypeBuilder::setListIndexer((uint64_t)&v28, (void *(*)(void *, unint64_t))re::TypeBuilderHelper::registerDynamicArray<re::RenderGraphBufferData>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,unsigned long)#1}::__invoke);
        re::TypeBuilder::setListIterator((uint64_t)&v28, (void *(*)(void *, re::Allocator *))re::TypeBuilderHelper::registerDynamicArray<re::RenderGraphBufferData>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::Allocator *)#1}::__invoke, (void *(*)(void *))re::TypeBuilderHelper::registerDynamicArray<re::RenderGraphBufferData>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *)#2}::__invoke, (void (*)(void *, re::Allocator *))re::TypeBuilderHelper::registerDynamicArray<re::RenderGraphBufferData>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::Allocator *)#2}::__invoke);
        re::TypeBuilder::~TypeBuilder((re::TypeBuilder *)&v28, v11);
      }
      xmmword_2540FFEC0 = v25;
      re::StringID::destroyString((re::StringID *)v27);
    }
  }
}

void sub_225349AA4(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_2540FF9D8);
  _Unwind_Resume(a1);
}

void re::IntrospectionInfo<re::DynamicArray<re::RenderGraphNodeDataPointer>>::get(re *a1)
{
  unsigned __int8 v1;
  uint64_t *v2;
  re::IntrospectionBase *v3;
  int v4;
  re::IntrospectionRegistry *v5;
  const re::IntrospectionBase *v6;
  const char *v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  __int128 v11;
  __int128 v12;
  uint64_t v13[2];
  __int128 v14;
  uint64_t v15;
  char v16;
  _BYTE v17[479];

  v1 = atomic_load((unsigned __int8 *)&qword_2540FFB98);
  if ((v1 & 1) == 0)
  {
    a1 = (re *)__cxa_guard_acquire(&qword_2540FFB98);
    if ((_DWORD)a1)
    {
      re::IntrospectionDynamicArrayBase::IntrospectionDynamicArrayBase((re::IntrospectionDynamicArrayBase *)&qword_2540FFEE0);
      qword_2540FFEE0 = (uint64_t)&off_24ED37E30;
      __cxa_guard_release(&qword_2540FFB98);
    }
  }
  if ((byte_2540FF9A1 & 1) == 0)
  {
    v2 = (uint64_t *)qword_2540FFAB8;
    if (qword_2540FFAB8
      || (v2 = re::allocInfo_RenderGraphNodeDataPointer(a1),
          qword_2540FFAB8 = (uint64_t)v2,
          re::initInfo_RenderGraphNodeDataPointer((re *)v2, v3),
          (byte_2540FF9A1 & 1) == 0))
    {
      byte_2540FF9A1 = 1;
      v4 = *((_DWORD *)v2 + 6);
      ArcSharedObject::ArcSharedObject((ArcSharedObject *)&qword_2540FFEE0, 0);
      qword_2540FFEF0 = 0x2800000003;
      dword_2540FFEF8 = v4;
      word_2540FFEFC = 0;
      *(_QWORD *)&xmmword_2540FFF00 = 0;
      *((_QWORD *)&xmmword_2540FFF00 + 1) = 0xFFFFFFFFLL;
      qword_2540FFF10 = (uint64_t)v2;
      qword_2540FFF18 = 0;
      qword_2540FFEE0 = (uint64_t)&off_24ED37E30;
      re::IntrospectionRegistry::add(v5, v6);
      re::getPrettyTypeName((re *)&qword_2540FFEE0, (const re::IntrospectionBase *)&v15);
      if ((v16 & 1) != 0)
        v7 = *(const char **)&v17[7];
      else
        v7 = v17;
      if (v15 && (v16 & 1) != 0)
        (*(void (**)(void))(*(_QWORD *)v15 + 40))();
      v12 = *((_OWORD *)v2 + 2);
      v8 = (uint64_t *)re::HashTable<re::StringID,re::StateParameterInt *,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::tryGet((uint64_t)&unk_25582A358, v13);
      if (v8)
      {
        v9 = *v8;
        *((_QWORD *)&v11 + 1) = v9;
      }
      else
      {
        v14 = v12;
        re::TypeBuilder::beginListType((uint64_t)&v15, v13, 1, 0x28uLL, 8uLL, &v14);
        re::TypeBuilder::setConstructor((uint64_t)&v15, (uint64_t)re::TypeBuilderHelper::registerDynamicArray<re::RenderGraphNodeDataPointer>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,void *)#1}::__invoke);
        re::TypeBuilder::setDestructor((uint64_t)&v15, (uint64_t)re::TypeBuilderHelper::registerDynamicArray<re::RenderGraphNodeDataPointer>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,void *)#2}::__invoke);
        re::TypeBuilder::setListUsesContiguousStorage((uint64_t)&v15, 1);
        re::TypeBuilder::setListAccessors((uint64_t)&v15, (uint64_t)re::TypeBuilderHelper::registerDynamicArray<re::RenderGraphNodeDataPointer>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *)#1}::__invoke, (uint64_t)re::TypeBuilderHelper::registerDynamicArray<re::RenderGraphNodeDataPointer>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,unsigned long)#1}::__invoke);
        re::TypeBuilder::setListIndexer((uint64_t)&v15, (void *(*)(void *, unint64_t))re::TypeBuilderHelper::registerDynamicArray<re::RenderGraphNodeDataPointer>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,unsigned long)#1}::__invoke);
        re::TypeBuilder::setListIterator((uint64_t)&v15, (void *(*)(void *, re::Allocator *))re::TypeBuilderHelper::registerDynamicArray<re::RenderGraphNodeDataPointer>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::Allocator *)#1}::__invoke, (void *(*)(void *))re::TypeBuilderHelper::registerDynamicArray<re::RenderGraphNodeDataPointer>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *)#2}::__invoke, (void (*)(void *, re::Allocator *))re::TypeBuilderHelper::registerDynamicArray<re::RenderGraphNodeDataPointer>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::Allocator *)#2}::__invoke);
        re::TypeBuilder::~TypeBuilder((re::TypeBuilder *)&v15, v10);
      }
      xmmword_2540FFF00 = v11;
      re::StringID::destroyString((re::StringID *)v13);
    }
  }
}

void sub_225349D4C(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_2540FFB98);
  _Unwind_Resume(a1);
}

void re::IntrospectionInfo<re::DynamicArray<re::RenderGraphInputData>>::get()
{
  unsigned __int8 v0;
  uint64_t *v1;
  unsigned __int8 v2;
  const re::IntrospectionBase *v3;
  unsigned __int8 v4;
  int v5;
  re::IntrospectionRegistry *v6;
  const re::IntrospectionBase *v7;
  const char *v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  re *v13;
  uint64_t *v14;
  const re::IntrospectionBase *v15;
  void *v16;
  uint64_t v17;
  uint64_t *v18;
  const re::IntrospectionBase *v19;
  void *v20;
  uint64_t v21;
  uint64_t *v22;
  const re::IntrospectionBase *v23;
  void *v24;
  uint64_t v25;
  uint64_t *v26;
  const re::IntrospectionBase *v27;
  void *v28;
  uint64_t v29;
  uint64_t *v30;
  const re::IntrospectionBase *v31;
  void *v32;
  uint64_t v33;
  uint64_t *v34;
  const re::IntrospectionBase *v35;
  void *v36;
  uint64_t v37;
  __int128 v38;
  __int128 v39;
  uint64_t v40[2];
  __int128 v41;
  const char *v42;
  __int128 v43;

  v0 = atomic_load((unsigned __int8 *)&qword_2540FFBA0);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_2540FFBA0))
  {
    re::IntrospectionDynamicArrayBase::IntrospectionDynamicArrayBase((re::IntrospectionDynamicArrayBase *)&qword_2540FFF20);
    qword_2540FFF20 = (uint64_t)&off_24ED37EC8;
    __cxa_guard_release(&qword_2540FFBA0);
  }
  if ((byte_2540FF9A2 & 1) == 0)
  {
    v1 = (uint64_t *)qword_2540FFAD0;
    if (qword_2540FFAD0)
      goto LABEL_7;
    v2 = atomic_load((unsigned __int8 *)&qword_2540FFAC0);
    if ((v2 & 1) == 0 && __cxa_guard_acquire(&qword_2540FFAC0))
    {
      ArcSharedObject::ArcSharedObject((ArcSharedObject *)&qword_2541005B0, 0);
      *(_QWORD *)(v12 + 22) = 0;
      qword_2541005C0 = 0;
      *(_QWORD *)&xmmword_2541005D0 = 0;
      *((_QWORD *)&xmmword_2541005D0 + 1) = 0xFFFFFFFFLL;
      qword_2541005B0 = (uint64_t)&off_24ED7DAA8;
      qword_2541005E0 = (uint64_t)"RenderGraphInputData";
      dword_2541005E8 = 0;
      xmmword_2541005F0 = 0u;
      xmmword_254100600 = 0u;
      xmmword_254100610 = 0u;
      qword_254100620 = 0;
      __cxa_guard_release(&qword_2540FFAC0);
    }
    qword_2540FFAD0 = (uint64_t)&qword_2541005B0;
    *(_QWORD *)&v43 = 0x228CE084AB270078;
    *((_QWORD *)&v43 + 1) = "RenderGraphInputData";
    re::StringID::destroyString((re::StringID *)&v43);
    xmmword_2541005D0 = v41;
    v4 = atomic_load((unsigned __int8 *)&qword_2540FFAC8);
    if ((v4 & 1) == 0)
    {
      v13 = (re *)__cxa_guard_acquire(&qword_2540FFAC8);
      if ((_DWORD)v13)
      {
        v14 = re::introspectionAllocator(v13);
        v16 = re::IntrospectionInfo<re::StringID>::get(1, v15);
        v17 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v14 + 32))(v14, 72, 8);
        *(_DWORD *)v17 = 1;
        *(_QWORD *)(v17 + 8) = "lane";
        *(_QWORD *)(v17 + 16) = v16;
        *(_QWORD *)(v17 + 24) = 0;
        *(_QWORD *)(v17 + 32) = 1;
        *(_DWORD *)(v17 + 40) = 0;
        *(_QWORD *)(v17 + 48) = 0;
        *(_QWORD *)(v17 + 56) = 0;
        *(_DWORD *)(v17 + 64) = 0;
        qword_2540FFD30 = v17;
        v18 = re::introspectionAllocator((re *)v17);
        v20 = re::IntrospectionInfo<re::StringID>::get(1, v19);
        v21 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v18 + 32))(v18, 72, 8);
        *(_DWORD *)v21 = 1;
        *(_QWORD *)(v21 + 8) = "resource";
        *(_QWORD *)(v21 + 16) = v20;
        *(_QWORD *)(v21 + 24) = 0;
        *(_QWORD *)(v21 + 32) = 0x1000000002;
        *(_DWORD *)(v21 + 40) = 0;
        *(_QWORD *)(v21 + 48) = 0;
        *(_QWORD *)(v21 + 56) = 0;
        *(_DWORD *)(v21 + 64) = 0;
        qword_2540FFD38 = v21;
        v22 = re::introspectionAllocator((re *)v21);
        v24 = re::IntrospectionInfo<re::StringID>::get(1, v23);
        v25 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v22 + 32))(v22, 72, 8);
        *(_DWORD *)v25 = 1;
        *(_QWORD *)(v25 + 8) = "Target";
        *(_QWORD *)(v25 + 16) = v24;
        *(_QWORD *)(v25 + 24) = 0;
        *(_QWORD *)(v25 + 32) = 0x1000000003;
        *(_DWORD *)(v25 + 40) = 0;
        *(_QWORD *)(v25 + 48) = 0;
        *(_QWORD *)(v25 + 56) = 0;
        *(_DWORD *)(v25 + 64) = 0;
        qword_2540FFD40 = v25;
        v26 = re::introspectionAllocator((re *)v25);
        v28 = re::IntrospectionInfo<re::StringID>::get(1, v27);
        v29 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v26 + 32))(v26, 72, 8);
        *(_DWORD *)v29 = 1;
        *(_QWORD *)(v29 + 8) = "Buffer";
        *(_QWORD *)(v29 + 16) = v28;
        *(_QWORD *)(v29 + 24) = 0;
        *(_QWORD *)(v29 + 32) = 0x1000000004;
        *(_DWORD *)(v29 + 40) = 0;
        *(_QWORD *)(v29 + 48) = 0;
        *(_QWORD *)(v29 + 56) = 0;
        *(_DWORD *)(v29 + 64) = 0;
        qword_2540FFD48 = v29;
        v30 = re::introspectionAllocator((re *)v29);
        v32 = re::introspect_BOOL((re *)1, v31);
        v33 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v30 + 32))(v30, 72, 8);
        *(_DWORD *)v33 = 1;
        *(_QWORD *)(v33 + 8) = "inputOnly";
        *(_QWORD *)(v33 + 16) = v32;
        *(_QWORD *)(v33 + 24) = 0;
        *(_QWORD *)(v33 + 32) = 0x2000000005;
        *(_DWORD *)(v33 + 40) = 0;
        *(_QWORD *)(v33 + 48) = 0;
        *(_QWORD *)(v33 + 56) = 0;
        *(_DWORD *)(v33 + 64) = 0;
        qword_2540FFD50 = v33;
        v34 = re::introspectionAllocator((re *)v33);
        v36 = re::IntrospectionInfo<re::StringID>::get(1, v35);
        v37 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v34 + 32))(v34, 72, 8);
        *(_DWORD *)v37 = 1;
        *(_QWORD *)(v37 + 8) = "graphScopeOverride";
        *(_QWORD *)(v37 + 16) = v36;
        *(_QWORD *)(v37 + 24) = 0;
        *(_QWORD *)(v37 + 32) = 0x2800000006;
        *(_DWORD *)(v37 + 40) = 0;
        *(_QWORD *)(v37 + 48) = 0;
        *(_QWORD *)(v37 + 56) = 0;
        *(_DWORD *)(v37 + 64) = 0;
        qword_2540FFD58 = v37;
        __cxa_guard_release(&qword_2540FFAC8);
      }
    }
    qword_2541005C0 = 0x3800000008;
    v1 = &qword_2541005B0;
    dword_2541005C8 = 8;
    word_2541005CC = 0;
    dword_2541005E8 = 6;
    *(_QWORD *)&xmmword_2541005F0 = &qword_2540FFD30;
    *((_QWORD *)&xmmword_2541005F0 + 1) = re::internal::defaultConstruct<re::RenderGraphInputData>;
    *(_QWORD *)&xmmword_254100600 = re::internal::defaultDestruct<re::RenderGraphInputData>;
    *(_QWORD *)&xmmword_254100610 = 0;
    *((_QWORD *)&xmmword_254100600 + 1) = 0;
    *((_QWORD *)&xmmword_254100610 + 1) = re::internal::defaultConstructV2<re::RenderGraphInputData>;
    qword_254100620 = (uint64_t)re::internal::defaultDestructV2<re::RenderGraphInputData>;
    re::IntrospectionRegistry::add((re::IntrospectionRegistry *)&qword_2541005B0, v3);
    v43 = v41;
    if ((byte_2540FF9A2 & 1) == 0)
    {
LABEL_7:
      byte_2540FF9A2 = 1;
      v5 = *((_DWORD *)v1 + 6);
      ArcSharedObject::ArcSharedObject((ArcSharedObject *)&qword_2540FFF20, 0);
      qword_2540FFF30 = 0x2800000003;
      dword_2540FFF38 = v5;
      word_2540FFF3C = 0;
      *(_QWORD *)&xmmword_2540FFF40 = 0;
      *((_QWORD *)&xmmword_2540FFF40 + 1) = 0xFFFFFFFFLL;
      qword_2540FFF50 = (uint64_t)v1;
      qword_2540FFF58 = 0;
      qword_2540FFF20 = (uint64_t)&off_24ED37EC8;
      re::IntrospectionRegistry::add(v6, v7);
      re::getPrettyTypeName((re *)&qword_2540FFF20, (const re::IntrospectionBase *)&v41);
      if ((BYTE8(v41) & 1) != 0)
        v8 = v42;
      else
        v8 = (char *)&v41 + 9;
      if ((_QWORD)v41 && (BYTE8(v41) & 1) != 0)
        (*(void (**)(void))(*(_QWORD *)v41 + 40))();
      v39 = *((_OWORD *)v1 + 2);
      v9 = (uint64_t *)re::HashTable<re::StringID,re::StateParameterInt *,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::tryGet((uint64_t)&unk_25582A358, v40);
      if (v9)
      {
        v10 = *v9;
        *((_QWORD *)&v38 + 1) = v10;
      }
      else
      {
        v43 = v39;
        re::TypeBuilder::beginListType((uint64_t)&v41, v40, 1, 0x28uLL, 8uLL, &v43);
        re::TypeBuilder::setConstructor((uint64_t)&v41, (uint64_t)re::TypeBuilderHelper::registerDynamicArray<re::RenderGraphInputData>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,void *)#1}::__invoke);
        re::TypeBuilder::setDestructor((uint64_t)&v41, (uint64_t)re::TypeBuilderHelper::registerDynamicArray<re::RenderGraphInputData>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,void *)#2}::__invoke);
        re::TypeBuilder::setListUsesContiguousStorage((uint64_t)&v41, 1);
        re::TypeBuilder::setListAccessors((uint64_t)&v41, (uint64_t)re::TypeBuilderHelper::registerDynamicArray<re::RenderGraphInputData>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *)#1}::__invoke, (uint64_t)re::TypeBuilderHelper::registerDynamicArray<re::RenderGraphInputData>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,unsigned long)#1}::__invoke);
        re::TypeBuilder::setListIndexer((uint64_t)&v41, (void *(*)(void *, unint64_t))re::TypeBuilderHelper::registerDynamicArray<re::RenderGraphInputData>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,unsigned long)#1}::__invoke);
        re::TypeBuilder::setListIterator((uint64_t)&v41, (void *(*)(void *, re::Allocator *))re::TypeBuilderHelper::registerDynamicArray<re::RenderGraphInputData>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::Allocator *)#1}::__invoke, (void *(*)(void *))re::TypeBuilderHelper::registerDynamicArray<re::RenderGraphInputData>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *)#2}::__invoke, (void (*)(void *, re::Allocator *))re::TypeBuilderHelper::registerDynamicArray<re::RenderGraphInputData>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::Allocator *)#2}::__invoke);
        re::TypeBuilder::~TypeBuilder((re::TypeBuilder *)&v41, v11);
      }
      xmmword_2540FFF40 = v38;
      re::StringID::destroyString((re::StringID *)v40);
    }
  }
}

void sub_22534A3C4(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_2540FFAC8);
  _Unwind_Resume(a1);
}

void re::IntrospectionInfo<re::DynamicArray<re::RenderGraphOutputData>>::get()
{
  unsigned __int8 v0;
  uint64_t *v1;
  unsigned __int8 v2;
  const re::IntrospectionBase *v3;
  unsigned __int8 v4;
  int v5;
  re::IntrospectionRegistry *v6;
  const re::IntrospectionBase *v7;
  const char *v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  re *v13;
  uint64_t *v14;
  const re::IntrospectionBase *v15;
  void *v16;
  uint64_t v17;
  uint64_t *v18;
  const re::IntrospectionBase *v19;
  void *v20;
  uint64_t v21;
  uint64_t *v22;
  const re::IntrospectionBase *v23;
  void *v24;
  uint64_t v25;
  uint64_t *v26;
  const re::IntrospectionBase *v27;
  void *v28;
  uint64_t v29;
  uint64_t *v30;
  const re::IntrospectionBase *v31;
  void *v32;
  uint64_t v33;
  __int128 v34;
  __int128 v35;
  uint64_t v36[2];
  __int128 v37;
  const char *v38;
  __int128 v39;

  v0 = atomic_load((unsigned __int8 *)&qword_2540FFBA8);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_2540FFBA8))
  {
    re::IntrospectionDynamicArrayBase::IntrospectionDynamicArrayBase((re::IntrospectionDynamicArrayBase *)&qword_2540FFF60);
    qword_2540FFF60 = (uint64_t)&off_24ED37F60;
    __cxa_guard_release(&qword_2540FFBA8);
  }
  if ((byte_2540FF9A3 & 1) == 0)
  {
    v1 = (uint64_t *)qword_2540FFAE8;
    if (qword_2540FFAE8)
      goto LABEL_7;
    v2 = atomic_load((unsigned __int8 *)&qword_2540FFAD8);
    if ((v2 & 1) == 0 && __cxa_guard_acquire(&qword_2540FFAD8))
    {
      ArcSharedObject::ArcSharedObject((ArcSharedObject *)&qword_254100628, 0);
      *(_QWORD *)(v12 + 22) = 0;
      qword_254100638 = 0;
      *(_QWORD *)&xmmword_254100648 = 0;
      *((_QWORD *)&xmmword_254100648 + 1) = 0xFFFFFFFFLL;
      qword_254100628 = (uint64_t)&off_24ED7DAA8;
      qword_254100658 = (uint64_t)"RenderGraphOutputData";
      dword_254100660 = 0;
      xmmword_254100668 = 0u;
      xmmword_254100678 = 0u;
      xmmword_254100688 = 0u;
      qword_254100698 = 0;
      __cxa_guard_release(&qword_2540FFAD8);
    }
    qword_2540FFAE8 = (uint64_t)&qword_254100628;
    *(_QWORD *)&v39 = 0x2F105BAD7F8B1F46;
    *((_QWORD *)&v39 + 1) = "RenderGraphOutputData";
    re::StringID::destroyString((re::StringID *)&v39);
    xmmword_254100648 = v37;
    v4 = atomic_load((unsigned __int8 *)&qword_2540FFAE0);
    if ((v4 & 1) == 0)
    {
      v13 = (re *)__cxa_guard_acquire(&qword_2540FFAE0);
      if ((_DWORD)v13)
      {
        v14 = re::introspectionAllocator(v13);
        v16 = re::IntrospectionInfo<re::StringID>::get(1, v15);
        v17 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v14 + 32))(v14, 72, 8);
        *(_DWORD *)v17 = 1;
        *(_QWORD *)(v17 + 8) = "lane";
        *(_QWORD *)(v17 + 16) = v16;
        *(_QWORD *)(v17 + 24) = 0;
        *(_QWORD *)(v17 + 32) = 1;
        *(_DWORD *)(v17 + 40) = 0;
        *(_QWORD *)(v17 + 48) = 0;
        *(_QWORD *)(v17 + 56) = 0;
        *(_DWORD *)(v17 + 64) = 0;
        qword_2540FFD08 = v17;
        v18 = re::introspectionAllocator((re *)v17);
        v20 = re::IntrospectionInfo<re::StringID>::get(1, v19);
        v21 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v18 + 32))(v18, 72, 8);
        *(_DWORD *)v21 = 1;
        *(_QWORD *)(v21 + 8) = "graphScopeOverride";
        *(_QWORD *)(v21 + 16) = v20;
        *(_QWORD *)(v21 + 24) = 0;
        *(_QWORD *)(v21 + 32) = 0x2000000003;
        *(_DWORD *)(v21 + 40) = 0;
        *(_QWORD *)(v21 + 48) = 0;
        *(_QWORD *)(v21 + 56) = 0;
        *(_DWORD *)(v21 + 64) = 0;
        qword_2540FFD10 = v21;
        v22 = re::introspectionAllocator((re *)v21);
        v24 = re::IntrospectionInfo<re::StringID>::get(1, v23);
        v25 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v22 + 32))(v22, 72, 8);
        *(_DWORD *)v25 = 1;
        *(_QWORD *)(v25 + 8) = "resource";
        *(_QWORD *)(v25 + 16) = v24;
        *(_QWORD *)(v25 + 24) = 0;
        *(_QWORD *)(v25 + 32) = 0x1000000004;
        *(_DWORD *)(v25 + 40) = 0;
        *(_QWORD *)(v25 + 48) = 0;
        *(_QWORD *)(v25 + 56) = 0;
        *(_DWORD *)(v25 + 64) = 0;
        qword_2540FFD18 = v25;
        v26 = re::introspectionAllocator((re *)v25);
        v28 = re::IntrospectionInfo<re::StringID>::get(1, v27);
        v29 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v26 + 32))(v26, 72, 8);
        *(_DWORD *)v29 = 1;
        *(_QWORD *)(v29 + 8) = "Target";
        *(_QWORD *)(v29 + 16) = v28;
        *(_QWORD *)(v29 + 24) = 0;
        *(_QWORD *)(v29 + 32) = 0x1000000005;
        *(_DWORD *)(v29 + 40) = 0;
        *(_QWORD *)(v29 + 48) = 0;
        *(_QWORD *)(v29 + 56) = 0;
        *(_DWORD *)(v29 + 64) = 0;
        qword_2540FFD20 = v29;
        v30 = re::introspectionAllocator((re *)v29);
        v32 = re::IntrospectionInfo<re::StringID>::get(1, v31);
        v33 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v30 + 32))(v30, 72, 8);
        *(_DWORD *)v33 = 1;
        *(_QWORD *)(v33 + 8) = "Buffer";
        *(_QWORD *)(v33 + 16) = v32;
        *(_QWORD *)(v33 + 24) = 0;
        *(_QWORD *)(v33 + 32) = 0x1000000006;
        *(_DWORD *)(v33 + 40) = 0;
        *(_QWORD *)(v33 + 48) = 0;
        *(_QWORD *)(v33 + 56) = 0;
        *(_DWORD *)(v33 + 64) = 0;
        qword_2540FFD28 = v33;
        __cxa_guard_release(&qword_2540FFAE0);
      }
    }
    qword_254100638 = 0x3000000008;
    v1 = &qword_254100628;
    dword_254100640 = 8;
    word_254100644 = 0;
    dword_254100660 = 5;
    *(_QWORD *)&xmmword_254100668 = &qword_2540FFD08;
    *((_QWORD *)&xmmword_254100668 + 1) = re::internal::defaultConstruct<re::RenderGraphOutputData>;
    *(_QWORD *)&xmmword_254100678 = re::internal::defaultDestruct<re::RenderGraphOutputData>;
    *(_QWORD *)&xmmword_254100688 = 0;
    *((_QWORD *)&xmmword_254100678 + 1) = 0;
    *((_QWORD *)&xmmword_254100688 + 1) = re::internal::defaultConstructV2<re::RenderGraphOutputData>;
    qword_254100698 = (uint64_t)re::internal::defaultDestructV2<re::RenderGraphOutputData>;
    re::IntrospectionRegistry::add((re::IntrospectionRegistry *)&qword_254100628, v3);
    v39 = v37;
    if ((byte_2540FF9A3 & 1) == 0)
    {
LABEL_7:
      byte_2540FF9A3 = 1;
      v5 = *((_DWORD *)v1 + 6);
      ArcSharedObject::ArcSharedObject((ArcSharedObject *)&qword_2540FFF60, 0);
      qword_2540FFF70 = 0x2800000003;
      dword_2540FFF78 = v5;
      word_2540FFF7C = 0;
      *(_QWORD *)&xmmword_2540FFF80 = 0;
      *((_QWORD *)&xmmword_2540FFF80 + 1) = 0xFFFFFFFFLL;
      qword_2540FFF90 = (uint64_t)v1;
      qword_2540FFF98 = 0;
      qword_2540FFF60 = (uint64_t)&off_24ED37F60;
      re::IntrospectionRegistry::add(v6, v7);
      re::getPrettyTypeName((re *)&qword_2540FFF60, (const re::IntrospectionBase *)&v37);
      if ((BYTE8(v37) & 1) != 0)
        v8 = v38;
      else
        v8 = (char *)&v37 + 9;
      if ((_QWORD)v37 && (BYTE8(v37) & 1) != 0)
        (*(void (**)(void))(*(_QWORD *)v37 + 40))();
      v35 = *((_OWORD *)v1 + 2);
      v9 = (uint64_t *)re::HashTable<re::StringID,re::StateParameterInt *,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::tryGet((uint64_t)&unk_25582A358, v36);
      if (v9)
      {
        v10 = *v9;
        *((_QWORD *)&v34 + 1) = v10;
      }
      else
      {
        v39 = v35;
        re::TypeBuilder::beginListType((uint64_t)&v37, v36, 1, 0x28uLL, 8uLL, &v39);
        re::TypeBuilder::setConstructor((uint64_t)&v37, (uint64_t)re::TypeBuilderHelper::registerDynamicArray<re::RenderGraphOutputData>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,void *)#1}::__invoke);
        re::TypeBuilder::setDestructor((uint64_t)&v37, (uint64_t)re::TypeBuilderHelper::registerDynamicArray<re::RenderGraphOutputData>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,void *)#2}::__invoke);
        re::TypeBuilder::setListUsesContiguousStorage((uint64_t)&v37, 1);
        re::TypeBuilder::setListAccessors((uint64_t)&v37, (uint64_t)re::TypeBuilderHelper::registerDynamicArray<re::RenderGraphOutputData>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *)#1}::__invoke, (uint64_t)re::TypeBuilderHelper::registerDynamicArray<re::RenderGraphOutputData>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,unsigned long)#1}::__invoke);
        re::TypeBuilder::setListIndexer((uint64_t)&v37, (void *(*)(void *, unint64_t))re::TypeBuilderHelper::registerDynamicArray<re::RenderGraphOutputData>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,unsigned long)#1}::__invoke);
        re::TypeBuilder::setListIterator((uint64_t)&v37, (void *(*)(void *, re::Allocator *))re::TypeBuilderHelper::registerDynamicArray<re::RenderGraphOutputData>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::Allocator *)#1}::__invoke, (void *(*)(void *))re::TypeBuilderHelper::registerDynamicArray<re::RenderGraphOutputData>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *)#2}::__invoke, (void (*)(void *, re::Allocator *))re::TypeBuilderHelper::registerDynamicArray<re::RenderGraphOutputData>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::Allocator *)#2}::__invoke);
        re::TypeBuilder::~TypeBuilder((re::TypeBuilder *)&v37, v11);
      }
      xmmword_2540FFF80 = v34;
      re::StringID::destroyString((re::StringID *)v36);
    }
  }
}

void sub_22534AA04(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_2540FFAE0);
  _Unwind_Resume(a1);
}

void re::IntrospectionInfo<re::DynamicArray<re::RenderGraphSpecifyOperationBase *>>::get(re *a1)
{
  unsigned __int8 v1;
  unsigned __int8 v2;
  uint64_t *v3;
  re::IntrospectionBase *v4;
  re::IntrospectionRegistry *v5;
  const re::IntrospectionBase *v6;
  const char *v7;
  __int128 v8;
  int v9;
  re::IntrospectionRegistry *v10;
  const re::IntrospectionBase *v11;
  const char *v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  char *__s1[2];
  __int128 v20;
  const char *v21;

  v1 = atomic_load((unsigned __int8 *)&qword_2540FFBB0);
  if ((v1 & 1) == 0)
  {
    a1 = (re *)__cxa_guard_acquire(&qword_2540FFBB0);
    if ((_DWORD)a1)
    {
      re::IntrospectionDynamicArrayBase::IntrospectionDynamicArrayBase((re::IntrospectionDynamicArrayBase *)&qword_2540FFFA0);
      qword_2540FFFA0 = (uint64_t)&off_24ED37FF8;
      __cxa_guard_release(&qword_2540FFBB0);
    }
  }
  if ((byte_2540FF9A4 & 1) == 0)
  {
    v2 = atomic_load((unsigned __int8 *)&qword_2540FFBB8);
    if ((v2 & 1) == 0)
    {
      a1 = (re *)__cxa_guard_acquire(&qword_2540FFBB8);
      if ((_DWORD)a1)
      {
        re::IntrospectionPointer::IntrospectionPointer((re::IntrospectionPointer *)&qword_2540FFFE0);
        __cxa_guard_release(&qword_2540FFBB8);
      }
    }
    if ((byte_2540FF9A5 & 1) == 0)
    {
      byte_2540FF9A5 = 1;
      v3 = (uint64_t *)qword_2540FFA60;
      if (!qword_2540FFA60)
      {
        v3 = re::allocInfo_RenderGraphSpecifyOperationBase(a1);
        qword_2540FFA60 = (uint64_t)v3;
        re::initInfo_RenderGraphSpecifyOperationBase((re *)v3, v4);
      }
      ArcSharedObject::ArcSharedObject((ArcSharedObject *)&qword_2540FFFE0, 0);
      qword_2540FFFF0 = 0x800000001;
      dword_2540FFFF8 = 8;
      word_2540FFFFC = 0;
      *(_QWORD *)&xmmword_254100000 = 0;
      *((_QWORD *)&xmmword_254100000 + 1) = 0xFFFFFFFFLL;
      qword_2540FFFE0 = (uint64_t)&off_24ED30800;
      qword_254100010 = (uint64_t)v3;
      unk_254100018 = 0;
      re::IntrospectionRegistry::add(v5, v6);
      re::getPrettyTypeName((re *)&qword_2540FFFE0, (const re::IntrospectionBase *)&v20);
      if ((BYTE8(v20) & 1) != 0)
        v7 = v21;
      else
        v7 = (char *)&v20 + 9;
      if ((_QWORD)v20 && (BYTE8(v20) & 1) != 0)
        (*(void (**)(void))(*(_QWORD *)v20 + 40))();
      if ((unint64_t)__s1[0] >> 1 == 94623636 && (__s1[1] == "char*" || !strcmp(__s1[1], "char*")))
      {
        v8 = v20;
      }
      else
      {
        v20 = *((_OWORD *)v3 + 2);
        v8 = v18;
      }
      xmmword_254100000 = v8;
      re::StringID::destroyString((re::StringID *)__s1);
    }
    if ((byte_2540FF9A4 & 1) == 0)
    {
      byte_2540FF9A4 = 1;
      v9 = dword_2540FFFF8;
      ArcSharedObject::ArcSharedObject((ArcSharedObject *)&qword_2540FFFA0, 0);
      qword_2540FFFB0 = 0x2800000003;
      dword_2540FFFB8 = v9;
      word_2540FFFBC = 0;
      *(_QWORD *)&xmmword_2540FFFC0 = 0;
      *((_QWORD *)&xmmword_2540FFFC0 + 1) = 0xFFFFFFFFLL;
      qword_2540FFFD0 = (uint64_t)&qword_2540FFFE0;
      qword_2540FFFD8 = 0;
      qword_2540FFFA0 = (uint64_t)&off_24ED37FF8;
      re::IntrospectionRegistry::add(v10, v11);
      re::getPrettyTypeName((re *)&qword_2540FFFA0, (const re::IntrospectionBase *)&v20);
      if ((BYTE8(v20) & 1) != 0)
        v12 = v21;
      else
        v12 = (char *)&v20 + 9;
      if ((_QWORD)v20 && (BYTE8(v20) & 1) != 0)
        (*(void (**)(void))(*(_QWORD *)v20 + 40))();
      v17 = xmmword_254100000;
      v13 = (uint64_t *)re::HashTable<re::StringID,re::StateParameterInt *,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::tryGet((uint64_t)&unk_25582A358, &v18);
      if (v13)
      {
        v14 = *v13;
        *((_QWORD *)&v16 + 1) = v14;
      }
      else
      {
        *(_OWORD *)__s1 = v17;
        re::TypeBuilder::beginListType((uint64_t)&v20, (uint64_t *)&v18, 1, 0x28uLL, 8uLL, (__int128 *)__s1);
        re::TypeBuilder::setConstructor((uint64_t)&v20, (uint64_t)re::TypeBuilderHelper::registerDynamicArray<re::RenderGraphSpecifyOperationBase *>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,void *)#1}::__invoke);
        re::TypeBuilder::setDestructor((uint64_t)&v20, (uint64_t)re::TypeBuilderHelper::registerDynamicArray<re::RenderGraphSpecifyOperationBase *>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,void *)#2}::__invoke);
        re::TypeBuilder::setListUsesContiguousStorage((uint64_t)&v20, 1);
        re::TypeBuilder::setListAccessors((uint64_t)&v20, (uint64_t)re::TypeBuilderHelper::registerDynamicArray<re::RenderGraphSpecifyOperationBase *>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *)#1}::__invoke, (uint64_t)re::TypeBuilderHelper::registerDynamicArray<re::RenderGraphSpecifyOperationBase *>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,unsigned long)#1}::__invoke);
        re::TypeBuilder::setListIndexer((uint64_t)&v20, (void *(*)(void *, unint64_t))re::TypeBuilderHelper::registerDynamicArray<re::RenderGraphSpecifyOperationBase *>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,unsigned long)#1}::__invoke);
        re::TypeBuilder::setListIterator((uint64_t)&v20, (void *(*)(void *, re::Allocator *))re::TypeBuilderHelper::registerDynamicArray<re::RenderGraphSpecifyOperationBase *>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::Allocator *)#1}::__invoke, (void *(*)(void *))re::TypeBuilderHelper::registerDynamicArray<re::RenderGraphSpecifyOperationBase *>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *)#2}::__invoke, (void (*)(void *, re::Allocator *))re::TypeBuilderHelper::registerDynamicArray<re::RenderGraphSpecifyOperationBase *>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::Allocator *)#2}::__invoke);
        re::TypeBuilder::~TypeBuilder((re::TypeBuilder *)&v20, v15);
      }
      xmmword_2540FFFC0 = v16;
      re::StringID::destroyString((re::StringID *)&v18);
    }
  }
}

void sub_22534AE58(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_2540FFBB8);
  _Unwind_Resume(a1);
}

void re::IntrospectionInfo<re::DynamicArray<re::RenderGraphDataNodeConnection>>::get()
{
  unsigned __int8 v0;
  uint64_t *v1;
  unsigned __int8 v2;
  const re::IntrospectionBase *v3;
  unsigned __int8 v4;
  int v5;
  re::IntrospectionRegistry *v6;
  const re::IntrospectionBase *v7;
  const char *v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  re *v13;
  uint64_t *v14;
  const re::IntrospectionBase *v15;
  void *v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t v19;
  __int128 v20;
  __int128 v21;
  uint64_t v22[2];
  __int128 v23;
  const char *v24;
  __int128 v25;

  v0 = atomic_load((unsigned __int8 *)&qword_2540FFBC0);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_2540FFBC0))
  {
    re::IntrospectionDynamicArrayBase::IntrospectionDynamicArrayBase((re::IntrospectionDynamicArrayBase *)&qword_254100020);
    qword_254100020 = (uint64_t)&off_24ED38090;
    __cxa_guard_release(&qword_2540FFBC0);
  }
  if ((byte_2540FF9A6 & 1) == 0)
  {
    v1 = (uint64_t *)qword_2540FF9F8;
    if (qword_2540FF9F8)
      goto LABEL_7;
    v2 = atomic_load((unsigned __int8 *)&qword_2540FF9E8);
    if ((v2 & 1) == 0 && __cxa_guard_acquire(&qword_2540FF9E8))
    {
      ArcSharedObject::ArcSharedObject((ArcSharedObject *)&qword_254100268, 0);
      *(_QWORD *)(v12 + 22) = 0;
      qword_254100278 = 0;
      *(_QWORD *)&xmmword_254100288 = 0;
      *((_QWORD *)&xmmword_254100288 + 1) = 0xFFFFFFFFLL;
      qword_254100268 = (uint64_t)&off_24ED7DAA8;
      qword_254100298 = (uint64_t)"RenderGraphDataNodeConnection";
      dword_2541002A0 = 0;
      xmmword_2541002A8 = 0u;
      xmmword_2541002B8 = 0u;
      xmmword_2541002C8 = 0u;
      qword_2541002D8 = 0;
      __cxa_guard_release(&qword_2540FF9E8);
    }
    qword_2540FF9F8 = (uint64_t)&qword_254100268;
    *(_QWORD *)&v25 = 0x5BFF1C4CD5873844;
    *((_QWORD *)&v25 + 1) = "RenderGraphDataNodeConnection";
    re::StringID::destroyString((re::StringID *)&v25);
    xmmword_254100288 = v23;
    v4 = atomic_load((unsigned __int8 *)&qword_2540FF9F0);
    if ((v4 & 1) == 0)
    {
      v13 = (re *)__cxa_guard_acquire(&qword_2540FF9F0);
      if ((_DWORD)v13)
      {
        v14 = re::introspectionAllocator(v13);
        v16 = re::IntrospectionInfo<re::StringID>::get(1, v15);
        v17 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v14 + 32))(v14, 72, 8);
        *(_DWORD *)v17 = 1;
        *(_QWORD *)(v17 + 8) = "name";
        *(_QWORD *)(v17 + 16) = v16;
        *(_QWORD *)(v17 + 24) = 0;
        *(_QWORD *)(v17 + 32) = 1;
        *(_DWORD *)(v17 + 40) = 0;
        *(_QWORD *)(v17 + 48) = 0;
        *(_QWORD *)(v17 + 56) = 0;
        *(_DWORD *)(v17 + 64) = 0;
        qword_2540FFBD0 = v17;
        v18 = re::introspectionAllocator((re *)v17);
        re::IntrospectionInfo<re::DynamicArray<re::RenderGraphDataStoreConnection>>::get();
        v19 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v18 + 32))(v18, 72, 8);
        *(_DWORD *)v19 = 1;
        *(_QWORD *)(v19 + 8) = "connections";
        *(_QWORD *)(v19 + 16) = &qword_2540FFD60;
        *(_QWORD *)(v19 + 24) = 0;
        *(_QWORD *)(v19 + 32) = 0x1000000002;
        *(_DWORD *)(v19 + 40) = 0;
        *(_QWORD *)(v19 + 48) = 0;
        *(_QWORD *)(v19 + 56) = 0;
        *(_DWORD *)(v19 + 64) = 0;
        qword_2540FFBD8 = v19;
        __cxa_guard_release(&qword_2540FF9F0);
      }
    }
    qword_254100278 = 0x3800000008;
    v1 = &qword_254100268;
    dword_254100280 = 8;
    word_254100284 = 0;
    dword_2541002A0 = 2;
    *(_QWORD *)&xmmword_2541002A8 = &qword_2540FFBD0;
    *((_QWORD *)&xmmword_2541002A8 + 1) = re::internal::defaultConstruct<re::RenderGraphDataNodeConnection>;
    *(_QWORD *)&xmmword_2541002B8 = re::internal::defaultDestruct<re::RenderGraphDataNodeConnection>;
    *(_QWORD *)&xmmword_2541002C8 = 0;
    *((_QWORD *)&xmmword_2541002B8 + 1) = 0;
    *((_QWORD *)&xmmword_2541002C8 + 1) = re::internal::defaultConstructV2<re::RenderGraphDataNodeConnection>;
    qword_2541002D8 = (uint64_t)re::internal::defaultDestructV2<re::RenderGraphDataNodeConnection>;
    re::IntrospectionRegistry::add((re::IntrospectionRegistry *)&qword_254100268, v3);
    v25 = v23;
    if ((byte_2540FF9A6 & 1) == 0)
    {
LABEL_7:
      byte_2540FF9A6 = 1;
      v5 = *((_DWORD *)v1 + 6);
      ArcSharedObject::ArcSharedObject((ArcSharedObject *)&qword_254100020, 0);
      qword_254100030 = 0x2800000003;
      dword_254100038 = v5;
      word_25410003C = 0;
      *(_QWORD *)&xmmword_254100040 = 0;
      *((_QWORD *)&xmmword_254100040 + 1) = 0xFFFFFFFFLL;
      qword_254100050 = (uint64_t)v1;
      qword_254100058 = 0;
      qword_254100020 = (uint64_t)&off_24ED38090;
      re::IntrospectionRegistry::add(v6, v7);
      re::getPrettyTypeName((re *)&qword_254100020, (const re::IntrospectionBase *)&v23);
      if ((BYTE8(v23) & 1) != 0)
        v8 = v24;
      else
        v8 = (char *)&v23 + 9;
      if ((_QWORD)v23 && (BYTE8(v23) & 1) != 0)
        (*(void (**)(void))(*(_QWORD *)v23 + 40))();
      v21 = *((_OWORD *)v1 + 2);
      v9 = (uint64_t *)re::HashTable<re::StringID,re::StateParameterInt *,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::tryGet((uint64_t)&unk_25582A358, v22);
      if (v9)
      {
        v10 = *v9;
        *((_QWORD *)&v20 + 1) = v10;
      }
      else
      {
        v25 = v21;
        re::TypeBuilder::beginListType((uint64_t)&v23, v22, 1, 0x28uLL, 8uLL, &v25);
        re::TypeBuilder::setConstructor((uint64_t)&v23, (uint64_t)re::TypeBuilderHelper::registerDynamicArray<re::RenderGraphDataNodeConnection>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,void *)#1}::__invoke);
        re::TypeBuilder::setDestructor((uint64_t)&v23, (uint64_t)re::TypeBuilderHelper::registerDynamicArray<re::RenderGraphDataNodeConnection>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,void *)#2}::__invoke);
        re::TypeBuilder::setListUsesContiguousStorage((uint64_t)&v23, 1);
        re::TypeBuilder::setListAccessors((uint64_t)&v23, (uint64_t)re::TypeBuilderHelper::registerDynamicArray<re::RenderGraphDataNodeConnection>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *)#1}::__invoke, (uint64_t)re::TypeBuilderHelper::registerDynamicArray<re::RenderGraphDataNodeConnection>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,unsigned long)#1}::__invoke);
        re::TypeBuilder::setListIndexer((uint64_t)&v23, (void *(*)(void *, unint64_t))re::TypeBuilderHelper::registerDynamicArray<re::RenderGraphDataNodeConnection>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,unsigned long)#1}::__invoke);
        re::TypeBuilder::setListIterator((uint64_t)&v23, (void *(*)(void *, re::Allocator *))re::TypeBuilderHelper::registerDynamicArray<re::RenderGraphDataNodeConnection>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::Allocator *)#1}::__invoke, (void *(*)(void *))re::TypeBuilderHelper::registerDynamicArray<re::RenderGraphDataNodeConnection>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *)#2}::__invoke, (void (*)(void *, re::Allocator *))re::TypeBuilderHelper::registerDynamicArray<re::RenderGraphDataNodeConnection>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::Allocator *)#2}::__invoke);
        re::TypeBuilder::~TypeBuilder((re::TypeBuilder *)&v23, v11);
      }
      xmmword_254100040 = v20;
      re::StringID::destroyString((re::StringID *)v22);
    }
  }
}

void sub_22534B354(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_2540FF9F0);
  _Unwind_Resume(a1);
}

void re::IntrospectionInfo<re::DynamicArray<re::RenderGraphInheritanceData>>::get()
{
  unsigned __int8 v0;
  uint64_t *v1;
  unsigned __int8 v2;
  const re::IntrospectionBase *v3;
  unsigned __int8 v4;
  int v5;
  re::IntrospectionRegistry *v6;
  const re::IntrospectionBase *v7;
  const char *v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  re *v13;
  uint64_t *v14;
  const re::IntrospectionBase *v15;
  void *v16;
  uint64_t v17;
  uint64_t *v18;
  const re::IntrospectionBase *v19;
  void *v20;
  uint64_t v21;
  uint64_t *v22;
  const re::IntrospectionBase *v23;
  void *v24;
  uint64_t v25;
  uint64_t *v26;
  const re::IntrospectionBase *v27;
  void *v28;
  uint64_t v29;
  __int128 v30;
  __int128 v31;
  uint64_t v32[2];
  __int128 v33;
  const char *v34;
  __int128 v35;

  v0 = atomic_load((unsigned __int8 *)&qword_2540FFBC8);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_2540FFBC8))
  {
    re::IntrospectionDynamicArrayBase::IntrospectionDynamicArrayBase((re::IntrospectionDynamicArrayBase *)&qword_254100060);
    qword_254100060 = (uint64_t)&off_24ED38128;
    __cxa_guard_release(&qword_2540FFBC8);
  }
  if ((byte_2540FF9A7 & 1) == 0)
  {
    v1 = (uint64_t *)qword_2540FFB00;
    if (qword_2540FFB00)
      goto LABEL_7;
    v2 = atomic_load((unsigned __int8 *)&qword_2540FFAF0);
    if ((v2 & 1) == 0 && __cxa_guard_acquire(&qword_2540FFAF0))
    {
      ArcSharedObject::ArcSharedObject((ArcSharedObject *)&qword_2541006A0, 0);
      *(_QWORD *)(v12 + 22) = 0;
      qword_2541006B0 = 0;
      *(_QWORD *)&xmmword_2541006C0 = 0;
      *((_QWORD *)&xmmword_2541006C0 + 1) = 0xFFFFFFFFLL;
      qword_2541006A0 = (uint64_t)&off_24ED7DAA8;
      qword_2541006D0 = (uint64_t)"RenderGraphInheritanceData";
      dword_2541006D8 = 0;
      xmmword_2541006E0 = 0u;
      xmmword_2541006F0 = 0u;
      xmmword_254100700 = 0u;
      qword_254100710 = 0;
      __cxa_guard_release(&qword_2540FFAF0);
    }
    qword_2540FFB00 = (uint64_t)&qword_2541006A0;
    *(_QWORD *)&v35 = 0x2D46A26BFC724E78;
    *((_QWORD *)&v35 + 1) = "RenderGraphInheritanceData";
    re::StringID::destroyString((re::StringID *)&v35);
    xmmword_2541006C0 = v33;
    v4 = atomic_load((unsigned __int8 *)&qword_2540FFAF8);
    if ((v4 & 1) == 0)
    {
      v13 = (re *)__cxa_guard_acquire(&qword_2540FFAF8);
      if ((_DWORD)v13)
      {
        v14 = re::introspectionAllocator(v13);
        v16 = re::IntrospectionInfo<re::StringID>::get(1, v15);
        v17 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v14 + 32))(v14, 72, 8);
        *(_DWORD *)v17 = 1;
        *(_QWORD *)(v17 + 8) = "lane";
        *(_QWORD *)(v17 + 16) = v16;
        *(_QWORD *)(v17 + 24) = 0;
        *(_QWORD *)(v17 + 32) = 1;
        *(_DWORD *)(v17 + 40) = 0;
        *(_QWORD *)(v17 + 48) = 0;
        *(_QWORD *)(v17 + 56) = 0;
        *(_DWORD *)(v17 + 64) = 0;
        qword_2540FFC70 = v17;
        v18 = re::introspectionAllocator((re *)v17);
        v20 = re::IntrospectionInfo<re::StringID>::get(1, v19);
        v21 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v18 + 32))(v18, 72, 8);
        *(_DWORD *)v21 = 1;
        *(_QWORD *)(v21 + 8) = "Target";
        *(_QWORD *)(v21 + 16) = v20;
        *(_QWORD *)(v21 + 24) = 0;
        *(_QWORD *)(v21 + 32) = 0x1000000002;
        *(_DWORD *)(v21 + 40) = 0;
        *(_QWORD *)(v21 + 48) = 0;
        *(_QWORD *)(v21 + 56) = 0;
        *(_DWORD *)(v21 + 64) = 0;
        qword_2540FFC78 = v21;
        v22 = re::introspectionAllocator((re *)v21);
        v24 = re::IntrospectionInfo<re::StringID>::get(1, v23);
        v25 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v22 + 32))(v22, 72, 8);
        *(_DWORD *)v25 = 1;
        *(_QWORD *)(v25 + 8) = "Buffer";
        *(_QWORD *)(v25 + 16) = v24;
        *(_QWORD *)(v25 + 24) = 0;
        *(_QWORD *)(v25 + 32) = 0x1000000003;
        *(_DWORD *)(v25 + 40) = 0;
        *(_QWORD *)(v25 + 48) = 0;
        *(_QWORD *)(v25 + 56) = 0;
        *(_DWORD *)(v25 + 64) = 0;
        qword_2540FFC80 = v25;
        v26 = re::introspectionAllocator((re *)v25);
        v28 = re::IntrospectionInfo<re::StringID>::get(1, v27);
        v29 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v26 + 32))(v26, 72, 8);
        *(_DWORD *)v29 = 1;
        *(_QWORD *)(v29 + 8) = "graphScopeOverride";
        *(_QWORD *)(v29 + 16) = v28;
        *(_QWORD *)(v29 + 24) = 0;
        *(_QWORD *)(v29 + 32) = 0x2000000004;
        *(_DWORD *)(v29 + 40) = 0;
        *(_QWORD *)(v29 + 48) = 0;
        *(_QWORD *)(v29 + 56) = 0;
        *(_DWORD *)(v29 + 64) = 0;
        qword_2540FFC88 = v29;
        __cxa_guard_release(&qword_2540FFAF8);
      }
    }
    qword_2541006B0 = 0x3000000008;
    v1 = &qword_2541006A0;
    dword_2541006B8 = 8;
    word_2541006BC = 0;
    dword_2541006D8 = 4;
    *(_QWORD *)&xmmword_2541006E0 = &qword_2540FFC70;
    *((_QWORD *)&xmmword_2541006E0 + 1) = re::internal::defaultConstruct<re::RenderGraphInheritanceData>;
    *(_QWORD *)&xmmword_2541006F0 = re::internal::defaultDestruct<re::RenderGraphInheritanceData>;
    *(_QWORD *)&xmmword_254100700 = 0;
    *((_QWORD *)&xmmword_2541006F0 + 1) = 0;
    *((_QWORD *)&xmmword_254100700 + 1) = re::internal::defaultConstructV2<re::RenderGraphInheritanceData>;
    qword_254100710 = (uint64_t)re::internal::defaultDestructV2<re::RenderGraphInheritanceData>;
    re::IntrospectionRegistry::add((re::IntrospectionRegistry *)&qword_2541006A0, v3);
    v35 = v33;
    if ((byte_2540FF9A7 & 1) == 0)
    {
LABEL_7:
      byte_2540FF9A7 = 1;
      v5 = *((_DWORD *)v1 + 6);
      ArcSharedObject::ArcSharedObject((ArcSharedObject *)&qword_254100060, 0);
      qword_254100070 = 0x2800000003;
      dword_254100078 = v5;
      word_25410007C = 0;
      *(_QWORD *)&xmmword_254100080 = 0;
      *((_QWORD *)&xmmword_254100080 + 1) = 0xFFFFFFFFLL;
      qword_254100090 = (uint64_t)v1;
      qword_254100098 = 0;
      qword_254100060 = (uint64_t)&off_24ED38128;
      re::IntrospectionRegistry::add(v6, v7);
      re::getPrettyTypeName((re *)&qword_254100060, (const re::IntrospectionBase *)&v33);
      if ((BYTE8(v33) & 1) != 0)
        v8 = v34;
      else
        v8 = (char *)&v33 + 9;
      if ((_QWORD)v33 && (BYTE8(v33) & 1) != 0)
        (*(void (**)(void))(*(_QWORD *)v33 + 40))();
      v31 = *((_OWORD *)v1 + 2);
      v9 = (uint64_t *)re::HashTable<re::StringID,re::StateParameterInt *,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::tryGet((uint64_t)&unk_25582A358, v32);
      if (v9)
      {
        v10 = *v9;
        *((_QWORD *)&v30 + 1) = v10;
      }
      else
      {
        v35 = v31;
        re::TypeBuilder::beginListType((uint64_t)&v33, v32, 1, 0x28uLL, 8uLL, &v35);
        re::TypeBuilder::setConstructor((uint64_t)&v33, (uint64_t)re::TypeBuilderHelper::registerDynamicArray<re::RenderGraphInheritanceData>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,void *)#1}::__invoke);
        re::TypeBuilder::setDestructor((uint64_t)&v33, (uint64_t)re::TypeBuilderHelper::registerDynamicArray<re::RenderGraphInheritanceData>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,void *)#2}::__invoke);
        re::TypeBuilder::setListUsesContiguousStorage((uint64_t)&v33, 1);
        re::TypeBuilder::setListAccessors((uint64_t)&v33, (uint64_t)re::TypeBuilderHelper::registerDynamicArray<re::RenderGraphInheritanceData>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *)#1}::__invoke, (uint64_t)re::TypeBuilderHelper::registerDynamicArray<re::RenderGraphInheritanceData>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,unsigned long)#1}::__invoke);
        re::TypeBuilder::setListIndexer((uint64_t)&v33, (void *(*)(void *, unint64_t))re::TypeBuilderHelper::registerDynamicArray<re::RenderGraphInheritanceData>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,unsigned long)#1}::__invoke);
        re::TypeBuilder::setListIterator((uint64_t)&v33, (void *(*)(void *, re::Allocator *))re::TypeBuilderHelper::registerDynamicArray<re::RenderGraphInheritanceData>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::Allocator *)#1}::__invoke, (void *(*)(void *))re::TypeBuilderHelper::registerDynamicArray<re::RenderGraphInheritanceData>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *)#2}::__invoke, (void (*)(void *, re::Allocator *))re::TypeBuilderHelper::registerDynamicArray<re::RenderGraphInheritanceData>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::Allocator *)#2}::__invoke);
        re::TypeBuilder::~TypeBuilder((re::TypeBuilder *)&v33, v11);
      }
      xmmword_254100080 = v30;
      re::StringID::destroyString((re::StringID *)v32);
    }
  }
}

void sub_22534B91C(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_2540FFAF8);
  _Unwind_Resume(a1);
}

double re::internal::defaultConstruct<re::RenderGraphFile>(_anonymous_namespace_ *a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v4;
  _anonymous_namespace_ *v5;
  double result;

  *(_QWORD *)a3 = off_24ED381E0;
  *(_OWORD *)(a3 + 24) = 0u;
  *(_OWORD *)(a3 + 8) = 0u;
  v4 = (_QWORD *)(a3 + 8);
  v5 = (_anonymous_namespace_ *)re::DynamicString::setCapacity(v4, 0);
  *(_QWORD *)a3 = &off_24ED37988;
  *(_QWORD *)(a3 + 40) = 0;
  *(_OWORD *)(a3 + 48) = 0u;
  *(_DWORD *)(a3 + 64) = 0;
  *(_OWORD *)(a3 + 72) = 0u;
  *(_OWORD *)(a3 + 88) = 0u;
  *(_DWORD *)(a3 + 104) = 0;
  *(_OWORD *)(a3 + 112) = 0u;
  *(_OWORD *)(a3 + 128) = 0u;
  *(_DWORD *)(a3 + 144) = 0;
  *(_OWORD *)(a3 + 152) = 0u;
  *(_OWORD *)(a3 + 168) = 0u;
  *(_DWORD *)(a3 + 184) = 0;
  *(_OWORD *)(a3 + 192) = 0u;
  *(_OWORD *)(a3 + 208) = 0u;
  *(_DWORD *)(a3 + 224) = 0;
  *(_OWORD *)(a3 + 232) = 0u;
  *(_OWORD *)(a3 + 248) = 0u;
  *(_DWORD *)(a3 + 264) = 0;
  *(_DWORD *)(a3 + 304) = 0;
  *(_OWORD *)(a3 + 272) = 0u;
  *(_OWORD *)(a3 + 288) = 0u;
  *(_DWORD *)(a3 + 344) = 0;
  *(_OWORD *)(a3 + 312) = 0u;
  *(_OWORD *)(a3 + 328) = 0u;
  *(_OWORD *)(a3 + 368) = 0u;
  *(_OWORD *)(a3 + 384) = 0u;
  *(_OWORD *)(a3 + 352) = 0u;
  re::DynamicString::setCapacity((_QWORD *)(a3 + 368), 0);
  result = 0.0;
  *(_OWORD *)(a3 + 428) = 0u;
  *(_OWORD *)(a3 + 400) = 0u;
  *(_OWORD *)(a3 + 416) = 0u;
  *(_QWORD *)(a3 + 444) = 0x7FFFFFFFLL;
  *(_OWORD *)(a3 + 456) = 0u;
  *(_OWORD *)(a3 + 472) = 0u;
  *(_DWORD *)(a3 + 488) = 0;
  *(_QWORD *)(a3 + 492) = 0x7FFFFFFFLL;
  *(_OWORD *)(a3 + 504) = 0u;
  *(_OWORD *)(a3 + 520) = 0u;
  *(_DWORD *)(a3 + 536) = 0;
  *(_QWORD *)(a3 + 540) = 0x7FFFFFFFLL;
  *(_OWORD *)(a3 + 552) = 0u;
  *(_OWORD *)(a3 + 568) = 0u;
  *(_DWORD *)(a3 + 584) = 0;
  *(_QWORD *)(a3 + 588) = 0x7FFFFFFFLL;
  *(_DWORD *)(a3 + 632) = 0;
  *(_OWORD *)(a3 + 600) = 0u;
  *(_OWORD *)(a3 + 616) = 0u;
  *(_QWORD *)(a3 + 636) = 0x7FFFFFFFLL;
  *(_OWORD *)(a3 + 648) = 0u;
  *(_OWORD *)(a3 + 664) = 0u;
  *(_DWORD *)(a3 + 680) = 0;
  *(_QWORD *)(a3 + 684) = 0x7FFFFFFFLL;
  *(_QWORD *)(a3 + 696) = 0;
  *(_BYTE *)(a3 + 704) = 1;
  *(_OWORD *)(a3 + 712) = 0u;
  *(_OWORD *)(a3 + 728) = 0u;
  *(_OWORD *)(a3 + 744) = 0u;
  *(_OWORD *)(a3 + 756) = 0u;
  *(_QWORD *)(a3 + 772) = 0x7FFFFFFFLL;
  *(_QWORD *)(a3 + 800) = 0;
  *(_DWORD *)(a3 + 808) = 0;
  *(_OWORD *)(a3 + 784) = 0u;
  *(_QWORD *)(a3 + 856) = 0;
  *(_DWORD *)(a3 + 848) = 0;
  *(_OWORD *)(a3 + 816) = 0u;
  *(_OWORD *)(a3 + 832) = 0u;
  return result;
}

void re::internal::defaultDestruct<re::RenderGraphFile>(int a1, int a2, re::RenderGraphFile *this)
{
  re::RenderGraphFile::~RenderGraphFile(this);
}

double re::internal::defaultConstructV2<re::RenderGraphFile>(uint64_t a1)
{
  _QWORD *v2;
  _anonymous_namespace_ *v3;
  double result;

  *(_QWORD *)a1 = off_24ED381E0;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 8) = 0u;
  v2 = (_QWORD *)(a1 + 8);
  v3 = (_anonymous_namespace_ *)re::DynamicString::setCapacity(v2, 0);
  *(_QWORD *)a1 = &off_24ED37988;
  *(_QWORD *)(a1 + 40) = 0;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_DWORD *)(a1 + 64) = 0;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_DWORD *)(a1 + 104) = 0;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_OWORD *)(a1 + 128) = 0u;
  *(_DWORD *)(a1 + 144) = 0;
  *(_OWORD *)(a1 + 152) = 0u;
  *(_OWORD *)(a1 + 168) = 0u;
  *(_DWORD *)(a1 + 184) = 0;
  *(_OWORD *)(a1 + 192) = 0u;
  *(_OWORD *)(a1 + 208) = 0u;
  *(_DWORD *)(a1 + 224) = 0;
  *(_OWORD *)(a1 + 232) = 0u;
  *(_OWORD *)(a1 + 248) = 0u;
  *(_DWORD *)(a1 + 264) = 0;
  *(_DWORD *)(a1 + 304) = 0;
  *(_OWORD *)(a1 + 272) = 0u;
  *(_OWORD *)(a1 + 288) = 0u;
  *(_DWORD *)(a1 + 344) = 0;
  *(_OWORD *)(a1 + 312) = 0u;
  *(_OWORD *)(a1 + 328) = 0u;
  *(_OWORD *)(a1 + 368) = 0u;
  *(_OWORD *)(a1 + 384) = 0u;
  *(_OWORD *)(a1 + 352) = 0u;
  re::DynamicString::setCapacity((_QWORD *)(a1 + 368), 0);
  result = 0.0;
  *(_OWORD *)(a1 + 428) = 0u;
  *(_OWORD *)(a1 + 400) = 0u;
  *(_OWORD *)(a1 + 416) = 0u;
  *(_QWORD *)(a1 + 444) = 0x7FFFFFFFLL;
  *(_OWORD *)(a1 + 456) = 0u;
  *(_OWORD *)(a1 + 472) = 0u;
  *(_DWORD *)(a1 + 488) = 0;
  *(_QWORD *)(a1 + 492) = 0x7FFFFFFFLL;
  *(_OWORD *)(a1 + 504) = 0u;
  *(_OWORD *)(a1 + 520) = 0u;
  *(_DWORD *)(a1 + 536) = 0;
  *(_QWORD *)(a1 + 540) = 0x7FFFFFFFLL;
  *(_OWORD *)(a1 + 552) = 0u;
  *(_OWORD *)(a1 + 568) = 0u;
  *(_DWORD *)(a1 + 584) = 0;
  *(_QWORD *)(a1 + 588) = 0x7FFFFFFFLL;
  *(_DWORD *)(a1 + 632) = 0;
  *(_OWORD *)(a1 + 600) = 0u;
  *(_OWORD *)(a1 + 616) = 0u;
  *(_QWORD *)(a1 + 636) = 0x7FFFFFFFLL;
  *(_OWORD *)(a1 + 648) = 0u;
  *(_OWORD *)(a1 + 664) = 0u;
  *(_DWORD *)(a1 + 680) = 0;
  *(_QWORD *)(a1 + 684) = 0x7FFFFFFFLL;
  *(_QWORD *)(a1 + 696) = 0;
  *(_BYTE *)(a1 + 704) = 1;
  *(_OWORD *)(a1 + 712) = 0u;
  *(_OWORD *)(a1 + 728) = 0u;
  *(_OWORD *)(a1 + 744) = 0u;
  *(_OWORD *)(a1 + 756) = 0u;
  *(_QWORD *)(a1 + 772) = 0x7FFFFFFFLL;
  *(_QWORD *)(a1 + 800) = 0;
  *(_DWORD *)(a1 + 808) = 0;
  *(_OWORD *)(a1 + 784) = 0u;
  *(_QWORD *)(a1 + 856) = 0;
  *(_DWORD *)(a1 + 848) = 0;
  *(_OWORD *)(a1 + 816) = 0u;
  *(_OWORD *)(a1 + 832) = 0u;
  return result;
}

uint64_t re::introspect_RenderGraphFile(re::IntrospectionBase **this)
{
  return re::internal::getOrCreateInfo((re::internal *)"RenderGraphFile", (uint64_t (*)(re::internal *))re::allocInfo_RenderGraphFile, (re::IntrospectionBase *(*)(void))re::initInfo_RenderGraphFile, (void (*)(re::IntrospectionBase *))&re::internal::introspectionInfoStorage<re::RenderGraphFile>, this);
}

void re::RenderGraphSpecifyLaneOperation::~RenderGraphSpecifyLaneOperation(re::RenderGraphSpecifyLaneOperation *this)
{
  re::StringID::destroyString((re::RenderGraphSpecifyLaneOperation *)((char *)this + 184));
  if (*((_BYTE *)this + 32))
    re::AssetHandle::~AssetHandle((re::RenderGraphSpecifyLaneOperation *)((char *)this + 112));
  re::StringID::destroyString((re::RenderGraphSpecifyLaneOperation *)((char *)this + 16));
}

{
  re::StringID::destroyString((re::RenderGraphSpecifyLaneOperation *)((char *)this + 184));
  if (*((_BYTE *)this + 32))
    re::AssetHandle::~AssetHandle((re::RenderGraphSpecifyLaneOperation *)((char *)this + 112));
  re::StringID::destroyString((re::RenderGraphSpecifyLaneOperation *)((char *)this + 16));
  JUMPOUT(0x2276933B8);
}

double re::HashSetBase<unsigned long long,unsigned long long,re::internal::ValueAsKey<unsigned long long>,re::PrecalculatedHash,re::EqualTo<unsigned long long>,false,false>::deinit(uint64_t *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  double result;

  v2 = *a1;
  if (v2)
  {
    v3 = *((unsigned int *)a1 + 8);
    if ((_DWORD)v3)
    {
      v4 = 0;
      v5 = 16 * v3;
      do
      {
        v6 = a1[2];
        v7 = *(_DWORD *)(v6 + v4);
        if (v7 < 0)
          *(_DWORD *)(v6 + v4) = v7 & 0x7FFFFFFF;
        v4 += 16;
      }
      while (v5 != v4);
    }
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v2 + 40))(v2, a1[1]);
    *((_DWORD *)a1 + 8) = 0;
    *(_OWORD *)a1 = 0u;
    *((_OWORD *)a1 + 1) = 0u;
    *(_QWORD *)&result = 0x7FFFFFFFLL;
    *(uint64_t *)((char *)a1 + 36) = 0x7FFFFFFFLL;
  }
  return result;
}

uint64_t re::HashTable<unsigned long,re::IntrospectionStructure const*,re::PrecalculatedHash,re::EqualTo<unsigned long>,false,false>::tryGet(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;

  if (!*(_QWORD *)a1)
    return 0;
  v2 = *a2;
  v3 = *(unsigned int *)(*(_QWORD *)(a1 + 8) + 4 * (*a2 % (unint64_t)*(unsigned int *)(a1 + 24)));
  if ((_DWORD)v3 == 0x7FFFFFFF)
    return 0;
  v5 = *(_QWORD *)(a1 + 16);
  if (*(_QWORD *)(v5 + 24 * v3 + 8) != v2)
  {
    while (1)
    {
      LODWORD(v3) = *(_DWORD *)(v5 + 24 * v3) & 0x7FFFFFFF;
      if ((_DWORD)v3 == 0x7FFFFFFF)
        break;
      if (*(_QWORD *)(v5 + 24 * v3 + 8) == v2)
        return v5 + 24 * v3 + 16;
    }
    return 0;
  }
  return v5 + 24 * v3 + 16;
}

uint64_t re::RenderGraphDataStore::tryGetByTypeNameHash(re::RenderGraphDataStore *this, uint64_t a2, unint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v7;

  v7 = (a2 + (a3 << 6) + (a3 >> 2) - 0x61C8864680B583E9) ^ a3;
  v4 = re::HashTable<unsigned long,re::IntrospectionStructure const*,re::PrecalculatedHash,re::EqualTo<unsigned long>,false,false>::tryGet((uint64_t)this + 16, (uint64_t *)&v7);
  if (!v4)
  {
    v4 = re::HashTable<unsigned long,re::IntrospectionStructure const*,re::PrecalculatedHash,re::EqualTo<unsigned long>,false,false>::tryGet((uint64_t)this + 64, (uint64_t *)&v7);
    if (!v4)
    {
      v5 = re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::find((_QWORD *)this + 14, &v7);
      if (v5 == -1)
        return 0;
      v4 = *((_QWORD *)this + 15) + 16 * v5 + 8;
    }
  }
  return *(_QWORD *)v4;
}

double re::HashTable<unsigned long long,re::DynamicArray<re::NodePatchData>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::deinit(uint64_t *a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t i;
  uint64_t v6;
  int v7;
  double result;

  v2 = *a1;
  if (v2)
  {
    v3 = *((unsigned int *)a1 + 8);
    if ((_DWORD)v3)
    {
      v4 = 0;
      for (i = 0; i < v3; ++i)
      {
        v6 = a1[2] + v4;
        v7 = *(_DWORD *)(v6 + 8);
        if (v7 < 0)
        {
          *(_DWORD *)(v6 + 8) = v7 & 0x7FFFFFFF;
          re::DynamicArray<re::NodePatchData>::deinit(v6 + 24);
          v3 = *((unsigned int *)a1 + 8);
        }
        v4 += 64;
      }
      v2 = *a1;
    }
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v2 + 40))(v2, a1[1]);
    *((_DWORD *)a1 + 8) = 0;
    *(_OWORD *)a1 = 0u;
    *((_OWORD *)a1 + 1) = 0u;
    *(_QWORD *)&result = 0x7FFFFFFFLL;
    *(uint64_t *)((char *)a1 + 36) = 0x7FFFFFFFLL;
  }
  return result;
}

__n128 re::DynamicArray<re::DetailedError>::add(_anonymous_namespace_ *this, __n128 *a2)
{
  unint64_t v4;
  uint64_t v5;
  __n128 result;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;

  v4 = *((_QWORD *)this + 2);
  if (v4 >= *((_QWORD *)this + 1))
  {
    re::DynamicArray<re::DetailedError>::growCapacity(this, v4 + 1);
    v4 = *((_QWORD *)this + 2);
  }
  v5 = *((_QWORD *)this + 4) + 48 * v4;
  result = *a2;
  *(_OWORD *)(v5 + 16) = 0u;
  *(_OWORD *)(v5 + 32) = 0u;
  *(__n128 *)v5 = result;
  *(_QWORD *)(v5 + 40) = a2[2].n128_u64[1];
  v7 = a2[1].n128_u64[1];
  *(_QWORD *)(v5 + 16) = a2[1].n128_u64[0];
  a2[1].n128_u64[0] = 0;
  v8 = a2[2].n128_u64[0];
  a2[2].n128_u64[1] = 0;
  v10 = *(_QWORD *)(v5 + 24);
  v9 = *(_QWORD *)(v5 + 32);
  *(_QWORD *)(v5 + 24) = v7;
  *(_QWORD *)(v5 + 32) = v8;
  a2[1].n128_u64[1] = v10;
  a2[2].n128_u64[0] = v9;
  ++*((_QWORD *)this + 2);
  ++*((_DWORD *)this + 6);
  return result;
}

_QWORD *re::DynamicArray<re::DetailedError>::growCapacity(_QWORD *this, unint64_t a2)
{
  unint64_t v2;
  unint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  BOOL v6;
  unint64_t v7;

  v2 = this[1];
  if (v2 < a2)
  {
    v3 = a2;
    v4 = this;
    if (*this)
    {
      v5 = 2 * v2;
      v6 = v2 == 0;
      v7 = 8;
      if (!v6)
        v7 = v5;
      if (v7 > a2)
        a2 = v7;
      return re::DynamicArray<re::DetailedError>::setCapacity(this, a2);
    }
    else
    {
      this = re::DynamicArray<re::DetailedError>::setCapacity(v4, v3);
      ++*((_DWORD *)v4 + 6);
    }
  }
  return this;
}

_QWORD *re::DynamicArray<re::DetailedError>::setCapacity(_QWORD *result, unint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  __int128 v12;
  _QWORD *v13;
  __int128 v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  v3 = result[1];
  if (v3 != a2)
  {
    v5 = result;
    if (result[2] <= a2)
    {
      result = (_QWORD *)*result;
      if (!*v5)
      {
        result = (_QWORD *)re::DynamicArray<re::DetailedError>::setCapacity(v5, a2);
        ++*((_DWORD *)v5 + 6);
        return result;
      }
      if (a2)
      {
        if (is_mul_ok(a2, 0x30uLL))
        {
          v2 = 48 * a2;
          result = (_QWORD *)(*(uint64_t (**)(_QWORD *, unint64_t, uint64_t))(*result + 32))(result, 48 * a2, 8);
          if (result)
          {
            v7 = result;
            if (!v5[1])
              goto LABEL_20;
            goto LABEL_11;
          }
        }
        else
        {
          re::internal::assertLog((re::internal *)6, a2, "assertion failure: '%s' (%s:line %i) Size overflow in DynamicArray<T>::setCapacity(). Element size = %zu, capacity = %zu", "!overflow", "setCapacity", 615, 48, a2);
          _os_crash();
          __break(1u);
        }
        re::internal::assertLog((re::internal *)6, v6, "assertion failure: '%s' (%s:line %i) DynamicArray<T> is out of memory (tried to allocate %zu bytes from allocator '%s').", "newData", "setCapacity", 619, v2, *(_QWORD *)(*v5 + 8));
        result = (_QWORD *)_os_crash();
        __break(1u);
        return result;
      }
      v7 = 0;
      if (!v3)
      {
LABEL_20:
        v5[4] = v7;
        v5[1] = a2;
        return result;
      }
LABEL_11:
      v8 = v5[4];
      v9 = v5[2];
      if (v9)
      {
        v10 = (_QWORD *)(v8 + 24);
        v11 = 48 * v9;
        v12 = 0uLL;
        v13 = v7;
        do
        {
          v14 = *(_OWORD *)(v10 - 3);
          *((_OWORD *)v13 + 1) = v12;
          *((_OWORD *)v13 + 2) = v12;
          *(_OWORD *)v13 = v14;
          v13[2] = *(v10 - 1);
          *(v10 - 1) = 0;
          v13[5] = v10[2];
          v10[2] = 0;
          v15 = v13[3];
          v16 = v13[4];
          v17 = v10[1];
          v13[3] = *v10;
          v13[4] = v17;
          *v10 = v15;
          v10[1] = v16;
          v18 = *(v10 - 1);
          if (v18)
          {
            if ((v15 & 1) != 0)
            {
              (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v18 + 40))(v18, v10[1]);
              v12 = 0uLL;
            }
            *(_OWORD *)(v10 - 1) = v12;
            *(_OWORD *)(v10 + 1) = v12;
          }
          v10 += 6;
          v13 += 6;
          v11 -= 48;
        }
        while (v11);
        v8 = v5[4];
      }
      result = (_QWORD *)(*(uint64_t (**)(_QWORD, uint64_t))(*(_QWORD *)*v5 + 40))(*v5, v8);
      goto LABEL_20;
    }
  }
  return result;
}

void re::RenderGraphTargetData::~RenderGraphTargetData(re::RenderGraphTargetData *this)
{
  re::DynamicArray<re::RenderGraphDataStoreConnection>::deinit((uint64_t)this + 120);
  re::AssetHandle::~AssetHandle((re::RenderGraphTargetData *)((char *)this + 88));
  re::StringID::destroyString(this);
}

void re::RenderGraphInputData::~RenderGraphInputData(re::RenderGraphInputData *this)
{
  re::StringID::destroyString((re::RenderGraphInputData *)((char *)this + 40));
  re::StringID::destroyString((re::RenderGraphInputData *)((char *)this + 16));
  re::StringID::destroyString(this);
}

void re::RenderGraphOutputData::~RenderGraphOutputData(re::RenderGraphOutputData *this)
{
  re::StringID::destroyString((re::RenderGraphOutputData *)((char *)this + 32));
  re::StringID::destroyString((re::RenderGraphOutputData *)((char *)this + 16));
  re::StringID::destroyString(this);
}

uint64_t re::DynamicArray<re::BindPointAndPath>::deinit(uint64_t a1)
{
  uint64_t result;
  uint64_t v3;
  uint64_t v4;
  re::StringID *v5;
  uint64_t v6;

  result = *(_QWORD *)a1;
  if (result)
  {
    v3 = *(_QWORD *)(a1 + 32);
    if (v3)
    {
      v4 = *(_QWORD *)(a1 + 16);
      if (v4)
      {
        v5 = (re::StringID *)(v3 + 48);
        v6 = v4 << 6;
        do
        {
          re::StringID::destroyString(v5);
          re::DynamicArray<re::BindPoint::BindPointData>::deinit((uint64_t)v5 - 40);
          re::DynamicArray<re::BindPoint::BindPointData>::deinit((uint64_t)v5 - 40);
          v5 = (re::StringID *)((char *)v5 + 64);
          v6 -= 64;
        }
        while (v6);
        result = *(_QWORD *)a1;
        v3 = *(_QWORD *)(a1 + 32);
      }
      result = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)result + 40))(result, v3);
    }
    *(_QWORD *)(a1 + 32) = 0;
    *(_QWORD *)(a1 + 8) = 0;
    *(_QWORD *)(a1 + 16) = 0;
    *(_QWORD *)a1 = 0;
    ++*(_DWORD *)(a1 + 24);
  }
  return result;
}

uint64_t re::DynamicArray<re::RenderGraphBufferData>::deinit(uint64_t a1)
{
  uint64_t result;
  re::StringID *v3;
  uint64_t v4;
  uint64_t v5;

  result = *(_QWORD *)a1;
  if (result)
  {
    v3 = *(re::StringID **)(a1 + 32);
    if (v3)
    {
      v4 = *(_QWORD *)(a1 + 16);
      if (v4)
      {
        v5 = 88 * v4;
        do
        {
          re::DynamicArray<re::RenderGraphDataStoreConnection>::deinit((uint64_t)v3 + 48);
          re::StringID::destroyString(v3);
          v3 = (re::StringID *)((char *)v3 + 88);
          v5 -= 88;
        }
        while (v5);
        result = *(_QWORD *)a1;
        v3 = *(re::StringID **)(a1 + 32);
      }
      result = (*(uint64_t (**)(uint64_t, re::StringID *))(*(_QWORD *)result + 40))(result, v3);
    }
    *(_QWORD *)(a1 + 32) = 0;
    *(_QWORD *)(a1 + 8) = 0;
    *(_QWORD *)(a1 + 16) = 0;
    *(_QWORD *)a1 = 0;
    ++*(_DWORD *)(a1 + 24);
  }
  return result;
}

uint64_t re::DynamicArray<re::RenderGraphDataNodeConnection>::deinit(uint64_t a1)
{
  uint64_t result;
  re::StringID *v3;
  uint64_t v4;
  uint64_t v5;

  result = *(_QWORD *)a1;
  if (result)
  {
    v3 = *(re::StringID **)(a1 + 32);
    if (v3)
    {
      v4 = *(_QWORD *)(a1 + 16);
      if (v4)
      {
        v5 = 56 * v4;
        do
        {
          re::DynamicArray<re::RenderGraphDataStoreConnection>::deinit((uint64_t)v3 + 16);
          re::StringID::destroyString(v3);
          v3 = (re::StringID *)((char *)v3 + 56);
          v5 -= 56;
        }
        while (v5);
        result = *(_QWORD *)a1;
        v3 = *(re::StringID **)(a1 + 32);
      }
      result = (*(uint64_t (**)(uint64_t, re::StringID *))(*(_QWORD *)result + 40))(result, v3);
    }
    *(_QWORD *)(a1 + 32) = 0;
    *(_QWORD *)(a1 + 8) = 0;
    *(_QWORD *)(a1 + 16) = 0;
    *(_QWORD *)a1 = 0;
    ++*(_DWORD *)(a1 + 24);
  }
  return result;
}

double re::HashTable<unsigned long,re::RenderGraphFile::ConnectionCacheInfo,re::Hash<unsigned long>,re::EqualTo<unsigned long>,true,false>::deinit(uint64_t *a1)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  double result;

  v2 = *a1;
  if (v2)
  {
    if (*((_DWORD *)a1 + 8))
    {
      v3 = 0;
      v4 = 0;
      do
      {
        v5 = a1[2];
        v6 = v5 + v3;
        v7 = *(_DWORD *)(v5 + v3 + 8);
        if (v7 < 0)
        {
          *(_DWORD *)(v6 + 8) = v7 & 0x7FFFFFFF;
          v8 = *(_QWORD *)(v6 + 56);
          if (v8)
          {
            if (*(_QWORD *)(v5 + v3 + 64))
            {
              (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v8 + 40))(v8, *(_QWORD *)(v5 + v3 + 72));
              *(_QWORD *)(v5 + v3 + 64) = 0;
              *(_QWORD *)(v5 + v3 + 72) = 0;
            }
            *(_QWORD *)(v6 + 56) = 0;
          }
          v9 = (_QWORD *)(v5 + v3);
          v10 = *(_QWORD *)(v5 + v3 + 32);
          if (v10)
          {
            if (v9[5])
            {
              (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v10 + 40))(v10, *(_QWORD *)(v5 + v3 + 48));
              v9[5] = 0;
              v9[6] = 0;
            }
            v9[4] = 0;
          }
        }
        ++v4;
        v3 += 88;
      }
      while (v4 < *((unsigned int *)a1 + 8));
      v2 = *a1;
    }
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v2 + 40))(v2, a1[1]);
    *((_DWORD *)a1 + 8) = 0;
    *(_OWORD *)a1 = 0u;
    *((_OWORD *)a1 + 1) = 0u;
    *(_QWORD *)&result = 0x7FFFFFFFLL;
    *(uint64_t *)((char *)a1 + 36) = 0x7FFFFFFFLL;
  }
  return result;
}

double re::HashTable<unsigned long long,re::RenderGraphTargetHandle,re::PrecalculatedHash,re::EqualTo<unsigned long long>,false,false>::deinit(uint64_t *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  double result;

  v2 = *a1;
  if (v2)
  {
    v3 = *((unsigned int *)a1 + 8);
    if ((_DWORD)v3)
    {
      v4 = 0;
      v5 = 32 * v3;
      do
      {
        v6 = a1[2];
        v7 = *(_DWORD *)(v6 + v4);
        if (v7 < 0)
          *(_DWORD *)(v6 + v4) = v7 & 0x7FFFFFFF;
        v4 += 32;
      }
      while (v5 != v4);
    }
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v2 + 40))(v2, a1[1]);
    *((_DWORD *)a1 + 8) = 0;
    *(_OWORD *)a1 = 0u;
    *((_OWORD *)a1 + 1) = 0u;
    *(_QWORD *)&result = 0x7FFFFFFFLL;
    *(uint64_t *)((char *)a1 + 36) = 0x7FFFFFFFLL;
  }
  return result;
}

uint64_t re::DynamicArray<re::RenderGraphDataStoreConnection>::deinit(uint64_t a1)
{
  uint64_t result;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  result = *(_QWORD *)a1;
  if (result)
  {
    v3 = *(_QWORD *)(a1 + 32);
    if (v3)
    {
      v4 = *(_QWORD *)(a1 + 16);
      if (v4)
      {
        v5 = v3 + 72;
        v6 = 136 * v4;
        do
        {
          re::DynamicArray<re::DynamicString>::deinit(v5);
          v7 = *(_QWORD *)(v5 - 32);
          if (v7)
          {
            if ((*(_BYTE *)(v5 - 24) & 1) != 0)
              (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v7 + 40))(v7, *(_QWORD *)(v5 - 16));
            *(_OWORD *)(v5 - 32) = 0u;
            *(_OWORD *)(v5 - 16) = 0u;
          }
          re::DynamicArray<re::DynamicString>::deinit(v5 - 72);
          v5 += 136;
          v6 -= 136;
        }
        while (v6);
        result = *(_QWORD *)a1;
        v3 = *(_QWORD *)(a1 + 32);
      }
      result = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)result + 40))(result, v3);
    }
    *(_QWORD *)(a1 + 32) = 0;
    *(_QWORD *)(a1 + 8) = 0;
    *(_QWORD *)(a1 + 16) = 0;
    *(_QWORD *)a1 = 0;
    ++*(_DWORD *)(a1 + 24);
  }
  return result;
}

void re::RenderGraphDataStoreConnection::~RenderGraphDataStoreConnection(re::RenderGraphDataStoreConnection *this)
{
  uint64_t v2;

  re::DynamicArray<re::DynamicString>::deinit((uint64_t)this + 72);
  v2 = *((_QWORD *)this + 5);
  if (v2)
  {
    if ((*((_BYTE *)this + 48) & 1) != 0)
      (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v2 + 40))(v2, *((_QWORD *)this + 7));
    *(_OWORD *)((char *)this + 40) = 0u;
    *(_OWORD *)((char *)this + 56) = 0u;
  }
  re::DynamicArray<re::DynamicString>::deinit((uint64_t)this);
}

uint64_t re::HashSetBase<unsigned long long,unsigned long long,re::internal::ValueAsKey<unsigned long long>,re::PrecalculatedHash,re::EqualTo<unsigned long long>,false,false>::addAsMove(uint64_t a1, unsigned int a2, unint64_t a3, _QWORD *a4)
{
  uint64_t v6;
  int v7;
  int v9;
  signed int v10;
  uint64_t v11;
  BOOL v12;
  __int128 v13;
  uint64_t v14;
  uint64_t v15;
  unsigned int v16;
  __int128 v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  int v21;
  signed int v22;
  uint64_t v23;
  uint64_t v24;
  _BYTE v26[44];

  v6 = *(unsigned int *)(a1 + 36);
  if ((_DWORD)v6 == 0x7FFFFFFF)
  {
    v6 = *(unsigned int *)(a1 + 32);
    v7 = v6;
    if ((_DWORD)v6 == *(_DWORD *)(a1 + 24))
    {
      v9 = *(_DWORD *)(a1 + 28);
      v10 = 2 * v9;
      v11 = *(_QWORD *)a1;
      if (*(_QWORD *)a1)
      {
        if (v10)
          v12 = (_DWORD)v6 == v10;
        else
          v12 = 1;
        if (!v12 && (v9 & 0x80000000) == 0)
        {
          memset(v26, 0, 36);
          *(_QWORD *)&v26[36] = 0x7FFFFFFFLL;
          re::HashSetBase<unsigned long long,unsigned long long,re::internal::ValueAsKey<unsigned long long>,re::PrecalculatedHash,re::EqualTo<unsigned long long>,false,false>::init((uint64_t)v26, v11, v10);
          v13 = *(_OWORD *)v26;
          *(_OWORD *)v26 = *(_OWORD *)a1;
          *(_OWORD *)a1 = v13;
          v14 = *(_QWORD *)&v26[16];
          v15 = *(_QWORD *)(a1 + 16);
          *(_QWORD *)&v26[16] = v15;
          *(_QWORD *)(a1 + 16) = v14;
          v17 = *(_OWORD *)&v26[24];
          *(_OWORD *)&v26[24] = *(_OWORD *)(a1 + 24);
          v16 = *(_DWORD *)&v26[32];
          *(_OWORD *)(a1 + 24) = v17;
          v18 = v16;
          if (v16)
          {
            v19 = (_QWORD *)(v15 + 8);
            do
            {
              if ((*(_DWORD *)(v19 - 1) & 0x80000000) != 0)
                re::HashSetBase<unsigned long long,unsigned long long,re::internal::ValueAsKey<unsigned long long>,re::PrecalculatedHash,re::EqualTo<unsigned long long>,false,false>::addAsMove(a1, *v19 % (unint64_t)*(unsigned int *)(a1 + 24), *v19, v19);
              v19 += 2;
              --v18;
            }
            while (v18);
          }
          re::HashSetBase<unsigned long long,unsigned long long,re::internal::ValueAsKey<unsigned long long>,re::PrecalculatedHash,re::EqualTo<unsigned long long>,false,false>::deinit((uint64_t *)v26);
        }
      }
      else
      {
        if (v10)
          v22 = v10;
        else
          v22 = 3;
      }
      a2 = a3 % *(unsigned int *)(a1 + 24);
      v7 = *(_DWORD *)(a1 + 32);
    }
    *(_DWORD *)(a1 + 32) = v7 + 1;
    v20 = *(_QWORD *)(a1 + 16);
    v21 = *(_DWORD *)(v20 + 16 * v6);
  }
  else
  {
    v20 = *(_QWORD *)(a1 + 16);
    v21 = *(_DWORD *)(v20 + 16 * v6);
    *(_DWORD *)(a1 + 36) = v21 & 0x7FFFFFFF;
  }
  v23 = 16 * v6;
  *(_DWORD *)(v20 + v23) = v21 | 0x80000000;
  v24 = *(_QWORD *)(a1 + 8);
  *(_DWORD *)(*(_QWORD *)(a1 + 16) + v23) = *(_DWORD *)(*(_QWORD *)(a1 + 16) + 16 * v6) & 0x80000000 | *(_DWORD *)(v24 + 4 * a2);
  *(_QWORD *)(*(_QWORD *)(a1 + 16) + 16 * v6 + 8) = *a4;
  *(_DWORD *)(v24 + 4 * a2) = v6;
  ++*(_DWORD *)(a1 + 28);
  return v6;
}

void sub_22534C984(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  re::HashSetBase<unsigned long long,unsigned long long,re::internal::ValueAsKey<unsigned long long>,re::PrecalculatedHash,re::EqualTo<unsigned long long>,false,false>::deinit(&a9);
  _Unwind_Resume(a1);
}

void re::HashSetBase<unsigned long long,unsigned long long,re::internal::ValueAsKey<unsigned long long>,re::PrecalculatedHash,re::EqualTo<unsigned long long>,false,false>::init(uint64_t a1, uint64_t a2, signed int a3)
{
  unint64_t v4;
  unsigned int *v5;
  unint64_t v6;
  unsigned int *v7;
  unsigned int *v8;
  signed int v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  char *v14;

  v4 = 245;
  v5 = (unsigned int *)&re::internal::PrimeHelper::s_primes;
  do
  {
    v6 = v4 >> 1;
    v7 = &v5[v4 >> 1];
    v9 = *v7;
    v8 = v7 + 1;
    v4 += ~(v4 >> 1);
    if (v9 < a3)
      v5 = v8;
    else
      v4 = v6;
  }
  while (v4);
  v10 = *v5;
  *(_QWORD *)a1 = a2;
  v11 = (4 * v10 + 15) & 0x7FFFFFFF0;
  v12 = (char *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 32))(a2, v11 + 16 * v10, 16);
  if (v12)
  {
    v14 = v12;
    *(_QWORD *)(a1 + 8) = v12;
    if ((_DWORD)v10)
      memset_pattern16(v12, &memset_pattern_181, 4 * v10);
    *(_QWORD *)(a1 + 16) = &v14[v11];
    *(_DWORD *)(a1 + 24) = v10;
    *(_DWORD *)(a1 + 40) = 0;
  }
  else
  {
    re::internal::assertLog((re::internal *)4, v13, "assertion failure: '%s' (%s:line %i) Out of memory.", "temp", "init", 600);
    _os_crash();
    __break(1u);
  }
}

void std::__function::__func<re::RenderGraphFile::calculateValidity(void)::$_1,std::allocator<re::RenderGraphFile::calculateValidity(void)::$_1>,void ()(re::IntrospectionBase const&,void const*)>::~__func()
{
  JUMPOUT(0x2276933B8);
}

__n128 std::__function::__func<re::RenderGraphFile::calculateValidity(void)::$_1,std::allocator<re::RenderGraphFile::calculateValidity(void)::$_1>,void ()(re::IntrospectionBase const&,void const*)>::__clone(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x30uLL);
  *(_QWORD *)v2 = &off_24ED37A68;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  result = *(__n128 *)(a1 + 24);
  *(__n128 *)(v2 + 24) = result;
  *((_QWORD *)v2 + 5) = *(_QWORD *)(a1 + 40);
  return result;
}

__n128 std::__function::__func<re::RenderGraphFile::calculateValidity(void)::$_1,std::allocator<re::RenderGraphFile::calculateValidity(void)::$_1>,void ()(re::IntrospectionBase const&,void const*)>::__clone(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;

  *(_QWORD *)a2 = &off_24ED37A68;
  result = *(__n128 *)(a1 + 8);
  v3 = *(_OWORD *)(a1 + 24);
  *(_QWORD *)(a2 + 40) = *(_QWORD *)(a1 + 40);
  *(_OWORD *)(a2 + 24) = v3;
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t std::__function::__func<re::RenderGraphFile::calculateValidity(void)::$_1,std::allocator<re::RenderGraphFile::calculateValidity(void)::$_1>,void ()(re::IntrospectionBase const&,void const*)>::operator()(uint64_t result, uint64_t a2, unint64_t **a3)
{
  uint64_t v4;
  unint64_t *v5;
  const char *v6;
  unint64_t v7;
  uint64_t v8;
  _BYTE *v9;
  unint64_t v10;
  uint64_t v11;
  _BYTE *v12;

  if (*(_DWORD *)(a2 + 16) == 11)
  {
    v4 = result;
    v5 = *a3;
    v6 = *(const char **)(a2 + 48);
    if (!strcmp(v6, "RenderGraphTargetHandle"))
    {
      v7 = *v5;
      if (!re::HashSetBase<unsigned long long,unsigned long long,re::internal::ValueAsKey<unsigned long long>,re::PrecalculatedHash,re::EqualTo<unsigned long long>,false,false>::containsKey(*(_QWORD *)(v4 + 8), *v5))
      {
        v8 = *(_QWORD *)(v4 + 16);
        v9 = *(_BYTE **)v8;
        if (!**(_BYTE **)v8)
        {
          re::DynamicString::append(*(re::DynamicString **)(v8 + 8), "\n", 1uLL);
          v9 = *(_BYTE **)v8;
          v7 = *v5;
        }
        *v9 = 0;
        re::DynamicString::appendf(*(re::DynamicString **)(v4 + 24), "Node (%s) references target named (%llu) which is undefined.", *(const char **)(*(_QWORD *)(*(_QWORD *)(v4 + 32) + 8) + 16), v7);
        v6 = *(const char **)(a2 + 48);
      }
    }
    result = strcmp(v6, "RenderGraphBufferHandle");
    if (!(_DWORD)result)
    {
      v10 = *v5;
      result = re::HashSetBase<unsigned long long,unsigned long long,re::internal::ValueAsKey<unsigned long long>,re::PrecalculatedHash,re::EqualTo<unsigned long long>,false,false>::containsKey(*(_QWORD *)(v4 + 40), *v5);
      if ((result & 1) == 0)
      {
        v11 = *(_QWORD *)(v4 + 16);
        v12 = *(_BYTE **)v11;
        if (!**(_BYTE **)v11)
        {
          re::DynamicString::append(*(re::DynamicString **)(v11 + 8), "\n", 1uLL);
          v12 = *(_BYTE **)v11;
          v10 = *v5;
        }
        *v12 = 0;
        return re::DynamicString::appendf(*(re::DynamicString **)(v4 + 24), "Node (%s) references buffer named (%llu) which is undefined.", *(const char **)(*(_QWORD *)(*(_QWORD *)(v4 + 32) + 8) + 16), v10);
      }
    }
  }
  return result;
}

uint64_t std::__function::__func<re::RenderGraphFile::calculateValidity(void)::$_1,std::allocator<re::RenderGraphFile::calculateValidity(void)::$_1>,void ()(re::IntrospectionBase const&,void const*)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<re::RenderGraphFile::calculateValidity(void)::$_1,std::allocator<re::RenderGraphFile::calculateValidity(void)::$_1>,void ()(re::IntrospectionBase const&,void const*)>::target_type()
{
}

void re::HashSetBase<re::RenderGraphNode *,re::RenderGraphNode *,re::internal::ValueAsKey<re::RenderGraphNode *>,re::Hash<re::RenderGraphNode *>,re::EqualTo<re::RenderGraphNode *>,true,false>::setCapacity(uint64_t a1, unsigned int a2)
{
  uint64_t v4;
  __int128 v5;
  uint64_t v6;
  __int128 v7;
  unsigned int v8;
  __int128 v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  _QWORD *v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  int v20;
  signed int v21;
  _BYTE v22[44];

  v4 = *(_QWORD *)a1;
  if (*(_QWORD *)a1)
  {
    if (a2 && *(_DWORD *)(a1 + 24) != a2 && *(_DWORD *)(a1 + 28) <= a2)
    {
      memset(v22, 0, 36);
      *(_QWORD *)&v22[36] = 0x7FFFFFFFLL;
      re::HashSetBase<re::RenderGraphNode *,re::RenderGraphNode *,re::internal::ValueAsKey<re::RenderGraphNode *>,re::Hash<re::RenderGraphNode *>,re::EqualTo<re::RenderGraphNode *>,true,false>::init((uint64_t)v22, v4, a2);
      v5 = *(_OWORD *)a1;
      *(_QWORD *)a1 = *(_QWORD *)v22;
      v6 = *(_QWORD *)(a1 + 16);
      v7 = *(_OWORD *)&v22[8];
      *(_OWORD *)v22 = v5;
      *(_QWORD *)&v22[16] = v6;
      *(_OWORD *)(a1 + 8) = v7;
      v9 = *(_OWORD *)&v22[24];
      *(_OWORD *)&v22[24] = *(_OWORD *)(a1 + 24);
      v8 = *(_DWORD *)&v22[32];
      *(_OWORD *)(a1 + 24) = v9;
      v10 = v8;
      if (v8)
      {
        v11 = DWORD1(v9);
        v12 = v7;
        v13 = (_QWORD *)(v6 + 16);
        do
        {
          if ((*(_DWORD *)(v13 - 1) & 0x80000000) != 0)
          {
            v14 = *(v13 - 2);
            v15 = *(unsigned int *)(a1 + 24);
            v16 = v14 % v15;
            v17 = *(unsigned int *)(a1 + 36);
            if ((_DWORD)v17 == 0x7FFFFFFF)
            {
              v17 = *(unsigned int *)(a1 + 32);
              v18 = v17;
              if ((_DWORD)v17 == (_DWORD)v15)
              {
                re::HashSetBase<re::RenderGraphNode *,re::RenderGraphNode *,re::internal::ValueAsKey<re::RenderGraphNode *>,re::Hash<re::RenderGraphNode *>,re::EqualTo<re::RenderGraphNode *>,true,false>::setCapacity(a1, (2 * v11));
                v16 = v14 % *(unsigned int *)(a1 + 24);
                v18 = *(_DWORD *)(a1 + 32);
                v12 = *(_QWORD *)(a1 + 8);
              }
              *(_DWORD *)(a1 + 32) = v18 + 1;
              v19 = *(_QWORD *)(a1 + 16);
              v20 = *(_DWORD *)(v19 + 24 * v17 + 8);
            }
            else
            {
              v19 = *(_QWORD *)(a1 + 16);
              v20 = *(_DWORD *)(v19 + 24 * v17 + 8);
              *(_DWORD *)(a1 + 36) = v20 & 0x7FFFFFFF;
            }
            *(_DWORD *)(v19 + 24 * v17 + 8) = v20 | 0x80000000;
            *(_DWORD *)(*(_QWORD *)(a1 + 16) + 24 * v17 + 8) = *(_DWORD *)(*(_QWORD *)(a1 + 16) + 24 * v17 + 8) & 0x80000000 | *(_DWORD *)(v12 + 4 * v16);
            *(_QWORD *)(*(_QWORD *)(a1 + 16) + 24 * v17) = v14;
            *(_QWORD *)(*(_QWORD *)(a1 + 16) + 24 * v17 + 16) = *v13;
            v12 = *(_QWORD *)(a1 + 8);
            *(_DWORD *)(v12 + 4 * v16) = v17;
            v11 = *(_DWORD *)(a1 + 28) + 1;
            *(_DWORD *)(a1 + 28) = v11;
          }
          v13 += 3;
          --v10;
        }
        while (v10);
      }
      re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)v22);
    }
  }
  else
  {
    if (a2)
      v21 = a2;
    else
      v21 = 3;
  }
}

void sub_22534CEA8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit(&a9);
  _Unwind_Resume(a1);
}

void re::HashSetBase<re::RenderGraphNode *,re::RenderGraphNode *,re::internal::ValueAsKey<re::RenderGraphNode *>,re::Hash<re::RenderGraphNode *>,re::EqualTo<re::RenderGraphNode *>,true,false>::init(uint64_t a1, uint64_t a2, signed int a3)
{
  unint64_t v4;
  unsigned int *v5;
  unint64_t v6;
  unsigned int *v7;
  unsigned int *v8;
  signed int v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  char *v14;

  v4 = 245;
  v5 = (unsigned int *)&re::internal::PrimeHelper::s_primes;
  do
  {
    v6 = v4 >> 1;
    v7 = &v5[v4 >> 1];
    v9 = *v7;
    v8 = v7 + 1;
    v4 += ~(v4 >> 1);
    if (v9 < a3)
      v5 = v8;
    else
      v4 = v6;
  }
  while (v4);
  v10 = *v5;
  *(_QWORD *)a1 = a2;
  v11 = (4 * v10 + 15) & 0x7FFFFFFF0;
  v12 = (char *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 32))(a2, v11 + 24 * v10, 16);
  if (v12)
  {
    v14 = v12;
    *(_QWORD *)(a1 + 8) = v12;
    if ((_DWORD)v10)
      memset_pattern16(v12, &memset_pattern_181, 4 * v10);
    *(_QWORD *)(a1 + 16) = &v14[v11];
    *(_DWORD *)(a1 + 24) = v10;
    *(_DWORD *)(a1 + 40) = 0;
  }
  else
  {
    re::internal::assertLog((re::internal *)4, v13, "assertion failure: '%s' (%s:line %i) Out of memory.", "temp", "init", 600);
    _os_crash();
    __break(1u);
  }
}

void re::HashSetBase<re::RenderGraphSpecifyOperationBase *,re::RenderGraphSpecifyOperationBase *,re::internal::ValueAsKey<re::RenderGraphSpecifyOperationBase *>,re::Hash<re::RenderGraphSpecifyOperationBase *>,re::EqualTo<re::RenderGraphSpecifyOperationBase *>,true,false>::setCapacity(uint64_t a1, unsigned int a2)
{
  uint64_t v4;
  __int128 v5;
  uint64_t v6;
  __int128 v7;
  unsigned int v8;
  __int128 v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  _QWORD *v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  int v20;
  signed int v21;
  _BYTE v22[44];

  v4 = *(_QWORD *)a1;
  if (*(_QWORD *)a1)
  {
    if (a2 && *(_DWORD *)(a1 + 24) != a2 && *(_DWORD *)(a1 + 28) <= a2)
    {
      memset(v22, 0, 36);
      *(_QWORD *)&v22[36] = 0x7FFFFFFFLL;
      re::HashSetBase<re::RenderGraphNode *,re::RenderGraphNode *,re::internal::ValueAsKey<re::RenderGraphNode *>,re::Hash<re::RenderGraphNode *>,re::EqualTo<re::RenderGraphNode *>,true,false>::init((uint64_t)v22, v4, a2);
      v5 = *(_OWORD *)a1;
      *(_QWORD *)a1 = *(_QWORD *)v22;
      v6 = *(_QWORD *)(a1 + 16);
      v7 = *(_OWORD *)&v22[8];
      *(_OWORD *)v22 = v5;
      *(_QWORD *)&v22[16] = v6;
      *(_OWORD *)(a1 + 8) = v7;
      v9 = *(_OWORD *)&v22[24];
      *(_OWORD *)&v22[24] = *(_OWORD *)(a1 + 24);
      v8 = *(_DWORD *)&v22[32];
      *(_OWORD *)(a1 + 24) = v9;
      v10 = v8;
      if (v8)
      {
        v11 = DWORD1(v9);
        v12 = v7;
        v13 = (_QWORD *)(v6 + 16);
        do
        {
          if ((*(_DWORD *)(v13 - 1) & 0x80000000) != 0)
          {
            v14 = *(v13 - 2);
            v15 = *(unsigned int *)(a1 + 24);
            v16 = v14 % v15;
            v17 = *(unsigned int *)(a1 + 36);
            if ((_DWORD)v17 == 0x7FFFFFFF)
            {
              v17 = *(unsigned int *)(a1 + 32);
              v18 = v17;
              if ((_DWORD)v17 == (_DWORD)v15)
              {
                re::HashSetBase<re::RenderGraphSpecifyOperationBase *,re::RenderGraphSpecifyOperationBase *,re::internal::ValueAsKey<re::RenderGraphSpecifyOperationBase *>,re::Hash<re::RenderGraphSpecifyOperationBase *>,re::EqualTo<re::RenderGraphSpecifyOperationBase *>,true,false>::setCapacity(a1, (2 * v11));
                v16 = v14 % *(unsigned int *)(a1 + 24);
                v18 = *(_DWORD *)(a1 + 32);
                v12 = *(_QWORD *)(a1 + 8);
              }
              *(_DWORD *)(a1 + 32) = v18 + 1;
              v19 = *(_QWORD *)(a1 + 16);
              v20 = *(_DWORD *)(v19 + 24 * v17 + 8);
            }
            else
            {
              v19 = *(_QWORD *)(a1 + 16);
              v20 = *(_DWORD *)(v19 + 24 * v17 + 8);
              *(_DWORD *)(a1 + 36) = v20 & 0x7FFFFFFF;
            }
            *(_DWORD *)(v19 + 24 * v17 + 8) = v20 | 0x80000000;
            *(_DWORD *)(*(_QWORD *)(a1 + 16) + 24 * v17 + 8) = *(_DWORD *)(*(_QWORD *)(a1 + 16) + 24 * v17 + 8) & 0x80000000 | *(_DWORD *)(v12 + 4 * v16);
            *(_QWORD *)(*(_QWORD *)(a1 + 16) + 24 * v17) = v14;
            *(_QWORD *)(*(_QWORD *)(a1 + 16) + 24 * v17 + 16) = *v13;
            v12 = *(_QWORD *)(a1 + 8);
            *(_DWORD *)(v12 + 4 * v16) = v17;
            v11 = *(_DWORD *)(a1 + 28) + 1;
            *(_DWORD *)(a1 + 28) = v11;
          }
          v13 += 3;
          --v10;
        }
        while (v10);
      }
      re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)v22);
    }
  }
  else
  {
    if (a2)
      v21 = a2;
    else
      v21 = 3;
  }
}

void sub_22534D1C0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit(&a9);
  _Unwind_Resume(a1);
}

_QWORD *re::DynamicArray<re::RenderGraphDataStoreConnection>::growCapacity(_QWORD *this, unint64_t a2)
{
  unint64_t v2;
  unint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  BOOL v6;
  unint64_t v7;

  v2 = this[1];
  if (v2 < a2)
  {
    v3 = a2;
    v4 = this;
    if (*this)
    {
      v5 = 2 * v2;
      v6 = v2 == 0;
      v7 = 8;
      if (!v6)
        v7 = v5;
      if (v7 > a2)
        a2 = v7;
      return re::DynamicArray<re::RenderGraphDataStoreConnection>::setCapacity(this, a2);
    }
    else
    {
      this = re::DynamicArray<re::RenderGraphDataStoreConnection>::setCapacity(v4, v3);
      ++*((_DWORD *)v4 + 6);
    }
  }
  return this;
}

_QWORD *re::DynamicArray<re::RenderGraphDataStoreConnection>::setCapacity(_QWORD *result, unint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  __int128 v26;

  v3 = result[1];
  if (v3 != a2)
  {
    v5 = result;
    if (result[2] <= a2)
    {
      result = (_QWORD *)*result;
      if (!*v5)
      {
        result = (_QWORD *)re::DynamicArray<re::RenderGraphDataStoreConnection>::setCapacity(v5, a2);
        ++*((_DWORD *)v5 + 6);
        return result;
      }
      if (a2)
      {
        if (is_mul_ok(a2, 0x88uLL))
        {
          v2 = 136 * a2;
          result = (_QWORD *)(*(uint64_t (**)(_QWORD *, unint64_t, uint64_t))(*result + 32))(result, 136 * a2, 8);
          if (result)
          {
            v7 = result;
            if (!v5[1])
              goto LABEL_20;
            goto LABEL_11;
          }
        }
        else
        {
          re::internal::assertLog((re::internal *)6, a2, "assertion failure: '%s' (%s:line %i) Size overflow in DynamicArray<T>::setCapacity(). Element size = %zu, capacity = %zu", "!overflow", "setCapacity", 615, 136, a2);
          _os_crash();
          __break(1u);
        }
        re::internal::assertLog((re::internal *)6, v6, "assertion failure: '%s' (%s:line %i) DynamicArray<T> is out of memory (tried to allocate %zu bytes from allocator '%s').", "newData", "setCapacity", 619, v2, *(_QWORD *)(*v5 + 8));
        result = (_QWORD *)_os_crash();
        __break(1u);
        return result;
      }
      v7 = 0;
      if (!v3)
      {
LABEL_20:
        v5[4] = v7;
        v5[1] = a2;
        return result;
      }
LABEL_11:
      v8 = v5[4];
      v9 = v5[2];
      if (v9)
      {
        v10 = 0;
        v11 = 136 * v9;
        do
        {
          v12 = &v7[v10 / 8];
          v13 = v8 + v10;
          v12[4] = 0;
          v12[1] = 0;
          v12[2] = 0;
          *v12 = 0;
          *((_DWORD *)v12 + 6) = 0;
          v14 = *(_QWORD *)(v8 + v10 + 8);
          *v12 = *(_QWORD *)(v8 + v10);
          v12[1] = v14;
          *(_QWORD *)v13 = 0;
          *(_QWORD *)(v13 + 8) = 0;
          v15 = v7[v10 / 8 + 2];
          v12[2] = *(_QWORD *)(v8 + v10 + 16);
          *(_QWORD *)(v13 + 16) = v15;
          v16 = v7[v10 / 8 + 4];
          v12[4] = *(_QWORD *)(v8 + v10 + 32);
          *(_QWORD *)(v13 + 32) = v16;
          *(_DWORD *)(v13 + 24) = *(_DWORD *)(v8 + v10 + 24) + 1;
          *(_OWORD *)(v12 + 5) = 0u;
          *(_OWORD *)(v12 + 7) = 0u;
          v17 = (_QWORD *)(v8 + v10 + 40);
          v12[5] = *v17;
          *v17 = 0;
          v12[8] = *(_QWORD *)(v8 + v10 + 64);
          *(_QWORD *)(v13 + 64) = 0;
          v19 = v7[v10 / 8 + 6];
          v18 = v7[v10 / 8 + 7];
          v20 = *(_QWORD *)(v8 + v10 + 56);
          v12[6] = *(_QWORD *)(v8 + v10 + 48);
          v12[7] = v20;
          LODWORD(v20) = LODWORD(v7[v10 / 8 + 3]) + 1;
          *(_QWORD *)(v13 + 48) = v19;
          *(_QWORD *)(v13 + 56) = v18;
          v12[13] = 0;
          *((_DWORD *)v12 + 24) = 0;
          v12[10] = 0;
          v12[11] = 0;
          v12[9] = 0;
          v21 = (uint64_t *)(v8 + v10 + 72);
          v22 = *v21;
          *((_DWORD *)v12 + 6) = v20;
          v23 = *(_QWORD *)(v8 + v10 + 80);
          v12[9] = v22;
          *v21 = 0;
          v12[10] = v23;
          *(_QWORD *)(v13 + 80) = 0;
          v24 = v7[v10 / 8 + 11];
          v12[11] = *(_QWORD *)(v8 + v10 + 88);
          *(_QWORD *)(v13 + 88) = v24;
          v25 = v7[v10 / 8 + 13];
          v12[13] = *(_QWORD *)(v8 + v10 + 104);
          *(_QWORD *)(v13 + 104) = v25;
          *(_DWORD *)(v13 + 96) = *(_DWORD *)(v8 + v10 + 96) + 1;
          *((_DWORD *)v12 + 24) = LODWORD(v7[v10 / 8 + 12]) + 1;
          v26 = *(_OWORD *)(v8 + v10 + 112);
          v12[16] = *(_QWORD *)(v8 + v10 + 128);
          *((_OWORD *)v12 + 7) = v26;
          re::DynamicArray<re::DynamicString>::deinit((uint64_t)v21);
          if (*v17)
          {
            if ((*(_BYTE *)(v13 + 48) & 1) != 0)
              (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)*v17 + 40))(*v17, *(_QWORD *)(v13 + 56));
            *(_OWORD *)v17 = 0u;
            *(_OWORD *)(v8 + v10 + 56) = 0u;
          }
          re::DynamicArray<re::DynamicString>::deinit(v8 + v10);
          v10 += 136;
        }
        while (v11 != v10);
        v8 = v5[4];
      }
      result = (_QWORD *)(*(uint64_t (**)(_QWORD, uint64_t))(*(_QWORD *)*v5 + 40))(*v5, v8);
      goto LABEL_20;
    }
  }
  return result;
}

void re::HashBrown<re::WeakStringID,re::RenderGraphDataNodeConnection const*,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,void,false>::internalAdd(_anonymous_namespace_ *a1, unint64_t *a2, uint64_t *a3)
{
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  _BOOL8 v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t *v18;
  uint64_t v19;
  unint64_t v20;

  if (!*((_QWORD *)a1 + 7))
  {
  }
  v6 = *((_QWORD *)a1 + 4);
  if (!v6 || (v7 = *((_QWORD *)a1 + 2), v7 > 8 * v6))
  {
    re::HashBrown<re::WeakStringID,re::RenderGraphDataNodeConnection const*,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,void,false>::resize((uint64_t *)a1);
    v7 = *((_QWORD *)a1 + 2);
  }
  v8 = 0xBF58476D1CE4E5B9 * (*a2 ^ (*a2 >> 30));
  v9 = (0x94D049BB133111EBLL * (v8 ^ (v8 >> 27))) ^ ((0x94D049BB133111EBLL * (v8 ^ (v8 >> 27))) >> 31);
  v10 = v7 >> 4;
  v11 = v9 % (v7 >> 4);
  v12 = *(_QWORD *)a1;
  v13 = __clz(__rbit64(*(_QWORD *)&vqtbl1_s8((int8x16_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8((uint8x16_t)vandq_s8(vcltzq_s8(*(int8x16_t *)(*(_QWORD *)a1 + 16 * v11)), (int8x16_t)xmmword_2260EE390)))), (int8x8_t)0x3830282018100800)));
  if (v13 >= 0x40)
  {
    do
    {
      if (v11 + 1 == v10)
        v11 = 0;
      else
        ++v11;
      v13 = __clz(__rbit64(*(_QWORD *)&vqtbl1_s8((int8x16_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8((uint8x16_t)vandq_s8(vcltzq_s8(*(int8x16_t *)(v12 + 16 * v11)), (int8x16_t)xmmword_2260EE390)))), (int8x8_t)0x3830282018100800)));
    }
    while (v13 > 0x3F);
  }
  v14 = v12 + 16 * v11;
  v15 = *(unsigned __int8 *)(v14 + v13) == 255;
  *(_BYTE *)(v14 + v13) = v9 & 0x7F;
  v16 = *a2;
  v17 = *a3;
  v18 = (unint64_t *)(*((_QWORD *)a1 + 1) + 16 * (v13 + 16 * v11));
  *v18 = *a2;
  v18[1] = v17;
  v19 = *((_QWORD *)a1 + 4) - v15;
  ++*((_QWORD *)a1 + 3);
  *((_QWORD *)a1 + 4) = v19;
  v20 = 0x94D049BB133111EBLL
      * ((0xBF58476D1CE4E5B9 * (v16 ^ (v16 >> 30))) ^ ((0xBF58476D1CE4E5B9 * (v16 ^ (v16 >> 30))) >> 27));
  *((_QWORD *)a1 + 5) ^= (v20 >> 31) ^ v20;
}

void re::HashBrown<re::WeakStringID,re::RenderGraphDataNodeConnection const*,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,void,false>::resize(uint64_t *a1)
{
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unsigned __int16 v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  __int128 v28;
  _BYTE v29[48];

  v3 = a1[2];
  v2 = a1[3];
  v4 = (((unint64_t)(151 * (v2 + 1)) >> 7) + 15) & 0x3FFFFFFFFFFFFF0;
  v5 = ((3 * v3) >> 1) & 0x1FFFFFFFFFFFFFFLL;
  if (v4 > (192 * v3) >> 7)
    v5 = (((unint64_t)(151 * (v2 + 1)) >> 7) + 15) & 0x3FFFFFFFFFFFFF0;
  v6 = (v5 << 7) / 0x97;
  v7 = a1[7];
  v28 = 0u;
  *(_OWORD *)v29 = 0u;
  if (v4 <= v3)
    v8 = v2 + 1;
  else
    v8 = v6;
  memset(&v29[16], 0, 32);
  re::HashBrown<re::ecs2::Scene const*,unsigned long,re::Hash<re::ecs2::Scene const*>,re::EqualTo<re::ecs2::Scene const*>,void,false>::init(&v28, v7, v8);
  v9 = a1[2];
  v10 = *a1;
  if (v9 >= 0x10)
  {
    v11 = 0;
    v12 = v9 >> 4;
    while (1)
    {
      v13 = vqtbl1_s8((int8x16_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8((uint8x16_t)vandq_s8(vcltzq_s8(*(int8x16_t *)(v10 + v11)), (int8x16_t)xmmword_2260EE390)))), (int8x8_t)0x3830282018100800).u16[0];
      v14 = (unsigned __int16)~v13;
      if (v13 != 0xFFFF)
        break;
      v11 += 16;
      if (!--v12)
        goto LABEL_12;
    }
    v15 = __clz(__rbit64(v14)) + v11;
    if (v15 != -1)
    {
      do
      {
        re::HashBrown<re::WeakStringID,re::RenderGraphDataNodeConnection const*,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,void,false>::internalAdd(&v28, a1[1] + 16 * v15, a1[1] + 16 * v15 + 8);
        v23 = v15 >> 4;
        v9 = a1[2];
        if (v15 >> 4 >= v9 >> 4)
          break;
        v24 = __clz(__rbit64((-2 << (v15 & 0xF)) & v14));
        if (v24 >= 0x40)
        {
          if (v23 == (v9 >> 4) - 1)
            break;
          v10 = *a1;
          v25 = 16 * v23 + 16;
          v26 = ~v23 + (v9 >> 4);
          while (1)
          {
            v14 = (unsigned __int16)~*(_QWORD *)&vqtbl1_s8((int8x16_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8((uint8x16_t)vandq_s8(vcltzq_s8(*(int8x16_t *)(v10 + v25)), (int8x16_t)xmmword_2260EE390)))), (int8x8_t)0x3830282018100800);
            v27 = __clz(__rbit64(v14));
            if (v27 <= 0x3F)
              break;
            v25 += 16;
            if (!--v26)
              goto LABEL_12;
          }
          v15 = v27 + v25;
        }
        else
        {
          v15 = v24 + (v15 & 0xFFFFFFFFFFFFFFF0);
        }
      }
      while (v15 != -1);
      v10 = *a1;
    }
  }
LABEL_12:
  v16 = *(_QWORD *)&v29[40];
  *(_QWORD *)&v29[40] = a1[7];
  v17 = a1[1];
  v18 = v28;
  v19 = *(_OWORD *)v29;
  *(_QWORD *)&v28 = v10;
  *((_QWORD *)&v28 + 1) = v17;
  *(_QWORD *)v29 = v9;
  v20 = *(_OWORD *)&v29[16];
  v21 = *(_OWORD *)(a1 + 5);
  a1[6] = *(_QWORD *)&v29[32];
  a1[7] = v16;
  *(_OWORD *)&v29[24] = v21;
  v22 = *(_OWORD *)(a1 + 3);
  *(_OWORD *)a1 = v18;
  *((_OWORD *)a1 + 1) = v19;
  *((_OWORD *)a1 + 2) = v20;
  *(_OWORD *)&v29[8] = v22;
  re::HashBrown<re::WeakStringID,unsigned char,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<unsigned char>,false>::deinit((uint64_t)&v28);
}

void sub_22534D908(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  re::HashBrown<re::WeakStringID,unsigned char,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<unsigned char>,false>::deinit((uint64_t)va);
  _Unwind_Resume(a1);
}

void re::HashTable<unsigned long,re::RenderGraphFile::ConnectionCacheInfo,re::Hash<unsigned long>,re::EqualTo<unsigned long>,true,false>::setCapacity(uint64_t a1, unsigned int a2)
{
  uint64_t v4;
  __int128 v5;
  uint64_t v6;
  __int128 v7;
  unsigned int v8;
  __int128 v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t *v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unsigned int v18;
  unsigned int v19;
  uint64_t v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  uint64_t v25;
  uint64_t v26;
  signed int v27;
  _BYTE v28[44];

  v4 = *(_QWORD *)a1;
  if (*(_QWORD *)a1)
  {
    if (a2 && *(_DWORD *)(a1 + 24) != a2 && *(_DWORD *)(a1 + 28) <= a2)
    {
      memset(v28, 0, 36);
      *(_QWORD *)&v28[36] = 0x7FFFFFFFLL;
      re::HashTable<unsigned long,re::RenderGraphFile::ConnectionCacheInfo,re::Hash<unsigned long>,re::EqualTo<unsigned long>,true,false>::init((uint64_t)v28, v4, a2);
      v5 = *(_OWORD *)a1;
      *(_QWORD *)a1 = *(_QWORD *)v28;
      v6 = *(_QWORD *)(a1 + 16);
      v7 = *(_OWORD *)&v28[8];
      *(_OWORD *)v28 = v5;
      *(_QWORD *)&v28[16] = v6;
      *(_OWORD *)(a1 + 8) = v7;
      v9 = *(_OWORD *)&v28[24];
      *(_OWORD *)&v28[24] = *(_OWORD *)(a1 + 24);
      v8 = *(_DWORD *)&v28[32];
      *(_OWORD *)(a1 + 24) = v9;
      if (v8)
      {
        v10 = 0;
        v11 = DWORD1(v9);
        v12 = v7;
        v13 = 88 * v8;
        do
        {
          v14 = (unint64_t *)(v6 + v10);
          if ((*(_DWORD *)(v6 + v10 + 8) & 0x80000000) != 0)
          {
            v15 = *v14;
            v16 = *(unsigned int *)(a1 + 24);
            v17 = *v14 % v16;
            v18 = *(_DWORD *)(a1 + 36);
            if (v18 == 0x7FFFFFFF)
            {
              v18 = *(_DWORD *)(a1 + 32);
              v19 = v18;
              if (v18 == (_DWORD)v16)
              {
                re::HashTable<unsigned long,re::RenderGraphFile::ConnectionCacheInfo,re::Hash<unsigned long>,re::EqualTo<unsigned long>,true,false>::setCapacity(a1, (2 * v11));
                v17 = v15 % *(unsigned int *)(a1 + 24);
                v19 = *(_DWORD *)(a1 + 32);
                v12 = *(_QWORD *)(a1 + 8);
              }
              *(_DWORD *)(a1 + 32) = v19 + 1;
              v20 = *(_QWORD *)(a1 + 16);
              v21 = *(_DWORD *)(v20 + 88 * v18 + 8);
            }
            else
            {
              v20 = *(_QWORD *)(a1 + 16);
              v21 = *(_DWORD *)(v20 + 88 * v18 + 8);
              *(_DWORD *)(a1 + 36) = v21 & 0x7FFFFFFF;
            }
            *(_DWORD *)(v20 + 88 * v18 + 8) = v21 | 0x80000000;
            v22 = *(_QWORD *)(a1 + 16) + 88 * v18;
            *(_DWORD *)(v22 + 8) = *(_DWORD *)(v22 + 8) & 0x80000000 | *(_DWORD *)(v12 + 4 * v17);
            *(_QWORD *)(*(_QWORD *)(a1 + 16) + 88 * v18) = v15;
            *(_QWORD *)(*(_QWORD *)(a1 + 16) + 88 * v18 + 16) = v14[2];
            v23 = *(_QWORD *)(a1 + 16) + 88 * v18;
            v24 = (_QWORD *)(v6 + v10);
            *(_QWORD *)(v23 + 24) = v14[3];
            *(_QWORD *)(v23 + 32) = 0;
            *(_QWORD *)(v23 + 40) = 0;
            *(_QWORD *)(v23 + 48) = 0;
            *(_QWORD *)(v23 + 32) = *(_QWORD *)(v6 + v10 + 32);
            v24[4] = 0;
            *(_QWORD *)(v23 + 40) = *(_QWORD *)(v6 + v10 + 40);
            v24[5] = 0;
            v25 = *(_QWORD *)(v23 + 48);
            *(_QWORD *)(v23 + 48) = *(_QWORD *)(v6 + v10 + 48);
            v24[6] = v25;
            *(_QWORD *)(v23 + 56) = 0;
            *(_QWORD *)(v23 + 64) = 0;
            *(_QWORD *)(v23 + 72) = 0;
            *(_QWORD *)(v23 + 56) = *(_QWORD *)(v6 + v10 + 56);
            v24[7] = 0;
            *(_QWORD *)(v23 + 64) = *(_QWORD *)(v6 + v10 + 64);
            v24[8] = 0;
            v26 = *(_QWORD *)(v23 + 72);
            *(_QWORD *)(v23 + 72) = *(_QWORD *)(v6 + v10 + 72);
            v24[9] = v26;
            *(_BYTE *)(v23 + 80) = *(_BYTE *)(v6 + v10 + 80);
            v12 = *(_QWORD *)(a1 + 8);
            *(_DWORD *)(v12 + 4 * v17) = v18;
            v11 = *(_DWORD *)(a1 + 28) + 1;
            *(_DWORD *)(a1 + 28) = v11;
          }
          v10 += 88;
        }
        while (v13 != v10);
      }
      re::HashTable<unsigned long,re::RenderGraphFile::ConnectionCacheInfo,re::Hash<unsigned long>,re::EqualTo<unsigned long>,true,false>::deinit((uint64_t *)v28);
    }
  }
  else
  {
    if (a2)
      v27 = a2;
    else
      v27 = 3;
  }
}

void sub_22534DBA0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  re::HashTable<unsigned long,re::RenderGraphFile::ConnectionCacheInfo,re::Hash<unsigned long>,re::EqualTo<unsigned long>,true,false>::deinit(&a9);
  _Unwind_Resume(a1);
}

void re::HashTable<unsigned long,re::RenderGraphFile::ConnectionCacheInfo,re::Hash<unsigned long>,re::EqualTo<unsigned long>,true,false>::init(uint64_t a1, uint64_t a2, signed int a3)
{
  unint64_t v4;
  unsigned int *v5;
  unint64_t v6;
  unsigned int *v7;
  unsigned int *v8;
  signed int v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  char *v14;

  v4 = 245;
  v5 = (unsigned int *)&re::internal::PrimeHelper::s_primes;
  do
  {
    v6 = v4 >> 1;
    v7 = &v5[v4 >> 1];
    v9 = *v7;
    v8 = v7 + 1;
    v4 += ~(v4 >> 1);
    if (v9 < a3)
      v5 = v8;
    else
      v4 = v6;
  }
  while (v4);
  v10 = *v5;
  *(_QWORD *)a1 = a2;
  v11 = (4 * v10 + 15) & 0x7FFFFFFF0;
  v12 = (char *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 32))(a2, v11 + 88 * v10, 16);
  if (v12)
  {
    v14 = v12;
    *(_QWORD *)(a1 + 8) = v12;
    if ((_DWORD)v10)
      memset_pattern16(v12, &memset_pattern_181, 4 * v10);
    *(_QWORD *)(a1 + 16) = &v14[v11];
    *(_DWORD *)(a1 + 24) = v10;
    *(_DWORD *)(a1 + 40) = 0;
  }
  else
  {
    re::internal::assertLog((re::internal *)4, v13, "assertion failure: '%s' (%s:line %i) Out of memory.", "temp", "init", 575);
    _os_crash();
    __break(1u);
  }
}

void re::HashTable<unsigned long,re::RenderGraphData *,re::PrecalculatedHash,re::EqualTo<unsigned long>,false,false>::setCapacity(uint64_t a1, unsigned int a2)
{
  uint64_t v4;
  __int128 v5;
  uint64_t v6;
  unsigned int v7;
  __int128 v8;
  unsigned int v9;
  uint64_t v10;
  unint64_t v11;
  signed int v12;
  _BYTE v13[44];

  v4 = *(_QWORD *)a1;
  if (*(_QWORD *)a1)
  {
    if (a2 && *(_DWORD *)(a1 + 24) != a2 && *(_DWORD *)(a1 + 28) <= a2)
    {
      memset(v13, 0, 36);
      *(_QWORD *)&v13[36] = 0x7FFFFFFFLL;
      re::HashTable<unsigned long,re::RenderGraphData *,re::PrecalculatedHash,re::EqualTo<unsigned long>,false,false>::init((uint64_t)v13, v4, a2);
      v5 = *(_OWORD *)v13;
      *(_OWORD *)v13 = *(_OWORD *)a1;
      *(_OWORD *)a1 = v5;
      v6 = *(_QWORD *)&v13[16];
      *(_QWORD *)&v13[16] = *(_QWORD *)(a1 + 16);
      *(_QWORD *)(a1 + 16) = v6;
      v8 = *(_OWORD *)&v13[24];
      *(_OWORD *)&v13[24] = *(_OWORD *)(a1 + 24);
      v7 = *(_DWORD *)&v13[32];
      *(_OWORD *)(a1 + 24) = v8;
      v9 = v7;
      if (v7)
      {
        v10 = 0;
        v11 = 0;
        do
        {
          if ((*(_DWORD *)(*(_QWORD *)&v13[16] + v10) & 0x80000000) != 0)
          {
            re::HashTable<unsigned long,re::RenderGraphData *,re::PrecalculatedHash,re::EqualTo<unsigned long>,false,false>::addAsMove(a1, *(_QWORD *)(*(_QWORD *)&v13[16] + v10 + 8) % (unint64_t)*(unsigned int *)(a1 + 24), *(_QWORD *)(*(_QWORD *)&v13[16] + v10 + 8), (_QWORD *)(*(_QWORD *)&v13[16] + v10 + 8), (_QWORD *)(*(_QWORD *)&v13[16] + v10 + 16));
            v9 = *(_DWORD *)&v13[32];
          }
          ++v11;
          v10 += 24;
        }
        while (v11 < v9);
      }
      re::HashTable<re::internal::SerializeFuncKey,BOOL (*)(re::Serializer<re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL),re::internal::HashSerializeFuncKey,re::EqualTo<re::internal::SerializeFuncKey>,false,true>::deinit((uint64_t *)v13);
    }
  }
  else
  {
    if (a2)
      v12 = a2;
    else
      v12 = 3;
  }
}

void sub_22534DDF0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  re::HashTable<re::internal::SerializeFuncKey,BOOL (*)(re::Serializer<re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL),re::internal::HashSerializeFuncKey,re::EqualTo<re::internal::SerializeFuncKey>,false,true>::deinit(&a9);
  _Unwind_Resume(a1);
}

uint64_t re::HashTable<unsigned long,re::RenderGraphData *,re::PrecalculatedHash,re::EqualTo<unsigned long>,false,false>::addAsMove(uint64_t a1, unsigned int a2, unint64_t a3, _QWORD *a4, _QWORD *a5)
{
  uint64_t v8;
  int v9;
  uint64_t v11;
  int v12;
  uint64_t v13;

  v8 = *(unsigned int *)(a1 + 36);
  if ((_DWORD)v8 == 0x7FFFFFFF)
  {
    v8 = *(unsigned int *)(a1 + 32);
    v9 = v8;
    if ((_DWORD)v8 == *(_DWORD *)(a1 + 24))
    {
      re::HashTable<unsigned long,re::RenderGraphData *,re::PrecalculatedHash,re::EqualTo<unsigned long>,false,false>::setCapacity(a1, (2 * *(_DWORD *)(a1 + 28)));
      a2 = a3 % *(unsigned int *)(a1 + 24);
      v9 = *(_DWORD *)(a1 + 32);
    }
    *(_DWORD *)(a1 + 32) = v9 + 1;
    v11 = *(_QWORD *)(a1 + 16);
    v12 = *(_DWORD *)(v11 + 24 * v8);
  }
  else
  {
    v11 = *(_QWORD *)(a1 + 16);
    v12 = *(_DWORD *)(v11 + 24 * v8);
    *(_DWORD *)(a1 + 36) = v12 & 0x7FFFFFFF;
  }
  v13 = 24 * v8;
  *(_DWORD *)(v11 + v13) = v12 | 0x80000000;
  *(_DWORD *)(*(_QWORD *)(a1 + 16) + v13) = *(_DWORD *)(*(_QWORD *)(a1 + 16) + 24 * v8) & 0x80000000 | *(_DWORD *)(*(_QWORD *)(a1 + 8) + 4 * a2);
  *(_QWORD *)(*(_QWORD *)(a1 + 16) + 24 * v8 + 8) = *a4;
  *(_QWORD *)(*(_QWORD *)(a1 + 16) + 24 * v8 + 16) = *a5;
  *(_DWORD *)(*(_QWORD *)(a1 + 8) + 4 * a2) = v8;
  ++*(_DWORD *)(a1 + 28);
  return v8;
}

void re::HashTable<unsigned long,re::RenderGraphData *,re::PrecalculatedHash,re::EqualTo<unsigned long>,false,false>::init(uint64_t a1, uint64_t a2, signed int a3)
{
  unint64_t v4;
  unsigned int *v5;
  unint64_t v6;
  unsigned int *v7;
  unsigned int *v8;
  signed int v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  char *v14;

  v4 = 245;
  v5 = (unsigned int *)&re::internal::PrimeHelper::s_primes;
  do
  {
    v6 = v4 >> 1;
    v7 = &v5[v4 >> 1];
    v9 = *v7;
    v8 = v7 + 1;
    v4 += ~(v4 >> 1);
    if (v9 < a3)
      v5 = v8;
    else
      v4 = v6;
  }
  while (v4);
  v10 = *v5;
  *(_QWORD *)a1 = a2;
  v11 = (4 * v10 + 15) & 0x7FFFFFFF0;
  v12 = (char *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 32))(a2, v11 + 24 * v10, 16);
  if (v12)
  {
    v14 = v12;
    *(_QWORD *)(a1 + 8) = v12;
    if ((_DWORD)v10)
      memset_pattern16(v12, &memset_pattern_181, 4 * v10);
    *(_QWORD *)(a1 + 16) = &v14[v11];
    *(_DWORD *)(a1 + 24) = v10;
    *(_DWORD *)(a1 + 40) = 0;
  }
  else
  {
    re::internal::assertLog((re::internal *)4, v13, "assertion failure: '%s' (%s:line %i) Out of memory.", "temp", "init", 575);
    _os_crash();
    __break(1u);
  }
}

uint64_t re::DynamicArray<re::NodePatchData>::deinit(uint64_t a1)
{
  uint64_t result;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;

  result = *(_QWORD *)a1;
  if (result)
  {
    v3 = *(_QWORD *)(a1 + 32);
    if (v3)
    {
      v4 = *(_QWORD *)(a1 + 16);
      if (v4)
      {
        v5 = 56 * v4;
        v6 = (_QWORD *)(v3 + 24);
        do
        {
          if (*v6)
          {
            if (v6[1])
            {
              (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)*v6 + 40))(*v6, v6[2]);
              v6[1] = 0;
              v6[2] = 0;
            }
            *v6 = 0;
          }
          v7 = *(v6 - 3);
          if (v7)
          {
            if (*(v6 - 2))
            {
              (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v7 + 40))(v7, *(v6 - 1));
              *(v6 - 2) = 0;
              *(v6 - 1) = 0;
            }
            *(v6 - 3) = 0;
          }
          v6 += 7;
          v5 -= 56;
        }
        while (v5);
        result = *(_QWORD *)a1;
        v3 = *(_QWORD *)(a1 + 32);
      }
      result = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)result + 40))(result, v3);
    }
    *(_QWORD *)(a1 + 32) = 0;
    *(_QWORD *)(a1 + 8) = 0;
    *(_QWORD *)(a1 + 16) = 0;
    *(_QWORD *)a1 = 0;
    ++*(_DWORD *)(a1 + 24);
  }
  return result;
}

_QWORD *re::DynamicArray<re::NodePatchData>::setCapacity(_QWORD *result, unint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  _QWORD *v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  v3 = result[1];
  if (v3 != a2)
  {
    v5 = result;
    if (result[2] <= a2)
    {
      result = (_QWORD *)*result;
      if (!*v5)
      {
        result = (_QWORD *)re::DynamicArray<re::NodePatchData>::setCapacity(v5, a2);
        ++*((_DWORD *)v5 + 6);
        return result;
      }
      if (a2)
      {
        if (is_mul_ok(a2, 0x38uLL))
        {
          v2 = 56 * a2;
          result = (_QWORD *)(*(uint64_t (**)(_QWORD *, unint64_t, uint64_t))(*result + 32))(result, 56 * a2, 8);
          if (result)
          {
            v7 = result;
            if (!v5[1])
              goto LABEL_22;
            goto LABEL_11;
          }
        }
        else
        {
          re::internal::assertLog((re::internal *)6, a2, "assertion failure: '%s' (%s:line %i) Size overflow in DynamicArray<T>::setCapacity(). Element size = %zu, capacity = %zu", "!overflow", "setCapacity", 615, 56, a2);
          _os_crash();
          __break(1u);
        }
        re::internal::assertLog((re::internal *)6, v6, "assertion failure: '%s' (%s:line %i) DynamicArray<T> is out of memory (tried to allocate %zu bytes from allocator '%s').", "newData", "setCapacity", 619, v2, *(_QWORD *)(*v5 + 8));
        result = (_QWORD *)_os_crash();
        __break(1u);
        return result;
      }
      v7 = 0;
      if (!v3)
      {
LABEL_22:
        v5[4] = v7;
        v5[1] = a2;
        return result;
      }
LABEL_11:
      v8 = v5[4];
      v9 = v5[2];
      if (v9)
      {
        v10 = 56 * v9;
        v11 = (_QWORD *)(v8 + 24);
        v12 = v7;
        do
        {
          *v12 = 0;
          v12[1] = 0;
          v12[2] = 0;
          v14 = v11 - 2;
          v13 = *(v11 - 2);
          *v12 = *(v11 - 3);
          *(v11 - 3) = 0;
          v12[1] = v13;
          *(v11 - 2) = 0;
          v15 = v12[2];
          v12[2] = *(v11 - 1);
          *(v11 - 1) = v15;
          v12[3] = 0;
          v12[4] = 0;
          v12[5] = 0;
          v16 = v11[1];
          v12[3] = *v11;
          v12[4] = v16;
          *v11 = 0;
          v11[1] = 0;
          v17 = v12[5];
          v12[5] = v11[2];
          v11[2] = v17;
          v12[6] = v11[3];
          if (*v11)
            *v11 = 0;
          v18 = *(v11 - 3);
          if (v18)
          {
            if (*v14)
            {
              (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v18 + 40))(v18, *(v11 - 1));
              *v14 = 0;
              *(v11 - 1) = 0;
            }
            *(v11 - 3) = 0;
          }
          v11 += 7;
          v12 += 7;
          v10 -= 56;
        }
        while (v10);
        v8 = v5[4];
      }
      result = (_QWORD *)(*(uint64_t (**)(_QWORD, uint64_t))(*(_QWORD *)*v5 + 40))(*v5, v8);
      goto LABEL_22;
    }
  }
  return result;
}

void re::HashTable<unsigned long long,re::DynamicArray<re::NodePatchData>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::addAsMove(uint64_t a1, unsigned int a2, unint64_t a3, _QWORD *a4, uint64_t a5)
{
  uint64_t v9;
  int v10;
  int v11;
  signed int v12;
  uint64_t v13;
  BOOL v14;
  __int128 v15;
  uint64_t v16;
  uint64_t v17;
  unsigned int v18;
  __int128 v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  int v23;
  signed int v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  _BYTE v28[44];

  v9 = *(unsigned int *)(a1 + 36);
  if ((_DWORD)v9 == 0x7FFFFFFF)
  {
    v9 = *(unsigned int *)(a1 + 32);
    v10 = v9;
    if ((_DWORD)v9 == *(_DWORD *)(a1 + 24))
    {
      v11 = *(_DWORD *)(a1 + 28);
      v12 = 2 * v11;
      v13 = *(_QWORD *)a1;
      if (*(_QWORD *)a1)
      {
        if (v12)
          v14 = (_DWORD)v9 == v12;
        else
          v14 = 1;
        if (!v14 && (v11 & 0x80000000) == 0)
        {
          memset(v28, 0, 36);
          *(_QWORD *)&v28[36] = 0x7FFFFFFFLL;
          re::HashTable<unsigned long long,re::DynamicArray<re::NodePatchData>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::init((uint64_t)v28, v13, v12);
          v15 = *(_OWORD *)v28;
          *(_OWORD *)v28 = *(_OWORD *)a1;
          *(_OWORD *)a1 = v15;
          v16 = *(_QWORD *)&v28[16];
          v17 = *(_QWORD *)(a1 + 16);
          *(_QWORD *)&v28[16] = v17;
          *(_QWORD *)(a1 + 16) = v16;
          v19 = *(_OWORD *)&v28[24];
          *(_OWORD *)&v28[24] = *(_OWORD *)(a1 + 24);
          v18 = *(_DWORD *)&v28[32];
          *(_OWORD *)(a1 + 24) = v19;
          v20 = v18;
          if (v18)
          {
            v21 = v17 + 16;
            do
            {
              if ((*(_DWORD *)(v21 - 8) & 0x80000000) != 0)
                re::HashTable<unsigned long long,re::DynamicArray<re::NodePatchData>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::addAsMove(a1, *(_QWORD *)(v21 - 16) % (unint64_t)*(unsigned int *)(a1 + 24), *(_QWORD *)(v21 - 16), v21, v21 + 8);
              v21 += 64;
              --v20;
            }
            while (v20);
          }
          re::HashTable<unsigned long long,re::DynamicArray<re::NodePatchData>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::deinit((uint64_t *)v28);
        }
      }
      else
      {
        if (v12)
          v24 = 2 * v11;
        else
          v24 = 3;
      }
      a2 = a3 % *(unsigned int *)(a1 + 24);
      v10 = *(_DWORD *)(a1 + 32);
    }
    *(_DWORD *)(a1 + 32) = v10 + 1;
    v22 = *(_QWORD *)(a1 + 16);
    v23 = *(_DWORD *)(v22 + (v9 << 6) + 8);
  }
  else
  {
    v22 = *(_QWORD *)(a1 + 16);
    v23 = *(_DWORD *)(v22 + (v9 << 6) + 8);
    *(_DWORD *)(a1 + 36) = v23 & 0x7FFFFFFF;
  }
  *(_DWORD *)(v22 + (v9 << 6) + 8) = v23 | 0x80000000;
  *(_DWORD *)(*(_QWORD *)(a1 + 16) + (v9 << 6) + 8) = *(_DWORD *)(*(_QWORD *)(a1 + 16) + (v9 << 6) + 8) & 0x80000000 | *(_DWORD *)(*(_QWORD *)(a1 + 8) + 4 * a2);
  *(_QWORD *)(*(_QWORD *)(a1 + 16) + (v9 << 6)) = a3;
  *(_QWORD *)(*(_QWORD *)(a1 + 16) + (v9 << 6) + 16) = *a4;
  v25 = *(_QWORD *)(a1 + 16) + (v9 << 6);
  *(_QWORD *)(v25 + 56) = 0;
  *(_DWORD *)(v25 + 48) = 0;
  *(_QWORD *)(v25 + 32) = 0;
  *(_QWORD *)(v25 + 40) = 0;
  *(_QWORD *)(v25 + 24) = 0;
  *(_QWORD *)(v25 + 24) = *(_QWORD *)a5;
  *(_QWORD *)a5 = 0;
  *(_QWORD *)(v25 + 32) = *(_QWORD *)(a5 + 8);
  *(_QWORD *)(a5 + 8) = 0;
  v26 = *(_QWORD *)(v25 + 40);
  *(_QWORD *)(v25 + 40) = *(_QWORD *)(a5 + 16);
  *(_QWORD *)(a5 + 16) = v26;
  v27 = *(_QWORD *)(v25 + 56);
  *(_QWORD *)(v25 + 56) = *(_QWORD *)(a5 + 32);
  *(_QWORD *)(a5 + 32) = v27;
  ++*(_DWORD *)(a5 + 24);
  ++*(_DWORD *)(v25 + 48);
  *(_DWORD *)(*(_QWORD *)(a1 + 8) + 4 * a2) = v9;
  ++*(_DWORD *)(a1 + 28);
}

void sub_22534E57C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  re::HashTable<unsigned long long,re::DynamicArray<re::NodePatchData>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::deinit(&a9);
  _Unwind_Resume(a1);
}

void re::HashTable<unsigned long long,re::DynamicArray<re::NodePatchData>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::init(uint64_t a1, uint64_t a2, signed int a3)
{
  unint64_t v4;
  unsigned int *v5;
  unint64_t v6;
  unsigned int *v7;
  unsigned int *v8;
  signed int v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  char *v14;

  v4 = 245;
  v5 = (unsigned int *)&re::internal::PrimeHelper::s_primes;
  do
  {
    v6 = v4 >> 1;
    v7 = &v5[v4 >> 1];
    v9 = *v7;
    v8 = v7 + 1;
    v4 += ~(v4 >> 1);
    if (v9 < a3)
      v5 = v8;
    else
      v4 = v6;
  }
  while (v4);
  v10 = *v5;
  *(_QWORD *)a1 = a2;
  v11 = (4 * v10 + 15) & 0x7FFFFFFF0;
  v12 = (char *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 32))(a2, v11 + (v10 << 6), 16);
  if (v12)
  {
    v14 = v12;
    *(_QWORD *)(a1 + 8) = v12;
    if ((_DWORD)v10)
      memset_pattern16(v12, &memset_pattern_181, 4 * v10);
    *(_QWORD *)(a1 + 16) = &v14[v11];
    *(_DWORD *)(a1 + 24) = v10;
    *(_DWORD *)(a1 + 40) = 0;
  }
  else
  {
    re::internal::assertLog((re::internal *)4, v13, "assertion failure: '%s' (%s:line %i) Out of memory.", "temp", "init", 575);
    _os_crash();
    __break(1u);
  }
}

void re::HashTable<unsigned long long,re::RenderGraphTargetHandle,re::PrecalculatedHash,re::EqualTo<unsigned long long>,false,false>::init(uint64_t a1, uint64_t a2, signed int a3)
{
  unint64_t v4;
  unsigned int *v5;
  unint64_t v6;
  unsigned int *v7;
  unsigned int *v8;
  signed int v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  char *v14;

  v4 = 245;
  v5 = (unsigned int *)&re::internal::PrimeHelper::s_primes;
  do
  {
    v6 = v4 >> 1;
    v7 = &v5[v4 >> 1];
    v9 = *v7;
    v8 = v7 + 1;
    v4 += ~(v4 >> 1);
    if (v9 < a3)
      v5 = v8;
    else
      v4 = v6;
  }
  while (v4);
  v10 = *v5;
  *(_QWORD *)a1 = a2;
  v11 = (4 * v10 + 15) & 0x7FFFFFFF0;
  v12 = (char *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 32))(a2, v11 + 32 * v10, 16);
  if (v12)
  {
    v14 = v12;
    *(_QWORD *)(a1 + 8) = v12;
    if ((_DWORD)v10)
      memset_pattern16(v12, &memset_pattern_181, 4 * v10);
    *(_QWORD *)(a1 + 16) = &v14[v11];
    *(_DWORD *)(a1 + 24) = v10;
    *(_DWORD *)(a1 + 40) = 0;
  }
  else
  {
    re::internal::assertLog((re::internal *)4, v13, "assertion failure: '%s' (%s:line %i) Out of memory.", "temp", "init", 575);
    _os_crash();
    __break(1u);
  }
}

uint64_t re::HashTable<unsigned long long,re::RenderGraphInputData const*,re::PrecalculatedHash,re::EqualTo<unsigned long long>,false,false>::addAsMove(uint64_t result, unsigned int a2, unint64_t a3, _QWORD *a4, _QWORD *a5)
{
  uint64_t v7;
  uint64_t v8;
  int v9;
  uint64_t v11;
  int v12;
  uint64_t v13;

  v7 = result;
  v8 = *(unsigned int *)(result + 36);
  if ((_DWORD)v8 == 0x7FFFFFFF)
  {
    v8 = *(unsigned int *)(result + 32);
    v9 = v8;
    if ((_DWORD)v8 == *(_DWORD *)(result + 24))
    {
      result = re::HashTable<unsigned long long,re::RenderGraphInputData const*,re::PrecalculatedHash,re::EqualTo<unsigned long long>,false,false>::setCapacity(result, (2 * *(_DWORD *)(result + 28)));
      a2 = a3 % *(unsigned int *)(v7 + 24);
      v9 = *(_DWORD *)(v7 + 32);
    }
    *(_DWORD *)(v7 + 32) = v9 + 1;
    v11 = *(_QWORD *)(v7 + 16);
    v12 = *(_DWORD *)(v11 + 24 * v8);
  }
  else
  {
    v11 = *(_QWORD *)(result + 16);
    v12 = *(_DWORD *)(v11 + 24 * v8);
    *(_DWORD *)(result + 36) = v12 & 0x7FFFFFFF;
  }
  v13 = 24 * v8;
  *(_DWORD *)(v11 + v13) = v12 | 0x80000000;
  *(_DWORD *)(*(_QWORD *)(v7 + 16) + v13) = *(_DWORD *)(*(_QWORD *)(v7 + 16) + 24 * v8) & 0x80000000 | *(_DWORD *)(*(_QWORD *)(v7 + 8) + 4 * a2);
  *(_QWORD *)(*(_QWORD *)(v7 + 16) + 24 * v8 + 8) = *a4;
  *(_QWORD *)(*(_QWORD *)(v7 + 16) + 24 * v8 + 16) = *a5;
  *(_DWORD *)(*(_QWORD *)(v7 + 8) + 4 * a2) = v8;
  ++*(_DWORD *)(v7 + 28);
  return result;
}

void std::__function::__func<re::RenderGraphFile::provide(char const*,char const*,re::RenderFrame &)::$_0,std::allocator<re::RenderGraphFile::provide(char const*,char const*,re::RenderFrame &)::$_0>,void ()(re::IntrospectionBase const&,void const*)>::~__func()
{
  JUMPOUT(0x2276933B8);
}

__n128 std::__function::__func<re::RenderGraphFile::provide(char const*,char const*,re::RenderFrame &)::$_0,std::allocator<re::RenderGraphFile::provide(char const*,char const*,re::RenderFrame &)::$_0>,void ()(re::IntrospectionBase const&,void const*)>::__clone(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x28uLL);
  *(_QWORD *)v2 = &off_24ED37AE8;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  result = *(__n128 *)(a1 + 24);
  *(__n128 *)(v2 + 24) = result;
  return result;
}

__n128 std::__function::__func<re::RenderGraphFile::provide(char const*,char const*,re::RenderFrame &)::$_0,std::allocator<re::RenderGraphFile::provide(char const*,char const*,re::RenderFrame &)::$_0>,void ()(re::IntrospectionBase const&,void const*)>::__clone(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_24ED37AE8;
  result = *(__n128 *)(a1 + 8);
  *(_OWORD *)(a2 + 24) = *(_OWORD *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t std::__function::__func<re::RenderGraphFile::provide(char const*,char const*,re::RenderFrame &)::$_0,std::allocator<re::RenderGraphFile::provide(char const*,char const*,re::RenderFrame &)::$_0>,void ()(re::IntrospectionBase const&,void const*)>::operator()(uint64_t result, uint64_t a2, unint64_t **a3)
{
  uint64_t v4;
  unint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char v10;

  if (*(_DWORD *)(a2 + 16) != 11)
    return result;
  v4 = result;
  v5 = *a3;
  v6 = *(_QWORD *)(result + 24);
  if (*(_QWORD *)(result + 8) != a2)
    goto LABEL_5;
  result = re::HashTable<unsigned long long,re::RenderGraphTargetHandle,re::PrecalculatedHash,re::EqualTo<unsigned long long>,false,false>::tryGet(v6 + 552, *v5);
  if (result)
  {
    v5[1] = *(_QWORD *)(result + 8);
LABEL_5:
    if (*(_QWORD *)(v4 + 16) != a2)
      return result;
    result = re::HashTable<unsigned long long,re::RenderGraphTargetHandle,re::PrecalculatedHash,re::EqualTo<unsigned long long>,false,false>::tryGet(v6 + 600, *v5);
    if (result)
    {
      v5[1] = *(_QWORD *)(result + 8);
      return result;
    }
    v7 = *(_QWORD *)(v4 + 32);
    if ((*(_BYTE *)(v6 + 16) & 1) != 0)
      v8 = *(_QWORD *)(v6 + 24);
    else
      v8 = v6 + 17;
    goto LABEL_14;
  }
  v7 = *(_QWORD *)(v4 + 32);
  if ((*(_BYTE *)(v6 + 16) & 1) != 0)
    v8 = *(_QWORD *)(v6 + 24);
  else
    v8 = v6 + 17;
LABEL_14:
  re::DynamicString::format((re::DynamicString *)"Invalid RenderGraphFile detected (%s). Call calculateValidity before using.", (re::DynamicString *)&v9, v8);
  re::RenderFrame::addError(v7, (uint64_t)&v9);
  result = v9;
  if (v9)
  {
    if ((v10 & 1) != 0)
      return (*(uint64_t (**)(void))(*(_QWORD *)v9 + 40))();
  }
  return result;
}

void sub_22534EA50(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13)
{
  if (a11)
  {
    if ((a12 & 1) != 0)
      (*(void (**)(void))(*(_QWORD *)a11 + 40))();
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::__function::__func<re::RenderGraphFile::provide(char const*,char const*,re::RenderFrame &)::$_0,std::allocator<re::RenderGraphFile::provide(char const*,char const*,re::RenderFrame &)::$_0>,void ()(re::IntrospectionBase const&,void const*)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<re::RenderGraphFile::provide(char const*,char const*,re::RenderFrame &)::$_0,std::allocator<re::RenderGraphFile::provide(char const*,char const*,re::RenderFrame &)::$_0>,void ()(re::IntrospectionBase const&,void const*)>::target_type()
{
}

re::StringID *re::HashTable<re::StringID,re::RenderGraphDataNodeConnection const*,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::addAsMove(uint64_t a1, unsigned int a2, unint64_t a3, const StringID *a4, _QWORD *a5)
{
  uint64_t v9;
  int v10;
  int v12;
  signed int v13;
  uint64_t v14;
  BOOL v15;
  __int128 v16;
  uint64_t v17;
  uint64_t v18;
  unsigned int v19;
  __int128 v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  int v26;
  signed int v27;
  uint64_t v28;
  re::StringID *result;
  _BYTE v30[44];

  v9 = *(unsigned int *)(a1 + 36);
  if ((_DWORD)v9 == 0x7FFFFFFF)
  {
    v9 = *(unsigned int *)(a1 + 32);
    v10 = v9;
    if ((_DWORD)v9 == *(_DWORD *)(a1 + 24))
    {
      v12 = *(_DWORD *)(a1 + 28);
      v13 = 2 * v12;
      v14 = *(_QWORD *)a1;
      if (*(_QWORD *)a1)
      {
        if (v13)
          v15 = (_DWORD)v9 == v13;
        else
          v15 = 1;
        if (!v15 && (v12 & 0x80000000) == 0)
        {
          memset(v30, 0, 36);
          *(_QWORD *)&v30[36] = 0x7FFFFFFFLL;
          re::HashTable<unsigned long long,re::RenderGraphTargetHandle,re::PrecalculatedHash,re::EqualTo<unsigned long long>,false,false>::init((uint64_t)v30, v14, v13);
          v16 = *(_OWORD *)v30;
          *(_OWORD *)v30 = *(_OWORD *)a1;
          *(_OWORD *)a1 = v16;
          v17 = *(_QWORD *)&v30[16];
          v18 = *(_QWORD *)(a1 + 16);
          *(_QWORD *)&v30[16] = v18;
          *(_QWORD *)(a1 + 16) = v17;
          v20 = *(_OWORD *)&v30[24];
          *(_OWORD *)&v30[24] = *(_OWORD *)(a1 + 24);
          v19 = *(_DWORD *)&v30[32];
          *(_OWORD *)(a1 + 24) = v20;
          v21 = v19;
          if (v19)
          {
            v22 = v18 + 24;
            do
            {
              if ((*(_DWORD *)(v22 - 24) & 0x80000000) != 0)
              {
                v23 = 0xBF58476D1CE4E5B9 * ((*(_QWORD *)(v22 - 16) >> 31) ^ (*(_QWORD *)(v22 - 16) >> 1));
                v24 = (0x94D049BB133111EBLL * (v23 ^ (v23 >> 27))) ^ ((0x94D049BB133111EBLL * (v23 ^ (v23 >> 27))) >> 31);
                re::HashTable<re::StringID,re::RenderGraphDataNodeConnection const*,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::addAsMove(a1, v24 % *(unsigned int *)(a1 + 24), v24, v22 - 16, v22);
              }
              v22 += 32;
              --v21;
            }
            while (v21);
          }
          re::HashTable<re::StringID,re::DataArrayHandle<re::RigGraphOperatorDefinition>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::deinit((uint64_t *)v30);
        }
      }
      else
      {
        if (v13)
          v27 = 2 * v12;
        else
          v27 = 3;
      }
      a2 = a3 % *(unsigned int *)(a1 + 24);
      v10 = *(_DWORD *)(a1 + 32);
    }
    *(_DWORD *)(a1 + 32) = v10 + 1;
    v25 = *(_QWORD *)(a1 + 16);
    v26 = *(_DWORD *)(v25 + 32 * v9);
  }
  else
  {
    v25 = *(_QWORD *)(a1 + 16);
    v26 = *(_DWORD *)(v25 + 32 * v9);
    *(_DWORD *)(a1 + 36) = v26 & 0x7FFFFFFF;
  }
  v28 = 32 * v9;
  *(_DWORD *)(v25 + v28) = v26 | 0x80000000;
  *(_DWORD *)(*(_QWORD *)(a1 + 16) + v28) = *(_DWORD *)(*(_QWORD *)(a1 + 16) + 32 * v9) & 0x80000000 | *(_DWORD *)(*(_QWORD *)(a1 + 8) + 4 * a2);
  result = re::StringID::StringID((re::StringID *)(*(_QWORD *)(a1 + 16) + 32 * v9 + 8), a4);
  *(_QWORD *)(*(_QWORD *)(a1 + 16) + 32 * v9 + 24) = *a5;
  *(_DWORD *)(*(_QWORD *)(a1 + 8) + 4 * a2) = v9;
  ++*(_DWORD *)(a1 + 28);
  return result;
}

void sub_22534ECF0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  re::HashTable<re::StringID,re::DataArrayHandle<re::RigGraphOperatorDefinition>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::deinit(&a9);
  _Unwind_Resume(a1);
}

_QWORD *re::DynamicArray<re::BindPointAndPath>::growCapacity(_QWORD *this, unint64_t a2)
{
  unint64_t v2;
  unint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  BOOL v6;
  unint64_t v7;

  v2 = this[1];
  if (v2 < a2)
  {
    v3 = a2;
    v4 = this;
    if (*this)
    {
      v5 = 2 * v2;
      v6 = v2 == 0;
      v7 = 8;
      if (!v6)
        v7 = v5;
      if (v7 > a2)
        a2 = v7;
      return re::DynamicArray<re::BindPointAndPath>::setCapacity(this, a2);
    }
    else
    {
      this = re::DynamicArray<re::BindPointAndPath>::setCapacity(v4, v3);
      ++*((_DWORD *)v4 + 6);
    }
  }
  return this;
}

_QWORD *re::DynamicArray<re::BindPointAndPath>::setCapacity(_QWORD *result, unint64_t a2)
{
  unint64_t v2;
  uint64_t v3;
  _QWORD *v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  re::StringID *v13;
  uint64_t v14;
  uint64_t v15;

  v3 = result[1];
  if (v3 != a2)
  {
    v5 = result;
    if (result[2] <= a2)
    {
      result = (_QWORD *)*result;
      if (!*v5)
      {
        result = (_QWORD *)re::DynamicArray<re::BindPointAndPath>::setCapacity(v5, a2);
        ++*((_DWORD *)v5 + 6);
        return result;
      }
      if (a2)
      {
        if (a2 >> 58)
        {
          re::internal::assertLog((re::internal *)6, a2, "assertion failure: '%s' (%s:line %i) Size overflow in DynamicArray<T>::setCapacity(). Element size = %zu, capacity = %zu", "!overflow", "setCapacity", 615, 64, a2);
          _os_crash();
          __break(1u);
        }
        else
        {
          v2 = a2 << 6;
          result = (_QWORD *)(*(uint64_t (**)(_QWORD *, unint64_t, uint64_t))(*result + 32))(result, a2 << 6, 8);
          if (result)
          {
            v7 = result;
            if (!v5[1])
              goto LABEL_16;
            goto LABEL_11;
          }
        }
        re::internal::assertLog((re::internal *)6, v6, "assertion failure: '%s' (%s:line %i) DynamicArray<T> is out of memory (tried to allocate %zu bytes from allocator '%s').", "newData", "setCapacity", 619, v2, *(_QWORD *)(*v5 + 8));
        result = (_QWORD *)_os_crash();
        __break(1u);
        return result;
      }
      v7 = 0;
      if (!v3)
      {
LABEL_16:
        v5[4] = v7;
        v5[1] = a2;
        return result;
      }
LABEL_11:
      v8 = v5[4];
      v9 = v5[2];
      if (v9)
      {
        v10 = 0;
        v11 = v9 << 6;
        do
        {
          v12 = re::BindPoint::BindPoint((uint64_t)&v7[v10 / 8], (uint64_t *)(v8 + v10));
          v14 = *(_QWORD *)(v8 + v10 + 48);
          v13 = (re::StringID *)(v8 + v10 + 48);
          *(_QWORD *)(v12 + 48) = *(_QWORD *)(v12 + 48) & 0xFFFFFFFFFFFFFFFELL | v14 & 1;
          *(_QWORD *)(v12 + 48) = *(_QWORD *)v13 & 0xFFFFFFFFFFFFFFFELL | v14 & 1;
          *(_QWORD *)(v12 + 56) = *(_QWORD *)(v8 + v10 + 56);
          *(_QWORD *)v13 = 0;
          *((_QWORD *)v13 + 1) = &str_110;
          re::StringID::destroyString(v13);
          v15 = v8 + v10 + 8;
          re::DynamicArray<re::BindPoint::BindPointData>::deinit(v15);
          re::DynamicArray<re::BindPoint::BindPointData>::deinit(v15);
          v10 += 64;
        }
        while (v11 != v10);
        v8 = v5[4];
      }
      result = (_QWORD *)(*(uint64_t (**)(_QWORD, uint64_t))(*(_QWORD *)*v5 + 40))(*v5, v8);
      goto LABEL_16;
    }
  }
  return result;
}

_QWORD *re::IntrospectionDynamicArray<re::RenderGraphDataStoreConnection>::~IntrospectionDynamicArray(_QWORD *a1)
{
  *a1 = &off_24ED1FA08;
  re::SerializedReference<re::IntrospectionBase const*>::reset(a1 + 6);
  *a1 = &off_24ED426B8;
  objc_destructInstance(a1 + 1);
  return a1;
}

void re::IntrospectionDynamicArray<re::RenderGraphDataStoreConnection>::~IntrospectionDynamicArray(_QWORD *a1)
{
  *a1 = &off_24ED1FA08;
  re::SerializedReference<re::IntrospectionBase const*>::reset(a1 + 6);
  *a1 = &off_24ED426B8;
  objc_destructInstance(a1 + 1);
  JUMPOUT(0x2276933B8);
}

void re::IntrospectionDynamicArray<re::RenderGraphDataStoreConnection>::construct(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)(a2 + 32) = 0;
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)a2 = 0;
  *(_DWORD *)(a2 + 24) = 0;
}

uint64_t re::IntrospectionDynamicArray<re::RenderGraphDataStoreConnection>::destroy(uint64_t a1, uint64_t a2)
{
  return re::DynamicArray<re::RenderGraphDataStoreConnection>::deinit(a2);
}

_QWORD *re::IntrospectionDynamicArray<re::RenderGraphDataStoreConnection>::init(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *result;

  re::DynamicArray<re::RenderGraphDataStoreConnection>::deinit(a2);
  *(_QWORD *)a2 = a3;
  result = re::DynamicArray<re::RenderGraphDataStoreConnection>::setCapacity((_QWORD *)a2, 0);
  ++*(_DWORD *)(a2 + 24);
  return result;
}

_anonymous_namespace_ *re::IntrospectionDynamicArray<re::RenderGraphDataStoreConnection>::resize(_anonymous_namespace_ *result, uint64_t a2, uint64_t a3, uint64_t a4, unint64_t a5)
{
  _anonymous_namespace_ *v9;
  unint64_t v10;
  unint64_t i;

  v9 = result;
  if (!*(_QWORD *)a4)
  {
    *(_QWORD *)a4 = a2;
    result = (_anonymous_namespace_ *)re::DynamicArray<re::RenderGraphDataStoreConnection>::setCapacity((_QWORD *)a4, a5);
    ++*(_DWORD *)(a4 + 24);
  }
  v10 = *(_QWORD *)(a4 + 16);
  if (v10 >= a5)
  {
    if (v10 > a5)
      return re::DynamicArray<re::RenderGraphDataStoreConnection>::resize((_anonymous_namespace_ *)a4, a5);
  }
  else
  {
    result = (_anonymous_namespace_ *)re::DynamicArray<re::RenderGraphDataStoreConnection>::setCapacity((_QWORD *)a4, a5);
    for (i = a5 - *(_QWORD *)(a4 + 16); i; --i)
      result = (_anonymous_namespace_ *)(*(uint64_t (**)(_anonymous_namespace_ *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)v9 + 80))(v9, a2, a3, a4);
  }
  return result;
}

re::IntrospectionBase *re::IntrospectionDynamicArray<re::RenderGraphDataStoreConnection>::addElement(re::Allocator **a1, re *a2, int a3, uint64_t a4)
{
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  __int128 v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  re::IntrospectionBase *v20;
  __int128 v22;
  __int128 v23;
  uint64_t v24;
  _BYTE v25[40];
  __int128 v26;
  _OWORD v27[3];

  memset(v27, 0, 40);
  v26 = 0u;
  v24 = 0;
  memset(&v25[8], 0, 32);
  v22 = 0u;
  v23 = 0u;
  re::DynamicString::setCapacity(v25, 0);
  *(_QWORD *)&v25[32] = 0;
  v26 = 0uLL;
  LODWORD(v27[0]) = 0;
  memset((char *)v27 + 8, 0, 32);
  v8 = *(_QWORD *)(a4 + 16);
  if (v8 >= *(_QWORD *)(a4 + 8))
  {
    re::DynamicArray<re::RenderGraphDataStoreConnection>::growCapacity((_QWORD *)a4, v8 + 1);
    v8 = *(_QWORD *)(a4 + 16);
  }
  v9 = *(_QWORD *)(a4 + 32) + 136 * v8;
  *(_QWORD *)(v9 + 32) = 0;
  *(_QWORD *)(v9 + 8) = 0;
  *(_QWORD *)(v9 + 16) = 0;
  *(_QWORD *)v9 = 0;
  *(_DWORD *)(v9 + 24) = 0;
  *(_QWORD *)v9 = v22;
  *(_QWORD *)&v22 = 0;
  *(_QWORD *)(v9 + 8) = *((_QWORD *)&v22 + 1);
  *((_QWORD *)&v22 + 1) = 0;
  v10 = *(_QWORD *)(v9 + 16);
  *(_QWORD *)(v9 + 16) = v23;
  *(_QWORD *)&v23 = v10;
  v11 = *(_QWORD *)(v9 + 32);
  *(_QWORD *)(v9 + 32) = v24;
  v24 = v11;
  ++DWORD2(v23);
  ++*(_DWORD *)(v9 + 24);
  *(_OWORD *)(v9 + 40) = 0u;
  *(_OWORD *)(v9 + 56) = 0u;
  *(_QWORD *)(v9 + 40) = *(_QWORD *)v25;
  *(_QWORD *)v25 = 0;
  v12 = *(_QWORD *)(v9 + 56);
  *(_QWORD *)(v9 + 56) = *(_QWORD *)&v25[16];
  *(_QWORD *)&v25[16] = v12;
  *(_QWORD *)(v9 + 64) = *(_QWORD *)&v25[24];
  *(_QWORD *)&v25[24] = 0;
  v13 = *(_QWORD *)(v9 + 48);
  *(_QWORD *)(v9 + 48) = *(_QWORD *)&v25[8];
  *(_QWORD *)&v25[8] = v13;
  *(_QWORD *)(v9 + 104) = 0;
  *(_DWORD *)(v9 + 96) = 0;
  *(_QWORD *)(v9 + 80) = 0;
  *(_QWORD *)(v9 + 88) = 0;
  *(_QWORD *)(v9 + 72) = 0;
  *(_QWORD *)(v9 + 72) = *(_QWORD *)&v25[32];
  *(_QWORD *)&v25[32] = 0;
  *(_QWORD *)(v9 + 80) = v26;
  *(_QWORD *)&v26 = 0;
  v14 = *(_QWORD *)(v9 + 88);
  *(_QWORD *)(v9 + 88) = *((_QWORD *)&v26 + 1);
  *((_QWORD *)&v26 + 1) = v14;
  v15 = *(_QWORD *)(v9 + 104);
  *(_QWORD *)(v9 + 104) = *((_QWORD *)&v27[0] + 1);
  *((_QWORD *)&v27[0] + 1) = v15;
  ++LODWORD(v27[0]);
  ++*(_DWORD *)(v9 + 96);
  v16 = v27[1];
  *(_QWORD *)(v9 + 128) = *(_QWORD *)&v27[2];
  *(_OWORD *)(v9 + 112) = v16;
  ++*(_QWORD *)(a4 + 16);
  ++*(_DWORD *)(a4 + 24);
  re::DynamicArray<re::DynamicString>::deinit((uint64_t)&v25[32]);
  if (*(_QWORD *)v25)
  {
    if ((v25[8] & 1) != 0)
      (*(void (**)(_QWORD, _QWORD, uint64_t, uint64_t, uint64_t))(**(_QWORD **)v25 + 40))(*(_QWORD *)v25, *(_QWORD *)&v25[16], v17, v18, v19);
    memset(v25, 0, 32);
  }
  re::DynamicArray<re::DynamicString>::deinit((uint64_t)&v22);
  v20 = (re::IntrospectionBase *)(*(_QWORD *)(a4 + 32) + 136 * *(_QWORD *)(a4 + 16) - 136);
  re::introspectionInitElement(a2, a3, a1[6], v20);
  return v20;
}

void sub_22534F38C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  re::RenderGraphDataStoreConnection::~RenderGraphDataStoreConnection((re::RenderGraphDataStoreConnection *)&a9);
  _Unwind_Resume(a1);
}

uint64_t re::IntrospectionDynamicArray<re::RenderGraphDataStoreConnection>::size(uint64_t a1, uint64_t a2)
{
  return *(_QWORD *)(a2 + 16);
}

uint64_t re::IntrospectionDynamicArray<re::RenderGraphDataStoreConnection>::elementAt(uint64_t a1, uint64_t a2, unint64_t a3)
{
  if (*(_QWORD *)(a2 + 16) <= a3)
  {
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  return *(_QWORD *)(a2 + 32) + 136 * a3;
}

{
  if (*(_QWORD *)(a2 + 16) <= a3)
  {
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  return *(_QWORD *)(a2 + 32) + 136 * a3;
}

_anonymous_namespace_ *re::DynamicArray<re::RenderGraphDataStoreConnection>::resize(_anonymous_namespace_ *result, unint64_t a2)
{
  _anonymous_namespace_ *v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v3 = result;
  v4 = *((_QWORD *)result + 2);
  if (v4 >= a2)
  {
    if (v4 <= a2)
      return result;
    v8 = 136 * a2;
    v9 = a2;
    do
    {
      v10 = *((_QWORD *)v3 + 4);
      v11 = v10 + v8;
      re::DynamicArray<re::DynamicString>::deinit(v10 + v8 + 72);
      v12 = *(_QWORD *)(v10 + v8 + 40);
      if (v12)
      {
        if ((*(_BYTE *)(v11 + 48) & 1) != 0)
          (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v12 + 40))(v12, *(_QWORD *)(v10 + v8 + 56));
        *(_OWORD *)(v10 + v8 + 40) = 0u;
        *(_OWORD *)(v11 + 56) = 0u;
      }
      result = (_anonymous_namespace_ *)re::DynamicArray<re::DynamicString>::deinit(v10 + v8);
      ++v9;
      v8 += 136;
    }
    while (v9 < *((_QWORD *)v3 + 2));
  }
  else
  {
    if (*((_QWORD *)result + 1) < a2)
    {
      result = (_anonymous_namespace_ *)re::DynamicArray<re::RenderGraphDataStoreConnection>::setCapacity(result, a2);
      v4 = *((_QWORD *)v3 + 2);
    }
    v5 = a2 - v4;
    if (a2 > v4)
    {
      v6 = 136 * v4;
      do
      {
        v7 = *((_QWORD *)v3 + 4) + v6;
        *(_QWORD *)(v7 + 128) = 0;
        *(_OWORD *)(v7 + 96) = 0u;
        *(_OWORD *)(v7 + 112) = 0u;
        *(_OWORD *)(v7 + 64) = 0u;
        *(_OWORD *)(v7 + 80) = 0u;
        *(_OWORD *)(v7 + 32) = 0u;
        *(_OWORD *)(v7 + 48) = 0u;
        *(_OWORD *)v7 = 0u;
        *(_OWORD *)(v7 + 16) = 0u;
        result = (_anonymous_namespace_ *)re::DynamicString::setCapacity((_QWORD *)(v7 + 40), 0);
        *(_QWORD *)(v7 + 80) = 0;
        *(_QWORD *)(v7 + 72) = 0;
        *(_DWORD *)(v7 + 96) = 0;
        *(_QWORD *)(v7 + 88) = 0;
        v6 += 136;
        *(_OWORD *)(v7 + 104) = 0u;
        *(_OWORD *)(v7 + 120) = 0u;
        --v5;
      }
      while (v5);
    }
  }
  *((_QWORD *)v3 + 2) = a2;
  ++*((_DWORD *)v3 + 6);
  return result;
}

_QWORD *re::TypeBuilderHelper::registerDynamicArray<re::RenderGraphDataStoreConnection>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,void *)#1}::__invoke(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *result;

  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_DWORD *)(a1 + 24) = 0;
  *(_QWORD *)a1 = a3;
  result = re::DynamicArray<re::RenderGraphDataStoreConnection>::setCapacity((_QWORD *)a1, 0);
  ++*(_DWORD *)(a1 + 24);
  return result;
}

uint64_t re::TypeBuilderHelper::registerDynamicArray<re::RenderGraphDataStoreConnection>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *)#1}::__invoke(uint64_t a1)
{
  return *(_QWORD *)(a1 + 16);
}

void re::TypeBuilderHelper::registerDynamicArray<re::RenderGraphDataStoreConnection>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,unsigned long)#1}::__invoke(uint64_t a1, uint64_t a2, re::Allocator *a3, unint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _anonymous_namespace_ *v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  _BYTE v16[32];
  _BYTE v17[8];
  uint64_t v18;

  if (*(re::Allocator **)a1 == a3)
  {
    v8 = *(_QWORD *)(a1 + 16);
    *(_QWORD *)(a1 + 16) = 0;
    if (v8)
    {
      v9 = 136 * v8;
      v10 = *(_QWORD *)(a1 + 32) + 72;
      do
      {
        re::DynamicArray<re::DynamicString>::deinit(v10);
        v11 = *(_QWORD *)(v10 - 32);
        if (v11)
        {
          if ((*(_BYTE *)(v10 - 24) & 1) != 0)
            (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v11 + 40))(v11, *(_QWORD *)(v10 - 16));
          *(_OWORD *)(v10 - 32) = 0u;
          *(_OWORD *)(v10 - 16) = 0u;
        }
        re::DynamicArray<re::DynamicString>::deinit(v10 - 72);
        v10 += 136;
        v9 -= 136;
      }
      while (v9);
    }
  }
  else
  {
    re::DynamicArray<re::RenderGraphDataStoreConnection>::deinit(a1);
    *(_QWORD *)a1 = a3;
    re::DynamicArray<re::RenderGraphDataStoreConnection>::setCapacity((_QWORD *)a1, a4);
  }
  ++*(_DWORD *)(a1 + 24);
  v12 = re::DynamicArray<re::RenderGraphDataStoreConnection>::resize((_anonymous_namespace_ *)a1, a4);
  {
    re::TypeRegistry::typeInfo(*(_QWORD **)a2, *(_QWORD *)(*(_QWORD *)(a2 + 16) + 72), v17);
    re::TypeInfo::TypeInfo((uint64_t)v16, (uint64_t)&v18);
    v13 = *(_QWORD *)(a1 + 16);
    if (v13)
    {
      v14 = *(char **)(a1 + 32);
      v15 = 136 * v13;
      do
      {
        re::TypeInfo::destruct((re::TypeInfo *)v16, v14, a3, 0);
        re::TypeInfo::construct((re::TypeInfo *)v16, (void **)v14, a3, 0);
        v14 += 136;
        v15 -= 136;
      }
      while (v15);
    }
  }
}

uint64_t re::TypeBuilderHelper::registerDynamicArray<re::RenderGraphDataStoreConnection>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,unsigned long)#1}::__invoke(uint64_t a1, unint64_t a2)
{
  if (*(_QWORD *)(a1 + 16) <= a2)
  {
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  return *(_QWORD *)(a1 + 32) + 136 * a2;
}

uint64_t re::TypeBuilderHelper::registerDynamicArray<re::RenderGraphDataStoreConnection>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::Allocator *)#1}::__invoke(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 32))(a2, 16, 8);
  *(_QWORD *)result = a1;
  *(_DWORD *)(result + 8) = *(_DWORD *)(a1 + 24);
  *(_DWORD *)(result + 12) = -1;
  return result;
}

uint64_t re::TypeBuilderHelper::registerDynamicArray<re::RenderGraphDataStoreConnection>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *)#2}::__invoke(_DWORD *a1, uint64_t a2)
{
  uint64_t v2;
  int v3;
  unint64_t v4;
  uint64_t result;

  v2 = *(_QWORD *)a1;
  if (a1[2] == *(_DWORD *)(*(_QWORD *)a1 + 24))
  {
    v3 = a1[3];
    v4 = *(_QWORD *)(v2 + 16);
    if (v3 < (int)v4)
      a1[3] = ++v3;
    if (v4 <= v3)
      return 0;
    else
      return *(_QWORD *)(v2 + 32) + 136 * v3;
  }
  else
  {
    re::internal::assertLog((re::internal *)4, a2, "assertion failure: '%s' (%s:line %i) DynamicArray elements may not be added or removed during iteration.", "iter->originalVersion == iter->array->version()", "operator()", 313);
    result = _os_crash();
    __break(1u);
  }
  return result;
}

uint64_t re::TypeBuilderHelper::registerDynamicArray<re::RenderGraphDataStoreConnection>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::Allocator *)#2}::__invoke(uint64_t result, uint64_t a2)
{
  if (result)
    return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 40))(a2, result);
  return result;
}

_QWORD *re::IntrospectionOptional<re::RenderGraphTargetDescriptionData>::~IntrospectionOptional(_QWORD *a1)
{
  *a1 = &off_24ED2DDF8;
  re::SerializedReference<re::IntrospectionBase const*>::reset(a1 + 6);
  *a1 = &off_24ED426B8;
  objc_destructInstance(a1 + 1);
  return a1;
}

void re::IntrospectionOptional<re::RenderGraphTargetDescriptionData>::~IntrospectionOptional(_QWORD *a1)
{
  *a1 = &off_24ED2DDF8;
  re::SerializedReference<re::IntrospectionBase const*>::reset(a1 + 6);
  *a1 = &off_24ED426B8;
  objc_destructInstance(a1 + 1);
  JUMPOUT(0x2276933B8);
}

void re::IntrospectionOptional<re::RenderGraphTargetDescriptionData>::construct(uint64_t a1, _BYTE *a2)
{
  *a2 = 0;
}

uint64_t re::IntrospectionOptional<re::RenderGraphTargetDescriptionData>::hasValue(uint64_t a1, unsigned __int8 *a2)
{
  return *a2;
}

void re::IntrospectionOptional<re::RenderGraphTargetDescriptionData>::setHasValue(uint64_t a1, uint64_t a2, int a3)
{
  re::AssetHandle *v8;
  _BYTE v9[48];
  int v10;
  uint64_t v11;
  _QWORD v12[2];
  unsigned __int8 v13[8];
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  uint64_t v18;
  _QWORD v19[3];
  char v20;

  if (a3)
  {
    *(_QWORD *)v9 = 2;
    *(_DWORD *)&v9[8] = 2;
    *(_QWORD *)&v9[40] = -1;
    memset(&v9[12], 255, 24);
    __asm { FMOV            V0.2S, #1.0 }
    v10 = 0;
    v12[0] = 0;
    v11 = 0;
    *(_QWORD *)((char *)v12 + 5) = 0;
    v13[0] = 1;
    v14 = *(_OWORD *)v9;
    v17 = _D0;
    v16 = *(_OWORD *)&v9[32];
    v15 = *(_OWORD *)&v9[16];
    v18 = 2;
    memset(v19, 0, sizeof(v19));
    v20 = 0;
    re::Optional<re::RenderGraphTargetDescriptionData>::operator=(a2, v13);
    if (v13[0])
      re::AssetHandle::~AssetHandle((re::AssetHandle *)v19);
    v8 = (re::AssetHandle *)&v10;
  }
  else
  {
    v13[0] = 0;
    re::Optional<re::RenderGraphTargetDescriptionData>::operator=(a2, v13);
    if (!v13[0])
      return;
    v8 = (re::AssetHandle *)v19;
  }
  re::AssetHandle::~AssetHandle(v8);
}

uint64_t re::IntrospectionOptional<re::RenderGraphTargetDescriptionData>::value(uint64_t a1, uint64_t a2)
{
  return a2 + 8;
}

{
  return a2 + 8;
}

uint64_t re::Optional<re::RenderGraphTargetDescriptionData>::operator=(uint64_t a1, unsigned __int8 *a2)
{
  int v3;
  BOOL v4;
  BOOL v5;
  _OWORD *v6;
  BOOL v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  uint64_t v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  uint64_t v15;
  uint64_t v16;

  v3 = *a2;
  if (*(_BYTE *)a1)
    v4 = 0;
  else
    v4 = v3 == 0;
  if (!v4)
  {
    if (*(_BYTE *)a1)
      v5 = v3 == 0;
    else
      v5 = 0;
    if (v5)
    {
      re::AssetHandle::~AssetHandle((re::AssetHandle *)(a1 + 80));
      *(_BYTE *)a1 = 0;
    }
    else
    {
      v6 = (_OWORD *)(a1 + 8);
      if (*(_BYTE *)a1)
        v7 = 1;
      else
        v7 = v3 == 0;
      if (v7)
      {
        *v6 = *(_OWORD *)(a2 + 8);
        v8 = *(_OWORD *)(a2 + 24);
        v9 = *(_OWORD *)(a2 + 40);
        v10 = *(_OWORD *)(a2 + 56);
        *(_QWORD *)(a1 + 72) = *((_QWORD *)a2 + 9);
        *(_OWORD *)(a1 + 40) = v9;
        *(_OWORD *)(a1 + 56) = v10;
        *(_OWORD *)(a1 + 24) = v8;
        v11 = *(_QWORD *)(a1 + 88);
        *(_QWORD *)(a1 + 88) = *((_QWORD *)a2 + 11);
        *((_QWORD *)a2 + 11) = v11;
      }
      else
      {
        *(_BYTE *)a1 = 1;
        *v6 = *(_OWORD *)(a2 + 8);
        v12 = *(_OWORD *)(a2 + 24);
        v13 = *(_OWORD *)(a2 + 40);
        v14 = *(_OWORD *)(a2 + 56);
        *(_QWORD *)(a1 + 72) = *((_QWORD *)a2 + 9);
        *(_OWORD *)(a1 + 40) = v13;
        *(_OWORD *)(a1 + 56) = v14;
        *(_OWORD *)(a1 + 24) = v12;
        *(_QWORD *)(a1 + 88) = 0;
        *(_QWORD *)(a1 + 96) = 0;
        *(_QWORD *)(a1 + 80) = 0;
        *(_QWORD *)(a1 + 88) = *((_QWORD *)a2 + 11);
        *((_QWORD *)a2 + 11) = 0;
      }
      v15 = *(_QWORD *)(a1 + 80);
      *(_QWORD *)(a1 + 80) = 0;
      *(_QWORD *)(a1 + 80) = *((_QWORD *)a2 + 10);
      *((_QWORD *)a2 + 10) = v15;
      v16 = *(_QWORD *)(a1 + 96);
      *(_QWORD *)(a1 + 96) = *((_QWORD *)a2 + 12);
      *((_QWORD *)a2 + 12) = v16;
      *(_BYTE *)(a1 + 104) = a2[104];
    }
  }
  return a1;
}

unsigned __int8 *re::TypeBuilderHelper::registerOptional<re::RenderGraphTargetDescriptionData>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *)#1}::__invoke(unsigned __int8 *a1)
{
  unsigned __int8 *result;
  int v2;

  v2 = *a1;
  result = a1 + 8;
  if (!v2)
    return 0;
  return result;
}

void re::TypeBuilderHelper::registerOptional<re::RenderGraphTargetDescriptionData>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,void const*)#1}::__invoke(uint64_t a1, __int128 *a2)
{
  __int128 v4;
  __int128 v5;
  unsigned __int8 v6[8];
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  uint64_t v11;
  _BYTE v12[32];

  if (a2)
  {
    v4 = *a2;
    v8 = a2[1];
    v5 = a2[3];
    v9 = a2[2];
    v10 = v5;
    v6[0] = 1;
    v11 = *((_QWORD *)a2 + 8);
    v7 = v4;
    re::AssetHandle::AssetHandle((re::AssetHandle *)v12, (const re::AssetHandle *)((char *)a2 + 72));
    v12[24] = *((_BYTE *)a2 + 96);
    re::Optional<re::RenderGraphTargetDescriptionData>::operator=(a1, v6);
    if (!v6[0])
      return;
  }
  else
  {
    v6[0] = 0;
    re::Optional<re::RenderGraphTargetDescriptionData>::operator=(a1, v6);
    if (!v6[0])
      return;
  }
  re::AssetHandle::~AssetHandle((re::AssetHandle *)v12);
}

_QWORD *re::IntrospectionOptional<re::RenderGraphBufferDescriptionData>::~IntrospectionOptional(_QWORD *a1)
{
  *a1 = &off_24ED2DDF8;
  re::SerializedReference<re::IntrospectionBase const*>::reset(a1 + 6);
  *a1 = &off_24ED426B8;
  objc_destructInstance(a1 + 1);
  return a1;
}

void re::IntrospectionOptional<re::RenderGraphBufferDescriptionData>::~IntrospectionOptional(_QWORD *a1)
{
  *a1 = &off_24ED2DDF8;
  re::SerializedReference<re::IntrospectionBase const*>::reset(a1 + 6);
  *a1 = &off_24ED426B8;
  objc_destructInstance(a1 + 1);
  JUMPOUT(0x2276933B8);
}

void re::IntrospectionOptional<re::RenderGraphBufferDescriptionData>::construct(uint64_t a1, _BYTE *a2)
{
  *a2 = 0;
}

uint64_t re::IntrospectionOptional<re::RenderGraphBufferDescriptionData>::hasValue(uint64_t a1, unsigned __int8 *a2)
{
  return *a2;
}

void re::IntrospectionOptional<re::RenderGraphBufferDescriptionData>::setHasValue(uint64_t a1, uint64_t a2, int a3)
{
  if (a3)
  {
    if (!*(_BYTE *)a2)
      *(_BYTE *)a2 = 1;
    *(_DWORD *)(a2 + 8) = 2;
    *(_QWORD *)(a2 + 16) = -1;
    *(_QWORD *)(a2 + 24) = -1;
    *(_DWORD *)(a2 + 32) = 1065353216;
    *(_BYTE *)(a2 + 36) = 0;
  }
  else if (*(_BYTE *)a2)
  {
    *(_BYTE *)a2 = 0;
  }
}

uint64_t re::IntrospectionOptional<re::RenderGraphBufferDescriptionData>::value(uint64_t a1, uint64_t a2)
{
  return a2 + 8;
}

{
  return a2 + 8;
}

unsigned __int8 *re::TypeBuilderHelper::registerOptional<re::RenderGraphBufferDescriptionData>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *)#1}::__invoke(unsigned __int8 *a1)
{
  unsigned __int8 *result;
  int v2;

  v2 = *a1;
  result = a1 + 8;
  if (!v2)
    return 0;
  return result;
}

__n128 re::TypeBuilderHelper::registerOptional<re::RenderGraphBufferDescriptionData>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,void const*)#1}::__invoke(uint64_t a1, uint64_t a2)
{
  __n128 *v2;
  __n128 result;
  uint64_t v4;
  int v5;
  __n128 v6;
  __int128 v7;

  if (a2)
  {
    v6 = *(__n128 *)a2;
    v7 = *(_OWORD *)(a2 + 16);
    v2 = (__n128 *)(a1 + 8);
    if (*(_BYTE *)a1)
    {
      result = *(__n128 *)a2;
      v4 = *(_QWORD *)(a2 + 16);
      v5 = *(_DWORD *)(a2 + 24);
      *(_BYTE *)(a1 + 36) = *(_BYTE *)(a2 + 28);
      *(_DWORD *)(a1 + 32) = v5;
      *(_QWORD *)(a1 + 24) = v4;
      *v2 = result;
    }
    else
    {
      *(_BYTE *)a1 = 1;
      result = v6;
      *v2 = v6;
      *(_OWORD *)(a1 + 24) = v7;
    }
  }
  else if (*(_BYTE *)a1)
  {
    *(_BYTE *)a1 = 0;
  }
  return result;
}

_QWORD *re::IntrospectionDynamicArray<re::RenderGraphTargetData>::~IntrospectionDynamicArray(_QWORD *a1)
{
  *a1 = &off_24ED1FA08;
  re::SerializedReference<re::IntrospectionBase const*>::reset(a1 + 6);
  *a1 = &off_24ED426B8;
  objc_destructInstance(a1 + 1);
  return a1;
}

void re::IntrospectionDynamicArray<re::RenderGraphTargetData>::~IntrospectionDynamicArray(_QWORD *a1)
{
  *a1 = &off_24ED1FA08;
  re::SerializedReference<re::IntrospectionBase const*>::reset(a1 + 6);
  *a1 = &off_24ED426B8;
  objc_destructInstance(a1 + 1);
  JUMPOUT(0x2276933B8);
}

void re::IntrospectionDynamicArray<re::RenderGraphTargetData>::construct(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)(a2 + 32) = 0;
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)a2 = 0;
  *(_DWORD *)(a2 + 24) = 0;
}

uint64_t re::IntrospectionDynamicArray<re::RenderGraphTargetData>::destroy(uint64_t a1, uint64_t a2)
{
  return re::DynamicArray<re::RenderGraphTargetData>::deinit(a2);
}

_QWORD *re::IntrospectionDynamicArray<re::RenderGraphTargetData>::init(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *result;

  re::DynamicArray<re::RenderGraphTargetData>::deinit(a2);
  *(_QWORD *)a2 = a3;
  result = re::DynamicArray<re::RenderGraphTargetData>::setCapacity((_QWORD *)a2, 0);
  ++*(_DWORD *)(a2 + 24);
  return result;
}

void re::IntrospectionDynamicArray<re::RenderGraphTargetData>::resize(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unint64_t a5)
{
  unint64_t v10;
  unint64_t i;

  if (!*(_QWORD *)a4)
  {
    *(_QWORD *)a4 = a2;
    re::DynamicArray<re::RenderGraphTargetData>::setCapacity((_QWORD *)a4, a5);
    ++*(_DWORD *)(a4 + 24);
  }
  v10 = *(_QWORD *)(a4 + 16);
  if (v10 >= a5)
  {
    if (v10 > a5)
      re::DynamicArray<re::RenderGraphTargetData>::resize(a4, a5);
  }
  else
  {
    re::DynamicArray<re::RenderGraphTargetData>::setCapacity((_QWORD *)a4, a5);
    for (i = a5 - *(_QWORD *)(a4 + 16); i; --i)
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a1 + 80))(a1, a2, a3, a4);
  }
}

re::IntrospectionBase *re::IntrospectionDynamicArray<re::RenderGraphTargetData>::addElement(re::Allocator **a1, re *a2, int a3, uint64_t a4)
{
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  __int128 v21;
  __int128 v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  re::IntrospectionBase *v27;
  uint64_t v29;
  void *v30;
  _BYTE v31[48];
  _BYTE v32[64];
  __int128 v33;
  uint64_t v34;
  uint64_t v35;

  v29 = 0;
  *(_DWORD *)&v31[36] = 0;
  *(_DWORD *)&v32[8] = 0;
  v34 = 0;
  v35 = 0;
  v30 = &str_110;
  *(_QWORD *)v31 = 2;
  *(_DWORD *)&v31[8] = 2;
  *(_QWORD *)&v31[40] = -1;
  memset(&v31[12], 255, 24);
  __asm { FMOV            V0.2S, #1.0 }
  *(_QWORD *)v32 = _D0;
  *(_QWORD *)&v32[12] = 0x200000000;
  v33 = 0uLL;
  memset(&v32[20], 0, 44);
  v14 = *(_QWORD *)(a4 + 8);
  v13 = *(_QWORD *)(a4 + 16);
  if (v13 >= v14)
  {
    v16 = v13 + 1;
    if (v14 < v13 + 1)
    {
      if (*(_QWORD *)a4)
      {
        v17 = 2 * v14;
        if (!v14)
          v17 = 8;
        if (v17 <= v16)
          v18 = v16;
        else
          v18 = v17;
        re::DynamicArray<re::RenderGraphTargetData>::setCapacity((_QWORD *)a4, v18);
      }
      else
      {
        re::DynamicArray<re::RenderGraphTargetData>::setCapacity((_QWORD *)a4, v16);
        ++*(_DWORD *)(a4 + 24);
      }
    }
    v13 = *(_QWORD *)(a4 + 16);
    v15 = v29 & 1;
  }
  else
  {
    v15 = 0;
  }
  v19 = *(_QWORD *)(a4 + 32) + 160 * v13;
  *(_QWORD *)v19 = *(_QWORD *)v19 & 0xFFFFFFFFFFFFFFFELL | v15;
  *(_QWORD *)v19 = v29 & 0xFFFFFFFFFFFFFFFELL | v15;
  *(_QWORD *)(v19 + 8) = v30;
  v29 = 0;
  v30 = &str_110;
  v20 = *(_QWORD *)&v32[16];
  v22 = *(_OWORD *)&v31[32];
  v21 = *(_OWORD *)v32;
  *(_OWORD *)(v19 + 32) = *(_OWORD *)&v31[16];
  *(_OWORD *)(v19 + 48) = v22;
  *(_OWORD *)(v19 + 64) = v21;
  *(_QWORD *)(v19 + 80) = v20;
  *(_OWORD *)(v19 + 16) = *(_OWORD *)v31;
  *(_QWORD *)(v19 + 96) = 0;
  *(_QWORD *)(v19 + 104) = 0;
  *(_QWORD *)(v19 + 88) = 0;
  *(_QWORD *)(v19 + 96) = *(_QWORD *)&v32[32];
  *(_QWORD *)&v32[32] = 0;
  v23 = *(_QWORD *)(v19 + 88);
  *(_QWORD *)(v19 + 88) = 0;
  *(_QWORD *)(v19 + 88) = *(_QWORD *)&v32[24];
  *(_QWORD *)&v32[24] = v23;
  v24 = *(_QWORD *)(v19 + 104);
  *(_QWORD *)(v19 + 104) = *(_QWORD *)&v32[40];
  *(_QWORD *)&v32[40] = v24;
  *(_BYTE *)(v19 + 112) = v32[48];
  *(_QWORD *)(v19 + 152) = 0;
  *(_QWORD *)(v19 + 128) = 0;
  *(_QWORD *)(v19 + 136) = 0;
  *(_QWORD *)(v19 + 120) = 0;
  *(_DWORD *)(v19 + 144) = 0;
  *(_QWORD *)(v19 + 120) = *(_QWORD *)&v32[56];
  *(_QWORD *)&v32[56] = 0;
  *(_QWORD *)(v19 + 128) = v33;
  *(_QWORD *)&v33 = 0;
  v25 = *(_QWORD *)(v19 + 136);
  *(_QWORD *)(v19 + 136) = *((_QWORD *)&v33 + 1);
  *((_QWORD *)&v33 + 1) = v25;
  v26 = *(_QWORD *)(v19 + 152);
  *(_QWORD *)(v19 + 152) = v35;
  v35 = v26;
  LODWORD(v34) = v34 + 1;
  ++*(_DWORD *)(v19 + 144);
  ++*(_QWORD *)(a4 + 16);
  ++*(_DWORD *)(a4 + 24);
  re::DynamicArray<re::RenderGraphDataStoreConnection>::deinit((uint64_t)&v32[56]);
  re::AssetHandle::~AssetHandle((re::AssetHandle *)&v32[24]);
  re::StringID::destroyString((re::StringID *)&v29);
  v27 = (re::IntrospectionBase *)(*(_QWORD *)(a4 + 32) + 160 * *(_QWORD *)(a4 + 16) - 160);
  re::introspectionInitElement(a2, a3, a1[6], v27);
  return v27;
}

void sub_22535048C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  re::RenderGraphTargetData::~RenderGraphTargetData((re::RenderGraphTargetData *)&a9);
  _Unwind_Resume(a1);
}

uint64_t re::IntrospectionDynamicArray<re::RenderGraphTargetData>::size(uint64_t a1, uint64_t a2)
{
  return *(_QWORD *)(a2 + 16);
}

uint64_t re::IntrospectionDynamicArray<re::RenderGraphTargetData>::elementAt(uint64_t a1, uint64_t a2, unint64_t a3)
{
  if (*(_QWORD *)(a2 + 16) <= a3)
  {
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  return *(_QWORD *)(a2 + 32) + 160 * a3;
}

{
  if (*(_QWORD *)(a2 + 16) <= a3)
  {
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  return *(_QWORD *)(a2 + 32) + 160 * a3;
}

_QWORD *re::DynamicArray<re::RenderGraphTargetData>::setCapacity(_QWORD *result, unint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v5;
  uint64_t v6;
  unint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t *v12;
  char v13;
  unint64_t v14;
  __int128 v15;
  __int128 v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;

  v3 = result[1];
  if (v3 != a2)
  {
    v5 = result;
    if (result[2] <= a2)
    {
      result = (_QWORD *)*result;
      if (!*v5)
      {
        result = (_QWORD *)re::DynamicArray<re::RenderGraphTargetData>::setCapacity(v5, a2);
        ++*((_DWORD *)v5 + 6);
        return result;
      }
      if (a2)
      {
        if (is_mul_ok(a2, 0xA0uLL))
        {
          v2 = 160 * a2;
          result = (_QWORD *)(*(uint64_t (**)(_QWORD *, unint64_t, uint64_t))(*result + 32))(result, 160 * a2, 8);
          if (result)
          {
            v7 = result;
            if (!v5[1])
              goto LABEL_16;
            goto LABEL_11;
          }
        }
        else
        {
          re::internal::assertLog((re::internal *)6, a2, "assertion failure: '%s' (%s:line %i) Size overflow in DynamicArray<T>::setCapacity(). Element size = %zu, capacity = %zu", "!overflow", "setCapacity", 615, 160, a2);
          _os_crash();
          __break(1u);
        }
        re::internal::assertLog((re::internal *)6, v6, "assertion failure: '%s' (%s:line %i) DynamicArray<T> is out of memory (tried to allocate %zu bytes from allocator '%s').", "newData", "setCapacity", 619, v2, *(_QWORD *)(*v5 + 8));
        result = (_QWORD *)_os_crash();
        __break(1u);
        return result;
      }
      v7 = 0;
      if (!v3)
      {
LABEL_16:
        v5[4] = v7;
        v5[1] = a2;
        return result;
      }
LABEL_11:
      v8 = v5[4];
      v9 = v5[2];
      if (v9)
      {
        v10 = v8 + 160 * v9;
        v11 = v8 + 88;
        v12 = v7;
        do
        {
          v13 = *(_QWORD *)(v11 - 88);
          *v12 = *v12 & 0xFFFFFFFFFFFFFFFELL | *(_QWORD *)(v11 - 88) & 1;
          *v12 = *(_QWORD *)(v11 - 88) & 0xFFFFFFFFFFFFFFFELL | v13 & 1;
          v12[1] = *(_QWORD *)(v11 - 80);
          *(_QWORD *)(v11 - 80) = &str_110;
          *(_QWORD *)(v11 - 88) = 0;
          v14 = *(_QWORD *)(v11 - 8);
          v15 = *(_OWORD *)(v11 - 24);
          v16 = *(_OWORD *)(v11 - 40);
          *((_OWORD *)v12 + 2) = *(_OWORD *)(v11 - 56);
          *((_OWORD *)v12 + 3) = v16;
          *((_OWORD *)v12 + 4) = v15;
          v12[10] = v14;
          *((_OWORD *)v12 + 1) = *(_OWORD *)(v11 - 72);
          v12[12] = 0;
          v12[13] = 0;
          v12[11] = 0;
          v12[12] = *(_QWORD *)(v11 + 8);
          *(_QWORD *)(v11 + 8) = 0;
          v17 = v12[11];
          v12[11] = 0;
          v12[11] = *(_QWORD *)v11;
          *(_QWORD *)v11 = v17;
          v18 = v12[13];
          v12[13] = *(_QWORD *)(v11 + 16);
          *(_QWORD *)(v11 + 16) = v18;
          *((_BYTE *)v12 + 112) = *(_BYTE *)(v11 + 24);
          v12[19] = 0;
          v12[16] = 0;
          v12[17] = 0;
          v12[15] = 0;
          *((_DWORD *)v12 + 36) = 0;
          v19 = *(_QWORD *)(v11 + 40);
          v12[15] = *(_QWORD *)(v11 + 32);
          *(_QWORD *)(v11 + 32) = 0;
          v12[16] = v19;
          *(_QWORD *)(v11 + 40) = 0;
          v20 = v12[17];
          v12[17] = *(_QWORD *)(v11 + 48);
          *(_QWORD *)(v11 + 48) = v20;
          v21 = v12[19];
          v12[19] = *(_QWORD *)(v11 + 64);
          *(_QWORD *)(v11 + 64) = v21;
          ++*(_DWORD *)(v11 + 56);
          ++*((_DWORD *)v12 + 36);
          re::DynamicArray<re::RenderGraphDataStoreConnection>::deinit(v11 + 32);
          re::AssetHandle::~AssetHandle((re::AssetHandle *)v11);
          re::StringID::destroyString((re::StringID *)(v11 - 88));
          v22 = v11 + 72;
          v11 += 160;
          v12 += 20;
        }
        while (v22 != v10);
        v8 = v5[4];
      }
      result = (_QWORD *)(*(uint64_t (**)(_QWORD, uint64_t))(*(_QWORD *)*v5 + 40))(*v5, v8);
      goto LABEL_16;
    }
  }
  return result;
}

void re::DynamicArray<re::RenderGraphTargetData>::resize(uint64_t a1, unint64_t a2)
{
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  _QWORD *v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;

  v4 = *(_QWORD *)(a1 + 16);
  if (v4 >= a2)
  {
    if (v4 <= a2)
      return;
    v13 = 160 * a2;
    v14 = a2;
    do
    {
      v15 = *(_QWORD *)(a1 + 32) + v13;
      re::DynamicArray<re::RenderGraphDataStoreConnection>::deinit(v15 + 120);
      re::AssetHandle::~AssetHandle((re::AssetHandle *)(v15 + 88));
      re::StringID::destroyString((re::StringID *)v15);
      ++v14;
      v13 += 160;
    }
    while (v14 < *(_QWORD *)(a1 + 16));
  }
  else
  {
    if (*(_QWORD *)(a1 + 8) < a2)
    {
      re::DynamicArray<re::RenderGraphTargetData>::setCapacity((_QWORD *)a1, a2);
      v4 = *(_QWORD *)(a1 + 16);
    }
    v5 = a2 - v4;
    if (a2 > v4)
    {
      v6 = 160 * v4 + 152;
      __asm { FMOV            V1.2S, #1.0 }
      do
      {
        v12 = (_QWORD *)(*(_QWORD *)(a1 + 32) + v6);
        *(v12 - 19) = 0;
        *(v12 - 18) = &str_110;
        *(v12 - 17) = 2;
        *((_DWORD *)v12 - 32) = 2;
        *(v12 - 12) = -1;
        *(_QWORD *)((char *)v12 - 124) = -1;
        *(_QWORD *)((char *)v12 - 116) = -1;
        *(_QWORD *)((char *)v12 - 108) = -1;
        *(v12 - 11) = _D1;
        *(v12 - 10) = 0;
        *((_DWORD *)v12 - 18) = 2;
        *v12 = 0;
        *(v12 - 3) = 0;
        *(v12 - 2) = 0;
        *(v12 - 4) = 0;
        *((_DWORD *)v12 - 2) = 0;
        *(_QWORD *)((char *)v12 - 68) = 0;
        *(_QWORD *)((char *)v12 - 52) = 0;
        *(_QWORD *)((char *)v12 - 60) = 0;
        v6 += 160;
        *(_QWORD *)((char *)v12 - 47) = 0;
        --v5;
      }
      while (v5);
    }
  }
  *(_QWORD *)(a1 + 16) = a2;
  ++*(_DWORD *)(a1 + 24);
}

_QWORD *re::TypeBuilderHelper::registerDynamicArray<re::RenderGraphTargetData>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,void *)#1}::__invoke(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *result;

  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_DWORD *)(a1 + 24) = 0;
  *(_QWORD *)a1 = a3;
  result = re::DynamicArray<re::RenderGraphTargetData>::setCapacity((_QWORD *)a1, 0);
  ++*(_DWORD *)(a1 + 24);
  return result;
}

uint64_t re::TypeBuilderHelper::registerDynamicArray<re::RenderGraphTargetData>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *)#1}::__invoke(uint64_t a1)
{
  return *(_QWORD *)(a1 + 16);
}

void re::TypeBuilderHelper::registerDynamicArray<re::RenderGraphTargetData>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,unsigned long)#1}::__invoke(uint64_t a1, uint64_t a2, re::Allocator *a3, unint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _anonymous_namespace_ *v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  _BYTE v15[32];
  _BYTE v16[8];
  uint64_t v17;

  if (*(re::Allocator **)a1 == a3)
  {
    v8 = *(_QWORD *)(a1 + 16);
    *(_QWORD *)(a1 + 16) = 0;
    if (v8)
    {
      v9 = *(_QWORD *)(a1 + 32);
      v10 = 160 * v8;
      do
      {
        re::DynamicArray<re::RenderGraphDataStoreConnection>::deinit(v9 + 120);
        re::AssetHandle::~AssetHandle((re::AssetHandle *)(v9 + 88));
        re::StringID::destroyString((re::StringID *)v9);
        v9 += 160;
        v10 -= 160;
      }
      while (v10);
    }
  }
  else
  {
    re::DynamicArray<re::RenderGraphTargetData>::deinit(a1);
    *(_QWORD *)a1 = a3;
    re::DynamicArray<re::RenderGraphTargetData>::setCapacity((_QWORD *)a1, a4);
  }
  ++*(_DWORD *)(a1 + 24);
  re::DynamicArray<re::RenderGraphTargetData>::resize(a1, a4);
  {
    re::TypeRegistry::typeInfo(*(_QWORD **)a2, *(_QWORD *)(*(_QWORD *)(a2 + 16) + 72), v16);
    re::TypeInfo::TypeInfo((uint64_t)v15, (uint64_t)&v17);
    v12 = *(_QWORD *)(a1 + 16);
    if (v12)
    {
      v13 = *(char **)(a1 + 32);
      v14 = 160 * v12;
      do
      {
        re::TypeInfo::destruct((re::TypeInfo *)v15, v13, a3, 0);
        re::TypeInfo::construct((re::TypeInfo *)v15, (void **)v13, a3, 0);
        v13 += 160;
        v14 -= 160;
      }
      while (v14);
    }
  }
}

uint64_t re::TypeBuilderHelper::registerDynamicArray<re::RenderGraphTargetData>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,unsigned long)#1}::__invoke(uint64_t a1, unint64_t a2)
{
  if (*(_QWORD *)(a1 + 16) <= a2)
  {
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  return *(_QWORD *)(a1 + 32) + 160 * a2;
}

uint64_t re::TypeBuilderHelper::registerDynamicArray<re::RenderGraphTargetData>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::Allocator *)#1}::__invoke(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 32))(a2, 16, 8);
  *(_QWORD *)result = a1;
  *(_DWORD *)(result + 8) = *(_DWORD *)(a1 + 24);
  *(_DWORD *)(result + 12) = -1;
  return result;
}

uint64_t re::TypeBuilderHelper::registerDynamicArray<re::RenderGraphTargetData>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *)#2}::__invoke(_DWORD *a1, uint64_t a2)
{
  uint64_t v2;
  int v3;
  unint64_t v4;
  uint64_t result;

  v2 = *(_QWORD *)a1;
  if (a1[2] == *(_DWORD *)(*(_QWORD *)a1 + 24))
  {
    v3 = a1[3];
    v4 = *(_QWORD *)(v2 + 16);
    if (v3 < (int)v4)
      a1[3] = ++v3;
    if (v4 <= v3)
      return 0;
    else
      return *(_QWORD *)(v2 + 32) + 160 * v3;
  }
  else
  {
    re::internal::assertLog((re::internal *)4, a2, "assertion failure: '%s' (%s:line %i) DynamicArray elements may not be added or removed during iteration.", "iter->originalVersion == iter->array->version()", "operator()", 313);
    result = _os_crash();
    __break(1u);
  }
  return result;
}

uint64_t re::TypeBuilderHelper::registerDynamicArray<re::RenderGraphTargetData>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::Allocator *)#2}::__invoke(uint64_t result, uint64_t a2)
{
  if (result)
    return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 40))(a2, result);
  return result;
}

_QWORD *re::IntrospectionDynamicArray<re::RenderGraphBufferData>::~IntrospectionDynamicArray(_QWORD *a1)
{
  *a1 = &off_24ED1FA08;
  re::SerializedReference<re::IntrospectionBase const*>::reset(a1 + 6);
  *a1 = &off_24ED426B8;
  objc_destructInstance(a1 + 1);
  return a1;
}

void re::IntrospectionDynamicArray<re::RenderGraphBufferData>::~IntrospectionDynamicArray(_QWORD *a1)
{
  *a1 = &off_24ED1FA08;
  re::SerializedReference<re::IntrospectionBase const*>::reset(a1 + 6);
  *a1 = &off_24ED426B8;
  objc_destructInstance(a1 + 1);
  JUMPOUT(0x2276933B8);
}

void re::IntrospectionDynamicArray<re::RenderGraphBufferData>::construct(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)(a2 + 32) = 0;
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)a2 = 0;
  *(_DWORD *)(a2 + 24) = 0;
}

uint64_t re::IntrospectionDynamicArray<re::RenderGraphBufferData>::destroy(uint64_t a1, uint64_t a2)
{
  return re::DynamicArray<re::RenderGraphBufferData>::deinit(a2);
}

_QWORD *re::IntrospectionDynamicArray<re::RenderGraphBufferData>::init(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *result;

  re::DynamicArray<re::RenderGraphBufferData>::deinit(a2);
  *(_QWORD *)a2 = a3;
  result = re::DynamicArray<re::RenderGraphBufferData>::setCapacity((_QWORD *)a2, 0);
  ++*(_DWORD *)(a2 + 24);
  return result;
}

void re::IntrospectionDynamicArray<re::RenderGraphBufferData>::resize(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unint64_t a5)
{
  unint64_t v10;
  unint64_t i;

  if (!*(_QWORD *)a4)
  {
    *(_QWORD *)a4 = a2;
    re::DynamicArray<re::RenderGraphBufferData>::setCapacity((_QWORD *)a4, a5);
    ++*(_DWORD *)(a4 + 24);
  }
  v10 = *(_QWORD *)(a4 + 16);
  if (v10 >= a5)
  {
    if (v10 > a5)
      re::DynamicArray<re::RenderGraphBufferData>::resize(a4, a5);
  }
  else
  {
    re::DynamicArray<re::RenderGraphBufferData>::setCapacity((_QWORD *)a4, a5);
    for (i = a5 - *(_QWORD *)(a4 + 16); i; --i)
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a1 + 80))(a1, a2, a3, a4);
  }
}

re::IntrospectionBase *re::IntrospectionDynamicArray<re::RenderGraphBufferData>::addElement(re::Allocator **a1, re *a2, int a3, uint64_t a4)
{
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  __int128 v14;
  re::IntrospectionBase *v15;
  uint64_t v17;
  void *v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  uint64_t v23;

  v17 = 0;
  v18 = &str_110;
  *(_QWORD *)&v19 = 2;
  *((_QWORD *)&v19 + 1) = -1;
  *(_QWORD *)&v20 = -1;
  *((_QWORD *)&v20 + 1) = 1065353216;
  v23 = 0;
  v21 = 0uLL;
  v22 = 0uLL;
  v9 = *(_QWORD *)(a4 + 8);
  v8 = *(_QWORD *)(a4 + 16);
  if (v8 >= v9)
  {
    v10 = v8 + 1;
    if (v9 < v8 + 1)
    {
      if (*(_QWORD *)a4)
      {
        v11 = 2 * v9;
        if (!v9)
          v11 = 8;
        if (v11 <= v10)
          v12 = v10;
        else
          v12 = v11;
        re::DynamicArray<re::RenderGraphBufferData>::setCapacity((_QWORD *)a4, v12);
      }
      else
      {
        re::DynamicArray<re::RenderGraphBufferData>::setCapacity((_QWORD *)a4, v10);
        ++*(_DWORD *)(a4 + 24);
      }
    }
    v8 = *(_QWORD *)(a4 + 16);
  }
  v13 = *(_QWORD *)(a4 + 32) + 88 * v8;
  *(_QWORD *)v13 = 0;
  *(_QWORD *)(v13 + 8) = &str_110;
  v17 = 0;
  v18 = &str_110;
  v14 = v20;
  *(_OWORD *)(v13 + 16) = v19;
  *(_OWORD *)(v13 + 32) = v14;
  *(_QWORD *)(v13 + 56) = 0;
  *(_QWORD *)(v13 + 64) = 0;
  *(_QWORD *)(v13 + 48) = 0;
  *(_DWORD *)(v13 + 72) = 0;
  v21 = 0uLL;
  *(_QWORD *)&v22 = 0;
  *(_QWORD *)(v13 + 80) = 0;
  v23 = 0;
  DWORD2(v22) = 1;
  *(_DWORD *)(v13 + 72) = 1;
  ++*(_QWORD *)(a4 + 16);
  ++*(_DWORD *)(a4 + 24);
  re::DynamicArray<re::RenderGraphDataStoreConnection>::deinit((uint64_t)&v21);
  re::StringID::destroyString((re::StringID *)&v17);
  v15 = (re::IntrospectionBase *)(*(_QWORD *)(a4 + 32) + 88 * *(_QWORD *)(a4 + 16) - 88);
  re::introspectionInitElement(a2, a3, a1[6], v15);
  return v15;
}

void sub_225351210(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;

  re::DynamicArray<re::RenderGraphDataStoreConnection>::deinit(v9);
  re::StringID::destroyString((re::StringID *)&a9);
  _Unwind_Resume(a1);
}

uint64_t re::IntrospectionDynamicArray<re::RenderGraphBufferData>::size(uint64_t a1, uint64_t a2)
{
  return *(_QWORD *)(a2 + 16);
}

uint64_t re::IntrospectionDynamicArray<re::RenderGraphBufferData>::elementAt(uint64_t a1, uint64_t a2, unint64_t a3)
{
  if (*(_QWORD *)(a2 + 16) <= a3)
  {
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  return *(_QWORD *)(a2 + 32) + 88 * a3;
}

{
  if (*(_QWORD *)(a2 + 16) <= a3)
  {
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  return *(_QWORD *)(a2 + 32) + 88 * a3;
}

_QWORD *re::DynamicArray<re::RenderGraphBufferData>::setCapacity(_QWORD *result, unint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v5;
  uint64_t v6;
  unint64_t *v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t *v10;
  unint64_t *v11;
  uint64_t v12;
  __int128 v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  v3 = result[1];
  if (v3 != a2)
  {
    v5 = result;
    if (result[2] <= a2)
    {
      result = (_QWORD *)*result;
      if (!*v5)
      {
        result = (_QWORD *)re::DynamicArray<re::RenderGraphBufferData>::setCapacity(v5, a2);
        ++*((_DWORD *)v5 + 6);
        return result;
      }
      if (a2)
      {
        if (is_mul_ok(a2, 0x58uLL))
        {
          v2 = 88 * a2;
          result = (_QWORD *)(*(uint64_t (**)(_QWORD *, unint64_t, uint64_t))(*result + 32))(result, 88 * a2, 8);
          if (result)
          {
            v7 = result;
            if (!v5[1])
              goto LABEL_16;
            goto LABEL_11;
          }
        }
        else
        {
          re::internal::assertLog((re::internal *)6, a2, "assertion failure: '%s' (%s:line %i) Size overflow in DynamicArray<T>::setCapacity(). Element size = %zu, capacity = %zu", "!overflow", "setCapacity", 615, 88, a2);
          _os_crash();
          __break(1u);
        }
        re::internal::assertLog((re::internal *)6, v6, "assertion failure: '%s' (%s:line %i) DynamicArray<T> is out of memory (tried to allocate %zu bytes from allocator '%s').", "newData", "setCapacity", 619, v2, *(_QWORD *)(*v5 + 8));
        result = (_QWORD *)_os_crash();
        __break(1u);
        return result;
      }
      v7 = 0;
      if (!v3)
      {
LABEL_16:
        v5[4] = v7;
        v5[1] = a2;
        return result;
      }
LABEL_11:
      v8 = (uint64_t *)v5[4];
      v9 = v5[2];
      if (v9)
      {
        v10 = &v8[11 * v9];
        v11 = v7;
        do
        {
          v12 = *v8;
          *v11 = *v11 & 0xFFFFFFFFFFFFFFFELL | *v8 & 1;
          *v11 = *v8 & 0xFFFFFFFFFFFFFFFELL | v12 & 1;
          v11[1] = v8[1];
          *v8 = 0;
          v8[1] = (uint64_t)&str_110;
          v13 = *((_OWORD *)v8 + 2);
          *((_OWORD *)v11 + 1) = *((_OWORD *)v8 + 1);
          *((_OWORD *)v11 + 2) = v13;
          v11[10] = 0;
          *((_DWORD *)v11 + 18) = 0;
          v11[7] = 0;
          v11[8] = 0;
          v11[6] = 0;
          v14 = v8[7];
          v11[6] = v8[6];
          v8[6] = 0;
          v11[7] = v14;
          v8[7] = 0;
          v15 = v11[8];
          v11[8] = v8[8];
          v8[8] = v15;
          v16 = v11[10];
          v11[10] = v8[10];
          v8[10] = v16;
          ++*((_DWORD *)v8 + 18);
          ++*((_DWORD *)v11 + 18);
          re::DynamicArray<re::RenderGraphDataStoreConnection>::deinit((uint64_t)(v8 + 6));
          re::StringID::destroyString((re::StringID *)v8);
          v8 += 11;
          v11 += 11;
        }
        while (v8 != v10);
        v8 = (uint64_t *)v5[4];
      }
      result = (_QWORD *)(*(uint64_t (**)(_QWORD, uint64_t *))(*(_QWORD *)*v5 + 40))(*v5, v8);
      goto LABEL_16;
    }
  }
  return result;
}

void re::DynamicArray<re::RenderGraphBufferData>::resize(uint64_t a1, unint64_t a2)
{
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  unint64_t v9;
  re::StringID *v10;

  v4 = *(_QWORD *)(a1 + 16);
  if (v4 >= a2)
  {
    if (v4 <= a2)
      return;
    v8 = 88 * a2;
    v9 = a2;
    do
    {
      v10 = (re::StringID *)(*(_QWORD *)(a1 + 32) + v8);
      re::DynamicArray<re::RenderGraphDataStoreConnection>::deinit((uint64_t)v10 + 48);
      re::StringID::destroyString(v10);
      ++v9;
      v8 += 88;
    }
    while (v9 < *(_QWORD *)(a1 + 16));
  }
  else
  {
    if (*(_QWORD *)(a1 + 8) < a2)
    {
      re::DynamicArray<re::RenderGraphBufferData>::setCapacity((_QWORD *)a1, a2);
      v4 = *(_QWORD *)(a1 + 16);
    }
    v5 = a2 - v4;
    if (a2 > v4)
    {
      v6 = 88 * v4 + 80;
      do
      {
        v7 = (_QWORD *)(*(_QWORD *)(a1 + 32) + v6);
        *(v7 - 10) = 0;
        *(v7 - 9) = &str_110;
        *((_DWORD *)v7 - 16) = 2;
        *(v7 - 7) = -1;
        *(v7 - 6) = -1;
        *((_DWORD *)v7 - 10) = 1065353216;
        *((_BYTE *)v7 - 36) = 0;
        *v7 = 0;
        *(v7 - 3) = 0;
        *(v7 - 2) = 0;
        *(v7 - 4) = 0;
        v6 += 88;
        *((_DWORD *)v7 - 2) = 0;
        --v5;
      }
      while (v5);
    }
  }
  *(_QWORD *)(a1 + 16) = a2;
  ++*(_DWORD *)(a1 + 24);
}

_QWORD *re::TypeBuilderHelper::registerDynamicArray<re::RenderGraphBufferData>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,void *)#1}::__invoke(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *result;

  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_DWORD *)(a1 + 24) = 0;
  *(_QWORD *)a1 = a3;
  result = re::DynamicArray<re::RenderGraphBufferData>::setCapacity((_QWORD *)a1, 0);
  ++*(_DWORD *)(a1 + 24);
  return result;
}

uint64_t re::TypeBuilderHelper::registerDynamicArray<re::RenderGraphBufferData>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *)#1}::__invoke(uint64_t a1)
{
  return *(_QWORD *)(a1 + 16);
}

void re::TypeBuilderHelper::registerDynamicArray<re::RenderGraphBufferData>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,unsigned long)#1}::__invoke(uint64_t a1, uint64_t a2, re::Allocator *a3, unint64_t a4)
{
  uint64_t v8;
  re::StringID *v9;
  uint64_t v10;
  _anonymous_namespace_ *v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  _BYTE v15[32];
  _BYTE v16[8];
  uint64_t v17;

  if (*(re::Allocator **)a1 == a3)
  {
    v8 = *(_QWORD *)(a1 + 16);
    *(_QWORD *)(a1 + 16) = 0;
    if (v8)
    {
      v9 = *(re::StringID **)(a1 + 32);
      v10 = 88 * v8;
      do
      {
        re::DynamicArray<re::RenderGraphDataStoreConnection>::deinit((uint64_t)v9 + 48);
        re::StringID::destroyString(v9);
        v9 = (re::StringID *)((char *)v9 + 88);
        v10 -= 88;
      }
      while (v10);
    }
  }
  else
  {
    re::DynamicArray<re::RenderGraphBufferData>::deinit(a1);
    *(_QWORD *)a1 = a3;
    re::DynamicArray<re::RenderGraphBufferData>::setCapacity((_QWORD *)a1, a4);
  }
  ++*(_DWORD *)(a1 + 24);
  re::DynamicArray<re::RenderGraphBufferData>::resize(a1, a4);
  {
    re::TypeRegistry::typeInfo(*(_QWORD **)a2, *(_QWORD *)(*(_QWORD *)(a2 + 16) + 72), v16);
    re::TypeInfo::TypeInfo((uint64_t)v15, (uint64_t)&v17);
    v12 = *(_QWORD *)(a1 + 16);
    if (v12)
    {
      v13 = *(char **)(a1 + 32);
      v14 = 88 * v12;
      do
      {
        re::TypeInfo::destruct((re::TypeInfo *)v15, v13, a3, 0);
        re::TypeInfo::construct((re::TypeInfo *)v15, (void **)v13, a3, 0);
        v13 += 88;
        v14 -= 88;
      }
      while (v14);
    }
  }
}

uint64_t re::TypeBuilderHelper::registerDynamicArray<re::RenderGraphBufferData>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,unsigned long)#1}::__invoke(uint64_t a1, unint64_t a2)
{
  if (*(_QWORD *)(a1 + 16) <= a2)
  {
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  return *(_QWORD *)(a1 + 32) + 88 * a2;
}

uint64_t re::TypeBuilderHelper::registerDynamicArray<re::RenderGraphBufferData>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::Allocator *)#1}::__invoke(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 32))(a2, 16, 8);
  *(_QWORD *)result = a1;
  *(_DWORD *)(result + 8) = *(_DWORD *)(a1 + 24);
  *(_DWORD *)(result + 12) = -1;
  return result;
}

uint64_t re::TypeBuilderHelper::registerDynamicArray<re::RenderGraphBufferData>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *)#2}::__invoke(_DWORD *a1, uint64_t a2)
{
  uint64_t v2;
  int v3;
  unint64_t v4;
  uint64_t result;

  v2 = *(_QWORD *)a1;
  if (a1[2] == *(_DWORD *)(*(_QWORD *)a1 + 24))
  {
    v3 = a1[3];
    v4 = *(_QWORD *)(v2 + 16);
    if (v3 < (int)v4)
      a1[3] = ++v3;
    if (v4 <= v3)
      return 0;
    else
      return *(_QWORD *)(v2 + 32) + 88 * v3;
  }
  else
  {
    re::internal::assertLog((re::internal *)4, a2, "assertion failure: '%s' (%s:line %i) DynamicArray elements may not be added or removed during iteration.", "iter->originalVersion == iter->array->version()", "operator()", 313);
    result = _os_crash();
    __break(1u);
  }
  return result;
}

uint64_t re::TypeBuilderHelper::registerDynamicArray<re::RenderGraphBufferData>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::Allocator *)#2}::__invoke(uint64_t result, uint64_t a2)
{
  if (result)
    return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 40))(a2, result);
  return result;
}

_QWORD *re::IntrospectionDynamicArray<re::RenderGraphNodeDataPointer>::~IntrospectionDynamicArray(_QWORD *a1)
{
  *a1 = &off_24ED1FA08;
  re::SerializedReference<re::IntrospectionBase const*>::reset(a1 + 6);
  *a1 = &off_24ED426B8;
  objc_destructInstance(a1 + 1);
  return a1;
}

void re::IntrospectionDynamicArray<re::RenderGraphNodeDataPointer>::~IntrospectionDynamicArray(_QWORD *a1)
{
  *a1 = &off_24ED1FA08;
  re::SerializedReference<re::IntrospectionBase const*>::reset(a1 + 6);
  *a1 = &off_24ED426B8;
  objc_destructInstance(a1 + 1);
  JUMPOUT(0x2276933B8);
}

void re::IntrospectionDynamicArray<re::RenderGraphNodeDataPointer>::construct(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)(a2 + 32) = 0;
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)a2 = 0;
  *(_DWORD *)(a2 + 24) = 0;
}

uint64_t re::IntrospectionDynamicArray<re::RenderGraphNodeDataPointer>::destroy(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  result = *(_QWORD *)a2;
  if (*(_QWORD *)a2)
  {
    if (*(_QWORD *)(a2 + 32))
      result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 40))(result);
    *(_QWORD *)(a2 + 32) = 0;
    *(_QWORD *)(a2 + 8) = 0;
    *(_QWORD *)(a2 + 16) = 0;
    *(_QWORD *)a2 = 0;
    ++*(_DWORD *)(a2 + 24);
  }
  return result;
}

_QWORD *re::IntrospectionDynamicArray<re::RenderGraphNodeDataPointer>::init(uint64_t a1, _QWORD *a2, uint64_t a3)
{
  _QWORD *result;

  if (*a2)
  {
    if (a2[4])
      (*(void (**)(_QWORD))(*(_QWORD *)*a2 + 40))(*a2);
    a2[4] = 0;
    a2[1] = 0;
    a2[2] = 0;
    ++*((_DWORD *)a2 + 6);
  }
  *a2 = a3;
  result = re::DynamicArray<re::RigNodeConstraint>::setCapacity(a2, 0);
  ++*((_DWORD *)a2 + 6);
  return result;
}

void re::IntrospectionDynamicArray<re::RenderGraphNodeDataPointer>::resize(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unint64_t a5)
{
  unint64_t v10;
  unint64_t i;

  if (!*(_QWORD *)a4)
  {
    *(_QWORD *)a4 = a2;
    re::DynamicArray<re::RigNodeConstraint>::setCapacity((_QWORD *)a4, a5);
    ++*(_DWORD *)(a4 + 24);
  }
  v10 = *(_QWORD *)(a4 + 16);
  if (v10 >= a5)
  {
    if (v10 > a5)
      re::DynamicArray<re::RenderGraphNodeDataPointer>::resize(a4, a5);
  }
  else
  {
    re::DynamicArray<re::RigNodeConstraint>::setCapacity((_QWORD *)a4, a5);
    for (i = a5 - *(_QWORD *)(a4 + 16); i; --i)
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a1 + 80))(a1, a2, a3, a4);
  }
}

re::IntrospectionBase *re::IntrospectionDynamicArray<re::RenderGraphNodeDataPointer>::addElement(re::Allocator **a1, re *a2, int a3, uint64_t a4)
{
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  BOOL v12;
  unint64_t v13;
  unint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  re::IntrospectionBase *v17;

  v8 = *(_QWORD *)(a4 + 8);
  v9 = *(_QWORD *)(a4 + 16);
  if (v9 >= v8)
  {
    v10 = v9 + 1;
    if (v8 < v9 + 1)
    {
      if (*(_QWORD *)a4)
      {
        v11 = 2 * v8;
        v12 = v8 == 0;
        v13 = 8;
        if (!v12)
          v13 = v11;
        if (v13 <= v10)
          v14 = v10;
        else
          v14 = v13;
        re::DynamicArray<re::RigNodeConstraint>::setCapacity((_QWORD *)a4, v14);
      }
      else
      {
        re::DynamicArray<re::RigNodeConstraint>::setCapacity((_QWORD *)a4, v10);
        ++*(_DWORD *)(a4 + 24);
      }
    }
    v9 = *(_QWORD *)(a4 + 16);
  }
  v15 = (_QWORD *)(*(_QWORD *)(a4 + 32) + 16 * v9);
  *v15 = 0;
  v15[1] = 0;
  v16 = *(_QWORD *)(a4 + 16);
  *(_QWORD *)(a4 + 16) = v16 + 1;
  ++*(_DWORD *)(a4 + 24);
  v17 = (re::IntrospectionBase *)(*(_QWORD *)(a4 + 32) + 16 * v16);
  re::introspectionInitElement(a2, a3, a1[6], v17);
  return v17;
}

uint64_t re::IntrospectionDynamicArray<re::RenderGraphNodeDataPointer>::size(uint64_t a1, uint64_t a2)
{
  return *(_QWORD *)(a2 + 16);
}

uint64_t re::IntrospectionDynamicArray<re::RenderGraphNodeDataPointer>::elementAt(uint64_t a1, uint64_t a2, unint64_t a3)
{
  if (*(_QWORD *)(a2 + 16) <= a3)
  {
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  return *(_QWORD *)(a2 + 32) + 16 * a3;
}

{
  if (*(_QWORD *)(a2 + 16) <= a3)
  {
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  return *(_QWORD *)(a2 + 32) + 16 * a3;
}

void re::DynamicArray<re::RenderGraphNodeDataPointer>::resize(uint64_t a1, unint64_t a2)
{
  unint64_t v4;
  void *v5;
  uint64_t v6;

  v4 = *(_QWORD *)(a1 + 16);
  if (v4 >= a2)
  {
    if (v4 <= a2)
      return;
  }
  else
  {
    if (*(_QWORD *)(a1 + 8) < a2)
    {
      re::DynamicArray<re::RigNodeConstraint>::setCapacity((_QWORD *)a1, a2);
      v4 = *(_QWORD *)(a1 + 16);
    }
    if (v4 < a2)
    {
      v5 = (void *)(*(_QWORD *)(a1 + 32) + 16 * v4);
      v6 = 16 * a2 - 16 * v4;
      if (v6 >= 1)
        bzero(v5, 16 * (((unint64_t)v6 >> 4) - ((unint64_t)v6 > 0xF)) + 16);
    }
  }
  *(_QWORD *)(a1 + 16) = a2;
  ++*(_DWORD *)(a1 + 24);
}

_QWORD *re::TypeBuilderHelper::registerDynamicArray<re::RenderGraphNodeDataPointer>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,void *)#1}::__invoke(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *result;

  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_DWORD *)(a1 + 24) = 0;
  *(_QWORD *)a1 = a3;
  result = re::DynamicArray<re::RigNodeConstraint>::setCapacity((_QWORD *)a1, 0);
  ++*(_DWORD *)(a1 + 24);
  return result;
}

uint64_t re::TypeBuilderHelper::registerDynamicArray<re::RenderGraphNodeDataPointer>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,void *)#2}::__invoke(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)a1;
  if (result)
  {
    if (*(_QWORD *)(a1 + 32))
      result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 40))(result);
    *(_QWORD *)(a1 + 32) = 0;
    *(_QWORD *)(a1 + 8) = 0;
    *(_QWORD *)(a1 + 16) = 0;
    *(_QWORD *)a1 = 0;
    ++*(_DWORD *)(a1 + 24);
  }
  return result;
}

uint64_t re::TypeBuilderHelper::registerDynamicArray<re::RenderGraphNodeDataPointer>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *)#1}::__invoke(uint64_t a1)
{
  return *(_QWORD *)(a1 + 16);
}

void re::TypeBuilderHelper::registerDynamicArray<re::RenderGraphNodeDataPointer>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,unsigned long)#1}::__invoke(uint64_t a1, uint64_t a2, re::Allocator *a3, unint64_t a4)
{
  re::Allocator *v8;
  _anonymous_namespace_ *v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  _BYTE v13[32];
  _BYTE v14[8];
  uint64_t v15;

  v8 = *(re::Allocator **)a1;
  if (v8 == a3)
  {
    *(_QWORD *)(a1 + 16) = 0;
  }
  else
  {
    if (v8)
    {
      if (*(_QWORD *)(a1 + 32))
        (*(void (**)(re::Allocator *))(*(_QWORD *)v8 + 40))(v8);
      *(_QWORD *)(a1 + 32) = 0;
      *(_QWORD *)(a1 + 8) = 0;
      *(_QWORD *)(a1 + 16) = 0;
      ++*(_DWORD *)(a1 + 24);
    }
    *(_QWORD *)a1 = a3;
    re::DynamicArray<re::RigNodeConstraint>::setCapacity((_QWORD *)a1, a4);
  }
  ++*(_DWORD *)(a1 + 24);
  re::DynamicArray<re::RenderGraphNodeDataPointer>::resize(a1, a4);
  {
    re::TypeRegistry::typeInfo(*(_QWORD **)a2, *(_QWORD *)(*(_QWORD *)(a2 + 16) + 72), v14);
    re::TypeInfo::TypeInfo((uint64_t)v13, (uint64_t)&v15);
    v10 = *(_QWORD *)(a1 + 16);
    if (v10)
    {
      v11 = *(char **)(a1 + 32);
      v12 = 16 * v10;
      do
      {
        re::TypeInfo::destruct((re::TypeInfo *)v13, v11, a3, 0);
        re::TypeInfo::construct((re::TypeInfo *)v13, (void **)v11, a3, 0);
        v11 += 16;
        v12 -= 16;
      }
      while (v12);
    }
  }
}

uint64_t re::TypeBuilderHelper::registerDynamicArray<re::RenderGraphNodeDataPointer>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,unsigned long)#1}::__invoke(uint64_t a1, unint64_t a2)
{
  if (*(_QWORD *)(a1 + 16) <= a2)
  {
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  return *(_QWORD *)(a1 + 32) + 16 * a2;
}

uint64_t re::TypeBuilderHelper::registerDynamicArray<re::RenderGraphNodeDataPointer>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::Allocator *)#1}::__invoke(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 32))(a2, 16, 8);
  *(_QWORD *)result = a1;
  *(_DWORD *)(result + 8) = *(_DWORD *)(a1 + 24);
  *(_DWORD *)(result + 12) = -1;
  return result;
}

uint64_t re::TypeBuilderHelper::registerDynamicArray<re::RenderGraphNodeDataPointer>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *)#2}::__invoke(_DWORD *a1, uint64_t a2)
{
  uint64_t v2;
  int v3;
  unint64_t v4;
  uint64_t result;

  v2 = *(_QWORD *)a1;
  if (a1[2] == *(_DWORD *)(*(_QWORD *)a1 + 24))
  {
    v3 = a1[3];
    v4 = *(_QWORD *)(v2 + 16);
    if (v3 < (int)v4)
      a1[3] = ++v3;
    if (v4 <= v3)
      return 0;
    else
      return *(_QWORD *)(v2 + 32) + 16 * v3;
  }
  else
  {
    re::internal::assertLog((re::internal *)4, a2, "assertion failure: '%s' (%s:line %i) DynamicArray elements may not be added or removed during iteration.", "iter->originalVersion == iter->array->version()", "operator()", 313);
    result = _os_crash();
    __break(1u);
  }
  return result;
}

uint64_t re::TypeBuilderHelper::registerDynamicArray<re::RenderGraphNodeDataPointer>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::Allocator *)#2}::__invoke(uint64_t result, uint64_t a2)
{
  if (result)
    return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 40))(a2, result);
  return result;
}

_QWORD *re::IntrospectionDynamicArray<re::RenderGraphInputData>::~IntrospectionDynamicArray(_QWORD *a1)
{
  *a1 = &off_24ED1FA08;
  re::SerializedReference<re::IntrospectionBase const*>::reset(a1 + 6);
  *a1 = &off_24ED426B8;
  objc_destructInstance(a1 + 1);
  return a1;
}

void re::IntrospectionDynamicArray<re::RenderGraphInputData>::~IntrospectionDynamicArray(_QWORD *a1)
{
  *a1 = &off_24ED1FA08;
  re::SerializedReference<re::IntrospectionBase const*>::reset(a1 + 6);
  *a1 = &off_24ED426B8;
  objc_destructInstance(a1 + 1);
  JUMPOUT(0x2276933B8);
}

void re::IntrospectionDynamicArray<re::RenderGraphInputData>::construct(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)(a2 + 32) = 0;
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)a2 = 0;
  *(_DWORD *)(a2 + 24) = 0;
}

uint64_t re::IntrospectionDynamicArray<re::RenderGraphInputData>::destroy(uint64_t a1, uint64_t a2)
{
  return re::DynamicArray<re::RenderGraphInputData>::deinit(a2);
}

_QWORD *re::IntrospectionDynamicArray<re::RenderGraphInputData>::init(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *result;

  re::DynamicArray<re::RenderGraphInputData>::deinit(a2);
  *(_QWORD *)a2 = a3;
  result = re::DynamicArray<re::RenderGraphInputData>::setCapacity((_QWORD *)a2, 0);
  ++*(_DWORD *)(a2 + 24);
  return result;
}

void re::IntrospectionDynamicArray<re::RenderGraphInputData>::resize(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unint64_t a5)
{
  unint64_t v10;
  unint64_t i;

  if (!*(_QWORD *)a4)
  {
    *(_QWORD *)a4 = a2;
    re::DynamicArray<re::RenderGraphInputData>::setCapacity((_QWORD *)a4, a5);
    ++*(_DWORD *)(a4 + 24);
  }
  v10 = *(_QWORD *)(a4 + 16);
  if (v10 >= a5)
  {
    if (v10 > a5)
      re::DynamicArray<re::RenderGraphInputData>::resize(a4, a5);
  }
  else
  {
    re::DynamicArray<re::RenderGraphInputData>::setCapacity((_QWORD *)a4, a5);
    for (i = a5 - *(_QWORD *)(a4 + 16); i; --i)
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a1 + 80))(a1, a2, a3, a4);
  }
}

re::IntrospectionBase *re::IntrospectionDynamicArray<re::RenderGraphInputData>::addElement(re::Allocator **a1, re *a2, int a3, uint64_t a4)
{
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  re::IntrospectionBase *v14;
  uint64_t v16;
  void *v17;
  uint64_t v18;
  void *v19;
  uint64_t v20;
  uint64_t v21;
  void *v22;

  v16 = 0;
  v18 = 0;
  v20 = 0;
  v21 = 0;
  v17 = &str_110;
  v19 = &str_110;
  v22 = &str_110;
  v9 = *(_QWORD *)(a4 + 8);
  v8 = *(_QWORD *)(a4 + 16);
  if (v8 >= v9)
  {
    v10 = v8 + 1;
    if (v9 < v8 + 1)
    {
      if (*(_QWORD *)a4)
      {
        v11 = 2 * v9;
        if (!v9)
          v11 = 8;
        if (v11 <= v10)
          v12 = v10;
        else
          v12 = v11;
        re::DynamicArray<re::RenderGraphInputData>::setCapacity((_QWORD *)a4, v12);
      }
      else
      {
        re::DynamicArray<re::RenderGraphInputData>::setCapacity((_QWORD *)a4, v10);
        ++*(_DWORD *)(a4 + 24);
      }
    }
    v8 = *(_QWORD *)(a4 + 16);
  }
  v13 = *(_QWORD *)(a4 + 32) + 56 * v8;
  *(_QWORD *)v13 = 0;
  *(_QWORD *)(v13 + 8) = &str_110;
  v16 = 0;
  v17 = &str_110;
  *(_QWORD *)(v13 + 16) = 0;
  *(_QWORD *)(v13 + 24) = &str_110;
  v18 = 0;
  v19 = &str_110;
  *(_BYTE *)(v13 + 32) = 0;
  *(_QWORD *)(v13 + 40) = 0;
  *(_QWORD *)(v13 + 48) = &str_110;
  v21 = 0;
  v22 = &str_110;
  ++*(_QWORD *)(a4 + 16);
  ++*(_DWORD *)(a4 + 24);
  re::StringID::destroyString((re::StringID *)&v21);
  re::StringID::destroyString((re::StringID *)&v18);
  re::StringID::destroyString((re::StringID *)&v16);
  v14 = (re::IntrospectionBase *)(*(_QWORD *)(a4 + 32) + 56 * *(_QWORD *)(a4 + 16) - 56);
  re::introspectionInitElement(a2, a3, a1[6], v14);
  return v14;
}

void sub_22535288C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  re::RenderGraphInputData::~RenderGraphInputData((re::RenderGraphInputData *)&a9);
  _Unwind_Resume(a1);
}

uint64_t re::IntrospectionDynamicArray<re::RenderGraphInputData>::size(uint64_t a1, uint64_t a2)
{
  return *(_QWORD *)(a2 + 16);
}

uint64_t re::IntrospectionDynamicArray<re::RenderGraphInputData>::elementAt(uint64_t a1, uint64_t a2, unint64_t a3)
{
  if (*(_QWORD *)(a2 + 16) <= a3)
  {
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  return *(_QWORD *)(a2 + 32) + 56 * a3;
}

{
  if (*(_QWORD *)(a2 + 16) <= a3)
  {
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  return *(_QWORD *)(a2 + 32) + 56 * a3;
}

_QWORD *re::DynamicArray<re::RenderGraphInputData>::setCapacity(_QWORD *result, unint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v5;
  uint64_t v6;
  unint64_t *v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t *v10;
  unint64_t *v11;
  uint64_t v12;

  v3 = result[1];
  if (v3 != a2)
  {
    v5 = result;
    if (result[2] <= a2)
    {
      result = (_QWORD *)*result;
      if (!*v5)
      {
        result = (_QWORD *)re::DynamicArray<re::RenderGraphInputData>::setCapacity(v5, a2);
        ++*((_DWORD *)v5 + 6);
        return result;
      }
      if (a2)
      {
        if (is_mul_ok(a2, 0x38uLL))
        {
          v2 = 56 * a2;
          result = (_QWORD *)(*(uint64_t (**)(_QWORD *, unint64_t, uint64_t))(*result + 32))(result, 56 * a2, 8);
          if (result)
          {
            v7 = result;
            if (!v5[1])
              goto LABEL_16;
            goto LABEL_11;
          }
        }
        else
        {
          re::internal::assertLog((re::internal *)6, a2, "assertion failure: '%s' (%s:line %i) Size overflow in DynamicArray<T>::setCapacity(). Element size = %zu, capacity = %zu", "!overflow", "setCapacity", 615, 56, a2);
          _os_crash();
          __break(1u);
        }
        re::internal::assertLog((re::internal *)6, v6, "assertion failure: '%s' (%s:line %i) DynamicArray<T> is out of memory (tried to allocate %zu bytes from allocator '%s').", "newData", "setCapacity", 619, v2, *(_QWORD *)(*v5 + 8));
        result = (_QWORD *)_os_crash();
        __break(1u);
        return result;
      }
      v7 = 0;
      if (!v3)
      {
LABEL_16:
        v5[4] = v7;
        v5[1] = a2;
        return result;
      }
LABEL_11:
      v8 = (uint64_t *)v5[4];
      v9 = v5[2];
      if (v9)
      {
        v10 = &v8[7 * v9];
        v11 = v7;
        do
        {
          v12 = *v8;
          *v11 = *v11 & 0xFFFFFFFFFFFFFFFELL | *v8 & 1;
          *v11 = *v8 & 0xFFFFFFFFFFFFFFFELL | v12 & 1;
          v11[1] = v8[1];
          *v8 = 0;
          v8[1] = (uint64_t)&str_110;
          LOBYTE(v12) = v8[2];
          v11[2] = v11[2] & 0xFFFFFFFFFFFFFFFELL | v8[2] & 1;
          v11[2] = v8[2] & 0xFFFFFFFFFFFFFFFELL | v12 & 1;
          v11[3] = v8[3];
          v8[3] = (uint64_t)&str_110;
          v8[2] = 0;
          *((_BYTE *)v11 + 32) = *((_BYTE *)v8 + 32);
          LOBYTE(v12) = v8[5];
          v11[5] = v11[5] & 0xFFFFFFFFFFFFFFFELL | v8[5] & 1;
          v11[5] = v8[5] & 0xFFFFFFFFFFFFFFFELL | v12 & 1;
          v11[6] = v8[6];
          v8[6] = (uint64_t)&str_110;
          v8[5] = 0;
          re::StringID::destroyString((re::StringID *)(v8 + 5));
          re::StringID::destroyString((re::StringID *)(v8 + 2));
          re::StringID::destroyString((re::StringID *)v8);
          v8 += 7;
          v11 += 7;
        }
        while (v8 != v10);
        v8 = (uint64_t *)v5[4];
      }
      result = (_QWORD *)(*(uint64_t (**)(_QWORD, uint64_t *))(*(_QWORD *)*v5 + 40))(*v5, v8);
      goto LABEL_16;
    }
  }
  return result;
}

void re::DynamicArray<re::RenderGraphInputData>::resize(uint64_t a1, unint64_t a2)
{
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;

  v4 = *(_QWORD *)(a1 + 16);
  if (v4 >= a2)
  {
    if (v4 <= a2)
      return;
    v8 = 56 * a2;
    v9 = a2;
    do
    {
      v10 = *(_QWORD *)(a1 + 32) + v8;
      re::StringID::destroyString((re::StringID *)(v10 + 40));
      re::StringID::destroyString((re::StringID *)(v10 + 16));
      re::StringID::destroyString((re::StringID *)v10);
      ++v9;
      v8 += 56;
    }
    while (v9 < *(_QWORD *)(a1 + 16));
  }
  else
  {
    if (*(_QWORD *)(a1 + 8) < a2)
    {
      re::DynamicArray<re::RenderGraphInputData>::setCapacity((_QWORD *)a1, a2);
      v4 = *(_QWORD *)(a1 + 16);
    }
    v5 = a2 - v4;
    if (a2 > v4)
    {
      v6 = 56 * v4 + 48;
      do
      {
        v7 = (_QWORD *)(*(_QWORD *)(a1 + 32) + v6);
        *(v7 - 6) = 0;
        *(v7 - 5) = &str_110;
        *(v7 - 4) = 0;
        *(v7 - 3) = &str_110;
        *((_BYTE *)v7 - 16) = 0;
        *(v7 - 1) = 0;
        *v7 = &str_110;
        v6 += 56;
        --v5;
      }
      while (v5);
    }
  }
  *(_QWORD *)(a1 + 16) = a2;
  ++*(_DWORD *)(a1 + 24);
}

_QWORD *re::TypeBuilderHelper::registerDynamicArray<re::RenderGraphInputData>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,void *)#1}::__invoke(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *result;

  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_DWORD *)(a1 + 24) = 0;
  *(_QWORD *)a1 = a3;
  result = re::DynamicArray<re::RenderGraphInputData>::setCapacity((_QWORD *)a1, 0);
  ++*(_DWORD *)(a1 + 24);
  return result;
}

uint64_t re::TypeBuilderHelper::registerDynamicArray<re::RenderGraphInputData>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *)#1}::__invoke(uint64_t a1)
{
  return *(_QWORD *)(a1 + 16);
}

void re::TypeBuilderHelper::registerDynamicArray<re::RenderGraphInputData>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,unsigned long)#1}::__invoke(uint64_t a1, uint64_t a2, re::Allocator *a3, unint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _anonymous_namespace_ *v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  _BYTE v15[32];
  _BYTE v16[8];
  uint64_t v17;

  if (*(re::Allocator **)a1 == a3)
  {
    v8 = *(_QWORD *)(a1 + 16);
    *(_QWORD *)(a1 + 16) = 0;
    if (v8)
    {
      v9 = *(_QWORD *)(a1 + 32);
      v10 = 56 * v8;
      do
      {
        re::StringID::destroyString((re::StringID *)(v9 + 40));
        re::StringID::destroyString((re::StringID *)(v9 + 16));
        re::StringID::destroyString((re::StringID *)v9);
        v9 += 56;
        v10 -= 56;
      }
      while (v10);
    }
  }
  else
  {
    re::DynamicArray<re::RenderGraphInputData>::deinit(a1);
    *(_QWORD *)a1 = a3;
    re::DynamicArray<re::RenderGraphInputData>::setCapacity((_QWORD *)a1, a4);
  }
  ++*(_DWORD *)(a1 + 24);
  re::DynamicArray<re::RenderGraphInputData>::resize(a1, a4);
  {
    re::TypeRegistry::typeInfo(*(_QWORD **)a2, *(_QWORD *)(*(_QWORD *)(a2 + 16) + 72), v16);
    re::TypeInfo::TypeInfo((uint64_t)v15, (uint64_t)&v17);
    v12 = *(_QWORD *)(a1 + 16);
    if (v12)
    {
      v13 = *(char **)(a1 + 32);
      v14 = 56 * v12;
      do
      {
        re::TypeInfo::destruct((re::TypeInfo *)v15, v13, a3, 0);
        re::TypeInfo::construct((re::TypeInfo *)v15, (void **)v13, a3, 0);
        v13 += 56;
        v14 -= 56;
      }
      while (v14);
    }
  }
}

uint64_t re::TypeBuilderHelper::registerDynamicArray<re::RenderGraphInputData>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,unsigned long)#1}::__invoke(uint64_t a1, unint64_t a2)
{
  if (*(_QWORD *)(a1 + 16) <= a2)
  {
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  return *(_QWORD *)(a1 + 32) + 56 * a2;
}

uint64_t re::TypeBuilderHelper::registerDynamicArray<re::RenderGraphInputData>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::Allocator *)#1}::__invoke(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 32))(a2, 16, 8);
  *(_QWORD *)result = a1;
  *(_DWORD *)(result + 8) = *(_DWORD *)(a1 + 24);
  *(_DWORD *)(result + 12) = -1;
  return result;
}

uint64_t re::TypeBuilderHelper::registerDynamicArray<re::RenderGraphInputData>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *)#2}::__invoke(_DWORD *a1, uint64_t a2)
{
  uint64_t v2;
  int v3;
  unint64_t v4;
  uint64_t result;

  v2 = *(_QWORD *)a1;
  if (a1[2] == *(_DWORD *)(*(_QWORD *)a1 + 24))
  {
    v3 = a1[3];
    v4 = *(_QWORD *)(v2 + 16);
    if (v3 < (int)v4)
      a1[3] = ++v3;
    if (v4 <= v3)
      return 0;
    else
      return *(_QWORD *)(v2 + 32) + 56 * v3;
  }
  else
  {
    re::internal::assertLog((re::internal *)4, a2, "assertion failure: '%s' (%s:line %i) DynamicArray elements may not be added or removed during iteration.", "iter->originalVersion == iter->array->version()", "operator()", 313);
    result = _os_crash();
    __break(1u);
  }
  return result;
}

uint64_t re::TypeBuilderHelper::registerDynamicArray<re::RenderGraphInputData>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::Allocator *)#2}::__invoke(uint64_t result, uint64_t a2)
{
  if (result)
    return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 40))(a2, result);
  return result;
}

_QWORD *re::IntrospectionDynamicArray<re::RenderGraphOutputData>::~IntrospectionDynamicArray(_QWORD *a1)
{
  *a1 = &off_24ED1FA08;
  re::SerializedReference<re::IntrospectionBase const*>::reset(a1 + 6);
  *a1 = &off_24ED426B8;
  objc_destructInstance(a1 + 1);
  return a1;
}

void re::IntrospectionDynamicArray<re::RenderGraphOutputData>::~IntrospectionDynamicArray(_QWORD *a1)
{
  *a1 = &off_24ED1FA08;
  re::SerializedReference<re::IntrospectionBase const*>::reset(a1 + 6);
  *a1 = &off_24ED426B8;
  objc_destructInstance(a1 + 1);
  JUMPOUT(0x2276933B8);
}

void re::IntrospectionDynamicArray<re::RenderGraphOutputData>::construct(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)(a2 + 32) = 0;
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)a2 = 0;
  *(_DWORD *)(a2 + 24) = 0;
}

uint64_t re::IntrospectionDynamicArray<re::RenderGraphOutputData>::destroy(uint64_t a1, uint64_t a2)
{
  return re::DynamicArray<re::RenderGraphOutputData>::deinit(a2);
}

_QWORD *re::IntrospectionDynamicArray<re::RenderGraphOutputData>::init(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *result;

  re::DynamicArray<re::RenderGraphOutputData>::deinit(a2);
  *(_QWORD *)a2 = a3;
  result = re::DynamicArray<re::RenderGraphOutputData>::setCapacity((_QWORD *)a2, 0);
  ++*(_DWORD *)(a2 + 24);
  return result;
}

void re::IntrospectionDynamicArray<re::RenderGraphOutputData>::resize(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unint64_t a5)
{
  unint64_t v10;
  unint64_t i;

  if (!*(_QWORD *)a4)
  {
    *(_QWORD *)a4 = a2;
    re::DynamicArray<re::RenderGraphOutputData>::setCapacity((_QWORD *)a4, a5);
    ++*(_DWORD *)(a4 + 24);
  }
  v10 = *(_QWORD *)(a4 + 16);
  if (v10 >= a5)
  {
    if (v10 > a5)
      re::DynamicArray<re::RenderGraphOutputData>::resize(a4, a5);
  }
  else
  {
    re::DynamicArray<re::RenderGraphOutputData>::setCapacity((_QWORD *)a4, a5);
    for (i = a5 - *(_QWORD *)(a4 + 16); i; --i)
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a1 + 80))(a1, a2, a3, a4);
  }
}

re::IntrospectionBase *re::IntrospectionDynamicArray<re::RenderGraphOutputData>::addElement(re::Allocator **a1, re *a2, int a3, uint64_t a4)
{
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  _QWORD *v13;
  re::IntrospectionBase *v14;
  uint64_t v16;
  void *v17;
  uint64_t v18;
  void *v19;
  uint64_t v20;
  void *v21;

  v16 = 0;
  v17 = &str_110;
  v18 = 0;
  v19 = &str_110;
  v20 = 0;
  v21 = &str_110;
  v9 = *(_QWORD *)(a4 + 8);
  v8 = *(_QWORD *)(a4 + 16);
  if (v8 >= v9)
  {
    v10 = v8 + 1;
    if (v9 < v8 + 1)
    {
      if (*(_QWORD *)a4)
      {
        v11 = 2 * v9;
        if (!v9)
          v11 = 8;
        if (v11 <= v10)
          v12 = v10;
        else
          v12 = v11;
        re::DynamicArray<re::RenderGraphOutputData>::setCapacity((_QWORD *)a4, v12);
      }
      else
      {
        re::DynamicArray<re::RenderGraphOutputData>::setCapacity((_QWORD *)a4, v10);
        ++*(_DWORD *)(a4 + 24);
      }
    }
    v8 = *(_QWORD *)(a4 + 16);
  }
  v13 = (_QWORD *)(*(_QWORD *)(a4 + 32) + 48 * v8);
  *v13 = 0;
  v13[1] = &str_110;
  v16 = 0;
  v17 = &str_110;
  v13[2] = 0;
  v13[3] = &str_110;
  v18 = 0;
  v19 = &str_110;
  v13[4] = 0;
  v13[5] = &str_110;
  v20 = 0;
  v21 = &str_110;
  ++*(_QWORD *)(a4 + 16);
  ++*(_DWORD *)(a4 + 24);
  re::StringID::destroyString((re::StringID *)&v20);
  re::StringID::destroyString((re::StringID *)&v18);
  re::StringID::destroyString((re::StringID *)&v16);
  v14 = (re::IntrospectionBase *)(*(_QWORD *)(a4 + 32) + 48 * *(_QWORD *)(a4 + 16) - 48);
  re::introspectionInitElement(a2, a3, a1[6], v14);
  return v14;
}

void sub_225353504(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  re::RenderGraphOutputData::~RenderGraphOutputData((re::RenderGraphOutputData *)&a9);
  _Unwind_Resume(a1);
}

uint64_t re::IntrospectionDynamicArray<re::RenderGraphOutputData>::size(uint64_t a1, uint64_t a2)
{
  return *(_QWORD *)(a2 + 16);
}

uint64_t re::IntrospectionDynamicArray<re::RenderGraphOutputData>::elementAt(uint64_t a1, uint64_t a2, unint64_t a3)
{
  if (*(_QWORD *)(a2 + 16) <= a3)
  {
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  return *(_QWORD *)(a2 + 32) + 48 * a3;
}

{
  if (*(_QWORD *)(a2 + 16) <= a3)
  {
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  return *(_QWORD *)(a2 + 32) + 48 * a3;
}

_QWORD *re::DynamicArray<re::RenderGraphOutputData>::setCapacity(_QWORD *result, unint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v5;
  uint64_t v6;
  unint64_t *v7;
  _QWORD *v8;
  uint64_t v9;
  _QWORD *v10;
  unint64_t *v11;
  uint64_t v12;

  v3 = result[1];
  if (v3 != a2)
  {
    v5 = result;
    if (result[2] <= a2)
    {
      result = (_QWORD *)*result;
      if (!*v5)
      {
        result = (_QWORD *)re::DynamicArray<re::RenderGraphOutputData>::setCapacity(v5, a2);
        ++*((_DWORD *)v5 + 6);
        return result;
      }
      if (a2)
      {
        if (is_mul_ok(a2, 0x30uLL))
        {
          v2 = 48 * a2;
          result = (_QWORD *)(*(uint64_t (**)(_QWORD *, unint64_t, uint64_t))(*result + 32))(result, 48 * a2, 8);
          if (result)
          {
            v7 = result;
            if (!v5[1])
              goto LABEL_16;
            goto LABEL_11;
          }
        }
        else
        {
          re::internal::assertLog((re::internal *)6, a2, "assertion failure: '%s' (%s:line %i) Size overflow in DynamicArray<T>::setCapacity(). Element size = %zu, capacity = %zu", "!overflow", "setCapacity", 615, 48, a2);
          _os_crash();
          __break(1u);
        }
        re::internal::assertLog((re::internal *)6, v6, "assertion failure: '%s' (%s:line %i) DynamicArray<T> is out of memory (tried to allocate %zu bytes from allocator '%s').", "newData", "setCapacity", 619, v2, *(_QWORD *)(*v5 + 8));
        result = (_QWORD *)_os_crash();
        __break(1u);
        return result;
      }
      v7 = 0;
      if (!v3)
      {
LABEL_16:
        v5[4] = v7;
        v5[1] = a2;
        return result;
      }
LABEL_11:
      v8 = (_QWORD *)v5[4];
      v9 = v5[2];
      if (v9)
      {
        v10 = &v8[6 * v9];
        v11 = v7;
        do
        {
          v12 = *v8;
          *v11 = *v11 & 0xFFFFFFFFFFFFFFFELL | *v8 & 1;
          *v11 = *v8 & 0xFFFFFFFFFFFFFFFELL | v12 & 1;
          v11[1] = v8[1];
          LOBYTE(v12) = v8[2];
          *v8 = 0;
          v8[1] = &str_110;
          v11[2] = v11[2] & 0xFFFFFFFFFFFFFFFELL | v12 & 1;
          v11[2] = v8[2] & 0xFFFFFFFFFFFFFFFELL | v12 & 1;
          v11[3] = v8[3];
          v8[3] = &str_110;
          v8[2] = 0;
          LOBYTE(v12) = v8[4];
          v11[4] = v11[4] & 0xFFFFFFFFFFFFFFFELL | v8[4] & 1;
          v11[4] = v8[4] & 0xFFFFFFFFFFFFFFFELL | v12 & 1;
          v11[5] = v8[5];
          v8[5] = &str_110;
          v8[4] = 0;
          re::StringID::destroyString((re::StringID *)(v8 + 4));
          re::StringID::destroyString((re::StringID *)(v8 + 2));
          re::StringID::destroyString((re::StringID *)v8);
          v8 += 6;
          v11 += 6;
        }
        while (v8 != v10);
        v8 = (_QWORD *)v5[4];
      }
      result = (_QWORD *)(*(uint64_t (**)(_QWORD, _QWORD *))(*(_QWORD *)*v5 + 40))(*v5, v8);
      goto LABEL_16;
    }
  }
  return result;
}

void re::DynamicArray<re::RenderGraphOutputData>::resize(uint64_t a1, unint64_t a2)
{
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;

  v4 = *(_QWORD *)(a1 + 16);
  if (v4 >= a2)
  {
    if (v4 <= a2)
      return;
    v8 = 48 * a2;
    v9 = a2;
    do
    {
      v10 = *(_QWORD *)(a1 + 32) + v8;
      re::StringID::destroyString((re::StringID *)(v10 + 32));
      re::StringID::destroyString((re::StringID *)(v10 + 16));
      re::StringID::destroyString((re::StringID *)v10);
      ++v9;
      v8 += 48;
    }
    while (v9 < *(_QWORD *)(a1 + 16));
  }
  else
  {
    if (*(_QWORD *)(a1 + 8) < a2)
    {
      re::DynamicArray<re::RenderGraphOutputData>::setCapacity((_QWORD *)a1, a2);
      v4 = *(_QWORD *)(a1 + 16);
    }
    v5 = a2 - v4;
    if (a2 > v4)
    {
      v6 = 48 * v4;
      do
      {
        v7 = (_QWORD *)(*(_QWORD *)(a1 + 32) + v6);
        *v7 = 0;
        v7[1] = &str_110;
        v7[2] = 0;
        v7[3] = &str_110;
        v7[4] = 0;
        v7[5] = &str_110;
        v6 += 48;
        --v5;
      }
      while (v5);
    }
  }
  *(_QWORD *)(a1 + 16) = a2;
  ++*(_DWORD *)(a1 + 24);
}

_QWORD *re::TypeBuilderHelper::registerDynamicArray<re::RenderGraphOutputData>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,void *)#1}::__invoke(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *result;

  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_DWORD *)(a1 + 24) = 0;
  *(_QWORD *)a1 = a3;
  result = re::DynamicArray<re::RenderGraphOutputData>::setCapacity((_QWORD *)a1, 0);
  ++*(_DWORD *)(a1 + 24);
  return result;
}

uint64_t re::TypeBuilderHelper::registerDynamicArray<re::RenderGraphOutputData>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *)#1}::__invoke(uint64_t a1)
{
  return *(_QWORD *)(a1 + 16);
}

void re::TypeBuilderHelper::registerDynamicArray<re::RenderGraphOutputData>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,unsigned long)#1}::__invoke(uint64_t a1, uint64_t a2, re::Allocator *a3, unint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _anonymous_namespace_ *v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  _BYTE v15[32];
  _BYTE v16[8];
  uint64_t v17;

  if (*(re::Allocator **)a1 == a3)
  {
    v8 = *(_QWORD *)(a1 + 16);
    *(_QWORD *)(a1 + 16) = 0;
    if (v8)
    {
      v9 = *(_QWORD *)(a1 + 32);
      v10 = 48 * v8;
      do
      {
        re::StringID::destroyString((re::StringID *)(v9 + 32));
        re::StringID::destroyString((re::StringID *)(v9 + 16));
        re::StringID::destroyString((re::StringID *)v9);
        v9 += 48;
        v10 -= 48;
      }
      while (v10);
    }
  }
  else
  {
    re::DynamicArray<re::RenderGraphOutputData>::deinit(a1);
    *(_QWORD *)a1 = a3;
    re::DynamicArray<re::RenderGraphOutputData>::setCapacity((_QWORD *)a1, a4);
  }
  ++*(_DWORD *)(a1 + 24);
  re::DynamicArray<re::RenderGraphOutputData>::resize(a1, a4);
  {
    re::TypeRegistry::typeInfo(*(_QWORD **)a2, *(_QWORD *)(*(_QWORD *)(a2 + 16) + 72), v16);
    re::TypeInfo::TypeInfo((uint64_t)v15, (uint64_t)&v17);
    v12 = *(_QWORD *)(a1 + 16);
    if (v12)
    {
      v13 = *(char **)(a1 + 32);
      v14 = 48 * v12;
      do
      {
        re::TypeInfo::destruct((re::TypeInfo *)v15, v13, a3, 0);
        re::TypeInfo::construct((re::TypeInfo *)v15, (void **)v13, a3, 0);
        v13 += 48;
        v14 -= 48;
      }
      while (v14);
    }
  }
}

uint64_t re::TypeBuilderHelper::registerDynamicArray<re::RenderGraphOutputData>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,unsigned long)#1}::__invoke(uint64_t a1, unint64_t a2)
{
  if (*(_QWORD *)(a1 + 16) <= a2)
  {
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  return *(_QWORD *)(a1 + 32) + 48 * a2;
}

uint64_t re::TypeBuilderHelper::registerDynamicArray<re::RenderGraphOutputData>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::Allocator *)#1}::__invoke(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 32))(a2, 16, 8);
  *(_QWORD *)result = a1;
  *(_DWORD *)(result + 8) = *(_DWORD *)(a1 + 24);
  *(_DWORD *)(result + 12) = -1;
  return result;
}

uint64_t re::TypeBuilderHelper::registerDynamicArray<re::RenderGraphOutputData>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *)#2}::__invoke(_DWORD *a1, uint64_t a2)
{
  uint64_t v2;
  int v3;
  unint64_t v4;
  uint64_t result;

  v2 = *(_QWORD *)a1;
  if (a1[2] == *(_DWORD *)(*(_QWORD *)a1 + 24))
  {
    v3 = a1[3];
    v4 = *(_QWORD *)(v2 + 16);
    if (v3 < (int)v4)
      a1[3] = ++v3;
    if (v4 <= v3)
      return 0;
    else
      return *(_QWORD *)(v2 + 32) + 48 * v3;
  }
  else
  {
    re::internal::assertLog((re::internal *)4, a2, "assertion failure: '%s' (%s:line %i) DynamicArray elements may not be added or removed during iteration.", "iter->originalVersion == iter->array->version()", "operator()", 313);
    result = _os_crash();
    __break(1u);
  }
  return result;
}

uint64_t re::TypeBuilderHelper::registerDynamicArray<re::RenderGraphOutputData>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::Allocator *)#2}::__invoke(uint64_t result, uint64_t a2)
{
  if (result)
    return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 40))(a2, result);
  return result;
}

_QWORD *re::IntrospectionDynamicArray<re::RenderGraphSpecifyOperationBase *>::~IntrospectionDynamicArray(_QWORD *a1)
{
  *a1 = &off_24ED1FA08;
  re::SerializedReference<re::IntrospectionBase const*>::reset(a1 + 6);
  *a1 = &off_24ED426B8;
  objc_destructInstance(a1 + 1);
  return a1;
}

void re::IntrospectionDynamicArray<re::RenderGraphSpecifyOperationBase *>::~IntrospectionDynamicArray(_QWORD *a1)
{
  *a1 = &off_24ED1FA08;
  re::SerializedReference<re::IntrospectionBase const*>::reset(a1 + 6);
  *a1 = &off_24ED426B8;
  objc_destructInstance(a1 + 1);
  JUMPOUT(0x2276933B8);
}

void re::IntrospectionDynamicArray<re::RenderGraphSpecifyOperationBase *>::construct(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)(a2 + 32) = 0;
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)a2 = 0;
  *(_DWORD *)(a2 + 24) = 0;
}

uint64_t re::IntrospectionDynamicArray<re::RenderGraphSpecifyOperationBase *>::destroy(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  result = *(_QWORD *)a2;
  if (*(_QWORD *)a2)
  {
    if (*(_QWORD *)(a2 + 32))
      result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 40))(result);
    *(_QWORD *)(a2 + 32) = 0;
    *(_QWORD *)(a2 + 8) = 0;
    *(_QWORD *)(a2 + 16) = 0;
    *(_QWORD *)a2 = 0;
    ++*(_DWORD *)(a2 + 24);
  }
  return result;
}

_QWORD *re::IntrospectionDynamicArray<re::RenderGraphSpecifyOperationBase *>::init(uint64_t a1, _QWORD *a2, uint64_t a3)
{
  _QWORD *result;

  if (*a2)
  {
    if (a2[4])
      (*(void (**)(_QWORD))(*(_QWORD *)*a2 + 40))(*a2);
    a2[4] = 0;
    a2[1] = 0;
    a2[2] = 0;
    ++*((_DWORD *)a2 + 6);
  }
  *a2 = a3;
  result = re::DynamicArray<float *>::setCapacity(a2, 0);
  ++*((_DWORD *)a2 + 6);
  return result;
}

void re::IntrospectionDynamicArray<re::RenderGraphSpecifyOperationBase *>::resize(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unint64_t a5)
{
  unint64_t v10;
  unint64_t i;

  if (!*(_QWORD *)a4)
  {
    *(_QWORD *)a4 = a2;
    re::DynamicArray<float *>::setCapacity((_QWORD *)a4, a5);
    ++*(_DWORD *)(a4 + 24);
  }
  v10 = *(_QWORD *)(a4 + 16);
  if (v10 >= a5)
  {
    if (v10 > a5)
      re::DynamicArray<double>::resize(a4, a5);
  }
  else
  {
    re::DynamicArray<float *>::setCapacity((_QWORD *)a4, a5);
    for (i = a5 - *(_QWORD *)(a4 + 16); i; --i)
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a1 + 80))(a1, a2, a3, a4);
  }
}

re::IntrospectionBase *re::IntrospectionDynamicArray<re::RenderGraphSpecifyOperationBase *>::addElement(re::Allocator **a1, re *a2, int a3, uint64_t a4)
{
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  re::IntrospectionBase *v13;

  v9 = *(_QWORD *)(a4 + 8);
  v8 = *(_QWORD *)(a4 + 16);
  if (v8 >= v9)
  {
    v10 = v8 + 1;
    if (v9 < v8 + 1)
    {
      if (*(_QWORD *)a4)
      {
        v11 = 2 * v9;
        if (!v9)
          v11 = 8;
        if (v11 <= v10)
          v12 = v10;
        else
          v12 = v11;
        re::DynamicArray<float *>::setCapacity((_QWORD *)a4, v12);
      }
      else
      {
        re::DynamicArray<float *>::setCapacity((_QWORD *)a4, v10);
        ++*(_DWORD *)(a4 + 24);
      }
    }
    v8 = *(_QWORD *)(a4 + 16);
  }
  *(_QWORD *)(*(_QWORD *)(a4 + 32) + 8 * v8) = 0;
  *(_QWORD *)(a4 + 16) = v8 + 1;
  ++*(_DWORD *)(a4 + 24);
  v13 = (re::IntrospectionBase *)(*(_QWORD *)(a4 + 32) + 8 * v8);
  re::introspectionInitElement(a2, a3, a1[6], v13);
  return v13;
}

uint64_t re::IntrospectionDynamicArray<re::RenderGraphSpecifyOperationBase *>::size(uint64_t a1, uint64_t a2)
{
  return *(_QWORD *)(a2 + 16);
}

uint64_t re::IntrospectionDynamicArray<re::RenderGraphSpecifyOperationBase *>::elementAt(uint64_t a1, uint64_t a2, unint64_t a3)
{
  if (*(_QWORD *)(a2 + 16) <= a3)
  {
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  return *(_QWORD *)(a2 + 32) + 8 * a3;
}

{
  if (*(_QWORD *)(a2 + 16) <= a3)
  {
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  return *(_QWORD *)(a2 + 32) + 8 * a3;
}

_QWORD *re::TypeBuilderHelper::registerDynamicArray<re::RenderGraphSpecifyOperationBase *>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,void *)#1}::__invoke(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *result;

  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_DWORD *)(a1 + 24) = 0;
  *(_QWORD *)a1 = a3;
  result = re::DynamicArray<float *>::setCapacity((_QWORD *)a1, 0);
  ++*(_DWORD *)(a1 + 24);
  return result;
}

uint64_t re::TypeBuilderHelper::registerDynamicArray<re::RenderGraphSpecifyOperationBase *>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,void *)#2}::__invoke(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)a1;
  if (result)
  {
    if (*(_QWORD *)(a1 + 32))
      result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 40))(result);
    *(_QWORD *)(a1 + 32) = 0;
    *(_QWORD *)(a1 + 8) = 0;
    *(_QWORD *)(a1 + 16) = 0;
    *(_QWORD *)a1 = 0;
    ++*(_DWORD *)(a1 + 24);
  }
  return result;
}

uint64_t re::TypeBuilderHelper::registerDynamicArray<re::RenderGraphSpecifyOperationBase *>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *)#1}::__invoke(uint64_t a1)
{
  return *(_QWORD *)(a1 + 16);
}

void re::TypeBuilderHelper::registerDynamicArray<re::RenderGraphSpecifyOperationBase *>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,unsigned long)#1}::__invoke(uint64_t a1, uint64_t a2, re::Allocator *a3, unint64_t a4)
{
  re::Allocator *v8;
  _anonymous_namespace_ *v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  _BYTE v13[32];
  _BYTE v14[8];
  uint64_t v15;

  v8 = *(re::Allocator **)a1;
  if (v8 == a3)
  {
    *(_QWORD *)(a1 + 16) = 0;
  }
  else
  {
    if (v8)
    {
      if (*(_QWORD *)(a1 + 32))
        (*(void (**)(re::Allocator *))(*(_QWORD *)v8 + 40))(v8);
      *(_QWORD *)(a1 + 32) = 0;
      *(_QWORD *)(a1 + 8) = 0;
      *(_QWORD *)(a1 + 16) = 0;
      ++*(_DWORD *)(a1 + 24);
    }
    *(_QWORD *)a1 = a3;
    re::DynamicArray<float *>::setCapacity((_QWORD *)a1, a4);
  }
  ++*(_DWORD *)(a1 + 24);
  re::DynamicArray<double>::resize(a1, a4);
  {
    re::TypeRegistry::typeInfo(*(_QWORD **)a2, *(_QWORD *)(*(_QWORD *)(a2 + 16) + 72), v14);
    re::TypeInfo::TypeInfo((uint64_t)v13, (uint64_t)&v15);
    v10 = *(_QWORD *)(a1 + 16);
    if (v10)
    {
      v11 = *(char **)(a1 + 32);
      v12 = 8 * v10;
      do
      {
        re::TypeInfo::destruct((re::TypeInfo *)v13, v11, a3, 0);
        re::TypeInfo::construct((re::TypeInfo *)v13, (void **)v11, a3, 0);
        v11 += 8;
        v12 -= 8;
      }
      while (v12);
    }
  }
}

uint64_t re::TypeBuilderHelper::registerDynamicArray<re::RenderGraphSpecifyOperationBase *>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,unsigned long)#1}::__invoke(uint64_t a1, unint64_t a2)
{
  if (*(_QWORD *)(a1 + 16) <= a2)
  {
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  return *(_QWORD *)(a1 + 32) + 8 * a2;
}

uint64_t re::TypeBuilderHelper::registerDynamicArray<re::RenderGraphSpecifyOperationBase *>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::Allocator *)#1}::__invoke(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 32))(a2, 16, 8);
  *(_QWORD *)result = a1;
  *(_DWORD *)(result + 8) = *(_DWORD *)(a1 + 24);
  *(_DWORD *)(result + 12) = -1;
  return result;
}

uint64_t re::TypeBuilderHelper::registerDynamicArray<re::RenderGraphSpecifyOperationBase *>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *)#2}::__invoke(_DWORD *a1, uint64_t a2)
{
  uint64_t v2;
  int v3;
  unint64_t v4;
  uint64_t result;

  v2 = *(_QWORD *)a1;
  if (a1[2] == *(_DWORD *)(*(_QWORD *)a1 + 24))
  {
    v3 = a1[3];
    v4 = *(_QWORD *)(v2 + 16);
    if (v3 < (int)v4)
      a1[3] = ++v3;
    if (v4 <= v3)
      return 0;
    else
      return *(_QWORD *)(v2 + 32) + 8 * v3;
  }
  else
  {
    re::internal::assertLog((re::internal *)4, a2, "assertion failure: '%s' (%s:line %i) DynamicArray elements may not be added or removed during iteration.", "iter->originalVersion == iter->array->version()", "operator()", 313);
    result = _os_crash();
    __break(1u);
  }
  return result;
}

uint64_t re::TypeBuilderHelper::registerDynamicArray<re::RenderGraphSpecifyOperationBase *>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::Allocator *)#2}::__invoke(uint64_t result, uint64_t a2)
{
  if (result)
    return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 40))(a2, result);
  return result;
}

_QWORD *re::IntrospectionDynamicArray<re::RenderGraphDataNodeConnection>::~IntrospectionDynamicArray(_QWORD *a1)
{
  *a1 = &off_24ED1FA08;
  re::SerializedReference<re::IntrospectionBase const*>::reset(a1 + 6);
  *a1 = &off_24ED426B8;
  objc_destructInstance(a1 + 1);
  return a1;
}

void re::IntrospectionDynamicArray<re::RenderGraphDataNodeConnection>::~IntrospectionDynamicArray(_QWORD *a1)
{
  *a1 = &off_24ED1FA08;
  re::SerializedReference<re::IntrospectionBase const*>::reset(a1 + 6);
  *a1 = &off_24ED426B8;
  objc_destructInstance(a1 + 1);
  JUMPOUT(0x2276933B8);
}

void re::IntrospectionDynamicArray<re::RenderGraphDataNodeConnection>::construct(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)(a2 + 32) = 0;
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)a2 = 0;
  *(_DWORD *)(a2 + 24) = 0;
}

uint64_t re::IntrospectionDynamicArray<re::RenderGraphDataNodeConnection>::destroy(uint64_t a1, uint64_t a2)
{
  return re::DynamicArray<re::RenderGraphDataNodeConnection>::deinit(a2);
}

_QWORD *re::IntrospectionDynamicArray<re::RenderGraphDataNodeConnection>::init(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *result;

  re::DynamicArray<re::RenderGraphDataNodeConnection>::deinit(a2);
  *(_QWORD *)a2 = a3;
  result = re::DynamicArray<re::RenderGraphDataNodeConnection>::setCapacity((_QWORD *)a2, 0);
  ++*(_DWORD *)(a2 + 24);
  return result;
}

void re::IntrospectionDynamicArray<re::RenderGraphDataNodeConnection>::resize(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unint64_t a5)
{
  unint64_t v10;
  unint64_t i;

  if (!*(_QWORD *)a4)
  {
    *(_QWORD *)a4 = a2;
    re::DynamicArray<re::RenderGraphDataNodeConnection>::setCapacity((_QWORD *)a4, a5);
    ++*(_DWORD *)(a4 + 24);
  }
  v10 = *(_QWORD *)(a4 + 16);
  if (v10 >= a5)
  {
    if (v10 > a5)
      re::DynamicArray<re::RenderGraphDataNodeConnection>::resize(a4, a5);
  }
  else
  {
    re::DynamicArray<re::RenderGraphDataNodeConnection>::setCapacity((_QWORD *)a4, a5);
    for (i = a5 - *(_QWORD *)(a4 + 16); i; --i)
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a1 + 80))(a1, a2, a3, a4);
  }
}

re::IntrospectionBase *re::IntrospectionDynamicArray<re::RenderGraphDataNodeConnection>::addElement(re::Allocator **a1, re *a2, int a3, uint64_t a4)
{
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  BOOL v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  re::IntrospectionBase *v16;
  uint64_t v18;
  void *v19;
  __int128 v20;
  __int128 v21;
  uint64_t v22;

  v18 = 0;
  v22 = 0;
  v20 = 0uLL;
  v19 = &str_110;
  v21 = 0uLL;
  v8 = *(_QWORD *)(a4 + 8);
  v9 = *(_QWORD *)(a4 + 16);
  if (v9 >= v8)
  {
    v10 = v9 + 1;
    if (v8 < v9 + 1)
    {
      if (*(_QWORD *)a4)
      {
        v11 = 2 * v8;
        v12 = v8 == 0;
        v13 = 8;
        if (!v12)
          v13 = v11;
        if (v13 <= v10)
          v14 = v10;
        else
          v14 = v13;
        re::DynamicArray<re::RenderGraphDataNodeConnection>::setCapacity((_QWORD *)a4, v14);
      }
      else
      {
        re::DynamicArray<re::RenderGraphDataNodeConnection>::setCapacity((_QWORD *)a4, v10);
        ++*(_DWORD *)(a4 + 24);
      }
    }
    v9 = *(_QWORD *)(a4 + 16);
  }
  v15 = *(_QWORD *)(a4 + 32) + 56 * v9;
  *(_QWORD *)v15 = 0;
  *(_QWORD *)(v15 + 8) = &str_110;
  v18 = 0;
  v19 = &str_110;
  *(_DWORD *)(v15 + 40) = 0;
  *(_QWORD *)(v15 + 24) = 0;
  *(_QWORD *)(v15 + 32) = 0;
  *(_QWORD *)(v15 + 16) = 0;
  v20 = 0uLL;
  *(_QWORD *)&v21 = 0;
  *(_QWORD *)(v15 + 48) = 0;
  v22 = 0;
  DWORD2(v21) = 1;
  *(_DWORD *)(v15 + 40) = 1;
  ++*(_QWORD *)(a4 + 16);
  ++*(_DWORD *)(a4 + 24);
  re::DynamicArray<re::RenderGraphDataStoreConnection>::deinit((uint64_t)&v20);
  re::StringID::destroyString((re::StringID *)&v18);
  v16 = (re::IntrospectionBase *)(*(_QWORD *)(a4 + 32) + 56 * *(_QWORD *)(a4 + 16) - 56);
  re::introspectionInitElement(a2, a3, a1[6], v16);
  return v16;
}

void sub_225354AD0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;

  re::DynamicArray<re::RenderGraphDataStoreConnection>::deinit(v9);
  re::StringID::destroyString((re::StringID *)&a9);
  _Unwind_Resume(a1);
}

uint64_t re::IntrospectionDynamicArray<re::RenderGraphDataNodeConnection>::size(uint64_t a1, uint64_t a2)
{
  return *(_QWORD *)(a2 + 16);
}

uint64_t re::IntrospectionDynamicArray<re::RenderGraphDataNodeConnection>::elementAt(uint64_t a1, uint64_t a2, unint64_t a3)
{
  if (*(_QWORD *)(a2 + 16) <= a3)
  {
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  return *(_QWORD *)(a2 + 32) + 56 * a3;
}

{
  if (*(_QWORD *)(a2 + 16) <= a3)
  {
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  return *(_QWORD *)(a2 + 32) + 56 * a3;
}

_QWORD *re::DynamicArray<re::RenderGraphDataNodeConnection>::setCapacity(_QWORD *result, unint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v5;
  uint64_t v6;
  unint64_t *v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t *v10;
  unint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  v3 = result[1];
  if (v3 != a2)
  {
    v5 = result;
    if (result[2] <= a2)
    {
      result = (_QWORD *)*result;
      if (!*v5)
      {
        result = (_QWORD *)re::DynamicArray<re::RenderGraphDataNodeConnection>::setCapacity(v5, a2);
        ++*((_DWORD *)v5 + 6);
        return result;
      }
      if (a2)
      {
        if (is_mul_ok(a2, 0x38uLL))
        {
          v2 = 56 * a2;
          result = (_QWORD *)(*(uint64_t (**)(_QWORD *, unint64_t, uint64_t))(*result + 32))(result, 56 * a2, 8);
          if (result)
          {
            v7 = result;
            if (!v5[1])
              goto LABEL_16;
            goto LABEL_11;
          }
        }
        else
        {
          re::internal::assertLog((re::internal *)6, a2, "assertion failure: '%s' (%s:line %i) Size overflow in DynamicArray<T>::setCapacity(). Element size = %zu, capacity = %zu", "!overflow", "setCapacity", 615, 56, a2);
          _os_crash();
          __break(1u);
        }
        re::internal::assertLog((re::internal *)6, v6, "assertion failure: '%s' (%s:line %i) DynamicArray<T> is out of memory (tried to allocate %zu bytes from allocator '%s').", "newData", "setCapacity", 619, v2, *(_QWORD *)(*v5 + 8));
        result = (_QWORD *)_os_crash();
        __break(1u);
        return result;
      }
      v7 = 0;
      if (!v3)
      {
LABEL_16:
        v5[4] = v7;
        v5[1] = a2;
        return result;
      }
LABEL_11:
      v8 = (uint64_t *)v5[4];
      v9 = v5[2];
      if (v9)
      {
        v10 = &v8[7 * v9];
        v11 = v7;
        do
        {
          v12 = *v8;
          *v11 = *v11 & 0xFFFFFFFFFFFFFFFELL | *v8 & 1;
          *v11 = *v8 & 0xFFFFFFFFFFFFFFFELL | v12 & 1;
          v11[1] = v8[1];
          *v8 = 0;
          v8[1] = (uint64_t)&str_110;
          v11[6] = 0;
          *((_DWORD *)v11 + 10) = 0;
          v11[3] = 0;
          v11[4] = 0;
          v11[2] = 0;
          v13 = v8[3];
          v11[2] = v8[2];
          v8[2] = 0;
          v11[3] = v13;
          v8[3] = 0;
          v14 = v11[4];
          v11[4] = v8[4];
          v8[4] = v14;
          v15 = v11[6];
          v11[6] = v8[6];
          v8[6] = v15;
          ++*((_DWORD *)v8 + 10);
          ++*((_DWORD *)v11 + 10);
          re::DynamicArray<re::RenderGraphDataStoreConnection>::deinit((uint64_t)(v8 + 2));
          re::StringID::destroyString((re::StringID *)v8);
          v8 += 7;
          v11 += 7;
        }
        while (v8 != v10);
        v8 = (uint64_t *)v5[4];
      }
      result = (_QWORD *)(*(uint64_t (**)(_QWORD, uint64_t *))(*(_QWORD *)*v5 + 40))(*v5, v8);
      goto LABEL_16;
    }
  }
  return result;
}

void re::DynamicArray<re::RenderGraphDataNodeConnection>::resize(uint64_t a1, unint64_t a2)
{
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  re::StringID *v10;

  v4 = *(_QWORD *)(a1 + 16);
  if (v4 >= a2)
  {
    if (v4 <= a2)
      return;
    v8 = 56 * a2;
    v9 = a2;
    do
    {
      v10 = (re::StringID *)(*(_QWORD *)(a1 + 32) + v8);
      re::DynamicArray<re::RenderGraphDataStoreConnection>::deinit((uint64_t)v10 + 16);
      re::StringID::destroyString(v10);
      ++v9;
      v8 += 56;
    }
    while (v9 < *(_QWORD *)(a1 + 16));
  }
  else
  {
    if (*(_QWORD *)(a1 + 8) < a2)
    {
      re::DynamicArray<re::RenderGraphDataNodeConnection>::setCapacity((_QWORD *)a1, a2);
      v4 = *(_QWORD *)(a1 + 16);
    }
    v5 = a2 - v4;
    if (a2 > v4)
    {
      v6 = 56 * v4;
      do
      {
        v7 = *(_QWORD *)(a1 + 32) + v6;
        *(_QWORD *)v7 = 0;
        *(_QWORD *)(v7 + 8) = &str_110;
        *(_QWORD *)(v7 + 48) = 0;
        *(_QWORD *)(v7 + 24) = 0;
        *(_QWORD *)(v7 + 32) = 0;
        *(_QWORD *)(v7 + 16) = 0;
        *(_DWORD *)(v7 + 40) = 0;
        v6 += 56;
        --v5;
      }
      while (v5);
    }
  }
  *(_QWORD *)(a1 + 16) = a2;
  ++*(_DWORD *)(a1 + 24);
}

_QWORD *re::TypeBuilderHelper::registerDynamicArray<re::RenderGraphDataNodeConnection>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,void *)#1}::__invoke(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *result;

  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_DWORD *)(a1 + 24) = 0;
  *(_QWORD *)a1 = a3;
  result = re::DynamicArray<re::RenderGraphDataNodeConnection>::setCapacity((_QWORD *)a1, 0);
  ++*(_DWORD *)(a1 + 24);
  return result;
}

uint64_t re::TypeBuilderHelper::registerDynamicArray<re::RenderGraphDataNodeConnection>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *)#1}::__invoke(uint64_t a1)
{
  return *(_QWORD *)(a1 + 16);
}

void re::TypeBuilderHelper::registerDynamicArray<re::RenderGraphDataNodeConnection>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,unsigned long)#1}::__invoke(uint64_t a1, uint64_t a2, re::Allocator *a3, unint64_t a4)
{
  uint64_t v8;
  re::StringID *v9;
  uint64_t v10;
  _anonymous_namespace_ *v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  _BYTE v15[32];
  _BYTE v16[8];
  uint64_t v17;

  if (*(re::Allocator **)a1 == a3)
  {
    v8 = *(_QWORD *)(a1 + 16);
    *(_QWORD *)(a1 + 16) = 0;
    if (v8)
    {
      v9 = *(re::StringID **)(a1 + 32);
      v10 = 56 * v8;
      do
      {
        re::DynamicArray<re::RenderGraphDataStoreConnection>::deinit((uint64_t)v9 + 16);
        re::StringID::destroyString(v9);
        v9 = (re::StringID *)((char *)v9 + 56);
        v10 -= 56;
      }
      while (v10);
    }
  }
  else
  {
    re::DynamicArray<re::RenderGraphDataNodeConnection>::deinit(a1);
    *(_QWORD *)a1 = a3;
    re::DynamicArray<re::RenderGraphDataNodeConnection>::setCapacity((_QWORD *)a1, a4);
  }
  ++*(_DWORD *)(a1 + 24);
  re::DynamicArray<re::RenderGraphDataNodeConnection>::resize(a1, a4);
  {
    re::TypeRegistry::typeInfo(*(_QWORD **)a2, *(_QWORD *)(*(_QWORD *)(a2 + 16) + 72), v16);
    re::TypeInfo::TypeInfo((uint64_t)v15, (uint64_t)&v17);
    v12 = *(_QWORD *)(a1 + 16);
    if (v12)
    {
      v13 = *(char **)(a1 + 32);
      v14 = 56 * v12;
      do
      {
        re::TypeInfo::destruct((re::TypeInfo *)v15, v13, a3, 0);
        re::TypeInfo::construct((re::TypeInfo *)v15, (void **)v13, a3, 0);
        v13 += 56;
        v14 -= 56;
      }
      while (v14);
    }
  }
}

uint64_t re::TypeBuilderHelper::registerDynamicArray<re::RenderGraphDataNodeConnection>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,unsigned long)#1}::__invoke(uint64_t a1, unint64_t a2)
{
  if (*(_QWORD *)(a1 + 16) <= a2)
  {
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  return *(_QWORD *)(a1 + 32) + 56 * a2;
}

uint64_t re::TypeBuilderHelper::registerDynamicArray<re::RenderGraphDataNodeConnection>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::Allocator *)#1}::__invoke(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 32))(a2, 16, 8);
  *(_QWORD *)result = a1;
  *(_DWORD *)(result + 8) = *(_DWORD *)(a1 + 24);
  *(_DWORD *)(result + 12) = -1;
  return result;
}

uint64_t re::TypeBuilderHelper::registerDynamicArray<re::RenderGraphDataNodeConnection>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *)#2}::__invoke(_DWORD *a1, uint64_t a2)
{
  uint64_t v2;
  int v3;
  unint64_t v4;
  uint64_t result;

  v2 = *(_QWORD *)a1;
  if (a1[2] == *(_DWORD *)(*(_QWORD *)a1 + 24))
  {
    v3 = a1[3];
    v4 = *(_QWORD *)(v2 + 16);
    if (v3 < (int)v4)
      a1[3] = ++v3;
    if (v4 <= v3)
      return 0;
    else
      return *(_QWORD *)(v2 + 32) + 56 * v3;
  }
  else
  {
    re::internal::assertLog((re::internal *)4, a2, "assertion failure: '%s' (%s:line %i) DynamicArray elements may not be added or removed during iteration.", "iter->originalVersion == iter->array->version()", "operator()", 313);
    result = _os_crash();
    __break(1u);
  }
  return result;
}

uint64_t re::TypeBuilderHelper::registerDynamicArray<re::RenderGraphDataNodeConnection>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::Allocator *)#2}::__invoke(uint64_t result, uint64_t a2)
{
  if (result)
    return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 40))(a2, result);
  return result;
}

_QWORD *re::IntrospectionDynamicArray<re::RenderGraphInheritanceData>::~IntrospectionDynamicArray(_QWORD *a1)
{
  *a1 = &off_24ED1FA08;
  re::SerializedReference<re::IntrospectionBase const*>::reset(a1 + 6);
  *a1 = &off_24ED426B8;
  objc_destructInstance(a1 + 1);
  return a1;
}

void re::IntrospectionDynamicArray<re::RenderGraphInheritanceData>::~IntrospectionDynamicArray(_QWORD *a1)
{
  *a1 = &off_24ED1FA08;
  re::SerializedReference<re::IntrospectionBase const*>::reset(a1 + 6);
  *a1 = &off_24ED426B8;
  objc_destructInstance(a1 + 1);
  JUMPOUT(0x2276933B8);
}

void re::IntrospectionDynamicArray<re::RenderGraphInheritanceData>::construct(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)(a2 + 32) = 0;
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)a2 = 0;
  *(_DWORD *)(a2 + 24) = 0;
}

uint64_t re::IntrospectionDynamicArray<re::RenderGraphInheritanceData>::destroy(uint64_t a1, uint64_t a2)
{
  return re::DynamicArray<re::RenderGraphOutputData>::deinit(a2);
}

_QWORD *re::IntrospectionDynamicArray<re::RenderGraphInheritanceData>::init(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *result;

  re::DynamicArray<re::RenderGraphOutputData>::deinit(a2);
  *(_QWORD *)a2 = a3;
  result = re::DynamicArray<re::RenderGraphOutputData>::setCapacity((_QWORD *)a2, 0);
  ++*(_DWORD *)(a2 + 24);
  return result;
}

void re::IntrospectionDynamicArray<re::RenderGraphInheritanceData>::resize(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unint64_t a5)
{
  unint64_t v10;
  unint64_t i;

  if (!*(_QWORD *)a4)
  {
    *(_QWORD *)a4 = a2;
    re::DynamicArray<re::RenderGraphOutputData>::setCapacity((_QWORD *)a4, a5);
    ++*(_DWORD *)(a4 + 24);
  }
  v10 = *(_QWORD *)(a4 + 16);
  if (v10 >= a5)
  {
    if (v10 > a5)
      re::DynamicArray<re::RenderGraphOutputData>::resize(a4, a5);
  }
  else
  {
    re::DynamicArray<re::RenderGraphOutputData>::setCapacity((_QWORD *)a4, a5);
    for (i = a5 - *(_QWORD *)(a4 + 16); i; --i)
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a1 + 80))(a1, a2, a3, a4);
  }
}

re::IntrospectionBase *re::IntrospectionDynamicArray<re::RenderGraphInheritanceData>::addElement(re::Allocator **a1, re *a2, int a3, uint64_t a4)
{
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  _QWORD *v13;
  re::IntrospectionBase *v14;
  uint64_t v16;
  void *v17;
  uint64_t v18;
  void *v19;
  uint64_t v20;
  void *v21;

  v16 = 0;
  v17 = &str_110;
  v18 = 0;
  v19 = &str_110;
  v20 = 0;
  v21 = &str_110;
  v9 = *(_QWORD *)(a4 + 8);
  v8 = *(_QWORD *)(a4 + 16);
  if (v8 >= v9)
  {
    v10 = v8 + 1;
    if (v9 < v8 + 1)
    {
      if (*(_QWORD *)a4)
      {
        v11 = 2 * v9;
        if (!v9)
          v11 = 8;
        if (v11 <= v10)
          v12 = v10;
        else
          v12 = v11;
        re::DynamicArray<re::RenderGraphOutputData>::setCapacity((_QWORD *)a4, v12);
      }
      else
      {
        re::DynamicArray<re::RenderGraphOutputData>::setCapacity((_QWORD *)a4, v10);
        ++*(_DWORD *)(a4 + 24);
      }
    }
    v8 = *(_QWORD *)(a4 + 16);
  }
  v13 = (_QWORD *)(*(_QWORD *)(a4 + 32) + 48 * v8);
  *v13 = 0;
  v13[1] = &str_110;
  v16 = 0;
  v17 = &str_110;
  v13[2] = 0;
  v13[3] = &str_110;
  v18 = 0;
  v19 = &str_110;
  v13[4] = 0;
  v13[5] = &str_110;
  v20 = 0;
  v21 = &str_110;
  ++*(_QWORD *)(a4 + 16);
  ++*(_DWORD *)(a4 + 24);
  re::StringID::destroyString((re::StringID *)&v20);
  re::StringID::destroyString((re::StringID *)&v18);
  re::StringID::destroyString((re::StringID *)&v16);
  v14 = (re::IntrospectionBase *)(*(_QWORD *)(a4 + 32) + 48 * *(_QWORD *)(a4 + 16) - 48);
  re::introspectionInitElement(a2, a3, a1[6], v14);
  return v14;
}

void sub_225355734(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  re::RenderGraphOutputData::~RenderGraphOutputData((re::RenderGraphOutputData *)&a9);
  _Unwind_Resume(a1);
}

uint64_t re::IntrospectionDynamicArray<re::RenderGraphInheritanceData>::size(uint64_t a1, uint64_t a2)
{
  return *(_QWORD *)(a2 + 16);
}

uint64_t re::IntrospectionDynamicArray<re::RenderGraphInheritanceData>::elementAt(uint64_t a1, uint64_t a2, unint64_t a3)
{
  if (*(_QWORD *)(a2 + 16) <= a3)
  {
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  return *(_QWORD *)(a2 + 32) + 48 * a3;
}

{
  if (*(_QWORD *)(a2 + 16) <= a3)
  {
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  return *(_QWORD *)(a2 + 32) + 48 * a3;
}

_QWORD *re::TypeBuilderHelper::registerDynamicArray<re::RenderGraphInheritanceData>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,void *)#1}::__invoke(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *result;

  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_DWORD *)(a1 + 24) = 0;
  *(_QWORD *)a1 = a3;
  result = re::DynamicArray<re::RenderGraphOutputData>::setCapacity((_QWORD *)a1, 0);
  ++*(_DWORD *)(a1 + 24);
  return result;
}

uint64_t re::TypeBuilderHelper::registerDynamicArray<re::RenderGraphInheritanceData>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *)#1}::__invoke(uint64_t a1)
{
  return *(_QWORD *)(a1 + 16);
}

void re::TypeBuilderHelper::registerDynamicArray<re::RenderGraphInheritanceData>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,unsigned long)#1}::__invoke(uint64_t a1, uint64_t a2, re::Allocator *a3, unint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _anonymous_namespace_ *v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  _BYTE v15[32];
  _BYTE v16[8];
  uint64_t v17;

  if (*(re::Allocator **)a1 == a3)
  {
    v8 = *(_QWORD *)(a1 + 16);
    *(_QWORD *)(a1 + 16) = 0;
    if (v8)
    {
      v9 = *(_QWORD *)(a1 + 32);
      v10 = 48 * v8;
      do
      {
        re::StringID::destroyString((re::StringID *)(v9 + 32));
        re::StringID::destroyString((re::StringID *)(v9 + 16));
        re::StringID::destroyString((re::StringID *)v9);
        v9 += 48;
        v10 -= 48;
      }
      while (v10);
    }
  }
  else
  {
    re::DynamicArray<re::RenderGraphOutputData>::deinit(a1);
    *(_QWORD *)a1 = a3;
    re::DynamicArray<re::RenderGraphOutputData>::setCapacity((_QWORD *)a1, a4);
  }
  ++*(_DWORD *)(a1 + 24);
  re::DynamicArray<re::RenderGraphOutputData>::resize(a1, a4);
  {
    re::TypeRegistry::typeInfo(*(_QWORD **)a2, *(_QWORD *)(*(_QWORD *)(a2 + 16) + 72), v16);
    re::TypeInfo::TypeInfo((uint64_t)v15, (uint64_t)&v17);
    v12 = *(_QWORD *)(a1 + 16);
    if (v12)
    {
      v13 = *(char **)(a1 + 32);
      v14 = 48 * v12;
      do
      {
        re::TypeInfo::destruct((re::TypeInfo *)v15, v13, a3, 0);
        re::TypeInfo::construct((re::TypeInfo *)v15, (void **)v13, a3, 0);
        v13 += 48;
        v14 -= 48;
      }
      while (v14);
    }
  }
}

uint64_t re::TypeBuilderHelper::registerDynamicArray<re::RenderGraphInheritanceData>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,unsigned long)#1}::__invoke(uint64_t a1, unint64_t a2)
{
  if (*(_QWORD *)(a1 + 16) <= a2)
  {
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  return *(_QWORD *)(a1 + 32) + 48 * a2;
}

uint64_t re::TypeBuilderHelper::registerDynamicArray<re::RenderGraphInheritanceData>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::Allocator *)#1}::__invoke(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 32))(a2, 16, 8);
  *(_QWORD *)result = a1;
  *(_DWORD *)(result + 8) = *(_DWORD *)(a1 + 24);
  *(_DWORD *)(result + 12) = -1;
  return result;
}

uint64_t re::TypeBuilderHelper::registerDynamicArray<re::RenderGraphInheritanceData>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *)#2}::__invoke(_DWORD *a1, uint64_t a2)
{
  uint64_t v2;
  int v3;
  unint64_t v4;
  uint64_t result;

  v2 = *(_QWORD *)a1;
  if (a1[2] == *(_DWORD *)(*(_QWORD *)a1 + 24))
  {
    v3 = a1[3];
    v4 = *(_QWORD *)(v2 + 16);
    if (v3 < (int)v4)
      a1[3] = ++v3;
    if (v4 <= v3)
      return 0;
    else
      return *(_QWORD *)(v2 + 32) + 48 * v3;
  }
  else
  {
    re::internal::assertLog((re::internal *)4, a2, "assertion failure: '%s' (%s:line %i) DynamicArray elements may not be added or removed during iteration.", "iter->originalVersion == iter->array->version()", "operator()", 313);
    result = _os_crash();
    __break(1u);
  }
  return result;
}

uint64_t re::TypeBuilderHelper::registerDynamicArray<re::RenderGraphInheritanceData>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::Allocator *)#2}::__invoke(uint64_t result, uint64_t a2)
{
  if (result)
    return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 40))(a2, result);
  return result;
}

void sub_225355E84(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_225355EE4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_225355FAC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

uint64_t *re::VideoAsset::assetType(re::VideoAsset *this)
{
  unsigned __int8 v1;

  {
    re::VideoAsset::assetType(void)::type = (uint64_t)"Video";
    qword_255827698 = 0;
    re::AssetType::generateCompiledExtension((re::AssetType *)&re::VideoAsset::assetType(void)::type);
  }
  return &re::VideoAsset::assetType(void)::type;
}

re::VideoAsset *re::VideoAsset::VideoAsset(re::VideoAsset *this)
{
  re *v7;
  NSObject *v8;
  int v10;
  re::VideoAsset *v11;
  uint64_t v12;

  v12 = *MEMORY[0x24BDAC8D0];
  *(_QWORD *)this = &off_24ED38210;
  *((_DWORD *)this + 2) = 0;
  *((_QWORD *)this + 2) = -1;
  *((_BYTE *)this + 24) = 0;
  *((_DWORD *)this + 7) = 0;
  *((_QWORD *)this + 4) = 0;
  *((_BYTE *)this + 40) = 0;
  *((_OWORD *)this + 3) = 0u;
  *((_OWORD *)this + 4) = 0u;
  *((_OWORD *)this + 5) = 0u;
  *((_QWORD *)this + 12) = 0;
  re::DynamicString::setCapacity((_QWORD *)this + 9, 0);
  *((_QWORD *)this + 13) = 0;
  *((_QWORD *)this + 14) = 0;
  *((_DWORD *)this + 30) = -1;
  *((_BYTE *)this + 124) = 0;
  *((_QWORD *)this + 17) = 0;
  *((_QWORD *)this + 18) = 0;
  *((_QWORD *)this + 16) = 0;
  *((_DWORD *)this + 38) = 0;
  *((_QWORD *)this + 20) = 0;
  *((_QWORD *)this + 21) = 0;
  *((_BYTE *)this + 176) = 0;
  *((_QWORD *)this + 24) = 0;
  *((_QWORD *)this + 25) = 0;
  *((_QWORD *)this + 23) = 0;
  *((_BYTE *)this + 208) = 0;
  *((_QWORD *)this + 27) = 0x800000008;
  *((_DWORD *)this + 56) = 3;
  *((_QWORD *)this + 29) = 0x21C000003C0;
  *((_DWORD *)this + 60) = 1;
  *((_WORD *)this + 122) = 256;
  *((_DWORD *)this + 62) = 0;
  *((_QWORD *)this + 32) = 0;
  *((_DWORD *)this + 66) = 0;
  *((_BYTE *)this + 512) = 0;
  *((_QWORD *)this + 65) = 1065353216;
  *((_QWORD *)this + 66) = 0x3F80000000000000;
  *((_WORD *)this + 268) = 0;
  *((_QWORD *)this + 68) = 0;
  *((_DWORD *)this + 138) = 0;
  *((_QWORD *)this + 75) = 1065353216;
  *((_QWORD *)this + 76) = 0x3F80000000000000;
  *((_OWORD *)this + 39) = 0u;
  *((_OWORD *)this + 40) = re::kVideoMajorColorDefault;
  *((_DWORD *)this + 164) = 0;
  *((_OWORD *)this + 42) = 0u;
  *((_QWORD *)this + 86) = 0x3F8000003F800000;
  *((_QWORD *)this + 87) = 1065353216;
  *((_QWORD *)this + 88) = 0x3F8000003F800000;
  *((_QWORD *)this + 89) = 1065353216;
  *((float *)this + 180) = re::VideoDefaults::hueLerpVelocityVideoTuning(0);
  *(_OWORD *)((char *)this + 724) = xmmword_2260FD410;
  *((float *)this + 185) = re::VideoDefaults::saturationPowerVideoTuning(0);
  *((_QWORD *)this + 93) = 0x3FC666663D4CCCCDLL;
  *((float *)this + 188) = re::VideoDefaults::minSaturationVideoTuning(0);
  *((float *)this + 189) = re::VideoDefaults::maxSaturationVideoTuning(0);
  *((float *)this + 190) = re::VideoDefaults::saturationInflectionVideoTuning(0);
  *((float *)this + 191) = re::VideoDefaults::saturationSmoothingVideoTuning(0);
  *((float *)this + 192) = re::VideoDefaults::brightnessMinVideoTuning(0);
  *((float *)this + 193) = re::VideoDefaults::brightnessMaxVideoTuning(0);
  *((_QWORD *)this + 97) = 0x42C800003F800000;
  *((float *)this + 196) = re::VideoDefaults::brightnessInflectionVideoTuning(0);
  *((float *)this + 197) = re::VideoDefaults::brightnessSmoothingVideoTuning(0);
  *(_OWORD *)((char *)this + 792) = xmmword_2260FD420;
  *((float *)this + 202) = re::VideoDefaults::colorSmoothTimeVideoTuning(0);
  *((_DWORD *)this + 203) = 1120403456;
  *((int32x4_t *)this + 51) = vdupq_n_s32(0x3E99999Au);
  *((_QWORD *)this + 104) = 0x3E8000003F0A3D71;
  *((float *)this + 210) = re::VideoDefaults::gazeDeadbandVideoTuning(0);
  *((_DWORD *)this + 211) = 1036831949;
  *((float *)this + 212) = re::VideoDefaults::gazeMaxAngleVideoTuning(0);
  *((_QWORD *)this + 108) = 1010174817;
  *((_QWORD *)this + 111) = 3212836864;
  *((_QWORD *)this + 110) = 0;
  *((_QWORD *)this + 113) = 3212836864;
  *((_QWORD *)this + 112) = 0;
  __asm { FMOV            V0.2S, #1.0 }
  *((_QWORD *)this + 114) = _D0;
  *((_DWORD *)this + 232) = 0;
  *((_WORD *)this + 466) = 0;
  *((_BYTE *)this + 934) = 1;
  v8 = *re::videoLogObjects(v7);
  if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
  {
    v10 = 134217984;
    v11 = this;
    _os_log_impl(&dword_224FE9000, v8, OS_LOG_TYPE_DEFAULT, "VideoAsset has been constructed: %p", (uint8_t *)&v10, 0xCu);
  }
  return this;
}

void re::VideoAsset::~VideoAsset(re::VideoAsset *this)
{
  uint64_t v2;
  uint64_t v3;
  const void *v4;
  const void *v5;
  uint64_t i;
  const void *v7;
  double v8;
  void *v9;
  re *v10;
  NSObject *v11;
  uint64_t v12;
  const void *v13;
  int v14;
  re::VideoAsset *v15;
  uint64_t v16;

  v16 = *MEMORY[0x24BDAC8D0];
  *(_QWORD *)this = &off_24ED38210;
  v2 = *((_QWORD *)this + 21);
  if (v2)
  {
    v3 = re::globalAllocators(this)[2];
    *(_QWORD *)(v2 + 6976) = 0;
    ++*(_DWORD *)(v2 + 6984);
    std::shared_ptr<re::AssetManager>::~shared_ptr[abi:nn180100](v2 + 4872);
    re::VideoPixelBufferPool::~VideoPixelBufferPool((const void **)(v2 + 4840));
    v4 = *(const void **)(v2 + 4792);
    if (v4)
      CFRelease(v4);
    v5 = *(const void **)(v2 + 4768);
    if (v5)
      CFRelease(v5);
    re::VideoHistogramManager::~VideoHistogramManager((re::VideoHistogramManager *)(v2 + 4672));
    re::VideoColorManager::~VideoColorManager((re::VideoColorManager *)(v2 + 2096));
    re::VideoPixelFormatDescriptionManager::~VideoPixelFormatDescriptionManager((re::VideoPixelFormatDescriptionManager *)(v2 + 2048));
    re::VideoPresentationQueue::~VideoPresentationQueue((re::VideoPresentationQueue *)(v2 + 256));
    for (i = 240; i != 216; i -= 8)
    {
      if (*(_QWORD *)(v2 + i))
        re::VideoObjectBase<re::VideoTextureBase,__CVBuffer *>::release((__CVBuffer **)(v2 + i));
      *(_QWORD *)(v2 + i) = 0;
    }
    v7 = *(const void **)(v2 + 216);
    if (v7)
    {
      CFRelease(v7);
      *(_QWORD *)(v2 + 216) = 0;
    }
    re::VideoTextureAllocator::~VideoTextureAllocator((void **)(v2 + 160));
    re::VideoPixelBufferPool::~VideoPixelBufferPool((const void **)(v2 + 128));
    re::VideoHDRProcessor::~VideoHDRProcessor((void **)(v2 + 80));
    re::DynamicInlineArray<re::SharedPtr<re::VideoHistogram>,2ul>::clear(v2 + 48);
    v8 = re::HashTable<re::VideoASEConfigurationKey,re::VideoASEProcessor::Entry,re::Hash<re::VideoASEConfigurationKey>,re::EqualTo<re::VideoASEConfigurationKey>,true,false>::deinit((uint64_t *)v2);
    (*(void (**)(uint64_t, uint64_t, double))(*(_QWORD *)v3 + 40))(v3, v2, v8);
    *((_QWORD *)this + 21) = 0;
  }
  v9 = (void *)*((_QWORD *)this + 13);
  *((_QWORD *)this + 13) = 0;

  v11 = *re::videoLogObjects(v10);
  if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
  {
    v14 = 134217984;
    v15 = this;
    _os_log_impl(&dword_224FE9000, v11, OS_LOG_TYPE_DEFAULT, "VideoAsset has been destructed: %p", (uint8_t *)&v14, 0xCu);
  }
  re::DynamicInlineArray<re::VideoObject<re::VideoFigDataChannelResourceBase>,5ul>::clear((uint64_t)this + 544);
  re::DynamicInlineArray<re::VideoAssetResourceData,10ul>::clear((_QWORD *)this + 32);
  re::DynamicArray<re::AssetHandle>::deinit((uint64_t)this + 128);

  v12 = *((_QWORD *)this + 9);
  if (v12)
  {
    if ((*((_BYTE *)this + 80) & 1) != 0)
      (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v12 + 40))(v12, *((_QWORD *)this + 11));
    *(_OWORD *)((char *)this + 72) = 0u;
    *(_OWORD *)((char *)this + 88) = 0u;
  }
  v13 = (const void *)*((_QWORD *)this + 4);
  if (v13)
    re::VideoObjectBase<re::VideoFigDataChannelResourceBase,OpaqueFigDataChannelResource *>::release(v13);
  *((_QWORD *)this + 4) = 0;
}

{
  re::VideoAsset::~VideoAsset(this);
  JUMPOUT(0x2276933B8);
}

void sub_225356558(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v3;
  const void *v4;

  re::DynamicInlineArray<re::VideoObject<re::VideoFigDataChannelResourceBase>,5ul>::clear(v1 + 544);
  re::DynamicInlineArray<re::VideoAssetResourceData,10ul>::clear((_QWORD *)(v1 + 256));
  re::DynamicArray<re::AssetHandle>::deinit(v1 + 128);

  v3 = *(_QWORD *)(v1 + 72);
  if (v3)
  {
    if ((*(_BYTE *)(v1 + 80) & 1) != 0)
      (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v3 + 40))(v3, *(_QWORD *)(v1 + 88));
    *(_OWORD *)(v1 + 72) = 0u;
    *(_OWORD *)(v1 + 88) = 0u;
  }
  v4 = *(const void **)(v1 + 32);
  if (v4)
    re::VideoObjectBase<re::VideoFigDataChannelResourceBase,OpaqueFigDataChannelResource *>::release(v4);
  *(_QWORD *)(v1 + 32) = 0;
  _Unwind_Resume(a1);
}

void re::VideoAsset::makeVideoMutableMemoryAsset(re::VideoAsset *this, AssetService *a2, AVSampleBufferVideoRenderer *a3)
{
  uint64_t *v5;
  re::VideoAsset *v6;
  re *v7;
  uint64_t *v8;
  uint64_t v9;
  void *v10;
  re::VideoAsset *v11;
  AssetService *v12;

  v12 = a2;
  v5 = re::globalAllocators((re *)v12);
  v6 = (re::VideoAsset *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v5[2] + 32))(v5[2], 944, 16);
  v7 = re::VideoAsset::VideoAsset(v6);
  v8 = re::globalAllocators(v7);
  v9 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v8[2] + 32))(v8[2], 56, 8);
  *(_QWORD *)(v9 + 48) = 0;
  *(_OWORD *)(v9 + 16) = 0u;
  *(_OWORD *)(v9 + 32) = 0u;
  *(_OWORD *)v9 = 0u;
  objc_storeStrong((id *)(v9 + 8), a2);
  v10 = *(void **)v9;
  *(_QWORD *)v9 = 0;

  *((_QWORD *)v6 + 23) = v9;
  re::VideoAsset::assetType(v11);
  (*(void (**)(re::VideoAsset *, re::VideoAsset *, uint64_t *, uint64_t, _QWORD, _QWORD))(*(_QWORD *)this
                                                                                                 + 416))(this, v6, &re::VideoAsset::assetType(void)::type, 1, 0, 0);

}

void sub_2253566D8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void re::VideoAsset::makeVideoMutableMemoryAsset(uint64_t a1, void *a2)
{
  uint64_t *v4;
  re::VideoAsset *v5;
  re *v6;
  uint64_t *v7;
  uint64_t v8;
  re::VideoAsset *v9;
  re *v10;

  v10 = a2;
  v4 = re::globalAllocators(v10);
  v5 = (re::VideoAsset *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v4[2] + 32))(v4[2], 944, 16);
  v6 = re::VideoAsset::VideoAsset(v5);
  v7 = re::globalAllocators(v6);
  v8 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v7[2] + 32))(v7[2], 56, 8);
  *(_QWORD *)(v8 + 48) = 0;
  *(_OWORD *)(v8 + 16) = 0u;
  *(_OWORD *)(v8 + 32) = 0u;
  *(_OWORD *)v8 = 0u;
  objc_storeStrong((id *)v8, a2);
  *((_QWORD *)v5 + 23) = v8;
  re::VideoAsset::assetType(v9);
  (*(void (**)(uint64_t, re::VideoAsset *, uint64_t *, uint64_t, _QWORD, _QWORD))(*(_QWORD *)a1 + 416))(a1, v5, &re::VideoAsset::assetType(void)::type, 1, 0, 0);

}

void sub_2253567C8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

uint64_t re::VideoAsset::makeVideoMutableMemoryAsset(re::VideoAsset *this, AssetService *a2)
{
  uint64_t *v3;
  re::VideoAsset *v4;
  re *v5;
  uint64_t *v6;
  uint64_t v7;

  v3 = re::globalAllocators(this);
  v4 = (re::VideoAsset *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v3[2] + 32))(v3[2], 944, 16);
  v5 = re::VideoAsset::VideoAsset(v4);
  v6 = re::globalAllocators(v5);
  v7 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v6[2] + 32))(v6[2], 56, 8);
  *(_OWORD *)v7 = 0u;
  *(_OWORD *)(v7 + 16) = 0u;
  *(_OWORD *)(v7 + 32) = 0u;
  *(_QWORD *)(v7 + 48) = 0;
  *((_QWORD *)v4 + 23) = v7;
  re::VideoAsset::assetType((re::VideoAsset *)v7);
  return (*(uint64_t (**)(re::VideoAsset *, re::VideoAsset *, uint64_t *, uint64_t, _QWORD, _QWORD))(*(_QWORD *)this + 416))(this, v4, &re::VideoAsset::assetType(void)::type, 1, 0, 0);
}

uint64_t re::VideoAsset::makeVideoMutableMemoryAssetWithoutTarget(re::VideoAsset *this, AssetService *a2)
{
  uint64_t *v3;
  re::VideoAsset *v4;
  re *v5;
  uint64_t *v6;
  uint64_t v7;

  v3 = re::globalAllocators(this);
  v4 = (re::VideoAsset *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v3[2] + 32))(v3[2], 944, 16);
  v5 = re::VideoAsset::VideoAsset(v4);
  v6 = re::globalAllocators(v5);
  v7 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v6[2] + 32))(v6[2], 56, 8);
  *(_OWORD *)(v7 + 40) = 0u;
  *(_OWORD *)(v7 + 8) = 0u;
  *(_OWORD *)(v7 + 24) = 0u;
  *(_BYTE *)(v7 + 48) = 1;
  *(_QWORD *)v7 = 0;
  *((_QWORD *)v4 + 23) = v7;
  re::VideoAsset::assetType((re::VideoAsset *)v7);
  return (*(uint64_t (**)(re::VideoAsset *, re::VideoAsset *, uint64_t *, uint64_t, _QWORD, _QWORD))(*(_QWORD *)this + 416))(this, v4, &re::VideoAsset::assetType(void)::type, 1, 0, 0);
}

re *re::VideoAsset::loadAndConnectForRendering(uint64_t *a1)
{
  re *v2;
  re *v3;
  uint64_t v4;
  NSObject *v5;
  REVideoRequestOptions *v7;
  uint8_t buf[16];

  re::AssetHandle::loadAsync((re::AssetHandle *)a1);
  v2 = (re *)re::AssetHandle::loadedAsset<re::VideoAsset>((re::VideoAsset *)a1);
  v3 = v2;
  if (v2)
  {
    v4 = *((_QWORD *)v2 + 24);
    if (v4)
    {
      if (*(_BYTE *)(v4 + 2472))
      {
        v5 = *re::videoLogObjects(v2);
        if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)buf = 0;
          _os_log_impl(&dword_224FE9000, v5, OS_LOG_TYPE_DEFAULT, "VideoAsset->loadAndConnectForRendering :: Loading Video Asset", buf, 2u);
        }
        *(_BYTE *)(v4 + 2472) = 0;
        re::VideoRequestOptions::makeWithReceiver((uint64_t *)v4, &v7);
        re::AssetManager::setAssetPayloadRequestOptions(*(_QWORD *)(a1[1] + 24), a1[1], (id *)&v7);

      }
    }
    else
    {
      return 0;
    }
  }
  return v3;
}

uint64_t re::AssetHandle::loadedAsset<re::VideoAsset>(re::VideoAsset *a1)
{
  if (!*((_QWORD *)a1 + 1))
    return 0;
  re::VideoAsset::assetType(a1);
  return re::AssetHandle::assetWithType(a1, (const re::AssetType *)&re::VideoAsset::assetType(void)::type, 1);
}

float64_t re::VideoAsset::dimensions(re::VideoAsset *this)
{
  float64x2_t v2;
  double v3;
  uint64_t v5;

  if (!*((_QWORD *)this + 23)
    || (objc_opt_respondsToSelector() & 1) == 0
    || (objc_msgSend(**((id **)this + 23), "videoTrackNaturalSize"), v2.f64[0] == 0.0)
    || v3 == 0.0)
  {
    v5 = *((_QWORD *)this + 24);
    if (v5)
      v2.f64[0] = *(float64_t *)(v5 + 2464);
    else
      v2.f64[0] = 0.0;
  }
  else
  {
    v2.f64[1] = v3;
    *(float32x2_t *)&v2.f64[0] = vcvt_f32_f64(v2);
  }
  return v2.f64[0];
}

id re::VideoAsset::getAVPlayer(id **this)
{
  id v1;

  if (!*((_BYTE *)this + 176) && this[23] && (objc_opt_class(), (objc_opt_isKindOfClass() & 1) != 0))
    v1 = *this[23];
  else
    v1 = 0;
  return v1;
}

id re::VideoAsset::getAVSampleBufferVideoRenderer(re::VideoAsset *this)
{
  uint64_t v2;

  if (*((_BYTE *)this + 176))
    return 0;
  v2 = *((_QWORD *)this + 23);
  if (!v2)
    return 0;
  else
    return *(id *)(v2 + 8);
}

id re::VideoAsset::testingGetInternalAVPlayer(id **this)
{
  id v2;

  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) != 0)
    v2 = *this[23];
  else
    v2 = 0;
  return v2;
}

void re::VideoPlaybackRuntimeData::updateAVPlayer(id *this, AVPlayer *a2)
{
  AVPlayer *v3;
  uint64_t isKindOfClass;
  NSObject *v5;
  id v6;
  id v7;
  uint8_t v8[16];

  v3 = a2;
  if (*this)
  {
    if (this[4])
      objc_msgSend(*this, "removeEndpoint:");
    objc_opt_class();
    isKindOfClass = objc_opt_isKindOfClass();
    if ((isKindOfClass & 1) != 0)
    {
      if (this[4])
        -[AVPlayer addVideoTarget:](v3, "addVideoTarget:");
    }
    else if (*this)
    {
      v5 = *re::assetTypesLogObjects((re *)isKindOfClass);
      if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)v8 = 0;
        _os_log_impl(&dword_224FE9000, v5, OS_LOG_TYPE_DEFAULT, "VideoAsset is replacing remote player with AVPlayer", v8, 2u);
      }
      v6 = this[4];
      if (v6)
        re::VideoObjectBase<re::VideoFigDataChannelResourceBase,OpaqueFigDataChannelResource *>::release(v6);
      this[4] = 0;
    }
  }
  v7 = *this;
  *this = v3;

}

void sub_225356C88(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void re::VideoPlaybackRuntimeData::updateAVSampleBufferVideoRenderer(id *this, AVSampleBufferVideoRenderer *a2)
{
  objc_storeStrong(this + 1, a2);
}

void re::VideoAsset::setAVPlayer(re::VideoAsset *this, AVPlayer *a2)
{
  id *v3;
  AVPlayer *v4;

  v4 = a2;
  re::VideoAsset::updateAutoPlay((uint64_t)this, 0, 0);
  v3 = (id *)*((_QWORD *)this + 23);
  if (v3)
    re::VideoPlaybackRuntimeData::updateAVPlayer(v3, v4);
  re::VideoAsset::updateVideoTarget(this);

}

void sub_225356CF8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void re::VideoAsset::updateAutoPlay(uint64_t a1, int a2, int a3)
{
  int v6;
  _QWORD *v7;
  _BOOL4 v8;
  _BOOL4 v9;
  void *v11;
  NSObject *v12;
  _BOOL8 v13;
  id *v14;
  AVPlayer *v15;
  void **v16;
  void *v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  void **v21;
  void *v22;
  id v23;
  uint64_t v24;
  re::VideoFileAsset *v25;
  uint64_t v26;
  uint64_t v27;
  id v28;
  void *v29;
  void *v30;
  uint64_t v31;
  re::VideoFileAsset *v32;
  uint64_t v33;
  uint64_t v34;
  id v35;
  REVideoPlayerItemsLooper *v36;
  void *v37;
  uint64_t v38;
  uint64_t v39;
  void *v40;
  uint8_t v41[16];

  v6 = *(unsigned __int8 *)(a1 + 176);
  *(_BYTE *)(a1 + 176) = a2;
  v7 = *(_QWORD **)(a1 + 184);
  if (!v7)
  {
    if (!a2)
      return;
    v8 = 0;
    goto LABEL_17;
  }
  v8 = *v7 != 0;
  if (v6)
    v9 = *v7 != 0;
  else
    v9 = 0;
  if (a2 != 2 && v9 && v6 == 2)
  {
    v11 = (void *)v7[2];
    v7[2] = 0;

  }
  if (a2)
  {
    if (v9)
      goto LABEL_25;
LABEL_17:
    v12 = *re::assetTypesLogObjects((re *)a1);
    v13 = os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT);
    if (v13)
    {
      *(_WORD *)v41 = 0;
      _os_log_impl(&dword_224FE9000, v12, OS_LOG_TYPE_DEFAULT, "videoFileAutoPlay will replace current AVPlayer", v41, 2u);
    }
    v14 = *(id **)(a1 + 184);
    if (v14)
    {
      v15 = (AVPlayer *)objc_opt_new();
      re::VideoPlaybackRuntimeData::updateAVPlayer(v14, v15);

      if (!v8)
        goto LABEL_27;
    }
    else
    {
      v18 = re::globalAllocators((re *)v13);
      v19 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v18[2] + 32))(v18[2], 56, 8);
      *(_OWORD *)v19 = 0u;
      *(_OWORD *)(v19 + 16) = 0u;
      *(_OWORD *)(v19 + 32) = 0u;
      *(_QWORD *)(v19 + 48) = 0;
      *(_QWORD *)(a1 + 184) = v19;
      v20 = objc_opt_new();
      v21 = *(void ***)(a1 + 184);
      v22 = *v21;
      *v21 = (void *)v20;

      re::VideoAsset::init((uint64_t **)a1);
      if (!v8)
      {
LABEL_27:
        v23 = **(id **)(a1 + 184);
        if (a2 == 2)
        {
          objc_msgSend(MEMORY[0x24BDBCEB8], "arrayWithCapacity:", *(_QWORD *)(a1 + 144));
          v30 = (void *)objc_claimAutoreleasedReturnValue();
          v31 = *(_QWORD *)(a1 + 144);
          if (v31)
          {
            v32 = *(re::VideoFileAsset **)(a1 + 160);
            v33 = 24 * v31;
            do
            {
              v34 = re::AssetHandle::asset<re::VideoFileAsset>(v32);
              if (v34)
              {
                v35 = **(id **)(v34 + 40);
                if (v35)
                  objc_msgSend(v30, "addObject:", v35);

              }
              v32 = (re::VideoFileAsset *)((char *)v32 + 24);
              v33 -= 24;
            }
            while (v33);
          }
          if (objc_msgSend(v30, "count"))
          {
            v36 = [REVideoPlayerItemsLooper alloc];
            v37 = (void *)objc_msgSend(v30, "copy");
            v38 = -[REVideoPlayerItemsLooper initWithPlayer:assets:](v36, "initWithPlayer:assets:", v23, v37);
            v39 = *(_QWORD *)(a1 + 184);
            v40 = *(void **)(v39 + 16);
            *(_QWORD *)(v39 + 16) = v38;

          }
        }
        else if (a2 == 1)
        {
          v24 = *(_QWORD *)(a1 + 144);
          if (v24)
          {
            v25 = *(re::VideoFileAsset **)(a1 + 160);
            v26 = 24 * v24;
            do
            {
              v27 = re::AssetHandle::asset<re::VideoFileAsset>(v25);
              if (v27)
              {
                v28 = **(id **)(v27 + 40);
                if (v28)
                {
                  objc_msgSend(MEMORY[0x24BDB2618], "playerItemWithAsset:", v28);
                  v29 = (void *)objc_claimAutoreleasedReturnValue();
                  objc_msgSend(v23, "insertItem:afterItem:", v29, 0);

                }
              }
              v25 = (re::VideoFileAsset *)((char *)v25 + 24);
              v26 -= 24;
            }
            while (v26);
          }
          objc_msgSend(v23, "play");
        }

        return;
      }
    }
LABEL_25:
    if (v6 == a2 && !a3)
      return;
    goto LABEL_27;
  }
  if (v9)
  {
    objc_msgSend(**(id **)(a1 + 184), "pause");
    v16 = *(void ***)(a1 + 184);
    v17 = *v16;
    *v16 = 0;

  }
}

void sub_225357014(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void re::VideoAsset::updateVideoTarget(re::VideoAsset *this)
{
  uint64_t v1;
  uint64_t v3;
  const void *v4;
  const void *v5;
  const void *v6;
  re *v7;
  int v8;
  NSObject *v9;
  uint8_t buf[4];
  int v11;
  uint64_t v12;

  v12 = *MEMORY[0x24BDAC8D0];
  v1 = *((_QWORD *)this + 23);
  if (v1)
  {
    if (*(_QWORD *)v1)
    {
      if (*(_QWORD *)(v1 + 32))
      {
        objc_msgSend(*(id *)v1, "removeEndpoint:");
        v3 = *((_QWORD *)this + 23);
        v4 = *(const void **)(v3 + 32);
        v1 = v3;
        if (v4)
        {
          re::VideoObjectBase<re::VideoFigDataChannelResourceBase,OpaqueFigDataChannelResource *>::release(v4);
          v1 = *((_QWORD *)this + 23);
        }
        *(_QWORD *)(v3 + 32) = 0;
      }
      if (*(_QWORD *)(v1 + 40))
      {
        objc_msgSend(*(id *)v1, "addEndpoint:");
        v5 = (const void *)objc_claimAutoreleasedReturnValue();
        if (v5)
        {
          re::VideoObject<re::VideoFigDataChannelResourceBase>::setRef((const void **)(*((_QWORD *)this + 23) + 32), v5);
          CFRelease(v5);
        }
      }
    }
    else if (*(_QWORD *)(v1 + 8))
    {
      v6 = *(const void **)(v1 + 32);
      if (v6)
      {
        re::VideoObjectBase<re::VideoFigDataChannelResourceBase,OpaqueFigDataChannelResource *>::release(v6);
        *(_QWORD *)(v1 + 32) = 0;
        v1 = *((_QWORD *)this + 23);
      }
      if (*(_QWORD *)(v1 + 40))
      {
        CFAllocatorGetDefault();
        v7 = (re *)FigVideoTargetCreateWithVideoReceiverEndpointID();
        v8 = (int)v7;
        if ((_DWORD)v7)
        {
          v9 = *re::assetTypesLogObjects(v7);
          if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)buf = 67109120;
            v11 = v8;
            _os_log_error_impl(&dword_224FE9000, v9, OS_LOG_TYPE_ERROR, "Failed to create video target from endpoint (error: %d)", buf, 8u);
          }
        }
        else
        {
          objc_msgSend(*(id *)(*((_QWORD *)this + 23) + 8), "addVideoTarget:", 0);
          re::VideoObject<re::VideoFigDataChannelResourceBase>::setRef((const void **)(*((_QWORD *)this + 23) + 32), 0);
          CFRelease(0);
        }
      }
    }
  }
}

void re::VideoAsset::setAVSampleBufferVideoRenderer(re::VideoAsset *this, AVSampleBufferVideoRenderer *a2)
{
  uint64_t v4;
  AVSampleBufferVideoRenderer *v5;

  v5 = a2;
  re::VideoAsset::updateAutoPlay((uint64_t)this, 0, 0);
  v4 = *((_QWORD *)this + 23);
  if (v4)
    objc_storeStrong((id *)(v4 + 8), a2);
  re::VideoAsset::updateVideoTarget(this);

}

void sub_225357270(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

id re::VideoAsset::getRemotePlayer(id **this)
{
  id v2;

  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) != 0)
    v2 = 0;
  else
    v2 = *this[23];
  return v2;
}

void re::VideoAsset::setRemotePlayer(uint64_t a1, void *a2)
{
  id v4;
  re *v5;
  NSObject *v6;
  uint64_t v7;
  uint64_t v8;
  const void *v9;
  uint8_t v10[16];

  v4 = a2;
  v5 = (re *)objc_msgSend(v4, "isEqual:", **(_QWORD **)(a1 + 184));
  if ((v5 & 1) == 0)
  {
    if (**(_QWORD **)(a1 + 184))
    {
      v6 = *re::assetTypesLogObjects(v5);
      if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)v10 = 0;
        _os_log_impl(&dword_224FE9000, v6, OS_LOG_TYPE_DEFAULT, "VideoAsset is replacing remote player", v10, 2u);
      }
      v7 = *(_QWORD *)(a1 + 184);
      if (*(_QWORD *)(v7 + 32))
      {
        objc_msgSend(*(id *)v7, "removeEndpoint:");
        v8 = *(_QWORD *)(a1 + 184);
        v9 = *(const void **)(v8 + 32);
        if (v9)
          re::VideoObjectBase<re::VideoFigDataChannelResourceBase,OpaqueFigDataChannelResource *>::release(v9);
        *(_QWORD *)(v8 + 32) = 0;
      }
    }
    re::VideoAsset::updateAutoPlay(a1, 0, 0);
    objc_storeStrong(*(id **)(a1 + 184), a2);
  }

}

void sub_2253573B4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void *re::VideoAsset::setCurrentUserProvidedVideoPixelBuffers(re::VideoAsset *a1, uint64_t a2)
{
  uint64_t v4;
  void *result;
  __int128 v6;
  __int128 v7;
  uint64_t v8;
  unint64_t v9;

  re::VideoAsset::clearCurrentUserProvidedVideoPixelBuffers(a1);
  v4 = *((_QWORD *)a1 + 24);
  result = re::DynamicInlineArray<__CVBuffer *,2ul>::operator=((uint64_t *)(v4 + 24), (uint64_t *)a2);
  v6 = *(_OWORD *)(a2 + 32);
  v7 = *(_OWORD *)(a2 + 48);
  *(_DWORD *)(v4 + 88) = *(_DWORD *)(a2 + 64);
  *(_OWORD *)(v4 + 72) = v7;
  *(_OWORD *)(v4 + 56) = v6;
  v8 = *((_QWORD *)a1 + 24);
  if (*(_QWORD *)(v8 + 24))
  {
    v9 = 0;
    do
      result = CVPixelBufferRetain(*(CVPixelBufferRef *)(v8 + 40 + 8 * v9++));
    while (v9 < *(_QWORD *)(v8 + 24));
  }
  return result;
}

void re::VideoAsset::clearCurrentUserProvidedVideoPixelBuffers(re::VideoAsset *this)
{
  uint64_t v1;
  unint64_t v3;

  v1 = *((_QWORD *)this + 24);
  if (*(_QWORD *)(v1 + 24))
  {
    v3 = 0;
    do
      CVPixelBufferRelease(*(CVPixelBufferRef *)(v1 + 40 + 8 * v3++));
    while (v3 < *(_QWORD *)(v1 + 24));
    v1 = *((_QWORD *)this + 24);
  }
  *(_QWORD *)(v1 + 24) = 0;
  ++*(_DWORD *)(v1 + 32);
}

void *re::VideoAsset::setFutureUserProvidedVideoPixelBuffers(re::VideoAsset *a1, uint64_t a2)
{
  uint64_t v4;
  void *result;
  __int128 v6;
  __int128 v7;
  uint64_t v8;
  unint64_t v9;

  re::VideoAsset::clearFutureUserProvidedVideoPixelBuffers(a1);
  v4 = *((_QWORD *)a1 + 24);
  result = re::DynamicInlineArray<__CVBuffer *,2ul>::operator=((uint64_t *)(v4 + 96), (uint64_t *)a2);
  v6 = *(_OWORD *)(a2 + 32);
  v7 = *(_OWORD *)(a2 + 48);
  *(_DWORD *)(v4 + 160) = *(_DWORD *)(a2 + 64);
  *(_OWORD *)(v4 + 128) = v6;
  *(_OWORD *)(v4 + 144) = v7;
  v8 = *((_QWORD *)a1 + 24);
  if (*(_QWORD *)(v8 + 96))
  {
    v9 = 0;
    do
      result = CVPixelBufferRetain(*(CVPixelBufferRef *)(v8 + 112 + 8 * v9++));
    while (v9 < *(_QWORD *)(v8 + 96));
  }
  return result;
}

void re::VideoAsset::clearFutureUserProvidedVideoPixelBuffers(re::VideoAsset *this)
{
  uint64_t v1;
  unint64_t v3;

  v1 = *((_QWORD *)this + 24);
  if (*(_QWORD *)(v1 + 96))
  {
    v3 = 0;
    do
      CVPixelBufferRelease(*(CVPixelBufferRef *)(v1 + 112 + 8 * v3++));
    while (v3 < *(_QWORD *)(v1 + 96));
    v1 = *((_QWORD *)this + 24);
  }
  *(_QWORD *)(v1 + 96) = 0;
  ++*(_DWORD *)(v1 + 104);
}

uint64_t re::VideoAsset::getVideoTextureHandles@<X0>(uint64_t this@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  int *v4;
  int v5;
  char v6;

  v3 = *(_QWORD *)(this + 192);
  *(_DWORD *)(a2 + 108) = 0;
  *(_QWORD *)(a2 + 100) = 0;
  *(_OWORD *)a2 = 0u;
  *(_OWORD *)(a2 + 16) = 0u;
  *(_OWORD *)(a2 + 32) = 0u;
  *(_OWORD *)(a2 + 48) = 0u;
  *(_OWORD *)(a2 + 64) = 0u;
  *(_OWORD *)(a2 + 76) = 0u;
  *(_QWORD *)(a2 + 220) = 0;
  *(_DWORD *)(a2 + 228) = 0;
  *(_OWORD *)(a2 + 120) = 0u;
  *(_OWORD *)(a2 + 136) = 0u;
  *(_OWORD *)(a2 + 152) = 0u;
  *(_OWORD *)(a2 + 168) = 0u;
  *(_OWORD *)(a2 + 184) = 0u;
  if (v3)
  {
    v4 = (int *)(v3 + 2192);
    *(_OWORD *)(a2 + 196) = 0u;
    this = std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:nn180100]<re::VideoChannelTextureHandles const*,re::VideoChannelTextureHandles const*,re::VideoChannelTextureHandles*>((uint64_t)&v6, v3 + 1952, v3 + 2192, a2);
    v5 = *v4;
  }
  else
  {
    *(_OWORD *)(a2 + 196) = 0u;
    v5 = -1;
  }
  *(_DWORD *)(a2 + 240) = v5;
  return this;
}

void sub_22535765C(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = 0;
  while (1)
  {
    v4 = v1 + v3;
    if (*(_QWORD *)(v1 + v3 + 224))
      re::VideoObjectBase<re::VideoColorTransformBase,__CFArray const*>::release((const void **)(v1 + v3 + 224));
    *(_QWORD *)(v1 + v3 + 224) = 0;
    re::TextureHandle::invalidate((re::TextureHandle *)(v4 + 184));
    re::TextureHandle::invalidate((re::TextureHandle *)(v4 + 168));
    re::TextureHandle::invalidate((re::TextureHandle *)(v4 + 152));
    re::TextureHandle::invalidate((re::TextureHandle *)(v4 + 136));
    re::TextureHandle::invalidate((re::TextureHandle *)(v1 + v3 + 120));
    v3 -= 120;
    if (v3 == -240)
      _Unwind_Resume(a1);
  }
}

uint64_t re::VideoAsset::getLegacyVideoTextureHandles@<X0>(uint64_t this@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  int *v4;
  int v5;
  char v6;

  v3 = *(_QWORD *)(this + 192);
  *(_DWORD *)(a2 + 108) = 0;
  *(_QWORD *)(a2 + 100) = 0;
  *(_OWORD *)a2 = 0u;
  *(_OWORD *)(a2 + 16) = 0u;
  *(_OWORD *)(a2 + 32) = 0u;
  *(_OWORD *)(a2 + 48) = 0u;
  *(_OWORD *)(a2 + 64) = 0u;
  *(_OWORD *)(a2 + 76) = 0u;
  *(_QWORD *)(a2 + 220) = 0;
  *(_DWORD *)(a2 + 228) = 0;
  *(_OWORD *)(a2 + 120) = 0u;
  *(_OWORD *)(a2 + 136) = 0u;
  *(_OWORD *)(a2 + 152) = 0u;
  *(_OWORD *)(a2 + 168) = 0u;
  *(_OWORD *)(a2 + 184) = 0u;
  if (v3)
  {
    v4 = (int *)(v3 + 2440);
    *(_OWORD *)(a2 + 196) = 0u;
    this = std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:nn180100]<re::VideoChannelTextureHandles const*,re::VideoChannelTextureHandles const*,re::VideoChannelTextureHandles*>((uint64_t)&v6, v3 + 2200, v3 + 2440, a2);
    v5 = *v4;
  }
  else
  {
    *(_OWORD *)(a2 + 196) = 0u;
    v5 = -1;
  }
  *(_DWORD *)(a2 + 240) = v5;
  return this;
}

void sub_22535779C(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = 0;
  while (1)
  {
    v4 = v1 + v3;
    if (*(_QWORD *)(v1 + v3 + 224))
      re::VideoObjectBase<re::VideoColorTransformBase,__CFArray const*>::release((const void **)(v1 + v3 + 224));
    *(_QWORD *)(v1 + v3 + 224) = 0;
    re::TextureHandle::invalidate((re::TextureHandle *)(v4 + 184));
    re::TextureHandle::invalidate((re::TextureHandle *)(v4 + 168));
    re::TextureHandle::invalidate((re::TextureHandle *)(v4 + 152));
    re::TextureHandle::invalidate((re::TextureHandle *)(v4 + 136));
    re::TextureHandle::invalidate((re::TextureHandle *)(v1 + v3 + 120));
    v3 -= 120;
    if (v3 == -240)
      _Unwind_Resume(a1);
  }
}

uint64_t re::VideoAsset::getResourceContext(re::VideoAsset *this)
{
  return (uint64_t)this + 248;
}

{
  return (uint64_t)this + 248;
}

void re::VideoAsset::retrieveBuffersAndUpdateRuntimeData(re::VideoAsset *this, char **a2, re::RenderManager *a3, re::ColorManager *a4, unint64_t a5, id *a6, CMTime *a7, float a8, BOOL *a9, BOOL *a10)
{
  uint64_t v10;
  re::VideoAsset *v17;
  uint64_t v18;
  uint64_t v19;
  __int128 *v20;
  re *v21;
  uint64_t v22;
  int v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  char v27;
  char v28;
  re *v29;
  NSObject *v30;
  re *v31;
  BOOL v32;
  BOOL *v33;
  unint64_t v34;
  int v35;
  int v36;
  unint64_t v37;
  uint64_t v38;
  unsigned int v39;
  unint64_t v40;
  unsigned int **v41;
  unsigned int v42;
  NSObject *v43;
  re *v44;
  NSObject *v45;
  re::VideoHistogram *v46;
  const re::VideoPresentationGroup *v47;
  re::VideoDefaults *v48;
  uint64_t v49;
  __int128 v50;
  int v51;
  NSObject *v52;
  re *v53;
  NSObject *v54;
  unint64_t v55;
  __int16 *v56;
  uint64_t v57;
  unint64_t v58;
  unint64_t v59;
  __int16 *v60;
  uint64_t v61;
  unint64_t v62;
  id v63;
  uint64_t v64;
  unint64_t v65;
  unint64_t v66;
  unint64_t v67;
  uint64_t v68;
  unint64_t v69;
  unint64_t v70;
  unint64_t v71;
  float v72;
  float v73;
  float64x2_t v74;
  float64x2_t v75;
  re::VideoDefaults *v76;
  float v77;
  uint64_t v78;
  re::VideoDefaults *v79;
  re *v80;
  NSObject *v81;
  NSObject *v82;
  uint64_t v83;
  uint64_t v84;
  NSObject *v85;
  uint64_t v86;
  uint64_t v88;
  id v89;
  id v90;
  id v91;
  id v92;
  CMTime v93;
  CMTime time2;
  CMTime v95;
  unint64_t v96;
  int v97;
  int v98;
  _DWORD v99[2];
  uint64_t v100;
  int v101;
  uint64_t v102;
  int v103;
  uint64_t v104;
  int v105;
  uint64_t v106;
  int v107;
  uint64_t v108;
  int v109;
  uint64_t v110;
  int v111;
  uint64_t v112;
  int v113;
  uint64_t v114;
  int v115;
  uint64_t v116;
  int v117;
  char v118;
  uint64_t v119;
  int v120;
  uint64_t v121;
  int v122;
  uint64_t v123;
  char v124;
  __int128 v125;
  __int128 v126;
  __int128 v127;
  __int16 v128;
  char v129;
  int v130;
  __int128 v131;
  int v132;
  uint64_t v133;
  int v134;
  uint64_t v135;
  int v136;
  uint64_t v137;
  int v138;
  unint64_t v139;
  int v140;
  _QWORD v141[5];
  int v142;
  char v143;
  uint64_t v144;
  CMTime v145;
  uint64_t v146;
  int v147;
  int v148;
  _DWORD v149[2];
  uint64_t v150;
  int v151;
  unint64_t v152;
  int v153;
  uint64_t v154;
  unint64_t v155;
  int v156;
  uint64_t v157;
  unint64_t v158;
  int v159;
  _QWORD v160[7];
  int v161;
  uint64_t v162;
  int v163;
  uint64_t v164;
  int v165;
  unint64_t v166;
  int v167;
  _QWORD v168[2];
  unint64_t v169;
  int v170;
  _QWORD v171[2];
  char v172;
  uint64_t v173;
  int v174;
  uint64_t v175;
  int v176;
  unint64_t v177;
  char v178;
  uint64x2_t v179;
  __int128 v180;
  __int128 v181;
  float64x2_t v182;
  float64x2_t v183;
  __int16 v184;
  char v185;
  int v186;
  __int128 v187;
  int v188;
  _BYTE v189[16];
  unint64_t v190;
  int v191;
  _BYTE v192[12];
  unint64_t v193;
  int v194;
  int v195;
  uint64_t v196;
  int v197;
  re::VideoHistogram *v198;
  unint64_t v199;
  int v200;
  uint64_t v201;
  int v202;
  float v203;
  char v204;
  uint64_t v205;
  CMTime buf;
  uint64_t v207;

  v207 = *MEMORY[0x24BDAC8D0];
  v10 = *((_QWORD *)this + 24);
  if (!v10)
    return;
  v17 = this;
  v145 = *(CMTime *)*(_QWORD *)&MEMORY[0x24BDC0D40];
  v146 = 0;
  v147 = 0;
  v150 = 0;
  v151 = 0;
  v152 = 0;
  v153 = 0;
  v155 = 0;
  v156 = 0;
  v158 = 0;
  v159 = 0;
  v160[6] = 0;
  v161 = 0;
  v162 = 0;
  v163 = 0;
  v164 = 0;
  v165 = 0;
  v166 = 0;
  v167 = 0;
  v169 = 0;
  v170 = 0;
  v172 = 0;
  v173 = 0;
  v174 = 0;
  v175 = 0;
  v176 = 0;
  v177 = 0;
  v178 = 0;
  v184 = 0;
  v185 = 0;
  v181 = 0u;
  v180 = 0u;
  v179 = 0u;
  v186 = -1;
  v190 = 0;
  v191 = 0;
  v193 = 0;
  v194 = 0;
  v196 = 0;
  v197 = 0;
  v199 = 0;
  v200 = 0;
  v201 = 0;
  v202 = 0;
  v204 = 0;
  v187 = 0u;
  v188 = 0;
  v205 = 1;
  v95 = *(CMTime *)*(_QWORD *)&MEMORY[0x24BDC0D40];
  v96 = 0;
  v97 = 0;
  v100 = 0;
  v101 = 0;
  v102 = 0;
  v103 = 0;
  v104 = 0;
  v105 = 0;
  v106 = 0;
  v107 = 0;
  v108 = 0;
  v109 = 0;
  v110 = 0;
  v111 = 0;
  v112 = 0;
  v113 = 0;
  v114 = 0;
  v115 = 0;
  v116 = 0;
  v117 = 0;
  v118 = 0;
  v119 = 0;
  v120 = 0;
  v121 = 0;
  v122 = 0;
  v123 = 0;
  v124 = 0;
  v128 = 0;
  v129 = 0;
  v126 = 0u;
  v127 = 0u;
  v125 = 0u;
  v130 = -1;
  v133 = 0;
  v134 = 0;
  v135 = 0;
  v136 = 0;
  v137 = 0;
  v138 = 0;
  v139 = 0;
  v140 = 0;
  v141[4] = 0;
  v142 = 0;
  v143 = 0;
  v131 = 0u;
  v132 = 0;
  v144 = 1;
  v18 = *(_QWORD *)(v10 + 1944);
  v86 = v10 + 176;
  if (*(_QWORD *)(v10 + 1936) == v18)
  {
    v19 = *((_QWORD *)this + 21);
    if (*(_QWORD *)(v19 + 2032) == *(_QWORD *)(v19 + 2040))
      goto LABEL_7;
    v20 = (__int128 *)(v19 + 880 * (*(_QWORD *)(v19 + 2032) & 1) + 272);
  }
  else
  {
    v20 = (__int128 *)(v10 + 176 + 880 * ((v18 & 1) == 0));
  }
  this = (re::VideoAsset *)re::VideoPresentationGroup::operator=((uint64_t)&v95, v20);
LABEL_7:
  v21 = (re *)re::VideoDefaults::logEnabled(this);
  if ((_DWORD)v21)
    goto LABEL_172;
  while (1)
  {
    re::VideoLightSpillGenerator::setupSession((re::VideoLightSpillGenerator *)(*((_QWORD *)v17 + 21) + 4752), *((_QWORD *)v17 + 27), HIDWORD(*((_QWORD *)v17 + 27)), *((_DWORD *)v17 + 56));
    re::VideoLightSpillGenerator::setupSession((re::VideoLightSpillGenerator *)(*((_QWORD *)v17 + 21) + 4776), *((_QWORD *)v17 + 29), HIDWORD(*((_QWORD *)v17 + 29)), *((_DWORD *)v17 + 60));
    v22 = *((_QWORD *)v17 + 21);
    v93 = *a7;
    v23 = re::retrievePresentationGroupForTime(v22, v10, &v93, (unint64_t)a2, (unint64_t)a3, *((_QWORD **)a3 + 36), (unsigned __int8 *)a4, *((_QWORD *)a3 + 8), a5, (uint64_t)&v145, (uint64_t)v17 + 40, *((void **)v17 + 13), *((_QWORD *)v17 + 24) + 24);
    v24 = v10;
    v25 = a5;
    v26 = 0;
    a7 = (CMTime *)(v24 + 1952);
    v88 = v24;
    a4 = (re::ColorManager *)(v24 + 2200);
    v27 = 1;
    do
    {
      v28 = v27;
      re::VideoChannelTextureHandles::setFallbackTextures((re::VideoChannelTextureHandles *)&a7[5 * v26], *((id **)a3 + 8));
      re::VideoChannelTextureHandles::setFallbackTextures((re::ColorManager *)((char *)a4 + 120 * v26), *((id **)a3 + 8));
      v27 = 0;
      v26 = 1;
    }
    while ((v28 & 1) != 0);
    *a6 = 0;
    if (v23)
      goto LABEL_15;
    if ((v177 & ~v25) != 0)
    {
      v30 = *re::videoLogObjects(v29);
      if (os_log_type_enabled(v30, OS_LOG_TYPE_DEFAULT))
      {
        LODWORD(buf.value) = 134218240;
        *(CMTimeValue *)((char *)&buf.value + 4) = v177;
        LOWORD(buf.flags) = 2048;
        *(_QWORD *)((char *)&buf.flags + 2) = v25;
        _os_log_impl(&dword_224FE9000, v30, OS_LOG_TYPE_DEFAULT, "Unable to play back protected content %llu at current protection levels %llu.", (uint8_t *)&buf, 0x16u);
      }
      *a6 = (id)v177;
      v23 = 3;
LABEL_15:
      a5 = 0;
      *a10 = 0;
LABEL_16:
      v10 = v88;
      goto LABEL_17;
    }
    *a6 = (id)v177;
    v10 = v88;
    if (v199)
    {
      v37 = 0;
      v38 = 800;
      while (1)
      {
        v39 = atomic_load(*(unsigned int **)((char *)&v145.value + v38));
        if (v39 != 8)
          break;
        ++v37;
        v38 += 16;
        if (v37 >= v199)
          goto LABEL_40;
      }
      if (v139)
      {
        v40 = 0;
        v41 = (unsigned int **)v141;
        while (1)
        {
          v42 = atomic_load(*v41);
          if (v42 != 8)
            break;
          ++v40;
          v41 += 2;
          if (v40 >= v139)
            goto LABEL_37;
        }
        v81 = *re::videoLogObjects(v29);
        if (os_log_type_enabled(v81, OS_LOG_TYPE_DEFAULT))
        {
          LOWORD(buf.value) = 0;
          _os_log_impl(&dword_224FE9000, v81, OS_LOG_TYPE_DEFAULT, "Presentation group is not ready.", (uint8_t *)&buf, 2u);
        }
        v23 = 5;
        goto LABEL_15;
      }
LABEL_37:
      v43 = *re::videoLogObjects(v29);
      if (os_log_type_enabled(v43, OS_LOG_TYPE_DEFAULT))
      {
        LOWORD(buf.value) = 0;
        _os_log_impl(&dword_224FE9000, v43, OS_LOG_TYPE_DEFAULT, "Presentation group is not ready. Using previous presentation group.", (uint8_t *)&buf, 2u);
      }
      v29 = (re *)re::VideoPresentationGroup::operator=((uint64_t)&v145, (__int128 *)&v95.value);
      v10 = v88;
    }
LABEL_40:
    a5 = 1;
    *a10 = 1;
    if (!*((_BYTE *)v17 + 933))
    {
      *((_BYTE *)v17 + 933) = 1;
      v44 = (re *)re::VideoDefaults::logEnabled(v29);
      if ((_DWORD)v44)
      {
        v85 = *re::videoLogObjects(v44);
        if (os_log_type_enabled(v85, OS_LOG_TYPE_DEFAULT))
        {
          LOWORD(buf.value) = 0;
          _os_log_impl(&dword_224FE9000, v85, OS_LOG_TYPE_DEFAULT, "[VideoAsset]->retrieveBuffersAndUpdateRuntimeData :: outPixelBufferFound is set to True which is variable for VideoComponent::isReadyToRender", (uint8_t *)&buf, 2u);
        }
        v23 = 0;
        a5 = 1;
        goto LABEL_16;
      }
    }
    v23 = 0;
LABEL_17:
    buf = v95;
    time2 = v145;
    v31 = (re *)CMTimeCompare(&buf, &time2);
    if ((_DWORD)v31)
    {
      v32 = 0;
      v33 = a9;
      goto LABEL_45;
    }
    v33 = a9;
    if (v96 != v146)
    {
LABEL_26:
      v32 = 0;
      goto LABEL_45;
    }
    if (v96)
    {
      if (v98 != v148)
        goto LABEL_26;
      v34 = 0;
      while (v96 - 1 != v34)
      {
        v35 = v99[v34];
        v36 = v149[v34++];
        if (v35 != v36)
          goto LABEL_44;
      }
      v34 = v96;
LABEL_44:
      v32 = v34 >= v96;
    }
    else
    {
      v32 = 1;
    }
LABEL_45:
    *v33 = !v32;
    if (!(_DWORD)a5)
      break;
    if (*((_BYTE *)v17 + 245))
    {
      v45 = *re::videoLogObjects(v31);
      v31 = (re *)os_log_type_enabled(v45, OS_LOG_TYPE_DEFAULT);
      if ((_DWORD)v31)
      {
        LOWORD(buf.value) = 0;
        _os_log_impl(&dword_224FE9000, v45, OS_LOG_TYPE_DEFAULT, "First successful sampling", (uint8_t *)&buf, 2u);
      }
      *((_BYTE *)v17 + 245) = 0;
    }
    v46 = (re::VideoHistogram *)re::VideoDefaults::logEnabled(v31);
    if ((_DWORD)v46)
      re::CoreVideoUtils::printPresentationGroupInfo(&v145, v47);
    if (v204 || !v196)
    {
      v50 = re::kVideoMajorColorDefault;
      *((_OWORD *)v17 + 39) = 0u;
    }
    else
    {
      v46 = v198;
      if (!v198)
        goto LABEL_73;
      v46 = (re::VideoHistogram *)re::VideoHistogram::data(v198);
      if (!*(_QWORD *)v46)
        goto LABEL_73;
      v48 = (re::VideoDefaults *)re::videoStatisticsComputeAverageColor(v198, v47);
      buf.value = (CMTimeValue)v48;
      *(_QWORD *)&buf.timescale = v49;
      *((_OWORD *)v17 + 39) = *(_OWORD *)&buf.value;
      v46 = (re::VideoHistogram *)re::VideoDefaults::passthroughTintColorTuningAllowed(v48);
      if ((_DWORD)v46)
      {
        re::VideoColorTuner::calculateColor((uint64_t)v17 + 656, (float *)v17 + 216, (float32x4_t *)v17 + 45, (float32x4_t *)&buf);
        *(_QWORD *)&v50 = v46;
        DWORD2(v50) = (_DWORD)v47;
      }
      else
      {
        v50 = *(_OWORD *)&buf.value;
      }
      HIDWORD(v50) = 1.0;
    }
    *((_OWORD *)v17 + 40) = v50;
LABEL_73:
    v55 = v158;
    if (v158)
    {
      v26 = 0;
      a6 = (id *)v160;
      a5 = (unint64_t)v189;
      v56 = (__int16 *)&v195;
      a2 = (char **)a7;
      while (1)
      {
        if (*a6 || a6[1] || a6[2])
        {
          if (v26 >= 2)
          {
            re::internal::assertLog((re::internal *)6, (uint64_t)v47, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < N", "operator[]", 234, v26, 2);
            _os_crash();
            __break(1u);
LABEL_153:
            re::internal::assertLog((re::internal *)6, (uint64_t)v47, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < m_size", "operator[]", 381, v26, v55);
            _os_crash();
            __break(1u);
LABEL_154:
            re::internal::assertLog((re::internal *)6, (uint64_t)v47, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < m_size", "operator[]", 381, v26, v57);
            _os_crash();
            __break(1u);
LABEL_155:
            re::internal::assertLog((re::internal *)6, (uint64_t)v47, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < m_size", "operator[]", 381, v26, v58);
            _os_crash();
            __break(1u);
LABEL_156:
            re::internal::assertLog((re::internal *)6, v64, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < N", "operator[]", 234, a7, 2);
            _os_crash();
            __break(1u);
LABEL_157:
            re::internal::assertLog((re::internal *)6, v64, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < m_size", "operator[]", 381, a7, v67);
            _os_crash();
            __break(1u);
LABEL_158:
            re::internal::assertLog((re::internal *)6, v64, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < m_size", "operator[]", 381, a7, v68);
            _os_crash();
            __break(1u);
LABEL_159:
            re::internal::assertLog((re::internal *)6, v64, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < m_size", "operator[]", 381, a7, v69);
            _os_crash();
            __break(1u);
LABEL_160:
            re::internal::assertLog((re::internal *)6, v64, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < N", "operator[]", 234, v56, 2);
            _os_crash();
            __break(1u);
LABEL_161:
            re::internal::assertLog((re::internal *)6, v64, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < m_size", "operator[]", 381, v56, v65);
            _os_crash();
            __break(1u);
LABEL_162:
            re::internal::assertLog((re::internal *)6, v64, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < N", "operator[]", 234, v56, 2);
            _os_crash();
            __break(1u);
LABEL_163:
            re::internal::assertLog((re::internal *)6, v64, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < m_size", "operator[]", 381, v56, v66);
            _os_crash();
            __break(1u);
LABEL_164:
            re::internal::assertLog((re::internal *)6, (uint64_t)v47, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < N", "operator[]", 234, v26, 2);
            _os_crash();
            __break(1u);
            goto LABEL_165;
          }
          if (v55 <= v26)
            goto LABEL_153;
          v57 = *((_QWORD *)&v187 + 1);
          if (*((_QWORD *)&v187 + 1) <= v26)
            goto LABEL_154;
          v58 = v193;
          if (v193 <= v26)
            goto LABEL_155;
          re::VideoChannelTextureHandles::setTextures((uint64_t)a2, *((_QWORD *)a3 + 8), a6, v184 != 0, v178, HIBYTE(v184) != 0, (CFTypeRef *)a5, v56, v185);
          v55 = v158;
        }
        ++v26;
        a5 += 8;
        v56 = (__int16 *)((char *)v56 + 3);
        a2 += 15;
        a6 += 3;
        if (v26 >= v55)
          goto LABEL_96;
      }
    }
    v59 = v152;
    if (!v152)
    {
LABEL_96:
      v63 = (id)re::VideoDefaults::screenFallbackTextureEnabled(v46);
      if ((_DWORD)v63)
      {
        v83 = 0;
        v84 = 1;
        do
        {
          a5 = v84;
          re::VideoChannelTextureHandles::setScreenFallbackTextures((re::VideoChannelTextureHandles *)&a7[5 * v83], *((id **)a3 + 8));
          v84 = 0;
          v83 = 1;
        }
        while ((a5 & 1) != 0);
      }
      v65 = v166;
      a2 = &selRef_newBufferWithBytes_length_options_;
      if (v166)
      {
        v56 = 0;
        a7 = (CMTime *)v168;
        a6 = (id *)(v10 + 2000);
        do
        {
          v63 = (id)v168[(_QWORD)v56];
          if (v63)
          {
            if ((unint64_t)v56 >= 2)
              goto LABEL_160;
            if (v65 <= (unint64_t)v56)
              goto LABEL_161;
            a5 = *((_QWORD *)a3 + 8);
            v92 = v63;
            *((_DWORD *)a6 + 11) = objc_msgSend(v92, sel_pixelFormat);
            v63 = v92;
            if (v92)
            {

              v92 = 0;
            }
          }
          v56 = (__int16 *)((char *)v56 + 1);
          v65 = v166;
          a6 += 15;
        }
        while ((unint64_t)v56 < v166);
      }
      v66 = v169;
      if (v169)
      {
        v56 = 0;
        a7 = (CMTime *)v171;
        a6 = (id *)(v10 + 2016);
        do
        {
          v63 = (id)v171[(_QWORD)v56];
          if (v63)
          {
            if ((unint64_t)v56 >= 2)
              goto LABEL_162;
            if (v66 <= (unint64_t)v56)
              goto LABEL_163;
            a5 = *((_QWORD *)a3 + 8);
            v91 = v63;
            *((_DWORD *)a6 + 8) = objc_msgSend(v91, sel_pixelFormat);
            v63 = v91;
            if (v91)
            {

              v91 = 0;
            }
          }
          v56 = (__int16 *)((char *)v56 + 1);
          v66 = v169;
          a6 += 15;
        }
        while ((unint64_t)v56 < v169);
      }
      *(_DWORD *)(v10 + 2192) = v186;
      v67 = v155;
      if (v155)
      {
        a7 = 0;
        a6 = (id *)&v157;
        a5 = (unint64_t)v189;
        v56 = (__int16 *)v192;
        do
        {
          if (*a6 || a6[1] || a6[2])
          {
            if ((unint64_t)a7 >= 2)
              goto LABEL_156;
            if (v67 <= (unint64_t)a7)
              goto LABEL_157;
            v68 = *((_QWORD *)&v187 + 1);
            if (*((_QWORD *)&v187 + 1) <= (unint64_t)a7)
              goto LABEL_158;
            v69 = v190;
            if (v190 <= (unint64_t)a7)
              goto LABEL_159;
            re::VideoChannelTextureHandles::setTextures((uint64_t)a4, *((_QWORD *)a3 + 8), (CVPixelBufferRef *)a6, v184 != 0, v178, HIBYTE(v184) != 0, (CFTypeRef *)a5, v56, v185);
            v67 = v155;
          }
          a7 = (CMTime *)((char *)a7 + 1);
          a5 += 8;
          v56 = (__int16 *)((char *)v56 + 3);
          a4 = (re::ColorManager *)((char *)a4 + 120);
          a6 += 3;
        }
        while ((unint64_t)a7 < v67);
        v70 = v166;
        if (v166)
        {
          a5 = 0;
          a4 = (re::ColorManager *)(v10 + 2248);
          do
          {
            v63 = (id)v168[a5];
            if (v63)
            {
              if (a5 >= 2)
                goto LABEL_167;
              if (v70 <= a5)
                goto LABEL_169;
              a6 = (id *)*((_QWORD *)a3 + 8);
              v90 = v63;
              *((_DWORD *)a4 + 11) = objc_msgSend(v90, sel_pixelFormat);
              v63 = v90;
              if (v90)
              {

                v90 = 0;
              }
            }
            ++a5;
            v70 = v166;
            a4 = (re::ColorManager *)((char *)a4 + 120);
          }
          while (a5 < v166);
        }
        v71 = v169;
        if (v169)
        {
          a5 = 0;
          a4 = (re::ColorManager *)(v10 + 2264);
          do
          {
            v63 = (id)v171[a5];
            if (v63)
            {
              if (a5 >= 2)
                goto LABEL_170;
              if (v71 <= a5)
                goto LABEL_171;
              a6 = (id *)*((_QWORD *)a3 + 8);
              v89 = v63;
              *((_DWORD *)a4 + 8) = objc_msgSend(v89, sel_pixelFormat);
              v63 = v89;
              if (v89)
              {

                v89 = 0;
              }
            }
            ++a5;
            v71 = v169;
            a4 = (re::ColorManager *)((char *)a4 + 120);
          }
          while (a5 < v169);
        }
        *(_DWORD *)(v10 + 2440) = v186;
      }
      v72 = *(double *)&v181;
      v73 = *((double *)&v181 + 1);
      *(_QWORD *)(v10 + 2464) = *(_QWORD *)&vmla_n_f32(vmul_n_f32(*(float32x2_t *)((char *)v17 + 600), v72), *(float32x2_t *)((char *)v17 + 608), v73) & 0x7FFFFFFF7FFFFFFFLL;
      *(_QWORD *)(v10 + 2448) = v187;
      v74 = vcvtq_f64_u64(v179);
      v75 = v183;
      *(float32x2_t *)(v10 + 2488) = vcvt_f32_f64(vdivq_f64(v182, v74));
      *(float32x2_t *)(v10 + 2480) = vcvt_f32_f64(vdivq_f64(v75, v74));
      v76 = (re::VideoDefaults *)re::VideoDefaults::horizontalDisparityEnabled((re::VideoDefaults *)v63);
      v77 = 0.0;
      if ((_DWORD)v76 && v201)
        v77 = re::VideoDefaults::overrideHorizontalDispartiy(v76, v203);
      *(float *)(v10 + 2496) = v77;
      v78 = *(_QWORD *)(v10 + 1944);
      if (v78 - *(_QWORD *)(v10 + 1936) == 2)
        *(_QWORD *)(v10 + 1936) = v78 - 1;
      *(_QWORD *)(v10 + 1944) = v78 + 1;
      v79 = (re::VideoDefaults *)re::VideoPresentationGroup::operator=(v86 + 880 * (v78 & 1), (__int128 *)&v145.value);
      v80 = (re *)re::VideoDefaults::logEnabled(v79);
      if ((_DWORD)v80)
      {
        v54 = *re::videoLogObjects(v80);
        if (os_log_type_enabled(v54, OS_LOG_TYPE_DEFAULT))
        {
          LOWORD(buf.value) = 0;
          goto LABEL_179;
        }
      }
      goto LABEL_147;
    }
    v26 = 0;
    a6 = (id *)&v154;
    a5 = (unint64_t)v189;
    v60 = (__int16 *)v192;
    a2 = (char **)a7;
    while (1)
    {
      if (!*a6 && !a6[1] && !a6[2])
        goto LABEL_95;
      if (v26 >= 2)
        goto LABEL_164;
      if (v59 <= v26)
        break;
      v61 = *((_QWORD *)&v187 + 1);
      if (*((_QWORD *)&v187 + 1) <= v26)
        goto LABEL_166;
      v62 = v190;
      if (v190 <= v26)
        goto LABEL_168;
      re::VideoChannelTextureHandles::setTextures((uint64_t)a2, *((_QWORD *)a3 + 8), (CVPixelBufferRef *)a6, v184 != 0, v178, HIBYTE(v184) != 0, (CFTypeRef *)a5, v60, v185);
      v59 = v152;
LABEL_95:
      ++v26;
      a5 += 8;
      v60 = (__int16 *)((char *)v60 + 3);
      a2 += 15;
      a6 += 3;
      if (v26 >= v59)
        goto LABEL_96;
    }
LABEL_165:
    re::internal::assertLog((re::internal *)6, (uint64_t)v47, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < m_size", "operator[]", 381, v26, v59);
    _os_crash();
    __break(1u);
LABEL_166:
    re::internal::assertLog((re::internal *)6, (uint64_t)v47, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < m_size", "operator[]", 381, v26, v61);
    _os_crash();
    __break(1u);
LABEL_167:
    re::internal::assertLog((re::internal *)6, v64, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < N", "operator[]", 234, a5, 2);
    _os_crash();
    __break(1u);
LABEL_168:
    re::internal::assertLog((re::internal *)6, (uint64_t)v47, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < m_size", "operator[]", 381, v26, v62);
    _os_crash();
    __break(1u);
LABEL_169:
    re::internal::assertLog((re::internal *)6, v64, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < m_size", "operator[]", 381, a5, v70);
    _os_crash();
    __break(1u);
LABEL_170:
    re::internal::assertLog((re::internal *)6, v64, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < N", "operator[]", 234, a5, 2);
    _os_crash();
    __break(1u);
LABEL_171:
    re::internal::assertLog((re::internal *)6, v64, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < m_size", "operator[]", 381, a5, v71);
    v21 = (re *)_os_crash();
    __break(1u);
LABEL_172:
    v82 = *re::videoLogObjects(v21);
    if (os_log_type_enabled(v82, OS_LOG_TYPE_DEFAULT))
    {
      LOWORD(buf.value) = 0;
      _os_log_impl(&dword_224FE9000, v82, OS_LOG_TYPE_DEFAULT, "==========================================", (uint8_t *)&buf, 2u);
    }
  }
  if (v23 == 5 || v23 == 3)
  {
    v51 = v186;
    *(_DWORD *)(v10 + 2192) = v186;
    if (v155)
      *(_DWORD *)(v10 + 2440) = v51;
  }
  else
  {
    if (*((_DWORD *)v17 + 30) != v23)
    {
      v52 = *re::videoLogObjects(v31);
      v31 = (re *)os_log_type_enabled(v52, OS_LOG_TYPE_ERROR);
      if ((_DWORD)v31)
      {
        LODWORD(buf.value) = 67109120;
        HIDWORD(buf.value) = v23;
        _os_log_error_impl(&dword_224FE9000, v52, OS_LOG_TYPE_ERROR, "Unable to get presentation group (error: %d)", (uint8_t *)&buf, 8u);
      }
      *((_DWORD *)v17 + 30) = v23;
    }
    *(_DWORD *)(v10 + 2192) = -1;
    *(_DWORD *)(v10 + 2440) = -1;
    *(_QWORD *)(v10 + 2464) = 0;
    *(_QWORD *)(v10 + 2448) = 0;
    *((_OWORD *)v17 + 40) = re::kVideoMajorColorDefault;
    v53 = (re *)re::VideoDefaults::logEnabled(v31);
    if ((_DWORD)v53)
    {
      v54 = *re::videoLogObjects(v53);
      if (os_log_type_enabled(v54, OS_LOG_TYPE_DEFAULT))
      {
        LOWORD(buf.value) = 0;
LABEL_179:
        _os_log_impl(&dword_224FE9000, v54, OS_LOG_TYPE_DEFAULT, "==========================================", (uint8_t *)&buf, 2u);
      }
    }
  }
LABEL_147:
  re::VideoPresentationGroup::~VideoPresentationGroup((re::VideoPresentationGroup *)&v95);
  re::VideoPresentationGroup::~VideoPresentationGroup((re::VideoPresentationGroup *)&v145);
}

void sub_225358B3C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, id a19, id a20,id a21,id a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,char a31)
{
  re::VideoPresentationGroup::~VideoPresentationGroup((re::VideoPresentationGroup *)&a31);
  re::VideoPresentationGroup::~VideoPresentationGroup((re::VideoPresentationGroup *)&STACK[0x420]);
  _Unwind_Resume(a1);
}

uint64_t re::VideoHistogram::data(re::VideoHistogram *this)
{
  unsigned __int8 *v2;
  unsigned __int8 v3;
  unsigned __int8 v4;

  v2 = (unsigned __int8 *)this + 44;
  v3 = atomic_load((unsigned __int8 *)this + 44);
  if ((v3 & 1) != 0)
  {
    os_unfair_lock_lock((os_unfair_lock_t)this + 10);
    v4 = atomic_load(v2);
    if ((v4 & 1) != 0)
    {
      *((_QWORD *)this + 6) = *((_QWORD *)this + 205);
      re::DynamicInlineArray<unsigned int,2ul>::operator=((unint64_t *)this + 7, (unint64_t *)this + 206);
      re::DynamicInlineArray<unsigned int,2ul>::operator=((unint64_t *)this + 73, (unint64_t *)this + 272);
      re::DynamicInlineArray<unsigned int,2ul>::operator=((unint64_t *)this + 139, (unint64_t *)this + 338);
      atomic_store(0, (unsigned __int8 *)this + 44);
    }
    os_unfair_lock_unlock((os_unfair_lock_t)this + 10);
  }
  return (uint64_t)this + 48;
}

uint64_t re::VideoAsset::init(uint64_t **this)
{
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v10;
  NSObject *v11;
  dispatch_queue_t v12;
  uint64_t *v13;
  uint64_t *v14;
  uint64_t v15;
  re *VTable;
  uint64_t (*v17)(uint64_t, void **);
  int v18;
  uint64_t v19;
  NSObject *v20;
  void *v22;
  uint8_t buf[4];
  int v24;
  uint64_t v25;

  v25 = *MEMORY[0x24BDAC8D0];
  if (!this[21])
  {
    v2 = re::globalAllocators((re *)this);
    v3 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v2[2] + 32))(v2[2], 7024, 16);
    bzero((void *)v3, 0x1B70uLL);
    *(_DWORD *)(v3 + 36) = 0x7FFFFFFF;
    *(_QWORD *)(v3 + 48) = 0;
    *(_QWORD *)(v3 + 80) = 0;
    *(_QWORD *)(v3 + 136) = 0;
    *(_QWORD *)(v3 + 144) = 0;
    *(_QWORD *)(v3 + 128) = 0;
    *(_WORD *)(v3 + 152) = 514;
    *(_BYTE *)(v3 + 154) = 2;
    *(_OWORD *)(v3 + 160) = 0u;
    *(_OWORD *)(v3 + 176) = 0u;
    *(_QWORD *)(v3 + 192) = 0x7FFFFFFF00000000;
    *(_OWORD *)(v3 + 208) = 0u;
    *(_OWORD *)(v3 + 224) = 0u;
    *(_QWORD *)(v3 + 256) = 2;
    *(_QWORD *)(v3 + 240) = 0;
    re::FixedInlineArray<re::VideoPresentationGroup,2ul>::FixedInlineArray(v3 + 272);
    v4 = 0;
    *(_QWORD *)(v3 + 2132) = 0x7FFFFFFFLL;
    *(_QWORD *)(v3 + 2180) = 0x7FFFFFFFLL;
    *(_QWORD *)(v3 + 2228) = 0x7FFFFFFFLL;
    *(_QWORD *)(v3 + 2276) = 0x7FFFFFFFLL;
    *(_QWORD *)(v3 + 2596) = 0x7FFFFFFFLL;
    *(_OWORD *)(v3 + 2064) = 0u;
    *(_OWORD *)(v3 + 2048) = 0u;
    *(_OWORD *)(v3 + 2032) = 0u;
    *(_QWORD *)(v3 + 2080) = 0x7FFFFFFF00000000;
    *(_DWORD *)(v3 + 2088) = 0;
    *(_OWORD *)(v3 + 2096) = 0u;
    *(_OWORD *)(v3 + 2112) = 0u;
    *(_DWORD *)(v3 + 2128) = 0;
    *(_OWORD *)(v3 + 2144) = 0u;
    *(_OWORD *)(v3 + 2160) = 0u;
    *(_DWORD *)(v3 + 2176) = 0;
    *(_OWORD *)(v3 + 2192) = 0u;
    *(_OWORD *)(v3 + 2208) = 0u;
    *(_DWORD *)(v3 + 2224) = 0;
    *(_DWORD *)(v3 + 2272) = 0;
    *(_OWORD *)(v3 + 2256) = 0u;
    *(_OWORD *)(v3 + 2240) = 0u;
    *(_OWORD *)(v3 + 2544) = 0u;
    *(_OWORD *)(v3 + 2560) = 0u;
    *(_OWORD *)(v3 + 2576) = 0u;
    __asm { FMOV            V0.2S, #1.0 }
    *(_DWORD *)(v3 + 2592) = 0;
    do
    {
      *(_QWORD *)(v3 + v4 + 2612) = _D0;
      *(_DWORD *)(v3 + v4 + 2636) = 0;
      *(_OWORD *)(v3 + v4 + 2620) = 0uLL;
      v4 += 32;
    }
    while (v4 != 2048);
    *(_OWORD *)(v3 + 4720) = 0u;
    *(_OWORD *)(v3 + 4704) = 0u;
    *(_OWORD *)(v3 + 4688) = 0u;
    *(_OWORD *)(v3 + 4672) = 0u;
    *(_OWORD *)(v3 + 4656) = 0u;
    *(_QWORD *)(v3 + 4736) = 0x7FFFFFFF00000000;
    *(_DWORD *)(v3 + 4744) = 0;
    *(_QWORD *)(v3 + 4752) = 0;
    *(_DWORD *)(v3 + 4760) = -1;
    *(_OWORD *)(v3 + 4768) = 0u;
    *(_DWORD *)(v3 + 4784) = -1;
    *(_QWORD *)(v3 + 4792) = 0;
    *(_WORD *)(v3 + 4864) = 514;
    *(_BYTE *)(v3 + 4866) = 2;
    *(_QWORD *)(v3 + 4840) = 0;
    *(_OWORD *)(v3 + 4848) = 0u;
    bzero((void *)(v3 + 4872), 0x820uLL);
    v10 = MEMORY[0x24BDC0D40];
    *(_OWORD *)(v3 + 6952) = *MEMORY[0x24BDC0D40];
    *(_QWORD *)(v3 + 6968) = *(_QWORD *)(v10 + 16);
    *(_QWORD *)(v3 + 6976) = 0;
    *(_DWORD *)(v3 + 6984) = 0;
    *(_OWORD *)(v3 + 7000) = 0u;
    *(_BYTE *)(v3 + 7016) = 0;
    this[21] = (uint64_t *)v3;
    re::VideoTextureCache::init((CVMetalTextureCacheRef *)(v3 + 216));
  }
  dispatch_queue_attr_make_with_qos_class(MEMORY[0x24BDAC9C0], QOS_CLASS_USER_INITIATED, 0);
  v11 = objc_claimAutoreleasedReturnValue();
  v12 = dispatch_queue_create("VideoAsset.backgroundWorkQueue", v11);
  v13 = this[13];
  this[13] = (uint64_t *)v12;

  if (!this[23])
    goto LABEL_10;
  v14 = this[24];
  if (!v14)
    goto LABEL_10;
  v22 = 0;
  v15 = *v14;
  VTable = (re *)CMBaseObjectGetVTable();
  v17 = *(uint64_t (**)(uint64_t, void **))(*((_QWORD *)VTable + 2) + 8);
  if (v17)
  {
    VTable = (re *)v17(v15, &v22);
    v18 = (int)VTable;
    if (!(_DWORD)VTable)
    {
      re::VideoAsset::setReceiverEndpoint((re::VideoAsset *)this, v22);

LABEL_10:
      v19 = 1;
      goto LABEL_15;
    }
  }
  else
  {
    v18 = -12782;
  }
  v20 = *re::assetTypesLogObjects(VTable);
  if (os_log_type_enabled(v20, OS_LOG_TYPE_FAULT))
  {
    *(_DWORD *)buf = 67109120;
    v24 = v18;
    _os_log_fault_impl(&dword_224FE9000, v20, OS_LOG_TYPE_FAULT, "Failed to create video target with in-process video receiver (error: %d)", buf, 8u);
  }

  v19 = 0;
LABEL_15:

  return v19;
}

void sub_225358F98(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

uint64_t re::AssetHandle::asset<re::VideoFileAsset>(re::VideoFileAsset *a1)
{
  uint64_t *v2;
  uint64_t v3;
  NSObject *v4;
  _QWORD *v6;
  char *v7;
  int v8;
  char *v9;
  uint64_t v10;

  v10 = *MEMORY[0x24BDAC8D0];
  v2 = re::VideoFileAsset::assetType(a1);
  v3 = re::AssetHandle::assetWithType(a1, (const re::AssetType *)v2, 0);
  if (!v3)
  {
    v4 = (id)*re::assetsLogObjects(0);
    if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
    {
      v6 = re::AssetHandle::assetInfo(a1);
      if ((v6[17] & 1) != 0)
        v7 = (char *)v6[18];
      else
        v7 = (char *)v6 + 137;
      v8 = 136315138;
      v9 = v7;
      _os_log_error_impl(&dword_224FE9000, v4, OS_LOG_TYPE_ERROR, "Invalid asset: '%s'", (uint8_t *)&v8, 0xCu);
    }

  }
  return v3;
}

void re::VideoAsset::setDiffuseSpillMapBlurSigma(re::VideoAsset *this, int a2)
{
  int v3;
  NSObject *v5;
  _DWORD v6[2];
  __int16 v7;
  int v8;
  uint64_t v9;

  v9 = *MEMORY[0x24BDAC8D0];
  v3 = a2 & ~(a2 >> 31);
  if (a2 < 0)
  {
    v5 = *re::assetsLogObjects(this);
    if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR))
    {
      v6[0] = 67109376;
      v6[1] = a2;
      v7 = 1024;
      v8 = v3;
      _os_log_error_impl(&dword_224FE9000, v5, OS_LOG_TYPE_ERROR, "Invalid diffuse spill map blur sigma: %d, diffuse spill map blur sigma clamped to %d", (uint8_t *)v6, 0xEu);
    }
  }
  *((_DWORD *)this + 56) = v3;
}

void re::VideoAsset::setSpecularSpillMapBlurSigma(re::VideoAsset *this, int a2)
{
  int v3;
  NSObject *v5;
  _DWORD v6[2];
  __int16 v7;
  int v8;
  uint64_t v9;

  v9 = *MEMORY[0x24BDAC8D0];
  v3 = a2 & ~(a2 >> 31);
  if (a2 < 0)
  {
    v5 = *re::assetsLogObjects(this);
    if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR))
    {
      v6[0] = 67109376;
      v6[1] = a2;
      v7 = 1024;
      v8 = v3;
      _os_log_error_impl(&dword_224FE9000, v5, OS_LOG_TYPE_ERROR, "Invalid specular spill map blur sigma: %d, specular spill map blur sigma clamped to %d", (uint8_t *)v6, 0xEu);
    }
  }
  *((_DWORD *)this + 60) = v3;
}

uint64_t re::VideoAssetLoader::introspectionType(re::VideoAssetLoader *this)
{
  unsigned __int8 v1;

  v1 = atomic_load((unsigned __int8 *)&qword_254100858);
  if ((v1 & 1) == 0 && __cxa_guard_acquire(&qword_254100858))
  {
    qword_254100850 = re::internal::getOrCreateInfo((re::internal *)"VideoAsset", (uint64_t (*)(re::internal *))re::allocInfo_VideoAsset, (re::IntrospectionBase *(*)(void))re::initInfo_VideoAsset, (void (*)(re::IntrospectionBase *))&unk_254100848, 0);
    __cxa_guard_release(&qword_254100858);
  }
  return qword_254100850;
}

uint64_t re::VideoAssetLoader::createRuntimeData(re *a1, re::VideoAsset *this)
{
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  __int128 *v6;
  uint64_t v7;
  __int128 v8;
  uint64_t v9;
  uint64_t v10;

  v3 = *((_QWORD *)this + 24);
  if (*((_DWORD *)a1 + 2))
  {
    if (!v3)
      goto LABEL_9;
  }
  else if (!v3)
  {
    v4 = re::globalAllocators(a1);
    v3 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v4[2] + 32))(v4[2], 2512, 16);
    bzero((void *)(v3 + 16), 0x9C0uLL);
    v5 = 0;
    *(_QWORD *)(v3 + 8) = 0xFFFFFFFFLL;
    *(_QWORD *)v3 = 0;
    v6 = (__int128 *)MEMORY[0x24BDC0D40];
    do
    {
      v7 = v3 + v5;
      *(_QWORD *)(v7 + 24) = 0;
      *(_DWORD *)(v7 + 32) = 0;
      *(_QWORD *)(v7 + 56) = 0;
      *(_DWORD *)(v7 + 64) = -1;
      v8 = *v6;
      *(_QWORD *)(v7 + 84) = *((_QWORD *)v6 + 2);
      *(_OWORD *)(v7 + 68) = v8;
      v5 += 72;
    }
    while (v5 != 144);
    re::FixedInlineArray<re::VideoPresentationGroup,2ul>::FixedInlineArray(v3 + 176);
    *(_DWORD *)(v3 + 2060) = 0;
    *(_QWORD *)(v3 + 2052) = 0;
    *(_QWORD *)(v3 + 2172) = 0;
    *(_DWORD *)(v3 + 2180) = 0;
    *(_OWORD *)(v3 + 2072) = 0u;
    *(_OWORD *)(v3 + 2088) = 0u;
    *(_OWORD *)(v3 + 2104) = 0u;
    *(_OWORD *)(v3 + 2120) = 0u;
    *(_OWORD *)(v3 + 2136) = 0u;
    *(_OWORD *)(v3 + 2148) = 0u;
    *(_OWORD *)(v3 + 1936) = 0u;
    *(_OWORD *)(v3 + 1952) = 0u;
    *(_OWORD *)(v3 + 1968) = 0u;
    *(_OWORD *)(v3 + 1984) = 0u;
    *(_OWORD *)(v3 + 2000) = 0u;
    *(_OWORD *)(v3 + 2016) = 0u;
    *(_OWORD *)(v3 + 2028) = 0u;
    *(_DWORD *)(v3 + 2192) = -1;
    *(_DWORD *)(v3 + 2308) = 0;
    *(_QWORD *)(v3 + 2300) = 0;
    *(_OWORD *)(v3 + 2200) = 0u;
    *(_OWORD *)(v3 + 2216) = 0u;
    *(_OWORD *)(v3 + 2232) = 0u;
    *(_OWORD *)(v3 + 2248) = 0u;
    *(_OWORD *)(v3 + 2264) = 0u;
    *(_OWORD *)(v3 + 2276) = 0u;
    *(_QWORD *)(v3 + 2420) = 0;
    *(_DWORD *)(v3 + 2428) = 0;
    *(_OWORD *)(v3 + 2320) = 0u;
    *(_OWORD *)(v3 + 2336) = 0u;
    *(_OWORD *)(v3 + 2352) = 0u;
    *(_OWORD *)(v3 + 2368) = 0u;
    *(_OWORD *)(v3 + 2384) = 0u;
    *(_OWORD *)(v3 + 2396) = 0u;
    *(_DWORD *)(v3 + 2440) = -1;
    *(_BYTE *)(v3 + 2472) = 0;
    *(_OWORD *)(v3 + 2448) = 0u;
    *(_QWORD *)(v3 + 2464) = 0;
    *(_OWORD *)(v3 + 2480) = xmmword_2260FD430;
    *(_DWORD *)(v3 + 2496) = 0;
    *((_QWORD *)this + 24) = v3;
  }
LABEL_9:
  v9 = re::VideoAsset::init((uint64_t **)this);
  v10 = *((_QWORD *)this + 21);
  if (v10)
  {
    re::VideoLightSpillGenerator::setupSession((re::VideoLightSpillGenerator *)(v10 + 4752), *((_QWORD *)this + 27), HIDWORD(*((_QWORD *)this + 27)), *((_DWORD *)this + 56));
    re::VideoLightSpillGenerator::setupSession((re::VideoLightSpillGenerator *)(*((_QWORD *)this + 21) + 4776), *((_QWORD *)this + 29), HIDWORD(*((_QWORD *)this + 29)), *((_DWORD *)this + 60));
  }
  return v9;
}

void `anonymous namespace'::onPrepareDataChannels(int a1, const __CFArray *a2, int a3, re *this, const __CFDictionary *a5, const __CFArray *a6, uint64_t a7)
{
  CFIndex Count;
  unint64_t v12;
  unint64_t v13;
  uint64_t (*v14)(void);
  _QWORD *v15;
  uint64_t (*v16)(void);
  const void *ValueAtIndex;
  BOOL v18;
  CFIndex v19;
  char v20;
  CFIndex v21;
  const void **v22;
  uint64_t (*v23)(void);
  _QWORD *v24;
  const void *v25;
  re *VTable;
  uint64_t (*v27)(const void *, CFTypeRef *);
  int v28;
  re *v29;
  NSObject *v30;
  re *v31;
  NSObject *v32;
  const void *v33;
  CFTypeRef v34;
  re *v35;
  NSObject *v36;
  const char *v37;
  char v38;
  re *v39;
  NSObject *v40;
  NSObject *v41;
  CFNumberRef v42;
  const __CFDictionary *Value;
  const __CFArray *v44;
  const __CFArray *v45;
  uint64_t v46;
  char v47;
  int v48;
  uint64_t v49;
  uint64_t v50;
  const __CFNumber *v51;
  int v52;
  int v53;
  int v54;
  os_unfair_lock_s *lock;
  CFTypeRef v56;
  CFTypeRef cf;
  char v58;
  uint64_t valuePtr;
  int v60;
  _BYTE buf[20];
  uint64_t v62;

  v62 = *MEMORY[0x24BDAC8D0];
  re::logVideoInfo(this, a2);
  if (!a7 || !*(_QWORD *)(a7 + 192))
    return;
  lock = (os_unfair_lock_s *)(a7 + 248);
  if (this)
  {
    if (a5)
    {
      Count = CFArrayGetCount(this);
      if (Count)
      {
        v12 = Count;
        v13 = 0;
        v14 = MEMORY[0x24BDC0A18];
        v15 = (_QWORD *)MEMORY[0x24BDC12A0];
        v16 = MEMORY[0x24BDC0A28];
        do
        {
          ValueAtIndex = CFArrayGetValueAtIndex(this, v13);
          if (v14)
            v18 = ValueAtIndex == 0;
          else
            v18 = 1;
          if (!v18 && MEMORY[0x227691AA4](ValueAtIndex, *v15, v15[1]))
          {
            *(_OWORD *)buf = *MEMORY[0x24BDC1288];
            if (v16)
              FigTagCollectionGetTagsWithCategory();
            if (*(_DWORD *)&buf[4] && MEMORY[0x24BDC0A38])
            {
              valuePtr = FigTagGetSInt64Value();
              v42 = CFNumberCreate((CFAllocatorRef)*MEMORY[0x24BDBD240], kCFNumberSInt64Type, &valuePtr);
              if (v42)
              {
                Value = (const __CFDictionary *)CFDictionaryGetValue(a5, v42);
                if (Value)
                {
                  v44 = (const __CFArray *)CFDictionaryGetValue(Value, (const void *)*MEMORY[0x24BDDD030]);
                  v45 = v44;
                  if (v44)
                  {
                    if (CFArrayGetCount(v44) == 9)
                    {
                      v54 = 0;
                      v46 = 0;
                      v47 = 1;
                      v48 = 1065353216;
                      while (1)
                      {
                        v49 = 0;
                        v50 = 0;
                        *(_QWORD *)buf = 0;
                        do
                        {
                          v51 = (const __CFNumber *)CFArrayGetValueAtIndex(v45, v46 + v49);
                          LODWORD(valuePtr) = 0;
                          CFNumberGetValue(v51, kCFNumberFloatType, &valuePtr);
                          *(_DWORD *)&buf[4 * v50] = valuePtr;
                          ++v49;
                          v50 = 1;
                        }
                        while ((_DWORD)v49 != 2);
                        v52 = *(_DWORD *)buf;
                        if ((v47 & 1) == 0)
                          break;
                        v47 = 0;
                        v48 = *(_DWORD *)buf;
                        v54 = *(_DWORD *)&buf[4];
                        v46 += v49 + 1;
                      }
                      v53 = *(_DWORD *)&buf[4];
                      os_unfair_lock_lock(lock);
                      *(_DWORD *)(a7 + 520) = v48;
                      *(_DWORD *)(a7 + 524) = v52;
                      *(_DWORD *)(a7 + 528) = v54;
                      *(_DWORD *)(a7 + 532) = v53;
                      atomic_store(1u, (unsigned __int8 *)(a7 + 512));
                      os_unfair_lock_unlock((os_unfair_lock_t)(a7 + 248));
                    }
                  }
                }
              }
              break;
            }
            if (*(_DWORD *)&buf[4])
              break;
          }
          ++v13;
        }
        while (v13 < v12);
      }
    }
  }
  if (!a6 || (v19 = CFArrayGetCount(a6), v19 < 1))
  {
    v20 = 0;
LABEL_44:
    v35 = (re *)CFArrayGetCount(this);
    v36 = (id)*re::assetTypesLogObjects(v35);
    if (os_log_type_enabled(v36, OS_LOG_TYPE_DEFAULT))
    {
      v37 = "Invalid";
      if (v35)
        v37 = "2D";
      *(_DWORD *)buf = 136446210;
      *(_QWORD *)&buf[4] = v37;
      _os_log_impl(&dword_224FE9000, v36, OS_LOG_TYPE_DEFAULT, "Content type detected is %{public}s", buf, 0xCu);
    }

    v38 = v20 & 1;
    v40 = *re::assetTypesLogObjects(v39);
    if (os_log_type_enabled(v40, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 67240192;
      *(_DWORD *)&buf[4] = 0;
      _os_log_impl(&dword_224FE9000, v40, OS_LOG_TYPE_DEFAULT, "Stereo type detected is %{public}d", buf, 8u);
    }
    LOWORD(valuePtr) = v35 != 0;
    BYTE2(valuePtr) = v38;
    v60 = 1;
    re::VideoAssetResourceData::create((uint64_t)buf, (uint64_t)&valuePtr, 3, 7);
    if (v60 != -1)
      ((void (*)(CFTypeRef *, uint64_t *))off_24ED38388[v60])(&cf, &valuePtr);
    re::VideoAssetResourceContext::pushResourceData((uint64_t)lock, (uint64_t *)buf);
    if (*(_DWORD *)&buf[16] != -1)
      ((void (*)(uint64_t *, _BYTE *))off_24ED38388[*(unsigned int *)&buf[16]])(&valuePtr, &buf[8]);
    return;
  }
  v20 = 0;
  v21 = 0;
  v22 = (const void **)(a7 + 32);
  v23 = MEMORY[0x24BDC0A18];
  v24 = (_QWORD *)MEMORY[0x24BDC12D0];
  while (1)
  {
    v25 = CFArrayGetValueAtIndex(a6, v21);
    CFRetain(v25);
    if (!v25)
      goto LABEL_41;
    cf = 0;
    VTable = (re *)CMBaseObjectGetVTable();
    v27 = *(uint64_t (**)(const void *, CFTypeRef *))(*((_QWORD *)VTable + 2) + 24);
    if (!v27)
      break;
    VTable = (re *)v27(v25, &cf);
    v28 = (int)VTable;
    if ((_DWORD)VTable)
      goto LABEL_55;
    if (v23)
    {
      v29 = (re *)MEMORY[0x227691AA4](cf, *v24, v24[1]);
      if ((_DWORD)v29)
      {
        v30 = *re::assetTypesLogObjects(v29);
        if (os_log_type_enabled(v30, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)buf = 134217984;
          *(_QWORD *)&buf[4] = v25;
          _os_log_impl(&dword_224FE9000, v30, OS_LOG_TYPE_DEFAULT, "Received onPrepareDataChannels with resource(%p)", buf, 0xCu);
        }
        if (*v22 != v25)
        {
          re::VideoObject<re::VideoFigDataChannelResourceBase>::setRef(v22, v25);
          v32 = *re::assetTypesLogObjects(v31);
          if (os_log_type_enabled(v32, OS_LOG_TYPE_DEFAULT))
          {
            v33 = *v22;
            *(_DWORD *)buf = 134217984;
            *(_QWORD *)&buf[4] = v33;
            _os_log_impl(&dword_224FE9000, v32, OS_LOG_TYPE_DEFAULT, "Current player item fig resource(%p) is set", buf, 0xCu);
          }
          v56 = 0;
          re::VideoObject<re::VideoFigDataChannelResourceBase>::setRef(&v56, v25);
          valuePtr = 0;
          v34 = v56;
          re::VideoObject<re::VideoFigDataChannelResourceBase>::setRef((const void **)&valuePtr, v56);
          v60 = 0;
          re::VideoAssetResourceData::create((uint64_t)buf, (uint64_t)&valuePtr, 1, 6);
          if (v60 != -1)
            ((void (*)(char *, uint64_t *))off_24ED38388[v60])(&v58, &valuePtr);
          re::VideoAssetResourceContext::pushResourceData((uint64_t)lock, (uint64_t *)buf);
          if (*(_DWORD *)&buf[16] != -1)
            ((void (*)(uint64_t *, _BYTE *))off_24ED38388[*(unsigned int *)&buf[16]])(&valuePtr, &buf[8]);
          if (v34)
            re::VideoObjectBase<re::VideoFigDataChannelResourceBase,OpaqueFigDataChannelResource *>::release(v34);
          v20 = 1;
        }
      }
    }
    if (cf)
      CFRelease(cf);
    re::VideoObjectBase<re::VideoFigDataChannelResourceBase,OpaqueFigDataChannelResource *>::release(v25);
LABEL_41:
    if (v19 == ++v21)
      goto LABEL_44;
  }
  v28 = -12782;
LABEL_55:
  v41 = *re::assetTypesLogObjects(VTable);
  if (os_log_type_enabled(v41, OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)buf = 134218240;
    *(_QWORD *)&buf[4] = v25;
    *(_WORD *)&buf[12] = 1024;
    *(_DWORD *)&buf[14] = v28;
    _os_log_error_impl(&dword_224FE9000, v41, OS_LOG_TYPE_ERROR, "Error occured while getting a description fig tags of a resource(%p) - %d", buf, 0x12u);
  }
  re::VideoObjectBase<re::VideoFigDataChannelResourceBase,OpaqueFigDataChannelResource *>::release(v25);
}

void sub_225359AD4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,int a21)
{
  const void *v21;
  const void *v22;

  if (a21 != -1)
    ((void (*)(char *, uint64_t))off_24ED38388[a21])(&a17, a10);
  if (v22)
    re::VideoObjectBase<re::VideoFigDataChannelResourceBase,OpaqueFigDataChannelResource *>::release(v22);
  re::VideoObjectBase<re::VideoFigDataChannelResourceBase,OpaqueFigDataChannelResource *>::release(v21);
  _Unwind_Resume(a1);
}

void `anonymous namespace'::resourceLifeCycleCallback(uint64_t a1, const void *a2, uint64_t a3, int a4)
{
  re *VTable;
  uint64_t (*v8)(const void *, CFTypeRef *);
  int v9;
  _BOOL4 v10;
  NSObject *v11;
  uint64_t v12;
  NSObject *v13;
  uint64_t (*v14)(const void *);
  re *v15;
  NSObject *v16;
  NSObject *v17;
  const void *v18;
  int v19;
  CFTypeRef cf;
  char v21;
  _BYTE v22[12];
  int v23;
  uint8_t buf[4];
  const void *v25;
  int v26;
  uint64_t v27;

  v27 = *MEMORY[0x24BDAC8D0];
  if (a3 && *(_QWORD *)(a3 + 192))
  {
    cf = 0;
    VTable = (re *)CMBaseObjectGetVTable();
    v8 = *(uint64_t (**)(const void *, CFTypeRef *))(*((_QWORD *)VTable + 2) + 24);
    if (v8)
    {
      VTable = (re *)v8(a2, &cf);
      v9 = (int)VTable;
      if (!(_DWORD)VTable)
      {
        if (MEMORY[0x24BDC0A18])
        {
          VTable = (re *)MEMORY[0x227691AA4](cf, *MEMORY[0x24BDC12D0], *(_QWORD *)(MEMORY[0x24BDC12D0] + 8));
          v10 = (_DWORD)VTable != 0;
        }
        else
        {
          v10 = 0;
        }
        v12 = a3 + 248;
        if (a4 == 1)
        {
          v17 = *re::assetTypesLogObjects(VTable);
          if (os_log_type_enabled(v17, OS_LOG_TYPE_DEFAULT))
          {
            *(_DWORD *)buf = 134217984;
            v25 = a2;
            _os_log_impl(&dword_224FE9000, v17, OS_LOG_TYPE_DEFAULT, "Received kFigVideoReceiverResourceLifeCycleEvent_Removed for resource(%p)", buf, 0xCu);
          }
          CMNotificationCenterGetDefaultLocalCenter();
          CMNotificationCenterRemoveListener();
          CFRetain(a2);
          *(_QWORD *)v22 = 0;
          re::VideoObject<re::VideoFigDataChannelResourceBase>::setRef((const void **)v22, a2);
          *(_DWORD *)&v22[8] = 0;
          re::VideoAssetResourceData::create((uint64_t)buf, (uint64_t)v22, v10, 2);
          if (*(_DWORD *)&v22[8] != -1)
            ((void (*)(const void **, _BYTE *))off_24ED38388[*(unsigned int *)&v22[8]])(&v18, v22);
          re::VideoAssetResourceContext::pushResourceData(a3 + 248, (uint64_t *)buf);
        }
        else
        {
          if (a4)
          {
LABEL_37:
            if (cf)
              CFRelease(cf);
            return;
          }
          v13 = *re::assetTypesLogObjects(VTable);
          if (os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT))
          {
            *(_DWORD *)buf = 134217984;
            v25 = a2;
            _os_log_impl(&dword_224FE9000, v13, OS_LOG_TYPE_DEFAULT, "Received kFigVideoReceiverResourceLifeCycleEvent_Added for resource(%p)", buf, 0xCu);
          }
          CFRetain(a2);
          *(_QWORD *)v22 = 0;
          re::VideoObject<re::VideoFigDataChannelResourceBase>::setRef((const void **)v22, a2);
          *(_DWORD *)&v22[8] = 0;
          re::VideoAssetResourceData::create((uint64_t)buf, (uint64_t)v22, v10, 1);
          if (*(_DWORD *)&v22[8] != -1)
            ((void (*)(const void **, _BYTE *))off_24ED38388[*(unsigned int *)&v22[8]])(&v18, v22);
          re::VideoAssetResourceContext::pushResourceData(a3 + 248, (uint64_t *)buf);
          CMNotificationCenterGetDefaultLocalCenter();
          CMNotificationCenterAddListener();
          v14 = *(uint64_t (**)(const void *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 8);
          if (v14)
          {
            v15 = (re *)v14(a2);
            if ((_DWORD)v15 == 1)
            {
              v16 = *re::assetTypesLogObjects(v15);
              if (os_log_type_enabled(v16, OS_LOG_TYPE_DEFAULT))
              {
                *(_DWORD *)v22 = 134217984;
                *(_QWORD *)&v22[4] = a2;
                _os_log_impl(&dword_224FE9000, v16, OS_LOG_TYPE_DEFAULT, "Looks like the newly added resource(%p) state is already kFigDataChannelResourceState_Ready", v22, 0xCu);
              }
              CFRetain(a2);
              v18 = 0;
              re::VideoObject<re::VideoFigDataChannelResourceBase>::setRef(&v18, a2);
              v19 = 0;
              re::VideoAssetResourceData::create((uint64_t)v22, (uint64_t)&v18, v10, 3);
              if (v19 != -1)
                ((void (*)(char *, const void **))off_24ED38388[v19])(&v21, &v18);
              re::VideoAssetResourceContext::pushResourceData(v12, (uint64_t *)v22);
              if (v23 != -1)
                ((void (*)(const void **, _BYTE *))off_24ED38388[v23])(&v18, &v22[8]);
              if (a2)
                re::VideoObjectBase<re::VideoFigDataChannelResourceBase,OpaqueFigDataChannelResource *>::release(a2);
            }
          }
        }
        if (v26 != -1)
          ((void (*)(_BYTE *, char *))off_24ED38388[v26])(v22, (char *)&v25 + 4);
        if (a2)
          re::VideoObjectBase<re::VideoFigDataChannelResourceBase,OpaqueFigDataChannelResource *>::release(a2);
        goto LABEL_37;
      }
    }
    else
    {
      v9 = -12782;
    }
    v11 = *re::assetTypesLogObjects(VTable);
    if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 67109120;
      LODWORD(v25) = v9;
      _os_log_error_impl(&dword_224FE9000, v11, OS_LOG_TYPE_ERROR, "Error occured while getting a description fig tags of a resource - %d", buf, 8u);
    }
  }
}

void sub_225359FDC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, int a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16, int a17, int a18, int a19, int a20,uint64_t a21,char a22,uint64_t a23,int a24)
{
  const void *v24;

  if (a20 != -1)
    ((void (*)(uint64_t *, int *))off_24ED38388[a20])(&a9, &a18);
  if (v24)
    re::VideoObjectBase<re::VideoFigDataChannelResourceBase,OpaqueFigDataChannelResource *>::release(v24);
  if (a24 != -1)
    ((void (*)(char *, uint64_t *))off_24ED38388[a24])(&a16, &a23);
  if (v24)
    re::VideoObjectBase<re::VideoFigDataChannelResourceBase,OpaqueFigDataChannelResource *>::release(v24);
  _Unwind_Resume(exception_object);
}

_QWORD *re::VideoAsset::cleanupVideoPlayerHelper(_QWORD *this)
{
  id **v1;
  _QWORD *v2;
  uint64_t v3;

  v1 = (id **)this[25];
  if (v1)
  {
    v2 = this;
    v3 = re::globalAllocators((re *)this)[2];
    re::ecs2::VideoPlayerComponentHelper::~VideoPlayerComponentHelper(v1);
    this = (_QWORD *)(*(uint64_t (**)(uint64_t, id **))(*(_QWORD *)v3 + 40))(v3, v1);
    v2[25] = 0;
  }
  return this;
}

uint64_t re::VideoAsset::containsFigDataChannelResource(uint64_t result, uint64_t a2, CFTypeRef *a3)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;

  v3 = result;
  v4 = *(_QWORD *)(a2 + 544);
  if (v4)
  {
    v7 = 0;
    v8 = a2 + 560;
    while (1)
    {
      v9 = *(_QWORD *)(a2 + 544);
      if (v9 <= v7)
        break;
      result = CFEqual(*(CFTypeRef *)(v8 + 8 * v7), *a3);
      if ((_DWORD)result)
      {
        *(_BYTE *)v3 = 1;
        *(_QWORD *)(v3 + 8) = v7;
        return result;
      }
      if (v4 == ++v7)
        goto LABEL_6;
    }
    re::internal::assertLog((re::internal *)6, a2, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < m_size", "operator[]", 381, v7, v9);
    result = _os_crash();
    __break(1u);
  }
  else
  {
LABEL_6:
    *(_BYTE *)v3 = 0;
  }
  return result;
}

BOOL re::VideoAssetResourceContext::getResourceDataAtIndex(uint64_t a1, unint64_t a2, _QWORD *a3)
{
  unint64_t v6;
  uint64_t v7;

  os_unfair_lock_lock((os_unfair_lock_t)a1);
  v6 = *(_QWORD *)(a1 + 8);
  if (v6 > a2)
  {
    v7 = a1 + 24 * a2;
    *a3 = *(_QWORD *)(v7 + 24);
    std::__variant_detail::__assignment<std::__variant_detail::__traits<re::VideoObject<re::VideoFigDataChannelResourceBase>,re::VideoAssetContentInfo>>::__generic_assign[abi:nn180100]<std::__variant_detail::__copy_assignment<std::__variant_detail::__traits<re::VideoObject<re::VideoFigDataChannelResourceBase>,re::VideoAssetContentInfo>,(std::__variant_detail::_Trait)1> const&>((uint64_t)(a3 + 1), v7 + 32);
  }
  os_unfair_lock_unlock((os_unfair_lock_t)a1);
  return v6 > a2;
}

void sub_22535A25C(_Unwind_Exception *a1)
{
  os_unfair_lock_s *v1;

  os_unfair_lock_unlock(v1);
  _Unwind_Resume(a1);
}

void re::VideoAsset::processResourceData(os_unfair_lock_s *this)
{
  os_unfair_lock_s *v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  CFTypeRef *v6;
  os_unfair_lock_s *v7;
  _BOOL8 ResourceDataAtIndex;
  NSObject *v9;
  _BOOL8 v10;
  NSObject *v11;
  uint8_t *v12;
  NSObject *v13;
  const char *v14;
  NSObject *v15;
  NSObject *v16;
  NSObject *v17;
  re::VideoDefaults **v18;
  NSObject *v19;
  CFTypeRef v20;
  uint64_t v21;
  unint64_t v22;
  CFTypeRef v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  re *v27;
  int v29;
  CFTypeRef v30;
  char v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  NSObject *v35;
  uint64_t v36;
  const void *v37;
  os_unfair_lock_s *v38;
  unint64_t v39;
  unint64_t v40;
  unint64_t v41;
  char *v42;
  char *v43;
  char *v44;
  uint64_t v45;
  int v46;
  CFTypeRef cf2;
  char v48;
  os_unfair_lock_s *v49;
  CFTypeRef *v50;
  unsigned __int8 *v51;
  uint64_t v52;
  CFTypeRef v53;
  int v54;
  uint8_t v55[8];
  CFTypeRef cf;
  __int16 v57;
  unint64_t v58;
  uint8_t buf[8];
  CFTypeRef v60;
  unsigned int v61;
  uint64_t v62;

  v62 = *MEMORY[0x24BDAC8D0];
  v2 = this + 62;
  os_unfair_lock_lock(this + 62);
  v3 = *(_QWORD *)&this[64]._os_unfair_lock_opaque;
  os_unfair_lock_unlock(v2);
  v52 = 0;
  v53 = 0;
  v54 = 0;
  if ((int)v3 < 1)
  {
    v46 = 0;
LABEL_92:
    ((void (*)(uint8_t *, CFTypeRef *))off_24ED38388[v46])(buf, &v53);
    return;
  }
  v4 = 0;
  v5 = v3;
  v6 = &v60;
  v51 = (unsigned __int8 *)&this[232];
  v49 = this + 140;
  v7 = this + 138;
  while (2)
  {
    ResourceDataAtIndex = re::VideoAssetResourceContext::getResourceDataAtIndex((uint64_t)v2, v4, &v52);
    if (!ResourceDataAtIndex)
      goto LABEL_78;
    v9 = *re::videoLogObjects((re *)ResourceDataAtIndex);
    v10 = os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT);
    if (v10)
    {
      *(_DWORD *)buf = 67109120;
      *(_DWORD *)&buf[4] = v52;
      _os_log_impl(&dword_224FE9000, v9, OS_LOG_TYPE_DEFAULT, "VideoAsset::processResourceData VideoAssetResourceCommand: %d", buf, 8u);
    }
    switch((int)v52)
    {
      case 1:
        if (HIDWORD(v52) != 1)
          goto LABEL_78;
        if (v54
          || (buf[0] = 1, v60 = 0, re::VideoObject<re::VideoFigDataChannelResourceBase>::setRef(v6, v53), !buf[0]))
        {
          v11 = *re::assetTypesLogObjects((re *)v10);
          if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR))
          {
            v57 = 0;
            v12 = (uint8_t *)&v57;
            v13 = v11;
            v14 = "Invalid ResourceData for type[VideoAssetResourceTypeVenueDescription] and for command[VideoAssetResourceCommandAdd]";
LABEL_29:
            _os_log_error_impl(&dword_224FE9000, v13, OS_LOG_TYPE_ERROR, v14, v12, 2u);
          }
        }
        else
        {
          re::VideoAsset::containsFigDataChannelResource((uint64_t)&v57, (uint64_t)this, v6);
          v20 = v60;
          if (!(_BYTE)v57)
          {
            *(_QWORD *)v55 = 0;
            re::VideoObject<re::VideoFigDataChannelResourceBase>::setRef((const void **)v55, v60);
            v22 = *(_QWORD *)&this[136]._os_unfair_lock_opaque;
            if (v22 >= 5)
            {
              re::internal::assertLog((re::internal *)4, v21, "assertion failure: '%s' (%s:line %i) Capacity limit reached. DynamicInlineArray<T,N> cannot be resized.", "false", "ensureCapacity", 277);
              _os_crash();
              __break(1u);
              return;
            }
            *(_QWORD *)&v49[2 * v22]._os_unfair_lock_opaque = *(_QWORD *)v55;
            *(_QWORD *)&this[136]._os_unfair_lock_opaque = v22 + 1;
            ++this[138]._os_unfair_lock_opaque;
          }
          if (v20)
          {
            v23 = v20;
LABEL_77:
            CFRelease(v23);
          }
        }
LABEL_78:
        if (++v4 != v5)
          continue;
        v38 = this + 68;
        v39 = v5 + 1;
        do
        {
          v40 = (v39 - 2);
          if (re::VideoAssetResourceContext::getResourceDataAtIndex((uint64_t)v2, v40, &v52))
          {
            os_unfair_lock_lock(v2);
            v41 = *(_QWORD *)&this[64]._os_unfair_lock_opaque;
            if (v41 > v40)
            {
              if (v41 - 1 > v40)
              {
                v42 = (char *)&v38[6 * v41];
                v43 = (char *)&v38[6 * v40];
                *(_QWORD *)v43 = *((_QWORD *)v42 - 3);
                std::__variant_detail::__assignment<std::__variant_detail::__traits<re::VideoObject<re::VideoFigDataChannelResourceBase>,re::VideoAssetContentInfo>>::__generic_assign[abi:nn180100]<std::__variant_detail::__move_assignment<std::__variant_detail::__traits<re::VideoObject<re::VideoFigDataChannelResourceBase>,re::VideoAssetContentInfo>,(std::__variant_detail::_Trait)1>>((uint64_t)(v43 + 8), (uint64_t)(v42 - 16));
                v41 = *(_QWORD *)&this[64]._os_unfair_lock_opaque;
              }
              v44 = (char *)&v38[6 * v41];
              v45 = *((unsigned int *)v44 - 2);
              if ((_DWORD)v45 != -1)
              {
                ((void (*)(uint8_t *, char *))off_24ED38388[v45])(buf, v44 - 16);
                v41 = *(_QWORD *)&this[64]._os_unfair_lock_opaque;
              }
              *((_DWORD *)v44 - 2) = -1;
              *(_QWORD *)&this[64]._os_unfair_lock_opaque = v41 - 1;
              ++this[66]._os_unfair_lock_opaque;
            }
            os_unfair_lock_unlock(v2);
          }
          --v39;
        }
        while (v39 > 1);
        v46 = v54;
        if (v54 != -1)
          goto LABEL_92;
        return;
      case 2:
        if (HIDWORD(v52) != 1)
          goto LABEL_78;
        if (v54
          || (buf[0] = 1, v60 = 0, re::VideoObject<re::VideoFigDataChannelResourceBase>::setRef(v6, v53), !buf[0]))
        {
          v16 = *re::assetTypesLogObjects((re *)v10);
          if (!os_log_type_enabled(v16, OS_LOG_TYPE_ERROR))
            goto LABEL_78;
          v57 = 0;
          v12 = (uint8_t *)&v57;
          v13 = v16;
          v14 = "Invalid ResourceData for type[VideoAssetResourceTypeVenueDescription] and for command[VideoAssetResourceCommandRemove]";
          goto LABEL_29;
        }
        re::VideoAsset::containsFigDataChannelResource((uint64_t)&v57, (uint64_t)this, v6);
        if ((_BYTE)v57)
        {
          v33 = *(_QWORD *)&this[136]._os_unfair_lock_opaque;
          if (v33 <= v58)
          {
            re::internal::assertLog((re::internal *)6, v32, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < m_size", "removeAt", 527, v58, v33);
            _os_crash();
            __break(1u);
          }
          v34 = v33 - 1;
          if (v33 - 1 <= v58)
          {
            v37 = *(const void **)&v7[2 * v33]._os_unfair_lock_opaque;
            if (v37)
            {
              CFRelease(v37);
              v34 = *(_QWORD *)&this[136]._os_unfair_lock_opaque - 1;
            }
          }
          else
          {
            *(_QWORD *)&v49[2 * v58]._os_unfair_lock_opaque = *(_QWORD *)&v7[2 * v33]._os_unfair_lock_opaque;
          }
          *(_QWORD *)&v7[2 * v33]._os_unfair_lock_opaque = 0;
          *(_QWORD *)&this[136]._os_unfair_lock_opaque = v34;
          ++this[138]._os_unfair_lock_opaque;
        }
LABEL_76:
        v23 = v60;
        if (!v60)
          goto LABEL_78;
        goto LABEL_77;
      case 3:
        if (HIDWORD(v52) != 1)
          goto LABEL_78;
        if (v54
          || (LOBYTE(v57) = 1,
              v58 = 0,
              re::VideoObject<re::VideoFigDataChannelResourceBase>::setRef((const void **)&v58, v53),
              !(_BYTE)v57))
        {
          v15 = *re::assetTypesLogObjects((re *)v10);
          if (!os_log_type_enabled(v15, OS_LOG_TYPE_ERROR))
            goto LABEL_78;
          *(_WORD *)buf = 0;
          v12 = buf;
          v13 = v15;
          v14 = "Invalid ResourceData for type[VideoAssetResourceTypeVenueDescription] and for command[VideoAssetResourceCommandReady]";
          goto LABEL_29;
        }
        os_unfair_lock_lock(v2);
        v24 = *(_QWORD *)&this[64]._os_unfair_lock_opaque;
        os_unfair_lock_unlock(v2);
        *(_QWORD *)buf = 0;
        v60 = 0;
        v61 = 0;
        if ((int)v24 < 1)
        {
          v36 = 0;
          goto LABEL_70;
        }
        v25 = 0;
        v48 = 0;
        v26 = v24;
        cf2 = (CFTypeRef)v58;
        v50 = v6;
        break;
      case 6:
        if (HIDWORD(v52) != 1)
          goto LABEL_78;
        if (!v54)
        {
          buf[0] = 1;
          v60 = 0;
          re::VideoObject<re::VideoFigDataChannelResourceBase>::setRef(v6, v53);
          if (buf[0])
            goto LABEL_76;
        }
        v17 = *re::assetTypesLogObjects((re *)v10);
        if (!os_log_type_enabled(v17, OS_LOG_TYPE_ERROR))
          goto LABEL_78;
        v57 = 0;
        v12 = (uint8_t *)&v57;
        v13 = v17;
        v14 = "Invalid ResourceData for type[VideoAssetResourceTypeVenueDescription] and for command[VideoAssetResourceCo"
              "mmandSetAsCurrent]";
        goto LABEL_29;
      case 7:
        if (HIDWORD(v52) != 3)
          goto LABEL_78;
        if (v54 == 1)
        {
          *(_WORD *)v51 = (_WORD)v53;
          BYTE2(this[232]._os_unfair_lock_opaque) = BYTE2(v53);
          v18 = *(re::VideoDefaults ***)&this[50]._os_unfair_lock_opaque;
          if (v18)
            re::ecs2::VideoPlayerComponentHelper::impl::setVideoAssetContentInfo(*v18, v51);
          goto LABEL_78;
        }
        v19 = *re::assetTypesLogObjects((re *)v10);
        if (!os_log_type_enabled(v19, OS_LOG_TYPE_ERROR))
          goto LABEL_78;
        *(_WORD *)buf = 0;
        v12 = buf;
        v13 = v19;
        v14 = "Invalid ResourceData for type[VideoAssetResourceTypeCurrentContentInfo] and for command[VideoAssetResourceCommandChanged]";
        goto LABEL_29;
      default:
        goto LABEL_78;
    }
    break;
  }
  while (1)
  {
    v27 = (re *)re::VideoAssetResourceContext::getResourceDataAtIndex((uint64_t)v2, v25, buf);
    if ((_DWORD)v27)
    {
      if (*(_DWORD *)&buf[4] == 1 && *(_DWORD *)buf == 2)
        break;
    }
LABEL_51:
    if (v26 == ++v25)
    {
LABEL_63:
      if ((v48 & 1) != 0)
      {
        v35 = *re::videoLogObjects(v27);
        if (os_log_type_enabled(v35, OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)v55 = 0;
          _os_log_impl(&dword_224FE9000, v35, OS_LOG_TYPE_DEFAULT, "There is a Remove command in the queue, abort processing Ready command", v55, 2u);
        }
        v36 = v61;
        if (v61 == -1)
        {
LABEL_71:
          v23 = (CFTypeRef)v58;
          if (v58)
            goto LABEL_77;
          goto LABEL_78;
        }
      }
      else
      {
        v36 = v61;
        if (v61 == -1)
          goto LABEL_71;
      }
LABEL_70:
      ((void (*)(uint8_t *, CFTypeRef *))off_24ED38388[v36])(v55, v6);
      goto LABEL_71;
    }
  }
  if (v61)
  {
    v29 = 0;
    v55[0] = 0;
    v30 = cf;
  }
  else
  {
    v55[0] = 1;
    cf = 0;
    re::VideoObject<re::VideoFigDataChannelResourceBase>::setRef(&cf, v60);
    v29 = v55[0];
    v30 = cf;
    if (v55[0])
    {
      v27 = (re *)CFEqual(cf, cf2);
      if ((_DWORD)v27)
      {
        v31 = 0;
        v48 = 1;
LABEL_48:
        if (v30)
          CFRelease(v30);
LABEL_50:
        v6 = v50;
        if ((v31 & 1) == 0)
          goto LABEL_63;
        goto LABEL_51;
      }
    }
  }
  v31 = 1;
  if (!v29)
    goto LABEL_50;
  goto LABEL_48;
}

void sub_22535AA14(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,int a28,CFTypeRef cf)
{
  const void *v29;
  uint64_t v30;

  if (cf)
    CFRelease(cf);
  if (v29)
    CFRelease(v29);
  if (a28 != -1)
    ((void (*)(uint64_t, uint64_t))off_24ED38388[a28])(v30 - 128, a17);
  _Unwind_Resume(exception_object);
}

void re::VideoAsset::setReceiverEndpoint(re::VideoAsset *a1, void *a2)
{
  uint64_t v4;
  id v5;

  v5 = a2;
  v4 = *((_QWORD *)a1 + 23);
  if (v4)
  {
    objc_storeStrong((id *)(v4 + 40), a2);
    if (!*(_BYTE *)(*((_QWORD *)a1 + 23) + 48))
      re::VideoAsset::updateVideoTarget(a1);
  }

}

void sub_22535AB64(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

re::VideoDefaults **re::VideoAsset::createOrGetVideoPlayerComponentHelper(re::VideoAsset *this)
{
  re::VideoDefaults **result;
  NSObject *v3;
  _BOOL8 v4;
  uint64_t *v5;
  re::ecs2::VideoPlayerComponentHelper *v6;
  uint8_t v7[16];

  result = (re::VideoDefaults **)*((_QWORD *)this + 25);
  if (!result)
  {
    v3 = *re::videoLogObjects(0);
    v4 = os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT);
    if (v4)
    {
      *(_WORD *)v7 = 0;
      _os_log_impl(&dword_224FE9000, v3, OS_LOG_TYPE_DEFAULT, "VideoAsset createOrGetVideoPlayerComponentHelper", v7, 2u);
    }
    v5 = re::globalAllocators((re *)v4);
    v6 = (re::ecs2::VideoPlayerComponentHelper *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v5[2] + 32))(v5[2], 8, 8);
    result = (re::VideoDefaults **)re::ecs2::VideoPlayerComponentHelper::VideoPlayerComponentHelper(v6);
    *((_QWORD *)this + 25) = result;
    if (*((_BYTE *)this + 928))
    {
      re::ecs2::VideoPlayerComponentHelper::impl::setVideoAssetContentInfo(*result, (unsigned __int8 *)this + 928);
      return (re::VideoDefaults **)*((_QWORD *)this + 25);
    }
  }
  return result;
}

uint64_t re::VideoAssetLoader::registerAsset(re::VideoAssetLoader *this, unsigned __int8 *a2, const re::ExistingAssetInformation *a3)
{
  NSObject *v6;
  uint64_t v7;
  uint8_t v9[16];

  v6 = *re::videoLogObjects(this);
  if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)v9 = 0;
    _os_log_impl(&dword_224FE9000, v6, OS_LOG_TYPE_DEFAULT, "VideoAsset->registerAsset :: Registering Asset", v9, 2u);
  }
  v7 = re::AssetLoader::registerAsset(this, a2, a3);
  if (!(_DWORD)v7)
    re::VideoAsset::updateAutoPlay((uint64_t)a2, a2[176], 1);
  return v7;
}

_QWORD *re::VideoAssetLoader::unregisterAsset(re::VideoAssetLoader *this, _QWORD *a2, const re::ExistingAssetInformation *a3)
{
  NSObject *v4;
  uint64_t v5;
  const void *v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  const void *v10;
  uint8_t v12[16];

  v4 = *re::videoLogObjects(this);
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)v12 = 0;
    _os_log_impl(&dword_224FE9000, v4, OS_LOG_TYPE_DEFAULT, "VideoAsset :: UnRegistering Asset", v12, 2u);
  }
  v5 = a2[23];
  if (v5)
  {
    v6 = *(const void **)(v5 + 32);
    if (v6)
    {
      if (!*(_QWORD *)v5 || (objc_msgSend(*(id *)v5, "removeEndpoint:"), (v6 = *(const void **)(v5 + 32)) != 0))
        re::VideoObjectBase<re::VideoFigDataChannelResourceBase,OpaqueFigDataChannelResource *>::release(v6);
      *(_QWORD *)(v5 + 32) = 0;
    }
    re::VideoAsset::updateAutoPlay((uint64_t)a2, *((unsigned __int8 *)a2 + 176), 0);
  }
  v7 = a2[24];
  if (v7)
  {
    re::VideoChannelTextureHandles::invalidate((re::VideoChannelTextureHandles *)(v7 + 1952));
    re::VideoChannelTextureHandles::invalidate((re::VideoChannelTextureHandles *)(v7 + 2072));
    *(_DWORD *)(v7 + 2192) = -1;
    re::VideoChannelTextureHandles::invalidate((re::VideoChannelTextureHandles *)(v7 + 2200));
    re::VideoChannelTextureHandles::invalidate((re::VideoChannelTextureHandles *)(v7 + 2320));
    *(_DWORD *)(v7 + 2440) = -1;
    *(_OWORD *)(v7 + 1936) = 0u;
    v8 = v7 + 24;
    do
    {
      *(_QWORD *)v8 = 0;
      ++*(_DWORD *)(v8 + 8);
      v8 += 72;
    }
    while (v8 != v7 + 168);
  }
  v9 = (_QWORD *)a2[21];
  if (v9)
  {
    re::VideoColorManager::clear((re::VideoColorManager *)(v9 + 262));
    re::VideoPixelBufferTextures::invalidate((re::VideoPixelBufferTextures *)(v9 + 28));
    v10 = (const void *)v9[27];
    if (v10)
    {
      CFRelease(v10);
      v9[27] = 0;
    }
    re::VideoPresentationQueue::clear((re::VideoPresentationQueue *)(v9 + 32));
  }
  return re::VideoAsset::cleanupVideoPlayerHelper(a2);
}

re *re::VideoAssetLoader::unloadAsset(re *this, _QWORD *a2)
{
  uint64_t v3;
  id v4;
  re *v5;
  uint64_t v6;
  const void *v7;
  uint64_t v8;
  void *v9;
  re *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t i;
  uint64_t v15;
  uint64_t j;
  uint64_t k;
  uint64_t v18;
  uint64_t v19;

  if (a2)
  {
    v3 = a2[23];
    if (v3)
    {
      v4 = *(id *)v3;
      *(_QWORD *)v3 = 0;

      v6 = re::globalAllocators(v5)[2];
      v7 = *(const void **)(v3 + 32);
      if (v7)
        CFRelease(v7);
      *(_QWORD *)(v3 + 32) = 0;

      this = (re *)(*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v6 + 40))(v6, v3);
      a2[23] = 0;
    }
    v8 = a2[24];
    if (v8)
    {
      v9 = *(void **)(v8 + 16);
      *(_QWORD *)(v8 + 16) = 0;

      if (*(_QWORD *)v8)
        re::destroyVideoReceiver((const void **)v8);
      v11 = 0;
      v12 = re::globalAllocators(v10)[2];
      do
      {
        v13 = v8 + v11;
        if (*(_QWORD *)(v8 + v11 + 2424))
          re::VideoObjectBase<re::VideoColorTransformBase,__CFArray const*>::release((const void **)(v8 + v11 + 2424));
        *(_QWORD *)(v8 + v11 + 2424) = 0;
        re::TextureHandle::invalidate((re::TextureHandle *)(v13 + 2384));
        re::TextureHandle::invalidate((re::TextureHandle *)(v13 + 2368));
        re::TextureHandle::invalidate((re::TextureHandle *)(v13 + 2352));
        re::TextureHandle::invalidate((re::TextureHandle *)(v13 + 2336));
        re::TextureHandle::invalidate((re::TextureHandle *)(v13 + 2320));
        v11 -= 120;
      }
      while (v11 != -240);
      for (i = 0; i != -240; i -= 120)
      {
        v15 = v8 + i;
        if (*(_QWORD *)(v8 + i + 2176))
          re::VideoObjectBase<re::VideoColorTransformBase,__CFArray const*>::release((const void **)(v8 + i + 2176));
        *(_QWORD *)(v8 + i + 2176) = 0;
        re::TextureHandle::invalidate((re::TextureHandle *)(v15 + 2136));
        re::TextureHandle::invalidate((re::TextureHandle *)(v15 + 2120));
        re::TextureHandle::invalidate((re::TextureHandle *)(v15 + 2104));
        re::TextureHandle::invalidate((re::TextureHandle *)(v15 + 2088));
        re::TextureHandle::invalidate((re::TextureHandle *)(v15 + 2072));
      }
      for (j = 1056; j != -704; j -= 880)
        re::VideoPresentationGroup::~VideoPresentationGroup((re::VideoPresentationGroup *)(v8 + j));
      for (k = 0; k != -144; k -= 72)
      {
        v18 = v8 + k;
        *(_QWORD *)(v18 + 96) = 0;
        *(_DWORD *)(v18 + 104) = *(_DWORD *)(v8 + k + 104) + 1;
      }

      if (*(_QWORD *)v8)
        re::VideoObjectBase<re::VideoColorTransformBase,__CFArray const*>::release((const void **)v8);
      *(_QWORD *)v8 = 0;
      this = (re *)(*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v12 + 40))(v12, v8);
      a2[24] = 0;
    }
    v19 = re::globalAllocators(this)[2];
    (*(void (**)(_QWORD *))*a2)(a2);
    return (re *)(*(uint64_t (**)(uint64_t, _QWORD *))(*(_QWORD *)v19 + 40))(v19, a2);
  }
  return this;
}

uint64_t re::VideoAssetLoader::isSupportedSourceExtension(re::VideoAssetLoader *this, const char *a2)
{
  return 0;
}

void re::VideoAssetLoader::makeSharedResourcePayload(re *a1@<X0>, uint64_t a2@<X1>, REVideoPayload **a3@<X8>)
{
  REVideoPayload *v4;
  NSObject *v5;
  uint8_t v6[8];
  REVideoPayload *v7;

  if (*(_QWORD *)(a2 + 184))
  {
    re::VideoPayload::makeWithProperties(*(unsigned __int8 *)(a2 + 24), *(unsigned int *)(a2 + 224), *(unsigned int *)(a2 + 240), *(unsigned __int8 *)(a2 + 931), *(unsigned __int8 *)(a2 + 244), &v7, *(float *)(a2 + 28), *(double *)(a2 + 216), *(double *)(a2 + 232));
    v4 = v7;
    v7 = 0;
    *a3 = v4;
  }
  else
  {
    v5 = *re::assetTypesLogObjects(a1);
    if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)v6 = 0;
      _os_log_error_impl(&dword_224FE9000, v5, OS_LOG_TYPE_ERROR, "VideoAssetLoader::makeSharedResourcePayload was unexpectedly called on an asset without playback data", v6, 2u);
    }
    *a3 = 0;
  }
}

uint64_t re::VideoAssetLoader::postInitializeAssetFromPayload(uint64_t a1, id *a2, uint64_t a3)
{
  re *v5;
  id v6;
  unsigned int v7;
  id v8;
  id v9;
  unsigned int v10;
  id v11;
  id v12;
  id v13;
  id v14;
  id v15;
  re *v16;
  id v17;
  id v18;
  int v19;
  re *v20;
  NSObject *v21;
  _BOOL8 v22;
  int v23;
  double v24;
  uint64_t v25;
  uint64_t v26;
  NSObject *v27;
  const char *v28;
  NSObject *v30;
  id v31;
  uint8_t buf[4];
  int v33;
  __int16 v34;
  double v35;
  uint64_t v36;

  v36 = *MEMORY[0x24BDAC8D0];
  re::VideoPayload::dynamicCast(a2, &v31);
  if (!a3)
  {
    v27 = *re::videoLogObjects(v5);
    if (!os_log_type_enabled(v27, OS_LOG_TYPE_ERROR))
    {
LABEL_10:
      v26 = 0;
      goto LABEL_11;
    }
    *(_WORD *)buf = 0;
    v28 = "Invalid video asset to initialize with payload";
LABEL_16:
    _os_log_error_impl(&dword_224FE9000, v27, OS_LOG_TYPE_ERROR, v28, buf, 2u);
    goto LABEL_10;
  }
  v6 = v31;
  v7 = objc_msgSend(v6, "diffuseSpillMapWidth");
  v8 = v31;
  *(_QWORD *)(a3 + 216) = __PAIR64__(objc_msgSend(v8, "diffuseSpillMapHeight"), v7);

  v9 = v31;
  v10 = objc_msgSend(v9, "specularSpillMapWidth");
  v11 = v31;
  *(_QWORD *)(a3 + 232) = __PAIR64__(objc_msgSend(v11, "specularSpillMapHeight"), v10);

  v12 = v31;
  re::VideoAsset::setDiffuseSpillMapBlurSigma((re::VideoAsset *)a3, objc_msgSend(v12, "diffuseSpillBlurSigma"));

  v13 = v31;
  re::VideoAsset::setSpecularSpillMapBlurSigma((re::VideoAsset *)a3, objc_msgSend(v13, "specularSpillBlurSigma"));

  v14 = v31;
  *(_BYTE *)(a3 + 931) = objc_msgSend(v14, "desiredViewingMode");

  v15 = v31;
  *(_BYTE *)(a3 + 244) = objc_msgSend(v15, "preventPlaybackUntilReady");

  v16 = (re *)(*(uint64_t (**)(uint64_t, uint64_t, _QWORD, _QWORD))(*(_QWORD *)a1 + 24))(a1, a3, 0, 0);
  if ((v16 & 1) == 0)
  {
    v27 = *re::assetTypesLogObjects(v16);
    if (!os_log_type_enabled(v27, OS_LOG_TYPE_ERROR))
      goto LABEL_10;
    *(_WORD *)buf = 0;
    v28 = "VideoAsset::createRuntimeData failed unexpectedly";
    goto LABEL_16;
  }
  v17 = v31;
  *(_BYTE *)(a3 + 24) = objc_msgSend(v17, "audioInputMode");

  v18 = v31;
  objc_msgSend(v18, "reverbSendLevel");
  *(_DWORD *)(a3 + 28) = v19;

  v21 = *re::assetTypesLogObjects(v20);
  v22 = os_log_type_enabled(v21, OS_LOG_TYPE_INFO);
  if (v22)
  {
    v23 = *(unsigned __int8 *)(a3 + 24);
    v24 = *(float *)(a3 + 28);
    *(_DWORD *)buf = 67109376;
    v33 = v23;
    v34 = 2048;
    v35 = v24;
    _os_log_impl(&dword_224FE9000, v21, OS_LOG_TYPE_INFO, "recovered audio inputMode=%d, reverbSendLevel=%0.2f from video payload", buf, 0x12u);
  }
  v25 = *(_QWORD *)(a3 + 192);
  if (v25)
  {
    v26 = 1;
    *(_BYTE *)(v25 + 2472) = 1;
  }
  else
  {
    v30 = *re::assetTypesLogObjects((re *)v22);
    if (os_log_type_enabled(v30, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      _os_log_error_impl(&dword_224FE9000, v30, OS_LOG_TYPE_ERROR, "VideoAsset without rendering data unexpectedly received an updated VideoPlayload", buf, 2u);
    }
    v26 = 1;
  }
LABEL_11:

  return v26;
}

void sub_22535B3C4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void re::VideoAssetLoader::resourceDidUpdate(int a1, uint64_t a2, id *this)
{
  id v4;
  id v5;
  int v6;
  re *v7;
  NSObject *v8;
  int v9;
  double v10;
  id v11;
  unsigned int v12;
  id v13;
  id v14;
  unsigned int v15;
  id v16;
  id v17;
  id v18;
  id v19;
  id v20;
  id v21;
  uint8_t buf[4];
  int v23;
  __int16 v24;
  double v25;
  uint64_t v26;

  v26 = *MEMORY[0x24BDAC8D0];
  re::VideoPayload::dynamicCast(this, &v21);
  v4 = v21;
  *(_BYTE *)(a2 + 24) = objc_msgSend(v4, "audioInputMode");

  v5 = v21;
  objc_msgSend(v5, "reverbSendLevel");
  *(_DWORD *)(a2 + 28) = v6;

  v8 = *re::assetTypesLogObjects(v7);
  if (os_log_type_enabled(v8, OS_LOG_TYPE_INFO))
  {
    v9 = *(unsigned __int8 *)(a2 + 24);
    v10 = *(float *)(a2 + 28);
    *(_DWORD *)buf = 67109376;
    v23 = v9;
    v24 = 2048;
    v25 = v10;
    _os_log_impl(&dword_224FE9000, v8, OS_LOG_TYPE_INFO, "recovered audio inputMode=%d, reverbSendLevel=%0.2f from video payload update", buf, 0x12u);
  }
  v11 = v21;
  v12 = objc_msgSend(v11, "diffuseSpillMapWidth");
  v13 = v21;
  *(_QWORD *)(a2 + 216) = __PAIR64__(objc_msgSend(v13, "diffuseSpillMapHeight"), v12);

  v14 = v21;
  v15 = objc_msgSend(v14, "specularSpillMapWidth");
  v16 = v21;
  *(_QWORD *)(a2 + 232) = __PAIR64__(objc_msgSend(v16, "specularSpillMapHeight"), v15);

  v17 = v21;
  re::VideoAsset::setDiffuseSpillMapBlurSigma((re::VideoAsset *)a2, objc_msgSend(v17, "diffuseSpillBlurSigma"));

  v18 = v21;
  re::VideoAsset::setSpecularSpillMapBlurSigma((re::VideoAsset *)a2, objc_msgSend(v18, "specularSpillBlurSigma"));

  v19 = v21;
  *(_BYTE *)(a2 + 931) = objc_msgSend(v19, "desiredViewingMode");

  v20 = v21;
  *(_BYTE *)(a2 + 244) = objc_msgSend(v20, "preventPlaybackUntilReady");

}

void sub_22535B638(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void re::VideoAssetLoader::setPayloadOptions(uint64_t a1, re::VideoAsset *a2, id *a3)
{
  void *v5;
  id v6;

  re::VideoRequestOptions::dynamicCast(a3, &v6);
  objc_msgSend(*a3, "receiverEndpoint");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  re::VideoAsset::setReceiverEndpoint(a2, v5);

}

void sub_22535B6E8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

uint64_t *re::allocInfo_VideoAsset(re *this)
{
  unsigned __int8 v1;

  v1 = atomic_load((unsigned __int8 *)&qword_254100840);
  if ((v1 & 1) == 0 && __cxa_guard_acquire(&qword_254100840))
  {
    ArcSharedObject::ArcSharedObject((ArcSharedObject *)&qword_2541008D8, 0);
    *(uint64_t *)((char *)&qword_2541008E8 + 6) = 0;
    qword_2541008E8 = 0;
    qword_2541008F8 = 0;
    qword_254100900 = 0xFFFFFFFFLL;
    qword_2541008D8 = (uint64_t)&off_24ED7DAA8;
    qword_254100908 = (uint64_t)"VideoAsset";
    dword_254100910 = 0;
    unk_254100918 = 0u;
    unk_254100928 = 0u;
    unk_254100938 = 0u;
    qword_254100948 = 0;
    __cxa_guard_release(&qword_254100840);
  }
  return &qword_2541008D8;
}

void re::initInfo_VideoAsset(re *this, re::IntrospectionBase *a2)
{
  const re::IntrospectionBase *v3;
  unsigned __int8 v4;
  re *v5;
  uint64_t *v6;
  const re::IntrospectionBase *v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t *v10;
  const re::IntrospectionBase *v11;
  uint64_t *v12;
  uint64_t v13;
  const re::IntrospectionBase *v14;
  uint64_t *v15;
  unsigned __int8 v16;
  unsigned __int8 v17;
  uint64_t *v18;
  uint64_t v19;
  unsigned int *v20;
  _anonymous_namespace_ *v21;
  unint64_t v22;
  unint64_t i;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  char v27;
  unsigned __int8 *v28;
  int v29;
  uint64_t v30;
  unint64_t j;
  uint64_t v32;
  char *v33;
  uint64_t v34;
  char v35;
  unsigned __int8 *v36;
  int v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  re *v41;
  uint64_t *v42;
  re *v43;
  uint64_t *v44;
  re *v45;
  uint64_t *v46;
  uint64_t v47;
  uint64_t v48;
  __int128 v49;
  __int128 v50;
  uint64_t v51[2];
  __int128 v52;
  StringID v53;
  _QWORD v54[2];
  uint64_t v55;
  const char *v56;

  v55 = 0x10D01A2978AEAALL;
  v56 = "VideoAsset";
  re::StringID::destroyString((re::StringID *)&v55);
  *((_OWORD *)this + 2) = v50;
  v4 = atomic_load((unsigned __int8 *)&qword_254100838);
  if ((v4 & 1) != 0)
    goto LABEL_2;
  v5 = (re *)__cxa_guard_acquire(&qword_254100838);
  if (!(_DWORD)v5)
    goto LABEL_2;
  v6 = re::introspectionAllocator(v5);
  v8 = introspect_REAudioInputMode(1, v7);
  v9 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v6 + 32))(v6, 72, 8);
  *(_DWORD *)v9 = 1;
  *(_QWORD *)(v9 + 8) = "audioInputMode";
  *(_QWORD *)(v9 + 16) = v8;
  *(_QWORD *)(v9 + 24) = 0;
  *(_QWORD *)(v9 + 32) = 0x1800000001;
  *(_DWORD *)(v9 + 40) = 0;
  *(_QWORD *)(v9 + 48) = 0;
  *(_QWORD *)(v9 + 56) = 0;
  *(_DWORD *)(v9 + 64) = 0;
  qword_254100878 = v9;
  v10 = re::introspectionAllocator((re *)v9);
  v12 = re::IntrospectionInfo<re::DynamicArray<re::AssetHandle>>::get(1, v11);
  v13 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v10 + 32))(v10, 72, 8);
  *(_DWORD *)v13 = 1;
  *(_QWORD *)(v13 + 8) = "videoFileAssets";
  *(_QWORD *)(v13 + 16) = v12;
  *(_QWORD *)(v13 + 24) = 0;
  *(_QWORD *)(v13 + 32) = 0x8000000002;
  *(_DWORD *)(v13 + 40) = 0;
  *(_QWORD *)(v13 + 48) = 0;
  *(_QWORD *)(v13 + 56) = 0;
  *(_DWORD *)(v13 + 64) = 0;
  qword_254100880 = v13;
  v15 = re::introspectionAllocator((re *)v13);
  v16 = atomic_load((unsigned __int8 *)&qword_254100828);
  if ((v16 & 1) == 0)
  {
    v41 = (re *)__cxa_guard_acquire(&qword_254100828);
    if ((_DWORD)v41)
    {
      v42 = re::introspectionAllocator(v41);
      v43 = (re *)(*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v42 + 32))(v42, 24, 8);
      *(_DWORD *)v43 = 1;
      *((_QWORD *)v43 + 1) = 0;
      *((_QWORD *)v43 + 2) = "Manual";
      qword_254100860 = (uint64_t)v43;
      v44 = re::introspectionAllocator(v43);
      v45 = (re *)(*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v44 + 32))(v44, 24, 8);
      *(_DWORD *)v45 = 1;
      *((_QWORD *)v45 + 1) = 1;
      *((_QWORD *)v45 + 2) = "AutoPlayOnce";
      qword_254100868 = (uint64_t)v45;
      v46 = re::introspectionAllocator(v45);
      v47 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v46 + 32))(v46, 24, 8);
      *(_DWORD *)v47 = 1;
      *(_QWORD *)(v47 + 8) = 2;
      *(_QWORD *)(v47 + 16) = "AutoPlayAndLoop";
      qword_254100870 = v47;
      __cxa_guard_release(&qword_254100828);
    }
  }
  v17 = atomic_load((unsigned __int8 *)&qword_254100830);
  if ((v17 & 1) == 0 && __cxa_guard_acquire(&qword_254100830))
  {
    re::IntrospectionBasic::IntrospectionBasic((re::IntrospectionBasic *)&qword_254100890, "VideoAssetPlaybackMode", 1, 1, 1, 1);
    qword_254100890 = (uint64_t)&off_24ED7D9E8;
    qword_2541008D0 = (uint64_t)&re::introspect_VideoAssetPlaybackMode(BOOL)::enumTable;
    dword_2541008A0 = 9;
    __cxa_guard_release(&qword_254100830);
  }
  if ((_MergedGlobals_83 & 1) != 0)
  {
LABEL_33:
    v40 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v15 + 32))(v15, 72, 8);
    *(_DWORD *)v40 = 1;
    *(_QWORD *)(v40 + 8) = "playbackMode";
    *(_QWORD *)(v40 + 16) = &qword_254100890;
    *(_QWORD *)(v40 + 24) = 0;
    *(_QWORD *)(v40 + 32) = 0xB000000003;
    *(_DWORD *)(v40 + 40) = 0;
    *(_QWORD *)(v40 + 48) = 0;
    *(_QWORD *)(v40 + 56) = 0;
    *(_DWORD *)(v40 + 64) = 0;
    qword_254100888 = v40;
    __cxa_guard_release(&qword_254100838);
LABEL_2:
    *((_QWORD *)this + 2) = 0x3B000000008;
    *((_DWORD *)this + 6) = 16;
    *((_WORD *)this + 14) = 0;
    *((_DWORD *)this + 14) = 3;
    *((_QWORD *)this + 8) = &qword_254100878;
    *((_QWORD *)this + 9) = re::internal::defaultConstruct<re::VideoAsset>;
    *((_QWORD *)this + 10) = re::internal::defaultDestruct<re::VideoAsset>;
    *((_QWORD *)this + 11) = 0;
    *((_QWORD *)this + 12) = 0;
    *((_QWORD *)this + 13) = re::internal::defaultConstructV2<re::VideoAsset>;
    *((_QWORD *)this + 14) = re::internal::defaultDestructV2<re::VideoAsset>;
    re::IntrospectionRegistry::add(this, v3);
    v49 = v50;
    return;
  }
  _MergedGlobals_83 = 1;
  re::IntrospectionRegistry::add((re::IntrospectionRegistry *)&qword_254100890, v14);
  v51[0] = 0xB0BB7F15DC0CA4A6;
  v51[1] = (uint64_t)"VideoAssetPlaybackMode";
  v55 = 0x31CD534126;
  v56 = "uint8_t";
  v18 = (uint64_t *)re::HashTable<re::StringID,re::StateParameterInt *,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::tryGet((uint64_t)&unk_25582A358, &v55);
  if (v18)
  {
    v19 = *v18;
    re::StringID::destroyString((re::StringID *)&v55);
    v20 = (unsigned int *)qword_2541008D0;
    v54[1] = v19;
    re::TypeBuilder::beginEnumType((uint64_t)&v55, v51, 1, 1, (uint64_t)v54);
    v22 = *v20;
    if ((_DWORD)v22)
    {
      for (i = 0; i < v22; ++i)
      {
        v24 = *(_QWORD *)(*((_QWORD *)v20 + 1) + 8 * i);
        if (*(_DWORD *)v24 == 1)
        {
          v25 = *(char **)(v24 + 16);
          if (v25)
          {
            v26 = *v25;
            if (*v25)
            {
              v27 = v25[1];
              if (v27)
              {
                v28 = (unsigned __int8 *)(v25 + 2);
                do
                {
                  v26 = 31 * v26 + v27;
                  v29 = *v28++;
                  v27 = v29;
                }
                while (v29);
              }
            }
          }
          else
          {
            v26 = 0;
          }
          v30 = *(_QWORD *)(v24 + 8);
          *(_QWORD *)&v53.var0 = 2 * v26;
          v53.var1 = v25;
          re::TypeBuilder::addEnumConstant((re::TypeBuilder *)&v55, v30, &v53);
          re::StringID::destroyString((re::StringID *)&v53);
          v22 = *v20;
        }
      }
      if (v22)
      {
        for (j = 0; j < v22; ++j)
        {
          v32 = *(_QWORD *)(*((_QWORD *)v20 + 1) + 8 * j);
          if (*(_DWORD *)v32 == 2)
          {
            v33 = *(char **)(v32 + 16);
            if (v33)
            {
              v34 = *v33;
              if (*v33)
              {
                v35 = v33[1];
                if (v35)
                {
                  v36 = (unsigned __int8 *)(v33 + 2);
                  do
                  {
                    v34 = 31 * v34 + v35;
                    v37 = *v36++;
                    v35 = v37;
                  }
                  while (v37);
                }
              }
            }
            else
            {
              v34 = 0;
            }
            v38 = *(_QWORD *)(v32 + 8);
            *(_QWORD *)&v53.var0 = 2 * v34;
            v53.var1 = v33;
            re::TypeBuilder::addEnumConstantRenaming((re::TypeBuilder *)&v55, v38, &v53);
            re::StringID::destroyString((re::StringID *)&v53);
            v22 = *v20;
          }
        }
      }
    }
    re::TypeBuilder::~TypeBuilder((re::TypeBuilder *)&v55, v39);
    xmmword_2541008B0 = v52;
    re::StringID::destroyString((re::StringID *)v51);
    goto LABEL_33;
  }
  re::StringID::destroyString((re::StringID *)&v55);
  re::internal::assertLog((re::internal *)5, v48, "assertion failure: '%s' (%s:line %i) Failed to determine underlying type of enum %s.", "valueID.isValid()", "registerEnumType", 2796, "VideoAssetPlaybackMode");
  _os_crash();
  __break(1u);
}

void sub_22535BD8C(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254100828);
  __cxa_guard_abort(&qword_254100838);
  _Unwind_Resume(a1);
}

re::VideoAsset *re::internal::defaultConstruct<re::VideoAsset>(int a1, int a2, re::VideoAsset *this)
{
  return re::VideoAsset::VideoAsset(this);
}

uint64_t re::internal::defaultDestruct<re::VideoAsset>(uint64_t a1, uint64_t a2, uint64_t (***a3)(_QWORD))
{
  return (**a3)(a3);
}

uint64_t re::internal::defaultDestructV2<re::VideoAsset>(uint64_t (***a1)(_QWORD))
{
  return (**a1)(a1);
}

void sub_22535BE94(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_22535BF0C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, objc_super a9)
{
  void *v9;
  void *v10;

  v10 = v9;

  a9.super_class = (Class)REVideoPlayerItemsLooper;
  -[_Unwind_Exception dealloc](&a9, sel_dealloc);
  _Unwind_Resume(a1);
}

void sub_22535C080(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_22535C178(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_22535C1F4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void re::VideoAssetLoader::~VideoAssetLoader(re::VideoAssetLoader *this)
{
  JUMPOUT(0x2276933B8);
}

_QWORD *re::DynamicInlineArray<re::VideoAssetResourceData,10ul>::clear(_QWORD *result)
{
  _QWORD *v1;
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  char v5;

  v1 = result;
  if (*result)
  {
    v2 = 24 * *result;
    v3 = result + 3;
    do
    {
      v4 = *((unsigned int *)v3 + 2);
      if ((_DWORD)v4 != -1)
        result = (_QWORD *)((uint64_t (*)(char *, _QWORD *))off_24ED38388[v4])(&v5, v3);
      *((_DWORD *)v3 + 2) = -1;
      v3 += 3;
      v2 -= 24;
    }
    while (v2);
  }
  *v1 = 0;
  ++*((_DWORD *)v1 + 2);
  return result;
}

uint64_t std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:nn180100]<re::VideoChannelTextureHandles const*,re::VideoChannelTextureHandles const*,re::VideoChannelTextureHandles*>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  __int128 v9;
  __int16 v10;

  if (a2 == a3)
    return a2;
  v6 = a3;
  v7 = 0;
  do
  {
    v8 = a4 + v7;
    re::TextureHandle::operator=((re::TextureHandle *)(a4 + v7), (re::TextureHandle *)(a2 + v7));
    re::TextureHandle::operator=((re::TextureHandle *)(a4 + v7 + 16), (re::TextureHandle *)(a2 + v7 + 16));
    re::TextureHandle::operator=((re::TextureHandle *)(a4 + v7 + 32), (re::TextureHandle *)(a2 + v7 + 32));
    re::TextureHandle::operator=((re::TextureHandle *)(a4 + v7 + 48), (re::TextureHandle *)(a2 + v7 + 48));
    re::TextureHandle::operator=((re::TextureHandle *)(a4 + v7 + 64), (re::TextureHandle *)(a2 + v7 + 64));
    v9 = *(_OWORD *)(a2 + v7 + 80);
    *(_QWORD *)(v8 + 96) = *(_QWORD *)(a2 + v7 + 96);
    *(_OWORD *)(v8 + 80) = v9;
    re::VideoObject<re::VideoColorTransformBase>::setRef(v8 + 104, (const void **)(v8 + 104), *(CFTypeRef *)(a2 + v7 + 104));
    v10 = *(_WORD *)(a2 + v7 + 112);
    *(_BYTE *)(v8 + 114) = *(_BYTE *)(a2 + v7 + 114);
    *(_WORD *)(v8 + 112) = v10;
    v7 += 120;
  }
  while (a2 + v7 != v6);
  return v6;
}

uint64_t re::FixedInlineArray<re::VideoPresentationGroup,2ul>::FixedInlineArray(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v1 = 0;
  v2 = MEMORY[0x24BDC0D40];
  do
  {
    v3 = result + v1;
    v4 = *(_QWORD *)(v2 + 16);
    *(_OWORD *)v3 = *(_OWORD *)v2;
    *(_QWORD *)(v3 + 16) = v4;
    *(_QWORD *)(v3 + 24) = 0;
    *(_DWORD *)(v3 + 32) = 0;
    *(_QWORD *)(v3 + 48) = 0;
    *(_DWORD *)(v3 + 56) = 0;
    *(_QWORD *)(v3 + 80) = 0;
    *(_DWORD *)(v3 + 88) = 0;
    *(_QWORD *)(v3 + 144) = 0;
    *(_DWORD *)(v3 + 152) = 0;
    *(_QWORD *)(v3 + 208) = 0;
    *(_DWORD *)(v3 + 216) = 0;
    *(_QWORD *)(v3 + 272) = 0;
    *(_DWORD *)(v3 + 280) = 0;
    *(_QWORD *)(v3 + 304) = 0;
    *(_DWORD *)(v3 + 312) = 0;
    *(_QWORD *)(v3 + 336) = 0;
    *(_DWORD *)(v3 + 344) = 0;
    *(_QWORD *)(v3 + 400) = 0;
    *(_DWORD *)(v3 + 408) = 0;
    *(_QWORD *)(v3 + 432) = 0;
    *(_DWORD *)(v3 + 440) = 0;
    *(_BYTE *)(v3 + 464) = 0;
    *(_QWORD *)(v3 + 480) = 0;
    *(_DWORD *)(v3 + 488) = 0;
    *(_QWORD *)(v3 + 528) = 0;
    *(_DWORD *)(v3 + 536) = 0;
    *(_QWORD *)(v3 + 560) = 0;
    *(_BYTE *)(v3 + 568) = 0;
    *(_WORD *)(v3 + 656) = 0;
    *(_BYTE *)(v3 + 658) = 0;
    *(_OWORD *)(v3 + 592) = 0uLL;
    *(_OWORD *)(v3 + 608) = 0uLL;
    *(_OWORD *)(v3 + 576) = 0uLL;
    *(_DWORD *)(v3 + 660) = -1;
    *(_QWORD *)(v3 + 704) = 0;
    *(_DWORD *)(v3 + 712) = 0;
    *(_QWORD *)(v3 + 728) = 0;
    *(_DWORD *)(v3 + 736) = 0;
    *(_QWORD *)(v3 + 752) = 0;
    *(_DWORD *)(v3 + 760) = 0;
    *(_QWORD *)(v3 + 784) = 0;
    *(_DWORD *)(v3 + 792) = 0;
    *(_QWORD *)(v3 + 832) = 0;
    *(_DWORD *)(v3 + 840) = 0;
    *(_BYTE *)(v3 + 856) = 0;
    *(_DWORD *)(v3 + 680) = 0;
    *(_OWORD *)(result + v1 + 664) = 0uLL;
    v1 += 880;
    *(_QWORD *)(v3 + 864) = 1;
  }
  while (v1 != 1760);
  return result;
}

uint64_t re::VideoAssetResourceData::create(uint64_t a1, uint64_t a2, int a3, int a4)
{
  uint64_t result;

  *(_QWORD *)a1 = 0;
  *(_DWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 8) = 0;
  result = std::__variant_detail::__assignment<std::__variant_detail::__traits<re::VideoObject<re::VideoFigDataChannelResourceBase>,re::VideoAssetContentInfo>>::__generic_assign[abi:nn180100]<std::__variant_detail::__copy_assignment<std::__variant_detail::__traits<re::VideoObject<re::VideoFigDataChannelResourceBase>,re::VideoAssetContentInfo>,(std::__variant_detail::_Trait)1> const&>(a1 + 8, a2);
  *(_DWORD *)a1 = a4;
  *(_DWORD *)(a1 + 4) = a3;
  return result;
}

void sub_22535C51C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, int a10, __int16 a11, char a12, char a13)
{
  uint64_t v13;
  uint64_t v14;
  uint64_t v16;

  v16 = *(unsigned int *)(v13 + 16);
  if ((_DWORD)v16 != -1)
    ((void (*)(char *, uint64_t))off_24ED38388[v16])(&a13, v14);
  *(_DWORD *)(v13 + 16) = -1;
  _Unwind_Resume(exception_object);
}

void re::VideoAssetResourceContext::pushResourceData(uint64_t a1, uint64_t *a2)
{
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char v9;

  os_unfair_lock_lock((os_unfair_lock_t)a1);
  v4 = *(_QWORD *)(a1 + 8);
  if (v4 <= 9)
  {
    v5 = a1 + 24 * v4;
    v6 = *a2;
    *(_BYTE *)(v5 + 32) = 0;
    v7 = v5 + 32;
    *(_QWORD *)(v7 - 8) = v6;
    *(_DWORD *)(v7 + 8) = -1;
    v8 = *((unsigned int *)a2 + 4);
    if ((_DWORD)v8 != -1)
    {
      ((void (*)(char *, uint64_t, uint64_t *))off_24ED383A8[v8])(&v9, v7, a2 + 1);
      *(_DWORD *)(v7 + 8) = v8;
    }
    ++*(_QWORD *)(a1 + 8);
    ++*(_DWORD *)(a1 + 16);
  }
  os_unfair_lock_unlock((os_unfair_lock_t)a1);
}

void sub_22535C5F8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, int a10, __int16 a11, char a12)
{
  os_unfair_lock_s *v12;
  uint64_t v13;
  uint64_t v15;

  v15 = *(unsigned int *)(v13 + 8);
  if ((_DWORD)v15 != -1)
    ((void (*)(char *, uint64_t))off_24ED38388[v15])(&a12, v13);
  *(_DWORD *)(v13 + 8) = -1;
  os_unfair_lock_unlock(v12);
  _Unwind_Resume(a1);
}

void re::VideoObject<re::VideoFigDataChannelResourceBase>::setRef(const void **a1, CFTypeRef cf)
{
  const void *v4;

  v4 = *a1;
  if (v4)
    re::VideoObjectBase<re::VideoFigDataChannelResourceBase,OpaqueFigDataChannelResource *>::release(v4);
  *a1 = cf;
  if (cf)
    CFRetain(cf);
}

void re::VideoObjectBase<re::VideoFigDataChannelResourceBase,OpaqueFigDataChannelResource *>::release(const void *a1)
{
  uint64_t v1;
  uint64_t v2;
  NSObject *v3;
  uint8_t v4[16];
  uint64_t v5;
  uint64_t v6;

  if (a1)
  {
    CFRelease(a1);
  }
  else
  {
    v5 = v1;
    v6 = v2;
    v3 = *re::videoLogObjects(0);
    if (os_log_type_enabled(v3, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)v4 = 0;
      _os_log_error_impl(&dword_224FE9000, v3, OS_LOG_TYPE_ERROR, "Video m_object is NULL", v4, 2u);
    }
  }
}

uint64_t std::__variant_detail::__assignment<std::__variant_detail::__traits<re::VideoObject<re::VideoFigDataChannelResourceBase>,re::VideoAssetContentInfo>>::__generic_assign[abi:nn180100]<std::__variant_detail::__copy_assignment<std::__variant_detail::__traits<re::VideoObject<re::VideoFigDataChannelResourceBase>,re::VideoAssetContentInfo>,(std::__variant_detail::_Trait)1> const&>(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char v6;

  v2 = result;
  v3 = *(unsigned int *)(result + 8);
  v4 = *(unsigned int *)(a2 + 8);
  if ((_DWORD)v3 == -1)
  {
    if ((_DWORD)v4 == -1)
      return result;
  }
  else if ((_DWORD)v4 == -1)
  {
    result = ((uint64_t (*)(char *, uint64_t, uint64_t))off_24ED38388[v3])(&v6, result, a2);
    *(_DWORD *)(v2 + 8) = -1;
    return result;
  }
  v5 = result;
  return ((uint64_t (*)(uint64_t *, uint64_t, uint64_t))*(&off_24ED38398 + v4))(&v5, result, a2);
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8nn180100IOZNS0_6__dtorINS0_8__traitsIJN2re11VideoObjectINS8_31VideoFigDataChannelResourceBaseEEENS8_21VideoAssetContentInfoEEEELNS0_6_TraitE1EE9__destroyB8nn180100EvEUlRT_E_JRNS0_6__baseILSE_1EJSB_SC_EEEEEEDcSG_DpT0_(uint64_t a1, const void **a2)
{
  if (*a2)
    re::VideoObjectBase<re::VideoFigDataChannelResourceBase,OpaqueFigDataChannelResource *>::release(*a2);
  *a2 = 0;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0ELm0EEE10__dispatchB8nn180100IOZNS0_12__assignmentINS0_8__traitsIJN2re11VideoObjectINS8_31VideoFigDataChannelResourceBaseEEENS8_21VideoAssetContentInfoEEEEE16__generic_assignB8nn180100IRKNS0_17__copy_assignmentISD_LNS0_6_TraitE1EEEEEvOT_EUlRSL_OT0_E_JRNS0_6__baseILSH_1EJSB_SC_EEERKST_EEEDcSL_DpT0_(uint64_t *a1, const void **a2, CFTypeRef *a3)
{
  uint64_t v4;
  uint64_t v5;
  char v6;

  v4 = *a1;
  v5 = *(unsigned int *)(*a1 + 8);
  if ((_DWORD)v5 != -1)
  {
    if (!(_DWORD)v5)
    {
      re::VideoObject<re::VideoFigDataChannelResourceBase>::setRef(a2, *a3);
      return;
    }
    ((void (*)(char *, uint64_t))off_24ED38388[v5])(&v6, v4);
  }
  *(_DWORD *)(v4 + 8) = -1;
  *(_QWORD *)v4 = 0;
  re::VideoObject<re::VideoFigDataChannelResourceBase>::setRef((const void **)v4, *a3);
  *(_DWORD *)(v4 + 8) = 0;
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1ELm1EEE10__dispatchB8nn180100IOZNS0_12__assignmentINS0_8__traitsIJN2re11VideoObjectINS8_31VideoFigDataChannelResourceBaseEEENS8_21VideoAssetContentInfoEEEEE16__generic_assignB8nn180100IRKNS0_17__copy_assignmentISD_LNS0_6_TraitE1EEEEEvOT_EUlRSL_OT0_E_JRNS0_6__baseILSH_1EJSB_SC_EEERKST_EEEDcSL_DpT0_(uint64_t result, uint64_t a2, __int16 *a3)
{
  uint64_t v4;
  uint64_t v5;
  __int16 v6;
  __int16 v7;
  char v8;

  v4 = *(_QWORD *)result;
  v5 = *(unsigned int *)(*(_QWORD *)result + 8);
  if ((_DWORD)v5 != -1)
  {
    if ((_DWORD)v5 == 1)
    {
      v6 = *a3;
      *(_BYTE *)(a2 + 2) = *((_BYTE *)a3 + 2);
      *(_WORD *)a2 = v6;
      return result;
    }
    result = ((uint64_t (*)(char *, uint64_t))off_24ED38388[v5])(&v8, v4);
  }
  *(_DWORD *)(v4 + 8) = -1;
  v7 = *a3;
  *(_BYTE *)(v4 + 2) = *((_BYTE *)a3 + 2);
  *(_WORD *)v4 = v7;
  *(_DWORD *)(v4 + 8) = 1;
  return result;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0ELm0EEE10__dispatchB8nn180100IOZNS0_6__ctorINS0_8__traitsIJN2re11VideoObjectINS8_31VideoFigDataChannelResourceBaseEEENS8_21VideoAssetContentInfoEEEEE19__generic_constructB8nn180100INS0_18__move_constructorISD_LNS0_6_TraitE1EEEEEvRSE_OT_EUlRSK_OT0_E_JRNS0_6__baseILSH_1EJSB_SC_EEEOSS_EEEDcSK_DpT0_(uint64_t a1, _QWORD *a2, _QWORD *a3)
{
  *a2 = 0;
  *a2 = *a3;
  *a3 = 0;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1ELm1EEE10__dispatchB8nn180100IOZNS0_6__ctorINS0_8__traitsIJN2re11VideoObjectINS8_31VideoFigDataChannelResourceBaseEEENS8_21VideoAssetContentInfoEEEEE19__generic_constructB8nn180100INS0_18__move_constructorISD_LNS0_6_TraitE1EEEEEvRSE_OT_EUlRSK_OT0_E_JRNS0_6__baseILSH_1EJSB_SC_EEEOSS_EEEDcSK_DpT0_(uint64_t a1, uint64_t a2, __int16 *a3)
{
  __int16 v3;

  v3 = *a3;
  *(_BYTE *)(a2 + 2) = *((_BYTE *)a3 + 2);
  *(_WORD *)a2 = v3;
}

void `anonymous namespace'::dataChannelResourceStateChangedNotificationHandler(int a1, uint64_t a2, int a3, CFTypeRef cf)
{
  re *VTable;
  uint64_t (*v7)(CFTypeRef, CFTypeRef *);
  int v8;
  _BOOL4 v9;
  NSObject *v10;
  uint64_t (*v11)(CFTypeRef);
  re *v12;
  NSObject *v13;
  int v14;
  NSObject *v15;
  NSObject *v16;
  CFTypeRef v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  const void *v22;
  int v23;
  CFTypeRef v24;
  CFTypeRef cfa;
  char v26;
  _BYTE buf[12];
  int v28;
  uint64_t v29;

  v29 = *MEMORY[0x24BDAC8D0];
  if (a2)
  {
    CFRetain(cf);
    if (cf)
    {
      if (!*(_QWORD *)(a2 + 192))
      {
LABEL_13:
        re::VideoObjectBase<re::VideoFigDataChannelResourceBase,OpaqueFigDataChannelResource *>::release(cf);
        return;
      }
      v19 = 0;
      v20 = 0;
      v21 = 0;
      cfa = 0;
      VTable = (re *)CMBaseObjectGetVTable();
      v7 = *(uint64_t (**)(CFTypeRef, CFTypeRef *))(*((_QWORD *)VTable + 2) + 24);
      if (v7)
      {
        VTable = (re *)v7(cf, &cfa);
        v8 = (int)VTable;
        if (!(_DWORD)VTable)
        {
          if (MEMORY[0x24BDC0A18])
            v9 = MEMORY[0x227691AA4](cfa, *MEMORY[0x24BDC12D0], *(_QWORD *)(MEMORY[0x24BDC12D0] + 8)) != 0;
          else
            v9 = 0;
          v11 = *(uint64_t (**)(CFTypeRef))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 8);
          if (v11)
          {
            v12 = (re *)v11(cf);
            switch((_DWORD)v12)
            {
              case 3:
                v15 = *re::assetTypesLogObjects(v12);
                v14 = 0;
                if (!os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT))
                {
LABEL_28:
                  if (cfa)
                    CFRelease(cfa);
                  if (v14)
                  {
                    v24 = 0;
                    re::VideoObject<re::VideoFigDataChannelResourceBase>::setRef(&v24, cf);
                    v22 = 0;
                    v17 = v24;
                    re::VideoObject<re::VideoFigDataChannelResourceBase>::setRef(&v22, v24);
                    v23 = 0;
                    re::VideoAssetResourceData::create((uint64_t)buf, (uint64_t)&v22, v9, 3);
                    v19 = *(_QWORD *)buf;
                    std::__variant_detail::__assignment<std::__variant_detail::__traits<re::VideoObject<re::VideoFigDataChannelResourceBase>,re::VideoAssetContentInfo>>::__generic_assign[abi:nn180100]<std::__variant_detail::__move_assignment<std::__variant_detail::__traits<re::VideoObject<re::VideoFigDataChannelResourceBase>,re::VideoAssetContentInfo>,(std::__variant_detail::_Trait)1>>((uint64_t)&v20, (uint64_t)&buf[8]);
                    if (v28 != -1)
                      ((void (*)(char *, _BYTE *))off_24ED38388[v28])(&v26, &buf[8]);
                    v18 = a2 + 248;
                    v28 = -1;
                    if (v23 != -1)
                      ((void (*)(char *, const void **))off_24ED38388[v23])(&v26, &v22);
                    if (v17)
                      re::VideoObjectBase<re::VideoFigDataChannelResourceBase,OpaqueFigDataChannelResource *>::release(v17);
                    re::VideoAssetResourceContext::pushResourceData(v18, &v19);
                  }
LABEL_11:
                  if (v21 != -1)
                    ((void (*)(_BYTE *, uint64_t *))off_24ED38388[v21])(buf, &v20);
                  goto LABEL_13;
                }
                *(_DWORD *)buf = 134217984;
                *(_QWORD *)&buf[4] = cf;
                _os_log_impl(&dword_224FE9000, v15, OS_LOG_TYPE_DEFAULT, "Received resource(%p) state as kFigDataChannelResourceState_NotNeeded", buf, 0xCu);
                break;
              case 2:
                v16 = *re::assetTypesLogObjects(v12);
                if (os_log_type_enabled(v16, OS_LOG_TYPE_ERROR))
                {
                  *(_DWORD *)buf = 134217984;
                  *(_QWORD *)&buf[4] = cf;
                  _os_log_error_impl(&dword_224FE9000, v16, OS_LOG_TYPE_ERROR, "Received resource(%p) state as kFigDataChannelResourceState_FailedToLoad", buf, 0xCu);
                }
                break;
              case 1:
                v13 = *re::assetTypesLogObjects(v12);
                if (os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT))
                {
                  *(_DWORD *)buf = 134217984;
                  *(_QWORD *)&buf[4] = cf;
                  _os_log_impl(&dword_224FE9000, v13, OS_LOG_TYPE_DEFAULT, "Received resource(%p) state as kFigDataChannelResourceState_Ready", buf, 0xCu);
                }
                v14 = 1;
                goto LABEL_28;
            }
          }
          v14 = 0;
          goto LABEL_28;
        }
      }
      else
      {
        v8 = -12782;
      }
      v10 = *re::assetTypesLogObjects(VTable);
      if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 67109120;
        *(_DWORD *)&buf[4] = v8;
        _os_log_error_impl(&dword_224FE9000, v10, OS_LOG_TYPE_ERROR, "Error occured while getting a description fig tags of a resource - %d", buf, 8u);
      }
      goto LABEL_11;
    }
  }
}

void sub_22535CC48(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, int a11, int a12, char a13, int a14, int a15, uint64_t a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,char a22,uint64_t a23,int a24)
{
  const void *v24;
  uint64_t v25;
  const void *v26;

  if (a24 != -1)
    ((void (*)(char *, uint64_t))off_24ED38388[a24])(&a21, v25);
  a24 = -1;
  if (a15 != -1)
    ((void (*)(char *, char *))off_24ED38388[a15])(&a21, &a13);
  if (v26)
    re::VideoObjectBase<re::VideoFigDataChannelResourceBase,OpaqueFigDataChannelResource *>::release(v26);
  if (a11 != -1)
    ((void (*)(char *, uint64_t *))off_24ED38388[a11])(&a22, &a10);
  re::VideoObjectBase<re::VideoFigDataChannelResourceBase,OpaqueFigDataChannelResource *>::release(v24);
  _Unwind_Resume(a1);
}

uint64_t std::__variant_detail::__assignment<std::__variant_detail::__traits<re::VideoObject<re::VideoFigDataChannelResourceBase>,re::VideoAssetContentInfo>>::__generic_assign[abi:nn180100]<std::__variant_detail::__move_assignment<std::__variant_detail::__traits<re::VideoObject<re::VideoFigDataChannelResourceBase>,re::VideoAssetContentInfo>,(std::__variant_detail::_Trait)1>>(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char v6;

  v2 = result;
  v3 = *(unsigned int *)(result + 8);
  v4 = *(unsigned int *)(a2 + 8);
  if ((_DWORD)v3 == -1)
  {
    if ((_DWORD)v4 == -1)
      return result;
  }
  else if ((_DWORD)v4 == -1)
  {
    result = ((uint64_t (*)(char *, uint64_t, uint64_t))off_24ED38388[v3])(&v6, result, a2);
    *(_DWORD *)(v2 + 8) = -1;
    return result;
  }
  v5 = result;
  return ((uint64_t (*)(uint64_t *, uint64_t, uint64_t))off_24ED383B8[v4])(&v5, result, a2);
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0ELm0EEE10__dispatchB8nn180100IOZNS0_12__assignmentINS0_8__traitsIJN2re11VideoObjectINS8_31VideoFigDataChannelResourceBaseEEENS8_21VideoAssetContentInfoEEEEE16__generic_assignB8nn180100INS0_17__move_assignmentISD_LNS0_6_TraitE1EEEEEvOT_EUlRSJ_OT0_E_JRNS0_6__baseILSH_1EJSB_SC_EEEOSR_EEEDcSJ_DpT0_(uint64_t result, _QWORD *a2, _QWORD *a3)
{
  uint64_t v4;
  uint64_t v5;
  char v6;

  v4 = *(_QWORD *)result;
  v5 = *(unsigned int *)(*(_QWORD *)result + 8);
  if ((_DWORD)v5 != -1)
  {
    if (!(_DWORD)v5)
    {
      *a2 = *a3;
      *a3 = 0;
      return result;
    }
    result = ((uint64_t (*)(char *, uint64_t))off_24ED38388[v5])(&v6, v4);
  }
  *(_QWORD *)v4 = 0;
  *(_QWORD *)v4 = *a3;
  *a3 = 0;
  *(_DWORD *)(v4 + 8) = 0;
  return result;
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1ELm1EEE10__dispatchB8nn180100IOZNS0_12__assignmentINS0_8__traitsIJN2re11VideoObjectINS8_31VideoFigDataChannelResourceBaseEEENS8_21VideoAssetContentInfoEEEEE16__generic_assignB8nn180100INS0_17__move_assignmentISD_LNS0_6_TraitE1EEEEEvOT_EUlRSJ_OT0_E_JRNS0_6__baseILSH_1EJSB_SC_EEEOSR_EEEDcSJ_DpT0_(uint64_t result, uint64_t a2, __int16 *a3)
{
  uint64_t v4;
  uint64_t v5;
  __int16 v6;
  __int16 v7;
  char v8;

  v4 = *(_QWORD *)result;
  v5 = *(unsigned int *)(*(_QWORD *)result + 8);
  if ((_DWORD)v5 != -1)
  {
    if ((_DWORD)v5 == 1)
    {
      v6 = *a3;
      *(_BYTE *)(a2 + 2) = *((_BYTE *)a3 + 2);
      *(_WORD *)a2 = v6;
      return result;
    }
    result = ((uint64_t (*)(char *, uint64_t))off_24ED38388[v5])(&v8, v4);
  }
  *(_DWORD *)(v4 + 8) = -1;
  v7 = *a3;
  *(_BYTE *)(v4 + 2) = *((_BYTE *)a3 + 2);
  *(_WORD *)v4 = v7;
  *(_DWORD *)(v4 + 8) = 1;
  return result;
}

double re::HashTable<re::VideoASEConfigurationKey,re::VideoASEProcessor::Entry,re::Hash<re::VideoASEConfigurationKey>,re::EqualTo<re::VideoASEConfigurationKey>,true,false>::deinit(uint64_t *a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t i;
  uint64_t v6;
  int v7;
  double result;

  v2 = *a1;
  if (v2)
  {
    v3 = *((unsigned int *)a1 + 8);
    if ((_DWORD)v3)
    {
      v4 = 0;
      for (i = 0; i < v3; ++i)
      {
        v6 = a1[2] + v4;
        v7 = *(_DWORD *)(v6 + 8);
        if (v7 < 0)
        {
          *(_DWORD *)(v6 + 8) = v7 & 0x7FFFFFFF;

          v3 = *((unsigned int *)a1 + 8);
        }
        v4 += 48;
      }
      v2 = *a1;
    }
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v2 + 40))(v2, a1[1]);
    *((_DWORD *)a1 + 8) = 0;
    *(_OWORD *)a1 = 0u;
    *((_OWORD *)a1 + 1) = 0u;
    *(_QWORD *)&result = 0x7FFFFFFFLL;
    *(uint64_t *)((char *)a1 + 36) = 0x7FFFFFFFLL;
  }
  return result;
}

void re::DynamicInlineArray<re::VideoObject<re::VideoFigDataChannelResourceBase>,5ul>::clear(uint64_t a1)
{
  const void **v2;
  uint64_t v3;

  v2 = (const void **)(a1 + 16);
  if (*(_QWORD *)a1)
  {
    v3 = 8 * *(_QWORD *)a1;
    do
    {
      if (*v2)
        re::VideoObjectBase<re::VideoFigDataChannelResourceBase,OpaqueFigDataChannelResource *>::release(*v2);
      *v2++ = 0;
      v3 -= 8;
    }
    while (v3);
  }
  *(_QWORD *)a1 = 0;
  ++*(_DWORD *)(a1 + 8);
}

uint64_t *re::ShaderGraphAsset::assetType(re::ShaderGraphAsset *this)
{
  unsigned __int8 v1;

  {
    re::ShaderGraphAsset::assetType(void)::type = (uint64_t)"ShaderGraph";
    qword_2558276B8 = 0;
    re::AssetType::generateCompiledExtension((re::AssetType *)&re::ShaderGraphAsset::assetType(void)::type);
  }
  return &re::ShaderGraphAsset::assetType(void)::type;
}

uint64_t re::ShaderGraphAsset::ShaderGraphAsset(uint64_t a1, id *a2, uint64_t a3)
{
  re::DynamicString *v6;
  uint64_t v8;
  char v9;

  *(_QWORD *)a1 = &off_24ED383D8;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 8) = 0u;
  v6 = (re::DynamicString *)(a1 + 8);
  re::DynamicString::setCapacity(v6, 0);
  *(_QWORD *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 48) = 0;
  re::ObjCObject::operator=((id *)(a1 + 40), a2);
  re::DynamicString::format((re::DynamicString *)"shadergraph_%s", (re::DynamicString *)&v8, a3);
  re::DynamicString::operator=(v6, (re::DynamicString *)&v8);
  if (v8 && (v9 & 1) != 0)
    (*(void (**)(void))(*(_QWORD *)v8 + 40))();
  return a1;
}

double re::ShaderGraphAsset::getCustomUniformsArgument@<D0>(re::ShaderGraphAsset *this@<X0>, uint64_t a2@<X8>)
{
  StringID *v2;
  double result;

  v2 = (StringID *)*((_QWORD *)this + 6);
  if (v2)
  {
    re::sg::CachedCompilationMaterial::getCustomUniformsArgument(v2, a2);
  }
  else
  {
    *(_QWORD *)a2 = 0;
    *(_QWORD *)(a2 + 8) = &str_110;
    *(_WORD *)(a2 + 16) = 0;
    result = 0.0;
    *(_OWORD *)(a2 + 24) = 0u;
    *(_OWORD *)(a2 + 40) = 0u;
    *(_OWORD *)(a2 + 56) = 0u;
    *(_OWORD *)(a2 + 88) = 0u;
    *(_OWORD *)(a2 + 72) = 0u;
    *(_DWORD *)(a2 + 32) = 1;
    *(_QWORD *)(a2 + 48) = &str_110;
    *(_WORD *)(a2 + 60) = 0;
    *(_WORD *)(a2 + 100) = 256;
    *(_QWORD *)(a2 + 64) = 0;
    *(_QWORD *)(a2 + 72) = 0;
    *(_QWORD *)(a2 + 80) = 0;
    *(_QWORD *)(a2 + 85) = 0;
    *(_BYTE *)(a2 + 104) = 0;
  }
  return result;
}

void re::ShaderGraphAssetLoader::init(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  const char *v6;
  uint64_t v7;
  BOOL v8;
  BOOL v9;
  char v10;
  _QWORD v11[5];
  char v12[2];

  v4 = re::ServiceLocator::serviceOrNull<re::RenderManager>(a2);
  v5 = re::ServiceLocator::serviceOrNull<re::ResourceFetchService>(a2);
  v7 = re::ServiceLocator::serviceOrNull<re::ResourceSharingService>(a2);
  if (v4)
    v8 = *(_QWORD *)(v4 + 184) != 0;
  else
    v8 = 0;
  *(_BYTE *)(a1 + 8) = v8;
  re::Defaults::BOOLValue((re::Defaults *)"decodeShaderGraphViaXPC", v6, v12);
  if (v12[0])
    v9 = v12[1] == 0;
  else
    v9 = 0;
  v10 = v9;
  if (v5)
  {
    v11[0] = MEMORY[0x24BDAC760];
    v11[1] = 3221225472;
    v11[2] = ___ZN2re22ShaderGraphAssetLoader4initERNS_14ServiceLocatorE_block_invoke;
    v11[3] = &__block_descriptor_40_e120__Result_re::Data__re::WrappedError__B____WrappedError____Data_____24__0_Data___8___v__Q_SharedPtr_re::SharedObject____16l;
    v11[4] = a1;
    (*(void (**)(uint64_t, _QWORD *))(*(_QWORD *)v5 + 168))(v5, v11);
    if ((v10 & 1) == 0)
      *(_QWORD *)(a1 + 24) = v5;
  }
  else if ((v10 & 1) == 0)
  {
    *(_QWORD *)(a1 + 16) = v7;
  }
}

uint64_t re::ServiceLocator::serviceOrNull<re::ResourceSharingService>(uint64_t a1)
{
  unsigned __int8 v2;
  uint64_t v3;
  uint64_t v4;
  _BYTE v6[16];

  if ((v2 & 1) == 0
  {
    re::introspect<re::ResourceSharingService>(void)::info = re::introspect_ResourceSharingService(0);
  }
  v3 = re::introspect<re::ResourceSharingService>(void)::info;
  re::StringID::invalid((re::StringID *)v6);
  v4 = (*(uint64_t (**)(uint64_t, uint64_t, _BYTE *))(*(_QWORD *)a1 + 16))(a1, v3, v6);
  re::StringID::destroyString((re::StringID *)v6);
  return v4;
}

void sub_22535D280(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  re::StringID::destroyString((re::StringID *)&a9);
  _Unwind_Resume(a1);
}

void ___ZN2re22ShaderGraphAssetLoader4initERNS_14ServiceLocatorE_block_invoke(id *a1@<X1>, void *a2@<X2>, uint64_t a3@<X8>)
{
  id v5;
  id v6;
  void (**v7)(id, unint64_t, re::sg::CachedCompilationMaterial **);
  id v8;
  id v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  void *v13;
  id v14;
  void *v15;
  id v16;
  id v17;
  char *v18;
  __CFData *v19;
  re::sg::CachedCompilationMaterial *v20;
  _BOOL4 v21;
  BOOL v22;
  __CFData *v23;
  re::sg::CachedCompilationMaterial *v24;
  re::sg::CachedCompilationMaterial *v25;
  id v26;
  id v27[3];

  v27[2] = *(id *)MEMORY[0x24BDAC8D0];
  v5 = a2;
  v6 = *a1;
  v7 = (void (**)(id, unint64_t, re::sg::CachedCompilationMaterial **))v5;
  v8 = objc_retainAutorelease(v6);
  if (objc_msgSend(v8, "bytes")
    && (v9 = objc_retainAutorelease(v8), v10 = objc_msgSend(v9, "bytes"), (v11 = objc_msgSend(v9, "length")) != 0))
  {
    MurmurHash3_x64_128(v10, v11, 0, (unint64_t *)v27);
    v12 = ((uint64_t)v27[1] + 64 * (uint64_t)v27[0] + ((unint64_t)v27[0] >> 2) - 0x61C8864680B583E9) ^ (uint64_t)v27[0];
  }
  else
  {
    v12 = 0;
  }
  v13 = (void *)MEMORY[0x24BE8F630];
  v14 = v8;
  v26 = 0;
  objc_msgSend(v13, "materialWithArchiveData:error:", v14, &v26);
  v15 = (void *)objc_claimAutoreleasedReturnValue();
  v16 = v26;
  v17 = v15;
  v27[0] = v17;

  if (v16)
    goto LABEL_17;
  re::make::shared::object<re::sg::CachedCompilationMaterial,re::sg::Material &>((re *)&v25, v27);
  if (v7)
  {
    v24 = v25;
    if (v25)
      v18 = (char *)v25 + 8;
    v7[2](v7, v12, &v24);
    if (v24)
    {

      v24 = 0;
    }
  }
  objc_msgSend(MEMORY[0x24BDBCEC8], "dataWithLength:", 1024, v24);
  v19 = (__CFData *)objc_claimAutoreleasedReturnValue();
  v20 = v25;
  v21 = re::sg::CachedCompilationMaterial::encode((StringID *)v25, v19);
  v22 = v21;
  if (v21)
  {
    v23 = v19;
    *(_BYTE *)a3 = 1;
    *(_QWORD *)(a3 + 8) = v23;
    v16 = 0;
  }
  else
  {
    objc_msgSend(MEMORY[0x24BDD1540], "errorWithDomain:code:userInfo:", CFSTR("Encoding Failure"), 0, 0);
    v16 = (id)objc_claimAutoreleasedReturnValue();
  }

  if (v20)
  if (!v22)
  {
LABEL_17:
    v16 = v16;
    *(_BYTE *)a3 = 0;
    *(_QWORD *)(a3 + 8) = v16;
    v17 = v27[0];
  }

}

void sub_22535D4DC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  uint64_t v4;
  void *v5;

  if (v4)
  _Unwind_Resume(a1);
}

uint64_t re::ShaderGraphAssetLoader::registerAsset(uint64_t a1, uint64_t a2)
{
  if (*(_BYTE *)(a1 + 8) && !*(_QWORD *)(a2 + 48))
    return 2;
  else
    return 0;
}

uint64_t re::ShaderGraphAssetLoader::serializeAssetBlob(uint64_t a1, uint64_t a2, uint64_t a3)
{
  id v5;
  re *v6;
  id v7;
  const UInt8 *BytePtr;
  id v9;
  NSObject *v10;
  uint8_t v12[16];

  v5 = *(id *)(a3 + 40);

  if (v5)
  {
    v7 = *(id *)(a3 + 40);

    if (v7)
    {
      BytePtr = CFDataGetBytePtr((CFDataRef)v7);
      v9 = *(id *)(a3 + 40);
      (*(void (**)(uint64_t, const UInt8 *, uint64_t))(*(_QWORD *)a2 + 16))(a2, BytePtr, objc_msgSend(v9, "length"));

    }
  }
  else
  {
    v10 = *re::assetTypesLogObjects(v6);
    if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)v12 = 0;
      _os_log_impl(&dword_224FE9000, v10, OS_LOG_TYPE_DEFAULT, "Serializing ShaderGraphAsset but no data to serialize (Data.isValid() returned false)", v12, 2u);
    }
  }
  return 1;
}

void sub_22535D650(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t re::ShaderGraphAssetLoader::createRuntimeData(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  id v7;
  NSObject *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  re *v12;
  re *v13;
  uint64_t *v14;
  StringID *v15;
  uint64_t v16;
  unsigned __int8 *v17;
  NSObject *v18;
  int v19;
  re *v20;
  NSObject *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  id v26;
  void *v27;
  id v28;
  id v29;
  re *v30;
  uint64_t v31;
  NSObject *v32;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  void *v38;
  __CFString *v39;
  id v40;
  _QWORD v41[5];
  id v42;
  id v43;
  id v44;
  uint64_t v45;
  re::Data *v46;
  const void *v47;
  int v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  int v52;
  uint64_t v53;
  _BYTE buf[22];
  _BYTE v55[24];
  _QWORD v56[8];

  v56[7] = *MEMORY[0x24BDAC8D0];
  v53 = 0;
  v50 = 0;
  v51 = 0;
  v49 = 0;
  v52 = 0;
  v46 = 0;
  v47 = 0;
  v45 = a3;
  v48 = 0;
  if (re::SeekableInputStreamBufferedReader::readNext((re::SeekableInputStreamBufferedReader *)&v45, 0xFFFFFFFFFFFFFFFFLL))
  {
    re::Data::makeDataWithBytes(v46, v47, buf);
    re::ObjCObject::operator=((id *)(a2 + 40), (id *)buf);

  }
  v7 = *(id *)(a2 + 40);
  v44 = v7;
  if (!v7)
    goto LABEL_47;
  if (!*(_BYTE *)(a1 + 8))
  {
    v8 = *re::assetsLogObjects((re *)v7);
    v9 = 1;
    if (os_log_type_enabled(v8, OS_LOG_TYPE_INFO))
    {
      if ((*(_BYTE *)(a2 + 16) & 1) != 0)
        v10 = *(_QWORD *)(a2 + 24);
      else
        v10 = a2 + 17;
      *(_DWORD *)buf = 136315138;
      *(_QWORD *)&buf[4] = v10;
      _os_log_impl(&dword_224FE9000, v8, OS_LOG_TYPE_INFO, "Bypassing shader graph material creation for asset (%s) because there's no render device available", buf, 0xCu);
    }
    goto LABEL_48;
  }
  if (a4)
  {
    a4 = re::HashTable<re::DynamicString,re::DynamicArray<re::ResourceFetchManager::Request *>,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::tryGet(a4, (uint64_t)buf);
    if (*(_QWORD *)buf && (buf[8] & 1) != 0)
      (*(void (**)(void))(**(_QWORD **)buf + 40))();
    if (a4)
    {
      if (*(_DWORD *)(a4 + 32) == 2)
        a4 = *(_QWORD *)a4;
      else
        a4 = 0;
    }
  }
  v11 = *(_QWORD *)(a1 + 16);
  if (v11)
  {
    v12 = (re *)(*(_QWORD *(**)(id *__return_ptr, uint64_t, id *))(*(_QWORD *)v11 + 48))(&v42, v11, &v44);
    if (!(_BYTE)v42)
    {
      v18 = (id)*re::assetsLogObjects(v12);
      if (os_log_type_enabled(v18, OS_LOG_TYPE_ERROR))
      {
        if ((*(_BYTE *)(a2 + 16) & 1) != 0)
          v34 = *(_QWORD *)(a2 + 24);
        else
          v34 = a2 + 17;
        v35 = re::WrappedError::localizedDescription(&v43);
        *(_DWORD *)buf = 136315394;
        *(_QWORD *)&buf[4] = v34;
        *(_WORD *)&buf[12] = 2080;
        *(_QWORD *)&buf[14] = v35;
        _os_log_error_impl(&dword_224FE9000, v18, OS_LOG_TYPE_ERROR, "Error while decoding %s via XPC: %s", buf, 0x16u);
      }

      goto LABEL_29;
    }
    v13 = (re *)v43;
    v14 = re::globalAllocators(v13);
    v15 = (StringID *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v14[2] + 32))(v14[2], 248, 8);
    *(_QWORD *)buf = v44;
    re::sg::CachedCompilationMaterial::CachedCompilationMaterial((uint64_t)v15, v13, (id *)buf);

    v16 = *(_QWORD *)(a2 + 48);
    *(_QWORD *)(a2 + 48) = v15;
    if (v16)
    {

      v15 = *(StringID **)(a2 + 48);
    }
    re::sg::CachedCompilationMaterial::getCustomUniformsArgument(v15, (uint64_t)buf);
    if (*(_QWORD *)buf < 0xFFFFFFFFFFFFFFFELL || (buf[0] & 1) != 0)
    {
      if (*(_QWORD *)buf > 1uLL || (v17 = *(unsigned __int8 **)&buf[8]) == 0)
      {
        re::FixedArray<re::MetalTypeInfo>::deinit(v56);
        re::StringID::destroyString((re::StringID *)v55);
        re::StringID::destroyString((re::StringID *)buf);
        goto LABEL_46;
      }
    }
    else
    {
      v17 = *(unsigned __int8 **)&buf[8];
    }
    v19 = *v17;
    re::FixedArray<re::MetalTypeInfo>::deinit(v56);
    re::StringID::destroyString((re::StringID *)v55);
    re::StringID::destroyString((re::StringID *)buf);
    if (!v19)
    {
      v21 = *re::assetsLogObjects(v20);
      if (os_log_type_enabled(v21, OS_LOG_TYPE_ERROR))
      {
        if ((*(_BYTE *)(a2 + 16) & 1) != 0)
          v36 = *(_QWORD *)(a2 + 24);
        else
          v36 = a2 + 17;
        *(_DWORD *)buf = 136315138;
        *(_QWORD *)&buf[4] = v36;
        _os_log_error_impl(&dword_224FE9000, v21, OS_LOG_TYPE_ERROR, "Error creating CachedCompilationMaterial %s", buf, 0xCu);
      }
LABEL_29:

      goto LABEL_30;
    }
LABEL_46:

LABEL_47:
    v9 = 1;
    goto LABEL_48;
  }
LABEL_30:
  if (objc_msgSend(objc_retainAutorelease(v44), "bytes")
    && (v22 = objc_msgSend(objc_retainAutorelease(v44), "bytes"), (v23 = objc_msgSend(v44, "length")) != 0))
  {
    MurmurHash3_x64_128(v22, v23, 0, (unint64_t *)buf);
    v24 = (*(_QWORD *)&buf[8] + (*(_QWORD *)buf << 6) + (*(_QWORD *)buf >> 2) - 0x61C8864680B583E9) ^ *(_QWORD *)buf;
  }
  else
  {
    v24 = 0;
  }
  v25 = *(_QWORD *)(a1 + 24);
  if (v25)
  {
    v41[0] = MEMORY[0x24BDAC760];
    v41[1] = 3221225472;
    v41[2] = ___ZNK2re22ShaderGraphAssetLoader17createRuntimeDataEPvPNS_19SeekableInputStreamEPKNS_9HashTableINS_13DynamicStringENSt3__17variantIJS5_NS_4DataEmEEENS_4HashIS5_EENS_7EqualToIS5_EELb1ELb0EEE_block_invoke;
    v41[3] = &__block_descriptor_40_e62_v16__0__SharedObject_____ArcRefCount__isa_t__v____Allocator__8l;
    v41[4] = a2;
    (*(void (**)(uint64_t, uint64_t, uint64_t, _QWORD *))(*(_QWORD *)v25 + 176))(v25, a4, v24, v41);
  }
  if (*(_QWORD *)(a2 + 48))
    goto LABEL_47;
  v26 = v44;
  v40 = 0;
  objc_msgSend(MEMORY[0x24BE8F630], "materialWithArchiveData:error:", v26, &v40);
  v27 = (void *)objc_claimAutoreleasedReturnValue();
  v28 = v40;
  v29 = v27;
  v42 = v29;

  if (v29)
  {
    re::make::shared::object<re::sg::CachedCompilationMaterial,re::sg::Material &>((re *)buf, &v42);
    v31 = *(_QWORD *)(a2 + 48);
    *(_QWORD *)(a2 + 48) = *(_QWORD *)buf;
    if (v31)

    goto LABEL_47;
  }
  v32 = (id)*re::assetsLogObjects(v30);
  if (os_log_type_enabled(v32, OS_LOG_TYPE_ERROR))
  {
    if ((*(_BYTE *)(a2 + 16) & 1) != 0)
      v37 = *(_QWORD *)(a2 + 24);
    else
      v37 = a2 + 17;
    objc_msgSend(v28, "debugDescription");
    v38 = (void *)objc_claimAutoreleasedReturnValue();
    if (v38)
    {
      objc_msgSend(v28, "debugDescription");
      v39 = (__CFString *)objc_claimAutoreleasedReturnValue();
    }
    else
    {
      v39 = CFSTR("<nil>");
    }
    *(_DWORD *)buf = 136315394;
    *(_QWORD *)&buf[4] = v37;
    *(_WORD *)&buf[12] = 2112;
    *(_QWORD *)&buf[14] = v39;
    _os_log_error_impl(&dword_224FE9000, v32, OS_LOG_TYPE_ERROR, "Failed to create shader graph material for asset (%s). Error: %@", buf, 0x16u);
    if (v38)

  }
  v9 = 0;
LABEL_48:

  re::SeekableInputStreamBufferedReader::~SeekableInputStreamBufferedReader((re::SeekableInputStreamBufferedReader *)&v45);
  return v9;
}

void sub_22535DC30(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, ...)
{
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  va_list va;

  va_start(va, a10);
  v15 = v10;

  re::SeekableInputStreamBufferedReader::~SeekableInputStreamBufferedReader((re::SeekableInputStreamBufferedReader *)va);
  _Unwind_Resume(a1);
}

void ___ZNK2re22ShaderGraphAssetLoader17createRuntimeDataEPvPNS_19SeekableInputStreamEPKNS_9HashTableINS_13DynamicStringENSt3__17variantIJS5_NS_4DataEmEEENS_4HashIS5_EENS_7EqualToIS5_EELb1ELb0EEE_block_invoke(uint64_t a1, uint64_t a2)
{
  id v4;
  uint64_t v5;
  uint64_t v6;

  if (a2)
    v4 = (id)(a2 + 8);
  v5 = *(_QWORD *)(a1 + 32);
  v6 = *(_QWORD *)(v5 + 48);
  *(_QWORD *)(v5 + 48) = a2;
  if (v6)

}

re *re::ShaderGraphAssetLoader::unloadAsset(re *this, void (***a2)(_QWORD))
{
  uint64_t v3;

  if (a2)
  {
    v3 = re::globalAllocators(this)[2];
    (**a2)(a2);
    return (re *)(*(uint64_t (**)(uint64_t, void (***)(_QWORD)))(*(_QWORD *)v3 + 40))(v3, a2);
  }
  return this;
}

uint64_t re::ShaderGraphAssetLoader::isSupportedSourceExtension(re::ShaderGraphAssetLoader *this, const char *a2)
{
  return 0;
}

void re::ShaderGraphAssetLoader::findDependencies(uint64_t a1@<X8>)
{
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)a1 = 0;
  *(_DWORD *)(a1 + 24) = 0;
}

uint64_t re::ShaderGraphAssetLoader::introspectionType(re::ShaderGraphAssetLoader *this)
{
  unsigned __int8 v1;

  v1 = atomic_load((unsigned __int8 *)&qword_254100978);
  if ((v1 & 1) == 0 && __cxa_guard_acquire(&qword_254100978))
  {
    qword_254100970 = re::internal::getOrCreateInfo((re::internal *)"ShaderGraphAsset", (uint64_t (*)(re::internal *))re::allocInfo_ShaderGraphAsset, (re::IntrospectionBase *(*)(void))re::initInfo_ShaderGraphAsset, (void (*)(re::IntrospectionBase *))&unk_254100968, 0);
    __cxa_guard_release(&qword_254100978);
  }
  return qword_254100970;
}

uint64_t re::ShaderGraphAssetLoader::allocateSampleAsset(re::ShaderGraphAssetLoader *this)
{
  uint64_t *v1;
  uint64_t v2;
  id v4;

  v1 = re::globalAllocators(this);
  v2 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v1[2] + 32))(v1[2], 56, 8);
  v4 = 0;
  re::ShaderGraphAsset::ShaderGraphAsset(v2, &v4, (uint64_t)"SampleAsset");

  return v2;
}

void sub_22535DE64(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{

  _Unwind_Resume(a1);
}

uint64_t *re::allocInfo_ShaderGraphAsset(re *this)
{
  unsigned __int8 v1;

  v1 = atomic_load((unsigned __int8 *)&_MergedGlobals_84);
  if ((v1 & 1) == 0 && __cxa_guard_acquire(&_MergedGlobals_84))
  {
    ArcSharedObject::ArcSharedObject((ArcSharedObject *)&qword_254100980, 0);
    *(uint64_t *)((char *)&qword_254100990 + 6) = 0;
    qword_254100990 = 0;
    qword_2541009A0 = 0;
    qword_2541009A8 = 0xFFFFFFFFLL;
    qword_254100980 = (uint64_t)&off_24ED7DAA8;
    qword_2541009B0 = (uint64_t)"ShaderGraphAsset";
    dword_2541009B8 = 0;
    xmmword_2541009C0 = 0u;
    unk_2541009D0 = 0u;
    xmmword_2541009E0 = 0u;
    qword_2541009F0 = 0;
    __cxa_guard_release(&_MergedGlobals_84);
  }
  return &qword_254100980;
}

void re::initInfo_ShaderGraphAsset(re *this, re::IntrospectionBase *a2)
{
  const re::IntrospectionBase *v3;
  unsigned __int8 v4;
  re *v5;
  uint64_t *v6;
  const re::IntrospectionBase *v7;
  void *v8;
  uint64_t v9;
  __int128 v10;
  _QWORD v11[2];
  __int128 v12;

  v11[0] = 0xBA2EB1656F73304ELL;
  v11[1] = "ShaderGraphAsset";
  re::StringID::destroyString((re::StringID *)v11);
  *((_OWORD *)this + 2) = v12;
  v4 = atomic_load((unsigned __int8 *)&qword_254100960);
  if ((v4 & 1) == 0)
  {
    v5 = (re *)__cxa_guard_acquire(&qword_254100960);
    if ((_DWORD)v5)
    {
      v6 = re::introspectionAllocator(v5);
      v8 = re::IntrospectionInfo<re::DynamicString>::get(1, v7);
      v9 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v6 + 32))(v6, 72, 8);
      *(_DWORD *)v9 = 1;
      *(_QWORD *)(v9 + 8) = "graphIdentifier";
      *(_QWORD *)(v9 + 16) = v8;
      *(_QWORD *)(v9 + 24) = 0;
      *(_QWORD *)(v9 + 32) = 0x800000001;
      *(_DWORD *)(v9 + 40) = 0;
      *(_QWORD *)(v9 + 48) = 0;
      *(_QWORD *)(v9 + 56) = 0;
      *(_DWORD *)(v9 + 64) = 0;
      qword_254100958 = v9;
      __cxa_guard_release(&qword_254100960);
    }
  }
  *((_QWORD *)this + 2) = 0x3800000008;
  *((_DWORD *)this + 6) = 8;
  *((_WORD *)this + 14) = 0;
  *((_DWORD *)this + 14) = 1;
  *((_QWORD *)this + 8) = &qword_254100958;
  *((_QWORD *)this + 9) = re::internal::defaultConstruct<re::ShaderGraphAsset>;
  *((_QWORD *)this + 10) = re::internal::defaultDestruct<re::ShaderGraphAsset>;
  *((_QWORD *)this + 11) = 0;
  *((_QWORD *)this + 12) = 0;
  *((_QWORD *)this + 13) = re::internal::defaultConstructV2<re::ShaderGraphAsset>;
  *((_QWORD *)this + 14) = re::internal::defaultDestructV2<re::ShaderGraphAsset>;
  re::IntrospectionRegistry::add(this, v3);
  v10 = v12;
}

void sub_22535E0DC(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254100960);
  _Unwind_Resume(a1);
}

_QWORD *re::internal::defaultConstruct<re::ShaderGraphAsset>(_anonymous_namespace_ *a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v4;
  _QWORD *result;

  *(_QWORD *)a3 = &off_24ED383D8;
  *(_OWORD *)(a3 + 24) = 0u;
  *(_OWORD *)(a3 + 8) = 0u;
  v4 = (_QWORD *)(a3 + 8);
  result = re::DynamicString::setCapacity(v4, 0);
  *(_QWORD *)(a3 + 40) = 0;
  *(_QWORD *)(a3 + 48) = 0;
  return result;
}

uint64_t re::internal::defaultDestruct<re::ShaderGraphAsset>(uint64_t a1, uint64_t a2, uint64_t (***a3)(_QWORD))
{
  return (**a3)(a3);
}

_QWORD *re::internal::defaultConstructV2<re::ShaderGraphAsset>(uint64_t a1)
{
  _QWORD *v2;
  _QWORD *result;

  *(_QWORD *)a1 = &off_24ED383D8;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 8) = 0u;
  v2 = (_QWORD *)(a1 + 8);
  result = re::DynamicString::setCapacity(v2, 0);
  *(_QWORD *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 48) = 0;
  return result;
}

uint64_t re::internal::defaultDestructV2<re::ShaderGraphAsset>(uint64_t (***a1)(_QWORD))
{
  return (**a1)(a1);
}

void re::ShaderGraphAssetLoader::~ShaderGraphAssetLoader(re::ShaderGraphAssetLoader *this)
{
  JUMPOUT(0x2276933B8);
}

void re::ShaderGraphAsset::~ShaderGraphAsset(re::ShaderGraphAsset *this)
{
  re::ShaderGraphAsset::~ShaderGraphAsset(this);
  JUMPOUT(0x2276933B8);
}

{
  uint64_t v2;
  uint64_t v3;

  *(_QWORD *)this = &off_24ED383D8;
  v2 = *((_QWORD *)this + 6);
  if (v2)
  {

    *((_QWORD *)this + 6) = 0;
  }

  v3 = *((_QWORD *)this + 1);
  if (v3)
  {
    if ((*((_BYTE *)this + 16) & 1) != 0)
      (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v3 + 40))(v3, *((_QWORD *)this + 3));
    *(_OWORD *)((char *)this + 8) = 0u;
    *(_OWORD *)((char *)this + 24) = 0u;
  }
}

void re::make::shared::object<re::sg::CachedCompilationMaterial,re::sg::Material &>(re *a1, id *a2)
{
  uint64_t *v4;
  uint64_t v5;
  id v6;

  v4 = re::globalAllocators(a1);
  v5 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v4[2] + 32))(v4[2], 248, 8);
  v6 = *a2;
  re::sg::CachedCompilationMaterial::CachedCompilationMaterial(v5, &v6);
  *(_QWORD *)a1 = v5;

}

void sub_22535E578(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_22535E6D0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_22535E868(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_22535E9E4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_22535EAB8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void re::VideoPayload::makeWithProperties(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, REVideoPayload **a6@<X8>, float a7@<S0>, double a8@<D1>, double a9@<D2>)
{
  REVideoPayload *v18;
  double v19;
  REVideoPayload *v20;

  v18 = [REVideoPayload alloc];
  *(float *)&v19 = a7;
  v20 = -[REVideoPayload initWithAudioInputMode:reverbSendLevel:diffuseSpillMapDimensions:specularSpillMapDimensions:diffuseSpillBlurSigma:specularSpillBlurSigma:desiredViewingMode:preventPlaybackUntilReady:](v18, "initWithAudioInputMode:reverbSendLevel:diffuseSpillMapDimensions:specularSpillMapDimensions:diffuseSpillBlurSigma:specularSpillBlurSigma:desiredViewingMode:preventPlaybackUntilReady:", a1, a2, a3, a4, a5, v19, a8, a9);
  *a6 = v20;

}

void re::VideoPayload::dynamicCast(id *this@<X0>, _QWORD *a2@<X8>)
{
  char isKindOfClass;
  void *v5;
  id v6;
  id v7;

  v7 = *this;
  objc_opt_class();
  isKindOfClass = objc_opt_isKindOfClass();
  v5 = v7;
  if ((isKindOfClass & 1) != 0)
  {
    v6 = v7;
    v5 = v7;
  }
  else
  {
    v6 = 0;
  }
  *a2 = v6;

}

void sub_22535EC2C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void re::VideoRequestOptions::makeWithReceiver(uint64_t *a1@<X0>, REVideoRequestOptions **a2@<X8>)
{
  uint64_t v3;
  re *VTable;
  uint64_t (*v5)(uint64_t, id *);
  int v6;
  REVideoRequestOptions *v7;
  REVideoRequestOptions *v8;
  NSObject *v9;
  id v10;
  uint8_t buf[4];
  int v12;
  uint64_t v13;

  v13 = *MEMORY[0x24BDAC8D0];
  v10 = 0;
  v3 = *a1;
  VTable = (re *)CMBaseObjectGetVTable();
  v5 = *(uint64_t (**)(uint64_t, id *))(*((_QWORD *)VTable + 2) + 8);
  if (v5)
  {
    VTable = (re *)v5(v3, &v10);
    v6 = (int)VTable;
    if (!(_DWORD)VTable)
    {
      v7 = [REVideoRequestOptions alloc];
      v8 = -[REVideoRequestOptions initWithReceiverEndpoint:](v7, "initWithReceiverEndpoint:", v10);
      *a2 = v8;

      goto LABEL_8;
    }
  }
  else
  {
    v6 = -12782;
  }
  v9 = *re::assetTypesLogObjects(VTable);
  if (os_log_type_enabled(v9, OS_LOG_TYPE_FAULT))
  {
    *(_DWORD *)buf = 67109120;
    v12 = v6;
    _os_log_fault_impl(&dword_224FE9000, v9, OS_LOG_TYPE_FAULT, "Failed to copy video receiver endpoint (error: %d)", buf, 8u);
  }
  *a2 = 0;
LABEL_8:

}

void sub_22535ED4C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{

  _Unwind_Resume(a1);
}

void re::VideoRequestOptions::dynamicCast(id *a1@<X0>, _QWORD *a2@<X8>)
{
  char isKindOfClass;
  void *v4;
  id v5;
  id v6;

  v6 = *a1;
  objc_opt_class();
  isKindOfClass = objc_opt_isKindOfClass();
  v4 = v6;
  if ((isKindOfClass & 1) != 0)
  {
    v5 = v6;
    v4 = v6;
  }
  else
  {
    v5 = 0;
  }
  *a2 = v5;

}

void sub_22535EDD0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void re::AssetHelper::registerDefaultAssetTypes(re::AssetManager *a1, uint64_t a2, __int16 a3)
{
  id *v6;
  const re::RenderManager *v7;
  uint64_t v8;
  re *v9;
  uint64_t *v10;
  re::MeshDeformationAsset *v11;
  uint64_t *v12;
  re *v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t (**v16)();
  uint64_t *v17;
  re *v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t (**v21)();
  uint64_t *v22;
  re *v23;
  uint64_t v24;
  uint64_t *v25;
  uint64_t (**v26)();
  uint64_t *v27;
  re *v28;
  uint64_t v29;
  uint64_t *v30;
  uint64_t (**v31)();
  uint64_t *v32;
  re::FontLayoutAsset *v33;
  uint64_t v34;
  uint64_t *v35;
  uint64_t *v36;
  uint64_t (**v37)();
  uint64_t (***v38)();
  uint64_t v39;
  uint64_t *v40;
  uint64_t *v41;
  uint64_t (**v42)();
  re::CGPerspectiveContextAsset *v43;
  uint64_t v44;
  uint64_t *v45;
  uint64_t *v46;
  uint64_t (**v47)();
  re *v48;
  uint64_t v49;
  uint64_t *v50;
  uint64_t (**v51)();
  uint64_t (**v52)();
  uint64_t *v53;
  re *v54;
  uint64_t v55;
  uint64_t *v56;
  re::VideoFileAsset *v57;
  uint64_t *v58;
  re *v59;
  uint64_t v60;
  uint64_t *v61;
  uint64_t (**v62)();
  uint64_t *v63;
  re::VertexCacheAsset *v64;
  uint64_t v65;
  uint64_t *v66;
  uint64_t *v67;
  uint64_t (**v68)();
  id v69;
  uint64_t (*v70)();
  uint64_t (***v71)();
  uint64_t v72;
  re *v73;
  uint64_t *v74;
  uint64_t (**v75)();
  uint64_t *v76;
  re *v77;
  uint64_t v78;
  uint64_t *v79;
  uint64_t (**v80)();
  re::ShaderGraphAsset *v81;
  uint64_t *v82;
  re *v83;
  uint64_t v84;
  uint64_t *v85;
  re::MaterialDefinitionAsset *v86;
  uint64_t *v87;
  re *v88;
  uint64_t v89;
  uint64_t *v90;
  uint64_t v91;
  uint64_t (**v92)();
  re::MaterialAsset *v93;
  uint64_t *v94;
  re *v95;
  uint64_t v96;
  uint64_t *v97;
  re::AssetProvider *v98;
  _BOOL8 v99;
  uint64_t *v100;
  _anonymous_namespace_ *v101;
  id v102;
  uint64_t *v103;
  uint64_t v104;
  char v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  re::TextureAsset *v109;
  uint64_t *v110;
  re *v111;
  uint64_t v112;
  uint64_t *v113;
  uint64_t v114;
  uint64_t v115;
  re::MeshAsset *v116;
  uint64_t *v117;
  re::CollisionShapeAsset *v118;
  uint64_t v119;
  uint64_t *v120;
  uint64_t *v121;
  uint64_t (**v122)();
  re::PhysicsMaterialAsset *v123;
  uint64_t v124;
  uint64_t *v125;
  uint64_t *v126;
  uint64_t (**v127)();
  re::IndexedTriangleMeshAsset *v128;
  uint64_t v129;
  uint64_t *v130;
  uint64_t *v131;
  uint64_t (**v132)();
  uint64_t (***v133)();
  uint64_t v134;
  uint64_t *v135;
  uint64_t *v136;
  uint64_t (**v137)();
  re::AnimationLibraryAsset *v138;
  uint64_t v139;
  uint64_t *v140;
  uint64_t *v141;
  uint64_t (**v142)();
  uint64_t (***v143)();
  uint64_t v144;
  uint64_t *v145;
  uint64_t *v146;
  uint64_t (**v147)();
  re::IKRigAsset *v148;
  uint64_t v149;
  uint64_t *v150;
  uint64_t *v151;
  uint64_t (**v152)();
  re::RigAsset *v153;
  uint64_t v154;
  uint64_t *v155;
  uint64_t *v156;
  uint64_t (**v157)();
  re::RigGraphAsset *v158;
  uint64_t v159;
  uint64_t *v160;
  uint64_t *v161;
  uint64_t (**v162)();
  re::BlendShapeWeightsDefinitionAsset *v163;
  uint64_t v164;
  uint64_t *v165;
  uint64_t *v166;
  uint64_t (**v167)();
  re::SkeletonAsset *v168;
  uint64_t v169;
  uint64_t *v170;
  uint64_t *v171;
  uint64_t (**v172)();
  re::SkeletalPoseDefinitionAsset *v173;
  uint64_t v174;
  uint64_t *v175;
  uint64_t *v176;
  uint64_t (**v177)();
  re::TimelineAsset *v178;
  uint64_t v179;
  uint64_t *v180;
  uint64_t *v181;
  uint64_t (**v182)();
  uint64_t (***v183)();
  uint64_t v184;
  uint64_t *v185;
  uint64_t *v186;
  uint64_t (**v187)();
  re::StateMachineAsset *v188;
  uint64_t v189;
  uint64_t *v190;
  uint64_t *v191;
  uint64_t (**v192)();
  re::StateParameterBlackboardAsset *v193;
  uint64_t v194;
  uint64_t *v195;
  uint64_t *v196;
  uint64_t (**v197)();
  uint64_t (***v198)();
  uint64_t v199;
  re::SceneAsset *v200;
  uint64_t *v201;
  uint64_t *v202;
  uint64_t (**v203)();
  uint64_t v204;
  uint64_t *v205;
  uint64_t v206;
  re *v207;
  uint64_t *v208;
  uint64_t (**v209)();
  uint64_t *v210;
  re::AudioFileGroupAsset *v211;
  uint64_t v212;
  uint64_t *v213;
  uint64_t *v214;
  uint64_t (**v215)();
  re *v216;
  uint64_t v217;
  uint64_t *v218;
  re::AudioGeneratorAsset *v219;
  uint64_t *v220;
  re *v221;
  uint64_t v222;
  uint64_t *v223;
  uint64_t (**v224)();
  uint64_t *v225;
  re::ARReferenceObjectAsset *v226;
  uint64_t v227;
  uint64_t *v228;
  uint64_t *v229;
  uint64_t (**v230)();
  uint64_t (***v231)();
  uint64_t v232;
  const char *v233;
  re::MaterialAssetLoader *v234;
  _anonymous_namespace_ *v235;
  re::AssetProvider *v236;
  void *v237;
  uint64_t *v238;
  uint64_t v239;
  uint64_t v240;
  id v241[4];
  re::MeshDeformationAsset *v242;
  _QWORD v243[4];
  uint64_t (**v244)();
  re *(*v245)(re *, re::AssetLoader *);
  uint64_t (***v246)();
  uint64_t (**v247)();
  uint64_t (**v248)();
  re *(*v249)(re *, re::AssetLoader *);
  uint64_t *v250;
  uint64_t (***v251)();
  uint64_t v252;

  v252 = *MEMORY[0x24BDAC8D0];
  v6 = (id *)re::ServiceLocator::serviceOrNull<re::RenderManager>(a2);
  v7 = (const re::RenderManager *)re::ServiceLocator::serviceOrNull<re::ColorManager>(a2);
  v8 = re::ServiceLocator::serviceOrNull<re::VideoService>(a2);
  re::ImportGraphicsContext::createFromAvailableManagers((re::ImportGraphicsContext *)v6, v7, (re::ImportGraphicsContext *)v241);
  v10 = re::globalAllocators(v9);
  v11 = (re::MeshDeformationAsset *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v10[2] + 32))(v10[2], 24, 8);
  *((_QWORD *)v11 + 1) = v6;
  *((_QWORD *)v11 + 2) = 0;
  *(_QWORD *)v11 = &off_24ED314E0;
  v12 = re::MeshDeformationAsset::assetType(v11);
  v247 = &off_24ED38B10;
  v250 = (uint64_t *)&v247;
  v243[3] = v243;
  v242 = v11;
  v243[0] = &off_24ED38B10;
  re::AssetManager::registerAssetType((uint64_t)a1, (char **)v12, (uint64_t *)&v242);
  std::unique_ptr<re::RigHierarchy,std::function<void ()(re::RigHierarchy*)>>::~unique_ptr[abi:nn180100]((uint64_t *)&v242);
  v13 = (re *)v250;
  if (v250 == (uint64_t *)&v247)
  {
    v14 = 4;
    v13 = (re *)&v247;
  }
  else
  {
    if (!v250)
      goto LABEL_6;
    v14 = 5;
  }
  v13 = (re *)(*(uint64_t (**)(void))(*(_QWORD *)v13 + 8 * v14))();
LABEL_6:
  v15 = re::globalAllocators(v13);
  v16 = (uint64_t (**)())(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v15[2] + 32))(v15[2], 16, 8);
  *v16 = (uint64_t (*)())&off_24ED306A8;
  v16[1] = (uint64_t (*)())a2;
  v17 = re::RenderGraphEmitterAsset::assetType((re::RenderGraphEmitterAsset *)v16);
  v244 = &off_24ED38B90;
  v245 = re::internal::AssetTypeRegistryHelper::deleter;
  v246 = &v244;
  v247 = v16;
  v248 = &off_24ED38B90;
  v251 = &v248;
  v249 = re::internal::AssetTypeRegistryHelper::deleter;
  re::AssetManager::registerAssetType((uint64_t)a1, (char **)v17, (uint64_t *)&v247);
  std::unique_ptr<re::RigHierarchy,std::function<void ()(re::RigHierarchy*)>>::~unique_ptr[abi:nn180100]((uint64_t *)&v247);
  v18 = (re *)v246;
  if (v246 == &v244)
  {
    v19 = 4;
    v18 = (re *)&v244;
  }
  else
  {
    if (!v246)
      goto LABEL_11;
    v19 = 5;
  }
  v18 = (re *)(*(uint64_t (**)(void))(*(_QWORD *)v18 + 8 * v19))();
LABEL_11:
  v20 = re::globalAllocators(v18);
  v21 = (uint64_t (**)())(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v20[2] + 32))(v20[2], 16, 8);
  *v21 = (uint64_t (*)())&off_24ED3CA08;
  v21[1] = (uint64_t (*)())a2;
  v22 = re::RenderGraphAsset::assetType((re::RenderGraphAsset *)v21);
  v244 = &off_24ED38B90;
  v245 = re::internal::AssetTypeRegistryHelper::deleter;
  v246 = &v244;
  v247 = v21;
  v248 = &off_24ED38B90;
  v251 = &v248;
  v249 = re::internal::AssetTypeRegistryHelper::deleter;
  re::AssetManager::registerAssetType((uint64_t)a1, (char **)v22, (uint64_t *)&v247);
  std::unique_ptr<re::RigHierarchy,std::function<void ()(re::RigHierarchy*)>>::~unique_ptr[abi:nn180100]((uint64_t *)&v247);
  v23 = (re *)v246;
  if (v246 == &v244)
  {
    v24 = 4;
    v23 = (re *)&v244;
  }
  else
  {
    if (!v246)
      goto LABEL_16;
    v24 = 5;
  }
  v23 = (re *)(*(uint64_t (**)(void))(*(_QWORD *)v23 + 8 * v24))();
LABEL_16:
  v25 = re::globalAllocators(v23);
  v26 = (uint64_t (**)())(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v25[2] + 32))(v25[2], 16, 8);
  *v26 = (uint64_t (*)())&off_24ED30F78;
  v26[1] = (uint64_t (*)())a2;
  v27 = re::FontAsset::assetType((re::FontAsset *)v26);
  v244 = &off_24ED38B90;
  v245 = re::internal::AssetTypeRegistryHelper::deleter;
  v246 = &v244;
  v247 = v26;
  v248 = &off_24ED38B90;
  v251 = &v248;
  v249 = re::internal::AssetTypeRegistryHelper::deleter;
  re::AssetManager::registerAssetType((uint64_t)a1, (char **)v27, (uint64_t *)&v247);
  std::unique_ptr<re::RigHierarchy,std::function<void ()(re::RigHierarchy*)>>::~unique_ptr[abi:nn180100]((uint64_t *)&v247);
  v28 = (re *)v246;
  if (v246 == &v244)
  {
    v29 = 4;
    v28 = (re *)&v244;
  }
  else
  {
    if (!v246)
      goto LABEL_21;
    v29 = 5;
  }
  v28 = (re *)(*(uint64_t (**)(void))(*(_QWORD *)v28 + 8 * v29))();
LABEL_21:
  v30 = re::globalAllocators(v28);
  v31 = (uint64_t (**)())(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v30[2] + 32))(v30[2], 16, 8);
  *v31 = (uint64_t (*)())&off_24ED3C458;
  v31[1] = (uint64_t (*)())a2;
  v32 = re::ImageBasedLightAsset::assetType((re::ImageBasedLightAsset *)v31);
  v244 = &off_24ED38B90;
  v245 = re::internal::AssetTypeRegistryHelper::deleter;
  v246 = &v244;
  v247 = v31;
  v248 = &off_24ED38B90;
  v251 = &v248;
  v249 = re::internal::AssetTypeRegistryHelper::deleter;
  re::AssetManager::registerAssetType((uint64_t)a1, (char **)v32, (uint64_t *)&v247);
  std::unique_ptr<re::RigHierarchy,std::function<void ()(re::RigHierarchy*)>>::~unique_ptr[abi:nn180100]((uint64_t *)&v247);
  v33 = (re::FontLayoutAsset *)v246;
  if (v246 == &v244)
  {
    v34 = 4;
    v33 = (re::FontLayoutAsset *)&v244;
  }
  else
  {
    if (!v246)
      goto LABEL_26;
    v34 = 5;
  }
  v33 = (re::FontLayoutAsset *)(*(uint64_t (**)(void))(*(_QWORD *)v33 + 8 * v34))();
LABEL_26:
  v35 = re::FontLayoutAsset::assetType(v33);
  v36 = re::globalAllocators((re *)v35);
  v37 = (uint64_t (**)())(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v36[2] + 32))(v36[2], 8, 8);
  *v37 = (uint64_t (*)())&off_24ED310D0;
  v244 = &off_24ED38B90;
  v245 = re::internal::AssetTypeRegistryHelper::deleter;
  v246 = &v244;
  v247 = v37;
  v248 = &off_24ED38B90;
  v251 = &v248;
  v249 = re::internal::AssetTypeRegistryHelper::deleter;
  re::AssetManager::registerAssetType((uint64_t)a1, (char **)v35, (uint64_t *)&v247);
  std::unique_ptr<re::RigHierarchy,std::function<void ()(re::RigHierarchy*)>>::~unique_ptr[abi:nn180100]((uint64_t *)&v247);
  v38 = v246;
  if (v246 == &v244)
  {
    v39 = 4;
    v38 = &v244;
  }
  else
  {
    if (!v246)
      goto LABEL_31;
    v39 = 5;
  }
  (*v38)[v39]();
LABEL_31:
  v40 = re::BasicAsset<re::BlendShapeGroupDefinition,&re::kBlendShapeGroupDefinitionAssetName,&re::kBlendShapeGroupDefinitionAssetExtension>::assetType();
  v41 = re::globalAllocators((re *)v40);
  v42 = (uint64_t (**)())(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v41[2] + 32))(v41[2], 8, 8);
  *v42 = (uint64_t (*)())&off_24ED385A0;
  v244 = &off_24ED38B90;
  v245 = re::internal::AssetTypeRegistryHelper::deleter;
  v246 = &v244;
  v247 = v42;
  v248 = &off_24ED38B90;
  v251 = &v248;
  v249 = re::internal::AssetTypeRegistryHelper::deleter;
  re::AssetManager::registerAssetType((uint64_t)a1, (char **)v40, (uint64_t *)&v247);
  std::unique_ptr<re::RigHierarchy,std::function<void ()(re::RigHierarchy*)>>::~unique_ptr[abi:nn180100]((uint64_t *)&v247);
  v43 = (re::CGPerspectiveContextAsset *)v246;
  if (v246 == &v244)
  {
    v44 = 4;
    v43 = (re::CGPerspectiveContextAsset *)&v244;
  }
  else
  {
    if (!v246)
      goto LABEL_36;
    v44 = 5;
  }
  v43 = (re::CGPerspectiveContextAsset *)(*(uint64_t (**)(void))(*(_QWORD *)v43 + 8 * v44))();
LABEL_36:
  v45 = re::CGPerspectiveContextAsset::assetType(v43);
  v46 = re::globalAllocators((re *)v45);
  v47 = (uint64_t (**)())(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v46[2] + 32))(v46[2], 8, 8);
  *v47 = (uint64_t (*)())&off_24ED36F98;
  v244 = &off_24ED38B90;
  v245 = re::internal::AssetTypeRegistryHelper::deleter;
  v246 = &v244;
  v247 = v47;
  v248 = &off_24ED38B90;
  v251 = &v248;
  v249 = re::internal::AssetTypeRegistryHelper::deleter;
  re::AssetManager::registerAssetType((uint64_t)a1, (char **)v45, (uint64_t *)&v247);
  std::unique_ptr<re::RigHierarchy,std::function<void ()(re::RigHierarchy*)>>::~unique_ptr[abi:nn180100]((uint64_t *)&v247);
  v48 = (re *)v246;
  if (v246 == &v244)
  {
    v49 = 4;
    v48 = (re *)&v244;
  }
  else
  {
    if (!v246)
      goto LABEL_41;
    v49 = 5;
  }
  v48 = (re *)(*(uint64_t (**)(void))(*(_QWORD *)v48 + 8 * v49))();
LABEL_41:
  v50 = re::globalAllocators(v48);
  v51 = (uint64_t (**)())(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v50[2] + 32))(v50[2], 24, 8);
  v52 = v51;
  v51[1] = 0;
  v51[2] = 0;
  *v51 = (uint64_t (*)())&off_24ED38240;
  *((_DWORD *)v51 + 2) = (a3 & 0x100) == 0;
  if (v8)
    v51[2] = (uint64_t (*)())v8;
  v53 = re::VideoAsset::assetType((re::VideoAsset *)v51);
  v244 = &off_24ED38B90;
  v245 = re::internal::AssetTypeRegistryHelper::deleter;
  v246 = &v244;
  v247 = v52;
  v248 = &off_24ED38B90;
  v251 = &v248;
  v249 = re::internal::AssetTypeRegistryHelper::deleter;
  re::AssetManager::registerAssetType((uint64_t)a1, (char **)v53, (uint64_t *)&v247);
  std::unique_ptr<re::RigHierarchy,std::function<void ()(re::RigHierarchy*)>>::~unique_ptr[abi:nn180100]((uint64_t *)&v247);
  v54 = (re *)v246;
  if (v246 == &v244)
  {
    v55 = 4;
    v54 = (re *)&v244;
  }
  else
  {
    if (!v246)
      goto LABEL_48;
    v55 = 5;
  }
  v54 = (re *)(*(uint64_t (**)(void))(*(_QWORD *)v54 + 8 * v55))();
LABEL_48:
  v56 = re::globalAllocators(v54);
  v57 = (re::VideoFileAsset *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v56[2] + 32))(v56[2], 8, 8);
  *(_QWORD *)v57 = &off_24ED39F00;
  v58 = re::VideoFileAsset::assetType(v57);
  v244 = &off_24ED38B90;
  v245 = re::internal::AssetTypeRegistryHelper::deleter;
  v246 = &v244;
  v247 = (uint64_t (**)())v57;
  v248 = &off_24ED38B90;
  v251 = &v248;
  v249 = re::internal::AssetTypeRegistryHelper::deleter;
  re::AssetManager::registerAssetType((uint64_t)a1, (char **)v58, (uint64_t *)&v247);
  std::unique_ptr<re::RigHierarchy,std::function<void ()(re::RigHierarchy*)>>::~unique_ptr[abi:nn180100]((uint64_t *)&v247);
  v59 = (re *)v246;
  if (v246 == &v244)
  {
    v60 = 4;
    v59 = (re *)&v244;
  }
  else
  {
    if (!v246)
      goto LABEL_53;
    v60 = 5;
  }
  v59 = (re *)(*(uint64_t (**)(void))(*(_QWORD *)v59 + 8 * v60))();
LABEL_53:
  v61 = re::globalAllocators(v59);
  v62 = (uint64_t (**)())(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v61[2] + 32))(v61[2], 16, 8);
  *v62 = (uint64_t (*)())&off_24ED30908;
  v62[1] = (uint64_t (*)())a2;
  v63 = re::VFXAsset::assetType((re::VFXAsset *)v62);
  v244 = &off_24ED38B90;
  v245 = re::internal::AssetTypeRegistryHelper::deleter;
  v246 = &v244;
  v247 = v62;
  v248 = &off_24ED38B90;
  v251 = &v248;
  v249 = re::internal::AssetTypeRegistryHelper::deleter;
  re::AssetManager::registerAssetType((uint64_t)a1, (char **)v63, (uint64_t *)&v247);
  std::unique_ptr<re::RigHierarchy,std::function<void ()(re::RigHierarchy*)>>::~unique_ptr[abi:nn180100]((uint64_t *)&v247);
  v64 = (re::VertexCacheAsset *)v246;
  if (v246 == &v244)
  {
    v65 = 4;
    v64 = (re::VertexCacheAsset *)&v244;
  }
  else
  {
    if (!v246)
      goto LABEL_58;
    v65 = 5;
  }
  v64 = (re::VertexCacheAsset *)(*(uint64_t (**)(void))(*(_QWORD *)v64 + 8 * v65))();
LABEL_58:
  v66 = re::VertexCacheAsset::assetType(v64);
  v67 = re::globalAllocators((re *)v66);
  v68 = (uint64_t (**)())(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v67[2] + 32))(v67[2], 16, 8);
  v239 = (uint64_t)v6;
  if (v6)
    v69 = v6[23];
  else
    v69 = 0;
  *v68 = (uint64_t (*)())&off_24ED3BA90;
  v70 = (uint64_t (*)())v69;
  v68[1] = v70;
  v244 = &off_24ED38B90;
  v245 = re::internal::AssetTypeRegistryHelper::deleter;
  v246 = &v244;
  v247 = v68;
  v248 = &off_24ED38B90;
  v251 = &v248;
  v249 = re::internal::AssetTypeRegistryHelper::deleter;
  re::AssetManager::registerAssetType((uint64_t)a1, (char **)v66, (uint64_t *)&v247);
  std::unique_ptr<re::RigHierarchy,std::function<void ()(re::RigHierarchy*)>>::~unique_ptr[abi:nn180100]((uint64_t *)&v247);
  v71 = v246;
  if (v246 == &v244)
  {
    v72 = 4;
    v71 = &v244;
  }
  else
  {
    if (!v246)
      goto LABEL_66;
    v72 = 5;
  }
  (*v71)[v72]();
LABEL_66:

  v74 = re::globalAllocators(v73);
  v75 = (uint64_t (**)())(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v74[2] + 32))(v74[2], 152, 8);
  *((_OWORD *)v75 + 3) = 0u;
  *((_OWORD *)v75 + 4) = 0u;
  *((_OWORD *)v75 + 5) = 0u;
  *((_OWORD *)v75 + 6) = 0u;
  *((_OWORD *)v75 + 7) = 0u;
  *((_OWORD *)v75 + 8) = 0u;
  v75[18] = 0;
  v75[4] = 0;
  v75[5] = (uint64_t (*)())&off_24ED318B8;
  v75[11] = (uint64_t (*)())0x7FFFFFFF00000000;
  *((_DWORD *)v75 + 34) = 0;
  *((_DWORD *)v75 + 35) = 0x7FFFFFFF;
  v75[2] = 0;
  v75[3] = 0;
  *(_OWORD *)(v75 + 7) = 0u;
  *(_OWORD *)(v75 + 9) = 0u;
  *(_OWORD *)(v75 + 13) = 0u;
  *(_OWORD *)(v75 + 15) = 0u;
  *v75 = (uint64_t (*)())&off_24ED318F8;
  v75[1] = (uint64_t (*)())a2;
  v76 = re::ShaderLibraryAsset::assetType((re::ShaderLibraryAsset *)v75);
  v244 = &off_24ED38B90;
  v245 = re::internal::AssetTypeRegistryHelper::deleter;
  v246 = &v244;
  v247 = v75;
  v248 = &off_24ED38B90;
  v251 = &v248;
  v249 = re::internal::AssetTypeRegistryHelper::deleter;
  re::AssetManager::registerAssetType((uint64_t)a1, (char **)v76, (uint64_t *)&v247);
  std::unique_ptr<re::RigHierarchy,std::function<void ()(re::RigHierarchy*)>>::~unique_ptr[abi:nn180100]((uint64_t *)&v247);
  v77 = (re *)v246;
  if (v246 == &v244)
  {
    v78 = 4;
    v77 = (re *)&v244;
  }
  else
  {
    if (!v246)
      goto LABEL_71;
    v78 = 5;
  }
  v77 = (re *)(*(uint64_t (**)(void))(*(_QWORD *)v77 + 8 * v78))();
LABEL_71:
  v79 = re::globalAllocators(v77);
  v80 = (uint64_t (**)())(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v79[2] + 32))(v79[2], 32, 8);
  *v80 = (uint64_t (*)())&off_24ED38438;
  v80[1] = 0;
  v80[2] = 0;
  v80[3] = 0;
  re::ShaderGraphAssetLoader::init((uint64_t)v80, a2);
  v82 = re::ShaderGraphAsset::assetType(v81);
  v244 = &off_24ED38B90;
  v245 = re::internal::AssetTypeRegistryHelper::deleter;
  v246 = &v244;
  v247 = v80;
  v248 = &off_24ED38B90;
  v251 = &v248;
  v249 = re::internal::AssetTypeRegistryHelper::deleter;
  re::AssetManager::registerAssetType((uint64_t)a1, (char **)v82, (uint64_t *)&v247);
  std::unique_ptr<re::RigHierarchy,std::function<void ()(re::RigHierarchy*)>>::~unique_ptr[abi:nn180100]((uint64_t *)&v247);
  v83 = (re *)v246;
  if (v246 == &v244)
  {
    v84 = 4;
    v83 = (re *)&v244;
  }
  else
  {
    if (!v246)
      goto LABEL_76;
    v84 = 5;
  }
  v83 = (re *)(*(uint64_t (**)(void))(*(_QWORD *)v83 + 8 * v84))();
LABEL_76:
  v85 = re::globalAllocators(v83);
  v238 = (uint64_t *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v85[2] + 32))(v85[2], 56, 8);
  v238[2] = 0;
  v238[3] = 0;
  v238[5] = 0;
  v238[6] = 0;
  v238[4] = 0;
  *v238 = (uint64_t)&off_24ED3A790;
  v238[1] = a2;
  v238[2] = re::ServiceLocator::serviceOrNull<re::AssetService>(a2);
  v86 = (re::MaterialDefinitionAsset *)re::ServiceLocator::serviceOrNull<re::RenderManager>(v238[1]);
  v238[3] = (uint64_t)v86;
  v87 = re::MaterialDefinitionAsset::assetType(v86);
  v244 = &off_24ED38B90;
  v245 = re::internal::AssetTypeRegistryHelper::deleter;
  v246 = &v244;
  v247 = (uint64_t (**)())v238;
  v248 = &off_24ED38B90;
  v251 = &v248;
  v249 = re::internal::AssetTypeRegistryHelper::deleter;
  re::AssetManager::registerAssetType((uint64_t)a1, (char **)v87, (uint64_t *)&v247);
  std::unique_ptr<re::RigHierarchy,std::function<void ()(re::RigHierarchy*)>>::~unique_ptr[abi:nn180100]((uint64_t *)&v247);
  v88 = (re *)v246;
  if (v246 == &v244)
  {
    v89 = 4;
    v88 = (re *)&v244;
  }
  else
  {
    if (!v246)
      goto LABEL_81;
    v89 = 5;
  }
  v88 = (re *)(*(uint64_t (**)(void))(*(_QWORD *)v88 + 8 * v89))();
LABEL_81:
  v90 = re::globalAllocators(v88);
  v91 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v90[2] + 32))(v90[2], 104, 8);
  *(_OWORD *)(v91 + 16) = 0u;
  *(_OWORD *)(v91 + 32) = 0u;
  *(_OWORD *)(v91 + 48) = 0u;
  *(_OWORD *)(v91 + 64) = 0u;
  *(_OWORD *)(v91 + 80) = 0u;
  *(_QWORD *)(v91 + 96) = 0;
  *(_QWORD *)v91 = &off_24ED36608;
  *(_QWORD *)(v91 + 8) = a2;
  v92 = (uint64_t (**)())v91;
  *(_QWORD *)(v91 + 16) = re::ServiceLocator::serviceOrNull<re::AssetService>(a2);
  v93 = (re::MaterialAsset *)re::ServiceLocator::serviceOrNull<re::RenderManager>((uint64_t)v92[1]);
  v92[3] = (uint64_t (*)())v93;
  v94 = re::MaterialAsset::assetType(v93);
  v244 = &off_24ED38B90;
  v245 = re::internal::AssetTypeRegistryHelper::deleter;
  v246 = &v244;
  v234 = (re::MaterialAssetLoader *)v92;
  v247 = v92;
  v248 = &off_24ED38B90;
  v251 = &v248;
  v249 = re::internal::AssetTypeRegistryHelper::deleter;
  re::AssetManager::registerAssetType((uint64_t)a1, (char **)v94, (uint64_t *)&v247);
  std::unique_ptr<re::RigHierarchy,std::function<void ()(re::RigHierarchy*)>>::~unique_ptr[abi:nn180100]((uint64_t *)&v247);
  v95 = (re *)v246;
  if (v246 == &v244)
  {
    v96 = 4;
    v95 = (re *)&v244;
  }
  else
  {
    if (!v246)
      goto LABEL_86;
    v96 = 5;
  }
  v95 = (re *)(*(uint64_t (**)(void))(*(_QWORD *)v95 + 8 * v96))();
LABEL_86:
  v97 = re::globalAllocators(v95);
  v98 = (re::AssetProvider *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v97[2] + 32))(v97[2], 80, 8);
  re::TextureAssetProvider::TextureAssetProvider((uint64_t)v98, (uint64_t)a1, a2);
  v236 = v98;
  v99 = re::AssetManager::registerAssetProvider(a1, v98);
  v100 = re::globalAllocators((re *)v99);
  v101 = (_anonymous_namespace_ *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v100[2] + 32))(v100[2], 40, 8);
  re::BuiltinTextureAssetProvider::BuiltinTextureAssetProvider(v101, (uint64_t)a1, a2);
  v235 = v101;
  v102 = (id)re::AssetManager::registerAssetProvider(a1, v101);
  v240 = a2;
  if (v6)
  {
    v102 = v6[23];
    v237 = v102;
  }
  else
  {
    v237 = 0;
  }
  v103 = re::globalAllocators((re *)v102);
  v104 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v103[2] + 32))(v103[2], 136, 8);
  v105 = 0;
  *(_QWORD *)v104 = &off_24ED36AE0;
  *(_QWORD *)(v104 + 8) = 0;
  *(_QWORD *)(v104 + 16) = 0;
  *(_QWORD *)(v104 + 24) = 0;
  *(_QWORD *)(v104 + 40) = 0;
  *(_QWORD *)(v104 + 48) = 0;
  *(_DWORD *)(v104 + 56) = 65793;
  *(_QWORD *)(v104 + 80) = 0;
  *(_WORD *)(v104 + 88) = 0;
  *(_QWORD *)(v104 + 128) = 0;
  *(_QWORD *)(v104 + 104) = 0;
  *(_QWORD *)(v104 + 112) = 0;
  *(_QWORD *)(v104 + 96) = 0;
  *(_DWORD *)(v104 + 120) = 0;
  if ((a3 & 1) != 0 && v6)
    v105 = objc_msgSend(v6[23], "supportsSharedTextureHandles");
  v106 = re::ServiceLocator::serviceOrNull<re::DrawableQueueService>(v240);
  v107 = re::ServiceLocator::serviceOrNull<re::DirectResourceAssetTracker>(v240);
  v108 = re::ServiceLocator::serviceOrNull<re::EntitlementService>(v240);
  re::TextureAssetLoader::init((uint64_t *)v104, (uint64_t)a1, v239, (uint64_t)v241, v106, v107, v108, v105, 1);
  v110 = re::TextureAsset::assetType(v109);
  v244 = &off_24ED38B90;
  v245 = re::internal::AssetTypeRegistryHelper::deleter;
  v246 = &v244;
  v247 = (uint64_t (**)())v104;
  v248 = &off_24ED38B90;
  v251 = &v248;
  v249 = re::internal::AssetTypeRegistryHelper::deleter;
  re::AssetManager::registerAssetType((uint64_t)a1, (char **)v110, (uint64_t *)&v247);
  std::unique_ptr<re::RigHierarchy,std::function<void ()(re::RigHierarchy*)>>::~unique_ptr[abi:nn180100]((uint64_t *)&v247);
  v111 = (re *)v246;
  if (v246 == &v244)
  {
    v112 = 4;
    v111 = (re *)&v244;
  }
  else
  {
    if (!v246)
      goto LABEL_97;
    v112 = 5;
  }
  v111 = (re *)(*(uint64_t (**)(void))(*(_QWORD *)v111 + 8 * v112))();
LABEL_97:
  v113 = re::globalAllocators(v111);
  v114 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v113[2] + 32))(v113[2], 312, 8);
  *(_QWORD *)(v114 + 32) = 0;
  *(_QWORD *)(v114 + 8) = 0;
  *(_QWORD *)(v114 + 16) = 0;
  *(_QWORD *)v114 = &off_24ED30A80;
  *(_OWORD *)(v114 + 48) = 0u;
  *(_OWORD *)(v114 + 64) = 0u;
  *(_OWORD *)(v114 + 80) = 0u;
  *(_OWORD *)(v114 + 96) = 0u;
  *(_OWORD *)(v114 + 112) = 0u;
  *(_OWORD *)(v114 + 128) = 0u;
  *(_OWORD *)(v114 + 144) = 0u;
  *(_OWORD *)(v114 + 160) = 0u;
  *(_OWORD *)(v114 + 176) = 0u;
  *(_OWORD *)(v114 + 192) = 0u;
  *(_OWORD *)(v114 + 208) = 0u;
  *(_OWORD *)(v114 + 224) = 0u;
  *(_DWORD *)(v114 + 240) = 16842752;
  *(_BYTE *)(v114 + 244) = 1;
  *(_WORD *)(v114 + 249) = 0;
  *(_DWORD *)(v114 + 245) = 0;
  *(_DWORD *)(v114 + 252) = 1036831949;
  *(_DWORD *)(v114 + 256) = 16843008;
  *(_BYTE *)(v114 + 260) = 0;
  *(_OWORD *)(v114 + 296) = 0u;
  *(_OWORD *)(v114 + 264) = 0u;
  *(_OWORD *)(v114 + 280) = 0u;
  *(_DWORD *)(v114 + 300) = 0x7FFFFFFF;
  v115 = re::ServiceLocator::serviceOrNull<re::DirectResourceAssetTracker>(v240);
  re::MeshAssetLoader::init(v114, v240, v115, a3 & 1);
  v117 = re::MeshAsset::assetType(v116);
  v244 = &off_24ED38B90;
  v245 = re::internal::AssetTypeRegistryHelper::deleter;
  v246 = &v244;
  v247 = (uint64_t (**)())v114;
  v248 = &off_24ED38B90;
  v251 = &v248;
  v249 = re::internal::AssetTypeRegistryHelper::deleter;
  re::AssetManager::registerAssetType((uint64_t)a1, (char **)v117, (uint64_t *)&v247);
  std::unique_ptr<re::RigHierarchy,std::function<void ()(re::RigHierarchy*)>>::~unique_ptr[abi:nn180100]((uint64_t *)&v247);
  v118 = (re::CollisionShapeAsset *)v246;
  if (v246 == &v244)
  {
    v119 = 4;
    v118 = (re::CollisionShapeAsset *)&v244;
  }
  else
  {
    if (!v246)
      goto LABEL_102;
    v119 = 5;
  }
  v118 = (re::CollisionShapeAsset *)(*(uint64_t (**)(void))(*(_QWORD *)v118 + 8 * v119))();
LABEL_102:
  v120 = re::CollisionShapeAsset::assetType(v118);
  v121 = re::globalAllocators((re *)v120);
  v122 = (uint64_t (**)())(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v121[2] + 32))(v121[2], 8, 8);
  *v122 = (uint64_t (*)())&off_24ED3A960;
  v244 = &off_24ED38B90;
  v245 = re::internal::AssetTypeRegistryHelper::deleter;
  v246 = &v244;
  v247 = v122;
  v248 = &off_24ED38B90;
  v251 = &v248;
  v249 = re::internal::AssetTypeRegistryHelper::deleter;
  re::AssetManager::registerAssetType((uint64_t)a1, (char **)v120, (uint64_t *)&v247);
  std::unique_ptr<re::RigHierarchy,std::function<void ()(re::RigHierarchy*)>>::~unique_ptr[abi:nn180100]((uint64_t *)&v247);
  v123 = (re::PhysicsMaterialAsset *)v246;
  if (v246 == &v244)
  {
    v124 = 4;
    v123 = (re::PhysicsMaterialAsset *)&v244;
  }
  else
  {
    if (!v246)
      goto LABEL_107;
    v124 = 5;
  }
  v123 = (re::PhysicsMaterialAsset *)(*(uint64_t (**)(void))(*(_QWORD *)v123 + 8 * v124))();
LABEL_107:
  v125 = re::PhysicsMaterialAsset::assetType(v123);
  v126 = re::globalAllocators((re *)v125);
  v127 = (uint64_t (**)())(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v126[2] + 32))(v126[2], 8, 8);
  *v127 = (uint64_t (*)())&off_24ED3AAB8;
  v244 = &off_24ED38B90;
  v245 = re::internal::AssetTypeRegistryHelper::deleter;
  v246 = &v244;
  v247 = v127;
  v248 = &off_24ED38B90;
  v251 = &v248;
  v249 = re::internal::AssetTypeRegistryHelper::deleter;
  re::AssetManager::registerAssetType((uint64_t)a1, (char **)v125, (uint64_t *)&v247);
  std::unique_ptr<re::RigHierarchy,std::function<void ()(re::RigHierarchy*)>>::~unique_ptr[abi:nn180100]((uint64_t *)&v247);
  v128 = (re::IndexedTriangleMeshAsset *)v246;
  if (v246 == &v244)
  {
    v129 = 4;
    v128 = (re::IndexedTriangleMeshAsset *)&v244;
  }
  else
  {
    if (!v246)
      goto LABEL_112;
    v129 = 5;
  }
  v128 = (re::IndexedTriangleMeshAsset *)(*(uint64_t (**)(void))(*(_QWORD *)v128 + 8 * v129))();
LABEL_112:
  v130 = re::IndexedTriangleMeshAsset::assetType(v128);
  v131 = re::globalAllocators((re *)v130);
  v132 = (uint64_t (**)())(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v131[2] + 32))(v131[2], 8, 8);
  *v132 = (uint64_t (*)())&off_24ED3AC10;
  v244 = &off_24ED38B90;
  v245 = re::internal::AssetTypeRegistryHelper::deleter;
  v246 = &v244;
  v247 = v132;
  v248 = &off_24ED38B90;
  v251 = &v248;
  v249 = re::internal::AssetTypeRegistryHelper::deleter;
  re::AssetManager::registerAssetType((uint64_t)a1, (char **)v130, (uint64_t *)&v247);
  std::unique_ptr<re::RigHierarchy,std::function<void ()(re::RigHierarchy*)>>::~unique_ptr[abi:nn180100]((uint64_t *)&v247);
  v133 = v246;
  if (v246 == &v244)
  {
    v134 = 4;
    v133 = &v244;
  }
  else
  {
    if (!v246)
      goto LABEL_117;
    v134 = 5;
  }
  (*v133)[v134]();
LABEL_117:
  v135 = re::BasicAsset<re::BlendTreeDefinition,&re::kBlendTreeDefinitionAssetName,&re::kBlendTreeDefinitionAssetExtension>::assetType();
  v136 = re::globalAllocators((re *)v135);
  v137 = (uint64_t (**)())(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v136[2] + 32))(v136[2], 8, 8);
  *v137 = (uint64_t (*)())&off_24ED386F8;
  v244 = &off_24ED38B90;
  v245 = re::internal::AssetTypeRegistryHelper::deleter;
  v246 = &v244;
  v247 = v137;
  v248 = &off_24ED38B90;
  v251 = &v248;
  v249 = re::internal::AssetTypeRegistryHelper::deleter;
  re::AssetManager::registerAssetType((uint64_t)a1, (char **)v135, (uint64_t *)&v247);
  std::unique_ptr<re::RigHierarchy,std::function<void ()(re::RigHierarchy*)>>::~unique_ptr[abi:nn180100]((uint64_t *)&v247);
  v138 = (re::AnimationLibraryAsset *)v246;
  if (v246 == &v244)
  {
    v139 = 4;
    v138 = (re::AnimationLibraryAsset *)&v244;
  }
  else
  {
    if (!v246)
      goto LABEL_122;
    v139 = 5;
  }
  v138 = (re::AnimationLibraryAsset *)(*(uint64_t (**)(void))(*(_QWORD *)v138 + 8 * v139))();
LABEL_122:
  v140 = re::AnimationLibraryAsset::assetType(v138);
  v141 = re::globalAllocators((re *)v140);
  v142 = (uint64_t (**)())(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v141[2] + 32))(v141[2], 8, 8);
  *v142 = (uint64_t (*)())&off_24ED3CB90;
  v244 = &off_24ED38B90;
  v245 = re::internal::AssetTypeRegistryHelper::deleter;
  v246 = &v244;
  v247 = v142;
  v248 = &off_24ED38B90;
  v251 = &v248;
  v249 = re::internal::AssetTypeRegistryHelper::deleter;
  re::AssetManager::registerAssetType((uint64_t)a1, (char **)v140, (uint64_t *)&v247);
  std::unique_ptr<re::RigHierarchy,std::function<void ()(re::RigHierarchy*)>>::~unique_ptr[abi:nn180100]((uint64_t *)&v247);
  v143 = v246;
  if (v246 == &v244)
  {
    v144 = 4;
    v143 = &v244;
  }
  else
  {
    if (!v246)
      goto LABEL_127;
    v144 = 5;
  }
  (*v143)[v144]();
LABEL_127:
  v145 = re::BasicAsset<re::AnimationScene,&re::kAnimationSceneAssetName,&re::kAnimationSceneAssetExtension>::assetType();
  v146 = re::globalAllocators((re *)v145);
  v147 = (uint64_t (**)())(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v146[2] + 32))(v146[2], 8, 8);
  *v147 = (uint64_t (*)())&off_24ED38850;
  v244 = &off_24ED38B90;
  v245 = re::internal::AssetTypeRegistryHelper::deleter;
  v246 = &v244;
  v247 = v147;
  v248 = &off_24ED38B90;
  v251 = &v248;
  v249 = re::internal::AssetTypeRegistryHelper::deleter;
  re::AssetManager::registerAssetType((uint64_t)a1, (char **)v145, (uint64_t *)&v247);
  std::unique_ptr<re::RigHierarchy,std::function<void ()(re::RigHierarchy*)>>::~unique_ptr[abi:nn180100]((uint64_t *)&v247);
  v148 = (re::IKRigAsset *)v246;
  if (v246 == &v244)
  {
    v149 = 4;
    v148 = (re::IKRigAsset *)&v244;
  }
  else
  {
    if (!v246)
      goto LABEL_132;
    v149 = 5;
  }
  v148 = (re::IKRigAsset *)(*(uint64_t (**)(void))(*(_QWORD *)v148 + 8 * v149))();
LABEL_132:
  v150 = re::IKRigAsset::assetType(v148);
  v151 = re::globalAllocators((re *)v150);
  v152 = (uint64_t (**)())(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v151[2] + 32))(v151[2], 8, 8);
  *v152 = (uint64_t (*)())&off_24ED3B638;
  v244 = &off_24ED38B90;
  v245 = re::internal::AssetTypeRegistryHelper::deleter;
  v246 = &v244;
  v247 = v152;
  v248 = &off_24ED38B90;
  v251 = &v248;
  v249 = re::internal::AssetTypeRegistryHelper::deleter;
  re::AssetManager::registerAssetType((uint64_t)a1, (char **)v150, (uint64_t *)&v247);
  std::unique_ptr<re::RigHierarchy,std::function<void ()(re::RigHierarchy*)>>::~unique_ptr[abi:nn180100]((uint64_t *)&v247);
  v153 = (re::RigAsset *)v246;
  if (v246 == &v244)
  {
    v154 = 4;
    v153 = (re::RigAsset *)&v244;
  }
  else
  {
    if (!v246)
      goto LABEL_137;
    v154 = 5;
  }
  v153 = (re::RigAsset *)(*(uint64_t (**)(void))(*(_QWORD *)v153 + 8 * v154))();
LABEL_137:
  v155 = re::RigAsset::assetType(v153);
  v156 = re::globalAllocators((re *)v155);
  v157 = (uint64_t (**)())(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v156[2] + 32))(v156[2], 8, 8);
  *v157 = (uint64_t (*)())&off_24ED3CEB8;
  v244 = &off_24ED38B90;
  v245 = re::internal::AssetTypeRegistryHelper::deleter;
  v246 = &v244;
  v247 = v157;
  v248 = &off_24ED38B90;
  v251 = &v248;
  v249 = re::internal::AssetTypeRegistryHelper::deleter;
  re::AssetManager::registerAssetType((uint64_t)a1, (char **)v155, (uint64_t *)&v247);
  std::unique_ptr<re::RigHierarchy,std::function<void ()(re::RigHierarchy*)>>::~unique_ptr[abi:nn180100]((uint64_t *)&v247);
  v158 = (re::RigGraphAsset *)v246;
  if (v246 == &v244)
  {
    v159 = 4;
    v158 = (re::RigGraphAsset *)&v244;
  }
  else
  {
    if (!v246)
      goto LABEL_142;
    v159 = 5;
  }
  v158 = (re::RigGraphAsset *)(*(uint64_t (**)(void))(*(_QWORD *)v158 + 8 * v159))();
LABEL_142:
  v160 = re::RigGraphAsset::assetType(v158);
  v161 = re::globalAllocators((re *)v160);
  v162 = (uint64_t (**)())(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v161[2] + 32))(v161[2], 8, 8);
  *v162 = (uint64_t (*)())&off_24ED3A348;
  v244 = &off_24ED38B90;
  v245 = re::internal::AssetTypeRegistryHelper::deleter;
  v246 = &v244;
  v247 = v162;
  v248 = &off_24ED38B90;
  v251 = &v248;
  v249 = re::internal::AssetTypeRegistryHelper::deleter;
  re::AssetManager::registerAssetType((uint64_t)a1, (char **)v160, (uint64_t *)&v247);
  std::unique_ptr<re::RigHierarchy,std::function<void ()(re::RigHierarchy*)>>::~unique_ptr[abi:nn180100]((uint64_t *)&v247);
  v163 = (re::BlendShapeWeightsDefinitionAsset *)v246;
  if (v246 == &v244)
  {
    v164 = 4;
    v163 = (re::BlendShapeWeightsDefinitionAsset *)&v244;
  }
  else
  {
    if (!v246)
      goto LABEL_147;
    v164 = 5;
  }
  v163 = (re::BlendShapeWeightsDefinitionAsset *)(*(uint64_t (**)(void))(*(_QWORD *)v163 + 8 * v164))();
LABEL_147:
  v165 = re::BlendShapeWeightsDefinitionAsset::assetType(v163);
  v166 = re::globalAllocators((re *)v165);
  v167 = (uint64_t (**)())(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v166[2] + 32))(v166[2], 8, 8);
  *v167 = (uint64_t (*)())&off_24ED36858;
  v244 = &off_24ED38B90;
  v245 = re::internal::AssetTypeRegistryHelper::deleter;
  v246 = &v244;
  v247 = v167;
  v248 = &off_24ED38B90;
  v251 = &v248;
  v249 = re::internal::AssetTypeRegistryHelper::deleter;
  re::AssetManager::registerAssetType((uint64_t)a1, (char **)v165, (uint64_t *)&v247);
  std::unique_ptr<re::RigHierarchy,std::function<void ()(re::RigHierarchy*)>>::~unique_ptr[abi:nn180100]((uint64_t *)&v247);
  v168 = (re::SkeletonAsset *)v246;
  if (v246 == &v244)
  {
    v169 = 4;
    v168 = (re::SkeletonAsset *)&v244;
  }
  else
  {
    if (!v246)
      goto LABEL_152;
    v169 = 5;
  }
  v168 = (re::SkeletonAsset *)(*(uint64_t (**)(void))(*(_QWORD *)v168 + 8 * v169))();
LABEL_152:
  v170 = re::SkeletonAsset::assetType(v168);
  v171 = re::globalAllocators((re *)v170);
  v172 = (uint64_t (**)())(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v171[2] + 32))(v171[2], 8, 8);
  *v172 = (uint64_t (*)())&off_24ED3B938;
  v244 = &off_24ED38B90;
  v245 = re::internal::AssetTypeRegistryHelper::deleter;
  v246 = &v244;
  v247 = v172;
  v248 = &off_24ED38B90;
  v251 = &v248;
  v249 = re::internal::AssetTypeRegistryHelper::deleter;
  re::AssetManager::registerAssetType((uint64_t)a1, (char **)v170, (uint64_t *)&v247);
  std::unique_ptr<re::RigHierarchy,std::function<void ()(re::RigHierarchy*)>>::~unique_ptr[abi:nn180100]((uint64_t *)&v247);
  v173 = (re::SkeletalPoseDefinitionAsset *)v246;
  if (v246 == &v244)
  {
    v174 = 4;
    v173 = (re::SkeletalPoseDefinitionAsset *)&v244;
  }
  else
  {
    if (!v246)
      goto LABEL_157;
    v174 = 5;
  }
  v173 = (re::SkeletalPoseDefinitionAsset *)(*(uint64_t (**)(void))(*(_QWORD *)v173 + 8 * v174))();
LABEL_157:
  v175 = re::SkeletalPoseDefinitionAsset::assetType(v173);
  v176 = re::globalAllocators((re *)v175);
  v177 = (uint64_t (**)())(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v176[2] + 32))(v176[2], 8, 8);
  *v177 = (uint64_t (*)())&off_24ED3C0E0;
  v244 = &off_24ED38B90;
  v245 = re::internal::AssetTypeRegistryHelper::deleter;
  v246 = &v244;
  v247 = v177;
  v248 = &off_24ED38B90;
  v251 = &v248;
  v249 = re::internal::AssetTypeRegistryHelper::deleter;
  re::AssetManager::registerAssetType((uint64_t)a1, (char **)v175, (uint64_t *)&v247);
  std::unique_ptr<re::RigHierarchy,std::function<void ()(re::RigHierarchy*)>>::~unique_ptr[abi:nn180100]((uint64_t *)&v247);
  v178 = (re::TimelineAsset *)v246;
  if (v246 == &v244)
  {
    v179 = 4;
    v178 = (re::TimelineAsset *)&v244;
  }
  else
  {
    if (!v246)
      goto LABEL_162;
    v179 = 5;
  }
  v178 = (re::TimelineAsset *)(*(uint64_t (**)(void))(*(_QWORD *)v178 + 8 * v179))();
LABEL_162:
  v180 = re::TimelineAsset::assetType(v178);
  v181 = re::globalAllocators((re *)v180);
  v182 = (uint64_t (**)())(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v181[2] + 32))(v181[2], 8, 8);
  *v182 = (uint64_t (*)())&off_24ED3C708;
  v244 = &off_24ED38B90;
  v245 = re::internal::AssetTypeRegistryHelper::deleter;
  v246 = &v244;
  v247 = v182;
  v248 = &off_24ED38B90;
  v251 = &v248;
  v249 = re::internal::AssetTypeRegistryHelper::deleter;
  re::AssetManager::registerAssetType((uint64_t)a1, (char **)v180, (uint64_t *)&v247);
  std::unique_ptr<re::RigHierarchy,std::function<void ()(re::RigHierarchy*)>>::~unique_ptr[abi:nn180100]((uint64_t *)&v247);
  v183 = v246;
  if (v246 == &v244)
  {
    v184 = 4;
    v183 = &v244;
  }
  else
  {
    if (!v246)
      goto LABEL_167;
    v184 = 5;
  }
  (*v183)[v184]();
LABEL_167:
  v185 = re::BasicAsset<re::AssignedMeshDeformation,&re::kAssignedMeshDeformationAssetName,&re::kAssignedMeshDeformationAssetExtension>::assetType();
  v186 = re::globalAllocators((re *)v185);
  v187 = (uint64_t (**)())(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v186[2] + 32))(v186[2], 8, 8);
  *v187 = (uint64_t (*)())&off_24ED389A8;
  v244 = &off_24ED38B90;
  v245 = re::internal::AssetTypeRegistryHelper::deleter;
  v246 = &v244;
  v247 = v187;
  v248 = &off_24ED38B90;
  v251 = &v248;
  v249 = re::internal::AssetTypeRegistryHelper::deleter;
  re::AssetManager::registerAssetType((uint64_t)a1, (char **)v185, (uint64_t *)&v247);
  std::unique_ptr<re::RigHierarchy,std::function<void ()(re::RigHierarchy*)>>::~unique_ptr[abi:nn180100]((uint64_t *)&v247);
  v188 = (re::StateMachineAsset *)v246;
  if (v246 == &v244)
  {
    v189 = 4;
    v188 = (re::StateMachineAsset *)&v244;
  }
  else
  {
    if (!v246)
      goto LABEL_172;
    v189 = 5;
  }
  v188 = (re::StateMachineAsset *)(*(uint64_t (**)(void))(*(_QWORD *)v188 + 8 * v189))();
LABEL_172:
  v190 = re::StateMachineAsset::assetType(v188);
  v191 = re::globalAllocators((re *)v190);
  v192 = (uint64_t (**)())(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v191[2] + 32))(v191[2], 8, 8);
  *v192 = (uint64_t (*)())&off_24ED3AE60;
  v244 = &off_24ED38B90;
  v245 = re::internal::AssetTypeRegistryHelper::deleter;
  v246 = &v244;
  v247 = v192;
  v248 = &off_24ED38B90;
  v251 = &v248;
  v249 = re::internal::AssetTypeRegistryHelper::deleter;
  re::AssetManager::registerAssetType((uint64_t)a1, (char **)v190, (uint64_t *)&v247);
  std::unique_ptr<re::RigHierarchy,std::function<void ()(re::RigHierarchy*)>>::~unique_ptr[abi:nn180100]((uint64_t *)&v247);
  v193 = (re::StateParameterBlackboardAsset *)v246;
  if (v246 == &v244)
  {
    v194 = 4;
    v193 = (re::StateParameterBlackboardAsset *)&v244;
  }
  else
  {
    if (!v246)
      goto LABEL_177;
    v194 = 5;
  }
  v193 = (re::StateParameterBlackboardAsset *)(*(uint64_t (**)(void))(*(_QWORD *)v193 + 8 * v194))();
LABEL_177:
  v195 = re::StateParameterBlackboardAsset::assetType(v193);
  v196 = re::globalAllocators((re *)v195);
  v197 = (uint64_t (**)())(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v196[2] + 32))(v196[2], 8, 8);
  *v197 = (uint64_t (*)())&off_24ED312C0;
  v244 = &off_24ED38B90;
  v245 = re::internal::AssetTypeRegistryHelper::deleter;
  v246 = &v244;
  v247 = v197;
  v248 = &off_24ED38B90;
  v251 = &v248;
  v249 = re::internal::AssetTypeRegistryHelper::deleter;
  re::AssetManager::registerAssetType((uint64_t)a1, (char **)v195, (uint64_t *)&v247);
  std::unique_ptr<re::RigHierarchy,std::function<void ()(re::RigHierarchy*)>>::~unique_ptr[abi:nn180100]((uint64_t *)&v247);
  v198 = v246;
  if (v246 == &v244)
  {
    v199 = 4;
    v198 = &v244;
  }
  else
  {
    if (!v246)
      goto LABEL_182;
    v199 = 5;
  }
  (*v198)[v199]();
LABEL_182:
  v200 = (re::SceneAsset *)re::ServiceLocator::serviceOrNull<re::ecs2::ECSService>(v240);
  if (!v200)
    goto LABEL_188;
  v201 = re::SceneAsset::assetType(v200);
  v202 = re::globalAllocators((re *)v201);
  v203 = (uint64_t (**)())(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v202[2] + 32))(v202[2], 8, 8);
  *v203 = (uint64_t (*)())&off_24ED3A0C0;
  v244 = &off_24ED38B90;
  v245 = re::internal::AssetTypeRegistryHelper::deleter;
  v246 = &v244;
  v247 = v203;
  v248 = &off_24ED38B90;
  v251 = &v248;
  v249 = re::internal::AssetTypeRegistryHelper::deleter;
  re::AssetManager::registerAssetType((uint64_t)a1, (char **)v201, (uint64_t *)&v247);
  std::unique_ptr<re::RigHierarchy,std::function<void ()(re::RigHierarchy*)>>::~unique_ptr[abi:nn180100]((uint64_t *)&v247);
  v200 = (re::SceneAsset *)v246;
  if (v246 == &v244)
  {
    v204 = 4;
    v200 = (re::SceneAsset *)&v244;
  }
  else
  {
    if (!v246)
      goto LABEL_188;
    v204 = 5;
  }
  v200 = (re::SceneAsset *)(*(uint64_t (**)(void))(*(_QWORD *)v200 + 8 * v204))();
LABEL_188:
  v205 = re::globalAllocators(v200);
  v206 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v205[2] + 32))(v205[2], 56, 8);
  re::AudioFileAssetProvider::AudioFileAssetProvider((re::AudioFileAssetProvider *)v206, a1);
  re::AssetManager::registerAssetProvider(a1, (re::AssetProvider *)v206);
  v207 = (re *)re::ServiceLocator::serviceOrNull<re::AudioSceneService>(v240);
  v208 = re::globalAllocators(v207);
  v209 = (uint64_t (**)())(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v208[2] + 32))(v208[2], 16, 8);
  *v209 = (uint64_t (*)())&off_24ED3C5B0;
  v209[1] = (uint64_t (*)())v207;
  v210 = re::AudioFileAsset::assetType((re::AudioFileAsset *)v209);
  v244 = &off_24ED38B90;
  v245 = re::internal::AssetTypeRegistryHelper::deleter;
  v246 = &v244;
  v247 = v209;
  v248 = &off_24ED38B90;
  v251 = &v248;
  v249 = re::internal::AssetTypeRegistryHelper::deleter;
  re::AssetManager::registerAssetType((uint64_t)a1, (char **)v210, (uint64_t *)&v247);
  std::unique_ptr<re::RigHierarchy,std::function<void ()(re::RigHierarchy*)>>::~unique_ptr[abi:nn180100]((uint64_t *)&v247);
  v211 = (re::AudioFileGroupAsset *)v246;
  if (v246 == &v244)
  {
    v212 = 4;
    v211 = (re::AudioFileGroupAsset *)&v244;
  }
  else
  {
    if (!v246)
      goto LABEL_193;
    v212 = 5;
  }
  v211 = (re::AudioFileGroupAsset *)(*(uint64_t (**)(void))(*(_QWORD *)v211 + 8 * v212))();
LABEL_193:
  v213 = re::AudioFileGroupAsset::assetType(v211);
  v214 = re::globalAllocators((re *)v213);
  v215 = (uint64_t (**)())(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v214[2] + 32))(v214[2], 32, 8);
  *v215 = (uint64_t (*)())&off_24ED3C8A0;
  v215[1] = (uint64_t (*)())a1;
  v215[2] = (uint64_t (*)())v209;
  v215[3] = (uint64_t (*)())v207;
  v244 = &off_24ED38B90;
  v245 = re::internal::AssetTypeRegistryHelper::deleter;
  v246 = &v244;
  v247 = v215;
  v248 = &off_24ED38B90;
  v251 = &v248;
  v249 = re::internal::AssetTypeRegistryHelper::deleter;
  re::AssetManager::registerAssetType((uint64_t)a1, (char **)v213, (uint64_t *)&v247);
  std::unique_ptr<re::RigHierarchy,std::function<void ()(re::RigHierarchy*)>>::~unique_ptr[abi:nn180100]((uint64_t *)&v247);
  v216 = (re *)v246;
  if (v246 == &v244)
  {
    v217 = 4;
    v216 = (re *)&v244;
  }
  else
  {
    if (!v246)
      goto LABEL_198;
    v217 = 5;
  }
  v216 = (re *)(*(uint64_t (**)(void))(*(_QWORD *)v216 + 8 * v217))();
LABEL_198:
  v218 = re::globalAllocators(v216);
  v219 = (re::AudioGeneratorAsset *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v218[2] + 32))(v218[2], 8, 8);
  *(_QWORD *)v219 = &off_24ED37438;
  v220 = re::AudioGeneratorAsset::assetType(v219);
  v244 = &off_24ED38B90;
  v245 = re::internal::AssetTypeRegistryHelper::deleter;
  v246 = &v244;
  v247 = (uint64_t (**)())v219;
  v248 = &off_24ED38B90;
  v251 = &v248;
  v249 = re::internal::AssetTypeRegistryHelper::deleter;
  re::AssetManager::registerAssetType((uint64_t)a1, (char **)v220, (uint64_t *)&v247);
  std::unique_ptr<re::RigHierarchy,std::function<void ()(re::RigHierarchy*)>>::~unique_ptr[abi:nn180100]((uint64_t *)&v247);
  v221 = (re *)v246;
  if (v246 == &v244)
  {
    v222 = 4;
    v221 = (re *)&v244;
  }
  else
  {
    if (!v246)
      goto LABEL_203;
    v222 = 5;
  }
  v221 = (re *)(*(uint64_t (**)(void))(*(_QWORD *)v221 + 8 * v222))();
LABEL_203:
  v223 = re::globalAllocators(v221);
  v224 = (uint64_t (**)())(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v223[2] + 32))(v223[2], 16, 8);
  *v224 = (uint64_t (*)())&off_24ED38F30;
  v224[1] = 0;
  v225 = re::AcousticMeshAsset::assetType((re::AcousticMeshAsset *)v224);
  v244 = &off_24ED38B90;
  v245 = re::internal::AssetTypeRegistryHelper::deleter;
  v246 = &v244;
  v247 = v224;
  v248 = &off_24ED38B90;
  v251 = &v248;
  v249 = re::internal::AssetTypeRegistryHelper::deleter;
  re::AssetManager::registerAssetType((uint64_t)a1, (char **)v225, (uint64_t *)&v247);
  std::unique_ptr<re::RigHierarchy,std::function<void ()(re::RigHierarchy*)>>::~unique_ptr[abi:nn180100]((uint64_t *)&v247);
  v226 = (re::ARReferenceObjectAsset *)v246;
  if (v246 == &v244)
  {
    v227 = 4;
    v226 = (re::ARReferenceObjectAsset *)&v244;
  }
  else
  {
    if (!v246)
      goto LABEL_208;
    v227 = 5;
  }
  v226 = (re::ARReferenceObjectAsset *)(*(uint64_t (**)(void))(*(_QWORD *)v226 + 8 * v227))();
LABEL_208:
  v228 = re::ARReferenceObjectAsset::assetType(v226);
  v229 = re::globalAllocators((re *)v228);
  v230 = (uint64_t (**)())(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v229[2] + 32))(v229[2], 16, 8);
  *v230 = (uint64_t (*)())&off_24ED37830;
  v230[1] = 0;
  v244 = &off_24ED38B90;
  v245 = re::internal::AssetTypeRegistryHelper::deleter;
  v246 = &v244;
  v247 = v230;
  v248 = &off_24ED38B90;
  v251 = &v248;
  v249 = re::internal::AssetTypeRegistryHelper::deleter;
  re::AssetManager::registerAssetType((uint64_t)a1, (char **)v228, (uint64_t *)&v247);
  std::unique_ptr<re::RigHierarchy,std::function<void ()(re::RigHierarchy*)>>::~unique_ptr[abi:nn180100]((uint64_t *)&v247);
  v231 = v246;
  if (v246 == &v244)
  {
    v232 = 4;
    v231 = &v244;
    goto LABEL_212;
  }
  if (v246)
  {
    v232 = 5;
LABEL_212:
    (*v231)[v232]();
  }
  re::ShaderLibraryAssetLoader::preloadAssets((re::ShaderLibraryAssetLoader *)v75);
  re::TextureAssetLoader::preloadAssets(v104, v240);
  re::MaterialDefinitionLoader::preloadAssets((re::MaterialDefinitionLoader *)v238);
  re::MaterialAssetLoader::preloadAssets(v234);
  re::MeshAssetLoader::preloadAssets((float32x4_t *)v114);
  re::Defaults::BOOLValue((re::Defaults *)"blockUntilAssetsPreloaded", v233, (char *)&v247);
  if ((_BYTE)v247 && BYTE1(v247))
    re::AssetManager::waitForLoadQueueToComplete((uint64_t)a1, 0);
  if (v206)

  if (v235)
  if (v236)

}

void sub_22536095C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17, void *a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,char a26,uint64_t a27,uint64_t a28,char *a29)
{
  char *v29;
  uint64_t v30;
  char *v32;
  uint64_t v33;

  std::unique_ptr<re::RigHierarchy,std::function<void ()(re::RigHierarchy*)>>::~unique_ptr[abi:nn180100]((uint64_t *)(v30 - 136));
  v32 = a29;
  if (a29 == v29)
  {
    v33 = 4;
    v32 = &a26;
  }
  else
  {
    if (!a29)
      goto LABEL_6;
    v33 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v32 + 8 * v33))();
LABEL_6:

  if (a11)
  if (a12)

  _Unwind_Resume(a1);
}

uint64_t re::ServiceLocator::serviceOrNull<re::DirectResourceAssetTracker>(uint64_t a1)
{
  unsigned __int8 v2;
  uint64_t v3;
  uint64_t v4;
  _BYTE v6[16];

  if ((v2 & 1) == 0
  {
    re::introspect<re::DirectResourceAssetTracker>(void)::info = re::introspect_DirectResourceAssetTracker(0);
  }
  v3 = re::introspect<re::DirectResourceAssetTracker>(void)::info;
  re::StringID::invalid((re::StringID *)v6);
  v4 = (*(uint64_t (**)(uint64_t, uint64_t, _BYTE *))(*(_QWORD *)a1 + 16))(a1, v3, v6);
  re::StringID::destroyString((re::StringID *)v6);
  return v4;
}

void sub_225360CBC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  re::StringID::destroyString((re::StringID *)&a9);
  _Unwind_Resume(a1);
}

uint64_t re::ServiceLocator::serviceOrNull<re::AudioSceneService>(uint64_t a1)
{
  unsigned __int8 v2;
  uint64_t v3;
  uint64_t v4;
  _BYTE v6[16];

  if ((v2 & 1) == 0
  {
    re::introspect<re::AudioSceneService>(void)::info = re::introspect_AudioSceneService(0);
  }
  v3 = re::introspect<re::AudioSceneService>(void)::info;
  re::StringID::invalid((re::StringID *)v6);
  v4 = (*(uint64_t (**)(uint64_t, uint64_t, _BYTE *))(*(_QWORD *)a1 + 16))(a1, v3, v6);
  re::StringID::destroyString((re::StringID *)v6);
  return v4;
}

void sub_225360D68(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  re::StringID::destroyString((re::StringID *)&a9);
  _Unwind_Resume(a1);
}

uint64_t (***re::AssetHelper::registerDefaultAssetCompilers(re *a1, uint64_t a2, char a3))()
{
  uint64_t *v6;
  uint64_t v7;
  uint64_t *v8;
  re *v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t *v12;
  id *v13;
  id *v14;
  uint64_t *v15;
  id *v16;
  id *v17;
  uint64_t *v18;
  _QWORD *v19;
  uint64_t *v20;
  _QWORD *v21;
  id *v22;
  re::ImportGraphicsContext *v23;
  re::ImportGraphicsContext *v24;
  char v25;
  re::Bundle *v26;
  char v27;
  re::ns *v28;
  char *v29;
  char v30;
  uint64_t (***v31)();
  uint64_t v32;
  uint64_t (***v33)();
  uint64_t v34;
  uint64_t (***v35)();
  uint64_t v36;
  uint64_t (***v37)();
  uint64_t v38;
  uint64_t (***v39)();
  uint64_t v40;
  uint64_t (***v41)();
  uint64_t v42;
  re *v43;
  uint64_t v44;
  uint64_t *v45;
  _QWORD *v46;
  re *v47;
  uint64_t v48;
  uint64_t *v49;
  _QWORD *v50;
  re *v51;
  uint64_t v52;
  uint64_t *v53;
  _QWORD *v54;
  re *v55;
  uint64_t v56;
  uint64_t *v57;
  _QWORD *v58;
  re *v59;
  uint64_t v60;
  uint64_t *v61;
  _QWORD *v62;
  re *v63;
  uint64_t v64;
  uint64_t *v65;
  _QWORD *v66;
  re *v67;
  uint64_t v68;
  uint64_t *v69;
  _QWORD *v70;
  re *v71;
  uint64_t v72;
  uint64_t *v73;
  _QWORD *v74;
  re *v75;
  uint64_t v76;
  uint64_t *v77;
  _QWORD *v78;
  re *v79;
  uint64_t v80;
  uint64_t *v81;
  _QWORD *v82;
  re *v83;
  uint64_t v84;
  uint64_t *v85;
  _QWORD *v86;
  re *v87;
  uint64_t v88;
  uint64_t *v89;
  _QWORD *v90;
  re *v91;
  uint64_t v92;
  uint64_t *v93;
  _QWORD *v94;
  re *v95;
  uint64_t v96;
  uint64_t *v97;
  _QWORD *v98;
  re *v99;
  uint64_t v100;
  uint64_t *v101;
  _QWORD *v102;
  re *v103;
  uint64_t v104;
  uint64_t *v105;
  _QWORD *v106;
  re *v107;
  uint64_t v108;
  uint64_t *v109;
  _QWORD *v110;
  re *v111;
  uint64_t v112;
  uint64_t *v113;
  _QWORD *v114;
  re *v115;
  uint64_t v116;
  uint64_t *v117;
  _QWORD *v118;
  re *v119;
  uint64_t v120;
  uint64_t *v121;
  _QWORD *v122;
  re *v123;
  uint64_t v124;
  uint64_t *v125;
  _QWORD *v126;
  re *v127;
  uint64_t v128;
  uint64_t *v129;
  _QWORD *v130;
  re *v131;
  uint64_t v132;
  uint64_t *v133;
  _QWORD *v134;
  re *v135;
  uint64_t v136;
  uint64_t *v137;
  _QWORD *v138;
  re *v139;
  uint64_t v140;
  uint64_t *v141;
  _QWORD *v142;
  re *v143;
  uint64_t v144;
  uint64_t *v145;
  _QWORD *v146;
  re *v147;
  uint64_t v148;
  uint64_t *v149;
  _QWORD *v150;
  re *v151;
  uint64_t v152;
  uint64_t *v153;
  _QWORD *v154;
  uint64_t (***result)();
  uint64_t v156;
  id *v157;
  id *v158;
  _QWORD *v159;
  _QWORD *v160;
  id v161;
  id v162;
  re *v163;
  id v164;
  void *v165;
  id v166;
  id v167;
  id v168;
  uint64_t (**v169)();
  re *v170;
  int v171;
  char v172;
  id *v173;
  id v174;
  uint64_t (**v175)();
  re *(*v176)(re *, re::AssetCompiler *);
  uint64_t (***v177)();
  uint64_t v178;

  v178 = *MEMORY[0x24BDAC8D0];
  v6 = re::globalAllocators(a1);
  v7 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v6[2] + 32))(v6[2], 48, 8);
  *(_QWORD *)(v7 + 32) = 0;
  *(_QWORD *)(v7 + 40) = 0;
  *(_QWORD *)(v7 + 16) = 0;
  *(_QWORD *)(v7 + 24) = 0;
  *(_QWORD *)v7 = &off_24ED42CA8;
  *(_QWORD *)(v7 + 8) = 0;
  *(_WORD *)(v7 + 24) = 257;
  *(_BYTE *)(v7 + 26) = 1;
  *(_BYTE *)(v7 + 40) = 0;
  v8 = re::globalAllocators((re *)v7);
  v9 = (re *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v8[2] + 32))(v8[2], 16, 8);
  *(_QWORD *)v9 = &off_24ED44498;
  *((_QWORD *)v9 + 1) = 0;
  v10 = re::globalAllocators(v9);
  v11 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v10[2] + 32))(v10[2], 48, 8);
  *(_QWORD *)(v11 + 32) = 0;
  *(_QWORD *)(v11 + 40) = 0;
  *(_QWORD *)(v11 + 16) = 0;
  *(_QWORD *)(v11 + 24) = 0;
  *(_QWORD *)v11 = &off_24ED42E08;
  *(_QWORD *)(v11 + 8) = 0;
  *(_WORD *)(v11 + 24) = 257;
  *(_BYTE *)(v11 + 26) = 1;
  v12 = re::globalAllocators((re *)v11);
  v13 = (id *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v12[2] + 32))(v12[2], 16, 8);
  v13[1] = 0;
  v14 = v13 + 1;
  v158 = v13;
  *v13 = &off_24ED44B38;
  v15 = re::globalAllocators((re *)v13);
  v16 = (id *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v15[2] + 32))(v15[2], 16, 8);
  v16[1] = 0;
  v17 = v16 + 1;
  v157 = v16;
  *v16 = &off_24ED42D90;
  v18 = re::globalAllocators((re *)v16);
  v19 = (_QWORD *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v18[2] + 32))(v18[2], 16, 8);
  *v19 = &off_24ED42EE8;
  v19[1] = 0;
  v159 = v19;
  v20 = re::globalAllocators((re *)v19);
  v21 = (_QWORD *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v20[2] + 32))(v20[2], 24, 8);
  v21[1] = 0;
  v22 = (id *)(v21 + 1);
  *v21 = &off_24ED446F0;
  v160 = v21;
  v21[2] = 0;
  v23 = (re::ImportGraphicsContext *)re::ServiceLocator::serviceOrNull<re::RenderManager>(a2);
  if (v23)
  {
    v24 = v23;
    re::ImportGraphicsContext::createFromRenderManager(v23, (re::ImportGraphicsContext *)&v174);
    if ((a3 & 1) != 0)
      v25 = objc_msgSend(*((id *)v24 + 23), "supportsSharedTextureHandles");
    else
      v25 = 0;
    re::TextureCompiler::init(v7, (uint64_t)&v174, v25);
    *((_QWORD *)v9 + 1) = a2;
    re::TextureCompiler::init(v11, (uint64_t)&v174, v25);
    v168 = *((id *)v24 + 23);
    re::ObjCObject::operator=(v14, &v168);

    v167 = *((id *)v24 + 23);
    re::ObjCObject::operator=(v17, &v167);

    v159[1] = v24;
    v166 = *((id *)v24 + 23);
    re::ObjCObject::operator=(v22, &v166);
    v160[2] = a2;

  }
  else if (re::ServiceLocator::serviceOrNull<re::RenderManager>(a2))
  {
    re::mtl::makeDefaultDevice(&v165);
    if ((a3 & 1) != 0)
    {
      v26 = (re::Bundle *)objc_msgSend(v165, "supportsSharedTextureHandles");
      v27 = (char)v26;
    }
    else
    {
      v27 = 0;
    }
    re::Bundle::testData(v26, &v164);
    re::Bundle::findFile((re::Bundle *)&v164, "default.metallib", (re::DynamicString *)&v174);
    if ((v175 & 1) != 0)
      v28 = (re::ns *)v176;
    else
      v28 = (re::ns *)((char *)&v175 + 1);
    re::mtl::Device::makeLibraryWithFile(&v165, v28, &v163);
    v29 = (char *)re::ServiceLocator::serviceOrNull<re::ColorManager>(a2);
    if (v29)
      v30 = *v29;
    else
      v30 = 0;
    v169 = v165;
    v170 = v163;
    v171 = 16843009;
    v172 = v30;
    v173 = 0;
    re::TextureCompiler::init(v7, (uint64_t)&v169, v27);
    *((_QWORD *)v9 + 1) = a2;
    re::TextureCompiler::init(v11, (uint64_t)&v169, v27);
    v162 = v165;
    re::ObjCObject::operator=(v14, &v162);

    v161 = v165;
    re::ObjCObject::operator=(v22, &v161);
    v160[2] = a2;

    if (v174 && (v175 & 1) != 0)
      (*(void (**)(void))(*(_QWORD *)v174 + 40))();

  }
  v169 = &off_24ED38C30;
  v170 = (re *)re::internal::AssetCompilerRegistryHelper::deleter;
  v173 = (id *)&v169;
  v174 = (id)v7;
  v175 = &off_24ED38C30;
  v176 = re::internal::AssetCompilerRegistryHelper::deleter;
  v177 = &v175;
  re::AssetCompilerRegistry::registerAssetCompiler((uint64_t)a1, (uint64_t *)&v174);
  std::unique_ptr<re::RigHierarchy,std::function<void ()(re::RigHierarchy*)>>::~unique_ptr[abi:nn180100]((uint64_t *)&v174);
  v31 = (uint64_t (***)())v173;
  if (v173 == (id *)&v169)
  {
    v32 = 4;
    v31 = &v169;
  }
  else
  {
    if (!v173)
      goto LABEL_25;
    v32 = 5;
  }
  (*v31)[v32]();
LABEL_25:
  v169 = &off_24ED38C30;
  v170 = (re *)re::internal::AssetCompilerRegistryHelper::deleter;
  v173 = (id *)&v169;
  v174 = v9;
  v175 = &off_24ED38C30;
  v176 = re::internal::AssetCompilerRegistryHelper::deleter;
  v177 = &v175;
  re::AssetCompilerRegistry::registerAssetCompiler((uint64_t)a1, (uint64_t *)&v174);
  std::unique_ptr<re::RigHierarchy,std::function<void ()(re::RigHierarchy*)>>::~unique_ptr[abi:nn180100]((uint64_t *)&v174);
  v33 = (uint64_t (***)())v173;
  if (v173 == (id *)&v169)
  {
    v34 = 4;
    v33 = &v169;
  }
  else
  {
    if (!v173)
      goto LABEL_30;
    v34 = 5;
  }
  (*v33)[v34]();
LABEL_30:
  v169 = &off_24ED38C30;
  v170 = (re *)re::internal::AssetCompilerRegistryHelper::deleter;
  v173 = (id *)&v169;
  v174 = (id)v11;
  v175 = &off_24ED38C30;
  v176 = re::internal::AssetCompilerRegistryHelper::deleter;
  v177 = &v175;
  re::AssetCompilerRegistry::registerAssetCompiler((uint64_t)a1, (uint64_t *)&v174);
  std::unique_ptr<re::RigHierarchy,std::function<void ()(re::RigHierarchy*)>>::~unique_ptr[abi:nn180100]((uint64_t *)&v174);
  v35 = (uint64_t (***)())v173;
  if (v173 == (id *)&v169)
  {
    v36 = 4;
    v35 = &v169;
  }
  else
  {
    if (!v173)
      goto LABEL_35;
    v36 = 5;
  }
  (*v35)[v36]();
LABEL_35:
  v169 = &off_24ED38C30;
  v170 = (re *)re::internal::AssetCompilerRegistryHelper::deleter;
  v173 = (id *)&v169;
  v174 = v158;
  v175 = &off_24ED38C30;
  v176 = re::internal::AssetCompilerRegistryHelper::deleter;
  v177 = &v175;
  re::AssetCompilerRegistry::registerAssetCompiler((uint64_t)a1, (uint64_t *)&v174);
  std::unique_ptr<re::RigHierarchy,std::function<void ()(re::RigHierarchy*)>>::~unique_ptr[abi:nn180100]((uint64_t *)&v174);
  v37 = (uint64_t (***)())v173;
  if (v173 == (id *)&v169)
  {
    v38 = 4;
    v37 = &v169;
  }
  else
  {
    if (!v173)
      goto LABEL_40;
    v38 = 5;
  }
  (*v37)[v38]();
LABEL_40:
  v169 = &off_24ED38C30;
  v170 = (re *)re::internal::AssetCompilerRegistryHelper::deleter;
  v173 = (id *)&v169;
  v174 = v157;
  v175 = &off_24ED38C30;
  v176 = re::internal::AssetCompilerRegistryHelper::deleter;
  v177 = &v175;
  re::AssetCompilerRegistry::registerAssetCompiler((uint64_t)a1, (uint64_t *)&v174);
  std::unique_ptr<re::RigHierarchy,std::function<void ()(re::RigHierarchy*)>>::~unique_ptr[abi:nn180100]((uint64_t *)&v174);
  v39 = (uint64_t (***)())v173;
  if (v173 == (id *)&v169)
  {
    v40 = 4;
    v39 = &v169;
  }
  else
  {
    if (!v173)
      goto LABEL_45;
    v40 = 5;
  }
  (*v39)[v40]();
LABEL_45:
  v169 = &off_24ED38C30;
  v170 = (re *)re::internal::AssetCompilerRegistryHelper::deleter;
  v173 = (id *)&v169;
  v174 = v159;
  v175 = &off_24ED38C30;
  v176 = re::internal::AssetCompilerRegistryHelper::deleter;
  v177 = &v175;
  re::AssetCompilerRegistry::registerAssetCompiler((uint64_t)a1, (uint64_t *)&v174);
  std::unique_ptr<re::RigHierarchy,std::function<void ()(re::RigHierarchy*)>>::~unique_ptr[abi:nn180100]((uint64_t *)&v174);
  v41 = (uint64_t (***)())v173;
  if (v173 == (id *)&v169)
  {
    v42 = 4;
    v41 = &v169;
  }
  else
  {
    if (!v173)
      goto LABEL_50;
    v42 = 5;
  }
  (*v41)[v42]();
LABEL_50:
  v169 = &off_24ED38C30;
  v170 = (re *)re::internal::AssetCompilerRegistryHelper::deleter;
  v173 = (id *)&v169;
  v174 = v160;
  v175 = &off_24ED38C30;
  v176 = re::internal::AssetCompilerRegistryHelper::deleter;
  v177 = &v175;
  re::AssetCompilerRegistry::registerAssetCompiler((uint64_t)a1, (uint64_t *)&v174);
  std::unique_ptr<re::RigHierarchy,std::function<void ()(re::RigHierarchy*)>>::~unique_ptr[abi:nn180100]((uint64_t *)&v174);
  v43 = (re *)v173;
  if (v173 == (id *)&v169)
  {
    v44 = 4;
    v43 = (re *)&v169;
  }
  else
  {
    if (!v173)
      goto LABEL_55;
    v44 = 5;
  }
  v43 = (re *)(*(uint64_t (**)(void))(*(_QWORD *)v43 + 8 * v44))();
LABEL_55:
  v45 = re::globalAllocators(v43);
  v46 = (_QWORD *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v45[2] + 32))(v45[2], 8, 8);
  *v46 = &off_24ED426F0;
  v169 = &off_24ED38C30;
  v170 = (re *)re::internal::AssetCompilerRegistryHelper::deleter;
  v173 = (id *)&v169;
  v174 = v46;
  v175 = &off_24ED38C30;
  v176 = re::internal::AssetCompilerRegistryHelper::deleter;
  v177 = &v175;
  re::AssetCompilerRegistry::registerAssetCompiler((uint64_t)a1, (uint64_t *)&v174);
  std::unique_ptr<re::RigHierarchy,std::function<void ()(re::RigHierarchy*)>>::~unique_ptr[abi:nn180100]((uint64_t *)&v174);
  v47 = (re *)v173;
  if (v173 == (id *)&v169)
  {
    v48 = 4;
    v47 = (re *)&v169;
  }
  else
  {
    if (!v173)
      goto LABEL_60;
    v48 = 5;
  }
  v47 = (re *)(*(uint64_t (**)(void))(*(_QWORD *)v47 + 8 * v48))();
LABEL_60:
  v49 = re::globalAllocators(v47);
  v50 = (_QWORD *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v49[2] + 32))(v49[2], 8, 8);
  *v50 = &off_24ED38CE0;
  v169 = &off_24ED38C30;
  v170 = (re *)re::internal::AssetCompilerRegistryHelper::deleter;
  v173 = (id *)&v169;
  v174 = v50;
  v175 = &off_24ED38C30;
  v176 = re::internal::AssetCompilerRegistryHelper::deleter;
  v177 = &v175;
  re::AssetCompilerRegistry::registerAssetCompiler((uint64_t)a1, (uint64_t *)&v174);
  std::unique_ptr<re::RigHierarchy,std::function<void ()(re::RigHierarchy*)>>::~unique_ptr[abi:nn180100]((uint64_t *)&v174);
  v51 = (re *)v173;
  if (v173 == (id *)&v169)
  {
    v52 = 4;
    v51 = (re *)&v169;
  }
  else
  {
    if (!v173)
      goto LABEL_65;
    v52 = 5;
  }
  v51 = (re *)(*(uint64_t (**)(void))(*(_QWORD *)v51 + 8 * v52))();
LABEL_65:
  v53 = re::globalAllocators(v51);
  v54 = (_QWORD *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v53[2] + 32))(v53[2], 8, 8);
  *v54 = &off_24ED42D38;
  v169 = &off_24ED38C30;
  v170 = (re *)re::internal::AssetCompilerRegistryHelper::deleter;
  v173 = (id *)&v169;
  v174 = v54;
  v175 = &off_24ED38C30;
  v176 = re::internal::AssetCompilerRegistryHelper::deleter;
  v177 = &v175;
  re::AssetCompilerRegistry::registerAssetCompiler((uint64_t)a1, (uint64_t *)&v174);
  std::unique_ptr<re::RigHierarchy,std::function<void ()(re::RigHierarchy*)>>::~unique_ptr[abi:nn180100]((uint64_t *)&v174);
  v55 = (re *)v173;
  if (v173 == (id *)&v169)
  {
    v56 = 4;
    v55 = (re *)&v169;
  }
  else
  {
    if (!v173)
      goto LABEL_70;
    v56 = 5;
  }
  v55 = (re *)(*(uint64_t (**)(void))(*(_QWORD *)v55 + 8 * v56))();
LABEL_70:
  v57 = re::globalAllocators(v55);
  v58 = (_QWORD *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v57[2] + 32))(v57[2], 8, 8);
  *v58 = &off_24ED38D48;
  v169 = &off_24ED38C30;
  v170 = (re *)re::internal::AssetCompilerRegistryHelper::deleter;
  v173 = (id *)&v169;
  v174 = v58;
  v175 = &off_24ED38C30;
  v176 = re::internal::AssetCompilerRegistryHelper::deleter;
  v177 = &v175;
  re::AssetCompilerRegistry::registerAssetCompiler((uint64_t)a1, (uint64_t *)&v174);
  std::unique_ptr<re::RigHierarchy,std::function<void ()(re::RigHierarchy*)>>::~unique_ptr[abi:nn180100]((uint64_t *)&v174);
  v59 = (re *)v173;
  if (v173 == (id *)&v169)
  {
    v60 = 4;
    v59 = (re *)&v169;
  }
  else
  {
    if (!v173)
      goto LABEL_75;
    v60 = 5;
  }
  v59 = (re *)(*(uint64_t (**)(void))(*(_QWORD *)v59 + 8 * v60))();
LABEL_75:
  v61 = re::globalAllocators(v59);
  v62 = (_QWORD *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v61[2] + 32))(v61[2], 8, 8);
  *v62 = &off_24ED38DB0;
  v169 = &off_24ED38C30;
  v170 = (re *)re::internal::AssetCompilerRegistryHelper::deleter;
  v173 = (id *)&v169;
  v174 = v62;
  v175 = &off_24ED38C30;
  v176 = re::internal::AssetCompilerRegistryHelper::deleter;
  v177 = &v175;
  re::AssetCompilerRegistry::registerAssetCompiler((uint64_t)a1, (uint64_t *)&v174);
  std::unique_ptr<re::RigHierarchy,std::function<void ()(re::RigHierarchy*)>>::~unique_ptr[abi:nn180100]((uint64_t *)&v174);
  v63 = (re *)v173;
  if (v173 == (id *)&v169)
  {
    v64 = 4;
    v63 = (re *)&v169;
  }
  else
  {
    if (!v173)
      goto LABEL_80;
    v64 = 5;
  }
  v63 = (re *)(*(uint64_t (**)(void))(*(_QWORD *)v63 + 8 * v64))();
LABEL_80:
  v65 = re::globalAllocators(v63);
  v66 = (_QWORD *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v65[2] + 32))(v65[2], 8, 8);
  *v66 = &off_24ED44BB0;
  v169 = &off_24ED38C30;
  v170 = (re *)re::internal::AssetCompilerRegistryHelper::deleter;
  v173 = (id *)&v169;
  v174 = v66;
  v175 = &off_24ED38C30;
  v176 = re::internal::AssetCompilerRegistryHelper::deleter;
  v177 = &v175;
  re::AssetCompilerRegistry::registerAssetCompiler((uint64_t)a1, (uint64_t *)&v174);
  std::unique_ptr<re::RigHierarchy,std::function<void ()(re::RigHierarchy*)>>::~unique_ptr[abi:nn180100]((uint64_t *)&v174);
  v67 = (re *)v173;
  if (v173 == (id *)&v169)
  {
    v68 = 4;
    v67 = (re *)&v169;
  }
  else
  {
    if (!v173)
      goto LABEL_85;
    v68 = 5;
  }
  v67 = (re *)(*(uint64_t (**)(void))(*(_QWORD *)v67 + 8 * v68))();
LABEL_85:
  v69 = re::globalAllocators(v67);
  v70 = (_QWORD *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v69[2] + 32))(v69[2], 8, 8);
  *v70 = &off_24ED44C18;
  v169 = &off_24ED38C30;
  v170 = (re *)re::internal::AssetCompilerRegistryHelper::deleter;
  v173 = (id *)&v169;
  v174 = v70;
  v175 = &off_24ED38C30;
  v176 = re::internal::AssetCompilerRegistryHelper::deleter;
  v177 = &v175;
  re::AssetCompilerRegistry::registerAssetCompiler((uint64_t)a1, (uint64_t *)&v174);
  std::unique_ptr<re::RigHierarchy,std::function<void ()(re::RigHierarchy*)>>::~unique_ptr[abi:nn180100]((uint64_t *)&v174);
  v71 = (re *)v173;
  if (v173 == (id *)&v169)
  {
    v72 = 4;
    v71 = (re *)&v169;
  }
  else
  {
    if (!v173)
      goto LABEL_90;
    v72 = 5;
  }
  v71 = (re *)(*(uint64_t (**)(void))(*(_QWORD *)v71 + 8 * v72))();
LABEL_90:
  v73 = re::globalAllocators(v71);
  v74 = (_QWORD *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v73[2] + 32))(v73[2], 8, 8);
  *v74 = &off_24ED42C40;
  v169 = &off_24ED38C30;
  v170 = (re *)re::internal::AssetCompilerRegistryHelper::deleter;
  v173 = (id *)&v169;
  v174 = v74;
  v175 = &off_24ED38C30;
  v176 = re::internal::AssetCompilerRegistryHelper::deleter;
  v177 = &v175;
  re::AssetCompilerRegistry::registerAssetCompiler((uint64_t)a1, (uint64_t *)&v174);
  std::unique_ptr<re::RigHierarchy,std::function<void ()(re::RigHierarchy*)>>::~unique_ptr[abi:nn180100]((uint64_t *)&v174);
  v75 = (re *)v173;
  if (v173 == (id *)&v169)
  {
    v76 = 4;
    v75 = (re *)&v169;
  }
  else
  {
    if (!v173)
      goto LABEL_95;
    v76 = 5;
  }
  v75 = (re *)(*(uint64_t (**)(void))(*(_QWORD *)v75 + 8 * v76))();
LABEL_95:
  v77 = re::globalAllocators(v75);
  v78 = (_QWORD *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v77[2] + 32))(v77[2], 8, 8);
  *v78 = &off_24ED449D8;
  v169 = &off_24ED38C30;
  v170 = (re *)re::internal::AssetCompilerRegistryHelper::deleter;
  v173 = (id *)&v169;
  v174 = v78;
  v175 = &off_24ED38C30;
  v176 = re::internal::AssetCompilerRegistryHelper::deleter;
  v177 = &v175;
  re::AssetCompilerRegistry::registerAssetCompiler((uint64_t)a1, (uint64_t *)&v174);
  std::unique_ptr<re::RigHierarchy,std::function<void ()(re::RigHierarchy*)>>::~unique_ptr[abi:nn180100]((uint64_t *)&v174);
  v79 = (re *)v173;
  if (v173 == (id *)&v169)
  {
    v80 = 4;
    v79 = (re *)&v169;
  }
  else
  {
    if (!v173)
      goto LABEL_100;
    v80 = 5;
  }
  v79 = (re *)(*(uint64_t (**)(void))(*(_QWORD *)v79 + 8 * v80))();
LABEL_100:
  v81 = re::globalAllocators(v79);
  v82 = (_QWORD *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v81[2] + 32))(v81[2], 8, 8);
  *v82 = &off_24ED43080;
  v169 = &off_24ED38C30;
  v170 = (re *)re::internal::AssetCompilerRegistryHelper::deleter;
  v173 = (id *)&v169;
  v174 = v82;
  v175 = &off_24ED38C30;
  v176 = re::internal::AssetCompilerRegistryHelper::deleter;
  v177 = &v175;
  re::AssetCompilerRegistry::registerAssetCompiler((uint64_t)a1, (uint64_t *)&v174);
  std::unique_ptr<re::RigHierarchy,std::function<void ()(re::RigHierarchy*)>>::~unique_ptr[abi:nn180100]((uint64_t *)&v174);
  v83 = (re *)v173;
  if (v173 == (id *)&v169)
  {
    v84 = 4;
    v83 = (re *)&v169;
  }
  else
  {
    if (!v173)
      goto LABEL_105;
    v84 = 5;
  }
  v83 = (re *)(*(uint64_t (**)(void))(*(_QWORD *)v83 + 8 * v84))();
LABEL_105:
  v85 = re::globalAllocators(v83);
  v86 = (_QWORD *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v85[2] + 32))(v85[2], 8, 8);
  *v86 = &off_24ED430E8;
  v169 = &off_24ED38C30;
  v170 = (re *)re::internal::AssetCompilerRegistryHelper::deleter;
  v173 = (id *)&v169;
  v174 = v86;
  v175 = &off_24ED38C30;
  v176 = re::internal::AssetCompilerRegistryHelper::deleter;
  v177 = &v175;
  re::AssetCompilerRegistry::registerAssetCompiler((uint64_t)a1, (uint64_t *)&v174);
  std::unique_ptr<re::RigHierarchy,std::function<void ()(re::RigHierarchy*)>>::~unique_ptr[abi:nn180100]((uint64_t *)&v174);
  v87 = (re *)v173;
  if (v173 == (id *)&v169)
  {
    v88 = 4;
    v87 = (re *)&v169;
  }
  else
  {
    if (!v173)
      goto LABEL_110;
    v88 = 5;
  }
  v87 = (re *)(*(uint64_t (**)(void))(*(_QWORD *)v87 + 8 * v88))();
LABEL_110:
  v89 = re::globalAllocators(v87);
  v90 = (_QWORD *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v89[2] + 32))(v89[2], 8, 8);
  *v90 = &off_24ED42E80;
  v169 = &off_24ED38C30;
  v170 = (re *)re::internal::AssetCompilerRegistryHelper::deleter;
  v173 = (id *)&v169;
  v174 = v90;
  v175 = &off_24ED38C30;
  v176 = re::internal::AssetCompilerRegistryHelper::deleter;
  v177 = &v175;
  re::AssetCompilerRegistry::registerAssetCompiler((uint64_t)a1, (uint64_t *)&v174);
  std::unique_ptr<re::RigHierarchy,std::function<void ()(re::RigHierarchy*)>>::~unique_ptr[abi:nn180100]((uint64_t *)&v174);
  v91 = (re *)v173;
  if (v173 == (id *)&v169)
  {
    v92 = 4;
    v91 = (re *)&v169;
  }
  else
  {
    if (!v173)
      goto LABEL_115;
    v92 = 5;
  }
  v91 = (re *)(*(uint64_t (**)(void))(*(_QWORD *)v91 + 8 * v92))();
LABEL_115:
  v93 = re::globalAllocators(v91);
  v94 = (_QWORD *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v93[2] + 32))(v93[2], 8, 8);
  *v94 = &off_24ED44A40;
  v169 = &off_24ED38C30;
  v170 = (re *)re::internal::AssetCompilerRegistryHelper::deleter;
  v173 = (id *)&v169;
  v174 = v94;
  v175 = &off_24ED38C30;
  v176 = re::internal::AssetCompilerRegistryHelper::deleter;
  v177 = &v175;
  re::AssetCompilerRegistry::registerAssetCompiler((uint64_t)a1, (uint64_t *)&v174);
  std::unique_ptr<re::RigHierarchy,std::function<void ()(re::RigHierarchy*)>>::~unique_ptr[abi:nn180100]((uint64_t *)&v174);
  v95 = (re *)v173;
  if (v173 == (id *)&v169)
  {
    v96 = 4;
    v95 = (re *)&v169;
  }
  else
  {
    if (!v173)
      goto LABEL_120;
    v96 = 5;
  }
  v95 = (re *)(*(uint64_t (**)(void))(*(_QWORD *)v95 + 8 * v96))();
LABEL_120:
  v97 = re::globalAllocators(v95);
  v98 = (_QWORD *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v97[2] + 32))(v97[2], 8, 8);
  *v98 = &off_24ED23B10;
  v169 = &off_24ED38C30;
  v170 = (re *)re::internal::AssetCompilerRegistryHelper::deleter;
  v173 = (id *)&v169;
  v174 = v98;
  v175 = &off_24ED38C30;
  v176 = re::internal::AssetCompilerRegistryHelper::deleter;
  v177 = &v175;
  re::AssetCompilerRegistry::registerAssetCompiler((uint64_t)a1, (uint64_t *)&v174);
  std::unique_ptr<re::RigHierarchy,std::function<void ()(re::RigHierarchy*)>>::~unique_ptr[abi:nn180100]((uint64_t *)&v174);
  v99 = (re *)v173;
  if (v173 == (id *)&v169)
  {
    v100 = 4;
    v99 = (re *)&v169;
  }
  else
  {
    if (!v173)
      goto LABEL_125;
    v100 = 5;
  }
  v99 = (re *)(*(uint64_t (**)(void))(*(_QWORD *)v99 + 8 * v100))();
LABEL_125:
  v101 = re::globalAllocators(v99);
  v102 = (_QWORD *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v101[2] + 32))(v101[2], 8, 8);
  *v102 = &off_24ED43150;
  v169 = &off_24ED38C30;
  v170 = (re *)re::internal::AssetCompilerRegistryHelper::deleter;
  v173 = (id *)&v169;
  v174 = v102;
  v175 = &off_24ED38C30;
  v176 = re::internal::AssetCompilerRegistryHelper::deleter;
  v177 = &v175;
  re::AssetCompilerRegistry::registerAssetCompiler((uint64_t)a1, (uint64_t *)&v174);
  std::unique_ptr<re::RigHierarchy,std::function<void ()(re::RigHierarchy*)>>::~unique_ptr[abi:nn180100]((uint64_t *)&v174);
  v103 = (re *)v173;
  if (v173 == (id *)&v169)
  {
    v104 = 4;
    v103 = (re *)&v169;
  }
  else
  {
    if (!v173)
      goto LABEL_130;
    v104 = 5;
  }
  v103 = (re *)(*(uint64_t (**)(void))(*(_QWORD *)v103 + 8 * v104))();
LABEL_130:
  v105 = re::globalAllocators(v103);
  v106 = (_QWORD *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v105[2] + 32))(v105[2], 8, 8);
  *v106 = &off_24ED42AF0;
  v169 = &off_24ED38C30;
  v170 = (re *)re::internal::AssetCompilerRegistryHelper::deleter;
  v173 = (id *)&v169;
  v174 = v106;
  v175 = &off_24ED38C30;
  v176 = re::internal::AssetCompilerRegistryHelper::deleter;
  v177 = &v175;
  re::AssetCompilerRegistry::registerAssetCompiler((uint64_t)a1, (uint64_t *)&v174);
  std::unique_ptr<re::RigHierarchy,std::function<void ()(re::RigHierarchy*)>>::~unique_ptr[abi:nn180100]((uint64_t *)&v174);
  v107 = (re *)v173;
  if (v173 == (id *)&v169)
  {
    v108 = 4;
    v107 = (re *)&v169;
  }
  else
  {
    if (!v173)
      goto LABEL_135;
    v108 = 5;
  }
  v107 = (re *)(*(uint64_t (**)(void))(*(_QWORD *)v107 + 8 * v108))();
LABEL_135:
  v109 = re::globalAllocators(v107);
  v110 = (_QWORD *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v109[2] + 32))(v109[2], 8, 8);
  *v110 = &off_24ED44590;
  v169 = &off_24ED38C30;
  v170 = (re *)re::internal::AssetCompilerRegistryHelper::deleter;
  v173 = (id *)&v169;
  v174 = v110;
  v175 = &off_24ED38C30;
  v176 = re::internal::AssetCompilerRegistryHelper::deleter;
  v177 = &v175;
  re::AssetCompilerRegistry::registerAssetCompiler((uint64_t)a1, (uint64_t *)&v174);
  std::unique_ptr<re::RigHierarchy,std::function<void ()(re::RigHierarchy*)>>::~unique_ptr[abi:nn180100]((uint64_t *)&v174);
  v111 = (re *)v173;
  if (v173 == (id *)&v169)
  {
    v112 = 4;
    v111 = (re *)&v169;
  }
  else
  {
    if (!v173)
      goto LABEL_140;
    v112 = 5;
  }
  v111 = (re *)(*(uint64_t (**)(void))(*(_QWORD *)v111 + 8 * v112))();
LABEL_140:
  v113 = re::globalAllocators(v111);
  v114 = (_QWORD *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v113[2] + 32))(v113[2], 8, 8);
  *v114 = &off_24ED44430;
  v169 = &off_24ED38C30;
  v170 = (re *)re::internal::AssetCompilerRegistryHelper::deleter;
  v173 = (id *)&v169;
  v174 = v114;
  v175 = &off_24ED38C30;
  v176 = re::internal::AssetCompilerRegistryHelper::deleter;
  v177 = &v175;
  re::AssetCompilerRegistry::registerAssetCompiler((uint64_t)a1, (uint64_t *)&v174);
  std::unique_ptr<re::RigHierarchy,std::function<void ()(re::RigHierarchy*)>>::~unique_ptr[abi:nn180100]((uint64_t *)&v174);
  v115 = (re *)v173;
  if (v173 == (id *)&v169)
  {
    v116 = 4;
    v115 = (re *)&v169;
  }
  else
  {
    if (!v173)
      goto LABEL_145;
    v116 = 5;
  }
  v115 = (re *)(*(uint64_t (**)(void))(*(_QWORD *)v115 + 8 * v116))();
LABEL_145:
  v117 = re::globalAllocators(v115);
  v118 = (_QWORD *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v117[2] + 32))(v117[2], 16, 8);
  *v118 = &off_24ED44758;
  v118[1] = &off_24ED44BB0;
  v169 = &off_24ED38C30;
  v170 = (re *)re::internal::AssetCompilerRegistryHelper::deleter;
  v173 = (id *)&v169;
  v174 = v118;
  v175 = &off_24ED38C30;
  v176 = re::internal::AssetCompilerRegistryHelper::deleter;
  v177 = &v175;
  re::AssetCompilerRegistry::registerAssetCompiler((uint64_t)a1, (uint64_t *)&v174);
  std::unique_ptr<re::RigHierarchy,std::function<void ()(re::RigHierarchy*)>>::~unique_ptr[abi:nn180100]((uint64_t *)&v174);
  v119 = (re *)v173;
  if (v173 == (id *)&v169)
  {
    v120 = 4;
    v119 = (re *)&v169;
  }
  else
  {
    if (!v173)
      goto LABEL_150;
    v120 = 5;
  }
  v119 = (re *)(*(uint64_t (**)(void))(*(_QWORD *)v119 + 8 * v120))();
LABEL_150:
  v121 = re::globalAllocators(v119);
  v122 = (_QWORD *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v121[2] + 32))(v121[2], 16, 8);
  *v122 = &off_24ED447D8;
  v122[1] = &off_24ED44C18;
  v169 = &off_24ED38C30;
  v170 = (re *)re::internal::AssetCompilerRegistryHelper::deleter;
  v173 = (id *)&v169;
  v174 = v122;
  v175 = &off_24ED38C30;
  v176 = re::internal::AssetCompilerRegistryHelper::deleter;
  v177 = &v175;
  re::AssetCompilerRegistry::registerAssetCompiler((uint64_t)a1, (uint64_t *)&v174);
  std::unique_ptr<re::RigHierarchy,std::function<void ()(re::RigHierarchy*)>>::~unique_ptr[abi:nn180100]((uint64_t *)&v174);
  v123 = (re *)v173;
  if (v173 == (id *)&v169)
  {
    v124 = 4;
    v123 = (re *)&v169;
  }
  else
  {
    if (!v173)
      goto LABEL_155;
    v124 = 5;
  }
  v123 = (re *)(*(uint64_t (**)(void))(*(_QWORD *)v123 + 8 * v124))();
LABEL_155:
  v125 = re::globalAllocators(v123);
  v126 = (_QWORD *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v125[2] + 32))(v125[2], 16, 8);
  *v126 = &off_24ED448D8;
  v126[1] = &off_24ED42E80;
  v169 = &off_24ED38C30;
  v170 = (re *)re::internal::AssetCompilerRegistryHelper::deleter;
  v173 = (id *)&v169;
  v174 = v126;
  v175 = &off_24ED38C30;
  v176 = re::internal::AssetCompilerRegistryHelper::deleter;
  v177 = &v175;
  re::AssetCompilerRegistry::registerAssetCompiler((uint64_t)a1, (uint64_t *)&v174);
  std::unique_ptr<re::RigHierarchy,std::function<void ()(re::RigHierarchy*)>>::~unique_ptr[abi:nn180100]((uint64_t *)&v174);
  v127 = (re *)v173;
  if (v173 == (id *)&v169)
  {
    v128 = 4;
    v127 = (re *)&v169;
  }
  else
  {
    if (!v173)
      goto LABEL_160;
    v128 = 5;
  }
  v127 = (re *)(*(uint64_t (**)(void))(*(_QWORD *)v127 + 8 * v128))();
LABEL_160:
  v129 = re::globalAllocators(v127);
  v130 = (_QWORD *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v129[2] + 32))(v129[2], 24, 8);
  v130[1] = &off_24ED42EE8;
  v130[2] = 0;
  *v130 = &off_24ED44958;
  v169 = &off_24ED38C30;
  v170 = (re *)re::internal::AssetCompilerRegistryHelper::deleter;
  v173 = (id *)&v169;
  v174 = v130;
  v175 = &off_24ED38C30;
  v176 = re::internal::AssetCompilerRegistryHelper::deleter;
  v177 = &v175;
  re::AssetCompilerRegistry::registerAssetCompiler((uint64_t)a1, (uint64_t *)&v174);
  std::unique_ptr<re::RigHierarchy,std::function<void ()(re::RigHierarchy*)>>::~unique_ptr[abi:nn180100]((uint64_t *)&v174);
  v131 = (re *)v173;
  if (v173 == (id *)&v169)
  {
    v132 = 4;
    v131 = (re *)&v169;
  }
  else
  {
    if (!v173)
      goto LABEL_165;
    v132 = 5;
  }
  v131 = (re *)(*(uint64_t (**)(void))(*(_QWORD *)v131 + 8 * v132))();
LABEL_165:
  v133 = re::globalAllocators(v131);
  v134 = (_QWORD *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v133[2] + 32))(v133[2], 16, 8);
  *v134 = &off_24ED44858;
  v134[1] = &off_24ED449D8;
  v169 = &off_24ED38C30;
  v170 = (re *)re::internal::AssetCompilerRegistryHelper::deleter;
  v173 = (id *)&v169;
  v174 = v134;
  v175 = &off_24ED38C30;
  v176 = re::internal::AssetCompilerRegistryHelper::deleter;
  v177 = &v175;
  re::AssetCompilerRegistry::registerAssetCompiler((uint64_t)a1, (uint64_t *)&v174);
  std::unique_ptr<re::RigHierarchy,std::function<void ()(re::RigHierarchy*)>>::~unique_ptr[abi:nn180100]((uint64_t *)&v174);
  v135 = (re *)v173;
  if (v173 == (id *)&v169)
  {
    v136 = 4;
    v135 = (re *)&v169;
  }
  else
  {
    if (!v173)
      goto LABEL_170;
    v136 = 5;
  }
  v135 = (re *)(*(uint64_t (**)(void))(*(_QWORD *)v135 + 8 * v136))();
LABEL_170:
  v137 = re::globalAllocators(v135);
  v138 = (_QWORD *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v137[2] + 32))(v137[2], 8, 8);
  *v138 = &off_24ED38E48;
  v169 = &off_24ED38C30;
  v170 = (re *)re::internal::AssetCompilerRegistryHelper::deleter;
  v173 = (id *)&v169;
  v174 = v138;
  v175 = &off_24ED38C30;
  v176 = re::internal::AssetCompilerRegistryHelper::deleter;
  v177 = &v175;
  re::AssetCompilerRegistry::registerAssetCompiler((uint64_t)a1, (uint64_t *)&v174);
  std::unique_ptr<re::RigHierarchy,std::function<void ()(re::RigHierarchy*)>>::~unique_ptr[abi:nn180100]((uint64_t *)&v174);
  v139 = (re *)v173;
  if (v173 == (id *)&v169)
  {
    v140 = 4;
    v139 = (re *)&v169;
  }
  else
  {
    if (!v173)
      goto LABEL_175;
    v140 = 5;
  }
  v139 = (re *)(*(uint64_t (**)(void))(*(_QWORD *)v139 + 8 * v140))();
LABEL_175:
  v141 = re::globalAllocators(v139);
  v142 = (_QWORD *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v141[2] + 32))(v141[2], 8, 8);
  *v142 = &off_24ED37598;
  v169 = &off_24ED38C30;
  v170 = (re *)re::internal::AssetCompilerRegistryHelper::deleter;
  v173 = (id *)&v169;
  v174 = v142;
  v175 = &off_24ED38C30;
  v176 = re::internal::AssetCompilerRegistryHelper::deleter;
  v177 = &v175;
  re::AssetCompilerRegistry::registerAssetCompiler((uint64_t)a1, (uint64_t *)&v174);
  std::unique_ptr<re::RigHierarchy,std::function<void ()(re::RigHierarchy*)>>::~unique_ptr[abi:nn180100]((uint64_t *)&v174);
  v143 = (re *)v173;
  if (v173 == (id *)&v169)
  {
    v144 = 4;
    v143 = (re *)&v169;
  }
  else
  {
    if (!v173)
      goto LABEL_180;
    v144 = 5;
  }
  v143 = (re *)(*(uint64_t (**)(void))(*(_QWORD *)v143 + 8 * v144))();
LABEL_180:
  v145 = re::globalAllocators(v143);
  v146 = (_QWORD *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v145[2] + 32))(v145[2], 8, 8);
  *v146 = &off_24ED390A0;
  v169 = &off_24ED38C30;
  v170 = (re *)re::internal::AssetCompilerRegistryHelper::deleter;
  v173 = (id *)&v169;
  v174 = v146;
  v175 = &off_24ED38C30;
  v176 = re::internal::AssetCompilerRegistryHelper::deleter;
  v177 = &v175;
  re::AssetCompilerRegistry::registerAssetCompiler((uint64_t)a1, (uint64_t *)&v174);
  std::unique_ptr<re::RigHierarchy,std::function<void ()(re::RigHierarchy*)>>::~unique_ptr[abi:nn180100]((uint64_t *)&v174);
  v147 = (re *)v173;
  if (v173 == (id *)&v169)
  {
    v148 = 4;
    v147 = (re *)&v169;
  }
  else
  {
    if (!v173)
      goto LABEL_185;
    v148 = 5;
  }
  v147 = (re *)(*(uint64_t (**)(void))(*(_QWORD *)v147 + 8 * v148))();
LABEL_185:
  v149 = re::globalAllocators(v147);
  v150 = (_QWORD *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v149[2] + 32))(v149[2], 8, 8);
  *v150 = &off_24ED39E98;
  v169 = &off_24ED38C30;
  v170 = (re *)re::internal::AssetCompilerRegistryHelper::deleter;
  v173 = (id *)&v169;
  v174 = v150;
  v175 = &off_24ED38C30;
  v176 = re::internal::AssetCompilerRegistryHelper::deleter;
  v177 = &v175;
  re::AssetCompilerRegistry::registerAssetCompiler((uint64_t)a1, (uint64_t *)&v174);
  std::unique_ptr<re::RigHierarchy,std::function<void ()(re::RigHierarchy*)>>::~unique_ptr[abi:nn180100]((uint64_t *)&v174);
  v151 = (re *)v173;
  if (v173 == (id *)&v169)
  {
    v152 = 4;
    v151 = (re *)&v169;
  }
  else
  {
    if (!v173)
      goto LABEL_190;
    v152 = 5;
  }
  v151 = (re *)(*(uint64_t (**)(void))(*(_QWORD *)v151 + 8 * v152))();
LABEL_190:
  v153 = re::globalAllocators(v151);
  v154 = (_QWORD *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v153[2] + 32))(v153[2], 8, 8);
  *v154 = &off_24ED44688;
  v169 = &off_24ED38C30;
  v170 = (re *)re::internal::AssetCompilerRegistryHelper::deleter;
  v173 = (id *)&v169;
  v174 = v154;
  v175 = &off_24ED38C30;
  v176 = re::internal::AssetCompilerRegistryHelper::deleter;
  v177 = &v175;
  re::AssetCompilerRegistry::registerAssetCompiler((uint64_t)a1, (uint64_t *)&v174);
  std::unique_ptr<re::RigHierarchy,std::function<void ()(re::RigHierarchy*)>>::~unique_ptr[abi:nn180100]((uint64_t *)&v174);
  result = (uint64_t (***)())v173;
  if (v173 == (id *)&v169)
  {
    v156 = 4;
    result = &v169;
  }
  else
  {
    if (!v173)
      return result;
    v156 = 5;
  }
  return (uint64_t (***)())(*result)[v156]();
}

void sub_2253622D0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *a16, void *a17, void *a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27)
{

  if (a26)
  {
    if ((a27 & 1) != 0)
      (*(void (**)(void))(*(_QWORD *)a26 + 40))();
  }

  _Unwind_Resume(a1);
}

void re::AssetHelper::makeMutableMaterialMemoryAsset(uint64_t a1, re::RenderManager *a2, re::AssetHandle *a3, uint64_t a4)
{
  _BYTE v7[24];

  re::AssetHandle::AssetHandle((re::AssetHandle *)v7, a3);
  re::MaterialAsset::makeMutableMaterialMemoryAsset(a1, a2, (re::AssetHandle *)v7, 0, a4);
  re::AssetHandle::~AssetHandle((re::AssetHandle *)v7);
}

void re::AssetHelper::makeMeshMemoryAsset(uint64_t a1, _anonymous_namespace_ *a2, int a3, int *a4, uint64_t a5)
{
  re *MeshAssetDataWithGeomMeshArray;
  uint64_t (*v11)(void);
  uint64_t v12;
  uint64_t v13;
  uint64_t *v14;
  _BYTE v15[8];
  uint64_t v16;
  _BYTE v17[16];

  re::internal::AriadneSignpostScopeGuard::AriadneSignpostScopeGuard((re::internal::AriadneSignpostScopeGuard *)v17, 2008, (uint64_t)a2);
  MeshAssetDataWithGeomMeshArray = (re *)re::makeMeshAssetDataWithGeomMeshArray(a2, a3, 0, a4, (uint64_t)v15);
  LODWORD(a4) = v15[0];
  v11 = *(uint64_t (**)(void))(*(_QWORD *)re::globalAllocators(MeshAssetDataWithGeomMeshArray)[2] + 32);
  if ((_DWORD)a4)
  {
    v12 = v11();
    v13 = re::MeshAsset::MeshAsset(v12, (uint64_t)&v16);
  }
  else
  {
    v13 = v11();
    v12 = v13;
    *(_QWORD *)v13 = &off_24ED30A60;
    *(_QWORD *)(v13 + 8) = 0;
    *(_QWORD *)(v13 + 16) = 0;
    *(_QWORD *)(v13 + 24) = 0;
    *(_DWORD *)(v13 + 32) = 0;
    *(_OWORD *)(v13 + 40) = 0u;
    *(_OWORD *)(v13 + 56) = 0u;
    *(_DWORD *)(v13 + 72) = 0;
    *(_OWORD *)(v13 + 80) = 0u;
    *(_OWORD *)(v13 + 96) = 0u;
    *(_DWORD *)(v13 + 112) = 0;
    *(_OWORD *)(v13 + 120) = 0u;
    *(_OWORD *)(v13 + 136) = 0u;
    *(_DWORD *)(v13 + 152) = 0;
    *(_DWORD *)(v13 + 424) = 0;
    *(_OWORD *)(v13 + 392) = 0u;
    *(_OWORD *)(v13 + 408) = 0u;
    *(_OWORD *)(v13 + 484) = 0u;
    *(_OWORD *)(v13 + 472) = 0u;
    *(_OWORD *)(v13 + 456) = 0u;
    *(_DWORD *)(v13 + 192) = 0;
    *(_OWORD *)(v13 + 160) = 0u;
    *(_OWORD *)(v13 + 176) = 0u;
    *(_OWORD *)(v13 + 200) = 0u;
    *(_OWORD *)(v13 + 216) = 0u;
    *(_DWORD *)(v13 + 232) = 0;
    *(_OWORD *)(v13 + 240) = 0u;
    *(_OWORD *)(v13 + 256) = 0u;
    *(_DWORD *)(v13 + 272) = 0;
    *(_OWORD *)(v13 + 280) = 0u;
    *(_OWORD *)(v13 + 296) = 0u;
    *(_OWORD *)(v13 + 312) = 0u;
    *(_OWORD *)(v13 + 328) = 0u;
    *(_OWORD *)(v13 + 344) = 0u;
    *(_OWORD *)(v13 + 360) = 0u;
    *(_OWORD *)(v13 + 372) = 0u;
    *(_DWORD *)(v13 + 448) = 0;
    *(_QWORD *)(v13 + 432) = 0;
    *(_QWORD *)(v13 + 440) = 0;
    *(_QWORD *)(v13 + 500) = 0x7FFFFFFFLL;
    *(_DWORD *)(v13 + 544) = 0;
    *(_OWORD *)(v13 + 512) = 0u;
    *(_OWORD *)(v13 + 528) = 0u;
    *(_QWORD *)(v13 + 548) = 0x7FFFFFFFLL;
    *(_OWORD *)(v13 + 905) = 0u;
    *(_OWORD *)(v13 + 880) = 0u;
    *(_OWORD *)(v13 + 896) = 0u;
    *(_OWORD *)(v13 + 848) = 0u;
    *(_OWORD *)(v13 + 864) = 0u;
    *(_OWORD *)(v13 + 816) = 0u;
    *(_OWORD *)(v13 + 832) = 0u;
    *(_OWORD *)(v13 + 784) = 0u;
    *(_OWORD *)(v13 + 800) = 0u;
    *(_OWORD *)(v13 + 752) = 0u;
    *(_OWORD *)(v13 + 768) = 0u;
    *(_OWORD *)(v13 + 720) = 0u;
    *(_OWORD *)(v13 + 736) = 0u;
    *(_OWORD *)(v13 + 688) = 0u;
    *(_OWORD *)(v13 + 704) = 0u;
    *(_OWORD *)(v13 + 656) = 0u;
    *(_OWORD *)(v13 + 672) = 0u;
    *(_OWORD *)(v13 + 624) = 0u;
    *(_OWORD *)(v13 + 640) = 0u;
    *(_OWORD *)(v13 + 592) = 0u;
    *(_OWORD *)(v13 + 608) = 0u;
    *(_OWORD *)(v13 + 560) = 0u;
    *(_OWORD *)(v13 + 576) = 0u;
    *(_DWORD *)(v13 + 924) = 2;
    *(_QWORD *)(v13 + 928) = 0;
    *(_QWORD *)(v13 + 944) = 0;
    *(_QWORD *)(v13 + 936) = 0;
    *(_BYTE *)(v13 + 952) = 0;
  }
  v14 = re::MeshAsset::assetType((re::MeshAsset *)v13);
  (*(void (**)(uint64_t, uint64_t, uint64_t *, _QWORD, uint64_t, _QWORD))(*(_QWORD *)a1 + 416))(a1, v12, v14, 0, a5, 0);
  re::Result<re::MeshAssetData,re::DetailedError>::~Result((uint64_t)v15);
  re::internal::AriadneSignpostScopeGuard::~AriadneSignpostScopeGuard((re::internal::AriadneSignpostScopeGuard *)v17);
}

void sub_2253626A8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v2;
  va_list va;

  va_start(va, a2);
  re::Result<re::MeshAssetData,re::DetailedError>::~Result((uint64_t)va);
  re::internal::AriadneSignpostScopeGuard::~AriadneSignpostScopeGuard((re::internal::AriadneSignpostScopeGuard *)(v2 - 80));
  _Unwind_Resume(a1);
}

uint64_t re::AssetHelper::makeTextureMemoryAsset(uint64_t a1, id *a2, uint64_t a3)
{
  uint64_t TextureAsset;
  re::TextureAsset *v6;
  uint64_t *v7;
  _BYTE v9[8];
  id v10[10];
  unsigned int v11;
  id v12;
  _BYTE v13[25];
  int v14;

  v9[0] = 0;
  v10[0] = *a2;
  v11 = 0;
  v12 = 0;
  memset(&v13[12], 0, 13);
  *(_DWORD *)v13 = 16777473;
  v13[4] = 1;
  *(_DWORD *)&v13[8] = 1;
  v14 = 0;
  TextureAsset = re::TextureAsset::makeTextureAsset((uint64_t)v9, 6, (__int128 *)v13);

  if (v11 != -1)
    v6 = (re::TextureAsset *)((uint64_t (*)(_BYTE *, id *))*(&__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8nn180100IZNS0_6__dtorINS0_8__traitsIJN2NS9SharedPtrIN3MTL7TextureEEEN2re10CPUTextureEEEELNS0_6_TraitE1EE9__destroyB8nn180100EvEUlRT_E_JRSF_EEEDcOSG_DpOT0____fmatrix_0
                                                                     + v11))(v13, v10);
  v7 = re::TextureAsset::assetType(v6);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t *, _QWORD, uint64_t, _QWORD))(*(_QWORD *)a1 + 416))(a1, TextureAsset, v7, 0, a3, 0);
}

void re::TextureData::~TextureData(id *this)
{
  uint64_t v2;
  char v3;

  v2 = *((unsigned int *)this + 22);
  if ((_DWORD)v2 != -1)
    ((void (*)(char *, id *))*(&__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8nn180100IZNS0_6__dtorINS0_8__traitsIJN2NS9SharedPtrIN3MTL7TextureEEEN2re10CPUTextureEEEELNS0_6_TraitE1EE9__destroyB8nn180100EvEUlRT_E_JRSF_EEEDcOSG_DpOT0____fmatrix_0
                                        + v2))(&v3, this + 1);
  *((_DWORD *)this + 22) = -1;
}

uint64_t re::AssetHelper::makeCollisionShapeAsset(re *a1, re *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t *v10;
  re *v11;
  uint64_t *v12;
  re **v13;
  uint64_t *v14;

  v10 = re::globalAllocators(a1);
  v11 = (re *)re::convertToSerializable(a2, a3, a4, v10[2], v10[2]);
  v12 = re::globalAllocators(v11);
  v13 = (re **)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v12[2] + 32))(v12[2], 16, 8);
  *v13 = v11;
  v13[1] = a2;
  v14 = re::CollisionShapeAsset::assetType((re::CollisionShapeAsset *)v13);
  return (*(uint64_t (**)(re *, re **, uint64_t *, _QWORD, uint64_t, _QWORD))(*(_QWORD *)a1 + 416))(a1, v13, v14, 0, a5, 0);
}

uint64_t re::AssetHelper::makePhysicsMaterialAsset(re *a1, uint64_t a2, uint64_t a3)
{
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  uint64_t *v10;
  re::PhysicsMaterialAsset *v11;
  uint64_t *v12;

  v6 = re::globalAllocators(a1);
  v7 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v6[2] + 32))(v6[2], 24, 8);
  v8 = v7;
  if (v7)
  {
    v9 = *(_DWORD *)(a2 + 16);
    *(_QWORD *)v7 = &off_24ED7E200;
    *(_QWORD *)(v7 + 8) = *(_QWORD *)(a2 + 8);
    *(_DWORD *)(v7 + 16) = v9;
  }
  v10 = re::globalAllocators((re *)v7);
  v11 = (re::PhysicsMaterialAsset *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v10[2] + 32))(v10[2], 16, 8);
  *(_QWORD *)v11 = v8;
  *((_QWORD *)v11 + 1) = a2;
  v12 = re::PhysicsMaterialAsset::assetType(v11);
  return (*(uint64_t (**)(re *, re::PhysicsMaterialAsset *, uint64_t *, _QWORD, uint64_t, _QWORD))(*(_QWORD *)a1 + 416))(a1, v11, v12, 0, a3, 0);
}

uint64_t re::AssetHelper::makeIndexedTriangleMeshAsset(re *a1, re *a2, uint64_t a3)
{
  uint64_t *v6;
  re::Allocator *v7;
  re *v8;
  uint64_t *v9;
  re **v10;
  uint64_t *v11;

  v6 = re::globalAllocators(a1);
  v8 = (re *)re::convertToSerializable(a2, (const re::IndexedTriangleMesh *)v6[2], v7);
  v9 = re::globalAllocators(v8);
  v10 = (re **)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v9[2] + 32))(v9[2], 16, 8);
  *v10 = v8;
  v10[1] = a2;
  v11 = re::IndexedTriangleMeshAsset::assetType((re::IndexedTriangleMeshAsset *)v10);
  return (*(uint64_t (**)(re *, re **, uint64_t *, _QWORD, uint64_t, _QWORD))(*(_QWORD *)a1 + 416))(a1, v10, v11, 0, a3, 0);
}

re **re::AssetHelper::makeTimelineAsset(re *a1, uint64_t a2)
{
  uint64_t *v4;
  re *v5;
  uint64_t *v6;
  re **result;

  v4 = re::globalAllocators(a1);
  v5 = (re *)re::internal::convertToAssetData((uint64_t)a1, a2, v4[2]);
  v6 = re::globalAllocators(v5);
  result = (re **)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v6[2] + 32))(v6[2], 24, 8);
  *result = a1;
  result[1] = v5;
  result[2] = a1;
  return result;
}

re **re::AssetHelper::makeTimelineAsset(re::AssetHelper *this, re::TimelineAssetData *a2)
{
  uint64_t *v3;
  re::Allocator *v4;
  re *v5;
  uint64_t *v6;
  re **result;

  v3 = re::globalAllocators(this);
  v5 = (re *)re::internal::convertToTimeline(this, (const re::TimelineAssetData *)v3[2], v4);
  v6 = re::globalAllocators(v5);
  result = (re **)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v6[2] + 32))(v6[2], 24, 8);
  *result = v5;
  result[1] = this;
  result[2] = v5;
  return result;
}

_QWORD *re::DynamicArray<re::MeshLodLevelInfo>::add(_QWORD *this, uint64_t *a2)
{
  _QWORD *v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v3 = this;
  v4 = this[2];
  if (v4 >= this[1])
  {
    this = re::DynamicArray<re::MeshLodLevelInfo>::growCapacity(this, v4 + 1);
    v4 = v3[2];
  }
  v5 = v3[4] + 12 * v4;
  v6 = *a2;
  *(_DWORD *)(v5 + 8) = *((_DWORD *)a2 + 2);
  *(_QWORD *)v5 = v6;
  ++v3[2];
  ++*((_DWORD *)v3 + 6);
  return this;
}

BOOL re::AssetHelper::readerToWriterStream(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  re *v5;
  NSObject *v6;
  uint8_t v8[8];
  _BYTE v9[1024];
  uint64_t v10;

  v10 = *MEMORY[0x24BDAC8D0];
  while (1)
  {
    v4 = (*(uint64_t (**)(uint64_t, _BYTE *, uint64_t))(*(_QWORD *)a1 + 16))(a1, v9, 1024);
    if (!v4)
      break;
    v5 = (re *)(*(uint64_t (**)(uint64_t, _BYTE *, uint64_t))(*(_QWORD *)a2 + 16))(a2, v9, v4);
    if (v5 != (re *)v4)
    {
      v6 = *re::assetTypesLogObjects(v5);
      if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
      {
        *(_WORD *)v8 = 0;
        _os_log_error_impl(&dword_224FE9000, v6, OS_LOG_TYPE_ERROR, "AssetHelper::readerToWriterStream: unable to write data", v8, 2u);
      }
      return v4 == 0;
    }
  }
  return v4 == 0;
}

uint64_t loadIBLTextureWithContentsOfFile(_anonymous_namespace_ *a1, re::ImportGraphicsContext *a2, id *a3, uint64_t a4, re::ColorHelpers *a5)
{
  uint64_t TextureAsset;
  int v11;
  uint64_t result;
  _BYTE v13[8];
  _QWORD v14[10];
  unsigned int v15;
  id v16;
  id v17[4];
  int v18;
  char v19;
  int v20;
  _QWORD v21[2];
  int v22;

  re::ImportGraphicsContext::createFromAvailableManagers(a2, 0, (re::ImportGraphicsContext *)v17);
  if (!v15)
  {
    if (!v14[0])
    {
      TextureAsset = 0;
      goto LABEL_9;
    }
    goto LABEL_7;
  }
  if (v15 != 1)
  {
    result = std::__throw_bad_variant_access[abi:nn180100]();
    __break(1u);
    return result;
  }
  TextureAsset = 0;
  if (v14[3] && v14[0])
  {
LABEL_7:
    v11 = *(_DWORD *)(a4 + 56);
    *(_QWORD *)((char *)v21 + 5) = 0;
    v21[0] = 0;
    v18 = 16777473;
    v19 = 1;
    v20 = 1;
    v22 = 0;
    TextureAsset = re::TextureAsset::makeTextureAsset((uint64_t)v13, v11, (__int128 *)&v18);
  }
LABEL_9:

  if (v15 != -1)
    ((void (*)(int *, _QWORD *))*(&__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8nn180100IZNS0_6__dtorINS0_8__traitsIJN2NS9SharedPtrIN3MTL7TextureEEEN2re10CPUTextureEEEELNS0_6_TraitE1EE9__destroyB8nn180100EvEUlRT_E_JRSF_EEEDcOSG_DpOT0____fmatrix_0
                                           + v15))(&v18, v14);

  return TextureAsset;
}

void sub_225362D54(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, id a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,id a23,id a24)
{
  re::TextureData::~TextureData(&a10);

  _Unwind_Resume(a1);
}

uint64_t re::AssetHelper::createDefaultImageBasedLightEngineAsset@<X0>(re::AssetHelper *this@<X0>, id *a2@<X1>, const re::AssetHandle *a3@<X8>)
{
  uint64_t *v7;
  re::IBLAssetCompiler *v8;
  _anonymous_namespace_ *v9;
  char *v10;
  _anonymous_namespace_ *v11;
  const char *v12;
  re::PathBuffer *v13;
  re *v14;
  re::PathBuffer *v15;
  id v16;
  unint64_t v17;
  unint64_t v18;
  const char *v19;
  NSObject *v20;
  re::IBLAssetCompiler *v21;
  NSObject *v22;
  _BYTE *v23;
  __CFString *v24;
  const char *v25;
  unint64_t v26;
  const char *v27;
  _anonymous_namespace_ *v28;
  _anonymous_namespace_ *v29;
  re::ColorHelpers *v30;
  void *v31;
  char *v32;
  uint64_t v33;
  char *v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  const char *v39;
  uint64_t v40;
  const char *v41;
  _anonymous_namespace_ *v42;
  _anonymous_namespace_ *v43;
  re::ColorHelpers *v44;
  void *v45;
  __int128 v46;
  uint64_t v47;
  const char *v48;
  uint64_t v49;
  const char *v50;
  _anonymous_namespace_ *v51;
  _anonymous_namespace_ *v52;
  re::ColorHelpers *v53;
  id *v54;
  __int128 v55;
  uint64_t v56;
  _anonymous_namespace_ *CStringPtr;
  NSObject *v58;
  NSObject *v59;
  NSObject *v60;
  id v62;
  id v63;
  uint64_t v64[3];
  uint64_t v65[3];
  uint64_t v66[3];
  uint64_t v67[3];
  uint64_t v68;
  unint64_t v69;
  char *v70;
  id v71;
  char v72[8];
  char *v73;
  uint64_t v74;
  char v75;
  _BYTE v76[23];
  void (**v77)(re::DeferredAssetDeserialize *__hidden);
  uint64_t *v78;
  uint64_t v79;
  re::IBLAssetCompiler *v80;
  uint64_t v81;
  char v82[8];
  uint64_t v83;
  uint8_t v84[16];
  uint64_t v85;
  uint8_t v86[16];
  __int128 v87;
  __int128 v88;
  char *v89;
  __int128 buf;
  int v91;
  uint64_t v92;
  uint64_t v93;
  char v94;
  int v95;
  char v96;
  int v97;
  char v98;
  int v99;
  id v100;
  uint64_t v101;
  uint64_t v102;
  const char *v103;
  _BYTE *v104;
  uint64_t v105;
  _BYTE v106[237];
  __int128 v107;
  uint64_t v108;
  _BYTE v109[496];
  uint64_t v110;

  v110 = *MEMORY[0x24BDAC8D0];
  *(_QWORD *)a3 = 0;
  *((_QWORD *)a3 + 1) = 0;
  *((_QWORD *)a3 + 2) = 0;
  v7 = re::AssetManager::parseAssetPath(this, "engine:studio_lighting_mrmode.reibl", 0, 0, (uint64_t)v82);
  v79 = 0;
  v80 = 0;
  v81 = 0;
  re::DynamicString::setCapacity(&v78, 0);
  re::AssetPath::filePathToAsset((re::AssetPath *)&v83, (re::DynamicString *)&v78, 1, 0);
  v77 = &off_24ED2D2A8;
  if ((v79 & 1) != 0)
    v8 = v80;
  else
    v8 = (re::IBLAssetCompiler *)((char *)&v79 + 1);
  v9 = re::IBLAssetCompiler::createFromJson(v8, (const re::IntrospectionBase *)&v77, (uint64_t)v72);
  if (v72[0])
  {
    v10 = v73;
    *(_QWORD *)&v107 = 0;
    *((_QWORD *)&v107 + 1) = v109;
    v108 = 488;
    v109[0] = 0;
    v103 = 0;
    v104 = v106;
    v105 = 488;
    v106[0] = 0;
    if ((v79 & 1) != 0)
      v13 = v80;
    else
      v13 = (re::PathBuffer *)((char *)&v79 + 1);
    v14 = (re *)re::path::dirname((re::path *)&v107, v13, v12);
    v15 = v14;
    if (!v14 || !*(_BYTE *)v14)
    {
      v20 = *re::assetsLogObjects(v14);
      if (os_log_type_enabled(v20, OS_LOG_TYPE_ERROR))
      {
        if ((v79 & 1) != 0)
          v21 = v80;
        else
          v21 = (re::IBLAssetCompiler *)((char *)&v79 + 1);
        LODWORD(buf) = 136315138;
        *(_QWORD *)((char *)&buf + 4) = v21;
        _os_log_error_impl(&dword_224FE9000, v20, OS_LOG_TYPE_ERROR, "Error loading .reibl file: unable to find directory of '%s'", (uint8_t *)&buf, 0xCu);
      }
      goto LABEL_101;
    }
    v91 = 1;
    v95 = 0;
    v96 = 0;
    v97 = 0;
    v98 = 0;
    v93 = 0;
    v92 = 0;
    v94 = 0;
    v101 = 0;
    v102 = 0;
    v100 = 0;
    v99 = 4;
    buf = 0x300000002uLL;
    v16 = a2[23];
    v71 = objc_msgSend(objc_msgSend(MEMORY[0x24BDDD740], sel_alloc), sel_init);
    objc_msgSend(v71, sel_setStorageMode_, 0);
    v17 = *((_QWORD *)v10 + 10);
    v18 = v17 >> 1;
    if ((v17 & 1) == 0)
      v18 = v17 >> 1;
    if (v18)
    {
      if ((v17 & 1) != 0)
        v19 = (const char *)*((_QWORD *)v10 + 11);
      else
        v19 = v10 + 81;
      v24 = (__CFString *)CFStringCreateWithCString(0, v19, 0x8000100u);
      re::TextureFromImageOptions::setColorSpace((re::TextureFromImageOptions *)&buf, v24);
      CFRelease(v24);
    }
    else
    {
      re::TextureFromImageOptions::setColorSpace((re::TextureFromImageOptions *)&buf, (__CFString *)*MEMORY[0x24BDBF270]);
    }
    re::AssetHandle::serializationString((re::AssetHandle *)v10, (re::DynamicString *)&v68);
    v26 = v69 >> 1;
    if ((v69 & 1) == 0)
      v26 = v69 >> 1;
    if (v26)
    {
      if ((v69 & 1) != 0)
        v27 = v70;
      else
        v27 = (char *)&v69 + 1;
      v28 = (_anonymous_namespace_ *)re::path::join(&v103, v15, v27, v25);
      v29 = v28;
      if ((v69 & 1) != 0)
        v30 = (re::ColorHelpers *)v70;
      else
        v30 = (re::ColorHelpers *)((char *)&v69 + 1);
      v31 = (void *)loadIBLTextureWithContentsOfFile(v28, (re::ImportGraphicsContext *)a2, &v71, (uint64_t)&buf, v30);
      if (!v31)
      {
        v58 = *re::assetsLogObjects(0);
        if (os_log_type_enabled(v58, OS_LOG_TYPE_ERROR))
        {
          LODWORD(v88) = 136315138;
          *(_QWORD *)((char *)&v88 + 4) = v29;
          _os_log_error_impl(&dword_224FE9000, v58, OS_LOG_TYPE_ERROR, "Failed to load IBL source texture '%s'", (uint8_t *)&v88, 0xCu);
        }
        goto LABEL_95;
      }
      v62 = v16;
      re::DynamicString::DynamicString((re::DynamicString *)&v88, (const re::DynamicString *)&v68);
      v32 = v89;
      v33 = BYTE8(v88) & 1;
      if ((BYTE8(v88) & 1) != 0)
        v34 = v89;
      else
        v34 = (char *)&v88 + 9;
      if (!strchr(v34, 58))
      {
        re::DynamicString::operator+((re::DynamicString *)v84, (uint64_t)&v88, (re::DynamicString *)v86);
        re::DynamicString::operator=((re::DynamicString *)&v88, (re::DynamicString *)v86);
        if (*(_QWORD *)v86)
        {
          if ((v86[8] & 1) != 0)
            (*(void (**)(void))(**(_QWORD **)v86 + 40))();
          *(_OWORD *)v86 = 0u;
          v87 = 0u;
        }
        if (*(_QWORD *)v84 && (v84[8] & 1) != 0)
          (*(void (**)(void))(**(_QWORD **)v84 + 40))();
        v32 = v89;
        v33 = BYTE8(v88) & 1;
      }
      if (v33)
        v35 = v32;
      else
        v35 = (char *)&v88 + 9;
      re::AssetManager::assetHandle(this, v35, 1, 0, (uint64_t *)v86);
      v36 = *((_QWORD *)v10 + 1);
      v37 = *((_QWORD *)v10 + 2);
      *((_QWORD *)v10 + 1) = *(_QWORD *)&v86[8];
      *(_QWORD *)&v86[8] = v36;
      v38 = *(_QWORD *)v10;
      *(_QWORD *)v10 = 0;
      *(_QWORD *)v10 = *(_QWORD *)v86;
      *((_QWORD *)v10 + 2) = v87;
      *(_QWORD *)v86 = v38;
      *(_QWORD *)&v87 = v37;
      re::AssetHandle::~AssetHandle((re::AssetHandle *)v86);
      re::AssetHandle::AssetHandle((re::AssetHandle *)v67, (const re::AssetHandle *)v10);
      re::AssetManager::assignCompiledAssetDataToAssetHandle((uint64_t)this, v31, v67, 1);
      re::AssetHandle::~AssetHandle((re::AssetHandle *)v67);
      if ((_QWORD)v88 && (BYTE8(v88) & 1) != 0)
        (*(void (**)(void))(*(_QWORD *)v88 + 40))();
      v16 = v62;
    }
    re::AssetHandle::serializationString((re::AssetHandle *)(v10 + 24), (re::DynamicString *)&v88);
    v40 = *((_QWORD *)&v88 + 1) >> 1;
    if ((BYTE8(v88) & 1) == 0)
      v40 = BYTE8(v88) >> 1;
    if (v40)
    {
      v63 = v16;
      if ((BYTE8(v88) & 1) != 0)
        v41 = v89;
      else
        v41 = (char *)&v88 + 9;
      v42 = (_anonymous_namespace_ *)re::path::join(&v103, v15, v41, v39);
      v43 = v42;
      if ((BYTE8(v88) & 1) != 0)
        v44 = (re::ColorHelpers *)v89;
      else
        v44 = (re::ColorHelpers *)((char *)&v88 + 9);
      v45 = (void *)loadIBLTextureWithContentsOfFile(v42, (re::ImportGraphicsContext *)a2, &v71, (uint64_t)&buf, v44);
      if (!v45)
      {
        v59 = *re::assetsLogObjects(0);
        v16 = v63;
        if (os_log_type_enabled(v59, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)v86 = 136315138;
          *(_QWORD *)&v86[4] = v43;
          _os_log_error_impl(&dword_224FE9000, v59, OS_LOG_TYPE_ERROR, "Failed to load IBL diffuse texture '%s'", v86, 0xCu);
        }
        goto LABEL_92;
      }
      re::AssetManager::assetHandle(this, "engine:studio_lighting_mrmode_diffmap.ktx", 1, 0, (uint64_t *)v86);
      v46 = *(_OWORD *)(v10 + 24);
      *(_OWORD *)(v10 + 24) = *(_OWORD *)v86;
      *(_OWORD *)v86 = v46;
      v47 = *((_QWORD *)v10 + 5);
      *((_QWORD *)v10 + 5) = v87;
      *(_QWORD *)&v87 = v47;
      re::AssetHandle::~AssetHandle((re::AssetHandle *)v86);
      re::AssetHandle::AssetHandle((re::AssetHandle *)v66, (const re::AssetHandle *)(v10 + 24));
      re::AssetManager::assignCompiledAssetDataToAssetHandle((uint64_t)this, v45, v66, 1);
      re::AssetHandle::~AssetHandle((re::AssetHandle *)v66);
      v16 = v63;
    }
    re::AssetHandle::serializationString((re::AssetHandle *)(v10 + 48), (re::DynamicString *)v86);
    v49 = *(_QWORD *)&v86[8] >> 1;
    if ((v86[8] & 1) == 0)
      v49 = v86[8] >> 1;
    if (v49)
    {
      if ((v86[8] & 1) != 0)
        v50 = (const char *)v87;
      else
        v50 = (const char *)&v86[9];
      v51 = (_anonymous_namespace_ *)re::path::join(&v103, v15, v50, v48);
      v52 = v51;
      if ((v86[8] & 1) != 0)
        v53 = (re::ColorHelpers *)v87;
      else
        v53 = (re::ColorHelpers *)&v86[9];
      v54 = (id *)loadIBLTextureWithContentsOfFile(v51, (re::ImportGraphicsContext *)a2, &v71, (uint64_t)&buf, v53);
      if (!v54)
      {
        v60 = *re::assetsLogObjects(0);
        if (os_log_type_enabled(v60, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)v84 = 136315138;
          *(_QWORD *)&v84[4] = v52;
          _os_log_error_impl(&dword_224FE9000, v60, OS_LOG_TYPE_ERROR, "Failed to load IBL specular texture '%s'", v84, 0xCu);
        }
        goto LABEL_89;
      }
      re::AssetManager::assetHandle(this, "engine:studio_lighting_mrmode_specmap.ktx", 1, 0, (uint64_t *)v84);
      v55 = *((_OWORD *)v10 + 3);
      *((_OWORD *)v10 + 3) = *(_OWORD *)v84;
      *(_OWORD *)v84 = v55;
      v56 = *((_QWORD *)v10 + 8);
      *((_QWORD *)v10 + 8) = v85;
      v85 = v56;
      re::AssetHandle::~AssetHandle((re::AssetHandle *)v84);
      re::AssetHandle::AssetHandle((re::AssetHandle *)v65, (const re::AssetHandle *)(v10 + 48));
      re::AssetManager::assignCompiledAssetDataToAssetHandle((uint64_t)this, v54, v65, 1);
      re::AssetHandle::~AssetHandle((re::AssetHandle *)v65);
      if (v54[31])
      {
        CStringPtr = (_anonymous_namespace_ *)CFStringGetCStringPtr((CFStringRef)v54[31], 0x8000100u);
        re::DynamicString::operator=((re::DynamicString *)(v10 + 72), (re::DynamicString *)v84);
        if (*(_QWORD *)v84)
        {
          if ((v84[8] & 1) != 0)
            (*(void (**)(void))(**(_QWORD **)v84 + 40))();
        }
      }
    }
    re::AssetManager::assetHandle(this, "engine:studio_lighting_mrmode.reibl", 1, 0, (uint64_t *)v84);
    *(_OWORD *)a3 = *(_OWORD *)v84;
    memset(v84, 0, sizeof(v84));
    *((_QWORD *)a3 + 2) = v85;
    v85 = 0;
    re::AssetHandle::~AssetHandle((re::AssetHandle *)v84);
    re::AssetHandle::AssetHandle((re::AssetHandle *)v64, a3);
    re::AssetManager::assignCompiledAssetDataToAssetHandle((uint64_t)this, v10, v64, 1);
    re::AssetHandle::~AssetHandle((re::AssetHandle *)v64);
LABEL_89:
    if (*(_QWORD *)v86 && (v86[8] & 1) != 0)
      (*(void (**)(void))(**(_QWORD **)v86 + 40))();
LABEL_92:
    if ((_QWORD)v88 && (BYTE8(v88) & 1) != 0)
      (*(void (**)(void))(*(_QWORD *)v88 + 40))();
LABEL_95:
    if (v68 && (v69 & 1) != 0)
      (*(void (**)(void))(*(_QWORD *)v68 + 40))();
    if (v71)

LABEL_101:
    if (v104 != v106)
      (*(void (**)(const char *))(*(_QWORD *)v103 + 40))(v103);
    if (*((_BYTE **)&v107 + 1) != v109)
      (*(void (**)(_QWORD))(*(_QWORD *)v107 + 40))(v107);
    goto LABEL_105;
  }
  v22 = *re::assetsLogObjects(v9);
  if (os_log_type_enabled(v22, OS_LOG_TYPE_ERROR))
  {
    if ((v75 & 1) != 0)
      v23 = *(_BYTE **)&v76[7];
    else
      v23 = v76;
    LODWORD(v107) = 136315138;
    *(_QWORD *)((char *)&v107 + 4) = v23;
    _os_log_error_impl(&dword_224FE9000, v22, OS_LOG_TYPE_ERROR, "Failed to load .reibl source': %s", (uint8_t *)&v107, 0xCu);
  }
LABEL_105:
  if (!v72[0] && v74 && (v75 & 1) != 0)
    (*(void (**)(void))(*(_QWORD *)v74 + 40))();
  if (v78 && (v79 & 1) != 0)
    (*(void (**)(void))(*v78 + 40))();
  return re::Result<re::AssetPath,re::DetailedError>::~Result((uint64_t)v82);
}

void sub_225363710(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,char a24,uint64_t a25,uint64_t a26,id a27,char a28,uint64_t a29,uint64_t a30,uint64_t a31,char a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,char a37,uint64_t a38,uint64_t a39,char a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,char a56,uint64_t a57,uint64_t a58,uint64_t a59,char a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  uint64_t a71;
  re::AssetHandle *v71;
  uint64_t v72;
  void *v73;
  uint64_t v74;

  if (a55 && (a56 & 1) != 0)
    (*(void (**)(void))(*(_QWORD *)a55 + 40))();
  if (a59 && (a60 & 1) != 0)
    (*(void (**)(void))(*(_QWORD *)a59 + 40))();
  if (a23 && (a24 & 1) != 0)
    (*(void (**)(void))(*(_QWORD *)a23 + 40))();
  if (a27)

  if (STACK[0x218] != v72)
    (*(void (**)(unint64_t))(*(_QWORD *)STACK[0x210] + 40))(STACK[0x210]);
  if (STACK[0x418] != v74)
    (*(void (**)(unint64_t))(*(_QWORD *)STACK[0x410] + 40))(STACK[0x410]);
  if (!a28 && a31 && (a32 & 1) != 0)
    (*(void (**)(void))(*(_QWORD *)a31 + 40))();
  if (a36)
  {
    if ((a37 & 1) != 0)
      (*(void (**)(void))(*(_QWORD *)a36 + 40))();
  }
  re::Result<re::AssetPath,re::DetailedError>::~Result((uint64_t)&a40);
  re::AssetHandle::~AssetHandle(v71);
  _Unwind_Resume(a1);
}

void re::BasicAssetLoader<re::BasicAsset<re::BlendShapeGroupDefinition,&re::kBlendShapeGroupDefinitionAssetName,&re::kBlendShapeGroupDefinitionAssetExtension>>::~BasicAssetLoader()
{
  JUMPOUT(0x2276933B8);
}

re *re::BasicAssetLoader<re::BasicAsset<re::BlendShapeGroupDefinition,&re::kBlendShapeGroupDefinitionAssetName,&re::kBlendShapeGroupDefinitionAssetExtension>>::unloadAsset(uint64_t a1, re *a2)
{
  return re::internal::destroyPersistent<re::BasicAsset<re::BlendShapeGroupDefinition,&re::kBlendShapeGroupDefinitionAssetName,&re::kBlendShapeGroupDefinitionAssetExtension>>(a2);
}

BOOL re::BasicAssetLoader<re::BasicAsset<re::BlendShapeGroupDefinition,&re::kBlendShapeGroupDefinitionAssetName,&re::kBlendShapeGroupDefinitionAssetExtension>>::isSupportedSourceExtension(int a1, char *a2)
{
  return strcasecmp(a2, (const char *)re::BasicAsset<re::BlendShapeGroupDefinition,&re::kBlendShapeGroupDefinitionAssetName,&re::kBlendShapeGroupDefinitionAssetExtension>::assetExtension) == 0;
}

uint64_t re::BasicAssetLoader<re::BasicAsset<re::BlendShapeGroupDefinition,&re::kBlendShapeGroupDefinitionAssetName,&re::kBlendShapeGroupDefinitionAssetExtension>>::introspectionType()
{
  unsigned __int8 v0;

  v0 = atomic_load((unsigned __int8 *)&qword_254100A00);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_254100A00))
  {
    _MergedGlobals_85 = re::introspect_BlendShapeGroupDefinitionAsset(0);
    __cxa_guard_release(&qword_254100A00);
  }
  return _MergedGlobals_85;
}

re *re::internal::destroyPersistent<re::BasicAsset<re::BlendShapeGroupDefinition,&re::kBlendShapeGroupDefinitionAssetName,&re::kBlendShapeGroupDefinitionAssetExtension>>(re *result)
{
  re *v1;
  uint64_t v2;

  if (result)
  {
    v1 = result;
    v2 = re::globalAllocators(result)[2];
    re::FixedArray<re::BlendShapeDefinition>::deinit((_QWORD *)v1 + 2);
    re::StringID::destroyString(v1);
    return (re *)(*(uint64_t (**)(uint64_t, re *))(*(_QWORD *)v2 + 40))(v2, v1);
  }
  return result;
}

void re::BasicAssetLoader<re::BasicAsset<re::BlendTreeDefinition,&re::kBlendTreeDefinitionAssetName,&re::kBlendTreeDefinitionAssetExtension>>::~BasicAssetLoader()
{
  JUMPOUT(0x2276933B8);
}

re *re::BasicAssetLoader<re::BasicAsset<re::BlendTreeDefinition,&re::kBlendTreeDefinitionAssetName,&re::kBlendTreeDefinitionAssetExtension>>::unloadAsset(uint64_t a1, re *a2)
{
  return re::internal::destroyPersistent<re::BasicAsset<re::BlendTreeDefinition,&re::kBlendTreeDefinitionAssetName,&re::kBlendTreeDefinitionAssetExtension>>(a2);
}

BOOL re::BasicAssetLoader<re::BasicAsset<re::BlendTreeDefinition,&re::kBlendTreeDefinitionAssetName,&re::kBlendTreeDefinitionAssetExtension>>::isSupportedSourceExtension(int a1, char *a2)
{
  return strcasecmp(a2, (const char *)re::BasicAsset<re::BlendTreeDefinition,&re::kBlendTreeDefinitionAssetName,&re::kBlendTreeDefinitionAssetExtension>::assetExtension) == 0;
}

uint64_t re::BasicAssetLoader<re::BasicAsset<re::BlendTreeDefinition,&re::kBlendTreeDefinitionAssetName,&re::kBlendTreeDefinitionAssetExtension>>::introspectionType()
{
  unsigned __int8 v0;

  v0 = atomic_load((unsigned __int8 *)&qword_254100A10);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_254100A10))
  {
    qword_254100A08 = re::introspect_BlendTreeDefinitionAsset(0);
    __cxa_guard_release(&qword_254100A10);
  }
  return qword_254100A08;
}

re *re::internal::destroyPersistent<re::BasicAsset<re::BlendTreeDefinition,&re::kBlendTreeDefinitionAssetName,&re::kBlendTreeDefinitionAssetExtension>>(re *result)
{
  re::BlendTreeDefinition *v1;
  uint64_t v2;

  if (result)
  {
    v1 = result;
    v2 = re::globalAllocators(result)[2];
    re::BlendTreeDefinition::~BlendTreeDefinition(v1);
    return (re *)(*(uint64_t (**)(uint64_t, re::BlendTreeDefinition *))(*(_QWORD *)v2 + 40))(v2, v1);
  }
  return result;
}

void re::BasicAssetLoader<re::BasicAsset<re::AnimationScene,&re::kAnimationSceneAssetName,&re::kAnimationSceneAssetExtension>>::~BasicAssetLoader()
{
  JUMPOUT(0x2276933B8);
}

re *re::BasicAssetLoader<re::BasicAsset<re::AnimationScene,&re::kAnimationSceneAssetName,&re::kAnimationSceneAssetExtension>>::unloadAsset(uint64_t a1, uint64_t a2)
{
  return re::internal::destroyPersistent<re::BasicAsset<re::AnimationScene,&re::kAnimationSceneAssetName,&re::kAnimationSceneAssetExtension>>((re *)"unloadAsset", 95, a2);
}

BOOL re::BasicAssetLoader<re::BasicAsset<re::AnimationScene,&re::kAnimationSceneAssetName,&re::kAnimationSceneAssetExtension>>::isSupportedSourceExtension(int a1, char *a2)
{
  return strcasecmp(a2, (const char *)re::BasicAsset<re::AnimationScene,&re::kAnimationSceneAssetName,&re::kAnimationSceneAssetExtension>::assetExtension) == 0;
}

uint64_t re::BasicAssetLoader<re::BasicAsset<re::AnimationScene,&re::kAnimationSceneAssetName,&re::kAnimationSceneAssetExtension>>::introspectionType()
{
  unsigned __int8 v0;

  v0 = atomic_load((unsigned __int8 *)&qword_254100A20);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_254100A20))
  {
    qword_254100A18 = re::introspect_AnimationSceneAsset(0);
    __cxa_guard_release(&qword_254100A20);
  }
  return qword_254100A18;
}

re *re::internal::destroyPersistent<re::BasicAsset<re::AnimationScene,&re::kAnimationSceneAssetName,&re::kAnimationSceneAssetExtension>>(re *result, uint64_t a2, uint64_t a3)
{
  uint64_t v4;

  if (a3)
  {
    v4 = re::globalAllocators(result)[2];
    re::BasicAsset<re::AnimationScene,&re::kAnimationSceneAssetName,&re::kAnimationSceneAssetExtension>::~BasicAsset(a3);
    return (re *)(*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v4 + 40))(v4, a3);
  }
  return result;
}

void re::BasicAssetLoader<re::BasicAsset<re::AssignedMeshDeformation,&re::kAssignedMeshDeformationAssetName,&re::kAssignedMeshDeformationAssetExtension>>::~BasicAssetLoader()
{
  JUMPOUT(0x2276933B8);
}

re *re::BasicAssetLoader<re::BasicAsset<re::AssignedMeshDeformation,&re::kAssignedMeshDeformationAssetName,&re::kAssignedMeshDeformationAssetExtension>>::unloadAsset(uint64_t a1, uint64_t a2)
{
  return re::internal::destroyPersistent<re::BasicAsset<re::AssignedMeshDeformation,&re::kAssignedMeshDeformationAssetName,&re::kAssignedMeshDeformationAssetExtension>>((re *)"unloadAsset", 95, a2);
}

BOOL re::BasicAssetLoader<re::BasicAsset<re::AssignedMeshDeformation,&re::kAssignedMeshDeformationAssetName,&re::kAssignedMeshDeformationAssetExtension>>::isSupportedSourceExtension(int a1, char *a2)
{
  return strcasecmp(a2, (const char *)re::BasicAsset<re::AssignedMeshDeformation,&re::kAssignedMeshDeformationAssetName,&re::kAssignedMeshDeformationAssetExtension>::assetExtension) == 0;
}

uint64_t re::BasicAssetLoader<re::BasicAsset<re::AssignedMeshDeformation,&re::kAssignedMeshDeformationAssetName,&re::kAssignedMeshDeformationAssetExtension>>::introspectionType()
{
  unsigned __int8 v0;

  v0 = atomic_load((unsigned __int8 *)&qword_254100A30);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_254100A30))
  {
    qword_254100A28 = re::introspect_AssignedMeshDeformationAsset(0);
    __cxa_guard_release(&qword_254100A30);
  }
  return qword_254100A28;
}

re *re::internal::destroyPersistent<re::BasicAsset<re::AssignedMeshDeformation,&re::kAssignedMeshDeformationAssetName,&re::kAssignedMeshDeformationAssetExtension>>(re *result, uint64_t a2, uint64_t a3)
{
  uint64_t v4;

  if (a3)
  {
    v4 = re::globalAllocators(result)[2];
    re::DynamicArray<re::MeshIdentifierAsset>::deinit(a3);
    return (re *)(*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v4 + 40))(v4, a3);
  }
  return result;
}

void std::__function::__func<re::AssetHelper::registerDefaultAssetTypes(re::AssetManager &,re::ServiceLocator &,re::AssetHelper::RegistrationOptions)::$_0,std::allocator<re::AssetHelper::registerDefaultAssetTypes(re::AssetManager &,re::ServiceLocator &,re::AssetHelper::RegistrationOptions)::$_0>,void ()(re::AssetLoader *)>::~__func()
{
  JUMPOUT(0x2276933B8);
}

_QWORD *std::__function::__func<re::AssetHelper::registerDefaultAssetTypes(re::AssetManager &,re::ServiceLocator &,re::AssetHelper::RegistrationOptions)::$_0,std::allocator<re::AssetHelper::registerDefaultAssetTypes(re::AssetManager &,re::ServiceLocator &,re::AssetHelper::RegistrationOptions)::$_0>,void ()(re::AssetLoader *)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_24ED38B10;
  return result;
}

void std::__function::__func<re::AssetHelper::registerDefaultAssetTypes(re::AssetManager &,re::ServiceLocator &,re::AssetHelper::RegistrationOptions)::$_0,std::allocator<re::AssetHelper::registerDefaultAssetTypes(re::AssetManager &,re::ServiceLocator &,re::AssetHelper::RegistrationOptions)::$_0>,void ()(re::AssetLoader *)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_24ED38B10;
}

re *std::__function::__func<re::AssetHelper::registerDefaultAssetTypes(re::AssetManager &,re::ServiceLocator &,re::AssetHelper::RegistrationOptions)::$_0,std::allocator<re::AssetHelper::registerDefaultAssetTypes(re::AssetManager &,re::ServiceLocator &,re::AssetHelper::RegistrationOptions)::$_0>,void ()(re::AssetLoader *)>::operator()(re *result, void (****a2)(_QWORD))
{
  void (***v2)(_QWORD);
  uint64_t v3;

  v2 = *a2;
  if (*a2)
  {
    v3 = re::globalAllocators(result)[2];
    (**v2)(v2);
    return (re *)(*(uint64_t (**)(uint64_t, void (***)(_QWORD)))(*(_QWORD *)v3 + 40))(v3, v2);
  }
  return result;
}

uint64_t std::__function::__func<re::AssetHelper::registerDefaultAssetTypes(re::AssetManager &,re::ServiceLocator &,re::AssetHelper::RegistrationOptions)::$_0,std::allocator<re::AssetHelper::registerDefaultAssetTypes(re::AssetManager &,re::ServiceLocator &,re::AssetHelper::RegistrationOptions)::$_0>,void ()(re::AssetLoader *)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<re::AssetHelper::registerDefaultAssetTypes(re::AssetManager &,re::ServiceLocator &,re::AssetHelper::RegistrationOptions)::$_0,std::allocator<re::AssetHelper::registerDefaultAssetTypes(re::AssetManager &,re::ServiceLocator &,re::AssetHelper::RegistrationOptions)::$_0>,void ()(re::AssetLoader *)>::target_type()
{
}

re *re::internal::AssetTypeRegistryHelper::deleter(re *this, re::AssetLoader *a2)
{
  re *v2;
  uint64_t v3;

  if (this)
  {
    v2 = this;
    v3 = re::globalAllocators(this)[2];
    (**(void (***)(re *))v2)(v2);
    return (re *)(*(uint64_t (**)(uint64_t, re *))(*(_QWORD *)v3 + 40))(v3, v2);
  }
  return this;
}

void std::__function::__func<void (*)(re::AssetLoader *),std::allocator<void (*)(re::AssetLoader *)>,void ()(re::AssetLoader *)>::~__func()
{
  JUMPOUT(0x2276933B8);
}

_QWORD *std::__function::__func<void (*)(re::AssetLoader *),std::allocator<void (*)(re::AssetLoader *)>,void ()(re::AssetLoader *)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_24ED38B90;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<void (*)(re::AssetLoader *),std::allocator<void (*)(re::AssetLoader *)>,void ()(re::AssetLoader *)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_24ED38B90;
  a2[1] = v2;
  return result;
}

uint64_t std::__function::__func<void (*)(re::AssetLoader *),std::allocator<void (*)(re::AssetLoader *)>,void ()(re::AssetLoader *)>::operator()(uint64_t a1, _QWORD *a2)
{
  return (*(uint64_t (**)(_QWORD))(a1 + 8))(*a2);
}

uint64_t std::__function::__func<void (*)(re::AssetLoader *),std::allocator<void (*)(re::AssetLoader *)>,void ()(re::AssetLoader *)>::target(uint64_t a1, uint64_t a2)
{
    return a1 + 8;
  else
    return 0;
}

void *std::__function::__func<void (*)(re::AssetLoader *),std::allocator<void (*)(re::AssetLoader *)>,void ()(re::AssetLoader *)>::target_type()
{
}

re *re::internal::AssetCompilerRegistryHelper::deleter(re *this, re::AssetCompiler *a2)
{
  re *v2;
  uint64_t v3;

  if (this)
  {
    v2 = this;
    v3 = re::globalAllocators(this)[2];
    (**(void (***)(re *))v2)(v2);
    return (re *)(*(uint64_t (**)(uint64_t, re *))(*(_QWORD *)v3 + 40))(v3, v2);
  }
  return this;
}

void std::__function::__func<void (*)(re::AssetCompiler *),std::allocator<void (*)(re::AssetCompiler *)>,void ()(re::AssetCompiler *)>::~__func()
{
  JUMPOUT(0x2276933B8);
}

_QWORD *std::__function::__func<void (*)(re::AssetCompiler *),std::allocator<void (*)(re::AssetCompiler *)>,void ()(re::AssetCompiler *)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_24ED38C30;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<void (*)(re::AssetCompiler *),std::allocator<void (*)(re::AssetCompiler *)>,void ()(re::AssetCompiler *)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_24ED38C30;
  a2[1] = v2;
  return result;
}

uint64_t std::__function::__func<void (*)(re::AssetCompiler *),std::allocator<void (*)(re::AssetCompiler *)>,void ()(re::AssetCompiler *)>::operator()(uint64_t a1, _QWORD *a2)
{
  return (*(uint64_t (**)(_QWORD))(a1 + 8))(*a2);
}

uint64_t std::__function::__func<void (*)(re::AssetCompiler *),std::allocator<void (*)(re::AssetCompiler *)>,void ()(re::AssetCompiler *)>::target(uint64_t a1, uint64_t a2)
{
    return a1 + 8;
  else
    return 0;
}

void *std::__function::__func<void (*)(re::AssetCompiler *),std::allocator<void (*)(re::AssetCompiler *)>,void ()(re::AssetCompiler *)>::target_type()
{
}

void re::BasicJsonCompiler<re::BasicAsset<re::AnimationScene,&re::kAnimationSceneAssetName,&re::kAnimationSceneAssetExtension>>::~BasicJsonCompiler()
{
  JUMPOUT(0x2276933B8);
}

re::DynamicString *re::BasicJsonCompiler<re::BasicAsset<re::AnimationScene,&re::kAnimationSceneAssetName,&re::kAnimationSceneAssetExtension>>::getCurrentCompiledAssetInfo@<X0>(_anonymous_namespace_ *a1@<X0>, _QWORD *a2@<X8>)
{
  re::DynamicString *v2;
  const char *v3;

  *a2 = 0x100000001;
  v2 = (re::DynamicString *)(a2 + 1);
  v3 = (const char *)re::BasicAsset<re::AnimationScene,&re::kAnimationSceneAssetName,&re::kAnimationSceneAssetExtension>::assetName;
}

uint64_t re::BasicJsonCompiler<re::BasicAsset<re::AnimationScene,&re::kAnimationSceneAssetName,&re::kAnimationSceneAssetExtension>>::assetIntrospectionType()
{
  unsigned __int8 v0;

  v0 = atomic_load((unsigned __int8 *)&qword_254100A40);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_254100A40))
  {
    qword_254100A38 = re::introspect_AnimationScene(0);
    __cxa_guard_release(&qword_254100A40);
  }
  return qword_254100A38;
}

uint64_t re::BasicJsonCompiler<re::BasicAsset<re::AnimationScene,&re::kAnimationSceneAssetName,&re::kAnimationSceneAssetExtension>>::getSupportedExtensions@<X0>(uint64_t a1@<X8>)
{
  _QWORD v2[2];

  v2[0] = &re::BasicAsset<re::AnimationScene,&re::kAnimationSceneAssetName,&re::kAnimationSceneAssetExtension>::assetExtension;
  v2[1] = 1;
  return re::DynamicArray<char const*>::DynamicArray(a1, (uint64_t)v2);
}

void re::BasicJsonCompiler<re::BasicAsset<re::AnimationScene,&re::kAnimationSceneAssetName,&re::kAnimationSceneAssetExtension>>::compile(char *__s@<X1>, const re::IntrospectionBase *a2@<X3>, uint64_t a3@<X8>)
{
  char *v6;
  __int128 v7;
  __int128 v8;
  unsigned __int8 v9;
  re *SourceJson;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  __int128 v21;
  uint64_t v22;
  uint64_t v23;
  __int128 v24;
  __int128 v25;
  uint64_t v26;
  uint64_t v27;
  _BYTE v28[8];
  uint64_t v29;
  char v30;
  char v31[16];
  __int128 v32;
  void *v33;
  _QWORD v34[3];
  int v35;
  uint64_t v36;
  char v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;

  *(_OWORD *)v31 = 0u;
  v32 = 0u;
  v36 = 0;
  v33 = &str_110;
  memset(v34, 0, sizeof(v34));
  v35 = 0;
  v37 = 0;
  v39 = 0;
  v40 = 0;
  v38 = 0;
  v6 = strrchr(__s, 46);
  if (!strcmp(v6 + 1, (const char *)re::BasicAsset<re::AnimationScene,&re::kAnimationSceneAssetName,&re::kAnimationSceneAssetExtension>::assetExtension))
  {
    v9 = atomic_load((unsigned __int8 *)&qword_254100A40);
    if ((v9 & 1) == 0 && __cxa_guard_acquire(&qword_254100A40))
    {
      qword_254100A38 = re::introspect_AnimationScene(0);
      __cxa_guard_release(&qword_254100A40);
    }
    SourceJson = (re *)re::AssetUtilities::readSourceJson((re::AssetUtilities *)__s, v31, qword_254100A38, a2, (uint64_t)v28);
    if (v28[0])
    {
      v11 = re::globalAllocators(SourceJson);
      v12 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v11[2] + 32))(v11[2], 112, 8);
      *(_OWORD *)(v12 + 32) = 0u;
      *(_OWORD *)(v12 + 48) = 0u;
      *(_OWORD *)(v12 + 64) = 0u;
      *(_QWORD *)(v12 + 80) = 0;
      *(_QWORD *)(v12 + 88) = 0;
      *(_OWORD *)v12 = 0u;
      *(_OWORD *)(v12 + 16) = 0u;
      *(_QWORD *)(v12 + 32) = &str_110;
      *(_QWORD *)(v12 + 48) = 0;
      *(_QWORD *)(v12 + 56) = 0;
      *(_DWORD *)(v12 + 64) = 0;
      *(_QWORD *)(v12 + 40) = 0;
      *(_QWORD *)(v12 + 96) = 0;
      *(_QWORD *)(v12 + 104) = 0;
      *(_QWORD *)(v12 + 8) = *(_QWORD *)&v31[8];
      *(_QWORD *)&v31[8] = 0;
      v13 = *(_QWORD *)v12;
      *(_QWORD *)v12 = 0;
      *(_QWORD *)v12 = *(_QWORD *)v31;
      *(_QWORD *)(v12 + 16) = v32;
      *(_QWORD *)v31 = v13;
      v14 = *((_QWORD *)&v32 + 1);
      v15 = v33;
      v32 = 0uLL;
      v33 = &str_110;
      v16 = *(_QWORD *)(v12 + 24);
      v17 = *(_QWORD *)(v12 + 32);
      *(_QWORD *)(v12 + 24) = v14;
      *(_QWORD *)(v12 + 32) = v15;
      *(_QWORD *)&v24 = v14 & 0xFFFFFFFFFFFFFFFELL | v16 & 1;
      *((_QWORD *)&v24 + 1) = v17;
      re::StringID::destroyString((re::StringID *)&v24);
      re::DynamicArray<re::DataArray<re::RigGraphNode>::ElementBlock>::operator=(v12 + 40, (uint64_t)v34);
      *(_BYTE *)(v12 + 80) = v37;
      v18 = *(_QWORD *)(v12 + 96);
      v19 = *(_QWORD *)(v12 + 104);
      *(_QWORD *)(v12 + 96) = v39;
      v39 = v18;
      v20 = *(_QWORD *)(v12 + 88);
      *(_QWORD *)(v12 + 88) = 0;
      *(_QWORD *)(v12 + 88) = v38;
      *(_QWORD *)(v12 + 104) = v40;
      v38 = v20;
      v40 = v19;
      *(_BYTE *)a3 = 1;
      *(_QWORD *)(a3 + 8) = v12;
    }
    else
    {
      *(_QWORD *)&v24 = 100;
      *((_QWORD *)&v24 + 1) = &re::AssetErrorCategory(void)::instance;
      re::DynamicString::DynamicString((re::DynamicString *)&v25, (const re::DynamicString *)&v29);
      v21 = v25;
      *(_OWORD *)(a3 + 8) = v24;
      v22 = v26;
      v23 = v27;
      *(_BYTE *)a3 = 0;
      *(_OWORD *)(a3 + 24) = v21;
      *(_QWORD *)(a3 + 40) = v22;
      *(_QWORD *)(a3 + 48) = v23;
      if (!v28[0] && v29 && (v30 & 1) != 0)
        (*(void (**)(void))(*(_QWORD *)v29 + 40))();
    }
  }
  else
  {
    re::DynamicString::format((re::DynamicString *)"Invalid Asset Path: %s.", (re::DynamicString *)&v24, __s);
    v7 = v24;
    v8 = v25;
    *(_BYTE *)a3 = 0;
    *(_QWORD *)(a3 + 8) = 200;
    *(_QWORD *)(a3 + 16) = &re::AssetErrorCategory(void)::instance;
    *(_OWORD *)(a3 + 24) = v7;
    *(_OWORD *)(a3 + 40) = v8;
  }
  re::AssetHandle::~AssetHandle((re::AssetHandle *)&v38);
  re::DynamicArray<re::AnimationSceneEntityData>::deinit((uint64_t)v34);
  re::StringID::destroyString((re::StringID *)((char *)&v32 + 8));
  re::AssetHandle::~AssetHandle((re::AssetHandle *)v31);
}

void sub_2253642C8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_list va;

  va_start(va, a13);
  re::BasicAsset<re::AnimationScene,&re::kAnimationSceneAssetName,&re::kAnimationSceneAssetExtension>::~BasicAsset((uint64_t)va);
  _Unwind_Resume(a1);
}

re *re::BasicJsonCompiler<re::BasicAsset<re::AnimationScene,&re::kAnimationSceneAssetName,&re::kAnimationSceneAssetExtension>>::deleteAsset(uint64_t a1, uint64_t a2)
{
  return re::internal::destroyPersistent<re::BasicAsset<re::AnimationScene,&re::kAnimationSceneAssetName,&re::kAnimationSceneAssetExtension>>((re *)"deleteAsset", 66, a2);
}

void re::BasicJsonCompiler<re::BasicAsset<re::BlendShapeGroupDefinition,&re::kBlendShapeGroupDefinitionAssetName,&re::kBlendShapeGroupDefinitionAssetExtension>>::~BasicJsonCompiler()
{
  JUMPOUT(0x2276933B8);
}

re::DynamicString *re::BasicJsonCompiler<re::BasicAsset<re::BlendShapeGroupDefinition,&re::kBlendShapeGroupDefinitionAssetName,&re::kBlendShapeGroupDefinitionAssetExtension>>::getCurrentCompiledAssetInfo@<X0>(_anonymous_namespace_ *a1@<X0>, _QWORD *a2@<X8>)
{
  re::DynamicString *v2;
  const char *v3;

  *a2 = 0x100000001;
  v2 = (re::DynamicString *)(a2 + 1);
  v3 = (const char *)re::BasicAsset<re::BlendShapeGroupDefinition,&re::kBlendShapeGroupDefinitionAssetName,&re::kBlendShapeGroupDefinitionAssetExtension>::assetName;
}

uint64_t re::BasicJsonCompiler<re::BasicAsset<re::BlendShapeGroupDefinition,&re::kBlendShapeGroupDefinitionAssetName,&re::kBlendShapeGroupDefinitionAssetExtension>>::assetIntrospectionType()
{
  unsigned __int8 v0;

  v0 = atomic_load((unsigned __int8 *)&qword_254100A50);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_254100A50))
  {
    qword_254100A48 = re::introspect_BlendShapeGroupDefinition(0);
    __cxa_guard_release(&qword_254100A50);
  }
  return qword_254100A48;
}

uint64_t re::BasicJsonCompiler<re::BasicAsset<re::BlendShapeGroupDefinition,&re::kBlendShapeGroupDefinitionAssetName,&re::kBlendShapeGroupDefinitionAssetExtension>>::getSupportedExtensions@<X0>(uint64_t a1@<X8>)
{
  _QWORD v2[2];

  v2[0] = &re::BasicAsset<re::BlendShapeGroupDefinition,&re::kBlendShapeGroupDefinitionAssetName,&re::kBlendShapeGroupDefinitionAssetExtension>::assetExtension;
  v2[1] = 1;
  return re::DynamicArray<char const*>::DynamicArray(a1, (uint64_t)v2);
}

void re::BasicJsonCompiler<re::BasicAsset<re::BlendShapeGroupDefinition,&re::kBlendShapeGroupDefinitionAssetName,&re::kBlendShapeGroupDefinitionAssetExtension>>::compile(char *__s@<X1>, const re::IntrospectionBase *a2@<X3>, uint64_t a3@<X8>)
{
  char *v6;
  __int128 v7;
  __int128 v8;
  unsigned __int8 v9;
  re *SourceJson;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  uint64_t v15;
  unint64_t v16;
  __int128 v17;
  uint64_t v18;
  uint64_t v19;
  __int128 v20;
  __int128 v21;
  uint64_t v22;
  uint64_t v23;
  _BYTE v24[8];
  uint64_t v25;
  char v26;
  char v27[8];
  void *v28;
  uint64_t v29[3];
  uint64_t v30;

  *(_QWORD *)v27 = 0;
  v28 = &str_110;
  HIDWORD(v30) = 0;
  memset(v29, 0, sizeof(v29));
  LOBYTE(v30) = 0;
  v6 = strrchr(__s, 46);
  if (!strcmp(v6 + 1, (const char *)re::BasicAsset<re::BlendShapeGroupDefinition,&re::kBlendShapeGroupDefinitionAssetName,&re::kBlendShapeGroupDefinitionAssetExtension>::assetExtension))
  {
    v9 = atomic_load((unsigned __int8 *)&qword_254100A50);
    if ((v9 & 1) == 0 && __cxa_guard_acquire(&qword_254100A50))
    {
      qword_254100A48 = re::introspect_BlendShapeGroupDefinition(0);
      __cxa_guard_release(&qword_254100A50);
    }
    SourceJson = (re *)re::AssetUtilities::readSourceJson((re::AssetUtilities *)__s, v27, qword_254100A48, a2, (uint64_t)v24);
    if (v24[0])
    {
      v11 = re::globalAllocators(SourceJson);
      v12 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v11[2] + 32))(v11[2], 48, 8);
      *(_OWORD *)v12 = 0u;
      *(_OWORD *)(v12 + 16) = 0u;
      *(_OWORD *)(v12 + 32) = 0u;
      *(_QWORD *)(v12 + 8) = &str_110;
      v13 = *(_QWORD *)v27;
      v14 = v28;
      *(_QWORD *)v27 = 0;
      v28 = &str_110;
      v15 = *(_QWORD *)(v12 + 8);
      v16 = v13 & 0xFFFFFFFFFFFFFFFELL | *(_QWORD *)v12 & 1;
      *(_QWORD *)(v12 + 24) = 0;
      *(_QWORD *)(v12 + 32) = 0;
      *(_QWORD *)(v12 + 16) = 0;
      *(_BYTE *)(v12 + 40) = 0;
      *(_QWORD *)(v12 + 8) = v14;
      *(_QWORD *)&v20 = v16;
      *((_QWORD *)&v20 + 1) = v15;
      *(_QWORD *)v12 = v13;
      re::StringID::destroyString((re::StringID *)&v20);
      re::FixedArray<float>::operator=((uint64_t *)(v12 + 16), v29);
      *(_QWORD *)(v12 + 40) = v30;
      *(_BYTE *)a3 = 1;
      *(_QWORD *)(a3 + 8) = v12;
    }
    else
    {
      *(_QWORD *)&v20 = 100;
      *((_QWORD *)&v20 + 1) = &re::AssetErrorCategory(void)::instance;
      re::DynamicString::DynamicString((re::DynamicString *)&v21, (const re::DynamicString *)&v25);
      v17 = v21;
      *(_OWORD *)(a3 + 8) = v20;
      v18 = v22;
      v19 = v23;
      *(_BYTE *)a3 = 0;
      *(_OWORD *)(a3 + 24) = v17;
      *(_QWORD *)(a3 + 40) = v18;
      *(_QWORD *)(a3 + 48) = v19;
      if (!v24[0] && v25 && (v26 & 1) != 0)
        (*(void (**)(void))(*(_QWORD *)v25 + 40))();
    }
  }
  else
  {
    re::DynamicString::format((re::DynamicString *)"Invalid Asset Path: %s.", (re::DynamicString *)&v20, __s);
    v7 = v20;
    v8 = v21;
    *(_BYTE *)a3 = 0;
    *(_QWORD *)(a3 + 8) = 200;
    *(_QWORD *)(a3 + 16) = &re::AssetErrorCategory(void)::instance;
    *(_OWORD *)(a3 + 24) = v7;
    *(_OWORD *)(a3 + 40) = v8;
  }
  re::FixedArray<re::BlendShapeDefinition>::deinit(v29);
  re::StringID::destroyString((re::StringID *)v27);
}

void sub_225364600(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  _QWORD *v13;
  va_list va;

  va_start(va, a13);
  re::FixedArray<re::BlendShapeDefinition>::deinit(v13);
  re::StringID::destroyString((re::StringID *)va);
  _Unwind_Resume(a1);
}

re *re::BasicJsonCompiler<re::BasicAsset<re::BlendShapeGroupDefinition,&re::kBlendShapeGroupDefinitionAssetName,&re::kBlendShapeGroupDefinitionAssetExtension>>::deleteAsset(uint64_t a1, re *a2)
{
  return re::internal::destroyPersistent<re::BasicAsset<re::BlendShapeGroupDefinition,&re::kBlendShapeGroupDefinitionAssetName,&re::kBlendShapeGroupDefinitionAssetExtension>>(a2);
}

void re::BasicJsonCompiler<re::BasicAsset<re::BlendTreeDefinition,&re::kBlendTreeDefinitionAssetName,&re::kBlendTreeDefinitionAssetExtension>>::~BasicJsonCompiler()
{
  JUMPOUT(0x2276933B8);
}

re::DynamicString *re::BasicJsonCompiler<re::BasicAsset<re::BlendTreeDefinition,&re::kBlendTreeDefinitionAssetName,&re::kBlendTreeDefinitionAssetExtension>>::getCurrentCompiledAssetInfo@<X0>(_anonymous_namespace_ *a1@<X0>, _QWORD *a2@<X8>)
{
  re::DynamicString *v2;
  const char *v3;

  *a2 = 0x100000001;
  v2 = (re::DynamicString *)(a2 + 1);
  v3 = (const char *)re::BasicAsset<re::BlendTreeDefinition,&re::kBlendTreeDefinitionAssetName,&re::kBlendTreeDefinitionAssetExtension>::assetName;
}

uint64_t re::BasicJsonCompiler<re::BasicAsset<re::BlendTreeDefinition,&re::kBlendTreeDefinitionAssetName,&re::kBlendTreeDefinitionAssetExtension>>::assetIntrospectionType()
{
  unsigned __int8 v0;

  v0 = atomic_load((unsigned __int8 *)&qword_254100A60);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_254100A60))
  {
    qword_254100A58 = re::introspect_BlendTreeDefinition(0);
    __cxa_guard_release(&qword_254100A60);
  }
  return qword_254100A58;
}

uint64_t re::BasicJsonCompiler<re::BasicAsset<re::BlendTreeDefinition,&re::kBlendTreeDefinitionAssetName,&re::kBlendTreeDefinitionAssetExtension>>::getSupportedExtensions@<X0>(uint64_t a1@<X8>)
{
  _QWORD v2[2];

  v2[0] = &re::BasicAsset<re::BlendTreeDefinition,&re::kBlendTreeDefinitionAssetName,&re::kBlendTreeDefinitionAssetExtension>::assetExtension;
  v2[1] = 1;
  return re::DynamicArray<char const*>::DynamicArray(a1, (uint64_t)v2);
}

void re::BasicJsonCompiler<re::BasicAsset<re::BlendTreeDefinition,&re::kBlendTreeDefinitionAssetName,&re::kBlendTreeDefinitionAssetExtension>>::compile(char *__s@<X1>, const re::IntrospectionBase *a2@<X3>, uint64_t a3@<X8>)
{
  char *v4;
  char *v6;
  __int128 v7;
  __int128 v8;
  unsigned __int8 v9;
  re *SourceJson;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  __int128 v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  __int128 v18;
  uint64_t v19;
  __int128 v20;
  uint64_t v21;
  uint64_t v22;
  __int128 v23;
  __int128 v24;
  uint64_t v25;
  uint64_t v26;
  _BYTE v27[8];
  uint64_t v28;
  char v29;
  char v30[8];
  uint64_t v31;
  uint64_t v32;
  int v33;
  _OWORD v34[2];
  int v35;
  _BYTE v36[32];
  int v37;
  _BYTE v38[32];
  int v39;
  __int128 v40;
  _QWORD v41[8];
  int v42;
  _BYTE v43[32];
  int v44;
  __int128 v45;
  __int128 v46;
  int v47;
  uint64_t v48;

  v4 = __s;
  *(_QWORD *)v30 = 0;
  v31 = 0;
  v33 = 0;
  v32 = 0;
  v48 = 0;
  memset(v34, 0, sizeof(v34));
  memset(v36, 0, sizeof(v36));
  v35 = 0;
  v37 = 0;
  memset(v38, 0, sizeof(v38));
  v40 = 0u;
  memset(v41, 0, 28);
  memset(&v41[4], 0, 32);
  v39 = 0;
  v42 = 0;
  v44 = 0;
  memset(v43, 0, sizeof(v43));
  v45 = 0u;
  v46 = 0u;
  v47 = 0;
  v6 = strrchr(__s, 46);
  if (strcmp(v6 + 1, (const char *)re::BasicAsset<re::BlendTreeDefinition,&re::kBlendTreeDefinitionAssetName,&re::kBlendTreeDefinitionAssetExtension>::assetExtension))
  {
    re::DynamicString::format((re::DynamicString *)"Invalid Asset Path: %s.", (re::DynamicString *)&v23, v4);
    v7 = v23;
    v8 = v24;
    *(_BYTE *)a3 = 0;
    *(_QWORD *)(a3 + 8) = 200;
    *(_QWORD *)(a3 + 16) = &re::AssetErrorCategory(void)::instance;
    *(_OWORD *)(a3 + 24) = v7;
    *(_OWORD *)(a3 + 40) = v8;
    goto LABEL_17;
  }
  v9 = atomic_load((unsigned __int8 *)&qword_254100A60);
  if ((v9 & 1) == 0)
    goto LABEL_23;
  while (1)
  {
    SourceJson = (re *)re::AssetUtilities::readSourceJson((re::AssetUtilities *)v4, v30, qword_254100A58, a2, (uint64_t)v27);
    if (!v27[0])
      break;
    v11 = re::globalAllocators(SourceJson);
    v4 = (char *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v11[2] + 32))(v11[2], 328, 8);
    *((_QWORD *)v4 + 40) = 0;
    *((_OWORD *)v4 + 18) = 0u;
    *((_OWORD *)v4 + 19) = 0u;
    *((_OWORD *)v4 + 16) = 0u;
    *((_OWORD *)v4 + 17) = 0u;
    *((_OWORD *)v4 + 14) = 0u;
    *((_OWORD *)v4 + 15) = 0u;
    *((_OWORD *)v4 + 12) = 0u;
    *((_OWORD *)v4 + 13) = 0u;
    *((_OWORD *)v4 + 10) = 0u;
    *((_OWORD *)v4 + 11) = 0u;
    *((_OWORD *)v4 + 8) = 0u;
    *((_OWORD *)v4 + 9) = 0u;
    *((_OWORD *)v4 + 6) = 0u;
    *((_OWORD *)v4 + 7) = 0u;
    *((_OWORD *)v4 + 3) = 0u;
    *((_OWORD *)v4 + 4) = 0u;
    *((_OWORD *)v4 + 1) = 0u;
    *((_OWORD *)v4 + 2) = 0u;
    *(_OWORD *)v4 = 0u;
    *((_OWORD *)v4 + 5) = 0u;
    a2 = (const re::IntrospectionBase *)(v4 + 80);
    re::DynamicArray<re::RigComponentConstraint>::operator=((uint64_t)v4, (uint64_t)v30);
    re::DynamicArray<re::DataArray<re::RigGraphNode>::ElementBlock>::operator=((uint64_t)(v4 + 40), (uint64_t)v34 + 8);
    re::DynamicArray<re::RigComponentConstraint>::operator=((uint64_t)(v4 + 80), (uint64_t)&v36[8]);
    re::DynamicArray<re::DataArray<re::RigGraphNode>::ElementBlock>::operator=((uint64_t)(v4 + 120), (uint64_t)&v38[8]);
    *((_QWORD *)v4 + 20) = *((_QWORD *)&v40 + 1);
    if (v4 != v30)
    {
      v13 = *((_QWORD *)v4 + 21);
      if (v13 && v41[0] && v13 != v41[0])
      {
        re::internal::assertLog((re::internal *)4, v12, "assertion failure: '%s' (%s:line %i) ", "!isInitialized() || !other.isInitialized() || m_allocator == other.m_allocator", "operator=", 503);
        _os_crash();
        __break(1u);
        goto LABEL_22;
      }
      *((_QWORD *)v4 + 21) = v41[0];
      v41[0] = v13;
      v14 = *((_OWORD *)v4 + 11);
      *((_QWORD *)v4 + 22) = v41[1];
      *((_QWORD *)v4 + 23) = v41[2];
      *(_OWORD *)&v41[1] = v14;
      v15 = *((_QWORD *)v4 + 25);
      *((_QWORD *)v4 + 25) = v41[4];
      v41[4] = v15;
      ++LODWORD(v41[3]);
      ++*((_DWORD *)v4 + 48);
    }
    re::DynamicArray<re::RigComponentConstraint>::operator=((uint64_t)(v4 + 208), (uint64_t)&v41[5]);
    re::DynamicArray<re::RigComponentConstraint>::operator=((uint64_t)(v4 + 248), (uint64_t)&v43[8]);
    if (v4 == v30)
      goto LABEL_15;
    v17 = *((_QWORD *)v4 + 36);
    if (!v17 || !*((_QWORD *)&v45 + 1) || v17 == *((_QWORD *)&v45 + 1))
    {
      *((_QWORD *)v4 + 36) = *((_QWORD *)&v45 + 1);
      *((_QWORD *)&v45 + 1) = v17;
      v18 = *(_OWORD *)(v4 + 296);
      *(_OWORD *)(v4 + 296) = v46;
      v46 = v18;
      v19 = *((_QWORD *)v4 + 40);
      *((_QWORD *)v4 + 40) = v48;
      v48 = v19;
      ++v47;
      ++*((_DWORD *)v4 + 78);
LABEL_15:
      *(_BYTE *)a3 = 1;
      *(_QWORD *)(a3 + 8) = v4;
      goto LABEL_17;
    }
LABEL_22:
    re::internal::assertLog((re::internal *)4, v16, "assertion failure: '%s' (%s:line %i) ", "!isInitialized() || !other.isInitialized() || m_allocator == other.m_allocator", "operator=", 503);
    _os_crash();
    __break(1u);
LABEL_23:
    if (__cxa_guard_acquire(&qword_254100A60))
    {
      qword_254100A58 = re::introspect_BlendTreeDefinition(0);
      __cxa_guard_release(&qword_254100A60);
    }
  }
  *(_QWORD *)&v23 = 100;
  *((_QWORD *)&v23 + 1) = &re::AssetErrorCategory(void)::instance;
  re::DynamicString::DynamicString((re::DynamicString *)&v24, (const re::DynamicString *)&v28);
  v20 = v24;
  *(_OWORD *)(a3 + 8) = v23;
  v21 = v25;
  v22 = v26;
  *(_BYTE *)a3 = 0;
  *(_OWORD *)(a3 + 24) = v20;
  *(_QWORD *)(a3 + 40) = v21;
  *(_QWORD *)(a3 + 48) = v22;
  if (!v27[0] && v28 && (v29 & 1) != 0)
    (*(void (**)(void))(*(_QWORD *)v28 + 40))();
LABEL_17:
  re::BlendTreeDefinition::~BlendTreeDefinition((re::BlendTreeDefinition *)v30);
}

void sub_225364AE4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, ...)
{
  va_list va;

  va_start(va, a16);
  re::BlendTreeDefinition::~BlendTreeDefinition((re::BlendTreeDefinition *)va);
  _Unwind_Resume(a1);
}

re *re::BasicJsonCompiler<re::BasicAsset<re::BlendTreeDefinition,&re::kBlendTreeDefinitionAssetName,&re::kBlendTreeDefinitionAssetExtension>>::deleteAsset(uint64_t a1, re *a2)
{
  return re::internal::destroyPersistent<re::BasicAsset<re::BlendTreeDefinition,&re::kBlendTreeDefinitionAssetName,&re::kBlendTreeDefinitionAssetExtension>>(a2);
}

_QWORD *re::DynamicArray<re::MeshAssetModel>::growCapacity(_QWORD *this, unint64_t a2)
{
  unint64_t v2;
  unint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  BOOL v6;
  unint64_t v7;

  v2 = this[1];
  if (v2 < a2)
  {
    v3 = a2;
    v4 = this;
    if (*this)
    {
      v5 = 2 * v2;
      v6 = v2 == 0;
      v7 = 8;
      if (!v6)
        v7 = v5;
      if (v7 > a2)
        a2 = v7;
      return re::DynamicArray<re::MeshAssetModel>::setCapacity(this, a2);
    }
    else
    {
      this = re::DynamicArray<re::MeshAssetModel>::setCapacity(v4, v3);
      ++*((_DWORD *)v4 + 6);
    }
  }
  return this;
}

_QWORD *re::DynamicArray<re::MeshAssetSkeleton>::growCapacity(_QWORD *this, unint64_t a2)
{
  unint64_t v2;
  unint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  BOOL v6;
  unint64_t v7;

  v2 = this[1];
  if (v2 < a2)
  {
    v3 = a2;
    v4 = this;
    if (*this)
    {
      v5 = 2 * v2;
      v6 = v2 == 0;
      v7 = 8;
      if (!v6)
        v7 = v5;
      if (v7 > a2)
        a2 = v7;
      return re::DynamicArray<re::MeshAssetSkeleton>::setCapacity(this, a2);
    }
    else
    {
      this = re::DynamicArray<re::MeshAssetSkeleton>::setCapacity(v4, v3);
      ++*((_DWORD *)v4 + 6);
    }
  }
  return this;
}

uint64_t *re::allocInfo_AudioFileAsset(re *this)
{
  unsigned __int8 v1;

  v1 = atomic_load((unsigned __int8 *)&_MergedGlobals_86);
  if ((v1 & 1) == 0 && __cxa_guard_acquire(&_MergedGlobals_86))
  {
    ArcSharedObject::ArcSharedObject((ArcSharedObject *)&qword_254100AE0, 0);
    *(uint64_t *)((char *)&qword_254100AF0 + 6) = 0;
    qword_254100AF0 = 0;
    qword_254100B00 = 0;
    qword_254100B08 = 0xFFFFFFFFLL;
    qword_254100AE0 = (uint64_t)&off_24ED7DAA8;
    qword_254100B10 = (uint64_t)"AudioFileAsset";
    dword_254100B18 = 0;
    unk_254100B20 = 0u;
    unk_254100B30 = 0u;
    unk_254100B40 = 0u;
    qword_254100B50 = 0;
    __cxa_guard_release(&_MergedGlobals_86);
  }
  return &qword_254100AE0;
}

void re::initInfo_AudioFileAsset(re *this, re::IntrospectionBase *a2)
{
  const re::IntrospectionBase *v3;
  unsigned __int8 v4;
  re *v5;
  uint64_t *v6;
  const re::IntrospectionBase *v7;
  void *v8;
  uint64_t v9;
  uint64_t *v10;
  const re::IntrospectionBase *v11;
  void *v12;
  uint64_t v13;
  uint64_t *v14;
  const re::IntrospectionBase *v15;
  void *v16;
  uint64_t v17;
  uint64_t *v18;
  const re::IntrospectionBase *v19;
  void *v20;
  uint64_t v21;
  uint64_t *v22;
  const re::IntrospectionBase *v23;
  uint64_t *v24;
  uint64_t v25;
  uint64_t *v26;
  const re::IntrospectionBase *v27;
  void *v28;
  uint64_t v29;
  uint64_t *v30;
  const re::IntrospectionBase *v31;
  void *v32;
  uint64_t v33;
  uint64_t *v34;
  const re::IntrospectionBase *v35;
  uint64_t *v36;
  uint64_t v37;
  uint64_t *v38;
  const re::IntrospectionBase *v39;
  uint64_t *v40;
  uint64_t v41;
  uint64_t *v42;
  const re::IntrospectionBase *v43;
  void *v44;
  uint64_t v45;
  uint64_t *v46;
  const re::IntrospectionBase *v47;
  uint64_t *v48;
  uint64_t v49;
  uint64_t *v50;
  const re::IntrospectionBase *v51;
  void *v52;
  uint64_t v53;
  uint64_t *v54;
  const re::IntrospectionBase *v55;
  void *v56;
  uint64_t v57;
  __int128 v58;
  _QWORD v59[2];
  __int128 v60;

  v59[0] = 0x5AD9D7EF0324A77CLL;
  v59[1] = "AudioFileAsset";
  re::StringID::destroyString((re::StringID *)v59);
  *((_OWORD *)this + 2) = v60;
  v4 = atomic_load((unsigned __int8 *)&qword_254100A70);
  if ((v4 & 1) == 0)
  {
    v5 = (re *)__cxa_guard_acquire(&qword_254100A70);
    if ((_DWORD)v5)
    {
      v6 = re::introspectionAllocator(v5);
      v8 = re::introspect_int((re *)1, v7);
      v9 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v6 + 32))(v6, 72, 8);
      *(_DWORD *)v9 = 1;
      *(_QWORD *)(v9 + 8) = "loopCount";
      *(_QWORD *)(v9 + 16) = v8;
      *(_QWORD *)(v9 + 24) = 0;
      *(_QWORD *)(v9 + 32) = 0x6000000001;
      *(_DWORD *)(v9 + 40) = 0;
      *(_QWORD *)(v9 + 48) = 0;
      *(_QWORD *)(v9 + 56) = 0;
      *(_DWORD *)(v9 + 64) = 0;
      qword_254100A78 = v9;
      v10 = re::introspectionAllocator((re *)v9);
      v12 = re::introspect_float((re *)1, v11);
      v13 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v10 + 32))(v10, 72, 8);
      *(_DWORD *)v13 = 1;
      *(_QWORD *)(v13 + 8) = "referenceLevel";
      *(_QWORD *)(v13 + 16) = v12;
      *(_QWORD *)(v13 + 24) = 0;
      *(_QWORD *)(v13 + 32) = 0x3000000002;
      *(_DWORD *)(v13 + 40) = 0;
      *(_QWORD *)(v13 + 48) = 0;
      *(_QWORD *)(v13 + 56) = 0;
      *(_DWORD *)(v13 + 64) = 0;
      qword_254100A80 = v13;
      v14 = re::introspectionAllocator((re *)v13);
      v16 = re::introspect_uint64_t((re *)1, v15);
      v17 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v14 + 32))(v14, 72, 8);
      *(_DWORD *)v17 = 1;
      *(_QWORD *)(v17 + 8) = "lengthInFrames";
      *(_QWORD *)(v17 + 16) = v16;
      *(_QWORD *)(v17 + 24) = 0;
      *(_QWORD *)(v17 + 32) = 0x8800000003;
      *(_DWORD *)(v17 + 40) = 0;
      *(_QWORD *)(v17 + 48) = 0;
      *(_QWORD *)(v17 + 56) = 0;
      *(_DWORD *)(v17 + 64) = 0;
      qword_254100A88 = v17;
      v18 = re::introspectionAllocator((re *)v17);
      v20 = re::introspect_BOOL((re *)1, v19);
      v21 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v18 + 32))(v18, 72, 8);
      *(_DWORD *)v21 = 1;
      *(_QWORD *)(v21 + 8) = "streaming";
      *(_QWORD *)(v21 + 16) = v20;
      *(_QWORD *)(v21 + 24) = 0;
      *(_QWORD *)(v21 + 32) = 0x6400000004;
      *(_DWORD *)(v21 + 40) = 0;
      *(_QWORD *)(v21 + 48) = 0;
      *(_QWORD *)(v21 + 56) = 0;
      *(_DWORD *)(v21 + 64) = 0;
      qword_254100A90 = v21;
      v22 = re::introspectionAllocator((re *)v21);
      v24 = introspect_REAudioInputMode(1, v23);
      v25 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v22 + 32))(v22, 72, 8);
      *(_DWORD *)v25 = 1;
      *(_QWORD *)(v25 + 8) = "inputMode";
      *(_QWORD *)(v25 + 16) = v24;
      *(_QWORD *)(v25 + 24) = 0;
      *(_QWORD *)(v25 + 32) = 0x3400000005;
      *(_DWORD *)(v25 + 40) = 0;
      *(_QWORD *)(v25 + 48) = 0;
      *(_QWORD *)(v25 + 56) = 0;
      *(_DWORD *)(v25 + 64) = 0;
      qword_254100A98 = v25;
      v26 = re::introspectionAllocator((re *)v25);
      v28 = re::introspect_double((re *)1, v27);
      v29 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v26 + 32))(v26, 72, 8);
      *(_DWORD *)v29 = 1;
      *(_QWORD *)(v29 + 8) = "maximumAlignmentLatency";
      *(_QWORD *)(v29 + 16) = v28;
      *(_QWORD *)(v29 + 24) = 0;
      *(_QWORD *)(v29 + 32) = 0x9000000006;
      *(_DWORD *)(v29 + 40) = 0;
      *(_QWORD *)(v29 + 48) = 0;
      *(_QWORD *)(v29 + 56) = 0;
      *(_DWORD *)(v29 + 64) = 0;
      qword_254100AA0 = v29;
      v30 = re::introspectionAllocator((re *)v29);
      v32 = re::introspect_BOOL((re *)1, v31);
      v33 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v30 + 32))(v30, 72, 8);
      *(_DWORD *)v33 = 1;
      *(_QWORD *)(v33 + 8) = "randomizeStart";
      *(_QWORD *)(v33 + 16) = v32;
      *(_QWORD *)(v33 + 24) = 0;
      *(_QWORD *)(v33 + 32) = 0x6500000008;
      *(_DWORD *)(v33 + 40) = 0;
      *(_QWORD *)(v33 + 48) = 0;
      *(_QWORD *)(v33 + 56) = 0;
      *(_DWORD *)(v33 + 64) = 0;
      qword_254100AA8 = v33;
      v34 = re::introspectionAllocator((re *)v33);
      v36 = introspect_REAudioNormalizationMode(1, v35);
      v37 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v34 + 32))(v34, 72, 8);
      *(_DWORD *)v37 = 1;
      *(_QWORD *)(v37 + 8) = "normalizationMode";
      *(_QWORD *)(v37 + 16) = v36;
      *(_QWORD *)(v37 + 24) = 0;
      *(_QWORD *)(v37 + 32) = 0x6800000009;
      *(_DWORD *)(v37 + 40) = 0;
      *(_QWORD *)(v37 + 48) = 0;
      *(_QWORD *)(v37 + 56) = 0;
      *(_DWORD *)(v37 + 64) = 0;
      qword_254100AB0 = v37;
      v38 = re::introspectionAllocator((re *)v37);
      v40 = introspect_REAudioCalibrationMode(1, v39);
      v41 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v38 + 32))(v38, 72, 8);
      *(_DWORD *)v41 = 1;
      *(_QWORD *)(v41 + 8) = "calibrationMode";
      *(_QWORD *)(v41 + 16) = v40;
      *(_QWORD *)(v41 + 24) = 0;
      *(_QWORD *)(v41 + 32) = 0x6C0000000ALL;
      *(_DWORD *)(v41 + 40) = 0;
      *(_QWORD *)(v41 + 48) = 0;
      *(_QWORD *)(v41 + 56) = 0;
      *(_DWORD *)(v41 + 64) = 0;
      qword_254100AB8 = v41;
      v42 = re::introspectionAllocator((re *)v41);
      v44 = re::introspect_double((re *)1, v43);
      v45 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v42 + 32))(v42, 72, 8);
      *(_DWORD *)v45 = 1;
      *(_QWORD *)(v45 + 8) = "calibrationLevel";
      *(_QWORD *)(v45 + 16) = v44;
      *(_QWORD *)(v45 + 24) = 0;
      *(_QWORD *)(v45 + 32) = 0x700000000BLL;
      *(_DWORD *)(v45 + 40) = 0;
      *(_QWORD *)(v45 + 48) = 0;
      *(_QWORD *)(v45 + 56) = 0;
      *(_DWORD *)(v45 + 64) = 0;
      qword_254100AC0 = v45;
      v46 = re::introspectionAllocator((re *)v45);
      v48 = re::IntrospectionInfo<re::Optional<re::DynamicString>>::get(1, v47);
      v49 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v46 + 32))(v46, 72, 8);
      *(_DWORD *)v49 = 1;
      *(_QWORD *)(v49 + 8) = "mixGroupName";
      *(_QWORD *)(v49 + 16) = v48;
      *(_QWORD *)(v49 + 24) = 0;
      *(_QWORD *)(v49 + 32) = 0x380000000CLL;
      *(_DWORD *)(v49 + 40) = 0;
      *(_QWORD *)(v49 + 48) = 0;
      *(_QWORD *)(v49 + 56) = 0;
      *(_DWORD *)(v49 + 64) = 0;
      qword_254100AC8 = v49;
      v50 = re::introspectionAllocator((re *)v49);
      v52 = re::introspect_uint32_t((re *)1, v51);
      v53 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v50 + 32))(v50, 72, 8);
      *(_DWORD *)v53 = 1;
      *(_QWORD *)(v53 + 8) = "layoutTag";
      *(_QWORD *)(v53 + 16) = v52;
      *(_QWORD *)(v53 + 24) = 0;
      *(_QWORD *)(v53 + 32) = 0x800000000DLL;
      *(_DWORD *)(v53 + 40) = 0;
      *(_QWORD *)(v53 + 48) = 0;
      *(_QWORD *)(v53 + 56) = 0;
      *(_DWORD *)(v53 + 64) = 0;
      qword_254100AD0 = v53;
      v54 = re::introspectionAllocator((re *)v53);
      v56 = re::introspect_double((re *)1, v55);
      v57 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v54 + 32))(v54, 72, 8);
      *(_DWORD *)v57 = 1;
      *(_QWORD *)(v57 + 8) = "targetLUFS";
      *(_QWORD *)(v57 + 16) = v56;
      *(_QWORD *)(v57 + 24) = 0;
      *(_QWORD *)(v57 + 32) = 0x780000000ELL;
      *(_DWORD *)(v57 + 40) = 0;
      *(_QWORD *)(v57 + 48) = 0;
      *(_QWORD *)(v57 + 56) = 0;
      *(_DWORD *)(v57 + 64) = 0;
      qword_254100AD8 = v57;
      __cxa_guard_release(&qword_254100A70);
    }
  }
  *((_QWORD *)this + 2) = 0xA800000008;
  *((_DWORD *)this + 6) = 8;
  *((_WORD *)this + 14) = 0;
  *((_DWORD *)this + 14) = 13;
  *((_QWORD *)this + 8) = &qword_254100A78;
  *((_QWORD *)this + 9) = re::internal::defaultConstruct<re::AudioFileAsset>;
  *((_QWORD *)this + 10) = re::internal::defaultDestruct<re::AudioFileAsset>;
  *((_QWORD *)this + 11) = 0;
  *((_QWORD *)this + 12) = 0;
  *((_QWORD *)this + 13) = re::internal::defaultConstructV2<re::AudioFileAsset>;
  *((_QWORD *)this + 14) = re::internal::defaultDestructV2<re::AudioFileAsset>;
  re::IntrospectionRegistry::add(this, v3);
  v58 = v60;
}

void sub_2253652E8(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254100A70);
  _Unwind_Resume(a1);
}

re::AudioFileAsset *re::internal::defaultConstruct<re::AudioFileAsset>(int a1, int a2, re::AudioFileAsset *this)
{
  return re::AudioFileAsset::AudioFileAsset(this);
}

void re::internal::defaultDestruct<re::AudioFileAsset>(int a1, int a2, re::AudioFileAsset *this)
{
  re::AudioFileAsset::~AudioFileAsset(this);
}

uint64_t re::introspect_AudioFileAsset(re::IntrospectionBase **this)
{
  return re::internal::getOrCreateInfo((re::internal *)"AudioFileAsset", (uint64_t (*)(re::internal *))re::allocInfo_AudioFileAsset, (re::IntrospectionBase *(*)(void))re::initInfo_AudioFileAsset, (void (*)(re::IntrospectionBase *))&re::internal::introspectionInfoStorage<re::AudioFileAsset>, this);
}

uint64_t re::AudioFileAsset::Impl::operator==(uint64_t *a1, _QWORD *a2)
{
  uint64_t result;

  result = *a1;
  if (result == *a2 || result && (result = objc_msgSend((id)result, "isEqual:"), (_DWORD)result))
  {
    result = a1[1];
    if (result == a2[1] || result && (result = objc_msgSend((id)result, "isEqual:"), (_DWORD)result))
    {
      result = a1[2];
      if (result == a2[2] || result && (result = objc_msgSend((id)result, "isEqual:"), (_DWORD)result))
      {
        result = a1[4];
        if (result == a2[4])
        {
          return 1;
        }
        else if (result)
        {
          return objc_msgSend((id)result, "isEqual:");
        }
      }
    }
  }
  return result;
}

re::AudioFileAsset *re::AudioFileAsset::AudioFileAsset(re::AudioFileAsset *this)
{
  re::DynamicString *v2;
  re *v3;
  uint64_t *v4;
  re::AudioFileAsset::Impl *v5;
  unint64_t __buf;

  *(_QWORD *)this = &off_24ED38E18;
  v2 = (re::AudioFileAsset *)((char *)this + 16);
  *((_DWORD *)this + 12) = -1052770304;
  *((_BYTE *)this + 52) = 0;
  *((_BYTE *)this + 56) = 0;
  *((_DWORD *)this + 24) = 0;
  *((_WORD *)this + 50) = 0;
  *((_QWORD *)this + 13) = 0;
  *((_OWORD *)this + 7) = xmmword_2260FDBF0;
  *((_QWORD *)this + 16) = 4294901760;
  *((_QWORD *)this + 20) = 0;
  *((_QWORD *)this + 18) = 0;
  *(_DWORD *)((char *)this + 151) = 0;
  v4 = re::globalAllocators(v3);
  v5 = (re::AudioFileAsset::Impl *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v4[2] + 32))(v4[2], 192, 8);
  *((_QWORD *)this + 1) = re::AudioFileAsset::Impl::Impl(v5);
  for (__buf = 0; __buf < 0x3E8; arc4random_buf(&__buf, 8uLL))
    ;
  *(_QWORD *)(*((_QWORD *)this + 1) + 24) = __buf;
  return this;
}

void sub_2253654EC(_Unwind_Exception *exception_object)
{
  _OWORD *v1;
  uint64_t v2;
  uint64_t v4;

  if (*(_BYTE *)(v2 + 56))
  {
    v4 = *(_QWORD *)(v2 + 64);
    if (v4)
    {
      if ((*(_BYTE *)(v2 + 72) & 1) != 0)
        (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v4 + 40))(v4, *(_QWORD *)(v2 + 80));
      *(_OWORD *)(v2 + 64) = 0u;
      *(_OWORD *)(v2 + 80) = 0u;
    }
  }
  if (*(_QWORD *)v1)
  {
    if ((*(_BYTE *)(v2 + 24) & 1) != 0)
      (*(void (**)(_QWORD, _QWORD))(**(_QWORD **)v1 + 40))(*(_QWORD *)v1, *(_QWORD *)(v2 + 32));
    *v1 = 0u;
    v1[1] = 0u;
  }
  _Unwind_Resume(exception_object);
}

unsigned __int8 *re::AudioFileAsset::setConfiguration(uint64_t a1, uint64_t a2)
{
  unsigned __int8 *result;

  *(_BYTE *)(a1 + 100) = *(_BYTE *)a2;
  result = re::Optional<re::DynamicString>::operator=((unsigned __int8 *)(a1 + 56), (unsigned __int8 *)(a2 + 32));
  *(_BYTE *)(a1 + 101) = *(_BYTE *)(a2 + 2);
  *(_DWORD *)(a1 + 96) = -*(char *)(a2 + 1);
  *(_QWORD *)(a1 + 112) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 104) = *(_QWORD *)(a2 + 4);
  *(_BYTE *)(a1 + 52) = *(_BYTE *)(a2 + 80);
  *(_QWORD *)(a1 + 120) = *(_QWORD *)(a2 + 24);
  if (*(_BYTE *)(a2 + 72))
    *(_DWORD *)(a1 + 128) = *(_DWORD *)(a2 + 76);
  return result;
}

void re::AudioFileAsset::~AudioFileAsset(re::AudioFileAsset *this)
{
  uint64_t v2;
  uint64_t v3;
  mach_port_name_t v4;
  re *v5;
  mach_error_t v6;
  NSObject *v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  char *v11;
  uint64_t v12;

  v12 = *MEMORY[0x24BDAC8D0];
  v2 = *((_QWORD *)this + 1);
  if (v2)
  {
    v3 = re::globalAllocators(this)[2];

    *(_QWORD *)(v2 + 48) = &off_24ED7BE48;
    *(_QWORD *)(v2 + 48) = &off_24ED7BDD0;
    re::internal::MemoryInputStream<re::FixedArray<char>>::~MemoryInputStream(v2 + 80);

    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v3 + 40))(v3, v2);
  }
  v4 = *((_DWORD *)this + 33);
  if (v4 + 1 >= 2)
  {
    v5 = (re *)mach_port_deallocate(*MEMORY[0x24BDAEC58], v4);
    v6 = (int)v5;
    if ((_DWORD)v5)
    {
      v7 = (id)*re::audioLogObjects(v5);
      if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
      {
        v10 = 136315138;
        v11 = mach_error_string(v6);
        _os_log_error_impl(&dword_224FE9000, v7, OS_LOG_TYPE_ERROR, "[CoreRE] [AudioFileAsset] Failed to deallocate mach port, with KERN error code: %s", (uint8_t *)&v10, 0xCu);
      }

    }
  }
  if (*((_BYTE *)this + 56))
  {
    v8 = *((_QWORD *)this + 8);
    if (v8)
    {
      if ((*((_BYTE *)this + 72) & 1) != 0)
        (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v8 + 40))(v8, *((_QWORD *)this + 10));
      *((_OWORD *)this + 4) = 0u;
      *((_OWORD *)this + 5) = 0u;
    }
  }
  v9 = *((_QWORD *)this + 2);
  if (v9)
  {
    if ((*((_BYTE *)this + 24) & 1) != 0)
      (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v9 + 40))(v9, *((_QWORD *)this + 4));
    *((_OWORD *)this + 1) = 0u;
    *((_OWORD *)this + 2) = 0u;
  }
}

{
  re::AudioFileAsset::~AudioFileAsset(this);
  JUMPOUT(0x2276933B8);
}

void sub_225365794(_Unwind_Exception *a1)
{
  uint64_t v1;
  void *v2;
  void *v3;
  uint64_t v5;
  uint64_t v6;

  v3 = v2;

  if (*(_BYTE *)(v1 + 56))
  {
    v5 = *(_QWORD *)(v1 + 64);
    if (v5)
    {
      if ((*(_BYTE *)(v1 + 72) & 1) != 0)
        (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v5 + 40))(v5, *(_QWORD *)(v1 + 80));
      *(_OWORD *)(v1 + 64) = 0u;
      *(_OWORD *)(v1 + 80) = 0u;
    }
  }
  v6 = *(_QWORD *)(v1 + 16);
  if (v6)
  {
    if ((*(_BYTE *)(v1 + 24) & 1) != 0)
      (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v6 + 40))(v6, *(_QWORD *)(v1 + 32));
    *(_OWORD *)(v1 + 16) = 0u;
    *(_OWORD *)(v1 + 32) = 0u;
  }
  _Unwind_Resume(a1);
}

void re::AudioFileAsset::cloneFrom(re::AudioFileAsset *this, const re::AudioFileAsset *a2)
{
  unsigned __int8 v4;
  __guard *v5;
  const re::IntrospectionBase *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t Detached;
  uint64_t v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  id v16;
  _QWORD __buf[4];
  id v18[10];

  v13 = 0;
  v14 = 0;
  v15 = 0;
  if ((v4 & 1) == 0)
    goto LABEL_10;
  while (1)
  {
    v6 = (const re::IntrospectionBase *)v5[505];
    __buf[1] = 0;
    __buf[2] = &v13;
    re::internal::assertLog((re::internal *)4, v7, "assertion failure: '%s' (%s:line %i) ", "ok", "cloneFrom", 189, v13, v14, v15);
    _os_crash();
    __break(1u);
LABEL_10:
    if (v12)
    {
      re::introspect<re::AudioFileAsset>(void)::info = re::internal::getOrCreateInfo((re::internal *)"AudioFileAsset", (uint64_t (*)(re::internal *))re::allocInfo_AudioFileAsset, (re::IntrospectionBase *(*)(void))re::initInfo_AudioFileAsset, (void (*)(re::IntrospectionBase *))&re::internal::introspectionInfoStorage<re::AudioFileAsset>, 0);
    }
  }
  v8 = *((_QWORD *)this + 1);
  v9 = *((_QWORD *)a2 + 1);
  objc_storeStrong((id *)v8, *(id *)v9);
  objc_storeStrong((id *)(v8 + 8), *(id *)(v9 + 8));
  objc_storeStrong((id *)(v8 + 16), *(id *)(v9 + 16));
  *(_QWORD *)(v8 + 40) = *(_QWORD *)(v9 + 40);
  __buf[0] = 0;
  do
    arc4random_buf(__buf, 8uLL);
  while (__buf[0] < 0x3E8uLL);
  *(_QWORD *)(v8 + 24) = __buf[0];
  objc_storeStrong((id *)(v8 + 32), *(id *)(v9 + 32));
  if (*(_QWORD *)(v9 + 72))
  {
    Detached = re::DataSeekableInputStream::CreateDetached((id *)(v9 + 48));
    re::DataSeekableInputStream::operator=(v8 + 48, Detached);
    v11 = *(_QWORD *)(v9 + 160);
  }
  else
  {
    v16 = 0;
    re::DataSeekableInputStream::DataSeekableInputStream((uint64_t)__buf, &v16, 0, 0);
    re::DataSeekableInputStream::operator=(v8 + 48, (uint64_t)__buf);
    __buf[0] = &off_24ED7BE48;

    __buf[0] = &off_24ED7BDD0;
    re::internal::MemoryInputStream<re::FixedArray<char>>::~MemoryInputStream((uint64_t)v18);

    v11 = 0;
  }
  *(_QWORD *)(v8 + 160) = v11;
}

uint64_t *re::AudioFileAsset::assetType(re::AudioFileAsset *this)
{
  unsigned __int8 v1;

  {
    re::AudioFileAsset::assetType(void)::type = (uint64_t)"AudioFile";
    qword_2558276D8 = 0;
    re::AssetType::generateCompiledExtension((re::AssetType *)&re::AudioFileAsset::assetType(void)::type);
  }
  return &re::AudioFileAsset::assetType(void)::type;
}

_QWORD *re::AudioFileAsset::supportedExtensions@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3;
  _QWORD *result;

  v3 = 0;
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)a1 = 0;
  *(_DWORD *)(a1 + 24) = 0;
  do
    result = re::DynamicArray<re::TransitionCondition *>::add((_QWORD *)a1, &re::AudioFileAsset::supportedExtensions(void)::supportedExtensions[v3++]);
  while (v3 != 11);
  return result;
}

void sub_225365AEC(_Unwind_Exception *a1)
{
  uint64_t *v1;

  re::DynamicArray<char const*>::~DynamicArray(v1);
  _Unwind_Resume(a1);
}

BOOL re::AudioFileAsset::shouldSkipCompressionOnExport(re::AudioFileAsset *this)
{
  void *v1;
  void *v2;
  _BOOL8 v3;

  v1 = (void *)**((_QWORD **)this + 1);
  if (!v1)
    return 0;
  objc_msgSend(v1, "fileFormat");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  v3 = *(_DWORD *)(objc_msgSend(v2, "streamDescription") + 8) != 1819304813;

  return v3;
}

void sub_225365B58(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

BOOL re::AudioFileAsset::prepareToLoadFrom(re::AudioFileAsset *this, const char *__s)
{
  re::DynamicString *v4;
  void *v5;
  void *v6;
  void *v7;
  re *v8;
  re *v9;
  _BOOL8 v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  NSObject *v14;
  char *v16;
  id v17;
  _BYTE buf[22];
  uint64_t v19;

  v19 = *MEMORY[0x24BDAC8D0];
  v4 = (re::AudioFileAsset *)((char *)this + 16);
  *(_QWORD *)buf = __s;
  *(_QWORD *)&buf[8] = strlen(__s);
  re::DynamicString::operator=(v4, (uint64_t)buf);
  objc_msgSend(MEMORY[0x24BDD17C8], "stringWithUTF8String:", __s);
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  if (v5)
  {
    objc_msgSend(MEMORY[0x24BDBCF48], "fileURLWithPath:", v5);
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    if (v6)
    {
      objc_storeStrong((id *)(*((_QWORD *)this + 1) + 32), v6);
      v17 = 0;
      v7 = (void *)objc_msgSend(objc_alloc(MEMORY[0x24BDB1810]), "initForReading:error:", v6, &v17);
      v8 = (re *)v17;
      v9 = v8;
      v10 = v7 != 0;
      if (v7)
      {
        objc_storeStrong(*((id **)this + 1), v7);
        objc_msgSend(v7, "processingFormat");
        v11 = objc_claimAutoreleasedReturnValue();
        v12 = *((_QWORD *)this + 1);
        v13 = *(void **)(v12 + 8);
        *(_QWORD *)(v12 + 8) = v11;

        *((_QWORD *)this + 17) = objc_msgSend(v7, "length");
      }
      else
      {
        v14 = *re::audioLogObjects(v8);
        if (os_log_type_enabled(v14, OS_LOG_TYPE_ERROR))
        {
          if ((*((_BYTE *)this + 24) & 1) != 0)
            v16 = (char *)*((_QWORD *)this + 4);
          else
            v16 = (char *)this + 25;
          *(_DWORD *)buf = 136315394;
          *(_QWORD *)&buf[4] = v16;
          *(_WORD *)&buf[12] = 2112;
          *(_QWORD *)&buf[14] = v9;
          _os_log_error_impl(&dword_224FE9000, v14, OS_LOG_TYPE_ERROR, "Failed to load audio file at '%s'. Error = %@", buf, 0x16u);
        }
      }

    }
    else
    {
      v10 = 0;
    }

  }
  else
  {
    v10 = 0;
  }

  return v10;
}

void sub_225365D3C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

void re::AudioFileAsset::loadBuffer(re::AudioFileAsset *this, AVAudioPCMBuffer *a2)
{
  AVAudioPCMBuffer *v4;
  AVAudioPCMBuffer *v5;
  re::audio *v6;
  AVAudioFormat *v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  re *v12;
  NSObject *v13;
  uint8_t v14[16];

  v4 = a2;
  v5 = v4;
  if (v4)
  {
    -[AVAudioPCMBuffer format](v4, "format");
    v6 = (re::audio *)objc_claimAutoreleasedReturnValue();
    v8 = re::audio::layoutTagFromFormat(v6, v7);

    if (v8 != -65536)
    {
      objc_storeStrong((id *)(*((_QWORD *)this + 1) + 16), a2);
      -[AVAudioPCMBuffer format](v5, "format");
      v9 = objc_claimAutoreleasedReturnValue();
      v10 = *((_QWORD *)this + 1);
      v11 = *(void **)(v10 + 8);
      *(_QWORD *)(v10 + 8) = v9;

      v12 = (re *)-[AVAudioPCMBuffer frameLength](v5, "frameLength");
      *((_QWORD *)this + 17) = v12;
      if (!(_DWORD)v12)
      {
        v13 = *re::audioLogObjects(v12);
        if (os_log_type_enabled(v13, OS_LOG_TYPE_ERROR))
        {
          *(_WORD *)v14 = 0;
          _os_log_error_impl(&dword_224FE9000, v13, OS_LOG_TYPE_ERROR, "AudioFileAsset handed AVAudioPCMBuffer with frameLength=0", v14, 2u);
        }
      }
    }
  }

}

void sub_225365E60(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void re::AudioFileAsset::markAsIncompleteLoad(re::AudioFileAsset *this)
{
  unint64_t __buf;

  if (*((_BYTE *)this + 153))
    *(_WORD *)((char *)this + 153) = 256;
  for (__buf = 0; __buf < 0x3E8; arc4random_buf(&__buf, 8uLL))
    ;
  *(_QWORD *)(*((_QWORD *)this + 1) + 24) = __buf;
}

uint64_t re::AudioFileAsset::createSharableFileBuffer(re::AudioFileAsset::Impl **this, re::SeekableInputStream *a2)
{
  uint64_t v4;
  uint64_t result;
  uint64_t v6;
  char *v7;
  uint64_t Bytes;
  re::AudioFileAsset::Impl *v9;
  xpc_object_t XPCObject;
  re::AudioFileAsset::Impl *v11;
  void *v12;
  NSObject *v13;
  void (**v14)(re::SeekableInputStreamReaderAdaptor *__hidden);
  re::SeekableInputStream *v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  char v20;

  v4 = (*(uint64_t (**)(re::SeekableInputStream *))(*(_QWORD *)a2 + 64))(a2);
  result = re::AudioFileAsset::Impl::createIOSurface(this[1], v4);
  if ((_DWORD)result)
  {
    v6 = objc_msgSend(*((id *)this[1] + 21), "baseAddress");
    if (v6)
    {
      v7 = (char *)v6;
      result = (*(uint64_t (**)(re::SeekableInputStream *))(*(_QWORD *)a2 + 48))(a2);
      if ((_DWORD)result)
      {
        result = (*(uint64_t (**)(re::SeekableInputStream *, _QWORD))(*(_QWORD *)a2 + 56))(a2, 0);
        if ((_DWORD)result)
        {
          v14 = &off_24ED7C6E0;
          v15 = a2;
          v16 = 0;
          v17 = 0;
          v18 = 0;
          v19 = (*(uint64_t (**)(re::SeekableInputStream *))(*(_QWORD *)a2 + 40))(a2);
          v20 = 0;
          Bytes = re::SeekableInputStreamReaderAdaptor::readBytes((re::SeekableInputStreamReaderAdaptor *)&v14, v7, v4);
          v9 = this[1];
          *((_QWORD *)v9 + 5) = Bytes;
          XPCObject = IOSurfaceCreateXPCObject(*((IOSurfaceRef *)v9 + 21));
          v11 = this[1];
          v12 = (void *)*((_QWORD *)v11 + 23);
          *((_QWORD *)v11 + 23) = XPCObject;

          if (v17)
            (*(void (**)(re::SeekableInputStream *))(*(_QWORD *)v15 + 24))(v15);
          return 1;
        }
      }
    }
    else
    {
      v13 = *re::audioLogObjects(0);
      result = os_log_type_enabled(v13, OS_LOG_TYPE_ERROR);
      if ((_DWORD)result)
      {
        LOWORD(v14) = 0;
        _os_log_error_impl(&dword_224FE9000, v13, OS_LOG_TYPE_ERROR, "[AudioFileAsset] [createSharableFileBuffer] surfaceBaseAddress is nil.", (uint8_t *)&v14, 2u);
        return 0;
      }
    }
  }
  return result;
}

void sub_225366030(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, int a12)
{
  if (a12)
    (*(void (**)(uint64_t))(*(_QWORD *)a10 + 24))(a10);
  _Unwind_Resume(exception_object);
}

BOOL re::AudioFileAsset::Impl::createIOSurface(re::AudioFileAsset::Impl *this, uint64_t a2)
{
  void *v3;
  const __CFDictionary *v4;
  __IOSurface *v5;
  const void *v6;
  re *v7;
  mach_error_t v8;
  NSObject *v9;
  void *v10;
  NSObject *v11;
  uint8_t buf[4];
  char *v14;
  _QWORD v15[2];
  _QWORD v16[3];

  v16[2] = *MEMORY[0x24BDAC8D0];
  v15[0] = *MEMORY[0x24BDD8E18];
  objc_msgSend(MEMORY[0x24BDD16E0], "numberWithUnsignedLong:", a2);
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  v15[1] = *MEMORY[0x24BDD8FB8];
  v16[0] = v3;
  v16[1] = MEMORY[0x24BDBD1C0];
  objc_msgSend(MEMORY[0x24BDBCE70], "dictionaryWithObjects:forKeys:count:", v16, v15, 2);
  v4 = (const __CFDictionary *)objc_claimAutoreleasedReturnValue();

  v5 = IOSurfaceCreate(v4);
  if (v5)
  {
    v6 = (const void *)objc_msgSend(MEMORY[0x24BDD17C8], "stringWithFormat:", CFSTR("%p: %s %llu"), v5, "REKit_Audio_Asset:", *((_QWORD *)this + 3));
    IOSurfaceSetValue(v5, (CFStringRef)*MEMORY[0x24BDD8EE0], v6);
    v7 = (re *)IOSurfaceSetOwnership();
    v8 = (int)v7;
    if ((_DWORD)v7)
    {
      v9 = (id)*re::audioLogObjects(v7);
      if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 136315138;
        v14 = mach_error_string(v8);
        _os_log_error_impl(&dword_224FE9000, v9, OS_LOG_TYPE_ERROR, "[AudioFileAsset] [createIOSurface] Failed to attribute IOSurface allocation: %s", buf, 0xCu);
      }

    }
    v10 = (void *)*((_QWORD *)this + 21);
    *((_QWORD *)this + 21) = v5;

  }
  else
  {
    v11 = *re::audioLogObjects(0);
    if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      _os_log_error_impl(&dword_224FE9000, v11, OS_LOG_TYPE_ERROR, "[AudioFileAsset] [createIOSurface] IOSurfaceCreate returned a NULL surface.", buf, 2u);
    }
  }

  return v5 != 0;
}

void sub_225366254(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

uint64_t re::AudioFileAsset::createSharablePCMBuffer(re::AudioFileAsset *this)
{
  _QWORD *v2;
  void *v3;
  re::audio *v4;
  void *v5;
  uint64_t v6;
  re *v7;
  void *v8;
  void *v9;
  int v10;
  re *v11;
  NSObject *v12;
  const char *v13;
  re::audio *v14;
  void *v15;
  char v16;
  id v17;
  uint64_t v18;
  AVAudioPCMBuffer *v19;
  NSObject *v20;
  NSObject *v21;
  uint64_t v22;
  re::audio *v23;
  unint64_t i;
  void *v25;
  BOOL v26;
  xpc_object_t XPCObject;
  uint64_t v28;
  void *v29;
  uint64_t v30;
  void *v31;
  uint64_t v32;
  NSObject *v33;
  void *v35;
  uint64_t v36;
  void *v37;
  void *v38;
  void *v39;
  void *v40;
  void *v41;
  void *v42;
  id v43;
  uint8_t buf[4];
  uint64_t v45;
  __int16 v46;
  void *v47;
  uint64_t v48;

  v48 = *MEMORY[0x24BDAC8D0];
  v2 = (_QWORD *)*((_QWORD *)this + 1);
  v3 = (void *)v2[2];
  if (v3)
  {
    v4 = v3;
  }
  else
  {
    if (!*v2 || !v2[1])
    {
      v21 = (id)*re::audioLogObjects(this);
      if (os_log_type_enabled(v21, OS_LOG_TYPE_ERROR))
      {
        objc_msgSend(**((id **)this + 1), "url");
        v37 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v37, "lastPathComponent");
        v38 = (void *)objc_claimAutoreleasedReturnValue();
        v39 = *(void **)(*((_QWORD *)this + 1) + 8);
        *(_DWORD *)buf = 138412546;
        v45 = (uint64_t)v38;
        v46 = 2112;
        v47 = v39;
        _os_log_error_impl(&dword_224FE9000, v21, OS_LOG_TYPE_ERROR, "AudioFileAsset::createSharablePCMBuffer Failed to create buffer with audio file (%@) and audioFormat=%@", buf, 0x16u);

      }
      v4 = 0;
      goto LABEL_35;
    }
    if (re::internal::enableSignposts(0, 0))
      kdebug_trace();
    objc_msgSend(**((id **)this + 1), "setFramePosition:", 0);
    v14 = (re::audio *)objc_msgSend(objc_alloc(MEMORY[0x24BDB1838]), "initWithPCMFormat:frameCapacity:", *(_QWORD *)(*((_QWORD *)this + 1) + 8), objc_msgSend(**((id **)this + 1), "length"));
    v15 = (void *)**((_QWORD **)this + 1);
    v43 = 0;
    v16 = objc_msgSend(v15, "readIntoBuffer:error:", v14, &v43);
    v17 = v43;
    v18 = re::internal::enableSignposts(0, 0);
    if ((_DWORD)v18)
    {
      objc_msgSend(**((id **)this + 1), "length");
      re::audio::pcmBufferSize(v14, v19);
      v18 = kdebug_trace();
    }
    if ((v16 & 1) != 0)
    {
      -[re::audio setFrameLength:](v14, "setFrameLength:", -[re::audio frameCapacity](v14, "frameCapacity"));
      v4 = v14;
    }
    else
    {
      v33 = (id)*re::audioLogObjects((re *)v18);
      if (os_log_type_enabled(v33, OS_LOG_TYPE_ERROR))
      {
        objc_msgSend(**((id **)this + 1), "url");
        v40 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v40, "lastPathComponent");
        v41 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v17, "description");
        v42 = (void *)objc_claimAutoreleasedReturnValue();
        *(_DWORD *)buf = 138412546;
        v45 = (uint64_t)v41;
        v46 = 2112;
        v47 = v42;
        _os_log_error_impl(&dword_224FE9000, v33, OS_LOG_TYPE_ERROR, "AudioFileAsset::createSharablePCMBuffer Failed to read audio file into buffer. (%@) %@", buf, 0x16u);

      }
      v4 = 0;
    }

    if (!v4)
      goto LABEL_35;
  }
  -[re::audio format](v4, "format");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  v6 = objc_msgSend(v5, "commonFormat");

  if (v6 != 1)
  {
    v20 = (id)*re::audioLogObjects(v7);
    if (os_log_type_enabled(v20, OS_LOG_TYPE_ERROR))
    {
      -[re::audio format](v4, "format");
      v35 = (void *)objc_claimAutoreleasedReturnValue();
      v36 = objc_msgSend(v35, "commonFormat");
      *(_DWORD *)buf = 134217984;
      v45 = v36;
      _os_log_error_impl(&dword_224FE9000, v20, OS_LOG_TYPE_ERROR, "AudioFileAsset::createSharablePCMBuffer Failed to share buffer with common format %lu", buf, 0xCu);

    }
    goto LABEL_35;
  }
  -[re::audio format](v4, "format");
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  if (objc_msgSend(v8, "channelCount") <= 1)
  {

  }
  else
  {
    -[re::audio format](v4, "format");
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    v10 = objc_msgSend(v9, "isInterleaved");

    if (v10)
    {
      v12 = *re::audioLogObjects(v11);
      if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR))
      {
        *(_WORD *)buf = 0;
        v13 = "AudioFileAsset::createSharablePCMBuffer Failed to share multichannel buffer.Multichannel buffers must be n"
              "on-interleaved in order to be shared.";
LABEL_38:
        _os_log_error_impl(&dword_224FE9000, v12, OS_LOG_TYPE_ERROR, v13, buf, 2u);
        goto LABEL_35;
      }
      goto LABEL_35;
    }
  }
  if (!re::AudioFileAsset::Impl::createIOSurface(*((re::AudioFileAsset::Impl **)this + 1), 4 * *((_QWORD *)this + 17) * objc_msgSend(*(id *)(*((_QWORD *)this + 1) + 8), "channelCount")))goto LABEL_35;
  v22 = objc_msgSend(*(id *)(*((_QWORD *)this + 1) + 168), "baseAddress");
  if (!v22)
  {
    v12 = *re::audioLogObjects(0);
    if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      v13 = "[AudioFileAsset] [createSharablePCMBuffer] surfaceBaseAddress is nil.";
      goto LABEL_38;
    }
LABEL_35:
    v32 = 0;
    goto LABEL_36;
  }
  v23 = v4;
  for (i = 0; ; ++i)
  {
    -[re::audio format](v23, "format");
    v25 = (void *)objc_claimAutoreleasedReturnValue();
    v26 = i < objc_msgSend(v25, "channelCount");

    if (!v26)
      break;
    memcpy((void *)(v22 + 4 * -[re::audio frameLength](v23, "frameLength") * i), *(const void **)(-[re::audio floatChannelData](v23, "floatChannelData") + 8 * i), 4 * -[re::audio frameLength](v23, "frameLength"));
  }

  XPCObject = IOSurfaceCreateXPCObject(*(IOSurfaceRef *)(*((_QWORD *)this + 1) + 168));
  v28 = *((_QWORD *)this + 1);
  v29 = *(void **)(v28 + 176);
  *(_QWORD *)(v28 + 176) = XPCObject;

  v30 = *((_QWORD *)this + 1);
  v31 = *(void **)(v30 + 16);
  *(_QWORD *)(v30 + 16) = 0;

  v32 = 1;
  v4 = v23;
LABEL_36:

  return v32;
}

void sub_2253667C8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;

  _Unwind_Resume(a1);
}

void re::AudioFileAsset::completeLoad(re::AudioFileAsset *this, AudioSceneService *a2)
{
  int CanStreamAudioFiles;
  uint64_t v5;
  void *v6;
  re::audio *v7;
  void *v8;
  id v9;
  char isKindOfClass;
  id v11;
  unint64_t v12;
  unint64_t v13;
  void *v14;
  BOOL v15;
  re *v16;
  void *v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  NSObject *v22;
  char *v23;
  NSObject *v24;
  void *v25;
  id v26;
  void *v27;
  void *v28;
  void *v29;
  unint64_t v30;
  unint64_t v31;
  uint64_t v32;
  void *v33;
  unsigned int v34;
  uint64_t v35;
  IOSurfaceRef v36;
  uint64_t v37;
  void *v38;
  re *AllocSize;
  re *v40;
  unint64_t v41;
  NSObject *v42;
  id v43;
  void *v44;
  void *v45;
  id v46;
  void *v47;
  IOSurfaceRef v48;
  uint64_t v49;
  void *v50;
  uint64_t v51;
  uint64_t v52;
  std::__shared_weak_count *v53;
  unint64_t *v54;
  unint64_t v55;
  unint64_t v56;
  unint64_t v57;
  uint64_t v58;
  uint64_t v59;
  std::__shared_weak_count *v60;
  unint64_t *v61;
  unint64_t v62;
  unint64_t v63;
  unint64_t v64;
  std::__shared_weak_count *v65;
  unint64_t *v66;
  unint64_t v67;
  std::__shared_weak_count *v68;
  unint64_t *v69;
  unint64_t v70;
  uint64_t v71;
  void *v72;
  std::__shared_weak_count *v73;
  unint64_t *p_shared_owners;
  uint64_t v75;
  unint64_t v76;
  unint64_t v77;
  unint64_t v78;
  std::__shared_weak_count *v79;
  unint64_t *v80;
  unint64_t v81;
  uint64_t *v82;
  unint64_t v83;
  uint64_t v84;
  uint64_t v85;
  std::__shared_weak_count *v86;
  unint64_t *v87;
  unint64_t v88;
  unint64_t v89;
  unint64_t v90;
  std::__shared_weak_count *v91;
  unint64_t *v92;
  unint64_t v93;
  std::__shared_weak_count *v94;
  unint64_t *v95;
  unint64_t v96;
  uint64_t v97;
  uint64_t v98;
  std::__shared_weak_count *v99;
  unint64_t *v100;
  unint64_t v101;
  unint64_t v102;
  std::__shared_weak_count *v103;
  unint64_t *v104;
  unint64_t v105;
  std::__shared_weak_count *v106;
  unint64_t *v107;
  unint64_t v108;
  char *v109;
  int v110;
  uint64_t v111;
  _QWORD v112[2];
  std::__shared_weak_count *v113;
  std::__shared_weak_count *v114;
  id v115;
  void *v116;
  id location;
  int v118;
  __int128 v119;
  __int128 v120;
  unsigned __int8 v121[8];
  uint64_t v122;
  char v123;
  uint64_t v124;
  char v125;
  int v126;
  char v127;
  uint64_t v128;
  std::__shared_weak_count *v129;
  char v130;
  _BYTE buf[38];
  _QWORD v132[4];
  char v133;
  int v134;
  char v135;
  uint64_t v136;

  v136 = *MEMORY[0x24BDAC8D0];
  if (*((_BYTE *)this + 153))
    return;
  *(_WORD *)((char *)this + 153) = 1;
  if (a2)
  {
    LOWORD(v119) = 0;
    BYTE2(v119) = 0;
    *(_QWORD *)((char *)&v119 + 4) = 0;
    v120 = xmmword_2260FDC00;
    v121[0] = 0;
    v125 = 0;
    v127 = 0;
    CanStreamAudioFiles = re::audio::CanStreamAudioFiles(this);
    if (CanStreamAudioFiles)
      LOBYTE(CanStreamAudioFiles) = *((_BYTE *)this + 100) != 0;
    LOBYTE(v119) = CanStreamAudioFiles;
    v5 = *((_QWORD *)this + 14);
    *(_QWORD *)((char *)&v119 + 4) = *((_QWORD *)this + 13);
    *(_QWORD *)&v120 = v5;
    re::Optional<re::DynamicString>::operator=(v121, (unsigned __int8 *)this + 56);
    BYTE1(v119) = *((_DWORD *)this + 24) == -1;
    *((_QWORD *)&v120 + 1) = *((_QWORD *)this + 15);
    location = 0;
    v118 = 0;
    re::AudioFileAsset::audioFormat(this);
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v6, "channelLayout");
    v116 = (void *)objc_claimAutoreleasedReturnValue();

    if (re::audio::CanStreamAudioFiles(v7)
      && *((_BYTE *)this + 100)
      && (v8 = (void *)**((_QWORD **)this + 1)) != 0)
    {
      v9 = v8;
      objc_opt_class();
      isKindOfClass = objc_opt_isKindOfClass();

      if ((isKindOfClass & 1) != 0)
      {
        v11 = **((id **)this + 1);
        v12 = objc_msgSend(v11, "getReaderFileLength");
        v13 = v12 / 0x64;
        if (v12 / 0x64 <= 0xC350)
          v13 = 50000;
        if ((*((_DWORD *)this + 33) + 1) <= 1)
          v13 += v12;
        *((_QWORD *)this + 20) = v13;

      }
      else
      {
        objc_msgSend(MEMORY[0x24BDD1580], "defaultManager");
        v25 = (void *)objc_claimAutoreleasedReturnValue();
        v26 = **((id **)this + 1);
        objc_msgSend(v26, "url");
        v27 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v27, "path");
        v28 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v25, "attributesOfItemAtPath:error:", v28, 0);
        v29 = (void *)objc_claimAutoreleasedReturnValue();

        v30 = objc_msgSend(v29, "fileSize");
        v31 = v30 / 0x64;
        if (v30 / 0x64 <= 0xC350)
          v31 = 50000;
        if ((*((_DWORD *)this + 33) + 1) <= 1)
          v31 += v30;
        *((_QWORD *)this + 20) = v31;

      }
    }
    else
    {
      re::AudioFileAsset::audioFormat(this);
      v14 = (void *)objc_claimAutoreleasedReturnValue();
      v15 = v14 == 0;

      if (v15)
      {
        v24 = *re::audioLogObjects(v16);
        if (os_log_type_enabled(v24, OS_LOG_TYPE_ERROR))
        {
          *(_WORD *)buf = 0;
          _os_log_error_impl(&dword_224FE9000, v24, OS_LOG_TYPE_ERROR, "[CoreRE] [AudioFileAsset] Cannot get bytesPerFrame from audio asset because audioFormat() is nil", buf, 2u);
        }
      }
      else
      {
        re::AudioFileAsset::audioFormat(this);
        v17 = (void *)objc_claimAutoreleasedReturnValue();
        v18 = *(unsigned int *)(objc_msgSend(v17, "streamDescription") + 24);

        v19 = *((_QWORD *)this + 17) * v18;
        v20 = v19 / 0x64;
        if (v19 / 0x64 <= 0xC350)
          v20 = 50000;
        v21 = v20 + v19;
        if ((*((_DWORD *)this + 33) + 1) > 1)
          v21 = v20;
        *((_QWORD *)this + 20) = v21;
      }
    }
    v32 = *((_QWORD *)this + 1);
    if (!*(_QWORD *)v32)
    {
      if (*(_QWORD *)(v32 + 176))
      {
        v34 = objc_msgSend(*(id *)(v32 + 8), "channelCount");
        v35 = *((_QWORD *)this + 17);
        v36 = IOSurfaceLookupFromXPCObject(*(xpc_object_t *)(*((_QWORD *)this + 1) + 176));
        v37 = *((_QWORD *)this + 1);
        v38 = *(void **)(v37 + 168);
        *(_QWORD *)(v37 + 168) = v36;

        AllocSize = (re *)IOSurfaceGetAllocSize(*(IOSurfaceRef *)(*((_QWORD *)this + 1) + 168));
        v40 = AllocSize;
        v41 = 4 * v34 * v35;
        if ((unint64_t)AllocSize >= v41)
        {
          objc_msgSend(MEMORY[0x24BDBCE50], "dataWithBytesNoCopy:length:freeWhenDone:", IOSurfaceGetBaseAddress(*(IOSurfaceRef *)(*((_QWORD *)this + 1) + 168)), v41, 0);
          v115 = (id)objc_claimAutoreleasedReturnValue();
          objc_setAssociatedObject(v115, "FileAssetBufferKey", *(id *)(*((_QWORD *)this + 1) + 168), (void *)0x301);
          std::__variant_detail::__assignment<std::__variant_detail::__traits<NSData * {__strong},AVAudioPCMBuffer * {__strong},NSURL * {__strong}>>::__assign_alt[abi:nn180100]<0ul,NSData * {__strong},NSData * {__strong}&>((uint64_t)&location, &location, &v115);
          v71 = *(_QWORD *)(*((_QWORD *)this + 1) + 24);
          re::AudioFileAsset::audioFormat(this);
          v72 = (void *)objc_claimAutoreleasedReturnValue();
          v73 = (std::__shared_weak_count *)operator new(0xA0uLL);
          v73->__shared_owners_ = 0;
          p_shared_owners = (unint64_t *)&v73->__shared_owners_;
          v73->__shared_weak_owners_ = 0;
          v73->__vftable = (std::__shared_weak_count_vtbl *)&off_24ED38EE0;
          std::__variant_detail::__copy_constructor<std::__variant_detail::__traits<NSData * {__strong},AVAudioPCMBuffer * {__strong},NSURL * {__strong}>,(std::__variant_detail::_Trait)1>::__copy_constructor((uint64_t)&v128, (uint64_t)&location);
          *(_OWORD *)buf = v119;
          *(_OWORD *)&buf[16] = v120;
          buf[32] = v121[0];
          if (v121[0])
            re::DynamicString::DynamicString((re::DynamicString *)v132, (const re::DynamicString *)&v122);
          v133 = v125;
          if (v125)
            v134 = v126;
          v135 = v127;
          re::AudioAssetPayload::AudioAssetPayload((uint64_t)&v73[1], (uint64_t)&v128, (uint64_t)buf, *((_DWORD *)this + 33), v71, 0, v72);
          if (buf[32] && v132[0])
          {
            if ((v132[1] & 1) != 0)
              (*(void (**)(void))(*(_QWORD *)v132[0] + 40))();
            memset(v132, 0, sizeof(v132));
          }
          if ((_DWORD)v129 != -1)
            ((void (*)(char *, uint64_t *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8nn180100IZNS0_6__dtorINS0_8__traitsIJU8__strongP6NSDataU8__strongP16AVAudioPCMBufferU8__strongP5NSURLEEELNS0_6_TraitE1EE9__destroyB8nn180100EvEUlRT_E_JRSH_EEEDcOSI_DpOT0____fmatrix[v129])(&v130, &v128);
          v113 = v73 + 1;
          v114 = v73;

          v75 = *(_QWORD *)(*((_QWORD *)this + 1) + 24);
          do
            v76 = __ldxr(p_shared_owners);
          while (__stxr(v76 + 1, p_shared_owners));
          *(_QWORD *)buf = v75;
          *(_QWORD *)&buf[8] = v73 + 1;
          *(_QWORD *)&buf[16] = v73;
          do
            v77 = __ldxr(p_shared_owners);
          while (__stxr(v77 + 1, p_shared_owners));
          do
            v78 = __ldaxr(p_shared_owners);
          while (__stlxr(v78 - 1, p_shared_owners));
          if (!v78)
          {
            ((void (*)(std::__shared_weak_count *))v73->__on_zero_shared)(v73);
            std::__shared_weak_count::__release_weak(v73);
          }
          (*((void (**)(AudioSceneService *, _BYTE *))a2->var0 + 22))(a2, buf);
          v79 = *(std::__shared_weak_count **)&buf[16];
          if (*(_QWORD *)&buf[16])
          {
            v80 = (unint64_t *)(*(_QWORD *)&buf[16] + 8);
            do
              v81 = __ldaxr(v80);
            while (__stlxr(v81 - 1, v80));
            if (!v81)
            {
              ((void (*)(std::__shared_weak_count *))v79->__on_zero_shared)(v79);
              std::__shared_weak_count::__release_weak(v79);
            }
          }
          if (v114)
          {
            v82 = &v114->__shared_owners_;
            do
              v83 = __ldaxr((unint64_t *)v82);
            while (__stlxr(v83 - 1, (unint64_t *)v82));
            if (!v83)
            {
              ((void (*)(std::__shared_weak_count *))v114->__on_zero_shared)(v114);
              std::__shared_weak_count::__release_weak(v114);
            }
          }

        }
        else
        {
          v42 = (id)*re::audioLogObjects(AllocSize);
          if (os_log_type_enabled(v42, OS_LOG_TYPE_ERROR))
          {
            if ((*((_BYTE *)this + 24) & 1) != 0)
              v109 = (char *)*((_QWORD *)this + 4);
            else
              v109 = (char *)this + 25;
            v110 = objc_msgSend(*(id *)(*((_QWORD *)this + 1) + 8), "channelCount");
            v111 = *((_QWORD *)this + 17);
            *(_DWORD *)buf = 136315906;
            *(_QWORD *)&buf[4] = v109;
            *(_WORD *)&buf[12] = 2048;
            *(_QWORD *)&buf[14] = v40;
            *(_WORD *)&buf[22] = 1024;
            *(_DWORD *)&buf[24] = v110;
            *(_WORD *)&buf[28] = 2048;
            *(_QWORD *)&buf[30] = v111;
            _os_log_error_impl(&dword_224FE9000, v42, OS_LOG_TYPE_ERROR, "AudioFileAsset::completeLoad buffer for asset '%s' is %lu bytes which is smaller than expected for %u channels, %llu frames of float32 pcm", buf, 0x26u);
          }

        }
      }
      else
      {
        v47 = *(void **)(v32 + 184);
        if (v47)
        {
          v48 = IOSurfaceLookupFromXPCObject(v47);
          v49 = *((_QWORD *)this + 1);
          v50 = *(void **)(v49 + 168);
          *(_QWORD *)(v49 + 168) = v48;

          objc_msgSend(MEMORY[0x24BDBCE50], "dataWithBytesNoCopy:length:freeWhenDone:", IOSurfaceGetBaseAddress(*(IOSurfaceRef *)(*((_QWORD *)this + 1) + 168)), *(_QWORD *)(*((_QWORD *)this + 1) + 40), 0);
          v113 = (std::__shared_weak_count *)objc_claimAutoreleasedReturnValue();
          objc_setAssociatedObject(v113, "FileAssetBufferKey", *(id *)(*((_QWORD *)this + 1) + 168), (void *)0x301);
          std::__variant_detail::__assignment<std::__variant_detail::__traits<NSData * {__strong},AVAudioPCMBuffer * {__strong},NSURL * {__strong}>>::__assign_alt[abi:nn180100]<0ul,NSData * {__strong},NSData * {__strong}&>((uint64_t)&location, &location, (id *)&v113);
          *(_QWORD *)buf = *(_QWORD *)(*((_QWORD *)this + 1) + 24);
          std::allocate_shared[abi:nn180100]<re::AudioAssetPayload,std::allocator<re::AudioAssetPayload>,std::variant<NSData * {__strong},AVAudioPCMBuffer * {__strong},NSURL * {__strong}> &,re::AudioFileAssetConfiguration &,unsigned int &,unsigned long long,AVAudioChannelLayout * {__strong}&,void>(&v128, (uint64_t)&location, (uint64_t)&v119, (int *)this + 33, (uint64_t *)buf, &v116);
          v51 = *(_QWORD *)(*((_QWORD *)this + 1) + 24);
          v52 = v128;
          v53 = v129;
          if (v129)
          {
            v54 = (unint64_t *)&v129->__shared_owners_;
            do
              v55 = __ldxr(v54);
            while (__stxr(v55 + 1, v54));
            *(_QWORD *)buf = v51;
            *(_QWORD *)&buf[8] = v52;
            *(_QWORD *)&buf[16] = v53;
            do
              v56 = __ldxr(v54);
            while (__stxr(v56 + 1, v54));
            do
              v57 = __ldaxr(v54);
            while (__stlxr(v57 - 1, v54));
            if (!v57)
            {
              ((void (*)(std::__shared_weak_count *))v53->__on_zero_shared)(v53);
              std::__shared_weak_count::__release_weak(v53);
            }
          }
          else
          {
            *(_QWORD *)buf = *(_QWORD *)(*((_QWORD *)this + 1) + 24);
            *(_QWORD *)&buf[8] = v128;
            *(_QWORD *)&buf[16] = 0;
          }
          (*((void (**)(AudioSceneService *, _BYTE *))a2->var0 + 22))(a2, buf);
          v103 = *(std::__shared_weak_count **)&buf[16];
          if (*(_QWORD *)&buf[16])
          {
            v104 = (unint64_t *)(*(_QWORD *)&buf[16] + 8);
            do
              v105 = __ldaxr(v104);
            while (__stlxr(v105 - 1, v104));
            if (!v105)
            {
              ((void (*)(std::__shared_weak_count *))v103->__on_zero_shared)(v103);
              std::__shared_weak_count::__release_weak(v103);
            }
          }
          v106 = v129;
          if (v129)
          {
            v107 = (unint64_t *)&v129->__shared_owners_;
            do
              v108 = __ldaxr(v107);
            while (__stlxr(v108 - 1, v107));
            if (!v108)
            {
              ((void (*)(std::__shared_weak_count *))v106->__on_zero_shared)(v106);
              std::__shared_weak_count::__release_weak(v106);
            }
          }

        }
        else
        {
          std::__variant_detail::__assignment<std::__variant_detail::__traits<NSData * {__strong},AVAudioPCMBuffer * {__strong},NSURL * {__strong}>>::__assign_alt[abi:nn180100]<1ul,AVAudioPCMBuffer * {__strong},AVAudioPCMBuffer * {__strong}&>((uint64_t)&location, &location, (id *)(v32 + 16));
          *(_QWORD *)buf = *(_QWORD *)(*((_QWORD *)this + 1) + 24);
          std::allocate_shared[abi:nn180100]<re::AudioAssetPayload,std::allocator<re::AudioAssetPayload>,std::variant<NSData * {__strong},AVAudioPCMBuffer * {__strong},NSURL * {__strong}> &,re::AudioFileAssetConfiguration &,unsigned int &,unsigned long long,void>(&v128, (uint64_t)&location, (uint64_t)&v119, (int *)this + 33, (uint64_t *)buf);
          v97 = *(_QWORD *)(*((_QWORD *)this + 1) + 24);
          v98 = v128;
          v99 = v129;
          v112[0] = v128;
          v112[1] = v129;
          if (v129)
          {
            v100 = (unint64_t *)&v129->__shared_owners_;
            do
              v101 = __ldxr(v100);
            while (__stxr(v101 + 1, v100));
            *(_QWORD *)&buf[8] = v98;
            *(_QWORD *)&buf[16] = v99;
            do
              v102 = __ldxr(v100);
            while (__stxr(v102 + 1, v100));
          }
          else
          {
            *(_QWORD *)&buf[8] = v128;
            *(_QWORD *)&buf[16] = 0;
          }
          *(_QWORD *)buf = v97;
          std::shared_ptr<re::AssetManager>::~shared_ptr[abi:nn180100]((uint64_t)v112);
          (*((void (**)(AudioSceneService *, _BYTE *))a2->var0 + 22))(a2, buf);
          std::shared_ptr<re::AssetManager>::~shared_ptr[abi:nn180100]((uint64_t)&buf[8]);
          std::shared_ptr<re::AssetManager>::~shared_ptr[abi:nn180100]((uint64_t)&v128);
        }
      }
      goto LABEL_144;
    }
    v33 = *(void **)(v32 + 32);
    if (v33)
    {
      if (v118 != -1)
      {
        if (v118 == 2)
        {
          objc_storeStrong(&location, v33);
LABEL_54:
          *(_QWORD *)buf = *(_QWORD *)(*((_QWORD *)this + 1) + 24);
          std::allocate_shared[abi:nn180100]<re::AudioAssetPayload,std::allocator<re::AudioAssetPayload>,std::variant<NSData * {__strong},AVAudioPCMBuffer * {__strong},NSURL * {__strong}> &,re::AudioFileAssetConfiguration &,unsigned int &,unsigned long long,AVAudioChannelLayout * {__strong}&,void>(&v128, (uint64_t)&location, (uint64_t)&v119, (int *)this + 33, (uint64_t *)buf, &v116);
          v58 = *(_QWORD *)(*((_QWORD *)this + 1) + 24);
          v59 = v128;
          v60 = v129;
          if (v129)
          {
            v61 = (unint64_t *)&v129->__shared_owners_;
            do
              v62 = __ldxr(v61);
            while (__stxr(v62 + 1, v61));
            *(_QWORD *)buf = v58;
            *(_QWORD *)&buf[8] = v59;
            *(_QWORD *)&buf[16] = v60;
            do
              v63 = __ldxr(v61);
            while (__stxr(v63 + 1, v61));
            do
              v64 = __ldaxr(v61);
            while (__stlxr(v64 - 1, v61));
            if (!v64)
            {
              ((void (*)(std::__shared_weak_count *))v60->__on_zero_shared)(v60);
              std::__shared_weak_count::__release_weak(v60);
            }
          }
          else
          {
            *(_QWORD *)buf = *(_QWORD *)(*((_QWORD *)this + 1) + 24);
            *(_QWORD *)&buf[8] = v128;
            *(_QWORD *)&buf[16] = 0;
          }
          (*((void (**)(AudioSceneService *, _BYTE *))a2->var0 + 22))(a2, buf);
          v65 = *(std::__shared_weak_count **)&buf[16];
          if (*(_QWORD *)&buf[16])
          {
            v66 = (unint64_t *)(*(_QWORD *)&buf[16] + 8);
            do
              v67 = __ldaxr(v66);
            while (__stlxr(v67 - 1, v66));
            if (!v67)
            {
              ((void (*)(std::__shared_weak_count *))v65->__on_zero_shared)(v65);
              std::__shared_weak_count::__release_weak(v65);
            }
          }
          v68 = v129;
          if (v129)
          {
            v69 = (unint64_t *)&v129->__shared_owners_;
            do
              v70 = __ldaxr(v69);
            while (__stlxr(v70 - 1, v69));
            if (!v70)
            {
              ((void (*)(std::__shared_weak_count *))v68->__on_zero_shared)(v68);
              std::__shared_weak_count::__release_weak(v68);
            }
          }
LABEL_144:

          if (v118 != -1)
            ((void (*)(_BYTE *, id *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8nn180100IZNS0_6__dtorINS0_8__traitsIJU8__strongP6NSDataU8__strongP16AVAudioPCMBufferU8__strongP5NSURLEEELNS0_6_TraitE1EE9__destroyB8nn180100EvEUlRT_E_JRSH_EEEDcOSI_DpOT0____fmatrix[v118])(buf, &location);
          if (v121[0] && v122 && (v123 & 1) != 0)
            (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v122 + 40))(v122, v124);
          return;
        }
        ((void (*)(_BYTE *, id *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8nn180100IZNS0_6__dtorINS0_8__traitsIJU8__strongP6NSDataU8__strongP16AVAudioPCMBufferU8__strongP5NSURLEEELNS0_6_TraitE1EE9__destroyB8nn180100EvEUlRT_E_JRSH_EEEDcOSI_DpOT0____fmatrix[v118])(buf, &location);
        v33 = *(void **)(v32 + 32);
      }
      v118 = -1;
      location = v33;
      v118 = 2;
      goto LABEL_54;
    }
    v43 = *(id *)v32;
    objc_msgSend(v43, "getBackingData");
    v44 = (void *)objc_claimAutoreleasedReturnValue();
    v45 = v44;
    if (v118 != -1)
    {
      if (!v118)
      {
        v46 = location;
        location = v44;

LABEL_104:
        *(_QWORD *)buf = *(_QWORD *)(*((_QWORD *)this + 1) + 24);
        std::allocate_shared[abi:nn180100]<re::AudioAssetPayload,std::allocator<re::AudioAssetPayload>,std::variant<NSData * {__strong},AVAudioPCMBuffer * {__strong},NSURL * {__strong}> &,re::AudioFileAssetConfiguration &,unsigned int &,unsigned long long,AVAudioChannelLayout * {__strong}&,void>(&v128, (uint64_t)&location, (uint64_t)&v119, (int *)this + 33, (uint64_t *)buf, &v116);
        v84 = *(_QWORD *)(*((_QWORD *)this + 1) + 24);
        v85 = v128;
        v86 = v129;
        if (v129)
        {
          v87 = (unint64_t *)&v129->__shared_owners_;
          do
            v88 = __ldxr(v87);
          while (__stxr(v88 + 1, v87));
          *(_QWORD *)buf = v84;
          *(_QWORD *)&buf[8] = v85;
          *(_QWORD *)&buf[16] = v86;
          do
            v89 = __ldxr(v87);
          while (__stxr(v89 + 1, v87));
          do
            v90 = __ldaxr(v87);
          while (__stlxr(v90 - 1, v87));
          if (!v90)
          {
            ((void (*)(std::__shared_weak_count *))v86->__on_zero_shared)(v86);
            std::__shared_weak_count::__release_weak(v86);
          }
        }
        else
        {
          *(_QWORD *)buf = *(_QWORD *)(*((_QWORD *)this + 1) + 24);
          *(_QWORD *)&buf[8] = v128;
          *(_QWORD *)&buf[16] = 0;
        }
        (*((void (**)(AudioSceneService *, _BYTE *))a2->var0 + 22))(a2, buf);
        v91 = *(std::__shared_weak_count **)&buf[16];
        if (*(_QWORD *)&buf[16])
        {
          v92 = (unint64_t *)(*(_QWORD *)&buf[16] + 8);
          do
            v93 = __ldaxr(v92);
          while (__stlxr(v93 - 1, v92));
          if (!v93)
          {
            ((void (*)(std::__shared_weak_count *))v91->__on_zero_shared)(v91);
            std::__shared_weak_count::__release_weak(v91);
          }
        }
        v94 = v129;
        if (v129)
        {
          v95 = (unint64_t *)&v129->__shared_owners_;
          do
            v96 = __ldaxr(v95);
          while (__stlxr(v96 - 1, v95));
          if (!v96)
          {
            ((void (*)(std::__shared_weak_count *))v94->__on_zero_shared)(v94);
            std::__shared_weak_count::__release_weak(v94);
          }
        }

        goto LABEL_144;
      }
      ((void (*)(_BYTE *, id *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8nn180100IZNS0_6__dtorINS0_8__traitsIJU8__strongP6NSDataU8__strongP16AVAudioPCMBufferU8__strongP5NSURLEEELNS0_6_TraitE1EE9__destroyB8nn180100EvEUlRT_E_JRSH_EEEDcOSI_DpOT0____fmatrix[v118])(buf, &location);
    }
    location = v45;
    v118 = 0;
    goto LABEL_104;
  }
  v22 = *re::audioLogObjects(this);
  if (os_log_type_enabled(v22, OS_LOG_TYPE_ERROR))
  {
    if ((*((_BYTE *)this + 24) & 1) != 0)
      v23 = (char *)*((_QWORD *)this + 4);
    else
      v23 = (char *)this + 25;
    *(_DWORD *)buf = 136315138;
    *(_QWORD *)&buf[4] = v23;
    _os_log_error_impl(&dword_224FE9000, v22, OS_LOG_TYPE_ERROR, "AudioFileAsset::completeLoad with no AudioSceneService '%s'", buf, 0xCu);
  }
}

void sub_225367578(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id a14, char a15, int a16, int a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,char a22,uint64_t a23,char a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29)
{
  uint64_t v29;

  std::shared_ptr<re::AssetManager>::~shared_ptr[abi:nn180100](v29);
  std::shared_ptr<re::AssetManager>::~shared_ptr[abi:nn180100]((uint64_t)&a29);

  if (a17 != -1)
    ((void (*)(uint64_t *, char *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8nn180100IZNS0_6__dtorINS0_8__traitsIJU8__strongP6NSDataU8__strongP16AVAudioPCMBufferU8__strongP5NSURLEEELNS0_6_TraitE1EE9__destroyB8nn180100EvEUlRT_E_JRSH_EEEDcOSI_DpOT0____fmatrix[a17])(&a11, &a15);
  if (a22 && a23 && (a24 & 1) != 0)
    (*(void (**)(void))(*(_QWORD *)a23 + 40))();
  _Unwind_Resume(a1);
}

id re::AudioFileAsset::audioFormat(re::AudioFileAsset *this)
{
  AVAudioFormat *v2;
  id v3;
  void *v4;
  uint64_t v5;
  void *v6;
  void *v7;

  v3 = *(id *)(*((_QWORD *)this + 1) + 8);
  if (v3)
  {
    v4 = (void *)MEMORY[0x24BDB17E8];
    v5 = *((unsigned int *)this + 32);
    if ((_DWORD)v5 == -65536)
      v5 = re::audio::layoutTagFromFormat(*(re::audio **)(*((_QWORD *)this + 1) + 8), v2);
    objc_msgSend(v4, "layoutWithLayoutTag:", v5);
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    v7 = (void *)objc_msgSend(objc_alloc(MEMORY[0x24BDB1818]), "initWithStreamDescription:channelLayout:", objc_msgSend(v3, "streamDescription"), v6);

  }
  else
  {
    v7 = 0;
  }

  return v7;
}

void sub_22536784C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

id re::AudioFileAsset::sharableFileBuffer(re::AudioFileAsset *this)
{
  return *(id *)(*((_QWORD *)this + 1) + 184);
}

id re::AudioFileAsset::pcmBuffer(re::AudioFileAsset *this)
{
  uint64_t v1;
  void *v2;
  id v5;
  uint64_t v6;
  char *BaseAddress;
  re *v8;
  NSObject *v9;
  void *v10;
  int v11;
  unint64_t i;
  uint8_t v13[16];

  v1 = *((_QWORD *)this + 1);
  v2 = *(void **)(v1 + 16);
  if (v2)
    return v2;
  if (!*(_QWORD *)(v1 + 176))
    return 0;
  v5 = *(id *)(v1 + 8);
  v6 = *((_QWORD *)this + 17);
  BaseAddress = (char *)IOSurfaceGetBaseAddress(*(IOSurfaceRef *)(*((_QWORD *)this + 1) + 168));
  v8 = (re *)objc_msgSend(v5, "commonFormat");
  if (v8 == (re *)1
    && (objc_msgSend(v5, "channelCount") < 2 || (v8 = (re *)objc_msgSend(v5, "isInterleaved"), !(_DWORD)v8)))
  {
    v10 = (void *)objc_msgSend(objc_alloc(MEMORY[0x24BDB1838]), "initWithPCMFormat:frameCapacity:", v5, v6);
    if (v10)
    {
      v11 = 0;
      for (i = 0; i < objc_msgSend(v5, "channelCount"); ++i)
      {
        memcpy(*(void **)(objc_msgSend(v10, "floatChannelData") + 8 * i), &BaseAddress[4 * v11], 4 * v6);
        v11 += v6;
      }
      objc_msgSend(v10, "setFrameLength:", objc_msgSend(v10, "frameCapacity"));
    }
  }
  else
  {
    v9 = *re::audioLogObjects(v8);
    if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)v13 = 0;
      _os_log_error_impl(&dword_224FE9000, v9, OS_LOG_TYPE_ERROR, "can only create non-interleaved float AVAudioPCMBuffer from bytes", v13, 2u);
    }
    v10 = 0;
  }

  return v10;
}

void sub_225367A0C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

id re::AudioFileAsset::localFileURL(re::AudioFileAsset *this)
{
  return *(id *)(*((_QWORD *)this + 1) + 32);
}

uint64_t re::AudioFileAsset::setMappedData(uint64_t a1, uint64_t a2)
{
  void **v4;
  void *v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;
  void *v11;

  v4 = *(void ***)(a1 + 8);
  v5 = *v4;
  *v4 = 0;

  v6 = *(_QWORD *)(a1 + 8);
  v7 = *(void **)(v6 + 8);
  *(_QWORD *)(v6 + 8) = 0;

  v8 = *(_QWORD *)(a1 + 8);
  v9 = *(void **)(v8 + 16);
  *(_QWORD *)(v8 + 16) = 0;

  v10 = *(_QWORD *)(a1 + 8);
  v11 = *(void **)(v10 + 32);
  *(_QWORD *)(v10 + 32) = 0;

  return re::DataSeekableInputStream::operator=(*(_QWORD *)(a1 + 8) + 48, a2);
}

BOOL re::AudioFileAsset::makeMutableAndSetMappedData(re *a1, re::internal::AssetEntry **a2, void *a3)
{
  re::internal::AssetEntry *v3;
  unsigned int v4;
  re::internal::AssetEntry *v6;
  uint64_t *v9;
  uint64_t v10;
  re::internal::AssetEntry *v11;
  re::internal::AssetEntry *v12;
  unsigned int v13;
  uint64_t v14;
  uint64_t v15;
  id v16;
  re::internal::AssetEntry *v17;
  _BOOL8 result;
  NSObject *v19;
  const char *v20;
  id v21;
  uint8_t buf[32];
  id v23[10];

  v3 = a2[1];
  if (!v3 || (v4 = atomic_load((unsigned int *)v3 + 176), v4 != 2))
  {
    v19 = *re::audioLogObjects(a1);
    result = os_log_type_enabled(v19, OS_LOG_TYPE_ERROR);
    if (!result)
      return result;
    *(_WORD *)buf = 0;
    v20 = "AudioFileAsset::makeMutableAndSetData failing as it requires the handle to be loaded.";
    goto LABEL_18;
  }
  v6 = a2[1];
  if (!v6)
  {
    v10 = (uint64_t)re::AudioFileAsset::assetType(a1);
    goto LABEL_16;
  }
  v9 = (uint64_t *)*((_QWORD *)v6 + 33);
  v10 = (uint64_t)re::AudioFileAsset::assetType(a1);
  if (v9 != &re::AudioFileAsset::assetType(void)::type)
  {
LABEL_16:
    v19 = *re::audioLogObjects((re *)v10);
    result = os_log_type_enabled(v19, OS_LOG_TYPE_ERROR);
    if (!result)
      return result;
    *(_WORD *)buf = 0;
    v20 = "AudioFileAsset::makeMutableAndSetData failing as it requires the handle to wrap an AudioFileAsset.";
    goto LABEL_18;
  }
  v11 = a2[1];
  if (!v11
    || (v10 = *((_QWORD *)v11 + 3)) == 0
    || (v10 = re::AssetManager::convertToMutable((os_unfair_lock_s *)v10, (const re::AssetHandle *)a2, 1), (v10 & 1) == 0))
  {
    v19 = *re::audioLogObjects((re *)v10);
    result = os_log_type_enabled(v19, OS_LOG_TYPE_ERROR);
    if (!result)
      return result;
    *(_WORD *)buf = 0;
    v20 = "AudioFileAsset::makeMutableAndSetData failing as it could not convert the handle to mutable.";
LABEL_18:
    _os_log_error_impl(&dword_224FE9000, v19, OS_LOG_TYPE_ERROR, v20, buf, 2u);
    return 0;
  }
  v12 = a2[1];
  if (v12)
  {
    v13 = atomic_load((unsigned int *)v12 + 176);
    if (v13 == 2)
    {
      re::AssetHandle::mutateAssetCommon((re::AssetHandle *)a2);
      ++*((_DWORD *)a2[1] + 65);
      v14 = re::AssetHandle::loadedAsset<re::AudioFileAsset>((re::AudioFileAsset *)a2);
      if (v14)
      {
        v15 = v14;
        v16 = a3;
        v21 = v16;
        re::DataSeekableInputStream::DataSeekableInputStream((uint64_t)buf, &v21, 0, 0);

        re::AudioFileAsset::setMappedData(v15, (uint64_t)buf);
        re::AudioFileAssetLoader::createRuntimeData(a1, v15, 0, 0);
        *(_QWORD *)buf = &off_24ED7BE48;

        *(_QWORD *)buf = &off_24ED7BDD0;
        re::internal::MemoryInputStream<re::FixedArray<char>>::~MemoryInputStream((uint64_t)v23);

        v17 = a2[1];
        *((_BYTE *)v17 + 256) = 1;
        re::internal::AssetEntry::updateMutatedRuntimeAssetSize((os_unfair_lock_s *)v17);
        re::internal::AssetEntry::updateMutatedAssetNonSharedDataSize(a2[1]);
      }
    }
  }
  re::AssetHandle::payloadDidChangeIfPossible((re::AssetHandle *)a2);
  return 1;
}

void sub_225367CC8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *a23)
{
  void *v23;
  uint64_t v24;

  re::internal::MemoryInputStream<re::FixedArray<char>>::~MemoryInputStream(v24 + 32);
  _Unwind_Resume(a1);
}

uint64_t re::AudioAssetPayload::AudioAssetPayload(uint64_t a1, uint64_t a2, uint64_t a3, int a4, uint64_t a5, void *a6, void *a7)
{
  id v13;
  id v14;
  __int128 v15;
  int v16;
  int v17;

  v13 = a6;
  v14 = a7;
  std::__variant_detail::__copy_constructor<std::__variant_detail::__traits<NSData * {__strong},AVAudioPCMBuffer * {__strong},NSURL * {__strong}>,(std::__variant_detail::_Trait)1>::__copy_constructor(a1, a2);
  v15 = *(_OWORD *)(a3 + 16);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)a3;
  *(_OWORD *)(a1 + 32) = v15;
  v16 = *(unsigned __int8 *)(a3 + 32);
  *(_BYTE *)(a1 + 48) = v16;
  if (v16)
    re::DynamicString::DynamicString((re::DynamicString *)(a1 + 56), (const re::DynamicString *)(a3 + 40));
  v17 = *(unsigned __int8 *)(a3 + 72);
  *(_BYTE *)(a1 + 88) = v17;
  if (v17)
    *(_DWORD *)(a1 + 92) = *(_DWORD *)(a3 + 76);
  *(_BYTE *)(a1 + 96) = *(_BYTE *)(a3 + 80);
  *(_DWORD *)(a1 + 104) = a4;
  *(_QWORD *)(a1 + 112) = a5;
  *(_QWORD *)(a1 + 120) = v13;
  *(_QWORD *)(a1 + 128) = v14;
  return a1;
}

void sub_225367DB0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

re::DynamicString *re::AudioFileAssetCompiler::getCurrentCompiledAssetInfo@<X0>(re::AudioFileAssetCompiler *this@<X0>, uint64_t a2@<X8>)
{
  re::AudioFileAsset *v3;
  _QWORD v5[2];

  *(_QWORD *)(a2 + 32) = 0;
  *(_OWORD *)a2 = 0u;
  *(_OWORD *)(a2 + 16) = 0u;
  v3 = (re::AudioFileAsset *)re::DynamicString::setCapacity((_QWORD *)(a2 + 8), 0);
  *(_QWORD *)a2 = 0x100000001;
  re::AudioFileAsset::assetType(v3);
  v5[0] = re::AudioFileAsset::assetType(void)::type;
  v5[1] = strlen((const char *)re::AudioFileAsset::assetType(void)::type);
  return re::DynamicString::operator=((re::DynamicString *)(a2 + 8), (uint64_t)v5);
}

__guard re::AudioFileAssetCompiler::assetIntrospectionType(re::AudioFileAssetCompiler *this)
{
  unsigned __int8 v1;
  __guard *v2;
  int v4;

  if ((v1 & 1) == 0)
  {
    if (v4)
    {
      re::introspect<re::AudioFileAsset>(void)::info = re::internal::getOrCreateInfo((re::internal *)"AudioFileAsset", (uint64_t (*)(re::internal *))re::allocInfo_AudioFileAsset, (re::IntrospectionBase *(*)(void))re::initInfo_AudioFileAsset, (void (*)(re::IntrospectionBase *))&re::internal::introspectionInfoStorage<re::AudioFileAsset>, 0);
    }
  }
  return v2[505];
}

__n128 re::AudioFileAssetCompiler::compile@<Q0>(re::AudioFileAssetCompiler *this@<X0>, const char *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t *v7;
  re::AudioFileAsset *v8;
  re::AudioFileAsset *v9;
  __n128 result;
  _anonymous_namespace_ *v11;
  uint64_t v12;
  uint64_t v13;
  __n128 v14;
  uint64_t v15;
  uint64_t v16;

  v7 = re::globalAllocators(this);
  v8 = (re::AudioFileAsset *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v7[2] + 32))(v7[2], 168, 8);
  v9 = re::AudioFileAsset::AudioFileAsset(v8);
  if (re::AudioFileAsset::prepareToLoadFrom(v9, a2))
  {
    *(_BYTE *)a3 = 1;
    *(_QWORD *)(a3 + 8) = v8;
  }
  else
  {
    v11 = re::internal::destroyPersistent<re::AudioFileAsset>(v8);
    result = v14;
    v12 = v15;
    v13 = v16;
    *(_BYTE *)a3 = 0;
    *(_QWORD *)(a3 + 8) = 100;
    *(_QWORD *)(a3 + 16) = &re::AssetErrorCategory(void)::instance;
    *(__n128 *)(a3 + 24) = result;
    *(_QWORD *)(a3 + 40) = v12;
    *(_QWORD *)(a3 + 48) = v13;
  }
  return result;
}

re *re::internal::destroyPersistent<re::AudioFileAsset>(re *result)
{
  re::AudioFileAsset *v1;
  uint64_t v2;

  if (result)
  {
    v1 = result;
    v2 = re::globalAllocators(result)[2];
    re::AudioFileAsset::~AudioFileAsset(v1);
    return (re *)(*(uint64_t (**)(uint64_t, re::AudioFileAsset *))(*(_QWORD *)v2 + 40))(v2, v1);
  }
  return result;
}

re *re::AudioFileAssetCompiler::deleteAsset(re::AudioFileAssetCompiler *this, re *a2)
{
  return re::internal::destroyPersistent<re::AudioFileAsset>(a2);
}

void re::AudioFileAssetCompiler::~AudioFileAssetCompiler(re::AudioFileAssetCompiler *this)
{
  JUMPOUT(0x2276933B8);
}

re::AudioFileAsset::Impl *re::AudioFileAsset::Impl::Impl(re::AudioFileAsset::Impl *this)
{
  id v3;

  *((_QWORD *)this + 4) = 0;
  *((_QWORD *)this + 1) = 0;
  *((_QWORD *)this + 2) = 0;
  *(_QWORD *)this = 0;
  v3 = 0;
  re::DataSeekableInputStream::DataSeekableInputStream((uint64_t)this + 48, &v3, 0, 0);

  *((_OWORD *)this + 10) = 0u;
  *((_OWORD *)this + 11) = 0u;
  return this;
}

void re::DataSeekableInputStream::~DataSeekableInputStream(id *this)
{
  *this = &off_24ED7BE48;

  *this = &off_24ED7BDD0;
  re::internal::MemoryInputStream<re::FixedArray<char>>::~MemoryInputStream((uint64_t)(this + 4));
}

{
  *this = &off_24ED7BE48;

  *this = &off_24ED7BDD0;
  re::internal::MemoryInputStream<re::FixedArray<char>>::~MemoryInputStream((uint64_t)(this + 4));
  JUMPOUT(0x2276933B8);
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8nn180100IOZNS0_6__dtorINS0_8__traitsIJU8__strongP6NSDataU8__strongP16AVAudioPCMBufferU8__strongP5NSURLEEELNS0_6_TraitE1EE9__destroyB8nn180100EvEUlRT_E_JRNS0_6__baseILSI_1EJSA_SD_SG_EEEEEEDcSK_DpT0_(uint64_t a1, id *a2)
{

}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1EEE10__dispatchB8nn180100IOZNS0_6__dtorINS0_8__traitsIJU8__strongP6NSDataU8__strongP16AVAudioPCMBufferU8__strongP5NSURLEEELNS0_6_TraitE1EE9__destroyB8nn180100EvEUlRT_E_JRNS0_6__baseILSI_1EJSA_SD_SG_EEEEEEDcSK_DpT0_(uint64_t a1, id *a2)
{

}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm2EEE10__dispatchB8nn180100IOZNS0_6__dtorINS0_8__traitsIJU8__strongP6NSDataU8__strongP16AVAudioPCMBufferU8__strongP5NSURLEEELNS0_6_TraitE1EE9__destroyB8nn180100EvEUlRT_E_JRNS0_6__baseILSI_1EJSA_SD_SG_EEEEEEDcSK_DpT0_(uint64_t a1, id *a2)
{

}

uint64_t std::__variant_detail::__copy_constructor<std::__variant_detail::__traits<NSData * {__strong},AVAudioPCMBuffer * {__strong},NSURL * {__strong}>,(std::__variant_detail::_Trait)1>::__copy_constructor(uint64_t a1, uint64_t a2)
{
  *(_BYTE *)a1 = 0;
  *(_DWORD *)(a1 + 8) = -1;
  std::__variant_detail::__ctor<std::__variant_detail::__traits<NSData * {__strong},AVAudioPCMBuffer * {__strong},NSURL * {__strong}>>::__generic_construct[abi:nn180100]<std::__variant_detail::__copy_constructor<std::__variant_detail::__traits<NSData * {__strong},AVAudioPCMBuffer * {__strong},NSURL * {__strong}>,(std::__variant_detail::_Trait)1> const&>(a1, a2);
  return a1;
}

void sub_2253680D0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, int a10, __int16 a11, char a12, char a13)
{
  uint64_t v13;
  uint64_t v15;

  v15 = *(unsigned int *)(v13 + 8);
  if ((_DWORD)v15 != -1)
    ((void (*)(char *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8nn180100IZNS0_6__dtorINS0_8__traitsIJU8__strongP6NSDataU8__strongP16AVAudioPCMBufferU8__strongP5NSURLEEELNS0_6_TraitE1EE9__destroyB8nn180100EvEUlRT_E_JRSH_EEEDcOSI_DpOT0____fmatrix[v15])(&a13, v13);
  *(_DWORD *)(v13 + 8) = -1;
  _Unwind_Resume(exception_object);
}

uint64_t std::__variant_detail::__ctor<std::__variant_detail::__traits<NSData * {__strong},AVAudioPCMBuffer * {__strong},NSURL * {__strong}>>::__generic_construct[abi:nn180100]<std::__variant_detail::__copy_constructor<std::__variant_detail::__traits<NSData * {__strong},AVAudioPCMBuffer * {__strong},NSURL * {__strong}>,(std::__variant_detail::_Trait)1> const&>(uint64_t result, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char v6;
  char v7;

  v3 = result;
  v4 = *(unsigned int *)(result + 8);
  if ((_DWORD)v4 != -1)
    result = ((uint64_t (*)(char *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8nn180100IZNS0_6__dtorINS0_8__traitsIJU8__strongP6NSDataU8__strongP16AVAudioPCMBufferU8__strongP5NSURLEEELNS0_6_TraitE1EE9__destroyB8nn180100EvEUlRT_E_JRSH_EEEDcOSI_DpOT0____fmatrix[v4])(&v7, result);
  *(_DWORD *)(v3 + 8) = -1;
  v5 = *(unsigned int *)(a2 + 8);
  if ((_DWORD)v5 != -1)
  {
    result = ((uint64_t (*)(char *, uint64_t, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base14__visit_alt_atB8nn180100IZNS0_6__ctorINS0_8__traitsIJU8__strongP6NSDataU8__strongP16AVAudioPCMBufferU8__strongP5NSURLEEEE19__generic_constructB8nn180100IRKNS0_18__copy_constructorISF_LNS0_6_TraitE1EEEEEvRSG_OT_EUlRSO_OT0_E_JSN_SM_EEEDcmSP_DpOT0____fdiagonal[v5])(&v6, v3, a2);
    *(_DWORD *)(v3 + 8) = v5;
  }
  return result;
}

id _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0ELm0EEE10__dispatchB8nn180100IOZNS0_6__ctorINS0_8__traitsIJU8__strongP6NSDataU8__strongP16AVAudioPCMBufferU8__strongP5NSURLEEEE19__generic_constructB8nn180100IRKNS0_18__copy_constructorISH_LNS0_6_TraitE1EEEEEvRSI_OT_EUlRSQ_OT0_E_JRNS0_6__baseILSL_1EJSA_SD_SG_EEERKSY_EEEDcSQ_DpT0_(uint64_t a1, _QWORD *a2, id *a3)
{
  id result;

  result = *a3;
  *a2 = result;
  return result;
}

id _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1ELm1EEE10__dispatchB8nn180100IOZNS0_6__ctorINS0_8__traitsIJU8__strongP6NSDataU8__strongP16AVAudioPCMBufferU8__strongP5NSURLEEEE19__generic_constructB8nn180100IRKNS0_18__copy_constructorISH_LNS0_6_TraitE1EEEEEvRSI_OT_EUlRSQ_OT0_E_JRNS0_6__baseILSL_1EJSA_SD_SG_EEERKSY_EEEDcSQ_DpT0_(uint64_t a1, _QWORD *a2, id *a3)
{
  id result;

  result = *a3;
  *a2 = result;
  return result;
}

id _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm2ELm2EEE10__dispatchB8nn180100IOZNS0_6__ctorINS0_8__traitsIJU8__strongP6NSDataU8__strongP16AVAudioPCMBufferU8__strongP5NSURLEEEE19__generic_constructB8nn180100IRKNS0_18__copy_constructorISH_LNS0_6_TraitE1EEEEEvRSI_OT_EUlRSQ_OT0_E_JRNS0_6__baseILSL_1EJSA_SD_SG_EEERKSY_EEEDcSQ_DpT0_(uint64_t a1, _QWORD *a2, id *a3)
{
  id result;

  result = *a3;
  *a2 = result;
  return result;
}

uint64_t std::allocate_shared[abi:nn180100]<re::AudioAssetPayload,std::allocator<re::AudioAssetPayload>,std::variant<NSData * {__strong},AVAudioPCMBuffer * {__strong},NSURL * {__strong}> &,re::AudioFileAssetConfiguration &,unsigned int &,unsigned long long,AVAudioChannelLayout * {__strong}&,void>(_QWORD *a1, uint64_t a2, uint64_t a3, int *a4, uint64_t *a5, void **a6)
{
  _QWORD *v12;
  __int128 v13;
  uint64_t result;
  uint64_t v15;
  uint64_t v16;
  _OWORD v17[2];
  char v18;
  __int128 v19;
  __int128 v20;
  int v22;
  char v23;
  _BYTE v24[8];
  int v25;
  char v26;

  v12 = operator new(0xA0uLL);
  v12[1] = 0;
  v12[2] = 0;
  *v12 = &off_24ED38EE0;
  std::__variant_detail::__copy_constructor<std::__variant_detail::__traits<NSData * {__strong},AVAudioPCMBuffer * {__strong},NSURL * {__strong}>,(std::__variant_detail::_Trait)1>::__copy_constructor((uint64_t)v24, a2);
  v13 = *(_OWORD *)(a3 + 16);
  v17[0] = *(_OWORD *)a3;
  v17[1] = v13;
  v18 = *(_BYTE *)(a3 + 32);
  if (v18)
    re::DynamicString::DynamicString((re::DynamicString *)&v19, (const re::DynamicString *)(a3 + 40));
  if (*(_BYTE *)(a3 + 72))
    v22 = *(_DWORD *)(a3 + 76);
  v23 = *(_BYTE *)(a3 + 80);
  result = re::AudioAssetPayload::AudioAssetPayload((uint64_t)(v12 + 3), (uint64_t)v24, (uint64_t)v17, *a4, *a5, *a6, 0);
  if (v18)
  {
    result = v19;
    if ((_QWORD)v19)
    {
      if ((BYTE8(v19) & 1) != 0)
        result = (*(uint64_t (**)(_QWORD, _QWORD, uint64_t, uint64_t))(*(_QWORD *)v19 + 40))(v19, v20, v15, v16);
      v19 = 0u;
      v20 = 0u;
    }
  }
  if (v25 != -1)
    result = ((uint64_t (*)(char *, _BYTE *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8nn180100IZNS0_6__dtorINS0_8__traitsIJU8__strongP6NSDataU8__strongP16AVAudioPCMBufferU8__strongP5NSURLEEELNS0_6_TraitE1EE9__destroyB8nn180100EvEUlRT_E_JRSH_EEEDcOSI_DpOT0____fmatrix[v25])(&v26, v24);
  *a1 = v12 + 3;
  a1[1] = v12;
  return result;
}

void sub_225368344(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, char a20,int a21,int a22)
{
  std::__shared_weak_count *v22;
  uint64_t v23;
  void *v25;

  if (a13 && a14 && (a15 & 1) != 0)
    (*(void (**)(void))(*(_QWORD *)a14 + 40))();
  if (a22 != -1)
    ((void (*)(uint64_t, char *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8nn180100IZNS0_6__dtorINS0_8__traitsIJU8__strongP6NSDataU8__strongP16AVAudioPCMBufferU8__strongP5NSURLEEELNS0_6_TraitE1EE9__destroyB8nn180100EvEUlRT_E_JRSH_EEEDcOSI_DpOT0____fmatrix[a22])(v23 - 65, &a20);
  std::__shared_weak_count::~__shared_weak_count(v22);
  operator delete(v25);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<re::AudioAssetPayload>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_24ED38EE0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<re::AudioAssetPayload>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_24ED38EE0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x2276933B8);
}

void std::__shared_ptr_emplace<re::AudioAssetPayload>::__on_zero_shared(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  char v4;

  if (*(_BYTE *)(a1 + 72))
  {
    v2 = *(_QWORD *)(a1 + 80);
    if (v2)
    {
      if ((*(_BYTE *)(a1 + 88) & 1) != 0)
        (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v2 + 40))(v2, *(_QWORD *)(a1 + 96));
      *(_OWORD *)(a1 + 80) = 0u;
      *(_OWORD *)(a1 + 96) = 0u;
    }
  }
  v3 = *(unsigned int *)(a1 + 32);
  if ((_DWORD)v3 != -1)
    ((void (*)(char *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8nn180100IZNS0_6__dtorINS0_8__traitsIJU8__strongP6NSDataU8__strongP16AVAudioPCMBufferU8__strongP5NSURLEEELNS0_6_TraitE1EE9__destroyB8nn180100EvEUlRT_E_JRSH_EEEDcOSI_DpOT0____fmatrix[v3])(&v4, a1 + 24);
  *(_DWORD *)(a1 + 32) = -1;
}

void std::__variant_detail::__assignment<std::__variant_detail::__traits<NSData * {__strong},AVAudioPCMBuffer * {__strong},NSURL * {__strong}>>::__assign_alt[abi:nn180100]<0ul,NSData * {__strong},NSData * {__strong}&>(uint64_t a1, id *location, id *a3)
{
  uint64_t v5;
  char v6;

  v5 = *(unsigned int *)(a1 + 8);
  if ((_DWORD)v5 != -1)
  {
    if (!(_DWORD)v5)
    {
      objc_storeStrong(location, *a3);
      return;
    }
    ((void (*)(char *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8nn180100IZNS0_6__dtorINS0_8__traitsIJU8__strongP6NSDataU8__strongP16AVAudioPCMBufferU8__strongP5NSURLEEELNS0_6_TraitE1EE9__destroyB8nn180100EvEUlRT_E_JRSH_EEEDcOSI_DpOT0____fmatrix[v5])(&v6, a1);
  }
  *(_DWORD *)(a1 + 8) = -1;
  *(_QWORD *)a1 = *a3;
  *(_DWORD *)(a1 + 8) = 0;
}

void std::__variant_detail::__assignment<std::__variant_detail::__traits<NSData * {__strong},AVAudioPCMBuffer * {__strong},NSURL * {__strong}>>::__assign_alt[abi:nn180100]<1ul,AVAudioPCMBuffer * {__strong},AVAudioPCMBuffer * {__strong}&>(uint64_t a1, id *location, id *a3)
{
  uint64_t v5;
  char v6;

  v5 = *(unsigned int *)(a1 + 8);
  if ((_DWORD)v5 != -1)
  {
    if ((_DWORD)v5 == 1)
    {
      objc_storeStrong(location, *a3);
      return;
    }
    ((void (*)(char *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8nn180100IZNS0_6__dtorINS0_8__traitsIJU8__strongP6NSDataU8__strongP16AVAudioPCMBufferU8__strongP5NSURLEEELNS0_6_TraitE1EE9__destroyB8nn180100EvEUlRT_E_JRSH_EEEDcOSI_DpOT0____fmatrix[v5])(&v6, a1);
  }
  *(_DWORD *)(a1 + 8) = -1;
  *(_QWORD *)a1 = *a3;
  *(_DWORD *)(a1 + 8) = 1;
}

uint64_t std::allocate_shared[abi:nn180100]<re::AudioAssetPayload,std::allocator<re::AudioAssetPayload>,std::variant<NSData * {__strong},AVAudioPCMBuffer * {__strong},NSURL * {__strong}> &,re::AudioFileAssetConfiguration &,unsigned int &,unsigned long long,void>(_QWORD *a1, uint64_t a2, uint64_t a3, int *a4, uint64_t *a5)
{
  _QWORD *v10;
  __int128 v11;
  uint64_t result;
  uint64_t v13;
  uint64_t v14;
  _OWORD v15[2];
  char v16;
  __int128 v17;
  __int128 v18;
  int v20;
  char v21;
  _BYTE v22[8];
  int v23;
  char v24;

  v10 = operator new(0xA0uLL);
  v10[1] = 0;
  v10[2] = 0;
  *v10 = &off_24ED38EE0;
  std::__variant_detail::__copy_constructor<std::__variant_detail::__traits<NSData * {__strong},AVAudioPCMBuffer * {__strong},NSURL * {__strong}>,(std::__variant_detail::_Trait)1>::__copy_constructor((uint64_t)v22, a2);
  v11 = *(_OWORD *)(a3 + 16);
  v15[0] = *(_OWORD *)a3;
  v15[1] = v11;
  v16 = *(_BYTE *)(a3 + 32);
  if (v16)
    re::DynamicString::DynamicString((re::DynamicString *)&v17, (const re::DynamicString *)(a3 + 40));
  if (*(_BYTE *)(a3 + 72))
    v20 = *(_DWORD *)(a3 + 76);
  v21 = *(_BYTE *)(a3 + 80);
  result = re::AudioAssetPayload::AudioAssetPayload((uint64_t)(v10 + 3), (uint64_t)v22, (uint64_t)v15, *a4, *a5, 0, 0);
  if (v16)
  {
    result = v17;
    if ((_QWORD)v17)
    {
      if ((BYTE8(v17) & 1) != 0)
        result = (*(uint64_t (**)(_QWORD, _QWORD, uint64_t, uint64_t))(*(_QWORD *)v17 + 40))(v17, v18, v13, v14);
      v17 = 0u;
      v18 = 0u;
    }
  }
  if (v23 != -1)
    result = ((uint64_t (*)(char *, _BYTE *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8nn180100IZNS0_6__dtorINS0_8__traitsIJU8__strongP6NSDataU8__strongP16AVAudioPCMBufferU8__strongP5NSURLEEELNS0_6_TraitE1EE9__destroyB8nn180100EvEUlRT_E_JRSH_EEEDcOSI_DpOT0____fmatrix[v23])(&v24, v22);
  *a1 = v10 + 3;
  a1[1] = v10;
  return result;
}

void sub_2253686C8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, char a15, uint64_t a16)
{
  std::__shared_weak_count *v16;
  uint64_t v17;
  uint64_t v19;
  void *v20;

  if (a13 && a14 && (a15 & 1) != 0)
    (*(void (**)(void))(*(_QWORD *)a14 + 40))();
  v19 = *(unsigned int *)(v17 - 64);
  if ((_DWORD)v19 != -1)
    ((void (*)(uint64_t, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8nn180100IZNS0_6__dtorINS0_8__traitsIJU8__strongP6NSDataU8__strongP16AVAudioPCMBufferU8__strongP5NSURLEEELNS0_6_TraitE1EE9__destroyB8nn180100EvEUlRT_E_JRSH_EEEDcOSI_DpOT0____fmatrix[v19])(v17 - 49, v17 - 72);
  std::__shared_weak_count::~__shared_weak_count(v16);
  operator delete(v20);
  _Unwind_Resume(a1);
}

uint64_t re::AssetHandle::loadedAsset<re::AudioFileAsset>(re::AudioFileAsset *a1)
{
  if (!*((_QWORD *)a1 + 1))
    return 0;
  re::AudioFileAsset::assetType(a1);
  return re::AssetHandle::assetWithType(a1, (const re::AssetType *)&re::AudioFileAsset::assetType(void)::type, 1);
}

void sub_2253689A0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_225368C98(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;

  v6 = v5;

  _Unwind_Resume(a1);
}

id re::`anonymous namespace'::decodeError(re::_anonymous_namespace_ *this, NSString *a2)
{
  re::_anonymous_namespace_ *v2;
  NSObject *v3;
  void *v4;
  void *v5;
  void *v6;
  uint64_t v8;
  re::_anonymous_namespace_ *v9;
  uint8_t buf[4];
  re::_anonymous_namespace_ *v11;
  uint64_t v12;

  v12 = *MEMORY[0x24BDAC8D0];
  v2 = this;
  v3 = *re::assetTypesLogObjects(v2);
  if (os_log_type_enabled(v3, OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)buf = 138543362;
    v11 = v2;
    _os_log_error_impl(&dword_224FE9000, v3, OS_LOG_TYPE_ERROR, "DrawableQueue payload decode error: %{public}@", buf, 0xCu);
  }
  v4 = (void *)MEMORY[0x24BDD1540];
  v8 = *MEMORY[0x24BDD0BA0];
  v9 = v2;
  objc_msgSend(MEMORY[0x24BDBCE70], "dictionaryWithObjects:forKeys:count:", &v9, &v8, 1);
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v4, "errorWithDomain:code:userInfo:", *MEMORY[0x24BDD0B88], 4864, v5);
  v6 = (void *)objc_claimAutoreleasedReturnValue();

  return v6;
}

{
  re::_anonymous_namespace_ *v2;
  NSObject *v3;
  void *v4;
  void *v5;
  void *v6;
  uint64_t v8;
  re::_anonymous_namespace_ *v9;
  uint8_t buf[4];
  re::_anonymous_namespace_ *v11;
  uint64_t v12;

  v12 = *MEMORY[0x24BDAC8D0];
  v2 = this;
  v3 = *re::assetTypesLogObjects(v2);
  if (os_log_type_enabled(v3, OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)buf = 138543362;
    v11 = v2;
    _os_log_error_impl(&dword_224FE9000, v3, OS_LOG_TYPE_ERROR, "Mesh payload decode error: %{public}@", buf, 0xCu);
  }
  v4 = (void *)MEMORY[0x24BDD1540];
  v8 = *MEMORY[0x24BDD0BA0];
  v9 = v2;
  objc_msgSend(MEMORY[0x24BDBCE70], "dictionaryWithObjects:forKeys:count:", &v9, &v8, 1);
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v4, "errorWithDomain:code:userInfo:", *MEMORY[0x24BDD0B88], 4864, v5);
  v6 = (void *)objc_claimAutoreleasedReturnValue();

  return v6;
}

{
  re::_anonymous_namespace_ *v2;
  NSObject *v3;
  void *v4;
  void *v5;
  void *v6;
  uint64_t v8;
  re::_anonymous_namespace_ *v9;
  uint8_t buf[4];
  re::_anonymous_namespace_ *v11;
  uint64_t v12;

  v12 = *MEMORY[0x24BDAC8D0];
  v2 = this;
  v3 = *re::assetTypesLogObjects(v2);
  if (os_log_type_enabled(v3, OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)buf = 138543362;
    v11 = v2;
    _os_log_error_impl(&dword_224FE9000, v3, OS_LOG_TYPE_ERROR, "Direct Resource payload decode error: %{public}@", buf, 0xCu);
  }
  v4 = (void *)MEMORY[0x24BDD1540];
  v8 = *MEMORY[0x24BDD0BA0];
  v9 = v2;
  objc_msgSend(MEMORY[0x24BDBCE70], "dictionaryWithObjects:forKeys:count:", &v9, &v8, 1);
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v4, "errorWithDomain:code:userInfo:", *MEMORY[0x24BDD0B88], 4864, v5);
  v6 = (void *)objc_claimAutoreleasedReturnValue();

  return v6;
}

{
  re::_anonymous_namespace_ *v2;
  NSObject *v3;
  void *v4;
  void *v5;
  void *v6;
  uint64_t v8;
  re::_anonymous_namespace_ *v9;
  uint8_t buf[4];
  re::_anonymous_namespace_ *v11;
  uint64_t v12;

  v12 = *MEMORY[0x24BDAC8D0];
  v2 = this;
  v3 = *re::assetTypesLogObjects(v2);
  if (os_log_type_enabled(v3, OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)buf = 138543362;
    v11 = v2;
    _os_log_error_impl(&dword_224FE9000, v3, OS_LOG_TYPE_ERROR, "Mesh payload decode error: %{public}@", buf, 0xCu);
  }
  v4 = (void *)MEMORY[0x24BDD1540];
  v8 = *MEMORY[0x24BDD0BA0];
  v9 = v2;
  objc_msgSend(MEMORY[0x24BDBCE70], "dictionaryWithObjects:forKeys:count:", &v9, &v8, 1);
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v4, "errorWithDomain:code:userInfo:", *MEMORY[0x24BDD0B88], 4864, v5);
  v6 = (void *)objc_claimAutoreleasedReturnValue();

  return v6;
}

void sub_225368E04(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_225368FA0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void re::DrawableQueuePayload::make(uint64_t a1@<X0>, uint64_t a2@<X1>, int a3@<W2>, uint64_t *a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, REDrawableQueuePayload **a9@<X8>)
{
  size_t v18;
  char *v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  REDrawableQueuePayload *v23;
  void *v24;
  REDrawableQueuePayload *v25;
  _QWORD v26[2];

  v26[1] = *MEMORY[0x24BDAC8D0];
  MEMORY[0x24BDAC7A8](a1);
  v19 = (char *)v26 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  bzero(v19, v18);
  if (a5)
  {
    v20 = v19;
    v21 = a5;
    do
    {
      v22 = *a4++;
      *(_QWORD *)v20 = v22;
      v20 += 8;
      --v21;
    }
    while (v21);
  }
  v23 = [REDrawableQueuePayload alloc];
  objc_msgSend(MEMORY[0x24BDBCE30], "arrayWithObjects:count:", v19, a5);
  v24 = (void *)objc_claimAutoreleasedReturnValue();
  v25 = -[REDrawableQueuePayload initWithWidth:height:pixelFormat:textureHandles:allowPixelFormatConversion:machSemaphore:queueStateShmem:queueStateLength:](v23, "initWithWidth:height:pixelFormat:textureHandles:allowPixelFormatConversion:machSemaphore:queueStateShmem:queueStateLength:", a1, a2, a3, v24, a6, a7, a8, 336);
  *a9 = v25;

}

void sub_225369204(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t re::DrawableQueuePayload::drawableCount(id *this)
{
  void *v1;
  uint64_t v2;

  objc_msgSend(*this, "textureHandles");
  v1 = (void *)objc_claimAutoreleasedReturnValue();
  v2 = objc_msgSend(v1, "count");

  return v2;
}

void sub_225369254(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void *re::DrawableQueuePayload::textureHandle(id *this, int a2)
{
  void *v3;
  void *v4;

  objc_msgSend(*this, "textureHandles");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v3, "objectAtIndexedSubscript:", a2);
  v4 = (void *)objc_claimAutoreleasedReturnValue();

  return v4;
}

void sub_2253692AC(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void *re::DrawableQueuePayload::mapQueueStateShmem(id *this)
{
  void *v1;
  size_t v2;
  uint64_t v3;
  void *result;
  void *region;

  region = 0;
  objc_msgSend(*this, "queueStateShmem");
  v1 = (void *)objc_claimAutoreleasedReturnValue();
  v2 = xpc_shmem_map(v1, &region);

  if (!v2)
    return 0;
  if (v2 > 0x14F)
    return region;
  re::internal::assertLog((re::internal *)4, v3, "assertion failure: '%s' (%s:line %i) ", "length >= sizeof(SharedRingBuffer)", "mapQueueStateShmem", 298);
  result = (void *)_os_crash();
  __break(1u);
  return result;
}

void sub_225369354(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void re::introspect_AcousticMeshAssetMeshType(re *this, const re::IntrospectionBase *a2)
{
  unsigned __int8 v2;
  unsigned __int8 v3;
  uint64_t *v4;
  uint64_t v5;
  unsigned int *v6;
  _anonymous_namespace_ *v7;
  unint64_t v8;
  unint64_t i;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  char v13;
  unsigned __int8 *v14;
  int v15;
  uint64_t v16;
  unint64_t j;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  char v21;
  unsigned __int8 *v22;
  int v23;
  uint64_t v24;
  uint64_t v25;
  re *v26;
  uint64_t *v27;
  re *v28;
  uint64_t *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  const char *v33;
  __int128 v34;
  StringID v35;
  _QWORD v36[2];
  _QWORD v37[61];

  v2 = atomic_load((unsigned __int8 *)&qword_254100B60);
  if ((v2 & 1) == 0)
  {
    v26 = (re *)__cxa_guard_acquire(&qword_254100B60);
    if ((_DWORD)v26)
    {
      v27 = re::introspectionAllocator(v26);
      v28 = (re *)(*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v27 + 32))(v27, 24, 8);
      *(_DWORD *)v28 = 1;
      *((_QWORD *)v28 + 1) = 0;
      *((_QWORD *)v28 + 2) = "Empty";
      qword_254100BA0 = (uint64_t)v28;
      v29 = re::introspectionAllocator(v28);
      v30 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v29 + 32))(v29, 24, 8);
      *(_DWORD *)v30 = 1;
      *(_QWORD *)(v30 + 8) = 1;
      *(_QWORD *)(v30 + 16) = "GeomMesh";
      qword_254100BA8 = v30;
      __cxa_guard_release(&qword_254100B60);
    }
  }
  v3 = atomic_load((unsigned __int8 *)&qword_254100B68);
  if ((v3 & 1) == 0 && __cxa_guard_acquire(&qword_254100B68))
  {
    re::IntrospectionBasic::IntrospectionBasic((re::IntrospectionBasic *)&qword_254100BB0, "AcousticMeshAssetMeshType", 4, 4, 1, 1);
    qword_254100BB0 = (uint64_t)&off_24ED7D9E8;
    qword_254100BF0 = (uint64_t)&re::introspect_AcousticMeshAssetMeshType(BOOL)::enumTable;
    dword_254100BC0 = 9;
    __cxa_guard_release(&qword_254100B68);
  }
  if ((_MergedGlobals_87 & 1) == 0)
  {
    _MergedGlobals_87 = 1;
    re::IntrospectionRegistry::add((re::IntrospectionRegistry *)&qword_254100BB0, a2);
    v32 = 0x7DF6D808D13ABC8ELL;
    v33 = "AcousticMeshAssetMeshType";
    v37[0] = 208862;
    v37[1] = "int";
    v4 = (uint64_t *)re::HashTable<re::StringID,re::StateParameterInt *,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::tryGet((uint64_t)&unk_25582A358, v37);
    if (v4)
    {
      v5 = *v4;
      re::StringID::destroyString((re::StringID *)v37);
      v6 = (unsigned int *)qword_254100BF0;
      v36[1] = v5;
      re::TypeBuilder::beginEnumType((uint64_t)v37, &v32, 1, 1, (uint64_t)v36);
      v8 = *v6;
      if ((_DWORD)v8)
      {
        for (i = 0; i < v8; ++i)
        {
          v10 = *(_QWORD *)(*((_QWORD *)v6 + 1) + 8 * i);
          if (*(_DWORD *)v10 == 1)
          {
            v11 = *(char **)(v10 + 16);
            if (v11)
            {
              v12 = *v11;
              if (*v11)
              {
                v13 = v11[1];
                if (v13)
                {
                  v14 = (unsigned __int8 *)(v11 + 2);
                  do
                  {
                    v12 = 31 * v12 + v13;
                    v15 = *v14++;
                    v13 = v15;
                  }
                  while (v15);
                }
              }
            }
            else
            {
              v12 = 0;
            }
            v16 = *(_QWORD *)(v10 + 8);
            *(_QWORD *)&v35.var0 = 2 * v12;
            v35.var1 = v11;
            re::TypeBuilder::addEnumConstant((re::TypeBuilder *)v37, v16, &v35);
            re::StringID::destroyString((re::StringID *)&v35);
            v8 = *v6;
          }
        }
        if (v8)
        {
          for (j = 0; j < v8; ++j)
          {
            v18 = *(_QWORD *)(*((_QWORD *)v6 + 1) + 8 * j);
            if (*(_DWORD *)v18 == 2)
            {
              v19 = *(char **)(v18 + 16);
              if (v19)
              {
                v20 = *v19;
                if (*v19)
                {
                  v21 = v19[1];
                  if (v21)
                  {
                    v22 = (unsigned __int8 *)(v19 + 2);
                    do
                    {
                      v20 = 31 * v20 + v21;
                      v23 = *v22++;
                      v21 = v23;
                    }
                    while (v23);
                  }
                }
              }
              else
              {
                v20 = 0;
              }
              v24 = *(_QWORD *)(v18 + 8);
              *(_QWORD *)&v35.var0 = 2 * v20;
              v35.var1 = v19;
              re::TypeBuilder::addEnumConstantRenaming((re::TypeBuilder *)v37, v24, &v35);
              re::StringID::destroyString((re::StringID *)&v35);
              v8 = *v6;
            }
          }
        }
      }
      re::TypeBuilder::~TypeBuilder((re::TypeBuilder *)v37, v25);
      xmmword_254100BD0 = v34;
      re::StringID::destroyString((re::StringID *)&v32);
    }
    else
    {
      re::StringID::destroyString((re::StringID *)v37);
      re::internal::assertLog((re::internal *)5, v31, "assertion failure: '%s' (%s:line %i) Failed to determine underlying type of enum %s.", "valueID.isValid()", "registerEnumType", 2796, "AcousticMeshAssetMeshType", v32, v33);
      _os_crash();
      __break(1u);
    }
  }
}

void sub_2253696D4(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254100B60);
  _Unwind_Resume(a1);
}

uint64_t *re::allocInfo_AcousticMeshAsset(re *this)
{
  unsigned __int8 v1;

  v1 = atomic_load((unsigned __int8 *)&qword_254100B70);
  if ((v1 & 1) == 0 && __cxa_guard_acquire(&qword_254100B70))
  {
    ArcSharedObject::ArcSharedObject((ArcSharedObject *)&qword_254100BF8, 0);
    *(uint64_t *)((char *)&qword_254100C08 + 6) = 0;
    qword_254100C08 = 0;
    qword_254100C18 = 0;
    qword_254100C20 = 0xFFFFFFFFLL;
    qword_254100BF8 = (uint64_t)&off_24ED7DAA8;
    qword_254100C28 = (uint64_t)"AcousticMeshAsset";
    dword_254100C30 = 0;
    unk_254100C38 = 0u;
    unk_254100C48 = 0u;
    unk_254100C58 = 0u;
    qword_254100C68 = 0;
    __cxa_guard_release(&qword_254100B70);
  }
  return &qword_254100BF8;
}

void re::initInfo_AcousticMeshAsset(re *this, re::IntrospectionBase *a2)
{
  const re::IntrospectionBase *v3;
  unsigned __int8 v4;
  re *v5;
  uint64_t *v6;
  const re::IntrospectionBase *v7;
  uint64_t v8;
  __int128 v9;
  _QWORD v10[2];
  __int128 v11;

  v10[0] = 0x7370B71E3F67FEC0;
  v10[1] = "AcousticMeshAsset";
  re::StringID::destroyString((re::StringID *)v10);
  *((_OWORD *)this + 2) = v11;
  v4 = atomic_load((unsigned __int8 *)&qword_254100B80);
  if ((v4 & 1) == 0)
  {
    v5 = (re *)__cxa_guard_acquire(&qword_254100B80);
    if ((_DWORD)v5)
    {
      v6 = re::introspectionAllocator(v5);
      re::introspect_AcousticMeshAssetMeshType((re *)v6, v7);
      v8 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v6 + 32))(v6, 72, 8);
      *(_DWORD *)v8 = 1;
      *(_QWORD *)(v8 + 8) = "meshType";
      *(_QWORD *)(v8 + 16) = &qword_254100BB0;
      *(_QWORD *)(v8 + 24) = 0;
      *(_QWORD *)(v8 + 32) = 0x800000001;
      *(_DWORD *)(v8 + 40) = 0;
      *(_QWORD *)(v8 + 48) = 0;
      *(_QWORD *)(v8 + 56) = 0;
      *(_DWORD *)(v8 + 64) = 0;
      qword_254100B78 = v8;
      __cxa_guard_release(&qword_254100B80);
    }
  }
  *((_QWORD *)this + 2) = 0x2F800000008;
  *((_DWORD *)this + 6) = 8;
  *((_WORD *)this + 14) = 0;
  *((_DWORD *)this + 14) = 1;
  *((_QWORD *)this + 8) = &qword_254100B78;
  *((_QWORD *)this + 9) = re::internal::defaultConstruct<re::AcousticMeshAsset>;
  *((_QWORD *)this + 10) = re::internal::defaultDestruct<re::AcousticMeshAsset>;
  *((_QWORD *)this + 11) = 0;
  *((_QWORD *)this + 12) = 0;
  *((_QWORD *)this + 13) = re::internal::defaultConstructV2<re::AcousticMeshAsset>;
  *((_QWORD *)this + 14) = re::internal::defaultDestructV2<re::AcousticMeshAsset>;
  re::IntrospectionRegistry::add(this, v3);
  v9 = v11;
}

void sub_225369958(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254100B80);
  _Unwind_Resume(a1);
}

re::GeomMesh *re::internal::defaultConstruct<re::AcousticMeshAsset>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  re::GeomMesh *result;

  *(_QWORD *)a3 = &off_24ED39070;
  *(_DWORD *)(a3 + 8) = 0;
  result = re::GeomMesh::GeomMesh((re::GeomMesh *)(a3 + 16), 0);
  *(_QWORD *)(a3 + 752) = 0;
  return result;
}

void re::internal::defaultDestruct<re::AcousticMeshAsset>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  re::GeomAttribute *v4;

  re::GeomMesh::~GeomMesh((re::GeomMesh *)(a3 + 16), v4);
}

re::GeomMesh *re::internal::defaultConstructV2<re::AcousticMeshAsset>(uint64_t a1)
{
  re::GeomMesh *result;

  *(_QWORD *)a1 = &off_24ED39070;
  *(_DWORD *)(a1 + 8) = 0;
  result = re::GeomMesh::GeomMesh((re::GeomMesh *)(a1 + 16), 0);
  *(_QWORD *)(a1 + 752) = 0;
  return result;
}

void re::internal::defaultDestructV2<re::AcousticMeshAsset>(uint64_t a1)
{
  re::GeomAttribute *v2;

  re::GeomMesh::~GeomMesh((re::GeomMesh *)(a1 + 16), v2);
}

void re::AcousticMeshAsset::~AcousticMeshAsset(id *this)
{
  re::GeomAttribute *v2;

  re::GeomMesh::~GeomMesh((re::GeomMesh *)(this + 2), v2);
}

{
  re::GeomAttribute *v2;

  re::GeomMesh::~GeomMesh((re::GeomMesh *)(this + 2), v2);
  JUMPOUT(0x2276933B8);
}

uint64_t *re::AcousticMeshAsset::assetType(re::AcousticMeshAsset *this)
{
  unsigned __int8 v1;

  {
    re::AcousticMeshAsset::assetType(void)::type = (uint64_t)"AcousticMesh";
    qword_2558276F8 = 0;
    re::AssetType::generateCompiledExtension((re::AssetType *)&re::AcousticMeshAsset::assetType(void)::type);
  }
  return &re::AcousticMeshAsset::assetType(void)::type;
}

re::DynamicString *re::AcousticMeshAssetCompiler::getCurrentCompiledAssetInfo@<X0>(re::AcousticMeshAssetCompiler *this@<X0>, uint64_t a2@<X8>)
{
  re::AcousticMeshAsset *v3;
  _QWORD v5[2];

  *(_QWORD *)(a2 + 32) = 0;
  *(_OWORD *)a2 = 0u;
  *(_OWORD *)(a2 + 16) = 0u;
  v3 = (re::AcousticMeshAsset *)re::DynamicString::setCapacity((_QWORD *)(a2 + 8), 0);
  *(_QWORD *)a2 = 0x100000001;
  re::AcousticMeshAsset::assetType(v3);
  v5[0] = re::AcousticMeshAsset::assetType(void)::type;
  v5[1] = strlen((const char *)re::AcousticMeshAsset::assetType(void)::type);
  return re::DynamicString::operator=((re::DynamicString *)(a2 + 8), (uint64_t)v5);
}

uint64_t re::AcousticMeshAssetCompiler::assetIntrospectionType(re::AcousticMeshAssetCompiler *this)
{
  unsigned __int8 v1;

  v1 = atomic_load((unsigned __int8 *)&qword_254100B98);
  if ((v1 & 1) == 0 && __cxa_guard_acquire(&qword_254100B98))
  {
    qword_254100B90 = re::internal::getOrCreateInfo((re::internal *)"AcousticMeshAsset", (uint64_t (*)(re::internal *))re::allocInfo_AcousticMeshAsset, (re::IntrospectionBase *(*)(void))re::initInfo_AcousticMeshAsset, (void (*)(re::IntrospectionBase *))&unk_254100B88, 0);
    __cxa_guard_release(&qword_254100B98);
  }
  return qword_254100B90;
}

void re::AcousticMeshAssetCompiler::getSupportedExtensions(uint64_t a1@<X8>)
{
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)a1 = 0;
  *(_DWORD *)(a1 + 24) = 0;
}

__n128 re::AcousticMeshAssetCompiler::compile@<Q0>(_anonymous_namespace_ *a1@<X0>, uint64_t a2@<X8>)
{
  __n128 result;
  uint64_t v4;
  uint64_t v5;
  __n128 v6;
  uint64_t v7;
  uint64_t v8;

  result = v6;
  v4 = v7;
  v5 = v8;
  *(_BYTE *)a2 = 0;
  *(_QWORD *)(a2 + 8) = 100;
  *(_QWORD *)(a2 + 16) = &re::AssetErrorCategory(void)::instance;
  *(__n128 *)(a2 + 24) = result;
  *(_QWORD *)(a2 + 40) = v4;
  *(_QWORD *)(a2 + 48) = v5;
  return result;
}

re *re::AcousticMeshAssetCompiler::deleteAsset(re::AcousticMeshAssetCompiler *this, re *a2)
{
  return re::internal::destroyPersistent<re::AcousticMeshAsset>(a2);
}

re *re::internal::destroyPersistent<re::AcousticMeshAsset>(re *result)
{
  re *v1;
  uint64_t v2;
  re::GeomAttribute *v3;

  if (result)
  {
    v1 = result;
    v2 = re::globalAllocators(result)[2];

    re::GeomMesh::~GeomMesh((re *)((char *)v1 + 16), v3);
    return (re *)(*(uint64_t (**)(uint64_t, re *))(*(_QWORD *)v2 + 40))(v2, v1);
  }
  return result;
}

void re::AcousticMeshAssetLoader::~AcousticMeshAssetLoader(re::AcousticMeshAssetLoader *this)
{
  JUMPOUT(0x2276933B8);
}

uint64_t re::AcousticMeshAssetLoader::registerAsset()
{
  return 0;
}

BOOL re::AcousticMeshAssetLoader::serializeAssetBlob(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int v3;

  v3 = *(_DWORD *)(a3 + 8);
  if (!v3)
    return 1;
  if (v3 == 1)
    return re::internal::writeGeomMeshToStream(a3 + 16, a2);
  return 0;
}

BOOL re::AcousticMeshAssetLoader::createRuntimeData(uint64_t a1, uint64_t a2, const char *a3)
{
  int v3;
  re::StreamReader *v5;
  int GeomMeshFromStream;
  void *v7;
  void (**v9)(re::SeekableInputStreamReaderAdaptor *__hidden);
  const char *v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  char v15;

  v3 = *(_DWORD *)(a2 + 8);
  if (!v3)
    return 1;
  if (v3 != 1)
    return 0;
  if (a3)
  {
    v9 = &off_24ED7C6E0;
    v10 = a3;
    v11 = 0;
    v12 = 0;
    v13 = 0;
    v14 = (*(uint64_t (**)(const char *))(*(_QWORD *)a3 + 40))(a3);
    v15 = 0;
    GeomMeshFromStream = re::internal::readGeomMeshFromStream((re::internal *)(a2 + 16), (re::GeomMesh *)&v9, v5);
    if (v12)
      (*(void (**)(const char *))(*(_QWORD *)v10 + 24))(v10);
    if (!GeomMeshFromStream)
      return 0;
  }
  re::createMDLMeshFromGeomMesh((re *)(a2 + 16), (const re::GeomMesh *)re::AcousticMeshAsset::kMaterialAttributeName, a3);
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  re::ObjCObject::operator=((void **)(a2 + 752), v7);

  return *(_QWORD *)(a2 + 752) != 0;
}

void sub_225369DF8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, int a13)
{
  if (a13)
    (*(void (**)(uint64_t))(*(_QWORD *)a11 + 24))(a11);
  _Unwind_Resume(exception_object);
}

re *re::AcousticMeshAssetLoader::unloadAsset(re::AcousticMeshAssetLoader *this, re *a2)
{
  re *result;

  if (a2)
    return re::internal::destroyPersistent<re::AcousticMeshAsset>(a2);
  return result;
}

uint64_t re::AcousticMeshAssetLoader::isSupportedSourceExtension(re::AcousticMeshAssetLoader *this, char *a2)
{
  void **v2;
  unsigned __int8 v3;
  void **v4;
  void *__p[2];
  unsigned __int8 v7;

  v2 = __p;
  std::string::basic_string[abi:nn180100]<0>(__p, a2);
  v3 = v7;
  if ((v7 & 0x80u) == 0)
    v4 = (void **)((char *)__p + v7);
  else
    v4 = (void **)((char *)__p[0] + (unint64_t)__p[1]);
  if ((v7 & 0x80u) != 0)
    v2 = (void **)__p[0];
  if (v2 != v4)
  {
    do
    {
      *(_BYTE *)v2 = __tolower(*(char *)v2);
      v2 = (void **)((char *)v2 + 1);
    }
    while (v2 != v4);
    v3 = v7;
  }
  if ((v3 & 0x80) != 0)
    operator delete(__p[0]);
  return 0;
}

void sub_225369EA8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t re::AcousticMeshAssetLoader::introspectionType(re::AcousticMeshAssetLoader *this)
{
  unsigned __int8 v1;

  v1 = atomic_load((unsigned __int8 *)&qword_254100B98);
  if ((v1 & 1) == 0 && __cxa_guard_acquire(&qword_254100B98))
  {
    qword_254100B90 = re::internal::getOrCreateInfo((re::internal *)"AcousticMeshAsset", (uint64_t (*)(re::internal *))re::allocInfo_AcousticMeshAsset, (re::IntrospectionBase *(*)(void))re::initInfo_AcousticMeshAsset, (void (*)(re::IntrospectionBase *))&unk_254100B88, 0);
    __cxa_guard_release(&qword_254100B98);
  }
  return qword_254100B90;
}

void re::AcousticMeshAssetCompiler::~AcousticMeshAssetCompiler(re::AcousticMeshAssetCompiler *this)
{
  JUMPOUT(0x2276933B8);
}

semaphore_t *re::LocklessRingBuffer::LocklessRingBuffer(semaphore_t *this)
{
  uint64_t v2;
  semaphore_t *result;

  ArcSharedObject::ArcSharedObject((ArcSharedObject *)this, 0);
  *(_QWORD *)this = &off_24ED39120;
  this[6] = 0;
  *((_QWORD *)this + 4) = 0;
  if (!semaphore_create(*MEMORY[0x24BDAEC58], this + 6, 0, 0))
    return this;
  re::internal::assertLog((re::internal *)4, v2, "assertion failure: '%s' (%s:line %i) Failed to create mach semaphore!", "kr == 0", "LocklessRingBuffer", 22);
  result = (semaphore_t *)_os_crash();
  __break(1u);
  return result;
}

void re::LocklessRingBuffer::~LocklessRingBuffer(re::LocklessRingBuffer *this)
{
  semaphore_t v2;

  *(_QWORD *)this = &off_24ED39120;
  v2 = *((_DWORD *)this + 6);
  if (v2)
  {
    semaphore_destroy(*MEMORY[0x24BDAEC58], v2);
    *((_DWORD *)this + 6) = 0;
  }
  *(_QWORD *)this = &off_24ED426B8;
  objc_destructInstance((char *)this + 8);
}

{
  re::LocklessRingBuffer::~LocklessRingBuffer(this);
  JUMPOUT(0x2276933B8);
}

uint64_t re::LocklessRingBuffer::initializeIntoBuffer(re::LocklessRingBuffer *this, void *a2)
{
  unsigned int v3;
  uint64_t v4;
  uint64_t result;
  uint64_t v6;
  uint64_t *v7;

  *((_QWORD *)this + 4) = a2;
  do
    v3 = __ldaxr((unsigned int *)&re::g_GlobalCounter);
  while (__stlxr(v3 + 1, (unsigned int *)&re::g_GlobalCounter));
  v4 = atomic_load((unsigned int *)&re::g_GlobalCounter);
  result = getpid();
  v6 = 0;
  v7 = (uint64_t *)*((_QWORD *)this + 4);
  *v7 = v4 | (result << 32);
  atomic_store(0, (unint64_t *)v7 + 3);
  atomic_store(0, (unint64_t *)(*((_QWORD *)this + 4) + 16));
  atomic_store(0, (unsigned int *)(*((_QWORD *)this + 4) + 8));
  do
  {
    atomic_store(0, (unsigned int *)(*((_QWORD *)this + 4) + v6 + 32));
    atomic_store(0, (unint64_t *)(*((_QWORD *)this + 4) + v6 + 40));
    v6 += 16;
  }
  while (v6 != 48);
  return result;
}

BOOL re::LocklessRingBuffer::waitForSemaphoreSignal@<W0>(uint64_t a1@<X0>, double a2@<X1>, char a3@<W2>, uint64_t a4@<X8>)
{
  unint64_t v5;
  mach_timespec_t v6;
  kern_return_t v7;

  if (a3)
  {
    LODWORD(a4) = vcvtmd_u64_f64(a2);
    v5 = a4 | ((unint64_t)(int)((a2 - floor(a2)) * 1000000000.0) << 32);
    do
    {
      v6 = (mach_timespec_t)v5;
      v7 = semaphore_timedwait(*(_DWORD *)(a1 + 24), v6);
    }
    while (v7 == 14);
  }
  else
  {
    do
      v7 = MEMORY[0x2276946A8](*(unsigned int *)(a1 + 24));
    while (v7 == 14);
  }
  return v7 == 0;
}

uint64_t re::LocklessRingBuffer::writerAcquireBuffer(uint64_t a1, uint64_t a2, char a3)
{
  unsigned int v3;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v20;
  unsigned int *v21;
  char v22;
  mach_timespec_t v23;
  unint64_t v24;
  unint64_t *v25;
  unint64_t v26;
  unint64_t *v27;
  unint64_t v28;
  int v29;

  v3 = atomic_load((unsigned int *)(*(_QWORD *)(a1 + 32) + 8));
  if (v3 != 1)
    return 0xFFFFFFFFLL;
  LODWORD(v7) = 0;
  v8 = 0;
  v9 = 0xFFFFFFFFLL;
  v10 = -1;
  do
  {
    if (!atomic_load((unsigned int *)(*(_QWORD *)(a1 + 32) + v8 + 32)))
    {
      v12 = atomic_load((unint64_t *)(*(_QWORD *)(a1 + 32) + v8 + 40));
      v9 = v12 >= v10 ? v9 : v7;
      if (v12 < v10)
        v10 = v12;
    }
    v8 += 16;
    v7 = (v7 + 1);
  }
  while (v8 != 48);
  while (1)
  {
    while ((_DWORD)v9 == -1)
    {
      if (re::LocklessRingBuffer::waitForSemaphoreSignal(a1, *(double *)&a2, a3, v7))
      {
        LODWORD(v7) = 0;
        v17 = 0;
        v9 = 0xFFFFFFFFLL;
        v18 = -1;
        do
        {
          if (!atomic_load((unsigned int *)(*(_QWORD *)(a1 + 32) + v17 + 32)))
          {
            v20 = atomic_load((unint64_t *)(*(_QWORD *)(a1 + 32) + v17 + 40));
            v9 = v20 >= v18 ? v9 : v7;
            if (v20 < v18)
              v18 = v20;
          }
          v17 += 16;
          v7 = (v7 + 1);
        }
        while (v17 != 48);
        if ((_DWORD)v9 != -1)
          continue;
      }
      return 0xFFFFFFFFLL;
    }
    v21 = (unsigned int *)(*(_QWORD *)(a1 + 32) + 16 * (int)v9 + 32);
    v7 = __ldaxr(v21);
    if ((_DWORD)v7)
    {
      __clrex();
    }
    else
    {
      v22 = 1;
      if (!__stlxr(1u, v21))
        goto LABEL_36;
    }
    v22 = 0;
LABEL_36:
    if ((v22 & 1) != 0)
      break;
    if ((_DWORD)v7)
    {
      LODWORD(v7) = 0;
      v13 = 0;
      v9 = 0xFFFFFFFFLL;
      v14 = -1;
      do
      {
        if (!atomic_load((unsigned int *)(*(_QWORD *)(a1 + 32) + v13 + 32)))
        {
          v16 = atomic_load((unint64_t *)(*(_QWORD *)(a1 + 32) + v13 + 40));
          v9 = v16 >= v14 ? v9 : v7;
          if (v16 < v14)
            v14 = v16;
        }
        v13 += 16;
        v7 = (v7 + 1);
      }
      while (v13 != 48);
    }
  }
  do
    v23 = 0;
  while (semaphore_timedwait(*(_DWORD *)(a1 + 24), v23) == 14);
  v24 = atomic_load((unint64_t *)(*(_QWORD *)(a1 + 32) + 24));
  atomic_store(v24 + 1, (unint64_t *)(*(_QWORD *)(a1 + 32) + 16 * (int)v9 + 40));
  v25 = (unint64_t *)(*(_QWORD *)(a1 + 32) + 24);
  v26 = __ldaxr(v25);
  if (v26 != v24)
  {
    __clrex();
LABEL_43:
    while (1)
    {
      atomic_store(v26 + 1, (unint64_t *)(*(_QWORD *)(a1 + 32) + 16 * (int)v9 + 40));
      v27 = (unint64_t *)(*(_QWORD *)(a1 + 32) + 24);
      v28 = __ldaxr(v27);
      if (v28 != v26)
        break;
      if (__stlxr(v26 + 1, v27))
        goto LABEL_47;
      v29 = 1;
LABEL_48:
      v26 = v28;
      if (v29)
        return v9;
    }
    __clrex();
LABEL_47:
    v29 = 0;
    goto LABEL_48;
  }
  if (__stlxr(v24 + 1, v25))
    goto LABEL_43;
  return v9;
}

uint64_t re::LocklessRingBuffer::writerReleaseBuffer(uint64_t this, uint64_t a2, int a3)
{
  unsigned int v3;
  unsigned int v4;
  unsigned int *v5;
  unsigned int v6;

  v3 = atomic_load((unsigned int *)(*(_QWORD *)(this + 32) + 16 * (int)a2 + 32));
  if (v3 == 1)
  {
    if (a3)
      v4 = 3;
    else
      v4 = 2;
    v5 = (unsigned int *)(*(_QWORD *)(this + 32) + 16 * (int)a2 + 32);
    while (1)
    {
      v6 = __ldaxr(v5);
      if (v6 != 1)
        break;
      if (!__stlxr(v4, v5))
        return this;
    }
    __clrex();
  }
  else
  {
    re::internal::assertLog((re::internal *)4, a2, "assertion failure: '%s' (%s:line %i) Trying to release a buffer that is not in writing state!", "currState == BufferState::kWriting", "writerReleaseBuffer", 215);
    this = _os_crash();
    __break(1u);
  }
  return this;
}

uint64_t re::LocklessRingBuffer::getLatestReadableBufferIndex(re::LocklessRingBuffer *this)
{
  unsigned int v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unsigned int v5;
  unint64_t v6;
  unsigned int v7;
  uint64_t v8;
  unint64_t v9;
  unsigned int v10;
  unint64_t v11;
  BOOL v12;

  v1 = 0;
  v2 = 0;
  v3 = 0;
  v4 = 0xFFFFFFFFLL;
  do
  {
    v5 = atomic_load((unsigned int *)(*((_QWORD *)this + 4) + v2 + 32));
    if (v5 == 4)
    {
      v6 = atomic_load((unint64_t *)(*((_QWORD *)this + 4) + v2 + 40));
      v4 = v6 <= v3 ? v4 : v1;
      if (v6 > v3)
        v3 = v6;
    }
    v2 += 16;
    ++v1;
  }
  while (v2 != 48);
  if (v4 >= 3)
  {
    v7 = 0;
    v8 = 0;
    v9 = 0;
    v4 = 0xFFFFFFFFLL;
    do
    {
      v10 = atomic_load((unsigned int *)(*((_QWORD *)this + 4) + v8 + 32));
      if ((v10 & 0xFFFFFFFE) == 2)
      {
        v11 = atomic_load((unint64_t *)(*((_QWORD *)this + 4) + v8 + 40));
        v12 = v11 >= v9;
        if (v11 > v9)
          v9 = v11;
        if (v12)
          v4 = v7;
        else
          v4 = v4;
      }
      v8 += 16;
      ++v7;
    }
    while (v8 != 48);
  }
  return v4;
}

uint64_t re::LocklessRingBuffer::readerAcquireBuffer(re::LocklessRingBuffer *this)
{
  re::LocklessRingBuffer *v1;
  unint64_t *v2;
  unsigned int v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unsigned int v8;
  unint64_t v9;
  unsigned int *v10;
  unsigned int v11;
  unsigned int v12;
  uint64_t v13;
  unint64_t v14;
  unsigned int v15;
  unint64_t v16;

  v1 = (re::LocklessRingBuffer *)atomic_load((unint64_t *)(*((_QWORD *)this + 4) + 16));
  if (!v1)
  {
    v2 = (unint64_t *)(*((_QWORD *)this + 4) + 16);
    while (!__ldaxr(v2))
    {
      if (!__stlxr((unint64_t)this, v2))
        goto LABEL_7;
    }
    __clrex();
    return 0xFFFFFFFFLL;
  }
  if (v1 != this)
    return 0xFFFFFFFFLL;
LABEL_7:
  v4 = 0;
  v5 = 0;
  v6 = 0;
  v7 = 0xFFFFFFFFLL;
  do
  {
    v8 = atomic_load((unsigned int *)(*((_QWORD *)this + 4) + v5 + 32));
    if (v8 == 2)
    {
      v9 = atomic_load((unint64_t *)(*((_QWORD *)this + 4) + v5 + 40));
      v7 = v9 <= v6 ? v7 : v4;
      if (v9 > v6)
        v6 = v9;
    }
    v5 += 16;
    ++v4;
  }
  while (v5 != 48);
  while ((_DWORD)v7 != -1)
  {
    v10 = (unsigned int *)(*((_QWORD *)this + 4) + 16 * (int)v7 + 32);
    v11 = __ldaxr(v10);
    if (v11 == 2)
    {
      if (!__stlxr(4u, v10))
        return v7;
    }
    else
    {
      __clrex();
    }
    if (v11 != 2)
    {
      v12 = 0;
      v13 = 0;
      v14 = 0;
      v7 = 0xFFFFFFFFLL;
      do
      {
        v15 = atomic_load((unsigned int *)(*((_QWORD *)this + 4) + v13 + 32));
        if (v15 == 2)
        {
          v16 = atomic_load((unint64_t *)(*((_QWORD *)this + 4) + v13 + 40));
          if (v16 <= v14)
            v7 = v7;
          else
            v7 = v12;
          if (v16 > v14)
            v14 = v16;
        }
        v13 += 16;
        ++v12;
      }
      while (v13 != 48);
    }
  }
  return v7;
}

uint64_t re::LocklessRingBuffer::readerAcquireAnyWrittenBuffer(re::LocklessRingBuffer *this)
{
  re::LocklessRingBuffer *v1;
  unint64_t *v2;
  uint64_t v4;
  uint64_t v5;
  unsigned int v6;
  unint64_t v7;
  uint64_t v8;
  unsigned int v9;
  unint64_t v10;
  unsigned int v11;
  unsigned int *v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unsigned int v16;
  unint64_t v17;

  v1 = (re::LocklessRingBuffer *)atomic_load((unint64_t *)(*((_QWORD *)this + 4) + 16));
  if (!v1)
  {
    v2 = (unint64_t *)(*((_QWORD *)this + 4) + 16);
    while (!__ldaxr(v2))
    {
      if (!__stlxr((unint64_t)this, v2))
        goto LABEL_7;
    }
    __clrex();
    return 0xFFFFFFFFLL;
  }
  if (v1 != this)
    return 0xFFFFFFFFLL;
LABEL_7:
  v4 = 0;
  v5 = 0;
  v6 = 0;
  v7 = 0;
  v8 = 0xFFFFFFFFLL;
  do
  {
    v9 = atomic_load((unsigned int *)(*((_QWORD *)this + 4) + v5 + 32));
    if ((v9 & 0xFFFFFFFE) == 2)
    {
      v10 = atomic_load((unint64_t *)(*((_QWORD *)this + 4) + v5 + 40));
      if (v10 >= v7)
      {
        v6 = v9;
        v8 = v4;
        v7 = v10;
      }
    }
    v5 += 16;
    v4 = (v4 + 1);
  }
  while (v5 != 48);
  while ((_DWORD)v8 != -1)
  {
    v11 = v6;
    if ((v6 & 0xFFFFFFFE) == 2)
    {
      v12 = (unsigned int *)(*((_QWORD *)this + 4) + 16 * (int)v8 + 32);
      v11 = __ldaxr(v12);
      if (v11 == v6)
      {
        if (!__stlxr(4u, v12))
          return v8;
      }
      else
      {
        __clrex();
      }
    }
    if (v11 - 4 <= 0xFFFFFFFD)
    {
      v13 = 0;
      v14 = 0;
      v15 = 0;
      v8 = 0xFFFFFFFFLL;
      do
      {
        v16 = atomic_load((unsigned int *)(*((_QWORD *)this + 4) + v14 + 32));
        if ((v16 & 0xFFFFFFFE) == 2)
        {
          v17 = atomic_load((unint64_t *)(*((_QWORD *)this + 4) + v14 + 40));
          if (v17 >= v15)
          {
            v6 = v16;
            v8 = v13;
            v15 = v17;
          }
        }
        v14 += 16;
        v13 = (v13 + 1);
      }
      while (v14 != 48);
    }
  }
  return v8;
}

unint64_t re::LocklessRingBuffer::readerReleaseBuffer(unint64_t this, uint64_t a2)
{
  unint64_t v2;
  unint64_t *v3;
  unsigned int v5;
  unsigned int *v6;
  unsigned int v7;

  v2 = atomic_load((unint64_t *)(*(_QWORD *)(this + 32) + 16));
  if (v2)
  {
    if (v2 != this)
      return this;
LABEL_7:
    v5 = atomic_load((unsigned int *)(*(_QWORD *)(this + 32) + 16 * (int)a2 + 32));
    if (v5 != 4)
    {
      re::internal::assertLog((re::internal *)4, a2, "assertion failure: '%s' (%s:line %i) Trying to free a buffer that is not in reading state!", "currState == BufferState::kReading", "readerReleaseBuffer", 389);
      _os_crash();
      __break(1u);
LABEL_15:
      JUMPOUT(0x227694690);
    }
    v6 = (unsigned int *)(*(_QWORD *)(this + 32) + 16 * (int)a2 + 32);
    while (1)
    {
      v7 = __ldaxr(v6);
      if (v7 != 4)
        break;
      if (!__stlxr(0, v6))
        goto LABEL_15;
    }
  }
  else
  {
    v3 = (unint64_t *)(*(_QWORD *)(this + 32) + 16);
    while (!__ldaxr(v3))
    {
      if (!__stlxr(this, v3))
        goto LABEL_7;
    }
  }
  __clrex();
  return this;
}

unint64_t re::LocklessRingBuffer::readerReleaseAnyWrittenBuffer(unint64_t this)
{
  unint64_t v1;
  unint64_t v2;
  unint64_t *v3;
  uint64_t i;
  unsigned int v6;
  unsigned int *v7;
  unsigned int v8;

  v1 = this;
  v2 = atomic_load((unint64_t *)(*(_QWORD *)(this + 32) + 16));
  if (v2)
  {
    if (v2 == this)
    {
LABEL_7:
      for (i = 0; i != 3; ++i)
      {
        v6 = atomic_load((unsigned int *)(*(_QWORD *)(v1 + 32) + 16 * i + 32));
        if (v6 == 2)
        {
          v7 = (unsigned int *)(*(_QWORD *)(v1 + 32) + 16 * i + 32);
          while (1)
          {
            v8 = __ldaxr(v7);
            if (v8 != 2)
              break;
            if (!__stlxr(0, v7))
            {
              this = MEMORY[0x227694690](*(unsigned int *)(v1 + 24));
              goto LABEL_14;
            }
          }
          __clrex();
        }
LABEL_14:
        ;
      }
    }
  }
  else
  {
    v3 = (unint64_t *)(*(_QWORD *)(this + 32) + 16);
    while (!__ldaxr(v3))
    {
      if (!__stlxr(this, v3))
        goto LABEL_7;
    }
    __clrex();
  }
  return this;
}

uint64_t re::TypeAvailabilityUtilities::checkAssetIsAvailableForMajorVersion(re::SceneAsset *a1, uint64_t a2, int a3)
{
  uint64_t v5;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  _BOOL4 v12;
  _BOOL4 v13;
  uint64_t v14;
  __int128 v16;
  __int16 v17;

  v5 = *((_QWORD *)a1 + 1);
  if (!v5)
  {
    re::SceneAsset::assetType(a1);
    goto LABEL_8;
  }
  v7 = *(uint64_t **)(v5 + 264);
  if (v7 != re::SceneAsset::assetType(a1))
  {
LABEL_8:
    v14 = re::internal::AssetTypeRegistry::assetLoaderWithAssetType(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)a1 + 1) + 24) + 1104), *(_QWORD *)(*((_QWORD *)a1 + 1) + 264));
    v16 = *(_OWORD *)((*(uint64_t (**)(uint64_t))(*(_QWORD *)v14 + 112))(v14) + 32);
  }
  v8 = re::AssetHandle::asset<re::SceneAsset>(a1);
  v17 = 0;
  v9 = *(_QWORD *)(v8 + 16);
  if (v9)
  {
    v10 = *(_QWORD **)(v8 + 32);
    v11 = 112 * v9;
    do
    {
      re::TypeAvailabilityUtilities::checkSceneEntityComponentsAreAvailableForMajorVersion(v10, a2, (_BYTE *)&v17 + 1, &v17);
      v10 += 14;
      v11 -= 112;
    }
    while (v11);
    v12 = (_BYTE)v17 == 0;
    v13 = HIBYTE(v17) != 0;
  }
  else
  {
    v13 = 0;
    v12 = 1;
  }
  return v12 & (v13 & a3 ^ 1u);
}

uint64_t re::AssetHandle::asset<re::SceneAsset>(re::SceneAsset *a1)
{
  uint64_t *v2;
  uint64_t v3;
  NSObject *v4;
  _QWORD *v6;
  char *v7;
  int v8;
  char *v9;
  uint64_t v10;

  v10 = *MEMORY[0x24BDAC8D0];
  v2 = re::SceneAsset::assetType(a1);
  v3 = re::AssetHandle::assetWithType(a1, (const re::AssetType *)v2, 0);
  if (!v3)
  {
    v4 = *re::assetsLogObjects(0);
    if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
    {
      v6 = re::AssetHandle::assetInfo(a1);
      if ((v6[17] & 1) != 0)
        v7 = (char *)v6[18];
      else
        v7 = (char *)v6 + 137;
      v8 = 136315138;
      v9 = v7;
      _os_log_error_impl(&dword_224FE9000, v4, OS_LOG_TYPE_ERROR, "Invalid asset: '%s'", (uint8_t *)&v8, 0xCu);
    }
  }
  return v3;
}

void re::TypeAvailabilityUtilities::checkSceneEntityComponentsAreAvailableForMajorVersion(_QWORD *a1, uint64_t a2, _BYTE *a3, _BYTE *a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  re *v15;
  int v16;
  NSObject *v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  _anonymous_namespace_ *v22;
  re *v23;
  NSObject *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char v28;
  __int128 v29;
  _BYTE buf[22];
  uint64_t v31;

  v31 = *MEMORY[0x24BDAC8D0];
  v8 = a1[6];
  if (v8)
  {
    v9 = a1[8];
    v10 = v9 + 24 * v8;
    do
    {
      v11 = *(_QWORD *)(v9 + 8);
      if (v11)
      {
        v12 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v11 + 40))(v11);
        (*(void (**)(_BYTE *__return_ptr))(*(_QWORD *)v12 + 56))(buf);
        v29 = *(_OWORD *)buf;
        {
          *a3 = 1;
          if (a2 <= 5)
          {
            v13 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v9 + 8) + 40))(*(_QWORD *)(v9 + 8));
            re::IntrospectionSharedLock::IntrospectionSharedLock((re::IntrospectionSharedLock *)&v28);
            v14 = (_QWORD *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v13 + 48))(v13);
            v15 = (re *)(*(uint64_t (**)(_QWORD *))(*v14 + 32))(v14);
            v16 = (int)v15;
            if ((int)v15 < 2)
              goto LABEL_17;
            v17 = *re::assetsLogObjects(v15);
            if (os_log_type_enabled(v17, OS_LOG_TYPE_DEFAULT))
            {
              *(_DWORD *)buf = 136315138;
              *(_QWORD *)&buf[4] = v18;
              _os_log_impl(&dword_224FE9000, v17, OS_LOG_TYPE_DEFAULT, "%s", buf, 0xCu);
            }
            if (v16)
            {
              v19 = 0;
              while (1)
              {
                if (v19)
                {
                  v20 = *(_DWORD *)((*(uint64_t (**)(_QWORD *, uint64_t))(*v14 + 40))(v14, v19) + 16);
                  if (v20 == 10 || v20 == 6)
                    break;
                }
                if (v16 == ++v19)
                  goto LABEL_17;
              }
              v23 = re::StringID::StringID((re::StringID *)&v29, (const StringID *)v22);
              v24 = *re::assetsLogObjects(v23);
              if (os_log_type_enabled(v24, OS_LOG_TYPE_ERROR))
              {
                *(_DWORD *)buf = 136315394;
                *(_QWORD *)&buf[4] = *((_QWORD *)&v29 + 1);
                *(_WORD *)&buf[12] = 2048;
                *(_QWORD *)&buf[14] = 6;
                _os_log_error_impl(&dword_224FE9000, v24, OS_LOG_TYPE_ERROR, "\"%s\" can't be written for any targeted major versions prior to %lli", buf, 0x16u);
              }
              re::StringID::destroyString((re::StringID *)&v29);
              re::IntrospectionSharedLock::~IntrospectionSharedLock((re::IntrospectionSharedLock *)&v28);
              *a4 = 1;
            }
            else
            {
LABEL_17:
              re::IntrospectionSharedLock::~IntrospectionSharedLock((re::IntrospectionSharedLock *)&v28);
            }
          }
        }
      }
      v9 += 24;
    }
    while (v9 != v10);
  }
  v25 = a1[11];
  if (v25)
  {
    v26 = a1[13];
    v27 = 112 * v25;
    do
    {
      re::TypeAvailabilityUtilities::checkSceneEntityComponentsAreAvailableForMajorVersion(v26, a2, a3, a4);
      v26 += 112;
      v27 -= 112;
    }
    while (v27);
  }
}

uint64_t `anonymous namespace'::checkTypeIsAvailableForMajorVersion(re **a1, uint64_t a2)
{
  unsigned int v4;
  uint64_t *v5;
  uint64_t v6;
  NSObject *v7;
  uint64_t v8;
  _anonymous_namespace_ *v9;
  re *v10;
  NSObject *v11;
  _anonymous_namespace_ *v12;
  __n128 DeploymentTargetFromVersion;
  __n128 v14;
  uint64_t v15;
  const char *v16;
  __n128 v18;
  uint64_t v19;
  const char *v20;
  uint64_t v21;
  _BYTE *v22;
  re *v23;
  NSObject *v24;
  _BYTE *v25;
  uint64_t v26;
  _BYTE v27[16];
  uint64_t v28;
  _BYTE v29[8];
  uint64_t v30;
  char v31;
  uint8_t v32[4];
  _BYTE *v33;
  _BYTE buf[12];
  _BYTE *v35;
  _BYTE v36[24];
  uint64_t v37;
  uint64_t v38;

  v38 = *MEMORY[0x24BDAC8D0];
  re::IntrospectionSharedLock::IntrospectionSharedLock((re::IntrospectionSharedLock *)&v31);
  if (!v29[0])
  {
    v10 = re::StringID::StringID((re::StringID *)v36, (const StringID *)v9);
    v11 = *re::assetsLogObjects(v10);
    if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315138;
      *(_QWORD *)&buf[4] = *(_QWORD *)&v36[8];
      _os_log_error_impl(&dword_224FE9000, v11, OS_LOG_TYPE_ERROR, "Didn't perform availability check because introspection info for type \"%s\" isn't available.", buf, 0xCu);
    }
    re::StringID::destroyString((re::StringID *)v36);
    goto LABEL_18;
  }
  re::TypeInfo::TypeInfo((uint64_t)v27, (uint64_t)&v30);
  v4 = *(_DWORD *)(v28 + 64);
  v5 = re::TypeInfo::name((re::TypeInfo *)v27);
  v6 = v5[1];
  if (v4 < 0xFFFFFFFE)
  {
    if (v4 > re::TypeAvailabilityUtilities::convertToRealityKitRelease(a2))
    {
      v12 = (_anonymous_namespace_ *)re::TypeAvailabilityUtilities::convertToMajorVersion(v4);
      *(_QWORD *)&v36[16] = 0;
      v37 = 0;
      *(_QWORD *)&v36[8] = 0;
      re::DynamicString::setCapacity(v36, 0);
      DeploymentTargetFromVersion = re::TypeAvailabilityUtilities::getDeploymentTargetFromVersion((_anonymous_namespace_ *)"macOS", (unint64_t)v12);
      if (DeploymentTargetFromVersion.n128_i32[0] <= 0)
      {
        re::TypeAvailabilityUtilities::getDeploymentTargetFromVersion((_anonymous_namespace_ *)"iOS", (unint64_t)v12);
      }
      else
      {
        re::DynamicString::appendf((re::DynamicString *)v36, "macOS %i.%i.%i", DeploymentTargetFromVersion.n128_u32[0], DeploymentTargetFromVersion.n128_u32[1], DeploymentTargetFromVersion.n128_u32[2]);
        v14 = re::TypeAvailabilityUtilities::getDeploymentTargetFromVersion((_anonymous_namespace_ *)"iOS", (unint64_t)v12);
        if ((v36[8] & 1) != 0)
          v15 = *(_QWORD *)&v36[8] >> 1;
        else
          v15 = v36[8] >> 1;
        if (v15)
          v16 = ", ";
        else
          v16 = "";
        re::DynamicString::appendf((re::DynamicString *)v36, "%siOS %i.%i.%i", v16, v14.n128_u32[0], v14.n128_u32[1], v14.n128_u32[2]);
      }
      v18 = re::TypeAvailabilityUtilities::getDeploymentTargetFromVersion((_anonymous_namespace_ *)"visionOS", (unint64_t)v12);
      if (v18.n128_i32[0] >= 1)
      {
        if ((v36[8] & 1) != 0)
          v19 = *(_QWORD *)&v36[8] >> 1;
        else
          v19 = v36[8] >> 1;
        if (v19)
          v20 = ", ";
        else
          v20 = "";
        re::DynamicString::appendf((re::DynamicString *)v36, "%svisionOS %i.%i.%i", v20, v18.n128_u32[0], v18.n128_u32[1], v18.n128_u32[2]);
      }
      v21 = *(_QWORD *)&v36[8] >> 1;
      if ((v36[8] & 1) == 0)
        v21 = v36[8] >> 1;
      if (v21)
      {
        if ((v36[8] & 1) != 0)
          v22 = *(_BYTE **)&v36[16];
        else
          v22 = &v36[9];
        v23 = (re *)re::DynamicString::format((re::DynamicString *)"\"%s\" is only available for %s or later.", (re::DynamicString *)buf, v6, v22);
      }
      else
      {
        v23 = (re *)re::DynamicString::format((re::DynamicString *)"\"%s\" is not available for any platform.", (re::DynamicString *)buf, v6, v26);
      }
      v24 = *re::assetsLogObjects(v23);
      if (os_log_type_enabled(v24, OS_LOG_TYPE_ERROR))
      {
        if ((buf[8] & 1) != 0)
          v25 = v35;
        else
          v25 = &buf[9];
        *(_DWORD *)v32 = 136315138;
        v33 = v25;
        _os_log_error_impl(&dword_224FE9000, v24, OS_LOG_TYPE_ERROR, "%s", v32, 0xCu);
      }
      if (*(_QWORD *)buf && (buf[8] & 1) != 0)
        (*(void (**)(void))(**(_QWORD **)buf + 40))();
      if (*(_QWORD *)v36 && (v36[8] & 1) != 0)
        (*(void (**)(void))(**(_QWORD **)v36 + 40))();
      goto LABEL_5;
    }
LABEL_18:
    v8 = 1;
    goto LABEL_19;
  }
  v7 = *re::assetsLogObjects((re *)v5);
  if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)v36 = 136315394;
    *(_QWORD *)&v36[4] = v6;
    *(_WORD *)&v36[12] = 1024;
    *(_DWORD *)&v36[14] = v4;
    _os_log_error_impl(&dword_224FE9000, v7, OS_LOG_TYPE_ERROR, "\"%s\" has unsupported \"introducedInRelease\" value of %i", v36, 0x12u);
  }
LABEL_5:
  v8 = 0;
LABEL_19:
  re::IntrospectionSharedLock::~IntrospectionSharedLock((re::IntrospectionSharedLock *)&v31);
  return v8;
}

void re::TypeAvailabilityUtilities::isAssetAllowedInRealityFile(re::TypeAvailabilityUtilities *this@<X0>, uint64_t a2@<X8>)
{
  char v4;
  uint64_t v5;
  uint64_t v6;

  if (re::ShaderLibraryAsset::assetType(this) == (uint64_t *)this)
  {
    re::WrappedError::make((re::WrappedError *)CFSTR("RERealityFileWriterErrorDomain"), (const __CFString *)0x13, (uint64_t)"ShaderLibraryAsset is not permitted in reality files.", &v6);
    v5 = v6;
    v6 = 0;
    *(_QWORD *)(a2 + 8) = v5;

    v4 = 0;
  }
  else
  {
    v4 = 1;
  }
  *(_BYTE *)a2 = v4;
}

uint64_t `anonymous namespace'::getTypeInitialRelease(re **a1)
{
  uint64_t v2;
  _BYTE v4[24];
  uint64_t v5;
  char v6;

  re::IntrospectionSharedLock::IntrospectionSharedLock((re::IntrospectionSharedLock *)&v6);
  if (!v4[0] || (v2 = *(unsigned int *)(v5 + 64), v2 >= 0xFFFFFFFE))
    v2 = 0;
  re::IntrospectionSharedLock::~IntrospectionSharedLock((re::IntrospectionSharedLock *)&v6);
  return v2;
}

uint64_t re::TypeAvailabilityUtilities::getAssetInitialRelease(re::TypeAvailabilityUtilities *this, const re::AssetHandle *a2)
{
  uint64_t v2;
  __int128 v4;

  v2 = re::internal::AssetTypeRegistry::assetLoaderWithAssetType(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 1) + 24) + 1104), *(_QWORD *)(*((_QWORD *)this + 1) + 264));
  v4 = *(_OWORD *)((*(uint64_t (**)(uint64_t))(*(_QWORD *)v2 + 112))(v2) + 32);
}

uint64_t re::TypeAvailabilityUtilities::convertToRealityKitRelease(uint64_t result)
{
  if ((unint64_t)(result - 1) < 0xC)
    return result;
  else
    return 0xFFFFFFFFLL;
}

uint64_t re::TypeAvailabilityUtilities::convertToMajorVersion(int a1)
{
  uint64_t v1;

  v1 = (a1 - 1);
  if (v1 < 0xC)
    return v1 + 1;
  else
    return 0;
}

uint64_t re::TypeAvailabilityUtilities::getVersionFromDeploymentTarget(_anonymous_namespace_ *a1, __n128 a2)
{
  _anonymous_namespace_ *v3;
  const char *v4;
  uint64_t v5;
  const char *v6;
  int v7;
  _anonymous_namespace_ *v8;
  const char *v9;
  uint64_t v10;
  const char *v11;
  int v12;
  _anonymous_namespace_ *v13;
  const char *v14;
  char v15;
  const char *v16;
  _anonymous_namespace_ *v17;
  const char *v18;
  uint64_t v19;
  const char *v20;
  int v21;
  _anonymous_namespace_ *v22;
  const char *v23;
  uint64_t v24;
  const char *v25;
  int v26;
  uint64_t v27;
  BOOL v28;
  uint64_t v29;
  NSObject *v30;
  uint64_t v33;
  char v34;
  _BYTE v35[23];
  uint64_t v36;
  char v37;
  _BYTE v38[7];
  const char *v39;
  _BYTE buf[12];
  __int16 v41;
  _BYTE v42[10];
  __int16 v43;
  unsigned __int32 v44;
  uint64_t v45;

  v45 = *MEMORY[0x24BDAC8D0];
  v3 = (_anonymous_namespace_ *)re::DynamicString::toLowerCase((uint64_t)&v36);
  if ((v37 & 1) != 0)
    v4 = v39;
  else
    v4 = v38;
  v5 = buf[8] & 1;
  if ((buf[8] & 1) != 0)
    v6 = *(const char **)&v42[2];
  else
    v6 = &buf[9];
  v7 = strcmp(v4, v6);
  v8 = *(_anonymous_namespace_ **)buf;
  if (*(_QWORD *)buf && v5)
    v8 = (_anonymous_namespace_ *)(*(uint64_t (**)(void))(**(_QWORD **)buf + 40))();
  if (v7)
  {
LABEL_11:
    if ((v37 & 1) != 0)
      v9 = v39;
    else
      v9 = v38;
    v10 = buf[8] & 1;
    if ((buf[8] & 1) != 0)
      v11 = *(const char **)&v42[2];
    else
      v11 = &buf[9];
    v12 = strcmp(v9, v11);
    v13 = *(_anonymous_namespace_ **)buf;
    if (*(_QWORD *)buf && v10)
      v13 = (_anonymous_namespace_ *)(*(uint64_t (**)(void))(**(_QWORD **)buf + 40))();
    if (!v12)
    {
      v27 = 12;
      switch(a2.n128_u32[0])
      {
        case 0xDu:
          v28 = (signed __int32)a2.n128_u32[1] <= 3;
          goto LABEL_57;
        case 0xEu:
          v28 = (signed __int32)a2.n128_u32[1] <= 4;
          goto LABEL_79;
        case 0xFu:
          v28 = (signed __int32)a2.n128_u32[1] <= 3;
          goto LABEL_81;
        case 0x10u:
          v28 = (signed __int32)a2.n128_u32[1] <= 3;
          goto LABEL_83;
        case 0x11u:
          goto LABEL_68;
        case 0x12u:
          goto LABEL_87;
        default:
          if (a2.n128_i32[0] > 18)
            goto LABEL_77;
          goto LABEL_21;
      }
      goto LABEL_87;
    }
LABEL_21:
    if ((v37 & 1) != 0)
      v14 = v39;
    else
      v14 = v38;
    v15 = buf[8];
    if ((buf[8] & 1) != 0)
      v16 = *(const char **)&v42[2];
    else
      v16 = &buf[9];
    v17 = (_anonymous_namespace_ *)strcmp(v14, v16);
    if ((_DWORD)v17)
    {
      if ((v37 & 1) != 0)
        v18 = v39;
      else
        v18 = v38;
      v19 = v34 & 1;
      if ((v34 & 1) != 0)
        v20 = *(const char **)&v35[7];
      else
        v20 = v35;
      v21 = strcmp(v18, v20);
      if (v33 && v19)
        (*(void (**)(void))(*(_QWORD *)v33 + 40))();
      v22 = *(_anonymous_namespace_ **)buf;
      if (*(_QWORD *)buf && (buf[8] & 1) != 0)
        v22 = (_anonymous_namespace_ *)(*(uint64_t (**)(void))(**(_QWORD **)buf + 40))();
      if (v21)
      {
        if ((v37 & 1) != 0)
          v23 = v39;
        else
          v23 = v38;
        v24 = buf[8] & 1;
        if ((buf[8] & 1) != 0)
          v25 = *(const char **)&v42[2];
        else
          v25 = &buf[9];
        v26 = strcmp(v23, v25);
        v22 = *(_anonymous_namespace_ **)buf;
        if (*(_QWORD *)buf && v24)
          v22 = (_anonymous_namespace_ *)(*(uint64_t (**)(void))(**(_QWORD **)buf + 40))();
        if (v26)
          goto LABEL_65;
      }
    }
    else
    {
      v22 = *(_anonymous_namespace_ **)buf;
      if (*(_QWORD *)buf && (v15 & 1) != 0)
        v22 = (_anonymous_namespace_ *)(*(uint64_t (**)(void))(**(_QWORD **)buf + 40))();
    }
    if (a2.n128_u32[0] == 2)
      goto LABEL_77;
    if (a2.n128_u32[0] == 1)
    {
      v28 = (signed __int32)a2.n128_u32[1] <= 0;
      v29 = 10;
LABEL_84:
      if (v28)
        v27 = v29;
      else
        v27 = v29 + 1;
      goto LABEL_87;
    }
    if (a2.n128_i32[0] > 2)
    {
LABEL_77:
      v27 = 12;
      goto LABEL_87;
    }
LABEL_65:
    v30 = *re::assetsLogObjects(v22);
    if (os_log_type_enabled(v30, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315906;
      *(_QWORD *)&buf[4] = a1;
      v41 = 1024;
      *(_DWORD *)v42 = a2.n128_u32[0];
      *(_WORD *)&v42[4] = 1024;
      *(_DWORD *)&v42[6] = a2.n128_u32[1];
      v43 = 1024;
      v44 = a2.n128_u32[2];
      _os_log_error_impl(&dword_224FE9000, v30, OS_LOG_TYPE_ERROR, "Provided platform or version %s-%i.%i.%i is not valid or unsupported.", buf, 0x1Eu);
    }
    v27 = 0;
    goto LABEL_87;
  }
  v27 = 12;
  switch(a2.n128_u32[0])
  {
    case 0xAu:
      if (a2.n128_u32[1] == 15)
      {
        v28 = (signed __int32)a2.n128_u32[2] <= 3;
LABEL_57:
        v29 = 1;
        goto LABEL_84;
      }
      if (a2.n128_i32[1] <= 15)
        goto LABEL_11;
      v27 = 2;
      break;
    case 0xBu:
      v28 = (signed __int32)a2.n128_u32[1] <= 2;
LABEL_79:
      v29 = 3;
      goto LABEL_84;
    case 0xCu:
      v28 = (signed __int32)a2.n128_u32[1] <= 2;
LABEL_81:
      v29 = 5;
      goto LABEL_84;
    case 0xDu:
      v28 = (signed __int32)a2.n128_u32[1] <= 2;
LABEL_83:
      v29 = 7;
      goto LABEL_84;
    case 0xEu:
LABEL_68:
      if (a2.n128_i32[1] <= 3)
        v27 = 9;
      else
        v27 = 11;
      break;
    case 0xFu:
      break;
    default:
      if (a2.n128_i32[0] > 15)
        goto LABEL_77;
      goto LABEL_11;
  }
LABEL_87:
  if (v36 && (v37 & 1) != 0)
    (*(void (**)(void))(*(_QWORD *)v36 + 40))();
  return v27;
}

__n128 re::TypeAvailabilityUtilities::getDeploymentTargetFromVersion(_anonymous_namespace_ *a1, unint64_t a2)
{
  re::DynamicString *v4;
  _anonymous_namespace_ *v5;
  const char *v6;
  uint64_t v7;
  const char *v8;
  int v9;
  _anonymous_namespace_ *v10;
  const char *v11;
  uint64_t v12;
  const char *v13;
  int v14;
  _anonymous_namespace_ *v15;
  const char *v16;
  uint8_t v17;
  const char *v18;
  _anonymous_namespace_ *v19;
  const char *v20;
  uint64_t v21;
  const char *v22;
  int v23;
  _anonymous_namespace_ *v24;
  const char *v25;
  uint64_t v26;
  const char *v27;
  int v28;
  re *v29;
  NSObject *v30;
  uint64_t *v31;
  __n128 v33;
  _OWORD v34[2];
  int v35;
  uint64_t v36;
  uint64_t v37;
  char v38;
  _BYTE v39[23];
  _OWORD v40[2];
  int v41;
  uint64_t v42;
  _OWORD v43[2];
  int v44;
  uint64_t v45;
  uint64_t v46;
  char v47;
  _BYTE v48[7];
  const char *v49;
  uint8_t buf[16];
  const char *v51;
  uint64_t v52;

  v52 = *MEMORY[0x24BDAC8D0];
  v5 = (_anonymous_namespace_ *)re::DynamicString::toLowerCase((uint64_t)v4);
  if ((v47 & 1) != 0)
    v6 = v49;
  else
    v6 = v48;
  v7 = buf[8] & 1;
  if ((buf[8] & 1) != 0)
    v8 = v51;
  else
    v8 = (const char *)&buf[9];
  v9 = strcmp(v6, v8);
  v10 = *(_anonymous_namespace_ **)buf;
  if (*(_QWORD *)buf && v7)
    v10 = (_anonymous_namespace_ *)(*(uint64_t (**)(void))(**(_QWORD **)buf + 40))();
  if (!v9)
  {
    v44 = 0;
    memset(v43, 0, sizeof(v43));
    v45 = 0x7FFFFFFFLL;
    v37 = 1;
    *(_OWORD *)buf = xmmword_2260FDE00;
    _ZN2re9HashTableI25RERealityFileMajorVersionDv3_iNS_4HashIS1_EENS_7EqualToIS1_EELb1ELb0EE6addNewERKS1_OS2_((uint64_t)v43, &v37, buf);
    v37 = 2;
    *(_OWORD *)buf = xmmword_2260FDE10;
    _ZN2re9HashTableI25RERealityFileMajorVersionDv3_iNS_4HashIS1_EENS_7EqualToIS1_EELb1ELb0EE6addNewERKS1_OS2_((uint64_t)v43, &v37, buf);
    v37 = 3;
    *(_OWORD *)buf = xmmword_2260FDE20;
    _ZN2re9HashTableI25RERealityFileMajorVersionDv3_iNS_4HashIS1_EENS_7EqualToIS1_EELb1ELb0EE6addNewERKS1_OS2_((uint64_t)v43, &v37, buf);
    v37 = 4;
    *(_OWORD *)buf = xmmword_2260FDE30;
    _ZN2re9HashTableI25RERealityFileMajorVersionDv3_iNS_4HashIS1_EENS_7EqualToIS1_EELb1ELb0EE6addNewERKS1_OS2_((uint64_t)v43, &v37, buf);
    v37 = 5;
    *(_OWORD *)buf = xmmword_2260FDE40;
    _ZN2re9HashTableI25RERealityFileMajorVersionDv3_iNS_4HashIS1_EENS_7EqualToIS1_EELb1ELb0EE6addNewERKS1_OS2_((uint64_t)v43, &v37, buf);
    v37 = 6;
    *(_OWORD *)buf = xmmword_2260FDE50;
    _ZN2re9HashTableI25RERealityFileMajorVersionDv3_iNS_4HashIS1_EENS_7EqualToIS1_EELb1ELb0EE6addNewERKS1_OS2_((uint64_t)v43, &v37, buf);
    v37 = 7;
    *(_OWORD *)buf = xmmword_2260FDD50;
    _ZN2re9HashTableI25RERealityFileMajorVersionDv3_iNS_4HashIS1_EENS_7EqualToIS1_EELb1ELb0EE6addNewERKS1_OS2_((uint64_t)v43, &v37, buf);
    v37 = 8;
    *(_OWORD *)buf = xmmword_2260FDE60;
    _ZN2re9HashTableI25RERealityFileMajorVersionDv3_iNS_4HashIS1_EENS_7EqualToIS1_EELb1ELb0EE6addNewERKS1_OS2_((uint64_t)v43, &v37, buf);
    v37 = 9;
    *(_OWORD *)buf = xmmword_2260FDD70;
    _ZN2re9HashTableI25RERealityFileMajorVersionDv3_iNS_4HashIS1_EENS_7EqualToIS1_EELb1ELb0EE6addNewERKS1_OS2_((uint64_t)v43, &v37, buf);
    v37 = 11;
    *(_OWORD *)buf = xmmword_2260FDE70;
    _ZN2re9HashTableI25RERealityFileMajorVersionDv3_iNS_4HashIS1_EENS_7EqualToIS1_EELb1ELb0EE6addNewERKS1_OS2_((uint64_t)v43, &v37, buf);
    v37 = 12;
    *(_OWORD *)buf = xmmword_2260FDD90;
    _ZN2re9HashTableI25RERealityFileMajorVersionDv3_iNS_4HashIS1_EENS_7EqualToIS1_EELb1ELb0EE6addNewERKS1_OS2_((uint64_t)v43, &v37, buf);
    v31 = (uint64_t *)v43;
LABEL_59:
    _ZN2re9HashTableI25RERealityFileMajorVersionDv3_iNS_4HashIS1_EENS_7EqualToIS1_EELb1ELb0EE6deinitEv(v31);
    goto LABEL_60;
  }
  if ((v47 & 1) != 0)
    v11 = v49;
  else
    v11 = v48;
  v12 = buf[8] & 1;
  if ((buf[8] & 1) != 0)
    v13 = v51;
  else
    v13 = (const char *)&buf[9];
  v14 = strcmp(v11, v13);
  v15 = *(_anonymous_namespace_ **)buf;
  if (*(_QWORD *)buf && v12)
    v15 = (_anonymous_namespace_ *)(*(uint64_t (**)(void))(**(_QWORD **)buf + 40))();
  if (!v14)
  {
    v41 = 0;
    memset(v40, 0, sizeof(v40));
    v42 = 0x7FFFFFFFLL;
    v37 = 1;
    *(_OWORD *)buf = xmmword_2260FDD50;
    _ZN2re9HashTableI25RERealityFileMajorVersionDv3_iNS_4HashIS1_EENS_7EqualToIS1_EELb1ELb0EE6addNewERKS1_OS2_((uint64_t)v40, &v37, buf);
    v37 = 2;
    *(_OWORD *)buf = xmmword_2260FDD60;
    _ZN2re9HashTableI25RERealityFileMajorVersionDv3_iNS_4HashIS1_EENS_7EqualToIS1_EELb1ELb0EE6addNewERKS1_OS2_((uint64_t)v40, &v37, buf);
    v37 = 3;
    *(_OWORD *)buf = xmmword_2260FDD70;
    _ZN2re9HashTableI25RERealityFileMajorVersionDv3_iNS_4HashIS1_EENS_7EqualToIS1_EELb1ELb0EE6addNewERKS1_OS2_((uint64_t)v40, &v37, buf);
    v37 = 4;
    *(_OWORD *)buf = xmmword_2260FDD80;
    _ZN2re9HashTableI25RERealityFileMajorVersionDv3_iNS_4HashIS1_EENS_7EqualToIS1_EELb1ELb0EE6addNewERKS1_OS2_((uint64_t)v40, &v37, buf);
    v37 = 5;
    *(_OWORD *)buf = xmmword_2260FDD90;
    _ZN2re9HashTableI25RERealityFileMajorVersionDv3_iNS_4HashIS1_EENS_7EqualToIS1_EELb1ELb0EE6addNewERKS1_OS2_((uint64_t)v40, &v37, buf);
    v37 = 6;
    *(_OWORD *)buf = xmmword_2260FDDA0;
    _ZN2re9HashTableI25RERealityFileMajorVersionDv3_iNS_4HashIS1_EENS_7EqualToIS1_EELb1ELb0EE6addNewERKS1_OS2_((uint64_t)v40, &v37, buf);
    v37 = 7;
    *(_OWORD *)buf = xmmword_2260FDDB0;
    _ZN2re9HashTableI25RERealityFileMajorVersionDv3_iNS_4HashIS1_EENS_7EqualToIS1_EELb1ELb0EE6addNewERKS1_OS2_((uint64_t)v40, &v37, buf);
    v37 = 8;
    *(_OWORD *)buf = xmmword_2260FDDC0;
    _ZN2re9HashTableI25RERealityFileMajorVersionDv3_iNS_4HashIS1_EENS_7EqualToIS1_EELb1ELb0EE6addNewERKS1_OS2_((uint64_t)v40, &v37, buf);
    v37 = 9;
    *(_OWORD *)buf = xmmword_2260FDDD0;
    _ZN2re9HashTableI25RERealityFileMajorVersionDv3_iNS_4HashIS1_EENS_7EqualToIS1_EELb1ELb0EE6addNewERKS1_OS2_((uint64_t)v40, &v37, buf);
    v37 = 11;
    *(_OWORD *)buf = xmmword_2260FDDE0;
    _ZN2re9HashTableI25RERealityFileMajorVersionDv3_iNS_4HashIS1_EENS_7EqualToIS1_EELb1ELb0EE6addNewERKS1_OS2_((uint64_t)v40, &v37, buf);
    v37 = 12;
    *(_OWORD *)buf = xmmword_2260FDDF0;
    _ZN2re9HashTableI25RERealityFileMajorVersionDv3_iNS_4HashIS1_EENS_7EqualToIS1_EELb1ELb0EE6addNewERKS1_OS2_((uint64_t)v40, &v37, buf);
    v31 = (uint64_t *)v40;
    goto LABEL_59;
  }
  if ((v47 & 1) != 0)
    v16 = v49;
  else
    v16 = v48;
  v17 = buf[8];
  if ((buf[8] & 1) != 0)
    v18 = v51;
  else
    v18 = (const char *)&buf[9];
  v19 = (_anonymous_namespace_ *)strcmp(v16, v18);
  if (!(_DWORD)v19)
  {
    if (*(_QWORD *)buf && (v17 & 1) != 0)
      (*(void (**)(void))(**(_QWORD **)buf + 40))();
    goto LABEL_58;
  }
  if ((v47 & 1) != 0)
    v20 = v49;
  else
    v20 = v48;
  v21 = v38 & 1;
  if ((v38 & 1) != 0)
    v22 = *(const char **)&v39[7];
  else
    v22 = v39;
  v23 = strcmp(v20, v22);
  if (v37 && v21)
    (*(void (**)(void))(*(_QWORD *)v37 + 40))();
  v24 = *(_anonymous_namespace_ **)buf;
  if (*(_QWORD *)buf && (buf[8] & 1) != 0)
    v24 = (_anonymous_namespace_ *)(*(uint64_t (**)(void))(**(_QWORD **)buf + 40))();
  if (!v23)
    goto LABEL_58;
  if ((v47 & 1) != 0)
    v25 = v49;
  else
    v25 = v48;
  v26 = buf[8] & 1;
  if ((buf[8] & 1) != 0)
    v27 = v51;
  else
    v27 = (const char *)&buf[9];
  v28 = strcmp(v25, v27);
  v29 = *(re **)buf;
  if (*(_QWORD *)buf && v26)
    v29 = (re *)(*(uint64_t (**)(void))(**(_QWORD **)buf + 40))();
  if (!v28)
  {
LABEL_58:
    v35 = 0;
    memset(v34, 0, sizeof(v34));
    v36 = 0x7FFFFFFFLL;
    v37 = 10;
    *(_OWORD *)buf = xmmword_2260E7FA0;
    _ZN2re9HashTableI25RERealityFileMajorVersionDv3_iNS_4HashIS1_EENS_7EqualToIS1_EELb1ELb0EE6addNewERKS1_OS2_((uint64_t)v34, &v37, buf);
    v37 = 11;
    *(_OWORD *)buf = xmmword_2260FDD30;
    _ZN2re9HashTableI25RERealityFileMajorVersionDv3_iNS_4HashIS1_EENS_7EqualToIS1_EELb1ELb0EE6addNewERKS1_OS2_((uint64_t)v34, &v37, buf);
    v37 = 12;
    *(_OWORD *)buf = xmmword_2260FDD40;
    _ZN2re9HashTableI25RERealityFileMajorVersionDv3_iNS_4HashIS1_EENS_7EqualToIS1_EELb1ELb0EE6addNewERKS1_OS2_((uint64_t)v34, &v37, buf);
    v31 = (uint64_t *)v34;
    goto LABEL_59;
  }
  v30 = *re::assetsLogObjects(v29);
  v33 = 0u;
  if (os_log_type_enabled(v30, OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)buf = 136315138;
    *(_QWORD *)&buf[4] = a1;
    _os_log_error_impl(&dword_224FE9000, v30, OS_LOG_TYPE_ERROR, "Provided platform (%s) is not valid or unsupported.", buf, 0xCu);
  }
LABEL_60:
  if (v46 && (v47 & 1) != 0)
    (*(void (**)(void))(*(_QWORD *)v46 + 40))();
  return v33;
}

__n128 `anonymous namespace'::deploymentTargetForVersion(re *a1, unint64_t a2, uint64_t a3)
{
  NSObject *v6;
  __n128 result;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _DWORD v11[2];
  __int16 v12;
  re *v13;
  uint64_t v14;

  v14 = *MEMORY[0x24BDAC8D0];
  if ((a2 - 1) >= 0xC)
  {
    v6 = *re::assetsLogObjects(a1);
    if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
    {
      v11[0] = 67109378;
      v11[1] = a2;
      v12 = 2080;
      v13 = a1;
      _os_log_error_impl(&dword_224FE9000, v6, OS_LOG_TYPE_ERROR, "Provided version (%i) is not matching any official %s release.", (uint8_t *)v11, 0x12u);
    }
  }
  result.n128_u64[0] = 0;
  if (*(_QWORD *)a3)
  {
    v8 = 0x94D049BB133111EBLL
       * ((0xBF58476D1CE4E5B9 * (a2 ^ (a2 >> 30))) ^ ((0xBF58476D1CE4E5B9 * (a2 ^ (a2 >> 30))) >> 27));
    v9 = *(unsigned int *)(*(_QWORD *)(a3 + 8) + 4 * ((v8 ^ (v8 >> 31)) % *(unsigned int *)(a3 + 24)));
    if ((_DWORD)v9 != 0x7FFFFFFF)
    {
      v10 = *(_QWORD *)(a3 + 16);
      if (*(_QWORD *)(v10 + 48 * v9 + 16) == a2)
      {
        return *(__n128 *)(v10 + 48 * v9 + 32);
      }
      else
      {
        while (1)
        {
          LODWORD(v9) = *(_DWORD *)(v10 + 48 * v9 + 8) & 0x7FFFFFFF;
          if ((_DWORD)v9 == 0x7FFFFFFF)
            break;
          if (*(_QWORD *)(v10 + 48 * v9 + 16) == a2)
            return *(__n128 *)(v10 + 48 * v9 + 32);
        }
      }
    }
  }
  return result;
}

uint64_t _ZN2re9HashTableI25RERealityFileMajorVersionDv3_iNS_4HashIS1_EENS_7EqualToIS1_EELb1ELb0EE6addNewERKS1_OS2_(uint64_t result, uint64_t *a2, _OWORD *a3)
{
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v5 = result;
  v6 = *a2;
  v7 = 0xBF58476D1CE4E5B9 * (*a2 ^ ((unint64_t)*a2 >> 30));
  v8 = (0x94D049BB133111EBLL * (v7 ^ (v7 >> 27))) ^ ((0x94D049BB133111EBLL * (v7 ^ (v7 >> 27))) >> 31);
  if (*(_QWORD *)result)
  {
    v9 = v8 % *(unsigned int *)(result + 24);
    v10 = *(unsigned int *)(*(_QWORD *)(result + 8) + 4 * v9);
    if ((_DWORD)v10 != 0x7FFFFFFF)
    {
      v11 = *(_QWORD *)(result + 16);
      if (*(_QWORD *)(v11 + 48 * v10 + 16) == v6)
        return result;
      while (1)
      {
        LODWORD(v10) = *(_DWORD *)(v11 + 48 * v10 + 8) & 0x7FFFFFFF;
        if ((_DWORD)v10 == 0x7FFFFFFF)
          break;
        if (*(_QWORD *)(v11 + 48 * v10 + 16) == v6)
          return result;
      }
    }
  }
  else
  {
    LODWORD(v9) = 0;
  }
  result = _ZN2re9HashTableI25RERealityFileMajorVersionDv3_iNS_4HashIS1_EENS_7EqualToIS1_EELb1ELb0EE9addAsMoveEjmRKS1_OS2_(result, v9, v8, a2, a3);
  ++*(_DWORD *)(v5 + 40);
  return result;
}

uint64_t _ZN2re9HashTableI25RERealityFileMajorVersionDv3_iNS_4HashIS1_EENS_7EqualToIS1_EELb1ELb0EE9addAsMoveEjmRKS1_OS2_(uint64_t a1, unsigned int a2, unint64_t a3, _QWORD *a4, _OWORD *a5)
{
  uint64_t v9;
  int v10;
  int v11;
  signed int v12;
  uint64_t v13;
  BOOL v14;
  __int128 v15;
  uint64_t v16;
  uint64_t v17;
  unsigned int v18;
  __int128 v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  int v23;
  signed int v24;
  _BYTE v26[44];

  v9 = *(unsigned int *)(a1 + 36);
  if ((_DWORD)v9 == 0x7FFFFFFF)
  {
    v9 = *(unsigned int *)(a1 + 32);
    v10 = v9;
    if ((_DWORD)v9 == *(_DWORD *)(a1 + 24))
    {
      v11 = *(_DWORD *)(a1 + 28);
      v12 = 2 * v11;
      v13 = *(_QWORD *)a1;
      if (*(_QWORD *)a1)
      {
        if (v12)
          v14 = (_DWORD)v9 == v12;
        else
          v14 = 1;
        if (!v14 && (v11 & 0x80000000) == 0)
        {
          memset(v26, 0, 36);
          *(_QWORD *)&v26[36] = 0x7FFFFFFFLL;
          re::HashTable<unsigned long long,re::ecs2::EntityHandle,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::init((uint64_t)v26, v13, v12);
          v15 = *(_OWORD *)v26;
          *(_OWORD *)v26 = *(_OWORD *)a1;
          *(_OWORD *)a1 = v15;
          v16 = *(_QWORD *)&v26[16];
          v17 = *(_QWORD *)(a1 + 16);
          *(_QWORD *)&v26[16] = v17;
          *(_QWORD *)(a1 + 16) = v16;
          v19 = *(_OWORD *)&v26[24];
          *(_OWORD *)&v26[24] = *(_OWORD *)(a1 + 24);
          v18 = *(_DWORD *)&v26[32];
          *(_OWORD *)(a1 + 24) = v19;
          v20 = v18;
          if (v18)
          {
            v21 = v17 + 16;
            do
            {
              if ((*(_DWORD *)(v21 - 8) & 0x80000000) != 0)
                _ZN2re9HashTableI25RERealityFileMajorVersionDv3_iNS_4HashIS1_EENS_7EqualToIS1_EELb1ELb0EE9addAsMoveEjmRKS1_OS2_(a1, *(_QWORD *)(v21 - 16) % (unint64_t)*(unsigned int *)(a1 + 24), *(_QWORD *)(v21 - 16), v21, v21 + 16);
              v21 += 48;
              --v20;
            }
            while (v20);
          }
          _ZN2re9HashTableI25RERealityFileMajorVersionDv3_iNS_4HashIS1_EENS_7EqualToIS1_EELb1ELb0EE6deinitEv((uint64_t *)v26);
        }
      }
      else
      {
        if (v12)
          v24 = 2 * v11;
        else
          v24 = 3;
      }
      a2 = a3 % *(unsigned int *)(a1 + 24);
      v10 = *(_DWORD *)(a1 + 32);
    }
    *(_DWORD *)(a1 + 32) = v10 + 1;
    v22 = *(_QWORD *)(a1 + 16);
    v23 = *(_DWORD *)(v22 + 48 * v9 + 8);
  }
  else
  {
    v22 = *(_QWORD *)(a1 + 16);
    v23 = *(_DWORD *)(v22 + 48 * v9 + 8);
    *(_DWORD *)(a1 + 36) = v23 & 0x7FFFFFFF;
  }
  *(_DWORD *)(v22 + 48 * v9 + 8) = v23 | 0x80000000;
  *(_DWORD *)(*(_QWORD *)(a1 + 16) + 48 * v9 + 8) = *(_DWORD *)(*(_QWORD *)(a1 + 16) + 48 * v9 + 8) & 0x80000000 | *(_DWORD *)(*(_QWORD *)(a1 + 8) + 4 * a2);
  *(_QWORD *)(*(_QWORD *)(a1 + 16) + 48 * v9) = a3;
  *(_QWORD *)(*(_QWORD *)(a1 + 16) + 48 * v9 + 16) = *a4;
  *(_OWORD *)(*(_QWORD *)(a1 + 16) + 48 * v9 + 32) = *a5;
  *(_DWORD *)(*(_QWORD *)(a1 + 8) + 4 * a2) = v9;
  ++*(_DWORD *)(a1 + 28);
  return v9;
}

double _ZN2re9HashTableI25RERealityFileMajorVersionDv3_iNS_4HashIS1_EENS_7EqualToIS1_EELb1ELb0EE6deinitEv(uint64_t *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  double result;

  v2 = *a1;
  if (v2)
  {
    v3 = *((unsigned int *)a1 + 8);
    if ((_DWORD)v3)
    {
      v4 = 0;
      v5 = 48 * v3;
      do
      {
        v6 = a1[2] + v4;
        v7 = *(_DWORD *)(v6 + 8);
        if (v7 < 0)
          *(_DWORD *)(v6 + 8) = v7 & 0x7FFFFFFF;
        v4 += 48;
      }
      while (v5 != v4);
    }
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v2 + 40))(v2, a1[1]);
    *((_DWORD *)a1 + 8) = 0;
    *(_OWORD *)a1 = 0u;
    *((_OWORD *)a1 + 1) = 0u;
    *(_QWORD *)&result = 0x7FFFFFFFLL;
    *(uint64_t *)((char *)a1 + 36) = 0x7FFFFFFFLL;
  }
  return result;
}

uint64_t re::NetworkAssetSerializationManager::serializeAsset(uint64_t a1, _anonymous_namespace_ *a2, re **a3, re::DynamicArrayBufferedOutputStream *a4, void (**a5)(re::StreamWriterCopyingOutputStream *__hidden this))
{
  uint64_t v10;
  _BYTE v12[8];
  uint64_t v13;
  _BYTE v14[39];
  char v15;

  if (!*(_BYTE *)(a1 + 40))
    return re::NetworkAssetSerializationManager::internalSerializeAsset(a1, a2, (const re::IntrospectionBase *)a3, 0, a4, a5);
  re::IntrospectionSharedLock::IntrospectionSharedLock((re::IntrospectionSharedLock *)&v15);
  re::TypeInfo::TypeInfo((uint64_t)v14, (uint64_t)&v13);
  v10 = re::NetworkAssetSerializationManager::internalSerializeAsset(a1, a2, (const re::IntrospectionBase *)a3, v14, a4, a5);
  re::IntrospectionSharedLock::~IntrospectionSharedLock((re::IntrospectionSharedLock *)&v15);
  return v10;
}

uint64_t re::NetworkAssetSerializationManager::internalSerializeAsset(uint64_t a1, _anonymous_namespace_ *a2, const re::IntrospectionBase *a3, void *a4, re::DynamicArrayBufferedOutputStream *a5, void (**a6)(re::StreamWriterCopyingOutputStream *__hidden this))
{
  re *v10;
  re *v11;
  uint64_t v13;
  NSObject *v15;
  NSObject *v16;
  uint64_t v17;
  _BYTE *v18;
  uint8_t v19[24];
  uint64_t v20;
  char v21;
  _BYTE v22[31];
  void (**v23)(re::StreamWriterCopyingOutputStream *__hidden);
  uint64_t v24;
  _QWORD *v25;
  _QWORD v26[4];
  __int16 v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  _QWORD v32[3];
  int v33;
  uint64_t v34;
  _anonymous_namespace_ *v35;
  uint8_t buf[4];
  uint64_t v37;
  __int16 v38;
  _BYTE *v39;
  uint64_t v40;

  v40 = *MEMORY[0x24BDAC8D0];
  if (*(_BYTE *)(a1 + 40))
  {
    v26[1] = 0;
    v26[2] = &off_24ED1E8F0;
    LOWORD(v24) = 0;
    v26[3] = v26;
    v27 = 0;
    v28 = 0;
    v29 = 0;
    v30 = 0x2000;
    v31 = 0;
    memset(v32, 0, sizeof(v32));
    v23 = &off_24ED7C7D8;
    v25 = v32;
    v26[0] = &unk_24ED7C830;
    v33 = 0;
    v34 = 0;
    v35 = a2;
    v10 = *(re **)(a1 + 24);
    *((_QWORD *)v10 + 57) = a6;
    v11 = (re *)re::serializeObject(v10, (re::NetworkOPACKSerializer *)&v23, a5, a4, (uint64_t)v19);
    *(_QWORD *)(*(_QWORD *)(a1 + 24) + 456) = 0;
    if (v19[0])
    {
      re::StreamWriterCopyingOutputStream::~StreamWriterCopyingOutputStream((re::StreamWriterCopyingOutputStream *)&v23);
      return 1;
    }
    v15 = *re::assetsLogObjects(v11);
    if (os_log_type_enabled(v15, OS_LOG_TYPE_ERROR))
    {
      v17 = re::TypeInfo::name((re::TypeInfo *)a4)[1];
      if ((v21 & 1) != 0)
        v18 = *(_BYTE **)&v22[7];
      else
        v18 = v22;
      *(_DWORD *)buf = 136315394;
      v37 = v17;
      v38 = 2080;
      v39 = v18;
      _os_log_error_impl(&dword_224FE9000, v15, OS_LOG_TYPE_ERROR, "Failed to serialize payload for asset. Type: \"%s\". Details: %s", buf, 0x16u);
    }
    if (!v19[0] && v20 && (v21 & 1) != 0)
      (*(void (**)(void))(*(_QWORD *)v20 + 40))();
    re::StreamWriterCopyingOutputStream::~StreamWriterCopyingOutputStream((re::StreamWriterCopyingOutputStream *)&v23);
  }
  else
  {
    v24 = 0;
    v25 = 0;
    v23 = a6;
    if ((v13 & 1) != 0)
      return 1;
    v16 = *re::assetsLogObjects((re *)v13);
    if (os_log_type_enabled(v16, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)v19 = 0;
      _os_log_error_impl(&dword_224FE9000, v16, OS_LOG_TYPE_ERROR, "Failed to serialize payload for asset", v19, 2u);
    }
  }
  return 0;
}

re::FixedArrayInputStream *re::NetworkAssetSerializationManager::deserializeAsset(re::NetworkAssetSerializationManager *this, AssetService *a2, const char **a3, re::AssetSerializationScheme *a4, void (**a5)(re::FixedArrayInputStream *__hidden this), void *a6, unint64_t *a7)
{
  uint64_t v14;
  uint64_t v15;
  re::FixedArrayInputStream *v16;
  _BYTE v18[8];
  uint64_t v19;
  _BYTE v20[39];
  char v21;

  if (!*((_BYTE *)this + 40))
    return re::NetworkAssetSerializationManager::internalDeserializeAsset(this, a2, a3, 0, a4, a5, a6, a7);
  v14 = re::internal::AssetTypeRegistry::assetLoaderWithAssetType((uint64_t)a2[138].var0, (unint64_t)a3);
  v15 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v14 + 112))(v14);
  re::IntrospectionSharedLock::IntrospectionSharedLock((re::IntrospectionSharedLock *)&v21);
  re::TypeInfo::TypeInfo((uint64_t)v20, (uint64_t)&v19);
  v16 = re::NetworkAssetSerializationManager::internalDeserializeAsset(this, a2, a3, (re::TypeInfo *)v20, a4, a5, a6, a7);
  re::IntrospectionSharedLock::~IntrospectionSharedLock((re::IntrospectionSharedLock *)&v21);
  return v16;
}

re::FixedArrayInputStream *re::NetworkAssetSerializationManager::internalDeserializeAsset(re::NetworkAssetSerializationManager *this, AssetService *a2, const char **a3, re::TypeInfo *a4, re::AssetSerializationScheme *a5, void (**a6)(re::FixedArrayInputStream *__hidden this), void *a7, unint64_t *a8)
{
  uint64_t v16;
  _anonymous_namespace_ *v17;
  void (**v18)(re::FixedArrayInputStream *__hidden);
  re::FixedArrayInputStream *v19;
  re *v20;
  re *v21;
  int v22;
  uint64_t v23;
  _QWORD *v24;
  void **var0;
  NSObject *v26;
  uint64_t v28;
  char v29[16];
  void (**v30)(re::ExternalMemorySeekableInputStream *__hidden);
  __int16 v31;
  void (**v32)(re::FixedArrayInputStream *__hidden);
  void *v33;
  void (**v34)(re::FixedArrayInputStream *__hidden);
  int v35;
  int v36;
  _QWORD *v37;
  void *v38;
  void (**v39)(re::FixedArrayInputStream *__hidden);
  int v40;
  int v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44[3];
  uint64_t v45;
  char v46;
  uint8_t buf[4];
  uint64_t v48;
  uint64_t v49;

  v49 = *MEMORY[0x24BDAC8D0];
  v16 = re::internal::AssetTypeRegistry::assetLoaderWithAssetType((uint64_t)a2[138].var0, (unint64_t)a3);
  v17 = (_anonymous_namespace_ *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v16 + 112))(v16);
  if (*((_BYTE *)this + 40))
  {
                                                                                          + 32))();
    v18[1] = 0;
    v18[2] = 0;
    *v18 = 0;
    v31 = 256;
    v30 = &off_24ED7C2E0;
    v32 = v18;
    v33 = &unk_24ED1E828;
    v34 = a6;
    v35 = (int)a7;
    v36 = (int)a7;
    v37 = 0;
    v38 = (void *)(int)a7;
    v19 = (re::FixedArrayInputStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v16 + 120))(v16);
    v20 = (re *)*((_QWORD *)this + 4);
    *((_QWORD *)v20 + 57) = a5;
    v21 = (re *)re::deserializeObject(v20, (re::NetworkOPACKDeserializer *)&v30, v19, a4, (uint64_t)v44);
    *(_QWORD *)(*((_QWORD *)this + 4) + 456) = 0;
    v22 = LOBYTE(v44[0]);
    if (LOBYTE(v44[0]))
    {
      *a8 = (int)v37;
    }
    else
    {
      v26 = *re::assetsLogObjects(v21);
      if (os_log_type_enabled(v26, OS_LOG_TYPE_ERROR))
      {
        v28 = re::TypeInfo::name(a4)[1];
        *(_DWORD *)buf = 136315138;
        v48 = v28;
        _os_log_error_impl(&dword_224FE9000, v26, OS_LOG_TYPE_ERROR, "Failed to deserialize asset for type \"%s\".", buf, 0xCu);
      }
    }
    if (!LOBYTE(v44[0]) && v45 && (v46 & 1) != 0)
      (*(void (**)(void))(*(_QWORD *)v45 + 40))();
    re::internal::MemoryInputStream<re::FixedArray<char>>::~MemoryInputStream((uint64_t)&v30);
    if (!v22)
      return 0;
  }
  else
  {
    v23 = (uint64_t)v17;
    v30 = &off_24ED7BDD0;
    LOBYTE(v31) = 0;
    v32 = a6;
    v33 = a7;
    v24[1] = 0;
    v24[2] = 0;
    *v24 = 0;
    LOWORD(v35) = 256;
    v34 = &off_24ED7C2E0;
    v37 = v24;
    v38 = &unk_24ED1E828;
    v39 = a6;
    v40 = (int)a7;
    v41 = (int)a7;
    v42 = 0;
    v43 = (int)a7;
    var0 = a2[138].var0;
    v44[1] = 0;
    v44[2] = 0;
    v44[0] = (uint64_t)var0;
    v29[0] = 0;
    v19 = (re::FixedArrayInputStream *)re::AssetUtilities::deserializeIntrospectedAsset((uint64_t)&v30, a3, v44, v23, (uint64_t)a5, 2, (uint64_t)v29);
    *a8 = (int)v42;
    v30 = &off_24ED7BDD0;
    re::internal::MemoryInputStream<re::FixedArray<char>>::~MemoryInputStream((uint64_t)&v34);
  }
  return v19;
}

void re::NetworkAssetSerializationManager::~NetworkAssetSerializationManager(re::NetworkAssetSerializationManager *this)
{
  JUMPOUT(0x2276933B8);
}

uint64_t *re::allocInfo_AudioLoadDescriptorParameters(re *this)
{
  unsigned __int8 v1;

  v1 = atomic_load((unsigned __int8 *)&_MergedGlobals_88);
  if ((v1 & 1) == 0 && __cxa_guard_acquire(&_MergedGlobals_88))
  {
    ArcSharedObject::ArcSharedObject((ArcSharedObject *)&qword_254100CA0, 0);
    *(uint64_t *)((char *)&qword_254100CB0 + 6) = 0;
    qword_254100CB0 = 0;
    qword_254100CC0 = 0;
    qword_254100CC8 = 0xFFFFFFFFLL;
    qword_254100CA0 = (uint64_t)&off_24ED7DAA8;
    qword_254100CD0 = (uint64_t)"AudioLoadDescriptorParameters";
    dword_254100CD8 = 0;
    xmmword_254100CE0 = 0u;
    unk_254100CF0 = 0u;
    xmmword_254100D00 = 0u;
    qword_254100D10 = 0;
    __cxa_guard_release(&_MergedGlobals_88);
  }
  return &qword_254100CA0;
}

void re::initInfo_AudioLoadDescriptorParameters(re *this, re::IntrospectionBase *a2)
{
  const re::IntrospectionBase *v3;
  unsigned __int8 v4;
  re *v5;
  uint64_t *v6;
  const re::IntrospectionBase *v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t *v10;
  const re::IntrospectionBase *v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t *v14;
  const re::IntrospectionBase *v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  __int128 v21;
  _QWORD v22[2];
  __int128 v23;

  v22[0] = 0xB1F2D5B8ED8A952ALL;
  v22[1] = "AudioLoadDescriptorParameters";
  re::StringID::destroyString((re::StringID *)v22);
  *((_OWORD *)this + 2) = v23;
  v4 = atomic_load((unsigned __int8 *)&qword_254100C78);
  if ((v4 & 1) == 0)
  {
    v5 = (re *)__cxa_guard_acquire(&qword_254100C78);
    if ((_DWORD)v5)
    {
      v6 = re::introspectionAllocator(v5);
      v8 = re::IntrospectionInfo<re::Optional<re::DynamicString>>::get(1, v7);
      v9 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v6 + 32))(v6, 72, 8);
      *(_DWORD *)v9 = 1;
      *(_QWORD *)(v9 + 8) = "framework";
      *(_QWORD *)(v9 + 16) = v8;
      *(_QWORD *)(v9 + 24) = 0;
      *(_QWORD *)(v9 + 32) = 0x5800000001;
      *(_DWORD *)(v9 + 40) = 0;
      *(_QWORD *)(v9 + 48) = 0;
      *(_QWORD *)(v9 + 56) = 0;
      *(_DWORD *)(v9 + 64) = 0;
      qword_254100C80 = v9;
      v10 = re::introspectionAllocator((re *)v9);
      v12 = re::IntrospectionInfo<re::Optional<re::DynamicString>>::get(1, v11);
      v13 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v10 + 32))(v10, 72, 8);
      *(_DWORD *)v13 = 1;
      *(_QWORD *)(v13 + 8) = "resource";
      *(_QWORD *)(v13 + 16) = v12;
      *(_QWORD *)(v13 + 24) = 0;
      *(_QWORD *)(v13 + 32) = 0x8000000002;
      *(_DWORD *)(v13 + 40) = 0;
      *(_QWORD *)(v13 + 48) = 0;
      *(_QWORD *)(v13 + 56) = 0;
      *(_DWORD *)(v13 + 64) = 0;
      qword_254100C88 = v13;
      v14 = re::introspectionAllocator((re *)v13);
      v16 = re::IntrospectionInfo<re::Optional<re::DynamicString>>::get(1, v15);
      v17 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v14 + 32))(v14, 72, 8);
      *(_DWORD *)v17 = 1;
      *(_QWORD *)(v17 + 8) = "assetURL";
      *(_QWORD *)(v17 + 16) = v16;
      *(_QWORD *)(v17 + 24) = 0;
      *(_QWORD *)(v17 + 32) = 0xA800000003;
      *(_DWORD *)(v17 + 40) = 0;
      *(_QWORD *)(v17 + 48) = 0;
      *(_QWORD *)(v17 + 56) = 0;
      *(_DWORD *)(v17 + 64) = 0;
      qword_254100C90 = v17;
      v18 = re::introspectionAllocator((re *)v17);
      v19 = re::introspect_AudioFileAssetConfiguration((re::IntrospectionBase **)1);
      v20 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v18 + 32))(v18, 72, 8);
      *(_DWORD *)v20 = 1;
      *(_QWORD *)(v20 + 8) = "configuration";
      *(_QWORD *)(v20 + 16) = v19;
      *(_QWORD *)(v20 + 24) = 0;
      *(_QWORD *)(v20 + 32) = 12;
      *(_DWORD *)(v20 + 40) = 0;
      *(_QWORD *)(v20 + 48) = 0;
      *(_QWORD *)(v20 + 56) = 0;
      *(_DWORD *)(v20 + 64) = 0;
      qword_254100C98 = v20;
      __cxa_guard_release(&qword_254100C78);
    }
  }
  *((_QWORD *)this + 2) = 0xD000000008;
  *((_DWORD *)this + 6) = 8;
  *((_WORD *)this + 14) = 0;
  *((_DWORD *)this + 14) = 4;
  *((_QWORD *)this + 8) = &qword_254100C80;
  *((_QWORD *)this + 9) = re::internal::defaultConstruct<re::AudioLoadDescriptorParameters>;
  *((_QWORD *)this + 10) = re::internal::defaultDestruct<re::AudioLoadDescriptorParameters>;
  *((_QWORD *)this + 11) = 0;
  *((_QWORD *)this + 12) = 0;
  *((_QWORD *)this + 13) = re::internal::defaultConstructV2<re::AudioLoadDescriptorParameters>;
  *((_QWORD *)this + 14) = re::internal::defaultDestructV2<re::AudioLoadDescriptorParameters>;
  re::IntrospectionRegistry::add(this, v3);
  v21 = v23;
}

void sub_22536CE80(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254100C78);
  _Unwind_Resume(a1);
}

double re::internal::defaultConstruct<re::AudioLoadDescriptorParameters>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  double result;

  *(_WORD *)a3 = 0;
  *(_BYTE *)(a3 + 2) = 0;
  *(_DWORD *)(a3 + 4) = 0;
  *(_DWORD *)(a3 + 8) = 0;
  result = 0.0;
  *(_OWORD *)(a3 + 16) = xmmword_2260FDC00;
  *(_BYTE *)(a3 + 32) = 0;
  *(_BYTE *)(a3 + 72) = 0;
  *(_BYTE *)(a3 + 80) = 0;
  *(_BYTE *)(a3 + 88) = 0;
  *(_BYTE *)(a3 + 128) = 0;
  *(_BYTE *)(a3 + 168) = 0;
  return result;
}

double re::internal::defaultDestruct<re::AudioLoadDescriptorParameters>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  _OWORD *v5;
  double result;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  if (*(_BYTE *)(a3 + 168))
  {
    v5 = (_OWORD *)(a3 + 176);
    v4 = *(_QWORD *)(a3 + 176);
    if (v4)
    {
      if ((*(_BYTE *)(a3 + 184) & 1) != 0)
        (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v4 + 40))(v4, *(_QWORD *)(a3 + 192));
      result = 0.0;
      *v5 = 0u;
      *(_OWORD *)(a3 + 192) = 0u;
    }
  }
  if (*(_BYTE *)(a3 + 128))
  {
    v7 = *(_QWORD *)(a3 + 136);
    if (v7)
    {
      if ((*(_BYTE *)(a3 + 144) & 1) != 0)
        (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v7 + 40))(v7, *(_QWORD *)(a3 + 152));
      result = 0.0;
      *(_OWORD *)(a3 + 136) = 0u;
      *(_OWORD *)(a3 + 152) = 0u;
    }
  }
  if (*(_BYTE *)(a3 + 88))
  {
    v8 = *(_QWORD *)(a3 + 96);
    if (v8)
    {
      if ((*(_BYTE *)(a3 + 104) & 1) != 0)
        (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v8 + 40))(v8, *(_QWORD *)(a3 + 112));
      result = 0.0;
      *(_OWORD *)(a3 + 96) = 0u;
      *(_OWORD *)(a3 + 112) = 0u;
    }
  }
  if (*(_BYTE *)(a3 + 32))
  {
    v9 = *(_QWORD *)(a3 + 40);
    if (v9)
    {
      if ((*(_BYTE *)(a3 + 48) & 1) != 0)
        (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v9 + 40))(v9, *(_QWORD *)(a3 + 56));
      result = 0.0;
      *(_OWORD *)(a3 + 40) = 0u;
      *(_OWORD *)(a3 + 56) = 0u;
    }
  }
  return result;
}

double re::internal::defaultConstructV2<re::AudioLoadDescriptorParameters>(uint64_t a1)
{
  double result;

  *(_WORD *)a1 = 0;
  *(_BYTE *)(a1 + 2) = 0;
  *(_DWORD *)(a1 + 4) = 0;
  *(_DWORD *)(a1 + 8) = 0;
  result = 0.0;
  *(_OWORD *)(a1 + 16) = xmmword_2260FDC00;
  *(_BYTE *)(a1 + 32) = 0;
  *(_BYTE *)(a1 + 72) = 0;
  *(_BYTE *)(a1 + 80) = 0;
  *(_BYTE *)(a1 + 88) = 0;
  *(_BYTE *)(a1 + 128) = 0;
  *(_BYTE *)(a1 + 168) = 0;
  return result;
}

double re::internal::defaultDestructV2<re::AudioLoadDescriptorParameters>(uint64_t a1)
{
  uint64_t v2;
  _OWORD *v3;
  double result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  if (*(_BYTE *)(a1 + 168))
  {
    v3 = (_OWORD *)(a1 + 176);
    v2 = *(_QWORD *)(a1 + 176);
    if (v2)
    {
      if ((*(_BYTE *)(a1 + 184) & 1) != 0)
        (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v2 + 40))(v2, *(_QWORD *)(a1 + 192));
      result = 0.0;
      *v3 = 0u;
      *(_OWORD *)(a1 + 192) = 0u;
    }
  }
  if (*(_BYTE *)(a1 + 128))
  {
    v5 = *(_QWORD *)(a1 + 136);
    if (v5)
    {
      if ((*(_BYTE *)(a1 + 144) & 1) != 0)
        (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v5 + 40))(v5, *(_QWORD *)(a1 + 152));
      result = 0.0;
      *(_OWORD *)(a1 + 136) = 0u;
      *(_OWORD *)(a1 + 152) = 0u;
    }
  }
  if (*(_BYTE *)(a1 + 88))
  {
    v6 = *(_QWORD *)(a1 + 96);
    if (v6)
    {
      if ((*(_BYTE *)(a1 + 104) & 1) != 0)
        (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v6 + 40))(v6, *(_QWORD *)(a1 + 112));
      result = 0.0;
      *(_OWORD *)(a1 + 96) = 0u;
      *(_OWORD *)(a1 + 112) = 0u;
    }
  }
  if (*(_BYTE *)(a1 + 32))
  {
    v7 = *(_QWORD *)(a1 + 40);
    if (v7)
    {
      if ((*(_BYTE *)(a1 + 48) & 1) != 0)
        (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v7 + 40))(v7, *(_QWORD *)(a1 + 56));
      result = 0.0;
      *(_OWORD *)(a1 + 40) = 0u;
      *(_OWORD *)(a1 + 56) = 0u;
    }
  }
  return result;
}

re::AudioFileAssetProvider *re::AudioFileAssetProvider::AudioFileAssetProvider(re::AudioFileAssetProvider *this, re::AssetManager *a2)
{
  unsigned __int8 v4;
  __guard *v5;
  uint64_t v6;
  int v8;

  ArcSharedObject::ArcSharedObject(this, 0);
  *(_QWORD *)this = &off_24ED391C0;
  *((_QWORD *)this + 3) = 0;
  *((_QWORD *)this + 4) = 0;
  *((_QWORD *)this + 5) = 0;
  if ((v4 & 1) == 0)
  {
    if (v8)
    {
      re::introspect<re::AudioLoadDescriptorParameters>(void)::info = re::internal::getOrCreateInfo((re::internal *)"AudioLoadDescriptorParameters", (uint64_t (*)(re::internal *))re::allocInfo_AudioLoadDescriptorParameters, (re::IntrospectionBase *(*)(void))re::initInfo_AudioLoadDescriptorParameters, (void (*)(re::IntrospectionBase *))&re::internal::introspectionInfoStorage<re::AudioLoadDescriptorParameters>, 0);
    }
  }
  re::AudioFileAssetProvider::s_loadDescriptorParametersIntrospect = v5[511];
  if (a2)
  {
    *(_OWORD *)((char *)this + 24) = *((_OWORD *)a2 + 69);
    v6 = *((_QWORD *)a2 + 163);
    *((_QWORD *)this + 5) = *((_QWORD *)a2 + 149);
    *((_QWORD *)this + 6) = v6;
  }
  return this;
}

void re::AudioFileAssetProvider::~AudioFileAssetProvider(re::AudioFileAssetProvider *this)
{
  *(_OWORD *)((char *)this + 40) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_QWORD *)this = &off_24ED426B8;
  objc_destructInstance((char *)this + 8);
}

{
  *(_OWORD *)((char *)this + 40) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_QWORD *)this = &off_24ED426B8;
  objc_destructInstance((char *)this + 8);
  JUMPOUT(0x2276933B8);
}

uint64_t *re::AudioFileAssetProvider::loadAssetWithPath(re::AudioFileAssetProvider *this, re::AudioFileAsset *a2, const re::DynamicString *a3, uint64_t a4)
{
  const char *v7;
  _BOOL8 v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  _anonymous_namespace_ *v12;
  re::AudioFileAsset *v13;
  char v14;
  __int128 v15;
  uint64_t *result;
  const char *v17;
  __int128 v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  __int128 v24;
  char v25;

  if ((*(_QWORD *)(a4 + 8) & 1) != 0)
    v7 = *(const char **)(a4 + 16);
  else
    v7 = (const char *)(a4 + 9);
  v8 = re::AudioFileAsset::prepareToLoadFrom(a3, v7);
  v9 = *((_QWORD *)a2 + 3);
  v10 = re::AudioFileAsset::assetType((re::AudioFileAsset *)v8);
  v11 = re::internal::AssetTypeRegistry::assetLoaderWithAssetType(v9, (unint64_t)v10);
  v12 = (_anonymous_namespace_ *)(*(uint64_t (**)(uint64_t, const re::DynamicString *, _QWORD, _QWORD))(*(_QWORD *)v11 + 24))(v11, a3, 0, 0);
  v21 = 0;
  v22 = 0;
  v23 = 0;
  v13 = (re::AudioFileAsset *)re::DynamicString::setCapacity(&v20, 0);
  BYTE8(v24) = 0;
  v25 = 0;
  *(_QWORD *)&v24 = a3;
  v17 = (const char *)*re::AudioFileAsset::assetType(v13);
  *(_QWORD *)&v18 = strlen(v17);
  re::DynamicString::operator=((re::DynamicString *)&v20, (uint64_t)&v17);
  re::DynamicString::DynamicString((re::DynamicString *)&v17, (const re::DynamicString *)&v20);
  v14 = v25;
  v15 = v24;
  *(_BYTE *)this = 1;
  *((_QWORD *)this + 1) = v17;
  *((_QWORD *)this + 4) = v19;
  *((_OWORD *)this + 1) = v18;
  *(_OWORD *)((char *)this + 40) = v15;
  *((_BYTE *)this + 56) = v14;
  result = v20;
  if (v20)
  {
    if ((v21 & 1) != 0)
      return (uint64_t *)(*(uint64_t (**)(void))(*v20 + 40))();
  }
  return result;
}

void sub_22536D37C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18)
{
  if (a16)
  {
    if ((a17 & 1) != 0)
      (*(void (**)(void))(*(_QWORD *)a16 + 40))();
  }
  _Unwind_Resume(exception_object);
}

void re::AudioFileAssetProvider::load(os_unfair_lock_s **this@<X0>, const re::AssetLoadDescriptor *a2@<X1>, uint64_t a3@<X8>)
{
  const char *v8;
  re::AudioFileAsset *v9;
  int v10;
  const char *v11;
  const char *v12;
  _anonymous_namespace_ *v13;
  uint64_t Descriptor;
  uint64_t *v15;
  re::AudioFileAsset *v16;
  unsigned __int8 *v17;
  __int128 v18;
  __int128 v19;
  const char *v20;
  __int128 v21;
  __int128 v22;
  os_unfair_lock_s *v23;
  _anonymous_namespace_ *v24;
  const char *v25;
  char *v26;
  __int128 v27;
  __int128 v28;
  char *v29;
  char *v30;
  __int128 v31;
  uint64_t v32;
  uint64_t v33;
  __int128 v34;
  uint64_t v35;
  uint64_t v36;
  _OWORD v37[2];
  id v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  char v43;
  uint64_t v44;
  char v45;
  char v46;
  char v47;
  char v48;
  __int128 v49;
  __int128 v50;
  char v51;
  __int128 v52;
  __int128 v53;
  char v54;
  _QWORD v55[4];

  if ((*((_BYTE *)a2 + 8) & 1) != 0)
    v8 = (const char *)*((_QWORD *)a2 + 2);
  else
    v8 = (char *)a2 + 9;
  v9 = (re::AudioFileAsset *)strcmp(v8, "AudioOptions");
  v10 = (int)v9;
  v11 = (const char *)*re::AudioFileAsset::assetType(v9);
  if ((*((_QWORD *)a2 + 15) & 1) != 0)
    v12 = (const char *)*((_QWORD *)a2 + 16);
  else
    v12 = (char *)a2 + 121;
  v13 = (_anonymous_namespace_ *)strcmp(v12, v11);
  if (v10 | v13)
  {
    v18 = v41;
    v19 = v42;
    *(_BYTE *)a3 = 0;
    *(_OWORD *)(a3 + 8) = v18;
    *(_OWORD *)(a3 + 24) = v19;
    return;
  }
  LOWORD(v41) = 0;
  BYTE2(v41) = 0;
  *(_QWORD *)((char *)&v41 + 4) = 0;
  v42 = xmmword_2260FDC00;
  v43 = 0;
  v46 = 0;
  v47 = 0;
  v48 = 0;
  v51 = 0;
  v54 = 0;
  Descriptor = re::AssetLoadDescriptor::getIntrospectableData<re::AudioLoadDescriptorParameters>(a2, (uint64_t **)&v41);
  if ((Descriptor & 1) != 0)
  {
    v15 = re::globalAllocators((re *)Descriptor);
    v16 = (re::AudioFileAsset *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v15[2] + 32))(v15[2], 168, 8);
    re::AudioFileAsset::AudioFileAsset(v16);
    v17 = re::AudioFileAsset::setConfiguration((uint64_t)v16, (uint64_t)&v41);
    if (v54)
    {
      re::AudioFileAssetProvider::loadAssetWithPath((re::AudioFileAssetProvider *)a3, (re::AudioFileAsset *)this, v16, (uint64_t)v55);
      goto LABEL_14;
    }
    if (v48 && v51)
    {
      v23 = this[6];
      re::DynamicString::DynamicString((re::DynamicString *)v37, (const re::DynamicString *)&v49);
      re::BundleFilePathRegistry::findWithBundleID(v23, (uint64_t)v37, &v38);
      v24 = *(_anonymous_namespace_ **)&v37[0];
      if (*(_QWORD *)&v37[0])
      {
        if ((BYTE8(v37[0]) & 1) != 0)
          v24 = (_anonymous_namespace_ *)(*(uint64_t (**)(void))(**(_QWORD **)&v37[0] + 40))();
        memset(v37, 0, sizeof(v37));
      }
      if (v38)
      {
        v39 = 0u;
        v40 = 0u;
        re::DynamicString::setCapacity(&v39, 0);
        if ((BYTE8(v52) & 1) != 0)
          v25 = (const char *)v53;
        else
          v25 = (char *)&v52 + 9;
        if (re::Bundle::pathForResource(&v38, v25, (re::DynamicString *)&v39))
        {
          re::AudioFileAssetProvider::loadAssetWithPath((re::AudioFileAssetProvider *)a3, (re::AudioFileAsset *)this, v16, (uint64_t)&v39);
        }
        else
        {
          if ((BYTE8(v52) & 1) != 0)
            v29 = (char *)v53;
          else
            v29 = (char *)&v52 + 9;
          if ((BYTE8(v49) & 1) != 0)
            v30 = (char *)v50;
          else
            v30 = (char *)&v49 + 9;
          re::DynamicString::format((re::DynamicString *)"Bad request - Couldn't find file %s in bundle with path %s", (re::DynamicString *)&v34, v29, v30);
          v31 = v34;
          v32 = v35;
          v33 = v36;
          *(_BYTE *)a3 = 0;
          *(_OWORD *)(a3 + 8) = v31;
          *(_QWORD *)(a3 + 24) = v32;
          *(_QWORD *)(a3 + 32) = v33;
        }
        if ((_QWORD)v39 && (BYTE8(v39) & 1) != 0)
          (*(void (**)(void))(*(_QWORD *)v39 + 40))();
      }
      else
      {
        if ((BYTE8(v49) & 1) != 0)
          v26 = (char *)v50;
        else
          v26 = (char *)&v49 + 9;
        re::DynamicString::format((re::DynamicString *)"Bad request - Couldn't find bundle with path %s", (re::DynamicString *)&v39, v26);
        v27 = v39;
        v28 = v40;
        *(_BYTE *)a3 = 0;
        *(_OWORD *)(a3 + 8) = v27;
        *(_OWORD *)(a3 + 24) = v28;
      }

      goto LABEL_14;
    }
    v20 = "Bad request - Couldn't load audio file without bundle path or asset URL";
  }
  else
  {
    v20 = "Failed to extract AudioSourceAsset parameters";
  }
  v21 = v39;
  v22 = v40;
  *(_BYTE *)a3 = 0;
  *(_OWORD *)(a3 + 8) = v21;
  *(_OWORD *)(a3 + 24) = v22;
LABEL_14:
  if (v54 && v55[0])
  {
    if ((v55[1] & 1) != 0)
      (*(void (**)(void))(*(_QWORD *)v55[0] + 40))();
    memset(v55, 0, sizeof(v55));
  }
  if (v51 && (_QWORD)v52)
  {
    if ((BYTE8(v52) & 1) != 0)
      (*(void (**)(void))(*(_QWORD *)v52 + 40))();
    v52 = 0u;
    v53 = 0u;
  }
  if (v48 && (_QWORD)v49)
  {
    if ((BYTE8(v49) & 1) != 0)
      (*(void (**)(void))(*(_QWORD *)v49 + 40))();
    v49 = 0u;
    v50 = 0u;
  }
  if (v43 && v44 && (v45 & 1) != 0)
    (*(void (**)(void))(*(_QWORD *)v44 + 40))();
}

void sub_22536D77C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, ...)
{
  va_list va;

  va_start(va, a17);
  if (a14)
  {
    if ((a15 & 1) != 0)
      (*(void (**)(void))(*(_QWORD *)a14 + 40))();
  }

  re::AudioLoadDescriptorParameters::~AudioLoadDescriptorParameters((re::AudioLoadDescriptorParameters *)va);
  _Unwind_Resume(a1);
}

uint64_t re::AssetLoadDescriptor::getIntrospectableData<re::AudioLoadDescriptorParameters>(re::AssetLoadDescriptor *a1, uint64_t **a2)
{
  uint64_t **v2;
  unsigned __int8 v3;
  __guard *v4;
  int v6;
  int v7;
  re::AssetLoadDescriptor *v9;

  v2 = a2;
  if ((v3 & 1) == 0)
  {
    v9 = a1;
    v7 = v6;
    v2 = a2;
    a1 = v9;
    if (v7)
    {
      re::introspect<re::AudioLoadDescriptorParameters>(void)::info = re::internal::getOrCreateInfo((re::internal *)"AudioLoadDescriptorParameters", (uint64_t (*)(re::internal *))re::allocInfo_AudioLoadDescriptorParameters, (re::IntrospectionBase *(*)(void))re::initInfo_AudioLoadDescriptorParameters, (void (*)(re::IntrospectionBase *))&re::internal::introspectionInfoStorage<re::AudioLoadDescriptorParameters>, 0);
      v2 = a2;
      a1 = v9;
    }
  }
  return re::AssetLoadDescriptor::getIntrospectableData(a1, (re **)v4[511], v2, 0);
}

void re::AudioLoadDescriptorParameters::~AudioLoadDescriptorParameters(re::AudioLoadDescriptorParameters *this)
{
  uint64_t v2;
  _OWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  if (*((_BYTE *)this + 168))
  {
    v3 = (_OWORD *)((char *)this + 176);
    v2 = *((_QWORD *)this + 22);
    if (v2)
    {
      if ((*((_BYTE *)this + 184) & 1) != 0)
        (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v2 + 40))(v2, *((_QWORD *)this + 24));
      *v3 = 0u;
      *((_OWORD *)this + 12) = 0u;
    }
  }
  if (*((_BYTE *)this + 128))
  {
    v4 = *((_QWORD *)this + 17);
    if (v4)
    {
      if ((*((_BYTE *)this + 144) & 1) != 0)
        (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v4 + 40))(v4, *((_QWORD *)this + 19));
      *(_OWORD *)((char *)this + 136) = 0u;
      *(_OWORD *)((char *)this + 152) = 0u;
    }
  }
  if (*((_BYTE *)this + 88))
  {
    v5 = *((_QWORD *)this + 12);
    if (v5)
    {
      if ((*((_BYTE *)this + 104) & 1) != 0)
        (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v5 + 40))(v5, *((_QWORD *)this + 14));
      *((_OWORD *)this + 6) = 0u;
      *((_OWORD *)this + 7) = 0u;
    }
  }
  if (*((_BYTE *)this + 32))
  {
    v6 = *((_QWORD *)this + 5);
    if (v6)
    {
      if ((*((_BYTE *)this + 48) & 1) != 0)
        (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v6 + 40))(v6, *((_QWORD *)this + 7));
      *(_OWORD *)((char *)this + 40) = 0u;
      *(_OWORD *)((char *)this + 56) = 0u;
    }
  }
}

void re::AudioFileAssetProvider::makeDescriptorWithBundle(void *a1@<X0>, void *a2@<X1>, unsigned __int8 *a3@<X2>, uint64_t a4@<X8>)
{
  id v7;
  _anonymous_namespace_ *v8;
  _anonymous_namespace_ *v9;
  re::AudioFileAsset *v10;
  const char *v11;
  size_t v12;
  id v13;
  _anonymous_namespace_ *v14;
  _anonymous_namespace_ *v15;
  _anonymous_namespace_ *v16;
  __int128 v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  _OWORD v21[2];
  unsigned __int8 v22;
  __int128 v23;
  __int128 v24;
  char v25;
  int v26;
  unsigned __int8 v27;
  unsigned __int8 v28;
  __int128 v29;
  __int128 v30;
  unsigned __int8 v31;
  __int128 v32;
  __int128 v33;
  char v34;
  __int128 v35;
  __int128 v36;
  uint64_t v37;
  char v38;
  uint64_t v39;
  const char *v40;
  uint64_t v41;
  char v42;
  uint64_t v43;
  char v44;
  uint64_t v45;
  __int128 v46;
  __int128 v47;
  unsigned __int8 v48[8];
  uint64_t v49;
  char v50;
  uint64_t v51;
  unsigned __int8 v52;
  int v53;
  unsigned __int8 v54;
  unsigned __int8 v55[8];
  __int128 v56;
  __int128 v57;
  unsigned __int8 v58[8];
  __int128 v59;
  __int128 v60;
  char v61;
  __int128 v62;
  __int128 v63;

  v7 = a1;
  v8 = a2;
  LOWORD(v46) = 0;
  BYTE2(v46) = 0;
  *(_QWORD *)((char *)&v46 + 4) = 0;
  v47 = xmmword_2260FDC00;
  v48[0] = 0;
  v52 = 0;
  v54 = 0;
  v55[0] = 0;
  v58[0] = 0;
  v61 = 0;
  *(_QWORD *)(a4 + 16) = 0;
  *(_QWORD *)(a4 + 24) = 0;
  *(_QWORD *)(a4 + 8) = 0;
  v9 = (_anonymous_namespace_ *)re::DynamicString::setCapacity((_QWORD *)a4, 0);
  *(_QWORD *)(a4 + 32) = 0;
  *(_QWORD *)(a4 + 40) = 0;
  *(_DWORD *)(a4 + 56) = 0;
  *(_QWORD *)(a4 + 48) = 0;
  *(_OWORD *)(a4 + 64) = 0u;
  *(_OWORD *)(a4 + 80) = 0u;
  *(_DWORD *)(a4 + 96) = 0;
  *(_OWORD *)(a4 + 104) = 0u;
  *(_OWORD *)(a4 + 120) = 0u;
  *(_QWORD *)(a4 + 136) = 0;
  re::DynamicString::setCapacity((_QWORD *)(a4 + 112), 0);
  v40 = "AudioOptions";
  v41 = 12;
  v10 = re::DynamicString::operator=((re::DynamicString *)a4, (uint64_t)&v40);
  v11 = (const char *)*re::AudioFileAsset::assetType(v10);
  v12 = strlen(v11);
  v40 = v11;
  v41 = v12;
  re::DynamicString::operator=((re::DynamicString *)(a4 + 112), (uint64_t)&v40);
  objc_msgSend(v7, "bundleIdentifier");
  v13 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue());
  v14 = (_anonymous_namespace_ *)objc_msgSend(v13, "UTF8String");

  LOBYTE(v40) = 1;
  re::DynamicString::DynamicString((re::DynamicString *)&v41, (const re::DynamicString *)&v43);
  re::Optional<re::DynamicString>::operator=(v55, &v40);
  if ((_BYTE)v40 && v41 && (v42 & 1) != 0)
    (*(void (**)(void))(*(_QWORD *)v41 + 40))();
  v15 = objc_retainAutorelease(v8);
  v16 = (_anonymous_namespace_ *)-[_anonymous_namespace_ UTF8String](v15, "UTF8String");
  LOBYTE(v40) = 1;
  re::DynamicString::DynamicString((re::DynamicString *)&v41, (const re::DynamicString *)&v37);
  re::Optional<re::DynamicString>::operator=(v58, &v40);
  if ((_BYTE)v40 && v41 && (v42 & 1) != 0)
    (*(void (**)(void))(*(_QWORD *)v41 + 40))();
  v17 = *((_OWORD *)a3 + 1);
  v46 = *(_OWORD *)a3;
  v47 = v17;
  re::Optional<re::DynamicString>::operator=(v48, a3 + 32);
  v18 = v52;
  if (v52 || a3[72])
  {
    if (!v52 || a3[72])
    {
      if (!v52 && a3[72])
      {
        v18 = 1;
        v52 = 1;
      }
      v53 = *((_DWORD *)a3 + 19);
    }
    else
    {
      v18 = 0;
      v52 = 0;
    }
  }
  else
  {
    v18 = 0;
  }
  v54 = a3[80];
  v21[0] = v46;
  v21[1] = v47;
  v22 = v48[0];
  if (v48[0])
  {
    re::DynamicString::DynamicString((re::DynamicString *)&v23, (const re::DynamicString *)&v49);
    v18 = v52;
  }
  v25 = v18;
  if (v18)
    v26 = v53;
  v27 = v54;
  v28 = v55[0];
  if (v55[0])
    re::DynamicString::DynamicString((re::DynamicString *)&v29, (const re::DynamicString *)&v56);
  v31 = v58[0];
  if (v58[0])
    re::DynamicString::DynamicString((re::DynamicString *)&v32, (const re::DynamicString *)&v59);
  v34 = v61;
  if (v61)
    re::DynamicString::DynamicString((re::DynamicString *)&v35, (const re::DynamicString *)&v62);
  re::AssetLoadDescriptor::setIntrospectableData((char **)a4, (const re::IntrospectionBase *)re::AudioFileAssetProvider::s_loadDescriptorParametersIntrospect, (const re::IntrospectionBase **)v21, 0);
  if (v34 && (_QWORD)v35)
  {
    if ((BYTE8(v35) & 1) != 0)
      (*(void (**)(_QWORD, _QWORD, uint64_t, uint64_t))(*(_QWORD *)v35 + 40))(v35, v36, v19, v20);
    v35 = 0u;
    v36 = 0u;
  }
  if (v31 && (_QWORD)v32)
  {
    if ((BYTE8(v32) & 1) != 0)
      (*(void (**)(_QWORD, _QWORD, uint64_t, uint64_t))(*(_QWORD *)v32 + 40))(v32, v33, v19, v20);
    v32 = 0u;
    v33 = 0u;
  }
  if (v28 && (_QWORD)v29)
  {
    if ((BYTE8(v29) & 1) != 0)
      (*(void (**)(_QWORD, _QWORD, uint64_t, uint64_t))(*(_QWORD *)v29 + 40))(v29, v30, v19, v20);
    v29 = 0u;
    v30 = 0u;
  }
  if (v22 && (_QWORD)v23)
  {
    if ((BYTE8(v23) & 1) != 0)
      (*(void (**)(_QWORD, _QWORD, uint64_t, uint64_t))(*(_QWORD *)v23 + 40))(v23, v24, v19, v20);
    v23 = 0u;
    v24 = 0u;
  }
  if (v37 && (v38 & 1) != 0)
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)v37 + 40))(v37, v39, v19, v20);
  if (v43 && (v44 & 1) != 0)
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)v43 + 40))(v43, v45, v19, v20);
  if (v61 && (_QWORD)v62)
  {
    if ((BYTE8(v62) & 1) != 0)
      (*(void (**)(_QWORD, _QWORD, uint64_t, uint64_t))(*(_QWORD *)v62 + 40))(v62, v63, v19, v20);
    v62 = 0u;
    v63 = 0u;
  }
  if (v58[0] && (_QWORD)v59)
  {
    if ((BYTE8(v59) & 1) != 0)
      (*(void (**)(_QWORD, _QWORD, uint64_t, uint64_t))(*(_QWORD *)v59 + 40))(v59, v60, v19, v20);
    v59 = 0u;
    v60 = 0u;
  }
  if (v55[0] && (_QWORD)v56)
  {
    if ((BYTE8(v56) & 1) != 0)
      (*(void (**)(_QWORD, _QWORD, uint64_t, uint64_t))(*(_QWORD *)v56 + 40))(v56, v57, v19, v20);
    v56 = 0u;
    v57 = 0u;
  }
  if (v48[0] && v49 && (v50 & 1) != 0)
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)v49 + 40))(v49, v51, v19, v20);

}

